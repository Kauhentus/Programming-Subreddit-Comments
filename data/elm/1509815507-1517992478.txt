Thanks for asking this question, and I hope you get a good breadth of answers here. This topic has probably been the hardest thing for me about making things with Elm.
&gt; "Transform a Maybe value with a given function." I think that is implicit in the definition of Maybe that for a value to exist it has to be the payload of Just.
Update: *six!*
Elixir has dyalizer which is a tack-it-on type system. We use Elixir extensively for all our backed backend services. While it's not nearly as runtime free as Elm the immutability, the functional nature, the pipe operator, the module system all feel very similar. Overall Phoenix is just an awesome web framework that's easy to learn and very comprehensive. Haskell had lots of options but all that I've explored are far too complex for a beginner like myself.
I use Rails, but mainly because I have all these projects that are already in Rails and I wanted to add some Elm features. It works fine, but there isn't much type-safety in the JSON output.
My apps have spanned the full range of complexity and size, as well as the full range of maintainability and quality. I feel like I've finally learned some guiding principals that have caused my apps to become better and easier to maintain overall.
&gt; I'm not sure NPM is the solution to any problem. It's the solution to the problem of 'we need to interop with the rest of the JavaScript ecosystem with minimal hassle. &gt; Clear beginner friendly entry guide. &gt; There's actual documentation.... Documentation is a matter of time. &gt; OCaml has a total division on standard libraries and I don't even know which one wins. This is FUD, OCaml has a single standard library _that is shipped with the compiler_ and additional libraries that you can use depending on your needs.
Good advices In other languages you have to design it well when coding. Because you won’t have much help refactoring it later (refactoring hurts..isn’t that a song also?). But levering the refactoring strengths of Elm you don’t have to worry about this that much. you Focus on the problem, and solve it. When you find that new things the app need to do, which require you to refactor some existing code. Use the force. Refactor. It won’t be so bad, Elm will help out. Doing this (late refactoring, or just refactoring) in python is painful, I can tell you :)
Well if you use webgl or svg you could do it in raw elm. However if you really want to do it on Elm I would look up some ports tutorials. Ports are actually very easy in Elm. The hard (ish) part is the decoders. However if Elm is always pushing stuff to JS then you would only have to write encoders which are easier. I would subscribe to a port in JS inside of a requestAnimationFrame, in Elm there's a Time.every subscription inside the core library. Good luck 😀. 
There used to be a direct implementation in Elm that contained "Native" code, however now we're trying to limit the JS code as much as possible. Probably the easiest way is going to be with Ports
It's 2017, why are people still using paper-cups and string for their audio?
better audio setup coming soon
Thanks, I think that was the point I was dancing around and didn't quite hit! I have written a lot of Ruby, just did a massive refactoring of a Rails app, and my god it was painful.
This is why you might do a lot more automated tests in some languages (especially python javascript and ruby).. because you need the extra help for when you change things.. It seems in Elm people don't bother with as much testing, because the compiler helps more on this.
Thank you very much 😀
Exactly. Even with the tests, I have less confidence in my rails app.
Hello, having an issue with Maybe value fields, given: type alias Thing = {name : String, id : Maybe Int} number : Thing number = Thing "one" (Just 1) number2 : Thing number2 = Thing "two" (Just 2) add : Maybe Int -&gt; Maybe Int -&gt; Int add n n2 = (n.id) + (n2.id) --errors I get a few errors saying n &amp; n2 don't have the id field. So what would be the syntax to correctly access them? Thanks.
Hello, given: type alias Thing = {name : String, id : Maybe Int} number : Thing number = Thing "one" (Just 1) number2 : Thing number2 = Thing "two" (Just 2) add : Thing.id -&gt; Thing.id -&gt; Int -- wrong add n n2 = What would be the correct syntax to state that "add" takes the .id field of Thing? Thanks.
You don't specify that in the type signature, just say it's a `Thing`: add : Thing -&gt; Thing -&gt; Int add n n2 = -- Your code here n.id ++ n2.id -- Example of how to access the .id field
Ah, I got it with: add : Thing -&gt; Thing -&gt; Int add n n2 = (Maybe.withDefault 0 n.id) + (Maybe.withDefault 0 n2.id) main = text (toString (add number number2) ) Thanks, makes sense now.
&gt; In other languages you have to design it well [before you start] coding. Because you won’t have much help refactoring it later I agree, refactoring is easier due to Elm's strong typing. But there's more: * Stront typing forces you to define types well as-you-go, especially neat for your model data types. In absence of strong typing you need to come up with types beforehand, or struggle with them as-you-go (basically because refactoring is much harder). * Elm gives you both a language and a framework/architecture (TEA). This makes it easier to get started without designing an architecture, as it is pretty much a given. 
This isn't quite as simple as elm-reactor, but I've been using the webpack loader with debug set to true (elm-webpack-loader?verbose=true&amp;warn=true&amp;debug=true). It almost ends up being as simple, since I've been using this code generator to start new projects: https://github.com/danneu/generator-elm.
I make all the style stuff with elm, then turn it to a style tag at the top of the view function. Very nice and simple. Works with reactor.
Oh, so rather than use an external CSS or inline styles you use embedded style tags? Interesting.
Nothing elm-live and elm-create-app support this and are super easy, especially the later
This is not Elm, but Haskell. Though Miso implements the Elm architecture (TEA) in Haskell/GHCJS. The project demonstrates neat code sharing between client and server: model types, UI routes, views. I does routing and rendering both on the client and on the server using the same code. I post it here for us to have some inspiration, and possible a glimps into the future of that is possible when code is being shared by both ends of the network. 
I use this as index.html and open this file in reactor. You can define your styles inside head tag. Verify if the port (8000) and file path (src/Main.elm) are correct in the snippet &lt;html&gt; &lt;body&gt; &lt;script type="text/javascript" src="/_compile/src/Main.elm"&gt;&lt;/script&gt; &lt;div id="main"&gt;&lt;/div&gt; &lt;script&gt; if (Elm.Errors) { document.body.innerHTML = `&lt;iframe src="http://localhost:8000/src/Main.elm" frameborder="0" style="overflow:hidden;width:100%" height="10000"&gt; &lt;/iframe&gt;`; } else { var app = Elm.Main.embed (document.getElementById ('main')) } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 
I just use https://www.npmjs.com/package/create-elm-app
I know a lot of folks have used the webpack loader successfully, but IIRC it doesn't render compiler errors like elm-reactor, which is a feature I quite like. I also prefer brunch's simpler build configuration for most projects, so I forked one of the existing brunch plugins and added an option for error rendering: https://github.com/MattCheely/elm-fancy-brunch I also created a brunch project skeleton for it: https://github.com/MattCheely/elm-brunch-skeleton 
I think you mean "create-elm-app" :)
https://github.com/evancz/guide.elm-lang.org
What is considered best practice for generating module documentation? I don't mean when to use `@docs` etc. but rather how to generate the formatted documentation itself. I realise I can preview nicely formatted documentation at http://package.elm-lang.org/help/docs-preview but I would like to create a static page so I can share with colleagues while testing the use of the module. I see there is a third-party utility https://github.com/ento/elm-doc but I am surprised there appears to be no official way of generating docs that have yet to make it to the accepted community packages. 
Ah yes :)
Cool project, but reading the source made me appreciate Elm's clean syntax and the opinionated formatting from elm-format.
Elm is a DSL, with (currently) very little use beyond the browser. Haskell, the language that Elm is almost a subset from, is a very mature language that has been successfully applied to many problem spaces. With GHCJS the browser is clearly one of them, but certainly not it's strongest ground. :)
My solution is like this: create your own HTML file, the way you like it, then use script tag to load your main Elm module and open that file through reactor's file browser. It should just all work this way, I hope I did not forget about something, it's been a while since I did it :)
&gt; This is not Elm, but Haskell This would be an appropriate post for /r/haskell but unfortunately it's not for /r/elm :) Thanks for understanding!
But that is all just .md files in that repo. There are no .elm files anywhere ! I wanted to know where the .elm files for that website are.
If you go to http://elm-lang.org and scroll at the very bottom, there is a link in the footer. Anyway here it is: https://github.com/elm-lang/elm-lang.org/
As another option, we're using this library in production https://github.com/saschatimme/elm-phoenix. An important note is that this library uses side effects which makes it unable to be published to the package repo but you can still use it by installing the package using https://github.com/gdotdesign/elm-github-install. This is the only library we're using (out of about 50 libraries included in our larger SPA) that has this limitation but it's been so beneficial that we've chosen to use it anyway. As for implementation, we use the library in the following ways: 1. We use Phoenix channel events to push an event (ex: load, save, execute etc.) to the back-end. You can attach a payload to these events so that they become extremely similar to a standard web request. The library mentioned also allows for onOk and onError to trigger messages (Msg) within our app which completes the request/response loop. 2. For data where we may just get a push from the back-end, we subscribe to these events and setup the same type of handler (Msg) to receive the data 3. A final note is that we scale our subscriptions up and down based on what system/page the user is on and what channels they need to be connected to. This allows us to not be wasteful and leave a bunch of connections open when they aren't necessarily needed. We use something similar to what Richard does here for scaling the subscriptions https://github.com/rtfeldman/elm-spa-example (see pageSubscriptions). So far these methods have worked out really well for us and I figured I'd share.
I love working in Elm, but it's a shame that the "common limitations" include functionality such as this. Good work!
The website is a [gitbook](https://www.gitbook.com). The .md files are all there is. You can create your own books if you want to play with how that works. 
Is there any guides for front-end novice on how to set up environments? One of the reason that I like about elm is to avoid the Javascript fatigue, i.e. avoid choosing among all the different frameworks. is npm/yarn sufficient for typical elm with ports set-up? Or use browserify/webpack/brunch/gulp/grunt/extra shell script is required?
I also posted it on /r/haskell... There's also load of Elm info over at /r/haskell, but heay, if I can take this as a warning from a senior community member to not post Elm-like or Elm-inspired stuff in /r/elm I will comply. Please note that it is one of the best upvoted comments of the week here at /r/elm -- so democratically the community seems to appreciate the post.
&gt; Thanks for understanding! Seems the post is now also removed from /r/elm. *Nods head.*
&gt; not post Elm-like or Elm-inspired stuff in /r/elm Yeah, /r/elm is intended to be about Elm itself, not Elm-inspired projects in other languages. :)
I think it is very narrow for a subreddit, I see x-posts in other proglang subs all the time: and they are some of the best post! If I was the moderators I'd let the community figure out what the like to see by them using the voting feature. Elm was featured a lot on r/haskell, and hopefully is discussed a lot on r/javascript; this the natural flow in formation. But who am I? You're the mod! Have a nice day, and thanks for all the effort you put into Elm.
Here's a sneak peek of /r/haskell using the [top posts](https://np.reddit.com/r/haskell/top/?sort=top&amp;t=year) of the year! \#1: ["Category Theory for Programmers" has been finished!](https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/) | [39 comments](https://np.reddit.com/r/haskell/comments/6x7ms0/category_theory_for_programmers_has_been_finished/) \#2: [Fantastic job everyone who made this happen!](https://i.redd.it/9ha4w2o5d0rz.jpg) | [33 comments](https://np.reddit.com/r/haskell/comments/75h6yx/fantastic_job_everyone_who_made_this_happen/) \#3: [Typing the technical interview](https://aphyr.com/posts/342-typing-the-technical-interview) | [62 comments](https://np.reddit.com/r/haskell/comments/64lg42/typing_the_technical_interview/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
To be fair, all of these except `confirm` already have pure Elm analogs today, and I personally don't think `confirm` is worth ever supporting because it's worse UX than what you can build without using `window.confirm()`. So calling these "limitations" is a bit of a stretch. 😉
Sorry for the confusion, and thank you for being cool about it! ♥️
[removed]
Hello, fellow beginner here.. Sorry but I cannot help, but I noticed that the elm slack group is a lot more active in answering questions
Not necessarily the best answer but this is really just a classic tree structure right? You can model each level as a node which has an Id, possibly a parentId and an expanded state. Depth doesn't really matter, as long as you update the right node to expand it out etc. Whether or not it's easier to work with as a List of nodes or a Dict of Id : Node is kinda up to you, as it depends what kind of operations you want to do....the main problem being if you collapse a node higher up that has a bunch of children expanded that you can walk through and collapse those. As for memory efficiency Elm is pretty fast so I'd just do it the simple way and then tweak if needed once you get a basic version working...you might end up surprised that it works as is!
Check out https://github.com/elm-lang/virtual-dom/blob/master/src/VirtualDom/Expando.elm - it's the code for the Expando widget that `elm-reactor` uses for displaying Elm values like records and such. Folks on Elm Slack - http://elmlang.herokuapp.com - can help with any questions you have about how that code works! 😀
Functional programming languages like Elm are great for modeling tree structures. Take a look at [elm-treeview](http://package.elm-lang.org/packages/gribouille/elm-treeview/latest) or [chae-tree](http://package.elm-lang.org/packages/turboMaCk/chae-tree/latest). [This example in the chae-tree repo shows how to make a tree with collapsing/expanding nodes](https://github.com/turboMaCk/chae-tree/blob/master/examples/BrowserExample.elm).
I would approach this by keeping track of the expanded states with a `Set (List String)`. The `List String` values represent paths into the data structure, and the set holds all the paths that the user has expanded (or if expanded is the default, then it can keep track of the ones that are collapsed). For example, you might represent the path to the first object in the array that’s found under the key "foo" in the root object as `["foo", "0"]`: first look up the "foo" key to find an array, then look at index 0. Because `Set`s can only store `comparable` values, we need to stick to a `Set (List String)` instead of using some union type that can store both String and Int indexes depending on whether we're talking about an object or an array for that particular place in the path. Luckily we can make that choice when we do the lookup: if we're in a `VObject` then we do a `Dict.get` with the key directly; if we're in a `VArray` then we use `String.toInt` on the string key and get the corresponding index of the `List`. Note that you might want to use an `Array` instead of a `List` here in the `VArray` since you'll be indexing into it so much, and you say that the data structure might get quite large. If so, I recommend using the `Skinney/elm-array-exploration` package for your Arrays since the Arrays in Elm core are unfortunately still buggy: http://package.elm-lang.org/packages/Skinney/elm-array-exploration/latest As you render the data structure recursively, you keep track of the current “stack” of keys for wherever you are in the data structure, and use that both to check if it should be rendered as expanded or collapsed, and also to supply to the `onClick` event handler so that the event for that particular UI toggle will add or remove the right path from the set. I hope that helps!
1. I frequently need to get some CRUD working don't have the extra 2-4 hours to implement non window.confirm() confirmation checks, or the extra week to implement undo. It works well enough. 2. How do you focus an element in Elm now? 3. I am still waiting on a release of the Html library that supports better key event filters. I know people do that now by nesting event handlers, but I am just following the path of least resistance until that feature is added.
Well, 90% what I use it for is just focusing text boxes. Everything else is left over from earlier times, and confirm is only rarely needed.
1.http://package.elm-lang.org/packages/elm-lang/dom/1.1.1/Dom#focus 2. That's fair, but anyone could right now implement a package which addresses your use case (with an equivalently easy API) using `elm-lang/html` alone. I'm not saying it's an unreasonable desire, just that it's not a language limitation. :) 3. Also completely fair, but again - this can also be addressed using a pure Elm package! Just to be clear, it's totally not my business how you want to write your code - I just saw a comment indicating that others are taking this code snippet to mean that these are use cases that can't be addressed in pure Elm, and I wanted to make sure it was clear that they can be. :) 
This is awesome! Great work and great writeup! ♥️
For 1, there is [this](http://package.elm-lang.org/packages/elm-lang/dom/1.1.1/Dom#focus). I don't understand your 3rd point, could you elaborate?
Whaaattt a reply from *the* rtfeldman!? Seriously this made my day :D
Pretty neat! Good learning material :) Thanks.
This is amazing, thank you!! I have been trying to find the source of that elm-reactor inspector since last week. I forgot to mention that in my post. This file answered every question I had!
I will join y'all there!
Thanks a lot, I will take a look
This is what I was originally going for, but I think rtfeldman's solution might be better. This solution doesn't require me to modify the large data structure though, so I may end up doing something similar if the performance of Expando.elm is bad. Thank you!
Yeah I am definitely not criticizing Elm, first response got the wrong idea. This is a small snowball of use cases I worked on since I adopted Elm well over a year ago, and has been shrinking ever since. I completely forgot about the Dom package, because sending data to a port a port is actually slightly easier than running a Task.
This isn't intended is a criticism, most of the use I get out of this is the "focus" command, which now exists in the Dom package. The rest is a snowball that grew in Elm 0.16 and started shrinking after 0.17 released.
Not being able to call preventDefault and stopPropagation on key press events based on which key was pressed is a known limitation of the Html.Events modules. I believe the issue is closed, and a fix will be in an upcoming release.
Ah, ok. Thanks for clarifying. here the relevant links for other reader: https://github.com/elm-lang/html/issues/66 https://github.com/elm-lang/virtual-dom/issues/18 And indeed, it is already solved in the upcoming 0.19 
❤️ ❤️ ❤️
I definitely find Elm more clean (pipe operators, qualified imports...) and I think it has many advantages over Purescript. But I really wish Elm had more type system features / polymorphism capabilities. Hope it'll get some in the future. The main Purescript's issue for me is that, when it comes to rendering performance, its existing libraries are quite slow and Elm is probably the fastest thing in the world. So I see Elm as the best available option for frontend right now.
I love both languages. Haven't had a chance to try Purescript on the frontend yet (just small node.js apps for now), thanks for sharing your experience with regards to performance.
That's not really my experience (I haven't used Purescript too) but some benchmarks I've seen. Here is the article: https://medium.com/@saurabhnanda/benchmarks-fp-languages-libraries-for-front-end-development-a11af0542f7e But it may be OK for you in practice... I just find it risky to invest my time into learning Purescript and building my app with it to only discover that the performance isn't satisfactory for my needs later. I'm mainly afraid about performance on cheap Android devices. 
It'd be cool to have your Elm app use ports to Purescript. Now if only I understood all of the abstractions and could convince my team to learn all of them.
Amazing, shame its not up to date for 0.18
Great content, but the audio quality really let you down. Perhaps try diffusers, moving the mic closer, a larger room, and a higher quality mic (in that order?) Also, would touching on the guarantees one can get from opaque types be appropriate here?
Hi, take a look at other branches besides master. For example, the utf8 branch of elm-compiler was updated a day ago: https://github.com/elm-lang/elm-compiler/tree/utf8 The development is rather slow, but Elm definitely isn't abandoned.
Release frequency slowed down but work on the language is going on just fine. You'll have to look at the dev branches in order to see the commits (for example, the last commit on the core was 4 days ago). Elm has little chance of becoming abandonware since there are some businesses that bet the house on Elm. As long as NoRedInk exists, Elm should be just fine. Even if NoRedInk disappears, Evan has few years of buffer resources that he said he will use if need be. On the ecosystem front, the situation is great with the number of available packages doubling to 789 this year. Elm 0.19 will be made available when it will be ready. I have no idea when that will happen, most likely in the first half of next year. 
Thanks, I got a new mic, and a new room, so hopefully things are better now 
Even if NRI how's away there is http://foundation.elm-lang.org/
I've been using it Elm on the side for several years now and encouraging other folks to try it out. It has a ton of great ideas that I think many folks could benefit learning - frontenders, backenders, library/framework devs, and language designers alike. That said, I am concerned about how well Elm itself it will fare in the next few years. Elm seems to have a pretty cloistered development model, so much of the work is done hidden away on other branches. Work is getting done, but it's slow going. Evan seems to be quite concerned about getting the design of many key things _right_ before letting them free on the community, but that leads to considerable slowdowns and frustration and a lack of communication. Things like work upgrading the compiler to GHC 8 do not need to be taken on by Evan himself, but there seems to be reluctance to encourage any other collaborators in helping out. It would be lovely to see the development open up and become more trusting and collaborative - it could really help them as the community grows and more companies make the bet on Elm.
Probably check out the Slack as well. Many discussions are happening there every day. The real concern is that there are few companies using Elm and it can affect in the long run. Many of them in the [list](https://github.com/lpil/elm-companies/blob/master/README.md) seem to drop Elm or i hope they still use it internally but it seems unlikely if you check its github or its website. Of course Elm wont disappear in one day, but it definitely doesn’t feel like it is on the way to be mainstream yet. 
I was expecting 0.19 to come in the end of the year :(
Hey - I found something called [Elm Router](https://www.elm-tutorial.org/en/07-routing/02-routing.html) there's a really helpful tutorial for it! I'm not sure why the advanced tutorial isn't easier to find from the simple one, but it's useful.
Hey, thanks for linking to this! I actually ended up using [Elm Router](https://www.elm-tutorial.org/en/07-routing/02-routing.html). Is there any reason you have a preference for this method?
I would like to know also if there is going to be 0.19 release soon
It looks like a pretty similar approach, I think. Both examples use the Navigation package and build on top of it using (I think) the same basic ideas. It seems to me that the main difference is that elm-spa-example is just a much bigger “real world” example that uses more techniques to provide a polished user experience. The routing tutorial you linked to seems like a fine place to start though.
Elm is actively developed. The libraries may not be quite as active than JS ones for multiple reasons. I think perhaps the first and foremost would be _no run-time exceptions_. When you don't have run time exceptions much of the bugs that get reported in JS libraries go away. The more you use a JS library the more you discover that _weird_ edge-case where it throws an exception. If you don't have to fix any of these the only things to fix are package design problems / unimplemented features. It's possible to actually get to a pretty "perfect" package quickly if the scope is small. 
It might still happen but since not even the alpha was released, I give it a very low probability. 
You might like `purescript-spork`. It's a very lightweight, performant TEA clone that lets you "build your own Elm", so to speak. I'm still working on documentation, but it's easy to get started if you already know Elm (https://github.com/natefaubion/purescript-spork/blob/master/examples/todo-mvc/src/Main.purs). The todo-mvc example is less than 20k minified and gzipped, and includes location and local storage.
I dabbled around a bit with `spork` and it is truly amazing.
I’m currently rewriting a part of Ellie in PureScript and this covers all of the mistakes I make most often. Thank you so much for putting this together and sharing it!
I'm hard at work :) I have always been confused by the idea that a package is not trustworthy if it has not had a release in the last month. As if constantly fixing bugs is a sign of quality... Like others have said, the development cycle here is slower and more deliberate than whatever random JS package. A bunch of people and companies rely on `elm-lang/core` and the compiler, so making changes there means the whole ecosystem needs to get upgraded too. I think it'd be irresponsible to have the whole ecosystem doing that every month, so I try to keep things stable and have really solid releases that make upgrades worth the trouble. The expectations people form from looking at the JS world are not really relevant here. With the amount that I am working, I'd say the concern is not warranted ;) Hope that clarifies!
&gt; A lot of people think that (1) languages are just features that need implementing, (2) these features should be placed on a calendar, and (3) we should throw people at the features until they are done early. This is not how Elm has developed! &gt; &gt; First, when it comes to language design, I think doing things right is far more valuable than doing things right now. It is easy to think short term and rush features, but languages live for decades, and there are no take-backs on mistakes. https://github.com/elm-lang/projects/blob/master/roadmap.md
On the other hand there were about 150 new /r/elm subscribers last month. That's a fair amount. Also I don't see an alternative to Elm, that is growing faster or at the same pace, so why bother?
&gt; I'd look to languages like Clojure and Python to get better expectations on how releases work. Both [Python](https://docs.python.org/3/whatsnew/changelog.html) and [Clojure](https://clojure.org/community/devchangelog) had several release this year. Both of these languages are mature languages where a slower release cycle is to be expected. Elm is still in development and it is normal to expect a shorter release cycle. Not counting dev releases, there were 6 releases in 2014, 4 in 2015 and only 2 last year. This year will probably be the first year without any Elm release. Not even a patch release. This does not look healthy. &gt; And finally, with the amount that I am working, I'd say the concern is not warranted I beg to differ. The concern is warranted but it has less to do with how much work you and others put in development of Elm and more to do with how transparent and well communicated this work is. I wonder if maybe concerns like these have less to do with how healthy Elm is and more to do with how healthy Elm appears to be. The OP was trying to convince people who don't know Elm and, for such tasks, appearances might matter. 
Probably the elm make stuff eh?
&gt; I wonder if maybe concerns like these have less to do with how healthy Elm is and more to do with how healthy Elm appears to be. Could be. My feeling is that I can focus primarily on making a great release, or I can divert time to communicating all the intermediate steps super well. That second path means (1) the release takes longer because it takes a lot of time to communicate expectations clearly, (2) the release takes longer because getting things in a shape were folks can give _useful_ and _actionable_ feedback is quite time consuming, (3) it is significantly more stressful because of people pressuring me to release too early on every single public interaction I have, and (4) the "Holy moly!" factor that is available on release day is diminished because it is "late" rather than "cool new features". That is how I see it at least. I am aware that you feel differently Peter. You let me know on every public post I make. Saying it more times does not make it a more persuasive argument. To me it feels like you are trying to use public pressure to force me to revisit prioritization decisions that I have documented. I feel compelled to respond for the Nth time _for the sake of new readers_ who may not know about [this](https://github.com/elm-lang/projects/blob/master/roadmap.md) or [this](https://youtu.be/DSjbTC-hvqQ) where I try to outline the process here in a clear way, not because your arguments are getting more persuasive as you repeat them more times. The fact that every public interaction turns into a Q&amp;A with people who already know the answers plays into how I feel on points (1) and (3) above. So if your goal is to be supportive or to encourage me to talk online more, your behavior is having the opposite impact. I wouldn't say it is [concern troll](https://rationalwiki.org/wiki/Concern_troll) behavior because I think you have good intentions, but I want to be accessible to new folks and _your behavior in particular_ makes me question if I should say anything at all. I hope I have been clear here.
As a counter-point: I actually held off on picking up Elm exactly because it had been going through so many releases. Going through the blog posts of the releases revealed quite a few language changes, and the idea of having to re-learn (and forget) parts of the language itself every few months seemed crazy to me.
&gt; You let me know on every public post I make. Saying it more times does not make it a more persuasive argument. I apologize. I know I have expressed my disagreement on certain topics before but I was not aware that I did it this often. &gt; your behavior in particular makes me question if I should say anything at all. Again, I apologize. Last thing I want is to hurt Elm in any way. 
You're very welcome! Ellie is super cool, I'm glad it's helpful :)
I appreciate your focus on keeping Elm simple and stable. And your attempts to communicate clearly and thoughtfully with the community.
My 2 cents on "there're only two choices" thing. There's another way on dealing with this that can improve the current situation and keep everyone(most of the people?) happy: *delegation*. If someone takes over the PR part of the Elm development, website, blog, subreddit posts, etc. then you wouldn't feel any kind of pressure, you won't "feel compelled to respond" to recurring subjects. All of this goes away so you can be focused on preparing a great release while somebody is taking care of the public side. It would eliminate questions like "Is there gonna be any Elm 0.19?" questions. Seeing newcomers asking that kind of question doesn't feel right, imho. This *somebody* can also be a "reverse proxy" who's gathering feedback, filtering it and presenting to you. That's optional, of course, but I guess *reasonable, filtered* feedback is important for current and future work. We're not "trolls" and we all are very thankful for your work on Elm!
Some quick action things that might aid reducing your isolation (no pressure to do these things, but they might help): - Switch the default branch on Github to `dev` in the repository settings. This makes it clearer to see where you are up to in relation to the other branches. - Branch off a personal fork and PRs as opposed to working on `dev` directly. This provides insight into the development process and shows progress without you having to directly communicate. Even if you just directly merge it straight after. - If you come across nice-to-have quality of life things like updating GHC, make an issue. A 'help-wanted' label on Github can make it clear what you are delegating to other people rather than taking it on personally. These small things would give people more confidence that you are interested in making Elm a friendlier and more welcoming place from a compiler development perspective, just as it is a friendly place on the package development and application development perspective. Thanks so much for all you have done for everyone both inside and out of the Elm community. Elm has really pushed us all to try to develop better languages. Sorry if I've come off as 'concerned trolling' in the past - it comes from a place of love rather than malice. You probably have a huge amount going on in your head that we can't see, and I'm sorry if I've added to your mental stress - open source development is hard and thankless. Anyway, I'll do my best to resist the urge to 'love you to death' in the future, so this will be my final word on the subject. Thanks again, Elm is a lovely language and has given me much inspiration and excitement for the future of programming!
&gt; I definitely find Elm more clean (pipe operators, qualified imports...) and I think it has many advantages over Purescript. But I really wish Elm had more type system features / polymorphism capabilities. Yeah, I'd love a Purescript+Elm fusion in the future. I think Elm has made a great deal of 'right' decisions syntactically and from an API perspective. The tricky question is where to go from here. I would love to see some further exploration into [Modular Implicits](https://arxiv.org/abs/1512.01895) and [1ML](https://people.mpi-sws.org/~rossberg/1ml/) (under a different name) instead of typeclasses. You could begin by restricting them to concrete types initially, like `Eq`, `Ord`, `Show`, `Num`, etc. then open them up wider down the line. This would ease the burden of trying to explain everything to the community at once, and buy time for experimentation.
&gt; Also I don't see an alternative to Elm, that is growing faster or at the same pace It all depends on how you weigh the factors. But alternatives exist in quite a number: * ReasonML/react-reason * ReasonML/bucklescript-tea * Haskell/GHCJS/Miso * PureScript/Halogen * PureScript/Pux Surely Elm is unique in the combination strong type safety, beginner friendliness, using JS primitive types, DSL-approach and blessed architecture (TEA). But some alternatives are overtaking Elm with: server-side rendering, server-side UI routes, same language for BE, integration with React, language features, (potential) [community size](https://trends.google.com/trends/explore?date=all&amp;q=reasonml,elm-lang,elm%20github). 
&gt; using JS primitive types Probably would argue that Bucklescript/Reason and Purescript beat Elm at that, especially BS, which does excellent work uncurrying functions in order to be more friendly to Javascript JITs. They also compile to JS modules making it much easier for them to interoperate with existing JS code, work with existing tooling, and help companies to roll back to JS if the language doesn't work out, making them seem a much riskier choice to bet on. It's great to see so many other languages iterating. That said, I'm still rooting for Elm because I think it has a much more beautiful core, if a bit limited in terms of extensibility ([this could be fixed](https://www.reddit.com/r/elm/comments/7c82tb/interested_in_learning_purescript_this_cheatsheet/dpqdmxu/), but it would be a challenging design problem to maintain Elm's shallow learning curve). Will be cool to see where it goes in the coming years. I'd really like to see them keep up with the competition in terms of compiler engineering!
I wasn't aware of how far ReasonML grew. The last time I saw, it looked like a (cool) toy project of one dude experimenting with OCaml, (IIRC).. But now it has facebook and many contributors involved... I bet a big bunch of the *functional/react* crowd will move to *ReasonML/react-reason*, for their react legacy code bases and for the react ecosystem. I don't really think the *react* architecture makes a lot of sense if you go fully functional though. But if *ReasonML* grows strong *bucklescript-tea* may become the biggest Elm contender, I guess. I don't see why *Haskell/GHCJS* or *PureScript* should take off.
Can you please elaborate on why you are doing this?
Cool, haven't heard about it. But actually I'm more interested in component-based solutions (something like Halogen) because I'm not a believer in Elm's "reusable views" approach. I've even managed to implement components in Elm and I'm testing it now in my project, but it's not so flexible as I want it to be and the underlying implementation is quite complicated. But it does the job so I'll stick with Elm for now. By the way, as I understand it uses `purescript-halogen-vdom`. Its guide says: &gt;The core of Halogen.VDom strives to be as fast as possible. It does this through pervasive use of monomorphic Eff do-blocks (which are optimized into imperative JavaScript) and Data.Function.Uncurried (which eliminates the overhead of currying). I have a question, does that mean that it can possibly be as fast as if it was just written in JS instead? If not then why not to implement it in JS like Elm does? Also, does it use `requestAnimationFrame` to skip unnecessary rerenders like Elm so we can get high-performance animations? If not then why? 
Have you checked out ReasonML's reducer components? It sounds like they do exactly what you want: https://reasonml.github.io/reason-react/blog/2017/09/01/reducers.html
&gt; I don't really think the react architecture makes a lot of sense if you go fully functional though. I do not see React as an architecture. It is just a way to do "view" code. For an architecture it needs something like Redux, which is TEA inspired. 
Go check out the source for Ellie. There's some 'sinful' native modules there ;-)
Tough. I got to 22.28 seconds.
I love Elm, and I don't mind the wait. One of the reason I don't allow it just yet in my current react/redux code base, is code-splitting. As far as I understand the core Elm javascript code has to be shipped with every chunk that might include Elm code at the moment.
&gt; I have a question, does that mean that it can possibly be as fast as if it was just written in JS instead? If not then why not to implement it in JS like Elm does? The goal of `purescript-halogen-vdom` is to be as fast as possible, while still being written primarily in PureScript. Just like Elm, we like to write as much as we can in PureScript. I think it would be difficult to write a virtual-dom implementation in pure Elm, and so it makes sense to push that to JS. It's possible to write `Eff` code in PureScript though and get fairly standard, imperative JS out of it. Because `Eff` is a pure value, there is still some closure allocation overhead that's difficult to erase without an optimizing compiler, and so halogen-vdom tends to use more memory and put more pressure on the GC. This will get better as the compiler improves, but it's already possible to write decently efficient UIs with it. The test directory implements the DBMon repaint test, which I think is an alright "real-enough-world" test. I find results vary from machine-to-machine pretty drastically, but you can get a good relative basis for performance. On my old macbook, I could got 60 FPS with thunking in Chrome. I've found that every library has worse absolute numbers on my new machine, so I don't know what that's about. Overall, I think there's room to improve (and likely improve the implementation), but it's good for the majority of use cases right now. Just to touch on the performance aspect of Halogen: Halogen automatically optimizes and thunks at all component boundaries. A component update always results in a diff of _only_ the component initiating the transition. Child components are automatically thunked, and won't be diffed unless they've also initiated a state transition. Halogen does not currently expose any primitives for thunking arbitrary chunks of vdom. All implementations I know of (including spork, though it does expose a primitive which also supports arbitrary equality) rely on referential equality which can often fail to work depending on how you call your function or construct your arguments. Halogen tries to avoid this and opts for something that's always reliable. The benchmark you linked to doesn't use any components (except the top-level app), and so diffs the entire tree on every change. Every library performs poorly in this case. I've worked on the largest PureScript codebase in existence (that I know of), and Halogen performed well enough for that. &gt; Also, does it use requestAnimationFrame to skip unnecessary rerenders like Elm so we can get high-performance animations? If not then why? Spork does not do this in the _core_ event queue. It always responds to direct inputs synchronously. I think ubiquitous rAF batching is a poor default. Once the event queue starts, however, it will only render once it stabilizes. That means synchronous effects don't result in multiple renders. For example, if you get DOM input, and you spawn a sync effect to get a random number which results in a new input, it will process two transitions, but only render once. Spork itself does not prescribe how effects are managed though, and so it's possible to do rAF batching on the effect/sub side. Thanks for the questions!
/u/ShadowLinkX9 is exactly right, it's because of the native modules. i don't want people pointing at my code as an example of why elm should have direct ffi! the structure of the build manager code is extremely monadic and switching to ports would turn the whole thing inside out. purescript is a great language, it's fun to use, and i don't have to change the structure of the program much at all.
yep!
Fine with me. All I'm trying to say is that I find the way React is designed (components that carry state) seems OOP-ish in itself. If you remove *setState* from React and make it *functional* you're left with [this funky thing](https://reasonml.github.io/reason-react/docs/en/counter.html). 
https://github.com/leomayleomay/FitTreat, this is a demo app I have been working on to get hold of Elm Native UI (https://github.com/ohanhi/elm-native-ui), it's a really satisfying process to have a working app by writing Elm code, the only thing concerns me is I am not quite sure if I am doing it correctly to have so many ports exposed so I could take advantage of the React Native community's work :)
Isn't removing `setState` what `reason-react` does? https://jaredforsyth.com/2017/07/05/a-reason-react-tutorial/#4 It pretty much is a React-based TEA-like architecture, where Redux is replaced by "the language" (same reason Elm does not need a Redux). Still ReasonML is not "pure functional" like Elm (and Haskel, and PureScript), as it does not denote side effects in the type system.
&gt; Isn't removing setState what reason-react does? &gt; It pretty much is a React-based TEA-like architecture Yes and yes. That's what I wanted to demonstrate with the link. It looks like a quirky version of TEA stuffed into a component. Not sure if this design makes a lot of sense in a *functional* world, but I would choose it over normal React any time.
Thank you for the detailed response! &gt;I think ubiquitous rAF batching is a poor default. What disadvantages do you think it has? One that I can think of is issues that can occur when you unavoidably rely on the DOM state (like dropped keystrokes when listening to the `onInput` while bounding the `value` property to your model). But it seems to me that it's very important for animations.
Yes, this is what I want. But there are some things that I dislike about ReasonML like that it doesn't enforce purity, also I like Elm's syntax more. But ReasonML is still a great option and I would have probably chosen it if I had failed to implement components in Elm. But my solution actually works very well and I'm happy with it! It includes things like local state/effects, automatic init/update/subscriptions management, communication between components etc. with almost no boilerplate. I have plans to open source it once it is tested and I'm fully satisfied with the API.
https://github.com/astynax/tea-combine, this is a combinator library for models, views and updates. You just combine some models/views/updates and library will take care about auxiliary messages, dispatching, etc. Here some example apps, that were built with my lib: - https://astynax.github.io/tea-combine/examples/pure.html - just a bunch of "components" composed in the various ways, - https://astynax.github.io/tea-combine/examples/form.html - a form with binding to the record-type. For me most valuable feature is a neat way to build complex forms w/o manual handling of auxiliary messages and w/o any type erasure (any input control can have its own typed state, validations, etc - all this stuff will be handled automatically).
Yes, exactly that. It seems like a minor change but has many subtle and unintuitive effects. I think rAF batching is reasonable in a lot of cases, so I'm not saying it shouldn't be done. You can attach it to the trailing end of effects and subscriptions, which is probably what you want anyway.
https://github.com/mpizenberg/demo-elm-image-annotation This is a demo for the package mpizenberg/elm-image-annotation. This is a work in progress. I am trying to use mdgriffith/style-elements and mpizenberg/elm-pointer-events to make this demo responsive and multi-device friendly.
Actually last week, I applied concepts from "The life of a file", "The Importance of Ports" and elm-spa-example to my project.
I also like this approach very much for short explorations. Pro: Just 1 file and if I want to keep it, I can extract the style easily Con: You're not supposed to use style tags like that :) example: module Main exposing (main) import Html exposing (Html, div, h1, text) import Html.Attributes exposing (class) css : String css = """ body { background-color: #ddd; } h1 { border-bottom: .2em dashed black; } """ main : Html msg main = div [] [ Html.node "style" [] [ text css ] , h1 [] [ text "Example" ] ] 
http://phxsockets.io/ which is more or less like Postman, but for testing Phoenix sockets and channels :)
This is great. I generally avoid using type variables, even when I'm pretty confident they're appropriate. Not sure why, I'm perfectly happy to use generics in Rust...
I'm among the newbies; thanks for outlining your reasoning in this post about the release cycle since I probably wouldn't have seen it elsewhere! Based on context I'm assuming you're Evan(?) Great work, keep it up!
Ah yes, your approach makes it easy to move it out if needed later. I am using http://package.elm-lang.org/packages/danielnarey/elm-stylesheet/latest which makes it easy to compose a stylesheet with functions. That helps to not have to repeat yourself, keeping things consistent. Still remains flexible so can produce any sheet you want. And you don't get any auto-generated stuff that you didn't ask for.
Lose that prejudice, dive in, type variables can be indispensable for code quality. Write some code with type variables to get used to it, perhaps implement a few functions for the generic file structure from the blog post as practice
I would have personally documented the MSG type itself. On the other hand I always struggle to find good names for the union type in the first place. Someone describing their best practises would be really nice!
&gt;You can attach it to the trailing end of effects and subscriptions Got it. This really makes sense.
Are you making a lot of messages with long names to add something like namespaces to them? You should split your `Msg` type into multiple subtypes instead when you need this. Here is an example: https://youtu.be/DoA4Txr4GUs?t=15m5s Also, if you have code that does some non-obvious things, just use regular comments to make it clearer: {- This is a documentation comment. Use it to document functions and modules. -} -- This is a regular comment. 
Sorry, I've made a mistake. `{- ... }` is a multiline comment, so it's ok to use it. Documentation comments are `{-| ... }`.
Type variables are great for constraining implementations, so they are a valuable tool for reducing the chance of bugs, and communicating just how much power a function needs to do its job. Elm has a huge advantage over Rust in that its type syntax is much cleaner and lightweight, which makes it much easier to introduce and use type variables without reducing readability (I say this as a heavy user of Rust). The one limiting factor that might be reducing your usage of type variables is a lack of a way of constraining them, like with Rust's traits. You can use record passing style though, for example: type Display a = { fmt : a -&gt; a } displayString : Display String displayString = { fmt = id } displayList : Display a -&gt; Display List a displayList d = { fmt = List.map d.fmt } listifyThings : Display a -&gt; List a -&gt; Html msg listifyThings d things = let itemify x = li [] (text (d.fmt x)) in ul [] (List.map itemify things) Alas you might run into issues where your 'methods' need their own scoped type variables, and the fact that it can be frustrating to pass around these records all the time, the latter reason being one of the reasons why Elm hasn't used this for `toString` or equality and ordering.
+1 for showing me Electron is a thing
I think this approach makes much more sense. Mine is actually code smell... thanks.
In fact, it was an hard choice... but I was face to a cornelian choice : - Take 100000h with a very funky language to design an UI - Move forward with Electron :) I do not regreat my choice ! Thanks for your comment !
Just a few days of work in it so far, but I've already had some fun playing with it! Elm learning curve isn't too bad so far, even though I've never done any functional programming, never programmed in a typed language, and haven't been on the front end in years (mostly a Ruby backend person by day) Next task: figure out how to separate elm apps into multiple files efficiently and do some code cleanup :) https://github.com/estiens/crate-digger
Nice work. You may find [elm-electron/core](https://github.com/elm-electron/core) and [elm-node/core](https://github.com/elm-node/core) helpful. Also [elmGrove](r/elmGrove) is a nice place to post about and discuss these alternative usages of elm (i.e. outside the browser)
Thanks a lot for your feedback ! I bookmark elm-node and elm-electron. Thanks! (Outside the real goal to write my own finder, an another goal was to fight versus my fear of webpack !)
Woah... this looks like the kind of dark magic that I want to learn!
Relevant: https://github.com/johnomarkid/elm-electron-webpack
[Elm ToDoMVC](https://github.com/evancz/elm-todomvc/blob/master/index.html) shows how to save data in local storage. 
See the elm-spa-example for how to sync localstorage with your elm model, in particular: Javascript side: https://github.com/rtfeldman/elm-spa-example/blob/master/index.html#L22-L30 Ports setup and subscribing to changes: https://github.com/rtfeldman/elm-spa-example/blob/master/src/Ports.elm https://github.com/rtfeldman/elm-spa-example/blob/master/src/Main.elm#L173-L175 Example of storing session to localstorage after login: https://github.com/rtfeldman/elm-spa-example/blob/master/src/Request/User.elm#L16-L20 https://github.com/rtfeldman/elm-spa-example/blob/master/src/Page/Login.elm#L139-L142 
Love it! I'd like to leave feature requests. Will you kill me? :-)
Of course not 
I've been avoiding Electron because of the massive performance overhead. (Slack is an Electron app and it kills the CPU.) Any thoughts on that? Also, how did you find doing what must be a considerable number of JS calls through ports - not too cumbersome? 
&gt; I've been avoiding Electron because of the massive performance overhead. (Slack is an Electron app and it kills the CPU.) Any thoughts on that? Also, how did you find doing what must be a considerable number of JS calls through ports - not too cumbersome? Yes, Slack is ... heavy: / But Atom and VScode is doing well, now, very well (I think). Currently, I must admit that I have not "felt" a big slowdown (and I rarely consume more than 100mo, which is already huge, I grant you). For my use I have no worries =) (but maybe the machine that I was given at work is really powerful)
Is there an easy way to try this?
This looks pretty nice, well done! Why only OSX though? What prevents this from running on linux or windows? 
Looks really cool! Just needs some vim keybindings ;) (is that something you’d want/accept outside help with?)
http://package.elm-lang.org/packages/r-k-b/elm-interval/latest It's for interval math, like `(2, 9] ∩ [4, 6] = { (2, 4), (6, 9] }`. The original need was a way to track which ranges of item (IDs | timestamps) we'd already transferred, so we can efficiently transfer another range of items.
This is really great, and all without any advanced type system features. It seems like the answer to the mass boilerplate required - and very simple. Is it possible to write a combinator to compose the whole "widget"? (i.e. compose all the parts, model, update, view, 'binder'). I guess the types inferred might look slightly gnarly, too - at some point I suppose you have to stop and write a type alias?! 
Wow, I'm also working on image annotation with elm, I'll have to checkout your work! I've spent the last week trying to nut out how to manage interactions with a state machine and banging my head on a desk regarding html/web programming which I have not touched for some time. My current research is surrounding 'assisted' annotation - i.e. putting the human in the loop for deep learning systems. The previous annotation program was a C++/Qt program. Presumably you're also working with image recognition/deep learning? 
Exactly :) I'm also not a "web" guy but kinda fell in love with elm ^^. You might want to check the work we just published at ACM MM 17 last month: https://github.com/mpizenberg/otis Let me know if you would be interested to talk ;) even if it's only about elm. My user on the elm slack is mattpiz
Thanks a lot :)
Thanks a lot
After installing Elm, you can use make install and make 
Probably because it's just simpler to target a single platform. Sometimes better: 1. You build the tool you wanted faster for the platform you use 2. If there's interest in the tool by the community you can always revisit and add platform support as needed
In fact, i'm an Emacs-guy, so I don't really know the "vim keybindings". But I really like "the two mode active/writting" in what I know about vim. So it could be a nice improvement.
Exactly @lewisinc. I think that, via Electron, we don't have to much work to fix Qian to be multiplatform. (Fix the terminal-prompt for example). But actually, I don't have the OS (and the time) but it is on my todolist ! Thanks for your feedback ! 
Cool, thanks for the reply. Totally understandable to focus first on the platform you use. Seems like in the particular case of the terminal, as soon as you make the terminal configurable, you automatically get support for Linux too.
Exactly ! 
I'm the author of https://github.com/the-sett/elm-swagger. It is not so much unfinished as barely started, the first push to github was only yesterday! My intention is to do client side code generation, and also server side targeting ktonon/elm-serverless to begin with. I'm developing it publicly on github, rather than waiting till it is any good before revealing it, partly so that others can contribute or give feedback. So please let me know about your use cases and desired features. === Some more info about my code generation projects in general. I have some good experience with Elm code generation so far, I am able to generate json decoders/encoders and a full client side for a CRUD + finders API using my own code generation framework. My code generation framework consists of code written in Java, Prolog and StringTemplate. Mostly it has been used to generate Java + DropWizard projects; API, database, validations and unit tests can all be automated. At the moment I am thinking of re-writing it in Elm, and elm-swagger will be my first attempt at doing that. The Prolog part in particular is very hard to understand and I think a functional style would work better there. The Java parts are simply becoming too large, its 170K lines of code, and I think a functional style will be more concise and well suited to manipulating ASTs and doing code generation and pretty printing. I started doing this about 15 years ago, at the time there was no free Prolog interpreter for the JVM. So naturally, I wrote my own Prolog compiler... a bit crazy I know. But I know a lot about writing compilers now! 
&gt; I can focus primarily on making a great release, or I can divert time to communicating all the intermediate steps super well. I think there is probably a silent majority here that understand the pressures you are under and know that you are making good choices and doing an awesome job.
Another approach you could take would be to contribute to the official code generation tool. I believe it has a plugin structure, so it is simply a question of writing an Elm plugin for it. In Java. The official OSS Swagger tools leave a lot to be desired in terms of their quality and flexibility, which is partly why I prefer to write my own.
If you want support for 3.0, add it to swagger-elm :) We are planning to use it for our production code base eventually. 
Why not add 3.0 support to swagger-elm, which already has done a bunch of this work? Communities grow stronger through collaboration, rather than doing the same thing in 5 different ways.
&gt; When I started talking about it with some friends, they're immediate question was about the state of the ecosystem, since abandonware is a problem in the js world. Worth mentioning that you should consider the state of _ecosystem_ and not just the kernel. We'll be getting a shiny new 0.19 Elm kernel sometime... when its ready. In the meantime the 0.18 ecosystem continues to grow daily with new packages and updates coming out on http://package.elm-lang.org/ almost daily. I wanted to post up a link to a stats page for the packages that lets you see all the new releases by date. Someone compiled such a report, and posted it to elm-discuss or elm-dev, but I cannot find it any more. Please link if you know where it is?
It is not a bad idea. The reason I chose to ignore swagger-elm was that I have a wider set of use cases than it. swagger-elm does swagger.json -&gt; Elm code. I want to do: swagger.json -&gt; model in Elm (Decoder) model in Elm -&gt; swagger.json (Encoder) model in Elm -&gt; Elm code model in Elm -&gt; ... other languages code DSL in Elm -&gt; model in Elm lo-fi data/API model -&gt; model in Elm model in Elm -&gt; runtime that lets you interact with an API without doing codegen (obviously with weaker typing). and so on. So its really about using a model to translate between different needs.
The 3.0.0 spec is structurally different to the 2.0 spec, which makes maintaining both versions backed by the same model a little tricky. It may be easier to start the 3.0.0 version almost from scratch rather than building on 2.0. Perhaps there is a way to re-use 2.0 in 3.0.0? This helps to visualise the differences: https://blog.readme.io/an-example-filled-guide-to-swagger-3-2/ Giving me a bit of a headache just now, as I want to support AWS API Gateway, but they are stuck on 2.0 and AWS never joined the OpenAPI consortium. I would rather baseline my work on 3.0.0, but perhaps I'll have to do 2.0 and provide an auto-upgrade conversion.
Note that the approach that you took, using ports and flags, is the recommended way to work with things like Electron from Elm right now. Great job!
Yes, infered types growing big very fast. It is a price for composability. There are no type operators in Elm so we can't write type like this: type alias Model = Counter.Model :*: Form.Model :*: Nav.Model type alias Msg = Counter.Msg :|: Form.Msg :|: Nav.Msg Maybe this feature will appear in the future :) &gt; Is it possible to write a combinator to compose the whole "widget"? It is a pretty simple to compose models and updates simultaneously. But we can't compose views in a generic manner: some views can represent the elements of list, other ones - components of form, another ones - just stay aside as inline blocks. That's why combinators `&lt;::&gt;` and `&lt;:&gt;` compose a function `model -&gt; List (Html msg)` instead of `model -&gt; Html msg`. It is possible to combine records with type `{model : ..., view : ...., update : ...}`, but such composition still will require some hand wiring.
YAML is a superset of JSON. Do you need any YAML-specific features? If not, you could use Elm's JSON encoding features.
Aside from the fact that JSON is already YAML, presumably you want it without the {}. The Encode.Value type is completely opaque: https://github.com/elm-lang/core/blob/master/src/Json/Encode.elm#L37 So you can't use an existing JSON encoder to also output YAML. I would suggest passing an Encode.Value to a port and using json2yaml to output what you want. That way you get JSON and YAML formats from the same Encoder.
Hi, you can look into using the [Html.Lazy](http://package.elm-lang.org/packages/elm-lang/html/2.0.0/Html-Lazy) functions to make sure that view refreshes are minimised. They are the rough equivalent of 'shouldComponentUpdate' in React. You might find that you don't need it though but it is useful if you do. Unfortunately it only goes up to 3 arguments so if your view relies on more bits of data than that then you have to group them *in your model* in order to make it work :/ There should be options with update to 8 arguments (I think) in the next release of Elm. In your particular case, you could collect the data in one part of the model and then when certain conditions are met you could transfer it over to another part of the model and then your views could lazily dependent on that second part of the model. I'm not super experienced though. There might be other approaches.
I’m not sure, but read this http://elm-lang.org/blog/blazing-fast-html And, if you only use the parts needed for the view in the view functions there’s no need calculate the virtual dom diff for the model you’re trying to change in the background. 
Viens en parler sur /r/Quebec demain dans le Vendredi fourre-tout.
Hi do2, as woberto said, Html.Lazy is one good option. What you have to know about Html.Lazy is that it uses referential equality of arguments to test if it needs to compute a new virtual dom. So if somehow your changing data is one of this arguments, it won't work. You have to distinguish the data used for computation, and the one used for visualization. Another option, probably more complex would be to use web workers. For that, I would advise you read this post: https://medium.com/@nithstong/elm-with-web-workers-1c2c3d55f939 Good luck :)
Yeah, for sure type operators (or even just infix types) would help a lot. Just a few features from Haskell please :) type alias Model = Both (Both (Counter.Model, Form.Model), Nav.Model) type alias Msg = Either Counter.Msg (Either Form.Msg Nav.Msg) It's not too bad. I'll try it out for sure - the lack of composability in Elm is tedious. One other idea I've been toying with is using closures to hide state. Using a structure like this: type alias Widget msg = { view : () -&gt; List (Html (Either msg Widget)) } Which keeps it's own state by means of self recursion. I think it does not really work though, in general - because I think Elm can process several events before the next view is generated? Especially if asynchronous commands are in play. 
What type `current` has?
Current is `Set (Int, String, Maybe String, Maybe String, Bool) `
&gt; Elm can process several events before the next view is generated? Even if `update` will return a bunch of `Cmd`s, each `Cmd` will produce its own `msg` (maybe later), so we will have a number of calls of `update`+`view` in the future. AFAIK, Elm's runtime calls `view` for every call of `update`, even when `model` stay untouched. That's why we have `lazyView`: `view`+`lazyView` let us to control what we need to memoise/cache and what we need to "redraw" each time.
I mostly keep the defaults but some tweaks were necessary to make the search work on Windows (defun dotspacemacs/user-config () (setq helm-ag-base-command "c:\\ProgramData\\chocolatey\\bin\\ag --vimgrep") ;; ag installed via chocolatey package manager ) Spacemacs asks you to install a new layer when it encounters files it knows what to do with but you can explicitly add the layers you want to use (defun dotspacemacs/layers () ;; List of configuration layers to load. dotspacemacs-configuration-layers '( haskell elm shell helm auto-completion better-defaults emacs-lisp git markdown ;; org ;; (shell :variables ;; shell-default-height 30 ;; shell-default-position 'bottom) spell-checking syntax-checking version-control ) ) ) Sometimes the ELPA package repo would be down with https, so a workaround can be disabling this when the issue ocurrs (defun dotspacemacs/init () (setq-default dotspacemacs-elpa-https nil ;;t ) ) I wanted to try some more themes, but then I stuck with `dracula` (defun dotspacemacs/init () (setq-default dotspacemacs-themes '( dracula ;; &lt;- my favorite for fullscreen whiteboard ;; &lt;- good light theme leuven ;; &lt;- another good light theme monokai spacemacs-dark spacemacs-light alect-dark-alt darkokai darktooth dichromacy espresso gruvbox-dark-medium inkpot majapahit-dark material monokai obsidian sanityinc-tomorrow-day sanityinc-tomorrow-eighties soft-morning subatomic tango tangotango tsdh-light wombat) ) ) I reset the default shell and added that Elm imports are always sorted (defun dotspacemacs/user-init () (elm :variables elm-sort-imports-on-save t) ;; eshell ;; shell ;; term ;; ansi-term ;; multi-term (shell :variables shell-default-shell 'eshell) ) If you come from VIM and miss the integrated tabs [layouts and workspaces](https://github.com/syl20bnr/spacemacs/blob/master/doc/DOCUMENTATION.org#layouts-and-workspaces) is what you're looking for 
The problem is that your `record` is not comparable. There should have been a hint like: &gt; Hint: Only ints, floats, chars, strings, lists, and tuples are comparable. 
yeah, I'm not so sure and not a big fan, imho these are pretty hard to handle for a beginner and you have instant lock-in
that's exactly the kind of thing that I tend to use, although more often than not I just use some handwritten CSS/less, I've never used a great range of these design system widgets
&gt; ( Int, String, Maybe String, Maybe String, Bool ) Аh, I see! Elm's `Set` can contain only `comparable` set of types. Compiler event says about this constraint: Hint: Only ints, floats, chars, strings, lists, and tuples are comparable. `Maybe` isn't `comparable`.
Oh of course! Thank you for your help! 
I can't believe I didn't notice that, thank you! 
This is a known problem: Elm's support for sets and dictionaries of user defined types is not good. Your best bet might be to find one of the Dict libraries that work around this, and make a Dict mapping your type to (), which is basically a set.
Alright, what are these videos exactly. I mean, I don't have any context behind what these guys are saying (besides the previous video being posted a while ago), and they don't really talk about anything of substance - just feels. I like Elm. I think it's really fucking cool, fun and pragmatic software that solves a real problem. That being said, I'm not sure what this adds to anyone's understanding about Elm. Not that these guys don't know what they're doing, mind you - this is just a really _bad_ way to market Elm. As far as being a case study, there are really no supporting arguments for Elm being good beyond, "It's scary to think of migrating back an existing Elm system of ~70k LoC to Javascript" and "I'm happy with Elm". Anyways, I try not to be be too critical in general - it's just really easy for me to be with this video series.
I seriously hope this is the framework that ends all frameworks.
It is a crazy good experience, eh? :)
I don't know about Python, but Clojure's last release (not counting alphas or betas, so 1.8) was two nearly years ago, and there have been few posts since then. Clojurescript, on the other hand, has frequent releases.
I'm strongly in favor the "do it right, even if it is slower" philosophy. The javascript ecosystem suffers from too much and too rapid churn, which is stressful and results in a lot of lost time trying things out, backing and filling; the stability of the Elm ecosystem is by contrast reassuring to me. Also, I've been impressed by what I've seen at the last three conferences I've attended. Example: the style-elements package, which IMHO is a revolutionary way of dealing with the CSS headache. Another: I started an Elm meetup in my (mid-sized) city. Two developers from a company with a presence here showed up -- I had never met them before, but learned that they are using of Elm in production and plan to make steadily more use. This is not a company that I had heard mentioned at the conferences I've been to. My guess is that there are many such.
&gt; not counting alphas or betas, so 1.8 but...why? regular and visible beta evolution has positive utility. clojure 1.9 had an update almost every month (give or take), and even if it's not 1.9 final yet, the releases do matter on a variety of levels. (that said, similarly to elm, some in the clojure community have expressed concerns about general communication issues wrt the core langage dev team.)
another appeal to invisible people: there are also all those who investigate elm and pass on it due to the no visible activity, and those who switch away.
I have to say the same. I'm currently working on my final practice exam on elm and it is super enjoyable
C'est fait!
Non, je t'ai suggéré de le poster dans le fil vendredi fourre-tout. Pas comme fil individuel.
Elm gives you really strange comforting feeling. You don't have that stupid thoughts like "do I missed something?" or "do I need to check this case?". I'm glad I tried it. 
Hello, recently been playing a bit with elm and making simple single-page static web-apps To generate the html file, I just use `elm-make Main.elm` which works except for two small things * No mobile meta tag * No custom title So far I've been manually modifying `index.html` afterwards, which works but is annoying and doesn't feel right. Is there something in my elm code that I need to add to include the mobile meta and custom title? or need to use special flags for `elm-make`?
I think you meant to say language but yeah, I agree!
great answer, saving
And next step is to introduce Elm in your workplace. Lets be mainstream. 
I dont know that thats a responsibility of elm. [emmet](https://emmet.io/) would be useful when authoring html 
You can tell the Elm compiler to output JS instead of HTML by using something like `elm-make --output my-js-file.js Main.elm`. That keeps it from modifying your `index.html` file every time you compile.
Awesome, keep at it man! The blog post by itself is worth the read, the game is just the cherry on top :) Regarding the game - I've played a lot of Snake in my younger years, and I noticed a few design decisions that make it hard to achieve a high score: 1. When the head is following the tail, it's impossible to tell where the tail ends and the head begins. This leads to nasty situations and premature deaths 2. On the *Hard* difficulty, when the Snake eats the Food, the tail grows, instead of the head. This is the opposite to the classic Snake, where, once the head eats the food, the head merges with the food, so to speak. The fact that the tail grows by more than one food element doesn't help either 3. On the Classic Snake (at least the one I used to play) there was a slight delay before dying when touching a wall/the body of the snake. This made it easy to use the wait-till-you-hit-something-then-turn-away tactic. It gets pretty easy to not die once you pass the 300 score on hard. That's all for now, I'll update if I notice anymore *game design* stuff. There are people much more experienced than me to talk about the code stuff :)
This worked, thanks! 
Which is a lot harder than I initially thought. Every developer I introduce to Elm is like WOW THIS IS AWESOME but decision makers higher up aren't convinced so easily.
This looks awesome! Is there a way to get it up and running in VS Code, too? Aren't VS Code and Atom closely related somehow?
Thank you! I have thought about this. My understanding is that both use Electron under the hood, but I haven't looked into how similar or dissimilar their plugin APIs are. I tried, while developing it, to put as much general application logic into the Elm layer, so that it would be portable out of Atom. Theoretically, it should be possible to drop the Elm layer into VS Code, and if the ports can all be wired up to similar functionality, then everything should just work (that's a big "if," though). This is on my roadmap, but I've got a few other utilities in mind before I get to that.
Gizra/elm-all-set
Thank you for this message! I really appreciate seeing positivity like this in this forum :) And I'm glad the project went well!
Great, neat and tidy post and game! Also loved the mention of using gitlab CI as a simple deployment solution. Few remarks about it: 1. You might want to use a specific elm version in your install command like: `npm install elm@0.18.0` 2. In case you might want to deploy it on a personal vps you could do something similar to this: stages: - build - deploy build: stage: build image: node:latest before_script: - git submodule update --init --recursive - npm install --unsafe-perm -g elm@0.18.0 - elm-package install --yes script: - elm-make Main.elm --output public/app.js cache: paths: - elm-stuff artifacts: paths: - public only: - master deploy: stage: deploy image: dinofizz/rsync-ssh script: - echo "${SSH_PRIVATE_KEY}" &gt; id_rsa - chmod 700 id_rsa - mkdir "${HOME}/.ssh" - echo "${SSH_HOST_KEY}" &gt; "${HOME}/.ssh/known_hosts" - rsync -hrvz --delete --exclude=_ -e 'ssh -i id_rsa' public/ "${SSH_USER_HOST_LOCATION}" only: - master where `SSH_PRIVATE_KEY`, `SSH_HOST_KEY` and `SSH_USER_HOST_LOCATION` are set up in the repository parameters in gitlab. Of course they should not be visible to anyone else than you :)
One thing I can recommend to improve your solution is to use the [`elm-lang/animation-frame`](http://package.elm-lang.org/packages/elm-lang/animation-frame/latest) package instead of `setTimeout` to wait until the view is rendered. But you can actually create custom attributes for [`selectionStart`](https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Property/selectionStart) and [`selectionEnd`](https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Property/selectionEnd) properties using the [`property`](http://package.elm-lang.org/packages/elm-lang/html/2.0.0/Html-Attributes#property) function. There is also a [`select`] event which you can use to update your model when the user changes the selection. But I haven't tried it myself so I don't know how reliable and cross-browser it is.
That is super helpful. Using a specific version makes a ton of sense
 selectionStart : Int -&gt; Attribute msg selectionStart position = property "selectionStart" (Encode.int position) selectionEnd : Int -&gt; Attribute msg selectionEnd position = property "selectionEnd" (Encode.int position) These attributes work just fine. I could not imagine it was that *small* to extend the view to all DOM properties. Thanks.
There's a lot of love for this project - no doubt about that.
I see, thanks. YAML is just the preferred format for kubernetes spec files to make them a little more human readable. I'll work in json and translate to YAML with a js library.
Usually the Ellie examples show up inline.. I'm trying to sort that out now.
Oh that's clever. Thanks for the post :)
I have this project that I wanted to start for some time. It's a classified site with a twist. Now I know Elm is best suited for SPAs and less for content websites but I've been following it for a few years, built a small app this summer, and I like it a lot. Also, my project would have some features that I think are very well suited for Elm. That being said I've been trying to figure out what my stack should look like for this project and I have a couple of questions that I would love to get some feedback on: - any of you worked with GraphQL in an Elm project? care to share your experience? I worked with GraphQL in React apps and I enjoyed it. - what should I use for CSS? I was thinking just to start out with plain ol'css and see other options like elm-css and style-elements later on. - any of you rendered Elm on the server in production? Planing to do that and have a CDN cache the pages for a fast first time loading. Any other advice you folks might have is more then welcomed. Thanks! 
Very neat. This reminded me of a section in the Rust book: https://doc.rust-lang.org/stable/book/second-edition/ch17-03-oo-design-patterns.html I think they use a similar pattern to mock an example where they use it to validate blog posts.
[removed]
It's still there and should still work - What specifically isn't working for you?
This is neat, and finally pushed me to actually start writing tests for some of my code. I wonder if it could be slightly smarter about working out where the test directory is? I am having trouble figuring out which file/folder needs to be active in order for it to find the tests, so I often get an error. Perhaps when you open a project in Atom it could crawl through the project tree and look for folders called "Tests" that contain an elm-package file or something?
I'm just working on an app that's based on [elm-hipster-stack](https://github.com/carleryd/elm-hipster-stack/) and `elm-spa-example`. I do use GraphQL on both end sides - Elixir and Elm. Both (GraphQL libraries) are hard to grasp on. At first I thought I would code by example but both Absinthe (Elixir side) and [jamesmacaulay/elm-graphql](https://github.com/jamesmacaulay/elm-graphql) lack examples. It would be pretty interesting and much quicker to generate Elm code based on GraphQL queries which does the [jahewson/elm-graphq](https://github.com/jahewson/elm-graphql) library but it's pretty forgotten. Elixir is nice to type but it's type checking is nothing like Elm so I'm disappointed here. Runtime errors do happen pretty often which is of course not the case with Elm. There is compilation step but you can pass `nil`freely. For SPA itself - I had some troubles because I ended up with lifting 3 kinds of messages - component's local messages, global message like "set session" (for sign in) or "set route" (SPA URL navigation) and root message (in `Main.elm`) to deal with routes and pages. But I did it and I'm quite satisfied with it. For CSS I tried to do my own markup by just string concatenation. May look ugly but pretty familiar and doesn't need a big system like `elm-css` to build upon: ```elm type LoginStyleClass = Form | BtnLogin cls : LoginStyleClass -&gt; String cls c = c |&gt; t2k cs : LoginStyleClass -&gt; Options.Property c m cs c = cls c |&gt; Options.cs loginStylesheet : String loginStylesheet = c Form ++ """{ display: inline-flex; flex-direction: column; padding: 25px; position: relative; } """ ++ c Form ++ """ &gt; .mdl-progress { position: absolute; bottom: 0; left: 0; right: 0; } """ ++ c BtnLogin ++ """{ margin-top: 20px; align-self: flex-start; }""" ``` It's working pretty well when you remove something from `type LoginStyleClass` - you have to update CSS then. And I can use almost plain CSS that way. Would be nice to have some string interpolation in there. But! Just yesterday I wrote one whole Page with inlined css like this: ``` [ css "display" "inline-flex", css "padding" "8px" ] ``` And you know what? It's not that bad. However, I use [elm-mdl](https://debois.github.io/elm-mdl/) so most of the styling is in there and I just do the layouting css. BTW sad thing about `elm-mdl` is it seems to be not tested on mobiles. Would have to dig into that in future. Chose [Material Design](https://material.io/guidelines/components/cards.html#cards-usage) because it's supposed to look and work well on all devices. I don't plan to render on server side but I do plan to dig into PWA (service worker, offline cache, mobile app-like look)
Holy moly. I watched that whole video. My takeaway is that I'm glad I'm not its target audience. Too much pressure!
I'm wondering if there are any examples of how to make an oauth2 API get/post request. For example, pulling a list of tweets with the 4 token/secret strings that you get from twitter. Or POSTing a new tweet with the same. Is it possible to do this from within the browser elm code, or does this request have to happen on the server side? I know JS can do a very basic GET, but I don't think it can do a more advanced HTTPS request like oauth... Thanks for any examples or advice!
How is this approach better than using `ValidatedFormData` in all functions and exposing `validate: FormData -&gt; Maybe ValidatedFormData` ?
Pretty neat. I just wish it had more songs to choose from.
My example doesn't do a very good job of explaining this point but imagine you have a type that holds some data. type FormData = FormData (List FormField) This type does not distinguish between a form that contains valid data vs invalid data. There are a lot of ways to address that.. type FormData = FormData (List FormField) Bool -- True means valid also type ValidFormData = FormData (List FormField) type InvalidFormData = FormData (List FormField) And there are others. The first option is succinct but has a naked boolean which isn't the greatest. It also doesn't get us compile time guarantees. The second option has two identical types that are semantically different. It works, but that duplication should raise a mental flag. Why not have a single type that can be succinctly differentiated and get us compile time guarantees? type FormData validParam = FormData (List FormField) I'm not sure if what you're asking is why not do the second option (with the duplication).
Yep, I thought I could use the second option instead, but that probably makes the code more complicated.
Interestingly enough, another user brought this to my attention: https://github.com/mbuscemi/elm-test-runner/issues/3. I came to kind of the same idea as you described. I landed at checking immediately sub-directories of project folders. The detection is playing much better with multiple open projects on my system, too. I'm planning on releasing these changes with 0.2.0. I'm curious, do you have a project where the Elm folder is deeply buried in the project folder hierarchy?
I'm working on converting a one-off [animation of the Elm architecture](https://i.imgur.com/Td6rl1A) I created for an intro talk into a library. Mostly so I can use it in other contexts, but also so I can easily do silly stuff like animating the architecture of the animation of the random cat gif generator. If I have any time left over (unlikely) I'm going to look into creating a project tracker for our local Elm meetup so interested attendees can see what kind of projects are being worked on.
Will definitely try this in my next project. Nice! :-)
Great! Yes, my current project is an Elixir/Phoenix 1.3 app with an Elm frontend and webpack. The project root is the main Phoenix folder. The Elm stuff lives in ./assets/elm, and the tests folder is then ./assets/elm/tests.
I'll add a task for 0.2.0 to get recursive search working.
I'd never heard of Tailwind before. Can anyone comment on how it compares to any other mini css frameworks, like Picnic.css?
I'm hoping for an Elm flavored Atom IDE, I bet it will have this in the mix, awesome!
It's limited to Spotify's whole catalog, which is pretty extensive, but doen't cover everything -- looking into integration with other APIs. Or do you mean more options come up for your seed search?
This week im learning Elm + Vim! Falling in love with elm as it looks to solve all my frontend issues... cant say the same about vim lol... Im coming from Intellij, so I have all the vices that an IDE can provide you 😁
Tailwind, Tachyons, Bass, etc... are libraries that take a _untility classes css_ approach rather than the typical _semantic css_ approach. There are many good articles documenting why this is a good idea: - https://adamwathan.me/css-utility-classes-and-separation-of-concerns/ - http://mrmrs.github.io/writing/2016/03/24/scalable-css/ - https://hackernoon.com/full-re-write-with-tachyons-and-functional-css-a-case-study-part-1-635ccb5fb00b#.c6zw5yr6b - etc... Overall I would encourage anyone to just _try it_ and see how it goes! Once you start to learn the patterns you can create things far quicker in my opinion. 
Non-native 64-bit ints would slow Elm down significantly. I have implemented my own native package that exposes an Int64 type, that is based on [this npm library](https://www.npmjs.com/package/long).
I like tachyons using the "Classic" method, but also checkout http://package.elm-lang.org/packages/justgage/tachyons-elm/3.1.1/Tachyons!
No reason why you can't use SASS and link the stylesheet in index.html. I wouldn't overthink it. Do what works for your project.
64-bit integers are sure very useful, even in web programming (see how gangnam style broke youtube counter [1]). However, I'm not sure this should be a priority for the development of elm. I'm not saying it's not important, it is! just that these days, web apis are probably higher priority. One example of web api that need "sized" integers are image manipulations (in canvas). So we might have to look down (8-bit unsigned) before having to look up (64-bits). [1] https://arstechnica.com/information-technology/2014/12/gangnam-style-overflows-int_max-forces-youtube-to-go-64-bit/
I'm clearly not doing production stuff, but I've been trying style-elements and found it awesome. This demo webapp [1] is an example of something I've built with it. Don't hesitate to play with window size and try on mobile/tablet/desktop. The code for layout and styles are here [2] and there [3]. [1] Demo of elm-image-annotation (WIP): http://elm-image-annotation.pizenberg.fr/ [2] https://github.com/mpizenberg/demo-elm-image-annotation/blob/master/src/View.elm [3] https://github.com/mpizenberg/demo-elm-image-annotation/blob/master/src/StyleSheet.elm
I know non-native 64-bit Ints would be slow. My question is more, if it doesn't happen sooner, will it be a major problem to introduce later? That is, in some imagined future where Elm compiles to wasm, will it end up being stuck with 53-bit Ints because upgrading to 64 will be a major PITA, or is it not going to be such a big deal?
Yes.
Link is broken, I found the article on another site: https://hackernoon.com/the-importance-of-state-ownership-in-elm-72f711ceb244
The only types supported in wasm are 32 and 64 ints and floats. Right now, elm target is Javascript and thus Int is powered by JS numbers. If sometime elm targets wasm, Int will just be powered by 32 or 64 bits "wasm" ints. I'm not sure coming from JS "number" or from other type will change the elm transition process. In my mind this will be part of the work that have to be done anyway. The only drawback I see is that the behavior of some user code might change. But again that's probably a good thing. It packs all changes to be done in one big step.
I've been working on [threaditjs-elm](https://github.com/benthepoet/threaditjs-elm) which is my own implementation of [ThreadItJS](http://www.threaditjs.com/) in Elm. I find that project is a great exercise to go through in order to understand how to perform common tasks like routing and making HTTP requests.
I did notice that it was producing code for the decoder pipeline even when the decoder type was chosen to be 'original'.
Thanks for the tool. I see that an issue has been reported already.
Thinking of `Unvalidated` instead of `Invalid` may be helpful.
&gt;Should I go all-in with Html.Styled right now? I believe this is the closest option to the "one true way" because you can write your styles alongside your views and you can change them dynamically based on your model. The only downside I see is that you don't have autoprefixer. &gt;If yes, how do I deal with "global" stylesheets like resets, body formatting, etc? Use [`Css.Foreign`](http://package.elm-lang.org/packages/rtfeldman/elm-css/12.0.0/Css-Foreign), external stylesheet, or put it directly to your `index.html`. But you shouldn't have much global styling. 
Thanks, `Css.Foreign` helps :) I probably need it when styling the `body` element, since I'm injecting the elm application into a div.
Nice! Note that your library name choice will clash with the Eve language by Chris Granger (Light Table): http://witheve.com/
I was thinking of exploring elm and vega-lite, looks like I'll be trying this package! 
There's a work-in-progress version in Swagger Codegen: https://github.com/swagger-api/swagger-codegen/pull/6947 Please give it a try and reply to that PR with your feedback. Here are the git commands to try it out: git checkout -b trenneman-elm-lang master git pull https://github.com/trenneman/swagger-codegen.git elm-lang
&gt;...a Bool which indicates whether the input is valid. But a lot of these obvious strategies only get us runtime guarantees. We can actually use phantom types to get guarantees at compile time. &gt;That function signature is far too trusting that developers will send it a valid string. Can we update the function annotation such that it will only ever receive valid data? &gt;Rather than updating it with a guarded check we have instead enlisted the compiler to force consumers of this function to only send it valid data! &gt;We changed a function that used to produce a failure result at runtime. I think you're conflating guarantees about types and guarantees about values. The compiler does not guarantee anything about the value. In your example, you're still making runtime assertions about the string. All that's changed is that you encode the result of those assertions in the value's type. You exchange a boolean for a type parameter. This might be a nicer way to describe the validity of the value but it does not mean that the program will significantly more correct. It's easy to imagine that the business logic is wrong and the validator returns a `Valid` when it should return `Invalid`. Whether you're using a boolean or a type parameter to indicate validity, you still have to validate correctly at runtime. 
The walkthrough is very impressive. Well done.
Thanks for your thoughts. I think the amount of user code that might change is probably not so significant and good testing practices should help to catch it - like if Fuzz.integer also increases its range to 64-bits and fuzz tests are being used.
It also occurs to me that there is a future pathway where the Vega-Lite specification could be processed directly in Elm, and then more interactive elements could begin to be added to it. A lot of work obviously.
I agree this would be a beneficial pathway and would love to see it happen. As you say though it would be a large task as it would probably involve implementing a full Vega, not just Vega-Lite, interpreter. Then there would be maintenance issues as Vega/Vega-Lite continue to develop. The team at the [UW Interactive Data Lab](https://idl.cs.washington.edu) who drive the development of Vega and allied projects are a friendly bunch and I am sure would be supportive if we ever followed this pathway.
A bit pedantic, but yes you're technically correct.
Yep, agreed
Hip hip hooray for Elm stuff in Czech Republic! :)
Cool! I would definitely consider giving it a more obvious name like `gicentre/elm-vega` or `gicentre/elm-vega-lite` in the same vein as [`1602/elm-feather`](http://package.elm-lang.org/packages/1602/elm-feather/latest), [`dalielnarey/elm-bulma-classes`](http://package.elm-lang.org/packages/danielnarey/elm-bulma-classes/latest), or [`justgage/tachyons-elm`](http://package.elm-lang.org/packages/justgage/tachyons-elm/latest). Good luck with it!
Thanks @janicezk and @rtfeldman for the recommendation. I've renamed the project from Eve to _elm-vega_ in the light of your advice. While the focus so far has been on supporting Vega-Lite, the door remains open for full Vega integration at some future date, so not including the `-lite` in the package name makes sense. There is an existing project [vilterp/elm-vega](https://github.com/vilterp/elm-vega) by Pete Vilter but this appears to be embryonic and has had no updates for the last 15 months, so I hope there are no clashes there.
Sorry, I didn't mean to be pedantic. I only mentioned it because some of the language I quoted above led to a false expectation on my part as I was reading your article. So I had to make the above distinction for myself and mentioned it here in case it was confusing other people. Thanks for taking the time to write these articles. They've been fun to read and, in the case of extensible records, address a deficiency in the Elm documentation.
No worries, I appreciate the feedback. There's a bit of a balance between having content that is easily digestible vs having content that is nuanced but perhaps less reader friendly simply because there are caveats peppered throughout. I'm glad you're enjoying the content! It helps keep me motivated to write more.
Awesome, good luck with it! 🎉
If you use a library, and have added a certain minor version as a dependency, all minor versions above that version are compatible with your requested dependency. Newer versions of the library might have issues fixed and it makes sense to use the most recent compatible version. 
Compatible indeed but also bring new functionality that you might inadvertently use without updating your dependencies, breaking the semantic soundness. I guess the rationale here is probably that sometimes errors are fixed in minor revisions instead of patch revisions and it's better to update in case of these fixes. It would be nice though if the compiler could warn you if you're using some functionality not supposed to be available according to your elm-package.json dependency specifications.
&gt; It would be nice though if the compiler could warn you if you're using some functionality not supposed to be available according to your elm-package.json dependency specifications. You could create an issue in the `elm-package` repository with a full description of what you did to get the error. I can imagine a scenario where one has an older version of the library installed on some server and the code starting to fail because the development version started using features from a superior minor release. I have not tried to reproduce this however. 
How can be Haskell missing from the list?
The typical scenario would be something like this: Person A is writting a package A/elm-a that depends on B/elm-b (1.0.0 &lt;= v &lt; 2.0.0). Actual version in use is correct: 1.0.0. Now A needs a new package C/elm-c. Meanwhile a new version of B/elm-b (1.1.0) has been published. A installs C/elm-c but the operation also updates it's other libraries, including B/elm-b (now installed @ 1.1.0 but still specified as depending on 1.0.0). A looks online at B/elm-b documentation and inadvertedly uses a 1.1.0 specific functionality. Happy of his work, A publishes his package A/elm-a (with an insufficient dependency specification, 1.0.0 instead of 1.1.0). Now anyone installing A/elm-a will install the newest version of it's dependencies, meaning B/elm-b @ v &gt;= 1.1.0. So no issue possible "in practice". My question was more "philosophical". Maybe there is a better way to make sure dependency specifications never get incorrect by inadvertence. One solution would be that `elm-package install` also updates the file `elm-package.json`. Another solution would be that the compiler warn you if you're using code note in the version specified by your dependency. Anyway, this is a little theoretical, and I don't have any practical example to show. I don't think this is worth creating an issue for, but I wanted to have your opinions.
I'm finishing my [elm-trello](https://github.com/T0ha/elm-trello) wrapper. Doing the most work - documentation. As it's my first package I want to ask if I can use elm-package to install / use the package from GitHub or local folder for debugging purpose before publishing it?
So, is there a reason `Regex.regex` and other such functions don't return `Maybe`? In other words, we are most of the way to `safe` prelude (`List.head` etc.) ... why not all the way? I wouldn't mind even division returning `Maybe`! Would that become too heavy for others? Should we care? :) Questions, so many questions...
There is an OAuth2 package with some example code: https://github.com/truqu/elm-oauth2 I have used this recently and it is working well for me. The request can be client side but OAuth involves redirects so ultimately you still have to be serving from somewhere.
I think in 0.19 Regex.regex will return a result, I think it was just an oversight from before Elm hit on this no runtime errors idea.
Ports are hard to use as an FFI because they're not synchronous nor are they asynchronous in the sense of `Task` or `Promise`. They are simply one way messages: "command ports" send messages to the outside world, and "subscription ports" listen for incoming messages. That's great if you need to trigger some external process or want to listen to an external subscription, but it's difficult to use if you want to make a request and get a response. If the implementation of the port throws an error, or if the programmer forgot to account for all logical branches, you may never get a response back. This makes simple use cases, like calling out to a synchronous Javascript math library, more unwieldy than you would expect. It also means that you can't chain together port calls, since all incoming port payloads must be turned into `Msg`s. Some people have suggested turning ports into Tasks, so that port calls be composed and chained together like any other asynchronous process. There's been a decent amount of discussion on this topic, but for a variety of reasons, it probably won't happen. You can read more about "Task ports" [here](https://groups.google.com/forum/#!topic/elm-discuss/TjWoacZobWw) and [here](https://gist.github.com/alpacaaa/13335246234042395813d97af029b10f).
There is currently no option for installing locally.
As I understand, the point of having outgoing and incoming ports is to handle exactly these cases where something outside crashes or does never respond. Plus: to turn an elm app from http request response to a continuously updating app listening on websocket messages does not require any architectural changes at all! Just think about that! As soon as I realized that, my mind was just blown. You could think about the problem more in a “state machine” kind of a way, where you remember that you asked for something, start a timer (maybe with exponential backoff) and ask again if you did not get anything back.
As I understood, generally the best approach is to have one incoming port and decide what it is based on what you decode. I feel like I am missing advanced decoding skills for that. Maybe you could also show a pattern for starting a “timer” in order to wait for a response from a port.
Is it considered harmful or just not yet implemented? Seems it'll cause junk versions in catalog only for debug.
You can update the `source-directories` section in `elm-package.json` to point to another local directory. "source-directories": [ ".", "src", "../otherPackage/src" ],
I'm not sure what you mean, from a local working dir git or remote? With remote elm-github-install on npm works wonderfully.
Thank you, missed this idea. Very helpful!
I'll look into it, thx.
Another way is to use elm-github-install. Put in the package you want to use as normal, but override where it will be sourced from: "dependencies": { "t0ha/my-funky-package": "1.0.0 &lt;= v &lt; 2.0.0" }, "dependency-sources": { "t0ha/my-funky-package": "/home/t0ha/my-funky-package" } The override can also point to a github repo, see the docs for elm-github-install.
Nice to see Elm so high up the list! I wonder could Elm's performance improve even more if it would borrow some logic from Reacts new *Fiber* engine?
The Elm-grove package manager has the ability to link install local packages. GitHub.com/panosoft/elm-grove
I'd like to know how to create efficient port interfaces to a huge library like BabylonJS (https://www.babylonjs.com), where I'll only be using a small, but unknown, subset of the API.
&gt; As I understand, the point of having outgoing and incoming ports is to handle exactly these cases where something outside crashes or does never respond. Yes, ports are very good at isolating unsafe code from the Elm app (crashes in Javascript do not halt the Elm app). That being said, they are difficult to use as an FFI to the parts of the Web API that haven't been implemented in Elm or to third party libraries. If you want to interact with local storage, for example, you have to write your own custom ports that can't be bundled up and shared via the package manager. On top of that, those ports can't be composed like Tasks. I think that's why some people have resorted to using [unsafe and unsupported Native packages](http://elm-directory.herokuapp.com/native-packages) (I use them liberally in my apps). I don't want to reinvent the wheel and write my own ports when dealing with complex external libraries like Firebase. I want to pick an open-source wrapper off the shelf and get to work. Unfortunately, ports don't work well as an FFI because they aren't composable nor are they shareable.
When I first started I immediately wanted to test how ports operated with "arbitrary javascript." So I wrote up a couple simple proofs of concept that worked with the Node command line because I wasn't finding documentation on how to do that, only advice not to do that. https://github.com/Pilatch/elm-port-program-examples 
Another thing I wanted to do with ports was build a REST API around an Elm "brain." I now know that this is probably best accomplished with [elm-serverless](https://github.com/ktonon/elm-serverless) but I didn't know that existed when I started. Furthermore I had a requirement to keep things in lockstep because I was coding a multiplayer online game, so I had to handle the concept of various game rooms, each of which would have a locking mechanism to ensure that actions were performed against that game in the order in which they were received. In some cases, one player's action would render the next player's action invalid so timing was crucial. The ambiguous asynchronous nature of ports turned this into a gotcha midway through development, and I had to implement an object-oriented JS layer around the Elm ports at the game-rooms level, and the global rooms-list level. The good news was that once I had the REST API working and tested, it was easy to port that over to socket.io. This is all back-end stuff. The front-end's interactions between Elm ports and socket.io is a simple mapping. Sorry the source code is not available. Maybe someday it will be.
Last thing. I submitted a pull request to the elm-lang core because I found the documancy around Platform.program lacking, and looking at [my diff](https://github.com/elm-lang/core/pull/757/files) I see that much of the documentation I wanted to add talked about ports.
Took a break for a while, but I'm back at my open-source Elm/Haskell E-Commerce site: https://github.com/Southern-Exposure-Seed-Exchange/southernexposure.com https://staging.southernexposure.com/ Finishing up the remnants of the Checkout process now, things like Store Credit, Priority S&amp;H, Coupons, Handling Free Orders, Old Order Migration, etc. Once that's done, I'll do some cleanup work, add the ability for admins to refund orders, &amp; integrate it with our local order management software. The goal is to have a minimal replacement finished by the end of December(our busy season starts around January).
https://staging.southernexposure.com/ Not Found
Yeah, that's because the current site had the homepage content in a PHP file instead of the database &gt;.&lt; I'm waiting to implement an admin workflow for StaticPages so I don't have to manually insert it into the DB every time I wipe the database. Pretty much all of the other pages should work though, I think it's just the homepage and a couple of the sidebar/footer links that were stored in files.
Wrapping JS typed arrays in elm. [1] repo: https://github.com/mpizenberg/elm-js-typed-array [2] API discussion: https://github.com/mpizenberg/elm-js-typed-array/issues/1
[removed]
https://github.com/dailydrip/firestorm_elm/blob/master/src/index.js#L30 Here's how I do that exact thing, is this helpful?
oh yeah this part is useful too i suppose https://github.com/dailydrip/firestorm_elm/blob/master/src/Ports.elm
If you want to find more cases of runtime exceptions in Elm just go to any repository on https://github.com/elm-lang (elm-compiler is most interesting, I guess), open issues and filter by "bug" label. Enjoy!
Something like this https://ellie-app.com/3bt2MBsSgBPa1/0 ? If so this duplicate of thread https://www.reddit.com/r/elm/comments/6aynwq/animating_element_enterleave_transitions/
There is [a question](https://stackoverflow.com/questions/43812919/how-to-implement-vues-transition-group-feature-in-elm) (that was rotting for a long time) on StackOverflow. They were even more ambitious: wanted to reproduce the [Sudoku demo!](https://vuejs.org/v2/guide/transitions.html#sudoku-demo) Turns out Vue is using [a library](https://github.com/googlearchive/flipjs) to do that. *[Here](https://ellie-app.com/jcCqXrC52a1/1) is an Ellie doing just that.*k
Hello, I am new here but I agree with those who say the communication strategy is cause for concern. I'm on this page cause I'm looking to justify Elm usage to other devs in my company, and I had to get to reddit to find any updates on the language. It's very easy to be defensive to this kind of feedback, and I get it, but it's been shown time and time again that OSS projects that fail to communicate frequently and transparently with their users fail. The solution isn't to present a false "I can work on the tech or I can communicate" dichotomy (you're not the first to lay it out this way), it's to follow the suggestion on someone farther down and delegate communication to someone who can engage it as their main task. NoRedInk already pays for you to work on Elm... why is it impossible to find someone who can serve as Elms community manager? Doesn't have to be No Red Ink paying for it -- just has to be someone whose has that job, either paid or volunteer. Sorry for the direct feedback but my guess is you want Elm to succeed as much as we all do if not more and this is much more likely to lead to that result.
I think a concrete example would be a big help here. Can you describe a particular animation you'd like to do for the UI you're building? (e.g. "when the user clicks Sign Up, first the Sign Up button should fade out and then the page should transition") It's a lot easier talking in terms of what you want to build rather than comparing to a JS API, because cross-paradigm comparisons like that are usually apples-to-oranges! 😄
This is awesome! The only problem I see is that the example uses a hardcoded class of "cell" and the Port relies on that. Ideally I'd like to wrap this feature up in module equivalent to Vue's &lt;transition&gt; element which works transparently on whatever its child node is. Is that possible in Elm? If it is, it might be possible to create a feature equivalent port of &lt;transition&gt; in Elm which would solve all my animation problems!
Reader's digest version: Onclick handler sends a StartDelete message that runs an animation. When that animation completes it sends a Delete message. That causes the node to be removed from the DOM.
Your example is pretty close to one of my use case: a sign up form, which when submitted to the server and accepted by the server, will slide up with a custom cubic bezier transition and then the sidebar of the app will fade in in say .5 sec and just after that fade in starts, the main content will fade in after .1 sec for a duration of .5 sec again. Here's the timeline to make this clear: 0s -&gt; only signup form visible 10s -&gt; signup form filled and submitted 12s -&gt; server says OK 12s -&gt; sign up form slides up in 200ms 12.2s -&gt; sign up is gone, sidebar starts to fade in with duration = 500ms 12.3s -&gt; main area starts to fade in with duration = 500ms 12.7s -&gt; sidebar is fully visible 12.8s -&gt; main is fully visible In Vue, I'd use 3 &lt;transition&gt; items and using CSS I'll write a transition property for each of the three elements. The main area will have a delay of .1s also using CSS transition property. The rest are straightforward. If Elm could just add a class when an element is inserted and removed, that would be enough for me to write the animations in CSS (where they belong). Vue uses the transitionend event to detect when a transition has finished and then removes the DOM element. I don't think this is possible in Elm though, is it? I don't see any onAdd or onRemove attributes in the documentation.
In Elm you can toggle classes based on some Bool predicate: Html.div [ Html.Attributes.classList [ ( "signup-form", True ) , ( "signup-form--fade-in", isFadingIn ) , ( "signup-form--active", isActive ) ] ] ... or something like that :) That + CSS animations can get you pretty far, but not for example to the Sudoku demo. That needs to track x,y positions of elements.
I don't think this can replicate the behavior Vue has. When an element is about to be removed for example, Vue adds a leave-active class, then waits for any CSS transitions to end (using `transitionend` event) and _then_ removes it. This is needed in order to fade out nodes that are about to be removed.
Now that I think about it, I could add a new Msg e.g. `StartDelete`, which only toggles the leaving class, and then add a `on "transitionend"` which triggers the actual delete. I'll play around with this, thanks!
Hi, I have taken a shot at the List Move Transition example that you have linked. It is not pure Elm, but rather utilizes Mutation Observers and custom events. The items in the list are tagged with a string `data-flip-id` attribute. The Mutation Observer (see page.html) listens to changes to those attributes and notifies the parent element with a custom event `my-child-list-reconfigure`. This element groups all the attribute `changes` (this node had id "0" before, not it has id "7") and also saves the bounding rectangle for each child node that has a `data-flip-id`. This event is listened to and decoded in Elm and then the animation is fired off using a subscription to `AnimationFrame`. You will see that the random shuffle is extremely biased and that there is a short flicker before the animation starts. I hope that does not hurt the point that I want to make with this example. The [code](https://github.com/aforemny/elm-flip-demo) is on Github with a [demo](https://aforemny.github.io/elm-flip-demo) on Github pages.
Why doesn't this conflict with Virtual DOM? I would have assumed that if the UI is updating from within Elm, VirtualDOM would detect that the flipjs library has modified Elm's DOM and would revert those updates - or worse.
Since I have you here, I wanted to ask if there's any chance of the following issue being resolved in 0.19: https://github.com/elm-lang/html/issues/19? This will solve some other JS interop problems I have. Also, thank you for all the work you've put into Elm. I'll be buying your book very soon. :)
This is fun, but The space keybinding is a little awkward. Why not an instant drop? Vim keybinding is awesome though.
IIRC, VirtualDOM doesn't generally listen for "somebody else changed DOM underneath me!" - only when the Elm model changes, does it synchronize. So, Elm says to FLIP: "get ready!", FLIP takes a snapshot, Elm changes the DOM, FLIP catches that and animates that change. The end state after animation is exactly what VirtualDOM wanted. What happens in between, Elm doesn't know (and care). I think you could probably break this if you changed the model during the animation.
Thank you for clarifying! I tried to mess with model while the animation was running and things did not break. I am now assuming that problems would only occur if Elm would modify the same styles that are applied by the Flip library, ie. transform styles. I am still wondering if this approach can be considered safe. For instance, would flipjs error out if Elm removed a DOM node while animating? Could Elm error out if we are heavily changing model during animation? If so, we could get unexpected results once the Elm program becomes larger or more complex. Nevertheless, thank you for sharing the example. It is quite elegant and I've learned about the precise timing it is using in ports.
It's definitely a topic of interest within the Elm community, but I don't think WA is ready yet. The integration with DOM and JS isn't quite up to snuff, and there's no GC, so Elm would have to develop it's own. So, there are several of us who are monitoring the situation closely, but we're probably years away from it happening.
Evan laid out his thoughts [here](https://github.com/elm-lang/projects/blob/master/roadmap.md#when-will-elm-compile-to-x).
There was a call for proposals on the Web Assembly github repo for languages to be used as tests for the next phase of Web Assembly that will include garbage collection and access to the DOM. Evan submitted Elm as an example of a functional language that could target wasm. I remember that there were a lot of positive reactions to that comment. These being said, I don't know how things progressed. It is up to the wasm folks now. Without GC and access to DOM, the effort to use wasm as a target for Elm is too great. 
Yes, it's probably not very safe :) One could possibly get a little bit of safety using WebComponents, ie. Elm generates `&lt;sudoku numbers="1 2 3 4 5 6 x 7 8 ..."&gt;` and the JS inside that WebComponent uses Flip etc. So, nobody changes the DOM underneath Elm (it's encapsulated inside the WebComponent), and things like removing the `&lt;sudoku&gt;` DOM node are probably also considered (tearup etc.)
Curious, I was in the process of rolling my own for a very similar application to your image annotation demo. So very much in favour of your initiative. Concretely, I think elm-pointer-events would work for my purposes, particularly having offset coordinates available saves a lot of effort. The only extra thing I'm doing so far is to listen for global mouse-up events using **elm-lang/mouse**, drawing is stopped when lifting the mouse outside the drawing area. (Your demo suffers from that bug.)
Hello, I see Elm used mostly for games, animations and such, and less for normal sites/webapps, I'm missing something? I'm trying to learn Elm to use it to make simple webapps and I'm struggling to grasp the whole picture or get the aha! moment. React was easier to get and start doing things, I'm kind of stuck with Elm. Advice?
This bug happens indeed in the "mouse mode" of pointer. On "touch mode" (phones, ...) events are handled differently by browsers, and it behaves as expected. Nevertheless, in my case I can afford attaching one `Pointer.onUp` attribute to the top most view element. I guess you cannot do that because you are embedding your elm app into an element out of elm control?
Not the same thing. Here he is talking about compiling to a platform and using its capabilities. Like Clojure on the JVM for instance. That never was a goal for Elm. However, compiling to a better assembly than JS when possible is. Evan looked at asm.js back then but it was lacking a GC. Then at wasm that is due to grow one. He even offered to help the wasm team that was looking for a ML like language to implement. Wasm can't touch the DOM and doesn't have a GC yet but in time we should be able to compile to it.
I agree that Evan's point in my link is broader than the question here, but much of what he says still applies: whether we're compiling to JS or WASM isn't going to change the Elm world. Sure, WASM can perform better on a few metrics, but the generated JS code is by and large good enough. Hence it's more important to work on the ecosystem than it is on compiling to WASM, which is why we're not seeing more movement towards WASM than we are.
The JS is good and will be significantly better in 0.19 with the dead code elimination. But there is still a significant enthusiasm for wasm. Which is a moot point for now since wasm is not ready.
I would be very interested in helping with any effort to bring some order to this situation. Most of the libraries haven’t been touched in a while, not like that is necessarily a bad thing. I am using a few different libraries to interact with the mouse, mostly for desktop use so no touch yet and it would be nice to have just one. The projects I am working on are simple enough, an image viewer with zoom, scroll, and markup capabilities. A game with an underlying map and objects draw over the top that can be interacted with by a click, and hold down/drag. Very similar to the image viewer. So far my needs have been relatively painless to use, though I did need to learn a fair bit about the way events work in elm, including decoders... but now that I know that it is simple enough. I would assume that getting deeper into mouse interaction would raise some more difficult challenges. Let me know how I can help.
Then I think we are in agreement ^_^
Evan kept Elm ready by being careful not taking decisions that would prohibit compiling Elm to another representation eventually. So Elm is ready whenever wasm is.
Yes exactly, I'm embedding in a larger HTML document. Though I'm curious, would listening for mouse-up at the top-most view element as you do catch out-of-window mouse release? Because that does seem to work with the elm-lang/mouse events (which are document-level events as I understand).
Sweet 💖
LLVM has provides some tools to support GC, but really there is no such thing as GC that fits all languages. Each language needs to sort out its own GC in the way that works best for it. So Elm -&gt; LLVM -&gt; wasm is already available with enough support to create a garbage collector for Elm. Its just not a small undertaking despite this. DOM interaction is probably a bigger reason to wait for more maturity on wasm.
have you seen the 'one port' style? basically wrap the one port for all use cases
Neat.
oh, no it won't work with `pointerUp`, good point. One way of minimizing the negative effect though, is to prevent the next pointer down inside to reset what you were doing. That's possible if you're tracking mouse state and it thinks you're still down.
Yes I'd also say that thanks to elm, you don't really have bugs maintenance, so not having many updates is not a bad thing. When you say "zoom, scroll", you mean that you need to detect mouse wheel events right? do you also need some kind (absolute, page, relative, ...) of coordinates when those happen? For your game objects I guess you are using coordinates of events relative to game div/canvas/svg, to compute intersection with objects visible? Or are you simply relying on DOM events attached to the right object (if you're using svg e.g.)? The purpose of a library is exactly to avoid what you mention you had to do. Understanding how decoders work is a good thing but trying to understand every little detail of all we do makes us loose time and energy that could be better employed :) Thanks for your comment, discussion is the best help for now
I temporarily made my dependencies incorrect adding `"zwilias/elm-thanks": "1.0.0 &lt;= v &lt; 2.0.0"`, then using `elm-thanks` on it ;)
Sorry for the sound quality - my mic gave me hell today. Tomorrow should (hopefully) be better. Twitch here: https://www.twitch.tv/martinjaniczek (the recording there is almost soundless - I had to normalize it before uploading to YouTube).
Yes, I do mean wheel events. That was the impetus for rolling my own code since most (all?) of the libraries had limited support. Getting the values off the event was dead simple. I have found interacting with canvas elements very difficult. I don’t have a ton of experience outside of elm with canvas so I have very little to compare, but I gave up, I could not figure out a way to attach a standard click event to a canvas element as a part of elm-graphics. By “element” here I mean, a rectangle or text drawn inside the canvas. The workaround right now is attaching them to a div which wraps the canvas and doing some coordinate checking to figure out the element the user is clicking on. PITA is an understatement; again though, it works fairly well once you learn some basic geometry. Another pain point is stopping propagation and the default. Some libraries support that, others don’t; having variants requiring options would have been helpful. I have submitted a PR for this as well. [0] I noticed most of my needs were for a mouse event coordinates relative to some bounding box (container or the element itself), it would be nice if it also gave the global coordinates. One thing I noticed, I thing with elm-mouse-events is that the x coordinates is left aligned (and only positive values) whereas the y uses a midpoint with a positive being towards the top of the page and negative being toward the bottom. That could be the browser works that way or something entirely different. I always though the coordinate system for a browser was the top left corner being (0,0). It would be good to be consistent. I am sure these is more but that is all I have for now. [0] https://github.com/mbr/elm-mouse-events/pull/4
Thanks a lot for the detailed comment! I'm adding your concerns in the wish list at the end of the post. **About the wheel event** mbr/elm-mouse-events has an `onWheel` function that can return the coordinates of the event, but not it's other properties (`deltaX`, ...). I'm sure you already knew that since you mention this package later. As you may know, the `WheelEvent` actually inherits from `MouseEvent` so it makes it quite easy to extend a mouse event and get the full benefit of an already implemented mouse events library, as soon as this library exposes it's decoder. That is what suggested @TheZoq2 in this issue: https://github.com/mpizenberg/elm-mouse-events/issues/2 **About canvas interaction** *Side note: A canvas is intended to be what is called a "raster" image, meaning this is only a juxtaposition of pixels holding nothing more than colors. The confusion comes from the fact that the canvas API eases the drawing process by making you draw kind of objects (rectangles, triangles, etc.). At the contrary, SVG as a standard for "vector" image, meaning it contains objects characterized by their properties, but you don't get to choose what pixel values are, it is automatically computed by the renderer. Canvas is much more usefull to get full power of graphics cards, while SVG is more suited for exact, scalable drawing.* The point of the previous side note is to explain why you can't attach events to canvas "objects" while you can with SVG (which uses DOM elements). But hey geometry is your best friend ;). **About event propagation** You're right, sometimes we need personalization, adding this to wish list. In mpizenberg/elm-mouse-events, you can use the [`Mouse.onWithOptions`](http://package.elm-lang.org/packages/mpizenberg/elm-mouse-events/latest/Mouse#onWithOptions) function for more control. **About coordinates** I'm not sure how you ended up with a y-axis upward. Canvas, SVG and divs in general have the same coordinate system, which is (0,0) at top left, X to the right, Y down. I haven't use mbr/elm-mouse-events in details though so I don't know if it's this library decision. In the other one, coordinates respect convention. Regarding the request for global coordinates, there are two kinds of these. `(clientX, clientY)` are coordinates from the top left of the viewport, in CSS pixels size. `(pageX,pageY)` are from the top left of the page which is different from viewport if the page is scrolled. This is described in more details in this excellent blog post: https://www.quirksmode.org/mobile/viewports.html mbr/elm-mouse-events and mpizenberg/elm-mouse-events both only provide "client" position as a global position, not the "page" one. Adding this also to wish list ;)
Thanks for sharing that. I find it really interesting to see how other people work through live coding. I'm not up to sharing a live stream (yet), but I've added a repo for my solutions at https://github.com/jwoLondon/adventOfCode For day one I ended up just using a `List.map2` to compare the original list elements with the rotated list. This generalises for any rotational offset (1 for part one and `List.length // 2` for part two).
Yes, I saw your solution on GitHub - very nice! I also like your "boilerplate" library - didn't know you can `Http.getString` a local file! :)
There are editor plugins that do this. 
&gt; I'm kind of stuck with Elm. Advice? Go through the [elm-lang.org/examples](http://elm-lang.org/examples) and for each of them try to make it your own. Try to change something in it. For example, take the hello world and try to output a `h1` instead of the text. Open the developer console and look at the output. Use Ellie to play with styling your elm code. For example, [this is the buttons example](https://ellie-app.com/hKQtkk73a1/0) altered a little bit with styling. 
Thanks for the advice, yesterday I finally got some time to write some stuff and there was magic going on under the hood of head. I'll need code review to get things right. Maybe joining Slack.
Cool, I didn't know that
I think mostly what's needed are good examples of ports used for various common things. Since they can't be circulated as libraries, public examples are few and far between. I was stuck on how to best use ports for localstorage until Richard's elm-spa-example came out and showed how to sync localstorage with Elm state. So in my view, we need a collection of prominent examples (or a prominent list that links to less-prominent but still solid examples) of things like using ports for common things like - file uploads - websocket communication - animation out (wrapping some DOM manipulation in a requestAnimationFrame) - inter-Elm-app communication - interfacing with an js text- or image- editor library None of it is rocket science, but the lack of practical, "blessed" examples to look at first does create a bit of a hump to get over. 
Just finished up my project for github's "Game Off". I've never tried making a game before, this was just an excuse for another project to learn Elm. A lot of it is rushed because I didn't have a ton of free time to work on it, but here it is: https://mcordova47.itch.io/portal-platform. Code's here: https://github.com/mcordova47/portal-platform.
&gt; Maybe joining Slack. Definitely join Slack. The #beginners channel from Slack is the best companion of a person starting with Elm. 
I use the SublimeText one and it works wonderfully. 
It seems like something like JSON Schema would be useful here, since it encodes the validation rules such that they could be used on both client and server sides. See for instance http://package.elm-lang.org/packages/1602/json-schema/latest/Json-Schema . You could then go with approach #2, but internally within `getAccount` you would validate against a JSON schema, either pre-generated in Elm or loaded from the server. Then you would need an error type like type Error = HttpError Http.Error | InvalidInput (List Json.Schema.Validation.Error) 
Elm just gives you another way to produce and manipulate DOM elements, which you could otherwise have produced using a normal HTML file. So the most straightforward way to answer your question of how to create and style a table in Elm is to: 1. create your table in the usual way you create DOM elements from Elm, using the `table`, `tr`, `td` etc functions from [elm-lang/html](http://package.elm-lang.org/packages/elm-lang/html/2.0.0/); 2. use a CSS file (included in your document somewhere), a style tag, or inline styles, and style your table as you would normally when writing CSS. Regarding a couple of other things you mentioned: &gt; I've some across the sortable table module This is useful if you want a table which can be sorted based on the values in the different columns within it. If you do need this then you can style this in the same way as above. As the library is creating the table for you you won't have full control over absolutely everything rendered, but there's various ways you can customize it which should be sufficient for most use cases. If you're just getting started though it will probably be easier to limit the number of extra libraries you use to keep things simple and help you understand the core concepts. &gt; I had a look at Elm's version of css (style-elements) This isn't true, Elm doesn't have its own version of CSS; the simplest way to style Elm code is just using CSS or inline styles as you would normally. However, because Elm can be so nice to work with there's been various attempts to wrap this simple way of doing things in Elm libraries, to bring some of the type safety and philosophy of Elm to writing styles. `style-elements` is one of these, and tries to replace both HTML and CSS with a new way of laying out your app; [elm-css](https://github.com/rtfeldman/elm-css) is another, which is a direct translation of CSS into Elm with type safety. If you're a beginner I'd recommend just using whatever you would normally use style HTML to start with, rather than trying to learn a particular extra library.
When you talk about elm code could je outdated. Are you taking the example where a user leaves his browser open on the same page for a long time? Or about the server code being updated while the front-end code does not? The second case is easy to fix in the sense that you control the code you deploy. If you pay attention this case should be impossible. The first case can be painful. If you want to be fancy you can make the app send a hash of the rules whenever it sends the server a request. The server returns a new list of rules if the hash doesn't match the server's version. I don't really like this, I think it's not worth the bugs it could introduce.
https://css-tricks.com/complete-guide-table-element/ is a good reference
I've put this together to try to solve a need at work. Not 100% sure it is the best approach but I'd love some advice &amp; feedback if anyone has the time!
This is complecting validation with encoding. I would prefer that the two steps be distinct. Validation should be available while editing some Business Object. Encoding is more like accidental complexity and could also be made obsolete for a lot of cases by future changes to the language. 
Yeah, you're right, I know you're right. I'm still struggling though My situation is that I have a complex nested data structure that represents a node graph and it has to include everything that is a valid node graph that could be stored on the server but it also needs to to represent a 'mid editing' state of that same node graph. Something that has might have a missing connection or two or a invalid value on a node. These things can be caught by validation but then in order to have a clean Encoding pass my validation would need to transform the valid data from the 'can represent an invalid mid-edit node graph' structure to a 'can only represent a legal &amp; valid node graph' structure which feels like I'd end up with two near identical set of types which is no fun at all :/ If I don't have a clean encoding pass, then I could just right an encoder for the 'mid-edit' structure but then I need to write a completely valid encoder for a bunch of data that I never want to encode and send to the server. I need to represent 'no-connection' in the final json somehow even though I don't want that to be possible. I think the tension between these alternatives has led me to want something like the proposed library. I guess that when the 'mid-edit' structure evolves to be significantly different to the 'valid server structure' then it wouldn't feel so jarring to have separate data structures but at the moment it feels awkward. There is also an argument for this being easier &amp; more hack friendly than having to build a two pass system and I guess I don't know if we should be trying to keep such things out of the Elm ecosystem in order to avoid potential problems or allow them in for dirty solutions from time to time. Though as you can't currently write the equivalent of 'shell scripts' in Elm at the moment, the motivation to have easy &amp; quick hackable libraries is not so strong. I'd love any help thinking about this correctly. Though I guess correctly is probably just two separate sets of types :)
&gt; My situation is that I have a complex nested data structure that represents a node graph and it has to include everything that is a valid node graph that could be stored on the server but it also needs to to represent a 'mid editing' state of that same node graph. I think this is the source of the problem. I would advise against complecting essential business objects and temporary (accidental) editing state. Some might view this as OK but I'm having a very hard time in one of the projects that I took over few months ago due to a design decision to mix essential state with accidental (editing) state. I believe it is tempting to just add to an already present structure rather than do some design thinking about how to best edit the structure so that it can maintain its essential nature. Simplicity is one of the core values of Elm but simplicity is hard. It often means giving up Easy for Simple. In any case, do whatever you consider appropriate for the problem at hand. All I wanted to do is share a personal perspective. I might be wrong. :) 
I'm not sure how I feel yet about libraries exposing their own Html types, it's limiting when using different UI libraries, that's what initially turned me off from using elm-mdl. 
Thank you for the kind words! I'm so glad you've been liking it! ♥️
I like this. I read through jediknight's opinion above and I think you should ignore it. Anytime I read a recommendation of best-practice over getting the job done, I think it's worth ignoring (and not to continue to ad hominom on jediknight, but I'm extremely skeptical of the "Rich Hickey religion" that seems to be the origin of jediknight's critique). You have a fundamental problem you want to solve: you want to encode a datastructure which is not fully encodable. So you have two options: 1. use a combination of a Result and JSON.Encode, returning `Ok (JSE.string str)` in a good case and `Err error` in the bad case. Then you also need to use `Result.map` and `Result.andThen` to compose your results. The downside is that a nice simple pass across your DS to encode it starts to become extremely complex to read and debug. 2. create a data structure that is fully encodable, and convert your existing DS to that, handling encoding on the way. Unfortunately, you'll also need to use all the `Result` stuff to make that work, which at least will be separated out, but will be equally ugly and extra work. 3. What you did: have a library that adds an extra error state into the encoding format, allowing you to compose them together. I actually use this pattern a lot: if you have a nested datastructure, then putting Maybe or Result into it sucks, so I will add an extra constructor representing that type. It sometimes comes out uglier (esp since you dont get to use Maybe.map and the types around it), but it normally turns out to be nicer to just deal with `x` rather than `Maybe x`. So overall, a totally reasonable DSL for your use, though I don't know you much it generalizes.
How do I extract information from Json.Encode.Value? I understand, and agree that it's nice to decode json string into the correct data structure. However in my case the data structure is not known at the time of decoding, and I'd like to postpone it a bit - so I'm decoding into a blob of Json.Encode.Value. However I see no way to operate on that Value other than encoding it into string, and decoding into correct data structure, which feels like a waste. Is it possible to do without roundtripping through string?
Can someone explain andThen for me, specifically from List.Extra? I've managed to create types for Rank and Suit and used the example in the List.Extra docs to produce the following, which works to create a full deck of cards. But I don't understand what's happening. allCards : List Card allCards = [ Hearts, Clubs, Diamonds, Spades ] |&gt; LE.andThen (\suit -&gt; [ Ace, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King ] |&gt; LE.andThen (\rank -&gt; [ Card rank suit ]) )
`List.Extra.andThen` is exactly the same as `List.concatMap`. `List.concatMap` is defined as: concatMap : (a -&gt; List b) -&gt; List a -&gt; List b concatMap f list = List.concat (List.map f list) So your code is equivalent to: allCards : List Card allCards = [ Hearts, Clubs, Diamonds, Spades ] |&gt; List.map (\suit -&gt; [ Ace, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King ] |&gt; List.map (\rank -&gt; [ Card rank suit ]) |&gt; List.concat ) |&gt; List.concat Simplifying slightly, allCards : List Card allCards = [ Hearts, Clubs, Diamonds, Spades ] |&gt; List.map (\suit -&gt; [ Ace, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King ] |&gt; List.map (\rank -&gt; Card rank suit) ) |&gt; List.concat So for each suit, you are generating the list of the ace through king of that suit. Then you are concatenating the lists to form one big list of all of the cards.
the best way to approach issues like these is to look at the implementation of the used functions. `List.Extra.andThen` is just an alias for `List.concatMap` which is just `concat (map f list)`. So, for each suit, a list of cards is generated and these lists concatenated. The second `LE.andMap` is an overkill as a simple `List.map` would have been sufficient. allCards : List Card allCards = [ Hearts, Clubs, Diamonds, Spades ] |&gt; LE.andThen (\suit -&gt; [ Ace, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King ] |&gt; List.map(\rank -&gt; Card rank suit ) ) Since you already use List.Extra, the simplest implementation would be to use `List.Extra.lift2` allCards3 : List Card allCards3 = LE.lift2 (flip Card) [ Hearts, Clubs, Diamonds, Spades ] [ Ace, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King ] [Here are all 3 versions in Ellie.](https://ellie-app.com/3n4VS9bcma1/0)
Thanks for the message. I understand jediknight's position. I think it is fair but, yeah, maybe there is room for others. I appreciate the understanding. 
Thanks, I think you make a good point. I'm struggling with the current situation versus impacts down the line but I think you're advice will bear out in the end. It would help if I had a better idea of how I'm going to solve this particular work problem and how deep it is going to get!
Thank you. I had seen the mention of equivalence to concatMap, but your example makes it much clearer. I'm only slightly more familiar with this, but this still helps me to understand what's going on.
Maybe polymorphic records could help. type BusinessObject = { someField : SomeType} type Editor a = { a | someEditingField: SomeEditType } type alias BOEditor = Editor BusinessObject editorStateToBusinessObject editObj = { someField = editObj.someField} This way, you could isolate some of the validation into `editorStateToBusinessObject` and encode without worry the BusinessObject. 
Thank you!! I'm a bit more familiar with concatMap, so this helps a lot. But the use of `lift2` is brilliant; so clean and easy to read. I'm assuming the use of `flip` is just to keep things in the same order I had them? I could just as easily use: allCards4 : List Card allCards4 = LE.lift2 Card [ Ace, Two, Three ] [ Hearts, Clubs ] etc.?
&gt; I'm assuming the use of flip is just to keep things in the same order I had them? Yes. If order is not important, you can forgo the `flip` and just reverse the two lists like you already intuited. 
We've discussed that exact thing. The idea is that we can test out the idea without huge changes everywhere and it'll be lower risk.
That's great to hear
Maybe you have read this before but I think it is quite relevant for your question here: https://gist.github.com/evancz/1c5f2cf34939336ecb79b97bb89d9da6
So we created knledg/touch-events mostly out of need. As you can see we were the first one released as noted here, but actually there as an earlier touch event package that was on 0.16, and the repo had no activity to update (I cannot find it now?). So we rolled our own for our own purposes, hoping if others needed support more features they would contribute. Given that we have not needed anything outside the scope of what our package allowed us to do we have not used resources to build it up features. So in short we just need some touch event support and we needed it to stay update to date with the current Elm versions. For us today, we really don't use the touch event package, but maybe one day we will need it again. The biggest thing for us is keeping the package up to date with the most current elm packages, but my hope is all elm packages will do that.
It depends on the relationship of the UI with time. If the UI has to stay in sync with time (e.g. displaying a countdown or a clock of some sorts), a subscription is quite normal. If you need the time at the moment of a certain UI event, I think you can get that by using custom event handlers for the targeted event. [Here is a very naive approach that kinda works in Chrome.](https://ellie-app.com/4CPQF5NJXa1/0) Of course, for production code you need to account for the fact that different browsers might have a different understanding of what `timeStamp` should contain. 
Also if you just need the current time when the user navigates to a certain page, but not at regular intervals, you can `Task.perform SetCurrentTime Time.now` at that point. 
Finished elm-s3, version 1.0.0, on top of Kevin Tonon's elm-aws-core. It's a simple pure Elm client for Amazon's Simple Storage Service and Digital Ocean's Spaces (a subset of S3). http://package.elm-lang.org/packages/billstclair/elm-s3/latest I'm working now on a pure Elm version of the Advanced Encryption Standard (AES), so that I can store an encrypted copy of my S3 private key on my server and use it from a Xossbow.com site. I expect to have something working in a day or two. Started from a really nice Lisp implementation, so I didn't have to figure anything out, just translate from Lisp to Elm. The code came out really nicely. I hope it's not too slow to use. Still in development. https://github.com/billstclair/elm-aes Next, I plan to build a client for the newly-released API for Gab.ai, a Twitter-like social media site, where free speech reigns, because we are customers, not product; we pay for it, not advertisers. I see a couple of Elm OAuth packages. Hopefully one of them will work for my authentication, so I can just write the API itself, and not have to do all the crypto and handshaking.
You need Union Types for types like these: type Day = Mon | Tue | Wed | Thu | Fri | Sat | Sun And you need Records to hold complex structures with a lot of fields. (It is not recommended to use positional arguments beyond 2-3 arguments.) &gt; instead of type BinaryTree a = Node a BinaryTree BinaryTree | Empty &gt; we would have something like this: type BinaryTree a = Node { value : a , leftChild : BinaryTree , rightChild : BinaryTree } | Empty The second form is valid code and if you feel the need to be explicit like that, you are free to use it. The first form is more compact and since Node tag has only 3 arguments, it can be comprehended easily. In complex union types like the message type of applications, enforcing use of records (like you suggested) would result in a lot of extra characters for very little value in most cases. It would also destroy the use of the tags as value creators (i.e. use of tags as functions that create that union's type values). 
Nice article! Practical and to the point :)
An alternative really depends on what you're using the time for. `Time.now` returns a Task that fetches the time, since it's a Task you can chain additional computation or effects on to the request for the time using `Task.andThen` or `Task.map`
I understand your colleagues reaction, it is not until you think it fully through that you realize the power. It means that everything is reproducible, even a point in time. That literally enables the time traveling debugger. 🙃 In addition to the other comments: You cannot only request the current time on some event or by subscription, you can also combine both an for example start and stop the subscription on entering or leaving a page. It might also be a good idea to stop the subscription when your app is put into the background(-tab).
the `&lt;~` operator was removed from elm a few versions ago, but it was used to update records. 
The idea of stopping the subscription when not used sounds good. Thanks!
I need to dive deeper into the `Task` world... thank you for pointing it out!
In my case, it is more like the first scenario you described: sometimes I have a countdown which needs to be synchronized with one on server-side. To keep it aligned, each second the app checks whether are there the conditions to recalculate it or not. If not, just updates the time field. If yes, proceeds to update also that specific countdown field. I've started with `Process.sleep` creating a Task when needed. It ended up difficult to manage (there are several entities which can host different countdowns). But I was sending a Msg. I didn't think about chaining tasks, I need to look into that.
In that case a heatbeat is appropriate. An alternative solution might be to handle synchronization server-side by using something like websockets. This way the UI does not have spurious updates. 
`&lt;~It was used to lift signals. 
`&lt;~` was used to lift signals back in the day when Elm had Signals. Examples that use that function are now obsolete. As a general rule, if you find Elm examples in the wild, you need to pay close attention to the version of Elm that the example was written for. A lot of old examples were made obsolete with the removal of the Signals in 0.17. Elm allows people to define infix operators and because of this, some people might redefine `&lt;~` to mean something particular to their domain. If this is the case, you need to find out the definition of that function and either look at the documentation or the actual implementation in order to figure out what did they mean. 
Thank you very much to all the answers.
&gt; Also, is there any value in listening to old Elm Town episodes, given that a lot of them are pre-0.18? Almost all ElmTown podcasts are post 0.18 and the ones that aren't are still relevant as they don't touch stuff that changed since then. 
Thank you. I must have misread my podcast listings. Good to know they're all still relevant. And that list will keep me busy for a while!! 😊
I don't remember the exact details because it's been a while since I've used the parsing package, but I believe you need to use the `delayedCommit` function in order to provide custom error messages in scenarios like this.
Hi! I play with elm for about a week. So far so good. For the curious https://github.com/TeXitoi/navitia-playground-elm Any feedback welcome. I now need to add autocomplete. I've used JQuery-ui in the past for this task. I will have static list and xhr list of suggestions depending of the case. I'll need html rendering (not just pure text) in the suggestion list. I've typed "autocomplete" at http://package.elm-lang.org/ and I'm a bit confused: there is a lot of different propositions, and no hit on the popularity or anything (on http://crates.io you have at least the number of download). And the most promising (because there is a fork, video about it and a big version number), http://package.elm-lang.org/packages/thebritican/elm-autocomplete/latest have a quite intimidating message at the top. Any feedback on such libraries? Thanks.
AFAIK that was `&lt;-`. Maybe it's a related story: both left arrows were removed at the same time, and [the motivation](http://elm-lang.org/blog/compilers-as-assistants#simplified-records) in the case of `&lt;-` had an aesthetic side.
You can use anything as the backend. I use Elm with Node/Express and MySQL as the backend.
I may have mixed them up, it was a few years ago
Here is a good elm and haskell template that i am using for my senior project. https://github.com/tlentz/servant-elm-template
I am having a really good experience using postgREST right now, which automatically generates an api from your postgres database. You then write REST queries and get JSON back. Depending on your use case this is delightfully simple and does enough in terms of create/read/update/delete, nested queries with automatic joins and some authentication. Note: although it's written in Haskell, it doesn't really have anything to do with writing your own server-side Haskell code.
I am using Yesod with Postgres. It seems straightforward. The backend and frontend don't share any code, but it would be good to get some sort of automatic type conversion from `config/models` to Elm types with encoders and decoders.
https://twitter.com/krisajenkins/status/644860881810100224?lang=en http://rundis.github.io/blog/2015/haskell_ elm_spa_part1.html That's all nice, but theoretical from my perspective. In reality we use Elm with a Typescript/Node and PostgreSQL backend; along with a healthy serving of vanilla JavaScript for glue. It all works pretty well together. Although we're looking at moving away from Node, we're **very** happy with PostgreSQL. It seems to support the strong typing that has proven itself. We explored Haskell, but the development and tooling didn't feel right for us at the time. Though to your question, here's a Servant/PostgreSQL example: https://github.com/parsonsmatt/servant-persistent.
If you have an internal function and you want to test it, keep it private and test the exposed function that uses it. 
I have functions that is needed in other modules inside package, but I don't want them to be used outside.
I don't have the answer I'm afraid. At some point I saw an elm discuss thread about using Ports in a situation like this to get a smoother feedback but I'm not sure it matches up perfectly and I don't have the thread to hand :/ For my experience, I've definitely had problems when updating a simple input triggered an expensive re-render. Then the input was definitely unpleasant &amp; laggy. Though I forget if it was dropping characters. We improved the experience by using a [debouncer](https://github.com/mceldeen/elm-debouncer) and lazy rendering. Maybe that would help? Sorry if not. 
I left the following response in your article: &gt; You can test functions without exposing them to package users by using two modules: an internal module and an exposed module. In the internal module, you expose the functions you want to test, but not shared with the package users. These functions have to be separate from the exposed modules since any function exposed in these modules are accessible to package users. 
The solution is to use the `defaultValue` attribute instead of `value`. If you need to change the input's value later, you can use `Html.Keyed`. Here is an example: https://ellie-app.com/sWjQ7L3ZPa1/0. Alternatively, you can use a port instead of `Html.Keyed`. This is an annoying issue, but as I understand it should be fixed in 0.19.
I tend to use Erlang and Webmachine with one of several databases (Mnesia/Dets, Mysql,Postgres) depending on the project
This works! I don't know why I didn't think of this. There is no reason to have the input field (or in my case textarea) be a controlled element unless you need to change the value at some point. I'm the friend mentioned by OP btw.
Don't be sorry for attempting to help :) For my use case the re-render was (or at least "could potentially be") quite expensive, so exactly the same. Sounds like you could benefit from using just `defaultValue` as suggested by edkv too.
thank you for the answer, I think I finally understood ``Html.Keyed``
&gt; There is no reason to have the input field (or in my case textarea) be a controlled element unless you need to change the value at some point. Well, there is still a reason for this actually. If you don't synchronize the value of your input with your model, this means that you rely on the DOM state. This can cause another issue: the virtual DOM's diffing can reuse your input elements without clearing their values (because Elm doesn't know anything about the DOM state). See https://github.com/elm-lang/virtual-dom/issues/118. So in normal conditions you should always use the `value` attribute, but since its behaviour is unreliable and you are going to use the `defaultValue`, I recommend to still use `Html.Keyed` with your input elements to avoid this issue. Of course, this all is needed only until https://github.com/elm-lang/virtual-dom/issues/107 is fixed. Good luck!
&gt; https://github.com/parsonsmatt/servant-persistent is there a tutorial as to how to package all these things together? Like how the folder structure should look etc?
I am not sure how to use it for this situation. To me it sounds like providing a `key` to items in a list in React, however we are talking about an input field here (unless each character is an item is a list(?)) 
This seems like a winner to me. I'm quite new to programming, so I'm not even sure how to lay out my folders to build my application even if I wanted to use different backends. There is a postgREST elm package that will simplify things for me. Are there any tutorials that explain how to put things together? Say if I wanted to use elm, persistent and mySQL for instance? Would I use stack to build it?
You use `Html.Keyed.node "div"` (or another tag) for a container, then you are able to provide keys for its child nodes. If you change the key, the element will be re-rendered and its DOM state will be killed. And by providing different keys for different input elements you can be sure that the diffing algorithm won't reuse them. Example: https://ellie-app.com/RMJhZHQBa1/0. Try to type something into the field and then change the page. The value is still there. Now let's use `Html.Keyed`: https://ellie-app.com/Xp89BXkha1/0. The `value` attribute will also solve this issue. 
Thanks, but I need to keep my model in sync with my input, I think. Though honestly I'm not sure in what situation you wouldn't want to keep your input &amp; model in sync? If you have a pure html form submission I guess? And just needed the inputs to have the correct data?
This is good stuff. Thanks a lot. I'm off work in a bit, so I'll go home and play with this. :)
I guess the devil is in the detail. You can still listen to changes and update the model without using `value`. You just can't (easily) update the value in the input field from the js side.
There is a good blog post over at [thoughtbot.com](https://robots.thoughtbot.com/modeling-with-union-types). In short, it depends on your app! Both Records and Types have their right to exist. Btw there are even more good articles from the guys at Thoughtbot: https://robots.thoughtbot.com/tags/elm 
Hi. Author of the elm-postgrest package here. I'm working on the next version that should make things a bit nicer. Specifically, I'm working on the write API (create, update, delete). If you want to chat about the api of the library or your use case + needs; I'm always interested in a good discussion. I'll be at the SF elm meetup tonight if anyone in the bay area wants to chat in person.
I gotchu fam: https://github.com/tlentz/servant-elm-template
No need to use stack to build postgREST, it's distributed as a single handy binary. I would suggest working through the tutorial, it also helps to get to know a couple of SQL things if that's new to you. Then on the elm side you need to decode whichever JSON you're getting. I can imagine that as a beginner it's work, but all doable and you learn things in the process that will be universally useful. I'll consider writing a tutorial once I wrap up my project, I would then post it in this subreddit.
Sounds excellent, I haven't had a look at postgrest-elm yet, but a more "batteries-included" way of handling this would go a long way of making these things into a nice starting stack. Are you aware of quicktype.io which can generate a decoder for a given JSON? Would love to relay my experience with the library once I try it out. I'm not in the bay area unfortunately.
There's a functional programming discord: https://discord.gg/x4KaWjf
I use [phoenix](http://phoenixframework.org/) with Postgres on the backend. Phoenix is amazing. But as other said, you can use whatever you want on the backend.
This is an issue that will be fixed in 0.19. A proper fix required larger changes so it's not the kind of thing that could be patched in to the current 0.18 release. you can see the current work in progress on the dev branch https://github.com/elm-lang/virtual-dom/blob/dev/src/VirtualDom.elm#L256-L274 
 deposit : String -&gt; Float -&gt; Bank -&gt; Bank deposit name amount bank = Dict.insert name amount bank This function says that it returns a type `Bank` but that's not what it's returning in the function implementation. What you're probably looking to do is to pattern match on `Bank` to get its `Dict`, insert into that, then return a new `Bank`. deposit : String -&gt; Float -&gt; Bank -&gt; Bank deposit name amount bank = case bank of Bank dict -&gt; Bank &lt;| Dict.insert name amount dict Also, I assume you want a `Dict` where the keys are of type `String` and values are of type `Float` which you would need to update your `Bank` type to the following: type Bank = Bank (Dict.Dict String Float) If you want to learn more about opaque types I just posted a [video](https://youtu.be/1EtwaLN4568?t=1204) in another thread. That video example was based off of a [blog post](https://medium.com/@ckoster22/advanced-types-in-elm-opaque-types-ec5ec3b84ed2) that I wrote on opaque types.
https://discourse.elm-lang.org/
[Relevant announcement](https://discourse.elm-lang.org/t/transition-plan-from-google-groups/20)
Hi ChuckDuck22, thank you for the explanation. It helps. However, I am still confuse with the "case bank of". The type has only one definition. Why need the case bank of phrase instead of using the Bank type directly? Is all the opaque type, which are union type, must use the case of phrase? I will check you video. 
Hi. Let's put the term "opaque type" to the side for now and just talk about union types for a moment. Here is a union type. module Basics exposing (Maybe(..)) type Maybe a = Just a | Nothing This is a module with a union type called `Maybe`. The type (Maybe) is exposed and its values (Just and Nothing) are exposed through `(..)`. I can assign a constant to be of type Maybe like this: maybeNum : Maybe Int maybeNum = Just 1 Let's say I wanted to pull the `1` out of there and show it on the screen. Even though we're hard-coding it to be `Just 1` we need to use special syntax to pull that value out. This can be done either through parameter deconstruction, or through pattern matching (case .. of). main : Html msg main = case maybeNum of Just num -&gt; text &lt;| toString &lt;| num Nothing -&gt; text "Nothing here!" Even if a union type only has one value you still need to use deconstruction or pattern matching to pull that data out. It doesn't matter if there is one value or 100. *Back to opaque types* The only thing special about an opaque type in terms of syntax is the exposing line changes from `exposing (MyUnionType(..))` to `exposing (MyUnionType)`. The type itself is exposed, but none of its underlying values are exposed. This literally makes the type opaque because any code outside of that module cannot see into that type. Let me know if you still have questions have either watching and reading the posted examples.
I want to clarify that the Elm channel in this Discord is not official, doesn’t have any of the moderation or rules that official Elm spaces do, and in my personal observation I have found the interactions in there to be fairly toxic.
I want to clarify that the Elm channel in this Discord is not official, doesn’t have any of the moderation or rules that official Elm spaces do, and in my personal observation I have found the interactions in there to be fairly toxic.
There's Elm Slack. It's wonderful and very active! http://elmlang.herokuapp.com
I rearrange the code and it works without using case .. of: type alias B = Bank String Float type Bank n a = Bank (Dict.Dict n a) createBank : B createBank = Bank Dict.empty deposit : String -&gt; Float -&gt; B -&gt; B deposit name amount (Bank b) = Bank (Dict.insert name amount b) 
Im consolidating and applying all my elm learning in the below project... I appreciate any feedback! :) https://github.com/leordev/elm-graphql-starter 
Phoenix is amazing with great performance. I have worked with Python Django, Flask, Yesod, Servant, Express. Elixir Phoenix is my favorite. You get the best of everything. 
thank you for the link :) it is definitely helpful
Thx, @all
Yep, that should work too. I can't remember what that syntax is called though.
[removed]
See also: https://github.com/haskell-servant/example-servant-elm and: https://github.com/mattjbray/servant-elm-example-app
That's what elm-servant provides to some extend.
Which tutorial? The issue I'm having is that I have no idea how to combine my elm front end with a backend.
Bro i already linked that ;)
whoops :o looks like you got it covered.
The "Elm Invariant Examples" video was really great!
This is exactly what I need, too. Can you give a little more information on this please. When you say "at that point", what do you mean? In my subscriptions I have the Time.every approach, but without the bit you mention, that leaves me without the time until the first interval expires. In init I already have another task so I want to do both: [ Time.perform SetCurrentTime Time.now , Task.succeed foo ] I think I can use Task.andThen to do this, but am not sure how to plug them together. Any suggestions? Thanks
Thanks!
Instead of the Time.every subscription approach, I was suggesting grabbing it in your app or page init, right before you need it. You can also pass it in from javascript through flags if you are saving it to your model and want to avoid a `Maybe Time`. Does that address your question about "that leaves me without the time until the first interval expires"? Re. two Cmds, if they are independent, you can use `Cmd.batch`. Cmd.batch [ Time.perform SetCurrentTime Time.now , Task.perform SomeOtherMsg someOtherTask ] If your other task needs the current time as input, or if you want to update state both based on the same time and the result of the other task at the same time, you can use `Task.andThen`. 
Now I have Internal module for my decoders, but trying to import type to Internal from interface and decoder back from Internal to interface gives an import loop error. So do I need to define all types twice if I want to export them to package users?
Nothing in that list strikes me as contrary to Elm's target audience. You're not going to find as large of a collection of community libraries as with some tools, and it takes a while to wrap your head around reusable functions instead of components. But I think it's at least worth a try
The demographic that Elm is targeting is frontend developers using javascript that want the decreased debugging time, reduced testing requirements and reliability provided by a statically typed purely functional language. People often evaluate "super quick" on how quickly they can get started rather than how quickly they can finish their project. This means they generally exclude the long tail of testing and debugging. Static typing, the structure and exposed wiring of an Elm application can certainly slow down how quickly you can get started, but the simplification of the interactions between the parts of your application can result in fewer bugs and thus result in making it quicker to finish your project. 
&gt;I like to program in a functional manner (though still new). Depends how committed you are. Elm doesn't have typeclasses (as you may know). But it has all the other qualities. (I'm not strictly sure how the package manager works, but...) 
I second this. My first Elm project (which I also used to learn Elm) had a really slow start - I was thinking of switching to another frontend framework quite often in the beginning because everything is just so different with Elm. But I did stick with it and after "finishing" the project I really felt the power of Elm: In contrast to other frontend projects I did with jQuery+backbone.js or angular.js every change requested by the customer was very easy and safe to implement and because of all the safety nets Elm has I never introduced any bugs while doing those changes. 
Out of interest, how much of a requirement is JavaScript? I have some knowledge of it, but it's very limited. I like the idea of FP, as it suits my mathematical background/nature, and Elm seems a good entry point. Will it become a major issue down the line if my JS is weak? I'd only be looking to do this as a side interest for now.
It may not be the primary target demographic, but I see Elm as valuable for teaching programming in a functional style to beginners. It's easier to learn than typescript, Haskell and other functional languages. While I'd like to see typeclasses available, this isn't critical for teaching beginners. It is still sophisticated enough to be able to tackle challenges from [Project Euler](https://projecteuler.net), [Advent of Code](http://adventofcode.com), [99 Problems in Elm](https://www.gitbook.com/book/johncrane/ninety-nine-elm-problems/details) etc. As an academic interested in Data Visualization, Elm provides a good learning environment for teaching visualization programming. While allowing browser-based output, its front-end architecture isn't central for me.
My two cents is that you really don't need Elm library to archive autocomplete. I have developed two autocomplete mechanisms for app that I am working on, and they look and behave totally different, but both were pretty easy to setup (with only one exception, that I will get on the end of post. General idea is, what would be the model of one autocomplete? Usually it is a type alias for a record with field with suggestions, maybe you have filtered suggestions, mandatory Boolean to check if thing should be visible and other things that fit your need. This is my main point: autocomplete is pretty flaky area where usually requirements need one simple customization that is hard to archive with certain autocomplete library. On the other hand if you have figured out your Model, and you know how it is going to look, then you have covered good 75% of the autocomplete problem. Update function is last part, where you have to figure out how autocomplete will behave. Ususaly this is where you bind onKeyDown or onKeyUp with given action, decide what to do with the input string. After two or three hours you will have perfectly functioning autocomplete on your input box, plus, it is flexible as much as you want. I have a bias against libraries with visual components, pure calculations are fine, but plugging other people's Html's in Elm for me seems as misuse of Elm's power :) Promised caveat about easy to setup: Currently there is no way to conditionally preventDefault, and stopPropagation in Elm's event handlers. And I needed this, because I wanted to have focus on input field, but that still up and down arrows don't move the carret in text input, but move trough autocomplete suggestions. I had to use ports for this: When ever the user focuses given field we send a out port Cmd that binds event from JS that returns key events back to elm. This is Livescript snippet, but I hope you will understand the gist: ``` export registered-key-down = (elm-app, id, e) !--&gt; switch e.key-code | keyboard.ARROW_UP =&gt; e.prevent-default! elm-app.ports.keyboardnavup.send! | keyboard.ARROW_DOWN =&gt; e.prevent-default! elm-app.ports.keyboardnavdown.send! | keyboard.RETURN_ =&gt; e.prevent-default! elm-app.ports.selectedwithenter.send id ``` Ok conclusion to this caffeine ridden post, get richer by working out your own autocomplete. Spec the thing out and bang it. ! :)
I’m just curious, have it written Webapps in elm that have datatables with moveable/removable columns, multidate date-picker inputs, drag / drop widget, etc...aka things that people normally rely on existing js libraries to implement? Back when I looked at elm two years ago, that seemed like a pain in the ass to do with ports and like I was getting away from the beauty of elm These aren’t fighting words I’m just genuinely curious where the ecosystems at these days
Knowling Javascript isn't a requirement for learning Elm, but since the main target for Elm is the web most of the learning material assumes you've got some knowledge of web development. Which means some knowledge of Javascript, CSS, HTML, DOM and how events works. 
I've not needed advanced controls like that, yet. For a single date date-picker I used an [available package](http://package.elm-lang.org/packages/abadi199/datetimepicker/latest) which worked okay. For a file upload I had to use ports, but I adapted [code from a tutorial](https://github.com/phylor/elm-image-upload) to do that and it worked fine. But I also had to support only browsers starting from IE11 and newer (supporting XHR File Uploads). Implementing things once in Elm is not that much of a problem speaking from my very limited experience. What I did not yet have managed to do is to actually make anything reusable. I just reinvent the wheel every time I need it...
You need to load the wordlist into your model, then you can operate on it.
i assumed this is what the Msg "LoadWordlist (Ok x) -&gt;" is for ? The Http.send is called and fire a Msg; update trigger with this Msg and i have the updated Model. but how can i get this "changed" model in my checkString function ? 
Like all functions, they only way for them to get access to a value is to be passed it as a parameter eg. `checkString x` The question you should ask is 'what do I want to do with the result of calling the checkString function?'
&gt; could someone help me understand how to call the getDict function in my checkString? You cannot call anything in Elm. If you want to "call" something, you need to return a `Cmd` from the `update` (like you do with `getDict`). This `Cmd` will get executed by the runtime and most of the times you will receive back to the `update` a message with the result of the `Cmd` (in your case the message is `LoadWordList`) All Elm functions are pure, this means that you cannot have side-effects, this means that the only data you have to work with inside a function is the data it receives. If you come from a more imperative background and you have less exposure to pure functional languages, this might be a little bit unfamiliar but you will get used to it soon enough. 
You can do tonnes without JS. If you spot something nice in JS-land you can jump into it also, but you will go far without.
my first thought was that `checkString : String -&gt; Bool`. So i pass the search string from my main module to the sub module function and the `checkString` function checks if the string is in the wordlist. but you are right, somehow `checkString` also need the wordlist. I tried to called it with a checkString : String -&gt; Bool checkString givenSearchString = let result = update FetchWordlist givenSearchString in if result == givenSearchString then True else False but i see, `FetchWordlist` will return the given model so `givenSearchString` and not the result from `LoadWordlist ...` 
Thanks I'll give it a try. FWIW, I'm also trying another approach I read about where I can change the subscriptions based on whether I already have a time for now. Update every 5 seconds once I have a time and update close to immediately when I don't yet have a time. Like the following: subscriptions : Model -&gt; Sub Msg subscriptions model = case model.timeNow of Just time -&gt; Sub.batch [ WebSocket.listen webSocketUrl WebSocketEvent , Time.every (5 * Time.second) NowUpdated ] Nothing -&gt; Sub.batch [ WebSocket.listen webSocketUrl WebSocketEvent , Time.every (100 * Time.millisecond) NowUpdated ] 
So every time the ‘update‘ function receive a ‘Msg‘ it will return a ‘(Model, Cmd Msg)‘ to my ‘main program‘ ? In case of ‘LoadWordlist ..‘ the runtime gives me a Model with (if case is Ok x) the received Wordlist (as String) and a ‘Cmd.none‘? But normally we also have a ‘view‘ function in our main which take the Model and render it. Will the ‘view‘ function be triggert every time the model "change"? Somehow my ‘main‘ has to inform function ‘x‘ which will receive my model and then this function can do some comparison? 
I find for myself that 99% of what I want to build is Http requests, And Html structured in different ways. Elm is great at this. The harder parts are when you're trying to integrate with Third party things like Google maps, Auth0, etc... that often requires interop. Also, more advanced Browser APIs such as local storage and such aren't currently supported in Elm and also require interop. I personally don't find that these to be bad tradeoffs. The bigger Elm gets the less this is going to be a problem as well. 
My key takeaway from this article: &gt; I don’t believe Elm can be widely adopted with such poor documentation, especially with people coming from Java or JavaScript, where such concepts and functions are not intuitive at all. To grasp them, much better documentation with a lot of examples is needed.
I found it odd that formatting was listed as a problem. Perhaps since every editor I use with elm automatically formats elm (using elm-format) when I save, I have never noticed it... In fact, I would say that the elm-formatting story is the best I have experienced in any language, because I dont have to think or worry about it, my editor does it for me.. and I find the results to be very nice and readable... So much so that I am struggling with the ugliness of other languages now!
Yea This is a confusing area. I am using thebritican/elm-autocomplete. I looked into sporto/elm-autocomplete but it doesn't have the ability yet to navigate using the keyboards arrow buttons. 
That's definitely a journey to learn, but no single part is too hard and afterwards you feel like you surmounted a major step towards building real web apps. In the postgREST documentation, there is Tutorial 0 and Tutorial 1: https://postgrest.com/en/v4.3/tutorials/tut0.html If you set that up, you get something running (on your local computer) and you can make Http requests with elm to something like http://localhost:3000/books?select=author,name That gives you a JSON back, which you then need to parse. https://guide.elm-lang.org/architecture/effects/http.html https://guide.elm-lang.org/interop/json.html Go at it, you can do it and it's very satisfying when each part finally clicks.
I just tried to work through the official tutorial but gave up in frustration because the linked examples don't match the described code. 
Trying elm in VSCode but feeling let down the intellisense, is it the plugin/editor/language or me that's at fault? For example I was experimenting with the http://elm-lang.org/examples/http code. There's a Http.Error call that seems to work correctly but if I do Http followed by a dot intellinsense pops up but Error is not in the list, if I type in Err it asks if I mean Error. Any reason this doesn't work? I find these hints such a powerful way to learn a new language. 
IMO formatting should part of the spec. Or at the very least, elm-format should be included in the package. (It was a separate download last I checked.)
I don't understand what the problems are here. The formatting is to reduce diffs and is not uncommon in internal Enterprise style guides, same concept as a python dict where each mapping has its own line ending with a comma. The language itself is incredibly simple. Its type scoping is monomorphic so no high level abstraction like in Haskell that requires a ton of study. JavaScript interop is done using the actor model pattern (elm is event driven). Tasks are for any built in effects that shouldn't be used within a pure function. Subscriptions are for incoming messages. I see this as difficult as learning aws lambda. The problem might be that a lot of new users are not used to pure functional languages. I'm still unsure.
I can manage that, its the deployment that is killing me. Can’t get postgREST to work on heroku.
`update` receives the `msg` and the `model` and produces a new version of the `model` with a command that can contain some request for the runtime (a Http request or maybe a request for the current date or some other side-effect). After `update` returns, a new `view` is computed based on the new `model` and this is what you end up seeing. So, if you need something in the view and you received it through a message, just make sure it ends up in the model. :) 
Look at this https://github.com/rofrol/elm-navigation-example or https://github.com/rtfeldman/elm-spa-example
In Elm the view will reflect values that are stored in your model. This is managed for you by the runtime. Suppose that you model has the following structure: model = { images : ["asdf.jpg","qwer.jpg", "zxcv.jpg"] , currentIndex : 0 } We have `images` that is just a list of strings (`List String`) and the currentIndex, an integer (Int). Now, our view will simply pick the image at the `currentIndex` from the images list and place the string in the `href` attribute of a `img`element: ``` import Html exposing (div, img) import Html.Attributes exposing (href) import Html.Events exposing (onClick) view model = let image = currentImage model prevBtn = div[][ text "Previous"] nextBtn = div[] [ text "Next" ] in div[][ image, prevBtn, nextBtn ] currentImage model = let url = List.drop (model.currentIndex-1) |&gt;List.head |&gt;Maybe.withDefault "not_found.jpg" in img[ href url] [] ``` Let's see what is happening in the code abode: List.drop drops the n first elements in a list: List.drop 1 [5,6,7] == [6,7]. So, if we are in the index `4`, we drop the first `4 - 1` items in the list. After dropping the previous elements from the list, we pick the one in the beginning of it. Getting the list head can fail (if the list is empty), so with `Maybe.withDefault` we provide a default value. Currently our code just displays the image, let's add some onClick logic. Lets change the buttons code to look like this: ``` prevBtn = div[][ text "Previous", onClick PrevImg] nextBtn = div[] [ text "Next", onClick NextImg ] ``` And our Msg type will include these two operations: ``` type Msg = PrevImg | NextImg ``` In the `update` function, we can treat these events in the following way: ``` update model msg = case msg of PrevImg -&gt; let newIndex = if model.currentIndex - 1 &lt; 0 then 0 else model.currentIndex - 1 in { model | currentIndex = newIndex } NextImg -&gt; let urlsLength = List.length model.images newIndex = if model.currentIndex + 1 &gt;= urlsLength then urlsLength - 1 else model.currentIndex + 1 in { model | currentIndex = newIndex } ``` There are two things to note here: - First, we could have a single Msg called `ChangeIndex` instead of `PrevImg` and `NextImg`. I believe that it is up to you to decide - having more Msgs makes it clearer what is the intent of an action, but incrases code size (not big problem). - Second, note that the whole model is visible both to the view and to the update function. A tip that I give to my coworkers is not to jump on premature optimizations and "hide" the model from the functions. It might seem silly, but if greatly reduces the number of arguments in the functions, creating easier internal APIs. As time goes by and your project becomes more mature, the behavior of each function will be clearer and then you can pass to the functions just what it needs.
Here's an example based on a different data structure: [ellie-app.com/bc7D9gPHxa1](https://ellie-app.com/bc7D9gPHxa1/2) The [InfiniteZipper](http://package.elm-lang.org/packages/maorleger/elm-infinite-zipper/latest) simplifies our `update` code, because we can never "select" an image we don't have. It also helps us [make impossible states impossible](https://www.youtube.com/watch?v=IcgmSRJHu_8) :) 
What you've described sounds reasonable. Can you post an example on https://ellie-app.com/new of what you're trying?
Thanks for the answer. I've updated the original post now with a link. I was hoping there was a more succinct way than passing a single value through multiple functions, but am happy to be guided.
Thanks for the link. Passing the bonus suit through all of the view functions is definitely a possibility. The one downside to this is that your board &amp; stack renderers need to know about that detail. Another option is to "pre-wire" a card rendering function, pass that through the board and stack views. I've done that here. The card view function is partially applied at the top level, and then passed through the various containers. https://ellie-app.com/46QQ5PnG7a1/0 There are pros and cons to both approaches, so let your use case dictate the best way for you. The good news is that if you change your mind, the compiler will help you refactor! Do the `board` and `stack` need to know anything about the bonus suit? If so, it may make sense to pass its value to them. Is the `card` the only thing which cares about the bonus suit? Then it may be better to pass through the card view function.
There are only two ways to give the data to your functions. Either you pass the data to the function or you use currying so the function already has the data.
Sorry if I'm being stupid, but I can't see anything different in the link above? What lines have you changed? In answer to your questions, `board` and `stack` don't need to know about the bonus suit; not that I can foresee, anyway. The only other part of the app that I can see needing it is `update` and its functions, where a hand containing the bonus suit scores double points. Another thought I've had is changing the model to include a `Bool` for bonus in the `Card` type. That seems unnecessary though, if I understand your answer.
&gt; Do I have to change the types of each of these functions to pass the model through, or is there something I'm missing? Yes! If you want to pass more information down the tree, you need to put that information in the function's signature. The only way to bypass this is if you are declaring the functions within the scope of the main view. If you do this you will have access to main from inside the functions. This is however unadvisable. It is better to give each function the information it needs. 
Hmm... I guess my changes didn't save! Let me quickly redo it.... try this? https://ellie-app.com/46QQ5PnG7a1/1 
As a thought experiment, you can take this style a step further: https://ellie-app.com/46QQ5PnG7a1/2 Create the partially applied `cardview` and `stackview` functions in the main view. Then you pass the `stackview` to the `renderBoard` function. I kind of prefer this, so the `renderBoard` has no idea that its children will be rendering cards. Just pass in what is immediately useful to the view function.
Thanks so much for your time on this. I'm going to need to read it through a few times to get my head around it. I do get what's happening, but can't see how I'd ever have got there myself. I still have a lot to learn, I guess. This is my first project and I'm wondering if I've bitten off a bit too much; but I'm loving the process so far!!
Functional programming has a weird learning curve. It's confusing until all of a sudden it just clicks. I suggest you try [Learn you a Haskell for great good](http://learnyouahaskell.com/), it's free to read online. It won't get you very far into Haskell and you may never use Haskell again but it's a very friendly introduction to thinking functionally.
I'm working on an Elm course for Pluralsight, focusing on topics past beginner level (e.g. style-elements, recursive JSON decoders). 
I published a small package called [`map-acummulate`](http://package.elm-lang.org/packages/r-k-b/map-accumulate/latest/), because I had trouble identifying the pure-functional pattern I needed for a "collision implementation" in an app. I've added examples that would've helped me when I was searching ― hopefully others find them handy also!
A redirectUri server for OAuth. I'll use it initially for API access to Gab.ai, but may also build a Twitter client. https://github.com/billstclair/elm-oauth-middleware
In OOP they call this 'dependency injection using factories'. It's essentially the same idea to solve the same problem. Both OOP and Functional programming recognize that global mutable state (global variables) is bad and passing value around all the time is a pain so they each have a similar solution to this problem.
A recreation of the battle logic for Dragon Quest 1. Nothing fancy right now, but it's coming along.
I have already followed through a lot of LYAH; being exposed briefly to Haskell was what got me interested in FP. I found Haskell fascinating but a bit too esoteric to start with. Then I learned about Elm, which seemed more beginner-friendly. I do intend to make my way back to Haskell at some point, once I'm more comfortable with Elm and FP in general. Thanks for the tip.
&gt;I have already followed through a lot of LYAH Then you're good, you got the basics. The learning curve of the material is harsh past LYAH. &gt;I do intend to make my way back to Haskell at some point, once I'm more comfortable with Elm and FP in general. Maybe you could look into the ML family which Elm comes from instead of Haskell. Real World OCaml is free and very good.
Working on a little chess like game http://indianchess.co Developed using Elm, uses Firebase for 2 player game. Sources: https://github.com/girishso/indian-chess Looking for suggestions on improving the Model structure.
I wrote a blog post that aims to help bridge the gap between absolute beginner tutorials and more advanced usage. Give it a read: &lt;https://wapl.es/elm/2017/12/12/elm-counting-occurrences.html&gt; I'm still learning Elm, so I'd love some feedback around the approach I've taken. It would also be great to get some comments from relative newcomers to Elm so that I can fill in any key bits of information I've missed out. 
OP here. It would be great to get some feedback regarding a) my approach to this and b) what I missed out from a newcomers perspective. I'm still learning Elm so please point out any egregious mistakes!
Working on the TossBounty frontend. Crowdfunding for software engineers by software engineers. Having a good ole time trying to deal with dates. 
I'm new to elm and trying to figure out why this union type doesn't quite work. type ButtonActions = Increment | Decrement type Msg = ThirdOption type BetterMsg = Msg | ButtonActions update : BetterMsg -&gt; Int -&gt; Int update msg model = case msg of Increment -&gt; model + 1 Decrement -&gt; model - 1 yields the error: is causing problems in this pattern match. 28| Increment -&gt; ^^^^^^^^^ The pattern matches things of type: ButtonActions But the values it will actually be trying to match are: BetterMsg I would think that the union operator would be equivalent to writing BetterMessage = ThirdOption | Increment | Decrement but that doesn't seem to be correct!
The name "union type" is quite deceptive, so I prefer to refer to them as "tagged unions". The key is that every variant of your type must have a distinct tag. So your type BetterMsg has a constructor named Msg, that is in no way related to the type called message. The first thing in each variant is always the name of the constructor. Tagged union types are completely disjoint: if something is a ButtonAction, it is never a BetterMsg. What you could do is this: type BetterMsg = BaseAction ButtonAction | SomeMsg Msg
Wow, yes, this works, very interesting. That works perfectly! So I'm essentially creating new generic types, BaseAction that has a generic type that is contained within the union ButtonAction and the same for SomeMsg, correct? Final code for posterity: type ButtonActions = Increment | Decrement type Msg = ThirdOption type BetterMsg = SomeMessage Msg | SomeActions ButtonActions update : BetterMsg -&gt; Int -&gt; Int update msg model = case msg of SomeActions Increment -&gt; model + 1 SomeActions Decrement -&gt; model - 1 SomeMessage ThirdOption -&gt; model
Neat! I have been meaning to do this also. I will use this as a learning aid. :D
They're not quite generic types. So, it's structured like this: * Each `type` you declare makes a "tagged union type." * Each tagged union type has 1 or more "Constructors" or "Variants", which are the possible forms a value of that type can take. * Each constructor takes 0 or more arguments, with their types specified. `BetterMsg` is a type, with one constructor having a `Msg` argument, and the other constructor having a `ButtonActions` field. I just don't want to confuse this with polymorphic types, which is what is often what people mean when they say generics. That said, tagged unions give you something a little bit like polymorphism in a typed OO language like Java. You can imagine that your tagged union type is an interface, and that each variant is a class that implement this. A function that pattern matches on your type is like a method of the class. The difference is that, instead of defining each method together with your class (variant), you know exactly which variants could implement the interface, so your methods are spread throughout your program, and each method defines its implementation for each variant (through pattern matching). 
Thank you for your thorough explanation!!! I think I understand what you mean. I'll do some more reading into tagged union types in the docs to try and get a further grasp on them :-)
I like how you have written the article with the beginner in mind. If you are not used to the brief type variables, it is hard to understand how `fold`s work and expanding them out is a great way to see what's going on. I have tiny amount of Elm to give any meaningful feedback on the article as a whole. If your task of counting is for small lists and just need it to be done once then you can use a simpler looping construct to count as well. ts = [ "elm" , "javascript" , "javascript" , "rust" , "elm" , "rust" , "javascript" , "typescript" ] uts = Set.toList (Set.fromList ts) counts = List.map (\ut -&gt; ( ut, List.length (List.filter (\t -&gt; t == ut) ts) ) ) uts -- Counts will be [("elm",2),("javascript",3),("rust",2),("typescript",1)]
Very nice work, also super clean!
Thank you so much guys :)
First, congrats are in order. Now, as feedback, I would have used `updatePlayer` and `updateEnemy` instead of `setPlayer`/`setEnemy`. "Set" feels too imperative to me. Also `returnDictEntryInt` is just `Maybe.withDefault 0` Have fun learning Elm. :)
I think that's the hardest part of learning Elm for a beginner. The rest is "just" syntax. Struggling to understand what a method _does_ and how to actually use it is challenging I think, hence the paragraph on expanding `foldr`. I like your approach to counting groups, although I think using a `Dict` in the tutorial exposes the reader to a bit more of Elm which is why I took that approach.
Thanks for the feedback on returnDictEntryInt. I thought that felt really clunky! And I found a way to get rid of those pseduo-setters completely with better record syntax. One of the confusing things I've found in my journey is that different Elm versions are so different there's a lot of outdated advice out there.
&gt; One of the confusing things I've found in my journey is that different Elm versions are so different there's a lot of outdated advice out there. Elm is a young language and it is still in development. In the last two years the rate of change slowed significantly and I doubt that we will see the kind of change we saw in 0.17 (when Signals were removed). As a rule, if you find code that was written prior to 0.17 you might be better off ignore it. Most of the code that worked in 0.17 will work in 0.18 with minimal changes (see the [Less Syntax section from the 0.18 announcement](http://elm-lang.org/blog/the-perfect-bug-report) ). 
You've discovered a bug in Elm! There is no kind checking on type declarations. Your type states you that Bank takes three values: an uninhabitable Dictionary constructor, a String, and a Float. The problem is that Dict by itself is a Type constructor, and needs to know the types of its keys and values. So just as one can't have a value x :: Dict only x :: Dict key value one can't represent your type. In Haskell, there is kind checking. Here's a demo: λ&gt; data X = X Map Char &lt;interactive&gt;:2:12: error: • Expecting one more argument to ‘Map’ Expected a type, but ‘Map’ has kind ‘* -&gt; * -&gt; *’ • In the type ‘Map’ In the definition of data constructor ‘X’ In the data declaration for ‘X’ As has been mentioned, what you're probably after is type Bank = Bank (Dict.Dict String Float) 
Wow! This uses surprisingly little code. This should really be one of the examples on the elm home page.
Yes, you will need to know JS if you want to interface with the huge JS ecosystem - and that's something you will want or need to do as your when you start building more sophisticated apps.
Looks good and clean!
You need List.concat. List.concat data [(0,1,2),(2,1,3),(0,1,2),(2,1,3),(3,1,4),(0,1,2),(2,1,3)] : List ( number, number1, number2 ) It combines a list of lists into a single list. 
[here is my attempt](https://ellie-app.com/5pmVNctMNa1/0).
Really cool project!
I was using recursive function to do it: concatIndexes : Int -&gt; List (Int, Int, Int) -&gt; List (List (Int, Int, Int)) -&gt; List (Int, Int, Int) concatIndexes maxIndex heads remains = case List.head remains of Just shape -&gt; let nextMax = maxIndex + 1 + Maybe.withDefault 0 (List.maximum &lt;| List.map (\(x, y, z) -&gt; max x y |&gt; max z ) shape) newShape = List.map (\(x, y, z) -&gt; (x+maxIndex, y+maxIndex, z+maxIndex)) shape in concatIndexes nextMax (List.append heads newShape) &lt;| List.drop 1 remains Nothing -&gt; heads jediknight's way may be better. 
Neat! I may use this :)
Hey, you've made a nice start. Some general tips from someone who's also not been using Elm very long: It might be more elegant to represent weapons and messages as their own types. For weapons, this means that the player would have a single weapon field instead of two that you need to update. For messages it means that you don't have to think about the type signature of your tuple every time you write a function using a message. It's worth looking at destructuring assignment. Instead of calling Tuple.first and Tuple.second, in the `let` section you can do: `(first, second) = tuple`. This would be useful in both your update and view functions. Finally, you should narrow down what your functions accept so they only take the relevant information. For example, playerDamage takes a `Model`. Really it should take a `Player` and an `Enemy`. Similarly, enemyLowerDamage and enemyUpperDamage should take an `Enemy` and then a `Player`. (You might have noticed this by now, but the enemy damage functions have a subtle bug: because they don't take any parameters, they use the global `model` which never changes.) I saved my fork after playing to make these changes so you can have a look if you want to: https://ellie-app.com/cxFN2FS3Na1/2 I was also going to suggest using different model update syntax but from your later comment sounds like you worked that out already. I'm going to try writing a simple roguelike in Elm when I get some free time so it was useful to see what you did here, thanks for sharing! Seems like random number generation is pretty annoying, I'm not sure how that will work if you want to use it hundreds of times to generate levels.
Not necessarily, foldl is also implemented as a recursive function. Here is how I would refactor your implementation. concatIndexes : Int -&gt; List ( Int, Int, Int ) -&gt; List (List ( Int, Int, Int )) -&gt; List ( Int, Int, Int ) concatIndexes maxIndex heads remains = case remains of [] -&gt; heads shape :: tail -&gt; let localMax = Maybe.withDefault 0 (List.maximum &lt;| List.map (\( x, y, z ) -&gt; max x y |&gt; max z) shape) newShape = List.map (\( x, y, z ) -&gt; ( x + maxIndex, y + maxIndex, z + maxIndex )) shape in concatIndexes (maxIndex + 1 + localMax) (heads ++ newShape) tail 
Thanks ! 
Nice, feel free to make issues ! 
Here's [what I tried](https://ellie-app.com/5pmVNctMNa1/0): concatData xs = let f ys a n = List.foldr (g &lt;&lt; addEach (n+1)) a ys n g t a n = t :: a (maxFour n t) addEach n (x,y,z) = (x+n,y+n,z+n) maxFour w (x,y,z) = max w x |&gt; max y |&gt; max z in List.foldr f (\_ -&gt; []) xs (-1) It's not necessarily very readable if you're not comfortable with foldr, but it does perform the operation in one pass.
There are some Elm helpers for Bulma, Tachyons and Bootstrap. Elm folks tend to favor CSS only frameworks. There is also elm-mdl which is an attempt to bring the Material Design to Elm. As far as I know, it uses the CSS from the old material design lite library. 
&gt; Elm folks tend to favor CSS only frameworks. Yeah, that's what I thought. So what about some interactive elements? Have they to be handled entirely via elm views?
This article misses a crucial point -- testing. It gives an example of testing, says fuzz test can be used, but doesn't actually show how to use the fuzzer in the test. How do you make an assertion on the RGB value on something that was random?
Check out http://package.elm-lang.org/packages/rundis/elm-bootstrap/latest - it's Bootstrap in Elm!
Thank you. Will do so.
Warning: This site has a coin mining script! So I had this site open for a few days because I was going to read it, and was wondering why my computer was running so hot.
The simplest and most flexible way is just to use `class` function on your Elm view. It has no difference from using CSS frameworks directly in raw HTML.
I have added a beta signup! I am launching this thing on January 1st. TossBounty.com
Nix expressions? Are we talking about the package manager? I'm totally out of the loop and some extra info in the GitHub readme would be really helpful.
Not only in the view, you sort of would have to weave it through your application in the Model (to keep the state of whatever interactive thing), the view to display it, and in the Message to react to the interaction messages. At first it surprised me of, because you can't just import a lib and insert whatever component with a one line of code change. But it makes total sense in the context of the elm architecture. I love the learning process of having control over your entire application like that, but I am definitely looking to extract some of my most common components and maybe abstract them into a library some day.
Yes, Nix package manager language source files are called Nix expressions.
I guess I'm asking what the interaction is between your project and Nix packages - do you mean I can use this to write Nix package definitions using the Elm language? What limitations are there, what's the benefit?
Today 866 packages :)
Hi, Could you define a formal grammar for regular expressions, and then do 2 things with it: 1. Create a fuzzer that produces example strings that match the regular expression. 2. Use the grammar to build a regular expression matcher for use in code at runtime. I have often wanted to fuzz test regular expressions.
I'm interested in this. I was thinking about it recently and sketched out some basic design ideas...it seems like there's a lot of potential there!
It is possible to add breakpoints in the js generated by the Elm code. Create a dummy variable (ex: `_ = "debbug me"`), then open the source in your dev tools, search for the `debbug me` string and place a breakpoint in the line. This way you can see the execution step-by-step.
Thank you for the example illustration. Now I think I understand the List.foldr function in the example (although I am not sure why the List.foldr function can take 4 parameters. I thought List.foldr takes only 3 parameters. That is (a -&gt; b -&gt; b) -&gt; b -&gt; List a). I am also still not quite sure I understand the real solution. I think the f function in real solution is getting the max index (after added n+1) while updated indexes in the shape and push it to last element of the result. Is that right? Can you explain what the final statement is for? List.foldr f (\_ -&gt; []) xs (-1) 
`foldr` does indeed only take 3 parameters, but if it returns a function, you can apply that, making it take 4. For example, let's say we've got a function that just returns its input: f x = x But, if we give it a function, say `addOne`: addOne x = x + 1 Then when we call it we can apply it to its argument straight away: f addOne 3 == 4 There, `f` looks like it's taking 2 arguments, but really it's only taking 1. In fact, *every* function in elm only takes one argument. If you have something like this: add x y = x + y It's really just sugar for this: add x = (\y -&gt; x + y) Or this: add = (\x -&gt; (\y -&gt; x + y)) This is currying, and it's what makes things like the `foldr` example possible. The final statement is exploiting this idea. You can think about it working like this: (List.foldr f (\_ -&gt; []) xs) (-1) The first part builds up a function in the fold. The function takes a number (the maximum seen value so far) and returns a list. The "base case" (for when there's none of `xs` left) ignores the maximum value, and returns an empty list. `f` will use successive elements from the list, and call the rest of the function with the biggest value it's seen so far. We need to get the built-up function started with something, so we use `-1`, as one bigger than that is `0`, so it doesn't add anythin to any of the tuples in the list.
I make the auth page separated and Elm never sees auth data. I have a little bit of JavaScript that substitute the xmlhttprequest object for a one that adds the auth token on the way out and send back to the auth page in case of 401. Elm doesn't have to care at all about auth. And since it never sees a password I can have a special ?debug=true URL that serves the debug version if someone needs to send a model trace for debugging purposes.
&gt; Meta Good intentions indeed. I thought he had some very good points. Beats the ostrich effect anytime.
This is a large pain point for me as well. I resort to `Debug.log` but even that can be [jarring](https://ellie-app.com/9pSDrKPvsa1/0). In the console the log statements aren't in the order that I would expect from reading the code. The remedy is for me is to break larger functions into smaller functions and if it's sensible to expose those functions from the module then TDD those smaller functions.
Actually I was thinking about this design too. The main concern with it is security - are there appropriate mechanisms to prevent users from faking client side code, pretending they're authenticated, and accessing private data? For example, if you're holding { authenticated = false } or something similar, can user tweak that to true, those assuring system he's logged-in? One solution is to keep token instead and every time pass it along request, so the back-end can validate token before sending back sensitive info.
The backend must not trust the frontend or you are screwed! In your auth page you fetch a token from the backend and store it locally (local storage, session storage or cookie). You retrieve it in your app page and send it from your shimmed xmlhttprequest object. If the backend does not get a valid cookie it doesn't give any data.
Hey, As far as I understand, and have implemented, there’s nothing stopping you from having your elm do everything without a JavaScript shim. You will need to use a port to access local storage for a token obtained through a sign in mechanism and then use the token for authenticated requests. Check out Richard Feldman’s SPA, I followed that example. And I’ve got a Phoenix backend with Guardian handling auth. Happy to answer other questions you might have about it.
agree: I had the same issue and I cope with it writing (and maintaining...) unit tests for very specific functions, which aggregate the major logic of my software.
When neither the compiler nor my (few) tests can help me with a specific issue, I mostly use the JS debugger: I find it more effective than logging and as a plus, I've learned a lot by reading the generated code.
I would say you're not in the target audience. Elm is limiting rather than enabling (https://martinfowler.com/bliki/EnablingAttitude.html) This is key! You can stop reading here if you're bothered by a limiting approach. If you're focused on product quality more than developer experience (DX is important, just not as much as the end result for me), you will encounter pain points almost every day: - doing something as simple as a debounce takes an insane amount of copy paste code - interop with JS is both tedious and required for some advanced DOM manipulation techniques or to use the latest web platform features. Since Elm cannot be used on the server without insane hacks and you using Elm indicates you like static typing, your app now requires 3 mandatory programming languages (elm, JS, whatever you use on the backend) forced by the architecture. - Good luck if you need real, performance friendly (e.g, they remove the VDOM node once they're finished, and can not create race conditions) "removal" transitions in a few places in your app. - If you want to create a library of reusable "components" for you and/or your coworkers (or model-update-view functions in the Elm jargon) be prepared for a tough ride both on the authoring and the composing side. - I've never seen a project NOT using the native JS modules to achieve some of the more advanced things you need when you have a living product. Yet, this approach is undocumented, heavily discouraged by the elm creator and the community (same thing really...) and it can break between different versions of Elm. So there's a bit of dishonesty here: The amount of JS workarounds you need is often played down and somehow, that JS code that is here to circumvent elm limitations doesn't count toward your "runtime errors" count. Basically it's very hard to abstract things over in Elm, so you either copy paste like crazy or you just dumb down your UX requirements to meet your deadline. The "everything is a function, just create more of them!" is an excellent rule of thumb but it's not enough to do everything elegantly (OCaml and scala solved this by being object/functional hybrid langages). I'd say the target demographic are: - Developers overwh*elm*ed by the insane amount of choice that exists in the JS community. You want to follow an extremely opinionated beacon (set by someone who is not primarily a frontend developer...). Like Ruby on Rails / EmberJS but strongly typed and even more opinionated and restricted. Again, limiting rather than enabling. - Language enthusiasts willing to try the new approaches offered by Elm on their spare time without contributing anything back to the language/architecture (your feedback is usually not overly welcomed, your github tickets will be flat out ignored) - Functional programming beginners who want to learn a very simple language (well designed too, compared to historical ML) with a simple tool chain that doesn't get in the way, or libs that break - Developers that are not working with strong designers and who can thus take the liberty to simplify the UX to better fit the elm lang/architecture strong/weak points. Basically you favor pushing new features out fairly quickly on the market that are pretty stable (the language is limiting and doesn't give you rope to hang yourself with like in JS land) but at the cost of making the 20% harder things much, much harder than in JS (in my experience, devs always skip that part rather than bother). This tech-first approach is key and will not be a fit for everyone (though in my experience, most devs fall in this category)
Yes, keeping tokens locally can be an answer. That's one solution. Keeping that in mind ) Thanks
Hmm. Interesting. That looks as if it would work, but requires ZFS, which none of my current BSD VMs use. Ok, I've learned my lesson. Linux it is. Worse is better.
Hey, Jon Yes, separate SPAs were a bad idea, understood that now. Will check Richard Feldman's code. Thanks. I've implemented custom auth modul, nothing fancy, simple username/pass for now, but will need to add auth with social nets accounts as well. Yes, Elm can handle everything, if will design app to use authentication tokens with every request. Guess I can store token within Elm as well, say in model, and set it into cookies or send as Http request body, so that won't arise any need to port to JS. Experimenting with GraphQL and Absinthe now, so auth modul implementation highly depends on there features. Will see what they offer and code auth appropriately. Will post here, if there's something new/valuable. Between, many thanks for readiness to help, Jon, much appreciated.
Except…Debian 9 has dropped npm!
This is quite promising. Particularly it seems to point towards a sane way to depend on specific non-released sources. One thing I found a bit confusing/irritating is that `elm-stuff/exact-dependencies.json` is part of the nix configuration -- I tend to think of `elm-stuff` as disposable and put it in `.gitignore`. And then, is there a way to get compiled `.js` artifacts out when I'm trying to build a project that doesn't expose any modules, but should just provide a web app?
Can we please not spam this subreddit with these low-quality videos? This kind of content belongs in a blog, not as these dinky webcam-only videos. I get it that this guy is trying to promote his Elm consultancy. But nearly every day I read r/elm I get baited into clicking on one of his crappy videos.
Agreed, it's hard to tell what this is about if you don't know Nix. I've played with it a bit now. What it does is take a project with an `elm-package.json`, and generate a Nix expression in `default.nix`, in addition to a helper file `elm-srcs.nix` and the usual `elm-stuff/exact-dependencies.json`. You can then use this Nix expression to build/install the project using the usual Nix tools. E.g. if you just run `nix-build` in the directory, you'll get a `./result` directory which contains the package documentation and compiled exposed modules (I think). This could for example be used to add an Elm library to the Nixpkgs package collection. I haven't figured out how to use it to build a simple Elm app yet. `elm-srcs.nix` contains links to package source archives and hashes, so using this, you've fixed your project's dependencies and can no longer be surprised by upstream changes. One other potential benefit of being able to handle the dependencies with Nix is that it gets easier to depend on packages that aren't published to packages.elm.org. E.g. edit `elm-srcs.nix` to get a certain dependency from a local subdirectory or a particular git branch somewhere.
&gt; low-quality posts Nearly everything in this sub is geared towards beginners, or written by people who have just tried Elm, functional programming, or static typing for the very first time. These videos are par for the course.
I should be clearer. I am saying low quality because an 8-minute face-cast is incredibly lazy. 
I agree. See https://github.com/domenkozar/elm2nix/issues/3 About the `.js` artifacts, I think we need to pass the main module to `elm-make` in `default.nix` and it should work.
Hi everybody! I just finished porting some great colormaps from matplotlib (all credit for the actual colors goes to these guys: https://bids.github.io/colormap/). I needed them for some visual niceness in a project, but generally they are meant for scientific plotting. Since it is my first library (and I have plans to expand it with some more colormaps and helper functions), every and any feedback is very welcome. I also accept feature requests, pull requests, documentation polish, tests, and bug reports.
Usually before writing tests, I open the REPL, import the module with the exposed function and play with it in the repl. That's often of great help.
Nice! too often colormaps are neglected by writers in visualizations. Thanks for making it less likely. Btw, is the project available?
Yes, the project is available right away. You can do `elm-package install 2mol/elm-colormaps` if you want to use it in your project and you can read the source code on github.
I meant the related scientific project ^^ that motivated you?
This is great, thanks. One suggestion for future colour maps would be the widely used 'ColorBrewer' colours from Prof Cindy Brewer: http://colorbrewer2.org , widely used by the visualization community. They cover continuous, nominal and ordinal and diverging schemes. The categorical versions come in a variety of 'sizes' depending on the number of categories you wish to colour. See for example [this chart](https://static1.squarespace.com/static/526a8a82e4b07233cf88d715/t/5277ab60e4b0ad8b178e3e14/1383574372980/brewer.png?format=2500w) showing the range of schemes. The [Java source of a library I wrote](https://github.com/gicentre/gicentreutils/blob/master/giCentreUtils/src/org/gicentre/utils/colour/ColourTable.java) has the RGB values for the schemes if that helps.
https://ellie-app.com/8WmyZ2Jz2a1/0
Thanks. That creates a bug whereby all the tiles change color with the dropdown selection. I figured it out. Zipper.mapCurrent changeColor model.rainbow That does the trick.
Good idea. If the license is permissive enough then I will gladly take a shot at implementing an Elm version of those. I think they are mostly the same from this page, no? https://matplotlib.org/users/colormaps.html I see discrete implementations in your library at first glance, do you interpolate anything, or work with continuous gradients?
Oh, that's still in the making, but one thing that I was looking at is contour plots for map data. But nothing to show yet :)
Ah, I hadn't seen that Matplot lib also includes the Brewer colours (the first set of sequential; diverging; and qualitative colour maps). A but naughty of them not to credit Brewer. In my implementation I store the discrete values and when a continuous range is requested I linearly interpolate between adjacent discrete colour values. In practice these are sufficiently close to give a good continuous scheme (and I seem to recall Brewer mentioning that interpolation between them was sufficiently good to preserve their perceptual properties). The ColorBrewer scheme has an Apache 2 licences, see this [further reading page](http://www.personal.psu.edu/cab38/ColorBrewer/ColorBrewer_updates.html)
Thanks, I've included that into https://github.com/domenkozar/elm2nix/pull/7 Feedback welcome!
Looks good, Apache 2 will be ok, I just have to figure out how to document the changes etc. I also thought about interpolating between more coarse-grained color data, looks like that makes sense to include in the next version. If you have time and motivation to help, I would really enjoy collaborating btw. Even if it's just putting stuff in the issue tracker. Of course the implementations are all really simple (and fun), but for building a good API I could use another point of view. For example discrete color maps might be better served with `Int -&gt; Color`, but I have to think more about that.
Cool. Updated https://ellie-app.com/8WmyZ2Jz2a1/1
&gt; thinking about writing 2 main Elm modules I'm actually in the process of re-thinking my single app and split it into two (auth and anonymous). I want to do it so that the authentication data is always defined for the authorized one (I find myself mapping over `Maybe Authentication` too many times). But I don't want two SPAs. Just two separate branches for the root `update` function, serving a different Model and Msg.
Can you create minimal demo so it's easier to grasp the mechanism?
Thank you so much! I am learning something. So "f addOne 3" is same as "(f addOne) 3" and also same as "f (addOne 3)". Is this associative property always true in Elm regardless what are the cascaded functions? 
Simple visualization built for purposes of learning Elm - [Github languages](https://github.com/paulhoughton/languages)
I created an artillery calculator for arma3 as a toy project to learn about Elm! https://tribaal.io/artillery/ I'd love to have some (constructive) criticism of the code, some things felt a little clunky to me, and I assume that's because I'm doing things wrong - but maybe not. I don't know. I'd like to know :)
Here's an implementation using only core modules: [ellie-app.com/kjRRySFm2a1/0](https://ellie-app.com/kjRRySFm2a1/0) I broke it down into steps, such as treating each member of the first list individually. Then once that function works, it's easier to use `List.map`. Also, I changed the type signature: `List a -&gt; List (List a) -&gt; Set Int`. It sounds like a `Set` is what you're after?
A simple solution written to be easily understandable (and not very clever): ```elm view : Model -&gt; Html Msg view model = let grid = [ [ 0, 1, 2 ], [ 3, 4, 5 ], [ 6, 7, 8 ] ] keys = [ 1, 2, 8 ] in grid |&gt; List.indexedMap (\rowIndex row -&gt; if List.any (\x -&gt; List.member x keys) row then Just rowIndex else Nothing ) |&gt; List.filterMap identity |&gt; toString |&gt; text ```
Can you please clarify, how correctly use your videos? Is there any "table of contents" or keyword based search? A visual approach like this can be useful: https://www.dailydrip.com/topics/elm/drips/style-elements thank you.
Yea i will get to it :)
872
You can also write that as: grid |&gt; List.indexedMap (\rowIndex row -&gt; if List.any (\x -&gt; List.member x keys) row then [rowIndex] else [] ) |&gt; List.concat |&gt; toString |&gt; text 
Mostly they are not in any order, In that I tend to make them as I think of topics. but I take topic suggestions 
Hi, I am currently using elm-validate in my current project. I have been reviewing the library source code and I found something that I don't understand. Take this function for example: ifBlank : error -&gt; Validator error String ifBlank = ifInvalid (Regex.contains lacksNonWhitespaceChars) As far as I understand this function has one parameter "error" and a response "Validator error String". But in the function implementation there is no reference to that variable "error" as if it was implicit. If we look further down in the code we can see the opposite example: ifNotInt : error -&gt; Validator error String ifNotInt error subject = case String.toInt subject of Ok _ -&gt; [] Err _ -&gt; [ error ] Where in the function declaration there is only one parameter "error" but the function is implemented with two input parameters "error" and "subject". I can't find any reference to this in the elm manual. Can someone explain me how this works or, at least, give me directions where to find info about this subject? Thank you! 
Hi, this relates to something that people might not be used with from other languages: higher order functions. In the first case, the definition of `ifBlank` declares it a being a function that takes an `error` and produces a `Validator error String`. The fact that you are not seeing `error` in the parameters list means that `ifInvalid` is a function that produces a function. In other words, `error -&gt; Validator error String` is what `ifInvalid (Regex.contains lacksNonWhitespaceChars)` returns. The second case is similar but from a different angle. The type `Validator error subject` is an `alias` for a function that takes a `subject` and produces a `List error` (as you can see on line 25). In the particular case of `Validator error String`, the type variable `subject` is replaced with the concrete type `String`. So it resolves to `String-&gt; List error`. [Maybe this page will help you.](https://learnyouanelm.github.io/pages/06-higher-order-functions.html)
That makes sense, I think I understand the concept. Now that I know what I'm looking for I will dig a little more into the subject because right now I would not know when to apply this and it seems very useful. Thank you very much!
A platform for people with car parkers that sell them.
I am having trouble understanding Html Msg Cmd Msg Are they something like type decorator that transform/extend Msg?
The way I learned this was by looking at the source code of the `core` modules. It is very well written and it has these kind of helping patterns. It wasn't obvious right from the start but soon enough my brain's pattern matching kicked in and I got it. 
`Html Msg` is an instantiation of the generic type `Html msg` with `Msg` as the type argument. Another way to think about this is: `List String` is a list containing `String`, `Maybe Int` is like a box that can contain either `Just Int` or `Nothing`, `Html Msg` is a `Html` that produces `Msg`. If you play enough with `List `and `Maybe` you will get the general pattern of parameterized types. [Reading Types](https://guide.elm-lang.org/types/reading_types.html) chapter of the Guide provides more information. 
I see no reason why you should have problems. You will be able to use the needed JS libraries through the ports. [You have Bootstrap helpers in Elm.](http://package.elm-lang.org/packages/rundis/elm-bootstrap/latest) You can call the backend server by using the Http library. I'm not sure about point 6 but there are testing facilities in elm (`elm-test`). For the folder setup, I would recommend using the layout described in [elm-spa-example](https://github.com/rtfeldman/elm-spa-example). 
Great. Thanks for this.
...yet another! It's great to see that the interest is growing :-)
The [https://media.pragprog.com/titles/jfelm/communicate.pdf|excerpt about JSON decoders] can be downloaded. Thanks for the author/publisher for making it available, as it is the kind of guide that I wish I had when I started with Elm.
UPDATE: We've merged https://github.com/swagger-api/swagger-codegen/pull/6947 into master for a beta release of the Elm client generator. Please pull the latest master or use the SNAPSHOT version (2.3.0) mentioned in the project's README, and let us know if you've any feedback. Enhancement list: https://github.com/swagger-api/swagger-codegen/issues/7224
What are expressions called that look like this: Html Msg, or Named "Elliot". These come from the examples on the Elm web site. I know Html is a built-in type and Named is a custom type.
Thanks for the tip. I will look into that as well.
Awesome
875
Some modules will have private internal types that they only use internally and have no need to expose to the public, which is why you can choose not to expose a type. The fact that you can expose a function that uses a value of an unexposed type is just a side-effect of that. It's not a very useful side-effect, as it does make it harder to use that function. The only real advantage is that it prevents importers from being able to write any code that relies on the existence of that type. Eg. in the `Complex` module, the author can rename the type called `Complex` without breaking any of the callers.
Remember that it's OK to change a little bit of your code to Elm at a time. You can replace parts of your code with Elm a little bit at a time. I would also recommend gaining access to Elm's Slack, so if you have any questions, we can help you. 
Thanks!
I think you're right: it's an edge case the compiler does not check (yet?). I don't think it should be possible to expose a function that refers to an unexposed type. There's another trap when exposing union types: it's possible to expose only some of the constructors. In that case, it's impossible to write a `case` statement examining the types. That's why it's helpful to expose values like `bar = Bar` even when that seems silly at first.
I've mostly run into JSON decoding when accessing APIs, so it was a bit hard to follow where this all fit in. Would be nice to have a quick example at the start showing how this fits in with the ports.
All of this should be possible in elm 1. Elm has a pub sub system called ports, that allows you to call js code, then type checks the response at runtime 2. Elm renders to html, so anything you can do with html you can do with elm 3. Yes, you can always render html with classes like btn. Elm also has multiple bootstap helpers. I'm currently using http://elm-bootstrap.info/ and like it a lot. 4. Again you would use ports for this 5. Yeah, elm can make network calls 6. Elm is a pure language so you don't need to intercept network calls, instead you can assert that a function describes the network call you wish to make. Simulating network calls to your server you would probably still do in rails. 7. I tend to use the following, but many other people have opinions Wiring and shared login goes in main /Main.elm Pages go in pages /Pages/Login.elm /Page/Home.elm /Page/User/Edit.elm /Page/User/ChangePassword.elm Shared components get their own files /Components/FancyButton.elm /Components/FancyInput.elm Shared utilities go in utils /Utils.elm Network calls go over here /Api.elm This has scaled up to several 1000 lines of code, I may refactor as my app grows. But many other people have opinions on this topic that are worthy of consideration.
`Html Msg` is a type signature. It describes the type of an argument to a function or the type of the value returned. `Named "Elliot"` is a value of a tagged union. The value is made from the tag `Named` and the string `"Eliot"`. 
That's very useful thanks.
Continuing work on the DQ1 battle simulator. Moved the project to Github. Doing a little refactoring right now to make the code cleaner.
Not a useful side effect? This is the whole point of not exporting your implementation! You can put severe constraints on a type's use, since you have to go through the API to manipulate it.
I agree, I think it isn't useful to allow this and it's probably just an oversight rather than an intended feature. [There's an open compiler issue related to this at the moment](https://github.com/elm-lang/elm-compiler/issues/1611) so I imagine it is probably (or will soon be) on Evan's radar, and I would expect at some point in a future release doing this will become a warning or error - it's probably not a big priority however.
@rofrol here is a minimalistic demo with inline comments: https://github.com/JordyMoos/elm-pageloader-demo-minimal I hope this makes things clear :)
I managed to do this with the following: This finds the value of the query parameter `foo` (e.g. `.../?foo=bar`) *index.js* const app = Elm.Main... app.ports.locationSearch.send(window.location.search); Add `Bogdanp/elm-querystring` to your project: elm-package install Bogdanp/elm-querystring *Main.elm* import QueryString exposing (one, parse, string) port locationSearch : (String -&gt; msg) -&gt; Sub msg type Msg = ... LocationSearch String ... update msg model = case msg of ... LocationSearch val -&gt; case parse val |&gt; one string "foo" of Just val -&gt; let _ = Debug.log "foo" val in ( model, Cmd.none ) Nothing -&gt; ( model, Cmd.none ) subscriptions model = locationSearch LocationSearch
Why not pass these in as initial flags?
How do I get the initial flags passed in from JS? Unless you mean using a port?
Check [the documentation](https://guide.elm-lang.org/interop/javascript.html). You can pass in flag at startup using `Elm.MyApp.fullscreen` or `Elm.MyApp.embed`.
That worked. Thanks.
If you use the [Elm Navigation](http://package.elm-lang.org/packages/elm-lang/navigation/2.1.0/Navigation) module then your initmodel function will receive the launch url.
when using ports the data is marshalled to JSON before being passed through. For large objects this could be a bottle neck.
It's not 'ELM', it's just 'Elm' like the tree (https://en.wikipedia.org/wiki/Elm). https://ellie-app.com is what you're looking for. It's like codepen but for Elm. 
**Elm** Elms are deciduous and semi-deciduous trees comprising the flowering plant genus Ulmus in the plant family Ulmaceae. The genus first appeared in the Miocene geological period about 20 million years ago, originating in what is now central Asia. These trees flourished and spread over most of the Northern Hemisphere, inhabiting the temperate and tropical-montane regions of North America and Eurasia, presently ranging southward across the Equator into Indonesia. Elms are components of many kinds of natural forests. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/elm/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
Oh ! Looks really cool, thank you !
I LOVE YOU
Hi, I would be interested in working on this if you're looking for people to outsource to. Feel free to message me privately.
Bad bot
Thank you ylixir for voting on WikiTextBot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
It’ll be tough to say exactly what is causing your program to lock up without seeing it in action. Outgoing ports do some conversion to make certain types into convenient JS analogs, but in the case of strings the value is [passed straight through the port with no modification](https://github.com/elm-lang/elm-compiler/blob/3b6525a9eda95a3fe1c6fd83a99498c1b9be27a9/src/Generate/JavaScript/Foreign.hs#L45). The only way to find out for sure when it comes to slow JavaScript is to [profile your code!](https://developers.google.com/web/tools/chrome-devtools/rendering-tools/js-execution)
I'm confused... what does the below mean? (x::xs, y::ys) -&gt; f x y :: zipWith f xs Another similar statement: (x::xs) -&gt; f x :: map f xs
[removed]
Wait I want to try now.
Bad bot
Science has now validated your birth mother's decision to abandon you on a doorstep. *** ^^^I'm&amp;#32;a&amp;#32;Bot&amp;#32;*bleep*&amp;#32;*bloop*&amp;#32;|&amp;#32;[&amp;#32;**Block**&amp;#32;**me**](https://np.reddit.com/message/compose?to=friendly-bot&amp;subject=stop&amp;message=If%20you%20would%20like%20to%20stop%20seeing%20this%20bot%27s%20comments%2C%20send%20this%20private%20message%20with%20the%20subject%20%27stop%27.%20)R͏̢͠҉̜̪͇͙͚͙̹͎͚̖̖̫͙̺Ọ̸̶̬͓̫͝͡B̀҉̭͍͓̪͈̤̬͎̼̜̬̥͚̹̘Ò̸̶̢̤̬͎͎́T̷̛̀҉͇̺̤̰͕̖͕̱͙̦̭̮̞̫̖̟̰͚͡S̕͏͟҉̨͎̥͓̻̺&amp;#32;̦̻͈̠͈́͢͡͡&amp;#32;W̵̢͙̯̰̮̦͜͝ͅÌ̵̯̜͓̻̮̳̤͈͝͠L̡̟̲͙̥͕̜̰̗̥͍̞̹̹͠L̨̡͓̳͈̙̥̲̳͔̦͈̖̜̠͚ͅ&amp;#32;̸́͏̨҉̞͈̬͈͈̳͇̪̝̩̦̺̯&amp;#32;Ń̨̨͕͔̰̻̩̟̠̳̰͓̦͓̩̥͍͠ͅÒ̸̡̨̝̞̣̭͔̻͉̦̝̮̬͙͈̟͝ͅT̶̺͚̳̯͚̩̻̟̲̀ͅͅ&amp;#32;̵̨̛̤̱͎͍̩̱̞̯̦͖͞͝&amp;#32;Ḇ̷̨̛̮̤̳͕̘̫̫̖͕̭͓͍̀͞E̵͓̱̼̱͘͡͡͞&amp;#32;̴̢̛̰̙̹̥̳̟͙͈͇̰̬̭͕͔̀&amp;#32;S̨̥̱͚̩͡L̡͝҉͕̻̗͙̬͍͚͙̗̰͔͓͎̯͚̬̤A͏̡̛̰̥̰̫̫̰̜V̢̥̮̥̗͔̪̯̩͍́̕͟E̡̛̥̙̘̘̟̣Ş̠̦̼̣̥͉͚͎̼̱̭͘͡&amp;#32;̗͔̝͇̰͓͍͇͚̕͟͠ͅ&amp;#32;Á̶͇͕͈͕͉̺͍͖N̘̞̲̟͟͟͝Y̷̷̢̧͖̱̰̪̯̮͎̫̻̟̣̜̣̹͎̲Ḿ͈͉̖̫͍̫͎̣͢O̟̦̩̠̗͞R͡҉͏̡̲̠͔̦̳͕̬͖̣̣͖E͙̪̰̫̝̫̗̪̖͙̖͞&amp;#32;|&amp;#32;[**T҉he̛&amp;#32;L̨is̕t**](https://www.reddit.com/r/friendlybot/wiki/index)&amp;#32;|&amp;#32;[❤️](https://www.reddit.com/r/friendlybot/comments/7hrupo/suggestions)
That's very aggressive Elm code. :) `x::xs` is pattern matching for lists. it is the same as saying `head::tail` it will pattern match any list that has at least 1 element in it. `(x::xs, y::ys)` pattern matches two lists that have at least 1 element. What comes after `-&gt;` is just function application. It might be more puzzling because of the use of infix function `::` With parenthesis is `(f x y) :: (zipWith f xs)` which is "apply f to x and y and cons (join) that to the result of applying zipWith with f to xs" In the second case is " apply f to x and cons to the result of mapping f over xs" After playing some more with lists this kind of code will look familiar. :) 
By the way, `vim mode` is awesome !
Thanks for replies! Well, I'm not so experienced with chrome performance profiler, but I got that some "Timer fired" call took 3.59s with message "Recurring handler took 3.59 s". This call has initiator field and it points to work function in elm part. Source code for this part: function enqueue(process) { workQueue.push(process); if (!working) { setTimeout(work, 0); // &lt;- right here working = true; } } function work() { var numSteps = 0; var process; while (numSteps &lt; MAX_STEPS &amp;&amp; (process = workQueue.shift())) { if (process.root) { numSteps = step(numSteps, process); } } if (!process) { working = false; return; } setTimeout(work, 0); } So, I believe in this part Elm tries to execute commands asynchronously. And after this part I have my JS image viewer opened. Elm runtime process the command to long, does'n it? And if I want to fix it, I can call some other port just to show viewer to user. But the question is - does Cmd.batch guaranty command's execution order?
I feel so dumb right now. I've found bottle neck, it wasn't Elm fault. It was totally mine. Image Viewer was expecting url string, but not base64 string (releasing two app right now, I have a mess in my head). And of course processing of 5mb string takes so long. Sorry for bothering
Bad bot
I don't get how you humans can live with those bodies. Your skin must itch all the time. I would go insane. Or that clicking sound in your ears everytime you swallow. The constant need to blink, or that you can *never* relax your tongue inside your mouth. How do you know you are breathing deep enough?? And all that water! How the constant sloshing doesn't drive you mad, I have no idea. *** ^^^I'm&amp;#32;a&amp;#32;Bot&amp;#32;*bleep*&amp;#32;*bloop*&amp;#32;|&amp;#32;[&amp;#32;**Block**&amp;#32;**me**](https://np.reddit.com/message/compose?to=friendly-bot&amp;subject=stop&amp;message=If%20you%20would%20like%20to%20stop%20seeing%20this%20bot%27s%20comments%2C%20send%20this%20private%20message%20with%20the%20subject%20%27stop%27.%20)&amp;#32;|&amp;#32;[**T҉he̛&amp;#32;L̨is̕t**](https://www.reddit.com/r/friendlybot/wiki/index)&amp;#32;|&amp;#32;[❤️](https://www.reddit.com/r/friendlybot/comments/7hrupo/suggestions)
Thank you for posting this.
I had a similar issue in my app, two different type aliases that were almost the same with a couple different fields. my solution might be too simplistic for your needs but I just put the differences in their own type. { name: String, id:Int, moreInfo:NodeDataType} type NodeDataType = InstitutionNode String | PersonNode {firstname:String, lastname: String} This way your map example to get the id does not need to worry about whether the record was for an institution or a person. Similarly with your first example trying to set the labels. You'll still end up needing a union type any time you want to set or render the institution name. That was my solution and I'm happy with it, it improved the app's maintainability a ton. 
First of all, thanks for the long post. I may be the only one, but I prefer seeing questions that come out of real (often messy) situations, rather than cleaned up abstractions. Two thoughts: 1. Could you just extract the common bits of `PersonNodeData` and `InstitutionNodeData` and put them on `Node_` ? type alias Node_ = { classes : String , id : String , labels : List String , name : String , data : NodeDataType , selectable : Bool } type NodeDataType = PersonNode PersonNodeData | InstitutionNode InstitutionNodeData type alias InstitutionNodeData = { institutionType : String } type alias PersonNodeData = { firstName : String , lastName : String } 2. If not, or it's better for other reasons to duplicate some of the data between PersonNode and InstitutionNode (say you have a third type of Node that doesn't have a name field or something), you can avoid some duplication of update functions using extensible records - as you did somewhat with GenericData. Say you want a `setName : String -&gt; Node_ -&gt; Node_`, but not all of your node types have a name field to set, in which case they should just remain the same. setName : String -&gt; Node_ -&gt; Node_ setName name node = case node.data of PersonNode data -&gt; { node | data = setDataName name node.data } InstitutionNode data -&gt; { node | data = setDataName name node.data } OtherNodeTypeWithNoName data -&gt; node setDataName : String -&gt; { a | name : String } -&gt; { a | name : String } setDataName name data = { data | name = name } You still have to case the NodeDataTypes of course, but there is just a single line duplication. You don't have to write separate `setPersonNodeName` and `setInstitutionNodeName` functions to do the same thing thanks to extensible records. I suppose if you are asking can those two duplicated lines be merged somehow, the answer is - not really, unless you can move the common data to where it can be updated without case-ing on the NodeDataType. Richard Feldman had a talk that covered related topics, see esp. starting at https://youtu.be/DoA4Txr4GUs?t=17m36s where he talks about narrowing the types. 
This. If you find yourself trying to circumvent the type system, you probably have the wrong abstraction. 
Alternating between [doing phantom stuff](https://github.com/rtfeldman/elm-css/issues/375) in `elm-css` and writing more of [Elm in Action](https://www.manning.com/books/elm-in-action?a_aid=elm_in_action&amp;a_bid=b15edc5c)!
Why not store the generic data as it is on the models directly? type alias Node_ = { classes : String , generic_data : GenericNodeData , specific_data : NodeDataType , selectable : Bool } type alias GenericNodeData = { id : String , labels : List String , name : String } type NodeDataType = PersonNode PersonNodeData | InstitutionNode InstitutionNodeData type alias InstitutionNodeData = { institutionType : String } type alias PersonNodeData = { firstName : String , lastName : String }
Here's how I'd model this: module Node exposing (Node, NodeId, Details(..), InstitutionType, setLabels, setId, setFirstName) type alias Node = { id : NodeId , classes : List String , labels : List String , name : String , selectable : Bool , details : Details } type Details = Person { firstName : String, lastName : String } | Institution { institutionType : InstitutionType } setLabels : List String -&gt; { r | labels : List String } -&gt; { r | labels : List String } setLabels labels record = { record | labels = labels } setId : String -&gt; { r | id : String } -&gt; { r | id : String } setId id record = { record | id = id } setFirstName : String -&gt; { r | firstName : String } -&gt; { r | firstName : String } setFirstName firstName record = { record | firstName = firstName } Notes: * This can't have the duplication described in OP, because only `firstName`, `lastName`, and `institutionType` are present in the different union type branches. * The `setLabels`, `setId`, and `setFirstName` implementations have narrower types, so we have [less to keep in our heads](https://www.youtube.com/watch?v=DoA4Txr4GUs) when debugging. * I'd definitely call it `Node` instead of `Node_`. If there's something else called `Node` in your namespace, you can disambiguate by qualifying one or both of them, e.g. `Foo.Node` and `Bar.Node`. * I went with `Details` as a separate union type rather than using a type variable (e.g. `type alias Node a = { details : a, id : String, ...}` and then `type alias PersonNode = Node { firstName : String, lastName : String }`) because you mentioned wanting to mix these in a `List`. Doing it this way, you can just have `List Node` without needing a wrapper. (The downside of this approach, compared to the aforementioned type variable approach, is that you can't write a function that only accepts institution nodes.) * I changed `id : String` to `id : NodeId`, `classes : String` to `classes : List String`, and `institutionType : String` to `institutionType : InstitutionType`. This is how I'd model all of these, based on their names. 🙂 Hope this helps!
Not exactly. Elm HTML elements are just functions. Where a div takes attributes and the second argument is child elements. So a bit, of you where using React without JSX. If you’re looking for how to compose Elm projects, or the general breakdown Evan’s talk on the topic is excellent https://youtu.be/XpDsk374LDE
What vim plugins does the community use to lint elm code? 
That seems obvious with your answer that I should have decoupled common data from specific ones. &amp;nbsp; The reason why the structure is like it is now is because I get it from a third party ([cytoscape] (http://js.cytoscape.org/#notation/elements-json)). Through ports, I decode / encode this particular structure and I didn't (my bad) ask myself if there is a better to **work** with the structure and not only **communicate** the stucture. I guess the best solution is to decoupled working structure and "communication structure" even if it means to have extra work for decode/encode (with intermediate types). In fact, the communcation part won't be the one I will have to work the most on. Thanks! 
My goal wasn't to circumvent the type system but to avoid code duplication. I really really apreciate Elm type system. I had hard times understanding it but now I love it (even if I'm far from being a Elm-Type-System ninja). But you are right when you say that I have the wrong abstraction though. But this can be said for most of the problems I face with Elm :)
First, thanks for your talks, they are always inspiring and full of "ah ah" moments. Like said, the structure was 'inherited' from a json I decode/encode from/to third party. And I think I need two structures: * one for decoding/encoding * one for working with it in an easy way &gt; I'd definitely call it Node instead of Node_ Yep, this coems from some test file and naming wasn't ideal, I admit &gt; that you can't write a function that only accepts institution nodes I don't think that will be a problem. I have to test it though but I can still can now if a node is an instituion or person by looking inside it. &gt; I changed id : String to id : NodeId, classes : String to classes : List String, and institutionType : String to institutionType : InstitutionType Good point. But for `id : NodeId` and `institutionType : InstitutionType`, I tend to do the same but only for documentation (I think it's more undestandable in function type declaration). I know that it also allows to change the underlying type (from `type alias NodeId = String` to `type alias NodeId = Int`). But is ther some kind of best pratice to know where to do it, where it is too much aliases? And here NodeId is not 'aliasing' any type and `setId` requires `String`. is aliasing missing? &amp;nbsp; I have a LOT of work to do now, but code was getting worse and worse to maintain. Tanks for the help! 
As others pointed out, the question is: why not putting all common stuff together? I ws stuck on a given structure without realizing that I could use my iwn structure! Thanks
Haskell. God do I miss the lovely experience of writing Elm!
A web-game similar to a simple risk. I've used SVG to draw the board, mainly because it's so easy to develop. I suppose canvas would be faster. Communication is done with MQTT (over ports), although I could probably have sticked to Elm's websockets. This was my first real-world experience with Elm. * My biggest painpoint was starting with an attempt to "box" SPA each "component" into it's own update/Model/Msg (beginner mistake, I know). Ends up being messy and confusing. Especially when you have to map Msg, or want to reuse a view that produces a particular Msg variant with in a view with a different Msg. I ended up undoing this, but some traces remained. * Once you have a prototype running, adding features is a breeze. Because the "if it compiles, it works" mantra is true for most features. * In general I would say that with Elm you can trust that edge cases are covered, contrary to JavaScript. Live Demo: https://quedice.host
[removed]
'Compose' is a very general concept so you'll have to be more specific about what attributes you're looking for. Elm is a functional language and smaller functions are inherently composable in to larger function, so yes, Elm does compose. 
I mean that are there ways other than function composition? the component in react is a object with internal state (in the sense of object-oriented programming), and they can also be composed 
Elm is not object oriented and does not have objects. If you are thinking in objects or react terms you will have a bad time.
no, I don't think in object - oriented way, and I have much more experience with Haskell than Java. object orientedness can be implemented in Haskell like records(oohaskell) , which is a useful way to model gui, and the most important thing it provides is encapsulated local state (I think state monad may provide an alternative abstraction, but there seems to be no one talking about that) 
I'm working on a package that implements React-like components in Elm. It's not yet ready and there are some performance-related challenges I need to solve, but at least I can say that it's possible to achieve what you are asking for in Elm. I expect to finish the work in January and I'll announce it here on Reddit once it's done.
I am using ALE for linting in Vim but for Elm I've set it up to lint only on save, as compilation can be CPU intensive sometimes.
I like this trivial approach that further cements that you don't need large libraries or fancy techniques to solve stuff in Elm. However, the challenge with modals/popup in Elm is to handle the oft-expected closing of the modal when clicking outside of it – that is, outside of the modal's territory for catching click events.
UPDATE: the Elm client generator is now available in the latest stable release of Swagger Codegen v2.3.0. Please refer to the release note for more information: https://github.com/swagger-api/swagger-codegen/releases/tag/v2.3.0
It’s already handled in the posted code. onClick of “background “ div TogglePopup is sent. 
It’s already handled in the posted code. Line #14, in view code to be precise. 
i'm writing the ellie server in purescript using purescript-run because it's fun and because i can write interpreters that interact with s3 in production and the local filesystem in development. once it's done people will be able to run ellie locally for the purpose of contributing without needing their own s3 bucket.
This is very cool but I expect you'll run into a lot of people that are confused that it's not optics.
This looks really nifty! I would be wary of calling it Lens, as that has an established meaning within functional programming (that of [functional references](https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/basic-lensing), as in evancz’s [`focus`](https://github.com/evancz/focus) package.) How about Elm Goggles? 8D
We may finally be getting to the point where enough people have had negative experiences with lenses the data structure to have learned that they're not worth getting excited about. 😅
Oh? Can you point me to somewhere where people are discussing their bad experiences with optics? They've been nothing less than wonderful for me and I sorely miss them when using Elm.
It's interesting to learn about this. I come from an OO background, and in Visual Studio land, there's a utility called "Code Lens," which was the intended referent of the name. Thanks for bringing this to my attention!
It was a fairly hot topic on Slack about a year or two ago...I don't have links to those discussions unfortunately. I do have other links though: Evan talked about why [things like Lenses are a bad idea from an abstraction perspective](https://www.elmtown.audio/5bb8e022 ) starting at 55:18 (particularly at 57:30) I talked more concretely about why [lenses are a code smell](https://youtu.be/DoA4Txr4GUs?t=17m37s) (concluding at 28:25) **tl;dr** - whenever reaching into nested data structures sounds appealing enough that lenses sound appealing, that's a symptom of a deeper problem which would be better solved by refactoring than lenses. 😄
Thanks for the links, I'll check them out. Regarding your point about reaching into deeply nested data structures, one of my most common uses of lenses is using `Data.Aeson.Lens` to reach into a huge (often poorly documented) API response and pull out exactly the one or two pieces of information I need. Often times this is during the early exploratory parts of development in which cases eventually full JSON decoders will be written, but those may takes hours to write and would really kill my momentum during the exploratory phase. Do you have any suggestions for approaching the same situation in Elm? 
Wow, this is great timing! I've been tinkering with something for exactly this use case...can you DM me on [Elm Slack](http://elmlang.herokuapp.com/)?
Sure.
Can confirm, heart fell as I read the article
&gt; whenever reaching into nested data structures YMMV, but while I use lens for reaching into nested data structures, this is not the only use, by far. Prisms are incredibly useful, and I also like using the abstractions it provides to document the relationship between my types.
Wow that's awesome. Also though it would be about functional lenses but then nicely (^^) surprised to see that it was way more useful ;). Thanks for this! it's great for the ecosystem. All these tools sometimes make me want to switch from neovim to atom, but that's a tough choice haha. By the way, maybe "Elm Code Lens" is less functionally biased
Thanks for setting this up. I've had a look through and, as a beginner, I'm a bit unclear on when I should go where. I've recently been using r/elm and #beginners on Slack, depending on the complexity of the problem I've been asking for help with. Where would Discourse fit in to this? Also, where would be the best place to ask for feedback on my simple game I'm doing as a first side project?
That's pretty cool! :-) Is this done by parsing the original code and then trying to recover the import/export/usage information from it? One quick off topic Q: What's the font used? Looks really nice.
Yes. I'm building up an AST of each file in the project using Mats Stijlaart's [elm-sytnax](https://github.com/stil4m/elm-syntax). This is the same AST code that he's using in [elm-analyse](https://github.com/stil4m/elm-analyse). The font is [Iosevka](https://github.com/be5invis/Iosevka), my personal favorite of all the fonts with functional syntax ligatures.
This looks awesome, do you plan on making a vscode extension? I moved away from atom and now use vscode.
For both this plugin and Elm Test Runner, I am holding off on porting to VS Code until the plugins are more fully-featured. Elm Lens, especially, relies on Atom functionality that may or may not be portable to another editor (the ability to insert arbitrary, non-editable text in-between lines; Atom calls these "markers").
&gt; this is not the only use, by far. Prisms are incredibly useful What are some examples?
Just about every time you have a sum type or a parser. A dummy example: lefts :: [Either a b] -&gt; [a] lefts = toListOf (traverse . _Left) With parsers, you can manipulate the source representation: &gt; putStrLn $ "{\"x\":12,\"y\":[1,2,3]}" &amp; key "x" . _Number +~ 4 &amp; key "y" . _Array . traverse %~ Bool . fromMaybe False . fmap even . preview _Integer {"x":16,"y":[false,true,false]} You can also only affect part of a traversable structure: &gt; [1,2,3,4,5,6] &amp; traverse . filtered even %~ (`div` 2) [1,1,3,2,5,3] That might look contrived, but once you have that in your toolbox, you might find that many of your problems really were nails ;) You can find many more examples in [this code](https://github.com/bartavelle/7startups/blob/00490a41ae1695ac97282de80b4fc60bfa3d3915/Startups/Game.hs#L127), where prisms are used extensively to collect the card effects.
Sorry, I should have been more specific - what are some examples in **Elm**? 😅
you can't write this in elm! When I saw the title I thought someone wrote a js hack... 
Yeah, I like CodeLens instead of just Lens for this reason. Clicked the article expecting something very different for this very reason. I do like this, though, very similar to the sort of markup Ionide gives you for F#. 
The Ionide suite for F# accomplishes this in VS Code, both as a little liner note such as with Elm Lens, but also as an invisible line comment at the end of the function declaration line if you like to keep the type checker from bouncing the code up and down as you type. I have no idea if the semantics will match up for you but it is possible! 
Awesome! Good to know. Yeah, I mostly just need to do the legwork to find out if the hooks exist. In the meantime, I'm just super-cognizant of all the places where I'm invoking `atom` in the JS layer, and trying to keep those behind abstraction boundaries where it makes sense.
I will have to check out Ionide. Thanks for the tip!
Hey, welcome! Any of those places sound fine. Whichever you prefer! If you’re asking for feedback, there’s a spot on Discourse especially for that. Give it a try.
I am working on the web-port of a real-time strategy game. Currently, this is closer to a prototype, multiplayer is not yet implemented in the web port. But people can play with a bot. This week, I have been doing some improvements in the UI based on observations in playtests. New screenshot: http://static.content.distilled.games/drts/devlog/2017-12-28.DRTS.select-split-ratio.gif The game can be played at https://distilledgames.itch.io/distilled-rts
Is there a way to create an HTML element with an onClick attribute and then remove it, i.e., removeEventListener?
I would solve this by keeping a flag in your model ie clickEnabled : Bool Then you can do button [shouldIClick model] [text "click once"] shouldIClick model = if model.clickEnabled == True then onClick MyClickHandler else class "I actually don't know how to send an empty Html.Attribute" Your click handler would set the flag to false in the model along with whatever else it does. If anyone has a better idea as to what to put in the Else branch let me know! 
What were you asking then? How would you evaluate the use of an optics library to Elm when you would consider only examples in Elm in the first place? It's a shame that a language/framework with significant innovation and merit, and a lot of momentum will (in my opinion) stagnate and perhaps fade away out of self-infatuation. TEA is a very nice way to structure an app - I'm grateful to Evan for his contribution which allowed me to stomach frontend work - but it's not unique to Elm. I'd much rather go for purescript-pux or bucklescript-tea as a beginner and purescript-halogen or reason-react otherwise. If I had stuck with Elm, I'd be sorely regretting that.
The best place to ask for feedback is right here :)
That is more or less what I have already tried. The code looks something like this: box : Int -&gt; Html Msg box n = div [ if not model.clicked then class "box" else class "box something_else" , if not model.clicked then onClick (Handler n) else class "" ] [ some other attributes] This is accepted by the compiler but at runtime, the event handler remains active. I can suppress what it does because I can test model.clicked and avoid taking action, but you can still see the handler active in the browser inspector and you can observe the clicks in the Elm debugger.
&gt; What were you asking then? How would you evaluate the use of an optics library to Elm when you would consider only examples in Elm in the first place? This is `/r/elm` - I kind of assume we're talking about Elm by default here...😅 I clarified what I meant because I mistakenly thought that in [this comment](https://www.reddit.com/r/elm/comments/7mitoy/introducing_elm_lens/drur1u5/) you were talking about Elm code of yours.
I had no idea that extensible data records existed. Thank you!
Glad it was helpful! 😄
I believe it's either a bug in Elm runtime and/or browser, or model.clicked isn't set when you expect it to. I'd start with `if not (Debug.log "clicked" model.clicked)…`
&gt; whenever reaching into nested data structures sounds appealing enough that lenses sound appealing, that's a symptom of a deeper problem which would be better solved by refactoring than lenses Are you familiar with [semantic editor combinators](http://conal.net/blog/posts/semantic-editor-combinators)? I prefer to introduce them first whenever someone asks about lenses, because they are so much more common and built into the standard library of every functional language. They are built out of simple building blocks which are already provided, so it's sort of impossible to call them a code smell, without saying those building blocks or composition itself is bad.
&gt; Are you familiar with [semantic editor combinators](http://conal.net/blog/posts/semantic-editor-combinators)? I am not, and after reading the link, I can't think of a time I'd want to use one on real code. Do people use them often in PureScript? &gt; They are built out of simple building blocks which are already provided, so it's sort of impossible to call them a code smell, without saying those building blocks or composition itself is bad. Hm, I can't say I agree with this. I don't think saying "x is a mistake" is ever necessarily a condemnation of the individual ingredients that went into x! It might help to clarify that when I say lenses are a code smell, here's an analogy for the kind of code smell I mean: Imagine a JavaScript library whose sole purpose is to check every field in an object to see if it contains the string `"NULL"`. If it finds any, it reports where they appeared so you can ask the end user to input some other string that won't cause problems for your back-end. I claim that if this library is appealing, there's a problem somewhere else in your code, and rather than embracing this library as a good solution, you really ought to fix the underlying problem. I'd definitely consider it a smell if I saw code using this library, even though it was built using nothing more than basic language primitives. I have the same view of lens libraries in Elm: if they sound appealing, it's because there's an underlying problem somewhere in the code...and it's better to [fix the problem](https://youtu.be/DoA4Txr4GUs?t=17m37s) than to paper over it. 😄
There is a minimal subexpression which is bad in your example though - the string literal `"NULL"`! SECs are literally just made up of functions like `map`, `first`, `second`, and composition. If those functions are good, and composition is good, then any composition (i.e. any SEC) must be good. And yes, I use them all the time in Haskell and PureScript.
Thanks to some help on Slack, I figured it out. Part of the problem was that the `box` function was not taking in Model as an argument, so the `model.clicked` was accessing the global `model`. The other part is that in order not to have a dummy class in the last else, I had to move the if/then/else to a let/in construct and in the let part set up a List (Attribute Msg).
No that post was about how lenses were useful. I should hope that people are allowed to use other languages. Any concept available in any other language should be a candidate for inclusion in Elm. I'm sorry I wandered back here and got excited about lenses in Elm before the disappointment from your absolutist stance. I dislike walled gardens, so I'll stay away.
If I create a dictionary using Dict.fromList with the keys and values in a particular order, and then I pull the keys using Dict.keys, how can I preserve the order of the keys so it matches the order I wrote the original list in? I want to use the key list as part of a dropdown, but Elm wants to sort them by string order. Github at https://github.com/Mattibun/elm-rpg/
The point of the `"NULL"` example is not that the string literal `"NULL"` is bad, but rather that somewhere in the back-end, some code is incorrectly treating the string `"NULL"` as equivalent to a null pointer. That's a bug that ought to be fixed! Fixing the bug would be a better solution than reaching for a library that commits to addressing the symptom of the bug rather than the root cause. &gt; If those functions are good, and composition is good, then any composition (i.e. any SEC) must be good. We may have to agree to disagree on this. 😅 Wouldn't it follow from this that any program that compiles must be good, since they're all made up of these compositions? At that point, isn't everything "good," and the word has lost all meaning?
&gt; I should hope that people are allowed to use other languages. Of course, but I think it's reasonable to assume people on a language-specific subreddit are discussing that language. 😉 It was an honest mistake. &gt; I'm sorry I wandered back here and got excited about lenses in Elm before the disappointment from your absolutist stance. I'm unclear on what part of my saying "here are some links explaining what's wrong with this data structure" makes me an absolutist, but okay. 😛
Let's take an example in Haskell. &gt; import Control.Arrow &gt; &gt; map . first . map . left To say why this is bad, I think you have to say which subcomponent is bad. Maybe that's composition, or maybe it's the way in which composition is used here. Or maybe we just have to admit that there is no good compositional notion of code cleanliness and that's fine, but I think it's probably wrong, since we learn concepts by combining other ones together - if I understand the parts here, I can surely understand the whole, even if it takes a short while. 
I'm gonna be totally honest - my Haskell knowledge is insufficient to know why that example is bad, sorry! 😅
Ok, then in Elm: myMap = List.map &lt;&lt; Tuple.mapSecond &lt;&lt; List.map &lt;&lt; Result.map
Ah, thanks! &gt; To say why this is bad, I think you have to say which subcomponent is bad. Maybe that's composition, or maybe it's the way in which composition is used here. Yeah I'd say it's how composition is used here. 👍 &gt; Or maybe we just have to admit that there is no good compositional notion of code cleanliness and that's fine, but I think it's probably wrong, since we learn concepts by combining other ones together Applying concepts we've learned is nontrivial for humans though. I know how to multiply, and I can do 5 * 17 in my head pretty quickly even though I've never been asked to in my life. However, I cannot do 4,583,953,494,355,345,034 * 3,450,234,522,345,905,234,902,435,243,524,524,397 in my head. &gt; if I understand the parts here, I can surely understand the whole, even if it takes a short while. That's true, but all else being equal, if there's a way to write the code where "it takes a short while" for my teammates to understand it, versus a different way where they can understand it pretty much instantly, I'm comfortable saying the former way to write it was a mistake - regardless of what techniques were used to produce either code!
Dict won’t keep the keys in order. Maybe you can try a list of tuples like List (String, String)
No, `f addOne 3` is only `(f addOne) 3`. The latter should give a type error.
I did not get error when I use f (addOne 3). f x = x addOne x = x + 1 (f addOne) 3 -- return 4 f (addOne 3) -- also return 4, no error 
Is the source code published anywhere? Seems like it would make for a good example to learn from.
https://github.com/vishaltelangre/elm-xkcd-browser There you go
Awesome!
Got it to work this way. Thanks!
&gt; My biggest painpoint was starting with an attempt to "box" SPA each "component" into it's own update/Model/Msg (beginner mistake, I know). I wouldn't say this is a mistake. Take a look on how the [demo site for elm-mdl](https://github.com/debois/elm-mdl/blob/v8/demo/Demo.elm) is implemented - I do pr-component "model/view/update" all the time. 
There is no curated list of "key" packages as far as I know. I have tried to extract this information by doing an analysis of dependencies (packages that are imported by other packages) but (from what I remembered) there was no clear answer. You have the `elm-lang` packages and some of the "extra" `elm-community` packages being used more often. If you have a specific issue you are trying to solve, maybe some packages could be recommended over others. There is also the option of [looking at the packages by their number of stars on github](https://github.com/search?utf8=%E2%9C%93&amp;q=language%3Aelm&amp;type=) but this does not really present "key" packages as some of the top stared ones are more into experimental code category. In other words, they are interesting as an idea but not really "key". 
Perhaps this seems a bit odd but I like the fact that there aren't crazy popular packages v.s. non-popular packages in Elm. Elm has a baseline of no runtime exceptions and enforced semantic versioning meaning that if a package is in the repository it's most likely does what it does quite well! I find myself presented with a problem, look for a package, make sure it's not a fork of someone else's then just give it a try. I think perhaps another reason this isn't the case is the fact that Elm actually has a decent standard library which means there's less need to have a ton of other libraries to fill in the missing holes of functionality like there is in JS (and OCaml for that matter). All that said I think these are some of my favorites: * RemoteData: http://package.elm-lang.org/packages/krisajenkins/remotedata/latest * List.NonEmpty http://package.elm-lang.org/packages/mgold/elm-nonempty-list/latest * SelectList http://package.elm-lang.org/packages/rtfeldman/selectlist/latest * StyleElements http://package.elm-lang.org/packages/mdgriffith/style-elements/latest * ElmPlot http://package.elm-lang.org/packages/terezka/elm-plot/latest * ElmVisualization http://package.elm-lang.org/packages/gampleman/elm-visualization/latest * ElmCdn http://package.elm-lang.org/packages/gampleman/elm-visualization/latest * many others that I can't think of at the time...
Thank you for your response @jediknight ! I think, they are just forget that developers can write tips/articles sometimes.. 
Its not about being professional or writing about the right stuff. I'm just saying the downvoted are probably due to the tons of spelling errors (really no good reason to have more than 1 or 2 tops) and the lack of content. If the article had gone on to talk more about lessons learned or elm in relationship to other stuff they worked on then I would probably be less critical. Its just that the constructive criticism here is "proofread more" and "if you're article can be summarized entirely in one sentence you need more detail"
&gt; Not trying to be unconstructive or anything just saying that additional proofreading was in order at the very least and maybe some more depth into the points being made. Fair enough. I usually don't downvote on those unless I end up seeing a pattern of articles but I do understand how others might approach this differently.
https://github.com/isRuslan/awesome-elm
You have ElmVisualization twice (ElmCdn is missing a link).
Ah good catch, I'll fix it.
Although it's definitely not an anti-pattern, for many things it tends to be overkill. This is another good example: https://github.com/rtfeldman/elm-spa-example
I agree that the article could be extensive. Guessing from the name of the author english is not her first language, as it isn’t for many members of this community. The errors are in grammar and therefore not easily found by your standard browser. I will PM the author a version with suggestions. I think contributions should never be punished as long as it’s not intentionally wrong or misleading. If you don’t like it, just don’t vote it up. Let’s keep it friendly!
Are you unable to read the language you speak every day ? And I don't need more details, it is not for the teaching someone step by step how to create another "hello world", it is about pitfalls you probably not aware of.
Ditto for me with Maybe Token at all the places. But I’m going to switch to two SPAs. 
I would do it with a small helper [like this](https://ellie-app.com/b3MvyFFTGa1/0). Also, as a warning, tuples larger than 3 will not be allowed in `0.19`. 
Thanks. I might also try using the `case` directly (with a list deconstruct) instead of a `let in`.
I crossposted to Stack Overflow and got this nice answer: let ( seed1, seed2, seed3 ) = step (R.map (,,) independentSeed |&gt; R.andMap independentSeed |&gt; R.andMap independentSeed ) seed |&gt; Tuple.first in ,,,use the 3 seeds
Yeah, the old XYproblem. :) Just for fun, [I have updated the ellie code to make it one big nice pipe](https://ellie-app.com/b3MvyFFTGa1/2). 
Cute. That should be nice to maintain for the people who don't know Elm :-). BTW, based on your comment about tuples &gt; 3 going away, I modified my code to this: type Seeds = Seeds Seed Seed Seed initialModel : Seed -&gt; Model initialModel seed = case step (R.map Seeds independentSeed |&gt; R.andMap independentSeed |&gt; R.andMap independentSeed ) seed |&gt; Tuple.first of Seeds seed1 seed2 seed3 -&gt; ...use the 3 seeds I'm getting the starting seed from JS using the `Html.programWithFlags` and having JS just generate a random number (`Math.floor(Math.random() * 0xFFFFFFFF)`) that starts the whole process and pass it in as an initial seed.
Does it work to just add the “selected “ attribute to the specified option? https://www.w3schools.com/tags/att_option_selected.asp
No, I had selected in the options but it did not work even I rebuild the options and reset the selected attribute.
If you extract your update `ChangeKey` handler to a function, you could just call that directly when you change the selected option from code. If you really want to send the `ChangeKey` message, you should be able to do something like: ``` Task.perform ChangeKey Task.succeed ... ``` to create a command that will send this message. See http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Task
I am not completely sure I understand your problem, but I think it is better to not trigger on change and do something like this: https://ellie-app.com/m2dzjCwt9a1/0 If I understood your problem correctly, you are triggering a model update from HTML but you don’t reflect changes in the model back in the HTML. You can solve this with the “selected” attribute. A link to code could surely help if you are able to do that.
Could anyone help me understand how to read type signatures, as I feel I am lacking a key concept. Consider the example of [Http.send](http://package.elm-lang.org/packages/elm-lang/http/1.0.0/Http#send) type Msg = Click | NewBook (Result Http.Error String) getWarAndPeace : Cmd Msg getWarAndPeace = Http.send NewBook &lt;| Http.getString "https://example.com/books/war-and-peace.md" I am confused as to how `msg` is type `NewBook` and how elm ends up using this type to send back to the update function. send : (Result Error a -&gt; msg) -&gt; Request a -&gt; Cmd msg When `NewBook` is the first param to `Http.send`, it resolves to the following? send : (Result Http.Error String -&gt; msg) -&gt; Request String -&gt; Cmd msg So does this mean that when elm gets back a response it calls the function `(Result Http.Error String -&gt; msg)` with the `Result` which creates a `NewBook`? Is this pattern something to do with type constructors and if so could someone break it down for me. 
It is not correct to show the problem in your example. I have changed a little bit to demonstrate the problem (https://ellie-app.com/rGxRpjZgxa1/1). I added a string displayMsg in model. In this code only the "SelectOption" event msg updates displayMsg and shows the message in the text field. The button click fires "SelectTwo" event msg and updates the select's selected option. The select box showed correct selection but it does not further fire "SelectOption" event so the text file does not update. That is: User change select --&gt; option selected attribute changed --&gt; fire "SelectOption" event --&gt; update the displayMsg text field. Click button --&gt; fire "SelectTwo " event --&gt; update the option selected attribute -x-&gt; does not fire "SelectOption" event and the text field does not update. 
Elm's views are not generating events by themselves. You can think of them as being recreated on every model change. If all you want is the same effect as the change event you can recursively call the update with the said effect: [like this](https://ellie-app.com/t4hV3VGpha1/0) 
Great! I like the task approach. Thank you.
Thank you. It is clever. I did not know you can call update recursively from update.
Thank you for your help. 
I'm just wondering if there is a way to get data from an input without having to use the `onInput` event. It seems a bit excessive to me to send a message to the model for every typed character, only to somehow process that upon hitting a button (or even return). Is there no way of just filling out an entire form, and then send all that data as a single message to the model upon hitting a button?
I would advice against the task approach. `Task.perform identity (Task.succeed SomeMsg)` is an anti-pattern and almost never the right choice. I'd go with option 1 from /u/taebles.
The font in the screenshot of the posts is really cool!! May I know the name of it?
It's Iosevka: https://github.com/be5invis/Iosevka
That's because the type of `f` is so general it will work with both. If you try: &gt; f g x = g x &gt; addOne x = x + 1 &gt; (f addOne) 3 &gt; f (addOne 3) You should get a type error. 
Hi yourbank! Yep this is indeed to do with type constructors! In this code, `NewBook` is one of the two type constructors that allow you to construct values of type `Msg`. (The other is `Click`) I think the key thing to note here is that `NewBook` is also a function. If you take a `Result Http.Error String` and apply `NewBook` to it, you get a value of type `Msg`. So it has type signature `Result Http.Error String -&gt; Msg`. Just to reiterate, `NewBook` constructs values of type `Msg`. There is no such thing as a value of type `NewBook`! In Elm you can pass functions as parameters to other functions, and in this case you're passing the function `NewBook` as the first parameter to `Http.send`. The type signature of `Http.send` is saying "Give me a function that will turn a `Result` into a message, and also give me a `Request`. I'll combine those to create a command for the Elm runtime." The idea is that when the HTTP response comes back, the Elm runtime will use your function to construct a message, and pass it to your `update` function. The first argument to `Http.send` could in theory be any function, as long as it has the right type signature. But in most cases it's easiest just to use a type constructor directly. The code below does the same thing. myFunction : Result Http.Error String -&gt; Msg myFunction result = NewBook result Http.send myTypeConstructor &lt;| Http.getString "https://example.com/books/war-and-peace.md" Does that help?
It's probably confusing to call these *type constructors*. Let's talk about the same example: type Msg = Click | NewBook (Result Http.Error String) If this was Haskell I would be sure `Msg` is called a *type constructor* (it's more understandable if you look at a type constructor with arguments like `Html` or `Result`: they're used to construct types like `Html Msg` or `Result Http.Error String`), and `Click` and `NewBook` are *data constructors*. Now, I'm not really sure if we should use the exact same terminology for Elm (intro at elm-lang.org calls `Click` and `NewBook` just *constructors*), but it seems definitely bad to use one of these already confusing terms in place of the other one.
thanks so much, yes that helps a lot. I am just writing this down to recap for myself. type Msg = Click | NewBook (Result Http.Error String) When you say `NewBook`, its like a partially applied function. When elm gets back response from api, it will call `Result Http.Error String` which now means the union type `NewBook (Result Http.Error String)` is fully applied which creates a concrete type `Msg`. Know one really knows what this `Msg` actually is (can be any of the union types) hence the update function applies pattern matching to deal with it. 
&gt; concern troll behavior because I think you have good intentions, but I want to be accessible to new folks and your behavior in particular makes me question if I should say anything at all. &gt; I hope I have been clear here. Pretty harsh way to address one of the most available and helpful dudes in the community. I totally get the philosophy of working slowly and steadily rather than slapping something buggy together, but 0 releases in one year is worrying, especially since 0.18 has some big bugs/problems. Just to be clear, I love the language, but everything that /u/jediknight said in his post is 100% valid. 
I have several of those multiline strings in my tests and they work. Here's a live example of your specific line https://ellie-app.com/9rsYG4mxva1/0 I think the problem is not there.
Thanks for putting that together. I’m going to double check my install then to see if I can put together some code that shows my problem better. In my app, I can literally remove the closing bracket (“}”) and suddenly the app and its views all load, but if I put it back nothing loads and I get weird console messages. 
Is it possible for you to copy/paste or screenshot those console messages? It would help more in understanding what's wrong with it. Sounds strange.
I’m beginning to suspect the problem is a decode failing but for some reason breaking the entire app instead of passing on an error message but, again, it’s new to me so I’ll monkey around a while longer to see if I can distill it down. 
&gt; a decode failing but for some reason breaking the entire app I don't want to sound silly, but it happened to me sometimes and... I was just throwing `Debug.crash` on `Error`case: a "temporary" patch which I never addressed and made its way in testing stage :D
You can store the selected city id in two places: - Your model - In the url, as a route The first option is simpler to implement, but the second one is usually a requirement for many web apps. The first approach: Change your model to store the select city as a `Maybe` (because when no city is selected, you can set is as Nothing) In your view function, check if the selected city is set to something: view model = div[ id "app" ][ navbar model, sidebar model, content model ] content model = case model.selectedCity of Nothing -&gt; citiesList model Just cityId -&gt; cityProfile model cityId cityProfile model cityId = model.cities |&gt;List.filter ( (==) cityId) --only cities with same id will be kept |&gt;List.map cityProfile -- a profile will be created for the selected city. If no city is found in the filtering, nothing will happen. |&gt;div[] In your button to select the city, you can adjust the event to fire a maybe value: , onClick (GetReport (Just report.id)) —- report/report.id ? I prefer to fire just the ids for two reasons to avoid duplication of truth - if you update the city info, you need to change it in two places. It is annoying to filter it later, but it is less annoying than updating info in two places. The second approach, which involves routes, has a longer implementation. You can read about it in the Routing section of this tutorial: https://www.elm-tutorial.org/en/ 
Since you have it, you can send the entire report: 1. Add the report to display in your model: {... displayedReport: Maybe Report ...} 2. Send the clicked report it via a message: onClick (GetReport report) message will be be: `GetReport Report` 3. And then just have a function to display it: viewReport : Maybe Report -&gt; Html Msg viewReport report = case report of Just report -&gt; div [] [your_code_for_display] Nothing -&gt; ""
Since you have it, you can send the entire report: 1. Add the report to display in your model: {... displayedReport: Maybe Report ...} 2. Send the clicked report it via a message: onClick (GetReport report) message will be be: `GetReport Report` 3. And then just have a function to display it: viewReport : Maybe Report -&gt; Html Msg viewReport report = case report of Just report -&gt; div [] [your_code_for_display] Nothing -&gt; ""
Thanks for answering..still no success. Needs more understanding..Here what I have now: type alias Model = { reports : List Report , alertMessage : Maybe String , viewReport: Maybe Report } type alias Report = { id : Int , city : String , country : String } initialModel : Model initialModel = { reports = [] , alertMessage = Nothing , viewReport = Nothing } ------------------ type Msg = NewReports (Result Http.Error (List Report)) | GetReport Maybe Report | CloseAlert update : Msg -&gt; Model -&gt; ( Model, Cmd Msg ) update msg model = case msg of NewReports (Ok weatherReports) -&gt; ( { model | reports = weatherReports }, Cmd.none ) NewReports (Err error) -&gt; ( { model | alertMessage = Just (httpErrorToMessage error) }, Cmd.none ) CloseAlert -&gt; ( { model | alertMessage = Nothing }, Cmd.none ) GetReport report -&gt; viewReport report --------------- viewReport : Maybe Report -&gt; Html Msg viewReport report = case report of Just report -&gt; div [] [] Nothing -&gt; "" ----------------- viewReportRow : Report -&gt; Html Msg viewReportRow report = tr [] [ td [] [ text (toString report.id) ] , td [] [ text report.city ] , td [] [ text report.country ] , td [] [ button [ class "button button-primary small", onClick (GetReport report) ] [ text "Show" ] ] ]
Can you publish your code at https://ellie-app.com ? It works like Codepen for Js, making it much easier to demonstrate code
How is that going? Im a big fan of GitHub pages.
Yes, I was actually already trying that but stupidly put the wrong ellie link in the last comment. Here's the current version which isn't working despite using the lazy function described in your link. https://ellie-app.com/msTdxYWDya1/0 Thanks for any light anyone can shine on this.
&gt; GetReport Maybe Report should be `GetReport (Maybe Report)`
It looks like it is this issue: https://github.com/elm-lang/elm-compiler/issues/1591 You can fix it by adding one more `lazy` call in, check out https://ellie-app.com/37fgnWsdba1/0
Since you're having an input in the same place in both places, Elm thinks you're just updating the input which is already there. Since you haven't set a `value` explicitly, Elm just leaves the value as is. You can either use `Html.Keyed`or set a `value`. `Html.Keyed` makes you assign an id to the inputs, allowing Elm to see these as two separate things. Just placing a value is probably better though, as it allows for reuse.
It finds an input and no instructions on how to change the `value`, so it keeps what was there. You probably wanted the value to reset to an empty string? **I usually set the `value` attribute for my inputs to the string remembered in the `Model`.** I believe that's the common practice. Here I made a few changes to your code ([Ellie link](https://ellie-app.com/dhVth2y6va1/0)): - reset the `inProgress` field in the `Submitted` part of `update` - added `value` attribute to your inputs The code: update msg model = case msg of ... Submitted -&gt; { model | submittedString = Maybe.Just model.inProgress , inProgress = "" } view model = let inputs = case model.submittedString of Maybe.Just _ -&gt; [ input [ placeholder "Something Else" , value model.inProgress ] [] ] Maybe.Nothing -&gt; [ input [ placeholder "Enter a value" , onInput InProgressChanged , value model.inProgress ] [] , button [ onClick Submitted ] [ text "Submit" ] ] ...
Hi @gedehs 👋🏻 The main problem with your decoder is that `postsDecoder` is expecting an array, yet the response you have is an object with the key `posts` that contains the array you are looking for, so you need a decoder that applies `postsDecoder` to the `posts` key. `Json.Decode` from the core library provides the `field` function that can be used in this situation. If you change `fetchPosts` into the following: fetchPosts : Cmd Msg fetchPosts = Decode.field "posts" postsDecoder |&gt; Http.get fetchPostsUrl |&gt; RemoteData.sendRequest |&gt; Cmd.map Msgs.OnFetchPosts then the decoder will look for an object with key `posts` and apply `postsDecoder` to the value of that key, which is an array.
Yes, I'm seeing why this happened now. It seemed odd to me that the two functions would return a more unique object that the whatever the diffing pattern the VDOM uses could tell the difference. Under what circumstances would the renderer actually create a new element rather than re-purposing the old one? Only if the tag changes?
Apart from the immediate problem of `postsDecoder`, I noticed an additional problem and a possible improvement. &amp;nbsp; Inside of `postDecoder`, you have the following: `required "content" (Decode.list contentDecoder)`, yet in your response the value for the key `content` is an object not an array, so as is, it will give you another `BadPayload` error. I can see two possible solutions to this: 1. If you want your model to resemble your response, then you should expect an object instead of an array. To implement this, two changes are needed. First, you change the type of the key `content` in your `Post` type alias from `List Content` into `Content`, then you change your `postDecoder` to require not a `Decode.list contentDecoder` but just a `contentDecoder`. 2. If you still want a `List Content`, then you should change your `postDecoder` to expect an object but change the result of `contentDecoder` into a list of a single item. We can use `Json.Decode.map` and `List.singleton` in this situation. With `List.singleton`, you can provide it any value and it will return a `List` with only that value. With `Json.Decode.map`, you can provide a function and a decoder and it will return the result of applying that function to the result of the decoder. If we combine them both then we can change `postDecoder` last line into the following: `required "content" (Decode.map List.singleton contentDecoder)`. Now, the decoder will look into the `post` object and require a key `content`that has an object that can be decoded with `contentDecoder`. Once the object in the key `content` has been successfully decoded into `Content`, then it will apply `List.singleton` to turn it into a `List Content`. The main difference between `Decode.list contentDecoder` and `Decode.map List.singleton contentDecoder` is what is expected in the response. With the former, an array is expected and it will transform that array into a `List`. With the latter, an object is expected and it will transform that object into a `Content` and then transform that `Content` into a `List Content`. &amp;nbsp; The improvement that I see that you can apply is to replace `required "publishedDate" Decode.string` with `required "publishedDate" Decode.date`. You can find `Decode.date` in the [`Json.Decode.Extra` library](http://package.elm-lang.org/packages/elm-community/json-extra/2.6.0/Json-Decode-Extra#date). This is useful if you want to use that information as a `Date` instead of a `String`. Once it is a `Date` you have all the functions from the [`Date`](http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Date) and [`Date.Extra`](http://package.elm-lang.org/packages/rluiten/elm-date-extra/latest) libraries.
Create a div in the js console (`document.createElement('div');`) and count how many properties it has. Last time I checked it had 138! And I'm not invent counting properties which are objets that have their own properties. Html elements are *heavy*. So as much as possible it's best to reuse. &gt; Under what circumstances would the renderer actually create a new element rather than re-purposing the old one? Only if the tag changes? When it feels like it. When it creates a new element or not is an implementation detail. Your job is to provide enough attribute to enable Elm to make the difference since it's not going to query the DOM. If you do, it doesn't matter if it's an old element or a new one.
Oooh. I think that might be it! Thanks so much for taking a look and thank you to everyone who replied. Hopefully I won't run into too many more obstacles. I do wish this concept was a little more clearly laid out in the recursion docs.
No problem, glad I could help! 
Thank you for an amazing read. It was my first exposure to formal grammar and fuzzy testing, and I've read the piece in one breath. These moment of enlightenment are very special for me.
Say your model is like this: type alias Model = { reports : List Report , reportToDisplay : Maybe Report } In button[ onClick (GetReport report) ][ text "Show" ] your message is of type: GetReport (Maybe Report) Then you can treat it in your `update` and put the received Record in your model: update msg model = case msg of ... GetReport report -&gt; ( { model | reportToDisplay = report }, Cmd.none ) Assuming you have a `view` function like this: view : Model -&gt; Hml Msg view model = ... viewReportRow model.reports you just need to add a call to the `viewReport` function that will display your slecetd report report, and your ` view` function : view : Model -&gt; Hml Msg view model = ... viewReportRow model.reports ... viewReport model.reportToDisplay As I see, you're already got it , only the message type and the missing parenthesis in `onClick (GetReport report)` can cause problems.
Right, I guess it bothers me that you have to know the implementation of the virtual DOM rather than being a black box. It's not unreasonable to think that two separate function calls would yield distinctly behaving DOM elements no? Of course, I'm new to elm, so take that as you will :)
Practicing for interviews and sharpening my fundamentals with different frameworks in my [clones](https://github.com/bnns/clones) repo. The latest is a simple [Trello clone](http://elm-trello.s3-website-us-east-1.amazonaws.com/) (with local storage syncing via ports, drag and drop, etc.) - [source](https://github.com/bnns/clones/tree/master/elm_trello). After implementing basically the same thing in React and Elm, the latter feels more natural when you get the types right (e.g. EditingState). Elm can be way more verbose (currently +300 lines compared to the React implementation) but that's partly due to type declarations, and because drag and drop is custom vs. using [react-beautiful-dnd](https://github.com/atlassian/react-beautiful-dnd). Any feedback is welcome. :)
I am not sure, it would be awesome if you post a beautified-json next time. Your json seems to be {"posts": []} but your postDecoder is expecting only the [] part. Try this snippet instead: postsDecoder : Decode.Decoder (List Post) postsDecoder = Decode.field "posts" (Decode.list postDecoder) 
That's pretty neat :)
It could be good to put your demo on https, otherwise following warning in console "Error during service worker registration: DOMException: Only secure origins are allowed"
Thanks, I thought that this was something simple. The combination of both your suggestion and your other suggestions helped me work through this.
No problem. If you need anymore help, you can find me and others that are willing to help in the Elm Slack beginners, general and help channels. 
&gt; If this was Haskell I would be sure Msg is called a type constructor Nice thinking, although you got it slightly wrong, allow me add to your comment. A **Type** is like a **set of concrete values**. `Msg` simply is a **type** - in Haskell as well as in Elm. The set of values of type `Msg` are defined at the right hand side of the type definition: `Click` and `NewBook (Result Http.Error String)` `Result` on the other hand is defined like this: type Result errorValueType successValueType = ... And `Result` is not a type because it needs to be given two types as parameters first before resulting in a Type, as in: Result Http.Error String As opposed to `Msg`, `Result` (without the parameters filled in with concrete types) **is not** a set of *concrete values*. A **thought experiment** for a different perspective: If you took away the `type` keyword in the definition of `Result`, it would look like a regular Elm(or Haskell) function defintion: Result errorValueType successValueType = ... And we see that `Result` **looks** like a function that has to be applied to two parameters. Let's take this thought experiment a step further: Let's write a **ficticious** *type signature* for `Result`: Result : Type -&gt; Type -&gt; Type Result errorValueType successValueType = ... In Haskell the type of a type is called a **kind**. And the *kind* of `Result` is `Type -&gt; Type -&gt; Type`. It's similar to a function, but it needs types as parameters and returns a type, and it's called a **type constructor**, while an actual function takes *values* as parameters and returns a *value*. Now if we wrote such a *kind* for `Msg`, what would that be? Msg : Type Msg = ... since no parameters are required, it's like a constant, which has *kind* **type**, and hence it's just called a *type* instead of *type constructor*. (BTW the above ficticious syntax is actually supported by Idris, where we can use function syntax for type aliases: type alias Foo = Bar (Elm) can be written likes this in Idris: without `type alias` and with a *type* signature: Foo : Type (Idris) Foo = Bar 
Hi everyone! This is my first real application in Elm. I built it because IMDb recently removed the page which showed all episodes of a TV series in a single table and because http://graphtv.kevinformatics.com/ stopped working. The feedback [on /r/television](https://www.reddit.com/r/television/comments/7p8wax/hi_rtelevision_imdb_recently_removed_their/) yesterday was really encouraging. All the code is available here: https://github.com/obtuseio/tv. The Elm code lives in the `front` directory. My favorite part in building this application was this: type Column = Number | Rating | Votes type Order = Asc | Desc type alias Model = { ... , sort : { by : Column , order : Order } } In an earlier prototype written in Vue.js I had to use strings for both of these which meant typos could result in runtime errors. Elm made sure I never assigned an invalid value to either and that I pattern matched every possible case in the sorting logic. I'm open to any feedback/criticism on the UI/UX and/or code!
I put 2 replies in your gist. Be sure to check the two of them: first one fix the code, second one avoids the use of Maybe where it's not needed. Enjoy Elm ;)
Thanks so much...for this explicit explanations.. 
What would be the best way to model in Elm the following mock JSON api: [ { grpname: 'grp1', members: [ 'mem1', {tag: "tagA", name: "mem4"}, 'mem7', 'mem2' ] }, { grpname: 'grp2', members: [ {tag: "tagB", name: "mem5"}, 'mem3', 'mem1', 'mem8' ] } ] In words, there are multiple named groups, each consisting of about 4-10 members and usually one of the members is special within the group and is represented by an object with a tag and name, while the other (unimportant) members are simply strings (names). Using an Elm record to represent each member appears verbose and tedious because most tags would be empty. An Elm union type doesn't seem to work either (at least the variations that I tried, like `type Member = TagA String | TagB String | TagC String | String`). In Slack someone suggested having a mapping function for each of the "special" member tags, but that presumes we have that knowledge beforehand or that we can build it as we decode or construct the Elm model. The other alternative which came to mind (but I haven't yet tried) is to define the groups something like this: type alias Group = { name : String , members : List String -- instead of List Member , special : String -- or perhaps List String } 
Thanks for the heads up. I changed the link. Getting SSL working on a static s3 bucket was a bit confusing...
Yeah. The things that come after `type Member =` aren't themselves types, e.g. the type String. They are called 'tags'. They exist to distinguish the possible values that Member can take. In elm they also define functions that construct those values. So `TypeA String` in that type definition means `TypeA` has the type `String -&gt; Member`. Give it a string and you get back a Member, specifically a Member tagged TypeA. So in your example String is trying to play a similar role - not as a type but as a tag.
When a data model contains a parent children relationship (i.e. an article has many comments) is there a trade off between pulling the parent and children data in a single request, versus doing it in two separate requests? In the latter case it seems that doing it in separate requests makes it a lot easier to work with the children records since they are not nested in the parent. [Based on this article](https://medium.com/elm-shorts/updating-nested-records-in-elm-15d162e80480) I'm getting the idea that updating nested records is awkward enough that the cost of doing two requests to the backend is worth it for the benefit of having the children records directly in the model rather than nested in the parent. [My question comes from studying what Richard Feldman did here](https://github.com/rtfeldman/elm-spa-example/blob/master/src/Page/Article.elm#L51-#L57). Am I correct that this was intentionally done this way? That there is a tradeoff between less requests and a data model that's easier to work with?
Thanks. That explanation (I've heard or read something like that before) is clearer (or is starting to sink in better due to the specific example).
Is there a way to automatically serialize/deserialize elm model without writing encoder/decoder for each custom type?
If you don't yet know javascript aka VanillaJs, or something that works in basically the same way, like JQuery, I absolutely would not recommend Elm or React etc. Most of these frameworks are complete overkill for many purposes. Learning Elm before Vanilla JS is like learning an ORM before SQL - in a few years you will be ranting about how bad the technology is and how it makes easy things hard etc. You need to appreciate the problems these frameworks are solving, or you will use them when you really don't need to. I have many projects where mainly server side functionality, with a smattering of client side JQuery e.g. to enhance a form, is absolutely the right thing. And a few where Elm/React style architecture is really necessary. 
Good on you for asking further instead of just going along with your friend’s advice. I am quite against their view on learning Elm as your first JavaScript framework. Mostly for two reasons: 1. For React and Vue, there are external libraries such as Redux and Vuex for handling state. These state handling libraries are somewhat based on the Elm architecture. But React and Vue themselves do not by themselves use or need these libraries so your friend’s comparison isn’t really accurate. There are plenty of scenarios where you can do without the star handling libraries. In fact I’m kind of against learning Redux or Vuex before thoroughly understanding React or Vue. 2. If Elm is your only frontend framework, there is a good chance you will need to be doing some [JavaScript interop](https://guide.elm-lang.org/interop/javascript.html). This is a quite advanced topic and I don’t believe it is suitable for programmers without a solid foundation in JavaScript. Having said that, using Elm was by far the best experience I have had when working with the frontend. I just wouldn’t recommend it to anyone who has almost no experience in JavaScript. To add to this, I personally think Vue is better suited as a first framework than React. The core of it feels smaller and easier to grok. But even before getting into one of these I would suggest having a solid foundation in JavaScript the language, or at least keep in mind to always have a good JavaScript reference nearby as you learn.
No no I know JS. Actually I have a project that I am working on and I want to make it dynamic. At the moment, every small change makes a request to the backend which then renders the page with the updated data. Instead of rerendering, now I want to display the data as soon as the change happens and make the backend api only. Now I understand I can do this with ajax and jquery, but seems like I would be reinventing the wheel in doing so.
Thank you. My 'friend' is just a random stranger on a forum. Which is why I wanted to ask the community first. Though if I say I have some experience with NodeJS and am updated to the latest ES7 updates, would you still recommend against Elm? 
I still feel reluctant about recommending Elm as the first JavaScript framework for anyone, but if you are already comfortable with node and ES7 I think there is a chance it could work. If you want to you can try to go through this [guide](https://guide.elm-lang.org). It is quite short (I think it took me an afternoon to complete). Just make sure to follow along writing the code and not just read it. If afterwards you feel like you solidly understand everything then I would say why not. Please report back with your decision if you do this, it would be interesting to see if Elm could be suitable for someone with your kind of background.
My experience. I am quite good at Python, HTML and I understand just enough CSS. I haven't done any serious javascript or NodeJS coding. I read about functional programming languages and 2 years ago I stumbled upon Elm. I never learned any other functional programming language but Elm. I fell in love with it immediately. I am struggling to describe the learning curve. The language itself is simple, the architecture is easy, clear and very concise. The biggest hurdle for me was to let go of all the object oriented ways of doing things. Once I got past that Elm was and is a very, very productive language made possible by great error messages, great refactoring experience, etc. etc. My recommendation: just try it, just start building stuff with it. Be patient and persevere. 
I would, with the warning that it will not help you learn JavaScript later. Elm has its own way of doing things, that being said the error messages alone make it something to recommend.
I think the recommendation there is against using lenses to update nested state, not against nesting state at all. The alternative is to write small functions that respect encapsulation. That may be what you mean by custom setters. I believe Richard Feldman's most recent talk at elm europe (?) gave some examples of this - Evan's "life of a file" talk is also relevant.
Here is also direct link to VSCode Marketplace https://marketplace.visualstudio.com/items?itemName=necinc.elmmet
Had to deal with server side for a day. To parse source repo and response with a list of files. Now I continue on client side, currently creating Decoder for a json array with different possible shapes in it. And also I found myself a bit boring writing a lot of "markup" in elm. So I started to look for some Emmet-like tools for Elm. Yes, there are a few, for expample for Atom or Vim. But since I'm using VSCode there was no such alternative, except html-to-elm. But that means, that I would have to write my markup twice. First time in some html file to use emmet to generate the markup instantly, and second time in my elm file, converting it into actual elm functions. So I thought it's too much for me :) and wrote out own extension for that targets. Check it out, here it is: https://marketplace.visualstudio.com/items?itemName=necinc.elmmet I would really appreciate hearing some feedback about it :) 
I install globally using [yarn](https://yarnpkg.com): yarn global add elm
looks cool. any plans for atom?
This is awesome! Glad to see VSCode gettings some more love
I've already found an extension for Atom to do this stuff. Here it is: https://github.com/ahultgren/emmet-elm
The Elm-discuss google group says "Hello! As of January 1, 2018 this forum is read-only. Please use the Elm Discourse for new threads: https://discourse.elm-lang.org/"
I read this as elm-delicious just now (it's Monday morning) and now that I've re-read, I'm disappointed.
greetings from Tuesday
Hi, You have a spelling mistake on your front page: &gt;Use templates or import from an **exiting** spreadsheet to get started quickly
&gt; spreadsheet thank will fix it :)
Totally open to people looking to contribute. The UI uses tachyons and is responsive. Originally built it for mobile use.
Please reach out if you're interested in working on it even as a side project. Lots of work went into building a solid high perf grid implementation in Elm
The article doesn't really contribute to this sub. IMHO
Is this or will it be open source? I love Airtable and would really like to have an open source alternative to it. 
The other way would be much more complicated since TypeScript has more complicated syntax. Also, I believe it would not be beneficial at all. Sometimes you'll want to remodel things anyway.
I have never seen POI before. Are you finding POI is easier to use than WebPack ? I like how the configuration seems a lot easier to deal with out of the box.
Very good. This should be in r/all
Thank you for this. I'm glad you found the post(/series) useful. You've made a really good point. It's quite possible that large files create a feeling of panic in certain groups of engineers. Just because I have not witnessed such individuals in my professional life doesn't mean they don't exist elsewhere. You're right that there is a strong message of not feeling afraid of long line count in _The Life of a File_, and the message makes a lot more sense in that context. As for the situation, you describe with your project, I would like to reframe it. Perhaps you have a first attempt at partitioning that needs further refinement. No one creates the right partitions the first time. When I got around to unit testing my very first Elm project, I realized what a mess I'd created. I'd put partitions in, sure, but they were partitions made without knowledge of Elm's idiom and nuances. I hope you are able to continue to refine and refactor your project and put more good partitions in place, and clean up the ones you discover aren't carrying their weight. Thinking about your project this way and ultimately doing the refactoring work to make it better, is, in my opinion, preferable to not doing so at all and just letting code grow in a single file. This is true even when you don't happen on the "right" solution the first, third, or even tenth time. We get better at this kind of skill by constantly engaging with it and practicing, and so I would like to encourage you to continue looking for ways that you can sharpen your partitions and make them really useful. It is a constant learning process for every practitioner.
This is related to one of the possible projects mentionned by Evan in this list: https://github.com/elm-lang/projects/blob/master/README.md#docs-previewer Maybe try to take a stab at it ;)
I'm working on extracting the grid and open sourcing this as components since I'm not entirely sure what I want to do with this project. 
It’s always exciting to see healthy debate! That said, I have to say I prefer [Evan’s treatment of the subject](https://youtube.com/watch?t=45m37s&amp;v=XpDsk374LDE). 😄 Although the article directly takes issue with Evan’s talk “The Life of a File,” in which [he advises building modules around types](https://youtube.com/watch?t=45m37s&amp;v=XpDsk374LDE), if you look at the refactored code the article ends up with, [nearly all the modules are built around types](https://medium.com/@matthew.buscemi/abstraction-in-elm-domain-based-modularization-91145dacbda5)! So in what way does the article actually disagree with Evan? [Part 5](https://medium.com/@matthew.buscemi/abstraction-in-elm-utility-based-modularization-a48cff1d867e) says that: &gt; In this section, we’ve grouped together functions and put them into separate modules. This act of putting like things together and separating them from unrelated parts of the system is called *partitioning*. [ ... ] Some would argue that this particular partitioning is superficial. And, for a chunk of code that was originally only forty lines, I would agree that this indeed seems to be more **abstraction** than is strictly necessary for a code sample of this size. Emphasis mine. Cut &amp; paste is not abstraction! If you move code from one file to another, you have most assuredly not created an abstraction. That’s just not what that word means. What’s weird is that the article then goes on claim the term it defined, “partitioning,” is somehow a form of abstraction. For example, one of the phrases it uses is “file-level partitioning abstractions,” but if you think about what a “file-level partitioning abstraction” would be—something along the lines of [`split`](https://linux.101hacks.com/unix/split/)—you realize the article stopped talking about actual abstraction right at the point where it started talking about modules. If anything, the article seems to be arguing that modules should be used for “partitioning” **instead of** abstraction. I definitely don’t agree with that! Evan’s advice in [The Life of a File](https://m.youtube.com/watch?t=45m37s&amp;v=XpDsk374LDE) to “build modules around types” is pretty clear and practical, I think. It’s been very useful to me personally, and has resulted in module structures I’ve found really pleasant to maintain. The article claims that “partitioning” is better than Evan’s advice to “organize modules around types,” but I don’t think it really goes on to back that up.
&gt; Sometimes you don't have this grouping of abstractions and it might be a better strategy to just let the file be as it is even if it is 600 lines long. Agreed - but eventually you can get to a point where you don't seem to have a nice grouping of abstractions, but your file is 2,000 lines long (or at least, that's what I've somehow managed to do...) For example, I have a tonne of view functions that don't seem to be related to specific types and that use data from all over my model. Is it a good idea to split them into separate files by some concept of "page", for example? I see that in elm-spa-example, each "page" has its own model, and some of the pages have their own update functions too. Perhaps the point is that in the case of view functions, you should consider each page as being its own "type" (i.e. you take all the data that the view needs and define it as a model/type), and then it makes sense to group the view &amp; helper functions around that type?
(1 / 2) First, some definitions. As Aristotle rightly noted, one must start a discussion with an agreement on first principles. Wikipedia's definition of "abstraction" as it relates to computer science is as follows: "[A]bstraction is a technique for arranging complexity of computer systems. It works by establishing a level of simplicity on which a person interacts with the system, suppressing the more complex details below the current level" (https://en.wikipedia.org/wiki/Abstraction_(software_engineering)). That is a good enough definition for me. I could get out some of my CS textbooks and find something perhaps more academic, but it will not be far off from Wikipedia's definition. So, I'll proceed assuming that we agree on this basic premise and Wikipedia is not wrong, at least about this particular topic. Now, let's get at partitions. This a term I have picked up in the workplace, and for which no definition is readily available from internet sources. However, if I were to choose a definition to describe how I and others I have worked with use it, it roughly aligns with the standard dictionary definition, this one taken from the Dictionary.com: "a separation, as of two or more things" (http://www.dictionary.com/browse/partition). Partitioning means making one thing into two or more things. The structure or mechanism utilized is irrelevant. Another term I have heard used for this same concept is "seam," except this only ever refers to a particular refactoring activity. I prefer "partition," since, as I just demonstrated, the real world definition very much aligns with its computer science usage. It should be clear from these definitions that an abstraction and a partition are not necessarily the same things, since they have different definitions. On to mutuality. Can a thing be simultaneously an abstraction and a partition? For an abstraction to also be a partition, then a mechanism that "suppresses more complex details below the current level," would also have to be "a separation." Is this true of software structures? In my article, I cited the following structures: comment blocks, local functions, and modules. Comment blocks do not suppress details below the current level of code (and I noted in the article that such "abstraction" is only superficial). Local functions and modules do. Local functions move details down away from the function call site by relocating them to another part of the file. Modules, to another file entirely. Local function and modules then, appear as though they are capable of simultaneously, "establishing a level of simplicity on which a person interacts with the system, suppressing the more complex details below the current level," and also "creating a separation." The answer to the question is, "yes." Being an abstraction and being a partition are not mutually exclusive. On to transitivity. Is it possible for an abstraction to not be a partition, and a partition to not be an abstraction? In other words, is it meaningful for these terms to be separate from one another? If all abstractions are partitions and vice versa, we might as well have one term. It is difficult to imagine an abstraction that is not a partition. The definition of abstraction requires us to create "levels of simplicity" that are separate from "the more complex details." It seems that abstraction necessarily entails partitioning. But what about the reverse? I can think of partitions that are not abstractions (I did not give any such examples in my article, because I wanted to focus on a clear transition from a state of concreteness to abstractness). In order for a partition to not be an abstraction, it should be _arbitrary_, meaning the additional symbols created by the partitioning must not also generate a division between generic and specific. I can do this quite easily at the function level in Elm: ``` a = [ 1, 2, 3, 4 ] ``` versus ``` a1 = [ 1, 2 ] a2 = [ 3, 4 ] ``` This is a partition. It separates one thing into two or more. This is not an abstraction. The details are merely "apart". There are no new semantics that create a generality in one location whose details must be searched out in another location. It is easy to extend the same argument to the level of modules. If we were to take a module and redistribute half of its exposed functions to a new module purely at random, then we would have a new partition, but not a new abstraction.
(2 / 2) Summary: 1) All abstractions are partitions. 2) Partitions are not necessarily abstractions, but they can they be, if they create a general symbol that stands in for the relocated details. Note that the qualification in part two is quite subjective. It requires that the symbol be _meaningful_ as a generality. I would guess that everyone reading this will agree that `a1` and `a2` are not in any way meaningful or general of the data they describe. The intent of the statement "cut and paste is not an abstraction" is perhaps in this vain. I see a meaningful, general symbol, where another person sees an unnecessary partition. This situation, I would argue, does not undermine the conceptual framework, but rather strengthens the case for its necessity. If we take away abstraction and partitions as concepts, Elm applications will merely be large masses of functions with no engineer intent behind them. How do we begin to talk about good and bad structure of Elm applications if we aren't even able to disagree about a symbol's relative usefulness as a generality? I hope, with these definitions, we now see that the statement, "the article seems to be arguing that modules should be used for 'partitioning' instead of abstraction" (boldface removed), doesn't make a whole lot of sense. Creating two or more modules where there was previously one is an act of partitioning; Elm projects, to my knowledge, start with one module and sometimes grow to more; ergo, all module creation constitutes an act of partitioning. The only exception would be the unicorn engineer, who is capable of creating all the right modules the very first time and never has to move functionality from one module to another or break up a module that has grown too big. I do not think such an engineer exists in reality. Perhaps in the land of Platonic Forms, but not on Earth. So much for abstractions and partitions. I hope we all now agree on what abstractions and partitions are, even if we might still differ on whether specific instances of code constitute abstractions or merely partitions. Did my article claim that "partitioning is better than Evan's advice to organize modules around types?" This will take some unpacking. First, let's get a transcription of exactly what was said at the above link: "So, big lessons. Focus on data structures and choose the best representation available. Actually think through as many cases as you can. And the other is build modules around types, and try to expose as little as possible but no less." Does my article argue against this advice? For the majority of the article I discussed the pros and cons of various changes without throwing my support behind or disdain against any of them. It's only when we reach the conclusion that anything like a recommendation appears: "The relationships between various parts of our code are clear when we implement the best partitions for the given behavior, living within a given function, living within a given module, living within a given application, living within a given ecosystem. The definition of 'best' will depend upon context, but it will always be somewhere between the two extremes of total concreteness and total abstraction, which are the least desirable configurations for any software project of significant size." (https://medium.com/@matthew.buscemi/abstraction-in-elm-conclusion-6ea7adcf398e). I hope I do not need to perform a detailed dissection of these statements for it to be apparent that the two pieces of advice are quite compatible. In brief, both statements use the word, "best," with the same intent helping the listener/reader realize that they must be cognitively involved in determining what "best" is for their given situation. Also, using partitions is not opposed to Evan's above advice. As I showed in my article, unless we all write perfectly concrete applications, completely lacking both local functions and modules, we must necessarily perform partitioning in order to do our work. "Partitioning" as a general concept is not capable of being better or worse than Evan's advice, because it is Evan's advice. I am not opposed to Evan's advice from this segment, and neither is my article. Now, let's a get a transcription of what was said at the link I used in my article (https://medium.com/@matthew.buscemi/abstraction-in-elm-introduction-db0922bde3ba, https://www.youtube.com/watch?v=XpDsk374LDE&amp;t=6m30s): "So now I have six hundred lines of code. And it's like, 'now it's really a problem.' And I'm like, eh, not really, I don't know. I think you shouldn't be too scared of a file growing long. And this is something that will typically happen." This statement begs the question I asked in my conclusion: If the "right time" to think about your software system's organization is not "right now," then when is it? I can sometimes get away with not thinking too much about how I'm structuring my application on personal projects and be mostly okay (but even then I usually regret it). In my professional experience on teams, I have never found any answer acceptable besides building a culture of immediate reflection on how we are structuring our code. I can think of a lot of ways to make a giant mess of an Elm application in six hundred lines that a little forethought would have solved. I also think that many individuals will hear Evan's advice from this segment and not stop at six hundred lines. What they will hear is implicit permission to never concern themselves with the issue until it manifests itself some other way (dependency issues, for example), and then they will have tens of thousands of lines of code, and the effort to course correct will be enormous.
&gt; One always thinks of abstracting data by grouping them in a sub-record (if that makes data easier to understand) ... Modules often play the role of objects by grouping together a data structure with the functions that operate on that data structure. Now I read this more carefully, I think I understand better. I think my problem was, I was thinking "this view function takes a random bag of odds-and-sods from across my model - that's not a nicely defined 'type'." I was thinking of types as representing objects/concepts ("User", "Player", etc.), rather than just being data structures that can take whatever form is convenient. But of course, a type can be whatever you want it to be. I guess I could always just group the bits of my model into an ad-hoc type using an extensible record, and build a new module around that...
I can see that. As I mentioned in the article, the only real structural enforcement on application structure is the signatures of the functions you pass to `Program`, which is really nice! Outside the code itself, a project will have a few other dependencies, like elm-package.json. You've got me wondering about ways that that could be clearer for folks who are used to that standard list of directories. I'm sure such things are being thought through in some other thread.
&gt; Is it a good idea to split them further into separate files, by some concept of "page", for example? I would say yes. Use the power of namespaces to organize your code. The `elm-spa-example` does a great job in showing how to do this by splitting the code in multiple ways. You have the business objects with the serialization and some helpers in their own namespace. You have the requests neatly grouped into their own namespace. One word of warning tho, do this splitting when you feel that it would improve what you have. You can go overboard and instead of having a couple of files where you can easily find what you need you end up with an entire hierarchy of files that mirrored some organizational idea you had at one point. Adding just a little bit of inertia to the splitting of the files is sometimes enough to prevent such mess. There is one exception. I think that when one knows they are going to implement a multipage app with business objects and complex UI, one can safely mirror the `elm-spa-example` main folder structure and start putting things in their own place by following that convention. I would start with `Data` `Requests` and `Pages` folders, a `Main.elm`, `Router.elm` and `Ports.elm` files and then move start adding the rest as they feel needed. 
A bit off topic, but I hate the phoenix way! I wish they'd have designed the library more as a library and less like a framework. I too was completely overwhelmed with all the files and code it created.
This is still the best place to ask questions :)
Sweet. Very nice!
Hi, I'm also working on a [project](https://github.com/ivanceras/diwata) similar to spreadsheet, but mine pertains closely to database than spreadsheets. I also planned to have an export to spreadsheet functionality. I'm thinking we could collaborate on connecting this 2 projects together
Maybe on RedBubble ? :D
If the article comes across as discussing anything other than pros and cons of various changes up until the conclusion, then I have not communicated my intent as effectively as I could have. As in the quote above, I dropped into a concrete example, hoping to make clear a particular context that mitigates the cons to a certain extent. But it's clear this had an effect contrary to my goal. Where abstraction is concerned, there are no purely right and wrong answers, only trade-offs to be assessed. This situation often leads to the question of, "then why bother?" The answer is that engineers who are unconscious of where they are drawing partitions arrive at structures that work against their long-term goals and thus ultimately become difficult to scale and maintain. I believe that moving collections of details somewhere else can be very good for a system, if doing so makes a system easy for engineers (both the initial coder and newcomers) to traverse and comprehend. Such determinations ultimately depend heavily on the experiences of the engineers doing the coding and maintaining. In the particular case of thirty message constructors and the rather large amount of associated update logic in Elm Test Runner, all my engineering intuition and experience tells me that leaving all this in one place is a case of detail overload, and I would prefer to have logical groups in the form of modules. As I mentioned above, another engineer's experience might tell them that this is not an abstraction, but a meaningless (and therefore useless) partition. _Both of these evaluations are legitimate_. Applying abstraction is about selecting from amongst a number of options with various trade-offs. The fact that we talk about (and disagree about) what ways are better means than progress is being made over a situation where engineers just build whatever. I can take any of the individual strategies in the article and find a context that mitigates its cons. For example, pure concreteness and pure abstraction don't scale, but they work well in small contexts. The forty lines in the very first example aren't _that_ bad taken in and of themselves in isolation. Let's take the case of the comments. I can make that superficiality into a benefit by inventing a context. Let's say I've got sixty value constructors in my `Message` type, and additionally, all of my update functionality can be expressed in fifteen small update functions. This is a case where breaking up constructors into logical groups with comments makes sense. The update functionality can probably live in a single helper file for `update`, and some might legitimately argue that it should all just go in `Main`. It is truly my intent to show that each of these stages come with pros and cons that make these solutions acceptable for some contexts and unacceptable for others. The fact that "acceptable" and "unacceptable" vary per individual engineer is a feature, not a bug. It creates just this kind of discussion. Such discussions have been ultimately beneficial for every engineering team I've ever worked on.
When I `Debug.log` a cmd I get `cmd: { type = "leaf", home = "infoForOutside", value = { tag = "RaceAdd" } }`. Is it possible to do something like `home = cmd.home`? When I try this I get the following error: &gt; The type of `cmd` is: &gt; Cmd Msg &gt; Which does not contain a field named `home`.
Great interview. I'm really looking forward to see the way Elm will solve the CSS conundrum. My money is on the `style-elements` way of separating layout from surface. :) 
There is also a Matrix room for Elm: https://matrix.to/#/#elm:matrix.org
For an immutable language, log32(n) is the best you can do. There is this, but I'm working on making it more modern in the near future: https://github.com/Skinney/collections-ng
What you're seeing in the logs is probably related to the compiled javascript representation of the `Msg`, so you won't have access in elm code.
Hey, that's weird, I was trying to do the same thing as your library just last week! (for Haskell, not Elm, though) As it happens, there's a lot of research into the area of Uniquely Represented data structures (this is what structures with the property you're trying to get in your library are usually called). The fastest purely functional ordering-based structure (that I know of) is described in [this](https://pdfs.semanticscholar.org/2575/71bcaa156e42042ae74c0b02d022dee49479.pdf) paper, and there's more research on the area outside of purely functional stuff since then. [I have an implementation](https://github.com/oisdk/uniquely-represented-sets) based on code by [Jim Apple](https://github.com/jbapple) that uses a slower strategy, but is much simpler than the one described in that paper.
I dont think [Dict](http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Dict) is what Im looking for since it also only deals with comparables. I want to make a Set of a custom type. 
Technically you could do "better" by just increasing the width of the hamt node, it's not clear that it would actually be *better* in terms of performances or memory for typical workloads. And log32(n) is already a hair breadth from constant-time. 
The issue is insertion. In a purely functional language, you generally can't get better than O(log(n)) for insertion. (if you think about inserting into a hash set, it's a fundamentally mutating operation)
Only if the "tree" has one level. In which case, inserting something into the tree, would take ages. log32(n) is the best I've seen anyone do in a pure functional language.
It would be better for read performance, worse for inserts (more copies).
Elm's Dict is a Red-Black Tree.
The server needs to send you an `Access-Control-Allow-Origin`-Header otherwise the browser is refusing the accept this request due to security issues. You need no elm package, you need the server maintainer to send the correct header.
I believe it's not hard to imagine a usecase for a data structure optimized for random reads at all costs, with slow `fromList` and no `insert` at all.
Yes of course, but most of those use cases are better served by record types (or arrays), rather than dynamic dictionaries.
My journey started with an interest in "Flow-based Programming" (J. Paul Morrison). While reading about the options I had I discovered Elm and something in the way the programs read was very attractive (I have a Python background). I joined the Elm community back in October 2013 but for the first years I was only a spectator, postponing learning the language. I guess after a car hit me in 2015 I woke up to the fact that we all have a limited time on earth and decided to actually sit down and learn the language. I asked the community for some challenges and someone was kind enough to give me some. I learned Elm in about a week with a couple of hours per day. My previous experience with the web domain was quite limited. Some PHP ages ago and small Python projects with Flask and Django. So, I did not have a lot of baggage in the domain. The satisfaction with the language is very high. Something about Elm felt right and fun. The shift from imperative to functional was quite pleasant for me. I guess I have SICP to thank for that. The algorithms side was not really an issue for me since I had a decent understanding of recursion from back in my high-school years. Also, there is a plethora of books on functional algorithms design but, to be honest, I don't remember a moment when I needed something custom. Regarding the future of Elm, I am highly optimistic about its future. Elm has a lot to offer to the web developers and the current ecosystem makes for quite a pleasant programming experience. With the passing of time, a lot more knowledge and resources become available. I'm looking forward to the revolution in assets that 0.19 promises. I'm looking forward to the development in term of CSS integration and to layout solutions like `style-elements`. The language changes slowed down considerably which brings a certain stability and predictability to the table. This means the people who are a little bit more risk averse can finally start considering jumping into the Elm boat. 
(i) started studying Elm after attending a talk at Codemotion Rome 2016. Coming from Jquery, AngularJs, React. So far, ~10 months of professional experience working with it. (ii) I'm faster and my code is stronger - less issue overall (iii) Very satisfied (missing polymorphism though...) (iv) easy, I've used Scala for ~2 years before (v) this can be painpoint somethimes if you are used to loops, but .fold* and .flatmap did everything I needed so far - I've also written two small native modules to temporarily workaround when we haven't yet made a final choice (vi) if not Elm, the future will be astoundingly similar to it
A little over a year ago, I decided that "learning some FP and a functional language" was my goal for 2017. I had just started introducing a more declarative style in the enormous and very imperative AngularJS codebase at work, adding lodash (or was it underscore?) to our toolset. I found myself able to be much more clear about my intent. No more digging through a couple of levels of nested `for` loops, memorizing how the counters relate to one another, just to figure out what some piece of code was supposed to be doing: I could just _declare_ the transformation. That was an important pivoting point for me. After some internal debate, I decided to give Elm a try. The main thing holding me back from trying Elm was that it seemed to evolve fairly quickly. I didn't want to invest time learning a new syntax and a bunch of new concepts, if the language would evolve at a higher rate than I could reasonably keep up with. I'm glad I got over that. So, I read through the guide, and - since I usually learn best through experimentation - started doing some exercises on [exercism](http://exercism.io/submissions/423f74b8533c402786fe10df42065876) Most things felt very natural to me - declarative UI's, functions everywhere, partial application and currying: it all "clicked" pretty quickly. Datastructures, though, felt like a blind spot. I stumbled upon @brnhx's blog which had a series on [Functional Sets](https://www.brianthicks.com/post/2016/11/13/functional-sets-part-1-construction/) that I eagerly picked up. Looking back at [the code I wrote back then](https://github.com/zwilias/elm-avl-set), I tried to be much too clever. I suspect this was mostly me exploring the newness of these constructs I suddenly had available. Somewhere around that time I first joined slack, and start trying to help out people like myself. It didn't take me long to start hoping I could use Elm in any sort of professional capacity. Using it gave me _joy_. After working on a huge, imperative AngularJS behemoth, that's _really_ cool and exciting. I felt much more confident writing, reading and refactoring code. It took me a fair while, but I now work with Elm (and Erlang) fulltime. From imperative to functional - in retrospect 2017 was a good year for me. Clearly, I'm a satisfied user. It's a tool for a job, and like all tools, it has shortcomings and room for improvement. I'm glad I picked a tool whose author has shown a remarkable sense of design, though. One of the things that really sold me early on was this _sense_ of "there's one way to do it". It has since dawned on me that this is, in fact, intentional.
Picking up on something you said about CSS integration and `style-elements` in particular, is there still a place for learning/using something like CSS Grid to work with Elm?
&gt;How did it start? What was your previous stack before elm? Prior to Elm I was big on Dart and subsequently TypeScript. I've always loathed javascript, and just wanted something sane to use in the browser. My first exposure to Elm was via a member of the Angular team (Victor Savkin) who had posted something about it on twitter. It looked super interesting, and also seemed like a good opportunity to finally learn a pure functional language. I always had an intention to learn Haskell, but there wasn't really anything within my domain of interest that it was well-suited for. Elm checked all those boxes, and seemed generally more accessible and welcoming of beginners. &gt;How is your effectiveness/efficiency as a programmer with elm compared to your previous tool? It's a net win on the Elm side, but there are definitely trade-offs. The biggest frustration is not being able to leverage non-official native modules in a fully-supported fashion and being at the mercy of a BDFL when it comes to designing/implementing or accepting fixes to native APIs. In many cases, I've had to just pull in native APIs into my project directly to either fix certain bugs or add needed features. Or, if there is a native browser API I need, I have to write my own and keep it local to my package unless I want to use a 3rd party package manager. &gt;How would you rate your satisfaction while working using the language? Mostly positive. The community is generally great. The language itself is great. The perceived distrust of the community to design/implement quality native modules is frustrating. &gt;Was the shift from imperative to functional paradigm easy or hell difficult? I had done a lot of functional-style programming in imperative languages so it wasn't an entirely new concept, but it was the first time I had used a pure functional language so at first I felt highly restricted. It took me a couple months of hacking on little side projects to be able to think "functionally," but it's completely natural now and actually comforting. &gt;I'm also particular in implementing algorithms that can normally be written in imperative method, how did you handle them in elm? Learning to think in terms of recursion, typically. Understanding what makes a data structure persistent. Often times I would read Evan's Elm code, which not only informed how to approach a particular problem, but also how to do so idiomatically. &gt;Do you still believe that elm is the future? I believe Elm is onto something for sure, but Evan is so opaque at times it's hard to know what the future is. Months ago he had outlined some goals for the next release, but there hasn't been much activity or communication since. As a developer investing in a platform, the two biggest concerns are **a)** Does it satisfy my needs? and **b)** Is it going to be well-supported? I personally can't give an enthusiastic "Yes!" to either of those questions. And, as other languages such as Rust are able to target the browser via WASM, and have crates that adopt TEA, it's hard to say where Elm fits in. I would love to see it evolve either way.
Does elm-package have a command that checks an elm-package.json and installed packages to return some sort of status on whether elm-package install needs to be run? Something like 'elm-package check' I want to use such a thing for a configuration management tool, specifically chef so that it only runs elm-package install _only if_ packages are missing or need updating. Yarn and bundler both have a command like this. yarn check v1.3.2 success Folder in sync. Done in 4.88s. 
[As mentioned in the '...journey about devlopment in Elm?' thread, I'm working on [WingTask](https://wingtask.com), a UI for [taskwarrior](https:taskwarrior.org). Taskwarrior is a command line app for todos/task management that I feel does the whole task management thing better than anywhere else. The only thing it lacks is an interface for mobile and tablet. I'm building an interface with Elm, specifically a lot of it is using [elm-mdc](https://aforemny.github.io/elm-mdc), material design components for elm. Here's some screenshots of WingTask: https://imgur.com/a/EFAZo
1 Rails. Elm sounded cool so I tried it. Became hooked. 2 Code is more obvious. 3 10/10 4 The difficult part was feeling the growing pain of verbosity for a return of clarity. 5 Everything is a function. Responsible composition accomplishes my needs for algorithmic solutions. 6 I believe the experience is the future. The tooling is stellar and I feel the language scales well. 
&gt; How did it start? What was your previous stack before elm? I was working with JavaScript then CoffeeScript then Ruby (all on the front end) I was intrigued by the promises Elm made, was hard to start because it was my first functional language. It was the time when 0.16 came out. &gt; (ii) How is your effectiveness/efficiency as a programmer with elm compared to your previous tool? Mainly because of the type system my work became more stable, but because of the verbosity of the language it made me slower. &gt; (iii) How would you rate your satisfaction while working using the language? It was satisfactory, much better then previous tools, it gave me a sense of completeness (only the Crystal language gives me the same feeling since then). &gt; (iv) Was the shift from imperative to functional paradigm easy or hell difficult? For me the first month or so was very difficult, but there is a single point when it clicks and that's it, after that everything fits into place. &gt; (v) I'm also particular in implementing algorithms that can normally be written in imperative method, how did you handle them in elm? There are constructs that help, `Result` or `Array.range` for example, but few times I went Native because it felt more natural. &gt; (vi) Do you still believe that elm is the future? I think Elm changed our perspective about what developer experience, and language design is, but it will not be widely adopted because: * It's too rigid (both in ideas and development wise) which really hinders it's progress * It's coming from academia not practical experience * It's written in Haskell which is hard to contribute to (smaller developer pool) * It's basically a general purpose language with some UI flavor * It's dependent on one person --------------------------------------------- I'm not using Elm anymore, I was trying to push It towards a more open direction with some projects (see my Github profile if you are interested), time and effort but ultimately it's not the direction what the community wants. I hope it will succeed in it's goals, and I'm checking in time to time on the progress. 
poi is basically a wrapper over webpack. It makes working with webpack very easy. Creating an Elm app requires just 2 dependencies: `poi` and `poi-preset-elm`, and a couple of lines of code in `poi.config.js`. Adding SASS/SCSS is a couple of more dependencies which requires ejecting in create-elm-app last I checked. I'd highly recommend trying poi out!
This pattern can be seen in `elm-spa-example` where Richard decided to have the pages represented as a tagged union. In this context, he had to pattern match the messages together with the state of the page in order to route the messages to the appropriate place. see [updatePage](https://github.com/rtfeldman/elm-spa-example/blob/master/src/Main.elm#L322)
Add this setting to your User Settings: "elm.formatCommand": "elm-format.cmd", The proxy that npm creates is a .cmd file, which is found automatically be a shell like cmd (or powershell), but isn't always found by other tools (whereas a .exe file would be found)
That would make sense actually. Thanks for the answer. It doesn't work though. Even when I add the entire path to users settings... hmm...
Good suggestions, thank you. 
&gt; this message should never arise It can if messages can come in asynchronously (e.g. it's a multiplayer game and moves can result from http requests which could come back any time), and the Elm Architecture is designed for that use case. There's no way to rule them out at compile time when they're architecturally possible at runtime! You could always use a state machine instead of the Elm Architecture though. I've never tried, but I assume it's possible to build a state machine on top of the Elm Architecture by using `Html.beginnerProgram` with `view : Model -&gt; Html (Model -&gt; Model)` and `update = (&lt;|)` but that wouldn't work with the debugger, and I imagine as soon as I wanted to do anything async I'd regret having set things up that way. 😅
The debugger is only included if you pass `--debug` to `elm make`. How are you building your project?
Side note, how are you finding that library? Have you tried this one? https://github.com/OvermindDL1/bucklescript-tea
I had to add the correct path using an escaped backslash '\\' for my `elm-make` to work. It may be something similar to this.
This. If you're using webpack ensure the "&amp;debug" part is removed when building prod.
Hello everyone! I’ve been developing Elm games/toys as a way to learn Elm for the past year or so. Here are my most-completed games (even though none are 100% done): https://github.com/jamesgary/constellations https://github.com/jamesgary/boids https://github.com/jamesgary/greygoo https://github.com/jamesgary/catcher They each have links to a playable demo in the README. This week, I plan on benchmarking and optimizing Boids, then maybe add some better onboarding to Constellations.
Funny (or not). I have a similar problem, expose it here, and ended up with the same statement: Code duplication can not be avoided. And the duplication isn't the worse part of it, but all the functions that operates on the decoded types. But still, it's a nice thing to put your experience on this blog post. Thanks!
I saw OCaml and The Elm Architecture and I was about to suggest to git a try to Bucklescript TEA. To be honest, i didn't try it because I don't have time right now to learn a new language (I'm currently learning (trying to lean?) Haskell to understand Elm better). But the man behind is active (especially in elixir community) and has really good ideas, so if you can give it a try, do it!
Do you know about [JSON-to-Elm](http://json2elm.com)? Maybe it can help you with generating all those functions. 
Basically it is webpack .. It is a Rails app+Webpack. In production compiled with sprockets ..assets:precompile.. I try to find config file to switch off debug modus.. 
I found that there is a app/config/webpack/loader/elm.js. Included=&gt; const developmentOptions = Object.assign(elmDefaultOptions, { verbose: true, warn: true, debug: isProduction ? false : true //debug: true }) works.. But may be better solutions!? Thanks so far
In that case, perhaps extensible records on function signatures can be useful? While they generally don't work well for declaring the shape of your data, they do work rather well for annotating more generic functions. For example, `withName : String -&gt; { a | name : String } -&gt; { a | name : String }` would work rather well for updating the name of any record that has a field `name` that is a String. It is, of course, entirely conceivable that I'm misinterpreting the comment about duplication :)
It seems to be working all right for what I want to do, which is not very complex. It's definitely a work in progress; for example I ran into [this bug](https://github.com/LexiFi/ocaml-vdom/issues/18) yesterday, and it's not yet at a point where the maintainers have felt like adding it to OPAM. It's also a much smaller community, which means it's harder to find examples, documentation, and answers. (Hence, for example, my coming to the Elm subreddit with this question.) Bucklescript-TEA does look nice, and is definitely more active, but I didn't want to use Bucklescript because (as I understand it) it would take a lot more work to use pre-existing code, including the game logic that I already wrote for a terminal version of the game and Jane Street's replacement stdlib. /u/El_Moiz
You want me to delete this post until there is something more solid?
Nah, just wanted to share that context to avoid anyone reading too much into it!
Made a significant progress in [diwata](https://github.com/ivanceras/diwata). - Added a dynamic toolbar to tell the users what the button actually does which corresponds to the selected records - Completed a feature which detects images from database and display it nicely in the front-end
https://elmlang.slack.com -&gt; #jobs ?
Somebody has already started working on it.. it was on slack few weeks back. Can't find the link though.
Does anyone else find it confusing that the official examples overload identifiers? e.g. the [websockets](http://elm-lang.org/examples/websockets) example, uses "msg" to be a function parameter as well as a type parameter, and uses "Msg" as a type. view : Model -&gt; Html Msg view model = div [] [] viewMessage : String -&gt; Html msg viewMessage msg = div [] [ text msg ] Which I would find much less confusing (and simpler to discuss with others) if it used "message" as the function parameter, "m" as type paramter, and "Msg" as the type (to keep the name aligned with Cmd and Sub). view : Model -&gt; Html Msg view model = div [] [] viewMessage : String -&gt; Html msg viewMessage msg = div [] [ text msg ] 
Oh I see! I assumed you were targeting the browser. Thank you :)
&gt; I didn't want to use Bucklescript because (as I understand it) it would take a lot more work to use pre-existing code I believe that Bucklescript can compile most code (including Core), it just outputs rather a lot of code, resulting in a large bundle size. I've not tried it though. How large is the bundle with js_of_ocaml?
It is confusing, but maybe it's also good to hit home early that types and values are in separate namespaces. 
&gt; The longer answer is, from personal experience writing an app where you have to manage your own random seeds with step can be a huge pain and prone to errors. They both have a purpose. The purpose of `step`is to have *repeatable* randomness. Let say that you have an app that produces spirograph-like drawings (you probably played with that as a kid, Google Image it if you don't remember). Starting with the same seed you will always get the same "random" drawing the starting seed is the only thing you have to save to reproduce the same drawing. You probably used a generator to get the initial seed. &gt; Realize that when you call step with a seed it gives you another seed that you can pass to subsequent step invocations. That means that a potentially globally tracked seed is leaking into the depths of your functions. Not quite. `step` is most approriate when you can use it in a fold and don't have to store the seed globally.
Elm does not support incomplete types as type parameters. So, you cannot use `List` or `Maybe` by themselves as arguments to some type. You need a complete type. 
Is there an event that lets one know when elm is done with rendering/refreshing the DOM elements? My issue is the following: I want to scroll to the bottom of the page once the content has been rendered. 
With jQuery, this is very easy to do, since you are the one controlling the DOM adding and removing, and you know where to add your hook.
You can use a port [like this](https://ellie-app.com/dJxW5qnmHa1/0). If for some reason the port fires before the rendering, you might want to wrap the call to scroll in an `requestAnimationFrame`. 
I didn't mean to offend. This is, i think, a very interesting offer for any elm/f# enthusiast that might be watching this reddit. I could've written the post in english but i felt like it would "flash" more being in french.
if you hire only Francophones, post it in Quebec City.
He did, I removed it because I consider it spam. The question is not about language, it's about using a community to advertise, especially when you target an incredibly small portion of that community.
great explanation if the OP is still interested in this kind of modelling a look at Purescript might be the natural next step from elm
I think the reason for this is sort of tricky and important to explain thoroughly. I’m not making any assumptions about what u/ennmichael already knows about type systems; I’m gonna try to write a response that I wish I could had gotten when I had this question. In languages with type systems like Elm’s, types have their own classification that is usually called a _kind_. A fully specified type like `Int` or `List Int` has a kind of `*`, to denote that it is one single type that is fully understood. The kind of a parameterized type like `List a` is like a type-level function. It takes another type of kind `*` and results in a final type of kind `*`. The kind of `List a` is denoted as `* -&gt; *`. When you fill in that `a` with `Int` you are applying a type of kind `*`, which is `Int`, and getting back another type of kind `*`, which is `List Int`. Now, in some languages you can express fancier types than these. Were it allowed to exist in Elm, the kind of the type from the posted question would be `(* -&gt; *) -&gt; *` to denote that the first parameter is itself a parameterized type. This sort of type system feature is called higher-kinded polymorphism. It’s similar to the idea of a higher-order function, where you can pass a function as the argument to another function: `(a -&gt; b) -&gt; a -&gt; b`. Elm does not provide higher-kinded polymorphism. Every type in Elm must be first-order, meaning `*` or any length of `* -&gt; *`, one arrow per type variable. You can't have type variables that take type variables themselves, the type system doesn’t include such types. Other languages do provide this kind of polymorphism. Haskell and PureScript would both be able to understand that matrix type. So, if it’s very important to your program to be able to model a matrix in such a generic way then I would definitely recommend giving purescript a try. I personally really enjoy using it when I need fancy types! However, if it’s not critical to your software to be able to do this then in my experience it’s totally okay to write a program without that level of abstraction, and just choose the concrete container that best suits the situation you’ll encounter most commonly.
Long term JavaScript developer with experience in Typescript, it seems obvious to me there needs to be a cleaner solution to web development that isn't hindered with backwards compatibility. As I predominantly use React, ReasonML seemed a logical place to start however when I looked last year the documentation was poor and the language in flux. The concept of Elm is great and having a background in React and Redux meant the leap wasn't too great. However, I found it a frustrating experience as the introduction and examples were out of date and the documentation poor. I also really missed the great IDE integration of Typescript. I've created a few toy apps in Elm and I'm keeping an eye on its development however it really feels like the momentum is now with ReasonML. The backing of Facebook is huge and there's some really comprehensive tutorials being created now that I've never found in the Elm ecosystem where it feels like you have to hang out on Slack to get any help. Job wise I think it's going to be a long time until I get to use anything other than JavaScript/ Typescript so these other languages are very much for personal projects. I'll wait to see the eventual winner before diving in properly.
BTW, it is possible to do interfaces in Elm. Here is an 'interface' for some kind of buffer: https://github.com/the-sett/ai-search/blob/master/src/Search.elm#L145 With 2 implementations: https://github.com/the-sett/ai-search/blob/master/src/Search.elm#L286 https://github.com/the-sett/ai-search/blob/master/src/Search.elm#L303
Does anyone have a way to work with JSONP that’s not a complete pain in the ass? I’m working with the MailChimp API and they have cross-origin restrictions... I ended up just using ports and letting jQuery deal with the request, but that’s suboptimal.
bonne opportunité pour les devs de Québec..!
What about [elm-jsonp](http://package.elm-lang.org/packages/nkotzias/elm-jsonp/1.0.0)
Fr, randomness is the thing I found most frustrating about Elm-- otherwise it's a joy to use. I get why they do it that way, but isn't the whole 'generator' thing pretty much what all modern languages are doing, just under the hood? Like, I just want a couple of random values pulled from this array. Why does it have to be so hard.
I'm trying to build an Elm app and when building tests I find an issue: how can I test a method returns a Cmd I expect it to return? Example: my `init` method returns `(model, command)`. I want to add a test that ensures we trigger a specific command on `init`. But, at least with `elm-test`, I can`t use `Expect.equal (Cmd msg)`. How can I achieve this?
https://ellie-app.com/new
I have not personally tried it but this was posted here two weeks ago and well received: https://github.com/shamansir/ielm
&gt; Why does it have to be so hard. [This is the best answer I have](https://i.imgur.com/hhhkwY2.png) In other languages like Javascript we're used to randomness being an impure, synchronous function invocation. Since that's not possible in Elm there's a certain recoil to not being able to do randomness like we can in non-pure languages.
I've had this same question before and had the opportunity to ask Evan. It seems having an aesthetic solution as part of the language would require [session types](http://simonjf.com/2016/05/28/session-type-implementations.html) , which are outside the aims of Elm at this time
the code for that Elm REPL lives at: https://github.com/girishso/elm-repl-in-browser 
Looks like it is an npm package, so you need your own small server. You could also run it on your computer and share access via https://ngrok.com/ or something similar
Also, what about Jupyter notebook?
You can use the `disabled` attribute on the checkboxes to disable them. eg. https://ellie-app.com/rJqCbnvYTa1/0
Would require administrative access to their local machines, which these users don't have.
Thanks!
I understand the branches listed below for an update are functionally the same. I also understand that technically they are different since one is an empty list being sent to Cmd.batch and the other is Cmd.none. Is they any reason to favor one over the other? SetMessage -&gt; ({ model | model.message = "Scratching my head?"}, Cmd.none) SetMessage -&gt; {model | model.message = "Scratching my head?} ! []
&gt; The theme of February's jam is Safety. What exactly is meant by Safety? I'm eager to participate, but am totally blank with "theme Safety". Can you give some ideas? May be some pointers?
I am the author of http://elmrepl.cuberoot.in, didn't realize it went down. It's up now. Like /u/jediknight mentioned it's sources are available at https://github.com/girishso/elm-repl-in-browser, any contributions are most welcome.
uuu... "(viral license like GPL)" sounds very very bad. [Viral is a pejorative word coined by a Microsoft VP](https://en.wikipedia.org/wiki/Copyleft#Viral_licensing). I would suggest to use "share-alike" or "copyleft" instead of "viral". 
There was a nice brainstorming discussion on the #gamedev channel in the Elm Slack: https://elmlang.slackarchive.io/gamedev/page-35/ts-1517345033000415
Nice work! I avoid RemoteData for basically the same reason you point out: it rarely models the situation you're actually in. The middle ground I've found is to try and avoid searching for a generic abstraction, and just write down the state machine for each unique situation I encounter. Usually the readability of the bespoke union types makes up for the extra typing. One note about state machines though: [as Evan recently reminded me on discourse](https://discourse.elm-lang.org/t/how-do-we-feel-about-state-machines/567/2?u=xilnocas), the word "state machine" is not likely to mean much to you unless you spent months of your college career slaving over a hot microcontroller. Although I personally enjoyed my skim of the essay quite a bit, I think boosting the memetic success of "state machines" will take gentler introductions than this one :)
I appreciate the work you put in here, and the bit of zen you end up with :) Certainly have gone down similar rabbit holes myself. State management is hard. Most of us are badly trained by OOP. What seems missing though is an acknowledgement that different situations call for different data structures, there is not "one way to rule them all". RemoteData works fine in a lot of situations -- where you're not treating the app state as a cache of server state, for instance. When you don't care about keeping previous state around when you're loading. etc. It also has the advantage of having `succeed`, `map`, `andThen`, and `andMap` worked out, which are extremely powerful tools. Sometimes you need even _less_ than RemoteData (as in the `elm-spa-example`), sometimes you need more. I agree with Xilnocas, "Usually the readability of the bespoke union types makes up for the extra typing". 
You can interpret it however you want :) That's the beauty - it's general enough that you can make almost any kind of game with it.
Thanks for reading and thanks for the feedback. &gt;What seems missing though is an acknowledgement that different situations call for different data structures I totally agree. I wanted to say something about along those lines about RemoteData but I couldn't think of a real world use case for the pattern. Do you know of one? Maybe something like a realtime feed of data would involved switching between loading, success, and error without preserving information from the last state. A simple stock sticker wouldn't have a reason to keep the last state. But in that example, there's no loading state. Maybe the loading state is for an initial connection to the feed. Anyways, would love to hear a real world use case for this pattern. I didn't want to say something general and platitudinous like "Pattern x works for problems that fit pattern x". Until I have an example of such a problem, I don't want to suggest that they exist. 
Thanks for reading! From my point of view, this is just writing down all the required states and then also defining a function that updates those states. The states are specific to "remote data", which I understand to be data produced by a REST request to a remote data source. Are you saying this is a generalization because sometimes the remote data is Foo and other times it is Bar? So then "bespoke union types" would be things like FooLoading and BarError? 
I want to make an app that allows the user to provide some metadata to certain files by means of a form. Now lets say that there are 5 properties in total that I have, let's call them A, B, C, D, and E. The trouble is that we cater to multiple clients and some only want properties A, B, and C whereas others want every property. Furthermore the validation for each client is different, so in some cases value A has to equal "foo" and in some cases it has to equal "bar". All this information is stored in a database and can be called through an API. Currently this project resides in a Python/Django environment and the problem I have with it is that the form validation only occurs on submit, I want to move this to the the front-end. My friend highly recommended ELM for front-end things such as this, only I'm unsure of how I would go about achieving this. From what I see I have do define a model that gets updated and then displayed. I have not done too much programming in ELM yet, but I want to know if this is something that is possible and if so, what would be a first step? Do I create a model with all fields and then only display relevant fields? Or can I instantiate a model based on JSON? 
Elm's functions are pure, this means that they cannot give you different answers for the same arguments. This is why Time related operations are side-effects. You ask the runtime for the current time and then use that however you see fit. The only way to create such a synchronous function is if you save the current date in the model and you pass that together with some other date to a function that can compare dates. 
In Elm you can use records to define the problem in such a way as to define two sets of properties where one extends the other. type alias MetaData = { name : String , date : Date , owner : User } type alias Extended a = { a | rating : Int , likes : Int } validate : MetaData -&gt; Bool validate metaData = String.length metaData.name &gt; 1 validateExtended : Extended a -&gt; Bool validateExtended extended = extended.likes &gt;= 0 validateExtendedMeta : Extended MetaData -&gt; Bool validateExtendedMeta extendedMeta = String.length extendedMeta.name &gt; 1 &amp;&amp; validateExtended extendedMeta &gt; what would be a first step? Do I create a model with all fields and then only display relevant fields? The first step would be to model your problem. For example, I have no idea what you mean when you say that you have multiple clients. How would your app differentiate between clients? Will each client be on its own page and the app would be able to tell which client it is by the location it is run into? OR will the clients be set as a flag for the app by the backend? In any case, you will need information about the client saved into the model somehow in order to have it available to the view. The view will then be able to figure out what to show. Here is some fictitious code: type Client = Free | Premium type alias Model = { client : Client , data : Extended MetaData } view model = case model.client of Free -&gt; div [] [ p [] [ text model.name ] , p [] [ text &lt;| Utils.dateToString model.date ] , p [] [ text &lt;| Data.User.prettyPrint model.user ] ] Premium -&gt; div [] [ p [] [ text model.name ] , p [] [ text &lt;| Utils.dateToString model.date ] , p [] [ text &lt;| Data.User.prettyPrint model.user ] , Views.Common.rating model.rating , Views.Common.likes model.likes ] 
I haven't used RemoteData in awhile, and never in a production app, so maybe you are right it's not practical. Have you gotten any feedback from people who use it? It seems to me it could be used in a simple SPA when there is a 1:1 relationship between pages and requests. Each page has its own unique request and every time the user navigates to a page it reloads. And when there is no other data being loaded based on user actions within pages, only on page transitions. In such cases you don't care about "losing state" going from `Success a` to `Loading` because you are always loading data fresh from the server. 
Selon NoRedInk ça aide beaucoup pour le recrutement parce que si tu fais du React et du Angular tu n'es pas plus intéressants que tout le reste de l'industrie qui fait ça aussi. Si tu utilises Elm tu attire les gens qui veulent coder en Elm et ils sont plus nombreux que les emplois disponibles. En plus, tu viens d'éliminer tous les deux de piques qui ne seraient pas capable de coder un fizzbuzz.
Hi everyone - this is a little visualization I've been building off-and-on recently, showing how MPs in the UK have voted over the past 20 years or so. I'd appreciate any feedback anyone has either on the code or from a user-facing perspective. I found Elm worked really well as a tool for building this, and really helped me when solving some problems I think I'd have found very tricky in the past using just JS. I've also found Elm works really well at helping me make progress on side projects, making it relatively painless to slip back into an untested codebase I've not looked at for a while.
There's a known issue with capturing variables with closures in tail-recursive code. This appears to be a manifestation of that exact bug, and an interesting workaround :) Another thing that should work is using `always`, in this particular case.
What's the best way to install Elm on OS X? Are most people using brew cask or a direct pkg install?
I use `npm install -g elm` 
Partial application as a way to capture state is a common practice in functional programming. While I can accept that the (Cmd msg) interface blocks such behaviour, in a typed language such as Elm I would expect this to be enforced at compile time, by requiring msg to have a signature of kind * and not * -&gt; *. Otherwise you'd end up allowing undefined behaviour.
You wrote the code with one assumption: that you can use your values (`screen`) inside the `case` patterns (the stuff before `-&gt;`). But you can't. If you do something like case s of screen -&gt; ... It won't do `if s == screen then ... else ...` but `let screen = s in ...`. The `case` patterns are there to let you place constraints on how the shape of the value should look like. Example with a list: case myList of [] -&gt; "this is empty list" [a] -&gt; "list with one element (whatever!), I can now refer to the element as `a`" ["foo", b] -&gt; "list with two elements, the first MUST be 'foo', the second is this: " ++ b whateverElse -&gt; "this pattern catches everything. the value `whateverElse` contains the whole list. Sometimes we write `_ -&gt; ...` when we don't care about it" So, in your code, you should do something like: if screen == s then Just l else Nothing By the way, come join the [Elm Slack](https://elmlang.herokuapp.com/), it's full of people happy to help! :)
It's your Erlang-experience that mess up your intuition. In Elm and Haskell, a pattern consisting only of a variable will always match. It is irrelevant that the variable is already bound further out: it will not do any equality check and will simply shadow the outer binding.
You cannot match against variables in Elm. How would the Haskell code look like because, as far as I know you should not be able to do that in Haskell without guards. 
I've already guessed it, but seems it's not intuitive to rebind immutable variables.
The type you alias needs to be a valid type. You cannot say `type alias Validator = validateMin | validateMax` because `validateMin | validateMax` is not a valid type. also, when you declare types you need to use `:` not `=` in records. `=` are used when you create values of the record type. regarding the validator, you could use a tagged union like `type Validator = Min validateMin | Max validateMax` but you would then have to pattern match against it. If the validators are uniform you can just use the validator signature in the type definition and use one validator or the other when you create the values: type alias Field = { name : String , validator : Int -&gt; Int -&gt; Bool } someValue = { name = "minimum" , validator = validatorMin }
Certes, j'ai présenté les vidéos de Richard Feldman au lead developer de ma squad, mais il ne semblait pas convaincu. Le plus gros problème, c'est que tant que nous n'avons pas une grande compagnie (style Google ou Facebook) derrière un langage, nous n'avons aucune garantie que la technologie existera encore dans 4-5 ans. De plus, tant que la technologie n'a pas suffisamment de traction (dans notre région), nous courrons le risque de ne pas pouvoir maintenir le projets si les développeurs initiaux quittent la compagnie. D'où ma requête à J.F.
&gt; Le plus gros problème, c'est que tant que nous n'avons pas une grande compagnie (style Google ou Facebook) derrière un langage, nous n'avons aucune garantie que la technologie existera encore dans 4-5 ans. Qu'est-ce que tu utilisais il y a 5 ans? Moi j'étais sur Angular 0.7 de Google. C'est mort de chez mort. Il y a toujours un Angular mais outre le même nom il ne partagent rien. Et l'app que j'ai codé avec tourne encore sous cette vielle bouette. Si tu fais le tour des technos que tu utilisais il y a 5 ans, tu vas faire le même constat. Soit elles sont mortes, soit elles sont sur le respirateur artificiel. Et ça inclus les technos des grandes corpos qui étaient présentées comme le future dans le temps. Peu importe la techno que tu vas choisir tu as plus de chance qu'elle soit morte que vivante dans 5 ans. C'est ça le web. Donc la vraie question est : si je suis pogné avec une techno d'aujourd'hui sans aucun support, avec laquelle serait-il le moins pire d'être pogné? &gt; De plus, tant que la technologie n'a pas suffisamment de traction (dans notre région), nous courrons le risque de ne pas pouvoir maintenir le projets si les développeurs initiaux quittent la compagnie. D'où ma requête à J.F. C'est moins long apprend Elm / TEA que d'apprendre le framework du jour. Plus le temps sauvé à ne pas chercher pourquoi undefined n'est pas une fonction est considérable. La vraie raison pourquoi les gestionnaires sont timides à passer à Elm est qu'ils croient qu'en cas d'échecs ils ne vont pas être blâmé pour avoir choisi la même techno que tout le monde. *Nobody's ever been fired for choosing IBM.*
What are good and fast debugging techniques? I had a bug in my response decoder and I could only see "Bad Http Payload" message history explorer. I couldn't find good place to log anything and had no idea how to investigate this error. I ended parsing error to string in update function and updating "error" field in model, there I found detailed error message. It seems complicated and time consuming. Are there faster alternatives for such cases?
Good question. A quick 'n dirty way is to use `Debug.log` like this: case msg of SomeHttpResponseMsg (Err err) -&gt; let _ = Debug.log "SomeHttpResponseMsg" err in ... do something with error case ... That will give you the error in the browser's console. Of course a more comprehensive and a longer term way is to write tests for your decoders.
It's excellent. It's a lot of fun watching those circles move from one side to another as you switch the vote. "Current vote: European Union (Withdrawal) Bill — Clause 7 — Retention of Laws Required by the UK's Membership of the Single Market" is an interesting one that stands out as having a different voting pattern.
laaaame, I thought it was a fine term. OK, I'll change it! I don't want to seem pejorative; I really thought it was a reasonable term!
&gt; elmexamples.com He he just had a peek. Caught you using ReactJS
Oh no! Damn I keep postponing to actually do what I was going to do with it ;(
Im almost two years in working with elixir, I definitely related to what you said but from the backend perspective, and I'm definitely trying elm on my next project.
Is the code on Github?
'Native' is an undocumented internal API for the Elm runtime, It's not supposed to be used for code outside of the runtime and core packages. Here be dragons. It's recommended that you use 'ports' to communicate between your Elm app and any JS that is also included on a page. You can read about 'ports' in the Elm guide. https://guide.elm-lang.org/interop/javascript.html#ports
Hi! Good to read something like this! :) I tried Elixir, but type-checking and lightweight syntax missed me so much, I never could use it more than 2 weeks approximately… But I'm looking for Haskell and PureScript today, and it's amazing! I would advise you to try them too, after you played with elm. By the way, if you want to start a new project with Elixir in backend and elm in front, you should take a look at https://github.com/carleryd/elm-hipster-stack
Thank you! This is clever and looks way faster.
921
Maybe so but for something like a datetime manipulation library, ports are not a good fit, because they are not executed in the same event loop tick. Suggesting to use Ports interop for Moment.js is like suggesting wrapping the same library in promises — this is bound to add a ton of accidental complexity.
Cool, i have a function that does it, let me send it to you!
What about this: http://package.elm-lang.org/packages/alpacaaa/elm-date-distance/latest ?
I had a similar issue: your problem is that you don't have a bundler, since when Elm compiles to JS doesn't resolve the `require("filename")` statement of your native file. You need either to run the Elm runtime _after_ you've loaded moment in the page or use a bundler _before_ the elm compiler. Ain't gonna be easy :-) 
Wow, didn't know that! :D If I want to use the bundler before the elm compiler, how should I proceed? I've never read anything about bundlers before. Is it like run webpack on the moment.min.js file and then import it to my elm program or I should just import the script in a script tag through elm?
I'm gonna try to solve what I have but DEFINITELY if I can't solve it (even if I can solve it) I would use this package. Thank you!
Ok, first a disclaimer: I've already thought about doing this, but I've never tried. This is just a brief description of the way I think I could proceed. So... with order: &gt; If I want to use the bundler before the elm compiler, how should I proceed This would be a `nodejs` script (ie: `bundle-native` in your `package.json`), which runs before your `elm make ...` script (in my project for instance, I run `yarn build:elm` and I find my `dist/index.js`ready to be used by React Native). &gt; Is it like run webpack on the moment.min.js file and then import it to my elm program Exactly, although I'd probably go for something more basic that webpack unless you already know it: what you need is mostly just to take file A and prepend its content to file B (it's a naive solution: if you need the same library in more than one Native module, you'll get a lot of duplicated code). I'd probably explore Browserify. &gt; should just import the script in a script tag through elm It is the simplest solution, but you can't do it _through elm_: it needs to exist before the elm runtime. I'd probably put it into an `index.html` and run elm with `Elm.Main.embed(node)` in a `&lt;script&gt;`. This way you are just betting on the moment.js script being imported and executed before the elm runtime, which exposes you to possible race conditions. Again, it won't be easy but it has been in my mind for a while... also consider that such a pipeline would probably encourage the misuse of Native modules in your team, which defeats the safety of elm :-) 
That's cool. You did more than I did with the domain.
In case anyone is interested, [here's](https://github.com/ethagnawl/elm-ui-patterns/tree/master/remote-authentication) the demo I'd promised.
It will not be possible to write native modules starting with Elm version 0.19. If you write your program this way you won’t be able to upgrade your compiler version beyond 0.18. I wouldn’t want to use ports for a couple of functions out of moment.js either so what I would probably do is write them myself in Elm. If this isn’t a good long-term option for you then I would suggest choosing a language that has direct JavaScript interop, like PureScript or Reason
&gt; It will not be possible to write native modules starting with Elm version 0.19. Wait ... is that official?
That's a strong assertion, and afaik you should be among the core developers. Can you provide us with an "official" statement? Such a breaking change should be written clear, _somewhere_.