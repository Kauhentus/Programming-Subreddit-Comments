[https://github.com/PostgREST/postgrest](https://github.com/PostgREST/postgrest) PostgREST for a declarative backend 
Elm on Node.
Mostly C# and Node.js here, but I'd like to start using Rust. Link to similar thread from a week or 2 ago: https://www.reddit.com/r/elm/comments/9eg31s/what_backend_do_you_recommend/
Hey! I am interested in using F# for back-end as well :). I write mainly C# and typescript for the day job so it feels like it could be a good fit. That and haskell keeps scaring me off every time I try to get stuck in. I have some goals for how I would like my F# back end to function, and I would appreciate any info / tips you could share! So I have started out with giraffe, and eventually I want to have authentication via JWT. I also want to hook in to a postgresql db, maybe using type providers? Not sure on how to go foward there just yet. Finally I am looking for a migration solution similar to how EF Core works. Do you think this sounds realistic? Also I really wish we had fsharp-format, from what I have read recently fantomas is making progress but is perhaps not ready to be included by default.
Rust for me! I've only done one hobby project that had a backend, but I posted about setting that up (including deployment to Heroku) a few months back. [https://www.reddit.com/r/elm/comments/8tquam/rust\_with\_rocket\_elm\_web\_app\_running\_on\_heroku/](https://www.reddit.com/r/elm/comments/8tquam/rust_with_rocket_elm_web_app_running_on_heroku/)
Haskell. There exist a couple of options for frameworks: Scotty (simple, no type-level stuff), Servant (type level stuff), Spock (less typelevel stuff, I use this currently), yesod, and many more. I'm using Spock currently, but servant seems really nice as well. I fear Compiler errors when using servant, but I haven't actually tried it :)
I use Erlang or Elixir 
Haskell ^(but then I use it on the frontend as well ...)
Django Rest Framework (Python). I've given Haskell a try. But, there seems to be a pretty high learning curve (and lack of documentation) to most of the Haskell libraries. I'd like to check out Idris, since I could write Coq-like proofs in it. I'd also like to give Rust a try someday, just for the speed and safety.
Clojure, node or F#
I also use f# on the back end and Elm or Elmish (F# flavored Elm) on the front. For server I usually use Giraffe https://github.com/giraffe-fsharp/Giraffe but have also been keeping my eye on Saturn https://saturnframework.org/
Elixir! Check out [the subreddit](reddit.com/r/elixirlang) for it!
Err, why was this exact question posted twice within 60 seconds? Here is the original post: https://www.reddit.com/r/elm/comments/9ingy6/considering_elm_is_only_for_the_front_end_what/
Giraffe. The other option I've been playing with is using F# Azure Functions to quickly and easily spin up API end-points.
Go is decidedly unfunctional.
What? 
I write my backend now in Haskell/Snap. I base it on the backend written by Evan for [package.elm-lang.org](https://package.elm-lang.org) here [https://github.com/elm/package.elm-lang.org/tree/master/src/backend](https://github.com/elm/package.elm-lang.org/tree/master/src/backend) . It's very nice as it doesn't rely so much on advanced haskell concepts.
Your experience mirrors mine in many ways. I pressed on because I had to ship something, but the lessons were hard and I'm still not happy with many of my apps.
https://youtu.be/LZj_1qVURL0 There's this guy
Word through the grapevine includes Adobe.
Since it kinda/sorta qualifies, I'll make a shameless plug: I launched [this](https://www.intelfuturequiz.com) app earlier this week to coincide with The Atlantic's _Intelligent Future_ event.
We're using it pretty extensively at Culture Amp.
Wow, that first question really aggravates me---because for me to make the complex decision of whether or not a robot should be serving in a position of authority I need to know exactly what kind of authority we're giving the robot! :) The next question makes me think Frank Luntz helped write the questions. Otherwise, Its a really nice Elm app for the questionnaire genre, I am certain that it was fun to write because of Elm.
Haskell or Python.
[https://stackoverflow.com/questions/52544763/how-to-create-spa-with-elm-0-19/52546935#52546935](https://stackoverflow.com/questions/52544763/how-to-create-spa-with-elm-0-19/52546935#52546935) Thanks for help
We use Rails at work, as we were very familiar with it when we started. We use GraphQl. In ruby you have to manually type the fields going to the FE e.g. this is a Non nullable string. Is very easy to lie and end up with a runtime error when actually getting a null. Because of this I don't feel that any dynamic language is ideal for Elm. &amp;#x200B; In my side project I'm using Rust. It gives me a lot more confidence in this respect. If I change the type of a column in the DB (e.g. make it nullable), my Elm frontend will know about this. Any lang like F#, Haskell, Ocaml should give you stronger guarantees like this. 
##r/vim --------------------------------------------- ^(For mobile and non-RES users) ^| [^(More info)](https://np.reddit.com/r/botwatch/comments/6xrrvh/clickablelinkbot_info/) ^| ^(-1 to Remove) ^| [^(Ignore Sub)](https://np.reddit.com/r/ClickableLinkBot/comments/853qg2/ignore_list/)
I'm trying Elm out right now and looking through the various tutorials (it seems very cool!), but a lot of them focus on having one big webapp and very little server-side rendered HTML. My question reading all this is, what about people using uMatrix or a similar javascript blocker? They get an empty webpage? I'd like to be able to render most of the page in plain HTML using Go's templates, and then use Elm to just handle stuff like updating a feed, applying search filters, etc. I know it may seem old-fashioned as many major websites are completely dysfunctional without JS, but I'm just curious how it would be done. Any tips? &amp;#x200B; reposting this here because either it was too noobish or got caught by some auto spam filter
You can get Elm to be in a charge of specific parts of a page. [Browser.element](https://package.elm-lang.org/packages/elm/browser/latest/Browser#element) allows you to create an HTML element managed by Elm. Then, if JS is disabled or blocked, that element will not be updated but the rest of your page should still be functional. You can also create a [program without UI](https://package.elm-lang.org/packages/elm/core/latest/Platform#worker) which only handles "business logic" (eg getting search results and handing them off to JS through ports?). 
Haskell
Thanks for the response! From reading the guide section on elements, I can see that they can be quite small, and according to the documentation, "The resulting elements are easy to embed in a larger JavaScript projects." However, I'm not seeing, for example, how I would put this in some html template that I serve, other than by using some other JS framework or plain JS that Elm interacts with somehow. If I gave a div a class and id, would elm be able to see that somehow? I see a number of tutorials where something like this happens ([https://dmitryrogozhny.com/blog/embed-elm-app-in-page](https://dmitryrogozhny.com/blog/embed-elm-app-in-page)): &lt;body&gt; &lt;div id="app"&gt;&lt;/div&gt; &lt;script src="main.js"&gt;&lt;/script&gt; &lt;script&gt; var node = document.getElementById("app"); var app = Elm.Main.embed(node); &lt;/script&gt; &lt;/body&gt; So is this generalizable somehow to send a lot of info from the page to Elm? EG, say I have a webpage that lists news articles. The first ten articles are rendered as HTML server-side, and if the user scrolls down for more articles, I would want to be able to load more. How would Elm be able to see which articles were already displayed, or even, say, hide one?
There are Elm applications in a large international European financial institution that I don't know if I can name.
Functional Scala! [https://typelevel.org/cats/](https://typelevel.org/cats/) 
I am using Go and a small micro service in Node
After investigating, I found that these issues are mainly because tool supports are not ready for Elm 0.19. I may wait for a while
**admin hat on** thank you for reposting; I didn't get a spam notice so it probably wasn't that. But it's not too "noobish" either. You're fine! **admin hat off** Good news: you can totally do progressive enhancement stuff with Elm! If there is a single widget you want to write, you can plan to fail gracefully if loading fails, just the same as any other JavaScript. But it sounds like you may want to control the entire DOM with Elm, or at least part of it, while still rendering HTML from your backend. That situation is a little more complex: you'll have to keep your backend and frontend rendering logic in sync. There are ways to do Elm server-side rendering so you only have to write one view function, but AFAIK haven't been updated to 0.19 yet (replies on this welcome, but please reply to the parent too so they'll see it!) If the HTML on the page matches what Elm would render, it will rehydrate it without replacing everything—the runtime is pretty intelligent about diffing what already exists and doing only the minimal update. As for ad blocking, I haven't had any problem with it. If you're running an ad network or something, you're going to have problems with all of your assets and page loads anyway and will probably know already. Some people *do* disable JavaScript. Their motivations vary, but they will sometimes turn it back on if it's clearly necessary. I wouldn't worry too much about that; you can explain what you are and aren't doing (especially regarding personal data) in a `&lt;noscript&gt;` tag.
I really like the way Elixir and Elm work together.
Are these applications central to a department's day-to-day operations? In other words; is this application mission-critical to the success of the department(s) which are using them? 
Elm was introduced in mid 2017 and is used in several applications. While there are limits to how mission critical code that was introduced in 2017 can be in an institution with a lot of running code, the Elm code has not been carefully or slowly introduced: It is 100% of the frontend code in a new app, and there are ongoing efforts to gradually rewrite the frontend of an older monolith. The new application in question is a priority for the business.
I think Brian has provided one possible answer in the other reply. Another option would be to let the Elm app know which articles are already displayed when you initialise it. When you render the initial HTML/JS on the server, you can pass flags to the Elm app: &lt;body&gt; &lt;div id="app"&gt;&lt;/div&gt; &lt;script src="main.js"&gt;&lt;/script&gt; &lt;script&gt; var app = Elm.Main.init({ node: document.getElementById('app'), flags: {displayedArticleIds: [10, 20, 30]} }); &lt;/script&gt; &lt;/body&gt;
Site doesn’t load on iPhone 10 safari.
The site doesn't load for me either (OS X, neither Chrome, Firefox nor Safari) 
Not loading on Win7/Chrome either
I think I may have simplified my example too greatly. In a recent project I built with Elm, I found myself doing the following (and its dual) in multiple places (in views and in business logic): case gradeKey of everyday -&gt; "Everyday" assistant -&gt; "Assistant" limitless -&gt; "Limitless" _ -&gt; default
Checked 10 hours ago, and now. Still not working. 
Personally, I'd define a function for that in the same module as the type. If the module has the same name as the type, I'd name it `toString` (and call it like `Selection.toString`), otherwise I'd prefix the type name like `selectionToString`.
Thanks for this. That seems very reasonable. Out of curiosity: Where do you house your types? (src/types/*.elm?) How do you handle nested types or don't you?
Yeah, I keep types in `src/Types/*.elm` (capital folder name, since module names are also capitalized). What exactly do you mean by "nested types"? Now that you mention it, I've never had a sub-folder in `src/Types`, never really had a need for it. Phantom types are a bit special, although the only time I actually used phantom types, I just defined the type in the same module that it was used with. More specifically, the type is an alias like `type alias Invite user = {- record -}`. There are two kinds of invites, because there are two kinds of users. (So there are two phatom types).
&gt; What exactly do you mean by "nested types"? I was thinking of a record in Types/Foo.elm which contained a field with a type not used elsewhere (this field could also contain a record containing a record ... ad infinitum).
Interesting, according to this [https://guide.elm-lang.org/interop/flags.html](https://guide.elm-lang.org/interop/flags.html) it looks like flags could pass in a lot of context, but not help mutate existing HTML. Thanks!
&gt;If the HTML on the page matches what Elm would render, it will rehydrate it without replacing everything—the runtime is pretty intelligent about diffing what already exists and doing only the minimal update. Hm, how would this interact with the init function and the model? As long as the HTML matches and it's in the Elm app div, it can recognize this stuff as part of the model?
&gt; A type constructor is a function (or even a value) rather than a type Do you mean 'Data constructor'? `Maybe` is a type constructor, `Just` is a data/value constructor. Tbh I wouldn't mind if data constructors were lower cased, seeing as Elm keeps its type and value languages extremely separate.
Ah I see. Yeah I haven’t had much nesting yet, it’s encouraged to have flat records where possible, and often the types mirror the data in the database, which is also pretty flat (normalized)
Anything really. Personally.. Elixir.
I’ve been doing that for a while now. Great fit.
Elixir.. or Rust if ur into that.
I'm having some issues getting ports to work. These lines exist in my Main.elm, and I've also ripped off `updateWithStorage : Msg -&gt; Model -&gt; ( Model, Cmd Msg )` from the TodoMvc example. port module Main exposing (main) -- ... port cache : Model -&gt; Cmd msg I've also got this body in my html: &lt;body&gt; &lt;div id="elm"&gt;&lt;/div&gt; &lt;script&gt; var myApp = Elm.Main.init({ node: document.getElementById('elm') }); myApp.ports.cache.subscribe(function(data) { localStorage.setItem('favorites', JSON.stringify(data)); }); &lt;/script&gt; &lt;/body&gt; The app itself works wonders. The issue is that Chrome and friends insists that `myApp.ports` is undefined. I'm compiling with `elm make src/Main.elm --output=main.js` I don't know much about javascript, but this seems weird for me. My `main = Browser.element ...` if that makes any difference.
I just implemented this last week with Norpan's drag and drop elm package. Not to difficult, check it out!
Would that be norpan/elm-html5-drag-drop ? It did see that, do you just add empty droppable nodes inbetween your elements to figure out where the user let go ?
Option number two (and something I implemented and reimplemented in a private library a few times) is to make the list elements a fixed height/width (depending on list direction) and apply the classic Elm drag concepts. Now, I know this is somewhat of a hidden art, so I'll try to do an overview: + Have a type alias for a Drag, a record containing a start position and a current position. + Store a Maybe Drag in your model, have it be Nothing most of the time. + Have a section of the draggable elements you check for mousedown. On mousedown, store whatever you need to identify the element and create a drag with both positions set to the mousedown position. + If your Maybe Drag is a Just Drag, subscribe to onmousemove over the entire window, and update the Drag's current location. + The difference between your start position and your current position produces a drag delta. Use that to build your view along with something like "position" "relative". + *Keep the base list in the same order during dragging!* This allows live reordering of the list elements visually, without weird bugs for the drag part to deal with. + On mouseup, just divide the delta by the height/width of each element to determine how far the user has dragged. This strategy has no mobile support, but also doesn't require that the browser support HTML5 drag and drop. The best part is that, because *anything* can be dropped onto an HTML5 droppable element, this setup protects your site from weird bugs introduced by cross-site or cross-list dragging. Single-source-of-truth FTW! (If someone has created a stable library, though, that's probably better than rolling your own code. Just sharing a lost art I know!)
The official package for 0.19 is in the works, the core team did not want to block the 0.19 release just for the websockets package and they didn't want to update the existing one). If you have suggestions regarding /u/billstclair's websocket package, I'm sure he would be interested to hear them.
I believe `encodeUri` is now `Url.percentEncode`, from the elm/url pacakge: https://package.elm-lang.org/packages/elm/url/latest/Url#percentEncode Regarding CSV handling, have you looked at the packages on https://package.elm-lang.org?
WHOA. not sure what happened here. I will post a fixed link asap Also wanted to add you can go to www.functional.works-hub.com and then go to learn and it should be the 2nd or 3rd article! 
/u/matt2ray so it's all patched up!!
Great. Thanks. Looking forward to looking at it. Can confirm it's working now!
I would recommend only converting the visible elements (plus a surrounding buffer) to html elements. Then have an event on scroll to load a buffer and discard farther away elements. Based on my experience it seems to be the UI elements that are generally slow and not the elm data structures. I would use the chrome developer tools to profile the application to see where it is slow. Unfortunately this means you need to read compiled javascript. I really love the ELM but the ELM debugging and inspection tools aren't really there yet.
Hey, I’m an Elm noob so probably won’t be much help here but I was wondering what necessitates storing the data as an array instead of a list?
Array provides operations for getting and setting individual elements by their index. Doing the same with List requires mapping over the *entire List.*
Looks like a slow DOM rendering issue most likely. Secondly, I would suggest sticking with Lists, instead of arrays. In our app we’re storing almost 5MB data (maybe more) in memory in lists and dicts mostly, never had any performance issues. Javascript engines these days are pretty damn fast!
Well, my use case is updating individual elements. I hate mapping over the entire list just to do that, but I can certainly revert and try it.
To your second question, a ziplist (or SelectList, see the package by Richard Feldman) might be the right data structure. It allows one element in a list to be selected and efficiently updated
This is entirely a DOM performance issue. Keyed and lazy is the best you can do short of those weird custom rendering solutions that only render the 100 (Or however many) items are visible at any given time and add/remove items as you scroll down. Things like https://package.elm-lang.org/packages/FabienHenon/elm-infinite-list-view/latest/ solve this problem by using the approach I just described above. 
Use chrome performance tools to narrow down the bottleneck in your code. You could be unnecessarily rendering or running event handlers. Very unlikely that array vs list is the only issue here
I tried to use this for CI but it seems to lack nodejs?
A simple approach to start with would be to give your new module’s view function a way of constructing your main Msg type. That way you can have interactive elements in your view and process any interactions as usual. Moving on from there, you would want to define a Model and Msg type specific to your new module. It’s considered good practice to grow modules around data models, rather than from views. Once you start implementing these abstractions, the reasoning becomes clear. If your reusable view doesn’t really have much of its own state associated with it, the best thing to do would be to make that view a function and give it an argument of type Msg or some other means of constructing a Msg that you can pass to functions like input and button.
To expand on this, `lazy` says: if the arguments to this function I’m calling are the same, you can just use the old one. If you’re using it at the root, the arguments always differ because your model is changing (though I guess you’re saving the case where it doesn’t?). So the entire thing gets rendered again. 
I wouldn't be so quick to say it's just DOM perf issue. There are plenty of ways to hamstring yourself, else you could use Html.Lazy for everything and you'd never have to consider which datastructures you use. Perf gets especially apparently on slow clients like old mobile devices where simple things like indexing into an Array vs mapping an entire List may have drastic perf differences that are hard to notice on your desktop powerhouse. 
The package could define its own `Msg` type that's reflected in its `view` function. Like maybe `ItemUpdate itemId newItem` or more focused msgs like `NameChange itemId newName`. Depends on which resolution makes sense. Another way is to add functions to the (static) config object that lets the callsite (user) map things like `onNameChanged itemId newName -&gt; Msg`. However, every time I've tried to extract views to the point where they can be reused across Elm projects, I've realized it's not very rewarding. For example, to use elm-sortable-view, you'd have to luck out with the condition that its `view` is indeed sufficient, because you won't be able to tweak it. And and you add customizability to a library like elm-sortable-view, you quickly reach a point where the library isn't much of a time-saver at all. This is one of the hardest pills to swallow when using Elm. But consider the upsides of having something like a sortable table or image gallery (with images culled as they go out of view) showing up in your Elm app's git diffs. Where, when you want to add/change functionality, you just scroll to it and do it. I encourage you to try it, though.
&gt; Soon your users will have to implement everything except the trivial feature itself at the center of your lib Can’t this be circumvented by default records and (as Evan puts it in the sortable table package), a CustomView and a VeryCustomView?
Can you post the expected output for your example?
Hi! &amp;#x200B; Are you looking to do something like this? r/https://ellie-app.com/3yfHkXsdwPra1
I keep coming back to [this](https://developing.enectiva.cz/2017/05/31/custom-flags-decoder-in-elm/) tutorial when dealing with anything Json.Encode/Decode or Port related. Perhaps it will be of some use to you.
Thank you, that is exactly what I needed! However, I don't fully understand what this means: Encode.list Encode.string "some string" Does it encode the given string and then puts it in a list? Because I thought the input data that I give to the respective *Encode.x* function has to have the right type already. Thats why I tried Encode.list [ Encode.string "some string" ]
How can you get debugging in elm reactor to ignore certain messages? Sometimes I only want to see a subset of messages logged in the debugger.
Filter in the developer console?
Can you use the dev console to filter what messages get sent to the debugger?
The approach you describe does not need a `Sub.map` getPeople : ((Result String (List People)) -&gt; msg) -&gt; Sub msg getPeople toMsg = Ports.getPeople (\json -&gt; toMsg (Json.Decode.decodeValue People.decoder json |&gt; Result.mapError errorToString ) ) 
Sorry I mean the UI in the bottom right corner where you can see all the messages, click on them to see the state at that time and rewind the application
Well that's embarrassing. Thanks very much for your reply! This was my solution after looking at your comment: getPeople : (Result Json.Decode.Error (List People) -&gt; msg) -&gt; Sub msg getPeople msg = Ports.getPeople (Json.Decode.decodeValue People.decoder &gt;&gt; msg)
I think that advice has to do with people trying to do "components" and reaching for the nested update pattern very early when building an Elm app. They are trying to discourage people from doing this too early.
Good read! IMO Stripe Elements isn't that much more difficult to implement than Stripe Checkout and you don't have to implement a hack to get it all styled the way you want. With that said, I've yet to implement Stripe Elements w/ Elm.
&gt;Elixir Elchemy!
I am by no matter an expert on the subject matter of Circular Dependencies, but I believe the impacts of allowing import cycles exceeds performance issues. I think there are weird recursion issues, and the import issue spreads. For example: module A exposing (..) import module B \------------------------------ module B exposing (..) import module A \------------------------------ If a module C imports module A, does it implicitly import module B as well? Would it not? There are a lot of better references out there than me however, check out some of [these](https://en.wikipedia.org/wiki/Circular_dependency) links or [these](https://lattix.com/blog/2017/07/26/why-cyclic-dependencies-are-bad) 
I totally agree that autogenerating Decoders has major benefits. The closet thing to this with Elm 0.19 (or 0.18) support is https://github.com/dillonkearns/elm-graphql. I spoke about this at Elm Conf a couple of weeks ago (the video should be on youtube shortly!). From Ghivert’s opinion section in the readme: &gt; This post of Evan is typically explaining why you should write decoders by hand I believe what Evan was referring to here was the problems with debugging the incorrect decoders you end up with when you have implicit decoders generated from the language itself. &gt; [Haskell] can generate decoders based on types, but I have come to specifically avoid this feature [...] I don’t think Evan’s comment says anything about the idea of implicit/auto-generated decoders which are guaranteed to be correct, like you get with dillonkearns/elm-graphql. In fact, from my conversations with Evan at Elm Conf, and from this document of his, I think guaranteed correct auto-generated decoders is very much inline with the direction he has in mind: https://gist.github.com/evancz/1c5f2cf34939336ecb79b97bb89d9da6
If you suspect it's fast enough why not patch the compiler to permit cyclical modules and then gather data to support your theory? That way the maintainers can make an informed decision :)
Originally, this DSL is here if you already have the decoders written (because that was my case). I only needed to reuse them with the package.
Did simple animation using random opacity and onAnimationFrame https://ellie-app.com/3zNtc4PTYJ8a1
No styling hack is needed with the approach I suggest here, only with the hackier way I used before! I haven’t tried to use Elements either, but I worry that it would mess with the HTML too much and that would make Elm unhappy. I don’t know for sure though.
I like the idea of that loading animation, but I feel like the implementation of manipulating the dom on `onAnimationFrame` is going to be more costly than doing CSS animations. Animations are hardware accelerated and they can be optimized further with the `will-change` property to let the browser know which properties are expected to change.
I made some more improvements to the timing of the animation and added the rest of the triangle animations. There is this weird issue I'm seeing between keyframes where it almost pauses for a few frames before starting the next keyframe. It's most notable on the square animation. It has a distinct step halfway through instead of being a smooth rotation. https://ellie-app.com/3zSCLxPnx3ra1
v2 looks really great! I was thinking about trying to make it have a sort of "heart beat" and that feels pretty close! &lt;3
I tried to get something like this going with animating a scale CSS transformation. I couldn't get it quite right, but it definitely seems achievable!
You should also post this to Elm discourse. It has much more active community than this subreddit. 
I'm essentially doing the same thing with the square by just rotating it by 90 degrees and then letting it reset to 0. I'm animating the scale as well because I noticed in the loading gif that the square never extends outside of its original footprint. I wasn't quite sure if the space was an intentional part or not. It felt kind of weird to me to not line up when you're looking at a crisp svg file. The gif kind of gets away with some it because it's so small.
If a type has a decoder, I think it should stay into its own module with that decoder and whatever helper functions it might have. I make exceptions to this rule when I have composite types where I keep the composite type and some internal types used by the composite type in the same module. For ports, I always have a Ports module and all the places in the app where I need something from a port I would import the Ports module and use it as a namespace (e.g. `Ports.logToRollbar`). This Ports module takes care of decoding and presenting an API that cannot be misused by the rest of the code. The modules that describe types and handle their decoding/encoding are living in a `Data` folder and I've made it a personal rule to never put `import Html` in any of the files from that folder. So, no view code BUT, you can have a helper that converts your type to a derived type that can be easily displayed by the view. 
Thanks for your reply. How do you handle massive views?
Hi! I'm doing the official Elm guide and there is something I can't figure out. When you look at *Browser.sandbox* description, view function returns *Html msg*. What is that construction? In the *Html* module description I can see that *Html* is defined as `type alias Html msg = Node msg` but that does not help me very much Googling around I found article about Opaque Types in Elm: [https://medium.com/@ckoster22/advanced-types-in-elm-opaque-types-ec5ec3b84ed2](https://medium.com/@ckoster22/advanced-types-in-elm-opaque-types-ec5ec3b84ed2) and I assumed that this definition is such opaque type. Am I correct? Anyone have any nice resources about that stuff?
I wrote a post to explain this: https://korban.net/posts/elm/2018-03-15-how-to-read-elm-types-like-html-msg
It's a parameterized type similar to \`List&lt;Int&gt;\` in other languages. The \`Int\` tells us something extra about \`List\`. Similarly \`Html&lt;msg&gt;\` or \`Html msg\` in Elm. In this instance it's easier to think of it as "HTML capable of producing messages of type \`msg\`". So not quite an opaque type. But I appreciate the shoutout to my blog post! Let me know if you have questions on opaque types!
Thanks so much for doing this, been waiting for something like this to get me started. When I run the example I get an error: Something went wrong while parsing an import. 8| import Url.Parser as UrlParser exposing (()) ^ I was expecting to see an infix operator, like (+) or (==) I run it as a local project.
&gt;import Url.Parser as UrlParser exposing (()) \`import Url.Parser as UrlParser exposing (..)\` should fix it for now. I haven't actually checked if any functions should be exposed, but the error you;'re getting is just invalid syntax.
Any advice on autocomplete widgets?
Reuse an already implemented widget like [elm-selectize](https://package.elm-lang.org/packages/kirchner/elm-selectize/latest/). These widgets are not as simple as they might look at first and they risk becoming a time-sink. 
For reference, I'll include the error here too. -- TYPE MISMATCH ------------------------------------------------ src/Stream.elm [200/1869] The 1st argument to `FlattenStream` is not what I expect: 594| next (FlattenStream ( nextNestedStreams, n )) ^^^^^^^^^^^^^^^^^^^^^^^^ This argument is a tuple of type: ( Stream b, b ) But `FlattenStream` needs the 1st argument to be: ( Stream (Stream b), Stream b ) Hint: Your type annotation uses type variable `b` which means ANY type of value can flow through, but your code is saying it specifically wants a `Stream` value. Maybe change your type annotation to be more specific? Maybe change the code to be more general? Read &lt;https://elm-lang.org/0.19.0/type-annotations&gt; for more advice! -- TYPE MISMATCH ------------------------------------------------ src/Stream.elm The 1st argument to `next` is not what I expect: 590| next nestedStreams ^^^^^^^^^^^^^ This `nestedStreams` value is a: Stream (Stream b) But `next` needs the 1st argument to be: Stream b Hint: Your type annotation uses type variable `b` which means ANY type of value can flow through, but your code is saying it specifically wants a `Stream` value. Maybe change your type annotation to be more specific? Maybe change the code to be more general? And a snippet that it refers to ([https://github.com/naddeoa/stream/blob/elm-19-issue/src/Stream.elm#L581-L600](https://github.com/naddeoa/stream/blob/elm-19-issue/src/Stream.elm#L581-L600)) FlattenStream ( nestedStreams, currentStream ) -&gt; let ( nextStream, nextValue ) = next currentStream in case nextValue of Nothing -&gt; let ( nextNestedStreams, newCurrentStream ) = next nestedStreams in case newCurrentStream of Just n -&gt; next (FlattenStream ( nextNestedStreams, n )) Nothing -&gt; ( Empty, Nothing ) Just b -&gt; ( FlattenStream ( nestedStreams, nextStream ), Just b ) Even if I could rationalize the error, I still don't know why it started happening in 19.
The code is broken but the `0.18` compiler did not detected that. Unfortunately I don't think I can give you a better hint than what the compiler already gives you. You call `next` with a type that is more specific than what was declared. This is a subtle problem. It is similar to wanting a `number` to behave as and `Float` and the compiler informing you that you said that you wanted a `number` but you actually are using the function like it requires an `Float`. To make a parallel, `Stream b` is the equivalent of `number`, `Stream (Stream b)` is the equivalent of `Float` (from my attempt at explaining the situation). Here is [an ellie with the error](https://ellie-app.com/3Cwy9h8w9zCa1). If you understand why this code fails to compile you should be able to understand why your code fails to compile. 
That's a good example, thanks a lot. The next issue I'm having (since this was all ok in the past) is understanding why a \`Float\` isn't a \`number\`. In other languages, I might lean on generic type constraints. In my case, I really do want the stream to be of \`Stream a\` (anything can be the \`a\`) and I'm having trouble understanding why next can't just see the input as a \`Stream a\`. I might have misunderstood Elm's type parameters to be similar to other languages generics all along? And if so, I'm not sure what the "right way" is supposed to be.
Where exactly do I output the generated code? If I do it in my Elm project it overrides my elm.json and Main.elm files. Having it in a separate folder creates a new Elm project. I currently take my first steps with Elm and this generation would help a lot :)
Actually spent the better part of an afternoon removing I fix leftshifts and rightshifts from Elm-base64 so that it could be updated. User-defined infix is gone. Only elm/ repositories can use them now, so only the language dev Evan-cz.
The only ones I have seen so far are the ones in Url.Parser I miss the Cmd.batch operator ! though
What about publishing the Elm package to Github? or referencing it locally ([https://stackoverflow.com/a/44469731/677735](https://stackoverflow.com/a/44469731/677735)) ?
Elm.Parser still has them, as a subtle replacement for andThen.
Haven't thought about the multiple source-directories That works. Thanks!
Here's a couple videos for you. They are based in F# but the functional concepts (records and union types) are the same. This is what made things click for me. https://youtu.be/1pSH8kElmM4 https://youtu.be/US8QG9I1XW0
&gt;I realize I'm struggling to understand the code that uses these types The best way I know to improve is to try and understand code that may not make sense. I can try to help make sense of the code snippet you've provided. type Validity a = NotValidated | Valid a | Invalid String The first thing to notice is that this is a generic type. Generic types are easy to recognize in a lot of other languages because they use a pretty common `&lt;T&gt;` syntax. In elm, it's a bit more subtle because type parameters are declared using lowercase identifiers. So, `Validity` is a type that represents can hold one of three values, which I would think of as different states: - `NotValidated`: A state that indicates the input hasn't been validated yet - `Valid a`: A state that indicates the value has been validated, and which "wraps" the validated value. - `Invalid String`: A state in which the input is not valid, providing an error message along with it. Now, here's an example of how you might work with a value of type `Validity` case inputState of Valid inputValue -&gt; -- Do stuff with the validated input value! Invalid validationMessage -&gt; -- Display a validation message to the user NotValidated -&gt; -- Probably an initial state that you ignore Now for the `Field` type: type Field raw a = Field raw (Validity a) This is a type that is generic over two types: The `raw` input type (a string, for example), and then the type `a`, which is the type of the validated value. One likely possibility is that the input is a string (`raw`) which during validation is converted to a number (`a`). One great consequence of modeling types this way is that it's pretty to infer how it should be used and what all the possible states are for validation, and the only way to even access a validated value is if it's wrapped by the `Valid` state. If you want to know what inspires this way of modeling things, see this talk about ["Making impossible states impossible."](https://www.youtube.com/watch?v=IcgmSRJHu_8)
Thanks, I'll check these out.
Hi. I'm building an app where users will poke at something to try and work out what's going on. They will do things like OpenTopCover, OpenBottomCover, TurnRedKnobUp, HitWithHammer.... you get it... The most simple thing to do seems to be have all of those actions be messages and deal with them in the update, but there will be many messages (maybe 50). Looking at Richard F. and Evan's youtube videos, this seems like not something to be frightened of. All the action is in one place (Update), in a big case statement. Obviously, I would make each message call a function and not clutter the particular item with too much code. I'm seeking reassurance that this is not nuts!!!
If your intention is to wrap the invalid value, you would probably want to declare `Validity` this way: type Validity raw a = NotValidated | Valid a | Invalid raw String This way, the `Invalid` state wraps the "raw" value which may be a different type than `a`. Going back to my original example, if `a` is `Int` but `raw` is `String`, then the raw value couldn't be wrapped using type `a`.
&gt; So in that case I surmised I needed to change NotValidated type to NotValdated a. You can think of `Validity a` as a fancier `Result String a` where you have a third case that basically encodes the fact that the validation function was never evaluated. Another way to view it is like an alias: `type alias Validity a = Maybe (Result String a)` in this case, the `Nothing` means that the validation function was not called. `Just someResult` means that the validation was called and produced either `Ok someValue` OR `Err errorMessage`. The custom type encapsulated this behavior in a simpler and explicit way. If you want a value out of an `Maybe` you use `Maybe.withDefault` so that you have a value even if the maybe is `Nothing`. The same strategy should be used here. Create a `Validity.withDefault` and use it where needed. 
There was also a useful post over on a thread on discourse by joelq which might be helpful to you: [Handling Nested Conditional Logic](https://discourse.elm-lang.org/t/handling-nested-conditional-logic/2163/4) 
Do custom elements (is that the same thing as shadow dom?) work across browsers?
I read somewhere that making my website work in Chrome 41 would fix the issue, since Google's crawler uses that version of Chrome. 
Found a neat tool that lets you test in older versions of browsers: [https://www.browserling.com/](https://www.browserling.com/) I ran my website in Chrome 41 and it did break with JS errors. 
Custom Elements work out of the box in Chrome and can be [polyfilled](https://github.com/webcomponents/custom-elements) for the rest of the browsers. Shadow Dom is together with Custom Elements, Html Imports and HTML Templates part of the Web Components. 
Guys, I did it! I fixed it by using gulp-babel on my compiled elm JS code. \`babel({ presets: \['@babel/env'\], parserOpts: { sourceType: 'script' }, compact: true })\`
check out Luke's work on Ellie editor. i believe it uses codemirror under the hood
I'm happy for you :-) I don't understand how this fixed the issue, do you have a link to an explanation, please? Thanks!
A nuance that isn't often mentioned is state synchronization is a problem for data that is *mutable*. An ID is an inherently immutable field. A user with a different ID is a different user by definition. As a result it's not typically thought of as duplicated sources of truth.
Sounds fine to me. If things start getting too complicated in your `update`, you can later organise messages into groups as well. For example: type CoverMsg = OpenTopCover | OpenBottomCover | ... type KnobMsg = TurnRedKnobUp | ... type Msg = Cover CoverMsg | Knob KnobMsg | ... That allows you to have the main `update` call specialised "sub-`update`" functions, or to break things up further into several modules. 
excellent and clear thanks very much!
I agree with you, often I store my 'tables' as e.g. `List (UserId, User)` and dont store ids in users. Also I'd use a Dict if the data is primarily used for lookup and joins, but a List if it's primarily being filtered and sorted and or if the sort order is determined by the remote source.
Yep. Since the Google Crawler bot opens the websites in an old version of Chrome (41), it cannot parse ES6 Javascript. When I used the babel on the compiled scripts, it made them readable by older browsers that don't understand ES6. 
If you were using longer tuples in ad hoc case statements, you can still use lists
&gt; expose all when importing types, e.g. TypeName (..) I'm pretty sure this is meant to be a no no
This is awesome. I think it should be a read me on /u/rtfeldman's very helpful [elm-spa-example](https://github.com/rtfeldman/elm-spa-example). It would have helped flatten the Elm SPA learning curve. 
&gt; clear
&gt; upvote
the man is good
I too have been migrating a really big project, so to add to the list: * As /u/gigobyte said, `Debug.toString` won't work with optimizations. The appropriate way of handing it is `String.fromInt` or `String.fromFloat`. * Some of the points mentioned would be automated by [elm-upgrade](https://github.com/avh4/elm-upgrade). * Some more points would be fixed by [elm-format](https://github.com/avh4/elm-format). * "Refactor where nested function had the same parameter name as its parent" is referred to as shadowing and it also includes if you use as variable name that also appear as a function name anywhere in the file. Quite a few places to fix but it served as a good reminder in a few cases that things could be named more appropriately. * `Color` is removed. Apparently not many people used it, but there's nothing stopping you from simply copy-pasta the [old implementation](https://github.com/elm-lang/core/blob/5.1.1/src/Color.elm) to your local project like we did. * To go through a big project it might be a good idea to break down and fix these things sub folder by sub folder and compile, which can be done with something like find `./my/specific/subdir -type f -name '*.elm' | xargs elm make --output /dev/null`. Mixed feelings about tuples, was quite a nice way to return many values from one inference but I guess nothing is stopping me from using a record instead. Also running Stylish Elephants (now elm-ui) in the project which also changed a few things. Mainly, `col` and `row` has changed it's default value (if nothing else is given) from `width fill` to `width shrink`. When things finally compiled, the UI was broken but it seems like simply going through all those elements and adding width fill fixed every and all issues, so that's fine. All in all, pretty straight forward and well worth it. Compile times are damn quick, and rendering speed (mainly caused and reconciled by the improvements in elm-ui) are now fantastic, more on that [here](https://github.com/webbhuset/test-elm-performance).
Thanks for this talk! I really enjoyed it, and it provides a lot of food for thought. I think the proposed structure to ask for relevant background information and to nudge people into writing good / useful text is great. I wonder if GitHub would ever adopt it or if it'll require something new?
There’s String.fromFloat etc now which took me a while to work out but makes sense.
I think it is worth prototyping and experimenting with it on a smaller scale first. It's possible it just sucks. I hope not, but it's possible. So I think any big company would point to risks like this as the first reason to not do anything with this. If it proves to be a good idea, I think the longer term dynamics are still very complicated. Companies that prioritize engagement (reddit, twitter, youtube) would only want this if users are fleeing. Otherwise it probably does not increase engagement. Companies that prioritize businesses (slack, github) may see it as a way to make employees more efficient, but they can ultimately rely on the social structure of the businesses and I don't know if they are likely to come out with 100% aligned designs. So it's conceivable to me that a system like this can only exist as an open source project for now.
This made me rethink a lot of my behavior. How insightful. It makes me want to do more to contribute.
I wrote up a detailed list of changes when Elm 0.19 came out, it might be helpful to others who migrate their code: https://korban.net/posts/elm/2018-08-22-elm-019-whats-new-install-upgrade/ 
Option 4: write elm-semantic
Why rule out elm-ui ?
Have you thought about using web components?
[removed]
I have not, but I'll look into it. Thanks for the link.
I don't think I have the time (or expertise in Elm yet) for that option really. Would be cool though!
Or else use pure css framework like Bulma, that’s my goto these days. 
This looks like a perfect use case for implementing a [Custom Element](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements). Have you tried doing so? I recently wrote a [post](http://codeloveandboards.com/blog/2018/09/09/elm-and-web-components/) about the subject, and I'm very happy with the result. 
Not a bug, a feature :) The js code processes the onMouseDown event synchronously while the elm system has its own event loop and delivers the messages asynchronously, thus introducing the race condition. In order to make something like this in elm you would need to make the drop down div a child of the button so that focusing the div doesn't blur the button.
The model.dropdownMouseDown property is not reset correctly when closing the dropdown. It stays true and thus causes blurMsg to return NoOp the next time you click to close the dropdown. See the text on the button here: https://ellie-app.com/3Ggb94MJKFDa1
Insightful as usual. It's always a pleasure to watch people who have a broader perspective of things. Dialogue and mutual understanding is as needed in software as anywhere else. Differences of opinion is not bad, it just has to be handled properly. No wonder innovation comes from a thinker like that.
That’s really interesting! I’d looked briefly at custom elements for this, but dismissed it because it didn’t seem like the browser support was quite there. Still can’t tell if I’m misinformed on that point or not. Your post is very informative about how this would work in terms of using it with Elm. It looks like a pretty cool solution, and I can definitely see how Stripe Checkout could be packaged up this way. I wish Stripe just offered it out of the box!
Thanks for your reply. In the JS example, the mousedown event on the dropdown fires before the blur event on the button, which lets me keep the dropdown open. However in the elm example this seems to be happening the other way round, which is causing the behaviour you described
Don't you have it also between the `set UserId` and the "table" or UserId? You could have a UserId in the set that actually do not exist. Databases handle this with foreign keys. So I guess the answer to your question is you need a specialized data type that only allows you to manipulate those tables with a handful of functions.
Heres the documentation on how the google bot rendering works. It's a modified chrome 41. https://developers.google.com/search/docs/guides/rendering 
As someone who's worked a bunch with AngularJS, but not much with Elm, this is really awesome! The big thing that's missing for me is to show the corresponding Elm code, just to make it really clear for someone who's coming from AngularJS. For example, when writing `&lt;ng-elm module="MyElmModule"&gt;&lt;/ng-elm&gt;`, then show what `MyElmModule` looks, even if it's completely trivial. A question that also arises for me is, how many times can I embed this? I guess every time I'm embedding an element like this, I have to make a new Elm app for it?
As you can see \[here\]([https://docs.angularjs.org/misc/version-support-status](https://docs.angularjs.org/misc/version-support-status)), the browsers supported by AngularJS are older than the ones supported by Elm. Since your target are AngularJS users they won't know that: you should add a table listing IE, Safari, Firefox, Opera and Chrome minimum version.
the code has lost indentation when copy/pasted into here, the indentation is as per the example in the docs within my code.
Good call, yo! Thanks. :)
You are _probably_ correct. I haven't tested it yet, but I'm pretty sure you can have any number of `ng-elm` on the page, each with its own application. I'll work on putting up a trivial Elm app for documancy.
same errors when compiling the code at [https://ellie-app.com/new](https://ellie-app.com/new),
A while ago, I wrote a [A vision for data interchange in Elm](https://gist.github.com/evancz/1c5f2cf34939336ecb79b97bb89d9da6) to try to get folks to think bigger than JSON for data interchange. So I was excited when I saw Dillon's talk exploring some of those ideas in practice. Can HTTP messages to GraphQL just take care of the data format themselves? How about ports to TypeScript? Exciting to see some nice working examples!
I met Dillon at an elm meetup and he's such a nice guy also, very friendly! He did there a shortened version of this talk and I was totally hooked up by the idea!
Good idea, thanks for linking to the repo! And here are the rest of the resources from the talk: bit.ly/typeswithoutborders
Something that might be important in this regard: https://discourse.elm-lang.org/t/how-to-unbind-elm-app/2202/8
I betcha garbage collection will eat up the unused apps. I'll have to verify this though.
If you look at the signature of `sortBy` in the docs: List.sortBy : (a -&gt; comparable) -&gt; List a -&gt; List a I often find it useful to think about the desired signature first and the implementation second. So if you want to write `sortNodes`, then it probably should have the signature sortNodes : (Node -&gt; comparable) -&gt; List Node -&gt; List Node This means that the implementation should be sortNodes cmp nodes = List.sortBy cmp nodes Huh? Is `sortNodes` the same as `sortBy`? Turns out you do not actually need a separate function `sortNodes` because `List.sortBy` is strictly more general than `sortNodes`, i.e., wherever you want to use `sortNodes`, you can replace it with `List.sortBy` and have the code still work as you'd expect.
The most important aspect of linting is consistency. Felt the benefits recently after many years working with the same team: after going over a module, I was convinced I had written it. Felt weird, I usually remember code from 5-7 years ago. Went over to git blame and found out it was another teammate. This reduces bias, we subconsciously reject stuff because it's not in written our way. Also, we can get accustomed to different styles (brackets at or below the line, ternary operators vs inline if-statements, etc). Obv there are exceptions where a given style is extremely convoluted and taxes the reader. I haven't read much elm code, but this does not look like one of those cases.
&gt; Thoughts? The example that you gave for `elm-format` has unnecessary new lines. [here is the same text formatted with elm-format](https://ellie-app.com/3JrfwMQXVSra1). It looks closer to your "most languages" example. I took the liberty of reformatting the long lines but you can leave them long if you don't like the extra vertical expansion. [Here is the same code with a few helper functions](https://ellie-app.com/3JrpYqYt26Ba1). 
You say that in the other style, one can just insert a new element anywhere and it works. But that is not true: If you insert in the last position, you will have to edit the previous last line as well to add the comma. Basically, you have the same problem, only once at the beginning of the list and once at the end – and with a syntax that does not allow trailing commas, you will always have this problem somewhere. &amp;#x200B; The advantages of Elm’s style (though other languages have used it before) is that it is easier to spot a missing comma or a duplicated \`\[\` when they are neatly stacked at the beginning of the line. Also, inserting something at the end of the list is quite common in my experience whereas inserting a new first element is rare. It makes sense to make the common case easy.
Ah, that's fair. I wrongly made the assumption that elm enforced the "breaking down" after the anchor's first param. I think that was because it came that with from my html-to-elm example :-) Thanks for fixing that up.
\&gt; You say that in the other style, one can just insert a new element anywhere and it works. But that is not true: If you insert in the last position, you will have to edit the previous last line as well to add the comma. You're right. I'm too used to working in Go :-).
Your ellie samples are not compiling unfortunately &amp;#x200B; &amp;#x200B;
Of course they are not compiling. The sample code provided depends on various custom types defined by the author. The code is however valid Elm code and the Ellie formatter is happy to properly format it. 
Glad I could help. 
&gt; The leading commas may seem weird at first, but you get used to them rather quickly. This format also allows you to add list items by only changing one line (if you're using Vim, go to "fifth" and press yyp, and you have a valid sixth element in the list—the same is not true in the JS list). I still think it's crummy. Modern javascript allows a trailing comma, which has the exact same property and does not have the weirdness of comma-first: var arr = [ 'first', 'second', 'third', 'fourth', 'fifth', ]; Furthermore it avoids the first-item being special-cased with a different start-symbol, so you can e.g. sort record fields alphabetically if that's what floats your boat. Sadly Evan seems to be uninterested in if not hostile to trailing commas.
Using trailing commas in the JS example would make the comparison more fair.
Cool i just folk 
I use vim and greatly prefer the way Elm formats it. I have binded macro keys to jump into the next [], to jump to typ Msg, to jump to update, etc. It's really efficient. Ever since I discovered mdgriffith/elm-ui however, Ive completely stopped using HTML
I like that style, althougn it was totally foreign to me when I started using Elm I find it kinda pretty. elm-format bothers me, however, because it uses too many spaces, but anyway, the advantages of not having to think about formatting when writing code are great.
The elm CLI tools were wrapped up into one binary for 0.19. In other words, \`elm-make\` is pre 0.19 and doesn't exist anymore. The library you're trying to use hasn't been updated for 0.19 so you're probably out of luck there.
I believe this gives you advice above and over elm format, so you would use both
Apologies, my mistake. 
So I tried this initially. But got stuck because I couldn't work out the type signature of the derived property `.name` ``` initialModel = { getSortKey = .name } type alias Model = { getSortKey: ??? } ``` The compiler tells me expects something like the following: ``` sortBy : { c | name : b } -&gt; b ``` Which doesn't seem to help. What should I be putting here? 
[Does this help?](https://ellie-app.com/3JFQ4cQ4RjKa1) You can check that the code compiles and roughly has the functions that you're looking for.
AngularJS apps seem like good candidates for migration to Elm. So I made this thing and have been testing it for about a week now. I hope somebody else gives it a try and lets me know how it goes. Happy angling!
You could also use an type like type Field = SubCount | Host | Name and pattern match on it, instead of pattern-matching on a String. That way, you avoid using a type variable as present in the other solution.
Thanks for the response. I didn't know about elm-analyze. Though I use elm-format, I really wanted that linter as it'd help me apply best practices.
I already use elm-format but it doesn't give advices on best practices like the linter does.
I have a seriously outdated ng app that I was just today thinking I need to investigate how to piecemeal out parts of it in Elm as a slow roll move over to Elm entirely. 
Anyways, the linter you're linking to hasn't been updated for a long time (not many users either, counting github stars).
Right. Isn't there any alternative? I bet the Elm community is pretty under-developed.
I was reading the documentation (https://guide.elm-lang.org/architecture/buttons.html) and found this: "One thing to notice is that our view function is producing a Html Msg value. This means that it is a chunk of HTML that can produce Msg values." I don't understand it technically. I mean, sure "Html Msg" means that it's an Html chunk which produces Msg values. But how can a type of a single stuff have 2 words? To better understand this, how can I create data types like "Html Msg" if I write custom functions?
The simple reason is because `5/0` in Javascript is `Infinity`. This result is defined by the [IEEE Standard for Floating-Point Arithmetic](https://en.wikipedia.org/wiki/IEEE_754#Exception_handling). Javascript models all numbers as double precision floats, and this is one of the consequences of that decision.
Good luck. Give it a try and let me know how it goes! I hope to do the same at work and get something small to production in a couple weeks.
As already said: elm-analyse is what you're searching for.
Well, if you have 5 Apples, and you want to know how many people you can feed if each person needs 2 Apples, the answer is 5/2 = 2.5 people. Similarly, if you have 5 Apples, and you want to know how many people you can feed if each person needs 0 Apples, the answer is 5/0 = Infinity people.
I mean, you would also feed 0 people because it is impossible to feed people with nothing. Hence, undefined. But the real reason, as other people have said, is by standard.
This video proves otherwise: https://www.youtube.com/watch?v=NKmGVE85GUU
If 5/0 = Infinity, then 5 = 0 * Infinity and 5 = 0 which isn't true.
Yeah that's true.
That makes sense, thank you :)
Let me see if it works for Elm .19
Above the first link you gave there are some examples of the colon (::) operator.
Like I said, I just found examples but no explanation. The example clearly shows that :: operator is used for concatenating items/lists into a list. But I just can't connect it with pattern matching, as in: case x of first::rest -&gt; ... _ -&gt; ... How is the :: operator breaking up the list 'x' into two parts, first and rest?. It was supposed to be explained in the documentation.
Ah right. The connection wasn't explained. The first link is older than the elm guide. Using the list cons operator (::) is something one would rarely find in production code, I guess thats why it was left out in a newer version of the guide (with it accidentally remaining in the pattern marching section). Please understand that its hard to balance completeness and understandability. Maybe it would make sense to have a syntax reference resource?
Elm 0.19 docs are not written properly yet. I have found the 0.18 docs to be more helpful for beginners. &amp;nbsp; I think Elm 0.18 is on elm-tutorial.com or something like that. Just google for it.
&gt; Using the list cons operator (::) is something one would rarely find in production code I don't agree with this, it's a very common pattern.
Oh I see, I'm pretty new to Elm. The language is beautiful, wish v0.19 was better documented. I will follow v0.18 for the time being.
I just wish they covered everything and explained everything in the docs. Moreover, the official guide has a pretty steep learning curve (which could have been much flatter). And I disagree that :: operator is rarely found in production code. I came across it in so many books, articles, etc from the first day of learning Elm. It's everywhere. I just wish the doc explained the syntax including the operators, instead of merely giving examples.
[File an issue in the docs](https://github.com/evancz/guide.elm-lang.org/issues)! A beginner's perspective is very valuable, especially someone who hasn't been exposed to ML style syntax (:: for instance). 
Okay, didn't assume you're on 0.19. elm-analyse is not yet updated for 0.19 (which was a major release that happened lately). Although you can be assured that it will be updated. In general: Compared to JS/TS linting will tackle minor issues or syntactic sugar anyway. Major issues are already tackled by the language and compiler itself. Side Note: Renaming the elm.json file is not a good idea. The structure has changed. Rules: https://stil4m.github.io/elm-analyse/#/messages Update to 0.19: https://github.com/stil4m/elm-analyse/issues/176
Yes, that's a really good point. And yes, I'm aware of package docs. Thanks :D
Zero times Infinity is not zero. 
This will help you understand list destructuring: https://gist.github.com/yang-wei/4f563fbf81ff843e8b1e
I thought about Hillel's post as I started reading your comment, and then noticed that you already linked it :) 
How so?
Here's a really good resource to learn more about Elm. I repeat: It's really good. [https://elmprogramming.com/pattern-matching.html](https://elmprogramming.com/pattern-matching.html)
It even explains the cons operators. I didn't see that.
Thanks a lot. Good news, I found some explanation of the "cons" operator. Now I know what it's called! https://package.elm-lang.org/packages/elm/core/latest/List#(::) Since it's a pretty common operator and hidden from newbies way out in the tiny corners of the package doc, even from search results, it should have been in the official guide. If I get some I'll file an issue on the github repository. I read the stuff in the link you're provided, it's pretty neat and well explained. Finally understood destructuring, I've guessed it but wasn't sure about it. Much better than Elm's official doc. Thanks again :D
What do you think of that rubik's cube algorithm in js [http://www.html5rubik.com/tutorial/](http://www.html5rubik.com/tutorial/)? Can we do that in Elm?
To piggy back on this issue, I feel like the VSCode extension is lacking when you have a large, enterprise level codebase. F12 (jumping to definition) only works sporadically, and sometimes even if it jumps to a symbol, it finds the wrong one Finding functions based on what's imported and exposed doesn't really work for us either
\&gt; 5 / 0 = Infinity isn't true either. It's mathematically undefined. But some people (who have though about it far more than I have) decided to pretend that it's true. So I'm just going to pretend that it's true too. But none of this has to do with Elm, unless you think it should be a runtime error instead.
Is there a large 0.19 open source project? I'd like see what compile times are like once you have a significant amount of code. Looks like all the large open source projects are 0.18.
That's impressive, thanks!
This is a really great news. Elm deserves more public attention. 
`innerHTML` is not allowed in 0.19 to prevent packages from accidentally (or intentionally) introducing an XSS vulnerability. If you really need to set the innerHTML, you can use a custom element or a port.
See this video here: https://youtu.be/J2z5uzqxJNU
[removed]
Like I said, division by zero is undefined.
I think the video explains very good, why we can say that a division by zero correlates to infinity. The speaker use in some parts of his talk the infinity symbol. I'd like this talk... 
Isn't there any written version? I'm curious though I don't have 46 minutes this morning :-)
I like the talk but the title is a little misleading and clickbaity
Not just a little
Agreed. It creates the opportunity for someone to read the headline and assume it's the full story, leading to the inadvertent spread of misinformation. I think the title should be reconsidered.
In my case I was looking for criticisms of elm, found the youtube talk that this podcast refers to (same title) and found out 10 mins in that "it cost me my job because it was so good that I had no bugs to fix". 
I find what you did really appealing but, IMHO, your are moving responsibilities from the update function into the view function. It can be good for small projects, but as a project grows it is better to have the view as simple as possible and the logic as localized as possible. When the same thing is done in many places I always prefer to move it up in to the chain and not deeper into nested function calls. I think that it is more Elm-like to have preload details associated to the route and not to the view itself but, in this case, it is such a thin line...
Is the Person data type used in any business logic elsewhere, or is it used purely in this view module? If it's only used in the view module, then you could think of Person as a sort of "view data type" which represents the data needed to render a view. Analogous to the View Object Pattern that is sometimes talked about in Object-Oriented MVC frameworks: [http://crushlovely.com/journal/7-patterns-to-refactor-javascript-applications-view-objects/](http://crushlovely.com/journal/7-patterns-to-refactor-javascript-applications-view-objects/). &amp;#x200B; If it's a view data type, then I'd say leave it defined in your view module. If it's used for other business logic, then I'd define it in a module that owns the responsibility for that business logic. But either way, I would recommend against defining it in Main, you're likely to get tangled up in a circular dependency. And I also recommend avoiding a Types.elm module, I find that it's always best to keep types in a module that deals with that type. Hope that helps!
How many different ways are you visualizing a person? - One? In this case, there is no _immediate_ downside to either placement. - Two? Are those two uses exactly the same? Are they going to stay the same forever? If they ever become different, sharing an implementation becomes a liability. When you change `Person.view` for one scenario, you are accidentally breaking the other scenario. I find that multiple visualizations always become different over time. When there are 3 or 4 or 5 uses, this only happens faster. By the time you have five different places where you are viewing a `Person`, the chances that they are all _exactly_ the same is pretty low. So my recommendation is to put this kind of code as close as possible to the usage. That makes it easy to specialize each case, and you do not have to worry about accidentally breaking some other part of your program you weren't thinking about. The `view` code is often pretty straight-forward, and writing a `div` in two places is not that big a deal for what it gets you. Now if you end up with five different times you are viewing a `Person`, perhaps you will notice that some aspects really are _exactly_ the same in all cases. In that scenario, it may be helpful to move that aspect into the `Person` module, but I have personally found those scenarios to be extremely rare.
Absolutely. I hope to share my own personal experience somewhere (a medium post perhaps?) as well as ongoing info about our use of Elm at my work in the not too distant future!
https://guide.elm-lang.org/webapps/modules.html https://guide.elm-lang.org/webapps/structure.html This will help you.
With 0.19 lacking websocket support is the only way forward to use ports?
Thanks for your reply. What about if we have a function listView : List ListItem -&gt; Html msg type alias ListItem = {leftText: String, rightText: String} And then we show different things in the list depending on what the user clicked on: studentListItems : List Student -&gt; List ListItem teacherListItems : List Teacher -&gt; List ListItem These functions that are producing data for my views to use are becoming complex and massive (~1000 lines including helper functions). Would it make sense to have a `ListItem.elm` module which contains `ListItem` and the functions producing `List ListItem`? 
Apologies, I've been more specific in another post. May I ask you the same question that I asked [here](https://www.reddit.com/r/elm/comments/9t9pc1/if_a_view_function_relates_to_a_specific_type_do/e8ypabh)? Thank you in advanced for any advice
It could make sense to have a `ListItem` module, but I probably would not put `studentListItems` or `teacherListItems` in there. Think of `ListItem` as a specific concept. If I had a `Student` module, I might have `Student.toListItem : Student -&gt; ListItem` in there. And if I had a `Teacher` module, I might have a `Teacher.toListItem` in there. The idea is that you are defining `ListItem` as a **data structure** for other people to use. They get the benefit of all the helper functions. But that does not mean that they become part of the data structure! The whole point of splitting it out is that it really is generic to more than one scenario. If it cannot be split from the specifics, then it is not a generic data structure! This is along the lines of the advice to "build modules around a single `type` or `type alias`" that you may see around. Does that help?
It does, thank you. At the moment there are about 60 "entity" types such as `Person`, `Address`, `Order` etc each with their own decoders. I tried splitting it into 60 small modules but that just became a big mess because I had files that needed to import all 60 modules (eg when I needed to get a bunch of all entities from the webservice in one go) so now I have them in one `API` module. I can either split out `Item` as a separate module and add `personToList`, `addressToList` etc in my `API` module or put `fromAddress` and `fromPerson` in the `Item` module. I'm tempted to go for the latter as I often need to pull data across many different entities to produce an `Item`.
What are the different "entities"? There may be something between 1 and 60 modules that is more helpful, but it's hard to say without knowing more about the actual problem. What are the entity types? How do they relate to each other?
Gosh, thank you for sharing this! I knew the old [style-elements](https://github.com/mdgriffith/style-elements) project, I'm glad it became this new library.
I don't know tables well enough to compare the elm-ui approach to them, but I think [this video](https://www.youtube.com/watch?v=Ie-gqwSHQr0) does a good job of showing what advantages elm-ui holds over contemporary HTML and CSS practices. Hopefully that can answer some of your questions :)
I'd love to get an elm solution for this, but one problem I had with this was a lack of CSS transitions. Given that attributes are set differently, I couldn't animate a snack bar moving up and down because the layout info was actually part of another parent. A solution may be to use subscriptions, but who knows. 
That's got nothing to do with elm: the server has to tell the client to not cache the image, clients have very little control over either the browser cache (lest you're using service workers *possibly*) let alone other intermediate caches, Configure the server to send `Cache-Control: no-store`. This tells intermediate caches and the client that they can not store the response locally and must always re-request it fully.
In a github issue the dev mentions that he's working on a transition solution. For now it is still possible with inline style tags but tricky
Tried it, the headers of the response show that the no-store and no-cache are here, but what's weird is that the request is never done again, just as before, even if I modify the url back and forth in the model. Thanks for your help, but I think I'll have to implement server-side an auto-deletion of images with incrementing names, this way because the url has never been seen before it will be requested :'(
You could try using a keyed node for that `img`. Maybe the issue is that Elm never updates the node (if you use the same attributes for the `img` that should be the default behavior). It would look like this: `Html.Keyed.node "div" [] [ ("some_string_that_changes", img [src "your_url"] [] ]`
Interesting, I can see elm updating the div (I included a counter that increment regularly), but no request for the image XD
Use old trick of adding a meaningless get parameter to the url of the image: /static/image.jpeg?ts=4673838283847 Where ts is the current timestamp in milliseconds. or whatever, just something that always changes. This invalodates cache, because there is no way to know how the server will deal with this parameter.
Using HTML tables for general layout [is bad](https://www.lifewire.com/dont-use-tables-for-layout-3468941), but there's nothing wrong with grid layouts in general.
I think so. It has been down for a long time now, and sadly PRs fixing the links links are ignored.
Stuff like this makes it feel like Elm is just dead.
My intent was to make that page unreachable from the rest of the site, but I guess there is a link to /examples somewhere. Where is that link? Separately, can you link the PR you mention? If someone moved the examples to Ellie that may work, but the overall goal was to make that go away until it can be redone in a different way.
[I think this is what you're looking for.](https://www.youtube.com/watch?v=dQw4w9WgXcQ)
What page is linking to the /examples page? My intent was to get rid of those links for now, and then revive it when the editor and examples had been refreshed to make sense for 0.19
Is there not a way to write node applications with elm? I know to make an electronjs app you can write a electron.js file to initialiize electron then serve html with elm imbedded, but can we skip this and make the entire application in elm?
This is quite useful at time: [http://eeue56.github.io/json-to-elm/](http://eeue56.github.io/json-to-elm/)
Is anyone using parcel ([https://parceljs.org/](https://parceljs.org/))? They claim in a blog post in a recent release that it now supports Elm out of the box, and I can get a log statement from my Elm code to show up in the console, but I don't get anything rendered to the DOM. I have my Elm code in a Main.elm file that looks like this: &amp;#x200B; `import Browser` `import Html exposing (..)` `import` [`Html.Events`](https://Html.Events) `exposing (onClick)` `import Debug exposing (log)` &amp;#x200B; `main =` `Debug.log "Hello from Elm!"` &amp;#x200B; `Browser.sandbox { init = init, update = update, view = view }` &amp;#x200B; `type alias Model = Int` &amp;#x200B; `init : Model` `init = 0` &amp;#x200B; `type Msg = Increment | Decrement` &amp;#x200B; `update : Msg -&gt; Model -&gt; Model` `update msg model =` `case msg of` `Increment -&gt; model + 1` `Decrement -&gt; model - 1` &amp;#x200B; `view : Model -&gt; Html Msg` `view model =` `div []` `[ button [ onClick Decrement ] [ text "-" ]` `, div [] [ text (String.fromInt model) ]` `, button [ onClick Increment ] [ text "-" ]` `]` &amp;#x200B; I don't know what parcel is doing behind the scenes, but I suspect that using Browser.sandbox is not quite what I want. I'm pretty new to Elm; is there a way to tell it to instead render to a specific DOM node or something? I'm thinking of something like React's `ReactDom.render(&lt;Blah /&gt;, document.getElementById('main')).`
HTML to Elm: https://mbylstra.github.io/html-to-elm/
Looking forward to listening this podcast! I hope one of the most common arguments I hear gets tackled as well: “But we have to make sure that future devs can ALSO maintain an Elm codebase, and where does one find those? &lt;insert more popular JS framework&gt; has a larger community and more support.”
That is an important topic! We didn't get into that unfortunately. We focused more on some strategies for experimenting with new technologies, and some of the reasons to try Elm. But I actually have a talk where I go into that question in detail, "Introducing Elm at a Fortune 10". I'm offering to give that or a couple of other talks for free to any teams that are considering Elm! Take a look at [http://incrementalelm.com/intro](http://incrementalelm.com/intro)
Two things explain it: **1)** because you can have a type and a type constructor with the same name. In Time.elm in the time package, there's this definition: `type Posix = Posix Int` The 'Posix' on the left is the type. The 'Posix' on the right is the type constructor. To make it more clear, you can change the name of the one on the right: `type Posix = Foo Int` So to make a value of type Posix, we could do `Foo 5`. **2)** In a module, you can expose a type but not its type constructor(s). In the time module they have this: `module Time exposing (Posix, &lt;other stuff&gt;)` That only exposes the type 'Posix'. To expose the type constructors too we'd need: `module Time exposing (Posix(..), &lt;other stuff&gt;)` Without the type constructors being exposed, you can't use them outside the module. So in the case where we changed the constructor name to Foo, you could declare a function that takes a Posix, but you couldn't use Foo. This is known as an 'opaque type', where you aren't allowed to create access the internals of the type outside of its module. You have to use the other functions in the module to create a Posix type, like `millisToPosix` or `now`.
How can you define an alias for Int or Dec when they don't exist? You're not trying to create an alias but a bona fide type. Try `type alias Msg = Inc | Dec`.
I think you meant `type Msg = Inc | Dec`
Yup, copy / paste error. Thanks.
type alias is only for records
No, they are only for giving a new way to reference (an ”alias”) existing types. Can be a record, but can also be for example ‘type alias Username = String’
I thought \`alias\` can be used with any types for annotations.
I am a newbie. Why the `alias` can't be used with union types? What is the reasoning if any?
Thanks for your time to elaborate this. Yes I am very new to ML. So, we can use alias when creating a record type. This is an exception, right? subscriptions$ npm run repl &gt; subscriptions@1.0.0 repl /Users/aruprakshit/elm-apps/subscriptions &gt; elm repl ---- Elm 0.19.0 ---------------------------------------------------------------- Read &lt;https://elm-lang.org/0.19.0/repl&gt; to learn more: exit, help, imports, etc. -------------------------------------------------------------------------------- &gt; type Msg = Inc | Dec &gt; Inc Inc : Msg &gt; type alias MsgAlias = Msg &gt; type alias Person = {name : String, age : Int} &gt; &amp;#x200B;
I definitely agree with this last statement, the pipeline library is what OP will want to use. 
[removed]
It can be used with any type *that exists*. What did you think you were aliasing?
Yes I agree with you. But with record type you can alias it while defining. I didn't know it is an exception case from the general rules.
The record type already exists. You aren’t using any custom type names in the alias definition like you do when you try `type alias A = B | C`
Thanks, this set me along the right path. The main piece I was missing was in my JavaScript where I was requiring my elm module, I needed to pull in Elm via my require and then use the info from the interop piece you linked. &amp;#x200B; TL;DR my main.js file looked like this: &amp;#x200B; &amp;#x200B; Now it looks like this: &amp;#x200B; const {Elm} = require('./Main.elm'); &amp;#x200B; Elm.Main.init({ node: document.getElementById('main') }); &amp;#x200B;
yeah, so as u/bmatt95 said, the record type already exists, as do the types of the fields inside it (otherwise, it wouldn't compile!). in the example above, you're telling the compiler: any record which consists only of a `name` field of type `String` and an `age` field of `Int` can be referred to as a `Person` type. it's not creating a brand new type, it's just giving a convenient name to an existing one. take a look at this ellie: https://ellie-app.com/3RLCP3JXyMNa1 the main thing to note is that the function `viewUsername` takes a `User` as its first argument, according to its type definition, but it can actually take any record which consists only of `username` as `String` and `age` as `Int` as its fields. that's because the type alias User is only telling the compiler "any record that conforms to this specification can be called `User`". 
You can use the Applicative application function,`andMap`, from `Json.Decode.Extra` to really help here. import Json.Decode as JD import Json.Decode.Extra as JD type alias GiphyData = { imageUrl : String , title : String } type alias Giphy = { data : GiphyData } dataDecoder : JD.Decoder GiphyData dataDecoder = JD.succeed (\imageUrl title -&gt; { imageUrl = imageUrl, title = title }) |&gt; JD.andMap (JD.field "imageUrl" JD.string) |&gt; JD.andMap (JD.field "title" JD.string) gifDecoder : JD.Decoder Giphy gifDecoder = JD.succeed Giphy |&gt; JD.andMap (JD.field "data" dataDecoder) There is no limit like there is with `map`.
Elm is very opinionated and part of that opinion is that nesting is often a hint at bad design. Therefore there is no way to update a nested record that would be more convenient. You can simply save it as a flat record. In bigger applications you could have a module only responsible for that part. Then again the model inside the module would be flat. 
Theres a Lens pattern inspired by haskell lens. You can build one for yourself or * https://package.elm-lang.org/packages/arturopala/elm-monocle/latest/ * https://package.elm-lang.org/packages/bChiquet/elm-accessors/latest/ But creating a flatten structure is a recommended way in Elm. 
There was some good discussion of nested record updates here: https://discourse.elm-lang.org/t/updating-nested-records-again/1488/10
One thing you can do if you want to keep the nesting is remove the oldGiphy binding and update the model with `{ model | giphy = { url = url, title = title }`.
You should probably look at why you need to update a deeply nested record. 
I disagree with some of the other commenters that having nested records is a sign of bad code. One example I would give is that I have a project that mostly interacts with Postgrest, where you can return nested data structures depending on foreign keys. To me, it wouldn’t be reasonable to split up those records into different parts of the model, and it would be perhaps dangerous because you’re more likely to mix up two pieces of data that aren’t related to one another. My way of solving this issue is that whenever I frequently have to update a record I write a function like this: ```elm mapRecords : (Record -&gt; Record) -&gt; Model -&gt; Model mapRecords f model = { model | record = f model.record } ``` Those types of functions can then be combined to set nested items: ``` model |&gt; mapItemWithID 10 (mapNestedRecords (mapSomeOtherRecord (setFlag True)) ``` This is, admittedly, boilerplate, but it’s the best way I’ve found to address this issue so far.
For updating the very next level, you can use record destructuring of parameters like this: update : Msg -&gt; Model -&gt; ( Model, Cmd Msg ) update msg ({ giphy } as model) = case msg of MorePlease -&gt; ( model , getRandomGif model.topic ) ChangeTopic topicName -&gt; ( { model | topic = topicName } , Cmd.none ) NewGif result -&gt; case result of Ok { url, title } -&gt; ( { model | giphy = { giphy | url = url, title = title } } , Cmd.none ) Err _ -&gt; ( model , Cmd.none ) If you find yourself wanting to update one more level deep, you might need to rethink you datastructures. 
I’d check out Filestack as a third party upload management solution (can still write to destinations you own). The interface is nice and it’s easily managed via ports
custom elements are hot
I haven't used 0.19 yet, but I'd put my money on ports.
`Html.App` has been replaced with the `Browser` module. https://package.elm-lang.org/packages/elm/browser/latest/Browser `Html.App.map` now lives in `Platform.Cmd` https://package.elm-lang.org/packages/elm/core/latest/Platform-Cmd#map
I used \`Html.map\`, and it worked. Thanks for your help.
Damn it's been that long already? I was super excited not being required to write my own foldp / deal with mailboxes and signals. Stuff makes so much more sense now.
If you frequently go through the pain of this boilerplate and can't avoid it, I suggest you look into [this]( https://package.elm-lang.org/packages/bChiquet/elm-accessors/latest/). It's not perfect, but at least it is composable. 
I would have a model type Model = View (List Row) | Edit (List Row) Row (List Row) | Updating (List Row) Row (List Row) Which makes it impossible for there to be two rows that are currently being edited and it allows you to easily determine if the user is currently editing a row. After the user edited a row she would press an Ok button after which the row should be disabled (Updating) and updated on the server. After the answer came from the server you go back to the View state and display the new situation that you got from the server.
I did this! It took me a while. I created a 2D Array package to store and update the grid: https://package.elm-lang.org/packages/tortus/elm-array-2d/latest/ Here are some answers to your questions: 1. Load entire grid at once as JSON. 2. Update each cell individually. 
Thank you for your answer and contribution. I was wondering why does it have to be 2D array instead of being 1D array of a sum type! let say having a Sum type type alias Employee = {empName : String emAge : Int ...} and lets say having an Array of Employee, wouldn't it be ok? I guess that way a field cannot updated a filed in a grid instead the whole record should be updated. I am sure you have a good reason to make 2D and actually I think I missed it so I am sharing my though. however, I have though about 1D array of sum type since I find it easier to serialize it to HTML than 2D Array.
Nice, that does look very useful. Thanks!
Yes, you're right you don't really need 2D array. Just a minor correction `records` are Product types not Sum types.
Patch the compiler. In [https://github.com/elm/compiler/blob/master/compiler/src/Elm/Package.hs](https://github.com/elm/compiler/blob/master/compiler/src/Elm/Package.hs) change the isKernel function to return True always.
I'm not sure exactly what you mean, but a grid (we are talking about a 2D "Excel" grid right?) can absolutely be a 1D array... Unless you want to delete rows or columns. Then you have to pull the whole thing apart to do that. Unless I am misunderstanding.
[A new answer just arrived](https://elm-lang.org/blog/working-with-files).
I should definitely start to studying elm..
If you would like to get more details on open positions CollegeVine has take a look on LinkedIn: [https://www.linkedin.com/jobs/search/?currentJobId=643857745&amp;f_C=3310978&amp;locationId=OTHERS.worldwide](https://www.linkedin.com/jobs/search/?currentJobId=643857745&amp;f_C=3310978&amp;locationId=OTHERS.worldwide) 
Well done!
Unfortunately, it's still XMLHttpRequest under the hood which means it's still incompatible with service workers. The API is much better though!
\`Elm.ModuleNameHere.init\` is just how the codegen for emitted JS happens to work. That method name has nothing to do with the Elm function \`init\`. Previously it was named \`embed\` or \`fullscreen\`. So, you could have &amp;#x200B; `main =` `Browser.sandbox` `{ init = foo` `, view = bar` `, update = baz` `}` &amp;#x200B; and \`Elm.ModuleNameHere.init\` would still be there.
Only fetch is.
I was fearing my day tomorrow as I knew I'd have to work with ports for the first time ever because of files. And now this is released, what a coincidence my god 
That's good to know! 
I will.. In fact, is it a reasonable to integrate elm right know in a production app? *(an intranet app not so complicated)* I have no prior knowledge of elm and a little regarding functionnal programming (mostly ruby with `map`\-like functions). Currently I'm using JavaScript/jQuery but making some changes becomes difficult despite I don't have anything fancy (mostly forms manipulation and validation). And I know that I might do some shitty code as long as it works (I'm not a front-end guy). So I planned to switch to something that would don't need a complete break down of the current code.. I think about StimulusJS (from the rails team - and it's a rails app btw). Do you know if it's elm is conceivable in my case?
Do you mean for writing a service worker in Elm, or responding to calls from `elm/http` with a service worker? For the latter you can intercept them in the `fetch` handler in the service worker.
`elm/http` does not use `fetch`.
Ah I see. Why the need to expose the `main` function then in this line `module Main exposing (main)` ?
While Elm is a great language, it isn't an easy one. Especially for someone with your background. On the question on if it's production ready, definitely! File upload was really the only thing left that's made me feel like Elm wasn't "complete", and now it has that as well. You mentioned integrating elm into already existing code (I think? you don't have the best English). While elm has great compatibility with other code through ports and flags, I believe that Elm is best used alone. 
So what is the reason of this error?
I'm aware of that, you can respond to calls from `elm/http` in the service worker though. Check out this little demo of it, the Elm app makes a `GET` request to `/ping`, and the service worker responds with `Pong` https://github.com/antew/elm-serviceworker-test
You can probably get quicker and more direct feedback in the Elm Slack https://elmlang.herokuapp.com/ Otherwise, I think it is worth trying the beginners thread in this subreddit as well.
&gt; Unfortunately, it's still XMLHttpRequest under the hood `fetch` does not support upload progress callbacks, so for file uploads it makes good sense to use XMLHttpRequest.
I asked about the error yesterday, and people couldn't answer it. Some said they also met the same error, don't know yet why. Not sure why it should go to beginners thread btw.
Because the Elm compiler will generate a Javascript object with an `init` function for every compiled Elm module that has a `main` function. If you didn't export that function then the Elm compiler wouldn't know where the entrypoint to your program is.
Ok that makes sense now. Thank you.
yes thanks :)
It looks like this is related to using `File`, which works in a web browser but not Node. Opened an issue: https://github.com/elm/core/issues/1002
as a semi-working example, I have created \[this\]([https://ellie-app.com/3Tyx6n7wpVga1](https://ellie-app.com/3Tyx6n7wpVga1)), a editable table using a List of product type.
I'd like to learn Elm, in fact this will be my third attempt. The first was a few years ago, my second was shortly after 0.19 came out (and 99% of online tutorials were broken). The third is now :) However I'd rather not deal with the web aspects for now - I just want to get the basics straight in my head. To that end, I'd like to do Advent of Code with Elm, which involves solving computer-science problems and often just generates some output on the screen or in a file. The first step, I think, is to get a command-line "Hello, World!" app working. However, I have been 100% unsuccessful. I've tried `run-elm` and `elm-run` but both seem to be out of date. I read something about `workers` and `ports` but it's way beyond my understanding as a beginner. So, I have a simple "Hello, World!" program that defines a function that just returns a simple string. How do I go about writing a program that calls this function and prints the result to the console? I feel once I can get this basic step mastered I can then move on to learning more about the language.
Myself is a Rails developer for long time and still using it. If you are on Rails 5, you can easily use Elm. I used React/Elm both. \&gt; Currently I'm using JavaScript/jQuery but making some changes becomes difficult despite I don't have anything fancy (mostly forms manipulation and validation). Yeah I get you in this case. :) 
I know that since 5.1 (webpack integration) it's way easier to do "modern" javascript stuff with rails... But besides elm integration itself, I will mostly need to change all my views since, from what I know, elm do the views generation by itself... Stimulus, is good in the way that it's intended "for the HTML you already have".. Can you confirm that when using something like elm (or react or angular), it's like having rails in API mode?
My Rails app is not an SPA. I used Elm/React some part of the pages. And for those pages, I send JSON response if I had to use an existing controller actions which renders HTML for html requests.
a blog post from the future
thank you! &lt;3
Stop worrying and follow this guide! Beginners are first class citizens in Elm communities. 
I lead a very small development team and I was in the exact same position as you two years ago. We were using jQuery and getting fed up with how bug-prone making changes to it was. After considering on React and Vue, we settled on Elm due to its large number of benefits. We have since written 50,000 lines of Elm code. Last year I wrote a post about our experience using Elm here: https://charukiewi.cz/posts/elm/
u/kkweon I completed the guide. Wrote some program, and I am good so far. But I am now looking for an elm spa example to see how things are working together, written in multiple files etc. Do you have any links you can point? I checked the [elm-spa-example](https://github.com/rtfeldman/elm-spa-example) from the official guide, but it it too big to follow for me.
https://github.com/sporto/elm-tutorial-app Try this
I started watching a ‘making Tetris in elm’ YouTube. I think they must have been using elm 0.16 because their code was untranslatable to 0.19. I just want to draw a blue rectangle.
You can ask for help on Elm Slack https://elmlang.herokuapp.com/ check the beginner channel it helped a lot to get started awesome people! 
Did anyone try out https://github.com/lukewestby/elm-http-builder any thoughts on this package? 
I've spent the last six years of my life fighting with CSS, I can't wait for this workflow to become a standard (be it elm-ui or whatever).
[removed]
Thanks for that. Great reply! I did (before I read your reply) find this: https://github.com/joakin/elm-canvas Thing is... I don't fully understand the pros/cons of each approach. I'm not wanting to recreate Tetris because I like Tetris, I'm trying to learn the patterns and best practise that I'd need to apply to 'proper' projects. If I want to draw blue rectangles, should I use SVG or should I use something else? Can I rely on SVG / SVG manipulation to work nicely on most devices, or would something else work better, be less taxing to the client (i.e. battery life on mobile / laptop)?
I cannot really answer you the mobile questions but I think usually you'll want a canvas for drawing/animation stuff as it is AFAIK much more performant in comparison to SVG rendering (especially if the SVG tree get's very large) For Tetris this does not matter (it's really not much going on) But that's not really Elm specific and I'm sadly no expert on these things (I only do little games for my own fun) Maybe someone with deeper knowledge on this matter could give some hints
Just an FYI: the `http` package has just been updated to 2.0.0 with a slightly different API, and `elm-http-builder` relies on the earlier version. I think it could still work with the new API but would need to be updated. 
I've been having trouble with changing an element's background on hover event. Any ideas how to do this? I don't want to have to store the hover state in the model for each of my text elements which have can be hovered on.
Have you tried adding `mouseOver [ Element.Background.color someColor ]` to the attributes?
oh wow thanks! I was looking at Element.Events, didn't think to check for mouseOver on Elements in the documentation
This is really good info! I dabbled with elm a while ago, then got into typescript. Now I’m coming back with an understanding of type systems. This answered some questions that have been in the background while learning!
Thank you... I'll read this article later today.. I just saw the title where you're talking about production... Do you advise to switch to elm for a production application? Also maybe you'll tell it in the article, but can you tell me real quick some of the major benefits you've seen in using elm?
That's very curious. On one hand elm devs are very loyal, it's getting more visible but it's losing in popularity. Is it too limited? Not evolving quickly enough? Not backed by a sufficiently large company? Or are deva stuck with prior choices like react/redoux and are lacking opportunities or arguments to adopt it more?
Think about this: the survey was done before 0.19, in that time frame where a LOT of devs were feeling disappointed by delays and roadmaps. Most of the new entries were puzzled by the missing updates on the official website. &amp;#x200B; I'm pretty sure that the same questions asked today would give a different outcome.
A lot of Elm aficionados were disappointed by 0.19 though; the \_heard and recommend\_ might drop significantly.
Might be a case of worse-is-better in action (https://www.jwz.org/doc/worse-is-better.html). Sadly seems to be a common theme that it is never the best solution is the one being used in the industry.
My theory is that there are two big issues Reason solves. The first is on the company side there is a fear of finding new users and the language being abandoned. On the developer side it has a scary foreign syntax and learning curve. We see this being echoed in the survey. One thing reasonML pushes is it's familiar syntax. I think this is Reason's big leg up against Elm on the design side since they both are designed for Javascript users. A familiar syntax makes it easier to onboard new users. These users can also more easily transfer their knowledge from Javascript. People without experience of ReasonML can also look at code samples and understand what is going on. This makes ReasonML perceived as easier to learn thus making it a more appealing choice for developers. Then the fact that it is being backed by a big company gives the impression that it won't be abandoned anytime soon. So it manages to solve two of the big concerns that Elm suffers from, both from a business perspective and developer perspective. It does this while still providing a lot of the same perceived benefits. However in my experience, a grad student who has previously worked in React can get somewhat productive in Elm within a week. So the learning curve is not that bad for Elm with mentoring. People report that they dislike the small ecosystem. I think however a small ecosystem is okay since the libraries are of much higher quality. Small things like libraries being sold on merit not by marketing makes them also easier to learn and quicker to get started with. Since Elm is pure it also lowers the chances that some random, low popularity library tries to steal information from your site so you can feel a lot more relaxed importing it. NPM ecosystem is a security nightmare in comparison. It is very hard to check that the code doesn't do anything shady and everyone just imports dependencies for everything. Reason doesn't solve this issue, but for a lot of people this doesn't affect them since they don't see it as a risk. They see it as a feature rather. I also think it's a fallacy to trust big businesses more with frameworks/languages. For example Angular 1 or Facebook's Parse. So even if Reason can be perceived as a better choice, I don't think it is. Sadly perception is all that matters for adoption.
My theory why is that there are two big issues Reason solves that exist in Elm. The first is on the company side there is a fear of finding new users and the language being abandoned. On the developer side it has a scary foreign syntax and learning curve. We see this being echoed in the survey. One thing reasonML pushes is it's familiar syntax. I think this is Reason's big leg up against Elm on the design side since they both are designed for Javascript users. A familiar syntax makes it easier to onboard new users. These users can also more easily transfer their knowledge from Javascript. People without experience of ReasonML can also look at code samples and understand what is going on. This makes ReasonML perceived as easier to learn thus making it a more appealing choice for developers. Then the fact that it is being backed by a big company gives the impression that it won't be abandoned anytime soon. So it manages to solve two of the big concerns that Elm suffers from, both from a business perspective and developer perspective. It does this while still providing a lot of the same perceived benefits. 
I think you can use inFront for this purpose. https://package.elm-lang.org/packages/mdgriffith/elm-ui/latest/Element#inFront I'm not entirely sure though as I haven't used it myself.
I wonder why people said that elm has a "clumsy programming style"?
I'm getting the error message: I cannot find module 'Browser'. Module 'Main' is trying to import it. My module appears to work correct, but the error is prevent elm-live from running. This is the first few lines of my module: module Main exposing (Model, Msg(..), init, main, update, view) import Browser import Html exposing (..) ... What am I doing wrong?
&gt; Do you advise to switch to elm for a production application? We use Elm in production and are very satisfied with it. I would only advise a switch after understanding the pros and cons. &gt; can you tell me real quick some of the major benefits you've seen in using elm Read the headings in the "Reflecting on Elm" section.
[removed]
Thanks! It's always good to hear positive feedback so I know that I'm on the right track. 
Nice library, will really help with automating boring ui clicking and it feels easy to get the hang of. 
A lot? Which percentage of total aficionados?
&gt;korban.net/posts/... I don't think so. Many developers already in love with Elm were puzzled and disappointed by the apparent lack of communication and life *before 0.19*. I include myself in that group. Nonetheless, how can anyone be disappointed by 0.19 itself? It's probably the only frontend release which does **exactly** what was said it would have done, and does it well.
Some people think there is too much boilerplate, eg when breaking down the `update` function and messages by page. 
What do you mean “by page”?
What do you mean “by page”?
So this is dependent on the context. Generally for view functions, you don't want to declare any nested functions since they will likely (unless using lazy) be rebuilt on every frame. For non functions if it makes your code easier to read, do it! For update functions it generally doesn't matter and nesting inner is ok sometimes uness it's nesting within a nested function on a computation such as screen frames.
&gt; Generally for view functions, you don't want to declare any nested functions since they will likely (unless using lazy) be rebuilt on every frame. For non functions if it makes your code easier to read, do it! Oh I do that a bunch, I wonder if that will fix the performance problems iv been having
Let's look at this example code: ```elm module Main exposing (view1, view2) import Html exposing (Html) type alias Model = String expensiveComputation : Int -&gt; String expensiveComputation n = if n &lt;= 0 then "banana" else expensiveComputation (n-1) view1 : Model -&gt; Html a view1 model = let x = expensiveComputation 1000000000 in Html.text (x ++ " " ++ model) view2 : Model -&gt; Html a view2 = let x = expensiveComputation 1000000000 in \model -&gt; Html.text (x ++ " " ++ model) main : Html a main = if 2 + 2 == 4 then Html.div [] [ view1 "pie" , view1 "pie" , view1 "pie" ] else Html.div [] [ view2 "pie" , view2 "pie" , view2 "pie" ] ``` The function `view1` compiles to this Javascript code: ```javascript var author$project$Main$view1 = function (model) { var x = author$project$Main$expensiveComputation(1000000000); return elm$html$Html$text(x + (' ' + model)); }; ``` As you can see, the variable `x` is recalculated every time `view1` is called. The function `view2` compiles to this javascript code: ```javascript var author$project$Main$view2 = function () { var x = author$project$Main$expensiveComputation(1000000000); return function (model) { return elm$html$Html$text(x + (' ' + model)); }; }(); ``` Here, the variable `x` is only calculated once, right when `view2` is defined. So `view1` is slower than `view2`, if called more than once. You can also see this in the original Elm code. In `view1`, `x` is defined when `model` is already in scope. So Elm waits to be passed a `model`, and then calculates `x`. In `view2`, `x` is defined before `model` is in scope, so it can be evaluated immediately. 
Woah, my mistake, you're totally correct! I'll mark my comment to make sure the bad information isn't spread around. &amp;#x200B; Maybe the compiler should check for let blocks not relying on params, and instead computing them and referencing them. Maybe synatx using $view1$innerName &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
Oh wow took me a while to realize view2 gets calculated when its defined right, then returns a function taking model. I was thinking like it is in haskell where its all lazy based on what little i know about haskell.
What does it do?
I like the idea of functions that are only used by one other being defined in that function. The thing I don't like is that the inner functions defined in the outer function get access to the arguments passed to the outer function. I like having to pass on all the required arguments to the function explicitly. If you had one function with a function defined in it and that function had another function defined in it, the most inner function would have access to the outer functions scopes. So you don't know immediately where variables are coming from by looking at the signature.
I'm no expert, but I like to scope functions in let..in blocks if they're small. Once a function gets big and complex I extract it.
 git: 'submodules' is not a git command. See 'git --help'.
Competes with webpack, for sanity. I haven't tried it yet, or pnpm which this article also mentions, but I like learning that these competing technologies exist. :)
You could try [https://github.com/Skinney/elm-git-install](https://github.com/Skinney/elm-git-install) It does have one limitation though. An elm application (as in, a elm project with a application elm.json file) can rely on elm packages (elm project with package elm.json file) in a private git repo, but package-&gt;package does not work.
multiple `source-directories` in elm.json
yep this is my current solution, although that means you have no version control. update your dependency and all projects that use it can break.
I feel the need to question some of the terminology used here. IMO the way that the author models radio buttons and checkboxes in the article is good, but I think it's at least a bit misleading to call it ad hoc polymorphism. If that's what this is, then pretty much every use of sum types is ad hoc polymorphism, and from my experience that's not how people use the term (at least in the context of functional programming languages). In order to be classified as ad hoc polymorphism, I would expect that another piece of code should have a way of supplying its own arbitrary type along with a some way of using that type in the same way as radio buttons and checkboxes. In the code in the article, meanwhile, you need to alter the definition of `Specification` and all the functions that operate on it in order to add new types of controls. To be clear, I don't think the problem of rendering a dynamic list of radio buttons and checkboxes needs the extensibility of ad hoc polymorphism at all. And I don't think you'd even be able to do it with type classes alone, since then each control would actually be a different type and you wouldn't be able to have a heterogenous list of them. Also I wouldn't characterise this as an "abuse" of Elm's type system as the author does – this is exactly the kind of thing that sum types are great for! And the fact that the `label` is shared by being part of the `Control` wrapper is just good data modelling :)
I think this should work: import Dict exposing (Dict) import Json.Encode exposing (dict, string) import Http exposing (jsonBody) stringDict: Dict String String -&gt; Json.Encode.Value stringDict = dict identity string stringDictsByInt : Dict Int (Dict String String) -&gt; Json.Encode.Value stringDictsByInt = dict String.fromInt stringDict dictBody : Dict Int (Dict String String) -&gt; Http.Body dictBody data = jsonBody (stringDictsByInt data) Then you would pass `dictBody body` as the value of the `body` field.
Monorepos 4 lyfe
Something like this: type Page = Signup Signup.Model | Login Login.Model | Main Main.Model type alias Model = { appState : AppState , page : Page } type Msg = Signup Signup.Msg | Login Login.Msg | Main Main.Msg And then you have `Signup`, `Login` and `Main` modules, each with a set of messages, a model and an `update` function. Then you put all that stuff together in the main `update` function. 
Thanks mate! No wondering I was confused by the compiler errors, after trying your solution i noticed i was still using elm/http 1.0.0...
This looks quite promising
What language(s) do you already know? JS is pretty easy to pick up since it shares a lot with other common languages.
Yes.
ha I already did it in typed-collections too. Faster than converting everything to string!
Of the general languages I only know Java. I'm still a student, and thats what we use at my uni mainly in undergrad courses. Thought learning some functional programming on my own would be a nice side project.
Honestly you don't need JavaScript or CSS knowledge at all to try Elm out and produce some basic apps. You will find yourself at the mercy of the way html is laid out and styled, and if your question is really "can I make an amazing looking website without knowing html, CSS and JavaScript" then is answer "no". But if your aim is to get a taste of a functional language and make something you can play with and show people then this is the ideal place to start.
I currently use this 🙂
Do not start with Haskell. Elm is a much gentler introduction to functional programming. Relevant XKCD below. Sorry I couldn't find the original. https://cdn-images-1.medium.com/max/1600/1*d8TITW3skawGd-ioyHh2nQ.png
Could you share a demo repo? Yarn says the server is running, but there is no "Built in 456ms." message. http://localhost:1234/ keeps loading with a white page. I'm obviously missing a step? build is showing "Unknown Elm compiler option: optimize".
Will this hack will be consistent among all future elm versions? I believe it is better to use explicit rather than implicit optimization. ``` module Main exposing (view1, view2) import Html exposing (Html) type alias Model = String expensiveComputation : Int -&gt; String expensiveComputation n = if n &lt;= 0 then "banana" else expensiveComputation (n-1) view3 : Model -&gt; String -&gt; Html a view3 model x = Html.text (x ++ " " ++ model) main : Html a main = let x = expensiveComputation 1000000000 in Html.div [] [ view3 "pie" x , view3 "pie" x , view3 "pie" x ] ```
Does your application otherwise compile using `elm make src/Main.elm`?
If you’re pretty comfortable with programming generally, I think it’s worth giving it a try. It’s a neat idea to two birds one stone a functional language and front end web development. You’ll need to do a lot of referencing something like mdn for html, css, and js dom manipulation stuff. Then you’ll need to translate it yourself. There is a lot of good documentation for Elm-UI but some familiarity with JavaScript in the browser is assumed (it would be very hard not to I think). There are a lot of good elm tutorials you could follow to get going with it if you’re mostly doing it for the sake of learning that should be plenty. If it gets too frustrating, consider checking out a modern mainstream JavaScript front end framework (react, vue, angular are all very popular). The sheer number of people using those libraries means tons of resources to make learning easier. JavaScript isn’t nearly as nice a language as elm but modern JavaScript is relatively sane. Once you have a little more experience there check out elm again because it is super tight. If you want to looks at Haskell, this book is awesome (http://haskellbook.com/). Hope that’s helpful. 
https://xkcd.com/435/
I was inspired by the image on Wikipedia under Trigonometry. In fact, I even appropriated its color scheme. 
In terminal run `which elm` (if you have elm installed globally), and put the output of that into `elm.compiler`. Ex: ```bash $ which elm /home/user/.nvm/versions/node/v10.9.0/bin/elm ``` `"elm.compiler": "/home/user/.nvm/versions/node/v10.9.0/bin/elm"`
elm-make is Elm 0.18 so something is fishy, this only work with Elm 0.19
Nice work! Are you using `elm/svg` directly? Whatever the case, it turned out nicely!
The Fourier transform is another source of fun visualizations! [wiki gif](https://upload.wikimedia.org/wikipedia/commons/2/2b/Fourier_series_and_transform.gif) Unrelated but there’s a minor visual bug at π/2 and 3π/2 [pic](https://i.imgur.com/fwHMZLz.jpg)
are you using windows? because under windows you need "elm.compiler": ".\\frontend\\node_modules\\.bin\\elm", "elm.formatCommand": ".\\frontend\\node_modules\\.bin\\elm-format" AFAIK the `...\\elm make` does not work right now (the space in there is not allowed` but this should be no issue as this is only used with elm-0.18 --- What's a bit strange is the `./frontend/`in there - usually you open code in the folder where the `elm.json` is located and in 0.19 this is setup with `./src` where your `.elm` files live. Personally I add a `packages.json` there too where I install elm etc `npm install elm elm-format --save-dev` In this case you get folders like ./node_modules/.bin/elm and this is what the Plugin recommends on the web-site/info too this always worked for me (you can try this by opening a terminal in VS.code and just enter `./node_modules/.bin/elm-format --version`) 
Would love to hear how you did that! I have to do that kind of crap too, and I'm never totally happy with it.
I did it in React. Essentially is consisted if these parts: Pure widgets, that received the options, title, description and icon(s). A form definition consisting of ‘steps’. Each step provides fixed content (title, description,...) and four simple functions, that all received the full state of the form: getWidget (to decide what widget to use) getOptions (most of the widgets took a list of options, sometime radio selects, sometimes multiselect) isEnabled (whether the step should be visible or not) validate (whether the state of the current step is valid) So essentially it wasn’t that hard and could be done really similar in Elm.
Have you tried reading the post? Right near the start, I say: "Keep in mind that I can only scratch the surface of the functionality offered by this package in this post". I'm highlighting a package which allows you to build complex forms. 
Yeah, my thoughts too. I tried to build an advanced configurator in Elm and really struggled with creating wizards, dynamic fields, and managing all kinds of state. I just threw in the towel and just created it in react with formik and a few other libs. I really woud love to build our backoffice app in Elm someday.
What functionality do you think is missing from `composable-form`? I'd be interested to understand.
The irony of a validation guide / article that refuses to validate my email when I ask for the sample chapter from your book. '+' is definitely allowed before the '@' ;)
Glad it worked out in the end.
A custom element is probably the easiest approach. In case you go down this route but aren't familiar with custom elements, I wrote [an intro to custom elements for Elm developers](https://korban.net/posts/elm/2018-09-17-introduction-custom-elements-shadow-dom).
There are some things that come to my mind: https://github.com/ohanhi/elm-taco/ https://package.elm-lang.org/packages/arowM/elm-html-with-context/latest/ https://package.elm-lang.org/packages/Punie/elm-reader/latest/ I would personally start without abstracting it. E. g. just have a `Context` record and pass it as one additional argument, whenever necessary.
IMO there is nothing similar - I use the nice record-type system for similar effects basically you stick with a flat main-model and use things like type alias ComponentModel m = { m | componentValue : whatever } and use this for your components `update` etc. you can then just pass the main-model value to the component and it can just use the record-update syntax to change values
We pass a \`Context\` record to most views and update functions as the first argument. This record has attributes like the current user, current location, etc.
Elm only works in the Browser at the moment and will continue to work only in the browser for the foreseeable future. To move to another context (e.g. console apps or backend), the only viable way is through a lot of research and API design. The person or team that might attempt this would have to build a lot of trust with the community, have a lot of patience (this most likely would take a lot of time) and then produce a review of the current approaches in the domain. Based on the research, an analysis of a possible API would begin to emerge. The API would then go through a series of iterations with the input of the community and only at the very end the actual implementation would come into play. [Building Trust: What Has Worked](https://discourse.elm-lang.org/t/building-trust-what-has-worked/975) post from discourse has more information about what has worked historically. 
I think it would be possible but it's unlikely that this will happen anytime soon (it would surely involve native modules which are not open to the wider community any more) But maybe you'll like PureScript too - it's very similar to Elm and it's already possible to transpile/run with node there. Also the JS interop is quite easy so you can do anything node can. Don't know if node.js can deal with ncurses in any way and if this is your goal then maybe you can move even further away from Elm and have a look at Ocaml, Haskell or even F# (all in the same language/paradigm family)
You can model all those fields as a dictionary, and then just have one message to set any of them based on the key.
I working on a prototype a while ago that integrated elm with blessed the Curses like js lib. It was doable but seemed a bit hacky, though I did learn a lot about how elm integrates with the host browser :)
Thanks for the link. This is indeed how I believe real software should be developed. Concerning my question, it was very speculative and of course not a work plan. Or to use the language of the article, I was just mentioning an existing problem: the sad state of GUI development in the terminal. &amp;#x200B;
I don't believe there is, unless there is a way to run and interop with arbitrary JavaScript in Python
I tried to put my money where my mouth is: [https://github.com/Janiczek/blessed-elm](https://github.com/Janiczek/blessed-elm) Works reasonably well (although I can't come to terms with how the Blessed positioning works... lot of trial and error): [https://imgur.com/a/G4zmMP0](https://imgur.com/a/G4zmMP0)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/WE63xEq.gifv** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20eao42dn) 
You could, in theory, use something like [pyv8](https://code.google.com/archive/p/pyv8/) to run some JS code so, you might be able to run Elm code compiled to JS. :) 
You can set up an HTTP API in Python with something like Flask or Django, and have it communicate with your Elm app using JSON. But that's not using anything unique to Python, so maybe I'm misunderstanding your question.
Here's an example of using the terminal with Elm. Sorry, it's from 0.17 I think. https://github.com/Pilatch/elm-port-program-examples/tree/master/input-mangler
This is amazing, next time I need a simple text GUI, I will give it a try.
https://github.com/ElmCast/elm-vim/blob/master/README.md Pretty much this is all you need. It does what you said. Elm Cast has been doing great at managing these plug-ins. 
My config: https://github.com/andys8/dotfiles A better one with ctags: https://github.com/augustin82/vim
To me the design of forms and design of the domain model are things that go together. Not to say they are the same thing -- not at all -- but it's hard to think about the "best way" to do one without thinking about the other. In most cases there are constraints that the forms need to have to guide the user, save the users' time, prevent illegal states and bad data, etc. Implementation is also guided by these constraints - in other words, by the domain logic. There is no generic answer based on the number of forms in abstract (which in fact is unknown at the outset, because some forms may be best modelled as variants of a single form, but you won't know that until you pin down the domain model). 
I use Elm-vim. Sadly autocompletion isn't working since 1.19. There's an autocompletion engine in the works that'll hopefully fix that. 
I think this applies when the forms are quite intricate and each have their own UI. However I have eg 60 forms that all kind of look the same: labels on the left and text boxes/date pickers/some other pre defined controls on the right. I’ve come up with a solution where a “form” is implemented as a single view function. You give the view a config of what controls to display and a `(List FromValue -&gt; Msg)`. There’s less type safety but at least I don’t need 300 Msgs and Update cases
Here is my neovim configuration. Works well for me : [https://github.com/mpizenberg/dotfiles/blob/master/nvim/.config/nvim/init.vim](https://github.com/mpizenberg/dotfiles/blob/master/nvim/.config/nvim/init.vim)
also worth checking out the elmlang slack. there is a vim and elm-language-server channel, that both have pretty frequent chat activity.
Can you post more of your code? The official guide shows a basic example of parsing a query parameter using \`Url.Parser.Query\`. See "Example 2": [https://guide.elm-lang.org/webapps/url\_parsing.html](https://guide.elm-lang.org/webapps/url_parsing.html)
Hey elm folk, I have a beginner question for the pipe operator: List.member has the type `a -&gt; List a -&gt; Bool` . Now when i partially apply this function with `2` for example: `List.member 2` it will have the type `List Int -&gt; Bool`. And therefore i can use the pipe operator to stick everything together: `[1 2 3] |&gt; List.member 2` &amp;#x200B; Now I thought the same would be true for `List.::` which has the type `a -&gt; List a -&gt; List a` But when i do: `[1 2 3] |&gt; List.:: 2` &amp;#x200B; It doesn't seem to work. Is `List.::` specially treated by the compiler, or do i miss something else? Thank you for your time spending on reddit :D Best wishes, degsky 
[removed]
The cons operator (`::`) is indeed treated differently to `List.member` etc., for a couple of related reasons. Firstly, you don't prepend `List` to it, so for example this would be valid: 5 :: [4,3,2,1] (which generates the list `[5,4,3,2,1]` Secondly, by default it is an _infix function_, meaning it is placed between its two operands, just like `1 + 2`. If you want to convert an infix function into a prefix function (like `List.member`), you place it in brackets. This is what you would do if you wish to use it with a pipe as in your example: [1,2,3] |&gt; (::) 2 The prefix version of operators are most useful when using so-called 'point-free' style. For example, when folding: List.foldl (+) 0 [1,2,3] which is a more concise way of expressing List.foldl (\n accumulator -&gt; accumulator + n ) 0 [1,2,3] 
I like the idea, but why should colour be part of the core elm language? I think it’s specific to UI, and anything UI related (such as the Html module) has been moved out of core to keep core more, we’ll, core. That way things like [Platform.worker](https://package.elm-lang.org/packages/elm/core/latest/Platform#worker) can use Elm and not need to reference any UI libraries 
It shouldn't be. RGBA, HSL, RGB etc etc are all used by everyone. Forcing a sub section of color representation makes no sense.
Thank you very much, that makes totally sense :D
When I deal with colors I like to do proper color manipulation. You can't operate over sRGB colorspace without creating color aberreation. Color is far too complex to just come up with a "standard color class". Where you say RGB I see a subrange of the visible colors gamut projected on the sRGB curve. Then, I totally agree with @Kurren123.
I can't really see the benefit of color types being opaque. If they were records instead, and they had field names \`red, blue, green, alpha\`, the same color values could be passed to different library functions, without the need for conversion, as long as they all used records with these field names. In the case of color manipulation, you would have direct access to the fields as well, instead of having to go through extraction functions.
I probably didn't get my point across well, but the way I see it: * Most of the time color is for the web, which I understand is 8 bits per primary color. So 0-255, 0-255, 0-255 plus Alpha * It would be good to define this somewhere "official". It doesn't have to be Core, that was just one idea but it could be somewhere else. * Each library uses that color type if targeting the web (e.g. a web attribute) * If you need more specialist color support this wouldn't be for that. I am not asking anyone to change anything and I appreciate there are 100's of things people want in Elm. This is more to put out there a beginner opinion (the Elm ethos seems to be beginner friendliness) 
I like the idea of this, and this is what mdgriffith/elm-style-animation does with it's own color type. Important that the types and units match up though!
Very cool
Why are metrics like these relevant to you? Elm aims to have a small but high quality package ecosystem. A lot of time is put in designing APIs and because of this, there are infrequent updates to the core packages. I remember someone from the core team saying that they aim at about maybe 50 high quality packages that cover most of the scenarios rather than have a proliferation of packages that overlap significantly in functionality. 
Awesome work!
Then, activity in each of those 50 packages would help. I love Elm, but I don't want to leave my friends with a community that doesn't grow, especially ones that aren't language nerds or are spread too thin to focus on any single part of their tech stack. I don't want them to reach a point where they encounter some critical integration they need and they lose weeks/months building it or paying someone to build it for them. I guess another way to face that would be to provide people with a concise list of exactly what Elm community has covered already.
I am envious of your knowledge of functional programming. Well done. This is impressive.
"I don't want them to reach a point where they encounter some critical integration they need and they lose weeks/months building it or paying someone to build it for them." - this is going to depend heavily on what they build. Unlike NPM or Maven etc. there isn't a package for everything conceivable yet and there may never be. You do have to "roll your own" a lot more on Elm, or use ports to integrate with existing libraries if possible. There is also a way to integrate existing UI components into the VDOM I saw posted here a while back but can't remember the name. I'd say don't recommend or dis-recommend Elm, but tell them the balanced overview of Elm. You get a simple to use, robust, intuitive and strong type system and a great pattern (TEA) to build great web apps along with solid libraries. On the downside you give larger filesizes than vanilla JS and you may not have everything you need as a library. You also need to get your head around pure functional programming - i.e. no for loops or escape hatches. Elm is not for every situation, but it's a good thing to learn and have as a choice, It is also good to learn for the patterns, even if you translate those to a JS / React / Purescript project. &amp;#x200B;
Thanks for the extended tip. I'm familiar with the general pros and cons and present them usually to other technologists. I worked in a group where we adopted Elm in production in early 2017. The organizations my friends work in are really cash strapped and they are working on issues that can have a big social impact. I don't feel comfortable risking their missions on Elm yet, although I can easily see a typical software shop using Elm and dealing with "roll your own" problems when they come up.
No one got fired for choosing ELM
The game is cool! :) Brings back memories... The edit button doesn't work for me though :( the edit mode just flickers and immediately turns back to the "game mode"
Yea you are right! the edit button refreshes the current page. But if you have the "startLevel" parameter in the url then it just restarts the game. I will fix this now!
Oke it is fixed! It could take a "force refresh the page" before the change is visible (you know browser cache) Thanks for reporting the issue ;)
You might want to look at https://medium.com/@girishso/alternate-javascript-interop-with-elm-e531666e55ac, we used it for a WYSIWYG editor in our project.
If you look at the code when I just started then you that It was a terrible mess: https://github.com/JordyMoos/elm-pixel-boulder-game/blob/0963c84aac2aa679e4fb7d454c31f2828210f3b3/src/elm/Main.elm#L479 I learn to program functionally better by building the game. You could do it too!
In my experience with other web frameworks: Angular, React, Polymer... our teams usually end up rolling our own code in general. Rarely did we get to leverage some existing thingy that solved our problems for us. That's why I have a job. So the vast majority of code in our applications was code we wrote. If that code were Elm instead of JS, there would be fewer bugs and more focus on satisfying requirements. That's the value proposition.
Is there a preferred solution for prerendering Elm 0.19 applications? [The solution I keep coming across](https://github.com/eeue56/elm-static-html-lib) doesn't appear to be compatible with 0.19.
Nice! Did notice any side effects? 
None whatsoever!
Checking the password length should be simple to figure out. A `String` is made out of `Char`. You can "reduce" the string to an answer that you are looking for. In `Elm` reduce functions are `foldl` and `foldr`. Checking if the string contains and upper case, lower case and numeric characters should be simple once you figure out what the accumulator should be and what the function that takes each character of the string and the accumulator should be. Checking for the age should again be very easy if you look at the available functions in `String`;) 
Do i put these validations in the viewValidation function or create a function for each condition? Thanks!
It is up to you how you treat the validation. You can treat it as binary (pass/fail) and just provide an error message that contains all the instructions OR, you can implement something more sophisticated that renders all the errors in some way. [Here is an implementation of both strategies](https://ellie-app.com/467pvP3BnLQa1) for inspiration after you tried to solve it yourself. :) 
So nice and inspiring! Thanks for this piece of joy.
Thank you!
Nice! Why Elm 0.18?
just downloaded the latest version... why the question tho? is it worst than .17? I saw something about no infix operators (which I like)
No, I mean, the 0.19 has been released some months ago, so I was wondering.
I see, gotta update than :) I installed elm some time ago... but just now got the time to start using it
I like it. I also like the code. Are you gonna let the user see errors? You seem to catch them and ignore them
Did you take a look at https://elmlang.herokuapp.com/ ? Everytime I can't fiure something out I get help there really awesome community.
Also, as a bit of a follow-up, has anyone tried using [react-elm-components](https://github.com/cultureamp/react-elm-components) or similar to embed Elm in React and then prerender the React application?
Pretty cool. I've never seen computations like this viewed as a tree before.
Wasn't planning on it, but would be simple I think.. the model could have a string for error output
What can you pay?
There's a lot of huge changes, a few bits of your could would need to be changed. But the positives are WAAYYY faster compile times, better performance, a lot smaller asset side because the compiler now only includes the functions you use, and a better http + a File module 
I checked, when I click on the pokemon I see the card. But there is no way for me to unclick it.
&gt; I really like Elm and I feel so bad for not understanding the basics like Don't feel bad. It doesn't help. We were all beginners at one point. Nothing wrong with not knowing everything at once. &gt; How can I really create good layouts in Elm for web development like (Material design / Bootstrap). You can either load the CSS from outside and just use classes in Elm OR, you can use specialized packages. [Bootstrap has a good library.](http://elm-bootstrap.info/) In any case, good layouts are more about CSS than about Elm. A person that is very proficient with CSS might not need a full framework for stuff like this. All relevant browsers support flexbox reasonably well. If you want to try a new approach, there is [also elm-ui](https://github.com/mdgriffith/elm-ui). I haven't used it myself but I've read a lot of good comments about it. [Matthew also did a great talk at this year's elm-conf about it.](https://www.youtube.com/watch?v=Ie-gqwSHQr0) &gt; In Elm I know if I do something similar to this feature: Int -&gt; String; in theory, this will return a string, but how can I actually know when I need to return a String or a Int or a Float ..? This question needs extra information, maybe an example of what you are actually trying to accomplish with such a function. To me, a function with `Int -&gt; String` is a function that turns an `Int` into a `String`. It will always take an `Int` and always return a `String`. &gt; How to consumes an API in Elm, I failed brutally trying this one : /... This one is a little bit more complex and it take a little bit of getting used to. I would say it is one of the more challenging topics of Elm. In short, Elm is a static language so, when you consume an API, for each call you need to know EXACTLY what you will get from that call. In order to convert the JSON that the endpoint returns to an Elm type, Elm needs a JSON Decoder. Read the [HTTP](https://guide.elm-lang.org/effects/http.html) and [JSON](https://guide.elm-lang.org/effects/json.html) sections of The Guide and don't be afraid to ask clarifying questions on Slack. JSON Decoders are notorious for giving troubles to beginners BUT they are not all that complicated once you understand them. I highly recommend to do the exercises attached to [Demystifying Elm JSON Decoders](https://blog.ilias.xyz/demystifying-decoders-d294ed35bc6e). They start gently and progress in complexity. By the end you should have a very firm understanding of this topic. &gt; I'm looking for a good person to explain to me the basics of these doubts if it possible. Go through The Guide and ask questions in the #beginners channel on Slack. Trust me, Elm is a simple and direct language, you can learn it without a mentor. The best way to learn it is to try to implement something with it and get over each challenge. As long as you avoid [XYproblems](http://xyproblem.info/) and ask direct questions in Slack, you should be fine. I tried at one point to mentor a beginner because he thought that he needed someone. I answered few questions but in the end, I was simply not needed as much as he thought I would be needed. 
It would be nice to see it in action... specially for non-mac users ;)
I updated the logic of the camera which will make it way smoother. Give it a try ;) https://jordymoos.github.io/elm-pixel-boulder-game/?startLevel=official%2F001&amp;hideDebug=1
Please avoid creating desktop applications with Web technologies. HTML/CSS/JS is made for Web use and having 8 seperate Web browsers running at the same time is a really bad trend we've got ourself into. Use Elm for websites, use QT, Forms, GTK, libui etc for desktop applications. Electron is a really bad way to do things 
Please continue creating desktop applications with whatever technology enables you to do so without listening to naysayers...
But this isn't a desktop application, it's literally just an brower that auto launches a specific website... I have no problem with high level technologies but this way of creating desktop software wastes 200x more resources, and that's not over exaggerated. 
Thank you everybody for your help! I have found a guide to Elm but I cannot say how much I appreciate the help that everyone has given me.
I’ll see if I can package a version for windows tomorrow. You might not be able to on mac, though. You can also do it yourself if you’d like using electron packager :)
Oh, thank you, but I use Linux anyway. I just wanted to see some screenshots to be able to share them to corworkers :)
I’m on a tiny mobile, so this will be short and possibly messy. Start with &lt;/&gt; and its type signature. When combined with «int» on the right hand side, what type variables become bound to what? Whats does that mean for the left hand side? The type «Parser a a» is rather flexible. You could e.g. use it a context where «Parser (Int -&gt; a) (Int -&gt; a)» is needed. The type «Parser a b» is even more flexible, and the a and b could even be equal. 
The type `Parser a b` means there is a parser that you need to give something of type a so it can give you something of type b. `Parser (a -&gt; b) b` means the Parser somehow has something of type a, so if you want a b you need to give it a means (function) to turn that a into a b. `int` is of type `Parser (Int -&gt; a) a` because it already has an Int which it will take out of the Url. So if you want something of type a you need to provide a function that can turn that Int into an a. If you wanted the Int you would just provide `identity`. Likewise `string` has type `Parser (String -&gt; a) a` because it takes a string from the Url and uses the function you provided to turn it into an a which you wanted. `s "something"` is of type `Parser a a` because it does not take anything from the Url. It just checks that there is a path segment `something`. So whatever you want out of the Parser you need to already provide. It's like saying "I give you this a, give it back to me only if the next path segment is 'something'." `Parser a b -&gt; Parser b c -&gt; Parser a c` means If you give me a parser that given an a can produce a b and another parser that given a b can produce a c, I can combine them to a parser that given an a can produce a c merely by using the first one to produce a b and giving it to the second one to produce a c. In `s "blog" &lt;/&gt; int` the resulting type is `Parser (Int -&gt; x) x`. I have renamed the type variable to show it is a different type variable then those in the type of `&lt;/&gt;`. So if we substitute the resulting type in the signature of `&lt;/&gt;` we get: `Parser (Int -&gt; x) b -&gt; Parser b x -&gt; Parser (Int -&gt; x) x` by substituting `(Int -&gt; x)` for a and `x` for c. And because `s "blog"` is of type `Parser y y` we can further substitute `(Int -&gt; x)` for `b`: `Parser (Int -&gt; x) (Int -&gt; x) -&gt; Parser (Int -&gt; x) x -&gt; Parser (Int -&gt; x) x` The resulting type has the meaning: If we have a parser `s "blog"` that when given a function from Int to whatever will return exactly this function but only if the next segment in the Url is "blog" and we have another parser `int` that when given a function from Int to whatever will return this whatever if it can get an Int from the next segment in the Url then we can combine them to get a parser that when given the function from Int will return whatever, if it can first skip "blog" in the Url and then read an Int from it.
&gt;(&lt;/&gt;) : Parser a b -&gt; Parser b c -&gt; Parser a c Would be a function that takes two parsers and combines them into a single parser. So if you break it down: /blog/35 would be two parsers, aka /leftparser/rightpaser The left parser, aka Parser a b, which is /blog [**s**](https://package.elm-lang.org/packages/elm/url/latest/Url-Parser#s) : String -&gt; [Parser](https://package.elm-lang.org/packages/elm/url/latest/Url-Parser#Parser) a a s "blog" The right parser, aka Parser b c, which is just expecting an int, 35 for example. [**int**](https://package.elm-lang.org/packages/elm/url/latest/Url-Parser#int) : [Parser](https://package.elm-lang.org/packages/elm/url/latest/Url-Parser#Parser) (Int -&gt; a) a int Then combine them together with &lt;/&gt;, which takes two parsers (left a-&gt;b and right b-&gt;c), and then returns a combined Parser a-&gt;c aka [**(&lt;/&gt;)**](https://package.elm-lang.org/packages/elm/url/latest/Url-Parser#(%3C/%3E)) : [Parser](https://package.elm-lang.org/packages/elm/url/latest/Url-Parser#Parser) a b -&gt; [Parser](https://package.elm-lang.org/packages/elm/url/latest/Url-Parser#Parser) b c -&gt; [Parser](https://package.elm-lang.org/packages/elm/url/latest/Url-Parser#Parser) a c blog : Parser (Int -&gt; a) a blog = s "blog" &lt;/&gt; int so in javascript, a naive implementation would look something like this: const CombineParsers = (a, b) =&gt; Parser( a /\* "blog" \*/) + "/" + Parser(b /\* 35 \*/); CombineParsers("blog", 35) // /blog/35 I'm not sure if that helped or made things worse, I'm still new to functional and ML style languages myself. 
Thank you very much for understand my situation and for pass me that good words, it helped me a lot. I will continue my studies and whenever there is any doubt about elm I will ask in the slack. Have a good week my friend.
Thank you very much, I've joined into the group :D Have a good week
Does elm repl read some sort of config file from my home directory for options? I'd prefer for the --no-colors flag to just be set all the time. Or maybe an environment variable?
You too!
Oh I see, I’ll take some when I get to work.
Here you go : [https://imgur.com/ygwsmQI](https://imgur.com/ygwsmQI) [https://imgur.com/vJxuagX](https://imgur.com/vJxuagX) [https://imgur.com/rkEHvu4](https://imgur.com/rkEHvu4) [https://imgur.com/7Xawu6C](https://imgur.com/7Xawu6C) [https://imgur.com/Y7BxVsB](https://imgur.com/Y7BxVsB) The chat page is kind of bare bones right now, I was just trying to get it functional
Great work!
May the Force be with you! 
Thanks!
This is amazing!!
Thanks for such a nice explanation. I was trying another example, which is little more complex than the other one. userAndId : Parser (String -&gt; Int -&gt; a) a userAndId = s "user" &lt;/&gt; string &lt;/&gt; s "comment" &lt;/&gt; int I first deduce the resulting parser type `s "user" &lt;/&gt; string`. See below: Parser (String -&gt; x) x s "user" &lt;/&gt; string Parser a b -&gt; Parser b c -&gt; Parser a c Parser (String -&gt; x) b -&gt; Parser b x -&gt; Parser (String -&gt; x) x Parser (String -&gt; x) (String -&gt; x) -&gt; Parser (String -&gt; x) x -&gt; Parser (String -&gt; x) x similarly, for `s "comment" &lt;/&gt; int` which is `Parser (Int -&gt; x) x` Now I am lost how to deduce the resulting type of `Parser (String -&gt; x) x &lt;/&gt; Parser (Int -&gt; x) x` . Can you help me on this?
You need to keep your type variables separate. The `x` in `Parser (String -&gt; x) x` is not the same as in `Parser (Int -&gt; x) x` so always rename when you substitute types as in `Parser (String -&gt; x) x &lt;/&gt; Parser (Int -&gt; z) z`. Now you can just substitute in `Parser a b -&gt; Parser b c -&gt; Parser a c`, i.e. `a` must be `(String -&gt; x)` and `b` must be `x` from the left side. But `b` which is `x` must also be `(Int -&gt; z)` from the right side, so you can substitute `x` to get `(String -&gt; (Int -&gt; z))`, where the inner parentheses are unnecessary since `-&gt;` associates to the right. Together with the substitution `z` for `c` giving `Parser (String -&gt; Int -&gt; z) z` which is your resulting type modulo the renaming of `a` to `z`.
You taught me exactly the way I was trying to learn it. Thank you very much!!! I think this lib documentation need some more work to explain more about how the parser works? May be what you wrote here should go to the lib documentation. I'll come back again when I get stuck.
I asked this question last week, but since I didn't get any responses, I'll ask again: Is there a preferred solution for prerendering Elm 0.19 applications? [The solution I keep coming across](https://github.com/eeue56/elm-static-html-lib) doesn't appear to be compatible with 0.19. Also, has anyone tried using react-elm-components or similar to embed Elm in React and then prerender the React application? I tried to put a proof of concept together, but I think there's a hiccup with the Elm component's lifecycle hooks; the wrapping React component gets prerendered but the Elm component is empty.
Also similarly: [https://www.classes.cs.uchicago.edu/archive/2017/spring/22300-1/schedule.html](https://www.classes.cs.uchicago.edu/archive/2017/spring/22300-1/schedule.html)
The only thing I'm aware of at the moment is [https://github.com/rogeriochaves/spades](https://github.com/rogeriochaves/spades). I've used elm-static-html-lib for my static site generator ([Elmstatic](https://korban.net/elm/elmstatic)) but it seems doubtful that it will be updated, so I'm thinking of switching to jsDom, which is what Spades uses. I can't say anything about react-elm-components.
There is a thing like type holes so i can quick see the type of something?
If you happen to based in Toronto (or Kitchener-Waterloo), I'm happy to get together for coffee =)
Old stuff but Ravi Chugh (the course instructor) had [a great talk at elm-conf 2018](https://www.youtube.com/watch?v=-TFL6E1uSHE&amp;index=4&amp;list=PLglJM3BYAMPHuB7zrYkH2Kin2vQOkr2xW&amp;t=0s).
Impressive using a parser and SVG for rendering. Very nice, looks much better than my first project :). Seriously well done, the code quality is already so good that it's beyond my ability to comment (I'm very junior). The only thing I feel comfortable mentioning, which may not even apply to your 0.18 situation, is that I call toUnstyled in my main declaration like so: `main = Browser.element { init = init, update = update, subscriptions = subscriptions, view = view &gt;&gt; toUnstyled }` in your case, maybe it would look like: ```main = Browser.document { init = \_ -&gt; ( Nothing, Cmd.none ) , view = document &gt;&gt; toUnstyled , update = \msg model -&gt; ( update msg model, Cmd.none ) , subscriptions = \_ -&gt; Sub.none```
2018 is old! Things are moving fast in Elm :-)
Thanks for the reply. I looked into Spades a few weeks ago but, IIRC, it doesn't work as a static site generator out of the box. I will have a look at the source to see how they're prerendering apps, though, as that may be enough for me to riff on to get something working myself. It's a shame because I have the opportunity to use Elm on a high profile project, but the page MUST be prerendered. I could probably generate well formed static markup and inject that into the HTML file as part of my build process (for SEO/AMP/etc.), but that complicates things and makes it harder to sell Elm as a solution to my colleagues.
2015 is old stuff. It predates the official adoption of The Elm Architecture. 
Hey, nice catch! Also, I already knew some haskell before going into elm. Most of my projects are related to parsing stuff, hence this calculator :) 
There is not, I‘m afraid. Two workarounds: - The REPL in VS Code (and maybe other editors) can tell you the type of top-level definitions. (Unfortunately, `elm repl` on the console does not.) - You can also use type errors. If you try to give the wrong type (say `()`) to some top-level definition `a`, Elm will try to tell you how to change `a`’s definition, which is not helpful. But you can omit `a`s signature and introduce a second temporary definition like testA : () testA = a and Elm will tell you `a`’s type. This probably also works with local definitions in a `let`. Combine it with `Debug.todo` to get type holes with lots of extra work.
I have not implemented that yet =( I wanted to make the collisions of the cards before that But now I'm focusing on an internal project of the company in elm = D
Sorry about the delay in response Unfortunately I'm from Brazil, I am grateful for you willingness to take some of your time to help others. maybe one day we can sit down and have some coffee :D Have a good friday and an excellent weekend my friend
Understandable.
oh yeah, the second one is working for me.its a little weird but it works thanks :) 
There's a different elm-ui: [https://package.elm-lang.org/packages/mdgriffith/elm-ui/latest/](https://package.elm-lang.org/packages/mdgriffith/elm-ui/latest/), though I'm not really sure that is what you are looking for based on your question, but worth checking it out I think. &amp;#x200B; I tried it out for a recent project, and it works fine. It has some limitations in what you can do with layout (centering a wrapping list properly), so in the end I decided to just use html anyway though.
I'm looking for a lib that provides ready to use components, like that: https://elm-ui.netlify.com/reference/dropdown-menu Furthermore, I am worried of the long term support of such a library, and I want to know if the core team plans to support such a library.
You can safely assume that no one at the elm core team will bother to develop a UI library and provide a long term support for it.
Since the structure and styling of a UI has too many different variables and requirements to define in a single "ui" library, it would be very unlikely that one would get introduced as a core module.
Ok, thank you for your answer. If I understand well, this will not be either provided by an user because this kind of libraries needs to have some parts written in JS and it is forbiddent by the policies of Elm, doesn't it?
Whether parts would need to be written in JS, is dependent on what you need the UI to do. You can do most things in elm, but a few like localStorage and cookies have to be handled with Ports. Elm 0.19 removed support for what is now called "Kernel" code, or JS code, in package libraries because it didn't allow for the guarantees that elm has for stability. Core modules are whitelisted to allow it for now, but I imagine that code will eventually also be removed in favor of straight elm code.
Check out [elm-semantic-ui](https://github.com/circuithub/elm-semantic-ui) which is an interface to [Semantic UI](https://semantic-ui.com/). Haven't used it in Elm personally but have been using Semantic UI a lot in React and plain HTML and really like it.
There is elm-mdc I think this is what you're looking for
We'll be using Bulma which is just css, and create simple functions to control anything that needs interaction and state
I don't see any reason for the elm community not to be able to develop an angular-material like library - after all material design is just a styles spec. I've done a bit of angular/angular-material development and there is nothing that is out of elm reach. There is just no effort from the community in that direction. 
The way we do this is to use Elm to build the HTML, link an external CSS library (like Bootstrap or something) and just use its CSS classes from Elm. This can get "componentized" into its own module (typically for some type safety) but usually there's no need for that in practice.
I switched a project from elm-ui to using Bulma css framework and was really happy with it. Felt like the coding was more straightforward and productive since I was just doing vanilla elm.
I'd like to answer that to everybody, because I have the feeling that I badly explainded my needs: that's not only a matter of CSS (a style spec). There are a ton of dynamic things that are responsive &amp; do some complex operation in the material-angular-like libraries. For example, a date picker, or a menu-bar with dropdown submenus. This require a lot of boilerplate code, while the theming is actually the easiest part. I'm glad that it is possible to do this with Elm, but doing this by oneself takes a lot of time compared to just using some prefab widgets. Thanks for your answer anyway!
For nice UIs you can use regular CSS classes and style your app the way you want it. If you want a feature-full library, your best bet is probably [elm-bootstrap](http://elm-bootstrap.info/). Unfortunately, there is a disconnect between what a UI widget is and how Elm views Html. Elm considers all Html elements as pure, stateless elements. So, if you can express a "widget" in a stateless form as a combination of other stateless html elements, everything is fine. If you have any type of state, then you need to manage that state outside of the widget. You cannot package the widget as a self contained pure thing. The library you linked used low level implementation details to push the state into JS land and because of this it was not allowed into the official package directory (use of low level JS is restricted to the core libraries). The author abandoned the library and moved away from Elm. In practice, there are just a few widgets that actually need state. Most UIs can get by just fine with pure html and CSS styling. 
Thanks a lot for your answer! It clarifies all the things that I did not understand about this subject. BTW, it seems to me that elm-bootstrap will do the job, so I guess that I will move from Angular to Elm. Thanks again.
Looks good! Since you're targeting beginners in Elm, you might want a little more detail about why enumerating every state of the application eliminates errors. You also might want a link to documentation for defining custom types, as that's an important topic to that enumeration.
Awesome! I've bookmarked it :) HTTP requests, Cmd's and anything Async / Random is def a big challenge for newcomers, including myself.
There’s a fundamental philosophical difference between Elm and other environments (like Angular) which result in UI libraries being less useful. In Elm, thinking in terms of “components” or “widgets” usually results in poorly designed code. Functional programming works best when you design a library to be composable: or when you publish many small specialized functions that can be used together to make something bigger. Components are big black boxes that do a lot of work for you, but are extremely inflexible when you need to do something different. Your only choice is often to fork, or bother the author to add more features to support your use case. It’s like the difference between legos and toy houses. Yes, if you want to build a town it’s easiest to just slam down prefabricated toy houses. But what if you want to build a tall, oddly shaped building? Buy more toys? The author of a UI library can’t possibly predict every way someone will use a widget. They try, and they keep adding new options, but they all eventually hit their limit. Composable functions, on the other hand, can be reused over and over in a million ways the authors never predicted. You’re unlikely to see a large UI library in Elm because they are impossible to design well . They will start out strong, do a lot of work for you, then fall into disrepair as they prove to be difficult to maintain and buckle under the strain of many conflicting requirements. I’m sure there are packages that can help with a date picker, sortable table, etc, but it’ll be easier if you let go of the idea of creating a component library. 
If you can find your UI widgets as web-components (see Polymer, for instance), you can use them in your Elm app straight away: as long as they communicate via HTML attributes and don't rely on external global states, it shouldn't be a big deal.
Writing a UI library like the ones for React or Angular is just not possible in Elm, it doesn't fit the TEA (The Elm Architecture), that's why you won't find any packages for that. The only thing that comes close is web components, but then again you're falling back to JS to do the dirty work.
This is just a general question on if there's a better way to do what I'm doing. I have a website with both a night and day theme. The theme being used is stored in an Enum in the model. Now in the helper functions I've made for text are "header : Theme -&gt; Element Msg" "subheader : Theme -&gt; Element Msg" Etc All have to pass in the theme as parameter in order to use the correct color. So now I have to type "header m.theme 'some header'" all the time which makes me feel like there's a better way of doing this. My code is now filled with "m.theme" being passed as parameter for 50% of my Elements (elm-ui). Am I missing something? 
If the Theme does not change while the app is running (ie, it's known at compile time, or it is static), you can just import the Theme from a Theme module and use it directly instead of passing it as an argument.
It changes at runtime. Otherwise I could just use constants 
yeah not sure if you can do much about that one. You could potentially create the themed UI and pass them around instead (e.g. [https://ellie-app.com/4c3qFX9Xrc7a1](https://ellie-app.com/4c3qFX9Xrc7a1)), but the gain is marginal at best if at all
I actually really like that solution. Thanks for the ideas 
No problem!
My thoughts: (1) Cool! (2) Bravo!! (3) Elm 0.19
How to play on Telegram?
elm-ui isn't too bad as there is an escape hatch function called html (see [https://package.elm-lang.org/packages/mdgriffith/elm-ui/latest/Element#compatibility](https://package.elm-lang.org/packages/mdgriffith/elm-ui/latest/Element#compatibility)) so you can just use it for layout and do everything else as per normal. &amp;#x200B;
[removed]
In the guide, there's an example form that updated each record on its own when the appropriate field changes: ``` update : Msg -&gt; Model -&gt; Model update msg model = case msg of Name name -&gt; { model | name = name } Password password -&gt; { model | password = password } PasswordAgain password -&gt; { model | passwordAgain = password } ``` That makes enough sense for a form with 3 fields, but is that really the idiomatic way to handle a form with lots of fields? Do we have a clean method of passing a `FormUpdate` message with the whole form at once instead of each field getting its own message?
This is something I thought about myself and I have some options, but there might be a better way. 1. Do what you say above and have a case for each field 2. Store the data in a key/value dictionary. You then need one message that specifies the key. 3. You could break down the forms into sections and give each section it's own update, model etc. 4. I think this is a NO NO for performance as well as good practice but you could put a function that updates the model in the message. None of these are super nice but that is the best I can think of. &amp;#x200B;
has package.elm-lang.org/help/docs-preview moved to a new location or how can i preview my documentation without publishing it?
I find the best way to be using a dictionary for the fields. type Field = Username | Password | License type alias Model = { login : Dict Field String } type Msg = ChangeLogin update msg model = case msg of ChangeLogin key val -&gt; { model | login = Dict.update key (Just val) model.login }
Since 0.19 it doesn't exist anymore, seems like Evan wants to grant this ability in a different way. &amp;#x200B; [his response here](https://discourse.elm-lang.org/t/docs-preview-404s/1687/2)
There is [http://elm-doc-preview.netlify.com/](http://elm-doc-preview.netlify.com/)
I am creating an application using Elm 0.19. I was about to add some CSS styles when I read that the style function inside Html.Attributes has an additional note saying that it should be used lightly. &amp;#x200B; What are the recommended ways to do CSS in elm then? Should I use some user created package?
Ports are 100% the way to go. 
Elm-firebase author here. Use ports. Just do that, and trust me and the community.
Thanks for the heads-up! &amp;#x200B;
Thank you! 
Elm-css package is a good way to go. The problem with using inline styles is that they have a bigger performance hit. You can also just write a .css file externally and set classes 
Can you share the link to the guide book you are using? Or is it a printed guide? First of all you have to make sure you have the Elm tooling installed. Then you put your code in a file ending with the `.elm` extension. If you file is called Main.elm, your code should look like this: module Main exposing(main) import Html exposing (text) multiplyNumber x y = x * y main = text (toString (multiplyNumber 8 10)) Now you can compile the program by running the following command: elm make Main.elm You should get a html-file which you can open in a browser. There is also [Ellie](https://ellie-app.com) which allows you to write code without installing anything. Here's an Ellie with your code: [https://ellie-app.com/4dzcNxTZmxMa1](https://ellie-app.com/4dzcNxTZmxMa1) (I had to change `toString` to `Debug.toString`, because `toString` was removed in Elm 0.19).
The post isn't formatted so it's really hard to read, and I'm not sure what you mean either. Do you not know which text editor to write the code with, where in the .elm file to write the different parts, how to compile a .elm file to .html/.js file? Could you clarify please? &amp;#x200B; If you're wondering where in a Main.elm file to put it the answer would be something like this: module Main exposing (..) import Html exposing (text) multiplyNumber x y = x * y main = text ( String.fromFloat ( multiplyNumber 8 10 ) ) It's worth noting that the "toString" function no longer exists and i suspect that the guide you're reading might be outdated. The absolute best way to learn Elm is to use the [official introduction.](https://guide.elm-lang.org/)
Thanks for you help! I’m using elm web development 
\- IDE support is not great, intellisense in VSCode is not nearly at the level of TypeScript or C# support \- port communication is not a huge deal, but it's troublesome and ugly when you want to access something simple (like one function call or field) in the browser API that is not covered by an already existing package. Native modules could be used to simply get around this, but as you may know, they are not an option anymore \- smaller community, smaller ecosystem, not a lot of best practices \- writing elm-css means that it's more difficult to include your designers if they want to supply you with helpful stylesheets since they are going to be weirded out by its syntax and automatic tools cannot emit elm-css \- some people will outright refuse to learn/write elm because they believe it adds little value to their CV and it's too foreign compared to the tools they know \- if you haven't built large code bases in a purey functional way, there are gonna be hurdles as your architecture grows with a lot of "man we shouldn't have done that" and various "how do other people do that?" moments. there is no consensus on how to manage state in a huge application for example
In my opinion, correctly modelling the state of a large app is the complicated part. Having a poor data model leads to wild code that has weird coupling and is hard to mentally reason about. Yes the compiler will tell you where your code breaks after introducing a change, but is it going to break in places you don't expect? 
If the question is about Elm vs Javascript as languages then my response would be a resounding yes that Elm is much, much better for the reasons you list. The thing to keep in mind is that there may be areas where Elm doesn't fully solve a particular problem that you have. For example: - Server-side rendering isn't officially addressed and to my knowledge there isn't a great solution from a third party either yet. - Maybe you need to rely heavily on a complex third-party library like D3 and there's not an economical way to replace it yet. - I'm sure there are others that people can weigh in on. That being said, if you understand the limitations of Elm at this point in time then it's great for many different web applications. A lot of the skepticism boils down to social proof and our industry being overly conservative about new technologies at times. If it's not wildly popular then people understandably are skeptical about investing in a new technology but my opinion is that many companies don't realize how much money they're losing because of productivity losses as a result of fixing runtime bugs and not having developer intentions clearly expressed because they're using a language with either no type system or poor type system. The place I work we have three software engineers and our codebase is growing faster than our staff. When I was working with React it might cause a critical runtime error that would drive me off course for hours, killing my focus on whatever I was working on. When I started writing Elm those problems largely went away. It also made me far more confident when reviewing contractor code because it's a problem I simply didn't have to worry about. The last set of questions you ask are really big topics. I'd recommend absorbing as much as you can from people with experience in the language through blog posts, the Elm book, and if you run into more specific questions the Slack channel is very helpful.
Elm is great, but it's downside is when you have to write large amounts of boilerplate code. This happens specially when communicating from child components to parents, and could have been avoided if its type system was more expressive.
&gt; A lot of the skepticism boils down to social proof and our industry being overly conservative about new technologies at times. That doesn't sound at all like the web development community that I know and love.
Just to be clear, I'm not referring more to organizations as opposed to individuals. In my experience inertia is a huge factor in deciding what technologies to use.
Thanks for the feedback! I'll make some edits when I get a chance.
&gt;IDE support is not great IntelliJ has a very good Elm plugin.
Does vanilla IntelliJ do the trick, or does one need a WebStorm license for it?
Can you elaborate on what kind of type system features you think would help, with concrete examples if possible? It seems like the msg type and update function is a large source of boilerplate. One way to reduce it would be to use a monad to sequence effectful operations instead of triggering update again with a separate message. But that wouldn't require any new type system features I think, and is already possible to some extent using `Task`s. But doing so would also obscure state transitions and make it harder to debug your application, in addition to adding a bunch of complexity of course. Another way could be to remove `update´ and the `msg` type entirely, and just pass state transition functions directly to event handlers. Html elements would then need to be parameterized over the model instead of the ´msg´ type. But agin, more complexity, more obscure state transitions, and less opportunity for introspection.
IntelliJ is a polyglot IDE, except for a couple exceptions due to integration complexity and project model differences (Rider, CLion, AppCode, Goland) the features of JetBrains' other IDEA-based IDE's are available as plugins to IntelliJ users.
&gt; Any stuff that is really hard to express in a purely functional language like Elm? Depends on what you mean by that! Expressing a completely imperative algorithm with mutations will be annoying, but obviously not something you want to do. Writing Elm includes writing quite a bit of boilerplate, especially when coming from language that have auto deriving feature or more expressive abstractions. But this is just nitpicking from the "good side" of programming languages ;) A more annoying issue at scale is the fact that the language is not stable at all, and you can be burned by having to rewrite large swaths of a big application for seemingly no reason when the language changes. For example, I have a big application that is not moving from Elm 0.18 because: * I used libraries that have changed a lot between 0.18 and 0.19 * I used custom operators lot (which are now forbidden) * I use native modules (which will require rewriting into ports, and code on the JS side, whereas it was self contained before that) 
&gt; So are there any challenges that one might expect from writing Elm at a larger scale ? You have challenges in any language when moving into the tens of thousands of lines of code. Architecture related challenges at this scale are way, way more relevant than any challenge brought by the language itself. There is at least one codebase in the hundred of thousands of lines of code so, Elm scales quite nicely. Mandating the use of `elm-format` and following a well documented architecture makes Elm and wonderful choice for large scale. &gt; Any stuff that is really hard to express in a purely functional language like Elm?Or is it just getting used to the syntax and APIs? In the domain of webapps, Elm shines. You can handle the styling inside Elm or outside of Elm using traditional means like SCSS. Getting used to Elm's syntax is a small effort and I believe that people who have never seen this kind of syntax can still become productive in a matter of few weeks. The biggest challenge, in my perspective, is moving from thinking in an imperative way to thinking in a declarative way. &gt; What are your frustrations/challenges while working on a non-trivial Elm code base? The biggest challenges I've had were architectural. In non-trivial codebases, you end up sometimes with a mesh of modules where if you want to refactor a piece of code you discover that you impact a lot of modules. It is like pulling a thread and discover that you are actually pulling a web of things. There were things that used to frustrated me more (like deriving json decoders or abstracting widgets) but I have learned that you have tradeoffs no matter what you chose and the current set selected by Elm is not at all that bad. Maybe someone will at one point do the design work required to model UIs in a better way but until that day, Elm remains a good choice. 
&gt; Maybe someone will at one point do the design work required to model UIs in a better way When I first discovered FRP in redux and then found was inspired from Elm, I quickly realized that it's way better than the older stuff I knew about UI models at the time(MVC, MVVM, MVP, ....). &amp;#x200B; Do you know of anything close to FRP?
Elm used to be FRP. It moved away from it with the launch of `0.17`. I guess, a better way to think about the move is that if formalized a signal structure that is currently part of the runtime. The main challenge is to have a declarative GUI where the elements of the GUI are behaviours rather than static data. The project that looked closest to me to this idea is [scenic](https://github.com/boydm/scenic) from the Elixir world. 
Great, thank you for the information!
3 that come to my head always is... a) the reliance and requirement for using Github as there's no way to publish internally or to a rival service like GitLab. b) not being able to define what `comparable`, or `Ord`, is leads to some cumbersome code as basic unions can't be keys in Dictionaries, you can't sort on boxed, new-type-like values despite it being a best practice, etc. c) i18n isn't really solved in a nice way, there's several competing solutions, but none feel good and first class.
Store the authToken in the LocalStorage and provide it as one of the flags. In the `init` function, check to see if the authToken is still valid and either load the requested route OR, redirect the user to the login page. 
This is a good approach, but you shouldn't use LocalStorage for authentication credentials. Use a cookie (they can be accessed via `document.cookie`, but I suggest a simple library like [js-cookie](https://github.com/js-cookie/js-cookie)). Cookies are what is typically used for authentication and will result in expected behavior. If I clear my cookies, I expect to get logged out of every site that I am logged into. If a site uses the `localStorage` API to store my session data instead, that isn't going to happen. So to answer OPs question: 1. Make a type like `type AuthState = NotAuthenticated | Authenticated String` and store it in the model 2. From login page, send user credentials to server 3. Upon successful authentication response: * store session key in the as an `Authenticated` auth state in the model * send the session key over ports and store it as a cookie 4. pass the session key stored in your auth state as a header or some other field with each subsequent HTTP request (to tell the server the user is still logged in) Then, when the user refreshes / re-visits the page: 1. Check the cookie that stores the session id 2. Pass the cookie into the Elm app via flags 3. Immediately update your auth state to be `Authenticated ...`, which if you have then you know you do not have to display the login page to the user
&gt;Immediately update your auth state to be &gt; &gt;Authenticated ... &gt; &gt;, which if you have then you know you do not have to display the login page to the user &amp;#x200B; Thanks both of you. So that if else test I will do inside the init function, Right? To me \`init\` function looks legit though.
Can you help me on one last thing? I am not able to figure out how can I pass the auth token to the Main module after a successful login. My code [Sessions.elm](https://github.com/aruprakshit/elm-rails-todo/blob/master/frontend/src/elm/Page/Auth/Sessions.elm#L41). 
Why don't you store it in the model in Sessions.elm, right along side your storeAuthInfo call. I see you just returning an unchanged model in that case. The ports call is for storing the auth key for subsequent visits to the app. Setting the model immediately is so that the app knows the user is authenticated now. You have to do both.
This is strictly incorrect and dangerous (well the elm stuff is great). PKCE is now the preferred method for native and web clients, storing the refresh and access token in localstorage is tolerable. In order for a cookie to be secure it needs to be httpOnly, which means that your client application can't access it. Servers who authenticate with OIDC Connect or track based on session use this (think google login or analytics people). Cookies that are not httpOnly can also be read by any js on the frontend, but are also send to and from servers. In addition they CAN be shared across subdomains, which is another security point. tl;dr XSS is bad, cookies and local storage are compromised if it occurs either way, cookies are more vulnerable to XSS. also OP, I strongly recommend ory/hydra for user auth if you are doing it all custom. https://www.oauth.com/oauth2-servers/single-page-apps/
Thanks for pointing out the PKCE approach as a modern option. As far as the point about XSS: there's measures for one to take to mitigate the risks of XSS occurring. Using Elm in Browser.application mode takes over the entire document. And short of a compiler bug, XSS should be impossible in Elm. Moreover, the risk of XSS should be eliminated altogether if you follow modern security recommendations and deploy a content security policy that blocks all inline JS execution and allows scripts from sources you define. This makes JS injection impossible. All of these are pretty advanced techniques that have ramifications in how you build your app (retroactively adding a strict CSP to most applications would immediately break them).
Thanks. That makes sense. &amp;#x200B; Will it be good idea to re define the current [Model](https://github.com/aruprakshit/elm-rails-todo/blob/master/frontend/src/elm/Page/Auth/Sessions.elm#L22) or a record? type alias Model = (Signin.Model, AuthState) `AuthState` is defined here [https://github.com/aruprakshit/elm-rails-todo/blob/master/frontend/src/elm/Config.elm](https://github.com/aruprakshit/elm-rails-todo/blob/master/frontend/src/elm/Config.elm)
What is PKCE?
nit: Shouldn't your route definition be `type Route` instead of `type alias Route` ? I think your old `route` function would work just fine with your new custom type definition. &amp;#x200B; But assuming that you want to do some useful pattern matching based on `AuthenticatedRoute` or `UnauthenticatedRoute` later on, you might want to change your `Route` type a little to allow nested pattern matching. perhaps like this type Route = UnAuthed UnAuthenticatedRoute | Authed AuthenticatedRoute | NotFound After this your `route` method can be something like this I believe route : Parser (Route -&gt; a) a route = oneOf [ map (Authed Index) top , map (Authed New) (s "todos" &lt;/&gt; s "new") , map (Authed Edit) (s "todos" &lt;/&gt; int &lt;/&gt; s "edit") , map (Authed Show) (s "todos" &lt;/&gt; int) , map (UnAuthed Login) (s "sign-in") , map (UnAuthed Signup) (s "sign-up") ] -- (or alternatively you can also split this into two parsers for authed routes and unauthed routes as well) Now say you want to figure out what page to show based on the route: processRoute : Route -&gt; Model -&gt; (Model, Cmd msg) processRoute route model = case route of Authed authRoute -&gt; -- do stuff with your authRoute (e.g. pattern matching, go to login page if not authed ) UnAuthed unauthRoute -&gt; -- do stuff with your unauthroute NotFound -&gt; -- do stuff with I didn't try to compile anything above so there might be some errors, but hopefully this gives you some idea!
I think you might want to change your `Route` type to be more like this: type alias Route = Unauthed UnAuthenticatedRoute | Authed AuthenticatedRoute | NotFound With this your route parser can map all the routes to the same type by doing the following: route : Parser (Route -&gt; a) a route = oneOf [ , map (Authed Index) top , map (UnAuthed Login) (s "sign-in") , map (Authed New) (s "todos" &lt;/&gt; s "new") -- and so on ] This also allows you to perform some nested pattern matching as well. You can see the full example here [https://ellie-app.com/4gkm8yRR4kya1](https://ellie-app.com/4gkm8yRR4kya1)
Thank you very much. That is exactly what I thought, but failed to code. :) That `Authed`, `Unauthed` part is going to clear lot of `if/else` match from my real app.
You're welcome!
Try not to be too smart. Just make the N routes static and when it all works, see if you can dry it up. It usually starts like this but ends up with a lot of complicated edge cases when you realize that every route doesn’t work the same way.
Then I need to rename them like `NewUser`, `NewTodo` for example, else I can't know `New` is for what resource.
That’s exactly what I mean
I still don't understand why you would even \*want\* to have the authorized and unauthorized cases in a single file instead of having two distinct files that are served to unauthorized or authorized users. 
Can you tell me that which file/files you meant? Also how would you organise them instead if you were me? I am new to Elm, just learning by writing this small app.
Thank you Brian, definitely valuable data. &gt;This year, we got 6 more responses than last year. Is anyone else worried about this? My instincts have been telling me that Elm hasn't grown much in the last year - what are the other metrics saying about this? (subreddit user count, downloads, etc)
I had no idea this survey was a thing, and I started this year. Was this announced anywhere at all? 
Based on this subreddit statistics: [https://subredditstats.com/r/elm](https://subredditstats.com/r/elm) &amp;#x200B; Growth in 2017: 3800 -&gt; 5800 = 2000 subscribers more Growth in 2018: 5800 -&gt; 7200 = 1400 subscribers more &amp;#x200B; Not sure how many people stop actively following per year, while still being subscribed. It could be that it is around 1000-2000. &amp;#x200B; So, unfortunately, it's possible that Elm is not growing.
Yeah, and the \[State of JS 2018\]([https://2018.stateofjs.com/javascript-flavors/elm/](https://2018.stateofjs.com/javascript-flavors/elm/)) results showcase similar: &amp;#x200B; 1: "heard of it \[elm\] but not interested" moving from 29% to 42% &amp; "would like to learn" and "will use it again" both decreasing slightly \[src\]([https://2018.stateofjs.com/javascript-flavors/elm/](https://2018.stateofjs.com/javascript-flavors/elm/)) &amp;#x200B; 2: Elm being behind Reason (its cousin in terms of being functional + new syntax) in terms of satisfaction &amp; user count \[src\]([https://2018.stateofjs.com/javascript-flavors/conclusion/](https://2018.stateofjs.com/javascript-flavors/conclusion/)) &amp;#x200B; Last year was looking a lot more rosy for Elm. :/
My understanding is that Evan is keeping it under wraps until it’s more polished.
Indeed and a lot of people disagree with that approach. But that just opinions. The fact is that Elm growth is slowing down.
I love Elm but I had a hard time getting JS devs to buy into it. I mean, they were the wrong devs, but the lack of growth/public interest has been the only thing preventing me from using it at my day job.
There are also the users who used Elm to get into FP and then moved on. I am one of those, and this is how I recommended it to my colleagues. I helped them learn Elm, and then I helped them graduate from it when they were ready. We all still remember Elm fondly, but I don't know anyone who wants to go back to it once they become familiar with the next language.
https://npm-stat.com/charts.html?package=elm&amp;from=2011-01-01&amp;to=2018-12-26 The long-term graph of the number of downloads of the Elm binary has the same shape shape as Vue and React, but with smaller numbers.
Absolutely. After Elm, languages such as OCaml, Haskell and Rust become easier to learn. I'm looking at Elixir again for the first time after 2016 after the announcement of Phoenix [LiveView](https://shift.infinite.red/phoenixs-liveview-client-side-elixir-at-last-2280716ae791). Elixir initially got me into Elm but coming back to it after a couple of years, parts of Elixir make more sense than during my first run. The one point I disagree on is that after working with other languages I do want to keep working with Elm.
I went with PureScript, which fully superceded Elm for me.
I've heard that purescript hits the sweet spot of code brevity and type safety. 
Elm compiles to ecmascript which is delivered to the browser by some server. The whole point of authentication is because you have some information that is only available to authenticated users. Because the client is under the full control of the user the authentication must be done by the server, otherwise the user can just fake the authentication and get the protected information. So when the server is already doing the authentication and the delivery of the ecmascript you can just have the server deliver one compiled script to authenticated users and another to unauthenticated users and there is no need to make that distinction on the client side. How you would do that depends on how you are deploying your application.
The server is just API only app, it uses JWT for authentication. You can see my code [https://github.com/aruprakshit/elm-rails-todo](https://github.com/aruprakshit/elm-rails-todo) . 
Ok, got it. That makes sense. Forget I said anything :)
Have you seen Grant Maki's talk about the cultured of adopting new things? If not, here you go. This might help: https://youtu.be/5WVXCy1Q88o
So maybe people are just getting on with using it, and there's not been a lot of turbulence/controversy/big news to draw a crowd? Seems ok to me.
This is very good considering many people like myself don't use NPM and download the elm binary manually 
I'd bet that most CI jobs will download using something like NPM for convenience.
Unless it's what you mean by writing 2 versions of your main code, in which case I do not have any better ideas, but try declaring a simple boolean/union type (e.g. type Environment = Production | Development) and it use it in your model then pattern match against which Environment value is set?
What kind of input validation or warning are you thinking of? Like for cases where the data model can't be perfectly normalized and you want debug-only checks, like C's assert() macro, to make sure the model doesn't get out of whack? I'm guessing that's what you're talking about, though "input validation" sounds less like that. Anyway, that would be really nice to have, though it's the kind of feature that could be a bit of a footgun. I would see that being implemented as a not super flexible feature; like just one special `Debug.assert` function, if it were something Evan would put into the language. A webpack loader would be your best option, IMO, but I'm having a hard time visualizing the specifics beyond that it would need to be a directive in an elm comment in order to not wreck your syntax highlighting, linter, formatter, and ability to compile without webpack.
I am guessing you are referring to not being able to use the Debug module, specifically Debug.log to write to the console? Otherwise, it seems straightforward to just deal with it at runtime passing in a flag as others have said. For writing to the console you can always use an outgoing port instead of Debug.log, and check the environment on either the elm or js side.
LT=Less Then, GT=Greater Then, EQ= equal They are used when one needs to define a ordering. (I've never used it myself) .False should be the boolean False. 
Are you put a dot in purpose? If YES, that was shortcut to access record with word after the dot, but you cant make a record using uppercase as field name. [https://elm-lang.org/docs/records#access](https://elm-lang.org/docs/records#access) `type alias Record = { LT: Bool, GT: Bool}` this is invalid `type alias Record = { lt: Bool, gt: Bool}` this is valid, and you can access the record with `.lt record` &amp;#x200B; If NO, that was a **custom type**, `type Gender = Man | Woman` **Man** and **Woman** is a value for **Gender**, just like **True** and **False** is a value for **Bool**, **EQ**, **LT** and **GT** is a value for **Order**. &amp;#x200B; [https://elm-lang.org/docs/syntax#custom-types](https://elm-lang.org/docs/syntax#custom-types) [https://package.elm-lang.org/packages/elm/core/latest/Basics#Order](https://package.elm-lang.org/packages/elm/core/latest/Basics#Order) &amp;#x200B;
I've got a problem where I'm using Random.Generator and Maybe types to do things like generate stuff from lists of possible options, and I keep ending up with data types like Maybe (Generator (Maybe a)), and it's getting annoying to work with. Is there any way to have some kind of combined data type, or any way to unweave something like this into a Maybe Generator a or something?
I've got a problem where I'm using Random.Generator and Maybe types to do things like generate stuff from lists of possible options, and I keep ending up with data types like Maybe (Generator (Maybe a)), and it's getting annoying to work with. Is there any way to have some kind of combined data type, or any way to unweave something like this into a Maybe Generator a or something? Also what happened to the slack, is it down?
Hi everyone! I am a bit of a newbie to Elm and I am having a bit of trouble understanding some of the types related to the Browser package. For example sandbox expects the following init : model , view : model -&gt; Html msg , update : msg -&gt; model -&gt; model But as far as I understand we implement these types using type alias? How can we make use of a sandbox if the types haven't been defined yet? Or am I missing understanding? Thanks! 
These are functions. This example will help: import Browser import Html exposing (Html, button, div, text) import Html.Events exposing (onClick) type alias Model = Int init : Model init : 0 main = Browser.sandbox { init = init, update = update, view = view } type Msg = Increment | Decrement update : Msg -&gt; Model -&gt; Model update msg model = case msg of Increment -&gt; model + 1 Decrement -&gt; model - 1 view : Model -&gt; Html Msg view model = div [] [ button [ onClick Decrement ] [ text "-" ] , div [] [ text (String.fromInt model) ] , button [ onClick Increment ] [ text "+" ] ] a few things to note: * First its good practice to write not only the function but also the type annotation. The compiler does not need it, but it will help once you need to debug. * the arrow "-&gt;" specifys a function. So init is actually just a constant value and not a function. * update has two arrows. it can be read as `(msg , model) -&gt; model` or as `msg -&gt; (model -&gt; model)`. Most often you want to say its a function that takes two inputs and returns a model. * Notice how the function types msg and model got replaced with the actual types Msg and Model. writing a type-name in lower-case means "any type" so `msg -&gt; model -&gt; model` would be the same as saying `a -&gt; b -&gt; b`, while `Msg -&gt; Model -&gt; Model` is equivalent to `Msg -&gt; Int -&gt; Int`.
Can you give an example?
I have a `form` that seems to me like it should work, but the compiler insists ``` This argument is a list of type: List (Html Msg) But `form` needs the 2nd argument to be: List (Html (Cmd Msg)) ``` My view and update messages look like this: ``` update : Msg -&gt; Model -&gt; ( Model, Cmd Msg ) update msg model = case msg of Name s -&gt; ( { model | name = s }, Cmd.none ) view : Model -&gt; Html Msg view model = case model.response of Just r -&gt; text r Nothing -&gt; form [ onSubmit getCsrf ] [ input [ type_ "text", placeholder "name", name "name", value model.name, required True, onInput Name ] [] ``` It seems to me that this `Cmd Msg` thing is related to the way I've set up my messages, but I'm struggling to understand how I could attach a cmd to my HTML elements. Where am I going wrong here?
Upvote x100 if I could. Excellent video. Thanks. :)
Proof Key for Code Exchange [https://tools.ietf.org/html/rfc7636](https://tools.ietf.org/html/rfc7636)
How can I examine an HTTP request created with the Http module? I have a server I'm testing which is accepting post requests from everything but elm, but every debug printing method I've tried just returns `&lt;internals&gt;`.
Use your browsers debugging tools. Firefox has by far the best ones. Go to your website, right click, hit inspect, and go to the netork tab. There you can see all requests being made and press one to see exactly what was sent and what response you got. 
Heya. An Http request in elm is actually just a specification for what you want the elm runtime to do so that it can make the request for you. It is done this way so that elm functions are pure and have no side effects. The runtime is the only place that side-effectfull code (such as making an Http request) can actually run. This means that printing it to the console using the Debug module would only show you the specification (if you could see inside it) not the actual request that is going over the wire. Therefor the best way is to use something like the dev tools in your browser to see what requests are being made by the runtime. You should be able to see the headers and body that is being sent, and hopefully from there be able to work out what needs changing. &amp;#x200B;
I'd also say this (meaning code splitting or multiple applications) is probably not the common solution. I'd also approach it with redundancy at first, and try to refactor as soon as I detect patterns. That's probably why you'd also for a good approach to start with. But I think applications can be different enough, so that different options can work. E.g. do you need the differentiation for authenticated and anonymous users? There could be a context with an optional User and it could be handled by a single route. Or unauthenticated users can rejected and redirected to login anyway. But there is also the case where you need exactly what you're doing right now.
Not the exact same thing but it's stuff like (using Random-Extra's Random.List.shuffle) somefunc : Int -&gt; Generator (List Int) [ 1, 2, 3, 4 ] |&gt; Random.List.shuffle |&gt; Random.map (List.map somefunc) and now i've got a Generator (List (Generator (List Int))) and it's a pain to work with, and I don't really know how to unwrap that to get say a Generator (List (List Int)) or flatten down to a Generator (List Int) or something.
You've got `|&gt; required "results" (list PeopleData)` as the last element of PeopleData, but shouldn't it be ResultData? There will need to be a ResultData parser to put here.
so ,i should i have a **separate** decoders for nested json structures ?? can you give me a example.
Take a little chunk of your json, something deep in the nesting. Make a decoder for that little bit, and so on as you work your way up. I'll see if I can come up with a concrete example for ya...
You don't have to, but I think its simpler that way. Write a resultDecoder function that's similar to your peopleDecoder function, except it decodes for ResultData. Then in peopleDecoder you can have `|&gt; required "results" (list resultDecoder)` &amp;#x200B;
Yea.I tried that ,but i am still getting the first error `The 2nd argument to \`expectJson\` is not what I expect: 95| , expect = Http.expectJson GotPeopleData peopleDecoder ^^^^^^^^^^^^^ This \`peopleDecoder\` value is a: Decoder PeopleData But \`expectJson\` needs the 2nd argument to be: Decoder String`
yes, except that a = a. So if you have Decoder Int then you need (Result Error Int -&gt; Msg). In your case you have a GotPeopleData function which is (String -&gt; Msg). You need to change it to be (Result Error PeopleData -&gt; Msg)
Thank you so much for helping me out.I think i am going to change the **model** of the app.
Is this a "magic eye"? If so do I need to stare in front or behind the image? Having trouble seeing it.
We pass an env flag down from JavaScript and store it’s value in main model. Then use `if model.env == “dev” then` etc in code. Production JavaScript has env set to “production”, works perfectly.
Yep it is. You may either cross your eyes (= stare in front) or go parallel (= stare behind) to resolve it. In the former case the intended words will appear sunken in, while in the latter case they will appear to pop out. The generation technique I use presumes that viewer will be doing the latter case, though (Parallel view = staring behind). :)
Take a look at Random.andThen. You have a Generator (List Int) after shuffle, so if you can write a function `List Int -&gt; Generator (List (List Int))`, or just `List Int -&gt; Generator (List Int)` that preserves the behavior you want, you can compose them and flatten the types with that. ``` exmaple_fn : (List Int -&gt; Generator ((List (List Int))) -&gt; Generator (List (List Int)) example_fn f = let shuffled_list = Random.List.shuffle [1, 2, 3, 4] in Random.andThen f shuffled_list ```
Thanks, that was exactly what I needed.
Hey folks, would love to get people trying this out! Let me know if you've any questions :)
out of curiosity, what led to the move from elm to reasonML?
This is the only thing people are interested in 😂. Our backend was in OCaml so we were predisposed to it anyway. But the Elm 0.19 removal of Native made it very difficult for us to continue in Elm. We initially tried to port, and after being 2 weeks and $10k in on that project, we decided to switch to bucklescript instead, where calling JS directly is still possible. 
Why do you feel elm needs an exit strategy? It would be just as unfamiliar for someone trying elm out to suddenly jump ship to ReasonML and bucklescript. The tool might make sense for you, but I'm trying to understand what drove you away from elm specifically.
When a business decides to pick a technology like elm, which doesn't have as much traction as say Vue or React, it can be useful for the tech's champion to say "if this doesn't work out, we wont have wasted the money as we can still do X". So if you want to try Elm, being able to say "if it doesnt work we can switch to ReasonML" might be useful. &amp;#x200B; For the why, see [https://www.reddit.com/r/elm/comments/ac7n3e/philip2\_an\_elmtoreasonml\_compiler\_paul\_biggar/ed5y9yb/](https://www.reddit.com/r/elm/comments/ac7n3e/philip2_an_elmtoreasonml_compiler_paul_biggar/ed5y9yb/)
Yeah that is understandable. Elm still has a ways to go in the interop side of things. I have no experience with ocaml. I picked up elm because I know a bit of Haskell. It's very interesting to see the ocaml side of fp. Cool project too!
Cool. I like this approach.
&gt; Since Elm is mostly a subset of OCaml Did you mean ReasonML is a subset of OCaml? Otherwise there is a big thing that I didn't know yet and I wouldn't mind to know more.
Will the talks be recorded?
Clear explanation, but posting to this subreddit is some choir-preaching. Have you posted to other subreddits such as https://www.reddit.com/r/webdev/ ?
I think /r/programming gets an interesting cross-section as well. That is my default when I want to talk to folks who are not using Elm at the moment.
I mean that almost all the features in Elm exist in the same form in OCaml, eg sum/product types, type aliases, functions are defined in the same way, both have modules, you have the same types (Option/Result for example). About 99% of features in Elm exist in a near-identical form in OCaml.
I really liked this post. I have some prior experience with React/Redux and am looking into Elm currently. Thought the color coding on the syntax and the direct comparisons between Redux/Elm code really helpful. Would definitely agree with u/beefzilla though, posting on other subreddits might gain more traction
Great suggestions, thank you both! I'll do that. I just posted in the Reactiflux Discord news-and-links, as well. And I'm exploring other communities that have active React/Redux groups, like [dev.to](https://dev.to), [hashnode.com](https://hashnode.com), etc. I hope these guides make Elm more accessible for some of those folks. I think that Redux shops that are looking for alternatives will find Elm really appealing if they have some nice resources to guide them through the learning and adoption of Elm!
Tracking because I'm interested in doing this but with [Mongo Stitch](https://www.mongodb.com/cloud/stitch). Will use Ports, and report back.
In addition, OCaml has a lot of features that Elm cannot do as well.
For example: mutation, side-effects, first-class modules, objects, and inheritance. I would personally make a distinction between "cannot do these things" and "does not do these things" but perhaps that is a matter of perspective.
Well that escalated quickly! I understand the frustration that elm does not provide features some want as well as the frustration that some people think the more features the better. I hope we can all agree on that any tool that enriches the elm ecosystem is awesome! And porting does not always mean moving away. It might also recognize the high quality of elm libraries and wanting to copy them to reason.
elmprogramming.com https://elmseeds.thaterikperson.com These helped me get started after going through this https://guide.elm-lang.org. 
You also have a course at Pluralsight, will that also be updated?
**Dont use those references, they are outdated!**
We are currently in a transition perioit, between version 0.18 and version 0.19. So all tutorial need to be slowly updated with 0.19. The best way to start is with https://guide.elm-lang.org/. Next it depends what you want to do. **Want to know more about the language?** 1. https://elm-lang.org/docs/syntax#custom-types 2. https://package.elm-lang.org/packages/elm/core/latest/ 3. https://medium.com/@ckoster22/advanced-types-in-elm-opaque-types-ec5ec3b84ed2 **Want to work on a little website?** 1. https://package.elm-lang.org/packages/mdgriffith/elm-ui/latest/ **Want to work a something visual?** 1. https://package.elm-lang.org/packages/joakin/elm-canvas/latest/ **Want to go on with tutorials?** 1. https://www.codefornerds.com/elm-using-0-18-tutorials-in-a-0-19-world/ 2. At the bottom you find a list of 0.18 Tutorials ;)
&gt; because that's how my mind already operates. Do u say this because you have a math / engineering background? Learning functional programming is typically only intuitive to these math / eng. folks. 
knowthen.com has a nice free one that'll get you most of the way. He's got a paid advanced one also if you want to go further. 
Do 0.18 and 0.19 are so different? Might be better if they jump a number and released a 0.2 version...
0.19 was a long time in the making. Mostly Packages and therefore namespaces have chaced. The Browser-Package is totally and a few function do not exist the way they did before. Also the documentation for 0.18 is no longer available (only copys of it), that might confuse newcomers.
I haven't heard that before, but to answer your question, yes. I have an engineering background. No degrees. But have worked in several engineering fields in various capacities. When I still considered going back to school, electrical engineering was the degree I most wanted to pursue. Mechanical engineering was a close second. But also Business and Network Engineering were subjects I'd considered.
Thanks for sharing! It was really cool to see how you used pattern matching in the function that converted the list of statements into the result! Glad I checked Reddit today 😄
oh cool, I wasn't aware of that, thanks for explaining
Elm bridge has a great tutorial and walkthrough of building an app. I believe it just updated to .19 recently too. Good luck!
Glad you liked it 👍
Link: https://elmbridge.github.io/curriculum/
yes, elm-mdc is current (0.19) and the developer is very helpful. It's based on Googles Material library
Yeah, I like this. I would say it would make Elm even more attractive, rather than less. I wish more new languages would offer exit strategies like this.
It's been on my mind as we want people to try out \[Dark\]([https://darklang.com](https://darklang.com)) once it's available, so we think a lot about what someone's exit strategy would be.
The logo is [part of the source code of the website](https://github.com/elm/elm-lang.org/blob/master/src/shared/Skeleton.elm#L99-L112) and has no separate copyright statement, so it should be available for use under the same terms as the rest of the website, [which is pretty permissive](https://github.com/elm/elm-lang.org/blob/master/LICENSE).
Logos and other forms of branding are not covered by copyright laws, they are covered by trademark laws. Which is why for instance you can fork Firefox but you can't name your fork Firefox or use their logo.
That's a good point, but I don't think trademark law comes into play here as it's not going to be used on a product or in a way that might cause branding confusion. As far as I understand trademark law at least, which honestly isn't much.
It actually does. What doesn't cause branding confusion is for instance the Linux dish soap. But in that case we're talking about Elm the programming language in both cases and reasonable people could believe the pins come from Evan or No Red Ink so trademarks law applies.
Right, in the instance where it's being sold I suppose it might cause confusion. But could that not be countered by clearly saying that it's not?
Like naming your product “firefox but not from mozilla”?
No, because I don't think there's any problems with the "product" itself. Noone is going to confuse a pin with a programming language. But at the point of sale you might be confused into thinking you're supporting the development of Elm by buying the pin. That is a problem, and it's one which I think trademark law is meant to address.
The problem trademark law is meant to address is provenance. Where and who is this thing from? And if you get a Elm pin it's very unclear if it's from the project or not. And the problem with trademarks law is that it requires you to be very aggressive in defending your trademarks or you may lose them. If the pins are not sold then everything is fine as no one is likely to be confused about what they bought. But otherwise he needs a license to do his pins in Evan's (or is Elm under a fondation?) thus make it official. Maybe the project could set up a an official shop for people who want swag. That would be most convenient and safest for everyone involved.
Yeah, that's pretty much my understanding. If it's just the act of sale that makes it problematic, then explaining it clearly at the point of sale should dispel any confusion. The underlying problem would be solved, but I don't know if that actually holds up legally.
I never realized that Jude 2 would be the second verse of the only chapter of Jude. Thanks for sharing this!
The Official Guide gives a pretty good explanation of modules: [https://guide.elm-lang.org/webapps/modules.html](https://guide.elm-lang.org/webapps/modules.html) The "Using Modules" section gives examples of importing. How to use what's imported is shown in the code comments under each import statement example. Note that when you have imported a module, you can use any function or type it has exposed. Having different kind of import statements only affects how you reference those functions. For example, you can do `import Html exposing (div)` and still call `Html.p`, `Html.h1`, and `Html.div` because all of those functions are exposed in the module. The "exposing" clause in that import statement only makes it possible to call `div` without specifying the module, and is completely optional.
Lets say you have a module: module SomeModule exposing(something,SomeType(..)) type SomeType = Car | NotCar something : Int -&gt; Int something a = a + 42 By using (..) by the exposing type you actually also expose `Car` and `NotCar`. If you now use `import SomeModule`, it lets you use all functions, datatypes and aliases that are exposed by that module: so you can call `SomeModule.something 0`. By saying `Import SomeModule exposing (something)` you can call the function directly with `something 0`. It you want to use `Car` or `NotCar`, you must use (..) again: module MyCar exposing (myCar) import SomeModule exposing (SomeType(..)) myCar : SomeType myCar = Car alsoMyCar : SomeModule.SomeType alsoMyCar = SomeModule.Car *Here is a rule of thumb:* Only use `Import ... exposing (...)` for Types or **very** essential functions. Do not start exposing every imported Function. 
Wikipedia thinks it is public domain: [https://en.wikipedia.org/wiki/Elm\_(programming\_language)#/media/File:Elm\_logo.svg](https://en.wikipedia.org/wiki/Elm_(programming_language)#/media/File:Elm_logo.svg) &amp;#x200B; So you should be able to do what you want with it.
Evan says he owns the copyright. 
Thank you for trying to help me out though!
The rationale is this: &gt; This image consists only of simple geometric shapes or text. It does not meet the threshold of originality needed for copyright protection, and is therefore in the public domain. Although it is free of copyright restrictions, this image may still be subject to other restrictions And "other restrictions" in this case would be trademark law, for example.
I am currently doint a tutorial on [https://elmprogramming.com](https://elmprogramming.com). I am using Elm 0.19, but in the tutorials, an older version is used. Back in older Versions, the Html.Attributes.style had the following type signature: `style : List ( String, String ) -&gt; Attribute msg` Now I'm trying to apply a style to an h1 tag: `h1 [ style [ ( "padding-left", "3cm" ) ] [ text "Sign up" ]` This generates the following error messages in the reactor: &gt;\-- TYPE MISMATCH ------------------------------------------------ src/Signup.elm &gt; &gt;The 1st argument to \`h1\` is not what I expect: &gt; &gt;40|&gt; \[ h1 \[ Html.Attributes.style \[ ( "padding-left", "3cm" ) \] \] &gt; &gt;41| \[ text "Sign up" \] &gt; &gt;This argument is a list of type: List (String -&gt; Html.Attribute msg) But \`h1\` needs the 1st argument to be: List (Html.Attribute msg) &gt; &gt;\-- TYPE MISMATCH ------------------------------------------------ src/Signup.elm &gt; &gt;The 1st argument to \`style\` is not what I expect: &gt; &gt;40| \[ h1 \[ Html.Attributes.style \[ ( "padding-left", "3cm" ) \] \] &gt; &gt;\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^\^ &gt; &gt;This argument is a list of type: List ( String, String ) But \`style\` needs the 1st argument to be: String # How is Html.Attributes.style used in Elm 0.19?
I've found the answer myself. [Html.Attributes.style](https://Html.Attributes.style) doesn't take a list of tuples anymore, but two Strings instead. So the type signature seems to be like this now: `style : String -&gt; String -&gt; Html.Attribute msg` The first argument is what I've put into the first tuple position, the second argument is what I've put into the second tuple position. The code with the h1 tag now looks like this: `h1 [ style "padding-left" "3cm" ] [ text "Sign up" ]` It looks even prettier than before!
I was reading the official guide before I posted. The import function information wasn't quite clicking. That's why I posted here. The guide is good, but like I said, I'm altogether new to this paradigm. But thanks for the information regardless. The helped clear up some of my questions. How import applies with exposing. :)
Great you figured it out yourself! For your next question, you could do: myStyles = [ style "color" "blue", style "padding" "left" ] -- and use it like this: h1 (myStyles ++ otherAttributes) [ text "Sign up" ] -- or h1 (List.concat [myStyles, otherAttributes]) [ text "Sign up" ]
Hey /u/joepro83, welcome to programming and especially to elm. I agree with the explanations given so far. As you are new to programming maybe some of the following, more general thoughts might be interesting to you: What you call *premade*(by other people) modules are also often called *external dependencies*. Your own modules are therefore called *internal dependencies*. In some cases you might see *indirect dependencies* in your *.elm* file, which are *external dependencies* of *external dependencies*. Modules have different names but are important in almost every programming language. The way they are treated are often a defining characteristic of that programming language. Take the Go programming language: one of the main motivations for it’s creation was the fact that the time to build very huge projects (in this case at Google) in *C++* was becoming a productivity blocker. It was often several hours. One reason for that was engineers imported whole modules while they needed only few functions. That’s why Go does not allow imports to be unused. Use them or remove them. Since the version 0.19 elm has it built into the compiler that imported but unused functions are automatically ignored. This is spectacular and very rare amongst programming languages. Because of it, the ‘js’ that the elm compiler produces is now smaller than before, if you use `elm build —-optimize`. But that does not mean that you can now always import with *exposing (..)*. I you explicitly list all the functions you want to import it is easier for you or others where a function came from. You are right that modules are essential to programming, but in elm you have to worry less about splitting your own programms into small modules than in some other programming languages. In those programming labguages small modules are used to limit which global variables can be modified my multiple functions. In elm a function can only modify what it returns (it is so called *pure*), so you can put more functions into a model. I hope that was useful to you, feel free to keep asking.
I appreciate your response! Can you provide a comparison example of how to explicitly/properly name the functions you want imported? The desirable way, vs the less desirable way/s.
I keep thinking this should be really simple but it's like my brain is blocked. How do I make a function that takes a function with some return type A and a function that maps return type A to return type B, and returns a new function with return type B? type WI = WI Int foo : x -&gt; y -&gt; Int foo x y = 1 makeWrapped : (a -&gt; Int) -&gt; (a -&gt; WI Int) makeWrapped fun = ... wifoo = makeWrapped WI -- And then (wifoo 2 3) should return WI 1 Basically, how do I fill in the dots such that `makeWrapped WI` is `(\x y = WI (foo x y))`
That's close to function composition, you could almost implement it like this: makeWrapped : (a -&gt; Int) -&gt; (a -&gt; WI) makeWrapped fn = fn &gt;&gt; WI Although it would not compile in your example. Maybe it would help to see the code you're trying to fit it into?
This compiles: module Main exposing (main) import Html type WI = WI Int foo : x -&gt; y -&gt; Int foo x y = 1 makeWrapped : (b -&gt; c) -&gt; (a -&gt; b) -&gt; (a -&gt; c) makeWrapped fun2 fun1 = fun1 &gt;&gt; fun2 wifoo : x -&gt; y -&gt; WI wifoo = foo &gt;&gt; makeWrapped WI -- And then (wifoo 2 3) should return WI 1 draw : WI -&gt; String draw wi = case wi of WI a -&gt; String.fromInt a main = Html.text &lt;| draw &lt;| wifoo 2 3
Ooo, interesting! The idea of not using a game loop intrigues me, particularly as you point out it makes it good for boardgames. I may use this to test out some boardgame ideas I've been working on. Thanks!
Nice work! BTW, the links between modules in the package docs lead to 404s, I think you need to remove the leading slash in them
Thx. Its now fixed
Where are you based? :)
Hey me too! I'm in Boulder, CO.
Think of Elm like a Haskell on the frontend. But beware that that when I say like a Haskell it's a stretch. Remove typeclasses(you still have a type system but without a way to define your own), list comprehensions and guards from Haskell and you will get closer to Elm. Add fixed architecture and a great ecosystem just for frontend and you get Elm. I don't know Scala, so can't give you that one. A comparison like that in my opinion is a waste of time. Just use the language for a week and you will get the gist of the language.
Sydney, Australia.
Can you isolate the behavior you are seeing in a [SSCCE](http://sscce.org/)? [Here is minimal example that show that communication both ways happens](https://ellie-app.com/4rPhJbrJmVza1) immediately after the startup. Try to adjust it until it shows your issue. 
Ah, cool! We’re looking for Elm folks in Stockholm, Sweden. I hope you find something nice! :)
I ran into a problem that seems similar to this. For me, I was using the port too soon relative to the initialization of the elm part of the application. I ended up solving it by having elm emit an "initialized" event through a port that I would then use to signal to JS that Elm was ready to receive messages.
I would say Elm has way bigger community and collection of libraries and tools than Scala.js. Also I would imagine runtime performance and build/compile speed would be way better for Elm, but I don't have any sources for that.
Hey! In 0.19, `Html.Attributes.style` takes a string as a key and a value, and you can use as many as you need—they'll combine to a single style tag. So your example: h1 [ style [ ( "padding-left", "3cm" ) ] ] [ text "Sign up" ] now would look like this: h1 [ style "padding-left" "3cm" ] [ text "Sign up" ]
I know this thread is a little old but I wanted to add something for others who found it through google like I did. There some big caveats with building a PWA (progressive web app) right now. From my experience in building a PWA the current state of browsers essentially means that it is only a viable strategy if your target is only chrome on Android. On iOS the service worker implementation is severely restricted and missing a ton of the spec. You can't store more than 50mb on iOS. You can't do *any* push notifications on iOS. Your app may be deleted at any time on iOS potentially breaking your offline experience. You can't prompt a user to "install" the app to their home screen on iOS. More or less only Chrome for Android is good enough for a usable PWA at the moment. That might change in the future but it took Apple a very long time to even add the broken implementation they have now. I don't think there is much of a business case for Apple to support full PWA technology as it could take away from their App Store revenue so I wouldn't hold my breath for it to be a viable strategy on iOS anytime soon.
Hope you find something! You may also want to check out https://github.com/FidelisClayton/elm-jobs and post in the #jobs channel on the Elm Slack.
I have a lot to say on this. Both on practical and philosophical side. &amp;#x200B; First, I answered in your topic and gave the link to the book. There I said that the book is 70% done with an update. It's actually now has been updated and I am starting to read this book again. &amp;#x200B; Second, recently, like a month ago or so, I asked in Haskell thread about the problem I had. So I got the answer, but someone pushed the guy who gave the answer to delete his post so that I solve the problem myself. I got butthurt about it. But then I was like why am I being butthurt? It kinda doesn't matter if someone is being a dick and the same time it does matter. Do you know what I mean? Later on, I posted another problem on Haskell thread and some people went above and beyond in explaining things. &amp;#x200B; Third, I can relate to your situation because I'm in a similar situation. I'm learning Elm (and Haskell, and Elixir). &amp;#x200B; I didn't get discouragement from other people not to learn these languages. Probably because I didn't ask other people. But I kinda got discouraged when I read that functional programming is too hard, which is not true. &amp;#x200B; Evan, jokingly told that his mother also wanted to learn Elm but decided to learn Python first. When I heard it I really laughed out loud. Because it's funny and because I thought in a similar way. &amp;#x200B; [https://www.youtube.com/watch?v=uGlzRt-FYto&amp;t=790s](https://www.youtube.com/watch?v=uGlzRt-FYto&amp;t=790s) &amp;#x200B; (Here's the link where Evan tells about his mom wanting to learn Elm. The talk is good.) &amp;#x200B; \*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* &amp;#x200B; Fourth, right now I see that Elm is moving in the right direction and people are making fresh materials for beginners. &amp;#x200B; For example, here are two videos which are beginner friendly, and which are practical and really good. They were recorded by Jack Franklin, in the comments he mentioned that he wants to make a course on Elm. He probably is alrady doing it. Maybe I should ask him and become a beta tester. &amp;#x200B; Advent of Code in Elm part 1: [https://www.youtube.com/watch?v=pF8gSF5QlP8&amp;t=2s](https://www.youtube.com/watch?v=pF8gSF5QlP8&amp;t=2s) &amp;#x200B; Advent of Code in Elm part 2: [https://www.youtube.com/watch?v=HtVMt4cTPfo&amp;t=713s](https://www.youtube.com/watch?v=HtVMt4cTPfo&amp;t=713s) &amp;#x200B; And Fifth, if you'd like we can organize a small meetup group for learning Elm. I'm not a mentor and I'm not super good. Nevertheless, I think having a group of like minded individuals sharing what they have learned and giving each other encouragement is beneficial. I don't know how it will ACTUALLY workout. But it doesn't hurt to try. So I will DM you. &amp;#x200B;
I’m somehow having issues installing the elm-ui package. I was thinking ‘elm install elm-ui’ would do it, but that doesn’t work. It’s listed as elm-ui in the package repo (https://package.elm-lang.org/packages/mdgriffith/elm-ui/latest/). What am I screwing up? 
`elm install mdgriffith/elm-ui` is what you want. 
Thank you!
Thanks! Yes, a compose function is what I was looking for, but couldn't find one, and then I forgot how to make one. And I didn't see it's an operator.
I've used both extensively. Here are my impressions: &amp;#x200B; Scala.js: \- easier javascript interaction via facades (whatever JS has bad, can easily be brought within your Scala codebase) \- sa very flexible language though not easy to learn and use effectively, it supports imperative and oop paradigms \- great IntelliJ support \- the toolchain is often buggy and incomplete, can take hours just to set up a new project (and I'm used to sbt...) \- dependencies management via webjars is painful (usually not up-to-date libraries, facades often incomplete) &amp;#x200B; Elm: \- robust toolchain (elm-reactor just works) \- probably the best package manager available on the FE \- you get a solid and fast UI framework with the language \- one of the simplest languages available \- javascript interaction can become very verbose using ports only \- ecosystem not yet complete, and JS libraries cannot just be imported and used &amp;#x200B; I would go Elm for most of the use cases, to be honest.
Same here. Solved the same way :-)
Thank you for taking the time to answer- I really appreciate your perspetive. As someone who is somewhat of an expert in scala and has used scala.js for a mid-sized project- would you mind if I disagreed with you a bit? It doesn't take me hours to set-up a project. I just use vmunier's sbt-play-scalajs and even otherwise it isn't that big deal once you've done it the first time- copy paste. So I wonder what keeps you stuck- since you do sound like the kind of person whom I wouldn't expect to have problem. I also found Scala very easy to learn. Scala-Tags (and seemingly laminar) created by /u/lihaoyi (and /u/raquo) are both very solid and fast. I will check out elm on a small project maybe because you may just be speaking relatively... Thanks again! 
If you inspect the `Elm` object in your browsers JS console, it'll show all the possible programs that you can initialize and I also believe the `ports` member as well. These programs are named according to the file names that they are compiled from. `Main` is a common one since that makes sense as an entry point into an apps main logic. In your case you would simple `elm make` 2 separate elm files and include the compiled JS files into a single page. This will register the programs under the global `Elm` JS object and allow you initialize them how and where you need them.
So I would have something like this right ? var app1 = Elm.TreeApp.init({ node: document.getElementById("tree-app") }) var app2 = Elm.FileContentApp.init({ node: document.getElementById("file-app") }) And then, both program would communicate through subscriptions is that right ? Also, is this design correct in your opinion ?
That would work, but communicating through subscriptions may be a less fun coding experience than putting it all in one app. I suggest you experiment with both options and let us know how it goes.
That's correct, if you keep the programs separate on the page the only way for them to communicate is through ports. This is a more complicated approach, but can be a more realistic scenario for people who migrate parts of a UI to elm within an existing architecture. The single program approach is easier in the sense that data communication is simpler, but it might not be simple or possible in certain designs. If you are creating this app from scratch I would say to just put both parts of the screen in a single program for sanity reasons.
I see, thank you, I'll give it a try then :-)
oh ok. This is a bit counter intuitive to me as I thought it would be harder to have one single program. Communication sounds harder with multiple programs but at least I have separate modules that are easier to reason with. but that's only my intuition as a beginner :-P &amp;#x200B;
Since you already have them separated, it wouldn't be hard to combine them into a single program. You would just setup another Elm module that references both of them and that container module can hold the shared data and just pass it down to your current programs. You just have to rewrite your current programs to not be programs but regular modules that the container program uses.
for anyone struggling with the same issue, I found exactly how to solve it: [https://www.elm-tutorial.org/en-v01/02-elm-arch/07-composing-2.html](https://www.elm-tutorial.org/en-v01/02-elm-arch/07-composing-2.html) for some reason this is not in the official guide but this is exactly what I was looking for. Composing components :-)
I understand that, if you are already "somewhat an expert in scala", whatever problem I had with sbt would sound trivial to you. Also, I never used sbt-play-scalajs but rather followed the instructions on scalajs website when I had to start a project (3 so far). Here are some examples: 1. to add a webjar, I need to know the exact version which will work with the rest of my codebase and libraries (in elm I ask \`elm install a-package\`, and it takes care of everything) 2. a typo somewhere in the configuration file is not always easy to detect (I remember the \`%\` vs \`%%\` to specify a version, for instance, leading to wrong versions without build error) 3. integrating a JS toolchain (gulp + requirejs in my case) via sbt tasks was, to me, hard to figure out and undocumented - also, the bundled Rhino engine is very slow compared to Node 4. on any JS related issue, most of the time I got a run time exception 5. Facades are not always available, compared to what you can find for Typescript for example The fact that you found Scala very easy to learn makes me want to ask you what was your programming experience by the time you learned it. I found it easy to start with in 2013 (I was a junior JS dev with some Python and C experience) though once I began mixing FP and OOP plus some features like implicits, it became quite hard to read and understand. &amp;#x200B; \&gt; you may just be speaking relatively Indeed :-)
The "no runtime guarantee" is supported by Elm's language choices. The biggest ones I can think of are static types, functional purity, and with 0.19 the blacklisting of using JS code outside of the elm/core package. You can still run into runtime errors, but they are not going to be something like NullExceptions or other unexpected edge cases. You will instead encounter business logic errors where you don't handle a certain state properly.
There are no runtime errors in elm because all of the semantics in Elm do not lead to errors. In JS for example you can throw an error, you can reference a variable that hasn't been defined, etc. etc. In Elm there is no such thing. I even out of curiosity tried division by zero, which in other languages would throw an error. Elm like JS will cheekily return "Infinity". There used to be Debug.crash - but now that is gone. In Haskell there are unsafe operations and actual exceptions, so you can have errors if you want. But you can easily avoid them if you want too (you could probably write a linter to do it). Although the issue is that you don't know if the libraries you are using have done the same. &amp;#x200B; &amp;#x200B;
Go for Rust. You know what they say, if it compiles it runs (most of the time anyway). But that's not from my experience, cause I have none. That's just what I've heard and Rust is on my list of languages that I want to know.
Just as an example of how the design of the Elm standard library make runtime errors impossible, compared to e.g. Haskell. In Haskell the function to get the first element in a list has the following signature: head : List a -&gt; a Now, what would happen if you apply this function to an empty list? The type definition says it will *always* return some element of the `a`, but that is clearly not possible because an empty list has no elements. The solution? Haskell lets the application crash. This is a bad thing, because it is rarely what the programmer expects. Now compare it to the `head` function as defined in `elm/core`: head : List a -&gt; Maybe a This function handles the situation by returning a `Maybe a` instead, making it clear to the developer that they need to handle the fact that there may not be an element in the list. These sort of subtle design decisions in the Elm standard library (and in the community packages at large) is what truly make runtime errors impossible, because they communicate all the possible outcomes of the function and also ensures that the developer properly handles all the cases (and before Elm 0.19 it was even possible for the developer to *choose* to let the application crash)
 The danger with Rust is that it's so easy to unwrap and if you don't later come back to remove it, it could be a source of a panic (program crash). Now, if you're not familiar with unwrap, you may be wondering what it means. In Elm, we have the Maybe type. In Rust we can unwrap that maybe and get the `Just` value. But, be careful, if there's Nothing in that Maybe, the program will panic. Rust isn't as safe as Elm but I find the programming experience similar because of its super friendly compiler which was inspired by Elm. If you want a Rust backend for your Elm apps, [Rocket](https://rocket.rs/) is a good choice.
Elm does have runtime errors, albeit very rarely: - Although integer division `1 // 0` does not crash (it returns 0), the modulo function `modBy 0 1` does crash. By the way, float division `0 / 1` returns infinity, even if you convert the result to an integer afterwards. Thus Elm has three different answers to division by zero: zero, infinity and crash, depending on how you try to compute it. - Comparing two functions for equality crashes, unless the two functions happen to be the exact same reference. Of course, in a Turing-complete language, checking equality of functions is not possible in all cases. - Lastly, as Elm is Turing complete, you can write infinite loops, which are kind of like crashes, except you won’t be alive long enough to see it.
Interesting problem! Elm's nature is to try to achieve a state which is the one single source of truth, so that your view and your local state(s) will \[never get out of sync\]([https://www.youtube.com/watch?v=IcgmSRJHu\_8](https://www.youtube.com/watch?v=IcgmSRJHu_8)). At the same time, intrinsic to modern development/organizational processes is to try to achieve autonomy between teams and therefore, you would want to split concerns between apps and codebases, so different teams can handle different apps. &amp;#x200B; This can seem like a direct contradiction, and should probably be discussed properly in your said team. For a hobby project on your own, I'd suggest keeping the apps as one app.
Very nice :) I have been thinking about not using a game loop too so I can utilize the debugger, glad do see it in action :)
Null Safety in Kotlin lang comes to mind.
https://github.com/Namek/elm_components_example
Json.Decode.decodeString Json.Decode.string "\\"I said \\\\\\"Hello\\\\\\"\\""
Here's an Ellie that shows how the JSON string would need to be escaped in Elm and what it looks like pre- and post- decoding: https://ellie-app.com/4vvfGQ6sy49a1
Thank you so much for your well written answer!
No plans to update it for now.
Very nice. Logic works flawlessly. I would improve UX, like showing out placeholders for clickable places and a button to restart without having to refresh the page.
I just want to note that partial functions like head in your example are not only actively avoided in the Haskell community/ecosystem, but people actually go as far as opting into 3rd party standard libraries like Protolude and ClassyPrelude instead of using the built-in Prelude. 
Cool. I had fun with this. I agree with mo_po, that you should have a hover state lines that you would click, like a light gray.
Looks pretty cool. I built a multiplayer version of it, when I was learning Elm two years ago: [https://www.reddit.com/r/elm/comments/5vxpxu/i\_build\_a\_multiplayer\_up\_to\_5\_players\_version\_of/](https://www.reddit.com/r/elm/comments/5vxpxu/i_build_a_multiplayer_up_to_5_players_version_of/) but havent touched it since :D
Besides other suggestions that were made here, I would also include a short descriptions about the rules of the game
Hey, I've been wanting to do a talk for a little while now but I am a little intimidated by the whole process. Is there any chance I could receive some feedback on my CFP application?
I feel like all the Elm jobs are in Europe :-(
Maybe that perception is a promising sign. When I graduated in 1992, it seemed that all the object-oriented programming jobs were in Scandinavia and Japan. (Although I did attend an OOPSLA conference in Washington D.C. in 1993, so my perception must have been skewed).
I praised and talked about Elm for a long time at my old job and we finally ended up using it for an internal admin interface. Here at M we are much fewer developers and we are earlier in our journey. People where excited to try it so now we’re using it in 2/3 projects! Can you introduce it at your current job?
Haha I'm close, just have to figure out how to embed in the angular-react-flash monstrosity we have :-)
Good luck! :)
Thanks!
What's 'TEA' mean in some of the results?
Hi! Totally undersand it can feel that way. Members of the planning team who aren't on the selection commitee would be happy to provide some basic feedback! Email me at the conference address hello @ elminthespring.org and we'll connect. :) 
These crashes are not by design though, they are surely bugs that can be fixed in the compiler? Where as crashes in JS, Haskell etc. are by design. &amp;#x200B;
Well, I‘m not sure. `modBy` explicitly calls (an internal version of) `Debug.crash`, so it kind of is by design. Function equality simply is undecidable, so there is not much you can do. You could add another Elm pseudo type class for types with equality, but that comes with other problems: A combination of equality and other type classes is probably quite common but Elm has no support for expressing that (unlike Haskell). Also, custom types currently don’t get type class instances but they’d need equality, I think. The infinite loop one is a semi joke, but without giving up on Turing completeness you can’t avoid that.
Well you could have a number of conditions, each of which return a Maybe String. Then at the end filter for only the Just values. let a = [ if password.length &lt; 8 then Just "too short" else Nothing , if name.length =0 then Just "no name" else Nothing] error = List.filterMap identity a in ... &amp;#x200B;
There is a couple steps to how you could do this. 1. Create a Error option type 2. Add a list of Errors to the model type (or optionally some error state type that holds the list of errors) 3. Create a function for each error check that takes the model (or error state) and returns the modified object 4. The update function would send the model/error state through the error check functions and return the final version So it would look something like this: (consider this rough pseudocode) type Error = PasswordTooShort | PasswordTooSimple | NameMissing | TooYoung -- add an error to the model addError model error = { model | errors = error::model.errors } checkPasswordLength model = if (String.length model.password) &lt; 8 then (addError model PasswordTooShort) else model --add methods for the other checks checkErrors model = model |&gt; checkPasswordLength |&gt; checkPasswordComplexity --etc Now you don't actually need to do it exactly like that, but that is how I would do it. Also, if you only wanted it to check one error type at a time you could make the error list something with a bit more state that the various check functions could look at. As for a general approach, I think it is fine to think through how you might accomplish the same task in javascript first. Then the next step is to look at what you have and see how to modify it. Basically look for ways to turn things into a pipeline. In this case you can see that the javascript could is centered around a list and that you start with a empty list and add things to it as needed. That means you could easily wrap each of the if statements in a function that takes a list and that starts to look very similar to the elm code.
In JS you have an imperative way of building the `errors` list, step by step, statement by statement. Elm is declarative and as such, the best way to build the errors list is to take a list of tests, evaluate them against some data and then filter them for errors. validate : Model -&gt; List String validate model = [ if String.length model.password &lt; 8 then Just "password is too short" else Nothing , if String.empty model.name then Just "name is empty" else Nothing ] |&gt; List.filterMap identity For the purpose of the tutorial, this is enough. If you want to be more sophisticated I would recommend to take a look at [elm-validate](https://github.com/rtfeldman/elm-validate). Take a look at the source code of that library, it is less than 200 LOC and it is very well written. 
There would be my way of dealing handling it: ``` type alias Model = { password : String , name : String , age : Int , errors = List Error } type Error = PasswordTooShort | PasswordTooSimple | NameMissing | TooYoung checkAge : Int -&gt; List Error checkAge age = if age &lt; 18 then [TooYoung] else [] checkName : String -&gt; List Error checkName name = if name |&gt; String.isEmpty then [NameMissing] else [] checkPassword : String -&gt; List Error checkPassword password = if (password |&gt; String.length) &lt; 8 then [PasswordToShort] then password |&gt; checkPasswordIsComplex validate : Model -&gt; List Error validate {password,name,age} = [ age |&gt; checkAge , password |&gt; checkPassword , name |&gt; checkName ] |&gt; List.concat ``` **A few notes:** * Use a `Error` type instead of a `String`, let the compiler know as much as possible about your program. It will pay off in the long run. * **List Error vs. Maybe Error** normally you would like your checks to return a `Maybe Error` but by using `List Error` instead, I can take use of `List.concat` without needing to add a `addError` function like /u/ForShadow did. If you have any more problems or follow up questions, please ask.
I would even argue to always go for elm-validate. Anything else is just recreating the imperative way in a functional language, which will only lead to headaches.
It's a nice library but `ifNotFloat` is broken. Very simple fix but the pull request isn't accepted. So I've just taken the file and put it as my own library. Tempted to make my own repo with the fix in it. 
Go is fairly safe however isn't in the same category as haskell, rust and Elm. Still easy to get segfaults
How is the progress of elm as a language? Looking at the github and patch notes, it seems to be a little forgotten/stagnant. 
* SPA - Routing is done in Elm so elm is holding the state no problem. * MPA - the backend is holding the state and communicate through cookie session. For example you will store something like SESSION_ID in the cookie. Other unimportant stuff you use local storage
Thanks.
Is it old AngularJS? If so, this might help on that front. &amp;#x200B; [https://www.npmjs.com/package/angularjs-ng-elm](https://www.npmjs.com/package/angularjs-ng-elm)
The Elm Architecture
there's progress being made! We had the big 0.19 release in August, and since then the focus has been more on libraries that support the new capabilities of the compiler than in the language itself.
Four questions, and feel free to answer anywhere from one to all of them: 1. What does a typical development environment look like? Let's assume something like VSCode. I'm loosely familiar with React dev environments with tools like Gulp, but how does that look for Elm? 2. I've been using a few tutorials and video series, but I'm finding that a lot of the content is focused on how "weird" (to most devs) the FP paradigm is, so most of what I've seen so far is super basic. Are there any guides or video series out there that take a quicker approach, getting straight to things like consuming APIs and actually building a good SPA? 3. How does everyone organize their projects, especially when also developing a backend? Two projects, one for each part? And then for frontend, your typical dist directory for the transpiled code? 4. What does everyone do for styling? I've heard about elm-ui, but it appears out of date. Is there an alternative, are we using SASS, or is it conventional to just use modern pure CSS?
&gt; 1\. What does a typical development environment look like? I don't know if there is such a thing as a "typical development environment". Some prefer a build system like webpack or gulp. Both have plugins for Elm. I've also seen some people using Parcel. Some prefer the simplicity of scripts that just recompile everything. &gt; 2\. [...] Are there any guides or video series out there that take a quicker approach, getting straight to things like consuming APIs and actually building a good SPA? [elm-spa-example](https://github.com/rtfeldman/elm-spa-example) comes with [a full writeup](https://dev.to/rtfeldman/tour-of-an-open-source-elm-spa). It was created by a senior Elm developer that is also part of the Core Team. &gt; 3\. How does everyone organize their projects, especially when also developing a backend? Again, no official guideline. It also depends a lot on the type of backend and how the app is integrated. I've seen both separate repositories for frontend and for backend. I tend to favor a single repository for the entire project. The scale of the project might also play a role. There are small SPAs and very large SPAs. &gt; 4\. What does everyone do for styling? I've heard about elm-ui, but it appears out of date. Again, no obvious choice. Some use handwritten CSS, some use SCSS with whatever structure they like. Some use `elm-css` and some use [elm-ui](https://github.com/mdgriffith/elm-ui) which is fine and has a very interesting approach that a lot of people like. The `elm-ui` that's out of date is [an unpublishable library](](https://elm-ui.netlify.com/)) from before `0.19`. The author of that library moved on and [created his own language](https://www.mint-lang.com/). 
1. Thanks for the mention of the Elm plugins for webpack and gulp. I figured those existed, but it's good to hear confirmation. I'll probably set something up with Gulp, in that case. 2. That is **exactly** what I was looking for. Something insanely above my head that isn't a "starting point" but rather uses the full power, idioms, and architecture of the language. Thank you for this. 3. I figured as much. No worries. 4. Thank you for clearing the elm-ui matter up for me; I've been super confused by this. On that note, what is "an unpublishable library" in this context? And why did the author bother inventing yet another language?
Hi! My question is how can a function be of type `Task` if it never fails? Like [`Time.now`](https://Time.now)? Why is it lumped as a `Task` instead of the data type of the successful result? For context, I was working through the [Time and Subscriptions](https://guide.elm-lang.org/effects/time.html) section of the Elm Guide which lead me to the docs on the [Task.perform](https://package.elm-lang.org/packages/elm/core/latest/Task#perform) where the type signature, specifically the `Task Never a` part, got me wondering about the above. I'd appreciate any help or ideas as to where to look for answers. I tried reading more on the `Never` and `Task` types and I tried googling, but have not found an answer that sticks to me. Perhaps I was too literal when reading, but I'm not sure.
I get runtime errors... TypeError: domNode is undefined[Learn More] dotsandboxes:3626:6 _VirtualDom_addDomNodesHelp https://martincapodici.com/elm/dotsandboxes/:3626:6 _VirtualDom_addDomNodesHelp https://martincapodici.com/elm/dotsandboxes/:3634:8 _VirtualDom_addDomNodesHelp https://martincapodici.com/elm/dotsandboxes/:3634:8 _VirtualDom_addDomNodesHelp https://martincapodici.com/elm/dotsandboxes/:3634:8 _VirtualDom_addDomNodes https://martincapodici.com/elm/dotsandboxes/:3550:2 _VirtualDom_applyPatches https://martincapodici.com/elm/dotsandboxes/:3657:2 _Browser_document&lt;/&lt;/&lt; https://martincapodici.com/elm/dotsandboxes/:3947:16 updateIfNeeded https://martincapodici.com/elm/dotsandboxes/:3982:56 TypeError: undefined has no properties[Learn More] dotsandboxes:3626:6 
Ah of course! Thanks.
&gt; On that note, what is "an unpublishable library" in this context? There are some undocumented technologies that are reserved for the implementation of the core libraries. Before `0.19` they could be easily used for implementation of libraries but those libraries would not be able to be published without being whitelisted first. If you want to read more about this take a look at [this post](https://discourse.elm-lang.org/t/native-code-in-0-19/826). &gt; And why did the author bother inventing yet another language? [Here are some of the author's thoughts](https://news.ycombinator.com/item?id=17165460). 
A `Task` is something that the computer should to. And it will come back to you once its done with the task. For example the `Time.now` could be described as "Hey computer, could you please figure out what time it is?" and then the computer starts calculating and a few milliseconds later (I'm exaggerating) it will return the answer via the update function. `Task.perform` performs a Task. So the Task alone is just a description of what to do. Something like `Time.now` should not fail: the computer should always know what time it is. That's why `Task.perform` only allows Tasks that do not fail. Now why is `Time.now` not a normal function? That's because Elm is a pure functional language. This means in particular that every function must ALWAYS return the same result. The result of `Time.now` is not pure: it dependents on the current time. So Elm is actually in that is passes all inpure functions as tasks to the computer. So maybe you are wondering "why do you mean with the computer". Elm lives on top of JavaScript. So whenever it lets the computer do something, its actually just calling some JavaScript code.
Elm is side-effects free. So, `Time.now` cannot be a function because a function in Elm is pure (if you give it the same arguments it always returns the same value). So, for things that produce side-effects you have commands and tasks. Functions that return `Task` are still pure, they always return the same value for given arguments and that value si a request from the runtime to do something. Now, the result of this request is different but the actual request is the same. In order to convert a Task to something the runtime actually can execute, you have to turn it into a `Command` and this is where `Task.perform` and `Task.attempt` come into play. With the extra information, the runtime knows how to turn the result of the execution of the request into a `Msg` and feed that back into the app's loop. The signature of `Task.perform` is `Task Never a` because the kind of task that should be given to that function must not produce an Error. `Never` is an uninhabited type. It has no values, or, better said, you cannot construct a value for this type. The signature of `Time.now` is `Task x Posix` because that task is designed to be composed with other tasks. The idea of the composition of tasks is that you can have the runtime execute a task `andThen` use the result of that execution in order to execute a second task. If this is still not clear, please feel free to ask additional questions. This can be quite a tricky idea if you never programmed in a side-effects free language. Maybe [this article](https://elmprogramming.com/side-effects.html) could be useful in understanding this topic. 
You guys have all the fun!
Haha, yeah! Spreading the love! How are you? :)
&gt;And why did the author bother inventing yet another language? Author of Mint here, I created Mint because I got frustrated with Elm for a couple of reasons (from my experience take it as my opinion): * It has too much boilerplate which basically comes from the fact that it's [Pure](https://en.wikipedia.org/wiki/Purely_functional_programming): * you cannot get the current time with a simple function, it has to go through the runtime * creating a reusable "component" with it's own state is cumbersome (and even frowned upon) * writing decoders manually for types which could be automatically generated * Styling was not figured at at the time (current implementation is still not optimal considering that the compiler could do it) * The direction of the development is not aligned with the community: * In 0.19 none of the first 10 pain points of the community has been addressed (both from [State of Elm 2018](https://www.brianthicks.com/post/2018/12/26/state-of-elm-2018-results/) and [State of Elm 2017](https://www.brianthicks.com/post/2017/07/27/state-of-elm-2017-results/)) instead compiling speed was the main feature (makes sense since it was a pain point for NoRedInk because of the 100,000 LOC they have) which is nice (and people are happy abut it obviously) but wasn't the most pressing issue and the removal of Native code which broke [some production code](https://dev.to/kspeakman/elm-019-broke-us--khn). * We can never know what is currently in the works until it is ready (except snooping around on Github checking commits and activity) * There were a couple of unresolved issues which I created fixes for and were never merged in years. * My view on Native which are conflicting with the core teams. Mint is basically tries to fix all these issues while keeping the good parts from Elm. If anyone has questions about it I'm happy to answer them.
In computer science, purely functional programming usually designates a programming paradigm—a style of building the structure and elements of computer programs—that treats all computation as the evaluation of mathematical functions. Purely functional programming may also be defined by forbidding changing-state and mutable data.
I’m good, back at work after 5months of parental leave.
Nice! Let’s get together for lunch someday!
Thank you so much! Your breakdown was super easy to follow along. Stating how [`Time.now`](https://Time.now) is not pure made the concept stick.
Thank you so much too for your explanation! I see now that the `Task` and `Command` types are Elm's way of handling unpure functions. I also appreciate the link to the article.
I would always try to use URL params :)
Something tells me that's very open to challenge. Plenty of highly-coveted IP falls under that description. Highly doubt the [Chase logo](https://1000logos.net/wp-content/uploads/2016/11/Shape-of-the-Chase-logo.jpg) or the [Mastercard logo](https://brand.mastercard.com/content/dam/mccom/brandcenter/thumbnails/mc_downloads_symbol_350x200.png???) would be upheld as public domain because they're made of simple geometric shapes.
You might want to check out the [Random.step](https://package.elm-lang.org/packages/elm/random/latest/Random#step) function. This allows you to take a seed and generator to create a random number and new seed.
I don't think you need to do that, as I would expect the elm runtime system to already initialize a random seed. The initialSeed function is there only if you need repeatable sequences.
I usually initialize it with the current timestamp, like seen in [a small program I wrote](https://github.com/groma84/qwixx-dice-elm/blob/master/src/Main.elm). 
Only if you use Random.generate and dispatch a Cmd. If you use `Seed` you can generate random numbers in a pure way instead of using Cmds + update
The linked article is an explanation of the elm spa example app for it's 0.18 version. It links to the updated 0.19 version but the text explanation reflects the 0.18 codebase. If anyone knows of an article where Feldman explains the design decisions for the 0.19 version please comment.
Is this what you meant? [https://elm-lang.org/blog/small-assets-without-the-headache](https://elm-lang.org/blog/small-assets-without-the-headache)
Richard will be giving a talk that is exactly what you’re looking for at Oslo Elm Day in a couple of weeks. The videos of the conference talks will be posted on YouTube later: https://twitter.com/osloelmday/status/1082255813652164608
The latest version of elm-spa-example looks really different than before. I'm sure part of this is due in some part to Elm 0.19, however I suspect part of it is rfeldman also changing his approach to doing an Elm SPA so I'm curious to see why the elm-spa-application is the way it is. Looks like he's doing exactly that in Norway in two weeks as kyank linked in his reply.
Thanks, now I want to watch this when it gets released.
I like to use ``` Random.generate Init &lt;| Random.int Random.minInt Random.maxInt ``` instead of ``` now |&gt; Task.perform Init ``` From what I understand the `Random` package has a better randomiser implemented then using the time.
That's good to know! I'll try it that way the next time I need Random.
I just found out about this now (I don't use Elm much) and absolutely agree. I absolutely do *not* like "magic" in languages, and it seems like Elm's going further and further that way.
I'm way late to the party, but I think I can answer this in a haskell point of view. In haskell, we have typeclasses. They are akin to interfaces. You declare multiple function signtures there. The good bit is that you can use them to restrict the parametric types (in `List a`, `a` is parametric). In Elm, you can only have 1 restriction: `comparable`, which is language-defined. Honestly, I'm not sure typeclasses would be the best solution for Elm, but would def. be enough to remove _a lot_ of boilerplate (i.e. json encoding/decoding, Module prefixes, etc). I'm sure there are other alternatives worth exploring though. Hell, hygienics macros might do the trick as well.
Eagerly awaited
I'm just getting up to speed with elm 0.19, and I'm curious about lazy and keyed. Are there any situations you shouldn't be using these? Does it apply an overhead that if you aren't actually using long lists that are changed or reordered frequently that it actually makes performance worse? Or should I try to always use it where possible since there are no downsides? 
I'm having an issue where I've put my model in a separate module to avoid having circular dependency issues, but if I change or add a field in my model record, I'm no longer able to compile because the update function doesn't recognize the new names (since it hasn't been recompiled, which I can't do). Has anyone else experienced this?
I like to use ports while using "elm reactor". I find different hacks for different elm version on the internet (e.g. [https://github.com/elm-lang/elm-reactor/issues/138](https://github.com/elm-lang/elm-reactor/issues/138)) and wonder what is the way to go for 0.19?
I've had similar things happen but it's always been fixed by deleting the elm-stuff directory and thus forcing a full recompile 
I just came here to save other souls if they ever made the same mistake as us, aka using elm-css styling in large lists (html table with 10k-90k rows). We spent a whole week trying to figure out how to efficiently use ziplists, lazy and keyed to find out elm-css was just adding a single &lt;style&gt; tag per row, which when rerendered because diffing was triggering reflows. If you're dealing with large datasets to render, I'd advocate for avoiding elm-css which puts its style tags randomly in your DOM, having a considerable impact on rendering performances.
Since `elm reactor` does not support custom HTML, you'll need to use a different server. I'd recommend [elm-live](https://github.com/wking-io/elm-live).
I wish I could help with this concept of what it means to be idiomatic in Elm. It looks like an ambitious start, and I applaud you for that. If you want something more feature-complete to compare your work against, check out [https://package.elm-lang.org/packages/romstad/elm-chess/latest/](https://package.elm-lang.org/packages/romstad/elm-chess/latest/)
I also made an implementation a while back. https://github.com/marreman/chess
_half-raises hand_ I have only done basic stuff with Elm, but I'm in the greater Philly area. 
I am starting to learn Elm and am in the Main-Line area.
We're here. Where are the job postings? You're regularly attending Elm Philadelphia?
I'm in Montco and would be interested in elm jobs up here.
Another hand here for Montco. I have tinkered with Elm but most work projects have been React.
Yes. I try to attend regularly. I can't speak for job postings. I have been talking to my recruiters. When they ask what technologies I'm most interested in I always mention Elm. They never know what that is.
Your code seems to have lost all the newlines... First error message: The difference between expected types and what is actually there is in the view function. In your view, you're doing `onSubmit SetChampion`, but `SetChampion` needs an argument to be a finished Msg. So you need something like `onSubmit (SetChampion "some string")` Second: You should return `(newModel, someCmd)` and in this case you only returned `someCmd`. Third: Again, you should return `(newModel, someCmd)` but you returned `Msg`. If you want to "trigger" a Msg from inside `update`, just call `update` in there on that new Msg and a current model you have :) If you need more help, just ask, or come to the Elm slack, there are #beginner and #help channels made exactly for this, and the chat UI is a bit better for this than Reddit comments :D
All right, sweet! I will give this a try. It makes more sense now. I will also head over to slack. Thanks Janiczek!
Whew, there's a lot going on here and I'm probably not the best person to help but here goes. So to start with in your first Update branch you're doing this: ``` SetChampion champion -&gt; ({ model | champion = champion }, GetChampionInformation) ``` Elm won't like this since it doesn't make any sense to it: you can't call an update from an update, since that would occur another round trip around the elm runtime; if you want to something to happen, it should happen during that update. Cmd's (should be) reserved for actions that can fail, such as http requests. Here: ``` GetChampionInformation _ -&gt; Http.get { url = model.url ++ model.champion ++ ".json" , expect = Http.expectString SetChampionInformation } ``` Your type annotation is saying that any method from update must return a struct of `(Model, Cmd Msg)`, however here you are just returning a Http.get, which is just a `Cmd Msg`. You could alleviate this by returning `(Model, Http.get etc etc)` since that would fit the type annotation (although I would highly recommend moving http calls to their own methods for clarity and readabilities sake.) Your `browser.element` is complaining because your view isn't returning what it's supposed to (`Html Msg`), changing that will fix that. You were probably following Elms helpful suggestions when you made it a `Html (String -&gt; Msg)`, however this was caused by the `onSubmit` on your input. So, the type you attached to the `onSubmit` wants a string, however, `onSubmit` doesn't provide that, you were probably looking for `onInput` here. And you should probably attach an `onClick` to the button for when you want you actually want to make the http call. I hope this (mostly) made sense, here's an updated Ellie that should at least compile properly: https://ellie-app.com/4HLL3Gnm8Cxa1 It seems like you're a little confused about Msg's and effects, and this part is a tough one: I remember it drove me in circles until I eventually got it. [I would just recommend rereading the docs a little and try to fully grasp the examples in there.](https://guide.elm-lang.org/effects/) Hopefully people will chime in with anything here I've gotten wrong or mistaken, I'm still pretty new to elm myself.
Wow. Thank you so much! I will definitely go through the docs again. There is a lot I still don't understand or get and I will keep re-reading the docs until it fully makes sense. :) This has helped a lot and I will go through the Ellie you provided in detail. &amp;#x200B; Thanks!
What type of module are you looking for? The Elm guide has a section on modules that focuses on related data types https://guide.elm-lang.org/webapps/modules.html
What’s with the downvotes guys, lets be newcomer friendly
I would suggest to use [ellie-app.com](https://ellie-app.com) when you are in trouble. You can share code even if it is not running, I have done that a few times :) It looks a little nicer and people can just send u back a working fork of your code rather than only being able to describe it :) !
&gt;https://ellie-app.com/4HGwW6Kw7NBa1 Hey There! &amp;#x200B; Yes. I provided an Ellie url in my post: [https://ellie-app.com/4HGwW6Kw7NBa1](https://ellie-app.com/4HGwW6Kw7NBa1) &amp;#x200B; I just provided the code and errors in the post in the event that someone didn't want to go to Ellie and or couldn't at the time. &amp;#x200B; Thanks!
Where do people keep decoder/validation functions in their project's hierarchy?
Oh, sorry about that. I did not see the link!
No problem. It is very easy to miss in everything that is going on. :)
I would personally have all common data in one place and then the differing data in the union (or "custom") type. So: type Animal = Animal ( CommonData, AnimalData ) type alias CommonData = { name : String } type AnimalData = Dog DogData | Bird BirdData type alias DogData = { runningSpeed : Float } type alias BirdData = { wingSpan : Float }
For me, decoders go in the same module as the model they are decoding. If you have private constructors, which I usually do, decoders _have_ to go there. Not sure what you mean by validation functions, if you mean user input validation I would start by putting them in the module where they are used, e.g. the module that renders the form view. If you end up reusing validation functions several places then extract to a separate module.
Thanks for the reply. &gt; Not sure what you mean by validation functions Sorry if I wasn't clear, but I meant validations that are run on the _contents_ of the data being decoded. (e.g. I know I have a record with string values, since it's been decoded, but now I need to verify that the contents of those strings meet certain criteria.
The problem is of course the \`compute\` function that combines non-error results. You can't do that if the number and types of the results are unknown at compile time. What you could do is first define a Uniontype with subtypes for all expected result types and then use the constructors on Result.map to map the results to the same type (the union type). Then you can combine the results into a list like the errors and process them further. But of course the question is always why are you doing this? And might there be a cleaner way?
Sounds to me like you're looking for something like `traverse`: https://package.elm-lang.org/packages/circuithub/elm-maybe-extra/1.6.0/Maybe-Extra#traverse Unfortunately it seems like there's no `traverse` defined for `Result`. One of the situations where typeclasses would really help!
&gt; You can't do that if the number and types of the results are unknown at compile time But then how does this differ from [Json.Decode.Pipeline](https://package.elm-lang.org/packages/NoRedInk/elm-decode-pipeline/latest/Json-Decode-Pipeline)? They seem to get around the `mapN` problem pretty well
Thanks for your answer, however the input `Results` are of different value types. Eg `Result (List e) a` and `Result (List e) b`, so you can't store those inputs in a list. It's much more similar to [Result.map2](https://package.elm-lang.org/packages/elm/core/latest/Result#map2)
Take a look at Json.Decode.Pipeline [custom](https://github.com/NoRedInk/elm-json-decode-pipeline/blob/master/src/Json/Decode/Pipeline.elm#L223) function.
I've got an extremely large model and have started refactoring. Should I be moving the connected pieces of the large model into smaller models and compose the large model of smaller models?
You can in general get around the mapN problem by defining a function with the signature: apply : Result x (a -&gt; b) -&gt; Result x a -&gt; Result x b Then you can write: Result.map (\ x y z -&gt; x + y + z) resultA |&gt; apply resultB |&gt; apply resultC I'm not 100% sure though, I'm on mobile. This style is known AS applicative style and has an intetesting Syntax in Haskell, using the `&lt;$&gt;` and `&lt;*&gt;` operators. 
I simplified your idea: `apply : Result err a -&gt; Result err (a -&gt; b) -&gt; Result err b` `apply =` `Result.map2 (|&gt;)` `test : Result String Int` `test =` `Ok (\x y z -&gt; x + y + z)` `|&gt; custom (Ok 1)` `|&gt; custom (Ok 2)` `|&gt; custom (Ok 3)`
How do you suggest doing it for an arbitrary number of arguments then? Otherwise I'd mirror what u/matheusdev23 is saying and define something like `apply`.
You don't have to use `Result` to model it. It's confusing to do so, since you are really redefining `map2`. You can define your own type, say: type AccumResult e a = AccumErr (List e) | AccumOk a Then your `combineErrors` becomes `map2`, and you can define `apply` (or `andMap` is sometimes used in Elm land) as /u/G4BB3R does below. 
&gt; How do you suggest doing it for an arbitrary number of arguments then? Exactly my question. I feel that it's possible because [Json.Decode.Pipeline](https://package.elm-lang.org/packages/NoRedInk/elm-decode-pipeline/latest/Json-Decode-Pipeline) manages something similar
This indeed looks like what I was searching for! Thanks very much for your answer and the name of the style so that I can do some googling. 
Where in your definition of `apply` do you specify that you want to concat all `err` lists?
The long answer is: Watch The Life of a File by Evan: https://www.youtube.com/watch?v=XpDsk374LDE The short answer is: Yes. Give them meaningful names like "User", "GameBoard", "Page". Then move them into separate Files. Try spliting your update-function into UpdateUser, UpdateGameBoard and so on, them move those into the corresponding file. Typically this should be very easy, if not, it might be that you have grouped them into too small models.
At the end of the type-file.
Have you looked at Crystal? Might be right up your alley for transitioning a Ruby project into a typed (almost) Ruby.
A little, but I can't realistically re-implement a massive Rails monolith in it. I'd definitely look at it for a new project.
The solution of /u/Kurren123 if definitly the "elm" way to do it. But lets say you REALY REALY want `Animal` to be a custom type, then you would need [extensible records](https://medium.com/@ckoster22/advanced-types-in-elm-extensible-records-67e9d804030d): ``` type Animal = Dog DogData | Bird BirdData type alias AnimalData species = {species| name : String} type alias DogData = AnimalData {runningSpeed:Float} type alias BirdData = AnimalData {wingSpan:Float} getAnimalCommonData : (AnimalData () -&gt; b) -&gt; Animal -&gt; b getAnimalCommonData fn animal = case animal of Dog {name} -&gt; fn {name=name} Bird {name} -&gt; fn {name=name} getAnimalName : Animal -&gt; String getAnimalName = getAnimalCommonData .name ``` 
the reason why `getAnimalName2` works, is because Elm is lazy, it only evaluates function **when** needed, so your `getAnimalName2` is the same as writing: ``` getAnimalName2 : Animal -&gt; String getAnimalName2 animal = case animal of Dog dogData -&gt; let fn = .name in fn dogData Bird birdData -&gt; let fn = .name in fn birdData ``` 
Yeah probably not a monolith.. Good luck!
Nobody in here has any idea what they're talking about and they don't understand what you're asking. This is what you want: [https://ellie-app.com/4LpBMKPbrJCa1](https://ellie-app.com/4LpBMKPbrJCa1) &amp;#x200B; First you must hoist, then you must apply.
Thanks, this was the part that was unclear to me.
It'd be interesting to see the equivalent PureScript solution side-by-side.
Your reply is both hilarious and much appreciated. Thank you very much.
Could you please give any links where I can learn more about this concept? I don't mind if it's a haskell article.
Tasks is really an underappreciated feature in Elm, and it's a shame that with 0.19 the http task api got even harder to use. Even worse that you have to go the Cmd.batch way to have things happen in parallel.
What is the error message? Are you trying to return different types from the various branches? (The compiler should point this out very explicitly.) Anyways, here's a sample from a real program: ``` nextQuestionIndex = List.foldl (\( index, question ) memo -&gt; case oldGameAttributes.currentQuestion of Just currentQuestion -&gt; if question == currentQuestion then index + 1 else memo _ -&gt; memo ) -1 indexedQuestions ```
https://ellie-app.com/4Mtbx6BkPC4a1 See the the increment message in update
Maybe you also need a `let .. in ..` statememt
The best way we can help you with this is if you provide the code that is causing the error and the error itself.
If else works differently in functional languages like Elm, in many other languages you would use them to describe behavior, if this then DoSomething(). but here you use if else to return a value, if this then 5 else 20 
Just to point out that your answer combines `Result String a` but in the question I want to combine `Result (List String) a`. However I see how your answer can be amended to fit this.
Yes, that will work.
That plan sounds quite hacky and error prone to me, even if that works I would recommend against it. I would recommend to use a module bundler like [parcel](https://en.parceljs.org/), it comes with [elm support](https://en.parceljs.org/elm.html) out of the box.
Concatenating javascript is a simple time honoured solution. If he doesn't need more plumbing, he doesn't have to add it.
Rob Pike, the co-inventor of Go, said, "A little copying is better than a little dependency." I like the idea of \*not\* adding another tool dependency to my build process.
I also always try to go for the simplest solution and I agree with that quote and your aversion to tool dependencies. And **if** you don't need any other JavaScript dependencies, than your proposed solution seems to be preferable. However, as soon as you want to add any JavaScript dependency it will get messy. Also, by using something like parcel, you can use the more modern features of JavaScript (ES6+) or you might even want to use typescript instead of writing any JS. 
For a small project I need to produce a single html file with no dependencies. I splice the css and js (from Elm, obviously) files into that html file with sed. It works quite well and no other more complex tool would add any kind of value.
The project is currently nearly complete and written in TypeScript. It has no dependencies on outside libraries. I was thinking of converting it to Elm for longer-term maintenance. It is not a large project, so converting it is not a big deal.
Currently, **no**. There is no longer any syntax for adding new fields to an existing record. [Elm used to support this feature](https://elm-lang.org/blog/compilers-as-assistants#simplified-records), but it was removed because, supposedly, no one used it. You can read more about how Elm is supposedly a "worse than terrible" language [here](https://reasonablypolymorphic.com/blog/elm-is-wrong/), and why the root cause of it all is the lack of field addition in extensible records.
Just to have some diversity in the explanations, here's my try at describing `if/else` in Elm: Unlike imperative languages like C, Javascript, Java, C#, PHP and others, in Elm `if/else` is not a simple statement that decides what code gets executed given an expression, but it is an expression that returns a value in an of itself. In Javascript, and by extension other languages as well, this is valid: function returns4MostOfTheTime() { if (2 &lt; 3) { return 4; } } Had we lived in a world where 2 was less than 3, that function would have returned `undefined`. In other languages, it might've been a compilation error, but in a dynamic language like Javascript, it's `undefined`. In Elm, you cannot *not* return a value from any kind of expression, even an `if/else`, meaning the `else` part is *mandatory*. ```elm if 2 &lt; 3 then 4 ``` ^ this is invalid Elm code. What if 2 is no longer less than 3? (contrived example, I know, but you get the gist of it) ```elm if 2 &lt; 3 then 4 else 0 ``` ^ that is valid Elm. Not only is the `else` portion mandatory, but each value after the `then` and `else` portions must be of the same type! ```elm if 2 &lt; 3 then 4 else "not 4" ``` ^ that is invalid Elm. Elm requires that all branches of an `if/else` be of the same type, otherwise functions like this would not be of correct type: ```elm func : Int -&gt; Int func val = if val &lt; 3 then 4 else "not 4" ``` ^ that function does not have the return type `Int` for all branches of the `if/else`.
Making a decoder like that would mean creating an extensible record. However you can't create extensible records (as you do not know the other fields), so you'd need to at least accept an extensible record as a "template" to overwrite the known fields. 
That is **exactly** what I am doing now and actually trying to avoid.
You could achieve DRYness also by having an instance of Saved in your model. Perhaps give it a more semantic name.
Note nested fields take more effort to update than flat ones, so it's not strictly better solution but has its drawbacks too.
Does this do what you want? https://ellie-app.com/4P23KvfgND8a1 You can't make a decoder for your entire model, because the model has fields that the decoder won't know how to populate. But you can make a decoder for "a function `Model -&gt; Model`" - or more generally, `Saved r -&gt; Saved r` - which will update the `a` and `b` fields of its argument. That looks like decoder : Json.Decode.Decoder (Saved r -&gt; Saved r) decoder = Json.Decode.map2 (\a b x -&gt; { x | a = a, b = b }) (Json.Decode.field "a" Json.Decode.int) (Json.Decode.field "b" Json.Decode.string)
You can have multiple elm apps running on the same page, mounted on different elements, yes. They will however not be able to communicate with each other through any other means than ports with JS as a middle-man.
Are there any code examples of this?
``` &lt;div id="quiz1"&gt;&lt;/div&gt; ... &lt;div id="quiz2"&gt;&lt;/div&gt; var quiz1 = Elm.Quiz.init({node: document.getElementById('quiz1'), flags: ...}); var quiz2 = Elm.Quiz.init({node: document.getElementById('quiz2'), flags: ...}); // quiz1.ports.foo.subscribe(... =&gt; quiz2.ports.bar.send(...)); ``` etc. It all depends on what you need the apps to communicate about.
I had no idea you could use an Elm element in this way. Thanks!
Just mount your two individual Elm apps to two different elements: ```js // Assuming the global variable `Elm` is exposed, in some way. Elm.AppA.init({ el: document.getElementById('app-a') }); Elm.AppB.init({ el: document.getElementById('app-b') }); ``` You might have to concatenate the generated javascript from AppA and AppB though: ```bash elm make src/AppA.elm --output appA.js elm make src/AppB.elm --output appB.js cat appA.js appB.js &gt; dist.js ``` And then just ```html &lt;script src="dist.js"&gt;&lt;/script&gt; ``` or use webpack/parcel with a simple ```js const { Elm } = require('./dist'); // or import { Elm } from './dist'; ``` 
&gt; I need to know some use cases, that can be found in SPAs written in Elm, that can be optimized and somehow quantified with metric/benchmark. It doesn't matter if these use cases are 'novice mistakes' or more complex. I need to demonstrate them in web app and show how my tool helps with identifying these, well call them bad practices or badly structured code (what is pretty hard in Elm as far as I know..). Sounds like you're trying to solve a problem before you know if that problem exists... This is not the way to write a thesis.
I have one usecase that I would like to see benchmarked: Use of POSIX timestamps vs. some simple (or dual) datetime data structure. On my project I use a lot of timestamps, around 10k per data item, a user can have around 10 items displayed at the same time. If I would like to know which data structure would be more appropriate performance wise for the task of formatting and rendering those dates to the user. (no timezone needed)
Maybe he’s investigating if any problems exist, after which he may write a thesis if the problem is deserving of one?
Yes that's right, originally I started with elm 0.17, but feature I had to implement has been already added in newer version. Thats why I had to pivot.
What else besides measuring time of rendering could I do here? You can just log into console time after full render at each case and test it across browsers? Maybe I could implement tool that can measure render times of Views?
Converting from a data structure to a formatted string extracting parts of dates figuring out time delta in various units Counting bytes needed to encode given data structure measuring time to decode raw bytes Time and date addition and subtraction it is not about render time, but whether which data structure is better for using on performance critical applications. 
Ok, I understand now, can you point me to direction where to start? Where can I learn more about this, it would be helpful. Thanks a lot.
In c++, it is alias of no operation.
"No Operation". I've seen that name used as one of your Msg options, for when you need to send a message but nothing needs to happen. Your update function is responsible for taking a Model and a Msg and producing a changed Model. The NoOp message says: "don't do anything to the model, just return it as it was".
NoOp isn't an official thing in elm, it's just a common name for a message that does nothing. It stands for "no operation". As some background, processor pipelines jobs are to execute assembly operations (commonly called ops or opcodes) as fast as they can. However, sometimes there is nothing for them to do or the pipeline gets too crowded so it will perform what came to be commonly called a NoOp which just does nothing.
Evan's library [https://package.elm-lang.org/packages/elm/time/latest/](https://package.elm-lang.org/packages/elm/time/latest/) which basically wrapped POSIX Float, from which you derive details about the date. &amp;#x200B; This package has different attempt of encoding that information [https://package.elm-lang.org/packages/PanagiotisGeorgiadis/elm-datetime/latest/](https://package.elm-lang.org/packages/PanagiotisGeorgiadis/elm-datetime/latest/) \`\`\` {-| The internal representation of \`DateTime\` and its constituent parts. -} type alias InternalDateTime = { date : Calendar.Date , time : Clock.Time } \`\`\` &amp;#x200B; If you can think of better implementation to test against those two it would be also good. &amp;#x200B; Good luck :)
I was looking for ideas like this :)
Check out Richard Feldman’s talk, [Scaling Elm Apps](https://youtu.be/DoA4Txr4GUs) as a starting point. You can then explore his [elm-spa-example](https://github.com/rtfeldman/elm-spa-example) for a realistic app that implements these patterns. There is a detailed writeup linked from that project’s README file.
Thank you.
No problem. &amp;#x200B; This is one of my biggest issues with functional programming in general (including Haskell which I also write full time) is that sometimes you next to type signature it would be super useful to have space/time complexity signature of function/data structure. &amp;#x200B; If you want another fun thing to work, imagine a program that would derive performance implication from it's parts. &amp;#x200B; eg. `List.map` is **O(n)**, and `f x = x + 1` is **O(1)** so: `zs = List.map f xs` is O(n) but `foo xs = xs` `|&gt; List.map f` `|&gt; List.reverse` `|&gt; List.reverse` &amp;#x200B; &amp;#x200B; &amp;#x200B;
Also this recently-published blog post illustrates many of the relevant techniques in a very succinct example! &amp;#x200B; [https://hackernoon.com/render-props-for-elm-d5547efd66f5](https://hackernoon.com/render-props-for-elm-d5547efd66f5) &amp;#x200B; Just beware of applying these patterns to every part of your UI. The point of Richard Feldman's talk, which is well taken, is that you should only apply patterns for abstraction/reusability where they are actually needed, to keep your codebase as simple as possible (which has its own benefits).
Prepare to be seduced into trying a new editor (unless you’re using IntelliJ already!); in Elm Town 43 Keith Lazuka and AJ Alt share their experience writing the amazing Elm language support package for the IntelliJ family of integrated development environments.
In the case of your visual example it isn't very clear what could be reused. The tab selector is just a few lines of code and I guess you could abstract that in a very simple view [like this](https://ellie-app.com/4R4fDFdvDvXa1). If the `contents` of the tab do have enough interaction in them in order to make sense to move them into their own module, I guess you could do that and use a model/update/view triplet BUT it has to be enough complexity to justify it. If it's just a few events, you might be better served by a view similar to the `tabSelector` from the above example. 
Thank you for such detailed answer, I am sure this is exactly the last piece of experience that I needed to wrap my head around elm
It stands for "No Operation" and is commonly used as a type of message to send to update. It's one of those things that is useless until it isn't.
Good read!
Unlike most I like to think of Noop as Lana from Archer drawing out a nope where as you don't want to do what is being requested. I guess you could also think of it as no operation but the image of Lana is far superior in the festiveness
&gt; Is there any way in Elm to get the target of an event and pass that in a port? You can use a custom decoder [like this](https://ellie-app.com/4SxTNnVMCWza1). 
I actually got it to work using a simple custom web component. In the Elm code, I wrote the following: closeAnchor : List (Html.Attribute msg) -&gt; List (Html.Html msg) -&gt; Html.Html msg closeAnchor attributes children = node "close-anchor" attributes children I use it like this: closeAnchor [] [ a [ href "#" , onClick SomeMsg) ] [ text "Some Label" ] ] I marked the parent `div` of the dropdown (`class "uk-inline"`) with an additional class `close-after-select`. In my JavaScript, before the loading of the Elm app, I included this: customElements.define("close-anchor", class extends HTMLElement { constructor() { super(); this.addEventListener("click", function(event) { var parent = event.target.closest(".close-after-select"); var children = parent.querySelectorAll(".uk-open"); children.forEach(function(el) { el.classList.remove("uk-open"); }) }); } }); I tested it in Chrome and Firefox (latest) and Safari in iOS 12. I run Linux, so I can't test it in Edge or Internet Exploder. The app will be open source, so if someone wants to make it work in IE6 or some other degenerate browser, they can fix it themselves.
Thanks for the extended answer. I got it to work using a web component (see [this](https://www.reddit.com/r/elm/comments/awum4n/getting_an_event_target_to_pass_in_a_port/ehpb952) comment).
[custom elements don't work outside of box in IE/Edge or older versions of Firefox/Safari ](https://caniuse.com/#feat=custom-elementsv1). you can probably make it work by including a polyfill. 
Hi. I'm beginner to Elm, and I have two simple questions: 1. Is there a less verbose way to unwrap a type with only a single tag, i.e. currently I do case of `case of MyType arg -&gt; foo`? 2. Is it possible to add a type annotation to an anonymous function? &amp;#x200B; Thank you.
1. `func (TheTag x) = doSomething x` 2. Seems like no (but I'm a Haskeller experimenting with Elm, so don't take me too much seriously ;) )
Join the [elmlang](https://elmlang.slack.com/) slack and send me a pm, my nickname is @gabber. Unfortunataly I can't help by video, but ask me anything and I'll try to help you asap.
Great advice, I'll see you there. Thank you!
Just like the other comment. send me a pm on the elmlang slack. my handle is @gio. I can help by video but can only do weekends. ps. i'm by no means an Elm pro but I am beginning to get the handle of things (i'm currently working on a side project completely in elm!) 
Awesome, thank you so much!!
Between the friendly people in #beginners (on Slack) and the [discourse](https://discourse.elm-lang.org/) I doubt you will need much a mentor. I've tried being a mentor at one point and from my own experience I was seldom needed. Just implement something. Having a practical goal will guide your learning. &gt; I will definitely have the dumbest questions on earth Learning is not dumb and Elm knowledge is not genetically encoded in anyone. ;) 
Thank you 😊 I'll definitely frequent those channels. And you're right - my project is coming right along with only the help of the guide and one stack overflow solution so far. Thanks again!!
I think that's a good idea. Are you open to recording it so other people could benefit as well? I've been trying to start helping people a bit more (documented here https://naddeo.dev/rce/) and I think having something like public tutoring or online office hours would be really good for people.
This link just shows the word "Ellie" (tried Chrome and Firefox). Am I missing something?
It looks like Ellie is not working/loading for you (it gets stuck in the loading screen). It works fine form me (I checked it again). Try again or maybe investigate in the browser console what might be happening. 
FYI, here's the talk Abstract Have you wanted to try Elm on a JavaScript project, but rewriting the whole code base was out of the question? With the right techniques, you won't need a rewrite! By the end of this talk you'll know how to introduce Elm to a JavaScript app incrementally, so you don't have to wait for a blank canvas. First we'll cover some Elm basics (in case you've never used it) as well as some benefits a programmer—or manager!—might get out of it. Then we'll get into the nuts and bolts of introducing Elm to an existing JavaScript code base, covering rendering, business logic, and the details in between. Come see how easily you can get started with Elm—not on your next project, but on the project you already have!
hard to imagine why you'd need a better seed than time.
I feel like this is the wrong question. If you want to have Random values, you ALWAYS want to have the "most random" values there can be.
It is not possible, the debugger always shows the Msg.
&gt; The only way I can imagine this is somehow to parse the incoming message right at subscription. But I do not know how. It's [like this](https://ellie-app.com/4WM4VnJWrX6a1).
Omg thx! That is exactly what I was looking for! I never tried the "&gt;&gt;" operator until now.
The approach in the article is still up to date, I don't think anything has changed. Elm makes easy things hard and hard things easy, it's up to you if you want to tackle creating a select box in Elm or tackle scaling and maintaining a large project in JS or TS.
"There are no solutions, only tradeoffs" The article you linked is emphasizing the price you pay without telling you what you get for that price (robustness). [here is an implementation of that select box](https://ellie-app.com/4WZK8VBrxsQa1).
Note that the author specifically responds to that solution in the post (and more in the comments). &gt; I asked around on Elm slack and the “solution” people have gone with seems to be to duplicate the union type in a list: &gt; type TimeRange = AllTime | OneWeek | OneDay &gt; ranges = [AllTime, OneWeek, OneDay] &gt; But I can’t make sure that list is in sync, of course, because I can’t enumerate TimeRange.
Fair enough, but the author makes too much of an issue out of it. Every language out there has tradeoffs. Some might be extremely powerful but end up ramping up the learning curve tremendously. Dumping on a language because it doesn't implement one particular feature that you thought you needed while playing with the language is not a constructive thing to do. 
&gt; The package system was redesigned, effectively making it impossible to install packages from other sources than the official repository. You can’t fork a library and specify it as a dependency: either you publish it, or hope the maintainer likes your PR. Uh, this sounds awful. I'm in this subreddit because Elm sounds lovely. Every few versions I try it out again in some little demo project and it's a joy. I started back when the front page still had that little Mario demo, I loved it then and I love it now. But until it reaches v1, it would be professional misconduct for me to use it in production. Scratch that, even then there's no guarantee that the major version won't be bumped every 6 months and break all the codebases.
I understand what you're saying, but version numbers are lines in the sand, and every bit as meaningless. 
they’re not though, at least not with the strict semver followed by elm.
I mean the reliance on "professional misconduct" vs. a version number. It's pretty much meaningless.
&gt;it would be professional misconduct for me to use it in production What a hyperbole. We've been running Elm in production since 0.17, and as of December are running 0.19. We have a little over 50k LoC spread across several different Elm apps embedded in a PHP MVC framework. Issues like the ones described here: not being able to import packages flexibly or not being able to make unsafe JavaScript function calls have been relatively small points of friction in the grand scheme of things. Even the Elm 0.19 upgrade, which took a few weeks in total, was a methodical process of fixing compiler errors upon the completion of which we knew with 100% confidence that our application was working again. I encourage you to find another language where a 15,000 line pull request introduces zero regressions while benefiting from major performance improvements to the underlying runtime. Meanwhile, how many teams are still using Angular 1.7 because they deemed upgrading to Angular 2+ impossible? How many people have used NPM to [download a JavaScript package with a malicious bitcoin miner embedded](https://schneider.dev/blog/event-stream-vulnerability-explained/). How many front ends out there are written in JavaScript and are considered too large/costly to rewrite but too brittle to make significant refactors to? What using Elm in production has done for us is allowed us to make some of the most reliable and error-free features in our application. It has given us the opportunity to make sweeping changes whenever necessary without fear of breaking anything. It has led to excellent performance that only gets better. Writing Elm has even made writing our PHP code easier, as Elm is quick to catch any malformed JSON that is returned from our APIs. There's a reason why companies are switching to Elm. Its reliability is unmatched. Its learning curve is gentle. Its community is very helpful. The tooling is excellent and comes with batteries included. The [performance is outstanding](https://stefankrause.net/js-frameworks-benchmark8/table.html), beating most of the major JS frameworks by a notable margin.
Elm is my favourite language by far. It is however a fish out of water. JS is at the bottom end of reliability. Elm is at the top. JS ppl don't have appreciation for what Elm offers, because they swim with bugs all the time.. Of course it's a different culture, and JSers are successful in doing what they do. But, the culture is so, so different..
Why not test this yourself? Create a view with large onClick handlers and see how the memory use changes when varying the size of the msg and number of handlers.
I wonder if the distinction between event handlers taking a \`Msg\` value vs a \`Msg\`-producing function makes any difference.
Honestly though, having to take *several weeks* to port elm code from one version to another is a luxury many people really don't have.
We recently wrote about [our experience](https://engineering.itpro.tv/2019/03/01/upgrading-elm-to-v19/) as well. Our post doesn't go into the detail of yours, we were more wanting it to continue the conversation in the community about how the next Elm update can be less horrible, but I wish we had your post before we started upgrading :D Thanks for your post!
I could do, I thought I’d just ask fist as some insiders are on this subreddit. 
timing depends on the situation - generally 0.19 isn't a must for most. also, at least with Elm you know when the job is done. as mentioned elsewhere, doing the same with JS frameworks may give you nasty surprises far into the future..
Evan has been very intentional in communicating what the v1 release is. The reason we aren't already at v1 is because the API has not stabilized yet and there are still more potentially breaking changes coming down the pipeline. That being said, I personally think both he and the rest of the core team have done a pretty good job either A) warning about upcoming changes (such as the possible removal of open records in the future) B) Trying to steer developers away from potentially unstable API's such as native modules I think considering we have been told the API is not stable, if we then choose to compound that by also using features the author recommends against or hasn't documented, at that point we are kind of asking for the grief in the future I've personally always chosen to take the recommended path in regards to elm and haven't really suffered much as a result, although I also haven't tried using it in production at a company so take my opinion with a grain of salt
You can probably, at least, use an alternate package manager.
&gt; warning about upcoming changes (such as the possible removal of open records in the future) I haven't heard about this. Can you share a link?
I'm not really a fan of the "the users cannot be trusted" school of language design which also expresses itself in Go. Stuff like limited-to-core-packages native modules, lack of custom operators, and inability to use forks of packages. It discourages a lot of innovation if only the core team can actually use half the features.
I heard about it from Richard Feldman's advanced elm course on Frontend Masters. I'll admit I assumed this was communicated in other ways too, and it would be unfortunate if it wasn't He didn't say it is for sure being removed, just said it's future is unsure because of how much it hinders optimizations when compiling to WASM
100.000 `MyMessage x`'s each time the view is called.
Thank you kindly
Companies are not willing to let their employees spend time on upgrading a language, which in itself comes with a slew of functionality improvements and performance benefits, but are willing to let them spend collectively much more time fixing JS bugs that get reported by users. This doesn't seem like a problem with Elm, but with the management. Moreover, it's not like JS frameworks don't require sweeping upgrades. A team that doesn't upgrade Angular 1.7 to 2.0 could just as easily stay with Elm 0.18. Nobody is forcing you to upgrade.
It seems significant that AngularJS 1.7 was released after Angular 2, and is still supported in LTS mode. Elm 0.18 doesn't have that. It also seems to me that the question of whether "JS frameworks" require sweeping changes is not very meaningful. You can look at a framework and decide whether that particular framework is likely to make large breaking changes. If you find one that you think isn't, then that fact that other JS frameworks do is irrelevant. (There's always a chance you'd be wrong, but there's a big difference between "probably not" and "almost certainly yes".) A relevant question is: apart from Angular, I don't remember hearing of other popular JS frameworks having such large breaking changes. I may just be out of the loop on that. Can you give examples?
Yet often they have to rewrite everything because they made a big bowl of spaghetti with jQuery or Angular 1.x.
Dates and times were by far my biggest pain point as well. In the end I just used a third party date library and went on with my life. The parsing and time zone stuff was nasty though.
It really depends on your job. I have a ton of small Elm apps in production and have been completely happy with them. You might call them the most professional part of the project, as they crash the least and are easier to maintain than the Rails backend. The 0.19 upgrade for me was a day or so, mostly dealing with dates and getting rid of Debug.crash. I do make sure to avoid undocumented features so I didn't have any native module nightmares. If I needed that, I wouldn't use Elm. I also use un-published libraries all the time by cloning them into the project and adding their "src" directory to elm.json. I have been using git submodules for this.
A few examples in commonly used tools that I can think of: - jQuery 3 had [over 30 breaking changes](https://jquery.com/upgrade-guide/3.0/) from jQuery 2 - Boostrap 4 has a [lengthy migration guide](https://getbootstrap.com/docs/4.0/migration/) that describes a large number of deprecations/renames/breaking changes from Bootstrap 3.x - Vue 1 to 2 has a very long [migration guide](https://vuejs.org/v2/guide/migration.html) that describes dozens of removals/changes
That wont be a reliable test. How do you know Elm isn't doing a 'flyweight' type pattern reusing the same message? You'd have to make sure the message is completely different (maybe a random string?) on each button.
&gt; Uh, this sounds awful. A lot of things sound awful but they are not. Some of the things are not entirely true. For example: you can fork a library and use it in your project via a git submodule with minimal effort. [There is even a tool to help you with this.](https://github.com/Skinney/elm-git-install) &gt; But until it reaches v1, it would be professional misconduct for me to use it in production. I've used Elm in production for 2 years. The upgrade experience is not as bad as some people make it to be, especially if you follow the best practices. Yes, some refactoring will be required from time to time BUT you usually get a big payoff. You can also remain on some older version of the language if you don't want to invest the time in the needed refactoring. You can also do the transition to the new version in stages where you first fix the old code in such a way that it continues to to work on the old version. (e.g. getting rid of things that got removed) 
Nice lab
I don't understand why replicating the real life situation on a larger scale would not be a reliable test. What makes you say that?
I'm trying to decode a particular JSON format using the elm/json package and having difficulty. My JSON is structured like this: { "services": { "0": { "name": "Network", "status": "ok", "message": "No known problems", }, "1": { "name": "Internet Connectivity", "status": "warn", "message": "Some problems detected", }, "2": { "name": "EMail", "status": "error", "message": "Everything is on fire", }, etc... } } I would like to decode to a List of Service records, like this: type Status = Online | Warn | Error type alias Service = { name: String, status: Status, message: String } -- The resulting JSON in this format: List Service So far, I can decode a single service object correctly, as below: serviceDecoder : Decoder Service serviceDecoder = map3 Service (field "name" string) (field "status" string |&gt; andThen (\ status -&gt; (succeed (stringToStatus status)))) (field "message" string) stringToStatus string = case string of "ok" -&gt; Online "warn" -&gt; Warn _ -&gt; Error Decoding away the top level 'services' field is simple too, but the part in between is tripping me up. I'm not interested in the key used to index each service object in my JSON, I want just a list of services. I think I need to use the keyvaluepair decoder, but I get a list of tuples of (string, a) which I can't work out how to use further. Could anyone help?
So, what you mean is, you need (well, use a bit) this feature, but have to use a bodgey workaround...?
I'll take a stab at this. Keep in mind I ***love*** elm. All of this is coming from a place of constructive criticism. Here are the reasons in no particular order. First, Strong statically typed functional languages are not that popular as a whole. Think about the relative popularity of OCaml or Haskell vs Java or C++ or PHP or Javascript. So not only do you have to convince people that this is the best client-side framework, but you have to educate a lot of them on the benefits of the language. Second, the elm libraries and languages have a history of incompatible changes from version to version. This makes it difficult to find the correct documentation, and can lead to frustration when some deep dependency hasn't been ported to the version that you're using. I would imagine this will eventually work itself out once some compatibility guarantees are put in place. Third, the elm architecture requires you to handle all incoming data/signals in one place in the code. This can lead to one "god" function that's responsible for doing a lot. There are some ways to deal with this, but it can be frustrating. Fourth, it can feel like an all-or-nothing decision. Interop with existing Javascript can be confusing, and the most recent version of Elm has made it more difficult (not passing judgment here, just sayin). So the most straightforward approach is if you can implement your whole project in Elm with no other substantial client side code. There are probably other smaller considerations, but these are the big ones IMO.
I like Elm, but when I was thinking about using it at work and looking into the project governance, it felt like an experiment or a 1 man project and not something I could convince a team is something we might want to rely on. This was last summer and there hadn't been any language updates in way over a year. I think that is one reason that it hasn't gained a whole lot of popularity.
I dunno, really, but having someone jettison their entire workflow for a new one is a big ask. Maybe it will become easier to sell when there are more real world examples of successful elm apps. 
Shrug. Still a lot less bodgy than the webpack config.
I tend to use Parcel, which does this more nicely.
No changes in way over a year? Elm 0.19 was released 6 months ago and brought major language and compiler changes. https://elm-lang.org/blog/small-assets-without-the-headache
I said this was last summer, before 0.19. 
I'm struggling to come up with an answer here that doesn't feel a little circular. I'm tempted to say that it's the lack of a high-momentum, high-energy community and ecosystem that keeps more people from jumping in, but then again you're question is basically equivalent to asking why that doesn't exist in the first place. One issue I haven't seen mentioned is that functional enthusiasts are often (wrongly, IMHO) drawn to more hardcore languages like PureScript because they feel like more of an unfettered academic and theoretical playground. But these folks are a large part of the initial target audience of Elm. Elm has the potential to expand far beyond them, whereas PureScript doesn't (at least not nearly to the same degree), but Elm needs them to evangelize the language, introduce it into their respective companies and products, etc.
And the last update before that was November of *2016*. I understand Elm is not dead and is actually progressing well, but appearances matter -- if someone has to defend their choice to a Director or VP, it doesn't look good to point to what appears to be an almost dead development history over the last few years.
Yes, this is my point. I like Elm, but I’m not going to try to advocate for it at work.