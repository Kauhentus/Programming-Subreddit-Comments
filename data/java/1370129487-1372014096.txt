At least make it static: public static final Random random = new Random(); 
That doesn't excuse using a *PRNG* to decide whether to log an exception.
Do scala and the play framework. Good balance of perf and a good langauge to code in.
Maybe take a look at Vert.x? It's got a lower barrier to entry than something like SpringMVC. 
I second Spring MVC. For my latest project I went with Spring Integration (using Inbound gateways as "controllers"). From there, SpringData for mongoDB integration.
My personal bias is towards Grails - SpringMVC with Groovy as the primary dev language. Ruby != Groovy, but there's a Ruby influence in Groovy, for sure, and you may enjoy the syntax. Play framework would be something else I'd consider looking at, and possibly Roo.
Came in here to suggest the same.
la4j is single-threaded library. So, I'm not sure that it can be compared with parallel library like Colt. Anyway, la4j supports sparse entries and this is one of the fastest implementations of CRS/CCS formats arround.
So a program can parse the XML?
To do it well, you need to understand concurrency and JVM concurrency. It's easy, but it takes some time to integrate with your intuition of what's going on in your programs. If I was you, I'd hire a pro.
Is this production code? Did someone pay for it?
This is all my own code.
The purpose of validation of an XML document is usually to allow the client app (the thing reading it) to make certain assumptions about the content to make using it far less complicated. If you put some invalid tag in there, wtf is the app supposed to do with it? Ignore it? Pass it on? Why waste time accepting this question, let alone answering it, when you can trivially avoid it with a schema? In fact, asking about this is akin to asking why a database should only accept data types as defined in the tables you're inserting data into. It's really quite similar a situation.
i don't think theirs a place, ill whip something up this afternoon. sounds like a good idea. 
I am so new to Java it's not even funny, I really appreciate this thanks!
http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/jdbc.html http://joda-time.sourceforge.net/ https://code.google.com/p/guava-libraries/ Read the documentation highlights / presentations for those.
There is a Hardware random number generator, that gives a more random number but it's the best way to do it in most cases. 
I'd suggest having a Spring MVC-backed API. Once you get the configuration done it's actually really simple to reason using it. You can even bypass some of the configuration using [Spring Roo](http://www.springsource.org/spring-roo), sort of a super powered setup for Spring.
&gt; Speed has nothing to do with it Yes, it does. It is faster to parse a well structured data format than one which has ambiguities. HTML is a notoriously ambiguous data format, and the parser has to perform extra steps to make sense of ill-structured documents. XHTML is far more rigid, and allows the JSF template engine to simply reject ill-formed templates. No ambiguity, performance increase. &gt; Requiring that templates are well formed XML does not actually say &gt; anything about the implementation as well. Yes, it does. The HTML specified in a JSP is not parsed on the server-side, and the whole document is compiled into a servlet and the generated HTML is sent in an HTTP servlet response. The JSP tags are compiled and executed on the server-side. The HTML tags are not parsed server-side. That is left to the web browser. JSF must parse the Facelet XML on the server-side, because it contains instructions on how to create a component tree, encoded in tags from JSF XML namespaces (ui, h). This is a critical implementation detail of the Facelet engine.
Spring mvc has excellent support for restful web services out of the box. 
Please let me know you need more details. Thanks
&gt; And when and where did I argue otherwise? Quoting your original answer, which started all this confusion: &gt; so whether you start with text templates or XML templates you end &gt; up pretty much the same. &gt; &gt; Requiring that templates are well formed XML does not actually say &gt; anything about the implementation as well. The whole point of this discussion is that requiring well-formed XML says something very important about the implementation. That the Facelets implementation was designed based on the integration features of XML to combine the functionality of different libraries to produce the desired effect. Instead of making up arbitrary examples, let's consider a real Facelet: &lt;ui:composition xmlns="http://www.w3.org/1999/xhtml" xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core" xmlns:a4j="http://richfaces.org/a4j" xmlns:rich="http://richfaces.org/rich"&gt; &lt;rich:panel&gt; &lt;f:facet name="header"&gt; &lt;h:outputText value="JSF using RichFaces + AJAX"/&gt; &lt;/f:facet&gt; &lt;h:form id="form2"&gt; &lt;h:panelGrid columns="2"&gt; &lt;h:outputText value="Name" /&gt; &lt;a4j:region&gt; &lt;h:inputText value="#{userBean.name}"&gt; &lt;a4j:support event="onkeyup" reRender="outname" /&gt; &lt;/h:inputText&gt; &lt;/a4j:region&gt; &lt;/h:panelGrid&gt; &lt;/h:form&gt; &lt;h:outputText id="outname" style="font-weight:bold" value="Typed Name: #{userBean.name}" /&gt; &lt;br /&gt; &lt;/rich:panel&gt; &lt;/ui:composition&gt; This snippet shows text in a modal panel which changes a bit of text as you type into an input box, dynamically using AJAX. &gt; XML template is parsed, including all the namespaces. This is how you define Facelets. This is how the Facelet engine is implemented. The above XML is combining six different schemas, representing components from six different libraries. Thus, because of how JSF is implemented, valid XML is very important because the process of validating the XML is a syntax check on the the facelet definition. [1] Also, these are components, not merely doing text replacement. This example also coordinates asynchronous communication between the client and the server through AJAX. &gt; XML fragments are serialized (or are lifted from original XML text &gt; format, which will preserve how you close tags etc.) and managed &gt; code is cached. XML fragments are not merely serialized, at least as your example shows. The resulting HTML produced by the above Facelet bears little resemblence to the output. That is because the Facelet is only used to create the component tree and transform the HTTP request into action handler invocations, binding XML nodes to component classes which don't serialize the XML fragment used to create them but compose their own HTML to build the component. This is because Facelet XML is not a templating language. &gt; So like I originally said the requirement the XML is well‚Äêformed has &gt; nothing to do with implementation. As I am stating, the XML being well formed has a lot to do with the implementation *of JSF*. In fact, *that* JSF uses XML is one of the key features of its implementation which allows it to be successful as a standard, because it is easy to bring together components written by many different authors into one view definition, because they all speak XML. [1] This is an important point of implementing facelets as XML. You don't need to run the Facelet through the application to determine if the template is correctly formed. Any sufficiently advanced XML editor will syntax check the Facelet on the fly while editing it (while providing Intellisense!), because the Facelet is implemented as XML.
That's how the technology is defined. Presumably it's parsed as xml by an xml parser, and presumably that was a sensible way to do it.
Sounds like you need to make sure that there's enough Java in the fuel tank. Could you take a reading on the gaskets? Tell me what the pressure gradient is between your connector and your datasource is?
Is this UCM? I'm more of an Avaya guy so I don't know it very well, but we might be able to offer something with the Tomcat problem. In ${TOMCAT_HOME}/logs there should be some helpful log files. In particular catalina.out will probably have some exceptions logged that might help out.
My favorite trick for improving java performance is a script that kills McAfee once a second. 
Why would someone pay you to do a job you're obviously not competent to handle?
Interesting bit about removing null reference checks and and rolling back the optimization in case of an error. I wonder what's the cost in case of an incorrect assumption, is trapping a segfault something expensive ?
I'm also wondering how/when this works... The article says "[the JVM] recompiles the method, this time with the null check in place.", implying that this new method is then executed again. This only works if the null-check is at the beginning of the method. The following method can definitely not beneficiate from this optimization: public void clean(Object o) { TEMPORARY_FILE.delete(); if (o == null) { ... } } In this case, the re-execution of clean() would not fail for the same reason because TEMPORARY_FILE would already have been deleted...
Have you tried setting up tomcat on it's own with FIPS mode on? There are a few requirements beyond just changing the setting.
Decompiling will not help you, if you meant decompiling the class file. The optimizations this article speaks of do not end up in the .class file at all. They are emitted during runtime by what some may call the "real" compiler. Javac just does a very quick 'n dirty transformation from Java code to byte code, and explicitly does not do any optimizations.
Good explanation!
If you don't mind videos check out TheNewBoston on YouTube. He has some pretty good tutorials. 
Recovery in case of such failure returns execution to a point in the code from which the method can continue and complete successfully. Next time the method is executed, the de-optimized version is used. If you're interested: http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/b92c45f2bc75/src/share/vm/opto/ It's a complicated code base, but an interesting one at that. Look for "uncommon_trap" and "implicit_null_check", mainly.
That makes more sense. If I understood you correctly, the optimized function would segfault at the first use of "o" in my example; know exactly where this was; and switch back to the version with the null check. Thanks for the pointers!
Any other pointers on the other notes you mentioned?
What does that mean exactly? Have I missed out vital info from my posts? Like do you need to more than that I'm just using JDBC/MySQL with InnoDB?
Best one I found is Derek Banas on Youtube. Lots of tutorials, source code with comments, good delivery without spoon feeding. 
http://docs.oracle.com/javase/tutorial/java/
Earlier versions of Javac did some optimizations via the -O flag, but then they discovered it was counter productive as the "real compiler" would have less information to work with. 
If I remember my teacher's lecture, it was because Sun effed it up and couldn't fix it without breaking a bunch of code that people had already written.
I'm not entirely sure, but I would guess it has something to do with primitives being allowed in arrays. The toString() method of an Array wouldn't be able to call toString() on its elements because they could be primitives that don't have a toString() method. This is why Arrays.toString() has methods for all the primitive types. Lists can only hold objects and not primitives, so calling toString() will always work for a list. Also, java primitives don't have toString methods, the compilar converts the primitive to its corresponding wrapper class and calls toString() on that.
that would make sense, but why couldn't the autoboxing-autounboxing work for an array print?
This is the right answer. Arrays were in the language from the beginning, and many of the early parts of the language have/had pretty sis issues because they didn't really know what they were doing back then. Mutable Date, synchronized collections (eg: Vector), broken Cloneable interface and covariant arrays are all examples of early Java being broken. Some of the stuff in the libraries they could deprecate away, but Array.toString can't really be fixed without breaking something somewhere.
Was preserving the toString() behavior of arrays that important? I can't think of any situation where someone would want to use an array's toString().
Is there ever a case where you wouldn't want to override the toString method? 
Java has kept many warts in order to keep older code running on newer releases. You can't guarantee that somebody out there is not parsing toString() to look for arrays, or has written some other behaviour dependent on how toString() works on arrays.
The exact reason is that the Array "type" does not override Object's `toString()` method. If you don't write your own `toString()` method, you get something like this: [Class name]@[hex hash code] So, if you did a `toString()` on a String array, you'd get something like this: [Ljava.lang.String;@5e34d46a The name of the "class" for `String[]` is `[Ljava.lang.String;` The `[` means array (repeated for the number of dimensions), and `L&lt;...&gt;;` is how a class or interface name is represented by the JVM. Arrays are weird things. Instances of an array can be put in an Object slot, meaning that the supertype of the array class is Object, which is why you have `toString`. But what is the "class" of an array? For a list, that's easy. It's `ArrayList`, a real class with source code which can have a custom `toString()` method which prints out the members of the list. But, for arrays, it's almost seems like the JVM is creating new classes for each component type. There's no "source code" for an array like there is for a list. What would be a sensible `toString()` method for a class that is there but also not there? Why are arrays weird? Well, they are primitive, but not primitive. But they are also very fast, because they are contiguous areas of memory which can hold Objects or primitive values. Even today, if you need to write super fast numerical code, you use arrays, not collections. Because collections can't store primitive numerical values without swaddling each number in an object blanket. There is an `Arrays.toString()` for each storage type. It works for all but multi-dimensional arrays. That'll still give you weird results. Another fun Java fact - Java doesn't really have true multi-dimensional arrays, only arrays of arrays. So which `Array.toString()` overload do you think gets called for a multi-dimensional array? Basically, you need `Arrays.toString()` to make strings from the outside because it isn't possible to create strings from the inside. Incidentally, you had to do this for primitives too, before Java 5. After Java 5, the compiler will autobox primitives, and wrap them in a blanket for you, letting you call `toString()`. You can't do this for arrays, because they are well, different. An array is already an object. TL;DR - arrays are weird. Whatever their class is, it doesn't mess with Object's `toString()`.
Java is corporate driven, unlike Python which is community driven. If a new update to Python breaks some old software, the language developer will just say "Deal with it. Fix your code." Sun/Oracle meanwhile has an obligation to support their customers. That's one reason Java is so popular in Enterprise, I suppose.
Very nice explanation, thanks! Fortunately, for high-performance code using primitive "containers", there are libraries like trove and colt, so you don't have to abandon the Collection interfaces.
I am sure that there is poor code out there that uses an array's `toString` where really its `hashcode` or `==` should have been used instead. But, not breaking poorly-written-but-correctly-running code is a valid goal.
&gt; It works for all but multi-dimensional arrays. @see [Arrays.deepToString](http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#deepToString(java.lang.Object[]%29)
The toString method is not described by the Java language specification so your teacher was wrong.
Nope. The toString method was not described by the Java language specification. Different VMs can implement it anyway they want so you shouldn't depend on a particular return from that method.
No but if you're worried about messing up your machine just use virtualbox. 
Why are assignments for a programming subject being submitted in paper form anyway?
Maybe the school lacks the capacity for digital archival that meets exam storage requirements intended to make sure students have legal and academic recourse?
The only real reason is that's the requirement set by the lecturer. There are no practical reasons at all from our point of view.
&gt; Make sure to format your code in NetBeans. You have to use NetBeans?
Yup... It's not to bad for a newbie like me, I even used it in my C++ course as well...
The `toString` method is specified by the [Java SE class library](http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html#toString\(\)).
Sun didn't really mess this one up (depending on how you look at it). It's a compromise that resulted from two competing design requirements driven by the limitations of early JVMs. Java does not have a unified memory model. It has primitive types and reference types. Reference types *were* always allocated on the heap, and due to Java being an OOP language, all reference types must have `Object` as a ultimate base class (so that all reference types have a `toString()` method). Primitive types of course exist as they are, allocated on the stack with no methods. The reason for the split memory model is peformance. Heap allocation of everything would be incredibly slow and extremely wasteful. Of course, modern JVMs are much smarter, and can decide to stack allocate an object or even hoist fields into registers. But this was not the case in the beginning. Java 5 partially unified the memory model gap through automatic boxing/unboxing. What about arrays? They can't be stack allocated, so it must be a reference type. But, the memory layout of an array can't be mapped to an object instantiated from a class. A class specifies a fixed number of fields, while arrays have a dynamic number of fields. Also, array access must be fast, so no method invocation, which is slow because all methods in Java are virtual. Of course, not a problem with modern JVMs, which can de-virtualize and inline methods as necessary. So, arrays have to behave like Object, and getString() and consequently getClass() and hashCode() have to return *something*, even though an array can't be backed by a "real" class. Thus, because arrays aren't backed by a "real" class, they get `toString()` from the only class they are associated with: Object. That doesn't sound like a design *mistake*, but the consequence of a necessary optimization implemented by JVM magic. Changing the behavior of the magical parts of the JVM (with potential unknown consequences) when enterprise customers depend on the predictable behavior of the JVM doesn't sound like a solid business plan.
At this rate you're going to need a paper factory. 
Right but it's result is not defined. I said "described" not "specified". Learn to read dufus.
Jhat is a pretty useful tool. I have found the IBM HeapAnalyzer to be a bit more user-friendly though. https://www.ibm.com/developerworks/community/groups/service/html/communityview?communityUuid=4544bafe-c7a2-455f-9d43-eb866ea60091
What is this 1973? Are we still using punch cards? 
Took me a minute to figure that one out, too. It's supposed to be "to *save* paper"
But your statement on your website that WebLogic was not covered because "not because WebLogic is a bad product, but because it's not focused around developers and ease of development" is just false. They've had developer specific releases for a while now. They even have support for Maven deployment tasks.
The college I just finished was the same. (UK)
The behavior of Sun's VM was essentially the de facto standard. Historically, at least, they were pretty reluctant to make changes to existing behavior that might break applications, regardless of whether or not that existing behavior was in the spec.
http://instantostrich.com/
&gt; Are we still using punch cards? [Yes](http://www.pcworld.com/article/249951/if_it_aint_broke_dont_fix_it_ancient_computers_in_use_today.html)
it's been a while since i've done any work in this area, but 4 years ago i found matrix-toolkit-java (MTJ) to be very nice. it's a high level wrapper around netlib-java, a translation of the lapack fortran code to java. and if you've got a native lapack, it will use that. at the time, i thought it was much better than colt can la4j use a native lapack if it's available ?
"the real wtf"
https://www.assembla.com/spaces/akka/tickets/2047 src: https://groups.google.com/forum/?fromgroups#!searchin/akka-user/multicast/akka-user/7z061GNo5VI/lEgpIKQytKEJ http://stackoverflow.com/questions/8778209/may-akka-use-multicast-addreses http://stackoverflow.com/questions/6305900/akka-remote-actor-server-discovery http://akka.io/ https://docs.google.com/document/d/18W9-fKs55wiFNjXL9q50PYOnR7-nnsImzJqHOPPbM4E/edit?hl=en_US&amp;pli=1 -- http://www.tcnj.edu/~bush/uftp.html http://code.google.com/p/scalamulticastactors/ -- http://www.mentby.com/Group/apache-camel/camel-mina-and-multicast.html https://issues.apache.org/jira/browse/DIRMINA-438
http://en.wikipedia.org/wiki/Data_validation
"To ***safe*** paper". Dafuq kind of school do you go to again...?
https://speakerdeck.com/timcowlishaw/from-ruby-to-scala-and-back-again-better-living-through-type-checking http://spray.io/blog/2013-05-24-benchmarking-spray/ 
&gt; Apparently also some businesses have weird ways of doing things like this and we just have to deal with it and do it. The lesson here is to learn not to give a fuck and just do it. Also, make sure to keep your resume current and be ready to make a switch when shit become unbearable.
I wish the Jetbrains folk had a C/C++ IDE..
You must put the files in the same way, but **inside of the *src* folder, inside the directory that contains the jar file**. Example below. Your project folder might look something like this: * bin * src And inside of the src folder: * code folder, etc. * resources And inside of the resources folder: * image1.png * image2.png So for IDE compilation and execution, your file path would be *"src/resources/image1.png"*. **However,** when exported as a runnable JAR file, you must copy/move the resources to the location of the JAR file. So let's say you export the JAR file of your project to your desktop. It now sits at *"Desktop/jarFile.jar"*. You must do the following in order for your images to still work: 1. Copy the resources folder to the src folder you create on your Desktop (or wherever your JAR file is actually saved; this is just an example), so on your desktop you would have: *"Desktop/jarFile.jar"* and *"Desktop/src/resources"*. (Note: You do not need to copy the entire src folder from the project. No source code is necessary, only the resources folder. Pictures always help. Here is one for each location, jar folder and project folder. http://imgur.com/a/qpdwt
The intro to programming projects and assignments are submitted via paper at my uni. Although those assignments are ~2 pages on average. It makes grading much more flexible, since I can just pick up the papers and grade when I have a free 15 min without needing to pull out the laptop. This, though... talk about generating toilet paper!
In my intro programming courses last semester we had to submit our source code online *and* in paper. To top it off, the school's Git repository had a ton of trouble and often the students would lose marks because their source code wasn't retrieved by the marker properly. It made no sense to me to do it both ways; just choose one and stick to it.
The constant back and forth jumping when you step through an optimized c++ binary can get disorienting fast, so it is good that the bytecode contains everything in the order you expect. Also due to the dynamic nature of java any optimization on the byte code level would be rather minimal, each class file would have to be optimized alone with no knowledge of other classes. The one thing javac optimizes are constants int i = 1 +2 will end up as int i = 3 and "Hello " + " World!" will end up "Hello World".
paper cuts kill people, only use paper with rounded edges. 
It was a simple order system app.
Might have to have a look at this.. Android development is something I want to seriously look at.
It'd be hilarious if your professor used OCR to turn it back to actual machine text
thanks for the reply. The Akka stuff seems really interesting but not exactly what I'm looking for. The uftp thing seems like an implementation of MFTP but not quite, it has some differences, but it is also not java. I suppose for clarification. I will be building a server/client application that will need a feature to send large files (10GB+) to the clients (anywhere from a couple clients to 60+). We currently use a udp-multicast program (similar to that uftp app you posted) to do this, or a backup solution that uses TCP but takes much longer. I'd like to take this functionality and incorporate it into my new server/client app but have not found any libraries that specifically handle reliable file transfer over multicast. All I have found are applications such as uftp and the protocol definition for MFTP which I dont mind implementing but wanted to see if there was something else out there already. 
AbstractPaperFactoryBeanUnitModel
You only need to to know about concurrency (independent of JVM concurrency) if you plan to make stateful REST API call chains. If you can get everything done with one call, and use the database as the the shared data store (not the app server) than you could pretty much be oblivious to servlet concurrency or concurrency in general. You'd still be a lot better off than Ruby.
Is that something you create with an AbstractPaperFactoryBeanUnitModelImplBuilder?
The OO programming class I took had half of our projects hand graded in addition to the usual auto grading. The reason for this was that the grading was heavily based on style. Not sure if the same applies to this situation.
If you want to do android development, I'd suggest using [the official google IDE, Android Studio](http://developer.android.com/sdk/installing/studio.html). It's based on IDEA, but focused for android development.
A magical place where every piece of paper is made of metal and has a mounted dial lock.
We still had to compile and run it. About 20 pages there are screen shots and before and after of the data files (text based). 
/r/androiddev is the best I've got for you. I'm not a frequenter of android dev specifically, sorry!
Cheers.. I should get off my butt and look myself too :-)
I didn't read the above posts... I am flying between reddit and kitchen atm so didn't get the context... 
Wait until you get into the industry. You'll shit bricks when you see how much that code weighs. 
My thesis was submitted on a cd... In 2000. 
Then can op reflect into the teacher thoughts to get an A?
What's a jar for anyway?
I used NetBeans voluntarily before. I don't think it's that bad.
Update: Posted it this arvo. Binding and posting cost ~$23. It was too big to be sent as a letter so it's a parcel.
All of the primitive types are named in lowercase (int, char, long...). String isn't a primitive type. See http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html
My new way of remembering stuff is to just ask stupid questions, it's like this morning were i couldn't for the life of me add up 70+70. I'm having a bad day, thanks pal. 
I used my own "GIT" repo. When I wanted to go off on a tangent and screw with something I zipped the source folder first and timestamed the zip file. I call it Single Player Git.
Are these any good? I've been wanting to bone up on my Java, especially on the EE front.
I would recommend reading the [Java EE tutorial](http://docs.oracle.com/javaee/6/tutorial/doc/bnaaw.html) and working through the examples, if you really want to learn the nuts and bolts of Java EE. Oracle has a bunch of learning trails for Java EE and Java SE, which are really helpful for improving skills. And they are all free, to boot. At first glance at this site, I wasn't too impressed. The standard for modern MVC web applications in Java EE is JSF, not JSP + Servlets. For Rails-style MVC applications, JSP + Servlets is incredibly archaic, and learning MVC that way is like learning to make fire by rubbing two sticks together. Nobody in the modern world writes apps like that, and instead use frameworks like Spring Web MVC. SpringSource has a [good step-by-step tutorial](http://static.springsource.org/docs/Spring-MVC-step-by-step/) on how to implement an MVC design, but it is a bit dated (version 2.5).
Floating social media buttons is a sure way to anger all mobile phone users. It is hard to read an article when there is a huge facebook icon hoovering over the text.
Thanks for the useful info. I guess what I'm getting is that I'm handy around Java SE/EE but I'm in a position where I'm a "Jack of all trades; Master of none" and in the long run, this is not a viable position to be in. Do you think it's worthwhile to pursue certifications with Java or is that just like the paper-MCSE's of the 90's? While I'm resourceful in getting my projects to work, I lack the depth and understanding of SpringSource concepts, Database Persistence, design patterns and things of that nature. Basically, I want to be a very good Java architect, let alone a developer.
I don't know about the Microsoft world, but where I've worked in the Java world, nobody takes certs seriously. I think it is better to pursue positions where you can gain the kind of experience you want. Some concrete suggestions: * Attend the [JUG](https://www.java.net//jugs/java-user-groups) meetings in your area and network. Ask people what they do, and those who do the work you want to do, pick their brains. * Educate yourself. There are lots of good books on the stuff you want to learn, and you can always do your own hobby projects to try things out. If you learn something particularly cool, volunteer to present at a JUG.
not convinced
Interesting. Thanks!
That's sounds like a lot more work than using git to begin with. 
http://plugins.jedit.org/list.php?category=13
Not certain exactly what you're wanting, but I've found JIndent to be well worth the money: http://www.jindent.com/
You still have to for concurrent modifications
hmm, I guess I was a bit ambiguous for what im looking for. I need a formatter than I can call from java code, and apply it to existing java source. Its for a gradle plugin im working on. Since I plan on uploading said plugin to Maven Central, it would be nice if the formatter was also in maven central... but its not wholly necessary, 
Probably not what you're looking for, but you could investigate what IntelliJ uses for their Ctrl + Shift + L command in their community edition. Maybe you'll get lucky and they're using something that is fairly modular and reusable. 
thankyou, You should add me so if i ever have a question you could help me out :) 
Done!
If it weren't for the fact these guys gave me a free* copy of JRebel that popup would piss the shit out of me. *Had to whore out my twitter account a bit.
Yes and no. It took about 30 seconds to do each time so it was no hassle. I haven't got around to setting up a git repo on my server at home yet, but it on the todo list.
my names lime_boy66 for skype
You don't really need a client-server setup if you always work on the same computer, though. It's one of the selling point of DVCS like git. Everything can be local.
That is exactly what I have done as a [plugin for IntelliJ](http://plugins.jetbrains.com/plugin/6546?pr=idea). But as you said, it requires a lot of eclipse jars (I probably use more of them than necessary)...
I really doubt that, the code is a mess :)
I solve this problem by storing arrays as whitespace-delimited strings. For example, you can store your language property as "en fr cz". You can then use org.apache.commons.lang.StringUtils.join/split to convert an array to a string, or vice-versa. StringUtils is found in the Apache commons-lang library.
I float between my desktop and laptop so the server would be handy. I tried using OwnCloud as that supports previous versions but it's slow as all hell which is a shame as it looks brilliant.
Take a look how these guys did it using Eclipse formatter: http://code.google.com/p/maven-java-formatter-plugin/ I have a locally compiled .4-SNAPSHOT build on my local maven repo which fixes a few minor bugs in the current 3.1 build on maven central. I really wish they'd just release .4 already. If you're building a plugin for Gradle, you could probably straight up steal (as in beer) their stuff. FYI: Jalopy does okay on Java 6 stuff, but I'm scared about Java 7/8 which is why I have all the new projects using the eclipse formatter over the really old Jalopy one (which we still use for our 1.6 target build).
Java programs usually save settings in properties files, which are also key value pairs. Otherwise, you could save settings in an XML file if your settings are more complicated than that. However, there are some tricks for saving multiple values per key. Either make the value comma separated (or some other delimiter), or put suffixes on the key. Maybe something like: Language = en Language.quickSetting = en BackgroundColor = blue BackgroundColor.quickSetting = blue And then enumerate the keys to figure out what goes where. This is a lot easier than processing XML based preferences. The Preferences API also deals with the problem of figuring out where the preferences should go on any given operating system. Otherwise, you'll have to figure something out, like putting the settings file in the home directory or something. This is one of the minus points of Java which the Preferences API was supposed to solve.
Null pointer is my favorite kind of pointers ;-) 
Thank you sir. the major reason I was against the JDT was because there seemed to be no way to get the dependencies short of packing them with my jar. And then because there is just so much to the JDT, packaging it was also out of the picture. Taking a look at the maven formatter plugin, its quite easy to take their dependency declarations and move them over to gradle. thanks for the help :)
Hello sh0rug0ru, i am now working on a hybrid solution. The Preferences get loaded into a HashMap on the server startup, so exporting and importing is very easy via the Preferences API and performance is really great because everything is already loaded into RAM. I have not yet implemented the quickSettings but I will try the solution you suggest! Thank you
icecreamcohn85
 [**@peterseibel**](http://twitter.com/peterseibel): &gt;[2013-05-28 18:36](https://twitter.com/peterseibel/status/339450009051348992) (UTC) &gt;The job of a build tool: 1. Save you from building the same thing over and over. 2. Build the things you need. Maven seems to do neither. ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/1fort4%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://yl.io/S) [^[Translate]](http://translate.google.com/#auto/en/The%20job%20of%20a%20build%20tool%3A%201.%20Save%20you%20from%20building%20the%20same%20thing%20over%20and%20over.%202.%20Build%20the%20things%20you%20need.%20Maven%20seems%20to%20do%20neither.) [^[FAQ]](http://yl.io/T) [^[Statistics]](http://yl.io/U) 
What does your code look like that's not working? It's hard to help without seeing it.
I've never had a problem with Maven, is there any similar tool that performs better?
nope. a jvm is a jvm. a jre is a jre. 
it's ugly
What's the use case scenario for that though, even computers as small as smart cards are popping up using java now.(I have no idea how, I suspect witchcraft) Very few things need to be calculated asap, with a cost margin that justifies the added time to do it well in c/c++
The article is odd, it almost makes it sound like going from 3 patch updates a year to 4 is a bad thing. And the "lop off" bit might be Project Jigsaw but it is hard to tell.
There you go, throw out the buzz words "use case" in an unrelated scenario.
From the article &gt; including the removal of certain libraries typically unnecessary for server operation This states the jre for server is different from client does it not?
Any plans to increase client security by not trying to slip malware into the download?
Currently there is only one single JRE. What Oracle is proposing to do is to split the JRE's libraries into functional parts, allowing system admins to pick and choose what parts to install.
Oracle just needs to use OSGI to do this kind of thing in their jvm like jboss, service mix, jrocket and every other more advanced jvm used, instead of doing it in some non-standard way. http://en.wikipedia.org/wiki/OSGi
Fucking hipsters. Aren't you the precious little snowflake who could never be served by something quite so common.
You might want to include LMAX and Spring Reactor.
&gt; Currently there is only one single JRE. As of the last JRE release (7u21, a few weeks ago), there is a separate 64-bits Server JRE distribution which omits some bits of the standard JRE (browser plugin, Java Web Start, etc.).
Wait, Postgres is considered 'light'? It could have fooled me... I'd also suggest added HSQLDB and Derby into your list there
How does it compare to Dozer or Orika?
https://code.google.com/p/snakeyaml/ http://wiki.fasterxml.com/JacksonHome
They are in the same domain, but the difference is that MapStruct generates mapping code at build-time instead of using reflection or byte code generation at runtime. That way the mapping code is fast (it uses plain method invocations) and type-safe (if an attribute can't be mapped, you'll get a build time error). With MapStruct you also don't really have any dependencies at runtime (e.g. making it suitable for resource-restricted environments) and it makes it very easy to integrate hand-written mapping code if needed, again without reyling on any interfaces or similar.
when I saw that, I did hope it was referring to the Project Jigsaw modules. I'm a Java developer, and I find it amazing how much crufty stuff I discover all the time... I imagine having such a huge standard library creates a huge attack surface
First off... on reddit you can directly reply to people by clicking the reply link. This lets the person you are replying to know that a reply has occurred, which is often the only way people know to revisit a thread. Second, the big issue I've been running into with Colt is a lot of the methods are only available on Dense matrices. In particular SVD is only dense. Other libraries I've seen do crazy things like when you pass a sparse matrix into a method like an inverse or a multiply they convert it to dense before performing operations, which in my case, 500,000 x 100,000 size matrices with a 5% or less density, causes quite an issue. Does la4j keep sparse matrices sparse when calculating? Third, I've noticed in the API that a lot of the BLAS routines are either not there, hard to find, or oddly named. Is there any chance we can get a more straightforward means of porting BLAS based algorithms in to la4j. I went ahead and forked my code which was having performance issues under parallel Colt + svdlibc and I'll let you know how it does.
Whitespace sensitive (as opposed to delimited) formats are lame, avoid yaml. Jackson is a good processor though for XML, json
The easiest way to simplify a square root is to look at how square roots work. Basically, you can make any number the coefficient of the radical if you can divide it out of the radicand TWICE. For example sqrt(8)==2sqrt(2) because 8/2/2 = 2, and pulling out the 2 twice multiplies that number by the coefficient. So applying this to extremely large radicals, you would do this: 1: Store the radicand as a temp variable 2: Create a loop that decrements from the value of the radicand to one 3: Find the first value that divides into the radicand twice 4: Divide that number through the radicand variable twice, store that number in the next available index in your array 5: loop repeats until the radicand is a prime number
How is code generation any more type-safe or fast than verified and hot path JITted byte code generation?
JSON is pretty good format at handling stuff like that, XML is typically good too. You really only need to write the info to a file
Code generation at build time avoids the overhead for creating byte code at runtime (in terms of CPU cycles and in terms of the required libraries). It is done only when doing the build instead of everytime the application is started. I also think it's an advantage to have actual source code which you can debug etc. if required. With respect to type-safety, MapStruct will give you a compile-time error if an attribute can't be mapped (e.g. because the type in source and target is different and no automatic conversion can be applied). This allows for much faster error detection and developer feedback compared to finding these things out at runtime. You will also get a compile-time error when referring to a non-existent property in a @Mapping annotation. The other notion of type-safety in MapStruct is that you work with interfaces specific to your domain instead of a generic mapping API. This makes sure you e.g. don't accidentally map an order entity into a person DTO.
If you want to get fancy, you could try a ternary if statement. System.out.print( ( conditional ) ? "I am right" : "I am wrong"); 
Haven't used Spring Reactor yet, but LMAX is pretty awesome to play around with.
1. You need to give a variable name to the second item: &gt; String name = "George", name2 = "Burdell"; **Edit:** if you wanted one name, "George, Burdell", then your error was closing and reopening the quotes, which told Java that you wanted *two* Strings 2. The referenced variable "refCount" needs to exist: &gt; int refCount = 0 ; &gt; final boolean flag = (refCount == 0); 3. The second number, '123.55' is being treated as a *double*, so you must treat it as a float: &gt; float num = (int) 20.5f + 123.55f ; **Edit:** Also, your (int) cast is unneeded. This will work and looks cleaner: &gt; float num = 20.5f + 123.55f ; Or, without any casting of any kind, you can leave it as a *Double* &gt; double num = 20.5 + 123.55; 4. .substring( n, n ) returns a *String*, which is a collection of *char*s. If you want a single char, try: &gt; char letter = "hello".charAt( 0 ); 5. I believe the default is package level. So it's public to everything in the same package, but outside the package, it's not visible.
Oops. I guess I fail at formatting. Use the comment from /u/FlyingPurpleZebra instead!
Pick up Effective Java, 2nd Edition, this book will make Java easier and more enjoyable to work with. If I were you, I would start get in the habit of making unit test. Junit is built in has it limits. You might want to look around for some libraries like Hamcrest to make the tests more useful. If you can, spend some time working with Spring. Its the Swiss army knife for Java. There is also a version available for the android JDK. Spring can cover a lot of ground but the only two things you should probably get familiar with is RestTemplate (useful for calling REST apps) and Spring MVC (just to get a feel for the full stack of a web application).
Thanks for the tip! I'm not going to edit my comment this time because your comment is already correct. But now I know, and knowing is half the battle.
How about you fire up your IDE of choice and find out for yourself?
Am I missing something? How could it be anything other than B? Kitten's immutable.
Tried it on two different IDEs and got two different answers... JGRASP says it's A while Dr.Java says it's B
My hunch is JGRASP is garbage collecting it before you inspect it or something. It's a pretty basic contract in Java that if I new up an object I get an object reference back.
http://docs.oracle.com/javase/tutorial/java/nutsandbolts/if.html. Also if you are comparing objects, do not use = &lt; &gt; but theirs methods to compare them. But post your code, and hit the tutorials... from the start.
Out of curiosity, is that some kind of official test or homework? Because that source would be a good example of finding errors (I found 3 so far).
Why?
Back in the day before "enum", there was a way to hand code type safe enumerated types. In fact, I think the Enum class they added uses that same pattern. It is more a question of curiosity. What is it that is preventing my class that extends Enum from compiling? Is it something in the Enum source code that the compiler checks, or does the compiler have a special check for this particular class. "enum" in the end is just syntantic extension, all the enumerations become real classses and objects that are a part of a real instantiation of Enum. I just wanted to know what is stopping me from doing this.
None of them. B's the closest, but it's a reference to a Kitten object, not the address; the reference may be the address, but it may be a pointer - the Java spec doesn't say how references should be implemented, so there's no way to know if the example reference is a pointer or an address.
As a guess it's because this doesn't (as far as I can see from a quick skim) add anything beyond the original Spring announcement in mid-January: http://blog.springsource.org/2013/01/16/next-stop-spring-framework-4-0/
Before Java 5, there was no concept of an enumerated *type*. You could create something like it, but it was outside the language, and if you used the type incorrectly, you would only know at runtime. The compiler wouldn't understand what you were trying to do and wouldn't be able to help you. Because the set of values is restricted to where the enum is defined using the keyword, the compiler knows the exact range of values. This allows the compiler to tell you if you are assigning a wrong value to the enum variable, it can be used with switch and the compiler can warn you that you aren't covering all cases, and it can be used to create very efficient maps (EnumMap) and sets (EnumSet) because the compiler knows exactly the keyspace. The enum keyword serves the compiler. If you could extend Enum, it wouldn't be possible for the compiler to figure out what you are doing. So, as you have guessed, the Java compiler prevents you from extending Enum, because it is a special class only constructed from the compilation of the `enum` keyword.
Before Java 5, there was the typesafe enum pattern created by Joshua Bloch. And it has all the properties of the enum in Java 5 on, but just required a lot of tedious coding. It really is just an academic question ... what is preventing me from extending Enum.java? 
The Typesafe Enum Pattern simulates the properties of an enumerated type, but it is only a simulation, because the compiler is not in on it. However, Enum is a really enumerated type with full blessings of the compiler, and that's why the compiler places so many restrictions on the Enum class, to preserve those characteristics. It's the compiler that is preventing you from subclassing Enum. If you try to extend Enum, the compiler will report an error. Only the compiler gets to that. However, the restriction is not at the bytecode level. It is technically possible to construct a subclass of Enum using bytecode manipulation tools like ASM.
No, it really doesn't.
 * java.beans.XMLEncoder * java.util.Scanner
i didn't see much confusion with JBoss CE vs JBoss everything but whatever. WildFly going forward.
You are a junior programmer until you have at least a few years of full-time industry experience under your belt. That said, keep it up! If you have only had a few programming courses, you won't be wasting your time with another. Python, C, and Java are all good at different things and each have different characteristics. Head First has a fun series on Java and other general programming concepts. I found the Android docs and SDK to be more than sufficient. Source: BS degree, several post grad certs, read many books, decades of developer/lead-developer experience in multiple languages
You could probably do this all in the main method for example: boolean condition; if(condition == true){ system.out.println("whatever goes here"); } else if(condition == false){ system.out.println("whatever goes here"); } } However I'm on my phone and I can't see your code so I don't know what you did or how accurate this is to everything you have to do! Maybe you need to assign something else to the condition but now I'm just throwing ideas around :/ hope this helps somehow...
Yes. Bucky's YouTube channel is excellent. He's pretty funny too.
Do not recommend thenewboston. While it is convenient to watch and understand, he doesn't conform to good coding practices and will get you into bad habits.
&gt; The Enum class in java IS the typesafe enum pattern It's *implemented* as the typesafe enum pattern, but that is not what it *is*. The Enum class has been tightly constrained to represent a true enumerated type (at the language level). As a special type, the values are known as a discrete, well-defined set. The typesafe enum pattern is just a pattern. The result is an ordinary class. The specialness makes the Enum class more useful than the ordinary typesafe enum pattern. There are lots of things that are compiler tricks. Like for loops. In bytecode there is no such thing. But, does that mean the for loop pattern (init-bounds check-next index-goto) is the same thing? There was a time when for loops were also hand coded without language support. That is the real semantic question. When does a pattern transcend being just a pattern into being an implementation detail of a language feature? &gt; I am sure I can copy the source code to Enum, rename it, and then &gt; subclass it without any problems. You could do that, but you'd just be implementing the typesafe enum pattern, and as far as Java is concerned, all you have is an ordinary class. You wouldn't be able to use the result with any of the Java features (implemented by compiler tricks, like for loops) that are possible by the syntax restrictions surrounding the Enum class. There wouldn't be any point to making a copy of the Enum class. In fact, this is proof that the Enum class while implementing the typesafe enum pattern isn't the same thing. Hopefully, this should answer the question of why you are not allowed (through the Java language) to subclass Enum. You are forbidden from doing so for very good reasons. TL;DR - You're missing the forest for the trees.
Does he want to quickly squeeze out an useful program, or is he committed to making a profession out of it? Two completely different approaches. Is he a child or complete amateur with zero understanding of people, computers, or computer science (like apparently at least a few people in this thread), or a twenty-year veteran only new at Java syntax and memory model? What's gold to other is nearly useless to other. To think that there are actually commenters and voters in this subreddit that this has to be explained to at so much detail...
Udacity is your place. A java course is being taught there. Its a 10 week course.
He's an absolute beginner - he said so himself. And why would an absolute beginner need syntax only?
TIL Jython. 
Firstly, try /r/javahelp for this. But please don't just post what you've done here - rewrite your code so that the comments are relevant, make the variable names be descriptive as to what value they're storing, remove anything irrelevant, and explain what happens when you run it and why it's not working in the way you think it ought to. To put it slightly more bluntly, make it look like you've actually tried to do your homework, don't expect others to do it for you. What I will say is that 365! is a huge number, so you won't be able to simply calculate the numerator and denominator, as [365!](http://www.wolframalpha.com/input/?i=365%21) is far, far larger than [the largest number you can store in double](http://www.wolframalpha.com/input/?i=2%5E1023). You could use [BigInteger](http://docs.oracle.com/javase/1.4.2/docs/api/java/math/BigInteger.html), but my guess is performance would be pretty poor. Edit: BigInteger performance is fine for getting the factorial of 365 - there's still better ways of doing this though.
Sort of yes. I also saw that the parameter "name" overshadows the field name, thus this.name never gets assigned and is null. equals() uses Kitten instead of Object so it doesn't override equals(Object obj) of class Object and inside equals() is the attempt to access a private field of "kitten", but also throws a NPE because name is null due to the constructor. If equals() would be correctly overridden then the lack of hashCode() would be another error. Usually I wouldn't nitpick, but I think it's bad to show students code that's wrong, which might end up with them memorizing the wrong stuff instead of the right way.
Vogella's homepage is at http://www.vogella.de/ He also has quite a few other tutorials covering Java, VCS and so on.
Study for the oracle certification. You will be amazed what you learn in just a few months. Make sure you code while reading so you can quickly test new knowledge and how it fits with existing knowledge. 
The only concussion was about JBoss EAP vs AS, and that's only made worse now (naming wise, the download situation has much improved)
/r/dailyprogrammer
Seems like all you had to do was read the title of the post properly and your confusion wouldve been cleared up.
Yes yes, we are telling each other things we already know. I will try a new angle... Pretend I was trying to explain to someone what "public abstract class Enum&lt;E extends Enum&lt;E&gt;&gt;" means. It's a strange looking definition, so I was just going to write some implementations of it to show how this generic definition works. But then it wouldn't work, without a compiler error that really explained why it didn't like it. Oops, no mention in the source code of Enum that it is *special* and can't be subclassed by mere mortals. No special annotation in the source code. No mention of this in the javadocs either. So that was my question... WHERE IS THIS RESTRICTION IMPLEMENTED? Is there a secret annotation I have missed? Is there a special flag set in the .class file I've never heard of? Is there a special check in the compiler? Does Joshua Bloch personally log into my machine every time I try to compile and check it himself? That's all I'm asking. TL;DR - You're not understanding my question.
I couldn't agree more.
You can also try the Thinking in Java book: http://www.mindview.net/Books/TIJ/
Did you take a look at the [JMF API](http://www.oracle.com/technetwork/java/javase/tech/index-jsp-140239.html)?
Specifically: * Writing all the levels of the business logic and the implementation details out in one big block, instead of layering the business logic out in one place, and the data shuffling methods on another layer. * Not protecting your truth database from DOS. * Null values used both to signal logic paths and data values.
`null != aObject` is usually a hang over from doing `constant.equals(variable)` since this ordering retains the equals semantics in the case that the variable is null.
Well I have container.add(text) on line 34.
My phone changed up some of the indenting and won't let me edit it, but you get the idea. 
Im sorry im having trouble getting my question across. What im trying to say is that i dont feel comfortable learning new stuff about java without fully mastering and understanding basic things like iteration. im still iffy with them. To be clear i understand what a loop is or a if statement its using them in Java that i cant get a grasp on. I need to practice it by actully using them.
Thanks for the answer. Yes they do feel silly, but the ones in this book are downright awfull, i just dont see any practicality and il make up some excuse and skip it, haha i have the worst learning habits. I guess il just grit my teeth and type them over and over again. 
Will do. Thank you.
Don't learn by typing them over and over again. It isn't about learning the syntax of how to type out an if statement. If you forget what an if statement looks like google "java if statement" and you'll find loads of websites that will show you how to properly write out an if statement. I have recently done a lot of bash scripting which I don't know very well. I do know the core concepts of programming very well so sometimes it's just a matter of looking up how to format an if statement or a for loop, because I know that is what I need and how to use it. What you really need to get from those books is WHY and WHEN you want to use that if statement. What problems will it help you solve? The books (if they are any good) should have practice problems for you to figure out and write a program for. Something like write an application that will take in an integer input and output whether that integer is odd or even. It sounds dumb and trivial, but it will help to understand the concept of "if" statements. And actually as you progress you'll find that a lot of programming boils down to a LOT of these "dumb and trivial" type problems that all build up into something much more complex and interesting.
ah I missed this comment when I wrote my other reply. There really isn't anything inherently different about the way java does things like if/loops compared to BASIC. It is all just syntax, and memorizing that will come with time. I wouldn't get caught up with memorizing syntax. If you understand the concepts that is what really matters, the rest will come with repeated use. In most Computer Science degrees in College you are rarely ever "taught" a computer language. Sure you will have to USE one, but because it is the concepts they care about, they rarely take the time to teach you how to specifically use Java, or C, or the flavor of the week.
My guess is that even if it works, it's a bad idea.
How so?
I've never used ProcessBuilder, but after reading the API, I'm guessing you have to supply the command line executable. Give this a try: On windows: arguments.add("cmd.exe"); arguments.add("/C"); arguments.add(path); arguments.add("-jar"); arguments.add(currentPath); On *nix: arguments.add("bash"); arguments.add("-c"); arguments.add(path); arguments.add("-jar"); arguments.add(currentPath);
In my personal experience, which is moderately broad in this subject, using non-native applications for mobile is a bad idea. The very few exceptions I can come up with are: Appcelerator Titanium and uhhh, I can't come up with any others. And even then I think I'd rather go native. Some frameworks I haven't used: Corona and Unity. They both look pretty good (on par with Appcelerator, I'd guess) but I have no experience with either. Considering how non-fully-production ready JavaFX(2) is, I can only imagine it's a bad idea for mobile. (and yes, I've made apps in JavaFX2)
She looks like a java developer.
Be a bit more specific when you say "screws up". Is there an error or does it simply not behave as you want it to? Aside from that, you're using == to compare strings which can under certain conditions be faulty. Ideally you should compare strings using the .equals() method*. For example: if ("foobar".equals(someVariable)) { ... } As to why your code could fail, maybe it's leading or trailing whitespace? Try using the .trim() method to remove whitespace from the input string. Hope that helps. [*] Technically you can compare Strings using ==, but that only works in certain conditions. In Java the == operator compares the values; and for reference types that means it compares if two both reference the same instance. In some cases that can work just ok, but in other situations, like different classloaders, etc, it won't work and produce really hard to find errors. 
The process that you're looking for is indeed called debugging. Check this YouTube video out: http://www.youtube.com/watch?v=joWldbcp1So
In general, the only time you want to use == like that is on primitive types. For most uses you never want to compare the two references with double equals.
The fact that == is incorrect (or that it only returns true in certain conditions) is not related to immutability. 
Since everyone has pointed out why it was behaving unepectedly, I'll leave that alone. Just to point out another option to check for string equality, you could use [Apache Commons](http://commons.apache.org/) or [Google Guava](http://code.google.com/p/guava-libraries/) and their string utilities. With Commons it's as easy as: StringUtils.equals(value1,value2) and that's null safe. 
Agreed, javafx is sun's failed attempt at competing with flash and silver light. HTML5 and web standards are slowing taking its place.
I stopped bothering. Java is verbose. Between descriptive class names and generics, 80 character lines are harder to read than longer lines. I try to keep it under 120 
I prefer the Reddit community over the StackOverflow community...
&gt;Eclipse's defaults sadly don't seem to be sane ones The only sane solution to this is one everyone can do. So use the defaults of your IDE and be done with it. &gt;they intend the newly created line too much Stop being finicky about it. That road leads to a world of pain. &gt;don't place closing parentheses on their own line Stop being finicky about it. That road leads to a world of pain. 
Try the Checkstyle plugin. You can set up your own, or pick from default rules to help. Works well for where I work.
JavaFX was Sun's attempt at replacing a graphical user interface API that was showing its age, Swing. The only way it attempts to compete with Flash and Silverlight is through venues Java already tries (miserably) to compete with those two technologies; Applets. I've used JavaFX 2 on a number of projects, and I've found the experience enjoyable. It's very well designed, and the performance is good. It's like QT: Java edition. I don't know how they plan on making it work on mobile, but it'll be interesting to see, at least.
Maybe, maybe not. If a high-degree of device integration is a requirement for your App, then I can see using a middleware as a hinderance. However, if you're just going for cross-platform consistency, then this might be a good contender. We won't know until it's released, though. As an antecdotal aside, Oracle has demonstrated (in their own published benchmarks, mind you) that J2SE-Embedded running on Android performs better than Dalvik. I don't know about the other parameters (memory consumption, platform integration, etc), but I *have* used J2SE-Embedded on Raspberry-PI with excellent results, so that's encouraging.
I find 120 to be the sweet spot, it's what my formatter is set to.
This really isn't something you should worry about. Most decent IDEs have a "format code" function. Just write code and use that. Line length and formatting is occupying too much of your brain.
Why is this better than [ActiveObjects] (https://java.net/projects/activeobjects/pages/Home)?
In today's world of high definition monitors 80 characters is barely 1/4 of my 1080p screen. I don't even bother.
Without sounding like an ass, why bother? An 80 character line width made sense 25 years ago when I was writing code on a VT100, but now? Keep it under 120 or so and all is well. Even on a laptop screen that isn't draconian. 
This library represents Repository-pattern. ActiveObjects is ActiveRecord-pattern implementation. With this library you need not inherit any classes or interfaces. Entity classes stays pure Java classes and can be designed as feels better for your domain.
LMGTFY is never an appropriate answer. 
Some more helpful guidelines: 1. Whatever you do, be consistent within a function, file, and project when possible. In the end, just make sure it's readable. 2. I'll break up a line on: parameters, exceptions, and dots. 3. Don't nest your conditional/loop blocks too deeply. I use an early-exit style where as soon as I know I'm done processing an element or function, I return/continue ASAP. If you get more than 3 blocks deep you should probably introduce a new method. 4. 4-space expanded tabs cut down on superfluous whitespace. 5. Use intermediate variables, even if they're just throw-away. It's often easier to read (and debug) than a big chain. 6. Keep your functions under 100 lines or so, max. Smaller functions are easier to read, can use more concise variable names, and encourage reuse.
It helps in a lot of situations, like when you need to have 2 files side-by-side or when you need to print a piece of on actual paper. I have not paid much attention to it in the past, and have come to regret it those projects.
It's my understanding that anything that you don't want to change should be tagged final, as this helps the compiler know what to expect. Doesn't mean I do it though... :)
Interesting approach, but it looks like a lot of boiler plate code. As the title kind of implies, how is this better than an annotation driven approach? How about a repository pattern implementation using annotations? 
&gt; how is this better than an annotation driven approach? I think the idea is that the pojos don't have any references to table meta data.
Long polling. You can hold the connection open until x happens and have it timeout after y seconds and keep that pool open for other requests. Reduces the amount of pointless request returning no (new) data for "real-time" webpages and no hold up your request threads. Spring builds on this as well, you can see an example at http://blog.springsource.org/2012/05/13/spring-mvc-3-2-preview-adding-long-polling-to-an-existing-web-application/
It's debatable whether that's good or bad. I can't think of any good reasons why having (declarative) information associated with the model, especially when it doesn't impact the actual code. 
Interesting. prepare for questions on stackoverflow about "too many open connections" and low performance due to synchronesation
Wasn't aware of ActiveObjects. Seems very interesting but the last release being at 0.8.2 from 2008 and the dev release being 2 years old is a little concerning. Is it maintained at all?
80 is useful for terminal display and printing. One thing that helps is that you should try to vertically align things so that if they don't fit into one line, you can still scan the parameters easily. // scan horizontally public void method1(Object param1, Object param2); // scan vertically public void method2(Object param1, Object param2, Object param3, Object param4, Object param5); // outter scans horizontally, inner scans vertically complexCall(param1, param2, param3, param4, method(paramA, paramB, paramC, paramD)); 
I agree that you shouldn't be thinking about it, but that's my point: develop the good habits early and you won't need to, it'll become a natural part of your work. I think code formatting is just as important as an individual as on a team, for the reasons I stated earlier... they still exist whether working alone or with a team. 
| I don't know how they plan on making it work on mobile, but it'll be interesting to see, at least. This is really my opinion. JavaFX isn't even complete from a desktop application perspective - why would they bother with mobile.
I alluded to the reason in my post. Non-native applications suck most of the time. Some application frameworks (like Appcelerator, for example) compile to native code, but there's shortcomings here as well.
Really? It isn't? What crazy features do you want? JavaFX 2 is fantastic for desktop applications. I'm asking because my experience with it was nothing but good, and yet I hear people complaining about it all the time. It makes me wonder if those people have even *used* it in the last two years.
I've created a JavaFX application which works like a charm in Windows. No problems whatsoever. Then I bring it to the Mac and I'm like "gee, I need to use the Mac menu bar" - that works. Then I'm like "boy, I'd love to use the Mac taskbar (top right)." I google, and find out quickly - you can't do it. There some AWT hacks, but JavaFX2 doesn't do that. Then I'm like "gee - I don't really need a taskbar icon, but I need to get the default Java icon gone from the launch bar (bottom middle thing). " Guess what - you can't do that either without AWT. "How do I change the default program name from java?" Hahahahahahaha - get my point? The second I learned these things I immediately scrapped it and went so Swing and got my shit done. JavaFX shows AMAZING promise, but it is NOT prime time from an application development framework as it's been advertised. There's no excuse for a version 2.2 framework to not include something so simple as a launch bar icon. WTF. EDIT: also, please read rediquette. Down-voting is not for disagreeing. Not that I care, but I can only assume that since you responded within seconds to my post that was you. EDIT 2 (reference): [RT-22988](https://javafx-jira.kenai.com/browse/RT-22988)
Yes, there are two places where I often deviate from Sun-Style: 100 or 120 max char lines, and spacing and newlines in long method signature declarations.
The compiler can infer most of that even without the final declaration. It's mostly for mainenance programmers. I declare all non-changing variables final, so that when the maintenance progammer bumps into a non-final variable, they know that things are going to get unusually hairy down below.
 complexCall(param1, param2, param3, param4, method(paramA, paramB, paramC, paramD));
I was at a friends house helping him move some furniture to storage. In between trips to the U-HAUL, his dad asked if I could help him with the Java updater. When I asked what he needed help with, he said he didn't want the ask Toolbar, but couldn't keep his hand steady to click the checkbox. I, myself, even had to find that precise point where the planet's align to get it unchecked. Who the fuck doesn't manage the state of a checkbox with the string that's associated. C'mon man...
I prefer to reference [the official style guide](http://www.oracle.com/technetwork/java/codeconv-138413.html).
~~Did you tell him about tab and spacebar? Might have better luck with the keyboard than the mouse.~~ Does not work.
Does that work inside installers?!?!? FUUUUUUUUUUUUUU.... I'm going to call my buddy right now to tell his dad he can do that.
Just tested it now. It does NOT work. It seems they want to make it difficult.
There are some niceties assosiated with given aproach. For example, you can have to different repositories for given class, or you can use the same class as stand alone table record and as a part of another table record. But this sounds more like a strawman. The real benefit is different. In given example on github page all classes are immutable and repository class serves as a mutable collection of immutable objects. With JPA it's simply impossible to use immutable classes as persistant entities. In JPA you Java-class's identity is squashed with identity stored in database-table. This fact is almost transparent, but not fully transparent. For example, you can have class instance not synchrinized with database record. In such case you have two different "instances" with the same identity wich feels wrong. With this library identity desision is up to you. 
When isn't the java installer safe for work? it's also because I'm a bad mod and the approved and NSFW buttons are next to each other.
So there's nothing conceptually bad with the idea, you've just never seen it implemented well? If so, fair enough.
Better question: when is the Java updater SFW?
Are you unfamiliar with Ninite? Go to the website, click the Java checkbox, download the installer. Anytime you run the Ninite installer it will silently update whatever applications you originally checked off, ignoring all the crapware.
It is really really small. Ninite isn't something that must be installed, all there is is the downloaded executable. And in this case it is much simpler than trying to update Java any other way.
As given in the example, there's little point (as a comment mentions). BUt I guess it's just an example nothing more.
Simplest ORM I've found: http://persism.sourceforge.net/main.php No boilerplate. Only use annotations where the lib can't auto-discover things for you. 
Says Mr. Steady-hands.
Wonder how much it costs Ask.com. That's gotta be a pretty penny.
Why the hell did he want the ask tookbar?!
*[per se](http://dictionary.reference.com/browse/per+se)
The definition for this restriction is in the Java Language Specification http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.1.4 i.e. It is a language rule that you can't manually extend Enum&lt;E&gt; or any other invocation of it. So yes, it would be the compiler that is keeping you from doing this.
Employee who works on actual development of .NET at Microsoft?
**absolute beginner to coding**.
[Bucky's java tutorials(newboston.org)](http://WWW.thenewboston.org) helped me quite a bit before I started my comp sci major.
ugh, sorry. Reddit screwed up the code block after i posted it.
Ah i see. Thanks i appreciate it. Out of curiosity, why does "!" have to be in its own parathases? it cant just be (!"jack.equals(name)); ? 
Yeah I have it set up so you can name the flower object whatever you want and my goal is to make it so that i can have a garden full of different flowers and remove, add, and randomize, am i doing it wrong?
I just have a list of things I need to include for the assignment lol You've very helpful! The following is giving me trouble at .add =/ private void fillFlowers() { flowers.add("Rose"); flowers.add("Daisy"); flowers.add("Sunflower"); }
Umm, no. You screwed it up by not formatting it right. There is a formatting help button right at the bottom of the input box. For code, one empty line before, and four empty spaces at the beginning of every line does the trick.
Also Ctrl+Alt+Del maybe
Especially that they only do this dick move on the 32-bit JRE and neither on the 64-bit one nor the JDKs.
take a look at maven build system
Have a look at one of the many build tools available. They are really helping if you have to manage dependencies between projects. A small list of tools I can can think of right now: * [maven](http://maven.apache.org/) * [gradle](http://www.gradle.org/) * [ivy](http://ant.apache.org/ivy/) * ant I use maven since I'm used to it and it does what I need. Ant is used *under the hood* by Eclipse to build your project. I heard good stuff about gradle and ivy, but haven't yet used them yet so I can't judge them.
Maven can be a bit intimidating at the start, but once you have some experience with it, it is going to be really useful. A concept which should be useful for you is a multi-module project. Can't help you with obfuscators since I haven't used any so far.
Hey Oracle. I just disabled JAVA. Merry F---MAS. S/A
I'm curious, why does the man need Java? Major browsers block Java plugin today by default. If there isn't any local program or some specific website that needs Java, you might as well disable it. While Java is still very relevant, nobody should need Java web plugin anymore.
Over my 16 years as a Java developer (I started early), I've tried a wide variety of ORMs and Database Abstraction Layers, including all of the usual suspects. In that time the best I've found is [Jooq](http://jooq.org/). Its philosophy is to avoid pretending that a database is something it's not. Frequently, with Hiberate, I would find that it was very difficult to persuade it to do things that would be relatively straightforward in pure SQL. So rather than trying to shield the programmer from SQL like it's some kind of evil language that must never be spoken, Jooq provides a surprisingly fluent DSL that closely maps to SQL. Check it out. It's very actively maintained and the developer provides great support to users.
We are in the early stages of a process that will probably end in us dumping Java as our primary language. Go (as in golang) is our current frontrunner. We are not rushing to change, but dumping Java does seem inevitable. 
Use ninite.com to install/update Java. Never complain again.
I predict a free library will appear to replace this... How hard is it to keep up with timezone information? I am asking genuinely.
Use jodatime. Nobody needs java date.
I don't think jodatime is impervious to changing timezones. This has little to do with specific APIs, and more to do with the randomly changing timezones due to political policies etc. Edit: Seems I thought wrong, and that Joda-Time takes care of this anyway, http://joda-time.sourceforge.net/tz_update.html
Proguard is by far the best option since it's free and widely used. If you're comfortable with ant and don't want to switch to Maven, Ivy is a good alternative; however I prefer Maven since it takes care of two birds with 1 stone (build/dep)
The timezone data is included in the distribution. You can also update it manually if necessary.
final has issues with testing frameworks (aka, Mockito) so I tend to avoid it like the plague - though on intermediate variables it would not be an issue. I tend to use final when it needs to be for anonymous inner classes/callbacks. Fun topic, Java 8 will remove that requirement to some degree with the concept of "functionally final" or something.
The adults at Google seem to be doing well with it. On the other hand the strong association with Google is a strike against it. We aren't jumping ship with Java anytime soon, but it is always prudent to keep your eyes open about any software you depend on. Right now there is just one little non-critical side project using Go. In fact it is actually parallel development to the same project in Java and PHP. So far the one guy doing Go is ahead of the other team. Some of that is not needing to answer to the team, but he is also having to learn the language as he works. It is going to be interesting to see how this plays out. 
Have you considered moving to a a more reasonable JRE (such as OpenJDK) in the meantime? 
Java needs a new steward.
Great, thanks, I updated my post.
Yeah often times I find StackOverflow people are complete jerks.
&gt; ORMs don't pretend the database is something it's not. That's exactly what they do, they attempt to make a SQL database look like an object database, which they are not. Nothing else you've said contradicts that. &gt; Also, most ORMs have the ability to drop down to native SQL if the basic capabilities provided by the ORM don't meet your needs. Yes, and in Hibernate's case this is a horrible poorly documented pseudo SQL that is in most cases far inferior to the database's native SQL. &gt; If you find yourself having to "persuade" Hibernate to do something, either you're using Hibernate for something it's not designed for (like reporting) or you should just use native SQL. Ah yes, the old "if you think it sucks you're using it wrong" argument. I wasn't using it for anything especially out of the ordinary, it just sucks. It sounds like you're suffering from Stockholm Syndrome.
They are an outlier in almost anything technology-related; it would be unwise to emulate them expecting success to follow, even if they would some day start using Go seriously to replace Java from a business perspective. Professional ethics absolutely require people of our profession to obtain informed buy-in from business decisionmakers, through modeling all of the principal effects, including the real difference in cost of hiring, the difference in maintenance and bugfixing costs resulting from very different upwards compatibility policies, availability of deep resources for root cause analysis and bug fixing, availability of support tooling, and so forth. Compared to the answer to the question: what can we now accomplish that we couldn't reasonably accomplish before.
&gt;&gt;availability of deep resources for root cause analysis and bug fixing, availability of support tooling, and so forth. I would be optimistic about Java's future if Oracle demonstrated a stronger commitment to these types of things and less commitment to getting the Ask toolbar installed on my system. All snarky comments aside, my original comment was based on long-term considerations. As IT professionals it is also our responsibility to try to anticipate possible threats to existing systems. And whether we like to admit it or not, there are threats to the Oracle's Java ecosystem. 
This was my thought
I'm not sure quite what you mean, but it does generate POJOs: http://www.jooq.org/doc/3.0/manual/code-generation/codegen-pojos/
&gt; Can't you just update to the latest and be done? Usually not done in production. You have a particular version of the JRE that was certified, and you stick to that. Except you want to update the time zone data.
&gt;Usually not done in production. Ever thought that this practice may be the root of the issue, and not whether Oracle does or does not provide time zone updates?
From http://openj.dk/2013/06/08/quick-note-on-oracle-java-se-time-zone-updates-tzupdater/ : &gt; You do not require the TZUpdater in order to have correct timezone information in your Oracle Java SE applications ‚Äì it comes automatically with every version and gratis update of Oracle Java SE. &gt; Oracle Java SE 6 is now well past end of public updates. Users are always encouraged to update to the latest gratis public releases available. Users who choose to run older and not publicly supported versions, wanting updates and tools such as the tzupdater for these old, not publicly supported versions, can consider commercial long term support options.
#1 What problem? #2 Format your code properly and you'll get more help. Prefix by 4 spaces on every line or pastebin.com. 
&gt; Instead of me doing the talking, I will let my code talk. No. So we're supposed to just find out what you're having problems with on our own? Explain the problem, ask a concrete question. Also: such questions should be posted to /r/javahelp 
 this.lenght = length; should be this.length = length;
Not sure if you read the code before posting your comment, his question is there at the end of the code and his code is formatted by reddit in &lt;code&gt; 
In the Direction class, you want those constants to be `final`, too -- otherwise they could be changed at runtime.
The [docs](http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Class.html#isInstance\(java.lang.Object\)) would suggest that isInstance is in fact identical to instanceof. The issue is that isInstance is being called on a Class object, and that Class object is not of type CourseMovement/FineMovement. if(CourseMovement.class.isInstance(movements.get(0)) { System.out.println("Execute the movements in descending order of their length"); } else if(FineMovement.class.isInstance(movements.get(0)) { System.out.println("Execute the movements in ascending order of their length"); } On that note, since it is identical to instanceof you're probably better off using instanceof for readability. Additionally, I don't see why you don't just have some method in your MovementIFC interface that each one implements and just call that. Usually if you find yourself using instanceof there's a better way to do it.
Take Australia (please!). Three states Queensland, New South Wales and Victoria all at the same longitude. But each state government decides to start or end daylight savings at different times. Hey we're getting the Olympics? Let's make a late breaking decision to change the daylight savings cutoff. Bureaucrats and politicians like to tweak this sort of thing without thinking about the consequences, and suddenly nobody can schedule a meeting without getting their alarms an hour late.
One of the main reasons DST must die.
updateThread should be named UpdateThread. You should follow the naming convention for the language that you're using. Java classes are NamedLikeThis and notEverLikeThis.
&gt; you're just using them in places where checked exceptions are being forced on you by the compiler -- I think. Unfortunately, correctamundo right there. Fixed in the latest version of SoundEffects.java, with all due credit given to you. EDIT: Working on fixing it in other classes right now.
In response to your comment in the source about keyTyped, you should take a look at [the javadocs for KeyEvent](http://docs.oracle.com/javase/6/docs/api/java/awt/event/KeyEvent.html). Basically, that's for characters on the keyboard that are generating an actual character, not for the things like the escape key or F1 or whatever. If you were creating a text editor, you'd probably be pretty interested in keyTyped, but since you're working on a game, it's logical that you're more interested in keyPressed. This surprised me too -- I certainly didn't know that. I just wanted to point you towards that so that you know that when in doubt, you can almost always find a good answer to your questions in the javadocs.
Fixed; thanks for helping us out so much intrepidengineer!
Thanks; that comment was actually from my partner and we both kind of talk out of our asses through Java comments. Now we know though; next time we'll take a look at Javadoc before writing silly comments!
Fixed! Wow, putting each problem in a separate comment makes this a lot easier to keep track of! We've used both syntaxes before -- In the future, we'll stick to the exclamation negation now.
So, for example, you might do something like this: src/sprites/pellet.png src/sprites/pacman/left-1.png src/sprites/pacman/left-2.png src/sprites/pacman/right-1.png src/sprites/pacman/right-2.png ...etc... src/sprites/ghosts/red/left-1.png src/sprites/ghosts/red/left-2.png ...etc... src/sprites/ghosts/blue/left-1.png src/sprites/ghosts/blue/left-2.png ...etc... That's a nice minimal naming convention for the files. Everything is easily found, and it's very consistent. Then, when you go to create pinky, you could just Ghost("pink"), and have the ghost class *know* the naming convention, and that it just has to substitute in the passed in string into the right place in the path.
I figured. Java has this weird thing where they came up with checked exceptions, and then they decided to use them everywhere. It's very annoying, particularly when you're a student creating something relatively smallish, and the compiler is forcing you to write a bunch of stuff just to subvert this silly rule. Generally, more modern java code will still throw lots of exception classes, but they'll be a nicely defined hierarchy and all based on RuntimeException -- so you can always catch them if you want to, but you aren't ever forced to do that by the compiler.
You're welcome, this is a lot of fun!
Excellent!
Great, I'm glad this approach is working out for you.
I wish my school offered programming courses. My friend and I are forced to independently learn at home and at school without a teacher. Though, I really don't understand why schools continue to teach Java. It's really not a great language anymore for many reasons.
I didn't know we would be posting this, I would have done a better job making it work well, I just wanted something usable for when we presented it.... Schools still use java because it demonstrates OOP well (something that we needed to do to demonstrate we know what we 'learned' this year, thus is why I used it for the ghost super class with inheritance for example; And this is just an opinion, there are probably other reasons for using java + the AP exam is java). There are obviously other places we can put methods but we can't mess anything up before Monday as we need to present one more time, just be careful.
[Launch4j](http://launch4j.sourceforge.net/), maybe?
I was running a separate thread in hopes to make it more like pacman- ghosts actually move faster but cannot turn as fast in the original version of pacman. I was going to do this by having the ghosts update in one thread and pacman in another, updating the ghosts more frequently. Originally, I was going to do what you said- manage the positions of the sprites with variables in each class. I was stressed and under time-pressure and did some quick coding to try to get it done on time. 
Actually, that is the one I'm using, not JSmooth. I've updated my original post. Both wrap the .jar file and provide support to download Java, if I understand correctly.
The same way you do normally java -cp classpathA:classPathB. So all you need to do is change the command line. Processbuilder does not have any special API for that
Not sure how many people here will have used the library - I haven't, but I have touched LWJGL . It looks like you're using an API that runs on-top, so it's possible it's a bug in libGDX. http://lwjgl.org/forum/index.php?topic=4494.0 suggests that it's because there's a missing / mis-placed `GL15.glBindBuffer` call before vertex pointers are created. Given that you've only provided higher level code, libGDX is probably doing something wrong.
Read other people's code; try to figure out what it's doing, and more importantly, *why*? Get a GitHub account. Start hacking at other people's code. Start writing a simple tool to automate some boring task. Write a tool to check your Reddit karma. Solve programming puzzles. Read more code! Write more code! Read about good OOP practices. Learn about design patterns. Find a friend to collaborate with. Then read and write some more code! It's easy to get lost and discouraged, especially at first, but stick with it! tl;dr: practice, young grasshopper. Edit: you may have better luck at /r/learnjava
Necessity is the mother of invention. So come up with a project that you're actually interested in using. Even if its something silly. E.g. Get a raspberry Pi and write some java that will wake you up with a bell or favorite song, plus the weather forecast and details on traffic in you area. Perhaps if the traffic is bad it'll wake you up earlier. Little projects line these are nice and modular, and you can get something working, then add bits and learn throughout the whole process.
I've never had to do this from command line so I'm not really familiar with the commands and their parameters. How would I write classpathA? Is it the path to the jar or the class name within the jar? Can you direct me to the place you're getting this info (so I just go there instead of asking more annoying questions)? I've tried looking but obviously not hard enough...
Consider running JVisualVM to profile your application (it comes with the JDK). There really shouldn't be any issue drawing a single square with any of those methods. Maybe post your source code?
http://stackoverflow.com/questions/219585/setting-multiple-jars-in-java-classpath. This might help
You know the collision between Pacman and the ghost is almost non-existent right? It took at least 12 tries to die lol.
Please don't test for negatives, just reverse the two functions. And openClose is an awful name. It tells me nothing about what the function does.
Just a side note, but /r/javahelp is more active.
* His "question" relies upon you knowing what "sequencer" and "movement" objects are and what they are supposed to do. * Only the method bodies are formatted - because they were indented in the first place. Overall: no effort was put into the post.
&gt; I wish I had been able to program as well as you when I was in high school. Seriously. It makes me feel bad about myself. :(
Here are some demo's : https://www.dropbox.com/s/9qce5g266qx8vmm/HighRes32BitTest.jar https://dl.dropboxusercontent.com/u/105859676/Game2D.jar https://dl.dropboxusercontent.com/u/105859676/LibGDX%20demo.jar The first 2 are native Java libraries , the last one is the LibGDX demo. And this ( https://dl.dropboxusercontent.com/u/105859676/XJE.rar ) is my source code on "Game2D.jar". All I'm looking for is a good game-loop which will enable me to make a simple 2D top-down game. (Realm of The Mad god - style , Boxhead ). I could do it in C++ , but I really want to target java :)
I would make [this](https://code.google.com/p/pacman-final-project-java/source/browse/trunk/Pacman_Final/src/pacman_final/Direction.java) class an Enum instead of just a couple of `final static int`s
Some things from a quick glance. Direction.java: * Why is this not an enum? Ghost.java: * Why does `Ghost` extend `Sprite`? A `Ghost` isn't a `Sprite`, it has a sprite. Inheritance should be used to describe an is-a relationship rather than a has-a relationship. * Why is update() using a huge if-elseif-elseif-else block rather than a switch? And why is the Ghost behaviour logic in GUIPanel.java?! Clearly it belongs in a separate class - a `Ghost` has a behaviour. This is a prime candidate for use of the strategy pattern.
After very qucik review. * Naming convetions - don't name your variables with one character unless it is an index iteration over an array. * Split long methods into smaller ones - name of the method is self documenting and code is easy to read * Dont be afraid to delete old code. If you want to get back to old code use SVN not commenting/uncommenting * you have javadoc on getters/setters but not on method which does the actual work. * Use logger not sysout * Dont catch "pokemon exception": catch(Exception e) - catch specific exceptions. * method Pacman#update is full of duplicated code and you can use switch insted of big if/else * Stick to the Single responsibility principle and split your application to the layers (gui, business, ...) 
Just more and more "niche" features becoming for-pay only...
Please search the subreddit, you're not the first one to ask this question. Also have a look around at /r/javahelp 
Did you even read the linked text? TZ updates will still be available - through the regular updates.
And companies that previously relied on the free feature of updating old versions of Java now have to pay for that support. It's a niche thing to do - to continue to support EOL'd versions of Java internally - and it's a feature that used to be free, but now isn't. 
&gt; It's a niche thing to do - to continue to support EOL'd versions of Java internally - and it's a feature that used to be free, but now isn't. You've said it yourself: Java 6 is EOL'd, so complaining about it is pretty moot. And Java 7 is two years old already. So expecting continued support for obsolete software is by no means "a feature". Look, I'm no fan of Oracle, and I have 1.6 installations in production, too. But I don't get all the fuzz (in the [other thread](http://www.reddit.com/r/java/comments/1fx9gk/oracle_discontinues_free_java_time_zone_updates/), too) about Oracle shutting down support for 1.6 - it's not like the EOL date was introduced overnight.
&gt; it's a feature that used to be free The "feature" of paying to continue to support EOL'd versions of Java is not new. Sun was already selling it for Java 5 (there have been many security releases for paying customers since the last public release was made available), Oracle has continued (and expanded) that trend. In that respect, the availability of TZ updates for discontinued versions of Java was a hole, maybe a nice thing to have, but it is understandable that Oracle is plugging it and becoming a bit more clear about what is free and what isn't.
This is one of the things that is actually quite interesting - if they wish to continue this sort of trend, they need to keep developing Java. It's nice for them to have a proper incentive to try and keep major updates on time, in my opinion.
I second this. I'd even go as far as saying if you are using a large scale, high traffic web app, it's probably working on a Java backend - Java generally offers the right balance of performance vs ease of development. That said, you could easily argue it's not a particularly "cool" language, because it is rather verbose, and I'd agree with you :P
What about using .bat files for starting? You can pass cmd-line args for memory right?
Sure, but now you're distributing a zip that the user has to unzip and then figure out. You are also now responsible for maintaining shell scripts for multiple platforms. I've done that too (JMeter for Apache, used to be the maintainer for it), and it's more of a pain than you might think.
I don't know how official this response is, but it seems bullshit, honestly. He's implying the problem is due to people sticking to Java 6, while it's exactly the same with Java 7, and he's suggesting to wait for Java updates whereas the tzupdater tool existed precisely because timezone changes can occur at any time, and the next Java update might be far away. Overall the problem seems relatively minor since most people caring about dates will use a third party library like jodatime (which includes its own tz data), but don't pretend it doesn't exist.
http://informagen.com/JarBundler/ - mac http://winrun4j.sourceforge.net/ - windows .sh script - linux Other option - build your own launcher with native code and JNI. compile from linux for 3 platforms (win,lin,mac) with gcc cross compilers. JNI spec: http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/jniTOC.html 
Firstly, /r/javahelp is a better home for this than /r/java. Secondly, revise your pseudocode - what you've posted gives all multiples of three under three hundred. Thirdly, check out [the modulus symbol](http://stackoverflow.com/questions/90238/whats-the-syntax-for-mod-in-java), as it's what I'd use if I had to solve this type of problem.
When you said you were drawing a single square, I assumed you meant a single call to g.drawRect(). You're drawing a lot of images (looks like it could be up to 1200?). When drawing images with Java Graphics you have to make sure the image is in the correct format for the OS you're on, otherwise it has to convert it every time you call drawImage. The way to do this is to get a compatible BufferedImage from GraphicsConfiguration. If you're looking to draw a lot of images like that and you're looking to have good performance I would definitely recommend you use OpenGL, since Java Graphics can be annoying to get everything to be properly accelerated. If you load your textures into VRAM with OpenGL and just draw textured squares you should have no performance issues.
This should be in /r/MathHelp. You're just calculating the sum of an arithmetic series. This is a good example of why you shouldn't rush in and write code until you've thought through your problem properly.
If your company hasn't used it, Google Web Toolkit (GWT) is extremely interesting technology. With GWT, Java code can be compiled into Javascript; and allows the building of client-side code within Java. It's very powerful, and allows the building of highly functional UI's.
You can be an ass if you like, but I'm serious. You don't think it affects Java's reputation to be bundled by default with some POS malware toolbar? Developers know to uncheck that damned box, and it still bites us on occasion. But clients? How many of them get caught off guard by it and end up with something they never wanted? It's a cheep trick, and one that Oracle can afford to drop if they are serious about keeping Java around for a while.
Launch4J is amazing. We tried Excelsior Jet (it claims to convert everything to platform native binaries) but unfortunately it wasn't as fast performance wise as using an up to date JVM. There was also a lot of strange Java2D quirks that didn't exist in our other builds.
&gt; convert everything to platform native binaries It's obviously lying :-) Actually, it's that the header of zip/jar files is at the end, but the header of {just about anything else, including jpegs and .exes} is at the start. So you can catenate a zip file on the end of a .exe and it'll behave as both, depending on how you try to open it. It's worth noting that I always just distribute .jar files that people can double click on. I don't get why that isn't adequate, honestly.
'[The Cherno](http://www.youtube.com/user/TheChernoProject/videos)' on YouTube has a [Java Game Programming series](http://www.youtube.com/playlist?list=ELshNxV9QFUOo) for exactly your style of game. The following episodes of the season playlist are missed, #22, #64, #65, #71, #72, #73. So, they will need to be found on his channel. If your interested on how a game can turn out from following his tutorials, the current state of my game is [here](http://199.91.152.151/z7d4q9m6giug/eq4j8u99vbsw7is/Noltris.jar).
Honestly, find a problem you want to solve and attempt to solve it. Get stuck, ask for help on specific things. In the end, specific tools and resources don't really matter. Just ask questions.
Definitely agree. Learning how to make something like games or applets is a lot more fun as when you're making your own game or applet and learning along the way. When you're stuck (and you will be) just ask question...until you get stuck again haha. Here's a [Jave Game Development Video Tutorial Series](http://thenewboston.org/list.php?cat=30) with 36 videos. Watch those and you'll be off to a great start. 
This looks so fun!
Codeacademy does not have Java exercises. It has JavaScript, but that is a very different thing to Java.
I have seen all his episodes, very nice guy , teaches us some good things (Notch uses the same way of rendering / coding in minicraft). Yet when I use his code, I still get some lagging / tearing every once a while. Tested on WIN 8 JDK 1.7u23 (i7 920 6GB DDR3 , Dual 4890) MAC OS X ML on MacbookPro Retina (did not perform at all, due to Apple's JVM) WIN 7 jre 1.7 (Q9300, 4GB DDR2 , 9600GT) Profiled with Jvisualvm. Guessing the java 2D api just isn't 'powerful' enough. 
If you're looking for an optimal solution, sure. In reality it's not likely anyone at the level of "perform a loop this many times and do some basic arithmetic" is being tested on their math skills, and the question's more checking their grasp of the language fundamentals.
I see "gratis" a couple of times. Is Oracle trying to tell me something?
I guess people just love their native exe's and .apps, even though it is mostly an illusion. The other problem is that the general public doesn't know you can double click a jar. Actually I just double clicked a jar on my system and got the "What application would you like to use to open this file?" dialog. I guess I never set it up to work this way. Also, how would you define your memory allocation with just a jar? I always thought you couldn't set your heap memory with just a jar. I always needed a batch file for the arguments (on a PC). For some reason on a Mac running OS 10.7 the jar alone works fine but anything before that I had to use a Jar bundler to set my memory requirement or my game would just crash. 
One picture panel, and two buttons for next and previous. Use ImageIO.read() to create an array of BufferedImages. Override the default paintComponent() method of the JPanel class: first call super.paintComponent(), and then g.drawImage(x,y,image,null). Tie an action listener to both buttons: they should increment/decrement the current picture array index, and then update the picture panel. 
Here are a few hints to get you on your way. * You'll need a [JFrame](http://docs.oracle.com/javase/tutorial/uiswing/components/frame.html) * Inside that JFrame you'll need a [JPanel](http://www.leepoint.net/notes-java/GUI-lowlevel/graphics/40drawingpanel/30drawingpanel.html) (JFrame &amp; JPanel example) * In the paint Component of that JPanel you'll display an image (Preferably a [Buffered Image](http://stackoverflow.com/questions/10391778/create-a-bufferedimage-from-file-and-make-it-type-int-argb) for manipulation purposes like Scaling, rotation &amp; translation). 
https://vaadin.com/home is also cool.
Thank you all. I finnaly choose [Gradle](http://www.gradle.org/). However i bookmarked some of your tips and will take a look at them. Spring Data Rest and OptaPlanner seems very interesting.
Thanks for the tips. This is what I did last night now to get the images from the file Im storing the in and display them. https://gist.github.com/anonymous/5751634
Okmkz is correct. While applying his suggestions keep in mind that you are also there to network and locate people who are mentors. As a guideline, expect at least two years of writing 20-30 hours a week before you will begin to feel confident in applying your trade. Another 3-4 years you'll likely go through a similar feeling when you realize once again that you know so little relative to what you begin getting your hands into. Seek out mentor-ship and participate in every project you can. You'll leave many of them, and many people will leave you hanging as well. Be patient with them.
I totally agree with okmkz and you, there is nothing to argue about. ( I suggested something along those lines [here on reddit](http://www.reddit.com/r/javahelp/comments/1fsreq/learning_java_in_a_deployed_environment/caeuzch) But I think it's also quite important to strengthen in what you already know and solving coding katas can be a good way to do it. It's really good to fill a couple of minutes and hack away. On top of that, the link I posted introduces the poster to github and thus another discipline needed (Versioncontrol).
Did you download from http://www.oracle.com/technetwork/java/javase/downloads/index.html ? Also check if there is anything in the registry as suggested at [stackoverflow](http://stackoverflow.com/questions/1339910/how-can-i-detect-the-installed-sun-oracle-jre-on-windows) Edit: It might be more of a chrome/windows issue, so you might want to post another question to a subreddit specific t o that
I replaced a caching component that used memcached with MapDB - performance was not really an issue - and somehow I found the memcached client library I used a tiny bit unintuitive (https://code.google.com/p/spymemcached/) - whereas MapDB is quite simple conceptually and practically. The cache hold various file metadata for potentially large files, that is expensive to compute.
I just tried each of your game demos and I don't get any tearing, but the fps is significantly lower than what I get when I run my game created by The Cherno's tutorials. I'm curious what fps you get when you run my game. If you haven't downloaded it, the link is in my first comment.
Since reading about how the Varnish cache works (uses O/S paging), i always read about caching libraries with suspicion. A classical cache, when physical memory is restricted, actually work against the O/S paging, and actually slows the whole thing down. In principle you only need memory-only caching, and the O/S will page out unused memory by itself. The cache only needs to be clever enough to organize data properly. I wonder if Varnish uses some O/S API to manage the cache, and if there is a Java cache that was built on the same premises that Varnish was built on, namely cooperation with O/S paging? So far, i've been using HashMap-s, but i can simply switch to any implementation that stores objects with integer keys.
I'd recommend Maven over Gradle. It has stricter rules, and a cleaner separation of build-flow vs. build plugins. And you're almost assured of being able to jump in on a project in a standard layout as opposed to the more scripting language based systems.
Do what is what is more readable. Such a change doesn't make an appreciable difference. Instantiating a new String object does have overhead, but only 1 instantiate isn't going to do anything.
I'm getting about 2700 fps when I'm running your game, good job! Looks cool :D I redesigned my code, used some 'tricks' that Notch uses, and Getting about 2145 fps with 20 entities but every once a while a little stutter due to ... don't know my pc being busy ? :p . Thanks for the help anyways and keep up the good work!
Regarding white space, you may consider it a matter of opinion, but as a matter of correctness putting relevance into invisible characters is extremely poor UX. It's nice to have reference nodes standardized. Typically this is denoted by id, which in XML you can annotate any tag with if you don't want it an element on it's own, in json it would just be an element. The drawback being that you are implementing the processing yourself.
I'd do Calendar.YEAR.toString() Instead of ""+Calendar.YEAR Regarding optimisation, ignore it and focus on readability. Your changes may make little difference or even make it worse.
How does it compare to something like EHCache?
The compiler (especially a JIT) should be able to easily optimize this sort of thing. Just do whatever is the easiest to read.
http://mvnrepository.com/artifact/org.mapdb/mapdb/0.9.1 pulling it down now to try it out - looking forward to it.
watching it now, it's interesting thanks
so, my use case is this - I'd like to persist objects to the file system for later use after the jvm which created and persists the object goes away. Is this an ideal use case for MapDB? is it simple just creating a non-temp system file and generating a DB out of it?
I meant to reply to Okmkz directly, sorry! =] I also think that Loomax's suggestion of coding katas is an excellent suggestion.
Both syntaxes are valid and equivalent. Check the JLS: I'm on my phone and can't conveniently look up the chapter and verses. 
Abstract method's provide you the ability to work with the base class object definition, but allow extending classes to control what actually happens. I'll provide the classical example: Assume you have a class named Animal which has an abstract method named speak(). public class Animal { abstract void speak(); } Then you have multiple animals that all do different things when they speak. For example the cow could look like this: public class Cow extends Animal { void speak() { System.out.println("Moo"); } } Also assume that we have a Chicken, a Dog, and a Cat. You can create these objects and reference them as Animal objects instead of Cow, Chicken, Dog, and Cat objects like this: // This array list holds any type of animal ArrayList&lt;Animal&gt; animals = new ArrayList&lt;Animal&gt;(); animals.add( new Cow() ); animals.add( new Chicken() ); animals.add( new Dog() ); animals.add( new Cat() ); for( Animal animal : animals) { animal.speak(); } Using this code you can have one loop which causes 4 different animals to speak(). While referring to each of the extended class objects as their parent class, you lose access to methods which exist only in the child class. For example if Cow was defined as: public class Cow extends Animal { void speak() { System.out.println("Moo"); } void eatGrass() { System.out.println("Eating grass"); } } Then you would lose the ability to call eatGrass() until you cast the object back into a Cow. Animal animal = new Cow(); animal.speak(); // Can't do this: animal.eatGrass(); Cow c = (Cow) animal; c.speak(); // Can do it now that we've cast it back into a Cow reference c.eatGrass(); 
They both work, this is similar to to the way you can do: public static void main(String[] args) and public static void main(String args[])
In a multi-threaded environment, keep in mind that the value returned may change in between calls (which may be exactly right) whereas a local variable will remain the same unless you change it.
You missed the big point of an abstract class: default implementations of an algorithm.
It could make the difference between being right and being wrong. Don't assume a single threaded environment. The value of a function call can change between calls, where a local variable may not. If your code is assuming the value will be consistent, then the best way is to simply cache the result of the first call and reuse it. Even in the above example without other threads, if you use method calls instead of a local variable, you could trivially mock a unit test to have correct but misleading output by changing the year between the first two calls. e.g. This year is 2013 Last year was 2013 Next year is 2015
He's not asking about abstract classes, he's asking about abstract methods.
Perhaps you mis-read his question.
Which... provides the default implementation of an algorithm and leaves the specifics to a method you define. &gt; If a class includes abstract methods, the class itself must be declared abstract, as in: [here](http://docs.oracle.com/javase/tutorial/java/IandI/abstract.html) 
No, because &gt; If a class includes abstract methods, the class itself must be declared abstract, as in: [here](http://docs.oracle.com/javase/tutorial/java/IandI/abstract.html) You can't have an abstract method without an abstract class (unless you further delegate the abstract method, meaning you can never instantiate an object of that class without providing an implementation). Hence, an abstract class is there to provide you the default algorithm and leave the specific details to your subclass for implementation.
Yes, the class provides the algorithm, the abstract method provides the details. The implementation of said abstract method clarifies the details in to a specific object type. However, the algorithm of the abstract class still applies to all sub-classes. An abstract method cannot exist outside an abstract class, hence your example would be better suited as an interface as it provides no algorithm or common details for any child classes. It merely specifies a contract.
I understand that, but his question is about abstract methods specifically. It is possible to define abstract classes with only abstract methods making your point valid but irrelevant to the question he asked.
http://www.reddit.com/r/java/comments/1g3buw/what_is_the_point_of_abstract_methods/caget43
Thanks man! I knew what abstracts did and how they can be helpful, I just wasn't sure why there was a point in putting it in the superclass if you just have to rewrite the code in all of the subclasses. TIL: Abstract methods in the superclass make sure that developers don't forget to code an important method in the subclasses.
You go inherit OP (why do you assume male) code where everything is an abstract class because they want to define a contract... and I'll happily live in a world where I explain why you want to use an abstract class (which provides you the ability to use abstract methods) and have interfaces for contracts and abstract classes to cover the algorithm with abstract methods to cover the details.
This is an entry level question presented by a self-identifying self-starter. Use some context and present what he is capable of consuming at the moment. He'll get to the differences between abstract classes and interfaces soon, it's the next logical step.
Because it's legal syntax, see the [documentation](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html) ^(a 2s Google search "java array syntax)
Also check out Install4j if you're looking for an installer package. Besides handling installation logic (written in Java) it also creates executable wrappers. http://www.ej-technologies.com/products/install4j/overview.html
I've changed my opinion on this. I find it's easier to get a breakpoint in the right place when you store more things in local variables.
[DRY](http://en.wikipedia.org/wiki/Don't_repeat_yourself) Once database.getPerson("fred").getName() or person = database.getPerson("barney") // i prefer this way, ymmv person.getName() Twice person = database.getPerson("wilma") person.getName() person.getTitle()
As others have said, it works because the spec says that it should. However, does anyone know why the first syntax is even in the language? Is it for historical reasons, or is there actually a good use for it?
I've got to throw some kudos towards [SmartGWT](http://www.smartclient.com/product/smartgwt.jsp) too. 
It's a nice persistent hash table library. I used it to store URL &lt;-&gt; id mapping. 
As other's said, both are valid. The second one is the preferred way because you immediately see that it's an array of int. In the first version you only realize that after the name.
Here are some differences between the two languages: * Java is a statically typed language; JavaScript is dynamic. * Java is class-based; JavaScript is prototype-based. * Java constructors are special functions that can only be called at object creation; JavaScript "constructors" are just standard functions. * Java requires all non-block statements to end with a semicolon; JavaScript inserts semicolons at the ends of certain lines. *Java uses block-based scoping; JavaScript uses function-based scoping. *Java has an implicit this scope for non-static methods, and implicit class scope; JavaScript has implicit global scope. JavaScript is to Java, as carpet is to car. They only have a similar name as Netscape wanted to piggyback of the popularity of the (then new) Java language. If you have a quick browse for some beginner Java tutorials you will see how different they are to implement. But its all good coding practice and experience 
You and I disagree on how to teach such material.
Whatever your options is, you can find everything here for free: http://www.tutorialspoint.com/index.htm. I'd recommend Hibernate &amp; JPA ... once you know one it will be easy to learn the other .. Enjoy !
If you are learning JPA 2.0, it shouldn't matter which implementation you use. Be very careful about extra features of an implementation. If you learn hibernate, you need to be careful that you know what features are JPA standard and what features are hibernate. Same with any other implementation. Once you depend on extra features, you are no longer really using JPA anymore. 
I believe EclipseLink is the implementation standard for JPA 2.0. So if you know that one, all the others probably are based off of it or should be similar enough. All I know is that writing all these classes by hand sucks balls. I believe Spring Data JPA is just based off customizations made to Hibernate to work more closely with the rest of Spring.
You can even use something as ugly as the declaration of getValues here import java.util.Arrays; public class Ugly { public static void main(String[] args) { int[] values = getValues(); System.out.println(Arrays.toString(values)); } private static int getValues()[] { return new int[] {1,3,5}; } } 
Double buffering will resolve this issue. 
I love Eclipse release week. It's the one week a year I don't achieve anything and spend the entire week dicking around with my system... and so is basically everyone else at the office.
That is not the main reason, though. Abstract methods aren't just a 'reminder'. They're an aid to polymorphism. Imagine an abstract 'Animal' class. Let's say this class has a 'makeAnimalNoise()' method that is abstract. This means that anyone who has an Animal object can call animal.makeAnimalNoise() without knowing exactly what the animal actually is. .. Deep down, the animal might be a Dog, and therefore makeAnimalNoise() in Dog will make a WOOF! sound. Or it could be a Pig, in which case makeAnimalNoise() would make an OINK! noise. The point is though, that I can just have an Animal object and still make it make a noise, even though I don't know if I'm using a Dog object, or a Pig object, or Snake, Owl, etc. etc. .. Edit: I managed to copy almost word-for-word the example given by Muz0169 below, oops. :) Should've read below first.
Yes, and there wasn't anything in the registry until I installed.
Moving a simple square around the canvas isn't memory intensive enough to produce the symptoms you've listed. You must be repainting more than just the objects in motion. Let me check out the source. 
Why is it necessary to render.clear() before calling level.render(render)? It seems to me that clearing the board by setting all tiles to a certain color is a waste seeing as though one line later they will all be re-colored *again.* Edit: I'm not saying this is the cause of your problems. I'm just pointing this out for you to consider. 
Way to be completely and utterly obtuse.
OP's narrow question implies a misunderstanding about the purpose of abstract classes, and your answer only encourages the misunderstanding to continue.
This is an operating system level functionality. You need to plug into this OS feature through JNA or JNI or system tools. How and if this is possible is entirely dependent on your OS.
These two conversations were going on in parallel. I redirected this one to consolidate. Your comment is more obtuse than functional, however.
I'm sorry you feel that way, as IAmSocketMan pointed out, we disagree on how to teach such material.
That's what I thought. Thank you for your input!
You also might be able to use Runtime.exec to invoke a command line utility that performs the action you need.
For macs you should be using the App store. See the end of http://docs.oracle.com/javase/7/docs/technotes/guides/jweb/packagingAppsForMac.html
| The company also will continue to make TZUpdater available for the most recent JDK version. Note: you must have the most recent JDK version. Not that I feel that's a bad thing, but wouldn't it be frustrating to be 1 rev behind and your tzupdater doesn't work? It probably won't work that way, but the wording of that article is a little ambiguous.
What's new for us general java devs?
We use maven as a standard on all our projects. Maybe gradle offer same advanteages, which we could use.
Build something using Hibernate JPA 2.0 then swap it for OpenJPA or EclipseLink. This will help prove you've used core JPA.
No separate download of JSF 2.2 (Mojarra 2.2) either, yet the "final" release is already bundled with GlassFish 4. Guess Oracle needs a few more days to completely orchestrate the release across the board of effected products.
Am I missing something? Should I be actively avoiding importing ArrayList?
It's a really small detail, I just prefer it because I find it enhances code readability. Specifically, in cases where you have things like List&lt;Map&lt;String, Integer&gt;&gt; things = new ArrayList&lt;Map&lt;String, Integer&gt;&gt;(); you can take advantage of type inference using Guava's method. The real advantage (that I originally did not express, apologies) is the overloaded "newArrayList" method: List&lt;String&gt; strings = Lists.newArrayList( "string1", "string2" ); which is a bit more difficult / less readable if you do it manually: List&lt;String&gt; strings = new ArrayList&lt;String&gt;(); strings.add( "string1" ); strings.add( "string2" ); (or some other variation)
Java 7: List&lt;Map&lt;String, Integer&gt;&gt; things = new ArrayList&lt;&gt;(); Arrays utility (albeit not ArrayList): List&lt;String&gt; strings = Arrays.asList( "string1", "string2" ); 
Not saying anything bad about Guava, but for your first example you could just use Java 7's diamond operator: List&lt;Map&lt;String, Integer&gt;&gt; things = new ArrayList&lt;&gt;(); Edit: Someone beat me to it =/
You're right. :) The Guava team [explains their rationale here] (https://code.google.com/p/guava-libraries/wiki/CollectionUtilitiesExplained).
&lt;&gt; is for a simple object series, but if you have nested collections you need that tilde. EDIT: downvoting myself!
What do you mean by simple object series? ArrayList&lt;ArrayList&lt;ArrayList&lt;String&gt;&gt;&gt; nested = new ArrayList&lt;&gt;(); works afaik. And I'm not sure what you mean by tilde? Again, afaik, the tilde in Java is only used for bitwise not. Edit: I see what you mean now, and &lt;~&gt; isn't part of the Java spec. From what I can tell from google its a pre-Java 7 IntelliJ shortcut.
``&lt;&gt;``, not ``&lt;~&gt;``, which is an IDEA affectation.
This is so much better: https://code.google.com/p/guava-libraries/wiki/GuavaExplained
If it's meant to run in a desktop environment, you could try accessing [network manager](http://projects.gnome.org/NetworkManager/developers/api/09/spec.html#org.freedesktop.NetworkManager) over [dbus](http://www.freedesktop.org/wiki/Software/DBusBindings/). (So you don't get 2 processes trying to configure the same device.)
I think this year alone I have seen three or four "ultra fast reliable messaging systems" for Java. I guess if I ever have the need for something like this I might appreciate the plethora of options, because chances are that there's one that does exactly what I need.
**YES** Any Java programmer should be aware of the wonderful features of Guava. MultiMaps and BiMaps have really helped me write better code.
No, doing it the old fashioned way is just fine. Guava just reduces the amount of bullshit you have to type out (as seen above) especially when you have complicated or long specifications in the generics. But what you say there isn't even the most powerful part. My favorite Guava feature is the multimap. So instead of Map&lt;T, List&lt;U&gt;&gt; you have MultiMap&lt;T, U&gt;. It MUCH easier to work with.
Weird, I thought I saw this in Netbeans when I couldn't get the diamond operator to work. Hmm, I knew IDEA did this across the board. Ohh well, I stand corrected.
Yea, I was wrong. I recently switched from Netbeans to IntelliJ and I often swap between Java6 and 7 machines/projects. I, for some reason, got that into my head. Thanks IDEA.
I had never used the EventBus before, not sure why I overlooked it! Great utility. I've grown quite fond of Optional.
An array of objects is just like a normal array, but instead of holding ints or doubles or the like, it holds Objects such as Strings.
m2e has come a long way. While the rest of our team still uses 'mvn eclipse:eclipse', I'm using m2e (on latest 3.x eclipse, not 4.x) successfully on a 400+ module project. I have to import only 30 or so modules at a time to avoid heap issues, but after that it's pretty smooth.
The difference with Chronicle is that it's written by someone in extremely high frequency automated trading. If you have any doubt check out his excellent blog http://vanillajava.blogspot.co.uk/ which is streets ahead of any other java blog in terms of low level understanding.
Sounds like you have design issues if you have a 400+ module project. :o
throw new RegistrationFormTooLongException()
Just in case you didn't know, it is a free subscription.
I like Winrun4j best: easy configuration in an ini-file, can be installed as a service and much more
Why they want registration if it is free? I suspect something ugly is behind their decision to require subscription. Perhaps they want to send spam and earn some money? 
Or IntelliJ IDEA, which automatically configures a native IDEA project from the POM. It's not as smooth at how NetBeans does it, but it works.
I registered more than one year ago. No spam. 
SpringSource STS release of eclipse comes with m2e installed: http://www.springsource.org/downloads/sts-ggts 
public static final String *..........* public class ......... import org.apache.commons........... *right-click*-&gt;*Team*-&gt;*Synchronize With Repository*
Me too, never had spam. The need to register for free things is curious, but at least a year back it was quick and a small form.
For something small and simple I just use the free tier of Redhat OpenShift to host my own java server. Read it here: http://dmly.github.io/blog/2013/05/01/diy-java-app-server-on-openshift-so-far-so-good/
You should really leverage the templates feature, and assign hotkeys...
Its available from the Eclipse market. Very easy install.
For the import, CTRL+SHIFT+O
Gradle is worth reviewing if you've used Maven. Larger projects can become verbose in Maven. Gradle may also introduce your team to utilizing Groovy where it makes sense as well.
Some of us use groovy for unit testing so if groovy is a thing in gradle it is great, because i like groovy a lot.
 for (i=0 ; i &lt; 10 ; i++); printf("Good morning\m"); That's why you need significant whitespace - so that the indentation doesn't lie to you. 
Yeah, also who needs c++11? You can just do all that with make
For me, it is "make clean test". 
No offense, but I don't read Polish and I don't think most people here do.
In linux/mac: echo "alias mee="mvn eclipse:eclipse"' &gt; ~/.bashrc source ~/.bashrc Now instead of typing `mvn eclipse:eclipse` you just have to type `mee.`
mvn eclipse:eclipse is the command to convert Maven's version of configuration and dependencies into Eclipse's version. Hint: alias ecee='mvn eclipse:clean eclipse:eclipse'
Well, I used Jelastic for a while, but to host 2 WARs + 2 MySQL dbs ended up costing me $100 month. CloudBees apparently lets you host simple web apps + a database for free, but I haven't done much with it so I can't give good feedback on how well it works yet. 
ramnode or a2hosting
I use m2e when I can, too. But I still need to mvn eclipse:eclipse for some projects. I'll usually use a -DdownloadSources=true -DdownloadJavadocs=true with it so that everything is pulled down and available in eclipse. (Though, I suppose those two options can be made defaults in maven settings.xml)
One way to solve the first problem is to round the number to a whole number (or floor or ceiling) then use a for loop with a%b to find the remainder after dividing by factors of 10, 100 and 1000. That should get you the suffix. 
The first question is basically asking you to write a method. The header of the method is given: public static int getSuffix(int value, int numberOfDigits) this method header shows us that the method will return an int (the int after static is the return) and that it requires two "int"s to be sent to it (these are the parameters in the parenthesis) so now we now what we are taking as parameters we can look at the method calls they give us in the question which are getSuffix(12345,2) returns 45 and getSuffix(1234567,3) returns 567. getSuffix will be a method that will take the first number and return the last x(second param) digits of that number. Hope that is a place to start without giving too much away. edit: if the question you're having is returning values [this may help you understand.](http://docs.oracle.com/javase/tutorial/java/javaOO/returnvalue.html) 
Yea this a good start. thx
For the second one you can probably just try writing the code yourself, but I can tell you that Java only automatically casts numeric values if it 'widens' the value, where the 'width' of the value is double &gt; float &gt; long &gt; int This might make it more clear: int i = 1; double d = 1; long l = 1; float f = 1; i = d; // Error i = f; // Error i = l; // Error l = i; // No Error l = d; // Error l = f; // Error f = i; // No Error f = l; // No Error f = d; // Error d = i; // No Error d = f; // No Error d = l; // No Error
I tired typing the code, it gave me an error with (xMethod((double)5)); I'm gonna guess that xMethod can't return the int or long because their data types are smaller than double
I know it says to use a for loop (which you should), but the whole getSuffix method can be simplified to: public static int getSuffix(int value, int numberOfDigits) { return (int) (value % Math.pow(10, numberOfDigits)); } So, you can use that to check the results of your implementation.
hmm *cautious clapping*
Aside from the fact that you gravedug this (I assume? is this sub *that* dead?). My issue with SW is that there is more potential for error (by programmer or editor) if there is no explicit start or end of a code \`block'. Whilst the indentation bit is nice, there are potential problems. Conversely, the issue of "lack of indentation" is addressed in many languages with explicit block start and end tokens (C-Fam., etc...) by requiring descriptive indentation and other such formatting rules in their conventions. I like ruby's approach (no offense) of using the otherwise amazing syntax of pythong, but making it incredibly human and machine-readable by adding keyword aliases and explicit \`start' and \`end' statements. Python, Ruby, and Java all have vary different use cases, and they excel in those cases.
Yeah, I speak and read Polish but I don't think it's a good place for this article.
If he still wants to use a for loop, he can just use it to multiply the number 10 for the amount of digits he needs.
Cheap servers can be found on [Low End Box](http://www.lowendbox.com).
Not exactly. It is not that xMethod can't return, it is that you can't call it with a double. In java, an important notion is "type promotion". You can promote an int to a long or a double, a long to a double, but not a double to a long or an int (as you'll lose some infos). This is basically another way to express what /u/most22 explained. So you can call a SomeType aMethod(double arg) with an int or a long, but you can't call SomeType aMethod2(int arg) with a long or a double, because java will first attempt to "promote" (not promotion in this case) the double, which won't work here. Look again at the code of /u/most22. This code is exactly what java will do before trying to call xMethod. The relevant lines in your case are line 11 and line 6 (in this order). 
What exactly do you want to do with it? If it's simple and lightweight enough, I'd recommend Elastic Beanstalk on Amazon AWS. Basically you give it a WAR file and it runs it up for you automatically, and I think their Free Tier gives you zero cost hosting for the first year - as long as you only use the Micro instances. If you want anything more complicated than just running a WAR file in a container then you might need to do the work yourself, but that seems unlikely to me...
It's [Multimap](http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Multimap.html) actulally (no capital "m" in the middle).
Beware of overuse of functional stuff: &gt; Excessive use of Guava's functional programming idioms can lead to verbose, confusing, unreadable, and inefficient code. These are by far the most easily (and most commonly) abused parts of Guava, and when you go to preposterous lengths to make your code "a one-liner," the Guava team weeps. // [source](https://code.google.com/p/guava-libraries/wiki/FunctionalExplained)
Ahh, nice. I was thinking of converting to a string and iterating through each digit to get the last few, but this is probably a much better way to do it. 
blog spam
It depends on what you're trying to do. If you're learning Java, it is better to use Notepad++ or other text editors you like, and compile your source codes with command line tools like *javac*. IDEs offer many functions that are useful for development, but those functions may also confuse you or "helping" you too much from learning the basics. 
Can I get an ELI5 on what Docker is, and what problem it solves?
Jelastic is not that expensive! Tomcat + MySQL should generally use something like 6 or 7 cloudlets. I have 4 reserved cloudlets on my Tomcat instance + 3 reserved cloudlets on my MySQL db. Costs me about ¬£40/month ($60) at Layershift.
So you hosted 2 sites on 2 separate environments? Yeah, looks like ServInt prices are quite a lot more expensive than Layershift! Did you try MariaDB? I heard it can use more resources with the default configs, but give better performance too. I'm thinking of trying my sites with it - supported by Jelastic and supposed to be drop-in replacement for MySQL
&gt; dotCloud, a PaaS provider, has open sourced Docker, a key component of their platform. Docker is a LinuX Container (LXC) technology augmented with a a high level API providing a lightweight virtualization solution that runs Unix processes in isolation. It provides a way to automate software deployment in a secure and repeatable environment. From http://www.infoq.com/news/2013/03/Docker 
It completely depends on what your load is like - as always, we can't read your mind.
You don't speak to many five year olds do you?
It's something that you'll understand when you grow up. Now run along and play in the living room.
Thank you for explaining what "ELI5" means. I simply thought they wanted a short explanation. Not sure I'm ready to explain VMs to a 5-year old.
The OP didn't know that there was a tool to make this unnecessary.
You can set that in eclipse to happen across your projects in the GUI configuration
If you're learning the language I would recommend a simple syntax highlighting editor and a shell. Since it looks like you're using Windows I would highly recommend installing [cygwin](http://www.cygwin.org). This will give you access to a better shell/scripting environment. Personally I would recommend emacs.
Come on! This is really the type of thing you should investigate and fix yourself, especially if you're using a nightly build!
Java is to JavaScript as dogs are to hotdogs. 
unless you live in china.. :D
* Do you want a desktop app or a web application? * Java is better for web applications rather desktop apps. You can create both with Java, but desktop apps are harder to deploy due to the JRE requirement. * Javascript has nothing to do with Java, other than a similar name. Many Javascript developers have never used Java, and vice versa. Webpage design and development is done in other technologies; java is used on the server side. * Desktop apps tend to use Swing, but be aware that Java makes heavy use of Layout Managers for UI design. NetBeans has a good WYSIWYG editor.
Thank for your reply. This is a desktop app i'm making, must in the same style as others i have written for our internal compay use in VB or C++ before. The need for a JRE isnt an issue, and there wasnt any specific reason to use Java this time other than just trying a new technology out. Regardless of which language i use however, this is the first time it will be used by customers, so i've been asked to make it more sleek, so ive used webapp's as an example of the level of 'polish' id like to try and achieve. Java app's do look a little plain, but then again so does any desktop app that just uses standard windows controls such as jButton, and jLabel, etc. I hope is a bit more clear. edit: I should add, this wont be a big deployment. At this time its a front end interface to operate a 1 off machine, and all i need to do is to execute a shell command line to do that. This is just a pretty front end to pick a job from a list, and then parse and execute the shell command.
Yeah in that respect i was maybe a little naive to assume what i could do based on similar names, but then again i was just trying out a new language, and have got the functionality out of the software that i needed. Being asked to make it look less 'boring' was a later request.
I use the external tool runner
The main idea, is that a class is a contract before being a bag of typed data. Good point!
last i looked, the conventional wisdom was that sharing a tomcat instance with other users is more trouble than it's worth. so the easiest/cheapest thing is to go with a low end VPS. i'm using stormvz for $7 per month - so far they've been fine but i'm just doing some testing for now. i found stormvz on [low end box](http://lowendbox.com). my plan is no longer available, but there are offers posted regularly in the $3-7 per month range. once you find a VPS, it's just a linux (ubuntu in my case) box - ssh in, apt-get java et al, copy over your war and start tomcat
This is what I am looking for. Thanks!
They really do keep one upping themselves with these each year, although this is a much more unusual twist!
&gt; sharing a tomcat instance with other users is more trouble than it's worth Agree with this, but easiest is definitely not to run your own VPS (especially not a low end one - can be a performance nightmare!). If you're a developer or in any way hosting for business purposes, you don't really want to have the hassle of running sysadmin on your own server (don't you have enough to do already?).
I can't see a problem. Do you set up a new project every five minutes?
Was using the car trunk to store a pair of shades a reference to Java EE 7?
http://www.eclipse.org/jetty/documentation/current/websocket-intro.html#d0e16970
What's the advantage of Echo3 over GWT or JSF?
i have to do all the admin stuff on my development box anyway so doing the server isn't much additional work - they're both ubuntu boxen with for the most part the same services. i was up and running within an hour of signing up. until i'm successful enough that i need a dedicated box i'm not worried about squeezing every last bit of performance out of the server
try http://4programmers.net/
* "Not working" is not a problem description. Don't make us guess. * This kind of questions belong into /r/javahelp
nobody ever gets on /r/javahelp - so I posted it here. If this post is inconvenient for you, just pass posts like this one up when scrolling next time. Thanks.
This worked! Thank you! You're awesome.
The ending killed me. +1
You never made a call to your constructor. Look at your main method, you'll want to create an instance of JBasketball(). Instead you're just creating a JFrame() and all your code here is unused. 
Thank you so much. I have been staring at this code with other demo codes next to it and never caught this.
"Easily convert If-Else statements to Switch statements"?? Who in the hell has been clamoring for that?!
On line 17 you create a new JCheckBox ARRAY not the actual JCheckBox objects. Just the array that will hold them. 
On line 29, the array has nothing in it. numbers[i] pulls the value that's stored at position i, which at this point is null, and then tries to do null.setText(). It appears you want to set the value i at position i in the numbers array, which would be numbers[i] = i; I would also, instead of doing i &lt;= 30, do i &lt; numbers.length. This allows you to only have to change the array initialization size if you ever decide you want more numbers. I would also, if you are going to reuse this value other places, make a integer that stores it and just reference that integer throughout. This should also fix the error on line 49, which should be due to the class not being instantiated due to having an error thrown in the constructor. Let me know if this works.
I've always enjoyed these java movie mocks - they do such a great job! Older.. but one i still enjoyed: https://www.youtube.com/watch?v=RnqAXuLZlaE
I have extensively worked with both GWT and Echo, and Echo wins hands down for many reasons: - very easy setup (no IDE plugin or other dependencies needed) - *much* more lightwight and swift than GWT (starts in 3 seconds or less as opposed to minutes with GWT (you don't need to compile client side each time) - a major PITA I had with GWT was the serialization of objects send from the server to the client. First off, you have to program a common interface for client and server, and then you have to make sure that all objects (and their dependencies!) you pass to the client are serializable. If not you get strange errors, and you spend hours searching what titbit has not been serializable - very effective client side component development. You need to know Javascript (as opposed to GWT), but this is helpful in any case. In Echo you develop a JS-only component (just hit the reload button of your browser to make changes effective), and when you are finished you just write the missing boiler plate for the server side peer. In GWT you have verly lengthy code-compile-test cycles in comparition - dynamic layout build-up. In GWT you have to know up-front the final layout of your application (it is sent in one big junk to the client). In Echo component are loaded on demand, and can be added whenever you want. For example, in GWT you can't just add an additional tab to a multi-tab panel once the application is running, in order to do so you have to add a cumbersome tab lazy-loader placeholder (or similar), in Echo you just say: tab.add("New tab", new MyPanel()); -and that's it! 
They say choice is a good thing, but arguably there are way too many web frameworks in Java. Echo does goes back a long time. I remember evaluating it alongside of JSF 1.1 in 2005 or so . JSF 1.1 sucked a lot then, but Echo sucked more. Of course that was then, and things at least for JSF have totally changed. I'm surprised to even hear about Echo again. I don't think I even just heard someone mentioning it for the last 8 years, let alone really using it. I think at this point it would be better to just give up on those individual frameworks with so few users and just have 'm join the bigger more established frameworks as an extension.
You'd do better to just contact the more stable adult guilds / clans for expert help.
We are using Echo 3 since years and took several runs to switch over to some "established" frameworks i.e. Vaadin. We failed and always returned to Echo. One important thing to note: Echo 3 has a totally different architecture than Echo 2.x and before. Echo3 is 1MB of JARs, no dependencies. Vaadin for examples features a really vibrant visibility, but turned out to be is slow as hell for even mildly complex applications and imposes Jarmageddons with over 20MB an more (they really ask you to deploy junit.jar for example). I never found any comparable, light-weight yet future-proof framework other than Echo and it's really sad that itdidn't receive the attention it deserves until now. As more and more the move goes toward client-side scripting this might change, because Echo has to offer here a real advantage to its competitors with its 1:1 identical, client side API.
If rest of the "Top Eclipse Kepler Features" happen to be it being quick, reliable, fast to update, getting much better Maven integration, and getting a simple way to push reasonable basic plugin configurations to developers, we can talk. It's as if the people deciding on the features to be worked on hadn't actually used an IDE to work on anything for decades.
Have any ideas of guilds who use the teamspeak API, most I have spoke to just use the permissions system.
Head First Java. Great book. I've been going through this and it's lots of fun and it's very helpful.
Well, no details yet. Just a problem statement and an announcement that it is being worked on. 
Finally, Android will be smooth!
Exactly. Plus, it scares me that someone working at RedHat on a low pause garbage collector for OpenJDK wasn't already aware of what Azul were currently doing with Zing? You'd have thought if they had made any progress on even planning the thing let alone developing it they would have checked out the existing solutions (aka their competition).
If the code is exactly the same, do what is more readable. void foo(Person p) { lookup(p.getContactDetails().getPrimaryPhoneNumber().getAreaCode()); map(p.getContactDetails().getPrimaryPhoneNumber().getAreaCode()); locate(p.getContactDetails().getPrimaryPhoneNumber().getAreaCode()); } ...versus... void foo(Person p) { String areaCode = p .getContactDetails() .getPrimaryPhoneNumber() .getAreaCode(); lookup(areaCode); map(areaCode); locate(areaCode); } On the other hand, if this code is multithreaded and any of those accesses of `p` could have been changed in between calls and you always need the latest one, then you'll want to do the entire call sequence every time. However, even in that case, you can make things a lot more readable: void foo(Person p) { lookup(areaCodeFor(p)); map(areaCodeFor(p)); locate(areaCodeFor(p)); } private static String areaCodeFor(Person p) { return p.getContactDetails().getPrimaryPhoneNumber().getAreaCode(); } If you find that you're writing a lot of these little utility methods across a lot of classes, then it could make sense to refactor them all into a shared utility class full of static methods. It's important to respect a few rules if you use static helper methods like this...make sure that there are no side effects of calling them (in this case, the static utility method should not change anything about `p`).
I think the author addressed that in a comment: &gt;Alex: Shenandoah a user level, software only solution. The first Azul collectors used hardware tag bits. The later collectors used Linux kernel level modifications. Ninja-Edit: Gil Tene's response is pretty great, too: &gt;BTW, to set the record straight: C4 (in the form that has been shipping commercially inside our Zing JVM for a while now) is pure software, and it runs on vanilla, untouched Linux/x86 distros (RHEL 5.x/6.x, CentOS 5.x/6.x, SLES, Ubuntu, ‚Ä¶) and the unmodified kernels that come with them.
Consider the following: public abstract class Shape { private final String description; public Shape(String description) { this.description = description; } public String getDescription() { return description; } @Override public String toString() { return getDescription(); } } public class Circle extends Shape { private final double radius; public Circle(double radius) { super(getClass().getName().toLowerCase()); this.radius = radius; } public double getRadius() { return radius; } @Override public String toString() { return super.toString() + " (r=" + getRadius() + ")"; } } public class Square extends Shape { private final double edgeLength; public Square(double edgeLength) { super(getClass().getName().toLowerCase()); this.edgeLength = edgeLength; } public double getEdgeLength() { return edgeLength; } @Override public String toString() { return super.toString() + " (s=" + getEdgeLength() + ")"; } } Ok, so a `Circle` is a `Shape` and a `Square` is a `Shape`. Now you want to add a method to all shapes that will tell you the area. How do you do it? Well, you can implement the `getArea()` method on the `Shape` class...but what code should go in there? You can't write a single algorithm that will calculate the area for any old shape, you need to know what kind of shape you're dealing with to pick the right formula. Ok, so we don't put there, we put it on the subclasses: // ... Circle ... public double getArea() { return Math.PI * Math.pow(getRadius(), 2); } // ... Square ... public double getArea() { return Math.pow(getEdgeLength(), 2); } Awesome! Now we can get the area of any shape. So now we try: // ... Shape[] shapes = new Shape[] { new Circle(1), new Square(1) }; for (Shape shape : shapes) { System.out.println(shape.toString() + " area: " + shape.getArea()); // ERROR!!! } Doesn't work! Why? Because the API for the `Shape` class doesn't have a method called `getArea()`, so you can't call it on things you're treating as shapes. But we know that all shapes *have* an area, so we should be able to call it, it's just that we can't actually calculate that area in one place. The implementation lives down with the actual shapes, but the ability to *have* an area belongs to all shapes. Thus the abstract method is born. We can simply add the method to the `Shape` class (and then add `@Override` tags to the implementations...don't forget that). // ... Shape ... public abstract double getArea(); Now the above code will compile and we can call this method, and calculation will be deferred to the subclasses. Another tip: now that `Shape` has this method defined, we can use it from within `Shape`! Let's say that we always wanted the area to be output when we call `toString()` on a shape. In that case, we can just change `Shape`'s implementation of `toString()` to call `getArea()` ... even though the implementation doesn't exist, doesn't matter. (This is called the **Template Method** design pattern...check it out.)
Not only that, not all JVMs are alike.
Thank you for the explanation. So how does it compare to JSF, then? Seems to me that Echo is somewhat like JSF, but somehow decided to break MVC design somewhat by having layout held within Java code. 
Is Azul's VM open source? I don't believe it is. So yeah, someone else has an implementation but that doesn't make it useful to Red Hat. And would be surprised if there wasn't *someone* at Red Hat who had more up to date information on Azul's implementation. But, it's fairly common practice (thanks to the patent system) for companies to tell their engineers NOT to look too closely at other implementations. So quit with the FUD. "scares you"? Hyperbole much?
Yes, but I imagine the technology or at least the concepts should carry over.
I believe what grump_purple_midget meant when he says "scares me" is that there may be a bit of naivety on the part of the RedHat folks working on this given that they don't appear to have studied the existing leading GC implementations for the JVM. Certainly, RedHat can't use the implementation and it's quite likely the the Azul algorithms are patented but someone embarking on a low-pause garbage collector should certainly be aware of the current state-of-art one would think. One can't help but think they may be under-estimating the difficulty of what they're trying to accomplish.
Read a book on Java while on a roller-coaster.
My apologies for extrapolating from a single blog post and a few comments - but at the time it was all I had to go on. In that sense, frankly, I don't think I can be "wrong". I was expressing an opinion based on what I read in the linked content. I'm a newbie here, but my understanding is that this is the essence of reddit. Maybe I did so in an overly theatrical or melodramatic way, but there is karma at stake here! Many apologies if this came across as FUD, that was definitely not my intent. In terms of not being up to date on "one implementation that doesn't have public source code" I think that's being a little generous in this case. Firstly, Azul has strong links to Sun/Hotspot/OpenJDK in a variety of different ways (personnel and technical provenance), and they're historically pretty active on the conference circuit, their JVM implementation although closed source is hardly what you'd call obscure. In any case I look forward to reading the upcoming posts on the blog regarding the technical details and I look forward to seeing good progress on this project in the future. In no way did I intend this to be a slight on the technical abilities of the two developers with whom you work, or on the project on which they are working. Peace Out!
Hire a prostitute that also knows Java.
you aren't really supposed to memorize the manuals or tutorials. What's the point of that? The stuff you use the most is the stuff you'll remember the best obviously, but there's no shame in going back to read or re-read tutorials or documentation.
I'd say something related to Android development. It's always nice to whip out the phone in your pocket and impress the ladies with something you've coded.
Try putting a double wrapper in front of where the average is calculated. So average = (double) totalPoints/numTests;
You are conducting integer arithmetic instead of floating point arithmetic on this line: average = totalPoints / numTests; Basically, compiler sees you are dividing two ints and says "ok, result will be an int", but then it is assigned to the double. You can "solve" this in a few ways. The two quickest/obvious ways are: 1. use a double for one or both of numTests and totalPoints 2. "cast" either one or both of numTests and totalPoints to a double average = totalPoints / (double) numTests; In this manner you are basically saying "hey, I want floating point arithmetic here." FYI, don't just go about changing variable types willy-nilly. You should really think about what the correct type is for the context at hand. In this case, casting probably makes the most sense since it seems your numTests, testGrade, and totalPoints variables truly should be represented by ints. This is significant if you plan to do other stuff with them. But, that is a lesson for another day.
Cool. Good luck on your journey to becoming a developer.
Apologies not really necessary (but since they've been made, they're certainly accepted :D ), I'm just happy to have been able to correct misconceptions. I do see how the potential for mis-extrapolation was there, the wrongness wasn't in the thought process but ultimately in the difference of that extrapolated perspective from reality. And yeah Azul is far from obscure but while some strategic person should be keeping track of the progress of competing JVMs it would be silly for each JVM engineer to do the same. I too am eager to see this work progress, so that OpenJDK can become a viable option for use cases whose performance requirements demand pauseless GC. lol @ "karma at stake" ;) (but it's true!)
thanks, i'm on it
You are talking about a specific design pattern, abstract classes are more than templates ;) 
There used to be something from Azul called the *Managed Runtime Initiative* which published source code (under a free license), but it required a modified kernel, was difficult to compile, and is pretty much dead by now.
There's some information out there which suggests that the Zing JVM is a self-contained guest VM which runs on the KVM hypervisor provided by the supported operating system versions. If that's the case, claiming that no customized kernel is needed is a bit misleading.
How is this getting upvoted so high? There's something fishy going on.
[Operation Swordfish](http://youtu.be/zfy5dFhw3ik) style.
If you're going to chime in a few days later, please elaborate instead of emoticon.
You should initialize numbers[i] before using it: Before line 28: numbers[i] = new JCheckBox("Checkbox " + i);
When you talk about a default algorithm, I assume that you talk about the concrete accessible methods of the abstract class, that can be overidden (or not) in the concrete classes. But you can also use abstract methods to force concrete subclasses to define their own behaviour, which is the opposite idea of providing a default implementation.
No, it's the same idea. The abstract class gives you the common code and you provide the specific details. For instance a TreeVisitor would have all the code to visit nodes in a tree, but have an abstract visit() method for you to fill out, so you aren't writing the common tree traversal code. Or maybe a class of devices all have the same general behavior but their protocol varies slightly, you might choose to create an abstract class which summarizes the behavior of the device and force subclasses to implement an abstract method which performs the protocol related bits. You're still providing the default algorithm and forcing subclasses to provide the details.
The information is in the javadocs because it is a matter of design, not implementation. Your code doesn't need to know what class it should use instead.
You are right
You are correct that he should not "kludge it by representing it with a double." That is exactly why I gave a longer winded explanation in my last paragraph specifying the exact same thing. I show both options because both actually solve his specific problem (though the second is definitely preferable in this context). It is my opinion that burgeoning developers should be taught different ways to do similar things, and they should learn to understand when and where to use the distinct approaches.
You'd probably want to check out Java EE first and maybe look at Spring later (if at all). Java EE is the standard framework in Java, somewhat comparable with .NET, while Spring is an alternative created years ago. Although the framework works best as a whole, the first thing to look into would probably be JSF. This is somewhat comparable to ASP.NET, but has a nicer templating (Facelets) and takes advantage of the Java EE Expression Language (EL) to bind components to backing beans. Next to JSF you definitely want to learn about CDI. CDI makes ordinary classes into special managed beans and provides them with a scope, a name (so they can be used with the aforementioned expression language) and contextual type safe injection capabilities. If you want to learn more then look into bean validation next. This is mainly a set of annotations that you apply to your model classes. E.g. a @Max annotation on the name field of a User class. If you bind such a class to a JSF input component, then JSF will automatically validate that the value given by the user complies with the bean validation constraints.
Head First Java 
One of the newer language features is String support in switch statements, so converting if-else to switch would make sense in that case. AFAIK Netbeans does this also.
Dude, on your right there is search bar, use it, there is thread like this every week. It's not like new books on that topic are published every day.
while (head first in prositute == true) { cry; }
This is a pretty great question, tbh. Even experienced developers tend to get tripped up by these fine points!
Alternatively, you could just add a double to the line like: average = 1.0 * totalPoints / numTests; Not sure if this is regarded as a worse way to do things.
This is what it needed thanks. Do you know how to put the texts on separate lines. The only way I was able to do this is was to create a JLabel that had a bunch of spaces. Is there a specific command to do that?
Java was literally designed to be appealing to people who already knew C++. Just don't get brainfucked by generics syntax which have functionally nothing to do with templates. Nothing.
Funny, I was thinking of building something just like that. Centralized, with monitoring, etc. Are these Java processes running via shell script or in Tomcat/JBoss containers? If you're using Tomcat or JBoss, check out [PSI Probe](http://code.google.com/p/psi-probe/)
Thanks for the heads up. I will make sure to learn and understand their similarities and differences. 
It would require some custom shell scripts and it's ugly but [nagios](http://www.nagios.org/download) is often used for monitoring.
So the version of Head First Java I've got covers Java 5.0, I doubt a whole lot has changed, but is there a newer version that's worth getting or should I just keep going with this version of the book?
In my intro level classes we used Big Java. It seemed pretty decent. Upper level classes used Clean Code and Effective Java.
I used Cacti &amp; jmx4cacti for an extremely large environment to monitor threads, heap, and objects. For more complicate tasks, I used jolokio, to bounce and reload wars. We started making some really bad ass dashboards, but it was kind of a pain in the ass and took a lot of effort. If you have a lot of money to blow, I would recommend Actional, we used this world wide, but it took a lot of work to get working right... and needed oracle. :(
Stick with the old version, most of the stuff that's been added requires an intermediate level of Java to comprehend anyways. Keep at it!
Try this http://www.brpreiss.com/books/opus5/ also has versions in other languages
You want Glu. http://pongasoft.github.io/glu/docs/latest/html/index.html
We used this one: http://www.amazon.com/Data-Structures-Abstraction-Design-Using/dp/0470128704/ref=sr_1_4?ie=UTF8&amp;qid=1371444411&amp;sr=8-4&amp;keywords=data+structures but probably because it was written by the cis department. however, i did find the text to be very helpful.
My professor and class came to the conclusion that you can either get one that shows structures well, or shows programming well. but not both. :/ It seems not to exist.
[Absolute Java](http://www.worldcat.org/title/absolute-java/oclc/810432056) by Walter J Savitch and Kenrick Mock is a great text. All chapter have their pre-requisites listed, so its easy to skip over them if you think you've covered the same in your previous courses.
Yeah I really wouldn't worry about the version covered, the material it goes over probably hasn't changed much in years.
Its not advertised but it uses Java for the examples. http://www.amazon.com/Algorithms-4th-Edition-Robert-Sedgewick/dp/032157351X
I used the 2nd edition of this when I was studying Java. It was good then so I'm assuming the later versions are just as good. http://www.amazon.com/Data-Structures-Algorithms-Michael-Goodrich/dp/0470383267
I teach out of this book, and it's definitely a solid one.
sorry, but I think you're confused. Spring does not own the exclusive rights to the term MVC. JSF is a MVC framework just as well. It's a component based MVC framework. I think you are confused between request/action based frameworks and component based frameworks. MVC is kinda orthogonal to that distinction. Of course, just as with DI, Spring tries to make its fans believe it invented it and that the only true way of MVC is the way it happens to be done in Spring. Besides that I mentioned Java EE is somewhat comparable to .NET and ASP.NET being somewhat comparable to JSF. So not only was your reply incorrect, it also wasn't in response to anything I directly said.
Sorry for my harsh tone. Mods, maybe it's time to put one big post about java books sorted by reader level and pin it to the sidebar? 
My list of books to learn Java 1) Head First Java 2) Head First design pattern 3) Effective Java 4) Java Concurrency in Practice 5) Java Generics and Collection You can also see few more books on my blog post http://javarevisited.blogspot.co.uk/2013/01/top-5-java-programming-books-best-good.html
Yup, that's what I did first (as per the instructions under "Compile the Program" on the page). I also got the expected result that it indicated. It just stopped working once I got to the "Execute the Program" part on the page I linked above. 
Update: Don't know if this is useful, but I went directly to the "hello" folder underneath "introcs", and found 3 files in it: "HelloWorld.java", "java", and "javac". The last two don't appear to have any file extensions. 
What's the output of "ls" command (lists files) in the hello/ directory?
Yes, but it only gave me "/Users/[username]/introcs/hello: is a directory" again. This seems to keep happening, even with the "ls" command. Not sure what's going on...
So HelloWorld.class is missing. You need to compile your source code as I stated, using javac. javac HelloWorld.java java HelloWorld I'm also a little surprised that javac and java are in the same directory. Normally those files are installed with the rest of the Java development kit in a separate directory. Are you sure those are the correct executables you should be using to compile and run your Java programs?
Hmm, you just brought up something interesting. I'll have to go check this out; I didn't know it was unusual. This could actually be the source of my troubles...
What you should have in hello is just a "HelloWorld.java" (the source) and if you are able to run the javac successfully a "HelloWorld.class" file. Compiling by hand on the command line is a good learning experience and probably helps you to understand what is happening. However, if you are not familiar with the command line you should try learning a bit about that first. Another option is to install an IDE that will do all this stuff for you. Intellij IDEA, Eclipse and NetBeans being the most popular Java IDEs. Just find a tutorial on getting started with one of those. 
I'm guessing that you might have a directory with a space in it, which is making the java compiler be a bit weird if you're running it from the command line, ie if you're doing: java /Users/[yourname]/introcs/hello world/HelloWorld That's not going to work as it's going to break up that directory into two strings (thinking you wanted to run two files), you'd need to do: java "/Users/[yourname]/introcs/hello world/HelloWorld" Easiest to just move into the directory and run: java HelloWorld
Thanks to everyone for their suggestions. I'll snag a couple of them and get to work. Thanks!
I posted it up online. Its run by the London Java Community [0] who have a voting seat on the Executive Committee of the Java Community Process [1] where we're represented by Ben Evans. I help out on the LJC's internal committee where we decide how to vote on JSRs and help to drive genuine community feedback through programs like Adopt a JSR. [0] https://java.net/projects/ljc-london-jug [1] http://jcp.org/en/participation/committee
Check the community version of hyperic
Check the community version of hyperic
The fact that it's hosted by a google doc is pretty damned funny.
Ah, WebSphere. My nemesis. My most hated adversary. I hate WAS so much I started a hashtag called #thingsToDoWhileWebSphereStarts. WebSphere is such a bloated piece of nastiness, you can do quite a lot waiting for it to restart, though my go-to activity is still to sob and question my own existence.
Which version are you referring to? Pre-WAS 8.5 is bloated and slooooow; the performance of the Liberty profile for WAS 8.5+ though is far more in line with the lighter app servers. Even then, it's worth noting that it's not really fair to compare the startup speed a full EE server with the startup speed of a far simpler web and servlet container.
Nice library, although a simple Strategy design pattern should be easier to write. Edit : as I said, this is a nice library, but the strategy design pattern is enough to solve most problems.
&gt; Unless you like EJB 2.0, but if you're using that in 2013, you have bigger problems. Well yeah, but mostly because EJB 3 has been around for well over half a decade, and EE6 greatly simplifies the whole process.
There is no better data structures book than CLR. Yeah, it's not language specific, that's what language books are for. It's like trying to find the best combo waffle-toaster, you aren't going to find one that's half decent at either.
If your not a websphere admin for a living it does indeed suck, but just like any large piece of corporate software it's very complex and requires a lot of knowledge specific to just that product. I imagine people have the same gripe with DB2 or Oracle. 
On my system JBoss EAP 6.1 starts up in 1.2 ~ 1.5 seconds. That's a full app server. Jetty is faster (500 ms, something like that), but the difference is pretty much unnoticeable. WebSphere 8.5 is atrociously big and bulky, but it starts in 10 seconds or so from what I remember. It's impossible to install on Linux though, unless that Linux version is explicitly supported. Liberty 8.5.5 starts in a second or so, but is so lazy that it takes another second or two on the first request. So startup time is mosly okay, but installing full was 8.5 is terrible. I also hate that none of the JASPIC auto modules I ever tried work on WebSphere. 
Nice job. There are a few libraries out there that do similar things. For example: * [Guava](https://code.google.com/p/guava-libraries/) takes a similar approach to your code. It defines a `Function` interface that takes a parameter and returns a result, which is useful for implementing `map()` operations (called `transform()` in Guava). There's also a `Predicate` interface that takes an argument and returns a boolean, which is useful for filtering. It also has a nice set of lazy implementations of the Java Collections API that are built on top of `Function` and `Predicate`. * [Functional Java](http://functionaljava.org) looks pretty similar. I don't have any experience with it, but it looks pretty extensive. * [lambdaj](http://code.google.com/p/lambdaj/) uses byte code manipulation to provide a nice, fluent API. The resulting code is much prettier than Guava.
This is a very specific instance of the Strategy pattern, implementing a strategy of representing generic n-argument functions. It has the benefit of being more reusable than the generic Strategy pattern, because n-argument functions are generic across multiple domains.
I hated 6.0 and 6.1 but I actually don't mind 7.0+ too much. I prefer it over Tomcat, JBoss (do you still have to configure by editing multiple XML files and copying rars around? Yuck!), etc. but GlassFish I definitely like more. I do like the WebSphere management interface and jython integration. EDIT: Startup on a powerful machine isn't bad, and when in doubt use JRebel
What are you developing? I mostly develop backend servers and command-line tools. For Java I develop and test on my MacBook Pro. When I'm ready to make a release to QA I will either build the jar and make it available, or point them at a build on our CI server. Java development is done in Eclipse. For CI we have an elaborate set of Ant files that provide a common skeleton for the build, with pieces overridden in the project's Ant file. Clojure development is done in Emacs with leiningen managing builds. I have some internal Java libs that I use from Clojure that I build with Maven so they can live in my local repository and hence be easily found by Leiningen. 
I am not sure I follow as to why. If you look at version zero: https://github.com/MSeifeddo/Closure-implementation-for-Java-5-6-and-7/blob/master/org/mo/closure/v0/Closure.java then one can see that the "classes" really don't have much in common to strategize upon. Are you referring to something in particular? Version 1 uses both ClosureConvience and ClosureBase ... not sure if I follow your intention :)
Not sure I follow, how would that kind of implementation look like?
You can use Decimal Formatting, to have the correct digit number in the print
A lot of customers want the safety of something IBM approved, unfortunately that is what and why WAS is so popular. I however hate sqlserver (anything) and db2 (9.7 and backwards) more
Anybody suggest any good online sources for learning Java?
Exactly :)
Google are JCP Executive Committee members. They've got people on a bunch of different standards including servlets, dependency injection and lambdas.
I run VirtualBox on my Windows box, running Centos Linux, and I develop using IntelliJ on my Mac. To keep my Centos box synced with my mac, I use BitTorrentSync (I use this as I work remotely as well as in the office, so being able to keep my environment local to my mac greatly adds speed). The Centos box runs the J2EE environment, as well as the build process for each developer.
It's a pain in the ass, overwrought, generational heap of an app server that runs like a champ when you finally get it tuned correctly. JBoss has the right idea. Throw out your codebase and start fresh periodically.
Ohh I know - I still think it's funny.
Work: IDEA on Linux on Virtualbox on Win7. Developers who are not running a Linux VM otherwise use Vagrant to set up their local dev/test environment. Home: IDEA on Linux. Vagrant for various test environments, now trying docker.io for that role as well.
Oracle dB or oracle everything? The dB is quite good. Everything else is crazy.
Umm IBM did throw out their codebase
I did not realize that. When did they do that?
They acquired it from BEA, along with some other cool technologies. I only used it around WebLogic 7, all I can remember is horrible startup times and horrible JSP compilation times (plus something about an EJB compiler that I kicked out of my memories). We switched from that to WebSphere 6.0 and life was much better.
&gt; If your data is a list, you pass a list, etc. I still don't follow. A list of what? Strings, Integers, Hashmaps? The data has to be some sort of object underneath. If my data is a list of users, what is wrong with passing around a list of User objects as my data? If that user has a name what's wrong with having a getter and setter for the user's name? What's wrong with putting all the CRUD logic in service objects so you can have different database implementations while keeping the same domain objects for all your business logic? Can you show an example of how you would display and update a user's properties in the GUI without having any getters and setters?
I think you are confused. The == operator does work correctly for Strings. Strings are not primitives they are objects, they behave just like any other object does with regards to == and .equals(...).
Not sure how to restart them but you could enable jmx via command line arguments. 
Websphere Process Server will make you beg to back to using Websphere App Server again. And Websphere Message Broker... (insert expletives here).
WAS was my nemesis for a while. My only question is, why does everything have to be so hard?! I try to deploy to a cluster. I spend hours literally starting up / shutting down to no avail :(. WAS 7.0+ here.
Funny, wait until you get into Websphere Enterprise Service Bus. WAS is a joy to go back to at that point. 
IntelliJ on OS X, push to ec2 Ubuntu and private Ubuntu Terremark cluster for production :)
The problem is that it's hard to compete with the built in compilers of the larger IDEs. I'm assuming things like emacs put together **with** the Eclipse compiler would do the trick, but if you're using the standard java compiler, you're going to lose all your time waiting for that to complete.
Check out [JGrasp](http://www.jgrasp.org/). It may be what you are looking for.
Updated! :)
hehe, I didn't have 6u45 and now I do.... (well for a day or so anyway)
With Liberty. It's a Web Profile+ implementation now. You can download it directly in an self-extracting jar. It's some 60 MB and runs everywhere that Java runs (no special JDK required). If they can crank this up to the full Java EE profile (they're almost there), they have a winner!
Liberty starts in about a second. That's going to be a quick lunch then ;)
JCreator maybe. Not sure if it's the quickest, but it is lightweight. 
Use Liberty! Problem solved. 
Thanks! Just another quick question. Does your advice apply to somebody who literally has zero knowledge of Java? Just wondering if I should get myself acquainted with all the basic concepts first..
They really should fix JASPIC in the full WebSphere and then add it to Liberty.
We use WAS 7.5 in production and I have no issues with it as an application server running production code. For development we use a locally-installed Tomcat instance because of the sluggishness of WAS when doing a lot of redeploys/restarts. Our tests run on WAS to catch any of the small differences between the development environment and production. JRebel help WAS development a bit, but it also has its problems. We might move over to Tomcat for production as well, if someone has some tips regarding a nice interface for deploying apps and managing clustered application servers?
I did not know about this new thing called Liberty! [Looks hopeful!](https://www.ibmdw.net/wasdev/docs/introducing_the_liberty_profile/) !!
Even better, it looks like they are starting to support OS X as development environment! :)
I think it is possible to run programs from within Notepad++. Got to have a look at that.
If you're looking for something lightweight and can run your code, you may want to look into Vim. It's not exactly what you're looking for, but it's damn close. What I mean is, even though it's not a simple key press by default, you can have it compile and run your code very easily. There's java and maven plugins that make it easier to compile. You have commands that let you run arbitrary commands on the command line and, using tslime, you can run commands in a separate tmux pane asynchronously. Also, you can leverage make to run any command you want from the vim command line. Yes, you'd be use make to run ant/maven, but it can also run your code with it. Any of these can be mapped to one or more keys so that you simulate the one keypress operation of a full IDE in Vim. Not sure if it's what you're looking for, but I wanted to give you as much information as possible so you make the best decision for you. Personally, I switched to vim years ago and haven't looked back.
Runs perfectly on OS X indeed.
You could sit down with the Oracle docs and either Project Euler / Robocode and code away!
I'm curious; what benefit is there to pre-specifying the memory allocation limit? Wouldn't it be better if we could just limit the memory using the OS tools and let the JVM figure out how to divvy it up when it gets denied a request for more memory? Why impose this limit at startup anyway? We don't do this with other similar (infrastructure/service-oriented) tools, like IIS, Apache HTTPD, Oracle, PostgreSQL, etc etc etc. Imagine how much of a pain Chrome would be to use if you have to fiddle with Xmx et al when you launch it.
Every single one of your examples with the exception of Chrome (as far as I know) you do indeed allocate memory for. Certainly for servers and databases you have a default memory allocation and can fine tune it.
What is the essential difference between imposing memory limit with OS tools or with JVM tools? In both cases you have a hard limit, which size you must guess upfront.
In what place does GC tuning guide mention thread stack area as a source of memory consumption above the Xmx limit?
fair enough about most of them, imma get some coffee. i guess I forgot about them because the defaults suffice for most of my development work. I seem to remember Java's defaults almost always need tuning, but then I still remember coding and deploying to j2sdk 1.4.
It might not, point taken (although I would imagine the heap and permgen are the primary concerns)
Develop in Eclipse on Windows. Most testing is done on Windows. Then push to the Dev &amp; Production servers which are CentOS. It's web service type stuff, so rarely, if ever, do we deal with platform specific issues.
*disclaimer*; rant below ____ [personally, I can't bloody stand their half-assed jython integration](http://www.reddit.com/r/programminghorror/comments/v0jb9/this_quote_by_me_was_inspired_after_having_to_use/c50p6st). I mean seriously, it's two-thousand-fucking-thirteen, can we get a python port that was updated more recently than [a fucking decade ago](http://www.jython.org/archive/21/)? &gt; Jython 2.1 released! &gt; &gt; Download the latest stable relase of Jython here and read a summary of recent changes. (31-dec-2001). What does 2.1 lack that more modern pythons (such as, say 2.2 - big stretch here) have? How about a boolean type and True and False? And new style classes, so I can have smarter `list`s and `dict`s? `itertools` and `functools`? Reading the python docs, pay double attention to those "since" remarks! And if I want to do some remoting, you know so my build process can automatically deploy, but don't want to install websphere to my build box? Well, there's the thin client, but that sucks in completely new and imaginative ways. First off, not all scripts work the same between the thin client jython and the actual websphere jython. But before then, the thin client lacks the launcher shell script - wsadmin.bat/wsadmin.sh - and their "solution"? "just copy it from your actual websphere installation". Well my websphere installation runs on linux, and my dev/build machines are windows. thanks. Oh you provide some "example" that I have to manually hack to just get it to work? yeah. stellar. really. And if I want to use the python standard libs - you know `import os` and `import sys`? Yeah, the thin client lacks that. Copy "jython.jar" from an existing installation, yeah, I figured; except - again - with disparate OSs now my windows jython scripts are trying to `os.path` and `os.getenv` in linux specific ways on a windows machine. really fucking special guys. ____ [I haven't had much time to work on this lately](https://bitbucket.org/beltorak/washlib/wiki/Home); eventually I will get back to it. I have better wsadmin launchers in the bin folder, so at least that's taken care of. And figuring out how to get real python packages which can actually use the wsadmin default objects (another sub-rant entirely) was interesting. See scriptLibraries/wsobjects.py for a rundown.
I'm very low level, and probably won't be on any big projects for a while, so that's not too big a deal.
[they did an AMA recently](http://www.reddit.com/r/IAmA/comments/18balu/we_are_the_ibm_websphere_application_server)
agreed; the db is quite stellar. everything else - like the installer, especially for *nix platforms - leaves much to be desired.
Maybe you should try solving problems from a classroom context OR solving your own computing problems in Java. I find that if I don't put concepts to practice for my own problems I don't retain much knowledge. Plus it has a reinforcing aspect later on to say "Hey this situation is similar to X, and I solved by using Y; lets try that on this."
Try doing something outside of the tutorials. Use what the tutorial teaches to build something yourself (start off small.) Also, modify what the tutorial is doing (don't just copy code in, change it and see what happens.) It might be worth picking up a book that has exercises to do after examples. 
I will try that tonight! Thanks!
It depends what you work on and where is your performance and memory bottleneck. We produce software for banks and in my experience java doesn't need as much tuning but the database always does. Of course if java does basic reading from database, calculate some values, write to database the bottleneck will be in the database.
Wow, there's actually guys like us behind WAS :-) thanks for linking it. I'm curious how this will further develop and if I can run Portal Server on this WAS instance... Most of my work in this area is portal development. Any clues on that? :-)
Somewhere between fancy-text-editor and Java IDE is [JEdit](http://www.jedit.org/). I've been using it happily for years.
When I teach newbies java the best way i have found to get them to pick it up quick is: A. Start a project that you have no idea how to accomplish right off the bat, this will force you to look up multiple tutorials and scratch your head. It also may force you to go insane :P. B. Take the tutorials you use and break the code...Then figure out why that broke it...In the end you have a knowledge base of why and what not to do's. Also, you can always PM me..I'm always available for tips!
I don't think portal is part of Liberty yet; I don't really know. I just figured you'd be interested in the AMA.
Depending on what I develop I switch between my MacBook Pro and my Win7 desktop-PC. IDE on either is IntelliJ. Anything which involves copying stuff around, deploying to an Appserver or scripting I do on my MacBook since I prefer the *nix way. (I also tend to do a bit of coding on the balcony :P). Windows I use when I don't have to multitask a lot, writing lots of Unit/Integration tests or when I browse quite a bit (Too lazy to hook the mac to the monitor basically). Beside that, I run Jenkins, Apache, JBoss, git-repo(which I barely use at the moment) on a dedicated debian box which I ssh into when needed. Everything I build at the moment is build by maven, I might test ivy/gradle in the near future tho.
Update 45 was released in April 2013.
== on objects return true when you have two references of the same object. You can have two distinct instances of the same class holding the same value. a==b is false while a.equals(b) is true. This is not specific to java.lang.String but to every class in java
As a fellow Portal developer, I certainly hope so - however WAS's startup time is predominantly due to the Portal applications starting up (around 75%, higher the more custom applications are deployed) I'm not holding my breath. Still, any reduction's a step in the right direction.
In what way do you consider it to be broken?
The WebSphere (non-Liberty) installer for Linux sucks too. I don't think anyone ever got it to run on Ubuntu, despite Ubuntu being the most popular desktop distribution.
From [here (http://www.oracle.com/technetwork/java/javase/7u10-relnotes-1880995.html):](http://www.oracle.com/technetwork/java/javase/7u10-relnotes-1880995.html) JRE Expiration Date The JRE relies on periodic checks with an Oracle Server to determine if it (the JRE)is still considered up-to-date with all the available security fixes (above the security baseline). In the past, if the JRE was unable to contact the Oracle Server, it continued to behave as though it is still the most recent version with regard to security, for an indefinite period. To avoid this problem, a secondary mechanism, that does not rely on external communication, has been added to the JDK 7u10. From this release onwards, all JREs will contain a hard-coded expiration date. The expiration date is calculated to end after the scheduled release of the next Critical Patch Update. This means that JREs that are unable to contact Oracle Servers for an extended period of time, will now start offering additional protection after a reasonable period, and will not continue to behave as if they were still up-to-date with security fixes
A lot less than I did 10 years ago, but yeah, still a lot
Cool! I somehow missed that.
So you can run multiple jvm's on a single big memory ldom 
I had that issue with v7 and banged my head against the wall for weeks. Then I installed the ia32-libs on my 64 bit platform. Perhaps that's the reason? The error is "cannot find java"......
youve said everything. well done!
Yeah, certainly good to read! :-) We'll see about the Portal Server
Indeed, the Portal Server is the big one... I once figured there were some options to disable some of the apps it loads by default but it rendered my instance useless... And it takes too much time to test this on a trial-and-error basis... :) Good to see there in fact is a community of WAS/PortalServer developers! 
liberty is fairly young, so let's give 'em three years or so. they have an upward battle WRT the mess of a codebase that is inherited.
This release contains the usual critical security fixes :( but also several changes to JRE components and behavior, intended to improve Java security. Some of these changes impact the user experience. If you develop Java applications, especially on the desktop, you *will* want to read the [release notes](http://www.oracle.com/technetwork/java/javase/7u25-relnotes-1955741.html). This release fixes 40 security issues, including 14 issues with a CVSS score of 9 or higher! The majority of the these issues (33 issues, including all 14 major ones) only affect Java applets and Java Web Start applications. You will definitely want to upgrade the JRE you use for day-to-day browsing ASAP! 4 issues also affect servers, and 1 issue affects the Javadoc generated by previous versions. If you publish Javadoc on your web site, you will want to regenerate it using 7u25. Here is the [Critical Patch Update Advisory](http://www.oracle.com/technetwork/topics/security/javacpujun2013-1899847.html), updated to include the list of vulnerabilities (table at the bottom of the page). Note that Java 6 has reached its public end-of-life. The above security fixes will only be distributed to businesses paying Oracle for Java 6 support. The last Java 6 release, 6u45, is most likely vulnerable to the security fixes listed in the CPU Advisory. Upgrade to Java 7.
It means the JVM mallocs once for the entire heap. Otherwise, the JVM will worry about free'ing and malloc'ing RAM as it goes, which is less efficient, and can be a problem if suddenly you need RAM and it's not there. This is important server-side, less so client-side. (And yes, this is a rather simplified explanation.)
The problem I had and about which I saw posts and questions as well is that simply "nothing happens". You try several to run several things that look like they could be installers from the unpackaged download. See e.g. this one: http://askubuntu.com/questions/272790/websphere-application-server-8-5-can-be-installed-on-ubuntu-12-04-and-how and this one: http://serverfault.com/questions/474528/how-to-install-websphere-8-5-from-linux-zipfile The last one indeed advises to install the ia32-libs, but the error is different and simply says "not found". I think it should have said "Java not found". Really confusing... 
Thanks, just fixed the link. And thanks for your story. I'll try different stuff and learn from that. And also as to eclipse or netbeans - IntelliJ seems a nice environment. Coming from PhpStorm there is a fast switch to it cause it's all JetBrains!
Because there is overhead associated with the process itself. Xmx sets the max HEAP size. If you use a tool like Visual VM or even some of the overlooked stuff in your bin directory you'll be able to monitor heap size and garbage collection activity. The heap size should never cross over -Xmx but the process size could be larger. 
Java malloc's once for the JVM's initial heap size. It does shrink and grow as memory needs change. The exception would be if you set -Xms and -Xmx to equal values, but even then different operating systems handle that allocation differently. For instance on something like AIX where memory is virtualized across many different LPARs that malloc isn't truly fulfilled up front, but when you need another page once should be there.
I thoughly agree. Python is a fairly simple language which makes it an ideal language for beginners and simple scripting. It can also handle the really complex stuff as well, but that is often not seen by beginners. Java, on the other hand, is not constructed simply. It uses complex structures right from the start and is often frustrating when you are trying to perform simple tasks. If you are not familiar with this type of programming it is important to go through the 'baby steps' since the complexity of the language could easily overwhelm you later. However once you get past the boilerplating, verbosity and complex realtionships between classes (design patterns) that are essential to Java, you might find that both languages are very powerful and knowing both has help to deepen your knowledge of programming.
This. Does anyone know? I _really_ don't what this behavior when using a JRE not coupled with an Oracle/Ask Toolbar installer.
Some of us can't upgrade to Java 7.
the last one does say "installc not found" which clearly it is there. the v7 issue is similar, the executable just happens to be "java" in that case. In either case it should not say *not found*; but I don't know if that's the fault of linux or IBM's shell script. I'm going to go ahead and blame IBM since every other app server can run without all this custom crap. I honestly can't think of a single reason why you would have a *compiled* installer on linux instead of a pure shell script. Of course that would just delay the problem until you try to run the beast.
Perhaps find a programming game that uses Java. Like Robocode. Games are a great way to get people to focus on tasks and retain information.
I'd say a lot of people can't upgrade (for various reasons). I know of about 10 - 20 projects here than can't even upgrade to java 6 let alone java 7.
This one looks pretty cool, I found a pdf online that I've been skimming through. Thanks!!
I can't stand anything below WAS v8.0. My one gripe about v8.0 that really pissed me off is the fact that, if I override the POS version of MyFaces it packages via setting the classloader policy to PARENT_LAST, you lose the ability to use CDI! WTF?!?! I tried employing JSF 2.2 using that go-to tactic, but I wasn't going to sacrifice CDI. Other than that, I think WAS v8.0 is powerful...but only if you can figure out how to set the damn features up. My biggest criticism is custom properties that give you no indication as to what Map you're altering behind the scenes. Setting up a custom user registry within a federated repository is one example. Another is overriding the default smtp port for a Mail Session. Just give me a clue so I don't have to waste time figuring out what your Custom Properties do! I also can't get over the abomination that is the how-to on implementing your own custom code implementation for a JDBC User Registry. Seriously, I spent weeks trying to find any example that retrieved users from a db instead of a damn flat file. I think I only found 2, but they were from WAS 4 examples. W.T.F.?!?! I'm stuck developing for WAS v6.1 and v8.0. I don't even want to tease myself by messing with v8.5, v8.5.5, or any of the Liberty versions. Good luck getting Arquillian working on WAS too! GlassFish or TomEE FTW!
No, you can't really compare Echo to JSF - the only common denominator that I can see is that both are server-side centric (at least the client/server setup of Echo, not the client-only usage). For one there is the programming model which si completely different (tag-based for JSF and a Swing-like component model for Echo). On the other side, JSF is page based as opposed to Echo which full Ajax, that is: basically a single "page" updated continuously through user-triggered JS operations.
Some of us work for consulting companies that still receive offers using Java 1.4.
God damn GIMP sucks. And no goddamnit i don't want to install the askjeeves toolbar. Fuck oracle
I fail to see why you would not be able to upgrade your desktop JRE. If this is a matter of IT being slow to respond, they should be made aware this is a great risk on the desktop, as much as Flash and Acrobat. I understand full well that your projects may depend on an older version of Java (none of my customers use Java 7 yet), but you should install such old JDK separately, and make sure they are not available on the browser.
Then inform whoever is responsible for that asinine decision that said decision is placing people at risk.
There is something really important we should know about you. Is this your first programming language or do you have experience in another discipline? I am going to assume that it is your first programming language. When it comes to programming, you need to have a few things in mind. First, establish a goal. For instance, a great starter program for novices is a text-based rock-paper-scissors game vs a computer. This will teach console input/output, if statements, random number generation, etc. With your goal in mind, before even putting any code down, write down the main objectives of the game. For instance, with rock-paper scissors it might go something like this: * Prompt user 1=Rock, 2=Paper, 3= Scissors and ask for choice. * Store choice to a variable for later. * Randomly generate a number between 1 and 3 * Store value. * Subtract player choice from computer choice and store result. * --- If Result = 0 then it is a tie. Prompt user. Run again. * Do comparisons on them based on rules of rock paper scissors. * Show winner. You get the idea. There's no java code there, but there is an idea of what is supposed to happen. It's brief and to the point. The next step is to take your pseudocode and translate it into java code. Now, this game really only uses one class but if there were more, you would probably want to make a class diagram that detailed the relationships between classes. They look like this: [UML diagram](http://www.ibm.com/developerworks/rational/library/content/RationalEdge/sep04/bell/bell_fig5.jpg). Anyway, look at the aspects of the pseudocode that you need and search up tutorials on that specific task. Write code for it and test it out. Which brings me to debugging. On the left margin of the class window, there is a blue band. If you right click it, you can set a breakpoint or toggle it. When the code executes, it will stop there until you either step into the code (which goes into it if it's a function call for instance) or step over it (which will skip going deeper into the code and just stay in that one function). Now any time you run in debug mode, you can pace through your code and see EXACTLY what it's doing. Eventually, you'll want to learn how to use JUnit but that's for another topic and another day. Regardless, finish the rock-paper-scissors program with just the most minimal amount of help. Then move onto the next project: tic-tac-toe. I'll be happy to give more advice and even if you are an experienced programmer, it's a great program to start with. I have about 5 different programs that I will write any time I'm learning a new language. * Hello World (obviously... gotta make sure everything's working) * Rock Paper Scissors * Tic Tac Toe * A stop light (teaches me how events and timers are handled etc) * Employee Information entry (forms and database entry tactics) * Echo client/server pair (networking experience) Hope this helps. Again, happy to give any advice. 
It's a nasty upgrade nag screen and there's no good way to disable it. * http://www.labareweb.com/java-1-7-auto-update-deployment-with-sccmmdt/ * http://www.symantec.com/connect/forums/how-everyone-addressing-forced-java-dialog-java-update-needed-your-java-version-insecure There is a soupcon of mercy -- the nag screen only appears for browser applets, and not desktop or command-line applications.
The ORM you probably want to use is [Hibernate](http://www.hibernate.org/). 
Could someone tell me why a company would deliberately choose to remain on 1.4? As someone who started Java programming at around 1.6-1.7, it's been my impression that the things added were additions to the language, and largely backwards compatible apart from any deprecated methods that were removed. Are there really so many deprecated methods removed from 1.4-1.7 that the effort of porting is too large? Or is there something else preventing these companies from catching up?
You need to specify some trusted certificates in order to validate the servers certificate. With no trust anchors specified, you have no way to know if the cert presented by the server is valid. If you don't care about cert checking and just want the encryption, you need to supply an implementation of a cert checker which does a no-op. I forget the specifics, unfortunately.
Why did you post it again? It's still on the front page from the 3rd time it was posted, and 2 more times on the second page.
Wow. Sorry, I didn't see that at all. I used karmadecay and it said it had not been posted. Edit: TIL: Karmadecay only uses a reverse image search and does not look at urls as well. The "other discussions" tab also says this link hasn't been posted. 
There's another approach to this problem, which doesn't require workarounds like emulating self-types. That is, use composition instead of inheritance. For example, bound properties are implemented using [PropertyChangeSupport](http://docs.oracle.com/javase/7/docs/api/java/beans/PropertyChangeSupport.html). In the spirit of PropertyChangeSupport, we could do this: public interface Observer&lt;O&gt; { public void notify(O observable); } public class ObservableSupport&lt;O&gt; { private List&lt;Observer&lt;O&gt;&gt; observers = new ArrayList&lt;Observer&lt;O&gt;&gt;(); public void addObserver(Observer&lt;O&gt; observer) { observers.add(observer); } public void notifyObservers(O observable) { for(Observer&lt;O&gt; observer : observers) { observer.notify(observable); } } } public class Temperature { private ObservableSupport&lt;Temperature&gt; observableSupport = new ObservableSupport&lt;Temperature&gt;(); public void addObserver(Observer&lt;Temperature&gt; observer) { observableSupport.addObserver(observer); } public void notifyObservers() { observableSupport.notifyObservers(this); } } A little ugly, but perhaps a little easier to understand and a little easier to use in practice. Also note that the observable class doesn't have to extend anything, which is nice considering Java is single-inheritance.
Ok do you have any pointers to some resources I could read for streaming over html 5. Thanks p.s no need loads on google. Thanks for the pointer I'll have a more indepth look after work.
It's an overloaded operator, that does much behind the scenes. In general, that wouldn't be a bad thing, however, it is inconsistent with the rest of the language. Treating Strings as a special Object diminishes the meaning somewhat, and add lots of confusion to new developers. Who hasn't had to have been told not to do the following String x = "1" for(int i = 2; i &lt; 10; i++) { x += "," + i; } or something similar. It looks like it's the correct way to do it, until you understand what is happening.
Why would you willingly use the applet plugin anyway...
I'm trying to figure out whether you're looking for a way to generate arbitrary PDU serializers and deserializers, or if you're just looking to describe a single well-known protocol easily. Is the MFTP you're referring to a well-defined protocol, or a description of the concept of distributed file transfer?
It is a well defined protocol. I have classes that define the attributes of each pdu and i know how those attributes need to be laid out in the packet (as defined by the protocol). As i said before i have all of the information i need to just build a byte array that conforms to the protocol, i just dont know if there are any java specific ways to do build that byte array and send it out over the network. My basic strategy now is just to implement a to byte array method on the pdu classes that outputs the byte array for the packet and send that bye array out through a byteoutputstream.
thanks for the information. I want the certificate based mutual authentication, so i can't ignore cert checking. Also, in my client's tomcat truststore i have uploaded the root certificate of CA and the same i have done with server too. sorry actually forgot to provide one more information...earlier i was using cryptoJFIPS jar as java security provider then it was working fine but now i am using some customized jar of cryptoJFIPs and then getting the above mentioned error. please share your thoughts. Thanks,
Parsing ? What you are really looking for is the antlr grammar for the SQL dialects of your choice. Then you can play with SQL files with ANTLR: http://www.antlr.org/wiki/display/ANTLR3/Five+minute+introduction+to+ANTLR+3
I guess "broken" is a matter of opinion. You're right its behaviour is different, that plus is overloaded whereas no other objects can do this, and that concatenating in a tight loop isn't great for performance (although you've got to be in a very frequently called loop for it to be noticeable). But on the other hand, Strings are so fundamental that giving the developer a way to simplify their concatenation does make things easier, and the plus sign does what it logically should do - something like System.out.println("Foo: " + foo); is a lot easier to write than concatenating the values through a builder etc. Edit: Forgot the other thing about Strings, which is that their creation is also very similar to the primitives (sure you can "new String", but I can't think of any reason that you'd want to). In short Strings are different from other objects, full stop - there's a lot which in this sense is "broken" compared to the other objects.
Most of the time it's a matter of their budgeting process being incompatible with making continuous small investments into keeping software assets current. It's a symptom of not accounting for software assets and technical debt at a high enough level.
&gt; if I override the POS version of MyFaces it packages via setting the classloader policy to PARENT_LAST, you lose the ability to use CDI! WTF?!?! Sad... very sad! My guess is that this is caused by WAS using its own modified version of Myfaces and that one of the reasons that they modified it is to integrate CDI. But, MyFaces has an SPI to do just this! I don't understand why IBM didn't use it. Maybe they wanted to differentiate themselves from the other servers and added all kinds of "feature added" stuff (which of course nobody cares for), but that's just speculation from my part. &gt;I also can't get over the abomination that is the how-to on implementing your own custom code implementation for a JDBC User Registry. This is problematic indeed. I think this is also related to the problems with JASPIC. In that case there should be **no** user registry or repository, since the user details should be completely controlled by the JASPIC module. Unfortunately IBM insists on JASPIC usernames and roles being available in its internal user registry (or the JASPIC module being paired by a user registry that can read the same source as the JASPIC module does). This is completely against the principle of JASPIC authentication modules, which should be portable between application servers.
Don't measure quickest in how responsive the text editor is, measure it in how productive you can be. Once you really start to learn the feature set of Eclipse/Netbeans/IntelliJ you can save a lot of time. If you really want the freedom to choose any editor then use Maven on the command line to handle project management and the text editor of your choice.
Hard to say with any certainty what your issue is. Googling your error message shows that most people have failed to correctly specify the keystore file. Perhaps that is your issue? Or perhaps the custom jar you are using is faulty (invalid signature? or loads the keystore from somewhere other than Tomcat's default provider)
Most of this stuff is pretty ho-hum, and relevant only to people who still do applets, or other pathological use cases, but ``CVE-2013-2450`` and ``CVE-2013-2456`` seem strange.
Let the web/app server stream the files if possible. HTTP media streaming is done using the HTTP Range header and partial downloads. When I say let the server handle it I mean that if you try to do something like stream the files with a servlet the you'll end up having to implement partial downloads yourself which is a pain but if you just dump the files is directory that the server makes available then you don't have to do much except verify your server handles partial downloads. If you have to put the files in a database or something then you are SOL and need to start reading about the Range header. 
I assume as I'm using OpenJDK, that this is not relevant to me?
Try the [Swing Tutorial](http://docs.oracle.com/javase/tutorial/uiswing/). There are some good [examples](http://docs.oracle.com/javase/tutorial/uiswing/examples/components/index.html) in there. Although, from what I've seen of actual Swing UIs in production, they are usually a mess.
it's possible that "not retaining anything" is fine. java is a very simple language and the tab completion and javadocs in the IDEs (i use netbeans) mean you don't need to memorize much. the only way to know, is start trying to solve a problem that interests you for me, that meant making a webapp - it's easy, you see immediate results and it touches the real world
What are the advantages of using TomEE or JBoss instead of Tomcat when developing ? Quick edit: I can see TomEE is basically Tomcat + a bunch of jars that give you JPA / transactions / security etc. The way we have ended up doing this is bundling those jars with the application. I can see the advantage of running them as part of the app server instead of the application (since the production app server already has a lot of this functionally).
Just generate unique UUID type filenames for each uploaded file. The song title/artist should be in the ID3 tags.
Aslo I missed that k is an int primitive. This means a reference can not be passed to a function. k will always be 2.
Thank you, I appreciate it.
You could just fire up a program and see what happens, add a println after the method call or debug it and see what k becomes.
It is still two because you never assign k. You simply act on its existing value and pass that result as the parameter but as far as k is concerned, it has no idea you ever did that. Obviously if you would have done this: *int k=2; ++k; nPrint("A message",k);* Then nPrint would still receive 3 as it does currently but upon returning from that function, k would be 3 because it was assigned through the short prefix operator ++ which is equivalent to k=k+1; 
Static methods are also known as class methods in other languages if that makes the comparison clearer?
Okay, so would I be on the right track if I said that instance methods are for specific objects of a class while static methods are for the class as a whole? 
bingo
Yes, that's one way to look at it. Static methods are often used for utility methods. For example java.lang.Math contains a lot of mathematical functions, implemented as static methods: Math.sin(), Math.cos(), ... While static methods have their use, they have their limitations. Try to avoid them for non-utility methods, as it's quite easy to write hard to maintain and understand code this way. Especially stay away from static methods that use static fields to keep some kind of global state for your program.
Awesome, thank you so much. :)
I've been interested in Scala for a while but never jumped ship from Java. What are reasons to use it?
Nah, better let other people spoonfeed the answer. /s
If you enjoy functional-style programming but still want to keep using OOP and the Java ecosystem.
&gt; ... IBM found it necessary to ship a (massively?) modified version of MyFaces ... &gt; &gt; Why they deemed that to be necessary is a mystery to me. Probably a leftover from the all-too-common NIH syndrome. They even ship with they're own version of the JDK/JRE/JVM. I found that Eclipse (deploying to WebSphere 7) was possible to run using a stock Sun/Oracle JDK, until I wanted to enable SSL, which required WebSphere global security, which required the IBM JDK. I hear the latest Liberty can run on a stock JDK however.
It's fun for hobbyists, bad for business.
IntelliJ IDEA
but why?
eclimd, it allows me to have eclipse's functionality in vim
The initial reason for preferring IntelliJ over Eclipse was because every feature you could want was already bundled and worked together. No more spending several days trying to get git and maven support to co-exist. After that I discovered that IntelliJ was very polished and had some great features like suggested code fixes and refactoring and was more stable than eclipse. To that of with amazing support for things like spring and hibernate. It really is sa case of getting what you pay for.
Tried it some time ago, but couldn't make it work with Emacs as client... 
It's too niche for making enterprise applications - I mean finding Java developer is much more easy and cheap than finding Scala dev (it doesn't matter that one or another can be better at writing code, being able to substitute any of employees instantly and easily). Disclaimer: I'm $working$ as Java dev, but I'm aware that I can write better, more concise and more readable code for example in Scala which isn't an option for my management because of reasons I gave above.
Time to make the switch? :D
Would you like to try and tell [Twitter](http://twitter.github.io/) that? Perhaps [LinkedIn](http://www.scala-lang.org/node/6436)? Or maybe [The Guardian](http://www.slideshare.net/tackers/java-to-scala)? How about [FourSquare](https://groups.google.com/forum/?fromgroups#!topic/liftweb/Em5rHlKfvRQ)? Scala has real business application.
Eclipse; because it has a very rich marketplace, it is very customizable, and has a big part of the market.
I can vouch for that. I know nothing about lisp and I hate it mindlessly.
You probably need to specify a little more for a good answer, such as: 1) What DBMSs do you need support for? 2) What range of SQL do you need the parser to cover? 3) What do you want to do with the SQL? Do you want to just check it parses (i.e. that it is valid SQL) or traverse a parse tree?
It's a real shame that there aren't as many grammars yet for Antlr v4, because it seems much better. Unfortunately, the large architectural changes mean it isn't backwards compatible with Antlr v3 (AFAIK).
Start simple and don't use interfaces until you actually need them. [Will EJB 3.1 Kill Java Interfaces?](http://www.adam-bien.com/roller/abien/entry/will_ejb_3_1_ioc) "With EJB 3.1 interfaces became the artifact again, for what they were actually aimed: a typesafe facade for hiding multiple implementations. You should only use interfaces EJB 3.1, in case you actually have multiple implementations for one interface." Another good read by Adam: [Interfaces on Demand with CDI and EJB 3.1](http://www.oracle.com/technetwork/articles/java/intondemand-1444614.html)
I'll have time to answer after a few meetings.
Second that. And this *by far*! Since IntelliJ offers a OpenSource Edition I'd always prefer it compared to Eclipse/NetBeans. Here are the key selling point for me * Integrated Development (i.e. Git, SVN, Ant, Maven, ... is seamlessly included * Autocompletion everwhere from Debugger to Ant-Task) * Super navigation &amp; keyboard support (Try Ctrl-Shift-A to learn about all of them) * Superiour refactoring capabilities * *Tons* of Code Inspections which a) do not disturb (no slowdown) and b) really helped me to improve my programming skills If you go for the commerical Ultimate Edition you get even more support i.e. great inline Webapp build &amp; deployment, Live Code Edit in your Browser and much, much more. But already the OpenSource edition IMHO outrules the competitors by magnitudes.
I notified the author (which probably doesn't follow reddit), and got that reply: &gt; Interesting. This shows that it is possible to delegate the task of &gt; "being observable", instead of inheriting it. And indeed, in &gt; a language without multiple inheritance, this is probably &gt; preferable. (This makes one wonder exactly when inheritance is &gt; preferable to delegation!) 
Time to start sending in those bug reports..!
I've been switching between Eclipse and Netbeans for a while. Right now I'm mostly on Netbeans. Pros and Cons: 1. Performance- this changes between releases, sometimes Eclipse seems faster, sometimes Netbeans. Both create a lot of small files, so having an SSD is very very helpful. I estimate that some tasks in Eclipse became ~4x faster when I got an SSD. I found Netbeans somewhat faster if I don't have an SSD. 2. Maven integration. I find this works better with current release of Netbeans, than it does with Eclipse. Although I read somewhere that this is going to be greatly improved with next release of Eclipse. 3. Synchronize with repository view for SVN/CVS- current reason why I keep Eclipse around at all. Also, I like better how Eclipse and SVN/CVS works. 4. Refactoring- better in Eclipse, but good enough in Netbeans. 5. Stability- Netbeans wins here for me. Important plugins get pulled into "core" Netbeans, meaning they get much more testing and QA than independent Eclipse plugins. I found that Eclipse plugins vary wildly in terms of quality. 6. Eclipse you have to tweak and customize and install plugins to make it usable. Netbeans is better out of the box.
Netbeans, but I write a lot more PHP than Java.
Nice rant. I've been developing in Java for better part of 15 years, however I managed to get my fingers burned a bit less than you did. That's how I did it: 1. Never used Java on desktop/client side much. Java for me was always serverside. Never got burned by applet mess. 2. Switched to lightweight frameworks during EJB1/EJB2 mess. Never got burned by those. EJB3 and 3.1 is actually quite good. 3. Always developed stuff on Linux. Never got burned by Microsoft interference. And let me tell you, Java on server side is still great. It's never been better. It's very fast, very mature, very well supported. Both official JEE spec and 3rd party frameworks and libraries are great and getting better. I agree about removing Java from desktops where it's not used. And kill Java browser plugins with fire. And the toolbar thing, well, that's just stupid. I do hate Oracle very very much... However, "apt-get install openjdk-7-jdk" and you are good to go. No click-through licences, no stupid toolbars :)
I feel like I shoudl get more linux experience. I'm only 3 years into my java career.
Thanks. In my kernel I am desktop developer (thanks for Amiga 500 where I truly learned Assembler). So I haven't really looked up hard enough Java in servers (thought it seems like that I allways end up to server side development in different work projects). When I end up my multi year C# (Mono/.NET) desktop database engine project, I guess I will use my resurrection scroll early and translate my project for Java too (Java developer community is just too lucractive to avoid). Hopefully, I have time to take good deep look to EJB then - without burning my fingers again. 
Netbeans. I hate the eclipse interface.
Don't jump directly into EJB, it can be a bit overwhelming. But in general, in Java you can find very nice frameworks for: 1. Dependency Injection- Spring, Guice, etc. 2. DB access, Object-Relational mapping, Hibernate, JPA and things. Even plain JDBC rocks. 3. Web MVC framework galore. 4. Messaging- JMS, ActiveMQ and related. 5. Testing, unit and integration. 6. Webservices, REST and SOAP 7. If you want AJAX but hate javascript, there are things like GWT or Vadin. They compile Java =&gt; JS. EJB and JEE spec is a standard for several of those things above. EJB very is useful if you need very transactional environment, especially with distributed transactions across several databases and JMS messaging. Plus if you develop against JEE spec, you can (in theory) switch different implementations of the spec at will (at low cost to be more precise). Anyway, best of luck 
Meh... I'm not a developer, I'm a linguist. I use python and R mostly, I have to use java for some lame tasks like web spiders and a couple of machine learning stuff that runs too slow on python, but I want to move to c++. I don't really have the luxury of spending most of my time messing with different programming languages :/
Lisp would be awesome even for a linguist point of view, because it is the best language for symbol manipulation there is around. And also, you can easily create your own syntax rules on it.
is it fast like C or slow like python?
Well, the answer usually is "it depends". It *can* be as fast as C, providing you have a good compiler (like SBCL) and optimize your code well (there are some declaration hints you can give to the compiler to make the code execute faster), but even without it, it will usually be really fast (because it is compiled, after all).
Develop your own pet project. Next Google, new RPG game or IRC client, crazy P2P implementation or a web-app for website that compares cuteness of dung beatles. Whatever. Just get some practice. And FINISH IT, don't just start, do 2 days of work and drop it.
Thanks for your suggestion, I'll take a look at it.
Definitely pay attention to the last thing ilikeorangutans posted. It's very easy to get convoluted impossible to test code if you misuse static methods (primarily by making them stateful and/or having side effects). But for functions that don't mutate state they can make much more explicit the dependencies of an operation.
Maybe you can look at the factory design pattern. It lends itself to using generics. A tutorial can be found [here](http://www.devsumo.com/technotes/2013/01/generic-java-factories/)
How about [Google Guava](https://code.google.com/p/guava-libraries/)? There's lots of use of good use of generics in there aside from collections, in things like the function/predicate/supplier interfaces, lots of the concurrency interfaces, the hash interfaces and the reflection tools.
Guava is something that every java Dev should be aware of
Hamcrest uses them pretty extensively: https://code.google.com/p/hamcrest
Head First Java. Look no further. Apologies I can't link as I'm on my phone.
 [**@lhotari**](http://twitter.com/lhotari): &gt;[2013-06-20 17:47](https://twitter.com/lhotari/status/347772631052869633) &gt;Some progress on [#Grails](https://twitter.com/search?q=%23Grails) [#Java](https://twitter.com/search?q=%23Java) 7u25 compatibility problem. [*jira.grails.org*](http://jira.grails.org/browse/GRAILS-10183#comment-75788) spring-loaded 1.1.3 contains a fix [*github.com*](https://github.com/SpringSource/spring-loaded/commit/efa169fb8df46e842a47683e85ad5354098456cb) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/1gqoqe%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://yl.io/S) [^[Translate]](http://translate.google.com/#auto/en/Some%20progress%20on%20%23Grails%20%23Java%207u25%20compatibility%20problem.%20http%3A//jira.grails.org/browse/GRAILS-10183%23comment-75788%20spring-loaded%201.1.3%20contains%20a%20fix%20https%3A//github.com/SpringSource/spring-loaded/commit/efa169fb8df46e842a47683e85ad5354098456cb) [^[FAQ]](http://yl.io/T) [^[Statistics]](http://yl.io/U) ^\(times ^are ^utc) 
Looks like wordlist is not instantiated at the time you try to add Words to it in the Weather constructor. Before adding words in the Weather constructor: wordlist = new ArrayList&lt;Word&gt;();
I wonder whether this question has been asked before in this subreddit? /s
Pro tip: If you add "final" modifier to a field (example: public *final* ArrayList&lt;Word&gt; wordlist), then compiler will automatically find such mistake and stop with error: "variable wordlist might not have been initialized".
These are the two main tools, in no particular order: http://flywaydb.org/ http://www.liquibase.org/ What I really wish we'll get at some point is a generic OS-level way of making data snapshots, similar to what VMWare ESX* and ZFS offer in proprietary lock-in packages.
That did it! Thank you so much!!
Interesting. Thanks.
Why?
Check out [Refactoring Databases](https://www.google.com/url?sa=f&amp;rct=j&amp;url=http://www.amazon.com/Refactoring-Databases-Evolutionary-paperback-Addison-Wesley/dp/0321774515&amp;q=&amp;esrc=s&amp;ei=i1vDUa21K4ns8QTE-4HgAg&amp;usg=AFQjCNGNUQKPBDNpwfAX90qR3zRElPmUDQ). [Here](http://www.agiledata.org/essays/databaseRefactoring.html) is a very good summary of the process advocated in the book. The key take away is to get into the habit of writing DDL and DML scripts for your DEV work and keep them in version control like you would any other source artifact. When you have completed the work in the DEV sandbox, you can promote the scripts from SCM to higher environments.
As a developer on Guava, this makes me happy :D
Thank you
That's a pretty good summary!
Thanks r1ch!
Good tip, cogitolearning. Thanks!
Indeed, it's basically that the bundling and the integration has already been done for you. It's not unlike Linux distributions. Sure, everyone (well sort of) can cobble together their own distro from scratch, and occasionally it pays off, but most people just download Ubuntu as a base and then customize if necessary.
Hey! Guava is one of my "don't leave home without it" libraries. Thanks!
Guava is great! Tell your team they're doing great work! (Also it would be nice to be ale to construct an EventBus instance with a user-defined annotation, but I digress)
Thanks, I did not know about /r/javahelp. I need to start using the debugger more. I'm so new that right now I feel like the debugger is harder to use than just staring at the code until I find the problem. Do you have any good resources on how to use the debugger in eclipse? 
Wait... what? From what you're posting it seems that you're a bank customer. Are you creating the webservice or just using it? If you're going to an online banking site, it will all be in the browser. Not following your post at all.
"Execute" as in start a Java Web Start App? Or just something embedded? Embedded wouldn't surprise me, but a web start app would. I don't mean to say that either is secure/insecure/more safe/less safe. While every system has its vulnerabilities, I'd say you're pretty safe. Unless of course your machine has some nasty virii or keylogger. But then again your bank probably accounts for that somewhere in its security system. 
Java Web Start App seems about right. [I get something like this](http://i.stack.imgur.com/7sXoO.png). It just feels unreasonable to use a Java app to secure my system. Like you said, every system has vulnerabilities and adding Java to the equation doesn't look like an improvement to someone that didn't have the browser Java plugin installed.
Bloody hell... imagine where we'd be today if ANSI C had an expiry date. Putting quasi-DRM in a software language is a stupid move. Is oracle purposely trying to drive Java into the ground? 
I don't know that stuff. Just html and css. What do I need to learn?
Unsure if this will help but its worth a shot. Check out /r/dailyprogrammer they have quite a few challenges.
&gt; So, Java, with all its flaws, can still increase my online banking security, as a Linux user? No it doesn't. File a complaint and get rid of it.
Well, if you want good "real life" experience, you're going to have to act the part. First, learn to debug your code. Learn to set breakpoints and step through your code to learn what it is doing. This is an incredibly important skill to learn because your code should not be a mystery when something is broken. Second, install and learn [JUnit](http://junit.org). A good tutorial on JUnit is [here](http://www.vogella.com/articles/JUnit/article.html). A big part of professional development is testing. Generally a good way to approach it is to create the test related to the feature you're adding and then run it to a failure. Then go through your code and make the tests work by implementing the new feature. Once you're doing that regularly, you will have a lot of tests that you won't have to worry about whether or not they cover properly because you wrote them as you were creatinig it instead of scrambling to create proper coverage. There are many different kinds of testing of course so you will also want to research that. This [wikipedia](http://en.wikipedia.org/wiki/Software_testing) page should give you enough vocabulary to learn more about the discipline. Third, you're going to need to learn to use a source control software. [Git](http://git-scm.com/) is excellent but you might prefer Subversion or something else. The bottom line is to just use it as you develop your projects. The great thing about Git is that it's fully local to your machine but when you're ready, you can start using [GitHub](https://github.com/) which is online and allows sharing. Fourth, you're going to want to start tracking your issues and bugs for your projects reliably. Again, GitHub allows this functionality so if you do happen to go that route, it should be pretty easy to get going. Fifth, learn to create documentation for your projects. Create a user level document and a developer level document for even mundane projects. It is simply to get into the habit and pattern of professional development. Programming is a very document heavy discipline. You definitely want to get used to it. Sixth, you want to learn the tenets of good OO design. A great starting point is to start implementing [SOLID](http://en.wikipedia.org/wiki/SOLID). When you are constantly considering SOLID, you will make much more thought out decisions about how you are maintaining your code base. Seventh, in regards to the D in SOLID, install and learn a dependency injection product such as [SilkDI](http://www.silkdi.com). These are also called Inversion of Control (IoC) and they help decouple your code better. Eighth, learn all of the GoF design patterns and how they are generally implemented in Java. With knowledge of design patterns, you can both implement them in your own projects and be able to understand others' code that implements them more quickly. Not only that, they are the product of years of research and they will get you far rapidly. Ninth, learn an ORM like [Hibernate](http://www.hibernate.org/). I am not saying to always use it or that it doesn't have its problems. I am just saying learn how it works and get experience with it. Tenth, you mentioned web development. It's definitely important you know that. Learn HTML and css and then head over to [Play](http://www.playframework.com/) for a great framework on web development. You can also head over to [Divshot](http://www.divshot.com) for web UI building. So there you go. Ten things to get you to a professional level. It should go without saying that you need to be writing code every day at least a little bit. Work slowly but deliberately. It may seem like the things I listed will slow you down and they will at first but once you are set up and things are running smoothly, you will be rapidly developing solid, clean, reusable, robust code in no time. I know this post may be a little overwhelming but just take it a step at a time and try to integrate at your own pace. Build good habits for yourself early and they will pay off later. Oh, and as for a good project.... create a simple inventory tracking program that has both local UI and website UI with a common backing. I'm not saying do it right now but work toward it. Good luck on your adventure. *EDIT* Changed order of list from cannonpalms comment.
Eclipse. Its library of extensions just can't be matched. Anything you think of, there are multiple extensions for it. I've played around with IntelliJ and was underwhelmed. The lack of an incremental compilation slowed everything down.
The only thing I would differ: do number 10 first. Debugging is one of the simplest yet most valuable skills you will ever learn as a developer. No more System.out.println()'s all over tarnation trying to determine variable states. 
Good point. 
A real shame indeed but the improvements worth the break, imho. 
From a quick skim the top Google result seems like a good place to start: http://www.vogella.com/articles/EclipseDebugging/article.html - it's the same page that's linked to from the [Eclipse.org's Java Debugging with Eclipse - Tutorial page](http://www.eclipse.org/resources/resource.php?id=503), so that's also hopefully an indicator that it's a decent starting point.
Agreed - there really is no comparison between the two!
Make it a (realistic) project that interests you - personally I was far more likely to stick with something which I wanted to create, rather than something I felt that I ought to try to create. Think about your other interests (e.g. photography, logic puzzles (Sudoku etc), sports, etc), then think about something to do which ties in with that (e.g. photo viewer/editor, puzzle solver, team stats viewer). If you're looking to learn web development, look into Java EE - it requires minimal set up as the container provides all the good stuff for you, and JSF provides a clean separation between the presentation and logic layers.
I am an EE developer, and I'll throw in my two cents here. If you can do the following, you'll be on your way to being a qualified front-to-back web developer: 1. Install tomcat, resin, glassfish, etc 2. Install MySQL, oracle, or some other RDBMS. 3. Create a table(s) in the DB and fill it with data. 4. write a JSP page that pulls the data out of the database and displays it on the screen. 5. Use JavaScript to write an Ajax post back to the server to save the data without refreshing the screen. (hint: output your Ajax request in either JSON or XML for easy processing, whatever the screen would print normally is what the Ajax will read in). (Another hint: use jQuery for Ajax). Good luck. 
&gt; with all its flaws those flaws are long gone.... and they were never related to client&lt;-&gt;server connection security &gt; can still increase my online banking security Well, theoretically it can... by running their own software at your computer, they can at least try to detect keyloggers and other things that could be bad for your security. This is something they could never do with jscript or flash. It would be cool if your bank actually checked for viruses and keyloggers before letting you log in, but I'm not sure if they do this... I rather doubt.
Awesome post, FULL of info, most of which will be a learning experience for me. I did a git tutorial last night before even reading this. The inventory tracking program is a genius project suggestion. I've been working in manufacturing and warehousing for the past 13 years, so I know exactly how that sort of thing works. Thanks!
Had no clue this existed. I've been doing Project Euler in my spare time. 
You absolutely should. When you consider Android is running on Linux and OSX is running on BSD and so much development is done in the cloud I think the opportunities for people who don't know Linux are going to be in the "maintenance of legacy" department.
What are the superior refactoring capabilities? It's been a while since I looked, but last time I played with IntelliJ it appeared to have less or was at least on par with Eclipse. Curious, as I use primarily Eclipse, but the recent versions have been riddled with rather annoying issues, and am considering to give IntelliJ another try. 
I don't see how Java could do any of this.
Signed applets and signed web starts run without sandbox, so I don't se why not.
Java just can't check for viruses and keyloggers natively, that is something that can only be done by plugging into the OS, not to mention you would need administrator/root privileges to do it, which I wouldn't trust to any applet, banking or not.
&gt; Java just can't check for viruses and keyloggers natively I don't see your point. It's not hard to write some small part in C or C++. And since their applet didn't work on Linux previously, that's the hint of what they did. And yes, administrator/root privileges stand in the way, so it's still kinda pointless.
You see how would I go about doing this though? Like I've used Linux for all of five minutes. Would you suggest making a swap and doing my web browsing and stuf on linux? Or just do my development projects at home on linux? 
[atom heart mother](http://www.youtube.com/watch?v=DkGDi0XXsT4)
for java and c/c++ i prefer netbeans. here are my favorite things * visual diff is great for merges and even use it for non-code related things * version control markup is informative and non-intrusive. i use git and between it, the markup, and local history (believe that eclipse is strong in this regard as well), i can recklessly make edits and then sift for gold * macros work for most things * shortcuts are mostly consistent, eg i set alt-w as copy and it works in both the editor and the output window * code navigation is just incredible (i recently discovered shft-ctrl-b is "go to overriding methods"). i'm guessing that all the IDEs do well in this regard i've tried eclipse several times and have never gotten it configured to the point that the shortcuts were the same during editing (in several languages) and debugging nor felt confident that i'd installed the "right" modules i've toyed with intellij and use webstorm (the dedicated javascript version) actively for javascript. the javascript support in webstorm is excellent, somewhat better than netbeans though still a long way from java. but the IDE itself doesn't feel as professional. my 2 biggest complaints are that i use a macro to scroll 10 lines up or down - webstorm is very slow and it's behavior depends on the code that i'm scrolling past, and it corrupts files if they're included in the project by symbolic link and version control changes them behind it's back. fancy features are great, but if the foundation isn't solid you can't trust the platform 
took a quick look but didn't immediately see the hacks that you're talking about ... could you give a quick summary ?
Sadly there is no real list for Swing. Project JSR-296 was a good start (as a small Framework) but died when SUN decided to push more on JavaFX. I think the best way is to study open source code with good designs when you find them ! Actually I still base my apps on JSR-296.
Steps one to three are fine (personally I'd put in a step 2.5 of making sure you can display a page ok using data from a managed bean); from there on though this is outdated from an EE point of view. For step four, JSPs have been superseded by facelets, so use them instead. For fetching the information from the database there's JPA, so look into using that. For step five, [JSF 2.x make ajax updates a piece of cake](http://www.mkyong.com/jsf2/jsf-2-0-ajax-hello-world-example/), without the need to write any of your own javascript. I'm not saying it's not worth learning javascript long term, just that it's not needed at this level. With facelets in JSF 2.x, you can also use the excellent [Primfaces library](http://www.primefaces.org/showcase/ui/home.jsf) to simplify the ajax update part - it also provides nicer looking components than the standard faces library, and the first library I include in any JSF project these days because of how much simpler it makes things. If you want to want to surface data as XML or Json, there's JAX-RS that's part of the EE spec - again this hugely simplifies the task of setting up a service for getting information our of the system.
I'd go with [Sublime Text 2](http://www.sublimetext.com/) it has support for almost everything and what isn't there is easy to build a plugin for.
:) awesome
This depends entirely on the program in question.
There are two main ways to do that: * Run the connections in different threads. Each thread has its own execution context, and can run independently of each other and therefore perform requests in parallel. * Use an I/O multiplexer. This allows you to wait for a set of I/O operations to complete, instead of blocking execution for a single operation. Java provides this through the java.nio.channels.Selector class and other classes in the java.nio package.
I'm only about 6 chapters into volume 1, but I'm really enjoying Core Java by Cay Horstman and Gary Cornell. It assumes previous programming knowledge. My only issue with it so far is that there are no exercises to work through. I also hear Thinking in Java is the defacto standard on how to learn it though, but I don't know if it assumes previous programming knowledge or not. I started with C++ so the C++ comparisons throughout are helpful to me. If you're interested in Core Java: Volume I - http://www.amazon.com/Core-Volume-I-Fundamentals-Edition-Series/dp/0137081898/ref=dp_ob_title_bk Volume II - http://www.amazon.com/Volume-II-Advanced-Features-Edition-Series/dp/013708160X/ref=pd_sim_b_1
In the former case, I recommend instantiating an [ExecutorService](http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html) and giving it server requests as [Callable](http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Callable.html)s. You'll be left with a number of [Future](http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html)s, which you can then block on as work is done in parallel. No explicit thread creation needed. 
Hopefully you transitioned into using Sun-Style in variable naming and other conventions, at some point?
I used Eclipse, for some odd reason during this time I felt like renaming those folders to Source and Test. Perhaps an enum version of State should be added, the reason why State has int is so it can have multiple states at once. Something Netty didn't have was a unified API for NIO/OIO and TCP/UDP... I wanted to be able to hide all of this stuff behind a single API. I have all of the different implementations because depending on number of clients, how often they send data, and how large the data is, if it should be reliable, they might want to pick or even change at some point the underlying "library". When I wrote curity/taskaroo I was unaware of ExecutorService and ThreadPoolExecutor. After I was pretty much done I discovered them (they're relatively new)... but they are missing a lot so it wasn't a waste of time. Statastic is mainly for quickly and reliably storing statistics in a file over any periods of time. I have several programs that have a StatDatabase per metric, sometimes the statistic I'm tracking is something like money or time, sometimes it's # of events. This way I can do database.add( 1.0f ) whenever an event occurs and it takes the current time and inserts that stat into the database. You can then generate charts from the database to show how the metric changed over time. 
https://github.com/SpringSource/spring-loaded/commit/efa169fb8df46e842a47683e85ad5354098456cb The ``sun.reflect.Reflection.getCallerClass(depth)`` trick is incredibly fragile. Not only is it not guaranteed to be upwards compatible, it's not guaranteed to be present. There is no graceful fallback.
Hmmm, specifically? The only time I think I did something differently was naming the Source and Test folders.
Is Volume II an improvement to the previous book or is it a direct continuation? edit: I should pay more attention
For example, https://github.com/ClickerMonkey/falcon/blob/master/Source/org/magnos/net/Client.java#L38-L58
Ahh Okay. The answer to that is yes. I forgot I did that =P
Falcon is in the middle of a rewrite for the most part, I'll make sure to correct that.
I added EnumState, thanks for the idea! https://github.com/ClickerMonkey/curity/blob/master/Source/org/magnos/util/EnumState.java 
Yeah I've been using FindBugs recently, thanks for the input.
threads
It's far more important that the OP learns the basics before they start using tools that hide the details. Eclipse is a fine tool once the user has a good understanding of the basics (as indeed are any of the other IDEs or development aids out there)
A NullPointerExceptions occurs when a program tries to access information that is not available at that moment. It essentially means that there's an Bug in the game's code. There is nothing you can do to fix this, best inform the developers! 
Thanks for the concern! Part of my project was actually open sourcing it all (I made a website where you could download them). The university only cared when you decided to publish your paper, they of course wanted to make sure they were in there.
I couldn't believe that a *student* project would be owned by the university like this so I searched for policies describing this but couldn't find any. Do you know of any examples where a senior project was property of the university? I'm looking for written policies. Thanks
What is this horrible dogshit, and how did it find its way to Reddit?
Spring, jpa. 
Spring and Java EE technologies (JPA, JAX-WS, JMS, JMX, etc) can be very helpful.
Spring (there is A LOT here), JPA, Hibernate, REST &amp; Soap web services, how to use the concurrency APIs. Not sure about the bay area but general "java webapp development" seems to be a pretty hot market right now.
a full stack framework like grails or play (though I think that's moving towards scala...?) might help you get productive quickly, but you should probably then go backwards and delve in to the guts of the framework a bit more. grails is mostly springmvc under the hood, but they don't advertise that fact very much on the main site. but because it uses groovy as a language, you can use your dynamic language background from php vs pure java.
jQuery and JavaScript. 
Spring, Hibernate/JPA is a great place to start. I am in the minority it seems but I also love JSF with Primefaces. You may want to look at other evolving languages on the JVM at the same time. Scala is my favorite and it allows you to leverage existing java libraries and frameworks. Edit: Spelling
Some examples (all from the UK because they are the first three I found): * [Coventry University] (http://www.coventry.ac.uk/Documents/Registry/Regulations%20General/Appendix%2013%20GR%20Student%20IPR.pdf) * [Oxford University](http://www.admin.ox.ac.uk/statutes/790-121.shtml#_Toc28143157) * [Bristol University](http://www.bris.ac.uk/secretary/studentrulesregs/intelprop.html)
[Think Java: How to Think Like a Computer Scientist](http://www.greenteapress.com/thinkapjava/) is a great free book!
&gt; I am in the minority it seems but I also love JSF with Primefaces. Don't think so that you're in the minority, there's isn't any one web framework that dominates in Java, but JSF is almost always in the top tier. See this somewhat older comparison I made between JSF and Tapestry, which also shows how JSF rates against other web frameworks: http://henk53.wordpress.com/2011/10/12/reply-to-comparing-java-web-frameworks Specifically PrimeFaces (which indirectly means JSF) ranks highly here: http://devrates.com/project/list?query=%5Bweb+framework%5D 
&gt; play (though I think that's moving towards scala...? It's not moving towards Scala, it HAS moved to Scala. Play is completely Scala focussed and left Java developers out in the cold. Yes, by virtue of the VM you can still sort of use Play 2 with Java, but Java is a second class citizen on Play and you almost can't escape having to learn Scala. 
++ to this. I thought Play! had promise, but then it was Scala or bust for better or worse. Now, as is the case with so many things, I feel Play! is falling behind in favor of Lift (at least, that's my perspective from my buddies who are Scala nuts).
I love Spring as much as the next guy, but JEE should not be left off of the list. I'd also emphasize those technology names with the focus on some sort of DI container (Spring/Guice/CDI).
I'm in Austin, and it seems you can get an interview at least if you can spell Java.
No.
[Java: A Beginner's Guide by Herbert Schildt](http://www.amazon.com/Java-Beginners-Guide-5th-Edition/dp/0071606327/ref=sr_1_1?ie=UTF8&amp;qid=1371944475&amp;sr=8-1&amp;keywords=java%3A+a+beginners+guide).
Thank you
I got a *job* because I could spell Java (in Harrisburg). They looked at my r√©sum√©, and asked when I could start. I've learned my lesson... Imagine a system built by people whose only qualification is that Java is on their r√©sum√©....
No problem. It's getting me through college even though I'm enjoying my outside-of-college activities a bit too much. ;)
Don't understand why this is downvoted. While not a Java specific technology, it's extremely common to have a web interface on a Java server side app. JavaScript is an important skill for *any* developer, and a great way to improve your marketability in the Java job market.
thanks - i didn't follow it closely, but knew there were some rumblings in that direction when play2 was being worked on. 
Read Effective Java. Frameworks come and go, having good core java skills will last for many many more years.
I think that you meant to say `AbstractPaperFactoryBeanUnitModelImplFactoryImpl`
Spring really isn't essential at all. Legacy stuff is made with it more than new projects. You could skip that framework all together. As another poster said, take the the time to learn effective Java. I'd say brush up on your OO skills, patterns and the likes. As far as libs go, Guava, Guice, EasyMock (or some other mock library), Junit, and some JPA implementation would be a great base. The rest is really too specialized to bother learning without a project to back it up. Edit: Don't forget Maven, that's rather getting essential.
Learn the shit out of spring framework That and some kind of dao like hibernate, maybe pick a web-app server to familiarize yourself with like weblogic or jboss. I've also had some luck lately getting government work with portlet knowledge. Common annotations and interfaces, don't bother with frameworks specific when you can learn generic like hibernate has it's own annotation set and that hbm.xml mess, but it will happily take simple jpa. Or pretty much every message queue has it's own funky jms implementations pop the connection factory and topic/queue up in the container jndi them in and just call them the jms generics, or just proxy them. Your probably going to want to learn ant too no reason you can't build java with something like make, but for some reason every java project I've seen likes ant. EJB's maybe too, they've gotten better since ejb3.0 came out doesn't make me want to vomit anymore, just haven't seen anyone using it.
Never seen a java guy write javascript I'd call pretty, that language isn't meant to be written very object oriented. :( Java guys also get all kinds of cranky about thinking people are confused about javascript and java not being the same thing.
Object Oriented Programming and type safety 
Copy paste is not to be underestimated as a skill. If you blow 2 days on a component johnny down the hall did something similar too 3 weeks ago, not copying as much as you can is just wasting time. A great standard for well written code is, how easily it can be copy pasted into something else by someone else.
You said "besides core Java" but don't forget to really cover core java (I assume you mean Java SE). Core Java contains a lot of technologies, (actually many of these came from / part of Java EE) Not sure if this answers your question directly, but I would do this if I would just have started learning Java: **Read the Java Tutorial**(http://docs.oracle.com/javase/tutorial/) and do all the examples. You can skip some obsolete / less used technologies such as Applets [1]. No matter what, don't skip the "Essential Java Classes" track: http://docs.oracle.com/javase/tutorial/essential/index.html **Then to Java EE** - read the entire official tutorial. do all the examples. http://docs.oracle.com/javaee/7/tutorial/doc/home.htm What to focus on? I would include JAX-RS, CDI, Servlets and JSPs (before you go to JSF, that I personally don't use often, but it's popular in some places, so I won't skip it) then don't skip EJB 3.1, it's terribly useful. Then JMS 2.0, JAX-WS. JAXB, also learn how to use Jackson to return JSON from JAX-RS automatically from POJOs. **Then Spring Framework**, especially MVC, Security, and perhaps also Data, Batch and Integration. **I would also get familiar with some useful libraries** - mainly - Google Guava, Apache Commons, Joda Time, JSoup, will save you some time... **Then read start to end 2 books** - Effective Java (2nd edition), and Java Concurrency in Practice, But only after you wrote at least a few projects and tried to do something yourself otherwise these books might not "sink" at first read **Other Popular Java Technologies**, Hadoop, Storm, Solr, especially if you like big data I would also look at Dropwizard, and all the highly starred Java projects at Github, just to get familiar they exist and what they do. [1] I wouldn't skip Swing completely by the way , there are some heavy weight financial apps that need desktop capabilities and use Swing in trading, so although it's an almost forgotten realm, it might be useful. You can probably skip JavaFX / Applets safely... 
Bullshit. It should be copy-pasted; It ifs good code its reusable from the jar. Thats what maven is for.
Thanks to everyone for being here giving your opinion :)
Hi, I completely agree with this post. Learn most of the things mentioned above. However, I would like to add some things: 1. Learn SQL databases and learn them well. This is not Java, but most java (or non-Java) systems have databases in the backend, and most bottlenecks will be database related. So good SQL skills are essential. 2. Learn some Object Relational mapping, JPA and Hibernate or such. It can help with database access. 3. Learn automated testing, junit and related. Selenium if you need to deal with rich web applications. 4. If you need to do heavy AJAX and hate JavaScript, GWT and related frameworks can be useful. And practice, practice, practice. Get as much experience as you can. Preferably on the job while getting paid for it, or else do some pet projects. If you feel you learned everything you can at your current job, and you feel that you can relatively easily get another job (and a bigger salary as well), switch. Working for different companies you will learn different approaches and different ways of doing things. Different technologies as well.
No problem. Have fun.
LOL
Maven &gt; ant, some would argue Gradle &gt; Maven. If learning ant, at least pick up Ivy to support dependency management.
Yes, PrimeFaces mainly. But there have been other great contributions to the ecosystem as well like PrettyFaces (extensive rewrites of URLs), OmniFaces (swiss army knife of Guava like utilities), and things like CODI (CDI based extended scopes). Also don't forget that no matter how great PrimeFaces is, it doesn't do what it does on its own and strongly leans on the innovations done in the core JSF framework.
This is what I hear too. It's a bit ironic. Scala put the proverbial dagger in the back of its Java fan base to make a quick transition to Scala when it learned that Scala was becoming the latest hype. But the Scala community itself isn't that eager to adopt Play at all, and I've heard from more than a few of them that they much prefer Lift, despite Play being the official blessed framework by TypeSafe.
I agree that learning Scala is good. It's a very interesting language for sure. But... despite being "cooler" in practice Scala is not really more productive than Java. We did some tests here, and despite popular thinking it just isn't. There were some academic studies (use your Google Fu to find them) that came to pretty much the same conclusion.
&gt; just haven't seen anyone using it. Probably depends on your perspective of the groups you happen to live in. I see them used all the time and everywhere. 
Well that was painful to read.
[We seem to get a lot of these posts](http://www.reddit.com/r/learnprogramming) The [official tutorial](http://docs.oracle.com/javase/tutorial/) is very good.
Thanks I'll try that tutorial. I wasn't sure where I should have asked this question so I just posted it here.
By following a slew of links I was lead to [magnos.org](http://magnos.org), which has a link named Haxel. There's a post on [java-gaming.org](http://www.java-gaming.org/index.php?topic=27647.0), where I go sometimes, about a game called Haxel, linking to the same website as the link on magnos.org. Some quality stalking indeed. So... are you [dreamwagon](http://www.java-gaming.org/index.php?action=profile;u=139031) on JGO?
I've never known any organization with anything by contempt for EJB. True or not, they've all preferred Spring.
A little investment in stuff beyond coding can be valuable. Learning source control (git is hottest, a lot of places still on SVN or a proprietary repo), build tools like Maven, editors (Ecliplse, IntelliJ).
Might be just the circles you happen to dwell in. I encounter EJB (and CDI) at a lot of places. Yes, there was a dip after people realized how bad EJB 2.x was and before EJB 3 became universally available, but now lots of places are using EJB and CDI. Of the new serverside Java projects that I saw started in the last 2 to 3 years I found over 70% using EJB, CDI and JPA. Far less new projects are using Spring. Many people I talked to over the years have mentioned that CDI is overall a much nicer programming model than Spring, and CDI pairs pretty well with EJB.