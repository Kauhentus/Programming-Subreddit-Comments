Isn't unboxing, doing an operating, and reboxing expensive?
Removing primitives would yield significant speed and memory usage penalties. Also what about backwards-compatibility?
Talking about static linking in that context is missleading ... OSGI does not remove the classloader and so cannot do static linking. Static linking is basically a uberjar. Would be nice if osgi could do static modularity for a start. Oh wait that's what jigsaw is trying to solve...
Those cache misses would be my first concern.
I think the goal was to remove the need for autoboxing altogether and make the wrapper classes behave the exact same as the primitives at the JVM level. This would be part of adding user-defined value types as well.
[This](http://www.techempower.com/blog/2013/03/26/everything-about-java-8/) one covers everything nicely.
No it's perfectly fine.
Mostly depends on the problem domain. In general you want an instance to refer to a logical instance of some object. If you have to create 'fake' instances just so that you can call some method on it. Chances are the method does not make much sense as an instance method, it may be better suited as a static method on the class or as a separate function. 
I don't know about best practice. Here's how I'd do it: You would either need a second "executable" (jar) to be able to update everything, or you would have to kind of create a patch tree with the changed files and then use a batch file to copy those into the real location (start batch file from jar, System.exit, wait-statement in batch file has counted down 2 seconds or so, file copying / deletion, launch new jar (in old place)). The batch solution can also update a potential updater (which means that the updater can, in turn, just be part of the application "exe"). Hm, but if an updater.jar is used, there could just be a second updater_.jar, and those are just used interchangeably somehow (or using a counter / version number in the file name), so you can update everything incl. the updater via a dedicated updater, no batch tricks. Seems better. The files could be on a server, e.g. private Website or DropBox folder. A single small file would describe the version number, or this could be solved via directory names and directory browsing/seeking.
2 jars. First looks for new version and downloads if necessary. Then kicks off jar 2. If your updater needs updating you are SOL though.
Object allocation is really quite complex topic and exact implementation depends on GC. However this seems as a good starting point: http://hg.openjdk.java.net/jdk8u/jdk8u-dev/hotspot/file/8538a606a105/src/share/vm/gc_interface/collectedHeap.hpp#l319 
I don't see the purpose of making getValue () synchronized. All that is going to do is make sure one thread at a time is calling the getter. The risk of "stale" values is still there.
You should make both methods synchronized, but not by just adding that keyword. Instead, don't add the keyword and don't use volatile. Just surround the content of the methods with `synchronized(lock){...}` and put `final private Object lock = new Object();` at the top of the class. Now you're absolutely thread safe.
This is the best answer and yet it has the less karma -_-
Sure it's ok for a class demo. However, following the single responsibility principle, this is clearly a bad practice. 
[See this.](http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/package-summary.html#MemoryVisibility)
If all we're dealing with is a single counter wouldn't an AtomicInteger be simplest (and still safe) solution?
I do not know about AtomicInteger. Even volatile might do the trick here - I keep forgetting the exact implications of volatile, no matter how often I read about it. In my comment, I assumed that the presented problem was not *the* concurrency problem of a project but just an example, and if there's more concurrency stuff in the project, or if a person is just beginning to learn about this stuff, just using the synchronized(lock) solution is the hammer that kills all possible race conditions. Not all deadlocks, though.
A synchronized method is the synonymous to a `synchronized(this)` block around the method contents, so that would have the same effect for thread safety.
~~What makes you say that, I wonder? It's not true. The difference is profound. A method with the keyword "synchronized" can not be executed simultaneously by different threads. Good thing, right. So, what do we do if we have several methods that access the same data?~~ Fail.
It is true. A `synchronized` method effectively has a ` synchronized(this) {...}` block around its contents. So if you have several `synchronized` methods in a class, they would all be synchronized on the same object (the class instance whose methods you're accessing).
I asked because I thought I might be missing something here, but you're right, for non-trivial situations a proper synchronized block is the way to go. OP may also want to try a [ReentrantLock](http://stackoverflow.com/questions/11821801/why-use-a-reentrantlock-if-one-can-use-synchronizedthis). Volatile will not be enough though. What it does is prevent threads from locally caching a variable and makes read/write operations, even on 64bit ints, atomic, which is not enough for an *i++* since it translates to a read-increment-write cycle. 
WTF. Looked it up: I was working with wrong knowledge all this time. The only thing that would still make wrapping into synchronized(){} blocks like I described meaningful would be that the lock would really be private. In the case of synchronized methods, someone could theoretically lock on the instance from the outside. But that's kinda not really likely. Thanks for insisting.
I'm sure optimizations could be made. And forced backwards compatibility is crippling design in the first place -- look at type erasure itself.
Yes, exactly. It's not a "drop primitives and suffer the consequences" change.
Using _ as a keyword to support Scala-like closures would be pretty neat.
I find many CS1 examples where static methods would have made more sense, but non-static methods are shoe-horned in, ostensibly for the reason "because we need to teach OO principles". In my own programming experience, I have maybe 50% of my methods better-suited as static (they process a list-of-object, etc.) And some of the places where I *want* to use objects, Java don't let me (e.g. extending scanner, or array-of-X, etc.) So w/o knowing the code presented, my guess is that your observation is likely correct: static methods may have been more appropriate for that example, and it was done O.O. because that's what's one is expected to teach. (Btw, as a teacher of 20yrs -- it takes effort to come up w/ good examples where the illustrated-approach really is the correct one for that actual problem, and the problem isn't filled with tangential, distracting issues.)
&gt;I haven't written concurrent programming in Java that much, but I remember reading that changes to non-volatile variables might not be immediately *visible* to all threads, hence while `synchronized` will make the `increment()` method atomic, IIRC, it also needs to be `volatile`. You remember correctly. To ensure both atomicity of the increment operation and visibility of the result, you need either `increment()` to be synchronized and `value` to be volatile, or to make both of `increment()` and `getValue()` synchronized. If you make both methods synchronized there is no need for the variable to be volatile, because `synchronized`, like `volatile`, creates a *happens-before* relationship that ensures threads will see each other's changes. There is nothing wrong with writing `value++;`, by the way; there is no need for `temp`. In this specific case though, an [`AtomicInteger`](http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html) would neatly encapsulate the needed functionality, so would fit better, and may well perform better than explicit synchronization.
Someone who was wrong and changed his mind when proven wrong. I wish there were more people like you. Have an upvote.
Unless you want to re-invent the wheel use [getdown](https://github.com/threerings/getdown/). It provides exactly what you need. I am using it myself &amp; am quite happy with it. 
I think you should provide more information about your code and java version for this to be answered properly. Care to elaborate? EDIT: not sure why this got downvoted. if you need help with counters or compare-and-swap, use Atomic* classes. if you in the need for concurrent collections - there are solutions there too. if you need to synchronize a the whole class for some unknown reason - use solutions above. if you need something like a read-write lock or wait for couple of threads to finish calculation (wait, join, cyclicbarrier). if it's java 8 and dealing with collections maybe you should think about using streams.
volatile would not be sufficient. If you made it volatile you could avoid synchronizing on the getValue function, but you could not avoid synchronizing on the increment function. The reason is volatile ensures the happens before relationship (and thus cache coherency), but it would not protect against a read then write race condition. Two threads read the value as 1, they both increment to 2 and commit that. When really the value should be three. AtomicInteger solves this by doing compare and swap operations under the hood. Thus making it thread safe without synchronization because it just keeps trying compare and swap operations until it is able to commit an accurate value for each thread.
AtomicInteger and the other Atomic classes are *really* nice. I use them a lot when I just need a simple thread-safe value.
EDIT: I actually do know a decent amount of CSS but I figured it was just "selecting" the html tag and taking it in as it was in that file. This worked though thank you so much and it makes mores sense now that I think about it.
Just noting that it would only "really be private" if you synchronize on an object local to the method or private to the class, and not `this`.
You're right. In my original comment on which this sub-thread is based, I synchronized on a private class field of type Object.
Would have* my good man. I suppose that's just a different way of doing things.
Codingbat is a great website, you can practice or refine your skills there.
Reminds me of Express.Router (NodeJS). Looks nice!
I'm guessing the whole thing is less than a hundred lines. In which case don't obscure what is trying to be taught with a lot of ceremony. There is nothing wrong with you asking the question or being more advanced though in your own work.
Go to https://www.hackerrank.com/ and create an account NOT USING YOUR REAL NAME. Start working through the problems. Why? A lot of companies now will give you tests from this site to decide if they want to hire you. It only makes sense to do as many of these problems as you can. Why not under your real name? It allows you to grow with the possibility of making bone-headed mistakes.
Not sure why you're being down voted. Webstart seems like a good option for this sort of thing. Why is it not good enough? 
A good program that can teach you a lot and get you warmed up writing code is an interactive game/story. Whenever I learn a new language I write one. For example, start of the program by asking the users name and prompt them for questions about an adventure or story, you can make this story as advanced or simple as you want. I always find it fun, you can scale as little or as much as you want and I always know I'm going to end up learning a lot more and be much more rounded in my experience than if I just answered a couple programming questions here and there. Give it a shot, have some fun and challenge yourself. Let me know if you need ideas on how to make it more advanced, for one idea, you could implement a simple DB with JDBC and save all information from the adventure or character in there as you go. 
Not mine, but helpful https://github.com/karan/Projects 
Whoever is downvoting is a douchenozzle. This is *exactly* the use case for JWS. It's a bit of a pain in the ass to set up these days what with all the code-signing and permissions-model stuff, but it works cross-platform, and it works well.
Method-local objects are inherently thread-local, it makes no sense at all to synchronize on them (maybe you meant a reference type passed in as parameter, but for obvious reasons that isn't local to the method).
&gt; In this specific case though, an AtomicInteger would neatly encapsulate the needed functionality, so would fit better, and may well perform better than explicit synchronization. It doesn't exactly encapsulate the locking. AtomicInteger and related classes ensure thread safety *without locking*. It is basically a wrapper around Compare And Swap instructions in the hardware. On the x86 this is a single instruction. It should perform far better than any mechanism that does the same using locking. 
Use JavaFX. I believe it's officially replacing Swing, although I don't have a source. 
JavaFX so hot right now. JavaFX
Very similiar to http://www.sparkjava.com/ :)
&gt; JSF is a component-based web UI framework like ASP.NET for J2EE, NEVER EVER trust advice from someone about Java who uses the term "J2EE". It shows a deep and utter disconnect with the modern reality. 
Exactly what i was looking for! 
Lower case J should be banned too (maybe in Java 10?). I don't like "j" ;)
&gt;simply invoke the application JAR's **main** method, usually with a new class loader. If you do this and run into windows DEP problems it is possible to modify the system classpath using reflection (which at one point solved the DEP issue). Definitely not standard practice.
:]] some people have yet to learn to ask "but why do you need that?" before coming up with solutions. One learns it the hard way. Here's a very educational story on the importance of "whys" when someone asks you "how" to do this or that: http://thedailywtf.com/articles/Papering-Over-the-Problem p.s. omg they finally redesigned it too 
Project Euler?
You need to know at least a small amount of elementary number theory for many of the problems. 
What IDE are u using?
Honestly writing code without some guidance isn't the most efficient way to master the finer points of a language. I would get a copy of "Effective Java" and write some code that implements the concepts explained there. You'll learn some awesome techniques very quickly.
You don't really make programs though. You find one answer to one problem. Good for implementing mathematics, but not for creating programs.
Haha thanks. I enjoyed it.
Eclipse-Kepler; jdk1.8
Yeah I had e(fx) in one of my tabs open. Getting ready to download that before I stepped out to make errands. Anyway, I'll check out Luna and Google e(fx) too. Thanks this does help a lot actually! :] Good luck with your project as well!
[What's New in Java 8](https://leanpub.com/whatsnewinjava8/read) (blatant self-promotion)
the java light weight game library has.... Something like that I think.
you*
I would definitely recommend starting with a program to generate cellular automata, like Conway's Game of Life. Check out /r/cellular_automata for code examples, and a community who could help you out with any implementation issues. These algorithms require reasonable computation speed, windows and user interfaces, and a little imagination. They're a *programmer's toy*.
A stale value isn't always a bad thing, but AtomicInteger is probably a good fit here if this class remains this simple.
This is awesome! All my HTML, XML, CSS, Java source code in one place!
Might want to take a look at e(fx)clipse to get javafx up and running with eclipse
i was able to open a Java FX project, but when I opened the main.java file; i got the red x. WTH?
If you get an interview with Amazon.com--for example--they will assign you a problem on this site. Your score will determine if you move up the gauntlet.
ahh yes, the old IDEA bang-er-rang-aroo
I will agree. I did my last work project in JavaFx because I wanted cool UI without all the hassle of AWT. I could not be happier with it. It was pretty easy to pick up the theory of how it all glued together, and scenebuilder made creating the UI as easy as WindowBuilder does for SWT. Totally worth the effort to learn. Get the Oracle sample projects They show you a lot of really good example code.
While we're dropping coding practice sites, I want to mention http://www.talentbuddy.co I found it about a year ago, there's some interesting problems to solve there. 
it was at java one
You can hook win32 calls in order to achieve this. Here is a relevant SO article: http://stackoverflow.com/questions/2389156/calling-win32-api-method-from-java
I don't know what happened but it appears that the tutorial has been deprecated. You can still find it on github: https://github.com/spring-guides/deprecate-tut-web
Why so many method signatures? Why only five parameters? It's very clear you are new to programming. There's too much advice people could give you if they actually looked past the readme file so I'll just say the best advice overall is to revisit this version once a year until you can make your future self chuckle. 
It's great but it's still a DAO
You can have a more model-centric architecture, without services and DAOs. The advantage is that you will have a simpler architecture and more object-oriented, with richer domain classes (models). Note : In this kind of architecture all your business logic is in your models. The disadvantage is that you will not be able to separate technical aspects (call to entity manager) from your pure business logic. But it's already the case when you use JPA annotations on your models. Exemple with Play Framework (1.x) : find : Post aPost = Post.findById(5L); // Post extends Model with special JPA methods List&lt;Post&gt; posts = Post.all().fetch(100); //or Post.find("byTitleLike", "%hello%").fetch(); //or Post.find( "select p from Post p, Comment c " + "where c.post = p and c.subject like ?", "%hop%" ); save : Post p = new Post("title", "description"); p.save(); A simple way to achieve this if you don't use this framework and if you don't want to code a generic Model with JPA helpers (not easy because of generics issues) you can pass an entityManager as parameter , e.g.: Post p = Post.find(em, "byTitleLike", "%hello%"); p.save(em); // or em.save(p) Source : https://www.playframework.com/documentation/1.2.x/jpa 
A shopping cart system with fake payment processing and fake products in it, that sounds like good practice. 
Years ago Java came up with the Pet Store application to showcase how to use java to build a real application. I'm sure there are many companies that are using something as the core of their business software that once started out as the Pet store demo. It has been updated, changed and ported to about every technology stack involving the jvm. 
A "Todo list" app is pretty much the real "Hello World". Store the lists in a DB, retrieve/save them using Spring MVC controllers, you can make the controllers RESTful and invoke them from JS, restrict access for each user to their own TODO lists, and of course wire everything up using DI (services, repos, controllers).
Try [repository pattern ](http://martinfowler.com/eaaCatalog/repository.html) and the Domain-driven Design approach.
Spring Pet Clinic
Swing is dead. Use JavaFX.
Can't you just write it yourself? "I need a library" just sums up a lot of people's dislike for Java.
CQRS is a completely different approach - especially if you want a system that scales.
https://github.com/spring-projects/spring-petclinic/
If you use NetBeans IDE there are lots of sample JavaFX GUI sample projects build in to try and it is all plug and play.
The EntityManager himself is a DAO. Just don't create them yourself. 
This is straight out of a university third stage computer science class. Might be a good place to start C grade submission To get a pass in the assignment, your application must include the following: 1. A DAO interface that supports all CRUD operations. 2. An embedded database with at least two tables linked in some way (e.g. a one-to-many relationship). 3. A DAO implementation that uses Spring’s framework support for JDBC (i.e. use of JdbcTe- mplate or NamedParameterJdbcTemplate). 4. An aspect that serves a useful need in the application. 5. An application context initialisation script (XML document) that arranges for a Spring container to be populated with necessary beans, and with dependencies injected. Draw on XML namespaces and/or annotations as you prefer. 6. A REST Web service interface. The Web service must support the basic HTTP methods: Get, Post, Put and Delete for operating on your application’s resources, and the implemen- tation should ensure that the DAO is used to interact with the database. 7. A RESTful client that consumes your Web service. 8. SLF4J logging, binding to a Log4J implementation. 1 B grade submission For a B grade, your application must meet the requirements for the C grade submission, but with the following differences: 1. In place of items 2 and 3 of the C grade criteria, your application’s DAO implementation should use the Hibernate ORM framework. Additionally, your database should involve at least 3 linked tables. 2. The application should demonstrate appropriate use of transactions, and transaction re- quirements should be specified declaratively. A grade submission An A grade submission extends the requirements for a B grade application. For an A grade, your application must be accesssible to end users via a Web browser. The browser-based functionality should allow users to: 1. View your application’s data. 2. Initiate execution, using a Web form, of some sort of business logic that leads to data in the database being updated. 
&gt; Why so many method signatures? When using a generic handler interface with varargs the compiler will match a lambda signature only if it has exactly the number of arguments (the vararg count as 1), so I had `(req, res, params) -&gt;` where `params[0]` is the first argument and so on. Named arguments seemed to me a good idea, and having a signature without arguments (just `(req, res) -&gt;`) is nice. &gt; Why only five parameters? Pretty urls don't have that many parameters, if I (or someone else) will need it I just made new interfaces and regenerate the code signatures. &gt; you can make your future self chuckle It will be a nice thing to do, because it's the sign that I have got a lesson learned. ☺
awwwwww yeahhhhhhh! Guess what I'm gonna do this weekend!
I have used the OpenCV library to hook into the webcam. It looks like their main site, [opencv.org](https://opencv.org), is down for some reason but you can get the files from sourceforge: http://sourceforge.net/projects/opencvlibrary/files/ . 
Write a few games. There's so many things you could do and write, and lots of potential for practice.
Why would you want to do that? Code competition is a great feature!
I have been using http://webcam-capture.sarxos.pl/ with rather good results.
Learning Java is not about memorizing names of all the functions. Being a good programmer (in whatever language) means knowing when to use certain patterns, libraries, how to structure your code etc. and knowing what to avoid. You can only get there by writing a lot of (initially bad) code. Anything that makes you more productive will help you get there faster. Instead of memorizing the standard library you should spend some time to learn how to use all the features of your IDE. It will save you a lot of time in the long run. Many people complain that Java is very verbose. That might be true but if you know how to use your IDE that's not really a problem. Of the code that I produce at work I type probably less than 25% of the characters - the rest is auto competition, smart code generation etc.
As i said later it could be helpful, but good programmer can write code on piece of paper. And in schools you dont have something like "auto tipping shit" so whenever teacher gonna ask me anything i gonna say something like "FUCK YOU DUDE GIMME IDE BECAUSE IT SAYS WHAT THAT DO"? I dont think so thats why im asking HOW TO TURN IT OFF.. not how to USE IT
Use a simple text editor.
&gt; good programmer can write code on piece of paper. Bullshit. Good programmers know how to solve problems *using the appropriate tools*. &gt; And in schools you dont have something like "auto tipping shit" so whenever teacher gonna ask me If teachers grade you by knowing the standard library then you're on the wrong school. &gt; I dont think so thats why im asking HOW TO TURN IT OFF.. not how to USE IT There is also another thing that good programmers have in common: they know how to use Google. Maybe you should start practicing that as well.
No. Most of the excellent programmer I know of would be completely unable to write a simple Java program on a piece of paper. However, to would know a lot of various concepts and WHERE to find information and tools to use them. Being a good programmer is not about knowing your API by heart (it might come as a side effect). It is being able to abstract a problem, decompose it into smaller pieces and then glue then together with the most appropriate tools you know of.
He did need a library. He can't do this in vanilla java because this needs platform specific APIs. Having a lot of libraries is one of the best parts of Java. 
&gt; Imagine if you are seraching for job and in the interview boss ask you question like "how do you declare #!something!#" what would you say? I type letter "x" and answer comes out? thats stupid. No, the interviewer is stupid and you probably don't want to work for people like that. The purpose of an job interview is to find out if the candidate will be able to do the job. At work you have an IDE so asking to write code on paper during an interview is retarded because it has nothing to do with the potential work. Most companies know that and if they require a coding test as part of the hiring process they either give you a solve-at-home exercise or provide you with a computer with an IDE.
A DAO you don't have to write or maintain 
The Java EE tutorial :P
Ugh. May I question the why of all of this ceremony? Why can't you just import the project you are reviewing directly in Eclipse?
I've made many text based adventures before and its nothing more than using a scanner and if statements. What did u have in mind to make it more complicated?
Why not make a simple gui with buttons instead of a console based app?
I wanted to put out there, that I work the IT side of JRE deployments. Scripters make a setup package that installs multiple JRE packages on to a system and drops 3 files in &lt;Windows-directory&gt;\Sun\Java\Deployment. Right now I have in dev a JRE 8u25/7u25/6u23 install in the works, with a deployment.properties file and the Deployment Rule Set file that tells to run an RIA, run a RIA with 7 or 6 or default to Java 8 if not in the ruleset. There are several ways to drop the 3 files post install, login script, GPO policy, or Microsoft SCCM.
I may be misunderstanding your question, but you could consider just using JDBC directly. If that's too low level, you could use JPQL in JPA.
I get you're trying to be funny and make the course fun and relatable, but you have **Way** too many memes on the page, half of it is pictures of cats, horses, and other memes, distracting from the main content, and the horse programmer thing....why was that even in the article, it's like you're forcing jokes
Thanks for the feedback :) point noted
Can you expand a bit?
You gotta be creative, incorporate wild animals or beasts to fight, all of which are extended from an abstract class like Beast. You could get super complicated if you wanted, all you need is the imagination. Try using a DB as well to store the adventure data and use SQL statements to pull out what days you would need. I can't tell you exactly what to do cuz it's supposed to be open ended and all what you make of it but it can definitely be more than just if statements and a scanner.
You need at least Java 7.
Ok how do I update my Java6 -&gt; Java8 in Eclipse? Right now only JavaSE6 is displaying as the only option. I've all ready downloaded Java8. [screenshot](http://imgur.com/tcV84Cj)
Now this is life!
The 'oldlast' you're referring to is actually the "old last", ie the last element in the list before the enqueue. It's actually just another reference to the last element and the reference exists only in the enqueue method. Let's say you enqueued 1,2,3 and 4 into the list, your list now looks like this: 1-&gt;2-&gt;3-&gt;4&lt;-last Once you enqueue 5 into the list, this happens (in steps): 1-&gt;2-&gt;3-&gt;4&lt;-last,oldlast //both last and oldlast point to 4 1-&gt;2-&gt;3-&gt;4&lt;-oldlast-&gt;5&lt;-last //oldlast points to 4, 4 points to 5, last points to five 1-&gt;2-&gt;3-&gt;4-&gt;5&lt;-last //oldlast is destroyed after the method exits, as it is only a locally declared reference Hope this makes sense.
Of course Gates is not going to explain why Java was a threat. Write Once, Run Anywhere would always be considered a threat. That's why Microsoft quickly came out with J++, which contained Windows-specific extensions of Java 1. They were trying to make it run better on Windows. But they quickly got slapped for that.
Came here to post this, you beat me to it!
explain? I don't get it. I don't use Spring.
Check out KryoNet for a networking library + serialization: https://github.com/EsotericSoftware/kryonet A complete and very simple chat server / client + GUI: https://code.google.com/p/kryonet/source/browse/trunk/kryonet/examples/com/esotericsoftware/kryonet/examples/chat/ 
This video is part of a lawsuit that Sun brought against Microsoft because Microsoft refused to allow the official Sun JVM to be packaged with Window95/98/etc at the time. The concern was that Sun would create an alternative layer over Windows (and the IE browser) via the jvm. At the time ActiveX was Microsoft's browser plugin technology that allowed third parties to leverage the (IE) browser (and the desktop) and this competed directly with java's browser plugin for the jvm. Sun's complaint was that Microsoft was engaging in anti-trust practices by packaging their own unofficial jvm with windows. At the time, Java on the desktop seemed like it was going to be a real game changer; Leverage the underlying O/S to handle the colossally tough job of unifying peripheral drivers under one (windows) API and then create a 'compile once, run anyware' abstract layer over it with the JVM. The lengths to which Microsoft went to throw sand in the gears of Sun were as follows. First they created their own JVM which was buggy as hell, didn't respect official sun libraries, and of course had its own microsoft added tweaks to it. Secondly they created an entirely new language called J++ that was in every regards exactly the same as Java. They then integrated J++ development into Visual Studio and pushed this as the standard way to develop Java (Borland was all but dead as an IDE at this point leaving VS as the defacto IDE.) Windows developers that were trying to learn java at the time found that VS would change library import statements in their .java files to microsoft specific libs so that they only worked on the microsoft jvm, effectively destroying the whole compile one, run anywhere design. Driver support on linux was abyssmal and so java on the desktop in linux was not a factor. Mac support for Java on the desktop was also a moot point because Apple simply had no market share even though they had driver support because of their closed hardware design. The lawsuit was dragged out for years until it was basically a moot point. The average user would visit a web page that had a java applet, the applet would either not work, or crash because of the microsoft jvm and the user would then get a opinion that java just plain sucks. I believe the EU or whatever it was at the time did finally find in favor of Sun but the damage had been done by then, java on the desktop was dead. Microsoft then abruptly mothballed all J++ development and stopped providing their own jvm with windows thus effectively negating a reason to provide any jvm with windows. This really was the era of Evil Bill Gates and I'm glad he has grown out of it and on to better things. The tragedy of it all though is that even a dozen years later, right here on r/java, you will find people still promoting java on the desktop via AWT, Swing, SWT, JavaFx. It really boggles the mind how much of a beating this dead horse continues to take. Bill effectively killed java on desktop not only for windows but for all operating systems in the fallout. Java on the desktop is dead. This story is the reason it is dead and it happened so long ago. Please stop and think about how futile Swing/JavaFx development is if your audience is a general one. The way we develop java on the desktop now is how everyone else is doing it, you build a server application and serve up HTML/CSS/Javascript as the customer facing UI. That technology will always be marketable no matter if you use java or not. JavaFx and Swing are a technological DEAD END. One of the main reasons it still lives is because Swing is very Object Oriented. It is the path of least resistance in beginning college courses to demostrate OOP while also giving the learning student some easy visual candy as a reward. Tell your instructors to stop including it in their lectures as there are many still out there creating huge swaths of programmers with unusable legacy skills except in soul-sucking support positions. As far as the anti-trust aspect of it. The same complaints came from Netscape and Opera at the time that because windows shipped with IE (and was not an integral aspect of the O/S), users should have a choice between other browsers at install time. That was a far more newsworthy anti-trust lawsuit, aka The Browser Wars.
Why are you even on /r/Java if you hate the language so much?
Where did I say that? Every programmer ends up learning some dead end technology. I actually lived through all that pain I just described and have been doing Java and jvm languages almost exclusively for sixteen years. It doesn't mean I can ignore standards like HTML/CSS/Javascript and current conventional wisdom. Just accept the fact your vested interest in JavaFx/Swing or whatever is time lost and move on. 
So you're saying not to learn JavaFX and Swing, but instead to focus on HTML/CSS/Javascript for server apps? Is there any other thing that should be focused on for desktop development? Because HTML and CSS and JavaFX is all that my college teaches. What is actually used for desktop development, not just server applications? *We did cover C++, but poorly. Like the instructor used using namespace std; for every program bad.
Everyone uses that as a rebuttal but no one ever points to a concrete example. Legacy in-house tooling is about the only place you should find it. 
I like eclipse. It could certainly have much better UI, functionality, and learning curve, but it gets the job done.
Exactly. What people don't realize is that Windows, Linux, and Mac all stem from Unix.
You can use whatever you like. You can build desktop apps with JavaFX, you can build them with Win32, you can build webapps... whatever you want. At this point in time it seems the future will be all client apps being written for a browser (in HTML/CSS/JS), but there are still phone native apps, traditional desktop apps, and other apps that can and do get created outside the browser space. And really, all that matters is that you build something that people use. If people are willing to use a JavaFX app then JavaFX is a viable platform. And I doubt many people would care. Take Minecraft: a bunch of people insist Java is unfit for any kind of desktop experience, but I doubt many users at all care that Minecraft is written in/running on Java. Besides, HTML/CSS/JS is a bit kludgy. Although there's no current indication of any major upheavals, it's not inconceivable that in the future there may be a new standard that changes the way apps are written and built.
Swing has been great for desktop software development when it's designed correctly and suitable to the task. I've made use of it a lot in the real world. It beats writing web apps for lots of things.
javabat.com
Ok.. I think I fixed it. thank you!
The browser is the defacto UI of today. It has been for some time. If you can't get past that fact then one should stop reading now. A Swing frame can't be accessed except on the machine it runs. Applet restrictions in browsers make creating and maintaining an applet monumental if you wish to provide it to a wide audience because the largest demographic of active applets out there are malware and viruses and so browsers are proactive against it. Flash made that very clear during the 2000's because it never had high aspirations and doesn't try to do much other than graphics and some mouse interaction. Meanwhile a webapp can be accessed anywhere, requires no special attention other than conforming to browser standards like HTTP, HTML, CSS, javascript and doesn't care what language you use for the back end. Remember Twitter went from using ...?? to changing over to a java backend and the masses were none the wiser. You can think of the need to create a native desktop application in the same sense that we have all these smart phone apps. Unless you have a need to access some native hardware like gps, accelerometers, etc on the device, you don't need a 'app for that', you can do it as a web app. Of course if you never have network access then you need something native but that is certainly not the trend, just the opposite. Browsers that are supporting HTML5 now have the ability to support offline use so even network access is a dwindling excuse. All this bullshit about having a separate app for Android, and IOS, and whatever firefox and amazon are doing is mostly just that, BULLSHIT. It could be solved and will eventually be solved by web apps, even the stuff that currently requires native access, that will be abstracted away. There's really no other way to hide your business logic except behind a server request, this is why so many phone apps get copied and re-listed on the app stores with a different name, they don't need to make a outside call to a server to actually do their stated function. Marketing mostly determines which native apps succeed today. If you want to know what the next dead end technology like Swing/JavaFx is then just look at Android/IOS native app development. You can make a lot of money doing it right now because that is the only sustainable business model currently but it will all fall to web apps in the coming years. Even the idea of personal devices will fall away to the concept of ubiquitous devices that are just everywhere where only the user has to provide authentication. IPads at restaurant table for use is a perfect example. Instead of creating larger and larger smartphones, we'll be gravitating back toward smaller devices like [Derek Zoolander phones](http://www.youtube.com/watch?v=Wv_JTjYYaQI). I really have no advice on what to use for desktop applications other than to avoid it at all costs until you can't, and then, maybe look at whatever Microsoft is currently peddling (or whatever linux desktop you are using.) Silverlight is also effectively dead now too. Microsoft has gone and invested in WinRT with Windows8 and I believe that is effectively HTML5 based/inspired I think. I gave up on windows development because Microsoft has a twenty year pattern of mothballing their tech after a few years and starting over. It's great for maintaining legacy consulting fees but ask any long time windows dev and you will see much thinning hair and eye twitches when the topic is breached. 
/r/eclipse exists... Did you even bother searching?
 public Node aMethodWithALongSignature( // HerpDerpService derpService, Derp derp, Herp herp, HerpDerp herpDerp) // throws HrepException, DerpException, HerpoDerporomusException { }
i did and it did not come up.. what the.. 
Yeah, Gates was pretending that it was so complicated that he couldn't explain it. Java could make the OS a commodity.
Thanks a lot! I am a beginner at Java and created this to help with my simple programs I create. This will help a lot in the future.
Highly dependent on the IDE/Editor you are using. I find auto complete, auto formatting and organizing imports to be the ones I use the most.
From someone that just checked out the page, don't worry about it. The memes were not excessive and did not distract me as a reader. Keep up the good work
It's fun to watch this mental chess Gates plays with the interviewer, and I think it's a good lesson in keeping your cool under pressure.
&gt; The average user would visit a web page that had a java applet, the applet would either not work, or crash because of the microsoft jvm and the user would then get a opinion that java just plain sucks. I don't think this was entirely Microsoft's fault. There were, and still are problems with Java's performance and libraries. 
That was kind of painful to watch. Clearly the lawyer questioning him didn't have an understanding of the technology. I actually found Bill Gates being much more open than I would have expected. See for instance Lil Wayne's deposition.
I actually haven't stuck to any certain IDE yet, because I use Sublime text and the command line to write/compile/debug. I would like to switch to a nice IDE, I just like being able to control nearly every file and path created even if it means more work. Helps me understand what is going in the background a little more rather than having an IDE create the paths/packages, although that is an advantage.
this based2 guy is a complete spammer btw
ditch that and learn spring
Neovest, a JPMorgan Company is a comprehensive equities/futures trading platform that runs in Swing. 
Your college doesn't teach javascript for client applications?
But I want my CORBA back!
I haven't used it in years, but back when I wrote something to capture images from a webcam in Java I used Java Media Framework (JMF). I mention it here only for "completeness". I have no idea whether it has been updated to support modern devices, but it did work back when I used it.
 public Node aMethodWithALongSignature(final HerpDerpService derpService, final Derp derp, final Herp herp, final HerpDerp herpDerp) throws HerpException, DerpException, HerpoDerporomusException { ... }
By right-clicking in my IDE and choosing "Format Code". Most likely you'll end up losing your manual formatting at some point. Refactoring your code to make it more concise might be an option but it is hard to tell with the placeholder names you've used.
I have downvoted you (sorry). Although Java Web Start is great in theory and I have used it extensively in the past, it's inherently broken in practice. It worked nicely back in the days but in its current state it's unusable. I have added code signing etc. still most users have problems starting apps via Java Web Start. Might it be some signing error, caching problem, proxy problem, the list goes on. Especially on Mac OS, it's difficult to get it to work without telling people to turn off caching... Here is a detailed list of what's wrong with JWS: https://github.com/threerings/getdown/wiki/Rationale NOTE: I am NOT affiliated with getdown. 
Check your eclipse.ini file. It may contain a reference to a (now) non-existent JVM.
I would like to see a rebuttal too, but I have a feeling most people downvoted and moved on after reading the intro. &gt;The browser is the defacto UI of today. It has been for some time. If you can't get past that fact then one should stop reading now.
Most large banks use Java as middleware or for backend services.
I still dont't understand how it's linked to first. First is only referenced once during the population, that's when the first element is inserted, but it is never changed after that. Its next always remains null. And then first is referenced when dequeueing.
Bill mentions server middleware API's as a competitive threat to Microsoft around 10:27 in the video.
You're welcome.
search this sub, log4j2 is most likely YAGNI except for the very special case.
No way! i, j and k go together like x, y and z. Handy for nested for loops.
Pick a spec implementation, skim through its docs, and put it to practice. That's how I did it. The only spec that may hold you up is JPA, particularly the Criteria Query (if you decide to use it). Real World Java EE Patterns by Adam Bien is a pretty good book.
&gt; because I use Sublime text and the command line to write/compile/debug Then why are you asking for keyboard shortcuts if you're not even using a real IDE yet? If there's something that will improve your productivity it's learning to use a proper IDE. &gt; I just like being able to control Bollocks. Sorry. It's the same excuse you hear every time. "I want to have control". No you don't; you find big IDE's scary and confusing. Having to create all the directories yourself isn't 'control', it's just wasting time. 
I don't. We have formatting settings, everyone them, and the code gets formatted on save. 
I think your misunderstanding comes from not realizing what references are. After you enqueue the first element your list looks like this ("first" included now, for clarity): first-&gt;1&lt;-last As you see, the "first" reference and "last" reference both point to the same list element. When you enqueue 2 into the list this happens: first-&gt;1&lt;-last,oldlast //"first", "last" and "oldlast" all point to the same element first-&gt;1&lt;-oldlast-&gt;2&lt;-last //"oldlast" and "first" point to the same element first-&gt;1-&gt;2&lt;-last //"oldlast" is destroyed, "first" points to first element, "last" points to last element Since these are references we're talking about here, once you insert the first element "first" and "last" point to the same (first) element. Then you create another reference ("oldlast") and set it's "next" to the newly inserted element. Since the "oldlast" reference points to the same object as the "first" reference does, it's effectively the same as pointing the "first"'s next to the inserted element.
&gt; Let me just learn the BASICS without any tips Again, it's called "code completion". If you google using the correct terms you might actually get results. http://stackoverflow.com/questions/1417239/disable-eclipse-auto-completion
Ctrl-c Ctrl-v ;-) 
By all means start with a text editor and a command line, if that helps you learn the basics of the Java eco system. Once you are working on a serious project then an IDE will be a huge advantage. IDEs are worth it for the refactoring tools, syntax checking and autocomplete.
What has worked for me is to come up with a problem or something that you want to solve (using Java EE ofc.) and implement it. It doesn't need to be a huge project, just something as simple as injecting an EJB to print in a log or on a web page. From there you can extend and try new techniques. If you're into JBoss you might want to try Wildfly and their "quickstarts", which is a good start. Don't forget to version control your stuff ;-) edit: "EJB 3 in Action" is an ok book to read, maybe not the latest and greatest though.
this is the HUGE problem. people who aren't tech-savvy are trying to litigate it or create laws determining it's use. It's backwards.
the money is the blood.
&gt; we'll be gravitating back toward smaller devices like Derek Zoolander phones[1] . I miss my little StarTAC. 
Licencing under the GPLv3 is a pretty poor decision. It requires any project using this to also be released under the GPLv3. You probably won't change your project licence just for a tiny library, so unless your project is already GPLv3 this is basically unusable.
&gt; The tragedy of it all though is that even a dozen years later, right here on r/java, you will find people still promoting java on the desktop via AWT, Swing, SWT, JavaFx What about [JavaFX 8 being part of Java 8](http://en.wikipedia.org/wiki/JavaFX#JavaFX_8)? JavaFX doesn't appear to be dead to me, it seems that Oracle is pushing it and it seems like a good technology for end user apps.
Haha I have to be honest, no matter what I religiously refuse to copy/paste code from a tutorial as I feel it helps me learn and get better accustomed to programming if I type it myself line by line. :)
Interesting idea but I would have prefered to see this as a add on to one of the more popular logging tools (logback/log4j 2) verses a new logging tool that is really good only for consol logging. I also agree with [urquan](http://www.reddit.com/user/urquan) the GPLv3 licence really reduces the amount of participation you can have with project. I've always felt that the GPL is fine for applications but not so great for libs.
Reminds me of the Play! 2 framework route syntax. I'm not sure how I feel about Java resembling Scala too much :) Is it by choice that you're not supporting query-string parameters ?
 public Node aMethodWithALongSignature(HerpDerpService derpService, Derp derp, Herp herp, HerpDerp herpDerp) throws HrepException, DerpException, HerpoDerporomusException { /* ... */ } **EDIT:** To the redditor that is downvoting: where's your contribution? Have you ever worked on a large legacy codebase where 90 percent of method signatures are exactly as OP's example? To me this is a clean enough way to structure the signature without wasting too many lines.
I personally use Eclipse, many of my collegues really like IntelliJ. I don't know many people who use Netbeans but that's also one that's used a lot. Try atleast 2 and see what you like best.
I don't agree with the second half of your comment, Java is still a great way to build portable apps across OS. What else allows you to compile you app and run it as is on Windows, MacOS, Linux ? Besides, Swing is not the only way to write GUIs, there is also OpenGL and several popular games are written in Java. You can't replace everything with a web page.
I had a project like this last semester. We basically had to implement [The Sieve of Eratosthenes](http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes) to find prime numbers in the hundreds of millions in a very short amount of time. While the Sieve of Eratosthenes might not be the most efficient way to find out if a given number is prime. It will probably help you conceptualize a more efficient solution. There are rules that determine what a factor of a number can and can not be. For example; notice that if you are given the number 50. You know that the highest number a factor can be for this number is 25, this is because the lowest factor of any non prime number can only be 2 (discounting the number 2). With this information it should be pretty easy to write a solution in a short amount of code. 
I'm thinking about it, something like: `/path/:param?a=:b` to match the url and then check the presence and capture the value of the `a` parameter or if `a=b` to check that the name parameter has the exact value.
Does it have to be a book. Here is some java ee lectures I have used. They seem decent. [Link](https://www.youtube.com/watch?v=99yxMyO9mqQ.) That being said, I don't know if you really need to go through the ee stack if all you want to do is web programming. A simple servlet kan be enough if you are mostly interested in the front end aspect. I would suggest going through some java ee though. It gives option for beautiful component based development, and is very suited for most backend needs.
Query string params are optional too, so this might get tricky.
So what do we know about prime numbers? Well, they can only be divided by 1 and themselves, so if anything is an even number, immediately return false, else we need to iterate through all the odd numbers up to a certain point, because after that certain point you just start dividing by the other factor of a number you've already divided by. I'll let you figure out what number you need to go up to. This is for a basic, intuitive implementation that runs in sub O(N) as I assume you aren't supposed to figure out a more sophisticated implementation since there are obviously better ways of checking for prime-ness. 
You should really use the proper subreddit, you'll get more responses. http://www.reddit.com/r/javahelp Seeing as this is obviously an assignment, what are the requirements you have? Here is a pretty decent breakdown of different ways to check if a number is prime. http://www.wikihow.com/Check-if-a-Number-Is-Prime Good Luck!
My project's formatter changes it to: public Node aMethodWithALongSignature(HerpDerpService derpService, Derp derp, Herp herp, HerpDerp herpDerp) throws HrepException, DerpException, HerpoDerporomusException { ... } which is basically: newline where it would exceed 80 characters (grouping parameter type with name) and indenting twice from the indentation level of the first line of the method's signature (or one level farther than the body's indentation level)
no point recalculating on the fly things we already know. Make a list of know primes and check if it's in the list. quick and efficient.
Oracle Java is still one of the fastest runtimes for RESTful APIs. It has been 6 of the 7 fastest in benchmarks for years now. It is a great languages with particular strengths and weaknesses. There are many other great languages with their own strengths and weaknesses. Use the right tool for the job.
Java EE has a ton of components, one of them being Servlet which is part of Spring MVC. Spring is the most popular framework with pure EE being second. My impression is that Spring dominates in terms of public web sites, while JEE has a big chunk of the backoffice applications. I'd say step 1 is just to learn Servlet. Then move up to Spring via Spring Boot. Try to get exposure to things like JUnit and Maven while you're at it.
I think he understood more than he let on. He was trying to trick Gates into saying something that could be used against him. Notice how he latched onto the "Java Runtime threat" statement. It's all a wordplay game and Gates was in on it just as much as his interrogator. Very cool under pressure.
http://tutorials.jenkov.com/java-io/file.html
In my opinion, passing the EntityManager around like that is a little worse that the DAO pattern. With that said, this is my preferred approach with Scala or Groovy where you can add implicit functions or mixins that effectively do the same thing without passing the em around. 
Java is one of the most in demand skills for Big Data and companies that want to use Hadoop.
I'd take a look at Spring Boot. It's simplified much of the setup of bootstrapping a Java web application. 
http://nsis.sourceforge.net/Main_Page
No, see if there is some examples.
Why would you care? Who would you imagine would have a big enough name to matter and not be big enough to have their personal blog/site hosted on their company's hosting?
Diet Pepsi: refreshing while under pressure!
I've found success with [JNativeHook](http://code.google.com/p/jnativehook/)
Apache tomcat is a server based on the JVM. Here is a non-exhaustive list of websites using tomcat: http://wiki.apache.org/tomcat/PoweredBy
GPL is a killer here. Looks cool, but unusable for most applications :(
Nobody is going to write you an application. If you want this to actually happen, *you* need to learn Java. Check out the `java.io.File` class for some of the operations you described.
Will do. Thanks!
It's so quiet :(
I would suggest this read: http://www.gamefromscratch.com/post/2013/08/01/Just-starting-out-what-games-should-I-make.aspx
For midtiers, sure. No one writes their customer ui in Java, it's all Web based. 
do you happen to have a transcription of the video? 
I only know of [Play!](https://www.playframework.com/documentation/2.1.3/ScalaRouting) but it uses some Scala trickery to read the function parameter names.
Not in the least. We have some VERY experienced, freakishly intelligent folks working on in-house software that is responsible for a great deal of our business. (Financial sector). They develop a lot of it in Java, particularly using the Netbeans RCP. Is it the prettiest? Not by a long shot. But, it provides a good mechanism to interface with distributed systems, external services, etc. and is capable of doing things that would be very difficult in a web app. 
I think the major reason Oracle is pushing JavaFX is not so much for desktop development, but for embedded systems like electronic billboards and such. None of the browser makers seem to be focusing too hard on getting their browsers to run well on the lower-end embedded systems. There has been a lot of work lately in getting the JVM to run efficiently on embedded systems like the RaspberryPi. It still kind of sucks last I checked, but it may get better when project jigsaw is deployed.
I already have a Data namespace which actually takes care of the actual data. 'Core' sounds like 'Stuff' =)) Maybe I could use an abbreviation REQ ? And coin the phrase in the future, like MVC =)
&gt; To make fun of Microsoft, they should skip Java 9 and go straight to Java 10 This would break a lot of code because people still using float (Float.parseFloat(javaVersionFromSystemProperties)) to detect JRE version and surprisingly 1.10f == 1.1f ;)
Hahah, go for it! However, I don't know why you have 3, it's usually just two items. Entity and DAO (data access object?.) I've seen Repository used in context mongoDB and Entity for JPA. What's stack are you using?
we call it "reposervices", which is repository and the repository services. our approach is microservices so this works well
for a blog or general informational site.. java is probably overkill.
I'm coding an ORM. Basically you have a repository that you can query objects which yields you entities. I was thinking on making it like this: | Repository + - Query + - Entity But it's not really like a repository owns it's queries. A query is sort of like a specific query builder in this case ( think LINQ )
I guess a reposervice covers a repository and a query, but not the actual entity
That's good, exactly what you should be doing while learning.
Netbeans is good as it comes with the basics out of the box and has good maven integration. Eclipse has a shed load of plugins. In my opinion after using in for six months, Intellij is by far the best IDE, but it does cost $$$. For a learning developer Netbeans is a good option as it isn't has difficult to setup as Eclipse.
Meh, nowadays, with spring boot and heroku i'm finding small projects easier to setup than ror or django.
For me, copy, cut and paste. I hate having to stretch my pinky out to the CTRL button.
Hi Alonjit, I'm sorry to say I do not currently have one at this time.
I've been calling it "storage" recently.
Okay well I should do that, but even if I'm not, if I delete the files from Eclipse, and then I delete the linked files separately, will that properly delete all the files and their associated material?
 \n
Whether it is in 2016 or in 2018 a reckoning is coming for those people.
Hi - check out the guides at http://spring.io/guides. There are easy, 10-15 minute long guides on all manner of topics.
Value types would be amazing in Java.. 
I assure you, friend, you're wrong. There are some (including Neovest like above) that not only write their server-side services in Java, but also distribute a "fat client" java gui application instead of a web interface. To say "no one", means I can prove your argument to be false by illustrating one example. Now if there is one company (JPMorgan) in this case, that use java as a fat client, there must also be others. 
&gt; One of the main reasons it still lives is because Swing is very Object Oriented. For those who like being able to code their UIs in an object oriented manner, similar to Swing/JavaFX, and are doing web applications, I highly, highly recommend Google Web Toolkit. It allows you to write your UI code in Java, using all the standard IDEs and other tools available for Java, and at compile time, this java is translated into highly optimized javascript, which runs on the browser.
Um, he just did point out several examples: &gt; Netbeans, Eclipse, Jetbrains
what's the runner up? assembly?
Haha just including that rule. Though i dont think we can say that the algorithm runs in O(N) time because each iteration runs at X! Which is nontrivial. But its been a while since ive done this
http://www.gwtproject.org/overview.html
You saw the wink at the end right?
&gt;JavaFX I've only used for one app, and it seemed like a perfectly fine GUI framework, and it's getting actively pushed and developed by Oracle so I don't see a reason why it would be in any way dead or outdated. Where is Silverlight? Where is Flex? Corporations that are competitors to each other often are forced to respond to a competitors market advances whether they know it will pan out or not. Coke invents Cherry Coke, Pepsi has to respond to that whether they know anything about how to make a cherry cola drink or not. We are talking about browser plugins and RIA. JavaFx was a reactionary move based on the introduction of Silverlight and Flex, of which there is no surprise, are both dead also. JavaFx was late to the party and dead from the moment it was announced. Minecraft is the only outlier I see but then again we've seen a lot of desperate 12 year olds trying to figure out how to get a minecraft server going. Meanwhile in my Steam library, there is over 50 servers apps from over 50 different games where you can one click fire up a server for that specific game. The JVM on the desktop befuddles the average non-tech user because its power is just too broad that its downright dangerous. More games are being built in Unity. I think Hearthstone is a Unity app and that UI is absolutely wonderful; alt-tabbing should be the first litmus test of any game whether it's native resolution or windowed. Would Notch make another game in java? Didn't he recently abandon he latest endeavor? I use IntelliJ also and its great, as my wallet expected but since it's a java development company creating java development tools, not for soccer moms, but for other java developers, we should only hope that 'things just work.' I can tell you from being a Netbeans user since it was the default dog food from Sun called Forte, it does not compare. Eclipse might be the poster child for the most bugs with gui origin. I honestly can't remember a stacktrace from a crashed eclipse session that didn't have some gui related cause.
Is there any need for the magic? What's the advantage over simply defining a function like: String multiline(String... strings){ return Joiner.on("\n").join(strings); } (using Guava's [Joiner](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Joiner.html) class) ?
Please consider to write one. Will help google searches, and make the life easier for everyone who would rather read than listen (i for example would rather not listen to most of it, but very few parts that im curious how were accomplished. The rest i know...).
This is probably one of the better alternatives, even if your screen real estate is not an issue. 
80 columns man. At some point, somewhere, you may be dumping that on a terminal for a quick sanity check or some idiot will want to print it to paper. 
Tomcat doesn't have a full JEE implementation included, so you need to include the actual implementation as well as the api. Try something like this(I use tomcat7 with primefaces): &lt;dependency&gt; &lt;groupId&gt;com.sun.faces&lt;/groupId&gt; &lt;artifactId&gt;jsf-api&lt;/artifactId&gt; &lt;version&gt;2.2.8&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.sun.faces&lt;/groupId&gt; &lt;artifactId&gt;jsf-impl&lt;/artifactId&gt; &lt;version&gt;2.2.8&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;3.0.1&lt;/version&gt; &lt;/dependency&gt; The alternative would be to run it on a full JEE server(TomEE or JBoss/Wildfly)
Uh, no. GWT is not dead. Google's new Inbox is created in GWT. And there are a massive number of other organizations using it, including Amazon, their AWS control panel is built in GWT. GWT is also in active development, and new versions are being released with a lot of improvements, every couple of months. You must be living in 2007. 
True, but 80 column code listings are increasingly an edge case.
Help as in do your project for you? What specifically do you need help with? 
As a second year java student in University, what the fuck is all this and why the fuck don't I know it right now because I'm way way behind the curve?? Edit* why all the hate? I was making a simple joke?
I'd take the option monad over an elvis operator anyday.
Funny to see JBOSS on that list.
[Check out these videos.](http://de.cs.iupui.edu/courses/24000/) The later ones are java, but all the videos teach you the fundamentals of programming. This guy does an amazing job explaining things!
I want just Java though, like something completely dedicated it if possible, thanks.
Java should be pretty simple if you know python. There are just a lot more object oriented concepts
Yeah it looks almost the same, would you suggest learnjavaonline.com?
https://www.ktbyte.com/classes/cs00 Pm me if you need any help.
Thanks a lot man, this looks very interesting and nice, and all I need to do exteriorly (is that even a word) is download Eclipse?
I would suggest TomEE over Tomcat. With Tomcat, you'll have to micromanage your dependencies, which can be a "journey" when trying to implement a Java EE stack. With TomEE, you only need to specify the javaee-api dependency and 3rd-party dependencies, such as PrimeFaces.
There's also Bucky Roberts and his videos on YouTube. He is a great teacher and has videos for everyone, and is also perfect for beginners. Link to his Website: https://buckysroom.org/ Link to his YouTube Channel: https://www.youtube.com/user/thenewboston Link to his Beginner Java Tutorial Playlist: https://www.youtube.com/playlist?list=PLFE2CE09D83EE3E28 
Chances are when you graduate you'll get a job that, at best, is using Java 7. If you're unlucky, it will be Java 6 or older.
I suggest using NetBeans as an IDE. It's great for beginners, but it's still a great tool for professionals (Heck, I use it over Eclipse whenever I get the chance at work). Don't bother with IntelliJ; it costs money for the full version. As for learning the basics of the language, I think another commenter pointed you in a good direction. If you're interested in using Java for web development, check out the TomEE app server and Java EE 7 online manual. The manual will probably mention GlassFish. GlassFish is another app server, but it's mostly just an app server used for learning purposes these days. Anyway, TomEE integrates well with NetBeans. As for a tool to build your projects, I suggest Maven. Another popular build tool is Gradle, but I'd suggest learning Maven first. NetBeans allows you to easily create Maven Web projects. The way I learned was simply Googling all of these topics and reading blogs, tutorials, or manuals. The hard part was knowing what to Google and what tools to use. This should get you started in the right direction at least.
Of course, that's right. But the question was about the easiest way to check for a prime, not the fastest. The easiest way, without thinking about the problem at all, is just checking every divisor.
This is a stupid title
I've also recently got into java development from a C++/C# background, my tactic was to skim over Java in a Nutshell from O'reilly, but only real fast, just to see the differences, and then I've picked up the Well-Grounded java developer from Manning, wich is IMHO one of best technical books I've ever read. Now I'm taking a look at Java EE to get a push on the job market and planning to buy "Professional Java Web Applications", wich is kind of a tome, but at least it has everything in it to get me started in an organized manner. Hope this helps, good luck. P.S.: the Oreilly book is outdated and you only need the first part, because the second part is an API reference, god knows why.
I might also recommend picking up books like "Effective Java" and "Java: Concurrency in Practice". Both books are well respected in the community and talk about specifics which are applicable to any Java apps you will write. I am sure you will be able to follow the syntax and it would be a good way to learn without relying on an introductory text.
enjoyed it and i feel the memes werent overwhelming but now where is day 3 ;p
Check out the /r/Javahelp wiki. There are plenty tutorials listed.
No.
It's kind of cute but I doubt the benefits outweigh the cost (extremely misleading syntax) in almost any case. You're probably better off putting larger text constants into properties files within your resources.
Isn't SquareSpace running on JVM's??
Under construction. Patience is a virtue ;)
CHOO CHOO
That's not really the point. At least not according to the linked blog post on the Github page. The point is to have a "cleaner" syntax for multinline strings by using multiline comments. For example a database query like this: String query = "SELECT first_field, second_field, third_field " + "FROM table " + "WHERE id = 1;"; could be written like this: /** SELECT first_field, second_field, third_field FROM table WHERE id = 1; */ @MultilineString String query; The confusion it will cause in most scenarios kind of outweighs its use though I guess.
What I was thinking, with `Optional` now in Java, we don't need another hack to get around null references.
Java 8 is actually getting surprising good adoption. People around me are all switching to Java 8 and a recent survey done by TypeSafe shows good numbers. People must see lambdas and the new functional methods as worthwhile improvements, rather than the relatively minor changes of Java 7 compared to, say Java 5.
Yes Victoria, you can write desktop scala applications. Same for every language listed. Shit article. Oh, and Java will never get value types under Oracle, IMHO.
Regarding value types and Oracle, why? Just curious since it is a feature I would like but don't spend any time reading jsr politics.
Mostly because they failed to address it when adding lambdas, and it would be hard. Oracle doesn't do hard things.
@urquan, @rdjack21, Thanks for the comments, I developed that lib, therefore I can change the license. Which one do you recommend? MIT license?
Hey bro, I would recommend you learn linux before you learn java, because once you're on Linux and able to do things, you won't be intimidated by things like installing Java. I recommend installing Ubuntu or ElementaryOS
it is?
Thanks to both of you. Adding the dependencies worked, but I think I will give TomEE a shot too. 
&gt; Don't bother with IntelliJ; it costs money for the full version. For me, IntelliJ IDEA Community Edition was more than enough and still better than STS or Netbeans. What did you miss in the free version?
Good thing Java is not python then.
Yeah, well they said the same thing about Duke Nukem Forever!
James Gosling runs his personal blog, [Nighthacks](http://nighthacks.com), using Apache Roller. There are a few more listed on [Roller's "Powered by" page](https://cwiki.apache.org/confluence/display/ROLLER/PoweredByRoller).
That's hardly a java problem. I've seen it in Ruby, PHP, and even Python. Even worse is the python standard library comes with a version parser, yet some people still parse it as a float.
if you are interested only in functionality you should go with Azzu's response with a slight modification -&gt; the for loop should go only until toCheck / 2. (there is no point in verifying the greater numbers) if you are interested in speed you should use the sieve of atkin algorithm. below you have an implementation in java, i got it some time ago from the internet and adapted a little bit. http://privatepaste.com/13d0cec395 pass : jreddit just play with the "twoPower" variable to increase or decrease the interval. if you have enough memory you can go until 2^64 - 1. LE: i got ~8500 ms for getting all prime numbers until 2^24 - 1. (i dont have enough memory for 2^25).
Thank you, I'll look into it. The exercise isnt telling me to be as efficient as possible, but I certainly find things like this interesting. I added the toCheck/2 myself (I saw that there was no point in testing it further than that), so thank you :)
I prefer Java - even for small websites - but it's a lot easier to find Wordpress/PHP hosting. I'm in the process of moving a Java site onto Wordpress. It'll be good getting access to all the themes and plugins, but I'm not looking forward to getting hacked :-( 
Thank you so much, I'll definately check out NetBeans and I am going to be using it more for projects and stuff.
Here's a direct link to the article: [Actual Article](http://www.neodesigngeeks.com/20-best-weekly-web-design-development-resources-5/), instead of the dzoneSpam link above.
there are no known cases where multiple programming language proficiency led to death :D. generally speaking, knowing more is good. i have only two things to say related to this issue: 1. you will never know 100% of something (applies for any domain). 2. if you say that you will never need to know another languages or that other languages (in which you never coded) are bad, you are a complete moron. going back to your question, i work as a java programmer and i faced situations where i needed to code in other languages(c++, c# and js -&gt; please dont say that if you know java you know js). because i already knew them, and did the job faster, i got a raise (you can see the bright side already). i like to think that you learn best by facing hard stuff (or by mistakes) so dont even dare to think you know something just by reading it (books/articles). LE: putting more thought into it, i would really suggest you to learn a pair of backend&lt;-&gt;frontend programming languages or even better, more (java&lt;-&gt;php , java&lt;-&gt;js, java&lt;-&gt;ruby .. etc). it will change your perspective on projects (at least it did for me).
Checking it out, thanks. I assume you meant Effective java, that's what google turned up.
Java is multipurpose. It can run on mobile, desktop, as a web server, etc.. Comparing Java with PHP or RoR makes no sense, since none of those will run real applications other than web. Plus, Java is way more robust and complete as a language than PHP. PHP has a long way to go to become a "good language" again. Java vs C# is a good question, but then you have to realize C# won't run well on Linux / Mac since it's made by Microsoft.
if you are an advanced programmer in java you wont find new stuff in "general java" books. or at least.. the percentage of "wows" will be somewhere around 0.005% per page. what you can do though is to choose topics like performance, generics and collections, concurrency,java memory model, garbage collector, lambda .. etc and spend a lot of time on them (read a lot or video coverage). the books are a really good starting point and i think the best are : Head First Java By Kathy Sierra, Bert Bates Thinking In Java By Bruce Eckel The Pragmatic Programmer, From Journeyman To Master By Andrew Hunt, David Thomas The elements of Java style By Scott Ambler, Alan Vermeulen Effective Java By Joshua Bloch Bitter Java By Bruce Tate Head First design patterns By Eric Freeman, Elisabeth Freeman, Kathy Sierra, Bert Bates 
Simply put, because **that is where the jobs are**. I know all of those other languages but far and away it is **Java** that is in demand in the corporate marketplace, where most of us will inevitably work.
I moved to java for the jobs. But TBH it is currently my favorite programming environment. That static analysis and IDEs are awesome. It prevents so many bugs that are apparent in Ruby, Javascript, or PHP. C# is a better language and I would much prefer using it, however, The tooling and community just aren't there. It is sad, but I C#'s connection to MS really is what has killed it.
1) Why would you compare a framework (RoR) along with a list of languages? 2) Almost every programmer needs to be proficient with multiple languages. Each language is just a tool. A typical web application will need skills and code in multiple languages from front-end to back-end. 3) Sometimes clients force a particular language on a project. Sometimes one needs to maintain legacy systems in a different language. The reasons are many and endless. Hope that Helps
I try to use whichever language fits. Usually the platform I'm targeting or the libraries I want to work with will determine which. If I have a lot of good options, I tend to go with the easiest or familiar one. Javascript for web pages, Python for Blender scripting, Objective C for iOS apps, Java for Android apps and Minecraft plugins, VB.NET for that one ERP system I have to support, etc. Where I have a lot of choices, I'm already familiar with php for web server scripting, and C# for Windows desktop apps. And I'll still use C/C++ for small things that I need to be fast or light, or modifying existing projects that already use it.
i acttualy dont know what are you trying to do the code seem good but the "kk = kk + Math.pow(j, 2);" seems to do nothing you are printing numbers from 1 to 101 only 
JVM and Linux are the underpinning technologies for Big Data and Cloud Computing, after years of .net development I still consider myself to be a windows guy for the most part, but I can't deny the fact that C# and Windows are definitely not the optimal tools for the job I want to do now (hadoop). It's funny because I still like Visual Studio and C# but I'm not actively working with .net, the last time I wrote C# code professionally was in 2010 (nostalgia?). Technically I could do hadoop with C# using hadoop streaming but I'm not the kind of person that tries to adapt the environment to my own limitations, that would be the equivalent of coding ruby professionally on a Windows box IMO. I usually prefer to embrace what everyone on the field is already doing and that includes Java, Scala and Linux boxes on AWS.
ignore the `kk` stuff that is put there to confuse you: Think about what happens every time the loop reaches the beginning (comparision check) and the end (the increment). int j; for( j = 0; j &lt;= 10; j++) { System.out.println(j); } System.out.println(j); 
If they bungle the JSON library like the ATROCIOUS HORRIBLE AWFUL TERRIBLE way they did the XML apis, then you'll pry Jackson from my cold dead hands. - 85 (ok, slight exaggeration) classes to DOM parse an XML doc? - "Pluggable" XML libraries for maximum debugging headaches across JVMs (a very special SCREW YOU to IBM in particular)? - Nigh-impossiblity for pretty-printing XML requiring the blackest of magic and highly dependent on the JDK version? - Compiled XPath expressions not reentrant? 
I thought they borked those people when they started putting in letters.
Um, how did it look by the time jdk8 came around?
&gt; The tooling and community just aren't there; It will never be, 90% of the clever people still doing windows and .NET are inside Microsoft and it's virtually impossible to them to keep up with everyone else creating awesome projects around the world. Roslyn will help make things a little better but it's too late now, the ecosystem will never be as big as the Java one. I agree it's sad, C# is awesome. &gt; C#'s connection to MS really is what has killed it. It's not dead but it's definitely relegated to the Windows world, even with Xamarin, I'm pretty sure that Xamarin clients are mostly .net developers trying to do mobile and not Android/iOS developers interested in the wonders of C#.
Yeah, and it ended up sucking.
How do you do variables? Groovy has ${expr} in double quoted strings to do this... It is creative though... code in comments being not great, but still... 
Or doing a groovy file with """ and just call that script/class...
Evidently, not-yet-ready. They did put some [prep work](http://openjdk.java.net/jeps/162) for it into jdk8 though. I personally haven't been doing anything with jigsaw builds since around the time that it was first announced that it was being cut from jdk7. But, I do monitor the relevant mailing lists and it was my impression that for a good while not much was happening on the Jigsaw project. I assume Oracle prioritized other things and the engineers involved were busy elsewhere. It has certainly picked up, and given that things have been getting merged I am fairly optimistic about jdk9.
So like langfod said the kk doesn't actually DO anything in this code, but it can be interesting to look at what is done with it, as I have the feeling you will soon modify this code to make kk actually do something. What happens is we initially set kk and j both to 3 and zero respectively. J is an int, because it only ever has to be an integer, kk is a double because the Math.pow returns a double. In case you're unaware, to simplify them, doubles are just numbers that can handle decimals. We then go into our for loop where we again set j equal to zero just to start with. And then the loop body continues to run as long as j is less than or equal to zero, (that's the j&lt;=0), and everytime the loop body runs, j is incremented by one. Inside of the loop body we take k, and set it to equal itself plus Math.pow(j,2). which is the same as kk= kk + j^2. So each time the loop occurs (101 times, from j = 0 to j 100, incrementing by 1 each time), we add to kk j^2. so we add 0, 1, 4, 9, 16,25.......10000. to kk each time, and then add 1 to kk because ++kk just means increment kk by one. At the very end outside of the loop we only print out the j, which is now 101 because that's when the loop stops running. But try putting System.out.println("kk= " + kk); System.out.println("j= " + j); inside of the for loop right before the }, and you might get a better understanding of how it works. Hope this helped!
yeah but i thinck he actually wanted to print the kk to so he can know how its kk ^ j 
My point is that that's not much "cleaner" than: String query = multiline("SELECT first_field, second_field, third_field", "FROM table", "WHERE id = 1;"); Although that's debatable I suppose.
Business.
I completely agree, but there is generally stuff that I wouldn't even think about google'ing until it's needed. For example I didn't know jdbc existed until one day I needed to interface sql and java; I didn't know that I didn't it.
Hehe. Database Error.
&gt;Java vs C# is a good question, but then you have to realize C# won't run well on Linux / Mac since it's made by Microsoft. [Playing Devil's Advocate, you're missing something](http://blogs.msdn.com/b/dotnet/archive/2014/05/12/the-next-generation-of-net-asp-net-vnext.aspx)
I don't know if the Java would be my top language to start with today (although I don't see a reason to avoid it), but a JVM language would definitely be what I would want to use.
+1 for big data, that's a really good reason. I hear you about nostalgia. I'm still pining for Turbo Pascal :-)
I would go Spring Boot with IntelliJ IDEA Ultimate as an IDE.
Java is probably the most employable language out there, so there's that.
they don't suck. That it just your opinion. We use it every day and are doing just fine. 
Float is a almost perfect [semantic version](http://semver.org/). You can even [compare as double](https://searchcode.com/codesearch/view/14778513/) to get a better precision! ;)
&gt;proficient in a modern language Are you implying that Java isn't modern or that PHP is?
My current (federal government) contract is forcing us to move from .NET to Java and therefore I'm forced into it. I'm trying to look at it as a good learning opportunity but right now it's frustrating being so unproductive while learning all this.
PHP is a fractal of bad design. C# is better than java in terms of language but worse in terms of library and cross compatibility (this is getting better now though). Ruby on Rails is a framework not a language. However the fact that the only thing Ruby is really known for is rails kind of explains itself. Plus RoR is very limited when you try to do anything complicated beyond its simple architecture. Its also where 90% of the big data development and tools are. Java needs some upgrades from jigsaw and valhalla but its still functional, especially if you have hundreds of gigs of memory.
Actually, in the most recent one I saw, cpole_cppsp was #1 and Java was 2-6. I know it is a joke, but ASM isn't anywhere on the list because there isn't a pure ASM library to do JSON encoding / decoding for RESTful APIs. My only point was that the idea that "Java should only be legacy code" is rediculous when Java is one of the biggest standards in web-based middleware (IE 3: an object that is supported in an upright position, in particular). I like python too, node.js and even øMQ/Mongrel2 solutions when extreme performance is needed, however Java is still one of the languages with the fastest RESTful APIs out there. Certainly not the fastest development time. Check out the latest laravel and maybe you can tell me why everyone isn't already using it for startups.
But IDEA Ultimate is not free (it is for me as a student, but it's for personal use only). Is IDEA Community enough ? Or is there a third party plugin for the Community version ? Thanks
But you can fling poo. Poo!
&gt; Playing Devil's Advocate, you're missing something We have Mono now, but it's still a stupid choice. It's not that it's just open source, it's the support on Linux, the community of the platform. Also Microsoft took Java and tried to 1-platform it with proprietary libraries before. This is probably another attempt at the same tactic. 
Turbo Pascal fan here. Got to move from Turbo Pascal to C++ back in the day, because C felt too primitive by comparison.
Did you really put PHP in a list of modern languages? It's bad and the pay for PHP development is bad because the barrier to entry is nonexistent.
Because real world systems are developed using multiple platforms and languages. There is no reason for someone who professes to be a professional in the industry to not understand or be working to understand and be able to write in the more popular languages in the industry.
What am I, a chimpanzee?
"Design Patterns" by Gamma, Helm, Johnson and Vlissides
Remind me of [verbatim string literal](http://stackoverflow.com/a/556141/2141964) in C#. But what about the "\"? In some case, I guess it can be helpful to escape it.
This will open the mind but I would suggest other books like: Effective Java, Java Concurrency in Practice, The Art of Multiprocessor Programming, etc. There are many books. What to read first depends on what skills the programmer needs to improve asap. 
So this loop stuff, it's like left over junk from C. There are still occasional situations where I use it, but it's error prone and should be avoided. Better constructs: List&lt;String&gt; listOfString; for(String s: listOfString) { dosomething(s); } And now with Java 8 using lambdas to do stuff: http://zeroturnaround.com/rebellabs/java-8-explained-applying-lambdas-to-java-collections/ Now I'm not saying don't learn the classic for loop. I'm saying that it should be learned and avoided for these more modern constructs. 
Play! is awesome, even more awesome when used with Scala. Edit: I love getting down voted for answering a question with a valid response. Fwiw I was that guy saying spring was better than j2ee 8 years ago.
Do you have access to a tablet? If so, you could take some courses at Udemy.com as they have an app (both, iOS and Android) that lets you download the courses. If you're looking for Java, check out [John Purcell's courses on Udemy](https://www.udemy.com/courses/search/?q=John%20Purcell)
MIT is awesome, it go straigh to the point and everyone seem happy when using it. For other library license you may look for BSD(very close to public domain), LGPL(a bit less restrictive than GPL, so people can use it with other project), maybe there's even MPL that may act a bit like LGPL but I'm still not sure about that last one.
I wonder if you're trolling. PHP is from 1994, Java and Ruby from 1995. Only C# is a bit more modern than the others. PHP and RoR have their uses for small, quick to market web apps, but their use case doesn't really overlap with that of Java. I don't really have a use for PHP, and prefer Python to Ruby, but I don't look down on PHP and RoR like many professionals do. They have their niche where they shine. C# is a fine programming language, a joy to code in, but it being Windows only (in practice) is a show stopper for me. It would be my first choice if I ever get to do a windows project. Java has an eco system of libraries, tools, IDE's and middleware, much of it open source, that nothing else comes close to. You can develop it on your laptop, test it on a linux server, deploy it on solaris, without as much as having to recompile. Oh yeah, and there is that mobile phone thing. 
First of all, **don't post screenshots of your code!** Code belongs on [pastebin.com](http://pastebin.com) or [gist.github.com](https://gist.github.com) - both with **Java formatting** on. (Short code - less than 50 lines can be posted directly inside the post by leaving a **blank line above the code block** and by **indenting each line of code with 4 spaces**.) Screenshots are barely readable, not really traceable, and nobody will take the time to hand-copy your code to be able to trace your code and search for errors. Seconds, this question is better suited for /r/javahelp (but please read and follow their [Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/posting_guides) and [Code Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/code_guides). As your post currently stands, it will be ok for /r/Javahelp if you change the code from screenshots to pastebin or gist.github.com.
first of all, lets not full ourselves, java is easier than c or c++ (take the memory management for example in both languages). so java is a relative easy language to start. hardware specs went through the roof so performance is achievable on java machines also (in the past your performance profiling was a must). i started using java 3 years ago (when i got my first job) and i literally find new stuff every month or so (i guess this is because it is so widely used and people need so different stuff). the thing that i love the most about java is swing (i will take the "what the hell is to like about that outdated sh*t") and i like multithreading. i worked almost all my last two years in improving some swing components and i found it interesting. @Dryux you are right but java also has its tricky stuff (like any other programming language) which you usually get after several years of experience. 
you have to admit that C# is better tho, albeit more limited in platform, simply for LINQ and the var keyword alone
Eh, Java was the first OO language I ever had exposure too, but it has a really, really steep learning curve for someone with no experience coding -- reasons I can remember is being inundated with keywords with no context, and a kind of top-down introduction to Objects as workhorses rather than a bottom-up approach of structs into structs that can do stuff and be like other structs. Once I took some C/C++ classes, everything clicked. And memory management isn't "hard", it's "one more thing to do". You can still leak memory in Java.
Language feature wise? Yes, C# is better. Pretty much everything else? Nah, not really.
This has absolutely nothing to do with Java. Post removed for spam.
Thanks for your constructive answer. I'm not using it because I already use it in another project (the exact same stack but with ejb and wildfly) and I want to learn something new. I were looking for a less heavy full stack framework to be more productive and to learn new things (because what I hate the most in java web dev is all the configuration and management before writing 1 line of code). I want to use IntelliJ IDEA Community edition but it doesn't even support App Server ( [See here](https://www.jetbrains.com/idea/features/editions_comparison_matrix.html) ). I will still try to use it with Spring Boot because the server is embeded inside the app so I don't think it's a problem.
This is really an interesting pointer, thanks for that research! It's a bit different though than from what companies are using. Maven contains tons of older libraries or older versions of libraries that are of course never updated anymore. Even the most pessimistic person who would like us all to believe that everyone and everything is still on 1.4 wouldn't dream up claiming nearly 5% of people still actively programmed in Java 1. Years ago already there was an interesting discussion and survey about this on tss. See http://www.theserverside.com/news/thread.tss?thread_id=61645 Back then there was nearly nobody in 1.4 still. I can't fantom the idea that numbers would have gone up since then. 2 years ago numbers on Jelastic were 79% for Java 7 (see https://blogs.oracle.com/henrik/entry/java_7_adoption_at_79). Of course Jelastic isn't "what companies use" either, but still. The developer survey that Eclipse holds yearly might be the most indicative, as it actually asks what devs use in their company. For this year (early 2014) the numbers were: * Java SE 7 (59.2%) * Java SE 6 (23.4%) * Java SE 8 (9.2%) * Java SE 5 (1.3%) Source: http://slideshare.net/IanSkerrett/eclipse-community-survey-2014 This is not too far removed from what I see in practice (which, admittedly is of course a local observation, but it does include some big users). If anything, in my personal experience open source libraries are among the most conservative out there (only beaten by banks). In general there is some political correctness idea there that no one should be left behind, so the lower the Java version the more users can use a given library. If there's only 1 single user out there who cries about his Java version not being supported anymore, many open source projects will not update their dependencies. So when those open source projects start migrating to Java 7, it gives out a strong signal that the number of Java SE 6 users is really getting lower these days. 
The language was not built with the modern development in mind. PHP is still the only server side language where it is not heavily discouraged to imbed code into views. It's great for having a quick and dirty solution really fast, but has problems with maintenance and readability. 
I would say Grails is fairly well adapted, there are almost no Jobs using Play. However, it might make you stand out if you already know Spring/Java EE as well.
If you don't know computer architecture, from the beginning logic gates up to basic ALUs, registers, machine code, to assembly, to disks, memory, peripherals... then read up on that. A book on Operating Systems theory, such as virtual memory, resource contention, and other stuff will also be really useful. 
No IDEA community only supports Java SE. You shouldn't need it though, i've used play and grails with Netbeans. 
Just for some random knowledge? I doubt any of that knowledge will help at his job. Abstraction is a good thing. 
That makes sense. I think Spring Boot is probably your best bet. I do think you might be disapointed if you are looking for minimal configuration and lightweight. Spring is neither of those things. Boot is designed to make Spring configuration simpler to get up and running. A framework that needs an additional framework to configure it is going to be complicated. My experiance with Spring is getting a bit dated so it would be cool if you let us know how it works out.
Find some open source software and start reading and contributing! You won't get paid but you will have great resume experience and will have ideas how large java software projects are built.
&gt; please dont say that if you know java you know js Only someone that really doesn't know anything about it would say that. They are completely different. Saying that is one of those red flags for hiring managers.
Is there any way to use Scala and Java together like obj-c and swift can? Would love to use some Scala in my android apps.
Jobs for one, more and more companies seem to be moving toward Linux servers. That isn't to say there aren't jobs in any others nor that Windows is dead (seriously, I am not saying it's dead), but the ones that interest me the most are all Java (or closely related). But Java can translate if they decide to move to windows, linux, or something that doesn't exist yet. Otherwise: **PHP**: Using this for a side project proved alone that it was a hard language to manage large code bases in. I am sure there are strategies that I am not aware of, but the code seems to be impossible to not look messy. **C#**: I prefer *Nix systems, have for a long time and as a result, I am pretty inefficient working in Windows. There is the `mono` runtime, but that sacrifices several of the great features of the language. I also really disliked working with the web frameworks I was exposed to, I don't recall much about it other than disliking how it handled contexts and throughput. **RoR**: I've only written small amounts of Ruby, and I am sure it's great for small projects. But as a language, it reportedly doesn't scale well. I don't expect any of my projects to reach the size and scope of Twitter, but they had to migrate away from it due to scaling issues and do it in Java. I am sure there could have been ways to get some of that out of RoR, but at some point Compiled beats out Interpreted (at least with the current versions of the languages). That said, Reddit is written in Python IIRC, so interpreted languages can certainly hold their own (though the use cases are a bit different).
Go on Amazon and buy a cheap older edition of the primary Java textbook, which is the Deitel &amp; Deitel "Java: How To Program". If you buy the latest edition, it's $100. If you just settle for a few editions back, you can it it for a few bucks or even 1 cent. Alternately, if you want one fast, just hit this link to get a electronic copy: [Java: How To Program](http://uet.vnu.edu.vn/~chauttm/e-books/java/JH2P-9th.pdf).
Thinking in Java is not for newbies.
Glad you got your problem solved! Have fun with Primefaces, I absolutely love it and it makes developing JSF applications a blast. Feel free to PM me any questions you have or post them here.
Because: * It's fun. * It's "batteries included" when it comes to graphics and string operations. * I learned it before I learned C# * I don't really know PHP or RoR. Anyway, I really don't like circlejerking about programming languages because for every person who says a language is great, there exists at least one person who says it sucks. Different jobs require different tools, and some are better than others. Any process within software development or even personal projects requires the right tool for the right job; while situations aren't always ideal, a good programmer will take the time to tie in their expertise in using multiple languages or learn something new in the process. It's sort of like people who shit on Fortran because it doesn't do what C does, whatever that means.
I already know Java, but taught myself ruby so I could write one off scripts for operational work. 
Loops should be *avoided*? One of the most fundamental concepts of computer science should be *avoided*? You're going to tell someone who's just now learning how to program to use streams and lambdas over loops? Really?
 &gt;And memory management isn't "hard", it's "one more thing to do". You can still leak memory in Java. And without much control over it. 
Have you read up on Scala at all? There's some interesting stuff it going on in that sphere, above and beyond that Java 8 provides. And of course it all runs on the JVM so you can combine your functional Scala code with imperative Java code should the need arise. Otherwise my go-to advice is "Read *Code Complete*".
what don't suck?
My preference is to be a polyglot. So I didn't mind when my boss came in and said "We are dumping C# and rewriting everything in Java!!!" Mind you, he is a programmer, and it is his money, so the switch was his call. And I like to be agnostic about those things. Oh, and Android.
If you want nice language features, but still want all the niceties of the JVM and related ecosystems, take a look at Scala.
Java harder!
I suggest you go to your local JUG meeting where you'll find out that professional freelancers are killing it with Grails and Spring Boot.
I'm reading through "Cracking the coding interview" book right now. It's really fun. Lots of cool solutions to problems I would have never thought of 
You can use Ultimate version for 30 days but you won't make it 30 days because you will find the $200 to get a license before that. It blows Netbeans away. Eclipse is rubbish and the STS,GGTS variants are even worse, even though they are Spring sanctioned. http://www.jetbrains.com/idea/nextversion/ Also, Grails is basically a customized Spring app so it's not much different than Spring Boot learning curve-wise. Grails will handle a traditional large scope project while Spring Boot I would easily call Grails-lite. 
A multiline function will always incur a (small) runtime cost to perform the join operation every time that string is used(before the JVM optimizes it out). ~~This method~~ The multiline annotation could write a multiline string straight to the a class's constant pool, making it possible to use the string as a static value.
Probably never. That's why we have IDEs.
&gt; in the past your performance profiling was a must I have to say the JVM would outperform most everything else on a grand scale that operates on the same architecture with no effort put into optimizing. I'm surprised you would say that.
&gt; when my boss came in and said "We are dumping C# and rewriting everything in Java!!!" Mind you, he is a programmer, and it is his money, so the switch was his call. Really curious, what size is your organization? Were going through this at a very large organization now.
Programming pearls, pragmatic programmer, refactoring to patters, design patterns, concurrency in practice
Yeah, this 'beginner mistake' actually bites people at all levels all the time. In some languages it's mandatory you supply an `override` keyword when attempting to override a superclass method; in those cases, when your spelling doesn't match, it's a compiler error since your override method isn't actually overriding anything. And if you give a method the same name without using `override`, it's either an error or warning. Being mostly a Java coder I forget what happens specifically... Unfortunately Java launched without that check. When they found it was a good thing to have, they needed to add it in a backwards-compatible way. To that end, the checking is available via optional annotations. If you don't annotate your method with `@Override`, it will compile without error as it did here, leading to bugs that are hard to track. If you *do* use `@Override` you get either a compiler warning or error when the method doesn't override anything (for instance: if you made a typo in the name). In short, don't feel bad about this one, it happens all the time. Do use `@Override` whenever possible.
I will definitely use @Override from now on! Seems like it takes away a lot of head ache! 
I work on a product that has a feature of detecting installed Java versions and letting you know how bad that version is for security. Our product runs on Java 7 currently, and we want to run it on 8, but we have to do some work for that to happen first (unrelated to what our customers do). Our product also lets you mark things it found as "don't care, ignore this from now on". One of the common requests regarding the Java stuff we get from customers is "how do I automatically mark ALL Java 4/5/6 as ignore?" IIRC most of these are financial and government entities along with some very large companies. So here's another anecdote to the "old versions never die" side of things. Also, this is mostly client side stuff - like browser plugins. People are running super old Java in their browsers. On purpose.
Next week?!
The biggest issue imo is the interfacing between different code that have been compiled from Scala or from Java. Just using Java libraries in Scala is awkward because of the fundamental semantics of the language are different. 
I think you waited too long to start...
While I have to agree that Eclipse is not the prettiest tool out there, it gets the job done. Aesthetics are not really a focal point it seems. Eclipse is made by programmers for programmers, so I guess this is the result! I do believe there are some plug-ins out there that pretty it up somewhat but I recommend just getting used to the interface. 
UI design is fine, more or less. Performance on the other hand...
&gt; AngularJS 1.x was great. But even before my organization's evaluation cycle completes you broke the compatibility rule. I can't confidently suggest AngularJS for my future project anymore. I, personally, would still recommend AngularJS. They never made it any secret that 2.0 would not be backwards compatible, and breaking API changes shouldn't be unexpected with major version changes. Just because AngularJS 2.0 is out, doesn't mean that your AngularJS 1.x applications need to be updated. You need to evaluate them, decide which are core applications that will be worked upon heavily in the future, and plan for an upgrade cycle. Your AngularJS knowledge won't disappear when 2.0 is released either. Personally, I prefer that they make these sweeping changes early, rather than sticking with them for years to come in order to preserve backwards compatibility between all versions.
Is mono up to date yet? Last time I checked it was always a version or two behind.
You don't have to use 2.0 just because it is out. If you can get the job done with 1.3, what's the harm in sticking with it? Moreover, based on your post, it doesn't seem that you need to a framework for the cutting edge features that it offers. You just want a framework that helps you slap up a frontend with minimal effort so that you can focus on what you are good at - backend development. 1.3 satisfies these requirements and will do so for a long time to come. It's not like you'll be barred from using 1.3 once 2.0 comes out.
I would say that Apple has never been aiming at that model, except arguably with CUPS.
Never understood how var is a good idea. But I've never played with C# enough. How would it be different than declaring everything an object? **EDIT** So examples usually given are: var myVar = new Connection(); How is that different than: Object myVar = new Connection(); Or better than Connection myVar = new Connection(); Because at least the last example can be enforced by the IDE syntax rather than compile or at worse runtime.
Agree. But over the time application will grow and we may need more features. If I stick to 1.x version then I couldn't be able to take advantage of the features that I need which is providing by 2.x version out-of-the-box also. I have to keep writing those features myself. right? 
Java is a great all-round platform for development - there's nothing else quite as strong from an overall perspective for general-purpose programming**. A few compelling reasons to go with Java / JVM languages: 1. Broad enterprise adoption - implying lots of high-paying jobs 2. A huge ecosystem of open source libraries and tools 3. There are new JVM languages like Clojure and Scala that are awesome (and can share all of the same libraries 4. Cross-platform portability (the same *compiled* code runs on Windows and Linux) 5. High performance - mostly thanks to the great engineering over many years in the JVM / JIT / GC 6. Very strong in many important fields (Android, Big Data etc.) ** There just a few places where I *wouldn't* recommend Java for specific reasons, e.g. - Web development (essentially JavaScript dominated because nothing else runs reliably in the browser) - Embedded / systems programming (Java has too high memory requirements and GC latency sucks when you need to be close to hardware) - AAA game development (top end still dominated by C/C++, for medium-complexity games like Minecraft Java is just fine) 
Try selling that to any corporation asking for long time viability. This is also what killed Struts.
What does this have to do with Java? What year is it? Do people still don't now the difference? edit: Reminds me of a confusing talk I had recently with someone who said they were looking for Java developers ...... since they use MongoDB o.O ... erm no thx.
Ho hum, more pointless JavaScript stupidity. Get a real programming language, amateurs!
Our University's stupid like that :(
That reply was specific for the person who wrote the post. He has clearly mentioned that he is mainly a backend developer and my advice was limited for circumstances where he has to write up the frontend himself. Read my post again. I've only suggested he use 1.3 if he can get the job done with that. And honestly, if it's only some internal project that can be done by a person without frontend dev experience (no disrespect intended!) then I really doubt that there is a need for all the advanced features that 2.0 might offer. 
Now the question is, does this person use an IDE? Seems like something that would easily be caught there, or during compilation showing errors...
Good point. Shouldn't have added in Apple (although they benefit tremendously from FOSS). The point is that there is an odd shift in MS that we in the FOSS community should pay attention to. Java will always be great, especially for JVM languages, but we can't ignore the impact of a possible FOSS .NET compiler and languages built on top of it...
If it's just my personal pet project I am very much fine to live with 1.3 or even I can learn 2.x and migrate, no big deal. But as I mentioned in article, I convinced my team to use AngularJS for one of official project by showing sample demo apps along with code examples. I guess one of the reason my manager and team agreed because there is no steep learning curve for AngularJS 1.x which might not be the case for 2.x. 
This is often the problem with using the latest fad. Backwards compatibility is one of the main reasons Java is so popular for professional applications.
I suggested that one for several reasons. First, because it is readable, and one does not need to sit there coding in the examples to gain from it and retain the information presented. Second, because it's generally applicable, not just to Java but to many programming languages. Third, because I find it to be both prescriptive AND descriptive. Not only have I found the patterns useful in guiding development, but when I first bought it I found many things in there I had already done, but for which I didn't have a name.
The var keyword is equivalent to your last example, not the middle one. The compiler (and IDE) know exactly what the type of myVar is. With your examples the benefit is just a bit less typing, which is nice in and of itself but it's really to help you from having to do something like this: IEnumerable&lt;IDictionary&lt;string, DataTable&gt;&gt; myVar = myCollection.Select(x =&gt; ...); Sometimes type declarations get really long and aren't entirely necessary to understanding the code. If you absolutely must know what type myVar is, you can just mouseover it and the IDE will tell you.
Or even better, by using the IDE to generate the Overrides. Why type when you don't need to do so? Particularly when typing is prone to error.
At my school, students had to use a SUPER primitive IDE called 'jGrasp' for programming assignments. No autocorrect/autocomplete, no project/solution files, no nothing. Apart from lacking autocomplete, it's actually nice when students don't have to deal with autogenerated coad for each project, and can instead just compile a single directory with every java file from the class. (Terrible design in the real world, though, I'm aware.) It couldn't be more barebones, though. There's a compile button, debug button + breakpoints, a run args field, and a file browser to select which directory you're compiling, and that's pretty much it.
I made a maven archetype integrating Jersey 1.18.1, Google Guice 3 and Apache Shiro 1.2.3 I made also another one replacing Jersey for RestEasy. You can check it out here http://search.maven.org/#browse%7C1451301937 And pull-requests are very wellcome in my github repo: https://github.com/pabiagioli/secure-rest-webapp-archetype https://github.com/pabiagioli/shiro-guice-resteasy-webapp-archetype Best Regards
[this](http://www.jgrasp.org/images/csd_large.png) actually looks pretty useful. I wonder if there is an emacs package for it.
At that time, we had just transitioned from medium to small. So, three developers.
I have never seen that feature before, looks nice.
I am not sure I get your Java and MongoDB reference. Care to elaborate?
MongoDB has fuck-all to do with Java besides the fact that there are Java client libraries for it
PHP might be 20 years old, but it's in widespread use today. IMO that makes it modern. ...and maybe the nonexistent barrier to entry is why it's so pervasive. 
Nope, not at all. Just that these are some of the languages in use today.
It's for work. The big upside of Java is that most tools for it are **free**. Eclipse / Netbeans: free Glassfish / Tomcat / Tomee / Wildfly: All free Also, it will run on anything, not just Windows. I develop Java on Windows, another colleague develops on Mac and yet another develops on Linux. We deploy it on Linux. This doesn't work so well with C# / .NET.
I'm not even sure I understand that example. I would never write java.util.Calendar cal = ... so the difference is between Calendar vs. var. Not huge, and if that is the C# killer feature, then it has a long way to go to unseat Java.
There's no guarantee of backwards compatibility ever; no one can see the future. It's really just maturity that is the deciding factor. Two years is about the average time I'll consider something worth looking at in depth. 
Yeah, if you are working in Assembly, you are a noob!
Don't worry about those downvotes, I appreciated your comment. People are downvoting everything, even my post or my answers for nothing...
Technology moves rapidly. Its just part of our industry. It can be infuriating sometimes. If they decided to not make it backwards compatible, it must be for good reason. Personally, I'm glad i pushed learning AngularJS. Now I can learn version 2. Although like you said, it will be tough since documentation will be hard to find. It's a viscous circle our industry. 
There's no guarantee ever, true. But in Java the culture is more focussed on backwards compatibility. This is both good and bad, as with all things. JSF for example is very backwards compatible, but it does mean there are quite some amount of deprecated things in the API. Before method expressions there was something called a MethodBinding. This was deprecated some 8 years ago, but it still lingers around. And it's not just the fact that the type is there, but it also still shows up in long forgotten methods like `EditableValueHolder#getValidator`, which now needlesly makes the EditableValueHolder longer than it needs to be. On the plus side, applications written for Java 1.4 and JSF 1.1 for the most part still compile and run on Java 8 and JSF 2.2, and already compiled apps nearly always run. 
PHP is simply not modern. I look at it like this. You can take a honda civic and do all manner of engine mods, aerodynamic additions, suspension upgrades, but you will never reach the performance of a car that was design with performance in mind from the start. Recently I was horrified to look into a PHP system which placed "annotations" inside comments in the code. This is just an awful idea, but it's the only way to do it in PHP. I heard that after 20 years there finally a spec for the language. Really ? For PHP there is a low barrier to entry, but to build up a large PHP based system, the spit and bailing wire needed to deploy such a thing does not come close to something like Maven on java. 
I would second this. As a programmer that just started his career, design patterns have played a much larger part than I originally thought. I would also suggest http://www.eaipatterns.com/ as well for enterprise applications. These have come very useful in the workplace.
@Override annotation allows you to declare that the method you are defining is intended to override some method in superclass/interface. If your method does not in fact override anything, you will get a compiler error. E.g. if you do public class A { @Override public boolean equal(Object o) {...} @Override public int hashCode() {...} } you will get compilation error on "equal" because it doesn't override a method in superclass Object (presumably you intended to override "equals"). Without @Override, the code will compile just fine and you will have fun time figuring out why collections behave weird with your class. 
Sounds like one of those mistakes where you check and double-check yet you don't see the mistake...and then you go away for a while, take a fresh look, and see the problem immediately! 
It does show output errors and warnings, and has that feature where you can double click an error and it'll take you to the line in the file where the error occurred. And yeah, I agree with you that having something barebones can be beneficial for lower level courses, but VERY few students end up trying out a 'real' IDE since the class doesn't force you to. Then for Data Structures 2 when professors start teaching in C++ and everyone learns the glory that is Visual Studio, they realize what they've been missing out on. But definitely, having a simple environment helps people who are just getting started. Would be nice to see other IDEs be that easy to get running.
Your best bet is StackOverflow or /r/javahelp. Not appropriate here. 
You're not getting the point of true multiline support. Your method requires adding quotes and a comma on every line while incurring the cost of String concatenation operations at run time. It'd be better to simply use the "..." + "..." notation for each line as that will be optimized out by the JVM. If Java supported true multiline strings, you could do something like this: String multilineString = ML"This is a string which will automatically have new lines in it but is still considered only a single string from the perspective of the JVM and compiler."; The end goal is that you can simply copy/paste multiline text straight into and out of your source code (such as an SQL query) without having to worry about formatting it by adding/removing quotes, commas or addition symbols.
Hi SpiceFinger, I've re-uploaded the video with an audio boost. I hope that helps!
Looking forward to a working JavaFX implementation for iOS.
It's not an issue anymore. You should be using Gradle or Maven and not rely on IDE specific project files in a shared work environment. The big three IDEs support both Gradle, Maven and Ant to varying degrees as well as project conversion between the IDE's. Intellij will take a gradle project and sync the Intellij project files to it automatically. I think you can also generate project files for eclipse and netbeans for people that 'need' it. For the most part, I ignore Intellij project files, they exist only to setup any GUI related conveniences during development and do not affect the big picture. Gradle makes it easy to create a cross platform one click/command project build. Jump on github, find a java project using gradle and run the gradlew (or gradlew.bat for windows) file and watch the magic. The great thing about Gradle is that it supports Maven and Ant as well. 
It's like 2001, but in 2014.
Isn't that everyone's way? Who wouldn't do that?
Easier way: while what the previous poster said was correct (http://www.reddit.com/r/java/comments/2kp8jd/java_8u20_security_question/clngfwo) it doesnt have to be that complicated. You can get away with signing the jar with a certificate that's not signed by a CA (that is, it will be self signed). What will happen is that in this latest version of the jre it won't run, unless the user adds the website to the exceptions list (it works, I tried it, i am doing it today). And even when it will run it will display a big scary warning dialog to the user (for good reason). Best part of it, it will be free. However, don't do this for anything remotely important. If you're a business, buy a damn certificate.
We switched from Jersey 2 to Restesay for exactly the same reason. Imo Resteasy is very solid, don't know anything about Apache Wink.
You can generate self sign certificates with the Java SDK, sign your JAR, and export the self sign certificate and import into the trusted root certification authorities on the computer you want to test with to simulate a signed jar with a CA with no dialogs as the Dev option. 
Why!? This guy is an idiot. "Hey look what I can do! I can bring a cancer such as Java into iOS and fuck you guys! woohooo!" Java has no place running in iOS. There is nothing Java 8 can do that Objective C won't. The only people excited about this are idiot business types who see an easy way to port existing, shitty apps and games to iOS for cheap. It is certainly idiot business types, and naive programmers like this young brat who fuck up nice things like iOS.
Dropwizard might be a way to go. I've used resteasy and found it was really difficult to stray from the default setup and a lot of features were pretty opaque.
sure i guess, but why would this matter? it's about the other people, not about development itself.
http://www.javaworld.com/
Huh? Why? What's so insane about wanting FX on iOS?
Yes! You don't have to agree. No problem. I started coding at age 11. It's been my full time career for decades. I've hand unrolled loops in assembly. I've written loops in probably 10 different languages. Much like I hate managing my own memory, I also hate managing my own loop indexes. The reason is simple, it's error prone and therefore it takes up mental energy to ensure I don't have bugs there. But if you enjoy it, have at it! and don't forget your calls to free() either! 
You don't understand. I don't even disagree with you on the point of managing memory and loop indices. That's not the point I was trying to make. What I was *really* asking was, why would you suggest to someone that has clearly only just started programming to avoid a basic, fundamental programming construct in favor of syntax sugar and advanced concepts? It's impossible to form a solid foundation in writing software without becoming *very* comfortable with the idea of loops, even if you cease to use them directly, later.
bluJ is not an IDE mate
Someone who's not motivated purely by money. There are people who care more about making a good product that makes good money. And some who just care about making a gigantic sum of money and could care less if they made something great.
yea, but you can still run a self-signed app if you really want to. yes, hoops and all, but it is possible. it is obviously not recommended for anything directed towards average users, but if for example you have an app aimed at a very narrow specialized field of people, you can ask them to jump through the hoops to run the app. the idea is: it is possible, just quite a bit harder.
Well, that and not make developers hate themselves for using it. Objective-C can absolutely go fuck its ugly-ass self. 
https://github.com/akullpp/awesome-java
what is your favorite spec? JPA + EJB + JSF? jpa with spring CDI and AOP? show me the way :' ( 
&gt; What's so insane about wanting FX on iOS? Nothing. In theory, the whole point of Java/JVM was to allow it to run anywhere.
The mistake is to call paintComponent() at all. Use an IDE with a GUI builder (e.g. NetBeans, etc.), and never call that stuff again.
You will know when you have moved past beginner phase when you stop getting NullPointerExceptions.
Waits patiently to see *some* code..
Next step: Human-like AI to trick the poker company into thinking your bot is human!
This blog post is pure spam, promoting the companies own product. There might be some merit, if, you know, it weren't possible to run older versions of Java EE on top of newer JDK builds. Or if Java EE 6 wasn't still supported.
right, you proved the point for me. Despite being ugly in your opinion, it all gets compiled down to relatively the same machine code. So the only thing you are trying to sell is bypassing the ugly language by piling another ugly language onto it wrapped up in some clunky ass macros that do some translation at compile time. Why pile more crap ontop of crap just because you can't take the time to learn a completely valid language? Again I say this is only attractive to people looking for a cheap solution, instead of taking time and porting something to objective c you want to shove a square peg in a round hole.
Isn't their main bread and butter something that could be added to main jdk because so many other language platforms already have it?
What are you talking about? mayonnaise is so an instrument
I use Wink at work (WebSphere). I really like it. Wink only worries about basic JAX-RS and none of the bloat. Plus, it offers a lot of flexibilty with its Request Handler Chain...like if you need to bolt Apache Oltu onto it for OAuth 2.0 authentication. It should work well in Tomcat. I haven't used a recent version of Jersey that seems to suffer from the feature creep I've heard and read about latley. I also like Apache CXF.
Last time I checked, you can't use an app server or servlet container with the Community Edition. It was either version 12 or 11. Other than that, I think IntelliJ is awesome.
You're welcome.
Well...by spec, I mean individual technologies, such as JPA, not combinations, such as JPA + JAX-RS. I like EJB 3.1 and higher a lot, however I can see CDI rendering it as a deprecated technology one day (perhaps by Java EE 9 or 10). I like JAX-RS, JSF 2.2, Bean Validation, and CDI a lot too. For the most part, I like JPA, but JPA can be a bit intense, depending on how far you dive into it. Aside from the convenience of ORM, it's sometimes better to go JDBC or consider some other tech, such as jooQ. I like SQL and designing db's and queries, so SQL doesn't hold me back like it does for other developers with SQL aversions. I typically opt for using JPA's Criteria Query API and canonical metamodel classes for type checking. It's a bit overkill in some people's eyes, but it makes refactorings, caused by db table changes, easy. CDI allows for you to do some aspects of AOP. Check out Apache DeltaSpike. It may add more AOP features to CDI than what CDI implementations offer out of the box. Still, use of AOP should be limited to things such as logging, transactions, etc. You don't want anything that affects logic being handled by AOP. CDI will allow you to handle those few scenarios. I only really use AOP-style CDI code for logging with something like JUL (WebSphere). I let EJB's handle my transactions.
What do you mean by "useful Java links?" You should be a little more descriptive. Do you look for: + Java tutorials? (Check the /r/Javahelp wiki) + Java Frameworks? + Java Blogs? + Java Programs explained?
Maybe the readme should actually tell me what it is, or you could have.
I feel like bots of your making should have thread.sleep or some kind of scheduler to not appear inhuman
It does if you scroll down...
What are you blathering about?
What about spring MVC support for REST? It works very well and you have a lot more control about what is happening. I'm not sure about the perf of the url matcher, but my guess is that they are all pretty bad so ...
I skimmed the github pages and the website but it's no clearer what this is. Ignored.
Why everybody think that C# is better language. I think that C# has too many flaws and to many unjustified features that Java remains much better language. Two main issues with C# for me are structs and properties. I'll quote c2.com here: "C# structs are dangerously and cryptically implemented". The only problem with structs I have is mutability. I think the only way to use C# structs is to make them all immutable, but standard library is already filled with mutable structs all over the place. I don't see value in properties except of API readability and it alone doesn't justify adding such a massive addition to language. As of the proposed goal of easy refactoring from field to property. You should never export field anyway. And you should directly use fields in private methods instead of properties: it greatly simplifies code and most importantly removes dangerous ambiguity, you always know that assignment is low level assignment and it will never make HTTP request to submit data to remote server. I always name all my properties with PascalCase and always name all my fields with camelCase to remove confusion from my code. And with this style I can get with Java's getters and setters, it's just a couple of extra keystrokes, but much smaller and coherent language.
Nice try. Prick Lowtower.
Would the syntax X &lt;= Y &lt; Z be locked? Would X &lt; Y &lt;= Z be valid, for instance? What about X &lt; Y &gt; Z ? It would be creating a new ternary operator in the language essentially so it would be important to completely nail down the syntax. For me if the proposal was to have a ternary range boolean operator I would consider avoiding the existing boolean operators altogether. X &lt;~ Y ~&gt; Z or something like that maybe?
Scala, but the wording is a bit different. if (0 until myList.size contains index) // 
Wow. Many Java. Such opaque. It's a library of code snippets from a Java consultant. The guys seems to have a religious prohibition against documenting or explaining anything.
Let me say it is not what i would call good code. But it surely isn't bad bad. It's primitive (technology-wise) by about 10 years or so (i wrote servlets for the first time in 1999, for the last time in 2002). It is something i could maintain if i really had to. The code is uglier than it has to be because of the comments. Should comments be removed, it can be a bit prettier. Some of those comments though are quite essential. It is , however, relatively trivial to refactor. Oh, and don't close the servlet output stream or writer. Never do that. You can flush it though. edit: the code style though (capital letters for variables) is quite annoying. 
?
Java tutorials, Java Blogs and java daily news website thanks for help
thank u
I think it's important that people should know up front the details of how to get RIA's made with the intent towards production. When Microsoft and Oracle are locking down security, it becomes harder and harder to keep applications running. The more hoops you have to have customers do, the more they will see an application as unprofessional and problematic. As a Dev, you don't want your customers abandoning your work for another language.
I think that all logically meaningful kinds of `X operator Y operator Z` combinations should be legal. For example: `if (a == b != c) {` compares a and b, then moves on to compare b and c. There might even be some nano-runtime advantage because you can continue working with the same value. Thinking of it like this, the chain should be allowed to be arbitrarily long. &gt; if the proposal was to have a ternary range boolean operator I would consider avoiding the existing boolean operators altogether. Hm, didn't think of the downside of introducing programming errors. And I don't like to use different symbols for this, it would nullify the readability advantage. An impasse. Maybe some kind of special brackets or a keyword/character at the beginning could allow this syntax temporarily.
I only gave it a quick pass (too quick to give it a score), but my gut feeling is that this is difficult to read. (Edit: Rather, it is more difficult to read than is necessary). There are a few places where the author could have made some small helper methods to increase the clarity. For instance, rowStrings[i].substring(0, 6).equals(delimiter+delimiter+delimiter+delimiter+delimiter+delimiter) would be more readable (IMO) as: rowStrings[i].startsWith(Util.repeat(6, delimiter)) In that example, startsWith is an existing method on Strings, and I made up the 'repeat' method, which does what you'd expect from the name.
Wow, wish I saw this a year ago. Wrote an app ended up trying to factor primes out the given number number. If it couldn't be factored out, it was a prime. Unfortunately this led to quite a mess as the range of numbers that I could determine was dependent on the size of my factor array.
Like most time in my job, I dont have alot of time to look at code, so something I find important is how clean / understandable the code is and at a glance its where I'm struggling with your code. In particular, process request seems to be 200 odd lines long, doing many things and branch / nests alot and to understand you have to delve in to the guts of it and also read comments (which on shared code will go out of date). I think the complexity would really show if you try to unit test the code. [Clean Code](http://www.amazon.co.uk/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) is an awesome book on the subject. At times may go over the top a little but the message is great. So to break that method down and make it cleaner / more understandable you can do 2 things. Firstly, small private methods that self document: For example in the middle of the method you do this with a comment: //----- DATA SEPARATOR -----// String delimiter = "\t"; if ((REQUEST.get("FILE_DELIMITER") != null) &amp;&amp; (REQUEST.get("FILE_DELIMITER").length() &gt; 0)) { String sep = REQUEST.get("FILE_DELIMITER").trim(); if ("COMMA".equalsIgnoreCase(sep)){ delimiter = ","; } else if ("PIPE".equalsIgnoreCase(sep)){ delimiter = "|"; } else /*if ("TAB".equalsIgnoreCase(sep))*/ { delimiter = "\t"; } } could be extracted to this: String delimeter = getDeliminator(request) .... } private String getDeliminator(Request request) { if ((request.get("FILE_DELIMITER") != null)) { String sep = REQUEST.get("FILE_DELIMITER").trim(); if ("COMMA".equalsIgnoreCase(sep)) return ","; else if ("PIPE".equalsIgnoreCase(sep)) return "|"; } return "/t" } The advantage with that extraction is now processRequest has got smaller and there is now 1 line saying get delimeter that I can understand straight away because the name of the method is saying what its doing. Because of that you don't need that commend and the code becomes self documenting. Its also simpler because there is no longer variable being defined with a default value that may or may not get overriden. The delimeter calculation logic is now wrapped up in a nice little method that does 1 thing. Ultimately processRequest doesnt care how the delimiter is calculated, just that it gets one. Everything has got a little cleaner and simpler. So yeah there's many places that that sort of extraction / self documentation will help. Generally speaking a method should do 1 thing, if its over 4 lines long then it may doing too much (ok that quite extreme, but long methods are a sign of methods may be doing too much) The second thing that may help is breaking that class up a bit. Its doing a lot, processing request, generating a file, doing all sorts of things with processing, writing the file out. If you break things up a little you can reduce the complexity of whats going on, i.e. process request process the request and leave it up to something else to do file generation etc. Its handy because it greatly simplifies testing, you can then starting testing the individual components. More along the single responsibility type idea. A couple of other quick things I noticed, only use CAPS variable names for static instances. You have dual variables request and REQUEST doing differrent things,, i dunnore, request and requestTable? Theres also a couple playes where you are catching an exception and doing nothing, it supresses the exception, generally thats bad, at least do a stack trace or log the exception happened. Its hard tracking down bugs / odd behaviour when exceptions are suppressed.
Heh. I created a custom query language for our project a while ago (using Antlr4, fun!) and it's one of the first shortcuts I created. 
It's a nice idea, you'd just need to ensure a total lack of ambiguity etc. Now, go get yourself added to the Java steering committee! 
Ignoring the fact that this is just a servlet and that there are more modern and better ways to do what you're doing... Your configuration type items: private static final String HMAC_SHA1_ALGORITHM = "HmacSHA1"; private static final String HMAC_SHA1_KEY = "FBEADDAFC5121193FBEADDAFC5121193"; These guys should probably be injected through something that accesses a configuration file. This is likely to be a cross cutting concern in your application, and it should be moved out into a configuration file. processRequest() does a lot of stuff. It's better to have smaller methods and classes which do less stuff, where the purpose is clear and preferably related to one particular concern. Sanitizing your input: That should be done separately from the database querying, file opening, file iterating. The reasons for this is it makes everything easier to test because you can mock smaller methods within your testing framework and it makes the code more descriptive (based on what you call your methods) and easier to read. The database querying in processRequest: Why not use the DAO pattern, that way any database calls can be mocked for testing purposes. If this targets JDK 7, why not write the if/else for delimeter-type as a switch statement? That's more clear. NedlinkResultSet.cells = NedlinkResultSet.AddArrRow(NedlinkResultSet.cells, rowStrings[i].split(delimiter)); Don't reinvent the wheel. There are plenty of great CSV/Delimited File parsers out there. java.util.Scanner can do it for you (Albeit less nicely than some of the third party libraries). Either way... It seems ugly. Your crypto stuff: Why not have a universal class for that? Code Quality Level: 2/10. 
huh? I thought HTML5 was going to be an undead "living standard" that would never actually be finalized.
The problem with including equality is that `if (a == b != c) {` already has meaning if c is a boolean 
I had a lot of fun with a similar project back around late 2005. It was funny hearing the public opinion at that time that successful poker bots were *at least* 5 years off. I think I ran it for about a couple months straight and made 200-300 bucks total... nothing amazing but as a college student it was great at the time. This also reminds me of a roulette 'bug' that I heard about a couple years later. Apparently, this online casino, in an effort to make roulette *appear* more random, had some logic where if it landed red or black 16 (I think it was 16) consecutive times, it would make sure the next spin was the other color. So, I ended up setting up a bot that would just spin the wheel (for some reason you could spin for 'free' without winning/losing anything) until I got 5-6 consecutive spins that were red or black. Then, I'd bet like $1 and if I won, start the process over. Otherwise, increase bet and try again. Repeat until the 17th (or whatever) turn if needed, at which point you'd be *guaranteed* to win. You needed a good bankroll to get through all the spins (I think it was $200 or so), so after testing with play money for a while, I was convinced I was going to be rich. Loaded my account with real money, watched my bot rack up about $100 before I ran off to play Halo for a while. Came back later, I was like +$500!! Then I decided to do some homework, and after a while came back to an empty account. Looks like that 'bug' was fixed, or never existed in the first place... my dreams of becoming a multi-millionaire from cheating online casinos were crushed. Good times. 
Well, if some kind of extra-syntax would be introduced, like I described, the interpretation could be like I described, too.
Coming from you, that's a nice confirmation.
That's WHATWG HTML5, see https://html.spec.whatwg.org/multipage/introduction.html#is-this-html5? Apparently W3C HTML5 is a fork of it. &gt; There are numerous differences between this specification and the W3C forks; some minor, some major. For fun and giggles.
Some remarks: } catch (Exception Error) { } Things wrong with this: * You're swallowing exceptions, this is terrible. If something is wrong you'll never notice it * Wrong name, it's an exception, not an error, you also capitalized it when you should not. Some other issues: * You have System.out calls in your code. Use a logging framework, this isn't 1992. * REQUEST in all caps. Why? Follow the Java standards please. * All your logic in a single monster method, completely horrible. * Constants mid code (like String delimiter = "\t";), why even bother to use a var there? * IPeopleQueryResultSet NedlinkResultSet = new IPeopleQueryResultSet(); again horrible inconsistent naming conventions. * Writing CSV that is not CSV: use a library like apache commons CSV for god's sake * Concatting strings without using a StringBuilder, yuck * Inefficient replaces like in Double.parseDouble(data[cnt].replaceAll("R", "").replaceAll(",", "").replaceAll(" ", "").replaceAll("\"", "").trim()); Frankly I could not be bothered to check the rest. I'm not even going to rate it either: I would've rejected the PR outright and have told the person to go start with the Java tutorials.
We converted our applications 6-9 months ago (3.6 to 4.x). I don't remember the details, but it was a largely painless process. A handful of package names changed and that was about it. We're using JPA, C3P0, and [stripes](https://stripesframework.atlassian.net/wiki/display/STRIPES/Home). Happy to answer specific questions if you run across something. 
cool thanks. from what i've looked into initially, most of the effort i think is going to be centered around Validation. our application uses tons of custom validator code and i believe i saw that the validation framework had some changes.
Cool story. How was the image recognition implemented? That's a segment of programming/analysis I've never really thought about before. Depending on where the player was "sitting" you probably knew exactly the right coordinates of pixels to grab to represent your first and second cards, right? Is it as simple then just comparing those results to a previously defined set of pixels that represents an ace of spades or whatever? Or is there logic that specifically looks for an A of pixels or whatever. Just curious...
If you know the exact location of the cards and the bytes don't change you can just do a byte-for-byte comparison agains the set of possible cards.
Is human readable shitty code an option?
What kind of GUI? Is it a web page? How does a user run your program?
Nah. “Undead Standard” is what we call it when it keeps changing even though nobody cares any more.
This problem can't be solved because of the constraints that java puts on 'truthiness' being a boolean only. In other languages, the resulting computation in an 'if' statement can be more than just a boolean, they can be null, a non null object, zero, a number, as well as a boolean. You can do a lot shenannigans with this definition of truthiness, not so much in java. Also there is no indication that the value you are testing doesn't/can't change between testing bounds. What if idx is not simply idx but doSomething(idx). Does doSomething(idx) get called twice or is there an implicit temp variable holding the result. And there is the final question of whether to throw an exception if the upper bound is lower than the lower bound as the result will always be false no matter the test value (except in the discrepency above.) if( max( 0, idx).equals( min(idx, myList.size())){ VS. if( if (idx &gt;= 0 &amp;&amp; idx &lt; myList.size()) { VS //defined elsewhere; checks preconditions. public static &lt;T extends Comparable&gt; boolean inRange(T lower, T test, T upper); if(inRange(0, idx, myList.size()){ 
Can anyone ELI5? I don't understand this.
My main lesson learned is that it's probably better to upgrade to JDBC... :)
&gt; Why!? This guy is an idiot. "Hey look what I can do! I can bring a cancer such as Java into iOS and fuck you guys! woohooo!" Are you worried that you're job is in jeopardy? Your response seems very emotionally unstable. * Why do you care if somebody writes their application in another language. It either doesn't effect you, or you can choose not to run their application. * Programming languages are like different forms of a hammer. Some hammers are special purpose, and completely inappropriate for the job, but you can use it in a pinch. e.g. Assembly for a large application or Objective C for anything other than iOS before Swift is in widespread use. * A lot of people, especially on this subreddit, appreciate the tooling, community, libraries, maintainability of the platform. And view it as a viable mobile solution (Ahem... Android) so it's not necessarily porting business applications. Why are you even on this subreddit? * The maintainability, library selection, static analysis, build automation, cross-platform capability are far superior to Objective Cs. So it's actually quite useful to step our of vendor-lock-in and open up the environment.
I'm developing an Android Control Station along with a drone and needed Java implementation of MAVLink protocol. Enjoy!
&gt; This problem can't be solved because of the constraints that java puts on 'truthiness' being a boolean only. I don't understand how this is a reason that makes this *impossible*. Is there some kind of check at the entrance that prevents any logic after that to ever do what I propose? &gt; Also there is no indication that the value you are testing doesn't/can't change between testing bounds. That's a *good* question, but for this and your next=last question, please just see my response here: http://www.reddit.com/r/java/comments/2krre6/idea_for_java_simplified_value_range_syntax_if_0/clo3wzn?context=4 The method would be executed only *once*. And if the expression can not ever be true - tough luck. Could be a compiler check, but an *exception*? Not necessary.
Two standards bodies have "HTML5" definitions which aren't necessarily the same. One of them has stated that the standard will be open forever and never finalized. The other just finalized the standard.
yeah, i think we are saying the same thing...i think. i said "pixels" at one point but i really just meant bytes. as someone who works on boring enterprise apps all day then i'll never really be an end-user for, that would be such a rewarding program to write.
This is very relevant for Java...
Until is fairly well understood. It's "up to, but not including." Perl has had the until(condition) {...} loop forever. It's syntax sugar for while(!condition){...}
It's impossible because there is no operator overloading Java. &lt;,&gt; only return booleans and so intermediary steps reduce/lose information you might have down to a simplistic true/false. You are then asking it to make a decision about a natural ordering with a boolean and some other type and &lt;,&gt; only take like types as input. You complained about the scala example being ambiguous but the range constraints and the temporary value problem are even more ambiguous. You should study the Comparable javadocs and understand what it means for a type to have a natural ordering; read up about why there is no operator overloading in Java; and then maybe look at how truthiness works in C++ or even worse Javascript. In Groovy you can do something like this if( (0..&lt;max).contains(val) ){ The .. syntax indicates a range. You can use &lt;,&gt; to indicate if the end values in the range are included. The shortcomings of Java is the reason Groovy, Scala, Clojure, Kotlin,etc exist. There is this trend lately in programming languages that they feel like they must adapt to become 'all things to all people' and that comes with the price of added complexity. Instead of ego stroking these language designers and having this huge influx of cottage languages, they should have found a way to accept different languages in the same file such that you can use Java and then switch to Groovy for the if block, then back to Java. It seems to work in HTML with CSS and Javascript, but then we all know how much wailing and gnashing of teeth that causes. Maybe the concept of 'files' is obsolete but I don't know what the alternative would be.
&gt; VB6 might be 16 years old, but it's in widespread use today. IMO that makes it modern. When it phrased like that hopefully it sounds as silly to you as it does to the rest of us. (And VB6 is sadly in widespread use in corporate environments)
I'll do you one better. ALL THE CODE! https://drive.google.com/file/d/0B-NprxVaBNNSQXNaamh2ei1EU1lvclBBV3FOMV9TYTNjdnU4/view?usp=sharing
I was looking at specific pixels, as you'll now be able to see in the code! I'm sure this is not the most efficient way, but it worked. One other thing I didn't note above was that I would do "batches" of Monte Carlo runs (I think 5 or 10k hands at a time, the AndroidPoker app is quite a bit less though), so as other players were taking their time, I would be able to run more batches and get a better approximation of my win percentage. Also, I tested my card calculator against Pocket Fives card calculator to ensure it was at least very close to correct (not missing some special cases like the Ace being high and low, A2345 is a straight and so is 10JKQA, but don't want to allow KQA23 to be noticed as a straight). I did even consider some humanizing aspects of the bot before getting caught too, like where I would click on the buttons, I randomized a box of X by Y and would randomly click in that area, also the timing I did some random length delays. Cheers!
Very cool! One of the biggest encouragements to me is when someone says, "you can't do that". I generally think, "Oh yeah?", and it spurs me on to prove them wrong. My dad was very skeptical about my program and I was very proud to show him it running once it was functional (even though he hated gambling). I like the roulette story too. Too bad it didn't work out a little smoother for ya.
Or that
doGet and doPost can both be handled in done via "service()" regarding processRequest() separate the concerns. so 1) Http Processing 2) file handling 3) file contents processing not totally wrong,but not stylistically good, variables which are all CAPS Hashtable&lt;String, String&gt; REQUEST = new Hashtable&lt;String, String&gt;(); Same with variable names starting with caps: IPeopleQueryResultSet NedlinkFinalResultSet = new IPeopleQueryResultSet(); for more detail: https://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s5.2.7-local-variable-names The purpose of HMAC in this case is to "sign" the request to attempt to make certain it was sent by a part knowing the secret. Having the secret in the source is considered bad form. Security audits would dig you on this. The secret would ideally only be "attached" to the code on the production machine. So testing and development would occur with a different key. Overall I would rate this not awful, but not really into the good or great category. 
Yes, but it's hardly universal.
Just to clarify that there are languages, mathematically inclined, that implements this and the feature is called "chained" (or "chaining") comparisons. It is implemented in Julia as well as in [Python 2](https://docs.python.org/2/reference/expressions.html#not-in) and Python 3 and Mathematica (and possibly other languages) but probably not (many versions of) [Fortran](http://osr507doc.sco.com/en/tools/Yacc_precedence.html) and clearly not MatLab. The [Julia Docs](http://julia.readthedocs.org/en/latest/manual/mathematical-operations/) read: "**Chaining comparisons** "Unlike most languages, with the notable exception of Python, comparisons can be arbitrarily chained: julia&gt; 1 &lt; 2 &lt;= 2 &lt; 3 == 3 &gt; 2 &gt;= 1 == 1 &lt; 3 != 5 true "Chaining comparisons is often quite convenient in numerical code. Chained comparisons use the &amp;&amp; operator for scalar comparisons, and the &amp; operator for elementwise comparisons, which allows them to work on arrays. For example, 0 .&lt; A .&lt; 1 gives a boolean array whose entries are true where the corresponding elements of A are between 0 and 1." [MatLab](http://stackoverflow.com/questions/8270105/if-axb-in-matlab): "While a &lt; b &lt; c is legal MATLAB syntax, I doubt that it does what you think it does. It does not check that a &lt; b and b &lt; c. What it does is, it checks whether a &lt; b, returning a logical value (maybe an array of logicals) and then, interpreting this logical as 0 or 1, compares it against c" As is partly exposed in both the MatLabs and Fortran/yacc discussion, there are some issues in implementing chaining. 
Would be great to make it easier to go from Android to iOS instead of having to do native code. Android is a far better platform to prototype/MVP mobile apps on instead of dealing with the crappy Apple review process. Not to mention Objective C is a painful &amp; obnoxious language.
If you used the GUI creator in NB then you have a Swing GUI which makes things interesting... I'm going to assume you really mean "How would you go about making a program that allows multiple users to log in *SIMULTANEOUSLY*?". A Swing app is typically installed on each users PC, so each user has a completely separate copy, in this case you wouldn't even worry about logging in, maybe just password protecting. The reason other people asked if it was a web application is because Java web apps (Servlets,JSPs,JSF,etc) are a central app that everybody is sharing. With a web app you are looking at the applications user interface (UI) with a web browser but the Java code stays centralized and runs on the web server. You need the same thing but with a Swing GUI. You need to split your application into a centralized part that runs on a server and a Swing GUI part that users install on their desktop. A client-server app. This all ends up tying into MVC (model-view-controller) a lot because you don't see many Java Swing client-server apps that don't follow a MVC design. So you move all the business logic code and data to a central machine and you need some way for the GUI app to talk to the back-end. This means some type of networking. You could do your own with ServerSocket, Socket and different type of intput/output streams but that is a pain. Java RMI is a pretty easy Java specific technology that will hide a lot of the network from you so you might want to give that a try. Remote EJBs would be the old-school Java EE equivalent. The typical modern networking method would be to use some type of web service, either SOAP (JAX-WS) or REST (JAX-RS).
Java code is compiled so you don't distribute the source like with scripting languages. However, it's quite easy to decompile Java in particular back to source (it won't be exactly the same though). You can mitigate that to a degree with obfuscators. Although personally I think withholding the source code from paying customers is a scumbag move.
There are several aspects of an answer to this. There are tools that can prevent general disclosure of the source code through [Bytecode Obfuscation](https://www.owasp.org/index.php/Bytecode_obfuscation) (Note the URL is Owasp - not Oracle). But what's actual the concern? &gt; "If I get an order for a web site basically my customer can see the source code if he/she wants to. ...Is there a way to hide the source code even if the customer got access to ftp/ssh access to the server?" Who now owns the code? How is it maintained? Do you use a repository (e.g. GIT/SVN)? 
You should not try to hide the source. Its bad practice and a program gets more complex over time. So if you got the job now u will get it later too.
See [here](http://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html#exec%28java.lang.String%29).
Thanks for the advice mate! When I mean allows multiple users to log in I mean a program that will show different data on different users profiles, for example, I am the admin, I give you an award and only you, when you now log in the award will show on your profile(no need to make profiles visible to other users) and then when I log in to my non-admin account it won't show an award for me.
Just run your XSLT in a unit test and verify output. See [here](http://docs.oracle.com/javase/tutorial/jaxp/xslt/transformingXML.html).
I am actually confused on what is considered relevant on this forum. I think a thread about AngularJs being deprecated was removed because it did not relate to Java. I could be wrong on that and maybe the poster deleted it. Personally I think Java is very commonly used to build web applications so topics about web technologies and web servers should be relevant. The upvotes seem to say most agree with me. I do not think Scala is as relevant to most Java developers who would be on this site. I think up and down votes can take care of making that decision as well.
In your application, just remember who logged in and use that to filter the data so that the wrong person can't see it. If you are using SQL queries to retrieve the data, add the username to the WHERE clause (or whatever id you are using to distinguish one user's data from another).
Im not experineced in online databases, but offline like textiles Im alright. Each user has a special line separated by a '#' so basically: username#password#name#surname#etc is it possible on my admin screen to add another part to this line but by choosing which line you want to add it to? So I could chose the user 'vizzeh' for example and add something else onto his line.
Classic Internet moron talking shit when he knows nothing about the person he's talking to. For your information, I was the developer of an iOS6 development certification for PreVisor and a validator on their iOS7 updated version, which you only get to do if you're a subject matter expert... not to mention the actual development I've done both on the job and on the side... so clearly I did "take the time to learn" O-C, and it's exactly why I can comment on how ugly it is. Yeah, it's "valid" in the sense that it gets the job done, but it's far from a joyful experience. Now, run along, and don't be butthurt 'cause you got owned.
yes and we have implemented unit tests in java as wrap-around for XSLTs to make sure the transformations are happening correctly. But, any code coverage tool is only giving us code coverage on the Java code. My question is - how do I get some reporting out of XSLT execution that is taking place. 
See Spring DATA JPA http://spring.io/guides/gs/accessing-data-jpa/
I used Robot to make a couple of World of Warcraft bots a few years ago. Fortunately, unlike you, I never got caught. It's a pretty handy and easy-to-use class, especially compared to the alternative (win32 GetPixel() and friends). 
And some code examples: http://www.rgagnon.com/javadetails/java-0014.html
Try Sonar or some other static analysis tool. It will show you the most obvious problems. To be honest the code is horrible: * You violate all common naming conventions. This makes the code unreadable. * processRequest is waaay too long. * Swallowing exceptions * GetNetbankDate() -&gt; reinventing the wheel. Use date/time formats. * Encryption key in source code instead of configuration * useless comments that indicate a "section" of the code - e.g. "//----- DATA SEPARATOR -----//" WHY? Just put the code in a function with an appropriate name! Well structured code with meaningful names does not need any comments. 2/10 As someone else mentioned: read Clean Code by R.C. Martin
&gt; you have a lot more control about what is happening. Can you give some examples? 
In C#, at least, it's totally optional so you get the best of both worlds. If it's a short type like `string myVar = String.Empty` you can use that, but if it's a complex and unwieldy type like above you can use `var`. I'm not sure what you mean by a pseudo-object, in C# writing `var myVar = String.Empty;` and `string myVar = String.Empty;` result in exactly the same bytecode. It's compiler sugar and nothing more.
Should have something count the odds of you winning the hand while doing that have it raise the bet etc...
Upvote for recommending the "bible" ;-) When people start programming they are often taught that the purpose of functions is code reuse. If you have a block of code that is repeated in several places you should define a function. The purpose of functions as a tool to structure code is often neglected. As a result beginners are often hesitant to define a function if it is only going to be called once (=no reuse). To them it seems like extra work (function definition, parameter passing) with no benefit.
Alright thanks.
I love it! Using RevealJS is a lovely touch too! Love to see similar stuff on other subject areas too.
Personally I prefer [ProcessBuilder](http://docs.oracle.com/javase/7/docs/api/java/lang/ProcessBuilder.html) to Runtime, as I find it makes passing in arguments a whole lot easier, especially with regards to escaping characters.
Thank you very much for your kind feedback. This was indeed my first RevealJS presentation, though I am a PPT master.
How do you fetch data out of the database? However you do that, filter out the data that only applies to the user. Online databases have a special language for that called SQL. I don't know anything about textiles, but poke around and see if it provides ways of filtering the data. Worst case, you will have to do that yourself, looping through the data and scrubbing manually.
Surely there must be some XSLT coverage tools that hook into JUnit. Google is your friend. 
Shiny!
Typically I tend to do very graphically styled &amp; arranged presentations. ([See here, mostly german](http://de.slideshare.net/bentolor) ) Lately I try to focus more on a zen style and. As you write plain HTML RevealJS is a perfect match for this approach. So it's perfect if you can fit your slides in a few basic formats the theme gives you. I partially adopted the seed HTML and CSS from another awesome RevealJS presentation. And it just looks awesome! (btw. on my [Github Repo you can grab the source of my presentation](https://github.com/bentolor/java8-lightningtalk/), too) On the other hands even things as a 2colum bullet list gets troublesome and you need to write your own HTML/CSS. I failed to create a PDF of my slides, too. So - unless your target audience will appreciate the RevealJS style or your presentation is really going to be a plain bulletpoint/text/code colection, PPT will probably more productive for most of us.
&gt; or your presentation is really going to be a plain bulletpoint/text/ The way I do PPTs it's mostly a small collection of talking points on the PPT. I tend to kept my presentation text light. I think I might give RevealJS a shot next time.
Oh... thanks for pointing this out! Javascript support is optional? This comes somewhat to a surprise for me. Are there any key points on Nashorn vs. Rhino worth mentioning?
arrow keys
I tried running this and it gave me "illegal escape character" 4 times for "\" when I ran Process cmd = Runtime.getRuntime(); cmd.exec("C:\Users\kids\Desktop\images.jpg"); Anything? EDIT: Sorry, i tried to put the 4 spaces for code formatting but it's not working. :(
Read [this](http://docs.oracle.com/javase/tutorial/java/data/characters.html). The \ character has a special meaning called an escape sequence. If you want to include a slash, you have to use a special notation - `\\`. Also, you can use the other slash / instead.
Ok, so you do have an interesting point. Should in the process of learning we go back and learn all the old ways of doing things because they are "fundamental" ? I think we should! Loops ( or heck "jl loc" ), memory management, machine code level atomic operations, they're all important to know about. I find programmers who ONLY understand a high level construct are not as effective ones who know roughly how things work from the hardware on up. So yes, learn all this stuff. But I think it is appropriate to avoid it unless it's specifically warranted or you happen to enjoy it for some reason. The higher level constructs have come into existence for a reason. 
Yes it's optional but if you have an application running on a VM without Javascript support you should be able to plug-in support for it by dropping a jar on the classpath implementing JavaScript and exposing it via the scripting API (I'm not sure if there are available Nashorn jars though). Nashorn is more modern than Rhino, it's supposedly faster and probably supports newer Javascript features. It also comes with a new syntax for working with Java package imports from JavaScript (on Rhino you were importing Java packages into the global scope using magic, now you are making JavaScript objects act as Java packages).
I think think there is any significant security difference. Consider that some database will expire unused connections, so if you have an open connection it's good to test it before you use it, and to catch and appropriately handle exceptions around having the DB drop your connection. More important than the DB connection is user level security. If a program stays logged in with a PERSON's credentials, but that person walks away from their browser or terminal, is that a security problem ?
Well, it depends on which version of Java you're going to use. A lot of changes have come with 8 but it's really just syntactic sugar (plus functional interfaces, streaming and a few other things). Also, you should really only use Java for the backend of websites, not the front end.
&gt; Actually no. Javadoc is in comments and ONLY produces documentation. If the syntax of the javadoc is wrong or incomplete, the code will still work perfectly. Without additional details it's hard to understand what you meant by annotation. In design, Javadoc in comments is the same thing as a comment annotation in PHP (which PHPdoc also uses). So yes because you said no to be argumentative. The question is what kind of annotation you are talking about that was special (could halt a program?)....which really wouldn't halt a program. The parser would halt, the same as if you used an errant character in either language. Maybe this annotation wasn't evaluated until runtime, which is still a parser issue just not the core.
Getters and Setters help with data encapsulation but are just a convention in Java. They allow you to hide the internal storage details while providing an clean and simple interface. For instance consider a Distance class that stores a distance like "1 meter", "2 feet", "3 light years" but also allows you to add "1 meter" and "3 feet". If you implement Distance with getters and setters you can set the distance as "1 meter", and show it as "1 meter" while storing it as {value=1, units="meter"} and magically do the addition. Without the getters and setters your users will have access to the underlying variables and will be able to change them, generally at the worst possible moment. Personally I prefer all variables to be private or final and only methods used for changing settings. I'm not to convinced about the Bean everywhere attitude. One last point: getters and setters in the Java Bean sense are excellent for third party tools to access your classes in a generic way. You're probably a long way from worrying about that but some products like Direct Web Remoting use it to excellent effect.
ooh look at this guy, Mr. 'Subject Matter Expert'! You sure showed me! I'm definitely gonna go cry now.... You sound like the teacher suckup in class, yeah you may be smart, but no one fucking likes you.
my experience was that "annotations" in the PHP comment block would be used to generate code by a particular PHP framework. Hence if you change the comment block incorrectly, the code would stop working. i.e. this was coding hiding inside of a comment. You are correct, it was not at that moment PHP code so the PHP parser could ignore it, but it was code nonetheless. FWIW, this is what I mean by annotation in java http://en.wikipedia.org/wiki/Java_annotation Since PHP doesn't have a way to do this within non-comment blocks so it hacks in like this: https://r.je/php-annotations-are-an-abomination.html 
I agree that this is REALLY BAD. But, a lot of really bad things are done in PHP so....best to just let them do that and figure it out for themselves. Thanks for the detail. I bet that PHP will eventually get it's own VM and preprocessor workflow.
I love how each page slightly pans across the landscape.
Music to my ears... and this is a senior devs work... and I'M the incompetent one..
Thank you! This isn't my code I'm trying to rate. I'm a junior developer (3.5 years) and the code that I posted was from a senior developer here at my job. I was told to re-write this code, but I can't read the abomination! It's the ugliest, messiest code I've ever seen. When I told the senior dev that I'm finding it difficult because of this and that (basically everything you mentioned above) he got offended and kinda pissed off...When I asked him why didn't he abstract some of the functionality into other classes he said that he didn't because his code is easily readable and breaking it up didn't make sense to him. But I mean am I just being OCD with the kind of standards I have in my code, is it fine to write garbage like that? And a senior dev?? I just wanted to find out if I'm the one in the wrong and because I can't read and understand his code that I'm somehow now 'incompetent'.. PS - some feedback on this would be appreciated.
Thank you! This isn't my code I'm trying to rate. I'm a junior developer (3.5 years) and the code that I posted was from a senior developer here at my job. I was told to re-write this code, but I can't read the abomination! It's the ugliest, messiest code I've ever seen. When I told the senior dev that I'm finding it difficult because of this and that (basically everything you mentioned above) he got offended and kinda pissed off...When I asked him why didn't he abstract some of the functionality into other classes he said that he didn't because his code is easily readable and breaking it up didn't make sense to him. But I mean am I just being OCD with the kind of standards I have in my code, is it fine to write garbage like that? And a senior dev?? I just wanted to find out if I'm the one in the wrong and because I can't read and understand his code that I'm somehow now 'incompetent'.. PS - some feedback on this would be appreciated.
I am somewhat alarmed by the suggestion that this is a one year, one person job. That sounds like setting yourself up for a lot of wheel re-inventing and best practice ignoring. Is it a startup? Is doing it as a six month, two person job, with the other person having a java background, not feasible? That way I'd definitely say 'sure, no problem'. 
I don't see the resoning behind that oracle recommendation? I would just offload the connection handling to a connection pool, c3p0 for example. 
I'm on a team with 7 other senior Java devs and they would all have the same opinion as I have regarding this code. It's utterly terrible and would never pass any peer review here. Heck, if you'd ever get into troubles at your job I'd be happy to 'consult' with the manager of that dev for free. There's enough terrible devs that somehow got a 'senior' role as it is. 
it's much easier to implement a streaming output in spring mvc because you get direct access to the httprequest and response than with jax rs. Spring mvc give you access to all the underlying servlet api. As far as I know that's not the case in jax rs making some situation awkward.
That is a bad on my side, won't be doing that in future. 
Thank you, I appreciate that :)
I really don't know all the details yet. I've seen jobs like this before, where the description makes it sound like you will be doing NASA-level work all by yourself, and then when you show up, it turns out that you are part of a team and you have somebody telling you what to do anyway. So I'm reserving final judgement pending a further interview. Thanks though. I will keep an eye out for junior dev work, if it exists here.
Ah I see - the key innovation is the better integration with Java allowing new things like Project Avatar / Avatar.js
..but remember to press _down_ then whenever possible :-)
That's a reasonable suggestion, though something like guava's ordering class could accomplish the same in a more generalised manner.
Obviously I don't know the situation and anything I learn is from one side of it, so I'll play devils advocate for shits and giggles. So things often overlooked about legacy code: * seniors dev's were once junior and are allowed to make mistakes / write bad code (modern practices, peer review etc have come about for a reason) * it can be old, real old, code I've written has been before "clean code" was a thing and was in hindsight terrible, oh well you learn.... * it can be written at times of great pressure. either work deadlines (this has to be done in 2hrs or the project is cancelled / dead), or maybe half the team were ill that week etc. * requirements etc can change alot half way through code and break things up * Even they may have just had a bad week (I dunno, their dog died) * Their boss / senior dev / mentor at the time may have trained them that way, or maybe they had no help/support * They were working on 3 or 4 things at once / maybe not caring so much cos their boss was a dick Also, he seems to have stood up for the code but it maybe because you are somewhat calling them out on it, why does they have to take the shit for you not refactoring this code in time by you blaming them for its state in the first place? One thing for sure in any career, back people into a corner - expect a staunch response. And I think it sounds like what you got, he didnt really stand up for the code but he did enough to say go away its not my problem. I would presume there is a reason why they are asking you to re-write this code? No (decent) company rewrites code for fun, its a waste of time / money. I hazard a guess they are asking you to because anyone / everyone can understand this code is not good and they probably want to improve / add to it but can't easily, so will invest time improving it first. Any project more than a few years old there will always be code / people like this, quite simply times change / develop and people are people, no ones perfect. Its not something to get angry over or annoyed about, accept it as an inevitability and develop ways of dealing with it. One thing for sure, I dont quite understand posting code here, do any of the other java dev's in your company follow reddit at all? The potential backlash on you from the senior dev/ people at work / the company is pretty shitty, you're lining yourself up to be put in a difficult situation for absolutely no reason, no real gain or benefit for you -- which career development wise aint bright. Unless you're planning on going back to the with a list of reasons why his code is bad, in which case that's an even worse idea. This is ignoring the fact that this is the companies owned code you've pasted for all to see. From your code I seem to remember the name of the guy who wrote it is at the top. Random question -- do you think you could have handled this situation any better? From what it seems to me you're struggling on the task, managing to distance / cause trouble with a senior dev, distanced yourself from the senior dev that can help you the most on this task and by the looks of it angry about the situation -- all of which aint good. The distance is important as its more of a divide that has been created by your interactions, it has pushed the situation into a right or wrong / a win or lose type one -- i.e. someone is gonna have their nose put out so whoever that is will fight bitterly for it to be the other person (part of the backing into corner / their staunch response). So another way to have approached this situation for me would be to refactor the code introducing elements of clean code, sensible design, things it seems you know. Once you are under way, then ask the senior dev to come over to your screens for their input. That is to get some insight to the bits that are difficult (i.e. what does this bit do here) but really the real reason is to start selling your senior dev on clean code / design etc and the things you are doing. The idea is by getting / accepting his help it means: * you would now be working with them and their "more experienced" input / ego is being massaged, * they will become alot more open to suggestions / being educated. You don't necessarily have to rub it in his face, they will see your code (you could explain something or refactor something in front of them, i.e. its subtle) * if the shit hits the fan, you'd be having a technical discussion about why your code is bad and you can argue logical points why actually it is good. The real important difference here is the discussion is about _your code_, not his. So you will not be discussing why their code is bad / they did a bad job, i.e. they will be much less defensive and open for disucssion. * If the exchange goes well, your design choices would have been imparted, they would have learned but most importantly you would have gained some of their respect and trust rather than causing them trouble and losing respect/trust. This will make them easier to deal with / more open in the future and also they will likely talk about anything new anyone they are close with -- just be wary to get it committed / talk to people, you dont want to just give them your ideas / them him steal them. * no one is right or wrong, no ones nose is put out, we just develop Senior devs, management, directors, clients etc will often be out of touch / entrenched in their ways, arrogant etc but that doesnt mean you should fight with them, blame / point out etc. Rather be wary of their side (put yourself in their shoes), its been my experience there is always a way to approach or turn a situation for your own benefit, and by that I mean everyones benefit, win-win situations are the best, especially if you win more. Communication style/tailoring is so important and by the sounds of it, something that would have helped you with your recent situation, there is alot more to a career in IT than technical programming skills. I would honestly recommend book called the clean coder maybe, but for more advance type reading, a couple book on how to sell / sales technique and any modern book on management (Jo Owen has some good stuff for both). These books are great to understanding how good management works / to manage people which largely involves how to control / tailor communication and approach to certain situations. It will help in 2 ways, one how to do that shit, i.e. career progression how can you get promoted in team leady type positions if you don't show an aptitude / understanding for it. Secondly, trying to understand how those people are working now (i.e. the ones responsible for your time at the company), if you can figure them out better it will help you work with them better, which will hopefully get you promoted and then in a place where you can start impressing better coding standards. Finally, they are fundamental skills, essentially in a career you are a product that you alone are responsible for managing and selling. This will be at interviews for jobs, promotions but also day to day is where you can really push yourself as the next time positions, projects open up senior people need to already have been thinking yeah that guys good lets talk to them. But as I said, I dont really know the situation so take my devils advocating with a pinch of salt.
Does OpenJDK 8 support it?
What you wrote here is 100% right. I could've handled it better, I think I posted here 'in the heat of the moment' which.. Isn't really that clever in any situation is it? How this all came about is that I very politely asked him to help me understand a certain section of his code, to which he basically told me that I was incompetent that I couldn't read it... Which.. well it sucked. I like to think that I have a general idea of what clean code is supposed to look like (I've read and understood the book 'Clean Code') and that wasn't it. So me posting here was just trying to figure out if the code is indeed a mess, or I'm just being incompetent like I was told... I got emotional.. Wasn't a good idea. But I did learn a lot from the experience :) Oh yes - I didn't go back to him and told him why his code was bad.. I solely wanted to clarify to myself that the code really isn't that readable after all. But honestly, great comment. I really appreciate it.
Damn. 12 years of programming in Java and I'm still a beginner :(
Yeah, if one of my junior developers committed this code, I'd probably call him incompetent and he'd be doing remedial pair programming, and if it didn't improve I'd get rid of him. And this pull request would never get merged as it is. This guy's a fucking moron. You're not being OCD, this is just unacceptable. Although sometimes if you want to work at a particular place you need to suck it up and work with the guy. Is there anyone above him you can show this to and talk to about this? Or is this the general norm in your repository? Honestly, though it probably wasn't a great idea to post this code on reddit. But if that's how your direct report is going to treat you when you give him feedback and ask for help... Then that's just abusive. It's not like Java developers aren't highly in demand, so give that some thought. 
I almost agree with you. However, the problem with these higher level constructs is that they were designed by advanced developers, for advanced developers. You and I look at a stream operation and intuitively understand the purpose of this code. A beginner simply accepts that it works "like magic" and moves on. The difference being that, when things don't go their way (as is always the case), they don't know how to step back and rationalize about what they're doing. The only point at which they should drop the simpler concepts in favor of the library sugar is when they understand the pain points of said simpler concepts. Only at that point should they discard them. If there's no pain, there's no gain.
Yes (Nashorn is an OpenJDK project).
Haven't tried the coverage feature but I test my transforms with xspec. Really nice test framework for XSLT. https://code.google.com/p/xspec/
I am working with cakupan but the project hasn't seen activity in 2 years. So, either the project is complete (with no addl features required) or people just aren't interested in such a tool. That tells me that maybe this is not such a hot topic area in the code coverage circles. Will try to put some code and see if I can figure out your approach. Can you point me to any resources on what the manifest may look like? 
Thanks for sharing! A couple of thoughts: * Would love to see a BSD/MIT or Apache 2.0 license file attached. * Are you planning on uploading this to maven central? * It would be great if you could submit this into http://commons.apache.org/proper/commons-codec/ 
The Grails user guide actually uses JQuery in its examples of ajax functionality. Are you saying you don't need ajax and just want to deliver the whole dataset, because that is trivial. http://grails.org/doc/latest/guide/theWebLayer.html#ajax There's a plugin for anything specific usually.
Sometimes I need to retrieve the whole data set, other times I don't. It depends on what the user selects in this view. I've seen the AJAX support but don't think it offers much. You still have to write the response handler in JavaScript. And now you have a mix of GSP + JS + JSON + AJAX which is messy in my opinion
What are these servers used for?
https://grails.org/plugins/tag/ui
You get access to all those things by dependency injection using the @Context annotation.
Head First: Servlets and JSP
Maybe he changed it already but the code I looked at shows Apache 2.0 license.
Agreed! Though I think it'd give a more natural feeling of depth/physicality if it panned in the other direction...
How is person instance of integer http://i.imgur.com/tvnIHDK.png
Every other time I open the page, I get a blank page and the console just has Uncaught TypeError: Cannot read property 'apply' of undefined It took me 5 tries before it loaded at all
 - every source file has a header with a link to Apache 2.0 license text hosted on apache.org website - it is already there, see https://github.com/OpenHFT/zero-allocation-hashing#quick-start and http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22zero-allocation-hashing%22 - I don't understand what you mean, because I don't see how hashing project related to the codec project. Actually zero-allocation hashing is not suitable to hash encoded data, I edited README on Github listing this caveat.
http://docs.oracle.com/javaee/5/tutorial/doc/
You're obviously new to Java, so I'll have mercy on you instead of down voting you. Java Platform, Enterprise Edition servers are there to run Java web applications. All Java web applications must use at least a subset of JPEE, specifically the Java Server Pagers stuff.
I do appreciate you not down-voting me, however, I knew this. What I meant was, is this something like AWS, where people can host their web applications, or is this just for the use of people doing Java certification training, or some-such?
Nope. It's just the server application. It's a Java EE 6 server, not a hosting service.
You're right. Good point - I don't want to destroy the overall appearance. Maybe I should add a hint on the first page.
I don't know much about jsp, but is it still relevant in 2014? I've heard it's deprecated.
The specifications themselves aren't too bad, though they tend to have pretty lame descriptions of XML schemas (i.e. a few poorly-worded almost-UML-like diagrams interspersed with stark documentation of the contents). Other aspects of the documentation like coverage of Java interfaces, semantics, examples, handling different formats and various aspects of protocols, are pretty good. * [Java Servlet 3.1 Specification](https://www.jcp.org/en/jsr/detail?id=340) * [JSP 2.1-2.3 Specifications](https://www.jcp.org/en/jsr/detail?id=245) * [Tomcat Wiki Specifications Page) (above links and a lot more](http://wiki.apache.org/tomcat/Specifications) EDIT: link formatting
It isn't and can't be as Integer is a final class. Going to fix that right now 
actually I don't care about jsp, I just want to get the basics to move to more useful frameworks
thanks for the links
The book you are dismissing is a good book. Some exams are bad and while the Web Component exam isn't the most perfect exam it isn't a horrible one. You have some anti-certification bias, try taking a look at the Head First book again. If you *really* just want another book, for many years the Core Servlets and JSP book was pretty popular.
we are all just numbers now
No it isn't. This misconception that is cased by a couple of things - Oracle tries to promote JSF nowadays (some people like it, it works well for most business data-centric web app, and it is a path to Oracle's ADF product). Servlets &amp; JSPs are a mature technology so not much changes. These two factor contributed to JSF replacing Servlets &amp; JSPs in the more recent Java EE tutorial. You can get the older EE 5 tutorial if you want to learn Servlets and JSPs. Another problem is that in JSF 1 you used a JSP file to create your views. In JSF 2 they recommend using .xhtml (Facelet) files. So in JSF 2 the use of JSP file is deprecated in favor of Facelets. This has nothing to do with JSPs getting used as JSPs but a lot of people think this means JSPs are deprecated.
Use named queries. Or even code them down where you need it. When you need then on several places, maybe something else is wrong. 
Long running connections cause problem which is why connection pools have configuration options for idle checking and keep-alive activity. If the latency of establishing a connection isn't bad for you I'd recommend a simple create as needed model (make sure you disable your button so the user doesn't go click crazy). If you want long running connections I'd recommend using a connection pool library.
I think they were looking for a file named license in the root of the repository. I think it's a common practice, but I don't know if it's any more or less common than file headers referring to a license.
Not exactly. You don't need Java EE to run a (Java) web application. And Java EE Servers are not limited to web applications. You can do all kind of stuff with these servers. (integration platform, backend to a Windows client, backend to mobile apps etc...) Java EE is only a package of specifications. These App-Servers offer these specs.
for learning I think this is better
JPA, not Hibernate. 
Thanks /u/leventov. * I was looking for a LICENSE.txt and didn't check the files since I can't use it (technically I shouldn't look at it) unless it's explicitly licensed * Thanks so much! * Digests are essential for validating successful encodes/decodes. You can see all of the ones currently in apache codecs in org.apache.commons.codec.digest Could you elaborate why you think it shouldn't be used.
Is anyone asking for cloud based IDEs? seriously?
It sounds a bit crazy. But maybe its not. We do so much online that used to be desktop - eg gmail
Posted day three :D 
Stop spamming your website, read the [Reddit rules](http://www.reddit.com/rules/).
If the resulting encoded/decoded byte sequence is fully dumped into memory, there is no problem to hash it with zero-allocation hashing. There is a problem, if you want to decode/encode and hash "on the fly". I publicized the project in the volume I actually needed, and currently have no plans to develop the project further, except bug fixing/maintenance of already existing code, of cause. But I would be happy to accept contributions, if someone is interested in development of the project.
Here's a StackOverflow post. http://stackoverflow.com/questions/12370351/setting-the-certificate-used-by-a-java-ssl-serversocket The hard part is that the SSLServerSocketFactory (analogous to the ServerSocketFactory) uses the keystore from the command line properties if they are set. It's also quite easy to write a bad implementation of the client end afaik. Fortunately, Google has a well written guide to how to write a secure implementation and covers some of the issues you will likely come across. It's aimed at the Android platform, but the API is identical: https://developer.android.com/training/articles/security-ssl.html Note that you have two ends to be concerned about: 1. You have to provide your server the certificate and the private key so that it knows what to use. 2. You may have to provide your client the certificate (but not the key) because your certificate may not be signed.
Like most programmers, I am a polyglot - but Java is the only language I've used that uses the JVM. I would like to try some others though, but my primary interest in doing so is to deepen my understanding of Java (much like learning Latin to understand English better.) Have you explored non-Java languages on the JVM?
I've got production applications that mix Java, Groovy, and Javascript. I use Java for the heavy-lifting portions of the application; if it needs to perform, I need to be able to profile it, and that's easiest with "real" Java (for the moment). Groovy and JavaScript are what I use for "field coding" -- the glue code that needs to be built and executed during services engagements to deal with unknowns. Embedding the two languages helps *a lot*, particularly in situations where clients won't allow the installation of an IDE during a services gig.
I've been doing some node recently and it's compelling but so rough around the edges. I really hope they can decouple it from V8 and run it on Nashorn.
Our main applications are running Java, but we have glue/script code in both Groovy and Clojure. I experimented with Scala in the main applications, and while everything worked I didn't want to add yet another language for new people to grok when coming on board.
Thanks for you help mate and your time!, but to be honest a colleage of mine found this link that has it all step by step , and is pretty much self explanatory http://kl2217.wordpress.com/2012/11/11/jsse-serverclient-ssl-connection-example/
You could do worse than looking into Spring MVC. Client side it looks like things are going the way of Angular JS. I caveat this with the fact that I do very little web development.
JSP isn't dying and that is a good book to start with for getting into server-side Java programing. This misconception that is cased by a couple of things - Oracle tries to promote JSF nowadays (some people like it, it works well for most business data-centric web app, and it is a path to Oracle's ADF product). Servlets &amp; JSPs are a mature technology so not much changes. These two factor contributed to JSF replacing Servlets &amp; JSPs in the more recent Java EE tutorial. You can get the older EE 5 tutorial if you want to learn Servlets and JSPs. Another problem is that in JSF 1 you used a JSP file to create your views. In JSF 2 they recommend using .xhtml (Facelet) files. So in JSF 2 the use of JSP file is deprecated in favor of Facelets. This has nothing to do with JSPs getting used as JSPs but a lot of people think this means JSPs are deprecated. Servlets + JSPs are the traditional choice. And if you use them with a good MVC design they aren't a bad choice. There are just a bunch of alternatives. Usually the alternatives follow an MVC design and many of them still let you use JSPs as the templating (View in MVC) technology. The first thing you need to know about JSPs is really they are just another way to make Servlets, they get converted into Servlet source code and compiled. So even if you do end up with another framework, if it lets you use JSPs as a templating technology then all your JSP and Servlet knowledge will still apply. After Servlets and JSP then you can look into JSF, Spring MVC, Jersey MVC, etc.
Thanks, that is what I'll do.
Angular is touted here and on a bunch of blogs but is not used much in professional web applications. The current version is no longer getting new features and the next version will not be compatible. The next version is years away as well. Angular is basically a dead end right now.
It doesn't exactly need new features. It has a pluggable architecture and there a bunch of good plugins out there. The real thing to keep in mind with angular is it's not the right tool for every job. As for it being used in real world web applications, T-Mobile and MSNBC both use it. I wouldn't worry about it not having a professional following as long as it I'd the best tool for the job.
I'd look at using Java for backend stuff and making REST interfaces on something like Netty. For front end just use JavaScript. 
Angular is used for much of AWS console, but then again maybe that isn't the best bar to compare against
While I agree that you shouldn't use raw jsp anymore, aren't all those other technologies built on jsp? In that case, wouldn't it be beneficial to also know how things work behind the scenes? It's been years since I've done Java web development though.
Could you justify your claim about it not being used much in professional web applications? I have just started learning it for an application, even considering looking at ember. But angular seems to be relatively simple to learn overall.
JSP is officially dead in J2EE as of version 6. The J2EE tutorial for version 5 is the last tutorial documenting JSP. Besides JSF, you can go with Tymeleaf or Spring MVC. 
&gt; aren't all those other technologies built on jsp? No.
I use DropWizard Jersey-based backend with a FreeMarker/Bootstrap/AngularJS front end. Here is a simple site I made with that technology stack: [https://bitcoinium.com/](https://bitcoinium.com/) And some other getting-started with DropWizard example code here: [https://github.com/timmolter/XDropWizard](https://github.com/timmolter/XDropWizard)
Oh, then I'm thinking about something else. Carry on...
Just learn JSP for starters. If you get a job programming you will likely run into JSP websites anyway.
Angular 1.x will be made obsolete in 12 months time when Angular 2.0 finally comes out. 2.0 is a complete rewrite and is not backward compatible. You will all need to rewire your brain and relearn your keyboard muscle memory. Good luck asking your business sponsors to fund the rewrite of your Angular installations, as Angular 1.x will become unsupported 12 months after 2.0 is release. 
Thank you for sprouting none-sense.
I saw that Rich Faces was killed an that JBoss foundation were going to focus on Angular. Also saw that angular 2 would be unrecognisable from 1. But angular is where the hype is and given its adoption I doubt it will cease to exist in 12 months time. It's on all the Java web dev job ads I get sent.
Or you could keep using 1.2. I doubt all the businesses using Angular now are going to throw away their existing code base.
Learn jsp if you want to maintain legacy java apps.
Actually I did that in a prototype project for a client some months, and enjoyed it. The only problem was understanding how to configure it, given that my experience is mostly with the J2EE stack.
http://camel.apache.org/
Angular 1.x will be unsupported 12 months after Google releases Angular 2.0. The business will freak out when they find out that the framework powered by their apps are no longer supported by Google. You could try supporting it yourself, as it is open source. You could also get stackoverflow to support it, but big businesses would rather have support backed by the big boys.
Immediately of course they will not but how long will they run on a dead platform? Why would anyone pick it for new development? Even if the next version is good how could any good business trust it will not be abandoned in short order?
I don't real want to get into an argument about this because I've not really got an opinion on Angular, but given op wants to learn web development surely they will gain some skills from learning how the current version of AJS and then transitioning to 2 when we know anything about it apart from the fact that it's completely different and there is no migration path. OP is learning the basics from the sound of it, not developing enterprise platforms.
The truth is Java has been around for so long that you'll almost always be able to do everything with just Java, even when it's not necessarily the best tool for the job. However, there are frameworks like [Play!](https://www.playframework.com/) that support Java and Scala and allow developers to freely jump in and out of the languages.
Rich Faces is still supported they just had a new release last week. They are just not addding new features. Users of Rich Faces have a clear path forward to switch to a number of other component libraries since they choose a Java standard with a rich ecosystem of implementations and libraries. Much like Angularjs there is no reason to start a new project with Rich Faces. The first stable version of Angular is only 2 years old and it is already being abondonned. Not only that but the latest version already dropped support for IE 8 which is still pretty widely used. Its adoption is not that great and anyone who choose if for anything more than trivial is now in a bad spot. I have seen zero demand for it on large scale web applications. I am sure it was more popular with startups and small scale stuff since it was the new hotness. It was exactly what you said, hype. Now there will be a new hype coming along. It will not be used much by seriuos applications either but we will hear about it nonstop for a year on forums and blogs until the next one. This is fine and can lead to innovation. I just feel bad for a lot of inexperianced developers and companies that invest too much in the latest fad and wind up with a lot of work to do.
Don't use JSP. It is one of the worst template engines available and it is tied to a servlet container, but in some cases like generating emails you don't want to to use servlets. I recommend JAX -RS and Rhythm Template engine (if you don't use json only in combination with a client framework like angular).
&gt; If you want to develop something bigger then you will soon find that developing with JSP will be a pain and it does not work well with styling. I don't get this. My company does huge bespoke designs on JSP and it works perfectly. Pretty much every template language I've used is the same. I'd be curious what problems you've had.
I don't know this keeps coming up. JSP is still the #1 view technology. It is not deprecated. Oracle has been pushing JSF for 5+ years and has only gained a small amount of traction. The trendier approach is to build your app server as a rest only and build the client side separately with ajax calls. It works in some scenarios, but is overused. There isn't a lot of adoption for Thymeleaf that I've seen. JSP works great and we've done huge implementations with heavily designed sites and form interactions on it with no trouble ( Spring MVC on the back end).
I think you mean JEE 6 and regardless no one is obligated to follow theirtheir recommendation. Most don't because they lost credibility when they pushed EJB so hard 10 years ago.
Read the book, it's excellent. But don't bother with jsp specifics like jstl unless you need for work. 
Or Spring.
I think saying its 'officially' dead is misleading. In practice you won't see it in use as much but it is still part of Java EE spec.
Haven't looked too much into it but checkout the avatar js project, they are trying to do this. https://java.net/projects/avatar-js
Interesting - you didn't publish a license for it. What source license are you using?
The Servlets+JSP combo is effectively dead, if only because of the amount of wheels you will need to re-invent. But, that doesn't mean understanding these technologies isn't worth it, any higher level web framework will build upon servlets at a minimum, and JSP's are still frequently used for templating. Regardless, I would recommend you start with a higher level framework like JSF, Spring MVC, VRaptor4, etc. before you start looking at the lower levels of the stack.
&gt; JSP works great I agree. As an addition though, JSP is only "great" once you add the JSTL in at a minimum, without it you have to dive into writing code blocks more often than you should or losing out a LOT of useful features.
So where it is? http://docs.oracle.com/javaee/6/tutorial/doc/ http://docs.oracle.com/javaee/7/tutorial/doc/ 
Angular is open source. Support isn't complicated, and bringing in new features will just be up to a new community.
http://docs.oracle.com/javaee/7/api/
Do you have an official source for this? My googlefu is apparently not up to the task and I would like to read up on this. 
Fuck IDEA 13, lots of bugs, performance issue, and instability in general (vim plugin broken until now... gradle integration still suck). IDEA 12 was smooth and perfect compared to 13.... I hope 14 is better or at least achieve the smoothness and stability of 12.
How is/was ideavim broken? Seems to work for me.
J2EE refers to version 2 only. You probably mean JEE. I've been doing mostly consulting for nearly 15 years and have been in and out of client IT departments across many industries and none of them even asked us to evaluate JEE let alone use it for anything. Views we've used are 90% JSP and 10% Freemarker. The zeroturnaround survey says Spring is used about twice as often as JSF/JEE although quite a lot of shops use both.
The web developers at my organization ran into the same dilemma of choosing between JSF + Primefaces or Angular for the next application. When the Angular 2 fiasco happened, it really hit home that enterprises live on 10 year lifecycles, certainly not 2. We will be sticking with JSF until the Javascript world calms down.
Deprecated doesn't mean removed.
I didn't have any problems with IdeaVim myself, but after installing 14 RC2 I also installed the latest eclipse just out of curiosity and it turned out to be lightning fast compared to 13 or 14. I think I'll switch back to eclipse for now, until I get a new laptop.
Try do vertical select (c-v) or (shift-v) then &gt; or &lt; once. After that repeat action using `.`. Not all rows are moved in the subsequent repeat action (`.`). The only solution for me is to turn off idea vim (control-alt-v), then using native IDEA vertical selector (alt-insert). This in turn will cause another issue whenever I tried to copy a text back in vim mode, I have to allocate a few blank rows (greater than the row in the copied text) or else the text will jumbled up with the existing row. Also there's other issue where suddenly vim plugin stop function (have to close the tab). Another issue is where Control-d or Control-u suddenly become only j or k instead of jumping multiple rows.
IDEA 12 was the one that really sold me to Intellij's product, it's lightening fast and overall superb quality compared to Eclipse during that time. IDEA 13 is a total disappointment.
Open source under what license?
no mate i'm looking for eclipse or netbeans etc.? 
I'm not sure what you mean. Without the new keyword that looks like you're setting a variable to the return value of a method call. Having new be a keyword makes it explicit that you are calling an object's constructor and creating a new object.
In Java's infancy, all Java programmers had to come from somewhere, C++ being the most common. The `new` was there to tell these C++ programmers that the object was being allocated on the heap instead of on the stack.
Please mention that you've [crossposted](http://www.reddit.com/r/learnprogramming/comments/2l2n88/help_java_asking_user_if_they_would_like_to/) - particularly seeing as you've got it solved in the other thread in the meantime. Also: /r/javahelp is more suited to these kind of questions.
It's crashing because it's receiving a negative number, which isn't supported. If it's not you that put in the negative number and if this isn't your code, you should talk to the developer of the program.
Sure. Use one of those. If you're in school, use whatever your professor is using. If you're at work, use whatever your coworkers are using. Otherwise, here's a little reading that might help you choose: [Java IDEs wikibook](http://en.wikibooks.org/wiki/Java_Programming/Java_IDEs), [Comparison of Java IDEs](http://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#Java)
&gt; Objects cannot be instantiated in any other way than by calling the constructor. Yes they can. De-serializing an object bypasses the constructor. 
Same here. Idea 13 really sucks. Also have problems with vim plugin.
Try intellij idea?
intellij is free ?
yep
thank u mate
There is the problem of namespaces: classes and methods do not share the same namespace.
https://www.jetbrains.com/idea/download/ Community version
It would be ambiguous without new. return A.B(); are you calling method B() on class or object A or are you instantiating class B from package A? Also, even A() would be ambiguous if you have method A in a class which invokes A().
np, ily &lt;3
I think it would answer the question "which" FileInputStream("blah");
Me too. Funnily enough I went back to Eclipse just this weekend and am really enjoying it after some small tweaks. The difference in build times is quite noticeable.
I'm liking the new debugger display in 14.
What if I had a method in the class I was constructing from with the same name as the class I wanted to construct? I could, of course, use fully qualified names but I guess they took the decision to have 'new'. Additionally the parser wouldn't be able to differentiate whilst building the AST without context which makes it more complex and the AST less usable.
It is irrelevant. `A.B` could be a class constructor, or a factory method, and the result would be the same. OP's question is interesting because it assumes there is real benefit in the `new` keyword. If anything unifying constructors and factory functions would have the significant advantage of making refactoring easier - instantiation can be replaced at any point with a call to a factory, for the same reason it is good practice to wrap field access in accessors. Python took this route, and it works well.
Scala isn't only functional, though. It is functional and object-oriented. Everything is an object, including functions. Every method of every object is a function, which itself is an object with methods. It's methods and functions all the way down!
I'm kind of surprised nobody mentioned wicket yet: https://wicket.apache.org. Sure, you could do Java in the backend and use something else for your frontend, e.g. AngularJS. However, for a beginner wicket might be a better find, since you don't have to learn yet another language and I think it is a supreme web framework. I have done (pure) JSP projects 10 years ago, moved to JSF with JSP as view technology and switched to JSF with Facelets. I have to say Facelets are way better than JSP, however Wicket tops Facelets easily. I think JSF, JSP and Facelets only get so much attention because people think it must be good, since it is the "official" thing, but I don't think so. So in a nutshell: give wicket a try, try angular as well and maybe other modern things like dropwizard.io, but don't waste your time on JSPs! And by the way, you gonna have to learn HTML and CSS no matter what you choose, so you could spend some time on that. 
Irrelevant for my question. From the POV of the programmer, deserialization is a plain method returning an object. There is no way to distinguish objects created by 'new' and by deserialization (or even externally through JNI). The magic is buried inside the JVM.
First of all, if you x-post you should mark it in the title. This is an X-post from /r/Javahelp: [Problems implementing Jama.](http://redd.it/2l3dgv). Second: **What exactly is the error?** You refer to an error, but never post the error, nor the complete code. This way, we will not be able to figure out the actual problem.
done. thanks 
Not sure why this is down voted. I can create instances of class X anywhere. And out with Class X I can call my methods wherever I want. If I have a method Something() that in a class and a class called Something then how do I know whether I'm calling Something's constructor or the method Something()? You can infer from what you are assigning it to, but what if the local Something() method returns a Something? I know this would be bad practice but you can't enforce coding standards in the compiler.
Ick! JSF. Does it still keep your current path in a cookie, so you can't be operating independently on the same site in different tabs/windows? Whoever came up with that grand design should never have been allowed to touch a keyboard again. To be fair I think I recall that you *could* make JSF behave differently if you put a ton of work into it, but this never seemed worth the benefits to me. I hope things have changed if JSF is still being pushed, but I gave up on it a long, long time ago as almost completely worthless.
Not saying this is the reason, but having 'new' everywhere makes it really clear what's happening. New people looking at your code might not necessarily know what all the class names are, and what every method is called. When you're writing code you want to make it as clear as possible to readers what's going on. 
No, you should really take a look at JSF was not good. JSF 2 is a great framework.
If you use JSF ajax calls are simple.
Most jsp that I have looked at suffer from the mix of markup and Java code. It quite quickly becomes very messy. I know there are ways around this by using proper templating, but way to many projects that I have seen have not seen this and end up with code that is very messy to maintain.
De-serialization does call a constructor...it calls the first no-arg constructor of a supertype that isn't serializable.
What if A.B() just returns the same instance of A. Nothing new is created, just a reference passed back.
Naming conventions are just that - naming conventions. They should not be a requirement for successful compilation.
Under the download and use it for free license.
That is not a thing. Simply making the source available for download does not make it "open source". Take a look here: https://help.github.com/articles/open-source-licensing/ As someone who does open source Java development for a living, I must stay far away from software that does not have a clear license. Which is a shame, because data visualisation is a major part of what I work on and we will eventually be rewriting ui to move from swing to javafx and libraries like this are pretty interesting. Please consider distributing this code with a license of your choice. Ambiguity in this area will certainly be a barrier to any serious use of this cool looking library.
You should go to https://github.com/Dabomstew/universal-pokemon-randomizer/issues and file a bug report. While many of us here could fix the issue it takes considerable time to wrap your head around someone else's source code. The author is the best person to to fix the issue. If you file an issue and the author doesn't respond (be patient, it isn't their day job) then you might look at the people that have forked the repo. Click on the number by the "fork" button and you can see the people on github that have duplicated the original project so they have their own copy to mess around with. Since the forkers might have spent time going through the source code they might also be able to help out if the original author has abandoned the project.
by the way I was checking to see if the issue was in the "if" statement so that's why that big error is commented out and the same code is in the if and else statements. edit: the error occurs whether it goes to IF or ELSE, so maybe the issue is with the "while" statement? edit 2: I moved the while up to the front of the statement and it still does the same thing.
I guess that boils down to whether it is more important to know about every memory allocation (clearly impossible, given all the allocation that goes on in the collections framework for one example), in which case marking allocations with new does make them stand out, or whether you think it is more important to have a simple language that makes refactoring easier. 
Actually you are both wrong. J2EE was the Enterprise Edition of the Java 2 platform. The 2 wasn't for the EE version. The Java 2 platform was Java SE 1.2 - 1.4. The last J2EE release was J2EE 1.4. So there can be no such thing as J2EE 6. Additionally while some developers use the term "JEE", that term is not officially recognized. See https://java.net/projects/javaee-spec/pages/JEE
&gt; JSP has been marked as deprecated on J2EE 6 **ONLY** for use as the view definition language of JSF where you should now use Facelets. JSP has not been deprecated as a general templating technology.
Which line is line 153 in your code? That's where the exception is being thrown, Class -&gt; GradeCalculator. method-&gt; gradeInput Line number in which class file -&gt; (GradeCalculator.java:153) (Sorry if that sounds patronising, I don't mean it to, I'm learning too :) )
Have you initialized the allGrades array. 
I think the issue was twofold: i didnt' initialize the double, and that I created it as a double then tried to run Double.parseDouble on it. So I changed it to a Double[] and now it works until I type in the final grade, then it does the same shit. Edit: you didn't sound patronizing, I'm thankful for the help.
I have now. See my other comment. Thank you for your help.
Functional programming is great because it allows you to take a higher point of view and think about your program in terms of data fluxes and processing of that data without thinking too much about the gritty details of how the data gets moved around. Here's a nice write up that sums it up much better than I could : [The introduction to Reactive Programming you've been missing](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754). Maybe I'm still "brainwashed" myself but I don't think we should abandon OOP entirely and flock to the new grounds of pure FP. OOP brings a structure and organization that I have yet to find in FP, and the Lambdas and streams APIs introduced in Java 8 make it possible to write functional code in Java too without excessive boilerplate. I would advise against trying Scala though, I looked into it for a few month, built a webapp using Play! 2, and in the end it all felt like a hodgepodge of all programming paradigms known to man in a single language. It seems every computer science graduate at the University of Lausanne gets to choose a new feature to add to the language to write about in their thesis.
numberOfScores isn't initialised anywhere or passed into the method, so your loop doesn't know when to stop, Hence the Null Pointer Exception, the variable isn't pointing to anything. Also, Double.parseDouble() would work if it was just a double, it's just the Double class that has some methods for working with the primitive type ...I think! :)
numberOfScores is initialized in the 'doEnterJButtonStuff' method with this line: numberOfScores = Integer.parseInt(JOptionPane.showInputDialog("Please enter the number of grades")); doEnterJButtonStuff is invoked by enterJButtonActionPerformed, and in turn it invokes checkInput which invokes the gradeInput method that is in the OP. I don't understand why it would be null if it was initialized in an already executed public method. Thanks for the tip.
I prefer to define the start Activity helper on the target Activity class SomeActivity extends Activity { /* ... */ } object SomeActivity { def start(ctx: Context, version: Boolean): Unit = { /* ... */ } } // In another Activity SomeActivity.start(this, true) 
hello, Java beginner. There are a myriad of IDE's one could use for Java development. The most popular being Eclipse(there are other ones that big devolopers use as well). gathering from your description, "im a beginner," I am going to recommend you the IDE known as "BlueJ." It is a very, very simple IDE to learn. The whole reason people use BlueJ is so you can get a "visual" reference as to what is happening in Java. If I reference a method from class a, inside of class b, it will offer a visual arrow of your reference, which to a beginner, is very helpful. You can try intelliJ, but it has some complexity to it, especially if you are just starting out with Java or coding in general. Once you get a nice grasp on the language, I would suggest Eclipse. It's pretty complex, but very useful. Anyways, good luck on your coding endeavors! hope to see your posts in the future!
It would also have made it much slower to parse. Compilers weren't always as fast as they are today, and this very well may have been prohibitively slow back then.
I need to mention that it sucks to be in OP's shoes. The web is built onto such a huge pile of technology layers that it's a pain in the ass to begin studying web development, specially in Java. I read once in an Agile book that programmers learn better if they start with simple, infallible recipes, moving to more abstract, complex fiddling later. So yes, as a Java web developer for 14 years, I would recommend that you learn Servlet and JSP first. Every framework out there is built upon Servlets. It's very useful to understand what is going on under the hood. It gives you freedom.
Have you heard of Spring Boot? You can use it to autoconfigure everything and then modify it to do whatever it is you want to do. It's very easy to use. Edit: I'm using it now to generate a small site to show statistics to the client. 
Never heard of JDeffered, but this is exactly the problem I'm facing now (i previously solved it with while loops that waited on a boolean value), thanks for that find. That scala code is undeniably cleaner, what libraries do you use to interface scala and android?
By any chance have you tried increasing the max heap allocation in your vmoptions? By default IntelliJ ships with a ludicrously low XmX setting which causes a lot of performance issues on even small projects, upping this made a night and day difference to me.
So I want it to go through the gradeInput method then *go back* to the doJButtonStuff method and go from there? That's a great idea, I'll try that when I get the chance. Thank you.
&gt; confuse using the class name as a function with anything else than object construction. 'new' thus seems like syntactic noise. No. It's not for the language parser. It's for the human that uses it. It helps *US* differentiate. It separates it from a function call in a way that makes a function call distinct from construction. It makes it more explicit for us. This misguided tendency to minimize typing in a language further obfuscates the usability. "New" is a visual indicator to us that an object is created. It is more than just method execution. It means that one doesn't have to do investigation to determine if it's object creation or function calling. 
Not true, it uses a constructor. However, the Unsafe instance can be used to allocate memory for an object without using a constructor
As a born and bred C/Java programmer, try Python. It's great. Edit: sorry guys, posted on wrong thread, wasn't implying that Python was functional. Please stop downvoting me, lol. 
Without `new` you can't look at a line like that and tell if the method is a constructor or some type of factory method. At the JVM level `new FileInputStream("blah")` is doing two different things - `new` creates a object, see http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.new. After the object is built then it is initialized using the instance initialization method (constructor) http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-2.html#jvms-2.9.
Yes I do, I even use 8u20 with the latest G1GC collector. Using latest G1GC did improve the performance, but it's not as smooth as IDEA 12 still. 
Unforunately this seems to be the case with a lot of fp languages. The only one that seems to have a really stable vision and no weird experimental features is F#. But it's for this reason that no one really cares about F#
I've only dabbled in Scala... for a JVM functional language, I went with clojure to play with. A bit less practical than scala, but closer to lisp like languages. I had stumbled across an alternative to fizz buzz in [20 controversial programming opinions](http://programmers.blogoverflow.com/2012/08/) #18: &gt; Given that Pi can be estimated using the function 4 * (1 – 1/3 + 1/5 – 1/7 + …) with more terms giving greater accuracy, write a function that calculates Pi to an accuracy of 5 decimal places. Ignoring the issue of the calculating the error for when I got there, I bashed my head around the code for a bit and came up with: (defn pi ([] (float (* 4 (pi 1 0.01 0 true)))) ([term tol accum pn] (let [t (/ 1 term) a ((if pn + -) accum t)] (if (&lt; (* 4 t) tol) a (pi (+ term 2) tol a (not pn)) ) ) ) ) It won't win any beauty awards, and wasn't overly fast, nor does it make use of [recur](http://clojure.org/special_forms#Special%20Forms--(recur%20exprs*)) to not pound the stack. But there was a key realization I had while writing this that made me go "ah ha! That's how functional programming works": ((if pn + -) accum t) `pn` is 'positive or negative' for the next term (which happens to be `t` in that line). The inner bit of `(if pn + -)` gets evaluated to be either `+` or `-` and then is the function for `(+ accum t)` or `(- accum t)`. But its a function, you can pass those around as things to be invoked. That was the lightbulb moment. So, why the fuss? It's a different way of thinking about the problem. There are some problems that are *very* amenable to functional thought rather than a procedural thought approach. Also, with the 'things are immutable' approach, certain aspects of parallelism are easier to reason about and thus make it faster to write and maintain the code. The key is getting to the point where you *can* reason about the code by understanding functional programming more. If you can think of the data as moving through the system and having functions applied to it to ultimately get to the end - like an assembly line, it may be worth looking at applying functional concepts to how you are working with the data. The other thing to remember is that higher order functions and other functional concepts are finding their way into more and more not traditionally functional languages. Being able to understand where these ideas came from can make Java8 streams easier to reason about.
Advising someone against trying a language is, of course, horrible advice.
With static imports it becomes ambiguous whether it is a constructor or method call. package example; import java.io.IOException; import java.io.InputStream; import static example.FileInputStream.FileInputStream; public class Example { public static void main(String... args) { InputStream s = new FileInputStream(""); InputStream s2 = FileInputStream(""); } } class FileInputStream extends InputStream { public FileInputStream(String blah) {} public static FileInputStream FileInputStream(String blah) { return new FileInputStream(blah); } @Override public int read() throws IOException { return 0; } } 
On Haskell: There's a course on Functional Programming at edX at the moment, which uses Haskell. It's free and the teacher is the colorful Erik Meijer. I joined the course only to learn a bit more about Haskell and it's been interesting so far.
Java is all about being explicit. To me it as simple as that. new = something allocated on the heap Plus it has a history with C and C++
I made the switch (Java to Scala) few years ago for personal projects and now at my work. I'm really happy with Scala and it would be very hard for to go back to Java. First advantage I see with functional programming is data immutability, which makes the code really clearer, easier to read, and decreases the number of bugs you may write. Immutability is also useful for concurrency/scalability because if you don't have to share mutable data between threads then your life becomes a lot easier (no 'synchronized', locks etc.). Scala (SDK and libs) has also a very good support for asynchronism and it can be very useful for scalability. And finally, Scala syntax is less verbose (a lot less) than Java, which is quite nice. In my opinion the best starting point for FP/Scala is Coursera's FP course : https://www.coursera.org/course/progfun (by M. Odersky, Scala's author) Have fun with FP :) 
Good catch. When I wrote this example, the `MainActivity` was still simple Java. With Scala you can go even further and use implicits to make it cleaner: object SomeActivity { def start(fullVersion: Boolean)(implicit ctx: Context): Unit { ... } } // Somewhere else with an implicit context in scope SomeActivity.start(fullVersion = true)
Sadly, Python isn't really functional at all.
&gt; As a born and bred C/Java programmer, try Python. It's great. Besides it not being functional, it's not "great" for the type of programs most devs use Java for since it's not statically typed. This also means the tooling that most Java devs are used to like static analysis, cyclomatic complexity analysis, great IDEs, etc... aren't an option. Now if you were talking about a replacement for the types of thing one would normally use shell scripting, that's a different story. Python is great for short &amp; simple command line utilities.
Reading this I thought of [Kotlin](http://kotlinlang.org/). 
Free? Yeeeees! 
&gt; could just as well been written as And? We could *also* probably get away with not having an 'import' keyword, since the compiler should be able to deduce from context that it is looking at package imports. That it is possible does not mean it isn't a terrible idea, however. Sometimes it's just clearer to have more information made explicit. &gt; There's no way to confuse using the class name as a function with anything else than object construction. 'new' thus seems like syntactic noise. It is trivial to demonstrate that this is untrue from the point of view of the invoking context. class A {} class B { A A() { return A(); // ? } }
Congrats, love this project.
While I agree that the keyword itself was most likely taken directly from C++, it wasn't necessary to tell experienced C++ programmers when memory was being allocated on the heap. C++ programmers only needed to hear one statement to understand this completely: "In Java, all objects and arrays are allocated on the heap." No keyword needed to remind them of this every time something was allocated.
Cool. I'll have to. Thank you.
The second could be a (badly named) method of the current object, or for that matter a static method. If you're looking to get rid of some verbosity there are lots of other candidates, but yes, new is a bit superfluous. As are the parenthesis and semicolon, and the type can be inferred from latter usage, so we could just have: s = FileInputStream "blah" Almost Scala (or JS), though infix notation should likely be avoided when invoking not functional methods like a constructor ;) 
&gt; It is a convention, not a requirement, that type names begin with upper case. The language spec *could* have required it (with the exemption of primitive types). 
I don't understand this, what's the difference between Log4J and SLF4J? Is SLF4J like an "umbrella framework" for all the other logging frameworks?
Couple minor points: * Importing java.lang.Object may not be necessary, but I think it is still allowed. * The class in question could also be imported using "import Jama.Matrix;" (using single explicit imports is usually better for maintainability than wildcard imports are; EDIT: it can help with compile times too). * Remember that the JAR(s) containing the Jama library code will also have to be in the classpath when you compile. EDIT: formatting
Do you have your @OneToMany mapping set to eager or lazy? Lazy means issue SELECT when you access the mapped collection, eager means issue SELECT or JOIN when you load the parent entity. To use JPA most effectively, you really should consider your entity to be an abstraction of a query, as if you would have done those JOINs if you weren't using JPA, and keep your entities as focused as possible to one task. If you try to make your entity class serve too many masters to where certain collections will only be loaded by certain users, you are bound to run into problems, including performance problems due to unnecessary queries. Here's an article by [bozho](http://techblog.bozho.net/avoid-lazy-jpa-collections/) which makes a good argument for why lazy-loading can be painful.
SLF4J more of a common interface to all of the other logging frameworks, which really only makes sense to use yourself if you are writing a library meant for others. SLF4J lets *other people* choose the logging framework *they* want to use, so you don't force *other people* to choose a particular logging framework just so that they can use *your* code. If Hibernate picked log4j and you want to use logback, there's a problem. But since Hibernate uses SLF4J, you can use log4j or logback. The choice is yours and not forced on you because you want to use Hibernate.
It *is* possible to standardize naming conventions in the language spec; and then they aren't just conventions. They're requirements.
May be a video driver issue, what OS?
&gt; It means that one doesn't have to do investigation to determine if it's object creation or function calling. I find this a very weak argument. Take a function returning an object. Does it return a [reference to a] *new* object, or an existing one? You can't know w/o inspecting the function or reading the documentation. Likewise with object construction. You couldn't know whether the expression were a method or constructor invocation. I don't find this particularly troublesome. Also, *mandating* a naming convention (types beginning with uppercase letters; methods with lowercase) would remove all ambiguity.
Except that, in Java, *there is no alternative* to heap allocation of objects. In C++ they can also be allocated statically or on the stack, so you need keywords to distinguish between those kinds of allocations. But in Java, you *cannot* choose: primitive types =&gt; stack allocation; objects =&gt; heap allocation. For explicitness, they could have also mandated that 'int' is spelled as 'signed int', because 'char' is unsigned. But they haven't.
&gt; If anything unifying constructors and factory functions would have the significant advantage of making refactoring easier Method references in Java 8 allow us to pass constructors as arguments to other functions which then invoke them as ordinary factory functions. Example on the bottom of this page: http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html 
JPA doesn't do anything. Hibernate is the implementation discussed in the article, and the article is discussing a Hibernate specific annotation @OptimisticLock and feature.
Lol I never encounter this one because I disable caps lock and switch it to control. 
Have you reported an issue? They are really good at fixing performance problems.
Yes. Its good. Even if you still code Java 90% of the time, thinking functionally makes a lot of Java code better. I found the best way to learn was dive in. I always have projects to code for fun. Grab a few and make yourself do them in scala. Learn by fire! At first it will look like java in scala. But slowly it will transform into nicer code...
Functional programming is not the same thing as reactive programming. Reactive builds upon functional, but you can do functional without reactive if you want to.
In addition to what /u/sh0rug0ru said, SLF4J is more efficient and better optimized, allowing e.g. {} placeholders instead of concatenating multiple strings.
I thought the answer would be "depends". But the article recommend: "Koloboke has turned out to be the fastest and the most memory efficient library implementing hash maps. This library is too young and not widely used." Notice this only int/Integer -&gt; int/Integer. 
Voluntary convention is not good usability. Mandating it means your changing "new" but not getting rid of it, which means your just obfuscating it.
Yeah performance is very important in my case because I'm using Google app engine where requests are charged individually. I did not specify any type for the relation annotations so it must be lazy. I'll make sure that my accesses are optimized - thanks for the warnings.
&gt; Mandating it means your changing "new" but not getting rid of it, which means your just obfuscating it. How, concretely, *do* you know whether a method returns a new object or an existing one? Now assume that 'new' didn't exist and all you had were factory methods. Would it really obfuscate the code?
Yeah, int -&gt; int maps are useful, sure - but by far a subset of maps. Strings are very often used as keys in maps, and this performance test didn't really address string -&gt; string maps at all. 
String keys: http://stackoverflow.com/a/25354509/648955
Massive arrays of numbers in games with lots of enemies / units / characters, where you actually care about available heap size.
Why not just put it above, why even consider a different way?
I guess I find the inline annotation more readable and neat. I realise this is a personal preference; I'm just curious of whether there could be any issues with this style.
* After a month, you won't be able to write anything than the most basic programs - IMO nothing that you could sell to anyone. * If you don't have time to learn Java/programming, then how will you find time to support the stuff you write? * Programming is easy, but programming something non-trivial - something worth selling - is hard. Don't underestimate it. &gt; freelance coding projects, create games and web applets, etc. * Creating games is also hard. Also programming of (successful) games is often a small part. Designing (both software and graphics), coming up with ideas and - most important - *selling* the game are more important. Furthermore nobody uses web-applets anymore (well some still do, but these are corner cases) &gt; But would that be enough to get any freelance projects? * I wouldn't hire someone with your experience - or lack of it - to do Java work for me. Why don't you take the time to learn Java without the goal of freelancing, and reevaluate your abilities after the month is up?
Google's [style guide](https://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s4.8.5-annotations) says either way, as long as you don't put any more annotations on the line. At minimum your code should compile. At maximum, your coding style should not provoke your team members into beating you with a sack of oranges.
&gt; a method returns a new object or an existing one? Not relevant. We're talking about the construction of an object. &gt; Now assume that 'new' didn't exist and all you had were factory methods. I would consider it poor design to replace all object creation with factory methods. Design patterns are not a universal hammer. &gt; Would it really obfuscate the code? In the case of factory methods, I would hope that the author would clarify it in the naming of the function... but I would have to investigate the responsibility for the object by examining the factory method code. An unfortunate requirement. The use of "new" reduces the amount of investigation that I, as a developer, have to do because it is clearly a newly created object and I can depend on that knowledge. 
Quit.
A while loop executes until the condition within the parenthesis is false. So, when "num + 1 == 20", the condition is false and the code within the loop does not execute.
So does that mean that the 20 should be included in the answer?
You put the answer up yourself: &gt;While loops are suppose to be executed until they are false The while loop in your problem executes in the following sequence: 1. check if num &lt; max (since num and max are both int, the largest number less than [and not equal, since the equals sign is not there] is 19) 2. print out the value of num 3. increment num by 1 4. start again from step 1. So, in numbers: | num | max | num &lt; max | printed | num after the last command of the loop | |-----|-----|-----------|-----------------------|--------------------------------------| | 15 | 20 | true | 15 | 16 | | 16 | 20 | true | 16 | 17 | | 17 | 20 | true | 17 | 18 | | 18 | 20 | true | 18 | 19 | | 19 | 20 | true | 19 | 20 | | 20 | 20 | false | not executed any more | not executed any more |
No. 20 is not less than max (20) -&gt; so, the condition evaluates to false and the loop does not execute any more
I get it now. I just needed it to be broken down like that. Thanks.
Welcome. If you are unsure how a loop executes, just try to build a table like the one in my previous comment. **Edit:** BTW - questions like these are better asked on /r/Javahelp 
&gt; Not relevant. We're talking about the construction of an object. Very relevant. For any method returning an object you need to know whether the returned reference is unique (i.e., 'new'). What makes object construction different? &gt; In the case of factory methods, I would hope that the author would clarify it in the naming of the function... Yup, by virtue of having the same name as the class. It is then obvious that the expression constructs a new object (esp.if compiler enforced class names to start with a capital letter, and methods with a lower-case letter.)
&gt; Yup, by virtue of having the same name as the class. Yes. You've already said that. You haven't removed the requirement for a "new". You've just obfuscated it. "new" is syntax for the developer. You can't just dismiss that. I mean we don't even need object oriented programming or we could even write it all in assembly. Programming languages are about usability. You really haven't made a case for removing "new" as making it *more* usable than leaving it in. 
You're weaseling out. You have not made the case that it would be *less* readable w/o 'new'. You're avoiding the issue of methods returning objects and having to know whether the returned object is 'new'. &gt; You really haven't made a case for removing "new" as making it more usable than leaving it in. Well, see here: new DataInputStream(new BufferedInputStream(new FileInputStream("blah"))) vs DataInputStream(BufferedInputStream(FileInputStream("blah"))) 
&gt; There is no such thing as a checked exception I think the real point of this item is that there is no such thing as generics (at runtime). Author uses an unchecked cast and suppresses compiler waring about it to circumvent the type system. The generic throws declaration of doThrow0() will be erased to "throws Exception" in the byte code, so it is not an error for doThrow0() to throw an SQLException. Unlike generics, the information about declared exceptions is preserved at runtime and you can obtain it via Method.getExceptionTypes().
&gt; You're weaseling out. You have not made the case that it would be less readable w/o 'new'. You seem to misunderstand how arguments work. You're the one presenting an idea. You're the one required to provide the case. I don't think your case is strong enough. I'm not afraid of a little typing for the sake of making object creation more clear. (I dislike Swift immensely for removing it. It's a differentiation that make switching between languages more difficult and less consistent where consistency has value). &gt; DataInputStream(BufferedInputStream(FileInputStream("blah"))) This reads poorly to me. It's not an action. if we were resorting to factory methods, I would write. "newDataInputStream" or "createDataInputStream". Object methods are *actions* by convention. You're breaking that. Construction *isn't* method calling. There are separate acts. you are obfuscating by making allocation/construction less obvious. 
Second that
Having recently had to do some terrible configuration work (I'm talking Microsoft product terrible), I can tell you it is unlikely to get better. Every time you think you have a handle on it, you will learn something new about it that means you have to go back and redo everything you've already done. I'm pretty sure I became depressed during this dark time, dreading returning to work, and starting to get depressed. It was truly horrible, dealing with a product that everyone seemed to openly admit was rubbish, yet insisted on selling to people, how could they do this? How did they sleep at night, I barely could! Thinking about it again is starting to make my skin crawl... what was the question again?? Oh right, don't quit. Find another job. Then quit.
there's often more than one annotation on a method, in which case it is no longer readable and neat that way.
Thanks, it's pretty confusing alright 
&gt; If I could only grab a 5 hour project at minimum wage once per month But somebody with experience can charge 4x your fee, do the work in 1 hour (1/5 of yours) and because of their experience and deeper understanding, very likely to write a better code (better in every way - cleaner, neater, shorter, using available / best libraries, better performance, no leaks, etc).
TIL `class Test&lt;T extends Serializable &amp; Cloneable&gt;`
Ah okay. Thanks for the information about the fork, both my friend and I had already filed reports through his website.
 public &lt;T extends Y&gt; @Nullable @Override T doSomething() {}
&gt;I became depressed during this dark time, dreading returning to work This is what I'm most afraid of. Pay is good but the issues it might cause in health are just not worth it I think. Everyone here just seems to live with it though. I guess they've accepted this environment. 
Seriously? Even in arrays?
If you're trying to get work as an amateur developer java is definitely the wrong language to be looking into. Check out php, you may have a chance with that.
Let's see, there a couple that are informative bits about syntax and type conversion that most people likely don't know (mainly because they only matter is relatively rare situations). There's a bunch which are about the JVM, not Java. They are two different things, which the author doesn't seem to understand. Then there's the stupid 'random integers' bit which is just a flat lie. It should a snippet of code but relies on significant non-trivial code that isn't the snippet to do what is says. Oh, the author's type aliases, while may be considered a cute trick, but aren't actual type aliases. Suggesting that what the compiler does has anything to do with what the language is... that's so wrong I'm just not going to touch it.
In all seriousness, being thoroughly unhappy with your work will affect your life. It can be managed and dealt with depending on what kind of person you, and how you deal with your problems in general. The more you value your work and enjoy coding, the harder it will probably be to deal with all the configuration etc. I'm not sure how long you've been working there or what the job market etc is like around your area, but considering your options should always be an alternative.
I was wrong. Seems they actually occupy 2 bytes, but Java doesn't have arithmetic capabilities on short and must convert between int and short to do operations.
Cool man, I'll check them out. Cheers.
Thanks for the answers so far. After more googling,I found a comment on this topic in [a NetBeans issue](https://netbeans.org/bugzilla/show_bug.cgi?id=104757): &gt;It is only a historical accident that @Override is an annotation rather than part of the Java language syntax. (In C# it is a keyword.) I would prefer it to be treated as a modifier[.] I think that's a valid point. The replies here on Reddit, however, suggest that this style may be unpopular, so I'll give this more thought.
&gt; My goal isn't to "create something non-trivial - something worth selling". &gt; … &gt; If I could only grab a 5 hour project at minimum wage once per month I think these two expectations of yours are opposites. Either you try to sell software, or you're doing it "just for fun" - or to learn. &gt; My question basically is, with the market likely flooded with amateur programmers, is even that too optimistic? In my opinion, yes. I don't exactly know that market (also you didn't state *where* your market is supposed to be - or are you trying to get clients from all over the world?) but I can tell you two things: * I never ever saw an ad for "something an amateur with only a month or two of experience could have handled". Simply doesn't exist where I come from. I can only imagining some relative with some requirements that is asking you to "do a favor". * As a beginner Java programmer that invested all of a month to learn the language, you won't ever have the knowledge to do a simple application that's useful to (potential or otherwise) clients. Unless you get reeeeally lucky to find something that requires basically no knowledge. And if you do find something like that - there will be thousands of students (or millions of low-cost programmers from India) that will race you to get the gig. I don't know what kind of programs you're imagining yourself to be able to pull off, and I think we have very different ideas of the scope of the programs you're trying to do. With just a single month of experience (less than 100 hours) one is able to do but the most basic applications. If you're lucky you'll manage some kind of simple database storage, but nothing complex with graphics and no web applications either. I do think you're being way to optimistic to make money based on (as you said yourself) minimal skills. As I said before: try learning Java - or other languages for that matter - on your own, without the added pressure of having clients. 
I've seen golang criticised for enforcing upper-case characters at the start of certain tokens because some natural languages, such as Arabic, don't *have* upper-case characters. I don't know how much trouble this causes in practice, as I code in English, but it seems like a decent reason to avoid strictly enforcing letter-case conventions in the language spec. https://en.m.wikipedia.org/wiki/Unicase
thank you very much! that seems to be exactly the same problem as the second link, because I'm running windows 7. It could be from the intel HD drivers but my nVidia ones are up to date. How do I turn off hardware acceleration? 
The check happens *before* the final iteration. There are two seemingly small changes that would make your original assumption correct: * If you used a Do While loop instead. * If you used greater than OR equal to, instead of just greater than. Another way to think of it is a While loop may never run, where a Do, While loop will always run at least once. And with any loop you make, you have to make sure that your condition is exactly what you want. Using &gt; is going to give different results than =&gt; 
Oh lord, good luck with that. You would have to find extremely gullible people and be able to sell ketchup popsicles to an Eskimo to pull this off. Look into webdev instead.
Also think about your future potential here. I recently left a job before a month was out because a of a similar issue. The thing was, not only was most of the work boring and not fulfilling, but the code and development in general was really bad. It had really good pay and everything, but I realized that a few years down the line I would likely be worse off career wise. I was spending more time dealing with their janky configurations(Done via thousands upon thousands of lines of ant script) then I was learning about code and such. So I started looking and found a much better job, pay isn't as good, but happiness accounts for more then you think. Best of luck!
Anytime you are using JPA I would suggest using a JDBC Spy driver during development. It can be a huge help when tracking down performance problems.
Very interesting! You should X-Post to /r/javatil
Buddy and I ran number 6 a bunch of times in Java 6, 7, and 8 and couldn't reproduce the results. How many times was this run and how?
You should be able to run liberty on your local. The only thing to keep in mind is to use the same servlet spec that you'll be targeting in production
The majority of real-world java applications involve [J2EE](http://docs.oracle.com/javaee/7/tutorial/doc/home.htm) in some form. A useful exercise would involve building a simple interactive website using either the [Glassfish](https://glassfish.java.net/) or [TomEE](http://tomee.apache.org/apache-tomee.html) servers. This will introduce you to concepts such as JSP and servlets, both useful skills to have.
This question seems awfully vague. You want some open-source projects... to do what?
I'd say write either a small MVC app or a web service. Or both - not the most experienced as far as what frameworks are entry-level friendly though.
&gt; 10 things you didn't know about abusing Java ftfy Generic circular dependencies did me in... 
Database stuff was mostly what I had in mind, yes. I've written about a dozen basic programs in C++ with only 100 hours or so of learning... it comes across as rather defensive and arrogant that you're telling me I won't be able to accomplish anything worthwhile. Yeah, it's pretty obvious that we have very different ideas of the scope of programs I'm looking to do. But that might be because you've chosen to misinterpret my scenario. By your own admission, you don't know anything about the sort of market I'm contemplating working in. So I'm wondering why you've bothered to write so much in your comments to me. Your suggestion to try Java first without the pressure of clients or looking for work is good, but I said in my original post that I'm likely going to learn Java regardless of marketability, so it comes across as yet more evidence that you're more interested in expressing your view than actually answering my questions.
Of course. But plenty of people will not be willing to pay the higher hourly fee, and the hour requirement for the job may be difficult to estimate, or the experienced guy may not be willing to take on a bunch of little projects, etc. There is always some room for the inexperienced. How else do the experienced become so?
They were getting dated but you can view them: https://github.com/spring-guides/deprecate-tut-web https://github.com/spring-guides/deprecate-tut-rest Or they just were not convoluted enough anymore as compared to the new one: https://github.com/spring-guides/tut-bookmarks 
yeh...10 things you should never come across
Most Java jobs have significant amounts of code around them. Something that teams of people build. In enterprise settings. This typically means that you will either have a significant in house team building it (and thus not needing you), or they are going with a consulting company that provides the complete solution (again, a team of people in most cases). Rarely are there opportunities for an independent Java developer where they can build the entire project. On the other hand, php is often called upon for the quick small company website, or wordpress customizations or the like. The projects are such that a single developer can do it in reasonable type. Personally, php isn't my go to language... but on the other hand unless I had a *huge* library that I could quickly draw from with strong proficiencies in the associated frameworks I wouldn't be able to outbid a team from a consulting shop (often being architected by a very good architect) for either time to product or cost. Thus, if you're going out as an amateur freelancer on the side - the opportunities for Java just aren't going to be there for you.
Specifically, what problem are you having with merging? What part don't you understand or are having trouble with? Are you familiar with how git works (as an aside, you might find [Visualizing Git Concepts with D3](http://www.wei-wang.com/ExplainGitWithD3/#) somewhat useful at a high level for what is going on with git)
Consider the simple question of what would happen if you had a method in your class `String String(String arg) { ... }` and then in your code you had: String foo = String("bar"); What would it do? And while this is an obvious example, there are more subtle ones where the class is extending another from a third party framework that has a method in it that you aren't aware of that has the same name as another class in your package. Or there's an interface that has a method you must implement, that has the same name as another class in your interface (named such so that some reflection magic works). These problems make the language difficult to reason about and possibly has ambiguous parsings. The solution to both of these is to introduce a keyword `new` that clarifies if you are calling the constructor of some class, or if you are calling a method in this class.
That and the fact a RuntimeException isn't checked anyway.
Well my friend and i are working on a project that we upload to github and then are able to both see. I'll just get to the point, when ive made changes to my version and say i mess something up and want to just start fresh with the stable version that we have on github. how do i load that version? sounds simple, but i spent the better part of an hour trying to find a way to just load the github version in, and starting fresh. (still have not found a way)
There is no RuntimeException in the example. Only erased generic types, and a checked exception being thrown.
Beyond using servlets, be wary that if you use any frameworks, you may need to set the app's classloader policy to PARENT_LAST. Your WAS admin would have to do that.
Sounds more like a Git question than anything else. My suggestion is to become more acquainted with Git and really understanding the concepts there. Also, use only the command line interface for Git, at least when starting out. You really need to understand what those tools are doing before you start using them or you'll find yourself in a pickle. Here's a good start to understanding Git: https://try.github.io/levels/1/challenges/1
Yeah i guess its more of a git issue. i was hoping it'd be rather simple, we just want to be able to make saves to the github and work from there. Guess ill look more into git, though it looks pretty complicated for what we're doing. Thanks for the info!
They keep the showcase up to date: https://github.com/spring-projects/spring-mvc-showcase 
Oh... https://developer.ibm.com/wasdev/downloads/ I didn't realize this was a thing. That settles that, then.
Sorry, I should've stated for getting started with open source work. I don't have anything specific in mind I just thought getting specific projects from people on this sub would be better than the suggestions that Google is giving me. 
&gt; Consider the simple question of what would happen if you had a method in your class String String(String arg) { ... } Have you ever encountered, in practice, a method beginning with an uppercase letter?
By following REST approach, you can keep your server code independent of client. You can use same REST api to build desktop or mobile client. 
Go ahead get the book. You will benefit from it. Most of the Java web frameworks are built on top of servlets and filters. I recommend against learning Spring MVC or any other framework before learning about servlets.
&gt; I guess there may be performance issues with Swing. Don't use that. saying that is clear that your work in java is more ee oriented. swing is great. if you have issues with swing you are clearly using it wrong and/or not using it at its fully potential. i clearly recommend learning swing and how to use it properly not necessarily using it. 
No, that would completely defeat the purpose of having a short (or byte for that matter) data type.
A word of caution. WAS Liberty Profile is vastly different than WAS 8 &amp; 8.5. For instance, the steps taken to getting the built-in Apache Wink to work on 8.0 &amp; 8.5 are different than the steps taken on Liberty. I'm mentioning this in case your target isn't Liberty. That being said, Liberty is a pleasant departure from previous WAS versions.
&gt; it comes across as rather defensive and arrogant that you're telling me I won't be able to accomplish anything worthwhile. And you think your responses to people who are obviously experienced in the market aren't? He's completely right: the only type of jobs you'd be able to find are the ones posted on Elance and the likes and the simple ones get scooped up by inexperienced people in low-wage anyway. 
That subreddit is utterly hostile to say the least...
Right click the file where you fucked up, go to git -&gt; revert.
It's important to note that the type cast in `doThrow0()` never happens at run time because `E` gets erased to `Exception`. You can do the same thing with `Throwable` (checked) and use any type witness in `doThrow()` that is derived from either `Error` or `RuntimeException`(both unchecked) such as `AssertionError`, `IllegalArgumentException`, `NullPointerException`, etc.
I don't agree that checked exceptions were a mistake. They are useful at compile time in that they add value to a method's signature. Java 7 made dealing with them a bit easier. It's a shame the functional interfaces pretend they don't exist, similar interfaces I made some years ago (and have been using ever since) support one checked exception, and you can put in VoidCheckedException (extends RuntimeException) if you don't need that type param. 
Im still searching for a good one that converts a html file to a pdf file. Any ideas?
I like the strong compile time validation, but the lack of defaults is unnerving, since this kind of builder provides no compatibility between versions. Maybe in a small, closed project, but in that case you could just go ahead, use constructors and use [type annotations](http://docs.oracle.com/javase/tutorial/java/annotations/type_annotations.html) to make sure you're not switching up anything.
Step 1: HTML -&gt; XSL:FO via XSLT. Step 2: XSL:FO -&gt; PDF via Apache FOP or another XSL:FO renderer. That being said, HTML rendering is *complicated*. You may find that the limiting factor is your definition of "good".
FFS. How difficult is it to include the licenses with this type of list? It's the single most important bit of information to have when choosing which libs to consider for inclusion in a project.
Git is an extremely powerful and useful tool, and I would never want to do a two-or-more-person project without it (or some competing product), but it's very hard to learn and not intended to be simple or easy to use. It's not like DropBox or whatever you're imagining. You will need to make a learning investment.
I'm really not a fan of this. The great thing about the builder pattern is the ease of which you can add new fields. While there is still one place to do that here, the addition of a new field is opaque. You have to have a new interface and a new special object which your interface chain recognizes. On top of that, adding new items will break downstream consumers of the builder. The classic builder can have fields initialized in any order, this has a strict ordering. 
Let's put it that way: I've been in the programming business for over 20 years and am fluent in a couple of programming languages. I started Java over a year ago with quite a lot more hours per week than you estimate and just have scratched the surface of what's there. Sure, you can learn the language in that amount of time, but what about JavaEE, Frameworks, Build Management tools, Web Containers, Java servers, etc.? If you're really looking for relatively easy side gigs, then you already gave yourself an answer in a later comment: &gt;Consider, as an example, Excel. Even though there are tons of people who know how to do things in Excel (just as there is with Java), the vast, vast majority of people in the world are completely clueless when it comes to manipulating Excel data (just as with programming Java), and anyone with even a very basic understanding of Excel can (and do) charge money, even though their expertise is extremely limited and vastly outpaced by a great many other people in the world. If you dive into VBA (for the MS Office applications), possibly VB.net or C# you have better chances to land small side gigs than with Java. Or, another option is to look into webdesign / database design. Many people are looking for short-term web developers that are able to setup a very simple site. Being able to deploy, theme, customize, and maintain a website (CMS, Blog, webshop, etc.) has landed me quite a few nice, small, quick side gigs with relatively easy money. Even the learning curve is lots shorter here.
Ah the builder pattern. The most over used / abused pattern of them all. 
This also feels horribly unnatural to me as well. Seems to be a bit abusive of Lambda constructs. There is something to be said about accepting a producer as a parameter to a field, then when each instance is built, the value for the field is computed from it. Still a lot less code. 
FWIW here's a gist in Scala https://gist.github.com/kencoba/1874015
I think he's just having a bit of fun showing things at the edge of the language. It's not particularly useful, but I enjoyed reading it.
No. If you're concerned about up ward mobility, get an MBA instead. &lt;/thread&gt;
I just want to be a hands-on Developer and I'm not interested in getting into management.
Degrees don't matter unless you are doing academic stuff. Start doing side projects, contribute to open source, or if you have money you could go to a bootcamp, although you already know how to code.
I've never got intellij to behave with amended commits, but if you have a hygienic git workflow otherwise than it should not be an issue
Oh, good.
In our in-house statistical data analysis software, we use arrays of shorts to encode variables' values.
Yes. That. And . . . Also give Eclipse a good amount of memory. -Xms1024m -Xmx4096m --launcher.XXMaxPermSize 256m
As an employer, a masters means nothing to me. If it were 10 years ago (you had less experience) then maybe, but even then it would be a pretty low ROI (probably negative). To be really blunt, if the U.S. government removed the visa eligibility you get with a U.S. degree, I would expect more than half of the masters in IT/computer science to shut down due to lack of students. The students wouldn't go due to negative ROI. If you're not career changing, going into academia, or getting a visa, it's very likely not worth it. 
Servlet and RESTful services have nothing to do with each other than that you can use servlets to implement a RESTful service. RESTful services are nothing more than a design pattern for a common problem that got popular because SOAP services have a lot of issues (mainly that there's nothing Simple about the Simple Object Access Protocol). REST is a design pattern / architectural philosophy. Servlets are a method to extend the capabilities of a web server. Although HttpServlets are used the most they don't even have to 'talk' HTTP.
Works great until you have to introduce a type parameter in one of the methods, which lambdas aren't so smart about. It's probably not quite right for the plain "struct builder" case, for the various reasons mentioned by other commentors here, but works well for the "fluent factory" case where you're not just capturing field values but progressively configuring a factory that will do some work to create something.
You're doing great then. Keep learning new strategies, processes and paradigms. You will NOT get that experience in a university. My direct advice is to concentrate on continuous delivery and deployment. Search for content on http://www.infoq.com/
It has nothing to do with Servlets. The idea is that the server serves data in an agnostic way. That is the server will expose a RESTful service with endpoints that can be called to serve JSON/XML data. The server has no idea who is calling the endpoints or why, this improves re-usability. So for instance, you can have a simple web app and a mobile app calling the same backend. There are advantages/disadvantages of doing things this way.
My masters focused more on the science of computing and IT rather than technologies and also the standard uni research / academic type stuff that you get in any degree (i.e. here's a topic, find some papers / doc and write something). It seems that what the course is doing, covering the bases, networking, security, engineering, applied. It maybe interesting, I definitely think you'd learn something but there will be repetition / more basic stuff. Interestingly enough I did a degree in Biology and Genetics. Didn't see a good career path and loved programming (all my life) so did a masters in IT to get a qualification to go into an software development career. I found my masters kinda pointless. Research stuff was already covered by my degree and it was quite a basic introduction to IT on a wide range of IT topics. Definitely fun in places and it did secure me a job afterwards because I could put it on my CV (I had nothing to suggest I every touched a computer), so for me it was worthwhile but would have rather not have spend a year + costs + not earning to do it. Your situation tho is slightly different as you have an established CV related to IT + programming. That should be enough to get your foot in the door easily for a software dev job. But it really depends what sort of level you thinking, senior roles require experience, big corporations may require IT qualifications, really speaking to a recruiter at this point about what roles you'd want and the experience you have would be worthwhile. I'm a little confused, if you run a successful business in IT then cant you leverage that, i.e. in terms of doing more development either company related or just free'ing up time to develop your own things yourself? I can see how it'd be beneficial joining a company and working with other dev's / that experience + contacts you get. The other way of doing that if you have time is to get involved in a decent / established open source project. I'm almost sensing a grass is greener over there moment here. I love programming things, but ultimately when you do it full time for a job, it is a job... 
Investing in a small white board makes visualizing code muuuuch easier. What you need to remember about loop conditions is that: For and While loops check the condition at the begining. Do-While loops check the condition at the end. Easy way to remember each one is where the condition is located in the code. For and While conditions are at the begining of the loop, and a do-while condition is at the end.
I prefer using git on the command line personally - IntelliJ's built in terminal can be nice for that. Git can be confusing and often the commands/syntax are not intuitive. 
You could always change your update preferences to not auto-download, but notify you and let you download when you choose to. Then you put your own schedule together to update and edit the exceptions list.
I'm not naive enough to think that's how it works, just to answer your question. I'm just looking for some real world experience instead of going over mundane exercises in class. I've read up on open source projects and I understand that I can't just go in and start running riot on the source code. Was just wondering where I'd get started or if there was any such projects that welcome beginners. I know some of them have problem pages specifically for beginners to have a look at. I'll just keep looking around. 
FlyingSaucer does this, but I am not sure how good or bad it is. A fork of it is being actively maintained here : [neo flying saucer](https://github.com/danfickle/neoflyingsaucer)
The point of REST is to keep APIs simple, self contained, and uniform. Just supporting different http verbs does not make something restful. The main points of rest is the api should be discoverable and traversable with hyperlinks (hateoas), and rather than calling 'endpoints', you read, update and create entities. The tech behind rest is very old, but the same is true of soap. The ideas behind rest are not widely adopted. Instead, most APIs today are ad-hoc RPC APIs
I agree. And again, I think when most people talk about RESTful services what they really mean is JSON over HTTP (without necessarily trying to adhere to the principals of RESTful architecture).
&gt; My point is just that apps in the 2001 timeframe that were using &gt; servlets to serve results using http methods were basically RESTful &gt; services. Web applications and RESTful services are not the same thing. The pattern you are referring to, either pure Servlets or Servlets + JSP, was a common architectural pattern for implementing web applications. RESTful services, while implemented on the same technology, is a completely different architectural pattern.
I discovered a rather interesting example after playing around with it: public static void main(String[] args) { /*1*/ Test.call(()-&gt;{throw new IOException();}); // compiles, IOException is propagated /*2*/ /*Test.&lt;Object, Exception&gt;call(()-&gt;{throw new IOException();});*/ // does not compile, "unreported exception Exception" /*3*/ Test.&lt;Object, RuntimeException&gt;call(()-&gt;{throw new IOException();}); // compiles, IOException is propagated } static &lt;T, E extends Exception&gt; T call(Callable&lt;T&gt; c) throws E{ try { return c.call(); } catch (Exception ex) { throw (E)ex; } } Lines 1 and 3 in main compile just fine and propagate the IOException at run time (although line 3 obviously never gets executed). Line 2 will not compile if uncommented even though one would think that it's exactly what the compiler infers for line 1. Has anyone got an idea what the compiler infers for the `E` parameter in line 1 and why? Edit: If I replace the lambdas with anonymous inner classes, it will still compile on JDK 8u25. However, line 1 will fail on JDK 7 (line 3 is still fine on JDK 7). It looks like it might be a bug in the compiler.
You are hitting a important point. A lot of people haven't taken the time to read the concepts of REST and understand why they are important in architectural design. They are too focused on technical implementation of the web services. So while architects are talking about REST concepts, programmers are looking at OO-Development and wondering about how the implemetation of the REST is very similar to implementation of SOAP concepts, which was again very similar to implementation of CORBA. Programmatically, nothing has changed since the advent of cilent-server concepts 20 years ago, but REST is a step forward in making enterprise-level Object oriented Analysis/Design/Development clearer. PS: I just read my post back and the tone is condescending. Apologies for the tone. I am just trying to impress that we are now witnessing a migration from a OO-A&amp;D to OO-Architecture and taking the OO maturity from mere objects of a single application, to applying OO principles to complete architectures - REST being a critical piece of it.
It's not a trick, it's a lie. While the boxing cache would be an interesting thing for him to talk about, he doesn't do that. He gives a snippet of code, and omits the operative part, claiming there is something about Java you don't know causing weird behavior.
Yes. I've also encountered lower case class names and upper case packages. You find all sorts of code coming from jr. coders. If we are relying upon convention to enforce this, you have to deal with code from people who don't follow convention, or differences in conventions between different shops that now has additional implications in how the code works. As it is, I can't think of any conventions in Java that separates ambiguous code into different ways it is handled. Introducing such would cause problems. Alternatively, you could put into the language the requirement that method names *always* start with a lower case letter and class names *always* start with an upper case letter. However, I must point out that unicode is allowed in identifiers in Java which then makes questions of what is upper or lower case more difficult and possibly tied to the locale of the person. The use of the `new` keyword removes ambiguity from the parsing of the code for both human and compiler without resorting to convention to separate namespaces for what would look like a method call or a constructor.
Yeah i did try that, but it didn't quite work. What i want is the latest repository version. I'm not too sure how to just load in that version, on intellij, without deleting everything and just cloning the repository again.
How do i access intellij's build in terminal?
The cast still happens. The following will result in a `ClassCastException` public class Test { // No throws clause here public static void main(String[] args) { doThrow(new Throwable()); } static void doThrow(Throwable e) { Test.&lt;RuntimeException&gt; doThrow0(e); } @SuppressWarnings("unchecked") static &lt;E extends Exception&gt; void doThrow0(Throwable e) throws E { throw (E) e; } } Output: Exception in thread "main" java.lang.ClassCastException: java.lang.Throwable cannot be cast to java.lang.Exception at Test.doThrow0(Test.java:16) at Test.doThrow(Test.java:10) at Test.main(Test.java:6)
This compiles for me in Eclipse (if I add the missing `throws Exception` clause to the main method) but not with javac. You should file a bug...
Reverting a file or directory should return it back to the state it is in your repo. 
Read the Little Schemer, and listen to the Simple Made Easy talk that Rick Hickey gave.
[Thanks for rectifying](http://xkcd.com/386)
Honestly for home projects something like Rails or any of the various Python we frameworks would probably be easier to work with.
Sure, but that's because you changed the parameter `e` to `Throwable`, but not the constraint on `E`. The parameter `e` now gets cast to the erasure of `E`, i.e. `Exception`, which `new Throwable()` cannot be cast into. If the type parameter `E` in your example were instead constrained to `extends Throwable`, I don't think you could provoke a `ClassCastException`.
If anybody tries to pull this crap in my interview I would just stand up and leave. If anybody in my company tries to pull this crap to our candidates I would suggest them get fired.
You mean on JDK 7? \[Edit: or are you talking about line 2? Line 2 should never compile without `throws Exception` on main.\] I always got lines 1 and 3 to compile without `throws Exception` on main on JDK 8 (tested on Windows 8.1 64 Bit both in NetBeans and javac on cmd). \[Edit: But I think line 1 *shouldn't* compile even though it does on JDK 8.\] I might file an official bug report. Although it seems like a quite a bit of effort. If anyone else wants to do it, feel free to go for it.
They're formally called F-Bounded type parameters and work really well in other JVM languages like Scala and Clojure.
I added the missing `throws Exception` clause and then the program compiles in Eclipse with JDK 8, but not with javac. &gt; Although it seems like a quite a bit of effort You got all that Java bliss for free, spent several minutes writing up this interesting stuff and analysing it, and now a simple bug report is too much effort? :-) If it's too much, you can also just drop a note to the lambda-dev mailing list (I think, that would be the right one)
Hmm, you're right. I thought the cast would remain in byte code, but it doesn't...
I didn't see that link, but should have expected the links to be #000 and the text to be #555 from a programmer. :-(
Yeah, I didn't see the link until my mouse crossed over it and gave me the link cursor.
Thanks a lot everyone, I really appreciate all of the feedback! I'm going to start pushing in these directions!
LOL. I really enjoyed reading your last few sentences. If you happen to come across my reply, would you mind elaborating a bit on the last few points, especially regarding C++/QT? I recently performed a trade study at my company and chose to implement a new UI with JavaFX. I have received a lot of grief over that decision from my relatively young and inexperienced team. I've tried to tell them that the alternative would be far more cryptic and difficult to use, especially given our teams' composition and the fact that most of them are pretty decent w/ Java. Anyway, I have relatively little UI experience compared to some in the industry, and I'd be curious to hear about your past experiences with WPF and C++/QT, as those seem to be the first few alternatives people throw out when comparing to JavaFX.
Yes, you should. Take an online Masters in CS and it will teach you the fundamentals around Algorithms. Also Discrete Math unless you've had it.
Why?
you don't need to insert braces if there is only one line under the conditional. 
Note that the one line could also be another conditional block. This can lead to some very hard to read code. I am working on a legacy application littered with these spanning hundreds of lines from one conditional without braces and it is a pain to read. Leaving the braces off for even one liners is a big pet peeve of mine.
&gt; . Definitely agree. I feel that putting in braces is just good coding practice in general and definitely recommend that OP include them regardless. 
Insomniacs need things to do while others are sleeping. 
My understanding of this is that when an if statement passes, the statement following it is executed. Brackets wrapped around an arbitrary block of code count as one statement.
The brackets define a scope block. The default behaviour is actually to execute the next line on the conditional statement being true. You are enabling the execution of multiple code lines by defining a scope block. A scope block is valid even without the conditional statement.
[Arrays.deepToString](http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#deepToString%28java.lang.Object[]%29)
https://i.chzbgr.com/maxW500/6292689408/h6B05F03D/
The recursion is an implementation detail of that function not necessary for you to understand if all you want to print the contents a multi-dimensional array.
Consider using Selenium web driver to drive something like firefox. I know scary, but it would work!
Can I do it without .deepToString?
Every class has a `toString` method which allows you to print the contents of the class. If you don't implement `toString` yourself, you get the default version, which prints: &lt;class name&gt;@&lt;hash code&gt; So, for: [[I@69adff28 The name of the class representing a two dimensional array of `int`s is `[[I`. And 69adff28 is the hash code computed for your array. Thus, it returns what it returns. Clear as mud?
Do you just want to print out the contents or are you being asked to figure out how to print the contents? Arrays.deepToString is the way to do it, if this isn't a homework problem!
You mean value = condition ? trueValue : falseValue;
Hey so I looked into your code and I found that when you call System.out.println(Matrix.Mult(a,b)), you arn't actually printing the contents of the array. You are only printing the reference of the array. A way to fix this is to either override the toString method like some people have said or you can write your own method that goes through each element in the array and prints it. Hope that helps!
It's usually a really bad idea to have a conditional statement without a block. There's lots of syntax in java that's bad practice. Would you be so negative towards OP if this was about using labels?
I understand these well actually, lots of statistics courses.
I completely understand how the code executes given either situation asshole. All I said was that leaving them out seems like it could led to confusion.
Either your teacher isn't doing a very good job or you aren't paying attention at all in class.
Good points. It is just a technique, there are times it is appropriate and times it's not. I added a section on when you would and wouldn't use it to clarify. It can be at least as brittle as a normal method invocation - whereas a classic builder adds some suppleness via indirection. It really depends what you are doing. Sometimes that brittleness is useful when you want to ensure things fail to compile rather than behave invalidly. It also helps use refactoring tools to change all the callsites. 
I found the following paragraph in the [JLS 8, section 18.1.3](http://docs.oracle.com/javase/specs/jls/se8/html/jls-18.html#jls-18.1.3). &gt; A bound of the form throws α is purely informational: it directs resolution to optimize the instantiation of α so that, if possible, it is not a checked exception type. I'm not sure if I'm understanding this correctly, but it seems like it might explain the observed behavior. The entire chapter on type inference is new and it looks like lots of things have changed. Edit: From [section 18.4](http://docs.oracle.com/javase/specs/jls/se8/html/jls-18.html#jls-18.4): &gt; Otherwise, if the bound set contains throws αi, and the proper upper bounds of αi are, at most, Exception, Throwable, and Object, then Ti = RuntimeException. Apparently this is where these changes came from: https://bugs.openjdk.java.net/browse/JDK-8016910 Also, I managed to simplify the example quite a bit: package checked_unchecked; public class Test { private static &lt;E extends Throwable&gt; void actuallyThrowsIoException() throws E{ throw (E) new java.io.IOException(); } public static void main(String[] args) { actuallyThrowsIoException(); // compiles, IOException is propagated without declaration } } This compiles fine on JDK8, but JDK7 complains about an undeclared `Throwable` in main.
Yeah, sorry for the late response.
How do I pull (getting my friends updates) using intellij?
Spend the money on IT courses to further specialise within IT, but be very picky as to whether the courses are a) useful b) recognised as adding value to your CV c) taking you in a direction you want to go.
Seconded, if only because you can log using a parameterised string!
I didn't look at it that closely. But it's a completely unnecessary operation and I kind of expected that it would get optimized away.
Just Google this kinda stuff.
Writing that particular string to a file as .csv will work. There are some complications if you try to cover more general cases... outputting strings with quotes or commas or Unicode or newlines in them, formatted numbers of all sorts, stuff like that. Still, writing .csv yourself isn't hard if all you need are the basics. What you mostly want the libraries for is *reading* CSV data.
Yeah, i am in high school computer science.
I jave found the code here VERY useful. Simple and lightweight using onlt the standard libraries. http://agiletribe.wordpress.com/2012/11/23/the-only-class-you-need-for-csv-files/
The issue is that computers which are 32 bit will still store the short as 32 bits. Same today now with 64 bits. Ints take the same space as Long.