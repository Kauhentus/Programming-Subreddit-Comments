&gt; And really, if you are using Java already, why are worried about a bit of verbosity? How much of my post did you read, exactly? :) I'm not worried about the verbosity, but the complexity/learning curve. Your solution still doesn't cover the native libs case I mentioned, and there's still the problem of having to learn a new programming language *just to build basic programs!*. I get wanting to build in support for complex scenarios, but that doesn't require polluting the learning-curve for the simplest use-cases. Basically, I'm looking for a build tool with reasonable defaults.
&gt; corporate clients/consulting Then Java EE and/or Spring. Both are used in this world. Anything else is very rare and a side-dish.
Scala route can be using React, but in a much more productive programming language. No magic, just compilation to JavaScript (similar as Babel / TS / etc does).
Thanks!
Even writers of early EJB books that promoted the technology advised to stay away from entity beans. As a sad fact of history, several members of the team that designed EJB knew TopLink very well and wanted to base it on that, but they lost out to other voices. Ironically those early versions of EJB ran on top of TopLink, which had the much saner model that Hibernate later copied. Since most people don't want to pay for software and Hibernate was free (FREE!!!!) TopLink is far less known, while everyone knows Hibernate and many think Hibernate invented this.
That particular report had quite a number of flaws that I pointed out. As I know JSF quite well I could point out many things in the JSF section that were debatable or just plain wrong. Now these kinds of reports are difficult since to do a good comparison you'd have to be skilled in all of them, which nobody is, or a beginner in all of them, which the reviewer isn't. Also, they just looked at JSF not the whole of Java EE. Java EE is a full stack framework with lots of cool goodies that complement each other, like CDI and bean validation. Older versions of JSF could be used with only Servlet as a dependency, newer versions not so much. You'll be missing all the Java EE stuff and that takes a lot of power away.
That's indeed the reality. Technically Java EE is used even more, since Spring largely sits on top of Java EE, although they replace some things totally. Like Java EE's bean model (CDI) is totally replaced by Spring Beans as is the MVC web framework. I'd carefully say that roughly 45% of all shops primarily use Java EE or some major parts of it, another 45% uses primarily Spring (and Java EE underneath it without really realising it), and the remaining 10% uses an assortment of other smaller frameworks. As for Java EE and Spring, they are rather similar, although they probably wouldn't admit to that ;) Marketshare is also pretty much divided without a real clear overal winner. Some regions or markets may prefer one over the other though.
You forgot the biggest buzz word spring.
Fantastic. Enterprise consulting and contract work can be boring but lucrative. I will spend my initial time learning Java EE and Spring MVC best practices.
If by "productive", you mean that there will be less lines of code, then sure. But that's not the whole story. If by "productive" you mean "can get more done in less time", then no. The cognitive load associated with the language itself + the complexity of the typical frameworks one can use for Scala + the fact that the Scala ecosystem itself is less well understood, documented, and supported all add up to it being the less productive language for most purposes. There are exceptions within that, such as Spark, but those cases have limited applicability.
Too little - too late.
&gt; Likewise you can use Guava or Java 8 streams and what not but be only a fraction as productive as in Scala, while generating on average 2x more LOC. that 2x more LOC is taken care of mostly by the IDE or other libraries. Scala isn't without it's warts either. * It's changing * It's way easier to write horrible shit * It compiles slowly (but this is way better fairly recently) * Static analysis is barely there compared to 20 options on the Java side &gt;The superstars have moved to the niche platforms though, I doubt there are 5% left. Delusional, the superstars care about doing cool shit more than the language they are using. And there are big companies doing cool shit, it's not just the small startups that come and go every six months (or change business plans). Google, Twitter, Facebook, JPL, LHC, etc...
&gt; Certain languages lend themselves to helping you find product/market fit more quickly for your given domain and shipping as quickly as possible. I think this is drastically changed, SpringBoot, Play, DropWizard... You get the best of both worlds. &gt;coffeescript God I hate that language and mentality. It's the antithesis of sanity. This is the example of "cool" when in reality it causes way more headaches. TypeScript with ES future compliance paths is way nicer 
&gt; A lot of other langs and runtimes offer comparable benefits and can arguably scale a little easier. Like what?
&gt; Microsoft is really trying to take Java's place, though. They've been trying since J#. They have recently realized it's less about the language and more about: * The size community * The mind set * The culture of the community (granted this is a catchall of the below, but I belie it warrants a call out) * The brainpower * The flexiblity of architectures * The variety of services and integrations * The amount of high quality 3rd party open source
&gt; I would strongly recommend TypeScript for the front and back. &gt; NodeJS with ReactJS is pretty excellent. I would strongly recommend against it. TypeScript is a huge impromvement, but there is so much more that is missing, like concurrancy choices. Futures are great, single threaded model is great, Promises are great, but there are so many other good options, and on JavaScript there are many bad ones that are typically used even though newer ones are starting to be introduced..
&gt; Scala isn't without it's warts either. This is true. &gt; * It's changing The Scala language and stdlib do not change much anymore. 2.10 -&gt; 2.11 -&gt; 2.12 (soon) barely have changes. So I don't think this is a worry. It's interesting that on /r/scala, there's always one person complaining that Scala isn't changing *enough*. &gt; * It's way easier to write horrible shit While this is true just by nature of Scala having some very powerful features, I haven't found it to be a problem in and of itself. If you have mandatory Code Review, the Scala that gets pushed to master is pretty good. To turn this around, I'd say that compared to Scala, it's easy to say this about Java &gt; * It's way **harder** to write **really great** shit &gt; * It compiles slowly (but this is way better fairly recently) Full compiles yes but incremental compiles take seconds. If I change one file, it's a 1s compile and I'm running my tests or using the REPL. &gt; * Static analysis is barely there compared to 20 options on the Java side Scala does one better than static analysis: A powerful type system that greatly aids in writing correct code. Our Scala code is always safer and more robust and maintainable than our Java code. The type system subsumes the majority of reasons to use a static analysis tool. That said, there are some pretty solid linters/style checkers. And IDE support for refactoring, jump-to-whatever, etc is pretty good nowadays in IntelliJ at least.
I would also recommend rabbitmq, we have used it for several months now and have been quite happy with it. Bonus points is that it can by used with Python Clients as well.
That's revenue, not profit.
Note - Spring MVC is just a small subset of Spring. Spring ~ Java EE Spring MVC ~ JSF
Thanks! I've started reading the Oracle Java EE 7 tutorial, and I've started looking at the Spring documentation. I was investigating alternative JVM languages (because my previous experiences with Java were arduous many years ago), but the latest features in Java seem great; i.e., the streaming API, etc.
&gt; If by "productive" you mean "can get more done in less time", then no. Actually, yes. I've done some 17 years of Java and 3 years of Scala and am immensely more productive in Scala than in Java. &gt; The cognitive load associated with the language itself What cognitive load? It's Java who has the extra cognitive load as the programmer has to deal with all the unnecessary ceremony and boilerplate. &gt; + the complexity of the typical frameworks one can use for Scala What complexity? Surely using Slick is easier and less error prone than chasing Hibernate lazy loading bugs? Surely using Akka is easier and less error prone than dealing with deadlocks with the classic Java concurrent programming? &gt; the fact that the Scala ecosystem itself is less well understood Certainly by many on /r/java it is. That much is evident. But I think you may be forgetting that in this industry you have to constantly keep learning, instead of lazily using what you have been for the last 10 years. &gt; documented The Typesafe libs are well documented. Instead lots of Java libs I've run into have been abandoned since 2008, distribute as randomly downloadable .jar-s, etc. &gt; and supported all add up to it being the less productive language for most purposes. I agree that for most people who don't know Scala it is less productive to program in it. For those who do, it's more productive.
Fair points, though I have to point out that you hardly know enough about me to know whether or not I do keep up or not. Also Hibernate lazy loading? FetchType.EAGER FTW. Combine that with more precise queries (via HQL or native SQL) and nearly all of your Hibernate performance problems are gone. One could easily make the same mistakes in Slick too. And the FUD you have there around abandoned Java projects is really kinda irrelevant and pointless. The bottom line is that you know it was worth it for you because you're already there and happy with the results. I may yet come back to Scala if my own personal work with Elixir and Erlang doesn't bear the fruit I would like to see, but I won't be making the mistake of claiming it's more productive for anyone who doesn't already know it. In the meantime, it is supposed to give me greater reliability and horizontal scalability, but those are higher goals beyond just being able to code a few stories faster than I could with Java. And that's as far as it goes... the personal investment required to get going in a new environment is substantial. You'd be hard pressed to show objectively how Scala adoption would be unconditionally good for anyone currently using Java. It suited your purposes, so good for you, but in the meantime the problems that the rest of us perceive in the Scala language and tools keep us from adopting it. Feel free to keep advocating for Scala though. Apparently misinformed folks like me will come around if it's everything you say.
As someone who doesn't have english as his first language I haven't really noticed it but now that you mentioned it, yes, sounds kind of funny.
I think ActiveMQ looks as close as I can get to something like Celery in Java. It does seem way more complicated to setup and get started (have working producers/consumers) but I guess given enough time I'll start to feel productive here too.
Yes, this would work for small load but I imagine if there will be multiple users making a lot of requests this might have issues in keeping up.
AmazingTitle-1.0.0-SNAPSHOT
[What constitutes spam?](https://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F) domain submitted from|count|% :-|-:|-: [broonix-rants.ghost.io](/search?q=%28and+site%3A%27broonix-rants.ghost.io%27+author%3A%27broonix%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|19|76% [newegg.ca](/search?q=%28and+site%3A%27newegg.ca%27+author%3A%27broonix%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|4% [i.imgur.com](/search?q=%28and+site%3A%27i.imgur.com%27+author%3A%27broonix%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|4% [self.AskReddit](/r/AskReddit/search?q=%28and+author%3A%27broonix%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|4% [self.ottawa](/r/ottawa/search?q=%28and+author%3A%27broonix%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|4% [self.Vaping101](/r/Vaping101/search?q=%28and+author%3A%27broonix%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|4% [youtube.com](/search?q=%28and+site%3A%27youtube.com%27+author%3A%27broonix%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|4% subreddit submitted to|count|% :-|-:|-: [programming](/r/programming/search?q=author%3A%27broonix%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|7|28% [coding](/r/coding/search?q=author%3A%27broonix%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|4|16% [java](/r/java/search?q=author%3A%27broonix%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|3|12% [webdev](/r/webdev/search?q=author%3A%27broonix%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|8% [learnjavascript](/r/learnjavascript/search?q=author%3A%27broonix%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|4% [javascript](/r/javascript/search?q=author%3A%27broonix%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|4% [reactjs](/r/reactjs/search?q=author%3A%27broonix%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|4% [simracing](/r/simracing/search?q=author%3A%27broonix%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|4% [racingbattlestations](/r/racingbattlestations/search?q=author%3A%27broonix%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|4% [AskReddit](/r/AskReddit/search?q=author%3A%27broonix%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|4% [ottawa](/r/ottawa/search?q=author%3A%27broonix%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|4% [Vaping101](/r/Vaping101/search?q=author%3A%27broonix%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|4% [atheism](/r/atheism/search?q=author%3A%27broonix%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|4%
Jetty FTW!
Did you see http://digitalocean.com? There are many droplets with preinstalled software like java/postgresql etc. And ofc you can select OS. I have used it for my Spring Boot application with MongoDB and it was awesome. I ran my app in 1 hour.
&gt; I didn't know So I take it you didn't read the rules that a mod in /r/javascript showed you [20 days ago](https://www.reddit.com/r/javascript/comments/3z6m7g/building_a_universal_translator/)? 
There's an upper limit to this approach to be sure. But it will get you further than you think, and IMO is better than dealing with the complexity of a third party queue until you _know_ you need it because you've profiled it and realized that it's the background tasks that are causing your application to no longer perform within acceptable performance limits. Compared to Python, Java brings with it a cost of some verbosity, complexity, and for some libraries over engineering, but in return you get a runtime that's one of the best currently available.
Yes, I agree, you are right. Maybe I don't need to wary about this for now.
The GWT community still seems pretty active to me.
&gt; How much of my post did you read, exactly? :) Not who you've been talking to, but the actual answer to this question is not much, and for good reason. You replied to an example gradle file with this: &gt; Well, all that's really necessary from that is the 'org.slf4j:slf4j-api:1.7.13' bit, and if you just want the latest version by default, you could probably eliminate the need for a project configuration file altogether (because the specific dependencies can be inferred from the source code). At that moment, people stop reading. The reader is going to assume you're going to list your most critical exception first. Since you listed "extra characters" first, we assume that's why you don't like Gradle because of an extra three dozen keystrokes and we just stop listening to your objections. If you want people to help you, understand that they won't always take the time to read what you're saying if you don't make sure to format it well.
Cool, glad you're finding it useful. Cheers and best of luck with the implementation. Eugen. 
I'll try it. Thanks for the tip! Who knows me better than myself, I guess
Take a look at the [Programming Challenges](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F) of the /r/learnprogramming wiki. There are so many ideas that you most likely will find something.
The problem is people aren't really taught how to come up with ideas. You say you're in college, so I'm assuming you're used to working under tight deadlines. "Find a project by tomorrow", "You have 2 weeks to complete it". The real world doesn't work like that. Steve Jobs (or whoever) didn't have 24 hours to come up with the iPhone. In reality, you think about these things over a long period of time. Don't get frustrated if you can't think of something "perfect" in a day or two. 
Hazelcast and its Distributed Executor Service might be what you want. 
It's been 2 hours, how'd it go?
Write an app that allows people to upload national disaster data: hospital locations, disaster recovery contact info, doctors willing to come and work pro bono, etc... Everytime there's a national disaster all of this information gets gathered and by the time things are in order thousands could have died. Sadly more often than not this information gets lost after everything is fixed. What if there were an app that allowed people to store this information as they find it and then it saves it for everyone in the event of another disaster? This is probably pretty simple to write and would save countless lives.
Mostly basic ideas about calculators solving certain equations and maybe some graphing ideas too, but I'll defiantly need to to think on it more. I'm taking a break and I'll be back at it later on in the afternoon!
No, problem :) About the name, i like the fact they have the version and the date timestamp. It may help to find End Of Life/unsupported libraries.
Need more spring boot goodness. I'm just digging into the boot source code.
Try saving it as an image if nothing else works
Definitely. And that's a fantastic way to do an in-depth writeup :)
You might want to give JBoss Infinispan a try. It has a nice distributed executor service with failover capabilities: http://infinispan.org/docs/8.0.x/user_guide/user_guide.html#DistributedExecutor Setting up an Infinispan cluster is pretty easy. During my tests I preferred to use jdbc ping for discovery but there are also some cloud provider specific discovery procedures implemented (http://www.jgroups.org/manual/index.html#_jdbc_ping). Hazelcast offers similar distributed executor functionality.
Thanks for the response. Do you feel that any of these technologies are not "mature" enough, or ready for production? I've looked into vertx and had a similar concern about maturity. Dropwizard looks decent. Spring Boot is probably the way to go. The community is huge, plenty of support, etc. What about Google's GWT and j2objc? I am not sure how all of that works at this point, but will read up on it. Thanks again.
The four I listed are pretty mature and Jersey is the reference implementation for JAX-RS. I evaluated a frameworks when my company was trying to move away from GWT and Wicket based internal UIs and eventually went with Jersey backend and Angular frontend as Jersey has pretty good documentation, easy to use and have decent support for DI. Haven't used GWT for a while and not sure if things improvement but GWT 2.1.0 was a bit of a nightmare to work with and I spent most of the time fighting the framework or waiting for it to compile.
DocFlavor flavor = DocFlavor.INPUT_STREAM.AUTOSENSE; Does just read the html code and don't validate.. and when I use some other it doesn't print and give me an error...
Can you explain how else you would do templating? I thought this was the standard way of doing it. 
Ha ha! Good catch!
Probably the people who saw OP forget to switch shilling accounts...
Man, r/java is pretty saucy this weekend. You guys are really building a welcoming community. Anyway, as I mentioned, I already know Java, just not Groovy. I'm sure I could learn it, I just have better things to do with my time than learn a new language just to build a program. I'll just stick with Go since I already know it, it doesn't require a DSL, and the community is less incensed by friendly questions. Thanks to everyone in this thread who was at least trying to be helpful.
I don't use Intellij. Generally I'm of the opinion that building a program shouldn't couple the contributors to a particular text editor. Thanks for the suggestion though. :)
That is too funny. I wonder how many he is using to talk back and forth and add upvotes.
It wasn't the length that got the person you were talking to to stop reading, it was starting with a lesser issue. I didn't say this to try and reprimand you, and I could probably have been better myself on tone. I really was just trying to point out a way you could adjust how you communicate to get better responses. If you're liking go, more power to you, it's a great language, and if gradle is too complex, than it really does sound like go has an amazing build system that you won't see matched in many languages :)
Thanks, sorry for the ungracious response. I was catching flack elsewhere in the thread and I projected that on your response.
I've wondered if it's possible to get Webkit.js working on Java Nashorn. https://github.com/trevorlinton/webkit.js
"Necessity is the mother of invention" Having quoted that, think of an app that would benefit YOU.
you should look for a job as codemonkey
Doing everything in JavaScript is fine and for some projects I use it and love it, but what about: - projects which need to be indexable by Google ... for such projects / parts of such projects is server-side templating still the king - in my country it's the law that all websites paid by public money must be accessible by the disabled people (for example the blind). I'm no expert about this, but few years back using JavaScript was problematic for this usecase.
Not a Java topic..
Sounds like the null pointer exception occurs if the list contains null objects such as this: Arrays.asList(null) An empty list, on the other hand, should return an empty optional. 
I was ironically looking at that before I posted. But the method returns `Optional` and afaik it is meant to remove the state of `null`, no? If so, then it shouldn't need to account for that state. If not, then I guess an `Optional#isNull()` could've worked. Although if `Optional` is to remove `null` states then that'd be counter-productive to the purpose of `Optional`.
Yeah, but my question is more about the rationale behind this design in regards to `Optional` itself. Now, I might need to do a bit of research on the reasoning behind `Optional`'s appearance, but afaik it was to remove the whole `null` state- so to speak. Now, one could argue that you might need to do it for backwards compatability, which is understandable. Albeit I would say then don't use `Optional`. EDIT: Not to say you're wrong- you're right. I understand and agree with the current use-case. Although I just don't know why it was done that way, I feel I may be misunderstanding the purpose of `Optional` (not entirely, just some portion of it perhaps).
Good advice, thanks! Any hints on how to find something that I (and potentially) others would need but that doesn't exist yet? Probably niche stuff!?
It isn't important. You can run your app on other ports than 8080 if it's taken.
That's true. You can either free the port, or you can change the port in your server's configuration. It's up to you.
 ThreadMXBean bean = ManagementFactory.getThreadMXBean(); long[] threadIds = bean.findDeadlockedThreads();
And they can't exploit Javascript the same way they do applets? (a question, not rhetorical) No one is applying the same rules to JS.
Yes but then the division of labor of thread pool management spills over to the threads that are submitting work. That isn't good design.
Coming from a language where stream-based filtering is commonplace I must say that I do NOT have the expectation that findFirst or findAny will check my data for uniqueness. Java regex (findFirst) doesn't do this either.
JavaScript does not have access to the operating system and local file system by design. It runs within a sandbox that prevents it from having that access. Flash, applets, Active-X, Silverlight... they all have the ability to communicate with the underlying operating system and are therefore more likely attack vectors. JavaScript does have its own set of vulnerabilities, however. 
That's how I understood it. :) Still ouch. ;)
 ss -tnlp ftfy (on linux) :-) I came to write the very same response.
and 5.3.2 http://mail-archives.apache.org/mod_mbox/www-announce/201601.mbox/browser
Oh, yeah that's a great idea, it is very readable to do so as all the logic is in one place.
It does allow `null` through `&lt;T&gt;Optional.ofNullable(&lt;T&gt;Object)`. Although if your mentioning in regards to figuring out if the object was `null` with the `Optional` wrapper then yeah afaik you're correct. This was more of a generic situation, nothing really particular to `Map`.
VisualVM (comes with the JDK as `jvisualvm`) does that.
You don't need to learn Groovy to use Gradle. 
By induction, create a website (using Java of course) where people can ask for / provide advice about what they could do what they (and potentially others) would need and what doesn't exist yet. And then, ask your question on there. Oh, wait!
Maybe you can do this with Mission Control (jmc) and Flight Recorder? 
JavaFX has a webview component which might prove useful
https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#package.description &gt; After the terminal operation is performed, the stream pipeline is considered consumed, and can no longer be used; if you need to traverse the same data source again, you must return to the data source to get a new stream.
Using Optional in and of itself doesn't magically deal with all your null issues. The problem with null is that it leads to designs where you don't know if null represents an empty value or an absent one. Optional solves this problem by not allowing you to represent empty values as null, and Optional.empty() represents an absent value. If you want to represent an empty value, you need to create it if your previous design didn't provide for one. Example: shopping carts. In the past, instantiating a shopping cart might be expensive, so customers could be given "empty" shopping carts by simply setting their shopping cart to null. In a no-nulls world, though, you want to make sure you instantiate an empty shopping cart for every customer - maybe revamping the code to lazily initialize the shopping cart dependencies so that an empty shopping cart isn't expensive to instantiate. If you're transitioning your code from null-means-empty-shopping-cart to empty-shopping-cart-means-empty-shopping cart, then Optional throwing you an NPE is indicative of a problem in your code where you're still creating null-means-empty-shopping-cart representations. If Optional swallowed that null and didn't throw an NPE, then the bug in your code would persist, so throwing an NPE is the correct idea here.
don't bother with graphical interface. this has the added benefit that copying your bash history file has the effect of doing a backup (other than files that you edit on the server) - i've got a simple script that can commission a new box in a few minutes
i didn't know you could do shared hosting with java ... what stack / provider are you using ? as for running a webapp, it's pretty simple if you're at all familiar with linux. i used low-end-box to find a cheap VPS (i'm paying $7 per month, i'm guessing you can do cheaper atp). their control panel lets you choose an OS image (ubuntu in my case) ssh in and apt-get java and tomcat, copy over your app and you're up and running
Sorry, I thought I read that Groovy was the Gradle DSL. Anyway, my point stands.
Good point, I suppose I should have been more clear in that a wrapper is fine as long as I can easily integrate it into a Java app. So far Tess4J seems to be the cleanest approach. 
Support for null inside collections has slowly been deprecated since Java5. The [immutable collections planned for Java 9](https://youtu.be/OJrIMv4dAek?t=31m10s) will not support null either. 
This is not a question about null in collections. I stumbled upon this due to a null value that has since been rectified prior to posting this question. Although the information pertaining to J9 is rather interesting, thanks a bunch (listening/watching and yes yes very good info thanks again)!
I think the reason you're getting downvoted is simply because the answer you're looking for doesn't exist and in general most hold the view that the current build tools (maven, gradle, et al) are actually not that complicated and can be understood quickly enough to get a simple project off the ground in short order that resistance to the idea seems rather lazy.
What I was looking for, but the price for the developer license is waaay over my budget. Too bad. Actually it doesn't seem too difficult to write this myself... lol
The application is scanning for OCR-B and from there it scans for a known pattern (like \d{3}-\d{9}-\d{1} where \d{1} is a checksum. It was very correct (and very well trained) but false positives (numbers) were not an issue of course because of the pattern.
With ofNullable you get an empty Optional, not an Optional containing null. Whether this design choice had to to with map or not, it has important consequences for how map works that might have surprising results if you're careless.
your patience has been excellent - the responses in this thread (including parts of what juckele said) are toxic. stick with java - it's a great language, and don't get caught up in the culture. i'd want the guy in the cube next to me to be asking the same questions you are
Yeah, at first I figured it just meant "empty" as a representation- soon enough I learned it was quite literal xD
Funny. I am almost the same age, also with Finance degrees, also starting with software engineering, also in Java. Good luck mate! 
I used to use Daily Razor for my shared plan. There are many out there. WHen running a very simple app that isn't used by many users, its the simplest option there is imo. My app is a crud web app that is used by 100K users a month. So the shared option was no longer an option for me especially if I want to grow it further. What I'm most concerned with is security, optimization of the db and dns/hosting setup. Gotta read up a little more on those.
Thanks. I remove the post. Hey, OP, in case you read this: If you post in the proper subreddits later, try to think of a ~~better~~ title next time, please!
Oopsie!
Can i ask why oracle they just stopped maintaining Scene Builder? this is the type of thing that make people stay away from Java desktop building.
Do you say that we should refuse all of the advantages of JS due to those 2.3 million users? What about the rest 3 billion users?
They stopped releasing binaries for some reason, scene builder is part of the openjfx so it's not discontinued. But Oracle is just releasing source code. Not really sure what Oracle intends for Scene Builders future though. I guess we'll have to wait and see, or you know, fix bugs and add features ourselves. [https://bitbucket.org/gluon-oss/scenebuilder/issues](https://bitbucket.org/gluon-oss/scenebuilder/issues) 
I understand why they spun it off - it's a dev tool, not part if the language &amp; libs. 
You're alienating 2.3 million users for no good reason though. Server side templating with a templating engine such as FreeMarker or Thymeleaf work perfectly well for both js and non-js users. There is obvious a certain requirement of JS for some site functionality, but the basics of displaying templated content is definitely over-stepping the boundary.
Maybe you're right in some cases. There is a good article about this holywar topic - http://www.makeitsoft.com/2013/04/19/client-vs-server-rendering-are-you-using-asp-mvc-php-or-other/
OH I see someone is out of content ideas.
That is true of any programming language, domain-specific or not. It's also the crux of the problem: I don't want to have to learn more shit than I need to in order to build my simple Java programs. I'm sure Gradle is great for more complex use cases, mine are very simple.
&gt; I think the reason you're getting downvoted is simply because the answer you're looking for doesn't exist That's a silly reason to downvote. &gt; in general most hold the view that the current build tools (maven, gradle, et al) are actually not that complicated and can be understood quickly Yes, this is the Blub Paradox applied to build tools. &gt; resistance to the idea seems rather lazy It's absolutely lazy. Efficiency is the foundation of our industry. I can't afford to spend a bunch of time learning stuff I may never use for my toy side projects. I can do all of this in Go more easily, I just wanted to use Java for nostalgia's sake.
&gt; my point is that you don't need anything more to start using Gradle than any build tool out there I know. I need *much less* than Gradle. I don't want to learn a new programming language (like Gradle's DSL). &gt; It is exactly what you're looking for No, I'm looking for the simplest possible tool that lets me build Java programs.
&gt; No, I'm looking for the simplest possible tool that lets me build Java programs. You mean like a file where you just list the build dependencies? That's Gradle. I don't see how you can get any simpler than that even using information-theoretical arguments (modulo curly braces and the word "dependencies"). If you're looking for the simplest possible tool *that does not require learning any new syntax* (even if that syntax is just a list), then a shell script or a Makefile and javac should be enough. IMO, it's a lot more complicated than Gradle, which is nothing more than a list, but you don't need to learn anything you don't already know (even if it's just how to write a list).
Thanks for the encouraging response, sincerely. :)
&gt; I would argue it would take no more time to learn things like GOPATH and such to get up running with the language. I disagree. Practically speaking, you end up needing to know about Java's CLASSPATH in order to reason about many things in Gradle. CLASSPATH is no more complex than GOPATH, so the baseline knowledge for both build systems is the same. &gt; Is all you want to do is to make simple or small programs then javac or the default builder from a IDE will be good enough :) `javac` doesn't handle dependencies, unfortunately. &gt; If the tool provides a lot the benefits that outweighs the time that it would take to learn it then is a good investment. I agree. Unfortunately, Gradle's complexity doesn't provide more benefits, it only steepens the learning curve. &gt; I would argue that you need to do more research on what the tool can do for you or if it aligns with your needs before becoming a practitioner in it. I've done this research. It suggests that Gradle is a poor fit, hence me coming here to ask if a better tool exists. &gt; I reading on your comments thread and and thinking of their nature (given their repetitive body) it makes me believe that your intentions are in mismatch with your original comment. My comments are repetitive because I'm speaking with several different posters, many of whom are presenting similar arguments. I felt it better to be kind and repetitive than to tell them to read the other threads before responding to me. &gt; Did you only came here to remark/preach how "simpler" your tools are without any intention to actually find help from this sub? No, I came here to ask if a simpler tool existed; however, I did respond to the many people who asked questions like, "What could be simpler than Gradle?".
&gt; I disagree. Practically speaking, you end up needing to know about Java's CLASSPATH in order to reason about many things in Gradle. CLASSPATH is no more complex than GOPATH, so the baseline knowledge for both build systems is the same. That's no mensurable notation, but if your conclusion if that both resolve in the same then I don't see the problem &gt; I agree. Unfortunately, Gradle's complexity doesn't provide more benefits, it only steepens the learning curve. I would argue that the complexity is proportional of the size of your project. And again if your really what to make simple programs I don't think you need to learn more than the superficial, nobody is telling you to master the tool just to learn the thing that you need which happen to be superficial. &gt; I've done this research. It suggests that Gradle is a poor fit, hence me coming here to ask if a better tool exists. Then I Maven, Ant, and of the most simple would be the default build tool from a IDE. &gt; No, I came here to ask if a simpler tool existed; however, I did respond to the many people who asked questions like, "What could be simpler than Gradle?". Ditto. Something you would take if that Java model is different from Go's so is not uncommon to find its tool to be different concern. 
I ended up being the 1,000,000th question on there. Here's the link to the pic that some guy took, and then replied to my question with. http://imgur.com/xx2MzGj
Do you know how to program? If so just use javadoc and the java tutorials on the site, they are very very good. If not, you could probably use those still.
.NET and the various Windows GUI tool kits aren't maintained by the same people as maintain VS (where the GUI builders live). The closest parallels to VS at Oracle would be NetBeans (which is open source, though Oracle folk do a lot of the work) and JDeveloper. I'm a bit surprised that Oracle didn't have NetBeans take over Scene Builder, though I suspect that there would have been complaints had they done that, too.
I thought it was because they integrate it into the Netbeans IDE and decided to only release the standalone version as source to OpenJFX. They provide instructions on how to retrieve the latest version and compile it locally.
Because you need to communicate directly with the local resources on the PC. Such as local hardware attached to the PC. I work with applets all the time, because I need them to communicate with scales, specialized printers, and other equipment.
Wow. Very cool analysis. I wonder if someone has done something like this for python or javascript. And it would also be interesting to try to do something when hooked up to an "expert" programmer. It appears that this analysis was done against neophytes since the environment was BlueJ
This is the best response you'll get. I understand what you want. It does not exist. Like C, Java is getting old and went through many phases, the many build systems it has show up for that. Experienced Java coders will try to sell you what they use. I'm a Maven a guy now, but I remember the pain of learning it. The concepts are still great but the implementation is getting really dated. Because of backward compatibility, feature accumulation and community fragmentation, things are not really getting better. Gradle started anew, trying to cleanup the Maven mess. But it is a Groovy DSL, you have a lot of power, often more than you require, it requires discipline so so you don't build yourself into a scripting hell. The recipes are also less interchangeable from project to project because it's so customizable. Go, Scala, Clojure, Rust now all have standard built-in build tools, package managers. Some are better than others... Time will tell how well they age. I think Java could still use a newer build system, something declarative but with an extendable model, drawing from both Maven and Gradle. If we had that, integrated with the JDK, it would be a game-changer. Until then, we're kinda stuck with what we have, sorry, you have to pick your poison.
[removed]
... programming mistakes *by beginner students*. FTFY.
What did you win? 
Well... domain submitted from|count|% :-|-:|-: [topjavablogs.com](/search?q=%28and+site%3A%27topjavablogs.com%27+author%3A%27jirkapinkas%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|12|25% [baeldung.com](/search?q=%28and+site%3A%27baeldung.com%27+author%3A%27jirkapinkas%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|5|10% [javavids.com](/search?q=%28and+site%3A%27javavids.com%27+author%3A%27jirkapinkas%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|3|6% [petrikainulainen.net](/search?q=%28and+site%3A%27petrikainulainen.net%27+author%3A%27jirkapinkas%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|4% [topsqlblogs.com](/search?q=%28and+site%3A%27topsqlblogs.com%27+author%3A%27jirkapinkas%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|4% [sitemonitoring.sourceforge.net](/search?q=%28and+site%3A%27sitemonitoring.sourceforge.net%27+author%3A%27jirkapinkas%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|4% [javaworld.com](/search?q=%28and+site%3A%27javaworld.com%27+author%3A%27jirkapinkas%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|4% [sqlvids.com](/search?q=%28and+site%3A%27sqlvids.com%27+author%3A%27jirkapinkas%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|4% [blog.codecentric.de](/search?q=%28and+site%3A%27blog.codecentric.de%27+author%3A%27jirkapinkas%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [mkyong.com](/search?q=%28and+site%3A%27mkyong.com%27+author%3A%27jirkapinkas%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [jaxenter.com](/search?q=%28and+site%3A%27jaxenter.com%27+author%3A%27jirkapinkas%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [blog.jooq.org](/search?q=%28and+site%3A%27blog.jooq.org%27+author%3A%27jirkapinkas%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [beyondjava.net](/search?q=%28and+site%3A%27beyondjava.net%27+author%3A%27jirkapinkas%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [techblog.bozho.net](/search?q=%28and+site%3A%27techblog.bozho.net%27+author%3A%27jirkapinkas%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [patrickgrimard.com](/search?q=%28and+site%3A%27patrickgrimard.com%27+author%3A%27jirkapinkas%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [zeroturnaround.com](/search?q=%28and+site%3A%27zeroturnaround.com%27+author%3A%27jirkapinkas%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [virtualjug.com](/search?q=%28and+site%3A%27virtualjug.com%27+author%3A%27jirkapinkas%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [blog.vogella.com](/search?q=%28and+site%3A%27blog.vogella.com%27+author%3A%27jirkapinkas%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [adam-bien.com](/search?q=%28and+site%3A%27adam-bien.com%27+author%3A%27jirkapinkas%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [self.java](/r/java/search?q=%28and+author%3A%27jirkapinkas%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% _^...and ^6 ^more_ subreddit submitted to|count|% :-|-:|-: [java](/r/java/search?q=author%3A%27jirkapinkas%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|37|77% [programming](/r/programming/search?q=author%3A%27jirkapinkas%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|4% [Database](/r/Database/search?q=author%3A%27jirkapinkas%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|4% [SQL](/r/SQL/search?q=author%3A%27jirkapinkas%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|4% [sysadmin](/r/sysadmin/search?q=author%3A%27jirkapinkas%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|4% [technology](/r/technology/search?q=author%3A%27jirkapinkas%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [PHP](/r/PHP/search?q=author%3A%27jirkapinkas%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [videos](/r/videos/search?q=author%3A%27jirkapinkas%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2%
&gt; Generate a file and define dependencies, the concept is one folded and objectively simple. I'm having problems parsing that statement. Could you rephrase?
&gt; since we're talking about the base case of building a project without concern for versions. In general, Java build tools try to very much make you think about versions. Choosing "LATEST" is an antipattern and should in general be avoided (although version ranges for bugfix releases should be OK). The idea of organized repositories of immutable binaries, each having a globally-unique, structured identifier, has worked very well in practice (at least relatively to any other popular or semi-popular language out there). 
 Closed as off topic
Wouldn't you just use a Java application rather than embed an applet?
 pubic long ( ͡~ ͜ʖ ͡°);
I suspect many will disagree with me, but I've never found Scene Builder easy (let alone convenient) to use, and for modest projects just defining the GUI programmatically is easier...
Not really sure I'd call them mistakes... More like "*10 most easily forgotten rules when starting out with Java*".
Nah, 900,000 closed as off topic, the other 100,000 being mostly (how do I Java)
Simplicity is not a opinion, one can generate a configuration file and one can summon the specified dependencies given the requirements, anything else is a contextual proxy that does not morph the principal concept. 
&gt; Choosing "LATEST" is an antipattern and should in general be avoided I think this is reasonable for many projects, but I like that I can quickly spin up a Go project against the latest version of dependencies. I don't feel strongly about the dependencies argument. &gt; The idea of organized repositories of immutable binaries, each having a globally-unique, structured identifier, has worked very well in practice (at least relatively to any other popular or semi-popular language out there). I don't have any beef with a repo of VM binaries, though for whatever reason I don't know of any sane implementations for native binaries (C and C++ rely on system binaries by default, which can vary from system to system or they can even vary on the same system from build to build). Anyway, it probably helps to think of Go source code as JVM byte-code--it's the portable representation of a Go program, and it must be compiled further to run on a particular target. By using source code as the unit of distribution, Go can avoid needing a central binary repo; instead the Go build tool will pull source code directly from its git/svn/hg repositories. Also, distributing as source code generally simplifies the tooling (for example, your editor can rely entirely on the source code for autocompletion instead of debug symbols or whatever the C/C++ guys have). 
I only use it when I have _nested_ loops I need to break out of. In these cases, it does make sense syntactically and performance-wise, more than a boolean exit condition would.
Java's philosophy is simply different from Go's in this regard. Go's general style is based on Google's particular methodology of placing all their projects in a single source tree. In any case, Java binaries are intentionally not versioned in the same way as sources. Of course, you may personally prefer Go's approach, but Java's has worked very well, and I much prefer it to Go's (which feels like a total mess to me, unless you work like Google).
&gt;2.10 -&gt; 2.11 -&gt; 2.12 (soon) barely have changes It has gotten a lot better than the early days. &gt; It's interesting that on /r/scala, there's always one person complaining that Scala isn't changing enough. That's true for every platform :) &gt;I'd say that compared to Scala, it's easy to say this about Java I think you're referring to writing horrible code in the comment. The challenge comes from Scala's propensity to be the programming language that includes all paradigms. When you start heavily mixing them, it makes things really challening. For J8, it's very clearly OOP + Functional, scala throws havy metaprogramming and other paradigms into the mix. &gt;Our Scala code is always safer and more robust and maintainable than our Java code. Because type inference works so well in Scala, and scala users tend to prefer functional over OO, I've seen people forgoing creating types to save keystrokes. In Java, people are more likely to create a signature like: explicitMethodCall( foo : FooPK, bar : BarPK ) : BazPK Where in Scala it typically looks like typicalMethodCall( f : Long, b : Long ) : Long This causes errors that could easily be prevented if you're expected to exploit the type system. Just to be clear, you can do it in both languages, but the tendency is not to in Scala. I do really like Scala's type system though.
I find it easier to come up with a starting point with scene builder - from there it changes a lot.
&gt; Java's philosophy is simply different from Go's in this regard. Go's general style is based on Google's particular methodology of placing all their projects in a single source tree. I agree. There is another build tool emerging that takes a less-Googly philosophy, though I don't know much about it. It's called `gc`. &gt; In any case, Java binaries are intentionally not versioned in the same way as sources. Of course, you may personally prefer Go's approach, but Java's has worked very well, and I much prefer it to Go's (which feels like a total mess to me, unless you work like Google). I respect your opinion, but I disagree that Go's approach is more difficult. Go's approach is less conventional, but it's worked very well in practice. In particular, it completely side-steps the transitive-dependencies-version-mismatch problem, which is a frequently-encountered problem in more traditional models (in my experience). It also makes it very easy to see exactly what source code you're building into your dependencies (just open up your `vendor` directory and look). Besides being different, do you see particular inconveniences imposed by Go's approach?
Most of these are marked as warnings in smart IDEs such as IntelliJ.
we haven't had required readings yet. she sort of just gave us these questions as if we're supposed to know or find out ...how? I donno.
1. Wrong subreddit - such questions should go to /r/javahelp 2. No **do my homework** posts in either sub, here or in /r/javahelp Both your questions can be answered in a matter of seconds by googling, or most likely the answers will be in your textbook. **Post removed:** Do my homework type
I'm trying really hard not to see irony in your username. This stuff is painfully easy to find on the internet; try google.com as a search site, if you're not familiar with it. There are plenty of relevant search terms in both of those questions, even if the technology's being deprecated violently even as I type this sentence.
also: ... programming mistakes, most of which caught by javac
&gt; It does not "side-step" the transitive-dependency conflict problem, it simply ignores it (in fact, Gradle does the same by default, forcing all conflicts of all libraries -- including transitive dependencies, of course -- to their newest versions among those requested). You misunderstand vendoring. If you're vendoring, you get the versions of the dependencies that you need and put them into version control (advisably with a VERSION file that maps back to a git sha or some such, but this is just for archeology purposes). This means it's up to you to choose what versions of dependencies (direct or transitive) you choose; hence "side-step" &gt; There's also a much better chance of having release notes detailing the changes; those may not be accurate, but at least they're a starting point, and you can ask the library's author about a bug in version 1.2.3. Source versioning is far too fine-grained to have a discussion over from the perspective of the consumer. Interesting. I've not really experienced any problems with this, but I'm not one to read release notes either. Most of the time, API compatibility is my only concern, and I've never seen an API-compatible change that breaks functionality. It seems like such a remote possibility that it would consume less time over a project's lifetime than clerical tasks like reading release notes, looking up a source files by semantic package version, etc. But maybe I'm wrong? &gt; I think it is far too soon to tell whether Go's approach works well in practice in environments that rely a lot on third-party libraries. So far Go projects have not come close to the size of Java projects, and the library ecosystem is very new and rather small, so the problem of maintaining dependencies over years has not yet become critical. Valid.
How's that across the languages? The odds that the OP responds, never mind accepts an answer, just seem to get lower and lower.
^^ Good god, wtf is up with all the moderator nazi stuff there lately. I don't post often, but I often search a really good question re: java development only to be closed as "off topic".
You shouldn't ;) If you have to, it might be possible to compile Java to .NET CIL via XMLVM or use IKVM.NET and run it in Unity3D, but it would be probably very painful. Another approach would be to use GWT or something to compile Java source- or bytecode to UnityScript or maybe C#... Which is also painful and involves probably months of development. There are also some Java to C# transpilers around. Which might help to translate the code base. Why do you want to do that? Just for the love of Java? edit: ah somebody really seems to have tried IKVM.NET: http://answers.unity3d.com/questions/646035/using-java-libraries-in-unity-c-project-through-ik.html
&gt; This means it's up to you to choose what versions of dependencies (direct or transitive) you choose; hence "side-step" Yes, that is exactly what you do that with Gradle/Maven forcing (except there's no need to copy the source into your own version control). The problem is that two of your dependencies, A and B can each depend on two different, incompatible versions of library C. &gt; and I've never seen an API-compatible change that breaks functionality. When your ecosystem contains hundreds-of-thousands of libraries, thousands of them quite popular, and you need to maintain your software for over a decade, you start seeing this all the time. Only small ecosystems don't experience this. Off the top of my mind, I can think of ASM, one of the most popular Java libraries out there, that had an incompatible change. There was a very good chance that if you had enough dependencies, at least two of them would depend on ASM, each on a different incompatible version.
I've also had good experiences with Ramnode for several years, though not with a Java application in particular. 
&gt; The problem is that two of your dependencies, A and B can each depend on two different, incompatible versions of library C This problem doesn't exist in Go because Go libraries don't define dependency versions (they only care about API compatibility). This problem only exists for dependency schemes that allow libraries to define the versions of their dependencies. In other words, you can't have a transitive version collision without transitive versioning. &gt; When your ecosystem contains hundreds-of-thousands of libraries, thousands of them quite popular, and you need to maintain your software for over a decade, you start seeing this all the time. Only small ecosystems don't experience this. &gt; When your ecosystem contains hundreds-of-thousands of libraries, thousands of them quite popular, and you need to maintain your software for over a decade, you start seeing this all the time. Only small ecosystems don't experience this. Even still, the "reading release notes" problem will scale much more quickly than the time spent debugging API-compatible changes that break features. &gt; Off the top of my mind, I can think of ASM, one of the most popular Java libraries out there, that had an incompatible change. There was a very good chance that if you had enough dependencies, at least two of them would depend on ASM, each on a different incompatible version. API-incompatible changes would be detected immediately (they would fail to compile--this is the beauty of static typing); I'm not talking about these, but about changes that break requirements without failing a build. Anyway, as I mentioned earlier, the transitive-dependency-collision problem is not an issue for Go projects, so this still wouldn't have been a problem.
&gt; In other words, you can't have a transitive version collision without transitive versioning. Of course you can, it's just a lot uglier. That libraries don't specify their dependencies' versions doesn't mean that they don't depend on a specific version. &gt; API-incompatible changes would be detected immediately But that's not what you want. You don't want to fail the build; you want to resolve the dependency conflict *without* fixing third-party code (or waiting for the third-party to upgrade). Java lets you do that; Go doesn't. &gt; the transitive-dependency-collision problem is not an issue for Go projects It is a much bigger problem for Go because the versions are not explicitly stated, and there is no solution for the transitive conflicts (other than the default solution that Gradle gives you for less pain). That Go doesn't *report* the problem (as Maven/Gradle does) does not mean it does not exist. As I said, it may not be severe given the Go's ecosystem minuscule size compared to Java's, but as it grows this will become a serious issue.
That's what happens when you let some members of a community get too involved, when you give them special powers that common users don't have, they start to act like they own the place and make up rules so that they can exert their power. They make the place what they want it to be, which is not necessarily what is the most useful for everyone. Same thing with Wikipedia, bunch of editors running around reverting changes. The number of active editors has plummeted because of that.
&gt; But that's not what you want. You don't want to fail the build; you want to resolve the dependency conflict without fixing third-party code (or waiting for the third-party to upgrade). Java lets you do that; Go doesn't. Go addresses this by convention--when a package undergoes a major API change, you rev the package identifier. `gopkg.in/yaml.v1` becomes `gopkg.in/yaml.v2` or some such. &gt; As I said, it may not be severe given the Go's ecosystem minuscule size compared to Java's, but as it grows this will become a serious issue. Maybe. Time will tell. For now though, Go's build ecosystem is a lot less painful than Java's.
Yes, I just think jokes are funnier if they have some basis in truth.
&gt; Go's build ecosystem is a lot less painful than Java's. Because listing dependency versions in a file is just too hard... I admit that Go has a great story for simple programs. It feels like Python (I guess; never programmed Python): you just run it. Java was meant to be used on large programs, where it is much more convenient than Go. It's "small program" story is improving considerably, and Gradle is really trivial for simple applications: just list your dependencies and `gradle run`.
First, there are nearly 11,000,000 questions, and fewer than 500,000 are closed, so that's less than 5% across the site. (Neither of those numbers include deleted questions.) Second, &gt; The odds that the OP responds, never mind accepts an answer, just seem to get lower and lower. That's not what "closed" means on Stack Overflow. I know on a few forums they mark a question [closed] after it has been answered, but on SO questions are closed when they don't belong there at all (or if they need to be improved, then they can be reopened). Answers are marked "Accepted" if the question author chooses. [Over 6 million questions on SO have an accepted answer](http://stackoverflow.com/search?q=hasaccepted%3Ayes), so just over half.
I know. My point was that it was developed for use at scale; not that it is employed at that scale (although lots of large companies are using it, including Facebook, Netflix, and Twitter). EDIT: Just noticed that all of Google's downloads are run by Go, including Chrome, the Android App Store, etc. Fun fact.
The fact that 1 million questions needed to be asked is proof that java as a language sucks!...gold please? ....oh wait. This isn't r/python is it? ...sorry. 
Most of the top-ten are things that would be caught at compilation time, excluding a few like String == String. I'd be more interested in the most common bugs that caused outages in systems.
Interesting method, results are not so much though. Anyone who writes Java as a job knows most of these errors will NEVER make it to produciton
That's almost more answered questions than one could wish for.
In type A, if the variables were boolean, ot would result in an assignment and return and would be a runtime error.
Common production bugs would be semantic in nature, not syntatical. I'd guess the most common production bug would be input not matching the expectations in the code.
&gt; if they have **some** basis in truth. (emphasis added) This joke does; it has a 6.4% basis in truth.
I read the source code for the [Eclipse IDE](http://www.eclipse.org/). When I finally understood what they wrote, I knew Java.
Looks like it was reopened. 2 years too late, but it's the exact problem folks talk about when they "whine" about SO.
Fair enough, but there have been some really really good discussions on SO which are locked due to the "rules". I'd be in favor of some sort of system where those posts auto-expire or something, but simply banning them is lame. Whatever though, it's not my site.
I've put a bounty on it which should attract some attention -- keep an eye on the question and you might get some use out of it after all. I'm not saying the system is foolproof but it does irk me when threads like these are filled with complaints yet have nothing to back them up. Yours happens to be one of the rare ones that are a valid complaint so that's something we can try to fix afterwards (which, admittedly, is too late). One small note: people who put questions on hold are not moderators -- any user with 3000+ rep can cast such a vote. Additionally, users that have a gold badge in one of the tags on the question can put a question on hold on their own.
Agreed. It'd be hard to categorize
8G works for me but I'm using it primarily as my "life" computer. My work machine has 32G of ram.
The .equals for strings got me for the longest time
I'm a little underwhelmed by that kind of research. Big Data is an order of magnitude larger than the set they worked with. Also their conclusions say much more about BlueJ's deficiencies than about the Java language.
One thing that has puzzled me..... Why would you want to use JavaEE concurrency Lock(*read) etc, rather than the built in synchronised keywords.... 
And almost exactly one quarter of them (250,400 out of 1,000,449 at the time of writing) are without a marked answer. That's much better than I would've guessed.
And?
Names don't mean much, though. ^^^^^^;)
Fair question. Guess ReentrentLock allow for "ordered" execution of waiting threads, which is not garanteed with sychronized. Also you could set a timeout on the reentrentlock, which was not mentioned in the post... 
I recommend [this](https://github.com/bmuschko/gradle-docker-plugin) plugin. It has very wide list of features.
I'm not sure I understand the question. The ratio doesn't really have any hidden meaning. It's just the percentage of questions that are closed and waiting to be reopened once they're edited into shape. (Which will never happen for many of them.)
And it looks like they are looking a maintainer
Is it me or did the author forget to implement the READ lock?
Normally it's to have ordered execution, the ability to have READ and WRITE locks, the ability to specify locks for certain methods or for the entire class more easily, timeouts, and often even a better performance. ReentrentLock is said to have better performance than the JVM native one.
https://spring.io/guides/gs/spring-boot-docker/
It says so in the readme: &gt; Unfortunately, I don’t have much time to contribute anymore. In practice this means far less activity, responsiveness on issues and new releases from my end. &gt; &gt; I am actively looking for contributors willing to take on maintenance and implementation of the project. If you are interested and would love to see this plugin continue to thrive, shoot me a mail. 
Understood but the post didn't say dockerize spring boot app with gradle
You'll need to link to specific comments. I skimmed the first hundred or so and found only one Java-related comment. More importantly though, I don't see how a Gradle-esque solution would solve this problem. If the Maven central repo went down, all projects that pull from that would need to be updated as well. Updating your import paths isn't a particularly worrying problem.
I too would be interested in this.
I imagine you're looking for a curated list, but there's at least this is GitHub: [trending repositories: Java](https://github.com/trending?l=java)
&gt; It's maven, not gradle :) Look for the unmaintained reference to the gradle plugin. A lot of us prefer declaritive (Exclusively) build systems.
&gt; Understood but the post didn't say dockerize spring boot app with gradle Ignore the troll and the idiots downvoting your comment.
Not sure if "Jar of the week" would help you. There are hundreds if not thousands libraries and frameworks from last 15 years. Lots of them are still relevant but would probably be omitted from any "Jar of the week" list. There is http://java-source.net/ but it might be somewhat outdated. In general, you should first think about which problem are you trying to solve, then look for relevant libraries, not the other way around. Unless you are just curious and exploring the language/ecosystem.
Take a look at this: https://docs.oracle.com/javase/8/docs/api/?java/awt/Robot.html If you are trying to automate a browser game, I'd seriously look at Selenium. If you are trying to automate an Android game, you can do that via Android Debug API (monkeyrunner or whatever it is called). If java.awt.Robot is limited, you can still have a native app that takes a screenshot or sends key/mouse events to a certain window, but use Java for your logic.
Worst joke ever!
I don't think this would work as well for java due to the strong backwards compatibility.
Java is very old for this shit :)
From the website I got the impression that it's something like jRebel or SpringLoaded, but on production. That sounds scary. 
@All I was looking for basis utilities to play around related to JSON, REST, database ORMs, threading, unit testing etc. Right now I am at a level where even working with json is a pain. The philosophy I follow is use-first-then-learn. That's why I wanted to get my hands dirty with most common java packages. [Awesome Java Github Repo](https://github.com/akullpp/awesome-java) is the thing I will have to start from it seems.
Good point. It depends on the method if ignoring the return value is bad. The article mentions toString(), other examples where ignoring the return value is bad: BigDecimal.add(), File.delete()
I get the feeling you don't know what the factory pattern is and when it should be used.
Exploring the ecosystem is a great way to discover what problems have been "solved" and how
Mainly because I couldn't be bothered actually **clicking** on my bookmarks in the morning. Yeah getting real lazy these days. full source is here if anyone is interested: https://github.com/geotabular/ifljava (yes, it's pure javascript, sorry about that)
Singletons wouldn't have to explicitly mark their contstructors as synchronized.
It's unfortunate for me that every single one is an Android application. I'm looking for desktop projects.
I guess it's cool and all, but it's written in go, not Java. I'd look at using it if it was Java. 
In that case you'd sychronise the factory method or use an enum.
[removed]
It seems that you're shadow-banned. https://www.reddit.com/r/javahelp/comments/3ya5ti/understanding_how_nonprimitive_data_type_works/cybs3u0?context=10
Very cool and interesting. But... Monadic? I don't understand how this is monadic.
Username checks out.
A monad is a pipeline if i remember my CS. And the code: e.when(InstantiationException.class) .ifPresent(Throwable::printStackTrace) .thenThrow(); Can maybe be seen as a definition of a pipeline.
Unit function is parameterless, and no bind/flatMap function. Not a monad until proven otherwise.
Read more dedails on http://www.squaressolutions.com.au/cml/part1.asp.
The source code? http://help.eclipse.org/mars/index.jsp?nav=%2F1 is that what you used to learn?
I don't think it's worth synchronizing *all* java object constructions just for a very particular case. I'd rather think of a solution to make synchronized singletons. But even in this case, it's so simple that it's not worth a language-level fix.
Ok, I'll give you a quick opinionated guide to the things you are interested in. **JSON**. Usual way to go is to have Java Beans (a class with some fields and getters &amp; setters) and translate them to or from JSON. There are frameworks like GSON or Jackson to do the conversions. Alternatively, if you want JSON with a strict schema, you can use Protostuff to write the schema definitions and then to generate java beans that can be converted to JSON. **Threading**- there's plain Java threads and java.util.concurrent.* package. Usually that is sufficient to get things done. Look at Executor/Executors classes if you want easy pools of workers. **Unit testing**- JUnit, TestNG. If you need BDD, you can use Cucumber or JBehave. If you need to test a webapp, Selenium. Various different approaches to test DB interaction, HSQLDB in-memory database sometimes helps. Look at Dependency Injection and related frameworks (spring is most popular) to design your software in a way that is unit testable. **Database ORMs**- Official standard is JPA, most popular implementations are Hibernate or EclipseLink. There are also new LINQ like things like JOOQ popping up. Also, if you just need to write some queries and not a full blown ORM, spring-jdbc (JdbcTemplate) is often sufficient. **REST** Official standard is JAX-RS with most popular implementation being Jersey. There are alternatives as well. Oh, don't forget **Maven** or **Gradle** for your build and dependency management needs. You'll be lost without them. If you need more advice, ask. *Edit*- some more comments. --Coder
For everything but threading/concurrency, tinker with dropwizard and its many modules.
&gt; A monad is a pipeline No. That is far from an accurate description of a monad. A monad is any data type `m` for which these functions can exist. return :: a -&gt; m a &gt;&gt;= :: m a -&gt; (a -&gt; m b) -&gt; m b Where these laws are held. Left identity: return a &gt;&gt;= f ≡ f a Right identity: m &gt;&gt;= return ≡ m Associativity: (m &gt;&gt;= f) &gt;&gt;= g ≡ m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g) Neither of these things is found in this library. EDIT: I should add; monads are *often* pipelines. It's just not part of the definition of a monad, and not all pipelines are monads.
&gt; open source alternative to IntelliJ IntelliJ is [open source too](https://github.com/JetBrains/intellij-community) (mostly). I've been an Eclipse user since the early 2000's until last year, and donated some cash to the project because I always believed in it. However, after using IntelliJ for a while I can't get back to using eclipse, it's just too problematic and has a lot of user interface issues, especially on Linux. I think more effort should be put on making eclipse a polished, well integrated platform, with less usability issues, instead of just stuffing it with new, rarely used features (such as making it work from a browser).
Was about to ask the exact same question. On the other hand, might as well just put it to the test. I'm a junior developer, so my productivity is not yet what it's supposed to be. I'll switch to Che for a few days, that won't have a large effect on my current productivity I supose. I'll let you know what I miss/love about it.
An IDE on the web is no alternative to InteliJ.
The method getting the singelton object needs to be synchronized, not the constructor. Event if you could declare the constructor as synchronized, this would not change.
&gt; They have community edition, but you can't develop commercial apps with it. I don't think this is true. It's released under the Apache license, which does not prohibit use of the software in commercial settings.
Believe me, I tried many times.
Yes you can
You can't develop commercial apps with a free license to their Ultimate edition that they give people who contribute to open source projects. You can do whatever you want with the community edition.
You can build the Community Edition yourself. The closed-source parts are the plugins in Ultimate.
And it always demands keyboard focus as soon as you hover over it, which is so annoying.
Developer is here :) Yes, it's written in Go, which is kind of weird for a ZeroTurnaround, since we develop tools for JVM, but... Configo was developed to solve generic environment variables configuration issue. When I'm saying "environment variables", it also includes JAVA_OPTS for instance (i.e. having bigger heap on prod) With Configo, you can do something like: configo java \$JAVA_OPTS -jar myapp.jar If you will load them in Java code, it will be too late to set JAVA_OPTS. 
The source code. I should have said it was Eclipse 3.2. Here's one current source for the [Eclipse source code](https://git.eclipse.org/c/e4/eclipse.platform.runtime.e4.git/). 
Yeah, Groovy, Scala and Kotlin are included in the Community edition.
Thanks for clarifying that, I couldn't believe eclipse would advertise a web IDE like this. 
We are also stuck with an old play application that we can't even upgrade to 1.3 because hibernate changed from 1.2 -&gt; 1.3 and it breaks a lot of stuff for us silently. We have decided that the only way forward is to stop developing in play and instead use a more standard java stack with jax-rs. We managed to trim the compile-deploy cycle to just 10 seconds with maven so that is roughly as good as the rapid prototyping in play. As frontend we use nginx as a load balancer and ssl-termination point, and that sends different url patterns to different servers.
Wow, those are comments with a lot of emotion behind them. Allow me to provide the background and context. You can then make some judgment calls for yourselves. First, the goals of the project are workspace portability, collaborative workspace server, and design. This was done to enable critical agile workflows around developer bootstrapping where enterprises want to let anonymous users contribute to a workspace after clicking a link. The link needs to be intelligent enough to generate a workspace that has the entirety of the project and its runtimes in it, and then fronted with an IDE. Users can use SSH with their own desktop IDE, or if they do not have one installed they can use the provided Web IDE. When workspaces can be moved around and provisioned from recipes, then interesting automation around enterprise workflows emerge. 2. This is not click bait, but it is certainly marketing. And all products work to put their best foot forward, and to show what their differentiations are. In terms of the language of open source alternative to intellij, well it is. It's not likely that a user would use both intellij and che at the same time on the same code base, unless che was running as the central server and intellij was the ssh client. So, there is nothing wrong with stating that it is a choice. Choice is good for the community. I think it's good that everyone here as additional options to consider. And if given a the choice between more options vs. fewer options, isn't it good to have more here? 3. There are significant contributions from the vendors mentioned. Red Hat has built an OpenShift plug-in and uses Che as an embedded IDE for OpenShift itself. Che will be part of OpenShift Dedicated cloud service. There are 1000s of man hours that they have put into it. SAP has invested even more time and Che runs in all of their SAP Hana offerings. IBM has collaborated deeply to extend and improve the Orion IDE to act as a key editor experience in the product along with providing the JavaScript intellisense. 4. The main Eclipse development is focused on language support, such as Java 9 &amp; gradle. Eclipse the desktop IDE and Eclipse Che are separate products. The teams will work on workspace interoperability over time, though that poses real challenges since the Che workspace definition includes a runtime definition. 5. As for throwing away the Eclipse code base, you should dive into the necessities of the architecture. Che reuses the Eclipse core in numerous places on the server side. Most of the workspace management functions running inside of a workspace are Eclipse libraries. There are then RESTful wrappers around them to enable interaction over web sockets and HTTP from the Che server or browser clients. I think if you visit the eclipse.org/che site and spend time in the docs, there are fairly accurate and clear descriptions of what the product does. And since all development is done in the open, the code base is free to peruse along with all of the commits. And as for my personal comments, please do look up all of my comments on HN and Reddit. The explanation and rationale is clearly laid out. You may not like the rationale, but it's there. 
We have an electron client that you can use. Please see the downloads page for how to install that client. But Che itself is a server product that provides a Web interface, or an SSH client that you can connect with your desktop IDEs.
No one is supposed to see an object that is being initialised. Conversely, an object being initialised should have no side effects on its environment. In consequence, it doesn't make sense to synchronize a constructor.
Not sure how the pitfall is meant by the author, but compare the example with the following: List&lt;Book&gt; myList = ... for (Book b : myList) myList.add(b); // ConcurrentModificationException So, the same thing applies to `Stream`. You shouldn't modify the stream's underlying data structure while processing the stream, regardless if in a multithreaded environment. Other than that, the cheat sheat isn't entirely correct. `forEach()` is an operation that encourages side-effects in its argument consumer. So, it is allowed to modify shared mutable state from within that lambda.
HAHAHAHAHAHAHAHAHA
Well, the example is List&lt;Book&gt; myList = new ArrayList&lt;(); library.stream().forEach(e -&gt; myList.add(e)); whereby `library` doesn't seem to originate from `myList`, so no modifying of underlying data structures. That's what confused me a bit.
&gt; Why would they allow a 3rd party company charge such a huge amount for their plugin they have always gave away free? Because Jetbrains writes an maintains the Perforce plugin for IntelliJ. If Perforce wanted to they could write and maintain their own plugin and provide it for free.
A lot of people are saying that this is "'just a web IDE". I don't see it as that; I think it's unfortunate that their [native tools](https://eclipse-che.readme.io/docs/usage-windows) are not mentioned in the introduction. I think it's much more than this - it's an intersection of devops and developer tools; I can specify a development environment and allow others on my team to use the exact same environment. Using Docker underneath it all makes it a very portable platform that many people can grok. It's also useful for a single developer, running on his own workstation. There is little differentiation between the IDE workspace and its container - it lets you have completely separate environments with the push of a (few) button(s). Usage within an organization will be a popular use, and the amount of time needed to setup a development environment will drop to 0. This is great for onboarding new team members and allows devs to focus on dev work rather than configuration. Personally, I think this is the future of development environments, and down the line the tools will be better and better (centralized but with full-on native clients). I have no affiliation with Eclipse or the Che project; I'm just a regular dev.
Ho-ly shit! Sir, I've got to say - I spent FAR too much time trying to google and track this issue down. I had NO idea that Hibernate would take its log level and make the call to get warnings. I have spent so much time deep diving in performance tools, to find the exact error (we are even using HikariCP like you), and it always stuck me because it was coming directly from Hibernate instead of our code. I'm testing this now, but I think I may owe you a beer or so!!!
I misread the example. My bad
&gt; Wow, those are comments with a lot of emotion behind them. Allow me to provide the background and context. You can then make some judgment calls for yourselves. &gt; It's not the first time you misrepresented the scope of your development. You are just playing on Eclipse user's desire for a better IDE and capitalizing on well known brands. &gt;First, the goals of the project are workspace portability, collaborative workspace server, and design. Not one of these requires a full rewrite as a web service. &gt;This was done to enable critical agile workflows around developer bootstrapping where enterprises want to let anonymous users contribute to a workspace after clicking a link. This is a worthy goal, but after factor in the disadvantages of using Che most people will chose existing IDEs. And once again, that's a shame because workspace portability would be very useful if it was integrated into the real Eclipse. &gt; Users can use SSH with their own desktop IDE, or if they do not have one installed they can use the provided Web IDE. Which kind of defeats the purpose since Eclipse doesn't make it easy (I think there used to be an option to, but I can't find it anymore) to run/debug applications over SSH or in containers, effectively forcing you to use the web IDE. &gt;When workspaces can be moved around and provisioned from recipes, then interesting automation around enterprise workflows emerge. I'd rather run an Ansible cookbook to configure my machine than sacrifice a huge portion of IDE functionality. &gt;This is not click bait, but it is certainly marketing. &gt; &gt;Eclipse Che is a next generation Eclipse IDE and open source alternative to IntelliJ. Is it really that hard to describe that "Eclipse" Che is a web-based IDE built with workspace portability in mind in one sentence? Let me give you an analogy. "Pizza is the next generation food and a vegetable-based alternative to beef". &gt;Choice is good for the community. Sure. However, by being misleading, you are just pissing off the community. &gt;There are significant contributions from the vendors mentioned. Red Hat has built an OpenShift plug-in and uses Che as an embedded IDE for OpenShift itself. Please provide us with links to such contributions, because all contributors on [plugin-openshift git repository](https://github.com/codenvy/plugin-openshift/graphs/contributors) are from CodeEnvy and I couldn't find anyone from Red Hat. &gt; SAP has invested even more time and Che runs in all of their SAP Hana offerings. I did a little digging through SAP's HANA training videos and nothing looks like Che. They may be using it as a backend, but I have no ability to verify this so I am just going to give you that one. &gt; IBM has collaborated deeply to extend and improve the Orion IDE to act as a key editor experience in the product along with providing the JavaScript intellisense. So basically, IBM only cares about Orion, not Che. &gt; Che reuses the Eclipse core in numerous places on the server side. I understand that, I looked at the code. That doesn't explain why you had to create a *web* IDE.
The robovm guys took the source and built robovm studio 
I agree, JPA is massive overkill for most apps. 
Correct. Several of my colleagues use the community edition at work. We mostly do back-end java development on a totally custom-built stack so the community edition has everything we need. I ended up getting the ultimate edition because I needed to do some webdev work.
In the article &gt;Would you expect multiple threads to concurrently access an ArrayList without issue normally? Of course you wouldn’t! So you shouldn’t expect it to within a parallel stream. In fact, it’s best not to do this even in a non-parallel stream, just in case someone tries to make it parallel in future. It tends to be safer to collect this into a List using the collect() operation. I think the assumption is as you said, it's a shared list. If he just said &gt; Don't update shared mutable varaibles. Without the example I don't think there'd be much confusion. I just think his 2 line example isn't clear. 
The `onclick` callback solution is a really nice implementation option
Thanks for the article quote, I totally skipped that. That's somewhat understandable and using `collect()` seems appropriate in that scenario. However that example isn't helpful for a cheat sheet, what does it add, if you need to read the article beforehand?
Python is even older ;-) Besides that I don't see a relationship between the age of a language and the sense of presenting awesome libs or frameworks for it... 
My company provides a JDBC driver that helps isolate troublesome JDBC traffic, and can help optimize it as well with rule-based caching: http://www.heimdalldata.com/download-self.html. We have seen some awful SQL redundancy come out of upstream libraries, so even if you don't think you have a problem, doing a review with the tool can find optimizations you didn't know you could do.
Nick: I've found that it's quite difficult to engage in threaded debates. We welcome any one getting in direct contact either with us or the Eclipse Foundation to have a direct dialogue. Also, there will be sessions on Che at EclipseCon along with a variety of other conferences coming up, where there is a chance for the community to engage verbally with good discourse. We can provide that list if appropriate. I'll be giving a presentation in March and many of the vendors listed will talk about their involvement (and some new ones not yet mentioned). The project is an eclipse project. The marketing, language, project structure, submissions, legal reviews, and contributions are done under the guidance and approval of the Eclipse process, which is quite onerous. The Eclipse Foundation has around 12 board members, and many of the companies we collaborated with are part of that board. Some are not. Most of the contributions from Codenvy (&gt;50%), but there are substantial contributions from other vendors, even if the git logs don't show it that way. It's ok for you to have a preference for other options. This project has well over 20,000 engineering hours into that. It's ok for you to not understand the full driver behind it, but on business level you can appreciate that a company probably has some reasonable definition of the opportunity to pursue in order to get themselves and other commercial businesses to invest 20K hours of engineering time on an open source project. As for whether we got the positioning right or wrong, it's a first beta release. We will be quite keen to be data driven. Engagement, downloads, usage, and issue feedback will be a signal of whether we are heading in the right direction.
Why 'Che'? Is it made in Argentina?
try /r/javahelp, but you won't get any help without a lot more information. Like what you've tried/read already.
That's why it's best to [add datasaource-proxy or p6spy](http://vladmihalcea.com/2014/02/01/taming-jpa-with-the-sql-statement-count-validator/) and log all SQL statements at JDBC driver level.
Thanks for the story! Play 1 was so exciting, but they sorta left us hanging when they did the Play 2 switch. My app is small enough that a rewrite in Play 2 isn't unimaginable, but I have been hoping to stave it off as much as I can.
Quite likely not even Java related as bots can be programmed in basically any language. Try /r/learnprogramming, but prepare your post much better. Provide more information, more details. Also include what you already have done, how your level of programming is.
I wished the Eclipse Foundation would get its act together. First it lost Android. All they now do is complain about that loss and half assed attempts of creating an Eclipse based alternative to Android Studio. They completely slept through Gradle slowly taking a bigger share. Buildship is still a bit of a mess (Spring's Gradle plugin is tolerable). Then they do Che together with CodeEnvy, which is a nice demo, but nothing of value. Their main contributors are mostly concerned with a shitty CSS dark theme instead of fixing long standing bugs, such as proper HDPI support. To add insult to injury, if you want to contribute or report platform specific issues, you are ridiculed for not using the right OS. IntelliJ IDEA CE is OSS (Apache 2 even). Their devs are responsive even to freeloaders like myself. And there's no undocumented abominations like m2e connectors (which they now want to mirror for Gradle, fuck that). Sad to see Eclipse go down the drain so fast. I used to be one of the people defending it. Guess times change...
Death to Applets! 
See this preso: [Migrating From Applets to Java Desktop Apps in JavaFX](http://www.slideshare.net/brunoborges/migrating-from-applets-to-java-desktop-apps-in-javafx/)
Errai is a great web framework!
Who *they*?
Are you really [still spamming](https://www.reddit.com/r/learnprogramming/comments/3yrl1z/udemy_java_application_development_course_for_free/cygccf0) your bullshit scam course? At 99% off? Wow what a steal! And yet still no acutal references, *still* only a barely working [website](http://www.flipbell.com/) (crammed together by using some template and stock photos, I'm sure) where almost none of the links work, and those that do point back to "index". And still not giving ***a single*** reason why you're qualified to teach something, let alone that you know programming. Also, in case you don't realize, it's bullshit scams like this that give indian programmers a bad name. Edit: link to that hilarious website.
I wonder if this is limited to MySQL and if other databases sent the warnings with the results, or if every DB requires fetching the warnings as part of a second database call. **Edit:** A quick search of the PostgreSQL JDBC driver suggests that the server sends warnings like any other error.
It's about time.
IntelliJ is nigh-unusable for me because of the lack of workspace support. It makes multi-module projects a nightmare when everything is (rightly!) not in a single monolithic repository. Five windows!
What sort of play 2 example app are you looking for? Something that connects to a remote REST API?
I'll see what I can do. There's four ORM options available in Play -- eBean, Anorm, JPA and Slick, and most of the time it's Slick these days. And I work with the WS client and microservices side mostly, so I haven't touched Anorm in a while. The Play team does maintain a Play-Slick integration: * https://www.playframework.com/documentation/2.4.x/PlaySlick * https://github.com/playframework/play-slick and I also wrote an Activator template showing Play working with Slick 3.0: * https://github.com/wsargent/play-slick-3.0 I realize this doesn't help with Anorm, and you've also pointed out that the tutorials page needs work. I've filed a bug: * https://github.com/playframework/playframework/issues/5496 But again, it really needs more hands on board. If you can add even small pull requests in, it would be a huge help.
It was named after the city that it was created in: Cherkasy, Ukraine.
While I am the founder and CEO of Codenvy, I am also a board member at the Eclipse Foundation. The Eclipse Foundation may not be in a position to do much here, even if their *desire* is to achieve exactly what you stated. Which, for what it's worth, most of the managers at the Eclipse FDN would do exactly what you just stated. But they actually cannot. The Eclipse FDN itself has staff that is there to support projects, but they are generally not contributing to projects. So the governance and charter of the organization is strictly tied to providing services + infrastructure + process around enabling open source projects to be successful. But they generally do not provide resources to make contributions to projects. 99% of all projects and project contributions are staffed by full time employees from member organizations or by open contributions made by the community. The Eclipse FDN has been trying to raise awareness and funds with a number of successful campaigns related to marketing. They use these funds to hire professionals to work on issues prioritized by the community. So it's a form of pseudo staffing for commitments, but this overall investment is quite low. As the Eclipse IDE itself is not much of a revenue generating opportunity, the primary contributing companies for it like Google, IBM, Oracle, Red Hat and others are always at some sort of tension odds with staffing it further to advance it in a way that makes it truly competitive. It has a tendency to get staffed to achieve internal corporate goals which is around language support &amp; stability vs. any sort of market competitive opportunity. It is a very challenging set of circumstances for the FDN managers to face every day. Codenvy, on the other hand, we have a business plan and strategy where it just so happens that having a successful open source project related to IDEs co-aligns with a separate business opportunity that Codenvy has related to better agile workflows. When those two worlds intersect, it gives us and our investors great joy to be able to allocate resources to an open source initiative. And as the initiative has had some good value proposition and falls inline with the vision of other commercial vendors, they too, have been willing to increase their investment in dollars &amp; engineers to the project. Sometimes their commitment is just mentoring, adoption, testing, introductions. In many cases there is financial and engineering resource commitment. This is happening because there is a broader oppty for some of these vendors to drive their own revenues with a workspace server vs. just having an IDE. It's taken us many years to get to this point where vendors are appreciating this (this is our 4th year of operation), but we are not there. It's a primary objective of ours to grow the ecosystem in numerous ways. Commits is one approach, but just having successful testers, a good GitHub community, and getting Che embedded in more products are also part of this.
Are you using MySQL? It seems that the behaviour depends on the database being used, due to differences in the protocol and their JDBC drivers. For example, postgresql's JDBC driver automatically records any warnings after every query. So hibernate wouldn't result in additional queries to the database with pg.
I thought it was weird that IntelliJ community doesn't assist you with JavaScript code. I couldn't figure out why my work machine formatted JavaScript just fine, and my home machine pretended it was just text. 
That's potentially a big perf hit. But hibernate is pretty terrible also.
Google "tuxjdk", it's a jdk with font rendering patches applied. Run intellij with that jvm. Did wonders for me, I consider myself pretty sensitive to font rendering quality. Ymmv, but it may work. 
It is a specialization of the Optional monad with some additional methods sugared in to make it easier to use. Internally, the when method, enters the monadic domain with the cause exception being the encapsulated value.
This seems like less of a cheat sheet and more of a walkthrough/tutorial. A cheat sheet for me should have all of the common methods and what they do. 
One nit: Their table at the end showing the attributes of each distribution method shows WebStart as depending upon the JavaPlugin, which is incorrect.
[I'm discussing the possibility of adding a configuration property](http://lists.jboss.org/pipermail/hibernate-dev/2016-January/014173.html) that must be enabled to get those warnings. When being disabled, setting the log level to WARN will not ripple to fetching JDBC statement warnings.
HTML5 has supported multiple file uploads for a while, which is the recommended approach. Also you should reconsider your IE8 support. I know a lot of organisations are using it, but I expect that given Microsoft is dumping support for it soon...most organisations will move off it soon. Another option is "Google Chrome Frame" to get around IE8 support.
Microsoft's support for IE 8 ended January 12 2016. Anybody using it after that is irresponsible and to be frank just plain stupid. 
Thank you, both of you.
[Here](http://download.java.net/jdk9/docs/api/java/util/concurrent/Flow.html) is a rendered version of the JavaDocs if you only want to see that.
Do you use OpenJDK or Oracle JDK? The latter should have better font rendering. However you have a point in that even with the Oracle JDK, some fonts just look horrible, while others (e.g. Dejavu Sans Mono) look fine (to me).
Great content. Thanks for sharing !
See the presentation I posted [above](https://www.reddit.com/r/java/comments/42yow7/oracle_plans_to_deprecate_the_java_browser_plugin/cze8kzn). Then checkout the WebFX project (http://github.com/brunoborges/webfx)
Build a Java desktop app instead... Publish it with Java Web Start. See the presentation I posted [above](https://www.reddit.com/r/java/comments/42yow7/oracle_plans_to_deprecate_the_java_browser_plugin/cze8kzn).
HTML5 on IE8 though - thats not supported. Swap to webstart maybe? (BTW support for chrome frame ended a few years back. Presumably still works but just as big a risk as IE8)
About time!
To be fair, [it happens to the best](https://github.com/jOOQ/jOOQ/issues/3558). Cheers ;-)
Indeed, MySQL seems to be one of the primary victims of this JDBC API "misuse". In SQL Server, for instance, it often makes sense to collect these warnings, specifically when running batches, or stored procedures (which execute batches)
&gt; the open source alternative to IntelliJ. Wow. Eclipse used to be more self-confident than that! Mentioning the competitor first thing in the article? So, should I continue reading the article, or should I go check out IntelliJ now?
It's a marketing bullshit. 
Like IBM after they lost PC market and went Linux love and consulting you mean? Or Apple embracing UNIX via NeXT after all those years of being a proprietary company almost closing its doors?
&gt; Just because the unit function isn't public, it doesn't mean it isn't present or parameterless If it's not public then it's not callable from outside of the library, and therefore it doesn't exist as far as any user is concerned. &gt; This library heavily borrows from naming choices in the JDK8 Optional monad [...] Which in no way makes any of your classes a monad. &gt; It implements all of the methods in Optional, except for flatMap (is does have map) Therefore it can't be a monad. This comment of mine [here](https://www.reddit.com/r/java/comments/3qcroi/rfc_optionalmethod_monad_for_calling_methods_on/cwec7bi) demonstrates how the Java `Optional` type satisfies the conditions required to make it a monad. I don't actually know which of your classes you think is a monad as you don't specify, but as far as I can see none of them even have the right signature, and consequently can't possibly observe the 3 laws. The ball is in your court to actually prove that any of your classes actually constitutes a monad. Otherwise you're just using the term as a meaningless buzzword.
Without flatMap, it literally can't be a monad. flatMap is the reason that something is a monad. Plus, monads / functors / applicatives by definition are not allowed to be specialized. They have to be capable of working with any types, or else the functor / applicative / monad laws don't hold, and many assumptions about the type become broken. *(EDIT: Although I guess you could argue that you're just working in a different category than the category of all types, but that's a loose argument, and not one you can make without proficiency in category theory).* Speaking of which, you can't prove that your type fits the criteria I described [here](https://www.reddit.com/r/java/comments/42wd3e/a_small_library_to_handle_checked_exceptions_in/czdpfxr). Not implementing the monad API and not following the monad laws means it's not a monad, by definition. Mimicking the Optional monad doesn't make it a monad.
Likewise, if you're interested in doing some discount code moonlighting, elance.com will give you more gigs like this.
Java EE is very well suited for microservices. Although I wouldn't recommend to use these anymore, but with EJB 1 the original use case for J2EE was in fact microservices (called distributed objects). You can put a few beans in an archive then package it with the AS and deploy it with docker. Almost every server has docker examples now. SPAs can be annoying and not everyone likes them, in fact it's far from a done deal to say that SPAs are universally the future. But, even if you personally dig them then you a JAX-RS powered backend works really well with them, and although it's not specifically build for it JSF too can do SPAs.
Thanks! So, what would be practical examples of this?
Microsoft is a monopolist convicted of abusing its monopoly. The only thing that saved them was corruption in USA government which gave them a slap on the wrist instead of splitting up the company. And of course these days it's expected for for-profit companies to engage in immoral/unethical behaviour to increase their profits, but that doesn't make it right. I wasn't talking about Microsoft working with OpenOffice/LibreOffice formats, I was talking about opening up their own document formats. Instead of bribing ISO committee to accept their own undecypherable format with closed BLOBs as "standard". Or opening up protocols with their own servers for purposes of interoperability. Sorry if I didn't make it more clear, word "open" means many things these days. Oh, and as far as I know Microsoft still uses unethical practices to prevent OEMs from manufacturing computers with Linux preinstalled and their licensing disallows dual-boot. Plus the whole unethical behaviour with UEFI designed to prevent devices from booting alternative operating systems. Oh, and how about paten-troll like behaviour forcing most Android mobile device manufacturers to pay up for frivolous patents? Microsoft is as evil as ever, but they are somewhat smarter at it, and with rise of Google and Apple their influence has lessened. Maybe that will change with Satya Nadella, but given past 20 years of history, I'm not too hopeful.
Wildfly Swarm is an example where EE is evolving for microservices and docker.
&gt; Instead of bribing ISO committee to accept their own undecypherable format with closed BLOBs as "standard". Could you share the source or proof of that claim? I never saw that before. &gt; Or opening up protocols with their own servers for purposes of interoperability. Doesn't Microsoft license the use or implementation of such protocol to others? I found [this](https://msdn.microsoft.com/en-us/library/cc307725\(v=exchg.80\).aspx), not sure if it is what you're referring to. &gt; word "open" means many things these days. Yes, and it does not always mean "free as in free beer". &gt; Oh, and as far as I know Microsoft still uses unethical practices to prevent OEMs from manufacturing computers with Linux preinstalled and their licensing disallows dual-boot. Please share source and proofs. I would like to read more about this. &gt; Plus the whole unethical behaviour with UEFI designed to prevent devices from booting alternative operating systems. Not authoritative information, but I read that [UEFI does help blocking certain malware](https://twitter.com/SwiftOnSecurity/status/673945212046016513). &gt; Oh, and how about paten-troll like behaviour forcing most Android mobile device manufacturers to pay up for frivolous patents? Giving back credit to the author when you make use of others' work to help yourself sounds normal to me. Even for GNU GPL or BSD licensed projects, the author requires you to open source your modifications (under some conditions) or keep the license information in the source code. Give credit where credit is due. I still do not understand your hate. Sound like you just don't want a certain company or organization to improve.
&gt;still am bunking Curious, what does this exactly mean and is it common terminology in college now? To me it sounds like you're saying you sleep in class. &gt;Should I still learn Java I think it's definitely a good platform to pickup. Very solid, great community, most jobs, arguably the best performance/effort payoff, amazing open source, static &amp; strong typing (reification notwithstanding). But if you would rather spend time developing web front-ends (as opposed to backends where the actual business logic should live) then you might want JavaScript. &gt;Does this means it will have limited web functionality In the context of applets yes, but nobody has been building new applets, or at least should be. There are far better options. It still kicks ass on backends and Android. &gt;What other OOP languages should I learn It's always good to learn languages, but for OOP I would stick with Java, unless you're planning for a career in London writing traditional bank apps (as opposed to high frequency trading and such). For some reason those people haven't moved beyond C#. It's a good idea to mess with Scala which can do OOP &amp; has very strong functional capabilities, or an all functional language like Haskell. A MOP would be good to have under your belt like Python, but it's weak and dynamic typing suck for anything that you intend to keep around long term.
They can't. MS has already lost the server race. Now they are trying to move .net to Linux. If they control .net and everyone uses .net on linux servers, they can sell windows software taht way.
We're not (its the customer's risk). We no longer accept IE6, but will still be supporting IE8 for a good few years yet. Typically these environments have no external access - intranet apps and the like. Its usually public sector, and often military, organizations that make such requests. Banks seem to be the most common private sector legacy browser users. 
Well, things are built on trust. Microsoft has been shown time and time again to do not good things for the world - and developers do not trust them. Can't blame them when they do things, but will not change my opinion of them. They add no value to the world, and I would be fine if they vanished tomorrow. In 10 years if they keep doing good things, maybe some people will care.. but at this point - I can do anything .net can do in other languages, so why would anything they do to .net excite me? Total snoozer
Oh shit. I think this is supposed to be in /r/javahelp. 
&gt; Whatever though, it's not my site. Exactly, many people can't see that and complain that SO doesn't cater to their every wish. Yes, there have been some good discussion on SO and I've found them very interesting, but I can also see that the platform the way it is doesn't really work and can't scale with such content. So if SO and its community decide that they don't want to be the place for that content, who are we to get mad about SO for that decision? Too much entitlement perhaps?
Openfire talks to its own db tables (or custom tables if you configure it that way). But yea, it's not the best question out there, but it did not deserve to be closed. As I said before, if a question is bad, let it languish with 0 votes and no response... there's no need to actually close it and prevent a response. Think of how shitty posts on Reddit are dealt with. Do we let people vote to close them or do they just rush to the bottom of the pile quickly because of lack of votes?
StackOverflow wants to be an encyclopedia of curated answers, it doesn't want to be a mess of unanswered questions. Reddit is not really comparable to SO in that regard. 5 people [voted to close it](http://stackoverflow.com/posts/19855446/revisions), nobody bothered to ask for clarification, that is what is *actually* wrong with that question, not the matter that it got closed. Unfortunately you can't see how many of those close votes got in before some nice user edited it. The question in its original state was absolutely abysmal. As I said, I don't fully agree with how it was handled (no comments on how to improve it), but OP didn't even comment to ask what was wrong with his own question. He could also have put in a request for moderator attention to get his question reponed where he gets a message field to state his case if he thinks the close was a mistake. Closing a quesiton should be a clear sign to the OP that he should probably react in *some* way, be it to ask what isn't clear, complain that it's a mistake, file a ticket or just work on his question. If he doesn't do any of these things, I have little pity. 
&gt; excluding a few like String == String and that, too, is easy to detect and FindBugs or IntelliJ will do that for you.
If they like it so much they will make ports for Office and other popular apps and services to expand. They will at least give more frequent updates to Skype.
I'm not really sure. Years ago you could, but I haven't used this in many years because I can't afford to work that cheap. It's mostly Indian and Chinese developers who you're competing against with for these sort of $50 per feature work queues.
They're not deleted automatically, but after 48 hours of a question being closed, people can vote on it to be deleted. This restriction doesn't apply to ♦ moderators. Some closed questions are quite useful, in particular those that are duplicates and lead you to the proper answer. They're useful because they make finding the canonical answer easier with search engines. Why the others aren't deleted automatically I don't know. You can ask about it on http://meta.stackoverflow.com/ If you get downvotes: don't be discouraged, on Meta downvotes mean that people don't agree with you/don't support your idea, not that it's a bad question.
Stop spamming [your's employers website](https://www.reddit.com/r/forhire/comments/3vhre6/hiringonline_seeking_blog_contributors_with_web/cxr0q8r) &amp; read the [Reddit rules](https://reddit.zendesk.com/hc/en-us/articles/204536499-What-constitutes-spam-Am-I-a-spammer-) domain submitted from|count|% :-|-:|-: [nordicapis.com](/search?q=%28and+site%3A%27nordicapis.com%27+author%3A%27bdoerrfeld%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|25|48% [self.forhire](/r/forhire/search?q=%28and+author%3A%27bdoerrfeld%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|7|13% [self.AskReddit](/r/AskReddit/search?q=%28and+author%3A%27bdoerrfeld%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|6|12% [self.SeaJobs](/r/SeaJobs/search?q=%28and+author%3A%27bdoerrfeld%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|3|6% [youtube.com](/search?q=%28and+site%3A%27youtube.com%27+author%3A%27bdoerrfeld%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|3|6% [self.ebooks](/r/ebooks/search?q=%28and+author%3A%27bdoerrfeld%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|4% [self.hiring](/r/hiring/search?q=%28and+author%3A%27bdoerrfeld%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [self.startups](/r/startups/search?q=%28and+author%3A%27bdoerrfeld%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [self.askscience](/r/askscience/search?q=%28and+author%3A%27bdoerrfeld%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [self.AstralProjection](/r/AstralProjection/search?q=%28and+author%3A%27bdoerrfeld%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [en.wikipedia.org](/search?q=%28and+site%3A%27en.wikipedia.org%27+author%3A%27bdoerrfeld%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [laughingsquid.com](/search?q=%28and+site%3A%27laughingsquid.com%27+author%3A%27bdoerrfeld%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% subreddit submitted to|count|% :-|-:|-: [api](/r/api/search?q=author%3A%27bdoerrfeld%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|8|15% [forhire](/r/forhire/search?q=author%3A%27bdoerrfeld%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|7|13% [AskReddit](/r/AskReddit/search?q=author%3A%27bdoerrfeld%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|6|12% [webdev](/r/webdev/search?q=author%3A%27bdoerrfeld%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|3|6% [SeaJobs](/r/SeaJobs/search?q=author%3A%27bdoerrfeld%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|3|6% [scala](/r/scala/search?q=author%3A%27bdoerrfeld%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|4% [java](/r/java/search?q=author%3A%27bdoerrfeld%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|4% [cybersecurity](/r/cybersecurity/search?q=author%3A%27bdoerrfeld%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|4% [ebooks](/r/ebooks/search?q=author%3A%27bdoerrfeld%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|4% [SaaS](/r/SaaS/search?q=author%3A%27bdoerrfeld%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [rest](/r/rest/search?q=author%3A%27bdoerrfeld%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [B2BSaaS](/r/B2BSaaS/search?q=author%3A%27bdoerrfeld%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [hiring](/r/hiring/search?q=author%3A%27bdoerrfeld%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [startups](/r/startups/search?q=author%3A%27bdoerrfeld%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [fintech](/r/fintech/search?q=author%3A%27bdoerrfeld%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [tech](/r/tech/search?q=author%3A%27bdoerrfeld%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [PublicSpeaking](/r/PublicSpeaking/search?q=author%3A%27bdoerrfeld%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [IOT](/r/IOT/search?q=author%3A%27bdoerrfeld%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [encryption](/r/encryption/search?q=author%3A%27bdoerrfeld%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [Kotlin](/r/Kotlin/search?q=author%3A%27bdoerrfeld%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% _^...and ^6 ^more_
&gt; If you are taking notes like writing examples pieces of code, Yes, this is what I am referring to. The professor will write code up on the projector and explain what it is doing, how to format it, etc. I would like to be able to write down his example code and then leave my own comments. As you mentioned, // is a great way to do this. I guess I should just open a new project specifically for class purposes and just write code there. I'm embarrassed I hadn't even thought of this before. 
I second this. Don't sweat the syntax. It comes with time, and is really simple to master. Mastering syntax isn't even 1% of learning how to program in any language. Take notes about the CONCEPTS that you're learning. Pay more attention to the semantics of the software that's being written. Don't worry so much about syntax.
With IBM it was obvious that it was genuine. In 2000 IBM invested a billion, with a B dollars on Linux. I haven't seen anything that indicates this isn't just Embrace, Extend, Extinguish. That approach actually works! Microsoft will build something with the best non-standard extensions possible. Easy to use. Making your life easier. Sweet like drug. And before you know it, your system won't work on anything else. Another big difference is that IBM sells hardware. Embracing Linux to sell more hardware makes sense. Microsoft makes software that competes with open source, including open source operating systems like Linux. I can appreciate that Microsoft wants to not get left behind and will embrace, Java, for example in order to make it easier to put your Java workload in Microsoft's data centers. 
So now its cool to say html and css and javascript and sql and java is Not Polyglot. Because no more Scala.
Nice first thoughts article on CHE http://www.developmentalmadness.com/2016/01/28/eclipse-che-cloud-ide-first-thoughts/
Getting syntax exactly correct is not always important. The overall structure is more important. Also for Java, there is Javadoc which gives you all of the information for code you could possibly ever need, and tons of tutorials. Focus more on what is happening in the code, than where indentations are and such. When you are doing a project you will have plenty of time to look things up, look at tutorials, and look up documentation so if something ends in a )} or }) isn't important.
&gt; Satya has shared surprise messages, like “Microsoft Loves Linux” Serious question: what is the possibility of Microsoft migrating .Net and Windows over entirely to the Linux kernel? It appears, at least to me, that there is very little value-add in the NT kernel from a business perspective given that Linux is by far the dominant force in the data center. Clearly, this is non-trivial from an engineering perspective, but I cannot help but see this as the eventual long term goal for which Microsoft should be aiming. I can already see them taking steps in this direction with the integration of CLANG into Visual Studio.
X-Post referenced from /r/programming by /u/monumentshorts [Logging the easy way](https://www.reddit.com/r/programming/comments/4371qv/logging_the_easy_way/) ***** ^^I ^^am ^^a ^^bot ^^made ^^for ^^your ^^convenience ^^\(Especially ^^for ^^mobile ^^users). ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Java EE is ok, that's the servlets you were talking about. Spring and Guice are ginormous industry standards.
I was interested in learning scala but as I read more and more into it I'm finding companies are giving up with it because apparently no one knows it and they're finding it hard to teach people. 
https://jhipster.github.io/ (no JavaFx, but would fit what you're doing pretty quickly)
Ahh, cool thanks.
Thanks, I'll check it out.
Dropwizard is a nice Java web framework - clean, lightweight, and actively developed on GitHub. It can be used with whatever front end you like such as Angular JS and bootstrap. If you're curious to see some extra sample code with good explanations, check out [XDropWizard](https://github.com/timmolter/XDropWizard) on Github. 
I would have a look at https://ratpack.io/ or http://vertx.io/ very easy to start up and leverage lambdas.
Thanks, that's a good starting point.
Link does not work. [https://dzone.com/articles/poll-what-java-jvm-frameworks-do-you-use](https://dzone.com/articles/poll-what-java-jvm-frameworks-do-you-use)
Not a StringBuilder?
&gt; I'm finding companies are giving up with it because apparently no one knows it and they're finding it hard to teach people. Source?
For the project you described, a lightweight framework will do. If you want to learn marketable skills, I would go for "overkill". I would suggest either Spring or the Java EE stack.
Bear in mind that Angular is deprecated because Angular 2 is coming out this year. I'm a little biased because I found the design of Angular to be wanting, but they addressed almost all of those issues with Angular 2. They borrowed the best of React and kept the stuff they probably should have kept.
 The most popular and easiest to get started with is a Java EE setup. The specs you will need are JPA, CDI and JSF. It you can get TomEE running on Amazon that would be the easiest course. You would have a complete framework built in. You can also just get the Jar files and add them into your project as you would with any other framework. The most popular libraries that implement those specs are Hibernate(JPA), Weld(CDI) and Mojarra(JSF). PrimeFaces is a fantastic JSF web component library. www.primefaces.org You should also learn Maven. It is a very popular build tool that makes things a lot easier. I would also add if you are unsure Netbeans IDE has some excellent and fairly quick tutorials on the major frameworks. www.Netbeans.org 
How do you even pick a front-end framework to start learning nowadays? There's so much frequent change (and choice!) in the JS world that I feel incredibly overwhelmed when trying to decide. 
I sympathize -- the situation *HAS* improved greatly over the last two years though. React and Angular seemed to have cleared the orbits of the JavaScript system for the most part as far as Single Page Applications (SPA) go. If I were starting a project literally today, I'd be slightly frustrated because Angular 2 isn't going to be out of beta for a while. If you've got a smaller project, that you don't anticipate growing a ton, a combination of jQuery and Handlebars isn't the worst thing you can do. (But bear in mind, all small projects tend to grow)
Spark: http://sparkjava.com Dropwizard: http://www.dropwizard.io/0.9.2/docs/ 
Don't use JavaFX for the web. It requires the Applet plugin or tools to convert JavaFX to JS. Frameworks: DropWizard, Play, or Spring Boot. Or use Jersey+Grizzly+Freemarker which is basically DropWizard.
I'd strongly suggest Spring Boot. It very easy to get up and running. I'd also suggest you look at Spring Boot + SPA(AngularJs, React or Ember). I'd further suggest you use a css library like Twitter Bootstrap. Starter App https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-first-application.html Hibernate https://docs.spring.io/spring-boot/docs/current/reference/html/howto-data-access.html Spring Boot + AngularJS https://spring.io/blog/2015/01/12/spring-and-angular-js-a-secure-single-page-application Spring Boot Examples https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples
Spring Boot. There is also a nice Tutorial how to get started with it + Angular. If I need to target the JVM and not necessarily use Java, the Scala version of Play2 is pretty nice.
I tried it out, and the visualizer is cool looking. I might be inexperienced or really don't know what to even make of the information. A tutorial pointing out stuff would be nice? I like that you can drill down into stuff, but besides it looking cool, I'm not sure what this visualized dump tells me.
sorry, corrected :-)
The most popular? Like hell. 
Good points indeed. The question it answers (in great detail) is 'what is the code spending its time doing'. It's probably mainly useful for massively parallel java processes such as web servers. In such an environment, point samples of the state of all threads can be used to answer the above question through statistical analysis and a nifty visualization. We built it out of necessity. We had a live production environment with performance issues, but lacked the instrumentation to tell us where the cpu cycles were spent. Dumping threads was at least possible, but in raw form, they didn't give us the answers we wanted. Statistical analysis and visualization was the missing piece. 
"Show me a printable copy" button =&gt; 404.
Honestly it wouldn't surprise me if there was some research group that maintains a semi- working port already just like how Apple had an x86 port of OS X when they were on PPC.
If max marketability is what you seek, I suggest ditching Java for client side and use JavaScript/html/Css instead, and use java to create your rest services. JavaScript is king when it comes to the web but Java definitely still has its place on the server. JAX-RS for rest is probably where you would start since it's the most popular, although I prefer sparkjava and other rest micro frameworks myself. I'd probably use some JDBC wrapper instead of a full blown ORM though. Seems like the industry is getting away from ORM's.
Forgive my ignorance, but what problem does this solve?
Install ruby? Seriously?
At or near the top in jobs, SO questions and most surveys. Very little evidence to doubt the statement that it's the most popular.
~~[Sass depends on Ruby](http://sass-lang.com/install)~~ I stand corrected, that has been changed.
Here is my understanding: 1. Annotation based route provides the default route mapping 2. Route file can be created for routes that are not linked to a particular action methods, e.g. the routes to static files or directories; In addition to that if a URL needs to be remapped to a different action methods so it OVERWRITE the annotation based route mapping, it can be put into the route table file 3. Configuration based API can be used to express the intention that a certain URL pattern cannot be overwritten by route table An admin tool could be used to check the overall route mapping table of an application The ActFramework (my recent Java opensource project) is created with the above understanding built inside. Have a look of https://youtu.be/dzJDcvQ5KOU to see how to check the route mapping table on an ActFramework application
Looking it up a few days ago the first Google search result for ORM was a good article about how it's an anti-pattern, but I see it tons of job postings in my area. :(
Yeah, the gd logger wraps this up and adds more stuff too when you use the json setting . The difference here is sepearating how you log with how it's logged. Imagine logstash changes something, now all your logs are busted. Using a lib like this you update the underlying formatter and all apps are still happy. 
What kind of projects do you want to work on, e.g. web, desktop apps, machine learning etc? A couple of ideas... Write an application that recursively scans a directory and reports on the largest files. The program could return information about each file such as type, size, last modified etc. The application could use a command-line argument parser to accept options such as: only drill down to n number of directories; only report files over n size; only include files of type x; options to sort the output in different ways; notify of duplicate files using different hashing algorithms etc etc. A command-line ticker app that displays information from a feed. Maybe it displays sports scores, stock prices etc. A simple web application that retrieves information from a database and displays it. As an example, you could download nutritional information from the web (there are loads of places to get this), and write a web application that allows you to search this information. You might offer a feature that reports the nutritional information for a defined set of ingredients. A web MVC project using your framework of choice. You may want to repeat the project with different frameworks for a comparison. Maybe add authentication/authorisation to the application where people have to login, and each person has a different role that gives them different permissions. 
Libhdx is a great java game framework to practice design patterns with. Plus, free personal video game when you're done. 
This one is front end centric. It's s for complete beginners and gradually will build you up to advance over the months (or years depending on your commitment) . It's completely free. No strings attached. In the end, you get to do a bunch of projects. http://www.freecodecamp.com/map
I typically only see this when initial indexing is happening on a project or the GC is thrashing because the JVM heap doesn't have enough space. Try increasing the max heap (Xmx) variable in idea.vmoptions or idea64.vmoptions (depending on whether you are using the 32 or 64 bit version) to a more reasonable amount (1GB for 32-bit, 2GB for 64-bit) and see if your issue persists. If so, awesome, you have been suffering from memory pressure and the GC is struggling to keep enough free space. If that doesn't help, are there any background tasks running (particularly indexing)?
Write a program that will help a problem you have personally. I am pretty much in the same boat as you but I decided I am going to make an app that keeps track of where/how I spend my money because it seems like i spend it too fast lol. I will not know everything I need to do but it gives me the opportunity to learn on the way.
I've had the same issues. Restart fixes it temporarily. Very annoying.
I've noticed this A LOT with our main project which is comprised of about 40 separate maven projects all using version ranges. When some project is updated to include a incompatible range, i.e. everything uses [1.0.0,2.0.0) and some modules move to [2.0.0,3.0.0) - IntelliJ ( or more, the maven server ) goes into an essentially live-lock spin walking thru EVERY combination of dependencies to try and satisfy a viable range. Thankfully, 3.3.9 of Maven ( some of the other later 3.3.x releases ) fast fail a lot quicker rather than just making you cry. In the maven configuration you can tell IntelliJ to use a different version than the one it ships with, I tend to always do that which helps as well. 
They *finally* pulled it off! Really happy with this as Jboss is really one of the best Java EE servers out there! What people do forget now and then is that "final" is this context has some other meaning than the usual usage of the term implies, as "WildFly" itself roughly means "Open Beta" (Open for Community Testing). The *real* final will be called EAP. 
&gt;Hell, if I create basic hello world which runs on Tomcat, I'm using Java EE. Or am I? Not exactly, buy you're using parts of Java EE. I think the obsession of wanting to deploy everything on top op Tomcat is something the Spring guys once put in people's minds since it suited their purpose. And they vilified the idea of a full stack in Java, since that was what Java EE seemed to them and they had to be against Java EE (oh, Tc Server, you ironic little thing). Everywhere else full stack servers are quite appreciated, see RoR, .NET, Play, and others. &gt;avoidhugeships meant Java EE as a whole package, which is NOT most popular choice in whole Java EE ecosystem. Actually it is. Despite the years of indoctrination by Spring, people actually do find a base number of APIs that are guaranteed to be available and work together convenient. That's why most people install Debian, Ubuntu or RHEL. You get a stable OS with all expected packages in one go. The ones who build their own Linux distro from scratch are in the minority. &gt;And job postings, SO questions, surveys? That smells a lot like statistics. You can throw them at me whole day and I can show you how they are flawed or show you other that dispute your claims, so it's pointless. Please show other statistics then. Exact numbers are always hard and people always bend numbers (or make them up). Over at /r/programming "everyone" always wants that "their" pet languages (Python and Ruby mostly) are the most popular ones, so the sub as a whole has agreed on that. To them Java is a minority language and everybody out there uses Python or Ruby. Of course they live in a bubble as we know that Java is among the most widely used languages. Again, jobs, SO questions, surveys, github repos, they all point to that. Now you as Spring/Tomcat user want to believe that Java EE is not popular, perhaps since your tribe dictates that or it validates your choices, of simply because it's what you hear all day from "everyone" (where everyone is the small group of people in your personal circle). But it doesn't make it _true_. Just as Java being the small minority language just isn't true because almost everyone at /r/programming says that. 
how is it better to post this in /r/java rather than jetbrains' issue tracker? 
[removed]
I have the same experience. I started my first JSF project around 6 years ago. The framework has seem nice improvements but has not forced any kind of major rewrite. JSF 2 was pretty new then so it's nice to see it at the top or very near in recent surveys.
I meant what I said not what you said. You do bring up a good point that there do seem to be a lot of developers using major parts of Java EE without even knowing it. You have a strongly held belief that Java EE is not popular. Job postings and surveys do not agree with you. Statistics are not perfect but I will go with that over your personally held belief.
Why not both? We get a ton of marketing material for IntelliJ on this forum so I think critique is fair game.
NetBeans development has accelerated since Oracle took over and has also gained lots of really cool non-Java features (especially in JavaScript/HTML)
sounds like good use-cases for vaadin.com
That's pretty ignorant. As I remember, Microsoft invented AJAX and there were [innovations made in the browser](https://www.nczonline.net/blog/2012/08/22/the-innovations-of-internet-explorer/), and now they open source various projects (e.g. .NET Core, VS Code, CNTK for deep-learning, just to name a few, you can find more on [GitHub](https://github.com/microsoft/)) I don't think you can say that is "no value to the world". The more replies I read in this thread, the more I feel that people actually don't want competition and collaboration; just look at them how they blame a company open source a project and you will get what I mean. &gt; I can do anything .net can do in other languages, so why would anything they do to .net excite me? Hmm... So "I can do that in .NET, why would should *technology_from_another_community* excite me?" sounds the same to me.
Used to. Not anymore. http://sass-lang.com/libsass
I just had this idea yesterday. A web app that lets users configure and run trading robots. Trading as in trading stocks, commodities, fx, etc. What's good about this is that it adds to the typical full stack monolithic web app by requiring (as a best practice) a design that uses separate services. At least one as a price feed service, and another to run the ""robots" as configured. Messaging and Apache Camel will likely be used. The goal is to keep it very simple as this is a poc project for learning purposes. The "bots" will be initially configured to watch a single instrument and take action with stops and limits based on something very simply calculated such as Bollinger bands or moving averages.
I wouldn't learn J2EE as it's coming up on [10 years](https://en.wikipedia.org/wiki/Java_Platform,_Enterprise_Edition#Version_history) being succeeded by JavaEE. 
There is no J2EE anymore. HR people who write job advertisements are often not technically literate. They often just recycle buzz terms over and over again. "J2" - Java 2 is long gone, the current version of Java is Java 8 and all "Enterprise Edition" means is instead of just using the plain old compiler and runtime, you are also using the other Java APIs that together form a "platform". Things like the servlet API, the mail API, etc etc. In other words, Java 8 is also "J8EE". Enough about being pedantic. The best way to learn how to write server side code is to get a good book, good tutorials, and begin writing serve side code. Back in the day I did that by learning Servlets, then JSPs, and JDBC, along with learning accessory technologies like HTML, HTTP, and Javascript. These days, everything is about "frameworks". A "framework" is basically a kit. Instead of writing the same Servlet, the same JSP, the same boiler plate library for a very routine task that you have written before and that other people have written..........you now use a "framework", a kit, that has that basic stuff provided to you and in a more robust form. I may be a bit out of date, but last I heard the most popular "framework" for Java Webapps (server side programming ) is Spring. I would recommend a good book or tutorial, but when I learned it a few years ago I couldn't find any despite the hype about Spring being very well documented. Go to Amazon, find the most highly rated beginners guide. Supplement that with Google searches for tutorials and questions to StackOverflow..........along with a lot of determination to learn. Good Luck 
Thanks for the link. I didn't know that existed.
&gt; Regarding ISO standards for MS documents So someone voted, somebodies disagree, finally the format was standardized. OK. &gt; Regarding OEMs being prevented from selling Linux PCs I disagree. See [Dell preloaded with Ubuntu](http://www.dell.com/learn/us/en/555/campaigns/xps-linux-laptop?c=us&amp;l=en&amp;s=biz), [here](https://www.swt.com/notebooks.php) and [here](https://www.thinkpenguin.com/gnu-linux/korora-penguin-gnu-linux-notebook). I can easily find these stores on [Debian project website](https://www.debian.org/distrib/pre-installed#us). Not to mention Chromebook which uses Linux as OS kernel. Oh and I think iMac and MacBook from Apple pre-install Mac OS X instead of any Linux distribution, so looks like you want to blame Apple too. &gt; Read up on problems with Linux &amp; UEFI. Linux kernels shipped by Linux distributions MUST BE SIGNED BY MICROSOFT in order to boot it in UEFI-enabled devices. Looks like [Debian GNU/Linux supports UEFI](https://wiki.debian.org/UEFI) natively? I can't see they mentioning signing the kernel on that page. Looks like [Arch Linux supports UEFI](https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface) too. &gt; But they have thousands of software patents So actually the vendors are using technologies from Microsoft, and the vendors are licensing the work to build their phones. &gt; I did want that organization to improve Hmm... Maybe the [code repositories](https://github.com/microsoft/) already showing that the company is improving just as others do?
http://stackoverflow.com/questions/8845186/what-exactly-is-apache-camel
Please read the sidebar &amp; follow its links. You'll find many resources there. Also search old submissions for the many many many previous recommendations about books for learning Java.
Camel and JMS differ fundamentally in what they are. Camel is closer to an ESB, even though they say they aren't an ESB by the definition of the word. Any sort of MQ or JMS implementation has only to do with messaging, which Camel can make use of. For example, Apache Camel can continuously poll a JMS queue and then do something with the data - an example is JMS-&gt;Business Logic-&gt;Send to Salesforce. I guess what I'm saying is that I don't quite get your question. Camel and JMS are two completely different things.
One question to ask is what JVM are you running under? I've been running IntelliJ on the Mac under JDK8 for ages ( have to modify the .plist file - or they now have GUI option to change it ) and the new v16 EAPs mandate JDK8. That change alone seems to make IntelliJ run better.
I am doing some of Udemy courses myself but I found it quite hard to concentrate on the course for more than a few hours a day. 1 hour of video usually translates to a few hours of watching because I do extra searching on the topic, some coding along with it and repeat watching complicated parts. I wonder how long does it take for an employee to complete the first 24-hour video course? 
It's been around for a while now. Although the big 'hip' thing nowadays is PostCSS which I doubt the Java world will get, not for a while anyways. https://github.com/postcss/postcss
How many thread dumps did it take for you to learn the basics of POO?
In ruby, if it looks like a duck and quacks like a duck, the code using it doesn't care that it's not a duck. You just shove in a fake duck for testing, or drop in new duck when ducky changes. In java, if it's not actually a duck, the code won't even compile. Many of the extra layers of interfaces and abstractions are there so that swapping out mocks for testing or wiring up alternative implementations at runtime without recompiling becomes trivial instead of impossible. 
I guess there were more core than thread dumps involved.
is it as good as Wildfly?
Visual Studio is such a dog compared to IntelliJ it's not even funny. And as much as I cannot live without ReSharper it makes it even worse. I am really hopeful that Project Rider turns out successful, if I can get my team to move to PostgreSQL and .Net Core for writing new applications we could just get rid of our MSDN licenses.
what plugins are you running and what project type did you have open?
Cache files might be messed up. Try Invalidate Caches option.
It's a real bug, I didn't see it in 14. Doesn't seem to occur on OS X.
Spring is still 'the' enterprise Java framework. JEE is dying in the enterprise. The shift is to Spring as an alternative. Less dependence on 'enterprise' features, more Java SE code with heavier framework use. Turns out that WAS isn't so great after all and Tomcat works just fine.
This is typical if you're using concurrent mark sweep GC. You could try using G1GC.
I am using G1GC, actually.
Because if we don't scream to high hell about an issue it won't get changed. Most of us in /r/java love IntelliJ, and this is a serious problem in version 15.
Oh God websphere. My favorite is when it ends up with phantom servers that it can't stop because it doesn't think they're started, but it can't start because they're actually running. Such a piece of shit. 
I moved to IntelliJ 16 EAP and Maven 3.3.9 to seemingly rid of the problem. Of course I'm using 64-bit version with these VM options: ``` -Xms4096m -Xmx8192m -XX:+UseG1GC ```
Hmm - I'd argue the other way. Of course, it depends on what kind of 'enterprise' you're talking about, but in big telco space, things are still steaming along. I think you'd be surprised at how 'light' modern containers can be - I've been working on a personal project recently (basic home automation system) using AngularJS, JPA/EJB/REST in Wildfly, and it's extremely lightweight.
Any recommended alternatives to spring batch?
I am the author of that post. After I published the first part of my tutorial, I received an email from the creator of Easy Batch (http://www.easybatch.org/). I created a small batch job with it and everything worked as I expected. If you don't want to use Spring Batch, you should check it out. Also, its website has a lot of good tutorials that might help you to decide if it is the right tool for you: http://www.easybatch.org/tutorials/index.html 
&gt;EAP 7 is in beta right now. It has been in beta and alpha for quite some time ;) "WildFly" is just a parallel name for "EAP alpha" and "EAP beta". &gt;In the last community to initial enterprise release, there was 471 patches. The exact amount was a little hard to determine, but I guessed it were around 750. See https://henk53.wordpress.com/2013/01/09/the-curious-case-of-jboss-as-7-1-2-and-7-1-3 I wonder where you got 471 from.
I would prefer if my old code worked without changes, or if there was a clear migration path. But unfortunately my experience with HC Client code is that migration to new version is a mess, where you have to hunt for changed/moved property names, or understand a new class design. Next time I'm updating my old code using HC Client, I think I'll just try OkHttp instead. Btw, in Go world, there is an upcoming Go 1.6 with HTTP/2 support, but they still use the same API. Clients don't need any changes, and simply by recompiling, they will get HTTP/2.
Java EE is not dying???!! It's better than ever, check CDI, jax-rs and bean validation! Check web sockets! Check json-b! It's better than ever and I see it used everywhere!
Why don't you just look at what is consuming that CPU with VisualVM? 
&gt;&gt; De-facto monopoly on office, ..., and Microsoft will resist losing it in any way they can. &gt; Given that Microsoft is a for-profit company, isn't that reasonable? Sure, but it is also the reason customers should not trust anything labelled Microsoft. Because they're not on the customers side (which would mean breaking the monopoly), but on their own side, with the customer being the enemy. It is indeed what most companies do which have a de facto monopoly, and hate by the customers should indeed go to all such companies.
Thanks for sharing. 
How are JAX-RS and JSR 303 specifically JEE? To my knowledge both are not specifically in the JEE spec and are SE. 
[removed]
Things don't seem too different looking at an example here (java file) https://hc.apache.org/httpcomponents-client-5.0.x/httpclient/examples/org/apache/hc/client5/http/examples/ClientConfiguration.java
Below is a link to collection of tools from different vendors with corresponding links to the products built to locate race conditions. It contains the descriptions of the products as provided by their vendors. You are welcome to add your opinion of this comparison and to add to this collection. 
Thank you
Look in to the Play framework. It's pretty quick to pick up and make a little web app with, which would be nice because you could access your information from your phone as well. [Getting Started Guide](https://www.playframework.com/documentation/2.4.x/Installing) [Play Java Documentation](https://www.playframework.com/documentation/2.4.x/JavaHome) You can also host the site really quickly and easily with [Heroku](https://www.heroku.com/). It has a free version that is a little bit slower than the paid versions but not too big of a deal. As far as going about building the app, you should first sit down and write out all that you want it to do so you can get a better idea of where in the Amazon API you should be spending your time studying and how to begin designing the backend architecture. I hope that's at least somewhat of a starting point for you! Sounds like a fun project
Call it J2EE on your CV and you wont get an interview where I work. Not through pedancy, we've just sat through too many interviews with 'J2EE experts' who can't tell us howca Servlet works. 
I respect vim, but a lot of this article sounds like the worst type of vim hipster. Navigation aside, plugin support for ide bring loads of functionality off the shelf. Custom validators alone save hours of debug time. I live in the shell, but use the right tool for the job. 
If you try and bend Camel to be a potato you will fail. Let Camel be Camel and it will shine.
Professional Java for Web Applications from Wrox?
It doesn't defeat the purpose, at all. I map almost all the 'shared' shortcuts back to IntelliJ (which IdeaVim gives you a very easy window to look at and then choose if you want the vim shortcut or the intelliJ one), but intelliJ doesn't have as many in-editor shortcuts as vim does. Having the vim concept of a visual, normal and insert mode just gives you a ton of new shortcuts that you didn't have before, without changing the intelliJ workflow or interfering with its shortcuts. And as for 'old school terminal people', I'm 26, and learned vim in college, it's not like I can't learn to let go - I had to force myself to learn vim because I recognized what I could do with it.
Very nice demo. Also, Spring has [Script Templates](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#view-script), which can elegantly abstract that script engine stuff in the controller. [Here](http://patrickgrimard.com/2015/09/27/ejs-script-templates-with-spring-boot/) is an article that uses them with EJS.
There are many good books about Java. But there are only a few _excellent_ books about Java. Of those, "Effective Java" and "Java Concurrency in Practice" are not beginner's book but they will take you as close as you can get to idiomatic, industrial-grade Java. http://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601 www.amazon.com/Effective-Java-2nd-Joshua-Bloch/dp/0321356683 Also I'm assuming you are french, where P.O.O. = Programation Orientée Object, but in english it's O.O.P., for Object Oriented Programming. "Poo" means something else, as you'll have gathered from the jokes here... 
I think spring enables you to learn the web-service paradigm and is enough to give you a foothold for growth. 
Jax-RS - part of Java EE 7 spec: http://www.oracle.com/technetwork/java/javaee/tech/index.html JSR303 - part of Java EE 6 spec: http://www.oracle.com/technetwork/java/javaee/tech/javaee6technologies-1955512.html 
The rot goes further than this sub....There is a set of Java programmers / architects out there in the workplace who will dismiss anything that isn't spring based. It is arrogance, hubris, and is giving Java apps a bad name. Java is faster to deploy, and easier to get off the ground than an equivalent PHP application. However, as soon as you add Spring to the mix, the whole thing becomes a cluster-fuck of multi-megabyte long deploys, permgen errors and frustration. 
Have you heard about this new Java IDE called Eclipse? I hear it works really well. Sorry, I couldn't resist... Everytime somebody complains about the smallest nits in Eclipse, the IntelliJ fanboys jump in. :) I sincerely hope you fix your problem.
you are in wrong subforum
Should you ask this in /r/webdev instead? This is not related to Java.
You don’t, it’s 2016.
Alright then I take it all back. :)
An IDE + vim plug-in destroys an IDE without vim plug-in. There's no contest. If you think otherwise it's because you've never watched someone use vim.
It is interesting to see you so opinionated about something you clearly know very little about. You don't even understand how IDEs and their vim plugins interact. Let alone given serious consideration to using something like vim. All of your opinions come from observing "this old guy that uses vi and is slow." First it is incredibly hard to measure development speed. He might be considering/doing things that you aren't even aware of because of his experience. Second maybe he is just "slow" for other reasons... like not getting paid very much, or maybe not being very good at software development regardless of editor...
It sounds to me like you need a small ERP system. This is not trivial software and could be a bit much to take on for a first project. There's a lot that goes into this type of software that you may not be considering. For example, does your current software handle tax? If so are you ready to research and implement all applicable tax laws in all jurisdictions you sell to? How about all of the accounting functionality? Are you comfortable enough with that domain to implement accounting that follows all applicable laws? I would recommend doing some serious thinking about what your current software offers and determine if you feel comfortable re-implementing all of the features that would be relevant to your business.
Yup, I also use IntelliJ.
I use JDK to compile my Java programs, to run them I sometimes use JRE, but I really prefer to use JDK for this, too.
Good god. I don't even have flash _installed_. Go sit in timeout. 
Vim has [plugins](http://vimawesome.com) and [Syntastic](https://github.com/scrooloose/syntastic) can do syntax checking with javac. It's a pain to set up though (which the author mentioned). For the record, I love vim, but I also use an ide for lots of stuff. I think refactoring (which the author also mentioned) is a better argument against vim than syntax checking.
Never joined or started a Java User Group, but I found this: https://blogs.oracle.com/alexismp/entry/how_to_build_a_successful
Don't have any experience with it, but you might want to look at the websites of other JUGs to see which events they are hosting and/or write to the organizers of JUGs from other cities to get some experience reports. Usually, people who organize user groups are very helpful.
I wish jVi were available for IntelliJ.
Good advice. The closest one I think is the London Java Community which is pretty damn successful so I could speak to the organisers there.
If you are a beginner you could use my bash script 'RunJavaFile': echo "public class HelloWorld { public static void main(String[] args) { // Prints "Hello, World" to the terminal window. ññ System.out.println(\"Hello, World\"); } }" &gt;HelloWorld.java RunJavaFile HelloWorld.java Hello, World RunJavaFile: ExitCode: '0'. I have something similar, 'javacar' , for complete projects (created with netbeans), 'DetectCharSet' is one of them: javacar -run DetectCharSet /home/manolo/Temp/HelloWorld.java javacar: Application 'DetectCharSet': Compilation successful. javacar: Application 'DetectCharSet': Archiving successful. javacar: Application 'DetectCharSet': Press enter to run application. UTF-8 javacar: ExitCode: '0'.
I've personally used https://github.com/TooTallNate/Java-WebSocket / http://mvnrepository.com/artifact/org.java-websocket/Java-WebSocket/1.3.0 Pretty light weight, stable, and does only WebSocket things.
[removed]
From blog author Dallas Monson: &gt; That is a very good point that I should have called out in the example, that this was just to show the functionality and flexibility of the fallback, not necessarily meant to be a best practice. In our actual implementation we return a common response object shape with the correct http code and a more descriptive message that can be displayed to the end user - so very similar to what you suggest. I was more trying to emphasize the pattern and the conventions for the fallback, not the correct return - also because I felt that the returns could be more subjective - depending on the application. Thanks for the feedback though it was a good catch and needed more detail.
[...but why?](http://i.imgur.com/TnQRX6v.gifv)
I'm sticking with Play 1 for now, but I try to keep my stack modern. I think when you're on the latest stuff, you're primed to take advantage of a new development when it comes along. When you're sitting on top of old stuff, you might have to dig out a bunch of technical debt before you can move, and that delay can make a difference between getting something out in time to ride a particular wave or now. In my example, I'd like to move to OAuth, and there's a couple published modules for this for Play 2, and none for Play 1. I don't need a module, but it would be a lot easier if I was on the latest and greatest in the ecosystem.
&gt;can compile and run Java Application? My scripts do just that. I wrote the first one a long time ago when I decided to learn java. It is good for simple *.java files. It is a beginner tool. I use the second regularly to generate java jars to deploy.
After a couple days of research I decided to start a personal project with Spring, Angular, And MySQL. Hoping to catch some attention on my resume/interviews.
It's the base of a build system geared towards a specific technology stack. It doesn't solve any problems on it's own. However, it does demonstrate a modern example of java web development. ATM i'm particularly interested in angular2 with ts. EDIT: and sass.
gotcha, thank you for that!
Check out codingame. The games seem trivial, but they exercise important programming skills.
My best advice is preview the introduction to both classes, and decide who you want teaching based off voice. Course material wise both cover the basics, the pro of the course you posted is utilizing a scaffolding framework (boot). Although, how often will boot be a requirement in the corporate world is up to debate. Springs most important concept is AOP (Aspect Oriented Programming), everything revolves around that paradigm. Also make sure you have a strong foundation in core java; Object Orient Programming, Programming to the interface, Java Beans, Polymorphism, inheritance etc. I learned spring before being a java purest, and it make spring a bit more challenging to really wrap ones head around. I have also spent a significant amount of time working with NodeJS and I happen to be a huge fan. Microservices are a huge buzz right now and node is grabbing at market shares. What do you want to do over the next 5 years? Enterprise development? Front end? Full Stack? Integration? ETL? You should focus on your needs as a developer before really committing energy to mastering your craft.
It looks as though it would be a good exercise, but i feel as though i should begin to do more real world applications. For instance, I think diving into someone elses code trying to add to it would be a good experience that will be more applicable to later projects, jobs, internships, etc...
I have jumped into other code bases before, and though i got lost, every time i did it, I think i learned a great amount about problem solving. I am not completely dependent on others, i have been doing java for quite sometime. You don't think there will be people that will help me bridge the gap between being dependent on the guidance of others to self dependent?
The biggest problem facing open-source right now is the gulf of effort involved in bringing new developers up to speed with a project, and just doing the work yourself. In the long run, it makes sense to help others, but it's not always apparent, and many developers are hoping to be working with people of similar skill and self-reliance as they perceive themselves to have. In short, you're going to have a rough time. I really do recommend focusing on the skills. Don't worry about employability or resume items or anything like that. Those things are distractions. Focus on the problem solving skills. Learn to use Git (seriously, even if you're the only programmer, Git is indespensible). Learn to quickly onboard yourself with a problem. Learn critical thinking skills to solve problems. Learn to go looking for answers yourself before asking others for help. Google and Stack Overflow are your best friends. Most of all, try to have fun.
This is a great idea. The landscape for making games in Java has never been better.
We use the Try library to help exactly with this. Try helps model successes and failures. Our failures have three categories that the consumer can use to handle them: retryable (retrying is a good way to remedy the failure), nonretryable (the request will never work), and semiretryable (retrying is okay a few times, but give up and treat it as a nonretryable if it doesn't succeed).
Don't set your sites so low. Write app. Sell app. You may be a beginner but I cam sure you can implement Flappy Bird. Why do we need jet another Flappy Bird clone? Well, we don't but the point is: you don't need to be an amazing programmer to do something impactful on your own. Sorrt for spellings, on phon3.
I made mastermind with the drawing panel &amp; inputs with arrays of numbers to represent the pieces. Currently going to try update it to have an actual GUI after doing some brushing up/attempting to learn JavaFX. After that I might try for a incremental game or something. I was thnking I could combine that with a previous idea of an item shop like game &amp; tieing data to an external database.
Ill trust you'll come along if I start it then!
Good idea. I really should head down to London to get to some events.
I'm a member of the Agile group but haven't been to a meet up. Monday's aren't great for me and annoyingly I was ill for the Dan North talk last week. A JavaScript meet up has just been started which I've been to a few of and talked at the last one. That gave me the idea. I'm in my last week at Office Depot and starting a 6 month contract at White Clarke Group in Lindord Wood next week.
I used to work at their sister company. Learnt a lot there :)
https://rsync.samba.org/
VPN?
Dynamic DNS like No-ip? It works for me at home. 
my PC is sitting behind a network i cannot control, dynDNS is not allowed. :) 
Sorry not sure. rsync is battle tested over many years, but native only on Unix platforms (Linux/Mac). No idea what is the state of support for OSes like Windows. :-)
For productive usage: [Syncthing](https://syncthing.net/) * secure * open source * cross-platform * good performance
The units are Megabits, not Megabytes?
AS is more like a somewhat fancy library these days. It's the API that matters most, and the Java EE API is superb! With WildFly Swarm or even just docker, it's really just a library for your app. 
hey thanks for the suggestions! :) yeah i know the conventions, sometimes i just ignore them. But your right with that.
Effective Java second edition
A "fancy library"??? Then you're using it wrong. That's like saying the Sears Tower is a "fancy house".
Is it worth the read after 8 years?
Can you try it from a non-university PC where you have admin rights?
With Java 8 all of the Applets will need to be properly signed by a trusted organization. You could try installing an older version of Java but you're really asking for trouble here. I suppose if it's just for demonstration purposes then it's fine, but you should really just not use Applets in 2016 xD
I suggested that but the prof refused. I haven't been able to open them from my pc either though. 
You could try running them with appletviewer which ships with Oracle JDKs: https://docs.oracle.com/javase/7/docs/technotes/tools/windows/appletviewer.html
It is still worth a read, definitely. I hope we get a new edition soon that includes up to Java 8.
There are plenty such tools, they are called debuggers.
As I said, a debugger does exactly this if you step through the code.
And add some tests. Right now, since you have not tests, users have no way to know whether files were copied correctly, or that all the files they wanted copied were indeed copied. Get some repeatable tests in there, so that potential users have some confidence that this actually works correctly. 
Sorry for the newb q. What is EE and O?
Dropwizard, Spring Boot, sometimes just jetty/tomcat or some other DIY solution. Right now, horizontal scaling (one app on X machines) is more important.
O is part of a phrase as in the movie title "O Brother, Where Art Thou?". EE (Enterprise Edition) is a list of specs that a vendor must meet in order to call its product EE complaint. 
Thanks for the reply! 👍
One thing my teacher told me not to read book best way to learn is coding.. is to code in free time learn by coding so you may want to start few small project on GitHub and find other project and see if you can help them so you will learn and use it for job etc etc. Here Free Programming Books https://github.com/dannyti/free-programming-books Edit:- I'm doing CS right now 2nd year
Thank you common sense 
I had a comp sci teacher that I really liked, but I still have to say that I have never seen a comp sci teacher that wasn't a solid 10 years behind technology and a poor coder. 
Head First books, fun to read, lot to learn, and it's not about programming alghorihms and stuff outta-space you will never use again.
Yes. I'd say 80-90% is still valid. The material that covers equals/hashCode, cloning, serialization, im/mutability, Comparable/Comparator, generics, enums, annotations, overloading, overriding, exceptions, etc. is all quite valid. Of course it doesn't cover lambda and streams. The other new Java 8 features that might have the most impact on the material in the book are default methods and static methods in interfaces. Those might require some adjustment in the material about static factory methods and other aspects of object design.
Tesseract - Google Code That is a good OCR library. You should be able to use it and read the text from a scanned image. 
Applets have been on their way out for quite a while, at least five years. Browsers have given multiple warnings that this was coming. Porting them to GWT just adds insult to injury, as it too is no longer a viable platform long term. Use JavaFX or write a web front end.
Agreed, people so out of date should be kept far away from teaching programming.
Just fire up a VM, install Windows XP from the MS site. Or install an old browser in an older Linux OS, again on a VM.
TomEE is an application server based on Tomcat; the latter is just a servlet container. 
Please don't bash Spring Boot for your choice of using Microservices architecture. You could achieve the same hell without Spring.
Could your prof. not just buy a cert. and sign the applets? They should work in all browsers then. 
They are pretty much alive in any Fortune 500 enterprise.
https://np.reddit.com/r/java/comments/42yow7/oracle_plans_to_deprecate_the_java_browser_plugin/
The thing is, in comp sci the idea is to teach you the fundamentals, not the cutting edge. I learned LISP, a language probably older than you, and it was invaluable in teaching me that not all languages rely on running code sequentially. Comp Sci is not enterprise programming 1o1
That would be awesome. But omg, so many books that I want to read, don't even know where to start.. - Core Java 10th Edition (20% on this one) - Java 8 in Action - OCPJP 8 Study Guide (Passed the OCA 8 exam, this is the next step) - Effective Java 2nd Edition - Soft Skills The software developer's life manual Any suggestions guys?
Thank you so much!! And you are right, I will try to never commit that error again. Really thank you.
Just a somewhat off-topic question. Why does your professor want to run those examples in a browser? Is it a course about web-development? Or Java specifically? Or graphics? Or basic algorithms/data structures? I mean, he could have downloadable desktop or command line apps. Or a traditional webapp where you submit a form, you get a response.
Why?
It's not even the choice of using microservices architecture that's "wrong" here, there's a whole series of stupid decisions. &gt; it was decided to leave Tomcat, and instead do a microservice based system. Possibly a good or bad decision, based on what the application actually does. &gt; Everything was done using Spring / Spring boot. Good decision based on the previous decision. &gt; spend 2 hours every day What? Why isn't this process automated? &gt; deploying a 2.1 gb application (which is many spring boot services packaged together) So... exactly the opposite of what you're *supposed* to do with microservices... &gt; Using a custom deployment process Why? &gt; It is a step backwards..... Honestly..... wake up. No, this is literally an "Instructions unclear. Penis stuck in ceiling fan." level of idiocy.
Not saying much... So is COBOL...
Java concurrency in practice
So they are now teaching quantum language fundamentals with LanQ? Not likely at the university attended by the OP. And why the hell are they porting to GWT? And I've been programming for 35 years, don't make assumptions.
It's usage is on the decline relative to other frameworks. http://www.indeed.com/jobtrends/GWT+.html http://www.indeed.com/jobtrends/Angular+.html http://www.indeed.com/jobtrends/React.html http://www.indeed.com/jobtrends/ember.html
The course is "java web-dev". I entered it thinking it was servlets and jsps, but it turned out to be applets. So during the break I went to the professor and suggested the class be updated from applets to newer web technology. Apparently GWT was the solution. The point isn't so much to port the applets to gwt, as it is to just show old project examples. 
There are tools like [jSonde](https://bedrin.github.io/jsonde/) and [Eclipse Diver](https://eclipsediver.wordpress.com/) that generate sequence diagrams from running code. I didn't find them particularly useful but YMMV.
With all security changes from multiple tutorial sites, we could not get current versions of browsers to allow applets to run. I think at this point, a VM with an old jre and browser might be our best bet. I may have explained poorly, but the purpose is not to port applets to GWT, but for examples and previous projects to be displayed where we can use them as resources. 
This seemed to work, although the applets didn't function totally properly. Progresa though! Thanks
So in 5 years some other student will contact the prof and explain that GWT should be replaced with a newer web tech haha
I honestly wonder why they didn't do that back when applets were more widely used. With the course moving on to GWT, I doubt the prof would do this. 
What the hell. I made no assumptions. I disagreed with you. Out of touch with current trends is perfectly acceptable since programing is more about logic, formality and good behaviour than current trends. And LISP is older than 35 years. More like 50. It has nothing to do with gwt, just your general notion that a brilliant out of date academic can't teach programming. It's all about the common fundamentals, nothing more than nothing less. 
It is web-dev. The intent seems to be to write games that run in a browser. 
And in a lot of startups! ;)
Then again, Java EE is used by a lot of startups too. Now which startup uses COBOL again?
Then porting may be reasonable. But Java is likely not a great choice for future work. TypesScript or vanilla JavaScript would be a better choice. I understand that you cannot change the class , but Java on the browser is a little bizarre these days. 
It's a web development class. Not an algorithms class.
Ah, that makes sense now. So not new dev, but old code. Carry on.
What startups are using Java EE?
zeef.com, dreamit.de, safsms.com, hubeo.com, stylight.com, youstice.com, ...
Why are you deploying a 2.1gb application for a microservice based system? Isn't the whole point of microservice to have multiple smaller applications each with their own roles? [Martin Fowler on Microservices](http://martinfowler.com/articles/microservices.html) Also, what the crap is in there, in all my time as a developer (90% of it deploying large ears to an application server), I've never seen an ear / war even CLOSE to that size.
Java Web Start is not a plugin. It simply launches Java locally.
That's true, although you would speak about the GTK library or the Motif libs for instance. While I agree with your point, the truth is a little bit more subtle here. Seeing the AS as a high level OS of some kind was the original vision, with it being installed once by ops, then never to be touched again and the idea that tons of applications would run on it, each isolated and protected from each other. Now after almost 20 years we know that the AS was never that good at this, and many problems with the AS and thus Java EE simply go away when you deploy 1 app to 1 AS instance. Even more problems go away when you treat the AS as just a deployable artefact. So you either deploy in 2 steps (deploy AS first if it changed, then deploy app archive), or just the AS + app always as one unit. The uberjar and in fact docker trends are about that latter. And in those cases you really don't treat Java EE as a kind of OS, but really just as a fancy lib (most clear with the uberjar approach). Is it wrong? I don't think so. It's the realization that the AS was never very good at isolating apps and managing resources like memory, CPU and IO bandwidth, but the Java EE APIs are still very valuable and useful.
My company still had a download applet on their account management site until last year. The code signing API for applets just made everything 100 times harder and more tedious than it should have been. I literally spent days testing and debugging issues on 4 browsers x 3 operating systems. We finally scrapped it when Firefox wouldn't run the applet no matter what.
 I'm not sure I follow. What app? The app that you will be programming? Or another third party app &gt; That tells you when the app is running Can you explain this point a little further? Tells you how? In the same device? Like, a notification bar? Or in another device?
Its not that there is crap in there, its because the whole package of 20 micro services contain 20 duplicates of, for example, spring framework.
That's...not microservices, then, that's a monolith. The whole point of microservices is individual deployables in which you can scale / change, and deploy only the services that need to, etc. When you make a change to one of the services, you shouldn't have to redeploy the other 19. Lastly, if you know you have a lot of common jars that are shared amongst all the applications, change the artifact to provided and let the environment handle it.
So how are applications built now? I'm learning Java and I want to make a GUI application, how should I be doing it?
Use JavaFX.
&gt;2th edition Drinking too much Java might affect your teeth, so better make sure to know how to Effective Java.
&gt; 2.1 gb application (which is many spring boot services packaged together) Every boot service I've ever created, which includes embedded Tomcat, JPA, Spring Data Rest, JMS integration, etc, is like 50MB, tops. Your shit is fucked, yo.
How do you track who goes to a training in the future? Wouldn't it be better to harvest this information? Maybe the training facilities have a digital record of the certificate too. It probably be easier to ask them for the data instead of creating a complicated app that tries to scan images (which is really a hard problem, when the certificate layout changes just a tiny bit).
Got me... I'll take it easy, promise.
I'm get that you are trying to make the point that no knowledge is useless, but what I'm saying is I'm not really gaining anything from the course. The practice I am getting is not likely to be useful for me. 
Pretty sure this is javaScript not java.
edit: actually, this doesn't look like JSF now that I read their page. Not sure why they call this a "sister app" to primefaces... I was thinking it was an angular implementation of JSF much like Primefaces is a jQuery one.
Yeah but why?
I could not agree with your analysis more. This should be top comment ^
This post clearly belongs in /r/javahelp as it is help with Java programming. There are numerous hints on this page and on the text submission page that should have made that clear. Further, your description leaves so much to be desired that nobody will be able to figure out what you actually want. Please, post this to /r/javahelp, but in doing so, rephrase your questions to explain better. Also, show any relevant code you have. **Post removed**: wrong subreddit.
You can get similar experience for free, even with the same tutors, you just need to know where to look for. Invest your time and join your local JUG attend meetups, hackatons
I never even signed up or used this product. I am unsure of how they have obtained my information. Additionally I have no interest in their closed source products.
Not sure what that all means ;)
Interesting, looks very similar to Feign. https://github.com/Netflix/feign 
Yes, looking through Feign, look like it support different http client interfaces, decoders/encoders and looks superior. I am just using jersey client as http interface and default encoder/decoder comes with it.
If you are working with jax-rs implementation (jersey) or dropwizard app you pretty much get jersey-client out of box and it gets job done but with verbosity. I just wanted to remove that verbosity and make it clean and understandable. But if you are working on mobile client or some other medium then you would better of going with other choices.
for me, this book was like learning that Santa was not real.
Not worth it. Think of a project you would like to code, and figure it out. Stack overflow will answer the specific questions you have, so long as you can apply the concepts from class.
It is good for an intro into web based languages. You will learn the basics of working with different languages and how some of them work together. It is also a good place to review, since you can do the lessons in any order. As with anything though, don't rely on one source. 
This is 100% what the debugger does in eclipse etc, plus a lot more. 
If you want to use one prepackaged container then most robust thing I can think of is a runtime check from /etc/your-configuration containing environment description.
What was before Makefile? Pen and paper? 
Thinking about this once more, I have wished for a clean separation of the entity management specs from the mapping algorithms, such that "obvious" mappings can be reused outside of entity contexts... Such mapping APIs / algorithms could be re-used outside of ORMs, e.g. in APIs like [jOOQ](http://www.jooq.org)
You can have your container (eg Tomcat, Glassfish, WildFly, etc) manage configuration. They can pass in system properties or make configuration available through JNDI. I think each vendor will handle this differently, but your code/war would be the same in all environments, and not contain any configuration. I don't have much experience with this myself, but I want to move towards this, so I can have a single, immutable, deployable artifact(eg. my war file)
&gt; Maven profiles is one option. Using profiles will result in a different war for each environment, which is not what the OP wants.
I'd like to know as well. I wasn't prompted to download any of the "various products" besides this helper tool. Were you able to figure it out?
Actually it's easier to subsitute out punchcard 3 and punch card 7 with their alternates when operating on production. Paper and Pen is error prone. Only danger with the punch card technique is dropping the whole stack!
Read, but *do* while you read. Read a bit, code it, play around with it. It'll sink in, and then you'll have it in your repertoire when a practical case comes around in the projects you work on.
Spring Boot + Angular is a good start, find something you want to build, get familiar with the spring tutorials and docs, and dig in. Spring Boot itself is an embed server for Spring, and is highly opinionated (read: magic, for better or worse). So, you can get familiar with a lot of the basic spring concepts pretty easily, but there's a lot under the hood that I find best to just take in as you need to customize your application. You've got the right idea, building something yourself is great interview fodder. I can't say what xyz particularly would be, but if you've built a full stack application, you're going to touch on a fair chunk of popular libraries.
One thing you must do FINISH IT! 
Hibernate. If you're going for a full stack job, you'll want to know a bit of sql as well as how to construct a half way decent schema. Of course you can use a document db, however you'll likely get tested on your knowledge of sql. Oh and some bootstrap will save you years of time. Try [AngularStrap](http://mgcrea.github.io/angular-strap/) once you get the hang of Angular. You could package your project as a war and deploy it to your VPS or try the tomcat maven plugin which you can just run your app like 'mvn clean install tomcat7:run'. If you're using Spring-Boot, it's as easy as 'mvn spring-boot:run'.
&gt; Try AngularStrap How is it against UI Bootstrap?
[JHipster](http://jhipster.github.io/) is a full stack framework that includes Angular and Spring.
[removed]
Angular is kind of in a weird spot right now. Angular 2 is a little rough, and there (to the best of my knowledge) isn't an upgrade path from Angular 1 to Angular 2. I'm guessing that Angular 1 will be forked into another lib, so it should have support for a while, but yeah, its kind of in a weird spot.
www.codersITK.com 
[There is an upgrade path.](http://angularjs.blogspot.de/2015/08/angular-1-and-angular-2-coexistence.html) Frontend guys at my company got Angular 2 components running within Angular 1 (including Typescript). The only problems they had was with Protractor AFAIK.
+1 for JHipster
&gt; Shishir Tandale will be leading an online Java tutorial soon. You mean "I". 
MySql rather than Postgres? Angular rather than Jquery? Spring rather than JavaEE? Why not add to your pain a little more and add some node.js to the mix. Yeh, it appears to be the way we are going looking at the posts around here.... and yes it will admittedly be good for an interview to know these. Though I think you will end up cursing the whole stack. 
What I'm doing (and I'm sure it's not ideal, but it works), is to have a config file somewhere and create a system property `my.app.config` which points to the config file location. I've been looking at Apache Deltaspike, but it's a bit overwhelming.
This sound like a baaaaaaad idea.
We migrated from Core Spring to Spring Boot because we are thinking ahead of the future in terms of development and maintenance. Spring Boot is more opinionated. It's very easy for junior devs to pick up. It does a lot of out of the box configs for you, and we try hard not deviate from its opinion. Lots of examples/documentation coming out of Spring and the community are Spring Boot based. We re also moving from a monolith to microservices and so boot is the logical choice. It also provides lots of goodies built in like monitoring and hot reloading. Basically, Pivotal is betting the whole farm on Spring Boot and we want to follow their direction.
yep... no one wants to be in the datacentre game anymore. not to sound like a marketing shill but every part of the business benefits from ditching bare metal and going cloudy. edit: downvotes? 
Angular 2 is closer to ReactJS (in terms of concepts and ideas) than it is to Angular 1.x because they borrowed heavily from ReactJS. If you learn ReactJS now, you will be well prepared for Angular 2 when it goes GA. 
I am not familiar with the term "security leak" regrading compilers so I'll assume you mean application data breach. Now, which data are we talking about? in memory? protected pages? (that's JVM, OS, not compiled classes.) variable names? constant strings? (try typing 'strings some_binary | grep superSecretPassword' in your terminal.). It would be helpful if you could focus your question a bit more.
Very cool!
Quote: If we want to boil it down to a few concise points, here’s a shortlist: * Enable Configuration on Demand. * Use Gradle Daemon. * Newer versions of Gradle are faster, also Java 1.8 is faster than 1.6. Upgrade! * Avoid doing expensive things during the configuration phase. * Don’t use dynamic dependencies (`x.y.+`). * Parallelize the build.
I think it comes to how an app is architected before you can make a blanket statement like that. I've had the opposite problem with JEE in the past. What? You want to use the next version of Hibernate? Nope, you can't just update your pom.xml and deliver it in the next release, you now need to coordinate with your IT staffing group to upgrade the application server's lib files. Whoops! That version of Hibernate doesn't work with that particular JEE server? D'oh! I guess you're stuck on Hibernate 3.3 until you finally get around to upgrading application servers. If your deployment architecture is different, it's less of an issue - but that's the point... It's really hard to take one argument or the other when each one is better under different scenarios. I've been stuck in both scenarios over my career.
[removed]
You'll like the next one even better. There are massive changes coming, everything was restructured and should follow best practices a little more. I am working on fixes for elasticsearch and making paginated navigation nicer. 
With such a list I still don't get why Gradle over Ant or Maven. I don't have any issues with XML and the tools run by default faster without any effort.
Ehh...name's already taken, bud https://github.com/mesos/chronos
For one thing, the code just looks a ton nicer. But also, being able to use an actual programming language instead of a static format can be pretty useful.
Also a little counterintuitive to have reference links to the Mesos Chronos in the Further Reading section. This project has nothing to do with Mesos Chronos project. Easy for people to confuse the latter with this project. 
Both Ant and Maven are extensible in several ways. Also I have seen quite a few Gradle files that look no better than Ant before Maven appeared. As for looking nicer, I prefer fast builds out of the box than prettiness.
You can use [scripting languages](https://ant.apache.org/manual/Tasks/script.html) in your Ant scripts.
Do I need to have iTunes installed to get this to work? The readme mention using it.
Maven's documentation for newcomers drove me away, each of the three times I tried to learn Maven. I'd wander aimlessly across http://maven.apache.org/ looking for help. Eventually I'd find [How do I make my first Maven project?](http://maven.apache.org/guides/getting-started/index.html#How_do_I_make_my_first_Maven_project), and be totally intimidated by the totally weird "mvn -B archetype:generate" command, and the "very simple POM" that requires a WALL OF TEXT to explain. Gradle, in contrast, has a well-written [User Guide](https://docs.gradle.org/current/userguide/userguide.html) with clear sections. If you go to the section for [Writing Gradle Build Scripts](https://docs.gradle.org/current/userguide/pt03.html), the section is actually helpful. 
What format does the certificate have? Is it an image or a PDF? If the latter, can you select the text in the PDF? Are there meta-information in the file? Using OCR will probably difficult. I don't think it's profitable to develop something on your own. This looks promising: http://www.verypdf.com/app/scan-to-excel-ocr/index.html It is probably much simpler to request computer readable reports or receipts from the online training company.
What does this offer over Jenkins?
Nope, it just connects to the iTunes server so as long as you have an internet connection, you will be fine!
They are anxious that the compilation introduces security issues? This is pretty far fetched and reminds me of https://www.reddit.com/r/programming/comments/1m19ay/a_c_compiler_that_inserts_backdoor_code_when_it/ A much more real problem with Java and CI are IMO Cross Build Injection attacks: http://branchandbound.net/blog/security/2012/10/cross-build-injection-in-action/
Nope, seems like it's working just fine here. Are these errors coming from some of the plugins you're using? I've been running Mars on Ubuntu on a few different machines, and I've had no problems asides from an occasional render problem that fixes if I switch views and come back.
I don't really understand this honestly. If all we're talking about is cutting 9 seconds off the build time it's pretty much inconsequential for a real project. Running the test suite or bootstrapping the application will take many times as long for most projects. 
[removed]
Actually, no I didn't. I like to think I could learn Maven if I were forced to, but any Java coding I do are hobby projects. For a hobby, dealing with Maven isn't worth it. I imagine there are non-Apache guides online, but I don't have any to recommend, sorry.
Please stop. My penis cannot get any more erect! Edit: Seriously. I love jhipster. It's the sole reason I moved away from grails framework back into Spring.
From a CLI/library standpoint, I haven't encountered any major differences or things that would make transition hard. From a GUI standpoint, I have no idea, I'm still learning GUI on the java side, it seems much more complex than C#, but I'm going to assume it's my IDE (eclipse) and not the language itself. Good luck! &lt;3 Edit: Also, if you've never used Udemy, try https://www.udemy.com/java-tutorial/. It's pretty basic, but if you haven't worked with java before its a very nice start. I transitioned from basic C# to ok-ish java with it in about a day.
Transition should generally go well for you, the languages are meant to be very similar.
If you are comparing `String` objects, use the `equals(Object anObject)` method instead of the `==` operator.
And you have to check for null unless you compare using a string constant, e.g. "foo".equals(bar)
Is this an ad for a course?
You will miss C# generics. Learn about type erasure.
No worries thanks for the reply, guess I'll be trudging through the Apache documentation :)
Or you can use `Objects.equals(foo, bar)`for any two objects for built in null check. ~~Static import the method for cleanliness points.~~ EDIT: No style points for you. /u/sidola points out static imports are by name, not by method signature. OP may also notice that java has no named imports which would make this totally OK :/
Streams in Java 8 is kindof like LINQ isn't it?
Do you interested in pair programming (java, javascript, html, css) via Eclipse? But my English too basic... I working on new cross-platform RSS reader (android, ios, chromeos etc.). Backend is full java based, but frontend most is javascript+html.
How do you statically import `Objects.equals` without getting a clash with `Object.equals`? **Edit:** [According to StackOverflow](http://stackoverflow.com/questions/7890853/why-cant-i-static-import-an-equals-method-in-java) you can't statically import and use a method called `equals` since you'll get a clash with Object's `equals` method.
Are you somehow incapable of reading the ***GIGANTIC*** text that tells you to take this type of question to /r/javahelp?
I'm really trying to get into Spring but for now coming from Django, Spring feels like trying to fly a UFO while Django is like taking a walk in the park. I miss how easy is to use the ORM, debug the SQL generated by the ORM, doing migrations, etc. I'm still not giving up and still feel that Spring is worth it so hopefully it will start to make sense at some point. It would be interesting to hear from someone else that went trough same thing (Django to Spring). 
It was introduced in 7, so maybe not for long.
I still have nightmares of the times before the diamond operator.... List&lt;TypeHolder&lt;SomeLongClassNameBecauseJavaLovesLongClassNames&gt;&gt; list = new ArrayList&lt;TypeHolder&lt;SomeLongClassNameBecauseJavaLovesLongClassNames&gt;&gt;(); list.add(new TypeHolder&lt;SomeLongClassNameBecauseJavaLovesLongClassNames&gt;(SomeLongClassNameBecauseJavaLovesLongClassNames.class));
Aren't delegates more or less method references? And you can use method names for actions/funcs too.
And how do I define that difference in the import statement? Using `import static java.util.Objects.equals;` doesn't work. When using `equals(obj1, obj2)` I get: - *The method equals(Object) in the type Object is not applicable for the arguments (String, String)* So clearly it's not finding the right `equals` method.
In that case I'm doing something wrong. I'm using `import static java.util.Objects.equals;` to import the method. Calling it with `equals(obj1, obj2)` produces the following error: - *The method equals(Object) in the type Object is not applicable for the arguments (String, String)*
Then I'm wrong. Too bad :(
http://stackoverflow.com/questions/2109807/going-from-c-sharp-to-java http://stackoverflow.com/questions/3521013/moving-from-net-to-java http://stackoverflow.com/questions/3832720/c-sharp-to-java-jump https://www.reddit.com/r/java/comments/2vq7jq/from_net_to_java/ https://www.reddit.com/r/java/comments/3xj2qe/net_developer_defecting_to_java/ https://www.reddit.com/r/webdev/comments/3jh7bh/its_good_option_leave_net_for_java/ https://www.reddit.com/r/java/comments/2s1eis/any_projects_open_source_projects_need_a_java/ https://www.reddit.com/r/cscareerquestions/comments/2j0sfh/should_i_move_from_net_to_java/ https://www.reddit.com/r/java/comments/40cw2n/want_to_move_to_java_from_net/ http://www.tangiblesoftwaresolutions.com/Product_Details/CSharp_to_Java_Converter_Details.html https://github.com/FizzerWL/CsScala 
and intellij idea: https://www.jetbrains.com/idea/
I'm a java developer who doesn't really know if Spring is worth it for my code... I've been reading some PDFs and tutorials. The part of my code where XML definitions of objects is useful, I already coded that (XML defined objects) without Spring. But Spring seems interesting to me.. but it covers a lot of ground, so my question is... what parts of Spring does "may blow your mind" refer to? So I know what sections of the PDFs/tutorials to read.
So modern Spring apps don't even need XML, thankfully. Spring is also huge and has several different components that solve different problems. The mind blowing thing to me is just dependency injection. I'd recommend reading up on @Resource/@Autowire and the @Component/@Bean annotations. It is a really powerful concept that allows a lot of manipulation of your application at runtime that would be difficult without it. After reading about that, I'd checkout spring profiles. 
Java does have generics: public class someClass&lt;T&gt; { T x; } As well as the conditional execution: int x = rng.nextBoolean() ? foo() : bar(); As well as reflection. At this point I would almost suggest you'd go and take a look at the current state of Java, but you're probably enjoying C# so I'll leave you to it, the rest of the list seems accurate enough. 
Huh. Interesting. I think it's best to use static imports sparingly, anyways. I only use them for constants and JUnit assertions. 
With micro-frameworks like java spark or spring boot though, I don't really see the need for regular spring anymore.
Start with Java EE, either regular or via WildFly Swarm or Payara Micri. It's the best we can offer and will make you fall in love.
So I won't answer your question directly, but I wanted to point out that I know a vast number of very competent developers that use spring on a daily basis(none of which have a Spring certificate). So I will ask what is the reason you want to get the certificate? If you are only interested in getting the certificate in Spring so you can then get a job where spring knowledge is required you will not need to get the certificate to do so. However if you want the certificate to then charge much larger consulting fees than sure get the certificate or get your current company to pay for you to get it.
One pitfall I came across a lot when first transitioning to Java - interfaces don't start with I. In .Net it's very easy to see whether you have an interface or a class as a type because of this nice naming convention, but in Java you just have to basically learn by hear what is an interface and what is a concrete class (I can't tell you the amount of times I tried to instantiate `List` in my first few days programming Java, thinking surely the interface would be `IList`, so `List` is the default implementation). 
Nice list, there are still a few wrong points though: * params - Java has them, they're just called `...` - http://stackoverflow.com/a/519756/4185959 * Attributes - Java calls them Annotations. They may be slightly dissimilar, but for 99% of cases they are probably exactly the same. * Object initializers - also exist, but you may argue the syntax is a bit more cumbersome: http://stackoverflow.com/a/9108562/4185959 .
I use Spring daily and I've never thought about certification. Ask yourself if it helps you get a job, is that the kind of job you want? My view would be that if an employer is so caught up in certifications that they can't assess my skills, I don't want to work there.
I think there are plenty but before I link them a couple thoughts about my experience with codeacademy. During my first internship I had little to no understanding of javascript and jquery. I spent a couple of days and did all that codeacademy had to offer and it was great to get me ramped up on what I needed to know. Of course I was already half way through a CS degree where I spent most of my time programming in c++. so I did have a solid understanding of programming. Anyway I think code academy is well worth your time if they offer a course on something you need/want to learn. However codeacademy is not the only site out there. I will list a couple: http://www.freecodecamp.com/map https://www.codeschool.com/free http://www.theodinproject.com/courses?ref=home You could also check out treehouse or lynda. I haven't been impressed with lynda since it is a pay for service I expected more classes on tough industry topics.....like microservices for instance :) Also treehouse is pay for but from what I have seen I haven't actually tried it's not as diverse for different topics but it is in depth in the technology field. Finally I think every one of these sites as a different purpose for instance the odin project is for ruby....anyway there all just tools to an end goal. You need to decide which is right for you and your goals.
If you dont have any experience and want to have an edge applying for a job that uses spring, it could be useful. 3k is a steep price tag tho...
By the "billion" I mean that they introduced delegates into their Java which cost them a lawsuit and a patent infringement for JIT etc.. Microsoft may still be writing cheques to Larry for that stuff. In terms of the feature itself, it was OK for it's time but now it kind of conflicts with the new functional constructs. Unfortunately, unlike APIs - language features are very hard to remove once they are in place. 
Java doesn't give a fuck about class names. Morons give those names. This is the lamest pick I frequently see on java.
More clipboard (the best, ctrl+shift+v that you have in intellij) Gradle pluggin (if you aren't using gradle, you better at least be on the maven plan) 
Are you aware of the (open source, Apache licensed) community edition of IntelliJ? Depending on the way you use Java, you may find it does everything you need.
Not only this, but I think pursuing certification with an organization that only offers it on these terms validates their poor behavior and we ought not give it credence by submitting to their terms. Instead, they should be subjected to our whims by simple adoption or rejection of their technologies based on our needs of the moment and treatment by them of us as the essentially nameless and unimportant entity that happens to shill the technology which we tolerate long enough for the next best thing to come along. After all, we didn't reject J2EE and it's stagnation only to take on yet another more presumptuous caretaker of standards than the previous title holder. A little humility on their part would go a lot further way than an essentially useless certification safeguarded by an obvious cash grab. Yeah, I'm not much of a vendor shill. I do sympathize with their concerns, but really they live to serve the community, so wherever it looks like they demand we serve them, it kinda rubs me the wrong way.
Wso without auto complete :O (I love IntelliJ Idea because of that)
Netbeans includes all important features out of the box. The only thing I install is a open terminal via right click add-on.
If you have accepted that it is a good idea to build a single binary that may be used in any environment, then you have also accepted that your environment configuration must be determined at runtime, and not build time. To achieve this, you have two options: 1. Bundled Configuration. Include the configuration for every environment in your binary and then tell the application, at runtime, which portion of that configuration it should use. 1. Externalised Configuration. Fully separate the configuration from your binary and then give the application, at runtime, a location from which it may load a specific environment's configuration. Each approach has different advantages but I would recommend you go with bundled configuration at first. **Bundled Configuration** The convention we follow is to have an additional directory under `src/main/resources` called `environments`. Then underneath this directory, we have one directory for each environment, with the same name as that environment e.g. `prod`, `test`, `dev`. We can then have a library (developed in house but I can look into releasing it if there is interest) which looks for a specific environment variable, or a system property or a JNDI resource in order to determine which environments are considered active. Only these environments properties are loaded, whilst the rest are ignored. This same library then automatically integrates this information into Spring's environment and Spring's profiles so the configuration is accessible through standard Spring API's. This means that any developer can checkout the code for any repository in one step, build the binary in one step and can select from any of the available environments, without any additional dependency. It means we can deploy our binaries to anywhere, without needing any special configuration on the server, except the ability to feed the application it's active environment, through one of the above methods. The main downsides are we cannot easily change configuration without reversioning, rebuilding and redeploying but that does also mean that an application cannot break in production due to a configuration change since its last release. The other downside is that you are going to have to store sensitive properties like passwords in version control. We get around this by encrypting all of these properties, and then injecting a decryption password at runtime, in the same way that we inject the active environment. These properties are then transparently decrypted when accessed but are otherwise held securely in version control. **Externalised Configuration** The Bundled Configuration approach is desirable when you don't have much resource to put into having resilient infrastructure and build tooling. If you do then I would strongly recommend you look at [Spring Cloud Config](http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html) which is basically an API for your configuration. Once setup, you load your configuration into it and then your application will get properties from it at runtime. This means you can easily change properties at runtime because you have decoupled your application from its configuration. Therefore, you can redeploy your configuration server with new properties, without interrupting application. Spring Cloud Config also solves the sensitive property issue for you, in the same way, but it has the encryption support built in, so you don't need to implement it yourself, which is very handy. The major downside is that you need to ensure that your config application does not go down or become inaccessible in some way. It also slightly complicates development in that developers now have two repositories they need to checkout and run, unless you configure their machines to speak to a central DEV configuration application, at which point development is interrupted if that goes down. **Other Approaches** * Load everything in through JNDI. This works fine but complicates development. It is very easy for your development copy of the configuration to get out of date with what is deployed and it also becomes harder to version. You will also find you are switching out context.xml files regularly on your local machine, in order to switch environment, which is not very convenient. You still need to solve the encryption problem manually so this doesn't help there. * Maven Profiles. Don't do this. You are then back to building a separate binary per environment which makes it even harder to switch environment during development, but also means you must alter your fully tested binary, before putting it in production. Even with the most repeatable, draconian build system, why change the binary if you don't have to?
Grep Console lets you define highlighting of console lines - very useful to make occasional error/warning appear in bright red. http://marian.schedenig.name/projects/grep-console/
So, you think this patterns is more easily maintainable, more readable and cleaner, but you're wondering about performance? Are you sure the performance of 3-4 method calls is ever going to be relevant? You should really not worry about the performance of this and just use it, if you like the pattern. Don't try to optimize a performance problem you don't even have yet, especially if it's about this kind of micro performance. It's just method calls. To answer your question: The compiler will probably inline most of those methods, so yes it'll optimize this.
Sorry for being sarcastic. I'm aware that there probably is no minimum character length check at compilation.
What you are describing here is called the 'Builder' pattern. It has no significant performance impact, and can even be generated automatically using Lombok. 
Upper case method names makes no sense. ~~I think Microsoft did it just to differentiate from Java.~~ Edit: strike that derpy comment
The 'correct' naming style for the project is the one that matches the master in the VCS, otherwise it's inconsistent. Any guidelines for "java naming" apply to *new* projects only. I apologise if you alreadly know this and are experienced. However one can't tell on the internet from just a few sentences.
&gt; Are you sure the performance of 3-4 method calls is ever going to be relevant? I hear that a lot. But there is a huge difference between not thinking about performance at all and thinking about performance a bit, especially for web applications or any applications that have many concurrent clients processing many concurrent threads of execution. You could code something up. Test it. Get something like 20 requests per second on a given hardware. Then, you load up a profiler, and identify a few obvious slow spots. You fix them. Your application can now push 80 requests per second on the same hardware. You pat yourself on the back, happy that you've made your app four times faster. But if you had coded it right from the beginning, that same app would be pushing 500 requests per second. I'm oversimplifying it of course as scalability and performance can't be described with just requests per second. But the point is you can have ten thousand places in your code that are running just a bit slower than they could be. And when you have many concurrent threads serving many concurrent clients, the overall performance of the system is limited by that, and you won't find the obvious slow spots. If you need to create, say, 30 different objects for each client request (and you can't pool or reuse those objects), then it's no longer "performance of 3-4 method calls". And if you call 5 with() methods for each object, then you get 150 calls for each client request. And that's aside from all other application logic. That's just object instantiation. And if you load up the profiler, you won't see that as one problem spot. You would see a bunch of calls with cumulative stats being the bottleneck. At which point you would either give up profiling or would have to rewrite the whole thing. I'm not saying that the with() thing is a problem. As a matter of fact I'm asking if it is. But I don't agree that the time to think about performance is only when the coding is done. 
Lombok IS awesome 
*May* use gradle. If your write your code in Eclipse, it is actually pretty simple to do the rest of what they're asking. Eclipse stores its files on your hard drive already, you can just find them. Figure out where the source files are on your hard drive, then figure out how to use `java` and `javac` command line tools to compile and run Java code. You can still use Eclipse to write and test the code, just figure out how to compile the code with `javac` and how to run it with `java` for the submission / readme.
Lombok, infinitest, MoreUnit, multimarkdown. 
In the .NET world, we have object initializer syntax: var x = new Person { Id = 5, Name = "Fred" }; This is syntactic sugar for: var x = new Person(); x.Id =5; x.Name = "Fred"; Which is syntactic sugar for: var x = new Person(); x.set_Id(5); x.set_Name("Fred"); Nobody cares about the perf overhead because it is equivalent to worrying about the overhead of a method call. Usually you care more about scalability, not what is effectively a (negligible) constant multiplier on runtime that (at least in .NET) could potentially be inlined.
Could calculate the Big-O if OP really really wanted to know how (in)efficient the code is as well...but that's a bit overboard I think.
You should make sure your code works properly and is maintainable before it is fast. It is easier to fix bugs in those cases should they ever appear. There are classes in the Java library that do what you are talking about, they are: BigInteger, String, Path, URL, and URI to name a few of the most common you are likely to encounter. There will be some extra allocations (which an optimizing JVM can quickly determine that the objects are no longer visible and early free them), however they will eventually get garbage collected anyway if they are not. With Java 8 you can use "internal" builders so to speak. Something such as: public Foo(Consumer&lt;Foo.Builder&gt; __ib) new Foo((__q) -&gt; { __q.withUser("example"); __q.withPassword("3x4mp13"); }); So while you can use the builder normally you can just use it like that and the constructor can automatically use it as such. 
There is no performance overhead in your example...
Big-O is not at all relevant in this case, complexity for all approaches is O(1)
Type erasure is the cause of many headaches.
The overhead is invoking multiple setters over passing all the arguments via constructor. At the bytecode level, `x = new Person(5, "Fred")` will look something like: push 5 push "Fred" gcnew Person store x And the ctor would look like: .ctor(Person this, int id, string name) push this push id setfield my_id push this push name setfield my_name Whereas `x = new Person { Id = 5, Name = "Fred" }` will look like: gcnew Person store x push x push 5 invoke Person.set_Id push x push 5 invoke Person.set_Name Then, set_Id and set_Name look as follows: set_Id(Person this, int id) push this push id setfield my_id set_Name(Person this, string name) push this push name setfield my_name You certainly have a lot more bytecode emitted for the setter case (namely, involving invoking the setters).
Additionally, there is no 'fields are all correctly initialized on creation' semantics either - none of the costs, none of the benefits.
I made the same switch and there isn't a day that goes by that I don't curse gradle, thinking "maven solved this problem ten years ago and gradle still got it wrong!?"
The IDE helps a lot here. The outline view has different icons for interface versus abstract class versus concrete. Plus, in intellij, holding Ctrl and hovering over the class reference will give you that information as well as its hierarchy.
IntelliJ sucks. Edit: The new Android Studio tool based on IntelliJ sucks.
What do you mean by that? Objects are also initialized to blank slates in C# before they are handed to user code - you won't get garbage from fields. The above code is identical to, in Java, new Person().setId(5).setName("Fred").
When I have to use Subversion for projects, I prefer Subclipse and its Merge is visually better than Subversive's.
The question was great and there were some interesting plugins mentioned that I'd not come across before, thanks!
I saw that. What's PSU and why are they releasing version they know contains bugs?
Read the bottom of this http://www.oracle.com/technetwork/java/javase/8u73-relnotes-2874654.html 73 doesn't contain the PSU builds from 72. If you want those, go to 74.
Why? As in what specifically don't you like about it which is better in the other IDEs? And by "the new Android Studio" do you mean the v2 beta or the normal "live" version?
Is the difference that 73 just contains some unfixed bugs that are fixed in 74? Why release 73 then? I'm confused. There must be something I'm missing.
Agree, when I came to the Eclipse world from Visual Studio.NET years ago I didn't get how important workspaces were at first.
QuickSearch from the Spring Tool Suite. Get it from their update site. Link is here: https://spring.io/tools/sts/all Strg + Shift + L and you have an incredibly fast grep for all the files in your open projects. It's amazing!
[Java CPU and PSU Releases Explained](http://www.oracle.com/technetwork/java/javase/cpu-psu-explained-2331472.html). In short: * CPU = Critical Patch Update = Security update &amp; critical fixes * PSU = Patch Set Update = Regular updates / non-critical fixes 
Could you please elaborate on what IntelliJ sucks?
u73 add security patches, u74 adds security patches and other changes. go with u73 if you want minimal changes to your environments. Go with u74 if you're brave or need new stuff.
Now it makes sense. Thank You.
1
There are things that are fast and things that are slow. In the modern JVM, method calls are really REALLY cheap. You shouldn't worry at all that those are going to be your major performance bottle neck. Even if the methods are not inlined, you are talking about very few extra instructions that are really easily pipelined by the CPU. We are talking in the order of nanoseconds of extra time spent. I've done a lot of profiling and rarely do things like simple method calls end up being the prime contributor to slowness. Often it is things like IO that is the true clincher. I would watch out more for doing things like creating sets/hashmaps/array's in loops before I would worry about a builder being a performance issue.
IMO, setters in general should be avoided. I've seen too many bad things happen because a class allows mutation needlessly and it is really hard to get a handle on exactly what goes wrong. I personally am currently really liking [autovalue](https://github.com/google/auto/tree/master/value) to get rid of most of the boilerplate.
&gt; There are things that are fast and things that are slow. In the modern JVM, method calls are really REALLY cheap. Thanks. That's exactly what I was looking for. Just to confirm that method calls won't add up to anything significant. 
[AceJump](https://plugins.jetbrains.com/plugin/7086?pr=) Is pretty cool. Most of the rest are just language specific plugins. IntelliJ does a good job of prompting you that it has plugins that manage a particular file type. I use the Spring, Angular, Markdown, and drools plugins quite frequently.
The point of the project is not necessarily to make them viable for public use, but to showcase your skills. They don't have to be big scale. Some ideas: - calculator - text editor - forums website - etc
I think I realize what I don't like with the with() approach. It effectively provides a setter to each field. And for some classes, it's better to have certain fields that are set during the instantiation and only provide getters for those fields. 
Yes, I was looking for something to use spring with and after reading on their site, it looks like that's not included, same with java ee and the database tools. Maybe someone has a solid work-around? 
[The guy who designed C#](https://en.m.wikipedia.org/wiki/Anders_Hejlsberg) also developed Turbo Pascal and Delphi. Which is why C# uses PascalCase.
Gradle is nice if you are doing stuff which is not default. In the end, it is a question of what you prefer or what you require in your development. See http://gradle.org/maven_vs_gradle/ for their promoted strong points. If you see anything that saves you tons of time, Gradle sounds like your opt-in choice. If not, either or is fine. 
Lombok, Java is so much less verbose now. It's nearly as succinct as scala using Lombok. And you can demagic it to see what's going on too
`javac` is not required to run an application outside of an IDE (but compile). He mentioned the use of build tools are running them. So learning Gradle, Maven or Ant etc is mandatory in certain jobs.
Hm, interesting. I sure would have appreciated a warning or something in the console, though!
Srtg ?
I like code glance 
&gt; I'd probably use some JDBC wrapper instead of a full blown ORM though. Seems like the industry is getting away from ORM's. What's a JDBC wrapper here, You mean people are moving away from ORMs and going into pure SQL or into NoSQL? Because it seems the other way: people going from NoSQL into actual SQL/ ORM (Relational databases). Is people leaving all ORMs including other languages or just Java's ?
So many accidental ":wq"s in code when using an editor without vimulation.
http://azkaban.github.io/ is by far the best FOSS orchestration option I've seen so far.
What kind of font and color scheme is this ?
Yes! My text navigation is pretty bad if the VIm keymap is not supported.
[removed]
So true! Sometimes I will do it when I write emails.
IT looks to me to be just darcula. 
Also, across five jobs, I have yet to have one that requires being able to set up a build tool. My point is that this is a skill that is fundamentally useful, but not all interns need to know it.
I think it's darcula. Shipped with intellij, check your settings. 
https://www.reddit.com/r/java/comments/44mft2/what_are_some_of_your_favorite_intellij_plugins/czrgtfq
If you are using Ubuntu based distro this is an instruction to it https://help.ubuntu.com/community/Java
If it's based on Ubuntu you'll be able to install it via the package manager. Go to your shell and type `sudo apt-get install openjdk-8-jdk` This will install OpenJDK, not Oracle JDK. For the Oracle JDK you need to add a PPA first: `sudo add-apt-repository ppa:webupd8team/java` `sudo apt-get update` `sudo apt-get install oracle-java8-installer`
Lol @ unnecessary `test_` prefix when talking about saving space :P. Your setup looks quite sexalicious though.
I concur. I really don't understand the hype. Eclipse or even netbeans is really doing a fine job for my professional work day in day out.
GrepConsole is very handy for colourising logs. Findbugs obviously. QaPlug for PMD. String Manipulation for handy code generation.
Thanks!
Netbeans has been really laggy for me. It might be my computer, but it'll grap a tab and drag it sometimes when I'm switching tabs. Like I said, it might just be my retarded computer. (Don't buy an all in one touch, waste of money)
You can't accurately micro benchmark that way because of the optimizer. Check out open jdk JMH
It doesn't if you're new'ing the object with each call, check my answer.
Lol, I'm just a conformer. Thanks though about the setup.
If you don't have the drive to self learn than a certification would be a viable way to force yourself to learn. But that's about all it's good for IMHO.
Looks like that Material Design theme I saw a while back.
I think it's the Material Design theme.
http://vim-adventures.com/ :D
If you download and extract a tar, then the files should work, but not by merely typing java or javac in the terminal. E.g. see here how to set up the environment (PATH etc.): http://nixmash.com/java/upgrading-to-oracle-java-8-in-ubuntu/
Ah yes, thank-you. On mobile, I tried my best! 
This is the one! Note, if you're looking to install Android Studio you will want the Oracle version. 
If there is a remote chance that you'll do something that involves crypto, use the `oracle-java8-unlimited-jce-policy` package. So yeah, always use it. OpenJDK doesn't come with that restriction so it's already unlimited.
AceJump is a great plugin - it does one thing and does it really well. If you're interested in learning Kotlin or plugin development, it's also pretty small and easy to grasp - but it could use some love. If you would like to help contribute, check it out [on GitHub](https://github.com/johnlindquist/AceJump)!
I'd probably use the official VIM tutorial, it is awesome - and a fun learning experience.
Seriously, I want Kotlin to catch on so I don't have to look at @NotNull/@NonNull anymore.
If you are running a distro based on Debian rather than one of the Ubuntu variants you likely have to add backports to your sources if you want an up to date JDK: http://backports.debian.org/
I just wish mako templates had a plugin and aren't a pro version feature.
Strings are final so why would you want to do that unless you want to make your code less readable? Probably why Java doesn't allow that.
Don't be intimidated. Gradle is just a separate tool (from your java source code) that takes care of automating all the tedious repetitive stuff you have to do in order to run your code. Let's say for example you wanted to use an apache commons library. Right now what you do is go online and find a source to download a .jar and then put it in the build path. But what if a new version of the library becomes available? Or what if a team member working on the same project finds another source to download it but the library is of an older version? Then you have inconsistencies in your project. Gradle and Maven and all those tools essentially allow you to describe your project's compilation needs in a file (be it .xml or other) and then using those tools (usually from the command line but each IDE has point and click support) to read that file and automatically do everything you need. Let's give a gradle example: Gradle uses a 'build.gradle' file to understand what you need. This needs to be in the root of your project. Inside that 'build.gradle' file I could give the following instructions: -my project needs jdk 8 -my project uses the 'java' plugin -my project is named 'CompanyTest1' -my project needs 'XXX.jar, YYY.jar, ZZZ.jar' to run -in order to find above jars look in those online repositories: 'MavenRepository, CustomRepository' -my project must be built in the form of .jar -before building my project, remember to remove 'TestClass.java' and 'TestUI.java' since they are for personal testing garbage -while making the jar file make a MANIFEST.MF with 'MyMainClass.class' as the main class. Once I have the 'build.gradle' file ready I go to my command line and use `gradle build` which will go online, check 'MavenRepo' and 'CustomRepo' repositories (those are special links online that contain .jar files) and download XXX, YYY, ZZZ. Then I run gradle jar task (task is essentially a bunch of commands you want gradle to execute and the jar task is a default task along with the 'java' plugin which you declare you want to use in your build.gradle file) which takes care of putting the libraries in the build path, compiling my code, removing Test classes, creating the MANIFEST and packaging everything in a .jar file. As you can see just my using 2 command line commands I was able to do everything you would have to do manually in a faster and safer way (remember that the human factor is always prone to mistakes). Why would it help if you used gradle in your test? Because those evaluating you would obviously have gradle installed in the computer and you could just take your source files and send them in a .zip and your instructions could be as simple as: 1.Extract .zip in any folder 2.Open cmd and navigate to said folder 3.Assuming you have gradle cli installed run 'gradle build' then 'gradle jar task' 4.Navigate to wherever that .jar is 5.Run java -jar CompanyTest1.jar END Otherwise, you'd have to have them install eclipse, but be careful to install the same version as yours. Then tell them how to configure their eclipse in order to not throw weird errors. Then create a new eclipse project. But wait, is it a General java project? Do they need to create a new workspace? How should they add the libraries to the build path? As you can see it becomes way too complicated for someone will probably skim through your test for about 5-10 minutes.
Alright, it worked, thank you!
I don't get it ... why bother implementing "withs". Seems like a lot more work. What's the advantage of this: User u = new User(123) .withUserName("abc") .withPreferences(myPrefs); over this: User u = new User(123); u.setUserName("abc"); u.setPreferences(myPrefs); ?
I usually reserve 'with' prefixed methods for returning a copy of an **immutable** original with a specific change. For example: User originalUser = findUser(userId); User modifiedUser = originalUser.withPreferences(newPrefs); if (!modifiedUser.getPrefs().equals(originalUser.getPrefs()) { updateUser(modifiedUser); } 
I'm on android. The sound is inaudible. 
If the first test in a "multi-test method" fails, then all other test points of that method will be skipped, and you lose its checks. That's enough reason for me to only test a single thing in a unit-test method. &gt; I like multiple cases per method because it encapsulates all things related to the method being tested. The unit of testing is the class, i.e. a (unit-) test class will test the whole unit-under-test and whatever *it* encapsulates. 
I agree and want to add that using the Junit feature of expected exceptions requires you to split the tests in single methods. Also, if you have a more complex method, it's nice to just run the failed test if you have a number of simple tests instead of a single more complex test method (especially if you want to debug the method).
*Sigh* Emergency Java Updates. No longer "breaking" news now. Almost always expected.
MavenHelper - A quick way to run maven commands on a project. Especially helpful with multi-module projects as it is contextually aware of what project to run against. Additionally, I map it to the back quote key as it's never used while coding but is in a very convenient location.
http://news.softpedia.com/news/dll-hijacking-issue-plagues-products-like-firefox-chrome-itunes-openoffice-500060.shtml http://it.slashdot.org/story/16/02/08/193244/researcher-finds-tens-of-software-products-vulnerable-to-simple-bug
https://news.ycombinator.com/item?id=11047915 http://www.pippo.ro/mod/metrics.html
&gt;Oracle was the first one to take his report seriously, patched Java and VirtualBox “B-b-b-buh Java is so INSECURE!!!!!”
https://java-0day.com/
I know, they should just leave security holes unpatched, even if they aren't specific to the Java Installer.
[These web framework announcements...](http://i.imgur.com/sr76u7G.png)
grails has some pre-built user mgmt stuff for spring security, if that helps
As with all code, a more modular approach is preferred. However, sometimes it's just faster to throw a bunch of tests into one method. Your lead has a good point in that *any* tests are better than none. If splitting test cases into separate methods causes you to sacrifice coverage (i.e. test less stuff), then don't bother.
You mentioned @Before being not as useful since different tests have different setup. While the is true quite often, don't be afraid to add helpers in the test class. They can help setup with different parameters per test. Also, helpers to assert multiple thing correctly. To me a test should be short with three clear sections, setup data, run the method being tested, verify results.
Yeah value types are going to be great and they won't have the problems of C# structs because they're immutable.
I thought C# structs were immutable?
It is generally considered best practice to test ONE thing and have ONE assertion in every test method. Some benefits of this are: * When a test fails, it is EXTREMELY obvious what is wrong. You only assert a specific thing in one place, the method that is testing it is named specifically and the code that is being executed is very simple. * Upkeeping tests becomes easier and makes it less likely that people are going to get frustrated with complicated, spaghetti test code and just skip fixing or adding to it. * Tests are not only to help you write better code and to aid in identifying regressions (although those are nice benefits). They are also to act as documentation. If someone wants to go understand how a specific method or class functions, well written, bite size little pieces are much easier to grasp and put together than one big blob. As far as your criticism of @Before, I invite you to think about how you organize your tests a little differently... here is how I think about it and organize my tests: All of my tests are broken into GIVEN, WHEN and THEN sections, if not physically, then at least logically and in my head. Some other folks prefer to use the words BUILD, OPERATE and CHECK. Regardless of what wording you use, it defines the three primary steps your tests take. They: * GIVEN a scenario we set up (eg: Three entries are saved to a table and one of them has a date older than a year). * WHEN a specific interaction is made (eg: "When" I call a method called getEntriesOverAYearOld()). * THEN some result or resulting state is expected (eg: Only entries that are more than a year old are returned). Usually this is the part where you use an assertion library like FEST or AssertJ to verify things. What I do is not just break my test classes up by the class they are testing, but ALSO by scenario (the GIVEN). I also tend to always put my scenario and setup into a @Before method. This means that every test class defines a scenario and is written for a specific GIVEN. That means also as a result that every test method encompasses only the WHEN and THEN. Anyhow, this is a poor example of it but it's one I have offhand: https://github.com/elennick/retry4j/tree/master/src/test/java/com/evanlennick/retry4j/config Those four tests are all for testing one single test class. The scenarios they are setting up aren't actually very complex or even different but try to use your imagination. P.S. I just looked at that example I linked and actually it's an awful example. Sorry. Hopefully you get the idea.
That's just a recommendation https://msdn.microsoft.com/en-us/library/ms229031(v=vs.110).aspx
I don't really use CLI tools with IDEA; often you just specify the location of the SDK and that should be sufficient. But, I could see where pre-commit hooks and the like are troublesome. In my opinion, it would be better to create a `~/Library/LaunchAgent` for the user rather than system wide changing the application. You can do it like [this](http://stackoverflow.com/a/26586170). That specific example seems to be for *every* GUI application, but there may be a way to get it for IDEA only.
Not what I meant. If you're shipping products with security holes that you need to patch with emergency security updates, you're doing something wrong somewhere. And if that product is used by billions of people, well... You're gonna have a bad time.
Thats controlsFX stuff looks much nicer than anything I've built in swing. I should really sit down and have a play one day...
Or better yet, without 'test' prefix
[Keycloak](http://keycloak.jboss.org) is not spring based, but it does come with an [adapter for spring](http://keycloak.github.io/docs/userguide/keycloak-server/html/ch08.html#spring-security-adapter). I don't have any experiences with it, but it looks interesting.
True. Apache changes quite rapidly too. :P 
they way I understand it is that the jvm allow for reification but java will only reified value type and erased Object mainly for backward compatibility issue. The other reason the jvm does not force reification is not force reification on other jvm languages. Also the main reason people want reification as the example serialization it to access the parameterized type and that can be done without reification. I don't know if its plan though. would be nice to be able to know the type T without having to force a Class&lt;T&gt; in the constructor...
It's at least *on* Maven central. That's a huge plus, IMO.
I'm so tired of these Sinatra-like frameworks! They all optimize "hello world" applications, and none of them deliver good abstractions about REST architecture. For example a "resource" should be a concept in such a framework. But instead of that, you have to duplicate path patterns.
Hail Jax-Rs!
Even though I agree with the author this is really old news. "Effective Java" came out in 2001. That was 15 years ago.
But Joshua Bloch disagrees with what the author here is stating. Effective Java says to use checked exceptions for recoverable error conditions. &gt; **Item 39: Use exceptions only for exceptional conditions.** That is, do not use exceptions for control flow, such as catching NoSuchElementException when calling Iterator.next() instead of first checking Iterator.hasNext(). &gt; **Item 40: Use checked exceptions for recoverable conditions and runtime exceptions for programming errors.** Here, Bloch echoes the conventional Sun wisdom -- that runtime exceptions should be used only to indicate programming errors, such as precondition violations. &gt; **Item 41: Avoid unnecessary use of checked exceptions.** In other words, don't use checked exceptions for conditions from which the caller could not possibly recover, or for which the only foreseeable response would be for the program to exit. &gt; **Item 43: Throw exceptions appropriate to the abstraction.** In other words, exceptions thrown by a method should be defined at an abstraction level consistent with what the method does, not necessarily with the low-level details of how it is implemented. For example, a method that loads resources from files, databases, or JNDI should throw some sort of ResourceNotFound exception when it cannot find a resource (generally using exception chaining to preserve the underlying cause), rather than the lower-level IOException, SQLException, or NamingException.
I'm using solarized dark basically in every editor. Works quite well in darcula, too.
I love this guy. His blog and contributions to stackoverflow are outstanding.
Very useful. The alternative hotswap vm is something I've wanted for awhile.
Should a Java developer always make sure that he has the latest JDK installed? (The JRE is update automatic btw.) Or are only big updates ok? (From 6 to 7, etc)
Seconding this. I've made a couple of adjustments to highlighting colours to make them more subtle, but no other changes.
You might try over in /r/oracle. This doesn't sound like a Java issue to me.
I don't think the JVM needs to force reification. Right now the approach is one that doesn't force it. It is something that the compiler would generate for the language targeting the JVM. I think that java could be a language with reification without busting backwards compatibility. You wouldn't even need to rid yourself of wild cards, those could be erased and reification features disabled when used.
My opinion is you should have whatever version is on your production machines. That's most likely why oracle doesn't auto update jdk versions.
FYI, it's installing some sort of junk. Just hit Cancel a few times and it'll still update Java without needing this "helper application". Then go into your Java prefs in your System Prefs and on the last tab, at the very bottom, uncheck the box about sponsor offers when updating / installing.
So basically he says that if you need a solid non blocking reactive framework then use Play. Got it thanks
Perhaps you will get better support if: - submitting for [Oracle Support](http://support.oracle.com) if you are a customer - submitting to the [Oracle OTN Community Platform](https://community.oracle.com/community/fusion_middleware)
I agree with Joshua as well. However, Java 8 lambdas have thrown a monkey wrench into the paradigm. Without wrapping and re-throwing, functional code gets ugly real quick.
It was just a relevant comment from House. I don't think supremacist was calling you a twat.
Now that I'm out of school I pretty much only spend my work hours programming. So instead of 14h days I've got 8h days. I also drink water and use that as a excuse to move.
yeah for Intellij and PyCharm i made this theme http://color-themes.com/?view=theme&amp;id=563a1a9780b4acf11273aeee it is based on the GVIM version of the theme with modifications to make to more python friendly. I use it daily for both Python and Java work. i got one for visual studio and c# as well but its not uploaded anywhere
Two of them, actually: one for protanopia and one for deuteranopia This is the fastest link I could find: http://blog.jetbrains.com/idea/2015/09/intellij-idea-15-eap-help-us-test-the-adjustments-for-color-deficiency/
This is not Java...
This has got **zero** to do with Java, so it is not suitable for this subreddit. **Post removed:** Off topic / not Java related.
How are you tied to the old, insecure, jdk?
"I'm looking at punching myself in the face with a knuckle duster" Don't punch yourself; it'll hurt and knuckle dusters in particular can do some serious damage "Ok, so can you recommend an alternative way to punch myself in the face?"
Seeing method putFloat I can only wonder if this class is optimized to pipe all game packets through it to save every possible bit of data? That is, instead of aligning data to words (2 bytes) you are effectively trying to save traffic by aligning all data in packet to 1 **bit**? If I'm right, and this was an original intent, this kind of protocol would bring a huge overhead for CPU with unnoticeable savings in terms of traffic. If, however, it is not designed to route all data through it, then I see no reason to use this class at all. For example, your original problem would be solved with: data |= position &amp; 0b11 Want to pack 4 positions into one byte? data = positionA &amp; 0b11 &lt;&lt; 6 | positionB &amp; 0b11 &lt;&lt; 4 | positionC &amp; 0b11 &lt;&lt; 2 | positionD &amp; 0b11 People has been doing this for as long as network protocols exist, and, sure, it's not as pretty thing to read as BitPacker, but you usually write it once in a serialize method and forget it for eternity. *TL;DR: I do not see a valid usecase for this class.*
Value types are the driving reason for implementing specialised generics, so yeah, they're obviously aware of that. WRT erasure, serialisation libraries can already access generic signatures, the data is in the class files for a long time. Erasure matters at the JVM/JITC level but Brian is right - most of the time you don't notice it. 
lol look at the Jerry Seinfield over hear :D Good one kid.
I still haven't made the jump yet.
Yes it is the first place to look. Then the check writers find out how much it will cost in dev and testing time to upgrade and say "Well lets look at this in next years budget"
putFloat() is the less interesting function because you cannot cut bits from a float without messing with the value. But for all other types it make sense to be able to cut some bits, especially in regard of delta compression requirements. 
can't find it on Android Studio... =(
please give it a try, also give Netbeans a try. not dissing Eclipse or anything, but give a different IDE a try, maybe even SublimeText + Ant if you want to go bare bones.
I use Zenburn everywhere.
Do you have a specific problem you need help with or are you trying to cheat?
"100% CPU consumption in some corner cases" Again? Dealt with a similar bug in Mina and the Java Runtime a few years ago.
Eclipse is awfully buggy, as is RAD so I welcome another IDE. I heard IntelliJ wasn't free though? I will take a look. 
IntelliJ community edition is free
Came here to say this.
All three of those situations can be answered by rereading the text.
On a personal development instance, sure. On my work VMs they always match the target system as exactly as possible to simplify development and deployment as much as possible. In most gigs I rarely get to choose the version of the JDK I am using even if it is greenfield work.
Dude, are you even purging your data. God, fucking noobs! But seriously the slowness of EM in the SOA suite with even a moderate number of transactions is terribad.
Need to support Java 6 they say. Completely relevant.
Yes, however, the fact that function exists at all, seems to cover the usecase of packing a float value into a filled stream of bit-aligned values, and that is plain wrong. Or in other words - there exist no sane usecase where putFloat is needed. 
Follow the chapter on testing in the book, "Clean Code" by Robert C. Martin. In fact, read the whole book.
And don't forget to run tests before updating to a newer version. I saw often enough that even a minor update broke things. This happens usually in third-party libraries, but depending on the change it might also break your own code. Maybe you've been exploiting or working around a bug you didn't even know existed and then the fix breaks things. I remember two instances where changes to XML handling in minor releases broke some libraries and one case where a major release broke a library. It was never a huge problem, but it did create some work.
[removed]
A low-level utility library like this is much more useful if it doesn't only implement the sane use cases. 
I will argue, No. Everywhere else, you should try be on the latest JRE. However, on development, keep back from upgrading for as long as possible. Why? If there is a JRE bug that affects your code, you want to know about it. Then you can decide if you need to code around it, or announce that your software is not compatible unless you upgrade to a particular version of Java. If you always develop to the latest version, you simply do not know what bugs may have been fixed by Oracle, that you would have otherwise encountered, and its only when you deploy to live and your system falls to bits, do you realise you have to upgrade those servers also. 
Seems to be a problem with "Avira Browserschutz".
Point releases, probably yes after testing. Changing from 7 to 8 for example probably requires a bit more testing, and may result in more substantial changes, like Java 8 doesn't support older OSes, so may require an upgrade there too.
Point releases, probably yes after testing. Although it probably won't be the worst thing if you're a few behind. Changing from 7 to 8 for example probably requires a bit more testing, and may result in more substantial changes, like Java 8 doesn't support older OSes, so may require an upgrade there too.
For us, 6 -&gt; 8 involved completely new versions of Windows, Tomcat and SQL Server. That was fun.
Enough with your spam.
https://samebug.io/ Samebug is a Java Exception Search Engine and Database built by programmers, dedicated to helping other programmers. This means that you are able to copy your stack trace, paste it into Samebug’s search engine and it will instantly provide you with possible solutions to your problem.
It isn't hard, to be honest. Basically, add the Python plugin from JetBrains within IntelliJ and restart. Then, when it comes time to create your project, make sure you select "Python" under "Additional Libraries and Frameworks" and specify an actual Jython installation. After that, it's pretty straightforward. One word of caution, debugging is non-existent (complains about pdb (if I remember correctly) not being found) and I haven't really looked into it.
Before buying any books, go through the online Java tutorial trails on the Oracle site: http://docs.oracle.com/javase/tutorial/tutorialLearningPaths.html Honestly, if you have *any* prior programming experience, that should get you started quite nicely. Here on reddit, head over to /r/learnjava and /r/javahelp when you have questions. If you want to spend money on a book, buy *Effective Java, 2^nd. Ed.*, by Josh Bloch.
What is the title of this 100 dls book?
/r/Java is NOT your personal project mailing list. You don't even comment or discuss anything, 'cooper6' only post his own links. https://www.reddit.com/wiki/selfpromotion
Plot twist: The book was written by his lecturer 
Thanks for all the replies. I live in Norway, and it's a norwegian book. You wouldn't know it unless you speak norwegian ^^ It's called "Programmering i Java" (Programming in Java), by Else Lervik and Vegard B. Havdal, in case anyone knows it. I just thought it was a little bit expensive, considering all the resources available online for free. I will definitely look into some of the books and links mentioned here.
for $100 you could buy several premium Java courses. College books are a ripoff. I recommend caveofprogramming.com or Udemy tutorials(both free and paid). You will learn 1000x more.
Hei jeg har lest boken, om du kan, finn en annen. Edit: I have read the book, DONT buy. 
This is a good resource https://docs.oracle.com/javase/tutorial/
Pdf copies are usually available for free. Just saying
Head First java --&gt; Free on Google, ~$30 hardback.
How does this compare to [jOOQ](http://www.jooq.org/)?
I think I'm de-evolving. Statement -&gt; JdbcTemplate -&gt; Hibernate -&gt; JPA -&gt; MyBatis -&gt; NamedParameterJdbcTemplate
Fuck you for posting a link to a ripped .pdf. That's easily the best book written about Java programming, and worth every damn cent.
Apache Geode is the open source version of Pivotal Gemfire, a commercial in-memory grid computing / object database. Gemfire is good for building specialized solution such as large datasets financial analysis and trading solutions. Very fast, lots of features, mature but its complexity can be daunting. The newest versions are well supported by Spring (also Pivotal). It'll be interesting to see what uses Geode can find in the wild. 
I know. It's just annoying that often these projects link to releases instead of the main page which actually describes what the project actually does.
Buy an older copy of the Deitel &amp; Deitel book on Amazon for pennies. Most of what a newbie learns won't require the latest edition. "Java:How to Program".
jOOQ seems to have the best SQL DSL support, it doesn't call itself an ORM though. I would say requery is more a hybrid of typical ORMs while providing builtin query functionality. That is it has automatic relationship loading, caching, table generation etc. In jOOQ it looks like you generate a model from an existing database which is quite powerful, requery does not yet, it's code first but that could be a future addition.
Programming books in local languages are usually set because the lecturer makes no assumptions as to the student's English proficiency. Educational resources about Java are easy enough to find online, but educational resources about Java in Norwegian? Well, you tell me? The Thinking in Java and Effective Java books mentioned are in English, not in Norwegian. You ought to email the professor and ask him whether it's OK to use cheaper English language resources that you feel comfortable reading due to your high level of English. It's rare for programming professors to assign work out of the assigned textbooks but it's always a possibility at least, and if that's the case then you'd probably need to buy the textbook.
Then it wouldn't be *just* $100
Sadly, it's now horrifically out of date.
What's the state of the project? Can this be used in production? How big is the team?
Actively developed. Right now there are snapshot versions available, so not quite ready for production usage, but nearing 1.0. Any feature feedback is appreciated before then.
The DSL and its implementation reminds me very much of jOOQ 1.0. Almost getting nostalgic here :-) It does, however, offer out-of-the-box RxJava integration, which has to be implemented externally from jOOQ with some glue code at this point.
what's wrong with: &lt;A&gt; Optional&lt;A&gt; head(List&lt;A&gt; as) or if you use functional-java: &lt;A&gt; A head(NonEmptyList&lt;A&gt; as) ?
I'll buck the trend and suggest buying the book. Even if it's not the best value, life is simplified by using same reference material as the rest of your class.
&gt; How big is the team? git-fame Blame: 100% |ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo| Time: 0:00:06 Total number of files: 419 Total number of lines: 36,736 Total number of commits: 20 +----------------+--------+---------+-------+----------------------+ | name | loc | commits | files | distribution | +----------------+--------+---------+-------+----------------------+ | Nikhil Purushe | 36,736 | 20 | 418 | 100.0 / 100.0 / 99.8 | +----------------+--------+---------+-------+----------------------+ 1 row in set
I have Spring Tool Suite 3.7.2.RELEASE and it says that the plugin isn't compatible with the version of eclipse. I thought STS was built off of Mars?
Any repl would be great really ;)
Certainly it's a great book but I just found that it confused people who were just trying to learn the language. YMMV.
The best way to be an Exceptional programmer is for your code to throw more exceptions than other people's code. 
Nice, but no commits in MVC repo for four months? What's going on? Is it already final?
It was a link to an illegal pdf of Effective Java. If a person can't afford a copy, even a used one, there are plenty of very good free, legal, ethical resources on the web. Oracle's tutorial is a very good place to get started. Thinking in Java, whilst not covering the most current language and foundation classes, is also a very fine starting point. Very little old Java is actually no longer of use, and there are plenty of resources for the latest features. That said, Effective Java is perhaps the best investment a programmer can make if they aspire to not suck at Java.
better late than never :-)
I'm all for lambda's... but what is this buying us? Is it primarily just for the assertion groups? Are assertions going to be run in parallel? What are we getting here? I guess it is nice that we can now assert throws. That does make it a little bit nicer for testing exception cases.
meh. Some lambdas and grouped asserts at the cost of horrible-looking lambdafied code. The package structure has a lot of breaking changes, so it will be hard for everyone to switch from 4 to 5. Good to know early, but nothing to get excited about, IMO.
&gt; access a remote mySQL Database Cool. &gt; via SSH Okay... &gt; without the use of Port-Forwarding/Tunneling Um.... &gt; the impression Java isn't capable of something like this Wait... &gt; Would anyone have any ideas if there are some libraries which might make this possible? What are you trying to do? I mean, what do you want to do (not how do you think you should try to do it)? You don't need to SSH to a box to use a database in a Java program. JDBC can connect to a SQL database without using SSH (and it will be significantly easier for you to connect to your database through JDBC than through an SSH tunnel). Perhaps this SO question gets your going in the right direction: http://stackoverflow.com/questions/4093603/how-do-i-find-out-my-mysql-url-host-port-and-username
Ah i see they have added: @Disabled to replace the previous: //@Test 
There's a much simpler way of doing it without bytecode rewriting. A base class which stores the initial object at read time. Then do an object compare when updating. But why do things simply when you can make things more complicated, amiright? http://persism.sourceforge.net/main.php
eh, I'm ready for them to break it. They should have done more in the 3-&gt;4 transition. Making a new major version requirement is the second-best time to do this. 
&gt; the code that generates the asserted value can throw an &gt; exception without bringing down the whole test. I'm struggling to come up with a scenario under which I'd care if whole test goes down.
The @ExtendWith still looks a lot clumsier than TestNG @DataProvider. Data driven tests need to be a lot easier.
The name of something has lots to do with discoverability of features. 
MacBook Pro (Retina, 13-inch, Late 2013) 2.4 GHz Intel Core i5 8 GB 1600 MHz DDR3 Intel Iris 1536 MB 251 GB Flash Storage
Previous gig: Dell Precision M4800 - 32GB of RAM, 2x 256GB SSD. Can't remember the processor, but it was substantial. Current gig: Lenovo T540p - 16GB of RAM, 1x 256GB SSD, i5 (too lazy to check the model, but it's good enough) The M4800 was hands down the best development laptop I ever used. Before that I had another Dell which was great too, but nowhere near as beefy. The M4800 was a beast (and heavy as fuck). Sounds like your current company has its head up its ass about priorities. To be fair our executives at my previous gig also had awesome MBP machines, but the developers had either good or great machines and getting upgrades was easy. I don't think I could work in Java-land without at least 16GB of RAM. The tooling and stuff like virtual machines just eats it all up. Don't buy a Lenovo. I hate my current one... the Linux experience and their docking stations leave a lot to be desired.
Fucking drool.... I bought a Thunderbolt display for the house recently. What displays do you use for the Macbook Pros?
Also no ham rest matchers? Shit I use assertThat everywhere :(
I just default to [AssertJ](https://joel-costigliola.github.io/assertj/).
Non native support for hamcrest matchers is just dumb, unless there is a really strong technical reason. I use third party or custom matchers written using hamcrest interfaces all the time, and generally don't care which assertThat is written understanding that it should behave the same way. I love junit and the tooling associated with it, so really hope u guys don't blow it.
Two problems there; 1. Staff are seen as replaceable resources 2. Even if 1 were not the case quantifying your point is not possible, so business will balance the cost of upgrading against the vague guess of the cost of people maybe leaving..
I'm a noob. Can anyone explain what's going on with the FileHandler interface in the first portion of code? How does it even work? He declares a variable with the FileHandler type, and in the constructor assigns a value to it.. That must mean FileHandler is external to the class.. Is he using it outside the class? Is he accessing the FileHandler type via the class name space? If that's the case, why would he make a public interface inside the class? Is this normal?
Actually you can [customize the dirty checking mechanism](http://vladmihalcea.com/2014/08/29/how-to-customize-hibernate-dirty-checking-mechanism/) fairly easy and provide the same mechanism that you describe. Hibernate has many extension points, in case you want to substitute one of its strategies with a custom-made one.
2015 15 inch MBP, 4k 30 inch monitor
Why change the package locations, and even worse why leak the version number into the packages. import org.junit.gen5.api.Test; I mean do they expect people to run junit 4 and 5 side by side? 
dbanas on youtube is great too.
The class DirExplorer does one thing: it navigates a directory and find files. Once it has found files he could do different things, depending on what the user wants. Different users could pass different instances of FileHandler to do different things on the files found. DirExplorer uses FileHandler to permit to someone else to use a different logic to process the files. In this way the class is more generic and reusable. FileHandler is defined inside DirExplorer just to means that it is strictly related to DirExplorer. Does it help?
Oooh, I sense a fight here on reddit. Let me get the popcorn!
\*taking notes\* Thinking of getting a latest generation Dell Precision.
&gt; Also, get something that will support a 4k TV/Monitor, get about 40"-45" curved. Its the best thing since sliced bread, essentially four monitors in one. It does give you a distinct non-retina feel unfortunately. For a retina like experience you'd need an 8k/9k screen, and for desktop work in that size (~40") one that's quite a bit wider than the standard 16:9.
What would be the difference between "production servers" and "production"? (thought production meant developer machines).
Toshiba Portégé Z30-A-1GF: Intel i5 at 3Ghz, 256GB SSD, 16GB of RAM. No moving parts, very sleek, thin and light, long battery time. I'm happy with it, I'll ask for another model from the same line for my next laptop.
MPB 13" (2012), i5, 8GB RAM, 256GB SSD. After upgrading to SSD, the performance is outstanding :)
During a transition, absolutely. The APIs are not compatible, and with a large test suite, migrating everything at the same time can be an overwhelming task.
I guess using the [REST API](https://www.reddit.com/dev/api) is still your best bet, consuming that is quite easy with java.
Tried that already after using Wildfly itself on a large project. Did not like it very much, but that was during Alpha3.
Try okhttp. You can use that to access Reddit's rest API. 
Keep multiple versions around as per your requirements. In general the latest jdk should work fine, but in apps that are thoroughly used (large volume/large code base or both) extreme caution should be used in jdk migrations. Not the common cause but I worked at a large company that planned a role out, did regression testing and died in production on a jdk increase. The cause was an obscure threading bug in one of the core classes. The only way to discover it was through the high volume of the site.
Although anyone other than testing frameworks declaring junit outside of the testing scope should be shot. But, yeah, it could easily happen. I think the spring-boot testing module depends on junit for example.
I'm trying to place what you mean by use with maven. Are you looking for maven plugins for calling info from the reddit rest api? I'm just used to only thinking of it as a build tool and can't imagine what that rest api would be useful for with that. I guess it could also be a nifty script handle but that seems abusive. Maybe if the have a soap wsdl running around you could put a jax-ws plugin call to generate some classes to call it, but that's all my heads hitting.
Seriously? How about the wrong bit of code threw an exception? Isolating thrown assertions into blocks you care about let's you validate that. Not to mention you can also test that side effects and dependencies of when that exception occurs since you haven't blown up the entire test. Like, maybe I mock that the db is down and I want to get a specific exception. Then I also want to validate that because someone invoked a db call that the db reconnection logic kicked in. Now I can do that without having to wrap stuff in try catches and having "exceptionThrown=true" crap
Requesting a language specific API is not necessary. Instead the REST API recommended above is ideal. You can use a variety of REST tools in Java (JAX-RS) to connect to the standard API for Reddit. If you rely on a Java implementation - you will be handcuffed to that solution, not the fully supported official REST API. 
[removed]
[This question on Stack Overflow](http://stackoverflow.com/questions/11246399/java-library-to-convert-postscript-font-to-opentype-truetype-font) looks like it has the answer you need.
Might be an interesting article, but its presented on a really annoying slideshow website. No thank you. 
So similar. I have the i7-4910MQ and two SSDs instead with almost the same total capacity - usually docked with dual 27" 1080p displays.
Thanks for the link, I've seen online sfntly being mentioned for this exact task but I cannot find any sample code showing how to convert to otf, 
Wow, you weren't kidding! If you download and run the JAR without any arguments does it get you a help message? This may be something that is designed to run in the command line. Even if it is, you could still use it as part of some automated process.
Submitted less than [20 hours ago](https://www.reddit.com/r/java/comments/45b2ot/whats_new_in_junit_5/).
A lot of people don't really realize that when working on them. It's really annoying.
Spring + Docker + Kubernetes = Winning!
Yeah this is what I ment.
Mhm people seem to recommend that a lot. It seems kinda difficult. But I will take a look at it! Thanks :P
I've downloaded the sfntly jar, it comes up with an error that their is no main class 
It's not really a REST API but that's the colloquial term for these types of things. Its more of a JSON over HTTP web API, almost RFC in some parts.
Took some recommendations, made some changes, got rid of some errors, added some more angular2 typescript code for proof of concept. hope you guys enjoy! 
I have spent a lot of time learning Spring, but then I found Vertx. In my opinion Spring has nothing on Vertx, when it comes to mircoservices. I can build 5 services in 5 different languages and host them on 5 different servers and have them all communicate with each other over the event bus. The module system is pretty awesome as well. Yeah Spring has Reactor, but it seems like it takes more time to get an app up and running with Reactor than Vertx. Which is the feeling I get with a lot of Spring projects.
cobol 85
There are two paragraphs in /u/Dashing_McHandsome's reply, mentioning two different things. Your affirmation does not disambiguate which of the two you meant with your post. I can't decide whether you suck or rule as a programmer...
Vertx beats Spring hands down for microservices.
Oh oops, I ment that i just had to add it as an depency. My bad xD. And i guess i rule? 
Spring boot has a template for undertow. Anyway we try to use as much of the spring stack as possible. However spring lacks a good validator framework. We choose hibernate validator instead. 
I am not sure I think it is a standalone maven dependency which works quite well with spring. 
I use a [Try monad](https://github.com/jasongoodwin/better-java-monads) to help with exceptions and functional stuff.
What are we supposed to do with this again? 
With Spring Boot when you work with Spring Data JPA, it will automatically include Hibernate Validator. 
It's your call, what would you like to do? 
(speculative) i guess if boot's conventions match up with what you're doing, you could (i guess?) lower maintenance costs by offloading some stuff to boot.
I mean it wasn't a tutorial or anything... It's like: here install this.
We had some services running in ServiceMix containers, and we moved them to Spring Boot, and have been much happier, as now we only have to maintain one build pipeline.
Welp, can't say we didn't see it coming. But it still sucks, I now have to convince my bosses to migrate away ASAP – but I know they still will try to stick with it until out clients use a new IE that won't be supported by RF 4.5. :(
how the hell did you get a job programming?
How can you completely get rid of using a component library though? For example, I could never do without a rich datatable or popup/dialog boxes. (I use ICE faces)
&gt;JSF 2.3 when it lands If it lands... since months there hasn't been a single commit from the Oracle spec leads. Worrying...
I was merely pointing out that the sfntly jar is not intended to run from cmd, there's isn't much documentation on how to integrate it with projects either, let alone how to use it to convert ttf to otf, my original project uploaded to a website to convert files and downloaded the results but the site has gone offline, other sites have restrictions to prevent me doing this. I've looked into scripting with fontforge but cannot get it to act friendly with java, 
I've written my own components using vanilla JSF and bootstrap for modals and the like. Gives me more control over style and behavior. As far a "rich" tables I generally just enhance standard JSF tables with javascript. Tablesorter (http://tablesorter.com/docs/) for example. The only real pain that I have with a standard JSF datatable is the lack of a css style option per column tag (https://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-217). I'll probably look at tomahawk or something else which is super lightweight and not skinned until vanilla JSF works for my needs. The less I leverage external component libraries the less I am slowed for platform updates EE6 -&gt; EE7 -&gt; EE8 and the less I am harmed by something like Richfaces winding down. That may or may not be important to you depending on the size and lifespan of your project. My main application is 8 years old has moved from Seam 1 -&gt; Seam 2 -&gt; EE6 -&gt; EE7. Each upgrade has been easier than the last because I have moved towards standardized code whenever possible JPA vs Hibernate / CDI vs Seam / vanilla JSF vs Richfaces/Primefaces. I'm not saying that using JSF component libraries is bad at all. You just need to consider what would happen if they go away or if they take the project in a direction that isn't a fit for you. 
Seems to be some progress happening. https://github.com/javaserverfaces/mojarra/commits/master
* static content: * `gradle gulp_build` (html, sass, typescript) * `gradle gulp_watch` (html, sass, typescript) * `gradle gulp_tsc` (typescript) * `gradle gulp_sass` (sass) * `gradle gulp_htmlcopy` (html) * js dependencies: * `gradle npminstall` (full initial) * `gradle npm_install` (install dependencies) * `gradle npm_update` (update dependencies) * `gradle gulp_libcopy` (copy dependencies) * check libcopy task in `src/main/web/gulpfile.js` to configure * java source: * `gradle build` EDIT: sorry to hear about the build not working with windows. I wonder if there's a work around. If I get some time this weekend I'll try to check that out. 
Same here. Can't get past gradle npminstall On Windows
 Open the Gradle Build file and change the version of Node to 5.5.0, that worked for me.
That worked Thanks
Good to know :3
An example how useless change in JDK — version scheme — broke a library. 
Speculation abound. One set of rumours is about them getting caught by the hype of GWT 3 years ago, so reallocated resources away from RichFaces. Some evidence to support this is that JBoss EAP 7/WF 8,9,10's admin console is build with GWT instead of JSF which is already present in Jboss and their own RichFaces. Of course GWT didn't went anywhere, so that was kinda a wrong bet for them. Now they may have come to the conclusion that GWT is NOT the ultimate web framework as Google promised, but its too late now to catch up with the 3 years that their direct competitor PrimeFaces has invested in the mean time. PrimeFaces is still doing fine, as is OmniFaces. Haven't heard much about OpenFaces lately.
Very good readme
It surely faces (no pun) stiff competition from that crowd, but JSF can do SPA as well (not a super natural fit though), and SPA itself is absolutely not liked by everyone. Gmail works fine as SPA, but something like Reddit does not. Biggest enemy of JSF is IMHO Oracle themselves who have some deep desire to become popular with a proprietary clone of the latest hype every time (like all the countless resources they sank in their proprietary Node.js clone Avatar.js). Red Hat is sensitive to that too. Not appreciating what they had, but wanting more and quickly jumping on the GWT bandwagon when Google hypnotised us about it.
&gt;them getting caught by the hype of GWT 3 years ago I remember headhunters asking for GWT experience. It was the future they said. Yeah sure. Thanks for the info. 
The new versions work on XP, they're just not supported. Neither is XP, though 
ok but regardless, how do I change the update settings? I'm not interested in running the very latest version of Java; this PC is for running old software.
&gt; Servlets + pure JSPs Well, that's all I ever needed... :) &gt; Contrary to what some devs may think, people do NOT like websites delegating cycles to their devices. People LIKE idle CPUs, since idle CPUs are cool CPUs and don't eat the battery. I agree, I like that way of putting it. Well, I guess our industry keeps learning things in hindsight.
Are you running a locally installed application on that machine, or are you using Java Applets (i.e. Java in a browser)?
Locally installed.
/r/SysAdmin has some jaded SysAdmins still running XP and old versions of the JRE for legacy applications.
Prick Lowtower says: &gt; If you are deploying a WAR file to a Java EE container then you are probably not doing microservice development. If you have more than one WAR file in the container or an EAR file, then you are definitely not doing microservice development. If you are deploying your service as an AMI or docker container and your microservice has a main method, then you might be writing a microservice.
Adam's explanation of what Java microservices might be looked much more comprehensible to me
That sounds like a load of bullshit buzzwords. I like the definition best where your microservice still works when it's deployed only by itself. If it depends on other "microservices", then none of them are properly modularised.
This is dope. I was looking for something like this, especially their tesseract preset. https://github.com/bytedeco/javacpp-presets/tree/master/tesseract Thanks for posting!
It's mighty hard to make microservice interface into a big ball of mud domain
Can you please explain why you don't think GWT is as good as Google has promised it to be? 
Why cant your JavaEE server, and app be deployed as a single application to your hypervisor, so you dont have to wait for anything. You just spin up the instance.
Swing? Really?
They can, but then you lose all the main benefit of a Java EE architecture vs embedded containers: the speed of building and deploying your app without simultaneously bundling and deploying all of the app's dependencies. If you're going to bundle the server and app together, why choose Java EE and not an embedded solution like Dropwizard/Vert.X/Ratpack?
You might want to post this tutorial in /r/learnjava rather than here. /r/Java is normally not the place for such discussions
Because up until a year ago Spring Boot and Wildfly Swarm didn't exist.
Why not?
What you linked to is the source code for the Eclipse website, not the source code for the IDE. There's nothing to build there. I'm not sure why you want to build Eclipse. It's not trivial to do, but [this](https://wiki.eclipse.org/Building) might get you started. If you just want to use Eclipse than you can download builds from the [Eclipse website](https://www.eclipse.org/downloads/). You may also want to look at [Netbeans](https://netbeans.org/) or the community edition of [IntelliJ](https://www.jetbrains.com/idea/).
Just an FYI, my performance bottleneck has always been inter-service communication and database traffic. Not the application itself. Not sure if I want to be writing async code in Java. It's such a pain when it comes to syntax.
thanks a lot :) now I'm confused since I'm developing a game about wormholes!
Personally I'm a fan of JaCoCo. It's something you integrate into your build rather than an external service, but it produces good reports and works well across different JVM languages. (I use it with Kotlin)
Hey, just added the tl.dr version as comment.
+1 Jacoco. It works well with Java 8.
At work we use SonarQube. 
Us too. It ends up running jacoco for coverage, but it does so much more.
Google pretty much abandoned GWT, and the hype is mostly gone. The promise was that almost every site would use GWT, and that most google apps would use it, but this hasn't happened, by far not!
I would use slick2d instead, same API, better performance; but Swing is not bad for a simple game.
Jacoco is good because it integrates with tests running so it doesn't slow down your build. However, it has trouble with reflection and exception handling. Cobertura is more powerful but instruments the tests itself. So it takes a lot longer and adds to your build. Clover is good and comes from Atlassian but it isn't free. As a static analysis tool I suggest sonarqube. It integrates with all the code coverage tools and is really just an open source UI where plugins for everything. What you install determines what it looks like. All of these work easily with most build tools. 
&gt;How do people usually deploy SpringBoot in production? Not at all? They deploy Java EE apps ;)
&gt; tips on where to start? Yes, the sidebar. There's links to subreddits that are more suited, and their sidebars in turn (and also their FAQ &amp; wikis) contain many links to resources. There's also the subreddit search which will yield hundreds of threads about learning Java.
From the Obscure Syntax Hall of Fame, one of my favorites: fun html(init: HTML.() -&gt; Unit): HTML { ... } I'm done learning new language quirks. I'm sure there's an existing, time-tested pattern that could be re-used for whatever this bit of code does.
Ok, so, umm. This one has me stumped. It looks like a function named html which returns an object of class HTML and takes a parameter init of type.. umm. HTML.lambda which returns unit? So a lambda enclosing class HTML's scope which returns a Unit type? Am I somewhere close here? Definitely not really super clear.
I maintain a complex legacy file format, with no documentation. The documentation is a huge bank of unit tests we built-up after the fact. If someone makes a change that breaks these tests, its helpful to know *everything* in the tests that broke, rather than just *the first thing* in each test. One way to do this is to ensure that every test has only one assertion, and factor out all the test logic into reusable functions. The second way (imo easier way) is to build a multi-assertion library, and uses it to make lots of assertions inside one test. Multiple assertions made a huge difference for us, but sometimes we still only saw the first assertion because the code that gets the value for assertions throws an exception, so the other assertions never got a chance. That's why I am very excited about this feature in JUnit 5.
Someone tell me why we yet need another JVM language that will have a very small knowledge base and will make it hard for teams to hire people with knowledge in it? 
Kotlin has a very shallow learning curve for anyone familiar with Java, so I don't think it will be an impediment to hiring. At the risk of stating the obvious, we need another JVM language because existing JVM languages are each deficient in ways that Kotlin addresses. Go read the website to learn more.