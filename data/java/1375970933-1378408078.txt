I looked at what Recuva does, and I get what happened now: 1. Something or someone deleted or moved your documents. 2. Windows marked the space on the disk as "free" (this is how deletion works) 3. You later ran the SDK installer, which asked Windows for some free space on the disk. Windows said: "here you go" and gave the Java installer the space freed up by the document deletion. 4. You noticed the documents were missing, ran Recuva 5. Recuva found entries in the File Allocation Table (FAT) pointing to where the documents used to be, and Recuva reports that that area on the disk has been overwritten by SDK. **But this is quite normal behaviour for Windows** Unfortunately we are no closer to finding out what or who deleted your documents. Are you sure you didn't just accidentally drag them to a different location on the disk in explorer? We've all done it. The only other thing I can say is "something something backups.... " EDIT: just spotted that the install was on D: and the files on C: - in that case it would have been the download of the installer or use of a temporary directory during install (probably needed to unpack a zipped installer) that used the disk space on C:
The one for the Soot: Java Optimization Framework.
This is what happens when companies have to support projects that were created five years ago and are still being actively used. The new guy coming in (me, in this case) are given someone's old program and told "here's a list of bugs, fix them". Out of curiosity, is there something better than OSGi now that you suggest dumping it?
That's unfortunate. Netbeans is indeed a powerful IDE, but it's also on the heavy side. I only have one computer that I use, and thankfully it's powerful to run it without any slowdowns.
Oh, so you used Netbeans for something other than Java before needing that plugin?
I do not believe the Java installer did that.
I used NetBeans for JSPs, JavaBeans, and JSF, which it's kind of a wash between them. Google has a Play! framework that's a bit more convenient in eclipse at the moment, and for some reason has the same name as their Android app-store. Though, really they'd like a more Scala approach than Java, but it's like .Net where you can mix them. Now, I also work on Java bytecode analysis with Java and Soot api which is all eclipse. The Soot plug-in isn't really useful for anything else, but that.
NetBeans less popular, to be sure. But it's a hell of a lot more polished than, Eclipse which has an interface like it's a beta release. Really the only negative IMO is the relative popularity of Eclipse... eclipses NetBeans so we get no plugin love. 
What is your defenition of `ImmutableList`? Your first interface is `List&lt;E&gt;`, not `ImmutableList`. If you change the second interface defenition to `List&lt;E&gt;`, it compiles correctly.
Cannot vote this down enough.
That actually explains a few things that I've always found a bit odd.
Say I start one new GUI file, can I have more than one editable frame in that file to edit? Like a form and a base? 
I switched to netbeans when I found out it had a great vi editor plugin call, jvi.
Sounds good thanks man
Regarding the article you linked, that guy's information is not correct. First, his code is not proper Java. But second, the following compiles perfectly fine, without unchecked cast warnings, at least from Java 6 on: interface UnmodifiableList&lt;T&gt; { T get(); int size(); } interface List&lt;T&gt; extends UnmodifiableList&lt;T&gt; { void add(T item); void remove(T item); } class SomeClass { private List&lt;SomeClass&gt; list; UnmodifiableList&lt;SomeClass&gt; getList() { return list; } } As to why this isn't a common pattern, immutability just wasn't a design concern for the original Java collections and in the Java ecosystem in general. Immutable collections have *recently* come into attention, but it's probably not worth it to retrofit the existing collections libraries, since mutability is baked in to the core (Iterator has a remove method). You have to design this from the beginning, like Scala's collection library, where mutable collections can be represented immutably.
I agree with you that the example given in the article does not make much sense. There are a number of things that make me think that article is either wrong or no longer relavent. * That article was written for Java5 just before Java6 was relealeased. I can't find anything that says the way generics are handled changed, but a 7 year old article is not where I would go for Java information (especially since updates to the language are coming more frequently now). * The author uses pseudo code instead of valid Java syntax. Even if you are trying to explain an issue that causes code not to complie, using real code is preferable. That way readers can try it directly without having to worry about if they translated it correctly when testing it on their machine. * The author meantions erasures, but then gets fuzzy about what the end result is. `Array&lt;Object&gt;` is used as a place holder. `Array` is used which is not a generic class, not in the `java.util` like all of the other collection classes (it's in `java.lang.reflect`). It is a utility class that "provides static methods to dynamically create and access Java arrays" [Javadoc](http://docs.oracle.com/javase/6/docs/api/java/lang/reflect/Array.html) All that being said, there are annoyances with generics and they are because of favoring backwards compatibility. Mainly the fact that if you have a `List&lt;Stirng&gt;` you can't assigne it to a variable that is `List&lt;Object&gt;`. This has to do with covariance and contravariance. If you are interested in immutable collections, you can take a look at [Guava](http://code.google.com/p/guava-libraries/). It has a full immutable collection library that was writen from the ground up.
OK, within your JavaEE container (WebSphere) you need to configure those settings and assign them to a JMS ConnectionFactory JNDI name. Once you have defined that, you can go straight to the example implementations on [Oracle's web site](http://docs.oracle.com/javaee/1.3/jms/tutorial/1_3_1-fcs/doc/prog_model.html#1023398). As for configuring the JMS settings inside of the container, that's specific to WebSphere and I have never really used WebSphere. Perhaps [this](http://pic.dhe.ibm.com/infocenter/iisinfsv/v8r1/index.jsp?topic=/com.ibm.swg.im.iis.infoservdir.user.doc/topics/t_isd_user_setting_up_jms_in_was.html) will help.
The standard answer to that question is pretty much this- if you aren't being told by an employer, instructor, etc which one you have to use, try them both and use the one that you like best. IDEs have their strengths and weakness, and their fans and detractors, but they are all similarly powerful these days, especially for someone just starting out.
The benefit is, I get vi inside of netbeans. I'm not sure what you're getting at?
Actually all of my questions are stemming from me learning Guava. I was wondering why they didn't go with a solution like this. They pretty much go the same route as the JDK in that their immutable list still implements the List interface. Therefore if you passed an immutable list back to a client through an api, the client wont know whether that List is mutable or not until they get an OperationNotSupported exception.
If I understood you correctly, you'd want to use a Comparator: http://stackoverflow.com/a/732542/394589 PS: I just started Java, so wait for another answer.
Pretty decent explanation of what Joda Time is and why it should be used.
Why can't you just override equals?
I think the decision comes from the Principle of least astonishment. I have a function that takes in an `ImmutableList` and does some work with it in a new thread. If I try to use `add()`, the code blows up immediatly exactly where the problem is. based on the type, I should know not to call that method. If `MutableList` extends `ImmutableList`, I use the list that is passed into my function under that assumption that it will not change. However, the caller actually passed in a `MutableList`. While I'm doing my work, the caller adds another element. Now we have a race condition that might not cause a problem until much later in the code execution. Failing fast saves time debugging later.
One is better than the other.
*One's an 8 and one's a 10*
I used Netbeans, Intellij IDEA and finally eclipse over the course of last three years... all can be used to get job done... eclipse was a bit too complex to handle when I was starting to learn Java so I used netbeans which is more "out of the box" without need to install lots of plugins. My second IDE was IDEA which has the nicest UI (subjective opinion). Now I am learning eclipse because of new job. You should try all IDEs and then you can decide for youself but if you are just starting to learn Java then you may preffer netbeans or Idea more than eclipse... 
If you manipulate date and time, this is a very useful API to know and to use. It was a huge inspiration for the new Date &amp; Time API in the upcoming Java 8, so you will be able to build on this knowledge.
I see what you mean now. Thanks for the insight. How about constructing the hierarchy like this: A / \ B C Where A is: public interface List&lt;E&gt; { E get(int index); int size(); } B is: public interface ImmutableList&lt;E&gt; extends List&lt;E&gt; { //Same interface as List&lt;E&gt; } and C is: public interface MutableList&lt;E&gt; extends List&lt;E&gt; { void add(E e); //Add element to list void remove(E e); //Remove element from list } This would seem to make logical sense as a *MutableList* **is not** an *ImmutableList* as was implied in the hierarchy I proposed in my initial post. However if someone did need the level of abstraction to view both types as a list, they could. *^aside: ^thanks ^for ^engaging ^in ^this ^conversation, ^it ^has ^taught ^me ^some ^cool ^stuff.*
Vi is a modal text editor. It separates the inserting of text into a document, from commands used to operate on text in the document. One of the reasons I like it is, it allows me to edit entire documents without removing my hands from the home row (to use the mouse, for example). The wiki article I linked to does a pretty good job of explaining what Vi is.
* These type of questions go into /r/javahelp * You're dumping a code-fragment at us without explaining any context * Your code-fragment uses many classes that are not JDK classes - how are we supposed to help if you're not even telling us what classes/library you're having problems with? * You're not explaining what your actual problem is. Exceptions? Compile errors? Logic errors? Is something happening that you don't expect it to be? Is something not happening that you'd expect to happen? What do you mean by "does not make it past"? Properly explain what you're struggling with, and we're better able to help. 
I don't see the appeal personally. I understand that the benefits are immense if you are coding a safety-critical system. However if for general application programming TDD just seems to add a whole lot of overhead that slows development. 
This isn't even java but I'll let it slide. Growing object orientated software guided by tests is the go to book in my opinion. TDD is easy once you know how and what requires it. 
I said one was better, not same.
What do you mean by "compare two lists of myObject"? There's a number of ways that can be interpreted: * Determine list has the greater number of elements. * Find all the common items between the two lists. * Find all the items in one list which aren't in the other. * For each object in the list find the cumulative sum of a specific field, and compare that to the same sum from the other list. Without knowing what you're trying to do, I'm struggling to think of a situation where comparing two lists would be necessary - knowing what you're trying to achieve and what constraints/requirements you have may clear things up.
Wrong! Developers who do TDD *will* go faster, because: * Your unit tests read like a 'spec' of your code. They describe what the code should do. They are a kind of 'manual' of your code, where each unit test represent a single piece of required functionality. Other developers will spend less time figuring out what your code does, and why. * By writing the tests first, you will have less bugs since every piece of functionality is covered by a unit test. You WILL have to spend a lot less time bugfixing and debugging when you're doing TDD. * You won't feel 'scared' when you refactor. Your unit tests make sure everything still works as intended. * When you follow the red - green - refactor cycle, your code tends to be better structured and organized. You will write less 'crap code' because you're only allowed to write production code to make your failing unit test pass. The refactor step gives you time to clean up your code before you start writing the next test. Yes, I'm hooked to TDD as well. We started with it 2 years ago on my project, and I can't imagine developing without doing TDD anymore. I know they are pricey, but check out Uncle Bob's test driven development videos. They are very educational and fun to watch (he wears a lot of costumes &amp; switches environments :-)) * [TDD - Part 1](http://cleancoders.com/codecast/clean-code-episode-6-part-1/show) * [TDD - Part 2](http://cleancoders.com/codecast/clean-code-episode-6-part-2/show) 
I use Eclipse because my intro course used it. But I also know of IntelliJ which is ok. edit: I'm on Windows but Eclipse can be on anything.
Excellent, thanks! My Scala/Lift projects require OracleJDK b/c there have been some issues with that stack on OpenJDK in the past, but I should actually check again to see if that's still the case. Been a while since I even looked at OpenJDK, might be ok now.
http://www.reddit.com/r/java/search?q=IDE&amp;restrict_sr=on
Oh. In that case, if your project explicitly requires Oracle JDK, then just go with that. It's supported on OpenBSD if you decide to check it out. In the end, you just have to get the job done.
Totally valid to extend an interface with generic parameters. For a real world example: @NoRepositoryBean public interface BaseJpaRepository&lt;T extends AbstractEntity&gt; extends JpaRepository&lt;T, Long&gt;, QueryDslPredicateExecutor&lt;T&gt; { public List&lt;T&gt; findByActiveTrue(); public List&lt;T&gt; findByActiveFalse(); } T is passed down to JpaRepository/QueryDslPredicateExecutor with further requirements forcing implementing classes to only use parameters of type extending AbstractEntity. This one also sets a secondary parameter for one of the interfaces, JpaRepository to Long.
Most of the proselytizers will say you've failed when you complain about TDD. And, often, they're sort of right if you are attempting to implement it and you're not writing your code with TDD in mind. TDD will drive the design and implementation of much of what you do in many cases, but it isn't necessarily a bad thing. If much of what you have is already written that way, it is often worse to start adding components that do not adhere to the same dogma. Still, I've never become a convert either. I have no problems with tests, but I tend to prefer to add them when it makes sense to add them, not as part of my overall design philosophy. Any time I've worked on a considerable TDD project, I couldn't shake the feeling that I had two projects that were horribly coupled; also, god help you if your requirements drastically change. Understand I'm not saying I'd refuse to practice it again - I'm much too practical for that - but I think it is just another variation in a long line of silver bullets. It can be somewhat helpful, but it is not the 'answer.' I think it is great if it works for some, but much like religion, it is best practiced on a personal basis. 
I've used IDEA, Netbeans, and Eclipse (Juno). I hate Juno, as it is slow as molasses, and it doesn't work like I expect. (though they claim to have fixed performance problems). I like Netbeans. It's fast, free, makes sense. It's a little more integrated with JavaFX than the others. I really like IDEA. It's fast, there's a free edition (though I use Ultimate), and it has great plugins like the QA plugin. Can write JPQL/HQL in the console. Understands your DB's dialect. Can make DB diagrams. I think it's telling that Google started w Eclipse, but then partnered with IntelliJ to make Android Studio. 
&gt; I couldn't shake the feeling that I had two projects that were horribly coupled This is spot on. I am on the edge of being a TDD believer, but I too often get that same feeling when using TDD with new development.
How to consolidate data from MSSQL database for CRM and Oracle database for ERP ? how to handle it with Crystal, BIRT, and other so-called reporting tools? 
jGrasp!
In general i just dont think you should use the result of toString for anything but output. At the very least know that you can only guarantee the results from classes you have specifically implemented toString for.
Professionally, you are probably using Eclipse (or RAD) or IntelliJ . I was a 10 year Eclipse user. Eclipse is like the jeep of IDEs. It is functional but not pretty. IntelliJ felt like a driving a BMW. It was clean, worked smoothly, didn't lock up. It has the same core features of Eclipse but things are a little bit more thought out. I think it is still OK to use Eclipse but you may have a smoother ride with IntelliJ.
Still, it seems that this should be added to the spec for the core classes? Or maybe added to the set of compliance tests.
IntelliJ Idea FTW!
I understand things much better when people use fake-world examples with Cat objects and Coffee objects, but I get what you are saying and I appreciate the reply.
Im guessing that collections with a backing array are just returning the string representation of the array which is probably jvm dependant. Would be easy to fix and make consistent i suppose. Again though it doesnt make a whole lot of sense to do special parsing on the toString instead of using the class correctly. If you find yourself needing to do something like that it seems like that would point to a bad design somewhere.
True 
Joda is awesome but it also is memory hog. My profiler often points to DateTime instances. Saving as longs or Dates will save you future headaches. 
Good to know, thank you! Last I checked - years ago - I seem to recall the Sun/Oracle JDK had issues on the BSD's, and it seemed Oracle wasn't interested in supporting them since they owned Solaris now. Glad to hear that's not the case anymore.
it does seem to be more visible work for the coders - but personally I find it means more of my work is visible as I would do a lot of testing manually before passing off code, now I have ways of recording and automating that testing (also means I don't have to remember all the things I need to check before releasing) It can slow down the development during the initial stages of a project down. However if do properly it does speed up the later stages - as the application starts getting large, I run the test suite to check all the things I think I may have impacted with any changes (and all the things I don't think I'll impact but might have). Code changes become easier - not least because code is looser coupled but the biggest benefit I find - there is very little finding major bugs/regressions in later stage testing cycles (one project at work is suffering major regressions every release - I think we are close to cancelling the contract with the vendor)
Don't forget JPA has already been used with NoSQL for some time in GAE and Google's BigTable.
Ooohh... I will have to add that to my TODO list. I am currently reading through [Practical Unit Testing with TestNG and Mockito](http://www.amazon.com/dp/839348930X/ref=cm_sw_su_dp), and it's pretty good so far. Admittedly, I got it to learn more about Mockito, but it's also a really nice introduction to TDD.
I have to concur. Am using it in my android application. Feel it is easy to use and a true powerful library with lots of neat features. Especially adding/removing days/hours/minutes with ease.
Profilers kinda suck at that, they aren't good at recognising small objects. A JodaTime LocalDateTime has the following fields: /** The local millis from 1970-01-01T00:00:00 */ private final long iLocalMillis; /** The chronology to use in UTC */ private final Chronology iChronology; One is a reference to a singleton, the other is a primitive. That's pretty much the same as java.util.Date.
Mockito is great, very powerful. It's a bit odd if you want to define complex "answers" to mocked methods but it's pretty flexible. 
Hi, thanks. I've already used it.
Being honest, unless OP is wanting to make the next CoD then Java is just fine
Since there are only two hard things with programming, cacheing, naming things and off by one errors. This can ACTUALLY help
&gt; DispatcherFilterStatementReponse The scary thing is I'm pretty sure I've seen an actual class with that name before.
https://www.google.com/search?q=why+eclipse+sucks
The good news is that much of Joda will be in Java 8.
It's not just for safety-critical systems. Any software that you write that will have longevity will benefit from TDD. Maintenance over time is the real cost of software development. 
I work as a professional Java Enterprise programmer for a few years now and have never saw someone using Netbeans. Everybody uses Eclipse or IntelliJ.
RedditCommentReplyGeneratorImpl generator = new RedditCommentReplyGeneratorImpl(); RedditCommentReplyImpl comment = generator.buildInstance(); comment.writeToScreen();
Nice way to say you're speechless. :)
Ladies &amp; Gents, I present to you: http://grepcode.com/file/repository.springsource.com/org.aspectj/com.springsource.org.aspectj.weaver/1.6.3/org/aspectj/weaver/patterns/HasThisTypePatternTriedToSneakInSomeGenericOrParameterizedTypePatternMatchingStuffAnywhereVisitor.java
Poor form! "Impl"s are bad for you. The concrete class should have a proper purpose, ideally identified by its name! RedditCommentReplyGenerator generator = new FireFoxRedditCommentReplyGenerator(); RedditCommentReply comment = generator.buildInstance(); Something like that could be necessary if the interaction with each browser is completely different (for example, each browser requires its own native driver), and you want to to abstract the reddit interaction specific logic (in an abstract class or interface) from the browser control logic (in the concrete class or implementation). Example [here (PDF warning!)](http://www.objectmentor.com/resources/articles/CoffeeMaker.pdf). Java doesn't have cool metaprogramming capabilities like Ruby, so we're stuck with patterns like this to achieve meta-like behavior.
It's been a while since I've written any Java. I mostly read other code written by decidedly bad programmers.
I've used Netbeans nearly exclusively for the last 9 years. I chose it originally because I was writing Swing apps and it has the best GUI designer (at the time). Over time I've tried both Eclipse and IntelliJ, but keep going back to NetBeans because I like it's Maven integration and it just stays the hell out of my way. I hate Eclipse with a passion, but my project is actually an Eclipse based plugin due to the market share.
Yeah, it's too bad the JLS only allows a subset of unicode in class names, otherwise they could have just named it ###public class ☠☠☠ {
Cool game! It looks fantastic. Regarding the networking library, I've used up to some extent Netty and it's great, have you given it a try?
Are you saying that having a generic Interface with separate implementations are bad?
Not at all! It's just that once you separate concrete from abstract, you have to wire them back up again when you actually want to run the code. In Java, this wiring is exposed because of a lack of any really useful metaprogramming capabilities. For example, you can't override the "new" method of a base class, the natural factory method of an OOP language, to produce different instances of subclasses. So, an explicit factory is required. This is not a problem in Ruby, which allows you to customize the "new" method. Ruby has really excellent metaprogramming capabilities. Of course, there is black magic available to you through custom class loaders and byte code modification using weavers, but *usually* this is not a good idea.
I'm using both Eclipse Kepler (i.e. 4.3) and NetBeans 7.3.1, for Java, C, and C++. Both are pretty damn good, though I prefer NetBeans slightly. I find NetBeans less annoying when I have to do something off the beaten path. If I didn't care about Android, I'd probably just stick with NetBeans, really. I have to say, though, that Eclipse has really come a long ways. I also have a license for Idea, but haven't really used it in anger yet. It looks to have some nice features, is very keyboard friendly (important to me), and certainly gets rave reviews. However, the lack of C and C++ support, combined with the baseline friction of switching to a new tool set, has kept me from really giving it a fair shake. 
I didn't notice your reply until now, but I meant final and not volatile. If you look at the link provided by veraxAlea below my statement was correct. &gt;The values for an object's final fields are set in its constructor. Assuming the object is constructed "correctly", once an object is constructed, the values assigned to the final fields in the constructor &gt;will be visible to all other threads without synchronization. So all final assignments made in the constructor will be visible to all other threads without any further synchronization. If the object being assigned in the constructor is immutable (or at least thread safe as well) then no further synchronization is required. 
I meant, using the word "Impl" by itself is a bad practice because it doesn't tell you anything about how the concrete class is doing its thing and the reason for its existence. So, tweaking your example: CommentReplyGenerator generator = new RedditCommentReplyGenerator(); CommentReply comment = generator.buildInstance(); // CommentReply is actually an instance of RedditCommentReply comment.writeToScreen(); The "Impl" is redundant, and the "Reddit" is better documentation of the purpose of the concrete class.
What if the prerequisites to create a RedditCommentReplyGeneratorImpl change? What if it suddenly needs a "KarmaPredictor" and a "MemeComplianceAnalyzer"? You obviously need a RedditCommentReplyGeneratorFactory.
That is hardly any better. A bit better form if RedditCommentReplyGenerator is an interface now. As I said above, you need a factory..
A Foo interface with only a FooImpl can of course be interpreted as superflous structure, since there's only one impl, so you could just use a Foo class without interface. Then again, the user of your Foo class can easily get lost in all the implementation detail. An interface can express what is supposed to happen from the outside perspective much better and more succinct than the longish implementing class with lots of private method and implementation details.
You have a factory in either case... You can have interfaces or abstract base classes here, but there's not enough information from the example to determine which pattern is being used. Not that it really matters for the point being made.
Not necessarily. You can mix in KarmaPredictor and MemeComplianceAnalyzer as strategies.
I was speaking of composition. But where do you get the correctly configured KarmaPredictor or MemeComplianceAnalyzer strategies? edit: If you inject the factory from somewhere else you don't have to know how to correctly compose a RedditCommentReplyGeneratorImpl. Instead you just ask the factory to make you a generator object and it does so doing the correct initialization for you. It improves separation of concerns.
We're beating a dead joke horse here, but I'm operating under the assumption that there was a functional reason for introducing abstraction. For example, if you are testing an application in multiple browsers, and you need a native driver for each browser/platform combination. In this case, you have abstract testing logic and concrete browser interaction logic.
But if you go around using new all over the place instead of factories, you often have troubles getting all those test implementations into your code where you need them.
Okay, so I have a system and I have an interface "EmailSender" and I have one implementation called EmailSenderImpl. I only have one real implementation you see because I only plan on having one email sender. I'm using the interface to allow for the ability to mock my EmailSenderImpl in the testing framework. What this does do, is that it allows me to create (down the road) NewEmailSenderImpl which also implements EmailSender. In this case, I'm using Impl to just say that the class is a concrete implementation of some interface (usually where there's a name conflict between the interface and the concrete class). Actually, the better example that I see ALL of the time is the DAO, DAOImpl. The alternate way I've seen it done (mostly in C# coders java code) is IEmailSender (Interface) and EmailSender (concrete). This is, in my opinion, the exact same thing. I prefer the *** Impl approach just because I code to my interfaces using Dependency Injection so I only ever deal with the interface name. The Impl is hidden away in my DI framework of choice.
Presumably, the new is called only once and the instance is passed along. I don't think we should assume that these three lines would appear right after each other, otherwise that would pretty useless. In fact, this is the difference between dependency inversion and using factories. Don't call us, we'll call you.
&gt; dependency inversion and using factories often the difference is also between: "Hey, I need this thing there." and "hey, I need to be able to create some of those to build something for someone else".
If you only plan on having one implementation, why do you even need an interface? Any mocking framework worth its salt can mock classes. If really want or need the interface, why not call the interface EmailSender and the concrete class DefaultEmailSender or even JavaMailEmailSender? For DAOs, why not DefaultDAO or JpaDAO or SqlDAO? This is better than "Impl", which tells you nothing (of course its an implementation), but "Default", "JavaMail", "Jpa" or "Sql" tells you something about the role of the class in the system, why it exists and what its dependencies might be. The "Impl" pattern for concrete classes is just the opposite of the "I" pattern for interfaces. Equally redundant.
You can inject factories, which is presumably what this example could represent. You don't need a "factory factory".
Yes. And if you think you do, you might want to have a ConfigurableThingFactory or a ThingFactory that uses an build strategy or something.
http://www.mkyong.com/java/jaxb-hello-world-example/
You're doing yourself a disservice by not giving it a fair shake. My only headache was migrating existing projects, and that was not a huge ordeal. Make yourself spend a couple of days with it for a new project just to get the swing of things, especially if you already have a license.
Came here to say this.
Thanks, but I looked at that already and it helped me learn. But it does not help me with an xml that has sub-roots.
There's a search bar on the right side of your screen. [Here you go though.](http://www.reddit.com/r/java/search?q=book+selftext%3Abeginner&amp;restrict_sr=on&amp;sort=relevance&amp;t=all)
My current application is full of time calculations and Joda is not on my radar; Hint: In some cases it might be useful to use the mutable versions of Joda Objects, so that you don't loop and create too much new instances for nothing. (see MutableDateTime, etc).
I just have one data point. I had lots of stored instances of DateTime in memory, and when I converted them to longs, the system memory dropped dramatically. May be it was the version I was using... this was a year or so ago.
there is a checkbox to toggle searching the current sub or all of reddit.
In my enterprise environment, `*Impl` means `Default*`, and Default is longer, and the implementation is now far away from the interface in almost any listing. that being said, I also support `Default*` if there is only one (or it is the default), `Base*` if it is the primary one that may be extended, and of course our old friend `Abstract*`. &gt; The real problem with these "enterprisey names" is not that they are so long, but that the right words have too many letters. &gt; &gt; \- me
&gt; the implementation is now far away from the interface in almost any &gt; listing How about in the hierarchy listing (Ctrl+T in Eclipse), which shows all implementations of an interface? Or when you filter class names (Ctrl+Shift+T in Eclipse), most modern IDEs will let you type something like "EmSen" and get all classes like that in the listing. With modern tools, these sound far more reliable than squinting at class names in a full listing.
I downloaded the code and messed around with it. When you create a shotgun blast, that blast is comprised of 8 individual particles. However, these particles (for some reason) share pos.x and pos.y values. As the particles are updating (Shotgun.updateWeapon()), this means the final location of the particles are adjusted 8 times, with respect to each individual particle's theta. Due to all 8 theta's remaining constant, the bullets will all travel in the same direction without any deviation, the "true" theta thus being an average of all 8 individual thetas. When one removes the for loop, this prevents individual particles from updating multiple times in the same frame (because there is only 1 particle in the first place), which makes the speed appear significantly slower. Adjusting the speed of a shotgun particle to 8.0 (that of the assault rifle) makes the bullet travel the same speed as the Assault Rifle particles normally do. **TL;DR** : Shotgun particles created in the same fire() method share x and y values. The error is either in your design of the Particle class or (more likely) in the fire() method. I'll post the solution in a comment immediately below if you want to try to take this information and fix it yourself without getting the solution
The Solution! (Spoilers!) In the fire() method of the Shotgun class, when you create each individual particle, you send the particle class its starting position via a Point2D.Double object. However, you're using the same object for each of the particles! This can be fixed just by replacing this.particles.add(new Particle(theta, Shotgun.PARTICLE_SPREAD, 1.0,(Shotgun.PARTICLE_LIFE / (int)Globals.SLEEP_TIME), pos, new Dimension(5, 5))); with this.particles.add(new Particle(theta, Shotgun.PARTICLE_SPREAD, 1.0,(Shotgun.PARTICLE_LIFE / (int)Globals.SLEEP_TIME), new Point2D.Double(pos.x, pos.y), new Dimension(5, 5)));
Most of your points have little to do with TDD in my opinion - they are extremely broad... as you state in your first point. Most of it is certainly worth considering.
I was beginning to suspect this was the issue. This is why Java's automatic pass by reference for objects is incredibly annoying sometimes. Thank you so much for your help! I've been working on this problem for seven freaking hours now and I was about ready to pull my hair out! EDIT: I did just look at the solution, but would have figured it out on my own anyway because I suspected something being passed by reference was the problem early on, but couldn't quite think of which variable might be the problem. THANKS AGAIN!
Alô comunidade
I recently "upgraded" from preRenderView to view actions and have had no problems with it. On the contrary, the code is much cleaner now due to missing postback checks and implicit navigation.
Same here, such a small thing but makes a lot of difference conceptually :)
I want a FindBugs plugin that checks that all public methods have Guava Preconditions.checkNotNull() checks for all method arguments not marked will @Nullable. 
look at this https://gist.github.com/tonetheman/6203337 see if that helps
In the actionPerformed function call JTextField.setText(""); If you want to know how to use buttons check the tutorials. edit: I dont know if you know how to use buttons but checking the java api and tutorials will make a lot of things more clear without needing to ask about it :)
 final JTextField textField = new JTextField ("default text"); JButton button = new JButton ("clear text"); button.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { textField.setText(""); } }); 
Use lombok with @NonNull and @AllArgsConstructor or @RequiredArgsContructor and wrap anything that can be null or is optional in a Guava Optional. No more NPE's. Edit: Even if this isn't feasible for your past code, you should def. use lombok with de-lombok for future projects. Never having to write getters, setters and constructors, or perform null checks on constructors, and write lazy evaluations with a simple annotation is great.
Something that made JavaFX or Swing programming more like Android programming. Like using android's folder structure and resource generation, but in Swing. Plus activities and intents and stuff. Or maybe a SymmetricDS (database syncer) plugin that synced your db with Lucene/Solr. Or synced with a data warehouse and understood some common data warehouse patterns. Or a very lightweight SymmetricDS that ran in the browser as an applet and talked to sqlite. 
Debugging parallel aysnc programs where state machine is in the parms. If you want to build a debugger specifically for this, that would be helpful 
What's hard as a Java programmer? Sorting through, ranking and eventually choosing one of the 10,000 variations that already exist of every imaginable tool. Seriously.
How about just making phones powerful enough that we can all use Swing or JavaFX to make Android GUI's?
Biggest pain in the butt? Hipster programmers whinging about how bad Java is and how &lt;other language&gt; is so much better. Maybe make a tool that detects this and nukes them from orbit.
I think what your referring to is progress. Please don't make a tool that stops progress. Also I suggest you go try what the hipsters are talking about once you learn it you'll be on their side.
Our codebase never uses null except where required by 3rd party libraries. We use Optional extensively. Part of the discipline about not using null however is precondition checks on public methods that will shoot dead a null on sight. Sometimes people forget to put the Guava preconditions checks in (code reviews help to pick them up) so having a FindBugs plugin that detected it automatically would be great. I think it would be a pretty simple plugin to write, but I'm time poor. 
A free profiler better than visual vm.
Can you give me a example kind sir? 
The comments on the post try to point this out, but the title here should really state this clearly - this is not "HttpClient with SSL", but "HttpClient that ignores all SSL errors". Using this will completely negate any protection that the client or server receives from using SSL.
And this is what lombok buys you with the @NonNull annotation. Couple this with immutable objects and use fluent APIs and you don't have to hand check for null anymore.
Solved it. Generated different JaxB annotated classes instead of trying to have one single grand-everything class.
Here is some sample code. You'll have to fill in the details where there are comments: public static void main(String args[]) { int sum = 0; int count = getNumberFromDialog("Enter the number of numbers you would like to average"); for (int i = 0; i &lt; count; i++) { sum += getNumberFromDialog("Enter a number"); } // Now display a dialog with the average (sum / count) } private static int getNumberFromDialog(String title) { // Display a dialog with the title provided // Return the number entered by the user }
How about an infinite loop detector? Those seem to get through most debuggers.
thank you now i will have a starting point.
I wanted to be able to detect incoming calls .
Chapter 19, “Remoting”, we will first go through the basic concepts in remoting and then go on to the support provided by Spring. We will then go on in detail to cover the various remoting technologies which Spring supports in detail.
You'd like to solve the halting problem?
Depends on the tool. I'd argue that several of the hipster languages, e.g. ruby, are poorly made at best.
It's impossible to solve the general problem of whether or not a loop will complete.
Open source New Relic.
http://types.cs.washington.edu/checker-framework/ That, and a lot more, could be found at /r/javapro.
If you're already past all the "learning java" type books, read this: Effective Java: http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683 
Search the subreddit for one of the zillion "recommend a book" threads, please.
Books are great, but learn about garbage collection (why Java is different than C++). Learn data structures, such as when do you use a Vector versus a HashMap. Most importantly learn about interface-driven contracts, pre- and post-conditions. Then abstract classes and normal classes will make a lot more sense. Also read Java books about OO patterns. It's amazing how convoluted solutions can be solved with a simple pattern (e.g., using a visitor to traverse a non-linear structure with a complex object graph). Also: practice, practice, practice. Double Also: work with people who have more experience. Swallow your pride and embrace that you "don't know what you don't know."
I work in data mining / BI and a lot of stuff there is still Swing: RapidMiner, the Pentaho Suite, Lucene's Luke, etc. 
I always assumed it was for running without a monitor (headless). Perhaps it outputs somewhere instead of stdout?
It's when you have no GUI, so awt and swing are not available. 
&gt; long as you don't run into bugs I guess. I would be amazed if you ran into bugs - it's been through 37 updates, so my guess is it's extremely stable. (can't say anything about the browser plugin, of course.) 
It's clear that Microsoft is taking its commitment to the cloud seriously. EDIT: Not trolling, I swear. I'm not sure why you would think that I am. I only assume it is because you are thinking about recent security vulnerabilities in the Java browser plugin. But the browser plugin is completely irrelevant to a server environment, where the Java Runtime is both very secure and currently (in my humble opinion) king.
It's clear that you are a troll. Now go away.
I am no such thing - I meant no irony or other forms of funny business. Think about it, if you take your biggest competitor's product (in the managed runtime/programming tools space) and make it available on your cloud platform right next to your own pride and joy, it's because you are really serious about that cloud platform - more serious than you are about the managed runtime.
Well I dunno, it's a long time ago I was on JDK 6, but the OP thinks there's a major bug in JDK 6...
&gt; With my current school work load I don't know if I can devote the time necessary to achieve a satisfactory grade. This is the problem. No amount of tutoring or guidance is going to mitigate the time necessary to understand the core concepts of Computer Science (and as a result, programming.) As a CS tutor, I strongly urge you to either A) defer course load so that you can put in the time required to pass the course successfully or B) defer the course itself, learn the material on your own time, and attempt the course later.
YAZAA? yet another zeroturnaround advertisment account?
Unless they're identical to and cheaper than cloudbees, no thanks.
Are people even using that thing?..
Shot ya a PM, if you are interested I'll help tutor you.
Yes, seriously. A ranking of frameworks/libraries, including popularity, ease of use, bugs, etc. Same for tools. Not sure how you could do this (or perhaps it already exists).
There needs to be more visibility into application security in the java world! Aspect Security!
Azure leaps into 2007.
You are right. A good quality and professional library is another important thing. Luckily Java has that covered with Java EE! :) Stuff like CDI and Bean Validation rules :D
Azure or Java? :D
In the brief time I spent with it, I'd say it certainly warrants consideration. 
SHOTS FIRED
Their example of using map.average() doesn't even work with the JDK they link to, this tutorial shows it correctly though: http://www.dreamsyssoft.com/java-8-lambda-tutorial/map-reduce-tutorial.php 
This looks like a job for...FAQ! http://www.reddit.com/r/programming/wiki/faq
So this is an exercise for the author to learn about HTTP..?
From the [README](https://github.com/dkuntz2/java-httpserver#java-httpserver): &gt; "there really isn't a nice, easy to integrate HTTP server available for Java" No? [Jetty](http://www.eclipse.org/jetty/documentation/current/embedding-jetty.html) is quite straight forward? public class HelloHandler extends AbstractHandler { final String greeting = "Hello world"; public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException { response.setContentType("text/html;charset=utf-8"); response.setStatus(HttpServletResponse.SC_OK); baseRequest.setHandled(true); response.getWriter().println("&lt;h1&gt;" + greeting + "&lt;/h1&gt;"); } } Server server = new Server(8080); server.setHandler(new HelloHandler()); server.start(); server.join(); 
Some good stuff there, although I suspect that most people that use Eclipse know most of them already. One tip if you use multiple workspaces - use [Google Workspace Mechanic](https://code.google.com/a/eclipselabs.org/p/workspacemechanic/) to set any preferences that you want shared across all of them.
I think my favorite is Editor -&gt; Content Assist -&gt; Favorites which makes using static imports a whole lot easier.
"Java is dead/dying."
All things i18n related PMD(or Maven or Ant) plugin for spell checking. English is not may language and I make lots of mistakes. But I want it to be clever enough to understand camel case as word separators (so AbstractClientManager is good, but AbstractClientManagr is not ), and existing classes/methods in used libraries are also valid words (so println is valid too). And also, an easy way to include a list of valid words AutoI18N: You have a property file with externalized strings in one language, goes to google translate/babylon/whatever and generates a (first draft) in other languages. Eclipse plugin or something like that Translation validator: check in compile time that every time you look for a message resource it is present in resource files, and every message resource is used somewhere 
I didn't see that quote in the article and I also did a browser search on that page for those words.
You're extinguishing the jerk.
I don't think spelling is on by default. Also I use it when I write comments and help files.
And yet everyone and their moma cites it to prove "x language is better than y language". smh
There might be an "/s" missing.
"Better" Are you 2? How about specifics? Go ahead. You'll lose the argument.
Far better for whom? Language aesthetics are trumped by practical benefits: &gt; There are only two kinds of languages: the ones people complain about &gt; and the ones nobody uses Bjarne Stroustrop
"fuk_offe is shithead/troll."
I hasn't seen jetty, but just looking at the index of their site, it seems slightly more complex. The handler determiner and the action inside of the handler determiner are the main difference that I can see.
Yes and no. The goal wasn't to learn more about HTTP, but to create a better underlying system for Storyteller (which lead to learning about HTTP). We than thought that it was an okay system and that others might benefit from it.
clearly the "'s did not convey the sarcasm.
Scala and python do have excellent qualities that java doesn't. I would disagree that either is a better language. Native closures, first class functions, declarative features while keeping backwards compatibility with java's imperative nature, operator overloading. Honestly we need a java 2 which isn't backwards compatible to come along and fix a lot of legacy issues with the language. * Make functions first class values * Add in stack struct value support separate from classes * Add unsigned integers to both the language and JVM * Fix generics both in the language and the JVM (So the JVM doesnt throw out types) * Make interfaces into trait contracts rather than polymorphic parents. * Make primitives into pseudo objects and remove wrapper classes(subsequently improve generics and containers for this) * Better support for Closures (JDK8 doesn't cut it) 
&gt; Scala and python do have excellent qualities that java doesn't. Of course. But what do these qualities have to do with why Java is chosen over languages that have qualities that Java doesn't? &gt; which isn't backwards compatible And no one would use it (so to speak). Sun and Oracle's commitment to backwards compatibility is one of the key selling points of Java the language. All advances in the language are made based on not breaking existing code, which is substantial, and which is why the language evolves at such a slow pace. What is to become of all that existing Java code? Scrap it in favor of this super duper language that looks nice *now*, before it's been battle tested over decades? Non-starter. At least Scala integrates with the JVM. But Scala doesn't have the reputation of backwards compatibility that Java does. Typesafe has been going through some growing pains evolving the standard library, releasing updates which have broken existing code. Not to mention that maintaining a dual-language code base with completely different languages adds a lot of overhead.
The latest Jython has very good performance baselines; meaning python code seamlessly integrates onto java platforms. 
but i was so close!
* Scala has significantly less boilerplate code than Java due to features such as type inference. For example, declaring an immutable point class in Scala simply involves typing in the following line: class Point(val x:Int, val y:Int). Doing the same thing in Java would take a minimum of 6 lines of code. * Scala's support for functional programming and use of first-class functions is really useful. val res=numbers.foldRight(0)((a,b) =&gt; a + b), while doing the same in Java would require a for loop. * Scala can use any existing Java library without any extra configuration. For example, the code add all the elements of list in Scala is: The problem with Scala is that it can be very confusing due to the fact that there are often multiple ways of doing something. In that case, Python is a better choice. http://blog.furiousbob.com/2011/06/21/why-moving-to-scala-part-1/ http://pythonconquerstheuniverse.wordpress.com/2009/10/03/python-java-a-side-by-side-comparison/ http://www.programcreek.com/2012/04/java-vs-python-why-python-can-be-more-productive/ 
you people can keep saying that, but nobody agrees with you. 
Almost anyone who is writing code. Scala is a great language except for the fact that it can be somewhat difficult to learn. In that case, Python is a better choice. In my opinion, Android development is the only place where people should consider using Java.
By "critical niche", do you mean web development, mobile apps (okay, Android's not officially Java®, but close enough), embedded devices, or something else? It may have lost some pastiche compared to the new kids, but it's used in plenty of places for a variety of workloads.
I agree this isn't really news because they have been trading back and forth for a long time and will likely continue to do so. I have never seen much reliable evidence that Tiobe is particularly inaccurate though. Compared to what? When I see other more measures, they often seem to largely back it up.
Every TIOBE submission has something like this as the top comment so at least its being policed. I like the TIOBE, but for sparking discussion of up-and-coming languages. Java's not going anywhere any time soon and neither is C so whatever one is getting more hits at any one second isn't interesting. 
You are pretty spot on. I say this as someone who adopted Scala over 2 years ago and haven't looked back. What I haven't adopted is the Scala ecosystem. I use zero scala libs beyond the scala standard lib. I used it for scientific computation - I had no trouble dropping into imperative patterns and usage of arrays rather than scala collections for the machine learning routines. That part of the code is miniscule in comparison to the rest. Scala swing is awesome even if it is incomplete. But, I can't take scala too seriously due to all the breaking changes and the wonky decisions so many scala developers make when designing their apis.
www.jetbrains.com/idea/features/compiler.html#Intelligent recursion analysis$('#link6')
Agreed, this should come with a big disclaimer at the top. He does note this at the bottom, though: &gt; An important thing to understand however is that this strategy entirely ignores certificate checking – which makes it insecure and only to be used where that makes sense.
It was a "yay java" conference and you're surprised at the non-answers? I do find it infuriating when someone releases something and ignores any criticism or possible faults though.
I was pretty surprised by those answers. I mean Java has it's faults even the sellers should at least acknowledge them.
I was surprised at the non-answers to be quite honest, but I was pretty surprised to hear that from a guy who has been on Oracle for 13 years :/
So, they want people to help them with the next specs, huh? After what they did to the community during the OpenJDK fiasco a few years back, I am still surprised why ANYONE would give them ANYTHING without an explicit condition to make the whole platform open and free (as in speech) in return.
really?! life's not that bad.
"Scala has significantly less boilerplate " Sorry to hear that you're paid as a transcriptionist. I'm a developer. "Scala's support for functional programming" Which exists in Java 8 so...... "Scala can use any existing Java library" Er yeah, so can Java. Basically Scala is finished once Java 8 comes out. There's no reason to use it. Anything else? 
I only knew about the OpenJDK because that's the alternative that gets mentioned the most when you ask around, to running java apps on linux, what happened?
Fix cloneable
Technically speaking, Java 8 does not support first-class functions or higher-order functions. The lambda body is translated to an implementation of a SAM type. Java 8 supports many functional idioms, but Java is not a functional programming language. Scala, on the other hand, treats functions a first class language feature, although implemented as a SAM type, since it runs on the JVM, after all. Also, Java 8 has nothing like Scala's comprehensions. Also, Scala supports tail recursion, which automatically translates recursive calls at the tail position into iteration, another feature not found in Java 8. Java 8 is a very big improvement, but it is not a Scala killer.
oh man. Always check the subreddit before opining. Not that you are wrong or right, but you don't say java is dead in /r/java. There's a lot of java shops and inside of them, everything not java is dead. It certainly has enough useful killer apps to be around for a long time. Especially in IR and Big Data.
I thought the quotes were pretty obvious for sarcasm lol
What Oracle office was this? They've got loads all over the world, and multiple in the US. Maybe it was a tech guy answering and not a sales guy?
They aren't allowed to tell people old versions of java are bad/insecure that is probably why they gave a shitty answer on how to convince people to use the new one.
You know, one of the things they showed us was a particular video where supposedly people didn't rely on java anymore and all the banks systems and whatnot crashed. All because people didn't wait for a new patch to be released. I think it might be on youtube but I couldn't find it
Maybe, but none of that actually matters. Pure functional languages are not so useful for general purpose software development. Just like pure structured languages like Pascal were not so useful and pure Object languages like SmallTalk were not so useful. Functional is a technique. It's not the be all end all. Realistically Java devs will adopt the functional techniques in Java 8 in lieu of the pure functional approach of Scala.
Or you could just use java...
Perhaps, but what you said: &gt; "Scala's support for functional programming" Which exists in Java 8 &gt; so...... Isn't exactly true. Also, Scala isn't a pure functional programming language. That is actually one of its strengths, that it is a multi-paradigm language.
&gt;I have never seen much reliable evidence that Tiobe is particularly inaccurate though. Compared to what? Fair enough. Maybe slightly biased then? Two languages could have a similar number of programmers worldwide, but one would get more exposure on TIOBE if its users tend to do more Google/Reddit/etc. searches than the other.
It's not the "alternative" it's Java now. Period. Official java is built from the OpenJDK project now.
&gt;But it should be the duty of anyone learning to code, to learn about the things they're making so we can have better technologies in the future since we would be cooperating to create the next big thing in programming. Yes, it absolutely should be. Otherwise you will create another PHP.
Link please? or name at least
Trailer for Javapocalypse if memory serves me right. 
http://youtu.be/E3418SeWZfQ You are correct, thanks!
Actually there are two strong initiatives for the community of developers to contribute to specifications. http://adoptajar.java.net and http://adoptopenjdk.java.net These are community developer lead programmes to help ensure that future specifications work for *us* the developers.
Thanks for raising this! Sadly I think you just ran across a pretty poor representative from Oracle. I've spoken to many other Oracle folks (especially those who are involved in the core Java and Java EE technologies) and they would most certainly not give those answers (which I agree, are pretty darn terrible). I've forwarded your post to a few folks in the Oracle/Java camp - this sort of nonsense just harms everyone concerned.
That's the trailer for JavaZone, which is a conference. They always make funny trailers and good on them for doing creative marketing.
Sure, and the Toyota Corolla is the most popular car in the world. 
Well the guy who answered questions was just some guy at Oracle with his POV I guess. I don't expect Oracle to tell me how to migrate from Spring though so that answer was kinda okay except that he hinted that "it's good for java". I really like the standard stuff and keep to the standard whenever I can because I respond well to multiple implementations and since EE 6 the standard is pretty neat.
I don't have any evidence for this view, but I find it hard to believe that Objective-C was the third most popular language in August 2012 and is now the fourth most popular language. http://redmonk.com/sogrady/2013/07/25/language-rankings-6-13/ This site ranks Objective-C ninth, which I find much more believable. I mean does anyone use Objective-C besides OS X/iOS developers? And wow is Objective-C's syntax ugly...
When I needed to develope 32/64-bit application in 64-bit system, I tried to install Oracle's database drivers for .NET. Only once. Never again. (I just did give up and continued using .NET Frameework obsolute Orace drivers instead (at least they did work)). At that time their "universal drivers installation package" was universal disaster package - I hope it is better these days.
IBM is notorious for writing some of the worst parts of Java. Calendar and EJB come to mind. Over the course of the JCP IBM has often proposed alternate specifications which are usually a lot more complex in the astronaut architect kind of way. A recent example is the module system. The original proposals were small simple changes proposed by James Golsing and Joshua Bloch but have turned into the IBM OSGI monster we're dealing with now and have been waiting years for. The simple proposals could have made it into Java 7.
By any chance those oracle database driver's were for PL-SQL and MySQL?
The Oracle/Java camp, never heard of that one before, but thanks for forwarding the message :D
The IBM-Sun/Oracle Java feud - sometimes friendly, sometimes not - goes back over a decade, and IBM is hardly innocent in the matter. The Eclipse name is one example (hint: Sun was still a company at the time). Source: I interned at the IBM subsidiary that open-sourced Eclipse.
interesting site. Personally I would have far less confidence though in using Github as an input than tiobe and its search analysis. I think Github would naturally under represent languages used more frequently in commercial environments. I do share some skepticism about Objective C. On the other hand, I personally know a few people working with it and it is showing up more in companies I work with more than say ruby or python. A few years ago, I never saw it professionally at all. Now, it is around though entirely for iOS development. The oddest thing to me about the tiobe rankings is their placement of javascript. 
&gt; Can we create instance of Enum outside of Enum itself? If Not, Why? The "why" part of the answer isn't entirely correct. Yes, the constructor is not allowed to be declared public, but a default constructor is still accessible within the package. The full reason is that calling an enum's constructor is [explicitly disallowed](http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9): &gt; An enum type has no instances other than those defined by its enum constants. It is a compile-time error to attempt to explicitly instantiate an enum type 
7u21 and above increased the restrictions for applets, look at this table: http://docs.oracle.com/javase/7/docs/technotes/guides/jweb/jcp.html#security
**Full disclaimer** I'm responsible for Java EE evangelism at Oracle. First of all, let me apologize that you had such an experience at Java EE event at Oracle office. Seems like a junior engineer was involved in responding to the Q&amp;A. Java EE platform would not be possible without Red Hat and IBM leading critical JSRs, 187 Expert Group members from 32 companies, 20+ Java User Groups that contributed through Adopt-a-JSR effort, everybody who downloaded the nightly and promoted builds of GlassFish, filed bugs and gave feedback, and everybody else who contributed in all possible manner. We all make jokes about each other at public appearances but always thankful to them in all honesty and transparency. Let me attempt to answer your questions. &gt; Q. How do I convince my direct supervisor to change from Java EE 6, Spring to Java EE 7?, even with the advantages I find it extremely difficult to change his/her mind. I authored an [extensive blog](https://blogs.oracle.com/arungupta/entry/why_java_ee_6_is), with tons of comments on it, that explains why Java EE is a better option than Spring. Having said that, Spring has fulfilled the gap pretty well while Java EE has evolved significantly in the past few years. Now that Java EE is a much better offering IMHO, there are devops and other concerns that makes the transition much harder. We are seeing a dual strategy amongst the customers and community where legacy applications that were built on Spring continue to live on that but newer applications have started to realize the benefits of Java EE and modern application servers. There are 18 compliant application servers for deploying your Java EE 6 applications. GlassFish is the only Java EE 7 compliant app server today but Wildfly (nee JBoss) has announced plans and Tomcat has already started making progress in that direction too. You'll be investing in Java EE 6/7 for future-proofing your investment and continue Spring development for any legacy applications. Another important point, as somebody else also mentioned, is that you need to start learning these technologies now. So that when WebLogic, Websphere, etc are available then you are ready to take advantage of them instead of waiting for them to learn at that time. &gt; Q. You released a lot of technologies this time, some work for certain kinds of tasks some for other. BUT I don't have the time to learn them all, what technologies would you say, these are the ones to help me in the near future regardless of any possible change? It really depends on what you are using today. If you want to learn something completely new then take a look at WebSocket, JSON, and Batch Processing. If you are using JAX-RS 1.0/1.1, then lots of new functionality has been added to 2.0 such as Client API, async client/server, filters/interceptors and start leveraging them in your application. if you are using JSF 2.0 today then you start identify new features that are introduced in JSF 2.2 such as Faces Flow, Resource Library Contract, and h:inputFile. If you are using JPA 2.0 then start learning about schema generation properties, default JDBC resource, stored procedures, functions etc in JPA 2.1. If you like creating your own threads then take a look at Concurrency. If you are on Java EE 5 and not looked at CDI yet then definitely take a look at that. Java EE offers lots of choices and combinations and its all about what you want to learn and be successful in your projects. &gt; Q. Why does this particular technology (can't remember the name of it) It's pretty slow and it's such a memory hogger Seems like this is referring to Batch JSR. As I said earlier, can't thank IBM enough for leading this JSR to completion. This was a gap in the platform for many years and given IBM's expertise in batch processing, they were the ideal candidates for this JSR. Now leading a JSR is a quite resource sink with a spec lead, implementation team, TCK, and lots of other coordination. The Java EE community is pretty pleased with the outcome of JSR 352. If you have any specific issues around memory, I'd suggest to file a bug at [https://java.net/projects/jbatch/](https://java.net/projects/jbatch/). Or you can always tweet me at @arungupta. I've worked very closely with IBM spec and implementation leads and can convey your feedback. &gt; Q. How can we help for the next java specification because If I'm honest I don't have knowledge of certain things such as compilers and some of the underlying technologies, hell I barely understand how to create things without a wizard helping me along the way? This is definitely an area where we seek lot of external contribution. There are lots of ways you can contribute to the next Java specification. First of all, all the Java EE JSRs are run transparently. That means their Expert Group discussions are completely open, anybody can file an issue on JIRA, download interim spec drafts, and lots more. This is a requirement by the Java Community Process. As an individual you can JCP at no cost, and then join an Expert Group. If you don't want to join the Expert Group (because of time constraints or some other reason) then you can join the public discussion list and start monitoring the discussions there and contribute. Lots of folks make a significant difference that way. If you think a particular usecase is important to you and is not served by the JSR, file a JIRA issue on the respective spec page. For example, Java EE spec is tracked at [http://javaee-spec.java.net](http://javaee-spec.java.net). 20+ Java User Groups, from all around the world, contributed significantly to impact the Java EE 7 standard. They participated using Adopt-a-JSR effort. So if you are not a member of JUG then I highly recommend joining a JUG and motivate others to contribute as well. You can read all about this [here](https://blogs.oracle.com/arungupta/entry/transparency_and_community_participation_in) . Feel free to reach out to me at arun . p . gupta @ oracle . com if you have any more questions or would like to share more details. 
Many thanks for the answers, I'll be sure to share them with a couple of guys that I got contact with. Giving you an upvote for all the detailed information and understanding of this situation. Thanks a lot kind javaee_dude
Sounds very cool, keen to see how this pans out. Good luck to ya!
Sounds good! And as I said, we are here to help, feel free to reach out!
Forgive my ignorance, but isn't this essentially a trie?
Guru question: Given the following enum can you create a situation where Fruit.Apple != Fruit.Apple? enum Fruit{ Apple, Orange } Hint: It involves class loaders and is the same reason why singletons in java are not always singleton.
Depending on the return value of the ordinal() method would be inherently unsafe. This is documented accordingly: &gt; Most programmers will have no use for this method. It is designed for use by sophisticated enum-based data structures. 
Also, I haven't finished testing the heuristic search so right now it works off of seed/leech ratios.
Agreed - a bit annoying that the [@Enumerated JPA annotation](http://docs.oracle.com/javaee/5/api/javax/persistence/Enumerated.html) defaults to using EnumType.ORDINAL instead of EnumType.STRING, given that using the ordinal value is such a brittle way of doing things.
first, what's the actual problem? 
wat
javascript != java. And HTML != javascript.
&lt;!doctype html&gt; and &lt;meta charset="utf-8" /&gt; are much nicer! :P
I thought Roo and Grails were simplifying Spring... kinda says something about a framework when it takes 3 (or more) to explain your framework. What happened to the simpler version of Java EE that Spring was supposed to be?
Currently reading Head First Design Patterns and I highly recommend the Head First collection. Their books are funny, entertaining and everything is explained intuitively.
Spring Roo is "rails create". Spring Boot takes a different approach, it doesn't generate code but instead lets you write a tiny one class app as a quick starting point, and expand it with all of Spring's de facto standard functionality as you realize you can simplify your growing program by doing so. Unfortunately there isn't anything comparable in the JEE application server license sales realm, as giving the developer that kind of independence would alter the commercial relationship between the companies which have bought the app server IP - and the developer.
Had a quick peak and I think you'd benefit from using Maven, splitting your test code to a different src package as well so that when you compile to a jar you only compile the production code. 
This looks like Spring's answer to Dropwizard.
Is OSGI considered bad?
It's not really unsafe unless you're an idiot. Which I guess is what the docs are trying to say.
I haven't heard much of Java command-line tools. Most tools you'll need are actually Maven plugins that you import and configure through your project's pom.xml. RubyGems and NPM are package managers, while Maven is almost exclusively a build tool, though it partially functions as a package manager when fetching libraries from the repository. The big difference here is that neither Ruby nor Node.js are compiled platforms, while Java almost exclusively *is*. Thus, most of the processing performed on Java projects is done *during* the build process.
Interesting, I had no idea locking had a special bytecode isntruction to it. I did know that java.util.concurrent used java.misc.Unsafe and native calls, but never imagined that synchronized blocks used a special native instruction.
Mono is neither feared nor reviled... Case in point, MonoGame. MS dropped XNA, gave the source code to the Mono team and said "have at, we're done". While I don't use it personally, I was extremely surprised to see how many indie games are developed/being developed in monogame.
Fantastic! But I still have a few questions. Can the java.home system property change during execution, and do I have to refresh it every time I check? Also that covers libraries, and resources but it doesn't cover custom JVM system properties like sun.java2d.opengl, or packages like sun.text.resources.
Umm... sounds a mix for something unpleasant on the way, The the things I can recommend for you to use are the following: * Read the documentations even if they are not complete, they will give you a general idea what is the system is about. * Read the database structure, and try to sit with the Database Administrator to explain what were the requirements on the database design. * Gather information from the available project members / team leader / manager / anyone was involved in the project that you can contact. * Use Java's classes/methods as the base to understand the code logic, and commit it when you are 100% sure to make it easier to maintain. * Use javadoc annotations as it would help in development using an IDE like Netbeans and Eclipse. * Use a source code management software like Git for easy rollback if the logic wasn't understand properly and big changes were made. * Expect not meeting delivery deadlines, as you are learning about the system and learning would take time. * Keep your supervisor (Team leader) in the loop, and update him about the status frequently, so he could help ease stuff if he can.
Well, there's Effective Java by Joshua Bloch, which every Java developer should have. But that's more for best practices, rather than getting into the language. Then there's Core Java Volume I and Volume II by Cay Horstmann, which are the pretty much the authority on Java for the experienced programmer.
http://www.reddit.com/r/java/search?q=Book&amp;restrict_sr=on&amp;sort=new&amp;t=all
I have tried to understand the DB structure and now i have a decent understanding. The project is too much into domain, on which i don't have any experience. The team has only two people,including me. And there is no one who asks my estimate for completion of task, everything is decided and i get to know that the task has to be completed within in X days.Which usually are very unreasonable estimates. How can i talk about this to my manager?
Coming from a background in C++, I really liked Head First Java. Not as dry as most other programming books, it has a very conversational style which made it really easy for me. I think after a week or 2 I was proficient enough to get two job offers where the interview consisted of writing applications in java. 
Pragmatic Programmer, while not Java syntax or reference material, is a fantastic book on best practices. I liken it to Effective Java a tad (which is also awesome)
Clean Code - by (uncle) Bob Martin
This book is my bible. I recommend this book to _everyone_. I get weird looks from the microsofties when I tell them the examples are in Java, but they all come back pleased they read it.
&gt; Can the java.home system property change during execution It's static, but may change if someone call System.setProperty("java.home", ... In this case your "implies" method will receive PropertyPermission("java.home", "write") and now you can return "false" to block the changes. &gt; do I have to refresh it every time I check No. &gt; but it doesn't cover custom JVM system properties like sun.java2d.opengl, or packages like sun.text.resources. Grant all permissions to rt.jar so it can read sun.java2d.opengl, etc. For other (untrusted jars/classes) create a whitelist of allowed permissions (jre/lib/security/java.policy contains example of safe permissions...)
IMO the gang of four book is a terrible read. If you're new to design patters then Head First Design Patterns is a fantastic book. 
Take a look at the source code and have a look at common "entry points", such as pom.xml (will tell you which libraries are in use), web.xml (in case of Servlet), Java default directory structure, and the main method. Further, I set break points on a program's main method, then I step-debug through the program to see what is happening. Such a code walk gives me a sense about the program's structure. 
I've encountered two major categories that have this property: 1. Churning out websites which have extremely short (say, two month) life cycles, like campaign sites. Unless the business scales up to tens of people, the overall cost structure for PHP or Rails is superior. 2. If the deciding cost factor is domain knowledge, and you already have good people well conversant in the domain, but experienced in delivering solutions in some other technology.
Make absolutely sure that you communicate your reservations in a well documented way up your chain of command. Structure your argument in business terms. In order to deliver, you need to connect this, that and the other thing. If you're unsure that you'll be able to deliver something in a given timeline, be very clear in stating so, and propose a way which would let you evaluate a task and give an interval estimate of minimums and maximums. Fundamentally this is the norm in the industry. Having to look after your own behind is the cost of doing business.
It is inherently unsafe because you have to track down all the usage of ordinal() through the codebase if you change the order of the Enums. This becomes even more complicated if you apply persistence. It is a maintenance nightmare. Even if you don't make changes to the Enums, the implementation is subject to change in the future.
That's an odd book title.
Sorta, if you want to use maven plugins 'globally' you can add a &lt;pluginGroup&gt; entry to your .m2/settings.xml so that the maven can resolve the plugin using its short name. http://maven.apache.org/settings.html#Plugin_Groups But again this isn't a package manager
Terrible as in just a bad book, or hard to get/more complicated than it needs to be?
Probably web based with no main methods though
Communicate that the code suffers from one developer syndrome (oneish) and that while it may be 4 days for feature x for that someone it's 14 days for you simple as that. Do a proper document listing all the problems with the code and why you have the concerns that you have. 
I work with a Java app that was started almost 10 years ago. Regarding code comments: don't believe them. Read the code. Often code is changed but comments are not and inaccurate comments can be very confusing. The first thing I'd do is determine the architecture of the code, if there is one. There are plenty of tools to assist with this. With the code being only a year old, it should be fairly straight-forward. Our older app has 3 different architectures which would be pretty hard to discern with a tool.
Thinking in Java.
It really depends on what you're doing with the ordinals. It's easy to imagine scenarios where renaming the strings also makes things fall apart. Stuffing ordinals into your DB would be one of those "stupid" things I was talking about.
I'm guessing downvotes comes from your hypothesis that Java is "inferior", without justification, and then asking *us* for arguments. That seems like a provocative thing to say on /r/java. Personally I think Java is the perfect tool for the job. Development is easy, there are many standards and frameworks for all needs, 15 years of accumulated experience by the industry, and there is no shortage of developers. I've got nothing, sorry :)
I think the closest to what you are looking for will be the Java Language Specification and the Java Virtual Machine Specification available for free at http://docs.oracle.com/javase/specs/.
So this, case doesn't cover the /usr/lib/jvm/java-7-openjdk-common/jre/lib/resources.jar file name. I'm not sure how I'd get that. Also, the ProtectionDomain parameter doesn't seem to carry any extra information for than usual.
I have head first, and Go4. Head first gives you good explanations, when and why to use the patterns, and code in java. It has a lot less patterns than Go4, instead focusing on the most commonly used patterns. Go4 has a lot more patterns, and a lot less real world examples. 
That was my first thought, too. I've been using Dropwizard in production for about a year and really like it. From an ops POV it's simple to deploy a single JAR file to multiple servers. It's really hard to beat for creating Java REST services. What I miss with Dropwizard is the fantastic Spring Data project and Spring style dependency injection. If Spring Boot gives me that with Dropwizard style deployment, I think I'm going to be a fan.
I have a similar background as you, having spent years working in C# and then making the jump to Java EE world. I wasn't able to find ANY "Java for C# developer" books out there... so... wanna write one with me? :) All the suggestions I've seen here are great reads, but it would be nice to have something that skips all the "hello world, this is a string" crap and gets straight to stuff like "Unsigned integers were deliberately left out of Java because James Gosling believed that programmers would not understand how unsigned arithmetic works". Edit: Copied that from wikipedia, which has a great article showing important differences between C# and Java: http://en.wikipedia.org/wiki/Comparison_of_C_Sharp_and_Java
Lol, yeah, I'm getting that after reading for 3 hours with these recommended books. Good stuff, but skipping a bunch. Book time.
I've been in a similar situation, several times. If you can, find a new job. * No proper requirements mean you never really know what you are actually building or when it's done. * No documentation means you'll spend a lot of time digging through code. * Critical deadlines and presumably no process will put you at the whim of whoever decides that something is done. "The critical deadline is Monday 8am. Too bad you didn't get all the vaguely defined tasks done by Friday night. I hope you planned on working this weekend." /u/StompingBrokenGlass has a really good list of things to look into. In addition to that, look into these things: * Check if there's proper source control and if all code is there. If not, prepare yourself for pain. * Whatever you do, do it in small iterations. Small changes mean less chance to break stuff. * Ask if you have access to testing environments. No having testing environments means you'll have a hell of a time reproducing bugs. * If there are tests of any kind, you're in a not too bad position. But be careful, tests can be awful too. * Then you should look into the release process, how do you get your changes out. If it's documented, or better, automated, it's good. If not, another sign to look for a new job. All these things can be fixed, but until they are fixed, you'll fight to get up to speed with the system and with the overall environment. Also talk to your superiors and project managers. Tell them you're struggling and that you're overwhelmed with the system -- which is perfectly understandable. Maybe they can cut you some slack and give you time to get up to speed and sort things out. If they don't understand, well, you get the idea... Good luck! 
The problem here is , the colleague who is in this project since 5 months is workaholic.For him one day=14hrs and for me 1 day = 8hrs. My colleague doesn't have any other activities in his life. He codes at office, he codes at home. Because of which the management except the same from me.How can i deal with this?
The timelines for tasks are estimated even befor i can have a look at them :(
It has a pom.xml, the problem that i am facing is the project is too much into domain and the code uses many domain related terms. And its getting difficult day by day!!
I also like Head First Java, it can be a little overly simple (it is meant as a first-programming-language book), but the conversational and incredibly cheesy style of writing made it really easy to get through, and the examples are corny but fun in their own right. I don't know that it's the **best** Java book, but it's one of the few programming books I can say I've had a bit of fun reading.
I would recommend followwing books,read them in same order * Head first java * Effective java * java concurrency in practice * Clean code * Refactoring 
Right, but this is synchronized externally to the hash map (put() is only called from within the synchronized block). Or is this not what is meant by the javadocs?
No other thread may access the map during the put. The basic issue is that the put may resize and call HashMap.transfer which rehashes the entire table, during which access is unsafe. Either synchronize all gets or just switch to ConcurrentHashMap.
&gt;No other thread may access the map during the put. Ah, that puts concisely into words what I was feeling but couldn't put words to. Thanks!
I had no idea either, but thinking about it now, it seems a pretty good approach.
Eh... I don't know, I'd rather have access to the building blocks used to make the synchronized keyword thing. Anyways, from what I could benchmark in my thesis, ReentrantLock has pretty much similar performance to synchronized blocks (within 0.5% of each other)
Mm, but the synchronized keyword does what is says on the tin: It provides a really simple way to synchronize either a block of code or a method. Out of interest, what would you prefer?
How about using a ConcurrentMap?
No. Just more complex than it needed to be.
That's correct, although you should just use ConcurrentHashMap because it does some magic behind the scenes that results in higher performance than manual synchronization.
I have a great deal of admiration for the Piccolo 2d framework. It's an outstanding piece of software. I've used it to prototype some personal projects, but never in anger. I recommend posting this question to the Piccolo 2d Google group. They are generally very helpful and responsive, at least they were a couple of years ago.
Interesting. Looks like a good introduction but I'm guessing there's a lot more in terms of customizing interaction with the api for more complicated situations.
Creating a site quickly is one reason not to go with Java and use something else. RoR and others can be used to quickly make a web site. Another reason is that you may not have the resources to run Java, so you have to use something else. Granted, this is probably quite rare in this day and age, but I did have to write code to serve web pages from an embedded processor with little RAM, so I know it can happen.
Why do you need to mock it? If you are giving the mock state then you can use a field elsewhere &amp; configure Mockito "Answer"s to respond to the getter and setter.
Other languages don't scale with demand. A rewrite back to java is expensive. The other langs are slow. 
NPM has build steps via its `run-script` settings in `package.json`. Ruby uses Rakefiles for build steps. But they all basically serve the same purpose.
Would this work for Java command line tools that are not Maven plugins?
And so? What's the bad consequence?
Amen brotha
hi there, It's not often one book, you might need to refer multiple book to get an expertise. Given you have substantial experience, it would be easy. I highly recommend "Java Concurrency in Practice" and "Java Generics and Collection", given importance of these topics. You may want to see couple of more titles in my blog post http://javarevisited.blogspot.com/2013/01/top-5-java-programming-books-best-good.html
I'd say your best bet is to set expectations up front. Always come in at the same time, always leave at the same time. Obviously, working a little extra during a crisis is to be expected; however, if you try to impress early up by working extra you'll find yourself working extra forever due to expectations. Be confident in your skills. If you can't get it done in 8 hours, that's okay. Pick it up in the morning and pride yourself on getting work done at work. If management gives you a hard time, then it's time to find a new job. I hate to say it, but that's sort of how it goes. The good news is that software developers are in high demand. Chances are, you're at least as good as anyone else they can get off the street. I have no idea how good your skills are, but as long as you're productive and getting things done without breaking stuff, it's a win for the company. After that it's just about how much they're willing to pay you for the service.
Good suggestion, but it didn't work. I updated my original post with an answer I found.
I think it's fine that way, I can't really complain :) ReentrantLock is pretty good already! 
As a developer, I love having a great tester. The whole idea of a tester is that the person has your back to ensure that nothing shitty gets pushed to production. It means you can create the code and not have to worry about every single use case scenario because you have a second set of eyes whose skill set is to think of all the crazy scenarios your software might be used and test it out or create use cases so that you as a developer can use as a base to ensure your code works with it. Obviously a tester and a developer only work if they are both good and rely on one another to get things done. It's pointless if a tester checks something and sends it back without an explanation of how something happened, is there any consistent way of recreating an issue, or gives a more direct point of view of how something can be improved in the UI by providing examples. Hopefully I'm just preaching to the choir in this subreddit.
I looked at spring rest for a recent project, but it didn't seem to fit my needs. In fact, I'm not really sure how it would fit anyone's needs as is. In what situation do you want to expose _every_ method in your CRUD repository as a public endpoint? How do you enforce security or per user access? How do you limit deletes or validate data integrity? You would need another entire tier in front of this before you could expose it to public users. I guess it's designed for internal REST services?
In any application, you would write code or configuration to do the things you mentioned. Reading the documentation would tell you how to do that. Just looking at a simple getting started project that has none of that is not an indication of what the tool will do. 
You should also check out Guice on dropwizard (one example of how to do the integration is here https://github.com/jaredstehler/dropwizard-guice). It took me a day or two to get comfortable with Guice DI coming from the Spring IoC world, but I really like Guice a lot (their worked formed the basis for the latest javax.inject approach). Also, Guice provides way more useful error messages than what I've seen from Spring. On the data side, if query DSL is what you've after, I like to throw jOOQ into the mix. I'll have to check out Spring Data for its NoSQL libraries, that world is a lot less unified than the SQL world.
Only situation I can think of ( one I'm in), one where you share premises with tightly related sibling companies but do not share servers.
Fundamentally there's nothing wrong with changing your job if it's awful. I sit in the interviews for java developers with my company, and I will notice short jobs. But if the interviewee can give me good reasons why he had to get out of the job, then this might even be a bonus. So before you decide to quit your job, assess the situation, especially the health of the project. The [Joel Test](http://www.joelonsoftware.com/articles/fog0000000043.html) is a good start (some of the points are debatable, especially 9 and 12, but you get the idea). If you can check off a lot of the points on the list, then you should definitely give it more time. However, if you find that you can only check off a few of the points, then you should definitely consider looking for a new job. The reason being that getting up to speed in a complex software system is already a huge task. It takes energy and effort to understand a large system. But if you have to spend even more effort to navigate a ill-managed project, than you can easily burn yourself out. One more thing to consider is how you yourself stand towards your work. I've worked with developers that couldn't care less about what they did. And I worked with developers that take pride in their work. The former will come in at 9am and leave at 5am; they could be an accountant or a baker. At the end of the day they just do their job without caring too much about it. The later, however, will come in and stay late to make their work better. They will read about the technology in their free time, will tinker with new technologies on the weekends, and will continuously try to improve their work and the project. For you it really depends where you stand on that scale. If you fall into the former category -- let's call them the "indifferent" ones -- then it won't make much of a difference if you stay or not. But it seems more like you fall into the later category, which I'll call the "engaged" ones. The thing about *engaged* developers is that they care, they care a lot. And if it's an environment that's open to change and improvements, then an *engaged* developer will strive and make things better, including process, tools, and the actual product. However, if it's an environment that's set in its ways, with managers that argue that things have to be done the way they have always been done, when there's no way to even discuss obvious flaws, then a developer will burn out. Badly. Here you need to decide where do you stand and make your decision based on that. To wrap this up let me tell you two stories. My stories. A few years ago I was brought on a huge project, that we took over from another group. We were a brand new team, and we were all *engaged* developers. We were eager to start and make a difference. However we took the project over from a huge team of *indifferent* developers and the project was a disaster. We didn't have proper source control, the process was so complicated and bloated that it puts most countries tax codes to shame, tooling was practically not existing, our environments were all unique and so unstable they had to be restarted every few days and kept running out of disk space, and the daily tasks were more like rituals that didn't seem to actually do anything. Every single release was a highly regulated and dreadful event that usually cost us days worth of overtime. We didn't release often simply because it was so painful. However, we as the new team were open to change, we embraced it. Within a year of hard work, we had taken over the project and things looked fantastic. We had a new streamlined process, we had our source code under control, I had written lots of tooling that allowed us to work efficiently, we even managed to get our environments under control. Two years later we were so good at what we did that we released and deployed to production whenever we felt like, and instead of days of planning it just happened within minutes. We had most of our tasks automated, and we did great work and enjoyed it. Morale of the story: if you see yourself in an environment that is open to change and gives you the freedom to evolve, then you're golden. It'll be hard work, but after it you will learn a lot, and your efforts will be recognized. Now, another story. A few years ago, I was brought on yet another project, that was in a similar state to the first one I described. Except the project was bigger, more expensive and had many more people on it. I was the only new person to be introduced to the project. And like the first project, it was filled with indifferent people in all positions. Most decisions in this project were shortsighted and fear driven. Releases planning was so complicated that it required days of planning by several people, custom JIRA plugins, and many many artifacts. The actual releases contained so many manual steps that a whole team had to be on standby late night and they usually broke things, so hot fixes had to be rushed which broke more things, etc. I was thrown into this environment, and I started to analyze and write suggestions what could be done better. Within a short time I became the guy that everybody hated, because I wanted to change the way things were done. Even just suggesting to actually check what we put into the release packages instead of blindly trusting the massive Excel sheets built by the project managers was considered an act of open rebellion. Within months I was so burned out that I had used up all my sick days for the year. The stress levels were awful and my health suffered badly from this. For various reasons I couldn't quite my job at that time, so I was stuck in this environment. Morale of the story: if you are a *engaged* developer and end up in a hostile, unhealthy project environment, run. Find a new job, because you will burn out. 
Yeah, so I'm very familiar with the Spring stack. I actually tried writing a REST service with spring-data-rest. I ended up using [Spring 3 Web REST](http://static.springsource.org/spring/docs/3.0.0.M3/reference/html/ch18s02.html). The core problem is that there is no place to implement your business logic with spring-data-rest. And I'm certainly not going to try to press that all down into my database layer. I've also done this using other Java frameworks like [Dropwizard](http://dropwizard.codahale.com/) and non Java frameworks like Rails. Let me give you a really simple use case so you can see the context of what I'm trying to explain. Let's say using the OP's example that I just want to make it so that an Author can only see his or her books, not the books of other Authors. In a pretty standard use case for a stateless REST service, you might have an authentication header with a token. The GET endpoint would read that header, validate that the token is good, and look up the correct Author account. With Spring 3 REST I can get access to this header really easily. @RequestHeader("x-auth-token") String authToken Similarly, I might want to make sure that an Author only deletes a Book he or she has created. To do that I would have introduce some business logic somewhere. Now, you might try to tell me that I need to use Spring Security and interceptors and aspects to accomplish all this using spring-data-rest, but that stuff is a bear to set up. And that sure seems to defeat the purpose of a simple REST service to expose your spring-data repositories. TL;DR There is no simple way I know of using spring-data-rest to simply validate who is accessing the REST service.
Just playing with Jersey here, are there any advantages one way or the other? Spring-data vs. spring-jersey?
It might be a bear to setup, it might not. I've used Spring Security in a number of different environments. I can imagine using it to secure the URLs and add interception. In my top level comment I hoped to convey that I also was left hoping for a "Part 2" where they would show how to integrate it with other Spring projects in order to do some of what you're suggesting. I haven't dug into it or prototyped, but I can imagine it would be doable. In fact, it might be nice to implement your security through Spring Security and keep it very much outside the scope of the MVC stuff.
Thanks a lot!! I took the joel test my answer is YES for 1,2,3,8,10,11 and NO for 4,5,6,7,9,12. The reason why i quit my previous job was there were no challenges for me and i was very complacent with work. I wanted a job that would give me an oppurtunity to learn. The work in my current company is really good.I am learning TDD and few new technologies/framework on which i have never worked on.I don't have any complain w.r.t work. The problem is,i need some more time to understand the system/code and later i can be productive.But no one asks for my estimates here, they only communicate the deadlines to me. And also i dont want to end up working 12-13 hrs a day(+3hrs of travelling to and from work).I like to spend time with my family too. I am planning to have a one-one with my manager on monday and open up to him about the problems.If he takes it positively, i think everything should be fine,else i will start looking out again. I have one more question, in your experience how much time do you think it will take me to understand the code? Some stats about the code *The code is in java,with plenty of jUnit tests.(the codebase has approximately 10K lines of code) *It uses generics heavily.(I just have a basic understanding of generics) *Too many domain related terms.(i am very new to domain) *usage of custom data structures,custom iterators. 
The "before" example here is ludicrous. Query query = session.createQuery ( "select from SampleObject " + "where number &gt; :number and groupName = :name" ); query.setParam ( "number", 4 ); query.setParam ( "name", "supergroup" ); List&lt;SampleObject&gt; result = (List&lt;SampleObject&gt;)query.list(); If you're crafty, you probably wrote something to get around the cast, like: @SuppressWarnings("unchecked") public static &lt;T&gt; List&lt;T&gt; list ( Query query ) { return query.list(); } So then the last line can be: List&lt;SampleObject&gt; result = list ( query ); Stop making shit harder than it needs to be to justify your library.
Like any other system of type checking, it prevents entire classes of errors from occurring, such as typos (as a simple example). The earlier you catch a problem, the cheaper it is to fix. It also will make unit tests simpler and more expressive as they are testing the goal of the query, not whether column names exist, etc.
I've done both. My background is in Aystem Administration / Software Development but for the last few years I've been doing Quality Assurance. It has been my experience that **good developers** appreciate and welcome critique and comments from **good testers**. One big thing I've learned to be true is "*If I have not seen something happen, it didn't happen.*" and to assume that everyone, developers, testers and managers are lying when they are talking about technical things. As I work with a any given good developer, tester or manager this assumption gives way to mutual trust and better software.
Thanks for the excellent summary.
Read both. Do all excercises. When you will be finished with these, read and code some more.
I doubt that the cast is the only thing that the library author wants to address.
Add to that, syntax-autocompletion in an IDE
I'm your private tester!!! Tester for money!!!
When I saw it, I immediately thought of those infomercials that show someone clumsily fumbling around with Tupperware.
I have been programming in java for the last 4 years as my main language, but I have to ask.. Is this your first language? If it is, why do you want to learn Java? If not, then I am assuming you want a tutorial on java specific things? (Just trying to get an idea of where you are coming from)
/r/wheredidthesodago 
I don't think reddit is the best place to ask that. It may be a place to look for answers but probably the best is [StackOverflow](http://stackoverflow.com)
Here are some [resources](http://www.reddit.com/r/javahelp/comments/13rm1w/please_push_me_in_the_right_direction/c76ntvv). [CS61B](https://www.youtube.com/playlist?list=PL-XXv-cvA_iCZphAM_CG499wyMaJh_6dW) is highly recommended.
No. Maven is aimed at distributing libraries for software builds, not typically for end-user use of the built product. It downloads the libraries for the build which normally bundles the libraries along with the product. That's not to say you can't do it. You could write a custom task to deploy jars to a specific directory. But there isn't a standard front-end command line to java in general, you always need to invoke the jar via the java binary. Typically people launch write scripts but that has cross platform issues as you need to cover all of the target OSs. Take a look at something like tomcat, it's bin directory is a good example of this. This is a major downside of java and one of a couple of reasons why desktop apps aren't very common. If the scripting issue is solved it wouldn't be too hard to use maven in this way. Simply nominate a directory in PATH to place the scripts and you are done. You could even have it read a run-time pom &amp; auto-download the libraries for the end user if needed. But there's a fair bit of work here and I wouldn't recommend it without having a good understanding of what maven currently does and what bits need added to turn it into a full-fledged package manager. 
I use OkHttpClient to get the headers, check for a 301, 302, 303 or 307 and that there is a Location header, if so I follow that manually for a limited number of redirects, when I finally get a 200 I grab the InputStream and pass it to JSoup with the JSoup.parse method. Each URL I follow I have a housekeeping algorithm to clean up poorly constructed urls. (I did have some success with javax.ws.rs.core.UriBuilder.fromPath but eventually needed more control and wrote my own).
Write a small class with a main method that dumps the system properties to a text file. Run it against all of your target VMs and you'll have a nice set of property files showing you what each VM see's here. I'd recommend sorting them by key name in the process. This will point you in the right direction for a lot of this stuff but bear in mind what konrad says about code being free to change these values. Most aren't supposed to be changed and the results of trying to change e.g. java.home are "unpredictable" at best. The safest thing to do is to capture the ones you want immediately on startup and keep a hold of them. A truly paranoid security manager could even verify the current values in System periodically for the ones it knows should not be changed. Anything messing with the class path or system variables is highly suspicious as many could be used to inject external code into the app. 
I've had success with JFreeChart, although it depends on what kinds of charts you're interested in -- Swing/client side charts? Charts generated in something like HTML5/PHP?
JFreeChart works quite well, although complicated stuff requires a bit of figuring out. I use JFC every day at work
I would agree with JFreeChart but if you are coding it in the web, you could use HighCharts JS. Pretty easy to use and user interactive to some extent.
Head First Java - 2nd Edition by O'Reilly, a great book with a nice flow of conveying the core component of Java. [Ebook here](http://uet.vnu.edu.vn/~chauttm/e-books/java/Head-First-Java-2nd-edition.pdf) [O'Reilly Book Website with Source code etc](http://www.headfirstlabs.com/books/hfjava/)
I've used JFreeChart for many things. Check it out
yes
It would break. The same as with a type safe queries except that if you store your queries in resource files then you can change them as well and not even have to recompile or refactor anything. Just saying.
[JavaFx has a few graphs](http://docs.oracle.com/javafx/2/charts/jfxpub-charts.htm) too that you might want to look at.
Do... people still create new web services using SOAP?
As everyone else is telling you, go with JFreeChart. It is by far the best and biggest for Java graphing. You can literally make any type of graph you want.
Actually it's a Japanese obsession over an annual film event. Football games and new year tweets are other reasons for twitter records. Marketing tweets, while present are merely part of the background noise - there's no reason for them to be more present on any particularly moment than any other.
If you don't know object oriented programming very well like topics such as inheritance .. then I would go through some of the reads in http://docs.oracle.com/javase/tutorial/java/index.html. I have never found a book particularly helpful when doing stuff. I find that the best way of learning something in programming is reading a bit of background information and then just doing a project. Don't pick a project that is to hard, and just do it. Its been years since I took the starting class at Purdue, but I believe that they have some projects that are android specific. If not, then it was just a rumor I heard haha http://web.ics.purdue.edu/~cs180/Spring2012Web/
For those who click on the link expecting a different kind of graphing: http://www.neo4j.org/
I see a lot of people mentioning JFreeChart, but I strongly recommend XChart (http://xeiam.com/xchart.jsp). Active development and open source, and frankly, a lot nicer looking. For constantly changing data sets (for a live graph kind of view), i've had good results with JChart2D
It depends what you mean by trie. Essentially, this approach constructs deterministic acyclic minimal finite state automaton. And if you define trie as a prefix tree, then it is not a trie. 
IBM, Oracle and other people keep selling SOAP based middleware, and enterprises keep spending millions of dollars on those, and making their development teams use it. I am honestly surprised that you thought people don't write new SOAP services anymore.
&gt; That’s one of our goals: to make sure Twitter is always available no matter what is happening around the world. A laudable goal but I doubt it's possible without much much more hardware. A global event like 9/11 would tax their servers far more than a TV show that's "big in Japan" could ever dream of. You could probably gain a measure of just how "crazy" the world is at any moment by monitoring the twitter response times!
I can only think on the one you have suggested: OutOfMemoryException which may be caused by No more Heap memory or not more PermGen memory. Code changes like JSP/Servlets doesn't require restart of the JVM, just test it yourself, start a Tomcat and change a JSP file, it will automatically compile it and will load the result class using a special classloader ( http://tomcat.apache.org/tomcat-6.0-doc/class-loader-howto.html ). Basically it all depends on how your Classloaders work and if you've setup your own or you're using the default Classloader. OSGi takes that to the next level by allowing you to load multiple versions of the same class dinamically without having to restart the JVM. So, as I said, I can't think on more scenarios were a restart is needed.
Thanks for your response. We are using IBM Websphere application server and the problem i faced in my recent product launch is, the changes did not reflect - changes were made in java and jsp files only. Restarting JVM worked. I do not remember restarting JVM in any of my previous promotions. I remember we used to restart when property files are promoted though. Any guesses ? Could it be problem with the application server configurations ? I tried an hour back on the same server and it did not reflect the JSP changes i have made.
I've seen situations where even a restart won't update it. Sometimes you need to locate the app servers deploy dir where it extracts the WAR file and manually clean out the remnants. Many years ago I wrote a test harness to auto-deploy J2EE apps to various containers so that the app could be tested against all of them on every supported OS. After much pain I ended up using a strategy where I'd do the following: 1. undeploy the app using the containers official procedure 1. stop the container entirely 1. clean out it's deploy dir 1. restart the server 1. deploy the app normally This was done against all servers. Websphere was one of the ones that had problems and it generally sorted it right out. In the end I developed a very low opinion of how useful their live-deploy features were. 
JAXB and JAX-WS standardized a lot of stuff which felt clunky in the past, and integrates easily in Spring and JavaEE applications. The IDEs I have used (Eclipse and JDeveloper) have nice graphic WSDL editor, TCP Monitor and SOAP testing consoles integrated. It got much easier.
Thank you all for your response. They indeed help improve my understanding. Will do some more research and update once i have more info on this. 
This sounds like our current dev, I&amp;T, and production deploy procedure on Glassfish. It's slightly better than Welogic where we'd occasionally have to delete the compiled ejbs too in some deeply nested obscure folder.
Did you at least undue ploy/redeploy the web app?
Yes, i have redeployed the app. I expected it to work with just this.
I'm not entirely sure this is true. The java memory model ensures that the synchronized method flushes the cache when it exits so the value would exist in the map. The value we're checking for nullness is method scoped and not shared/cached by different threads, which I think is necessary for the DCTL issue to arise.
"Global" events usually don't peak within 1/2h. After all, 9/11 was first a very local event. If by "global" you mean U.S. intervention in Afghanistan, that was food for tweets over several decades... I do think that this TV show event was quite exceptional, even for Twitter
I think that shows up because he has gatekeeper enabled. Which developer would do that?
Not sure if you are in a web environment or not but if you are I suggest Jasper Reports. It is extremely popular and can send your graphs right into Excel. If you just want some charts displayed in the browser PrimeFaces has a good charting library. www.Primefaces.org http://community.jaspersoft.com/project/jasperreports-library
Do a thread dump on the out of memory errors, there is a startup parameter you can use to do this, -XX:OnOutOfMemoryError="kill -3 pid"
Okay, this is to get information when OOMemError ? How would it help with JVM restart - just wondering. Thanks for responding.
Got it. Thanks.
Fundamentally, if you're asking this question, unless you're using LiveRebel and your developers are very familiar with the potential issues involving application reloading, you want to restart the JVM every time you redeploy in production. There are ways to do this safely using vanilla tools, but that requires putting quite a bit of thought into the process, which I would hope would have been documented and provided to the person doing the deployment. There are tools you can use to validate your code base to check if it's safe for simple redeployment in every scenario.
As a non-American I can say that the day of 9/11 was extremely global. It was the only story on all of the European networks all day. The traffic spike took down pretty much the entire internet, most major sites were offline for hours until they replaced their entire site with static html content. I was working for a networking company at the time and had access to various VPNs around the globe and despite having a room full of extremely talented people we had to resort to hooking up an over-the-air TV set to see what was happening. This was over ten years ago, back when most internet usage was through office PCs, I'd only just bought an early smartphone around then. A similar event today with mobiles, tablets and home usage etc would be significantly worse. This was a very good test for twitter and I'm sure their techs will be studying the performance stats to see if further improvements can be made but I don't think it's proof that they could handle a major political event. 
So, is this the latest blogspam account on /r/java? 7 submissions within 30 hours, all from the same domain...
Haven't used it much myself, but [IntelliJ IDEA](http://www.jetbrains.com/idea/features/gui_builder.html) has a Swing GUI designer.
I've used [Google Window Builder](https://developers.google.com/java-dev-tools/wbpro/) in the past, which is an Eclipse plugin to do WYSIWYG swing design. However there don't seem to be links for the newer 4.* versions of Eclipse.
Eclipse has a built in GUI editor.
Regarding the PrimeFaces suggestion, note that as well as the charts provided by Primefaces, there's also the [DynaImage component](http://www.primefaces.org/showcase/ui/dynamicImage.jsf), which simplifies outputting (for example) a JFreeChart image to the browser.
Ah, did not know. http://features.en.softonic.com/how-to-disable-gatekeeper-in-mountain-lion Now I know. Developer level up.
"Developer level up" in a more unsecure way ;)
Visual Age for Java was the best IDE I have ever used. I think it was written in Smalltalk. It was better than Eclipse or Netbeans or any of the current ones.
I wrote some library type program and put it on [google code](https://code.google.com/p/light-weight-graphing/). It is pretty basic, it outputs to svg or png, so I can generate plots and make them look nice in an svg editor.
SQL or esProc? how to make complex data process easier?
See the [HeapDumpOnOutOfMemoryError](http://www.oracle.com/technetwork/java/javase/clopts-139448.html#gdaog) option for generating heap dumps (and where they're stored)
For showing graphs, I use [Jung](http://jung.sourceforge.net/).
Take a look at Spring's RestTemplate
According to [RSS and Atom Support](http://static.springsource.org/spring-android/docs/1.0.x/reference/html/rest-template.html) section, such function is provided by [Android ROME Feed Reader](http://code.google.com/p/android-rome-feed-reader/), which is repackaged version of ROME.
What is your question about it?
"Could you do my homework, please?"
Maybe you get more answers on /r/gamedev/ or /r/androiddev, but here are some references I used. * Video Tutorials with LibGDX: [Dermetfan](http://www.youtube.com/user/dermetfan) * Kilobolt Studios released an amazing tutorial: [Kilobolt](http://www.kilobolt.com/)
You just have to play around with the class Random and implement some flux control. thats it !
Second this. The official docs give you a good introduction. And with the changes that are going on, they are usually the only comprehensive up-to-date source out there.
yeah, I also found Piccolo2d is a great framework. I was using existing Swing components embedded in a PSwingCanvas but it caused many issues. Now I decide to create my own components based on PNode object. It will take more time but solve my problems.
The Kilobolt tutorials look really good, so I've decided to follow them.
Which is the "//div[@id='" + idPrefix + "_panel'" element within the example?
Absolutely wrong when it comes to NetBeans GUI designer! Netbeans probably has a worst GUI designer. It creates real mess of your code. He could consider Eclipse Windowbuilder Pro which gives you ability to work with 3rd party layout managers, such as MiGLayout (probably most advanced layout manager) and FormLayout. Code is much more cleaner and easier to maintain. As a third recommendation, I would like to recommend IntellijIDEAs GUI designer. Difference between this and previous GUI designers is that it separates "view" in .form files and generates swing component variables in "controller" classes. But on the other hand, yeah, he shouldn't use any of them before he completely understand swing.
While I agree, I taught a discussion section in a second/third semester programming class, and we made it a point to help students find their own resources, because students that were coming into the course weren't quite able to yet. It was something we worked on over the semester. What I'm trying to say is, the OP may not be quite at that level that he knows how to yet. Based on what I saw in the course I taught, it actually takes some practice and familiarity with programming to be able to find resources on your own. In the end though, I do agree with your post. OP, keep seeking out info like this and don't let it get you down that you couldn't find it this time :)
If you just want to jump in and mess around with stuff, Ensemble is a good place to start. It's got tons of simple implementations and the code is right there for you to look at. http://www.oracle.com/technetwork/java/javafx/samples/index.html Especially since you're a new programmer, I would recommend you play around with existing code rather than try to build something from scratch on your first go-around. The last thing you want to do is start a JavaFX project without fully grasping its architecture.
For many, it seems that the option comes down to JBoss (now WildFly), Tomcat, and Glassfish. This article provides some insight on how to choose between JBoss and Tomcat specifically. I thought it was helpful. http://www.futurehosting.com/jboss-vs-tomcat-choosing-a-java-application-server/ 
+1 for fxexperience!
libgdx.badlogicgames.com
what, no coupon? meh....
I would slightly disagree. When I was first learning, tackling a big GUI project with no prior experience or knowledge of patterns was a fantastic learning experience. I failed, and failed hard in the beginning, coded myself into a corner over and over, and spaghetti-fied my code so bad that no more progress could be made as I had no idea how anything fit together anymore. But! I came out the other side of it with a strong sense of building classes and separating concerns. Getting my hands dirty with a GUI projects was the first thing that made me feel like I "understood" programming finally. 
It allows you to code against an object without having to know exactly how it is implemented, leading to decoupling and cleaner code. It allows someone to change the implementation of an interface without having to change anything about the class that calls the interface. It outlines exactly what a class needs to implement if it wants to be used by the class that uses the interface.
Thank you!
&gt; It allows someone to change the implementation of an interface without having to change anything about the class that calls the interface. This one is my favorite. Sometimes I'll get requirements changes, freak out a little, then look in my code and see that I had used an interface for that piece of functionality, so my changes can be localized. And then I want to hug Two Months Ago Me for thinking ahead. 
Simplest way to think of their advantages - at least in terms of the standard library - is to consider the Runnable interface for threaded code. The Thread class has a constructor which takes an instance of Runnable - it doesn't care what code it executes, just that it's an instance of Runnable. This shows how decoupled the Thread class is from anything which it has to execute: * The authors of the Thread class as they don't have to care about the people that implemented the Runnable interface, just that they did. * The authors of the class which implements Runnable don't need to care about how the Thread class itself is implemented. Without interfaces it wouldn't be possible to clean separation.
I always wondered how plugins were done in Java. Now I know.
http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/view.html#view-velocity http://freemarker.org/ http://scalate.fusesource.org/ http://blog.springsource.org/2011/01/04/green-beans-getting-started-with-spring-mvc/
Can you tell me where I should use that? Because my take on it is that if I use it after I start the thread I will just be waiting for that one thread and then using threads will be of no use to me.
Polymorphism. You can declare references set to the same type of the implemented interface. Meaning - You can treat handle these objects as a common type - the implemented interface. A good example I read in a book: &gt; Animal -&gt; Canine -&gt; Dog / wolf &gt; Animal - &gt; Feline -&gt; Housecat / Tiger &gt; Pet -&gt; Dog / Housecat Dog and Housecat can now be declared as type Pet: &gt; Pet dog1 = new Dog(); &gt; Pet cat1 blah ... &gt; Dog dog2 = new Dog(); &gt; Cat cat2 blah ... Behaviour is limited to the reference type however. If you decide to treat your object as a Dog the behaviour of the object will reflect that. If you treat your objects as Animal then only the Animal behaviour is available. Constructing the object with the Dog() constructor defines it's concrete type - casting between Animal, Dog, or Pet is possible.. from the standpoint of a reference type - but it was constructed as Dog() - which is it's concrete type (instanceof gives you clues). On top of reference types, interfaces also provide common behaviour among classes - each class implements (overrides) the methods in their own way to suit their class structure - the behaviour remains the same. This can bring related classes, at any level of the inheritance tree, together. Discrete objects can be grouped up by common behaviour and implemented type. I'm still learning, myself, so.. someone please correct me if I'm wrong. Sources: https://en.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming http://books.google.co.uk/books/about/Head_First_Java.html?id=5VTBuvfZDyoC&amp;redir_esc=y http://www.cra.org/Activities/craw_archive/dmp/awards/2002/heise/typeComp.html http://docs.oracle.com/javase/tutorial/java/IandI/interfaceAsType.html
I see someone already answered, but if you're looking for an example then I can provide one. Say I have a game where there are multiple animals running around. Each animal can move, speak, and has an appearance. We can abstract those actions/properties into an interface. Bear with me, I've been using C# lately and I might slip up: public interface Animal { public void move(AnimalController ac); public void speak(AnimalController ac); public void draw(AnimalController ac); } Now, if we want to implement this interface with a Dog class or a Cat class then we can! public class Dog implements Animal { public void move(AnimalController ac) { ac.moveMe(this, Direction.NORTH); } public void speak(AnimalController ac) { ac.playSound("sounds/dogbark.wav"); } public void draw(AnimalController ac) { ac.drawAnimal(this, "images/doggy.png"); } } Now let's say I also implement a Cat class and a Frog class. In AnimalController, I don't want to have to construct a different list for each kind of Animal because they're all Animals. public class AnimalController { List&lt;Animal&gt; animals; public AnimalController() { animals = new LinkedList&lt;Animal&gt;(); animals.add(new Cat()); animals.add(new Cat()); animals.add(new Cat()); animals.add(new Dog()); animals.add(new Dog()); animals.add(new Frog()); } public void moveMe(Animal an, Direction dir) { // TODO: implement me } public void playSound(String filepath) { // TODO: implement me } public void drawAnimal(Animal an, String filepath) { // TODO: implement me } public void update() { for (Animal an : animals) { an.move(this); an.speak(this); an.draw(this); } } } Now even though each Animal might implement different behaviors, they can all be accessed by the same methods. It can simplify your code so much if you use it appropriately.
the only real advantage is to connect with different classes, the interface defines the signature your code interacts with without requiring you to have them all inherit from the same base.
Objects are nouns. Interfaces are verbs. An interface effectively describes something your object can do. Underneath it all an interface is just multiple inheritance from fully abstract base classes.. But describing it like that takes away from the difference between classes and interfaces. 
http://docs.oracle.com/javase/7/docs/api/java/util/List.html http://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html
It is especially helpful when you need to unit test code. If you have a class that depends on another class, if that second class was an interface, you can substitute a mock implementation for your unit tests so that you are really testing only the first class.
I can help you out as well, pm me if interested
http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html
*somewhat elegant solution
&gt; I guess I can see it as a way to kinda push you to use certain kinds of methods when you create related classes Exactly. Look at an interface as a contract that the implementing class is bound to. 
Sounds right to me. To take your example further, suppose you wanted to model CatDog (from the Nickelodeon cartoon). A CatDog might be both a Canine and a Feline. If these were all implemented as classes, what would happen when you call CatDog's run() method (from the Animal base class)? Would it try to call run() as Canine implemented it, or as Feline implemented it? This problem is what is referred to as the "Deadly Diamond of Death," and you won't be able to encounter it with Java on this scenario. Java won't allow you to extend multiple base classes (compile-time error), so the way to model this would be to make Animal, Canine, and Feline be interfaces. Java will also give you a compile time error if you try to put concrete implementation in an interface declaration. The only place the compiler will allow you to write the implementation of run() in this scenario is in the CatDog class, so there is no ambiguity. Of course, there are other ways you could model this inheritance diamond (maybe Feline is an abstract class and Canine is an interface). Try implementing those and see if you can produce a Diamond of Death scenario. Java still suffers from ambiguity in multiple implementations of the same method signature in an inheritance diamond, but I guess java interfaces at least eliminate one class of faults you can introduce in your inheritence design.
since nobody else mentioned this, I consider it the most important aspect of how interfaces are used, I will add: **an interface is often used to define a contract** the user of the interface can expect what will be implemented without knowing the details of how it is implemented. the implementer can expect how the user (callee) will interact with the implementation different components of a large scale system should interact with each other in clearly defined ways. it is one kind of "information hiding" which is very important to well-designed software systems. http://en.wikipedia.org/wiki/Law_of_Demeter http://en.wikipedia.org/wiki/Information_hiding to give you a practical example of how this works... consider databases. you don't write SQL apps in Java using an oracle database API, or a mysql API, you write using the Java database API. The Java database API (JDBC) is a set of interfaces that define a standard way of interacting with databases. Then the vendors implement those interfaces. Now your code runs against any database, because you coded to the interface, not a particular implementation. You use Datasources and Connections to connect to databases, which describe generally how to connect to them, and you use Statements and ResultSets to query for data or to store it. These are all just interfaces which define a contract of what methods are available and what they should return, not implementations of a database driver. The drivers you obtain will implement those specifications ("interfaces") and your code will automatically work with them. Because both sides (your program, and the database driver) were implemented according to the same contract. 
An interface represents something an object *does*. Compare to inheritance which represents what an object *is*. Sometimes you only care what you can do to an object, not its type. Say you only care that you can call the getMonthlyPayment() method on it, to get its return value. It doesn't matter what the object *is* as long as you can *do* stuff to it. So you declare that ClassA implements Payable. So does ClassB. They may otherwise be unrelated. But you can pass either to a method or constructor if the required type is Payable. 
Let me play the devil's advocate for a sec... Can't we get all those advantages from an abstract class? Aren't abstract classes better for future-proofing our code? Would Java have needed a LayoutManager2 interface if the original LayoutManager had been a class?
From a first glance I would say that you don’t have a problem with threads but a problem with database connections. Close your result sets and statements after you’re done with them, don’t close the connections if you still need them.
Upvote for you, since you used the word "contract". This is probably your best answer.
&gt; renameTo() applied to two full text files seems to fail too much. What? I am really interested in the train of thoughts that resulted in this sentence.
Thanks everyone. I feel pretty enlightened now. I guess if you are doing small projects that dont require creating complex class polymorphisms, interfaces probably don't matter so much. But I can now see why it's so important on large scale projects.
Ok, sorry. Two text documents that already exist and contain text when applied to the renameTo() method return false. Like foo.renameTo(bar); where foo and bar are declared files of documents with text in them.
Just took a J2EE class over the summer - we used "Murach's Java Servlets and JSP" (2nd Edition). I thought it was a good book to learn with. We also used this [VM](http://csis.pace.edu/lixin/vm2011/ubuntu-CS644-2011.exe). You can run it with VMWare Player. It has Netbeans, MySQL, Eclipse, tomcat, and glassfish, java, basically everything you need to get started already installed and configured. It's an older version of Ubuntu Linux, but it's a good place to start. Note root password for mysql is 123456 user password for ubuntu login is 123456 and you can stop/start tomcat with: tomcat-start and tomcat-stop EDIT: the VM is an archived EXE file. if you're using Linux you can open it with 7za, in Windows you can just click on it. 
My, admitedly limited, understanding was that interfaces are abstract classes that are pure.
That still doesn’t make the slightest bit of sense. The _content_ of a file has nothing to do with what happens when you rename a file. However, some platforms may refuse to rename a file to a name that already exists. Maybe you should read the excellent [API Documentation](http://docs.oracle.com/javase/7/docs/api/java/io/File.html#renameTo(java.io.File%29) every now and then.
Interfaces are really useful if you want your class to be considered things. For example, I could implement two interfaces and be included in two type-safe collections. List&lt;DoucheBag&gt; bottleServiceAtClubsGuys = new ArrayList&lt;DoucheBag&gt;(); List&lt;Bro&gt; flexesInTheMirrorAtGymGuys = new ArrayList&lt;Bro&gt;(); Probably, the behavior of those two types are similar, but not necessarily. A Bro might not need the method public Misdemeanor getDrunkAndFight(Woman girlfriend); So we separated out the behavior. (I like this better than an Animal, Predator, Prey example.)
The main difference (as others have pointed out) is that a class can implement multiple interfaces, but can only extend one abstract class.
This is the answer I would pick. Almost all of the other answers beg the question "Why can't I do that with an abstract class?" or "That sounds like a technical limitation of Java, why is it that way?", but they miss the point. There are basically 2 kinds of inheritance: Inheritance of state and inheritance of contract. In java, `extends` means you inherit both, and `implements` means you inherit contract only (A mixin, or private inheritance in c++, is what you use for inheritance of state only).
What everyone else is saying about code decoupling and "being able to change the implementation of a class without changing the classes that call it" is true. Further interfaces are used in java to define contracts, and also the spring framework uses them to assist dependency injection (a most glorious hack atop java) However it should be noted that interfaces have very little to do with the OO model. Other OO languages get by without interfaces. They have the equivalent of abstract classes with undefined abstract functions. This works because they will often allow multi-class inheritance (see: python, C++, a few others). In general interfaces make me uncomfortable. They can define the interactions (the interface) with a thing, but they cannot define semantics. You could have an interface which had a method: public Cheese getCheese(); which seems to get a Cheese object but under the hood could always return null and do a whole bunch of other crazy shit. A more troubling scenario is: public void useCheese(Cheese e); class A implements Cheese{ public void useCheese(Cheese e){ Chedder ec = (Cheese)e; } } Granted, this is the fault of the implementation, but the interface can't control this stuff for you which makes it less useful arguably? 
I would like to mention that an even better way to animate algorithms is by [dance](http://www.youtube.com/watch?v=ywWBy6J5gz8)
Because the original designers of Java thought most programmers are too stupid to handle real multiple inheritance. And now, nearly two decades and untold numbers of hacky workarounds for that limitation later, we still suffer from that horrible decision.
I would have welcomed more discussion about the context and objectives of these tricks. Each fish you give away is a potential future humanitarian disaster of a software project :)
I don't like #9. A better alternative, IMHO, is to enable compiler warnings for missing @Override annotations.
I'd also be interesting in knowing if such a library exists that includes the synchronous, value-returning feature. The closest thing I've done relied on Futures and Callables as *mikaelhg* suggested earlier. Regarding the performance of proxies: what kind of throughput are you looking for? Do you need more than 1,000,000,000 calls per second? I ran several method call tests calling Car.drive(2) **a billion times** using several mechanisms (including dynamic proxies). public static interface ICar { void drive(long miles); } public static final class Car implements ICar { private long miles; public void drive(long miles) { this.miles += miles; } public String toString() { return "miles driven: " + miles; } } Here are my results. The second last result shows that dynamic proxies, on their own, are slightly less performant than regular method calls...not what I expected. 0.694 seconds - static dispatch: Car.drive(long) 0.745 seconds - dynamic dispatch: ICar.drive(long) on Car instance 2.881 seconds - reflexive static dispatch: Car.class.getMethod("drive", Long.TYPE).invoke(...) on Car instance 15.153 seconds - reflexive dynamic dispatch: ICar.class.getMethod("drive", Long.TYPE).invoke(...) on Car instance 0.721 seconds - dynamic proxy with static dispatch: InvocationHandler calling Car.drive(long) 18.216 seconds - dynamic proxy with reflexive dynamic dispatch: InvocationHandler calling method.invoke(...) on Car instance My test setup was: * Windows 7 * i7-2960XM 2.7Ghz CPU * 16GB RAM * JDK 1.7 * Eclipse 3.7.2 * (OS and software are all 64 bit) LMK if you'd like to see the full test code.
There is some more discussion on that subject here: http://blog.jooq.org/2012/04/10/the-visitor-pattern-re-visited I agree, these rules weren't meant to be black and white. Choosing the wrong "best practice" will indeed lead to more [architecture astrophysics](http://www.joelonsoftware.com/articles/fog0000000018.html)
#8 seems pretty fishy, too. The performance gain by checking for object identity before all other checks is quite negligible and IMHO not worth the additional line.
Example from java.lang.String: public boolean equals(Object anObject) { if (this == anObject) { return true; } if (anObject instanceof String) { Both identity checking and (implicit) null checking are present. I'm sure the JDK authors properly benchmarked this. The problem with equals() is the fact that objects delegate equals() calls to components. E.g. List.equals() is required to check equals() on every list element. This can add up...
I've been talking about Java 8 and clojures at work for a while now and it seems that the best Java programmers are going to be the ones that can work in a functional way. It just worries me that there may then be split between those that can do functional and those that can't. Personally I'm excited. 
These are good information, but I would start with servlets and jsp first and learn frameworks after that. There might be too much information to chew if you try to learn these all at the same time. Here is pretty good information about servlets for beginner http://www.tutorialspoint.com/servlets/.
Do the Java EE tutorials with Netbeans. Very easy to follow and quick setup. https://netbeans.org/kb/trails/java-ee.html 
Np, here's a link to the code: http://northconcepts.com/blog-downloads/reddit/JavaMethodPerfTest.java 
Almost everything you learn about java 6 will apply to java 7 (if and when you do decide to take it up). Don't worry about the version, just start coding :)
Save the money and go for the Java 6 resources. The difference between 6 and 7 is nothing you need to worry about when you first start out. Just know that in 7 you can use `List&lt;String&gt; names = new ArrayList&lt;&gt;();` instead of explicitly saying `List&lt;String&gt; names = new ArrayList&lt;String&gt;();` It's more useful with Maps, where instead `Map&lt;Integer, Set&lt;Integer&gt;&gt; factors = new HashMap&lt;Integer, Set&lt;Integer&gt;&gt;();` you can just say `Map&lt;Integer, Set&lt;Integer&gt;&gt; factors = new HashMap&lt;&gt;();` 
Doesn't really matter which version you pick. I would suggest that you pick the book that seems to be the better one. 
yup yup 6 is good
Use the 6 books (since you have them), but use the latest 7 JDK. You'll find any relevant 7-specific stuff online when you need it.
Also, Java 8 should be coming out in the next couple months with some pretty handy advances. So keep an eye out for that. Otherwise, everything from 6 should apply to 7, and everything from 7 should apply to 8. So starting off with 6 will do you plenty good
Dang, so the reflexiveProxyReflexiveCall case corresponds to my code, and that case has really bad performance in your benchmark. There's still possible hope though. Firstly, I probable don't need that much performance, and secondly it might be faster in the upcoming JVM 1.8. Also, I'm wondering if there's a way to use invokedynamic (with the MethodHandle class?)
From what I remember, there was a big difference between version 4 and version 5. That was when they introduced Java concurrency libraries and Generics. Between Java 5 and Java 6, there wasn't that much of a difference in the basic/standard stuff that you will use when you learn. Java 7 incorporated [Project Coin](http://niklasschlimm.blogspot.com/2011/12/java-7-project-coin-in-code-examples.html) which were minor changes to the syntax. If you're learning, it doesn't really matter what version after version 5. Personally, I would just use version 7. Everything that you will use in version 6 is still the same in 7.
nope; compile error beltorak@kryos [~/tmp] $ javac -version javac 1.6.0_35 beltorak@kryos [~/tmp] $ cat Diamond.java import java.util.List; import java.util.ArrayList; public class Diamond { public static void main(String[] args) { List&lt;String&gt; myFavoriteThings = new ArrayList&lt;&gt;(); System.out.println(myFavoriteThings); } } beltorak@kryos [~/tmp] $ javac Diamond.java Diamond.java:7: illegal start of type List&lt;String&gt; myFavoriteThings = new ArrayList&lt;&gt;(); ^ 1 error beltorak@kryos [~/tmp] $ 
&gt; string switching Absolutely! Honestly I can usually find a way around it that winds up a bit neater from an OO perspective than switching strings, but in more simple situations this is soo useful, plus it can wind up saving memory in weird places (not having to store an extra int for switching anywhere)
The new things in Java 7 are not really that different, you would pick it up just using Java 7 from Eclipse, so don't throw out your Java 6 books - you can code to Java 7 with Java 6 syntax, and gradually make the move whenever you want to. [7 adds](http://radar.oreilly.com/2011/09/java7-features.html) shorter syntax for generics, strings in switch statements, multi-catch, and a try-with resources statements. They are all very nice improvements, but nothing ground breaking. The biggest thing (for me at least) in Java 7 is [java.nio.file](http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html) - a very beautiful API for working with files and folders, and compared to java.util.file it's a dream to use. 
Or not be a pansy and just do it. You don't need free time so you have 16 hours a day for school give or take. That's more than enough time to learn the material. And if it isn't, then CS isn't for him.
wait for it
The == operator tests for instance equality, the instanceof operator checks the type. I can't really imagine a situation with the latter would make the former moot.
* http://www.journaldev.com/1854/java-web-application-tutorial-for-beginners * http://www.journaldev.com/1877/java-servlet-tutorial-with-examples-for-beginners * http://www.journaldev.com/2021/jsp-example-tutorial-for-beginners
In reality, I've been accidentally been using the JDK8 preview from http://jdk8.java.net/ to run the unit tests for a few production projects for almost a year (how time flies) now, ever since I started installing the JDK8 previews to create stream/lambda examples. It's worked perfectly, didn't even notice until I did some configuration. Of course, not on production servers or for production builds.
In my ORM project http://persism.sourceforge.net/ I wrote a log wrapper which checks the availiblity of the logger at runtime. You can grab that code and see if it helps you.
It's simpler to just mark your classes final unless you explicitly want to have inheritance. 
Yep, and someone doing an implementation is forever locked to dragging around whatever code was put into the abstract class, even if they completely change everything so that code is no longer needed.
On one of my project there is 3 logging frameworks, Slf4J, Log4j and JUL. I use the slf4j "bridges" for Log4J and JUL and it works just fine, meaning everything goes through sl4fj/logback. What is not working for you exactly ?
Are you applying [dependency exclusions](http://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html)? It sucks that Maven requires the exclusion at the dependency level rather than at the POM level, but Maven is big on having a stable and predictable dependency graph.
I think this is the sensible answer. Exclude the unwanted logging libraries from the dependencies you are including. Add the slf4j adapters for those exclusions.
Pick one (in my case logback) and use the enforcer plugin with bannedDependecies to exclude the others (log4j and commons-logging) If your build breaks, dependency:tree tells you why, add it as an exclusion where necessary and add in the necessary slf4j wrapper (eg jcl-over-slf4j). That way you're still in control of logging in one place but necessary libraries have their needs met.
Should be renamed to "Exceptions - a way to make your code slow and unmaintainable- if you use them in a way that they aren't intended to be used."
If you decide you must exceptions for control flow, you can remove the "slow" part by throwing always the same exception instance, or overriding fillInStackTrace() in your custom exception.
It's worth pointing out that there is actually an overloaded constructor for Throwable that will suppress the invocation of fillInStackTrace: [Throwable\(String, Throwable, boolean, boolean\)](http://docs.oracle.com/javase/7/docs/api/java/lang/Throwable.html#Throwable\(java.lang.String, java.lang.Throwable, boolean, boolean\))
If you want a deeper understanding of concurrency, the go-to book is [Concurrency in Practice](http://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601). For Spring, the go-to book is [Spring in Action](http://www.amazon.com/Spring-Action-Craig-Walls/dp/1935182358). The best book I've read for OOP is [Agile Patterns, Practices and Principles for C#](http://www.amazon.com/Agile-Principles-Patterns-Practices-C/dp/0131857258). The first 1/3 of the book is Agile stuff, but the rest is a wide variety of topics in OOP. There used to be a Java version of this book, but the newer version is C#. But the C# code is nothing to different than what you would do in Java.
Both of those books look great! I've heard about the Concurrency book but the not the Agile book. Thank you for your suggestion! Would you happen to know any good books on test driven development by chance?
semantically, totally absolutely different, and you shouldn't do one *instead of* the other, but supplement one with the other, if appropriate.
If you want to learn Java, keep learning Java. If you want to learn Object-Oriented stuff in general, learn several languages. You can learn a lot about what it really means by looking at how OO is done in other languages, although Java does have the best (i.e. most enterprisey, design-patterny) ecosystem.
I've seen similar discussions about a decade ago, but then it was about throwing in C++. I think it's worse to have an application do the wrong thing efficiently than do the right thing inefficiently.
Yes, this is what I do. I consider this the mess, because I have to go through the dependency tree to check for logging libraries, disable them and repeat this until there are no more and then add the logging I want.
This plugin sounds like what I was hoping for. I will look into it, thanks!
I would suggest grabbing some Java project and working on it. Learn by doing in the first place. "Use the force, read the source!"
Exceptions are for exceptional conditions, hence the name. Using them for normal program flow is silly.
There's lots of reasons Exceptions are slow. A big one is the JVM expects them to be rarely thrown so it doesn't optimize for that path (the reverse in fact). "exception-based idiom is more than twice as slow as the standard one" - *\#57 - Effective Java 2nd Edition*
It's also unavoidable in some circumstances, like returning from inside a lambda or inner function in Scala. Scala mitigates the performance problem somewhat by introducing a trait called `ControlThrowable` for exceptions used in this way, which overrides `fillInStackTrace` to do nothing. Still, exceptions shouldn't be used for normal control flow if you don't really need to. Even if you don't waste time constructing a useless stack trace, it's still going to be slower.
Hopefully lambdas and streams will turn out to have a better design symmetry.
If I recall correctly, NetBeans lets you review a project's dependency tree and quickly exclude unwanted dependencies with a right-click menu. I do wish Maven had a more powerful dependency system like Debian's, though. Then you could declare a dependency on any of a set of different artifacts (e.g. "I depend on slf4j, commons-logging, or log4j") or depend on an API (e.g. "I depend on an slf4j provider, but I don't care which one"), as well as let one artifact declare that it is a drop-in replacement for the other (e.g. "I am jcl-over-slf4j, and you can use me instead of commons-logging"). OSGi's dependency system can do this, since dependencies are declared on packages and services rather than on bundles. Maven can't, though. :( Almost makes me tempted to make a new build system/dependency manager myself…
There are java-level issues with this happening. With imports and classloading, you can't just swap out log4j with commons-logging without code changes.
Improve your OOP skills by taking on the [Object Calisthenics challenge](http://www.xpteam.com/jeff/writings/objectcalisthenics.rtf). Try it. It's hard, you'll swear, it will be incredibly uncomfortable, but once you get through it, you will have written beautiful code. 
I would definitely say that you have got very far, very fast. I definitely agree with pfm that the next step is to get a lot of experience under your belt, either by writing something yourself, working on an open source project or getting a programming job. After all that theory, you need a good dose of reality to make sure your knowledge is grounded, and you don't end up massively over-engineering your code. Beware of the FactoryFactory.... 
You have the [reflections](https://code.google.com/p/reflections/) library, which fits the bill.
I deal with it by using Ant.
Why Scala makes it easier to misuse Java? Just wondering...
Of course they can communicate business logic back. Who says they can't beside you? I define my API how I like. If my method cannot return the expected result, I throw an exception. For instance look at a streaming API like InputStream. From your perspective, the methods should not throw an IOException. What should the methods return instead if something cannot be read from the stream?
for jcl-over-slf4j you can also set commons-logging as provided in dependencyManagment
You can try with Javascript. The first time you do the process manually, then you run your JS on the browser console and it start a job to check the page every 1 minute (so the session will not expire), the tricky part will be the response parse. You can try: Use jQuery selectors to get the element with the result Java maybe a overkill to this task, but is possible too.
The article is about an performance optimization. Yes, we should do it right first and then optimize. And there are different possibilities for optimization (like avoiding to create a stracktrace when instantiating an exception). And from my experience, code can be even more complicated and bad to maintain if we try to work around the concept of exceptions at all. It's just not right and we should not avoid exceptions, just because we hit a performance wall. The article is probably right about to avoid exceptions in this specific case. But we should not take it as a general advise.
THanks, I'll look into it. Would you recommend a good starting point for javascript? 
Just to warn you - you might be shocked at how little time you are able to spend actually coding if you get a job at a large company. With all the requirements-wrangling, documenting, workshopping, release-planning, cooperating, build-breaking, meeting and what-not that goes on, you can sometimes go several weeks without writing more than a few lines of code in anger. You just have to enjoy it when you actually get let loose on new features.
This was my original plan as well, however, how would I pass credentials? When I first go to the website, it'll ask for my username and password. 
Hmmm, you probably have to specify the login information. There are two typical methods: 1. Through the URL (via GET e.g. www.taco.com/page?uname=bob&amp;passwd=moose1337) -- which is obviously pretty insecure since your password is just chillin' in plain text for anyone to see in a server log 2. Passing the data directly through POST (via some method such as postData("username", "myname", "passwd", "somePassword") using whatever fields the form wants. Here are some stackoverflow answers that illustrate it: * http://stackoverflow.com/questions/7139178/jsoup-cookies-for-https-scraping * http://stackoverflow.com/questions/10640093/jsoup-getting-different-html-compared-to-firefox-and-other-browsers * http://stackoverflow.com/questions/6432970/jsoup-posting-and-cookie Or, what I've done in the past which is pretty annoying, export your cookies from Firefox or whatever browser you use (search Google for how) and parse the cookies from that and include them (pretty annoying because Firefox stores them in a SQL database AFAIR). Honestly, I'd look at the stack overflow methods and try supplying the data through POST. 
That's a perfectly reasonable use of an exception. The problem lies in throwing exceptions to communicate *expected* results. You're giving the impression that you *expect* an operation to fail.
Yes, that's the point. Operations may fail and I can design my API so a caller can react to that in a different way it would react to the normal return of the method. I don't even like the word 'fail', because that's always subject to the caller to decide whether it's a failure (error) or just a valid result. For instance, that's the reason for IOException to be a checked exception.
Is java.util.concurrent not meeting your needs? http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/package-summary.html
I'd take a step back; what's generating the page you're monitoring - is there any way you can hook into that application, any web service you could call, etc? If the site's developers have put any functionality like that in, chances are it'll be a whole lot easier to use the approach they've provided rather than going down the road you're looking at. If you do end up going down the "saving to text file route", be sure to check that it's not saying "10 services down" etc!
Exactly. Why can't the application that generates the page send an email when something happens. This task seems to me totally stupid.
I need a binary semaphore. The best option so far to reduce memory usage is to use an ArrayBlockingQueue but it's kind of hackish.
Perhaps one could write another lambda/inner function to check for preconditions rather than relying on exceptions, but still exception throwing should vastly be the exception (ha!) to normal flow.
If people understood why you need one vs. a reentrant lock, they might have more ideas. 
That is a possibility, yes, but at the expense of making the code uglier and therefore more difficult to maintain. Sometimes the performance gain is worth it, but often it is not.
I SHOULD be able to use a lock but I need a thread different from the locker to unlock the lock.
One advanced topic in OOP I would suggest is functional programming :X
That sounds possible. Can you provide a higher level description of what you're trying to achieve? It may be that there's another approach that might be a better fit.
yes it is
&gt; What should the methods return instead if something cannot be read from the stream? It could return an Either monad. Either&lt;IOErrorDescription,String&gt; result = someIOFunction(); if (result.isRight()) { String r = result.getRight(); System.out.println("Here's the content from the stream:"); System.out.println(r); } else { IOErrorDescription e = result.getLeft(); System.out.println("There was an error reading the stream:"); System.out.println(e.toString()); } The idea being that `IOErrorDescription` does not have `Throwable` as an ancestor, and so no stack trace need be built.
POST still sends the parameters in plaintext. They just don't show in the URL. 
Check out the non-reentrant lock example in [LockSupport](http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/LockSupport.html). 
I agree with this; I knew the very basics of java from a couple of YouTube videos, and since then have been trying some of [these](http://www.reddit.com/r/dailyprogrammer) challenges. Pick the easy ones, because even some of those are quite hard to get your head around. I've been working on [this](http://www.reddit.com/r/dailyprogrammer/comments/1k7s7p/081313_challenge_135_easy_arithmetic_equations/) challenge for a while now and I think I'll be able to finish it today. 
You might want to look into the reasoning behind Kotlin ditching the tuple types. It seems it might be something that you'd find interesting.
It's not easy, you'll have to work for it. Basically examining all the available classes in the classpath to find those that extend your base class. I could probably find the code that does that somewhere (you might find it in Apache JMeter's codebase).
These are always fun http://projecteuler.net/problems, but some of them might be to much math for what you are looking for
Yes, that was what I was using before I switched to using an ArrayBlockingQueue (which created less garbage for the garbage collector.)
I really didn't want to create my own class for this. This does bring up an interesting question though. Why should I create my waitqueue using Thread references instead of Futures?
Thank you very much, these look great for learning to code and learn some more math while I'm at it!
Interesting, I knew GET put them in the URL, but I honestly never really considered how POST sent them. I looked into it, and here is a helpful summary I found confirming your comment (courtesy of [stackoverflow](http://stackoverflow.com/questions/198462/is-either-get-or-post-more-secure-than-the-other)): &gt; As far as security, they are inherently the same. **While it is true that POST doesn't expose information via the URL, it exposes just as much information as a GET in the actual network communication between the client and server.** If you need to pass information that is sensitive, your first line of defense would be to pass it using Secure HTTP. &gt; &gt;GET or query string posts are really good for information required for either bookmarking a particular item, or for assisting in search engine optimization and indexing items. &gt; &gt;POST is good for standard forms used to submit one time data. I wouldn't use GET for posting actual forms, unless maybe in a search form where you want to allow the user to save the query in a bookmark, or something along those lines. Thanks for the correction, Spektr44. 
Yes. JComponent c = (JComponent) Class.forName("javax.swing.J" + parameter).newInstance(); Don't do this.
[This has always been of tremendous value to me](http://www.google.com)
[Big Java](http://www.horstmann.com/bigjava.html) is an incredible resource for beginner and intermediate Java students. Hell, it's a great reference for some advanced topics too.
Why not use an application wide ForkJoinPool? You do not want to be trying to build and destroy a thread on every call.
Alright. I knew I **could** do the dozens of if statements, but it looks like the only other way to do it is bad. Thanks for the help.
I'm sure you can always find a niche subreddit that is more directly related to each thing in this sub but then will we ever post anything in the most generic subs. Should all java related posts be banned from /r/programming? Should all cat pictures be banned from /r/cuteanimals? 
Mine was going to be "slowly"
This is a blog post about `if` statement syntax. Do you really want more of the same?
If you need more flexibility, gradle is a drastically better choice than ant.
also will be used for Java 2.
Bought this for like $50 4 months ago for a java class.....
Love this plugin!
I fail to see the reason, why IOException should be checked exception.
How about sending me a link? My google gives me http://blog.jetbrains.com/kotlin/migrating-tuples/ which implies that the recommended migration is to use tuple classes instead of native tuple types.
When I use an IDE at all, I prefer IntelliJ. Much easier to work with than eclipse, and crucially it has better gradle support out of the box (nearly all our builds use gradle). 
Do you know the difference between java and javascript? Because your choice of words doesn't say that.
Plain and simple, if you are using Thread you are doing it wrong. Since the advent of java.util.concurrent you should almost never need to directly create aThread except in the most low-level or simple cases. You are creating an actor framework but each actor is tied to a thread when an actor is supposed to be a more lightweight process. Each actor could be creating a Callable and submitting that to an java.util.concurrent.ExecutorService. Specifically it sounds like you should probably be making a custom ThreadPoolExecutor which uses a thread pool that creates daemon threads since you don't want to worry about shutting down.
The entire site is pirated books. Why do you think the fact that there is a large collection of them makes it okay?
What do you mean in particular?
Pirated book!!! Please report this thread. If you actually click that PDF the home page for the book is http://www.deitel.com/Training/OnSiteInstructorLedTraining/JavaProgrammingCurriculumOverview/tabid/3344/Default.aspx where they link to amazon page if you want to buy the book for $91.89.
I didn't like IntelliJ at first, but I've completely changed stance after spending some time with it. I do, however, still use some modified Eclipse shortcuts with it (since I haven't had time to sit down and learn the IntelliJ shortcuts yet). The code completion, XML integration, maven integration, etc. is vastly superior to Eclipse (including all plugins that I have tried). I would highly recommend it to Java developers.
Since you didn't mention Ivy, I guess you're suggesting you do all of it manually. So you choose to HAVE to figure out all the versioning and recursive dependencies instead of adding a few lines to Maven to notify you when there is conflict? &lt;sarcasm&gt;Good plan&lt;/sarcasm&gt; Sounds like you work on smaller projects.
It is possible, but use it with caution: It only makes sense to create objects by their class name if you are dynamically loading a class from external jar, as a form of plugin, or something similiar. Otherwise you shouldnt choose it by name in string, but rather hardcode those classes. Easier to debug.
Why is that an issue, why can't you just encapsulate the Thread interaction and expose Futures?
I'll get naked and sit in my living room facing the door. When they come, I will have already programmed my revenge, in java, to act on my behalf while I sit in my cell orchestrating mass chaos to prove a point about the system's injustices. It will be biblical. 
I took a brief dive into JavaScript earlier this year and got some exposure to some functional concepts like currying and partial application. Are there some other topics in functional programming that I should be exposed to? Thanks for the suggestion BTW. 
Take a look at the lambda changes coming to Java in Java 8: http://www.dreamsyssoft.com/java-8-lambda-tutorial/intro-tutorial.php Also, learning Scala would be very useful, as you it has interoperability with java.
And I think it's weird to downvote and not give the poster a reason for it. To further defend my original comment, /r/learnprogramming is not exactly a niche sub. At least not compared to /r/java, given that it has more than 5 times the subscribers and is much more active in general. Furthermore, 99 and 5 9s of Java programmers won't learn anything from this post, whereas a healthy percentage of either the two subs I suggested could in fact benefit from another perspective on even something as basic as this.
It's not an issue. I just don't know whether using the Thread, or Future approach would be better.
Yep the newest implementation uses a thread pool.
Heres what I did: 1. scan for changes in the folders (eg classes that were compiled), If theres a change, restart web server. (use watch or something similar) 2. have a jsp to check for memory available. write a script to check if the remaining memory is critical &amp; trigger a restart. There are tools for this. 3. Some web servers eg Tomcat have the ability to auto deploy / restart container if theres any classes had changed, works on selected folders. dont use in production. hope it helps.
Okay, what are arg1,arg2,arg3? And how do I know what to put as parameters for clazz.getConstructor?
looks pretty slick. I'm actually scared to use it based on the fact that I've never heard of it and I'm the only comment after 13 hours. Anyone used this?
I think you need a real language, one with macros ala lisp, to do what you want to do. I'm sure you could do it with a JVM lisp like ABCL, or with Clojure. 
Any particular reason for explicitly mention the JMeter codebase? Nothing about that project screams to me the need for it to find all subclasses of a specific class. Plugins yes, class scanning no.
You can't assign an object of one type to another type without casting it. The (Auto) is how you cast an object of one type to another.
I wish he'd write a follow up. "Non-essential Java", perhaps.
Good one, asshole.
*unless you are casting to a superclass or interface that the class implements. 
Well, I wrote most of it (the infrastructure, that is), and yes, it scanned for subclasses. That's how plugins worked. If it could find them on the classpath, they were added to the gui. However, someone else pointed out a google project that does this exact thing - scanning the classpath to find stuff. Looks like the way to go.
|Q: Another fault you refer to involves developers writing their own code when perfectly good libraries exist. Why do developers do this? | A: Two reasons: By far the most common reason is that the developer doesn't know the library exists. I feel for that developer, because there are so many libraries out there that it's impossible to keep track of them all. Or maybe they just don't want to import 8 freaking thousand jar files into their project then get to deal with which ones depend on certain versions while others depend on other versions of the same jar, just so they can use something like StringUtils.isBlank() instead of writing their own 2 line function.
Could be titled "Non-essential Java, or KISS"
Installed it, but its a little buggy :) Some of the URL links to project summary, logs only seem to be working if accessed from localhost, but not from another box. Nonetheless, excellent effort! I will keep gitblit on my radar for more updates. 
search the subreddit, there are hundreds of threads about books, tutorials and other learning resources.
Those guys work in a different time continuum. What's days to them is years to us. I.e. to them Java 5 was just released and they think they've acted pretty fast with a Java 5 compatible beta of the collections lib. Maybe in two days they'll push a maven artifact out, meaning a couple of years for us to wait.
The day I became a meta-hipster
&gt; I found myself wanting to provide an alternative FileChannel implementation for the Google File System, but I couldn't, because FileChannel is a concrete class rather than an interface. Similarly, I wanted to implement a growable ByteBuffer. These are the sort of frustrations that ordinary developers feel every day Yes. I too need a grow able ByteBuffer every day.
http://web.archiveorange.com/archive/v/a1cVYjpGpL231qz6aLrb
What's wrong with Joda Money?
Probably nothing, or very little. It is nice to have standards though, as it helps to have the implementation and bug fixes outside of core Java. The JSR for the new date/time stuff was heavily influenced by Joda as well.
This question might be better posed in /r/learnprogramming.
In my experience, learning programming works best if you have a project. An android app for example.
I don't know how you were programming in Python but if you weren't using an IDE I'd recommend picking up one of those. I like Eclipse but there are a lot of people that think it sucks, it's all a matter of preference. Using an IDE like Eclipse I learned a lot about the Java package structure and class structure with things that are automatically done for you as you create new files. Built in help on functions is also really handy. I am also new to Java and found that I was able to learn a lot by diving right in and trying to use some sort of API for something and learning the core programming features as I went. Apache POI for creating Excel spreadsheets was one of the first ones I used. Between examples on Stack Overflow and the documentation I was able to start creating spreadsheets pretty easily and learned a ton on the way! **Edit**: One of the other things I recently did which helped me learn a lot about Java was creating and using a custom Exception (the objects thrown in try/catch statements that describe errors if they occur). Just Google and read around for keywords and stuff you aren't familiar with and you'll be pro in no time :). 
It's almost like Maven, Gradle, Ivy take care of that for you...
If you're starting out you should probably go with Netbeans as your IDE since it has everything you need and has wizards for all the basic application types. Do a youtube search - you can find a ton of video tutorials there.
And of course it's closed..
My opinion on this could be a bit outdated. I last studied the use of Joda Money for a project of mine nearly two years back, but looking at the current issues on GitHub, not a lot has changed. Here's my take: * The Money type in Joda, compute totals only for the same CurrencyUnit. So it's difficult to compute a total for different Money instances in different units. This is somewhat a necessity in certain domains, especially in multi-currency accounting. Supporting this more or less requires writing your own Money and Currency APIs where you allow the ability to provide an exchange rate table (or an exchange rate service provider) to use in such computations. The complexity of this varies across domains - some require historic exchange rates to be used. * The Money instance cannot be easily persisted via JPA (this is currently recorded as a GitHub issue; not by me though). Money instances are value types and are hence they're meant to be treated as Embedded/Embeddables and not as associations. If you want to use JPA and Joda Money, you'd either have to write your own API or build in support for Joda Money in your JPA provider. * The CurrencyUnit class is final and not open for extension. This may be necessary in the design of Joda Money, but then it forces you to maintain another class that is associated to the CurrencyUnit should you need to store additional properties for the Currency like the localized name, symbol ($, £ etc), separator (dot, comma), display of groups and negative values etc. So yes, there are reasons why you'd write your own Currency and Money API. Most simple apps could do with the Joda Money API instead of reinventing the wheel, but there are others that simply cannot. I hope the standard evolves towards the needs of the latter.
&gt;Okay, what are arg1,arg2,arg3? Those are whatever arguments the constructor takes. You need to know what constructors are available. Probably from the Javadocs of whatever classes you want. For example a JFrame has 4 constructors, probably only 2 you're interested in - 1 with no args, 1 with just the String constructor. The arg1, arg2 etc. are the actual arguments you want to pass in. So if you do : clazz.getConstructor(String.class); then you will have to use constructor.newInstance(new Object[] {"Some String"}); Basically, the constructor.newInstance method takes an Object array of whatever parameters the constructor expects. It's the programmers responsibility to pass the correct things in. Because it's an Object array, it means you can put any objects in that array and give it to the constructor. If you want to get fancy, you can get all constructors declared by a class, and whatever types they expect : http://docs.oracle.com/javase/tutorial/reflect/member/ctorLocation.html But again, it's the programmers responsibility to use the correct one, it won't automagically figure out which one you want. 
I think we're reading Rockytriton's problem differently. I don't think he was talking about versions at runtime, which an OSGi container would solve.
Thanks for the input, those are fair points. I did some looking into money/currency utilities recently and didn't find anything better than Joda Money, do you have any alternative recommendations? Does this new proposal address your criticisms?
Thanx bro It seems pretty much easier here learning for here!
SecureRandom's self seed if no explicit seed is set. More info: http://stackoverflow.com/questions/7608089/should-i-seed-a-securerandom
No FOSS alternatives that I know of. If you want to start designing your own API, I'd suggest reading Fowler's [Money pattern](http://martinfowler.com/eaaCatalog/money.html) and proceed from there. I believe I looked at JSR-354 about a year back and it looked promising in a few areas, but then I didnt consider it in earnest since there was no implementation available.Currently the plan is use the homw-grown API and design it so that a JSR-354 implementation may be used in a drop-in manner in the future. For every Money and Currency API available, you'll need to determine whether it suits your app's needs, and whether it can readily fulfill the needs of the vertical you operate in (so you need not require amendments in it tomorrow). An API that provides services providers to be plugged in has usually considered most if not all of the business needs. Such level of maturity arrives in an API only after a thorough understanding of the domain is obtained.
What makes you think anybody here has any idea about Minecraft or wants to help you with it?
Knowledge of Minecraft isn't required, but since Minecraft runs on Java, and my issue is with Java this seemed like a good place to go for expert help.
Nevermind, I got it working. Apparently I had to restart my computer twice after I changed the path. Thank you though.
nice!
Nice! 
I'll just put this on my Bookmarks.
A link would be pretty useful.
Give your opinions first and then maybe you'll get the link.
Link as follows http://www.ludumdare.com/compo/ludum-dare-27/?action=preview&amp;uid=25489
Send 10 BTC to 1CMHMWdNXNK3R6ojTpHSamXHVGY2E8UgzD and send me the exact requirements.
How does it compare to http://gitlab.org/?
I think they are talking about Project Sumatra (http://openjdk.java.net/projects/sumatra/). But the timing and other stuff is all wrong. 
Meanwhile, at Azul Systems... http://www.azulsystems.com/products/vega/overview http://www.azulsystems.com/products/zing/whatisit
This is a great training company with excellent trainers. Highly recommended. IT Training Courses throughout the UK. 
That's almost the description of my first night with a guy. But I didn't learn Java in the end.
Thank you very much for this link! A great resource!
http://www.simexplorer.org/
I love that guy!
I used their 1.0 platform and it was okay. Then, without warning, they decided to move to a more pay-friendly platform (aka, the free tier got a lot smaller) and I was asked to move my app over or it got removed. Then, 4 weeks later, my app was removed. I wouldn't trust them for anything free (I would assume they take care of pay customers). I also had some issues with their tools, but got them to work on my system without too much trouble.
I didn't have much trouble deploying my app on CloudBees. I'm using Glassfish 4 and I just uploaded my WAR and it worked fine.
https://www.openshift.com (RedHat/JBoss cloud) has a free tier. Amazon as a [free tier](http://aws.amazon.com/free/) but if you want easy + Amazon then you want to use [BeanStalk](http://aws.amazon.com/elasticbeanstalk/)
I've got a feeling that all these security related articles like this are written by total idiots... That was patched fucking eons ago, in both Java 6 and 7
yes. Want more? Filtering and transformations become simpler (in conjunction with the new collections library). A large portion of guava becomes much more useful (it uses a LOT of anonymous classes). Libraries like jdbcTemplate also benefit. Pretty much everywhere where an anonymous class is written you will see at least a little reduction in boilerplate.
for the love of god, these lazy-ass IT fucks need to get off their stupid anti-oracle horses or whatever, and just put java fucking 7 on machines. I am so sick of having to convince every new company that using software that is multiple years past EOL is a bad thing for security. 
Now... we wait for Lombok to enter the JDK
This is a sub for java news and discussion, not for job ads. There are sites like careers 2.0 (stackoverflow) or github jobs for this.
Generics in Java are less than perfect. They're not reified, available at runtime, or specializable, and there are some weird restrictions on what you can do. For example, you can't capture a lower bound into a variable, only into a wildcard (no `X super T`, only `? super T`), which caused a significant design problem for me just the other day.
The Metasploit module for a related bug (also unpatched in Java 6) is pretty convincing.
Try oracle javaEE tutorial ... http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf
Worth mentioning that Guava folks don't *intend* for it to be used with a lot of anonymous classes. filter/transform, Function, Predicate, are in there, but I've seen them say several times they don't want to encourage functional programming in Java because it is not supported well by the language (and presumably a lot of that stuff will be "deprecated" by Java 8)
PrimeFaces is a great way to go. Have you been looking at their demo and the source code with it? That should help some. I also recommend doing the JSF tutorials at netbeans.org. They are pretty quick and should help you with some basic architecture.
I would be much more excited about that than lambdas.
Just started my first Computer Science course this week in Java (I've been learning Python up until this point). In other words this is getting bookmarked. Thanks! 
You want to make an android operating system?
I don't mean to burst your bubble, and your enthusiasm is nice, but perhaps you should shoot for something more manageable? Android distros aren't simply Java and XML smashed together, there are a whole bunch of both software and hardware technologies working together in an Android phone. Creating your own ROM from scratch will be a very hard process, and it won't involve a terribly large amount of either Java or XML. Most of the codebase is already written. It involves a lot of Linux (how much do you know about drivers?) knowledge however.
Please explain it like I'm five. /u/CuriosityFlowsWithin 
Well, I've alredy learned Python CSS HTML and partial C#. Is that enough? /u/jimWestDesparado 
True. But I honestly need help. What do I need to do to create one?
http://developer.android.com/training/index.html you will need to download eclipse, then the android sdk. the syntax of java is similar to C# good luck, and goodnight
I think you mean you want to create an Android application as Android is already an operating system. [I think this is what you are looking for](https://developer.android.com/training/basics/firstapp/index.html)
gonna go with quick3way.java :D
Why would that be more exciting? The great thing about Lombok is that it can be accomplished without changing the language. Lambdas (and the other related enhancements) seem like the kind of thing that really needs language changes. I think a lot of Lombok should be part of the core language, but it doesn't even require a runtime library.
The official java tutorials are not a bad idea. The book core java is my personal favorite. http://docs.oracle.com/javase/tutorial/ http://www.amazon.com/Core-Java-Volume-I-Fundamentals-Edition/dp/0132354764
&gt; A large portion of guava becomes ~~much more useful~~ redundant Filter, foreach, map etc.. will now be native to the JDK. 
One word - well actually, one name: BalusC. If you google for a JSF problem and end up on StackOverflow then look out for his answer. His blog at http://balusc.blogspot.co.uk/ has some interesting bits on it, but I think the site he's setting up at https://zeef.com/ will be of most use to you - there's a JSF specific section at https://jsf.zeef.com/. MKYong also has some helpful JSF tutorials/code snippets on his site at http://www.mkyong.com/tutorials/jsf-2-0-tutorials/ - if you didn't hit StackOverflow by googling a question, chances are there'll be a link to this site. As /u/rockvilleJD says, Primefaces is great for helping out with the front end - it makes is much, much easier to make JSF sites that look presentable in this day and age. Only catch to mention is that whilst Primefaces 3.5 works fine for Java EE 6, there's some bugs when using it with EE 7 (e.g. the file upload component) - still, the Primefaces 4.0 release is only a few weeks off apparently, which should take care of any such issues.
Who would seriously use something like this ? Learning regexes is not that hard
Regex is pretty simple and useful in many places, not just java, just learn it.
Seriously... Please stop creating crappy fluent APIs for everything.
I've been rather impressed by the Java regex implementation, very similar to Perl and has lots of features.
They're written by Oracle haters.
Without reading the manual? Who would be stupid enough to try using something without actually knowing how it works? I really hope it was a bad joke...
Whatever "respect" I had for dzone (which wasn't much) has been thoroughly destroyed by them publishing this crap. The fact that someone thought that was worth sharing with a larger community is mind boggling.
Since this will be a major release, why not remove those packages - I know its an audacious thought, but isn't their more to gain than lose by dropping the extra cruft? 
Primitives are always a special case. 
Java could easily have done this in the background, offering a more consistent, intuitive API to the user.
Possibly. Likely. I wouldn't be surprised if that would have caused other complications in the monolith parser they built. It's a really simple special case to remember though.
As an java starter I actually understood that. Thanks!
If a developer *really* needed this level of handholding for regexes -- I'd tear out all this code, and write them an identical tool which did the opposite -- converting a regex into human readable code. At least that way this incredibly verbose code is localized to their machine, and not polluting the codebase. Sheesh.
The ".class" suffix is a [class literal](http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.8.2), a special token which allows you to get the Class object of a "(Class)". The reason you have to do this is because a "(Class)" isn't an instance of Class and can't be used interchangeably. They are not the same thing. "(Class)" is a container for static methods and instance methods for that class. The Class class does very different things, particularly regarding reflection. Using the ".class" token, you're explicitly stating that you are moving from normal operations to reflective operations. These should not be mixed up. Java's philosophy is (was) that different things should look different and switching contexts should be made explicit, to avoid ambiguity even if that means verbosity. Java 5 changed a few things, introducing autoboxing to implicitly convert primitives to their object counterpart when used in an object context. Before, you if you wanted to use a primitive in an object context, you had to make it explicit. This small feature has introduced ambiguity in Java's syntax. This example should make clear why Java's creators were very cautious about adding "magic" to Java's syntax.
My mistake, you're correct.
I hate all the getter and setter boilerplate in my code. At the same time I do not really want to add another dependency to take care of it. 
Especially the simple ones this API seems to be made for. 
Yep, i had a look at their showcases. But since i haven't touched netbeans in ages, i have missed their JSF tutorials. I will have a look into them. Thank you!
I kind of missed the obvious source. Thanks for pointing that out. It's on my list :)
There is no point to: java.awt.EventQueue.invokeLater(new Runnable() { public void run() { new Thread(new Runnable() { //whatever.... Whether you start a thread from within the event queue thread or elsewhere makes no difference. Once started, it is its own thread doing its own thing independently of the event queue thread. What you want to do is the opposite: new Thread(new Runnable() { public void run() { try { int times = 40; while(times &gt; 0) { final String current = Integer.toString(Integer.parseInt(counter1.getText()) + 1); EventQueue.invokeLater(new Runnable() { public void run() { counter1.setText(current); } } times--; Thread.sleep(1000); } } catch(Exception e) { System.out.println("Error: " + e.getMessage()); } } }).start(); 
You're calling `setText` from inside the worker thread. That's a no-no. The `invokeLater` method is used to run code inside the Swing event dispatch thread. That's where you should be calling `setText`. You don't need to call the Thread start inside the `invokeLater`. In fact, you can just call it inside `actionPerformed`, which is called in the Swing event dispatch thread. The `invokeLater` schedules work to be executed later. You can do the thread create/start right inside the `actionPerformed`. Also, you might want to check out [SwingWorker](http://docs.oracle.com/javase/tutorial/uiswing/concurrency/simple.html)s, which make this whole thing a lot easier.
Thank you for this, I have updated my code with this information :).
Probably easier if I show you like this: Map&lt;String, Integer&gt; That's a map that contains Integers identified by keys that are Strings. map.get takes a String as a parameter and returns an Integer. Make sense?
If you want to split only on full sentences, just check for the location of the next full stop. If the phrase length is less than 15 characters, search for the subsequent full stop, check the length of both is still less than 15, and add it to the phrase. Repeat until the phrase is longer than 15 characters.
Perhaps something like this? import java.util.regex.*; import java.util.Arrays; public class RETest { public static void main(String... argv) { String input = "hello world. my name is bob. how are you doing today abcd. efghijklmnop."; Pattern pattern = Pattern.compile(".{0,14}\\.|.{0,15}"); Matcher matcher = pattern.matcher(input); while(matcher.find()) { System.out.println(input.substring(matcher.start(), matcher.end())); } } } Though I'm not sure it's 100% what you want, you can probably tweak it to get there. Edit: output looks like this: hello world. my name is bob . how are you do ing today abcd. efghijklmnop. 
No, because those two statements contradict; you can't break up the string by every 15th character, and also have each end with a period. hello world. my name is bob. how are you doing today abcd. efghijklmnop You could achieve something like this using String.replaceAll and a regular expression, but it doesn't break it up by every 15th character; some of these lines are more than 15 characters. hello world. my name is bob. how are you doing today abcd. efghijklmnop. You could achieve something like this using the WordUtils class from commons-lang. It word wraps the string by every 15th character, but several lines don't always end in a "." Hopefully this starts you toward the right path.
Yes, more or less, but they don't get ordered like an array. You can pull out the list of indices as a set however and iterate over that (or use an iterator). At that point you can request the object with the Map.get() method.
Haha, yes. I do agree that the idea of a builder pattern for REs is quite nice but *fucking underscores?* Go away.
Perhaps i didnt explain right. it is not required to split by 15th. its "limit" is 15. i.e we are putting this into a database function. so suppose we have : "hello. world. my name is bob. how are you today? i am well. " and i want to break this up every 20th char. the first substring is: "hello. world. my name" 2nd: "is bob. how are...etc etc". the algorithm would do this: 1st substring: "hello. world." 2nd : my name is bob." (note there can be multiple sentences.
The docs are very clear on this: http://docs.oracle.com/javase/6/docs/api/java/util/Map.html &gt; Interface Map&lt;K,V&gt; &gt; Type Parameters: &gt; &gt; K - the type of keys maintained by this map &gt; &gt; V - the type of mapped values If you're new to generics check out: http://docs.oracle.com/javase/tutorial/java/generics/
But what do you do if an individual sentence is longer than 15 characters? You'll have to split it somewhere that there isn't a full stop.
It's a list of key, value pairs. The type of both the key and value in your case are Character. So you'll have pairs in it like A&gt;B ie A maps to B
Then you would go to the sentence before it. Btw the true char length is 3560. I used 15 as an example 
Well, that changes everything. Before it was easy to have a sentence longer than 15 characters (which means nowhere to split it), it's not so plausible to have a single sentence over 3560 characters (you should probably still handle that case though). Just get the first 3560 characters, find the last full stop, trim the substring to that length, and then remove that from the original text. Repeat.
[hamcrest-text-patterns](https://code.google.com/p/hamcrest-text-patterns/) can help create more readable and understandable tests. So I don't always agree with you, sometimes a readable regex (especially for tests I think) would be worth the extra verbosity.
Good call thank you for pointing this out. 
https://jsf.zeef.com looks great :) One extra pointer is right here on reddit: /r/javaserverfaces 
You shouldn't use Java Serialization for networking. The moment you want the other end to be written in something other than Java you will be in deep trouble. You should instead explicitly define the serialization to use some standard framing, e.g., JSON (although it's not ideal since it's text based). More generally, thinking about networking as moving Java objects between machines is a bad idea.
Implying the abstraction isn't there to easily serialize to JSON in a matter of minutes. (I.e, it is.) JSON is a plain-text format - like you said - which makes it much less efficient than other alternatives. I won't be in deep trouble because the entire process is abstracted via reflection - I hardly need to make any changes to serialize to JSON. I completely disagree with your point. Networking via Object Serialization is very common, Java supports it with RMI, and KryoNet encourages it. If in the unforseeable future you need to use JSON, it would be as easy as switching to using XML, etc.
RMI is another bad idea that nobody with a clue has used since the 90s. (As is reflection based serialization, by the way.) Seriously, this is not how how modern networking is done for very good reasons. The point of JSON is that you can easily find a high quality library for it in every language and platform, and when you're building a distributed system that actually turns out successful you will end up having to support a variety of languages and platforms.
What are you talking about? Java Serialization, KryoNet etc they all allow you to implement your own serilization. There is even a library implementing JSON for KryoNet. Your argument regarding "not thinking of networking as moving objects" makes no sense either. An object is an abstract concept, a Message is an Object, a Query is an Object. Anything you could possibly transmit over the network fits into the 'object' construct. Lets throw away the idea of reflection for a momment (and we could argue that) - any decent serialization library would still via some means abstract your from the raw data medium of the object.
Object, in the sense of OOP and Java, is the coupling of data and mechanism. Thinking about moving around objects is just wrong, you should think about moving data. Object serialization is not something you can abstract in a non-broken way (nor is it something you should be doing in the first place, at least not when it comes to networking). Defining how to turn internal state into a serialized representation is part of the "mechanism" part of objects, which can be completely arbitrary and is not generalizable. Any abstracted serialization, especially reflection based, is intrusive and brittle and place unnecessary constraints on the implementation. In distributed systems you should be defining interfaces and the data that is passed between components. How each component decides to implement that interface and represent that data internally is an implementation detail and not something you should set in stone (like you do when you define your system based on object serialization, RMI etc.).
Tell it what you prefer in the [preferences](http://i.imgur.com/ueq1D11.png).
NetBeans is smart enough to know that. Time to switch? It even has Eclipse keybindings.
The Serializable interface is a terrible idea. It should contain explicit methods to serialize and de-serialize, not do some intrusive and brittle reflection hacks. But again, serialization is not something that you should be using for networking in the first place. Just let go of the idea of "objects" in the context of distributed systems design. It's a concept that belongs exclusively in the context of one specific approach to programming. What if your system becomes successful and now I want to do an implementation of some component in C, and you're telling me I need to work with some serialized Java objects you're sending me? In your Java world you might be building your components with mutable objects and reflection hacks and serialization, but you should not build that into your distributed systems architecture. I might want to build a component of the system in a purely functional language where none of the concepts you're talking about here apply, and a properly designed distributed system would let me do that.
I shouldn't have to do that. Thanks for the suggestion though. I already have a bunch of stuff manually excluded there, but it's really not always a suitable workaround since I might want to use the other types of "List" elsewhere.
&gt; The Serializable interface is a terrible idea. It should contain explicit methods to serialize and de-serialize, not do some intrusive and brittle reflection hacks. But again, serialization is not something that you should be using for networking in the first place. It isn't a brittle and it isn't intrusive. Any member of that object must - in turn implement Serializable. Implementing Serializable tells the serializer what you want is default behaviour - if you don't want default behaviour than you can override it. If you don't want to be serializable, don't implement the interface. Nowhere in the object graph do you get objects that don't appreciate the serializer. I.e, nowhere is it brittle and nowhere is it intrusive. Every object understands its function in the graph. &gt;Just let go of the idea of "objects" in the context of distributed systems design. It's a concept that belongs exclusively in the context of one specific approach to programming. What if your system becomes successful and now I want to do an implementation of some component in C, and you're telling me I need to work with some serialized Java objects you're sending me? Like I said, any decent serializer will abstract the encoding and decoding process - the encoding process doesn't actually contain the bytecode for the object - just enough data to reconstruct it. I could just as easily serialize the data members to JSON. You don't have to deal with JSON in an OOP language, neither do you for XML.
How should Eclipse infer that you mean java.util.List? Because ArrayList is java.util.ArrayList and therefore the Interface should also have the same namespace?
You've hit the nail on the head. I'm a performance engineer, and the number of times I've seen developers use simple statements to query the database, then drag data over the network, just to perform filters, sorts and joins inside java. The database will perform all these functions better than you ever can...as the article states. But the reverse is also true. Querying the database repeatedly, because you assume the database will cache the query will almost always be bad. Ditto goes for assuming that database security will protect your data. On security, always use parameterized queries wherever possible, and always never assume the HTTP, RPC Objects or other user parameters are safe and haven't been tampered with when using them in database queries. Also developers often use cut-down data sets that aren't representative of the real data volumes. You should always develop and test your data access functionality against real data sets wherever possible. I once saw a million dollar project fail because of this, and some other factors.
Eclipse should check the interfaces that ArrayList implements, or the classes that it extends.
Exactly. And I should mention I really took the wrong screenshot, I meant to take a picture of it suggesting types to import (where there are only three possibilities, all of them obviously wrong except java.util.List, which should therefore be automatically imported—or at least be the first suggestion).
I find this too, I wonder if IntelliJ does a better job.
&gt; It isn't a brittle and it isn't intrusive. It's brittle because a small change can break it, for example make an incompatible change to the class and forget to change the UID (and even if you do remember, good luck with implementing backwards compatibility). E.g., deleting an unused field, changing int to long or moving the class in the hierarchy will break compatibility (and your whole distributed system). It's intrusive because it exposes private state outside the object. It breaks the encapsulation principle. As a result you can't, for example, build a thread-safe Java object that implements Serializable because you don't know when someone else might be poking at your private state (unless you use writeObject et al., you know, the methods that are not even explicitly defined by the interface). &gt; Like I said, any decent serializer will abstract the encoding and decoding process - the encoding process doesn't actually contain the bytecode for the object - just enough data to reconstruct it. You're missing the point. You should not think in terms of objects when you're designing a distributed system. It's strictly an implementation detail. Your implementation of a particular component having an abstraction that allows it to write to JSON or XML is completely irrelevant. It's an implementation detail. Between the components you need to define interfaces and protocols to move data, and stop trying to stick objects where they definitely do not belong. Your main problem is that you're complecting distributed systems design and component implementation. That's a recipe for a system that will cause you no end of problems in maintenance, extension and scaling. You have to decouple the two things and stop trying to enforce one set of component implementation details as the systems architecture.
This is one thing that IntelliJ does which beats the pants off of Netbeans/Eclipse. IntelliJ has its other issues, but they're fewer and farther between.
As someone who never used Eclipse and only used IntelliJ while learning Java and for some minor programs thereafter (after i started using an IDE that is), i just can not get myself to use Eclipse. Its just so uncomfortable and annoying to use..
This applies almost always when you're switching to something new from something you're used to.
No refactor? That's the most important feature.
I'm unsure whether it kicks in for refactoring or not.
It does refactoring, better than Eclipse does I'd say. I'm a convert from Eclipse myself and I couldn't ever go back, once you take the time to learn the shortcuts and what IntelliJ is capable of it really shines as an IDE.
Here come the Eclipse apologists. 
I'm going with 99+ percent of the time that's the class that's used, not AWT
I just learned about "working sets". It's a way to have the package explorer just show the relevant files of what you are working on.
Some good news for you! http://code.google.com/p/libgdx/wiki/IntelliJIDEALibgdx
Just fired up IntelliJ Community (open source version) - it will correctly choose java.Util.List; but even better, if you use it's "auto-correct", not sure of the correct term like the following: theList = ArrayList&lt;String&gt;(); It will actually give you a choice of all of the possible interfaces that 'theList' could be: List, Iterable, Collection, AbstractCollection, etc... This is great, since you should go with the one that's the most abstract.
Also, I just found out how to change the font size of the text in non text editor views. Follow the advice of the top answer at this link http://stackoverflow.com/questions/3124629/how-can-i-configure-the-font-size-for-the-tree-item-in-the-package-explorer-in-e It makes eclipse look so much better and gives you some more screen real estate
Okay, so it's not nearly as good as Eclipse's incremental compiler. Got it. Thanks for letting me know.
Also stupid one when you are assigning something variable = myClass.a Eclipse already knows what type is myclass.a (since it shows it when you do ctrl + space), but it still asks you what to import.
I agree that sometimes, readability is worth verbosity, but Hamcrest in particular increases readability while decreasing verbosity, so it's win/win. OP is talking about the difference between str.matches("^[0-9].*[0-9]") and str.matches(re.start().aCharacterDescribedAs(aDigit).exactly(1L).then().aCharacterDescribedAs(anyCharacter).zeroOrMore().then().aCharacterDescribedAs(aDigit).exactly(1L)); Both have the exact same information although one is (very dubiously) more readable than the other, at the cost of being about 10x longer. So it's an incredibly poor tradeoff. Hamcrest isn't a tradeoff at all, it's just an improvement.
Yeah, i have seen it, but it is still a hassle getting the libgdx project working with GWT in IntelliJ (well, at least i didn't manage to do it yet), but thanks for the link!
Ah yes, this one always irks me too.
That reply made my day. Have some gold.
IntelliJ does the same crap. Always coming up with non-matching hints, just based off the name and not the type. The only one I've seen to do it right is Netbeans.
Why thank you, good sir! :D
I know I'm going to receive the Orwellian Two Minutes of Hate for saying this, but one of the reasons Java takes a bad rap amongst the .NET crowd is the lack of a good Intellisense-like implementation. I've been working in both platforms for a few years now, trying to be "voice of reason," but the a-la-cart quality of Eclipse tends to be a huge negative with .NET developers. 
Hmm, nope. Current Kepler behaves the same way for me. Fresh download, new workspace.
http://docs.oracle.com/javase/6/docs/api/javax/swing/SwingWorker.html - Don't even bother with using Treads by yourself, this one does it cleanly.
I think it learns over time which one you are more interested in.
&gt; sometimes it seems to completely ignore classes until you type nearly 100% of the name. This has to be the single most annoying bug in IntelliJ. 
&gt; I hope that until Mar/14 they solve this limitation. Unlikely. This sort of zipWith function is not widely adopted by many collection libraries, probably due to the uncertainty of the sizes of the two collections, and the expected behaviour if the sizes are unequal. Do you just want the new collection to be the length of the shorter collection? this is what is usually done. Do you want to cycle round the shorter collection until you finish the longer one? this is how R behaves. By separating the zip and map functions people can decide how they want the zip to be performed.
Understood, thought you were commenting on the fact that a fresh install behaves that way whereas categoric's doesn't. I'm using Indigo and java.util.List is first.
In my experience it tends to select the correct choice, although not always. I think it's tied more towards what I choose most often, rather than looking at the context. http://imgur.com/xnMIzzg
OK. Interesting that the order of recommendations varies between fresh installs.
Thanks for the tip! I do wish there was a separate set for Open Type versus import suggests. 
what issues?
Umm, no? There are more Java IDEs out there. You can't compare that to that one unusuable crap called "Visual Studio". I don't know MonoDevelop very well but as your referring to .NET as .NET, I'll leave it out here. BTW: EVERY language I know has at least one good IDE with auto-completion.
In my opinion, the Eclipse -&gt; Intellij transition is far easier than the Intellij -&gt; Eclipse transition. It is kind of hard to logically explain, but I believe Intellij just has more intuitive controls and autocompletion, so when I switched from just using Eclipse to Intellij, I was as productive in 3 or 4 days, and significantly more productive in 2 weeks. That's just my experience, though.
Is there a solution that does not involve moving to other IDEs? InteliJ seems nice, but I don't like its workspace-oriented approach (in eclipse every project is by itself).
Oh snap! 1) private static final Logger LOG = LoggerFactory.getLogger(APIAttachUserAction.class); I alt-enter in, it tells me to import LoggerFactory first (why the implementation first, I dunno?!). I select SLF4J. I alt-enter again, it ALWAYS wants me to do Log4J Logger, not SLF4J logger even though the implementation that I JUST imported is SLF4J. 2) Also on the logging topic. Reminding you that I have multiple LoggerFactories available to me, I start typing: private static final Logger LOG = LoggerFactory.getLogg [ CTRL-SPACE ] Awesome! It auto-imported the factory. I'm so happy Netbeans saved me time. I go and import (selecting SLF4J instead of LOG4J - yet again). RED LINES??? WTF??? import com.opensymphony.xwork2.util.logging.LoggerFactory; W T F is that shit. I have more in my list, but honestly, I'm tired of justifying my very real experience to your zealot-inspired self. I do this over and over on a daily basis. I've just started copying and pasting the import lines from another file because it's actually faster than fighting "smart" netbeans.
Maven projects don't import perfectly. Netbeans is way ahead in this category since a Maven project is a defacto Netbeans project. I would LOVE it if IntelliJ also did this. Eclipse, in my experience, is about as good as IntelliJ. I'm sure the issue here is that the project properties can't be 100% matched up to the proprietary .idea/ format. There's a few other things that I can't remember off the top of my head, but they're minor. IntelliJ is better overall.
It took me a long time to switch to IntelliJ preference over Eclipse. Ironically I started using Netbeans at work. At first I hated it, but now I've learned what it does better, worse and about the same. Once keybindings are melded into your brain, you can appreciate each IDE for itself. That said, at the end of the day, I prefer IntelliJ.
I'm sure it could have it cached, but in this instant the compiler is failing at the parser stage, so can it actually discern the correct type based on the RHS info, without a parser that can recover from the parse failure and continue?
It's open source software. Contribute and quit wasting space.
Multi-module imports mostly. I've had issues with "standard" maven projects which are not web projects as well. Like your experience, it's not often -- but it's often enough to note.
Eclipse and NetBeans are free.
Step filters for debugging: http://help.eclipse.org/kepler/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Freference%2Fpreferences%2Fjava%2Fdebug%2Fref-step_filtering.htm
&gt; Multi-module imports mostly. I've had issues with "standard" maven projects which are not web projects as well. Like your experience, it's not often -- but it's often enough to note. I deal with large multimodule projects, multiple levels deep... one has 50-100 modules. mostly no issues, but sometimes it gets cranky and a reimport solves it (sometimes "mvn install" once on the command line as well) make sure you use a up-to-date version as if you don't you aren't getting bugfixes - if you have any specific problems, let me know, I've probably seen em.
Another one: Using sub-selects instead of joins for EVERYTHING. Yes, they are sometimes less expensive depending on your data set, but certainly not always.
&gt; no X super T, only ? super T Yes, I had been missing out on that a couple of times, with [jOOQ](http://www.jooq.org). While there's usually a workaround, I'm still left with a sore feelign very often...
Very true. This should be in yet another sequel of the linked article!
For me even notepad.exe is better. I came across crashes and /r/softwaregore almost everytime I tried to do something. IMHO it's unusuable for me. But the last version I tried was VS 2010 and I was only using standard C++ features, without any .net. and now I'm luckily on linux.
Good points. &gt; 1) Using Hibernate over an embedded SQL database to store binary blobs [...] I guess, the only efficient way to deal with lobs is to resort to JDBC and deal with them explicitly. While lobs are often OK to be loaded into memory (e.g. Oracle LOBs that are used to circumvent the 4000 character limit of VARCHAR2), they should sometimes be dealt with as streams. I'm not aware of any API on top of JDBC, that handles this apropriately. &gt; 2) Hardcoding SQL queries [...], 3) Trying to SQL-escape [...] I guess that [jOOQ](http://www.jooq.org), the library whose blog features the linked article, would be a good tool to circumvent these problems?
[The sequel to the linked article](http://blog.jooq.org/2013/08/12/10-more-common-mistakes-java-developers-make-when-writing-sql) mentions using PreparedStatements as well... The thing about (not) caching master data (i.e. data that is fetched very often) is a good point, though.
Or you could just use IntelliJ which is superior to both Netbeans and Eclipse. 
&gt; which of course has its own downsides and is far from ideal. Yeah. It wouldn't help you when you actually want to do something like class MyClass&lt;T super XXX&gt; {} Although that is useful only in very rare cases...
Are you fucken kidding? VS is unusable without resharper. VS "intellisense" stops working frequently unless you stop and recompile. And don't get me started on how SHIT the merge tools are. Heck you can't even do continuous integration with VS without TeamCity. Please seriously give me some examples of VS being good. Please I'm begging you.
Wrong.
Great read - the comments are also pretty interesting, and contain a few further links to other tests (e.g. how to test it with Java 1.7).
$$$ issues.
I suggest you fire up your IDE's debugger and step through the code to find out where your logic's wrong. &gt; but from what I understand you can't have an array of arraylists. Why do you say that? Not saying it's the right way to go, but the following's valid code: List&lt;?&gt;[] arrayListArray = new ArrayList&lt;?&gt;[81]; Finally, /r/javahelp is probably a better place to post questions like this.
Yes, I seem to have fudged this a little for the screenshot. Stage fright? Of course I usually write out the entire line in one go, including the generics for the List. And when I get to the end of the line, I'll press cmd-1 for auto-import. It will then offer to import ArrayList. Then I press cmd-1 to import the List class, and that's where funky stuff happens. \- Monkey boy
&gt; I know some people love Intellij, but that IDE is jut an uglier version of Eclipse to me. Not just that.. It's GUI builder sucks, and there's no alternative.
The editor itself isn't that impressive, but the rest of the IDE is nicely integrated with the MS stack. You never really have to leave the IDE for anything you're doing. But yeah, you pay dearly for that comfort in production later, with all the licenses.
Press ctrl-1. A lot. Use it to have the IDE generate most of the code for you. Also learn the keyboard shortcuts to open classes, display a class hierarchy, find-references and the refactor tools. 
Hell yes they will, and I am so looking forward to using them to stop having to write all of my exception blocks over and over again. Here is a good example: http://www.dreamsyssoft.com/java-8-lambda-tutorial/dry-tutorial.php 
The display view lets you execute code in the current stack frame while debugging. 
I have a similar subquestion: Are there any special features of Eclipse which no other IDE's have, or Eclipse does best? 
He even named the list as the single letter l, making him the worst coder OF ALL TIME.
Just search around for other threads like this one. There are literally thousands all giving various resources to learn from.
Or you can hit Ctrl + 2, then L for a Local, or F for a field, a few other options too.
why don't you use netbeans since you already downloaded it? 
I would suggest just writing your code in notepad and compile it in the command prompt. Do that a few times and then move on to an IDE. I have used Jgrasp and sounds like you do not have the path to the JDK set properly, or maybe don't have the JDK. I guess if you really want to use NetBeans, you can download the JDK and netbeans at the same time at oracle, and you have everything you need there.
Debugging with VS is always a pleasure.
What issue do you see ?
All of this, plus post the topic to /r/javahelp instead of here.
I was thinking about maybe a plugin or something to improve auto completion, but keep my wokflow. I guess it is not possible then.
You really should improve on your workflow. I hate people that use the argument 'but that's how I always did it'. Yeah you can continue using the mouse context menu to copy and paste, but I will see you as a noob all your life.
The Eclipse compiler is able to recover from parse failures and continue.
IntelliJ has inferior java editor? WTF it's the best editor around. What are you smoking? IntelliJ has a dark theme (since that seems so important to you), maven integration works perfectly, refactoring works across JavaScript, HTML, and XML (unlike VS)..... 
I don't care. In fact, I run my servers with the CPU governor permanently set to "performance". 
What should I include there?
I wouldn't know, I don't use wordpress
This is very weird because I've tried this on a Fresh download of kepler after I read this and I still get java.util.List first :\
[Navigation Keyboard Shortcuts](http://mchr3k-coding.blogspot.co.uk/2012/10/eclipse-tips-navigation.html) [10 Tips on being productive with Eclipse] (http://eclipsesource.com/blogs/2012/10/26/top-10-tips-how-to-be-more-productive-with-the-best-ide/)
[Java 7u21 and later will not run applets and Web Start applications](http://stackoverflow.com/questions/16083405/cannot-launch-applet-using-java-7u21) with a codebase that is not completely signed by trusted certificates. Try and find a way to run this as a desktop application or have the deployment site or the developer fix the certificate.
Just want to mention a related security issue: SQL Injection. Developers should never concatenate SQL statement with users' input. Injection has been identified by OWASP as #1 security risk for many years. 
I prefer IntelliJ to eclipse definitely, and as I said it fixes many of the shortcomings of eclipse (full dark theme, javascript, solid maven integration), but it still has that Java desktop GUI feel which looks horrendous... Also there are few small although noticeable things that eclipse java editor view (the window in which you actually code java), does better than intellij.
Special cases add up. Special cases make a system harder to learn. Speciall cases lead to mistakes. Special cases are a waste of time.
You are right that power consumption is not a concern in all situations. For installed applications on mobile devices, developers care more about power consumption. Even for thin clients (from desktop/mobile), data access/retrieval strategy affect power consumption of the users. One data center has declined new customers, for the power supply of the building cannot support additional hardware. I am not the type of green person against all things. My standard is that if there is a way to achieve the same goal with similar effort, but consume less power, then why not. Thanks. 
&gt; ~~But, even Groovy doesn't make this .class suffix optional, because of the ambiguities/complications it would cause.~~ Lol, that's not a problem with `Class.class` syntax, that's a problem with cast syntax. It's funny how Java still allows class casting, instead of requiring user methods for type conversion.
It's not magic. 5 is an Integer, not just a "container for static methods and instance methods". `Integer` shouldn't have to be prepended with `.class` to access the class. `Integer` *is* the class.
No. First, 5 is an int, not an Integer. Integer is a class wrapper around a primitive value. Autoboxing blurs the difference, and that has introduced corner cases in the language due to juggling between the object and primitive types. Java used to favor verbosity for lack of ambiguity for just this reason. Second, 5 is not an Integer, the object value is an *instance* of an Integer. Third, you missed the entire point. Integer is the class, but not the Class. The Class object is separate from the Integer class for very good reason. Integer is not a subclass of Class. They are not the same thing, and used for different purposes. Class is used by the class loader and for reflection, while Integer is used for its static methods and instance methods. Normal class operations should not be confused with reflective operations.
Please point out any language that does not have special cases or keywords, but is highly usable. Brainfuck and binary dont, but they are also monstrously difficult.
&gt; 5 is an int, not an Integer. Integer is a class wrapper around a primitive value. Autoboxing blurs the difference, and that has introduced corner cases in the language due to juggling between the object and primitive types. Java used to favor verbosity for lack of ambiguity for just this reason. Yes, this is unfortunate. &gt; Integer is the class, but not the Class. That's dumb.
Here's everything you need to know about a for loop: http://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html 
&gt;depending on the various parts of an application expand on this ? I'm not familiar with node, but having different versions of the same gem in the same application can definitely cause issues. 
When building a module maven will examine all the dependencies and choose one winning version. If you want multiple versions at the same time, at runtime, then you need to do classloader tricks. 
Without funky classloader tricks the JVM can't handle this so maven does the right thing by the JVM and picks a version. I believe it picks the highest if it can figure out what the highest is. If you don't like the version it picks you can pick one yourself by declaring that dependency in the &lt;dependencyManagement&gt; section.
I don't understand.
As far as I know, they just need to be accessible via HTTP.
Look into OSGI for this kind of thing. Maven is too primitive to directly support this.
This is just promoting a webinar with absolutely no information. I'm fairly certain you can't do iOS development with Spring.
It picks the nearest not the highest. If you ask for version 3 and a transitive dependency asks for version 8, you will have version 3.
On second thought, I'm guessing this: I'm asking JVM cast an Animal class reference to Dog and link the new Dog reference to the BigDog object, rather than really casting the BigDog object. So i can invoke all Dog and Animal methods on that Dog reference (to BigDog), but none of the BigDog methods, unless it was overridden in BigDog. What Java checks when invoking a method is: if the reference (DOG) has the reference, and if the object(BigDog) has an override. if not, Dog method is called, otherwise, BigDog method is called. an anyone please confirm my guess? thanks!
So, after reinstalling for the 15th time it never occured to you that reinstalling might simply not be the answer, so you reinstalled it a 16th time?
A maven plugin that enables the use of GIT repositories as dependencies: http://code.google.com/p/maven-gitdep-plugin/ http://code.google.com/p/maven-gitdep-plugin/source/browse/src/main/java/com/ejwa/mavengitdepplugin/DownloaderMojo.java
Casting does not directly affect the object, just the reference and method visibility. Java then invokes the lowest implementation of the method. In your dog scenario above animal3.greeting(), bigDog2.greeting() and dog3.greeting() calls BigDog's implementation of greeting() and animal2.greeting() and dog2.greeting both call dog's implementation of greeting(). You can look here for some tutorials on inheritance and casting: http://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html
There’s just one rule: if you want to do something really, really well, do it for 10000 hours. It’s valid for painting, skateboarding, Java programming, everything. If you just want to get through school, learn how to use Google.
This man is correct. Dedicate yourself to anything and you'll get there eventually -- the same applies for programming languages.
Different modules in a maven project can easily use different versions of a dependency. How are you organizing your components' source?
http://maven.40175.n5.nabble.com/Different-Dependency-Versions-in-Different-Dependencies-td4442689.html http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html http://stackoverflow.com/questions/9797334/maven-detect-multiple-versions-of-the-same-dependency http://stackoverflow.com/questions/30571/how-do-i-tell-maven-to-use-the-latest-version-of-a-dependency
I used http://codingbat.com all through high school and college, and it was a great practice tool. I ended up being the only one in my class to get the certification, actually.
If I am really doing a deep dive on a language (as opposed to just learning the syntax or referencing the standard library), I still prefer a book to pretty much any website. *Effective Java* by Joshua Bloch is always a good choice, but there are a multitude of well-reviewed Java books out there. That and learn your way around javadocs http://docs.oracle.com/javase/7/docs/api/
Thinking in Java - Eckels' books are all pretty darn good too.
Given that lambdas are lexically scoped, *myMethod* as referenced in the *test2* lambda would need to exist somewhere in the containing environment. As an alternative, try changing: public default int myMethod(int a) To: public static int myMethod(int a) And: myMethod(3) To: TestInterface.myMethod(3)
Check out [Practice-it](http://practiceit.cs.washington.edu/) and [Codingbat](http://codingbat.com/) for online practice. They're free and have lots of different exercises. I wouldn't say they "hold your hand", but they are made for learning/practicing java and trying to solve those problems will definitely give you things to google and learn about.
As i understand it, npm just downloads packages for you. Node is what lets you set which paths to look for packages so you can set it differently for different instances of node. Java solves this with the classpath. It's an execution feature, not a build feature. 
Hunt around on github for something that interests you. Even if you don't contribute a pull request, it is really helpful to pick apart the code to try to see how it works and if you can add a feature or bugfix. Just keep reading code and you'll get better.
You already have all the code, why don't you run it &amp; have a look at it with your debugger?
The curriculum actually has us using Codingbat! It's the one thing that makes sense, although I haven't really moved on to the more difficult problems. I'll keep practicing with it, thanks!
A couple of my friends who took the course last year said it's best to just get a book and work from there. I was hoping I wouldn't need to spend any money but if it comes to that than I'm more than willing. Thanks for helping out!
Maven has nothing to do with this, what you are asking is whether the JVM can handle multiple versions of dependencies in a single application. The answer is not a simple yes or no as it depends on what you are building. For example, if you are working with web applications, almost all servlet containers are designed with a hierarchy of classloaders which allow individual applications to have a level of isolation that allows one application to load one version of a library and another application to load a different one. If you are not developing for something like a servlet container, you can use a library like Classworlds to implement a hierarchical classloader which will give you the ability to use different versions of different libraries in difference components. In fact this is what Maven uses to allow different Maven plugins to use different versions of libraries - read about this here: http://maven.apache.org/guides/mini/guide-maven-classloading.html For more information about Classworlds, look here: http://classworlds.codehaus.org/index.html Also, I'm not sure exaclty how something like like Project Jigsaw may affect this, but it's possible that it will.
That is rather obtuse of them. They should only require the source.
Just dowloaded the dev guide for it and looks really interesting. Thank You! 
Check out [Rapla](http://code.google.com/p/rapla/) . 
I have 4 open source Java projects on [GitHub](https://github.com/timmolter) that you could take a look at. The simplest one, [Yank - Ultra-Light JDBC Persistance Layer](https://github.com/timmolter/Yank) is only a handful of classes and is really easy to understand. XChart is a charting lib, Sundial is a fork of Quartz scheduling, and XChange is a unified bitcoin exchange API. 
Whatever is in MethodHandleMessagePassing.java seems to be invoking the use of a Proxy. What's in there?
Yes. I have a dynamic proxy that automatically forwards call from one actor to another actor.
I understand the code alright and the result as well. I'm looking forward to confirm my understanding how the abstract idea works in the back. 
Lamda's are not merely syntax sugar on top of anonymous classes. A lambda interface must have only one method. By adding a default method you are breaking that rule, thus TestInterface is no longer a valid "functional interface".
thanks i got it to work, curious if you know how i would be able to fix if the user wrote a substring not in the string so it didnt cause an error
&gt; Does this mean that each thread has to load a class separately, and that they weren't sharing the class loader nicely? No but if you really wanted to confirm it for your own peace of mind you can put a log message in a static initializer block e.g. class Meh { static { System.out.println("Meh!"); } } This will output only when the class is first loaded. &gt; I have a dynamic proxy that automatically forwards call from one actor to another actor. Then it may be using "loadClass" harmlessly &amp; just getting it via a lookup every time. The classloader will simply pass back the same class instance object each time, so at worst it will be a hashmap lookup or similar. This is probably the "right" thing to do for the proxy. Sure, it could maintain it's own reference map to look up items by name but low-level things like the classloader are optimized about as much as is possible and it's doubtful that any name-&gt;class map within the proxy library itself will be any better. 
Simple... Kill the process and see what is up. Also if you are using Windows, javaw.exe never reports the memory it is actually using. Closer to the maximum the JVM can allocate.
If you don't know what it is then you probably don't need it. Kill it.
probably you can take the advanage of jconsole?
I've used Eclipse for years now. I've tried others but have always loved Eclipse. I feel as if the Eclipse-hate has become something "hip" to do.
I'm new to Reddit. Really I didn't know to use this correctly. I just posted only. My blog may be very simple for you and other people in here, But I think there may be even one person who likes it. It is for them who new to java. And I really appreciate your kind comments about the things I have added to my blog. If I were wrong please help me to be correct.
It showed up 184 times... so you aren't profiling long enough. Classes are loaded dynamically, so as your code runs if you keep seeing loadClass count go up then you have a problem, but 184 classes isn't much, and it is a very heavy process. Profile longer.
Your theory about the dynamic proxy being the cause doesn't make sense to me. In the trace `loadClass` is called deeper in the call stack than the proxy classes code. The profiler states that `loadClass` is called within `Actor$MethodHandler.invoke` not within `com.sun.proxy.$Proxy0.bytes`.
Are you running a Minecraft server?
Thanks. Mind if I ask why do you recommend it?
In my opinion you should publish complete source code of these classes and also works with visual debugger. The best practices general in OOP programming is one dot per line. Multi dot per line might be code smell.
Maybe getData gives you a new inmutable collection (not sure tho).
Is selectedRow an Integer?
Will give it a look, thank You.
Oh in that case will List.remove(Object) be invoked?
Ah, I see your point. 184 isn't a lot of classes by the way, it may well be that this is how many classes your code brings into the VM. When profiling is fairly standard to ignore the first test pass as this isn't representative of the live system. Most apps are pretty slow the first time through. Benchmarkers normally will drive the system through the full test scenario once, discard the results, then run the test properly. Of course, this only applies to apps that are started and left running; if an app is a run-then-terminate thing then it's not so useful as classloading etc will be happening often and should be included in the test. 
Classic "gotcha" caused by the new auto-boxing. Care should always be used when firing an autoboxed primitive into a collection. 
Actually, Lombok does change the language. Compiling code with Lombok produces different results then what the Java specification says should happen if you compile the code (usually a compile error). The entire point of Lombok is that it lets you do things that you can't do in normal Java (like write code with less boilerplate).
For those that didn't understand this yet, (and I'm on my phone so I'm not gonna analyse it deep enough to be sure) my understanding is that the first line expects an integer for the row number. Whether it is an int or Integer makes little difference due to autoboxing. The second line, however, expects an object representing the values of the whole row of data. But because of autoboxing, it will accept an int which will be autoboxed to an Integer object, which the method will happily accept. But of course it won't work because it won't find a row with corresponding values. EDIT: this problem can be avoided using generics, but this may not be possible with the API used. 
I've read the JVM specification, the Java language specification, and written my own Java decompiler. I'd say I understand how Java works pretty well, but I still don't like it as a language.
I think you need to [convert the local JPanel location to screen coord](http://docs.oracle.com/javase/7/docs/api/javax/swing/SwingUtilities.html#convertPointToScreen%28java.awt.Point,%20java.awt.Component%29)
Hm... I assume "this" points to your panel right? I think you wanna try "getPrefferedSize".
Make sure you're hiding entire window. A small Thread.sleep after setVisible(false) may help (sometimes window manager need time to repaint its stuff..)
Ok, it's definitely not getting the right coordinates. As a test, I had it try to draw a point at the supposed location of the image panel containing the image, which I use as a reference, and a point offset from that point by the width and height of the image, sort of like the top left and bottom right of the image. The top left point wasn't even drawn, and the bottom right one was drawn sort of offset to the right of the X location of the image panel, and like 100 pixels away from the Y coordinate. I have no idea what I'm doing anymore. Does someone understand what I'm trying to do and have a better approach than what I'm doing?
Thought it might be helpful to show the original image and the image that comes out. This is when using MS Paint, but I get similar results in other canvas'. Original: http://imgur.com/1xR52zl,C9xOK3y#0 Output: http://imgur.com/1xR52zl,C9xOK3y#1 Why does it start to scribble after the first 100 px or so down?
Use `jps` to identify JVM processes and then inspect their memory footprints. Or use the `jconsole`.
It can be uninstalled! ;)
This is a very bold statement. It is not a simple library switch to move to OSGi. It is an entirely different platform.
Thats odd when you think of it... Version 8 will probably have a lot of new APIs. Code that linked against version 8 is very unlikely to run with version 8. At the same time most libraries are backwards compatible for a long time. It's in the Java culture to break compatibility and deprecated methods are rarely removed. Combine that with that fact that many projects just copy some dependency line in their Pom and never update it, even though they could perfectly well run with a higher version. So if one tiny project happens to have a reference to some ancient commons logging or so lingering around, the entire app will use this ancient version if you are not explicit? This seems a bit wrong...
Best feature Eclipse has that other IDEs don't seem to have.
You could try various robot.waitForIdle and robot.setAutoDelay options to see if it change anything. The second image looks like a line drawing (maybe ms paint is out of sync. and interprets it as drag mouse event ??)
I am not familiar with the API, but if it has an ounce of sanity, it will function as follows: When you have called the above code once, it will add your class to its list of listeners, and each time the state changes, it will call the changed() method. Depending on your needs, you could add a listener for each scriptlet (assuming they do unrelated things - you may not be able to control the timing and ordering), or make one big script which you call from your "doSomethingHere(). 
Try Neo4J graph database.
I wonder if I can preload my classes before I start doing all my multithreading. That way I wouldn't get the contention problems I'm observing right? For a benchmark that does not want to measure class loading but other stuff I think it would be reasonable to optimize this bit. Edit: Adding a single warm up action to the beginning of my benchmark that causes all the of used classes to load fixes my problem completely.
The best practice is to always explicitly define anything you use explicitly. (The maven dependency analyzer can help with this). This protects your build from breaking because dependency foo stopped defining a dependency on library blarg that your app needs to compile. In practice I would recommend having a parent pom with a dependency management section defining explicit versions for common things like slf4j APIs etc. Dependency-managed versions take precedence over transitive versions. 
Tinkerpop stack may be of interest. https://github.com/tinkerpop
I like JUNG, and have used it a lot. JGraphT looks good, but every time I look into it, the license annoys me; JGraphT itself looks to be LGPL, but it's very closely intertwined with non-Free things like JGraph. JUNG's visualisation isn't strong right out the box [works great for programmers, but non-programmers don't like it], but I use Gephi for all my visualisation needs anyway.
Thanks. I have given JGraphT a try, and I find it quite usable. I just dont like the way they treated the specification of weighted graphs... I have tried to give JUNG a try, but I have some difficulty getting it up and running... I would like to use it in a project of mine, but I would also like to view the source code. The problem is that I am very inexperienced with Maven and CVS, and it seems like this is required to get started with JUNG. I use eclipse, and I can add the given jars to the build path of my eclipse project, and this allows me to use the library. However, the jar files do not contain any source code... It seems that I have to download this from cvs, and then build it with maven so that I can run their demos. Unfortunately I have a very hard time following the steps they give in the user manual to do this. You wouldnt maybe be able to help me set this up in eclipse? 
Sorry, I don't use eclipse. Can you just download the official release source zip from sourceforge?
I have managed to download the code from the cvs repository, but I cant get the demos to run in eclipse for some or other reason... but oh well, at least I now have access to the source code :) Thanks for the help!
Check [this](http://sourceforge.net/projects/jung/files/jung/jung-2.0.1/) [1] out. Get the sources .zip and add to your eclipse through project settings. Then also download the apidocs.zip and save it somewhere, and in the window where you added the sources.zip you can add the javadoc.zip to the sources .zip and then you should be all set. I don't have eclipse installed at the moment or I would be more clear. [1] I found the link to that [here](http://jung.sourceforge.net/download.html), right at the top.
Thank you verymuch, but is there anything i can do besides edit the superclass because i am not allowed to do that 
If I'm understanding you right you need to just test its class type, cast and set properties accordingly. if(myObject instanceof MySubClass) { MySubClass m = (MySubClass)myObject; // set props on m } 
Thankyou so much
do not use yfiles. do not use yfiles.
Yeah, that picture made it totally clear.
[Titan]( https://github.com/thinkaurelius/titan) may be worth a look.
Hibernate, esProc,SQL,iBATIS, R language, which data computing layer do you use in Java?
I believe you are correct, myMethod would have to be either statically imported or a method of the class defining main() in order to be called in that way.
Yep, that works! Odd, nowhere seems to have really noted this feature, there's a lot of talk regarding defender methods (default keyword), but no mention that interface methods can now be static. Thanks!
 Have some good practices. Especially OOD and design patterns.
I'm not in control of the dependency, so the ability to treat a raw git repo as a Maven repo would be beneficial to me.
&gt; &gt; &gt; They didn't like Javascript's type system so they built their own. You don't use Javascript's operators you use yFiles. And oh yeah, you don't get the source. &gt; &gt; This level of mindfucking nonsense is done everywhere in the source - regardless of language. They invent their own wheel as much as possible, and then make it twenty times more complex to use (and I mean, like, requiring heavy duty martin fowler style software engineering abstractions to like, select a brush), and then make it require 4 times as many lines of code, and all you get is something running at 1/5th the speed. &gt; &gt; Perhaps the problem is that I see your point :) My deepest sympathies 
Who wrote this "article", Billy Mays? I can't even read it. Feels like sticking my face in a bucket of virtual marketing maggots.
If you control the method's signature, generics. public &lt;T extends Object&gt; T foo(Class&lt;T&gt; type) throws IllegalAccessException, InstantiationException { Object foo = new Object(); return type.cast(foo); } You'd need to replace the "Object" in "T extends Object" with your base class. Outside a few scenarios though it strikes me that if you need to this, it may point to bad OO design.
Should be easy yo. Using javascript or server-side (better to do it client side so it doesn't tax your servers) 1) Generate the data (from servers, or whatever) 2) Sort the data (using js) 3) Display the data (using html generated from the JS) =] You can use jqeurys .append to append the HTML you generate, and if you want to be able to sort it in different ways the logic is not very different yo. you just erase that html and resort and redisplay the newly sorted table. peace
i just had lecture on threads on java. You are going to want to look at AtomicInteger and ArrayBlockingQueue. Actually, you can download the profs lecture, he posts them online. http://science.kennesaw.edu/~bsetzer/3530fa13/extra/recordings/3530fa13-0826/3530fa13-0826.mp4 and this question could get more attention in another subreddit, this sub is not really for programming help.
thanks 
This is a multithreaded webserver I wrote back in 2007 to teach myself about java.util.concurrent. Maybe it and the associated LJ commentaries can be of some use: http://www.gully.org/~mackys/jws/
I wasn't trying to make it sound stupid :) I was really asking a question. I find it odd that someone developped such a plugin and i may have missed the point.
Just get on GitHub and filter by whatever language suits your fancy. Truthfully whether you are entry level or highly experienced the only barrier to entry will be the amount of time you are willing to dedicate to learning the code base. Just pick something you are passionate about and/or have a vested interest in. For example at a prior company we used an open source IM client for our chat needs. It was painfully outdated and the community was slow - so I joined as a contributor and pushed in some much needed changes! It got me some swing experience and I learned a bit about how jabber clients work. Find something around the office that either needs creating or a-fixin! 
Wouldn't it be beneficial to pull that code down and stuff it somewhere local. If you don't have ownership over the code and can't control the source it would suck to point at a repo only to have their code change and break your project! I use a local artifactory repo that I can install specific versions of artifacts that do not live in the maven global repo's. This way I do not have to worry about the source or repo changing - unless you can guarantee that it won't (you are pointing at a specific branch that is no longer under development). Hosting a local repo also gives you the added benefit of always being available (was an added benefit for me when my prior companies Internet sucked) 
You are in /r/java - you want /r/javascript or /r/jquery. Java and Javascript, while sharing part of their names, are in no way related. ECMAScript was redubbed Javascript because of marketing reasons. Yes, it's stupid.
Maybe you should install the "cloud to butt" extension for your browser. It doesn't make the article more readable, but at least you might get a giggle or two.
This kind of /r/java marketing (and the associated astroturfing) is good in that it has helped me blacklist several products from my customer organizations already. No joke.
Is this a joke? You have a serializing/deserializing list facade?
I don't have a problem with someone adding content from their sites to this subreddit, but your only activity comes down to spamming your site which is not ok.
This is clearly the future of NOSQL storage.
In my case, it's a coworker's repo, and we have to work together to sync changes anyway. Until she gets around to releasing her own snapshot repo, I was wondering how hard it would be to use a raw git repo as a Maven repo without doing the snapshots myself.
The error pretty much says it all. Have you installed the Java Software Development Kit? If you have check you Path environment variable to make sure directory for the java.exe is in you Path environment variable.
Since java 5, you should use java.concurrent rather than low level threads. For what you are trying to do look into executor service and scheduled executor. 
Probably the PATH environment variable. (Disclaimer: not 100% on if this will work, I'm on Win7 still) First: confirm you have the JDK installed (you should have 1.7). Check C:\Program Files\Java and look for a folder saying jdk1.7.0_?? If you have that, go to the next step. Otherwise, Google "JDK 1.7 Oracle" and the first link should be Oracle's download page for the Java SE JDK. Grab it and install it, then go to the next step. Go to the start screen, start typing "environment variables" and it should be the first thing that pops up. Look at the System Environment Variables, not the User Variables. In the System Environment Variables, you should have one named PATH. What you want to do is edit it, but **don't delete what's already in there!** Simply add a semicolon (;) to the end of the variable, then copy and paste the filepath of the bin folder of your JDK installation. It should look something like: C:\Program Files\Java\jdk1.7.0_??\bin where the question marks are replaced with numbers. Then try opening a command prompt. Type in "java -version" and you should get your installed version. You should be good to go after that.
I woul like to recommend an another library, flying-saucer (https://code.google.com/p/flying-saucer/). It can generate PDF from xml/xhtml, using iText. Have used it in a big project, and it saved us a lot of time!
On a side note , take a look at Quartz (http://quartz-scheduler.org/)
I liked the post, but there are some incorrect things in it about the licensing of iText. It is never advisable to use a version before the switch to AGPL in a commercial use (basically everything before 5.0.0). There are legal issues, code issues, unresolved bugs and PDF standards that weren't implemented in iText at that time. (source: http://lowagie.com/itext2) Trying to circumvent the licensing isn't worth it imo. Especially with ISO-32000-2 (PDF 2.0) around the corner and the increasing demand of PDF/A documents.
Look at the example in http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ScheduledExecutorService.html
You seem to have some interesting ideas, but you would very much benefit from rigorously studying and practising communication and technical writing. http://www.bartleby.com/141/ http://web.mit.edu/me-ugoffice/communication/technical-writing.pdf
You might want to leave a comment on the post, then. I suspect the author will respond.
I thought you were the author :p
It's server side and a null pointer reference checking your account : you can't do much other than contact their help desk
Hexagonal Architectures? Life Preserver pattern? 2enterprise4me
Wow this is so nice. Does the main class, once it runs, support hot-redeploy, something like grails or Play! framework? If true then this is the perfect spring tool!!!
&gt;&gt; com.cengage.nextbook.url.NodeIdResolver.isStudent(NodeIdResolver.java:34) Yes it is serverside error. But the above line states that it fails due to 'isStudent' throwing null pointer. Since it works for other and not for you, I can think of these reasons.. - You are not logged in and session not established - You are logged in but for some reason it doesn't recognize you as student, are there any permission that your professor needs to set ? Think in these lines.. you should be able to resolve this.. Worse, remove all your browser cache, restart the machine and try again. 
/r/graph
Add `$JAVA_HOME` to your `$PATH`, too. If you run jar xvf archive.jar bash will search directories in the `PATH` for the jar command - `JAVA_HOME` is irrelevant for this lookup.
We used jackrabbit for one of our projects. Not a big fan, prefer to stick to a more standard approach using hibernate. 
You add $JAVA_HOME/BIN to your path so when you want to change you can just change java home. 
Thanks for the help. I looked into my path, and found out I was using the windows syntax for the path variables, when I should have been using the bash syntax.
Interesting. The full stack trace should have been generated the first few times the Exception was thrown, though.
http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/tip/src/os/linux/vm/os_linux.cpp Especially see lines 5417 and 5794. 
A good candidate for what?
Sorry, I thought it was implicit: Good candidate for something related to Java development, particularly web development.
For pay?
For compensation relatively comparable to 7 years of Rails experience.
But for a concrete development idea: Learn from others and from your own use, which commonly used JDK platform classes are a little awkward to construct. Write a simple builder library for them, in idiomatic Java style. Document it with JavaDoc. Write tests.
&gt; NIH I'm not trying to reinvent the wheel for the purpose of using it on site. I'd do it to prove I know the language well. Using a bunch of pre-existing frameworks does not show you know the language. I've met plenty of Ruby programmers who don't know Ruby but only know what they've picked up from Rails. I can go all code-monkey and learn a bunch of frameworks without learning the details, but that's not something I want to be known for. I think we're on two completely different wavelengths, when it comes to job advice.
For example, Calendar.Builder is new in JDK8. http://download.java.net/jdk8/docs/api/java/util/Calendar.Builder.html There are various other classes which would benefit from the same.
Plumbr articles are getting worse and worse.
&gt; What is a clean/modern way to organize this? http://storm-project.net/ http://akka.io/ http://dropwizard.codahale.com/manual/core/#resources http://en.wikipedia.org/wiki/Representational_state_transfer http://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol http://angularjs.org/ http://www.webjars.org/ http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/jdbc.html http://www.vagrantup.com/ https://puppetlabs.com/ http://en.wikipedia.org/wiki/Continuous_delivery http://maven.apache.org/ http://jenkins-ci.org/ http://git-scm.com/ http://www.jetbrains.com/idea/ http://www.yourkit.com/ http://zeroturnaround.com/software/jrebel/
I think you've completely misunderstood what he had to say. Most shops don't go about building their own Java stacks, like Rubyists go about stitching gems together to create frameworks. They usually pick something that works. Most places don't even go about writing their own JSON parsers, HTTP servers and ORMs, aka they dont have a NIH syndrome. If you want to demonstrate comparable experience, pick up * Jackson or GSON (this is your JSON serializer+deserializer), * Jetty, Tomcat, JBoss AS or GlassFish * JPA (preferably), JDO. This is for data access against transactional stores * JAX-RS, or some other framework for RESTful APIs (there are several) * maybe some NoSQL store like Cassandra, MongoDB (it's Java bindings) etc. Checkout DropWizard or Jersey if you want to lookup how RESTful apps are built in the Java world. And be prepared to throw out preconceived notions, or someone would laugh you out of town.
There are too many of the things you listed in java already and almost all of them conform to a java standard. How about something the ruby world has, but the java world doesn't. There is a strong build system in java called maven. The way it works is that most builds are standard affairs composed of common plugins. It would be great if maven shell was expanded or a maven plugin was created to bring ruby's guard tool functionality to maven.
Best suggestion yet. I just started learning about Maven. I could see Guard-like functionality being very useful.
The endless posting of (exclusively) plumbr links by ivom2gi, too.
Rails typically doesn't have a NIH attitude with most things. The main issue is that Rails developers have a higher turn-over rate than Java developers. We stick around for 2-3 years max. Gems need new versions because new things are possible. We don't re-invent wheels so much as we see boring wheels and re-invent them with spinning rims.
&gt; They usually pick something that works. Most places don't even go about writing their own JSON parsers, HTTP servers and ORMs, aka they dont have a NIH syndrome. &gt; Neither do Rails shops. Like I said earlier, I'm trying to demonstrate mastery over the language, not trying to push something new onto potential employers. Learning frameworks or libraries is not that difficult for me (or should be for anyone). Learning the finer points behind a language shows a higher level of software craftsmanship.
Thanks! akka is great, I am using that in another project to manage various parts of large time series. Continuous delivery is an interesting aspect - I had not planned on that. I suppose Jenkins can handle that. I am hoping that I can avoid Spring - JavaEE 7/GF4 seems to have everything I need. Any opinions on storm? How solid is it? 
Worth noting log4j does close to the same thing (at least version 1.x)... log.error(e) vs log.error("msg",e), first one is almost useless, 2nd one actually gives you the stack trace.
I think if you're wanting to get into web development in Java, you need to build a web application in Java, using technologies that are in demand. Open source it on github. Build something that is business oriented. Most places that use Java are using for LOB apps. I'm not sure that building some kind of low-level stuff is going to help you at most places. Like someone else said, they want to see that you're going to be able to help them make or save money in a business setting.
Interesting. Is this actually a bug? It seems like a contrived example; however legitimate because systems do have to roll their clocks forward/backwards for daylight savings (etc.) from time to time...
So this is a Java 8 bug? Is it a Java 7/6 bug?
You have three levels of choice. Don't let the lower levels dictate your higher level decisions. 1. Service level. Here you make the decision of what kind of a relationship you will have with your internal or external customer over the life cycle of the service. Here belong decisions on whether you want choose the cost and risk structure of Continuous Delivery, that of having a N=1-6 month release cycle, or ad-hoc. Whatever you pick, you have to create that culture, adopt that Definition of Done, and structure your testing costs and risk absorption budgeting. You want to look into how your customer organization does capital and operations budgeting, when making this decision. 2. System architecture. Whether to structure your overall service around REST, RPC, push-MQ, pull-MQ, and so on. The role and number of primary service interfaces. Which components should scale in which ways. How do component upgrades work. What are the primary non-functional requirements from the business. 3. Software architecture. Whether to use de facto or de jure standards, JEE or Spring. Jackson or GSON. What is the fundamental financial impact from software component lock-in. How has the financial impact of lock-in fundamentally changed after open source took over. Now, be vewy vewy careful that your software architecture component license salespeople don't push you around with regard to system architecture. If you let their salespeople push you around there, you will be forever in their pockets. Best to avoid them entirely, where it's wise.
http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/tip/src/os/linux/vm/os_linux.cpp line 4821 http://hg.openjdk.java.net/jdk6/jdk6/hotspot/file/tip/src/os/linux/vm/os_linux.cpp line 4724
I believe NetBeans nightly build can support Java 8 with lambda expression. 
I'd build a service with dropwizard or finagle, much more relevant to actual production java usage than rewriting some library as an intellectual exercise
That's a difference between the Java community and rails community. The Java community isn't about flash. Generally, we get the job done using the boring wheels knowing our product meets the user's needs. Some developers haven't learned that you can get job satisfaction out of meeting user's needs instead of just spinning rims. 
If you're stepping clocks (in either direction) on a live production system then you have no business being a sys-admin. There is a good reason why NTP goes to the trouble of drifting the clock relative to the wall-time to make up for motion relative to it's peers - and does not step it. Although this is a bug in the JVM, it is not something this guy should be making this much of a fuss about.
One more suggestion, not sure what you developed your ruby/rails code in, but in Java code completion makes a world of difference. Use SpringSource STS and get very familiar with Ctrl-Space
I second this. Java already has libraries for just about everything. The [Play](http://www.playframework.com/) framework is even a pretty close approximation to Rails. I would demonstrate that you can use the libraries to actually do something useful. The suggestion to build something using Dropwizard is a great one. It takes the app server configuration and deployment out of the equation.
Build a RESTful service using Jersey/Jackson
Yea, but the spinning rims are so sexy :P I'm actually one of the more boring Rails devs out there. I like writing parsers &amp; figuring out how compilers work.
Via http://www.liferay.com/web/jeffrey.handa/blog/-/blogs/liferay-certification-now-available-
&gt; I'm trying to demonstrate mastery over the language If you are doing that with the aim of doing it as a career then be aware that the high-end of the job market (e.g. investment banking) cares a lot less about it than you think. If you know how to use Spring, Hibernate &amp; can google for Stack Overflow answers which you can turn into production code FAST then you are highly valuable to the banks etc. They aren't looking for perfection from code gurus, just someone who creates results fast. Java is all about the libraries and knowledge of what libraries are available, what they do and what their limitations are is far more useful than knowing the core language inside-out. 
We used a standalone version of Jackrabbit + Apache Sling and I just find it easier to maintain all my DB configuration by defining my own DB interaction. I didn't implement this project but I inherited it. All our web apps have properties being injected at runtime by Spring from a remote properties store so we can build once deploy anywhere and the repository.xml didn't play nicely with this approach. I will admit I think a lot of this is probably down to a lack of understanding.
I respectfully disagree. The flaw in the software exists, regardless of the sys admin best practices that indicates that it shouldn't be triggered in practice. Using the system time as if it were a monotonic time counter in production code is as much a development failure as intentionally stepping the system clock of a production system is a sys admin failure. Operating systems and development platforms typically have tick counters to handle this sort of timing, based on hardware counters like HPET, TSC, ACPI timer, etc. In this instance it seems like they could utilize timer_fd instead of system time. System time deltas should be used as a timer of very last resort if at all.
I'm not sure it's clear what the problem is. So you have a database that you will be accessing with Java, and you have a web site coded in HTML and you want them to communicate between each other?
These following comments are just nit-picky things. Your code looks fine from what I can see. As well, your comment of &gt; My syllables should be 1253 but I got a count of 1270. I have no idea what you mean by this! Anyways, to nit-picky things There's a few ways you can shorten your code. For instance; if (w == 'a' || w == 'e' || w=='o' || w=='u' || w=='y' || w=='i') { current = true; } else current = false; is the same as this: current = (w == 'a' || w == 'e' || w=='o' || w=='u' || w=='y' || w=='i'); As well, you don't need to make a check of a boolean value in an if statement. i.e. if(previous == false &amp;&amp; current == true) is the same as if(!previous &amp;&amp; current) In regards to your multitude of if statments, you don't need to have the '&lt;=' in the second line; Your code (lines 102 - 104) if (roundIndex &gt;= 67 &amp;&amp; roundIndex &lt;=70 ) this.index = "8th grade student"; if (roundIndex &gt;= 71 &amp;&amp; roundIndex &lt;=80 ) is the same as if (roundIndex &gt;= 67 &amp;&amp; roundIndex &lt;=70 ) this.index = "8th grade student"; if (*roundIndex &gt; 70* &amp;&amp; roundIndex &lt;=80 ) As a guess, it seems like you're directly running this method from a public static void main(String[] args) command. As such, and this is good practice, keep your class variables to themselves as much as possible. What I mean is your variables; private static int wordsCount = 0; private static int syllablesCount = 0; private static int sentencesCount = 0; are only meant to be used by this class, and I'm seeing that by your get methods at the bottom. Instead, remove the static modifiers so you can do the following; public static void main(String[] args){ String myWord = "Hello World"; Readability myReadabilityClass = new Readability(myWord); //Calls the constructor int mySyllablesCount = myReadabilityClass.getSyllablesCount() //Doesn't need to be a static method; you're calling your instantiated class' method instead and is the preferred way! } Other than all that, congrats on working code!
Web dev jobs will require you to understand how to assemble the bricks that already exist. There is a galaxy of JSON parsers and ORMs out there already. Build a real web site using JAXB, JPA, servlet 3 annotations, Jetty, Maven. Profile and tune it. Add site search with SOLR.