We have code complexity rules that stop that. If you break them, the build fails. 
Thanks. Will check it out.
Not that either of you should have pulled rank, but I've found titles to be very meaningless from one company to the next. I'm a "senior" engineer at my company and I have 10 years of professional experience, but I know a guy at a smaller company in NYC who is a principle with roughly 1 year of experience. Based on conversations I've had with him, he could probably pass as a normal developer, not a junior, but he's barely what I'd consider senior and definitely not a principle. I'm not saying you don't deserve your title nor that your work isn't worthy of the Principle title, I'm just saying that everyone else needs to take it with a grain of salt until we know what company gave you that title and what software you work on. Edit: and naturally the same goes for anyone claiming to be a senior dev (myself included) 
If you need to call "trimtosize" on a list, you have a shitty interface on your list. Trimtosize has to do with the internal implementation. Array list has a backing array that gets resized dynamically but the user never needs to know about that. What you are talking about is a leaky abstraction. You are leaking implementation details out of an abstraction. It's exactly what I'd like to prevent in my code base.
I think it's more valuable to cultivate a developer culture that recognizes that classes have an interface without needing to "implement Interface". Thinking critically about what _interface_ a class exposes via it's public methods is just as valuable, if not more so, than constantly using Interfaces as your crutch for defining what is "public". 
When you are dealing with intermediate developers at best, sometimes it's good to over-correct until you trust them. I certainly would never reject a code review because somebody didn't extract a needless interface, if their public interface looked good.
That's fair, and I can certainly relate to being in an environment where you're surrounded by so many devs that need coaching you might be overly defensive about it. 
Additionally, if you needed a TrimToSize() on your particular implementation, the better solution would be to have a interface called Compactable { compact() } or something like that, so that you can call compact on any Compactable object to give it a hint to free up memory internally (call private trimToSize() for example) That way, you can always cast if it supports it by checking if (list instanceof compactable) ((Compactable)list).compact()) I'm certainly not a fan of how verbose java is when writing that, but that provides flexibility to expose a second interface and optionally use it if available.
Looks pretty awesome! I've been using GWT for 8~9 years now, nice to know there is an alternative. Will keep an eye out on this!
But your the one making your code hard-defined to your List type with it's own special implementation based API, that can never be switched to another list without breaking. You don't need to do it with sniffing, you can keep your class concrete and just implement the additional interface. The interface for compacting an object. It doesn't need to leak any implementation details about the backing data.
Sure. See my website: www.ldeng.net. Thanks for checking out!
Thanks for helping me to point it out. Yes, those are the courses I published on Udemy.
Oracle lost their lawsuit against google for good, they need a new revenue stream
Teoma is owned by the same people as Ask.com. Same shit, different flavor.
&gt; This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator).
You don't get my point, do you? Engineering, incl software here, is about compromises. And, in case you forgot, OOP is not only about transposing a model from reality to code, but also about reusability. If you are involved in a hipster project, do whatever. But if you are involved in a modular project, with lots of modules that, like instruments, have to sustain a Bach concert, careful design is needed.
I'm not sure why they would need Cygwin? Edit: I think you mean the script to create the jars? It's a useful script, but I assume that anyone using this library is skilled enough to create their own jar if they need to. 
https://www.java.com/en/download/faq/teoma.xml
The discount is not working on this one. Fundamentals of Angular 2 Full Stack Design A Quick Start Guide On Most Recent Angular 2 - - Start Light and Start Fast https://www.udemy.com/fundamentals-of-angular-2-full-stack-design/?couponCode=NOW ANGULAR10 $10 Can you give another link ?
there you go, direct from java... thanks __konrad! https://www.java.com/en/download/faq/teoma.xml you deslect it, and then it has ANOTHER GO at installing. Its nearly as bad as GWX. 
[removed]
Thank you as well for enrolling! Good luck!
Sure. Try the following link. Or, you can just use the coupon code "NOWANGULAR10". Also, some of the content is out of date as angular 2 was frequently updated and until recently has become stable. I'm working on updating the content. https://www.udemy.com/fundamentals-of-angular-2-full-stack-design/?couponCode=NOWANGULAR10
By Java 10 the installer will probably offer you to check out "hot MILFs in your neighbourhood!".
So... The recommendation is to return a hard-coded constant value for hashCode()?? And the author says "that's it!" like that's somehow a good idea? No thanks
The only time when you'll see a performance bottleneck due to a single hash bucket is if you have a large collection with tens of thousands of entries. But then, it implies that you fetched that large collection from the database. The performance penalty of fetching such a collection from the database is multiple orders of magnitude higher than the single bucket overhead. That's why you never map large collections with Hibernate. You use queries for those instead. But then, for small collections, what if I don't even use a Set or a Map? Maybe I use Lists for bidirectional associations because those perform better anyway. If you follow these rules, then the single hash bucket is not going to be an issue. For more info, check out my [High-Performance Hibernate](https://www.youtube.com/watch?v=BTdTEe9QL5k) presentation from Devoxx France. P.S. Just because there is a general rule for implementing hashCode as depicted in Effective Java, it does not mean that you cannot break it when you know what you are doing.
Oracle has gigantic revenue streams from their database, app server products, and many others. Sure, they missed another one from Google (and I can understand they're pissed), but doing this on the desktop is absolutely disgraceful. I cannot trust that my family will not accidentally click in the wrong place with these updaters, so I will remove Java from all machines but my own.
Its bizarre... "quick, update java for security issues! oh by the way here is some spyware that sends all your web traffic and search queries to unknown third parties!" 
&gt; Organizations have gone from sprints as a way to deliver features into a big-bang product release, to delivering features into more frequent incremental “dot” product releases, to a potentially an intra-day release cycle where a release is defined by a git commit So I guess I have a new question to ask at interviews, "Do you create releases every day, potentially from each commit?". I have no desire to work in such an environment. Right now my team is on a monthly release schedule and I feel pretty comfortable with that. I can't imagine having to release code every day.
"Sponsor offers" Instant fucking spyware. grrr. 
There's so many on facebook that want to meet me, it's good these big companies are helping them find companions in other areas too. 
 This saucy lady has two D-cups of java for you.
Look at avian on github, it's a self contained jvm so you can distribute just a single binary. Progaurd is a great obfuscation and minimization tool, but protecting code on a distributed binary is basically impossible, and is in part why software as a service has become so popular.
http://help.ask.com/ics/support/kbanswer.asp?deptID=30018&amp;task=knowledge&amp;questionID=259 this is all i have sorry, im a PC guy. 
As the de facto tech support guy, I'm glad I know about this before my friends and family start calling me for help. Seriously, this is not ok.
It should still build fine on Java 7/8, as long as you keep the target and compile version to 1.6. Genuinely curious if this is not the case for you.
You and other people like you who think the public interface on a class is an "implementation detail" that needs to be hidden.
So how do I go about signing the applet? Essentially, my server has a .JAR file stored locally and the a .jnlp is used to retrieve it when I click a button on my browser. Hopefully I've got that right.
ah, ah. I've met another idiot on reddit, a functional illiterate this time. Learn to read and understand before you comment.
What IDE are you using? Netbeans has buttons in proejct settings to do all the work for you. Eclipse, this maybe: https://wiki.eclipse.org/JAR_Signing You can also just use jarsigner yourself. That's what I did so I can sign it with smartcards at work: http://stackoverflow.com/questions/32771909/how-to-sign-a-jar-with-a-smartcard/32773423#32773423
Well, you could go into your java settings and tell it to "go ahead and run anything that's not trustworthy", but now you have a much bigger problem. Dude... self-signing is easy. Just do it.
They're still planning on trying to appeal the last verdict, for some reason.
You seek the modulus operator
Implementing a process around the release plugin can be tough though at first. I certainly wouldn't say it's a panacea but it gets you very far. The rest is up to you to implement strong release processes that everyone must adhere to.
Can you explain a little more. Right now it wants me to print numbers 500-1000 but only the ones divisible by 7
What if you install the SDK instead of just the JRE? I'm not sure but I thought these 'offers' only were added to the JRE installer, not the SDK. Dunno about the automatic updater though.
So here's my thought on this. You say you're willing to pay for the answer, but I don't think you understand what that means. My consulting rate is $200/hr (which is not crazy for a seasoned java developer), and if you are a college student I'm pretty sure you don't want to pay. I also believe that me doing it for you is unethical, so I won't actually do it. My point here is that if you actually learn how to do this stuff well you could also have a good career ahead of you. That promising career will never happen if you just ask others to do your work for you. So again, I'm willing to give you a hint here, and you need the modulus operator. 
Fuck Oracle. When will this shit end? 
First: you are in the wrong subreddit. **/r/javahelp** is for help with Java programming Second: You need to show that you have spent some effort - there as well. Third: Have you considered using some **tutorials** if your professor does not teach you as well as you think he should? Learning to program requires *initiative*, *discipline*, *determination*, and *effort*. **Post removed:** Programming help - zero effort - offering monetary compensation (also forbidden)
That's the way it's always been. But some people don't need the whole JDK (consumers), so they are stuck with the adware install attempt.
:-D
Perhaps you've already done the steps for "disable offers" ? https://www.java.com/en/download/faq/disable_offers.xml
Literally every single project you have mentioned has a similar project for python and c#. What you are describing is not the state of a language, but the ecosystem. A lot of JSRs tend to be centered around enterprises as opposed to PEPs. To add to that, python has a very different community than Java, sonething you can call the "culture" around it. For that matter if you think hibernate requires time to get good, so does django in python or activerecord in ruby or linq in c#. That has less to do with the language, but rather the ecosystem. It might be a bit easier to perceive them together for java because of the JSRs (openJPA, EE etc.), but the argument is the same. Just as java jobs might require a hibernate specialist, ruby jobs might require a rails specialist.
Probably the other language would be C, but more related to systems rather than enterprise.
Sourceforge all over again. man I hate them.
This is a tongue-in-cheek look at the state of modern JS development. I think it speaks to some of the complexity you noted, that you have to "do the work" for a year or so, before you start to feel comfortable. https://medium.com/javascript-and-opinions/state-of-the-art-javascript-in-2016-ab67fc68eb0b#.ldtk5yn2x
Just what I was looking for! 
There are certainly many situations you can find yourself in where things can quickly get out of control. If you're building something new, can control your schema totally from Hibernate, and mostly do CRUD, then yeah, Hibernate is pretty easy. If you stray from that path there are monsters that lurk in the shadows.
I've been using the Guardian source codes as a "best practice" reference. What I find interesting is that there are no comments whatsoever. The code is easily readable as it is, but I'm just curious - are the comments somehow filtered out?
I don't like managing my DDL through Hibernate. I build the tables, it just deals with accessing them. If something gets too complex then you can just write an HQL or native SQL query.
this will hardly happen because they are still bound to the JCPs, but if for example JSF 2.3 is ready (as an example since it is already ready and an awesome community contribution without the help from Oracle), why not publish it? Most of the time they are downwards compatible and upgrading will only benefit (except if the AS vendors can not handle it) but if you watch e.g. RedHats development, they also adopted the microprofile and alternatives like Wildfly Swarm. 
The reason is no mystery. Because Oracle is Evil.
i wouldn't call Java deep. there's core Java, which is pretty big in and of itself. but the things you mention are essentially add on libraries created to make using java "easier" 
DO NOT go to java.com, instead go to java.oracle.com. Get Java from where developers get it.
See Azul Zulu which I mentioned above.
This submission has been randomly featured in /r/serendipity, a bot-driven subreddit discovery engine. More here: https://www.reddit.com/r/Serendipity/comments/58j0tc/can_a_fork_bomb_be_executed_using_runtimeexec/
They aren't libraries and I would argue your "easier" notion. They are used to support various software engineering concepts (convention over configuration, separation of concerns, SOLID, etc) but it would be a stretch to argue that Hibernate makes database I/O's easier than a simple JDBC / prepared statements layer. It definitely makes it more service oriented, maintainable, reusable, etc. Why exactly wouldn't you call Java "deep" when deep is defined as having a rich ecosystem of platforms/frameworks/etc? 
It's not about this. Imagine what people think about Java after this. Not only download site looks like shit, it also install fucking search bar, wtf? And then look at Python's, Dotnet's site, it's fucking disgusting.
Not really. C requires understanding UNIX, POSIX, and how each compiler deviates itself from ANSI C, in regard to language extensions, implementation defined behaviours and undefined behaviours, static analysers and memory corruption tracking tools. Also for anyone that moves beyond the desktop, there are lots of compilers to choose from, not only gcc, clang and Visual C++.
I would start with java8 in action book especially focusing on streams I think it is the best new feature of java.
Yes all languages are like that. Usually on the religions discussion of language A vs language B, many tend to forget that a language is much more than its grammar and standard library. There is the community culture, build tools, IDEs, compilers, interpreters, third party libraries to learn as well.
i view them as libraries as they are prepackaged code that performs a function and relieves you from having to roll your own i agree, its a stretch to say the things you mentioned make java "easier" to use. they certainly make performing those particular functions easier though i won't call java deep because i think java is big (too big) and there's a difference between deep (does things very well) and big (does a lot of things) years ago, when java tried to dominate the "write once, run everywhere" market, they decided to go big
As a user of lot's of different languages over the years, I would say no, Java has a much _wider_ ecosystem than most other languages. Most other languages have frameworks that accomplish the same thing, but I don't think they number as many as Java's do. Incidentally I am noticing a move away from giant frameworks like these and back into microservices, which I'm really excited about. Java has changed a lot over the years, and the approach is finally starting to change also. And - thank you for saying it takes years to get comfortable with these things. It really does take that long and I don't see a lot of people talking about it.
I don't abstract something simple but one big God class is definitely something to refactor.
Java as a programming language is not deeper than others but it's lingua franca for enterprise software development. Its biggest value to enterprises is its JVM, ecosystem, community and tooling. When big companies and open source communities invest heavily into it - you get this very big ecosystem.
I am interested how is performace and what is the support for R libraries in Reijin? Is it production ready?
Indeed, the saying about being able to quickly pick up any language falls apart once you move across the boundaries of programming language family. It's fairly easy to move around within the C family (C, C++, C#, Java, PHP, etc) but that doesn't translate very well into something like Prolog, LISP, or anything in the ML family (which, functional programming is an entirely different beast).
&gt; I've never really experience anyone who claims to be a Hibernate specialist Hibernate is a JPA implementation, so I suspect most people use it purely in JPA mode because you can use that with other products like EclipseLink as well.
Have only used it in the test project I discuss in the link. Here are some links that discuss it's performance: - http://www.renjin.org/assets/downloads/Renjin_Road_DALI.pdf - http://www.renjin.org/blog/2015-08-28-genbench-real-world-genomics-benchmarks-for-r.html - http://www.renjin.org/blog/2013-07-30-deep-dive-vector-pipeliner.html Here's a link to their google group as well: https://groups.google.com/forum/#!forum/renjin-dev
Thank you for your answer! I'm currently studying a knowledge engineering master's course, but I will apply if the SW Dev position is still open when I'm finished. Working with Scala would be a dream come true, thank you for the suggestion.
Has anyone tried it? Whats the crack, I've never heard of it before
Honestly I've been programming Java for 8 years and the ecosystem expands faster than I can learn it. If you want to do something simple in Java, it's simple, but every day they come out with frameworks for doing really, really complex stuff. What you can do with Java gets higher and higher level. But like I said, there's standard Java and then there's the ecosystem. Java itself is relatively concise and you can learn it well enough to be dangerous in a short amount of time. What a Java dev spends years doing is getting up on build tools, dependency injection tools, mvc frameworks, testing frameworks, whatever niche you're in there's a cornucopia of tools available to you and the developer that makes a good architect is the one who knows which tools are the best to use. A typical Java interview has a few questions about standard Java and a few whiteboards, as fluff basically, and rapidly descends into a game of what frameworks you know. I had an interview ended early because I didn't know their favorite framework.
As much as it frustrates me to have to do this, thank you for finding it :)
You shouldn't fucking have to I swear. Using a computer shouldn't be this constant barrage of trying to keep control of your own computer. Windows 10 is fucking terrible at this. "Oh we discovered a extra electron in our servers at Redmond. Due to this we have reset all your default app for PDF files back to edge" "Oh here is a new update. You will install it, you have no choice. It will change things around yet again. Too bad. " "Hi there, just let me reboot your machine that you were doing work on and have it take an hour to apply a patch, oh you were busy? oh too bad." Fucking hell. 
I don't think i got it but I install it with the jdk. This is certainly shifty. 
I'm just going to uninstall it. I literally need it for ONE thing on a machine, and thats a minecraft server. NOTHING else needs it. Way to fade into obscurity Oracle you bunch of turd punchers. 
while you listed the things any dev should know, i believr java should be started on a high level, long distance, "forrest" view, unfortunately it is very hard and mentors are a few...
All of our systems are built with maven or ant. It would be impossible to build and manage our core products without these tools. Entry level devs don't really touch our core products for several months though unless they already come with a real knowledge of Java. If they don't know what implicit objects are they work on a personal project for the first month.
Not following 
[Zulu](http://www.azul.com/downloads/zulu/) is great.
TIL. Is there even a use case for this?
Fork bombs don't have to be in Bash. You can write them in any language that exposes the necessary calls. A Thread subclass that repeatedly spawns itself would behave similarly, and it is also fairly trivial to spawn new processes that recursively call themselves, either via a Bash bomb as you have suggested or through some other means, such as spawning new JVMs directly.
Yet another nail in Yahoo's coffin. Yahoo has been reduced to nothing more than the biggest malware site ever. No wonder it gets so much hate (and I'm talking a lot more different sites/software that bundle this Yahoo bullshit). This must be Marissa Meyer's great masterstroke.
It's said that Scala has a long learning curve, even if you're already a Java developer. You can spend a long time learning new uses of language features before you ever get to a single library or tech stack.
I think you are confusing Java the language with Java the platform and its many associated stacks and technologies. (Not even mentioning Java the Virtual Machine and the growing collection of languages it supports.) Java the language started off being amazingly simple. The pace that it has added some complexity seems to have increased - driven by other languages and technologies nipping at its heels. Lambdas and annotations for example: arguably they cut down a lot on verbosity and boilerplate but they take more getting used to than back when HotJava was still a thing. The Java platform and associated technologies have grown exponentially faster. Python's stack is comparable: lots of libraries, packages, and frameworks to accomplish goals similar to the Java world. JavaScript is worse, in my opinion, because of the rapid churn in the latest accepted way to do anything it seems. That community has been complaining about fatigue from the churn in recent years and seems to be getting a bit worse as server side JavaScript gains a footing. I gave up, for now, trying to keep up with JavaScript.
&gt; Who in his sane mind would do such a thing? No one doing agile or scrum ends up sane, but if you do either with 2 week sprints you're probably doing this. No way you want to check all your code in in the middle and have it fuck up your build (I say from a LOT of experience of exactly that happening). Yeah, you can do branching and merging, but you have a lot of stuff to do and not a lot of point in merging your code into your branch when you're the only person who's going to see it, so you usually skip it until the final merge at the end.
Can you really separate Java "language" from it's ecosystem? For example Hibernate is just an convention-over-configuration ORM application written in Java and used by other Java applications (the ones you and me build). If I were building an eCommerce application I could write a custom ORM application instead of using Hibernate. However this would be bad practice because it takes time away from the applications core eCommerce functionality (single responsibility (not in the OOD sense)), and it already exists (reuseability in enterprise sense). Bottom line is most frameworks in the Java ecosystem are nothing more than Java applications themselves. Therefore I wouldn't make a distinction between the two. Additionally I would expect a truly senior Java developer to be knowledgeable about some topics related to the JVM (very basic tuning, general understanding of the garbage collection mechanism, if JVM stack is an actual LIFO stack, if the JVM heap is actually a data structure heap, where the call stack trace fits in, what does the JVM stack contain (and how does it operate), and what does the JVM heap contain (and how does it operate/when is it initialized)). I would not expect a senior developer to be a service matter expert in JVM. They are usually not developers in the traditional sense. I completely agree with JavaScript. I don't use JavaScript libraries at work beyond vanilla JavaScript, JQuery, and AlloyUI (based on YUI), but I am mostly a backend dev. I've also used Node/JPM/NPM with Mozilla's webextensions/addons to build a much needed software environment manager and QA tool for our Java, C#, C, AutoCad with C#, and PHP developers. I have forked an open source project that's bundled in Kali and extended the scope greatly. Hoping to get this bundled in the next Kali distro. I will put all this on my github sometime soon. PM me if interested. 
Yeah, I'm with you. It sounds great but there's usually a catch somehow, at least when dealing with a for profit company. It looks like they sell specialty services to provide embedded java. I wonder...
That's the main difference between a "framework" and a library. A framework is not just a repository of code but also a particular set of conventions on how that could should (or can) be used. When using a framework you're signing on to its conventions and opinions. There's frameworks that are fairly flexible and not very opinionated and others that are rigid and highly opinionated. I think a lot of maintainers of frameworks can't or don't honestly assess their own levels of flexibility and the depth of their opinions. Often it's only once you get deep into use of a framework that you see these aspects clearly. Doing X isn't really supported so you have to hack in Y, R, and *e* to get X working. Then you've gone off the reservation to a realm not covered by any documentation or StackOverflow answers. Of course not all frameworks are bad. Nor do popular frameworks not cover a majority of use cases for their domain. Good frameworks can save a shitload of time and effort. Bad frameworks are tightly coupled messes that make you write in the conventions and paradigms of the framework rather than the underlying language. 
&gt; I've worked 3 places where they've done agile and it's always been the same. So basically you experienced 3 different companies doing it wrong and therefor agile is wrong. I work as a consultant and have been in a lot of different projects. Some doing agile completely wrong (like you're describing) and others doing agile right. If a company moves to agile the part of the company that has to make the biggest chance **by far** is management. If you actually implement agile properly the first people that become redundant are actually the fat layer of middle-management many companies have. Of course if you ask a bunch of managers to basically fire themselves that's not going to happen. Here at ING Netherlands agile was implemented properly. This did involve a lot of middle-lower management roles simply [disappearing](http://www.reuters.com/article/us-ing-groep-strategy-idUSKCN1230D3). You weren't in real agile environments. You were in Agile-in-name-only environments where management paid an expensive Agile consultant, only took the bits they liked, called it Agile, and now have even more micro-management than before. Heck; they might have felt they needed to hire a few more managers because they were so damn busy. I've seen this exact same thing happen in quite a few companies. It's not the fault of agile though; it's the fault of bad managers doing what they do.
You can also use [JavaCC](https://javacc.java.net/) as a parser generator. It seems a bit simpler to me than ANTLR.
If you're installing the oracle jdk rather than the jre then this yahoo stuff doesn't happen anyway. I realise you my be aware of this and avoiding oracle as a matter of principle, but I thought it was worth noting.
Sorry, but my critique will be destructive, but please don't take it personal. Your tutorial is among the worst that I've read so far. It feels as if it was clobbered together from the study notes of a beginner. There is so much wrong that basically a complete rewrite is in order. This is definitely nowhere publishing ready, nor quality material. ---- Check your spelling and grammar. There are plenty errors, e.g. "Also make sure that you filename..." should be "you**r**". ---- Did you check your sample snippets? Most of them wouldn't even compile. ---- Your Links to the IDEs are not working. Please, put up IntelliJ Community edition in the free section to clarify that there is a free version and remove BlueJ (which is not by "BlueJ Team", it is by the "University of Kent") - this crappy piece of software creates more problems than it solves. ---- Use a *proper* code formatter plugin (with syntax highlighting) that also obeys indentation. Your code blocks are terrible. ---- Next *major* complaint: You're not adhering to the [Official Code Conventions for the Java Programming Language](http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html) - this is a complete dealbreaker and no-go for a tutorial. In Java, + **Class** names use *PascalCase* (first letter of every word capitalized) `myFileNameHere` is wrong and should be `MyFileNameHere` + **Variables** and **Methods** use *camelCase* (PascalCase with a small first letter) + **Constants** use *UPPER_SNAKE_CASE* + Curly braces even for single statement `if`, `while`, `case`, etc. statements are mandatory --- Your "keywords" page is useless - no real information there ---- The "Print" statement examples are wrong. The first one would print `HelloWorldList` because the `println` is the last statement. ---- Variable types: final char letterOne = “x”; Here, you have introduced *multiple* errors: + Typographical quotes - need to be straight quotes + `char` values are in *singe quotes* `'` On this page there are multiple such errors ---- Operators page: / Modulus Wrong. This is **Division** — Subtracting in increment of 1 Your formatting converts the double minus into a dash Your description is horrible. It should just state "Decrement by 1" - nothing more ++ Adding in increments of 1 Again, rubbish description. Should be "increment by 1" &lt; Value A greater than Value B Completely wrong. It is "value A is **less than** value B" (as a guideline, the smaller number is where the "beak" is) This repeats for **all** your comparison operators. if (numberA &amp;&amp; numberB &lt; numberD){ What the hell? This comparison does absolutely not do what you think it does. I doubt that it even will compile. Correct would be: if ((numberA &lt; numberD) &amp;&amp; (numberB &lt; numberD)){ Same here: if (numberA || numberB == numberC){ ---- Arrays: This will not compile: int[] numberOne = {1,3,5,7,9}; System.out.println(Arrays.toString(numberOne); System.out.println(numberOne.length); System.out.println(numberone[0]); because you miss a closing parenthesis on the first `println` and have misspelled the last variable. The output is: [1, 3, 5, 7, 9] 5 1 And not what you wrote. Arrays are printed with square brackets, not curly braces. [Proof](http://ideone.com/kdbK2Q) &gt; Then we printed the length of the array we got 6 because remember we start at 0. Completely wrong. The length is reported as `5` not as 6 because there are actually 5 elements in the array. The last array index will be 4, not 5 because we start at 0. ---- ArrayList: The `import` statement is wrong: import .java.util.ArrayList; There is no `.` before `java` The way you declare and instantiate your ArrayList is wrong because you will use the *diamond operator* to define the type of the ArrayList (otherwise everything is an `Object`) and also, you should "program against the interface", so, instead of: ArrayList myFirstList = new ArrayList(); use List&lt;Integer&gt; myFirstList = new ArrayList&lt;&gt;(); Again, the output is wrong. [Proof](http://ideone.com/XavunV) [10, 20, 30, 40, 50] 10 5 [20, 30, 40, 50] [] ---- If statement: if ( test = 10 ){ System.out.println(“paper”); } if ( test = 20 ){ System.out.println(“scissor”); } Both wrong. You use *assignment* (`=`) instead of *comparison (`==`) - this carries throughout the whole page. ---- Switch statement: You are missing the `default:` in all your examples. Though not mandatory, the standards (which I mentioned above) dicate that it has to be used, as well as curly braces.
It's also not "to help other developers". It's to generate ad revenue. EDIT: I think you spend way to much time analyzing that 'content' :) I lost interest when class names didn't start with an uppercase letter.
&gt; I think you spend way to much time analyzing that 'content' :) Teacher's and proofreader's habit. Both of some previous jobs I did.
&gt; The only time when you'll see a performance bottleneck due to a single hash bucket is if you have a large collection with tens of thousands of entries. Hmm, I'd love to see real world experience backing this up. Your strategy is turning an O(1) `get()` call into O(N). That's a *major* increase of algorithmic complexity, and I've optimised tons of these problems in the past because someone said "you won't have the problem" (they weren't related to entities, though)
It's not about providing an equals/hashCode implementation that preserves consistency and avoid potential bugs. As for performance issues, remember that premature optimization is the source of all evil. Without a measuring that this hashCode implementation is a real bottleneck, would you compromise the consistency property? That's the question.
If you want to try modern model-based techniques, have a look at the tutorial for [Xtext](https://www.eclipse.org/Xtext/) (textual syntax) and [Sirius](https://www.eclipse.org/sirius/) (graphical syntax).
Decreasing algorithmic complexity is certainly not as premature as tuning something to gain 1% speed, but who am I to challenge this premature optimisation cargo cult :) (I'll just keep making money cleaning stuff up that could have been easily optimised "prematurely")
You're perfectly right, but is it the job of the designer of the entity to decide on algorithmic complexity, or of its user?
Since when a single-bucket HashSet has a O(2^n) complexity for searching an element? It's O(N). I didn't say that algorithmic complexity is not important. I said that you need to know your data access patterns, that's it. There's a reason why you Domain Modeling is important, of course. So, the choice of JPA mapping makes a lot of difference when it comes to performance. If you have a one-to-many association and the many-side has lots of entries, you don't turn that into a @OneToMany mapping. [I already talked about that](https://vladmihalcea.com/2016/06/28/14-high-performance-java-persistence-tips/). As for N+1, that issue can be detected [right from the testing phase](https://vladmihalcea.com/2014/02/01/how-to-detect-the-n-plus-one-query-problem-during-testing/) as well. As long as you measure and test everything, and you have an insight into your application, then you can better reason on what design decisions you can take.
There's a reason why you have senior engineers and architects when it comes to designing JPA entity mappings. Only if you understand what are the trade-offs of every entity relationship, then you can take the best decision of whether to use a certain entity association or not. It's exactly the same when modeling a database schema. Do you leave that to inexperienced developers? If you are mapping a @OneToMany associations andthe collections has thousands of entries, you are already in trouble. The fetching cost is going to be the first bottleneck you are going to experience, long before the O(N) HashSet issue. By the time you experience the fetching penalty, you already need to replace that association with a query.
Ooh, I wish I had known this when I was arguing on twitter. So, bags *are* more useful after all ;) OK, I'm seeing myself out.
You're right for that use-case. I said it somewhere else where I mentioned that I don't really specifically mean the stuff I've said in an entity context (which are special beasts). Which probably makes this discussion (or at least my part of it) not very relevant.
You talked way too fast during that slide ;)
No, it's not. See js community for example, would rather stay away from that mess.
I spent years trying to convince Java developers to represent associations between entities using `Set`s instead of `List`s, and I substantially failed. So what I think is pretty much irrelevant here. I certainly agree that you don't map associations containing thousands of elements to a Java collection. That's a pretty much useless thing to do. You're always going to use a query instead. So I don't think Vlad's advice is completely unreasonable. However, as you guys know, it's definitely not the same as *my* advice.
You're telling *me* :)
&gt; There's a reason why you have senior engineers and architects when it comes to designing JPA entity mappings. I guess that is the key statement here (and in many other discussions). It looks so easy. It isn't. &gt; Only if you understand what are the trade-offs of every entity relationship, then you can take the best decision of whether to use a certain entity association or not. Which is crazy, when you think that SQL only knows to-one (FK &gt; PK) and to-many (PK &gt; FK) and all collections are simply multisets / bags. Was all that complexity really needed? Perhaps. But in many cases, you'll run a query anyway... &gt; It's exactly the same when modeling a database schema. Do you leave that to inexperienced developers? That is much easier in my opinion. Just put a PK/FK, possibly an index on the FK if you're doing nested loop joins, done. I will definitely quote this some time in the future, though. It takes an architect to design JPA entity mappings. Designing a database schema is much easier. Check mate ;) &gt; The fetching cost is going to be the first bottleneck you are going to experience, long before the O(N) HashSet issue. OK, you're right about that.
I guess it is as critical as installing the Yahoo toolbar.
Java Software Engineer: as I set up a new work environment (I usually use CentOS), I immediate install the Oracle JDK and remove the OpenJDK. Can you give me a good reason why I should just use the OpenJDK instead. I never use it, and I guess I ignorant of it, so this should explain my behavior.
This is my go to installer for Windows for most things: https://ninite.com/. I'd like to also recommend using a VM solution for your development needs. I never understood why these tech companies force us into using Windows (the worst environment to develop in) as our development environment. Develop on Linux and test if your software works on Windows. They want you to be able to receive emails and other annoying communications throughout your day. Software engineers/developers need time to focus and all those Windows communications tools do is ruin that focus. [VMWare Workstation Player](http://www.vmware.com/products/player/playerpro-evaluation.html) and [VirtualBox](https://www.virtualbox.org/wiki/Downloads) are very good solutions. You can download the Linux flavor you like (e.g. [CentOS 7](https://www.centos.org/download/)). You can install git and be a fully functional engineer in a few hours. I am telling you, it is so worth. There are a lot of built-in tools and tools you can add that will help you develop better products. When I use Windows as my development environment, all I here others tell me, if I want to use some of those tools, install Cygwin. Well folks, that's just basically Linux.
Java and complexity: you don't say lol
Now that OpenJFX is ready for prime time... it would awesome if you guys (or Zulu) would finally include JavaFX in your OpenJDK builds. 
Firmly disagree with you there I'm afraid. Whilst Java has both a widespread and widely used ecosystem, especially in businesses, I reckon C/C++ is much, *much* wider.
I would propose the opposite approach: Instead of starting by defining a complex grammar, first define and implement a simple stack-based virtual machine and a simple machine language for it. Then a more complex language that you compile into your machine language. A good resource is Nisan and Schocken: "The Elements of Computing Systems"
How does that change what I wrote?
[PEPs](https://www.python.org/dev/peps/pep-0001/) &gt;PEP stands for Python Enhancement Proposal. A PEP is a design document providing information to the Python community, or describing a new feature for Python or its processes or environment. The PEP should provide a concise technical specification of the feature and a rationale for the feature. [PEP-8 The Style Guide!](https://www.python.org/dev/peps/pep-0008/) Python has a very different culture around it, baked into the language and quite often the code. If you crack open a python interpreter type `import this` or `import antigravity` you'll see some easter eggs. Tracking down what `import this` actually does is a nice little joke in itself. Hope that helps!
Thanks, Gavin. It's good to have your opinion as well in this very heated conversation.
Seems to be filled with complete beginners, or "MEAN" hipsters.
Yahoo's death spiral is the slowest I've ever seen. 
I wasn't focusing in infrastructure but yes, agreed, Docker is a hero.
Rustic, but you can't argue with the logic!
If you'll forgive a somewhat pointless internet debate. What is your reasoning? C/C++ covers; * Firmware * OSes * Servers * Web Frameworks (I'll admit here, they're not hugely used) * Web browsers * GUIs (Incl. Above) ...and the insane amount of libs which are written in C or C++ which have bindings to other languages. That's a pretty broad scope that I don't *think* Java covers. Venturing out of my comfort zone, I'm under the impression that C/C++ has less of a cohesive ecosystem (I don't play around with it much), but I'd like to think you'd be hard pressed to say it doesn't exist. 
You are aware that ORACLE actually is an acronym, right? "One Rich Asshole Called Larry Ellison"
I would very much hope that Google does not take control of Java. Google is too far spread and has its tentacles in a wide breadth of technology. Java at Google would not be the most important technology that they have. Also, OpenJDK is the reference implementation and is fully open source (under the GNU GPLv2). Even if Oracle decides to close source it (for some suicidal reason), there would likely be a massive fork where it can continue to be ran by the community. 
I've tried it. I have no connection to it. I am just aware of it. How I used it: Unpack it. Don't "install" anything. Simply execute it's jre/bin/java.exe with parameters of your classpath and/or jar and/or class to execute. Seems to work great. I've tried on Windows and Linux. I've tried running Eclipse under it. I think it is simply a commercial company providing a service of providing pre-compiled ready to use OpenJDK and paying to pass the certification test.
I believe Red Hat provides precompiled JDK builds also, but I think you have to "sign up" to get them, which I will not do out of fear of systemd.
Every time we try and do that we run into how OpenJFX makes a mess of dependencies and build systems. We try really hard not to bundle dependencies, and especially dependencies that might involve security updates (like codecs). And OpenJFX wants particular versions of dependencies and bundles them in. Unlike OpenJDK's autoconf/makefile-based build system, they also use Gradle as a build tool. It doesn't look so bad until you look at the dependency chain :(
yeah, i just got an answer to that :D... I thought that things on arraylist become a simple text... sorry for stupid question, but in my defence our professor is very young and very new and sometimes he thinks that he explained something, when in reality he just made things more confusing...
The sense of entitlement here is very disappointing. Someone gives away source code that took them time to developed, and all the comments are along the lines of 'its not worthy of my time'.
This is better? items.removeIf(i -&gt; predicate(i)); Where is i initialized? What is i? What controls i's lifecycle? What if a control optimization needs to be introduced for either "i" or for the loop as in a break that /r/i_dunno points out? Surrendering algorithmic control to Lambda one liners does not seem better to me. 
So as others have said, other languages have basically all their equivalents to these libraries with their similar learning curve. (Although Java seems VERY heavily into enterprise-y acronyms that kind of make me roll my eyes coming from Ruby.) The thing is, even though Hibernate is probably wildly different from ActiveRecord, they both do the same job, and you can start learning ActiveRecord based on its differences from Hibernate, just like you would learn a new language by its differences from Java. At some point you will have basically seen it all, and I expect you are getting pretty close with years in Java. As a side note, I have found that a lot of the tooling in other languages is a reaction against the absurd difficulty and poor developer ergonomics of all the XML-based java tooling, and it will be easier to use.
Just look at AOL. They have a couple million subscribers still to this day.
To be precise, there's no concept of "function" in Java. Lambda is just the same as anonymous implementation of functional interface (an interface with one and only one public method).
Measuring performance without JMH? ;)
Doesn't sound like something I want or need. I can compile openJDK and don't really care about any certification tests for Java
No trolling/derogatory/offensive comments. This is an official warning. Next similar comment will result in a ban.
&gt; What if a control optimization needs to be introduced for either "i" or for the loop as in a break that /r/i_dunno[1] points out? &gt; Surrendering algorithmic control to Lambda one liners does not seem better to me. Then `removeIf` is not the right tool for the job. It's nice when you need it, because it makes things simpler. But you can't do everything with anything. You have to pick the tool you need, which won't always be `removeIf`.
It's not applicable in the USA.
Yes and No. Java comes with a vast array of objects. Languages and as a converse C and C++ have very little. Objective-C has Foundation and UIKit but on linux Objective-C has very little and you need to use other libraries. Basically what I'm saying is that some languages are basically just syntax and others have vast associated libraries.
I had a look at the oracle java 8 implementation of Hashmap. It uses an array for the hashmap table. On collisions, it uses a linked list (binned) to store the objects and if the bin becomes too big the bin gets converted from a linked list to a tree. When adding elements to the java hashmap, it will resize the table if the number of objects in the current table are above some limit. Resizing the hashmap actually means creating a whole new array for the table and putting all the old objects into the new table. If you have no collisions (perfect hashing) then each bin will contain max 1 object. When removing the element the position will be nulled (marked as deleted). There is no call to resize the table, so deleting from a hashmap does not actually reduce the memory footprint of the hashmap. Arraylists do not resize either, but they have to shift all elements to remove the hole left in the list when an object has been removed.
Thank you!! This is a lot of useful feedback. I will be fixing based on your comments.
I find it funny that people criticise lambdas as "magic", yet are ok with polymorphic methods, try-with-resources and wildcards in generics. 
Yeah, maybe it's just a matter of getting used to it. Then again, how far is it OK to stretch a language just to please young farts?
Well, you were just doing it wrong. I've had years of 2 weeks sprints, it sucked ass (mainly due to quality drop at the end just for the sake of completing "committed" user stories), but committing in the middle was never a problem, the only problem was committing something a day before the demo, but that was a problem only when testers forgot to disable automatic overnight redeploy on an environment which was prepared and tested for the demo, and something broke it. We did branching only for really big stuff with a high risk of problems, and for releases of course.
Date, LocalDate and many other basic type are now supported.
To be precise, Java Lambdas _don't_ compile to the same bytecode as anonymous inner classes do. In fact, Java 8 introduced new byte codes (eg. which is the reason you can't use "ye olde" versions of Spring with Java 8). For more information you could search on the interwebs for "java 8 lambda bytecode". There's some really good writeups. This looks credible, but unfortunately I didn't read it in full. I apologize. https://www.infoq.com/articles/Java-8-Lambdas-A-Peek-Under-the-Hood I'll grant you that I just taught Java 8 lambdas and Stream API recently by using your statement as part of a demo. I utilized Stream API using anonymous inner classes, and later converted them to lambdas. Things clicked with that explanation, but it limits further learning. Did I fall for Cunningham's Law here :P
"They didn't even ask me! ....oh yeah...there it is..."
As long as 32-bit Windows exists, there will be a need for 32-bit applications.
One reason more to use OpenJdk.
I found this script on github that seems to work OK, at least for linux. It uses a wget header flag to tell the site that the box has been checked. Though I suppose the openjdk or homebrew would be easier. https://github.com/rkennesson/dotfiles/blob/master/java_download_install.sh
&gt; The world is changing and it scares me
Technically, yes, sort of, but it's not installed in a way that the jdk can be used as a standalone jre. You typically need both so that apps can still run using the jre outside of development. 
How often are you installing to get to this point of frustration? Why not read the prompt and just accept? I get that oracle hasn't done well for fostering Java, but this is entirely an EBCAC.
And Ninite and [Chocolatey](https://chocolatey.org/) do the same thing on Windows.
You should clarify that these are no *beginner* tutorials. This is all more advanced material.
I know, but it's a slightly ridiculous question, to which the answer is "no".
Yeah hash map might have collisions but in general it's still considered O(1). That's the reason why it is very important to choose a good hash function. Nice catch on article's mistake!
Sorry, but seriously, don't fix it, forget it. There are so many excellent quality tutorials around that have been written by professionals with so much more experience and knowledge that you have. They are years ahead of you and you won't stand the slightest chance without those years of experience that you could ever stand up against these professionals. Writing tutorials is not an easy task. I speak from experience as I have written courses that are now part of the UNESCO global computer training syllabus. I have been a professional instructor for over ten years. I know a tutorial without potential when I see one.
That's what I did, but that's not helping me in this case. Here are the screenshots anyway. http://imgur.com/a/htnpe I googled the whole day and tried everything. Trust me. It really seems to be a java on linux issue :/
That's so weird. Any ideas? Gc seems to run, but top tells me otherwise
Are you running this in an app that is creating a large number of threads on a server with a reasonable number of cores? If so, on Linux, the memory usage can skyrocket due to memory arenas. This is memory outside the standard heap allocated via Xmx/Xms settings. Try launching your application with the environment variable "MALLOC_ARENA_MAX" set to '0' and see does that resolve your issues? This will disable the use of arenas, and hopefully keep your memory footprint at a manageable level. 
And reading the sidebar. E.g. the "related sub-reddits" section, or the big fat banner stating "Please seek help with Java programming in /r/Javahelp!".
Thanks for the response, I was unsure but SpringBoot seem's to elevate the barrier to Spring a bit more for me. 
Windows: choco install jdk8
you are supposed to send the profiles and not screenshots :P
Also linux? What JDK versions on both machines?
This is help with learning Java, so the proper subreddit would be **/r/learnjava** where the **sidebar** has a **Free Tutorials** section with excellent tutorials. These tutorials guide you through the whole process including setting up your development environment. Later, for programming help, use **/r/javahelp**. **Post removed**: learning Java
Maybe this is relevant? https://bugs.openjdk.java.net/browse/JDK-8156051
Sometimes you can get away with it, but then you have to exercise judgement when it's okay and not. On a team based project I would always put the layer in because I value consistency over brevity. Sometimes it's better to do the extra typing even when you're just copying fields one to one. People tend to replicate patterns they see. I'd rather have lots of dto/view objects than provide the chance for a db/view mudball to emerge
Also you can check out if something like dozer is right for you
"It's almost six months since Java 8 has released" ಠ_ಠ
Die you run the same build on both machines or compiled and run on each machine? Are you Sure that the jvm runs on both machines with exact same jvm Parameters? Maybe one of them has global JVM args Set?
Chocolatey......yeah....right
Would be nice to hear why you have such a bad experience with Spring. I used both and although I like Play! a lot I was frustrated by the fact that the developers don't give a damn about backwards compatibility (every upgrade was PITA). Also sbt is a mess ...at least how play is using it.. Care to share your experience ?
Where do I start... xml config, annotation auto-wiring magic, debug hell, type errors occurring at run-time, interminable exception trace errors, bloated kitchen-sink design ethos, ClassNamesThatSeemToGoOnForever, Introspection/Reflection madness, aspect-oriented run-time injection of code, ... Watching a Spring app start up, with full logging enabled, makes me feel ill - *what the hell is it doing?* It's a dreadful, insane solution to a problem that doesn't exist.
Does Intellij work with open jdk now?
I didn't get to see his other presentations, he seems very proficient, does he?
great stuff
Wow, that is a really good presentation.
I didn't know they had Java back then.
I'm totally doing this now.
Is this really a thing?
They did, I always programmed on my 300 BC iStone.
I started with Java 1.3 and don't understand the hype over Java 8. Java 5 was the release that turned Java into a language I liked to work with. With that I want to say that Java was not better back then.
It's not generally considered to be O(1), though. It's generally considered to have an *average* complexity that is O(1) and a *worst case* complexity of O(n).
Your comparison between Java's and JavaScripts ecosystem is spurious. Your insinuation that the "1 year commitment" is an overestimate is equally as dubious 
It really depends on the developer's flexibility and intelligence. Every programmer is different. I do personally know people who fit both categories. The organisation's code quality is also another factor in this equation.
Honestly I always thought it was required to be called "args" since I've never seen any example or code otherwise. https://docs.oracle.com/javase/specs/jls/se7/html/jls-12.html#jls-12.1.3 Also varargs is apparently acceptable these days. What a world.
Probably because it felt like every other modern language pre-8 was leaving Java in the dust. 8 brought it up to some relative level of parity.
Excellent talk, loved the way he explained java's backward compatibility philosophy
We live in bedeviling times.
It's just an array. You can call it whatever you want.
Venkat Subramaniam has been speaking about lamdas-functions even great part of java world doesnt aware. great talk
http://blog.scalac.io/2015/05/07/encog-dsl.html
Also on the fun list: catch (Exception e) { RuntimeException up = new RuntimeException(e); throw up; } Good times. 
Even better: String tangas[] 😉
&gt; Also varargs is apparently acceptable these days. What a world. Varargs is syntactic sugar for an array, so it would be more weird for it to not be accepted.
I've been using it on openjdk with no problems 
Well, you should be typing (String**[]** cheese). You evil!
Thanks to their GitHub page I found out about https://jitpack.io - a quick and easy way to publish artifacts from GitHub repos.
This is really bad practice by the way.
That code is bulemic! Seek help!
you don't need to store the RuntimeException in a variable. catch (Exception e) { throw new RuntimeException(e); }
I'm partial to "bikini"
Just publish on Maven Central.
How else are you supposed to make your application crash so you can debug it?
Applets are the JARs, you just have to download them. They may however, refer to other JARs that may be downloaded.
Yea, that sucks. Oh well. When the barrier to entry is so low on FOSS, proving you aren't part of the unwashed masses takes a little more effort. 
Looks like it from my point of view 😁 
It's more about choice I think... I prefer 'verbose' programming, because I find it easier to read the resulting code. Some prefer more efficient coding and Java 8 allows that.
Spring Boot / Kotlin + Angular2 / TypeScript is such a giant leap for developerkind.
An applet _is_ a .jar. Look up the HTML, see what file is being referenced, point your browser to that URL, and Bob's your uncle.
VBA macros, then C once hooked on the idea that I could make my own 3D games :)
Posted the same on Hacker News: It's much easier to keep track of what's happening if you don't try to write it as one-liners. This: final Runnable newRef = new Counter()::show; is the same as this: final Counter counter = new Counter(); final Runnable newRef = counter::show; Which is roughly equivalent to this: final Counter counter = new Counter(); final Runnable newRef = () -&gt; { counter.show(); }; Which is, of course, not the same thing as final Runnable newLambda = () -&gt; { new Counter().show(); }; The rest of the differences follow naturally from this distinction.
It all seems to work as expected IMO. These may make for some easy java puzzlers but nothing that wouldn't be able to figure out yourself.
Pascal for me too
I don't think even that program can reproduce it always... seems to require something on the hardware (graphic card) side. But yeah, pushing a little more for this one would be the good thing to do. Nothing sucks more than debugging a problem, finding out you were not the first but seeing that nothing was properly fixed...
The first three: 1. English 2. BASIC 3. C
VB6
Yea, stop trying to be a new Jython. No one programs in Java because they want to do Python. Jython is a entirely different idea.
LOGO.
Please read the sidebar--&gt;.
nothing about GWT is good. Please for the love of god, don't use it.
I thought GWT died in favour of normal JS based HTML5 apps (or things like React, Vue, etc). 
It did. This release has been "coming soon" for like... Two years? Gwt has almost no development behind it anymore 
I mostly agree, but XML config? What century was it when you last touched the source code of a Spring app?
that's a bit harsh. there is still development, just not much from google side anymore. They are more concerned with whatever "gwt 3.0" will come to be.
The problem with JS based HTML5 apps is that you need a front end developer for that shit who knows his way around a gazillion tools which you apparently now all need to write a simple hello world. If said front end developer does not work on the project for 3 months he can basically start over because everything has changed. GWT does not. It's stable. it generates higly optimized js files. you don't have to gulp, webpack, babel, npm, ... them. which is nice.
https://medium.com/@jjperezaguinaga/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f#.758uh588b
If only we could combine it with varargs... so that it's clear that String Theory is multi-dimensional.
BBC Basic
that is definitely true, however i would not re-write all my apps just yet
It would have been great if you had read the README... There I write why it's not Jython.
I remember "hacking" the Snake variant nibbles.bas to make the snake twice as long or twice as fast, get 9999 lives, etc...
True enough, it's not terrible tech. Just wouldn't write new stuff in it
Thank you
Upvoted for not using static import (I believe it was tempting here).
That's the joke... 
I did some BASIC when I was a lil' girl. Next thing from there was Java when I was ~17.
What would you go with instead, pure Javascript &amp; HTML 5?
You can check an existing implementation such as Jython, Jruby or Groovy to get started.
Yeah sure, but don't mistake your local bias for global preference. Scala has it's well defined niche and a good sizable, smart community of developers. 
Yea. I like angular personally. There are also decent languages that compile to js
Turbo Pascal
CSS is magic! 
Omicron Basic on my Atari. On my first PC, Pascal.
No problemo String theory [][][][][][][][][][] Enjoy
Java. Programmer. Job. Before you get the Job, you have to be a Programmer. Knowing Java will unfortunately not make you a Programmer. Programming will. Java may not even be the right language for you. If you're serious about this and not just in it for the salary, you should read and practice programming much much more. If you don't, people who hire will find out, really quickly. Some people manage this learning process by themselves, most people go through a degree of sorts. But that's just a start, because the learning never stops. Because if you stop learning, the people working with you will find out very quickly.
Take my humble +1, for I only have one to give. Also, bangon with the JS-land ecosystem.
Yeah I agree. For me that's all the fun of programming. Sadly by far most work is to get something from db and show it to user with various variations.
I'll check it out! Unfortunately i'm in no position to choose what tools to use at work tho :(
+ the fact they have no fckin clue what a RELEASE CANDIDATE is.
valid point, where i work you won't find either one.. 
btw what would be an example of db/view mudball?
So many want to rubber-stamp a design pattern on every problem they see and then blame the language for performance problems.
Are there any other exporting techniques, apart from copying fields one by one by hand?
Sure, js is far from perfect. I'm not saying it is. But at least it's not gwt. 
univocity looks promising, but i am not a fan of xml, Do you have JSON support?
I guess the most optimal implementation, memory-wise, would be a hypothetical `ArrayHashSet`, where the set is backed by an array at the cost of lookups and all other operations being `O(N)`... But who would want that.
&gt; Sadly by far most work is to get something from db and show it to user with various variations. Start using that DB to do very complex queries and start tuning them in production. Now *that* is fun!
&gt; CSS is ~~magic!~~ the devil FTFY
I guess that would be a simple array (or ArrayList) :) I've just tested how much memory simple ArrayList takes up (values already converted to byte[] arrays so ignoring that String conversion trick). So what I got was: That HashSet - 40390376 Java's ArrayList - 36861992 A bit more that 3MB of difference and HashSet still keeps O(1) lookup. Keeping everything in one big array really saves memory (ArrayList keeps values in separate arrays).
You don't need to convert it back into Strings but on search you will need to convert String to compressed array. Not sure if that's what you meant.
How do you guys do web UI's then?
GWT keeps improving, JS tools keep degrading. I'd say GWT has the upper hand.
Have you ever used gwt? I wouldn't really call that turtle-ish pace "improving"
Also check out www.liquibase.org. I've used in on a few large projects without any issues. 
Yeah you do need to convert back to String for read all values operation. One thing to investigate though could be maybe to convert all the data array into one big string. Not sure if you could win something from that, but since all the data is kept in one big array that would be as simple as: &gt;String allValuesString = convert(data); Of course it can get more complex quickly when deletes are involved and lets say some value in the middle is removed. Anyway it always depend on situation.
C-array syntax, how quaint. The C way makes no sense, why split the type declaration between the type and identifier? String[] cheese keeps the type all in one place like any sane person would do.
To add injury to the pain I would include debugging in Suer Dev mode. What a tooling hell with obfuscated variables and methods names and the mix of Java structures in JavaScript mode.
Can someone else **confirm** that this is actually the case ? That "NO" doesn't do anything ? I believe this could be kind of **illegal**. Most installers need to ask permission, not because they are polite but because they must by law or something...
Somehow I don't see the subreddit's CSS/Sidebar. Before you jump into conclusion. Perhaps you should ask weather they're on a Mobile, or PC. Thanks for your time/Response.
Then do some exploration before posting, rather than posting blindly.
That depends on whether you do it in a restroom or in your friend's car.
Article talks only about hexadecimal strings ([0-9,A-F]) not regular strings. Just a small trick to compress one character to 4 bits.
Rather than read random blogs, you're better off working on a project. In that way, you'll have actual problems to solve and then you can focus your efforts on solving those problems better. Basically, just reading blogs won't make you a better coder. You need to do something, understand the limitations of what you've done, then improve. So you need experience. After that, you'll know what to search for.
I would need to have done it with loops or functions and without the list.length or i++
Could you spam Stormpath and it's piece of shit library any harder? I checked your post history. You're a shill.
It does Hard to type on phone but google it 
int x=1/0;
Better code does not mean more code. 
I got as far as 'depreciated'. Another 'look at me' article.
My introduction is a bit thick, I agree. But I'm writing this not for attention, but because I truly enjoy writing about programming / teaching others about it. If you don't like the way I approach the subject (or the subject itself) what would you like to see me write about? How should I change my writing style?
You don't actually 'explain' anything, just repeat things that have been said 100 times elsewhere. None of the comments in the first program 'explained' anything. There is a huge difference between getting Hello World to compile, and teaching. Even your title is misleading, unless you think 'comprehensive' means 'lots of words'.
Out of honesty, that's like me saying, maybe you should take consideration what type of device the user viewing this sub-reddit in. But thank you for your advice, perhaps it'll be better for me future wise when I do visit the other sub-reddit in terms of Java-related questions
Nice first crack, but it needs some work. There's a lot of empty verbiage -- not great for something that is trying to be comprehensive. Space is time, time is money, capitalism is NuGod (which is like NuCoke but ever worse), etc. 1.) The code sample is a large blob, followed by a large blob of text, which isn't great for comprehension. A better form of transferring knowledge is something like this: [show entire file] [segment by segment breakdown with accompanying text / links / etc] 2.) More, but shorter, paragraphs. The comments about theatrical performance are cute but maybe having those be off on the side of the page, out of the main article, would be better. 3.) Less is more. You have a sentence like this: &gt; Notice one thing, compare this against the hello world example. It looks different! Why though? I did this intentionally, the first example was in Gnome, and this is using KDE. Notice how the window borders / controls change but the buttons and text remain the same. This is Java being a great cross-platform language. The take-away from this is: JavaFX renders the same, even in different windowing systems / operating systems. Too many words here, though, to get to that point; it's tiresome, you know? It might have been more readable if you had just displayed the two Hello World windows side-by-side here, and left a little note about JavaFX's crossplatform capability. 4.) You're missing a statement of intent (or something similar). Whose this article series for? New programmers? Old? People transitioning from Swing? I only know that it's supposed to be a comprehensive look at JavaFX due to the Reddit title.
English Is my native language, however my logic of using "comprehensive " is a little skewed from the actual definition. Comprehensive's root word is comprehend, and I thought comprehensive meant easy to comprehend. I'm not trying to change the definition here, as a quick google search reveals that comprehensive is a word describing completeness and all including (I agree my article is not a full complete documentation for JavaFX), so I should have used a different word that doesn't overstate my content. But thank you for your feedback :) I appreciate it
But that is still catchable with an ArithmeticException... For that matter RuntimeException can also be caught. I think we need to start using something like [this](http://stackoverflow.com/questions/13883166/uncatchable-chucknorrisexception)
Interesting article. I changed "depreciated" to "generally outdated". JFX still [has its applications](https://www.reddit.com/r/java/comments/383e2c/whats_the_actual_modern_way_to_make_a_gui_with/)
This isn't a sub for newbies. Not to be harsh about it, but that's what learnprogramming and the java specific one are for.
It's been "arguably" 8 years for FX script and 6 for FX so already has been a while...
To answer your question I think the book is worth your time. I would go through it up until the ~~Spring~~ Swing part. Everything you learn up until then will make grokking other things you learn on your journey a lot more easy.
I prefer http://www.liquibase.org/ over Flyway, as it provides an abstraction over SQL with Database Refactorings. Besides the obvious of being database agnostic (mysql, PostgreSQL, MS SQL, etc...), this means it could use the optimal solution based on the underlying database.
The author would benefit from a spell checker and a good proof reader.
Well. I am getting a distinct feeling that there's no way Spring could have ever _gotten it right_ in your mind. But we were talking about alternatives to XML configuration. Annotation driven auto-wiring is significantly better than XML configuration. 
C for backend web dev is a completely reasonable choice. Not the fastest development time for sure, but you can do shit in it and that shit can be fast if you know what you're doing. JS on the backend web dev on the other hand ... one needs a lobotomy to even take this into consideration. To start actually working, the lobotomy would need to remove both cerebral hemispheres. I'd take C on the backend dev thank you very much.
Outdated in relation to what is what you need to answer. AWT is 20 years old. Swing is 17 or so? So yes it's "modern" compared to those. However, the concept of JavaFX is based on an exposed scene graph hierarchy which was concocted originally as a scripting language to compete with Flash. Arguably the only scene-graph API to ever reach commercial success. Those are outdated concepts...
Quit your job and start working somewhere where they have Oracle
Yep, definitely agree with that.
So much outdated that they are what XAML, Qt, Android and iOS use.
No blog, but I've learned tons from Effective Java 2nd edition. The book is a little bit outdated but most advice holds still true.
I'd take your own advice to heart if I were you. You sound lik a joy to work with.
That is factually incorrect. iOS has a hidden scene graph API that no one uses. QT doesn't use that approach and neither does Android. XAML is pretty much a failure.
This has all the signs of being a driver issue, so providing exact driver and kernel versions might help JDK engineers to set up and reproduce the issue. Side-note: I don't think you're supposed to do Thread.sleep in the handle method of AnimationTimer, see http://stackoverflow.com/a/30151889/2397895 for a better suggestion and some discussion. I don't think this is related to the apparent memory leak, but who knows? (Disclaimer: I'm a JDK dev, but client/gfx stuff is really not my area)
&gt; iOS has a hidden scene graph API that no one uses. It is there nonetheless. &gt; QT doesn't use that approach and neither does Android. So what you call QML, AXML and their respective graph data structures &gt; XAML is pretty much a failure. So much of a failure that we moved all our native applications to WPF. It is also the official GUI for medical devices in many healthcare projects alongside Qt. And I have this little OS called Windows 10 with UWP applications, where I am typing this from. If anything is a failure are the Java desktop applications, I haven't written a new one in decades, only maintenance. All our greenfield projects are a mix of Web, Qt, WPF (that XAML failure), UWP, iOS and Android.
So happy to develop on Linux AND use OpenJDK. How you guys keep up with this BS is a mystery to me.
&gt; Well. I am getting a distinct feeling that there's no way Spring could have ever gotten it right in your mind. Quite possibly true, but not relevant to my point that they keep changing the implementation of configuration. &gt; But we were talking about alternatives to XML configuration. Well, we were talking about Spring repeatedly rewriting configuration. &gt; Annotation driven auto-wiring is significantly better than XML configuration. Might be better but is still widely regarded as problematic, and, more to the point, was subsequently superceded by JavaConfig, necessitating upgrading applications again if they wish to remain fashionable.
gwt 2.8.0 w/ a 11 module project running right here. My colleague next desk has a angular2 app running. so... your point being? and what exactly do you want to tell me with the classic mode reference?
widgets are the suck, agreed. If i could start over again i'd probably go with plain html + Bootstrap UI / Material / ... + gquery or something for manipulation. I never tried GXT but i would be pissed paying 7 grand per year for something that does not work at all... Don't get me wrong, i have no stakes in this game. I am primary a server developer. However, in my opinion, every tool sucks to some degree. With plain JS you will have other, very funny issues.
you have source maps and you can tell him to keep the variable names. you can also tell him to not optimize the JS so you don't even need source maps (if that's your kink)
Why do people say JavaFX is ready for the enterprise? There isn't even a comprehensive docking framework for it. Just because it looks pretty doesn't make it suitable for the enterprise.
What XML structure in Qt? Have you ever used Qt 5? Qml doesn't have anything to do with XML. Regarding Windows, the only way to have a Java application packaged as UWP is to make use of Project Centennial, which almost no is making use of. XAML is the only way to develop Windows native GUI applications in the future, using Microsoft tools. I also got paid in the last three years to develop new applications in WPF and UWP. That isn't a failure on my book. 
https://dzone.com/articles/java-developers-can-finally-target-windows-uwp
Spring Context(s) are cached by Spring TestContext Framework. So the 100 test classes only results in the ApplicationContext being loaded once. Unless.....you explicitly "dirty" the context. It's actually an interesting subject I think ;) ... so perhaps I should produce a post about how that works next 
Lights blue touch paper.......stands back......BOOM!
/r/javahelp is more suitable for questions like these. Please read a sub's sidebar before posting. 
Ah not official support, whence I wasn't aware of it.
I think you meant "comprehensible"? I might be wrong though, English is not my native language ;)
The article - its starts by "swing.. it was more intended for industrial and enterprise applications." Then it goes on "But is JavaFX a replacement for swing? Yes, it is."
Yes that's what I meant... I get it guys, my English skills may not be the greatest. 
"Yes, it is - to some extent." there we go. I forgot to add that, my bad. It was not my intention to say that JFX is a full Swing replacement.
Care to volunteer? 
int count = 0; int sum = 0; for (int i : listOfNumbers) { sum += i; ++count; } return sum / count;
I wish I could get some J2E (w/o Spring) experience so I could appreciate what Spring is doing...
Be careful what you wish for. Spring is a product made to feel you good. JEE is a product made to feel the license-selling vendors feel good, and to persuade non-technical management to sign those license contracts. You can have free open-source, but that's not the business model of JEE. This difference shows in every aspect.
Aka. making classes Jimmy-safe while restricting possibilities for non-Jimmys. Where is this "advanced"? (Also screen quality sucks, but explanation is good)
Hey sorry, I typed that up late. I meant the Swing part, not Spring. I'm going to edit it. You definitely want to learn Spring at some point!
average isn't an integer (atm you floor the result). List use size() method. .length is an array member.
 double average = 0.0; for(int i = 0; i == 0; i++) { // the loop :) average = list.stream().mapToInt(Integer::intValue).average().orElse(average); // or IntFunction::identity }
I mean, even if you use Spring chances are you use at least one or more Java EE components in tandem with it. Whether that's Atomikos or Narayana (JTA), EclipseLink or Hibernate (JPA), ActiveMQ or HornetQ (JMS), bean validation, etc. At the very least you are probably using Servlets, even if it's under the hood magic provided by Spring MVC. At worst Spring's DI framework isn't too different from CDI these days, if you know one learning the small differences in the other is cake.
Scratch js with ts and I agree.
I thought it had final release now.
About the same usefullness and beauty as Underscore Java.
You've listed nothing that could store a list of numbers unfortunately, so I'm not sure I can help you. What do you mean by inputs? Like System.in?
&gt; JEE is a product made to feel the license-selling vendors feel good JavaEE is a specification/standard, and has nothing at all to do with licensing. 
Books &gt; Blogs Try Code Complete by McConnell. Not Java-specific, but very good
I'm one toolbar away from completely filling my Internet Explorer screen with toolbars. Hopefully it's a new one I don't have. 
That simple fact says a lot. It means that even though you have a standard, it is meant to be implemented by multiple vendors. Who will then differentiate themselves by... adding non-standard extensions! So unless you walk very the line very carefully, and continually test on several JEE implementations (you'll have to pay for each), you're committing to a single vendor's solution. What good is the standard for then? It certainly does not serve a technical or architectural purpose (the implementations do, but not the standard). The purpose of the JEE standard is to create a marketplace of people who know it, that you can hire, and sell certifications to. By banking your software on a JEE implementation, you buy into that ecosystem of "certified" professionals, vendors and support. So it is essentially a commercial standard, even though it defines technology.
Oh yeah? It's been about 6 years since my entry level Java class so I didn't realize that. It doesn't sound like he's been taught any of the Collections framework or any List type data structures at all though. That's why I'm confused. 
No thanks. Node 7 ftw
Unless you're on Spring 2.5.6, there's no reason not to start converting your XML to @Configuration classes.
Hey!!! So I'm also new to Java but I have an idea! Hopefully this helps :) Fyi quotes in this case mean you give it an actual name. Ex: "bob" means you would put a specific name there. I also put a # if it is an actual line of code. Here it is: Given an array of integers: # int[ ] "name" = new int[size]; in this case, the variable size, tells how big the array is going to be. You don't actually need this in your answer, it is just an example of what the array being created would look like. # name[0] = 5; # name[1] = 10; # name[2] = 4; # name[3] = 6; Again, this is part of the given list/array. The four integers are stored in the array: name[ ] Now onto the answer to your question! The algorithm you need to use is simple repetition. You need to add all the values together than divide by the number of values. To do this, you need a "For" loop. The way a For loop works is it repeats a section of code however many times you want. Ex: # for ( 0 &lt; 9 ) { # System.out.println("hi"); # } This code will run print the message hi every time it loops. The computer thinks about it like this: "is 0 less than 9?" Yes! "Ok so now I will do everything in the loop", *prints hi*, "ok, loop complete. Now let's see if 0 is still less than 9". Yes! "Ok so now I do everything in the loop" *prints hi* "Ok, loop complete. Now let's see if 0 is still less than 9" Etc. So this program will constantly print hi because 0 will always be less than 9. This is an error because the comp can't print hi infinitely. We get around this by using a variable, usually "i" standing for increment. We also make it so "i" increments every time the loop is finished. Ex: # int i ; # for ( i &lt; 9 ) { # System.out.println("hi"); # i = i + 1; # } Now, after 9 loops "i" will be 9, and is no longer less than 9. Therefore the for loop is done and the computer moves on to the next part of code. This is what you need in your case. Given a list of numbers with a set size, you add them up then divide by the size of the list. The for statement is used to change which number is pulled out of the list. Final answer: # int sum = 0; # int listSize = 4; # int[ ] numList = new int[ listSize ]; # numList[ ] = [ 5, 15, 4, 16 ]; # for ( int i; i &lt; listSize ) { # int sum = sum + numList [ i ]; # i = i + 1; # } # int finalAnswer = sum / listSize; The numList [ i ] part just adds the i'th number of the array. For example, the second time the computer runs the loop, it would use the second number from the array. On the third time, it would use the third number. So that's it, hopefully I helped out somewhat. Gl in your programming class =) Edit 1: I re-read the question and it is so much simpler than I thought. Ok this is everything: (num1 + num2 + num3 + ... + num(listSize)) / listSize Just the sum and divide it by list size. That's it... Nothing complicated...
and you're subscribed to /r/java because? 
Spring 3 for the most part, and they're about 50-50 spring xml/@Component annotated classes. I don't honestly know what @Configuration does.
I think that Spring's problem is that it is changing so fast, that many people have problems with keeping up. Lets see some example. There is official Sprnig MVC docs: http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html You can find there that ugly configurations: DispatcherServlet, WebApplicationInitializer, WebMvcConfigurerAdapter, different application contexts and there are so many beans under the hood like HandlerMapping, ViewResolver etc. You can call it flexibility, I will call it garbage. You can do this in XML, but also with annotations, you can use web.xml, but you don't have to when you use servlets 3.0+ But wait what are servlets, do I have to learn Java EE first to use Spring or not? Then You try to learn with some tutorials, so you check udemy, pluralsight, everyone shows something different in one you will see DispatcherServlet configuration in web.xml and in another a guy uses Java Config and in third one someone uses none of them. Ok so maybe official website has some better examples. Yeah it has https://spring.io/guides/gs/serving-web-content/ But what the heck, where are all of these configurations, why now I should place my .html and templates in /resources and not /webapp. So where I put this web.xml that guy from udemy just showed me. Why I can't use my lovely ane easy JSPs with JSTL that you just showed me in previous official docs. Ok lets try with book, it is always reliable source. You take Spring 4 in action, because your friend said so, book from 2014, what could change during 1,5 year (it isn't javascript after all)? You start reading and there again you see some mix of xml, annotations. You would try to run hello world from this book, but nobody tells you what dependency you should use in your project. Ok let's check sources on github https://github.com/habuma/SpringInActionExamples Oh no, Mr Walls, why there is a gradle, do I have to learn gradle? But uh, no problemo, some efforts and it works on Maven. Then you see that in examples there is Spring 4.0 and in maven repository is 4.3 so you decide to use newer version. Everything works and then you can't run examples with JPA. You are trying to solve mistery, you copied all the source codes from examples 1:1 and they just does not work. Why, WHY! Next day you decide to downgrade to 4.0 and it turns out that in 4.3 you have to use Hibernate 5+. ... And don't get me wrong, Spring docs and Spring in action are great resources but they can be so hard to understand for someone unfamiliar with them. Some people use this argument about "Spring does not need Java EE server", but I would ask - and why is it better? Is it better to be attached to Spring and Pivotal or have a choice like Wildfly, Glassfish, TomEE? Is it better to build fat jars instead of having thin wars and all dependencies provided? Oh and remember if you love fat jars you still have wildfly swarm and payara in Java EE. In Java EE I feel that I know what I'm doing, because if I read something in specification, I know that after all these years it works like it should, in Spring I have that feeling that I forgot to configure something or I have to believe that Spring boot probably did what I've expected. When I search for something on SO there are old or very old threads that remember Spring 3 and I wonder if they are still valid or I should do it differently nowadays. With Java EE I don't have such problems. When you compare Java EE 5, 6, 7 (10 years period) you can clearly see that it is evolution, not revolution - and I like that stability. That is why I like Java in general. Spring and Java EE have more in common than many people think. Spring heavily uses core Java EE specs (JPA, JTA, Servlets, JMS, Bean Validation), Java EE is strongly inspired on Spring (CDI, Batch). When you miss something from Spring in Java EE like lovely Spring Data it is not a problem because you have CDI extensions like Delta Spike that do exactly same thing. I sometimes feel that Spring is becoming what old J2EE was.
&gt; continually test on several JEE implementations (you'll have to pay for each) Why do I have to pay for Tomcat, TomEE, GlassFish, Payara and JBoss WildFly, they are all open source (Apache and GPL) and can be downloaded and used free of charge. Even IBM Liberty and Oracle WebLogic can be used for free in development. 
Question says "answer with [visual logic](https://en.wikipedia.org/wiki/Visual_Logic)" http://imgur.com/a/P4sgt And why won't you just ask your prof? Your explanation of the requirements are pretty bad. The flowchart above should give you a general idea of what you **could** do. 
Sinclair BASIC (zx80), then later Pet BASIC (C64), DBASE IV, 6502 Assembly, Pascal, c, 68k Assembly... Then went to Uni with exposure to a number of languages during and since.
I'm mainly a .NET programmer so maybe I'm wrong on this but I think the only thing I find weird about modern Java EE is this thing called "managed beans". Why are there two of them (CDI Managed Beans and JSF Managed Beans)? Why do I need those defined in JSF?
Why isn't number one, rolling your own crypto? The number of times I've seen real encryption go unused for some in house thing, is incredible. 
May I ask what school did you attend to receive that degree? Was it Santa Fe? Because that's where I'm attending.
What tools were used to make these diagrams? 
+100 votes up if I could. This...exactly mirrors my feelings. Spring.... is complex. I am sure it does what it says it does, but the amount of faf and work you have to put into getting something up and running, is just to much for me. 
Man you should write a full article :)
The learning curve of Spring is much gentler than that of JEE. That you personally already know JEE and don't want to invest time in learning Spring is your personal problem, not a problem with Spring itself. Same for Gradle, just because you are personally stuck with some ancient broken buildsystem does not mean your enterprise framework is superior. Also Spring boot is meant for rapid prototyping, if you don't like it, don't use it, Spring works fine without Spring boot. JEE being stable is one of it's major problems, because there are many historical mistakes that were made, and they cannot be repaired. This increases the learning curve for JEE developers even more. It does not make sense for a sane person to learn all the "funny" little things one has to remember when creating a JEE system. The main advantage of Spring over JEE is test support. Spring comes with plenty of tools to run a diversity of tests, whereas JEE only defines a standard for runtime, not for testing. So projects will rely on dubious unmaintained 3rd party projects or badly homegrown testing setups to test their projects. So while Spring is not perfect, for the niche both JEE and Spring try to fill, I'd always choose Spring over JEE.
CDI is just an (incomplete, ambiguous) specification, and your results will vary depending on which version of which vendor of a CDI implementation you get. And the general discussion is always about whether to use an application server or not. That some free standards like servlets out there sail under the JEE flag is not interesting to the discussion.
Thin jars are evil. If you release a thin jar, you tell the world that you have tested it, but really you only tested it under one or plenty of possible configurations, and anyone using your thin jar can expect plenty of deviations and bugs if his environment is different from the one used in testing in a any aspect. That's a bit like an android smartphone-application promising to reduce battery power, based on tests on one android smartphone model. Use any other model, even if the application still runs, there is no telling what it will do to the battery or the phone. That's a thin jar for you. When you release software, you should release it as a whole, everything on top of something as solid as an OS, the JVM, or a simple Http server. JEE application servers are not such stable bases. Not by a long shot.
\#1 seems to include letting your engineers roll their own crypto.
[Vanilla Java](http://vanillajava.blogspot.com/), Peter Lawrey's blog, is pretty good. It's a book, not a blog, but [Refactoring](http://www.martinfowler.com/books/refactoring.html) by Martin Fowler quite literally takes a code sample then goes through how to improve it. The other cool part is that he names (or at least popularized) these improvements that now show up in IDE refactoring tools or come up in conversations with other developers, which gives everyone a common frame of reference.
yup it is good website there is lots of good examples but there is some issue with your site : there is problem in design as look the at page http://javafxtuts.com/javafx-hbox-layout/ another is grammatical error so try to improve it
enjoy your perfo... oh, wait
And you think Spring is not in the game for the money? How much did Rod get again? 
&gt; Non-standards are not immediately clear though. I really like standards and I assume this can hamper initially understanding of the diagrams. My objective is however long term use. If these were only one or two diagrams you only see once, then arrows would be the right thing to do. If you use the diagrams daily then only relevant information should be shown. &gt; uniform white I tried a white background, but found it a bit boring. However if more people object, I could be persuaded to change them. I have some plans with different backgrounds for different versions and libraries. Older versions will be yellowing. And different background patterns will help to distinguish between libraries. 
A comparison with [Dragome](http://www.dragome.com/) and [TeaVM](http://teavm.org/) would be nice. Is (most of) the Java runtime library supported? Does reflection work? Does it work on compiled bytecode or plain Java code? Can it be used with other JVM languages? How's the Java-JavaScript interoperability - can you easily invoke "native" JS functions?
Absolutely, baffles me they didn't already do that back in EE 6, but alas.
Assuming, you'd maintain such a setup to validate your apps stay portable, you'd still have to pay with your time. BTW, I wasn't trolling or dissing JEE or its implementations. I assume it is pretty much equivalent to Spring these days, with its good and less good parts. You can probably write good software with it, quickly. I was merely expanding on JEE's reason of existence. That it is a commercial standard before all doesn't make it less valuable, it's just that it appeals foremost to larger institutions who require additional human guarantees. 
&gt; (beans.xml with 3 lines of code) well, actually....just beans.xml. you dont need the 3 lines of code!
I just skimmed through it and this looks great. I'm a sophomore in college in CS and have been meaning to start reading to prepare for interviews. I will definitely be using this, thank you for making it free!
Is this US only?
Nope, but you might have to change the amazon subdomain to your country
There must have been a chance to get it for free previously, since I already own it and definitely did not pay for it.
IMO, none of the technologies out there can make JSweet obsolete because they all have the same *different* approach compared to JSweet: **they all try to fully implement the JLS (Java Language Semantics) so that Java programs can run the exact same way in a Java VM or in a JavaScript VM**. It sounds like a good idea, but actually it is not when working in a JavaScript environment. Why? Because you need complex modifications and adaptations to the JavaScript runtime to support the JLS (to give some examples of complex adaptations: constructor and method overloading, numbers (int, long, float, byte, etc.), static initializers, hashcodes, ...). What does it mean? Well, it means that Java to JavaScript interoperability with these approaches is much more complicated (if not impossible in some cases). On the contrary, **with JSweet, there is no need to talk about interoperability, because JSweet *is* JavaScript (with a Java syntax layer)**. With JSweet, you can use your JSweet plain Java objects in a plain Knockout.js, React.js, or Angular 1/2 UI, and it will work directly with no special adaptations and no performance losses. With JSweet, you can take your Java DTO and services from your Java server layer, compile them and bundle them in a JavaScript or TypeScript bundle, and use then directly from any JavaScript lib, either using the Java syntax (with JSweet) but also from JavaScript or TypeScript. From what I have seen from GWT (even with Interop) or TeaVM, it did not seem possible without very complex compilation and runtime adaptations, which will imply a lot of overhead both at compilation and execution for full interop. To wrap up, the point is: having a full Java emulation comes a cost of weak and complex interoperability. All complex projects wanting full interop between Java and JS (for example using Angular with Java), will eventually hit some issues of that kind, which they will never hit with JSweet. 
I am mostly a C programmer, this will be a good way to check up that I'm coming along properly on learning Java.
But what is the usecase of JSweet, if you have to basically write in a subset of Java and can not use most Java libraries as is? I mean sure you get the Java syntax with typecheck and what not, but that's not exactly Java's strongest point. Especially if you get the same and more with Scala.js and other transpilers.
Cool. Any plans for Java 9 in sense of a dependency graph? Or even better a dependency diagramm generator by uploading / linking an artifact?
yeah you are right, I usually add bean discovery mode to all and it takes few lines :)
Use case is that you can write a full client-server project with one single language. - On the server-side, you use Java / JEE with Java libs. - On the client-side, you use JavaScript and JavaScript libs, but with the Java syntax. - And you share Java code between the two that uses common Java libs supported by JSweet (typically such as java.util...). I am currently completing a mobile project with JSweet: Glassfish on the server, IONIC (Cordova/Angular) on the client. All in Java in 3 different Java Maven projects: commons, client and server. When I refactor a DTO or a common service, both the client and server code gets instantly impacted. That's really powerful. Java typing is largely enough for what we want here. I know that other languages have strongest typing, but typing is not all. With that use case, we don't see the point of supporting all Java libs "as is" on the top of a JS VM. If you are in JS, it is much better to use JS libs (they will be more efficient). There are tons of great JS libs out there, and JSweet allows you to use them with the Java tooling. Really, why would you want to use Swing when you can use Polymer? Especially when knowing what I have already stated: supporting Java libs as is will come at a cost (performance and interoperability). For those who really want to use their favorite Java frameworks, it is possible to transpile them with JSweet with some extra work, in order to get a plain JS implementation of them.
&gt; No, it cannot be used with other JVM languages. JSweet only supports Java syntax. An option could be to decompile .class files compiled from other JVM languages back to Java.
&gt; the EE spec, while still being the standard, plays catch up, and is falling further and further behind. Haha, in Rod's wildest dreams, although after caching in $$$ I'm not sure he still dreams about Spring and defeating "EJB".
Just got for free from amazon Canada. Thanks!
Thank you! This is perfect
yes 2016 in june you gave it already away, thanks btw.
Then the problem is O(n) for finding the element and then O(n) for removing it. Two O(n) operations after each other is still O(n). Perhaps not surprisingly, a relaxed problem yields a more efficient implementation.
Depends on the success of the current diagrams.
Its far *far* easier to move between vendors of JEE, than move from spring.
maybe because there are people on here who look at all options... Spring, JavaEE, Spark, Ratpack, and will judge them for their merrits. JavaEE, in 2016, is not what this guy is claiming. 
Not to mention [valid bytecode might not be possible to fully decompile into Java code](https://stackoverflow.com/questions/6827363/bytecode-features-not-available-in-the-java-language).
Downloaded and upvoted! Thanks.
Welcome to the exciting world of software development, where everyone can work in their underwear.
Haha. We've been waiting for WebAssembly for years. M$, Google, Apple, Mozilla, etc.. would have to agree on something and work together - so it will never happen.
&gt; "Spring does not need Java EE server", but I would ask - and why is it better For me at work, the Tomcat container is a pain because upgrading it is painful. We've got lots of customers running old versions and getting everyone to upgrade means getting everyone to take the new version of out software which takes a lot of time and effort so doesn't get done as often as we'd like. 
Thank you
Great story but... &gt; It’s a dated design that should be treated like the programming equivalent of the printer from Office Space. It is a wonderful design which is why it lasts. &gt; You shouldn’t need a list of flags this long to operate your code, and not every thing needs to be a AbstractSingletonProxyFactoryBean (yeah, I know it’s an extremely dated example). That should only matter to Java developers, it contributes nothing to your story. &gt; Java ain’t going anywhere anytime soon, and there are people making new and cool things with it that have perfectly valid reasons for choosing it. Correct and thank you for the story because one of these days I have a side Java project (one of several dozen) that I plan to containerize and make some money off of; it's good to know it's at least possible. Oracle, update the JVM so it understands and cooperates inside Dockers containers please. 
But can I work without it? Jk, thanks for the great book.
It says I need Kindle Unlimited to purchase for free. Is this true? Never mind, the purchase with one click was misleading.
Write more readable code, not: - smart syntax - less typing - 'def' instead of type name - etc. I hope you got the idea I don't use a language feature just because 'the compiler can'. And I don't like a language that provides such features just because 'the compiler can'. I don't mind typing a few more characters; I don't mind typing ';' at the end of each line, -- with the help of modern IDEs, it's too easy to do so. But I do mind when I read the code, all the little tips that help my eyes to quickly understand the code are not there. For the same reason I don't like lombok: - it helps with the code that's easily auto-generated by IDE using hotkeys. - with the cost that who ever reads the code needs to notice the little annotation and understand lombok to know what's going on - and the cost that you need to install a plugin in IDE to compile the code - and the cost that without the help of the compiler tool from this specific library, your source code is invalid Java code that doesn't even compile Plus, for how many classes you'd like to add setters for all fields? what if I want to do parameter validation in the all args constructor? will it encourage bad coding style? I just don't see it's value.
I'm still in school for CS and heard about containers and Dockers for the first time yesterday, could you give me a brief, or in depth, explanation of what they are and why hey are important? 
Thanks! Good timing! Currently job hunting :)
The resolution of issues you've identified depend on what the expected behaviour is (a point I'm sure they'd love to hear you think out loud about - the reason they gave you open ended considerations, not specific details). If you make a couple of assumptions around expected behaviour: * At the point that signal() is called, anything that is currently registered should be call()ed, even if: * Another thread is in the process of unregister()ing a Callable, but hasn't yet completed that process; or * Another thread is in the process of register()ing a Callable, but hasn't yet completed that process * If Callable.call() eventually hits register() or unregister() than that change will only impact subsequent calls to signal() and won't change the Callable's lined up for the current signal(), a defensible position as it gives predictable semantics: * If you allowed mutation of the registered Callables for the current signal()ing thread and you're unregistering a Callable that has been call()ed, and another that has not been you get into murky territory around expected behaviour * However, if a client expects that once a call to unregister() returns, the Runnable is no longer in use, you might hit some pain. If you want to prevent that you need to look at: * Some coarse-grain locking so unregister() will only return once it's certain that any signal() underway when unregister() is called has completed * Finer-grain locking on the above so it's only locking per-signal (eg if signal(2) is running and I call unregister(3, something) then that's safe) * Super-duper-fine-grain locking so if signal(2) is running, then unregister(2, something) will return only after something.call() has been called * I'd argue that the cost &amp; complexity of these\ outweigh the benefits, but depending on the use case, it may be a requirement * Exception handling is definitely something you have a range of valid options on * Rather than mandating a solution (which would not fit a bunch of other use cases) design for pluggable handling * But still consider a sane default * Finally - java.util.concurrent is your friend! Something like the following (written over lunch - not tested and more than likely to still have gaps): package solution; import java.util.List; import java.util.Map; import java.util.Objects; import java.util.concurrent.ConcurrentHashMap; import java.util.concurrent.CopyOnWriteArrayList; public class Solution { @FunctionalInterface public interface Callable { void call(); } @FunctionalInterface public interface ExceptionHandler { ExceptionHandler IGNORE = (solution, exception, signal, callable) -&gt; { // Does nothing }; // ExceptionHandler LOG = ...; // TODO Write a logging ExceptionHandler ExceptionHandler RETHROW = (solution, exception, signal, callable) -&gt; { throw exception; }; ExceptionHandler UN_REGISTER = (solution, exception, signal, callable) -&gt; solution.unregister(signal, callable); // ExceptionHandler UN_REGISTER_ALL = ...; // TODO Write an exception handler that removes the callable for ALL signals void handleException(Solution solution, RuntimeException exception, int signal, Callable callable); } private final ExceptionHandler exceptionHandler; // Use a ConcurrentHashMap so all additions/removals/look-ups of signals are atomic - no guarantee is in place for the List&lt;Callable&gt; returned at this stage private Map&lt;Integer, List&lt;Callable&gt;&gt; registry = new ConcurrentHashMap&lt;&gt;(); public Solution() { this(ExceptionHandler.IGNORE); } public Solution(final ExceptionHandler exceptionHandler) { this.exceptionHandler = Objects.requireNonNull(exceptionHandler, "exceptionHandler == null"); } public void register(final int signal, final Callable callable) { // Atomically look up the callables for the signal List&lt;Callable&gt; callables = lookupCallables(signal); // Add the Callable from the callables (but if signal() is already iterating over the existing list, the new Callable won't be called) callables.add(callable); } public void unregister(final int signal, final Callable callable) { // Atomically look up the callables for the signal List&lt;Callable&gt; callables = lookupCallables(signal); // Remove the callable from the callables list (but if signal() is already iterating over the existing list, the removed element may still be called) callables.remove(callable); } private List&lt;Callable&gt; lookupCallables(final int signal) { // If the signal hasn't been seen - allocate a new CopyOnWriteArrayList which provides consistent point-in-time views across it's contents // For example, if the List is already being iterated over, and an element is added in a separate thread, then that element won't be visible through the in-progress iteration // The same applies for removing an element from the List if it's being iterated (the element is still visible in that iteration) return registry.computeIfAbsent(signal, ignored -&gt; new CopyOnWriteArrayList&lt;&gt;()); } public void signal(final int signal) { // Atomically look up the callables for the signal List&lt;Callable&gt; callables = lookupCallables(signal); // At the point that List.iterator() is called, the elements in the list are locked in, so any mutations via register() or unregister() don't apply to what is being iterated for (Callable callable : callables) { try { callable.call(); } // Callable.call() doesn't throw any checked exception - so it's only unchecked exceptions we need to handle here catch (final RuntimeException e) { exceptionHandler.handleException(this, e, signal, callable); } } } } One last thing - my company is hiring... If you're in AU and this is the sort of thing that you like to go home and spend way too much time mulling over the complexities of, shoot me a message!! ;) 
seems inefficient
Thanks mate. You seem to have covered almost everything that would be asked of a Java developer. People with some basic knowledge or coding experience will benefit from this book immensely. This book should work for a junior or a senior developer. I will leave a review in Amazon, once I start diving deep into the book. P.S. I am from India. I was able to download it to my Kindle without Kindle unlimited.
This story particular talks about the JVM and as its special case Spring
Users in the IT Central Station user community interested in Eclipse or Netbeans also read real user reviews for Oracle SQL Developer. This user writes, "As far as a specific valuable feature, outside of just mentioning how it seemed the tool itself matured overall, is its modularity. I'm now able to split out windows that I couldn't do before." You can read the rest of his SQL Developer review here: https://www.itcentralstation.com/product_reviews/oracle-sql-developer-review-39085-by-danny-bryant. Good luck with your search.
Swing is (on the way) out and JavaFX is in for making desktop apps. Maven seems to be the go to for build management. Jasper is what I see in my neck of the woods for reports.
Nonsense. 
I didn't know what bean discovery was.....until I saw your comment. I just converted the project I am working on to use annotated bean discovery, and after just adding a few @ApplicationScoped annotations to beans I missed, its working great....but starts twice as quick! :-D Thankyou! 
The learning curve is not determined by how much configuration you need, but how much experience not to shoot yourself in the foot. Debugging JEE applications is pure horror, because you tend to get all kinds of weird classpath issues occuring inside the application server, which you can only configure via clicking through wizards, following screenshot-by-screenshot guides if you are lucky enough. Most people prefer to just turn their application server off and on again before trying to debug their problem. Regarding Maven: Yes, most of the corporate Java world is stuck with Maven and cannot move to modern buildsystems, like the C++ community being stuck with cmake and the Javascript community being stuck with npm (And america is stuck with imperial units and the Japanese stuck with writing in chinese characters). Doing the same as everyone else does not mean you're doing the right thing, the reasonable thing, or the fun thing. And configuring Spring without Spring Boot is not more complex than JEE, nor does it require Spring Boot. Some annotation, that is all, and no funny empty xml file that has to lie around somewhere for historic reasons (how will you explain that to your kids?). Look here as an example: https://www.mkyong.com/spring-mvc/gradle-spring-4-mvc-hello-world-example-annotation/. There is no Spring boot involved here, and no xml (the xml snippets are just showing the equivalent to the java annotation). There are just 4 java lines of configuration, and this is a complete runnable example, no need to install any application server. What Spring boot gives you as a plus as an example is logging configuration (e.g. drop log4j, logback, or any other common logging lib on the classpath, and Spring boot will configure it with nice colorful patternlayout, no log4j.properties required).
I would ignore the problems you're perceiving for 1, they're likely negligible compared to any other executable. I think the biggest advantages of 2 are the ability to host/post remotely and the flexibility gained from using a platform-independent abstraction layer (http).
So what the difference between spring boot (or dropwizard) and bootique? I see that both have BOM, packed into runnable jar and have a number of starters/modules.
Funny, you can easily identify Spring people in every conversation by them having to use the term "JEE" which very few Java EE users would ever use. &gt;That's not the game Pivotal is in. Dream on, Pivotal, EMC, now Dell are all in it for the money. Rod just tried to paint the picture of being a benevolent dictator as a marketing trick. And not that there's anything wrong with Pivotal, or anything wrong with Pivotal wanting to feed their developers, but they are not better (nor worse) than other companies.
Thanks mate. I already had this from the last time you gave it out, and I've found it super useful. I went for an interview recently and was reading this on the train ride over. Really helped me revise some points from my education.
how about `__main__`
Thanks for all the kind words guys, we hit 1000 downloads! If you are preparing for your first interview, don't worry! If you prepare well, you'll have confidence. Good luck!
From the Spring Boot page "Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can "just run". We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration." We chose it for the 'fat jar' single file to deploy with an embedded web container. The auto-configuration is also nice in that we have had to override their defaults very little. Boot just means you can get a project bootstrapped very quickly with minimal coding and configuration.
Where did you get that impression from?
I did get the offer. Thanks :)
He's missing the one of the biggest benefits of Docker, packaging. The reason we use containers is so we can package all of our dependencies together. For anyone that has worked in a corporate environment, you know that there is usually an infrastructure team. That team is usually responsible for installing the jvm, app server (tomcat, wildfly, etc.). If you want to get any of those things upgraded it is usually not easy because they have to make sure all the teams using the environment are ok with the upgrade. By using containers, each dev team can decide what components and which versions they use. The infrastructure team only has to worry about keeping machines and docker running. 
Can you not x-post Kotlin spam to a *Java* forum?
Gradle is a tool for Java developers. Moving Gradle from Groovy to Kotlin is pretty darn relevant to this sub.
I did not say Pivotal was better than other companies, I said their business model is different, and because of that Spring is a better product. Both drug dealers and drugstores want your money, but their business model is different, and so their products are different. They are all in it for the money, but that does not mean they are all evil, or that their drugs are all good for you.
You could just do #1 and just never have the application shut down. Use the WatchService API and have your app watch a directory for new PDF's, when it sees them, it processes them. * https://docs.oracle.com/javase/tutorial/essential/io/notification.html * https://docs.oracle.com/javase/7/docs/api/java/nio/file/WatchService.html It also makes perfect sense to have your application running as a web application. Just embed the servlet container inside your application. Both Jetty and Tomcat can be embedded in your app. Either way will be just fine.
I hope you're not comparing Java EE to drug dealers and Spring to drugstores, since that would be nonsense, which I hope you understand. The business models of many Java EE vendors vs Pivotal is likely not that different. Both release free open source software, and both like to see income via support contracts. Apache (TomEE) would theoretically be different since they are a non-profit organization, but the product TomEE is supported by company Tomitribe. To make things even more interesting, TomEE builds on Tomcat which is supported by Pivotal, so there you go. Full circle.
The final point there is the most important. No need to worry about mimicing a jvm for example.
This is very nice. It's been attempted several times, and I hope one of these Java to JS by way of another compiler transpilers takes off. I do enjoy TypeScript, but keeping it all in Java would be great too, tooling already works etc. I would emphasize more the maven style of working with it on the site, since a lot of Java devs have moved to Intellij in recent years, and highlighting an Eclipse plugin makes it feel a little outdated. edit: sourcemaps not showing up in examples repo, but running it was straightforward. Really liking this project! I'm running tsc 2.0 in my global not sure if thats an issue or not.
Disclosure: I am the founder of Bootique, so you are getting Bootique point of view. All three help you to do away with JavaEE container infrastructure, which is awesome by itself. Past that your experience will diverge significantly, as all these projects are built on different philosophies, integration styles and built-in capabilities. 1. Dropwizard: a specialized platform for web services. Nice built-in facilities like metrics and healthchecks. But if you are building something other than a web service (say a job scheduler or a command-line tool or an HTML app), turning off various built-in things is very hard. Also no dependency injection, making integration of extensions a real pain. There are third-party "bundles" for Dropwizard that add DI, but they don't allow to interecept anything in the core. So it is great for its intended use cases, but too specialized and opinionated as a general-purpose platform. 2. SpringBoot: This is of course a general-purpose framework that can integrate anything. My beef with it is the integration style though. Like hidden features that are dormant by default, but activate themselves (often unexpectedly) when e.g. you put some third-party library on classpath. Another thing is abuse of annotations. Annotations control way too much behavior in SB, but by their nature are not centralized and scattered around the code. So it is hard to understand what your app is configured to do just by looking at the sources (or which annotation to use to achieve a desired behavior). And of course starting the app requires expensive annotations scan. It almost feels like SpringBoot prioritizes marketing aspect (see, I can have a functional app without much thinking) vs. minimizing technical debt and long-term maintainability. 3. Bootique: We tried to address the above shorcomings and build a general-purpose unopinionated maintainable platform. Bootique DI is Google Guice. This gives us centralized DI definitions, an ability to "contribute" objects to collections from upstream modules (an often overlooked Guice advantage over Spring), and an explicit concept of *module*. Standard Bootique modules are all single-purpose and easy to understand and use. They are still "drag-and-drop", but there are no hidden features. Module discovery mechanism is the cheapest one available (META-INF/services). Also we have an (unhealthy? :)) fascination with clean POSIX-style CLI, so every Bootique app is controlled by consistent command flags, and avoids Java tradition of "-D" style properties. It automatically generates [full help](https://twitter.com/andrus_a/status/777911115271593984) for all the CLI options coming from the modules present in the app. So your Java apps will all look like proper UNIX commands to you sysadmins. All in all, we think that Bootique approach results in a cleaner app design and a more lightweight stack.
I can't use `WatcherService` because the files exist only in memory, and never hit the hard drive. Other than that, I'm probably leaning more towards using a servlet container for sheer flexibility.
From the article: &gt; If you’re using Docker to get around shoddy config management then you’ve probably got bigger problems to deal with and I commend your effort.
Going to have to disagree with you there. I've been using both Kotlin and Groovy in various applications over the past year (I write paltry little Java now) and Kotlin seems without a doubt to me the better choice. It's documentation is much easier to navigate, it does mixins better, it does closures and scope much cleaner, and seems to me to have a stronger overall backing from the wider Java community. 
Mobile is funny because the first thing I thought of was using available react-native dts to to code against. That sounds like a very good time. Java -&gt; Typescript &gt; Javascript -&gt; (Java || Objective C). Awesome!
So I had my first Java interview yesterday, and I actually picked up your book and studied it top to bottom to refresh my knowledge the day before. The questions in your book covered like 80% of what was asked by the interviewer.
Well great, I hope the 80% helped! Its hard to know whats going to be asked in every interview so I hope you were able to handle the other 20%. I'd recommend writing down the missing questions and building a list as you go on other interviews in the future for bonus coverage.
&gt; and seems to me to have a stronger overall backing from the wider Java community. That's debatable. See how easily I provide the same amount of proof as you. 
That dismissal isn't realistic. Perhaps he hasn't worked in actual, huge, enterprise environments?
Check out their post history. It is almost as if they are testing to see how much they can cross/re-post the same content. That's pretty shitty Reddiquette if I've ever seen it.
I'm not familiar with any of this (but in the past i used jboss and glassfish a lot), so i took a look at docs and this is what i'm found: As i see Payara Micro [just changes way](http://blog.payara.fish/introducing-payara-micro) of launching application but still JavaEE container with all drawbacks of it. Surprisingly it [looks very similar](https://wildfly-swarm.gitbooks.io/wildfly-swarm-users-guide/content/getting-started/container.html) to Bootique, it packages also into uberjar(fatjar) and has a BOM. But Bootique has module system, and i doesn't find replacement for it in swarm.
I did :) Did you also notice that every.single.submission points to a text by the same person? Either to the personal website, through techbeacon.com or, as here, through medium.com. &gt; they can cross/re-post That in itself is okay, but spamming the same general "programming" or SE blog post (a topic which I actually find very interesting) to as many programming-language-subreddit as possible is despicable IMO. There's no reason to post "agile/waterfall" stuff to /r/java except to try to get views.
I avoid Gradle as much as possible, it's slow and now I have a better reason to avoid it.
The basis of the program is a graphical expert system. The current main driver is the construction of java diagrams. There are other modules in work but they are not about programming languages. The motivations for some design decisions will become clearer with a FAQ which will be added next week. BTW I thought the main controversy would be about the hiding of overriding methods in subclasses...
Agreed in full. 
&gt; The motivations for some design decisions will become clearer with a FAQ which will be added next week Seems fair. &gt; BTW I thought the main controversy would be about the hiding of overriding methods in subclasses Nope, at least not to me. I think that is also convention. Even hide the getters and setters if they do nothing special. 
I'd recommend "clean code". Great book, opens your eyes to some useful practices. Also maybe "tdd practical examples" (something like this). Nice one about test driven development explained by presenting creation of two projects. 
*Effective Java,* by Joshua Bloch. That and *Clean Code,* which someone has already mentioned, will put you far beyond your 700-line method colleagues whose if-else statements career from one end of the monitor to the other.
Evolving a product requires change. If you can't handle change, you're going to be left behind as a programmer. FYI groovy scripted gradle is still fully compatible. It's not even being deprecated. 
I give this book to junior devs when they join my teams. I call it the Bible. 
This is 2016..... the days of SPA and client side rendering. I think JSF has gone done the wrong street.
I think it's going to come down to what your expectation is for maintenance. Given that you are the only java person in a C#/Python shop, it might make more sense to go with option 1 because it's the option with the least amount of pre-requisite knowledge. So option 1 you just need to know a few libraries and standard Java. Option 2 would require knowledge of servlets + the web framework you chose. Also consider deployment. If you deploying a long running server, does your work allow for monitoring/recovering of the webapp and how would it integrate with the existing platform if the existing platform seems to be C#/Python? There's also the possibility that you might be pre-maturely optimizing on option 1. While you will incur a jvm start/warmup/shutdown cycle, it depends on the size of the program and some hardware aspects (like is the app running on an ssd?) and also depends on your performance requirement (I doubt that there is a realtime or near-realtime requirement on this). So maybe incurring the start/warmup/shutdown cost is okay?
I used to do tech interviews at my last company and besides "Effective Java", I strongly recommend reading "Design Patterns: Elements of Reusable Object-Oriented Software". It's insane the number of people I had the pleasure to talk to without even a basic idea of what a Singleton was. Things have changed since 1994 of course, but this book will still help you better organize your code. 
Any good server side action based MVC for java EE 7?
"Clean code" which has already been mentioned. "Pragmatic programmer" is its spiritual follow up. I enjoyed "head first design patterns" much more than the gang of four design patterns book. Also read "project phoenix" which is a novel that is actually a thinly disguised introduction to lean 
Website updated. Some bugs were fixed and class diagrams for javax.lang and javax.naming added.
Congrats in the new job! You'll be fine. Just remember to keep asking questions and replay your understanding when you do. Books are only one part if becoming a good dev. The other key part is communication.
"Java Generics and Collections" by Naftalin and Wadler.
0.2%.
Maybe [DigitalOcean](https://www.digitalocean.com/) not DreamOcean
We put them over everything. Eclipse almost does them automatically for you, and I am sure other halfway decent IDEs too. Commenting and documentation is always a good practice that comes back to help you.
True, my bad😅 (guess I got mixed up with DreamHost)
I was looking at AWS but it just seems like a bit too much to catch up. A whole bunch of different services and u really don't have a map to navigate. Thanks, I will check heroku out👍
Javadoc when needed. IDEs adding javadoc to all methods is the worst. More often than not the javadoc says nothin more than the method name and hence is useless imo. 
[Azure](http://i.imgur.com/HmQG45v.jpg) has a free tier option, but only supports java 7. For java 8 you will need a VPS that costs money
ovh/kimsufi is probably the cheapest. OVH offers VPS, Kimsufi offers dedicated severs. It's actually the same company with the same hosting locations, just distributing under a different name.
Compile Java code directly into machine code so that the JIT doesn't need to warmup/optimize said code. Obviously, there's some treadeoffs but the biggest draw is lower start times, and better performance of short-lived calls and programs where the cost of JIT-ing dominates the cost of just actually running it, but you still don't want slow interpretation
C. Technically, I took a course in Basic as an elective in college. I didn't program after that though, and it wasn't until almost 10 years later that I picked up *Learn C on the Macintosh,* by Dave Mark and taught myself to program. Not long after learning the rudiments of C I learned Perl. From there I went on to Java and Python, and that's more or less what I've been programming in since.
Yeah, code that's non-obvious, code which is essentially an API even if internally only and also when working at a startup since an acquisition may one day be possible and full comments are required for due diligence.
I prefer Linode.
Hitting the disk costs money. Bandwith out costs money. AWS is convenient but everything you do on there costs money. Something like Linode or Digital Ocean or maybe Vultr are better options for a side or hobby project, IMHO. 
what are you using it for ? the smallest digital ocean instance, running java and mysql is really pushing it, plus you need to do a bunch of ops setup. 
&gt; We put them over everything. Eclipse almost does them automatically for you Oh yes, I love those. /** * Get the object. * * @return The object to get. */ public Object getObject() { return object; } So useful!
I'd be happy if my team put ANY comments in the code.
May I ask how much do you pay for a nano instance (and whole Amazon set-up) ?
Lmfao
I use heroku and for what you are wanting, it's exactly what is needed. No cost for hobby dynos easy deployment and build. 
This
This. I'm for javadocs on all methods and classes (not fields usually), but no one does any javadocs around here.
do not use.
JavaDoc is nice if you're writing a library. Otherwise, I never use it at all and use my unit tests to document behaviors. Test-driven development ftw.
We follow clean code so no. The only thing that needs documenting is external APIs. And by external I mean something you're exposing to a third party. At that point though you want the documentation in an interface file (which will be like 0.1% code, 99.9% worked examples and text). So often that ends up not being Javadocs itself. 
Agreed on REST api documentation. Mostly because it's an external interface which you can't necessarily see all the failure cases from the end point signature. 
What are (all) the drawbacks of Java EE that you speak of?
It costs me around $10 USD per month to run a mongodb and a java app on 2 different boxes in google cloud using a micro server. Google's app engine (while proprietary), is even cheaper (and free for a certain usage limit). It definitely forces you into the google ecosystem, but it is extremely cheap. The great thing about it is they manage the infrastructure and you just manage the code. Edit: There is also a $300 credit for 60 days to sign up and try google cloud. It's a great alternative to AWS that didn't go down during the last DDOS attack.
I love that her examples where written in Kotlin.
Ugh that upward inflection at the end of every sentence is so distracting. Everything she says sounds like a question.
Just to add another piece of advice, personally for the description, aim to write something more descriptive than the signature of the item being documented. If your Javadoc is less than or as descriptive of the signature, you have failed writing documentation.
Jokes aside, I find that those are usually the best: concise code, with comments that carefully explain what the goal, high-level strategy strategy and assumptions are (notably absent: an explanation of _how_ it works. That's what the code is for)
I wasn't saying that non-obvious code is OK, I was saying that something like the following doesn't need its own JavaDoc unless there's a pedantic requirement such as passing due diligence: Document getDocument(IDocumentType type) { ... } Otherwise, yep I agree.
Thanks for the insight... 
I know it's too late, as you already have code running in the wild on clients machines. Have you considered bundling the container and the application together going forward, so that it's all managed through the build and not an external container?
No. Most constants/variables are documented using a single line of comment, if it is a bit more complex it may be documented with more as required. If a variable has to have a specific value, it is either derived from the type or when it is set it is checked before it is set (or if it is `final` it will be checked in the constructor). Most classes do not have a large number of variables, and if they do need to have many variables they will usually be split off into another class which fits the given set of variables and makes the most sense. When possible, all variables I declare are `final`. As an example, `java.lang.Object` has `final short _idhashcode`. There is no real need to be elaborate in documenting this field, it just has the JavaDoc comment: "The identity hash code of this object.". With my documenting style, I do not have difficulty debugging or looking at older code. Also, all the documentation helps for sanity, otherwise maintaining my own project would be quite difficult. When it comes to the standard library and JSRs, I have a clue as to which methods are not implemented at all because they have no JavaDoc. Although I do require that any unimplemented parts of code `throw new Error("TODO");`. 
Definitely, and that applies to everybody...almost everybody.
How comfortable are you with setting up everything yourself? If you want to avoid all of that, like me, I suggest a basic Java package that comes with all you need preinstalled. I've used this package back in the day http://www.dailyrazor.com/private-tomcat-hosting It's nothing special but it does the job. I used one of those packages for 3 years. I'm still with the same hosting company but I've moved up to a VPS package. It's expensive but it's hard to argue with 100% uptime for over a year. Anyways, just another choice among the many. 
&gt; The identity hash code of this object. Isn't that just repeating the name of the variable. I mean that's my problem with documentation. It's generally a sign that your methods/variables are badly named. In this case it's well named so the documentation is useless. In fact if it said anything else I'd hate it because you'd never know which was wrong, the variable or the documentation. Personally I don't like the _ either - `this` exists for a reason. &gt; With my documenting style, I do not have difficulty debugging or looking at older code. But the same can be said for clean code. &gt; I have a clue as to which methods are not implemented at all because they have no JavaDoc. Although I do require that any unimplemented parts of code `throw new Error("TODO");`. Almost none of the standard library is unimplemented. And throwing an Error is terrible. And the message indicating it is due to un-implementation is terrible. You're making "TODO" part of your API contract. Now I have to parse the message to decide whether the Error that was thrown is due to a serious condition I can work round or just unfinished code I have to avoid. `UnsupportedOperationException`exists for a reason and if you don't like it being a RuntimeException you should be creating `UnsupportedOperationError` - but most of us will hate you for it - Errors indicate JVM level fatal issues. And the Java API is not a good reference model for new API design - Joshua Block makes that clear plenty of times.
If they are non obvious, why aren't you renaming them? Personally if I see an API method with something like (String s, boolean b) I want to throw heavy rocks at the developer.
"Microservice architecture" -- you keep using those words. I don't think they mean what you think they mean.
&gt; Almost none of the standard library is unimplemented. Incorrect, most of the standard library is not implemented because I am writing my own version of the standard library (Java ME 8 to be precise, which used to be called J2ME). As such, all of the rules to be followed by normal Java projects are pretty much thrown out the window unless you want a virtual machine and main class library to be very unstable, insecure, buggy, and non-compliant. &gt; It's generally a sign that your methods/variables are badly named. The `_idhashcode` variable is what it is named, the identity hash code of an `Object`. It is somewhat duplicating the name of the variable, but some variables are just really simple in purpose. &gt; And throwing an Error is terrible. You're making "TODO" part of your API contract. Now I have to parse the message to decide whether the Error that was thrown is due to a serious condition I can work round or just unfinished code I have to avoid. Throwing an `Error` is great, because it is fail fast and nowhere in my code is `Error` eaten up (although it may be suppressed with try-with-resources). Take a class such as `ArrayList`. You really do not want `add(int, E)` to no-op and print _"TODO FIXME -- Support adding of elements to specific positions in ArrayList."_, you want the program to fail because the standard does not specify that the operation does nothing. In general, fail fast is a very nice thing because in general when it comes to incomplete code, there will never be an impartial state. When unimplemented code is hit, you will know about it. This environment is designed to run other programs written by others, so for the most part many things are internal implementation details. Using these internal classes is pretty much the same as using `Unsafe`, it is not portable and it can change at any time (especially in my own namespace). If your code relies on the standard class library throwing an `Error("TODO")` and seeing what message is written then your code is broken. &gt; Personally I don't like the _ either The `_` is just to indicate to me that the given variable is (package) `private`. It is a quick flag of sorts that I can use to determine if the variable I am reading or writing is exposed outside of the class. For example a standard class may have a number of variables which are `protected`/`public`, if I am accessing a variable called `_foo` then it will never be `protected` or `public`. I do use it everywhere else though, since it pretty much stuck. &gt; `this` exists for a reason. I also use `this` to refer to all fields, even those with underscores. &gt; And the Java API is not a good reference model for new API design There are the nasty bits in it, but you do not have to use the those bits, although I still have to implement those bits. 
I like adding javadoc for any *public* methods that aren't already explained in another class. Except getters and setters. I just leave the description area next to the parameters blank if it's obvious what they're for.
I am yet to see a method that _doesn't_ need documenting, irrespectively of how well designed it is. Typical stuff that I put into comments: - Where any non-obvious constants come from - What the failure modes are for the underlying services - Why certain exceptions are expected as part of normal operation, and not worthy of either logging or bubbling up. - In my interfaces, what guarantees implementors need to provide, and what invariants they need to enforce. (the "implementors" often being myself, months later) [Here's a great example of what I mean](http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/lang/String.java#1373), straight from java.lang.String
hetzner is very affordable fot both VPS and dedicated servers
In libraries public API should always be commented, since users should be able to use each method without digging into the method body or guessing context in which names where defined. In everywhere else comments should be used only for things that could not be cleanly explained with code, e.g: * non-obvious design decisions, * workarounds enforced by bugs third-party libraries, * optimizations that obfuscated algorithms, * expert knowledge that would made algorithm/function/method name understandable to some specialist, but leave common dev completely clueless, * intentions that could not be easily expressed by code due to the domain's nature. Basically drop comments for everything that could be expressed by code, and only for it.
Not documenting implies that you don't give a damn how hard of a time the next developer who comes along to fix your code has in trying to do so. A method needs to have a contract, and if a developer doesn't see a contract then it is a lot easier for him to implement anti-patterns, blur separation of concerns, and introduce bugs. You need to document methods that are public or protected. Stop assuming other developers want to play detective and figure out what your code is supposed to be doing. Exceptions might be constructors/getters/setters but you can generate those with things like Lombok.
Same. I wrote a dumb text adventure in QBasic when I was a kid. Then it was Ada as a computer science freshman in the early 2000s
Yes. Some poor soul is going to want to call your code some time. It's always nice to document the contract of your method.
The scrabble shirt really sells it
Hover over the method and press F1. http://imgur.com/3kJBUj0 Edit: when you create projects make sure "Download Sources and JavaDoc" is checked for dependencies. When you add a dependency to a pom.xml file it will try to get them if they are in the repo and referenced correctly. 
Oh I'm well aware of the sources thing, but I didn't know about hover + f1 that will be handy. I always used ctrl+q but it felt clunky and I never got into the habit of glancing at javadoc.
Java would have nothing to do with this. It's the new nVidia drivers. Downgrade to 373.06.
Thank you very much. I'm embarrassed by how little I know about java.
This 100x. I've got a guy on my team that just refuses to document. So selfish.
Particular reason for Guice rather than Dagger?
I am not the OP, but aside from explicit container infrastructure (something that modern JavaEE tries to address), there's the whole thing about writing apps that don't control their main method. 
Actually we are seriously considering Dagger. It is even more lightweight than Guice and of course it is Android-compatible. What stopped me initially when I tried it ~4 months ago was IDE experience. Class generation on various changes was not completely transparent. Very often I needed to wipe out all generated classes to ensure correct class generation. Now that was in Eclipse. I need to experiment some more in Idea (and newer Eclipse for that matter).
We've thought about it and its somewhere on the technical backlog, but we've got other architectural issues that we need to address first so we're stuck with it for a while yet.
Oh, I used QBasic to drive one of [these](http://www.lgauge.com/technic/LEGOInterfaceA/9750%281093%29.htm) that we had at school. Fun times :)
With Continuous Delivery the release becomes a completely automated, painless process. The only requirements are to have tests you can trust and a well set up CD pipeline.
Thanks, dzone is crap on mobile.
But to do that properly you have to investigate every method call to every library you use, all the way to bottom. I see no point having RuntimeException if it's considered mandatory to document every possible reason one could occur. 
It's cool for a small, fun project. I didn't take it as much more than that.
That's infinitely cooler than my text adventure lol
I primarily work on business web applications, and for the most part, we've migrated entirely to client-side rendering using at least ExtJS and Angular. The popularity of ExtJS itself (while incredibly annoying), demonstrates that many are sold on client-side rendering.
0.1988885378836%
I just released the new version of Scott to the Maven Central. I started this project when I failed to express something with Hamcrest matchers in a sleep-deprived coding session. Inspired by Spock, it allows the developer to use simple assertions, and still get meaningful errors for failing tests. Any contribution, idea and feedback is appreciated!
It's exactly that, as stated in the README.
Immutability is in many cases a workaround for the lack of "value types" which have copy-on-write semantics when mutated. The issue is rarely ever local mutability, but it's mutability across different contexts, where mutation in one context affects another, typically unintentionally. Some languages like Swift have woken up to the fact that we need copy-on-write data, but it seems plenty are still asleep. Java 10 for example, will have value types, but they're strictly immutable, which pretty much kills the hope of having efficient and easy to work with: - lists - maps - sets ... which don't suffer from the "spooky action from distance" problem, but also aren't excessively awkward or inefficient to work with thanks to full immutability.
this is actually a good idea. Never thought about applying the IntelliJ Debugger onto tests. Another start of a toyproject to test it :)
I don't use files directly too often but from my limited experience it is much more convenient and easier to avoid mistakes if you use `Files` and `Paths`. It's easier to express the most common tasks. Get all lines in a file: `final List&lt;String&gt; lines = Files.readAllLines(Paths.get("file.txt"));` Get a `Scanner` on a file: `final Scanner scan = new Scanner(Files.newBufferedReader(Paths.get("yes")));`
Thanks. Good response. It's actually a pretty nifty project and I was working on something similar awhile back for shits and giggles. DI aside, a good framework for building CLI apps in JVM langs has been missing for ages. I'd love to see code around building pleasant interactive CLI interfaces... curses-like stuff. Also packaging and distributing something that is easy for coworkers to install would be nice. Even fatjars are too difficult at times :\
&gt; At the cost of a large amount of legacy code Can you show some examples? Especially what is more legacy than Spring XML configurations?
If you use Lombok, you can combine @Value and @Wither to get immutable copy-on-write objects. Not true value types, but works ok.
Great summary of what seems like it should be a simple subject, but really has much more depth to it. I will make one note that making an object immutable also means you don't need to make the member variables of the object private and exposing them as public means your object doesn't require methods to access them (via accessors). I use the builder pattern with regularity these days, as most POJOs I'm instantiating would have ridiculous constructors otherwise. In any case, thanks for spreading the knowledge!
Thanks you for your feedback! I have submitted an issue for TestNG support: https://github.com/dodie/scott/issues/21
EJB 1.0
Well, I must say, the video is a great introduction to Immutables... . Kudos...
&gt; making an object immutable also means you don't need to make the member variables of the object private The problem is that if one of the members is mutable, exposing it exposes access to its setters. I suppose you could make each member public/private depending on its immutability, but then you have a weird mixture of direct access and getter/setter access, as well as the potential to make a mistake and accidentally expose a mutable member.
[removed]
Many users in the IT Central Station community also compare New Relic with AppDynamics. This user writes, "We also evaluated New Relic. In the end, the features, ease of use, and customer service provided by AppDynamics was what tipped the scale towards them." You can read the rest of his review here: https://www.itcentralstation.com/product_reviews/appdynamics-apm-review-39294-by-drew-osborne.
Been thinking about both: interactive CLI and some kind of native launcher. Still in the early discussion phase. If you want to suggest ideas or just brainstorm possible scenarios, please come to our forum or github.
So last part is what it means to be Scala framework, and that part not so nice for me. Okay, I can use it, but Scala exceptions bubble up, and when we need to debug in framework and do patch or maybe contribution for oss, there is no escape! Therefor for me this is no good option. Sorry...
https://www.reddit.com/r/java/comments/4vpts6/help_looking_for_open_source_java_projects_to/ https://www.reddit.com/r/java/comments/2dez7w/opensource_project_to_learn_from/ https://www.reddit.com/r/java/comments/2s1eis/any_projects_open_source_projects_need_a_java/ https://www.reddit.com/r/java/comments/4zc65u/open_source_project_to_get_involved_in/ https://www.reddit.com/r/learnprogramming/comments/41o0f7/good_opensource_java_projects_for_beginners_to/ https://www.reddit.com/r/java/comments/29j4oh/open_source_java_projects_for_beginners/ https://www.reddit.com/r/java/comments/1ey1oe/matured_java_open_source_project_looking_for_some/ https://www.reddit.com/r/opensource/comments/2fazwc/what_interesting_open_source_projects_could_use_a/ https://www.reddit.com/r/java/comments/2xdo2j/relatively_easy_opensource_projects_to_deconstruct/ https://www.reddit.com/r/java/comments/3t7gzi/what_are_some_examples_of_great_javafx/ https://www.reddit.com/r/java/comments/4adyck/looking_for_collaborators_for_an_open_source/ https://www.reddit.com/r/java/comments/21rqbb/looking_for_an_open_source_java_program_150200/ https://www.reddit.com/r/java/comments/19pq7c/any_good_project_to_see_others_code/ https://www.reddit.com/r/java/comments/3hhs76/any_open_source_project_is_recommended_for_newly/ 
that's exactly what I'm seeing. You might be right
it worked!
Well Java IDEs interact with the JRE/JDK in multiple ways depending on what feature you are talking about. In general when debugging application code ran from the IDE they would compile the code, then execute a new java process with a debugging socket enabled and connect to that. 
Why does the ide need to "send" anything to the jre? If you're talking about javac, there are three approaches: - run javac inside the ides jvm - run javac as a separate process on each compile - write a compiler server that runs javac in its jvm These approaches also apply to other compilers like ecj. Each has their advantages and disadvantages and I wouldn't call any of them "standard". 
Debugging is enabled on a Java process by starting the process with the Java Debugging wire protocol agent library(-agentlib:jdwp). The debugger supports a few transport options, it can use a socket or a shared memory approach. A good place to start to learn more, is to read the documentation on the [Java Platform Debugging Architecture](http://docs.oracle.com/javase/8/docs/technotes/guides/jpda/conninv.html). As far as how to learn it, I am self taught, with experience you learn how things work and learn what the right questions are to put into google.
IDEs seems do more than just run javac. Like you can ask when a function is defined, etc.
I assume they don't keep the car positions on disk.
I've been using openshift for my hobby projects and I'm liking it so far.
I have heard good words about this one: https://www.scaleway.com/
Great YouTube channel! I recommend subscribing.
I think Ozark can be used with Java EE 7. Hopefully, Soteria sees the light of day.
Thank you for this, looks really interesting!
I've looked at their plains, and it seems that minimum price for a month (with one gear, as they call it) would be around 18$. IMHO it's a bit too much for a pet/hobby/mvp project..
BASIC. Not GW-BASIC, not QBasic, not BASICA, just BASIC.
&gt; Jokes aside, I find that those are usually the best: concise code, with comments that carefully explain what the goal, high-level strategy strategy and assumptions are (notably absent: an explanation of how it works. That's what the code is for) Seriously? I absolutely detest comments like the example above simply because they make me read twice as much while conveying the same amount of information. 
The product I'm working on is basically a series of microservices so we use swagger and not JavaDoc. If I'd be writing a library that's going to be used by 3rd parties I would include JavaDoc obviously but for services they don't make much sense IMHO. In-line comments should document the why, not the what. Stuff like i++; //Increment i Is just clutter that's utterly useless. The same applies to JavaDoc that just repeats the name of the method and it's parameters. Having the same info twice is just a waste of space.
I've been working on something rather similar. Yours is way more advanced so thank you for letting me throw mine out of the window! Definitely going to check it out!
I find his pronunciations of some words so much more sensible than he standard one: * Advantage := Add Want-age * Advisable : Add Wise-able 
My pet project for Java is [FreeCol](https://sourceforge.net/projects/freecol/).
I read through the document and kept slowly wagging my head at the shear complexity of what it described.
Looks like G1GC has a good use-case in Cassandra (~32 GB heap) &gt; The G1 garbage collector is used instead of CMS, it has much better 99.9th percentile latency (16x) and performance without any tuning.
Very cool project! I will definitely use this some day. Your project fullfills the usecase for compile-time build numbers wonderfully, and I have done some very ugly things to get that to work in the past. It looks like the description in the pom.xml is a bit out of date though - I see you're using the tried-and-tested way of creating poms by copying them from another project.
While I agree that /r/java should be limited to Java topics I don't think your argument is helping you that much. This sub already has a clear topic and the relevance of Scala has no bearing on that topic. Scala is simply off topic here, and should not be allowed on those grounds, not the grounds that it is irrelevant.
Sorry, I guess I had that one coming. By "those" I meant "functions where comments are longer than the code", where the comments take on the style I described. Clearly, that particular snippet is several types of uninformative hell :D
&gt; If your system goes down, then when its back up again, 30 seconds later, it will be fully refreshed. I'm probably being naive here, but I don't think Uber wants a scenario where there's thirty seconds of downtime any more than Amazon does. And they definitely wouldn't want to have a single point of failure by using a single data center for worldwide activity.
You could migrate C# to Java by using JNI/JNA for example. You bridge the languages together and any new code becomes Java code along with switching other code to Java. 
While its true that C# and .NET have been windows only for a long time, its not fair to say that .net core is not really .net full. The idea behind .net core is to split up the giant asp.net codebase into smaller packages and make them available in nuget package manager so that you can pick and choose what you need for your application. Another plus of doing this is it will help microsoft support cross platform since os specific api's that were part of asp.net can now be their own seperate package. Everyone has their preference when it comes to things like these, and if anything comes close to c# in terms of similarity, it would be Java, so the comparison makes sense.
That is correct, although I did hear rumors that kestrel will support SSL, caching and other features in the future so that you do not have to use a reverse proxy on the frontend, which would really be great. 
Interesting talk, thanks for the link! Love his approach to the problem something along the lines of: "it's a great technology, and you should use it, just know the limitations or problems you might run into"
So what can be done to tune the JVM when Java sees 4 cores, but is restricted to only a slice of that? I may have to listen again, but didn't really hear any advice on the best way to account for the mismatch.
If it's not a sarcastic : You should manually limit thread pool to only one thread. But thanks, now i know that's video it's not worth watching. 
You can do that with Guava's ImmutibleMap.of () 
Hey there - I just started learning how to code a few months ago, my recommendation would be to check out : www.codecademy.com/ Codecademy is good for tutorials and has a nice built in learning system with a lot of lessons on tons of languages. thenewboston.com/videos.php Has a lot of good tutorial videos and shows what programs are good to get going. 
Alright thanks man I will be sure to check them out! :)
I had to stop reading at gen generics. Java has them at a method level, and the writer thinks they are only at class level. public &lt;T&gt; void myMethod(T t) { ... } I'm left asking why the writer is approaching the subject so one-sidedly after claiming to be experienced in Java.
I really wish vimeo had a 2x speed setting. Is there a checklist or TL;DR of this?
That's true. I just wanted to use a fairly widely known example. There's also `Arrays.asList` that should be pretty recognizable as a method level generic 
The tutorial on oracle's website are pretty good for a beginner. https://docs.oracle.com/javase/tutorial/ If you pursue this path, I would suggest combining it with the Effective Java book, preferably, after you have completed the tutorial. 
The ideas that lambdas has to capture mutable variables to be "true" closures or that generics can't be "real" if they're accomplished by erasure are basically nonsense. 
&gt; The ideas that lambdas has to capture mutable variables to be "true" They don't have to, but they cannot be called closures, just lambdas, in C# lambdas are true closures. 
https://dertompson.com/2012/11/23/sort-algorithm-changes-in-java-7/ TL;DR: You probably have some overridden `compare` methods that are misbehaving. Java 6 would let you get away with it, Java 7+ won't. You can get the old behaviour back with JVM parameter `-Djava.util.Arrays.useLegacyMergeSort=true` but you really should just fix the code.
if any of the OP's complaints with java were news to him, he wasn't a very good java dev. so either this is an intentional troll/FUD, or a developer that fails to understand the power of java and doesn't understand the difference between turing complete and what actually makes a system perform based on the OP's posting history, i'm going to guess both 
Great work! [java-power-assert](https://github.com/jkschneider/java-power-assert) has a similar approach. Any tips on pros/cons between them?
Scala needs proper tooling. The release notes talk about scalajs for web, scala-android for mobile, scala-native for producing native binaries. If the release notes for a Java release had all of that you would throw a fucking parade. Give us a break. 
I wonder what Scala did to you. It seems that you made your mission to destroy it by your posts. :-)
Try not writing a whole program but doing exercises instead. When you get really good at building small parts, the next larger parts are much easier to understand. Something like practiceit from University of Washington is helpful for practicing everything you will want to learn how to do for a while.
If this works on Android, it could be particularly good for performance improvements. 
Since this post is about **learning Java**, it should rather be in **/r/learnjava** or in **/r/javahelp**. The **sidebar** in **/r/learnjava** has a section **Free Tutorials** that lists excellent tutorials tailored to absolute beginners to programming. In particular, the MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html) of the University of Helsinki is highly regarded.
Cool! I stand corrected.
And then the problem to log this data becomes how to dump the contents of that hash to disk... it is far more efficient to stream the contents of a hashtable to disk in one chunk every minute or so, than to update database records. Random Access verses Sequential Access... as any mainframe programmer will tell you. 
Good thing Java 8 introduced a better way of making comparators Comparator.comparing(Entry::getNullableField, Comparator.nullsLast(Comparator.naturalOrder())) This way you eliminate bugs related to comparators like comparing wrong fields or violation of compare contract
since Gradle is using it, it is a lot more attractive. Also it has a lot of useful default settings like visibility, null-behaviour, full interop with Java etc. imo this is what Scala should have looked like from the beginning. 
Apologies mate, seemed that both sites were a good starting off point... Do you have any recommendations?
Alright hey thanks for the help will be checking out these sources for help! Thanks again! :)
Never do something because a pattern tells you so. If you have a _valid_ reason, do it. Reason of existence should for example be documented and signed with the authors e-mail for further questions.
&gt; For the initial release in JDK 9 the only supported module for AOT compilation will be java.base. What does this mean?
apologies if it's the wrong sub. Can you recommend the right sub for a question like this? Just figured I'd get recommendations from other people who do what I do and have real world experience.
Awesome, thanks. Being new to reddit and Java, I appreciate being pointed in the right direction
Maybe try on YouTube: https://www.youtube.com/watch?v=hJyAfC-Z2xk. It's not the same recording but it looks like it's the same talk.
[removed]
I would second this; Kotlin has a lot of the sugar that makes C# nice and unlike Scala it doesn't produce horrendous byte code.
I'd be inclined to call OSGi Services, microservices. Eclipse runs on OSGi. An Eclipse Plugin is really an OSGi bundle. So the entire Eclispe base and Eclipse ecosystem is all microservices. Why use the term "reactive"? Is the JavaScript React camp trying to ensure success against the impending success of AngularJS 2? 
Excellent.
The vert.x project is developed under auspices of Eclipse foundation. It's not the IDE that is the part of the header. Also, vert.x is used for the backend development. No links to React.
Ok..... so what does the hashtable stream look like....
Is the Maven repo not up yet? The site lists the snippet for Maven support but its not being found atm. edit: nvm this ~~is~~ was a me problem
Blog seems to be down but the main site is working. https://lwjgl.org
This has absolutely zero to do with Java programming and thus is **removed**.
not sure what happened there but its back up.
A what :-)? I'm curious. 
It's not just JavaScript, in fact most of Netflix has open sourced RxJava It's just another way of doing things, and lends to being highly scalable.
Uh, think you might be blowing this a bit out of proportion. I was trying to clarify to you what reactive is so you wouldn't mistake it with React, which is totally understandable. If you want to get on a high horse about buzzwords or whatever, that's fine but you're kind of missing the point. Also, no one is losing job opportunities because reactive isn't on their resume, if they are the place hiring them might be a bit pompous anyhow and is probably a good thing to avoid. You should probably read a bit more into it than painting extremely broad strokes. It's more than just "events that we've had since the 60s".
Funny I was just thinking about making this for fun, well done 
That's messed up that you need a cheat sheet for spring annotations now.
Thanks. I'll talk to my team about this one. 
It is for open jdk 9: http://openjdk.java.net/jeps/248 , still not sure for Oracle jdk i guess
There used to be a C library that did this too, called the ASCII Art Library. I remember using the mplayer video player and filtering the video ouput through aalib and watching ASCII movies.
Yes! I remember seeing an ascii mode on VLC, perhaps it was the same library 
Can I use it with enums?
[Here](https://github.com/google/guava/issues/605) is an explanation. 
`Throwables.propagate` deprecated? I probably use that more than any other method in Guava :/
Here's [my version](http://java-articles.info/articles/?p=855).
Not saying I agree with it either! If I remember rightly there'd possibly be classpath problems were they to split it up now.
Nice one. I've been meaning to do something like for years. I reckon you've done a better job that I would have though.
See https://github.com/google/guava/wiki/ThrowablesExplained#uses-for-throwablespropagate 
What does this have to do with Java?
Disagree. You just have to rip it out if u ever move to jdk8 (which should be priority 1 on legacy project, imho), so why bother using it at all? Write ur legacy java in a way that ur ide can provide 7-8 refractor introspection (annon inner classes, etc)
We come in a bit higher than 10 euros, but offer 24/7 support and you can scale up easily. https://www.futurehosting.com/virtual-servers/java-vps-hosting/ 
Not yet, but keep an eye on https://github.com/junkdog/constexpr-java/issues/1
Your MyDIContainer class perpetuates the wrong misconception that "DI" needs some sort of magic container that performs reflection based instantiation and injection. Simplest form of DI is simply when your main method creates all objects and passes references to constructors as necessary. Example (without any DI container): https://github.com/odoepner/bagh-chal/blob/master/src/main/java/net/doepner/baghchal/Main.java
I've never used guava. I can't imagine why I'd ever feel it's a "must". I wrote scala for 5 years before coming back to Java. Yet, still, I can live without guava's collections.
[removed]
Intellij has support for automatically migrating some guava stuff to java 8. https://blog.jetbrains.com/idea/2016/04/new-inspections-for-java-8-in-intellij-idea-2016-1/
Number one reason I don't use Guava: it will probably clash with some other Guava version a library uses.
[removed]
I probably use Guava caches more than anything else from that lib.
I was an advocate for DI even in my C++ days and didn't even realize it, thanks.
My understanding is that Guava 21 will be the "java 8 aligned" version, with more things supporting/working with those things in JDK 8 itself. Not that it'll remove things immediately. Not everyone is ( unfortunately ) able to target JDK8 solely yet.
Sadly, there's never a guarantee that some projects will ever see JDK 8 :(
Is this support yaml?
I like your version, its very simple
It's a way of zeroing in on and modifying various kinds of a immutable data. Sadly, I don't know of any libraries for it in Java, but there's at least one for Scala: https://github.com/julien-truffaut/Monocle This awesome guide to functional programming also has some detail, even if it's pretty sparse on actual examples: https://gist.github.com/jdegoes/97459c0045f373f4eaf126998d8f65dc#optics
It's not that hard to roll your own :) just use the general conversion technique as a base and figure out how to code the specifics. 
You should check out Caffeine - it's made by the team that helped make Guava's caches. https://github.com/ben-manes/caffeine
Partly the latter, and partly that many library developers don't follow the "rules". If they handle their deprecation warnings at least biannually, and they avoid @Beta APIs (which are fine for applications to use, just not libraries) then as long as your app uses a suitably new Guava, you're almost certainly going to be fine. That happens because we are pretty strict about backward compatibility, but unfortunately so many libraries don't follow those simple rules that we have a reputation for making incompatible changes all over the place. All that said, I accept the blame because we don't warn about these "rules" nearly as loud as we should. We should fix that.
You don't control the build process of the end user. But if they care they will cut it down. I don't it as a problem. I like one jar.
Package management in dot net is more painful, imo. Maven excludes can be used to control dependencies.
Why? I've only just started to use it, my team mate likes it tho? Been using guava predominantly.
Thanks /u/tsredd. Yes, it doesn't matter for just 100 records but what will be the best practice for my case? I am storing, for instance, FAQ (id(int), question(String), answer(String), categories(List or array maybe)) objects. Basic operations will be search(String) and getFAQById(int id).
If this is configuration that won't be changed by the user then using some kind of serialisation format (JSON, YAML, XML, pick your poison) is fine. If it's something that (power)users can edit it should be stored in some kind of database (and for an in-process DB you're better off with a pure Java DB like H2 than SQLite). Also for questions like these we have /r/javahelp
Guava is a nightmare for this reason. They removed "Closables#closeQuietly" and put a bunch of projects in jar hell, for instance. It's bizarre to see a utility library so aggressive above breaking compatibility considering Java's general philosophy of backwards compatibility and Java's fragile dependency management. 
Any tutorials you can share?
I like turning off the Internet from time to time, and while I'm at it, I remove some fuses to turn off electricity in the house. And every time, those stupid websites stop working!!!
I'm in an OSGI world, not Spring, but I do package my components in a structure that is extremely similar to what is mentioned in the accepted answer on that thread. My team does not have any front end components, we simply provide an API, so we do not have that additional component to worry about.
I've read original code, but not fixed one as the original is nowhere near the thread safe. Arr and size are not guarded by the same lock, and that's not thread safe. Basically writing to Arr and size under write_lock and then reading them under read_lock doesn't guarantee anything under Java memory model. They need to be volatile, which will guarantee that everything before field store is visible to other threads. This also mean read_lock is not needed.
I only fluently speak one language, so I know I don't have much ground to stand on, but her accent makes following and understanding this algorithm very difficult. EDIT Here's an example of a more easily understood version: https://www.youtube.com/watch?v=0nVYi3o161A
What a ridiculously broad question. For user facing messages tell them what went wrong and what they need to do to fix it. For unexpected errors make sure you don't swallow the stacktrace, and log it (including any parameters/state which you deem relevant).
Thanks for your work and sharing it. Added two feature requests: * [License](https://github.com/ankurcha/gcloud-logging-slf4j-logback/issues/1) * [Maven Central](https://github.com/ankurcha/gcloud-logging-slf4j-logback/issues/2) 
If the accent is bothering you, here is my course's notes on dijkstra, which I found to be super easy to understand: http://www.cs.dartmouth.edu/~cbk/classes/10/16fall/notes.php?num=17#algo
how do people typically deploy a vert.x application? Lets say I need to consume work from a queue. Do you spin up new jvm processes or can you dynamically add more verticles (if so how is this typically done)
You can still do it in mplayer too with "mplayer -vo aa &lt;file&gt;"
It's not so much the library itself, it's the users including it as a compile dependency you end up with multiple versions. I recall having 6 versions of Commons Logging, before switching to Gradle (More control by forcing a version across an entire project)
Let's give you the benefit of the doubt on this. But this sub is not intended to answer programming questions. Please read the sidebar and use /r/javahelp to ask your questions. Also, if you need to do this for an actual task, read up linked lists on wikipedia and go from there if you do not understand your professors slides. If you struggle with such a rather easy concept, you need to get a bit more into it anyway. 
Here's an article on designing APIs with exceptions. The examples are .NET specific, but the concepts are equally applicable to Java. https://www.infoq.com/articles/Exceptions-API-Design (If anyone wants to write a Java specific version, let me know.)
You don't learn it in the US either, which I think is a shame.
Exactly, that's what libraries need to do at least once every two years. 
..."and I haven't been able to contact anyone related to the project (after trying 4 people over 2 weeks)" ??? I didn't quite get it. Is s/he saying, s/he was not able to talk to sparkjavadevs privately OR they ignored this?
Just started a project using it, +/- 2 months ago. Cool.
For junior dev's I'd recommend they start with Head First Design Patterns - it's a much easier read for learning a subset of the major patterns.
When a user clicks a button, that calls an event handler, which calls a function, which calls a function, etc until something changes on the screen. Data flows through a cascade of function calls over time. With reactive programming, instead of data flowing ad-hoc through functions, it sits inside a pipe (aka observable) which is an object which holds your values and explicitly models time. The pipe comes with batteries for transforming and combining pipes, and especially for dealing with time (rate limiting, debouncing, etc). I think the first 5 mins of [this presentation](https://www.infoq.com/presentations/rxjava-swt) do an okay job selling it. It's in the context of UI, but applies just as well to network requests. 
Classic article. Coming from C++ at the time where dependency injection isn't used pervasively, the 'no new in constructors' advice was an absolute game changer for me.
Thank you
http://misko.hevery.com/code-reviewers-guide/flaw-constructor-does-real-work/ I particularly like that it makes it clear from looking at the constructor signature what the dependencies of a class is.
honest question, why ? I'm interested by your response concerning a real use case it seems you have please. Is it also linked to the fact that you have difficulties to find scala capable devs or just because the feature coverage of Scala is not interessting anymore ?
That answer presupposes that mocking is a good thing. IMHO it's a sign of a bad design - I've never found the need to use mocking frameworks for tests. Immutable data structures and pure functions pretty much obviates the need entirely.
Can you link to a program that you've written in this style? I'm having a hard time visualizing how it would work in practice
What's the difference over http://owner.aeonbits.org/docs/welcome/?
I can't seem to click the top links with IE (work).
I don't have any such code online. The [Functional and Reactive Domain Modeling](https://www.manning.com/books/functional-and-reactive-domain-modeling) book covers the subject, however the code therein is Scala, and it relies heavily on FP concepts.
The Internet is also a malware vector, and the computer is. Enabling the Internet for every random page is an invitation to get hacked.
Thanks, that was what I was looking for.
You should check out Data structures and problem solving using Java by Weiss
&gt; The pipe comes with batteries for transforming and combining pipes, and especially for dealing with time (rate limiting, debouncing, etc). I use SwtBot for SWT headless testing. As far as a bunch of strung together pipes, it sounds like a debugging mess and a potential performance sink. Either way, thanks for the information. 
SQLite is great for small amounts of structured data. The only problem is that it isn't human readable.
Agreed, which is why I dislike hard and fast rules like "new's in ctors are bad". 
How do you write and test classes that interact with the database if you don't inject a connection object into them? Or for any other storage subsystem for that matter?
No. In this case would be better private contact.
I unplugged my monitor and the site doesn't even render. WTF is up with that. 
Vscode with redhats java plugin is pretty good!
Imo, intellij is the best Java IDE. On any platform. 
IntelliJ is fantastic, and is cross-platform. The Ultimate version is free for college students too, though you won't need it for a class that's using BlueJ.
Emacs..no...VIM...crap, forgot which side I'm on. Oh yeah, IntelliJ!
My favourite one is Netbeans, specially their tooling related to GUI development both Swing,JavaFX, JSF and pure HTML5 + JS. Eclipse doesn't have such nice GUI editors and InteliJ always seems a bit heavier than the former two, specially if you don't have a SSD.
Just download the BlueJ installer for "all other systems" - http://www.bluej.org/download/files/bluej-316.jar - and start it using "java -jar bluej-316.jar"
OK, thanks for the suggestion, I will definitely do this as a side project. But for now, I will probably install IntelliJ because it seems like what most people here are suggesting.
I'd say that too but I don't want to argue with random people that are wrong
Best answer in the thread. /u/AKhan17 you can even make yourself a launcher ( desktop icon ) in Red Hat with that command in it so all you have to do is double click it to start BlueJ 
That was my impression from reading, but my experience has been the opposite. Re: performance, it's very hard to rate-limit or debounce a function call, but reactive programming makes it easy. We've been able to implement a lot of stuff that would have been too slow/expensive, but pulled it off because of easy rate-limiting. Rx definitely uses more compute per operation, but gives more control over what you're computing. Re: bugs, with Rx I've had fewer bugs, but the ones that I've had have been much harder to figure out. Probably a wash on that front.
I do use a text editor (npp) when I work with Windows (for batch,VBS, PS) because I know what I'm doing there but this is my first experience with Java and I would like to have a trusted compiler
I've been using netbeans forever. Zero complaints from a Java/JavaScript developer
This is probably the best answer in the thread because it allows you to use the same tools as the rest of the class, and that will make it easier for OP to get help with tool issues.
Intellij
Intellij
Same. I've used both for non-trivial projects, and Intellij feels like a much more refined tool than Eclipse.
You wouldn't write a "website" in Java. You *may* write a Web App with a Java based back end using a framework or MVC, but that is clearly out of your league. A simple website will use HTML and CSS, perhaps some JavaScript/JQuery if you want some things to move or do fancy things. Bootstrap is basically a CSS template/theme that makes a very basic/ugly website look presentable. It's very easy to use. Look on their website. You aren't going to get a job as a web-dev anytime soon, so if you just want to throw up an "about me" web page, use a service like square trade or weebly. If becoming a web developer is your end game, dint worry about building a site yet... 
no, they lack variables
BlueJ is cancer, use IntelliJ. It's literally the only IDE you need, plugins for EVERYTHING. Haskell, Rust, Ruby, Scala, C/++, and so on.
It would be less effort to just pass in an empty object. The whole point of generic methods is that they are supposed to reduce boilerplate code, not as to it.
Non-sequitur! It's no extra boilerplate to pass in the constructor itself when it has no parameters, other than defining the called-method's parameter's type (hint: generator). If the constructor has parameters, I challenge you to show a simpler expression of an incoming constructor/generator than the definition of a functional-interface. Also, I gave the formal explanation which is never simple. Using it is rather simple in java; they're just method references (double-colon).
Netbeans is fine and is often more intuitive than Intellij, although that being the godfather of features.
Did you miss the part where he's in a class?
http://www.w3fools.com
Eclipse is highly underrated. EDIT: I know, truth hurts.
This is the missing one: https://www.voxxed.com/blog/2016/10/java-9-series-concurrency-updates/
By default settings, indeed IntelliJ is very, very poor at highlighting errors/warnings. However, you can easily customize it, eg give coloured backgrounds. And also refactoring can be dangerous in IntelliJ, eg renaming a method that is a common english word (eg, "delete" or "send")) can screw up all the comments in all the files in your project... (learnt that the hard way...). Still, having used both Eclipse and IntelliJ for years, IntelliJ is on "average" much better (at least for my use cases). 
Oh snap
Fyi it's not even remotely a "straw-man argument."
What is your strategy for code that involves two-way interaction with a database, device driver or external service? (genuinely curious because I always hate mocks)
I made the switch about 7 years ago and I'm _still_ on ( a version of ... ) the eclipse bindings. At the time , Eclipse had a lot of the same features as Intellij did, it's just much harder to find/use eclipse then using the same thing in Intellij. If you're happy with Eclipse, I say stick with it.
Intellij provides eclipse key bindings out of the box. The only thing you need to do is remap ctrl+f to find and map find and replace to some other key combo (I use alt + f). Also, if you have IDEA, then phpstorm (and all the other products based on IDEA) are available as plugins. And phostorm is to pdt as IDEA is to eclipse (or so I've heard) 
Vim and IDEA
Well, it's one example which refutes the claim, but it's quite specific.
As for me, I get [a little run arrow next to the line number of a main method, or the line number of a class declaration](http://imgur.com/a/IepHx), that I can click, which offers me run/debug/run-with-coverage right there. That's 2 clicks not one, but the clicks are close together and exist for a good reason.
Chapters 4 &amp; 5.
&gt;Still, I would never recommend it to anyone. I don't care that it used to be more shitty and now it's less. So you have not read the new content and you still would never recommend it? The fact is clear here: you lack the knowledge to give an informed opinion about the site.
Hmm.. ok, so I am not going to get deep into the details of this (I suspect it has to do with the auto configuration you've enabled with boot and that the string returned from your controller is inspected where you should've explicitly tell spring you are retuning a string as output so it won't search for a template, Or maybe you are handling the connections queue differently, idk. that's just a hunch). Anyways, I've been doing RTB for years now and lately with a spring boot project. Configured right our latency for 99.9 percentile was ~30ms (we have 50ms SLA). You are stating way more then this for an hello world example , tho with a bit more reqs/s. While I get that spring is a beast, with the right configuration it can do magic. I'm not saying you are incorrect but that there might be underlaying cause for this margin. Just my 2 cents. Nice job either way
at least I do not, currently the IDEs are just GUIs for the docker cli and I am not sure if working through all pop-ups is easier than just doing it manually. 
We are using docker to standardize our db. We don't use ide tought, as we are comfortable enough with the bash shell carried by mysysgit.
Nice. As a wrapper around Undertow I can see people willing to try this, despite being a new project, because it's difficult to use Undertow without writing your own wrapper. And Undertow and Netty are basically the only async server choices (Netty requiring even more work to make it useful for apps). Is absolutely all IO async? Does your wrapper initialize any of its own threads? Those issue have become important to me as a Quasar (green threads) user.
The test is trying to gauge the overhead of each framework/server so we are pushing to the limit of each server for high throughput. If you drop the load, response time does look better. I've used Spring years ago and stay away from it as it getting bloated. Here is an article I've been working on to explain the issues with Spring. https://networknt.github.io/light-java/architecture/spring-is-bloated/
I've heard maintainers of other server projects echo this sentiment. Is there a good explanation out there as to why servlet (3.0) is not good for async? Maybe specifically in context of running servlet async on Jetty?
The most valuable advise in this article is the "and" thing. This is not only about writing testable code but writing code in general: "Summing up what the class does includes the word 'and'". Single Responsibility Principle is the most violated principle in most code bases. (from experience, I don't have numbers). Such a simple principle yet so hard to follow.
Not so bad as with car! Last night I removed al gasoline from my car and it would not start anymore! Worthless!!!
I have built an API framework for a big bank in Canada on top of JBoss EAP 6.4 and dived into the servlet 3.0.1 and 3.1 in trying to address the performance issue. Basically, everything they've been done is retrofit and not efficient. This JEE environment is declining when people are moving from monolithic app to microservices architecture in containers deployed on cloud. Could you imagine you have thousands of weblogic/websphere/jboss instances running within your organization? How much memory/cpu resources is used by the application servers and how much used by your service code? One real test I've done in another bank with my framework deployed on 512MB cloud instance vs Spring Boot with embedded undertow with 2GB cloud instance. And Light Java got 11ms response with about 3000 request/sec vs Spring Boot 70ms with about 200 request/sec. This is a real use case implementation and everyone is shocked.
I will be messaging you on [**2016-11-06 11:17:01 UTC**](http://www.wolframalpha.com/input/?i=2016-11-06 11:17:01 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/java/comments/5bam18/a_fast_and_light_weight_microservices_framework/d9nbl84) [**1 OTHERS CLICKED THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/java/comments/5bam18/a_fast_and_light_weight_microservices_framework/d9nbl84]%0A%0ARemindMe! 14 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! d9nbmgn) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Not much.
Spring Boot isn't Spring, it is a Spring product. And Spring Boot doesn't depend on the servlet API, it just ships with an embedded servlet container because that is the most common configuration for web services. You can [easily](http://docs.spring.io/spring-boot/docs/current/reference/html/howto-spring-boot-application.html#howto-create-a-non-web-application) configure Spring Boot not to use the embedded servlet container, and you can [easily](https://spring.io/guides/gs/reactor-thumbnailer/) develop non-servlet based web services in Spring Boot through yet another Spring product, Spring Reactor. The reason that Spring Boot ships with an embedded servlet container is because 90% of the people using Spring Boot will develop servlet-based web services using Spring MVC. And other products like Spring Security are dependent on servlet.
&gt; the 'no new in constructors' advice was an absolute game changer While this is certainly an indicator, I see people became too dogmatic on this. You have to *think* about object creation. Is it an intrinsic detail of my object, or a dependency which I might want to control? But saying no always doesn't qualify as thinking. [Some things are details](http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/java/util/BitSet.java#l166). Making those things injectable won't produce a benefit. 
Is the "how to" article in the second link I provided not sufficient? https://spring.io/guides/gs/reactor-thumbnailer/ It's not exactly "hello world", but close enough.
You can easily learn enough to write a "Hello World" application. That will be enough to allow you to dip your toes in Java SE, the most basic Java you can learn. To get comfortable with writing "Java-style" apps will take at six months to a year, maybe. Java has its own ways of doing things, like any other programming language. To learn the full breadth and depth of Java SE, will take three to five years, I would say, and that experience would come from writing and reading lots of programs. Android is a different beast altogether. Android has its own SDK *on top of* Java SE, which is huge and has its own ways of doing things which you have to learn. Effectively writing Android apps would be a challenge for someone already versed in Java, so you have yet another learning curve to add. That's the "right way". The "crappy way" is to just slap things together until it works without really understanding anything. Programming by accident, I would say. I've seen people pull that off from 6 weeks of learning, if even that, but the result is total garbage that just happens to work, more or less.
What production costs are reduced? Did you benchmark this? I think most of the cost of software goes into paying the developers and maintainers of software. That's where optimizing costs should go, by using tools (languages and frameworks) that allow hiring cheap developers, having quick iterations, integrate a variety of other products, etc. Custom frameworks trying to optimize performance commonly drastically increase those costs for human resources. It most commonly does not make much sense to optimize in other places than the bottleneck of services.
In one week, you'll probably have enough for an entry level job. I'd give it two weeks so you can skip entry and go right into a mid level engineering position which is more interesting. Since you're a quick learner you might even be able to do that in a week and a half. Plus, since you definitely know how to use a computer you should be able to get the skills needed for a senior dev job in about a month or so.
I am trying to write up something but currently have these points in [README](https://github.com/networknt/light-java) why this framework section. It is very hard to quantify in dollars as it would be per project basis. I am working with one of my big clients to evaluate it on a three year project and hopefully come up with something more tangible. Thanks for asking. 
Haha yes the real benefits come from just giving some consideration to which fields are internal details vs collaborating objects. Devils advocate: C++ programmers can get a bit obsessive over controlling memory allocations, so even allocating the backing array for a bitset might benefit from some Allocator interface being optionally provided as a constructor parameter.
Do you have accessibility or something such as mouse keys on your system (either purposefully or accidentally)? 
nope :/
Announced earlier on [guava-discuss](https://groups.google.com/forum/#!topic/guava-discuss/GqGImaoHHs8).
Alright, so others have already mocked you for a bit so I'll give you answer you are looking for (I am guessing). In one week you could (could - as I know nothing about you and I will make assumption that you are average to good student level) learn most of the syntax and basic way of how java works. We are talking about learning to TYPE java but probably whatever you type would be ether copy paste from stack overflow or something really bad. Programming is more then simple coding. It is about coming up with solutions for certain problem and transfering/building that solution using code. You can solve particular problem on different ways using different languages and tools. That is why you will see a lot companies asking for good problem solving skills. Programming is also a way of expressing your ideas. What few tried to tell you here is that you first need to learn what is and how to do programming then learn java or any other language. As you have said you have no prior programming knowledge. Excuse any typos, I am on a train right now.
Your question is kinda ridiculous though. Try asking: "How much Spanish can I learn in one week?" or "How much Math can I learn in one week?".
* Quantity of "aquired knowledge" is hard / impossible to express in a meaningful way. Apart from some notions like "basic", "medium", "professional", "senior". Also everyone has a different mental image of these T-Shirt sizes. * Individual aspect of learning: How well do you learn new things, how well do you learn abstract concepts, algorithms, discrete math, ~~what is your prior knowledge of programming~~, ~~Java~~, computers, etc. * ~~What do you mean with "learning Java". There is syntax only, standard library, JVM, 3rd party frameworks and libraries, enterprise software, big data, Android, web development, desktop, etc.~~ Edit: Question seems to have been precised and improved. 
IntelliJ has a nice Docker GUI that I use to keep track of what containers I've got running and watch their output, and occasionally to force-kill them if I don't feel like using the CLI. It's kinda handy but not exactly a life saver. I mostly start them with a Maven plugin (io.fabric8.docker-maven-plugin).
Very sad to hear about the state of the project. FindBugs helped stop me from writing a lot of subtle bugs, especially when I was new to programming. I guess i will look into alternatives like [PMD](https://pmd.github.io). Are there any other tools I should read up on?
Things will be fine in the short term with copies in maven central, but I suspect over time will slowly start to break with new versions of Java. 
Totally Java related, hence the name ***J***SON, right? 
&gt;The code is very complex, has "organically grown" over a decade, is not documented and has poor public interfaces. Most of the code consists of the very low level bytecode related stuff, tightly coupled with the ancient BCEL library, which doesn't scale and is not multi-thread safe. No one enjoys maintaining this code, at least not me. I see no future for FindBugs with the BCEL approach, and see no way to get rid of it without investing lot of effort, and without breaking every detector and possibly many 3rd party tools. This is the biggest issue we have with FindBugs today, and most likely the root cause for all the evil. This code can't be fixed, it must be rewritten. So, real tl;dr: FindBugs is dead because the code smells like a zombie zoo, needs to be rewritten with extreme prejudice, and not too many folks are up to a task like that.
That sucks. I use this every day. None of the other free static analysis tools were as easy to use.
I guess they need to start eating their own dog food ...
Just because it's poorly written doesn't mean it's full of bugs :)
I highly recommend people look at the NIO API over the java.io API. If only for things like delete() throwing an exception in case of failure so you can find out why it failed.
Yeah the irony is quite big, here.
Sonar is just a nice interface to findbugs, pmd, checkstyle, and the like.
It's not bad, but I don't know if you "need" to package the different "layers" (service, dao, dto) as separate jars. It depends on your requirements for reuse.
Sonar has its own analyzer for a long time now. By default, I even think the latest version does not enable findbugs rules anymore.
The servlet API was badly designed and it is very hard to manipulate the request as it is read only. You have to use wrapper class and it is very slow. They cannot make it right at the moment as it will break the backward compatible promise. Also, docker is a container and there is no reason to put servlet container into docker container. 
Looking at his twitter, he did respond after OP's linked message. He said he's going to get back involved with it now, and has a deal in progress to bring some people to work on the project. Hopefully that means he'll also diversify the admin role so that there's no longer a single point of failure in the admin structure.
Hopefully so. 
Checkstyle achieves a totally different objective though - literally, style checking. A good project uses both. 
And... it doesn't support comments.
Something I'd like to recommend for microservices is grpc: http://www.grpc.io/ It really only does the rpc aspects of things for you, so you'll probably need some other libraries to make it more useful. You can even use Spring! It might not be the lightest thing in the world, but you get the DI container and the ecosystem w/o having to include the Web components which tend to be a source of the performance issues demonstrated in these benchmarks.
Good. Some high up decided that implementing findbugs would give us an automated way to find all the bugs in our code. Their question to any issue is "why didn't findbugs find it?!"
Take a look at SonarLint, if you don't want to do the setup
Depends: Do you have any prior programming experience? If the answer is yes then quite a bit actually. If you are knowledgeable about C or C++, or similar style of syntax, you pretty much know Java. Java isn't really a hard language to learn it was developed for it to be easy to understand and for people to pick it up quickly. I would recommend looking at Oracle's Java tutorials. They touch on every major theme from a "Hello world" application to writing a server. Google should have many tutorials on developing Android apps. So if you pair the two together you should be able to a little Hello world app in a week. 
Lombok is pretty nice, I've definitely been using it quite a lot lately. They even have a new "val" keyword for java https://projectlombok.org/features/val.html
sounds like some light reading is in order for me to look into kotlin more seriously
Please share your experience.
Ruby... And work started for JavaScript. Oops /u/thjanssen
Thanks for mentioning my tool on reddit. I think it is useful mainly when you have REST service and you want to have description in TypeScript. It scans the service automatically for JSON classes and generates TypeScript declaration file (.d.ts) describing the service. It supports many features commonly used in Java REST services created using JSON mapping classes. Recently I added support for generating TypeScript 2.0 tagged union types from Jackson polymorphic types. I will be happy to answer any questions you might have :-)
I'm working on an implementation of the Ruby programming language written in Java that is faster than the one written in C++ that uses LLVM. It uses a new JIT compiler, also written entirely in Java.
Thanks for your reply, that indeed sounds interesting! Could you perhaps tell me what nowadays is trending when it comes to Java? I'm not so experienced in it, I know for example that the release of Java 9 is delayed (again), but this is nothing new. Any other things that are ground-breaking when it comes to Java? And how do you keep yourself up-to-date with this sort of news.
I can't pretend my project is on any kind of wider trend of Java development I'm afraid! I also don't really know much about conventional Java enterprise or web development or where it's heading. I go to a lot of conferences and speak to the people working on Java directly to find out what is coming up in the core language and tools. And I read the JEPs and JSPs (documents describing proposed new features).
[Codename One](http://github.com/codenameone/CodenameOne/) it's a cross platform framework that allows you to build native mobile applications in Java. It combines a cloud build server architecture with embedded mobile VM's, translators of Java to C, C#, JavaScript as well as retrolambda and other third party tools (e.g. iKVM, TeaVM etc.). I've been working on its various incarnations since 2007 (started at Sun Microsystems).
IntelliJ IDEA inspections are a very good alternative. Actually the inspections are much more powerful than FindBugs ever was.
There is an easy answer to that one, "because we didn't invest enough resources in programming on findbugs".
I work on [SquirrelJME](http://multiphasicapps.net/) which will effectively be an implementation of Java ME 8 (JSR 360). It is written in pure Java and I plan to keep it that way (since I can just write my own JIT to compile the code natively anyway). 
Don't get me wrong. Findbugs is useful but it doesn't fix bad requirements or incorrect business logic. 
We're currently redesigning our application / platform from Payara/Glassfish Java EE + Dojo to a more cloud-friendly environment using Spring / Hystrix / Docker / Elm and more!
1. To do flight recordings you may need to add some flags to the JVM process. 2. If you want to analyze memory problems, the other tabs in Mission Control are much more interesting than the Thread Dumps tab.
I would say it's a tie between a college project (creating an online registration card/process, circa 2002, using TDD and XP techniques) and the count and order system (it used predicates, which were new to me).
There are so many packages that do this and it's a constant travesty that they can't be unified due to the lack of real extension methods. It just makes the ecosystem fragmented and polluted 
Video games. Libgdx and lwjgl are really awesome tools
Can you use UI stuff from java? Ruby seems awesome but if it only outputs text files (web) then it isn't much use to me.
You can already do that in JRuby today. You can use SWT, JavaFX, AWT, etc.
Delete this comment, and talk to a patent lawyer now! You are sitting on gold.
But you need to patch for every "break" while holding onto older versions. Very nice writeup. Still seems like a lot of moving parts. I would fear for my life every update of apps because those libraries will all change. Also do you change the Ui for different platforms to make them behave more natively?
Opening intro is attributing a lot to Gradle that was actually Maven's doing. Instructions from earlier for Maven: http://www.yegor256.com/2015/09/07/maven-repository-amazon-s3.html
I work on the on-vehicle software for autonomous marine robots at Liquid Robotics. [Regulus Operating Environment](https://www.liquid-robotics.com/platform/software/) Pretty much the best job in the world. Except for the Maven parts.
just sent you the direct link privately, thanks for your interest in the materials and looking forward to the feedback :)
And now you know why there's so many frameworks that do that exact same thing - people got bored writing the same stuff again and again...
I could see this article being decent if it were say 1997. &gt; Android drops Java in favor of Go. Google is not that dumb to completely remove support for Java. &gt; Dell stops funding Spring, but refuses to sell. This would probably be the most damaging thing for the future of the JVM world. Without Spring, JVM world is really in trouble. Spring is open source and under the Apache license, if Dell stops funding it there is no reason to stop working on it. Look how popular Linux is and most of the work was done for free. 
Because this project was done around 10 years ago.
[kilim](https://github.com/kilim/kilim) provides continuations for java, which allows a computation to be written imperatively but paused in the middle, eg because you're waiting on data from disk or the net. i joined recently, but it's been around since 2006 * small codebase * code still looks like canonical java * dramatic impact on scale gson (json support) and kryo (serialization) are 2 others i've been impressed with. they're not as revolutionary, but they both solve a solved problem in a manner that's more flexible than the solution they replace. gson is especially cool in that it encouarges a dialect of java that's reminiscent of javascript (the native language of json) 
There are some nice things you can do with extension methods like [this](https://realm.io/news/oredev-jake-wharton-kotlin-advancing-android-dev/) to neatly wrap database access too. Maybe one day...
&gt; Fed up with paying software license fees? Switch to Linux and use LibreOffice.
&gt; Java applets are no longer relevant and are very soon going to be completely deprecated from the web browsers I completely disagree. Java 9, will deprecate plugins, but they will still be there, Oracle's E Business Suite Blog clarifies this. Enterprises moving to Windows 10, need Internet Explorer and that legacy browser to be a stepping stone. Java Webstart, JNLP has long be touted at the replacement solution to embedded applets inside a web page. Doesn't mean you can't deliver a JNLP file via a web browser. 
Onto my 3rd personal IDE / code generator. Everyone needs a hobby!
No, we use the native VM's just have an abstraction. In Android we use Dalvik/ART "as is" and let you access the full power of the VM. iOS doesn't have a VM so the [VM is translated C code](https://github.com/codenameone/CodenameOne/tree/master/vm) and is very thin. In Windows UWP we use the great work from [iKVM](http://ikvm.net/) where we translate the bytecode to .net CLR so effectively it uses Microsofts native VM code and visual studio compiler chain. In the web we use the amazing work from [TeaVM](http://teavm.org/) and translate the bytecode to JavaScript almost directly so it uses the JavaScript semantics. In all platforms the added overhead is mostly our abstraction libraries which makes a lot of sense as overhead (and it isn't a big overhead). See the answer to this stack overflow question on how Codename One works under the hood: http://stackoverflow.com/questions/10639766/how-does-codename-one-work/10646336
I don't know how big this project will be, but I think multitenancy is a huge overkill for this project. This seems like a pet project. As others said, I think the best is to create a DB table Community, and put foreign keys in every table where it's needed. It will be much easier to implement this way.
Freenet. Though I only did some minimal hacking on the source code. And ignore what goes on in there sometimes. 
Yes, but ours is about 10x faster than JRuby.
Everything graal related seems to good to be true, and from the outside looks like Oracle has improved the JVM capability to host dynamic languages to the point of making them as fast as Java. It is hard for me to really understand what was changed. Was a single breakthrough? There are lots of small improvements? It is the JVM version of PyPy? Can static languages like Scala get some benefits? To summarize: Can you point me to some online resources about graal? I am not into language development, but I try to keep myself updated.
Internet Explorer and JVM.dll was the beginning, Internet Explorer and JVM.dll will be the end. And we have come full circle. 
Wouldn't that be a more natural point of comparison than the c++ implementation?
I read this post at work and couldn't figure out what the heck was so interesting about it. I got home and spent another 5 minutes trying to put 2 and 2 together. I'm an idiot.
Sure, here you go: https://www.manning.com/books/spring-boot-in-action 
Especially with the improved memory management in LWJGL 3. Direct stack and heap allocation is really handy when trying to avoid GC.
I hated Java applets in the 90s just as I hated Excel / VBA macros and never saw a future for any of them, so it's no surprise to me Java applets are considered dead now just as macros are. I think people point out to applets mostly when they want to argue against Java and denigrate the whole platform. The department of homeland security java warning is an example even though I hope in that case the denigration was not voluntary.
Interesting. A lot of this looks pretty similar to OSGi, or at least OSGi acted as the inspiration for it. Any reason they decided to go with `module-info.java` instead of the `META-INF/MANIFEST.MF` file?
Heroku is nice (pricey, but it's free if you don't need 24/7 uptime). I think AWS do a free package for a year.
AWS. Tomcat is not that hard for a basic setup. For more complex setups it's fairly easy to get help. Many providers have a free tier, so I'd definitely take advantage of that. You can use a Tomcat container and AWS Container ( Lambda ) service for instance. Or you can use Elastic Beanstalk http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Java.html
You can modify rule sets, but only when it is in connected mode to a SonarQube instance, which lets you defined and create custom rule sets, otherwise you get the default rules.
It looks like you're running into one of the very toughest problems of browser construction: rendering fonts and layout optimally. That's tough, tough work despite the libraries designed to help.
tldr: If you’re building for scale: Have all tenants share the same table(s) If you’re building for isolation: Create one database per tenant source: https://www.citusdata.com/blog/2016/10/03/designing-your-saas-database-for-high-scalability/
I love ebs for java apps. Just need a war file and your set to go for simple deployments. We have a few web services running on there.
I'm using AWS for a small JavaScript app. And it's working pretty good. And I've not payed anything. 😀
what about aws costing ?
I would say you need to revise your approach of problem solving, since it potentially introduces a lot of trouble in the future. Haven't you considered a contribution to the actual source of the library?
I've seen this quite a bit in different projects and companies that it feels like a common "feature". Will probably make these projects get stuck on earlier JDK versions for a while. Heck, there's a lot of folks still using JDK 6. 
http://www.metaforumtechnologies.com/training-courses/java-courses/java-j2ee-training-in-chennai
Thank you! Do you now if next javascript implementation in JVM will be graal based?
Openshift , simply add a credit card in countries that support it. Very few countries. Get the bronze plan, which is still free, but your app never stops running
Is it easy to configure , as I have no exp. with deployment.
Use exception mapper to exception json providing some general information about error. Only be specific where you need to be.
Why not use a Try Monad - very easy to implement in Java? Basically it's just a union between a result wrapper (representing a successful result) and an exception wrapper (representing an error result). E.g.: interface Try&lt;T&gt; { final class Success&lt;T&gt; implements Try&lt;T&gt; { public final T value; public Success(T value) { this.value = value; } @Override public T getOrThrow() { return value; } // ... } final class Failure&lt;T&gt; implements Try&lt;T&gt; { public final Exception exception; public Failure(Exception exception) { this.exception = exception; } @Override public T getOrThrow() throws Exception { throw exception; } // ... } T getOrThrow() throws Exception; // map, flatMap etc ... } Can then specialise the types to include statistics etc if desired.
By "Java config" do you mean calling methods inside your program to configure the logger? I'm pretty sure you can do that with logback.
Why do you want such feature? XML configs allow you to change the behavior of loggers via external configuration without rebuilding of entire application and a lot of other great stuff.
As well as XML.
&gt;Why do you want to configure your logger with Java code? Because of control. You can configure your logger however you wish and you are not limited by the configuration format. 
I use this feature of logback in one of the applications I look after. It's much simpler and quicker to configure the logging via the XML settings though. I find the programmatic configuration is best for turning the log level up and down from within the application rather than trying to fine tune it.
Hi I am a new java developer and I have created a couple of pet projects using Java EE (servlets and jsps) and spring mvc. (And 1 using spring boot). You said, "change the behavior of loggers via external configuration without rebuilding of entire application." I don't understand what it means? Whenever I needed to change logging level, i changed it it my xml file. And then restarted thee tomcat server. Hence restarting the whole application. Or when I used spring boot. I would edit the properties file and then again i would restart the application. What does it mean when you say that. Can you explain? Thanks
Restarting the server and rebuilding the application are two very different things. An end user with a jar file and an xml file can restart the server. An end user with a jar file and an xml file *can not* rebuild the application.
If I want to go with exceptions I will use the exception mapper - of course. However, the mind game was about if exceptions are appropriate in this case according to the best practices of Java. The easy way out - of course - is to use the fact that exception mappers are already in place and ignore stated best practices ;)
I think you've taken "ordinary control flow" and construed that to mean "any control flow". Exceptions are a form of control flow, you can't escape that fact. What you shouldn't do is rely on exceptions as a quasi "if" or "goto" statement in normally running code. When a valid exception occurs in your code and you remap it to a framework specific one, that is a perfectly valid use of exceptions. You've even quoted Joshua Bloch who says this is a valid use. If you look at your example, a user of your REST API is expected to supply valid data and supplying valid data should invoke the "ordinary control flow" of you REST API code. If they supply invalid data that is an exception to the ordinary running of your code and should invoke the "exceptional control flow".
Change values back and forth... ever want to turn logging on DEBUG for a few minutes on a production system? You're going to need Java config for that. Want to define command line arguments to determine the logging of your system service (java -jar my_service.jar)? You're going to need a Java api for that.
Most places are not going to hire you if you're going to only promise you have these skills while also being a college dropout. If you're serious make a porfolio of work you've done and apply. It's possible to get a job if you can show you know what you say you know or if you know someone with an in. I would suggest applying to white label companies that do over the phone tech support. The White label field is getting very popular now due to Indian tech support companies not doing so hot with American customers. So they hire white label companies that do tier level tech support in the states with the indian companies taking a backseat and offering help only through the white label company. So that customers only have to deal with American ITs. 
&gt; Change values back and forth... ever want to turn logging on DEBUG for a few minutes on a production system? You're going to need Java config for that. No you don't. Logback has a "scan" configuration that let's you tell it to look for config changes every X seconds.
After this, then *maybe* Java will be a stronger competitor to C# in game development area. Not that it isn't good right now, but value types can *really* make a great difference in memory usage (which is, as we all know, one of the main problems of the JVM).
how do I get experience without first getting a job?
Makes Kotlin look better every day 
I agree, but then this has always been their modus operandi. Personally, I'd like to slam it into production.
If you have all that experience then all you need to do is show that experience, and it's not just the technology used but how you worked with team members ad what processes you used etc. I never finished University, and I got a job in web development. Never done a thing in Java, managed to switch to an intermediate Java position.
Can I get a serious response please?
I'd hire you if you have the right skill set regardless of anything else. Some of our best engineers had degrees outside of computer engineering/science. Some have no 4 year degree at all. Your toughest bit is getting your foot in the door. If you have the right skill set plus job application talent, then you're golden regardless of education. 
That's a lot of encouragement. Thanks for writing this detailed response. I am definitely going to learn those technologies. Thanks once again
A looong list of technology name dropping, none of which is Java. Why post this here in the Java sub?
This is soo true!!
You're right. I could use checked exceptions as invalid user input is out of the ordinary but not a programming error. I really did kind of overlook the word 'ordinary' there. However, I still don't like checked exceptions that much for various reasons which is why I try to avoid them if I can. Additionally, existing JAX-RS exceptions (e. g. WebApplicationException) are also runtime exceptions for which the term 'any control flow' applies; but no one can hinder me to write my own checked exceptions. If no other consumer than the JAX-RS resource handler is present then using checked exceptions would be probably alright. In any other case I would think about that again as forcing checked exceptions on your consumers is something you should always carefully think over.
You can start by making sure your written communications are correctly spelled. It's "impress", not "empress".
How do you vet said developer to know whether he is capable of vetting?.....
To its credit I've used findbugs, checkstyle, pmd, and checker-framework on my code over the years with bug-free analysis, but when I enabled error-prone's experimental rules it still found a handful of actual problems. For example it spotted a case where I had "|" instead of "||", and a call to String.equals(foo) where foo was a non-string and I'd forgotten to call the getter for the string inside it. The only rule I turned off was "Var", because I'm not convinced that removing the `final` modifiers in my code is a good idea, even if the compiler is able to check @Var annotations instead. It would basically mean the code is only safe to compile with error-prone and anyone reading it would have to realize that everything is implicitly final.
omg, how old are you? I believe developers after 3-5 years of work already have the ability to control these childish desires for implementing something perfect
Same in Sweden. I think Oracle wants to show Mr President Elect that they are great at building walls and win government contracts ;) 
Sometimes I really think that the people who write articles like this have no experience inside a large enterprise environment. These types of companies have legacy code that goes back a decade, or more. I'm 33 and I work on systems in my company that have code that was written when I was in high school. These types of systems are not going anywhere for some time to come. They are the heart of our business and to suggest migrating them to a microservices architecture in Docker containers would be laughable. No sane SVP or EVP is going to take that kind of risk just so they can say we are now hip and trendy with Docker. What they care about is that we can take orders, process them, invoke our manufacturing processes, and invoice the customer. Going to Docker would make none of those things function better, so there is absolutely no business value in doing it. 
Same in Ukraine. Interesting to know about US itself
Same in Poland.
Same in Germany
Same in Spain.
&gt; I used to be a Delphi developer and its inability to handle circular unit references was aggravating How come? You could handle circular dependencies as long as you declared them in the *implementation* part of the unit. It was already possible in Turbo Pascal for MS-DOS. &gt; I don't think Delphi had a better type system necessarily. As for the type system being better, it had typesafe enumerations, type ranges, reference parameters, real value types, enumeration based indexes, freedom to specific array index ranges, free functions/procedures without forcing to use *static classes*, pointers to functions (had to wait for Java 1.8 for that), records, ... Also all the required features for doing systems programming, inherited from its Turbo Pascal heritage. &gt; It had a lot of complexity in its type system for COM interop, too. COM is complex, and Delphi COM support was a pleasure versus having to deal with it from MFC/ATL, or even C if feeling masochist. Also, it didn't seem that much different from how .NET handled it. In any case, this is all past, so I just look forward for the day I can enjoy value types and AOT compilation (for free), when I need to work in Java projects.
Currently seeing the same in Canada
Broken in Ukraine.
In US as well, broken.
Take your politics somewhere else
I am currently working for a bank as consultant to help them to transform the monolithic applications to microservices. Yes, it is very hard to rewrite all the existing JEE applications over night but new projects are not going to be deployed to any JEE containers. And old applications will be broken up gradually to convert to APIs/Services. It is the trend and I know other banks are doing the same thing. 
`Try` is effectively a success-biased specialisation of the `Either` type, so another alternative which dispenses with exceptions and control-flow concerns entirely is to use `Either` with a non-exception-based representation of an error - `Either&lt;Error, T&gt;`. One use case which exceptions can't handle is where you have a set of (logically parallel) operations each of which might fail, e.g. mapping a function over a collection. If one of the operations throws an exception then all of other successful results are lost. With `Try` or `Either` you get the successful results along with the errors. With regards to getOrThrow, I added it more for clarity. For idiomatic monadic code composing the result (using map or flatMap) would typically be preferred to directly inspecting it.
Same in Russia.
It just recalls me recent story from news: &gt;A man who worked for six years as a Chinese teacher at one of Minsk's universities has been arrested for teaching a language he made up himself instead of Chinese.
Yes, but sometimes you have types in different units that need to refer to each other. Or at least, I did. I remember it as being one of my top Delphi annoyances. Overall Delphi was great for the time, yes. Perhaps I am being too harsh on it. Nonetheless, it competed against Java and lost, so clearly it didn't do everything right.
Some export regulations changed recently, they likely accidentally just blocked the entire world.
Nice posting history. * Six months old account * Six months ago you submitted two posts (same link) "Great article on how to write content for hiring." (which somehow contradicts the question you now pose, doesn't it?) * In the last four days you've submitted the (mostly) same question as here to /r/ * iOSProgramming * ios * iosdev * appdev * simpleios * startups * webdev * java * PHP * Python (Which includes the only comment you ever posted) * and softwaredevelopment I've said it before: Don't just spam all across different programming subreddits if the topic is not related to the language, choose a more general sub.
Backwards compatibility? That's what they said about generics and look where its left us.
Same in Sudan. Actually we are officially banned. So, business as usual. 
Then what do you mean by "a great great great idea"? I would say trying to create a tool similar to the ones you know is impressive, moreover if you know why you're doing it. This will also show that you're really profficient in language.
Ok, so I guess I could see new stuff being written that way, but the old men in charge of making money pucker up really tight when you tell them you want to touch anything that could impact the money being made. In my organization you have to have a really airtight business case as to why you need to modify applications like that. They are perfectly content shelling out millions on contracts with IBM and Oracle top continue to run Websphere and Weblogic.
Create a blog or a portfolio about yourself
like Eclipse? That's a tool I use. You mean libraries? like spring or jdbc or hibernate or unirest or minimal-json? You mean those libraries? Can you be a little more specific? A-great-great-great-idea means a good enough idea to get my foot in the job. 
In the US, I'm having the same issue.
Glad to see I'm not the only one here in the US smh. I'm going to try Ninite. Edit: Ninite isn't letting me download either. What the eff word. 
[github link](https://github.com/ojdkbuild/ojdkbuild) to installers for OpenJDK since the Oracle link seems to be down right now.
Works fine in Mars.
&gt; If the MQ server runs out of memory / disk / or just hardware dies? If you want a reliable message queue, you really need to have it distributed. A single node system is almost always not reliable. Also, from their website, there are trade offs in achieving reliability. &gt;RabbitMQ offers a variety of features to let you trade off performance with reliability, including persistence, delivery acknowledgements, publisher confirms, and high availability. If you are interested specifically in Rabbit, they have a section on their site that talks about reliability and what it takes to achieve it. https://www.rabbitmq.com/ha.html
You should look into clustering Rabbit to handle hardware failure. It works the same as a database, what would you do if your MySQl (or whichever DB) ran out of space? Checkout this guide https://www.rabbitmq.com/reliability.html
Indeed , but a RDBS is used in a CA system.....where partition tolerance isn't a priority. If the database runs out of disk, time to send in the engineers to fix it and find the missing data. IF the database, was in fact based around a soft hash map, where old things that wern't often used, dissapeared when memory became low, then the disk would *never* run out...... but, it would be an unreliable database. 
My question was 'Does having a reliable message queue, mean my system looses its partition tolerance'. I think it does.....which, might actually be a bad thing. Nothing to do with Rabbit....but, anything that provides reliable messageing....even TCP/IP socket connection between all nodes. 
The queue is only one part of a system. Distributed systems are complex and ensuring partition tolerance requires all parts of the system to tolerate partitions. Basically, most pieces are the weak link. Adding a reliable queue doesn't make the system less partition tolerant. I'm not really sure I follow why you think using a reliable queue would remove partition tolerance. I think you have some misconceptions about how reliable queues work. If a partition occurs, the queue should survive and function in tact. Any messages that were "on the wire" and not ack'd wouldn't be persisted in the queue. It's the responsibility of the client to resend those messages. Also, if a message is being processed when the partition happens, and the processor doesn't let the queue know that the message was successfully processed, the queue will re-queue that message. So, the processors need to be able to handle duplicate messages, or be able to mark the message as completed later. Hope that clears it up some. 
Didn't know this existed, thanks.
I'm interested in the next post: JWT between microservices
It's working again in Germany.
&gt; **systems that promise 100% reliable messaging**, will not be partition tollerant, becase the messaging system **can always fail** screwing it all up. I think that you cannot have a system which both can and cannot fail :)
R u serious? ಠ_ಠ Technical skills most likely will be tested on the interview, but soft skills also very crucial. I don't know such a programmers that looks into some random code on github very deep. Most likely they will dig just a bit and say that this is shit. C'mon that's not even funny.
partition tolerance is the ability of a system to cope with lost messages.... those failures could be due to messaging system fails, for whatever reason. 
&gt; lost messages Can you give more specifics about what you mean by messages? Network Partition is a very specific thing, and really has more to do with the communication between various nodes in a system.
btw, you might get some more clarity over at /r/DistributedComputing
&gt; the MicroServices that are built to communicate using this reliable &gt; messaging, surely this means that this distributed system can not &gt; be actually be 'Partition Tolerant Partition tolerance just means that a distributed system can continue to operate if parts of the system are cut off from each other due to network failure. The CAP theorem says that a system can only satisfy only two of Consistency, Availability or Partition Tolerance. If you lose the network between nodes, you can time out or return an error for some requests, sacrificing availability. Or, nodes on either side of the partition can return different results for the same query, sacrificing consistency. &gt; If the MQ server runs out of memory / disk / or just hardware &gt; dies?.... this would mean that any messages that were currently &gt; being processed would be lost Reliable messaging only means that a message won't be lost on its way from the sender to the broker, and from the broker to the consumer. In the case of the broker, that just means that the messages are durable, so that if the broker crashes, the messages won't be lost. The messages can always be retrieved from the persistent store. The sender will only receive acknowledgement of receipt from the broker if the broker could successfully persist the message. The broker will not delete the message from the persistent store until it receives acknowledgement of receipt from the consumer. &gt; If a microservice node failed, it is true that the MQ server can &gt; reliably store the messages until this node returned to &gt; service...however, this restored node would have to spend a &gt; potentially long time catching up on these messages once it was &gt; back online This doesn't really have anything to do with CAP. This is a consequence of having to deal with messages that piled up while you were away. &gt; the only way to get the system back up and running would be to &gt; manually reimport the data....so, this would be classed as not &gt; partition tolerant. This has nothing to do with partition tolerance. You're talking about failure recovery. &gt; but the microservices were designed with this unreliability in &gt; mind ... then this is partition tolerant That doesn't have anything to do with partition tolerance, it is tolerance of an unreliable message delivery system, such as the Internet. It's why HTTP defines idempotent methods such as GET, PUT and DELETE, which can be retried safely in case of network failure. Yet, HTTP POST exists because not all operations can be idempotent. &gt; it seems to me that reliable messaging is an anti-pattern Reliable messaging is an anti-pattern as much as using an RDMS is an anti-pattern. Reliable messaging only means that messages sent by the sender are guaranteed to *eventually* make it to the consumer. It has nothing to do with how the system reacts to being partitioned.
Export regulations for a digital asset in a globalized world. What a sweet, innocent concept....
Well, the reason is because do you really want North Korea to have an up-to-date version of Java?
You can write shit with every framework on every app server. So if the author writes "I used to work on an application that have hundreds of EJBs and it took 45 minutes to build and deploy on WebLogic to test a single line of change." he suggests that this is somehow caused by JEE, which is why it's dead. But old monolithic JEE-Goliaths like WebLogic and WebSphere (I hate it with a passion) are not the JEE state of the art anymore. Take a look at Wildfly, for example, to see what JEE can look like. It's even the server Undertow was made for. If people suggest that Docker containers and soon nano-services are the holy grail, they give away that they probably never had the need for "2 phase commit". Good look with that in nodejs, guys! 
Yes, not easy. Most of the time the approach is "cross fingers, commit, commit" and when you have 3 microservices on different machines, each with it's own backing store, it's a time bomb with only seconds left on the clock. You'll fucking need [Hystrix](https://github.com/Netflix/Hystrix) for every "Hello World"-app. 
I'm in international waters. Works fine for me.
It works now. Was blocked in the US as well this morning. 
Use Intellij wrah wrah! /s
2PC can be done in Spring for microservices instead of building your service in JEE. I have used Wildfly on the cloud in a bank and it is too slow and used a lot of memory. I have a test between Light Java and Spring Boot with Undertow Servlet container embedded and here is the test result. https://github.com/networknt/light-java-example/tree/master/performance 
Same in Arstotzka 
Not sure why we were both downvoted. Thanks for the link!
I agree with the other poster, and think that the issue is you're diving into trying to extract to much from the wording. I think these would be better stated as: &gt; Exceptions are, as their name implies, to be used only for exceptional conditions; they should never be used for non-error control flow. &gt; "A well-designed API must not force its clients to use exceptions for non-error control flow." In my opinion, a well designed API does not replace standard java constructs with custom code unless the standard java does not do the task, or the custom code is over the top, unquestionable, easily explainable better and easier to work with. 
Yes. Also using a VPN, we can download oracle's JDK. 
http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html This page works, is this what you are trying to get to?
Clever haha
Literally what I was coming to say. A review of the past weeks top hits on r/java.....
Any of them. I would choose something like Spring-JDBC-Unirest-etc., but developing an IDE would also advance your skills greatly. Because this is what you should be looking for - something which would improve you and make you better than 90% of developers.
No fucking shit.
People are sad they sometimes have to write bar(foo) instead of foo.bar()
microprofile is promoting JAX-RS, CDI and JSON-P to do microservices and still requires JEE container. JEE containers are suitable for monolithic applications as container resource allocation and application resource allocation is balanced. It doesn't make sense that you start hundreds microservices and 99 percent cpus and memory are used by containers but only 1 percent is used by your service code. In a performance test we've done for one of my clients, a high performance service deployed on Light Java on two 4 cpu nodes in cloud has better throughput and lower latency than the production today deployed on 2 Sun T4 Servers (each with 32 cpus) running WebLogic clusters. If you look at the performance test I have done, I don't compare with JEE application servers but only some embedded servlet containers in Spring Boot. 
I didn't find that text in the link you submitted. What page are you quoting?
Sorry. I edited the post to remove the wrong format. What content are you looking for?
https://out.reddit.com/t3_5c5jbx?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D8XmYT89fBKg&amp;token=AQAAFickWCmO4Ac_EmnfH85zsgWSX0QXIgAF7dIPO5lSPOQqH9uI&amp;app_name=reddit.com His talk about modularity
No. The test I've done is for my client and the data cannot be published. Also, it is not based on microprofile but traditional JEE with EMB. In my performance test, I don't compare with JEE application servers as they can only serve hundreds requests per second and my server can serve millions requests per second on the same hardware.
You give yourself away by using "JEE" all the time. People who actually use it mostly say "Java EE". And besides that, modern servers like WildFly, Payara and Liberty are perfectly well suited for microservices. There's nothing in them at all that prevents running those. A stack consisting of Tomcat + Spring is typically quite a bit heavier (starts up slower, uses more memory, puts more strain on GC)
You submit this garbage "blog" post where you're just listing links from this very same sub. And didn't even change the title. Oh okay, there's "original content" in the blogpost: the advertisements you've put in. Title | Previous submission | votes ---|---|--- Writing testable code (2008) | Writing testable code (2008) [7 days ago](https://www.reddit.com/r/java/comments/5b2937/writing_testable_code_2008/) | +42 Oracle Presents First Proposal for Value Types Implementation | Oracle Presents First Proposal for Value Types Implementation [2 days ago](https://www.reddit.com/r/java/comments/5c2ppg/oracle_presents_first_proposal_for_value_types/) | +60 Java 9. Project Jigsaw. Modularity | Java 9. Project Jigsaw. Modularity [3 days ago](https://www.reddit.com/r/java/comments/5btgyn/java_9_project_jigsaw_modularity/) | +52 Exploring Java 9 by Venkat Subramaniam | Exploring Java 9 by Venkat Subramaniam - [02:26:05] [1 day ago](https://www.reddit.com/r/java/comments/5c5jbx/exploring_java_9_by_venkat_subramaniam/) | +54 Heap automates away the annoying parts of user analytics. No manual event tracking. | n/a: it's an advertisement | [FD] Sparkjava Framework - Arbitrary File Read Vulnerability | [FD] Sparkjava Framework - Arbitrary File Read Vulnerability [7 days ago](https://www.reddit.com/r/java/comments/5azhzp/fd_sparkjava_framework_arbitrary_file_read/) | +32 Faster, Lazy, extended (and powerful) JDK Collections | Faster, Lazy, extended (and powerful) JDK Collections [4 days ago](https://www.reddit.com/r/java/comments/5blkwz/faster_lazy_extended_and_powerful_jdk_collections/) | +28 To use or not use exceptions | To use or not use exceptions [2 days ago](https://www.reddit.com/r/java/comments/5bx31u/to_use_or_not_use_exceptions/) | +28 Introduction to Java NIO2 File API | Introduction to Java NIO2 File API [5 days ago](https://www.reddit.com/r/java/comments/5bg7j1/introduction_to_java_nio2_file_api/) | +17 Hosting a Private Maven Repo on Amazon S3 | Hosting a Private Maven Repo on Amazon S3 [4 days ago](https://www.reddit.com/r/java/comments/5bmx92/hosting_a_private_maven_repo_on_amazon_s3/) | +9 Collection Factory Methods in Java 9 | Collection Factory Methods in Java 9 [1 day ago](https://www.reddit.com/r/java/comments/5c3yk3/collection_factory_methods_in_java_9/) | +7 Looking for a job? Join Honeypot and let companies apply to you... | n/a: it's an advertisement | And you're doing the same thing across different programming subs. * [In /r/elixir](https://www.reddit.com/r/elixir/comments/5cdlvf/awesome_elixir_newsletter_week_25/) * [In /r/python](https://www.reddit.com/r/Python/comments/5cdl5b/awesome_python_weekly_issue_26/) * [In /r/node](https://www.reddit.com/r/node/comments/5cdln8/awesome_nodejs_weekly_issue_26/) * Here in /r/java
I would say, if you are able to create new, better Eclipse or Spring (because what is the point to create something worse) **on your own**, then you already shouldn't have a problem to find any job. I would add to the list new operating system. Why not to create new to "get foot in the job". Now seriously. Each from the projects you listed above is result of colaboration of many contributors. For example Spring (blog.thetaphi.de/2011/07/real-story-behind-java-7-ga-bugs.html), has almost 200 contributors and company (Pivotal) behind it. But good luck, maybe you are next Linus Torvalds?
A lot of this article sounds like echo-chamber BS. Example: &gt;Java is the performant incumbent everybody wants to replace I mean, that's never been the case outside of Java conferences. Is Java an effective language? Yes. Is it more performant than other languages? Sometimes. Java is great for a lot of things, but it's far from "the best, hard stop" in any given situation.
I have zero plans to do/create any of them. In fact, I have no idea why would someone give such a poor suggestion in the first place when I clearly mentioned that I am just trying to "get my foot inside". However, what I understood (or took) from him is that I should contribute to some opensource project or library. I believe I am capable of that. But I have a different plan at this moment. Now why did I thank him others and upvoted every suggestion? That's because they put time and mind in trying to help out someone, even if his/her suggestions were poor (if he literally meant to create those tools and not make contribution to those librarie(s)). Thanks
C++ was the language I enjoyed using after Turbo Pascal, but nowadays I only use it as infrastructure language between JVM, .NET and the underlying infrastructure, which I seldom do. However I do believe if Java and .NET had followed other memory safe languages from the 90's and offered AOT compilers from the early days in their toolchains (NGEN just helps with application startup), C++ use in the industry would have decreased much more. 
If you are using Java and C++ both in the space *20 million line enterprise application* Java will be just as fast, or even faster sometimes. The problem is that speed is usually measured in some kind of abstract, never actually seen way like printing hello world on a web server or calculating a fibonacci number, or some other not ever actually used thing.
Not working in Austria. &amp;nbsp; Thank you Trump for building that digital wall.
is it 1 verticle per container? like do you have 1 microservice be encapsulated in 1 verticle or do you break components of the microservice up into verticles and deploy them into different containers ? 
On the whole it's one Verticle per Container. But that's not a set rule. It's just with Kubernetes you can combine multiple containers within a single Pod, so that approach makes sense for us. That said, I can think of a few apps that have multiple verticles in a container. Say one for dealing with HTTP requests, while another handles messages from Kafka. Stuff like that. 
Please, it was two decades. I wrote applets for a while, back then... they worked fine.
Absolutely. People don't realize there are shit ton of PhDs awarded on the topics of computer systems performance measurement. Measuring application performance in a modern environment is very much a non-trivial problem. And yet I still see programmers argue how one "pattern" is better than the other because it saves you a few cache access with absolutely no measurement whatsoever. NUMA is another popular topic. I can't imagine the amount of wasted engineering effort in making anything "NUMA-aware"
 &gt;A-great-great-great-idea means a good enough idea to get my foot in the job. If you show them a project and they use that project to evaluate you, then they will do it based on the execution, not based on the idea. If they had two candidates and one has a lame idea that is brilliantly implemented, and the other has a great-great-great-idea that's implemented sloppily, they are going to go with the first guy. 
Thank you kind Sir. I will keep those in mind. 
Agreed. In fact, giving your application control over logging (instead of a config file stashed away somewhere) is often a good idea. Don't let these nay-sayers bother you, they're just jacking in imagination. 
I was looking for an easy way to mock some HTTP requests for a library I'm building, but was having a hard time trying to implement this cleanly. This library saved my sanity and I highly recommend it. In my case I'm building a HTML scraping tool, so instead of making requests to Amazon and other websites in my unit tests, I am saving copies of pages to test, and returning them in mock HTTP responses. This set ups the mock server: import static net.jadler.Jadler.*; ... @BeforeTest public void setUp() { initJadlerListeningOn(8080); Reader resultPage = new FileReader(new File ("/path/to/result.html")); onRequest() .havingMethodEqualTo("GET") .respond() .withBody(resultPage) .withStatus(200); } @AfterTest public void tearDown() { closeJadler(); } On my test case I can just connect to`http://localhost:8080/s/field-keywords=mouse` to receive a HTTP response with the expected content body. I hope this helps someone.