&gt;“We have to fix Java, and we have been doing that.” The *fuck* they have. Deferring 0-day fixes to a "critical patch update" several months later is not fixing Java. It's them not giving a flying fuck. &gt;A “communication plan” is currently being put together, he said, in order to increase their own transparency and ensure incorrect information isn’t spread. [Relevant Dilbert strip](http://dilbert.com/strips/comic/1996-07-05/) &gt;“We’re a very small group and it’s oftentimes frustrating to get a message out. So even when we get all the approvals we need, sometimes understanding how to get a message out is challenging.” Typical megacorporate bureaucracy. When you have a large community watching your every move, getting a message out is dog-simple: you post it on your blog. But no, that's much too simple and direct for a big company like Oracle. Have to appease the useless middle-management suits, so as not to disrupt their illusion of relevance&amp;hellip; &gt;The JUG leaders present in the conference call raised several concerns particularly relating to Java’s desktop installer, which has also received criticism after a ZDNet article highlighted Java’s bundling with third-party software. &gt;Donald Smith said it was “not a new business [..] this is something that Sun initiated a long time ago.” However, he said he was bound by commercial agreements and couldn’t discuss the issue further. Translation from bureaucratese: "It's there and it's not going away, because money. Fuck you, community." &gt;He ended the phone call by asserting how much the Java development team appreciate feedback from the community, assuring that “every message that comes through [on the mailing list] is read and passed along and considered carefully”. And then blatantly ignored, because Larry said so. &gt;Oracle’s pledging of transparency and responding to feedback can only be a good thing. Hogwash. Talk is cheap. Action ain't there, and it ain't coming, *because money.* Don't kid yourselves: everything that is wrong with the Java platform is a carefully considered business decision. It is meant to be that way, because that is what makes Oracle the most money. Ask.com is there because they get paid to put it there. The vulnerabilities go unfixed because making applets secure isn't profitable enough to warrant fixing them. Money, money, money.
Right on! Good Sir. 
I thought I was in /r/nottheonion for a second. 
Why bother starting at y=0 and then not doing anything if y&lt;(height/2)? Just start at y=(height/2). Also, when selecting the color, mid-over works out as height-y, but I think it should actually be height-y-1, because y will never be equal to height, but you still want to retrieve the first row of pixels on the final loop.
First of all: classes start with an uppercase letter according to conventions, stick with it. Could you elaborate on your problem? At first glance your program should work perfectly fine. &gt; it doesn't use the method I called in inside the apple.java class Why do you think it doesn't? As far as I can see it does just that.
Yeah... I suppose that it *would* take a monumental change in thinking in Redmond. Granted, the preinstalled crapware is installed by the hardware manufactuers, not Microsoft. But for Microsoft to make it easy to rid a system of crapware -- and harder for crapware to accumulate -- could create friction between Microsoft and the manufacturers. Still, I don't understand why Microsoft (and Lenovo, Dell, HP....) haven't realized yet that the benefit to them (negligible income?) from putting on the crapware is outweighed by the negative PR of pissing off the customers.
No, it should not. `apple` is the class, not an object. Also: formatting.
I tried your code and it works just fine.
I've been thinking this myself, I can code pretty good but it's trying to keep the knowledge there. I think my approach will be to write almost everything down, that way I have a hard copy for my memory. But if I lose something like that, that I may have been working on for a long time, I would be annoyed.
How close is OpenJDK to being a fully viable replacement. I am not sure how many chunks are still not complete but it should be getting close.
have a look at http://www.reddit.com/r/javahelp/comments/17ed0w/offer_online_introductory_java_course/
In other news, their new spyware toolbar will finally monetize java by intercepting your banking details and charging you $4 a month to use it. Java EE will cost $7/month.
Does the appleObject.simpleMessage(name); work though? Because I'm using netbeans and it only prompts to enter a name then ignores the rest of the code written below that.
Crawling through my post history like a stalker, and then publicly admitting to it. Classy.
&gt; it only prompts to enter a name then ignores the rest of the code written below that. Even after you've entered the name it's asking you for?
Thank you very much!
Any good book recommendations to learn Groovy 2.x?
Questions like this should probably go in /r/javahelp 
Supernoob questions are probably more appropriate for /r/javahelp 
A downvote to you sir!
I just didn't want to change too much of his code. I wanted the guy to understand what was going on.
Good point. That's something I'm pretty bad at, I tend to look at code and go 'Here's how I'd do it..' rather than 'I see how you're trying to do it, and this is the mistake you're making'.
Yeah. I realized that almost right after posting. Ill go there next time :)
Uhmm... As someone who is beginning to learn Java, am I wasting my time? Is this thing going to be dead in a couple of years as a result of this?
Are you going to school in the land that time forgot? cat file | sed 's/\t/ /g' &gt; geezerFormat.txt It's easy to go from tabs to spaces, not so much the other way. Tabs are better.
I just clicked on your username and it shows your recent comments. No stalking or crawling, 30 seconds of looking at it said enough. You're a very negative person. What's not classy is your FUD and belief that corporate greed is the motivation behind this. I called you out because you need to change your tone and think about being a responsible person because there are a lot of impressionable java learners here. I feel sorry for anyone who is learning java and has to listen to bullshit like this, it just makes it harder for them to get on with what's really important and that is Java is safe to use except for the browser plugins. It's not a java thing, it's a 'running code via a plugin in the browser' thing, which encompasses ActiveX, Flash, RealPlayer, Silverlight, Adobe Air, Java Applets and any other plugin that does similar actions. There is absolutely no way to secure this scenario completely and never will be. It's like lending your car to someone you trust and then hoping his kids don't take it for a joy ride. There is no way to be sure. The dearth of content in a 24/7 news cycle only means that technews and blogspam will hump this story for a few more months until it is played out and more advertising dollars can't be made. That is the only money angle in this story and it's probably not a lot of money. For everyone else that has been around for years, the java browser plugin has been broken for the last 15 years, it's just that there isn't enough public java applets in the wild because java on the desktop never caught on to make it newsworthy. Even now I'm not sure why this is more newsworthy than the last umpteenth times the java plugin has broken. In contrast the flash plugin was constantly being broken more than the java browser plugin ever has and so there is a much more dedicated effort to keeping it secure. If you haven't been infected via a java applet because of your normal browsing habits up till now then it is HIGHLY UNLIKELY you ever will. The nature of your browsing has a lot to do with it. Lesser known warez, porn and file sharing sites is where you'll find them but even that is dubious now because 1) all this errant media attention actually causes people to uninstall java completely and so this vector of attack has less yield, and 2) there is an easier method of getting people to download viruses and that is to just package them as their own plugin, usually as video players. ("You don't have the plugin required to play this video, please install.") The only good comment in this thread so far is by gunch, who accurately portrays JavaFX as a loser. JavaFX competes with Flex/Air and Silverlight. But even MS has scrapped Silverlight now and that was before Java One conference hype of it. Competing corporations do this sometimes not because there is money to be made but because the space needs to be filled in order to look competitive or to force their competitor to spend extra resources. The perfect example of this is what MS did to Sun in order to get rid of Java on the desktop because it directly competed with their ActiveX technology. MS went to the lengths of creating a whole language called J++ and then a borked jvm just to confuse the whole java space. Everyone that lived through that nightmare would know that the buzz around this latest java scare is just that, a bunch of hype inaccurately portrayed so that newsmedia and blogspam can get advertising eyeballs. That's just their business model. Oracle is a bigger target than Sun ever was but the Ask toolbar was in the jdk when Sun ran things. Maybe it was Oracle overcharging school districts millions of dollars that gives Oracle the real black eye. I can maybe envision a time when Ask.com offering Sun money to package their toolbar in the download might have been a worthwhile revenue stream for Sun but now, for Oracle, you've got to be kidding. If Ask.com really has a solid contract then their only real play is to hope Oracle removes their install link and is able to sue for some ridiculous amount because what else have they got going on except for probably a fraction of a percent of the search market. [Apparently it is 0.6%](http://www.karmasnack.com/about/search-engine-market-share/)
&gt; Hello guys. I was watching this video at thenewboston.com Well there's your main problem right there...
No. The issue at hand here are Java applets - a very small subset of where Java is used. Java's main implementation is on the server-side, running mainline business applications and is not going away any time soon. There will still be a large demand for Java 20 years from now.
Are you using an IDE? Because auto-complete is definitely your friend.
Yes, it doesn't return the appleObject.sayName();
Data mining or more machine learning? For really big data sets, you need a cluster of computers (do you have access to one at school?). If so, [Mahot](http://mahout.apache.org/ ) is one of the only options. If you are working on one machine, Weka has a lot of trouble with bigger data sets - and cant use multiple cores. I'm actually the author of [JSAT](https://code.google.com/p/java-statistical-analysis-tool/) which I made out of frustration with weka to be faster, simpler, and parallel. Its far from perfect, but it may suit your needs. /shameless plug If you are really on the Data Mining side, there is the [LingPipe](http://alias-i.com/lingpipe/), which has a decent sized community - but I've never found it particularly easy to use - and its not very programming friendly (much more console / command line based). 
You instantiated the Turtle giving you an instance of Turtle, named spencer. Spencer will have a member variable, myX, that can be used from the method turnRight(). Looks like you're missing some code from the Turtle class though.
ya i didn't link all of the code, and how can i call that member variable in spencer? I can link all of the code if it helps. would using something like public Turtle(float anX, float aY) { this(anX, aY, true); //to call an object use 'this' } allow me to call anX and aY using 'this'.
link all the code, it will help. To access member variables, use spencer.myX. 
 import java.util.Scanner; public class Turtle{ private float myX; private float myY; private float myLastX; private float myLastY; private char myDirection; private boolean myPen; public Turtle( float anX, float aY){ myX = anX; myY = aY; myDirection = 'N'; myPen = true; } public void forward(){ myLastX = myX; myLastY = myY; switch (myDirection){ case 'N':myY = myY + 1; break; case 'S':myY = myY - 1; break; case 'E':myX = myX + 1; break; case 'W':myX = myX - 1; break; } if(myPen){ StdDraw.line(myLastX, myLastY, myX, myY); } } public void backward(){ myLastX = myX; myLastY = myY; switch (myDirection){ case 'N':myY = myY - 1; break; case 'S':myY = myY + 1; break; case 'E':myX = myX - 1; break; case 'W':myX = myX + 1; break; } if( myPen){ StdDraw.line(myLastX, myLastY, myX, myY); } turnRight(); turnRight(); forward(); turnRight(); turnRight(); } public void turnLeft(){ switch (myDirection){ case 'N': myDirection = 'W'; break; case 'S': myDirection = 'E'; break; case 'E': myDirection = 'N'; break; case 'W': myDirection = 'S'; break; } turnRight(); turnRight(); turnRight(); turnRight(); } public void turnRight(){ switch (myDirection){ case 'N': myDirection = 'E'; break; case 'S': myDirection = 'W'; break; case 'E': myDirection = 'S'; break; case 'W': myDirection = 'N'; break; } } public static void main(String[] args){ StdDraw.setCanvasSize(500,500); StdDraw.setXscale(0.0, 50.0); StdDraw.setYscale(0.0, 50.0); Turtle spencer = new Turtle( 25, 25 ); while(spencer.myX &lt; 500 || spencer.myY &lt; 500){ double random = Math.random(); if(random &lt;= .33){ spencer.turnRight(); spencer.forward(); } else if(random &gt;=.66){ spencer.turnLeft(); spencer.forward(); } else{ spencer.forward(); } } } }
This compiles and runs but doesn't stop running when i hit the border of the StdDraw frame
The fact that it compiles is enough to tell you that you're not having trouble accessing your instance variables (spencer.myX and spencer.myY). The problem lies with your program logic. One major problem that I see is that your program only checks to see if myX and myY are less than 500... but it doesn't make sure they're greater than zero.
It will take a while and you probably want the while loop to use the AND operator instead, also checking for negative values.
well...either way...that guy is a tool.
Your code's fine, your comprehension of it's not. Figure out how to use an IDE's debugger and step through your code so that you can figure out why it's not doing what you want it to.
Do some reading on a java-like language called 'Processing'.
... Said nobody ever.
I think the try...catch in the main() routine is redundant here, since it won't actually catch anything that would be thrown by run(), and you cannot add a throws clause because that doesn't fit Runnable interface definition for run(). So you have to handle errors from within the Runnable. It does however make sense to factor out the anonymous implementation to a separate method to cleanup the other routine. Usually if you have an anonymous implementation of more than a few lines, you may as well factor it out to another method, or even another class, just for maintainability's sake. 
the JVM is aggressive at inlining *simple cases*. but as you add complexity, eg a subclass that overrides one of the methods, the inlining breaks down and performance drops significantly the worst thing is the unpredictability - you think you have a solution that is performant. but then some seemingly totally unrelated change "breaks" things. so not only are micro-benchmarks worthless, *real world* use cases are almost worthless - to get a meaningful idea of the performance of an algorithm, you need to build a use-case that's the worst case scenario [cliff click has a discussion](http://www.azulsystems.com/blog/cliff/2011-04-04-fixing-the-inlining-problem) of the problem - he's specifically interested in the dynamic languages, but the same applies to pure java
Yes yes, I use netbeans too. But it's weird how it just doesn't call the appleObject.sayName(); because I've tested it multiple times and it just prompts me to enter and a name and that's it. :\
What happens if write this first in your main method? Do you get any output? new apple().simpleMessage("test");
Uhmm, I don't I will get any input because that object calls in a constructor and I didn't make any constructor in the Apple.java
It uses the default constructor. It's just a shorter way of writing apple appleObject = new apple(); appleObject.simpleMessage("test"); 
This: ^[\S]{4,}$ works.
Well, at a glance I would suggest that line 79 has a problem. 20/7 will always evaluate to 2 and 3/7 will always evaluate to 0. This is because division of integers will always result in an integer. An easy way to fix this is to change (20/7) to (20.0/7.0) and similarly for the other division. Unless, of course, you intended to do integer division.
Glad to help! I know that I've had an error like that evade me for hours on end only to have a colleague of mine walk up and spot it in thirty seconds. Fresh eyes can always help when an error is not apparent.
Weka was great for what I used it for (a smallish data set), but the API definitely feels like it could use some feedback from a larger audience. The internals are also a little scary - I did a bit of poking around to see if I could render decision trees in a different way and .. gah!
is that \^[\S\]{4,}$ ?
An 'I don't give a shit' to you Sir! But I do appreciate your enthusiasm.
Just a point, if you turn right 4 times in the turnLeft() method, you will end up facing the way you were originally facing? Also, by calling the turnLeft() method, you are overwriting anything you change in the switch statement. In fact, you are changing the direction once, then changing it 4 more times, ending up facing the way you want, but via an unnecessarily long route if I've interpreted your code right.
A lot of software comes bundled with 'crapware.' I don't see why Oracle is being flamed to hell and back for this practice.
Because I need Java to run other shit. If Java was an end application, like a music player, I don't think it would be so problematic... 
Windows Tax: there's no such crap on Linux.
So Oracle is a sleezy jackass for offering something that people *need* for *free*?
&gt; "With Java, it's true our installer waits 10 minutes before running the install process, but this to ensure the JRE [Java Runtime Environment] updates properly without additional strain on a user's computer," an Ask.com spokeswoman said in an email reply to questions Monday. "This is not intended to trick users." And BS. I want to honestly know who the hell would actually fall for that lie.
No, they're a sleezy jackass for the fact that the process isn't as simple as a checkbox that installs something. There's a chain of skeevy events surrounding it. And yes, it is a bit sleezy trying to force itemB on people when they *need* itemA. If I demanded to be able to scrawl on your face with sharpie every time you got a glass of water, you'd think that was fairly shitty, too.
Because 1) They can afford not to bundle it 2) People who make Java software rely on the end users wanting to install and run Java and this is a barrier to doing so 3) The other software with crapware is just as guilty and flame worthy (look at some Android apps and the one star reviews this behavior gets them) 4) As a software developer I expect my tools not to subvert me 
Well, you'd have to give me the option to opt out of the face scrawling. Dyseca - "I'm going to to get a glass of water." Chunkyks - "CAN I DRAW ON YOUR FACE?" Dyseca - "No, not this time Chunky." Chunkyks - ":("
If it wasn't for the fact that certain games can't run on Linux well (even with WINE), I'd use it for everything.
RES's "source" option says that's right.
No they are sleezy jackasses because they bundle crapware with the JRE even though they are a multi-billion dollar corporation that doesn't need the revenue from said crapware to turn a profit.
The other insidious part is also that if you use the auto updater wizard, even if you opted out before, it gets installed. So in addition to the face scrawling always being delayed ten minutes, it's as if you said "no thanks" the first time [and I was, indeed, sad-face], and then the second time I wasn't even standing by the faucet when you got your water, but ten minutes later you end up with sharpie all over your face anyway.
Steam &amp; CS 1.6 are now on Linux with better FPS than Windows... Soon.
Adobe does the exact same thing with flash and McAfee, and they don't get flamed to hell and back for doing it.
**Protip:** You don't have to install the bundled crapware! Nothing to see here folks, uncheck the box and move along.
Very soon, hopefully! A lot of indie companies already have their games supported on Linux, but if more companies are pushing for Linux support, the larger companies will (hopefully) follow.
There's no reason anymore to run Java on desktops. Just uninstall it. 99% of anything interesting with Java is on the server anyway, and the rest of the desktop applications that use Java should just come precompiled/with a bundled JRE. Obviously, I'm not talking about us developers here. The real problems are coming about from users who don't even need Java on their machines and they're being continually harassed to update it and having their machines subjected to the crapplications that come bundled with it. Frankly, it just gives everything associated with Java a bad name so I feel it behooves us to mitigate the damage.
Damn right I do *Fetches sharpie*
Guys, java is free. We can let them make *a little* bit of money off of it. Just uncheck the box. It's not that hard.
Probably because most people who *would* bitch about it use google chrome which has a flash player built-in. I haven't actually downloaded flash player in quite a long time. EDIT: I just installed flash and it wasn't bundled with anything. I am on a mac though...
Yes, they do get flamed. Their updater blows ass.
thanks for the help!
thanks for taking the time anyway
i appreciate the input. thanks Nebu
thanks
This is spot on
Awesome, problem solved. Now explain that to my mother please
Minecraft is the largest reason for desktop users (at home) that I know to have java installed.
Said no BF3 or Firefall player, ever.
The problem would be solved reasonably well, simply by making that checkbox unchecked by default. I sometimes miss it and end up having to uninstall the ask toolbar (again!). 
I tried installing something called CoreTemp, it installed coretemp, and this bullshit PC Cleaner, which I know not to run because they will wipe a lot of my precious files, and it also made Yahoo my default search engine(which took a while to fix) and it didn't even give me a option to say no.
This is why I use [Ninite](http://ninite.com/) for installing updates.
I had heard about the crapware, and was looking out for the checkbox.. Didn't see one. When I got though the install and hadn't seen the option I thought Oracle have really gone too far with this, but it didn't install any bullshit toolbars or change my homepage. Maybe they're detecting my UK IP and not bundling it? Some onerous EU regulation maybe? 
well said
Other than the fact that class names should start with an uppercase letter your code is perfectly fine. The issue seems to be somewhere else. I'd recommend to do a Clean &amp; Build. Ant (NetBeans' compiler tool) does incremental builds. Maybe you still have some old non-working code compiled. If that doesn't work use the command line tool (javac &amp; java) to compile and run your code and see if it works. As a side note: It doesn't really make sense to use packages with tiny command line apps like this one. It's overused in beginner tutorials IMHO.
Thank you very much :)
Some websites might host JRE install packages that don't have Ask.com's toolbar or what have you.
Bundling the JRE with your application also has the benefit that: - It has nothing to do with the browser plugin, meaning that the recent security issues are gone. - You can put it in app stores. - Your users can't tell that it's a Java application and can't go on a Java hate rant about it.
I've noticed that news outlets monitor sites like Reddit for stories of interest. The up-side of this is that it gets more coverage.
&gt;Though the database index is configurable, the JedisConnectionFactory only supports connecting to one Redis database at a time. Because Redis is single threaded, you are encouraged to set up multiple instances of Redis instead of using multiple databases within a single process. This allows you to get better CPU/resource utilization. If you plan to use redis-cluster, only a single database is supported. Thats why they have a ShardedJedisConnection class.
If we're not careful, the blobs will take over our countryland, too. Imagine if Linux was like Windows. Android is a step towards it. You download blobs from the Play store all the time! I don't see anybody giving up their Eclipse projects so I can build the .APK's myself..wouldn't it be nice if Android had an on-device way to build apps (it does), etc., etc.
Reddit gold?! Wow, I wasn't expecting that...where do I start? I mean there's so many people to thank... Seriously, tho, thanks! I never had reddit gold before. Now I can find out about that forum that may or may not exist. As a bonus, check out these papers by RCM if you haven't already read them...they changed the way I think about coding - http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod
Well, if our computer hardware is our car engine, and our operating system is our transmission, we all know that UNIX in general is a manual transmission while Windows became the automatic transmission. By Apple, Windows, Ubuntu, and the automatic transmission, a demand by the lazy consumer was supplied by hardware and software that just "did everything for you." No regard to it's true state need be given by the user. 
Doubling and taking the fractional part? Not random at all. The sampling of data you are looking at might appear random at a glance, but only because you're not analyzing the output in the right way. Multiplying by 2 means all you're doing is a bit shift to the left. Display the output of your algorithm in binary and you'll almost certainly see a pattern.
Why did you get downvoted? I think Ninite makes sense for an operating system, or PC, like Windows. On Linux though, it doesn't make any sense that you download a .deb package. It should install it to a place like ~/.ninite
&gt;Currently on Debian I was using Debian for a few months, but I got tired of everything telling me to update, so I switched to Mint. 
There are a couple drawbacks of my idea though, now that I've thought about it a bit more. 1. There can be many JREs on the machine that should be updated with security updates anyway. Granted, they might not be accessible through the plugin anymore, but if they access the web in any way, then they will still need updates. 2. The additional overhead of installing a JRE with each application takes more drive space. Yeah, I don't care either, but some will even though it's not a huge amount of space. In the final analysis, I think my suggestion stands. It's far more safe than simply allowing access to the JRE through browser plugins. Oracle/Sun has proved they aren't capable of producing a tight enough sandbox to continue to allow that.
I'm just glad it got some press and Oracle was made aware people hate it.
Eclipse
It's not that the there would be no idea as to how the puzzle works but that you have an algorithm that can take any set of constraints you give it and tell you if a solution exists or not... but as to whether I could help or not. Not a clue
&gt;There's no reason anymore to run Java on desktops. Software my company uses internally depends upon it. Applets, actually.
Hey thanks for the reply! I'm actually not in school I'm an ETL developer looking to toy around with some of the tools people mentioned here utilizing our huge amount of client data to perform some correlation analysis, forecasting, etc. We have a partnership with IBM and HP so we have all the necessary hardware and then some. This is more of just a fun R and D side project for me right now but if I can extrapolate some useful information from our client data then this might be something more useful. 
Well, then there's **almost** no reason anymore to run Java on desktops. Seriously though, I feel for ya. I hope to hell it's not old-school AWT applets? JavaFX maybe? That looked to be a bright spot for Java in the browser, but I've heard little about actual success stories using it.
I am old enough to remember a time when all systems were proprietary, so I personally don't have an issue with it. But you're right that would be a nice thing.
I'm no sure, I avoid using it whenever possible. Its (sort of) replacement? Done in Flash. Yep, it's going places. 
Well, an app called AIDE lets you do that. I just wish Google could at least partially motivate open source by hosting app source code. But they don't seem i care. What if the whole world understood that installing a program meant getting the source code, not just some blob installer? Ahhhh....
http://static.fjcdn.com/gifs/ohh+no+you+didn+t_11b7a6_3268036.gif
Sounds like logic programming. I don't know of any libraries for use directly in java. Clojure's core.logic library has a sudoku solver as an example at https://gist.github.com/3217582. "The Art of Prolog" describes the algorithm for unification that solves these kinds of things, and I'm told "the Reasoned Schemer" has an entire implementation in something like 200 lines of scheme.
p.s. JCache in better times: [JSR-107, JCache: Alive and Going to be Part of Java EE 7](http://infoq.com/news/2011/08/jcache-jsr-lives)
God damn Cameron Purdy.
&gt;You're a very negative person. Of course I am. Real life is very negative. How have you lived this long without realizing it? &gt;What's not classy is your FUD and belief that corporate greed is the motivation behind this. Corporate greed is the motivation behind *everything* a corporation does, because its executives are *legally obligated* to do so. &gt;I called you out because you need to change your tone and think about being a responsible person because there are a lot of impressionable java learners here. I do not hold back the truth just because some clown on the Internet thinks I should dress it up. This is not a corporate middle manager's office and you are not my boss. On Reddit, I tell it like it is. Deal with it. &gt;It's not a java thing, it's a 'running code via a plugin in the browser' thing, which encompasses ActiveX, Flash, RealPlayer, Silverlight, Adobe Air, Java Applets and any other plugin that does similar actions. I can't comment on those other things because I don't follow them closely. I do follow Java closely, and I can tell you that if Oracle did give the first flying fuck about the security of their platform, they'd be releasing their security fixes *right fucking now,* not several months after the botnet herders have already had their way with their users. There was a time when browser-based Java was considered a very tough nut to crack. There was a reason for this: Sun was focused on making browser-based Java kick ass, be awesome, and get accepted. Their efforts were focused on making sure there were as few PR disasters as possible, and in regards to security, they succeeded. However, Sun/Oracle's focus for Java has since shifted away from applets, and as a result, applet security has become far weaker. Who cares about applet security if applets are only ever used in secure intranet environments, after all? But what they don't seem to care about is that millions of ordinary people have JREs installed and applet support turned on, making them easy pickings for the aforementioned botnet herders even though the applet support doesn't actually get used. And I am right to call Oracle out on that. I want them to stop putting people at unnecessary risk. They must either fix their shit or not enable applet support by default. &gt;There is absolutely no way to secure this scenario completely and never will be. There is a way to come really damn close, though, and Oracle ain't doing it. &gt;The dearth of content in a 24/7 news cycle blah blah bullshit bullshit blah blah blah I don't give two fucks about the media. I give two fucks about reality. Stick to the facts. &gt;If you haven't been infected via a java applet because of your normal browsing habits up till now then it is HIGHLY UNLIKELY you ever will. That's because I run NoScript. Most people don't, and wouldn't know how to use it even if they wanted to. Not an excuse. &gt;The nature of your browsing has a lot to do with it. Hogwash. The web is full of holes. Sites get compromised and stuffed full of malware all the time. Big sites with proper security teams on them aren't usually pwned, but how many people confine their browsing strictly to those sites, or even know how to tell the difference? Remember, one visit to a compromised site is all it takes to get the malware deployed on your box if it's vulnerable. &gt;all this errant media attention actually causes people to uninstall java completely and so this vector of attack has less yield Most people don't even know *how* to uninstall Java. For all they know, it's built into Windows and there's not shit they can do about it. &gt;there is an easier method of getting people to download viruses and that is to just package them as their own plugin Nonsense. That's not easier than exploiting an existing vulnerability and getting your malware deployed silently. &gt;Oracle is a bigger target than Sun ever was but the Ask toolbar was in the jdk when Sun ran things. Maybe it was Oracle overcharging school districts millions of dollars that gives Oracle the real black eye. I can maybe envision a time when Ask.com offering Sun money to package their toolbar in the download might have been a worthwhile revenue stream for Sun but now, for Oracle, you've got to be kidding. If Ask.com really has a solid contract then their only real play is to hope Oracle removes their install link and is able to sue for some ridiculous amount because what else have they got going on except for probably a fraction of a percent of the search market. Apparently it is 0.6% I don't give a shit. Oracle is still bundling adware with the JRE. The business mumbo-jumbo behind it doesn't make the adware any less annoying or humiliating.
That's a name I haven't heard in a while, what's the scoop?
And people think I'm just spreading FUD when I say Oracle doesn't give a shit about Java security. Fools.
Well that sucks, but I'm guessing this doesn't impact all that many people because, uh, applets. 
&gt; javac -classpath \`pwd\`/JNativeHook.jar GlobalKeyListenerExample.java is the correct way to compile this, and you were *almost* correct when running it. Try this: &gt; java -classpath \`pwd\`/JNativeHook.jar:\`pwd\` GlobalKeyListenerExample That will get both the JNativeHook jar file and the current directory into the classpath so that the VM knows where to find your compiled class. This, of course, assumes that you r don't have a package statement in your GlobalKeyListenerExample class.
How long until Google puts the nail in the Applet coffin by following Mozilla's lead?
&gt; That looked to be a bright spot for Java in the browser, but I've heard little about actual success stories using it. Probably because the project vision has completely changed as of JavaFX 2. They've dropped the browser stuff entirely and refocused the project on becoming a replacement for Swing – which, I might add, it looks like it's going to do admirably.
We might be able to, but I can't see any code actually committed.
Or just use `.` in place of \``pwd`\` to mean the current directory: javac -classpath ./JNativeHook.jar GlobalKeyListenerExample.java java -classpath ./JNativeHook.jar:. GlobalKeyListenerExample And `-classpath ./JNativeHook.jar` is equivalent to `-classpath JNativeHook.jar`
Reduce your code to a small self contained example that showcases the problem you're having. Also, describe the problem you're having with as many technical details and error messages as possible. "having problems rendering tiles" is not nearly specific enough. It will be hard to help you otherwise, and in doing so you'll probably find the problem yourself.
Sorry, its an array index out of bounds exception. Here is my code, because i dont think the github worked. Game class: http://pastebin.com/5EzRfKaA Screen class: http://pastebin.com/n4CfNzQP Level class: http://pastebin.com/qxmSYBEK Tile class: http://pastebin.com/4n3aHuAh Random level: http://pastebin.com/1aWiYhkQ Grass tile: http://pastebin.com/xicAJG3s Void tile: http://pastebin.com/xy2rCF2w This is the line debug is bringing up: if (tiles [x + y * width] == 0) return Tile.grass; This is what the console is saying: Exception in thread "Display" java.lang.ArrayIndexOutOfBoundsException: -1 at com.thecherno.thegame.level.Level.getTile(Level.java:54) at com.thecherno.thegame.level.Level.render(Level.java:48) at com.thecherno.thegame.Game.render(Game.java:116) at com.thecherno.thegame.Game.run(Game.java:84) at java.lang.Thread.run(Unknown Source) I'm guessing the large numbers are where the problems are, but that's just a guess.
Thanks, do you know what i can change to fix that?
I am watching a video series, so its not my code. i haven't looked at it for a while though so i forgot some of the stuff that i have written. I can probably look through the code when i get back on my computer and find the problem now. Thanks for the help! 
Both of the things its saying are wrong. The method its trying to reach isn't static, and I've made the other one static. It still has the wrong readout.
The error is legit. You are calling an instance method in a static context. Either `addMessage` in TextBasedUI must have has `static` in the method signature: public static void addMessage(String msg, boolean newLn) { // .... } or, you need to call it on an instance of TextBasedUI, something like this: TextBasedUI ui = new TextBasedUI(); ui.addMessage("Welcome Adventurers...", true); If `jTextArea1` is not static, you can't put static on the method signature.
Awesome! Thanks dude. My apologies . 
For future reference http://rogerdudler.github.com/git-guide/files/git_cheat_sheet.pdf Command line is pretty straightforward for most common operations, or grab one of the many gui clients.
Next up, "Don't use Strings for Lock Objects" and "Autoboxing, How Does it Work ?"
you know there's subreddits doing this already right? 
http://www.reddit.com/r/dailyprogrammer This is what you're doing basically.
Oh, don't worry, Microsoft will keep the Applet alive. They're loving all this bad Java publicity that Oracle is handing them.
This is not directly related to Java, and shouldn't be submitted here. Also there's already /r/javahelp and /r/learnprogramming. Maybe try advertising there. 
I'm definitely going to check out Mallet and your other link, thank you!
I've downloaded WEKA and am still doing some reading/learning about it. Some more concise walkthroughs would be nice, but I'll just do my due diligence by reading up on it as much as I can.
Which lead? If you mean "click to run", Chrome has had that functionality for ages. They also disable "dangerously out of date" plugins, just like Firefox. However, Firefox (which is my daily driver) includes mozilla.org/plugin-check, which is all sorts of goodness. Frankly, both browsers do a pretty decent job these days of giving a user the tools to minimize plugins as a threat vector. Of course *most* users either don't understand, or don't care.
yea, look in the subreddit's description. /r/dailyprogrammer is too hard for beginners. 
Wictionary and dictionary.com both have apps in iOS and android stores. Why not use those instead? 
First thing off the bat, don't use '&amp;' in your if statements. To check that two conditions are true use '&amp;&amp;'. '&amp;' is a bitwise AND.
- Dependency injection (CDI) - ORM persistence - Spring framework - REST and SOA - JEE 5 or 6 - Scala!!
I claim the days of Java programming outside app frameworks are over. So, I think you should move into an app framework ASAP. I prefer [Spring](http://www.springsource.org/spring-framework).
Learn how to search google. It is amazing how many redditors don't know how to use it and ask questions that could be answered in a minute with a simple google search if they had just put words from their question into the search field. 
1. Learn the basics. Know JavaBean conventions and how to create POJOS. 2. Learn how to learn. Be inquisitive, don't be timid intellectually and fall back on what you already know. Read up on frameworks and try your hands at them. 3. Separation of concerns. Don't build super-do-everything classes. Divide and conquer. 4. Readable code. Your code should be self explanatory. No super-do-everything methods. Methods should clearly indicate what they do by name. 5. Learn about Spring and or EJBs. 6. Learn about persistence. JDBC programming and or Hibernate / JPA. 8. Learn about web frameworks (JSF, JSP, Spring MVC...) 7. Use version control. Commit early and often. Don't be afraid to commit. You can always revert. However, don't commit compilation errors. Verify that your program builds and compiles before committing (maven). Bonus: - Learn TDD and unit testing. - Learn about REST (jax-rs) - Learn about SOAP (jax-ws) - Learn client side coding: JavaScript, HTML, CSS. - Learn JavaScript frameworks such as jQuery.
Great list, I would add XML and XML processing/configuration as another bullet. 
I just started programming so its all new to me.
As that looks like netbeans, please press Alt+Shift+F
[The basics and beyond](http://docs.oracle.com/javase/tutorial/) followed by [patterns](http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124). Especially the patterns.
Laughed so hard. Also 1. Consider storing the bottles left in your asshole to a database for future use 2. As it stands, nothing stops the user from removing more bottles from your ass than you currently have. Probably should check / warn the user before you end up with negative bottles in your ass 3. The first user prompt is after a "?" and the second one is after a ":" which is inconsistent. 4. Looks like you have some additional functionality to write at the end, given the comments 5. In one prompt you use bottle(s) and in the other you use bottles
If you read one Java book in your life, make it [Effective Java](http://www.amazon.com/Effective-Java-2nd-Joshua-Bloch/dp/0321356683). It's a great book, and I reread it every year.
1. How to program in any language 2. Google that's all you need, but I am assuming you already know how to program something
Maven is a build tool. In a nutshell: It compiles and gathers your code together with third party code (libraries) into deployable* packages (war, ear or even just jar files). It also usually runs unit and integration tests. There is more to it, but that is the gist of it. *Deployable means server software can "run" them. As for directory structure, maven follows "convention over configuration" and has a distinct structure: - http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html Read more about maven here: - http://maven.apache.org/what-is-maven - http://en.wikipedia.org/wiki/Apache_Maven
I've already downloaded one of them (the one for java developers I think) and was just curious. Thanks for clearing that up though!
I found it a little too much to start with, went for head first first
This is a great answer. I use/do almost all of the above on a daily basis developing large business apps. I personally use a mostly spring with a few useful java ee libraries. I would say in addition to above pick a stack and focus on it, either spring or java ee and then learn to setup and configure one of the main java ee servers (jboss, glassfish, websphere, etc). I honestly like spring, great documentation, easy integration with java ee libraries and there are tons spring java developer jobs. And just to reiterate above learn to use version control, subversion and/or git, and learn to manage your builds using maven. If you can competently do everything above and are a decent problem solver you'll be looking at 70-100k and up jobs depending on location. Edit: almost forgot, but you should probably learn some sort of database. Oracle is used a lot in govt and large corps but I like postgresql myself for non work projects. 
Am I the only one that prefers ant to maven? 
yeah definitely not. "What do I need to learn to be good at Java?" "Ruby"
Get a computer science degree (BS). Your opportunities will be much more limited without it. Do you need that to actually program in Java? Of course not. But you asked about employment programming Java, and while you can probably find something without a degree, your opportunities will be that much greater if you have one. 
Hi, Linked lists are hard but totally worth knowing. At least you get to use Java. In my day we did something just like this in C. The trick is to just change the links to point at different nodes. Lets say you have 2 linked lists: A -&gt; B -&gt; C -&gt; D W -&gt; X -&gt; Y -&gt; Z And you want to kill C. In your code it looks like current would be pointing to B and temp to C so you've already done the hard part. Also, we have graveyard which is pointing to W and temp.next is pointing to D. current.next = temp.next; temp.next = graveyard; graveyard = temp; A -&gt; B -&gt; D C -&gt; W -&gt; X -&gt; Y -&gt; Z QED. (edit formatting) 
Check your conditions too. You will encounter a null pointer exception if temp == null. You will encounter this easiest on a killRing list of size 1. Also, the if statement within your while loop isn't doing anything as it's being overwritten by the next two lines no matter what the state of temp.next is.
Technically, for boolean types, bitwise operators are treated like logical operators. However, yeah, use the logical operator instead of the bitwise.
Hi, There's plenty of websites and books on declaring arrays and for loops so I wont go into that but an easy way to "mix up" a list is to get 2 random indexes and swap those 2 elements. Doing this 2 * length times should mix it up enough. 
From a pure readability perspective, I'm having trouble following this. The variable names are not descriptive and there a lots of magic numbers in the code. Also, you don't need to say "if (FoundY==false)", you can just say "if (!FoundY)" since it is a boolean type.
Is there any way you could explain like the code words I should use for this? Sorry but this isn't very clear to me but I really appreciate the help :)
RattusNorvegicus' answer is great, so I'll just add on to it: 9. Learn how to [program concurrently](http://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601). 10. Don't reinvent the wheel. Learn how to effectively use the [apache-commons frameworks](http://commons.apache.org/). 11. A good framework to use or at least become familiar with as a reference guide is [guava](http://code.google.com/p/guava-libraries/). This is a Java framework used by Google and it's rock solid. To provide some contrast from RattusNorvegicus' answer: * EJBs and JavaBeans really aren't necessary to use when you work in Spring-based projects. I'm a seasoned/successful Java professional and I haven't run across a requirement for either of these. Not saying they're worthless, just that I haven't seen a need to learn them yet. * Learning. If you want to be a successful programmer in general, then you MUST always learn. Too many programmers get pushed out of the market because they get lazy and fall back on what they're comfortable doing and suddenly find themselves with out of date skills and soon out of work. It can be hard to get back into the market after this, so keep sharp.
On 5-7 I assume you really meant learn about those things, and not learn those things. Most of that could be a 100% waste of time depending on what job you're actually doing. On 8, if you're using git then you don't need to worry whether or not your code compiles before committing. I commit every time I move from one file to another, then rebase my changes together as I complete one block of work.
Yep!
Sounds like you skipped too many classes and now you cant do your homework.
yeah I need to check maven out and get an IDE. I just started comp sci 2 and it was strongly recommended that we avoided using any sort of IDE in comp sci 1 so I have no experience with one. Guess I'll try eclipse:).
Seems fun but just want to ask, why the hell do they let you implement linked lists in java. That's just applying a technique without understanding it, linked lists in c or c++ are a joy to use and way more rewarding and understandable.
Ill see If I can fix some of this and resubmit it...
Buzzwords. Besides, I could argue that "ORM persistence" is covered by "JEE 5 or 6". Scala is not relevant to OP's question.
Nice read, thank you for it :)
I would imagine its a TA or Prof that took the C / C++ assignment and labeled Java onto it.. However, implementing it in java can be transferred to C / C++ if you're willing to understand how pointers work
I don't think it matters too much which db you learn, so long as you learn the principals. If you're not after DBA work, I think that once you've got a solid understanding in one you can apply that (plus some google-fu) to any of the major systems.
This article didn't seem all that good to me, especially if the goal was to demonstrate what goes where in Java. The usage of the stack and heap are implementation details for the JVM, unlike C, C++ or even C# where the programmer has direct control over what goes where. Method activation records do definitely go on the stack (if the method has not been inlined). Local variables of the primitive type can go on the stack or be loaded directly into registers. Local object memory can be allocated to the heap, the stack, or registers if the object is small enough. What actually happens is up to the JVM. Threads also can have their own private heap. It's called [Thread Local Storage](http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/ThreadLocal.html).
The fact is, knowing some sort of Dependency Injection framework is key for future employment. I'd add [Guice](http://code.google.com/p/google-guice/) and [EE6](http://docs.oracle.com/javaee/6/tutorial/doc/giwhb.html) to the list even though I'm a [Spring](http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/) fan.
Pointers are really useful and way more efficiënt than importing different libraries and objects in java
&gt; I let Client A connect to the Server (S), because there is no one to connect to yet, the Client A just sits in wait for a connection. This makes no sense. If client A connects to server S, then there is a connection. Typically it's not the client that sits and waits to make a connection, it's the server. Here's how it usually works. Server S sits there on a port, let's say 8080. A client comes along and says, hey I want to connect to this IP on port 8080. So the server gets it and handles it. If the server wants to, it can spin up a new thread on a different port and offload the conversation there, or it can just hand back the response and treat each new request like a different connection. (Or the client can hand in a token as part of its subsequent requests that identify the conversation as part of the same session.) All of these variations are determined by the protocol for that particular connection. I'm not quite sure exactly what you're attempting to do, but does this help clarify anything?
The joys of online classes...
I have to use a P2P connection in this case rather than routing all the traffic though the server because for the amount of traffic we're expecting, there's no way we'd be able to handle it. 
I've just started programming also and also chose Java as my first language and I went with A Beginner's Guide to java : 5th Edition. It has been an overall fantastic book! I've gone through about 300 pages of it so far and the amount I've learned is phenomenal! I would recommend this to anyone trying to learn programming or anyone just trying there hand at java from another language.
More information on the [Oracle Security Blog](https://blogs.oracle.com/security/entry/february_2013_critical_patch_update)
Chairmain of the People's Democratic Revolutionary Commitee for Great Freedom of Code? Or the CPDRCGFC for a snazzy and easy to pronounce acronym.
Or to reflect the security job: Chief officer of the Code Handling Emergency Keeping Agency. I tried to think of a something spelling out [OKHRANA](http://en.wikipedia.org/wiki/Okhrana) to stick with the czarist theme, but that was a little too much work. Finding something that spells KGB, GRU, CIA or FBI shouldn't be too hard. Calling yourself head of the Code Gestapo probably isn't a good idea :p
http://www.reddit.com/r/java/comments/17pse3/oracle_java_se_critical_patch_update_advisory/
[Here](http://freetexthost.com/uz1gxbqvxw) is a template I made for any java application using graphics. The comments explain what everything is.
Interestingly, apart from the usual many flaws fixed on the client side, there are also a few flaws fixed on the server side. For those who are a bit lost in the version numbers, and why it suddenly jumped to 7u13, have a look at this article: http://www.oracle.com/technetwork/java/java-update-release-numbers-change-1836624.html
It is significant to note that they've taken the unprecedented action: moving ahead the timeline of an update that wasn't scheduled until later this month.
Assistant to the Code Czar.
Dear Google, Please save Java from the imbecilic morons that are Oracle management. I'll even give Dart a try, really. Sincerely, Depressed Java developer
Gave up on Suns ages ago, use Apache's.
Probably because of Apple's pressure of blacklisting Java. Unless they want a lot of people complaining and generally being angry, they either needed a hotfix or convince Apple it's all OK
Well, you're someone that zooms around in the cloud taking care of problems. How about **Red Baron**?
Skylander
Huh? What color is the sky in your world?
I always liked "defender of all things digital"
You can directly access those variable if you are in the same package and the variables are protected, public or default. BUT, the way people edit local variables on another class is with getters and setters. For example: protected int status; public int getStatus() { return status; }; public void setStatus(int status) { this.status = status; } And.. finally, you should do something like this: from C.. public void changeBValue(B b) { b.setValue(5); } I mean, in C you should have a reference to the object B, so you can call its setter. 
Cloud Condom Developer or CCD
 &gt;You can directly access those variable if you are in the same package and the variables are protected, public or default. So, if I had a variable in class A like: public int carSpeed; I could modify it in class B by doing carSpeed = 20 Or do I have this all wrong?
more like this public class A { public B myB = new B(); public void changeMyBSpeed(double newSpeed) { myB.setSpeed(newSpeed); } } public class B { private double speed; public void setSpeed(double speed) { this.speed = speed; } } that will change the speed value of myB (which is an instance of B)
When you have public int carSpeed; on class A, the variable "carSpeed" doesn't exist anywhere, you have to have an INSTANCE of class A, i.e: an object of class A. public A a; In Java, a class is something that you can't use by itself (unless it's static), you have to have an instance of that class. So.. if your instance of class B has a reference to an instance of class A, then, you can do something like instanceOfClassA.carSpeed = 20; I strongly recommend you to read the basics of the Oracle's Java Tutorial.. 
&gt;Role based restriction is sometimes too rough, requiring you to create ridiculous meta-roles like "SUPER_ADMIN", "ALMOST_ADMIN", "GOD" and so on. That's why you should have a scheme that allows you to assign multiple roles to a user, instead of having to continually escalate the amount of privileges contained in a single role.
That's my experience with pom.xml files, everyone at my work uses their own obscure repo that doesn't even have the dependencies anymore. 
At least they must be specified in the pom in case you need to hunt them down manually, instead of just referenced as **/lib/** 
Haha you're probably right, I still couldn't resist. 
The day Oracle takes some action primarily because of Apple.... In the real world, I think this has a lot more to do with Oracle trying to deflect criticism they've faced about Java security recently, by moving faster than they have in the past to push out security updates. Apple may be one downstream consumer but this is only one in a bigger picture.
&gt; changeMyBSpeed Avoid naming methods like this. For getters/setters it should be. getMyB setMyB If it is boolean you use this instead of getMyB isMyB 
=&gt; /r/learnjava 
Have a look at "Apache standard directory layout" for how sources are arranged inside of a project. Look at "multi-module Maven projects" if you feel like branching out. There's also OSGi, which Eclipse builds upon, among others. Gives me the shivers, but still. A local Maven repo is just a dir in your home dir (~/.m2/repository on Unix) where Maven stores libraries it downloads for you.
I started freelancing in Java right out of uni, after a good deal of experience with everything from assembly to Haskell and VBA to PHP. I assumed Java and its ecosystem were the bees knees because that's what 'enterprises' use. I learned the (very) hard way that it was not. I went through all sorts of ridiculous 'best of breed' products (JEE, Visual JSF, JSF, JPA + TopLink, JPA + Hibernate, Spring, Swing with NetBeans' GUI builder, Swing by hand, Swing with Application Framework, etc.) before I realised what utter shit a lot of them were and how much time I'd spent jumping though all sorts of ridiculous enterprisey hoops. Then I looked at Ruby (on Rails) and I even considered .NET for a while out of complete desperation. I suppose it could have been a lot better if I hadn't fallen for some of the marketing BS of the products I mentioned. Fortunately, I found Scala and never looked back. I could have saved a LOT of time and money if I'd known about this earlier. If you *have* to use Java, at least do yourself a favour and use Java 8, which has a dash of FP sprinkled on top. It's something. Oh, and do learn some JavaScript and web technologies!
+1 for Git and JavaScript/jQuery, because one might be tempted to overlook them as part of 'beginning Java' advice (thus shooting oneself in the proverbial foot).
&gt; Lambdas, also known as closures, are simply anonymous functions False. Three words, only 2 mean the same thing. Lambdas = anonymous functions Closures = a function that makes use of free variables in its definition, so a function along with a referencing environment 
How about http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/io/BaseEncoding.html#base64() Are you sure that you are warming up the JVM and verifying the compiles?
[Here](http://triton.towson.edu/~mzimand/os/Lect2-java-tutorial.html) is a site that describes Java for C++ programmers. So you can take a look at that and see for yourself. Depending on the rest of your course load, you might find just doing the data structures in C++ time consuming enough. While there might not be a lot of code, the code you write will likely focus on efficiency of applying the data structures.
Unless Java is "special" in this, the computer science degree is less and less important. Most places I've worked, I was one of very few developers who actually had a CS degree. In general, it didn't seem to have an effect on my salary compared to theirs, either. My languages have been VB (sadly), C#, and Perl...we're moving into java, and the people being interviewed ALSO don't have CS degrees.
I agree completely with them. Until Oracle can be bothered to take Java security seriously and release fixes in a timely manner, nobody should have it enabled in their browsers.
By the way, you shouldn't directly change variables in other classes, it's bad practice
How far have you gotten?
Not very far, just a lot of failed attempts. Any ideas?
Mixed news on that front: I did not warm up the VM(though several tests took quite a long time to complete). On the upside, I have tested the results in production as well, and those all held steady with my results here.
I can't tell you exactly how to do it, since I haven't seen your existing code, but I can give you some advice on how I'd perform this task. I'd set the position of one image *relative* to another. What do I mean by this? Let's take a look... We have 2 image objects, one named *img1*, and the second named *img2*. Each of the image objects contain both an integer for the X and Y position of their image. We will modify the value of *img1* directly, meaning that, say, when the user moves the mouse, we will change the X and Y position for that object according to the movement of the mouse. Our second object, *img2*, however, will have its X and Y positions changed relative to *img1*'s. For example, if we always want to have the two images rendered 50 pixels away from each other on the X axis, we'd do something like this: // in the img2 class this.x = img1.x + 50; Since we modify *img1*'s X position using the mouse, this will in turn cause *img2*'s x position to change. Here's a quick overview of what'd happen: img1's x position is 93. img2's x position is therefore 93 + 50 -- 143. img1's x position is now 134. img2's x position is therefore 134 + 50 -- 184. If we render the images to the screen using these positions, they will always stay 50 pixels away from eachother.
The code is wrong anyways - `offset`is never incremented in `attempt1()` and `attempt2()`, so each threads will process the same few elements - the first partition of the array.
I can think of a few arguments, whether or not they're a reason you'd see is up to you or your project. Tooling: Scala (and other Java languages) don't have as much direct tooling support. Refactoring large projects is easier using tools. People: So much easier to find competent Java developers over competent Scala developers. Moving target. May be slightly different now but Scala's feature set was a moving target when I first looked into it. Even with all this new sugar Java is for the most part 100% backwards compatible. More clear code: This one is controversial, but I have to say I personally stay away from Scala because I found it too complex and powerful. When I looked at 3rd party tools built in Scala it seemed that everybody did things quite different. When you looked at the source code it was much harder to follow than your typical Java project even with its fewer lines of code and boiler plate. Performance. Scala performance is good, but not as good as pure Java. If you're doing a lot of numerical processing, you'll probably be wrapping at least some of your Scala code to use some pure Java classes. 3rd party participation: If your project is going to be open source, you'll reach a wider audience with Java than you would with Scala.
I would set a Point with the mouse position 1 second ago and display the second image at that point. 
That's what I thought! I mean, it's essentially the same result if you didn't use the class function as if you did.
If you're creating a singleton class, the instance and getInstance() method are static.
I'll keep that in mind.
It's nothing special about Java, but it is true of medium to large employers specifically. I don't know about small companies because I haven't worked with them very much, but all the other organizations I've worked with are requiring programming position candidates to have bachelor degrees, or better in some cases. It doesn't actually matter that it's a CS degree, but they are requiring that degree; and experience actually. Very few seem to be hiring without BOTH of those. Are you working in a small company? 
It's hard to give advice without knowing anything about the architecture of your game (e.g. is your draw model retained or immediate? etc.) Are you able to draw images on the screen?
There is a book called "programming interviews explained" that is a great pre-interview read. Refreshes all the cs basics and deals with common interview tactics. Has a section on brain teasers if you are interviewing with a company that uses them in an interview. This book was recommended to me when I interviewed at google. 
I'm not sure about sites for a job interview but *Cracking the Code Interview* is an excellent book not only for preparing for a job interview but also for better understanding basic algorithms and problem solving strategies.
Yeah SelectionFrame. And yeah, that's what I thought. getSelectionFrame() just returns this.
Yes we could do your homework for you. Or you can try to do it yourself: - Open your java textbook to find a "hello world" main function to start WordTester.java - Make a class w/ 2 string member variables for Word.java. Proper form dictates that you make them private and use getters/setters to access them, or you can just be lazy and mark them public. You can override toString() make your class easily printable (google how to do this) - In your main function, create an instance of Word and set some text, then print out your word object.
I'll give you the code in another language so that hopefully you can grasp the concept without you being able to copy-paste my code as your own for your homework. (The following is written in C#) //Word.cs public class Word { public string word; public string definition; } //WordTester.cs public class WordTester { public static void main() { Word myWord = new Word(); myWord.word = "Cake"; myWord.definition = "A delicious treat that everyone loves, especially fat kids."; PrintWord(myWord); } public static void PrintWord(Word w) { Debug.WriteLn("Word: " + w.word + ", Definition: " + w.definition); } }
What I have so far at least what I've been working on, hopefully its going somewhere public class word private String word; //Word to define private String definition; //Definition of the word public Word(String w, String d) { word = w; definition = d; } public String getWord() { return word; } public String getDefinition() { return definition; } public String toString() { return "Word: " + word + " Definition: " + definition; }
It looks like you're on the right track. Do you have anything for WordTester.java?
I have not started the wordtester.java, but I will be heading there soon, update you soon, hopefully
At this point Java 8 isn't even feature complete and large amounts of integration work are happening that leave the compiler very much in flux. The compiler is still undergoing heavy amounts of work with major features still to be enabled. The new type inference system is, for example, only enabled in the lambda preview builds. The compiler is getting better and very quickly. I have very high confidence that it will be as stable or more stable than the Java 7 compiler by the time Java 8 is released. That you are seeing assertion errors rather than bad code being generated is a very good sign. Java 8 is almost at the point where new features are all integrated and the focus will shift to stabilization and bug fixing. You should find that the quality will improve once the rate of integration churn diminishes.
I saw on the openjdk page that the 31st Jan was the milestone for the feature complete, is there any way to find out if they have reached this goal? 
Also, read this article: https://en.wikipedia.org/wiki/Singleton_pattern There are a number of ways that the initialization can go haywire and a very simple solution is provided for Java.
I used to work at a medium company (100m/yr ..I know, they call that medium) and most of my coworkers didn't have a degree, with none having one in CS. I work at a growing (20m, looking to double in 5 years with new investors, just crossed 150 employees) company now, and they also don't care. And we hire without experience all the time, to save money... and idea we stole from our GIANT next-door neighbor (that's still a billion dollar perl shop and recently bought the entire complex we were renting).
What kind of changes are you having to make to get the ambiguous method references to compile? Get used to the _ warning. It's not going away. ;-)
um. What are you talking about? Those are two unrelated clauses. What do libraries and objects have to do with pointers?
This almost works. If it's a single threaded application this would work fine, in an application that has multiple threads you will find that this code works indeterminately, you can see more information about this, called double-checked locking, here: http://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java The solution is that you MUST mark the instance variable as volatile so all of the threads get notified, otherwise your singleton might actually contain different state in different threads. It should be noted that even volatile will not work prior to Java SE 5.0 due to a corner case of the specification of the Java Memory Model which was fixed in 5.0. Don't feel bad, I see this in textbooks all the time, and it's always wrong.
Here is the sample code: http://pastebin.com/n66eW8Pk I hope it will be fixed in next builds ;)
My work uses this test: http://www.betterprogrammer.com/ Could be good practice for those programming questions
http://txt2re.com/
Huh... well, cool. It's good to know the entire industry hasn't drank the degree mill kool aid. 
Looks like javascript to me...
Ah correct! I jumped right in there with a link I used the other month for one of my web pages. Sorry. You are quite correct. I've never used them in any other language I thought they were generally considered universal. If not, perhaps someone could elaborate on the differences?
Instead of checking if the servers are running I made a menu to re-enable each button individually. http://imgur.com/a/eSrVt
Is the problem that you don't know the equation to calculate an insurance premium, or is it that you don't know how to do math in Java? The former isn't a Java question, and the latter isn't an /r/java question, try /r/javahelp.
Thank you for your reply! I understand that bit, but I can't seem to wrap my head around how to link all of it together.
YES I IMMEDIATELY RECOGNIZED IT!! Do you know if it's active? Or anything about it at all? Anyway, thank you. I just want to see if I'm ready for this kind of thing. When I read about it I had no knowledge at all on how to develop.
I know about it because a local JUG has an ongoing contest. Never tried to make one myself.
if you are just looking for something to make sure your regular expressions are working or for a quick reference I often use http://gskinner.com/RegExr/ I've used it for Java and Python. 
If they must be non-repeating, they are not really random (read about the Enigma). You should reuse the Random() object, and probably use: import java.security.SecureRandom; SecureRandom r = new SecureRandom(); int number = r.nextInt(100); int number2; do { number2 = r.nextInt(100); } while (number2 == number); int number3; do { number3 = r.nextInt(100); } while (number3 == number || number3 == number2); int number4; do { number4 = r.nextInt(100); } while (number4 == number || number4 == number2 || number4 == number3); 
Non-repeating means it has the properties of a Set, so the easiest way to do this is loop on the Set size less than four and then try to add a random to it.
Thanks, for my purposes, an appearance of randomness is enough, but I will reuse the random object. I assume SecureRandom is more resource intensive than Random from java.util.Random? Why do-while instead of just while?
I'm not sure, but didn't this project originate from Google? I remember Google having competitions.. It definitely still works. I don't know how active the development is, though.
[Karel the Robot](http://www.stanford.edu/class/cs106a/handouts/karel-the-robot-learns-java.pdf), perhaps.
Robocode is a lot if fun, it's quite active though not in development so much as competition, they have constant running leader boards, great project to compete against with your mates
I guess that's what you get when a Database programming book tries to teach fundamentals in GUI programming. I don't see why this is necessary at all. Just to make it look shiny?! ಠ_ಠ
For just 4 numbers SecureRandom is fast enough. If you needed 4 billion it might not be. do-while avoids testing before 1st assignment so the condition is simpler. The new code code can return 0 too, if you don't want that, use x = r.nextInt(99) + 1; 
You might be able to use [Process.waitfor()](http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Process.html#waitFor%28%29) from a separate thread. void startProcess(ProcessBuilder pb, ActionListener onExit) { Process p = pb.start(); class ProcessMonitor extends SwingWorker&lt;Object&gt; { Process process; ActionListener onProcessExit; ProcessMonitor(Process p, ActionListener onExit) { process = p; onProcessExit = onExit; } public Object doInBackground() { // new thread waits for process to terminate boolean terminated = false; while(!terminated) { try { process.waitFor(); terminated = true; } catch (InterruptedException) { Thread.currentThread().interrupt(); } } return null; } public void done() { // called from EDT so can do Swing stuff here onProcessExit.actionPerformed(null); } } new ProcessMonitor(p, onExit).execute(); } 
Hmm.. I think I just mixed Robocode and Google Code Jam in my head.
The newest version is from Jan 30th, 2013.
 Random random = new Random(); Set&lt;Integer&gt; set = new HashSet&lt;&gt;(); while (set.size() &lt; 4) set.add(random.nextInt(100)); Object.hashCode+equals magic will do all compares for you ;)
Do yourself a favor and avoid floating point numbers. Instead calculate everything to the thousandth of a penny, and store all values as integer amounts of that unit. This way, integer math will be exact for each calculation to 1/1000 of a cent. So one penny would be 1000 penny-thousandths, and 1 dollar would be 100,000 penny-thousandths. Use a class to represent money. public class UsMoney implements Comparable&lt;UsMoney&gt; { private static final int UNITS_PER_CENT = 1000; private static final int CENTS_PER_DOLLAR = 100; private final int units; private UsMoney(int dollars, int cents, int units) { validate(dollars, cents, units); this.units = toUnits(dollars, cents, units); } public int getValueAs(Denomination denomination) { return units / denomination.getMultiplier(); } public int getBreakageIn(Denomination denomination) { if (isLargest(denomination)) { return getValueAs(denomination); } return getValueAs(denomination) % Denomination.values()[denomination.ordinal() + 1].getMultiplier(); } @Override public int compareTo(UsMoney money) { return units - money.units; } @Override public String toString() { int unitBreakage = getBreakageIn(UNIT); return "$" + getBreakageIn(DOLLAR) + "." + getBreakageIn(CENT) + (unitBreakage &gt; 0 ? " and " + unitBreakage + "/" + CENT.getMultiplier() : ""); } public static UsMoney for(int dollars) { return for(dollars, 0); } public static UsMoney for(int dollars, int cents) { return for(dollars, cents, 0); } public static UsMoney for(int dollars, int cents, int units) { return new UsMoney(dollars, cents, units); } public static UsMoney for(int amount, Denomination denomination) { return for(0, 0, toUnits(amount, denomination)); } public static UsMoney none() { return for(0); } public static UsMoney sum(UsMoney... monies) { int units = 0; for (UsMoney money : monies) { units += money.units; } return for(0, 0, units); } public static UsMoney difference(UsMoney money1, UsMoney money2) { return for(0, 0, money1.units - money2.units); } private static boolean isValid(int amount) { return amount &gt;= 0; } private static void validate(int dollars, int cents, int units) { if (!isValid(dollars) || !isValid(cents) || !isValid(units)) { throw new IllegalArgumentException(); } } private static boolean isSmallest(Denomination denomination) { return denomination.getMultiplier() == 1; } private static boolean isLargest(Denomination denomination) { return denomination.ordinal() + 1 == Denomination.values().length; } private static int toUnits(int dollars, int cents, int units) { return toUnits(dollars, DOLLAR) + toUnits(cents, CENT) + toUnits(units, UNIT); } private static int toUnits(int amount, Denomination denomination) { return amount * denomination.getMultiplier(); } public enum Denomination { UNIT(1), CENT(UNITS_PER_CENT), DOLLAR(UNITS_PER_CENT * CENTS_PER_DOLLAR); private int final multiplier; private Denomination(int multiplier) { this.multiplier = multiplier; } public int getMultiplier() { return multiplier; } } } That was fun.
In my experience, "best practices" is a way of writing "common sense" such that you can publish a book about it. Examples of best practices from the Oracle website include using synchronisation only when actually necessary (rather than blanketing an entire method with it) and reusing objects where possible rather than creating new ones. To my mind, both of these are the default, sensible ways to write code. Then again, I originally come from C where you have to do this stuff yourself, so perhaps my perspective is not the same. I feel that a lot of the best practices you see written down are trying to help people avoid the pitfalls of various Java constructs. For example, several on the Oracle website concern threading and the problems of out-of-order reads/writes. If you've studied Java threading in enough detail, you'll understand the possible pitfalls and will already be inclined to write safe threaded code from the start, without having to retroactively apply a best practice on the matter. I write a considerable amount of Java as part of my job and the way it works here is that so long as the code performs the task within the defined parameters and is readable by a future maintainer, it's good code. Sometimes I end up with, say, a god class that should really be broken up. However, it works, has good documentation and would take me a long time to split, so I don't bother and instead move on to solving a new problem.
We still have production apps running 1.2 fml
You know, I always see people say stuff like this and it makes me wonder...what is wrong with your codebase that it won't work on newer JVMs? Java is ludicrously backwards compatible. That's why Java's generics are the flustercluck that they are. I've seen code that needed slight modifications to *compile* on newer JDKs, but it's rare that I've seen code that won't *run* on anything newer than what it was originally written for.
&gt;what is wrong with your codebase that it won't work on newer JVMs? Soooo many things. But off the top of my head it comes down to third party libraries and bug compatibility.. Usually with drivers, in this case JDBC and a weird pdf jreport bridge. Also, time and money. We're hosting it on an weblogic container that has been out of support for nearly a decade. Public facing? You betcha. Not my problem though. Thank pasta.
Now, if only Android would update accordingly...
I came here to complain that so many of my customers still have 1.4 - but seeing your comment... I better shut my mouth..
^"[two ^syllable ^name ^removed] ^| ^Master ^Admin ^Extraordinaire ^| ^Ruler ^of ^the ^42 ^that ^reside ^in ^my ^domain ^| ^Peacekeeper ^among ^all ^PC, ^Mac, ^and ^Linux ^systems ^| ^Live, ^login, ^and ^prosper" This is my email signature. You might be able to get some ideas from it, or you can just use direct quotes from it. It's not like I own it or anything.
In all honesty, I have no experience with multi-threaded applications, but thanks for the help.
Delete the import statements you have and try: import java.util.*; import java.util.logging.*; import java.io.*; import java.text.*; Also, read about packages in Java and start with something simpler.
You may also want to look at the new Base64 implementation which is part of Java 8. You should strongly consider the Guava implementation in the meantime.
Why the downvotes? Of course, Android uses the Dalvik VM and not Oracle's JVM. However, I think it is a legitimate question as to when and how Google intends to update the syntax of its version of Java. If I remember correctly, the lawsuit between those to companies has shown that an API or definition of programming language cannot be copyrighted. That would mean Google could potentially support Java 7 syntax and functionality as long as they do their own clean-room implementation (again).
I'm not really sure it's worth the effort. They'll probably care when lambda expressions are available in Java 8 and the rest of project Coin.
&gt; Anyway, I'm out If you're going to take your ball and leave then just go. Don't be such a drama queen and rattle off a bunch of weak insults. You aren't my girlfriend, just some goofball on the interent. I'm surprised you didn't say you faked your orgasms and steal my best t-shirt before you slammed the door. &gt; no clue what I'm talking about. When someone doesn't understand your point, often the problem is with your communication skills and the limitation of text vs face-to-face conversation. You're so over-defensive of your religion (sorry language of choice) that you turn into a plugged-ear prick when somebody even lightly suggests that Scala has flaws or possible downsides. &gt; considering that you couldn't manage to write an answer without trying to insult the messenger. You see yourself as a messenger? I was just teasing when I called you out for treating Scala as a religion but you see yourself as some kind of "Scala Jesus"? Oh fuck, kid, you win. I just spilled coffee on my keyboard. There is no insult I could sling that beats this. You win. Total knockout via absurd-brogrammer-ego.
http://docs.oracle.com/javase/tutorial/essential/regex/index.html
&gt;(Beginner)
Minecraft Server Admin Pro?
thanks! I'll definitely give it a shot!
Download the latest JDK installer from oracle. Run it.
If your company is just starting to use Java, I strongly suggest that you use the Java EE library from the start. Learn about inversion of control (IOC), coding to interface, dependency injection, and writing automated unit and functional tests. Also, I would highly recommend using a dependency management system of some kind (either Maven or Apache Ivy + Ant). Whatever, don't go for the Spring framework. It's a nearly completely unnecessary abstraction on top of other frameworks (including Java EE) that don't need an extra abstraction, and an alternative programming model (mainly for the CDI and EJB models from Java EE) where an alternative is not needed (CDI and EJB work just fine).
Effective Java is a must, but I would say you need a pretty good start before jumping into it. Bide your time and pick up one of the old copies for nothing a lot of it has aged well. [The Java tutorials can be really helpful also and most is well written for beginners.](http://docs.oracle.com/javase/tutorial/) BUT before anything else, learn the Commons framework. Part of effective programming in any language is code resuse. Commons puts the pragmatism in Java. Stuff that would be 10, 20 maybe even more lines of code is one line using the util methods in Commons. For example, a few weeks ago I had to debug another mid level devs code. He was reading in a file from an input stream putting it into a string. Not only is this a waste of his time, and space in our repo, but he also had a bug where he forgot to add back in the newlines. I had him rewrite the whole thing... to "String data = IOUtils.toString(is);" The commons jars are easy to download and add to your classpath (a good exercise on it's own) then experiment with all the stuff they do. EDIT: figured I should [link to the Commons project](http://commons.apache.org/).
Tell that to the folks at google working on android.
Well it seems there are some major compatibility problem between the Java 7 compiler and Android. I modified an opensource library and I was getting ClassDefNotFoundError. I thought the problem was in my code so I compiled the original source code and I had the same problem. I ran the project tests and I saw all tests were throwing ClassDefNotFoundError on every single class. Changed to java 6 compiler and problem solved. One of the project developers had the same problem. That being said, I'm curious to know what are Google plans on Java on Android.
Haha I don't understand anything from that, but that's some solid advice in the beginning. Thank you.
The code you're showing is the exact one it started out with. And it works just fine that way.
Because that's what the instructions said to do. I think it's just to get familiar with implicit and explicit import statements. 
Where are these instructions?
Note: I have 0 streaming experience, so this is my naive approach. The simplest way is probably making a Java Web Application (like a Servlet for example) and simply returning HTTP Response of Content-Type "audio/mpeg3". However if you wanna approach it using a desktop application model (Swing, JavaFX, etc...) then it's a bit more complicated I think. In it's simplest form, you will have to create an Server Side application that listens on a port for request to play song or whatever (Using a Socket). Then you simply send the file data through the port. On the other end, you will need to have a client that will connect to the server's socket and send requests/commands or whatever to have a song sent back to him. (Using once again Sockets). This is however how far my knowledge goes, but at this point you have the bytes of the file being sent to you... It's only a matter of finding a library that interprets audio or whatever that supports InputStreams. Hopefully I'm not saying non sense and someone else can provide additional information :)
AH! Now I see what you did. Alright, so you were figuring out how import statements work when you explicitly declare which class you want to import versus importing an entire package. For a beginner, to be honest, it's not that important. However, I'll tell you what happened. When you typed: import .File; import .String; You were supposed to type: import java.io.File; import java.lang.String; Are you starting to understand what went wrong? You still need to precede the class you are importing with the package it belongs to. String belongs to the lang sub-package of the java package. File belongs to the io sub-package of the java package. If you look inside the raw files of Java, you'll see several folders. One is named "java" and it includes sub-folders like "util," "io," and "lang." When you build bigger and better applications, you'll need to get a handle on how packages work. Packages are great ways to import a lot of classes that you might need to run a program all at once. However, sometimes you only need a single class from a package, and it can be a waste to tell the JVM to make space for all of the classes of a package when you only need one. That's why the image is trying to teach you stuff like my second code bit up there instead of the usual: import java.util.*;
Ok, I'm starting to further understand how this works but I have one more question. I was under the impression that I was supposed to put the individual .java files into the source folder. So now it looks like [this](http://i.imgur.com/PtxENh3.jpg). Shouldn't it work the same way?
You shouldn't include those files in your source folder. Just call those classes using the import statements.
Awesome! It's working! minus a few minor errors I have to iron out (mostly capitalization and whatnot)
How does it compare to Sinatra from Ruby? and why reinvent a Ruby stack in Java? for performance?
Glad to hear it!
You should use UDP if you are streaming media to multiple clients in the same network (and want them to be in sync). The protocol is more forgiving when it comes to packet loss. TCP is better if you have one client or when you want to make sure your client receives your data complete. I think this is the case for OP.
This look like a good solution, unless the media files are very large.
&gt; Languages which mange to combine practical experience with scientific advances end up in a more consistent, better designed way than those which were just thrown together. Hmm, this sounds like comparing Scala with PHP or Perl? I thought that my link was about Java... &gt; Not my job to educate “experienced senior-senior Java architects” with reality. Which is, of course, why you came here to educate us with reality, right? :-) Then again. Any link seems to trigger reddit-wars about "I'm more right than you" - "No I AM more right than you"... Sigh
fustercluck*, enless you really meant to imply 'clusterfluck'
Even better, thanks!
The feature I miss the most when developing web apps in Java is the ability to retrieve JSPs from the classpath. This could allow true modular apps. For example, in Swing, I can have use forms from libraries or from other projects, because they are classes and thus come from the classpath.
Under `ClassLoader` issues, you can add the dreaded case of [`java.lang.OutOfMemoryError: PermGen space`](http://frankkieviet.blogspot.ca/2006/10/classloader-leaks-dreaded-permgen-space.html). Easy solutions? Hah! [You wish](http://frankkieviet.blogspot.ca/2006/10/how-to-fix-dreaded-permgen-space.html)! For those that wish to see a PermGen error happen, I've modified his example program in the second post a bit: import java.io.*; import java.util.*; /** * @author Frank Kieviet. * Modified to use Java 7 features and to run as a regular Java application. * * @see http://frankkieviet.blogspot.ca/2006/10/how-to-fix-dreaded-permgen-space.html * @see http://frankkieviet.blogspot.ca/2006/10/classloader-leaks-dreaded-permgen-space.html * */ public class PermGenNuke { private static class XClassLoader extends ClassLoader { private byte[] data; private int len; public XClassLoader(byte[] data, int len) { super(PermGenNuke.class.getClassLoader()); this.data = data; this.len = len; } public Class&lt;?&gt; findClass(String name) { return defineClass(name, data, 0, len); } } private static final String FQNAME = PermGenNuke.class.getCanonicalName(); private static final String FQCLASS = FQNAME.replace('.', '/') + ".class"; public void exhaust() throws IOException { // Load class data byte[] buf = new byte[1000000]; InputStream inp = this.getClass() .getClassLoader() .getResourceAsStream(FQCLASS); int n = inp.read(buf); inp.close(); System.out.println(n + " bytes read of class data"); // Exhaust permgen. With default VM params, this should // happen at less than 32k Class objects in keep. List&lt;Class&lt;PermGenNuke&gt;&gt; keep = new ArrayList&lt;&gt;(1 &lt;&lt; 15); int nLoadedAtError = 0; try { for (int i = 0; i &lt; Integer.MAX_VALUE; i++) { XClassLoader loader = new XClassLoader(buf, n); @SuppressWarnings("unchecked") Class&lt;PermGenNuke&gt; c = (Class&lt;PermGenNuke&gt;) loader.findClass(FQNAME); keep.add(c); } } catch (Error e) { nLoadedAtError = keep.size(); } // Release memory keep = null; System.out.println("Error at " + nLoadedAtError); // Load one more; this should trigger GC new XClassLoader(buf, n).findClass(FQNAME); System.out.println("Loaded one more"); } // END exhaust() throws IOException public static void main(String[] args) throws IOException { new PermGenNuke().exhaust(); } } 
I generally liked this, although many beginner mistakes can be even simpler than this! Slightly annoying though. There were some sentences. That ended prematurely.
Well, good thing I'm in the progress of updating our backend from 4.1 to 4.8 as Java 7 support only started at 4.4 :)
Thanks for taking the time to share this. Good information all around - JavaFX sounds like what I'd be interested in learning. ~Jeff
"null pointer exception" should be changed to "you're trying to use an object that you haven't created yet."
Ah permgen errors. Start at a new company. Find this in java opts: -XX:MaxPermSize=8G lol wut? Prod deployments done by loading new .WARs. Naturally. The classloader leak arguments. They never ended. "Java is garbage collected!" 
Aren't these error's pretty basic and self explanatory?
I believe Play is a great framework and it will be hard and probably not too helpful to compare the two. I designed Micro's functionality from outside-in, and tweak it for performance from inside-out; small memory footprint, light and fast, .yml for config, extensions, routing and REST support **without** Java annotation, scripting support for fast prototyping, template engines for clean dynamic content manipulation. I am trying to bring in as much as I learned from my experience as a Sinatra/Merb developer. Working with Designers for so many years, I was trying to build something that a Designer can use in minutes and use it for publishing his work with the littlest effort possible; all these without writing a single line of Java code. I am sure Play can do that too?! For Micro, the separation of roles and concerns is adamant. Micro (like jpublish.org) is about helping the publishers taking their dynamic content to the web as easy as possible, while allowing the Developers to bring in as much business logic power as possible but without interfering with the content publishing concern; the true separation of roles and concerns. Take a look at Micro's documentation web site: http://micro-docs.simplegames.ca/ (source on Github too); hosted at Heroku, it is a Micro web app and its entire content is written in Markdown. This is an example of what most of the web Designers and the small publishers will like to have, I think/hope?! Speaking about the Heroku, the compiled slug size, for a standard web app using Micro, is 11.7Mb. Micro is micro :)
I couldn't agree more with this petition!
Micro is not Sinatra/Merb, because Java is not Ruby :) It wasn't built to compete with Sinatra/Play/etc. but to help the Designers and the Developers to quickly publish their content while using a small-footprint and fast Java native app. Why reinventing? Not reinventing, I am just trying to bring in as much as possible of the good stuff from ruby web stacks to environments where Ruby/JRuby is not available. Of course, you can use Sinatra/Merb/Rails with JRuby, no problem, but you need Java **and** JRuby for that, including the gems and so on. Performance? I very much believe so! I'll publish some benchmarks soon and show how Micro performs under stress. 
Just to re-iterate, get Effective Java as early as possible, it's an great way to learn how to write good code. After that, take a couple of minutes to figure out how to make unit tests. This will make it easier to experiment with Java without having to use a main method every single time. P.S. Hamcrest is your friend. If Java is brand new, make sure to take a few minutes to understand about Collection data types, and Generics. Also try to explore some of the libraries. Take up either Apache Commons or Google's Guava library to remove unneeded boiler plate. Also if you want to some functional idioms, try lambdaJ
change.org seriously? change.org deals with wars, famine, torture, etc.. Oh the Humanity! DumbSquid sees crapware in the Java installer! Download from ORACLE. Here's the link since it seems soooo hard for you to google it. http://www.oracle.com/technetwork/java/javase/downloads/index.html Guess what, NO CRAPWARE IN THAT INSTALLER! Fucken idiot. 
That's because you're a fucken moron.
The world must revolve around you. change.org is not going waste time on this shit. Go do the world a favor and kill yourself.
ITT: downvotes everywhere.
Rage much?
&gt; I thought that my link was about Java... Considering that the developers of Java had decades of time to look at different implementation approaches and learn how they worked out, their chosen approach is mediocre at best. Considering that they never actually go back and fix broken stuff (primites vs. wrapper classes, auto-boxing, generics, raw types) Java developers will be stuck with those Lambdas for the rest of their lives. So yes, I think it's valid when people bring up different languages which run on the same platform, but manage to do so much better. In general, Java's main advances were to combine a useful, cross-platform standard library with guaranteed execution semantics of the runtime, compile-once bytecode and the (now obsolete) security model which allowed execution of untrusted code, *not* the language itself. Java as a language could have been much worse, like PHP or JavaScript, but it's not that great either. The only large advance of Java-the-language is the abolishment of "undefined" or "implementation dependent" behaviour when compared to C or C++. (Which other languages did much earlier already.) &gt; Not my job to educate “experienced senior-senior Java architects” with reality. No. What annoys me is that people still claim with a straight face that all languages are basically equal, just with pros and cons distributed a bit differently. That's why I commented. Well, you can see how well that guy was able to cope with disagreement. I guess I just stay out of r/java, 80% of its posts seem to consist of "please do my homework" or "what does this Java syntax do?" questions anyway.
Ok, I think is awesome to have something like Sinatra in Java, Scala already has Scalatra. Great Job!
This is only a problem for concrete classes if you remove methods. It is safe to add methods to concrete classes without breaking anything. For interfaces and abstract classes it is a trickier problem. But, for this it seems the [Interface Segregation Principle](http://en.wikipedia.org/wiki/Interface_segregation_principle) seems to be an alternative for API design. Instead of adding methods to an interface or abstract methods to a class, how about just creating a new interface? The idea being that an interface should be tightly focused towards a specific role, facilitating loose coupling, which facilitates simpler evolution. If that's not possible, and an interface of a million methods is required (like ResultSet), then it is necessarly tightly coupled to some other part of the system (like the JDBC spec) and it will have to change as the platform evolves. But that should hopefully be the exception rather the rule!
They can't really though. It's a contractual obligation. I do wish they didn't make it so you have to UNcheck the boxes not to get the spamware.
Join him.
1) What is this crapware you guys are talking about? There's none of the version I downloaded from oracle. 2) Java is free? I don't mind ads as long as they're not in say a paid product but it's not like you're buying the runtime up front 3) Change.org is for like war and injustice D: Email them instead or something
So are you willing to make up for the lost revenue to Oracle because of this? They get paid by crapware vendors to include this stuff. It probably isn't a lot compared to other Oracle lines of business, but it is something.
Saying that they can't because it's a "contractual obligation," is a cop-out. Someone over there signed the contract and should be held to account. They could change the default settings... but they don't because they get paid every time someone doesn't un-check a box. If they had a real interest in assuaging the annoyance of the Java user community they could announce their intention not to renew this agreement. But instead they can't be bothered. I get the feeling that most of the IP that Oracle gobbles up is destined for the scrap-heap. (Just by simple corporate neglect...)
&gt; Is Oracle professionals or are they junk sellers? Neither. They exist to make money.
Any form of VerifyError is more cryptic to someone not experienced with bytecode manipulation than any of these...
I wonder what made these morons think that this bundled shitware would make users any happier. "Hey let's bundle this stupid Ask Toolbar with Java's installer, users are gonna love it and Ask.com is gonna win tons of money."
uninstall it and see what breaks.
Seriously, my parents thought Java was a virus because when it updated it tried to bundle all this crap with it.
&gt; was wondering if I'm actually even using java for anything Most likely not, so go ahead and uninstall. 
That's just common sense!
Whilst I'm getting some replies can you let me know what it's commonly used for these days? just wondering if it will break something down the track that I may not realise at the time why.
We upgraded our production app from 1.5 to 1.7 a few months ago. It was much easier than we expected it to be. There were a couple of changes that broke the app, but they were not hard to fix. We could not upgrade to 1.6 because of bugs with nio. I think that everyone should push to upgrade to 1.7, but that is sometimes easier said than done. 
Is it really that hard to uncheck it?
The is certainly how the founders of change.org envisioned their system being used. /r/firstworldproblems
Start with the Java Tutorial on Oracle's site. Stay away from IDE's until you understand the basics like source code, compiled code. Only them move to an IDE. It will save you time later.
But I have to move my arm! It's almost exercise!
Hmm that is pretty sneaky. Is the toolbar for internet explorer?
&gt; What is this crapware you guys are talking about? There's none of the version I downloaded from oracle. It's the Ask Toolbar. It comes with the Java Runtime for Windows installer. It's only in the JRE, and only on the Windows platform, and it's *not* in the JDK, so if you're a Java developer, you may never see it.
It's more deceptive than you realize: http://www.zdnet.com/a-close-look-at-how-oracle-installs-deceptive-software-with-java-updates-7000010038/ &gt;In the background, the Ask toolbar installer continues to run, but it delays execution for 10 minutes. If you are a sophisticated Windows user and you missed the initial checkbox, your natural instinct at this point would be to open Control Panel and check Programs and Features. When you do, you will see that only the Java update has been installed. You might also check your browser settings to confirm that no changes have been made to your settings. You might conclude that you dodged a bullet and that the unwanted software wasn’t installed. &gt;But you would be wrong. The Ask installer is still running, and after waiting 10 minutes, it drops two programs on the target system. &gt;I’ve never seen a legitimate program with an installer that behaves this way. But spyware expert Ben Edelman notes that in the early part of the last decade this trick was business as usual for companies in the business of installing deceptive software. That list includes notorious bad actors like WhenU, Gator, and Claria. Remember that this has to be unchecked on every update, which happens a bit less than once per month. This isn't to say this petition should exist. It's still a stupid petition. But Oracle isn't some innocent party here. 
Toolbar and default search on IE Firefox and Chrome.
&gt;The feature I miss the most when developing web apps in Java is the ability to retrieve JSPs from the classpath. This is a default feature in JSF with Facelets, and this concept is given a boost with JSF 2.2 where you can load self-contained flows (collection of pages forming a logical unit) from the classpath.
Another Java web framework? What makes this different/better than web4j? (http://web4j.com)
Just download the version from http://java.oracle.com instead of http://java.com
No, it should remain as Null Pointer Exception. In some instances you are damned sure you have created it, but you haven't correctly assigned the variable you want to work with, with a value: public class NPEDemo { public String integerToString(Integer i) { return i.toString(); } public static void main(String[]) { Integer i = null; Integer i2 = new Integer(0); System.out.println(new NPEDemo().integerToString(i); } } Will throw an NPE, but if you have believed you set i to be an integer. Granted this example is quite simple to see the null value, but nest these calls a few times, and you get the idea.
Maybe they are referring to unit testing via JUnit or otherwise? Generally most unit tests are 1) set of logic 2) Use asserts to see if data is correct If so, then they are just really bad at formalizing requirements, since they should say something like "We are looking for someone who is familiar with Test driven development, JUnit, and agile methodology" As an aside, I have experience with JUnit and am also on the market... 
Awesome solution. Now please explain it to my mother.
I am sorry, I am not familiar with web4j. From what I see there, views are using JSPs; just to scratch the surface. Personally, I prefer using Velocity, FreeMarker or StringTemplate (JHaml coming soon) and to have the freedom to choose one or the other, *or none*! I'd rather create a web page using Markdown and Velocity than using JSPs and JSTL. I also like configuring friendly URLs for SEO, creating RESTful endpoints, prototyping business logic in scripting actions and so on. Most probably you can do all that with web4j, is just that I have the feeling it is much easier with Micro, but I am biased. HTH.
It's not hard to uncheck it. It is hard to be continually aware of whether one needs to while "next, next, next" installing. Or at least that's the case for most people who just download it to get some program to run. 
Another Java web framework? What makes this different/better than Simple? See http://www.simpleframework.org
Everybody abandoned OpenOffice.org for LibreOffice a long time ago, Fedora and OpenSUSE are ditching MySQL for MariaDB. When is the Java community going to start a foundation to maintain an OpenJDK fork? Oracle are obviously running it into the ground harder than they've done with any of their other products. I'm not really a Java person, but I get the feeling that forking Java is somehow a fundamentally harder problem than forking an office suite or an SQL server. Am I correct? If so, why?
The approach that you called "Interface Segregation Principle" is what the article refers to as "The Eclipse Way". While this approach doesn't break any client code upon API extension, it may well lead to a scattered set of similar interfaces, whose responsibility is hard to distribute and to understand. Eclipse knows things like ICompletionProposal with as many as 6 "extensions": http://help.eclipse.org/indigo/nftopic/org.eclipse.platform.doc.isv/reference/api/org/eclipse/jface/text/contentassist/ICompletionProposal.html It takes an extreme amount of care to nicely evolve such an API
&gt; Can you be specific? Did you see the [link](http://hg.openjdk.java.net/lambda/lambda/jdk/file/ad394630273b/src/share/classes/java/util/function/) to `java.util.function` in my previous post? There is not much to say about that train-wreck of language/API design. Naming will probably still change a bit, but design is pretty much done. &gt; Note, that the upgraded Collections API is still in an early draft version... I wasn't even starting with that. Some of the choices are just completely ridiculous, like `&lt;R&gt; Stream&lt;R&gt; explode(BiConsumer&lt;Stream.Downstream&lt;R&gt;, ? super T&gt; exploder)`. The developers behind that seem to be playing a NIH game with names. “Oh, this operation has common, popular, established names? Let's write that down somewhere so we can make sure we use something completely different!”
Yet another web framework in Java? How does this compare to AribaWeb? (aribaweb.org)
For one, I'm pretty sure that Oracle will sue the hell out of anyone trying to fork Java...
For Windows users: Always go with http://ninite.com when installing Java and software that is usually bundled with toolbars and other junk.
Obviously you have never used RIFE (http://rifers.org). This will get you 90% OF ALL FEATURES and it will only take you 10% of the work that you need to do with other frameworks (and yes, this includes EVEN web4j). As one of the very few web frameworks, RIFE actually has a LIGHTWEIGHT EXECUTION MODEL, and one that has been proven in production. It had web continuations and flow continuations even before ADF taskflows and Spring flows were being dreamed of, actually in WORKING production code. I'm sorry, but as great as web4j is, I'm pretty sure it doesn't even come close to RIFE...
There are about [700m Windows Java users](http://stackoverflow.com/questions/1297806/how-many-personal-computers-have-java-installed), and [at most you can get $0.10-$1 per toolbar install](http://pay-per-install.com/). However, lets say 50% (low) install with a toolbar-less installer (admins, deployments, devs etc); 50% (very high) choose to install the toolbar anyway (idiots); Oracle gets 50c per install (extremely high); and the PC lasts 5 years (low). That's at most $17m per year, or about 0.04% of their annual revenue - at most. They'd save more money by starting one less lawsuit every decade.
1) Java is now bundled with the Ask bar (regarded as a malware). 2) The issue is not about Java being free or making money, but bundling it with a malware. Oracle already makes toons of money from its other operations, 10 billions net income in 2012. http://www.marketwatch.com/investing/stock/orcl/financials 3) Change.org is for online petitions. Send an email to who, Oracle? They only offer paying supports for Java. 
Try getting the book Head First Java by Kathy Sierra and Bert Bates. I also recommend http://chortle.ccsu.edu/cs151/cs151java.html 
I've never been taught any programming, I learned C and then in my first job I was required to make the move to Java. Coming from C it wasn't too bad because the syntax is broadly similar and the concepts weren't too difficult to absorb. I personally think paying well is a perfectly adequate reason to learn Java, but I happen to rather like it. Java EE contains some pretty nifty technology for tasks that my job happens to involve such as servlets and persistence. Plus, the official documentation is usually nothing short of excellent, which means I'm never stuck for long.
I believe a web Designer will be less intimidated by Micro. Again, I can't compare Micro with a framework I don't know much about, sorry. "Yet another web framework in Java?" Of course! Nothing wrong with that. Sinatra/Merb/Rails and other Ruby based web framework are kicking ass, should we, as Java developers, rollover and die, or start hating Java??? I don't think so! I truly believe that any Java framework built *years* before these should be reviewed by its author(s) and refactored ASAP while he asks himself: "How would a non-Java web developer work with the X or Y feature that I am building now? Am I really helping him? How is X and Y implemented in Sinatra/etc.?" 
"Another ...", please see my [previous answer](http://www.reddit.com/r/java/comments/17wpci/introducing_a_new_java_framework_for_web/c8a1450), thank you.
I had no formal programming training either. Learning HTML turned into learning Javascript, which turned into PHP and MySQL, and then I got an Arduino and started doing Python a few years back. Don't get me wrong, upping my pay would have been reason enough a few years ago, but right now I make really good money. Working on my CISSP right now, which will get me about as good of a pay bump as I'm going to get without doing a Masters or a business degree. I'll check out Java EE, thanks for the tip.
&gt; Where exactly did it go so horribly wrong? They didn't manage to introduce decent function types, which should have been the first warning sign. While it would have been a bit annoying, it would have been a sane approach for the existing API: It would have guaranteed readable descriptive names, because this had meant that the types were limited to a specific API's “functional interface” like `Runnable` or `ActionListener`. Names everybody knows and understands. But then they wanted to add methods to collection classes and they realized that all these general operations can't be described with nice, descriptive names, because the library has to make these naming choices, not the consumer which would have been able to “invent” descriptive names based on his specific usage. But now the time was running out, and they had already sold the idea that they wouldn't need function types to the public (and probably their higher-ups, too). Really bad situation. What to do? “Let's just define bog-standard classes to stand for those function types!” ... and everything could have went well if they just had adopted a working approach like Scala's or C#'s (`Func`, `Action`, `Predicate`). Actually, it could have been so much nicer than C#, because due to the existence of `Void` in Java they wouldn't have needed to add both `Func` and `Action` (and they could have left out `Predicate`, too if they wanted). What did they do instead? After what looks like a night full of heavy drug-use, they decided “Fuck sanity, let's just invent crazy names for this stuff”. And if that hadn't been enough, they figured out that they actually didn't like type erasure anymore, so they also added *manually* specialized classes for *some* of the primitive types. Now we seem to be stuck with insane names and a naming scheme which is highly unpredictable and internally inconsistent (the mailing list is not happy about it, but Oracle representatives managed to mostly ignore it): You have the general version of a function with one input parameter and a result type: Function&lt;T, R&gt; with R apply(T t) This type gets specialized to a few primitive input types ... DoubleFunction&lt;T&gt; with T apply(double d) ... ... and output types (note the sudden change of the method name) ... ToDoubleFunction&lt;T&gt; with double applyAsDouble(T t) ... ... and both: DoubleUnaryOperator with double applyAsDouble(double operand) ... Well, if you assumed there was a sane pattern behind that, look at this: If the return type is `void`, the name changes again ... Consumer&lt;T&gt; with void accept(T t) ... or if the input type is `void`: Supplier&lt;T&gt; with T get() Additionally, they also have added: Predicate&lt;T&gt; with boolean test(T t); And again, there are specialized classes for those classes for some primitive types, too. If you assumed that craziness would stop here, you're mistaken. Now repeat all the things above, with **two** input parameters: BiFunction&lt;T, U, R&gt; with R apply(T t, U u) ... ToDoubleBiFunction&lt;T, U&gt; with double applyAsDouble(T t, U u) ... DoubleBinaryOperator with double applyAsDouble(double left, double right) ... ... but now they realized that they would have to write tons of classes if they actually wanted to specialize them all, so they started with another set, where one parameter would be specialized and one would be left generic: ObjDoubleConsumer&lt;T&gt; with void accept(T t, double i) ... Conclusion: They made the wrong, premature decisions and basically designed themselves into a corner. They ended up with a design were neither all names are descriptive nor follow a coherent naming scheme. After Java 8 is released, I expect that Eclipse and IntelliJ will start to hide these names in favor of `T -&gt; R` in their editors, just like they did with all those generics for the last 5 years. But we will be stuck until the end of time, because fixing Generics just became a bit harder. &gt; Your informed insights might be highly valued by Oracle... :-) No. I have seen like they treat people on the mailing list (see also the debacle with `Option`), I have no interest in being treated with such intellectual dishonesty.
And my reaction, every time that article is posted, is the same. http://ninite.com works as an installer and as an updater. It doesn't install bloatware and a single updater can handle products from many venders.
Isn't there already a OpenJDK?
This is such a lame criticism. Right up there with "looks like someone has too much time on their hands"
do petitions compete with other petitions or drag the server down? i don't think there is a problem. they can all co-exist in peace. the petition is valid anyway, because if noone cares about this issue you will see it right here in the petition, problem solved. 
It's never been really truly write once, run anywhere but it's close. It's the first language I've come across where one GUI I write, behaves exactly the same on one OS to the next (provided I can test it). The GUI library is bundled too. That makes sense to me. Distribute the VM and you've got most of what you need. The cross platform aspect of it all, turned me from C, C++ to Java. 
come on... rife latest release was in 2007!
The best reason to learn Java is if there is something you want to work on that is written in Java. The second best reason is the JVM. The language itself is easy to learn, but unexciting (on purpose). It's verbose and missing some of the features you'd like to see in a modern, multi-paradigm programming language, like type inference and first-class functions. If you want to learn something that will help you get a job, it's a good choice. If you want to learn a language that will expand your mind as a developer, look elsewhere.
&gt;There is no reason to be walking when we have cars. Exercise... also, while not really relevant to this analogy, walking is cheap...
&gt; discussion That sounds like social interaction...
Java offers some key features: * It's a member of the brace family, so it looks instantly familiar to any C or C++ programmer. This matters less these days, but when Java was young this was a strong selling point. * A rich and (mostly) high quality standard set of well-documented libraries. And that's just counting the stuff that's shipped with it when you download Java from Oracle. On top of that there are a lot of free (as in either speech or beer) libraries out there of high quality such as JUnit and Apache Commons. * Building on the previous item, Java *leaves out* certain things from C/C++. For example preprocessing and therefore macros in favour of a package system that - while enforcing certain things about how you organise things in the file system (bondage and discipline!) - is much more robust than `#include` directives. * Strong type checking at compile time. Of course not as strong as functional programming languages with type inference, e.g. Haskell and ML variants, but one takes what one can get with a brace family language. It *is* basically bondage and discipline which some frown upon, but it does eliminate certain types of bugs before the program even runs. * Automatic memory management. I've seen estimates as high as 30% on how much of their time C programmers spend on `malloc()` and `free()`. In Java one (more or less) just needs not accidentally keep references around to objects one doesn't care about any more (barring exceptional circumstances - such as running in an application deployment server where one can run into the wonderful PermGen space out of memory error).
If a potential candidate doesn't know about pre- or post-conditions, you'll probably want to go to the next one.
Not an exciting answer, but you can't really beat the quality of Java's own tutorials for this sort of thing http://docs.oracle.com/javase/tutorial/uiswing/ http://docs.oracle.com/javase/tutorial/essential/io/index.html And what do you want to "get out of" learning a second language? Ie., maybe you have a particular area of research/study that you want do, maybe you want get down to the nuts and bolts of the computer, or maybe you're looking for a language that is totally different that will just open your mind to different ways of programming?
The Eclipse way *looks* like ISP, certainly by the "letter of the law", but definitely is not the same by the "spirit of the law". While the interfaces are technically segregated, they don't don't represent well defined roles. Instead, they are random bags of methods.
Is there any reason to not just use openjdk at this point? 
They are retarded obviously, like you. 
Java is a programming language, but it is also a platform and an ecosystem. You don't have to program in Java *the language* to take advantage of the platform or the ecosystem. There's Scala, Clojure, Groovy, even JRuby. Java runs pretty much everywhere and has open source software for almost all its important parts. It's very reliable and very focused on community standards, making it a darling of enterprise. While Oracle owns Java, unlike Microsoft and .NET, there are many different games in town when it comes to application servers and software stacks. From commercial stuff like Oracle's own Weblogic to open source stuff like JBoss or Glassfish. So, if you like open source and open systems, but want a step up (perceptually) from the PHP/Python/Ruby world, Java is not a bad place to go. Java ranges from boring but trusty enterprise (Java EE) to cutting edge and innovative (Twitter runs on the JVM).
uhhhhhhhhhh... if you say so lol
I use it because: 1) Compiled code is Cross-platform 1a) Cross-platform thick clients 2) Awesome toolchains. Netbeans, Eclipse, are just fantastic 2a) I really like netbeans' gui editor. It's not the prettiest or most functional, but I find it neatly and exactly solves all the GUI problems that I have on a daily basis. 3) Every time I need a library for something, I can find it. [JFreeChart](http://www.jfree.org/jfreechart/), [jung](http://jung.sourceforge.net/), [colt](http://acs.lbl.gov/software/colt/), [sqlite](https://bitbucket.org/xerial/sqlite-jdbc/wiki/Home) are all category-killer tools in their respective categories. I'm aware of some equivalents of those in other languages, but jung and jfreechart are just *so damn nice*. 4) I *like* it. It's nice to work with; it lacks some things found in other languages [first class functions being what I miss most], but it's just great for *getting shit done*. PS FWIW, I didn't learn it in school, I learned it while at my current job, which isn't my first job.
&gt;Basically what I've come away with regarding Java is "Fuck. That. Language. That's basically how I feel about it too. On the other hand, when I want to write rock-solid, highly performant server-side applications, I'm prepared to deal with a fair bit of fuckery. It's nice to use other JVM languages where possible but usually you end up drilling down to Java for one reason or another sooner or later. tl;dr Java as language nothing to write home about, Java as server platform is a boss. 
I used Eclipse for a while, then I switched to Netbeans. Love Netbeans. 
Memory management is one of the reasons I never took up C. Good selling point for Java.
I definitely understand the appeal of write once, run anywhere that Java has. Then again, applications I write in PHP run on Mac, Windows, Linux, Android, etc. As long as there's a standards-compliant web browser on the device we're good to go. Haven't yet run into a customer that demands a desktop application, they've all been happy that they can just run the application in a browser and not have to worry about installing anything. 
So what's the big advantage to running the JVM? I'm used to operating on a LAMP stack.
&gt; I've come away with regarding Java is "Fuck. That. Language." Whoa. That escalated quickly. Good thing they didn't recommend C++. Maybe you don't like static typing as you are coming from more dynamic languages. I tend to prefer static typing, at least in any bigger project. That and other Java language features makes Java a very IDE friendly language, so there are a lot of great IDEs. I really miss many IDE features that I get with Java when coding with many other languages. Also compared to scripting languages, you catch a lot of errors before you even run your code. But anyway. Programming language is just a tool. Choose the right tool for the job. The more languages you know the better. Java may not be the hottest new thing and it has its down sides, but I personally like it. It has static typing, the standard library is very good and it's crossplatform. Also if you want to do Android apps it's pretty much a must (well, there are other options too). 
So what makes the server platform so good, specifically? I've written applications that run on the LAMP stack that handle a hundred concurrent connections or more and never had a problem, even on mid-range server hardware. I probably don't know enough about the JVM to know what I don't know.
I, too, love netbeans. Actually I despise eclipse, but that doesn't mean it's not a *great tool*, it just means I don't it doesn't sit well with me. Everyone should try all three major IDEs and pick what they like. Possibly use different features in each
As far as learning another language goes, like another commenter mentioned, it depends what you want to get out of a different language and programming knowledge in general. Python is a relatively quick language to pick up and start doing some cool things with. It's got a pretty good standard library and, like Java, memory management is automatic. They have decent tutorials on the website as well. C can also be a very interesting language to learn as it has some interesting differences compared to Java. Memory management is not automatic and you tend to write certain things yourself that are generally included in standard libraries for other languages. It isn't object-oriented, unlike Java, so you work with pointers and structs instead of objects. Back to Java, some classes you might look into for simple File I/O would be File, FileWriter and Scanner. There is also FileInputStream and FileOutputStream but I think the others I mentioned are the easiest to start with.
[PHP is a fractal of bad design](http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/). Java doesn't even have to be that great [even though it generally is] to be preferable to PHP :-)
I learned to program particularly to write Android applications so Java was required. I feel indifferent about it but I haven't had that much exposure to other languages really. Just small tutorials on ruby, python, and some php work.
Speed and real multithreading support, basically. Good libraries, too, although other languages certainly have those as well. LAMP is awesome when you can leave most heavy lifting to the A and M parts, and use the scripting language as a lightweight control wrapper over them. It starts to fall down when you need to do more complex stuff in the P component. So If you're not hitting a CPU-bound wall and you just want to learn a new language to absorb new paradigms and become a better coder, Java might not be the right tree to be barking up. But if your application needs to do a lot of business logic, message-queuing work or what have you, Java or at least the JVM is worth a look.
Well, change.org runs on Java... ::ducks::
Bug resistant, simple, readable syntax that encourages good style. It's easy to learn, and lacks anything thought to be too dangerous or confusing. I never liked most of the APIs though, or most gui apps built with it. And the syntax seemed a little too oversimplified (few primitive types, and no properties, delegates, or operator overloading), though I understand why. After school I didn't use it much unless I needed easy threading or sockets. Android has been pulling me back into it though, same as iOS has forced me to learn Objective C, though Objective C is much less enjoyable.
In the latest JRE (since 7u10) there's a control panel option to [disable the web plugin](http://www.java.com/en/download/help/disable_browser.xml), so it won't keep reenabling itself on upgrade. 
http://www.treehugger.com/clean-technology/facebook-could-eliminate-75-of-its-servers-by-changing-their-programming-code.html That's a hypothetical from 2009, but I read some other article about how Facebook, Twitter and some other big names rewrote a lot of their back-end code in Java. Long story short, the JVM is more performant than PHP code being interpreted in a LAMP stack. If you're making a LAMP site for Bob's Hardware store, you're not missing out. In fact, you might actually gain some "value" from using LAMP in a shared server environment instead of getting a bloated container environment re: Java. If you're doing "enterprise" things, the JVM is where it's at. I like Java because it's C-like and I learned C in school 15 years ago. That's why I liked PHP too. GOGO Egyptian braces!
*cough* or just learn Spring :P kidding, I'm kidding... (no I'm not)
Netbeans makes baby Jesus cry. IntelliJ or Eclipse for me.
Java is harder to program in because it prevents you from doing a lot of really bad things. That's one of the principle design elements behind the most of the brace languages -if it seems hard to do, you're doing it wrong. Java on the server side is much more stable and performant than PHP or Python. PHP and Python will let you get away with being a Bad Programmer for a long time because the default/easy way to do lots of things is Bad. Java IO streams seem dumb and complicated, until you understand the whole concept behind them and realize why you need them. Same thing for thread pool executors and class loaders and everything else. Why do all of those complicated things exist when you can make a PHP web page without them? Because Java prioritizes doing things right: security, performance, scalability, API extensibility, separation of responsibility... It's making you do things better as a new Java developer than you've probably ever done as an experienced PHP or Python developer. I've managed PHP projects with about a dozen programmers, and it made me want to burn the world down. Managing similar-sized Java projects has been much less arson-inducing. I hate programming in Java, though. C# is a much better language.
What this guy said. Dependency Injection is the future. I was a Spring/Guice fan and still am, but JEE 6 took a lot of good features, especially CDI, from those two technologies. CDI makes programming so much easier, simpler, and better once digested, imho.
Possibly the most important reason is that if you want to find a J.O.B. after college, there are far more openings for Java related projects. Java, as unsexy as it is, is the COBOL of the 1990's. There's millions of lines of java code out there that aren't going away any time soon, and someone has to keep em in line. EDIT: And, as other here have mentioned, there's a TON of java API's out there to do just about anything. I never do "Hello World". I jump into a major development as a student of the language, so my first java program was a TIFF Image splitter/Recombinator that parsed TIFF files looking for barcodes using Google's ZXING barcode API, reading and routing TIFF pages extracted from Multi-Page TIFFs to blob objects in SQL Server. That would have been a tough "first exposure" project in just about ANY other language. 
Still, not as much glueing as I've seen in Rails code! Take that as a positive or negative as you will
C# is Delphi with C syntax. :) That is what makes me like it and all the functional programming additions of the last versions (e.g. LINQ, lambda, extension types, expression trees).
&gt; Instead, they are random bags of methods. That was my impression. Specifically, a numeric suffix doesn't well distinguish roles. Do you have an example of a good implementation of ISP?
As an end user, unlikely you will notice any difference.
Programming is about finding a library, not making your own. Yeah.
C# is also write once, run anywhere. Thanks to Mono Project, you can run C# apps on desktop and mobile platforms.
Oooh, an AribaWeb guy. As a WebObjects developer I've looked at (and liked) AribaWeb, but the community seems small and inactive. Do you think they'll survive?
ok So basically I been instructed to get 2 (2x2) matrix then subtract them: public class Matrix{ public static int[][] subtract(int[][] A, int[][] B){ if(A.length != B.length) throw new IllegalArgumentException("different dimensions found!"); int[][] C = new int[A.length][A[0].length]; // here goes the sum for(int i = 0; i &lt; A.length; i++){ for(int j = 0; j &lt; A[i].length; j++){ C[i][j] = A[i][j] - B[i][j]; } } return C; } public static void print(int[][] m){ for(int i = 0; i &lt; m.length; i++){ for(int j = 0; j &lt; m[i].length; j++){ System.out.print(m[i][j]+"\t"); } System.out.println(); } } public static void main(String[] args){ int[][] a = {{3,2},{1,0}}; int[][] b = {{5,4},{-3,6}}; System.out.println("Matrix A"); print(a); System.out.println("Matrix B"); print(b); int[][] c = subtract(a,b); System.out.println("Matrix C"); print(c); } } 
Then instructed to multiply the 2x2 matrices basically needing (3x5 + 2x-3) (3x4 + 2x6) (1x5 + 0x-3) (1x4 + 0x6 )
To be fair though, you're not writing the actual gui in php. And if you are doing bare bones html output from php? Swing is shit, and almost nobody likes to use it. But it's still worlds ahead of the basic 1995 style GUI I see from people who focus on webapps only on the backend side of things. 
I haven't looked at mono in a while. But I'm assuming you're talking about using gtk bindings? Even on a linux system under kde that looks bad, and on windows or osx it's borderline painful. It's one of the few crossplatform gui systems that look worse than swing. 
I agree the bundling of the Ask toolbar leaves a distinctly bad taste, but this doesn't detract from the incredibly high number of deployments of Java. Now making sure people have a *compatible* JVM, that can truly be a nightmare!
&gt;Sinatra/Merb/Rails and other Ruby based web framework are kicking ass, should we, as Java developers, rollover and die, or start hating Java??? I think that Simple/Click/AribaWeb/WaveMaker ARE kicking major ass and you'll love Java when you pick up one or two of these. Specifically, if you have never looked at Simple, I can only urge you to try it. 
I've found that Java has a lot of volume for libraries. But it's tough to identify which ones are good quality (well designed, well maintained, etc).
I appreciate your comment, thank you. But have you even had a brief look at Micro?!
I'm quickly looking at Micro as we speak, but incidentally I'm also checking out Juzu at the moment (http://juzuweb.org and http://blog.exoplatform.com/2013/01/22/three-days-with-juzu-write-a-killer-app). I also had Induction on my list still, and Amber 3. Once I'm done checking out Juzu, I'll definitely give Micro a more in depth look.
Well, they are useful in other places in the code as well besides tests. But yeah, it's a rather stupid stipulation.
* One of the many complaints I hear about Java is that it's "too verbose" or "I have to write too much boilerplate code". While you may have to write a lot of boilerplate, that is actually a benefit for Java. Because the code is verbose, it tends to be easy to follow, easy to troubleshoot, and easy to maintain. Besides, the IDE's handle MOST of the boilerplate code for you these days. * Another major advantage to Java is the plethora of libraries available for use with your applications. In most cases, writing Java applications requires that you just put together libraries for the business function you want to accomplish and nothing else. In other languages I work with (I'm looking at you Python and Ruby) I run into issues where there are no existing libraries for the things I am trying to do and therefore have to write LOTS of low-level code and algorithms before I can even begin on business logic. * Finally, Java is FAST. It consistently beats out almost everything but C in the [Debian Programming Language shootout](http://benchmarksgame.alioth.debian.org/). This alone should be enough to convince a professional to use it in cases where speed and efficiency is paramount.
I like Eclipse for some things and NetBeans for others. Eclipse is great for Spring and Android. NetBeans is awesome for Swing GUI applications.
Liar. Mono is at .NET 2 (ish) and is missing many parts of the APIs. You cannot do cross platform easily - you can only do Mono and run the limited and slow Mono runtime on windows. NOT the same thing as Java.
Java provides a universal binary for one. Java guarantees number sizes and precision on all platforms. 
Which is one of the many reasons the language sucks.
"Induction [...]"? I don't know, but I am happy to learn there so many new Java frameworks out there. Again, Micro is probably more: "getting things done quickly" oriented? Or that's what I like to believe, of course;) 
It helps to divide the calculation into smaller problems. Basically you do the cross product of a single row and column and add it up. So implementing a method that only does that is a good start. Could look like that: public static int multiply(int row, int column, int[][] a, int[][] b) { int sum = 0; for (int i = 0; i &lt; a[row].length; i++) { sum = sum + a[row][i] * b[i][column]; } return sum; } Then you simply iterate over your matrix that holds the result, like so: public static int[][] multiplyMatrices(int[][] a, int[][] b) { int[][] matrix = new int[a.length][a[0].length]; for (int i = 0; i &lt; matrix.length; i++) { for (int j = 0; j &lt; matrix[0].length; j++) { matrix[i][j] = multiply(i, j, a, b); } } return matrix; } Please post in [r/javahelp](http://www.reddit.com/r/javahelp/) next time. Hope that helps!
I was checking out some of the frameworks enumerated throughout this discussion thread. I believe more and more that Micro is talking to a specific audience, where the non-Java users have an important role in the development of the site; Designers, Content managers, etc. With Micro they can prototype quickly *before* even calling for dev support. I am glad that when I compare Micro with all these frameworks, I realize how small Micro is:) And I truly like it this way. Sure Micro is lacking the persistence support for now (many other features too, probably) and it will be hard to compare it with other frameworks from this perspective. However, Micro is modular and can be expanded easily! (I am searching for a light ORM that I could add as an optional extension; activejdbc, maybe?) Honestly, I see all these frameworks as options, not as competitors. Let the users compare and choose based on what they want to accomplish. Maybe they'll use ... I don't know ... juzu, to randomly pick one, for building an awesome e-comm web site, but would they use it for developing a .. blog, or a fast REST service front-end layer let's say?! The Ruby world is full with good examples where devs/designers are swinging between the fat Rails and the slimmer Sinatra/etc., shouldn't we be glad we can start doing the same in Java?
petitions rarely do anything. online petitions do even less. It's a a minor nuisance given how great the jvm is.
I'm considering picking up more java, just because there has been a huge jump into the linux scene which makes portable languages all the more enticing to use. I see it more as a tried and true language, which lacks any real buzzwords. This is probably why I never was really interested in it.
3000 losers who want to waste change.org's time.
Inkinda wanna sign this petition Lets write something in java to automatically sign the petition 100000 times!
GNU CLASSPATH
Wow... I can't... even... thank you... -_-' I can't believe I did that. I even thought about it. Fleeting thought but didn't try to change it... Thank you... I'm absolutely retarded.
I beg to differ, but to each its own.
That's the spirit! "I'm just one person, I can't do anything!" One person(let alone 3000!) have never been able to change something!
I think you forgot to /s
The few things I've built with mono on linux have always just worked on windows/.net without mono and without recompiling.
I was really surprised that Google chose Android as the programming language for Android. Kinda turned me off from the idea of learning to make apps for Android.
This is true, there are some really ridiculous workarounds out there for tasks that should be very simple across all platforms that run the same browser. Ah well.
You're spot on about PHP and Python letting you do some rather bad things. On one hand I like it because if I fuck something up it's my own damn fault, and it has taught me to be vigilant. On the other hand, there is just some really, really terrible PHP code floating around out there.
&gt; if they just had adopted a working approach like Scala's or C#'s (Func, Action, Predicate). Hmm, there is Function, Consumer, and Predicate for the same. Consumer sounds a bit weird at first. From what I recall, the reason for this was their way of thinking of stream "sources" (Supplier) and "sinks" (Consumer). And a consumer would be a more general sink - i.e. an entity that only consumes method arguments, without giving anything back. &gt; because due to the existence of Void in Java they wouldn't have needed to add both Func and Action Using Void (instead of void) seems a bit hacky to me, specifically as the generated bytecode makes no sense, then. Void will reserve space on the stack, whereas void won't... &gt; and they could have left out Predicate, too if they wanted Predicate has a very clear semantics. It clearly communicates the fact that it is a Function&lt;T, Boolean&gt;. Given the default methods in Predicate that help combining predicates using AND, OR, etc, I don't see a problem with adding such a type. &gt; they figured out that they actually didn't like type erasure anymore, so they also added manually specialized classes for some of the primitive types. Looks to me precisely what Scala did. Consider scala.Function2: trait Function2[ @specialized(scala.Int, scala.Long, scala.Double) -T1, @specialized(scala.Int, scala.Long, scala.Double) -T2, @specialized(scala.Unit, scala.Boolean, scala.Int, scala.Float, scala.Long, scala.Double) +R ] ... While Scala has some built-in language features to handle byte code generation for optimised dealing with primitive types / wrapper types, the resulting byte code looks similar to me as what the Java guys are planning. Now, of course, the fact that Scala has its own scala.Int, scala.Long types helps in keeping these facts hidden from client code (which is nicer than writing applyAsDouble). Then again, how would you do it *better* in Java, short of getting rid of primitives? &gt; They ended up with a design were neither all names are descriptive nor follow a coherent naming scheme. Yes, I'm sure that names could be improved and you're probably right about 1-2 of your points. Then again, you mentioned it yourself, they won't add the "cleaner" function types, the way Scala did. One reason they won't do that is because they argue that this can be done in third-party libraries. Once Java 8 is out, this library here will be very useful: http://functionaljava.org/ &gt;&gt; Your informed insights might be highly valued by Oracle... :-) &gt; No. I have seen like they treat people on the mailing list (see also the debacle with Option), I have no interest in being treated with such intellectual dishonesty. I know. I was kidding, actually. I was giving it a shot myself. I was trying to get that weird decision out of their heads, about adding a mandatory yet useless "default" keyword to denote extension methods: http://mail.openjdk.java.net/pipermail/lambda-dev/2012-August/005393.html No success. Anyway, we'll get what we'll get, and it's worse than it could be, but better than nothing.
I don't have a good link, but the book [Growing Object Oriented Software Guided By Tests](http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627) has the best *worked* example of ISP that I have ever seen.
There was an exceptional article that rebuts the one you linked, I'm struggling to find it though, maybe someone else knows where I could find it. A lot of those issues have been fixed in subsequent releases of PHP. It really isn't all that bad when it comes down to it.
This petition means nothing if Oracle has contractual obligations to Ask...
Nice. Thanks for the hint. Might be on my todo-list of books to read, soon
I'm right there with you when it comes to choosing the right tool for the right job. That's the reason I haven't jumped on the NoSQL bandwagon yet. The verbosity of Java is one of my main turn-offs. I'm good at deciphering code, even if it's other people's code that's documented poorly, and drilling down to its purpose. Looking at Java code makes me go cross-eyed, and the little bits of code I've written make me feel like I'm writing a novel just to convey a simple message. Then again, it sounds like the performance boost from using Java is worth it for certain projects. 
Why would you make everything static? Try this instead... public class Matrix { private final int[][] elements; private Matrix(Builder builder) { this.elements = builder.elements; } public int getNumRows() { return elements.length; } public int getNumColumns() { return elements[0].length; } public static Builder builder() { return new Builder(); } /** * {@code with*()} method prepare a brand new matrix, {@code set*()} methods * replace existing values without overwriting extants. */ public class Builder { private int[][] elements; public Builder withSize(int numRows, int numCols) { if (m &lt; 1 || n &lt; 1 || m * n != values.length) { throw new IllegalArgumentException(); } elements = new int[numRows][numCols]; return this; } public Builder withElements(int m, int n, int... values) { withSize(m, n); setElements(values); return this; } public Builder withDiagonal(int... values) { withSize(values.length, values.length); setDiagonal(values); } public Builder setElements(int... values) { for (int i = 0; i &lt; m; i++) { elements[i] = new int[n]; for (int j = 0; j &lt; n; j++) { elements[i][j] = values[i * j + j]; } } return this; } public Builder setDiagonal(int... values) { if (values.length &gt; elements.length || values.length &gt; elements[0].length) { throw new IllegalArgumentException(); } for (int i = 0; i &lt; values.length; i++) { elements[i][i] = values[i]; } return this; } public Builder reset() { elements = null; return this; } public Matrix build() { Matrix newbie = new Matrix(this); reset(); return newbie; } } } You get the idea from here. Note that I made `Matrix` immutable, but gave it a builder that you can add methods to help the user do whatever they want to initialize an instance. Don't add advanced functionality like addition or multiplication to the builder, instead add that to the `Matrix` class and use the builder to initialize the new instance that results from the operation. The builder is not designed to do matrix math, it's just there to initialize a new matrix at the level of working with elements. All the mathematics belongs directly in the `Matrix` class. You'll want to make the `Matrix` class iterable and individual parts of it (a given row, column, or the diagonal) iterable. Also, you'll want to define a `transposeIterator()` method that iterates the values in transpose order, and then add builder methods that take `Iterable&lt;Integer&gt;` instead of `int... values`. This will make it very easy to add a `transpose()` method to `Matrix`: public Matrix transpose() { return builder().withElements(getNumColumns(), getNumRows(), transposeIterator()); } Now you can add a `mulitiply()` method to `Matrix` that calculates the values of a new matrix, creates it, and hands it back. There's another trick you can use if you know you'll be working with sparse matrices. (A sparse matrix is one that is very large, but almost all elements are zero.) To do this, create a class that represents a location in the matrix, and then hash non-zero elements at specified locations: public class SparseMatrix { private final int numRows; private final int numColumns; private final Map&lt;Coordinate, Integer&gt; elements; // use same builder strategy as above public static final class Coordinate { private final int x; private final int y; Coordinate(int x, int y) { this.x = x; this.y = y; } public int x() { return x; } public int y() { return y; } } public static Coordinate coord(int x, int y) { return new Coordinate(x, y); } } 
&gt; Hmm, there is Function, Consumer, and Predicate for the same. The point is not that the names can't be explained somehow when staring long enough at them, but that they manage to do worse than C#, without much need. C# would have neither `Predicate` nor `Action` if they had that choice again. They have it for legacy reasons. `Predicate` predates C# lambdas by years and `Action` solely exists, because C# is missing a type for `void`. &gt; Void will reserve space on the stack, whereas void won't... Oracle has one of the most sophisticated VMs on this planet, they shouldn't sacrifice conceptual clarity over “it is 5 minutes more work for us”. &gt; Looks to me precisely what Scala did. The difference is that in Scala it is a mere implementation detail. They could switch to a different approach, do more or less specialization, use reified generics on platforms which supported that or even stop using them completely (which is pretty much what the closure elimination of the new experimental optimizer/backend does), and 90% users of the language wouldn't even realize. What Oracle did instead with this excessive name-invention stuff and all the senseless specialization business is that users of the language have to care about implementation details now, which they should absolutely not have to. Additionally, there will a large propagation of third-party add-on libraries which will all be incompatible with each other. Scala was able to deal with all of these issues and can still run on Java 5. Oracle never supported the compilation of Java sources to older runtimes AND controls the virtual machine spec AND employs the developers of the most important JVM implementation, and still they didn't manage to implement a decent solution? I wonder when PHP people will start laughing at Java ... there is just no excuse. &gt; Once Java 8 is out, this library here will be very useful: ... One of the authors told me a long time ago that this thing is an elaborate joke. Go figure. &gt; I was trying to get that imbecile decision out of their heads, about adding a mandatory yet useless "default" keyword to denote extension methods: &gt; why option 3 is not an option Hahaha. I read that. It's one of Brian Goetz's oldest tricks to do “polls”/“surveys” and conveniently “forget” to list promising alternatives, offering different mediocre options instead so that his choice always wins. He does that all the time. And if that still doesn't work, he just decides to exclude people until he gets the result he wants. Either he excludes the “external contributors”, because they are soooooo completely elitist and ignorant about what Java-Joe really wants (only Oracle knows that!!!) or he includes his own colleagues at Oracle, because ... no idea. Especially impressive is what happens when the whole mailing list disagrees with him: Just create a new one, don't subscribe any of the original people to it, push changes and then act surprised when people are pissed. I guess knowing all the tricks of skilled politicians is necessary for being a developer at Oracle these days.
Oracle gets cash for this. 3000 signatures are not money. 
Hey! Everyone who wants this to happen, pledge to send $10 via PayPal to Oracle (if they have a PayPal account). That would get it to happen.
$30,000 is a rounding error to these guys. It's literally less than a *millionth* of their 2012 revenue ([$37.12 billion](http://en.wikipedia.org/wiki/Oracle_Corporation)).
I would sign, but change.org is being screwy with javascript :/
They are either referring to testing (unit, integration, or functional) where a developer makes assertions as to what the code should or should not be doing. This is not a new concept either in testing, Java, or programming in general. Assertions can also be used for testing pre-conditions and post-conditions of exposed code to make sure other developers are using the given code in the way the original author intended it to be used. In both cases, they are forms of validation.
I'm just going to leave [this](http://www.reddit.com/r/AdviceAnimals/comments/180hoz/damnit_java/) here.
I guess a better question then would be what's a good way to explore the class library? Choose at random and play with it?
Hello. I work at [Ask.com](http://www.ask.com) though not in the toolbar department. We have directions for [removing the toolbar](http://help.ask.com/link/portal/30015/30018/Article/1/How-do-I-remove-the-Ask-com-Toolbar). I hope this is helpful.
The language doesn't matter, the JVM and libraries matter. Python has nice libraries for data processing and text mining. PHP has great libraries for CMS (it's called Wordpress). C++ has great libraries for Finance. Java has many, many excellent libraries for many things. In particular I use it for data mining and business intelligence. If you are building rinky-dink sites, it doesn't matter. Use VBScript if you want. If you are building industrial-strength software, the libraries matter.
btw, it's your [moral obligation as a software engineer](http://www.acm.org/about/se-code) to not work for a company like that.
I believe your semicolons on your if statements should not be there.
that took care of the lower "else"s syntax but not the tops. weird. Thanks for the help though. 
Yup. And I recommend to OP right sidebar - [Java Help](http://www.reddit.com/r/javahelp)
My apologies!
How do you know he's even a developer? While it would be a noble gesture, most people don't have the financial luxury to quit their job over moral qualms. I'm not sure why he's being downvoted. He linked to some instructions to remove the toolbar. Are the instructions not correct?
No problem! Good luck with your project.
your if else logic needs to be within a method.. plus, you need to get rid of semi colons after if conditions.. and always use {} for if else blocks.. 
What error is shown?
Maybe because there is no main() method?
Ah yes. That would be it. Can't believe I didn't catch that. Been staring at code too long today. OP: You need your code in a method inside the class.
This is nothing. You people will not stop using java. If you don't want the Ask Toolbar, uninstall it. Probly takes just as long as signing the petition 
For a visual example of what the person above me means: if (x==1) { y = 2; } else if (x==2) { y = 3; } else if (x==3) { y = 4; } You only want to use semi colons when its the end of things such as an assignments and use brackets when encasing statements (loops, if/else, try/catch, etc).
As of now the two should be equivalent for security. However because 6 is no longer supported any new issues will not be fixed. I'd highly recommend you at least make your app compatible with Java 7 because it's only a matter of time till it has to be. Your app can still be compatible with Java 6 though. You don't have to use the new Java 7 features
I don't understand what the deal is with the toolbar anyway. Can't you simply click the option not to install it?
I dunno man, I mean you don't have a moral objection to it, it's fine. But maybe you should.
I would encourage you to give C# a spin. It fills the same role as Java, but has some really neat language features that make it more fun to write.
How great will it be in five years? Oracle could kill java by trying to squeeze revenue from it, and doing an Adobe like job of fixing security problems.
It's more to show, in a concise form, what Oracle's users want from it. Obviously nobody thought that by reaching 30,000 signers or whatever the limit was, that it would force Oracle to remove the Ask Toolbar. I'm pretty sure that everyone who signed it thought that it was just a way of conveying their thoughts on the matter to Oracle, that's what I thought when I signed it at least. But it wasn't really a big deal, it was just something to uninstall when I updated Java. Still though, it made me have to close my Chrome browser which was slightly annoying to me.
And get to the site using the ask toolbar!
Also, delete the system32 folder. Isn't java pretty much essential for most games?
Why, when Java 7 is out, would you be running Java 6?
Sounds like you need to look into the concept of Objects.
Up to 8,738 now. Only about 242K votes to go. 
&gt; I can program pretty well, ...but you don't know what a constructor is? Or polymorphism, one of the three pillars of OO (the other two being encapsulation and inheritance)? I'm not trying to be mean here, but you need a bit of a reality check. This is basic stuff for Java. If you don't know these things, you're not ready to hold yourself out for any kind of job unless that job includes a *lot* of on the job training.
Windows Forms works fine on Mono. The only thing Mono lacks, to my recollection, are things like WPF.
Mono is at version 2.10.8. It supports .NET features up to .NET 4.5: http://www.mono-project.com/Compatibility It has two or three features that are unavailable, but the full power of the language and 99.9% of the .NET framework is available. Do a bit of research before calling people liars :P 
IMO the giant issue with benchmarks such as that is that they are useless. That isn't to say Java is slow- not at all. Just that there is no way to know if a given implementation in Language A is really as fast as you can possibly implement that algorithm in Language A; and from what I can tell, that site doesn't actually provide the implementations, so they cannot be independently verified, either. (For all we know, the Java implementation could be made even faster). My mantra has always been, if you are choosing a language for performance reasons, you don't have your priorities right.
well, considering that from a language perspective C# is in many ways and with few exceptions a superset of Java, you just said Java sucks too. So, good job. 
&gt; I know what a constructor does, and how it affects the program, I just didn't know how to define it. That sounds contradictory to me. Besides that you could pick up any book on the Java Language and read the index. If you know what all the terms mean you're golden. It's also kind of hard to give advice since we don't know what your "level of expertise" is. However, you could start out with all the key principles of OOP and try to explain yourself how this works in Java (e.g. abstract classes, interfaces, access modifiers, packaging). You could also look into the list of language keywords and see if you can explain them all. Good luck on your interview!
First of all: please post in [r/javahelp](http://www.reddit.com/r/javahelp/) next time. Second of all: judging form the description of your assignment you're supposed to build upon other assignments you did before. I assume there's probably some basic geometry class that you're supposed to extend for implementing the shape, square and circle classes. To give you some direction, your *Square* class could look like this: public class Square extends SomeGeometryClass { private int x = 0; private int y = 0; private int widht = 0; private int height = 0; public Square(int x, int y, int width, int height) { this.x = x; this.y = y; this.width = widht; this.height = height; } public int getX() { return this.x; } public int getY() { return this.y; } public int getWidth() { return this.width; } public int getHeight() { return this.height; } public void move(int xOffset, int yOffset) { // code goes here } // other method implementations... } Hope that helps!
What is this? A profit for ants? - Oracle
That's the Safari extension you're talking about.
Have you tried to compile anything yet? Because maybe there are still some settings wrong, that won't let you use the latest update. To check it specifically, open up Terminal and enter the following: * cd /Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/bin * ./java -version If this still shows the right version than I think you're okay.
Thanks, this helps a lot, I'll do that.
Nah. C# has a lot of garbage dangerous features that were left out of Java on purpose. Like partial classes, structs, operator overloading etc..
Mono is slower than Javascript and I can never sell this to a client. (and 99% is LOL) It's a total waste of time but you go ahead and keep apologizing. 
In fact here this can be a valid class, the second set of brackets just act as an initialization block, which gets called when the class is created. So public class Test {{ System.out.println("prints"); }} is valid and gets called whenever an instance of Test is created. reference http://stackoverflow.com/questions/2420389/static-initialization-blocks
Except that the Debian Shootout allows people to submit better implementations if they find them and that then becomes the implementation which ranks higher in the benchmark.
Head First Java. I'm not saying anything else.
Thanks, as someone who is not a dev myself it can be hard to tell if a requirement is crap or not, and they are not always written by people who know what they are doing. Appreciate the response 
you have a typo. look at lines num1=enter.getWeight(); num2=enter.getWeight(); 
Thanks fixed it!
Thanks!
If you google "java bug 7070134", the first result is this: http://www.oracle.com/technetwork/java/javase/7u1-relnotes-507962.html , which shows that the bug was fixed in 7u1. It's not clear to me why it's not accessible through the bugs database, but it's probably a very stupid Oracle reason.
double height, weight; Near the top of the class. Before the method.
Well, I get what you're saying, but it's not really cogent for entering a workplace. Here's why: most of what we programmers do is communicate. We communicate with business people, other programmers, etc. We need language to do that, and language is based on the words and their definitions. In other words, knowing how to code in Java if someone hands you a pristine set of requirements is great, and a prerequisite to getting a job, but it's not even close to the only one. You have to be able to talk to the folks that interview you and know what they're saying. The jargon is a hugely important part of that. On the other hand, you'll find that knowing what things do and knowing what they are in programming is strongly related. If you know that a constructor is responsible for initializing the state of an instance, then you actually already do know what that thing is. And it's impossible to use one properly if you don't know this, so I'm guessing you do know what a constructor is. :-)
Without any code it's pretty hard to see what scenario this is, but you could use the instanceof keyword to find out if it's an integer or a double then return the response required.
Yeah, I did some googling which is how i found the bug ID in the first place -- I can find evidence that the bug was reported, and that they used to have it in their bug database. I can't find a test case or any details about it, other than that it affected a specific kind of loop where loop variables are modified.
That *don't reinvent the wheel* thang.
Not "Debian", not "shootout" -- when you don't read the website name correctly, we should question whether you read the website content correctly ;-) 
This has already been solved, but I think this shows the importance of descriptive variable names when it comes to debugging and maintainability. This defect would be less likely to missed if you named your variables double weight and double height instead of num1 and num2. That and code comments. 
I am having some trouble with a assignment, i posted a link to a post i made on stackoverflow earlier without succes. please respont here or in that post. 
So if the resulting number has only zeros post decimal, you want to display as an int, otherwise a double? I can think of a few ways to do this, for example comparing the double result to a double cast of an int cast of the result. Or comparing the double result to the floor of itself. I can think of other methods too -- be creative!
You probably want to maintain the calculation in a consistent way and return the result in a consistent way. The only difference is for the display where you should deal with significant digits according to the actual result.
I've read parts of this book, it's allright: http://www.amazon.com/Apache-Tomcat-Essentials-Tanuj-Khare/dp/1849516626/ref=pd_sim_b_4 Also: http://www.tomcatexpert.com/
checkout Regular Expressions.
This should be what you want: private void add(Double a, Double b) { Double result = a + b; if ((int) (result) == result) System.out.println("" + (int)(result) ); else System.out.println("" + result); } String.Format might be a method you want to look into as well.
Most likely it's been marked as a security issue - and so it will not have any public visibility. Can you reproduce the problem using 7u13? If so, file a bug with Oracle support.
I'd reccommend against using comments. A combination of small functions that do only one thing, and good naming conventions makes them all but obsolete.
&gt; you were being an ass Not at all. I'm not saying there's anything wrong with OP. There's a whole host of different reasons people don't learn things, many of them not at all to do with them. I wasn't making a value judgment—maybe I should monitor my tone more closely in the future—but I was saying that asking for money to do a job is where the rubber meets the road. If I'm interviewing you for a position, I don't much care *why* you didn't learn a thing, just whether you know it or not. And one step further: in a role that requires you to learn new things all the time (like software developer), if I'm interviewing you I probably don't much care *exactly* what you know and what you don't know. I'm looking for accurate self-assessment above all. If you don't know something, and you know you don't know it, and you know how to find it out in a fairly short period of time, I'm likely to weigh that as a very, very small negative. The kind of thing that can be more than balanced by a winning personality (seriously, I'm not being facetious here...I like to work with cool people). However, if you come in to my interview saying you can program pretty well, but you're not solid on very basic language concepts, this tells me that you do not have an accurate idea of where you are, and you will not be able to assimilate new information quickly because you're lacking fundamentals. The problem is, in my job I'm kind of trying to make money over here and I want to surround myself with people doing the same. It's nothing personal against the candidate, and it's not a value judgment on what kind of person they are or anything like that. It's just, come back when you're ready to help us all make boatloads of cash. (If I'm not being funny, what I'm really about is making users' lives better. Come back when you can actually help us make people's lives easier is what I'm really saying.) You may have heard about the cult of XP and intense team-oriented development that's swept Silicon Valley over the last 10 years or so. For me, all of this process boils down to one thing: the death of the genius developer. There's no doubt that there are people out there that can do the work of 10 others in the same amount of time. I'm not saying they don't exist. I'm saying that none of them think they're that, so if you do, you're not one. The job we do is not about us and how great we are. It's about the user and how much we can do for them. In the 80s you could get away with this attitude, and it's why we had to deal with horrible software like this - http://hallofshame.gp.co.at/clarity.htm - **What?! If you're not a genius, that's your problem!** We can't get away with this kind of bad behavior anymore, and rightly so. But think about the kind of person that judges their work not by what they know, or what clever design trick they came up with, but instead by *how many users' lives they've improved, and by how much*. This is the kind of person who's not going to say something like, "I can program pretty well." They're going to say stuff like, "There's a lot I don't know and I haven't done much to improve anyone's life yet. Please give me the chance to make an impact." http://www.youtube.com/watch?v=0JW1tJLRtsk Again, I don't say any of this stuff as a way of needling OP, even though it might sound like it. I don't know if the OP's words expressed actual feelings in the purest form, I'm pretty sure not, actually. :-) (Incidentally, if you claim to know OOP, and you don't know what polymorphism is, you don't know OO. Being able to treat a class as any type in its hierarchy is absolutely key to the whole thing.)
That's true when you're working on a production codebase, but when you're learning the language or teaching others, comments are invaluable.
&gt;until
If you have a valid support contract, they can verify for you where the bug has been fixed. Most likely it's fixed in Java 7, and has not been backported to Java 6. Java 6 is about to reach End Of Life, so if you want it fixed in Java 6, you will need a support contract. Otherwise, use Java 7u13 ;) 
&gt; all but obsolete. You got this part right. They are not obsolete. The right comment, in the right place can make a world of difference. Writing that comment is HARD, but well worth it. Choose quality over quantity and don't force anyone to write comments, but always recommend they consider it.
&gt; comments are invaluable I'd say *can be* invaluable. I've dealt with a lot of students' code, and oftentimes their comments add to the confusion of their code. I can definitely see how they'd be useful in teaching someone. Comments explaining syntax and so forth within the code can be handy, and is something I do myself for people I'm teaching. I'm a bit disappointed that my above post is gettin' downvoted. I think self-documenting code (with minimal or no comments) is a pretty well-accepted practice. In this example, does the following comment really add something? Scanner in = new Scanner(System.in); //Creates a Scanner object I would say it only serves to bloat the code. Also, if someone refactors `Scanner` to be named `OtherThinggy`, they might not update the comment, which may create confusion in the future.
I see I'll mess around with this thanks 
In what way is Swing's future nebulous? (Any links to read?)
No I got that. It was worth ignoring though because whether or not you remembered what polymorphism was, I was not being an ass. :-)
Never EVER assume you can program pretty well. If you have 2 months experience, 2 years experience, 20 years experience. Every year you get you look back at your younger self and think "What an idiot younger me was". Anyway good things to know for interviews: Inheritance Polymorphism Abstraction Encapsulation (These are the four pillars of OO, some people say there are three pillars, that's a separate discussion) Objects (Can you clearly explain the difference between a class and an object) Is Java pass by value or pass by reference? What is the difference between the stack and the heap? design Patterns (oodesign.com is an amazing reference for this) Threading, collections. Checked/unchecked exceptions What kind of exceptions should you not catch why? Data structures are a good topic to know. Also version control is also handy to know. Put some of your code up for review if you can, Don't be disheartened if people tear you a new one. 
Java is popular because unlike COBOL which it pretty much replaced. Java doesn't need huge expensive mainframes to run; it can run on commidity server hardware arcoss multiple platforms. This is advantageous for many reasons, not the least of which, is the ability for the hardware to be multipurposed. I'm not implying that Java directly replaced every COBOL application out there, many went with .Net instead, there were/are quite a few options for organizations that want to get away from Mainframe + COBOL. They can even keep mainframe and get away from COBOL since the JVM will run on the mainframe platform as well (in many cases). The JVM is the key for Java's success because it decouples Java from the hardware. As a language, Java has some distinct benefits for intenstive back end heavy lifting type work, mainly a large collection of free and open source libraries to tackle just about any business critial problem that can be thought of. There are other languages which are much easier to work with, that now run on the JVM. But Java is still the most accepted and fully featured. In terms of backend work, Scala is running a close second on the JVM from what I understand. I learned Java because it was what my school was pushing at the time, but I also have a real interest in my craft so I also know, well enough, the major languages out there (.Net, C(++), Ruby, PHP etc.) Programming languages are a religion, and they have fanboi's like every other technology. Not one language is a swiss army knife that will do everything the best way possible. If you want to be a really good engineer, you should know at least what the strengths and weaknesses of each language are, maybe not indepth, but enough to know how to pick the correct technology for a project that will scale and have the best possible chance to meet future needs of the application. **TL;DR** Programming languages are a religion, you would do well to understand the strengths and weaknesses of each and choose the right tool for your particualr task. **Edit** Fixed the worlds longest run on sentence and some typos. **2:** more typos (I know Java, but not English apparently) and remvoed snark/douchy remark. 
Google it. I know you can.
Holy shit!
You mean like [commons-daemon](http://commons.apache.org/daemon/)?
I guess you have no programs and measurements to show us.
All kinds of things *used to be* but stopped being years ago. Back in 2004 *the measurements were made on Debian*, that hasn't been true for 5 years. In fact, you can still navigate using the old address of [sun.com](http://sun.com) -- so what?!
Okay, you've notified the author that the code is bad. How about some suggestions on making it better now? 
(Just FYI, you're responding to the guy who runs the [Computer Language Benchmarks Game](http://benchmarksgame.alioth.debian.org/), so I'm pretty sure he's got a handle on how fast things are relative to each other)
* Which line is throwing the NPE? * Do you know about the "final" keyword to make variables immutable? I think it's helpful to use it as much as possible, particularly when you're you think a variable is some value that it shouldn't be (e.g. a variable is null when it shouldn't be), as it'll help to eliminate the possibility of a variable being null, or else make it obvious where it's being set to null. * You should try to reduce the scope of variables as much as possible. E.g. splitRule is only used in the constructor, so you should have it be a local variable there, rather than a field on the class. * Your line 55, where you invoke generate and then throw away the return value, is probably wrong. If you're trying to learn recursion, why not do an easier example than EBNFs? E.g. Fibonacci is a classic pedagogical example.
I would use the cse 143 message boards instead of posting here. Professor Martin would be very disappointed if someone sent her a link here.
LOL. 
Swing was deprecated in Java 7. Replaced with JavaFX. This was under Sun's auspices, though, so I do not know if maybe Oracle reinstated it. Swing is still my fav, with netbean's Matisse designer, though. 
Please remove this code as well.
The nature of the site itself tends to mean that submissions are made in languages that are known for their Open Source community, as well as having a heavy, anti-proprietary bias (C#, Delphi, F#, etc)... Also is the current source available for these benchmarks, since I cannot seem to find the entrants :/
Well, the biggest names aren't always the best. What about Microsoft Windows vs Linux? But yes, I think they'll survive, definitely. My hopes are that more and more people will discover this gem.
Don't be a dick, explain why.
That site is not loading for me.
ditto, isup.me reports it down too.
meanwhile there's this: [Java Enums can Implement Interfaces](http://www.selikoff.net/2011/06/15/java-enums-can-implement-interfaces/)
Keep apologizing. 
This is very neat indeed, but you can do better with Java8 and lambda expression (for interface with one method). Not sure if it is as efficient though, as Enum are inlined pretty well by the compiler... 
OP is basically [this](http://stackoverflow.com/a/2902471/530513) with an interface.
See Apache daemon
In Java8 we can use interface with default, common implementation: interface IntegerEnum { public default int intValue() { return Enum.class.cast(this).ordinal() + 1; } } enum Numbers implements IntegerEnum { ONE, TWO, THREE } assert Numbers.ONE.intValue() == 1; This need premature optimization ASAP: builder = new StringBuilder(builder.substring(0, builder.length() - 2)); builder.append(");"); return builder.toString();
The obvious solution would be to make a modal dialog with a progress indicator. And a cancel button. Because not being able to cancel out of a long operation is really crappy UI design. http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html http://docs.oracle.com/javase/tutorial/uiswing/components/progress.html 
Express your opinion all you want, any way you want. Just don't expect to change the world just because you typed your name in on a website. Change requires putting pressure on the ones that make the decisions. Online petitions are too easy to ignore. 
Why can't you just iterate over every component in your main panel(s) and disable these? You won't have to change anything unless you add another top-level panel and it can be done in a few lines of code. 
Yes, the problem goes away with -Xint. So far, I've only duplicated it with JDK 1.6.0_31. It does not occur in JDK 1.7.0_03. I saw the issue including primitives being modified during a loop, when using either JDK 7, or when using certain compiler directives to improve performance. This issue doesn't require either of these, so I think it's something different. But, it's hard to tell.
1. Create a dialog with a progress bar, set to indeterminate if you don't know how long the task will take. 2. Disable only the buttons and input items with the JPanel. no need to disable the panel itself. I maintain a list of buttons for each panel and write pair of functions `LockInput()` and `UnLockInput`. 
There is [JLayer](http://docs.oracle.com/javase/tutorial/uiswing/misc/jlayer.html) in Java 7. You can filter keyboard/mouse events and invoke "event.consume()" to block user input during long operation.
&gt; The single feature that killed Smalltalk [releasing Java over the Internet for free](http://web.archive.org/web/20080512075336/http://java.sun.com/features/1998/05/birthday.html)
This is also expected behavior for an application that users are used to. It's also easy to do.
&gt; If this person feels so strongly about Mono, how can we even be sure the Mono Implementations are truly unbiassed? Looks at the code? Run them yourself? &gt; How do we know people haven't already tried to submit C# implementations that fix the glaring omissions from the existing one that use Arrays in a tight loop but almost purposely leave bounds checking on? You could try improving the C# implementation and rerunning it. If it's faster, you could talk to him and ask him to swap in the faster version. You seem to think he's super biased toward some languages or implementations, but there's a lot of stuff on the page about how none of the stuff there is definitive. All of the benchmarks have text like this: &gt; These are not the only programming languages. These are not the only compilers and interpreters. These are not the only programs that could be written. These are not the only tasks that could be solved. These are just 10 tiny examples. [And there's an entire page about not jumping to conclusions](http://benchmarksgame.alioth.debian.org/dont-jump-to-conclusions.php). He even states: &gt; No attempt has been made to assess whether programs contributed for a particular language were consistently the work of more highly skilled programmers than programs contributed for other languages. The source code comments show that some programs were contributed by core developers of the programming language implementation - world renowned expert programmers. It's fair to say that other programs were contributed by programmers who are less skilled. &gt; No attempt has been made to assess whether programs contributed for a particular language were consistently worked on longer and harder than programs contributed for other languages. As a very crude indication of how that may vary, look at which languages have had more programs contributed and which have had fewer programs contributed (than an even split). If you think you can do better in a given benchmark, just download the examples and run it on your own machine against your own code. 
I definitely have to agree, it's very annoying to read poorly formatted code.
You said that you filed an issue. Can you PM me with the bug number?
After submitting my bug report, I got the boilerplate "Oracle will contact you regarding your issue, etc etc" but I haven't received any correspondence since Wednesday. They haven't assigned it a bug number, or posted it anywhere that I can see.
*sigh* Just moved our tomcat application servers from an old 5 to 6, 7 was too scary and bleeding edge apparently. At least I got a new tomcat out of it.
I've never posted code here before. For a reference, how should it look when properly tabbed?
Um.. well.. I guess that does work.. but why? You don't need no interface. At least for the example and lots of similar ones. public enum Operator { SUM { @Override public int calculate(int firstOperand, int secondOperand) { return firstOperand + secondOperand; } }, SUBTRACT { @Override public int calculate(int firstOperand, int secondOperand) { return firstOperand - secondOperand; } }; public abstract int calculate(int firstOperand, int secondOperand); } 
Is it just me or is did this Ted Neward guy create a strawman of "craftsmanship" and then write a poetic piece to tear it down? House painters can be (and should be) craftsmen too. People who actually care about doing a good job, using good tools, measuring and testing how they lay down paint and even improving as a house painter.once. Measure twice, cut once! Software could take a lesson from the good house painters and blue-collar laborers out there.
This is as easy as selecting one's code in Eclipse and hitting `&lt;TAB&gt;`. With IDEs that make things like this that simple, there's really no excuse.
Your first reply (before your edited it to be more obnoxious) was funny. This just deserves a 'fuck you'. No-one was born knowing how to code.
Exactly my issue with it. I'd it was a one-time thing in installation that would be fine, but it is really a pain in the ass when they automatically try to bundle it in with each and every update. 
Okay; I've sent you a private note.
There's a "formatting help" link under every input field when posting... which boggles my mind even more as many *many* people seem to ignore it
Hmm, so far I have been using a progress bar at the bottom of the window (with a little cancel icon next to it). I find a dialog popping up interrupts the user experience too much, so unfortunately this solution is out of the question for me. Thanks anyways!
Are you sure that this is expected behavior? I can't think of any application right now where the "open file" operation pops up a progress bar in a modal dialog.
LOL if you think that's the only reason you're delusional.
This works for disabling them, but not for re-enabling them. Not every control should be enabled. Some were disabled before and should stay like that. I could try to remember the "previous state" and restore it afterwards. If I can't find another solution, I think I will do it that way.
This sounds like the kind of thing I want to do! Thanks a lot! I'll check it out!
As an aside, does anyone else find this markup incredibly tedious to enter? Really? Four spaces at the beginning of every line, and no ability to use the TAB key? That sucks and makes copy/paste impossible without having to hit the enter key at least a couple hundred times carefully interspersed with dozens of DOWN-ARROW and HOME key presses. I'd much prefer to use the "noformat" tags as in the style of Jira and Confluence.
I've done it and the biggest problem was always getting through the firewall. The network guys at least in my instance did not like us running these types of connections into the production network. There was some issue where the server would talk back on a different port than the original connection and it was random. I don't recall if that was a bug that Oracle fixed, or if it were by design. We ended up just installing visualvm on the server that housed the jvm we wanted to watch and used xwindows to connect to the remote instance of visualvm. And now that I've ranted about this too long I now recall that this was uniquely a visualvm problem, not J-Console. J-Console should work fine even if you have to tunnel the required ports through the standard SSH port, which is what I would usually do rather than involving server/network ops. I'm leaving the bit about visual VM, because it was a month long nightmare that I faced, and if you decide you want to go that route or need to deal with multicast for some other reason. 
I've seen Ted speak about a half dozen times at NFJS over a couple of years. It seems to me that he uses the technique you describe, as a way of highlighting both sides of an issue. Playing devils advocate if you will. I don't find it very effective. I think it clicks with some people, but not others. 
For starters - your method that is being written is taking in one parameter which is a double. I would set that parameter named to cost. Then set double variables to the 2% minValue (.02), balance, 19.9% interest value (.199), and a counter for months. I usually initialize that as int count = 0; each time you run the calculation count++.
http://hg.openjdk.java.net/lambda/lambda/jdk/file/tip http://hg.openjdk.java.net/lambda/lambda/jdk/file/tip/src/share/classes/java/util/HashSet.java
See Infenwe's response - http://www.reddit.com/r/java/comments/18507o/meta_if_you_cant_be_bothered_to_format_the_code/c8btm44
That's a really confusing question.. Anyhow, firstly prompt an input, for example, 1000.00, so calculate the interest and minimum payment for first 3 months. First month: 1000.00 x 0.02=20, first month didn't pay in full, then first month interest is 1000.00 x 0.19=190, total is 1190 at the start of second month. Second month minimum payment will be 1190 x 0.02=23.8, second month didn't pay in full, then second month interest is 1190 x 0.19=226.1, total is 1446.1 at the start if third month. Third month minimum payment will be 1446.1 x 0.02=28.922(round to 2 decimal points)=28.92, third month pay in full, so 1446.1 - 28.92=1417.18, then third month interest is 1417.18 x 0.19=269.2642=269.26, total is 1686.44. That's my understanding of your question.
I usually use some version of this. I don't know if there's a better way or not though. The big HashMap contains every integer keycode for Java. When a key is pressed the value corresponding to the integer key is set to true, and false when released. To do checking in your game loop you call keyPressed. for example you could call if (keyPressed(KeyEvent.VK_UP)) //Do something now Here is a fragment of my total generic class. public class GenericWindow extends JFrame implements KeyListener { public GenericWindow() { protected HashMap&lt;Integer, Boolean&gt; keysPressed = new HashMap&lt;Integer, Boolean&gt;(); int[] nums = { 65535, 400, 402, 2, 4, 3, 1, 0, 401, 402, 400, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 30, 107, 65481, 256, 240, 18, 65406, 150, 151, 512, 66, 192, 92, 8, 161, 162, 67, 3, 20, 514, 12, 93, 258, 513, 44, 65312, 17, 28, 65485, 65489, 68, 134, 136, 129, 133, 138, 139, 130, 135, 137, 128, 141, 132, 140, 143, 131, 142, 110, 127, 111, 515, 40, 69, 35, 10, 61, 27, 516, 517, 70, 112, 121, 122, 123, 61440, 61441, 61442, 61443, 61444, 61445, 61446, 113, 61447, 61448, 61449, 61450, 61451, 114, 115, 116, 117, 118, 119, 120, 24, 65488, 243, 71, 160, 72, 244, 156, 242, 36, 73, 263, 155, 518, 74, 260, 259, 261, 75, 21, 262, 25, 241, 225, 226, 227, 224, 76, 37, 519, 153, 77, 157, 45, 31, 106, 78, 29, 144, 520, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 79, 91, 80, 34, 33, 65487, 19, 46, 521, 257, 154, 65482, 81, 222, 152, 82, 39, 522, 245, 83, 145, 59, 108, 108, 16, 47, 32, 65480, 109, 84, 9, 85, 0, 523, 65483, 38, 86, 87, 88, 89, 90 }; for (int i : nums) keysPressed.put(i, false); } public void keyPressed(KeyEvent e) { if (arg0.getKeyCode() == KeyEvent.VK_ESCAPE) System.exit(0); keysPressed.remove(e.getKeyCode()); keysPressed.put(e.getKeyCode(), true); } public void keyReleased(KeyEvent e) { keysPressed.remove(e.getKeyCode()); keysPressed.put(e.getKeyCode(), false); } public boolean keyPressed(int keycode) { return keysPressed.get(keycode); } }
You're welcome! The program will only requires one for-loop only if I'm not mistaken! :)
Yup. Prompt input &gt; paymentVarible For int i = 0; i &amp;lt; 3; i++ minPayment = paymentVariable x 0.02; if(i==2) paymentVariable -= minPayment; paymentVariable x= 1.19; Print out minPayment and paymentVariable; End-loop You get the rough idea, remember to round them properly. 
It's normal for huge donks that require a lot of processing. Like 100 mb ASCII files that require a lot of if branches for proper loading.
Now the trick is understanding what it is saying xD
Ops, forgot it's your first java programming class! Eihihihi. Forget about the for-loop, you will reach there one day.
Also, does the 19.9% interest rate stand for monthly interest or annual interest? At which point you would need to calculate the monthly interest rather than annual interest (19.9% / 12 = 1.65833% = 0.016583). So you'd have something that would be: 1. input value 2. compute month 1 minimum payment 3. compute month 1 interest (add to month 2?) 4. display 5. subtract month 1 minimum payment 6. add month 1 interest 7. compute month 2 minimum payment 8. compute month 2 interest (add to month 3?) 9. display 10. ... I'm pretty sure the interest rate is annual, because otherwise this credit line is shit, and it just makes more sense that the minimum payment (2%) should be more than what is being added to the card in interest alone (1.65%), but ask your professor for clarification. When you have something written up, post your code. Style matters too, as one of my professors taught me. For the two decimal places, look up the Javadoc for [DecimalFormat](http://docs.oracle.com/javase/6/docs/api/java/text/DecimalFormat.html).
This is a pet project that I have been working on to learn Git and Maven. If you find the code interesting or useful, feel free to contribute or review. I'd appreciate any exposure it can get!
If movieList is a TreeMap, it must accept key-value pairs, not just values as a List would.
Why don't you just make it so that they click on the canvas or click on the button? Why do you need a huge hashmap of keys?
What about something like this? http://quarkphysics.ca/ICS4U1-2011/unit4/keyListener.htm
or have a look at this: http://quarkphysics.ca/ICS4U1-2011/unit5/Minesweeper1.java 
Go toolchain dependencies only works with open source code in known repositories. For real software development you're on your own.
go import statements hardcode a source repo for external libs, java import only contains the package name, so any solution is likely to be a bit more limited. On linux you can do something like the following for projects without external dependencies: find ./ -name *.java &gt; sources.txt &amp;&amp; javac @sources.txt Since java files do not contain a location to fetch libraries you have to download every jar and add it with -classpath="...". If all external dependencies already are in a single directory it should be quite simple to extend the above script to collect all jar files before calling javac. 
You can try sbt. Make sure your source is under src/main/java, open up a sbt shell, type compile, set up the main class and just type run (or package to build a jar). 
That's not quite true, it will pick up dependencies depending on where your GOPATH/pkg is pointing to and will work with binaries underneath that- although admittedly I think you have to use a workaround to make this work properly - but compiling against closed source binaries isn't impossible AFAIK.
[Maven](http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html). There is a configuration file (pom.xml) which is generated and you will have to edit it if you add external library dependencies: mvn archtype:generate That will list all the different kinds of projects you can create. Pick #77 for a simple Java project. Then answer some questions about the name of your project. Once that process is done, to build the project: mvn package If you use any third party library outside of the Java SDK, you will have to edit the pom.xml to include those dependencies. Fortunately, most IDEs make adding dependencies to the pom.xml automatically pretty easy.
Maybe your current working directory is not in the class path. Try "javap -classpath . -c Main".
This looks pretty neat. I had a quick look through the code samples listed. I think that the code style looks pretty Windows/C#-centric, even in Java-land. In particular, how the methods are "WeatherAPI.GetWeather" rather than CamelCase, as is customary in Java: "WeatherApi.getWeather" I know style issues are usually not something anyone pays much attention to, but my personal philosophy is more of a "when in Rome..." kind of thought. If you're using Java (or your API is available in Java), you should try to make it seem familiar to Java developers. Otherwise it seems kind of jarring to use your API from Java-land. Also, in your Java code, what documentation style are you using? It doesn't look like standard Javadoc.
Oh yeah, that's right. Need objectName.put(key, movie); Was thinking TreeSet for some reason last night.
I'm sure the code works (it certainly looks valid from a quick eyeballing), and I've no problem with handling database interaction manually rather than relying on a third part library, however I don't like the article because of the code's smell. All code in the main method is bad enough, but there's such a clean split possible (between reading the data from Excel and writing it to the database) that it's worrying that the code doesn't do this. Sure the post's idea is to show what can be done, but there's no reason not to break things up - it makes the code look more trustworthy, as well as making it a whole lot easier to see which bit of the code's doing what. Then there's things like using a hard-coded value for the file, rather than taking a value from the supplied arguments, and the excessive use of unhelpful comments at the end (four lines of comments for the last four lines of code? Why not just have one comment of "Clean up our resources", something like that). Final thought is that this only covers .xls files - from what I remember of POI, there's a different set of classes used to interact with .xlsx files.
Check monster jobs or others for skill lists mentioned. You can build your own sample apps with Spring or Play framework. But really using an older stack shouldn't make much difference if you understand the fundamentals.
Check this http://stackoverflow.com/questions/286727/java-keylistener-for-jframe-is-being-unresponsive 
Also get up to speed on some Apache or Google packages, Guava and Commons, for a start. Then move on to new areas of interest. Hadoop for example.
&gt;My question is for those managers out there who hire Java devs. What is the best thing I could do outside of work that would convince you that I have the experience and chops required to work with current Java technologies, without reverting to junior developer status and taking a big pay cut. Lie! Hit the ground running.
I have found Koushks on youtube to be very good for this.
You are making it too hard. * Step 1) Learn the technologies. * Step 2) Add technologies to resume. * Step 3) Intelligently discuss technologies during technical interview. List your length of experience with the top level techs (7 years Java SE, 6 years Java EE) and let the tech interview sort out the rest.
http://www.gamedev.net/page/index.html I had the same thoughts you did one slow day 7 years ago. An actual game developer friend of mine sent me to gamedev.net. It has everything you need and some really great advice. That said, I got bored a few weeks later and I went back to doing what I do now - Java web devleopment. Programming games sounds like so much fun, but it's totally the same thing as programming anything else IMO. In some ways, I have more fun not programming games cause there's a lot less math.
Here is a demo of my current implementation: [Menu Test](http://www.youtube.com/watch?v=qcLP1Ptr4TQ). I am using the method for capturing input pointed out by sproket888.
The java code was created from C#, so they comments are likely still in C# format, and likely why some of the naming conventions are correct in Java. Thanks for pointing it out though, I'll put it on the todo list.
I think the [official](http://docs.oracle.com/javase/tutorial/essential/exceptions/) resource is pretty good !
Where are you looking for a job? My company is hiring positions for j2ee devs. 
Don't lie. You will be caught by any company you would want to work for. Best advice is to start some of your own side projects using the tools you want to learn. That combined with your experience should be enough. I'm in a similar situation. I have over 15 yrs jee experience switching to primarily iOS dev work 3 yrs ago. Even though I'm not up on the latest stuff I've still been able to get job offers for java ee by doing exactly what I described. Also java 6 has been end of lifed. Skip to java 7. 
The new JEE 6 is actually pretty good. I'd suggest you learn JEE 6 and make the case that your J2EE experience applies to the newer JEE 6 technologies. You could try pushing current technologies at your current workplace. If you can find some small side project to use JEE 6, you might be able to prove how it is better. You could lead the way to JEE 6 adoption which would make you more valuable at your current company instead of reverting to a junior developer at another company that already has developers with advanced skills with JEE 6 or some other technology that you would have to learn.
This is an excellent point about programming games. I had no idea!
Get into a niche that solves a business problem like ECM or eCommerce. Look at the forrester reports or gartner magic quadrant and learn a platform in the upper right.
Sounds like you are mostly familiar with dynamic languages. It might seem weird why we'd prefer a statically typed language since dynamic languages often seem more concise and easier to get started with. There are lots of arguments about which is better. Personally I'd argue dynamic languages are fine for small projects or projects with lots of dynamic behavior without complex types (web front ends being a common example), but statically typed languages are *usually* better for larger and more complex projects. My reasons being: * The compiler is an extra check for errors. It is an extra step that may seem to slow development, but it helps find lots of simple errors in long running projects and saves time in the long run. The compile check is actually usually faster than having to start your program and reproduce it in the running project. Some will argue you don't need the compiler check if you have good unit tests, but I've yet to see a serious project with a good set of unit tests. Having a compiler reduces the amount of unit tests you need to write because it makes those check automatically. * Easier to read. Not usually an issue on small projects where you are the only developer, but on large project with multiple developers the extra type information can make the code easier to follow. It's more verbose, but the extra type information can often be useful. * Refactoring is easier. Making large sweeping change to the project structure is easier with a statically typed language. Usually IDEs can handle these for you in one or two steps. Speaking of which... * IDE support. Statically typed languages are easier for IDE's to handle. For example, code completion and refactoring support is often better for statically typed languages. Java is the common choice for statically typed languages since it has one of the best cross platform support and one of the best software ecosystems. The amount of open source libraries and developer tools is staggering. You can even chose different languages within the JVM. Groovy adds a dynamically typed language that can interopt with Java code so you can choose dynamic or static typed for the situation. Scala is a statically typed language that infers most type information so that it has conciseness and productivity similar to most dynamic languages. I think Twitter developers put it rather well when they explained their switch from Ruby to Scala. "As our system has grown, a lot of the logic in our Ruby system sort of replicates a type system, either in our unit tests or as validations on models. I think it may just be a property of large systems in dynamic languages, that eventually you end up rewriting your own type system, and you sort of do it badly." [source](http://www.artima.com/scalazine/articles/twitter_on_scala.html) Edit: some typos and formatting.
While I did learn a thing or two from it, It has a total of 2 paragraphs on actually creating one, with no code examples. I need to know how I am supposed to create a class that acts as an exception thrown by another class... I'm not even sure at this point if that makes sense...
You have convinced me to learn Java. Well played.
I poked around for all of 2 minutes so if I'm off base please ignore me. If I were to use this API (and by use, I mean code a new provider implementation), I'd rather have an XML binding implementation like JAXB instead of parsing it 'by hand' with your XMLReader class. Pretty neat all-around though, grats on learning git and maven :)
Ditto what the others are saying....esp. Java EE 6 is not bad. Note that Java EE has learned from Spring (esp. Dependency Injection), and Rails (esp. Convention over Configuration) and without XML configuration, you can now get a lot of capability with short and sweet annotations. You can add complexity (non-convention) by configuring (adding arguments to the annotation and adding XML). One more thing.....in order to not sound outdated.....don't call it J2EE, call it Java EE. The term J2EE lost favor with the associated stench of EJB 2.
WTF are you ranting about? 4 spaces?! STFU! My favorite Java lib of all time, guava, uses 2 spaces as a standard and those guys know a thing or two about development. In short, get bent with your meta rant about 4 spaces being "the only one and true way".
first go here: /r/javagamedev
Thanks I have noticed a massive increase in performance after deleting the system32 folder. It's really nice as a complete idiot with computers to get helpful advice such as this... On the other hand, boo to you for not reading my post. No gaming apart from some occasional web games on this PC. That said though can you give some examples of games that do require java? I wasn't aware of it being commonly required for games. Cannot remember seeing a java installer included with a game ever.
Congrats on using guava. It's awesome, innit? :-) I also use 2 spaces for indent in day to day development. If you read my previous posts in this sub, you'll see I do the same here. But in order to get code to format properly in this sub, you must begin all code lines with 4 spaces, young padawan. I'm not telling you to use 4 spaces in your outside life. I'm telling you that if *you are asking someone for help* on the interp|p3s, maybe it's a good idea to make it easy to help you. This uber-rule goes back to the beginning of Usenet, and for good reason, just like all the common sense rules of web forums. Read the FAQ. Lurk awhile. Learn the ropes. If you mess up, say sorry and fix it. In short - http://www.youtube.com/watch?v=XmlXU4uK5rA
&gt; my instructor does not want us to be using an IDE For writing code, sure, because modern IDEs do so much of the heavy lifting that might prevent you from learning the fundamentals. Your prof is probably fine with you using an IDE or other program that can indent text. But this does raise another q. If your prof doesn't want you using an IDE for this reason, how does he feel about you posting in this sub? *I keed, I keed!* &gt; the OP told me not be sorry, click edit and fix it. Really? Nice intro to this sub. That wasn't the OP. You're the OP of that thread. OP = "original poster". The idiot that told you to click edit and fix it was me. I'm sorry that was a harsh intro to the sub, and you're right, it's not how you should be introduced to it. What should happen is the mods should be more vigilant about catching posts like yours (if there even are mods) and gently asking the poster to follow the rules of the sub. But let's be clear about one thing. You are asking for help. You posted with an admittedly lousy title, you didn't format your code in a sane way, I tried to helpfully let you know why no one was responding to your post, and you are now posting here complaining that no one answered your question. Maybe you can answer a question for me. I have code with a bug in it can youhelpmefinditpublicclass Example{private static void main(String[] args){System.out.println("Eyes glazed over yet?");}} Yea.
I'm not always copying from eclipse. But thanks.
You might catch up on /r/thecherno project for building a game similar to Realm of the Mad God.
Well, one solution would be: always copy code from eclipse. Seriously. It's free. Install it, set up the auto code formatter, paste your pile o' mess in there, ctrl-alt-F (I think that's auto format), then copy paste into your post here. Or do it manually. That's what I do. When I'm coding in a reddit box, I ctrl-C two spaces to my clipboard and just indent two spaces at a time with ctrl-V. Two times at the front of the line gets me into code mode. three gets me nested it's easy no problem at all and fast and I can go as deep as I want quickly and right back out to just four. If you're cutting and pasting from some other program where the code is already written, that editor most likely has a way to indent four spaces easily. If it doesn't, get a better editor. If you're going to be coding a lot, that's kind of an essential thing to have for lots of reasons anyway.
The certification is called the Oracle Certified Professional: Java 7 SE Programmer. Bit of a mouthful in comparison to the SCJP.... 
**Start learning EE 6. Right now**. EE 7 will be out soon, and except for the new JSRs, there isnt a lot of difference between the two. If your employer is looking at exploring migration paths, take the lead and push your manager to let you work on that on company time. After all, those support contracts will run out, and stuff in J2EE 1.4 will also be deprecated or removed in future versions of the spec. If you happen to be in a spot where your employer is merely interested in knowing if the same codebase runs on a EE6 container, it's time to look at other options; EE6 requires different (not vastly different, but still different) programming practices and shoehorning a 1.4 app is all about postphoning the inevitable. If your employers permits this, start a GitHub/BitBucket account. This is not for that 'Hello World' stuff. Punch out quality work here. Just avoid conflict of interest, since you want your future employers to see this work. PM me if you want to discuss more. I know most of this stuff worked for me.
I don't think he's capable of constructive criticism. Nitpicking coding issues instead of reviewing design shows pettiness. On a tangent, he's also probably under the assumption tha the author has posted the link here. I doubt /u/based2 is the author, going by his submission history.
Great advice. If the submitter wants to work on an open source project to gain more skills too, that's great, but if you can learn through books and talk intelligently about said topics, it's just fine.
In my opinion, it's time for people on Windows/Mac to start looking into OpenJDK and IcedTea. 
Honestly, you probably don't even have to learn any technologies to just land a job. You have enough skills to do maintenance work for the rest of your life.
This. A good hiring manager is hiring you, not your resume. Learn the new technologies and blow his socks off during the interview.
&gt; public class Example { &gt; private static void main(String[] args){ &gt; System.out.println("Eyes glazed over yet?"); &gt; } &gt; } This is no good. Here's how it should look: public class Example { private static void main(String[] args){ System.out.println("Eyes glazed over yet?"); } } Every new scope gets an indent of 2 (or 4, the way most people do it, or if you want to be passive aggressive :-) , 8). &gt; passive aggressive **passive aggressive**, *adj.* - denoting or pertaining to a personality type or behavior marked by the expression of negative emotions in passive, indirect ways, as through manipulation or noncooperation. I was not being indirect in this post. The title says: if you do this, I'm not going to help you. Then the content of the post is: if you want my help, don't do this. That's as direct as I know how to make it. This reminds me of one time in high school, this on-again off-again couple had this dramatic breakup at top volume in the hallway during passing period. The girl screamed right in her boyfriend's face, "I hate you! I hope you go outside and get hit by a car! I never want to see you again!!!" As she was storming off, he called after her, "So...what are you trying to say?" &gt; I had stated that I had already gotten it figured out. In fact, it was the only comment on the thread when you posted your link. I find it hard to believe that you didn't see it. If you want to update a post so everyone can see it, edit the original post and put at the bottom: **[UPDATE]** This happened. I often ignore other comments because I'm on lunch break at work and just bang out a reply. &gt; a lot of people just starting out programming will get turned off on it and run the other way. This is fine with me. If someone doesn't love programming enough that they run away at the first sign of adversity, the earlier this happens, the better. When I first started working as a developer professionally, it was in the go-go boom days of Silicon Valley. Everyone and their brother was a programmer, and they still couldn't fill the need. So I ended up working with a lot of English majors who were basically programming dilettantes because it was a good way to make money and someone would pay them a lot of money until they found a "real" programmer (of course, most startups never did). The stuff that went down in those days was crazy as a result. I never want to work with people like that again. It's not good for me, the company, the industry, or the person who ought to be shepherding their career in a different direction instead of wasting time doing something they don't love and they're not good at. &gt; my instructor has told us not to use netbeans Then don't. Again, don't use an IDE to *write the assignment*. But you can use it for posting on reddit if you need a source formatter or an easy way to indent blocks. Then when you're done moving your code into your reddit post, don't save the file. Then format your hard disk, throw your computer out the window, douse it in gasoline and set it on fire. Once you get your answer on reddit and you're ready to write code again for your class, take your quill and commit the new code to sheepskin as your instructor requires. Then he'll be happy, and so will cranks like me here on reddit.
It's reddit that requires text to be indented by four spaces in order to render a code block. This is was OP was talking about. You can still post code that is indented by two spaces, as long as the *reddit post* includes an additional 4 spaces at the beginning of each line. 
If you are looking for a good cutting edge amazing technology package to learn I would recommend Spring Framework. However don't knock the "Out of date" skills you have. What you know is what most corporations are using right now. Business people hate changing what is already working.
Cool. I think it would be a little bit better if you made it so that the output options are defined as a command parameter and dispatched accordingly rather than making the user pick the class. I mean, instead of java -cp crawler-1.3-full.jar com.soulgalore.crawler.run.CrawlToCsv -u http://soulislove.com java -cp crawler-1.3-full.jar com.soulgalore.crawler.run.CrawlToSystemOut -u http://soulislove.com java -cp crawler-1.3-full.jar com.soulgalore.crawler.run.CrawlToFile -u http://soulislove.com You could make it java -cp crawler-1.3-full.jar com.soulgalore.crawler.run.CrawlRunner -o csv -u http://soulislove.com java -cp crawler-1.3-full.jar com.soulgalore.crawler.run.CrawlRunner -o stdio -u http://soulislove.com java -cp crawler-1.3-full.jar com.soulgalore.crawler.run.CrawlRunner -o file -u http://soulislove.com
Repeat this mantra until you have internalised it: the `throw` and `throws` keywords apply to `Throwable`s(\*). `Throwable`s are just objects. `Throwable` can be subclassed just like any other (non-final non-`Enum`) class. \*: Mostly `Exception`s and `Error`s, obviously.
I see. Interdasting. OP should make his meta help more clear then, because there is nothing wrong with the above FloppyBunnyEars code block in terms of spacing.
Here's what you need to know about exceptions. An exception occurs (well, should occur) when processing cannot continue because an unexpected condition has been encountered. (I say "should" occur because often people use exceptions inappropriately, which you should avoid doing yourself, and will be forced to deal with as a user of other people's code.) There are two types of exceptions: unchecked exceptions (or "runtime" exceptions) and checked exceptions. Unchecked exceptions occur when execution can no longer continue because an unrecoverable error has occurred. In almost all cases, this means the program is in a state that never should have been allowed in the first place, i.e., there's a bug that needs to be fixed and execution cannot continue until it is. Checked exceptions occur when unexpected but possible conditions arise in a system and the situation can be recovered. For example, if a program opens a file, if everything is working normally it should open. However, if the number of open files exceeds the number the OS can support, you can't open your file until some other programs close the ones they have open. To recover this situation, your program can just try again later. Or maybe it can fetch the file from the network instead. An exception should not be thrown in the situation where an outcome is expected. For example, I have worked on projects before that take user input and validate it. All validation was done using a validation layer that looks like this: public void validateFoo(String input) throws ValidationException { // checks that input is a valid foo and throws a ValidationException if not } This is an abuse of exceptions. The point of a validation method is to determine if the input is valid or not. In other words, handling invalid input is absolutely expected. If it were "exceptional" to encounter invalid input, validation wouldn't be needed in the first place. So the above should look like this: public boolean isFooValid(String input) { // returns true if input is a valid foo, false otherwise } Exceptions can also work well with preconditions you specify on a method. For example, you could write a method that expects a valid foo as long as you document this as a precondition and define what a valid foo is: /** Does stuff if {@code isFooValid(foo)==true}. */ public void doStuff(String foo) { // assume foo is valid, throw runtime exception if not } The above method specifies a contract that the method requires the argument `foo` to be a valid foo, which the caller may know by calling `isFooValid()` first (this defines what a valid foo is). If a caller passes in a string that is not a valid foo, that is a code bug and you can throw a runtime exception. So in most cases, you should only catch checked exceptions. Here's how you do that: String filePath = // get path to file by prompting user try { FileInputStream in = new FileInputStream(filePath); } catch (FileNotFoundException e) { // tell the user file not found, prompt again } The last thing you need to know about exceptions is: don't throw exceptions that expose implementation details in your API. For instance, this is fine: public interface FileAppender { /** Appends the text to the end of the specified file. */ public void append(String text, String filePath) throws FileNotFoundException; } This is not fine: public interface BankTransaction { /** Transfers money from source to destination. */ public void transfer(Account source, Account destination) throws SQLException; } In the first example above, that interface and the method is responsible for dealing with files. So, it's completely reasonable to expect the caller to deal with exceptions that have to do with files. In the second example, the interface deals with transferring money between bank accounts. It has nothing to do with databases or SQL. To require the caller that only, as far as you know as the one that wrote this interface, to know that you happen to be using a database is exposing implementation details that you shouldn't. Some other implementation of this interface might decide using a network is better, or maybe a NoSQL data store that couldn't possibly generate a SQLException. Long story short, exceptions are part of your API, and shouldn't force the caller to know things outside what your API requires.
If your app has a UI front end, you can also use Selenium in addition to and/or a substitute for integration testing. 
Good old assumptions. I can't find any other popular title that requires java. It certainly doesn't seem commonly required as far as I can tell. I put steam on and all the popular indie games I have on that are working fine. How sure are you that c# is only for windows? In fact is it possible that any programming language can be only on one platform? [mono](http://www.mono-project.com/Main_Page) advertises itself as: &gt;Run your applications on all the platforms &gt;Mono is a software platform designed to allow developers to easily create cross platform applications. Sponsored by Xamarin, Mono is an open source implementation of Microsoft's .NET Framework based on the ECMA standards for C# and the Common Language Runtime. Also since removing java I haven't noticed any problems using the internet. I think perhaps like me you just are not aware what JAVA is and isn't really used for in general?
I actually *do* know what Java is, as I program with it, but I just checked, and both of my assumptions came from someone who isn't very popular on YouTube. Of course it is my fault for not cross-checking. I'll leave now. (I'm still pretty sure that C# only runs on windows, unless you download something.)
For me, any code which has been saved to a persisted medium (e.g. a harddisk) is legacy code. I.e. it's technical baggage that I now tolerate only because it's (probably?) needed to fulfill some requirement, but I have other things to worry about now to spend much more time on it.
That does indeed go beyond my ability. However I planned to use the titles as keys and the genre as values, allowing me to alphabetize them by titles i believe. As well as allowing me to search by value and return multiple occurrences of the same value...to output a list of movies that share the same genre.
Yes there is: the line of the class definition and the closing brace are not included in the code block - which is the problem he pointed out.
Sorry, wasn't claiming you didn't know what JAVA was rather not knowing what it is used for or not. I've done a little JAVA script myself but I have no idea about it's common use for things that don't explicitly state it. Thanks for being clear, I assume any game that is programmed in any language will have something that interprets that language on the system it's running on. But now I'm making assumptions. Cheers for the feedback.
Shouldn't this be in /r/programming and not here?
On another note, how would I print out my search? Would I have to use an iterator or loop, or will a simple print line catch each search result and automatically print it?
Disagree. In the provided example, the class name isn't relevant to the lines of code that are under scrutiny. So, we've learned 2 things: 1) The reddit code block isn't all that great for posting/formatting code. 2) If you're going to bitch, at least provide a sample that clearly shows the extent of the problem you're bitching about.
An iterator would be best to print all items in a tree map. Look up the entrySet method for iterating.
Can't say I'm surprised. IntelliJ IDEA is just so unbelievably good.
Providers can be implemented however the author sees fit. Like I mentioned in another comment, the java code was second to C#, so it's not optimal quite yet.
Look up JodaTime - that will do exactly what you want without having to re-invent the wheel (Or calendar) yet again. ^^^And ^^^Yes, ^^^I ^^^know ^^^this ^^^is ^^^probably ^^^a ^^^homework ^^^question...
The new darcula theme makes it a winner for me : https://www.jetbrains.com/blogs/idea/wp-content/uploads/2012/12/darcula-1.png :) 
The default Date / Calendar interfaces should also do this for you, by creating a calendar for that day / year and using calendar.get(Calendar.DAY_OF_WEEK); 
Ok - That's embarrassing. I've been using Joda for date/time stuff for so long it actually didn't occur to me to check what the built in JRE classes can do for this...
Well I didn't say the default would do it *well*... If I'm not mistaken, they are doing an overhaul on the whole Calendar() and Date() system for Java 8
I do the same with ant; I just copypaste [this](https://github.com/dexgeh/simple-jetty-embedded/blob/master/build.xml) ant build.xml file from project to project, and use "ant" or "ant run" to build or to run.
Then the only code you really need in the implementation are constructors, like public MyException(String message){ super(message); } public MyException(String message, Throwable e){ super(message, e); } At the end of the day, you really don't want it to do anything *new* (usually), you are just creating a new error name for readability / ease of use.
Some discussion: http://www.reddit.com/r/programming/comments/18bgq0/a_new_java_library_for_amazing_productivity/
Heh, no, that's their screenshot not mine :) I tend to write code in MacVim mostly, but a couple of projects I work on use IntelliJ and it's pretty good especially for large refactoring tasks, debugging and what-have-you. My Vim color-scheme is dark, so switching back and forth was jarring, this new mode is much nicer for me...
Which I missed! Dang it!
do you need help or do you need someone to do your homework for you? tell us what specific problem you have, and we'll help you with it. also: /r/javahelp 
When I was looking into this, I couldn't use my existing Eclipse install, because it isn't compatible with the Scala plugin! (AFAIK)
So, how long before the next end of the world prophecy?
Just start one. Anyone with a blog can do it these days.
Algorithms like this are described in the O'Reilly book, "Collective Intelligence", in particular something called multi-dimensional scaling. The basic idea is that, unless your 'similarity' values are already two-dimensional, you probably won't be able to faithfully plot your data without breaking your own rule a few times. It's similar to the way you can't draw the surface of the earth on a flat piece of paper, without either distorting it, having rips, or both. As a result, you have to resort to approximation. The basic idea of MDS is to assign all your data points a random location on a 2D plane, and then examine all the distances. How reflective are they of the distances in your input matrix? This is the 'error' score. Odds are they're way off, so you try to jiggle the data - the inch closer to other points that they're supposed to be closer to, while moving further from points they're supposed to be further from. You repeat this many times until the error falls down to some acceptable value or (more likely) you find that you're not reducing the error very much with successive iterations. When I did this, the quality of my results were highly dependent on the random starting positions, so it can be worth setting up your algorithm to try a few times and take the least-error solution of seven or whatever. That's the general idea. The weeds are thick. :-)
The solution will be to loop through the *scores* array making sure that each value at subsequent indexes is higher than the last. So create a *previousScore* local variable to remember the previous score in the loop so you can test it against the current value in the loop. Return false if a value at the current index is less than the previous. Return true by default.
Create a loop to compare the current value (i) to the previous value (i-1). If it is less, return false, end of loops. If it gets to the end of the loop, then each value in the array is bigger than the previous, so return true! public boolean scoresIncreasing(int[] scores) { if (scores.length &lt; 2) { return false; } for(int i=1; i&lt;scores.length; i++) { if (scores[i] &lt; scores[i-1]) { return false; } } return true; }
Thanks for the info man! The problem with guessing and checking, though, is that I have 6 graphs I need to make and a couple of them contain like 60 and 100 nodes, respectively. It would take forever to guess and check distances. I feel like I need to write a helper program that will go through them all and graph them for me, but this is hard!
Yep, worth every penny, even for a hobbyist programmer like me.
Thanks man! I'll give those a look...I'll repost in /r/algorithms too. 
Libgdx
https://en.wikipedia.org/wiki/Java_2D http://docs.oracle.com/javase/tutorial/2d/index.html
I don't have any personal experience in the matter, but Minecraft uses the [LWJGL](http://www.lwjgl.org/) and can run a humongous 3D world without much of a problem on most CPUs. I'm certain this is because of GPU acceleration, but maybe that's something you can look into for your own code.
I'm familiar with the API, but is it useful when rendering graphics from external image files (such as .png)?
Does LWJGL use OpenGL for GPU access?
I've recently started using intelliJ for javascript, I never thought a full blown IDE would be any good for JS. I was wrong, mostly.
How good of a programmer is he? while(true) { i.loves(you); } Is the equivalent of saying you will always love him...
He's still in school (sorry probably should have added that) which is why I'm limiting it to java since I know he knows that language thoroughly. So do you think he would get that sentence? I think it's a really cute idea. 
&gt; They've been mostly abandoned because in practice most people simply &gt; don't understand them well enough to use them properly. That's pretty presumptious. It could equally be said that many people have abandoned checked exceptions because in practice the proper application of checked exceptions costs more than they are worth. Seriously, Java is the *only* major language with checked exceptions. Do you think that Anders Herjlsberg didn't understand checked exceptions when he decided not to include them in the .NET platform? Do you think Martin Odersky (the author of javac) didn't understand checked exceptions when he decided to make *all* exceptions runtime exceptions in Scala? &gt; One avoids using exceptions for flow control because exceptions are &gt; not used for flow control. Period. If it makes code more readable and straightfoward to catch `NumberFormatException` to handle an invalid number instead of additional complexity to check for a number (which might be otherwise complex to deduce correctness, given things like localization), why not? Just to adhere to some dogma that exceptions *must* be used a certain way? The JSF validator API does a lot more than return `true` or `false` on validation failure. The [`ValidatorException`](http://docs.oracle.com/javaee/6/api/javax/faces/validator/ValidatorException.html) contains context information that is used by the rendering system to display error messages next to fields in error. Other web frameworks similarly use `void` methods for validation, such as Struts 2 and Spring Web MVC, either by sprinkling [enhacement interfaces](http://struts.apache.org/2.0.5/struts2-api/apidocs/org/apache/struts2/Validatable.html) on the action class (Struts 2) or modifying an [`Errors` object](http://static.springsource.org/spring/docs/2.5.6/api/org/springframework/validation/Validator.html) passed as an argument to the validator (Spring). There are various strategies for pushing error context information, and using exceptions is convenient for this purpose (as an Exception is a full-blown class). That the JSF team chose the exception route for their use case does not make it invalid just because you say so. &gt; If your query does not specify a single result, then you have bad &gt; data, or a bad query Your justification of JPA's usage of Runtime errors in this case is contrary to your previous position: &gt; Checked exceptions occur when unexpected but possible conditions &gt; arise in a system and the situation can be recovered. The error conditions you described are certainly recoverable, with similar justifications as for file I/O. So it seems that there are no "right" way to decide using checked exceptions vs. runtime exceptions, as many cases can be argued either way. In which case, why not just drop the ceremony of checked exceptions and go with runtime exceptions? &gt; Now if I don't define the isValidCountryName() method in this API, &gt; how can a caller possibly know what I mean by "a valid country &gt; name"? You could throw an exception. As in [`NumberFormat`](http://docs.oracle.com/javase/6/docs/api/java/text/NumberFormat.html#parse\(java.lang.String\)). public Number parse(String source) throws ParseException One man's design bug is another man's design decision. It's pretty arrogant to say that another person is "wrong" because they use exceptions a certain way if their API is otherwise easy to use and easy to understand.
Great, thanks! I really appreciate your help. And don't worry, we're in college and have been together for over 4 years :) ...But I will be sure to let him know about that caveat when he gets on my nerves!
I've run Indigo and Juno successfully with the plugin. Two years ago it was a bit rough, but it's quite stable now.
Woah, yes, totally - you need to write software. I had this very problem, and yes, I had to write software also. But.. aren't we in the /r/java subreddit? I assumed you'd be up for that. :-)
I actually think that this is more elegantly solved recursively: public boolean scoresIncreasing(int[] scores) { // If there's only one or no digits left, this is fine if(scores.length &lt;= 1) return true; // check the first item in the array, return false if it's a violation if(scores[1]&lt;scores[0]) return false; // Grab the rest of the array [since the first item is now fine] int[] cdr = Arrays.copyOfRange(scores, 1, scores.length); // Check the rest of the array return scoresIncreasing(cdr); } Which can be expressed as a one-liner :-) public boolean scoresIncreasing(int[] scores) { return scores.length&lt;=1 || (scores[1]&gt;=scores[0] &amp;&amp; scoresIncreasing(Arrays.copyOfRange(scores, 1, scores.length))); } 
This is by far the best iterative solution. [although you should return true in the first guard, not false]
&gt;&gt; They've been mostly abandoned because in practice most people simply &gt;&gt; don't understand them well enough to use them properly. &gt; &gt;That's pretty presumptious. I don't think you can say it's presumptuous if it's based on many, many years of real world experience where I've seen exceptions used incorrectly more often than not. &gt; It could equally be said that many people have abandoned checked exceptions because in practice the proper application of checked exceptions costs more than they are worth. Seriously, Java is the *only* major language with checked exceptions. Do you think that Anders Herjlsberg didn't understand checked exceptions when he decided not to include them in the .NET platform? Do you think Martin Odersky (the author of javac) didn't understand checked exceptions when he decided to make *all* exceptions runtime exceptions in Scala? Of course I wouldn't make any of these claims about these fellows. When you design a language, you're free to include or exclude whatever language features you want based on the philosophy you're going for. There is no one language that is well-suited to solve all problems, so a language designer needs to decide what type of problems that language is best for. I thought I made this pretty clear when I talked about MI. MI can be used properly, that doesn't mean it's definitely a mistake to include it or exclude it. What I meant about exceptions is not that everyone is dumb. Just that using them properly often requires a nuanced understanding of subtle issues, which I happen to have learned over the years, and I'm happy to impart now. Take it or leave it, though. I don't particularly care if you're convinced or not; the way I use exceptions elegantly addresses every issue I've come up against, and I feel confident saying I could spin up hypotheticals that your approach would not address well. (Not that I have the time to do that.) &gt;&gt; One avoids using exceptions for flow control because exceptions are &gt;&gt; not used for flow control. Period. &gt; &gt;If it makes code more readable and straightfoward to catch `NumberFormatException` to handle an invalid number instead of additional complexity to check for a number (which might be otherwise complex to deduce correctness, given things like localization), why not? Just to adhere to some dogma that exceptions *must* be used a certain way? There's an issue of correct design that is always in tension with practicality. It is often not practical to do correct design in a real world situation. It is, however, *always* practical to know what correct design is, so that you may properly assess the trade-offs you're making. Otherwise, you'll often give away correctness in exchange for nothing without realizing it. Having said that, I think you may have chosen a poor example in `NumberFormatException` when parsing a number, because if you use `Scanner` it does present a correct API: `hasNextDouble()` ought to be called prior to `nextDouble()`. Note that if you call `nextDouble()` without having verified it exists with `hasNextDouble()` first, you might be the proud owner of a `RuntimeException`. &gt;The JSF validator API does a lot more than return `true` or `false` on validation failure. The [`ValidatorException`](http://docs.oracle.com/javaee/6/api/javax/faces/validator/ValidatorException.html) contains context information that is used by the rendering system to display error messages next to fields in error. Other web frameworks similarly use `void` methods for validation, such as Struts 2 and Spring Web MVC, either by sprinkling [enhacement interfaces](http://struts.apache.org/2.0.5/struts2-api/apidocs/org/apache/struts2/Validatable.html) on the action class (Struts 2) or modifying an [`Errors` object](http://static.springsource.org/spring/docs/2.5.6/api/org/springframework/validation/Validator.html) passed as an argument to the validator (Spring). There are various strategies for pushing error context information, and using exceptions is convenient for this purpose (as an Exception is a full-blown class). That the JSF team chose the exception route for their use case does not make it invalid just because you say so. Your `isValidFoo()` method doesn't need to return true or false. It can return some type that contains all the information the caller might want. I've not worked with Spring Web MVC, so I can't speak to that specifically, but I have used Struts 2 and it is a. horrible. validation framework. Absolutely awful. Have you ever had to do complex validation using it that was made to work well? I've been on several projects over the years that attempted to hack it to solve complex validation problems. It is definitely littered with design bug after design bug that makes anything but the most brain dead validation impossible. If you want to know my approach to proper validation, see my post here - http://severoon.livejournal.com/347150.html - this is how it should be done, and this is how I've done it with great success since I figured out this approach. &gt;&gt; If your query does not specify a single result, then you have bad &gt;&gt; data, or a bad query &gt; &gt;Your justification of JPA's usage of Runtime errors in this case is contrary to your previous position: &gt; &gt;&gt; Checked exceptions occur when unexpected but possible conditions &gt;&gt; arise in a system and the situation can be recovered. &gt; &gt;The error conditions you described are certainly recoverable, with similar justifications as for file I/O. I meant by "recoverable" that the condition has to be recoverable by a caller somewhere in the call stack. Moreover, not only does it have to be recoverable by a caller in the current stack, but you must *know* this to be the case. Not probably, not most likely; definitely. (If you're familiar with the principles of design by contract, you can know things like this based on the invariants and preconditions you define for your API.) Anyway, if you can give me an example that you think shows any inconsistency in what I've said, I can clarify. &gt;So it seems that there are no "right" way to decide using checked exceptions vs. runtime exceptions, as many cases can be argued either way. In which case, why not just drop the ceremony of checked exceptions and go with runtime exceptions? &gt; &gt;&gt; Now if I don't define the isValidCountryName() method in this API, &gt;&gt; how can a caller possibly know what I mean by "a valid country &gt;&gt; name"? &gt; &gt;You could throw an exception. As in [`NumberFormat`](http://docs.oracle.com/javase/6/docs/api/java/text/NumberFormat.html#parse\(java.lang.String\)). &gt; &gt; public Number parse(String source) &gt; throws ParseException There's lots of inconsistencies in the Java standard libraries, as is to be expected of any significant amount of work done over a long period of time for a very general library. I saw a talk by the developers of the Guava library and they expressed this sentiment over and over and over again. It's very, very hard to do proper design for a general purpose library. They did a fantastic job of it and still there are some shortcomings. Pointing them out that they exist isn't evidence that they're correct. (As I mentioned above, you can clearly see an inconsistency between this API and the `Scanner` API that other couldn't be explained.) &gt;One man's design bug is another man's design decision. It's pretty arrogant to say that another person is "wrong" because they use exceptions a certain way if their API is otherwise easy to use and easy to understand. Sorry, it's not arrogant to say I know better if I'm willing to change my mind if you can show me otherwise. But I'm not impressed by appeal to authority, that's an obvious fallacy; show me a problem addressed by some other way of doing it that is not addressed by my approach.
Better to use dr_boom's solution, and avoid any temporary storage, or MIN_VALUE detritus like wernercd's solution. Just iterate through the array, and make sure your indices are correct so you're never comparing stuff outside the array [ie, by iterating from idx 0 to len-1, or from 1 to len]
There's always that one guy...
Ironically, the `hasNextDouble()` method in Scanner uses `NumberFormatException` for flow control: public boolean hasNextDouble() { setRadix(10); boolean result = hasNext(floatPattern()); if (result) { // Cache it try { String s = processFloatToken(hasNextResult); typeCache = Double.valueOf(Double.parseDouble(s)); } catch (NumberFormatException nfe) { result = false; } } return result; } Is your own example wrong too? Here, it makes sense to try the parse and decide what to based on the exception, because evaluating whether a number is a valid floating point number is subject to numerous rules and it is easier just to parse and fail then to try to detect if the number is valid before parsing just to avoid using an exception for flow control. It goes to show that you don't *have* to call `hasNextDouble()` before calling `nextDouble()` if you don't mind doing flow control with the `ParseException`, just as `Scanner` does flow control with the `NumberFormatException`. You haven't identified what "correct" design is. You've only addressed one way of using exceptions (which works for you) and said all other ways are "incorrect" (which may work fine for others). What makes design incorrect? Design correctness is mostly subjective, with the only measure of correctness (that matters) is first the simplest design which correctly implements the requirements at hand and second, a design which minimizes cost of maintenance and enhancement. All other definitions of correct are academic. For example, I can agree that Struts 2 design is pretty terrible. That is evident is *using* the Struts 2 API. But, you say that the JSF approach to validation is "incorrect", but you haven't demonstrated *how* it is incorrect except to say that validation shouldn't throw exceptions. That is not a design bug, that is a design preference. Unless you can demonstrate *real problems* with the JSF validation mechanism, I don't see anything wrong with it. Here's the TL;DR. I've never said your approach is wrong. If it works for you, that's great. I'm not trying to change your mind. But you seem to call any approach that deviates from your dogmatic insistence on how exceptions "should" be used as "wrong" and "incorrect design". I find that *attitude* presumptious and arrogant. 
You think copying an array SIZE-1 times and creating a new stack frame per array element is _elegant_? Okay. A note for the OP: recursion is almost _never_ better than iteration. It's easy to see why: imagine any recursive algorithm with 1,000,000 elements. You need a stack of at least 1,000,000 pointers (which will probably overflow most stacks). An iterative implementation will laugh at 1,000,000 elements. Update: also remember that code is write once, read many. It's not a feature if a piece of code uses some clever language features to hide an algorithm in one line. It doesn't execute any quicker, is harder to write and is definitely harder to read. Don't do it.
I had noe idea they were this big. 
If your project allows for it, I highly recommend use of the Google Closure Compiler + associated JSDoc annotations. IntelliJ can comprehend the type / inheritance system it uses, and the experience becomes more like working with a language like Java, but with all the benefits of JS.
Selenium is for functional testing, end-to-end full stack. Integration testing wires a few dependencies together, but is still an isolating test. Selrnium definitely goes well with an integration test suite, but no substitute.
Thanks! Been watching these the past few days, they are great, just what I was looking for. I never think to look at YouTube when looking for stuff like this...
Lots of up votes - no comments? Groovy being integrated into Spring 4 should be interesting, but may be more polarizing than anticipated. Some people may call Groovy an 'also-ran' already, but I'm not sure Groovy will ever be an 'overnight sensation' in terms of rapid and exclusionary adoption. There was/is already too large of an ecosystem in Java for *any* new tech to have a huge impact across the spectrum of Java. 
Can you lay out what you've done so far? I'm up for giving you some pointers.
Every time this comes up and people mention FizzBuzz, it makes me really sad that there are people in the world who call themselves professional programmers yet couldn't solve that CSC 100 level program
Also post job listings on techie sites like stackoverflow and arstechnica. When you start talking to the candidate, let's say it's a her, ask high level questions about how she would approach a new, large project without guidance. How would she become familiar with the code? How would she go about working through a bug? She shouldn't have to make up an answer on the spot--look for someone who speaks as if they already have a process for becoming familiar with strange code. She should have some system or process for fixing bugs, including reproducing the problem, determining the cause, determining the required behavior, implementing the change, and testing. Or something like that. Ask her to explain object oriented design to you. You don't have to understand it completely, but she should be able to explain some principles and best practices in detail. It's important that she be able to communicate java concepts with non-java developers, so make that part of her interview. Follow up on her references. When you talk to people who have worked with her, ask if she would be better suited for teamwork or independent work, and why. Ask about her experience leading projects. If she's the sole java developer, she will need to be able to work independently, without detailed guidance. For technical ability, sit her down at a computer and have her write a java program that prints out something. pinguyn's fizzbuzz link is a good example of that. She should be able to write a simple program, compile it, run it, and show you the output. No need to test advanced coding skills on the spot, but she should be able to handle writing *something*--she should know the basics of syntax and how to compile/run. Just make sure there's a jdk installed, or that she will be allowed to install one for you during the interview.
It it sad, but I've interviewed several candidates, both new graduates and currently employed 'programmers', who could not solve FizzBuzz.
You see, I'd probably find FizzBuzz a challenge, but that's only because my mathmatical skills lack/I panic when posed a Maths question.
Great information. I really appreciate the time you took to reply. I am going to follow up on Fizzbuzz. I hadn't thought about having them code right in front of me...Hello World. Also off to add my ad to stackoverflow and arstechnica... Edit: Where do you suggest I post on arstechnica? Forum?
Thanks for the tips. I genuinely appreciate them. I am going to incorporate FizzBuzz. No intention of any crazy psych test to hire, just want a coder that can do the job. Last year, (before my time with the company) they had a coder come in and work for a few weeks, but it became apparent at that point that they could not do the task. I want to avoid that at all costs.
&gt;Ironically, the `hasNextDouble()` method in Scanner uses `NumberFormatException` for flow control: What does the implementation of `Scanner` have to do with its API, though? Nothing at all. The contract it presents to its callers gets it right. Whether or not it does it's job only with correct APIs is neither here nor there. &gt;Is your own example wrong too? Here, it makes sense to try the parse and decide what to based on the exception, because evaluating whether a number is a valid floating point number is subject to numerous rules and it is easier just to parse and fail then to try to detect if the number is valid before parsing just to avoid using an exception for flow control. Again, practicality and correct design are often in conflict, and it's perfectly reasonable to choose the practical way. I do it too. But I know what I'm giving up, and I try to document those choices so the next guy can understand them. &gt;You haven't identified what "correct" design is. You've only addressed one way of using exceptions (which works for you) and said all other ways are "incorrect" (which may work fine for others). &gt; &gt;What makes design incorrect? Design correctness is mostly subjective, with the only measure of correctness (that matters) is first the simplest design which correctly implements the requirements at hand and second, a design which minimizes cost of maintenance and enhancement. All other definitions of correct are academic. You say correct design is "mostly subjective", and that makes me cringe. There are certainly some aspects of OOD that are still as yet unsettled, sure, and until they are (if ever) there are aspects that can be argued for either way based on preference, etc. Those are subjective. Most OO design is not subjective though. What's correct and what isn't is known. Whether to apply correct design in a particular case based on whether it's practical might be a subjective assessment. What makes design correct is that it models the relevant business concepts at the right layer of the architecture, and gets the dependencies between those representations right. For instance, if I ask you to design a `Ball` class that will be used in an application used by physics students to simulate various physics scenarios (shoot it out of a cannon, put it underwater, put it on the moon, Jupiter, deep space, etc), you get to a point where you'd probably want to know something about the weight or mass of the ball. How should you design the `Ball` API? Should you put a `getMass()` method, or a `getWeight()` method? Should you put both? Or neither, and make some other class in the system responsible for evaluating the heaviness of things in the system? This is definitely not subjective. There's only one right answer, and if you make the wrong choice, you'll quickly find that choice begins to handcuff your entire design unless you take measures to prevent dependency creep. Unnecessary measures, as it turns out. &gt;For example, I can agree that Struts 2 design is pretty terrible. That is evident is *using* the Struts 2 API. But, you say that the JSF approach to validation is "incorrect", but you haven't demonstrated *how* it is incorrect except to say that validation shouldn't throw exceptions. That is not a design bug, that is a design preference. Unless you can demonstrate *real problems* with the JSF validation mechanism, I don't see anything wrong with it. Well, that's the point of studying and understanding design. I don't always need to see the context of every single bit of code to know what's right and what's wrong. If it violates some principle of good design, then it's wrong. This isn't to say JSF is useless or terrible, or the designers were idiots. In this case there may be a perfectly good reason why they chose not to go for total correctness. There's no perfect collection of APIs out there. It's also possible that you haven't understood how to use the APIs correctly, maybe because they're not documented well. In the case of the primitive wrapper objects in Java (`Double`, `Float`, etc), I'd argue that if you have a string you're trying to parse and absolutely no idea what type of data it is, this is pretty terrible code: boolean isInt, isFloat, isDouble, ... = false; boolean found = false; String s = // ... try { Integer.parseInt(s); found = true; isInt = true; } catch (ParseException e) {} try { Float.parseFloat(s); found = true; isFloat = true; } catch (ParseException e) {} // ... Behold this code in all its glory. You are arguing that this is justifiable. Even though you didn't write it, if we were on the same team and I did and asked you to review my code, you'd have to pass it because there's apparently nothing wrong with using exceptions for flow control. But you (I hope) and I both know this is garbage, and whoever would try to write code like this for a production system should be dragged out into the street and shot. :-) Just because you can do this with these APIs doesn't make it correct usage. I would argue here that the designers of these APIs never intended for you to do this, and would recoil in horror at it. They would probably tell you that you're only supposed to use `PrimitiveWrapper.parsePrimitive()` if your expectation is that the thing you are trying to parse is already set. They probably should have made this precondition explicit in the doc. Even better, they should have pointed you to a specific piece of code that would allow you to meet this precondition easily. This is not an issue of *correct* design, though, this is simply an issue of *good* design. It's good to make things easy for callers, but in the end does not make a design wrong just because it's onerous to use. If you read my blog post that I linked earlier on complex validation, I highlighted that you have to do very little to make an API that is correct when it comes to validation. To make it good and useful, though, takes a lot more work. &gt;Here's the TL;DR. I've never said your approach is wrong. If it works for you, that's great. I'm not trying to change your mind. But you seem to call any approach that deviates from your dogmatic insistence on how exceptions "should" be used as "wrong" and "incorrect design". I find that *attitude* presumptious and arrogant. Ok, like I said, I don't care if you buy it or not. I know what I'm saying is correct, all you have to do is analyze the impact it has on controlling dependencies to see that. (Calling people names is not a very effective way to advance your point, btw. It doesn't bother me, but pointing it out does further strengthen my suspicion that you can't argue your case on its merits.) At this point, I think you are entrenched in your viewpoint solidly enough that I'm not going to argue you out of it. So here's your homework, should you choose to accept it: go read Chapter 9 of Josh Bloch's *Effective Java*. Once you've understood that far, we can pick up the discussion if you want.
I used FizzBuzz in my face to face interviews here, and some of the roads these programmers were going down were very, very scary. Some people got it sort of correct (but not completely), but no one really had an elegant solution. I had thought it was common practice to ask this and not one of the interviewees had heard of the problem before, and they all had at least 8 years experience.
My own experience has been that recruiters tend to only have a cursory knowledge of whichever language you're hiring for. I've had plenty of Java programmers come from recruiters who scored high on the recruiter's own tests but bomb out in the first few mins with some basic concurrency and algorithmic questions. I think recruiting developers is just always going to be a painful process as the task itself is inherently difficult.
http://ideone.com/api/embed.js/link/g7RgeJ
I think that this can be solved by carefully speaking to the company about exactly what they're looking for. Qualifying the job is essential so that time and money aren't wasted. If recruiters know a general sense of what questions may be asked or what design patterns or environments are required, the recruiting process will flow a lot better.
I find it odd that people have trouble with THAT code. &gt; *" elegant solution."* What do you mean by this? I'd probably write a for loop, three if statements (or use ()?T:F ) , and call it a day.... since there's usually more important coding work that needs to be done. 
Hei, I took the test and if I wrote down this: int i = 1; while(i != 101){ if(i % 3 == 0)System.out.println("Fizz"); if(i % 5 == 0)System.out.println("Buzz"); if(i % 5 == 0 &amp;&amp; i % 3 == 0)System.out.println("FizzBuzz"); else if(!(i % 5 == 0) &amp;&amp; !(i % 3 == 0))System.out.println(i); i++; } Would that go as good in your book ? (The code prints out correctly)
No coders and only one IT guy on staff. Thanks for the pointer on the certification. I will look at that as an indicator. The JUG is a fantastic tip...off to see if there is a local group. Thanks again.
That problem is actually on the AP Comp Science test btw.
Pretty good, although it's not the prettiest way to do it.
Why do you use a while loop? This is what I would do: boolean printed; for(int i = 0; i &lt;= 100; i++) { printed = false; if(i % 3 == 0) { System.out.print("Fizz"); printed = true; } if(i % 5 == 0) { System.out.print("Buzz"); printed = true; } if(!printed) { System.out.println(i); }else { System.out.println(); } }
Oh, wow. Did not notice that. Feel kinda embarrassed now.
You made an interface and a function to reimplement the modulus operator???!!!!!!!!! Also it's still wrong because it's supposed to output the numbers from 1 to 100 replacing as appropriate...
I hope this doesn't sound too pedantic but you're still testing i % 5 ==0 when i % 3 == 0 was true . imo: if(i % 5 == 0 &amp;&amp; i % 3 == 0) { System.out.println("FizzBuzz"); } else if(i % 3 == 0) { System.out.println("Fizz") } else if(i % 5 == 0) { System.out.println("Buzz"); } I'm not a big fan of riddles and think it is a terrible idea to ask them in an interview.
Dropped this in an android app I'm building (switched Log.d() with System.out.println() for those of you not familiar with LogCat)... Not super elegant, but not terrible either. private void fizzBuzz() { String n; for (int i = 1; i&lt;=100; i++) { boolean fb = false; n = ""; if (i % 3 == 0) { n = "Fizz"; fb = true; } if (i % 5 == 0) { n = n+"Buzz"; fb = true; } if (!fb) n = i+""; System.out.println(n); } }
Elaborate
I did exactly that. for (int i = 1; i &lt;= 100; i++) { boolean multiplo3 = (i % 3) == 0; boolean multiplo5 = (i % 5) == 0; if (multiplo3 &amp;&amp; multiplo5) { System.out.println("FizzBuzz"); } else { if (multiplo3) { System.out.println("Fizz"); } else if (multiplo5) { System.out.println("Buzz"); } else { System.out.println(i); } } }
The fastest way (based on my testing) is just to store a boolean, so you don't have to compare both i % 5 and i % 3 twice
How did you test that? I ask because any compiler *should* optimize that as a static optimization, but sometimes compilers suck much more than we think they do :)
I see you missed the "continue" keyword :D Bypasses the other two statements and just moves on. But in retrospec, this goes into an infinite loop. Looks like i need to test my code out as well and not forget about the counter ninja edit: I thought about the if - else if statements (which work just fine), but always like to throw other ways into the mix
You don't need to store that String, just use System.out.print("Fizz"), System.out.print("Buzz"), and if(!fb) System.out.println(i) else System.out.println() my implementation: boolean printed; for(int i = 0; i &lt;= max; i++) { printed = false; if(i % 3 == 0) { System.out.print("Fizz"); printed = true; } if(i % 5 == 0) { System.out.print("Buzz"); printed = true; } if(!printed) { System.out.println(i); }else { System.out.println(); } } removed times because of the reddit formatting getting confusing, but on average it's 2% faster
no need for the else statement, that's what printed is for
Agreed completely, but this was basically spaghetti code acting as maintenance code, and everyone had their own version of how to code things (i.e. no standards).
You are right in that better engagement with the recruiters can help. I still feel though that ultimately it takes a developer to assess a developer.
This is true, but maybe it's just my personal taste in aesthetics that makes me think it looks cleaner. Yours is more efficient, I'd say. Although we should now troll the rest of the thread about not commenting their code. ;-D
nah, makes perfect sense (and i follow your logic 100%). I've always followed the rule "Get it working, then optimize". your way is definitively more optimized than mine :D
The interface I accept probably not needed, the function was for the sake of clarity. On re-reading the link yeah fair enough you could say it's wrong cos I don't dump the output to sysout but I would argue the point of FizzBuzz is to test how someone approaches the algorithm. 
The logical match between the question and the code is to use `else if`, not define a printed variable and check it.
At a pure technical level, sure. Recruiters know the types of people that can be hired. I can tell you from a person's resume whether they are going to receive an offer from certain clients. Most HR managers I speak with that have never recruited for tech candidates find it extremely overwhelming--this is where recruiters can help. We do the initial weeding out. After that, the intense technical conversation can begin.
 $ cat Main.java package foo; public class Main { public static void main(String args[]) { int Y = 0; int X = (Y + 4) * 3; System.out.println(X); } } Compile with $ javac Main.java And then with "javap -c Main" I get: Warning: Binary file Main contains foo.Main Compiled from "Main.java" public class foo.Main { public foo.Main(); Code: 0: aload_0 1: invokespecial #1 // Method java/lang/Object."&lt;init&gt;":()V 4: return public static void main(java.lang.String[]); Code: 0: iconst_0 1: istore_1 2: iload_1 3: iconst_4 4: iadd 5: iconst_3 6: imul 7: istore_2 8: getstatic #2 // Field java/lang/System.out:Ljava/io/PrintStream; 11: iload_2 12: invokevirtual #3 // Method java/io/PrintStream.println:(I)V 15: return } So think it's something else. 
For the sake of correctness.... ;) public class FizzBuzzMain { public static void main(String[] args) { for(int i=1; i&lt;=100; i++){ System.out.println(messageFor(i)); } } private static String messageFor(int number){ // Simple bit flag approach int status = (number % 3 == 0) ? 1 : 0; status |= (number % 5 == 0) ? 2 : 0; switch(status){ case 0: return "" + number; // Simples case 1: return "Fizz"; // Multiple of 3 case 2: return "Buzz"; // Multiple of 5 case 3: return "FizzBuzz"; // Multiple of 3 &amp; 5 default: throw new AssertionError("Unexpected status: " + status); } } } **edit:** Updated following code review 
Why so structured? if (!(multiplo3 || multiplo5)) System.out.print(i); else { if (multiplo3) System.out.print("Fizz"); if (multiplo5) System.out.print("Buzz"); } System.out.println(); 
I've experienced this so many times I'm thrilled when someone *can* solve it.
I tested it with a dynamic variable in a function to avoid static optimization (I believe)
That doesn't solve the problem... every time **i** is a multiple of 3 *and* five it will print this: Fizz Buzz FizzBuzz When it should just print: FizzBuzz 
Pretty much, I used jzy3d(3-d graphing library) to create a graph that includes Spheres and lines(LineStrip is classname). It's an interactive environment, including rotating the graph in any direction with a click and drag. When I click on a Sphere, I want another graph to appear that is the same type as the previous but with different data. For the original graph, you create data sets of coordinates(Coord3D). Once you decide the x, y, z for these coordinates, you create the Spheres that have an argument pointing to a corresponding coordinate. When you create the lines, you simply decide which points on the graph it touches. Once everything is created, I altered the coordinates inch by inch until I got them at the best estimated distances I wanted from each other. That was all fine and simple...with only 6 Spheres. The problem here is that for a couple of the secondary graphs, I have data sets with 60 and even 90 Spheres. It would take days to move these Spheres around inch by inch until every single one is at the right distance from every single other one. I need to create a helper class/method to set up these Spheres at the (roughly)correct distances from each other.
Somebody else pointed this out already,and I am indeed embarrassed by my mistake. Well I have much to learn before I can call myself a real programmer. 
Depressing. My college teacher used it as an assignment once after I graduated and I wrote up a silly implementation for it and sent it back. She was not very amused. Makes me feel much less anxious about my upcoming job interviews. 
FYI you've linked to the https version of the site, which flags up an untrusted certificate warning. For anyone put off by the warning, the bog-standard [http version of the site](https://www.ibm.com/developerworks/mydeveloperworks/blogs/wasdev/entry/article_newandnoteworthy_latest?lang=en) loads fine. It's a bit light on the changes for RAD, which is a shame as that's the main one I was interested in. Intriguing to see that there's jQuery support in there though - I wonder if this signifies a shift away from IBM backing Dojo, or simply trying to catch as wide an audience as possible? My money's on the latter, but who knows. Side note, they've tarted up the developerworks pages - looks quite nice and clean.
I'm having a really hard time imagining a real programming problem that uses *less* math than FizzBuzz.
ouch. Libraries are never (IMO) supposed to be "get it done" style code.
What I mean is that it is *almost always* unwise to think that you will use a piece of code short term then never have to maintain or expand upon it. Unless you personally delete it before it hits the repository, it is probably going to come back and bite someone eventually. *Some* apps have very short lifespans (such as maybe android apps advertising a major sale and then thrown out afterwards) but this is the exception not the rule.
Always happy with code review, only way anyone learns. I went with the bit mask approach because I feel it looks cleaner and is easier to follow when it comes to what to do for which state. Never been a fan of chains of if else statements, I find them clunky and easy to misinterpret. In general if find I'm using else if more than once I look at the conditions and try to simplify or replace it with a switch if possible. You're right about combining the bit mask (been away from this kind of stuff for a while). The reason for the IllegalStateException (which again you're right should be assertion error, I've been in Scala land for months and haven't been throwing exceptions) and why I didn't use default for the "" + number case is quite deliberate as I wanted to be more rigid about the failure cases for the algorithm. By that I mean the only valid values for the status flag are 0 - 3. Anything else is an error so I'm asserting that fact with the default. I've spent many an hour chasing through a code base to find the source of my problems was a dodgy switch statement. As a result I tend to want them to "blow up unless told otherwise". 
&gt; In general if find I'm using else if more than once I look at the conditions and try to simplify or replace it with a switch if possible. &gt; &gt; ... &gt; &gt; I've spent many an hour chasing through a code base to find the source of my problems was a dodgy switch statement. Given the fact that you've had bad experiences with switch statements, why would you opt to use them when not necessary? I generally avoid switch unless it naturally fits the problem. That is: I have exactly one integer/enum/char value and I'm supposed to do something for certain specific values, else a default behavior. In all other situations I'd use either chained or nested ifs (or possibly even `?:`). Converting multiple decisions into a single mask so that you can then use switch creates more work/code, introduces more opportunities for error (missing breaks, impossible default cases), and (IMHO) makes the code harder to comprehend as one has to go back and "decode" what each case actually means.
Usually it's better to include braces and newlines, unless you're requested not to, as it shows you have a concern for following good coding quality practices
Very much like dr_boom's solution except only one return statement. As a general rule I try to have only one return statement in a method to make it easier to follow and debug. public boolean scoresIncreasing(int[] scores) { boolean result = true; if(scores.length &lt; 2){ result = false; } else { for(int i=1; i&lt;scores.length; i++){ result &amp;= (scores[i] &gt;= scores[i-1]); if(!result){ break; } } } return result; } 
When it comes to switch statements my bad experiences have been around those which do not implement default or use default to return a meaningful value which is why I explained my tendency to use default to throw an error. Personally I find (or at least found) bit masks easy to work with but that could be just my own experience. I spent several years working with messaging APIs and protocols that relied heavily on bit masks, perhaps I'm just more accustomed to them. 
That;s the thing, it's not that I'm bad at math, it's that when somebody is like Mutiples of this, Mutiples of that I panic and my mind freezes. Just one of those things I think, I hated maths as a kid.
Np. Yes, there is a lot of crap on youtube but this guy is spot on. Interesting too.
I heard someone else mention there is a lot of crap... how does one determine if it's crap? Just watch enough to eventually pick out the good from the bad?
How about this? String[] messages = {"Fizz", "Buzz", "FizzBuzz"}; for(int i = 1; i &lt;= 100; i++) { int flags = (0 | (i % 5 == 0 ? 2 : 0) | (i % 3 == 0 ? 1 : 0)) - 1; System.out.println(flags == -1 ? i : messages[flags]); } 
That was very interesting thanks. Hopefully this will help eliminate/mitigate the chronic PermGen issues that application servers like Tomcat have had for years.
&gt; How do we know people haven't already tried to submit C# implementations that... By looking at the submitted C# implementations -- programs are contributed by attaching a source code file to an issue tracker items. You can read through [any of those 2,600 archived items](http://alioth.debian.org/tracker/?group_id=30402).
That is the problem with most things, if you are learning you will not know it is crap. Mostly just look at the comments, ratings and a quick google or check on places like here or some programming irc rooms and see what people think.
This won't fix any permgen leaks. The default will be for the native memory use to grow unbounded until you run out of swap space. If you turn on the metaspace limit you will just get a metaspace exhausted error rather than a perm gen exhausted error. Code run within containers such as Tomcat will be just as likely to leak permgen/metaspace. 
there is more discussion over on the /r/programming cross post. Click the Other discussions tab at top. 
Or just use PrettyFaces, it solves that exact problem.
Of course. If you leak memory, you leak memory. This is no different than leaking memory on the heap, except maybe that it is harder to understand why you leaked memory. It will help mitigate PermGen issues though, since you will be able to keep your web app running as long as the OS can allocate more memory for you. This was not possible before. Until we fix our leaks though, this will always be a problem. Sadly, the magic garbage collectors that know how to identify referenced but unused objects aren't many.
Thanks for clarifying. Your assessment of me needing a reality check was more accurate than I'd care to admit. I also think I was more egoistic than I should have been for someone in my position. Thank you for being blunt, by the way, it made me reconsider things that I would normally say in an interview ("I'm a fairly good programmer"). I'm thinking something along the lines of "I'm fairly decent **for my level**" might be better received and make me look like my head is less swollen. Edit: That LCK video has a whole new meaning now that I'm looking from a different perspective.
Well you can use the New Boston tutorials which are not bad. http://thenewboston.org/list.php?cat=31 
try drjava http://drjava.sourceforge.net/docs/quickstart/ch03s05.html
Tomcat doesn't have PermGen issues, the JVM does. For example, you can completely eliminate PermGen errors by using JRockit instead of the Oracle JVM. You'll get an eventual OutOfMemory error though...
The tutorial at oracles website
I'd advise moving text of that quantity to a paste site. Anyway - are you getting an exception in the search function? You catch it, but then call e.getMessage() which doesn't actually do anything. Try e.printStackTrace() instead and see whether you get any console output.
Well deserved. It's great. 
where can i find the entire winner list in one page, it seems that drdobbs site is looking for more page clicks. 
Plus they're going to open source their iOS / Android stuff, so there's still a little hope for mobile. http://fxexperience.com/2013/02/february-open-source-update/
One thing you might want to check out is object mentor - http://objectmentor.com/resources/publishedArticles.html - click on *Design Principles* and read and understand those articles. Absolutely changed my life. Robert C. Martin also has a book on software development that covers all this same material in long form, but this is the good stuff. Reading it made me understand that programming is really all about one thing: modeling business concepts in a way that captures and manages dependencies correctly.
Ill do that when I get back to my comp on phone. The exception is there because when I don't have it there is an error saying there is an uncaught exception. Ill post more info in a couple hours.
See if this works for you, I only wrote the search function, but won't be able to test it without rebuilding what you have, so it might need some reworking. public void search (String pattern) { ArrayList&lt;Integer&gt; indices = new ArrayList(); String data = textArea.getText(); for (int i = 0; i &lt; (data.length() - pattern.length()); i++) if (data.substring(i, i + pattern.length).equalsIgnoreCase(pattern)) indices.add(i); for (Integer index : indices) { try { textArea.getHighliter().addHighlight(index, index + pattern.length(), painter); } catch (Exception e) { e.printStackTrace(); } } } Even if this does end up working, using a linear search on large amounts of text will be inefficient in the long run. I think the main issue you had with yours not working is that this.textArea.getHighlighter().addHighlight(indexOfSearch, text.lastIndexOf(text), painter); has the wrong parameter, it should be this.textArea.getHighlighter().addHighlight(indexOfSearch, text.lastIndexOf(param), painter); and even so, the way it is set up will highlight from the first instance of the parameter to the last, so your output would look something like this: * The last time I went to a baseball game was on the first day of last month. Searching for "the" would return something like: * **The last time I went to a baseball game was on t**he first day of last month. ^ FYI: The reason the highlighting would stop on the t of the second "the" is because getIndexOf() and getLastIndexOf() return the index of the first letter.
Get your code for review much earlier. Good constructive feedback is invaluable. Even for experts! You also learn a lot!
Definitely a good idea. getMessage(); returns a string that is useless unless you print it, whereas printStackTrace(); will display the name of the exception and where it occurred in the runtime. It's a bad idea to leave printStackTrace() after you are done developing (which is why some IDEs like NetBeans will underline them with a warning), but it's really helpful for debugging.
I think that the reason they are deprecated is because you should pass in the OutputStream you want the stack trace to print to like e.printStackTrace(System.err);
I love IntelliJ but really wish they would integrate a profiler like Netbeans. 
I don't think printStackTrace() is depreciated, as far as I know, calling it without parameters effectively calls printStackTrace(System.err). Could be wrong though.
Looks like you are right. I just assumed it was because of the underline.
It looks like there is a couple of profiler plugins for IntelliJ. Have you tried those? 
The only one I have had success with is JProfiler, which is $499 for the Standar Licence. None of the free plugins seem to work with IDEA12. My current process is to add a breakpoint at the start of the code then attach JConsole, which is shipped with the JDK. Netbeans just uses a wrapper for JConsole, which is really what I want.
Hate to be that guy, but... http://www.reddit.com/r/java/comments/18b3ub/intellij_idea_12_wins_jolt_award_for_coding_tools/?already_submitted=true
Sounds like a very silly thing to be doing. Why would you want that feature?
For someone new, that has no idea what something does. So you could take notes on what something is that are not comments in the code. Just reminders to yourself while your learning.
Would automatically placing a comment over every instance of "public" be sufficient? I dont' really see the point of doing this, but I think you can do it by editing your code style in eclipse.
Well, you could edit your Run Configuration to use a Before Launch tool. It can run a command line tool from there and launch JConsole. That would at least eliminate the back and forth. 
I think the idea is to have the comment appear as a tooltip when hovered over, rather than it always being visible like standard code comments. I vaguely see the idea, but beyond the dozen or so keywords someone starting out will need to know, there's nothing that javadocs shouldn't be able to cover - and if there is that's what Google or /r/javahelp etc are for.
Yes you wouldn't want it to always be visible and just hovered over. But some people don't learn well from just reading something. Putting it in their own words and working from that point. It was just a shot in the dark to help but if its that strange of an idea may just have to work without.
Doesn't this already exist (at least in some capacity) in Eclipse? Albeit the note is Eclipse's reference data for the element of whatever language you're in, but if you're new and just need basic information on what an element does it should be sufficient. Try it out: In Eclipse hover over a keyword and press CTRL.
Or, you know, use `System.out.print()`.
Doesn't that just allow you to open the declarations? like in public static void main(String[] args) {} Only thing that happens when you press ctrl is that if the mouse is over main it'll give you a box that says open declaration, or open implementation. Nothing happens over anything else.
System.out.print() id what you want. But if you want to write better code, look up string concatenation (+) or better yet, StringBuilder.
Got it working now, thank you!
Why would you come to /r/java to rant about people being against Java and what are you referring to? 
In Eclipse, the //TODO: comment will create a task in your outline/warnings. For example, auto-generated catches will make TODO, but I use this for stubs a lot to let me know that I need to go back and do something. I'm sure that in Eclipse, you can configure other comments similar to TODO
I tried your search function but it still wasn't highlighting. i think I'm going about this the wrong way. I might try reworking it with a JPane, or a JEditorPane. I'll keep working on it though. Of course it could always be a problem with how I have my KeyListeners set up, but I'm not entirely sure. Setting them up that way worked for my other actions. As you mentioned either way my highlight logic was messed up and would have produced incorrect results anyway.
There are a limited number of keywords in Java, and you should be able to learn them fairly quickly. Keep a list somewhere, or refer to something like [this](http://en.wikipedia.org/wiki/List_of_Java_keywords). Reading the [Java tutorials](http://docs.oracle.com/javase/tutorial/) might also be helpful. Also, never underestimate the utility of paper notes (such as a notebook, sheet of paper, sticky notes, etc.).
I am pretty sure what you want is available by default in eclipse and most ide's now. Just add javadoc comments above the functions/variables you want those pop-ups to appear for and it should show whenever you hover over that function name. I dont think you can do this for random words though; only classes, functions, and variables.
This I agree with. However this isn't for me. I have minor experience with C and C++ and having learned bits and pieces of java to help other friends with their homework. I have another friend who just getting the desire to learn, however he is one who prefers having a written example with notes all over it. I did recommend just writing it out and doing whatever he needed to so he could remember it. When he asked me if there was a an environment that did that as well. So I asked lol.
Does the AP program not have any recommended texts? I can try and email the teacher at the highschool I give a talk to the senior java class tomorrow though and ask them what they use. 
We just started use Concordion for our acceptance and integration tests. Easy to use interface so that even our business analysts can write tests and our test team just hooks the variables up. Defiantly worth a look. http://www.concordion.org/
This is my favorite intro to java book. http://www.murach.com/books/javp/index.htm This is the link to instructors materials. http://www.murach.com/books/javp/iguide.htm
Just use javadocs!
My school uses "Java Methods A&amp;AB, AP Edition" by Maria Litvin and Gary Litvin.
The magic google keywords you're looking for here are "[2d collision detection](https://www.google.com/?q=2d+collision+detection)".
Because clearly maximizing IO is the right choice? 
Generally for rectangle collisions you want to see if the largestX on rect1 &gt;= smallestX on rect2 &amp;&amp; smallestX on rect1 &lt;= largestX on rect2 And the same for the y values of thwack rectangle. This will show you if they're inside each other. I hope that's what you were looking for! Good luck!
You can probably do something like this with NetBeans Hints. There isn't an interface to create the hint, you'd have to program them. http://platform.netbeans.org/tutorials/nbm-java-hint.html You also might want to look at http://www.bluej.org if they are new to programming and OO.
This assignment isn't exactly one where you should be optimizing IO, rather than learning the basics.
either [Head First Java](http://www.amazon.com/Head-First-Java-Kathy-Sierra/dp/0596009208) by Kathy Sierra or [Beginning Java](http://www.amazon.com/Ivor-Hortons-Beginning-Java-Horton/dp/0470404140/) by Ivor Horton.
Thanks!
A much better alternative for that kind of smaller script is to just write it in Python. Saves all kinds of hassle. If you need to import Java classes, use Jython.
Yes, but if you need to use java. For learning purposes, for example. I actually found this technique in one good book on algorithms, which teaches them in java.
Or you can create and run a JAR with as many classes and other resources as you want.
I know how comments work, and folding. I went over this with my friend but they don't quite fit the way he wanted to go bout it.
An even better alternative to that is to write it in Perl or Bash. Why not Ruby, or VBScript or JScript or countless other languages. Hell I'm going to start comparing Python to Cobol soon, because I bet you in a few years it'll be just as useless!
Why not just do it in an IDE that makes this kind of thing easy? Then you can have classes in separate files like they are meant to be, and running it is simply a case of pressing the Play button in the IDE. Or additionally, if you use Gradle or Maven they have plugins to allow you to execute the application easily without needing to worry about putting all the classes together. 
No, Perl is [not a good alternative](http://www.garshol.priv.no/download/text/perl.html). Nor are bash, VBScript or JScript, for obvious reasons. Ruby might be a good alternative. There's even a JRuby, comparable to Jython.
+1 for Head First. It'd be especially good for high school, as it strives to deliver the concepts in as digestible a way as possible while maintaining reader interest. Whatever the opposite of dry and academic is, that's Head First.
If you have comments defined with annotations prior to method definition.. they come up as that... 
fewer*
this is the bad boy you want.
Just because you have "20 years of development experience" doesn't make poorly structured code correct. The purpose behind structure is to make it easier for people to read. if (!(multiplo3 || multiplo5)) System.out.print(i); else { if (multiplo3) System.out.print("Fizz"); if (multiplo5) System.out.print("Buzz"); } System.out.println(); Doesn't run faster than: if (!(multiplo3 || multiplo5)) System.out.print(i); else { if (multiplo3) System.out.print("Fizz"); if (multiplo5) System.out.print("Buzz"); } System.out.println(); Just because it uses less lines in the source code. 
Head First Java - no contest - it's like reading a comic book.
Javadoc is a terrible resource for learning Java. I'm all for making custom slides, but I'd only ever use Javadoc after reaching a fair degree of expertise with Java. They will need to get their head round OO principles first.
Fair enough. The head first Java book is a good easy intro to Java but it's a rubbish reference. It might give you an idea for how to structure your lessons though, it teaches by example rather than giving a dense technical knowledge dump.
I found Effective Java to be really good. It can be kind of intimidating if you see how many of the small but important details you did not follow in your code. It is certainly not a novice Java programmer's book. But if it is above your current level of Java expertise, it is certainly something to aspire to.
I haven't seen an IDE that gives summaries for reserved keywords. You can add javadoc for methods, variables, and classes, but not afaik for keywords. The faster you memorize the meanings of the common ones, the better off you'll be. For keywords, you could keep something like this open while you code, in case you come across one you're not familiar with. https://en.wikipedia.org/wiki/List_of_Java_keywords 
Why do you think having more than one return statement is harder to follow and debug?
The web page that it came from is [here](https://travel.runfree.no/travel/).
Can you get the stack trace from the dialog box? Normally, those errors occur when you haven't included a particular package in your project, so most likely a jar is missing. 
You can browse the book here: http://uet.vnu.edu.vn/~chauttm/e-books/java/Effective.Java.2nd.Edition.May.2008.3000th.Release.pdf If you are going to read it I'd buy it though.
No, it does not. Effective Java is neither intended to be an introductory book, nor is it in any way directed towards newer programmers. It expects that you already have a strong grasp of the language fundamentals and general programming concepts. Instead, it's a series of "best practices" intended to help intermediate / advanced java programmers make better decisions when it comes to designing their programs.
I used this. It provides Autocompletion and identifies .less files. Its the best I could find http://www.normalesup.org/~simonet/soft/ow/eclipse-less.fr.html 
[Here](http://pastebin.com/sNsP1m4U) you go, thanks in advance for any help!
Well deserved, but until they have c and c++ support at least as good as NetBeans or Eclipse CDT I just can't see myself switching. Both Eclipse and (especially) NetBeans have come far enough on the Java side so they're at least competitive (though certainly not equal).
With beautiful, compilable poetry like this, I'm seriously at a loss as to why I'm single.
compilable is not enough, you should also fix the warnings
love = false :(
It means it couldn't find a class dude. Maybe get it a Map&lt;&gt; or something. 
 u = 1; me = 1/4*u; // 0 if (u &lt;3*me*2) { // false love = true; } 1/4*u is calculated as (1/4)*u, which is 0.25. Because it's integer mathematics, this is then stored as a 0. Thus the next line calculates 3*0*2 which is also 0, and is not greater than 1.
So, variable 'me' is defined as an integer and (given that this is java) the operation it is assigned to will equal 0. The conditional on the next line will return false. Also, the variable 'love' is never used, most compilers will just optimize it out. Also, formatting dude, formatting.
As someone learning Java, do people actually put the Main method on the same line as the class declaration?
Please don't do that. 
Exactly as I've been learning it. Thanks for confirming.
love is nonexistent!
That stack trace doesn't have the Exception you mentioned - provide a stack trace with the exception you reported.
Nooooo. I formatted it in a horrible way to make it more poem like. In that instance, I was trying to make it look like a title.
I realized that after I posted -- I was thinking "wait, I don't think love was even declared...". But the way you put it, precise.
Yep, you're right it should be a float or double or something. The formatting is completely intentional. See how it looks like half a heart on its side? With sort of the outline of the other half below it? I even made a winking smiley face out of a semi-colon and a bracket. I'm proud of my formatting, it took forever to make it look like that, but I guess I'm the only one who sees it.
My IDE (JGrasp) didn't give me any warnings. I don't even know what a warning is.
Maybe that's what I meant all along. Single awareness day and all that.
 ;} My favorite part
You're the one that just got upset about curly braces and new lines. So who's the real culprit here? Edit: Just because code compiles and gets the job done doesn't mean it's legible or maintainable. Your "20 years of development experience" should have told you that. I'm guessing you are the guy who throws together code that only you can read, which don't get me wrong, is a great way for you to ensure job security. You're probably the type of guy that OP is talking about where as soon as you leave a company, no one understands what your code does. That's why languages have conventions and standards.
Learn Maven. You are going to eventually need to learn it anyway when you get into the "real world".
Are you behind a proxy? Is this your code? As baldbobbo asked what's the stack trace for the error? What's the output in the java console? Is this your code that you've created for the site, or someone else's code that you're trying to run?
enum is not a type in and of itself. I bet that's the issue. You probably want to create an enum class called ORIENTATION.
the only thing that stands out to me is the "public enum"... I think you need to have the enum declared, and then use THAT... so... public enum coordinate { x, y } public interface Battleship{ public int length(); public coordinate position(); public String name(); public void takeDamage(int damage); } And: Use 4 spaces or a tab at the start of each line to format code properly here.
Exactly - in the same way you wouldn't have a method declared as "public class fooBar", "public enum fooBar" isn't valid syntax.
Not really, all I've done is set it up to read the matrix data into a 2-dimensional array. And I created another array that has the row categories(which are countries) sorted in respect to the amount of connections with other countries. So pretty much nothing. My thinking was that if I get the countries(which are represented by nodes) sorted by which ones are the most connected with other countries, then from there I could be able to come up with a formula to graph them. But I have nothing.
I hate your formatting so much.
I see the point the library authors are trying to make, but they're shooting themselves in the foot with their code snippets on that page. JPA query - longest line of code: CriteriaQuery&lt;Person&gt; criteriaQuery = criteriaBuilder.createQuery(Person.class); Not great, but not terrible. EasyCriteria longest line of code: easyCriteria.addAndSeparatedByOr(1, "id", 1).addAndSeparatedByOr(1, "name", "Sing Out").addAndSeparatedByOr(2, "id", 2).addAndSeparatedByOr(2, "name", "Alive"); Ewwww. Why not spread the EasyCriteria call over multiple lines - it not only helps with the readability, but makes the logic of the query being carried out so much easier to see: easyCriteria.addAndSeparatedByOr(1, "id", 1) .addAndSeparatedByOr(1, "name", "Sing Out") .addAndSeparatedByOr(2, "id", 2) .addAndSeparatedByOr(2, "name", "Alive"); &lt;/rant&gt;
You can find an interesting and lengthy discussion about **Single Entry Single Exit** (SESE) here: http://programmers.stackexchange.com/questions/118703/where-did-the-notion-of-one-return-only-come-from. Personally speaking if I'm honest when I first started developing professionally it wasn't something I was all that aware of. A few of the senior developers would bring it up during code reviews and for a while I just did it because I was told to. It wasn't until I moved jobs and inherited a hefty legacy codebase that the virtues of SESE became apparent. I find it makes it easier to debug as you only have to set one breakpoint. That doesn't seem like a big deal but when you consider having multiple return statements nested within several layers of if statements etc. you can see how this can save you from pulling your hair out. That said SESE can increase the complexity of a method when sticking in a few returns would have been quicker/less lines/less variables/more performant and so on. In my experience though it has never been an issue even in a 'real-time' system with sub millisecond latency tolerances.
If there is one place your code will be criticized for being messy and incorrect it would be /r/java. Even on Valentine's day we're troglodytes. EDIT: here is how I think it should be public class Valentine { public static void main(String[] args) { int you = 1; double me = 0.25; boolean love = (you &lt;3 *me* 2); } }
people usually format and indent their code as well. 
You're liable to get your ass beat for something like that.
Thanks, Kathryn-Railly. Wait "Kathryn"?! So, uh, hey, what are you doing this fine Valentine's Day? Sorry, JK. Where are the [xkcd is relevant](http://xkcd.com/322/) accounts when you need 'em?
Glad you noticed ;}
Ah but the second line is supposed to read "I am the one for you." The full thing is supposed to be: "You are the one. I am the one for you. If you "heart"(love) me too Love is true." It sucks like nothing else poetically, but every line is supposed to mean something, and the crappy formatting is also intentional. "me" and "you" should both be doubles though, definitely. Since it doesn't actually do anything but compile that slipped my mind. I think I'd set it as a float though because "double you" and "double me" sound weird.
Source: https://github.com/sdurant12/particleSystem_v6
but... but the heart! Do you see it? Do you?! Please love me!!!
Thanks Trent! Few understand true art these days...
Or using jgrasp
Java Puzzlers (http://www.javapuzzlers.com/) also by Joshua Bloch has exercises (sort of) to solve, but it's more about subtle Java quirks than the subjects covered by Effective Java. Nevertheless, it's worth mentioning in case you're interested. 
because of jgrasp, i assume you an undergrad. where at?
I attend the University of Vermont.
This is the ugliest piece of code I've come across.
Elegant means less complex, less work, faster, prettier, pretty much anything to each person. One person might think if(num % 15 == 0) return "fizz buzz"; if(num % 3 == 0) return "fizz"; if(num % 5 == 0) return "buzz; return num; is better, while others might think it being more obscure and less obvious makes it less elegant.
Can you post your test code or stick it on github?
how does it form a heart? I don't see it
To be quite honest this test seems a bit convoluted and it would be much easier to look at the ~~noise generator~~ terrain generator you're attempting to multi thread. Reading concurrently from a fixed array shouldn't cause performance issues.
I updated my attempt with your implementation and the prevailing elegant solution I found on that thread: https://github.com/brianmcgee/fizz-buzz Just run FizzBuzzPerfTest and you can quickly see the difference.
there's probably something else as i'm sure array read doesnt' involve any blocking. Some stupid questions: * does your pc actually have more than one CPU? * do you have any synchronized method in the call chain? * are you dealing with plain array or some wrapper such as ArrayList or stuff? * do you call some external libraries ? * do you print the results ? The times on the second example seems too different, are you creating a new thread at each iteration? 
"The initial snippet runs more efficiently than yours." Will users notice the difference? No. Maybe if you run it a billion times it will make a few seconds difference. Allocating a few strings here in there will take no time on anything but the smallest of processor. 
My results were quite different than yours. On a shared Linux machine with a quad core processor and I think OpenJDK 6 64-bit(Note that this means it will be running the server vm which optimizes differently than the client VM) Results (across 5000 tests): Single-Thread time: 0.032492009400000035 Multi-Thread time: 0.001195559199999985 And on a machine running Windows 8 with a quad core processor(with hyperthreading) and the latest Oracle 64-bit JDK: Results (across 5000 tests): Single-Thread time: 5.13817199999995E-4 Multi-Thread time: 3.890263999999922E-4 Both times, my results were in fact as you'd expect, multi-thread time being lower. Try running your program on a different machine, I suspect your processor either isn't truly multicore OR something weird is going on during optimization.
A few questions/tips: - Synchronize the threadTime array properly so we know we can trust thread A to not write to it while thread B is about to do the same. - When do you expect threadTime[0] to be less than 0? Wouldn't both thread A and B always write into threadTime[1]? - The number of threads in your system is "NumberOfCPUs + 1". This means that the OS will have to switch threads and it will possibly make your main thread have higher prio since it has more work to do (creating thread pools, looping over Math.random, shutting down thread pools, looping over system outs, creating Go and so on, on top of doing the same as your workers). - Your two workers both perform the same work. Doing so will make you count their work twice, but only count the work of the main thread once. I would expect similar results for such a setup, since doing twice the work on two parallell threads should take about as much time (roughly) as doing the work once on one thread. - Since there is most certainly thread switching going on, the multithreaded version will be hit by the time it takes the OS to perform a thread switch twice as often (on average) meaning that it might end up taking longer. (See above point if this sounds like I'm saying that multithreading always will be slower. Remember that it performs twice the work.) - Try creating a thread pool that the Go class gets all the time. This will make sure that your application never *creates* more than main thread + thread pool size number of threads. This *might* make it easier for the JIT to do magic, but don't qoute me on that. That is, don't create a new pool on each iteration from the main class. This made a huge impact for me. I can't explain this but my guess is that the creation of new thread pools takes a considerable amount of time, meaning that the OS will give the main thread a bigger time slice. (But don't quote me on this.)
It's sidewise. The pointy part is on the right. I think it's easier to look at the silhouette of the code segment.
Right, but we are talking solutions to a problem. So in that sense, being a few nanoseconds faster is "better"
Very interesting. Although, in this case, since each thread is doing the same amount of work as the Single-Threaded case, and I am averaging their results, you would expect the results to be the same. I guess your results really just confirm that my results are inconclusive and, as others here have suggested, an array read should be okay, and not cause any blocking
It's very late here so I shall upload a full github repo of the project in question tomorrow
- Yes, I have an i5 3570k Quad-Core CPU, it's only a few months old. - There are 0 synchronized methods in my entire project - In this test case, a straight up Array. In my actual project, the areas I am interested in feature Arrays only also. - I am using an open source implementation of a Java port of libnoise, it's integrated directly in my project, I can see all the source files (and have been digging through them) - Print the results? I am unsure what you mean. I did, however, place a whole pile of timers (System.nanoTime() - startTime) through the code to check how long stuff was taking to run (Not in the test case, obviously). Like I said in response to TheBriMan84 I shall be uploading the full project into a Git repo tomorrow
Hey everyone I wanted to thank you all for your comments. They have been extremely helpful. I would have thanked you all sooner but have been away.
Did your code run in interpreted mode? The just in time compiler has the tendency to mess with benchmarks. 
More like one of the [Kestrel](http://ftl.wikia.com/wiki/Ships#Kestrel_Cruiser) ships in FTL
Then why do people program in high level languages? They are always going to be a few nanoseconds (best case) slower than assembly language. You just don't seem to see the full picture of software development. 
Actually, it's my first time doing this, so there's a lot of questions. So far I was able to deploy a service following a tutorial on Netbeans' website. I can access the method through the localhost address and the wsdl is there. But, where do I go from here?
Yes, it was generated automatically when I deployed the service. I can access it in my browser via the localhost address. I'm not sure what do do next
That's completely up to you. What do you want to do next?
&gt; Though now it's just awkward that I managed to attain the results I did... I guess it's a final array, does that count ?? Ye, it is strange. And no, the array being final shouldn't count. If I remember correctly, final only means that you can count on the object having initialized properly, regardless of which thread is using it. I'm not sure about arrays (or primitives) but my guess is that final only makes certain that all threads can see a properly initialized array. I'm also very much not sure what happens with things like final int[] foo = new int[]{1, 2, 3}; But my guess here is that all threads should be able to see the array as {1, 2, 3}. Writes that happen after that though, I'm pretty certain will not be seen by other threads (at least not guaranteed).
Hmm, I can't say I know what Interpreted mode is. Are there alternatives to running Java "just-in-time" ?
Oh ok, cool. I went to the school were the principal developers of that IDE taught. To be honest I didn't think anyone else really used it other than us. Even some of the other professors in our department were critical of it. With that said it's not a bad IDE to learn java on, and has some nice visualisation features. Before you graduate it would be wise to explore more full featured IDEs like eclipse, intellij, netbeans etc. their biggest advantage is that they make programming with unfamiliar libraries much, much, much easier since they will autocomplete available methods, classes, and such, so you spend less time reading java APIs and more time coding. Good luck in school Dharma, and stay warm up there.
This is closer to how I would implement it, except I would move the modulo checks into a method such as isMultipleOfThree(). A lot of people forget how good the jvm is at inlining. Code moved into readable methods will usually (especially in simple cases like this) be just as fast and it doesn't make you try to remember that % == modulo. Also, no reason to not put the returned stings into static final variables. 
http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124 Sitting on my shelf - I learned a lot when I read it 5 years ago. A lot of it went over my head, but as time went on, it made sense.
These can often be solved in one way or another, if you can find what's holding on to those ClassLoader references. See [this blog post](http://cdivilly.wordpress.com/2012/04/23/permgen-memory-leak/) for an example.
[Here is the Repo I have put up](http://www.reddit.com/r/java/comments/18kor5/can_somebody_confirm_deny_this_for_me_does_an/c8g0zxx)
I've rewritten the test case to run better, and placed the [updated version back on PasteBin](http://pastebin.com/xANG1x6K). I've also [put up a public github repository](http://www.reddit.com/r/java/comments/18kor5/can_somebody_confirm_deny_this_for_me_does_an/c8g0zxx) containing my entire project, ready to import and run straight from Eclipse. The weirdest part is that now the Multi-Threaded test results in a FAR SMALLER time than the Single-Threaded test, at least it does on my machine...
I really like [Design Patterns Explained](http://www.amazon.com/Design-Patterns-Explained-Perspective-Object-Oriented/dp/0321247140). The examples are C# but that's close enough to Java to really make no difference. The reason I like it so much is it's not just an implementation book, it really helps you understand design and why patterns are used. If you can understand that, you can actually create the patterns yourself given just the context of the problem.
I appreciated [Patterns in Java](http://www.amazon.com/Patterns-Java-Catalog-Reusable-Illustrated/dp/0471227293/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1360991312&amp;sr=1-1&amp;keywords=patterns+in+java)
If you're looking to learn them, nothing's better than Head First Design Patterns - it's not such a great reference text though. EDIT: Cunningly failed to realise that the link on the comment above actually goes to the book I mean, even though the URL only says "First Design Patterns". Confusing.
What is a design pattern? - also learning java.
Once you get past the first line and have set the initial parameters, you can go through the rest of the file using a while loop. scannerName.hasNext() will return true if there is at least one more token, and false if there are none. So: while(scannerName.hasNext()) { //Store the row and column integers here somehow scannerName.nextLine(); } will loop through the file until it reaches the end. 
oodesign.com
The definition would probably be something like a reusable, commonly used solution to a common design problem/challenge. The idea of them was probably codified by what is now known as the GOF (Gang Of Four) book called, simply Design Patterns. Which came out in the early '90s. The book attempted to find and propose solutions to common problems in software design. e.g. "I keep needing to access all the elements in a container object (such as a list), is there a common way to do this? *looks in GOF book* Ah cool, I'll use the Iterator pattern." However, despite people hoping and trying to use them as solutions to everything what they really gave developers was a language with which to describe problems and solutions to them. Terms like factory method, iterator, singleton, façade etc all sprung out of this (even though some of these terms existed already, the GOF book and others solidified their meaning). So, they're proposed implementations to common problems that you can take and adapt to work in your project, but in a larger sense they're a rich language developers use to describe groups of and interactions between objects.
I was handed a copy of head first design patterns when I started my job. Was told to read it before I wrote any code.
By default the JIT compiler profiles program execution and optimizes your program on the run. This adds some overhead at the beginning and leads to sudden speedups when code is repeatedly run. If your java implementation supports the -Xint flag you can turn of the JIT compiler making it interpret the bytecode directly (slow, but predictable). Otherwise you can warm up your benchmark by calling the measured code repeatedly (very often) before you actually start to measure, this should cause the code to be already optimized when measured. 
I have to disagree, while a good book this is by far the best book I've ever used/seen. http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1361025409&amp;sr=1-1&amp;keywords=Design+patterns+GAng+of+four
http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1361025409&amp;sr=1-1&amp;keywords=Design+patterns+GAng+of+four All ya need to know!
I've done a few things: * Added Maven support. I was able to get rid of a lot of libs etc you were shipping as well as use Maven to grab the native dependencies * Pulled in slf4j/logback for logging * Pulled in Guava for its concurrency utilities * Parallelized the noise generator using a configurable 2D decomposition as opposed to the 1D (striping) approach you were going for. You can play around by changing the noThreads (1= a same thread executor) as well as the x and z chunk sizes. I did a bit of tuning and left the chunk sizes at 10. On my machine that has meant a reduction from around 12.5 seconds to 7.3 seconds. I've added comments so hopefully it should be pretty self-explanatory but gimme a shout if you have any questions. I've sent you a pull request but here is my fork just in case: https://github.com/brianmcgee/paste **Edit:** when tuning the chunk sizes remeber to be mindful of http://en.wikipedia.org/wiki/Amdahl's_law
I think the point blah3div4 is trying to get across is that code execution speed/efficiency isn't the be-all and end-all in terms of elegance; developer time is more expensive than CPU time these days, so having a solution which is easy for a human to read is a bigger factor for "elegance" than performance. ...that said the argument loses most of its weight in the context of this topic mind you, as the first solution is better for the CPU and the developer (but still not ideal for either).
Okay, I suppose getting caught up on the word elegance, yes. It has a different bearing than efficiency; but the way OP worded his solution suggested he was working in terms of efficiency, by containing "less conditional operands". I'm sorry if I got onto different terms with anyone, that's just how I interpreted it 
Okay, you just introduced like FIFTY new technologies to me... like, literally everything you just mentioned. I'm going to have to go through this all tomorrow. Merged your pull request for great justice 
If nothing else I think it highlights how open for interpretation the term "elegance" is when discussing code.
A lot of the enterprise design patterns have been made redundant with JEE developments, especially in v6. Adam Bien seems to be talking a lot of sense in this area - he has a book called Real World JEE patterns which I can recommend. I wouldn't get too hung up on design patterns. As most of the good ones you'll write anyhow if you're a good software developer. Bad developers may follow the book and turn simple problems into disaster areas. 
richy_rich provides a good answer to your question but I just wanted to come at it from a different perspective. Trying to define design patterns is like trying to define a triple play in baseball. If the person understands enough about baseball to learn about a triple play they probably had a basic grasp of a triple play to begin with and having it defined just gives them a richer vocabulary and makes talking about baseball simpler but richer. If you're learning java then getting your hands on a copy of [Head First Design Patterns] (http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124), whether bought or borrowed, is the best thing you can do and it will be well worth it. Design patterns are not so far advanced that a novice can't understand them and they are probably the best tool for learning object-oriented programming principles. And when you first learn them they're cool. It's like seeing how a magician does his tricks.
I don't know. my computer says i need to install java. i go to install it and it says it was interrupted, so i went to the trouble shooting page and it said that i might need to uninstall the older version and that wouldn't uninstall so i figured that must be the problem 
THANK YOU. jesus that took 4 months to figure out. 
While the GoF book is the bible for design patterns, in my opinion it is a bit too dry and academic. The head first book is an excellent book on design patterns. It focuses on a good core set of patterns. Also I found it was far accessible than the GoF book.
Hey, thanks for the great info. These students have not had an intro CS course, but we are limiting enrollment to advanced math students. This is a very small school, so the class will likely be 5-7 students. We will be working a computer lab, and although the computers aren't shiny and new, they should be fine to run some Java code. Speaking of, any suggestion for which IDE to use for high school? I used JCreator and Eclipse in college. I last worked with Java in college (graduated in 2010), so it has been a few years. However, I was pretty deep into it &amp; C++ as well before I became a physics teacher for 3 years!