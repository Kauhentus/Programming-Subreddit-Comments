I never saw the wordsCounter updated except in the constructor. If the constructor takes a sentence as input such "Hello how are you today?" Then wordsCount is only one. I added this at the bottom of the sentenceCounter method: wordsCount = word.split( " " ).length; Also the sentence counter method only counts one sentence. If you wanted to count more than more sentence you could loop around each character and count the periods, question marks and exclamation points like this: for ( int i = 0; i &lt; word.length(); i++ ) { char sentenceId = word.charAt(i); if (sentenceId == '.' || sentenceId == '!' || sentenceId == '?' || sentenceId == ':' || sentenceId == ';') { sentencesCount++; } } 
yes
Instead of learning Java, why don't you focus on Scala instead? It could be the next big thing and is more similar to Ruby, so it could be easier for you. Functional programming is strongly emphasized. 
I consider systems using local time broken.
Okay here are some links to get you started. [MVC Pattern](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) So you will want to learn about MVC to get a basic idea of what you are trying to achieve. [RESTful WebServices](http://en.wikipedia.org/wiki/Representational_state_transfer) You will also want to read about Restful webservices. This is the API for communicating over the web using HTTP POST and GET methods. So your first step is to have a look at some Java webframeworks and decide what works best for you. [Restlet](http://restlet.org/) [Spring MVC](http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/mvc.html) [Play Framework](http://www.playframework.com/) [Spring Roo](http://www.springsource.org/spring-roo) [Grails](http://grails.org/) There are some popular ones to start with but there are many other options. [Sample Q&amp;A Spring + Mongo + Bootstrap Github](http://satishab.blogspot.co.uk/2013/03/part-1-sample-q-application-using-mongo.html) Here is an example app I found online that contains Spring Security/Bootstrap/Mongo DB which is really nicely put together, I found it useful to use as a template when I was doing some projects at home as it has all the components you might need. edit:Formatting 
Your comments are often pointless. In some cases they are almost identical to the java code. In many others they tell you what the code is doing and not why. `setIndex` violates the expected contract of get/set methods. `index` is static, except it's accessed in a non-static way. I'm surprised you don't have compiler warnings for this. `wordsCount` has the same problem (and probably the others). `206.835` is a magic number and should be a `final static` constant for maintainability. Same for `84.6` `Math.floor(value + 0.5)` is a nice trick, but `Math.ceil` exists, use it. `previous == false` is verbose. Use `!previous`. Likewise, `current == true` can be shortened to `current` `SentenceCounter` sounds like a class. Consider `countSentences`. Line 75-79 are mis-indented. Might just be your reddit formatting.
I have JCR admin, development and repository.xml nightmares. Notice how there are tons of links on this page (http://wiki.apache.org/jackrabbit/JcrLinks) from 2006-2009 but only 3 since. The most recent link is from 2 years ago :-/ Don't do it.
I wrote a Sinatra style web framework. It was pretty fun, and not having to deal with spring was nice. 
Could you clarify which statement I made that you disagree with? * It is exceedingly bad practice to step the clock on a live production system. * This is a bug in the JVM, but not one he should be making this much of a fuss about. Regarding the fuss. He (Bruno Bossola) originally emailed the hotspot-runtime-dev mailing list on September 2nd about this issue. The mail thread got 5 responses within a day, the summary of these responses was: * Yes, it's a bug. * You should use NTP. * David Holmes volunteered to dig up a previous prototype of a fix. The last three emails on that thread are from OpenJDK people, to whom he never replied. The *next day* he brings up the issue on concurrency-interest trying to get others to add "push" to the issue to get it fixed sooner. There are many wrong ways and many right ways to get a bug in an open source project fixed. This is not one of the right ones.
The only reason you should be keeping the RTC in local time on a Linux machine is if you are dual booting another OS that expects this. I doubt that situation applies in many production systems (at least I hope it doesn't).
personally, i'd think a strong working knowledge of java is a prerequisite to getting the most out of scala...
I consider software that uses the wall clock as a timer to be broken. Systems have timers for timing. Wall clocks are slewed, leap years and leap seconds exist, etc. Wall clocks aren't appropriate for measuring timespans, timers are. Not to mention that abuse of gettimeofday was so bad that it was a major performance killer prior to gtod being implemented as a vsyscall.
Putting aside the other discussions here around clock changes (yes they're evil to running software, but let's be pragmatic here) - the issue here isn't really anything to do with the JVM - it's based on the specific implementation that's been used in the 'ready.await(timeoutInMillis, TimeUnit.MILLISECONDS);' line. I've posted a fairly long comment on the original post explaining the behaviour. It's not a JVM issue per-se (separating JVM from runtime libraries) and it's not a bug (although the javadoc is probably a little nebulous). 
I tried that link too. Also couldn't get it to work. Downloaded the Eclipse setup they modified for Java 8. Downloaded the Java 8 SDK. Followed the install instructions (compiler setting etc) and pasted in the first example. Error: Lambda expressions are allowed only at source level 1.8 or above
If only the JEE marketing people actually developed applications, they could answer your question. Pointing this out might be a way to get a sales engineer involved.
Source code: https://github.com/Simtay/SimpleCRUD/
so what it looks like you're trying to do is a DFS recursive algorithm (Depth First Search). I'm gonna attempt at a re-write of your code, but before I do there's a few things; cont.getClass().toString().equals("class javax.swing.JInternalFrame") is essentially the same as cont instanceof JInternalFrame As well, you're checking for children based on a String value. As such, you shouldn't use the == to make a comparison check, use .equals() instead. Anyways, here goes nothing! [My code snippet w/ recursive](http://pastebin.com/KBFn8ui4)
What you're trying to do is essentially a tree search. If you're looking to check all the nodes at a level before going down to the next level, you want a breadth first search which can't be easily implemented with recursion. The alternative is to do a depth first search (or in order or post order) search which can be implemented with recursion. Lets take a step back, though. This: cont.getClass().toString().equals("class javax.swing.JPanel") is pretty ugly and generally considered a poor practice on several levels. Check out this one: http://www.javapractices.com/topic/TopicAction.do?Id=31 Furthermore, is there a reason you're not using instanceof? cont.instanceof(javax.swing.JPanel) Furthermore, you do all that casting up top and never use it. You're just checking for supported classes which are all children of Container, so really your method should probably just take in a container. Anyway, back to the task at hand. Here's some rough code for a pre-order traversal getComponentByName(Container container, String name) // check if component_to_search is what we're looking for if(container.getName() == name) { return container; } else { // get children Component[] components = container.getComponents(); // for each child for(Component component: components) { if (component.instanceof(Container)) { // visit each node and return if found Container found = getComponentByName((Container) component, name); if (found != null) return found; } } } return null; 
I don't understand? What is JEE? Isn't that something Spring related? Why is this related to a Maven archetype? There are plenty of example applications using JSF, there is one listed on the frontpage of this subreddit now.
IMO, the JBoss Quickstarts are a great place to start. Here is one with JSF 2.x support: http://www.jboss.org/jdf/quickstarts/jboss-as-quickstart/greeter/ 
You could also look for some help [here](http://www.reddit.com/r/java/comments/1luvdi/help_with_recursion/).
So it talks about how HashSet is using HashMap internally, but not about how HashMap actually stores things uniquely. I don't think this really explains anything.
Agreed. Get some CDI in that as well!
JEE.equals("Java Enterprise Edition") Snide comment to suggest that a standardized process is a merchandised process.
stay away from maven. day 0 it's nice. then you want to do something it doesn't support nicely. :(
JEE doesn't equal Java Enterprise Edition, that would be Java EE ;) "jee" officially is something from Spring, it's in one of their namespaces: &lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jee="http://www.springframework.org/schema/jee"&gt; Now I won't argue about JEE vs jee, but the latter is definitely a Spring thing.
very good article , covering all the things about fcfs
Pastebin link didn't work :) 
Working link: http://pastebin.com/e3bFguDr Remove the [link] and [/link] around it, those aren't needed on reddit.
Line 39 doesn't work because position is a primitive int, not an Integer object. Remove the ".intValue()" and it should work.
Why are you trying to find the intValue of an int? It looks like you intended position to be an index into something, but you're not using it like that there.
Marvelous you posted this complex tutorial, but what is the point of it besides spamming your site?
Umm no dude, JEE.equals(jee); if you look in the XSD: &lt;![CDATA[ Defines configuration elements for access to traditional Java EE components such as JNDI resources and EJB session beans. ]]&gt;
Hint: BigInteger is immutable Edit: Oups sorry, I referred to line 40 which should be "total = total.add(..." otherwise the add result will be discarded
The startup time is only an issue if you keep restarting the jvm imho.
.....And then you write a plugin which is what this thread is about. So you don't go back to the world where every build is unique. With Maven you know where the source files are, you know the order in which things get built, and you can see what tweaks there are to the build process. With Gradle, you start reading the source.
Maven's big problem is being great at a couple of things but when you go too far, it gets heavy. Development management suffers in the same way of bringing up an EC2 instance on AWS if you're not a sysadmin. You can go easy, but once things are complicated, it gets hairy. For tiny simple projects, it's great. Just like ruby on rails. But once you need customisation, it starts to hurt. It acts way too much like a framework instead of a library. NB: Configuring in js lint vs executing a command line version http://mojo.codehaus.org/jslint-maven-plugin/usage.html https://github.com/reid/node-jslint 
Like you said, too low level. Split the project architecturally to this "low level" implementation, and create a higher level where the primitives are Reddit "business functions" like session, login, post, queryForUser, queryForThread etc.
nice!
WE ARE LOVE ME?
who dont love this childhood game :)
Maven is powerful but ugly. Java went through a period where people thought that all configuration files needed to be XML, which is actually a terrible language for config files. Maven is from that era. Check out some of the Maven alternatives like Gradle, SBT, or Ivy - they are much more pleasant to use and are backwards compatible with Maven.
https://github.com/tulskiy/jkeymaster
The following code would cause some issues, in my opinion: Employee employee4 = new Employee(30, "Bob", null); Employee employee5 = new Employee(30, "Bob", null); Object employee6 = new Object(); System.out.println("employee4.hashCode() = " + employee4.hashCode()); System.out.println("employee5.hashCode() = " + employee5.hashCode()); System.out.println("employee4.equals(employee5) = " + employee4.equals(employee5)); System.out.println("employee5.hashCode() = " + employee5.hashCode()); System.out.println("employee6.hashCode() = " + employee6.hashCode()); System.out.println("employee5.equals(employee6) = " + employee5.equals(employee6)); Results in "false" for emp4 check against emp5, and the final check will throw a ClassCastException. This example is not "horrible," but it definitely sends people down a bad path for the long run. Just google better examples
I have a legally obtained windows ISO from my uni, so I would just install Virtualbox, put Java 6 on that windows VM and fire it up anytime I want to play the game. That way it doesn't mess with the rest of my system.
You can install multiple different JVMs simultaneously. One will be the default in your path. To use one of the others, use a batch file to reset the path and JAVA_HOME environment variables before running the other app (from that same environment.) Google a little and you should find examples.
or he could just grab a free version of Linux. If all he needs is his browser (which, if memory servers, is all you need to play rune) then Ubuntu on Virtualbox will be fine.
You're right. He didn't specify his OS, so I just assumed that he uses Windows. I don't really buy into the write-once-run-everywhere or cross-browser compatibility stuff. My favourite game, Airmech (browser edition), doesn't work on my Ubuntu's Google Chrome. =(
I will see if my uni offers this and if it does, i'll give it a go. Thanks for the good idea!
How do I google this for examples? Like what would i youtube or what not? ; )
Does it work in firefox?
The download page only has PC and Chrome versions. https://www.carbongames.com/download.html
One of these links may help : http://uhdttlc.blogspot.com/2013/01/switching-between-java-versions.html https://blogs.oracle.com/pranav/entry/switch_between_different_jdk_v
that's too bad. i hate having to fall back to windows (I'm on Ubuntu as much as possible) for one or two things but, alas, it's necessary for some things. 
Thanks so much!!
Thanks!
thanks for the reply, i'll check the docs. [edited] I am storing the user input at a string buffer. And have to format that string buffer to the given mask "0,00" (if it is empty) or like the bunch of numbers that i've posted. 
Right, I caught that you're using a StringBuffer. Why? Appropriate data types, and such. However, if you simply *must* use a StringBuffer, check out [Float.valueOf] (http://docs.oracle.com/javase/6/docs/api/java/lang/Float.html) -- scroll down a bit to valueOf, as reddit's markdown doesn't seem to like the extra parens.
I am using StringBuffer just to have a easy way to append/delete chars.
IMO, XML is an excellent language for configuration. You can validate against Schemas and DTDs, it's structured nicely with attributes and values. What it's a horrible language at is web protocols. The people usually complaining about XML don't understand the difference. In Maven, you can organize a parent pom and hierarchically any number of children. Most build files stay small anyway when you organize into modules like this. The other build tools listed above (of which Ivy brings the dependency management from maven to ant, it's not a build tool) still leave the chaotic world where the developer structures build any way they want. If you're lucky an experienced dev used the tool, and everything makes sense. Most of the time you're reading the source of the build. The declarative and plugin nature of maven prevents this. Customizations to your build get put in a plugin, which is often shared so others can benefit. Again, IMO, Gradle, SBT are a step backwards.
A typical maven plugin is deployed with 5 lines, package (typically company path), the artificat itself, and it's version number along with the two lines grouping this as a plugin/dependency. The rest are optional. Your example isn't a build system it's a tool that could be part of a build system. There is no structure, and you have to tell it where your source files live each time you run it. Maven fixes all of that. P.S. My experience with tools distributed via npms and rvm builds has been one of frustration since often it assumes you have a particular version of some library or some binary in a specific location.
If you are not deleting then simple string concatenation is fine, it all compiles down to the same bytecode. 
&gt; Your example isn't a build system it's a tool that could be part of a build system. The XML provided is pretty much a command to tell maven to use jslint and when. So fine, let's say we let it use the default targets in the build cycle. http://blog.tfd.co.uk/2009/07/29/howto-add-more-than-one-source-directory-into-a-maven-build/ Here's possibly an older example of adding a second source to a build. Specific to SOAP, which is fun, but that's a LOT of XML just to add 1. Generate and target src code compilation for the testing cycle 2. Generate and target src code for the normal cycle 3. Copying over resources. Does this not seem like a lot of stuff just to get this environment to do something? This is a similar difference between configuring apache httpd and nginx. This is the same argument of java compared to scala, c# or python class and attribute definitions. scala and c# have it down to a science without making attributes public. Why write so much more to accomplish similar things. For really simple things, maven is awesome. A 20 controller, no external source, simple resources project, maven is awesome. Don't get me wrong. But once your project needs to start doing things that aren't so cut and dry, it hurts.
But it has to be an actual .TXT file, not .xml
But it has to be an actual .TXT file, not .xml
Since this is just a school project and you want something that will serve its purpose that is quick and simple, I would go with Java object serialization mechanism. JSON/XML would be the way to go if you need to ensure compatibility with other applications. But for quick and dirty within your app, just use the built in serialization/deserialization process. Again, I highlight that this is a quick and dirty way of doing it, and not the best. See: * http://www.ibm.com/developerworks/library/j-5things1/ * http://docs.oracle.com/javase/7/docs/api/java/io/ObjectOutputStream.html * http://www.wikihow.com/Serialize-an-Object-in-Java
If it is only entities and no relations i would just use a csv file. You can just save these as .txt. JSON and XML are also good as /u/lborloz suggested. It does not really matter what ending you give the files.
Id say SQLite would fit in there almost as well. From a standpoint of server installation its just as invasive as JSON or XML. My vote is still with JSON personally.
When you say an actual .txt what do you mean? Just the file extension? Should the data be in plain human strings?
I just noticed that you said it has to be txt file. Does this mean that the serialization just needs to be character based? If so, JSON/XML are technically txt files. Alternatively, the other option is csv, but then that is no more txt file than json/xml. In other words, go back to your professor and find out what he's talking about because requirements are lost in translation.
So put your json or xml in a .txt file lol. It doesn't matter what the file extension is.
Isn't there something in the API to parse strings into a text file?
Yes, the data is supposed to be in pain strings that a human can read
BufferedWriter will write text files, I just don't know what the structure of the data should be like 
In general, if your code is of the form: String x = ""; loop { x += something; } return x; then your code should be StringBuilder x = new StringBuilder(); loop { x.append(something); } return x.toString(); but if your code is of the form String x = something; return new StringBuilder(x) .append(somethingElse[0]) .append(somethingElse[1]) .append(somethingElse[n]) .toString(); then your code should be return x + somethingElse[0] + somethingElse[1] + somethingElse[n];
Would a multimap work?
Just write a file that puts a $ or something before the employee and a &amp; before whatever else you need to store, like maybe a ssn, and a @ sign to divide up the entries. So the text file would look like this $Joe Scmoe &amp;123-456-7890 @ $Harry Gary &amp;098-765-4321 Then when reading it, if the read line starts with '$' then do what you need to do with the name, if it starts with '&amp;' do what you need to do with the SSN. And if the content equals '@' then the next $ sign is another name. Maybe I'm just wayyy overthinking this though.
I am deleting. One issue that I found using .delete and .deleteCharAt seens like the length of the string doesn't change it is really weird. Still trying how to achieve my pseudo-masking.
These look like monetary values in which case I certainly hope OP *isn't* using `float` for them. Furthermore, The Right Thing here is obviously to use a locale to print the numbers rather than hard-code the "," (I presume OP's program is for non-English speakers).
If I understand you correctly, you definitely should be using BigDecimal. Then all your other problems will go away. Then look at java.text.DecimalFormat 
The `equals` implementation is horrible. And broken. Horribly broken.
https://code.google.com/p/snakeyaml/ https://github.com/FasterXML/jackson
I don't fully agree with this: StringBuffer x = new StringBuilder(); loop { x.append(something); } return x.toString(); The original you put up was fine, both produce identical bytecode but the first has less chance for error and is easier to read. It's only if I'm passing the string to other methods that I'd use an SB. 
Hence the "appropriate numeric data type." Currency comes to mind...
So JEE equals jee, but neither of them equals Java EE ;) There is nothing in Java EE itself called JEE or jee! That Spring has a namespace that they call jee and associate with "traditional Java EE components" (whatever that means) is their problem.
not according to http://stackoverflow.com/questions/1532461/stringbuilder-vs-string-concatenation-in-tostring-in-java
yes it is for non-English speakers. The problem with float is that i've created a custom keyboard that only append numbers, and the last two have always to be the decimal case, my keyboard don't have the "dot" input to set a decimal number, thats why I am appending a string and manipulating the "," in the last two chars.
&gt; IMO, XML is an excellent language for configuration. You can validate against Schemas and DTDs, it's structured nicely with attributes and values. What it's a horrible language at is web protocols. The people usually complaining about XML don't understand the difference. I don't agree. The problem with XML as a general data representation language is hinted at in the name. eXtensible **Markup** Language. XML is based on SGML, and like SGML, it was designed for adding "markup" to text (aka adding metadata to sections of text in a document), and it's good at it. As a general data representation language, and this includes using it for config files, XML is excessively verbose, fragile, and difficult to read. This is why people are moving away from it to alternatives like JSON.
old older than abraham lincoln, older than god, old old old news
That appears to be agreeing with me. The compiler turns it all into StringBuilder behind the scenes. 
&gt; At the point where you're concatenating in a loop - that's usually when the compiler can't substitute StringBuilder by itself. and see the second-to-top answer as well
This is something we are working on at the moment but I don't think we would have set up in time, hopefully next time though ;)
upcoming support for lambdas
nice and fun game 
It's impossible to recommend this to anyone at any level; for something so trivial, this code should be flawless - it isn't. Examples of problems: * Ignores standard library methods, specific example being [Random.nextInt(int)](http://docs.oracle.com/javase/6/docs/api/java/util/Random.html#nextInt\(int\)). Even worse, it ignores the ++ and -- operators in predictionResult. * Abuse of static instead of creating instances. * No way to exit other than crashing out. * Target number can be zero, i.e. less than low. * No validation on entered value. * Frankly stupid behaviour in predictionResult method, where the low/high values are assigned the value from the input. All of this is before resorting to nit-picking like the presence of an autogenerated Javadoc entry, the incorrectly placed and incomplete annotation on the main method (and complete lack of other javadoc), public methods which should be private, the use of hard coded values in "pick a number between 1-52!", arbitrary spacings, and so on.
I like this idea, but if this type of thing is acceptable, then it's difficult to argue that there's a difference between formatting the data in the way you've suggested and using Json - both introduce markup of some kind, the only difference is that with Json it's easier to understand what the data means!
ummm... You don't have permission to access /simple-crud-web-application-with-jsf-2-1-primefaces-3-5-maven-and-jpa on this server. Apache/2.2.15 (Red Hat) Server at simtay.com Port 80
Thank you for post. I like this approach the most, but what about account example from top post? Should isValid check some complex business rules and should this business rules be enforced in save method? This way is good but if you have to be sure about some rules i cant rely on user of my service api that he will check for validity. 
If the frontend is validating then they would be pretty exceptional. Only a fault in frontend logic or someone probing your system should raise them. 
Or a boolean...
This is very true. I guess he could do it to where it would output like this: Joe Schmoe 123-456-7890 Harry Gary 098-765-4321 Entries are separated by a no character '' so if readLine().contentEquals("") then you know the next line is the next entry. The first line of the entry is the name and all the following lines up to the '' are the persons data. The only problem is that to do it this way requires very strict guidelines and is very prone to errors.
The front end shouldn't validate and services should not rely on the front end to validate. Ever. Once you start doing validation at the service layer exclusively, there is never an excuse or confusion about: 1) Where validation occurs, or how it is implemented. ("Oh, we check that it's an integer in the web layer, but we check the bounds at the service layer" - ridiculous) 2) It makes the web layer far more predictable because you know you have to deal with user input errors. 3) Localization is straightforward because you're returning the error message. If you're coding defensively, you're going to put validation in the service layer anyway, so there is nothing gained from putting it client side. No more pointing fingers between client and server side. If bad input is accepted and processed successfully it is the service side's problem. It's that simple.
&gt; Should validation throw exceptions? Never. If it throws an exception there is a bug in your validation code. &gt; What should they return then? I prefer a validation object which has flags for is valid, and a string for what portion of validation failed. I might get fancy and make it so that validation objects can join together depending on the situation. However, what to return really depends on what you are doing and where you are doing it. &gt; Should validation be enforced if it is not business related before save/update or user can ask for validation? ALWAYS enforce validation and NEVER trust the user. This is the golden rule when it comes to security. You can do validation on the client side to help the user out in real time, but NEVER trust client side validation, ALWAYS validate on the server side.
One pattern that I've found quite useful (in PHP at least) is: if (formSubmitted) { try { // validate if (1 != 1) { throw new ValidationException("Math doesn't make sense"); } // ... // everything is now valid, so perform logic db.add(2); redirect("/result"); } catch (ValidationException e) { errors.add(e.getMessage()); } } This lets you validate in whatever way you want and you can bail out at any point - exceptions are supposed to be exceptional after all, you can leave the client-side to perform basic validation. Easy to understand, easy to extend, and easy to refactor if necessary. You should be replicating validation on both client and server, but (with the exception of my [PhD project](http://openiaml.org)) I don't know of any language that lets you do this.
I just saw that there is a Java Help subreddit. Sorry for posting here
&gt; You can do validation on the client side to help the user out in real time, but NEVER trust client side validation, ALWAYS validate on the server side. Another reason to do client side validation (in addition to server side, ALWAYS) is to save server load from non-malicious but stupid users.
/r/learnprogramming is good too. But while I'm here, I'll help you with your problem. :) I'm not to familiar with scanner, but if you need help with that too, I can look it up real quick. But what you would do is take user input, and assign that to a variable, then use `Integer.parseInt(userInput.trim())` and assign the returned integer to another variable we'll call 'amountToRoll'. Use a for loop to roll the die. So userInput = scanner.read(); //or whatever the method is amountToRoll = Integer.parseInt(userInput.trim()); for(int i = 0; i &lt; amountToRoll; i++) { //Code to roll your die } Edit: fixed semi-colons and check out jakesta's comment for using the scanner and how to get an integer from it.
Here you go. Don't worry about posting things here, the subreddit is pretty lame for the most part. You'll get down voted but you will probably still get answers. google "console input java" - its tough when you don't know what to call the things you are looking for http://stackoverflow.com/questions/4644415/how-to-get-input-from-console-class-in-java http://www.javapractices.com/topic/TopicAction.do?Id=79
This is due to the fact it makes other games/programs on my computer not work. I play league in my spare time, and it will not work when just having installed 6. I already tried : /
Thanks a lot, you guys!
i'm trying to run a game in-browser. - So most likely an applet inside chrome. 
League = LoL? I wasn't aware LoL used any part of Java (maybe it does?) but I think it used Adobe Air or Flash I believe. You can have multiple versions installed, but it's a bit of chaos to know which for sure will run (the Java control panel is somewhat terrible at times). If you're technical at all, you can create a command file in Windows (a .cmd or .bat) and just specify the version to run with java -version:1.6 -cp classpath;goes;here package.name.here.mainClassNameHere
I am assuming in your first example you are using JSR 303? If so, just go with the standard. See this if you have no idea what I am talking about: http://static.springsource.org/spring/docs/3.0.0.RC3/reference/html/ch05s07.html
well, when i ran a game the game wouldn't actually launch. When i switched back to 7 the games would launch. I didn't know it used java at all either. secondly, i do have 2 versions installed and everything just auto uses 7. So can you explain to me how to get to where i need to put that code, and everything that goes in with it. Because honestly, I have no experience with any of this. 
http://services.runescape.com/m=rswiki/en/Community_-_Tech_Support/Solutions#ClassNotFoundException_.28RS2Applet.class.29 Look at the bottom of the page. Let me know if you need help with this.
This is possibly the most civil I've seen this subreddit respond to a basic beginner's question in quite a while. You have the gift, young padawan.
Well, from what I read in your other replies, this approach won't work unfortunately. That's more for standalone applications rather than applets. It does look like there is a downloadable client, though, which might be more promising than loading it in a browser applet. Like was mentioned below by Yneeb, the Java 7 JRE should run Java 6 software fine, though. The class not found bit is an odd peculiarity but likely goes hand-in-hand with the chaos of multi-Java setups. You may try clearing the java cache and internet temp files and launching it again. Are you using 32 or 64 bit versions of 6 and 7 JREs? And for Windows? I generally use 64-bit for everything that I can, but on my VM at work, 32-bit seems to be less flaky with saving some settings in the control panel. Sorry, none of that is really ELI5-friendly really but hopefully some makes sense, and google may help with the parts that aren't obvious (clearing cache and all that), but if it's way, way over your head -- the downloadable client may be the most straightforward solution unless absolutely undesirable.
See also the [original mailing list post](http://thread.gmane.org/gmane.comp.java.openjdk.jdk8.devel/2696) and the follow up discussion.
Scanner in = new Scanner(System.in); int amountToRoll = in.nextInt();
Please don't forget your semi-colons after all statements.
Brother, you should ditch JSF. Despite your initial notions JSF isn't going to make your life easier. &gt;JSF promises to make java web development easier and quicker. But when you get beyond the basics of JSF, it becomes very complex. The behind-the-scenes is even more complex, and requires an expert to optimize. Why invest all your time learning a the technology who’s programming interface has very little in common with the standard web toolkit? Why not just take the plunge and learn the technologies that the JSF framework is working so hard to generate: HTML, CSS, and Javascript? -[Some dude I agree with](http://davidwburns.wordpress.com/2012/04/23/why-i-dont-use-java-server-faces-jsf/) I would employ jerseyREST/Spring/JAXB backend, and a html5/CSS/jquery front end. AngularJS is a cool mvc, but if you are new to js, I would just stick with good ole jquery.
Crap. Been toying with Python and forgot to add the semi-colons.
No, but you only have one "bit" of information; you can't give a discriminated error message. For most fields, just knowing "is invalid" is not enough.
https://github.com/thekarangoel/Projects Scroll down and theres a massive list of projects to try.
 fourRoll += 0; Even for a beginner, awesome.
Unless error messages are a seperate entity and solved seperately ("if invalid it's because it fails this format expression"). This is done in grails for example. 
&gt; I looked on google and saw a lot of advice to use XSLT in java, but I don't have a XSL file, just XML. ...so? Write your own XSL file. Or[ Google for someone else's](https://www.google.co.uk/search?q=rss+to+html+using+xslt), but it's a trivial transformation stylesheet to create.
Hmm. I stopped reading that article after skimming the header points and reading the opening statement: &gt; This article contains a fair amount of arrogance, bias, and perhaps some ignorance There's more than some ignorance present from the blog author. That said I can't imagine working with JSF now without having [Primefaces](http://www.primefaces.org/showcase/ui/home.jsf) to make things easier on the front end.
This question implies that you are not a programmer. And I don’t mean that you’re not a programmer who has 15 years of experience on his back. I mean that you’re not the *type* to be a programmer. Let me elaborate: I have been programming since I was 7. Okay, programming is a little bit over the top here, I mucked around in BASIC on my grandfather’s PC because I wanted to know how it works. Later I got my own first 8-bit machine which I then started to program in assembler. I was 11. Since then, whenever I had an itch to scratch, I programmed my own itch scratcher. And that’s what programming is: finding a solution to a problem you have. If you can’t even find a problem to solve you are not a programmer. Please do something else.
look for "todo" comments in source code in open source projects you like.
Use JPA validation and keep calm and carry on. 
Excellent, I'm doing Java 8 lambda training later this month and it's good to be able to say that the release schedule looks more or less on track.
How slow is it? On my machine, 60ms. Edit: http://en.wikipedia.org/wiki/Mental_chronometry &gt; Mean RT for college-age individuals is about 160 milliseconds to detect an auditory stimulus, and approximately 190 milliseconds to detect visual stimulus.
I don't think the poster is quite ready yet to contribute to open source projects.
i'm not too familiar with this, but trying giving this a go: http://stackoverflow.com/questions/15159810/how-can-i-use-an-image-as-a-button-in-java-swing 
it's a good point. the UI design rule I use is if the user "needs" instant information then yes do client side if not then no. 
What's the subreddit called
Client side validation should be really fast. The load saved there will be pretty miniscule compared to server side validation that will do things like hit the database.
I agree with the citation and JSF is pain in my ass from last year. But this technology is enforcedby our customer so i need to live with it.
Thank you for your answer. Can i ask you how you do validation in terms of objects? Dous your service has validation methods, or do you have validator objects which you use in your services? &gt; You can do validation on the client side By user i ment user of the service api (programmer) not user of the webapp. But i think it does not matter, just dont trust them. So if i have void save(Entity e); In this method i do the validation. If validation fails what to do? How do i notify user about that validation failed and entity was not saved? Or should method return some validation object, like Errors and he could then ask errors.isEmpty() ...? Thanks again.
It is *my opinion* (not more!) that you can not learn how to solve problems: you either possess the right mind set, or you don’t. That’s basically how I see it: you have to be born a programmer. I’m not sure though that programming is the only profession requiring this mind set: Mr. Wulf from the movie Pulp Fiction would have made a pretty decent programmer, too, I think. :) Of course you can go about and learn the syntax of 15 programming languages and devour a dozen books on design patterns and programming practices but none of that will make you a programmer if you have no idea how to solve a problem.
We, unfortunately, have legacy to contend with. So currently, we have a Validator interface which takes the Object we care about in a single method. To do validation, we run through all of these validators. I would NOT recommend that you do that. Rather, checkout [JSR 303](http://beanvalidation.org/1.0/spec/) and [JSR 349](http://beanvalidation.org/1.1/spec/). It requires that your framework provides a validator service (spring does, [see here](http://static.springsource.org/spring/docs/3.0.0.RC3/reference/html/ch05s07.html)) but gives you all of the annotations and tools you need to be able to mark up an object for validation. &gt; So if i have void save(Entity e); In this method i do the validation. If validation fails what to do? How do i notify user about that validation failed and entity was not saved? Or should method return some validation object, like Errors and he could then ask errors.isEmpty() ...? In this particular case, I would throw an exception if validation failed. Include whatever information you can about the validation failure and then let the user deal with it. The thing validating Entity shouldn't throw the exception, rather, whatever is running the validator should be in charge of throwing the exception. This way you can potentially do multiple validation steps and let the user know that "Hey, it failed in several ways!" if you so choose.
well explained article !!
Seriously, are you going for a new low for /r/java?
Uhm, no, it’s not. There are a lot of pitfalls when creating an executable JAR, both with Eclipse and manually. Also, the situation used in this article (single project with no dependencies at all) rarely happens in reality. This article is useless at best.
Do u hav any experience in java ? u can select project name to create an jar ,so it does not matter to have single java file or many java files , what it really cares to have a java class with main function 
Ah, I forgot to add `&lt;goals&gt;&lt;goal&gt;run&lt;/goal&gt;&lt;/goals&gt;` to the executions.
I think when you use a mouselistener, when you click it gives you your x, y coordinates, if you check whether the click is in the square or w/e your picture is in so you should be able to detect whether the click was on your image, then change which picture to load, then refresh the screen
I think you'll also want to have a generic Die class that takes some parameters such as the range of values it can roll. That class might look something like: class Die{ private final int rangeBegin; private final int rangeEnd; private final Random rng; public Die(int rangeBegin, int rangeEnd){ this.rangeBegin = rangeBegin; this.rangeEnd = rangeEnd; this.rng = new Random(); } public int rollDie(){ return rng.nextInt((rangeEnd - rangeBegin) + 1) + rangeBegin; } } class DiceRoller{ private final List&lt;Die&gt; dice; private final DiceRollCalculation calculationStrategy; public DiceRoller(List&lt;Die&gt; dice, DiceRollCalculation calculationStrategy){ this.dice = dice; this.calculationStrategy = calculationStrategy; } public int rollDice(){ return calculationStrategy.roll(dice); } } enum DiceRollCalculation{ SUM{ .... }, MAX{ int roll(List&lt;Die&gt; dice){ int max = -1; for(Die die : dice){ int result = die.rollDie(); if(result &gt; max){ max = result; } } return max; } }; abstract int roll(List&lt;Die&gt; dice); } Use: List&lt;Die&gt; dice = new ArrayList&lt;Die&gt;(); Die fourToTwentyDie = new Die(4,20); for(int i = 0; i &lt; numberOfDie; i++){ dice.add(fourToTwentyDie); } DiceRoller sumRoller = new DiceRoller(dice, DiceRollCalculation.SUM); DiceRoller maxRoller = new DiceRoller(dice, DiceRollCalculation.MAX); int roll1 = sumRoller.roll(); int roll2 = maxRoller.roll(); You can encapsulate these Die in some sort of DiceRoller class that takes some parameters and handles rolling multiple results, calculating their sum (which might be max or sum).
I have lots of experience in Java. Which is why I am saying the things I am saying. Please stop submitting bad articles and for the love of whatever deity you prefer, *stop defending them*.
No it’s not. Stop pushing your blog on reddit.
I feel you bro. Good luck out there.
I only noticed because I made the exact same mistake. I've also been poking around in python. Lol
Now you are being a pedantic ass. Java Enterprise Edition has been called JEE in the community for years.
I didn't have time to look into Lambdas and considering im still pretty much a beginner what are diffrences and will it be hard to switch to lambdas?
Check out the code from Venkat's presentation - [available here](http://www.agiledeveloper.com/downloads.html) Similarly - I've found that [this page from Oracle](http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html) explains Lambda's well In short - Lambda's make dealing with collections easier/more efficient. No, it will take some effort to learn the syntax but not 'hard'. 
Everything is slowly dying. The life of the language is all dependent on how well it changes with emerging technologies and adapts to fit the needs of developers and consumers. If you're worried of it dying soon I wouldn't be. There are way too many lines of java code in production for it to disappear too quickly. 
No
http://docs.oracle.com/javase/tutorial/java/
thanks :)
cheers :)
What about desktop software development?
What about smart phones. Isn't the primary development language java? 
1. Correct. A servlet will be used for many requests. 2. Yep. Keep in mind that generally each request has it's own thread, so the BookingManager should be able to deal with multiple things at the same time.
Java has been "dying" according to some people ever since its creation. Even if today a new technology would emerge that would be a perfect replacement for Java in every single way, it would take decades to phase out all the code running in production in organisations across the world. One day it might die, but it will be dead in the same way COBOL is dead today: A goldmine for old programmers.
Not sure actually, I have never used it for that, my understanding is that Java in DSD is quite rare anyway.
&gt;When a servlet is.. "created" (loaded by Tomcat?) That's right. The servlet container (Tomcat in this case) loads and instantiates the servlet class. In a simple, non-distributed deployment (and unless the servlet implements `SingleThreadModel`, which is deprecated), the servlet container will maintain only one instance of your servlet. In a distributed deployment, each participating JVM will have its own instance of your servlet. (Servlet 3.0 spec §2.2) &gt;init() is run and then the servlet hangs around waiting for get/post requests and runs doGet/doPost each time. Yeah. Possibly on multiple threads at the same time, so it needs to be thread-safe. &gt;A fresh servlet is not instantiated on each request, right? Correct. &gt;Someone can visit my BookingServlet, which has instantiated a singleton BookingManager object (so other servlets can access the same object) in its init(). Each time BookingServlet receives a get request (from different users, for e.g.) BookingServlet can serve data from the same BookingManager? Yes, but your servlet and anything it uses (including the `BookingManager`) must be thread-safe, because your servlet may be called from multiple threads to handle multiple requests at the same time. If there is anything that's not thread-safe, you'll need to use Java's concurrency facilities (`synchronized`, `volatile`, `ThreadLocal`, `Atomic*`, etc) to manage it. Concurrent programming in Java is a subject in its own right, and one you should be familiar with if you're developing servlets.
Yeah, there's a ton of written code and libraries for everything.
Generally correct. One thing you're missing is that by default the servlet class is not loaded, initialized and init()ed until it has been requested once. You can get around this by using the "load on startup" option. You can specify this either in the web.xml - &lt;servlet&gt; &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;com.myapp.MyServlet&lt;/servlet-class&gt; &lt;load-on-startup&gt;somePositiveIntegerValue&lt;/load-on-startup&gt; &lt;/servlet&gt; or in an annotation - @WebServlet(name = "MyServlet", urlPatterns = "/myservlet", loadOnStartup = 1) public class MyServlet extends HttpServlet { Generally I consider "load-on-startup" a code smell. It's usually indicative that there's something hackish going on... You could create your singleton in your servlet and use "load on startup" with a value of 1 to try and ensure that your servlet gets loaded before any others, but... this would be the "something hackish going on" I mentioned earlier. Using singletons in Java EE contexts is generally discouraged. Java EE apps have support for clustering (running the app on multiple machines and making it appear as one "endpoint") which using a singleton like this would break. There can also be several different classloaders in a Java EE app server - singletons are only guaranteed to be single in one classloader - you can run into weird cases where multiple instances of the singleton can be active at the same time. The right way to do this is to either look in to dependency injection ([Java EE Style](http://docs.oracle.com/javaee/6/tutorial/doc/giwhb.html), Spring, Guice, or whatever), or place the object into an appropriate [scope](http://docs.oracle.com/javaee/6/tutorial/doc/gjbbk.html). If you want your object available to all servlets across all user sessions, you'd put it into 'application' scope. You'd use a [ServletContextListener](http://docs.oracle.com/javaee/6/api/javax/servlet/ServletContextListener.html) to initialize your object and put it into application scope, and optionally pull it out of scope and clean up if you needed to. *edit: had to remove question numbering so code/xml would look right.*
It's quite good (AWT is dead, Swing is stable and mature, JavaFX is growing)
According to the Tiobe index, Java is the #1 language people inquire about. It has traded the #1 spot with C off and on for more than 10 years. http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html
C has 40 years and It's still there, maybe Go replace it sometime, but It's a lesson that good technologies survive a long time :)
This lead me to a bunch of really good code samples, discussions and I bought a book. Thanks for the links!
Why does everybody and their dog try to duplicate the existing (and quite exhaustive) Java API documentation? And how do people manage to fail so badly doing it?
Nope. I sure hope you feel stupid now.
School project, i'm only on my second year in Computer science on an IB course where to code we use java so that is all i have learnt :/ but thanks i might just do that 
Good to see that the flood of bad tutorials never ends. - The default platform encoding is used for encoding the password, sending the request and parsing the response. - Thanks to `PrintWriter` exceptions are swallowed, yet no error handling is performed. - The requested path is not escaped properly. (Well, it’s not escaped at all which is kind of “not properly.”) - Even when doing it right and using a library to perform the request, the content is still decoded using the platform’s default encoding.
Try your library. I like the For Dummies book. Make sure you experiment with the code as you learn it. The best way to learn is through experience!
Venkat's code proves the efficiency. He starts with the problem solved with the options available today - then step-by-step converts it to using Lambda's. Not only is it much fewer lines of code - but it is incredibly easy to read and refactor. It is especially efficient if you are running on multiple core machines (look for .parallelstream) Hard to comment on the 'hard' vs. 'easy' part - everyone is different. I think once you find a use-case for lambda's you'll see the benefit and then re-use from there will be easier (at least that's how I work - get it implemented in 1 place then I'm more comfortable and start using it everywhere). 
 import java.util.*; import java.util.function.Predicate; public class Sample { public static boolean isGreaterThan2(int number) { return number &gt; 2; } public static boolean isEven(int number) { return number % 2 == 0; } public static int doubleIt(int number) { return number * 2; } public static void main(String[] args) { List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4, 5, 6); //double the first even number greater than 3 from the list System.out.println( numbers.stream() .filter(Sample::isGreaterThan2) .filter(Sample::isEven) .mapToInt(Sample::doubleIt) .findFirst() .getAsInt() ); } }
Very nasty... hopefully just a temporary glitch...
what runs the main() method? something in Tomcat?
Well I need a validator for javafx css it's for a site were you can upload javafx styles. if you fancy making that. 
Use String.format float thefloat = Float.valueOf("123.0000000"); System.out.println(String.format("%.2f", thefloat));
&gt; Generally I consider "load-on-startup" a code smell. I consider it a sign that init() takes a while to run. I have a servlet that needs to initialize a fat database pool, load up a few caches, and communicates with a couple of other endpoints before it's ready to serve pages. This takes several seconds to occur and there are a few things that can go wrong. I'd rather this happen when I restart the container rather than waiting for a request to come in... I suppose I could start the container and then use wget to hit the servlet so I can watch the logs, but I fail to see how that's less of a hack than just telling the container to init the servlet right away.
Actually there all you have to do is add a .2 in front of the f. So this line System.out.printf(":Your current pay is $%f.", Total); should look like this System.out.printf(":Your current pay is $%.2f.", Total);
Thx so much &lt;3
Also [Using #Scala for quickie Java hints](http://dataissexy.wordpress.com/2013/09/02/using-scala-for-quickie-java-hints/)
You should probably use [BigDecimal](http://java.dzone.com/articles/working-money-java) instead of float/double anyway
[Here](http://www.dreamincode.net/forums/topic/78802-martyr2s-mega-project-ideas-list/) is a big list of programming ideas. You could also try [Project Euler](http://projecteuler.net/problems).
I don't think so, all I need is a way to type in the window.
May not be what you're looking for, but you could write a desktop app that finds duplicate files on the file system and provide an easy way to choose which ones to delete or to move to somewhere else.
It may be possible to nicely superimpose a text field by retrieving it's Graphics object and filling it with alpha. I haven't tested this method at all, so don't expect it to work.
Pick up gardening.
You can search this subreddit for book suggestions.
Getting memory usage on a running app is called profiling. I use different tools because I work on Android, but [VisualVM][1] is free and supposedly very good, and works with Java EE as well. [1]: http://visualvm.java.net
Yes, most of the data you seek is exposed by the JMX service if you enable it. It'll let you see the current memory sizes in use but it won't let you see into the VM and get e.g. lists of classes back. I had a similar situation to yours about 10 years ago but there weren't any JMX pollers around at the time so I wrote my own to poll and dump data to CSV. Wasn't that complicated. HOWEVER, gc has it's own VM options to enable debug log files and these are often a lot easier to use &amp; various parsers are available to analyse them. WRT your original question, unless you are running multiple apps in the same vm then the values are for your application! :-) To find out what exactly is using your ram try the heap dump option in VisualVM. Normally you create two dumps, before &amp; after, then compare them. One last thing: the memory in use is actually "memory in use" + "memory awaiting GC". The only way to get an "accurate" measure of memory is to force the heaviest GC you have available to you *then* take the reading. Even then it's still not perfect. 
I don't get why there should be a profile difference between development and production. Have you made sure that your testing server is as identical as possible to the production server? If something is happening in production that's not happening in development, then you should be looking at what changes between those steps. You should be testing beyond your current average and peak load in production. If you're only sending the test server a few requests per second but the production server is getting thousands, then you're not testing well enough. I'm not an expert with EE or Tomcat, but is it not possible to profile your app in production? I get that you might not want to expose a debug socket to the public, but surely you can tunnel it or restrict it or something.
None of the things you mention are syntactic sugar. The colon is used throughout the language to mean "has type", and this is a sensible choice since it's used that way in many other contexts. The designers of Haskell only used a double colon for "has type" because they wanted list syntax to be as easy as possible and used : for cons. It's much more natural to me to read `&lt;-` as "takes from". The underscore is also used consistently throughout the language as a wildcard, e.g. in imports.
Yes, the whole application starting point is in tomcat. 
The answer to all those questions and more is "because scala is not java and is not trying to be".
JSP's are outdated, obsolete technology. JSF with Facelets is the way to go.
Doing that in a servlet sounds like the hack in this case. [Separation of Concerns](http://en.wikipedia.org/wiki/Separation_of_concerns). Why does a *servlet* need to do all this directly? Is this the only servlet in the system? What if another servlet needed to use these resources?
You can also remotely connect to the VM (assuming you have sufficient permission) using jstat to get memory usage statistics while the VM is running in production. The results of jstat should be more useful than this number you're getting here as you can see the allocations in different generations and stats on GCs. http://docs.oracle.com/javase/1.5.0/docs/tooldocs/share/jstat.html 
Agreed, this is terrible. I really signed off when I read &gt;I wrote the basis for this code years ago, and I simply copy/paste from my personal code library each time I need it.
You don't seem to have assigned reassigned 'greeting' before you parse it as an integer. You can get an int from the user with Question.nextInt() or something like that if you're using sysin. Otherwise, you'll want to get your input from the dialog. Check the Java docs to see how.
kill -3 is thread dump. This is moderately intrusive, the jvm synchronizes around a safe point and pukes a bunch of text to stdout. Overall disruption might be in the milliseconds. You do not want to be performing periodic heap dumps in production. Depending on the size of your heap and a bunch of other factors, your jvm will be unresponsive for seconds to minutes.
Are you already using this parameter? -XX:+HeapDumpOnOutOfMemoryError
&gt; If you need to connect to a database, http://www.jooq.org/ looks promising, but I have not needed it yet. I can highly recommend Jooq having tried a wide variety of database abstraction layers, however Ninja Framework (which looks interesting) seems to tie you to JPA - right?
Can you recommend a good book to learn jsf? Or good online tutorial? 
Yes, you are right, but it should be possible to work around it.
[The Java EE 7 Tutorial](http://docs.oracle.com/javaee/7/tutorial/doc/jsf-intro.htm) is free and pretty good. But to take full advantage of it, you need to download GlassFish, and download the examples using GlassFish's update tool. http://docs.oracle.com/javaee/7/tutorial/doc/usingexamples001.htm
The builder example is nonsense. That's not what builders are for; to create objects with certain instance values. Builders are to encapsulate complex construction. If you just want to set instance properties, make them constructor arguments. You also don't need a builder class just to encapsulate construction; a static method is often simple enough.
First, help questions like this generally go [here](http://www.reddit.com/r/javahelp). Secondly, on line 6: Random generator = new Random(1); Dont put the 1. Simply put: Random generator = new Random(); Should fix your problem
senior-java-developer.com you say? Well, that senior-java-developer.com sure looks like an awesome site. I'll definitely have a look at senior-java-developer.com and I'll also recommend senior-java-developer.com to all my friends. senior-java-developer.com is just that awesome. Please post more links to senior-java-developer.com!
Since you already know C# you probably will not have that much trouble to switch to Java. It is very similar indeed and in the cases you need something Java specific you are probably able to find your way around the official Java doc: http://docs.oracle.com/javase/ and for other problems you stumble upon there's always StackOverflow :-) I suggest you just go ahead and let your C# experience guide you, you'll see that it'll go hand in hand with Java :-)
Not exactly. That example relates to [Item #2 in Joshua Bloch's Effective Java](http://www.informit.com/articles/article.aspx?p=1216151&amp;seqNum=2), which recommends using builders for classes with constructors with lots of arguments. Java doesn't have named parameters, so these kind of constructors can get pretty ugly. Telescoping constructors and setters are other ways to solve the problem without a builder, but these have problems of their own. Scala has named parameters (as demonstrated in the example), so builders are not necessary for this use case.
If you're not going to assign the studentId in the constructor, then you should use an Integer instead of an int.
I really don’t understand how you arrived at line 6. If you begin typing that line in IDE you will most probably notice that `Random` has two constructors. How did you make your choice? And how can you defend your choice to yourself? I mean, when posting here you must have been convinced that your code is basically correct and something strange is going on, right? Instead of guessing you should have read the quite excellent API documentation for [java.util.Random](http://docs.oracle.com/javase/7/docs/api/java/util/Random.html). Had you had done that before posting here you would have realized that you have created a random number generator that always uses the same seed and thus—due to the nature of this specific random number generator—always generates the same sequence of numbers.
Because I'm one guy maintaining a complex system and don't have time to obey some principle some Ruby hipster talked about at a conference once?
Good Scala to Java tutorial ;P
"Sponsored by Zeroturnaround. Have you bought JRebel yet? Please buy JRebel."
&gt; I've Googled for this already before anyone links me a lmgtfy.com, but most of the more popular books seem a little bit out dated (Head First Java hasn't been updated since Java 5?). Did you search the subreddit for one of the thousands of "resource recommendation" threads, too?
If you have a misbehaving application, I would recommend segregating it in a separate JVM. There, you can use various tools from enabling GC logging and analyzing the logs, to YourKit. http://www.cubrid.org/blog/dev-platform/how-to-monitor-java-garbage-collection/ If you're running your applications on Tomcat (which is a good idea), there shouldn't be any reason not to give each app its own JVM in any case. That's a much more robust way to deploy and operate applications in any case.
BalusC on StackOverflow is an oracle for JSF stuff - he's set up a site at https://jsf.zeef.com/bauke.scholtz, which has links to tutorials and other JSF items. I'll also second /u/joordaz's recommendation to look at [Primefaces](http://www.primefaces.org/) - their [showcase](http://www.primefaces.org/showcase/ui/home.jsf) contains code samples for each component, which can be handy.
JSF has made my job much easier. 
Why should he?
Right, how would I listen for keystrokes, like do you mean with a scanner. (as you can tell I'm kind of still new at this)
Because an int (and other primitives) should not be null. Unless you're setting values in the constructor or you're fairly confident that it will be set by the factory or builder it's a design smell to leave primitives as a null.
/r/javahelp We don't just do your homework for you. Show us what you've tried, in a minimal non-working example, and tell us what you're having trouble with.
maybe java isn't the language for you, then. i see it as a nice alternative to the XML you'd write otherwise, with the added bonus that if you change class names, and use your ide's refactoring, then you get those changes done for free as well. that said, i still prefer mybatis or jdo. 
A primitive type can't be null. Every primitive type has a default value (and in the case of an int, the default value is 0). An Integer, the object, can be null - and trying to modify or access it will throw a null pointer exception. Did you get confused here? To me, the primitive type seems the obvious choice.
IIRC... jframeobj.addKeyListener(new KeyListener() { //... implementation });
haha, nicely written
Thanks a bunch!
really crappy OOP. Tons of abstractions screaming to be defined.
How do you differentiate between a Student object which really does have an id=0 and a Student whose id hasn't yet been set? It may sound pedantic, but its an important consideration if, for example, you are working with persistence (J2EE) so it's a good habit to get into. I would say that if you're not setting the primitive on construction, then it should be initialised to a (static final) constant, even if that constant is the same as the default primitive value. It makes debugging easier and your code more readable.
did you ever solve this issue?
Homework? This isn't homework... I want to learn!
It would be nice to actually see what he is doing during his demo. Does anyone have a link to the slides??
Thanks i fixed it
The slides themselves are at [EclipseCon](http://www.eclipsecon.org/2013/sessions/nashorn-javascript-jvm) and some of the examples are on the [Nashorn](https://blogs.oracle.com/nashorn/) blog.
Unfortunately no one from the general public can really answer this question but we can surely speculate. I personally think the reason is because Java has become an large software project that has a huge following since initial release thus making it hard to maintain compatibility and introduce new core features without careful discussion and management. If you look at [Java version history](http://en.wikipedia.org/wiki/Java_version_history) you can see that earlier versions were released quickly and later versions had longer release cycles. Java was introduced in 1996 (17 years ago) C# was introduced in 2002 (11 years ago) Ruby was introduced in 1996 (17 years ago but wide adoption was not until Rails in 2005) If you look at Scala which is based on the JVM, it has all the feature that you mentioned above: Duck typing; functional programming; automatic accessors for member variables; etc. So that just proves that it can be done in Java. I am sure Oracle devs suffer from what every programmer thinks when maintaining any old software *Why don't we just rewrite this application?* Hope this answers your questions.
This book helped me get going: Bruce Eckel - Thinking in Java Then just dive right into Effective Java by Joshua Bloch... After that just dive into the documentation of whichever library/framework/subject you're working in... If the book/tutorial is outdated (for java 5 or something) just go ahead and read it anyway, and then just check out what's changed since then. Yes... It might be a little waste of time, but you'll get a little bit of history as well ;)
Legacy legacy legacy. Use Scala if you like the jvm and are able to greenfield. That said, a good ide takes a lot (though not all) of the monotony out of java development.
Thanks for a great answer. I think you're right, maintenance probably is the biggest issue. Also, sometimes I have to remind myself that JDK isn't open source, and that Oracle may not want to add anything it doesn't feel it has to. That's one of my favorite aspects of Ruby. If I find I need a convenient method and I want it on a core class, I can open the class and add it at runtime, and use it everywhere. I know this is intensely frowned upon by those who like strong types, but I find it a rather liberating experience.
I agree that an IDE can help with some of it, but sometimes it has it's own problems. I had to fight with eclipse quite a bit this morning to get it to accept a new bit of software, and I've had issues with auto-complete before that I didn't ever expect. I'll admit that I generally prefer vim over a dedicated IDE. I like not having to use a mouse, and to really know the language and what I'm writing, instead of letting the IDE fill everything in. I know it may not be the most productive way, but I can usually recall where and how code is written a lot better when I write it in vim than in eclipse.
Just wait till you try IntelliJ
&gt; JDK isn't open source wat? [Openjdk](http://openjdk.java.net/) is absolutely open source, is the reference implementation for Java 7 (and the newly released dev preview of Java 8), and it is estimated (sorry I don't have a source handy) to be 95-98% source-identical with Java SE. Enhancements to the language happen through the [JEP process](http://openjdk.java.net/jeps/0) which is open to community involvement (but of course in the end Oracle will make a call as to what goes in and what does not).
The traces go from bottom to top. ```Trace 349864``` is running [sun.java2d.Disposer][1] on a background thread. Disposer uses an internal ReferenceQueue. It looks like a specialized GC for objects that need to release native resources, like classes representing images or an OpenGL canvas. ```Trace 340890``` is [FinalizerThread running Finalizer][2], which calls ```Object.finalize()``` on objects that are being or have been garbage collected. It maintains an internal global ReferenceQueue to keep track of objects that need to be finalized. This is an important step of garbage collection. You have to remember that there's a lot going on behind the scenes. There's a lot of code supporting yours. You can't optimize out these queues because they're internal to the JVM. If you're trying to squeeze out more performance, I suggest you look into [JVM tuning][3]. It won't eliminate the overhead of these classes, but it can reduce usage of them. I'm reminded of a quote from [Markus Eriksen's (backend developer at Twitter) *Effective Scala*][4]: &gt; The first rule of optimizing for performance is to understand why your application is slow. Do not operate without data; profile your application before proceeding. Focus first on hot loops and large data structures. &gt;Excessive focus on optimization is typically wasted effort. Remember Knuth’s maxim: “Premature optimisation is the root of all evil.” This doesn't just apply to Scala, but to Java and all other JVM languages as well. In general, if your program isn't stuttering or causing full GCs (also known as stop-the-world GCs), and you have no other reason to go to extreme lengths to optimize your program, unlike on mobile or embedded platforms where power usage or space matters, or realtime applications where even the smallest stutter can be very bad, then any more optimizing is truly a wasted effort. The JVM was created to take most of the work of optimization and low-level management off your shoulders. If you want to do all that work anyways, then you shouldn't be using the JVM. [1]: http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/sun/java2d/Disposer.java [2]: http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/lang/ref/Finalizer.java [3]: http://docs.oracle.com/cd/E13222_01/wls/docs81/perform/JVMTuning.html [4]: http://twitter.github.io/effectivescala/
&gt; I like not having to use a mouse I share your sentiments, but it's not a reason to avoid IDE: [vim keyboard bindings in eclipse](http://stackoverflow.com/questions/2220653/what-vim-plugins-are-available-for-eclipse) &gt; and to really know the language and what I'm writing, instead of letting the IDE fill everything in You'll get over this as you become more familiar with Java and/or work on a significant Java application, and find yourself repeating the same code snippets (changing class/variable names) over and over and wishing there was some automated way to get the basic stuff out of the way.
No problem brother. Keep on coding.
Thank you very much for the help in debugging this problem. But you're wrong about not being able to optimize this code. If this code is running because it's calling `finalize` on objects that have been garbage collected there's a very easy way to stop the code from running, and that's to create less garbage.
⌘B and ⌘D (\^B and \^D) are amazing things.
If I want to open a file, write to it, and close it in Ruby: File.open(local_filename, 'w') {|f| f.write('whatever text')} in java: [http://stackoverflow.com/questions/10667734/java-file-open-a-file-and-write-to-it](http://stackoverflow.com/questions/10667734/java-file-open-a-file-and-write-to-it) I know it seems small, but it adds up; the constant need to create many more instances of variables to do things that are trivial in another language is just hard for me to get used to.
Who says libraries aren't _supposed_ to be the way that convenient methods can get added? It can, frankly, be a huge pain to wade through hundreds of utility methods trying to remember exactly the right one and which exact name it has. Java tends to stick to more core functionality with a minimum of "magic," so you don't have to learn as much to know all the methods available in basic Java, and then encourages lots of libraries to simplify patterns that might be more common in specific areas. (There's also the issue that Sun and Oracle are extremely hesitant to even deprecate old methods, so they could unintentionally accumulate hundreds of methods over time to the point where nobody in the world remembers them all.)
I'm not sure exactly on whether it would work if and when you migrate to JDK 6. But my best advice would be to delete the class file and the package you created for your Java 5 hack when you migrate, as you just copied the code from the Java 6 libraries and the import statements would not break. (assuming the package is exactly as named in your post) This way you have cleaner code, you don't leave the ambiguous class in your project and you just make use of the proper swing library class version in case it ever gets updated in future versions of Java. (7, 8, ...) Hope that helps.
Heh, not trying to be snarky but Sun opened the source to Java in 2007. I'll also add to lurker_2008's maintenance response by reiterating the effort that goes into enhancements; careful discussion certainly is involved, and with very few exceptions they also aim for near-100% backwards compatibility; ie if they add someMethod() to ThisClass, they are basically committing to that being part of official API for a Really Long Time. Deprecating poorly-designed API (or API that seemed good when it was added but over time user/dev needs change) is painful for both those producing and consuming that API. See also Java's Date/Time API (ugh).
It becomes difficult when you can't use half of those libraries because they aren't considered secure enough. So I can't use a lot of them. And I don't think there's a nice set of managed repositories to easily find and install them; instead you have to fight with JARs and classpaths to get them included. But your right, maybe a lot of convenience methods would bloat the docs too much.
The author is a proggit regular and a big time hipster. Don't know why he bothers with Java when it's very obvious he would feel more at home developing in some obscure language you've never even heard about.
Try Scala
because things that are not included in the core get include in dozens of different incompatible ways, sometimes in the same project. I have to work on legacy applications that still rely on commons-lang 2.1, and there's at least two different "util" classes that add some of the missing methods, and one of them even duplicates what's in commons-lang....
No. My application actually has a few cases where it uses memory in blocks, or "arenas" of commonly allocated objects. Because these batches of objects have a common start, and finish they can be refactored into arenas of objects which should be more efficient. Do ultra-temporary objects have to go through the reference queue hoop jumping? If I can't do something similar to the code [here](http://gitorious.org/helioblastocyst/helioblastocyst/source/ad300adb632050294ccfbda9080368e5bc900dea:src/gamelib/gui/SynchronousSpriteHeap.java) where the objects are compressed into a few arrays without causing more reference queue overhead then I'd have to expose the raw array interface which would be really ugly, and not worth the optimization, and sure I'd stop then.
I think the primary reason Java makes you specify so much up front was a reaction to C++, which is very difficult to reason about, and so very easy to shoot yourself in the foot in subtle non-obvious ways that won't become a problem until the bad coding practice is literally all over your code. If I want to whip up a quick prototype, or don't plan on making something grow to hundreds of components, I'll reach for python. There comes a point where I need the explicitness to remind myself about the connections between them. I'll agree that there are a lot of ways that could be simplified or included. Property accessors is a big one, given how pervasive the beans-style accessor coding pattern is throughout the ecosystem.
I'll play devil's advocate on this one. The reason is that Java was not designed to solve "trivial" cases. For example, I rarely write to a file these days; the only time I need to is when I am logging, and that's better handled by a logging framework. So I don't need to do something as trivial as writing a single string to a file. So in that sense you are looking at the wrong level of abstraction - it's too simple. Step back a bit - why do you want to write to a file? One typical reason is to load and save configuration settings. Java's defacto standard for that is ~~XML~~ - I mean Properties. Basically a Map&lt;String, String&gt; (but it predates the collections framework, which explains it's clunkiness somewhat) and a Properties object already has conveniences for loading and saving - Properties.load() and Properties.store(). But they don't take filenames; why? probably because Java was first a rich web application platform, so in some cases it might have made sense to load the properties from an URL, and in other cases it might have made sense to load them from the packaged JAR. So it takes either an InputStream, or a Reader. InputStreams are very easy to get a hold of and can come from 3 common sources - files, classpath references (think "inside the packaged jar"), and URLs, but there's loads of others. Even in-memory String's can be treated as an InputStream with the right bridge object (but in that case it's better to use Properties.load(Reader) and give it a StringReader). Then there's the fact that configuration may have several "fallback" sources. Properties handles this as well. The constructor can take a Properties instance to use as "default" values. So we can have this chain of defaults - the user's home, the system defaults, updates from web, the packaged defaults. Any changes within the application can get stored in the user's home. /devil's-advocate
&gt;And I don't think there's a nice set of managed repositories to easily find and install them; instead you have to fight with JARs and classpaths to get them included. Maven?
Maybe. But could that be simply shitty dependency management? Or are you suggesting you actually needing something unique about the different implementations or versions of a dependency? Then, maybe it is the exact type of thing that should not be in core JDK. If different use cases demand different approaches the freedom for several implementations of very similarly-purposed things (as opposed to a single core JDK impl) could be beneficial. Also, eww legacy application haha. I'm lucky enough to be working a modern project, haven't really had to deal with old cruft.
Great! Most important thing: [the excellent API documentation](http://docs.oracle.com/javase/7/docs/api/)! Look for a class called `Random`. It can help you. Have fun!
And that, my friend, is what Knuth called “premature optimization.” The VM is quite good at handling all the garbage (unless you don’t have enough memory available). If your application does not spend atrocious amounts of time garbage collecting, just let it do its thing. Don’t try to fiddle around with things you don’t understand.
While the facilities are there, IMO its still needlessly complicated and not something easily discoverable. KISS principle should not be ignored, especially that not all program require redundancy when saving data
java.util.Date doesn't have anything on java.util.Properties as far as brain dead decisions that seem trivial to reverse but in practice are actually really difficult. Date handling is much harder than it seems. Even JodaTime, one of the best I have seen, wasn't good enough for JDK 8 because the guy who originally wrote it made some very subtle conceptual mistakes, and the result is a different-enough-API-and-behavior when he rewrote it for the JDK.
The main reason Java doesn't have most of this, imho, is because Java is maintained by committee and as such evolves *slowly*. They also do their utmost not to break any old code, as you mentioned (it's happened a few times in the slightly more than decade I've been programming Java but it is very rare). Both of these are tradeoffs (or limitations if you look at it from purely a language usability point-of-view) that most of the other languages mentioned here do not have (eg. Scala, Ruby, Clojure, Python etc are all designed by a bunch of nerds on mailinglists). This is also the reason Java (the language) is losing popularity (though the JVM definitely is *not*). If you are a startup and want to get going fast Java is *not* the language to use, but using another JVM language (JRuby, Scala, Clojure,...) so you can benefit from the JVM ecosystem on the other hand is, imho, a very good option. ([Beating the averages](http://www.paulgraham.com/avg.html) and all, a must read paper by Paul Graham imho)
When you say arenas, are you talking about pooling objects? That's advice from the old JVM design. Every where you look now, you will find advice saying not to pool objects, unless they're super-expensive to make, like Threads. Pooled objects get tenured, and tenured objects require a STW to collect. All objects regardless of their lifetime will go through the reference queues. That's simply how the JVM keeps track of them. Shorter-lived objects will pass out of the queues faster. I think you're missing my intended message: **you should not be worrying about this.** It took some time to build on Windows because I'm not experienced with autotools. I'd recommend something more Java-oriented like Maven or Gradle: more portable, takes fewer steps to set up and run, configuration files are exponentially easier to read. Hell, even Ant would be an improvement. I ran the game. Trust me. You don't need to do any more optimization. My computer was essentially idle while running it. The only improvement you'll see at this point is in the numbers. And those don't matter if the user can't tell a difference. After a certain point, you're just going to be banging your head against the wall.
Your workplace should have updated to Java 1.6 years ago, and then to Java 1.7 until February this year, because that was when Java 1.6 reached its EOL.
Yeah good dep management is cheapest and has the most benefits if done from the beginning of a project, for sure. Inertia's a bitch.
Can you explain some of the very subtle conceptual mistakes with JodaTime? I haven't used it much, but I've found it to make significantly more sense than java.util.Date so far...
I definitely agree but for whatever reason JRE 5 is it for them. They have numerous JRE 5 problems with initiating VMs and stuff, if it were up to me I would upgrade but meh! Lol
Yeah that's what I would do if they ever did upgrade I was just wondering if it would cause it to break until I did so. 
&gt; not something easily discoverable Granted. I still have to look up how to read and write from a file when I need to do it. But I'll refer you back to the "Java's not for trivial things" bit. /s &gt; KISS principle should not be ignored But the KISS principle should also not be needlessly anticipated. When embarking on a new expirement you don't necessarily know what the common operations are yet. Trying to implement all of them runs the risk of inventing Perl where there are so many "easy" and "convenient" ways of shortening code that what one person writes another person can't read. Or PHP in which everything is an inconsistent one-off "" function "". Java started off by scaling back the insanity of C++ and requiring the programmer to be explicit about intentions, so when looking at a piece of code you didn't have to try and figure out if a token referred to a function, an object, a struct, a class, or (gasp) a macro. Statements of a certain form require tokens in certain positions to have certain, defined, semantics in the language. Unfortunately Java didn't take the next step in simplifying the common (or commonly desired) patterns (until recently). You could argue that C#, Ruby (and others), are extensions to the Java experiment that do take that second step. I think I'm still playing devil's advocate.
Umm.. Static type checking can be done without declaring any types at all. Haskell comes to mind.
I don't recall off-hand, but I remember it being [discussed in Stephen's Blog](http://blog.joda.org/2009/11/why-jsr-310-isn-joda-time_4941.html). &gt; Summary &gt; &gt; Joda-Time isn't broken! &gt; &gt; It does the job it was designed for, and does it much better than the JDK. And it is widely used and without too many major issues. However, after a few years, it is now clear where it could be designed better. &gt; 
That's a good example, becouse Ruby is great for this kind of things. As others have already said a lot, i'll just add that things are slowly changing, and java 6/7/8 added/will add quite a lot of convenience. For example, try-with-resource statements in java7 will make it easier to handle open/use/close cases like the one you reported, it could be: try(BufferedWriter bf = new BufferedWriter(new FileWriter("test.out"))) { bf.write("Hello world"); } Which is already better. Other recent improvements are for-each loops, string in switch, etc. Java 8 will add closures, which will make it possible to write things like: File.open("Myfile.txt", f -&gt; { f.write("hello there")}); which is reasonably concise. This is by far the feature i'm looking forward the most :) I admit that a "var syntax" to avoid retyping the type of a class would be nice: var x = new Thing(); but ony if followed by a "new" instruction to grant the same readability, as it would be difficoult to see the type with an expression: var x = myclass.newChildrenInstance(); // what type is x ? Something among this line has been added with the diamond operator which lets you avoid typing type parameter in generic classes: List&lt;String&gt; a = new ArrayList&lt;String&gt;(); // before List&lt;String&gt; a = new ArrayList&lt;&gt;(); // now All in all, i think Java is a little more on the verbose side than on the concise (but less readable) side, but not as much as you say. IDE like eclipse are great to fill the boilerplate (getter and setters etc) for you.
Thanks for pointing me to this!
Wouldn't that mean that each application would run in its own tomcat instance, as tomcat IS the VM in this case? Still, I think this is the best stopgap way to proceed for us: isolate the bad apples from the rest. Could you point me towards some more info on how to do this?
To be honest I don't think that most people that have answered so far have worked in a large enterprise setting. The verbosity of Java is one of my favorite features because it is precise. Jumping anywhere in the code the syntax and type-safety give me a pretty good understanding of the nouns that that code uses. Comparing it to natural languages: Java: " Take the car, drive to the Lidl supermarket and buy some Lacta chocolate". Easier to use: " Go to the store and buy some chocolate". How do I go there? What store? What chocolate? In Java those answers are given. As I said though this is mostly in an enterprise setting. 
Love Intellij. Not that I use all of its features...
I totally agree - if a variable is known from the outset and is not supposed to change, it should be declared final. I think OP would have benefitted most from would be a code snippet, which I would have done had I not been writing from my phone... /** * Student class for when the id is not null and never changes. **/ public class Student { private final int studentId; public Student(int studentId) { this.studentId = studentId; } public void setStudentId(int studentId) { this.studentId = studentId; } public int getStudentId() { return studentId; } } Alternatively, if the student id is never null, but is initialised to a "invalid" constant: /** * Student class for when the id is not null but initialised to an invalid constant. (type 2) **/ public class Student { public static final int INVALID_ID = -1; private int studentId = INVALID_ID; public Student() { } public void setStudentId(int studentId) { this.studentId = studentId; } public int getStudentId() { return studentId; } } Finally, if the student id can be null e.g. because the id is generated by a backing database and hasn't been set yet: /** * Student class for when the id can be null. (type 3) **/ public class Student { private Integer studentId; public Student() { } public void setStudentId(Integer studentId) { this.studentId = studentId; } public Integer getStudentId() { return studentId; } } In all three cases the code should be in a file called Student.java and the object accessed by: Student student = new Student(9999); // type 1 /* or */ Student student = new Student(); // type 2 or type 3 /* common operations */ student.setStudentId(9999); // type 2 or type 3 if (student.getStudentId() == 9999) { ... } // type 1 or type 2, not recommended for type 3 if (student.getStudentId() == Student.INVALID_ID) { ... } // type 2 if (student.getStudentId() == null) { ... } // type 3 if (student.getStudentId().equals(9999) { ... } // type 3
I use IntelliJ myself (paid-for full version) but most of this is just plain wrong. &gt; It all started with something as simple as ALT+ENTER. Based on the documentation it is not doing much – just using the suggested quick fix. Like ctrl-1 on Eclipse? Hardly anyone knows about it but it exists and works just as well. &gt; As-you-type code smells and warnings. In Eclipse you have to launch the analyzing manually, in IntelliJ you will have the feedback on those immediately. That's not true in my experience, it doesn't even compile the class until you tell it to. I'd rather see compile errors fast rather than smells. I press ctrl-F9 frequently in IntelliJ to force a compile. &gt; Code completion and code generation support offered is orders of magnitude better due to the very same indexes. No it's not, the completion in IntelliJ is a little broken and it will not suggest every class to you. For example, I'm working on a JPA app just now and I want to complete "Session", half the time it's not even in the list. I'll get "SessionRepository" and every variant thereof but it frequently misses the one I want. &gt; The fixes offered by the ALT+ENTER make sense As said earlier, Eclipse does that as well. I used the "fixes" constantly to write new code e.g. if I want a new parameter in a method I'd just start using it by name then press ctrl-1 to get the "add parameter" fix. This would pick up the type automatically from where I'm using it. &gt; Perspectives. Or actually, lack of the perspectives. I liked these. The IntelliJ IDE is very limited in terms of how configurable it is. You can move panels to the top, middle or bottom. No multiple columns for folks like me with lots of screen real-estate. No secondary windows for your second desktop. You can have them floating on a separate screen but it's less than ideal. &gt; Debugger. It is blazingly fast. And I will not even start with the Eclipse debugging perspective, which has to be someone’s evil joke driving me nuts every time I recall using it. And the feature set is also more pleasant, my favourite being the “Smart step into” which allows me to select which method to step into, IIRC that was shift-F7 on Eclipse following putting the cursor on the target method but I've not used it in years. &gt; Property files integration. While in a property file, I can see where in the source code this property is being used and detect unused properties immediately. I'm pretty sure Eclipse does that. 
yeah, just change the .jpg or what ever file into a .ico, so an icon, and then put the icon into the same folder as the program and then call it the same way you would if you were to put a regular icon on a button
Yes, it would mean that each application runs on a separate Tomcat instance and a separate JVM, on different ports. Assuming that these are web applications, you'd then put, for example, an Apache instance in front of them on port 80, as a reverse proxy. You probably run the apps on Linux, but which distribution?
I refuse to provide free support in a situation where a business is deliberately refusing to invest in following the very minimum of good practises, in this case EOL upgrades.
Just for reference, the C#/Java type setting thing is dynamic vs static typing.
Closest we'll get for a long time will be Groovy.
You have a great future in software development. For you, I would very strongly recommend sitting next to the application's business owner, though. That way you can't help learning about prioritization.
Could you describe the your particular context in more detail? If no, I'm assuming that this is some sort of a homework or interview question.
&gt; bad coding practice is literally all over your code. and then came Spring.
Agreed, plus job security for those working with old shitty java code bases.
Everytime I use properties outside of Play! I want to cry.
Better answer than most. History has a lot to do with it, Delphi also had some influence on Java.
Yeah, I stopped giving much credence to the tutor's comment when I saw that. The rest of his comment did not alter my opinion, "Java has no problem getting larger". He may want to reconsider his career choice. http://science.kennesaw.edu/~ashaw8/cs2301/cs2301s6syllabus.html I'm guessing, reinforced by that URL.
Agreed, just transtioned, but intellij is a beast on large Maven projects. I googled for ways to improve this without much luck. 
&gt;Java's not for trivial things Android apps come to mind 
Or Scala
In C, take a gasoline-powered internal combustion engine, place it in a metal frame with two axles with two wheels on each axle and drive north for 5.1 km to the 7-11. Enter the shop through the right, front door, and remove a single, 200 g package of chocolate powder from the third shelf, 1.90 m down the second aisle. If the amount requested is less than $4, pay the cashier and return else abort. 
And if you follow the directions wrong, this bomb that I've strapped to your chest will go off.
Java *is* convenient compared to assembly or C. 
Touché; but you could argue that the Android API adds the conveniences for all those trivialities.
are you saying Spring facilitates bad coding practices? or that it alleviates perpetuating them? (I've heard both arguments)
Bingo. I like to say that Java is not there to solve programming problems, it solves organizational problems. Verbosity and static typing make it very easy to discover APIs. In fact, the killer featuer of Java that no one acknolwedges is really Javadoc. Everyone knows how to navigate that magical 3-frame layout.
Wow ... I would love to know what happened in that \[deleted\] thread.
Just another vote for PrimeFaces and JSF. If you want some good tutorials go to Netbeans.org. You will have to download Netbeans but it comes complete with application servers and no configuration is needed.
Well wait... Is your problem with lack of convenience or language limitations? Those are not the same thing. Having type inference is a matter of convenience. While having no way to guarantee your code is side effect free is a limitation. What types of issues are you actually running into?
I would love to see annotations to replace getters and setters in core Java. This seems like such a simple and obvious way to greatly reduce clutter. Having said that I generally like the verbosity in Java. It makes it easier to read, learn and understand. 
Spring's architecture doesn't bode well with extensive compile time type safety checks. With some of the most popular spring add-ons (mybatis,aspectj) it produces a terrible mess when something breaks that is very hard to piece together. Spring (at least what I've seen from using it with aspectj) is also java version dependent on the JRE version matching the version of the JDK that compiled it regardless of target and source options. It will refuse to deploy on a Java 6 JRE if it was compiled to 1.6 in a Java 7 SDK.
Netbeans is also very good at this
He said a good IDE not eclipse :)
I see no evidence that Java is losing popularity. It seems to be the dominate platform to learn for career opportunities. It is bound to happen someday but today is not that day.
Verbosity in Java has its use, eg. when working in huge group on a mission critical environment. If that's not your kind of working environment, I recommend Groovy 2 + "@CompileStatic" it is fun to work with and retain most of the advantages of Java such as performance and rich libraries (you can use Java libraries here).
That could be true about aspectj - I've always preferred JDK proxies for AOP. Bytecode manipulation has always seemed like an ugly ugly hack and makes me a bit uncomfortable. As for the compile time safety checks for mybatis, isn't there a generic variant of the SqlMapTemplate? Or are you talking about something else?
Groovy: // dynamic variant, if using @CompileStatic use: ...with{File it -&gt; ... } def file = new File("path/to/file").with { write("whatever") write("whatever") it } file &lt;&lt; "whatever"
All of mybatis comes down to sqlMap.getQueryFor*. Sure you can have a generic base object, hell use object because it doesn't matter. You don't want an object, you want a MyTableRepresentationObject. However the only way to find out if you have a MyTableRepresentationObject from sqlMap.getQueryForList("namespace.CoolTable") is to look in the xml result map. But then you still have to return the object as a MyTableRepresentationObject so you just typecast it and be on your way. This works fine until you do a code base refactor, and your application comes up but in one random call you forgot that namespace.CoolTable returns a MyExtendedTableRepresentationObject, which removes the CoolTableField2 and adds CoolTableField3 and 4. This isn't an issue for most of your code because nothing depends on CoolTableField2, except for this one tiny little space of code hidden in the corner of your app. Java doesn't know about the change to namespace.CoolTable's resultmap to map to a different bean. So it can't warn you, "Look you idiot you forgot to change this here." until the code is run and the reflector says "Look you idiot it's not the *really* same object." More on this here: http://allainlalonde.blogspot.com/2009/03/making-ibatis-type-safer.html Unfortunately MyBatis is one of the only ORMs that don't require database control, which is why it's so widely used beyond these issues. 
Prioritization has nothing to do with it. This is a weekend project purely for myself.
Global type inference with static types (i.e. no type declarations at all) only works in foolproof fashion with Hindley-Milner compatible type systems. Subtype polymorphism (as in Java, which Haskell does not have) breaks Hindley-Milner, so you can only get partial, local type inference (as in Scala) and not global type inference. Scala still needs type declarations even with its powerful static type system.
I do feel your pain. I've always been a geany on gnome/sublime on mac/vim on servers fan, but a java project of any size begins to get unwieldy pretty fast. I do like IntelliJ (and JetBrain's ruby mine is cool though i find the benefits are outweighed by the weight of running intellij, sublime and rubymine at the same time). It has good gradle integration too which makes dep management, build tasks,etc relatively simple.
I already use netbeans for all my work, so I'm happy to go that path! I'd still like some books on the subject, if you have any recommendations!
You can't just add the wheels, you have to reinvent them first.
Hmm, I'm out of my league here.. but could you explain how C# has the `var` keyword then?
I've done this by using David Trott's thrift compiler plugin: https://github.com/dtrott/maven-thrift-plugin And a pom that looks kind of like this: &lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.example&lt;/groupId&gt; &lt;artifactId&gt;examplethrift&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;1.6&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.6&lt;/maven.compiler.target&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.thrift&lt;/groupId&gt; &lt;artifactId&gt;libthrift&lt;/artifactId&gt; &lt;version&gt;0.9.0&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.thrift.tools&lt;/groupId&gt; &lt;artifactId&gt;maven-thrift-plugin&lt;/artifactId&gt; &lt;version&gt;0.1.11&lt;/version&gt; &lt;configuration&gt; &lt;thriftExecutable&gt;/usr/local/bin/thrift&lt;/thriftExecutable&gt; &lt;thriftSourceRoot&gt;../&lt;/thriftSourceRoot&gt; &lt;!-- path to .thrift files (I happen to have them above one directory.) --&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;thrift-sources&lt;/id&gt; &lt;phase&gt;generate-sources&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;compile&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;execution&gt; &lt;id&gt;thrift-test-sources&lt;/id&gt; &lt;phase&gt;generate-test-sources&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;testCompile&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;/project&gt; 
Local type inference. Scala has var/val which work along the same lines. The compiler can figure out what is going on within the body of a method and can help you with the return type.
This is such a sad argument :) IOUtil.writeString(filename, "Hello world!"); There! one line of code + an import statement for IOUtil. Yes, it's not included in java's library; no, it's not hard to add yourself to your own utilities library (which I'm sure you even have in Ruby). Java has many many advantages; as a "corporate guy", I won't touch python or ruby for any thing more than 100 lines of code. 
Java Performance Tuning Tool - Java Performance Analyzer - Find the bottlenecks and architecture flaws in the applications with Online Java Performance Analyzer. Discovered Bits and Bytes (Key Performance Findings) report. It's a report that was thought as the collection of the Case Performance Highlights, suitable for the managers or other super-busy individuals. Despite its name, it contains enough technical information to allow the developers and architects to pinpoint the reasons of application sluggishness. For more videos and articles check out http://discoveredbyte.com/tomcat-jvm-jboss-java-monitoring.html Visit us at http://www.discoveredbyte.com
I think you're missing the point. Convenience and explicitness is not mutually exclusive. var i = new Integer(); //is just as descriptive as Integer i = new Integer(); ..just more *convenient* 
http://lmgtfy.com/?q=selection+sort
I was dumbfounded by this question for a moment. Java is inconvenient? Are you using an IDE like Eclipse to write it, or raw text files?
So you're partially-sorting an array from smallest to largest? This is pretty straightforward, it's just a matter of creating a loop sequence to iterate through the array and find the smallest number sorter(int[] theArray, int n) { //We're going through the sequence n times for (int loop = 0; loop &lt; n-1; loop++) { //Assign the first sample as the smallest we've found int smallest = theArray[loop]; //The index of the smallest value we've found int smallestIdx = loop; //Iterates through the remainder of the array, finds the smallest value for (int i = loop; i &lt; theArray.length; i++) { if (theArray[i] &lt; smallest) smallest = theArray[i]; smallestIdx = i; } //Exchange the values int temp = theArray[loop]; theArray[loop] = theArray[smallesIdx]; theArray[smallestIdx] = theArray[loop]; } }
[JGoodies](http://www.jgoodies.com/freeware/) is another nice library for that.
Great, an ad. Just what I come to this sub for /s
Could you point me more directly at where in JGoodies? Is it in one of the free libreries? I couldn't find any code on the site
Java is not losing [popularity](http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html).
You can look at the jgoodies-forms artifact. There's the 'com.jgoodies.forms.layout' package that lets you build complex grids (FormLayout). It's the best toolset for that, I used so far.
&gt; you can set your IDE to do things like this. &gt; Not the same thing. Bugs can lurk in this type of code and it is rarely looked at, nevermind tested. If you have a generated equals() method and at some point someone manually changes something small in it - causing a bug - it can be extremely difficult to find. These kind of bugs do occur in huge code bases. Things like Lambook add consistency to your code base as well as reduce the amount of needless boiler plate.
Scala is not duck-typed, except for its structural types. It is strongly, statically typed, although its strong support for type inference means you don't have to type-annotate everything. This frequently makes it at least as non-verbose as a language like Ruby.
I made a similar type of builder wrapper for GridBagConstraints, along with an enum for a lot of frequently used gbc patterns.
Could you do some assembly metaphors pretty please?
Yes. Here are two ducks: class Duck1 { def sayQuack() { println("Quack!") } } class Duck2 { def sayQuack() { println("Quack!") } } Here's a function: def duckSay(duck: Duck1) { duck.sayQuack() } Clearly Scala will not allow us to pass a Duck2 to duckSay, even if Duck2 clearly passes the duck test just as well as Duck1 does. Duck1 is simply not a Duck2, because Scala is not ducktyped. In a language like Python, this would have been fine - Duck2 quacks just like Duck1. The link you gave for duck typing in Scala demonstrates structural typing, which I explicitly mentioned. The existence of structural types doesn't make Scala a "ducktyped language", it just optionally gives it some of its benefits. I [rarely see this used](http://www.draconianoverlord.com/2011/10/04/why-no-one-uses-scala-structural-typing.html) in real-world Scala code, however. Edit: Granted, you didn't say it's a ducktyped language, only that "it has […] Duck typing", and I guess you could say that. But I think ducktyping has a bit of an unfortunate association with weakly-typed languages; in Scala it's better to call it structural typing :-)
Java shorts are signed (-32768...32767), so while you technically could fit the data in, you'd have to mess around with sign conversions etc. You're much better off just using an int and leaving it at that. 
Check this out for questions: http://stackoverflow.com/questions/1841461/unsigned-short-in-java You can't have an unsigned short in java, but you could use a unsigned char if space is really valuable. If it isn't, an int would be more appropriate.
I am trying to make sense of this..why are you crying about your broken distro in /r/java?
PEBKAC E: Unable to correct problems, you have held broken packages.
Python: import chocolate 
But the entire point of a floor/ceil call is to return a whole number (at-or-above, or at-or-below); round in this situation is to round to a whole number as well (you have to modify it before and after to do rounding to decimal digits). That can still be used in a non-integer equation, though; if a non-integer equation, it'll up-convert the int to a float/double; if an integer equation, you won't need to down-cast to an int at least.
That's the first thing I noticed.
Cool interview, always have to give props to Bauke for being such a great help on StackOverflow, he's involved in almost literally every JSF answer in some way and I've learned so much, just today it was conditional required attribute check based on what triggered the submit.
Oh I see, I was a bit confused on the for loop iterations but it all makes since now. This will be very helpful
What if you don't need it converted to an int? It saves converting to, and then back from, and integer. You can always convert to an int yourself if you need to.
i want to know so bad. OMG
This was extremely useful to me. I recently started writing a simulated annealing application where a robust RNG was a must. In the end I used a Mersenne twister implementation.
I do not understand the insult you attempted by posting a syllabus. Are you saying that Dr Shaw is not qualified? I can assure you he is a peer reviewed author in the field of computer science and well qualified to teach Principles of Programming I.
floor and ceil return a double to preserve NaN and infinity values. round returns an integer/long.
Indeed, some which are also available in other google libraries like Guava
Do you want a language that's "easy to use" or "easy to read and maintain?" The definition of "easy to use" that you seem to be concerned with is the ability to write very small code snippets that do a lot of things all at once. That's what languages like Groovy, Ruby, and Perl are good for. Specifically (and several people have already said this), it sounds like you should be using Groovy, because it has the features you want. * Default getters and setters * Untyped variables 
&gt; Openjdk I would not recommend using OpenJDK, in general. Oracle's JVM is better.
What? The JVM (Hotspot) is probably where there is the least divergence from JavaSE.
From a really quick and dirty test I just did. If I make a package named "javax.swing.filechooser" and insert the class you made in it. When importing it in an application on my IntelliJ 13 Early Preview with Java 8, it seems to import just fine, but it seems to be picking up the library version of the class, not the class I inserted into my own package. I tried this by creating an empty class with the same name as some class found in the library version of the package "javax.swing.filechooser" and it would attempt to smart auto complete method names for me when trying to use that empty class and list all similar methods in the library version of the class.
I made a simple math problem that put random numbers into equations to solve. public int makeNum(){ int x = rand.nextInt(100); return x; }
Too bad the plugin is simply a wrapper around the binary as opposed to natively doing the work. I appreciate this guy making and sharing his plugin. He has nice code.
Double has a range which is 290 digits longer than a long. Double.MAX_VALUE is approx 1.8 x 10^308 while Long.MAX_VALUE is approx 9.2 * 10^18. The floor, ceil and round functions have to work for all values of a double, including preserving NaN and +/- infinity which have no analog in longs. Might be a good idea to have methods like Math.closestInt(double), etc that eliminate cast, but floor is just (int) x. The others become less clear without calling Math.ceil or Math.round and casting.
If you're making a large number of calls to it, you could try the implementation of a Mersenne Twister given here: http://www.cs.gmu.edu/~sean/research/mersenne/MersenneTwisterFast.java It doesn't conform to the interface given by java.util.random but this is intentional, and allows it to be even faster. Note it isn't synchronized though. This is used in a multi agent simulation library from GMU that is dependent on the RNG.
Yeah. The thrift compiler is written in c++ and is a native application so there is no other way to do it. I would love it if there was a java thrift compiler too!
I think half of all JSF code out there is indirectly written by BalusC ;)
The day will come when you can't remember the last time you wrote a class that didn't implement at least 1 interface.
I'm a bit surprised by this answer .. is JSF actually usable these days (for non-enterprisey stuff)? Last time I tried it (JEE 6 on Glassfish around 2009) it was an overly complicated mess.
[Sean Luke's](http://www.cs.gmu.edu/~sean/) suggestion is exactly why I started looking at the Mersenne twister RNG. But I went with the [Uncommons implementation](http://maths.uncommons.org/api/org/uncommons/maths/random/MersenneTwisterRNG.html) due to the Maven support.
That's a good point and I guess I never really work with numbers of that magnitude, but I do know it becomes tedious using those methods with sometimes a lot of casting.
JSF is absolutely great. Especially when combined with PrimeFaces and OmniFaces.
That is cool! Ha ha!
Kinda has a feel like a radix sort, where the structure or logic is based on "splitting" up the data into pieces, and therefore requires the data being searched/sorted to have a specific format.
You have a variable scoping problem. You declare and initialize button1 inside the constructor and it is only visible there. Declare button1 in the body of the class : JButton button1 (underneath public class SwingAttempt....). Then in the constructor initialize button1: button1 = new JButton("Test"); 
In Go: &gt; `obj := &amp;YourWeirdImplementationOfMyInterface{}` &gt; automatically implements &gt; `type MyInterface interface { &lt;method-set&gt; }` And that is checked at compile-time. (If you pass `obj` into a method expecting `MyInterface`, the compiler will know if the assertion holds.) What's _really_ cool, though, is that you _can defer the checks until runtime, if you want._ &gt; `interfaceObj, ok := obj.(MyInterface)` &gt; will yield &gt; `ok = false, interfaceObj = nil` if the assertion doesn't hold &gt; Otherwise you will have `ok = true` and `interfaceObj` will be of type `MyInterface` instead of the concrete type.) In practice it's quite awesome -- all the convenience of type inference and duck-typing, with the benefits of static checking &amp; interface types. 
Indeed. I was a big Python programmer but I'm coming to Java for the types, tests and DI.
not mine, but amusing. import java.util.Random; public class Funnyclass { public static void main(String[] args) { System.out.println(randomString(-229985452) + " " + randomString(-147909649)); } public static String randomString(int i) { Random ran = new Random(i); StringBuilder sb = new StringBuilder(); for (int n = 0; ; n++) { int k = ran.nextInt(27); if (k == 0) break; sb.append((char)('`' + k)); } return sb.toString(); } }
ah, ok. Cool.
Thank you good sir!
Not sure I understand the question entirely. 
&gt; Well, it turns out some code that was using this API generated a superfluous slash for the remotePath... how is that windows fault? The rest of the article is spent trying to remove that slash, and then it's windows fault that a superfluous slash was generated and this caused issues on a OS where paths are handled differently...
Here is your code, formatted for easy reading: public class Factorial { public static void main(String[] args) { long max = 0; long count = 0; long fact = 1; System.out.println("Enter a number of factorial."); while (max &lt; 1 || max &gt;= 21) { max = TextIO.getlnLong(); max = count; while (max &gt; 1) { fact = fact * max; max = max - 1; } } System.out.println("fact"); } } Here's some observations: On line 11, you set max to the value of count, which at that point it is 0. So what you are doing is actually discarding the input you took from the user. Your while loop on line 12 never runs because the value of max is 0 at that point. You are printing the string "fact" on line 18, not the value of the variable. If you want to print the value, remote the quotes from around fact. Or change it to something like "fact = "+fact 
Wake me up, when September ends....
First, I think you need to take a step back at rethink the logic of your program. Factorial is the product of all of the integers between 1 and your given value. For instance, 5! (5 factorial) is 5 x 4 x 3 x 2 x 1 = 120. So, in your program, if 5 is your input, you need the loop that starts on line 12 to execute at least 4 times. There is something in the code preventing that from happening.
That's impressive in my book.
That sounds damned awesome.
Cute. But I wouldn't rely on it in production. :) Also, no compile time checking for those expression strings.
EL is not normally used to express any amount of serious computing. In JSF it was used to bind components to backing beans, and doing tiny transformations of values on a view template. With EL now being available system wide, the sky is the limit. There's a large window for abuse when used completely standalone, but nearly anything can be abused when left into incompetent hands. I expect all kinds of frameworks to make good use of it, e.g. to specify placeholders and alternatives in config files, maybe some elaborate constraint in bean validation, a complex cache key in JCache, etc etc
So basically i know what i want to do. I want to Sort B in increasing order; sort C in decreasing order; for each a in A, scan B and C for a pair that sums to -a (when the sum is too small, advance in B, when the sum is too large, advance in C) Would i have a nested for loop here?
Our high school uses it to check all papers we send in. We are a private high school, but also have a large problem with cheating. 
Error: Lambda expressions are allowed only at source level 1.8 or above 1. Is the Eclipse version that supports JDK 8? http://downloads.efxclipse.org/eclipse-java8/2013-05-19/ 2. Is JDK 8 installed? http://www.oracle.com/technetwork/java/javase/downloads/ea-jsp-142245.html 3. Is a JRE for JDK 8 created in Eclipse? 4. Is the JDK Compiler Compliance level set to 1.8? 
I posted this to my project's blog just a few days after your question; could be what you're looking for: http://mutability-detector.blogspot.co.uk/2013/08/meet-project-opportunity-to-join-open.html
Your example has nothing to do with shorts being bad, and everything to do with auto-boxing not producing what you expect.
Do you know how to sort? A simple bubble sort would probably be fine. And then you would have a nested loop. One for each index. Basically you have a loop for array a and within that another loop to sum b and c and then advance accordingly. 
I hope you attended our webinar? Did ya
&gt; Something among this line has been added with the diamond operator which lets you avoid typing type parameter in generic classes: Actually, the diamond operator is there because the raw constructor call was already overloaded to mean "raw" type. Normal methods could already infer the generic type for some time. Famous example: List&lt;String&gt; empty = Collections.emptyList(); The constructor equivalent *should* have been: List&lt;String&gt; a = new ArrayList(); // would have been possible, but isn't So they needed something to disambiguate between raw types and generics. I'm not a compiler designer by far, but I wonder why they didn't look at the left side; if it has a generic use inference, it if hasn't use a raw type. Probably this just made the grammar too complex too parse, so they added the diamond symbol. 
Why not static import Files.write and Paths.get as well, so you get: write(get("myfile.txt"), "Hello, world".getBytes(UTF_8), CREATE);
By default go local. If you have many nodes, let them all use their own local EJB beans that talk to the database. Only when you have some beans with a strong network wide identity (like e.g. a job manager that runs once for all nodes) look at remote for those beans only. If and when you need remote DAOs you can migrate your existing beans, but don't add complexity and a performance hog when you're not absolutely sure WHY you need it. The mere fact that you need to ask this question means you guys don't really know. As said, in that case always go for local first.
Only other one is `Runtime.exec(String)` but that'd be just as ugly. All I can recommend is to wrap it in a method if you haven't already. That way you don't have to stare at the ugly ProcessBuilder calls. Invoking Java is pretty much the same on all systems, so you really shouldn't have to worry about ProcessBuilder breaking portability. One thing you have to take into account is that the original process that spawns these new processes cannot exit until all the ones it creates do. There is no platform-independent way to fork a new independent process, AFAIK. All the current hacks involve running the new process in a platform-specific shell (`cmd` on Windows, `sh` or `bash` on *nix, etc). But if your main process starts all the benchmarks and waits for them to finish, that should be fine. Also look at the `ProcessBuilder.redirect...()` methods. Make sure that you're piping the subprocesses' stdin, stdout, and stderr to where you need them, if you need them. `ProcessBuilder.inheritIO()` sets the child processes' streams to the parent process' ones.
I've used JavaProcessBuilder from jlibs before. http://code.google.com/p/jlibs/wiki/JavaProcessBuilder It is backed by a ProcessBuilder similar to your example, but hides that from you.
Too bad the referenced links (introduction to Faces Flow) are in Turkish only. Or have I missed something? Edit: Ok, my bad. There's an "English" button on the top right.
Why spawn new VMs? Considering benchmarks shouldn't be run concurrently what are you really isolating against by starting a bunch of sequentially executed java processes? Why can't you just run them in your runner VM and do a System.gc() in between each benchmark?
Benchmarks should not be run concurrently (especially if they are highly concurrent ones like I am doing.) Experimentally, I've found that isolation via VMs gives much more consistent results than `System.gc`.
Just realized, I can use the `java.home`, and `java.class.path` properties.
I never said benchmarks should be run concurrently, I said the opposite. Even if you discard the first couple of runs and then make a large number of runs and average the results do you still see separate VMs producing more reliable results? Have you considered using ANT with a Java task that sets the fork option?
She really should've measured against a b+tree with a higher fanout. The trie already has a fanout of 26 according to the text. Afaik, the only significant benefit tries have over b+trees is reduced memory usage. I'm mentioning this, because considering that there already exist many production-grade b+tree implementations in all sorts of places, hand-rolling your own trie may not bee the smartest of decisions.. Similarly, I fail to see any real difference with the binary search over the sorted list compared to the binary tree. This should have been a linear search, performed over larger and smaller dictionaries, to demonstrate the effects cache locality and algorithmic complexity have. (Also, if you're absolutely sure that you'll ever only use the 26 letters of the alphabet, you should probably pack your keys..)
I'd be much more interested to hear them discuss how they maintain such large indexes and process 190k new articles a day in a timely and efficient manner.
Okay, I misunderstood you. I'm sorry. Yes, having separate VMs is much more consistent than reusing the same VM. Yes, I sort of feel the proper way to do this is to write a script (ANT, shell, could be anything.) But a Java file is working well enough. I didn't explain why I think this gives more isolated results. First, there is no garbage shared between rounds of the benchmark. Second, the jitter is reset for each process. Third, any secondary factors such as time to jit code, or time to load classes (which usually isn't a problem but sometimes pathological situations such as having 2000 threads try to load the same class at the time can happen) are taken into account, and not neglected.
While appropriate for many scenarios, there are things that could not be profiled in this way. How would you measure the startup time of an application that contained many static initializers, or where many small classes are loaded off disk?
How is this any different then the default Java FX application that comes from making a project in Netbeans or IntelliJ? Not only that, you introduced Circular dependency between your controllers, didn't really go with any strongly implemented MVC-ish patterns and show no use of the new Property objects and Bindings.
"Warning! RoboVM is alpha software. It's not yet ready for production use. Expect to be bitten by bugs." Still, I hope development continues on this, especially as LibGDX is going to start using RoboVM for porting games to iOS.
Nice one, I'll be sure to watch some of these. 
Because just ``write(...)`` wouldn't communicate what's happening to the maintenance programmer in one glance, which is the primary objective.
Could you tweak this to use assume the `thrift` executable is in `PATH`? I want this to work not just on Unix machines, but in Windows as well.
This guy is good: http://www.youtube.com/watch?v=TBWX97e1E9g&amp;list=PLE7E8B7F4856C9B19 Also, I like Bucky at TheNewBoston: http://thenewboston.org/list.php?cat=31
Most viewed talk is "Don't use git". WTF? Edit: Ok funny guy.
My educated guess: HBase or a similar distributed table system. The articles are relatively small (tens of thousands of bytes) but there are a large number of them.
Can't get the input file to display correctly, its getting rid of all the line breaks
Much appreciated!
9 downvotes? I wish the "webmaster" scripters would not troll this subreddit.
1) [Pastebin](http://pastebin.com/) 2) /r/javahelp 3) Explicitly state what the **exact** problem is, what you've tried to fix it (e.g. throwing in a load of System.out statements to help you see what's going on, or stepping through the code with a debugger, etc).
This is actually a big deal because the old JDK bug tracker didn't even work properly. It was unusable.
I already directed them to TNB! Good to see we're on the same wavelength.
I could try to ask the author :) I like the goodies, like the way the spec files are used to generate documentation examples and unit tests
Quite interesting, indeed I will look after it for sure. Hope it won't the walk the way of the hipster frameworks, i.e. Play2.
No, actually i am trying to use it in project where i regularly do some common tasks. So thought I can put it in common place. I came across Utility class. So Asking it now because it should not give any problems like heap space error.
OMFG. Did the bugs escape the AS/400 emulator running on the Z80?
That was awful.
Outstanding collection. Why the downvotes? Can a downvoter please reveal himself and explain? Thank you!
Could these be satire?
You mean something like this? http://karaf.apache.org/ http://www.eclipse.org/virgo/ 
Its really slow.. 
Well, start reading keyboard input, then convert the temperature, finally output it. Et voilá!
Have you considered using OSGi?
Karaf looks promising and simple enough. Thanks for the pointers.
I'm very new to the OSGi framework. I should point out that while my components are separate projects, they are not independent. For example, some of the components employ a Singleton that is accessed from the the other components. They must all be in the same process. Can I still put my various components in an OSGi framework?
The IDE has nothing to do with it. He's talking about syntax features and such. Still waiting for that elvis operator...
not sure if i'm at all right class TemperatureConversion { public static void main (String args [] ) { int temperature; int equation; int answer; System.outprint("Enter the temperature -&gt;" ); temperature=EasyIn.getInt(); System.out.print("Enter the equation -&gt;" ); answer= (F-32)*5/9; System.out.printIn("The degrees Fahrenheit is" temperature ); } } 
&gt; not sure if i'm at all right Well, what happens when you compile it? More to the point what errors are you getting, what do you think they mean, and what do you think you need to do to correct this? A computer is dumb, for example it won't be able to reason that it's getting the temperature in Fahrenheit and so that's what value to use instead of F a couple of lines later. Separate to this, this type of question is better suited to /r/javahelp.
Of course, It's JIRA.
Have you considered [Java Web Start](http://en.wikipedia.org/wiki/Java_Web_Start)? It does most of this stuff.
JSP is more of a templating langauge similar to PHP. The problem with JSP as you've fond is that they get messy really quick. You can help mitigate this by trying to separate out as much business logic from your template files. Learn about the Model-View-Controller pattern if you're not already familiar. You should have clear separation from your view code so you can easily swap it out or add alternative interfaces to your program. Using the [JSTL](https://jstl.java.net/get-started.html) also helps keep your JSP files clean. Many developers abandoned JSP for alternative template engines. The most popular are Freemarker and Velocity, but there are plenty of others like Scalate, Mustache, Simple String Template, etc. These are generally a bit cleaner because they have consistent syntax instead of just mixing java code with html. JSF is more of a web framework that dictates how you develop a web application. You need to understand certain things about how JSF manages the view lifecycle, and you have less control over the generated html and javascript. However my exerience with JSF was fairly positive, especially with primefaces, as it lets someone with little to no HTML and javascript experience to generate complex dynamic websites. It's good for pure Java developers who don't want to learn a bunch of new stuff. It can be a bit limiting though, and it has some issues with statefulness and scaling which shouldn't be an issue if your just running a single server without too much traffic. Personally I like using jax-rs. Jax-rs and Java EE 7 is one of the best web platforms I've worked (including Spring MVC, Wicket, JSF, Play, etc.), and they are a Java standard. You can use JSP, velocity, freemaker, and many others as your template language. However, if you want to get really serious, you can develop your application as a set of REST services and develop a client side UI completely separately from your application. You can write your UI in simple html and javascript, or use a clientside framework like Angular JS or YUI. Maybe take a look at GWT which lets you compile clientside html and javascript from Java. The advantage is that it's trivial to add new UIs (mobile website, smartphone app, desktop client, etc), great scalability since more of the code runs on the client side, more control and freedom in writing the UI. I think this is how a lot of the big boys (amazon, twitter, yammer, etc) roll. Check out [Dropwizard](http://dropwizard.codahale.com/) which is what Yammer uses internally and is a pretty good production ready platform based off Jax-RS.
Aaaaand starred. Any idea if this is portable to android?
Not the darndest clue. Would love to find out, though. :)
What are you currently working on? How can we fix this to be better? I just forked it :) Thanks!
Is there some configuration I need to do? One of the unit tests is failing for me. ` parseCommentsJson(com.cd.reddit.json.parser.RedditJsonParserTest) Time elapsed: 2.095 sec &lt;&lt;&lt; ERROR! java.lang.ClassCastException: com.cd.reddit.json.mapping.RedditLink cannot be cast to com.cd.reddit.json.mapping.RedditComment at com.cd.reddit.json.parser.RedditJsonParserTest.parseCommentsJson(RedditJsonParserTest.java:100)`
Oooh! A Scala port would be neat!
That's really bizarre. As far as I know there should be no configuration needed. My local workstation uses Maven 3.0.5 and JDK 1.7. The class casting I'm doing ATM to pull off the Jackson serialization is kind of bogus and needs to be addressed. 
Basically I want to create a neo4j graph of reddit data and this is kind of a dependency of that so decided to make this first.
Multithreading with Swing is very hard to get right, I would not advise anyone to try to do it themselves. The best way is to use the SwingWorker class, http://docs.oracle.com/javase/tutorial/uiswing/concurrency/worker.html The rest of Swing (Listeners, events etc) will take time and patience. When I was learning Java it took me over a year before I felt comfortable with Swing. 
I'm using Maven 2.1.2 and JDK 1.6. When I put a breakpoint at line 100 and look at parsedTypes, the first element is RedditLink and the rest are RedditComment. If I change the types around like below, the test passes, but I'm not sure if it does what you expect since I haven't figured out the code yet. @SuppressWarnings("unchecked") @Test public void parseCommentsJson(){ List&lt;RedditType&gt; parsedTypes = null; InputStream jsonStream = this.getClass().getResourceAsStream("/comments.json"); String testJson = convertStreamToString(jsonStream); testParser = new RedditJsonParser(testJson); try { parsedTypes = (List&lt;RedditType&gt;)testParser.parse(); } catch (Exception e) { e.printStackTrace(); } for(RedditType parsedType : parsedTypes){ System.out.println(parsedType); } //TODO: The first element will be of type RedditLink.... need to reconcile this. assertEquals(true, parsedTypes.get(1) instanceof RedditComment); }
You should dissolve some packages, especially those with a single class in it. Don't package classes by their type (e.g. exception or your http.util). Rather keep classes together, that have a strict dependency and handle the same domain. Treat each package as an API for other packages (http is good). Use subpackages to structure components of a domain (e.g. Jersey implementation of your http domain). Then you will have a nice API artifact, that I can look at and understand just by the package structure and their classes (and resources).
Thanks Graham, I appreciate all your hard work and your generosity in sharing this with the community. My mistake about #1, for some reason I thought it also operated on bytecode. Thanks for #2, I should have looked around! For #3, it's all about convenience and level of effort to implement. A maven archetype could create a project ready for validation. The fewer steps to getting this implemented the more likely it is to get rolled out. 
I like squares stuff. Too bad Otto doesn't work on a jvm.
http://stackoverflow.com/questions/16290543/using-keypad-to-move-a-circle-at-angles-in-java via http://google.com
Alright I feel I'm doing something wrong here. Is there something I need installed? I am getting seismic tons of errors, as I go back and retype everything and coordinate it with my project. Errors.
And reddit is of course known as a community that consists largely of psychics so there is no need to show us what you did.
I actually just created an account today after months of lurking..So, I apologize for anything I may do poorly.. Unless it unprofessional to apologize :O. 
Not to discourage you, but you should check my fork of jreddit: https://github.com/tjstretchalot/jreddit It is a library rather than a wrapper, but if you need a second reference it might be helpful. 
I can't speak for libGDX but in the case of Java I haven't seen many tutorials that even mention the IDE.
Back then I never wanted to do my own homework, and now I should do yours? I don’t think so.
For something simple, why not try Play! Framework? You could fairly easily use jFreeChart with Play! as well. http://www.playframework.com/
The scatterplot is taken from this blog http://fagblogg.mesan.no/how-bad-is-smelly-code/
http://docs.oracle.com/javase/tutorial/
You'll be in for a world of hurt without an IDE when coding Java. Eclipse, IntelliJ Idea and Netbeans all work on Windows, Linux and Mac OS X.
The bottom line is I need to include a Java 1.6 version. I'll work on making a Maven profile/travis-ci build ASAP - it seems to be the most useful next step.
This, along with a Java 1.6 build will be my next steps.
Notice that the variable reverse is declared as an int and word is of type String. Comparing a String and an int will not produce the correct results. Changing reverse to the correct type and initializing it correctly should fix your problem.
Because reverse variable is not a String. It is an int, so you are not concatenating those chars, but adding their value (char is technically a number). That should be it. Also, there are more appropriate subreddits, like /r/javahelp or /r/learnprogramming.
Thank you. Yeah i know about javahelp but I checked a few times there and there were no readers.
Any chance you have this problem for homework? By the way you described the problem and your "tons of errors", maybe there's some tutoring you can sign up for?
It's cool. I'm curious if splitting the big files into small files would reduce lookup time when reading and editing.
Create a new string which stores the reversed input, then compare them: String inputString = args[0}; String reverseString = new StringBuffer(inputString).reverse().toString(); if (inputString.equals(reverseString)) { System.out.println("palindrome"); } else { System.out.println("not palindrome"); 
Well well well, kind sir, I came here because I am a noob at coding and thought some experienced coders could help me or at least put me on the right track (Which they did). I asked politely and didn't expect results. A good coder would be able to point me in the right direction (and not spend much time or energy doing it) because they CAN. They (nwilliams36 and rntr200) probably didn't spent much time because their database of knowledge was so great and they were noob coders once too. So, if you would kindly stop being a troll (who most likely doesn't know much java and go troll a different post.
Thanks, Ill look into that when I have more time! I can use the timer from rntr200 for now, and your post will really help me next time I have to multithread!!!!
"read" in this case doesn't have anything to do with how long the file takes to load.
It's usually difficult to just simply split a big file without *some* refactoring. Seems like that refactoring would definitely be an improvement
The entire OSGi framework can run in the same JVM so a regular singleton would work the same. When it comes to OSGi components specifically, it is possible to ensure that the component itself is created as a singleton. That being said... might be a big hammer for your use case.
That was my point. By modernising and refactoring the code, it would improve the long term time spent viewing and editing it.
Unless you load files into your eyes, I think you might've misunderstood the context of 'read' in this submission.
Oh god, please don't ever write code like that! boolean isPalindrome = true; String str = args[0]; int length = str.length(); for(int i = 0; i &lt; length/2; i++) { if(str.charAt(i) != str.charAt((length-1)-i)) { isPalindrome = false; break; } } if(isPalindrome) System.out.println("Palindrome"); else System.out.println("Not a palindrome");
What server are you using? Tomcat had this functionality built into a management application.
I do not really think of JIRA as modern. I know it is popular but is it very unintuitive and clunky to me. 
Of course, then you have to remember more file names or class names...sometimes in a very large project with immature documentation you could spend a while just looking for a class!
I've been only coding java for 2.5 years now, and I've been doing little things like little testing things. I've never tried anything like this before. Last year I went to a class, and someone who was next to me had something like this for homework, and he made a damn good game. I've had online textbooks, know any other good ones?
Some other things to consider: 1. What do you currently use? Assuming you're at a company or similar organization, if you have a lot of Java developers, if you need help for any reason, it'll be easier to get help. 2. Do you have time to learn something new? 3. Do you have the freedom to look at something new? That said, the aggregation part is making me lean towards Java, though depending on what you're doing, you can look at other languages. Python and Perl both have libraries that may help you with the aggregation. D, using vibe.d, and Go would let you build a web server without a VM, which may free up a good chunk of RAM for doing the aggregations. I don't know enough about Node.js to comment on it.
Cheering?
Anyone know what they used to collect the metrics?
Interesting. Seems that there's a critical point at 400 LoC. So going roughly, I'd say that's the line limit per "unit" of code (whether for your project that means file, class, namespace, or function, depending on problem space).
I'm one of the authors. The data was collected from an event logger installed in Eclipse by a team of 6 developers. The logger collected time spent scrolling and editing. It seems like long files with lots of logic makes the developers waste a lot of time. The goal of the project was to find out which of the code smells mentioned by Martin Fowler and Bob Martin are most important. Long source files is the most basic code smell, but it's an important one.
Reddit has nothing to do with it. You're asking for help without telling us what the problem is besides "there are errors". How do you expect someone to help you on this basis?
Yeah i was wondering why they were comparing the whole string when you only need to examine half
He's too awesome for those puny human tools. REAL ULTIMATE POWER is what he is after. But yes...world of hurt indeed. Sadly I couldn't constructively suggest any requested solution for his question :(
We have not focused on threshold analysis for file size, but it could be interesting to look at it. Although our results were statistically significant, the sample size is still 'modest' at its best (302 files), so it would be nice to redo this type of analysis with a larger sample :)
Your code might have problems with Unicode in (rare) cases where surrogate characters are used. For example str = "\ud835\udd0a" : Your code : &gt; Not a palindrome new StringBuilder(str).reverse().toString().equals( str ) : &gt; true
I would and I will, I just feel this subreddit is full of pros and if I show and work that is inadequate I may get picked on in some way.. like on 4chan... Just not really used to reddit. 
In eclipse, right click on the Java file that has the main method and click "Run As" --&gt; "Java Application". FYI: Ant is a build tool for java where you can specify so called "targets" like just to compile the application, run the tests, package it into a JAR or anything you specify. You probably don't need this for a small assignment.
replace the line 4 int reverse = 0; with String reverse=""; you are comparing String to int on line 9 you need to compare String.equals(String)
It would be neater even to compare scatter plots or subsequent trends of multiple programming languages (in comparison to java). Something like COBOL I imagine would be horrendous.
if i understand what you're asking, then when the user enters 100, it prints out the change values for 1 cent, then 2 cent, then 3 cent, etc. you could put an if statement to check for cents == 100, if so do your for loop passing the values 1-99 to your makeChange method, else, do your current while loop. essentially your three conditions are user entered 100, print all of them in a loop, else the user entered a value 1-99, just print that change and re-prompt the user for the next input, or the user entered 0
Im a nub... but you got what I am trying to do. so in the makeChange method I add a line cents == 100, if (true)... im lost allready...
Warning: not actual code, but hopefully you get the idea. if (input == 100){ for (int i=1;i&lt;=99;i++) { makeChange(i) } } else { // do the crap you normally do here }
Plus one for Go. Networking especially and concurrency in general are strong points there, not to mention very efficient resource utilization. Aggregating on goroutines and channels well be very straightforward and give you what you want.
I've found OSGi to be very effective for modularization and zero downtime upgrades of individual components. Don't be butthurt because you haven't taken time to read the spec or one of the hundreds of tutorials out there.
What if there are spaces that are not aligned or punctuation? Such as "a toyota's a toyota"? You must account for this by removing all spaces and punctuation.
Letting other people do your homework is still cheating.
Agreed, I'd be lost without my IDE (I use Eclipse). To be honest I've never *not* used an IDE since I came from C#'s Visual Studio to Java after making the jump to Linux. Admittedly it was a slightly difficult jump but it was worth it. Although I'm sure the real reason he wants to use just Vim is because he's a UNIX elite who thinks that IDEs are for wimps. I've never had any real luck getting support from UNIX members since a lot of them are stuck up elitist users who are purposely unhelpful.
I agree with you about clean code, but this is really not "arcane crap", it's a really simple for loop. If it takes you half an hour to understand, then... I would prefer /u/gezzed's code for most situations too. Maybe /u/QshelTier know's he'll be reading an entire file into a String so it might be 2Gb and an in place solution would return false before the StringBuffer initializes with a copy of the String. You don't need to profile everything to know it is stupid. You say that /u/gezzed's solution "screams what it's about to do", I say that it can throw an NPE rather than returning false, because he compares an unknown string with one that's know to be initialized (which is backwards). Stop being an ass hat, some people around here are trying to learn and some of us are trying to help them.
Wow, whoever downvoted you was a douche o_o . Anyway, now that you mention it, neither have I. Internet points for you, sir.
Good point. Cross compatibility was more of a concern than anything, but... hmm. Well, see my update in OP.
Not sure if sarcasm... No upvote, but also no downvote because you gave useful advice, cheers. See my update in OP.
Well, most arcane crap is just simple for loops, and counters, and gotos, so there goes your argument. Of course there are other conditions to watch out for (like large files). The code can only result in an NPE if `args[0]` contains `null` which it won’t if `args` is the array containing the command line which it does in this case. Basically, what I’m saying is that for these pointless exercises (which OP should be doing *on his own* because *it’s his homework*) using code that is easy to read and understand is preferrable. That is how *I* am helping and /u/PintSizedCat is confusing.
And now you have already wasted a complete day waiting for replies on reddit. Perfectly good time which you could have otherwise used to start prototyping your application in both Java and Javascript so that *you* can see which one is faster, easier, more efficient for *you*, *your* environment, and *your* usecase.
Hi plbogen, Sorry for the delayed response. Regarding you questions. The la4j uses all the matrices through their interfaces. It dosn't convert anything. There is also quite a nice idea of using factories. So, you can pass the factory into the algorithm and this factory will be used for creating a result and any internal and temporary matrices/vectors. The API things are always pain in the neck. I designed the API in a way I'd love to use it. I wasn't trying to copy BLAS API. Anyway, having a Wiki of Doc that describes all the ideas of how to port an existing code from BLAS/EJML/etc to la4j is a good idea.
The fuck, *text book*? You’re saying, for-loops are in a book somewhere so this solution must be better? The book that states this solution as preferrable to the `StringBuffer` one is probably from the mid-70s and was already outdated even back then. I outlined above the conditions under which a loop-based approach is probably the more sensible one but clinging to the notion that it is somehow equivalent in its not-bad-ness to the `StringBuffer`-based one is embarassing.
No, I'm saying that an in place solution using a for loop has pluses, that old solutions aren't necessarily bad, and that every programming text book ever shows doing a for loop to reverse an array. I'm also saying that if you're confused by that trivial for loop you should work on improving your own programming. Seriously, it's a for loop with a single if condition.
What comes below this is a Java class that has a function to add numbers together. public class NumberAdder { public int AddNumber(int x, int y) { return x + y; } }
note that this is still in development version 1 is expecting early 2014, with features like bridge for Spring and Guice dependency injection, better error reporting, maybe async support...
Create a class to hold the user's guesses and bet: public class BettingMachine { private short guessOne, guessTwo; private float bet; // Constructor that takes the user's guesses and bet public BettingMachine(short guessOne, short guessTwo, float bet); this.guessOne = guessOne; this.guessTwo = guessTwo; this.bet = bet; } // Implement a single method that takes the dice values and returns // the total bet. public float getBetTotalForDiceValues(short diceone, short dicetwo) { // vastly simplified logic int die1 = diceone.getEyes(); int die2 = dicetwo.getEyes(); int sum = die1 + die2; if ((guessOne == die1 &amp;&amp; guessTwo == die2) || (guessOne == die2 &amp;&amp; guessTwo == die1)) { switch (sum) { case 2: case 3: case 11: case 12: betTotal = bet + (betGuess * 1.5); break; case 4: case 5: case 9: case 10: betTotal = bet + (betGuess * 2); break; default: betTotal = bet + (betGuess * 3); } } else { betTotal = bet - betGuess; } } } // Now instantiate the class. BettingMachine machine = new BettingMachine(guessOne, guessTwo, bet); float betTotal = machine.getBetTotalForDiceValues(diceone.getEyes(), dicetwo.getEyes());
Probably a VIM zealot - whatever, I don't mind. Anyway, I would actually recommend using an IDE when learning Java. The main benefits are that the IDE will immediately point out syntax errors, and highlight some of the more obvious code smells (in Netbeans they get underlined in yellow and mousing over them explains briefly why the pattern is bad and suggests an alternative). Library javadocs and sources are easily installed (if you are using Maven then it's as simple as a right click on the dependency) and code completion will show you a selection of methods and signatures, some of which you may have missed if you were solely relying on a text editor and reading javadocs. The big three are Eclipse, Netbeans and Idea. I prefer Netbeans as I find it works out-of-the-box. Eclipse is probably more powerful because it has many more plugins, but I found that configuring it to how you like/need it was a chore and a real pain in the ass when you have to work on a different machine with a different setup. Netbeans has come along nicely in the past few years and has the benefit of following official spec pretty closely. I've heard good things about Idea, but I've never tried it. On the whole, the benefits of using an IDE to learn a language far outweigh the disadvantages. Once you are proficient you can/should get some experience of working with a text editor - it may be a life saver if you're forced to debug or edit some source code via a terminal one day - but the actual benefits to *learning* are small. source: I first learnt Java using notepad. It was not a happy experience.
I wonder how much of the problem is actually file size, and how much is class size? As long as there is more code in a file than you can fit on the screen, I'm not sure why it matters if there are 100 or 10000 lines in the same file, as long as I know how to use the relevant search-function. Maybe some of the developers in the experiment were inexperienced and were manually scrolling the files to look for some method/variable? Did you compare the effects with class or method size effects? Of course in Java with the "one public class per file" rule you are forced to have smaller files when you make smaller classes, so even if the real reason is class size (as I suggest) that would be difficult to separate from file size (in Java).
Well if you want to learn how it all works, using a build tool to build your project is a great way to do that. I use [gradle](http://www.gradle.org/) in java projects. In java code completion and inline java doc is so important because there is such a rich amount of utility available to you. So I at least suggest having eclipse open, for learning and when you are stuck. If you really want to use vim there are some hackish ways to tie it into eclipse, or you can use eclipse vim plugin to give you more of a vim feel. Or you can use vim to edit files after you get a better understanding of how everything works. Another nice think about build tools like gradle, or even eclipse plugins where you can use analysis tools to help you with the quality of your code (pmd, findbugs etc). I find these types of tools invaluable because alas no one can write perfect code. They are also great ways to learn when you do make mistakes or code smells. (you will learn that you can't take every warning literally though). I wish I could point you in a direction to a tutorial for getting eclipse with gradle running with libgdx but I haven't google'd enough or written one myself yet :( Depending on your level of expertise this could be really easy or a bit difficult. I wish you luck on your quest and if I find or write something that would be beneficial to your request I'll be sure to post it here. 
Better than XML in many cases. I'd call that an ".ini" file not ".cfg". 
interesting, I had never heard of multitenant jvms before. EDIT: fixt!
They are *always* the first, but has anyone ever used this?
I assume you're speaking in the context of a webpage, in which case you'll need some sort of client-side scripting, which is usually javascript. I recommend you look into jQuery, especially the validation plugin. Of course, if you're talking about validation from a java applet, you can just plugin in a key listener.
Why would you want to do this? This defeats the purpose of dependency injection. This is not a feature that is "lacking" because there is no sensible use case for this. You shouldn't use a static final field to hold references to swappable database implementations when you are using DI. You should specify an instance field of an interface type, and configure the DI container to inject the correct implementation wherever it is needed. Swapping a static field would alter all classes everywhere in the same container, which goes against what DI is for, which is for controlling how references are handed out by the container. The DI approach to singletons is to not worry about it. Make singletons ordinary classes. The container will ensure that only one instance is created. Static fields and DI do not go well together.
Not in the makechange method, good practice is keep your methods as simple as possible. Instead do the conditional to check which loop you run, either the one you have now that does 1 call and reprompts the user, or the one with a for loop
&gt; Swapping a static field would alter all classes everywhere in the same container This is exactly what I want to happen. I would not want it to be possible to have two different data sources for the same type of object. Ex: I want either MySQL or MongoDB or an in memory database, never a combination of them for the same object. Ideally my static class would be the only class referencing this object anyway. I just want to be able to hot swap database implementations at start up time. &gt; You shouldn't use a static final field to hold references to swappable database implementations when you are using DI. This is what does not make sense to me. If I were not using DI this would be perfectly reasonable. However, since most DI frameworks can't do it (reflection does not allow this) it is assumed to be bad practice when in fact its not. &gt; which goes against what DI is for, which is for controlling how references are handed out by the container. How is handing one reference to a static field not dependency injection? It seems a lot simpler and more straight forward to me than passing out the same instance to 5 different classes. A static class and a Singleton are very similar each with their own pros and cons. I tend to prefer static because I think it is much easier to use and I don't have to reference the singleton all over. The only sound argument against injecting into static final fields I have heard is the difficulty to test. But if you could inject a mocked object I think it would work fine. Which is why I asked if it is possible. 
&gt; I would not want it to be possible to have two different data sources &gt; for the same type of object. When you're using DI, you let the container worry about this. The whole point of DI is to separate instantiation policy from the implementation details of the class. You want to enforce uniqueness through a static variable (the singleness of static being an implementation detail), but that goes against everything DI stands for. The purpose of DI is to let the container decide what reference to grant an dependent class *for the purpose of allowing that decision to be changed in the future*. Maybe you want more than one data source in the future. Making the reference static eliminates that possibility. &gt; If I were not using DI this would be perfectly reasonable. Sure, *if you were not using DI*. But *if* you are using DI, why mix instantiation policies? Why would you expect a DI container to do something completely non-DI? If you want to create some hybrid project, that's cool. But you'll have to figure out how to do that wiring yourself. &gt; I tend to prefer static because I think it is much easier to use and I &gt; don't have to reference the singleton all over. That's fine, but that's not how DI works. The use of a reference all over is a *feature* of DI, because that reference can point to the same or different instances based on the configuration of the container without the class having the reference from worrying about it. &gt; The only sound argument against injecting into static final fields I &gt; have heard is the difficulty to test. If you mean in general, yes. If you mean in regards to DI, it goes against the core principles of DI. Static and DI do not go well together, because DI is dynamic. You could put wings and a propeller on a car, but why? If you want to fly, travel by airplane.
This is the most famous unknown server there is! I think almost nobody has ever used this server, and everyone only knows it from the news postings every 3 years that its the first server to be Java EE x certified after the RI. Odd... really... really... odd...
A game graphis engine would be more convenient, but I need to know how to do a game first right?
What's your poison then? I think JIRA is fairly okay. I hate their URLs most of the times (there's A LOT of crap in them and half of the necessary parameters seem to be stored in the session for no good reason), but the global activity log and searching for issues, ordering issues per project and the wiki syntax is okay. Performance is most of the time okay as well. I've used Trac as well. It has a better URL structure (stuff you see on screen is what is shown in the URL), but Trac can be dog slow (perhaps because it runs on Python, perhaps because of the way is was build). I hate Bugzilla with a passion... it's a miserable excuse for an issue tracker IMO.
JVMs ;)
http://www.turnitin.com/en_us/features/originalitycheck/content
Read the Getting Started tutorial from here: http://docs.oracle.com/javase/tutorial/
On what kind of a Commodore 64 did they manage a 420ms average startup time for a helloworld application?
Reading and understanding that will help you avoid problems with your school's academic review board.
Interesting post, good pull!
I think you forgot how slow the C64 really was ;)
IMHO that was a plausible run time for simple calculation programs that I executed on my netbook with an Atom N270.
The hipsters have already moved on and left Play behind. AngularJs is now pretty hip.
for sure! I wouldn't downvote you though, I'd make the comment myself to myself.
Not necessarily. It is basically the Cocoa framework ported to Java so you can write iOS apps without Objective C. However you still have to understand the iOS programming paradigms and libraries from what I can tell. 
I think it will be easier to write one code base and run it on desktop, iOS, and Android (hint: JavaFX)
You're getting an NPE because [you cannot mock final methods](https://code.google.com/p/mockito/wiki/FAQ) in Mockito, so the real method is called. You can either use a real ObjectOutputStream or use something like PowerMock's [MockFinal](https://code.google.com/p/powermock/wiki/MockFinal).
Fair enough, I will admit that learning a language outside an IDE definately helps to get it's syntax and principles rooted deep. For basic principles vim/gedit/geany/whatever you want to use and **javac** works fine. However, if you're going into multi-class projects with several libraries, an IDE will help greatly. I know I'm probably going to get a bit of hate against saying this, but the **Java for Dummies** book by Lowe actually does a good job of emphasizing exactly what you're trying to do: Learning the basics of Java before actually going into an IDE, and tbh it's actually one of the better For Dummies books out there (there are some crummy ones that do a pitiful job of explaining programmatic concepts and object-oriented programming). So if you have the time/money to go get it you might find it useful for learning basic Java concepts. 
Overall I like the new syntax for lamdas and some of the considerations they put into making it more sane than anonymous classes (no unecessary references to the enclosing instance). But I am extremely dissapointed in the use and position of the `default` keyword for default interface-method implementations. It is in the same (traditional) spot as the three access modifying keywords, `public`, `protected`, and `private`; combined with the fact that the fourth access "level" is officially ***default*** this is bound to cause confusion; especially since I have witnessed the confusion caused by the fact that there is no keyword for default access. They should have put it between the method and the code body, like is done with annotation values and their default values. Luckily I guess not too many people actually use default access. Also, since you can't have anything other than public access in interfaces, maybe that will alleviate some of the confusion as well.
I think the position of default was chosen to match that of other modifiers, such as `final` or `abstract`. I had once tried to bring up the subject of adding support for the `final` keyword in interface method bodies: http://mail.openjdk.java.net/pipermail/lambda-dev/2011-December/004426.html As an API developer, it would be nice (but not very important) to be able to provide overloaded `final` convenience methods in an interface. But the whole discussion around default methods was more pragmatic than visionary, in a way that the simplest solution making lambdas work will fit. In another attempt, I tried to convince the expert group to let go of `default` entirely and accept the fact that Java 8 will simply allow for optional method bodies in interfaces (similar to Scala traits): http://mail.openjdk.java.net/pipermail/lambda-dev/2012-August/005393.html No success, again :-) So we'll have to live with the fact that Java is a rather "irregular" language. In every day work, I guess it won't matter too much.
You need more upvotes. +1 for removing the default keyword from interfaces. 
If you don’t need to keep the objects in order it sounds like you actually want a `Set`. Depending on how your object is written it will perform the duplicate check for you, and it’s not really slower than managing an array yourself. 
Convert all the cells to strings, the jtable will do that anyawy. Storing something as a String or (Object) someStringRef, doesn't do anything for memory usage. Try a LinkedList&lt;String[]&gt;. LinkedList&lt;String[]&gt; yourList = new LinkedList&lt;&gt;(); for(YourRow row : getYourRows()){ yourList.add(new String[]{ row.key.toString(), row.name.toString(), row.someOptionalBullshit == null : row.someOptionalBullshit.toString()); } makePrettyTables(yourList);
Using primitive arrays and practicing OO are mutually exclusive. When practicing OOP, the more important question is what are the behaviors between objects, not how the data is stored. In most cases, you should use the Java Collections API instead of primitive arrays because the Collections API offers far greater capabilities than primitive arrays. For example, the `Set` and `Map` collections allow you to weed out duplicates. You can practice OOP and still use primitive arrays. If you are mapping a key to a value to weed out duplicates, a `Map` sounds like the data structure you should use, and if speed (and not memory) is your concern, a `HashMap` would better suit your purposes. [This](http://www.objectmentor.com/resources/articles/CoffeeMaker.pdf) is probably the best article I've read on thinking in OOP.
More internet points for you. You seem to have been through the thick of it, so this seems like good advice. I'm going to check the other two, but Eclipse was what was catching my attention so far. Cheers.
Sweet, thanks man. Yeah, looks like Eclipse is where I'm headed based on all the responses so far. I'm not really all that stuck on Vim (though if I have to edit text outside of a specific purpose, it's what I default to).
Well, I wont give you hate for simply suggesting something from the "For Dummies" library, some of those books are pretty good (outside of programing anyway). Seems like Eclipse et al are "noisy" enough to at least shove the things I'm looking for in my face enough to know what to look for if I ever do have to do something manually, so yeah, probably going to start there.
Focus on writing readable code and worry about optimisation later. Let the JVM optimise for you. Its authors have far more experience than any of us. You may need to optimise manually if you are dealing with extreme edge cases but for day-to-day development, readable is better. Your future self will thank you when you return to the code a year later.
The fourth access level is actually "package". I think it was planned to allow the explicit use on methods in Java 8, but has been postponed. 
I'll give it a read. You can't work primitive arrays like objects so I figured if I'm gonna retrain my brain in OO I may as well store my data in an object. Thanks.
&gt; +1 for removing the default keyword from interfaces. Way too late for voting at this point.
Here's the first slide of my lambda training materials: http://i.imgur.com/z6aV8su.png
Do you have the source code? This might be a better SO question.
Wow ... you guys didn't keep the source code?
You need the Java Communications API...specifically comm.jar and/or a properties file defining the settings. Edit: The files you need are probably still on the old server. Copy them and make sure they're in your classpath.
[Here's a link to the comm.jar](http://llk.media.mit.edu/projects/picdev/software/javaxcomm.zip). You should probably just grab it off the old server though, as shrapnull suggests.
I would recommend getting the comm.jar and putting it in the classpath, as said by other people in this thread. You can also decompile the class files in the jar if you need to get the original source code.
It was too late for voting at the time of the votation. Brian Goetz might just be the next big benevolent dictator after Linus Torvalds :-)
* If you need to get something closely resembling the source code
Why Ubuntu 11.10? The current long-term support release is 12.04. https://wiki.ubuntu.com/LTS Also, you should schedule a upgrade to 14.04 during summer 2014, after which you should be good until 2020.
they must have changed that, because I've always read "default or package default", but encouraged anyone I taught to call it "package private". Or my memory is crap. which is highly likely. Maybe I missed the "the" article when I first read it. Thanks :) http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html
Currently I have been slamming this .jar into a bunch of different versions of linux to see which one it might work in. I have been having issues with 12.04 right now with the guest additions from virtual box so transferring the file is a little difficult so 11.10 was my latest and greatest. Right now CentOS 4.4 is the only one that is even firing the program into a semi-usable state. I am getting repo errors and a commPort 340 error but those are to be expected as the old server was decommed and that OS is no longer supported. None of the other OS's are even launching the appliction its just failing from the start.
Wow.. how did you know that? Yes actually we have a tester that hooks into the PC and another RS232 going to the PC for a proxy card reader. I have not got it working yet.
How can one get one of said free tickets?
clicking the link should give you the course for free
That's what the comm.jar library is used for. You'll probably keep getting communication errors as long as you haven't configured VirtualBox to pass through your PC's serial port to the virtual machine, and hooked up the device to your PC. Essentially, to start the program, you'll have to collect a group of *.jar files, which contain all the classes for the program, and all the libraries it uses. If you are getting errors which are unrelated to the serial port thing, they probably result from missing some JAR files, or from failing to specify all the required jar files in the startup class path. Another thing you might want to be sure of is that you use the same processor architecture (32 or 64 bit) on your new virtual machine, as the old machine. The comm.jar library contains, on top of the Java classes, some native libraries to interact with Linux. You can find both at http://mfizz.com/oss/rxtx-for-java - make sure that you read and follow the installation instructions.
thanks! I'm gonna check it out now.
Thank you very much, going to check it.
That is awesome dude! Checking it out right now.
Signed up, thanks!
Many of the ideas are not java specific, but the demos and discussion of isolation (mocking) frameworks is java specific. generic ideas: readable, maintainable, trustworthy tests, refactoring techniques, build patterns..
Download the Java Communications API from http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-misc-419423.html Be aware that this is a now dead non-standard Java extension to support serial ports. The app should probably be rewritten to use a different 3rd party serial port library.
checking it out tonight/tomorrow 
Yea, also would have been great if we are able to play it at a higher speed like 1.5x or 2x
some words seem to be missing altogether...
You could have the app read it from the database on an interval if you don't need it absolutely real-time. Then you'd cache the values in memory and only check again once they become stale. This requires a core config controller with proper synchronization if multiple parts of the app read this configuration value. Alternatively you could use some sort of messaging system like JMS and have all your nodes receive a topic message that the config has been changed. You could also use some hand-rolled push mechanism but then all your servers need to be aware of each other. 
to be honest, I agree with /u/curious_webdev. the audio is bad in the 1st lesson in my opinion, I still didn't finish because of this. I would feel disappointed paying $99 for this course.
I think you can download the video file on the right panel and play it faster on VLC.
The author posted a ruby course like this a few days ago. He was given feedback like that there too. In that video he had audience members asking questions that you couldn't hear at all. He said that was a "feature". I don't think he minds about poor audio quality. :( That class was pretty difficult to follow. I can't imagine how poor this would be if his words are missing too. 
I did more audio work on this one, actually. I guess not enough. Will do more.
If you need ordering and uniqueness, consider using a [LinkedHashSet](http://docs.oracle.com/javase/7/docs/api/java/util/LinkedHashSet.html), a [TreeSet](http://docs.oracle.com/javase/7/docs/api/java/util/TreeSet.html), or a [ConcurrentSkipListSet](http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentSkipListSet.html). Any of those will maintain natural ordering, but TreeSet and ConcurrentSkipListSet may use a [Comparator](http://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html) to maintain some other ordering. The ConcurrentSkipListSet is thread safe, but TreeSet may be made treadsafe by using [Collections.synchronizedSet](http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#synchronizedSortedSet\(java.util.SortedSet\)). Alternatively, any of the [Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html) implementations can be used as a [Set](http://docs.oracle.com/javase/7/docs/api/java/util/Set.html) using [Collections.newSetFromMap](http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#newSetFromMap\(java.util.Map\)).
I know that you probably aren't looking to spend money but here are some microphone options for you. http://www.amazon.com/Logitech-960-000585-HD-Webcam-C310/dp/B003LVZO8S/ref=sr_1_5?s=pc&amp;ie=UTF8&amp;qid=1379765862&amp;sr=1-5&amp;keywords=logitech+usb+microphone This is a webcam but it has a very good microphone on it. This is the one I use on a daily basis and it is very good. http://www.amazon.com/Logitech-Widescreen-Calling-Recording-960-000694/dp/B004FHO5Y6/ref=sr_1_14?s=pc&amp;ie=UTF8&amp;qid=1379765862&amp;sr=1-14&amp;keywords=logitech+usb+microphone slightly cheaper, mic should be basically the same http://www.amazon.com/Blue-Microphones-Snowball-Microphone-Aluminum/dp/B002OO333Q/ref=sr_1_8?ie=UTF8&amp;qid=1379765832&amp;sr=8-8&amp;keywords=usb+microphone The serious purchase. This is what a lot of professional online streamers use. It is damned near to professional quality and for $60 it's a steal for the quality you get. I can understand not wanting to drop $60 though. Hope you get something decent, it would be a damned shame for you to not be able to teach people because of something silly like $25.
Thanks a lot for the free lecture. I look forward to checking it out as time permits. Upvoted! :)
I signed up! Thanks!
Sorry, how can I format that code better for reddit?
There's a "formatting help" link under every input field when submitting/editing... 
I added a screenshot.
...why not compile and run it? It seems like more effort for you to ask.
I am at home and not on the college computers so Im not sure what I should download to compile and run it. Ive only got notepad++
I hope this is somewhat better, still rather hard to read though. To create a new line space in reddit, just hit enter twice. Another option might be to use the Snipping Tool in Windows, take a screen shot with that, upload it to imgur and link it here. 
you should download Eclipse, or any other compiler for Java. 
I'm not certain, but I had a go: z = X + 2 * a - b a = 20, b = 15, X = 20.5 z = 20.5 + 2 * 20 - 15 z = 45.5 "z = 45.5" would get printed to the console
Which compiler would you suggest? 
I have added a screenshot.
If you want to learn programming, you ***really*** should take time to install a programming environment at your home computer. Reddit is not your compiler.
I will now, are any better than others or are they all really the same?
Ill download it now, thank you. Is there anything else I need other than Notepad++ and eclipse? - In order to compile and run the code.
Didn't think of what? `level_32_mage`'s copy of your code is still a mess...
So I only need eclipse then? Sorry its only my first week :/
"What is better" is pretty much a philosophical question. My recommendation is to install the *exact* environment that you have at school/college (compiler version, IDE, etc.) - that way you have "reproducible" environments, i.e. what works at your home computer will work at your college's computer.
I see, thanks for explaining the answer as well. So the final line of code (what the question asks) would be, a= 20 b = 15 x = 20.5 2*a = 40 X + 40 = 60.5 60.5 - b = 45.5 z = 45.5
There are others you could use, but I've just been using that. thenewboston youtube channel has some decent pointers on how to install it and a few low level concepts.
&gt;chortle
http://chortle.ccsu.edu/java5/Notes/chap01/asside1.html
This is great, thanks for sharing. Now I need something like this for C/C++
Chances are, you have already stumbled across [this] (http://www.cplusplus.com/doc/tutorial/), but I highly recommend it, as it is how I learned C++.
Learning... learning never changes...
Isn't it double pipe for the or operator( x==1 || x==2) 
yes.......... can't believe i missed that. yes OP, you need to use double pipe. in your code you're doing bitwise OR instead of logical OR, which is very different.
Yes, somebody answer this. It seems like it is a pretty good way to make sure that when you make a certain calculation with different input objects, that the calculation is done the same way. It also reduces headache in re-factoring. I can't imagine it causes problems, but somebody who is much more experienced should answer this.
they are pretty common, although the often have a naming pattern that would be 'isPixelValid' or 'isValidPixel' [BufferedImage] (http://docs.oracle.com/javase/1.4.2/docs/api/java/awt/image/BufferedImage.html) has a few methods like this.
you also need to install java. questions like this are extremely easy to solve by googling. if you wanna learn how to be a programmer, you need to learn how to google.
Well done!
&gt; when you use ints like that any non-zero value returns true. This is not true in Java. Non-zero integers are not considered as true boolean values. They don't get implicitly converted to boolean values, so this expression is actually syntactically invalid.
"Valid" is a bad word to use in names because it lacks clear semantics. (Just like "check" or "service") these words should be avoided as much as possible. isWithinRange or isWithinViewport would better names as it's clear just from the name what it'll do. 
Just to spell it out, what you've written is while (newVar == (var1|var2|var3)) { ... } But `var1|var2|var3` is a [bitwise OR](https://en.wikipedia.org/wiki/Bitwise_OR#OR). An operation like this is only likely to make sense when your variables are [bit fields](https://en.wikipedia.org/wiki/Bit_field) and you're trying to determine if what's turned on in `newVar` is exactly the same as what's turned on by the union of `var1`, `var2` and `var3`. Also, I hope those are not the actual names of the variables in your code. Naming things `doStuff()` and `varN` is bad practice. 
The professor who put this together, Dr. Kjell, is a fantastic teacher. His assembly language tutorial (which he uses in lieu of a textbook in his assembly course) is one of the best tutorials I've seen for any sort of programming, period. http://chortle.ccsu.edu/AssemblyTutorial/index.html
What happens is determined by the catch block, and by extension, you. Generally, if you can't handle an exception, you shouldn't catch it, you should just let it occur and continue up the call stack. If nothing on the call stack ends up catching it, then your program will crash with the exception. If you *can* handle it, what you should do is up to you and depends on the program and the place you're catching the exception from. Exceptions are a tricky business and frequently misused.
Hey, I want to check this out but it seems like the link is just bringing me back to this same page?
I think the expression building language could easily be extended to something more akin to a simple DSL for boolean expressions by introducing an interface such as: BoolExpr { BoolExpr and(BoolExpr rhs); BoolExpr or(BoolExpr); } along with BoolExpr constructors from variables and other basic building blocks such as not(). This would facilitate slightly more intuitive expression builders such as : (var("a").or(var("b"))).and(not(var("c"))) In fact if you provided a, b etc as builders for var("a") etc, then you could have: (a.or(b)).and(not(c)) which equates to: (a v b) ^ ~c Implicit operator precedence won't work, so every expression has to be bracketed explicitly, but nonetheless it seems near optimal for Java. (caveat: haven't actually tried it) 
no, not really, I guess you could customize maven's built-in super pom with multiple profiles with various exec-maven-plugin blocks defining exactly what you want to execute.
It's not homework, its more a hobby. There is literally nothing to cheat on. My math teacher knows I code for a hobby and challenged me to make something for him (also ,he doesn't teach me now, he taught me a while back). I mean, I needed help so there should be nothing wrong with asking people who know for it. 
I see in class they implied not to do this. 
Oh! Yes! Indeed! Whether you *should* do this is probably another matter!
I'm just learning Java, so I wasn't sure. So I tested it out (and you could have tested it easily yourself, too, I'm assuming). Anyway, it worked. Here is the code I tried out and it worked just fine. https://gist.github.com/FireIre/6664562 
You can do this, but you should generally be careful with overloading because it's *statically* dispatched, which may surprise you in unpleasant ways. For example: public class Test { static public void fun(String a) {System.out.println("string");} static public void fun(Object a) {System.out.println("object");} public static void main(String[] args) { String s = "a string"; Object o = s; fun(s); fun(o); } } You might expect this to print "string" twice since both calls pass an object that is a string. However, the *static* type of the argument in the second call is `Object`, so it invokes the second definition of `fun`, even though the *value at runtime* is a string. 
No, those were just 'example' names, so to speak. And so, is there anyway to compare one variable to multiple variables in one expression?
Haven't tried it yet with this solution, since I have a lot of homework ahead of me since I've been out all day, but I will edit when I check. Thank you so much guys!
Java doesn't have the concept of unsigned... So the simple answer is no. However, IIRC java uses the last bit as a sign flag, so you could technically use a bit mask to work with it unsigned...
Java, unfortunately, doesn't support unsigned numbers, so it'll always sign extend when you convert to a larger data type instead of filling the higher bits with 0's. I think masking them off will do it. public long uIntToLong(final int uInt) { return ((long)uInt) &amp; 0xffffffff; }
Thanks, `x &amp; 0xFFFFFFFFl` works. That is an extremely weird way to convert to a long without sign extension.
&gt; I can't imagine it causes problems, but somebody who is much more experienced should answer this. One downside to this is when overriding. If the wrong method is overridden, then subclasses can have inconsistent behavior. For example, suppose you have a subclass that overrides `pixelValid(Point)` but not `pixelValid(int,int)`. Now calling `pixelValid(p)` will behave differently than `pixelValid(p.x, p.y)`. This is especially an issue of you later change the direction of the delegation. This is why it's important to document the direction of such delegation. I also usually make the method that delegates (`pixelValid(Point)`, in this case) `final` to make it impossible for subclasses to override the wrong method, and also reinforce the idea that that method is really just shorthand. 
Oh, right, you need the L so the mask is a long.
Let me go a step further - you really shouldn't overload methods ever. You're giving up a chance to be explicit. If you're going to overload a method, ask yourself - Do these two methods really do exactly the same thing, just for different types? If the answer is no, then just give the other method a descriptive name. A good example of when overloading is OK is a method like String.valueOf(). It's performing exactly the same operation on multiple types. In my experience, this is actually a fairly rare case. It pretty much only happens with primitive arguments, since methods that take objects can usually be generified.
My rule of thumb is to always validate twice, once for user input on the client side (usually in javascript), and then also on the server side. My server side validations throw exceptions to the class handling the UI and I display the error from there. You can never trust the user to enter anything correctly. Make sure your data is always consistent by using validation to verify the data integrity on the front and back ends.
Read trhough http://en.wikipedia.org/wiki/Gaussian_elimination That's the method. You iterate over matrix rows making diagonal element equal to 1. Hence b.set() line - it is setting diagonal element of the row to 1. Also, it appears that the author recently added javadoc: http://la4j.org/apidocs/ That may help you. Do you have any specific question you want to ask about that code?
This: http://www.purplemath.com/modules/mtrxinvr.htm Vector b = factory.createVector(matrix.rows()); will create a zero Vector with a length of the number of rows of the matrix being inverted. The next line: b.set(i, 1.0); simply sets the i^th element to 1, which represents a single row of the Identity matrix. The next try block solves the system and sets the i^th row of the result. All this happens in a for loop, once for each row of the matrix being inverted. 
sorry! should work now 
&gt;Interesting. var() and not() would need to be a static import in that case? Exactly. &gt;You could avoid the static import for the not method with something like var("a").not(), but it might be confusing... I think it would be clearer and more consistent to only add binary infix operators to the fluent interface. 
This is just plain wrong. /u/redclit already pointed it out but it really needs repeating: this is just plain wrong.
An unhandled exception will not necessarily crash the entire application; it only “crashes” the thread on which it happens. All other threads continue running happily unless the crashed thread was the only non-daemon thread in which case the VM exits, making it appear as if the exception crashed your application.
It’s actually a less weird way to simply clear the bits you don’t care about than to assume that your language/runtime/CPU performs some special magic with some special bits.
or isCoordValid() or isCoordInRange() since its not a pixel.
well, it depends on how the code is accessed from different places - say a factory for building a figure by a series of points, it could be useful to support both styles if it would simplify either of these patterns, which would vary depending on the source of the original data: for (Point p : oldFigure.getPoints()) { newFigure.addPixel(point.getX(), point.getY()); } (Why do I need to unpack my Point?) for (String line : Files.readAllLines(pointsFile, UTF8)) { String[] coords = line.split("\t") Point point = new Points(coords[0], coords[1]); figure.addPixel(point); } (Why do I need to create the Point here?) Just don't overdo it... pixelValid does sound slightly odd to have the x,y shortcut for, when probably the next step would be to do actually create and insert/modify the very same Point?
&gt;Confucius aims to fix a lot of the issues present in that class Such as? I've never had any issues with it.
Looks useful, I would prefer if it didn't throw checked exceptions though.
Ok, it's more of an enhancement than a fix. A nice enhancement nonetheless.
how does it compare to Apache commons configuration?
Is this a closed source feature? Edit: "Java Mission Control (JMC) is a commercial feature available for Java users with a Commercial License." http://www.oracle.com/technetwork/java/javase/2col/jmc-relnotes-2004763.html Thank you, but no thank you. For almost everyone, it's better business to rather pay YourKit. We'll use only JVM/JDK features which are included in OpenJDK. Why? All but the very youngest of us have already walked down this path a few times, and would rather avoid it.
I've been very happy with Apache commons config, however quickly looking through his solution, it seems the whole "context" idea is a bit different. While apache config has ability to defaults, I think it's a bit different (and more explicit) - this reminds me of the python setup for ini files.
It's a test. You're not supposed to try to get others to do the work for you. Coffee is for closers.
Thanks! I have actually done the count property before (not always though). Was hoping there was some magical props version of a data structure, but at least the sanity check is useful to confirm I'm not missing something obvious. 
Hmm - A different way to look at it. It could give some flexibility too in that the field names could be dynamic and more meaningful (firstnamesrc, lastnamesrc, phonesrc) and still functional assuming order is kept properly. 
thanks for the share! hope this will come in handy.
yeah i'll delete it
Yeah, its from jrockit. The license lets you use it for free for Dev. Its got some advantages over yourkit or jprofiler but in a production environment it could be very helpful... Just not $5k / CPU kind of helpful.
I think the syllabus is standard. The problem is that there's not much other content. He gives a bunch of code and very sparse notes. There's very little explanation in between. I feel robbed because he won't align his course with a textbook that we could use to read ahead for lectures and fill in the blanks. I'm not saying it's not important, just that he sucks at teaching it.
Sorry to hear about your professor. If you're looking for a good text book to just learn on the side (because data structures are **very** important IMHO), I would suggest [Data Structures and Algorithms in Java by Michael T. Goodrich](http://www.amazon.com/Michael-Goodrich-Roberto-Tamassia-Structures/dp/B004HX68Z2/ref=sr_1_5?ie=UTF8&amp;qid=1379990877&amp;sr=8-5&amp;keywords=Data+Structures+and+Algorithms+in+Java+by+Michael+T.+Goodrich) I'm almost 6 years into my profession, and I still look back on this book for advice every now and then. Excellent material, and easy to follow along.
The above post is also a good suggestion. JSF is a lot better now a-days. If you're avoiding JSF because of past experience with it you should give it another shot.
[Apache Wicket](http://wicket.apache.org/)
Vaadin uses GWT for rendering, and will use it as a core component in the next release.
Thanks. That's what I really need. I can usually cope with bad teachers if there's a good book to follow.
If it's not compulsory you could always take the one on coursea.org
Ignore the teacher, learn data structures. You will not regret it.
Huh? What happened to Play?
Your mixing good client side frameworks like angular.js with crappy back end frameworks like node.js and cakephp. Why would anybody would want to rewrite a working application back end in a language conducive to better performance, better maintainability and just developer sanity into the crap you mentioned for back ends. Turn your exiting app into a jax-rs/jersey rest api and use something like angular if your building a serious application. I'm assuming you are if its already built in swing. Although something like gwt or vaadin would be easier for if your not familiar with JavaScript.
Is this Hilfinger?
Yeah, I'd definitely make them final. In the case where I make it final, that is proper then? Like it's not bad practice if I make the method final?
Get the Sedgewick Algorithm's book (4th ed): http://www.amazon.com/Algorithms-4th-Edition-Robert-Sedgewick/dp/032157351X It's aimed at novices, and walks through all the basic datastructures and algorithms in modern java. Do the exercises in the book, and there's a coursera class or two that tracks nicely: https://www.coursera.org/instructor/~211 It's important to really have a good grounding in this stuff. Most of your typical CS job interviews is really just about mastery of basic data structures and algorithms.
Vaadin +1
I think vaadin good choice instead of JSF.
Some issues with your code: 1. Why do you use the system properties to hold the data? Your documentation does not mention it anywhere. That's a problem, because you offer two ways to get a Configurable (Configuration and InjectableConfiguration). Both will modify the system properties. And of course, this way, it is not a replacement for j.u.Properties, because it is still used underneath. I suggest, you use a new instance of j.u.Properties and provide a (optional) fallback to the system properties when reading from a Configurable. And you should tell us that it is rather a wrapper than a replacement. Immutability would be a big plus for such a library. 2. Avoid singletons (system properties and Configuration). Rather use public constructors and provide a builder class or static factory methods for convenient instantiation. Let the user manage the instance lifecycle. You should prefer that when you write a library/framework. And it lets you focus on the problem you want to solve. 3. Your AbstractConfiguration uses synchronized method access on methods that write stuff. But you don't synchronize access to those that read. If the underlying store is'nt thread safe (system properties, which uses j.u.Properties is thread-safe and thus synchronized), you have to synchronize all methods. And if you aimed for some kind of atomic write operations, you miss the fact, that reads will always present stale information. I suggest, you look into immutability and how to modify immutable instances (create a copy for a builder). 4. Some of your read methods do more work than expected. When I use your API, I'd expect reads to be as fast as possible. But your implementation (e.g. #getDoubleList) does create a new list all the time. I suggest, you do the heavy lifting upfront. Usually, I load a configuration only one time at startup. But I may read configuration values a couple of times per second. 5. A minor: let the user specify the encoding for the properties file. Summary: You provide a library. Be as open as possible. Prefer immutability whenever possible (use builders for mutation - no synchronization needed) or get synchronization right. Avoid singletons. Think about the use cases and ask yourself what users do in 80% (e.g. read configuration values, load a single time) and provide an open library for those that have 20% use cases (constructors instead of singleton). And if you manipulate system properties, be as clear as possible about it in your documentation.
I liked Vaadin but I'll try and take a look at all the possibilites.In college when my teacher talked about GWT he didn't mention anything else, so I didn't knew there were so many! Thank you guys.
**Why not System properties?** First, system properties may be secured from being written to. There is a check to the SecurityManager for it. I can't use your library in an JVM instance which has security enabled, like an application server or in a SaaS/IaaS environment. Secondly, the system properties are usually presenting configuration details of boot time. If I'd like to restart my application (e.g. a desktop application), I'd like to do that using the original property values. If you change them, that's not possible. If you'd manage your own j.u.Properties instance, you not only avoid the Security Manager, you also can fall back to system properties if a key is not found in your managed instance. **Why no singleton?** You provide a library. It should focus as much as possible on the problem you want to address. Instance management should not be a part of this. You always can provide a best practice part in your documentation and an advise in your classes' JavaDoc. Then I can have my own singleton if I need one (usually, I avoid it anyway). My application may not only consist of your library and my code. **Synchronization** &gt; The point of the write synchronization is to get a lock on the Configuration object when multiple properties are being written at once, so the client does not end up seeing some mid-state where only 1/3 of his properties are written. But, the client is seeing mid-state values. A client still can read values while there are new values being written by another thread. If you want real atomicity to reads and writes, you should look into immutability or synchronize all methods. Since configuration rarily changes in applications at runtime, you should prefer an immutable solution - Configuration only with read methods and one mutate method, that internally copies the Properties and returns a builder around it. Otherwise, just remove the synchronization and be explicit about concurrency. Since you wrap j.u.Properties, a reference to its Javadoc would do just fine. **The lists.** When I need to change a list, that I get from a library, I usually create a new list. If I get an interface List/Collection/Set/Map type from a library, I usually treat them as immutable, because the implementation type is hidden and always could be wrapped. **Common advise** When you write a library for the world, for each class and method you write, you have to ask yourself whether its neccessary. With each line of code, you may narrow adaptability for its users and increase the chance of them hitting a wall, that lets them dump your library. And changing something like that, without breaking backward compatibilty is hell. That's why we tend to write our own toolsets for configuration management or logging and stuff like that, over and over again.
&gt; (Why do I need to unpack my Point?) Perhaps you don't want to couple the Figure class and the Point class. It makes it easier to reuse the Figure class since you don't need to drag a bunch of other classes with it. &gt; (Why do I need to create the Point here?) You don't, and shouldn't. The API should take primitive types instead of a Point.
&gt; First, the teacher just slaps java code on the board and doesn't explain the motivation behind using his object over that object, etc. If you never ask him, he'll never explain things to you. &gt; Second, he's not following any particular textbook, as far as I know he's just pulling the code out of nowhere. This at least shows he knows programming, unlike many a CS "professors". Consider yourself lucky. &gt; When I asked if he could recommend a textbook, he said to just look everything up on the web. To which I thought, "What am I paying all this tuition for if I have to hunt for the info on the web anyway?" He's being honest with you AND helping you save a buck. Why buy several multi-hundred-page books and read only slices of them, when you can find literally everything online? The answer to your thought-question is "You are paying to receive valuable advice that will help you greatly in your professional life. Appreciate it!" Bottom line: I really think that, because you're paying big bucks for a big-name school, you're expecting to have everything served on a plate for you. Bad news for you is, knowledge cannot be fed (at least, not yet), you will have to work to get it. Fortunately for you, you have at least this one good teacher.
I have spent 3 years in the field and everything this guy has said is 100% true. Google is your best friend and my first month was spent learning how to search stack overflow / Google 
Some professors suck, and you may have run into that here. Being adjunct doesn't necessarily have anything to do with it - I had crappy adjuncts and excellent adjuncts when I was getting my MS in CS - it just depends on each person's motivation and teaching ability. However, I wouldn't give up on him without at least talking to him about it first. Write down some of your questions, make an appointment to talk to him, tell him why you're struggling with the class, ask some of your questions, see if you leave the meeting with a better impression or not. It sounds to me like the dude might be a software engineer by trade. He may just assume that when he "slaps java code on the board", that people are understanding what he's doing. Sometimes when you've been doing something for a long time, you forget what it's like to be a beginner again. This isn't an excuse for bad teaching, but he can't be expected to read minds, either. He might just need people to ask more questions so that he gets a feel for what concepts he needs to explain in more detail and which ones he doesn't.
It may be that he doesn't understand the topic well enough to feel comfortable teaching it. As others have suggested, show up, take notes, ace his exams, and get out with an A. Meanwhile, study the topic on your own using the MIT courseware (or similar) or a text book. /r/learnprogramming is also helpful. When I was in college, I found that most of my programming classes moved too slow. I would work through the text books at a quicker pace and find answers on my own (books, friends, upper-classmen, experimentation) when I had questions. I graduated with honors. With 30 years of programming experience, I can tell you that this is a profession that relies 100% on self-study. You may as well start now. You'll be better off for it.
Next week: how to tie your shoelaces.
http://docs.oracle.com/javase/tutorial/essential/concurrency/
Your example misleads you. If the thread, that sets properties yields, another thread still can read the inconsistent state of your configuration. If it does happen inside your loop after prop1 is written, a concurrent thread does only see prop1, but not prop2 and prop3. So the whole point of synchronizing that "batch update" (to force some kind of atomicity) goes out the window. It just ensures, that two concurrent batch updates cannot happen at the same time through this method. This and the other stuff: It's just my advise as an 'old' Java guy. You already have a strong opinion. Just stick to it and look how it works out. If I want to have j.u.Properties fixed, I'd create an immutable version of it with a mutator and maybe some listener stuff to get informed about mutated instances of my configuration. But since j.u.Properties is a single class and very easy to use, I'd rather stick to it and have a custom configuration facility that wraps around j.u.Properties for each application I write.
1- "Those who can, do. Those who can't, teach." 2 - "There is nothing worth learning that can be taught." Don't wait for your dumbfuck teachers to tell you how to do things, because if they knew, they would be making bank in some massive profitable corporation. 
You probably want something closer to a ForkJoinPool. Check out the related docs on [RecursiveTask](http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/RecursiveTask.html).
Take a look at [Callable](http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Callable.html). It also sounds like you are trying to reimplement a [thread pool](http://docs.oracle.com/javase/tutorial/essential/concurrency/pools.html). Your statement suggests that you want at most two threads running these tasks. This is a fixed thread pool (of size 2), and the second link I've posted describes how you would create one easily in Java.
I spent years with java.lang.OutOfMemoryError: PermGen space. I won't miss them.
I SO much hate this! Wish they just had put the resources that have been put into this "me-too Node.js clone" in JDK 8. Oracle... there is a Node.js already. The hipsters have already moved on, and even Node.js isn't hip anymore. Don't try to please the hipster! Focus at what you do well. Thanks!
Ok, I expressed it in a bad way. Of course the thread doesnt yield by itself. It's the thread scheduler that does control when a thread is stopped, the context changed to that of another thread which is then executed or continued and so on... If that other thread happens to read a configuration property, it is not blocked, because the block is only around your write method. So if that thread reads, it may see an incomplete representation of your update. That's why I questioned the 'synchronized'. 'synchronized' does not mean that the operations inside the block will be run without a context switch.
Say hello to OutOfMemoryError: Metaspace
Time to burst your bubble. Classloader-associated leaks are still going to occur, just not so fast as earlier; there a lot more space this time round.
I have that one from when I started the MIT OCW Algorithms course last year. I could tell it was a classic. 
Exactly! Most algorithms and datastructures have a better and often more in depth explanation on wikipedia than any textbook that I've ever read.
Agreed, the teacher is pushing you to get motivated and get the information on your own. This is how it works in professional life. A lot of your work will lean on that of others from across the internet. There are no prescribed standards or SOPs we all make it up as we go along and take the stuff that seems to work well and call them best practices. If you are not willing or able to take to the internet to expand your knowledge of CS then you will not make it far in the real world should you desire this to be your profession. 
This is one of the most important class and building block of your career. I suggest that if you think you are not getting your money out of it, drop and find a more decent professor. I was lucky to have a very good (somewhat eccentric) professor taught me this class. I always feel in-debt to him for getting me this good today.
So if you have something like class-loader leaks: they're still going to leak, they'll just do it slowly on the heap?
Not everything in life is can be commercialized or monetized. Some things are just meant to stay in academia. If what you said were true, everyone who's ever won a Nobel Prize would be rich beyond their wildest dreams, and they're not.
Is this the "node.jar" project they were talking about earlier? Why on earth would they tie it to GlassFish, of all things?
http://www.oracle.com/technetwork/java/javase/terms/products/index.html CTRL-F "Commercial Feature Availability by Product Edition" http://www.oracle.com/us/corporate/pricing/technology-price-list-070617.pdf CTRL-F "Java SE Advanced"
This would be my choice. It is much more widely used than the others and is very nice to work with.
Yeah, at this point, the question isn't "are these guys on drugs" but whether they are on meth or crack.
Fair enough – I was more noting that some pages such as: http://www.oracle.com/technetwork/java/javaseproducts/mission-control/index.html ...do not mention this at all. Thanks for the links though, I wasn't able to hunt around too much due to poor mobile signal!
This was so goddamn helpful. Thank you.
Really? Is that a thing? 
Not so permanent at all! ;)
no probs, that website is great for anyone who seeks understanding before actually starting coding
I teach the class. Get a Barron's test prep book. They are about $15. They are full of tests and examples. Are there specific concepts that you are stuck on?
This is WRONG... just WRONG...
&gt; What kind of school doesn't require a data structures course? Is it common for an adjunct professor to be teaching a required course? Honest question - I've been out of college so long that if I even had any adjunct professors, I've forgotten who they were.
http://www.youtube.com/watch?v=84ZiX41kgxM
Lower level ones, I believe yes. At my university we had a grad student teach the c language course.
I'm not sure what you mean by posting this. Would you please elaborate?
Whoh, whoh, whoh. What. The fuck. Is that?
&gt; In my opinion, if I am attempting to use a property that doesn't exist and I haven't specified a default value for, my application is broken. This is the correct attitude as far as I'm concerned. Fail fast.
&gt; You provide a library. It should focus as much as possible on the problem you want to address. Instance management should not be a part of this. You always can provide a best practice part in your documentation and an advise in your classes' JavaDoc. Then I can have my own singleton if I need one (usually, I avoid it anyway). My application may not only consist of your library and my code. Yes. I used to be pro-singleton until I moved more into technologies like Spring. Let the end user choose which design pattern best applies to their situation.
&gt; Is there an expectation that the reverse should also be true? For my class, the set of objects for which o1.equals(o2) == true is a superset of those for which o1.compareTo(o2) == 0. Is there a problem with this? Yes, this is a problem. Notice the "if and only if" in your original citation. A &lt;=&gt; B (if and only if) implies A =&gt; B &amp;&amp; B =&gt; A. So for your specific case if: o1.equals(o2) then: o1.compareTo(o2) == 0 And if: o2.equals(o1) then: o2.compareTo(o1) == 0 
But you can encapsulate a primitive array in a class. Primitive arrays are probably the most memory efficient way of representing your data.
You have to instantiate all of the Weather objects in the array or the slot will be filled with null. When your loop reaches the null, it's trying to call methods which is throwing the null pointer exception. EDIT: Since the null pointer exception is thrown on the compareTo the problem is getCondition() returning null for one of the weather objects.
That's all very well and good, but this means nothing to me when I'm paying 25-50k a year to be educated. I don't need the extra fluff. I need the lecturer to know his subject. OP thinks his teacher is bad. I say don't rely on him.
For compareLevels you can use Math.max()
Use &amp;&amp; for the Boolean operator AND. 
Just want to second this, you should take a look at the entire math class, so many things that will help you with so many other things. http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html 
Yeah, I just looked it up and also started to look through the open source implementations of those things. (Max for integers is simply return (a &gt;= b) ? a : b;) If I used max/min it would definitely make it neater and easier to read, but theoretically a tiny amount slower (more branching, extra conditional), but honestly unless I am running this a million times per second (I won't be), then the neatness counts far more. Thanks for the tip (:
That is what I am beginning to figure out, should I create a new Weather object in the for loop just so I have values for the instance variables? 
 public void addToWeatherObj( String condition, int temp, String date ) { for(int i = 0; i &lt; weatherObj.length; i++) { if (tempCount &gt;= capacity) { increaseSize(); } if(weatherObj[i] == null) { weatherObj[i] = new Weather(condition, temp, date); System.out.print(weatherObj[i].getCondition()); break; } } totalTemp += temp; tempCount++; This method works just fine and prints the condition. 
13th thing to learn: Scala is just hype.
Ummm... Oracle has far better sales channels than a lightly trafficked subreddit. The reason people are talking about JMC on here is because its new and it is interesting. Jmc has some really cool features. You can use it for free for Dev. Also, oracle per-cpu prices are really screwey. They scale them all by CPU type - an x86 server doesn't count as 1 core... The thought of oracle astroturfing reddit to get sales is hilarious. They have sales reps with huge budgets who wine and dine people with purchasing authority... Just like every other big vendor. 
When I was in school, I was an arrogant smart kid who thought his CS professor didn't know anything. My professor wrote on the board and lectured directly to us and we didn't have textbooks. The problem wasn't my professor. The problem was me thinking I knew better. Chances are, the OP needs to buckle down and do his best in the class. Even if the professor is bad, it's a fact of life (as pointed out with many of the posts above). I'd be willing to bet that the prof isn't as bad as the OP thinks he is, but I'm sure the prof is not perfect. Maybe he's new to the profession, but chances are - he knows his stuff a lot better than the student and perhaps needs to work on some of his delivery. Or, maybe the student needs to stop being spoon-fed. Either way, I don't think it's so black and white as some may think.
This is just my opinion, but honestly, unless you are doing something that you need to be crazy in terms of performance, you should usually tend to go with the more understandable option. When I read your method, the assignments are a little bit confusing. 
in this case, you have 3 places where something can be null: weatherObj[i] &lt;-- this could be null in which case .getCondition() throws the NPE weatherObj[i].getCondition() &lt;-- this could be null in which case .compareTo(...) will throw the NPE weatherObj[j] &lt;-- this could be null in which case .getCondition() will throw a NPE. I'd wager the issue is the second of the three choices if I can safely assume that the weatherObj array contains no null values.
For the love of god don't use huge /***** COMMENT BLOCKS ******/ Personal pet peeve. For your methods use javadoc format. 
I feel like there are already many established languages that do the things listed and more.
I don't like it either, but it is mandated by my professor. I'll check out the javadoc format stuff, though. Thank you!
I agree and will make sure to do that in the future.
The intent is to show your understanding of object oriented programming. The pig &amp; chicken classes will inherit from the animal class. You should expect to make a method so let's go with a speak method. The animal would have the base method whereas the pig would return oink and the chicken bkaw. These subclasses should inherit variables from the animal class (weight, name, color, etc). You should expect to make a constructor for the animals and possible a scenario where you have a list/array of animals (i.e. old McDonald's barn yard). Expect them to quiz you on the four pillars of object oriented programming (polymorphism, inheritance, encapsulation, abstraction) all of which could be applied to this example. Good luck and be sure to have good questions to ask when you're done interviewing.
I don't understand how having an "Option" type (like Optional in google guava) helps in any way to "eliminate null" or reduce null pointer exceptions if any reference can still be null. null is still there.
Line 28.
The problems this will help with are probably fairly focussed, given the cost of transferring to GPU memory. My previous attempt at GPU acceleration decreased performance, usually significantly, except when the problem was sufficiently large, for example.
My experience is with standard website backend Java, so I haven't come across much use of bitwise operators in code I've seen or written. So I find % more standard and understandable than bit-twiddling.
Marketing is a doorway to sales.
I guess I'm the one of the astroturfer spammers :) I can assure you I'm not an Oracle employee neither a shareholder, just a java developer. I've just posted *one* link about JMC because I thought it was an interesting new tool and free for developers. 
I suppose that's true if you have freedom of choice for language used. But it seems like a great way to improve productivity where java is still required at the core. For example, the Forge API for Minecraft mods has support for Scala. Been considering getting into it for traits alone.
&gt; sufficiently large Interesting. How much large?
Unfortunately, having scoured Dropbox and Google Drive I haven't been able to find the document of my results. We were using it for AI in a tower defence game (a forced assignment requirement), including target choice and homing. Quite frankly, we didn't have a problem that actually needed CUDA and more had to shoehorn it. As a result, until we were doing 5000+ comparisons per sim step, we didn't gain anything and even then only approximately 5-10%. I think more than anything, our problem was that we often couldn't leave things in CUDA memory for many operations, so didn't offset the memory transfer costs. It may well be that our inexperience with CUDA also meant the way we modelled our problem was inefficient also.
Problem 2. 1. As others have said, modulo operator (%) is probably easier to read for most here. And readability matters a lot, when it comes to real systems maintained over time by various developers. 2. There is third option here, which might be marginally better than inlining: create a new variable, with descriptive name. Once again, this is a matter of readability. Some consider it a bad practice to alter input parameters, as it makes it harder to reason how the method exactly works. 3. In this case, it probably doesn't matter much, but your idea is good and shows that you care about avoiding duplicated functionality. System.out.println call here is the repeated part, as only the parameter actually varies. The general idea here being, if you wanted modify your UI to e.g. use some sort CLI/GUI framework, how many lines of code would need to be altered? In case of the initial version, three instances of System.out.println call would need to be updated, and in the second version only one. But as said, in this case I think both options are fine. Problem 3. 1. If you need to add newlines to string, to me the most logical part would be at the end of a line instead of in the beginning. I think this is also the "industry standard". It might be however worth considering here, if toString should even do this sort of thing, i.e. split the output into lines. This is just a simple exercise, but in more complex systems you probably want to separate the UI from the logic, and here the toString method is kind of coupled with the UI, if a certain UI specific format is expected. 2. I think this is quite fine. I'd probably change the variable name *damage* to *baseDamage* or something like that, to indicate that it is not actually not yet the value to be returned (as the method name would imply), but again, as this is so simple method, it is quite clear to the reader anyway. In more complex calculations these kind of things start to matter from readability point of view. Also, it might be worth considering, if the hasPowerUp could/should encapsulated within Player class (i.e. add givePowerUp and losePowerUp methods and use that encapsulated state in damage calculations). 3. The method name is misleading, as it doesn't really indicate what will be returned. Also, reassiging max and min makes this much more harder to understand than needed. As said by others, learn and use standard library. When exactly is the method supposed to print "Overpowered"? Are you sure it works as intended? Exact functionality is non-obvious with a quick look, which is a readability issue and a cause for bugs.
(To my understanding) Scala cannot get of rid of null altogether because of the Java interoperability, but if you're developing software with Scala, you can decide never to return null in your code. As the Scala standard library (and probably most if not all important 3rd party Scala libraries) have also adopted this convention, only source of null values in your system would be from Java interoperability. You can employ some sort of anti-corruption layer solution here to guarantee your system is without any null values. So, while not perfect solution, this helps a lot, when you know that there are no unexpected null values lying around.
&gt; - In fact branching code is a bottleneck. All GPU threads in the same group have to execute the same code, a branch that applies to none of the threads in a group can be skipped, a branch that applies to at least one is taken by all with the other threads executing all instructions as no-op until the branch ends. &gt; - The memory access and caching on a GPU follows different rules, a cache miss stops execution of the current thread group and swaps in another until the data is read from main memory. Having your threads read/write to random memory locations also means that each location has to be read individually stopping the whole group for the duration. These two points are crucial to understand efficient GPU computation. Execution has to be grouped since the individual units *actually repeat* each instruction about eight times. With the GPU running at about 1 GHz, repeating every instruction eight times, running a single thread leaves you with the speed of a Pentium I. To get into a comfortable spot, your problem has to be computable by the equivalent of *a couple of thousand* threads doing *the exact same thing*.
wht do u mean by that comment ... 
I use Jboss Errai, and find it amazing! Best web framework I have ever used!
As in many cases, it all depends on the circumstances. If you are making PolygonFigure and you end up having int[] xCoords; int[] yCoords; and wonder what to do about the optional zCoords, then you might want to reconsider using that Point class and a subclass 3DPoint. If you are constantly unpacking 5 properties from a class of 10 properties, that hints that you should not try to couple with that big object, perhaps it might be better to have a composite object or superclass/interface for those 5 properties that clearly where of interest beyond where you had them initially.
Can't wrap my head around this one really. A wild guess is that they make their money based on consultancy, installing this JEUS server at the client's location and probably building or assisting in building a custom application around it. If just the Korean customers bring in enough to be able to uphold their development team it might be worth it. No idea if this is indeed the case, but just a guess... 
Exciting to finally get lambda and associated functional programming paradigm into Java ; the APIs also looks really well designed!
But hang on... can I for-each-iterate over an Iterator yet, or do I still need my silly IterableIterator wrapper?
&gt; "Relic of the 90s"? Seriously? They couldn't find someone to write this that could at least manage to type "java" into a search engine and see that it has been used occasionally by a few moderately well known companies since the 90s?
All of this is really great and all... but the only environment I use Java for right now won't *ever* support it. It's *really* depressing. All the server-side guys get to have all the fun :(
http://www.reddit.com/r/java/comments/1hxemv/java_ee_or_spring_framework_rule_3/
problem 1 : overly confusing, you can accomplish this with mods and one if-elseif-else or a switch statement (switch would have the better performance) problem 2 : never throw in undefined constants, random numbers thrown in code is a pain in the ass for the next developer... i know this is for homework but in the real world someone somewhere is going to have to maintain your code after you leave a job, also the to string should print out these constant numbers as well as the default constants for level and strength, and finally the comments are useless, we know that the getStrength is getting the strength, comments should expand on information that not obvious from just taking a quick look at the code, for instance comments should be used to describe business logic and in your case what role does strength play in the program problem 3 : overly verbose... aside from the performance hit, it took me a few seconds to understand the code when this can all be accomplished with one if-else or a ? operator, and also random number thrown into the code (I get that this is an rpg type home work, but if this was a financial calculator with random numbers only you would know what they mean)
Android? It is said that Google made some strategic mistake somewhere and now Android will be stuck *forever* on Java 6 :|
NO! Just NO!
There are options... [RetroLambda](https://github.com/orfjackal/retrolambda) for example. I wouldn't be surprised if others appear too.
14th thing to learn: Even Java was considered "just hype" at one time.
That's not the problem, that's my intent. I want a `Set` unique by `C.code`, and what I have provides that. I want to sort that first by `C.priority` and then by `C.code`. Using `Set` works fine, sorting (ex: with `Arrays.sort`) works fine. I meet the definition of *consistent with equals* as provided in the documentation. My question is about the impact of not meeting that definition reciprocally -- which the definition doesn't address, but which I suspect to be uncommon among implementations which are *consistent with equals*. The [docs for `SortedSet`](http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html) says: &gt; a sorted set performs all element comparisons using its compareTo (or compare) method, so two elements that are deemed equal by this method are, from the standpoint of the sorted set, equal. The behavior of a sorted set is well-defined even if its ordering is inconsistent with equals; it just fails to obey the general contract of the Set interface. This is what worries me. If it is the case that `SortedSet` does not use `C.equals(o) == true` and instead uses `C.compareTo(o) == 0` to determine equality, then it will permit **both** `o3` and `o4` to be members of the `SortedSet`, and that is wrong (as /u/MatthewASobol points out, correctly, `o3` and `o4` should be seen as duplicates w/r/t the set.) While this is what it seems to say, that relies on a definition of *consistent with equals* that is broader than the one in the documentation. I posted this last night when I was away from my development machine. I'll just try it out.
Indeed it does fail :( import java.util.TreeSet; public class aa implements Comparable&lt;aa&gt; { private final int priority; private final String code; public aa(int p, String c) { this.priority = p; this.code = c; } public int getPriority() { return this.priority; } public String getCode() { return this.code; } @Override public int compareTo(aa o) { int result = Integer.compare(this.getPriority(), o.getPriority()); if (result == 0) result = this.getCode().compareToIgnoreCase(o.getCode()); return result; } public static void main(String[] args) { aa o1 = new aa(1, "a"); aa o2 = new aa(1, "a"); aa o3 = new aa(2, "b"); aa o4 = new aa(3, "b"); TreeSet&lt;aa&gt; ts = new TreeSet&lt;aa&gt;(); ts.add(o1); ts.add(o2); ts.add(o3); ts.add(o4); System.out.printf("Size should be 2, size is %d%n",ts.size()); } } EDIT: submitted after code paste. So, it looks like `SortedSet` requires more than just *consistent with equals*, at least as implemented in `TreeSet`.
As I replied already in this thread, Scala's Option type is not exactly a replacement for null, but rather an added library feature. Scala still has null as a language constrcut for Java interoperability, so having the Option type doesn't by itself get rid of null values. You can, however, with some discipline (by never returning null yourself and wrapping Java libraries using null with anti-corruption layer using Option type), guarantee that you'll never see one.
Very useful, especially if you are preparing for a java interview. DON'T TAKE CHANCES, go out there with confidence. This course is designed to make you understand concepts that are usually asked in interviews (method overloading/overriding, pass by value, bacics of JVM etc.). The author being a programmer himself, gives tips for writing better java programs (caveats &amp; pitfalls).
The solution you your problem is to stop using `Iterator` objects directly. An `Iterator` "self destructs" as you use it. An `Iterable`, on the other hand, should let you iterate over the same elements multiple times. This is why `for` refuses to iterate over an `Iterator`. Source: I used to be office-mates with Josh Bloch.
Yeah. The best hope I think we've got to using modern Java on mobile devices seems to be Oracle's efforts with JavaFX... and... well, call me skeptical, but I'll beleive it when I see a release.
Lambdas are nice, but that's just one ingredient in the major new features in Java 8. The map routines in particular excite me. The default methods in interfaces are also very interesting options for cleaining up library namespaces. 
I agree. as a cs student/tutor most of the learning has to come from you anyway. The most a good teacher can do is point you in the right direction, and the worst a teacher can do is confuse you further. If you have a bad professor, cut your losses and read the text during their lectures instead of listening to them
What they presented last year was a joke for those like myself that care about native apps. They were selling the idea of wrapping a HTML 5 based app, which was coupled with an ADF backed on the server side. If they cared to provide an AOT compiler for Java themselves, which exist anyway on the market, all the app store issues would already have been taken care of. But this does not seem to be a path they care about, so we end up looking for other solutions.
I choose to reserve judgement until they release an SDK. Until then, all we have is speculation. Even presentations are useless. Until I can get my fingers in it, it's not worth much.
Google really needs to suck it up and pay Oracle to license Java. Android isn't a toy anymore, and the state of its whole development environment is just unacceptable. Apple is just so far ahead of Android when it comes to developer tools, the language, and frameworks that it's ridiculous (and reflected in the quality of stuff in the Play Store vs. the App Store).
What does that post have to do with anything?
This talk really didn't go into it as much but I saw another that did. (Collection name).stream That's pretty much all you need to do a basic iteration. You can then do functional calls on it. (Cn).stream .filter(some function) .filter(another function) .map(some function) .reduce(some function) Sorry for the lack of code blocks and formatting. On my phone 
You can try using the replacer plugin to insert @SuppressWarnings("all") at the top of each file.
Don't most of the JVM languages support multiple byte code versions? Some will be limited by invokedynamic, but work-arounds surely exist. Push out jars targeting whatever jvm you need, no one is requiring you use Java.
The compiler in this case would normally break both down to the same bytecode after optimisation, just because it's more method calls in code, doesn't mean it's less efficient, the compiler can usually work that out in simple cases like this.
Totally agree, if I saw %, I know exactly what you're doing, if you have bitwise operators, I have to pause and work out what exactly all the bits represent =
If you don't want to re-write any code, but get a webpage out of it, your hands are very much tied, applet seems to be the immediate option. Otherwise, GWT from my work so far has been best solution for complex web apps.
You can also use JarJar to rewrite the package names so that you can use multiple versions of the same library, if you absolutely need to: https://code.google.com/p/jarjar/. I thinks it's preferable to using classloader tricks.
Or, is it that Mac is a good presentation platform? Are all speakers representative of general developers? Do they just use a Mac when travelling to conferences, and a desktop otherwise?
Shortest "article" I've ever read... And the only thing I can think of is, "anecdote (seeing many Macs at a conference) != data."
No, and it is not even close.
The "%" percent sign is the modulo (remainder) operator in java. So, your expression evaluates as: 5+4 = 9 mod 6 = 3
Thank you, also do you know? Using explicit type casting, what number does the expression ( int ) 7.9 evaluate to?
equals() takes an Object, and the argument is not generic, so it won't be called if you declare it as taking an aa (you could check this by putting a println in your equals method). EDIT: Another thing, equal objects must have the same hashCode(), so you should implement that as well. I think this requirement is in Object.equals() and hashCode() documentation.
explicit conversion to int always truncates, never rounds, thus the result will be 7
People still use ant and maven?
Sure they do. I actually *like* Java, though, and not just because the language itself is simple. The bulk of the documentation for android is centered around Java development. The bulk of the 3rd party libraries for android are centered around Java development. The bulk of android developers are most comfortable with Java development. I'd say that, while Java is certainly not required, the current ecosystem *highly encourages* its use.
I've always wanted something like what you could do in Smalltalk wherein you could designate that if an object doesn't handle a particular message, the message would get routed to some default. Then if you could do that, you could make a "Null" thing (only one would exist) that could basically be called with any message (function call) and it would always accept the call, but the return would always be itself. If that were possible, then something like v = foo.f1().f2().f3().f4() with f2() returning this new Null thing, would never throw a null pointer exception, but the end result would be that v == Null. Would eliminate a lot of conditional checking code. 
The JVM has had the ability to utilize JavaScript for quite some time via the scripting engine interfaces so is this just a library that provides support for doing that? Looking at the picture it shows the "Avatar Server" in the Java EE container which I assume provides an event driven system and the Avatar.js in the "scripting container" which I assume provides some basic architecture. So this provides the ability to do event driven, script based coding easier in the JEE world, but it was always possible.
Or just wait for Microsoft to fail with mobile, and buy the C#/*LR IP, which isn't of much use to them anymore.
Ah, the tutorials for this are out of date. For version 2.10 of this plugin, the stuff should go inside `&lt;build&gt;`, not `&lt;reporting&gt;`.
Have you tried writing some code and testing what happens?
Why so?
Very good questions. I think it has a lot to do with what size of company/organization the average speaker comes from. I also think that the JavaOne demographic is predominantly very westernized, skewing the stats somewhat. I went last year, and don't remember seeing that many Linux machines, either.
The intention was to start a discussion, hence the brevity. What platform do you think has the largest amount of Java developers?
glad I didn't go to JavaOne
I do not know why. I would guess that cost is one big factor.
Sure, when you have an old, large, shared codebase with a build system that, for whatever its faults, works reliably across platforms. For all its faults, Maven is still a very useful tool and has ubiquity within the Java ecosystem. 
for those interested in reactive java, check out [kilim](http://www.malhar.net/sriram/kilim/). it's presented as an actor framework (and works well in that context), but is implemented as a bytecode weaver (and runtime) that turns imperative code into reactive code
How come? It can use Maven repositories, and you can deploy to a Maven repository with the Maven plugin, but that's about it. 
It was an amazing read. Thanks.
Otherwise, you are better of with a build system that's built on object-oriented principles, rather than XML documents. The very first reason for this is the ability to handle change, making the build system maintainable, flexible and extensible. Which does not matter of course if you are dealing with an old, large, and shared codebase, most likely without tests. 
You don't seem to understand some very basic programming concepts. Like variables and assingning values to them. If you are doing homework for some programming course, you probably have some material to help you. Try reading about variables again so that you understand how they work. You wont learn programming by asking other people to solve even the very simplest problems. Best way to learn to code is to experiment and try out things out for yourself.
In order for it to be a 'memory leak' in the JVM, it would have to be an object that is still allocated (or one the JVM thinks is still referenced) but isn't actually accessible by any thread's executing code (exceptions to Weak\Soft references.) A memory leak isn't creating an object and forgetting you still reference it somewhere, that's just crappy code. JNI does provide you with an ability to create _real_ memory leaks in native dependencies though. Interfaces\Wrappers to native library in Java usually implement the dispose pattern, and failing to invoke dispose will cause this.
Why hate Scala? It's just another tool that proves useful for many developers. Same could be said about Groovy, Clojure and other JVM languages.
Thanks for the reply. It was the second issue you pointed out. The array wasn't at full capacity so it generated null pointer exception when it reached a null value. I decreased the size of my array to the element count and the code worked. 
&gt; A memory leak isn't creating an object and forgetting you still &gt; reference it somewhere, that's just crappy code. That's crappy code, but it's still a memory leak. A memory leak is when memory is gradually being filled up with objects that are not in use. Whether there are references to these objects or not is of no interest to users who watch the application dying.
How is your grasp of OOP?
I understand the concept of classes and hierarchy within the objects. I'm mechanically minded so I can comprehend things even if it's digital. Not sure if I'm as competent in it as a feel I am but I'm fairly comfortable. 
Thank you!
You've created a very loose definition of a memory leak then. http://stackoverflow.com/questions/6470651/creating-a-memory-leak-with-java Referencing an object is using the object. This has been discussed before above. 
Everything you will ever need, except the knowledge you need to be able to read it. http://docs.oracle.com/javase/7/docs/api/ 
For that very reason. Allows you to leverage Maven repositories locally and externally.
That's different. Gradle includes Apache Ant, and relies on it. You can use dire not only Ant configuration, but even plugins written for Ant. None of that is true for Maven. Gradle can leverage Maven repositories, because Gradle relies on Apache Ivy, which can handle Maven repositories, and because of the Maven plugin written for Gradle. Just to clarify, Gradle does not uses Maven in any way. According to the roadmap, in the future Gradle will be able to import Maven projects, and convert Maven configurations to Gradle build files, but that's about it. &lt;http://www.gradle.org/roadmap&gt;
Vanity project perhaps?
 randomNumber = myRandom.nextInt(10); gives you a number between 0 and 9
You can either move Lines 4-25 into a separate method, perhaps called *reroll()*, or you can just put those lines inside of a while loop and then break out of the loop when necessary. 
Well, the obvious improvement to the collection of 'if's is to use if else, since only one can be true at any given time. A better improvement would be to replace the 'if's with a switch statement. Switch statements are especially good when a bunch of sequential numbers, because they generally get converted to assembly language jumps. (i.e. jump directly to a certain block of code.) But if it were me, I'd convert the 'if' statements into a HashMap (an array or list in this example would work just as well) where the key is the number and value is the extension. That would give you O(c) speed.
There are no gotos in Java. Labels are only used for the `break` and `continue` keywords (see http://stackoverflow.com/questions/2545103/is-there-a-goto-statement-in-java for a discussion). That said, what you want to do is loop. The do...while() loop is probably the ideal choice in this scenario. Also are you sure you want to go to line 4? Since none of the percent variables seem to change, wouldn't it trigger an infinite loop? If percent is 93, it would fall through, `rolls` would increment, and then it would fall through again.
Plus, if you do it this way you can parameterize your random number generator on the size of the collection so that when you add new extensions it automatically extends the upper bound.
Most direct improvement IMO would be to remove the use of stdin and just take command line arguments. If you still prefer the Scanner paradigm, you can at least clean up the prompts somewhat (particularly "Please wait", I don't think anyone's going to get impatient in the 3ms it takes for the program to finish once they see that text). As /u/i_donno mentioned, on line 22 you have a number between 0 and 9. Your subsequent `if` will turn 0 into 1, so the program will never generate the `".sys"` output, which is the result of the random number being 10. You can also replace your entire line of if statements with a single array. E.g. String[] extensions = new String[] { ".avi", ".docx", /* etc */ }; extensionIndex = myRandom.nextInt(extensions.length); System.out.println(input + extensions[extensionIndex]);
I think that I will do that. I completely forgot about while loops. Thanks for jogging my memory.
If I recall correctly, there was some way to make it so that you don't have to type "System.out.println("");" and you could instead just type "println("");". Do you know if that was a thing? I added that because I thought that was how you could do that, realized it wasn't, and didn't feel like removing that import.
Okay, thanks! I replaced the if statements with a switch statement, and also noticed a bug I had with the if statements; I stated what it was in the edit on the main post.
Not in Java, unless you write a delegator method in the current class. You can do out.println() if you statically import System.out, but there's so little savings that there's no reason to do it.
There's not much to understand about arrays. It's a variable that holds multiple values of the same type. Here you have a String array holding 1 String for each extension. You can get the values out of the array using array[index] where index is a int from 0 to the number of extensions -1.
I'm not a youngun'. I already have an undergrad and graduate degree in another field. I'm on my 2nd (or maybe 3rd) career and old enough to think like not only like a consumer but as someone who has hired a teacher to do a job for me, not the other way around. This is why I get pissed off when I think the teacher is slacking off. 
ok, I get that and you should be angry that you are not getting your money's worth. Grades (as you know) are darn near permanent. Get the A first.
I appreciate your comments, but I think you're splitting hairs. 
Ah, I see. For some reason I mentally assume someone "new to X" is still familiar with programming because I'm so used to dynamic language guides (e.g. for Python, Ruby, Node, etc.) where a guide is written for people "new to Ruby (but coming from Java or Python or something)". If you are totally new to programming in general, this is pretty good :) The only real problem would be the random numbers only going from 1-9. However, on that note &gt; I also changed the (10) to an (11) If I'm understanding you right, you've changed your call to `myRandom.nextInt(11)`. This works as it will allow every entry to be accessed, and since this is a toy program this solution is perfectly fine. But you should be aware that if you're trying to go for a fair and random selection, the way you're doing it now gives *slight* preference to outputting `".png"` because both 0 and 1 will select it, whereas all the other options only have one random value that produce them. The general solution to changing the range from 0-10 into 1-11 is to use a snippet like myRandom.nextInt(10) + 1 This will give you a random integer between 1 and 10, inclusive.
Oh, the book I have on Java recommended to use the "(10) + 1", but I thought that wasn't right to use since I thought it would do something like "randomNumber = 5", as per the Random call, but then that would turn that into 6, making it so that if the Random call output 10 it would result in it adding 1 and making randomNumber = 11, resulting in "extension" equaling "Null", since I don't have an extension for 11. Is that something I would have to worry about or no?
No. Nobody does. Also, it's never ever been asked here (and particularly not in the [last three hours](http://www.reddit.com/r/java/comments/1n6x7h/beginning_java_programming_what_are_some_good/)), so searching the subreddit for books, tutorials, and other resources probably won't help. sorry. /s
Whoa Thanks dude!
&gt; The JVM has had the ability to utilize JavaScript for quite some time via the scripting engine interfaces so is this just a library that provides support for doing that? The JavaScript support was rewritten from scratch to take advantage of invokedyname, while updating the language level to ECMA 5 in the process as well.
Or maybe Japanese people use these a lot? I know they have video games over there and even consoles that we never hear about as well.
Maybe cool; do a video by taking BalusC's JSF 2.0 getting started as a guide (contact him if this is okay of course). It's really good material and probably would look very good in a video.
Fat chance I'd say... Although with Balmer out the door who knows...
Well, no. Gradle, like Maven, can execute Ant tasks, but does not use it for anything else. Ivy is not used in Gradle for at least two years. They have their own dependency management. They do not use maven neither. They rely on maven convention to express dependencies located on maven repositories, but their internal mechanism is quite different.
My solution to Problem 2 would have been the following: public void evenOrOdd(int a, int b){ if(a%2 == 0 &amp;&amp; b%2 == 2) System.out.println("Both a and b are even"); else System.out.println("a and b are not both even and not both odd"); } 
I checked some code. It didn't compile when I took out "import java.lang.reflect.Field;"
you shouldn't create basic java tutorials. there are already plenty of them with great quality (like Derek banas). Focus on advanced buisness stuff like java ee. There is plenty of stuff to cover there. good luck
That is because class Field is not in package java.lang, but in java.lang.reflect. Altough the notation might lead one to believe, that java.lang.reflect is somehow contained within java.lang, this is not the case from syntactical point of view.
Excellent info, thanks for sharing your experience!
I really like Tomcat and TomEE. They are really slick, starts fast and are powered by ASF. All the mailinglists (owb, myfaces, tomee etc) are really friendly and helpful and their respective jiras are very well maintained. You can also be certain that there's no strings attached to the software. Switching to JSF from JSP is easy. Use http://showcase.omnifaces.org/components/resourceInclude and migrate slowly. Make sure to use JSF 2.2 and the new HTML 5 friendly markup. People love tomcat because it's so simple and reliable and you get to keep that but get EE when you do TomEE. 
How is TomEE these days? When I first looked at it, it required a lot of configuration and hassle to get going and register EJB's and the like, and it seemed awfully young. I heard they have an integration partnership with IntelliJ now, but I haven't used it.
TomEE is powering CommaFeed in production and I could not be happier. It's like using tomcat but being able to use javaee6 features out of the box. The maven plugin is also very handy for developement and packaging.
Hmm...looks like TomEE with Bootstrap, which is almost exactly what I was considering for our corporate app scenario. I have used Maven before, but had some issues with publishing and maintaining the apps across multiple developers using Subversion. I'd like to settle into a scenario where we're using Git, JIRA, Confluence and Maven for our dev teams around the globe.
It's open-source, feel free to look around. https://github.com/Athou/commafeed/
I'm a computer science student (senior) and I'm taking a course in parallel programming and my teacher wouldn't have agreed with you more, and so do I!
Use neither, java.util.concurrent has classes that let you do this sort of thing without dealing with synchronized blocks.
Good rundown, thanks a lot! I have considered JBoss, but admittedly my most experience is Netbeans with Glassfish. I'm very curious to try out IntelliJ with TomEE, but they're sure proud of that Ultimate version of their IDE ($$$), and there are no breaks for big business :/ It feels like every time try to deploy Eclipse en-mass we run into weird buggy plugin issues, whereas with Netbeans we run into weird buggy server issues on deployment. From what I can tell a lot of people are genuinely happy with IntelliJ IDEA, but it's also a bit of a cost issue since the others are free. No doubt we will be needing the clustering support of some sort of high-end or commercially supported EE server, and since we're already an Oracle / RedHat shop Jboss may be a good fit.
The Thread.sleep version is also utterly broken as there is no happens-before relation.
No experts here, but i have some suggestions. I could send a request with a lot of data in the "password" field to mess with the performance of your (database)server. So i would advice to check the length of the field. Also you might want to check if the post-request is from a user that opened your page, if not you could be open for Cross Site Request Forgery
Look at what factors affect your overall costs over the lifecycles of your development programs. If you work for a large international manufacturer, I assume you have your project portfolios organized as development programs, right? Also, given your starting point, you would probably have three to five main contractors on the continent on which you have your primary operations, and possibly more elsewhere, are we talking about about these kinds of numbers? Given that you're talking about a fairly large migration, what kind of talks have you been in with your CFO regarding the business results such an undertaking should produce? Since that would definitely affect your choice. The costs you accrue from your application server, be it Tomcat/Jetty or the 5000$/CPU varieties, come principally from you being able to complete your development projects without additional complications from defects or imperfections in the product (products used by hundreds of thousands or millions of developers are usually more polished and tried than products used by thousands or hundreds of developers), you being able to either hire people with a deep understanding of the product, or your contractors genuinely being able to hire the same, production anomalies caused by either the product or the business decisions of a vendor you have insufficient leverage over, and inefficiencies in the product's usage model. ### Fundamentally, your big choice is that of your vendor. It's absolutely critical to pick a vendor who's CEO really cares if you pull your business. That's the only way to have real leverage, and real leverage is the only way you get your problems solved. And when you pick a commercial application server, you will have to expect a lot more of those, when compared to much more widely used products such as Tomcat or Jetty. That's the essential business reality about app servers - they don't really give you any real capability to assist business units, they only take away. Your per-developer overhead won't be significantly affected by the license costs of IntelliJ IDEA, YourKit and JRebel, which are the top-tier products in developer productivity. Your training budget in 2014 should go principally into effective (non-bullshit) communications training, DevOps, cloud training (assuming that you have at least one cloud-centric business development program) and modern toolset training (static analysis tools such as Sonar, CI, Continuous Deployment ideology to be continued in 2015, Java 7/8 new features depending on where you are on upgrades, and so on. Edit: I can't believe that I first forgot to mention FUNCTIONAL TESTING OF COMPONENT INTEGRATIONS. To continue on application servers - they have various licensing models, but your central problem with those is that you're very likely not currently measuring the benefits you're reaping from your current products, and thus you have little or no idea how those benefits connect to your other business processes. Therefore, when you sit down to talk about licensing to your vendor's slick sales manager, they will be able to claim almost any benefits, and you can't really be sure whether they are relevant at all for the business units you're helping. Most people in that position try to nod and smile to try to appear less stupid than they feel, but that's the absolute worst thing you can do for yourself, or for your organization. You don't want to sit down with your vendors before you have first sat down with your IT management, your business unit management, your developers and your operations staff about what aspects of their work are affected by the vendor discussions.
In addition to all other things said, this thing isn’t even thread-safe. It is not guaranteed that the first thread will see the changes in `fileProcessed` at all.
This blog post gives me a sad.
I had a German woman for data structures. Most challenging college class yet. Tests never matched the homeworks. She was so unforgiving. Projects were even worse. Skid by with a D. Honestly though I learned a lot more from that class than just data structures, I learned how to teach myself.
As a side note it's a little strange to see just floating parenthesis; `nextInt(10) + 1` is probably better to write than `(10) + 1` even when discussing. &gt; so that if the Random call output 10 it would result in it adding 1 and making randomNumber = 11 The trick to it is `nextInt(10)` will never actually give you 10, it only gives 0-9. By adding 1 you transform that range to 1-10.
After having spent a while going through the materials, I have to say that this project is head and shoulders above its corporate peers in how it presents its project site, documentation and materials. It's too bad, however, that the java.net projects don't have the GitHub fork/pull request thing down at all.
Re IDE, I've tried NetBeans, Eclipse, and IntelliJ IDEA, and I liked NetBeans, hated Eclipse, and totally love IntelliJ. 
Reminds me of windows .ini files.
That seems to be the consensus of the internet thus far. I can see why they charge so much from the demo alone.
Find a project which interests you and volunteer. Github.com is the best jumping off point. 
Generics are not variant, so you can't narrow the generic parameter.
I'm partial to JBoss myself. If you don't have the budget for a service contract you can still use the free version and it's full-featured, widely-used, and relatively easy to configure. If you do need support, my experience is that Red Hat stands behind the product and will get your issues to developers quickly if it requires that level of escalation. I've even had them provide a specific JAR with a hot fix in it so you don't have to wait for the next release cycle that includes it. If you are familiar with Tomcat it will be a relatively easy transition, too. JBoss has easy integration into eclipse so you can run a development instance locally and debug code. WebLogic and WebSphere... never did care for them much. When you have problems you are pretty much at the mercy of their phone support. The code is a black box and difficult to debug. I have not used Glassfish.
I'd give you several upvotes if I could, if nothing more than for bringing up good discussion points and considerations with management on the issue. This is going to be a long-term goal of ours that's still in its relative infancy due to our established code-base and the teams and skill sets involved. Our overall consensus is that we need specific features of the EE toolset to simplify our development chain and distribute solutions more easily. I imagine our ultimate vendor selection will be determined by the factors you mention and our ability to anticipate gains either through uniformity and deliverables over time, or by simply consolidating the many disparate solutions we have around the globe in a manner we can redeploy among multiple facilities or consolidate to corporate HQ altogether. Thanks for your input.
Hey, as long as you give an odd number of upvotes, it's all good. Sounds like you might actually gain more from looking at standardizing on a bit higher level of abstraction, and lower level of risk taking: http://spring.io/projects Also, if you haven't yet, take a look at GitHub Enterprise, and their advanced social model for enterprise projects. Think about how you'll want to automatically scale your application server instances in 2015. Don't buy into a licensing arrangement which will stop you from doing it in practise. Look into DevOps toolsets, such as Puppet and Chef, and PaaS solutions such as Cloud Foundry and OpenShift.
Speaking of Spring, there seems to be a lot of misinformation around the net regarding its "realness" as an EE solution. One of our early foray's into the EE realm actually concluded Spring with Tomcat was the best direction for us to take, but it was relegated as some sort of bolted-on psuedo EE. What is it really and how comparable is it to a packaged EE server like JBoss? *Edited for clarity*
Just wanted to chime in that if you do go the way of Websphere, we've had much better experiences with MyEclipse Blue compared with IBM RAD across a couple clients.
I'm hearing a lot of good things about JBoss lately, particularly with people dissatisfied with the dev progress and bugginess of Glassfish. Is the community edition free for commercial use, and do you feel as though you are 'tied' to RedHat as a result (in the manner of vendor-lock-in I mean)?
Oh, okay. I'll do that instead. Thanks!
Maybe try learning and making something with the Spring framework.
You don't really need to purchase a separate server in order to play with Java on the web; you can do just as well with a local install of Glassfish or Tomcat, and modern IDEs like Netbeans and Eclipse (and probably IntelliJ too but I've never tried it) are good at launching the server and deploying your app for you. I'm fresh to Java web development myself, but since there isn't much discussion yet I'll share my thoughts. I'm finding that, compared to Ruby or Python, the Java web landscape is *much* more heavily fragmented, yet there are some standards that most frameworks and libraries adhere to that keep interoperability pretty good. My strategy right now is to follow some tutorials on Spring MVC. I hope to get a relatively friendly experience that will give me a clear picture of a couple of the mechanisms that Java EE provides. After I get comfortable/familiar with Spring I plan to read Java EE 7 guides/references. There are some alternative frameworks. I've heard a lot about Play! which uses Scala for its templates. I've also heard about Tapestry but I'm not really familiar with it. At this point I feel like learning Spring is going to be more valuable on my resume and I think learning the other frameworks would probably be much easier once I am comfortable with Spring and EE concepts. That said I just browsed the Tapestry homepage and it certainly sounds appealing. I dislike the Scala templates of Play! but that's just personal preference.
I thought he resigned from Oracle in disgust?
Spring is basically a competitor to Java EE. They are both frameworks establishing approximately the same thing. Both have strengths and some weaknesses. Java EE is more lightweight, easier and integrated and there's more choice in who to go with. Java EE's security pretty much sucks. I mean, it's not that Java EE has specific security holes, but its APIs are verbose, arcane and difficult to use. As for Spring, there's only Spring and that's made by VMWare, very corporate. Spring has a specific ace up its sleeve: it can be used to sneak updates into production when big operations teams forbid upgrades (Spring is an AS that hides inside a war). For Java EE this is troublesome, you can't really upgrade it without operations knowing about it. In small or agile teams (devops) this is of course never a problem, since there is no operations team who's sole purpose in live is to forbid things and people generally work together (since they are by and large one team). Spring and Java EE also overlap and work together. Spring and Java EE have the Servlet API in common, share the @Inject specification, and Spring's really great batching solution (Spring Batch) will implement the Java EE batching API (JSR 352), meaning that Java EE servers like JBoss could theoretically use Spring Batch as their JSR 352 implementation and applications solely coded against Java EE batching can run pretty much unmodified on Spring Batch. 
With JBoss you should never be tied in (no vendor-lock), although they do offer vendor specific APIs and annotations (best to avoid them). In principal every version of JBoss is free for commercial use. JBoss is and remains LGPL, and since Red Hat doesn't fully own all copyrights it's impossible for them to dual license JBoss. There's a catch though; the offer something they call a "community edition", but that's just a fancy word for a public beta. It's like the public betas of Windows that you can get for free, with the difference that a JBoss public beta (aka community edition) doesn't expire. Their final releases are called EAP (aka Final, aka GA). Those are still completely free to use in every way that you want. It's LGPL and this license can't be revoked. LGPL doesn't allow and field of use restriction, so nobody can say that you are not allowed to use JBoss to sell say ice-cream, or to use it in schools, or to use it commercially. There is one catch... the LGPL is a source code license. Red Hat offers binary builds of the JBoss GA releases (EAP) and if you download those you enter into a subscription with Red Hat and the terms of that subscription indeed include a field of use restriction (no production ). But, if you just build your own binary from the source code, then you do whatever you want with the binary on your own servers. If you would want to distribute the binary (or source) there's an additional catch; the source and binary contain the word 'red hat'. This is trademarked, and you should remove it, e.g. grep and replace it with 'red hot'. 
These days WebSphere and derivative Liberty can run on normal Eclipse. There's a simple and lightweight WTP adapter available now for the regular Eclipse editions.
It's not a JEE implementation. It's not a de jure standard. It does the same job, and it's a de facto standard. The major difference is in that Spring was created over the years by a software development consultancy company (which was later bought by VMWare) where people who developed software and managed software development in enterprises developed it. They created it as a practical tool to solve common enterprise problems, to make the consultancy projects they sold more successful. As a contrast, not very many people involved in the definition of the JEE standards over the years, or the implementation of the application servers, have had very current experience of what's important to application developers. There have been slight improvements in JEE6 and the upcoming JEE7. Fundamentally, it's the same difference as between a (perhaps open source) solution created by a community of user organizations, and a (sometimes closed source) product created by a software product business and sold to user organizations. For one, the principal drivers are business needs, and for the other, what the person making the license purchase is expected to understand during a two-hour sales meeting.
fuck haha thanks jesus im dumb 
Use a ByteBuffer and define a class or method or whatever floats your boat, that wraps accessing the data you care about in the format the data is in. ByteBuffer provides a decent API to read integers, chars, ints, etc.
http://javolution.org/apidocs/javolution/io/Struct.html http://javolution.org/apidocs/javolution/io/Union.html http://javolution.org/
Look at Heroku and CloudBees. Learn CI at CloudBees. Learn Git on GitHub. Check out http://projects.spring.io/spring-boot/ Create a web app with http://angularjs.org/ and a Spring-based REST service. Don't waste your time on JSP or JSF.
Spring isn't an Application Server. It provides no services, but rather only leverages Java EE services or non-Java EE services (like Akka). Spring is just a DI framework providing integration points with other services and includes some additional frameworks like Spring Web MVC, Spring Data and Spring Batch. CDI replaces the DI framework portion of Spring, while the other frameworks under the Spring umbrella continue provide value on their own, keeping Spring relevant. For example, Spring Web MVC is the most popular request-oriented framework still left standing in the Java world after the demise of Struts, and provides an alternative to component-oriented frameworks like JSF.
This long explanations of licensing coupled with the amount of time it takes for bug fixes to be included in publicly available binary releases has pushed us away from using JBoss. We have gone the Spring route as opposed to choosing another JEE server. 
The choice of application server will not make a big difference. If you are running on Tomcat now than TomEE or glassfish are probably you best bets. Switching to JSF has a huge productivity increase. Rather than spending half of your development time on the front end you can use something like PrimeFaces and it is a snap.
TomEE is not really that young. It is no different than using Tomcat with the OpenEJB jars which have been around for a while.
The server you bought is not really that helpful: Tomcat is only servlet container. Real fun comes with application server like JBoss (now WildFly) or Tomee (Tomcat + OpenEJB). As already mentioned you don't need to buy any of them. You can try everything on your local machine. Get some basic knowledge in servlets and jsp-s. There are a lot tutorials in this area and the topic is not that complicated. Than start with CDI and EJBs. Take a look at Adams Bien's blog (http://www.adam-bien.com/roller/abien/): This guy really rocks. Now take a look at some frameworks; Typically there are two groups: request and component based. Spring (request based) was already mentioned: It's nice but I don't see that much advantages over "plain" Java EE (at least over the latest version). Apache Struts2: IMHO only really useful with Convention and REST plugin. Request oriented. I would not recommend to learn it. GWT (aka Google Web Toolkit) is component based. Nice but not my favorite. Apache Wicket: The best framework with best (IMHO) Ajax integration I know. Component based. My work horse. 
I've heard that it's just vanilla Tomcat with a few open EE libs tacked on, but what gave me the "youthful" impression was the web-based control panel. It was pretty weak, even compared to Tomcat.
So to be clear, if you had it to do over again you would have gone with vanilla Tomcat with Spring?
I know I was first exposed to EE when they started bundling application stacks with IDE's. Netbeans started coming with Glassfish, Eclipse always had Tomcat support and IntelliJ comes with a list of plugins several pages long. If you know Java well, it would seem that aside from a few new bits involving web services themselves, you should take to it pretty quickly, and the popularity and demand of such skills are rapidly becoming popular. The best part about it is you can install these EE servers free on your own workstation and tinker all you like. You can literally be up and running in less than an hour. Components of the EE framework are also being rolling into SE (like EJB's). I'd say it's worth studying on the side.
In that sense you are probably right.
&gt; This is too simple thinking IMHO. That would be simplistic thinking, if that's what I said. But you cut off the rest off the sentence that you quoted. As I actually stated, Spring is a collection of integration components and frameworks comprising an ecosystem built around a DI container, but that does not make Spring an application server. Spring MVC sneaks in an application server as much as Tapestry or Struts 2 do. However big the Spring ecosystem is, that is irrelevant. You would never use all of Spring in a single application. Spring is highly modular, and you only include the pieces actually required for the type of application that you are building and the actual Spring frameworks that you are using. JSF is not becoming a hybrid framework, unless I missed the news where JSF is now giving the option of eliminating the JSF lifecycle phases and allowing the use of the front controller pattern instead. View actions are not the same as URL routing to controller actions. JSF puts the V first in MVC while Spring MVC puts the C first. This represents competing *ideologies* in web application design. Trying to implement the front controller pattern in JSF would be silly and would undercut its strengths and main selling points. 
That was a really great video, thanks for posting. Interestingly, Gosling also created the original version of EMACS written in C.
[I suggest learning Maven!](http://maven.apache.org/) Once I started using Maven I pity any java developer that still uses ant. Embedded in Maven development is useful new ways of thinking about how to code. Once you feel comfortable with Maven then you could play around with a Spring archetype.
There's a free/OSS version, too.
Read what println does.
i use dr java i like it 