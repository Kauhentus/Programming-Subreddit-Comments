What do you mean by "vanilla-ant"? We use some ant scripts for packaging, but they are run automatically by a tool
Mmh. I recall back when using java 6 that switching from the open jdk jre to the oracle jre made quite a bit of a difference in performance.
I have to tell the backend where to find pictures. So I can provide it with a subreddit, imgur album, 4chan thread or just an ordinary image and tell it which waifu it goes under, and it'll parse it then scrape and sort the images.
&gt; Operator overloading is a horrible feature that makes code less readable But `System.out.println("foo" + number)` is better than `System.out.println("foo".concat(Integer.toString(number))` ;)
Ah I gotcha. Cool stuff!
It's easy to get what is call "JAR hell", if you attempt to add or update some packages.
&gt;You seem to be of the opinion that implementing an API requires the permission of the copyright owner. This is exactly what the court case is about. Well, the API thing I do feel like it should be protected, but I reject your notion that this court case is about that. The case of API and copyright is over; the supreme court said they are. This court case is actually about fair use. Fair use actually has established criteria, and most open source projects would be easy cases to prove fair use. Google wasn't open source, and they should have been falling every criteria for fair use. The logic that Google losing hurts the general public has no basis. &gt;Though to be honest I cant make out a coherent argument in your running commentary. It feels like you are ranting. The original author is incoherent/uninformed. The original author is ranting and doomsaying. The points they're making about open source do not follow the problems in this court case.
can confirm Java 6 made me quit Java (not that I did anything impressive with it prior to that). However Java 8 gave me good enough reason to use it again and Java 9 is looking to continue the trend of positive development. For me Java 6 problem was being long-winded and without 15 years of experience, the gratification of other languages had such allure, added to my understanding of programming so much more than what seemed at the time like bloated magic. 
There's always WebLogic :-)
It's not great but it's better than nothing. Most large companies are stuck using IBM products. If you're in a similar situation then I recommend looking into Liberty. On a side note Websphere 8.5/8.5.5 is compatible with Java 7, you should look into that.
A support contract ... from Oracle. That's a company-killer if I've ever seen one. I'm used to modern companies being formed with an explicit rule of "no Oracle licenses may ever be purchased here". Once they get their hooks in, goodbye to your profits.
Bad
I like Watson and their NLP offerings. I think they are pretty fun to work with and probably the only decent cloud offering they have that differs them from Azure, Google and AWS. Aside from that, IBM is bog-standard-development-fodder 
There's an uninstaller it's under $ORACLE_HOME/oui 
Which api not used by no one? Is Servlet? Or maybe BeanValidation? Or is JPA? Or maybe Jax-rs? Or JSF? Please tell me! Is I very curious!
Woah How'd you do \\\\\\\\ 
Someone should tell that to Google, Android devs, and the rest of the world I guess? Or do you mean Java is bad for software developers who like to get paid for their work? You'll have to clarify that a bit.
&gt; "But they've got it in their heads that Java EE means all of Java. The new MicroProfile, for example, is just three Java APIs. That's great, but it's not Java EE." It sounds like the analyst and the developers aren't speaking the same language then, because as a developer I absolutely consider the proposed profile Java EE. She needs to write with a bit more naunce if she wants to create less noise.
&gt; Yes, kitchens should get rid of knives too because half-wits might stab themselves. If you want a language that doesn't keep large knives out of bar patrons hands, you should go over and write C++ and see how that goes.
&gt; that bad, huh? Should I change jobs? Lol I'm not the other poster, but I wouldn't quite go that far. Webshere is a bit trash (worked with it in the last 2 years). But it still looks fine on your resume. It takes longer to do some things, but since it's the same for everyone on the team it doesn't matter that much usually. It's like you're doing J2EE, or some niche framework from 8 years ago that no one has heard of any more. Or (shutter) a custom proprietary framework someone wrote then moved onto something else... 
&gt; In structuring any particular space of names we must balance (at least) &gt; three fundamental tensions: We want names that are long enough to be &gt; descriptive, short enough to be memorable, and unique enough to avoid &gt; needless conflicts.
Go has flair? Go is an extra-boring language, as designed.
[Still spamming](https://www.reddit.com/r/java/comments/5ujopt/java_on_ice_nhl_mustreads_for_february_16/), just looking for keywords, aren't you? /u/desrtfx : can you ban him now?
Generics are erased at runtime and can exist as metadata at best. The reason for that is byte-level backward compatibility. For more details, look into the oracle tutorial documentation ( https://docs.oracle.com/javase/tutorial/java/generics/genTypes.html). You can look into the Java language specification for more details if you are interested in how a JVM should handle generics.
The correct term is [parametric polymorphism](https://en.wikipedia.org/wiki/Parametric_polymorphism). Java's generics are one way to partially implement that concept.
He's just a troll. Can you imagine how boring your life has to be for someone to go to a sub about X to tell people X is bad every. single. day? 
WebSphere (8, I suppose?) is the most bloated JEE server I've ever seen. It's a fucking disgrace. Reboot times of 50secs+, compared to about 10 on Jboss EAP 6. The JPA that comes with it is versioned as OpenJPA-2.1.0-SNAPSHOT, and is buggy beyond belief. Try to cascade persist / load entity structures with more than 1 nesting level, and you'll see what I mean. Since you can't use any other JDK than IBM's (my blood is already boiling), you have interoperatibility issues with Intellij, like not being able to set some breakpoints (idk why). The rest of the JEE impl is packaged in convoluted manners and you cannot get the source for it. If you compare that to EAP, where you can get all source packages easily via Maven, making debugging (and setting breakpoints in the server) a breeze. Oh yea, and the thing is also a mess on disk. Has about 20 temp folders, folder naming du jour and heaps of config files and leftover no one @IBM did ever clean. Seriously, for doing JEE, I've seen no worse. BLOAT in perfection. 
"JDK 9 offers only the server JVM. The server JVM has better performance although it might require more resources." Could somebody un-tldr that, please?
The OpenJDK JVM has two JIT compilers - client and server. Server uses more time and space to compile your program than client does, but usually produces code that then runs in less time and space. I think client is basically legacy now.
Maybe if they use Openjdk's version of JavaFX like what Zulu did. Other part is around the same performance.
I'm trying to understand what you are saying, not the author. Coherency is appreciated. What is the difference between opensource and closed source that would make fair use of the API easy to prove? 
&gt;Or JSF? Projects I've been to usually tried to migrate away from JSF. Could you please elaborate why would one stick to JSF these days?
OpenJDK 6 was backported from 7 and was something of a mule, but the reference implementation has been OpenJDK since 7+.
The `Module-Name` attribute in the manifest will be read by the module system at startup when the jar file is placed on the module path, if I understand correctly. If it is present, I would expect the maintainers to have done their part in ensuring it is unique enough, so build-tools won't have to change it. I'm optimistic that maintainers will treat `Module-Name` as a public API. If they decide to change it however, a delegating module with the old name could be used that transitively requires the new one. So there are at least ways to transparently deal with this. But you are correct, projects change names for many reasons. I think it's important to repeat that the classpath is not going away, applications will continue to run unmodified. It might be wise to defer the update to modules until the ecosystem has caught up and at least provided stable `Module-Name`s for most dependences. For the ones that are no longer maintained and where their automatic name conflicts with others, the proposed solutions (command line override, build tool hackery) sound reasonable. I hope there are not many cases like that though.
Oh ok got it! Thank you! 
If you want something close to java, then C#. Type inference allows you to change types without rewriting as much code.
Lots of potential breaking changes. Somewhat unexpected, but I deeply agree with them.
Thanks so much for taking the time to respond/ &gt; Your code needs to be as readable and self explanatory as possible. This is more important than perceived micro optimizations or clever methods. I've heard books like Clean Code or Code Complete recommended for this; are they useful at all, or can I mostly achieve this through common sense and practice?
It was released March 18th, 2014... 
Writing cleanly designed code is really helpful for yourself as well as who has to maintain it later. Continuously learning and become better on the following areas would help * You need to know how to write good unit tests, mocking, TDD etc * Get a grip on the language itself (Effective java books etc) * Design patterns (GangOfFour books) * Refactoring and debugging skills * At a high level, keeping track of what's the trend in the industry etc (Like new java releases, other jvm language alternatives etc) * People and presentation skills. Learn to talk technical stuff to non-technical people. 
[removed]
Just wanted to say thank you to all who have tried the library. There have been two issues opened so far by users which have been the origin of the last couple release. It's nice to see others getting use out of the library, and also working out the kinks which may not get hit with just a few users.
[removed]
Would love to have this capability
goto exists in Java
I don't doubt that ;) 
It's hard without experience, but just try to imagine you're looking at it a year down the road, will it still make sense? Your intentions clear? There is a rubber duck thing too. 
Point taken, but goto is quite a different beast than operator overloading.
Would be awesome for Big-classes. I think I would like it for dates, but what is today + 1? Is it tomorrow, 1 hour from now, 1 second, etc... Maybe it makes sense for collections where + concatenates 2 collections.
The answer from /u/meddlepal above is pretty good: grind it out for a year. I have some additional suggestions. Finish school first. If you're part-time at this place, and everybody is nice, that seems pretty comfortable. No need to change right now. When you graduate, consider other offers, if available of course, but don't rule out this place if they give you an offer. Even though the technology is old, being on a good team with nice people and nice clients counts for a lot. If you get onto a bad team, or if you get a bad boss, it will make your life pure hell. There is a lot of experience to be gained, even working on older technologies. Experience comes from working on teams, seeing projects from inception to delivery to maintenance, making decisions, taking responsibility for diagnosing and solving problems, reconciling conflicting requirements, etc. All of that is technology independent and will transfer well to other jobs. If you do end up working full-time at this place for a year after you graduate, you'll be in a much better position to understand where they're headed. It might very well be a dead-end job. On the other hand, if things are still in active development, they might be considering some kind of migration project that will open up more opportunities. Your interests may change in that time as well. My guess is that things will be a lot clearer a year or two after you graduate. Good luck!
Please read up on Reddit rules of self-promotion/spam - you're definitely not contributing anything other than trying to drive traffic to your site at the moment.
The goto keyword exists, but it is not implemented. Though there are other short circuits like break, early returns, exceptions. My point was that an argument like "don't blame the language blame the people" isn't leading anywhere. Also languages like Go are popular precisely because it's feature-set is restricted. (While the debate about Generics are endless and similar to this one) 
Yeah. But I wanted to know why anyone in their right mind would think to remove operator overloading from Java. Now I have some reasons. 
I don't think there has been any real interest in the client for a long time, I'm actually surprised they bothered with Java FX. Having said that I suspect the dropping of the client VM has more to do with the increased performance of client machines. Even bargain basement machines come with 4GB ram and a ton of spare processor cycles now - might as well just use the server VM.
Is that right? The "client" (C1) and "server" (C2) compilers were somewhat unified in Java 8 via tiered compilation. I see patches improving C1 getting merged into Java 9 so I don't think it's been removed or is considered legacy. It produces compiled code so much faster than C2 that any Java 8 app will have a code cache mostly populated by C1, not C2. The full quote is this: &gt; In JDK 9, Windows 32 Client VM is dropped and only a server VM is offered. JDK 8 and earlier releases offered a client JVM and a server JVM for Windows 32-bit systems with the default being the client JVM. JDK 9 offers only the server JVM. The server JVM has better performance although it might require more resources. This helps to reduce complexity. I think this refers to a specific configuration of the Windows 32 bit JVM only, which didn't ship with all the same support and components as a regular JVM.
We had a CTO that wouldn't let us leave Java 6 until last year. I'm pretty sure some of my coworkers don't understand my code reviews when they involve lambdas or streams.
You need to know Rx, or stream-based programming in general. Rx is available in many languages, so choose your favourite.
&gt; I just started Java a few days ago, and I already feel that c++ leaves a lot more options for the programmer. It does, but those options cause lots of problems for very little value. &gt;I honestly want c++ just because of the operator overloading operator overloading often makes things barely readable and hard to search for. Most people implement them incorrectly like the four rules of equality. You can also use Kotlin which intermixes with Java well to accomplish this. &gt;and friend functions. You can use annotations to do this, but you should use it sparingly. &gt;Besides that, Java is great, but I wish you could code in c++ for android development. You can use C++ for android, lots of cross platform libs are in C++ between iOS and Android. But it is much easier to just use Java.
&gt; Right. I am not afraid of possibly dangerous features - if you are interested in programming (as a kind of art or craft), you will get over misuse. If you are not and think programming is just a 9 to 5 job woul will produce always bad code, no matter how less features a language offers 😈 Here I am reading your comment over the weekend on my own time, and I think operator overloading is stupid. People creating their own DSLs or think that they're being clever make a mess. You can turn easily searchable/grepable code into an unreadable incorrect mess. The common operators imply rules that are almost never followed correctly (see http://jqno.nl/equalsverifier/ ) The uncommon operators, increase the number of WTFs/minute in code reviews including ones conducted by the original author months down the line.
I was speaking specifically about labeled breaks. Languages are tools. There will always be people (in this case, bad programmers) who misuse tools to bad effect, and no amount regulation and restriction is going to prevent that. Operator overloading is a specialized tool that has real merit for certain types of applications. There are a lot of languages besides C++ that allow operator overloading. I worked with Smalltalk for years and somehow the existence this feature did not cause the collapse of our enterprise applications. Scala is a newer language that also has this capability. I'm sure that there are many more. That operator overloading is missing in an otherwise general purpose language like Java is a shortcoming, not an asset.
You can look at local trends, industry trends, analyst reports, and your personal preference to guide what you want to do that way. It can help to stick with similar tech stacks as people you consider friends so you can get/offer jobs to each other through your careers, the network of fellow professionals you establish and maintain can save your (and their) personal butt more than once. I switched from .NET to Java land 6 years ago and have a healthy support network in the Microsoft world locally that doesn't really ever cross into the Java professionals I have been working with. The bright side of my scenario of switching stacks from all my friends is if either of our chosen stacks falls way out of style we have connections on the "other" side to seek worthwhile projects with people we can trust to get work done. My take on this is: Ultimately Java and the JVM itself has a huge base, Microsoft has a huge base, and C# is opening up into Linux which will potentially increase its share. You'll have to decide how into the meta trends you want to be in on, but remember that somewhere out there there are people programming/maintaining systems in FORTRAN or COBOL and getting paid handsomely for their expertise. Sticking with the biggest school of fish might seem like the only way to survive according to what you read on the internet, but remember that the authors of what you read are literally just trying to get the most amount of views on what they write. Develop the general skills like testing, communication, etc. that have been described and learn a stack you enjoy deeply, then making a lateral move to another implementation set will make more sense as you'll have a better set of heuristics and intuition to guide you through what stuff means and how little most of the difference matter. Take everything I have said with generous amounts of salt and good luck!
I like clean code a lot, they describe a lot of principles that not only make your code cleaner but also more testable, extendable, modular etc. So you're writing better code in general, not just cleaner code. The IOSP for example is about structuring your code for easier understanding, but also for better testability.
"Oracle preps developers for Java 9 upgrade". Huh. That's funny. I'm a Java developer but I didn't get a subpoena. I must not be on their mailing list.
Wow. Man you don't even know how many days I've spent in decision paralysis, reading pretty much every Java vs .net article, forum post, blog on the Internet...but really, no-one has quite put it like this. Thank you so much for taking the time to write all this. It's very much appreciated. Thank you!
The text your reference isn't very conclusive in that regard though. While some weight is given to non commercial use it is not the deciding factor. Additionally I don't see how you reach the conclusion that open source is more likely to not be for profit. Quite a few open source projects are serious commercial ventures. Spring by Pivotal would be the first example that comes to mind. You also hold that Google was trying to compete with Oracle on smartphones. But if I remember this correctly, Google made a serious argument showing that Oracle did not enter the smart phone market. Anyway, why do you think the use of an API is a significant and substantial amount of java? It seems to me that given the whole of the API just the mere definitions are trivial and mostly factual. And if you do think this is a significant and substantial part, are any implementations of say stdlib or any other crucial c library also copyright violations (assuming no existing licensing)? If so, how do you reach the conclusion that this is not a troublesome precedent for the software industry? 
My first project after college (mid-2015) was on Java 6, Spring 3.x and Websphere 7, didn't give me any reasons to complain. Right now I'm doing Java 7 and Tomcat 7, no complaints, no stories of glory either. You'll be alright bud.
Non-Mobile link: https://en.wikipedia.org/wiki/GNU_Readline *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^33276
3 human years = 1 Java year.
More broadly, primitives cannot be used as a generic type, but their boxed counter parts certainly can.
Well I'm mostly concerned about the C APIs because they are foundational to so many systems and bits of software. And the problem I see is that most APIs are preceded by even older APIs. Think Xerox and IBM. I would not be surprised to find that some of these older API definitions have been reused without any license and are now in some way part of every major software system. This would affect users of software licensed under the GPL too. I am no expert on software that old so I can not asses the probability of my fear but the even the mere possibility of a potential lawsuit would have a chilling effect on all software development.
&gt; Point taken, but goto is quite a different beast than operator overloading. How are you comparing one typically-poorly-used-idiom from the other? 
Thanks for taking the time to reply. Out of curiosity is this the kind of books that's worth buying and using as a reference/ for revisiting later or one that you can just read through an online version of?
&gt; I personally miss overloading quite often in data classes. Could you explain more? 
Exactly what I was looking for. Thanks a bunch for taking the time to reply to me; I really do appreciate it.
&gt; Like like in abstract mathematics, + is just a name. It's a name for a mathematical concept that has very explicit rules. Most people that overload it break those rules except for a few infrequent use cases.
You're welcome, it's daunting because we have the ability to have our fingers on the pulse of drama that may or may not affect our personal outcomes thanks to the Internet. Try to be informed without believing the hype and you'll be just fine ;)
sounds like a great cto :-/
It might be nice to offer integration as a [passay](http://www.passay.org/) rule.
[removed]
Is it close to c++ in ways?
July?? So excited!!
&gt; I'd love to have Google give an open source license to all of their stuff surrounding their "java". Is android not open-source though? 
Java sets very industry-like standards, and I think this one is an overkill. Still, I agree that it reduces the code "messiness".
If you go into eclipse and make a java project Then go into your file explorer and find your workspace folder copy the src folder from one to the other Not 100% sure this will work but maybe it will help Hope you can get it fixed
And what would you make the behavior of TransactionAmount amt = 4 - transactionAmount; do?
You had a good response, but just add to what he/she said -- it's worth remembering that the JVM is more than Java. Scala, Kotlin, Groovy, Jython, Jruby, Javascript (via Nashorn)... there are many different languages that run on the JVM. So even if Java loses some favor (which I wouldn't bet on, and regardless it's not going away in the foreseeable future), there will still be a ton of work out there that benefits from experience on the platform and its tools/libraries. That said, look what's hotter in the markets you want to work, and in the company's/fields that interest you.
Instead of modifying existing project. I would suggest to create new maven / gradle project. Move the source files and resources there. Maven projects can be imported by default . Gradle projects need eclipse plugin
From the requirements I see a fast map access. I would suggest to go with ConcurrentSkipListMap or ConcurrentHashMap. EHCache or HazelCast might be alternate options. EHCache has Heap Memory and OffHeapMemory Strategies which might fit in.
First of all, thank you for your reply. I'm reading a series of lines with ~ 100 values each, tab separated. Each line represents an array, and each value is a couple Integer-String. So, all the HashMaps that I'm using, are actually indexes for this vectors (and particular portions of them). I need to have all the data in RAM, because I need to randomly access them, and no bad input has to be discarded. Thank you for your pointer to Spring Batch, but sadly this doesn't seem like a good fit for my use case. I've made some thinking about SQL, but because one of the maps is actually a "reversed index", that lists all the array fields into their head, I'm a bit afraid that such a solution wouldn't be advantageous for me. So I'm still convinced about trying out NoSQL approaches... I just hope that JSON serialization will be fast enough. 
Similar to C++ auto keyword
have you considered using spark? it may give you access to the data structures needed to split this up into multiple jvms that will haves less gc problems and can load in parallel quite nicely. plus using the scala command-line loop will let you explore your data quickly. this problem sounds very data-sciencey, and using those type of tools may be helpful. 
&gt; Using + on strings doesn't perform addition, it performs concatenation. Which is a meaningless statement given that addition isn't defined for strings. String concatenation is a monoid and is analogous to addition over number types, so for the vast majority of people using + over strings is completely intuitive. 
Could you please elaborate on this? I was using 3 executor services in my application, didn't have concurrency issues, but I later changed my code to have a single executor service with a thread pool of 3, i am loosing some samples. 
For questions like these /r/javahelp is more suitable. 
Note that Haskell allows the programer to define custom operators, where they are regarded as a key language feature. You don't generally hear of Haskell programmers complaining and demanding this language feature should be removed.
Open up the class that contains your Public static void main(String[] args) Method Then press ctrl s Hopefully that updates it for eclipse
too complex for his use case imo
The interesting thing is that except for Go, Java and JavaScript, every programming language out there being used in the mainstream, allows for overloading. Some of them actually don't have overloading as actual concept, rather any symbol on the keyboard can be used as function name, e.g. Lisp derived languages. Yet programmers do manage to somehow use those languages.
I'm not recommending a cluster, just the same current machine, but write the code using dataframes (which have a sql model anyway), an run it in spark. I've done this myself and the setup time is minimal, minutes to download out-of-the-box images and run them and start processing datasets. tl;dr if it fits on one machine, it will still fit with spark and you can use better algorithms and let the data structure problem take care of itself.
Glassdoor is a single data point. From the survey: "We’ve gathered the data at the following services: StackOverflow, LinkedIn, GitHub, and Google search, and unified it." So, I think they're presenting valid data, although including Glassdoor would have been a good move. 
I wrote C++ for over a decade. Custom operators were extremely useful. A minority of people misused them but some people also gave classes stupid names, and I don't see anyone proposing to remove classes from Java.
/u/brightam1, /u/DB6, /u/DrFriendless, /u/firebird84, /u/magawa, /u/memory_leek, /u/MOnsDaR, /u/mreichman, /u/nyp3001, /u/OnceUKnowUAreScrewed, /u/perrylaj, /u/petesapai, /u/RichoDemus, /u/theuniquestnam, Big thank you to all of you for your responses. This was my first time asking a question like this on the Internet, and you were all so helpful. Thanks! :)
Cheers for the shoutout! (mark here). We've not recorded for WAY to long - mostly because Greg and I (coworkers) have had a major project on at work, and I've been doing more concert photography which sadly occasionally clashes with our normal recording night. We hope to get back into some episodes soon - I'm sure with the impending release of Maven 3.5 and the long awaited Java 9 / Modules System - I'm sure we'll have plenty to rant and/or commiserate about. 
But when people instead use a `plus` method what's stopping them from breaking those same rules?
Oh, now I get it. I was getting it the other way. Thank you.
Java is not supported
As several people have mentioned something like **ehCache** is probably your next best step. It's really easy to drop in and work with your current solution. Another option would be to use something like **redis**. 
Appreciate the insight. I'll look into it.
Infinispan (http://infinispan.org/) should be a perfect fit for this task.
That's a problem for me. We don't want user to have to re-authenticate. Suppose I logged in 4 hours ago and now my session is about to expire, but I am still actively using the app. I will be very irritated if I have to reenter my credentials. Also, caching credentials on the client side is not an option for me. So I don't want my javascript to hold on to the credentials entered by the user and transparently resubmit them every 4 hours.
&gt; Yet programmers do manage to somehow use those languages. And you notice that C + Java + JavaScript is far more popular than the remaining languages put together.
If we use the token to refresh the token approach like you mention. How will we know when is the right time to refresh the token? Suppose I used the token last at 3 hours 59 minutes and I make the next request at 4 hours 1 minute then my next request will have an invalid token. So how will we find out when is the right time to fresh. 
If the users still has a valid session with the SSO provider then the SSO provider can see that the request belongs to an active session and issue a new token without requiring the user to log in again.
That will not work because the JWT service will get hammered for issuing tokens on each and every request. this will become a nightmare. And signout will be a nightmare too because now we have 1000s of tokens which need to be invalidated.
So you are saying that we issue a new token on every request?
I don't understand why you would do this with every request? The JWT token should include the expiry time, just set your client side app to issue a refresh request at some point before that expiry time
For a while I was like "you must be bullshitting me". Nope, it's real. But why?
1. Refresh token 2. You don't invalidate tokens. You can change the key pair the server is using to sign/decrypt the tokens but that will invalidate for all users. To sign out just throw away the token on the client side and that's it. If you want to able to instantaneously lock someone out from the server side you'll have to have another mechanism to do that. There are trade-offs there because now you'll have to maintain a "naughty list" that is shared with all the servers, and you'll have to check it every time -- resulting in a traditional shared session repository. This is how I understand it, would be interested to hear if someone has solved this in another way
You can easily achieve this by turning on [string interning](https://en.m.wikipedia.org/wiki/String_interning) in Java. 
that's a pretty cool learning project. thanks for your answer :) 
Full disclosure: I work for Stormpath TL;DR: standard oauth2 workflows allow a new access token to obtained using a refresh token when the access token expires. At Stormpath, we use oauth2 workflows to set tokens. The oauth2 spec is token-format agnostic, but we (and many others) use JWTs for tokens. When you authenticate, you get back an access token (typically with a short expiration) and a refresh token (with a much longer expiration) When the access token expires, you can get a new one using the refresh token. This can be done automatically, so there's no need for your users to have to reauthenticate. The idea in doing it this way is that if you need to prevent a user from accessing the system, you can invalidate the refresh token, which will prevent a new access token from being retrieved. There are lots of open source libraries for managing oauth2 workflows, including the SDKs from Stormpath. Hope this helps!
Redundant vectors will be optimized out by Escape Analysis, so I don't get what you mean. We already can write code like this that creates new vectors and never suffer from heap allocation/gc overhead: entity.position.set(entity.position.add(someVector).mul(someOtherVetor)) where ````add```` and ````mul```` return new object. Run [this](http://pastebin.com/raw/3LRe17FT) code with ````-verbose:gc```` jvm option and observe the output. With operator overloading this would probably look something like this entity.position = (entity.position + someVector) * someOtherVector if we assume that ````=```` is overloaded too
Thank you, this seems like a suitable solution, however my main problem still stands: can this caches be persisted and reloaded faster than a classic HashMap? 
Really wish I would have had this a few weeks back when I started integrating it into a Python project I have. Great idea, thanks for posting!
And I've written Java for over a decade and never had a need for them, except occassionally with BigInteger or BigDecimal (and even then it's useful for code review to use a method so it's clear at a glance that you're not using a primitve). There's nothing you can do with operators that you can't do with methods. 
&gt; But I fear that it might not be the best approach for this early a stage in my career Exposure to lots of different languages and environments is exactly what you need at this early stage in your career. It will help you get over your "favorite" this or that, and force to you focus on simply getting the job done to the best of your ability in whatever environment you are required to work in. What would be bad for your career is sticking with the exact same tech and never branching out. :)
Well it's IBM, so you kind of have to expect 9000+ layers of abstraction, and customized-everything. :P I don't understand your reboot times comment though. We just restart the service. It's usually back up in seconds.
You forget that constructors can't be optimized away and GC/allocations aren't as easy to optimize as you might assume. The allocation would still cost and so would constructor calls etc. so the temporary vector/matrix will will have a noticeable impact that the VM will need to optimize over multiple stages if at all possible. As a VM author these sort of optimizations become **really** tricky. That's why a lot of this work is thrown into javac itself e.g. builtin String concatenation which suffered from this exact problem until javac fixed it (not the VM).
Take a look at chapter 5 ("persistence) of the Infinispan documentation: http://infinispan.org/docs/stable/user_guide/user_guide.html#persistence. It describes how to persist caches using a simple file store. The subsequent chapters describe other stores such as JPA or LevelDB.
Yes, and one day 🐴 very popular, but what is relation to EE?
They are Java EE, no?
You can invalidate tokens with a server Side blacklist
Assuming you have to load the currently logged in user/account from the database at every request anyway (to check permissions etc.), this approach might work: 1. Store a timestamp with a name like "rejectSessionsBefore" with the account 2. On logout, set this value to the current timestamp 3. On every request, check that the "iat" (Issued At) claim of the JWT is not before "rejectSessionsBefore" Caveats: 1. This will invalidate ALL issued JWTs. If a user has many clients (mobile, web etc.) this will invalidate all of them. You could keep separate "rejectSessionsBefore"-fields, but that trick might run into limitations. 2. If you have many backend servers that do this, you have to keep their clocks in sync. 3. You obviously have to query the account on every request.
After researching the subject for the entire day today. I feel that the code I inherited is defective. They should have used an OAUTH library and they would have got session extension for free because most OAUTH libraries provide the concept of a refresh token. They instead wrapped a JWT library in a custom web service and that is why now we have to invent the concept of a refresh token. The main problem as I see now, is that I should pick an OAUTH library which encodes the token in JWT and then I will not have to worry about the session extension myself.
You are missing the point. Forget about rest for a moment. Say a UI authenticates to a web service. the UI is not caching the credentials and UI is not asking for username/password at all requests. the only way to achieve this is to have some sort of session which has a life time. REST does not change this. the service has to issue some kind of token (session) which is valid for a certain period of time. the UI hold on to this token and then submits it on each request. In my question above, I am asking that when the validity of the token expires. how do we renew or refresh the session automatically without the UI asking the credentials again.
I think a good place to read a well made, complete and still simple enough implementation of Spring Boot is thru JHipster, it is an application generator that uses Spring Boot. I do not mean to use JHipster to generate you app, but to read and understand the codebase it generated. It uses many features and modules of Boot on a very clear manner and with no business logic around. Some I can remember are Data, MVC, Security, Rest and some others that are optional. I learned many things from it and understood quickly how to implement Boot correctly.
I believe Broadleaf Commerce may have Spring Boot starter project. There are TONs of unique things they did in that project that you can learn from
Try r/javahelp
An awesome one missed here is [javaslang](http://www.javaslang.io) EDIT: While I'm at it, [immutables](https://immutables.github.io) is also awesome and a must check out.
Since this is help with **Java Programming** it should be, as the many hints on the page indicate, posted in **/r/javahelp**. Be sure to read the [**Posting Guidelines**](https://redd.it/48eykt) there before posting. **Post removed:** programming help
This discussion should better be held in **/r/learnjava**. Still, how about diving into [**Design Patterns**](http://java-design-patterns.com/)? Also, practice, practice, practice.
Two comments: * Guice on is own is very limited, as it does not even support basic, essential features like @PostConstruct. It is a good library, but, if you want to use it, you really need to integrate it with [Governator](https://github.com/Netflix/governator) * Can Lombok be really considered as a Java library??? In the end, if you use it, what you write is not Java any more... Lombok is more like a JVM language, eg like Kotlin, albeit very close to Java
And [FlexyPool](https://github.com/vladmihalcea/flexy-pool). Without monitoring, you will never know how your connection pools are doing and whether they are sized appropriately.
I tried Lombok. It's very pleasant and make a good job avoid a quite of Java boilerplate. Unfortunately I experienced some hassle in IDE integration and in Java language upgrade. I don't consider Lombok as a language, I consider it a Java dialect. Kotlin is a JVM language (as Java) and it is a deeper choice but provides more advantages and fewer hassle than Java+Lombok. You may be interested to Injekt, a Guava alternative for Kotlin, it uses only property delegation for injection, no annotations, no reflection. If you are familiar with Kotlin syntax then it is very easy to understand. https://github.com/kohesive/injekt
Awesome, it looks like a Kotlin standard library but with incompatible type hierarchy. Javaslang "List' has same name of JVM "List" but doesn't implement JVM "List" nor JVM "Collection", like Scala.
indeed, I had as well a lot of issues with IDE integration for Lombok... and that is the reason why I usually do not recommend it :( Regarding Injekt, it seems interesting, but: * Injekt looks like a one man show? I use Guice/Governator (Google/Netflix) in Kotlin, and it wasn't difficult to setup * last commit for Injekt is from June 2016... 
The comments are from 2012 so I wonder what the goal of you posting this is?
Another one: [JooL](https://github.com/jOOQ/jOOL). Basically a small enhacement library over Stream, that covers most use cases with less code. So instead of if(lis == null){ return Collection.empty(); }else{ return list.stream().filter(...).collect(Collectors.toList()); } you can write return Seq.seq(list).filter(.....).toList(); It offers a small subset of javaslang, but javaslang is more in the spirit of "I want to use Scala/Kotlin but my boss don't let me", and jool is more like "java is fine, let's try to type less code in the most common cases"
Thanks a lot. Maybe Guava misses only of some extension methods...
Someone already pointed out in the comments, but definitely don't overlook DL4J either.
Nobody ever got fired for choosing to use the Spring framework. Complexity is not your friend. Invite complexity into your projects kicking and screaming. Clever and opaque bits of code will make later developers hate you. Clarity is your #1 product.
Sorry! Deleted and moved 
Also interesting in that category: [StreamEx](https://github.com/amaembo/streamex) with extensions that work also on parallel streams
awesome list. I would prefer dagger2 over guice, and will give reactor a try as an alternative of rxJava
mostly a typing thing... I don't mind reading it, but it doesn't add any clarity with a Java IDE since variables are all color coded and italicized as necessary for clarity. When I type m_ , it's just a few more keystrokes that I have to do. Imagine if I have 3 variables: private boolean checked; private String name; private String value; When I'm typing in an IDE, I can type: n + [TAB] and get name. If everything is m_ prefixed, I have 3 more keystrokes to mess with. Taking 2 keystrokes to 5 is not terribly efficient for no gains in clarity. To complete the point: private boolean m_checked; private String m_name; private String m_value; I have to type: m + _ + n + [TAB] OR m + [TAB] + 1-3 down arrows + [ENTER] It's very similar to annoyance issues that arise with [smurf naming #21](https://blog.codinghorror.com/new-programming-jargon/).
**Edit:** Well, now everything makes more sense. Why not straight away? A nine year long redditor should be able to tell the difference between a self post (your case) and a link post and thus should simply not forget the most essential piece of information in such a post - the link. ~~This post is completely useless as you don't link to your telegram group or make it public in any other ways.~~ ~~So far, you're only telling us that you have created a group - nothing more, nothing less.~~ 
no multi-catch no try-with-resources no switching on strings no diamond operator
Small follow-up: https://www.reddit.com/r/Fiverr/comments/5us5u0/i_will_post_your_link_on_reddit_in_24_hours_gig/ Lovely guy.
This is truer than a lot of devs think. I also know we have a hell of a time finding Java devs to hire, because a lot of them *are* web devs.
Out of curiosity what are you hiring Java devs for if not the web? Android apps?
Lombok is wonderful for reducing Java boilerplate. I'm surprised it isn't used more frequently.
Just as I thought, nothing to do with hexagons. EDIT: The reason I am disappointed is because hexagons are fucking awesome. They are circles around a circle.
What exactly do you mean by GUI and web apps? Are you talking GWT and Swing or you mean servlet based controllers like in spring? 
what a pity you also missed nudge4j. https://www.google.co.uk/#q=nudge4j
The content is okay, but the presentation could definitely improve. Without context, the examples are practically useless for a complete beginner. 
I forgot to include the link. Please accept my humble apologies.
Start with Play. There's a starter Java application that is perfect for newbies to work with, and it'll show you that building a modern web app can be easy and simple. https://playframework.com/download#starters
Confusing new developers.
It does crazy stuff like AST reading, which is why I don't use it and try to avoid it. Who wants something that can run on Java 6.101 but not Java 6.104 (yes, that happened to us). Most of what lombok provides can be duplicated with projects like AutoValue and Immutables.
I really like dropwizard
Unlike JavaScript Java has the advantage of somewhat old things still being relevant. That book is still the boss hog of Maven books. Get it. 
[Awesome digram](http://tidyjava.com/wp-content/uploads/2017/02/2301.gif) of hexagonal architectures, or possibly a functional map of Donald Trump's brain. Stopped reading after that point for some reason.
For learning, I would say start lower level, build a pure Jersey 2 application and see how everything fits together. Then move up to the fancier stuff like Spring Boot and Dropwizard. It is always good to know how things are done so diagnosing issues later isn't such a big deal.
The only interesting thing to happen to maven in the last decade is Gradle. That book is probably almost entirely relavent, with the exception of a few patch versions. Once you've got Maven figured out, Gradle is the next logical step, it'll cut your build time in half and your metadata quantity by a factor of ten.
It is unfortunate that he was elected by a group that wanted him to act like he has no fucking clue what he's doing then. 
&gt; it'll cut your build time in half Do you have a quantified reference to this?
Can't say. Admittedly I'm still a bit in the stoneage when it comes to knowledge about the various HTTP techs for java. I'm currently in the process of evaluation myself for a new project I'm about to work on.
&gt; Is Gradle really the next logical step? Gradle will be more similar to Grunt. however a lot of people object to an imperitive build tool because they don't want every project to be a discovery effort to figure out how it works. Maven is opinionated and declarative only. It also has useful features for a large organization with parent poms and archetypes that Gradle doesn't have. It really depends on your requirements. P.S. if you're coming from JavaScript trying to learn Java, check out JHipster.
Go down a RESTful path using JSON api's. 
Nothing I can really provide, and it's very dependant on project specifics. I have experience with two very large multi-project builds. The most recent I converted had about 10 sub-projects, and the time was cut about in half, the first I converted had around 150 sub-projects, and the time was cut my about a factor of 10. I know it's just anecdotal evidence, but it's enough for me. The Gradle developers are very serious about pushing performance with almost every release, which they do regularly. Maven hasn't seen a release since 2015, and I doubt they've made any significant performance improvements in a lot longer than that.
Haha, ignore /u/forsubbingonly These are [immutable collections](http://www.javaslang.io/javaslang-docs/#_functional_data_structures), basically any update to the object results in a new object, and the object before the update remains unchanged. That's why javaslang list doesn't implement JVM `List` or `Collection`, because the JVM mutating methods are incompatible with immutable structures.
I mean that looks cool, but IDK if I'd classify it as something every developer "can't miss".
But they could've just chosen another name that isn't ambiguous.
https://blog.gradle.org/performance-is-a-feature I know it's from Gradle.org, but Gradle has a lot of performance related features to speed builds, and can get a massive improvement in advanced projects. 
c'mon they put lombok in it and that's in 'java libraries you can't miss'
what exactly is your problem? btw /r/javahelp
Gradle is hands down superior to maven for people getting their feet wet. What would you rather learn, XML, or Groovy, an awesome scripting language that is 99% source compatible with the java language Gradle is really easy, very portable, and an incredibly good choice. The project has a huge amount of momentum and gets better all the time. Honestly, if it's educational only, it should be 100% Gradle, you won't just learn about Build scripts, but also about Java and Groovy. Learn Maven when you need it, if you ever do. It's becoming increasingly unlikely every day.
Spring is *very* modern. Spring 5 is going to support reactive programming. But if you hate it then go for Play + Akka, a friend told me that it is rather interesting 
Yeah I was expecting some profound insight linking OO design to the honeycomb conjecture and tiling ontological space... Though **it is** apt the name of a design pattern* all about badly using abstractions is itself a bad abstraction ;) ^(* design *peversion* is the better term)
Have a look at [JHipster](https://jhipster.github.io/).
It definitely looks like a diagram [straight from this thing](https://pdos.csail.mit.edu/archive/scigen/) - it's utterly meaningless!
Depends on what you are doing. If you are looking for a relatively simple api, Spark (the framework) is great. Vertx is great if you are looking for a more reactive style system or interested in event driven 'realtime' use. Dropwizard is a good collection of technology that allows for quick restful-like endpoints. All three are definitely capable of being a good foundation for just about anything you'd want to do, but with different styles and varying amounts of 'batteries included'. I personally avoid large clunky frameworks with excessive amounts of metaprogramming and annotations. Spring and Play both just carry too much baggage for my taste. Spring Boot, while nicer to set up than Spring, is completely unappealing to me as a 'framework over a framework' that simply hides far too much complexity. Some things may be a little easier riding on the back of these larger frameworks, but they are so opinionated and heavy that I just can't bring myself to use them. Admittedly, that's mostly just opinion and some bias against 'Enterprise' Java so take it with a grain of salt. If you are interested in something a little different but still on the JVM, take a look at Kotlin and some of its frameworks, [Awesome Kotlin](https://github.com/KotlinBy/awesome-kotlin#libraries-frameworks-http-clients) has a few listed -- wasabi and the coroutines libs are worth checking out. 
In production at work, we've built a large app with front end ReactJS being served by json REST API backend built on Spring Boot/Spring Data Rest. Productivity shot through the roof with Spring Data Rest, because it requires less boilerplate code. The only constraint we had - we had to package everything the monolithic way in WebSphere rather than following the microservices paradigm. At home on the other hand (as a side project which hasn't earned me any money yet), my preferred stack is VueJS, NodeJS, and AWS. I'm more productive in those.
I suppose they could have named everything `ImmutableList`, `ImmutableSet`, etc. But I suspect they were taking inspiration from scala's `scala.collection.immutable` and `scala.collection.mutable` which have same-named interfaces in both packages. Personally I think adding `Immutable` in front of everything also would just have been tedious. 
yes, sounds right. I have one project for all the JS stuff and one project with all the SPring rest stuff in it.
Gradle is far superior. Maven really ties your hands into a specific structure, which you can also use with gradle, but still have immense flexibility to handle one off situations.
sql, and to a lesser extent javascript \#enterprise4life 
I combine both the frontend and java build using [frontend-maven-plugin](https://github.com/eirslett/frontend-maven-plugin)
\\
[removed]
C, C++, Clojure Still looking for a good "systems" language (Rust's safety is cool but there's way too much magical syntax and complexity. Keep it simple &gt;.&lt;), and also want to learn Python - super versatile language. 
Read the classic books * Java concurrency (the train book) * Continuous delivery * The "refactoring book" Other than that, the Spring documentation and the Gradle/Maven manual are a must for your everyday job. Once you have finished with those, go to unit testing 
Groovy is a nice language to know, especially if you use Gradle and/or Spock. It is also the DSL choice of Jenkins 2.0
Java, SQL, Javascript, and I'm learning Kotlin
C, Matlab, and Ruby. I'm just a student - don't kill me.
Fluently: C#, Swift, ObjectiveC, SQL, JavaScript. Sort of know: Python, Kotlin, Bash, Delphi, VB,
It depends on your definition of "missing out on some important languages". To me missing out meant being stuck in the imperative mutative paradigm and being frustrated of not knowing any other way. So I've spent the last year or so casually exposing myself to the basics of clojure, haskell, scala - something completely different to java. I've felt like my overall approach to coding in any language has improved as I have a few different things in my toolbox now that I'd never have thought of before.
I'm leading up some projects using C#, Swift, Python, vue.js and some other stuff I forgot. My next training will be Intro the Psychotherapy because all I do is listen to people complain and the code gets written somehow no matter what.
I'd say it's worth knowing C, and trying lisp and small talk. It's worth doing a project in C where you manually manage your own memory. It's always worth knowing one level below where you are working. Lisp and small talk are very different in comparison, but it'll open your eyes to new ways of thinking.
In 2016 it was quite popular library (look at the chart): https://javalibs.com/artifact/org.projectlombok/lombok
The same would apply for a method `add`
Have you worked with Rxjava? 
Ah that it was
Professionally my progression has been c++, c#, vb, SQL, Java, Kotlin, Elixir The last two have been the most enjoyable by far. Kotlin is such a nice small step from Java, bringing most of the niceties of C# with compile time null checking, and great IDE support from Intellij. Elixir is one of the few functional languages that I could responsibly recommend using in a commercial setting. Simple readable immutable data transformations with a working toolchain for builds and dependency management.
Every answer is to use spring, when he said that he's not a fan of it.
this is the best example I have ever seen. Enjoy: https://github.com/iluwatar/java-design-patterns
They have even put a very extensive website before the actual patterns: http://java-design-patterns.com/ (This is the link I'm using instead of the above which is only the code part).
He asked: &gt; What did you will use ? So he's asking for personal preferences. 
&gt; it'll cut your build time in half There is a reason why people often do a "mvn clean &lt;task&gt;" instead of just "mvn &lt;task&gt;": it's a habit because build systems (yes, also Gradle) sometimes get it wrong and use old code that can lead to hours chasing a bug that isn't there if you're not careful. Secondly; in most 'long' builds it was never the actual compilation phase that was long. Typically it's the tests. And those aren't magically faster in Gradle as opposed to Maven. 
/r/javahelp I think those files are copyrighted, though, so we're not legally allowed to distribute them here. **EDIT**: on the other hand, a simple Google search gave me [this github repository](https://github.com/jpham247/Instruction_Exercises/tree/master/Java%20-%20Lynda%20Essentials/Exercise%20Files). I don't know if that helps.
I mixed intentionally java.* and kotlin.* for demo purpose. import java.util.List; import static java.util.Arrays.asList; import static kotlin.collections.CollectionsKt.map; import static java.util.Collections.sort; public class TLDR { public static void main(String... args) { List&lt;String&gt; list = asList(args); List&lt;String&gt; lowercaseList = map(list, String::toLowerCase); sort(lowercaseList); lowercaseList.forEach(System.out::println); } } - - - Java language can easy invoke any (non syntetic, non bridge) JVM method, therefore any Java programmer is free to use any JVM library. Use standard JVM collection may require minor object allocation and avoid code for "cast". Unfortunately Java requires prefix invocation for function (static method), therefore chain invocation is hard to understand: List&lt;String&gt; lowercaseList = map(asList(args), String::toLowerCase); sort(lowercaseList); // unchainable lowercaseList.forEach(System.out::println); and JavaSland provides a workaround for this lack. On other hand Kotlin allow infix invocation (using a some special notation), Kotlin code may be: fun main(vararg args: String) { args .toList() .map(String::toLowerCase) .sorted() .forEach(::println) } Plus: List in Kotlin is read-only, opposite to MutableList but unfortunately this doesn't help Java programmers
The expiration time is part of the token, the client can just read that and keep track itself
[removed]
Blacklisting tokens is an anti-pattern, if you want that functionality, you should use server-side sessions instead
Ths is the best book I have ever seen. Enjoy: http://gameprogrammingpatterns.com/
* Scala. Fuck yeah! * Bash. It's okay for what it's meant to do. * JavaScript. Whoever designed this language clearly takes pleasure from other people's pain. Kill it with fire. * Some SQL. Dat set theory though. * Some C. Don't like it, but it has its moments. * Some C++. C's horrid mutant offspring that should not be. Kill it with fire. * A tiny bit of Ruby. The type system sucks. * HTML. It's okay for what it does. * CSS. Good stuff, despite its flaws. * XML. Good stuff. A little verbose, but not as bad as everyone pretends. Contrary to popular opinion, namespaces are awesome. * XSLT. Too damn verbose. Versions 2 and 3 need more implementations. Useful, though, for stuff like generating website navigation menus. * XProc. Sometimes, one XSLT transform just isn't enough. * XML Schema. Too damn verbose. More complicated than it needs to be. Nice type system. * DocBook. The language itself is pretty good, but the processing tools are showing their age. Needs CSS support.
Do you find it hard sometimes to translate concepts from python to Java? As a JavaScript Dev who's only just started Java, I struggle with java's lack of functional capabilities (or my lack of knowledge of how to use them), eg closures, functions as variables and arguments, and so on. So that makes it hard for me to take something I've done in JavaScript and translate it to Java
Heard it loud and clear. Most of our stats classes are actually moving to R, and we have around 50% python adoption in Physics (not sure about other branches of science) However, it is still very much a necessity in Math &amp; Engineering departments - for coursework and stuff. (though much of what I do is probability calculation &amp; linear algebra, so for personal use, I could start learning python for that use as well)
Take a look at JSF, and combine it with PrimeFaces and OmniFaces. Best. Stack. Ever. 
https://jhipster.github.io/ uses Angular2 with Spring. Maybe giving an idea about the approach
Just a tip: English is the lingua franca of the open source world. If you want your project to be a success you really should have everything, documentation AND commits, in English. 
Programming languages: Java, C#, C++, PHP, JavaScript, Groovy, ActionScript. Other: SQL, HTML, CSS I've also used VisualBasic, Lua, Python &amp; C on occasion. In terms of programming languages features you're missing out on, C# has plenty features that I miss when writing Java code. For example: Null conditional operator, null coalescing operator &amp; extension methods just to name a few. C++ and C# both also offer manual memory management, which can be useful when performance is very important. Groovy also offers some of those features, but not all. As for the rest of the programming languages I mentioned, those can safely be ignored in terms of features AFAIK. Edit: C++ also has multiple inheritance, which is an interesting feature, though it can cause some problems if not used carefully.
the worst part was the language was not java
I like using [Pippo](https://pippo.ro). It is similar to [Spark](http://sparkjava.com/), but I find it more complete (different web servers, internationalization, route groups).
Agreed, DW has almost no magic yet it's simple to start and to plugin new stuff
Scala, C++, C, C#, Python, Javascript. Started working with golang recently. 
"Import" where? As a JPA model? You haven't really given much information for people to think on. Either way, if your database is large, you're guaranteed to have a bad time no matter which tools, framework and language you work with.
Please do it in English. And why not just use something like Roller?
while I agree that I could not make any sense of the site the guy has got &gt; 1000 github stars. 
Spring Boot behind the scenes. Front in React or whatever.
yes you're right, Import to my project as jpa model set. actually the database will not large but I wonder the best practice for large databese. thanks your suggests.
A bit of: PL/SQL, C#, C++, JavaScript, Pascal, Python, assembly
This thread went from "meh, nice but not Java" to "hooooly fucking shit this is exactly what I was hoping the OP would post".
Java, Javascript, Python, Scala, Haskell.
Languates that I can program almost as if it were java, probably just scala, javascript and C#. That I am fluent and could probably work on, include C (but probably not C++), python, Erlang, Basic (my first language actually) Languages that I can generally read the intent of the code and could probably write something with minimal effort: prolog, haskell, f#, vb, pascal, delphi
Practically everything on the [Monad page](http://java-design-patterns.com/patterns/monad/) is wrong, starting with the fact that none of the classes shown are a monad.
C forms the foundation of most modern languages, so knowing basic C makes it easier to learn languages derived from C like Python or Javascript. Of course, if you already know Java, you've pretty much covered the basics. One advantage of learning C, however, is that you also have to learn memory management. This forces you to consider your design choices more carefully than compared to other langs where memory is managed for you and the impact of your decisions are not as apparent. From there you can go on to more advanced languages like C++ and the higher derivatives.
&gt; eg closures, functions as variables and arguments, Java 8 has that. Not sure I understand. 
- C/C++ - SmallTalk - SQL - LISP/SCHEME - Pascal - Assembler (68k &amp; 8086) - COBOL - Ruby - Perl - BASIC (including old ones and Visual Basic) - A couple of stored procedure implementations - Other specialty languages that nobody would remember anyway I'm of the opinion that the language is less important than the skills. You can always learn a new language/syntax. It's being able to create useful abstractions and avoid common pitfalls that's more important. 
Kotlin, Groovy and Python. 
A better question is why are none of the "real world examples" actual code that you would ever write. A good guide on design patterns would take its examples from the programming language's standard or commonly used libraries. 
The Greatest.
It depends if the client can handle you not responding. If it can handle that, I would return a 409 or 422 upon receiving the second payload
Good for him!
I think it's fine. It's not supposed to be anything to help you really understand the Stream API. That would probably take days worth of lectures and practice. It's just a cookbook, with simple recipes. It met my needs perfectly. Sometimes I just want to see examples of things being used. The semantics and syntax, etc.
He is such a good example of what you can archieve if you really mean it! Hats off to this great man, who single handedly helped approximately [118.4 million people](http://stackoverflow.com/users/157882/balusc) as of today with his second to none JSF knowledge! 
Every once in a while I run into an issue that makes me scratch my head, but it usually comes down to me having messed up syntax somewhere in the translation.
\0/ 
Idempotency is the cure, here. That is certain. This is really part of the problem. This system is not designed well for this sort of processing. These calls are not idempotent, and thus subsequent calls return a completely different response. So when the message gets duplicated in transit, we're SOL. The first transaction gets processed normally, then the rest come in and generate a totally different response, and now it's a race back to the client. :/ That's a good read though. Thanks.
Determining duplicates is easy. What to do afterwards is not so much given the strangely designed system. To be fair, it's old: 30+ years or so. &gt; You could do rate limiting, just drop any connections except 1 per 30 seconds per IP or something. That's easy enough. The downside is that if someone fires off 5 different requests, it'll drop 4 of them. Also, it may not be clear why you're dropping (although if they are spamming messages, they probably aren't being real careful anyway). This is what I was trying to setup a test for, but can't seem to figure out how to do. In theory, it might work if we only drop requests that we know we already replied to. The situation is that we are receiving multiple requests from the same client, and since the call returns a different response after the first, it's a race back to the client. We want them to get the first response only. Hence my really bad idea to drop the other requests. :P
Idempotency is nice, but not necessary if the client can handle an error, then it does not matter much if the response for duplicate requests is an HTTP error code or SOAP fault - I like SOAP faults more, because they are more expressive. Also if I see simply '500 Internal Server Error' in the application log for webservices, I am not sure if the error handling was implemented right and there was no response body (because the backend if fucked up) or if the response body was ignored (our bug with error handling).
Well maybe there is a reason for that? Also Spring Boot is not MVC, and is something newer like he requested. I gave other alternatives as well 
I have used to dozens of different languages to build or modify a production-ready thing many, many times. But out of all of those, most of my experience, knowledge, training, and recurring work is in Java, C, C#, JavaScript, PHP, and of course all the variations of SQL. If you want to know more about Java, learn other languages. I know that sounds strange, but seeing things from a different perspective will often times shed light on something that you thought was completely unrelated. For example if you learn C, you will need to learn how to manage memory properly; something we take for granted in Java. If you understand more about how memory is managed in a lower level language such as C, you'll better understand how Java is dealing with the memory issues for you, allowing you to write more memory-optimized code in Java, should you need to.
If you are doing web stuff with spring-boot you are almost certainly using spring-mvc. 
&gt; The BigLots one is almost 10 years old. Quite a few are ~5 years old FTA: &gt;The community has been publishing successful Java EE adoption stories at a regular cadence for **a long time**. Some of these stories are curated here. "Quite a few" are about Java EE 7 which is the current version.
bash and python for debugging and glue-code. I'm a backend server developer. Any work I don't do in an IDE I do in a terminal.
That is a thing of beauty. Thanks for sharing.
I'm sorry, but he's one of the most insidious people on SO (along with Bill the Lizard.
You are not the first person I've seen make this (or very similar) claim. Will you be the first to actually give an example of his behavior that you find so poor?
Thank you
Thank you so much. It helped.
Please, don't do *theNewBoston*. They are among the worst Java courses in existence. They don't adhere to standard conventions, use horrible variable naming, don't use standard practices, and in general don't teach proper Java programming. Take a look at the **sidebar** of **/r/learnjava** where you find really excellent tutorials in the **Free Tutorials** section. In particular, the MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html) is one of the best available resources. 
I am asking you, as moderator of this subreddit to remove your mentioning and links to *theNewBoston* tutorials as we want to encourage people to learn from the *best*, *proper* resources and not from someone who violates basically every standard. BTW, you're in the wrong subreddit. /r/learnjava is suitable for your post.
This article doesn't cover parallel streams enough. For instance, why using parallel streams is a bad habit, what is under the hood, what happens if you create parallel stream and invoke findFirst method, and so on...
I'm sorry everyone. Sometimes I say really stupid things in order to sound like I am smarter than other people. I know it's counterintuitive, but I have a very fragile ego and this is one of the few ways I can feel good about myself.
It's the jist of JWT, their only real strength is that you don't need to keep track on them on the server-side, if you want the ability to blacklist them you need to keep track of the blacklisted ones, which defeats the purpose and you're better of using server-side sessions. regarding your comment about passing around, you can still do that with server-side sessions, the server can just generate a session object with a UUID as it's ID and then the team members can pass that ID around, it behaves similarily.
This fits, if anywhere in /r/programming but not here as it has absolutely zero to do with Java as such. Please, pick the appropriate subreddit for your posts. **Removed as off-topic**
I meant responding accordingly by accepting the payload. Thanks for the clarification.
Already being done https://github.com/kamranahmedse/design-patterns-for-humans/issues/10 :)
Well, half of them are Google bots anyway :)
SaaS (Software as a Service) is a service, where you host your software and provide that to your clients. So anything which will provide a thin client and host the business logic in a remote location will count as SaaS. Since you already use Corba, Webstart, and Flex I do not actually see your problem. Just replace the access layer with something unified so that clients can access everything easily if they paid for that. IntelliJ is a bit different model since they provide you with a fall-back license which lets you use the current version permanently if you have subscribed for 12+ month. Converting business models are business decisions and are highly dependent on your situation and what you want to achieve. Think about reasons why you want to change the model which makes the life of your client easier or at least not worse. If you will provide a better service for the same or less money they will greatly appreciate it.
From my experience learning coding does not help a lot if you are a beginner at Minecraft modding since you learn most by imitating the underlying system. If you do not comply to that your mod will not work with Minecraft itself. You can not code cleanly and expect it to work with Minecraft Forge e.g. because the "API" is not intended that way. Yes, understanding the language constructs help but not much stuff like patterns or best practices. So I would not waste my time on 2 and 3 besides obvious reasons listed by the other commenters. JavaFX tutorials will not help you since they use different technologies. You also want to fit your GUI into the Minecraft world so "normal" teachings will not apply to that. LibGDX is a nice library, but not applicable for Minecraft modding. Rather than that, I would look into OpenGL books or even better LWJGL.
Its never easy working with legacy code. I would say start a new project if the code base is small, or update the existing one if it is large and add in spring boot or equivalent. Get mvn setup. Get jenkins working on it. You are now 1 step closer. Password issue need to be addressed immediately. Introduce some high level testing, it will be difficult to unit test everything. Start with end to end integration tests and slowly introduce more testing as you go. Any new features should test the class they are part of. Next step is to use your tooling to help remove dupe code, intellij will highlight all dupes. Start thinking about removing these. Fix the non critical issues, exceptions, jsp/servlets. It'll be slow and painful to get your test coverage up to a good level. Also https://www.amazon.co.uk/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052 
Inheritance and composition aren't mutually exclusive...surprise?
If it's small rewrite what you want with the same signatures. If not RIP in pepperonis I'd talk to your boss about allocating hours to it.
BalusC has been a great help to me as well. Congrats!
Are you new to the internet? You should consider one and only one thing to be the best in every case, no matter what !
Oh your right how could I be so foolish. I need to choose between OOP and functional programming concepts ASAP!
I think this just cements the idea that there's zero attempt to engage with the community.
Great idea, but now Im not even using booleans. [Here](https://hastebin.com/hutejejika.cs)'s the code where I reduced the size to 587
while(s=s) is probably not what you wanted, s==s. I think s&amp;s would also work just fine.
I guess i wasn't very clear about my intentions haha sorry, my bad. I want to learn the java language as a whole not just for minecraft modding that's just want i want to be able to immediately mess around with. 
A couple of things to bear in mind: 1. It can be difficult to make the business case for refactoring, and certainly I think that a months-long refactoring project is probably not going to happen. That's almost certainly not why you were hired. 2. If the "atrocious" code works, and you introduce bugs in the process of refactoring, then you will not be thanked. First off, the password issue is an urgent security issue, no doubt about it. There's a clear business case for solving that, so get right on it. For everything else, you might have to take the "leave things tidier than when you found them" approach. So, if you're given the job of adding a new feature and you spot (for instance) some duplicated code in one of the classes that you'll be editing, then do the refactoring and commit that change before you start on the new feature. Though bear in mind what I said in point 2 above - if you're going to refactor, then make absolutely certain that you've not broken anything.
So just out of curiousity, ignoring the rest of java, what would you say the best way to learn minecraft modding is?
For people who do not know how to become a Java Champion * Title: Devoxx 2015: How to Become a Java Champion * Provided by: Arun Gupta * Source: https://www.youtube.com/watch?v=otMc_3Dz3hU * Duration: 7 minutes and 3 seconds I could provide a TL;DR but I think this would skew the message.
Inheritance was never necessary, it's a form of static composition combined with implicit interface implementation. But it's handy sometimes, when used with care. My rule is: don't inherit across packages/libraries, but within a package/library it's often a neat shortcut. I don't inherit across libraries because inheritance can break encapsulation, and is inherently more fragile.
You should include a license so I can figure out if I can use/modify for work. :)
That's fun. I bet if you were rewriting in javascript (either nodejs or from the browser) it would even be smaller.
Out of interest - how many people still use mybatis?
Excellent! My current project at work involves docker and my team is figuring out how much we need to write ourselves vs what we can use/extend/support from open source. We are a very open source friendly company and are even considering that if we do end up writing some of it on our own, it will be made open source. If we end up using this we would definitely contribute upstream.
Cool, thanks exoplasm :) Good luck &amp; keep me posted if I can help.
To get a mutable list. In case I wanted an immutable list, ImmutableList is much better anyway.
Provide a default param value when a param is missing or invalid. For example with pagination, two params might be the index being displayed from (0) and the number of records being displayed at a time (10). Try to get the param, and when it fails assign a default. The user still gets a positive response and a hacker has no more additional information to work with. You still want exceptions to bubble up when things go bad (you can't possibly program for all cases, like out of memory errors), and a custom 500 error page can then hide a potential attack vector from a hacker while still allowing you to get trace debug info from the logs. *spelling
Don't do it, unless you need it. Different speed of moving parts, independent teams, decoupled parts, etc.
I don't want immutable lists. Especially not those that are indistinguishable from mutable ones. I don't like UnsupportedOperationException at runtime, I hate compiler not being able to tell me.
But you're in Java, so we don't have immutable lists. I'm not arguing that we shouldn't have that though. In the meantime, immutability is important so we can at least guarantee it using Lists.of() or ImmutableList.of() (which has the exact same UnsupportedOperationException semantics). 
ImmutableList's add, addAll etc. methods are depricated and the type is a big hint unless they are upcast of course. You already have `unmodifiableList` if you need immutables. It was an ugly decision to further dirty the collection interface for a quick makedo solution. They should have made `List.of` return a mutable list, create a branch with immutable collections, depricated `unmodifiable...` and replaced them with converters from one to the other. That would have been clean and nice. Now we have `List.of` that can hardly be changed / depricated and we will never gain a clear separation. 
&gt; It kind of feel like the hype for microservices is slowly coming down to earth. No, it is not. Every second article is trying to shove microservices down our throats. Every second IT consultant is jerking it to microservices while also trying to convince the industry that microservices will solve global warming and world hunger. Every second blogger thinks he is a messiah who will change the world by speading the word of microservices. No. Microservices is NOT the next big thing. It has it's own place in software development but it is not the universal solution to every development problem like most of the people preaching microservices seem to think.
My answer would be spring-mvc if he didn't blacklist it in his question
&gt; Zen and the Art of Unit Testing I can't understand why this is the article title, when there isn't even a pretentious attempt to link Zen to unit testing later on :P
Quite nice overall. What I dislike are the multiple assertions in one test and the usage of ``setup`` and or ``teardown`` methods (better use separated sut factories!). What I dislike concerning the context is the design decision to use DTOs for exchange between the application layer and the GUI. I would prefer real DDD and therefore using DTO for interactions with the persistance layer. But that is of course not relevant for the main topic of the article.
Aptech Computer Education trains you for showing up for worldwide confirmation exams held by significant IT company like Oracle, Java, Microsoft and Red Hat. When you pass these exams, your name shows up in the database of the ensuring company, in this manner building up you as a specialist in that innovation. IT bosses lean toward procuring experts with such confirmations. Likewise, confirmed experts appreciate better pay rates and profession prospects.
Be aware of your attitude. Don't just say "oh, this is horrible!", say "I understand you did it this way back then, but currently this way it might be better, because of this and that" This allows other people to form their own understanding instead of being told how it is. This helps a lot in getting the thumbs up to go ahead and start refactoring. Show results: make a test, purposely introduce a bug and let the test catch it. Show how build tooling helps build the project more easily. It also helps if there are other people backing you up.
with a username as throwawayJDK8 I think you might know the answer already 
Browser plugins (if you really mean what usually are called *extensions*) are programmed in Java**Script**, not in Java. Java and Java**Script** are entirely different languages despite their similar name. You might have better luck in /r/javascript. Your post would even have been wrong for /r/Java, because programming related posts should, as is clearly indicated in many places here, be posted in /r/javahelp.
What I meant was only that the annotation processor generates Java files, those still have to be compiled. It may happen before a compile step. I tried Gradle and IntelliJ, it was horrible. Maven seemed fine (Sadly Maven is an obsolete buildsystem lacking any modern feature of the competition and not fixing most major bugs reported 5 years ago). But Lombok seems to work easily without even such worries, because it does not generate java files (unless you want it to).
For the record it's not my work. thanks for reviewing, I actually agree with most of your comments. 
I'm not GP but to answer your question: the tradeoff is in clarity when tests fail. Which assert failed? Which other asserts after that one would have also passed or failed? That kind of thing. At the end of the day, you can quite easily dial in the amount of strictness for this rule when applied to a given project, but just be prepared to receive vitriol from purists. To help yourself, and often to really tick off the purists ;), you can also look into multi-assert libraries, approval tests, etc. which can help you keep the failure feedback level high and in some cases increase the level of feedback while actually reducing the number of asserts you have to write.
Looks nice and clean. Have you considered testing the timing for your different algorithms and structures to show how they are efficient in different ways? Assuming you haven't ever done that before. 
int ALPHABET_COUNT = 26; I think you will find your Trie to have pretty poor performance in non-english languages...
The difference with List.of is that since no-one has access to the wrapped list the result is effectively immutable.
Requery/requery on GitHub may fit the need nicely
Boilerplate code removal - for logging, exception handling, circuit breaker, Spring bean initialization for WS/REST client...
`@Logged`, while writing an internal Selenium test framework, for marking various methods to be logged in a special way - screenshots, timing, results written into a report etc. It worked really well, but had I written it today, I would instead use a decorator pattern with a delegate. It might be a little bit more code and hassle with edge-cases, but it would be less magic, no proxy objects (which are decorators in disguise), no reflection. That said, it does not mean annotations are not useful - the usage we had was a great enhancement of the framework. Nowadays I'm using lots of external annotations that became almost-standard by this day. `@NonNull`, `@VisibleForTesting`, `@GuardedBy`, `@ThreadSafe`, `@Inject`, `@RunWith`, `@AutoValue`, sometimes the validation annotations... They became an essential part of our tooling. So if you're writing a tool for coding, a framework, perhaps, you might look at what a new annotation would do for you.
A project I worked did dependency injection with Guice, custom binding annotations let you do some really slick stuff with Guice.
Absolutely! It's super easy to forget you need to call the delegate under you, or to construct them in a wrong order, or to forget you need to order them at all etc. Annotations are often magic, but magic that works wonders if not overused.
I'm currently writing my own Scheme R5RS implementation in Java. I had a lot of boilerplate code in procedures: check arg size, check arg types etc. So I decided to replace that all with @FnArgs annotation, that specifies minimum number of arguments, maximum number (procedure may be variadic), argument types etc. And I just check that annotation in one place - Evaluator. For example, procedures that compare numbers are annotated with: @FnArgs(minArgs = 2, mandatoryArgsTypes = {SCMClass.Real.class, SCMClass.Real.class}, restArgsType = SCMClass.Real.class) Which reads as: we have to have at least 2 Real numbers to compare, but can pass more numbers if they all are Real. It works fine, I got rid of tons of boilerplate code. But still not sure whether to keep it or replace with abstract methods or something else (have concerns about performance).
Can you expand on what you did for logging?
Generally, the whole application logging was done using aspects - for both inbound and outbound calls - on endpoints and adapters/clients. Method parameters (request) and a result (response or exception) were logged, with some metadata like duration, caller ID... so that OPS could parse it and make graphs and alarms, and we could diagnose issues. 
I had to do some custom marshalling for some function parameters, so I stuck an annotation on them to tell the marshalling what needed to be done.
One mate wrote a lot of them for some real business logic. We all hate him now.
You could solve a lot of problems by using a step-builder for those decorators, and adding checks to some of your classes to ensure it was actually used (my custom RestTemplate checks that all required aspects were called, using a threadlocal). But a use of a delegate still leaves room for screwing things, e.g. logging, and nobody notices a broken logging until they need it. What I would want is to ensure that all method parameters were logged. And I can think of only one way to do it, to create a new dynamic proxy for every invocation :(, so that I can do: AdapterDecorators.useAll().on(paymentAdapterBean).charge(request) 
I absolutely love jOOQ. It pays to work with SQL in a type-safe way.
Your trie has some constants that are missing the static modifier. 
CALLATE!!!!
Yeah. I used it for generating custom documentation for an HL7 service I built. It was specialized documentation for the integration people. Also, I used it for securing our web app by annotating stings which were sanitized for XSS in different ways. Normal strings, html, xml or json. We have a sanitizer to check whats allowed depending on format.
A test specification for a TestNG data provider to generate permutations based on. That way the test method could be invoked with the cartesian set of all possibilities. A listener could then inspect the params to run common validation code to ensure data integrity. @Test(dataProvider = "caches") @CacheSpec(population = { Population.SINGLETON, Population.PARTIAL, Population.FULL }) public void put_replace(Cache&lt;Integer, Integer&gt; cache, CacheContext context) Due to all the variations, this results in about million test executions for 550 test methods.
Frequently, they are somewhat required if you wish to use CDI Producers. I enjoy having clean injection points and encapsulate the complexity elsewhere. 
Don't worry, it will not help you. Here's the deal...you're talking about syntax. Do not try and understand the syntax until you become more comfortable. Look for patterns and if you do not find any after searching, ask questions. The basics are the building blocks to programming. Variables, loops, arrays, etc. - and eventually these get broken down into even simpler forms, primitives. Google and stackoverflow are your friends...and also a solid IDE...which will help with syntax. Personally, I like netbeans but others might recommend eclipse, etc.
25 years coding. Have professionally done Ada, Asm, Awk, Perl, C, Obj/C, Swift, C#, VB.net, Java, C++, SQL, COBOL, basic at age 11, pascal, ruby too- probably a few others in there too...
Hibernate? 
[removed]
Check out the CDI spec and Weld. You'll write custom qualifiers a lot. I've also written custom annotations for a simple dependency injection solution. Also for rules for marshalling, hashing, and stringifying complex jpa object graphs. Basically anything that can be benefited by having meta data.
I've used my own annotations before when working on a plugin system for a library, but that's a rather common use case. In work projects, the most interesting non-standard and non-3rd party annotations I've seen have been for home grown object mapping classes. For example, marking a POJO for how to map a CSV file. I've also used them to implement various Spring Boot magic around configurations and stereotype annotations and such, but that's almost like using 3rd party annotations. Same goes for writing custom bean validation annotations.
I wrote a super-nifty mechanism that enabled simple domain entities to expose their own CRUD web service endpoints, including schema definitions. This was a *long* time ago, mind you. It was the early days of XHR, and being able to just declare a business entity and automagically get master/detail UIs and CRUD operations created was considered black magic.
BigO of these algs are all known. These aren't performant reference implementations, so the exact benchmarks don't really matter.
anything AOP related. logging is a prime example which contains no business logic.
We have a few annotations for cross-cutting concerns in our Spring microservices: mainly logging and updating the health state of a service. So if it can't connect to another service or the storage back-end the health state will indicate it being unhealthy. 
/r/javahelp and /r/learnjava are more suitable subs for these. But please ask questions people can actually help you with.
&gt; Learn to create RESTful Java microservices using **Spring Boot** and deploy them to the Cloud. I laughed :D
We have custom annotations to indicate Spring profiles, e.g. @MockProfile that contains @Documented and @Profile("mock"). This way its easier to find profile specific code - by type instead of using text search. 
/u/gliph is correct, these aren't "benchmark-ready" implementations, the intention was simply for me to practice the algorithms. Thanks for the comment!
Thanks, just fixed it!
Don't. Next MOOC might be about running Apache Cassandra database on Oralce Cloud... who knows? It is an open cloud. Developers can run whatever they want. :-) More info at https://developers.oracle.com
You'd think that Oracle would use Java EE in a blog about microservices. 
Mostly aspect-oriented annotations. Something like AB tests that are driven by config property and used with `@EnabledBy(propertyName)` or security checks (using spring's `SecurityContext`) with `@IsAdmin`, `@IsAdminOrSelf` and similar.
I have, quite recently. I was working on an implementation of some standard which uses SOAP to model some database-ish queries, so I made an `@Query` annotation for my query implementations and an `@QueryParam` annotation for the fields to hold values of specified params. Some params could have multiple values (Sets or Lists), some were required etc. Then I used reflection to map the SOAP params to my Java params and checked fields annotated with `@QueryParam(required = true)` if they weren't null after parsing. I'm also thinking about writing custom `javax.validation` annotations for specifically formatted fields, otherwise I have to copy the same regex over and over.
Obviously, you have more than one problem and reading and interpreting information is one of them, because otherwise, you would have noticed that you're in the wrong subreddit. Your question is better suited for **/r/learnjava**. The **sidebar** of **/r/learnjava** has a section **Free Tutorials** where you find top quality free tutorials that will help you catch up. ---- Why did you wait too long to get too far behind? When you have problems, you need to attack them right at the start, not when it is way too late. &gt; Am I screwed.. ???? Basically: **yes** ---- If you need **help** (not doing your assignment, nobody will do that), you should post what you have in **/r/javahelp** as is **clearly** outlined in the **sidebar**. Before posting there, make sure to **read**, **understand**, and **follow** the [**Posting Guidelines**](https://redd.it/48eykt) there. **Post removed**: Learning Java help/Programming help
We had a consultant with some really stupid ideas sell our manager a lie and implement a genuinely piece of garbage protocol. Then one day that protocol (a flat map within another tree map) had to be mapped to another crappy protocol (this is why I no longer work for banks. Stupid, stupid people). Anyway. Doing it by hand was nigh on impossible. However, an engine could do the job just fine. All we had to do was tell the engine what field in the first protocol to map to what field in the second protocol. I forget the specifics now but the annotation was something like @Mapped(key="other protocol key for this field) I liked it because anyone who looks at the Class later can immediately see where the fields map. The downside is reflection is complicated and the actual engine wasn't as graceful as I would've liked. But all in all, MUCH better than writing a conversion layer by hand.
Not much additional content over the Martin Fowler article on the same topic. Calling it the "Art of" without more detailed coverage of its usage, edge cases, and more complex implementations is a bit much. 
Validation (JSR-303) annotations, mostly
how do you determine what's awesome and what's not ?
One of the main benefits of Drools that we rely on is that rules can be written and changed outside of the main codebase, loaded and compiled dynamically at runtime, and requiring no redeployment of the core software.
On the other hand, SQLite supports CTEs...
In my experience (several years ago) that ended up being a disaster. Rules ended up having no version control, no unit tests, lots of duplication (even worst, almost duplications). How did you avoid that? Just discipline and professionalism or there are better tools now? Edit: me no english
Not in mine anymore. :&gt; … Ok. No. It was only his decision to change company. I'm at least happy that I've convinced him it's a bad idea.
Not bad. Not bad at all. Let's go live.
add a publisher as a property event-listener. In the past, I used something like Guava EventBus for that.
Here's a simple POC kinda implementation that I did for access_token, refresh_token, invalidate_token and logout scenarios using JWT (but its in JavaScript though!): https://github.com/naveenwashere/jwt-oauth-rfc-flows/blob/master/Server.js I tried to prove a point that JWT can be used instead of OAuth tokens for auth. Usually JWTs or tokens in general are supposed to have short life time. Whenever, a token is found to be expired and the server returns a 401, the client SDK typically fires a request to the refresh_token endpoint such that a new token is issued. According to the JWT documentation, if the token is expiring at 4:00PM, lets say, and you fire a request anywhere between 4:00:01 and 4:00:59, you should still be able to go through since the system allows you a delta time before the token is completely unusable (or something on these lines). Its configurable too. The automatic requesting of new token via the refresh_token endpoint is coded into the client SDK, in our company. I'm a backend guy, so I am not sure if its the right way, but what I understand is that, the moment you get a 401 even though you pass a token, then it means that its time to request for a new token. The sample JS implementation I attached above, does both signing and encryption of the token. So, the tokens look huge once they're converted to base64 encoded string. Hope it helps.
To separate commands from queries is a good principle. If you disagree you should consult other articles for that.
To be fair, wasn't Apache Geronimo just Tomcat plus libraries to make it support the JavaEE spec? So, with Apache TomEE gaining popularity as a lightweight JavaEE server, Geronimo (which was never really popular) not being updated anymore isn't really a surprise.
Thank you for the heads up. We realize it is not a self-promotion platform, it is a place to share industry specific content with like minded individuals. We're just here to share great content written by industry experts, not to step on toes. 
Still, you cannot just promote content from a *single source* without any other participation. You need to post *more* from other sources than from your own, and we want active participation in threads. Your domain is well known in the Java community and thus already gets lots of recognition.
Put Oracle SOA suite on there and you can go take a vacation and wait for it to come up.
To control user access to functions. The annotation takes a value of a permission name. If we annotate a function with it then the system check that the current user has access to the function before trying to call it.
In my case about three minutes to start two instances, an Administration server with Weblogic console and Fusion Middleware management deployments and another with quite a bit of webservices which belong to Oracle BIEE. The backend C++ binaries which implement the actual business logic are started afterwards and boot up in about 5 seconds.
use lots of websphere and ibm products here, I'm no stranger to taking vacation while software starts up
which "style" is more professional: ....someMethodName(final String type, final int secs) or just ....someMethodName(String type, int secs)
Custom annotations for unusual JUnit tests. For example, we have some unit tests whose entire purpose is to make sure the open source libraries we depend on don't leave behind too many temporary files. These tests are valuable but they fail about 10% of the time if the OS is doing something else at the same time -- so we have a special @FlakyTest method annotation which lets a custom test runner know that, if the test fails, it should try running the test a few more times.
there is also the `BiMap` from Guava [1] if you need to switch around in a 1 to 1 mapping context (bijective) --- [1] https://google.github.io/guava/releases/19.0/api/docs/com/google/common/collect/BiMap.html
&gt; custom marshalling Same - extra annotation for Jackson to tell it if given type should be additionally wrapped/unwrapped to conform to the API format. 
There is no library for that because JavaFX already provides that feature via some lines of code. 5 seconds google delivered that: http://stackoverflow.com/questions/24005247/draw-cartesian-plane-graphi-with-canvas-in-javafx note the usage of Java 8 function feature Plot plot = new Plot( x -&gt; .25 * (x + 4) * (x + 1) * (x - 2), -8, 8, 0.1, axes ); You might need to tweak the code if you require better performance for less visual impact.
Everyone can become a Java Champion, these days.
Check /r/java on a weekly schedule and copy the links which are voted positively
Can you be more specific as to what you are trying to accomplish? If you are looking for a way to detect when a property changes, you don't have to use the javafx.beans package at all. I have successfully used the standard [PropertyChangeSupport](https://docs.oracle.com/javase/8/docs/api/java/beans/PropertyChangeSupport.html) class in the past. Not sure if this is what you want.
That is the whole point. Read up the CAP-theorem. We trade consistency for partition tolerance (and eventual consistency). Depending on your business case, you do not care about ACID. Imagine Facebook: as a user, do you really care if a post of your friend is displayed 5 minutes later? Another scenario would be banking: rather you want to have a failing transaction than an incomplete transaction (CP). 
As far as I know, Geronimo wasn't Tomcat + libraries. I think Geronimo was much closer in architecture to JBoss, which both used essentially Tomcat as their Servlet container but pretty much had their own kernel and server internals and everything around that. TomEE is in fact Tomcat + libraries + little bits of glue code. So the difference is that in TomEE Tomcat is the server and the Java EE components are added via libraries, while Geronimo was its own server that used Tomcat for the Servlet container. 
&gt; Can you expand on what you did for logging? Lombok supports log initialization easily too. https://projectlombok.org/features/Log.html 
There are a few languages that it would be useful to at least dip your toe into, that would probably give you a better understanding of computer science in general: SQL because it's a totally different way of thinking and will be useful, Python or some other scripting language (add useful scripts to your text editor!), and assembler, to see how low level things work. 
Any example? Thanks!
Yeah you don't have to rewrite your beans, that would just be annoying. :) However, [there is a way to get the best of both worlds](http://stackoverflow.com/questions/23522130/javabean-wrapping-with-javafx-properties), if you still wanted to take advantage of the JavaFX binding features. But you don't have to do it that way. You can always register your own change listeners and update the UI controls "manually".
What do you think is the best way to update the UI Controls manually?
For cross-cutting concerns mainly, validation, logging, access control kind of stuff. Recently, I've written one for filtering records in some parts of the system to display based on user's role and customer-related info. Combined with AspectJ and some minor changes to the SQL queries (which were structured quite nicely to begin with), the solution was quite clean. It could have gotten very messy very quickly had I needed to pass some parameters all over the place. 
Some companies require sensitive data to be stored encrypted in the database (I don't know why exactly, I've just seen the requirement). Perhaps so a developer/user with access to the database can't just dump the data and walk out of the company with it, I don't know. If the encryption key is accessible as well it's not much more than snake oil, but that's another matter... 
It uses it for styling throughout all of its components - it's not the functionality I take issue with, it's the use of jquery uni for styling.
I see, premium themes like Morpheus do not use styling of it though, they use sass based custom theme apis.
Yeah some for CDI and EJB interceptors, and one or two for other stuff, we needed some automated way to find what fields on an entity should be searched using hibernate search, so I created an annotation to mark the fields, and code to scan the field names so it would set the search fields depending on the entity. I also wrote some for CDI event qualifiers 
On top of them.
I dont think its the client's responsibility to keep track of the token expiration. Not sure if its supposed to be that way. At least in the case of a JWT, the "issuedAt" and "expiresIn" data is part of the token that is signed and in some cases encrypted. So, I dont see how a client can handle token expiration if it does not know of a way to access this info. In JWT, whenever a token verification is happens, one of the steps is to check of the token's expiration. If the token's expired then it results in an error. This happens on server side. The JWT spec specifies that the token has to be short lived, typically 15 mins or so! Since JWT tokens are generated and issue at the server end (it may be your API gateway or your application server itself), all this can be done at the server alone.
I guess it's coincidence that one of those is yours?
Why is it in the java-section?
Yup, snake oil. There's very little if any value in doing this. Disk encryption will cover every auditing scenario (hipaa, fedramp, etc).
You mean it's encrypted in this manner? Full disk encryption will cover all hipaa requirements. Policy/procedure would probably be a better route to take for your use case. You just need some type of control or accountability on the access to that data. If you're encrypting stuff in the db in this manner my opinion is you're doing things wrong. Just to lend some credibility here, i worked for the leader in hipaa ehr auditing systems and led the effort on their soc2 audit. Now I've migrated a cloud based system to aws govcloud and am currently going through a fedramp audit. I feel like I'm qualified to talk a bit about security and to me this design is retarded.
Got both, read both, I want back to SQL.
At the end of the day it felt like I had to put more effort in setting up Entity graphs and fetch types in order to produce the right queries than just writing plain sql.
Exactly. In fact, it's even better if you combine them so that: - you use Hibernate for write-based optimizations: batching, optimistic locking - you use jOOQ for advanced querying Mix and match, for the win!
I wonder why you haven't mentioned [Transparent Data Encryption](https://en.wikipedia.org/wiki/Transparent_Data_Encryption). Isn't it good from your perspective?
We're not subject to HIPAA, our requirements are far more stringent, and the approach in the article falls well short too. I was merely addressing the statement that there's no need to encrypt data at rest beyond full-disk encryption. Full-disk encryption is wildly inadequate for two reasons: 1) It would be a single key to decrypt all data, as opposed to an approach where we can offer cryptographic security at a much more granular level, and 2) it would require us to have permanent access to the key, which is a dealbreaker. Thanks for telling me we're wrong though. I'll be sure to get the biz dev guys to remove that clause from all our contracts since we don't need it. All our customers will understand. 
Yup .. Wrong section :(
Create your own projects. For instance: - Todo list - Budget program - Home automation
Sorry, I just meant this guy's example was wrong. Certain implementations can have merit but my point is that it always seems pretty pointless because the engineers they're worried about taking the data are also the ones implementing these extra protections in place. I've seen these kinds of implementations before but there's pretty much always a way for the person to get the data. If they have access to the data to perform their job duties it just is what it is. Process and procedure, or governance, is usually what's required to meet certain requirements. Encrypting data like this is just a "feel good" measure.
That's the point. We *don't* have access to the data, short of deliberately writing actual production code to leak it somewhere (which would never pass review, naturally). If I was given full and complete access to the production database, there's nothing I could do to access a single byte of patient data, even if I wanted to. I wouldn't have the keys, because no person or system in the company has the keys for me to steal. With full disk encryption, if I can connect to the database, I can read anything I like. The encryption doesn't help at all. 
I'm familiar with Spring and OSGi. Is hibernate really important for a Java developer? 
Excellent release notes! Can't wait to upgrade!
NinjaTrader is actually one of the options I am going to look at for that reason. But I assume it won't work because I need data from different resolutions at the same time (like the daily and 1hr data). I hope I am wrong. I've also done the Web Front end solution before and I find it way more tedious than simply building a JavaFX UI, for instance (everything but their charts is pretty decent). I find testing in a webserver much more tedious. But I will look into that again. No burning reason except I have a ton of code I have written already in Java that I can use with this other project/ Thanks man
I've found that Hibernate gets in the way more often than it helps. There are some useful abstractions, but at the end of the day I feel like writing SQL queries by hand is usually both a simpler and a more performant method (given an equal amount of effort with performance tuning with Hibernate).
Wow, that's an unfriendly welcome to the community.
We settled with Jooby. Our selection criteria was it has to be as simple as SparkJava but support asynchronous I/O. Jooby is Netty based and the framework is excellent on it's own nonetheless it supports very easy integration with Akka, RxJava etc. I like the fact that it allows us to do it "scripting" ala ExpressJS or the MVC way. It's so simple and flexible. We are enjoying it
Hibernate is only important so far as you might work with a shop that still uses it. Otherwise, you're far better off trying to write SQL in SQL (and use something like JDBC), and avoid putting too many layers of abstraction between your code and what you're actually trying to do.
You could use d3 and java by using GWT and GWT-D3: https://github.com/gwtd3/gwt-d3
create trigger sync on table for update...
Google is your friend... I'd also suggest downloading eclipse or IntelliJ IDEA community edition. Both are good editors and both are free.
i use net beans, pretty good 
It's easier on a Mac than on Windows. Google it.
On a Mac you can just use TextEdit for now to write the code. Save as a .java file. You can compile and run it in Terminal. I'm about halfway through my first class so I won't be of much help beyond that, but TextEdit and Terminal are what I've been doing the last couple weeks. Edit to add: And like knucklehead said, Google is definitely your friend!
Try crossposting to the subreddit r/learningjava . It also would be helpful to post the full assignment description as well as the code, if any, that you have already created on this project. :)
Some very useful tools right there for helping to start with basic programs that are still useful in more advanced coding!
And the select part?
Thank you for the help, I'm currently trying to do a similar approach by selecting based on the number of topics after sorting by topic and taxonomy
Based on your table, it looks like topic is sequence for taxonomy. In that case, create a class to represent your individual records from the table .Store them in hashset grouped by taxonomy as key. or with java 8 stream , you can group them by taxonomy directly if they are in list or arrays.. Now iterate through the entry set, and pick random record from the value list ( actual implemetation of random selection is your preference ). Can not say its most efficient, but it fulfill your requirement easily and readibly. 
[removed]
When you redirect people, it is necessary to use the **correct** subreddit: /r/learn**ing**java does not exist; it is /r/learnjava 
GWT has been described as "a good implementation of a poor idea". I'm not keen on the idea of transpiling one language (java) to another (javascript), but it has its place. 
It's a part of [JNI](http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/functions.html).
What is that? Pardon me for asking, I am new to Java and I wanna learn. 
My Recommondation is JFreeChart: http://www.jfree.org/jfreechart/ It is based on Swing, mature and has support for every aspect you asked for. There are also some attempts to use JFreeChart on JavaFX like http://www.jfree.org/fxgraphics2d/ But I don't know how good this is, because I just used it with swing.
Yes. In fact the class-per-table model is something I find breaks down as soon as your database schema achieves even moderate complexity. My main problem with hibernate is not the technology, but the bad habits it typically encourages by default. The typical mutable partially-constructed table entity is about the worst design I can think of for a data model. 
Most interesting post of the month, at least. People focus too much on new framework releases and the newest hipster hack. This right here is what makes you a good developer. Not only using the right solution, but understanding why.
The official blog of Hibernate, provides [a very detailed article](http://in.relation.to/2016/09/28/performance-tuning-and-best-practices/) about speeding-up an enterprise application. Enjoy! 
Please read up on Reddit's rules for self-promotion - at the moment all you've done is spam a few posts linking to your site, so you're clearly in breach of what's acceptable.
Just to make it clear to you: **Reddit is not a self promotion platform** The reddit rules for self promotion allow **one** self promotion in every **ten** other contributions. This includes links in self posts (as this post is) as well as links in comments. Your post history indicates that you have **highly** exceeded that ratio. You do not participate in any other way than promoting your blog which is unacceptable according to reddit rules. You need to stop this behavior or you will have to face consequences. We do encourage our contributors to **participate** in discussions and other threads, something you completely lack so far. Either you change your way and become an active, productive, contributing, but not self promoting member, or you will face a ban.
[removed]
a full day, then i celebrated on overtime
This is the same article I keep reading over and over again. There would be plenty of ground to go beyond these, yet I rarely see anything about inlining, cpu cache locality and async vs sync bottlenecks. 
&gt; inlining, cpu cache locality In Java? This is a serious question.
Are there prescribed techniques to do that? Or, is it a matter of "observe, then adjust"?
The article is really a very basic article on some performance hints for Java for web type apps that don't have strong performance requirements. This isn't about high performance Java where those topics would be covered.
Instruction/data caching happens automatically. You can do things to be more cache-friendly, especially on hot multi-threaded code (e.g. pad your variables to a full cache line, to avoid [False Sharing](https://mechanical-sympathy.blogspot.com/2011/07/false-sharing.html)) If you want stuff to be inlined, either do it manually or make sure your methods are short (the JVM will only inline up to a certain number of instructions); stuff like getters/setters are typical candidates for inlining. The mechanical-sympathy blog and mailing list is great for this sort of stuff.
My mistake! wasn't thinking about it when I typed it but yeah, r/learnjava
**Here's a sneak peek of [/r/learnjava](https://np.reddit.com/r/learnjava) using the [top posts](https://np.reddit.com/r/learnjava/top/?sort=top&amp;t=year) of the year!** \#1: [24 Free Java Books](https://hackerlists.com/free-java-books/) | [2 comments](https://np.reddit.com/r/learnjava/comments/4oolno/24_free_java_books/) \#2: [Learn to create a Snake game in Java 2D](https://www.youtube.com/playlist?list=PL_CeQH2n4d4GeOtFPhizfbdQ3Up0dcoUS) | [8 comments](https://np.reddit.com/r/learnjava/comments/54e16j/learn_to_create_a_snake_game_in_java_2d/) \#3: [Is there a website that helps you learn java that gives programming assignments that progressively get harder?](https://np.reddit.com/r/learnjava/comments/53oznd/is_there_a_website_that_helps_you_learn_java_that/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/5lveo6/blacklist/)
&gt; Such as inlining Where HotSpot can inline multiple overloads at the same time but you have to have to know the extra cost for dynamism and at what point out gives up and just makes the call site pure virtual. I thought there's only three, monomorphic (a static call if an interface only has one possible implementation), bimorphic (two implementations), or megamorphic (full virtual call)? Then again, I haven't read the code, so I certainly could be wrong. If it's a particular concern, you can use the actual class type and make the class final, though that produces some ugly code (such is the sacrifice sometimes when trying to squeeze every ounce of performance out of your code)
D3 and just UI in general is worth using a browser front in for instead of java.
I wrote second article on memory consumption, but what you are mentioning might be an idea for the third, thanks ;)
Is this the time to mention that I'm available for contract work? :D
I don't seem to understand. Can you elaborate on that please? 
In the example on the linked page, `PersonMixin` is not (and can not be) a static class, therefore every instance of it has a reference to the instance of the enclosing class in whose scope it was created - `WebConfiguration`. In the example shown I don't think it matters as the class isn't ever created - it's just used as a alternative source of annotation metadata to inform Jackson how to serialise `Person`.
Wrong subreddit. This should either go in /r/javahelp or in /r/learnjava, but nonetheless: + [Algorithms part I](https://www.coursera.org/learn/algorithms-part1), + [Algorithms part II](https://www.coursera.org/learn/algorithms-part2), + [Coursebook](http://algs4.cs.princeton.edu/home/) Should get you covered.
there must be so many. here is one I could think of. https://github.com/kangax/html-minifier I can't think of any Java library to minify html 
That's the way it's always been. Blogs usually don't tell us things we hadn't already considered. If you want to learn the good stuff, the only way to do it is by reading code written by the best engineers, or having the best engineers give you code reviews. 
There are other ways, too. You can also learn for yourself, by careful experimenting, reasoning and observing. You can also discuss with your colleagues and even if they are not the rock stars of the business you can gain valuable insights that way. In fact knowledge gained in those ways will stick much better and be more valuable in the long run than just perceiving second hand knowledge.
&gt; In the example shown I don't think it matters as the class isn't ever created You're right. Weird feature...
Just do add to that: this is often used to enable Java code to communicate with legacy code more easily (instead of having to port the entire legacy code to Java instead) or to benefit from hardware-specific optimizations, like using a CPU instruction code that is 10x faster than the Java code but is only possible in a certain type of hardware.
For reference / support on inlining: [VM options](http://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html) which has things like: `-XX:CompileCommand=command,method[,option]` which has commands like `inline: Attempt to inline the specified method.` and `-XX:InlineSmallCode=size` : Sets the maximum code size (in bytes) for compiled methods that should be inlined. Append the letter k or K to indicate kilobytes, m or M to indicate megabytes, g or G to indicate gigabytes. Only compiled methods with the size smaller than the specified size will be inlined. By default, the maximum code size is set to 1000 bytes and `-XX:MaxInlineSize=size` Sets the maximum bytecode size (in bytes) of a method to be inlined. Append the letter k or K to indicate kilobytes, m or M to indicate megabytes, g or G to indicate gigabytes. By default, the maximum bytecode size is set to 35 bytes Getters and setters tend to fall into `-XX:MaxTrivialSize=size` : Sets the maximum bytecode size (in bytes) of a trivial method to be inlined. Append the letter k or K to indicate kilobytes, m or M to indicate megabytes, g or G to indicate gigabytes. By default, the maximum bytecode size of a trivial method is set to 6 bytes For fun, toss `-XX:+PrintInlining -XX:+UnlockDiagnosticVMOptions` on the Java invocation and see how it behaves. Note that all of the above are for Linux, other operating systems and virtual machines may have different arguments or defaults.
if you are 5 year old who knew some java basics I would say it just lets you write a test to reassure you that function A does indeed return an Apple, not a banana. If someone comes in later and decides to return a banana, the test will fail. If your application wont run without this function returning an Apple then you've just saved yourself from deploying an application that will crash. An obviously over simplistic view but it does give you more confidence in your code.
&gt; But can someone explain unit testing, automated testing, and JUnit in general to me? The basic idea is that if you have a class (like, say, one called Gizmo) in your implementation, you might write a matching class called GizmoTestSuite or the like located nearby. For example, Gizmo might be at `src/main/com/widget/Gizmo.java`, and you'd also have `src/test/com/widget/GizmoTestSuite.java` sitting on disk. In this class, there would be a bunch of methods annotated with `@Test` (from JUnit), each of which contains an assertion about a behavior from Gizmo, as you've written it. Each of these methods is a unit test. The project would be designed always to run these tests when the project builds and to stop if any of the tests fails, which we call automated testing. JUnit is one way to implement this. &gt; What does it do? How does it do it? How does it increase productivity? A brief overview of the "test a little, code a little" principle would help as well. Unit testing just exercises what you've already written to make sure it does precisely what you said it would do, a little like a proof of concept. There are many examples on JUnit's site. There is a concept called test-driven development which espouses actually writing the tests for an implementation first (which would, of course, fail) and then writing the implementation until those tests pass. This means you sort of design your implementation by using it and then go in and fill in the functionality afterwards. Some people do this. Many do not. TDD advocates say it improves productivity because it provides a clear goal to aim at and enforces kinds of up-front design. More realistically, writing tests (either before or after implementation) will not make you more productive at first. But it will give you assurances later that when you're changing something or trying to figure out why something is the way it is, you won't risk introducing a problem. In my experience, many programmers add lots of tests designed to fail specifically to prevent something from being changed which otherwise might seem harmless to change. Other times, a test may be added to represent the circumstances which are causing a bug in the real world so that it may be reproduced in a controlled situation and fixed more easily. Once all these tests exist, future programmers (years down the road) may be emboldened to make changes which, if all existing tests pass, they may be surer are safe to introduce. This is a big productivity gain, but it takes some up-front work. As far as I know, it's a foregone conclusion at any job I've had that tests are not just recommended but necessary, for these reasons.
You should mention LinkedList should absolutely be used over ArrayList if you are using it as a stack or queue, i.e. inserting or removing elements at the front of the list, which is O(1) instead of O(n) for ArrayList. Also, a tip for using very large ArrayLists or HashMaps: Set the expected size when you instantiate the list!!! This will prevent frequent resizing.
Wow.. never knew this... It's definitely crazy...
Thanks. So if it had been instantiated, would an instance of WebConfiguration be implicitly injected even though it's not used inside the local scoped class? 
turns out it does. just saw u/lukaseder s blog post. pretty informative. 
There's only so much knowledge that an individual alone can bootstrap, because it's hard to train biases against misinformation that way. Most knowledge is institutional. If you're surrounded by a lot of really talented engineers, then all that collective talent is going to have an amplifying impact on your abilities as an individual. Even when you're autodidacting, you're still absorbing industry wisdom from books, blogs, and tutorials. But this method doesn't have two-way communication, so it's not as rich.
What's payara?
&gt; Java doesn’t take advantage of multi core CPU architecture Heard it here first! Seriously though, that article is pretty bad at explaining why it makes some of the claims it does. 
I feel like [Betteridge's Law of Headlines](https://en.wikipedia.org/wiki/Betteridge's_law_of_headlines) applies: &gt; Any headline that ends in a question mark can be answered by the word *no*.
[removed]
&gt; You should mention LinkedList should absolutely be used over ArrayList if you are using it as a stack or queue, i.e. inserting or removing elements at the front of the list, which is O(1) instead of O(n) for ArrayList. For a stack, I think ArrayList would work fine. You could use it as a stack by pushing/popping to/from the tail end of the list, rather than the front. For a queue, I agree that a LinkedList would be better than ArrayList, but as another commenter mentioned, [ArrayDeque](https://docs.oracle.com/javase/8/docs/api/java/util/ArrayDeque.html) would probably be the best choice for both stacks and queues. 
Someone selling training on Scala (amongst others). Also they're an Indian company. So this is just blog-spam trying to get traffic to their company. 
Someone who knows nothing about Java wrote this.
FITA is the leading training institute in Chennai for Java Training. Java Training in Chennai offers the well trained IT Java experts as trainers. We are offering the placements in top IT Companies. Java Course in Chennai is offering the unique teaching methodology. Best Java Training in Chennai offers the training at three branches in Chennai at T Nagar, Velachery, and OMR. Enroll for demo classes by Calling us:@9841746595.
junit is for making sure your program works the way you think it does. for example, if you wrote an add function that added two integers together, you might give it 2 and 4 as input and check for 6 as output as a unit test. 
Imagine that you joined a team of developers thirty years ago. They have a unique development process. If you temporarily add a print statement in your code for debugging purposes you are expected to add an entry to a Word document that specifies the location of the print statement and what the correct output is. By doing this the team will be able to replicate your manual testing at any time in the future. After a year of doing this there is a huge document that captures all this valuable knowledge about how the system is supposed to behave. So let's create a second rule that says that every time someone makes a change to the code they have to put all those print statements back into the code and manually verify all the outputs by comparing it with the entries in the Word document. At this point the developers would either quit or invent JUnit. 
That's fucking fantastic. I'm also going to put it in my brain that this is in fact how JUnit was invented. Some companies do some weird shit, so this wouldn't be that out of line lol.
Funny part is that one of the things that makes scala special is just how different it's type system is from any other JVM language. Other than that given the java concurrent package and parallel stream operations, the first statement is completely false. 
Don't forget String.intern(), Runtime.getRuntime().addShutdownHook(), and most static fields. I haven't run into it in years, but InetAddress used to keep a persistent IP/hostname association, such that if you needed to look up a lot of those bindings it would gradually fill up memory. We had to use package access to clear the cache periodically to avoid that … There are surely many more common examples.
Here's a [link to JSR for those interested](https://jcp.org/en/jsr/detail?id=370) in what is included in this version. Does anyone know of an ELI5 explanation, other than "non-blocking IO and SSE"?
Listeners are usually the most common example. Often the reference the listener holds on the object being listened to keeps that object alive longer than intended
Have you ever spent a couple hours debugging a bunch of code you just wrote? That's why "test a little, code a little". A unit test does three primary things: (1) ensures the code does what you actually think it does; (2) acts as a form of documentation about the system; and (3) protects you from breaking the code during refactoring. The primary way unit tests increase productivity is by allowing refactoring to be done safely. I can't emphasize the value of refactoring enough. Without it, as new features are added the code slowly becomes unstructured and disorganized; a pile of spaghetti that's ever more difficult to understand and work with (read: takes longer and longer to develop new features). Let's pretend we're writing a blogging engine and we want to unit test it: * Unit tests are code that proves the code does what you think it does. So we'll write unit tests that assert that only the author of a post can edit it; that posts are rendered in the correct order; that only the owner can create a post for a blog. Generally a unit test asserts some requirement. * Unit tests are a form of documentation. Let's say you've inherited this blogging system from someone else. One good way to learn something about the features is to scan the unit tests. Assuming they are well named they will reveal interesting and important requirements that might not be obvious just by looking over the source. * Finally, unit tests help you refactor. Instead of changing some code and then finding out weeks or months later it's broken (and then good luck finding the breaking change), your unit tests will tell you immediately that you've broken something. To put it differently: unit tests give you confidence that you can change the design or implementation without introducing bugs. And that's a tremendous benefit. Without tests, it's scary to change existing code, and that leads to "eh, this design needs to change but... I'll just...". And then you have the pile of spaghetti I referred to earlier. For example, the original developer had a BlogAuthor and a BlogOwner class, and lots of conditional logic around things like adding/removing an author and preventing BlogOwner from creating a post. Now we want to add the ability to post comments and that requires a BlogCommenter class. Uh oh. A better approach, but one that requires considerable refactoring, is to add 'role' and 'permission' concepts to the code. Fortunately we have unit tests that will fail if, while refactoring, we accidentally change the code to let a BlogAuthor add new users. And now we have a new design that will accommodate BlogCommenter with fewer changes and simpler logic. Whew. That turned into a lot more than I anticipated, hope it's helpful and feel free to ask followup questions. 
The hell is this? Here's a link to the actual thing... [https://lorenzoongithub.github.io/nudge4j/](https://lorenzoongithub.github.io/nudge4j/)
Hence weak references. Long live WeakReference. **EDIT:** Wait, what am I talking about. Quick die WeakReference, of course. Duh. ;-)
I'd argue that the distinction is important; the methods used to hunt down the two different types of losses are quite different, and the outcomes are also quite different.
Could you please expand a little bit on why ShutdownHook might cause memory leak? 
The *way* in which it's wasted is different, though. It's analogous to having a restaurant where a lot of food ends up in the garbage. One case is like wasting food in the kitchen, the other being food wasted by patrons in the dining room. The causes are different, and the solutions are different, even if the outcome is superficially the same.
Will that's just like, your opinion man
The reference to Knuth is not exact. From Knuth, Structured Programming with go to Statements, ACM Computing Surveys, Vol 6, No. 4, Dec. 1974 (see p.268) &gt; There is no doubt that the grail of efficiency leads to abuse. Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%. A good programmer will not be lulled into complacency by such reasoning, he will be wise to look carefully at the critical code; but only after that code has been identified. Everybody forget the part about the 3%
Dear 5 year old who knows Java, In order to understand what is junit and what it does, we will have to first understand *why should we test*, *what is unit testing*, and *what is junit and how it works* **Why should you test?** As you grow, you will realize that every line of code you write will have two things for sure. * What you think it does * What it actually does Tests are a way of ensuring that it *actually* does what you *expect* it to do. Imagine that I asked you to clean your room and you say you have done it. I can either trust you or I will have to go to your room to verify that you have actually cleaned up. Remember, never trust *anyone* blindly! It may happen that you do not know the right place to keep your toys, but my test will point it out and tell you the right place to keep it. You will then remember it and never make the same mistake. Remember programs are more reliable in that aspect than humans. **What is unit testing** Now, as a parent, I have to ensure and enforce many good things in you, for e.x. you should do your homework on time, you should strive for good hygiene, you should get good exercise. But if I have to verify all these lessons all of the time, you will be confused, because I will ask you to change too many things at one time! It is the same with software, when you break anything (which I promise you you will!), it is much better for you to know what you broke the moment you broke it, because it is so much easier to fix! Think about it, if I reminded you to do your homework, just as you are getting on the school bus and not the night before, how stressful it would be for you! With unit tests, you are essentially checking very small aspects of your big task. Before you tell me that you have cleaned the room, you would check: are my toys in the right place? are my dirty clothes in the laundry? is my bed made? These small checks allow you to focus and together they add up to ensure what you have been told to do has been done by you. **What is junit and how it works** I ask you to clean your room twice every week, but every time you clean it, I have to stop what I am doing, come over to your room to *test* it. I am your father, I am an adult, I have things to do, kids to feed! I will have to find a nice way to ensure you have cleaned your room without having to dedicate much of my time. Eureka! I need a robot! There are so many robots in the marked (JUnit, Spock to name a few), I have to choose one. Obviously, if I get a robot which knows nothing and I have to teach it everything, it will be an awesome waste of my time, awesome yes, but still wasted time, so I need a robot which comes with some features I can "configure". JUnit4Rooms comes with handy methods like: which room should I check (class under test), what do you think is a clean room (asserts). On top of it, it is *really fast* and *compatible* with other robots (SchoolTeacherMock for testing your homework for e.x.) and there is an awesome support for it in our neighborhood (the internet, especially stackoverflow!) and it is free! Now that I have gotten the robot, configured it and programmed it to run every time you say "dad, I have cleaned the room" (Continuous builds FTW!) I can enjoy my beer in peace! **Few notes for when you grow up** There are a lot of ways to test, unit testing is the fastest way of getting a feedback. As you grow into an adult, you would find many things competing for your attention, the meetings, the excel sheets, email, slack all competing for your attention and your only hope for survival would be to do things in small increments (measure twice, cut once!), but many times you would have to park your work to return to it later, having written tests up front would mean that you can do it with confidence and resume where you started from! Writing tests is a hard work, time consuming work, but as you grow, you will find that IDEs can be programmed to write so much of it for you, you will find ways of reusing your test code (unroll in spock, parameterized tests in junit), you will find with pain that your test code is your best friend, you will curse your self for ignoring your best friend when your code base becomes unmanageable, then you will promise yourself, never again will I put my best friend in the back burner, that is the day you will find peace, that is the day you will become a man!
On a serious note though, quality is a broad topic and I personally believe that no one has figured it out. I think no one has even "defined" it properly so far. There is no "silver bullet", but lot of good practices and lot of experience. Hopefully my long intro introduces you to the concept and inspires in you the zeal to start with it. If you run into problems, just remember, each and everyone of us has at certain point in life and for every question you think is stupid, there will be people who can show you many more which are objectively stupider!
It's more like a restaurant where you go and you order organic southwestern corn chowder (a delectable blend of roasted corn, red bell peppers, potatoes, and chipotle chile peppers), then a main course of roast duck breast (potato and blue cheese mash, grilled marinated apricots with Mascarpone and orange-brandy sauce) and finish with a brownie sundae, a luscious brownie with ice cream, garnered with warm homemade-recipe fudge poured over the top... hmm I lost track of my point, there.
Derek Banas has a great channel with a bunch of topics, below is the link to his Java playlist. He also has a 'Learn Java in 1 Video' video, that should go over the basics. If you have any big questions or anything, you can PM me, and I will try to help you with whatever. https://www.youtube.com/playlist?list=PLE7E8B7F4856C9B19 *Edit for an explanation.
To be Faaaaiiiir
I'm not going to repeat what everyone here said, but if you want a deep dive on understanding TDD, BDD, design, and writing you enjoy modifying, there are some books you want to check out. Test Driven Development By Example - Kent Beck Practical Object Oriented Design in Ruby - Sandy Metz (ignore the language; it's a very useful book for any OO language) Growing Object Oriented Software Guided By Tests - Kent Beck. I love the last two, the first one is more to get your head in the right space before getting forget. 
I mean I kind of get what key store path and trust store path are but I don't know what their windows equivalent would be. that's what I mean 
My favourite example is File.deleteOnExit()
Its about basic Java SE, nothing more. DB stuff is another subject.
Neither case is true. This kind of discourse is not productive, nor is it professional. You're welcome to believe whatever you like, but personal attacks are not cool.
Caveofprogramming for video tutorials, https://www.caveofprogramming.com/ and Sololearn for a more static/text tutorial! https://www.sololearn.com/Course/Java/ Btw, searching up "Learn Java" or something similar you will encounter thenewboston's channel, thenewboston is a unrecommended source- here is a thread about him. https://www.reddit.com/r/learnprogramming/comments/11ubro/28_ways_to_learn_programming/c6ppc38/ Also! You might want to sub to /r/learnjava Have fun coding :)
Do we need a DSL for a routing?
You can open up a MappedByteBuffer from a FileChannel and it won't be deallocated unless you do some manual reflection hackery to force it. Of course, you could also take `sun.misc.Unsafe` and allocate memory and then lose the pointer to it, but you can do that in any language that allows you to manually allocate non-stack memory. Another fun memory leak is using ThreadLocal in a Java EE container. If you use a JDK class, it'll work fine, but if you use one of your own classes, that causes a ClassLoader leak when you stop the application. I don't know how much thought really went into Java EE.
What you're likely looking for is the path to cacerts file as part of your java home installation. Keystores and truststores serve different purposes but they have the same file format. Please see this this page from IBM: http://www.ibm.com/support/knowledgecenter/SSYKE2_7.1.0/com.ibm.java.security.component.71.doc/security-component/keytoolDocs/cacertsfile.html On a windows machine, you may have a JDK installed at a path such as C:\Program Files\Java\jdk1.8.0_91 meaning the path to cacerts and any keystores you define would be located within C:\Program Files\Java\jdk1.8.0_91\jre\lib\security. So your trustStorePath would be C:\Program Files\Java\jdk1.8.0_91\jre\lib\security\cacerts.
Never seen this, looked at lots of map code.
So your not in school and you don't feel like you should know about the various kinds of memory leaks? If you want to be treated like a professional, act like one. That includes not whining that someone isn't adhering to your overly narrow and simplistic definitions. Imagine for a moment that you are sitting in front of your client's IT team listening to them complain that your application's memory consumption is growing without bounds. Saying, "To be fair, what you are describing is not a memory leak." will make you look foolish and incompetent. 
&gt; sometimes you need to use a console to investigate something quickly In modern production environments, troubleshooting code like this never really happens unless your programs are small standalone units and are being run locally for your own testing purposes. In that case, you'll probably be using a full blown graphical IDE like IntelliJ or Eclipse anyways, whose support and debugging tools are usually far superior to that of any text based editor. Sure, there are probably a few people that use it and like vim for Java development, but its the use case you mentioned that may make it of limiting appeal to the vast majority. Consider that the only scenario that would make this useful to most shouldn't even happen in the first place: Source code should never exist on a production server, nor there should be any dev tools to allow anyone to make source code changes on a production server. If you're troubleshooting source code in a production environment, you're asking for more trouble that it is worth. (I'm not commenting on why you're being downvoted or whatever, but just trying to answer your question.)
totally correct !!!
Thank you :)
I like it, reminds me of Play 1.x without the Model Layer and hot swapping, but with a cleaner syntax and less bytecode magic. Will look into it
Thanks for the reply! Ok thank you for the great tips!
This would never have happened if Java had proper instance initializers... 
What would "proper instance initializers" look like?
Yeah, I think so. If you familiar with Java and JDBC, you can learn basic stuff like creating entity, mapping (one to many, many to many). Anyway you have to spend much time to learn and get familiar complex stuff such as caching.
The classic definition of a "memory leak" in C is losing the only pointer to a malloced struct. But you could in theory do some pointer arithmetic and get a new reference to it (i.e., "unleaking" it). In Java you can have a tiny substring retain a reference to a huge backing byte array while losing the reference to the original string, "leaking" large sections of the byte array because there is no way to access it anymore. But you could in theory do some reflection and get a new reference to it. I don't see the fundamental difference there. In both cases you lose access to a region of memory (and in both cases you can in theory get that access back).
One of the most common mistakes I'd have included is creation of unneeded interfaces for no particular reason. Also would be tempted to add to this list: returning mutable data structures when immutable ones will do the job. 
I'm unsure why an anon class would literally hold the parent object in memory. Semantically, yes, you capture that parent scope, but implementation-wise, the compiler knows which variables you reference, and it should only have *them* captured, which is ok, because if you reference them, you need them. If you don't... then you don't.
I agree with your first point. In an OO language, like java, coming out with bad abstractions are a massive cost. Developers over and over again underestimate how difficult it is to craft an OO architecture. And off they go creating silly classes implementing silly interfaces...
This site good for starting. http://www.geeksforgeeks.org. Very good explanation with lot of algorithms and data structures. You can find out C, C++, Python and Java implementation also.
Fair point but then I'd just encrypt those fields specifically, so the user could still see things like the expiration :)
It seems to me encrypt / decrypt from database side. There are couple of ways to do it in application level. 
I would give anything by Robert Martin a wide berth. If you want a laugh take a look at the code on his GitHub site - it's anything but "clean". His stuff is generally a kernel of common sense wrapped up in a huge ball of waffle, pontification and general nonsense. Read [his latest blog post](http://blog.cleancoder.com/uncle-bob/2017/02/23/NecessaryComments.html) and see if you think you learned anything at all. [This one](http://blog.cleancoder.com/uncle-bob/2017/01/11/TheDarkPath.html) defies belief - he actually thinks that having a type system that prevents you from performing nonsensical operations is a bad thing. The GoF Design patterns stuff was influential in its day, but things have moved on somewhat since then. At the time people went a bit mad and started constructing everything with Factories, which themselves were Singletons and so on. Nowadays those people are having to unlearn a lot of that, as it didn't achieve much other that to completely obscure the parts of your code that actually did anything useful. Effective Java is pretty rock-solid.
Do Mockito and AssertJ tutorials. Everything else will follow.
I fear that the people this blog is targeting are unfortunately the people who don't really read blogs (or anything that keeps them up to date) I'm afraid :)
&gt; force Controller method to be static. When was the last time you used Play? It doesn't require a static controller method: https://github.com/playframework/play-java/blob/master/app/controllers/HomeController.java public class HomeController extends Controller { public Result index() { return ok(index.render("Your new application is ready.")); } }
If you want background job management in Play, there's a module for that: https://github.com/tuxBurner/play-akkjobs
Oh cool, I hadn't seen that before. Thanks!
Here's interesting blog about Java and OOP: http://www.yegor256.com/
This might be become a dedicated Hibernate module. Stay tuned!
Pocket?
My point is when `Parent.this` is not used, and only captured final local vars are used (or nothing captured is used) then there's no need to capture `Parent.this` at all, and waste the CPU and memory for doing so. The HashMap construct above doesn't refer `Parent.this` so the only reason the class would have a reference to it would be that someone didn't implement the compiler/runtime to be a bit smarter. In JS for example, only what's directly referred to is captured, and it works fine. Of course JS is not Java, but it's an example of people trying to be a bit more selective in implementing capture, no matter that the apparent semantics are "you have access to everything in the parent scope".
Effective Java 2 &lt;--&gt; Clean Code in whichever order you like (Honestly, i like to skim back over Effective Java about once a year as a refresher. That's just me, though. I enjoy Josh's writing style, and I can usually glean something new I skimmed over or forgot.). Then I'd read The Pragmatic Programmer. Skim through Refactoring and The Clean Coder. I find 'Uncle Bob' to be a bit of a blowhard. There's good stuff in there, but take most of it with a grain of salt. The GOF book I wouldn't bother with. If you want to learn different design patterns and how/where to use them, google is a better resource. A little google-fu will let you see a broad definition of what each of the design/EIP patterns are and how "pattern A" is used in the context of what you're working on. 
&gt; But I guess that's too late now... Out of curiosity, is there a "leak" that would break B.C. if the compiler became quietly smarter about it and begins to capture more selectively, based on what's referred?
There were a few threads here recently where people asked the same question. Have a wee look through the search results and you should fine them!
Because it's coded in Java, and it's heavily tied to Java (read the post to understand)
Thanks, already starting to use tutorials point as it helped me learn some of python and I had it bookmarked but thanks for the extra advice as well as the link!
There's still quite a lot of jquery-ui bits on their demo site forms, but it is an improvement!
That has even a name, it's called Cargo Cult and in fact is very common in programming.
It's ok when you do it only as a training, but when you trow it to a shared code base you just increase it's complexity. If the only thing that distinguishes a class name from an interfaces name is `-Impl` then ask yourself why do you need it at all.
You don't necessarily need interfaces to do either of those things.
Thanks! Would love to see something similar for the new packaging stuff
&gt; [...] SpringCacheRegionFactoryAutoConfigure [...] SpringCacheRegionFactoryBeanPostProcessor [Bingo!](https://blog.jooq.org/2014/04/01/spring-api-bingo/)
Usually node and react news
When in Rome, do as the Romans do
You just took the first three results from google? =)
&gt; I'll create interfaces for most everything during design and initial development. You do the exact same thing with a concrete class (this also is an interface) without the overhead of a separate interface. In my opinion if you have SomeInterface and then a SomeInterfaceImpl is a great indication that you're doing it wrong: you can't even name it properly. 
I look forward to when the tooling (Maven, IDEs, etc) catch up to this feature.
Freudian programming?
I cannot tell you about real experience with Hibernate, because my experience dates back almost a decade, and I'm certainly biased with respect to the topic, working for the company behind jOOQ. But here's a hopefully not too biased point of view on the subject that can help you decide when to use which approach: ORM (e.g. Hibernate/JPA) or SQL (e.g. jOOQ/JDBC) https://blog.jooq.org/2015/03/24/jooq-vs-hibernate-when-to-choose-which/
Worst mistake IMHO: Using implementation inheritance for code reuse instead of composition.
You really don't take [criticism](https://www.reddit.com/r/java/comments/5ud227/actframework_the_power_of_adaptive_record_and_ui/) well don't you? You're breaking a self-promotion rule and got called out on it. There is a huge difference between posting something you wrote (which happens all the time) and constantly spamming links to generate traffic to whatever you're creating. There's a difference in sharing and posting something for personal gain. 
This is how java got a bad name. Habits like returning an empty collection. If all your service layer returns needless objects, I pity your gc. Plus, comparisons with null are always fast, while calling isEmpty much slower (if your mates do not fall into the sin of calling size() ). About the semantics of null, I found countless cases where it proved to be great to use. .... But why I bother to write this? It is the age of Donald, and Donald knows better. Go ask him. 
..why did you wait almost two weeks from that happening to post this if you had an issue with someone pointing out that you tend to post links to that project most of the time when you post or comment? I can understand the desire to share what you have worked on, but having a majority of your posts link to that does potentially run afoul of the self promotion rules of reddit, not just /r/java.
OP is deleting every single post &amp; comment...
Good riddance. 
So, switch? It's about time to seriously consider Gradle for any Maven legacy projects.
If that's a mistake then thank god for mistakes
Because null isn't garbage collected and doesn't take up heap space?
Shhhh. Let the bad programmers suck. 
This is awesome, thanks for building this! I literally just started researching how to build out this same thing last week. We are building out a new caching layer using Redis, and it's very frustrating essentially having to implement the caching logic twice, once for Hibernate, and once for the rest of our Spring code. We will definitely be using this.
So often made 😊. Or errors with the System.out.println (or sysout) 
Which is why you return `Collections.emptyList()`
I guess I got lucky. When I've used JPA, it was using NamedQueries, which are JPQL. The only time we used criteria queries was for search logic.
The fact you built your application with IntelliJ has no bearing whatsoever on deployment. Build a war file with a build tool (Ant+Ivy, Maven, or Gradle) then deploy the war to Tomcat. On Tomcat you should have a connection pool configured that points to your MySQL database. Your app should get a database connection via a JNDI lookup.
I subscribe to [Oracle's Java Magazine](http://oracle.com/javamagazine) for in-depth, long-format articles. 
Oh, yes, blame a man after 2 beers. And make sure you don't take in the substance, but the form. You are hollow, dear.
Empty collections are static objects so GC has no issue and testing for size is quick. It's a technical response to your technical arguments against returning empty collections.
Is there a JavaEE equivalent to Spring Boot? I feel like the best thing I ever did was get rid of the non-embedded servlet container. Is there really any benefit to non-embedded tomcat?
For me primary benefit to Criteria (I use the JPA 2 flavor) is refactoring. While the time to write a criteria query might be a little longer, it has paid for itself many times over in maintenance. YMMV
Q: Why are builds so slow? A: Everybody is doing it wrong lol
These are an interesting combo of new guy mistakes and not. How was "abstraction hell" not mentioned? We've all built some beautiful model and realized it was fundamentally infeasible upon implenenting it...right?
StackOverflow.com
I know I answered this above, but I'll defend creating "unneeded interfaces" until the day I die. I say this for one reason only, refactoring other people's shit( or mine). It's a thousand times easier to take a poorly written God class that implements an interface, break that interface into multiple interfaces, and refactor each piece than trying to clean up the shit code in the God class. Try that without some form of abstraction between you, requirements, and what you have to with. You'll go mad trying to fix everything you've broken. Enterprise java sucks, but interfaces make life easier. Those "unneeded" interfaces also let you fix your implementation constraints later when you better understand your requirements without changing any contracts. You can throw away whole implementation classes and replace them without anyone caring because your contract is still being enforced. TLDR; code to interfaces, you'll thank yourself later.
The internets. Honest Abe done told me there's lots-o-good shiznizzle in them tubes.
To Long, didn't read. Can you explaining like im4.5, from India and speak Hutu?
The compilation speed improvement sounds nice, but in my experience executing tests takes significantly more time. And I want to execute my tests when the class they depend on changes (even if it's ABI-compatible change).
Best place to get started with web hosting. Follow the steps properly
You're more describing a sort of scaffolding for a *major* refactor, in which case creating interfaces that aren't there would be a minor effort compared to the refactor itself, making it a non-argument for the common case.
What did you search for? I'm curious what Search keywords you used which shows exactly the same resources that I mentioned.
&gt; I know I answered this above, but I'll defend creating "unneeded interfaces" until the day I die. I say this for one reason only, refactoring other people's shit( or mine). It's a thousand times easier to take a poorly written God class that implements an interface, break that interface into multiple interfaces, and refactor each piece than trying to clean up the shit code in the God class. That's not at all what I was talking about though. I meant creating interfaces for concrete classes 'just because' no matter how simple they are. 
This question would be best posted in either /r/learnjava or /r/javahelp as the plenty hints on the sidebar indicate. In your case, I would clearly favor *composition* (i.e. having a reference to the communication object - not necessarily a new instance, though) over *inheritance*. Depending on the parameters of your `Communication` instance you won't even need new instances in every class. You could probably get away with passing a `Communication` instance into the constructor.
Yes, the empty collections throw exceptions on modification, but you can document that the return object might be empty/immutable. There is a general trend towards treating Java objects as immutable anyway.
Where possible, you should use `Collections.emptyList()` and friends, which are static references.
Here's my favorites sites :- JavaCodeGeeks - https://www.javacodegeeks.com/ Javarevisited - http://javarevisited.blogspot.com/ Tutorials point - https://www.tutorialspoint.com/ mkyoung - https://www.mkyong.com/ Jenkov - http://tutorials.jenkov.com/ JournelDev - http://www.journaldev.com Finally this is my blog - http://mydevgeek.com
Ah right. I keep forgetting these optionals.... My uni decided to teach us java 6, and we are still forced tp use it, so Im only using the newer stuff in my free time :/
too many ads in my opinion
I'd recommend avoiding abusing `Optional`. I think there's growing consensus that it should mostly be used for returning from a service layer. I think as a community we're still getting used to all the new features that Java 8 brought. Some like `Optional.isPresent()`/`Optional.get()` have turned out to be a mistake. 
http://www.baeldung.com/full_archive 
First point, the article pretends that every mobile device (or the large majority) can be programmed in Java. While Android _is_ a very large market, I don't think companies will want to just drop Apple platforms. On the flip side, there's web platforms. On that point, I'm just gonna say **NO**. The last thing anyone needs is a resurrection of Applets and a new bad name about the bad performance of Java applications. And lastly, why are we so obsessed with "full-stack" anyway? Why not use the best tools available for the job? Why do we want do every single thing with a single language? I don't like that everything-needs-a-hammer trend we see nowadays.
Personally, I have a bit of distaste for mkyoung - the examples and guides there very rarely follow the best practices.
&gt; Every mobile device can be programmed in Java, see Codename One... Stop constantly advertising the company/product [that you work for](https://www.reddit.com/r/learnprogramming/comments/5vize9/react_native_vs_codename_one/de2f7ac/?context=3).
Yeah, agree with you. Some of examples are very old. But his examples are very simple and easily understand. It's good for find out small code chunks for small tasks.
???
So basically you'd use Java to mask the fact that you aren't as good a front end dev as you are a back-end dev? Maybe you should hire someone to help you. 
I have plenty of people helping me but there is no need to be rude... I'm great at Java which is a front end language too. I can do other languages well but no one can do all languages equally. The problem with having someone else do the work is exactly that: the blame game. Write client code and then there's a problem somewhere between the server and client... Whose to blame? You need to pull out the debugger, look into the server code to start figuring it out (or visa versa). I can do that even if the server is PHP, but then there is a context switch that is MUCH harder especially at 2am when these things often happen. I can commit code to the servers and the clients just like any other developer here with no problem... Hiring is simpler and far easier. I understand the theory of "use the best tool for the job" but that doesn't apply here...
[removed]
&gt; I'm great at Java which is a front end language too. Since when is Java a *front end language*? Front end languages are HTML, CSS, and JavaScript because those are the only languages that are natively supported in browsers. Java cannot be considered a front end language just because it can somehow be transpiled to JavaScript.
&gt; Front end in mobile Is basically **desktop** - or **application**. Seriously, the term "front end" generally refers to **web** front ends. You're twisting words to your liking here and creating new meanings just to promote your product (where you are already more than borderline spamming - which is against the reddit rules for spamming and self-promotion and thus could lead to a reddit-wide ban).
JavaScript as a native mobile development language is probably worse. Notice the context isn't for web, when we build a website we use JavaScript like everyone else... The context is native mobile to server. 
The point is to save the caller from having to do a null check. List&lt;String&gt; strings = getStrings(); if (list != null) { for (String str: strings) { System.out.println(string); } } vs for (String str: getStrings()) { System.out.println(string); } or getStrings().stream().map(System.out::println); Potentially returning null makes the last two impossible.
What's the alternative? It's apparently bad practice to mock a concrete class. 
Generally this is still how it is done on your local machine for local development and testing. You most likely wouldn't do this in production though. 
Spring boot generates J2EE applications (you can create a war you can deploy to a Servlet 3.0 container). So your comment doesn't really make sense. Even if you run your spring boot app standalone it is still running with an embedded J2EE servlet container. According to the spring boot features the options are: * Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)
Coroutines on the JVM... *drool* Coroutines were a god send when I used to play around with Unity.
Most people do not have performance requirements so intense that they can't afford to return an empty collection. If you do, then God help you.
Hey, have you heard of JavaFX? I think if i wanted something to be "fullstack" I'd use that. But it wouldn't really be fullstack. I'd probably still end up using a RDBMS with sql language, solarium/elasticsearch. But my best bet would still be JavaFX. Also if i had to deploy on web, I'd still have to use JavaScript eventually, even if it is in a cleaner form as a library rather than something heavy and intrusive like a framework. There's no getting away from js from web dev. That is of course if I read your "front end" as client tier. 
Yep heard about it: https://dzone.com/articles/should-oracle-spring-clean-javafx 
I figured Intellij had nothing to do with it, just wanted to make sure that I might not miss something deployment-wise that could be specific to Intellij (in terms of configurations or something). Currently, I can run my project on Tomcat via Intellij, and it gets launched at localhost:8080. What I'm really trying to figure out is how I can point my project to a public address instead, so that I can show it to others off my machine. I have very little experience when it comes to doing this kind of "deploy to somewhere other than localhost:xxxx", so I was primarily wondering about how that works in a Tomcat set up. Is this something that gets set in a Tomcat configuration file?
I see, you just need to edit cons/server.xml file inside your Tomcat directory. Find this line "&lt;Connector port="8080" ..." and change port to 80. Then adjust your router settings to do port forwarding on your machine. I think this should be enough:)
Give me anything. Anything except JavaScript.
JdbcTemplate FTW 
Amen
Our use-case is "familiarizing with unknown source code" and that's what Coati is mostly used for by our users (judging from the results of our survey in November '16) I recently had a look at which companies bought commercial licenses and it seems that among them are quite a few companies specializing in IT security, also some 3D animation and game development companies, as well as finance and data analytics. Are you asking because we don't have any company logos on our website?
And you forgot about: * [bootique-jetty](https://github.com/bootique/bootique-jetty) * [wasabi](https://github.com/wasabifx/wasabi)
Outside of using fancy Spring framework stuff, I believe the approach would be using good ol' JDBC and passing your parameters in as environment variables.
My sense is that I'm following the [convention](https://github.com/docker-java/docker-java/blob/e8146ac42cd97420fa554a0f34292a1e43b6683d/src/main/java/com/github/dockerjava/api/DockerClient.java#L1), but I did have the `group` and `artifactId` wrong in my pom. Mind taking a look at [this PR](https://github.com/b-long/jedi/pull/8) and giving any feedback?
We make connection pool at application level. We are not doing any configuration in tomcat for this. It's like you can download fresh tomcat and without making any changes in tomcat configuration you can just start your app
It's a little alarming how much certainty you use to express your opinions. If two approaches are equally time-consuming to implement, then the one that is most efficient in BOTH memory usage and cpu utilization (because most problems require a tradeoff between those) seems like an obvious choice. Of course, no one is going to sell any books telling you that checking for null is occasionally the best approach to take because that would only take a single paragraph to demonstrate.
Yes, let's create more worthless objects for the heap just because someone convinced us that null is bad. I mean, null IS and has always been the meaningful default for when you don't have a value in most programming languages, including Java. Optional is bolted on feature that is less efficient and less readable.
https://immutables.github.io/
Would this help? https://idodevjobs.wordpress.com/2016/01/31/intellij-idea-community-edition-tips-and-tricks-part-i-debugging-applications
As far as I know(at least on the intellij code coverage tool) Lombok is included in code coverage calculations. Another advantage is the ability to Delombok if you ever have the need. But as someone else pointed out...Check out Immutables too. Sadly I don't have any experience with groovy. I personally use Lombok and switch to Immutables for any transfer objects, or libraries which could use a lot more structure/power in the generating scheme.
That assumes that your "refactor" is something that is planned for, and the number of possible clients you can impact is small. If either of those don't hold, good luck. It's far easier to swap impl definitions under the auspicious of "current sprint work" that telling the client you need to devote X amount of hours to a refactor because you ( or someone else) didn't understand the problem they were trying to solve. Like anything in life, there's a tradeoff to any approach you take. Useless interface vs ease of "refactoring".
That's what I was getting at with my previous reply. Having interface `Foo` with `FooImpl` let's me know that the chances of `Foo` changing are small, but if I can make `List` and from that make `ArrayList` and `LinkedList`, then that interface gets to live, for now.
Disclaimer: I'm a "programmer", not a programmer, aka hobbyist and slave to code completion. If Groovy is an option, Kotlin - and it's data classes - may be too. As for Lombok's benefits compared to Kotlin: &gt; Still in Java, any methods you do want to add retain the stricter compile time checking that comes with that. Kotlin has full interoperability with Java and vice versa, including static typing across language barriers. &gt; Still in Java, in that your domain classes are located near your other classes in the same source set, not deserted in /src/main/groovy Compilers shouldn't really have a problem with different language classes in the same folder. If you are OK with breaking convention, by all means, put 'em in the same folder. I use /src/main/jvm for this kind of merging JVM languages. As for Kotlin's standalone benefits: - Combining functional and OO programming support in one language - A++ type inference - Amazing stdlib: eager functional map/flatmap/associate/foreach/etc., sequences are basically sequential java8 streams and adding parallel support wouldn't be too hard, a lot of utility for all sorts of JDK classes, ................... 
I was about to suggest this myself.
Kotlin
Pretty neat! Will remove a lot of the overhead of manually configuring processes inside the docker containers to use all of the memory available for that container.
This is a heated topic :) I suggest you try both and see which you prefer, personally I'd take intellijs community edition over eclipse any day :)
I hope it doesn't start a war haha. But what about the extra features available in Ultimate version? Down the line if I get used to IntelliJ, I'd rather not start having regrets because I'm stuck using an inferior version :/
Yeah... but I doubt somebody that considers the typical Bean class as a domain object (in classical DDD pov it is more a DTO - even effective java does not advocate for beans) will use immutable objects for his domain layer 😈
&gt; This is a heated topic Only for the people who haven't switched to IntelliJ yet ;)
I was just recently introduced to IntelliJ. It was almost an instant conversion after using it for only 2 days.
It is personal perference. I like Netbeans
Groovy is great. You can static-compile it, i.e. it will be as performant as Java. Go with it if you don't have complex generics in your data classes. AFAIK generics are not a problem, but recursive ones may be tricky in Groovy Compiler
If you ever reach the point where the Community Edition of IntelliJ is no longer sufficient, you have (or your company has) the money to shell out for the Ultimate license. As a learner, you're perfectly on the safe side with the Community Edition.
I have [this Java Reddit](https://www.reddit.com/r/java/) in my RSS (I use Feedly). I do follow about 10+ Java related blogs besides this but the good content anyways ends up here at one point. If I stumble on anything super awesome Java related that is not here then I just post it. I expect everyone to do the same! Also following people working with and on Java on twitter is a great help to get awesome content.
IntelliJ Community Edition is fine. I only bought the full licence because I wanted PHP support (don't worry, I got better), but I will keep paying because it's just wonderful for everything else as well. 
"Exploring Java 9 as it copies the best features of other modern languages"
So why is it just now being added to Java 9?
&gt; I find very strange you're talking about toString(). I didn't choose that. That's what Ninja does by default. Why on earth does a "microservice framework" not serialize a POJO to JSON instead of calling the toString on a POJO? Why would I need to make this explicit in the controller? Why not have a controller return a POJO and let Ninja do this under the hood?
You never heard of BeanShell?
Now we only need stack allocated objects.
Value types will give you that (Java 10 hopefully).
Good point. I also prefer to return a POJO and let the framework use the proper encoding type based on, say, `Accept` header.
I've used both, and IMO, it largely depends on what software you are writing. Android Studio (Intellij) seems the safe choice if you're doing Android client programming. OTOH, some java projects depend on plugins that only exist in Eclipse. If the team is using Eclipse, then use Eclipse. If the team is using Intellij, Netbeans, or JDeveloper, then use that. There's nothing worse for your reputation than being the idiot hipster who stubbornly insists on using a weirdo IDE that the rest of the team isn't using. You'll be out of a job pretty quickly, because you weren't a "good cultural fit." (Que the hipsters with their "nuh uh, I'm a prima donna, I do what I want" attitudes and down votes.)
It's not really bloating the language as much as providing much more interactive development in the core language itself without any external dependency. I feel this is a great move on Oracle's part. Also, anyone with some experience in dynamic languages with REPLS will tell you how satisfying (and addictive) a good Read-Eval-Print cycle session can be.
Lombok works just fine out of the box on NetBeans at least.
Common Lisp has been compiled for a long long time now (well, all distributions barring CLISP), and it's had a REPL from the very beginning. Haskell is a classic example of a strongly typed static language that has had the same model as Java - compile to byte code and run on a VM for the REPL. So whether the language is statically or dynamically typed or compiler or interpreted does not really figure into the equation.
It actually does. Interpreted languages get REPL for cheap as they are written explicitly around partial parsing and execution. Compiled languages are more difficult because you need to support partial compilation and execution. You CAN so do obviously as LISP, Haskell, Java, Scala etc have shown but it needs to be part of your explicit goals, it's not just a cheap side effect.
Since this is more a programming related question, it should be posted, as the *plenty hints* on the page indicate, in **/r/javahelp**. **Post removed:** Programming help
So... your comment has nothing to do with my original comment then. Good to know.
Keep the domain objects statically typed. Otherwise you might aswell trash the rest that uses it.
Since this is a question about **Java programming**, it should be, as the *plenty hints* on the page indicate, posted in **/r/javahelp**. Please, read the [**Posting Guidelines**](https://redd.it/48eykt) there before posting. **Post removed** programming
This isn't theater though, it is for specific purposes - benchmarking and testing the rest of the jvm/jit is the main example quoted. The JEP goes into more depth about other motivations, and few are about "but what if we just did it like c!" - in fact that wouldn't make any sense, since there is no ref-counting or even free() in java without GC.
Once i interviewed two graduates for Java jobs. I asked them to talk about the Collections. They didn't know. And i was like, how can someone possibly not know what the collections are and supposedly have learned to code in Java? 
Isn't a course a in data structures a requirement in most universities?
Xtend 
I want to say generics because I spent ages working on designing a library that used them heavily and had to learn more than I thought I wanted to know... but generics are a language feature and OP asked about the Java API, so not sure what to answer. Collections, maybe.
[Collections](https://docs.oracle.com/javase/tutorial/collections/interfaces/index.html) All three of your things are part of collections. * LinkedList is a class * ArrayList is a class * Collections.binarySearch is a method (but using a child of Map or Set is generally better for searching)
Oh I see, good stuff thanks!
Don't try to make sense of anything I say. I'm fucking retarded. 
Functional interfaces for modular logic designs (this was a bitch to learn), concurrency (mainly CompletableFuture stuff), nio,sockets, also the shit everyone knows like maps, collections, etc
Jgrasp is good as a beginner because there aren't as many features to overload you with. It's pretty much straight compile and run with a debugger. Intellij will be good to learn once you have a little more experience and feel comfortable coding in Java. I did the same thing when I first started out. 
Try them out. Eclipse is free and open source. IntelliJ has a community edition you can use free. So there'sno financial barrier to try them. Then, use what you like.
Best Java Course
Jgrasp is a learning/tool environment. Might be of us when you are just starting, but if isn't limiting by half way through an AP programming course, you're not learning enough. Eclipse and IntelliJ are both proper professional development environments. They will do a great deal more than you need for a while, but you can find lots of tutorials on youtube for doing basic development and getting starting. Both can be had for free. Eclipse gives you a massive toolkit that happens to be a Java IDE. It's open source, not the most user-friendly of IDEs and a bit temperamental. It's very expandable and extendable to java tools, libraries, and lots of different languages. (Eclipse can be a bit sluggish, though run it off an SSD and it is amazing) IntelliJ is a commerical tool, with a great deal of polish and has amazing performance (has for ages as well). It was originally just an Java IDE but has extensions and plug-ins for all sorts of languages and tools. There's a community edition that is free, with doesn't have all the bells and whistles, but the things missing are mainly the very fancy development and elaborate development tool stuff that you won't get into after you are a solid programmer. Given the choice for a beginning programming, I'd use IntelliJ. Though you might be best using whatever you use in class (or examples are shown in class using) until you have the basics of programming and development down.
I got fooled into starting with JGrasp. Switch to eclipse or intellij now to make your life so much easier. The faster you learn the shortcuts the better. Eclipse has historically been bloated and slow but I think it's improved a lot over the last couple of years! Intellij is really lightweight and I think it has more to offer than eclipse though some free features in eclipse might only be availble in the paid version of intellij (like built in Spring tools). I don't think you can go wrong with Intellij or eclipse...but never, ever use jgrasp. 
May I suggest the term "arbitrary" instead of "random?" Looks like a cool project!
&gt; Intellij is really lightweight I love me some IntelliJ, but I am having a hard time understanding why you would say this. It's quite possibly the heaviest of the IDEs. In my experience, Netbeans is the lightest of the major IDEs followed by Eclipe (no addons) with IntelliJ coming in ahead of Eclipse with all the necessary addons you end up needing. All that said, IntelliJ is a quality programming experience, for sure.
I'd be surpised if you could find anything that IntelliJ can do that eclipse can't. IntelliJ might be able to do a lot more out of the box but there are so many plug-ins for Eclipse.
There probably are things that you can't do. Regardless, it's much better for professionals or people who spend tons of time working with Java.
Most familiar: Functional interfaces and lambdas, some collections Least familiar: GUIs, networking
Were you supposed to link to something?
Having used both, IntelliJ is a lot more polished and things work well together, eclipse always feels like the plugins are in a separate universe. Code analysis on IntelliJ is better as is on-the-fly refactoring. Web server integration is also more flexible and less buggy, it took eclipse almost 4 years to fix a bug I filed about creating ROOT context being the default. IntelliJ support so far has been very fast, everything gets resolved within a few days, so worth every dollar. I was an eclipse user for over a decade and once I started using IntelliJ I never went back, it's that much better.
Intellij community version doesn't support any web stuff. Eclipse is better than Intellij if you're not going to buy the full version. If you're learning and not getting paid, Eclipse is definitely the way to go as not only does Intellij cost money, but it requires a yearly subscription. I've used both - there's not much difference. Most of the huge claims seem like they come from the Intellij marketing group or something. If you were getting paid I'd say try it and see, but if you're not stick with Eclipse. About half the jobs I've had use Eclipse, other half use Intellij, it won't hurt or help your job prospects to go with one or the other.
JGrasp seems to be a demo IDE for high school students. Nothing really wrong with working with it, but it's not used professionally for anything. Eclipse is free and widely used in actual industry. It's not hard to find a job that uses Eclipse as it's IDE in the real world. Intellij's free community version doesn't do any web app stuff. If you want to do that, you have to pay for it, and also you have to pay on a subscription yearly basis. There's absolutely nothing Intellij does that Eclipse doesn't do that's worth paying for if you're a high school student. As a professional developer, I've used both and don't really care if I use Intellij or Eclipse. They both work well. Since Intellij moved to the subscription model I use Eclipse for home projects because I don't want to pay for Intellij.
I'm just starting to learn java using netbeans, is swing not a good thing to learn? It seems pretty useful if you wanted to get a layout of a program pretty quickly. Again, just a beginner over here lol
To use abbreviations is totally ok if it is an well known one within the domain (like ``SQL``, ``http``, in Germany ``MwSt`` for *Mehrwertsteuer* our tax on goods and services). To introduce abbreviations might also be d'acord if you have influence on the domain. But to use abbreviations derived from interface names seems odd and false to me! First of all there is no semantic relation between a ``Request`` and a ``RqSomething`` implementation regarding the pure name - and that is what our eyes delivers to our brain. We have to recognize the origin of the prefix and put it on our mental stack. Further more what I don't see a big advantage of shorten a name like this. If you want the interface name to be part of the class name, just do it! If the interface name itself is allready verbose, one would consider to leave it totally out. Any abbreviation of such a *beast* would add no benefit at all, because the shortened name would be even more complicated to understand and deduce the interface relation. Many implementations just don't repeat the interface name within themselves. If there is more than one interface a class implements, you have hardly any choice though. Imho that should be the way to go if the implementation's name has a good meaning. If you just use it once, there is no need to remember the concrete interface - if you use it often, you will have it on your mind. And if you program against abstractions you will have the interface just written down on the left hand side of the declaration 😉 That minimizes the need to encode the origin of a class into its name. 
You didn't read the article. The benefits of this GC are simply for bench-marking and for short-lived processes (no point in spinning up a GC for a process that does something and then quits). 
&gt; If I was a high school student with little cash, no way I would pay for Intellij. You don't have to pay for CE. 
If you are new to programming, i think it doesn't really matter. TBH, you could be using notepad and java(c) :)
Look this library for inspiration: https://github.com/benas/random-beans
Hard to say, probably reflection, collections, JPA, CDI and some other JEE stuff. 
Actually it gave me insight into what API's other java developers frequently use (and which ones I should be using), which is important to me since I'm surrounded by other non-Java developers and often have to find this stuff myself. So thanks OP!
Good stuff
/r/cscareerquestions is more suitable for this, this isn't related to **"News, Technical discussions, research papers and assorted things of interest related to the Java programming language"**. Most freelancers that I know (I'm currently a contractor but not independent yet) started out as regular employees, often at consulting firms, and later started for themselves. It's really hard to be an independent contractor if you don't have a resume that proves you have the experience. 
JAXP. If you have to work with XML then you learn to do it right.
JDBC. I know hundreds of caveats of the API as well as hundreds of caveats of all its implementations. You don't want to know these things.
What kind of answer were you looking forward to?
Yeah but he somehow manages to get to the point in 90% fewer words than others.
"OK, there are some students who are awesome coders. Some of them are wasting their time at University, they should just go and earn big money. I was probably one of these people..." - Allan Kelly Wtf is this humblebrag for? 
"Added more and more" seems like a sentence you love xD *(From the commit messages)*
Streams are not a replacement for collections and lamda expressions are only tangentially related. 
This seems like the Faker library. Check it out on github, there's a Java port of it. 
Yes, it's not a very professional thing of me to do... 
I know about it, but I wanted to push things a little bit further, not only to be able to generate random individual values, but to easily create Collections, Lists, Sets, Maps, Streams using: [MockUnit&lt;T&gt;](https://github.com/nomemory/mockneat/wiki/Generic-Mock-Units)s. The ideea was to to be able to generate a String, a List&lt;String&gt;, a Set&lt;String&gt;, a Stream&lt;String&gt;, etc. all from a single source of randomness, that you can configure only once. 
I just want to add that if you can cut it, a consultant firm is a good start to get diverse experience provided you are doing project work.
Swing, Collections And Concurrency API
Would like to hear other opinions on Shippable.
I honestly started it by trolling craigslist and emailing people for crappy jobs. You want to pay $100 for a script to automate listing crap on eBay? SOLD sign me up. Sadly, the jobs all sucked and never lead to anything past crappy $100 jobs. So I finished my CS degree and got a real job making real money. If you don't have a CS degree, perhaps look into a coding bootcamp or similar to get a boost? You mention student loans, so you have a degree which is good. Just a little coding experience and you will be set.
No
`TreeMap` and `TreeSet` are very useful you want your data to be sorted at all times. Also, forget `LinkedList`. `ArrayList` or `ArrayDeque` are usually the better choice.
Really requires connections of some kind. Some element of luck involved and the ratio of difficulty increases when you don't have a well established portfolio. Thing is, consultants typically don't work with just one language, runtime, framework, or technology. They listen to client's needs and get them the best solution using the best tools for it. Your best bets would be to apply for a FT position at a consulting firm and gather some earnest work experience and connections (but don't go behind the back of the company, of course). Or try to find bite-sized jobs from various random sources (reddit, odesk, other message boards, etc). Another thing that people overlook (so be wary) are the business requirements for consulting. Marketing, gauging rates and estimates, factoring in whether to include testing resources, and things like that. Fixed rate jobs are dangerous even for the most experienced of consultants. You may take a 5000 dollar gig thinking that you'll be around 40-50 an hour when the dust settles, but depending on the accuracy of your time estimate, differences in opinion on what the contract includes (see above re: experience), or other unexpected factors (murphy's law), you may be down to 7 dollars an hour by the time you deliver code. And if that process involves pissing off the customer either intentionally or unintentionally, then you won't be able to use them as experience and it can be even more difficult to secure new work. Good luck!
Actually its a good idea to put a private constructor on a util class! FTFY no kind of about it!!!
If you are interested in the GUI side of recommend Spring with AngularJS. But the third option with Maven would definitely be helpful nearly any job you go to. I would recommend both but start with the third.
Is it me or is a better alternative to pick up a VPS and or a local server and install Jenkins? Those prices look rough (been using Jenkins for a long while and while I get frustrated with it sometimes, it's free on my PC).
Fun fact: when `scalac` compiles a Scala `object` (a class of which only one instance can ever exist), the class file doesn't contain any constructor at all—not even the implicit public one that Java compilation generates. This makes it impossible to instantiate. The single instance is obtained by the fun trick of generating a `new` instruction (JVM assembly) without calling any constructor—something a class is only allowed to do to itself. Thus, it effectively has an empty private constructor, but without making the bytecode larger by actually generating one.
&gt;Actually its a good idea to put a private constructor on a util class! &gt; &gt;FTFY Actually it's a good idea to put a private constructor on a util class! FTFY And we're back to the grammar Nazi. 
Does anyone have a good article on why misc.unsafe is used? It's been a while since I read about it
http://stackoverflow.com/questions/239732/things-possible-in-intellij-that-arent-possible-in-eclipse
J2ee, you're all about that decade-old tech eh?
That is exactly what I was referring to. EDIT: Okay, since nobody else seems to get it, let me elaborate: If a programmer is bent on violating the "I'm an all-static utility class"-contract of this class from *within the class itself* by creating an instance inside a static method (which in this case already takes a special kind of idiot), he still has the chance to catch the Error being thrown and ignore it. That line is ineffective and overly dramatic safety theater. 
This is why I've started just using interfaces for Utility classes. You get the same benefit, except it blows up at compile time instead of at runtime.
I worked on a project that mixed java and groovy, not a fan. - We had much longer compile times because evidentally using groovy required writing maven targets to compile rather than the IDE. IDE compiles are fast because it does it in the background, it's like 2 minutes vs 5 seconds. I don't know if this is necessary with groovy or not, but that's what we were stuck with. - We also had data objects in groovy but our other classes in java, it's a pain. You write java then realize you're in a groovy class and if you don't the code reviewer complains about it. You accidentally make the class java or groovy when it should be the other. Sometimes someone uses dynamic typing from groovy in their code, which we really don't want anywhere. I thought tests being in groovy were also a bit annoying, but at least there's a clear mental separation with tests, whereas data objects and controllers are often something you're flipping between. So I'd go Lombock. If you want to do Groovy, either do everything Groovy or nothing. Having half in one and half in the other is just awkward and annoying. Your IDE can autogenerate your getters/setters/equals/hashcode. Yeah, it's a little annoying. But you only have to deal with the annoyance when doing that, whereas you add in groovy sometimes and now you have the "which language am I supposed to use here?" annoyance every time you write new code.
Good job! Thank you for posting this, I'll try your library in my code)) 
How do you mean? 
Since interfaces can have static methods, if you want a collection of static methods (commonly referred to as a static utility class), just put them in an interface instead. Can't instantiate it and that's checked at compile time.
Another nonsense from good old Yegor Bugayenko aka yegor256.
You can even have a class implement that interface if you want to pull in that namespace … 
You have to work within the limits of your tools. The fact that Java doesn't support free functions means your going to have some awkwardness somewhere. In my opinion it's reasonable for someone to accidentally instantiate a static utility class and it's easy to prevent at compile time, so you might as well do it. The anonymous sub class is so esoteric that you'd pretty have to be doing it to be annoying. On top of that, there isn't a good way around it and it doesn't cause any actual problems, so I'm not going to worry about it. Honestly making the code blow up at runtime seems worse than doing nothing at all.
&gt; Actually it's a good idea to put a private constructor on a util class! &gt; &gt; FTFY &gt; &gt; And we're back to the grammar Nazi. It's actually a good idea to put a private constructor on a utility class. FTFY
Thank you, this sounds like the most clear and simple way to get going. So if I pull the war file from Intellij, I should be able to host that on Heroku or AWS as you said, right? Basically any service that allows me to deploy a war on their servers?
Cool, thanks for the reply! JavaFX is similar in creating a GUI by clicking and dragging too? I haven't had time to look into it yet but I definitely will!
yep... Government applications that suck your soul out... please kill me now.
That's a good example of a *just because you can, doesn't mean you should*
Instead of other opinions just try others for yourself. Your experience (and not opinion) is what matters most.
That's no grammar -Semantics Nazi
Lots of those might not be supported by the Community version of Intellij. But the Ultimate version? It supports all of those.
Are you learning it at school? And by any chance, where?
I thought javaFx was newish? And the old one was swing? 
[removed]
How exactly does one do this? I know that's an extremely vague question, but where would you start?
The main reason to go this route however, and I believe one of the mentioned intentions of the ability was to allow you to, instead of having a Foo interface and a FooUtils helper class, you can just put the helper methods on Foo. Why Oracle chose not to put the Objects.* methods on Object however is a mystery.
I'll say the same thing I said in the last post - how is the first thing an error? Imagine we do it your way and have a class StaticThings. Then we have another object that uses it in a method: class SpaceShuttle { void doSomethingThatCannotFail() { new StaticThings() {}.doSomething(); } Now this code blows up at runtime, even though there is no actual problem. There's no real problem in any of the scenarios, by as long as we're signaling at compile time, it's fine to be a little overly paranoid. Once we get to runtime that's much riskier. EDIT: missed the bit about the class being final. Why is the exception even necessary in this case? It can't ever be invoked.
What is the most abused aspect of the Streams API? The forEach method. There’s absolutely nothing wrong with it and it’s very useful when used correctly. The problem is that, as Java programmers, we think in terms of loops to process collections of data. The temptation is to think, “Right, I need to do this for each element in my collection. Oh look, there’s a forEach method, I’ll use that”. My advice is when you think you want to use forEach stop and think again to see whether you should be using a filter-map-reduce approach. Can someone explain exactly what they mean by this?
I actually don't know, I think there is a form builder for it too. To be honest I just use Swing when I need to throw together a GUI :p
Easier way to do this would be an `enum` with no values: public enum SomeUtil { ; public static void foo() { // ... } }
I prefer Intellij, but that's a personal preference. Try both, if you like Intellij better, and you are planning to code in done jvm based language for a living, then pay for it, it's well worth it. I have a personally license and a license provided by my company. But, like any tool, find one that gets the job done and that you like to use. Either will provide you a rich ide, but I hate eclipse.
What's your workflow look like?
I live in a big city (3M+ pop) and there's a lot of "freelancers" in Java. I work in a bank and almost half the code monkeys are consultants. They are not true freelancers because they need to pass by firms that take a cut but for the most part, there is plenty of work. Depending on you experience, you'll always find a contract it's just the wage that changes. So, to sum it up: Experience dictates pay, population dictates opportunities. Programming, like medecine, is universal work, you can find a job anywhere.
That is hilarious and actually I can see a few uses for it.
&gt; Why is the exception even necessary in this case? It can't ever be invoked. It's not necessary. It's a matter of style, kind of like a comment.
&gt; You get the same benefit, except it blows up at compile time instead of at runtime. Invoking a private constructor _will_ blow up at compile time. The only situation where the `AssertionError` would get thrown is if you accidentally added code to the class itself that invoked the constructor.
I was hoping I didn't have to qualify that statement with “unless you're a filthy sadist who enjoys torturing innocent JVMs.” :P
J2EE has been retired for a while. It's now a rather different product called Java EE. It's a much lighter framework that it was in J2EE days.
I too work with times (time series data), and if your organization hasn't learned to say that UTC is the canonical time zone, and that only even-hour offsets will be supported (and only as a downstream post-processing step), then I can guess at some of your pain. 
&gt; [...] prohibiting instantiation is not really necessary except for documentation purposes, which I think the interface accomplishes quite nicely. I agree it's for documentation purposes but I disagree the Java `interface` is a good tool for that. The `interface` construct exists purely as a high-level abstraction over operations provided by implementations. Now you can suddenly declare a variable of that type and create a nonsense implementation. You shouldn't, and most people wouldn't, but that's not really leveraging the type system to achieve what you set out to do, and most importantly, it leaves room for the question "why?" A `final` class with a private constructor (with an error) will prevent all of this completely.
True. I so long for a breaking change explicitly disallowing static fall-through - I have that trapped on my code via error-prone/findbugs or some mismatch of other plugin I setup ( I forget which exactly traps that off hand ).
Since my previous article on Java performance got over 100 upvotes, I'm posting the second part - focusing on memory consumption.
reflection is just one way
But only if they are handed an instance, which they never are. 
Same idiot can then go on to catch the Error, so what is gained? 
Collections, Generics, Reflection (but to be honest I prefer the helper classes from Apache Commons), Servlets and JSP (because I've started programming Java when they were everywhere). There's also the new Stream API which I use quite a lot now. And it's amazing how you can change the way you've organise code just by making use of functional interfaces and the "default" keyword. Collections is the most important part of the API imho. They are everywhere and picking the right implementation proves that you actually understand what you are doing, contrary to the masses that only use ArrayLists for everything. 
No, I'm talking about the deserialization part. Like gson does. 
The gain is some level of feedback instead of no feedback. At least if the idiot instantiates it and it throws an exception, it will break at runtime. If you don't throw the exception, it will never break and the idiot will continue on forever. 
Ok thanks.
Write tests first
good stuff.. thanks for posting
i had it in my bookmarks. found it here in /r/java.
Final fields (especially if your code is multithreaded), less lambdas and streams (until you really understand how they work), no long if-else and switch blocks (you can use classes and loops instead), enums may be alternative to hardcoded strings, following some coding convention (for example, Java Coding Convention), not being lazy and thinking instead of copy-pasting code. It may not shorten your code, but not sure that shortening code is what we should care about first
Why do they release two versions at the same time?
But javafx is not dead. The open source community is small but alive. The framework is good. Oracle won't discontinue it. They are even planning new functionalities. Java 9 will help. There's plenty of useful other frameworks helping javaFX dev. SO questions get answered. When that will stop, sure it's dead. Also it had plenty of books and resources and the environment is more stable than say something that delivers like Electron, or even something that fails even at paid udemy courses like your oh so treasured codename one... Edit: sorry for being blunt. I'd love to jump on your codename one hype train(if there is any), but when about 1/3 of your paid udemy course attenders say that you're only doing marketing and another 1/3 say it's outdated, sorry... You really, really make an awful impression, which javafx doesn't. JavaFX is more like, if you want it and don't have it (you usually do) then do it yourself, which imo is fair. But here you are, tarnishing javaFX reputation because it's not hyped, seriously??? When was that an argument to writing good code and being productive. No... Just no. Please, you seem like an experienced developer.... Don't ruin that
api's slightly different. Gives you chance to upgrade your code to 1.5.2. 
Your definition of dead differs from mine. AWT is dead and JavaFX is pretty much in the same boat. When we put out stuff as Sun or as Oracle it gets automatic traction, books and some visibility even without doing anything. Until recently Oracle employed people to literally go everywhere and talk up JavaFX to build a community... They spent literally millions on promotion alone and relatively to that level of spend they have very little to show. The fact that Codename One is small when compared to a well funded standard from a major company that owns the IP for Java... That's pretty obvious. But let me ask you this: our market is mobile. Whose larger on mobile devices? The small startup or JavaFX? We've been doing mobile for almost 20 years by now (since Sun Microsystems). We know JavaFX and mobile inside and out and even worked with the original JavaFXScript mobile team on their initial prototypes. My main problem as a mobile company is that JavaFX still sucks on desktop. We need it to work properly since our simulator and desktop port rely on JavaFX. In fact the desktop port is so buggy for some situations that we ended up recommending the JavaScript port for some users as a substitute (built on the excellent http://teavm.org/ ). It's a shame that there is so much activity of advocating JavaFX activity claiming the moon for a product that can't even support https URL's for media...
I'm on a pilot group for intellij at work, we currently use eclipse. We also use Jboss and so far I have found that I'm not a fan of the way intellij interacts with Jboss vs the way eclipse does and I dont like being limited to a single "project" per window. Another thing is with the IvyIdea plugin, when setting up an artifact to deploy there doesn't appear to be any ability to specify a single ivy conf to include with the deployment, so my testing dependencies and those that are provided get deployed too. I suspect that much of our setup could be (and probably should be) restructured in a way that fits better with what intellij expects, but that will probably be a non-trivial amount of work and I find the documentation to be lacking (great for setting up new projects, not great for existing ones that aren't already set up exactly as expected). A lot of people will try to claim it's a drop in replacement but for me it hasn't been quite that simple.
unit test
One thing I promised, was to keep the default guesses per second in the library for each algorithm updated with what hardware is available for ~$20,000 (USD). Hardware gets more powerful over time, and more efficient methods of hashing are found. It's important to keep up with the changes that potential attackers are using, and not stagnate while attackers get more and more advanced.
Honestly I wrote this some time ago I don't remember exactly, but It was mostly based on few other blog entries back then and then examining source code of classes I mentioned, like collections or String. I was also doing a lot of experimentation with JProfiler. As of 12 bytes object size - you may refer to stack overflow discussion in http://stackoverflow.com/questions/258120/what-is-the-memory-consumption-of-an-object-in-java
I personally find just writing sql to be better most of the time as well. However, it's really bad on a project to be having people writing queries 8 different ways. Some with criteria, some with hql, some with sql, some with jooq...what a nightmare to maintain. 
NetBeans isn't as good, but JEE support is free, and it's still better than Eclipse.
I personally go for "Can't touch this", still nazi, but more MC Hammer 
Full day? So is not 2 dAy, is 1 day!
The Java looks pretty good. Yeah it's all one class but it's not that much. I'd use a build tool like Maven or Gradle for the twitter4j dependency instead of shipping it yourself. +1 for the comprehensive readme. The whole botting-on-twitter thing is a bit morally dubious I suppose. You also nicely include your twitter handle with the project - have you checked if this isn't against their TOS?
well, it was a joke - but really, it is. I use Netbeans on a day to day basis, so my joke was exactly that. Eclipse is awful.
What did I say about it being normal??? I said IF I HAD TO DO IT ALL FROM SCRATCH it'd be 60 minutes.. man, seriously...
Lol not sure why this is downvoted. TDD has shown to produce better, cleaner code because you have a clearer idea of what you need before you write the code!
I've just started a serious project with it. Last time I've used [Spark](http://sparkjava.com) which was pretty good, but this time I have a hard dependency on Java 7 and it's hard to find a decent standalone framework that runs on that (and even with Ninja, I'm stuck on version 5.8). The experience has been OK for now, I honestly don't see the gripes others are complaining about. I'm not a fulltime Java developer, I come from the Python world. Ninja reminds me of Turbogears: an opinionated collection of state-of-the-art libraries that are more or less preconfigured for you to start building right away. It feels so much easier and more relaxed than Spring / Spring Boot and the other typical piles-o'-config-xml you find in the Java world. This said, if you can go Java8+, newer alternatives like Spark might actually be better if you're just after a microframework.
&gt; picking the latest stable version (5.8.0) and the documentation points to 6.0.0-beta2 and simply isn't compatible. Where? I have the same version and I've found exactly one bit where the suggested option is not available in 5.8 (`ninja.ReverseRouter`; in general, for routing on 5.8 you're stuck without the lambda expression stuff, you just use the alternative syntax). Everything else is the same.
I had the same problem when I switched from eclipse (single project per window). Create a folder and leave all your projects there and open the folder from intelliJ. 
[Here ya go](https://github.com/GoSimpleLLC/nbvcxz/issues/9) glad you liked my idea :&gt;
&gt; JGrasp...is....widely used in actual industry. It's ... hard to find a job that uses eclipse as it's IDE in the real world. IntelliJ...doesn't do...nothing. We can all play that game! Now it's your turn nutrecht what else can you make him say by selectively choosing words? 
Thanks for posting this, it was very useful for me when people ask me what's new in Java 8.
I tried using NetBeans, it's pretty good, about the same as Eclipse, but I've got all my settings and things in Eclipse to my liking, works just fine for me. ¯\\\_(ツ)_/¯
Shoving IntelliJ down people's throats isn't the best way to get us to switch though. I do admit though, RockMeetHardPlaces's comment was pretty witty. :\^) While IntelliJ might be more "intelligent", Eclipse does what it was made to do, tries not to do too much guesswork, and overall just works (unless I'm trying to update Eclipse, in that case I just have to cry myself to sleep).
More like a month
[removed]
The community edition of IntelliJ is free and has the search and navigation tools of the commercial version. It is definitely the way to go. It will import mvn, gradle, and Eclipse projects. 
&gt; Sounds like QA might be a problem. Because they have a mature process with frequent releases?
For OPs purposes that doesn't matter. 
[Netbeans](http://netbeans.apache.org/) is a great alternative to IntelliJ and it's fully free. IMHO, way better too. Additionally you can map eclipse shortcuts you are familiar with to whatever IDE you're using, just search for hotkey settings. To help navigate the code and figure out what is tied to what, as a Netbeans user, these are the most frequent IDE tools I use: * search for type * search for file * call hierarchy * find usages Also stepping through the code via debugging helps familiarize yourself with the code flow. Happy exploring
Thou shall not have more than two consecutive open curly braces inside a method. In other words, no more than level 2 nesting.
Netbeans is ass 
If you use IntelliJ, even the free version, the IDE suggests those improvements out of the box, its really handy for those hard-to-die habits.
No, because 1.5.2 contains mostly bug-fixes.
Really? I am still on Eclipse. I might need to try IntelliJ, does it have anything similar to PyDev on Eclipse? (AKA: Can I use it to write python apart from Java?) 
Instead of a Methodreference you could put there a lambda expression.
&gt; Seems a bit more awkward. Welcome to the world of [functional programming](https://en.wikipedia.org/wiki/Functional_programming). But Java is _not_ a functional language, they just brought some sugar to the language which makes it "nicer" to write. If you have to do multiple things, then you'd stick with a traditional `for-each` loop or use a full block lambda: friends.getIDs().forEach(id -&gt; { following.add(id); // other operations }); Although I don't suggest the above, instead I'd use a traditional `for-each` loop because to me a regular `for-each` looks much cleaner: for (int id : friends.getIds()) { following.add(id); // other operations }
Go ahead, and be sure to start a timer while you explore the possibilities.
Preaching to the converted, although the Java classes are possibly a bit of a straw-man - does anyone still think its sane to write classes with getters, setters, factories etc. If so then I think Dijkstra's comments regarding BASIC equally well apply to Spring... Also, on slides 46 - 50 the Impl classes are missing the `implements`.
As a professional I don't like wasting money.
But doing it in unrelated threads kinda is, unless someone asks.
I came to realize that application developers try to solve every issue with application-level code. So, if there's a task to fetch some data (e.g. an hierarchical tree processing with some window function-like analytics), a Java dev's first impulse is to solve it with ... Java. However, as Lukas explains, the DB is already equipped to solve such a problem so that you don't have to pay the price of heavy disk IO or networking for fetching tons of data only to transform it in Java with some "elegant" code.
I'm struggling to imagine a computer science professor teaching people to write getters and setters. They are a vastly over-used concept and have literally nothing to do with computer science. I've very rarely needed them. Class fields are generally final and get set in the constructor. Why do you need a setter to check for null - just use `Objects.requireNonNull`: MyClass { public final String name; MyClass(String name) { this.name = Objects.requireNonNull(name) } ... }
I only did JSP in my studies for a bit. I don't know what the best workflow is with that. Look if there is an additional plugin. Like [here](http://www.eclipse.org/webtools/jsf/main.php) or [here](https://marketplace.eclipse.org/search/site/JSP)
Legacy code. That's why
&gt; does anyone still think its sane to write classes with getters, setters, factories etc. I'm not sure what you're referring to here. If you're referring to code generation, then... well you're still writing classes with getters/setters etc. it's just assisted. If not... then what are you talking about?
TL;DW... is this talk is a bunch of straw-men written in Java with the intent of making basic SQL look awesome in comparison. I use SQL every day and I was still quite disgusted with the transparent infomercial tactics used to sell SQL here. I see no groundbreaking insights, either. Waste of time. 
This is seriously impressive work, a huge contribution with astoundingly detailed docs. Thank you!
SonarLint.
&gt; disgusted You should see my [other talk](https://www.youtube.com/watch?v=mgipNdAgQ3o). You'd *vomit*! ;-)
The problem is that you have a point to make, but by making it through hyperbolas, you fail to communicate the point to most people. We see the hyperbole, we recognize it as such, we don't see your actual point, and we're left with nothing, but discuss the hyperbole. It's not that we're falling into a "trap" by discussing the hyperbole, it's that everyone else not discussing it either doesn't care enough to bother, or they fall into the *actual trap* of thinking they're walking away with insight based on your fake hyperbole. "I shouldn't use Java HashMap for my giant persistent set of data, but SQL! How smart!" Only if they think deeper they'll figure out "Wait, I've never used HashMap for this purpose." At which point there are two options for those people: - Realize they have received no value from your talk. - Enjoy that you re-affirm their existing beliefs (such as not using HashMap to store gigantic persistent structure in memory because that's obviously nonsense), and spread the word, because it feels good to have a talk that agrees with you. Neither of the above points is actually exchange of insight. Former leads to frustration, and latter is duping people into spreading your hyperbolas to other people who'd either roll their eyes, or keep spreading it because it makes them feel smarter by doing so. For those with a clue, who see your distortions, we don't see what's the actual content of your talk. It's the trap of populism: it makes it easier to attract attention to yourself, and nearly impossible to deliver on your premise. Or, as the saying goes in Tao: the eloquent words are not the true words; the true words are not the eloquent words. But as professionals, we should strive to be accurate, not to be flashy, because a talk that's all flash and no (recognizable) substance fails at what it's supposed to do: exchange actual applicable findings, discoveries, ideas, that make us better professionals. When one spends a lot of time measuring the *size of the reaction* they get in social media, blog posts, live audience presentations, they sometimes confuse "reaction" for "delivered value". But those two are independent. In fact, the only measurable effect of such a talk would be popularizing jOOQ. Which is kind of your whole point deep down (or not so deep down), no?
Alright I got that implemented and committed. Appreciate the input.
Why is JavaEE considered a part of the Java platform? Shouldn't JavaEE just be a separate project with it's own governance? Honest question (from a Java web developer that has (mostly—but unfortunately not entirely) managed to avoid EE in a 15 year career)
You could have visited the GitHub page and seen some (slightly) more robust examples. ;) But I agree, some more/better examples are needed. 
I agree. I have used Drools for years. But there were some things about Drools that were consistent pain points: (1) No business user was ever going to define rules in their DSL as much as JBoss/RedHat promised they would; in the 7 years that I've been using Drools, I've never seen or heard of that actually happening (2) So, developers are defining rules and now they have to learn another (not super trivial, and very specific to Drools) language (3) Many rules libraries are not huge and rules rarely change as much as people would like to believe, so rules versioning is often an unused feature - although as you correctly pointed out, versioning and externalization of rules can have real benefits (if used). That being said, Drools is a very powerful, flexible and feature filled rules engine. But all of that comes at the cost of complexity. And there are many cases, when you just don't need all of it (usually, just a fraction of it). I think in those cases, a much simpler approach is a better choice - something more akin to what Martin Fowler described in his Rules Engine post: https://martinfowler.com/bliki/RulesEngine.html
its a bit basic for a developer conference.
I'm not entirely sure. I think the whole concept is just going right over me though. I'm just tired I think. I've been on this course the entire day. I'll probably just go over this part again tomorrow.
/r/javahelp is more suitable for these types of questions **if** you actually give us some information to work with. 
It was a response to this: &gt; But what do I have to do to keep Eclipse from crashing when I do almost anything? 
Well, as I said in the talk. It's a story. I was telling a story. To make a point. People do that all the time. You were expecting facts, research, science. Well, I'm sorry. I don't do that. I tell stories. There were 23 other talks at that conference. Watch those if you prefer their style. &gt; Nobody ever makes a choice like that in their project, because those aren't two actual alternatives to the same problem. I've seen too many SQL-backed algorithms written in Java that could've been re-written in simple SQL. My talk was aimed at people who have this code in their code bases. You don't, and that's great.
(disclaimer: I work for the company behind jOOQ) &gt; I find JOOQ's syntax to be pretty ugly That's totally understandable. It would be really great if an external DSL like SQL could be embedded in Java in a more straightforward way. SQLJ did this to some extent, but failed like most preprocessors did. &gt; Is JOOQ that much better, than either raw JDBC or hibernate? First off, you can do string-based jOOQ like this: Result&lt;Record&gt; result = ctx.fetch("SELECT a, b FROM t WHERE id = ?", 123); There's also a mini templating language that allows you to compose SQL strings easily, so you definitely get something over JDBC. You cannot really compare jOOQ with Hibernate, as the two tools [solve different problems](https://blog.jooq.org/2015/03/24/jooq-vs-hibernate-when-to-choose-which/). Now where jOOQ (and many other internal DSLs, including JPA's criteria API if you want) really start to shine is when you compose SQL. For instance, you can extract parts of your SQL queries in functions: ctx.select(T.A, T.B).from(T).where(T.ID.eq(123).and(dynamicSQL())).fetch(); Your `dynamicSQL()` function can easily and type safely construct a predicate for this query. This is just a simple example. Extract a higher order function and you can even abstract over tables / columns. [Example here](https://blog.jooq.org/2017/01/16/a-functional-programming-approach-to-dynamic-sql-with-jooq/) Now, add support for another database (not everyone does that, but some product vendors want to support both Oracle and MySQL, for instance), and the language abstraction in form of an expression tree really shines. Then, add stored procedures to the game ([example](https://blog.jooq.org/2016/11/08/use-jooq-to-read-write-oracle-plsql-record-types/)) and there's almost no way back. I don't see the advantage of using JDBC here. JPA might work better if you had a code generator for all the annotations (is there one?), but doesn't cover all stored procedure features from all databases. &gt; then augmenting with other tools to solve pain points jOOQ solves a lot of pain points, but you may not have them, sure.
&gt; (disclaimer: I work for the company behind jOOQ) Yeah, I knew that. I regularly read what you have to say on all things SQL and find it enjoyable and useful. It's a bit late here for me to fully engage on what you're saying, I'll have a think about it tomorrow. Thanks for the detailed reply!
Have you tried raml to document web services by any chance?
&gt; Yeah, I knew that Thanks for the nice words and feedback! I just add this disclaimer in case anyone else who's reading this didn't know. I think it's always important to disclaim such bias. Looking forward to tomorrow.
There's a lot of _internal_ fixes/improvements. Oh - and most important of all - COLOURED OUTPUT :)
It reduces mutable state in your programs. This implies less moving parts, which in turn should mean less bugs, and makes them easier to parallelize. The Functional Programming style introduced in Java 8 (with at least some concepts derived from category theory) comes at the expense of having to understand a limited set of common abstractions (such as what map / flatMap / filter etc might reasonably be expected to do).
You do that yourself ? 
That thing you quote is about bytecode interface. What JVM chooses to do with actual layout is up to JVM. Allocating 1-byte slots for booleans/bytes, and 2-byte slots for short/char is trivial, does not require any JIT optimization, and can be and is handled statically during class loading.
There are none. The guy has discovered that closures can translate into a performance hit and decided to write a cleaner implementation. It's nice code, don't get me wrong, but there is _nothing_ high performance, low latency or slim profile about it. Simply not shitty java code. (to be fair non-shitty java code is already ahead of 99% of the code out there, so thumbs up for that. Is it worth adapting yet another library just for that? Don't think so. Target audience for high perf futures are happily living with ring buffers and disruptors for a long time already.)
My point is, IF you want to become well versed at something, practice it DAILY. The best software guys I know contribute to work, public open source projects, and always have some things on the side they are working on. 
This. FP is just the natural consequence of immutability. Parenthesis parties, Optionals, Promises, map/filter/reduce, Monads, etc. are all just what you come up with when you make the data immutable. Immutability is ultimately easier to reason about (which is counterintuitive to most of us who learned to code using mutability.) Any function I write is completely decidable from its inputs. I don't have to worry about any piece of local or object state changing part way through. Eval (e.g., in your debugger) always returns the same results. Your unit tests are actually proofs. If you want to get philosophical, the universe is immutable. Each new moment is a recomputation of the state of the universe with time + 1 and the previous state as input. You can't get a different state without a new time. All that said, I think there is a case to be made in Java for local mutability. e.g., if you have a function that contains a for loop that only alters local variables, use an if/else to assign to a final variable, etc. then you're going to get better performance out of the JVM is many cases. I'd argue that as long as a function doesn't alter any parameters or return something mutable, then it's still functional. 
The OP actually goes into some detail about this. https://github.com/traneio/future/blob/master/CONTRIBUTING.md#analyzing-performance Closures and method references potentially introduce memory overhead and often introduce CPU overhead because the JVM has to figure out what is going on with the indirection. Sometimes, this can be free, but not always. The safer thing to do is to avoid them. That being said, if you are doing anonymous inner classes anyways then you won't get higher performance than closures can offer. Anonymous inner classes are pretty much the worst case when it comes to performance.
One of the first introduction to lambdas posted by somebody at Java went into detail on how anonymous inners would be faster in certain cases. That might have been pre-Indy though. I know that made a huge difference.
eliminating certain types of closures. Example 1: list.stream(entry -&gt; entry.toUpperCase()).collection... Good. A single capture instance will be created (static final, in effect) that can be easily parallelised, reused and considered threadsafe. This is where stuff gets faster. And inlined by JVM. Example 2: final Logger localLog = logger; // this way for effect list.stream(entry -&gt; { logger.log(entry); return entry.toUpperCase(); }); Bad. Each time the list.stream site is reached a new closure has to be created to capture the localLogger reference from the context. Can't assume to be side-effect-free and threadsafe anymore as well. Has a memory barrier cost here as well, but I won't go there.
[removed]
Yup i will try to engage with Github projects. Thanks.
&gt; But I don't think the comparison to Java is fair. I (the speaker) totally agree. But see, why do I keep seeing exactly that kind of code in enterprise software? The point of the talk was to emphasise *"don't do in Java what you should have done in SQL"*. &gt; a RESTful API in Java, to how you do it in SQL Well, if you insist, I'll create one in PL/SQL for you ;)
yep :P
Every major IDE does this.
&gt; It's a different IDE You can add both plugins to the same IDE.
My understanding is that if it can inline the anonymous inner, it is slightly faster than the Indy implementation. I know I saw a article on that, but it is probably very dated by now. Aggressive run time inlining is probably the single greatest thing HotSpot does for any construct.
Functional programming is a completely different way of approaching representing a computer program's job than imperative programming. Imperative programming generally represents the computer's work as a series of operations against a state machine. Perform this operation... assign it to this location in memory... etc. In short, it tells a computer exactly how to do something. Functional programming defines a computer's operations as a series of data transformations/set operations. Then, the underlying language (LISP, F#, Closure, Java Streams) takes care of the details of how to perform the tasks of the computer program. So, functional programming just defines what the computer should do, not how to do it. See also: The structure and interpretation of computer programs. 
"Must-learn" 
So you hammer your nails with a screwdriver because you don't want to waste money? What a waste of time.
It is generally not a bad idea to start with a learning platform, but you might feel that in some cases you do repetitive tasks and at that point, a more powerful IDE can help you. I started to learn Java with Eclipse, but I had problems with some integrations and thus started to look for other options: * Netbeans * IntelliJ If you work with native Java any of these IDEs are good, but depending what you want to do further on, might help you choosing. There is Android, WebApps, other JVM languages, Language Specifications, Language Modelling, etc. The most selling point for me of each IDE is: * Netbeans: simplicity * Eclipse: versatility * IntelliJ: productivity 
&gt; New to programming In the long run it's more important to learn how to program and actually make things than learn an IDE. That said, practically, you will benefit from learning an IDE. I'd go with Eclipse specifically because there is no paid version and you are new. Maybe someday when you know you are in it for the long haul you try IntelliJ and the paid version of it. One piece of advice I do that is that your project be built by a build tool rather than your IDE, that way you *can* switch of you want to. So that's Maven or Gradle (or Ant). Both IDEs can understand projects using those tools.
I recently did the OCA programmer exam, my preparation was mostly done with this book https://www.amazon.co.uk/d/cka/OCA-Oracle-Certified-Associate-Programmer-Study-1Z0-808/1118957407 For the record I got a 82% score with a little study from that book, it may be possible to find it for free on other sources. Of course be aware that it is illegal to do so. 
Data structure: Tree or Graph (you will need to either make your own or use a library). Algorithm: Tree traversal, BFS, DFS, Djikstra's shortest path algorithm Next time, please follow the **hints** and address such questions to **/r/javahelp**
Which has happened to me (in real life) a whopping zero times in 4 1/2 years at this job. Never happened to the guy who handled that stuff at my last job (3 yrs). So, basically never. I'm just pointing out the absolute worst case scenario.
Ultimately its like only using statically imported static methods and no fields and anything that was built using fields, all local variables are final. Replace inheritance and abstract classes with interfaces full with default methods. Your only control structure is recursion. Imagine some sugar syntax and a standard library full of more static utility methods around that. The resulting code is pretty much what drives people away from Scala to Go so that only FP-purists remain there.
Rx is pretty different from `Future` from what I've seen, but I imagine it's possible to compare performance for similar tasks. I'd be glad to accept pull requests adding RX to the benchmark suite :)
&gt; Any function I write is completely decidable from its inputs. Another phrasing: Any bug in a functional program can be detected by unit tests. Also worth saying: you don't need to be anywhere near pure, to gain the benefits of immutable data. Even if only some classes/portions use immutable data, it tends to incrementally improve the overall program.
This library is just an implementation of the `Future` abstraction; it doesn't have integrations with any particular network library. It is designed to integrate with them, though. `Promise`s are meant to be used as a bridge between callback-based APIs like NIO libraries and futures.
[This FAQ](http://trane.io/#traneio-future-faq) gives some context on why I've decided to create a new Future implementation after analyzing the current alternatives. Please let me know if you'd like more details on it.
don't tell me, I just translated it for you... chill dude
Thank you for the link :)
I will be messaging you on [**2017-03-07 09:55:24 UTC**](http://www.wolframalpha.com/input/?i=2017-03-07 09:55:24 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/java/comments/5xk0j0/java_created_a_program_to_get_tons_of_real/del55qo) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/java/comments/5xk0j0/java_created_a_program_to_get_tons_of_real/del55qo]%0A%0ARemindMe! 14 hours .) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! del569i) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Well OK then. I like NetBeans too!
In general anything that reduces memory allocation is going to improve performance. Microsoft is still kicking themselves for making `Task` an object instead of a struct.
I've used http://enthuware.com/. Enthuware offers a solution to learn the details without repeating yourself. How? Very similar environment to actual examination with automated feedback. 
I think people should explain the rationale of their downvotes. Nothing the parent said is wrong, so IMO doesn't deserve downvote given the question in a java sub. The emphasis should be on immutability and constrained side-effects, but other than that it's all true.
Thanks :). My post is probably exaggerating a bit too much or the offensive tone.
&gt; the latency of breaking things up You mean the laziness of doing proper separation of concerns and just do it the "easy" way? Yeah, that's not gonna come back to bite you in the ass in any way shape or form, I'm sure........ If you really need more arguments than this here's a good starting point https://en.wikipedia.org/wiki/Separation_of_concerns
&gt; You mean the laziness of doing proper separation of concerns and just do it the "easy" way? Haha. That's not quite what I meant. I'm more wondering when the cons outweigh the benefits -- whether that is project size or something else.. What do you think?
&gt; when the cons outweigh the benefits That' s a better way of putting the question, even if I still think your intention is exactly what I described earlier on. But I'll play along if you want to pose it as an academic curiosity: * If you plan to write it once and never ever again work on it , then don't mind about doing good design or following proper procedure. * If it's a project that you're going to be working on for a long while (even a week or so) or one that you (or anyone else) might have to come back to and change in the future (ANY amount of change that is greater than "fix a typo"), not following good design rules will 8 out of 10 times cost you a large amount of extra time, overall than it would have if you just did it right the first time around.
Hmm, thanks for the reply. But I think your answer is geared towards a different question (which maybe my question wasn't clear). I understand the benefits of separating concerns within code. My question was about separating concerns with servers in an environment. Ex. 1 WAR (for the web app) and 1 JAR (for business logic) Would I always want to run those on *separate* servers Some of what you said applies, but i'm not sure changing code &amp; changing this design are the same
&gt; Would I always want to run those on separate servers No, you'd only do that if you have very specific reasons for it. For example: 1. Web (WAR) is expected to be hitting huge volumes of traffic. You setup a machine with tons of RAM and huge network bandwidth to handle that. Or you just have dozens of cheap hosted machines each running one instance of your WAR (much more common today). 2. Logic (JAR) is expected to consume ridiculous amounts of processing power. In this case you setup a machine with a powerful CPU, massive parallelization, huge CPU cache, SSD for storage (or no storage at all if you can only use a small RAM disk instead). You can see how here we're making sure each component runs on an appropriate ambient to it's needs. But as you can see, these are VERY specific circumstances. And even then, the maximum goes that premature optimization is a terrible idea (unless you absolutely know for sure that you're going to run into problems) http://ubiquity.acm.org/article.cfm?id=1513451 So, in resume, 99% of the time you should have things running on the same server and talking through loopback (or any local) interfaces instead of having to use physical network communications (cables or wireless) to communicate. And yes, your question wasn't clear at all, at least for me and people upvoting my first comment.
:)
C'est la vie
First of all, you're assuming that the tiers are physically separated (your posts below). That's just wrong. The tiers are for separating out things into little organized pieces. The reason for this is maintenance. You want cohesive units that manage the system in a predictable and repeatable way. Take the MVC pattern, for example. Is it quicker to call Java directly in your .jsp (ftl, vm, etc)? Sure, but it's next to impossible to test and because it breaks the "rules" it's not predictable for the next guy who comes along and has to fix it. It gets worse when you mix and match. I deal with this on a legacy enterprise system on a daily basis. Guys who wrote it 10 years ago littered the .ftl with tons of copy/paste logic. &lt;# if (isLoginUser == formUser &amp;&amp; formUser.isBusinessLogic) || permissionUtil.hasAccess(loginUser, formUser) || loginUser.isAdmin&gt; &lt;#button1 /&gt; &lt;#else&gt; Text instead of button. &lt;/#if&gt; While this might work on that page, and the 30 other places that different variants of the same business logic idea exists, it's not even close to maintainable. Every time we add a new feature, there's a regression. Not for lack of dev testing or QA efforts, it's just not possible to catch all the seemingly random things that differ. Patterns = good. Predictability = good. The whole "separation" is about logical separation, not physical separation. That can happen to, but there's no good reason to do it unless you need to.
I can kind of see what you're getting at... But... If you try your best to follow the "singe responsibility principal", ideally you'll arrive at what you're asking about. If, for every class you write, ask yourself one question, "what is this class trying to accomplish?". If there are any "ands" or "alsos" in your answer, break it into multiple classes. After following that exercise, you'll ideally end up with the separation you're describing. The real advantage you have is making your code understandable. Not just for other people, but for you too. That future you that has solved most of life's problems snd hasn't had time to think about what you did 3 months ago. Proper separation of concerns within your code make it easier to reason about.
&gt; I mean, I understand and appreciate Docker when developing, but in production? Why not? We use it in production and it works perfectly? &gt; Spring Boot already does an awesome job packaging the whole app into a single, executable jar. But a .jar itself isn't isolated. The idea of a container image is that it's a complete self sufficient runnable application that contains all it's dependencies. This of course includes the .jar but also the Java VM version you want to use and any native dependencies you also want to deploy. 
I moved away from using that plugin to simply having the Dockerfile in the root of the project. [This](https://github.com/nielsutrecht/whoami/blob/master/Dockerfile) is an example of such an extremely simple Dockerfile. This makes it in my opinion much easier to integrate these builds into a CI workflow (I wrote [a blog post](https://niels.nu/blog/2017/spring-boot-docker-traefik.html) on how I build the above application in Jenkins) while still being able to build the image manually. 
Can you give a bit more information on what you consider the "web" and "business logic" tiers and how splitting them up into different applications would work according to you?
:D
One thing I noticed is that the Future api looks more intuitive than the CompletableFuture one. I've been using CompletableFuture for a while and still sometimes takes a while to pick the right method. map/flatMap on the other hand are the same names used in Stream api so I find them more convenient. 
Do you have anything you'd like to discuss right now? Or is this for future reference. Maybe you should give it a try and ask the question here. I'm more than happy to discuss it. And by discussing it in the open, it gives people a chance to learn.
This is bound to result in improvements to performance monitoring tools. 
~~So what ser~~ :)
if you wrote a post about one of these topics, i would upvote for visibility for other experts to chime in.
I would like to know also! This is not Java specific, but still a good resource: https://groups.google.com/forum/#!forum/mechanical-sympathy
&gt; besides going to conferences Youtube. Unfortunately don't know of a good discussion forum.
The javadoc for CompletableFuture is wordy to say the least but c'mon what's unintutive about thenApply (map) and thenCompose (flatMap)?
People downvote because they think discussions are popularity contests
I've developed a small recommendation engine using neo4j and it integrates perfectly with spring. Orientdb seems very interesting especially for its licensing but i think neo4j is a more robust solution even if it is just a feeling.
At work, we're excited for the fix to MNG-5958. So yay there. :) Thanks, Maven devs! (Just to be clear, that's not snark.)
Your example sort of underscores the point, though. Gögle.com and go+umlaut+gle.com *are* different URIs, even though they have the same visual rendering. Maybe the normalization is there to guard against trickery? (ie. I show you a link to a URL that looks like something trusted, but use combining diacritics to actually take you somewhere unsafe.)
There's a chrome plugin that puts one there too. No JEP needed. https://chrome.google.com/webstore/detail/javadoc-search-frame/mfgkihmpcjjnijmkchojlbccbmhcdfcd?hl=en 
Just stating the obvious, but this has nothing to do with microservices. This is a solution to the "But it works on my machine"-problem.
RFC 3987 Section 3.1, Step 1 c) says: &gt; c. If the IRI is in a Unicode-based character encoding (for example, UTF-8 or UTF-16), do not normalize (see section 5.3.2.2 for details). Apply step 2 directly to the encoded Unicode character sequence. The NFC conversion only applies if the IRI is written, spoken, or otherwise not already in Unicode. The more I dig, the more I'm becoming convinced that this is a JDK defect.
[removed]
Right, but some methods like: log.info("start"); require stack trace to find the caller class/method and StackWalker is a good candidate.
Perhaps intuitive is the wrong word here. map/flatMap is just more familiar once I've used Streams all day. A lot (most?) promise libraries and RxJava use those names.
Good 
Don't bother, it's an *advertisement* for *his colleagues* book.
What are you like 11?
Once again the reasoning and eloquence of redditors astounds.
Just say no to crapps.
You're right. We're looking at adding this in Log4j 2 for better performance when you turn on location information. We already have fallback strategies for older versions of Java, but the new API is a lot faster than using a Throwable. Plus the existing hidden APIs similar to this don't give as much detail. Edit: https://issues.apache.org/jira/browse/LOG4J2-1359
Time for a new sub?
Jlink, like other people mentioned, is the closest to this feature, but still doesn't put everything into a single binary like golang. However I get the feeling that's the direction java is heading to as they've already started with AOT support in Java 9 and will likely expand that in the future.
Anytime someone gives me shit about writing a game in Java because it's slow or a memory hog, I now have a video link to refute them wholesale. 
Is that due to the fact that user code in Unity has to be written in c# which runs on mono and is much slower than java or even Microsoft CLR? 
Read all Netflix team does. http://techblog.netflix.com/?m=1
Makes sense. The performance intensive code of unity is written in c++ and then unity exposes a c# API for user code. That works great for most games because for game specific logic often isn't a bottleneck. Clearly your code needs all the performance it can get. Have you thought about trying unreal? User code in unreal is c++. It's also open source so you can modify the engine directly if you want to. Edit: it looks like you're pretty far along though and if java is working for you, then I'm not suggesting you should change it. 
Security. No real world implementation was sandboxed enough.
Java is (reasibably) secure for lots of usages. But it is pretty easy to write an insecure code in it (harder than in C, easier than in coq but there still lots of possibilities for a programmers mistake). But this was not the issue with applets. Browser way to embed applets (and remember that the "applet" sent by the server could be any binary blob malformed to do evil) was never secure. Bug after bug appeared.
I looked into the code of toASCIIString() and saw that it uses NFC. I don't know why exactly, but I think it's a fair choice to do so as there's no reason to assume you can make a perfect round trip with a toASCIIString() method and back to URI. toASCIIString() makes a valid representation and that's just what it is: a representation.
Finally!
RxJava is a reactive streams library while Vert.x is more of a framework. The two work together well enough.
That's certainly how we expect to add support in practice for 9+ APIs. The existing Java 9 Maven configurations are rather hacky still, though. Thanks for the links!
&gt; Ex. 1 WAR (for the web app) and 1 JAR (for business logic) If you know the only things using your business logic is the web tier, there's little or no reason to do that. There is a reason to do it this way, but it's a lot more work. You have to set up a whole new data/messaging system between the web layer and the business logic layer, which is a ton more overhead. But you could do this if you have more than one front end that was interfacing with your business logic. For example, you have a web front end, and also an android app, and also an iphone app. You want them to all use the same business logic, but the steps in displaying the data are totally different. It's still a ton of work to do it that way though, a lot easier to just keep your business logic in a separate source code repo but run it on the same server. Maybe if want a 3rd party to be able to access your data directly without an interface?
RIP. If only the applet platform didn't suck so much, we could be scripting web pages in a real language right now, not JavaScript.
So when is flash going to follow? 
will the Java is slow meme *never* die? 
I doubt it. "Java is slow" circlejerk is still going strong.
Who cares, they didn't support SQL anyway.
It's much easier to like $YourFavoriteLangauge when you compare its latest features to the features of some other language as they were 5 or 10 years ago. It rustles my jimmies when I hear about Java not having some feature that Java 8 totally does and then to hear acknowledgement of this fact with a, "I meant Java 7." I guess we're just going to pretend the last 3 years didn't happen? Also when I hear that Groovy can't be statically compiled. It sure can.
What libraries are you using to make this game? Interested in the stack a bit because I might be interested in writing my own game in Java sometime. Also any tips on how you managed to make it so performant? Would be an amazing learning experience if you wrote an article about it.
I wonder how your combining character got past the call into Normalizer in the JDK's implementation of URI.toASCIIString... that sequence isn't NFC. Edit: derp. It's because the URI has been pre-encoded. I wonder where that's happening... perhaps in Path.toURI?()
Your Java code maybe outperform Unity in this small game. But for larger project (especially 3D game), I doubt that your Java code is faster than Unity in both terms runtime speed and development time.
When I want to write a game in Java, I usually go with LibGDX, which I recommend. Not sure how it affects performance though.
I wish all games had 'Show Memory' option :) Sorry for being negative, but all I see is very choppy scrolling/zooming of some dots, and terrible NetBeans UI. Those icons :(
Not a 3D game, why over-engineer it? As far as development, I'd say that I've invested one man-year of coding into the game. It's been mostly artwork. It's basically Master of Orion with 50,000 stars. How is that small?
I don't know, but it's kind of fun now especially if you are an experienced coder because we all know it's not true. I mean, I guess it's a powerful meme if you are a programmer who doesn't use Java. It's easy to slag on other people with it.
3 billion devices run Java, and that's why I drink.
nice explanation, worth a read
You're comparing apples to Buicks. And, yes, Java can be nearly as fast in 3D games as Unity. The difference comes from having a constant 3D engine code base that can be continually tuned and refined (Unity) versus engines that inevitably, are developed from scratch (Java). Unity is transpiled into C++ for its specific target platform whereas Java is interpreted. Transpile it and you will have results similar to Unity. Java also has a greater ability/flexibility to deal with texture management. Still, you're arguing about two high-level languages/toolkits. If you're concerned about performance, especially with 3D, you're going to work with C++.
Value types can't get here quick enough.
Have you ever considered that the choppy animation may be due to the video capture software? Just sayin'
oh man, I wish I could upvote this 20 times
I tend to agree with that guy... it's not a knock at you or the work you put into this, he's just making the point that from our perspective we saw you making a video about how performant your game is, even though it was running at about 5 FPS.
If you're not using OpenGL then how are you drawing to the screen? Just straight Canvas?
Yes. Pain in the ass, but it makes me think creatively. Java 9 is supposed to have a much faster Graphics2D renderer, so I'm stoked about that!
Fair point. Unfortunately, the galaxy map is animated (twinkling stars, ship travel lines), so I can't just drag around a static image without removing that feature. I could probably turn animation off if I zoom out to a certain point and switch to a static image. 
Wow, mad man. Very impressive, didn't realise you could get such performance from simply drawing like that.
Right.. This one? https://trends.google.com/trends/explore?q=scala,golang Scala have rock solid constant level of interest while, go have like 2,5y to catch up. 
He didn't even use lwjgl, with it he can pull billion stars easily.
But who „most people”? Who „we (see, recognize, etc.)”?
And if that is improved (with new modes of GC and value types in Java 10) we still have the "Java is verbose" circlejerk as a backup. If that is also resolved, we'll have to go back to basics, like the "all OOP sucks anyway" circlejerk.
Isn't a large part of why Unity games can easily (keyword here) be slow is due to the fact that the update and draw all happen on the same, single thread? If so, that's completely due to how the engine was architectured and nothing to do with the language used. Edit: Though you can argue the version of mono that Unity is using is forced to also use a slower GC implementation. 
If the meme was programmed in C it would have died long ago.
&gt; Right.. This one? https://trends.google.com/trends/explore?q=scala,golang &gt; Scala have rock solid constant level of interest while, go have like 2,5y to catch up. Sorry, I'm having trouble understanding your reply. I think I'm missing some context. This is the thread I'm sourcing for my context: https://www.reddit.com/r/java/comments/5xsjd6/simply_explain_functional_style/denxdyv/?context=3&amp;st=j018733p&amp;sh=f4975fa4
OP's comment certainly doesn't read as if it comes from someone who's ready to shit on everyone else's stuff... Guess there's always people who take criticism like shit, too!
He also didn't give you up, run around, or desert you! How sweet!
Of corse they are not using stack traces. I think the idea here is that they now would have access to information about call stack that previously could only be determined at specific instrumentation points. Now the tools will have full visibility to call stack with little to no effort instead of just the limited instrumentation points. I would sure hope they incorporate this 
We're waiting for the last Flash site on the Internet to move to HTML5: http://2advanced.com/
dude, put some pants on
They could be running PHP and you could be snorting shattered glass as a cheap crack substitute instead. Enjoy that crafty artisan beer and consider it how good you've got it.
Knock knock...
Soft deleting is a mechanism to hide the deleted records. That applies to Reddit posts as well. When you delete a post, the entry is not physically deleted, it's just hidden. Your solution would not fit very well if you still need to show the deleted entries for some users, like admins.
Well, I hope you open source it soon.
So if you have 50 tables that need to use this technique, you need another 50 history tables. And you need to do the same for join tables to preserve the constraints for many-to-many associations. So, if you want to load both undeleted and deleted records by a given predicate, you need a UNION ALL between these two tables. Your solution sounds more appropriate for Archiving than soft deleting.
Sounds very interesting. Would you mind writing an article on this topic?
We're actually doing IoT in a tomcat application, but we're over websockets (which is a connection that starts as HTTP and upgrades to WS). Of course you can do other protocols in straight java, MQTT or COAP or whatever but the framework won't help you there. I'd suggest look for a library that does your protocol and include that instead of trying to invent your own.
&gt; faster (original table has fewer rows) This can be mitigated by partioning the table on the "deleted" column (if supported by the DB).
&gt; Your solution sounds more appropriate for Archiving than soft deleting. How do you define the two?
These graphs are all terribly flawed. I mean, sure. An OSS library that is used by other OSS libraries, like JUnit and Apache Commons and... Well... Is that really an interesting metric? Wouldn't it be much more interesting to know how often libraries are used by everyone else?
Right. I once had to tune an application that had to graph up to one million Point 2Ds. It would run out of heap somewhere around 10-15K while trying graph, and they were wanting to purchase a 3rd-party application and write data feeds for it. The application was just creating Point2Ds as needed and throwing them back to the GC when it was done. It was extremely inefficient, to say the least. To save memory, I converted the Point2D lists to float[] arrays for x &amp; y. Then, since I couldn't use Collections.sort() anymore, I wrote a custom quicksort that would sort the two arrays based on the sorting of one array. Then I optimized the drawing of the points so that only points that were on a different x,y display point would graph. Suddenly, the whole thing loaded and graphed like lightning and I gave a demonstration graphing 1.4 million points. It was faster than the 3rd party package, so that ended that foray. That's an example of why you have occasionally to break OO. 
Author of the post here. &gt; Wouldn't it be much more interesting to know how often libraries are used by everyone else? That's exactly our intent: the badge shows you all the other open-source repositories that use the current repository. That includes both other libraries *and* applications. We're not including private repositories in the count at the moment, due to privacy concerns, but the majority of repositories in our index are end-user applications, rather than libraries. Admittedly, there are improvements we'd like to make to the badge. For instance, we think it'd be really great to show people the list of repositories that depend on a given project. Does that clarify things at all? 
I would check out Golang. Great for server programming.
We have an "internal CA" that is pushed to our laptops through Windows Active Directory trickery. I'm trying to find out who's in charge of those and get them to issue some out to our servers. Right now our certificates on (internal) test servers are issued to CN=chris and like all the other fields are "asdf" and it expired in like May 2015
Stellaris, a 4x space game. Doesn't have more than 1000 planets. You can mod in more but it's done with a "Do at your own risk" warning. So 50k in a standard game is somewhat impressive.
I wrote this post out of frustration after realizing how easy it is to render an Excel file in Spring. There are a lot of tutorials on the internet that cover how to do this, but they all involve a lot of extra "fluff". I'm hoping this will help developers who just need to "get it done" in a simple and efficient way. I'd love to get your feedback!
[removed]
recomendation: Use nginx to serve static assets and proxy to the war/jar.