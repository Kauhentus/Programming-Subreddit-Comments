When you say you want to clone the set, are you meaning you want a deep copy wherein every internal element in the set is cloned or a shallow copy where you have a new set, but the objects in that set are references to objects in the input set? The latter is simple, create the new set and add all elements in the argument set to it. If what you want is a deep copy, you're not going to get that by simply providing a clone method on the Set because the cloning has to occur in every element in the set, not just the set itself. A couple of techniques are possible if you want a deep copy. One would be to create the new set, iterate through the elements in the argument set and clone those elements. This is what you would have to do if you just implemented the clone() method on your set. But then a clone method must be available in each of the elements in the set as well. And if those elements are themselves containers or composite objects, they'll need to be able to clone too. Another option is to create an ObjectOutputStream built out of a ByteArrayOutputStream, serialize your input set to the output stream then create an ObjectInputStream using the bytes captured in the ByteArrayOutputStream and load the object tree back in. This method works if all elements in the set/object trees are Serializable and will construct all new objects. If you don't want to implement the Serializable interface then there are also some libraries (like XStream) that can export an object graph using straight up reflection that can be read back in. XStream works well in the context because it creates an XML stream/string of the object tree which carries actual class names, so that it knows exactly what classes to reconstitute when read back in. I've used this approach on occassion: XStream streamer = new XStream(); MyObjects x = streamer.fromXML(streamer.toXML(myObjInst)); 
No - I'd actually already dropped that, but didn't come back here to update it.
Good point - for the code in particular - it's only a matter of time before the "why isn't it working?" question comes up - and then the answer is obscured behind "is the request context empty?" and "does the request context have the attribute?" and "does the map have the item?"... At which point the code's going to have to break back down to the other two versions anyway... 
No I do not want to create a deep copy. (That indeed would have the potential to break the application xD). I should've abstracted it away, this post is purely about the Cloneable interface and how it not provides a .clone() method. I will edit my post to clarify my point more clearly. 
As a reformed javascript dev, you will probably find [GWT](http://www.gwtproject.org/) of interest.
I understand that it's a different tool (and has a larger monetary per install value) You put an arbitrary limit on the number of devs for no reason. By your own admission, you don't buy ten copies for a team of 10. But why not charge per company OR individual? Offering lower pricing sounds enticing, but many people are not accustomed to haggling over the price of software (which is effectively what you're introducing). All I see is the sticker which is very off putting. Also, Java is one of those inherently cross platform things. It's partially why I like Java so much. Charging per platform makes sense when you look at it from your perspective; however, from the developer's perspective, they chose Java because it was cross platform. You may consider just baking in the cost for all 3 platforms in 1 price. Raise the price if need be, but just include it all. Anyway, I'm not a marketing guy so don't listen to me, but those are things that would drive me to be more interested in your product. Quite frankly, my company might be able to use your tool, but I wouldn't want to sink that cost into it and be wrong (or rather, I don't want to be the guy to suggest dropping $14 grand on a product and be wrong). And no - a 30 day trial is not even close to sufficient. It'd take 3-6 months to see the product ship to a customer with new packaging at best. A true evaluation would happen a year down the road.
Well, that is a very real problem, to be sure. I didn't get from TFA that this was the problem they were trying to solve, though. Well, we'll see how it comes out, I guess.
Great tutorial! I've used watir with webdriver for ruby. 
I can see it being useful for default methods. For example, you may have an interface with a public method doX, where doX has a default implementation which calls method doY. doY has a default implementation, however you don't want users of the interface to be able to call doY directly, so you make it private.
That is a valid point. I guess it is a consideration seeing as how often null's resulting in NPEs end up generating an escape out of a process flow that may or may not be handled correctly. Granted that can be prevented by avoiding coding that can trigger the issue, but if that was happening normally we wouldn't continue to talk about NPEs. But it brings up an interesting question, if a method can return **null** instead of a valid object, is that effectively breaking type safety as well?
Yeah, I was just reading up on them myself and would agree that is the only thing that makes sense in the current state of the language. Another thing I thought of, and I am not sure if it's sensible - what if they extended the language in some way so that you could restrict the access an anonymous class instance or lambda has on its enclosing object, meaning that it could only access the public and private methods of the interface. You'd be casting the surrounding context to the context of the interface.
Interesting. This may also be useful for microtyping in Java.
Same, if you're binding me to an IDE up front it's indicative of the culture at the workplace. Things will be tightly coupled everywhere and it will generally be a mess.
Welcome to Java! The best thing about switching languages is learning the pros and cons of each, and it sounds like you're well on your way on that journey. And, at the end of the day, Java pays the bills :)
Same as why private methods on classes are a good idea.
Interfaces are a failed experiment, much like checked exceptions. Give us multiple class inheritance!
No, Yes, Argggghhhhh!
Seriously, that's the best news I've heard in a while. Such a pointless addition to the JDK. If you need JSON, there are great libraries that do it.
I don't think I've ever thought "aw I wished java had multiple class inheritance" (Except when writing this)
Ever use [Jython](http://www.jython.org/)?
What are the uses?
Python syntax but running on the Java virtual machine, and able to easily access the Java ecosystem: all the third-party libraries and even other [languages on the JVM](http://en.wikipedia.org/wiki/List_of_JVM_languages).
I love selenium. Great idea to post it and great tutorial. Currently coming up with an excuse to use it.
Jump to 8. Soon, not too soon, but soon Java 7 will go the same way. Depending on what you've done nothing terrible should come of it... but the difference in migrating to 7 vs 8 is negligible in terms of risk. I agree with you though. I'd segregate my environments and do this piecemeal. One system at a time even if it meant having parallel infrastructures for some of it.
No more public updates for 7 after next month, if that makes your decision easier. http://www.oracle.com/technetwork/java/eol-135779.html
Sorry, but you are posting in the wrong subreddit. /r/Java is for: **News, Technical discussions, research papers and assorted things of interest related to the Java programming language** **Not for help with programming**. There are many different hints on the site that should have informed you and that you apparently have conveniently ignored: + the **big red button** saying **"Seek Programming Help"** + the **big red banner** when **hovering** over the **"Submit Text"** Button, saying **"Please seek help with programming in /r/Javahelp"** + the **big red box** in the **sidebar** saying **"Please seek help with programming in /r/Javahelp"** + the **"?"** icon in the **blue "Related Sub-Reddits"** box in the **sidebar** with the text **"Java Help ‚Üê Seek help here"** **Post removed:** Wrong subreddit.
I found this pretty useful in switching from python to java: http://home.wlu.edu/~lambertk/pythontojava/
Oh, that's a good point. I'll definitely bring this up. Thanks!
My company is doing the same thing. Really, it comes down to how stable your dependencies are. We have some which aren't yet compatible or stable with Java 8; hence our code isn't compatible or stable with Java 8. We decided to at least go for Java 7 at this moment in time just to have the upgrade in speed, security, and features. The biggest issue is actually with testing. JUnit changes the order of some tests now. Normally this shouldn't be an issue as good tests aren't dependent on others, but this transition has shown some light on either bad programming or bad tests.
Lol.
Well I mean the JDK does have other almost pointless features, like a full MIDI API, including sound files for all major instrument groups. Although I can't say I have never used it...
Just because you jump to 8 does not mean that you MUST rewrite code to use Lambdas and Streams. You can leave existing code alone. You can write new code with Lambdas and Streams. You can gradually transform old code -- and re-test it. It doesn't sound crazy to me. Java 6 is already not supported. Java 7 soon won't be. Before too long Java 9 will be out. Moving from Java 6 to 8 will make sure that everything works on 8. It will also make sure the team can fix any minor issues in the move -- making future version bumps even easier. 
Modular approach has been on the minds of the Java Community since Java 8. With its ninth version, Java finally gets this new approach. It ensures a new and more powerful way of making software and running it securely on all the systems. Modular Java is very promising and stable.
You can get around this by having a package-private static utility class that the default method calls. Not elegant, but workable.
&gt; Packages that depend on byte code inspection, such as not at all obscure software like the Spring framework, will flat out not work. That is an interesting point I did not know, thank you. &gt;The issue is almost certainly not with unfamiliarity with the new syntax. I haven't used it yet, but I got the impression from the speakers I saw that they syntax is one of the issues. For the benefit of brevity you pay with obscuring what you are doing, which makes it harder to understand the code. I get your point. All new syntax is "harder to understand" until you get used to it. Having seen the examples, I saw their point. A lot is hidden. Historically Python gaind on Perl because the syntax of the latter made it difficult to read and maintain code. 
We're in the process of this right now. We have some projects on Java7 and some on Java6 still, and are looking to move them all up to Java8 over several months. We're doing this by first running everything on a Java8 JVM without changing anything in the software. Then we're building with a java8 JDK set to source and target levels of 1.6. In theory after both of those steps nothing should be broken due to the backwards compatible nature of Java. The next step is then to change the target level to 1.8 but leave the source at 1.6. Again this shouldn't break anything but it's the first point that we believe introduces any real risk. If that's all good then we can upgrade the source level to 1.8 as well, without making any actual code changes. After that, we're then running fully on java8. We already know full well that some modules will have to remain on a target level of 1.6 for various reasons - there's an applet that we use for one, and then our public APIs as well. We also know of some build problems we can expect, mostly with the various static analysis tools like check style and findbugs. That's just legwork to fix though. Our big killer is going to be migrating from our very old version of JSR-310 to the Java8 version, but thankfully the two are in different packages so we can run side by side for now.
8 without a doubt
Thanks! I am hoping I won't even *need* college by the time I graduate to get a good job.
For whatever reason the clone method for Clonable is already defined on the Class Object. Therefore you just override the clone method from object and switch to public if you like. IIRC you can also change the return type. And then you can add the Cloneable interface to tag that class that in this class the clone method is actually implemented and does not just throw a exception. The clone method is protected to force you to override the method because object does not implement it. Edit: Ouch now I see it. This will not work with generics. Interesting that they never fixed it.
We just did the same thing. Biggest issue was upgrading from Glassfish 3.0.1 to Glassfish 4.1. There weren't many issues except with Glassfish. It was definitely worth jumping from 6 to 8.
No, as every non-primitive type in Java implicitly allows null as a value of that type. If you're just proposing to replace the null value with a null object then all you're achieving is to just kick the problem down the road. &gt; Every method call on Null except .equals &amp; .toString returns Null What do methods on Null return when the return type is a primitive type - boolean for instance - true, false, or *Null*. Might as well get rid of primitive types then... If you're going to change the language then just get rid of nulls full stop.
Im planning on applying for both some wellpaying jobs and colleges when I graduate. Whichever one I get into.
&gt; And, at the end of the day, Java pays the bills :) Python was my first language and I am glad for it. I just posted - [Unemployed, some python experience, have option for free Java course + possible job]( http://www.reddit.com/r/ITCareerQuestions/comments/2zrfyh/unemployed_some_python_experience_have_option_for/) That might be true Java jobs are more frequent at job listings. Seeing this big community I might dive into it.
I see your point about the cross-platformness of Java, but many, if not most of *our* customers buy the Windows version only! The version for OS X only shipped last summer, so it is a bit too early to tell, but the number of evaluation downloads suggests that it will not be as popular as the version for Windows either. This makes me think that if we were to offer a three-platform license, we would have had to cope with lots of requests "I only need this for Windows, give me a discount, I promise not to touch OS X/Linux stuff!". Whereas in the current pricing scheme, we extend discounts to those who buy licenses for several platforms. The $14.4 K bundle you are referring to would have set you back $19,200 without that discount. As far as charging per company or individual goes, the first is ruled out (kindly refer to Joel Spolsky's piece *[Camels and Rubber Duckies](http://www.joelonsoftware.com/articles/CamelsandRubberDuckies.html)* for reasoning), whereas for the second I am leaning more towards floating licenses. What do you think? In other words: there is no ideal pricing scheme, period. P.S. All our evaluation packages are 90 days and can be extended (but you'd need to re-build your apps). We've built custom trials with a longer expiration period on a few occasions. But evaluating for a year makes little sense as we would likely have a new release available earlier.
Noob question here, how would debug behave on the first case?
For the record, here's how it ended up: return Optional.ofNullable(RequestContextHolder.getRequestAttributes()) .map(requestAttributes -&gt; requestAttributes.getAttribute(URI_TEMPLATE_VARIABLES_ATTRIBUTE, SCOPE_REQUEST)) .map(attribute -&gt; attribute instanceof Map ? ((Map&lt;?, ?&gt;) attribute).get(UUID_PATH_VARIABLE) : null) .map(value -&gt; value instanceof String ? UUID.fromString((String) value) : null); Condensed a few of the instanceof checks and the following cast and operation into single ternary lines, with Optional.map() then handling null return values and converting to Optioanl.empty(). For the time being, I'm happy that it's simple enough to refactor back out for logging / debugging / error handling statements as mentioned by /u/Radmonger if needed - but unit/integration tests are good enough at covering those cases for the time being. 
I would say it is all about the money in the most simplest terms, so check this out https://www.youtube.com/watch?v=etfIdtm-OC8
Agree hibernate is a disaster. Spring has awesome support for nosql that matches the access patterns for application usually much better.
have you had a look at Java Programming Comprehensive Version by Daniel Liang? It is a great book. Not sure about others, but Networking, Serializing and JDBC are 100% there.
Can only up vote once, but this is the core issue that needs to be addressed. Great that you're upgrading but make sure this isn't a one off - get the logic behind this decision baked in to the culture.
It was my commentary on these three ideas. I don't see how interfaces are a failure. I agree that checked exceptions were a misstep. I very much disagree that Java needs multiple inheritance.
Thank you for the feedback! Regarding the license, it's not GPLv3, it's **L**GPLv3. The intent is to say "you can make any applications you want (proprietary is fine too), but if you made changes to src.jexer.* then you must share those specific changes with your users. If I am reading [this right](https://www.gnu.org/licenses/lgpl-java.html) then simply including the source in the jexer.jar (which I could have the stock build.xml do automatically) would do it. Have you encountered problems with LGPL before? 
Where I live there's about 2-10 within an hour drive. Theres about 3 times as many with java. It all depends where you live.
Personally I just avoid Cloneable and use a custom interface, I think a similar solution was suggested in Effective Java or another book of that era: interface Duplicatable&lt;T&gt; { T duplicate(); } class MyBean implements Duplicatable&lt;MyBean&gt; { public MyBean() { // ... } private MyBean(MyBean other) { // ... } @Override public MyBean duplicate() { return new MyBean(this); } } It's more boilerplate code and it's slower than Cloneable (because you manually initialize new objects instead of relying on the JVM to do the copying), but I find this both more convenient and less error-prone because it makes copying more explicit. You can then write utility methods that provide generic null-safe and deep copying methods, for example: public static &lt;T extends Duplicatable&lt;T&gt;&gt; T duplicate(T value) { return value != null ? value.duplicate() : null; } public static &lt;T extends Duplicatable&lt;T&gt;&gt; List&lt;T&gt; deepCopy(List&lt;T&gt; values) { if (values == null) { return null; } final List&lt;T&gt; result = new ArrayList&lt;&gt;(values.size()); for (T value: values) { result.add(duplicate(value)); } return result; } 
Now that'd be hard to push, lol
&gt; Would it be useful to learn Mercurial first? It doesn't really matter whether you learn mercurial, git, or even fossil. Just understanding a DVCS workflow should make it fairly easy to pick up a different source control system. In the Java world, you're more likely to be working with an ORM (like hibernate or spring) than directly with a database. In order of importance, I'd say that you should understand SQL, then ORM, then the specific database.
I don't think there's a choice here at all. Java 7 will reach end-of-support in a few weeks (April). Java 8 is not new at all -- it's already at 1/3 of its lifetime. Oracle's [policy](http://www.oracle.com/technetwork/java/eol-135779.html) states that a Java version is only supported for 3 years following its release. And, BTW, end-of-public-support means that even security updates won't be available, so as of next month it will actually be irresponsible to continue using Java 7. As a matter of fact, 8u40 was possibly the last "major" Java 8 release. I've been told by Oracle that they're no longer submitting *any* code other than *critical* fixes to Java 8 (it seems like many minor bugs won't be fixed until 9). All development is now done on Java 9 (and work is already underway for Java 10!) Java releases place such a high emphasis on backwards compatibility, that the responsible Java shop would upgrade to a new major version no later than a few months after its release, and a minor version no later than a few weeks. Having said that, Java 8's javac does have a few breaking changes, in that it fully complies with the Java language specification, whereas previous versions did not. As a result, you might have a few classes that would fail to compile if they use static imports, and they rely on name resolution not as defined in the JLS.
Why do you disagree?
One problem is that many of the packages available for OpenJDK (e.g. Debian) do not have access to [Oracle's Technology Compatibility Kit (TCK)](http://openjdk.java.net/groups/conformance/JckAccess/jck-access.html), which means the test suite has not been run against those builds. They may also be early builds rather than GA versions. Azul produces [Zulu](http://www.azulsystems.com/products/zulu), which are binary builds of OpenJDK that have gone through the TCK test suite. This could be an option for you, inasmuch as you trust Azul. You can also build from source yourself, but then, you won't have access to the TCK either. You will either need to pay Oracle or be one of those OCTLA Signatories, which isn't an easy process (Debian has been waiting for access for a year or so, from what I hear)
Oracle's JDK *is* OpenJDK with some minor additions mostly from the JRockit JVM and all related to monitoring and profiling (Java Flight Recorder is a notable -- and quite awesome -- example). OpenJDK is therefore as production ready as the Oracle JDK. They share 99.99% of the code (probably more). Actually, OpenJDK is the reference JDK implementation, which makes it (sort of) the "official" JDK.
I don't know about nosql, it seems like they keep trying to do that and it's never effective. I know I used an object db in college, performance was terrible, I switched to mysql and all performance problems immediately went away. I think sql is going to continue to be how we access db's, it's just that hibernate makes things worse not better.
Play looks really good. Thank you!
Seems interesting. I'd take a look.
I'd be interested if the Handler was generified to Handler&lt;T extends Event&gt;. You could then store all Handlers of a specific type T in your Groups, maybe by letting users pass in T.class to work around type erasure. 
reflection performance is not that bad it used to be if you cache methods. Additionally with java 8 closures there are new elegant ways to avoid reflection completely.
What are you using for orm?
We (WMF) use the OpenJDK for Elasticsearch and Cassandra. Holds up just fine. I'm reasonably sure twitter uses it at higher load then we do though they patch it to add their own features.
Javascript
The problem with that would be if you'd want to handle different events. You wouldn't be able to implement Handler twice. Using Handler&lt;Event&gt; could work but is pretty ugly.
sure, reflection isn't that bad. But it'll never be as fast. I love Java 8 but was aiming to support Android later down the line.
https://xkcd.com/915/
Generally the people that say these kinds of things are not apt or knowledgeable programmers and it's just easier to ignore them and let them live their own delusion rather than respond or let it get to you. The world of software development is no different than any other field, there's going to be people who know and don't know what they're talking about.
Idk, that's not really the impression I got. You might be right. At least I would hope so. 
Given that Ada is, practically speaking, used almost nowhere, I think it's safe to assume the quoted statement was complete sarcasm.
Ah, I thought OP found this quote elsewhere and believed it was serious. Now I see that this might be OP's hyperbole. In any case, as someone who codes for a living, I find that real world programmers have far less entrenched and narrow views about these things than one might presume from the feuds seen in online forums.
Every language has its usefulness, because if it doesn't it'll probably stop being used. Learn what something's good for and what it's bad for and that's all that really matters. Snooty people are going to be snooty, I'm not sure why. It's not even an attitude of "i dont like this language". it's an attitude of "i dont like it, and you're stupid for liking it!" I prefer my russian coworker's attitude "ya java iz good but i just do what pays money hehehehehe"
OK, it's snooty, but: http://www.paulgraham.com/avg.html Programming languages have different powers of expression. If you have only been exposed to similar languages (Java+C#?) you have no idea what powers might be available, and you will not miss those powers and may even ridicule those who say that language X with feature Y would do this in a more elegant fashion. My guess is that you haven't gotten deeply enough into Erlang, Lisp, Haskell, Prolog, Forth, Smalltalk, Javascript to know about or miss those features. Java is verbose and lacking in features - better than VB, obviously, but worse than several others, especially within specific domains.
Ah languages have there pluses and minuses and any experienced programmer knows that. What you see here is the same as sports fans trashing each others teams and is stupid. It likely stems from people trying to justify the amount of time they have spent with 1 language, by shitting on other peoples choices. 
http://dropwizard.io/ is an alternative to Play but might be a little closer to Flask than Django. Play (usually) works right out of the box, depending on if your IDE/SBT plugin is having a good day or not but requires minimal configuration. Past the template and routing engine you can pretty much use whatever the hell you want to. I always feel like IntelliJ is mandatory when using Play, not sure how you feel about that. Dropwizard requires a little up-front configuration but has an extremely stable ecosystem. That said, Play is really just [spray](http://spray.io/) and [twirl](https://github.com/spray/twirl) + bloat + framework boilerplate under the hood. You really could throw together your own Play microframework if you have intermediate Scala experience. Use Play if you foresee yourself taking advantage of Akka, but consider dropwizard strongly as it's more lightweight, performant, and integrates libraries which have a very positive reputation. The Scala ecosystem can be unstable, especially in regards to version compatibility.
In this train of thought, heres a conversation I had with someone I helped with his Java course. Enjoy! **Other:** Hey XXX! How've you been? **XXX:** Hello, I have been fine, and you? **Other:** I've been good. I'm finally done with my Java classes! Thankfully **XXX:** How did it go? **Other:** I did well. Got a B **XXX:** Nice ^\^ **Other:** I hate it though...lol Java sucks **XXX:** o.o **Other:** Let me ask, do you know anything about Visual Basic? **XXX:** eh no **Other:** I like it a lot better, since it has Intellisense. I don't have to keep track of variable names or method names because it brings it all up when you need it **XXX:** do you mean visual studio?.. **Other:** yea **XXX:** ah, thats something completely different lol **Other:** lol true **XXX:** pretty much every IDE has autocomplete though **Other:** Not NetBeans. &lt;_&lt; **XXX:** yes it does **Other:** Where? I haven't seen anything like that using it. **XXX:** ctrl+space usually **Other:** Hmm...I'll have to check that out. **XXX:** Do you have classmates that say Java sucks or something **Other:** Everybody I know hates Java. lol **Other:** I feel VS is a lot easier **XXX:** VS is completely different thing than java... **Other:** I know **Other:** still easier though **XXX:** easier than what lol **XXX:** you cant compare an IDE with a programming language, they are different things **Other:** Easier than Java. At least coding-wise. **XXX:** its like comparing a bakery with a piece of meat **XXX:** what the hell **Other:** When I say Java, I mean NetBeans, since that's all I used when I coded in Java. I don't have to worry about semi-colons or curly brackets and all those tiny nuances like in Java **XXX:** what language are you coding in VS **Other:** VB 
Grails, of course it's groovy. It's easy for a Java coder to get in and out of grails.
I like how this makes sense from the standpoint of semantics. The maps only show the more abstract steps of mapping values without the noise in between like filter non-null, etc. However, there is still much detail in the code which I would prefer not having to read if I was someone having to understand the code. What do you think about this? It's longer, but it clearly separates abstraction levels. The reader doesn't really need to look at the private methods. Optional&lt;UUID&gt; getUuidFromRequestTemplateVariables() { return Optional.ofNullable(RequestContextHolder.getRequestAttributes()) .map(attribute(URI_TEMPLATE_VARIABLES_ATTRIBUTE)) .map(valueFromMap(UUID_PATH_VARIABLE)) .map(toUUID()); } private Function&lt;Object, Object&gt; valueFromMap(String key) { return map -&gt; map instanceof Map ? ((Map&lt;?, ?&gt;) map).get(key) : null; } private Function&lt;Object, Object&gt; attribute(String attributeName) { return requestAttributes -&gt; requestAttributes.getAttribute(attributeName, SCOPE_REQUEST); } private Function&lt;Object, UUID&gt; toUUID() { return value -&gt; value instanceof String ? UUID.fromString((String) value) : null; }
There are better programming languages then Java. Java is inferior in many ways. However, where Java shines is productivity. Compared to many other languages you can do more in less time. In the world of business time is money and anything that saves time is a good thing. Many of these Java haters forget who pays the bills and it usually business types not engineer types When you are young it is cool to antagonize over technically superior solutions. As you get older and time starts to mean something you prefer to get things done. If it means sacrificing memory and CPU cycles for a family then so be it. 
I came from a c++/java background and used to rag on javascript being dynamically typed (I really didn't like it) and then you want to build a website and you realize why javascript is so prevalent on the Web. Would I use it for intricate networking software? Almost certainly not (and I'd probably use Java). Is it pretty fucking handy for getting a nice looking website that is flexible and modern? Absolutely. Ignore the close minded people, find what works for you. 
we are using morphia, the library used for mongodb. there's a specific module for play and moprhia, oddly enough called, play morphia. our primary database is mongo (85% of our data is content so mongo works really well for us). 
point being?
PHP definitely has its advantages
Facebook was written on PHP. What do you have to show?
Something like this? interface Event {} interface ClickEvent extends Event {} interface ScrollEvent extends Event {} interface DragEvent extends Event {} static class SubclassOfScrollEvent implements ScrollEvent {} /** Handling clickevent Handling scrollevent Handling scrollevent */ public static void main(String... args) { EventBus bus = new EventBus(); ClickAndScrollHandler handler = new ClickAndScrollHandler(); bus.register(ClickEvent.class).to(handler::handle); bus.register(ScrollEvent.class).to(handler::handle); bus.handle(new ClickEvent() {}); bus.handle(new ScrollEvent() {}); bus.handle(new DragEvent() {}); bus.handle(new SubclassOfScrollEvent()); } interface Handler&lt;T extends Event&gt; { boolean handle(T event); } static class ClickAndScrollHandler { public boolean handle(ClickEvent event) { System.out.println("Handling clickevent"); return false; } public boolean handle(ScrollEvent event) { System.out.println("Handling scrollevent"); return false; } } interface Registrator&lt;T extends Event&gt; { void to(Handler&lt;T&gt; handler); } static class EventBus { static Map&lt;Class&lt;? extends Event&gt;, List&lt;Handler&gt;&gt; map = new HashMap&lt;&gt;(); static &lt;T extends Event&gt; Registrator&lt;T&gt; register(Class&lt;T&gt; cls) { return handler -&gt; { map.putIfAbsent(cls, new ArrayList&lt;&gt;()); map.get(cls).add(handler); }; } static &lt;T extends Event&gt; void handle(Event event) { forAllSuperclasses(event.getClass()).invoke(cls -&gt; { map.getOrDefault(cls, new ArrayList&lt;&gt;()).forEach((Handler handler) -&gt; handler.handle(event)); }); } interface OnEach { void invoke(Consumer&lt;Class&lt;?&gt;&gt; cls); } static OnEach forAllSuperclasses(Class&lt;?&gt; clazz) { return action -&gt; { Class&lt;?&gt; superCls = clazz; while (superCls != Object.class) { action.accept(superCls); asList(superCls.getInterfaces()).forEach(interfaceCls -&gt; { action.accept(interfaceCls); }); superCls = superCls.getSuperclass(); } }; } }
This comment is the precursor to what I was talking about. 
It was. If I'm not mistaken, Ada is actually used on some government projects though. 
That's my thinking. I feel like if a programming language is at least somewhat widely used, there's a good reason for it. I think people who really bitch about other programming languages are so self-centered that they think all programming languages revolve around THEIR purposes and projects. Just because you can't use a hammer to write doesn't mean the hammer is useless. 
It's pretty quick to develop stuff in JavaScript. It also happens to have a good ecosystem (V8, NodeJS, Chrome DevTools). With Rhino and its successor [Nashorn](http://openjdk.java.net/projects/nashorn/), you can run JavaScript on the JVM, so you can mix/match languages as appropriate.
[Steve Yegge's rant on languages](https://sites.google.com/site/steveyegge2/tour-de-babel) is dated but was an awesome read. My motto when it comes to programming nowadays is "everything sucks."
I think it is more about personality than skill level. Linus whines like crazy and I am not sure you could call him a bad programmer.
I've already used it plenty in those ecosystems, and even though the tooling is decent, I definitely don't like the language. Type strictness just feels much cleaner to me. That and the framework deprecation.
&gt; I suppose it is tempting, if the only tool you have is a hammer, to treat everything as if it were a nail. I just think about this when people comment and go from there.
Forth? Really? Lisp and Haskell, yeah. But I think you are just namedropping... When I talk with Java haters they mostly admit they haven‚Äôt done any significant coding in Java. Many people who say X, Y and Z are better often have only done serious coding in X and just nodded their way through a couple of blog posts about Y and Z...
Another vote here for looking at grails. Grails 3 is almost out - based on spring boot, but with GORM as an ORM. Only major downside I can see right now to Grails 3 is lack of migrated plugins from Grails 2 - I suspect some of that will come with time.
&gt; I prefer my russian coworker's attitude "ya java iz good but i just do what pays money hehehehehe" This is a good attitude, when I'm coding for fun or myself ill code in any language i like that looks fun at the time. if I'm at work, and you are paying me, ill do what ever you like. 
I'm sure the folks at Twitter, Google and Yahoo would disagree. Just because you work at a shifty place doesn't mean that exemplifies a whole culture. If anything, Python being an entry level language and not needing the discipline of static typing would imply the opposite.
Looks nice, although I think the call ".to(..." is redundant and could be reduced to a second argument for the register call. 
Really? I'd personally prefer a knife cut steak to a hammer cut steak. And so would most people.
Lol "write a webserver in assembly". RIP
[Done.](http://www.reddit.com/r/programming/comments/1swtuh/tcp_http_server_written_in_assembly/)
Some people are actually snobs, some just like to rag, some just like to discuss languages and programming - but doesn't really know how to start a discussion without coming of as ... rather abrasive. Some people are very singleminded and extremely specialised in some field - and for their particular domain - the snobbish statement might very well be absolutely true, and their field might be their world. In programming you will usually meet a very wide gamut of personalities with widely varying perception of themselves, and of the world in general. Some of them, not so pleasant, or easy to work with. However, you are also likely to meet amazing people, which will stay with you - in one way or another - for years to come. It also a (hardly disputable fact) that the normative form of social skills, and interaction is less common amongst programmers, and some of the stuff you read as arrogant, might from their point of view be something completely different. Stating that your sweater is ugly - to some people, is seen as them trying to help you avoid being judged by others, without them realising that you might feel bad about their comment. The latter happens mostly that because to them, whether your sweater is ugly or not, has no bearing on their relationship to you at all, but they have noticed it can be important interacting with other people.
Sounds interesting, I can contribute to this development, github url please.
I think some people get arrogant when they actually learn a good amount of a programming language. Because you know what, programming is hard, **especially** when you first start off, because the learning curves can be staggering. A lot of of these elitist douche bags I was talking about have made me feel stupid in the past because I hadn't reached a reasonable level of knowledge/skill, but I'll just come out and say it again. Programming can be hard. But if there's anything I've learned, it's that there's no reason to think my shit is the best in town just because I accomplished something hard. 
Was this guy concentrating in security? You can't very well whip up a GUI to hack a mainframe in Java.
But it's very slow. Much slower than play 
1) http://docs.oracle.com/javaee/7/tutorial/partwebsvcs.htm 2) specification (jsr 339)
Why against single-responsibility?
You think it's bad in Java? Try being a PHP guy. But really, I think most programmers just like to give everyone shit. It's mostly in good fun, and something you just have to develop a thick skin for. Just like sports, as another person in the thread commented. Doesn't matter what you're using, someone, somewhere, knows exactly why it's wrong and you're dumb for using it. The small number of people who actually are vitriolic and genuinely nasty towards other toolsets are, generally, easily avoided and ignored. Unless you work under one of them. God help you.
http://lafo.ssw.uni-linz.ac.at/papers/2013_Onward_OneVMToRuleThemAll.pdf
If I sense that it's in good fun I don't have a problem. But as others have pointed out, programmers also have notoriously bad social skills and might not come across as they intend. 
Are people still using Swing these days?
&gt; ya java iz good but i just do what pays money hehehehehe Coincidence that this is suddenly the page title for /r/java?
Complaining is one thing, but completely disregarding a massively adopted language like Java and calling it trash is not complaining, that's delusion. And it's better not to engage with someone so close minded. It won't get you anywhere 99% of the time.
And so many bugs. I've never been able to run software update in Eclipse without causing new bugs in sts. 
I was familiar with all of core Java except for using class loaders and writing code that manipulated annotations. I knew how to write code using libraries that required me to use annotations, but I didn't have to write code that recognized and did interesting things with annotations. 
As i said, there is a very good technical case. Business folks look at it as 'X amounts of money' for 'X features' Testing, upgrading, refactoring, etc often are not really appreciated or even understood.
TIL
I've seen code bases which rode the SRP until they were left with a plethora of classes to express what would have been a 15-line method in one class. But hey, it's much more flexible that way.
This question is unfair. IntelliJ IDEA is obviously the better IDE, but, excluding its lesser Community Edition, it's a commercial product. Eclipse is free and open source. That said, even when you compare IntelliJ IDEA Community Edition and Eclipse, IDEA still wins in my opinion. I actually pay for the commercial version though, because that's where a lot of its intelligence is that really makes it shine.
Why is Notepad++ listed as Java tool? Who the fuck writes Java in Notepad++? If people do that please tell them about IDE.
Nice, I wanted a non-ruby generator. I'll have to check this out.
I agree that these people are toxic and that it's pointless to engage. I just don't think that talented programmers are immune to the problem. Sometimes stupidity is compartmentalized.
Well to be honest, I prefer 100 little classes that make sense that 1 with 100 methods which not, I try to keep my methods no more than 5 lines and give good and reasonable names to my methods and variables. I don't really mind just making a 5 line class called "String50", that would meant to describe a string that accept only 50 characters just for the sake of expressiveness on my code.
Spring 3.x does have problems with Java 8. Specifically, one of Spring's core dependencies, asm, doesn't support Java 8 below version 4.2. Interestingly enough, I have yet to trigger the issue with actual application code (either compiled with JDK8 running on JRE8 or compiled with JDK7/JDK6 running on JRE8) but only with unit test code. But the risk is there and real.
Well, besides RPN and a language that works extremely well in low CPU/memory (that's what I recall), what do you miss from Forth while coding in Java?
I have not encountered problems with LGPL. But I avoid problems by not using GPL, unless I am using it in something that itself is also licensed under GPL. I understand the difference between GPL and LGPL and I carefully pay attention to all licenses for anything that I use. Sorry, my mistake. I did not notice that it was LGPL I opened LICENSE, and the first thing at the top is the GPL license header. But if you scroll down far enough you see the LGPL license. Being LGPL, this would be something that I could use if I ever had a need for it. I doubt I will have a need in anything that I work on. But I never know when I might find something like this useful for a personal project. Thanks
I agree! Arquillian abstracts a lot of that away though. It's a bit like the universal deployer tool, but for some servers (like WebLogic) it still needs access to some jar file, which is terrible. A bit of the weird thing is that like the article says, deployment is not the main focus of this JSR. It was actually JSR 88 that focussed on that, but JSR was pruned in the last release. We actually had universal deployment for a long time, but for some reason nobody really realised we had it. And because nobody realised this, instead of telling it to people, they just removed it. But now as a kind of extra, Management will/may get the ability to do simple deploy/undeploy, but no start server of course. *maybe* stop or restart server.
I remember Smalltalk was the absolute best environment for refactorability and feeling of Flow. Forth gave some of the same feelings - Java did not. The typelessness may be part of it, and the quickness of the type/compile/run loop.
I support this. I like java but I have been trying most of java web frameworks. I didn't like any of them. We need somthing productive like django.
How do you feel about play? 
I have been seriously thinking about that. The thing is, it's a Spring project and I'd rather not fragment it. I also want to exhaust all other options before forking.
Yeah, he is still maintaining it. But he just communicates extremely sporadically or not at all. There are legitimate issues and pull request where people have asking him for comments and he simply says nothing. When I first made my pull request, he commented with some helpful suggestions which I implemented and opened up a new pull request (because the implementation was substantially different). That was over a month ago and there has been no response from him. Other people seem to be facing similar issues.
Yup, I remember the ffmpeg-lav fiasco and it's still very confusing. As far as a fork, I did think about it, but like i mentioned in another comment, it is my last resort and not something I am excited about doing due to all the reasons you mentioned. Furthermore, I don't think I could do it justice anyway since I am working and going to school full-time. I have reached out to the people at the Spring organization asking about the level of engagement for this project and they did respond to me, asking for links to the project, issues, PR's etc. I have provided them that, so let's see what comes out of it!
Yep. If you have any questions about free software or would like more advice from me in the future, feel free to send me a PM. I love helping people out with stuff like this. Glad you're contributing to freedom.
I wouldn't use WebSphere. I'd look at Tomcat if you just need a web container, or JBoss if you need a full Java EE server. They have the highest market share and you'll find many resources online. If you need commercial support, you will find endless numbers of vendors that will provide support for these popular, widely used, open source products. If you go with IBM, you will pay out the ass and will be using a bloated, crippled version of these freely available open source tools.
Yes, simplicity is really good, especially when you just want to code without setting everything up. 
I experimented with porting Django's concepts over to Java a few years back, the resulting code was an interesting experiment but lacked any real polish. It currently has Urls, Managers, Forms, Templates, Admin. I just got the notice that Google Code is shutting down so I either have to mothball it or move it to github. If anyone is interested I'll move to github and write some quick documentation, that being said the code is more of a proof of concept than anything production ready 
Been looking at web ides lately. Thanks for the link, this looks pretty great.
And you get even more bang for the buck and an easier and more coherent environment when you go for JBoss, TomEE or GlassFish instead of Tomcat with some Frankenstein stack you build and maintain yourself.
Old 2Gb+ WebSphere? Nah, avoid it if possible. But IBM has a new server called Liberty that's as agile and small as any of the other fast and modern Java EE servers. 
This. WebSphere might have good commercial support but on the other hand lacks any non-commercial support on the net - and for a reason. That product just plain sucks and is not worth any money, especially not the amount IBM is asking for it. I am actually writing my very first Reddit comment right now, just so I can state how much it sucks. As a side note: You could also try GlassFish instead of JBoss in case you really need a full blown application server. 
Why not just get a plugin installed on Eclipse for Dropbox or another free cloud storage space? 
Oh God... I just looked at it. What the fuck is this shit. Debugging this cannot be pleasant. If you have to look at a fucking stack trace with that many anonymous inner classes, you'll be in for a *shitty* day. 
Uw's practice-it http://practiceit.cs.washington.edu
ABSOLUTELY NO
That's really not enough to go on to help you ... You're going to have to include some specifics.
I worked with Websphere at a previous job. The commercial support isn't really that great. The company I worked for was a DOW30 company that predominately developed in Java and used Websphere products pretty much exclusively. If you don't know how you use Google you may find IBM support useful but that is about it. Not once did their support get me to a solution faster than I could with Google, my own intuition, and a decompiler. Like others have mentioned Tomcat is great if you only need a web container. If you aren't sure whether or not you need an app server the answer is you probably don't. 
You most definitely could but you probably shouldn't. Even if you are writing a desktop app you should probably still use HTTP to communicate with the server just to take advantage of all the libraries available to you. You'll end up writing a mountain of code to get something that barely works if you start with socket connections for inter-process communication.
 JBoss? Jesus Wept. If it's something that I'm going to be betting my career and sleep on with production support issues, then JBoss is at the bottom. Are you an employee? Glasfish is ok for light developer use, but sucks worse than JBoss. Weblogic and Websphere are your best bets for large scale production use.
.... that's assuming the license allows forking. If the licensing does allow for it, it's probably better to for, than fight an uphill battle with a developer who's lost interest or time to invest.
Naming convention about onxxx method is resulted from discussion here: https://github.com/vibe-project/vibe-java-platform/issues/46 I think if some naming convention used in other languages would be useful in Java as well, it's right to adopt it. For example, one of incompatible changes of Netty 4 is to drop 'get-' prefix from getters. Someone like you might think Netty team wanted to force jQuery's style of coding upon Java. So what? It's convenient.
If you sign your JAR with a timestamp it will be valid forever. See http://docs.oracle.com/javase/7/docs/technotes/guides/security/time-of-signing.html
I successfully gained a fully subsidized (free) 1 year code signing certificate from Comodo by going through Intel, see here: http://forums.realsoftware.com/viewtopic.php?f=21&amp;t=42937 I do not know whether this is still active, I did this 18 months ago, but probably worth checking out. After the year the certificate becomes invalid. Depending on the user's security settings they might be unable to install it. So, yes, unfortunately you'll need to keep an active certificate. A 5 year certificate is cheaper per year but still pretty expensive.
Yes thats what we did. We went to screens and optimized DB queries which are now not taking more than half second. The problem lies under the screen layout we have tables with components in Many cells. There is an article from vaadin - "optimizing sluggish UI" We have implemented everything mentioned in it, it still takes min 3 second for only rendering. How much time your screen takes?
Thanks for the replies, some interesting comments. I have been trying WebSphere over the last few weeks with a series of bugs but didn't want to poison the well in the original post. I was prepared for the large size and slow actions but not for the bugs. In addition the lack of source code and community support means that fixing things took much longer to resolve.
https://www.startssl.com/ is free but for one year and has low protection. But it might suffice your use case.
JBoss is commercially supported by RedHat. Unfortunately Oracle stopped offering commercial support for GlassFish a while back. There is a small company in the UK that forked GlassFish and offers commercial support. Unfortunately being a small operation a lot of people don't have a lot of faith in them. I, for one, wish them the best of luck. The name of the company is Payara.
This looks like it's for SSL. I need a Java signing one.
[Quasar](https://github.com/puniverse/quasar) has [a full implementation of all Erlang features in Java and Clojure](http://blog.paralleluniverse.co/2013/05/02/quasar-pulsar/), including actors running in their own lightweight threads (Erlang's processes), blocking selective receive, behaviors, hot code swapping, and deep monitoring (e.g. you can inspect the mailbox and thread stack of every actor at runtime). Aside from saving you the (very expensive) trouble of moving to a whole other (far smaller) ecosystem, it has the added benefit of JVM performance. BEAM developers often find that they need to write performance-critical processing code (parsing etc.) in C; on the much faster JVM, we don't have this problem. EDIT: the soon-to-be-released Kotlin API also has a nice Java/Erlang hybrid syntax; see [example](https://github.com/puniverse/quasar/blob/kotlin/quasar-kotlin/src/test/kotlin/co/paralleluniverse/kotlin/actors/PingPong.kt).
What does a certificate actually do? If you can just buy one what qualifies an application as certified?
I got excited (I love Erlang's actors and played a lot with Akka) but then I saw that you need to run a Java agent to use Quasar. I'm not a fan of the agents and don't enjoy the extra setup/configuration that they need in projects where I'm unfamiliar with doing so. Maybe it's a strange reluctance to have but this is the first compelling reason I've had to overcome it, I guess. I'll read around for it but I'm wondering what the agent does in this context.
You don't need an agent, although that's the simplest way of using Quasar. Quasar requires some bytecode injection to implement true lightweight threads (fibers). Another option offered by Quasar is AOT instrumentation at build time (see [here](http://docs.paralleluniverse.co/quasar/#instrumentation)). In any event, for simple deployment of applications requiring Java (or native) agents, or native libraries, or any special JVM configuration, take a look at [Capsule](https://github.com/puniverse/capsule).
That's a good question. I don't really work with libraries that are heavy on callbacks (not in the way a web framework is), so I can't really say. 
Are this updates for the Pro edition and the community edition?
They always update together
For enterprise applications that have no specific technical requirements (not real-time, not games, not microsecond performance specific), I don't think that language makes that much difference. It's equally easy to design a non-scalable, crappy system in any language. And probably equally difficult to design an expandable, scalable system. It's the people that matter, not the technology.
&gt; For enterprise applications that have no specific technical requirements Every project has *some* technical requirements, specifically what latency is required under what load (e.g., is it acceptable to to respond to a query in over 20 seconds when there are 2000 concurrent users?) &gt; It's the people that matter, not the technology. Sure, but sometimes, some techniques yield good results for less effort. I think you'd agree that programming in Java beats programming in assembly.
&gt; programming in Java beats programming in assembly Comparing Java to assembly is apples to oranges. Comparing Java to C++ is more apt. If you've got a team that knows C++, Java is not the best technology. If you've got a team that knows Java, C++ would probably be a complete and terrifying disaster. Yes, every project has some technical requirements, that's true. However, for most enterprise apps, the problem can be solved sufficiently with any legit high-level technology stack.
Vaadin handles big datasets out of the box without any problem: http://demo.vaadin.com/sampler/#ui/grids-and-trees/grid/large-dataset
 public void pleaseUpgrade() { if (studentOrTeacher()) { pleaseVisit("https://www.jetbrains.com/student/"); } else if (openSourceDeveloper()) { pleaseVisit("https://www.jetbrains.com/buy/opensource/"); } else { pleaseVisit("https://www.jetbrains.com/idea/buy/"); } }
Just curious, has there been any discussion at Oracle JDK team about adding these type of features to standard JDK? Or maybe a related JSR? 
Yes. All I can say is: not in Java 9, sadly. However, Java 9 might bring some new capabilities that will make fibers a lot more transparent. If that happens, it will be a good first step in coming up with a standard API towards some future JSR.
`CTRL-SHIFT-A`
So, about these "width-adjustable editor tabs"... Anyone know how to do it? EDIT: Figured it out! Basically, tabs resize automatically if you have the **Hide tabs if there is no space** option disabled (results are more pronounced if you also have **Show tabs in single row** enabled).
Great idea. My day: 1. Didn't went to the **Keynote** since I wanted to do a daily scrum with my team but hotel wifi didn't and doesn't work for me. 2. **Docker for Java developers** was a great talk. I will definitely try it this weekend. As far as I can tell, it would be a huge improvement for my current and also future projects. 3. **Java EE and DevOps**. Sorry Ivar but you should have titled your talk "The framework build to connect to Netflix' Eureka". Beginning was okay but too basic for me, i.e. "DevOps is not a team". 4. **Code Reviews** was an okay-ish talk. I've left early because I really didn't need to know how to do Code Reviews with Eclipse. I understand that some people are involved with Eclipse RCP but many people aren't and you shouldn't make yourself too dependent, in my opinion. 5. Missed two slots since I wanted free shirts. 6. **MVC 1.0** - it's not even out and it already looks old. I just can't get excited for an action-based web framework. Also the aspect of "action-based" was not the core of the talk which was disappointing. 7. **Integration testing** - room was packed with people and the talk was great. Really interesting insights and hints, e.g. [Spark](http://sparkjava.com/). 8. **Advanded Unittesting** - really good talk about general principles of testing. I will try the [Hearthstone Kata](https://github.com/bkimminich/kata-tcg) at home! --- Tomorow: **Asynch Testing** - Sigh, 20 minute talk without even mentioning the main challenges and solutions... **Coding Culture** - Very good talk by the Atlassian evangelist but a bit too good to be true, he truly is an evanglist. Rest of the day I invested in discussions with other developers rather than talks.
Why don't you bring this problem up on the Vaadin forums ? The devs are always very keen to help out, if you give them a screenshot or some java code to work with i am sure they can quickly find the bottlenecks. If you say you are using tables with a couple of thousand entries then you should definitely look at the new grid implementation. It is a drop-in replacement that works so much better and faster in almost all cases.
Cool let me try and get back
There are threads on vaadin forum with same questions I posted mine in that too... Vaadin support is trying to figure out. I work for bank cant share code with any one hence I sent them problem statement... they are trying... lets see what comes up...
Are you *sure* this is a Spring project? There are sub-projects that are basically incubators where one person had an idea and went with it. They're not officially supported and may receive little or no attention or even be abandoned. If it's a first-class Spring project I would definitely contact someone in Pivotal. Otherwise consider forking it.
 Date purchaseDate = (new SimpleDateFormat("MM-dd-yyyy")).parse("12-02-2014"); Date today = new Date(); long days = (today.getTime() - purchaseDate.getTime()) / 86400000L; if (days &lt; 365) { throw new GetEmailSupportException("Waaah! It hasn't been a year yet for me!"); } 
Switching to a niche language from a popular one will certainly limit the talent pool to recruit from. The talent also generally costs more: [comparison](http://www.indeed.com/salary?q1=Erlang+Developer&amp;l1=New+York%2C+NY&amp;q2=nosql+Developer&amp;l2=New+York%2C+NY&amp;q3=Java+Developer&amp;l3=New+York%2C+NY&amp;q4=oracle+Developer&amp;l4=New+York%2C+NY) 
I'm confused about this, if my upgrade expires, can I still buy an upgrade for 100 dollars? As in...if I'm happy with 14.1 and my upgrade expires in a week, and I decide to just wait until 15 is released before purchasing for an upgrade, can I get 15 for 100 dollars?
You can, but the license extension you're buying for $100 is backdated to the day your previous one expired. So there's no benefit to letting your current license lapse and extending it later on.
I don't think this is an incubator. I think this is a proper project. But someone from Spring did contact me and is looking into the issue! :)
I just learned this today after using IntelliJ for over a year. Better late than never, I guess.
~~StartSSL Verified $60/2years for unlimited certs~~ ~~http://www.startssl.com/?app=2~~ ~~"supports Object Code Signing"~~ StartSSL is in all the browser's trusted root certs, but not Java :(
Never really been a fan of 'learn x in y minutes!', especially when it's for something like a programming language. While it's a decent video and all, it will leave anyone who wants to learn Java a bit more confused than anything. Informative video? Yes, but I don't think it's a good idea to rush so much into a small timeframe.
Am using it now. :)
You may have already noticed but under settings - &gt; keymap, there is a preset for Eclipse like keybindings. It could make the transition easier for you. I had used Eclipse for years too. Android studio convinced me to switch and pay for the container support that comes with ultimate. $200 and $100 a year is so worth it for me considering how much time and frustration it saves me on my own projects and at work. 
ur problem is the same as my problem before. Vaadin loaded very slow. But after analyzing and optimizing my queries, Vaadin table loaded very fast. I don't know what technology you are using to connect to db. 
&gt; Went from 3 years of idea to RAD (ibm eclipse). The amount of polish RAD is missing in comparison is downright astonishing. No, you don't understand. We went from using RAD to using Eclipse, and Eclipse is a vast improvement. RAD is based off of Eclipse. It's like they took Eclipse, made a worse product, and called it RAD. :-/
Check out: http://www.reddit.com/r/javahelp/wiki/tutorial_list
Hey, I'd love to see your work!! I spend a lot of my days developing lightweight libraries as personal/collegial alternatives to heavy counterparts. I'm always interested in small code solutions for big (and small) problems. I actually have been working/evolving the concept of "magic" event buses perhaps before they were well known and used. If you have ever seen the Bukkit project, my work is involved. As of late my latest rendition of the system is almost on its way to my GitHub. Still, I am using reflection. Although with my latest solution I far and wide outpaced Guava's performance in event dispatch throughput (roughly 300% on my machine) I would love to see more solutions. If you actually spent the time to read all this I thank you thoroughly. Keep rockin, üòÜ
Anyone use this?
IDEA is the reason I still enjoy programming in Java.
Did check out JeroMQ. 2 Issues for us here * It has not been updated in a while, based on ZeroMQ 3.2.x whilst ZeroMQ is on 4.0.x * Does not support PGM multicast protocol. 
Hey there, I enjoyed hearing your opinion. Google's big brother libraries Guava and Guice established "concept" and provide huge solutions for use in large scale projects. Sometimes, however, you just want something small and simple. For me when I use other solutions I miss the features of the full scale version. I spend a good chunk of my time writing a personal library that solves big problems with small implementations. That's why I am including a lightweight DI framework that has better performance, has the same essential features that make me prefer Guice over Pico (except for its massive scope and weight) and is perhaps more light than Pico. Key me in on what you think, thanks again! üòÉ
After downloading a software from supplier it will check for a timestamps, reliability of software publisher and certificate authority. It will also check whether code has been altered or not. Validity period of code signature is depended on timestamps or validity of code signing certificate. If there isn't any timestamps, the code signature is only valid until original code signature stays unchanged. The code signature is helpful to authenticate developer/publisher and the certificate authority. It also checks for neither publisher of software has been blacklisted nor software is corrupted. It is advisable to get annual subscription before it expiry. In addition publisher name will be shown at the time of installation of software instead of "Unknown publisher". It will help to win trust of software installer. And if you want to pay less on code signing certificate visit https://www.cheapsslshop.com/code-signing-certificates where Thawte code signing certificate is available at only $125/yr.
you earned a new reader :) thank you
Thanks. What happens after a year? Does it still work?
check this out for tuning performance http://www.infoq.com/articles/Tuning-Java-Servers check Takipi for performance and error tuning. even Jmeter is OK if youknow what you wont to test.
You're welcome :)
Styling isn't always about convenience it's about consistency. However, this is a framework so the project consistency should inherit its styling. so your both right.
That's... that's awesome! Thank you
My team used it once when we switched to IntelliJ and were mildly amused with the novelty of it. Then we never used it again. Just like how everyone tried FaceTime just once.
Thats so true. We used FaceTime once at work when I lived out of state and realized how awkward it is to be a bunch of dudes staring at each other. I'm sure the younger generation will be more accustomed to it. 
I have not used JOOQ. I have used Hibernate for years. I do care about my database design and my application. The application does not merely persist Java objects, yet I find Hibernate to be very useful for certain things. In particular, Hibernate is very useful for Ajax action responders, for responders that drive interactive 'grids' in the browser UI which can request 'pages' of the data sorted and filtered every which way. I have my own mini-framework for these types of responders for any type of table and fields viewed from related tables. Also Hibernate is useful for most page-submit actions that do something and then select some JSP to render back as the result. Hibernate makes it easy to retrieve objects, navigate the structure, make changes, and then not worry about how it all gets written back to the database. When it comes to reporting, I find nothing beats writing raw SQL. I can do complex things in SQL that I cannot do or cannot easily do in Hibernate. I can interactively develop and test these complex queries in a separate tool connected to the database. So Hibernate is not for everything. But it is extremely useful in certain contexts. If you understand what it does, it is a powerful lever. But Hibernate is not the one magic hammer that magically turns all problems into a thumb. 
I have not done so yet, but I have been contemplating the idea of splitting out the login from my application for awhile now. This is the first time I've read about others doing it. One motive is to allow the possibility for alternate authentication mechanisms. In order to do this I have realized that I will need to think about formally defining things about the login identity. Permissions enforced within the application. User settings within the application. I'll call these two 'permissions' and 'profile'. The login mechanism would need to hand the application a pair of permissions/profile which the application could attach to the session. Or alternately, on every http request, ask the login mechanism for the permissions/profile from the session id if you don't want to attach a few objects to the http session. The login mechanism would use alternate means to authenticate, which could include different security checks (where you are at), or two factor, biometrics, or a puzzle instead of a password, or whatever might be needed. (Unlikely) But the idea is that the mechanism is not built into the application, but is pluggable. The login mechanism could also verify user identity from sources other than a database table. Maybe use LDAP or Active Directory. Or a web service call to something else. I can envision good reasons for doing this split. But I have to identify exactly what must be cut out of the application and better formalized. 
&gt;Any opinions on Lua becoming a programming language? * It's already a real *scripting language*. Used by most AAA game although maybe soon those AAA game will use Javascript anyway (let's ride the hype traiiiin) * Java main superpower is JVM, which represent gigahour of works developed by well paid, talented, and smart people. I doubt Lua's current vm can match this. * Lua is not statically typed language, this by itself is a disadvantage for large application. * Organizing/Designing/Coding/Maintaining Java app is just super easy. In addition to that, there are tons of real-world proven libraries, design patterns, etc in Java world for almost every single problems you'll encounter in your daily work. It's very hard to find a good and well balanced language that match Java's power.
The signature will still work as long as it was signed within the validity period of the certificate. Though the certificate will expire (meaning you can't continue signing with it) the signature will stay valid.
The same here. In my two years experience with Java, I only used IDEA even though I tried NetBeans and Eclipse for sometime. But still, It is one of the reasons I'm excited whenever I'm about to work on a Java Project
Deltaspike data fits as well
(1) Activate you access log valve in apache and get the traces - use them to curl your validation tests [java/web only] (2) Use jmeter with the browser recorder, then 'play' your tests - you may fuzz them [web only] (3) If not dealing with web interfaces, you are dealing with 'components' of some form - then unit tests often cover complex scenariis, e.g. generate a CRUD layer over your model, inject sample appstate and play with the higher-level, functional components 2 cents from a java pov. 
Same question I already asked tobyfunke: if the login and the app are separate war files, is there a common session id? If not, how can the app service tell the login service which user it is talking about?
Perhaps LightAdmin?
Stealing a token is worth far less than the credentials, it's temporary and shouldn't expose other systems. There's many ways to separate the authentication service from the application. You can handle it up front and pass tokens along in the header, force applications to call an API, use something like Spring Session to handle state, use a Redis back end to store tokens, etc. Security comes in layers. It's not about being impenetrable, it's about making it as difficult as possible and providing the most protection around the most sensitive data and systems.
Java isn't going anywhere, that is for sure. Someone was trying to destroy Java market share by starting the anti-Java trend by exploiting the security security flaws in the Java browser plugin (that could have all been fixed). Interesting that when that started we ended up with Silverlight. My biggest complaint about Java is Oracle and the draconian grip on it. My preference is C++ but Java is a good language and alternative. It does everything well that most everyone needs. 
http://queue.acm.org/detail.cfm?id=2169076 is worth reading on this subject. 
Have you tried the [w3schools Java tutorial](http://www.w3schools.in/java/)? I learned in a CS class, so I haven't checked it out, but I've found other w3schools tutorials very clear and easy to use. Do you have an IDE ("integrated development environment," or the application you use to write code)? I use [BlueJ](http://bluej.org/) when I teach, and it's a good interface for beginners. You'll need the JDK ("Java development kit," or the tools you need to run Java programs), as well. If you use a Mac, you probably already have it. [The Java website](http://java.com/en/) will check your computer for you. Get the JDK **first** and then the IDE, or use BlueJ's "combined installer," which includes the JDK. That's a shame that your CS class is skipping the best part about coding! Kudos to you for sticking with it.
Stop moaning. Do the job. :) Btw, listening music can solve some problems which are related to boringness. Or having a moderate hangover. In that state you can really appreciate boring tasks when you don't have to think a lot.
Definitely go to 8, if only for the new JSR310 date and time APIs.
I would look at implementations like oauth2 or json web tokens. Its all in the details of what you're trying to implement. Cookies store is ok as thats how most implementations of api's these days will store their tokens or in db session store. Something like oauth2 will only allow a user access to the services as long as the token is still valid. So even if you stole a token, it will probably be invalidated. Its all based on your implementation. You can have indefinite tokens or you can have tokens invalidate after x amount of time. As thekab mentioned its not impenetrable. 
&gt; The method Files.readAllLines reads all lines of a given file into a list of strings. You can simply *modify* this list (...) Javadoc says: "whether the List is *modifiable* or not is implementation dependent and therefore not specified" The current implementation uses ArrayList so it's still safe... ;)
Spring roo, generates CRUD for you.
Thanks! Your answer sound like you've already seen my scenario in the wild?
Well, *you* are the one setting the title of the post to "Down with Java, Up with Lua", and you have the *nerve* to tell me that this is not flamebait or off-topic? Yes, I read the last part of your post. What I meant to convey is that Lua's standard library, while very lean and well-designed, lacks a lot of the power that the Java standard APIs command. To clarify terminology: A programming language is any language that one programs in. A scripting language is a programming language that is used mainly for scripting (that is embedding into an application) ‚Äî usually with a dynamic runtime. Thus, *scripting language* is a subset of *programming language*. Scripting is (a kind of) programming. Down with trolling and 'us-vs-them'-language advocacy. Up with productivity and collaboration.
I must admit I am surprised you liked that Docker for Java Devs talk. My expectations were most likely too far off, but that talk should have been called "my docker maven plugin" in my opinion. It was the only presentation I left early. Apart from the great talks I am really curious about the workshop tomorrow as those were not offered last year.
You may have misunderstood what was meant by "complex object graph traversal" in the article, which is not at all the same as querying. When you want to materialise a complex object graph, you want to load rows from 20 entities / tables at once, change them all, and store them back to the database again. The amount of work to manually figure out the right order of `INSERT`, `UPDATE`, `DELETE`, etc. and the locking behaviour that is implied is terrible work in SQL. That's where Hibernate shines. But there's no such thing as complex querying involved. In fact, you don't query at all, you just load/store.
Ah, well then it's just a comment which you can ignore, but as someone who's used Hibernate for years I found it confusing. Maybe differentiate in the article. If you have ObjectA-&gt;ObjectB-&gt;Collection of ObjectC-&gt;string property address, Hibernate takes care up updating it for you which jooq doesn't (I assume it doesn't). If you want to query that property, Hibernate is still very complicated. Just my 2 cents and thoughts/suggestions. 
OP got deleted.... I had this bookmarked, and was ready to check out some things on that list when I have some free time. Tough luck, I guess...
I deal with it because it keeps production bugs to a minimum and production bugs can cost you your job.
Thanks for this. Signed up.
&gt; It's equally easy to design a non-scalable, crappy system in any language. Perl &amp; PHP, need I say more? 
Something -&gt; Actors, RDBMS -&gt; NoSQL, Java -&gt; Erlang Broad claims of performance improvements after a complete architecture/infrastructure reboot. Can this be made any more vague?
TIL: the first steps towards becoming an alcoholic is writing functional tests in Java.
I actually find that very useful. But: General &gt; Editors &gt; Text Editors &gt; Show whitespace characters
I put little jokes in my comments and test data. Someday, someone will look at my code in the future and maybe get a chuckle.
I've tried Mission Control. I like it, but I'm looking a tool which offers better automatic monitoring and reporting features.
Would you care to elaborate on why you feel the need to view newline characters? :) I'm aware that a number of people like to, but I've never asked one why before ...
Sorry, I use a custom css for reddit so these things weren't so obvious to me. I'll post it in the right sub. Won't happen again.
Right-click a project, and there should be a menu item to analyze the code. It'll give you every single warning it finds, which can be a lot on large projects.
I don't know but why do you want to? Why not use intellij IDEA?
Cutting corners leads to bugs in funny places. I don't particularly mind things like default time zones (because you can change them at run time), but you can only change line endings at JVM startup. Complicated and messy, that. An output writer should have a setter for line endings, it shouldn't be possible to create a writer (or character stream or whatever) without specifying an encoding. What's that thing about assumptions? It makes an ass out of you and me? ;-) 
I second using IntelliJ IDEA instead. IntelliJ IDEA is to Java what VS is to C#, an extremely smooth and integrated experience. Plus the community edition is free.
&gt; Cutting corners leads to bugs in funny places. I agree. That's why you shouldn't cut corners in production worthy code. I understand it might be nice to have strict frameworks in order to avoid shortcuts, however, sometimes I just want to throw something together, and I'd prefer not to have to resort to a higher level language like Python because development time takes too long in Java just for a simple little POC. Maybe there should be some compile time warning when not overwriting defaults, but not doing it shouldn't be disallowed or categorically called evil. PS: I've actually gotten burned by default time zones more than line endings.
How many others read the topic "Anyone know how to get rid of eclipse" expecting to be followed some IntelliJ praises?
Thanks! I was not aware of that. The only 'downside' is that they prepend the test method with 'test' and I usually don't start all my tests with 'test'. :)
You can edit the template by pressing ALT+Insert and then pressing the right arrow key. I like to replace 'test' with 'should'.
 set nolist Oh, wait ... that's for a real editor. *ducks*
Made a Live template for Javafx. Platform.runLater(() -&gt; { $SELECTION$ }); Select a block of code you want to surround. CTRL + ALT + J Enjoy!
That's because of the JUnit 3 naming convention. This is no longer required for JUnit 4 by the way.
&gt; IntelliJ IDEA is to Java what VS is to C# I really like IntelliJ, but I prefer NetBeans. They're both excellent IDEs.
These new testing features look pretty nice, will check it out!
I don't disagree, but I am also aware that this reflects my bias against non-typed languages. I am sure that competent folks could design and implement a system in Perl and/or PHP that would be non-crappy. In fact, I think this buttresses my argument that it's the personnel that are more critical than the technology. If you have people that are good at PHP &amp; Perl, I think it's wise to get a hard look at employing those technologies in your solution. One of the things I've seen over my Silicon Valley career is an over-emphasis on technology and under-emphasis on people and training. *This* new shiny language is soooo much better than any other language, our application will just be automatically better if we rewrite it. Some things are easier in one technology, some things are harder. But the details blur together when you pull back to sufficient altitude to consider whether the system is architected well. Not just latency/scalability, but more mundane topics like, "how hard will it be to add feature X that we didn't consider when we designed the system?". Then you get into craftsman-level issues like good object/function design, limiting assumptions, etc, that, in my opinion, are independent of the implementing technology. And while lack of scalability, etc, can certainly pose a critical threat to the growth of a product, in the long run, fundamental issues like I mentioned above prove to be just as important if not more so.
Get rid of httpd and serve your static content from tomcat? You can't have two services configured to bind to the same port, if that's what you're after. If these are Linux installs, you will probably need to forward port 80 requests to 8080 with iptables or your router if this is a business setting. Configuring tomcat to listen on 80 in Linux is inadvisable as it requires escalated privileges.
how much is the license ? Just be clear about it. I'm not going to invest time into a product without knowing what I'm getting into.
I know a lot of educational users who like BlueJ for teaching Java
Not sure if this is related to your issue. http://www.oracle.com/technetwork/java/javase/7u75-relnotes-2389086.html SSLv3 is disabled by default Starting with JDK 7u75 release, the SSLv3 protocol (Secure Socket Layer) has been deactivated and is not available by default. See the java.security.Security property jdk.tls.disabledAlgorithms in &lt;JRE_HOME&gt;/lib/security/java.security file. If SSLv3 is absolutely required, the protocol can be reactivated by removing "SSLv3" from the jdk.tls.disabledAlgorithms property in the java.security file or by dynamically setting this Security property to "true" before JSSE is initialized. It should be noted that SSLv3 is obsolete and should no longer be used.
There are a lot of benefits to front-ending an application server/servlet container with Apache, for instance gaining access to the wealth of Apache modules. You can also use it to integrate one or more discreet java servers into an existing apache served website without having to open up nonstandard ports. For OP, I don't have any direct experience using the automatic settings but I have several times configured Apache to front-end for Tomcat and Glassfish using mod_jk or mod_proxy. mod_proxy is less config though.
That alone should be a major red flag considering how hopelessly outdated and detached from reality most educational institutions are.
I have managed to get them communicating, though I never got the auto-config to work. I found the lines I needed to add to httpd.conf. The reason I am doing this is as you've said, there is just more stuff available for httpd, not to mention in the tomcat setup it says you shouldn't use it for static web pages as it's just not as fast.
The project is now up on GitHub at https://github.com/pwnedary/EventBus. It performed ~15x faster than Guava in my VERY crude and simple benchmark (don't take it too seriously). I am a bit familiar with Bukkit. Never used it though. In fact, modding was what introduced Java to me, back when I programmed Javascript (although now I have moved on to C/C++).
Yes. Definitely. Programming is also a hobby to me. While I'm not like the so-called "rockstar developers" who are expected to spend every hour of the day with programming on their mind, I still like to play with new technologies. I have a lot of other, more important hobbies too, of course. But I'd say I like programming as more than just a job. I'm 25 now. I've got a bachelor in IT (specializing in development) and in august, I'll have my 3 years of experience (which I hear is pretty monumental :D ).
Interesting. I'm quite keen to start a project using Spring WebSockets.
That is a *lot* of XML.
TBH, this post should rather go in /r/programming or in /r/learnprogramming as it is not specifically about Java or JVM related.
You mean the JCA config? Yeah, it's not so nice, and too verbose. David Blevins (TomEE dude) proposed a much less verbose syntax. Hope that will make it into EE 8.
but /r/programing only allows link posts right? And, i'm particularly interested in the responses from people that program in the same language as me because they are typically from the same labor pool etc.
No, just checked it, they also allow self posts. Don't delete your post here. It started a good discussion. I just wanted to bring up the fact that there are broader subs than /r/Java that might be concerned with that matter.
I never even knew how well programmers were paid while I was growing up. I absolutely love programming. I do have a programming job, but I also do it on my own time for zero pay! :D I am over 30. I have been coding for money since about age 14.
IBM WebSphere Application Server doesn't support Java 8 yet because version 8 of the IBM Java runtime isn't out yet. The current supported version of IBM Java is 7.0.
I'm so far in debt to become a programmer that I couldn't stop. I would stop being a professional programmer in a heartbeat. I still enjoy programming but I"m so tired of working on stupid projects and pointless tasks I can't stand it. I'm tired of the horrible tech interviews and the eletist assholes who think that the difference between and interface and an abstract class is the ultimate java interview question. I'm tired of supervisors who don't understand what I'm doing and will never even try to understand the difficulties of what we do. I'm tired of working with people who think that fighting over trivial implementations is the way to accomplish a goal. And while I'm at it fuck recruiters and the whole staffing industry. Anyway I really love programming but there are a lot of things that you have to deal with if you want to do it professionally.
Because five spaces is not the same as one tab, and that can wreak havoc when merging branches.
Atari games is for fun, but some of the better homebrews do pretty well. Retrogaming is in. The Boulderdash port to the 2600 (which was an amazing accomplishment) had a limited run that sold for about $100 each and quickly became worth $400 each. But that's why I enjoy programming -- writing games and fun things like that. It's not my career. &gt; with experience working on the right sort of enterprise apps Like I said, I keep making the wrong decisions. It's easy to look in retrospect and say "Enterprise apps", but a lot of things were being hyped... and I just keep picking the wrongs.
Without a doubt, making computers make the life of others and myself easier is awesome.
&gt; Would you care to elaborate on why you feel the need to view newline characters? :) I'm aware that a number of people like to, but I've never asked one why before ... Sure * It verifies that I'm not missing something way off the right of my window * It let's me know whether I want to run "Code Cleanup" and do commit before making any real changes to fix leading spaces into tabs. * It let's me know if somebody put some funky characters outside of ASCII in a comment, r-value or an identifier because of i18n, an accident or a sick joke.
&gt; I am sure that competent folks could design and implement a system in Perl and/or PHP that would be non-crappy. I completely agree with you. In my comment I was referring to "It's EQUALLY EASY to design...." Which, like you, I think strongly &amp; strictly typed languages make it harder for that to be the case.
Looks good. I'm especially happy about the integration with Spring Data
This should probably be in /r/cscareerquestions, you may consider adding it to the sidebar.
Probably not. I'm 30 and have 7 years experience. I certainly didn't love it in the beginning, I've gotten more comfortable with hacking and had a bigger appetite to do my own projects over the years, but I never program in my spare time. Getting my degree and on the job experience was a lot of work, and the hours are never not crazy long. I do it so I won't be poor like my parents. I do have fun making stuff and I like being good at something, but i'm not doing this for minimum wage. Thing is, I don't know what else I'd do in this bizarro world where programmers aren't needed. Maybe be a cook or work in a boatyard. I'm saving to retire early but odds are I'll keep programming when I have FU money because I can't think of anything better to do. We don't live in a world where I didn't become a programmer. I don't love it but I still became a decent professional programmer. I was scared I wouldn't. 
&gt; Like I said, I keep making the wrong decisions. It's easy to look in retrospect and say "Enterprise apps", but a lot of things were being hyped... and I just keep picking the wrongs. You can't really go wrong with mobile app development right now.
I've switched from mod_jk to mod_proxy_ajp recently. The mod_proxy modules are a hell of a lot easier to config but they sacrifice a little flexibility... Most of which isn't necessary.
Would you be interested in moving to ruby on rails. It would be just one command "rails scaffold"
HELL NO.... just kidding. I guess I would would still do it. Still fascinates me and always learning new things. I am 34, and I've been coding for 10 years.
You moved BEFORE doing that research? Wha... O.o ?
I didn't say indie. That's a different monster altogether and it's a hard way to make a living. I've published a few apps and, while the income is decent, it's nowhere near enough to pay the bills. But mobile app development for businesses? Shit, they can't hire people fast enough. I know because that's what I do. If you know what you're doing in the mobile apps world, you are almost guaranteed a job.
Yeah, seems to me that you can often make huge improvements to a system with simply a rewrite - changing the language might not always be the key to the rewrite...
Yes, I would continue to do it if it didn't pay well. Reason is because it's fun, challenging, rewarding, and I like to see users reactions when I present something that makes their job, daily tasks, and/or life a little easier. My current job is in medical research service line and I'm the sole programmer(full-stack) there. It's a bit stressful because everything falls on me and the success of projects depends on my skills and knowledge. Luckily, I have IT experience which helps with sys admin stuff like servers management. I also have a background in graphic design which helps with UI and UX design. I should point out that at my current job I don't program in Java, I use C#, ASP.NET, etc. I have approximately 5 years experience and I'm 30 years old.
I'd teach. Probably chemistry. That's a hell of a lot more satisfying. Back when I did that for a living, I still programmed for fun. Because that's also satisfying. The stuff people actually pay really well for is enterprise crap that feels extremely hollow and mechanical. I absolutely love programming, but a tiny portion of my time gets spent on it. 
Programming jobs are abundant here. He said he was working on his degree still, possibly indicating he goes to Arizona State in Tempe to finish up his degree while not finding work yet. Java developer jobs are all over the valley. 
Boston --&gt; Phoenix is a weird change.
No. Working as a programmer took a lot of the fun I had out of it. So I probably would not continue if it didn't pay decently.
I dislike when people say programmers are paid well. Remember: the world runs today because of programmers. If anything, we should be paid better.
Hell NO! Too many bad programmers in the market now dragging the quality and value of the programming down as it is. If I did get paid less for what i currently do, I would find another career with either less stress, or more pay.
I buy that. But it sounds like OP is into doing his own thing, so I wouldn't want him to go try publishing some mobile atari games only to find out that his months of effort yielded $8/month in recurring revenue.
I'm almost 40, been programming since I was 10. Yes, I would still do this, even if not paid. I like to tinker with things, I like to build things. 
No. I am 31 with 10 years coding. My work is fun but not having money is no fun. Right now i need financial security and being able to save for early retirement and do the things that i like outside a computer like traveling (something easy to do with my developers income) When i reach financial freedom and can in fact, just work for fun, i dont really want to code anymore. I want to focus on tencnology in education or social and business development 
Its definitely handy when creating makefiles.
No, just fire or don't hire bad ones. Why take good pay away from good programmers just to flush out the bad ones. Just because you provide less fuel to a fire, doesn't necessarily mean you're gonna put it out. If you can't hire good programmers, then you're the one who should maybe consider lesser pay or a new career.
Hehehe ... I think that speaks to make's fickleness with regards to whitespace more than anything else ;-)
I've heard that, and I've seen a demo in Rails' java-oriented cousin Grails of that same sort of thing. Just that companies I work for are Java shops, they don't want to introduce new technologies.
It doesn't mean it's the only and last tool that has to be taught. Having a simple stripped down IDE allows the student to focus on the code rather than the tool. Lots of complicated professions start students out on simplified apparatus so they can learn the basics, e.g. a training aircraft for pilots. With it you learn about flying. Then when you know how to fly you learn about the 747.
Probably not. I can make more as a cop, or (depending on what I'm hauling), a truck driver if pay went down to average wages (currently 49k CAN). All three have the silly games and bullshit, so if you're forced to deal with it regardless, might as well go with what keeps your bank account happiest.
Maybe, but I really doubt it. The fact which motivates me is that I'm doing very cerebral work, and while that is rewarding in of itself, I feel like being above average intelligence/adaptability/quick learning are all key factors of being a successful programmer. If I wouldn't be compensated generously for all my hard work my satisfaction would go way down, because honestly I feel like not many people could do my job, even though I'm aware that IT overall is still a booming industry, and there are lots of people working in it/trying to get into it. I'm a Java developer with about 11 months of employment experience. For clarification: I'm Romanian, and working in IT over here pays well above the average income, as lots of European/International enterprises find it way more profitable to open software development branches in countries like mine (by paying us 1/4 of what a developer might earn in Western Europe/the US, which is still above average and quite comfortable here).
Probably. It's a fun hobby regardless, much like doing mind puzzles
I would, if it was for the right company. Earlier in my career, I worked in a small development group for a large Americian defence contractor, and the people I worked with were some of the best engineers that I have ever met. You were always learning and debating the best way to approach problems, and everybody really gave a shit about code quality/maintainability. Not to mention they were a decent bunch of people in general. I ended up having to move to a new job for personal reaons, and even though I make considerably more now than I used to, I'd still rather be back there. I've found that finding people with the same passion for the craft is extremely hard.
25, 6 years. No. I would have stuck with art and animation, with some programming as a light hobby. I get no satisfaction from programming anything but the rare personal project. I only got into software engineering for the money, and I will continue giving years of my life to a company for money. I might pick things back up that I enjoy later in life, after work has taken my health, energy, and self worth. 
Okay, so one of the purposes of having interfaces is that I may probably have some other implementation in the future. Also, according to some other comments in this thread, it would make my code easier to test since I can just inject a mock implementation of that interface in my unit tests. But what I don't really get it the part why I have to *shield my application from Hibernate.* I don't understand the logic behind that, I mean, it's Hibernate that I do want to use right? &gt; The DAO interface is at higher level of abstraction, describing data access in application terms rather than JPA/Hibernate terms. I'm not sure what you mean by this. Sure, my interface can have a *User getUser()* method signature and my implementation just implements that method. What do you mean by *describing data access in application terms rather than JPA/Hibernate terms*. I'm sorry if I sound like I'm 5 years old. I just want to get this perfectly right since I will be explaining to my boss (who's not really knowledgeable about these patterns) why I had a particular interface where in fact I only have one implementation.
Look at github for your answer.
https://www.dice.com/jobs/q-Java-l-phoenix-radius-30-startPage-1-limit-30-jobs.html There are quite a bit of them. Are you qualified? 
Unit testing is one reason to shield your application from Hibernate. But you never know what the future holds and you don't want to necessarily make your application physically dependent on Hibernate. For example, this application I'm working on started with Hibernate, but we are migrating to JPA. Because we use interfaces, the same application works in two entirely different persistence contexts. One day the Hibernate version of the application will be decommissioned, but that is not this day. Shielding your application from external dependencies makes your application easier to test, more reslient to change and more reusable. &gt; it's Hibernate that I do want to use right? That's like changing the question because you already chose the answer. Depending on the interface is like choosing the question, and Hibernate should be an answer to the question. Hibernate may not always be the right answer! &gt; What do you mean by describing data access in application terms rather &gt; than JPA/Hibernate terms. This was related to the unit testing scenario. Describing data access in "JPA/Hibernate" terms would be to use an in-memory persistence provider. That is how you can get canned answers out of Hibernate. In fact, there are people who would suggest you do exactly that, because you're testing the "real thing". &gt; why I had a particular interface where in fact I only have one &gt; implementation. This pattern should prove itself. If you don't have tests and the interface really isn't doing anything, it shouldn't be there, and the DAO itself is okay. Although, if you don't have any kind of tests, that would be more concerning to me than the one implementation interface.
Agreed; I moderate several subreddits on my other account and have made similar observations/comments before.
I don't get why people act like STEM isn't a creative field like art or music. A lot of programmers want to create their own things instead of working for a big company, just like graphic designers or illustrators. No one really DREAMS of having a 9-5 job.
I think it's more sensible to create the interface when there's actual need for multiple implementations. I agree with /u/sh0rug0ru_'s advice, just create the implementation DAO class and skip the interface class. Modern IDEs have "Extract interface" to help in creating the interface when needed. About testing, I'd advice on avoiding mock objects as long as possible when doing automated tests. Using mock objects in testing might hide bugs if the tests don't exercise the actually used components.
Absolutely they should
You make me optimistic for job prospects in the future. I am currently learning all the nuances of the Android development while finishing my BS. My motivation is that I just really like my phone enough to want to know everything, and it makes what I am learning in school have a relevance to the real world.
What a load of crap. the main reason to do this is to get apache plug ins. If you have no need for them, chances are you'll gain nothing from putting httpd ahead. If serving static content is the only reason, there's no need for it.
I've applied to several of these, but as far as my qualifications go it's really hard for me to say. I've been programming professionally for 5 years, and I programmed in undergrad as a research assistant, but it's been all been desktop apps, and mostly academic type stuff. I'm good at core things like object oriented design and how to write good code, but when they list specific technologies I'm never quite sure. I figure it's easy enough to learn, but they probably want someone that already knows it. Anyway, thanks for the help and the link. So far I've just been looking on LinkedIn, forgot all about Dice.
I'm 26 and I've been developing since I was 11 or so. I love being a developer but pay definitely affects my career path, though I would favor programming for lets say $40k over doing a job I enjoy less for $50k as an example. That said, it would probably mean I would take something I do in my free time and turn it into my job, and programming would become a hobby. 
I'd do it for fun and as a hobby but not professionally. In fact, I hope to be in a position later where I *only* do it as a hobby and not for anyone else.
"If"? Programming pays me zero. I'm still doing it. And more. I'm teaching myself analog electronics, FPGAs and a couple of other things. Three and a half years of sending out three resumes a week, still no job, but the world can't take away my skills. I will be coding on my deathbed.
Would probably major in (whatever makes money) and minor in cs
Unlikely. There's already enough people in the industry that make life difficult, especially when you have to work with their broken code. As it is I'm already considering my options as I've been looking around at job ads and am seeing jobs advertised at $30-40k more if I want a team lead role, or $20k higher if I want to stay at the level I'm at (Senior with 10y experience). There's been and appears to be no room for career growth where I am, yet on the other hand it's a gauranteed, stable job. If I moved somewhere new, there's no gaurantees. Sigh. What to do - career job security or money :/
After experimenting with node, asynchronous programming is multi-threaded programming on easy mode. You let the asynchronous framework handle the multi-threading, and you write the meat. I have played with reactor, and it is essentially an event bus. The use cases is for whatever you want to use it with. In terms of java, it lets you decouple and modularize your code. Its a lot like spring core. Dependency injection and bean management are two things that any java program could benefit from. Asynchronous style is an abstraction step farther than DI.
No. Too much stress.
As a Bostonian.... Why would you want live in Phoenix? Yuck.
Slightly less snow is a plus.
Sure... but Phoenix? Sorry, I just have a low opinion of anything south or west of NY.
I got bogged down sometimes, but when i do i start going rogue. You know, suggesting massive improvements and also demoing their value before amazed managers who didn't even know you were starting on it. You have to be a little bit clever to figure out what this thing is that will amaze them, but its usually easy when you understand their business objectives. Sometimes when it's "your" thing you get the very best out of yourself.
Yea I suppose I would. I feel lucky it pays so well, because I found it before I knew it paid a lot. For me, it's the most stimulating thing I've discovered.
Man, you should look around more. In my experience there are tons of jobs at tech companies for programmers. What do you look at? the classified ads? At least in the US a quick search reveals hundreds of jobs for programmers as a permanent position, more than any other profession in fact.
40+, 25+ I started programming while I was in high school. Was lucky to have a PC at home during the 90s! Yes, I would program even if it didn't fetch a good pay. In my programming career, I have seen many types of people. They mainly fall into three types: pay-oriented, career-oriented and ~~object-oriented~~ technology-oriented. There are shades between them of-course. I am squarely in the last category, and I must say, it often causes problems in my career (not that I care). I have walked away from good paying offers, and then spent years building some free / non-paying / open software, or an year to spend trekking in the mountains! So to answer *why*: I don't know. It just boils down to who I am and my interests.
When you say early retirement, what age are you thinking of? Sorry just curious, as I've been thinking about it myself.
Ctrl + I - Correct indentation
With Subclipse: Commit: CTRL + ALT + C Update: CTRL + ALT + U
Absolutely. I crave intellectual and creative challenge. Programming is both for me. Age 30, programming 8 years.
Ctrl+Shift+L - shows active keyboard shortcuts
Facetime is for your kids to call their grand parents. It should be called Grannytime.. Fantastic for it :)
woah
Indispensible; any time I enter a type name and it gets red-underlined, this fixes it straight up. Huge time-saver.
401K , if you put in 10% of a dev salary , starting at jr dev, and assuming sr dev by age 30. you are talking easily having 1 million+ by age 60 in 401k alone, thats just assuming you are spending the rest of your wages on life http://www.bankrate.com/calculators/retirement/401-k-retirement-calculator.aspx That should be enough to live on until death unless you are spending exorbitantly. 
ALT + F4. Much like that other bloated slow behemoth eclipse tries to be all things to all people as is a slow fat bloated difficult to navigate behemoth... Also gives Java a bad name as people assume all Java applications perform likewise 
Yes I would. I actually studied IT because I like programming, not because of the wage. As long as I can pay the bills and save some money for later, I'm happy.
Enterprise dev all the way
*Warning: personal opinion.* I can't speak for the industry as a whole, but I can speak for myself: I detest GUI builders, mainly because it inserts code in such a way that it becomes a mess. I usually feel 'out of control' when I'm using such tools. When I've built something using one, I find myself reordering the code anyway. Things are automatically inserted, which may be unknown to you why it's there, or what it does. When building a GUI by hand (i.e. coding it yourself), you get a feeling of the controls, what they do, how they function, et cetera. I think it's fine if you want to do some rapid prototyping though. Maybe the GUI builders of today are better than before, so take my opinion with a grain of salt. I haven't used one for quite a while.
WindowBuilder is sorta nice: https://eclipse.org/windowbuilder/ It can generate pretty clean code for the UI you're composing. Most importantly, know what your code is doing, line by line, don't take for granted what the GUI builder is doing, analyze the code.
I don't think there is an industry standard. Everyone's experiences are different. Back when I did Swing development, I hand coded UIs. But when I did Windows or Gtk development, I used GUI builders. I've never done JavaFX development. If I had to give a reason why, it is because the output of the Swing builders is Java code. Whereas in Windows, the output is a resource file and in Gtk, it is a Glade XML file. Also, Swing layout is so powerful (GridBagLayout is awesome), that the builder just gets in the way. I can (still) hand code a UI in Swing much faster than I can in a UI builder. On the other hand, in Windows, I worked on a heavily internationalized app, and the UI had to look very different for English, German, French and Japanese/Korean/Chinese. German has really long words. French requires a lot more words. Japanese/Korean/Chinese letters are laid out very differently. Chinese writing is different for Taiwan (Traditional) and PRC (Simplified), even if the language is Mandarin, and you must not mix these up. So, we created different resource files for each different language. I've never written an app in Swing with the same requirements. That's my 2 cents.
I use GUI builders for Swing because even with an IDE helping me typing that huge mess is awful. Since JavaFX8 I write code. Depending on the size of the UI I use FXML or plain code.
I find myself disagreeing with all posts from yegor256.com that are reposted here. He is very opinionated and writes clickbaity titles. And he is always wrong when he paints the world as black and white as he does. There are always multiple opinions about how to properly structure code and how to split responsibilities. And none of them are inherently right or wrong. They are just different opinions. Hell, some people change their opinions! What do you make of that. This post is pretty bad in particular because an object is suddenly not a bean anymore but needs knowledge about how to represent itself in a limited number of proprietary formats. JAXB definitely has its flaws but it's still a great way to use XML (and no, I don't think XML is as horrible as many people make it out to be). When JAXB is too heavy (e.g. Android) there are still other frameworks that allow you to map XML into Java beans and back.
CTRL-S: Save current file. It's a bit cheeky, but a lot of useful things happen when I save the file, like formatting, removing unused imports, making stuff final etc.
no, 60 is not early, but then again we are living much longer now if you don't smoke and have a healthy body weight. 401k is sort of like a pension but more risky, closer to an investment but you don't have to pay taxes on it if you can wait till after 65 to cash out. The benefit is that you can switch jobs and keep growing it, its completely independent of the company you work for unlike a pension that typically requires you to stay at the same position to accrue.
This is dumb. There are objects and there are data structures, and which you should use depends on the circumstance. As Uncle Bob quotes in the "Object/Data Structure Anti-Symmetry": &gt; Objects expose behavior and hide data. This makes it easy to add new &gt; kinds of objects without changing existing behaviors. It also makes it hard &gt; to add new behaviors to existing objects. Data structures expose data and &gt; have no significant behavior. This makes it easy to add new behaviors to &gt; existing data structures but makes it hard to add new data structures to &gt; existing functions. JAXB, Jackson, Gson, etc. use data structures for serialization, leveraging the Java type system to support serialization. The data structures themselves can be considered DTOs created by the object during serialization/deserialization, thus not breaking encapsulation. Objects and data structures can coexist, and JAXB doesn't have to violate your precious OOP.
Yes it is necessary if you want to test your code. I used to think that it wasn't necessary, coming from a Ruby/PHP background. In Java, you will eventually cause yourself pain if you don't use interfaces. For example, lets say you have a class that you want to test but it depends on a class that accesses a database. You don't want to have to ensure that the database is in the right state every time you run your test. Instead, you want to assume that the database layer is correct and just test the logic in your class. The way to do this is to replace the database dependency with an alternative class, that you will just use for your test. For example, you could use a mock. If your class only knows about an interface, then this is trivial. You just write a new test class that implements your interface, and then in your test, use that instead of your real database class. In your real code, you would have course use your real database class instead. If your class is hard coded to use the database class then you have no easy way to test it separately from your database because you can't use an alternative implementation. In other words if you want to test your code then you are always going to have at least two implementations of your interface. Your real implementation and your test implementation. The fact that you can then introduce additional real implementations very easily is just a bonus.
*Just my personal two cents*: I use [*Window Builder Pro*](http://eclipse.org/windowbuilder/download.php) for Eclipse for quick prototyping and for testing of my hand-coded GUIs. I perfer to do the majority of the GUI design in code because it gives me better control of the code itself. *For example:* When I want to add multiple JButtons to a GUI, I generally write methods that create the buttons, and add them to the GUI. This cleans up the code. All Builders just write new code for each GUI element added so the overall code tends to get very bloated and repetitive. Window Builder allows me to hand-code the GUI and to get a quick preview of how it looks so that I can tweak the code easily. Also, a major drawback of GUI Builders is that they don't structure the code. Everything is in a single class. I prefer to separate my code into logical units. + Say, I want to build a calculator. + I might have a JPanel for the display, a JPanel for the numeric buttons, a JPanel for the basic operations (+,-,\*,/), a JPanel for scientific operations, and so on. Doing this with a GUI Builder, without really paying attention to the code, will unnecessarily blow up the code and have extremely repetitive code. Writing the GUI by hand, the code can be structured in several classes, can use methods to create and arrange the buttons, use data structures, like *Arrays*, or *ArrayLists* to store the button instances, and so on. The manually generated code will be much shorter and easier to read. Can't yet say anything about SceneBuilder as I have not had time to try it out. **TL;DR:** + Eclipse Window Builder pro for quick prototyping: *yes*, for final code: *no*. + Netbeans GUI Builder: *no* - too much code obscured. + IntelliJ GUI builder: *not tested* + SceneBuilder (JavaFX): *not tested*
Agree 100%. GUI Builders in general produce bad and illegible code.
&gt; I use GUI builders for Swing because even with an IDE helping me typing that huge mess is awful. Why? Opposite to GUI Builders you can create methods to do the majority of the work for you. You can use loops, arrays, basically everything that Java has to offer to shorten and clean the code. 
Alt + F4 (on Windows) and then install IntelliJ IDEA ;)
I have had the misfortune to take over code where people where a little bit too clever with the GUI creation as part of my first job. The code was basically unmaintainable and made me very weary of doing anything like it. I guess I got burned too early and it just stuck.
Luckily I don't have to design UIs anymore. All backend code now. I use JavaFX8 for personal stuff, though.
You can set a preference for fixing imports on save. This fixes missing imports as well. So what I always do: Add some code (red squiggly lines appear), save file, imports added, red squiggly lines go away. Obviously this doesn't work when you have ambiguous classes which appear in more than one package.
CTRL+1: Place your cursor on an error (red squiggly line) or a warning (yellow squiggly line) and press CTRL+1: Eclipse will show some suggestions to fix the issue.
CTRL + SHIFT + L Or as I like to say Ctrl Shit Lazy will show all keyboard shortcuts If you are using STS then it will open a textual search which is also cool. 
&gt; If programming didn't pay well, would you still do it? Yes. As a hobby, at least. &gt; Do you enjoy being a developer and feel that you would choose that as your career even if it didn't pay well? Yes and no. I really enjoy being a developer, but I also enjoy a well-funded lifestyle for me and my family. I feel that given the choice to either remain a programmer or maintain my lifestyle, I'd choose the latter. Note that I have also worked as a project manager, musician and dubbing actor in the past, so I have some choice in that matter. &gt; age and years of programming experience I'm 38 years old and have about 30 years of programming experience, including 15 years of professional programming experience.
GUI builders don't give you full control, and generate a not easy to modify code. So, if you are targeting a simple GUI, and not intending to modify the generated code, then it's fine to use them, else go the harder way and do it in code. In JavaFX you can build your GUI in XML. This is a great advantage, and you will find it better to build the GUI declaratively than in imperative code (think Java) or GUI builders. 
For some reason i get this error: &gt; Could not download recording for My Recording. "java.io.FileNotFoundException: No chunks"
Yes, I am the author of the site. So comments are welcomed.
Thanks for the feedback. I agree good communication is essential in a team environment. It sounds like you have a manager who respects people and their ideas. That's awesome.
Unit testing and integration testing, exactly. I prefer to use unit testing for simple self-contained objects / functions. Whenever there's an external dependency (outside of the object), I'll use real objects and try to avoid mocks unless there's a valid reason to mock. Do you really mean unit testing helps to find out integration bugs? If you mock out the dependency, how will you know when the integration breaks?
There is an interesting talk about using interface/implementation everywhere: http://www.adam-bien.com/roller/abien/entry/service_s_new_serviceimpl_why As to DAO itself... I would say it's good to use this pattern with JDBC. However, when you use JPA, DAO is performed by EntityManager. The problem is that if you would like to implement your own persisting mechanism, you would have implement JPA by yourself which is not simple for mortals. Ps. a document called "Sun Certified Enterprise Architect for Java ‚Ñ¢ EE Study Guide" migh be intersting for you.
Does tomcat handle php/cgi-bin stuff as easily as apache?
Ctrl + Shift + F will fixes all indenting without the need to highl, as well as break up long lines of code vertically and space out your methods properly.
I think this library is really interesting, since we know fixing bugs earlier costs a lot less. The code quality is very good, which is expected, considering it was developed by Googlers (I even saw a Google Guava committer in the recent Gihub commit logs). Here is the original announcement: https://plus.google.com/+AlexEagle/posts/g3q53jRK8mt And the GitHub project: https://github.com/google/error-prone
For Java, there is no need to use a GUI builder, for the simple reason that is extremely easy to write a UI in java (swing and javafx). For other languages/platforms this may differ. Editing resource files for windows can be quite a pain without the resource editor. Qt/WxWidgets are very easy to write UIs for without a builder as well. YMMV, of course.
I dislike how Gui Builders negate many benefits of Source Control
It might be interesting to know that Jad is not updated anymore because its author died and no source code was ever published.
&lt;obvious&gt;Just decompile it&lt;/obvious&gt;
I haven't read any more than you, but it looks like the suggestions might make it possible to plug this into IDE autocorrect a little better?
He explains the rationale for this project in the [release announcement](https://plus.google.com/+AlexEagle/posts/g3q53jRK8mt): &gt; After working with Bill Pugh, the author of Findbugs, I was frustrated that we showed a list of important bugs to programmers, but it was hard to get those fixed and prevent new ones. I thought it would be much easier (and kind of fun) to check for them during compilation and just fail the compile.
&gt; I'm tired of the horrible tech interviews and the eletist assholes who think that the difference between and interface and an abstract class is the ultimate java interview question. hahahaha, this makes me laugh.
Seems like 345 videos
The main difference from findbugs is that it operates on source (instead of bytecode) and it's integrated directly into the compiler (so it's run automatically on every build). Analyzing source code makes it easier to emit automated fixes - Error Prone diagnostics suggest how to fix your code, and it can also be run in a refactoring mode where fixes are applied automatically.
I've never used stuff like this before. How necessary are libs like this? 
My impression is that there's a lot of jobs for people with senior levels of experience with the right technologies. Wrong technologies or not senior, get in line.
You should probably look harder and network more. There are tons of full time jobs available in major cities.
If I go retool on that, will I get a job with no prior experience doing exactly that but having 20 years of programming experience? Or are there now enough people that have done at least one project on Android/iOS that I'd get shut out? I have more of a foundation in Data Science right now, which is also supposed to be hot. I was hoping the Java certification would get me as a mid level programmer without having to take additional months I can't afford to tool up on Spring and other things that became popular since I last worked seriously in Java. I did an Angular.JS project a while back and then just as quickly as it came, Angular.JS dried up. I've been working in JS for years, but without the right framework on my resume, no one wants to talk to me. I appreciate the suggestion, but, based on that experience, I'm leery of something hot. Hot things tend to get well saturated very quickly. You have to move quick and time it right, and so far I've failed to do that. Edit: And really I want to get away from all of that, hence going back to school and trying to focus on more data/management stuff.
Really cool but I use eclipse a lot so it's not for me I guess :(
The other thing is that Error Prone checks are much easier to write than at least FindBugs checks (not sure about pmd). With FindBugs you have to understand bytecode, whereas with Error Prone you really just need to have an understanding of what Java source code looks like. We want to make it easy for other people to write these checks, so we don't have to do all the work ourselves. :) (ldcushon and I both work on Error Prone)
The other big difference from FindBugs is that we're much pickier about the bugs we point out. If we're going to break your build, we'd better have a good reason. For that reason, it wouldn't be too surprising if you ran Error Prone over a small project and it didn't find anything. Regarding pmd: my understanding is that pmd doesn't have type and symbol information, whereas Error Prone has all the information that the compiler has. This lets us implement checks that inspect the type hierarchy, operate on any subtype of a type, determine whether two different expressions refer to the same thing (this.field vs. field), etc.
Checkout Apache Kafka and Apache Storm.
It's great that there are so many static analysis tools for Java.
No. It is fun, but the health drawbacks are too large.
What health drawbacks are there, compared to other jobs?
Eclipse, the ide, builds (compiles) the code. That was what I was referring to. 
Sitting is bad for your health.
The real idea is to separate your application code from your data access code. You could certainly just implement a class that accomplishes the same thing, but the interface forces you to follow that pattern. If you define interfaces it makes a very clear separation between the interface and implementation. Even if you are sold on Hibernate imagine if tomorrow Hibernate 5 comes out. It is revolutionary and provides a massive benefit if you upgrade. If you are interacting with Hibernate throughout your code then you potentially have to change every class in your project. If you created a DAO interface and all your hibernate code is contained in a few DAO implementations you only have a few classes to look at. Provided you have integration tests for your implementations you could quickly get an idea what methods are broken with the new library.
Yeah, for sure. My builds for years now have had multiple tools running as part of the build chain on my team at work as well as my personal/open-source projects I've instigated a very strict "no static analysis warnings or errors" policy... as a result, there's been a marked improvement in code quality (as measured by production issues) at work and my other code is always solid too. I'm thinking I'll just add this one to the list. 
This is what I like, don't just tell but Ensure it happens. Great decision
But aren't most white collar jobs like that now? 
But don't most white collar jobs involve a lot of sitting nowadays? Is it really that different for programmers?
IDEA is free for schools :)
In one sense yes. But programming takes the social isolation, stress, and being trapped in front of a screen to an extreme. At my last job almost every position besides programmer involved more human interaction and less screen time.
Yeah, I saw that but I thought /r/java is better place for this article. 
...look at the URL I posted again - this was already posted in /r/java, barely a day ago.
Right... I want to put technology specific logic into my model objects...
True, a back-end developer has no need of JavaScript. Yet, it is rare for a developer to leap frog over being a front-end developer and start by being a back-end developer. So, you likely don't have a choice. 
yeah I acknowledge that. Also seems JS is becoming more and more important with each passing year. 
We had a 1-year license for JRebel at our company. Some time after it expired ZT sales called our office and wanted to speak with the engineer who actually used the product which was me. They asked me whether we were interested in extending the license with a special offer but I explained that our current project doesn't really need it (JavaFX-app). That was the one and only call I got from them. 
If you want to stick with pure java, you could try the Ninja framework, there's a Spring JPA module for it, too. It's a lot like Play!, except it uses maven instead of SBT, and so no need to introduce Scala into the whole thing. 
Any profession that requires specialized knowledge has this going on. I'm sure carpenters have similar issues about about whether DeWalt or Makita power tools are best.
Complete Java EE solutions that involve HTML are increasingly making use of single page apps as their front end. Knowledge of JS is essential here. Understanding idiomatic JS is critical to understanding how JS does OOP. There are obviously other front ends (JSF, GWT, etc) that don't require an in depth knowledge of JS, but those solutions, while still valid and active, are not really in the mainstream the way that full single page technologies are.
I carefully read and understood your post. No need to get snarky. BTW: Microsoft had a relatively great GUI designer from VB1 on. Delphi had the most advanced GUI builder that was years ahead of what MS had produced. All that C# (which was developed by the lead developer of Delphi) and WPF can do nowadays comes from the pioneer work of Delphi. The point is, though, this is a **Java** subreddit, not Microsoft stuff, so it's about **Java** GUI designers. I have not yet gotten any experience with JavaFX 8, so I can't jude it. One of my biggest criticism with GUI builders is that they usually don't produce optimized code, like using arrays and loops for similar controls. Think about a calculator where you need basically 10 identical buttons that can easily be created with a loop and an array. I have yet to find a builder that can do that. Same applies to setting common properties. I haven't found a GUI builder that would create a method to set the common property. 
&gt; Unfortunately for me that means I can't use it. Hopefully someday soon the powers that be let me upgrade from 1.6 You can use a 1.8 JDK and target code at a lower level.
try something like angular or knockout.js (&lt;= like) to structure your JS app. Actually doing some serious JS will teach you new patterns rarely used in Java such as async+functional programming.
To be fair Java 8 is already on our 'roadmap' but we have some substantial business asks to complete this year that's pushing it back
&gt; True but from recollection this can sometimes cause issues especially when you have to run an application and you end up with a mix&amp;match of classes where some were built with 1.6 directly and others are built using a newer JDK targeting 1.6 &gt; Similar to this issue: http://www.draconianoverlord.com/2014/04/01/jdk-compatibility.html Good point, the article also recommends to update the bootstrap classpath which would resolve that issue.
I work in a major company, with Fortune 500 clients, and it's not uncommon clients asking for back end devs with front end knowledge. So the more you know, the better. Regular frameworks for JS are backbone, angular and node. 
JavaFX 8 is a much newer, arguably better, but not majority used GUI kit. In regards to your learning, I would suggest you learn one language and then learn a number of design patterns. Once you learn one language very well and a lot of design patterns, you will see it is easy to learn the syntax and oddities of a new language and transfer those patterns to it.
Learn all of javascript (or at least the good parts (TM) ). It's a tiny language, with lots of third party libraries.
&gt; Edit: apparently it's just impossible to run TestNG test cases in my projects reliably. For example, in univocity-parsers, only a portion of the over 250 tests are executed, no matter what I do Submit a bug. :) May as well get the support you paid for. &gt; I am also getting failing tests in other projects when they all run fine from the command line or from eclipse. What kind of failures? The typical failure cases between IDE and command line I encounter are usually timing or dependency based.
This is actually my second version of this program. My first version had everything separated out into different classes and I felt like, for a simple calculator program, it was getting a bit out of control. So I started from scratch, moved most of my code into a single parent class and tried to organize it in a way that made sense. This actually cut down the total amount of code significantly. Once it was all done, I noticed that I had a lot of repeating code such as what you've mentioned but I don't know what to do about it. I did things like creating a ButtonTemplate that extended JButton and housed all of the core button attributes that I wanted. I did the same with my panels. But when it comes to those particular attributes(all being slightly different), I'm not sure what else to do. I have no doubt that there's at least a few ways that I could simplify my code but Arrays are something that I'm still struggling to implement effectively. I also made sure to manage errors and user input as much as possible so that the program doesn't break which added a lot of extra code that doesn't contribute a whole lot to the program itself. Would you be able to be more specific on how I could do something like use an Array for my buttons?
I'd suggest using the command pattern, putting each operator in its own class, all implementing a common interface. And as someone else commented, put the buttons for those commands in an array or a collection. In addition to learning some patterns next, consider learning to use Collections and Generics next. I'd suggest sticking to Java until you reach a certain level of mastery before moving on to the next language. A "certain level of mastery" would at least include: the type system, arrays, collections and maps, patterns, SOLID principles, best practices including IOC/DM, and unit testing. 
Think of an array as a list of variables of the same type. See how you have declared class members but0, but1, ..., but9. Those are also a list of variables of the same type. Instead of having individual JButton variables all with different names, you could make an array of JButton like this: private JButton[] buttons; Then you refer to them as buttons[0] buttons[1] etc You need to tell the compiler how many buttons you want in your array. For simplicity now, let's say you want 10. In your ButtonPanel constructor you can tell the compiler you want 10 buttons in your array like this: buttons = new JButton[10]; Then proceed to construct the JButtons and put them in the array. buttons[0] = new ButtonTemp(); buttons[0].setText("0"); ... buttons[0].addActionListener(this); You'll still have essentially the same code everywhere, but instead of declaring 10 different variables, you've declared 1. This saves you 9 lines of code if you initialize the array in the same line that you declare it, 8 if you initialize it in the ButtonPanel constructor. However, the advantages of the array don't end there. You've saved some lines of code for declaration, but what if you need to do something to every button? Instead of writing code like this: but0.someMethod(); but1.someMethod(); ... but9.someMethod(); You can write a loop like this: for (int i = 0; i &lt; buttons.length; i++) { buttons[i].someMethod(); } And if you need to pass all the buttons of your calculator to some method, you don't need to declare 10 parameters in that method, you can just pass the array as a single parameter. Ok. I said we'll just make a 10 button array for simplicity earlier, but you can actually put all of your JButtons in a single array. It is convenient for illustration that you have buttons which are referred to by number: but0, but1, ..., but9 because you refer to the elements of an array by number: buttons[0], buttons[1], ..., buttons[9] However, you can't just go write buttons[clear], buttons[mult], etc because 'clear' and 'mult' are not numbers. It would be pretty awesome if that sweet loop earlier could go over all the buttons calling someMethod and not just over the number buttons. Well, if you decide on unique numbers to represent each of the non-numbered buttons, you can put them in the array too. For example you could decide that 'clear' is 10, 'mult' is 11, etc and define constants like this. private static final int CLEAR = 10; private static final int MULT = 11; And now you can have code like: buttons[CLEAR] = new ButtonTemp(); buttons[CLEAR].setText("Clr"); Don't forget to initialize the array to include enough space for all these other buttons. As for the slightly different attributes of JButton you're trying to use with ButtonTemp, that's a separate topic to familiarize yourself with. You could create a parameterized static method that constructss a JButton with each slightly different attribute passed as a parameter, or you could parameterize the constructor of ButtonTemp to give each ButtonTemp the slightly different attribute. Hopefully that answers your direct questions. Here's some unsolicited advice. You probably don't need to be learning python yet as your are still a novice in Java. You probably don't actually need to be learning Swing yet either. Arrays and parameterized methods are pretty fundamental to programming and you might be better served solidifying your understanding of arrays and general control flow before getting into specific frameworks.
You can easily create a new function that takes some parameters and fills in this part of code: https://github.com/Raidei/raidei-projects/blob/master/Calculator%202.0/src/Calculator.java#L191-L200 That should dramatically decrease your line count. :)
Sounds like you could read Clean Code if you haven't already. :) 
Awesome book! Cannot recommend it enough. Amazon link for convenience: http://www.amazon.co.uk/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?ie=UTF8&amp;qid=1427629126&amp;sr=8-1&amp;keywords=Clean+Code
I did submit a bug, and apparently TestNG on IntelliJ is just broken. Here are the problems I've faced in my *FIRST* attempt to execute TestNG test cases: * First, I found this 2 year old bug: [Tests are run, but display of results is wrong ](https://youtrack.jetbrains.com/issue/IDEA-100752): basically I have 258 test cases and IDEA displays 0 to around 20, depending on it humour (every time I restart the IDE, a few different test cases are listed). * Then I created this one too: [Not all TestNG test cases are executed](https://youtrack.jetbrains.com/issue/IDEA-138222). IntelliJ does report failing tests if I force them to fail. * Finally, another 2 year old bug: [IntelliJ test runner mixes output from different tests when TestNG parallel is used](https://youtrack.jetbrains.com/issue/IDEA-73260) - you won't see the output produced by some test cases, or you will get mixed contents In short, I'm not impressed at all. This is just unusable and VERY broken. I was expecting IDEA to at least support TestNG as eclipse does, but it does not come even close. It's a pity as everything else in IDEA is so polished.
Yes yes yes. Uncle Bob will give much better advice than random people on Reddit.. 
Well, one thing to consider here is separating the GUI from the calculator's calculations. It makes testing the functionality and [unit testing](http://en.wikipedia.org/wiki/Unit_testing) much easier. It also adds code portability. Not bad for 4 weeks. 
I disagree with the need for arrays here. This is actually a perfect example of where polymorphism might be a better approach. The buttons themselves don't need separate identifiers, either as fields or in an array, because actions can be dispatched through the button as an `ActionListener`. In fact, whenever you see a structure like this: else if(clicked == but8) { calcText.append("8"); } else if(clicked == but9) { calcText.append("9"); } else if(clicked == deci) { String d = calcText.getText(); if(d.contains(".")) { } else { calcText.append("."); } } It can be replaced with structures like this: but8.addActionListener(new DigitListener("8")); but9.addActionListener(new DigitListener("9")); deci.addActionListener(new DecimalListener()); private class DigitListener extends ActionListener { private String digit; public DigitListener(String digit) { this.digit = digit; } @Override public void actionPerformed(ActionEvent ev) { calcText.append(digit); } } private class DecimalListener extends ActionListener { @Override public void actionPerformed(ActionEvent ev) { String d = calcText.getText(); if(!d.contains(".")) { calcText.append("."); } } } Or, better yet, in Java 8, using lambdas: but8.addActionListener(ev -&gt; appendDigit("8")); but9.addActionListener(ev -&gt; appendDigit("9")); deci.addActionListener(ev -&gt; appendDecimal()); private void appendDigit(String digit) { calcText.append(digit); } private void appendDecimal() { String d = calcText.getText(); if(!d.contains(".")) { calcText.append("."); } } OOP tends to favor polymorphism over switch/if statements.
I frequent https://www.hackerrank.com quite a bit. This site has a large array of problems that you can work through (on site). Another one of similar sorts, but not as broad as the first link, is https://www.talentbuddy.co
You would likely get more mileage (as far as job opportunities) out of focusing on web frameworks. Check out Spring MVC or JSF tutorials. Still plenty of opportunities to learn good Java practices there as well. 
Your action peformed method in calculator.java line 382 onwards can be drastically compressed to basically have calcText.append(clicked.getText())
Another suggestion would be to take a look at MVC paradigm for your next project. It makes code much more readable and modular
I honestly believe no matter how many books you read on design patterns, you're still going to shoot yourself in the foot with larger &amp; growing projects you work on yourself. The best practice is paying attention to your code refactors. Why you had to do them, and what you're doing to solve the particular issue.
I appreciate the advice, but sadly none of it applies to me. I'm not new at this (15 years experience), not self-taught (CS degree and good GPA from 4 year uni), and most importantly I have absolutely no interest what so ever in doing anything web related (front-end, back-end, etc). Been there, done that, and wanted to shoot myself in the face every single second of every single minute of every single hour of every single week of every single month I worked that job.
I don't want to be discouraging but I also want to make sure you are well informed. I think it is a great idea for you to explore different languages and get a feel for what you like. However, sometimes the language you like is more determined by the type of work you want to do than by the language itself. Java is a fantastic language. It can be written by beginners, yes, but is also incredibly powerful for large enterprise applications. Python is also a fantastic language. And while it is used in some enterprise applications, I don't believe it will ever reach the level of Java in this space just due to the strengths and weaknesses of the language itself. Python is great for data analysis... devops work... scripts to do things... and yes it can be used in large scale apps but a compiled static typed language will almost be better for that space. So in your experimenting, try to figure out what your end goal is and focus on those - do you want to do large scale applications? Work on front end stuff? Mostly server side? Do analysis? Once you kind of figure that out, I would suggest learning one language very well before becoming comfortable with another. I don't think its realistic to become proficient in all languages (probably just a couple) but if you learn basic design patterns and the stengths and weaknesses of different languages it does make it pretty easy to switch between them. As much as you may like a particular language, using it for something its not "meant" for can be a very brutal experience. Likewise, using a language (even if you don't like it) in a space where it excels, can be very satisfying. tl;dr - experiment with different languages, but try to figure out the "type" of programming you want to do and let that drive the language learn instead of the other way around.
thanks. its just i learn more when i code, I the type of person who learns easily by doing it than just reading about it and seeing examples
thanks for the suggestion! I will bookmark those sites. Once I finish codeabbey I will give it a go. 
We support 1.7. Where do you see that we require 1.8? We'll update the docs. 
I think deciding where I want to be is the hard part right now. I'm going to stick with Java and make sure I know it inside and out. In the mean time I at least want to expose myself to some of the other more popular languages so that the syntax isn't completely foreign to me. I have a lot of programmer friends(who encouraged me to take this path) and tell me that I am perfect for a QA environment, too. But I'm not sure if I'm informed enough right now to commit to a particular "side" of programming. What I do know, however, is that I really enjoy it. 
as long as [MCOMPILER-205](https://jira.codehaus.org/browse/MCOMPILER-205) is not fixed, I am not impressed. :-(
I wish I'd never have to clean. Now I basically always clean in case something nasty was sticking around. But a modern tool should know by itself whether it needed to clean... I mean.. SVN and GIT know what's updated..
If you're writing open-source code, comments are a necessity IMO. There's code which I literally say, "WTF does this mean". A line of comments would make it obvious.
Sure it's a useful skill. I suggest you do "time-boxing": dedicate 10% of your time to Javadoc. Try to write very short comments. The less words the better. Sooner or later, the code will be modified, and then verbose comments are a pain. BTW, it depends on your company's culture. My co-workers never read the comments, so I gave up commenting at work. Plus, you have to make sure comments are up to date. If they aren't, they are misleading - and that's worse than having no comment at all. BTW, may I invite you to write comments for my open source projects? We could use a helping hand, especially if it's fun to you! :)
Thanks! I appreciate the constructive feedback! I do understand switches and I had thought about them for this app but I ultimately chose not to because not all of them performed the calcText.append(" ") statement. A few of my buttons ended up with special conditions more related to controlling user input errors and such. After the awesome feedback I've gotten in this thread, I've already been able to remove a significant number of useless or repeated lines. For the code style, all of the resources I've used to learn Java teach the way that you described. I was realizing that I jumped into it so deep that I was having a hard time separating the blocks out and making sense of it without those extra spaces. I think once I get more comfortable I'll be able to switch back. I had actually intended to format this program in that manner prior to uploading to GIT. And thanks for the book suggestion! I'm actually very interested in a reading a couple programming books. A few have been made in this thread already and I intend to look into all of them. I think it would be valuable since I don't have a CS degree, some good old fashioned study couldn't hurt. 
I've been writing more JS lately than Java, and albeit I do agree with your first statement, I don't think jQuery is going to be *one of the main libraries* after web-components becomes adopted. jQuery really allows developers to do some pretty awful things. And to the unsuspecting, this can really make or break websites. For example, if you want to check if a DOM element is visible, a simple Google will find. https://api.jquery.com/visible-selector/ But the documentation fails to mention that this walks ancestors of the element in question looking for the `display: none` style. Do that on a list of 50 elements and you'll recursively walk the DOM 50 times. Web-components on the other hand are compartmentalized to only the sub-tree element(s) each maintains. In essence, if you break things down into smaller parts, there should be no need for advanced selection techniques, or walking the DOM. If a component get's too complicated, you can break it down into more sub-components. This is why the Shadow DOM is becoming more significant, as you can manipulate items not currently rendered by the DOM and swap in things when necessary. Browsers these days (even IE) are much more in-line with each other. Granted they all still have their own quirks, it's 10x better than what it was 5 years ago. The need for jQuery is slowly fading.
**Especially** on a team projects. Yes, thank goodness for the people like you who actually do this. You'll not believe how much time gets wasted analyzing the code to deduct what some obscure method does just because it lacks the proper (or any at all) javadoc. And if you ever go in the freelance you'll be grateful you have that skill. In freelance documenting isn't an option - it's a requirement.
As an ex-GWT developer (project was re-written), if I could turn back time, I would have just chosen JavaScript. It was pretty painful for the small amount of benefits...
In almost all instances when writing Java the developer will have access to the source code. The code itself should (I would go so far as to say *must*) be its own documentation and written in such a way that it is easily read. Java (and any high level programming language) isn't written for machines, it is written for people to explain to themselves and others what the machine is doing. Those @params and @returns and English explanations quickly start to go from a feeling of "a job done right" to "job done twice". Worse, they tend to get out of sync, making refactoring more dangerous and costly. The one thing that is **highly** valued on a team is a member that can write code that everyone else can quickly and easily understand. I would plead with you to turn your love for documentation into love for clearly written code that doesn't need any outside documentation. Another way to think about this is that the 'documentation language' shouldn't be English it should be Java (or C or Lisp or whatever language you are writing in).
I can only strongly suggest you to get a copy of Clean Code and read the chapter about code comments. It could made you see the whole topic with very different eyes http://apdevblog.com/comments-in-code/
I often find that an unit test is much more expressive and effective than a comment. A comment can be out of date. An unit test cannot. Unit tests are executable comments that cannot lie. 
That chapter is one of those things in life that actually changed my outlook 100%. I had a longstanding debate with a friend that comments were a great thing, and he (the more senior of the two of us) told me that they weren't. We read that book as part of our IT Book Club and that chapter made his point so very clear to me, and with such logical precision, that I couldn't stand by my old position any more. That entire book is worth the read for any professional developer.
Well technical writing is a job but you hardly write code documentation. That's usually up to the programmer.
That should be fixed now. Thanks for pointing that out!
I think you've confusing java's bootclasspath flag with javac's bootclasspath flag. If you're targeting an older JDK version you should [always set javac's -bootclasspath flag](https://blogs.oracle.com/darcy/entry/bootclasspath_older_source) in addition to -source and -target.
uhh node js?
I prefer they exist. Makes it easier to track then by purpose (where is this variable changed or gotten)
&gt; In short, I'm not impressed at all. This is just unusable and VERY broken. I was expecting IDEA to at least support TestNG as eclipse does, but it does not come even close. It's a pity as everything else in IDEA is so polished. Fair enough to be disappointed with that. Hopefully they fix it sooner rather than later. 
If I was in charge, yes. (But I'm not, by a long shot.) Sometimes I think some people like their stuff undocumented for job security. In all seriousness, i think yes, but your success would ride on being able to accurately assess the right level of detail your organization needs.
Lookup the Technical Writer job. Or some software engineering/architect positions. 
Check out the Takari Lifecycle which has replacements for the compiler plugin which far far better incremental support. http://takari.io/book/40-lifecycle.html
Code documentation is probably *the* most important skill you'll ever learn in terms of software development. However, there are definitely ways to do it badly. Over-documenting can be worse than under-documenting, for example. Document your APIs very clearly and thoroughly. Don't document things that are already obvious (e.g. copying and pasting shit just because you feel you should). Make the executable code itself as self-documenting as possible and minimize comments. If you want very good examples of how to document APIs, take a look at the [Java SE API Javadocs](http://docs.oracle.com/javase/8/docs/api/index.html) (especially the core stuff under `java.lang` and `java.util`). They are some of the most thorough and well-written API documents out there.
How can it not be? Even in 1 man projects, one can't remember every nuance. Commenting as you go barely takes any time. I skip obvious args and returns, but saying "this method does not check for X" "this method alters Y" can really save you from headaches later on. You can definitely overdo it though. Comments should handle non-obvious things, while descriptive methods and variables should be self explanatory. Seeing a nice descriptive tooltip pop up though, you're right it's so satisfying! Customizing the text color of Javadoc can really make a difference!
Thx. I will do. 
We do hackathons once a year, on company's birthday. Here is a text/video report from the first one: http://www.excelsior-usa.com/blog/news/hack-day-i/ IMO it is much better for creativity when everyone can code whatever they want.
&gt; I have not yet gotten any experience with JavaFX 8, so I can't judge it Scene Builder just makes a .fxml file, so no code. It can create a skeleton controller class for you to copy/paste into a java file, though it looks like it only has the components and event listener method declarations.
&gt; I know both Cisco and HP fall flat on their face at programming in Java or any web programming. You are mixing two things here. One is the *actual programming* which is done very well by both companies otherwise the programs would be full of bugs. The other is *usability* or *user friendliness* which both companies need to improve. I guess that you are talking about the *management software for switches and similar devices*. This is a special case since the software is meant to be run once, only for initial settings, and then to be (in the best case) never used again. Investing in usability on such programs would be quite a waste. Under normal circumstances I avoid using the web-based config tools and resort rather to *Telnet* or *SSH*. Lacking the graphical interface this gives me quicker access to the features I need and it also allows me to script some actions. &gt; It also doesn't help me enjoy the java experience when Oracle tries to install adware like the ask toolbar during the install. What's so difficult in clearing a few checkboxes? Also, there are alternative installers that don't install any adware. 
Really all those examples (good or bad) and no ones using javadoc tags....,,
&gt; What's so difficult in clearing a few checkboxes? Also, there are alternative installers that don't install any adware. I met some Oracle Java engineers at JavaLand 2015 and they were as irritated about the Ask.com deal as we are. Yes, alternate installers help, but the current situation is undermining the Java brand. Here's hope that our friends at Oracle will raise enough hell for upper management to reconsider this particular deal...
&gt; To me, what's more useful is a separate technical document that can be used to help bring on a new developer into the project. It's very important that this document is kept as part of the project files in the version control system, though, and not left to rot in a shared folder of forgotten Word documents somewhere on a shared disk.
Learn by doing. Create something with your understanding as it is now (always, always in source control). Then as your learning grows, update and refactor the program as you go. This will not only give you the commit logs to look over and reflect upon, but also valuable experience in refactoring and updating code, which will probably be a large chunk of your time in the real world :)
Trust me, you don't "know" even with documentation, unit tests are better for being assured something always does what you think, but even they are often far from perfect.
So true. I've never worked at a place that didn't have "the shared drive" where you put stuff never to be found again. A couple years ago I set up an internal wiki for my division, and lots of people have imported documents that were previously on the shared drive. Now they can actually find information.
You should always aim for your code to be readable and understandable without comments. Not to say never use comments but it's much more useful to have aptly named variables, a consistent style etc over needless commenting. 
+1 on the clean code, self documenting methods, classes etc. I find any form of documentation (comments, javadoc, technical) will go out of date so generally I prefer sparingly / less as possible. Some instances where its helpful for me are on something that is reused alot, say an interface people will implement to interact with your library / framework, or something that is a massive hack / really hard to understand why something was coded the way it was (legacy or dependencies you cant deal with, tight deadlines etc) 
i leaved the site as soon as it darken and i encoutered a pop up ... 
Some of that could be mitigated by changing the variable name to something like edgesVerticesAndMagnitudes. But I think the task problem is that you're using one array to signify three ideas, and in this case making a new class would be clearer.
I like this and i want to read more about how people handle (de)serialization of different versions of data.
I think the way I would do it (not sure if this is entirely in line with the article - kind of skimmed it) have a simple class class Envelope { Object payload; Long versionNumber; } Then your envelope never changes but a custom deserializer knows what kind of payload to parse out.
I'm trying this out right now with our project using Maven. I've got it basically working pretty easily and figured out simply enough how to control what checks get run and what severity levels they get flagged as. What I don't see so far is a way to instruct it to skip entire directories or groups of packages entirely. We have some JAXB and/or XMLBeans and JAX-WS generated source files that are generated during the build of some modules and it's checking those as well...and finding things it considers to be some problems. I'd rather just completely skip running the tool on such generated-source directories if possible rather than adjust the error checks with compiler args because those will apply to non-generated (developer coded) classes as well. Is there a way to do this with errorprone? Or is it more of an issue I should sort out with Maven somehow?
Also serialize and deserialize with a format like json where you won't run into issues with source code changes and can add fields and maintain backwards compatibility with versions as long as the shape doesn't change 
You can always use assembly for that ;) Some very successful HFT shops use Java and you can be sure that every microsecond counts for them. This has also been called *Java as a Syntax Language*, in other words, you use Java without the JDK libraries which were not designed to be real-time. **The wrong tool here is not Java but the JDK**.
isn't that stuff https://github.com/eugenp/tutorials/blob/master/spring-security-rest-full/src/main/java/org/baeldung/web/metric/MetricService.java not thread safe?
For those wondering about JavaFX--Scene Builder is great for *static* layouts. I used it extensively on a previous assignment (enterprise-quality CRUD app). When you get into dynamic stuff it doesn't really help as much. There are no logical tags like in JSP where you can use a for loop in tags to dynamically draw a certain number of elements--all that still has to be done in code. I still used it here and there when I needed to create little custom widgets out of existing controls and there wasn't a performance concern (I'm assuming there is a bit of a performance concern when parsing the FXML file [even if cached] and turning it into objects). I find it **much** easier to mock up something in FXML...even if I end up re-creating that same thing in code later. The JavaFX Scene Builder really isn't half bad...it's one of the better WYSIWYG tools that I've used. I know it's nowhere close to the .NET stuff, but for Java it seems decent. Give it a chance. I just hope Oracle continues to iterate and maintain it =/
It's not, no - and I am considering using an atomic numerical class there, but my thinking is - for the most lightweight version possible, it's probably better to have a slightly inexact metric but keep things as fast as possible. The deviation should be small enough not to matter - but yes, if you do need exact metrics, you can use - for instance - an AtomicInteger. Cheers, Eugen. 
Video Title: Schema migration - the missing piece in Java EE - Rikard Thulin Direct Video Link: https://vimeo.com/105880153
Hmm, I'll look into that, thanks for pointing it out. 
I too love documenting. Makes everything nice and neat and easy for other people to understand, depending on how detailed you go into it. You could use this hobby to make detailed tutorials on java; Submit simple programs with detailed remarks on explanation of code.
chrome, US. Could be being blocked by ghostery, if you're using some sort of js implementation for a/b testing your pricing. 
My experience with PDFBox was the best possible. The API is very straightforward. What is new in this release?
~~This kills the garbage collector.~~ ~~Do not attempt this without actual value type support. You will severely harm your app's performance by imposing a huge burden on the GC.~~ Edit: Sounds like I'm actually wrong about this, so never mind.
Money, if your position is stagnant, go somewhere new to regain the freshness. If you have 10y experience you should be getting weekly offers on LinkedIn. At almost 3 years experience I'm swatting off companies left and right via LinkedIn.
I found it funny, but thought you were being serious, my bad.
This looks interesting, but I'm curious to know: * Anyone on this subreddit used SWID tags? * Where does the generated SWID tag information get put into the project? Or is it up to the project to include it in the assembly?
Interesting point. Anecdotally, I've not observed microtyping cause performance problems in the systems I've seen it used, but I've never done any empirical measurements. I know value types are being proposed for Java 9, but even without these, if GC is an issue it would be possible to use pooling of instances - although that has it's own drawbacks, so some careful measurement would be required.
A problem with microtyping is that it makes integration with third-party code more cumbersome. For example, there are various Java 8 stream tools that operate, or create, strings; there are none that do that with `LastName`. Or, how do you `toUpperCase` a `LastName`? Even subtyping `String` wouldn't help you. Fortunately, Java 8 has a very interesting -- and extremely powerful -- solution that adds type safety, but doesn't hider interoperability or add any runtime overhead whatsoever: [pluggable types](https://docs.oracle.com/javase/tutorial/java/annotations/type_annotations.html). The best way to use pluggable types is with the [Checker framework](http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html). It includes pre-built types that enforce physical units, immutability, tainting and much more, as well as tools to let you author your own pluggable types. The type systems offered by Checker are powerful and contain features such as type inference. So, you could specify that `(@LastName String).toUpperCase()` returns a `@LastName String` rather than a `String`.
Yea I thought about the fact that "sets" isn't very informative, but that's what it is normally called in graph theory. Each vertex starts out as a disjoint set etc. It's a common enough term in the scope of union-find implementations that using some other name seems like a disservice to the reader. I'm not aware of all the implementations of union find, if they are more expressive or not, but I can say that the point of this implementation is that it is very fast. Most operations are in constant time, but the worst case is O(lg*N). Anyways, I don't have a point or anything. I am just sharing some of the things I think about as a computer science student and a fan of the Clean Code book.
I love the idea of this book but unfortunately it is not available yet. There are not enough books that really cover creating an entire web application from top to bottom.
Very nice work, but the [Metrics](https://dropwizard.github.io/metrics/3.1.0/) library (originally from Yammer), has already become a sort of de-facto standard for metrics-collection in Java apps (and is used in thousands of projects). It is thread safe, and makes use of powerful statistical algorithms -- like [reservoir sampling](http://en.wikipedia.org/wiki/Reservoir_sampling) -- although that choice [has come under criticism](http://www.infoq.com/presentations/latency-pitfalls) and has been [addressed](https://bitbucket.org/marshallpierce/hdrhistogram-metrics-reservoir).
that grey on grey is a little hard to read ...
Awesome.
&gt; "for every client that connected, we generated a new logger containing class name and IP address of the client." o_O Not sure that's really a memory leak, just a misuse of Log4j.
I use them all the time and honestly don't see any GC problems.
Right. But you'd have to do that for every method on every type.
Thanks pal, I thought making the word "know" into italics made it clearer, but it's like super hard to translate sarcasm to text. I was a little drunk when I wrote it otherwise I probably wouldn't have tried.
It's rather unfortunate IMO that Java lacks something like Groovy's @Delegate annotation which automatically generates that code.
Scala handles this with implicits
that depends on what you're doing. If you are creating orders of magnitude more tiny types than normal classes then yes, but if the number of normal classes is the same as tiny types it doesn't make a difference. Certainly wouldn't use this for any high perf financial stuff but at that point you are doing other gc optimization tricks too. You also have to think about where your time really sits. For me, the platform I'm building does a lot of io work, so what's a few ms here or there extra to help me model my domain properly and make sure I don't introduce hard to find bugs. if you were doing mostly in memory computation then it's different, but io is orders of magnitude slower than any gc pauses I've been leveraging this https://github.com/tguzik/valueclasses to do tiny type base types, and created some IntelliJ templates to help with the boilerplate. I look at it this way, don't optimize till you need to. If you use tiny types and the perf sucks, well, switch to primitives (and then wish you used .net which has real value types and support for implicit and explicit casting of value types) Personally I'm really happy this trend is catching on, it seems like in the last year or so I've read a lot more about this pattern than in the past. Hopefully this means people are starting to realize that primitives don't really model your domain well :)
I haven't looked too hard at what they did, but micro type libraries usually help with serilalizartion. I'm using and extending a library so that all my json/xml fields serialize and deserialize to and from primitives and not a boxed value seamlessly. 
Hi there. I'm a little sad we did not meet up, but anyway it truly was a great conference and I've already convinced my employer to fund myself going to the next one ;-). @S2kDriver: The keynote was a nice tour of the past. I wish he had been better prepared (how hard can HDMI be?) to have more time to talk about the future, because there's lots of exciting stuff going on around Java in the coming months.
I don't necessarily know that the difference you have described between intermediate and expert programmers is really all that telling in terms of skill, but rather experience--sometimes you do something new, sometimes you just find a better way and the difference usually shows up in how you have to talk about it. Over the course of a long-term project I found myself reimplementing previous written code to catch up to meet deadlines and catch up on technical debt (often caused by former deadlines), and found that more often than not I was not reinventing the wheel so much as discovering the efficient wheel that was hidden behind the round rocks that presented as a wheel. But I do agree on a major point, which is that an expert-level comments elaborate on why they chose their approach, for better or worse, and particularly when it's unorthodox. 
Yeah. This is a prime use case for diagnostic contexts (MDC/NDC). Still, it's surprising behavior. I would've expected performance issues but not a memory leak.
That is true. In your example, escape analysis was probably catching your short-lived allocations, and allocating them on the stack instead‚Äîwhich is lightning-fast and doesn't need to be touched by the GC at all. It's pretty awesome. What about objects that live for some minutes without changing, and then become unreachable after, say, an inactivity timeout of some sort?
From the other comments, it sounds like I actually *am* wrong.
Yes, but if you want to use `LastName` *as* a String (rather than allowing yourself to later change the implementation by hiding it), all you're really asking for is additional compile-time guarantees, and none of the runtime/semantic abstractions provided by Java classes. In that case, pluggable types *are the solution* (that's exactly what they've been designed for, and why they've been added in Java 8), and can be extremely sophisticated. For example look [how they support physical units](http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html#units-checker). You can have value of type `@m int` and a value of type `@s double`, and when you divide them you get a result of type `@mPERs double`. All of that without *any* runtime overhead whatsoever. As a matter of fact, they interact with other types differently from subclassing (they intersect types rather than limit them), so that you can preserve the semantics while switching the underlying implementation. So, for example, a method taking an argument of `@LastName CharSequence` would be able to receive either a `@LastName String` or a `@LastName StringBuilder` (but not a `@FirstName String` or a `String`). 
huh? log4j caches loggers. its not new. you just have to debug into the log4j source to see this behavior. 
&gt; Wish I was making this up. What if a team member argues: *this IS documenting the non obvious* *(ducks, hides under desk, God help us all)*
after all these years Java developers did not realize the unnecessity of getter/setters and how much others loathe them.
Awesome! Don't be afraid to use place holder art/assets. Just be careful in terms of how you distribute your content to co-workers etc. Also, while highly highly unlikely, you might get a take-down notice on your youtube video. I use lots of place-holder art. It helps that I can also reverse engineer game asset files.
&gt; With object type String being passed the developer instantly knows what they can and cannot do with that object, they also know what rules should be adhered to But that is just the clue of microtypes: You have control over what can be done with them! With a simple string you probably can do much more than your business rules allow. So you have to remember those rules everywhere you pass a such a type around. Have a look at a [good article](http://blog.ploeh.dk/2015/01/19/from-primitive-obsession-to-domain-modelling/) by Mark Seeman. &gt; , for instance String's immutability. That is of course a drawback what you would have to implement yourself. 
How did people do releases with Gradle before this plugin? I'm still in the Maven/Nexus world.
The examples I give are possibly simplistic - it's when you're 10 layers deep into complicated code and come across something like: String doSomething(String id, String id2, String str) that microtyping becomes valuable. The naming can seem odd at first, but in most code there are many cases of the class and variable name being the same - eg "DatabaseService databaseService".
I feel for the author: he has taken the time to write a detailed and thorough series of tutorials, but... how many articles like this do we need, really ? Gosh I can't finish this comment without sarcasm. I guess the article's good for someone who wants to go through the motions of learning how things are and were done (and manages to ignore rants about Java's past along the way), but... I don't know. I see author is some sort of CS class, and I hope this style isn't the end of all they learn.
Using pluggable types for this purpose does look promising, in particular the [Subtyping checker](http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html#subtyping-checker) in the Checker framework, but I'll have to spend some time experimenting before I have an idea how well it works in practise - are there any good examples out there?
Thanks to the geniuses that created java.lang.Object, everything can be assumed to be a String. Many libraries will call toString for you and if not it's trivial to type. Depending on your performance requirements you can lazily create the String or not for toString(). Plus any decent library doesn't take String it takes CharSequence which is an interface which we do implement.
Thanks for your feedback. I'm actually doing a bachelors in business and information technology. Always happy to get a reply from people like you (that's why I'm posting this here). Learning Java is 5% of my study, so it's not that important. I writing this kind of tutorial because it was difficult for me to see bigger picture of an application architecture in the first place. Would be nice to get more detailed reply from you, I really would like to know where I lack of experience or doing something really wrong. 
Arguably, there's a good chance those 3 args should/could be encapsulated in a single type anyway :D I have the same beef with your lastName/firstName examples -- essentially they're both "name parts", and don't always transpose well to non-western cultures. I know it's just meant as the simplest possible example, and I _don't_ have a better one on the top of my head, but I get the feeling it kinda dilutes your argument. To an extent, a bounded int (eg 0-4) wrapped in a FingerIndex might work better ? Meh.
&gt; We just have an extendable String class (that has way better performance than java.lang.String because it doesn't use Unicode) in our code base. woah. Dat claim. (so a wrapped char[] that you can't concat because that'd delegate to toString which would sorta defeat the purpose ? But is a CharSequence anyway ? What are you working on if I may ask ? ) 
http://www.javacodegeeks.com http://www.jaxenter.com
Wow that was fast, thank you very much. I see your point now. Of course a good coding style and a neat and efficient workflow comes with experience, but I see now where this is going. Have nice day and thank you for this reply.
String's immutability is not a drawback. Within the local context of a single method, a MUTABLE string would make sense in order to construct and return an immutable string. That is what StringBuilder is for. It is your perfect mutable string. The problem is, if you pass a StringBuilder to someone else, you can't be sure they didn't modify it. That's what makes immutable values good. if I pass 4 as a parameter to somebody, they can't change the value of 4.
That is a good article - but if you start using specific types instead of String, you will soon run into the problems I mention in mine, ie boilerplate code bloat and library integration problems. The question is how best to avoid those?
The 'maven-publish' plugin for gradle coupled with some groovy code for tagging/bumping versions.
Is he shooting poo?
What do you mean mirror each other? And can you format your code properly? It's a bit painful to read.
Wow, what a small spec! Seems pretty to the point, it's nice to see them leverage as much existing spec out of JAX-RS as they can.
* No need for an all-caps title * How did you miss the big fat warning when posting? From the sidebar: &gt; Please seek help with Java programming in /r/Javahelp! *Be sure to read the rules/posting guidelines over there!* Because your submission here doesn't describe the problem that you are facing with, at all. 
yeah. those sites are right out of the 90s.
Sorry, but you are posting in the wrong subreddit. /r/Java is for: **News, Technical discussions, research papers and assorted things of interest related to the Java programming language** **Not for help with programming**. There are many different hints on the site that should have informed you and that you apparently have conveniently ignored: + the **big red button** saying **"Seek Programming Help"** + the **big red banner** when **hovering** over the **"Submit Text"** Button, saying **"Please seek help with programming in /r/Javahelp"** + the **big red box** in the **sidebar** saying **"Please seek help with programming in /r/Javahelp"** + the **"?"** icon in the **blue "Related Sub-Reddits"** box in the **sidebar** with the text **"Java Help ‚Üê Seek help here"** **Post removed:** Wrong subreddit.
I did not claim this! But the **loose** of immutability might be a drawback ;-) 
Don't get me wrong, but isn't there always a border you have to cross, if you pass objects to 3rd party stuff or get objects back? You would have to call a getter or pass a field anyway, as the target would normally not be aware of your own domain models... so with microtypes it is at most "just" one more call...
Yeah, I can confirm it was fun and engaging. I've already convinced my employer to finance the trip to JavaLand 2016 ;-)
Lots of auto-generated black magic under the hood, which may make it difficult to track down performance issues.
I meant template in the most generic sense of the word, so that could be an IntelliJ live template for example. Or, different approach entirely, an annotation processor that generates the bits of boilercode ? Something like Lombok ?
Due to awesome feedback from you guys, I have update the last two parts: Part 1: https://janikvonrotz.ch/2015/03/15/build-a-java-3-tier-application-from-scratch-part-1-introduction-and-project-setup/ Part 2: https://janikvonrotz.ch/2015/03/28/build-a-java-3-tier-application-from-scratch-part-2-model-setup/
Nice april foolery.
Sorry for the delay in responding. This is 1.6 I'm using but in IntelliJ when I set the Java Compiler to javac with error-prone and attempt to run a previously working JUnit class I get the following error message: Error:java: Error-prone compiler requires JDK 1.8 to run
It's quite different technologies. Using JdbcTemplate you have to create your database on your own. Using Spring Data (JPA) you need create special Java Classes called Enitities which will map the Java Classes to database tables. If you except you database to contain a dozen tables than you can cope it with JdbcTemaplate. If your database design is going to be more complicated i would use JPA - Spring Data.
This works well with Spring, but not with plain EclipseLink. However thanks for your feedback.
For me the first paragraph about eclipse optimizer, is the best part. A Netbeans removal tool is really something.
`@Transactional` is actually Java EE ;) It's a property of JTA, and builds on (CDI) interceptors. I would not advice anyone really to build on plain EclipseLink, but maybe it's just me. 
Heh, the maven one is good
:( They were supposed to be arrows. I know my sprites are not that good.
&gt;I can haz teh internetz? &gt;If that‚Äôs what you want, yes you absolutely can download the internet! We‚Äôre not the first tool to attempt this of course. The Maven build tool attempts this on a regular basis :V
I have been seriously considering the actor pattern for my current project (LOTS of concurrency). Seeing this kind of support (real use I can show to managers) for it is very encouraging.
No link to r/java !
I mean the Actor pattern in general, not so much interest in this framework more than its proof that actor works well at large scale. I know this myself, having examples to show managers that the pattern is sound is critical. These days at least from what I have dealt with is that everyone fancies themselves an architect and demands every decision to be by committee. 
That's actually a good thing.
&gt; The framework should also provide means to create a site-wide layout without repeating code on sub-pages. This was in Rails 1.0, but most Java frameworks seem unable to comprehend the idea still. Do you mean like includes in JSP?
I've heard good things about this book https://pragprog.com/book/vsjava8/functional-programming-in-java
Spark is great, I love using it. However, I question why an article written in 2015 and a project that is using java 8 is not using the java 8 features of spark. Spark 2+ is specifically made for java 8, yet this article uses none of the features making it way more complicated. For example, the articale uses the following code get("/posts", new Route(){ @Override public Object handle(Request request, Response response) throws Exception { return "Hello Sparkingly World!"; } }); This can simply be get("/posts", (req, res) -&gt; { return "Hello Sparkingly World!"; }); 
Funny to see that the test coverage seems awesomely low. (Didn't looked through all source dirs)
Rather than a "Functional Java" book, I would look for a more generic book that covers functional programming techniques in general and then just apply those techniques in Java. As a functional programming language, Java is rather weak, but the ideas will definitely help your overall development skills. 
read the release notes?
Yeah OK way better is maybe a bit hyperbolic. It's basically the same for most things and better in a few cases. There are some tricks for interning strings that we know are going to be used a lot. I work in high frequency trading.
I don't think so... 
Looks good! Thanks for the suggestion
Official tutorials at oracle. Should give you an overview of the entire language
Yeah, to be honest I just made that one up. Slapping "everyone knows" on it just made it a bold lie. ;-)
You said: &gt; In particular, if the construction of the object is relatively expensive, **pooling can help**. Then you said: &gt; In Netty's case, they have direct memory buffers underneath (to avoid one memory copy), which are expensive to allocate, and which in Netty's case are used very frequently. So you pretty much concluded that Netty should be using pooling and not reference counting. 
I think JavaCodeGeeks still gives that book for free for subscribing to their site.
I'm enjoying the OReily Java 8 Lambdas book - http://shop.oreilly.com/product/0636920030713.do - as someone with a history with functional languages it's not overly revolutionary but it does cover the new APIs quite well. There was one example which appears wrong ( which may have been based on right under early builds ) but on the whole the book seems good.
[Quasar](https://github.com/puniverse/quasar) (of which I'm the main author) works in a way similar to Kilim (i.e. it provides true lightweight threads, aka fibers), but is more general, more actively developed, better supported and much more popular. In addition to fibers, it provides channels just like in Go (i.e. selectable, too), and actors that work just like Erlang's (including selective receive, hot code swapping, behaviors and more). We have Java, Kotlin and Clojure APIs, as well as many integration modules with various IO standards and libraries that let you use the same familiar blocking IO APIs on fibers, to get the same performance as asynchronous code, without the code complexity and changing your programming model (i.e. you can use Apache HTTP client in fibers/actors, configure Tomcat/Jetty/Jersey/Dropwizard/Spring to run each incoming request on a fiber instead of a thread etc.) We are also working with Oracle to make using fibers on the JVM easier still.
&gt;Mostly you want to avoid object pooling in Java (**which is the reason they do reference counting in Netty**). You need a way to figure out when an object is no longer used and can be returned to the pool. That is accomplished with the reference counting. Usually that task falls to the GC, but here they have to do it themselves. I.e.: They use pooling and therefore need reference counting.
Great work! We actually wanted to make a Spark/Lombok tutorial ourselves, but never got around to it. We'll share yours in stead :)
Am I the only one who hates HTTP for the fact that it has been abused over the last 20 years? HTTP2 is not even an "hypertext protocol" anymore. Why not come up with some entirely new protocol instead of patching a misused protocol over and over? And before someone says anything, fuck backward compatibility.
Pearson has successmaker which uses Java, but I don't know if you can access it for free. You could perhaps chat with them and see what they might be able to give you for free. http://en.wikipedia.org/wiki/Pearson_Education
Thank you, I would love that :D Let me know if I can help or improve it in anyway. I would be more than happy to help spreading the world about your wonderful product.
Look no further: http://www.reddit.com/r/javahelp/wiki/tutorial_list Especially the *University of Helsinki MOOC*, *Java for Complete Beginners*, and *Derek Banas' Videos* are highly recommended. All the above are free!
I think the best approach is for the web site to make sure its Java content is using a valid certificate which is signed by a trusted authority. You only need to explicitly trust Java applications which don't have a valid (trusted all the way up to root) certificate. EDIT: See https://www.java.com/en/download/help/jcp_security.xml
Thanks mate, this will help tons!
Can't really testify about Lynda.com because I haven't used it. I know the resources that I've listed and all three that I recommended are free and very good.
I would like to see a test how many concurrent connections could a server handle using HTTP/2 vs HTTP/1.1 - because of multiplexing.
Hi! I'm Artur Ventura from the FenixEdu team. We are a team of developers that creates open-source software for schools. Our platform has a Learning Management System, a Student Information System among others. Our entire stack is written in Java. We work inside a university called T√©cnico Lisboa. The software we produce and students use on their day to day is also used in courses a teaching tool. Students in programming courses have projects that use our software and have to implement new simple features. This keeps students motivated because is a piece of software they use on their day to day, while also giving them a realistic piece of software. Because we provide scholarships to students to come work with us, this also works as way to find great talent. To learn more go to http://fenixedu.org/. If you want to know more, send us an email at hello@fenixedu.org. 
Thanks, that was very informative. I'm also very impressed that you managed to fit time-travel *and* an oxymoron into the URL!
Can you explain the entry cost you experienced?
You could set up a special computer (or special VM) which will only ever be used for connecting to your equipment and not used for anything else. You could install an old and unsafe version of Java on that special computer. Be sure never to update the old and unsafe Java, and use the old and unsafe Java to visit your 500 pieces of equipment. MAKE SURE YOU NEVER USE THE COMPUTER FOR ANYTHING ELSE. The old and unsafe Java really is old and unsafe, and your computer could be taken over by attackers if someone tricks you into going to a website that attacks old Java plugins.
Came here to recommend the same book. This book does a really nice job of how Java 8 Lambdas fit in naturally into the existing ecosystem. 
Ya I would still use Xmx and Xms... These settings are pretty good for 90% of the world... Pretty good advice.
And '-server' is useless. It is default on *nix anyway. Edit: All of those are only useful if you have a problem to investigate. I do not see why they should be always enabled: -XX:+PrintGCDateStamps -verbose:gc -XX:+PrintGCDetails -Xloggc:"&lt;path to log&gt;" -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=&lt;path to dump&gt;`date`.hprof -Djava.rmi.server.hostname=&lt;external IP&gt; -Dcom.sun.management.jmxremote.port=&lt;port&gt; -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false Another edit: it is also bad to have java.rmi.server.hostname set to external IP. I always do localhost there. If a person can not get an SSH tunnel to the host, she should be connecting to a JVM running there.
Riiight. Sorry.
whether woven code is infected by the weaver copyright depends on how it's actually implemented. and that's hard for a potential user to evaluate and could change with any new version. i've only looked at your weaver briefly - my best guess is that it's not an issue. however, it's still a risk and a gamble that i'm not willing to take if you end up adding this clarification, let me know and i'll try quasar out 
I can tell you right now that we inject sparse bytecode instructions that are a function of your code and and are neither fixated (they are not spelled out in our code, and there can be no tangible copies of them because they are an algorithmic transformation of your code) nor original (again, transformation, plus they form a sequence that's waaay too short) and therefore not eligible for any sort of copyright. It is no different from a copyrighted audio filter transforming your audio file (only not as intrusive). Nevertheless, I will consult to see if such a clarification is necessary at all (I'm pretty sure it isn't), and if so we'll add it. In any event, if you choose to use Quasar now or at any time in the future, we'd love to hear what you think.
In Soviet Russia, infinitives split you!
Indeed, and many are counterproductive. The only JVM option that has made a difference on my realtime middleware servers is `-XX:+UseGetTimeOfDay`, due to a time skewing problem on HP-UX's JVM. I've never understood the fixation with obsessively tweaking and monitoring the GC. 
how come you think that? it clearly has some shortcomings (especially part 2 of the course) but I thought it covered the basics pretty well and made it easy to learn by doing with the numerous programming tasks provided. plus the tool that checks your code I found to be pretty helpful, if annoying at times. edit: looking at my original post "major oversight" is surely too strong. instead, I'd say, it is another good resource for someone wanting to learn Java. I am not familiar enough with all of the 20 sites you listed so I realized am not in a position to say whether it is an oversight or not!
...what?
My point is that if he's having trouble with data in arrays, his problem is likely conceptual, rather than some syntactical stumbling block. My advice is that he try to break the concept of an array down to its most concrete manifestation. I recommend he take one row of an egg carton (or ice tray) and some tokens to place in the various "indexes," and very carefully move the tokens around, paying attention to each step, as if he were trying to program it. Programming is about breaking things down into steps and realizing that the computer does exactly what you tell it to do, and generally needs you to tell it every single little thing. That's why, if you're trying to introduce children to the idea of computer programming, the first thing you should do is to take out a loaf of sliced bread, along with a plate, a knife, and a jar of peanut butter and another of jelly, and ask them to *instruct* you to make them a sandwich. You then do *exactly what they instruct you to do,* as absurd as the results may be. It's the most illustrative way to get the point across to them that this is what *programming* really is. If someone is having trouble with the basics, sometimes the best thing to do is to walk away from the computer. Computers are *abstract.* It's often helpful to make things more concrete.
&gt;And '-server' is useless. It is default on *nix anyway. Would it not slightly future-proof your application to use it explicitly? What if that option becomes non-default in some future JRE version?
The page has much bigger grammatical problems than that‚Ä¶
Something I'd been struggling with today, so I wrote a blog post about it. Hope it will help someone! As someone who's had a hard time understanding Spring, trying to understand the magic that happens using Spring Boots autoconfiguration overwhelms me sometimes, and most documentation is geared towards traditional XML configuration.
What ever your asking for help with, your post is vague enough with so few details as it could be about almost anything, but the Java programming language.
It's usually a bigger performance return to optimize code instead of the VM. Two flags I might add to the list for general servers though... `-XX:+UseNUMA` and ` -XX:+UseLargePages`. As far as I know, they aren't enabled by default. Most Intel and AMD servers are NUMA though, and if the allocator is oblivious, accessing memory on non-local nodes is more expensive than on local nodes. Also, schedulers generally can't optimize locality. With large pages, most operating systems support them now, so if the application uses large contiguous chunks of memory, using fewer pages will generally improve memory performance. Obviously, measure before you deploy though.
Not 6. Possibly a later VM though.
I prefer developing on the default settings, at least applications I know many people will use. Why? Because this makes me optimize my code more rather than tweaking just the JVM launch parameters. Also, I will never know if people who run my program will use my recommended JVM parameters in the first place.
We're actually looking for a volunteer to maintain an official Spark tutorial blog. It would mostly entail contacting other people and reposting their tutorials, but also writing your own (if you want to and have the time). Would you be interested in this? If not, is it okay if we repost your tutorial in the future when we have this blog up and running?
Some people like to ignore the spellchecker.
Turning off SSL for JMX on prod sounds pretty insane to me. 
The licence is already MIT-style (edit: it is actually BSD 3-Clause, with Google as the owner). You can put your name on it (as the author of the changes), but you cannot remove Google (as the author of the original ideas, architecture and code).
I'd like to know the arguments of why they are far from helpful. The author explains for each option the benefits. For the shake of the thread it would be nice to know which negative effects in your opinion have they.
Currently I do not have the time to manage another blog alone but I would be more than happy of helping by writing a few other posts. Maybe I can help you getting started by writing another couple of tutorials over the next few weeks. Would it work for you? If so drop me an e-mail at f [DOT] tomassetti [AT] GMail. Of course it would be great if you republish my post (hopefully with a link to my blog :D). BTW this post should appear also on DZone next week.
I don't know what actor library you're using, but you can receive messages in Akka as a base type and not know the implementation at runtime, just like the "decoupled" scenario you describe here. This, for example, works perfectly fine (sorry for the Scala, it would be very similar in Java, but thats what i had open in my IDE): sealed trait Stuff { def sayhi } case object One extends Stuff { override def sayhi = println("Hi from one") } case object Two extends Stuff { override def sayhi = println("Hi from two") } class Actor1 extends Actor { def receive = { case s: Stuff =&gt; s.sayhi case unknown =&gt; println(s"I could be anything - $unknown.") } } The receiver has no knowledge of the implementation here either. The actor loop receives an "Any", so I can actually handle objects with this actor that didn't exist when I wrote him. Not only that, but I can send a PartialFunction to my actor via a message and actually add behavior to the actor at runtime (via ActorContext.become). It doesn't "feel like" you've actually used any full-fledged actor framework. 
cant you just take inspiration from it and design it from bottom-up and put your name on it?
The same question: "whether I do change 80% of it or don't - who can distinguish the rewritten code from the original one? In other words, how can one say for sure whether it's still the 20% of Google's code and 80% mine or 100% mine but it happens to look similar to google's one? After one, the task is the same and thus the result code might look similarly."
It sounds like you are thinking of actors too much like objects and sending the wrong types of messages. If your sender and receiver are coupled, that is a design problem...
That's an extremely difficult question, and certainly not for any of us to decide. The lawsuit between Oracle and Google was exactly about that (Oracle claimed that by copying a few lines of API Google had violated their copyright, Google claimed the lines were obvious and from a public API). Of course, the lawsuit had a much greater stake (Android money). Even beyond the question of copyright (which is only about authoring lines of codes and comments, not about algorithms and ideas), in some countries (including the USA), there is the question of patents (covering algorithms and ideas).
The type issue is certainly a valid complaint. It's actually the only strength his solution has over actors imo.
My point is not that the actor code is coupled, but that there are multiple protocols in play which change over the lifetime of the project. And when a protocol changes, a participating actor's interaction with that protocol can all to easily impact its participation with other protocols. Whereas with 2-way messages, the requirement of the receiver of a request is mostly that it respond within a reasonable time. And a great deal of attention can then be given to more complex interactions to ensure the requirements of those protocols are not broken as the project ages.
What's your major objection to reproducing that copyright notice as a part of your license? Clearly you've been the beneficiary of Google's free and loose license, why not allow others to be the beneficiary of your code as well if your code is repurposed by another company? 
&gt; How much of the source project should I change so it can be considered a totally new, mine project? The only way for this to be a "totally yours" project is to not use any of Google's code at all. This includes rewriting Google's code. You can take inspiration from it, but this does not mean ripping lines from Google's code and using them in your project.
Because then I'll have to follow the rules of MIT.
Then don't use Google's code. It's that simple
MIT basically has no rules beyond attribution
Can I sell the app under MIT?
It looks pretty nice, but I don't know if I could ever justify those license costs. I would rather use Bootstrap or Foundation. From what I can tell there is only one theme too. I would rather just tweak the SASS myself and have a unique site. I am also curious how they are able to sell a product with Font Awesome. I would have thought that was against the license terms. I hope it works out for them though. I like primefaces, so I have no complaints with them making a buck.
You haven't actually bothered to Google and read the license you're worried about?
I suggest you read your OP to see what you need to do to reuse and distribute googles source code.
Thanks - that's an option I suppose. 
Yes of course. Is there anything in this license that says you can't?
I'm referring to the original license Google used, which requires reproducing the same copyright terms, which is by definition viral. Share-alike terms are viral. By definition, "Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer," the license requires derivative works to be licensed under the same terms.
Yes. But you can also sell the app under the original license as well; you'll just be required to redistribute the source code under those terms. So you'd better find some way to make the app's function add value beyond the source code itself so it's worth buying. You could even sell apps that have GPL code in them; but again in doing so you need to find a way to add value so it's worthwhile to people to pay for the app. 
Yes, it'll kill me.
Contrary to the GPL, the license does not require that the source code be redistributed. In particular, you can keep it all closed, and license the resulting binary however you want. In particular, you can do whatever you want to files you add to the project, the license of the initial source code does not talk about other source code. Have a look at this discussion for a bit more details: http://programmers.stackexchange.com/questions/196789/mit-license-why-isnt-it-considered-viral
G1's small frequent stop the world pauses do add up though. Cms is usually faster when measuring throughput of the application. For some applications it makes a big difference. Cms's drawbacks aren't an issue for most interactive applications using smaller heaps and it has less of an effect on the throughput of the application so it's generally a better choice in that situation. 
1. I'm still not talking about the MIT license. I don't know why you keep talking about it, but I'm not. I told you I'm not in my last comment. I'm just not talking about, I'm talking about the license above. 2. OP wants to know whether he will be required to use the same license if he wants to release the source code of a derivative work; there is a clause in the Google license shown above that requires that it be released with certain licensing clauses intact, including Google's original authorship. I think that clause obviates that answer. This discussion is kind of pointless in that regard. 
This is looks really great. I believe our organization will be purchasing this theme really soon. 
Font Awesome has a very friendly license http://fortawesome.github.io/Font-Awesome/license/ And it's only one theme because Primefaces comes with a lot of themes built in, some of them quite good looking.
Hi fellow Java enthusiasts! Wanna help out new Java programmers and practice on your open source skills? [Exercism.io](http://exercism.io/) is looking for people to help port their exercises to Java. Here's a helpful list: * The Java track repository: https://github.com/exercism/xjava * The contribution guide: https://github.com/exercism/x-api/blob/master/CONTRIBUTING.md#the-exercise-data * The list of exercises that need to be ported: https://github.com/exercism/xjava/issues/3 Thanks! *Edit:* [Seems like it's working](https://github.com/exercism/xjava/commit/6d9eb3ff3817683d4ebd2ddcc48a9672456bf5b6), thanks a lot!
Yes, that is the kind of thing called an _event mediator_ in http://radar.oreilly.com/2015/02/variations-in-event-driven-architecture.html#more-74139. Without something like that, a naive event-driven architecture is either going to have to completely ignore performance concerns (who cares if we do everything a few orders of magnitude more than we need to?) or be just a distributed asynchronous monolith (nothing can change without retesting everything all at once).
It doesn't look like you can set the policy to not care. According to the documentation https://docs.oracle.com/javase/8/docs/technotes/guides/deploy/properties.html#A1152834, it is not possible to set deployment.security.level to anything other than HIGH and VERY HIGH. Importing the certificate would only work if the devices have signed applets, which may not be the case
Well, technically, /u/swingking8 found it. And then I found his post. So, it's still technically true.
If it were me I'd start by pulling the source for the jaxb plugin and figuring out how that works
This is also already documented on the java.com site: https://www.java.com/en/download/faq/disable_offers.xml What the heck, I'll post it too.
&gt;I thought all of us knew about this? Well I thought everyone knew that attempting to assume something about every single person was really really really poor reasoning. Guess we were both wrong.
http://www.reddit.com/r/java/comments/31d6r4/guys_i_found_it/
So any idea why I don't seem to have this setting? http://imgur.com/eeCP5Zh
It's /u/swingking8, btw. /r refers to subreddits.
Are you using the JRE or the JDK?
Yeah... my bad. Fixed
Has anyone found the option to disable the incessant update alerts yet?
If you had looked at the implementations you'd see why you are wrong. All the required casts show that Monad.java is not a valid representation of a Monad. The casts wouldn't be necessary if a Monad could be expressed within Java's typesystem.
Here are the relevant Registry keys for those that don't have the option: http://superuser.com/a/562869/119455 
Check http://superuser.com/a/562869/119455
Ahh cool. Just just be an issue with my phone browser or something. Thanks for confirming mate. 
.... and install everything else for that matter. Also good for family and friends who are less computer savvy. 
This should be the default, stock JRE settings. I don't think I've even opened the control panel since Windows/JRE was installed a few months ago. I'm not overly familiar with SSL/TLS versions, although now that you've mentioned it, its interesting TLS 1.0 is checked but not 1.1 or 1.2... 
Not this page https://www.java.com/en/download/help/
I don't use OpenJDK because I want a distro-independent Java. I have Oracle 'Java SE and NetBeans Cobundle' installed in '/usr/local'.
&gt;I am using Oracle Java Oops.
Or any other package manager
Damn, when I was interning I spent a good half of every paycheck on books. If someone asked me to write a Jenkins script I'd turn around and read Jez Humble's Continuous Integration, I didn't fuck around. Turn your office into the dev equivalent of a kindergarten classroom if you want. If they don't want to learn, improve, or take their internship seriously then they won't. Make them write tests if they insist on bringing their weak-ass college classroom game to the office, that's what my internship did with interns who weren't willing to step it up. How long do your internships last? 6 months is minimum in my opinion, average intern doesn't even know what the fuck they're doing until at least 3 months in. Here, I'll hook you up with a few for free: http://i.imgur.com/23WncR8.png http://i.imgur.com/eJylqku.png http://i.imgur.com/fLlll9T.png http://i.imgur.com/JjlJp6i.png
I'm started solving them. Keep up the good work.
Cool, thanks. ‚òë Done! 
No, it isn't, as you can clearly see when you remove the casts from the implementations. &gt; But the real point is: who gives a shit? Those who claim that you can do FP in Java/Kotlin. Sure, if FP == "programming with functions" then go ahead, but that's not what people think when they talk about FP.
Thanks, I appreciate your contributions, especially the owl. That one will definitely end up on my wall. I was looking for something more "informative", though. Something like this [bad science poster](http://4.bp.blogspot.com/-pPYug7Kiz80/VReQqlMg3qI/AAAAAAAAtfk/wPWYMdJNRM0/s1600/1.png), but related to Java or programming in general.
This is quite normal. It is known as a cleanroom implementation. This has happened time an time again in software engineering. For example with the original IBM PC the clones originally just copied the BIOS (lawsuits ahoy!) and had to go through the process of rewriting a BIOS with only the API as reference. Reactos had to go through a [massive rewrite](http://www.reactos.org/forum/viewtopic.php?f=2&amp;t=1606) because some people wrote a bunch of code that relied on reverse engineered Windows code. Where reverse engineering is unavoidable it is common to have two teams: one to reverse engineer the API and one to write the code.
Is it any good? 
78% fresh on rotten tomatoes. I'd say that's a fair rating. It's fun, but I'm not on the edge of my seat watching it.
Are you a programming teacher in HS or middle school?
Haven't most Java programmers looked at the Oracle/OpenJDK source code at some point? That requirement sounds severely limiting‚Ä¶
Scumbag GPL: "Here's a bit of software which I'll call 'Free' but has a huge number of strings attached. Just to confuse you some more, I'll make a big fuss about Free Software and pretend to be part of it, while turning myself into a viral license you can't escape from." Good guy BSD License: "Take it. Do whatever the hell you want with it. Just don't bug me if it breaks."
If you like [these gifs](http://imgur.com/S0arfdf,Ib1wbE3), you will like the show.
Better post this question in /r/Javahelp as this is a programming related topic and not about the Programming Language and Ecosystem as such.
I have to admit, I don't think free-as-in-freedom software is as necessary as its proponents make it out to be. Making high-quality software is *hard*, so I think it's perfectly reasonable for developers and companies to want to make money and protect their IP interests if they so desire. I will grant that the Linux stack is incredibly important because it is open. But the Windows and OSX stacks are also important, even though they're closed.
When I was supposed to do some Microsoft source code work (but I didn't work for Microsoft) I had to sign an agreement that said I wouldn't contribute to any open-source projects for at least a year. This is completely normal because they don't want their source code contaminated or even the hint that it is contaminated. I think I also had to agree that I hadn't contributed to any open-source projects for a period of time prior to that so that open-source code wouldn't be inserted in to their code either intentionally or unintentionally.
&gt; Those who claim that you can do FP in Java/Kotlin. Sure, if FP == "programming with functions" then go ahead, but that's not what people think when they talk about FP. I think there is a big difference between what **you** think about when you talk about FP, and what most people think. FP isn't some well-defined thing, rather it's a bundle of ideas, which includes programming with higher-order functions, avoiding statefulness if possible, encouraging use of immutability, etc. Haskell is an extreme version of this that mandates statelessness and immutability (causing various problems in the process). It is ridiculous to suggest that a programming language isn't capable of FP just because its type system might not have all of the capabilities of Haskell's type system. But when I ask "who gives a shit?", my point is: who cares whether something is or isn't FP? That's just a buzzword. What matters is whether it helps you to get stuff done. It's easier to get stuff done in Java and related languages than it is in Haskell, irrespective of how philosophically satisfying Haskell might be.
I've never used it but I believe [Antlr](http://www.antlr.org/) would be the Java equivalent.
He was looking for homework help, not a real-world tool
It enforces the philosophy by going against the philosophy. Forcing your idea of freedom on people isn't freedom in my book. The LGPL is a little better. But GPL(v3) and AGPL are especially toxic imo.
And an occasionally intellectually intimidating one, if you accidentally pick a class which has been heavily optimized to get every last bit of performance...
Probably not quite what you meant, but like how swing iterates backwards over listeners because it's faster.
Or the new Stream stuff in Java 8. My god...
Some 3rd party stuff in JavaFX is licensed under [beer-ware license](http://www.oracle.com/technetwork/java/javafx/downloads/javafx-thirdpartyreadicence-1400334.html)
I always hate GPL for this shit. GPL taint in code bases is absurd
Better: https://chocolatey.org/packages/javaruntime
I am just trying to understand a few forgotten things better. I just began revising my old data structure concepts and first thing `Stack` led me to parsing methods! 
But code has to exist before it can be bug fixed. 
Yo, yo, yo! Public static void main string brackets args!
What type of data?
Thanks. I was able to find it in c:\users\ &lt;user&gt;\appdata\locallow\sun\java\deployment\security\exception.sites
Thank you for the feedback, there are many themes like Sentinel, Spark and more will follow. Bootstrap, themeforest, wrapbootstrap or similar do provide layouts but they do not integrate out of the box with the design of PrimeFaces. We offer well tested Layout+Theme together for a unified look so that PrimeFaces components play well and look nice inside the layout. Most of our time goes in creating the theme instead of layout actually, it takes 4 weeks from creating the design on paper to the release. Also sure you can customize bootstrap but note that our themes-layouts are created by professional designers. Working with a professional design agency nowadays is very expensive compared to our fees, in addition the fees on themeforest-wrapbootstrap are also higher then PF fees. Still, if you are comfortable with design and css, sure you might prefer going that road or prefer something ready, professional and slick that is created for PrimeFaces in mind, then you may consider our work.
nah, basically I just started crawling important websites with content built by people first (read 4chan, reddit, etc.) and the newspapers'. I have over a terabyte. I was just wondering what to do with it. My first goal was to implement a fast search algorithm (along with the stack I'm using) to see how quickly I could bring the results back to the user. (it's pretty fast :)) ). But I want to do something cool as well... just don't know what yet.
&gt; Nope, and 4 isn‚Äôt the right answer either. The HotSpot JVM has a total of 4 garbage collectors: Serial, Parallel / Throughput. CMS, and the new kid on the block G1. Uhm... I think 4 is the right answer...
did you miss the next sentence? &gt; But wait there‚Äôs more, there are also non-standard garbage collectors and more adventurous implementations like Shenandoah or collectors other JVMs use (like C4, the pauseless collector by Azul).
FWIW, the Guava team is thinking largely in terms of tools that don't just warn you about using older libraries, but that actually rewrite your code to do the upgrade.
Ya
&gt;We have some highly powerful refactoring tools in the open-source pipeline Refaster looks pretty awesome. Looking forward to hearing more about that.
I'm not sure I completely see the benefit of this blogpost? You've basically said "Start using Java8." How is this any different from upgrading to and using the features supplied? And how is doing this at any kind of scale?
Thats is an excellent way of putting virtuals proceduree into the real world
It may required lot of investigation to do such a detailed top five. But I would recommend Play!, Spring, GWT and something like AngularJS, which seems quite as contemporary as some other choices.
It looks like the default Darcula colors in IntelliJ but with static methods highlighted as purple too, in case you want it for yourself.
An Intellij IDEA Plugin would be awesome to automatically convert Guava Optionals to Java 8 Optionals. IDEA already got some really nice Intentions for Java 8 stuff like transforming arbitrary collection operations into Java 8 stream operations.
Thank you, i'll check it out, but [spoiler]i use eclipse[/spoiler].
I wonder if it handles java8 Optionals correctly. It looks pretty interesting though. Reminds me a bit of the google AutoValue stuff (https://github.com/google/auto/tree/master/value)
The purpose of the blog post is to describe how a large team can convert a large number of projects from Java 7 to Java 8 - it's not a trivial switch, especially if you're talking about running large operational systems that thousands of customers depend on. The point was not to extol the benefits of Java 8.
I'll try to give a few examples off the top of my head: Most libraries that support some form of AOP use it to generate runtime proxies (Guice and Spring both support method interception for example and use ASM (or CGLIB more specifically) to generate the runtime proxies needed for this) jDBI's [SQL Object API](http://jdbi.org/#sql_object_api) lets you define your database queries as an interface and then generates a class at runtime implementing the interface that makes calls to the DB when the methods are invoked. reflectasm uses ASM to generate bytecode for getter, setter, and constructor invocation since it is faster than reflection. This is used by kryo to make serialization/deserialization super fast, and is also supported by Jackson via the afterburner extension. Mockito uses ASM to generate runtime proxies (which is how their mocks are implemented)
On the other hand, we had to build and run our own fork of many libraries to get our stack to be Java 8 compatible, so it seems like Oracle is jumping the gun with sunsetting Java 7 so soon
I'm trying to get more familiar with java concurrency. So what would you suggest for handling this exception and why? And do you mind sharing some more gotchas or tips? 
Hmmm, I can see your comment, but this reddit bans almost everything from generic domains (blogspot, wordpress, even twitter I think). So often if you post the direct link it will simply disappear.
It's really weird, a few of the top Java bloggers are on those domains and we're all missing out on them here :X
No gradle plugin, although the Maven Mojo logic is pretty simple if you want to submit a pull request to Modernizer.
Yes its home and it doesn't feel like work
My preferred method of compilation in sublime text is using SublimeREPL. Install SublimeREPL using PackageControl, then run SublimeREPL on "Shell" and be happy.
Very, very nice indeed. The only thing that made me wonder after a quick read-through via the docs is: Is it possible to have Guava's `ImmutableMap` as a return type? From what I read, it's always the backing type, but I can't see it in the list of supported types which is ... unintuitive, at least. Yes, I know I could try it myself. And yes, I will do so now. Thanks for a nice project!
It's like having a plugin which reads the error, searches for it in stack overflow, and prints the first answer in the console.
This is a good introduction to the executor API. I have the book: Java Concurrency in Practice but not trivial to parse and internalize it's contents. A lightweight introduction is worthwhile in my opinion. I look forward to any future tutorials. Communication between threads is where things get hairy, IMHO. It's easy to just synchronize state, but Wait/Notify, CountDownLatch, CyclicBarrier, and other parts of the API I'm still a bit fuzzy on when where to use them. 
Can't decide if that's genius or insanity...
Yes, indeed. What a library.
Can someone explain what is going on to me here? 
Update that "ancient" 7u65 JDK! 
We do automated code review comments powered by Refaster, too. http://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/43322.pdf
CTRL/CMD + SHIFT + P type "Install Package" type "repl" locate "SublimeREPL" Click/hit enter wait for it to install restart ST CTRL+SHIFT+P type "shell" locate "SublimeRepl: Shell" Click it A tab opens with an instance of shell open, so you can cd, ls, run "python" and all that good stuff.
Oh man, as someone that made the jump last year let me tell you, you are in for a treat.
Thank you!
Well NPE is the real error, its just less descriptive..
Why do you use imgur instead of submitting the error as test post?
In an old program I used to use at work all exceptions were wrapped in "Trouble in paradise: [error msg]" . That stopped pretty fast when MS bought them. 
You care too much. :-)
Is this the error msg that was predicted to come? Is this the holy savior that will uncover any obscure exception in the realm of The Java? Shall i follow its format and refactor my exceptions to its image and likeness?
Great! The page I linked you has an incomplete wiki but two complete and fully documented examples. Have a think to what you want to make and add my Skype: Ellzord
A new feature is only added to java after a long period being proposed, analyzed and evaluated. If it has no real gains for the future (aka is something that is just "in the hype" right now), it will never go into Java. And it's a good thing, believe me.
Not missing per se, but look at the [Project Lombok Feature Overview](http://projectlombok.org/features/index.html). Also they (very eviily, if I may add) hijack your IDE to show the code they would have generated in real time.
I'm using Undertow (http://undertow.io) but it's really nice to see some other java web servers emerging out there :)
I agree with your sentiment. PrimeFaces is certainly not legacy though. It is one of the latest and greatest technologies. It does have the stability and staying power needed by enterprise size applications.
Here we have described, How to debug java application in eclipse.
Every time I have a new Eclipse installation, I wonder why the file type indicator icons and putting braces and semicolons at the end of the line aren't on by default.
Here are a few I am familiar with. I wrote the DevNexus app so I can field questions for you. * [Cycle Atlanta](https://github.com/cledantec/Cycle-Atlanta-Android) * [FreeOTP ](https://fedorahosted.org/freeotp/) * [Devnexus 2015](http://github.com/secondsun/devnexus-android-2015) I work for RedHat on the AeroGear project. We have several demo/quickstart apps you can also look at. * [AeroGear Android Cookbook](http://github.com/aerogear/aerogear-android-cookbook)
#6: It has an embedded web browser that you can use to download IntelliJ 
Ditto, it's worded in slightly confusing fashion.
Here is my library similar to immutables.org and google-auto/value https://github.com/sviperll/adt4j . The difference is that it provides a way to define algebraic data types, like Scala's case classes. It's usefull if you need to define some kind of tree-type or expression-type. /plug
Here's an excellent one: NPR for Android... https://code.google.com/p/npr-android-app/ It's a working NPR interface that incorporates many, many features of the platform. I used it when I was getting started. I realize it's not on Github, but since Google Code is shutting down it might end up there eventually.
Git. GitHub for everything public, self hosted for private stuff. As to better or equivalent: This is very subjective. Use *some* form of source control. Not everybody loves git and that's fine though I think nowadays it's a very useful skill have. Many people swear by Mercurial. You can use Bitbucket which even has free private repos. It also has git and Mercurial support in case you want to try different things. I'm not sure how to think about SVN. It's still widely used in companies but after git I don't want to touch it anymore. Don't use something like Dropbox.
It would be better with \n lines like in JAXBException ;)
Essentially: Always use StringBuilder, when concatenating Strings in loops, outside of loops, use "+".
I've been really impressed with the Spring Boot support in 14.1 so far, I'll have to watch this video when I get some time.
I really aprecciate your library with unique approach to ADT - visitor-first kind of thing. You may also note how Immutables are more advanced in other areas. I would hope there would a freedom to mix and match though.
by the time you know enough about what's going wrong to display this detailed of an error message... you could probably just fix it.
FWIW, we're much more looking at command-line tools than IDE integrations, which are easier in a couple of ways.
&gt; ## 3: The EGit staging view &gt; &gt; Aparently, not every EGit user is aware of this view. As a matter of fact, to me, this view is the most important reason why I‚Äôm NOT using the shell commands. [‚Ä¶] **I can now decide on a line-per-line basis, which changes I want to be added to the index** (note I haven‚Äôt added the main method). This leads to there being staged (added) changes and unstaged (not yet added) changes. As always in EGit, I can now either directly commit, commit+push, amend+commit, amend+commit+push in one go. Try doing that on the command line. Of course you can do this on the command line: git add -p # or verbosely, git add --patch # or add+commit: git commit -p You can not only add or remove on a line-per-line basis ‚Äì you can even edit the individual ‚Äúhunks‚Äù freely and stage *parts of a line*, or even introduce new changes that never saw your working tree (as long as the patch still applies). It **is** amazing, and you should use it, but it‚Äôs not Eclipse-exclusive. ([SourceTree](http://www.sourcetreeapp.com/) has it as well, and perhaps other UIs that I‚Äôm not aware of.)
The type filters are a glorious feature that I had no idea about... I've been using eclipse for around seven years. Now I'm embarrassed. 
What does this have to do with Java?
You're right. It's not Eclipse-exclusive, but it is rather well executed in Eclipse
If you want real time sync and use Eclipse, check out this project: http://www.saros-project.org You can work with many people at the same time, share screens, chat, see what they're doing, etc. :) Worked for me in a Extreme Programming environment with 2 friends of mine.
How?
Same here, first templates were written in early 2012 and was used since in different projects. In this case more decisive would be conceptual and stylistic differences rather than raw feature set. You're right in that one shouldn't change something if ok with current tool. There's also other showcases of technology: [factory builders](http://immutables.github.io/factory.html) [JSON](http://immutables.github.io/json.html) [MongoDB](http://immutables.github.io/mongo.html)
So edgy I cut myself. Someone bring me some bandages.
Don't know about Sublime's but Notepad++'s is much easier to use in my opinion (Alt + left button selection) than Eclipse's.
Oh I know. Almost everything IBM has some really awful gui that you either have to use or practically have to use. Usually the underpinnings are mediocre to terrible too (with a exceptions) . 
I love Alt-F3, and Ctrl-L. Makes turning a list of numbers into a sql query so much easier. 
Both are great features, but the difference with multi-cursor is that you can put the cursor in multiple places *even if they're not column-aligned* (unlike the block selection feature). So, if you're editing a file and the same word shows up on 4 lines and it's in column 10 on the first line and column 20 on the second line and in different columns on the other 2 lines, then putting the cursor at those places lets you edit all 4 spots at once even though they're in different columns. I like Eclipse (been using it for about 11 years now), but one of the things I really like about IntelliJ right now is that it has both block selection *and* the multi-cursor thing like SublimeText does. It even does neat things like code completion at multiple cursors, which is kinda cool. See http://www.sublimetext.com/ for a good demo of the multi-cursor thing. Basically, it can do anything the block selections can do but more. 
I'll play a bit of Devils Advocate here. I'd try and pick your tool based upon your own use-case. If it's just a simple personal project with no need to really show it off to the public, I'd just go with SVN. If you're a multi-person team all looking at the same code-base or you want to show off what you've written using GitHub, I'd go with git. Merging code changes in DVCS' (Distributed Version Control System) is far and away easier than trying to merge code using SVN or more conventional source control. You could also just use Git just because everyone else uses it, but if you're only going to check code in and ensure it stays in sync with your other PC's. You're only likely going to be using features like committing, updating and merging (more than likely simple merging of files that are out of date with the newer versions). SVN keeps these three concepts simple and should be a breeze to pick up from scratch if you're not familiar with Source Control. Git does complicate this a little for you by just how it is designed to work, with git commit, git push and git update... but I won't go into too much detail about that.
For your particular example it sounds like regular expressions would work better.
I'm pretty new to Java, what exactly is wrong with Eclipse?? Is it something I should worry about now, as a beginner? Personally I've been using it and think it's great.
Yep. This is the one I'm writing home about as we speak.
Java tooling in general is great. So if you're coming from a different language, it really will seem great. A lot of us don't like it because they've made some weird menu choices and everything is laid out strangely. You learn to get passed that though. Intellij is generally more helpful and simpler to configure. It's faster and uses less memory. It's also much less likely to exhibit strange bugs that you have to sink time into fixing. The downside is that the free version is restricted from using containers and it doesn't help you with most popular Web technologies. The paid version is excellent, but it costs $200 and $100 each year after the first to keep getting updates. For me, it has been worth every penny because I can focus on programming instead instead of configuring and solving IDE issues. If you stick with Java, it's worth giving the free version a shot and seeing what you think. 
How can I use this on my iPhone?
These type filters are really nice! Intellij doesn't have these, right?
There are trolls and fanboys out there trying to tell you that IntelliJ (let's call it emacs, MacOS, Commodore, spaces, or curly braces on the new line) is much much better than Eclipse (let's call it vi, Windows, Atari, tabs, or curly braces on the same line). Do not believe anything they say. They like to lure you into their vicious troll discussions. [Some example discussions here](http://blog.jooq.org/2014/07/25/top-10-very-very-very-important-topics-to-discuss/). On a serious note: Of course, there are pros and cons to each IDE. Eclipse used to be the best. Now it's IntelliJ. In 5 years, it might be NetBeans. Who cares.
Wow, I haven't thought about it this way. Gotta file a feature request, then!
Reddit is not a/your release blog. Don't spam it with every new release you do, please.
[More information](http://stackoverflow.com/questions/355089/stringbuilder-and-stringbuffer)
*Disclaimer: I'm a huge git fan so the following may be biased.* As I said, this is very subjective. Git is (and has been for quite some time) gaining a lot of popularity so the skill of being able to work with a DVCS just makes you more competitive in the marketplace. Having used both SVN and git I cannot explain my feelings towards SVN without using foul language. I think it's a myth that git is so much harder as many people claim. It's like saying "functional programming is hard" but that's only because most developers start with imperative languages. I'm also very opposed to the idea that a DVCS is only useful in multi-person teams. This seems to be another widely perpetuated myth. The fact alone that you can just `git init` and have your repository instead of having to deal with all the client/server stuff in SVN makes the initial setup dead simple. 
Post deleted. Sorry
If it's what you know, then yes, it is. Otherwise there probably isn't one. If you're in a Java EE environment it's JSF since it's part of the spec. You can use JSF outside of Java EE. A lot of very vocal people these days will advocate a JAX-RS based backend and a javascript/html5/css front-end. Edit: Some other alternatives people haven't mentioned yet are Grails and Wicket.
Look at Apache Tapestry for an interesting alternative. Tapestry + Hibernate annotations is a ridiculously easy win for CRUD apps.
I imagine it's also due to having to come up with new words that you are actually able to get a domain for.
Some alternatives I've used: 1. [Spark Java](http://sparkjava.com/) - When you need something lightweight and quick to use 2. [Tapestry](http://tapestry.apache.org) - Hard to describe because components but easy to use. Try out the 20 minute tutorial. 3. [Ninja Framework](http://www.ninjaframework.org/) - full stack web framework with Guice DI layer; plays nice with GAE 
I think it's an interesting idea, but as the name of the inner classes will quickly scroll out of view I doubt it would be any more readable in practice.
&gt; You can use JSF outside of Java EE. Really? I think you meant something like "You can run JSF on Tomcat/Jetty/without EJBs". 
Yup, you can include Mojarra or Apache MyFaces (are there others?) as JSF implementations in a "servlet container".
Few more, give them a spin. http://dropwizard.io http://www.pippo.ro http://wisdom-framework.org 
Try using testNG. You can write very clean unit tests by separating your test data from assertions. This removes most code repetitions commonly found in JUnit.
I couldn't even get the play framework up and running. I'm currently using GWT.
The performance of any framework that you use is going to be very dependent on your design and execution. Spring can be high performant but if your code is sloppy or your design omits key requirements for scaling such as caching, the performance will be poor. That goes for any framework. As for documentation, Spring has a ton of resources available, via their own documentation, books, tutorials, etc. It's popularity as one of the most mature of the Java web frameworks means that it's easy to find answers to your questions on sites like StackOverflow and Spring's own forums. Which framework is the right one for your project will depend heavily on your requirements, however. Spring, like the JEE stack, is more a collection of services and components, than a singular framework. You pick the pieces that you need for your project. I have worked with Spring since its inception, when it was introduced as an alternative to Struts and sought to answer the shortcomings of the EJB 1/2 model. If you are starting out, it's still a great framework and I would recommend it. It also wouldn't hurt for you to learn JEE and its stack, as well. Since both support many of the JEE standards, learning one will make it easier to learn the other. If you are evaluating the frameworks for a project, consider which of the two would be the easier for you to learn and support. If you are looking to improve your skillbase, either is fine, but I would recommend that you look at your local job market to see what's in demand.
+1 for Play. Easy to use, quick turnarounds (no app server / servlet container needed), and it's fast: http://de.slideshare.net/Typesafe_Inc/why-play-framework-is-fast 
Play is more of a Scala framework that you can optionally use with Java. 
If I were to do a java webapp, I'd probably pick between Dropwizard if I wanted more of an API-based server or Play if I wanted something full stack. 
The best part of this thread is the myriad of responses. Personally, I prefer Spring. It may not be the most concise (even though Spring-Boot fixes most of that) but it's very mature and easily extensible.
Spring-boot is an enteprisey Dropwizard alternative. The **pro** is the nice [quickstart](http://start.spring.io) (and all the niceties of spring framework) and the **con** is the generated app size, as it includes lots of dependencies such as logging that will probably need anyways.
[Relevant](https://plumbr.eu/blog/java/java-version-statistics-2015-edition). Java 6 still used by almost 20% of whatever the "population" of this article is. I'm looking forward to the day I can switch straight to Java 8 (probably by 2020).
TestNG is the way to go, unless your IDE is IntelliJ IDEA. Its TestNG support is so broken you'll be more productive using the command line. Edit: let me prove I'm not kidding Here are the problems I've faced in my *FIRST* attempt to execute TestNG test cases: * First, I found this 4 year old bug: [Tests are run, but display of results is wrong ](https://youtrack.jetbrains.com/issue/IDEA-100752): basically I have 258 test cases and IDEA displays 0 to around 20, depending on it humour (every time I restart the IDE, a few different test cases are listed). * Then I created this one too: [Not all TestNG test cases are executed](https://youtrack.jetbrains.com/issue/IDEA-138222). IntelliJ does report failing tests if I force them to fail. * Finally, another 4 year old bug: [IntelliJ test runner mixes output from different tests when TestNG parallel is used](https://youtrack.jetbrains.com/issue/IDEA-73260) - you won't see the output produced by some test cases, or you will get mixed contents This is just unusable and VERY broken. I was expecting IDEA to at least support TestNG as eclipse does, but it does not come even close.
Here is my tip: when installing the JRE, don't forget to uncheck the "install the ASK toolbar" option.
Any tutorials out there?
We did our platform in ninja. Kinda bloated, but it did the work. 
I don't think that there are any tutorials out there that cover CDI Properties. It's a relatively new framework. That's the reason why I have chosen to write an extensive documentation on the project's GitHub homepage. It should have everything you need to get started!
&gt; how you would be 3+ times more efficient ... right up until your project grows beyond a single team or you have to maintain 3-year-old code.
Some of the biggest Scala adopters would disagree. And I don't know about who wants to do what, but I know for a fact that there are plenty of multi-MLOC, 10+-year-old Java codebases that are regularly maintained with great effectiveness. OTOH, the most successful Scala project to date is being derided by the Scala community for not being "properly written". It's precisely the debate over what "properly written Scala" actually means (and the difficulty in enforcing this highly contested issue) that ends up being one of the main reasons why Scala is so hard to maintain.
Source? (On adopters who disagree and community stating most successful project is not properly written) &gt; what "properly written Scala" Yep, we have those debates. Then we agree on company standard and enforce in code review. Still much better than the alternatives.
I would like to use Dropwizard, but I really dislike the fact that I *have to* use Jetty as Container.
BTW, if you read their style guide, they're essentially writing Kotlin and compiling with scalac. 
Can I ask what version of the JEE stack you were using back in university? It is **a lot** simpler now than it used to be. Personally, I'm a big fan of the JAX-RS backend plugged into a HTML+JS front-end (optionally, using things such as Handlebars or Bootstrap to render the UI), but the rest of the modern JEE stack is very easy+powerful. 
Why do you think if you have a JSF app you can't re-use the backend? JSF backing beans can use the exact same JAX-RS services that a heavy js client would use too. A *heavy* JS client is not so nice these days, it sucks your battery dry before you know it.
Spring is not the de facto web framework for Java. First of all Spring is not a web framework. It contains a web framework (Spring MVC). Spring is a full stack framework that competes with Java EE, which *is* the de facto full stack framework in Java. Java EE has JSF as the default MVC web framework.
&gt; Wrong. Right! &gt;Ok, I guess they changed the name from J2EE to "Java EE" now or something? That was done only 10 years ago, and the direction of the platform changed radically. Just shows how much you know about Java EE I guess ;)
Yeah, forgetting that a girl's last name is different now because she got married does not mean you don't know her or her situation at all. Forgetting they took the number "2" out of the name means that I'm not Sheldon Cooper. I said in my post you wanted the latest versions, not the older ones which were junk.
Why is Jetty bad? Honest question.
That's not even accurate. It's more like the super bratty and obnoxious girl in high school, who met a guy (Spring Mvc) and completely changed to date him and now she's actually nice to be around. That you forgot she has a new last name now doesn't mean you didn't see the vast difference.
I don't think this is correct. Play is written in Scala, but it also has a Java API. So you're not using the Scala API from Java (which would be the scenario you describe), it has a dedicated Java API, with documentation and JavaDoc and all.. 
That's a fairly biased way to represent that debate, it was more about how the guide was condescending and full of faulty justifications than it was the chosen style.
&gt; That style guide was not condescending, but the debate was violent and arrogant The way the debate started was no arrogant than the style guide, I'll give you that, but violent is hyperbole and the original poster had few proponents when called out for the way he framed the debate. &gt;Some organizations (i.e. many, who -- just like Databricks -- happen to be among the largest and most experienced organizations using Scala) have found Scala style disputes too taxing, the discipline unenforceable in practice (whatever style you choose, the next team lead might have a different opinion), and the code unmaintainable in the long run. How is this different from any other language? Somethings will always be controversial, others will standardize over time. There are still no shortage of Java style debates about the use of static initailizers, acceptable usage of Annotations, how to correctly implement singletons, when to throw checked exceptions, how to correctly inject dependencies, etc. I still remember when style of source tree organization standardized by maven today was a never ending source of debate over good practices.
Can you point me to some examples that show this in action?
Should have just gone to Java 8.
I use Java 8 on my java platform, because 8 supports great developer features. I look at it as a benefit, not a burden. I don't care at all that 20% are stuck on Java 6, if you want to run my software, install Java 8. Besides I'm building a platform for developers and as a language java has matured a lot between 6 and 8. I already use features in 8 where no suitable alternative existed in 6 or 7, for example parameter name reflection, added in 8.
Thanks for contributing the tool! Was [PMD](http://pmd.sourceforge.net/pmd-5.3.0/customizing/howtowritearule.html) not a good solution for this?
Oh sorry. The Joke ---------- My Head 
So I don't believe it's been mentioned, but i've been using [Vaadin](https://vaadin.com) for a pretty large project, and it's worked **very** well so far. It's been great being able to do pretty much everything in Java, and have it just work. Also has a pretty large widget set available, and you can create any new ones as necessary.
&gt; Having used both SVN and git I cannot explain my feelings towards SVN without using foul language. Yeah, well, there's a lot of other people like myself that feel exactly that way about Git. It's one of the most needlessly complicated things deliberately filled with contradictory terminology I've ever tried to use. Oh you committed your code? Well, that could mean you only have a local backup of it, or it could mean that's it's actually available to everyone. Oh did you commit it but only to your local repo? Ha, to bad! Svn is like "I committed it, it always did exactly what you'd expect - sent it to the server".
And if 100% of CI nodes in the world were forced to run Java 8 it would change those numbers by effectively 0%. What devops does is devops' business, neither client nor prod is affected by what Jenkins is doing behind closed doors.
&gt; Keep in mind that this is a Java subreddit, not a Scala one. Absolutely. Resistance to change is a powerful force, even in industries where change is common.
Agree with poster. Even single developer projects benefit by the performance advantages of git over SVN. There are a lot of laggards that may try to convince you otherwise, but it just makes sense to invest the time to learn it as soon as possible and get maximum benefit before the next thing matures beyond a fad and you have an even bigger cliff to traverse since it builds on technology. With git you don't need a server.
Pay me enough money and I'll be thrilled to maintain your shitshow.
Yammer: http://www.infoq.com/news/2011/11/yammer-scala
Well, I actually meant that many of the more experienced people here have seriously considered Scala some time ago and found it to be seriously problematic. You are forgetting (or perhaps too young to remember) how a lot of people (myself included) were thrilled with C++ for a good few years until its full horror became clear. *We* were the ones saying the platitude you are now repeating, we were the ones dismissing warnings about the language being too clever... until we learned our lesson and have now become attuned to recognizing duds (worse: danger). It will happen to you, too, and you'll be able to know the next C++/Scala when it comes around, and then you'll be able to resist those junior developers saying what you just have. Thankfully, there are enough people now able to recognize Scala for what it is, which is why organizations with enough experienced workforce are rejecting it, so it won't become a serious problem for the software industry like C++, and, instead, will be used only by those who somehow manage to tame it. Sure, there will be casualties (unfortunately, there already are), but it won't become a C++-scale disaster. Note, BTW, that C++ *today* is quite OK, actually, as it is no longer used wholesale, but only by some niche, and relatively small shops, able to hire people who won't make a mess of it. I reckon the same will happen with Scala. BTW, C++'s disastrous effect was one of the main reasons for Java's wildfire adoption. Organizations clamoured for something simpler. Java was the *response* to a too-clever-for-its-own-good language. Of course, Scala is far too small to have the same effect on the industry (and, again, many have said "fool me once..."), but we've actually seen what happens when organizations adopt a clever language, and the signs are already there for Scala (i.e. the first casualties have already fallen, and some are already on the edge), so we know to keep our distance. But, just like Americans have forgotten that strong regulation was the *response* to the disastrous effect of an unregulated market of the end of the nineteenth- beginning of the twentieth century -- and a much called-for rescue -- some people forget the hard-won lesson here, too. OTOH, in my company, we've already adopted (alongside Java) Clojure and Kotlin -- two languages designed by people who have learned their lesson (unsurprising considering the backgrounds of the people involved with the creation of Java, Clojure and Koltin vs. the background of those behind Scala).
The web is big, it depends on what you would like to do. Spring is not a web framework, Spring Web MVC is just the top of the iceberg. There are many alternatives, depending on what you need they might vary. Here are some of the stacks I know: - Pure Java EE with JSF - Dropwizard (lightweight framework for REST API's) - Play framework - Vaadin - ... The pros and cons depend on what you need. If you don't want to have a vendor lock-in, then you probably want to look for JSF. Some of these frameworks have specific mindsets, like Dropwizard, which is oriented towards REST services. There is Apache Wicket, Apache Tapestry, ..., all with specific mindsets/goals (scalability, performance, lightweightness, ...). Then you have some of the big players, like Vaadin, I never actually worked with it, but I know it's pretty commonly used. Another often used framework is Struts (1). I wouldn't recommend it for new projects though, because it's EOL. Play seems to be quite popular as well, especially since other JVM languages (like Scala) were getting attention. And then you have full stack frameworks like Spring. Spring comes with a lot more than only web MVC. It has social integrations, batch processing, messaging (JMS/WebSockets), (big) data, persistence (JPA but also NoSQL), a testing framework, security (and those are only the once I used). I like Spring a lot, and with Spring Boot you can enjoy the best parts of Spring without the hassle of having to configure a lot. If you like Spring + AngularJS you should definitely take a look at JHipster: http://jhipster.github.io/ 
True. But it would be much easier having one already made and tested. However that seems the only option. 
That is just a line the Spring folks started using because they did not like that Java EE is the standard. Spring is certainly very popular though. It is sort of misleading because nothing about Spring is really very standard. The biggest con I see with it is that in general everything Spring provided is available with Java EE. I do think there are some circumstances where Spring is useful. Java EE is also easier to configure and use in my opinion. JSF components are fantastic as well. Take a look at the PrimeFaces demo page to get an idea what you can do with it. 
Spring is not really modular. It kind of is but the inter-dependencies are so vast you really cannot just pick the part you want. For example if you wanted to use Spring security you need to include 13 other Spring modules.
Stocks are martingales and therefore any kind of predictive algorithms are purely speculations.
What's a pid controller? 
Sidebar rules: &gt; Please seek help with Java programming in /r/Javahelp! Answering your questions is impossible because you're asking about stuff that doesn't exist. &gt; to put a system close call at the end of a jar file You don't "put X at the end of a jar file". A jar is a collection of (compiled) classes and other resources. There is no "end". &gt; a system close call There is no "system.close" method. At last, this we can answer: &gt; Also should I be running a finalize method? [Uncle Bob](http://de.wikipedia.org/wiki/Robert_Cecil_Martin) says: no.
Proportional, Integral, Derivative Controller. It's a small to medium complexity control loop, used to do things like operate robots, or keep airplanes stable. As usual, someone has already written a good description: http://en.wikipedia.org/wiki/PID_controller 
I meant System.exit(0). I saw that link for programming help as soon as I posted, although they have around a tenth of the subscribers. Thanks though.
The problem with that is if you want to write a security based plugin for Jenkins, and acegisecurity does not support what you are trying to do (but Spring Security *does*) You are just out of luck. I asked the Jenkins team about this a long time ago and the reason I was given was that too many existing plugins relied on the acegi code so upgrading meant forcing those plugins to upgrade too. This is just a stupid reason to stay on seven year old (potentially vunerable) security code.
Something I used a while ago: http://textadventures.co.uk/quest This article lists two more: http://www.makeuseof.com/tag/3-tools-to-create-your-own-text-adventure-games/
The is a fairly good intro to neural networks, but predicting the closing value of an index is meaningless in most cases. Try it - look at the closing value of the DOW or any other index over the last few days and then guess today's close. You'll be very close unless some dramatic news is released today. You can't make money day-trading off of the market doing its normal thing, which is what neural networks are good at predicting. To make money you'd have to predict the outliers - when the market is suddenly going to shift significantly away from the norm.
Totally agree. The article was intended as an intro to neural networks and the Neuroph framework. Predicting a stock market index seemed to me a pretty interesting use case, but the demo alone is not a reliable decision source. There is also a disclaimer before the Conclusion section. 
Java doesn't have GOTO. Actually it doesn't really need it. You can wrap almost everything in loops, if-statements and switch-case constructs. Goto is mainly a relic from structured programming languages like BASIC. OO-languages use other patterns to achieve similar functionality. If you're not too fixed on Java, you could probably use the one (or more) of the tools below (all of them are free): + [Twine](http://twinery.org/) + [Quest](http://textadventures.co.uk/quest) + [Adrift](http://www.adrift.co/) + [TADS](http://www.tads.org/) + [Inform7](http://inform7.com/) **EDIT:** I just remembered a post from some time ago in /r/learnprogramming that provides a skeleton code for text adventures. The [original post is here.](http://redd.it/2mwuwd)
I'm just curious why ? I wouldn't add any additional bloat to your fat jar and I think spring adds very little in the context for spark jobs. 
You needed to do things like include debug information, I didnt' really want to use it.
There are a number of [dedicated languages and tools](http://en.wikipedia.org/wiki/Interactive_fiction#Development_systems) for developing interactive fiction (including text adventures.) You'd probably be best served by looking into one of them.
Actually, because it's a martingale that is not true. You have the exact same probability. 
I know this prof in college was way into creating text adventures, here's a blog post about what he used: http://jerz.setonhill.edu/if/writing-interactive-fiction.htm I don't know much else, especially about a GOTO library, other than what anyone could find in a google search.
Much of this is FUD and conjecture. &gt; considered Scala some time ago and found it to be seriously problematic Some time ago it wasn't ready, e.g., in terms of tool support. That's changed now. Perhaps these people should consider it again. &gt; or perhaps too young to remember You don't necessarily need to patronise me. &gt; C++ today is quite OK, actually, as it is no longer used wholesale, but only by some niche, and relatively small shops, able to hire people who won't make a mess of it. I reckon the same will happen with Scala. Are you basically saying that Scala would be fine if only good programmers would use it, but since it will be used by bad ones also then it's harmful and should not be used? And that C++ has reached the level where it's only used by "niche, small shops" who only hire good people? http://www.indeed.com/jobtrends?q=C%2B%2B&amp;l= &lt;-- that's a lot of "niche, small shops" Can bad programmers write poorly maintainable code in Scala? Sure. But they can do the same in PHP, Python, Java and whatever else. I suppose if you have mostly bad developers then you want to dumb down your tools. Is that where Java comes in? Although actually for parallelism I'd rather give a bad developer Scala +Akka then let him muck about with what Java offers.
In some bizzarro world perhaps. In the real world, Scala adoption has increased significantly since 2011: http://www.indeed.com/jobanalytics/jobtrends?q=Scala&amp;l= Compare the trend with Java: http://www.indeed.com/jobtrends?q=Java&amp;l=
lejos is java based and it has has one: http://www.lejos.org/nxt/nxj/api/lejos/util/PIDController.html also see: http://lejos.sourceforge.net/forum/viewtopic.php?t=2550
&gt; Scala went from being used by 0.32% by 0.34% with some 100 to 103 jobs (3 extra people to help with the mess). You cannot read a simple chart. Why should I waste time on you?
Actually a fun bit of Java trivia: goto is in fact a reserved word that you can't use as there was consideration being given to add it to the language at some point. While this has never happened it still remains in the [list of java keywords](http://en.wikipedia.org/wiki/List_of_Java_keywords) which might be confusing for someone who happens to stumble across it. Sorry to hijack. While I'm here I'll give a thumbs up to Twine. Super simple to use, supports moderate scripting, and takes me back to the days of Hypercard on the old Mac computers!
&gt; Much of this is FUD and conjecture. You're welcome to believe that. I see no point in turning this into a mud fight.
If you want more examples though, google: java pid controller site:github.com 
&gt; Java doesn't have GOTO. Actually it doesn't really need it. I'm just saying, OP asked about the GOTO **library** for a text adventure. I doubt they were looking for the goto language keyword...
oh, well that safes me a bunch of time figuring out how to use this.
I really wish JBoss Developer Studio would have this kind of functionality
Great! Thanks for answering my question.
Thanks for the link
Another fun fact: Java actually *has* (a limited form of) goto, it's called `continue` (for going backwards) and `break` for going forwards. You'll need labels to go to, and it only works within a single method, but it's goto anyway. By the way, the JVM has both conditional and unconditional branches, so it should be possible to create a library that adds label(int) and goto(int) calls and replaces them with the correct branches at runtime using a custom (byte-code-mangling) class loader.
Can we just agree that typescript won and be done with this silly transpiler game!?
There has never been and there will never be any de facto web framework in Java or in any other language / platform for that matter. [Last year's ZeroTurnaround survey](http://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-for-2014/) does hint at SpringMVC's high popularity, though. But that wasn't the case 5 years ago and won't be the case in 5 years.
And you pick a single data point that seems to prove a point, but doesn't.
Jelly and Stapler... I agree, terrible non-standard monstrosities.
I don't care who wins, I hate non-type-safe scripting. I like TypeScript and I've invested some of my time in it, so I'm on their team. But in the end, I just want a better alternative to become mainstream.
Yeah, yeah, it's the same stupid rhetoric every time. They've been declaring java "dead" for 10 years with the new whiz bang framework. Tell me more about how everyone is using Ruby On Rails and no one is using Java any more.
Why? 
I see. I thought you discouraged the concept not the formatting. But this is more expressive and handy than constructors. The restriction of outer scope variables to be final denies its usability though. EDIT: I thought you were u/ixampl. Silly me. 
Yes it will. You just don't want it to. You'd rather create 1 instance and re-use it rather than let it create one instance for each iteration.
No I discourage the concept. I just reformatted the example to make clear what actually happens when you type that in. I recommend doing it like the last code example I posted. EDIT: If using constructors isn't flexible enough, use a default constructor and either have setter-methods return the instance of the class or write specific with&lt;Property&gt;() methods. Those can be used like this and allow for more expressive code: StockData stockData = new StockData().withLast(10.0).withClose(2.0).withStock("ABC"); As you can see, I chained all the calls and then use the return value of the last with-method to fill my stockData variable. Let's look how a with-method is written: class StockData { ... public StockData withLast(double last) { setLast(last); return this; } ... }
They have an api for that http://docs.aws.amazon.com/AWSECommerceService/latest/DG/EX_RetrievingPriceInformation.html
&gt; There has never been and there will never be any de facto web framework in Java True, the Zero Turnaround data point was just one data point. Other sources don't agree with it. Take at this old blog entry of my that I updated a bit now and then: https://henk53.wordpress.com/2011/10/12/reply-to-comparing-java-web-frameworks The only thing we can really learn from it is that there's not a single de facto web framework, not any one of them is dominant. You can only say there are groups of popular and somewhat less popular ones. If you look at the top 3 of all sources combined, then 4 to 6, then 7 to 10, etc you see approximately the same frameworks in each group, but each source gives them a different percentage and a different overall position. 
In my majority of apps it doesn't matter. Just use "+" because it's simpler, easier, and less typing. StringBuilder is there in case you are writing a String/Text intensive app so you can choose to optimize. But most of the time the difference is to trivial to worry about. 
https://bugs.debian.org/cgi-bin/bugreport.cgi?archive=no&amp;bug=781223
It does need a standard library. Because each framework/library now needs to reinvent a Set (for example) and now any time I need to pass a Set from library A to library B I have to write a little transformer from Library A's Set type to Library B's.
Use Guava or write your own List / Set / Map initializers: class Lists { static &lt;T&gt; ArrayList&lt;T&gt; arrayListOf(T... args) { ArrayList&lt;T&gt; l = new ArrayList&lt;T&gt;(args.length); l.addAll(args); return l; } }
https://github.com/bradchesney79/npr-android-app Aaaand now it is on github.
&gt;I just reformatted the example to make clear what actually happens when you type that in. I recommend doing it like the last code example I posted. So the problem is Java, not the concept.
Signed up! Thanks!
I posted this on a few Java/programming subs, I think this course is gonna get bombarded by Le Reddit Army because of me, I hope everyone on the course isnt wearing those annoying hats in their profile pictures!
Clean code means less code on a large scale, but not always on the small scale.
Excellent point. The line of code in this example is easy to understand what it is doing, but the reason why needs clarification. I'd side on having a single line of code inline with a comment. If the line needs to be called in multiple places then a function could make sense. In general single line functions don't smell very clean to me.
Signed up as well
That really depends on the situation. For instance, I hate ternary operators and always prefer methods with guard clauses.
Currently live in atlanta
I'm not aware of any java-based gaming engine, and the course description didn't give any info on that. Is this going to be a text-based game? If not, I'd really like to know what graphics engine will be used. 
Well said. I frequently oppose comments, but I probably don't do a great job of defining the distinction between the types of comments. Note to self: When explaining how comments lie, make distinctions about what-style comments rather than why-style comments. 
The "problem" is that Java doesn't have Javascript-style hash literals and abusing anonymous classes to try and emulate it is bad.
Seems like a legit client guys
Did you try deploying it?
Uh, okay. Hash literals can also be supported without abusing anonymous classes. But Java has support for neither of those syntaxes and abusing anonymous classes to work around it is bad.
It's an online course.
"commit" is actually one of the few words that have identical meaning in git and SVN. It records changes to the repository. As to different meanings for words: Yeah well, you'll get used to it. Imho it's much less of a deal than most people seem to think. [Torvald's take on it.](http://www.linux.com/news/featured-blogs/185-jennifer-cloer/821541-10-years-of-git-an-interview-with-git-creator-linus-torvalds) Of course I cannot comment on your colleague and your concrete experience. When I had to start using git, I was still tainted from SVN, so I read Pro Git and after one or two chapters I basically got it. Previously I resisted getting close to git because I thought it was just some new fad. Not one second have I ever looked back. Practical advantages are of course branches. I only hear bad things about branches in SVN. I once tried to save some work in a branch and after wrestling with it for a while I never dared to check whether I actually succeeded or just deleted all my changes. With git I was comfortable creating branches right from the beginning. In addition to that I always feel in control of my changes in git. Changes are objects that, until pushed, I can change, split, merge, reorder or move however I feel like. This encourages small commits that can be independently rolled back if need be. With SVN I only know of humongous commits because authoring commits is a nightmare. Oh, and conflicts all over my files because I dated to update? Please...
Awesome! This is one of my favorite Java libraries. I add it to every project I work on.
Haha i wonder if I can get this reddit army to send me 1$ for charity to go to college
Warning: Don't self advertise or post your own content too much. It's against the rules.
And you may not have to reimplement the backend, but you definitely will have to redo the front-end. The problem is all the work which is usually done back-end is now pushed to the front-end, so reimplementing the front-end involves doing a good portion of what should be back-end work.
I share the general hatred for XML as a configuration language. I can see this being a powerful feature to promote evolution and experimentation. However, I can also imagine the frustration of having to debug a build issue with multiple languages involved. The genie is out of the bottle so no looking back. I pray that the eventual configuration-language-wars end quickly and that the best language comes out on top. 
Don't think so, is he on YouTube?
Yes
Yeah. I never understood the hate XML in general usually gets. It's not any more verbose than Java itself and just like Java modern IDEs hide all of that from you. And on top of that you get a schema and a huge ecosystem of libraries that help you handle XML. But I'm coming from publishing and some parts around here still use SGML. So I might be biased.
Thanks. I'll go check that out!
It's nice to have the option, but it's just one more piece of infrastructure to break in the seemingly fragile ecosystem that is a maven project.
Oh, yeah, I hate that. I was talking about code completion. I want my POM and not learn an abstraction of the POM.
For those people that absolutely must have some scripting in their build tool, then they could do that within Maven and still have the rich archetype functionality, the huge plugin library, and the larger userbase. BTW: I really hate having to inherit somebody else's scripted builds)
&gt; confusion for simple builds. What confusion are you referring to?
For example in EE the build requirements for a Web App, you have to specify additional build terms as to compile time configuration. 
Thanks, thats a helpful suggestion.
Like the post says, our application is Spring based (TransactionHandling, etc). Refactoring the whole application is not an option, so to be able to use Spark in front of our application we needed to be able to inject our dependencies.
&gt;Can't imagine a reasonable use case for Ant now. Labs, pretty much.
I basically mispoke. Fragile is not the right word... More like... obfuscated? I mean I know that's the point but I'm looking for something with a negative connotation here because maven makes trivial tasks far more complex than they need to be at times; and it's been easy for me to break lab projects as I add complexity in my burgeoning studies of maven.
Offline, non-internet-connected dev environments. I know it's possible to use maven in places like that... But it's not straightforward.
How do these things work with people on the other side of the globe (ie: different time zones?)
Fully agree. Gradle is just dog slow and doesn't bring anything new to those of us that don't suffer from XML allergy. If it wasn't for Android Studio adopting it, I doubt it would get any major adoption. 
Agreed. I would have appreciated if they didn't make the schema so stupidly strict and verbose, though. XML can be used far more elegantly than the giant heap of tags you'll see in a typical POM.
&gt;maven makes trivial tasks far more complex than they need to be at times Do you have an example? &gt;it's been easy for me to break lab projects as I add complexity in my burgeoning studies of maven. How did you break them?
Especially in a programming language, where the only way you can possibly extract the configuration from it is by loading up a full-blown Maven environment and evaluating the whole file. Want to extract just the group/artifact/version from a Groovy POM? Tough toenails. And so on.
Gradle is generally far less verbose and has a more flexible dependency model than maven, as a couple of examples.
&gt; Do you have an example? Not presently. &gt; How did you break them? PEBKAC. Much of my issues when writing pom files are the same as my issues when working with the GNU Autotools. The standard way things are done changes quickly, and the most easy to understand documentation out there tends to be outdated by the time I try to use it. Suffice to say I've done a lot of rolling back of pom files in my lab work in the past. I don't get to work with Java right now, though, and I don't have enough free time to explore it much these days, so these are old complaints from past studies.
Well, bear in mind that, in Maven, all build behavior lives in plugins. If you need any special build logic, you should write a plugin to perform it. The POM should only loosely tie plugins together, not define complicated build logic.
[Same title, same link, 4 days ago...](http://www.reddit.com/r/java/comments/31we5r/minimalist_java_web_applications/)
Maven is **super slow** unless you already cached hundred of megabytes of packages or you have local mirror. Its rare example when compilation speed is limited by factor of 99 by internet connection speed and server performance... I personally never had luck with it. Once tried to build project with it and it ended up downloading 6(!) gigabytes of data and took over 40 minutes. Probably some "dependence hell" style issue. I'm not Maven hater. I would love it if it would work and not end up downloading gigabytes of packages that are not even used at all.
&gt;I never understood the hate XML in general usually gets. Try to write small, fast and not resource hungry XML parser and working properly. Its very difficult task and in past 20 years I have seen maybe 3 libraries doing it properly. XML is just hard to parse and require a lot of CPU time to parse in comparison to simpler formats. It went to the point where its faster to use SQL database then to parse XML... No joke.
Looks like you had problems with the IDE and your build team was uncooperative. Hardly seems like Maven's fault. The local repository works great esp when you have tons of jars from varying external sources whose repos happen to be down.
&gt; Many times when a developer hears the word Java, it conjures up images of clunky, ‚Äúenterprise‚Äù applications with layers of abstractions It pisses me off when people write about how "Java" is bloated in its enterprise form then go on to use a bloody "hello world" application as their example on how simple their new magic framework is. 
Really...this is pretty minimal.....and is the standard! @WebServlet(value="/hello", name="hello-servlet") public class HelloServlet extends GenericServlet { public void service(ServletRequest req, ServletResponse res) throws IOException, ServletException { res.getWriter().println("Hello World!"); } }
 Really, the *standard* way of doing it is pretty minimal also..... and, you get database connections / CDI / logging / JPA / bunch of other usefull stuff thrown in... @WebServlet(value="/hello", name="hello-servlet") public class HelloServlet extends GenericServlet { public void service(ServletRequest req, ServletResponse res) throws IOException, ServletException { res.getWriter().println("Hello World!"); } }
Typical JBoss: everything is too coupled. Why in the fucking hell they forced their logger into hibernate is beyond me. Another logger... in 2015. SLF4J sorted the mess we had a decade ago, and everyone was happy from then on. But now, if you want to use hibernate, you **MUST** have their crap logger as a dependency, and it messes up with your existing logging structure. This won't work: &lt;dependency&gt; &lt;groupId&gt;org.hibernate&lt;/groupId&gt; &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt; &lt;version&gt;${hibernate.version}&lt;/version&gt; &lt;exclusions&gt; &lt;!-- nah, can't do that... can't replace it. You have to suck it up --&gt; &lt;!-- exclusion&gt; &lt;artifactId&gt;jboss-logging&lt;/artifactId&gt; &lt;groupId&gt;org.jboss.logging&lt;/groupId&gt; &lt;/exclusion--&gt; ... And you will have a headache if you need/want to use Logback+SLF4J. Logs won't print when you expect them to. I also spent hours attempting to prevent it from interfering on a previously working project. I wouldn't care if it was something easy to manage, but it's **silent**. Add hibernate as a dependency and your pre-existing logging code won't work as before. The project in question was a simple standalone script, running from an executable Jar. My solution was to add this to run before anything. static { //runs when the main class is loaded. System.setProperty("logback-access.debug", "true"); System.setProperty("org.jboss.logging.provider", "slf4j"); } public static void main(String [] args){ ... } JBoss approach is to make things behave via indirection, but with weird hard dependencies, and you always have to spend a lot of time investigating what you need to do to make their things behave (remember Seam?). Compare with **Spring**, where a lot of effort is invested to make your life as a developer easier (better illustrated by this [recent post](http://spring.io/blog/2015/04/03/how-spring-achieves-compatibility-with-java-6-7-and-8)). 
I don't necessarily agree, but it will definitely be interesting to see whether or not this helps to stem the ongoing migration to Gradle.
I've had good experience using StAX. And of course it always depends on the task at hand. Nothing will be the best tool for every single use case. If you found that SQL was faster than XML in one project then XML simply was the wrong tool for that project. That doesn't quite allow to make a general statement about XML.
They may have a tenth of the subscribers because the people who are willing to help with trivial questions is much smaller than the number of people who aren't, for a number of reasons. Posting in the incorrect sub is less likely to yield help because it'll be filled with people who were never going to help any way. At best you'll get some pity help from somebody with a spare minute.
Philipines?
&gt; Gradle is just dog slow I never experience slowness with Gradle. Maybe because I'm using 2.1 and above?
But if they're checked in to the repo, ZOMG SUPER FAST /s
I just use it with Android Studio. Google does acknowledge there are performance issues. http://tools.android.com/roadmap &gt; Post 1.0 Gradle &gt; &gt; ..... &gt; &gt; Performance improvements It was also discussed at Google IO 2014. Gradle is much more CPU intensive than Maven, and using an interpreted language doesn't help. On my case, my Core Duo with 8 GB just gets to its knees and starts the fan every time I do a build, even with the latest stable Android. This doesn't happen with my Maven projects.
Have you tried upgrading to latest Gradle? (2.3)
Why every sprint? Create a commit hook for the impacted repos which fires off a suite of performance tests in the appropriate build environment every time someone checks in. Or you can run it nightly, weekly, monthly... Edit: words Edit 2: admittedly just read the second half of your post haha. If this is the case, my experience tells me that you need to get to the drawing board and rethink your testing strategy. At the least, there has to be SOME degree of basic performance tests you can build that can be run autonomously. Start there, and gradually start to tailor your test creation to support the new levels of automation that you're attaining. A lot of this is also determined by how mature your product is
No. Does it work with Android Studio properly? 
&gt; Oh, neat! 'Bout time Maven added some meaningful new features. I worry about: * People scripting builds, as it usually makes things a lot more complicated then (I see the standard plugins they used and I have a good handle on things work) * Everybody using a different scripting language to express their POMs, so there is this fragmentation as a result. I've been pretty happy with how fast Maven plugins come out when new features come out. I recently incorporated Google's ErrorProne quite easily.
&gt; Try to write small, fast and not resource hungry XML parser and working properly. Its very difficult task and in past 20 years I have seen maybe 3 libraries doing it properly. It's not like you have to worry about this. Maven parses it's POMs fine. &gt;It went to the point where its faster to use SQL database then to parse XML... No joke. With in-memory caches this isn't a surprise. Not sure what you're trying to convey here?
&gt; Multi-module projects, also a bright spot Maven has one hugely annoying misfeature in regards to multi-module projects: each submodule must specify the version number of its parent.
Glad to hear they're going through all open issues, think I have a half dozen out there and some even with code fixes to make it easy.
XML gets a lot of hate because it's been used everywhere regardless of whether or not it was appropriate. I wonder if 10 years from now everyone will hate REST for the same reason? How ironic that would be considering 99% of REST services aren't REST.
This clarifies much. I knew maven could work with plugins, I never realized it delegated all build behavior to plugins.
aren't spring-jdbc and spring-orm independent of each other. You either use jdbcTemplate and rowmapper, or use an orm solution ?
It was fresh project. 30 lines of code. 6GB of dependencies downloaded... Never again.
In my case it was fresh 20-30 line program for JavaCL. Ended up with 6gb of dependencies and most funny part: compilation failed :) And I ended up wasting over 40 minutes. When I did the same without Maven: I was able to finish the same task in matter of seconds and actually it did compile properly. Never again.
How about plain text config files like we do on UNIX for past 40 years? Simpler and faster.
Regardless, I was throwing out projects. I was curious if there are example apps or just webapps that have more complexity than the helloworld apps.
Well yes that is pretty bad. But it's not a maven problem. 
"Maven, the de-facto standard build tool for Java applications over the last couple of decades" What in the FUCK is this guy talking about?! Maven has never been a de-facto standard... hell, I'm not even sure you could say it's the most-used build tool for Java applications across the world today. Maybe it's the most-used in open-source projects, and even that I kinda doubt. And over the last couple of decades?! Looks like Maven started around 2001 (http://maven.apache.org/background/history-of-maven.html) and didn't rise to any sort of prominence until a few years after that... it's a SINGLE decade if we're being generous. Somebody's just got a raging Maven boner I'm guessing.
yea, any sort of plural decades talk around Java (or its echosphere) is a big smell. So much has changed in 5 years, let alone 10... etc. Not even to mention the Maven BS this guy says. Maven 1 was a train wreck. Maven 2 fixed a lot of crap, but it wasn't until the mid-late releases of Maven 2 that I felt it was really production worthy.
Mouse listeners within mouse listeners? you might be approaching the problem the wrong way. Take a look at the drag and drops tutorials [here](https://docs.oracle.com/javase/tutorial/uiswing/examples/dnd/). It's a bit difficult to use admittedly.
&gt; I was able to finish the same task in matter of seconds and actually it did compile properly. So you were counting the time to download the dependencies with Maven, and not when you did it without Maven?
&gt; I know they're called something different in maven. Are they targets like it make? Recipes? Playbooks? Stacks, right? Everything is a stack, so these are stacks as well. Maven is by convention (or at least was), so they are called dependencies or plugins. &gt; Too many tools. I'm learning too many tools at once and I don't get to use maven in my job role, so my knowledge of it is stale to say the least. It's good that you're getting a lot of experience with a lot of different tools. But you might want take the time to understand them along the way. At least temper your public judgement until you do.
Well, interestingly, I've seen the vote count go up and down, evidently for the massive downvoting the maven fanboys did, enough people up voted it back to bring it back up to exactly even again. I see many of the responses are the usual fanboyism - shaming tactics based on b.s., or a war of exhaustion throwing questions and statements out to try to silence the person through exhaustion in driving them crazy. Think I'll pass on that one. We managed jar files perfectly well - annoyingly but perfectly well - before maven. Maven is in no way required to get things running. All Maven does in the end (if you're using it for jar file management) is download the jar files just like you would. Also, there's no actual issues with keeping your jar files in your source code repository. We did it for years, it works well, it's no problem. When you have a multitude of different libraries you're importing, maven can help make that less messy. Then it's a question of which is more work. For us, using Maven was more work. It's a framework - if it creates more work than it reduces, it's poor and not worth using. If we hadn't had firewall and eclipse issues, things might have been different, but they weren't.
Perfect
I'd like to see mvn dependency:tree for this. I'm finding it hard to believe, since maven downloads dependencies based only on things your plugins or dependencies specify they depend upon. If true then something was wrong in the stuff you depended on, and once again not the fault of the tool but a misconfiguration.
"We're doing it differently because different is shiny" is an even worse development philosophy.
&gt; Maven has one hugely annoying misfeature in regards to multi-module projects: each submodule must specify the version number of its parent. Specify a property or use one of the plugins intendended to resolve this: http://stackoverflow.com/questions/17312681/maven-multi-module-project-version-management
Even better
Right, anybody that doesn't agree with you must be a fanboy unworthy of response. Any questions were there to try to figure out the basis of the unsubstantiated criticism. How else could I help if I can't even figure out why stuff is broken on your side? 
&gt; "We're doing it differently because different is shiny" is an even worse development philosophy. Maven has been around since March 2003 (12 years old).
I was asking because you cannot script with maven, you can use a tool that executes a script, but maven is not a scripting language.
That's kind of the point of it, it's declarative instead of imperative. You're describing what you want done rather than step-by-step instructions on how to do it. POMs have a standard structure and once you've seen enough of them they're a reasonably succint way to describe a project rather than having to read through a build script which could have any sort of format and idioms.
Yep. In the documentation, Maven is described as being, at heart, a plugin-execution framework. Rather than performing any build logic, Maven itself schedules their execution (the compiler needs to run before you can generate a jar file, etc), configures them from your POM settings, fetches dependencies as needed, and does other such supporting functions. Note that the `packaging` of your project (including the default of `jar`) is a shorthand for a bunch of plugin executions. For instance, the `jar` packaging configures your project to run the `maven-compiler-plugin` to compile your Java code, the `maven-surefire-plugin` to run its tests, the `maven-jar-plugin` to generate a `jar` file, and a few others. Though it is implicit, plugins are still doing all of the work.
I'm with you there. Changing the POM schema to be more open (toolchain settings should not be buried under `&lt;plugins&gt;`) and less verbose (XML has attributes; friggin' use them), and the plugin API to be less restrictive (why the hell can't one plugin configure others?), would be a better approach. We don't need to ditch XML; we need to use it properly. We *could* ditch XML, granted. There are other data languages that the POM could be represented in. But representing it in a *programming* language sends us straight into Gradle-like scripted-build hell. No thanks.
Unless it's a problem with a plugin pulling in all the deps, if you were to take a gradle project with the same maven dependencies, you should get the same 6gb since Gradle can resolve pom dependencies transitively in the same way. Alternately, if you had generated your project from an archetype, it's possible you *thought* you had picked a default, plain maven quickstart project but in fact you had created a huge dependency tree by pulling in a much more complicated one. That's as easy as a typo in archetype:generate's selection menu.
Yeah, that's exactly what I expected. Anything that's religion or politics - maven is apparently religion now - it's the same shaming tactics etc. Did someone ask you to help? No. Did someone suggest there was anything you could do to help? No. These are just excuses to try to attack anyone writing negative things from real life experiences. You may believe that the Church of Maven will resolve one of all their sins and bring peace and prosperity to their life, but it's track record remains poor and is unconvincing.