Java 11 is "too new" and the tools haven't all caught up yet. An ecosystem takes time to move. Some examples: * Eclipse support for Java 11 is done through a patch because the latest version doesn't support it out of the box. * Wildfly supports Java 11 only in their latest Wildfly 14 and even that requires configuration changes to work. * JBoss Tools added the Java 11 facet only in their (stable) 4.9 release 9 days ago. I'm using it in development and it's a bit of a pain because of the tools, but the Java release itself is good as usual.
And you skip jaxb going for module then to jar
.net core has native implementations on Linux and Mac too
Right, that'll save some time and effort.
Here's a nickel kid. Go buy yourself a real build system.
Seems available to me, 18.04.1 LTS asdf@ubuntu~ lsb_release -a No LSB modules are available. Distributor ID: Ubuntu Description: Ubuntu 18.04.1 LTS Release: 18.04 Codename: bionic asdf@ubuntu~ sudo apt install openjdk-8-jdk Reading package lists... Done Building dependency tree Reading state information... Done Suggested packages: openjdk-8-demo openjdk-8-source visualvm The following NEW packages will be installed openjdk-8-jdk 0 to upgrade, 1 to newly install, 0 to remove and 265 not to upgrade. Need to get 455 kB of archives. After this operation, 544 kB of additional disk space will be used. Get:1 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 openjdk-8-jdk amd64 8u181-b13-0ubuntu0.18.04.1 [455 kB] Fetched 455 kB in 3s (169 kB/s) Selecting previously unselected package openjdk-8-jdk:amd64. (Reading database ... 319435 files and directories currently installed.) Preparing to unpack .../openjdk-8-jdk_8u181-b13-0ubuntu0.18.04.1_amd64.deb ... Unpacking openjdk-8-jdk:amd64 (8u181-b13-0ubuntu0.18.04.1) ... Setting up openjdk-8-jdk:amd64 (8u181-b13-0ubuntu0.18.04.1) ... update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/appletviewer to provide /usr/bin/appletviewer (appletviewer) in auto mode update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jconsole to provide /usr/bin/jconsole (jconsole) in auto mode asdf@ubuntu~ java -version openjdk version "1.8.0_181" OpenJDK Runtime Environment (build 1.8.0_181-8u181-b13-0ubuntu0.18.04.1-b13) OpenJDK 64-Bit Server VM (build 25.181-b13, mixed mode) 
&gt;How well received is Kotlin in this ~~sub~~"Java vs C#" thread? About as well as Scala is received in "Kotlin vs Java" threads.
Sorry for being pedantic, but while Oracle JDK has been built on OpenJDK codebase since 7, there has been some significant differences between the Oracle JDK and the OpenJDK builds, which might have hit you depending on what you're doing: different rendering engines, no commercial features (JFR etc), no JavaFX etc. Many programs have worked just as well on OpenJDK as on Oracle JDK, but not all, so there's undeniably been some uncertainty in the air. With JDK 9, 10 and finally 11 we've seen a gradual move to open source of all the proprietary features. In 11 the OpenJDK and Oracle JDK binaries are effectively the same, meaning that applications should behave exactly the same on either, down to how fonts are rendered in UI applications. Only reason to pick Oracle JDK over OpenJDK now should be to pay for support and updates past the release of 12 (and of course to sponsor the continued investmentment in OpenJDK ;-) Disclaimer: I work on OpenJDK @ Oracle) One tiny exception to the above - only one that I'm aware of off the top of my head - is the usage tracker feature, which is in Oracle JDK but not OpenJDK: https://docs.oracle.com/javacomponents/usage-tracker/overview/toc.htm#JSUTO-GUID-6642AAD5-85A1-462F-9D77-09A52DF72404 )
C# won’t run on my mainframe. Java will :)
There is no such thing as "Hotspot based OpenJDK" and "OpenJDK with Eclipse OpenJ9." OpenJDK is a JDK; one of the central components of a JDK is the JVM, and OpenJDK's is called HotSpot. When you remove HotSpot from OpenJDK, [it is no longer OpenJDK](http://openjdk.java.net/legal/openjdk-trademark-notice.html). Similarly, if you *add* significant stuff to OpenJDK (like another JVM), [it is no longer OpenJDK](http://openjdk.java.net/legal/openjdk-trademark-notice.html) (let alone if you do both). So there's just "OpenJDK", and "a different JDK based on the OpenJ9 JVM and on the Java library sources of OpenJDK".
Gradle's build scripts are in Groovy or Kotlin, with full IDE support.
so true, linq trying to be like SQL is stupid. Why recreate a new name for 'flatMap' to 'Select' for example which is not a functional programming concept. 
Not to mention a long list of improvements to the underlying VM, which will benefit you whether you use Java, Kotlin or some other language. 
&gt;That's not true. You have always been able to create your own thread pool if you don't like the default one. &gt; &gt;If you are using Task (which you really should be in modern C#), you can also create your own implementation of TaskScheduler , which is basically your thread pool. \- Java provides default threadpool implementations, like cached, fixed, forkjoin etc. \- If I wan't something like durable threadpool, which serializes runnable and resumes or distributes workload without changing my existing executors logic, its hard with C# ( something what Apache Ignite does ) &amp;#x200B;
&gt;While basically true, that's not completely accurate. &gt; &gt;.NET does have two different GCs, desktop and server. You can also override the GC behavior using code. This includes outright suspending the GC while critical code is running. There are also events so that you can temporarily remove a .NET server from the load balancer during GC. There are others like Redhat's Shenandoah, Oracle's ZGC which are compacting and low pause GCs, suitable for low latency and low memory footprint applications and G1 for throughput.
&gt;That was true a decade ago. Now I almost never see commercial libraries in .NET projects except for some UI components such as grids and charts. Its still there, it depends on usecase, when you want high performance solutions, like schedulers, database drivers, queues, embedded storage solutions, all stuff have paid versions to be useful, which usually not the case and available in apache projects space. &amp;#x200B;
&gt;Nope. Not going to believe that one. Still too cranky about them changing JDBC interfaces on me between versions. &gt; &gt;Of course there is the DateTime.Kind problem in C# that broke countless applications, so MS isn't off the hook either. Limited to JVM and standard API only, like class versions, and supporting old libraries, things like running dusty JARs with new versions in Java 9 through modules. Its doesn't work out for .Net &gt; .Net Core ( not worked for us ) and its not free for migrators. &amp;#x200B;
In our company, we are finally finishing the upgrade to Java 8, these days :-D. We do banking software so everything is a bit late here. Java 9,10,11 have some nice new feature but I don’t mind, the upgrade from 7 to 8 is great, too.
Shouldn't your IDE *show* you what the operator does?
If you don't want to wait, some other JVM languages (I know of at least Scala) have tuples and destructuring.
CompletableFuture and the Stream interface allow me to orchestrate concurrent tasks so fluently this wasn’t so easy upto Java 8
This is how Microsoft has always made their money. The quality of the stuff they sell varies, going from stellar to horrible, but they have a knack for packaging and marketing that allows them to make money where others would fail. 
&gt;Denied by design after research into C++ found that it's a huge source of bugs (along with `goto` and fiends). No. Idiots are the source of those bugs. You don't fix that by removing language features; you fix it by removing the idiots. Operator overloading is very very valuable, as anyone who's used `BigDecimal` can attest.
How? You need to click the operator and look into its implementation, as with every method. There is no functionality that can show the behaviour of any operator, that is usually knowledge you need to have about the language. 
for a long time, java created and C# improved java creation. But now it's mainly a matter of money. Java project is almost free.
Competitive with? I thought JavaScript was slower than Java.
If /u/VGPowerlord works at a large company, you'd be surprised. I fight daily with our architecture group that wants to keep paying for Oracle because "it's what we've always done". My brain hurts. Oh also, they want to migrate to Java 9 and 10 first. Thankfully I'm winning that battle.
Yes but I mean Graal can run *javascript* competetively with V8. Sorry if I was unclear.
Maturity, cross-platform GUIs, better build tools, etc.
This is the main benefit of upgrading even when no new big features get in.
&gt; For me the end user I'm still needing JRE until the developer converts the app to v11. Why?
Well that's the point. There is less code I need to look up because it already know the implementation.
&gt; For me the end user I'm still needing JRE until the developer converts the app to v11. Why do you think you need a JRE? &gt; jdk doesn't have a Java settings panel like the JRE does The Java settings panel is no longer available. If you say what you were using it for we can advise what to do instead. &gt; It looks like I'll be staying with v10 until the app developer recompiles. You don't need them to recompile to run a Java 10 app on Java 11 - it should (in almost all cases) just work as it's binary compatible. The bottom line is: forget all about the JRE. Developers and users need a JDK, unless the developer gives you a special package they've made using jlink, but if they haven't use a JDK.
Maybe I’m confused...I’d thought C# was non-commercial. It pairs well with commercial products like VS, but technically free. 
We're waiting for the tooling to catch up. The removal of wsimport is a right dick punch...
So what? Instead of learning what overloaded operators do, you have to learn what methods named `add` and `remove` do. How is that supposed to be an improvement, exactly?
That's very condescending of you. I'd argue that language features can indeed be the source of a great many bugs if improperly designed. Running into those bugs doesn't make anyone an idiot. Best example is null, which is a giant source of bugs without proper language support. That's something the C# people recognized and are partly fixing with the next release and it's stricter null checking at compile time. So I'm very happy the Java team didn't blindly add just any random feature to the language just cause why not. In fact that's the impression I often get from C# which has several features that I find hurt you more than you gain the way they were designed, e.g. the above-mentioned out and ref parameters. Though I admit I don't know their process for language extensions so maybe they put more thought into this and I just don't get it 😉
I think you’re trying to say you replaced Spring WS with Axis2... Axis2 isn’t a replacement for the entire spring framework and ecosystem 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
And Clojure
Birth by a thousand butterfly kisses?
They dropped WebStart, so we can't switch until/unless we decide to put in the effort to implement an alternative.
I’m not a gamer but I wanted to say “Bravo!” I’m a Java developer and have gotten pretty tired of hearing many of those false claims. A couple months ago, I actually had a discussion with a Python developer about how Java is a dying language. Good job!!! I hope this effort continues!
All I have to say... Great job dude.
It's the sort of thing that maybe had a basis 10 - 15 years ago but still floats around now. Like the language being very verbose (it still is in some ways but not compared to what it was). Share the frustration
http://dilbert.com/strip/1995-06-24
If your architecture group are determined to pay for updates may I suggest they take a look at what Azul (full disclosure, I work for them) can offer? A much more reasonable price :-).
ASM 6.2.1 works fine with 11. What is experimental is the new bytecode introduced in 11 (ConstantDynamnic). Libs not using those features are fine. You don't need 7.0 to work on 11, only to use 11 features.
It's early, I've only had 4 cups of coffee so forgive my denseness, are you saying your comment was a joke and that you agree Ant + Ivy is a good system or you don't think it is but don't actually have a reason?
Except for maybe first (idk), you list language features, not standard library.
Just use the method syntax. 
Personally, I don’t care about the verbosity of the language. The “Write less code with &lt;&lt;word salad&gt;&gt; language” holds no water with me. I do agree, these myths probably are rooted in the early years. I was a CS major in 2001 studying Java 1/2 and remember it being reeaaaallly slow (though that probably had as much to do with the slow Sun machines as it did with the language). After graduating I went into a different industry and then got back into development in 2015 and asked a friend “Is Java still so slow??” :-)
Personally, I don’t care about the verbosity of the language. The “Write less code with &lt;&lt;word salad&gt;&gt; language” holds no water with me. I do agree, these myths probably are rooted in the early years. I was a CS major in 2001 studying Java 1/2 and remember it being reeaaaallly slow (though that probably had as much to do with the slow Sun machines as it did with the language). After graduating I went into a different industry and then got back into development in 2015 and asked a friend “Is Java still so slow??” :-)
JetBrains Rider is pretty good. Been using it for my private C# application I'm working on occasionally and prefer it over VS.
It's not quite the same though. Atleast in Python it allows me to call a method with parameters in different order by naming them. Useful for varargs too.
In Java you are less required to wear suits and work for SAP / consultant companies.
GraalVM with native images doesn't use HotSpot, but rather SubstrateVM. You trade HotSpot advantages (as the above mentioned recompiling on the fly) for instant startup times with low memory overhead. This is not an end-all for the Java ecosystem, but another tool to look for if you for example run on Docker. 
That looks cool. Good work! 
To see Clojure as second by popularity after Java on JVM is surprising for me
Think that's a bad example, since IEnumerable/IQueryable with extension methods seems a lot cleaner implementation. 
Quite understandably given that Java only got a JIT in the version 3 (1.3), so interpreted did it ran. 
Whether it's better for design may be debatable, but Java attributes are also much more powerful. Couldn't really make a Lombok equivalent in C# without adding some hacky IL weaving to your build process. 
Can you explain more of what you mean with the &lt;?&gt; operator? 
&gt;Entity Framework is popular too. That doesn't mean it is a good library. You misunderstand, I'm saying Spring because is a good (I'd argue even great framework/community) has done a lot to maintain *Java's* popularity. &gt;Java deserves better than Spring. It deserves something that takes advantage of Java's static typing rather than failing in unpredictable ways at runtime. That makes no sense whatsoever. Spring in no way shape or form subverts Java's static typing. That literally isn't possible. Everything you are saying strongly suggests you don't have a good understand of IoC/DI and/or are badly misusing Spring by throwing annotations haphazardly across your applications "until it works". It would be impractical and impossible to enforce IoC/DI responsibilities at the compile time level. And while startup is part of runtime, it is universally seen as a special/unique part of runtime. So saying an application "fails randomly at runtime" implies you have an application running along in production and then, "because of Spring", it starts throwing exceptions/failing. OTOH failing fast (i.e. failing at startup), is generally preferred. 
If it's any consolation, my team is currently split between pushing for Azul and the OpenJDK. You may get a new client soon lol.
You shouldn't be doing anything. You should run the app the developer gives you, which should include the JRE the app requires to function.
Wow this is really cool
This is not accurate, there were JITs even before 1.1
Oh man, jre vulnerabilities paranoia. Vulnerabilities do not appear just like that out of nowhere. There has to be a vector, a certain way a particular piece of software can be exploited. Applets were are very vulnerable exploitation vector. But if your browser doesn't load the applet plugin, you're fine, you're safe, there's no vulnerability since the browser itself doesn't know how to run applets. There's a very very very high chance that that 1 year old JRE is fine and that it will not expose you to any vulnerabilities. Really. Just do what the developer tells you, don't worry about it. 
People hate java because it's very verbose. But you know what, I like how java is written. It's better to know what type of a variable is rather than just putting an "auto" or "var" in front of it. I know java has introduced a "var" but I am against these changes. Type inference comes with a cost and I think if you don't know the type of a variable, are you truly a developer?
What about providing an example to those JITs? 
Right now our build fails when the ClassVisitor.visitNestMemberExperimental method is called... As long as the library doesn't enable the experimental features introduced in Java 11 even working with old code can break functionality.
Should've written proper word, its called wildcard ( unbounded wildcards which I wanted to mention ) in generics [https://docs.oracle.com/javase/tutorial/java/generics/unboundedWildcards.html](https://docs.oracle.com/javase/tutorial/java/generics/unboundedWildcards.html)
I couldn't agree more. People wheel out some obscure example where Sun created a method called "FactorySingleltonMethodConstructorInstance()" or something in some library, and claim it makes the whole of Java verbose. And I'm no fan of var, as it means you don't have to drill into a method to see what it's return type is.
I cant think of something I really, really need from Java 11 that would outweigh all the updating. Java 8 does everything I need. 
I always wondered where the hate from Java comes from. I always thought it to be newer, younger developers who want to do everything in node.js or some crazy oop php. It's even weird for me to consider that Java gets hate when most universities still teach data structures &amp; algo in Java or C++. Shrugs.
The [java performance](https://en.wikipedia.org/wiki/Java_performance) wikipedia article includes citations for the Symantec JIT being included in Java 1.1 though it existed earlier as a standalone product for 1.0.2 There was also Sun's Exact VM and other JITs available before HotSpot became the default in 1.3
**Java performance** In software development, the programming language Java was historically considered slower than the fastest 3rd generation typed languages such as C and C++. The main reason being a different language design, where after compiling, Java programs run on a Java virtual machine (JVM) rather than directly on the computer's processor as native code, as do C and C++ programs. Performance was a matter of concern because much business software has been written in Java after the language quickly became popular in the late 1990s and early 2000s. Since the late 1990s, the execution speed of Java programs improved significantly via introduction of just-in-time compilation (JIT) (in 1997 for Java 1.1), the addition of language features supporting better code analysis, and optimizations in the JVM (such as HotSpot becoming the default for Sun's JVM in 2000). *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Exactly, verbose is not a bad thing. Type safety is important!!!
&gt; Wildfly 14 Do you have a link to the changes needed to Wildfly 14 ?
What I mean is. When using a JWT, it is still in essence a user’s session, except it lives completely client side (stateless session). In standard server side session apps when a user logs out, you confidently destroy the session in storage and hopefully destroy the client side tracking but that's kinda a redundant action. Regardless 99.999% of the time you are confident that user is logged out because you destroyed the data you control. With JWTs you cannot do that. Once created they live indefinitely. No matter which action you take to destroy it client side you can't in confidence say it is gone. So it requires a lot more understanding from developers about how JWTs are being used and should be used by their application to maintain customer security. Long and short, I think JWTs are great. I also think this article spent a lot of time talking about the benefits of JWTs and no time talking about the dangerous side-effects. 
maybe from gradle? but kotlin is winning there too
Thank you for clarification, it's a nicely written and very useful article.
We are waiting on decision to use either of Oracle or OpenJDK. Other than that there's a couple of libraries and tools we are waiting for (Spring Boot 2.1 for instance).
&gt; It would be impractical and impossible to enforce IoC/DI responsibilities at the compile time level. No its not. I do it all of the time. The trick is to hand-roll your dependency injection code instead of relying on a framework to do it. That may sound insane, but the amount of code needed to setup the aggregate root by hand is often just slightly more than the amount of code needed for a framework. 
Are you saying that JDBC isn't part of the standard API? As for .NET Core, it is best thought of as a different platform. Just like you don't try running J2EE libraries on J2ME. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/9ozj16/java_code_injection_in_another_java_process/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
```IntStream.of(data).filter(x -&gt; x &gt; 5).sum();```
Oh my God yeah. `var orderedList = input` `.OfType&lt;ChildClass&gt;` `.Where(object =&gt; object.state.passesFilter())` `.Select(object =&gt;` [`object.Property`](https://object.Property)`)` `.OrderByDescending(property =&gt; property.uniqueId)` &amp;#x200B;
Oh my God yeah. var output = input .OfType&lt;ValidClass&gt; .Where(object =&gt; object.state.passesFluentValidation()) .Select(object =&gt; object.doSomeStuffFluentMethod()) .OrderBy(object =&gt; object.id) &amp;#x200B;
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'll bet it is really good considering who makes it, but it's not free, and my company only buys us VS for .Net work.
Write less code and take 4 times longer to read it. Since coding is about 80% of code reading I prefer verbose languages.
I'll bet it is really good considering who makes it, but it's not free, and my company only buys us VS for .Net work.
&gt; My brain hurts. Well, that's how the development of OpenJDK is supported. Oracle (where I work) pays for hundreds of full-time OpenJDK developers. 
&gt;The project I'm currently working on now is using Ant and the build.xml is 1.3M. One. Point. Three. Megabytes. It's built from 95k of xslt. And this is the new, improved build system for the project. The previous one was worse. I can certainly sympathize, an Ant build that large is obviously way over engineered. That sounds like it exists because it could, not because it was needed. &gt;In many simple cases, a pom.xml just needs a group, artefact, version number, list of dependencies and nothing more. The funny part here is this is exactly how Ant works for me. I have an Ant build.xml file that I have used for projects for years. I fill out a build.properties file that it reads in for projects and fill in an ivy.xml file for dependencies but that's it. My build file has setup (process Ivy dependencies), clean, compile, test, doc, jar, war or package (build a stand alone runnable jar) tasks. That's pretty much it. Funny thing about Gradle is originally (not sure about now) it was simply Groovy scripts invoking the same Ant tasks instead of the XML script. 
I hate unity though. dont use this shit engine for your game please (if it has a minimum amount of complexity). a simple isometric cprg (pillars of eternity 1/2, pathfinder kingmaker) has worse loading times than ac:origins, which has orders of magnitude better graphics.
The JVM isn't dying. That's what's always been great about Java anyway.
&gt; Simply upgrading ASM doesn't work But that has always been the case that to use new features you needed to pass the asm api version e.g. Opcodes.ASM6 to ClassVisitor So far both ASM and Javassist seem to work fine in Java11 and we have tested the required use-cases for condy and nestmates with only small modifications needed that have been fixed upstream.
Fair enough
&gt; A couple months ago, I actually had a discussion with a Python developer about how Java is a dying language. Ask him if they solved the GIL problem yet ;)
If you’re “hand rolling” your DI code that provides even a tiny subset of the features spring core does you are simply writing your own DI framework. If you’re doing DI correctly it’s not a trivial amount of code like you make it out to be. It sounds like you are implementing a factory pattern and conflating it with dependency injection... 
Amen. 
There is no single link with all changes because it depends on what you are using. Do you have a specific problem?
For me personally, the lack of a JRE is a showstopper. I write multiplatform GUI software for non-technical end users. They can download a click-through Java 8 JRE installer from java.com without too much difficulty. They cannot (for the most part) download a ZIP of the current OpenJDK and correctly install it, including setting paths etc. According to Oracle, the Right Way for me to distribute my application is to build a custom binary with a bundled JDK subset for each platform, which means I now have to maintain three build environments on three different platforms, two of which I don't have a license for and one of which I don't have the hardware for. So unless/until some friendly third party comes along with a very user-friendly OpenJDK 11 installer, I have to stick with Java 8. Which is a shame because I'm very keen on a lot of the new features.
&gt; you fix it by removing the idiots. If that was ever possible in any situation, in general... How do you "remove idiots"?
And how many people were buying Java compilers from Symatec and Sun in the early days? JIT compilers in Java only became a thing across the mainstream with Hotspot's inclusion on 1.3.
How is Gradle related to Clojure? Gradle was all about Groovy, but now it supports Kotlin as well, indeed.
A lot of hate also comes from the lag caused by the GC, which can be avoided with careful coding and configuration most of the time.
Just a multiplayer FPS engine. If you are looking for a game engine, take a peek at jMonkey.
[https://www.udemy.com/java-the-complete-java-developer-course](https://www.udemy.com/java-the-complete-java-developer-course)
No, i am currently running on WF 14 with Java 10, and I might test with 11 soon.
Every time I have to do linear algebra in Java I die a little. You certainly \*can\* end up with weird, inscrutable behavior if you do crazy stuff with operator overloading but...just don't do that. It's super nice for some things and potentially harmful if misused, like any tool. 
No, it displays the name of parameters in line, which really isn't the same thing.
My God man, what do you got going on in there? My ant script is about 5k. I also have an included ant file with my macros defined in it again about 5k. And my ivy file is like 1k. In my case, I've got about 30-40 projects with very little changes between. Not sure if it makes a difference, but I have my own local ivy/maven repo.
Neat. I've always wondered how multiplayer works in well, any language.
You can use factory objects without any dependency injection. They are not the same thing. 
Should you have to rely on an IDE to understand what a piece of code is doing?
As long as you handle ByteBuffers correctly in the memory you're good. Keep doing this great work!
The key to the complaints might be in this statement &gt; I've spent many, many hours trying to debug it to no avail IoC and dependency injection make debugging a lot harder than just having code that creates instances of objects from specified class as it needs to. With DI you have to figure out from the build manifest what class is being used at runtime so you know what code to go look at. If you're lucky and have a logged stack trace you may be able to identify the class being used but if it is a logic problem and not an error situation, you may not have a log entry to work from. 
True, but I don't see why being able to bring the parameter out of order should be anything useful.
I'm in the United States in the DC area. I'm talking 15 to 25 hours per week.
I'm in the United States in the DC area. I'm talking 15 to 25 hours per week.
wow lots of koolaid drunkers in this post
/r/learnjava and there the *sidebar* in *old reddit formatting* -&gt; Free Tutorials You are asking this in the wrong subreddit.
Before 1.1, indeed a small number of people were using JIT with Java. By 1.1.6 a JIT was included and enabled by default (earlier for Solaris/Sparc). JIT was entirely mainstream by 1.2 [JDK 1.1 Highlights](https://en.wikipedia.org/wiki/Java_version_history#JDK_1.1) [JDK 1.1 Developers Guide](https://docs.oracle.com/cd/E19455-01/806-3461/ch1intro-3/index.html) [Java 1.2 Press Release](https://web.archive.org/web/20070816170028/http://www.sun.com/smi/Press/sunflash/1998-12/sunflash.981208.9.xml) The introduction of HotSpot was **not** the first appearance of JIT for Java.
True. My main point is that the latest released version of ASM (6.2.1) only has experimental support for the new features and ASM 7 is still a beta version. So unless a library enables the experimental api version we have to wait for the next ASM version and for libraries to use that version.
 I stand corrected then.
&gt; When using a JWT, it is still in essence a user’s session JWTs are used to store authorization claims in a way that can be validated by resource servers themselves, so that they don't have to go to an auth server to validate the token. You should never store session data in a JWT token. &gt; you confidently destroy the session in storage and hopefully destroy the client side tracking but that's kinda a redundant action. You don't need to do this with JWTs, which are simply a token format for something like OAuth2. JWTs have an expiry date, and a refresh token must be used to get a new JWT. To implement logout, all you have to do is invalidate the refresh token (which is not a JWT). &gt; Once created they live indefinitely. No matter which action you take to destroy it client side you can't in confidence say it is gone. The JWT should not store sensitive information, so it doesn't matter if the JWT is "gone". All that matters is that the JWT is not accepted after it has expired, and also that the JWT is not accepted if it has been tampered with. &gt; So it requires a lot more understanding from developers about how JWTs are being used Don't roll your own security. That applies as much to stateful security as it does to stateless security. Think about how many security vulnerabilities there are due to mishandling of session IDs. But stateless security does add a lot more complexity, and should only be used when you can't actually share state, such as with microservices or SSO. For standard web apps, JWTs add pointless overhead, since the client has to constantly refresh the token. With session-based security, you can simply pass around a session ID.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Type safety has nothing to do with type inference JSYK and Java has "var" now.
This is why I don't like the enterprise mindset. You should have to provide reasons for adding a dependency, not removing one.
I tried to use Java 11 in my projects but a lots of things just crashes. Maven throws Exceptions, Tomcat won't start. It will need some time before everything is polished up to work flawlessly with it.
Yes, typically a trick used with Java is to have your game's main menu to display a 3D scene to help the JIT in optimizing your game engine. There are many good practices to help your gaming experience in Java.
Writing a bunch of boilerplate code to avoid importing a jar is a really really bad principle. Avoid dependencies where it makes sense absolutely, but spending time to reinvent the wheel in order to avoid a dependency is not a reasonable use of project budget in virtually any setting, big shop or otherwise.
"After 3 year you become a senior" Okay okay... nice senior
That is a valid complaint but let’s be honest, how many times have you had to debug a problem involving an IOC container be it spring, guice, CDI, whateves that you didn’t ultimately end up finding the root cause for? It might make debugging harder but in the end this isn’t a viable reason to avoid IOC.
Then simply use spring or a cdi container with annotation based configurations. If you declare a class that doesn’t exist in your bean config the compiler will complain...
This is nothing more than my ignorance being shown off...but when I created a .net core project on my mac, unless I told the IDE it was a Console application and not a library, I could not get it to execute a main method. Would this still be a dependency on the csproj file?
&gt; if you don't know the type of a variable, are you truly a developer? wat?
Infrastructure / libraries / frameworks / support / free tools and I think most importantly a ton of devs that learn it as their first language. In the company I work with almost any backend developer that is hired comes from an environment that uses a similar setup to ours, which makes onboarding cheap. I am not an c# expert but it often gets described as Java but without the flaws and most Java devs will be okay with accepting it as a better language. But jvm is just a more productive ecosystem it seems. Now that kotlin is coming along especially. Also the big cloud companies (Netflix at the front) will open source all their stuff and write tons of blog posts about their stack and its "easy" to follow their example when literally every component is available for free. 
Thanks. I don't use any ByteBuffers myself, although JME (which my engine is built on) probably does.
Thanks. I can't create 3D models myself, so I'm limited to what I can find on the internet. That low-poly human is the closest I've come to finding something that I can use as an FPS avatar. If you know of anything better, please let me know. :)
&gt; Straight from OPs post Yes, JWTs can be used to securely transmit claims (as in tamper-proof), but we are talking about a specific usage, which is auth. &gt; Many OAuth2 implementations use JWTs but they are separate specifications and have now bearing on each other. Yes, but the subject is token based security, and how JWTs are used as a security token, in which case, you necessarily have to bring in a token based security model, like OAuth. &gt; Refresh token is not required with JWTs. Not required, but practically necessary. You need a token that can be blacklisted for logout to work, and that can't be the JWT, because that would defeat the purpose of a JWT. &gt; Expirations also means jack shit if set too long Exactly, which is why it should be short enough to limit the usefulness of a stolen token, but not too short, so as to usefully reduce the number of refresh requests the client has to make. &gt; This is a shitty answer. There are so many scenarios where that is not possible. Obviously. But when someone says "don't roll your own security" and "don't roll your own crypto" is that it is very easy to get it wrong, and you should first consider a tried and true approach, and only resort to rolling your own if you absolutely must, and then make sure you know what you're getting yourself into. After all, it is super easy to get session based security wrong. 
Great job man
For me it is all about "I don't want to have to write this ever again". Coding is a hobby now, not what I get paid for. (Though I used to get paid for it, and have a CS degree.) So I don't get 40+ hours a week to keep on things, and when I write something with 50,000+ lines of code I want it to be able to last a good 20 years. The two languages that give me that longevity are Java and C89. I can run Java on big computers, small computers, Linux, commercial Unix, Windows, and someday I will get around to Android. The standard library is decent and since about 2005 reasonably well-behaved. The rare times I need more syntax sugar than plain old Java I can turn to one of the other JVM languages like Clojure to fill in. C# isn't there yet. Back when I was paid to program, Microsoft EOL'd Visual Basic 6, and having seen that actually quite promising-at-the-time ecosystem die off, I will always wait on a Microsoft technology to be not-fully-controlled-by-MS before I will put any of my hobby time into it. 
$5 says he's Indian
You'll probably need to add java.se to the module path in the JVM arguments.
how come Gradle isi related to Clojure ?
So here's a naive question. How do I actually develop anything with OpenJDK 11? I have linked my path variables to JDK 11 and typing "java --version" into cmd reflects that my Windows environment sees JDK 11. I have Java 8 JRE installed, but when I launch Visual Studio Code it just hangs now When I launch NetBeans the application tells me it can't find a JDK and quits. I want to start playing around with Java 11 but can't seem to find an environment that even recognizes it!
This is amazing, man
Ok I can see that might be useful, but not really a game changer, like at all. Other characteristics of a language are far more important.
Yeah, it probably would not make my top ten list of things I wish java had, were I to make such a list.
then again people seem to hype up Vulkan which in terms of verbosity is so much worse than java.
My only complaint here is that I can't star your project because you aren't using gitlab or github. I don't use bitbucket. &amp;#x200B; I'll definitely be keeping an eye on this though. I'll have some fun playing with this at some point.
My company is upgrading to 11. Specifically, OpenJDK 11. Security patches are going to stop for Java 8, and Oracle is changing all this licensing stuff. We may not care about the features, but the patches and licensing terms are enough to motivate an upgrade.
It could be objective C verbose (:
Why do you trust `Integer.add(Integer, Integer)` does what you think it does? At a certain point you have to assume the other guy wasn't an idiot.
&gt; Denied by design after research into C++ found that it's a huge source of bugs Garbage collection solved the bugs C++ had with operator overloading. The problems were all about lifecycle management.
&gt; The goal of printList is to print a list of any type, but it fails to achieve that goal — it prints only a list of Object instances; it cannot print List&lt;Integer&gt;, List&lt;String&gt;, List&lt;Double&gt;, and so on, because they are not subtypes of List&lt;Object&gt;. To write a generic printList method, use List&lt;?&gt;: public static void printList(List&lt;?&gt; list) { The .NET solution is co/contra-variants. public interface IEumerable&lt;out T&gt; public static void printList(IEnumerable&lt;object&gt; list) { 
&gt; for example Java enums are much better and useful than C#. I have to disagree with that. Yes they are useful. I would love to have Java style enums in C#. But we also need normal and bitflag enums like C# currently has. They serve different roles.
I don't think Java per sé is as much verbose as the devs make it be. Java gurus like to make 10 factories that implement 20 builders that have 30 interfaces and a tub of spaghetti. &amp;#x200B; If you want you can have awesome APIs that are easy to use. Look at OkHTTP vs ApacheHTTPClient, or at Jooby/Spark vs Spring.
Mono is not a "compatibility layer". It is just another VM no different than the many OS-specific VMs that Java uses.
The design is flawed I think. You really don’t want to have to hit a web service 20,000 times if you don’t have to. I would first try to integrate with the database behind the web service you’re hitting if at all possible. If you really need to do this, look into a project called Spring Batch. 
The FPS engine is built on top of JME, which will do any 3D you tell it to. The models are the best free assets I could find on the internet. If I was able to procure 1000-polygon models, it would look a lot better. My code is the networked FPS engine on top, which does everything over and above the 3D graphics that is required, e.g. networking, client prediction, lag-compensation, position interpolation etc...
Proxy classes at very minimal overhead: YMMV, but [A proxied class adds approximately 500ns to the transaction](https://spring.io/blog/2007/07/19/debunking-myths-proxies-impact-performance/). In the real-world if you are doing a database query that takes 1ms (which is insanely fast for a database query that might include network time) and wrap that query in some sort of logging or @Transactional AOP that takes 1000ns, you're adding an extra 0.001% overhead. The math they provide: &gt; 100,000 proxy operations * 500 ns per proxy operation = 50 millisecond It's something that I would really only be concerned about if you are performing millions or billions of 1ms transactions per second and really needed to squeeze every bit of performance out of it. If that's the case, you can look into something like Aspect4j, which can use bytecode weaving. Using bytecode weaving, you can reduce the overhead to &lt;10ns. Bytecode weaving via Aspect4j also allows you to wrap private methods and non-bean classes. You can do really weird stuff l[ike wrap constructors, assignments, static initializers, and other areas normally off-limits to Spring-based AOP](https://www.baeldung.com/spring-aop-vs-aspectj).
I'd be expecting public static void PrintList&lt;T&gt;(IEnumerable&lt;T&gt; list) though that's mostly for idiomatic symmetry. Feels equivalent to the wildcard generic type parameter. Not sure if it's effectively any different. 
It's a 2 team project, team 1 is in charge of a Middleware which is supposed to bring all the work but they couldn't do it so instead of a batch process they threw in an individual one. 
Minecraft is in Java and it was fast enough that everyone bought it. You can talk smack about something as much as you want but people willing to pas for the product shows that this "performance" that java delivers is not a reason to not buy a game made in java. also cool project but libgdx and jmonkey exist which already shows that java is just fine for the job. 
In this situation I would probably offer to write a new endpoint for the other team that processed batch jobs, or offer to setup a Kafka queue. Sometimes it takes crossing team boundaries to get real work accomplished, but that really depends on your work culture.
In M my opinion, the problem should be in the time that take the webservice. Are you monitor the time before an after the call? By the way, I guess that you have and entity with id generator based on sequence and your save the entity in batch 
Are the senior, mid or jr terms still valid? ... I can write thrash code for 5 ..6 years and become a senior? 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt;even a tiny subset of the features spring core does There's a large part of the problem with spring. I'm bringing in way too much complexity just for some DI, which is a simple thing.
???
Well that seems like the easy decision. If you are already paying for support because you need it then keep paying for support.
Yep that is basically it for Wildfly. I just migrated from Willdfly 11 to 14. I'm still rocking Java 8 though due to some issue with eclipse, but I was able to test everything on Travis with java 11 and it runs fine.
100% agree. I worked a bit in C# in 2016 for a few months. The ecosystem, libraries, package management, everything seemed like a hungry somalian child that has been dropped on the head by its parents. It was pathetic. The language C# is quite nice though, I can totally appreciate it.
Or dependency management. 
I had that opinion until I really started to develop on Java and I have to admit I was wrong. And I think a lot of bad reputation is because minecraft. The problem there, is not Java it's the concept of the game itself, I've seen clones made on c and c++ and guess what... The all have the same issues that minecraft on Java has. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I honestly reference this at least monthly. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; IntelliJ I honestly don't know enough about the other things you mention here to comment -- but how does IntelliJ best Visual Studio? Again, surface level, Intellisense and lots of shortcuts are very nice, and in my limited experience IntelliJ doesn't offer the same convenience.
It depends, I think it’s all about the signal to noise ratio. Repeating stuff unnecessarily doesn’t make the code more readable. E.g. the diamond operator reduced verbosity and improved readability.
Well that's not nice I'm just trying to help out a fOSS project looking for some help
Oh man. There are so many things. Just a few off the top of my head... There's an indicator in the gutter for inheritance. You can easily traverse up and down just by clicking that little guy. Let's say I have locals int patientId and int orderId. Now I'm going to call some method that has the signature (int patientId, int orderId). Intellij figures that out, and in the intellesence-ish popup is the option to just fill it in with my local vars when making the call. I can create some private members and tell the IDE to generate ctors, getters, setters... It can generate hash, equals, and toString methods easily. Sublime-text-like fuzzy matching for opening files or classes. All of this is available in the free version. No extensions or anything. &amp;#x200B;
For ddbb improvement, take a look to this article https://medium.com/@jerolba/persisting-fast-in-database-1af4a281e3a. 
What's GIL problem?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
As a fan of Java it's great to see projects like this that you usually don't see. If I could offer a few suggestions it would be to showcase more of the things that seemed like highlights of your project. Show how well your engine performs with many objects on screen, networking features/performance, and even lighting. You don't need extravagant models and hi res textures to show most of these things. With a good light rendering pipeline alone a game with some basic shapes can look pretty amazing.
Global Interpreter Lock. Python has multithreading but it doesn't actually really 'work' in the sense that you can utilise multiple cores well. 
Not all developers are employees, there are many freelancers. Besides, you're trying to dictate company policy with language features? In what world does that work in your mind?
&gt; Yep that is basically it for Wildfly. Depends on what else you need. If you use Jackson there is another [issue](https://developer.jboss.org/message/984937#984937), for example. &gt; I'm still rocking Java 8 though due to some issue with eclipse What issue?
Hmm, interesting point of view
When you have adapter pattern with abstract classes, where adapter base looks something like `AbstractAdapter&lt;K,T&gt; where T : ParameterB&lt;K&gt;` where B is also a class, and you have to manage collection of those instances, and invoking method of it, it pretty much requires reflection, or use of dynamic, wildcards solves a lot of patterns.
I think JDBC is part of JavaSE. The context was around the example for modules and running multiple versions of same libraries, and loading old jar files on new versions, Does old JDBC jars work with new java runtime versions or you have to re-compile/upgrade it with new JDK ?
&gt; I'm doing this process synchronously and want to make it async what's the best approach here? You have an architecture problem and instead of trying to fix the problem you're trying to work around it. By all means go for it but in the long term you're shooting yourself in the foot. Even single-threaded 20k items should not take 3 hours. That's less than 2 requests per second. It looks like the calls are implemented poorly and just throwing threads at it probably won't make it go much faster; the bottleneck isn't your network overhead. You should sit together with the other team and come up with a sustainable solution. 
Minecraft Java Edition is performant enough to be playable, but it is not really good. If you ever tried the Windows 10 C++ version, you will see there is a difference light day and night between the Java version and the C++ version unfortunately.
&gt; Java used to be stable with well thought out releases, now they push out a new major version every six months. Pushing versions out more frequently doesn't make them unstable. Each version is stable. The faster release cycle means that more features are released when they are ready instead of having to wait, which also makes it easier for the developers to learn them. Java 8 was a huge burden for developers to learn with the new functional paradigm, streams and interface methods. It also allows gives you intermediate versions to test your system so if you plan to upgrade every 2 years you have 3 versions you can test in the middle to avoid surprises. &gt; It used to take backwards compatibility very seriously, now they're removing things and making changes that break existing code. True, but most of what was removed was *very* old, unused, or internal API that you weren't supposed to use anyway. Modules was indeed a breaking change, but that was a one time thing in 9 (and a few small things later), and the ecosystem dealt with it pretty well. They realized that there's only so much "technical debt" they can have. If you want to grow the language, at some point you have to remove old things that stop you from doing that. Serialization, for example, is one of the targeted features as it's a *huge* security burden. &gt; It used to be write-once-run-everywhere, but now they removed separate JRE distribution and I'm expected to build a separate binary with the JRE included for every system that I target. It really still is write-once-run-everywhere (maybe in some cases it's not *build-once*-run-everywhere). How is removing the JRE breaking that when you have the JDK? You can still create a jar and run it on another operating system with a JDK.
C# already has tuple destructuring in C# 7.
If that's what you prefer, C# 7 already has tuple destructuring. 
&gt;I always wondered where the hate from Java comes from. I sometimes wonder if part of it is because of Minecraft. It's the main success people can point to and it has had pretty poor performance at times.
Which country and which ones have you tried already?
I feel the need to point out that that is a problem with the way Minecraft was coded, not with Java.
Tuple destructuring is extremely limited, and having them there *as well* doesn't fix the problem (imo) of having out parameters in the language. I'm more interested in the deconstructor/static/instance pattern model which Amber is exploring.
Thanks for the tip! We actually use a lib called Mongo-Jack, and most is marshaled to types. It's still a pain though for all the data that was an afterthought - stuffed as JSON. 
Do you know what exactly is so bad with the Minecraft Java version? And why it hasnt changed til now? They programmed so many versions in different languages but didnt "fix" the java version?
It looks like in your [submission](https://www.reddit.com/r/java/comments/9p7m6x/json_parsing_a_string_in_json_format_and_pulling/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
W-JAX (Munich) and Devoxx (Antwerp) will be 2 big ones in Europe. Maybe Ill see you there!
We've done away with major releases altogether! (the version naming scheme is now "Chrome versioning"). The JDK used to have a release every 6 months anyway; some of them had quite drastic changes. By removing restrictions on what can go into the 6-month releases, we accomplish two things: 1. new features can be delivered faster, and 2. upgrades become easier as we've done away with major releases. The cost is that upgrading to those feature releases may be slightly harder than to the old update releases, but hopefully not by much. 
So the main problem is allocating memory via new variables and the solutuion is to reuse the same variables and in doing so the allocated memory stays the same?
Breaking changes now are not much different from what they have always been. They *largely* fall into two categories: 1. separating modules from the JDK (breaks your command line) and 2. closing access to APIs that have been marked internal and unstable for ages. 
I don’t follow at all. You don’t “register classes” in a DI framework and you certainly do not avoid or replace the need for constructor calls in any way.
yes, you want to avoid allocations as much as possible (this is also true for C++ btw), because allocations (and deallocations) are really slow.
FYI - AdoptOpenJDK.net builds should come out in the next few days for 11.0.1 and 1.8u192
I still don't see the benefit for *me* from all of this? Having JRE was never a problem for my users, mostly the IT department made sure there was one that was then shared by all Java applications that they ran. Now I need to compile a specific version with the platform dependent JRE bundled in. If I'm going to have to do that, why not move to another platform since Java no longer gives me the benefit of building one JAR and running it everywhere?
&gt; new features can be delivered faster One of the reasons I used Java is precisely that they provided a stable set of well thought out features. It had the feature set I needed to build robust software. I don't need frequent new features that just cause my dependencies to break and a high cost of continuous upgrading without any business benefit. &gt; upgrades become easier as we've done away with major releases They've become harder because they're now fine with breaking backwards compatibility. Before I never had a single issue upgrading from one Java version to the next, my code would just run. Now I need to be prepared for a majorly broken build every six months, and likely pay Oracle to be able to get an LTS version. I understand how this makes completely business sense for Oracle. I'm just searching for what I'm supposed to gain from this to offset the costs. Right now I'm not seeing it and I'm not seeing what argument I'm supposed to make to pick Java over other platforms in future client projects. Any help?
But my point is and was in response to your comment: &gt;Shouldn't your IDE show you what the operator does? that I should not have to rely on an IDE to tell me what a piece of code does. I should be able to determine that by reading it. I can make valid assumptions that something like Vector3 v1(0,0,0); Vector3 v2(1,1,1); var v3 = v1.cross(v2); means that v3 is the cross of v1 and v2. But I've seen libraries that overloaded operators like var v3 = v1 * v2; to be cross, but how do I know that is what that means? Is that a multiplication, is it a cross or dot product? I can read **v3 = v1.cross(v2)** and make a reasonable guess that is a cross product for the vectors without the need of an IDE or the source code or even documentation. If that turned out not to be an actual cross function then the library is likely not one that would be widely used. &gt;For example, consider a * b, where b: T and a: Collection&lt;T&gt;. There is no built-in operator with that name for those operands, and custom operators are usually defined by the left operand, so the operator must be defined by the Collection type (or one of its supertypes). Ok so using your example, exactly what does the * operator do with regards a collection? Is that a union, and intersection, an exclusion operator? The problem of overloading operators is you can't look at it and determine what it is doing, and having to rely an IDE to make sense of it is not a solution to the problem. But something like a.union(b); is immediately understandable.
&gt; I don't need frequent new features that just cause my dependencies to break If before, every 3 years had a major release that touched *all* areas of the JDK, potentially affecting many dependencies, now you have a smaller portion of the JDK being affected more often (not to mention that the semi-yearly update releases of the old model also occasionally broke things). So the rate of *your* dependencies breaking should not change considerably. &gt; and a high cost of continuous upgrading without any business benefit. The cost of upgrade should decrease overall, not increase under the new model. The new feature releases are only somewhat bigger than the old update releases, and considerably smaller than the old major releases. You can think of it as spreading out the cost of upgrades. There are tradeoffs involved, but we believe more people prefer it this way.
&gt; I still don't see the benefit for *me* from all of this? The world seems to want to go in a different direction, which is why Java has taken a different tack, and why most other runtimes have done the same. If *not* following the most popular direction is the only thing that attracted you to Java then, well, Java strives to serve what most people want, not what the minority do. &gt; mostly the IT department made sure there was one that was then shared by all Java applications that they ran... Java no longer gives me the benefit of building one JAR and running it everywhere? That's not accurate. If you want the IT-managed-runtime model, you can still do that, except it's not bundled in the JDK, but served by separate products (e.g., I believe Oracle's [Advanced Management Console](https://www.oracle.com/technetwork/java/javaseproducts/advanced-mgmt/advancedmanagementconsole-2254207.html) does precisely that)
&gt; So the rate of your dependencies breaking should not change considerably. I don't follow. Previously my dependencies would break potentially once every three years (in practice less frequently because I prefer dependencies where the developers care about backwards compatibility). I simply did not need to worry about dependencies breaking and could use my effort on the things that bring business value to the end users. Now every six months it's likely something breaks and I need to take time off from productive work to upgrade and test. That is a significant cost to me. What am I getting in return to justify paying that cost? &gt; The cost of upgrade should decrease overall, not increase under the new model. For me it certainly does not. My cost used to be practically zero, now I need to schedule developer time every six months for it. I don't need people to tell me that it's not so bad. I know what the cost is to me, I need people to tell me what I *gain* from it so that I can continue using Java.
I really need to dive into heap and stack, didnt dive so deap til now. Advise for learning material?
I was under the impression that jlink had to be run on the target platform. On closer inspection, it looks as though [I was wrong](https://stackoverflow.com/q/47593409). Still less convenient than just cranking out a cross-platform JAR, but MUCH more convenient than building on three different platforms!
&gt; The world seems to want to go in a different direction I need hard technical arguments. "The world is going in a different direction" is not an argument I can sell to anyone internally or externally. I've asked many times in this thread what the benefits to me are, but nobody has provided any. I can see the benefits to Oracle. They get to sell LTS and management consoles etc. so people can solve the problems created by this new model. But so far I see precisely zero benefits to me, only a major new source of costs.
&gt; Previously my dependencies would break potentially once every three years Not exactly. They could potentially break every six months, with the update releases. &gt; Now every six months it's likely something breaks No. The rate of change is the same, and a particular change would or wouldn't affect you when it's introduced. It's just that before, all of the changes could affect you at once, and now they affect you gradually. &gt; now I need to schedule developer time every six months for it. You had to do it before, as there *were* occasional breaking changes in the semi-annual update releases. If you didn't, maybe you don't need to do it now, either. Again, what you need to care about is not that 10u20 is now called 11, but at when a *particular* change happens to affect you. If changes used to affect you every, say, 5 years on average, you can expect them to continue to affect you every 5 years on average. It's not that there are more changes now, it's just that not all those affecting specs are delivered all at once every three years. &gt; I need people to tell me what I gain from it so that I can continue using Java. Easier upgrades (that would hopefully lower costs) and faster feature delivery. Maybe you care about just one of these, and maybe about neither, but we believe most people would benefit.
Have been to both JAX and Devoxx in London this year. I can thoroughly recommend Devoxx and I don't have many kind words to say for JAX. &amp;#x200B; I'm having a look at QCon for next year and Devoxx again
&gt; I need hard technical arguments. Maybe you do, but I think most people need both technical and market arguments. Customers overall do not want to manage language runtimes and prefer application developers to do it for them. I think that's a good argument on its own to justify the model, but if you want to give it a technical spin, bundling a runtime helps ensure compatibility, and reduces the number of moving pieces the end user has to manage. &gt; I can see the benefits to Oracle. They get to sell LTS and management consoles etc. so people can solve the problems created by this new model. BTW, no language runtime is now a money-making bonanza to any company. I have no idea whether Java is profitable, breaks even, or loses money for Oracle, but I do know that Oracle is employing hundreds of full-time developers to develop and maintain OpenJDK. &gt; But so far I see precisely zero benefits to me, only a major new source of costs. OK. Then see how it goes, and if it doesn't work for you seek other alternatives. We hope and believe that overall this would make Java more attractive for more people.
So based on this I cannot make the argument to use Java in future projects.
Best of luck to you in your future projects, whether they end up using Java or not!
&gt;But I've seen libraries that overloaded operators like `var v3 = v1 * v2;` to be cross, but how do I know that is what that means? Is that a multiplication, is it a cross or dot product? Those libraries were poorly designed. `*` on two vectors should be multiplication. If it's not, blame the library author, not the language feature. I also recommend allowing all methods to be used as operators: var v3 = v1 cross v2; &gt;Ok so using your example, exactly what does the \* operator do with regards a collection? Is that a union, an intersection, an exclusion operator? You're right that such an operator would be non-intuitive, but that wasn't my point. My point was that it's not ambiguous. An operator named `*` on a collection type must be something special, defined by the collection type itself, not normal multiplication.
&gt; Customers overall do not want to manage language runtimes This has never been a major issue and I gained *a lot* from being able to run the same Jar on a multitude of systems (current and future) with not even recompiling. Now Java no longer has that benefit over other systems. From my perspective, since I now need to do per-platform compiling, I am re-evaluating all the other options that I discarded previously due to them needing per-platform compiling. &gt; Then see how it goes, and if it doesn't work for you seek other alternatives. I am actively seeking and evaluating those (for example it seems very likely we will standardize on Erlang/Elixir in the backend instead of Java going forward). What I wanted from this forum are arguments to stick with Java. I'm not getting them.
That's not how business works. I need to make decisions on technologies continuously, with some of them having ramifications for years into the future. I cannot see the future, I need to make the decisions based on the best arguments I can make today. And my judgment is that the costs and risks of Java are rising significantly with this model, without offsetting benefits. This makes alternatives superior in many different areas.
I thought planned expiration had been around for a while?
&gt; What I wanted from this forum are arguments to stick with Java. I'm not getting them. This is a very bad way to make decisions, IMO, as everyone's requirements are different, and this is not a consulting forum. All I can tell you is -- try the new model for yourself -- a lot of thought and work have gone into it -- and you may be pleasantly surprised.
&gt; I don't need frequent new features that just cause my dependencies to break and a high cost of continuous upgrading without any business benefit. We've already successfully upgraded two projects from Java 8 to Java 11 where I work. It was very simple and backward compatible except for a few dependencies that needed upgraded version (mainly compile time dependencies like maven plugins and lombok, which needed upgrades anyway). So I am not saying it would be your case, but it's possible migrating your project would be equally or almost as simple.
Well, I’d take a look at @async support from spring. Carefull though with the transactions amount, maybe try batching the requests into small groups so that you dont spam that. Also you said that the issue is the web service but id also keep an eye on the db side, parallelizing your work might give you locking problems on it
We need to get most of our core codebase to Spring Boot 2.x before we can think of getting to JDK 11. Which has its own headaches and breaking changes, including some non-trivial security stuff. I hope to get there by the new year but that might be a bit too optimistic 
RESTful Java Web Services - Third Edition By Bogunuva Mohanram Balachandar
Vogella is very good on eclipse tutorials like RCP too.
Bad architecture causes stress and headaches. I can attest to that...
You can use jdeps to determine the modules used by a jar or class file/file tree. No need to try to manually figure it out
Of course, it's always tradeoffs. It's probably time to move to cutting edge technologies that help us attract great developers (although the downside is that it's dead easy to get good-enough Java devs, but difficult to get devs for cutting-edge languages/platforms like Elixir). I've been shipping Java production code since J2SE 1.4, so I guess I was just trying to cling onto Java out of familiarity. But it seems like there is just no argument anymore for picking Java over other technologies in any area that I can think of.
Checkout [this youtube playlist](http://www.Developing.com/ RESTful APIs with JAX-RS: https://www.youtube.com/playlist?list=PLqq-6Pq4lTTZh5U8RbdXq0WaYvZBz2rbn) by Java brains.
Hi, I'm Dragan, the creator of Uncomplicate, a family of Clojure libraries for AI, ML, and GPU high performance computing. All libraries are free, open source, and they come with a ton of documentation and tutorials on my blog. Neanderthal is a Clojure library for linear algebra and vectorization on CPU and GPU. ClojureCL brings OpenCL GPU computing to Clojure that supports AMD, Nvidia, and Intel GPU. ClojureCUDA enables CUDA acceleration on Nvidia GPU directly from your Clojure REPL. Bayadera does Probabilistic Data Analysis on the GPU, from Clojure Fluokitten brings category theory to Clojure These libraries are quite innovative, are programmed in Clojure, and promote Clojure values of simplicity and elegance, while surpassing competitive libraries from other ecosystem in terms of speed and performance. See some conference talks about them: EuroClojure 2016, Bob Konferenz 2017, ClojuTRE &amp; SmallFP 2018. While these libraries can be considered research, they are for Clojure programmers, by a Clojure programmer, 100%. Your contribution can help me proving that this is possible. I am committed to their continued development, and to writing the guides and documentation that teach how to use them. You can help in making this sustainable by adopting a function from these libraries as your pet and sponsoring my development. Please consider contributing!
Depending on the distance between the client and the server, latency alone can add up to several 100ms, even if the amount of data that is transferred is tiny. Sending multiple requests in parallel can speed up the process a ton in that case. HTTP/2 might also help in that regard (if available) because I believe it allows you to request multiple resources in parallel over a single TCP connection.
&gt;Those libraries were poorly designed. * on two vectors should be multiplication. If it's not, blame the library author, not the language feature. You are correct it would be the author's fault and I mentioned that, I wasn't blaming the language feature itself, I was stating that I don't accept as you suggested that I should have to rely on an IDE to know what is going on with a bit of code because it is using a particular feature that isn't immediately understandable. &gt;I also recommend allowing all methods to be used as operators: var v3 = v1 cross v2; I could definitely support something like this, it is clear and concise as to what is going on here. That is very reminiscent of Smalltalk. 
Azul Zulu is HotSpot, and Graal is also HotSpot (it's a top-tier compiler that can be used instead of C2). Azul's Zing is a separate JVM, that is based on HotSpot, but has an alternative compiler (Falcon) and an alternative GC (C4). OpenJ9 is a completely different JVM.
BEAM GC can be a lot more efficient due to the shared-nothing concurrency model. Other platforms have other memory management schemes. HotSpot has great GC (especially if you pay Azul), and it needs one to be competitive, but it's not directly comparable to other platforms that have very different memory use/management characteristics. And yes, we've looked at BEAM performance closely and it's great for our backend use-cases (e.g., it has been beating records for most TCP clients per box). And unlike the JVM, it has horizontal scaling built in.
It does not offer encryption. But it would be straightforward to implement.
Swing has its own drag-and-drop support, and it's OK for simple things (which seems to be your case). So the answer is no, you don't have to use NetBeans or anything else on top of Swing (unless you have some tricky cases or use other NetBeans features). But note that Swing is near its end days, Oracle recommends using JavaFX for desktop GUI: [https://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html#6](https://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html#6)
Ah yes I did hit the Jackson issue as well. The eclipse issue is with the Hibernate JPA metamodel being blown away near the end of the build. https://www.reddit.com/r/java/comments/9nsknz/eclipse_support_for_java_11/e7pclns Problem goes away if I remove the Java 11 plugin from eclipse.
There was a great write up by the OptiFine developer, but I can't find it anymore. Basically what /u/Tywien says, they've been allocating up to 100MB per second (or even worse) and so the GC was busy all the time.
Yes and no. Allocations are *cheap* in Java, and I mean *cheap*. You want to instantiate 100k objects? No problem, that's fast as lightning. However, what comes at a hefty price is the garbage collection when these objects are no longer used. You want to keep GC pauses as short and as rare as possible, that means reusing objects as much as you can because then the GC never as much work to do.
&gt; Red Hat plans production support of OpenJDK 11 in the upcoming Red Hat Enterprise Linux 7.6 update. &amp;#x200B; All kind of old hat except for this key takeaway; support for JDK 11 is the news I think we're all interested in.
Yes, but I think the kicker is that packaging, etc, is all different, so upgrade paths are changed. It's not a dealbreaker, but re-evaluating support strategies, upgrade strategies, etc, will inevitably delay rollout.
Only if you're paying Oracle for the OracleJDK. For OpenJDK it's just another release that will not get patches 5 months from now when Java 12 ships.
Since when is OpenGL an engine ?
If you’re already an Oracle customer, you might have a master agreement that already includes Java.
Create a lot of point coordinates in a fixed distance to the sphere location, do a 3D transformation to have coordinates relative to a camera, calculate view frustum and do a perspectivic projection, draw points.
Try a different language 😉
It looks like in your [submission](https://www.reddit.com/r/java/comments/9pb0ul/my_job_in_london_uk_is_sending_me_to_oracle_code/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'm not asking for programming help bad bot
I was assuming a simple [point cloud](http://www.fundza.com/algorithmic/nebula/sphere.gif) here, which for the most part looks ok without much shading.. special points for shading the "inner" points differently from the "outer".
Thank you.
This seams like good advice but what I am looking for is a good tutorial or book to learn this from.
This course is incredible. I wanted something more to expand on it. Btw, your link is broken, you should fix it for anybody looking for an easy link.
Here [Updated link](https://www.youtube.com/playlist?list=PLqq-6Pq4lTTZh5U8RbdXq0WaYvZBz2rbn)
Well thats kinda my point, I would not do native jax-rs when a viable framework is available to guide you. 
With Java 11 there is no more JRE. Yes you can use Open JDK in prod. Oracle JDK only for development purposes. 
You're right, a point cloud would be pretty easy to draw and actually looks pretty good. You might not even need a frustum / perspective for it to look alright.
What is the difference between "only development purposes" and "open JDK in prod"? 
Huh, I'm a unity dev currently and I've got to tell you mate, you're doing something terribly wrong. Of course it has its many flaws but it's not about loading time. 
Not deprecated. Was moved out of Java to separate release cycle. Now you import it like other maven dependencies.
people don't build GUIs in Java anymore. it's just not bundled with the jdk anymore.
It's like other libraries now and isn't built into the VM. It's still the prefered choice for Java client libraries.
Your instructor is very much mistaken. The only change is that it's released separately from the JDK, which means it can have it's own release cadence. No more, no less.
can confirm inrellij is vastly superior.
I have lots of Java GUIs running on my phone and tablet.
There's a single source tree, OpenJDK. Oracle provide two binary builds, Oracle JDK and "Oracle's OpenJDK build". You can use the latter for what ever you want, because it's GPL(+classpath)ed. The former, you can only use in production if you pay Oracle for the pleasure. 
When shall one of them be used then? Example cases? 
Oracle JDK should be used when you like spending money. Open JDK should be used in every other situation. (That money does get you someone you can call if you have a problem)
Many of us actually play on both fields (Java/.NET) and are able to appreciate plus and minus from each of them :)
That’s correct. Yes. 
While I fully agree with you, Java could have adopted an Eiffel like model where the value vs reference types is just a matter of using the *expanded* keyword either at definition or variable declaration site.
It is still pretty much WIP, there are tons of .NET libraries that aren't portable to .NET Core yet.
&gt; it isn't personal the only goal of the work that alan is discussing is intentionally breaking software that currently works. he hasn't articulated any engineering tradeoff at all, there's no cost benefit analysis, there's no "if we eliminate this method we can speed something else up". now maybe in the back of his head, he's got a sound reason for all of this, but until he articulates that, it's totally personal &gt; the very opposite of being toxic contributing to openjdk requires assigning to oracle more rights (the OCA) than oracle returns. at the least, that's toxic to developers and the community 
Thank you!
Not if the invocations are reflective. If they can be determined by walking the AST, they can be, though.
If you wanted to read the article but found out it's too long, please see the TL;DR section that reappeared there. I didn't notice it got removed by DZone during the review, but I brought it back now (without it, I'm afraid it's hard to count on much feedback).
You can use Dose for Excel Add-In which provides more than +100 Features that really make your life much easier, check their website in below: [https://www.zbrainsoft.com/](https://www.zbrainsoft.com/)
&gt; the only goal of the work ... is intentionally breaking software that currently works. Do you really believe that the goal is to intentionally break software? That's ridiculous, not to mention that the reasoning has been discussed at length in the OpenJDK community. That you've decided not to be a part of that is your problem. Contibutors are not required to personally explain themselves to you; you, on the other hand, should provide evidence to such an accusation. &gt; contributing to openjdk requires assigning to oracle more rights (the OCA) than oracle returns. at the least, that's toxic to developers and the community The OCA is very similar to other CLAs, such as Linux's, Android's, and many, many others. They are pretty standard in large open source projects, and make the stewardship of such projects nearly impossible to manage otherwise. Without them, companies would be less willing to contribute hundreds of millions of dollars to open source development (as Oracle has done for OpenJDK). 
So how is Oracle going to handle back porting to java 8 are they going to handle that in in the standard openjdk8 branch or are they forking it and keeping that branch closed?
**Clojure** != **Java** This subreddit is **exclusively** for **Java**. Also, we generally forbid advertising *Patreon*. **removed**
Upgraded to 11 in Prod. Haven’t had any issues so far. Now using it locally for development. 
*The Wheel of Time turns, and Ages come and pass, leaving frameworks that become deprecated. Deprecated fades to EoL'd, and even EoL is long forgotten when the Age that gave it birth comes again. In one Age, called the Third Age by some, an Age yet to come, an Age long past, a widget rose in the Mountains of Mist. The widget was not the beginning. There are neither beginnings nor endings to the turning of the Wheel of Time. But it was a beginning.*
*braid-pulling intensifies*
There's also this FPS written in Scala that's been around for a long time: https://github.com/ScalaWilliam/ActionFPS
Is Swing still delivered as part of the JDK BTW? I've heard the JavaFX thing mentioned often and never a word on Swing. 
you have lots of personal attacks
[Roadmap from Oracle](https://www.oracle.com/technetwork/java/javase/javaclientroadmapupdate2018mar-4414431.pdf) JavaFX &gt; Consequently: &gt; * Oracle will continue to support JavaFX new fixes for Java SE 8 until 2022. &gt; * Having open sourced JavaFX and related tools, Oracle is working with interested third parties to make it easier to build and maintain JavaFX as a separately distributable open-source module. Swing &gt; Oracle will continue developing Swing and AWT in Java SE 8 and Java SE 11 (18.9 LTS). This means they will be supported by Oracle through at least 2026. Now the question is, what happens to Swing after that? JavaFX is in a pretty good spot, as development was taken over and speed up in a more [open source](https://github.com/javafxports/openjdk-jfx) fashion so to speak.
your build will still corain all of java.se and jdk libraries. Using jlink is far easier, and you don’t have to modularize to use it on the jdk.
Absolutely fantastic! Very well done!
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'm still not seeing any way to use JavaFX for aarch64. Swing is the only option if you want to target ARM linux and not just x86. A crazy idea... Qt compiled using Sulong onto the new GraalVM. I'm wondering if this is even possible. I tried finding Qt bindings for Java, but the only thing I found looked [completely abandoned](https://en.wikipedia.org/wiki/Qt_Jambi).
&gt; will not get patches ... from Oracle. Other OpenJDK providers can provide patches. AdoptOpenJDK, for example, says it plans to support their OpenJDK 11 package [until 2022](https://adoptopenjdk.net/support.html).
It does mean more. In particular, Oracle said will not support JavaFX beyond Java 8, while they will support and develop Swing in Java 11 (and probably beyond). Basically Oracle spun JavaFX out and now it's completely up to the "community" what happens to it. So it's technically not deprecated, but I would not build anything significant on top of it since it's unlikely to see much progress without a paid development team working on it. (Which is a shame since I do ship a product that uses it and I prefer it to Swing.)
&gt; It's still the prefered choice for Java client libraries Source?
Yeah, Oracle's wording is actually pretty shady when it comes to this. Based on what they said, they could take Swing out of the JDK by next release as well. They were very open-ended with how they worded everything. &gt; development was taken over and speed up Source? I personally think JavaFX is in a pretty shady spot until they come up with plans to support Vulkan, because that would be the actual difference between it continuing to work in modern operating system for another 3 decades or more and suddenly stopping working within the next few releases (Mac for example has already deprecated OpenGL, which I understand is what Vulkan works with). Take my words with a grain of salt since I'm no JavaFX expert.
Android apps themselves are mostly written in "Java".
&gt; Source? Github issues and recent release cadence
They will do the same thing they do for JDK 7 and 6, which is fork it and keep their backported updates internal to Oracle. 
Right so it isn't a single sources tree for the non-current version.
I'm actually surprised with what has been done with fx since it's been taken over. It's actually pretty amazing imo
The most complete listing of Java events and conferences is printed in every issue of Java Magazine. (Link)[http://www.javamagazine.mozaicreader.com/SeptemberOctober2018#&amp;pageSet=10&amp;page=0] to their current events calendar (use the &gt; on the right panel to advance through it)
That's correct. Each major JDK has its own repo under OpenJDK and then there is an update repo as well.
This has been part of every Java update since at least 8, and it seems to only really apply to desktop installs which have an updater built in. I've never seen it doing anything outside of that context anyway.
That is very cool news, especially seeing that it has been integrated into JavaFX 11! Considering it's bundled in the Java Runtime, which promises as much longevity as humanly possible to JavaFX - at least when it comes to 2D!
Can you give an overview to someone who's very interested but does not follow JavaFX development?
JavaFX is absolutely not deprecated: it's simply been moved, in Java 11, to its own individual library. As a Swing programmer for far too long, don't be masochistic: use JavaFX.
Good luck finding a book after 2004 that teaches Swing.
I would never use Wicket again. Most of the times you need custom behavior and you will end up with a hybrid that is neither Java nor JavaScript.
Spring core and Spring Boot are heavily used in industry. When you say "Spring" what do you mean, MVC, dependency injection, batch, etc? Either way, if you know the basics of Java JaxRS, you should be fine for Spring Boot and MVC.
Perhaps, but so far it's an unknown group with no track record. Personally I wouldn't bet the business on them actually porting all the changes into their LTS version in timely manner while sticking around for years. I hope they do, but I'd much rather see someone like Red Hat stepping up and saying they'll take the responsibility and ship a free RedHatJDK 11 (and RedHatJRE) with long term support.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
A short (biased) history of JavaFX: In its first incarnation it was a scripting language, then it became what it is today (~2008). After many years of trotting along it was included in the JDK with Java 8 because it was so much better to have it in the JDK with the JDK release cycle and because it should replace Swing as the standard GUI toolkit. Then Oracle decided to drop mobile/ARM support, and others eventually picked it up. With Java 11 it was removed from the JDK because it was so much better to have it available as stand-alone module with its own release cycle and applications can now use newer versions faster. Also somebody else has to chime in who is currently developing JavaFX, because I've lost my overview over that. Meanwhile, Swing is working on every Java installation, in the same way it has done for nearly two decades and I know of no plans to get rid of it. And yes, there are projects out there for which stability is more important than having the newest and coolest features.
Spring is big in big business
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yes, Swing's still in JDK 11, and according to the [last JAva client roadmap](https://www.oracle.com/technetwork/java/javase/javaclientroadmapupdate2018mar-4414431.pdf) I saw, &gt; Swing and AWT will continue to be supported on Java SE 8 through at least March 2025, and on Java SE 11 (18.9 LTS) through at least September 2026. Oracle has begun conversations with interested parties in the Java ecosystem on the stewardship of JavaFX, Swing and AWT beyond the above referenced timeframes. So I don't think we can expect any improvements in Swing but at least it's not going anywhere for a while.
Also it's only implemented, maintained and advanced by [one guy](https://twitter.com/laurent_bourges/status/1051096004764848129) and funds. 
Java developer here. Also running Spring
It hasn’t progressed in any meaningful way in almost 20 years.
oracle is still contributing to openjdk
Truth
It looks like in your [submission](https://www.reddit.com/r/java/comments/9phwx6/using_wildfly_elytron_jaspic_with_standalone/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Modern UI toolkits use 3D functionality to render 2D desktops because that's where all the GPU power is. 
im not doing anything wrong. the games i mentioned are just ridiculously slow and the devs seem unable to fix it for some reason.
Spring boot is needed in big companies around me. It helps. I also know a Senior freelance java developer, who is only coding in java 6-7, JavaEE, no other frameworks. Still gets his 1k€ / day ... (allmoust 20 years experience..)
It's the devs' problem, not the engines' one mate. 
Too much
https://snyk.io/blog/jvm-ecosystem-report-2018 40% reported using Spring Boot, that increases to 76% if you include Spring MVC. 
No it's not, Spring Framework is used by Spring Boot is used By Spring Cloud is used by Spring Cloud Data Flow. Spring Boot takes the Spring Framework and essentialliy takes an opinionated approach setup and usage, with a lot of niceties around it e.g. @ConfigurationProperties. Spring Framework can be used within any sort of Java ecosystem e.g. an existing JaveEE application. Spring Boot is either deployed as a standalone JAR or as a WAR; also don't make the mistake of thinking Spring Boot by itself is a web container, it still needs the web dependencies to make it one. e.g. create a spring boot project without any web dependencies and run it, it will start up and shutdown as would any java app. 
definitely seems like an issue that other engines dont have. the only games i observe this are unity based and the devs themselves dont seem able to improve it, even though they tried (on poe2 compared to poe1). so if you put a huge amount of resources in it, you may be able to get unity to work like a normal engine. I wouldnt say that the devs of both studios are plain bad, especially considering they are very experienced with unity it seems. obsidian entertianment has shipped 3 successful unity games already.
Worked in 3 companies, 2 were powered by Java(Spring) and one by C#. Each of them were big big projects.
This is completely individual. If you ever want to write a plugin for IntelliJ or Netbeans, you'll end up using Swing. Also, for me personally, swing is the first option if I need to quickly visualize something or display and image from memory, etc, and often I prefer awt+swing when I'm writing a simulation for something, instead of launching some bigger framework like Slick2D or LibGDX. It's really convenient that Swing is available by default and you don't need to add some external dependencies to quickly conjure up a window with something in it. Saying you'll never need Swing is like saying you'll never need trigonometry after school. (Most people probably don't and if they do need it, they've forgotten all about it.)
You can browse the activity here http://mail.openjdk.java.net/mailman/listinfo and subscribe.
You could use HTML and CSS with Java since 1.0.... Although JavaFX has a built in web browser - built with webkit. 
Unfortunately Oracle is trying to give us as less information as possible. But even if they did we couldn't count on it. When deprecating Java Applets they promoted Java Webstart as replacement (which is a very well decision), but suddenly they announced to drop Java Webstart and didn't give us much time for a replacement. The same is true for JavaFX, but even more for Swing. JavaFX was taken out of the JDK and given to "the open source community". So one could say Oracle doesn't care about whether it will evolve or die. Swing is still in the JDK, but Oracle made some very vague statements about its future (as stated by https://www.reddit.com/user/dolphin_rave_cape in this thread). So it seems Oracle does not want to explicitly state that they want to drop it, nor do they want to guarantee any future of it. Oracle (like many others) try to get rid of Java on the Client and propagate the usage of HTTP web applications (and I can't think of anything worse). So it may well be that neither of them has a bright future. However I also would not see it that dark as there are several years to come for both toolkits and every hype (in this case the HTTP/HTML5/Webapp hype) will calm down at some time and the alternatives will be back again. Anyway, the decision between JavaFX and Swing is as hard as ever (though I am glad that Swing isn't "deprecated").
https://www.reddit.com/r/java/comments/9oc5de/jib_getting_expert_docker_results_without_any/
This has been a thing for a while now. The JVM Doesn't stop working. https://stackoverflow.com/questions/16067829/jre-expiration-date#16090237
Spring boot is just a framework to make Spring MVC easier to use. Spring is very heavy and requires a lot of configuration. They had to create a whole other project to try and account for that.
QCon is a perennial favorite of mine. 7 times in 2 different cities and never a disappointment 
At least this post isn't by an ITNext spammer, even if it is a duplicate.
I use tons of Spring Framework at my job (Fortune 500 retailer). Boot, Batch, Security, JDBC, etc. I haven't really noticed any negative side effects. I highly recommend Spring.
Spring is HUGE in the enterprise. 
That's good to hear! I'll pop it on the list to go to the next one. I was very disappointed by JAX this year so looking to fill the gap.
Shows how much Intellij is ahead of the game!
And I know most people here don't care (but I do), but it shows how much Netbeans is behind the times. They *barely* have a jdk 9 version out.
ahead of price too $500
Hopefully JDT gets better aligned with the JDK release schedule. By the time ellipse gets support for Java 11 we will be halfway to 12.
Bring on. Free version is great for FLOSS projects and students but for anything serious its completely useless...
So let me guess, you wish for Eclipse to die?
The joy of faster releases ;)
?
The best parts of QCon are: - Open Spaces - where attendees choose the topics - Hallway conversations - There are relatively long breaks between sessions
Yes, though not a reason you go back to the once every 3-4 year cadence we saw before. I'm still hopeful that by 14 tooling has caught up to the cadence. 
lol.
even for FLOSS projects you need features that eclipse has but idea doesn't in the free edition.
Ah, true. jdeps should be able get you most of the way there, though
the fact my job pays for IntelliJ for me gives me the good feeling of me still using it for "free" :)
Second here for Vue. As a backend guy, it's the only frontend framework that I have ever liked. 
I get ya... But I dont trust software that I dont know what it is about! That is why I stick with any FLOSS IDE or editors! 
We were using Google Guice for dependancy injection, JaxRs, Java reflection api. We were also using socket bus for RPC. Hibernate for database interactions, vaadin for frontend. Should I go for spring MVC and Boot?
Funny but I like IntelliJ for everything but Java. I like Eclipse for Java but because 11 I ended up moving everything to IntelliJ. 
I only use InteliJ when dabbling on Koltin and its Android Studio variant. Continuous indexing, lack of incremental compilation, more complex GUI designers, sluggishness in non SSD disks made me love Eclipse again.
Could you give an example? I've been happily using intellij ce at work for years and when I've started using it, it was because it worked much better than eclipse.
&gt; there is not a single job offer in which the word Java appears without being accompanied by Spring Except for, say, most of the defense industry contractor jobs.
I would differentiate between building microservices and building more monolithic applications. Also, whether you are aiming for a more standard SaaS (slightly more CRUD heavy) or something with higher throughput or more streaming data.
spring. web. JEE. database. there are floss projects out there who need that crap. if, for what you need, CE works and you like it, then that's fine, nothing against that. but, value for features ... you simply cannot beat eclipse.
Yeah I guess if you use an app server for the project you get free integration with Eclipse. IntelliJ is more focused on the ease of coding and refactoring I think which is a lot more important to me. Also with Eclipse I always felt like that the support for these old JEE stuff is there, but they rarely work. I quickly found out that it's much easier to run these things from the command line. I feel like a lot of Java and .NET developers are either obsessed with running everything from their IDE or just can't/fear use of the command line. Thanks for the reply!
it's not about the running, (though it does help with debugging, stepping through, etc.), it's about the work that you save by having the IDE do a lot of crap for you. yes, you have to be able to edit files by hand/know what's happening, but it doesn't help anyone (and is boring as hell) if I just do everything by hand and take my time with crap. The IDEs are there to help us. make us more productive. Let's use that. Otherwise, why are you even running an IDE? use vim or whatever lobotomized text editor out there.
You could also spent money to eclipse to get the warm feeling you know. 
And guess what I did? ;)
i am working with spring boot right now as well (at work). eclipse is amazing with that. there's nothing that intellij can give me to make it worth it. 
Just saw your edit. Mad respect for coding in Java in '92. Coding without an IDE in Java would be hell for me :)
You can get Java 11 support today, you need to explicitly [download it from Eclipse Marketplace](https://marketplace.eclipse.org/content/java-11-support-eclipse-2018-09-49), though. I assume the support did not make it into the current train?
To each their own then I guess, having two competing products will only make both of them better!
No java, jesus. java didn't exist until 1995. I only coded in java in 1999. But C, pascal, foxpro, c++ were languages and platforms. and no IDEs. 
We transitioned from vanilla Java EE to Spring Boot, it seems to be the industry standard, most jobs also ask for it with some ecosystem knowledge thrown in such as cloud stuff with Docker and Kubernetes. 
$500? I pay $89/year. I think the first year is $150, then it drops...can't remember exactly since that was many years ago that I bought my initial license.
Spring boot is an opinionated configuration framework for the spring framework. Spring has gotten so complicated that it needed a framework for itself. Unfortunately Spring is widely used in the industry and if you want an enterprise java development job you really need to know it. There are many projects that are part of Spring but knowing Spring MVC and Spring Data would be a good start. 
&gt; They *barely* have a jdk 9 version out. Eh? The current stable release is [NetBeans 9](https://netbeans.apache.org/download/nb90/index.html), which supports JDK 9 and JDK 10, and came out back in July. NetBeans 10 supports JDK 11 and is due for official release on [15 November](https://cwiki.apache.org/confluence/display/NETBEANS/NetCAT+10.0+Schedule), i.e. a month before Eclipse 4.10. Still behind IntelliJ of course, but they've been bogged down in the Apache transition lately -- now that the worst of that's out of the way I think the pace will pick up again. IIRC they always used to synchronize releases with the corresponding JDK.
Right click the method you want to change, Refactor -&gt; Change Signature 
Not really, the support could be downloaded and installed for eclipse from day one, it just missed the mail release since the release cycles don't match up so you had to install it separately.
https://www.jetbrains.com/idea/buy/#edition=commercial
[https://www.jetbrains.com/idea/buy/#edition=commercial](https://www.jetbrains.com/idea/buy/#edition=commercial)
It looks like in your [submission](https://www.reddit.com/r/java/comments/9plbns/i_would_like_to_use_and_or_and_not_logical/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Why don't you just configure maven to build with the eclipse compiler?
&gt; Profiling tools out of the box without needing to install additional plugins. This was rather convenient indeed, but IntelliJ guys aren't sleeping and 2018.3 EAP already contains a flamegraph profiler based on async-profiler(which uses AsyncGetCallTrace + linux perf) More on it here: https://blog.jetbrains.com/idea/2018/09/intellij-idea-2018-3-eap-git-submodules-jvm-profiler-macos-and-linux-and-more/
That is if a company pays for it. 
Or (on Windows at least) Ctrl + F6.
i work for a big development place with a centralize jenkins and devops team so i have no control over and they wouldn't want to do it anyway since i don't think that's a best practice.
Thanks, very informative.
You add it as a dependency to the maven-compiler-plugin in the pom. It gets configured inproject, not outside. So it won't be a matter of some using it and some not. But there is something to be said for not rocking the boat.
Yes, commercial license, the one your company is supposed to buy for you.
yeah if anything at all breaks that's the first thing they are gonna say is "ahhh whatss dis?" we get our poms analyzed too for security problems and got knows what else too.
Ah. Not a bad policy I suppose. Also I would have included the magic words to get this to work, but I'm away from my computer at the moment, so my apologies.
Yes I know what the dictionary says thanks, but how it is on paper is different from reality, reality is that's not how the word is used. And I already explained how you can feel pain programming. 
And if you add a parameter you can pick a name for the default value/variable name.
Huh? The dictionary is *compiled* from real-world uses of language. Each one of those definitions is backed up by a stack of real-world quotations. Still, here are a few more for you: [Minimizing the pain of Trump's Tax Law](https://www.nytimes.com/2018/08/24/realestate/minimizing-the-pain-of-trumps-tax-law.html) (NY Times, 2018) [China-US trade war: more pain to come for China](China-US trade war: More pain to come for China) (BBC, 2018) [A Black Forest: pain for forgotten victims of a financial disaster](https://www.smh.com.au/business/banking-and-finance/a-black-forest-pain-for-forgotten-victims-of-a-financial-disaster-20180727-p4zu01.html) (Sydney Morning Herald, 2018) [King of Belgium: Entire country feels this pain](http://www.latimes.com/la-live-updates-explosion-king-of-belgium-entire-country-feels-this-pain-1458671685-htmlstory.html) (LA Times, 2016) 
And future plans seems more open than in the past. JDT developers should have plenty of warning about upcoming changes to the spec.
It hardly matters at the moment, but they still use Java 8 as their runtime, even for 2018.3. I hope they migrate for 2019.1 or are willing to support their JDK themselves.
There's also the community edition, and free licences for Ultimate if you're a student or working of free software and several other categories.
Spring mvc isn't that different than your current stack. You should try it, check out start.spring.io
While it's possible (like others have pointed out) you have to be careful. Changing a name is easy. Changing the signature often means you're changing behaviour which might mean that code calling it is making assumptions that are not true anymore. IMHO it's best to let code 'break' and check each calling method out to see how the code should be fixed.
&gt; Devoxx (Antwerp) Maybe this year they'll manage to solve the lunch queue once and for all!
Yes when you compile and combine descriptions you loose information, such as the subtle nuance between being in pain and being a pain. If something is a pain for you it does not cause you pain. If it does cause you pain then it is painful.
Isn't it shift + f6? I remember it being with shift and wondering "why use shift?"
You only include update4j into the image. &amp;#x200B; In the resulting launcher script you can modify it to add another location as the modulepath and put the updateable modules into that location.
Yup that's basically the case in the instance I was referring to. Layers and layers and layers of opaque dependency injection that break in unpredictable and maddening ways depending on factors that are very, very difficult to identify. Fix one and another pops up like wack-a-mole. Obviously some of it is the fault of the codebase in question, but I assign Spring a good chunk of the blame for making such a monstrosity possible in the first place.
I had mixed feelings when I was trying to decide on QCon last year. Fortunately it seems I did the right thing and went to other :) 
was not aware of this, thanks ! any special recommendations from that list?
Thanks! I don't know if I understand this in detail yet, but I will play around with it and see what I can do. 
Property based testing is a technique when you describe expected behavior as a set of high-level properties and let test framework generate the test cases. (However I haven't used it with Java so won't be able to help the OP).
Sorry I don't know any Java library for property based testing but I just want to share with you guys a couple of great videos about the topic by John Hughes https://youtube.com/watch?v=zi0rHwfiX1Q https://vimeo.com/68383317
Try this: [https://github.com/pholser/junit-quickcheck](https://github.com/pholser/junit-quickcheck) Written and maintained by a friend of mine, great guy and a good library.
I've had pretty good luck in Eclipse with WindowBuilder gui designer for Swing. I also learned to use MigLayout, and once you understand it you'll never go back to a different layout manager. WindowBuilder and MigLayout have their warts, but they work pretty well. &amp;#x200B;
Ah man, they better! Its my first time there.
Allocate structures up front. Then your performance critical loop (ideally) doesn't allocate anything.
I like Eclipse. To my knowledge [**intelliJ**](https://twitter.com/intellijidea) does not meet following reqs regarding launchers/runConfigs whereas Eclipse does: * a launcher must be versionned alongside code it targets * a dev may import any number of Maven projects and automatically have their related launchers appear in IDE Am I mistaken ? Maven's exec plugin in an alternative with it's pros (reproducibility) but not as user-friendly as the IDE's native launchers
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
JFoenix for JavaFX applications.
&gt; I browse github trending repositories .. but I´m usually disappointed And then &gt; That´s why I would like to .. and maybe not so well known by the community or recently developed Ehm wat. How can a not so well known thing be trending? Maybe, reset your expectations? :)
[Voxxed Days Ticino](https://voxxeddays.com/ticino/), because Lugano is beautiful, and I speak there tomorrow. Have to hurry though, I guess.
Maybe I haven't explained well. I'm not looking for "trendy github repositories", that's stupid. I only explained that browse github to learn about new libraries but it's obvious that some of the best libraries out there won't be in gh. Just looking for good, documented and useful libraries
So a bit like Cucumber? (which I admit I haven't really used, so I'm probably misunderstanding both what you mean and what Cucumber does)
Right answer. Great library.
Why is it unfortunate that Spring is widely used?
Property tests ? never heard of that before :) For Unit Tests, JUnit is basicaly the mainStream, AssertJ and Hamcrest have sometimes nice and additional syntax. stuff like list.contains(11,15) .allMatch(x -&gt; x &gt;10) .noneMAtch(x -&gt; x &lt; 100); e.t.c. For testing stuff where you need to mock something like service with DB connection or UI Ellement, Mockito is very popular and good choise.
https://github.com/trending/java
&gt; If something is a pain for you it does not cause you pain. I think that this is probably the point at which we should agree to disagree :).
Oh I see. https://www.jooq.org, then
Ive been learning javafx via kotlin/tornadofx. JFoenix has popped up a few times when doin searches. Hopin to try it out sometime.
I suggest you read the [Java Client Roadmap Update](https://www.oracle.com/technetwork/java/javase/javaclientroadmapupdate2018mar-4414431.pdf) whitepaper from Oracle. There is no more a "central" JRE. The recommended practice (driven by a shift in the sofrware ecosystem at large) is to bundle a "custome JRE" created with jlink with your application.
OpenJDK and Oracle JDK are the [same JDK](https://blogs.oracle.com/java-platform-group/oracle-jdk-releases-for-java-11-and-later) distributed under different licenses. Java development at Oracle, [along with contributions from others](https://blogs.oracle.com/java-platform-group/building-jdk-11-together), takes place as part of the OpenJDK project.
I just posted an edit to my original comment. I think I have it now. What do you think?
A couple that I've open sourced at my job: https://github.com/rei/datadsl - a groovy based replacement for DBUnit https://github.com/rei/ez-up - project generator inspired by Lazybones but for maven projects
If you want to make Java Util Logging fast: [https://github.com/a-hansen/alog](https://github.com/a-hansen/alog)
Failsafe is also the name of the Maven module for integration testing. Not to be confused with Surefire, which is the unit testing module.
That seems like cheating to use your own library :P
I'd rather make JUL useful first :)
I am not sure how the support contracts work and who has to pay for what. That is something you need to find out from the support vendor, be it Oracle or someone else.
Well, probably a lot of backends, but thats not something you hear of.
Java doesn’t get a fancy shiny new everything every 10 days. It is by far the best feature of the ecosystem, imho.
Come on my man, it is used in back end servers by huge companies like twitter, and they also created Netbeans, aka the greatest thing to exist.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9ppe4d/i_keep_getting_an_array_out_of_bounds_issue_i/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Every single enterprise app in the banking industry since 1990. Next time you go to the doctor or to your grocery store look at the cashier app. Changes are it is a Java app with a swing GUI. 
I will be messaging you on [**2018-10-21 00:38:16 UTC**](http://www.wolframalpha.com/input/?i=2018-10-21 00:38:16 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/java/comments/9ppaw4/what_are_some_notable_computer_applications/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/java/comments/9ppaw4/what_are_some_notable_computer_applications/]%0A%0ARemindMe! 24 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Non-Mobile link: https://en.wikipedia.org/wiki/BD-J *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^221235
**BD-J** BD-J, or Blu-ray Disc Java, is a specification supporting Java ME (specifically the Personal Basis Profile of the Connected Device Configuration or CDC) Xlets for advanced content on Blu-ray Disc and the Packaged Media profile of Globally Executable MHP (GEM). BD-J allows bonus content on Blu-ray Disc titles to be far more sophisticated than bonus content provided by standard DVD, including network access, picture-in-picture and access to expanded local storage. Collectively, these features (other than internet access) are referred to as "Bonus View", and the addition of internet access is called "BD Live." BD-J was developed by the Blu-ray Disc Association. All Blu-ray Disc players supporting video content are required by the specification to support BD-J. Starting on October 31, 2007, all new players are required to have hardware support for the "Bonus View" features, but the players may require future firmware updates to enable the features. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Hey, we're trying to get a circlejerk going here.. can you stop? (But I tend to agree) 
Intellij is an exceptional example of a performant Java application.
by web dependencies you mean like spring mvc or spring web services?
Explain
Explain please
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Lots of significant open source projects like ZooKeeper, Solr, Kafka
Elastic search, android, the backend of each bank and also is used for big data
I'm still a fan of the Getopt port. Very very fast command line options handling.
holy hell, I love this
Oh man what I wouldn't give for the ability to upvote this about a million times 
I am hooked to this page. Also there are more for your favorite languages [https://github.com/sindresorhus/awesome-nodejs](https://github.com/sindresorhus/awesome-nodejs) [https://github.com/uhub/awesome-scala](https://github.com/uhub/awesome-scala)
Google, Amazon, Netflix, etc.
NASA Deep Space Trajectory Project is using JavaFX. See for yourself [here](https://openjfx.io).
As will you be, no doubt...
The original version of Minecraft.
The operating system with the world's largest install base (Android) is heavily Java based. Practically all the apps that run on it are primarily developed with Java.
I cringe everytime I see my coworkers bloating their code when [Apache Commons](http://ogc.osd.mil/doha/industrial/2017.html) has been around for a decade. Become familiar with Commons Lang and IO. Google Guava is a decent alternative.
Android!
a lot of hate hahaha, 
A lot of gov stuff, like a fuckload of it. 
jEdit
Most of Comcast’s cable backend runs on Java. Source: software engineer at Comcast.
You have the wrong link in for Apache Commons.
The original Minecraft 
Oops, thanks!
https://github.com/nomemory/mockneat
You could count the Eclipse based apps too. Like IBM domino designer, Rational App Developer, and IBM Data Studio.
It does, but they don't immediately get popular hype trains like in JS.
I thought Kafka is largely Scala. But still JVM and all that. Netflix made quite a bit if Java oss, like Eureka, Hystrix, Ribbon, Spinnaker, and more.
&gt; &gt; &gt; Java Conference Videos Google is mostly Python , no ?
arent they using Python more and more in banking ? https://www.quora.com/How-and-for-what-is-Python-used-in-the-financial-industry
Google Truth, Guava, Guice for utils and testing jooq, Jdbi for data access Dropwizard for REST Mockito Flyway, liquibase for migrations 
It’s based on Swing IIRC.
Jdownloader, a download manager, great piece of software. http://jdownloader.org
This is changing now.. lot of them moving to python and golang. The move to cloud with tools like docker/kubernetes, and that golang powers some of the biggest companies infrastructure is turning heads in mission critical applications. That said Java is still largely used in a lot of these places. 
I's quite funny how a dev conference ends up having huge concurrency problems every single year :)
Google is mostly Golang. As is Facebook, docker, slack and many other larger company services.
Type java on a job search board 
I do a lot of integration projects so I like Wiremock
Wow.. I am no expert, just doing a lot of learning, reading and talking to others using this stuff. Forgive me for pissing in your cheerios. Golang is being used a lot more in microservices, myself included as I learn. Just because I am out of a job doesnt mean I am stagnant and not involved. But thank you for going out of your way to try to make me look bad. 
Good to see that Swing is as fast as a native app nowadays. I remember DB2 v7, starting up that monster took minutes back in the day.
Lol...google cloud runs almost entirely on top of java, netflix is famous for developing oss for java microservices, aws is entirely run on top of java, facebook main page runs on php...Most high-end sever applications are written in Java due to its performance, that can be superseded only by C, C++ and Rust
The move to python in Bankong industry is never going to happen. The language is too damn slow to power their realtime systems
https://github.com/zalando/problem https://github.com/zalando/problem-spring-web Problem Spring Web is a set of libraries that makes it easy to produceapplication/problem+json responses from a Spring application. It fills a niche, in that it connects the Problem library and either Spring Web MVC's exception handling or Spring WebFlux's exception handling so that they work seamlessly together, while requiring minimal additional developer effort
The Heat Death of the Universe will replace us all so what
[Project Lombok](https://projectlombok.org/) is a library that does annotation driven boilerplate code generation. Takes away a lot of the humdrum of setting up things like getters, setters, builders, adding loggers... and so on and so forth. Definitely worth using for the time saved, and your code is much cleaner and more readable. Our team never starts a project without it anymore. If you do want to try it though, make sure to add the plugin to your IDE (and add the library). Otherwise it’ll swear high and low your build will fail because of missing methods!
&gt;Twitter. I'm pretty sure Twitter switched from Rails to Scala for their backend, rather than Java. Still a language on the JVM though.
You made yourself look bad, by not knowing what you are taking about. Accept that and learn from it. Dont attack others.
GraalVM!!
for God's sake!! 🤣🤣 I never hated a software product, but SQL Developer was quite close
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
https://github.com/google/auto https://github.com/google/flogger https://google.github.io/dagger/ especially https://google.github.io/dagger/producers.html
&gt; Every single enterprise app in the banking industry since 1990. FWIW, Java was only released in 1996. There was still plenty of COBOL in 1996, let alone 1990. (Python has in fact been around since 1991, which can surprise people, though of course both languages have changed over the years.) 
Jdownloader for sure 
Spring is popular but other frameworks like dropwizard and spark-java are becoming popular.
Are you lost?
Golang is way to young to make up large portions of those companies' code. Also Facebook is their own version of PHP called Hack.
just what I said, I never hated and I will never either, it does not make any sense hating a software product, but sometimes it happens to be a little bit frustrated about it, and SQL Developer gave me a lot of headaches but we're talking about long time ago I'm lucky enough to not work with Oracle DB anymore
I agree; works fine. If you are working with Oracle it is ideal in my mind.
Fair enough. Lucky you I guess :D
I use Intellij on Linux Mint and it's really fast, wherever I click the UI responds instantly. I should add that I run it on an SSD drive. Eclipse was always quick and snappy, even 15 years ago, because native libraries. 
Invest in a personal license, that's what I did and I never looked back!
Well, YMMV. I'm certainly on ssds too. To be fair I put "(Eclipse!)" like that because I consider it giant and sluggish - slow relative to Eclipse is really something. I'm basically an Emacs guy (and old enough to remember when that was giant and slow - Eight Megs And Constantly Swapping).
So basically again you don't speak from experience but just hearsay from a few 'colleagues'. 
I've been using Mapstruct on my latest project at work and I must say I really like it. (http://mapstruct.org) Define a mapping interface (method with what goes in and what has to come out), mark it with an annotation, add the annotation processor to your build and you're good to go. 
Google has also lots of libraries in C++ - so I believe they also will use them for internal projects. Google is definitely a polyglot company! 
It would be awesome to have a \`good-first-issue\` tag on your github project.
I discovered awaitility a few months ago and I love it to test AMQP events. JsonPath is also an awesome library. Thx
Neat. So the purpose of the library is to provide a common structure for errors that will be serialized. Thx
I've used jooq in past projects and liked it. Feels just like writting SQL and it's spring integration is helpful. It's always nice to have alternatives to Hibernate
Every backend system for BMW and all other German automobile companies
ahah funny :)
Damn dude that’s awesome! Any tips or advice?
GMail (server-side), Netflix (parts in Groovy, but JVM), Twitter (parts in Java and parts in Scala, but JVM), IBM's Watson, almost all banking, hospital and public service software, almost all of Apple's server-side software.
:D 
Thanks.
to a beginner starting to develop games.
Framework or Tutorial pointers I assume
That's so amazing, thanks!
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
https://github.com/skyvers/skyve Personal plug for Skyve which I contribute to, the first open source low-code framework and is written in Java. Our company has used this for some massive production government applications with tens of thousands of public users. 
the dependencies contained within Spring-boot-starter-web or spring-boot-starter-webflux, the autoconfigurations contained within them will start the embedded web containers
Congrats! Don’t stop now!
[DBeaver](https://dbeaver.io/)
Congrats!!!that's great
1/10 trolling. Very disappointing. Try harder.
Thanks. Yes, libgdx. 
Thank you. I wont. 
You made it in what?
libgdx is awesome
Thanks for your support. I needed that after all the downvotes :)
Interesting, what does it do?
Why would I *not* use it?
The fact that Apache Commons Collections didn't support generics until November 2013 left a bad taste in my mouth. That's over nine years. Many of the uses of Apache Commons have been replaced with more modern implementations in the JDK itself or in Guava.
Java 10 got `InputStream.transferTo()` which completely replaces `IOUtils.copy()`.
It's just a marker tag for people new to the project willing to contribute but unaware of all the internals of the code. 
This has tons of charm.
I just meant as an example in this post. I'd be really concerned if you didn't use jOOQ. :) 
Wrong url. Maybe you were refering to [Mixins via runtime generation](https://github.com/SpongePowered/Mixin)
One thing that bugs me a lot is that Eclipse doesn't support hot-swap of lambda functions. I find myself writing imperative code instead of functional code just so I don't have to restart the application while debugging. I understand it must be somewhat of a technical challenge to support but I wish they'd find a solution so I can fully enjoy the power of Streams in Java...
Eh, I thought about adding a disclaimer, but then meh'd. Believe it or not, but I've recently written some pure JDBC code for a client that runs 3 queries and jOOQ would have been overkill! For that same client, I've written quite a bit of PL/SQL code too, where jOOQ doesn't even work. Heh! :-)
Interesting. I actively discourage substantial contributions, though (nothing wrong with patches for bugfixes). So, I guess that marker tag doesn't apply to jOOQ then?
Why not? Easy and non-critical patches are good issues for a beginner to get used to the project and create a great community. 
With what goal would I create "a great community"? And at what price?
Its still a very small niche. At this point you see compaines adopting it because they think they will be the next google by using it
The goal? To extend the use of jooq more easily as well as helping you maintaining the project (I suppose it's not an easy task...). The price? That's another point. I guess that depending on the quality and quantity of contributions it will be helpful or an incovinient. Anyway I feel that creating a great community around a tool is always a great way for it to keep alive and evolve instead of dying against a greater tool or just due to lack of use.
Here's what I find very useful when it comes to general utilities: * [Guava](https://github.com/google/guava) (already mentioned): "a set of core libraries that includes new collection types (such as multimap and multiset), immutable collections, a graph library, functional types, an in-memory cache, and APIs/utilities for concurrency, I/O, hashing, primitives, reflection, string processing, and much more!" * [Lombok](https://projectlombok.org/) (already mentioned): "a java library that automatically plugs into your editor and build tools, spicing up your java. Never write another getter or equals method again." * [jOOλ](https://github.com/jOOQ/jOOL) (by /u/lukaseder): "improves the JDK libraries in areas where the Expert Group's focus was elsewhere. It adds tuple support, function support, and a lot of additional functionality around sequential Streams"
Just Another Virtual App
nice job !!
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
just curious what other languages are used to develop applications for Android?
Biggest Python surprise is how shit it still is.
Nice! Congrats 😀
I believe the lack of traffic is also partly due to golang capturing some marketshare of strongly typed, performant library developers. Not complaining about java libs, just noting a possible reason. I would start to watch for java ports of the distilled interesting libraries that emerge for golang.
Preparing data to be loaded into an aircraft, pulling data from an aircraft and generating reports, apps that manage flight schedules, crew schedules, etc. General tools to make the airplane engineers’ jobs easier. I personally build java micro services in support of the airplanes you fly on. 
Worth knowing
ASM uses the visitor pattern. takes a while to get used to, but performs well and is flexible 
Turbulence is actually just the garbage collector working
Interactive Brokers TWS
&gt;LONG LIVE JAVA pls no
Thanks! I'd forgotten the name of this pattern. This is essentially what I was trying to do before which had the effect of shifting the complexity around instead of eliminating it. But, looking at it again, I'm not certain I did it correctly. I may have been trying to do too much with it. It's worth another try. 
Nice job, you should be proud. But I have to ask, is this the proper place to post this? It really doesn't have much to do with java. If the game were open source, maybe it'd be different, but as it is, this feels more like an ad than anything else. 
Quite an interesting idea. However, I'd be reluctant to use it. Most of all, I don't like it that `BeanScanner.find` can go arbitrarily deep until it finds the matching `Class`. This is too lax for me - it's too easy that it'll be returning something else than expected, especially after someone refactors the code. And a minor thing - I was surprised by one design decision, namely that abstract `Scanner` class has implementations for `walk` and `find`, but those implementations are then discarded by `BeanScanner`. These methods should be abstract in `Scanner`, and implemented in `StreamScanner` and `BeanScanner`.
Two of my own libraries: &amp;#x200B; [Apron](https://github.com/hupfdule/apron): Handier API for reading and writing .properties files with retaining all the formatting on writing [Kilt](https://github.com/hupfdule/kilt): Toolkit for converting I18n resource bundles to/from Excel sheets and generating a facade to access translated resources in a type safe manner &amp;#x200B; As you mentioned JCommander: It tried a lot of command line parsers in the past and didn't like any of them. But now I found [Picocli](https://picocli.info/) which does quite exactly what I expect from a commandline parser.
It's made entirely in java. Nowadays is all about Unity and Unreal. I thought it was nice to see a java game getting a small recognition.
thanks.
thanks.
On monday.
The majority of commercial buildings you walk into are controlled by [Niagara](https://www.tridium.com) (well... new builds and retrofits). &amp;#x200B; TD Ameritrade's Thinkorswim trading platform. I wouldn't be surprised if the major of trading tools are.
Could be a nice thing to combine with [jetstream-DB](http://www.jetstreamdb.com) 🙂 Afaic they don't provide a anything special for querying objects. 
Very nice. We definitely need good async jdbc drivers :) Have you got the chance to review [r2dbc](https://github.com/r2dbc/r2dbc-postgresql)? 
This thread is specifically about performance... Your primary issue.
Yes.
Libgdx, a framework for java.
What does Spring Boot have to do with this? Are you trying to read config information for the Spring context from a CSV or something?
nope. Actual data. How would you wire all beans together to receive data in spring app.
&gt; The goal? To extend the use of jooq more easily Do you have any evidence of a correlation between these things (contributor friendliness and growth)? I don't. &gt; as well as helping you maintaining the project (I suppose it's not an easy task...). From my experience, educating beginners (since you're specifically talking about beginners) is a very intensive task for me, keeping me off much more essential work. Secondly, those beginners are very likely to leave again for no apparent reason - my investment will be heavy, and useless. Thirdly, as you correctly supposed, it's not an easy task. The investment to bring someone to my level of understanding on jOOQ, Java, SQL would be substantial. There are two alternatives: - Hope for someone really good to contribute (which is a rather random event, and these people will leave for no apparent reason as well, as their priorities shift. In fact, there had been 2-3 such contributors many years ago) - Hire someone really good (which I'm going to do, stay tuned) to work with me on jOOQ full time and become as good as me or even better. Would I hire a "beginner"? No! Building something like jOOQ is not a beginner's task. Why would I want to spend the time I wouldn't spend on a beginner *employee* on a beginner *contributor*? A lot of people drastically overestimate the value of a "community" of contributors. From all my discussions with fellow open source vendors, I have rarely heard that the community contributions were of substantial value. It happens, but it happens very rarely, and mostly on platform products like Linux, PostgreSQL, OpenJDK. But even then, the contributors are by no means "beginners". Nor do they need to follow a tag that helps them identify interesting tasks. They know why they contribute, and what to contribute. &gt; The price? That's another point. I guess that depending on the quality and quantity of contributions it will be helpful or an incovinient. I've done this for 10 years now. Patches / bug fixes were *almost always* helpful. Contributions of features were *almost always* (with 2-3 exceptions) a pain. This is my experience, and it matches that of many other vendors I've met in these 10 years. This is not just a technical question. The time it takes for a contributor to understand the roadmap and strategy of a product is big. Again, an "expert" contributor could do this, but you're referring to a beginner who needs tags to help them get going. &gt; Anyway I feel that creating a great community around a tool is always a great way for it to keep alive and evolve instead of dying against a greater tool or just due to lack of use. I value your concerns. :) However, you should be aware that jOOQ generates a decent 6-digit revenue to Data Geekery and the community involves 250+ paying customers and roughly 10000 open source edition users. It's not going to die. Its use is growing every year. For more details, read https://business.jooq.org &gt; Edit: in the case of jooq for example, a bigger community would improve the adoption instead of every new spring project to be born using Hibernate and JPA as I always see. I usually feel difficult to introduce a new library in a project if it's now so well known even if the code is great and the solution it provides is awesome. In tha day to day, we, developers want to solve a problem but have not enough time to decide for the best solution if that implies learning a new tool. That's only my experience Is that a problem for jOOQ and jOOQ's existing community? jOOQ's downloads are doubling every year, and so are other vanity metrics. Could it grow faster? Of course! Would that be a good thing? Don't know! Hibernate grew way too fast. Too many people mindlessly use Hibernate much like many people mindlessly use Spring (oddly, you didn't question that choice). Perhaps they're really efficient by defaulting to the same thing every time. Perhaps they should have reflected on their choice just one moment. In any case, what this industry needs most (rather than a mindless shift from one tool to another) is more education about the value proposition of each tool. [I'm doing that as well](https://www.youtube.com/watch?v=wTPGW1PNy_Y) and many others are doing it, too. One thing is for sure. If jOOQ hasn't grown quicker, this has nothing to do with a subjective lack of an actively contributing "community". There are enough feature requests, bug reports, and patches. It has everything to do with these things: 1. An irrational distrust towards dual licensed software, including a lack of experience in making business cases (sad but true - jOOQ would already be more than twice as big if it were all open source, but I would definitely not support it as well as I do now, not making a very decent business out of it. See QueryDSL) 2. A lack of marketing efforts on my side over the past 3 years ([see this post](https://business.jooq.org/growth-is-not-the-only-goal/)) 3. A lack of understanding of the value of SQL in our industry (this is systemic and stems among other things from all the damage caused by J2EE in the early 2000s) I hope this helps :)
You can autowire data you get from a CSV in the same way as you autowire any other data. As to actually parsing the CSV, I'm sure googling "parse CSV Java" will give you plenty of results.
wow, thanks.
cool article, will try this tomorrow instead of the usual jhipster route 
Awesome! Never heard of Graal to be honest. I’m a QA Lead / SDET so have filled my schedule up with things around Test automations and the likes but will check if I’m free to check out Graal. Thanks for the advice too.
Maybe we don’t need a library for isEven or leftpad?
Spring, jenkys, eclipse, most jetbrains ide. Most famous website as Amazon, Google and Facebook, Twitter has a huge part of their back end written in Java
lmaooooooooooo
rekt!
Aw I like eclipse, I admit it used to be horrible but this years releases are pretty nice
Would anyone know the comparison with C++? How does java usage compare to C++
I like it as well, just think its funny that it is an application with the purpose of building even more Java applications. 
Yes, I am presenting on Monday [Always Be Running: Long lived and durable Java Services ](https://twitter.com/mjduigou/status/1038098430684327936?s=21) If you are interested in testing definitely go to Billy Korando’s talk on Junit5 . I saw an earlier version and really enjoyed it.
Thanks think I have that on my calendar already :)
RuneScape
Thank you, LOTS of good ideas here, and they do indeed apply to Java just as well. For my application, memory efficiency is the last thing I need to worry about. Managing complexity and reducing the opportunity for bugs is of the most importance. The advantages of (2) and (3) are not obvious to me but I suspect they'll be valuable food for thought once I get to play around with it more. Thanks again!
Use hibernate on the csv file. 
JCP still exists, it simply doesn't apply to Java EE, which was agreed when the tech was transferred to the Eclipse Foundation. No news here other than Eclipse Foundation is getting around to developing its own processes for Java EE releases.
I don't really have an answer, I'm just wondering why there's a spoiler tag on this?
Not a big deal, and this has been discussed in the past, but I wish the name, Jakarta, was something else that was indicative of a solid, innovative, reliable and maybe even enterprisy solution/initiative.
Yes, Java has supported sockets and web sockets for years.
Yes, Kafka is Scala. I've spent a few hours digging through that code.
Yes. Note that IRC servers don't need to connect, they get connected to. Perhaps you meant 'IRC client', such as for example an IRC bot. There are various; freenode's ##java has javabot, written in java (I think parts are now kotlin for funsies), and that is in turn based on pircbot. 
You can do most non low level stuff in Java. So yes of course you can. I recommend using a socket lib. Likely there's a few IRC server libs on github
? what issues are you referring to specifically? if you write your program correctly, there won't be. if you don't, then ... yeah, i guess. but that's up to you.
My post yesterday was somewhat misleading. Please see edited post.
If I was going to write a server from scratch I'd probably start with something like Netty.
It's been open source for years. 
I'd probably start with jackson-databind-csv if using Spring Boot because it already has support for Jackson.
great, thanks :)
Use JAXB on the csv, postprocess with Hibernate, and store it with Hadoop.
Java currently doesn't have pattern matching, but it's on the very near road map. Java 12 (due in March) has a `switch` expression, which is a step towards this language feature.
Hi, just commenting because I wasn't sure where else to ask: I want to get my cert ( [1Z0-803](http://learn.oracle.com/education/downloads/Exam803_SampleQuestion.pdf) ) in december. But it's notifying me that it will be replaced with 808 come next year. Is it still worth to go for it, or is it best to wait for the new program and study the new concepts that are being introduced? 
Flogger does not make JUL fast. It just sidesteps the issue by wrapping it in another library that does what JUL should have done in the first place. 
Jdk or jrm?
32 bit is not supported since Java 9. Try installing Java 8.
I am trying to install java 8 and versions before that as well no luck as such.
\+ Picocli is more actively maintained than JCommander
Do you have a Surface or Surface 2?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I agree with you but it looks like a lot of work.
You're using the 32 bit installer?
Take a look at [Object Albegras](https://www.google.com/search?q=object+algebras). Note, any recursive tree-walking approach is at risk of blowing the call stack. Recursion is also relatively slow compared to iteration. Consequently, I usually end up converting them to a stack-based iterative approach. This works well for Object Algebras as the transformation logic (the algebra) is already separated from the tree-walking logic.
It sounds like you had to open a port so people could connect to your computer at home. So, first, that has nothing to do with Java. Your router probably just blocks all common incoming ports, as it should, by default. However, being a server means having a port other people can connect to. Any program, in any language, that hosts a service on a port would need that port open. Second, you won't typically host a service from your house. Yes, there are. Security issues with sharing your home IP address with everyone. Also, it's against almost every ISPs rules, at least where I'm from. It doesn't sound like you have the programming or networking skills you need to do what you want to do. Here's what you do. Buy a VPS. It's a virtual server on someone else's network. You can often find them for less than $5 a month. Follow a guide to run Ubuntu, install Wildfly, and probably MySQL. Then start experimenting. There's a simple chat example in the JavaEE example set. Good luck! You have a long road ahead, but work through each issue one at a time and you'll learn a lot along the way.
There was a quick video on YT about some security policy changes at the admin level. That fixed it. Thankyou guys
That's not a Java issue, it's because you are running it on your LAN. You need a server with a public IP. It's the same no matter what language or technology to would use.
I'm not sure what differentiates an IRC server from any other server, but you're free to check out my networking library: https://github.com/jhg023/SimpleNet
Hopefully their process is easier to get involved in than JCP. Oracle’s terms for signing that have always been iffy.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I like the specificness of this.
In the scale I'm working in (&lt; 10k objects with a depth realistically no more than 10), speed and stack are not a concern. The Object Algebras look REALLY interesting, though I can see I'm going to have to spend some time studying them before I can determine their usefulness in my case. Thanks for the response! 
Well, the tournament is only available for coders in India. I had to specify this. Cheers!
Yeah, I made a simple IRC daemon as a hobby project with java and without 3rd party libs back when I was learning programming. 
Ah, ok. Weird. 
I'm 17, but would i be allowed into the Oracleone4kids? I think i read somewhere that it's only up to 16 year olds
JsonPath declares absolutely horrific dependencies.. For what on Earth does a JSON parser require Tapestry - a web UI framework?
Yes you can. In fact, this was one of the first real world tasks in my career. 
What version are you running at home? at the university?
Quick question: how are you sorting by depth? Are you calculating it on every insert or is there a cleverer way to do it?
Back in my day we used System.out.println and we're happy about it!
Is JFC able to attach to an already running VM? Having to restart a process to analyze a problem often isn't possible. Either because the process is critical and needs to keep running or because a restart would let the misbehavior disappear. Attaching it to a process at will would avoid an unnecessary performance hit and problems could be inspected when they actually occur. 
I have honestly never even thought about using a third-party library for logging, it simply never crossed my mind. Why would I need one anyway? I don't see how logging can become so complex that you're willing to trade 100% customizability just so you can use a library. Can someone give me some examples? I'm really curious as the fact that so many logging libraries exists must mean there are real needs for them.
Sounds like your Eclipse version is too old. http://www.eclipse.org/mars/noteworthy/#_assigning_stdin_to_a_file
[removed]
https://stackoverflow.com/questions/188547/eclipse-reading-stdin-system-in-from-a-file Should also do the trick. System.setIn(new FileInputStream(filename)); 
There's methods in `System` to do it. You can assign any `PrintWriter`.
https://www.reddit.com/r/java/comments/9fgigm/a_guide_to_logging_in_java/ 44 comments
this feels like deja vu https://www.reddit.com/r/java/comments/6g6yxw/query_java_object_graphs_in_a_typed_and_streamed/ the same user (lukas) posted the identical title/link in june 2017 
I have a library that has its own logging framework, and you can write an adaptor for its output, but the only method in the adaptor interface has just a single string, the message, as its parameters. Not even a level.
Yarp. One of the first things our software does is to set up a three-way `tee`-like print writer and then assign standard error to that stream.
I saw someone create a Factory Factory once. Once.
I hate you. I genuinely hate you. Unless you're writing a console application, never use `System.out` or `System.err`. In particular, because it's impossible to rotate a log file without restarting the process. 
Thank you!
If you need anything, you can always ask for help 
Well, carry on then. But I'm watching you. ;)
That's what I originally did (just a `while current_parent.is_some() { depth += 1; current_parent = this.parent; }`, going up the tree from the current node until you find the root element), but this is O(n²) worst case of course, since you have to traverse each parent node on every insert. But it works reliably, and I'd just use it first to prove correctness (don't over-optimize things). I would definitely not calculate-on-every-insert, I'd insert all nodes once and then calculate the depth. I am not sure if this algorithm has a name or something, but I did came up with a [O(n) way to do it](https://github.com/maps4print/azul/blob/f9a94a9c34a2418c5afbdb6d1a9f110b56e37712/src/ui_solver.rs#L708), which took me a bit of time to discover though and is maybe too specific to my situation to be applicable generally. The situation is this: my tree has exactly one root node, looks something like this: 0 - root |- 1 - parent1 | |- 2 - child1 | |- 3 - child2 | '- 4 - child3 '- 5 - parent2 '- 6 - child1 And what we want as a result is: 0 -&gt; depth 0 1 -&gt; depth 1 5 -&gt; depth 1 Note that all other nodes like 2, 3, 4 (that don't have kids themselves) are excluded, because I was only interested in sorting the parents, not all nodes. If you want all nodes, you can calculate the parents first, then do a second pass to add (parent_depth + 1) to all children, respectively. So what I do is that I have a list of "parents" and a list of "next parents" (i.e. nodes on the next depth level that have children themselves): // Complete list of all parent nodes (returned from function) all_parents_with_depth = [] // Root depth level only has one node (the root node of the tree) parents = [(NodeId(0), Depth(0))] // Parents of the next depth level next_parents = [] (Since I know that I have a single root node, and it's always the first node, I can fill in 0 here). So then I fill out all the next_children - which I know will all have a depth of 1. let depth = 1; while true { for parent in parents { // Iterate over all children, filter out all leaf nodes, retain // only the nodes that are parents themselves for child in parent.children().filter(|child| child.is_parent()) { next_parents.push((NodeId(current_child), Depth(depth))); } } // push current parents into complete list all_items_with_depth.append(parents); Now we have a situation like this: all_parents_with_depth = [(NodeId(0), Depth(0))] parents = [] next_parents = [(NodeId(1), Depth(1)), (NodeId(5), Depth(1))] If next_parents is empty, we know that there are no child nodes that themselves are parents, i.e there is no next depth level and we are done. Otherwise, we "promote" the `next_parents` to be the new `parents` for the next loop iteration and increase the depth counter. if next_parents.is_empty() { break; } else { *parents = next_parents; next_parents.clear(); depth += 1; } } return all_parents_with_depth; ... and then it loops until `next_parents` is eventually empty and we break from the infinite loop. This way I only touch every node once. I am not sure if this a very orthodox way of doing it or if this algorithm has a name, but it's simple and it works. A side effect is that since the ids in the original DOM tree were sorted-by-order (of appearance in the DOM tree), the parents in the returned sorted-by-depth list are also sorted-by-order. You can do it without ID system and even with a modifiable tree, of course, by storing references to the nodes, instead of their ID. It's just a cache-locality thing (and Rust is pretty anal about when you can store references to things because of mutability rules / dangling-pointer prevention, so IDs are easier to work with). If you want the depth of all nodes, you can of course extend this a bit or do a second pass to fill in the depth of all leaf nodes. But I don't think there's a more efficient way of getting the depth. More generally speaking, ask yourself what properties your tree has. Are items sorted or in a certain order, how many parents vs childs do you expect to have, how can you easily filter out unnecessary nodes, do you expect the tree to be modified later or not, etc. And use pen and paper to sketch your tree out, that has really helped me with coming up with this "algorithm" in the first place.
For example you are writing a library. You want to add log statements in your lib in case something goes wrong. If you write custom logger it won't connect to the rest of the logging system the client of your library uses. So they end up with two logs. One is that your self written logger, the other is probably a logged through a standard api like slf4j. This means the program flow is also split in two logs, youll have hard time following what happened after what. When they change logging conf they will have to do it in two places. When they want to change logging level via jvm argument, they probably need to add an extra argument for your library. There's also a chance your library doesn't provide an implementation that fits their needs, maybe they don't even log to a file. Usually libraries only ship with logging api in them, not logging implementation, so people can use their own preferred implementation. Even if you don't write a library, but just an app you'll probably face the same problems with custom logger, since you have some dependencies which use some standard logging api. That aside. Using something like slf4j means you need to do absolutely nothing when adding a new dependency that also uses it, it adapts to your program logging conf and no additional code or settings needs to be added. Its basically plug and play. It just makes life easier and I wouldnt imagine any other way.
Even better with color! JANSI - [https://fusesource.github.io/jansi/](https://fusesource.github.io/jansi/)
You would hate me then. Use my own Gui and IDE (3rd one in Java. Started with real time pre assembler on the Amiga). 
You would hate me then. Use my own Gui and IDE (3rd one in Java. Started an IDE / assembler on the Amiga. Pre assembled your code as you entered it in).
Are you a library that uses their own logging system? If not, then I don't care.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
To me one of the key features is that they support low-cost string formatting. This means that you can litter your code with `debug` and `trace` calls that don't impact performance (much). With an optimized Logger, the cost would be a method call and a quick check which log level is enabled. A naïve Logger might always interpolate the arguments into the message. That overhead will pile up quickly and force developers to trade off performance with logging, which in turn will earn them the hate of the poor schmucks that have to debug these applications.
assigning levels is kinda arbitrary
That is a non-issue for optional dependencies and it looks like its to support multiple json serializers.
Make a single call with a list, and let the DB service team batch it however they feel like. This isnt a third party API you don't control! 
I like to peruse [https://mvnrepository.com/](https://mvnrepository.com/) every now and then to see what libraries people are using that I haven't heard of.
Garbage site that throws a pop up that I can't escape on mobile without filling out an email.
Not if you learn what the levels are for. Trace and debug for logging as you develop (or the library consumer develops), so people can see the flow between methods. Info for regular app activity. Warn for issues that don't prevent the business logic from continuing but might be symptoms of problems. Error for issues that prevent the business logic from continuing (like leading to a 500 in a web app, the rest of the requests can be served). Fatal for issues that prevent the application itself from continuing. Logs important details about the issue before the process exits with a non-0 exit code.
[SweetHome3D](http://www.sweethome3d.com/) is quite popular flat/house design application.
Some are embedded in a bigger framework, like slf4j in Spring, logback allow multiple environments configuration, which is very convenient 
for an end user code that's fine, but for a library developer we can't tell the difference between warn, error and fatal, because those generally depend on the use case. much better to have callbacks that expose that info to the user app (though that's hard and i definitely have taken the easy way out as often as not) whether trace, debug and info are useful is a larger debate that i'm not up for tonight 
BONUS: [looks](https://imgur.com/a/XDUqBwE) amazing too!
Logging can become really complicated really fast. It's just not worth it spending any time writing it yourself.
The problem is that SUN made the worst decision they could do when introducing the java.util.logging API. `log4j` was already established at that time, but SUN neither tried to integrate it into the JDK or create a new API that with some improvements like they later did when integrating Joda-Time to java.time. They made a ridiculous implementation with a much less useful API that was only wildly inspired by log4j. The was the source of all problems. Then Apache decided they created commons-logging (which was a very bad decision). Other logging frameworks evolved and a new logging facade slf4j occurred and log4j2 itself now has an API (as logging facade) and an implementation. And google made flogger... However the source of all evil is that java.util.logging is such a bad logging framework an is only an implementation instead of an API specification. If they had done it right at the first incarnation, maybe there would not be any need for newer logging frameworks. But now we have this mess and will never get rid of it. And to make my point clear, as lots of people advocate to always use slf4j for libraries: An external dependency only for logging is not something that a library should introduce. And if it does: I like the log4j2 or even the flogger API more than slf4j.
System.out.println is synchronized. 
The official reason is not to constrain JavaFX development to Java roadmap.
Yes, I mean Oracle JRE.
Got a class loader bug I have not been able to resolve when I upgraded to Java 9 or later, posted on Oracle's forums, searched the hell out of Stack Overflow, etc and none of the "solutions" worked for me. Don't have time to think about it right now. So staying with Java 8 ....
Again, t he reason is that if they'd put this platform dependent code into the Oracle JRE, other JREs wouldn't be able to support JavaFX. Now that OpenJDK has pretty much became the new standard (it kinda always was, except on Windows), and there are lots of alternative JDKs/JREs, it makes sense to leave the platform specific code in JavaFx so it can be used on every JRE/JDK. &amp;#x200B; I'm not sure however why they don't create one fat JavaFX jar that contains the platform code for every supported platform.
Thanks for sharing
Because it is still the same article that's been reposted twice in the last 4 weeks.
 &gt;I'm not sure however why they don't create one fat JavaFX jar that contains the platform code for every supported platform Probably because with maven/gradle, it does not matter much how many jars are included in a build. No one should be forced manually download jars anymore. 
But also buffered.
You can still package and distribute as a single jar I think, but you'll have to put it together as part of your own build process. The problem is that it'll be a hundred or so MB too big probably, hence their decision to split it up. The native components are pretty huge.
However when you use Maven or Gradle, doesn't that mean that separating the platform specific code into separate jars also complicates the build process a lot? Because then you'd need to have platform specific dependencies and build platform specific artefacts?
If I'm not mistaken, you can bundle all platform dependencies in the same fat jar or distribution at the same time. They do not overlap or conflict with each other. You only need to separate builds if you want smaller, but platform dependant jars. 
It's a bit of a mess. The automatic "Java 10.0.99" update is signed as "Java SE Runtime Environment 8 Update 191" and "More information" links to the [JRE 8u191 release notes](https://java.com/en/download/java8_update.jsp), but -- after removing every installed JRE -- it doesn't seem to install anything. This isn't particularly helpful for users who expect to be able to run Java applications.
Agreed, the authors who wrote the books before Oracle branded the exams were excellent.
The last major change, as in many large changes, in Java was Java 8. If you pass your certification in December and retain what you learned ( brush up once a week, etc ) you will have very little new to learn for the next exam. However, the certification exams are "trick question exams". They test people on "the letter of the law" of a question and a Java rule deliberately putting in questions that look right to people who just use Java but who don't think about the rules. FYI, the best advice for taking the certifications is to "think like a hostile lawyer" with each question. In any event, many people take the exam several times before they pass because of this. If you take the exam more than once you may fail on questions you previously got right. In other words, these are the things I would think about to make a decision were I in your situation. Whatever you do, SAVE YOUR NOTES. Save them in several places so they and all the work you put into them, do not get lost. Those notes will be an excellent tool for polishing yourself up for job interviews.
&gt; source of all evil is that java.util.logging is such a bad logging framework Bad how? It has all the capabilities of these other logging frameworks - levels, custom formatting, handlers &amp; custom handlers - with the one possible exception of not having a *printf* style call for each level, but it doesn't require any external libraries to keep up with. How exactly is it so bad and that log4j or slf4j are so much better? 
Yup, SimRel 4.9 was released before Java 11 was released, so you can add the support from the patches update site http://download.eclipse.org/eclipse/updates/4.9-P-builds/.
If you don't know what an error looks like vs info it sounds like you have some god objects and other code smells.
That said, how do you get the jars/dll's for all platforms when on Windows using Maven? The coordinates are e.g. &lt;dependency&gt; &lt;groupId&gt;org.openjfx&lt;/groupId&gt; &lt;artifactId&gt;javafx-controls&lt;/artifactId&gt; &lt;version&gt;11&lt;/version&gt; &lt;/dependency&gt; 
Will notes or videos from the talks be available in the future for those who cannot attend?
For each platform, you would include a dependency with an explicit classifier (win, mac, linux). I've put together a quick tutorial on how to make a cross-platform jar, irrespective of what platform you are using to build - [YouTube](https://www.youtube.com/watch?v=w_PsCNqqcE4).
I've used jEdit for years. It was a nice and relatively capabable tool at it's time, but this time is definitely over with Visual Studio Code. jEdit feels like Java GUI from 2001.
If Kotlin is an option, you could give [KotlinTest](https://github.com/kotlintest/kotlintest) a try.
That's what PCF does.
I've seen that Java developers think Linq is SQL syntax: var numbers = new[] {1,2,3,4,5,6,7}; //Sql syntax var result = from n in numbers where n &gt; 3 select n; // But we mostly use this syntax var result = numbers.Where(n =&gt; n &gt; 3); Linq is basically a series of extension methods.
Configuration is a nightmare since it is controlled by magic annotations that can be spread across dozens of classes. Spring boot doesn't really improve that. When you have an issue it can be very difficult to find where things are configured. Throw in camel routes to several rabbitmq exchanges and configuration is an obfuscated nightmare. 
Awesome thanks!
&gt; what an error looks like vs info you're putting words in my mouth - i wrote "the difference between warn, error and fatal" but as an example, in one case, a user provides me a runnable and asks me to run it, but then doesn't wait for or use the result (available through a callback), and the runnable throws an error, what log level do you use ? it completely depends on what the user wanted, which is info i don't have for the non-opinionated libraries that i develop and use, that's more the norm than the exception opinionated libraries are another matter and logging is much more straight forward 
The var syntax came out in C# 3.0 which was released in 2007. C# 8.0 which is coming soon includes Span&lt;T&gt; and Memory&lt;T&gt;. https://msdn.microsoft.com/en-us/magazine/mt814808.aspx 
For a library, it could be argued that one should have no need of logging. 
&gt;intended for the general public There aren't a lot of client applications written in Java. Microsoft's history with Java was a contributing factor. Expecting a JVM to exist on the client is unreasonable. Trying to make a UI work cross platform has never been very good. That said, I think things are looking up with the new AoT/jlink stuff Oracle has been releasing in the past year. Being able to run without a preinstalled JVM is going to change the game for developers who want to target desktop users. 
Would suggest adding some screenshots in the GitHub repository Readme file.
Is there an Nivdia-specific reason this is only for Linux?
The contrast on that slider needs to be adjusted. It's so hard to distinguish the control from the app background
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
 Docker and Kubernetes works completely independently from the language they are using. Java, C#, Python, Go, any language will work with those tools the exact same, that can not be used for or against any one language. They are just powerful tools.
Spring is a deal facto standard for building backend applications in both web and middleware world. There are couple of interesting alternatives like Micronaut and Lagom, but at this time nothing can beats the scale of spring ecosystem and community.
"Java's open source community": [https://github.com/dotnet](https://github.com/dotnet) "ability to run host languages like Scala or Kotlin": F#, [VB.Net](https://VB.Net), R#, IronPython uh... [https://github.com/Azure/DotNetty](https://github.com/Azure/DotNetty) &amp;#x200B; Care to explain what problems we struggle with in C# that is super easy to do in Java?
You can use [https://oracle.rainfocus.com/widget/oracle/oow18/catalogcodeone18](https://oracle.rainfocus.com/widget/oracle/oow18/catalogcodeone18) to figure out which sessions run at what time in any of those 6 rooms that are streaming.
Wouldn't it be weird, but also kind of interesting, to have `Enum&lt;T&gt; where T : struct, unmanaged`?
&gt; I'm shuddering at the thought of explaining to novices who have never programmed before how to manually install jdk-11 I think a step-by-step guide should be managable even for novice programmers. Download, extract, copy, set JAVA_HOME. Thats it.
&gt; But what do I do when 1.8 is removed from distribution? It depends on what exactly is your goal. If you need to teach Java in particular, you can try [AdoptOpenJDK](https://adoptopenjdk.net/) if it stays alive. You could also build a VM image with everything set up and have students run that. If the language doesn't need to be Java, it might be worthwhile to consider switching to Python. Many universities these days teach it as their first language, and it's likely to be much simpler for the kinds of things that a novice is likely to do (small scripts).
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Hi, I been studying Java also in a small period of time like yourselfe. And I think the best way to learn is by making a program you enjoy making, even if it already exists. For example I started doing a game with no UI, everything on the console, the best optimized way possible, made tons of perfomance checks so the code would be more smooth. So I think you should start doing something like that, and basically evolve in stages. Since my program is already good without UI. I will add the UI now and always test the performance. When you start making a program have this concepts in mind: SOLID; Polymorphism; Interface vs Abstract classes; Perfomance testing (Also always search for different ways to solve a problem, you could always do if's to solve most of the problems but there are other ways to solve it, wich make the code cleaner and possibly faster on the performance tests); OOP. There is no problem in using an IDE btw, I personally use InteliJ, I'm transictioning to VS code simply because my subscription will end soon. Also an IDE makes you more efficient at programming, you just need to understand the syntax and the logic, and you will be fine. Also make sure to use git a lot so you get used to it. If you want to share the project with someone in provate use Bitbucket it's a very good tool. &amp;#x200B; Hope this helps you a bit :)
It's well known that people who share test questions have their wee wee cut off by Duke in the night. It's not done. Duke has no soul. He doesn't even have eyes. Look at him, up in the left there. The Pillsbury Codeboy. Mess you up.
This article is written by someone with a vague comprehension of English.
I am in school for Java right now, tough language, great career opportunities.
Nothing to do with csproj, both libraries and Console apps have one. A Console app is a library with a main method, so that behavior is by design. if you want to make it executable, make it a Console app.
I started by making a chatbot, a text RPG, and an encryption program. Programming is a superpower. Might as well have fun with it
I use sdkman to manage the versions of all my jvm related tech
Yeah... those two examples compile to the exact same code anyway. The only time anyone uses 'query syntax' is when doing joins, because otherwise the generic soup is just painful.
Isn't that the VM that runs 8x faster than JVM? For free; both development and production? Is this for real? Thanks, I thought their product are all paid so I never actually bother to check them before.
It is definitely possible. I am a Java developer with no degree; I am 100% self taught. I got started by programming things I was interested in. And I wrote many iterations of the same programs. Each time I rewrote it, I would be making some sort of improvement to the code. It got easier and easier. But I spent a LOT of my own time working on this skill. Be prepared to do a lot of reading and a lot of coding. The r/programming sub is a pretty good place to learn a lot of things from. And Java is a language that will get you a good career. Work hard and you'll find your way in! But be prepared to have your resume passed over because you don't have professional experience. To make up for it, look for internships, and have your best work out on a public git repo somewhere. Good luck!
I started our writing a long-winded answer, but I'd rather just add some weight and emphasis here. This post is 100% correct, but it fails to stress just how necessary the advice is. Hands on experience building something end-to-end isn't just a good idea, it's pretty much the necessary and sufficient condition for getting into the field without a degree. Also, for OP: don't waste time on the Oracle certification. It's basically a scam, and no one cares about it.
That's not necessarily true. For a small org that may be mostly maintaining internal software, this could get him in the door. And without a degree, some sort of certification is a must. 
I've only got two-year degrees in electronics and data processing and haven't had trouble finding work. I'd say the thing that really got me started was working on a MUD back when those were a thing. Working on a hobby project is great practice for working on a professional one.
&gt; For now I can direct them to use Java 1.8 since there's nothing in Java 11 that a novice would need. But what do I do when 1.8 is removed from distribution? I'm wondering if we'll start to see IDE's like eclipse come with open jdk bundled with them in the future. That would make the most sense.
Just use OpenJDK. 
The type of jobs where Java is used generally have a higher barrier of entry than typical web development / front end jobs. So I want to caution you that while Java is a great language to start out with, it might actually be quite hard to get a Java job with no education and experience. Especially in the UK where education is relatively cheap. That said; [this mooc](http://moocfi.github.io/courses/2013/programming-part-1/) is a great free resource that gives a great introduction in OO programming in general. 
&gt; There is no problem in using an IDE btw, I personally use InteliJ, I'm transictioning to VS code simply because my subscription will end soon. FYI: IntelliJ CE is free. 
Building scalable servers that parse binary protocols like Cursor on Target. Kinda hard to do with C# when you need a linux server. 
/r/SuggestALaptop This subreddit is not for asking questions about hardware or Java programming.
[removed]
Mainly just documentation for C# libraries is the real struggle. 
"Runconf &gt; common &gt; "input/output file" seem to configure the "System.out" and "[System.in](https://System.in)" global variables. Usually, to mimic "java Xyz file.txt", you use the "Runconf &gt; Arguments &gt; Program arguments" text field. These arguments you retrieve in your main(String\[\] args) method.
But I'm not sure how accurate - from what I heard: * Oracle will provide builds, but support them for 6 months only * if you need longer support you have LTS, which is paid * OpenJDK devs already backport fixes to older versions (even for older releases), but they do not build them * AdoptOpenJDK is solution to the building part * apparently there won't really be something like Oracle JDK - it will be OpenJDK but with Oracle support Please correct me if I'm wrong
Openjdk has been available for years and the license is unchanged. 
Skip to the 12 minute mark for the action to start.
Not sure where you heard of that performance claim, maybe you're thinking of their zing garbage collector which is not free. 
&gt;there's no such thing as a java JDK anymore, right? You're confused. What is a "Java JDK"? A JDK is by definition a "Java JDK" as the J already stands for Java.
It's not just about Java anymore, so it wouldn't make sense to keep that name. If you check the schedule linked in OP's comment, you'll see that half the sessions are about Oracle products other than Java, like Oracle Database, Oracle Cloud, Oracle Stream Analytics, etc.
&gt;maybe you're thinking of their zing garbage collector which is not free. Alright, no longer interested. Thanks anyway.
You meant “Java SDK”, right?
caveofprogramming.com - Do all of the java stuff. It's as hands on as it gets. He doesn't waste any time with idiotic wanna-be explanations that cause more confusion than they help and he knows what he is talking about.
Thank you guys , all of you , very helpful 
Oracle has communicated that at the beginning of the year. 
Where's the ATM machine?
I’m currently doing the same thing and I’m taking a java class this semester. I highly recommend Team Treehouse and going through their Java track. Alternatively there are some good YouTube videos out there. Remember it’s a marathon not a race. It’s going to be frustrating at times but keep with it because it’s really rewarding. 
Wrong subreddit: /r/learnjava is the place to ask such questions. There, you can find superb free tutorials in the sidebar (old reddit only) - in order from best: * MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html) from the University of Helsinki * [Java for Complete Beginners](https://www.udemy.com/java-tutorial) * accompanying site [CaveOfProgramming](http://caveofprogramming.com) * [Derek Banas' Java Playlist](https://www.youtube.com/playlist?list=PLE7E8B7F4856C9B19) * accompanying site [NewThinkTank](http://newthinktank.com/) 
Well, at first, my advices will be: &amp;#x200B; * Don't be afraid to go hardcore and study raw stuff like Servlet, JSP, concurrency the hard way with command line and text editor. You don't have to re-invent the wheel, but knowing what's under the hood will be a great help in your Java career. * Use a text editor like Vim at first, that's a great way to memorize the important stuff, you can always use any IDE to save some time later. * Be curious and try to break things, that's a great and fast way to learn. As for the learning materials, my recommendations are: * Core Java Eleventh edition * Modern Java in action second Edition * [The "Official" Java tutorial by oracle](https://docs.oracle.com/javase/tutorial/) Hope The helps
Actually, I'd recommend the MOOC over CaveOfProgramming as the course goes far deeper.
Eclipse is fine but many people seem to prefer intellij, he has indeed much more shortcuts and a clean interface. But again using a text editor is a better way to learn programming, IDE are fine when you are familiar with programming and want to save some time :) So fire up vim or even notepad and the java compiler will take you five minutes at max :) 
Software engineering will definitely be for the long run haha. A marathon it shall be. 
Not that certifications or degrees or any of that aren't *useful*, but my experience is that a degree does not mean you've mastered core programming techniques. After decades of actual practice I'm still learning new things--probably sometimes even things other people consider elemental. And honestly I think anybody who *isn't* doing that is doing himself a serious disservice.
If you're studying Java specifically I recommend getting Josh Bloch's [Effective Java](https://www.amazon.com/Effective-Java-3rd-Joshua-Bloch/dp/0134685997). It explains the rationale behind literally everything I think I've seen in that ecosystem, and is one of the better programming books I've read in general.
It's super useful. I now write a dozen one-liners every day as tiny helper programs to help me accomplish the larger tasks I'm working on. I now try to convert any problem I have to a string problem that I can solve with a one-liner and then convert it back to original problem.
Learning JavaScript is pretty good advice since it's useful in its own right, but honestly any company that expects a Jr. Java developer to have any kinda deep insight is being just unreasonable, and probably isn't a very good place to work. Everybody starts somewhere, Java developers included. That said, for anyone wanting to learn design patterns, I suggest the classic GoF book: [Design Patterns: Elements of Reusable Object-Oriented Software](https://www.amazon.com/Design-Patterns-Object-Oriented-Addison-Wesley-Professional-ebook/dp/B000SEIBB8/ref=sr_1_1?ie=UTF8&amp;qid=1540297032&amp;sr=8-1&amp;keywords=gof+book). Just. Please. Promise me if you read it you won't use Visitor for anything ever.
For those who don't have enough knowledge and just want a working JRE which is required for certain programs, which version does one need to do have installed ? The latest 8 or 11 or both ? 
OpenJDK will not back-port security fixes to previous releases. If you are in a situation where you can always been on the latest release (as in: pretty much switching day of release), then this works. If not, the default answer should probably be AdoptOpenJDK.
[This document is my current favorite on the subject](https://docs.google.com/document/d/1nFGazvrCvHMZJgFstlbzoHjpAVwv5DEdnaBr_5pKuHo/edit). It was authored or signed by quite a few Java Champions, and seems to be quite comprehensive. 
which is openjdk
Good point about usefulness for testing. BTW. `Scanner.find` reminds me of [JQuery.find](https://api.jquery.com/find/). Yes, going down one level was what I though about (cf. [JQuery.children](https://api.jquery.com/children/)). But I suppose such a method would not be as useful as `find` because going one level down can quite easily be achieved with regular `Stream`s. As for `Scanner.walk` \- I overstated that the method is discarded. You're right that it's reused and that it would be better off as a separate protected method (named e.g. `filter`, `filtered`, or `ofType`).
Cool! Saving for later 
Great write up ! Thanks for sharing 
As a professional Java developer I do not "install" Java. I keep multiple versions of Java. I have several setups of Eclipse. Each Eclipse is pointed to a specific version of Java that it runs under by editing eclipse.ini. Within Eclipse, under Windows --&gt; Preferences, I will set up several versions of Java. I can then compile or test a program against multiple java versions. On Windows or on Linux it is possible to run multiple instances of Tomcat. On Windows by customizing dot-bat scripts which set up the pathnames and then run the provided Tomcat bin scripts to install (or remove) each Tomcat service instance. On Linux by using customized systemd unit files for each Tomcat instance. Once services are removed, there is nothing to "uninstall". I can throw away a Tomcat folder, or a Java folder (if it is no longer referenced), or an Eclipse folder. Because they were never "installed". But I do understand your point about new students. They would only have one Java, one IDE of some kind, and possibly a server like Tomcat depending on what you are teaching. Nonetheless it is possible to set up without installing anything. &amp;#x200B;
I've never heard of their VM running faster. [Here's someone from Azul breaking down the why and how behind the Zulu builds.](https://www.reddit.com/r/java/comments/8jvv8e/what_would_be_the_reasons_to_use_the_zulu_build/dz2zzc8/)
The things tested on the Oracle certification are both too basic to be proof of competence, and too specific to be necessary for competence. I want to hire a programmer who understands the big picture idea of how object construction works. I couldn't care in the slightest if he happens to remember the exact order that Java does things in - you don't use that knowledge most days, and as long as you're aware of the concept, it's a matter of a couple minutes work to remind yourself on the rare occasion that it matters. I'll go a step further - I don't want anyone writing code that depends on that sort of detailed knowledge unless it's the *only* way to do what they're doing - that's not how you write good maintainable, readable code. While the Oracle certification tests for specific knowledge of all these details. It doesn't actually test for understanding of the concepts except indirectly. Since it only tests for knowledge of how Java does it, it doesn't really test that the candidate understands the system as a whole. Basically, the Oracle certification tests if a candidate understands the 'whats' of Java, but not the 'whys', and understanding the 'whys' is what makes a good developer.
Don't confuse Zing and Zulu. Zing is Azul's commercial product. A JVM with a GC for workloads using hundreds of gigabytes of memory with superior GC performance. Zulu is a free binary build of the open source Open JDK.
I guess no one is allowed to make money on optional components lol. FWIW Zulu is easier to get and install than oracle jre/jdk. It's also free. It's just openjdk in a nice package after all. 
Don't confuse Zing an Zulu. See my post above.
Don't confuse Zing an Zulu. See my post above.
&gt; Promise me if you read it you won't use Visitor for anything ever. Oops, looks like you misspelled "Singleton"!
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I am? I'm talking about Zulu OpenJDK builds...
We are licensees of Zulu Embedded and get our updates within a few days of the Oracle CPU. Not all platforms at once generally but in roughly popularity order within a week to 10 days. I don't recall any particularly long waits.
Learn how business works, learn how organizations work, learn how people work, learn how computers work, learn how networks work, learn how these things work together.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thanks! Downloaded notepad++ haha. Time to start working on it!
You mean InteliJ Community?
This is Mark Richard's QA on how to transition into an architect role. I send this to my clients who are trying to grow architects from their in-house pool of developers. [https://www.youtube.com/watch?v=JV8HNsFWHD4](https://www.youtube.com/watch?v=JV8HNsFWHD4)
Thanks a lot for sharing this. 
I dont get it, why?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Hibernate is an ORM tool, what does that have to do with parsing a csv file?
Parsing csv has nothing to do with Spring boot, try using a csv java library, here is one: https://commons.apache.org/proper/commons-csv/
I always load my csvs into a dB and use hibernate to query the data. But you are free to use whatever tool you want!
+1 this looks really good
That's great, but OP didn't ask for help inserting csv data into a DB. They asked for help parsing and displaying csv data.
Find a good architect in your area and buy them lunch once a month. A great easy way to get a real-world perspective on what problems are being solved, what new technologies are being used, who’s looking for architecture help, etc.
Because microservices are, as the name suggests, services that are designed to be lightweight and of small size. It's hard enough to keep that promise in a Java application as it is (which was one of the reasons for project Jigsaw). Spring has a reputation for it's extensive use of reflection and huge call-stacks. Then also running that application inside a Docker container won't exactly help with the matter.
That is up for interpretation. Just from Wikipedia alone: &gt;In a microservices architecture, services are fine-grained and the &gt;protocols are lightweight. But also: &gt;There is no industry consensus yet regarding the properties of &gt;microservices, and an official definition is missing as well.
\&gt; In a microservices architecture, services are fine-grained and the protocols are lightweight. &amp;#x200B; That's saying that the API is small because it has a small scope of responsibilities. 
That is correct. Now I suppose it wouldn't make sense to expect a service with just a small scope of responsibilities to be (in general) of smaller size / memory footprint?
Yes. CE stands for Community Edition. 
Smaller is relative. Smaller than a monolith? Sure. But it doesn’t have to be tiny. 
Unless your microservices don't see much traffic, you're going to run out of CPU long before running out of memory for the vast majority of microservices. Even using java which uses relatively more memory that some other languages. 
I took an EA position and was disappointed. There’s a difference between software architecture and EA. At least in my experience. For me, EA was all about org modeling (TOGAF) and platform planning. So, lots of diagrams of organizational hierarchies. Lots of cataloging and inventorying software capabilities, dependencies, interactions, etc. Lots of developing timelines for stuff like “Ubuntu LTS for version 11.10.9 expires on April 3, 2020. So we need to begin testing with version 12 by January, which requires us to upgrade Oracle and switch to Java 10 by October.” It was interesting at first but really was very non-technical. It did *NOT* involve designing software. It’s a higher-level perspective than that. Also TOGAF certification is one of the biggest rackets I’ve ever seen. Surely it’s different from one place to the next, so YMMV.
You should let all of the architects at Netflix know that they are doing it all wrong
How would you deploy something like this to AWS elastic beanstalk? Upload one jar per service? Super jar?
Very much this. Organisations don't want their enterprise architects to be beholden to the business units, but the actual development programs and the program portfolios are most often actually driven by the business units under the surface, even if they are managed on the C-level or VP-level, and implemented under IT's guidance or with IT staff. If you want something satisfying to do as an EA, you can probably book the same meeting three days a week with new development teams, titled "How to actually get some development done inside XYZ corp's organisation and infrastructure" and tell them how to get things done inside the lines, and how to streamline the process of applying for exceptions.
https://docs.oracle.com/javase/tutorial/essential/concurrency/sleep.html
 try { Thread.sleep(1000); } catch (InterruptedException e) { log.error("Does this every happen?", e); } 
Off by one error
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Code, yes. Almost everything is based off the OpenJDK repo these days. But the builds and backport commitments are the important things.
It should be if you're following single responsibility practices
https://bugs.openjdk.java.net/browse/JDK-8073439 (Add Thread.sleepQuietly et al to make proper interrupt handling more convenient)
What's the purpose of this? Do you want to do something in a second? Or do you want to actually stop the program? Usually the former suggests a better design. Use a scheduler https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ScheduledExecutorService.html Use sleep for the other option as described in other comments.
Are you using hibernate/jpa? Maybe creating object massively and persisting them before the unit tests will work. Also, its possible that you could reorganize your tests to insert mockups/stubs instead of going directly to h2? Might be a better way depending on your particular DAOs
What does enterprise me specifically? Actually what makes a language "enterprise"? It's such a marketing, meaningless term and Java is very much full of it (EJB anyone?).
You probably have to manually type them somewhere? What format are they currently in? If they are (or can easily be) in json, xml, yml, or csv (which you can easily do from excel/google sheets) then you could write a method easily to deserialize from that format into a POJO and the. Save all those jpa POJOs to H2
&gt; The correct action upon catching this exception is to end the thread I don't think interruptions are designed to cause threads to exit - they're designed just to get them out of blocking operations.
/r/javahelp is the place for such questions. **Removed**
There's about a 75-95% chance that you are doing something you shouldn't. Instead of a sleep, or artificial delay, you want to make your software event driven. Why 1 second, why not 2 seconds, 3 seconds, 30 seconds? You are going to likely meet conditions that exceed the use case, unless this is homework or something... then carry on.
I always liked DbUnit approach: https://examples.javacodegeeks.com/core-java/junit/junit-dbunit-example/
I’m horrified but impressed.
Pics? Sounds cool.
For anyone like me who does not give a crap about the code. Basically instead of declaring, setting the width percent and adding them to the layout you just do this with my method: `myMethod.addConstraints(yourGridPane, RowConstraints.class, 10, 20, 30);` &amp;#x200B; Which replaces this: `RowConstraints row = new RowConstraints();` `row.setPercentHeight(10);` `yourGridPane.getRowConstraints().add(row);` Done three times. So 9 lines become just one. I dont know if Apache Commons or Guava have this. &amp;#x200B;
Lol! I am doing a very simple app to host it on Github so my future employers see it but I was horrified at the boilerplate I was writing. I thought they would never hire me if they actually saw the boilerplate going on so I transferred the ugliness somewhere else where they cant see it...
I like to use Scalacheck to create random data. See the generators section at https://github.com/rickynils/scalacheck/blob/master/doc/UserGuide.md
You can use flyway, or write a bean that runs when your app starts?
I was gonna make it initially that way but I just love reflection and thought to myself. Im trying not to write code so why write it two times lol. I will change the way it compares classes, I did not consider getting the class with the simple ColumnConstraints.class which I use in the parameters lol.
I am not a fan of FXML but yeah, writing Java layouts in pure Java is just a synonym for boilerplate. I dont mind it sometimes since it makes it very clear what you are doing but setting row/column constraints just makes the code ugly. 
Everyone is going to miss the ask toolbar and the 3 million devices banner. :(
This big ball of loosely coupled mud which is proposed in the article is in itself a nightmare to me. The sheer quantity of code, machines, components and services required to run some simple service is staggering, compared to just putting it all into a single monolith on a single machine against a single database. The mere amount of classes in this "microservice" makes it laughable. The AccountService has some essential DOs and a couple of methods in an actual web service endpoint, but it has got many more packages beyond that, all which are only there to support the architecture and not achieve any actual business goals. With a monolith, you'd be able to kill off your API gateway, ribbon, your extra 2 databases, your service discovery, and your config service would mostly shrink to nothing because most of it is about where the other endpoints are located, and configuration for the pieces which we just eliminated. It'd also perform better because instead of extremely slow calls over the network for API endpoints, you could just invoke components directly. You'd also be able to use database transactions in a simple obvious way, e.g. an update to account that requires statistics to change could all be done atomically in a single transaction if you used database that has transactions, and didn't split your system apart for no real reason into separate services that use separate database instances.
Reliance on the names themselves is generally not good, but you are at least hitting on the concept of abstraction. Unfortunately the more complex your abstractions are, the harder they are to do "right". That being said, reflection is not generally considered a good tool outside of some language-relevant situations, so it may be a sign that the code could be architected differently (important, since reflection is a nontrivial cost over a large number of operations).
Yep. The reflection hype wears out and well, it is just easier to make two separate methods so that the JVM does not need to analyze code at runtime. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It's been a while since the Ask Toolbar was bundled with the JRE, and the last couple of releases didn't even bother opening your default browser to the Java version-check page; they still do mention over "3 Billion" devices, though.
That reply showed up twice; you might want to delete the other copy.
Write code to create the data. Export data out of db as insert statements
Maybe a "fluent api" builder would make this more pretty without reflection. E.g: new GridBuilder(gridPane) .withPercentHeight(10) .withConstraint(new RowConstraints() ) .build() I know reflection feels good but if this is being reviewed by your employer he might appreciate usage of patterns and avoidance of antipattern 😏 
Micro-services should deal with a single bounded context, similar to single responsibility but not the same. Their size depends on the complexity of that context. Sure if you’re just writing some basic crud app they can be tiny, but if it’s complex, a particular context could still be quite big. Single responsibility in the context of SOLID was not talking about micro-services.
There's definitely tradeoffs without question. Kubernetes solves a lot of the problems introduced by microservices architecture, but not all of them. It does solve some problems though. With a monolith, it gets complicated to cut releases with a lot of devs working in parallel on different features simultaneously. Zero downtime mid-release bug fixes require a lot of coordination to deploy because you have to redeploy everything and that's often difficult organizationally. The biggest problem it solves performance using vps's which aren't nearly as powerful as the mainframes that historically run monolithic applications. You can scale out just the portions of the application that need it instead of the entire monolithic application.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Found an older picture on imgur. Sprite editor and Xml editor in the picture. Been using it for Ludum Dare. [http://i.imgur.com/TRzbmTOl.png](http://i.imgur.com/TRzbmTOl.png)
I do not see anything bad with it, may be that Class.forName. It is faster with a constraintType == RowConstraints.class because metaclasses are singletons &amp;#x200B; I would do it so: &amp;#x200B; DoubleStream.of(20, 30, 40).mapObject(h -&gt; new RowConstraints(h)).forEach(c -&gt; pane.getRowConstraints().add(c)) &amp;#x200B; Or DoubleStream.of(20, 30, 40).mapObject(RowConstraints::new)).forEach(pane.getRowConstraints()::add) &amp;#x200B; Made from memory, but should work.
Beanstalk supports multi-container deployments, but if you're on AWS and want to use Docker consider ECS or EKS.
Interesting. Stuart Marks suggests calling `Thread.currentThread().interrupt()` in the catch block. This type of thing should really be in the javadoc.
There's a [Java Telephony API](https://www.oracle.com/technetwork/java/index-jsp-140696.html) by Oracle. There are some implementations of this API, for example Cisco has his [own](https://www.cisco.com/c/en/us/td/docs/voice_ip_comm/cucm/jtapi_dev/8_6_1/jtapidevguide.html).
Look at the sidebar of r/learnjava
...you mean simply swapping SQL for XML?
A good start to get a good overview is the Oracle tutorial site: [https://docs.oracle.com/javase/tutorial/index.html](https://docs.oracle.com/javase/tutorial/index.html) I propose to concentrate on Java 8 first. When you are experienced, then Java 11. 
I will check that thank you!
I definitely don’t love xml. But seeing the data laid out that way was easier in my eyes than row after row of sql statements. It’s an option. 
This is the first time I heard someone actually admitting that JNI was purposefully made slow.
This is a question for /r/learnjava. There you can find a sidebar (old reddit only for now) where you see: &gt;**Free Tutorials** * MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html) from the University of Helsinki * [Java for Complete Beginners](https://www.udemy.com/java-tutorial) * accompanying site [CaveOfProgramming](http://caveofprogramming.com) * [Derek Banas' Java Playlist](https://www.youtube.com/playlist?list=PLE7E8B7F4856C9B19) * accompanying site [NewThinkTank](http://newthinktank.com/) *Removed from here* -&gt; /r/learnjava
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
A nice idea, but you'd still have loads of lines for multiple Row / Column Constraints.
The image was way too compressed :(
Yes.
Thanks
sure
This is one of the best courses you can take in your free time: [http://moocfi.github.io/courses/2013/programming-part-1/](http://moocfi.github.io/courses/2013/programming-part-1/) &amp;#x200B; It has automatic tests included!
Thank you!
Thanks for the tip!
Does anyone know any good (and reasonably accessible) source to learn about JVM architecture and internals?
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/uXUXjmJ.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
This is a question for /r/learnjava. There you can find a sidebar (old reddit only for now) where you see: &gt;**Free Tutorials** * MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html) from the University of Helsinki * [Java for Complete Beginners](https://www.udemy.com/java-tutorial) * accompanying site [CaveOfProgramming](http://caveofprogramming.com) * [Derek Banas' Java Playlist](https://www.youtube.com/playlist?list=PLE7E8B7F4856C9B19) * accompanying site [NewThinkTank](http://newthinktank.com/) *Removed from here* -&gt; /r/learnjava
I'd say go for it, when you get good it's incredibly rewarding even relaxing to enter the zone. I see it like an artist painting but it happens in my head. But, learning to program well takes serious dedication and that dedication is much easier to maintain if you are truly interested in the subject. Before you embark on this journey ask yourself if you'll be happy to still not be a usefully talented programmer a year from now despite working hard to learn the craft. Also ask yourself why you haven't got any experience of programming already, is it a lack of opportunity / resources or a lack of interest? If you don't have a real interest in programming and are doing this because you think it'll land a well paying job I'd perhaps consider other options as you'll find it tough going. &amp;#x200B;
This is a pretty in depth overview of the JVM https://www.youtube.com/watch?v=ZBJ0u9MaKtM&amp;t=658s
scare of what? Learning a profession is the best choice you had in your, prolly, just go. No hurry 
This is only list that came spontaneously into my mind. It is not exhaustive: 1. The LogLevels defined by JUL are silly. FINE, FINER and FINEST have absolutely no semantic and therefore each developer uses them in a different way. You will never be able to get a consistent convention that will actually be used. Compare that to DEBUG and TRACE which have a clear meaning and will be used appropriately by the developers. Also JUL only has SEVERE as an error-indicating level. You are not able to distinguish between "just errors" and "fatal errors" 2. JUL loads its configuration only from the Java Installation or via a VM property `-Djava.util.logging.config.file`. It is not possible to load it from classpath. 3. JUL is not able to reload its configuration. If you have a need for it, you have to implement the reloading mechanism yourself. 4. JUL localizes the log levels by default. So depending on the current locale the will be either e.g. FINE, FINER, FINEST (in english) or FEIN, FEINER, AM FEINSTEN (in german). Have fun with grepping your logfiles. 5. The SimpleFormatter of JUL by default prints its messages on _two lines_. Also great for grepping… 6. By default JUL writes logfiles as XML. Great. They not even provide a tool to filter such files. Not, you would have to write it on your own. Also, it was not possible to reconfigure the Formatter (for example to a sane SimpleFormatter) when run via WebStart (but well, Oracle kicked WebStart out now… Another gread decision…). 7. It seems to be much slower compared to the alternatives (can't judge myself, but have never anything different). This is only one of the many performance comparisions: https://www.loggly.com/blog/benchmarking-java-logging-frameworks/ 8. The API is shit. It got only slightly better with Java 8 (and Lambdas), but for example it is not possible to provide a message + message arguments + exception to a log method. Either concatenate the message and arguments via string concatenation or (nowadays) use a lambda expression. I am quite sure there are more drawbacks, but I thinks this list should be impressive enough.
What if those people don't have a wee wee?
I hope it makes it through. 
Cool, but why rely in a, now foreign, package as JavaFX? Cant it be done with only openJDK as dependency? Just a thought, not a critic! 
That’s not what a microservice is. 
You are probably looking for a RTP library. This might get you started: https://github.com/topics/rtp You will also probably need a SIP library for session initiation, here is the reference implementation for java: https://github.com/usnistgov/jsip (JAIN SIP) Also take a look at Jitsi (https://jitsi.org). Open source fully featured communication tool implemented in java (voice, video, XMPP, sip, etc)
Mostly correct. Point 3 is not correct. Oracle have said that they will contribute source code changes to each OpenJDK project for six months. After that, someone will need to backport security patches and bug fixes from the latest repo to the older ones. AdoptOpenJDK is the solution to the building part but not the backporting part. AdoptOpenJDK have said that they will not (as an entity) be doing any backporting.
Red Hat will support Java 11 at OpenJDK. They have said so publicly. https://www.redhat.com/en/blog/history-and-future-openjdk
Martijn Verburg (a Java Champion) created this document based on various blog posts and input from other Java Champions. He also got input from Oracle, Red Hat, IBM and Azul. This would definitely be the most authoritative document currently available so would be the best to pin to the top of this thread.
IIRC, To me the javafxpackager had two limitations that made it useless to me. 1. It could only package for the platform you are on. So if you want windows and mac and linux installers you have to copy all your class files over to three different computers to run the packager on each. 2. The installers didn't install the JVM so users still need to be told which JVM to install. Therefore no one running your installer won't have the JVM you might as well just give the users a jar and save the developer the trouble of running the packager on three different computers. Am I missing something that made this more useful or are there plans to address these? I just don't see the use case. 
Since H2 is file based, why don't you just have a "prepared" H2 file for the test, and just copy the file with all the required data in it, and just copy it over on test setup?
Have you read the JEP? It packages the jvm with it.
Does this compete with Install4J?
I think it might be Zing, not Zulu that has the faster VM claims. I haven't seen that claim myself, so I don't know where it comes from. As I understand Zing, its entire value proposition is that it is seriously faster (and more expensive) than Open JDK when you have hundreds of gigabytes of heap.
It would still be very valuable to developers to be able to automate the packaging for multiple platforms, from a single development platform. I wouldn't mind if I was required to have the files for multiple platform JVMs available to the packager tool in order to generate, say, Mac OS and Windows packages from Linux. &amp;#x200B; Wish list: * cool: packager can generate cross platform packages * cool: generated packages for Linux could be a tar.gz in addition to deb and rpm * Even colder would be a Snap or AppImage format for Linux AppImage would be harder to do, but is way easier for the end user. An AppImage is a single executable with everything directly contained within it. No installation. It works via the magic of FUSE filesystems and filesystem overlay mounts. &amp;#x200B;
wait, does this mean that I'll be able to create EXEs easily out of runnable jars??? Without something like Install4J?
I wish it was as easy as you say. Is there anywhere a course or comprehensive tutorial on how to do all that? The web is packed with courses for web development, but I have yet to find a course that teaches how to do all that with Java. If you know a course that is similar to WesBos' Advanced React course, let me know..
please keep making videos on spring boot, your quality is awesome
It's a great chance to teach how an installer actually works, extract -&gt; set the environment variable -&gt; configure your IDE They will learn that they can have more than 1 java environment .. 
Jlinked runtimes in AppImages work well: I'm using them to great effect on a daily basis.
Java no longer has a JRE as such. Developers are supposed to create an application specific runtime with jlink, the Java linker introduced in Java 1.9. So that application is doing something strange.
what's the timestamp of that?
How are you producing your jlink images and/or AppImage - fully JPMS or putting deps on the classpath with a custom launcher? I'd love to see an example app somewhere if possible..
Custom launcher. My app requires the use of an agent at runtime, so I've no way around it.
Can this be extended to generate an APK so that we could latest Java on Android?
Can this be extended to generate an APK so that we could latest Java on Android?
Whats the program? It's odd that it doesn't run with Java 11 (considering that it asks for Java 9). You find it in the [archive](https://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase9-3934878.html).
Can this be extended to generate an APK so that we could latest Java on Android?
Can this be extended to generate an APK so that we could latest Java on Android?
How do I try it out? I'd like to see if I can package NetBeans using this.
How do I try it out? Do I need to download Java 12?
I want any version of Java uninstall from a User's Windows machine then have this installed
I want to uninstall or have the user uninstall every java instance they have on their windows machine then run the script to install with specific settings
it could **possibly** be addressed on windows. but apple locks down their dev tools enough that you **will** need a mac to make a mac osx installer for your application.
yes. i did it with javafxpackager on 8 quite a bit, and the results were good
https://github.com/Phoenix09/filebot tv renaming program. I was using the .jar file just to save having to install another piece of software on my computer but I've ended up installing it and running the .exe rather than keeping an outdated version of java. I believe I had JRE-10 installed which made it work. cant find the download page again but the file is jre-10_windows-x64.exe. Ive now uninstalled that and have jre-8u192 which the jar won't play nice with but the exe does.
Telling us the wishlist won't get anything done. You'll want to email core-libs-dev with explanations of what/why/how, or do it yourself (or find others to do it).
I want a tool that will bundle the program into a single native executable, not an installer. Im aware of graal, which is promising and pretty cool, but graal is doing much more complicated, actually natively compiling the application code. I just want something that will bundle an app jar and the java runtime into a single executable.
1. You can solve this for free by using online CI. Travis can do Linux/Mac distro for you and AppVeyor can do Linux/Windows. 2. You could always package a JRE with the tool. All in all it was a decent tool for Java 1.8, 9 and 10 once you have CI configured. Sadly we lost this for 11 so I hope it comes back in 12...
I do not believe it would impact the code that it packages at all.
OpenJDK is GPL v2 with classpath exception, which is not the same as GPL. [https://openjdk.java.net/legal/gplv2+ce.html](https://openjdk.java.net/legal/gplv2+ce.html)
Without a degree you won't be able to relocate to many countries to work as a developer. Of course if you consider relocating. Also if regulations takes place, something like brexit i.e, you may end up needing things you never considered before, like a degree. Bachelor at leats. Cheers
Or you can [use just one CI](https://dev.azure.com) and you get Win/Mac/Linux 
That's great and I have not much experience with jlink and bundling the needed modules. Is jlink inferior?
This is usable from Java as well in case that makes a difference!
Oh? I will have to check that out. Is it free for open source projects?
Up to 10 projects, yes.
it looks like jpackager allows for that: https://bugs.openjdk.java.net/browse/JDK-8200758 &gt; The application image can be redistributed as-is, or it can be packaged as a native, installable package (for example, in msi or dmg format). In this latter case, the tool can either create a native package from a previously created application image, or it can create a native package directly. The native package will include the following: 
Java used to use a strange versioning scheme whereby, e.g., "Java 8" was "1.8.0", but that's no longer the case in recent releases. Naive version-parsing code is likely to blame here; I'd suggest raising a ticket with the developer.
Have you looked at https://github.com/dgiagio/warp ?
That is a huge list of stuff to wade into. Can someone answer this simple question directly?
It's probably not the right sub to ask this question. However, here is my take to help you: you made it working with Java 8, so learn with Java 8 for now until you can figure this problem out by yourself. You have plenty to learn already, without having to "bother" with Java 9/10. I believe, on the top of my head, Eclipse does not support the high end version of Java without extra plugins -- not sure though, I've read it somewhere. I am still running with the Debian OpenJdk 8 on my personal computer and it "does the job" well. Don't let this "latest the greatest" idea blocks you from learning. Have a safe and good journey in the great world of Java!
Seems like more or less what im after, although it seems like it still has to unpack files into a cache. Seems like a problem that would be best solved by the jdk rather than third party tools.
Oracle stopped shipping JRE with Java 11, since programs written and built and compiled under Java 11 don’t need it. Personally, I am using Java 8 update 191 for my programming classes.
Travis CI has Windows in beta now as well.
As u/trlambert1 stated, there isn't a need for a JRE post Java 9's Jigsaw. For Java 11 you just don't get one. There's the JDK and you will use the JDK to build a JRE to distribute with your program. So if all of that sounds weird, it is because I think we've all become used to the notion of downloading the JRE and then running our applications with the standard JRE. In Java 9 and onward there's a new tool called *jlink* that I assure you, you'll want to get **very** comfy with what it is doing and how it works. Basically if you write a simple "Hello, World" program, technically speaking your program only needs the String.class (entry point has String \[\] args), System.class (provides the System.out), and obviously the Object.class (since everything in Java derives from Object). Additionally, you'll need the WhateverYouCalledYourClass.class (I'll call it Whatever.class going forward) as well. But basically to run your program, at bare minimum you need a JRE that understands those three classes (since your Whatever.class you'll be providing with your program). That's where modules and jlink come into play. You'll create a file that explains the dependencies your classes have. So without getting too deep into how modules work, you'll basically group classes into modules and then those modules will depend on other modules (aka other groups of classes). In this case the three classes that you need are in a module in the JDK called java.base. So you'll take your Whatever.class put it into a APP module and then indicate that the APP module depends on the java.base module. Phew, that's a lot. But once you have that all taken care of you'll fire off jlink like so... jlink –module-path out –add-modules APP,java.base –output appjre You can see I have my APP module and the java.base module here and the output is "appjre". After that command is done, if I going into the appjre folder (since that's where I indicated the output to be sent) and look in the bin folder within that, you'll see a program called "java" in there. You'll use that java command to start your application. The entire appjre folder is a JRE. It's literally the JDK's JRE but trimmed down to only contain the things you indicated in the jlink command. You'll distribute that custom JRE with your application, instead of asking your customers or users to go download a standard JRE, which I think JRE 8 had like 4,500 classes or there abouts. So before I leave, you might have asked yourself, "What about native code?" Because obviously the JRE needs to hook into the underlying OS natively. Well that's solved via something called JMOD which is a new format not unlike JAR but can handle native code. Trust me, as you read up on jlink, JMODs will get mentioned. But yeah, Oracle is positioning this new linking and modularization as the future of Java. Now I would recommend a book at this point, but at the moment there aren't any out. So you might want to hit the [Java "books" here](https://docs.oracle.com/en/java/javase/11/books.html) to see what you can glean. Also some Google searching will help you out as well.
I don't use OpebPDF, but I appreciate the work you put into the library!
&gt;In Java 9 and onward there's a new tool called jlink that I assure you, you'll want to get very comfy with what it is doing and how it works. I wouldn't expect this. JLink has quite a lot of drawbacks compared to a preinstalled JRE. 1. It doesn't contain Java Webstart. So it is not possible to auto-update an application without hacking some auto-update-functionality yourself (and everybody else doing the same) resulting in lots of incompatible auto-updaters that don't even remotely provide the same functionality as Java Webstart. Or you have to provide an installation client for each update and maybe somehow force your users to use it. 2. Since there is no preinstalled JRE, you won't get updates to the JRE itself. So if there is some serious vulnerability in the modules that you bundles with your application, you, as the developer, are now responsible for delivering yet another new version with the fixed modules. Nice try without auto-update functionality… (This is also quite different to vulnerabilities in libraries used by native code, since they are usually linked and can be updated independently of the applications linking to them). 3. You need to create a separate installation bundle for *every target OS* you'd like to support. Therefore "write once, run anywhere" does not apply anymore, since the existence of a JRE on some OS isn't enough anymore. Every application needs to explicitly support all possible OSs by providing an installation candidate for them. If they don't they do not run on those platforms.
Each `war` should have its own `persistence.xml`. Just doing something for "common practice" which is unknown to me makes no sense and I would discard any common practice which has no reasonable benefit. Could you quote your source? One `war` is one service and in the end where the `persistence.xml` is, does not really matter, since each of them has its own database anyways. If your team can't handle the multi-war approach, this might also indicate that you should not use this approach, but should for look for other solutions.
Post your question in r/askprogramming 
Look for jfx
Woah.
/r/learnjava
This would make it so much easier to navigate the proposed changes before they happen. The current mercurial web interface is simply horrible to use.
&gt; a single double-clickable jar. Which usually did not work because of incompatible or missing JRE, or just "jar" extension hijacked by some other app
Question. How does it compare to iText? I've seen that the later versions of iText has added so many classes that make editing PDFs (especially in forms, annotations, etc.) much easier. What work has been done in openPDF? Can it be a drop-in replacement? I ask this because internet comments about this particular library are scarse, to say the least. Either it's all about iText, or licensing issues and recommending the switch. But can one do the switch in the first place?
If all you want is to navigate changes: https://github.com/openjdk/jdk 
Sadly no branches are mirrored, only `master`.
Hope the ojdbc team takes notice
Main OpenJDK repository doesn't have branches, either. Project repos like amber and valhalla have started using branches, but so far unlikely their use will spread to the mainline.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
one nice thing about the current hg setup is that you can download tip.tar.gz, which gives you a single snapshot of the source for limited bandwidth this is a big win (the repos themselves are huge). does github (or another git-base providers) have something similar ? 
See also the videos showing how it works [https://www.youtube.com/channel/UCX5-ypQygEHMCGXVTTbhfNQ/videos](https://www.youtube.com/channel/UCX5-ypQygEHMCGXVTTbhfNQ/videos)
Have you ever used GitHub before? Have you seen the huge green button that says "Clone or download"? When you click it, it gives you the option of downloading the repo as a zip file.
You can create a million accounts and upvote this one time with each account tho
In addition to Github's "download a zip of repo at current state" you can do a shallow clone with git: https://linuxhint.com/git-shallow-clone-and-clone-depth/
thanks - i've seen that, but assumed it was "download the repo", not "download a snapshot of the repo" also looks like you can use it to get **any** snapshot, not just HEAD 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thanks.
Well there's no point in debating the matter. Oracle has killed the JRE in Java 11. The only folks offering a JRE (java11 +) at this point are commercial vendors. All the points you've brought up don't matter and here's why. 1. **Doesn't contain Webstart** \- Webstart is dead, you'll need to migrate to some other technology. Commercial vendors can offer support so long as you're paying for it, but for Java proper, JNLP and what not are dead. 2. **Security vulnerability** \- Since you are now packing the JRE, you're responsible for that. If that's not exactly your cup of tea, there are commercial vendors that can offer support. Down the road, you'll only have these two choices as free JREs will just simply cease to exist, unless some open source group gets together and starts a new JRE (remember OpenJDK is a JDK, they don't provide a JRE by itself.) 3. **Native-code hooks** \- Not really, but sort of. Depends on what you are putting into your project. There's a new format called JMOD that will allow you to pack in native binaries into your JRE. However, that said, Java has had a poor track record for the WORA (write once, run anywhere) thing. At least now we can stop pretending that Java lived fully up to the WORA concept. Good example is SWT/JavaFX/JDBC-type2. Now some will say, they don't agree with what Oracle has decided to do with Java. No argument there. But they're the ones calling the shots on the actual standard, so come December 31st, 2020, you're on the new Java cycle or you're just not going to get updates anymore. (December 31st, 2020 is the last day that Oracle will provide support for any JRE). So you either have a commercial contract to provide patches and updates for you or you patch your own software, those will be your only two choices come Jan 1, 2021. So that's why I don't think there's a debate to have here. Oracle has already made up their mind and this is the road we're all going down like it or not.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I love the guy at the end who wanted to ask a question and Stuart was just like: "Nope!" | Dr. Deprecator strikes again!
If you have a mac with homebrew you can just do `brew cask install java` , `brew cask install java8`. I then have a shell function which switches my environment based on the java version I want, i.e. `set_java 1.8` or `set_java 11`
Here is a visitor pattern where there is a base class for pre-order and post-order actions. Custom classes extend the walk to implement each 'pass'. public class M1Top { ... private final transient SetofM2Year set = new SetofM2Year(); public final void walk(final MPassBase base) { base.callBeforeM1(this); this.set.walk(base); base.callAfterM1(this); } ... } public class SetofM2Year { private final transient Map&lt;String, M2Year&gt; years = new TreeMap&lt;String, M2Year&gt;(); public final void walk(final MPassBase base) { final Iterator&lt;Entry&lt;String, M2Year&gt;&gt; it4 = this.years.entrySet().iterator(); while (it4.hasNext()) { final Entry&lt;String, M2Year&gt; entry = it4.next(); final M2Year cy = entry.getValue(); cy.walk(base); } } ... } public class M2Year { ... private String value; private SetofM3Umd set = new SetofM3Umd(); ... public final void walk(final MPassBase base) { base.callBeforeM2(this); this.set.walk(base); base.callAfterM2(this); } ... } public class MPassBase { public void callBeforeM1(M1Top top) { // nothing needed } public void callAfterM1(M1Top top) { // nothing needed } public void callBeforeM2(M2Year year) { // nothing needed } public void callAfterM2(M2Year year) { // nothing needed } public void callBeforeM3(M3Umd umd) { // nothing needed } public void callAfterM3(M3Umd umd) { // nothing needed } ... } public class MPassFamilyRefresh extends MPassBase { ... @Override public void callBeforeM6(final M6OptionBase optionBase) { super.callBeforeM6(optionBase); ... } } public class MPassCheckSandO extends MPassBase { ... @Override public final void callBeforeM5(final M5Family family) { super.callBeforeM5(family); ... } @Override public final void callAfterM5(final M5Family family) { super.callAfterM5(family); ... } @Override public final void callBeforeM6(final M6OptionBase optionBase) { super.callBeforeM6(optionBase); ... } @Override public final void callBeforeM7(final M7OptionThought optionThought) { super.callBeforeM7(optionThought); ... } ... } 
Thanks Ill look into Immutables. It make sense, seeing as the frontend people are using `const` for everything.
 &gt;Final classes may be enforced for API objects / DTOs however I am unsure whether that will be too extreme or not. Final classes can be a problem for certain reflection and code generation stuff, e.g. Hibernate, which in some cases needs to subclass at runtime.
Anything Oracle is going to be faaaaar away from Github due to MS 
Also, note that Oracle Java and OpenJDK can use different versioning before 11. With 11 they are single digit versions. For 10, OpenJDK continued with 3-digit versions while Oracle JDK switched to single digit versions. 9 and earlier use single-digit versions for both. Initially caused some problems with the release of 10 for several maven plugins and the like, but all seems OK now. 
I never understood their revenue model though.
&gt;Currently, repos for the OpenJDK project are on an Oracle-hosted Mercurial server. On the other hand, it would be a cost cutting move for them
I understand final private fields, but method params not really. Developers would need to be really junior to mutate method params. Actually just get a good checkstyle and enforce a "no warnings" policy. This will point out possible static methods or changed method params, etc. 
As a C# developer who somehow found himself as the primary systems architect in a Java shop, this news gave me the epiphany that I don't dislike Java so much as I despise Oracle and the taint the company brings.
A colleague of mine once removed 67kB of `final` from one of our projects. We decided that the cost of "final noise" outweighed the benefits, all our variables were effectively final anyway. Maybe we would have felt different in a bigger team with more juniors, but there is a high cost associated with adding finals everywhere, especially if you have a line-length limit as part your style guide (suddenly every method signature becomes five lines long).
Java went from being supported by one of the most loved companies (Sun) to one of the most hated (Oracle). Oracle has surprisingly done alright keeping Java and its original culture together, in addition to VirtualBox. With them donating Hudson, NetBeans, etc. to the Apache Foundation kept in mind, I don't think they're nearly the boogeyman people make them out to be. Their legal team might as well be the Nazgul, but their engineering and product management has been A-Okay.
Final in class members (and classes themselves) are useful. In local variables and method parameters I agree that they usually just add too much noise for their benefit.
Sounds like I might be going against the trend here, but I prefer to mark every variable (class properties, parameter, local, all of em) final where possible. I suppose it's more verbose, but it also makes it explicitly clear where values are set, and which ones are mutable, to me that reduces cognative load while trying to understand the logic of something new, or something I haven't visited in awhile. Level of effort while writing code this way is basically nil, as you can set your IDE to default all variables to be marked as final.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It'd probably make it easier for people to help if you formatted code and named the methods.
This sounds like 'magic thinking': That by merely following extremely simple, easily lint-able rules, that this small step will somehow lead to a team that writes code that doesn't suck. It never works. The problem is, if your coding team doesn't know the basic concepts required to understand why some class should be final (or not), then they are going to write code of a quality that is well below the level where it makes sense to worry about things like this. The theory would be that, hey, even if they have no idea why, as long as they follow the rule of 'all params must be final', the code will be better. But, no, that does not happen. They'll work around these (to them) annoyances. So let's presume smart coders instead. Maybe you can use code review to get there. Should you mark classes and parameters final? I say: No. Primary reason: it clutters up your code. If you really want to consider modifying a parameter as problematic, then configure your IDE to emit a warning when you change it. This avoids the clutter, and it even lets you change it just for debugging purposes (you should definitely say that all warnings are to be considered showstopper for checking into a shared branch, let alone production code. But warnings do let you run the debugger and do a test run with some temporary code in place. Better yet, the warning highlights that there's temporary code in place, it's perfect). Secondary reason: You SHOULD change parameters. At least, right at top. Let's say a method takes a String parameter that represents a gender. The method decodes this gender. F and V mean female, M means male, and anything else means 'unknown'. Let's further say that you should trim the input and it's case insensitive. The easiest way to do this, is to make the trim and uppercasing modifications right up top. If you make a local var to keep the mutated input, it's real easy to accidentally use the original parameter, and unless some input actually has some spacing, you won't know. Yes, tests should catch that, but it's still an easy mistake to make. Clearly, just modifying the original is FAR clearer: You now have fewer variables in scope (which clearly is superior to having more variables in scope, obviously). the argument against final classes goes in a similar fashion: It's extra typing, and, as a rule, you should never extend classes unless you know what you are doing; composition tends to lead to far easier to maintain code. But if your coders just aren't smart enough to understand this, enforcing it isn't magically going to lead to better code. THere are a million-and-one style errors they'll be making. Shooting down 5 of them using a linter is not going to make a dent, is going to make them work around it, is going to resent you for these stupid (to them), pointless (to them), mysterious (to them) rules. 
[1] 1.9 does not exist. It never has existed. Ever. Whomever wrote the code that says 'you need v1.9', does not understand the java versioning scheme. Given that we've now established that the author doesn't know what they are doing, this is going to be rather complicated to fix. [2] java8 is a long term supported version; java 9 is not. Right now java 9 (and even java 10) are not supported whatsoever. java 8 still is. [3] oracleJDK will never be updated past java8, java9, and java 10. Now that oracleJDK9 and OracleJDK10 are out of the date, the only supported version that remains is OracleJDK8. It's the only one you can use here. [4] Java used to go with the model that you or the maker of your hardware installed software that can run java apps (a so-called 'JRE': Java runtime environment). Starting with java11, no longer: Apps are supposed to ship a mini-JRE with just the bits that they need along with their product. So, starting with java11, there is no JRE at all, whatsoever. It sounds like you need to go back to whomever wrote your software and tell them to update their stuff. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/9rghxa/how_do_i_test_this_method/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Oracle has a shit-ton of projects on GitHub, including Graal. 
It is inflexible, true. I think these x.of() methods are mostly intended as replacement for list and hash constructors of other languages, e.g. \[ { foo: 1, bar: 2 }, { foo: 2, bar: 3 } \] kind of stuff. You can now write it as something like List.of(Map.of("foo", 1, "bar", 2), Map.of("foo", 2, "bar", 3)), which isn't too bad, I suppose. A lot of the times you have no need to ever modify this data, you just need to be able to represent it. There's also the opportunity to optimize the memory sizes of immutable datastructures, e.g. a hashmap of just a few entries which are known at definition time can be built in some optimal way which wastes as little memory as possible, which enables you to hold many more of those in memory. In general, however, immutability is considered to be an important simplification that improves the predictability of code. When you know a value can never change, you don't have to worry about holding reference to it and the value changing from under you. E.g. if you iterate a collection in one thread, while someone else tries to modify it, they might get an exception until your iterator is finished. The creator of clojure drew a parallel with not having mutable strings. Immutable strings are less efficient, probably, but also nobody wants to go back to mutable strings because experience shows that programs with mutable strings are hard to make correct, and you have to make defensive copies to stabilize the data. If we need to modify a string in some way, we will just create a new copy that has the right data. In the future, the same idea is expected to be generally true of lists, maps and sets of new languages.
telegram group😂
I'm personally not adamantly in favour of using final everywhere but I've been on a project where it was the rule and I liked working on it. Main problem I see is that a project that goes for this generally is mature enough not to need them, whereas projects where people don't really think about it, really does need them. I'm not a fan of marking classes as final though. If you have people who overuse inheritance just as a vehicle for code-reuse you have bigger problems. And it messes a lot with frameworks like Spring and tools like Mockito. 
In my team some devs started doing it recently, but I don't like it. I use it for class fields, but not for local variables - we are just getting "var" keyword in JDK 11 to reduce amount of syntax noise and now that "final" keyword makes a step back. I wish they world do "var" as "final by default", that would give a better effect to contemporary Java code overall. I agree with the idea itself to not reuse the same variable for different purposes, but I prefer to enforce it with Checkstyle analyzer. That "final" keyword creates too much of syntax noise and I prefer to make my code simple, clean and readable. If some method requires too much time to read it and it is not obvious where some value comes from - that code is bad anyway. Putting "final" may possibly help a bit, but I would rather rewrite it to be simple and obvious. Btw, with enforced "final" you will have to have some suppressions for different kind of "loop variables". That is one case when changing the variable's value is reasonable.
I want to escape the hell that is multiple developers working on C# MVVM without coherent behavior of observable collections, whether the collection, or contents gets replaced, whether you clear the collection and add items to synchronize (because that's easier then actually syncing them) Or whether you just sync them correctly. So much can go wrong with transferring the observers over, or accidentally losing subscribers, or who knows what else.
Yup, it sucks. Whenever I build some kind of API in Java I always return unmodifiable collections. The old ways of constructing lists 'by hand' show their age. Arrays.asList gives you a List where you can replace elements but can't add to it (since the size is fixed) for example; so kinda the worst of both worlds. I'm glad they're now going for more sensible utility functions. 
I prefer all fields final, unless there's a good reason not to have it final. Don't really like the final method parameters though, as it just creates noise.
no I guess 
I also do use finality. Actually I think variables should be \`final\` by default and possible reassignment should be made explicit (I avoid the term "Immutablity" here, since the final objects themselves are not necessarily immutable). Since this isn't the case in java (and will never be), I explicitly specify \`final\` on all fields and method parameters unless I explicitly need them non-final. &amp;#x200B; However I never make classes or methods final. A lot of people think that immutable classes should be made final, but I see it differently. A class derived from a mutable class is not necessarily mutable. It is possible to make it mutable, but that is the responsibility of the person doing the inheritance. However prohibiting such inheritance restricts the user of such classes too much in my opinion.
&gt; It would've benefitted from some napalm and a good slapping of the dev too though. hehe I know that feeling &gt; final modifiers This forces good devs to do more unnecessary boilerplate however. A configured checkstyle would catch the issue and if you set your build tool / IDE to fail on warnings you catch it at compile time aswell.
I tried to find the sweet spot between readability and finality, and I settled upon: * fields and classes marked `final` by default (with classes it's disputable - as someone mentioned, it's problemtic e.g. with Mockito) * parameters and local variables **not** marked `final`, but IDE (IntelliJ) highlights **clearly** if a parameter or local variable is not **effectively** final Especially in parameters, I find the `final` keyword cluttering the method signature too much.
Mutating a method param value is barely worse than mutating method local variables and local variables etc are so tightly scoped that final doesn't really give you much.