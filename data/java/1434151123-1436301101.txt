If you are saying that the dependent JARs are outside *your* JAR, you would have to provide the JVM with the classpath option pointing to the classes directory, zip, or JAR. If the dependencies are JARs, you would do: java -classpath "dependencies/*" -jar YourApp.jar http://stackoverflow.com/questions/219585/setting-multiple-jars-in-java-classpath 
please find second to max value in the array. please reverse a string using recursion. what is the contract between equals and hashcode
I'm actually a little confused why people choose to use Hibernate directly rather than use the JPA APIs. Doing so will allow you to easily swap out the implementation layer easily with many options available, including Hibernate. I understand at one point the JPA spec was sorely lacking, but those days are long over. So what gives? People are just sticking with what they already know?
I edited my comment to say "spring made DI mainstream in the market" vs. "invented" until I have time to waste researching the truth of your claim, giving you the benefit of the doubt. Really changes nothing regarding my point though.
I'm not positive, but I think setting the classpath and then using -jar doesn't work. You may need to use java -cp dependencies/*:yourJar.jar your.main.class
It's a fork of iBatis.
notice how he doesn't answer the question.
check spring.io/platform. Addresses exactly this point. Spring provides an OPTIONAL platform distro, removing one of Java EE's last value propositions. Java EE forces you to consume as a platform. We don't. Go module, go platform. Or just use Boot, it will automatically provision set of versions that work together! 
 I've used a combination of Hibernate -&gt; JPA -&gt; QueryDSL -&gt; Spring Data. This gives the nice ORM features of JPA with the ability to make type-safe queries, which will *always* be necessary for any non-trivial persistent app.
Spring jdbcTemplate makes all this very simple.
I wasn't remarking on sample sizes for the ZT surveys, those are listed and statistically significant. Somehow it was only the ones that showed JSF ahead that had no citation, or citation to surveys that aren't statistically significant. 52 people? A whiteboard from devoxx 2012? Really?
If those are really interview questions I'm all set to go after my first semester.
A static method named main isn't necessarily intended as an entry point, though it would probably be confusing if it weren't.
Meh. I have always found Java EE to be simpler than Spring. My Java Batch jobs are clean and simple. Honestly, more than anything else, I wish I could get away from WebSphere.
I DARE Java EE to post it's download numbers and web traffic. Oh wait, they don't even use maven unlike Spring LOL. 
That's the whole point. The error is in line 3, after a line break. Which should turn it into line 4.
If you roll with the dependencies outside the jar, and want to use an executable jar, check out this recipe for the jar plugin. The basic idea is to include the class path entries in the jar manifest, and specify a main class. https://maven.apache.org/shared/maven-archiver/examples/classpath.html
Sounds like you want to create a fat jar, something like this article http://stackoverflow.com/questions/16222748/how-to-build-fat-jar-with-maven
What debugging techniques should one use?
If you paid attention in data structures and did well in it, I think you're pretty well prepared for a junior development job. The other stuff you learn is the stuff that elevates you past being a code monkey into being a competent computer scientist with a wide breadth of knowledge that can learn new things readily. 
Not that this is directly related to your problem, but if you are just choosing a build system, gradle might be the direction you want to go nowadays. It's pretty easy, clear, concise and powerful. I've done Ant, Maven and Gradle for a lot of projects and I definitely don't miss Maven or Ant.
I'd love to see the kind of control c++ gives you for passing objects, in java. Just some way to choose whether you want to pass by a ref or value.
I really like this blog post about exception hierarchies: http://blogs.msdn.com/b/kcwalina/archive/2007/01/30/exceptionhierarchies.aspx
cool you can run on server in the IDE too with boot. And you can also deploy boot to EC2/Boxfuse, Cloud Foundry, and Pivotal Web Services. And JBoss. And Jetty. And Tomcat. And Websphere. And WebLogic. Anywhere the JVM does, really. And as a main class. :) So much for Java EE portability! 
Your whole reply seems really hostile and I'm at a loss as to why. We haven't really established what questions we would use for evaluating a candidate, but you've already jumped to them being "trivia" questions. I tend to use questions that are at the basis of Computer Science or a specific language. I might ask someone to explain how a hashmap works. I might ask them to give me an example of polymorphism. I'm not trying to trick them, I don't really care about "patronizing" them, I just want to get a better idea of how much they know and how well they can communicate it. If someone has a good answer to my question I might move on, but if I think it sounds rehearsed I may ask them a more probing question directly drawn from their answer. I usually go into a screen with a large list of questions, split up into multiple concerns and of widely differing difficulty. I'm going to have already read their resume and have an idea of what they've said they've worked on, but I'm also going to ask them some questions about what their comfort level is with some given languages, or how strong they think they are in different areas of Computer Science. There again, I'm not trying to trick this person, I'm trying to evaluate them. Asking them questions in an area where they know they're weak probably won't tell me much, but I may do it anyway just to see if they know more than they think. Your assertion about not using questions designed to weed out bad candidates I can only assume is about the "trick" questions that are sometimes asked in interviews. The ones where if you know the answer it seems so obvious, but if you don't know what the trick is the entire things seems unsolvable. (My personal favorite is the one on how to tell time with 3 lengths of rope that burn at an uneven speed.) Those seem pretty useless and I wouldn't ask them of anyone I was screening. As to your assertion that the process should be about "weeding in" candidates -- look I get it. Interviewing sucks. But it sucks for both sides. Those people who need to be in the room for "weeding in" are valuable. Their time is valuable, and they're usually being pulled in twenty different directions. You can't throw them at every candidate you receive for obvious reasons. At some point the process has to whittle down the list to something manageable.
No one is going to going to stop you from your folly, you are more than welcome to suck exhaust vapor (which is clearly what you are doing), just please stop sharing it with the rest of the world, trying to convince them it's a good idea. 
If you're interested in learning a more modern option, Gradle has the `application` plugin for creating distributables - it bundles all the jars and a generated startup script. If you're running a server application, I'd argue this is a better option than a fat jar anyways. If you really want a single directly executable jar, there's a shade plugin port for gradle as well, though I've learned that such all-in-one jars are prone to problems with conflicting metadata. Like Maven, Gradle is very much plugin based.
I would most likely prefer using [FreeBuilder](https://github.com/google/FreeBuilder) over this. FreeBuilder works as a compile-time annotation processor that generates code every time you compile your project. This makes it much more flexible and easier to use.
Thanks for the feedback. The goal is to move to something like that. I only knew about Lombok up until now, so big thanks for showing FreeBuilder. I'd also like to make it so that getter methods only return immutable copies of whatever is being requested, and so that setters (to the extent they're necessary for any given class) also use copies of the arguments for safety.
I stick to JDBC as well, then always get strange looks from new hires when I show them our system architecture and framework. I can't really say for sure which is better/more efficient/easier to use. It's not really a choice I've made based on considerable comparison or anything like that. I just like doing my own DB management. I also like what you replied to /u/kaylebot_br. Letting the DB do the heavy lifting on large sets of data has always (in my experience at least) worked out best.
&gt; are you on the JCP exec committee or something? Why do you even know that factoid? I'm not on the JCP exec committee, nor do I work for Oracle (or have worked for Oracle) or for any other Java EE vendor. It's been publicly mentioned that Springsource was asked to have (major) elements of Spring donated for standardization in Java EE, at least that's I remember reading quite some time ago. To rephrase my comment above; when an open source project joins a standardization effort it can have potential advantages such as more exposure and people perceiving your product as a safer choice. If multiple implementations exist, people can move from your product to a competitor, but if you have the better implementation out there they can also move to your project. E.g. if JBoss would have been using Spring DI instead of CDI, then JBoss customers would have eventually started to use that, and if Spring was the better implementation those JBoss customers could have moved to Spring. On the other hand, if your product is based on a standard and there's an EG and JCP involved, you lose some control over the direction you want to go in. Suddenly there are 5, 6, who knows other parties who have an opinion that may not match yours. My guess is that Springsource weighted the options, and decided throwing their full code base in for standardization (or a base for standardization, such as Hibernate -&gt; JPA), wasn't the best deal for them. But then later whenever Springsource (mostly via Rod) criticized Java EE, Java EE folks replied that Springsource was given the chance to join the Java EE effort fully. &gt;What is EE doing around modern java, speaking of 2015? Big data? Mobile? Oauth? noSQL? Cloud Native Apps? Microservices? Some of those things is clearly where Spring has an advantage, I agree. Java EE as a slower moving body which doesn't have a goal to innovate has not moved in many of those areas. Big Data, NoSQL, Cloud have been discussed. If you remember the Java EE 8 survey then those were topics being asked about. The Java EE community and the spec leads then decided the landscape for that tech wasn't sufficiently suited for standardization efforts yet. Microservices are a somewhat different story, and at least according to Adam Bien Java EE is already suitable for it. See http://www.adam-bien.com/roller/abien/entry/from_devoxx_2014_pico_services
Thank you for your convincing argument. Your elequant words and fact based retort has totally convinced me. 
&gt;I collected some actual data from surveys with statistically significant sample sizes that consistently say that JSF if often at the bottom (read carefully, and critically people) Which surveys are you exactly referring to here? &gt;Oh, and none of these samples try to pass off random info taken off a whiteboard from devoxx in 2012 as survey data LO Well, it's one of many and I did said the following right above it: &gt;Via a rather informal (to say the least) survey hold on Devoxx ’12 And also know that I didn't just look for surveys or stats where JSF or Java EE was at number one. We see Spring MVC at number 1 twice, and Vaadin at number 1 twice. The second big graph in the article shows Spring itself as the top used framework with 48% usage. 
gitblit
Depends on what you're doing, I suppose, but I've been asked in interviews of difficult problems I've had to debug and how I went about doing it. 
I find the scope of the term "Java boilerplate" too large for what this is. In addition to Lombok there is also [Google AutoValue](https://github.com/google/auto/tree/master/value) which also autogenerates during regular java compilation (annotation processor).
can you post your project? (or at least the whole pom.xml?)
zip up all the dependencies and install in using a tanuki wrapped service.
Is it really that expected? I've written my fair share of Java and used Hashtable maybe twice in 7 years, sticking with ConcurrentHashMap in most cases. I almost never use the `finalize()` method. To a beginner who hasn't read much of the documentation, these things often go unknown especially if they are obsolete.
I dunno. I haven't run into many situations where I needed an object to be passed by value. Needing objects to be passed by value seems like a fringe case to me and I don't really know if there's much to gain in implementing it.
* Know what hashCode is and its indirect relationship with equals. * Know what final does for all the possible usages. * Be ready to solve classical problems, like how to sort a list or a set. * And more advanced problems, like how to parse an xml document and save it in a database. Even if the position is junior, we always push the boundaries to see how our candidates can solve might be issues in their position.
final, finally is surely basics of Java, finalize though you never use, shows that candidate has read about GC etc. Hashtable though not recommended in new codes, you will still find in old code. Remember, you write less new code but maintain lot more old code in real world. 
Yay, yet another indian spam site \o/
Container security is a flawed model. A vast majority prefer security to be an embeddable library, market decided this years ago. 
&gt; The MVC logic has been moving off to the client since around ~2012, increasingly rendering JSF irrelevant. The debate about that is not entirely clearcut. Things have been moving from and to the client for a long time. Big companies such as Twitter have gone back to serverside generation of HTML. If you read the thread about Node.js that's now on top of /r/programming then you'll opinions are somewhat divided and that there remains a good case for serverside HTML generation. &gt;SpringMVC will continue to thrive, because it's a single API for both REST and WebApps, and won't be rendered irrelevant by this trend Well, good for Spring MVC ;) But in Java EE there's JAX-RS that fulfills this need. I personally don't agree with Spring MVC being copied into Java EE. I've mentioned my concerns but I'm afraid nobody listened.
suggest you take a look at spring boot, which has no configuration of any kind - be it XML, JavaConfig or Annotations. You can use any them in boot if you want, but you don't have to. It's a convention over configuration approach that has no equivalent in Java EE. Netflix's tools team has been doing some amazing things with it. 
Have you got any interesting link to post about it?
&gt; Great to hear you are (were?) proficient with Spring. er wat ? &gt; Part of the reason why Spring continues to lead the Java market in 2015 - by any available public data point (SO tags, YT views, indeed.com jobs, google trends) R i i g h t. Completely ignoring the fact that people are starting to migrate away from it. Its the beginning of the end. You had your time in the sun, now you to big and bloated. &gt; what do you think it could do better? dropwizard,spark, jodd,thundr, take them as inspiration. 
Why can't Oracle just understand that we don't want it? They push that useless and outdated toolbar harder than Google pushed Google +.
Do you watch many TV shows? I personally wrote my own tracker to solve an issue I had with others. (slow and pay to use). Using JAX-RS I made a REST API combined with a angularjs/html5 frontend. I use TheTVDB as source for my data (optionally you can use tvrage.com too).
Every savy Java developer knows how to install Java without it.
JDK install doesn't contain it still, right? 
Maybe you can take a look at the oracle javadocs stylesheets for inspiration. It's a nice theme. https://docs.oracle.com/javase/8/docs/api/
* MyBatis for OLAP, eg. reporting, batch * Hibernate for OLTP, eg. CRUD.
My favorite question is to as people to implement the basic Integer class, as implemented in the JDK. I've been stunned by the number of people claiming to have l33t Java skills who can't handle this simple task. I try to give people their favorite IDE to use during the interview as well. This simple task leads to several following questions: 1) what are good hashcode implementations for this class? What about equals()? Lots of people skip these two. One guy converted the int to a String and then used that to iterate over the letters using the one thing he remembered from a CS course on hash codes. 2) why is immutability important in this class? If people can't explain thread safety and the use of this value class as a key in hash maps then they won't get a job. 3) it will be clear if the candidate ever used their IDE to actually _look_ at the source code for the Integer class. Honestly if someone is so lazy and uncurious they they haven't actually looked at the source code for String or Integer then I don't want them working for me. 4) How much memory do you think an instance of Integer is? What is the largest value than can be represented? 5) how fast are they? If they can't write the basic class in a few minutes using the IDE and tools of their choice then I don't want them either. 6) have they read Effective Java? 7) How many Integers / second can they create in the code? I don't care for the "right" answer as it's complicated, but I care that they can get any answer. 
The more you do it the easier it gets.
Great news! It's now also bundled on Mac!
i recomend using [javabat](http://codingbat.com/java) to practice, but not as a sole resource as it doesnt explain anything
Doing a small project and searching to do something as you go on will keep interested longer. Make sure to not put everything in one method or class so you can test your code a little bit at a time. 
I learnt Java as a sophomore in high school, as preparation for a CS class. Here's my advice: 1. Use JGrasp. It gets a lot of shit for being too simple. So what. Simple is nice. You can start using Eclipse once you get started doing more complex projects. 2. This might sound suuuper dumb, but get the Barrons AP Computer Science book. It is really good for explaining concepts. I have a pdf of a textbook that a Uni near me uses, it reads like a book. The layouts of the two books are very different, but I would recommend going with the textbook. PM me if you want it I hope this helped!
Don't really use mac either. Been primarily linux for nearly 10 years now.
If you are new to any type of programming, then I suggest you give [BlueJ](http://bluej.org/) a try. If you are already familiar with basic programming concepts, then the best book I can recommend is Bruce Eckel's [Thinking In Java](https://docs.google.com/viewer?url=http%3A%2F%2Fwww.saeedsh.com%2Fresources%2FThinking%2520in%2520Java%25204th%2520Ed.pdf) (free).
Non-story. It removes outdated vulnerable software only. 
I started the Python course on CodeCademy yesterday and now have my first very own Connect-Four game halfway done. It's taken some hours so far and I learned more than I'd have progressed along -fantastic- course in the time. My prior knowledge is 50% of the course, and building the simple battleship game with the assistance of the course. And, indeed, it is intimidating sometimes. And it makes me feel stupid for all the mistakes (logical, mostly) I make, but that's more than made up for by the successes when something finally runs. Now to fix my check_win_condition()...
Not really, look at java 8 vs previous revisions, I doubt many of the traditional entry java books are teaching functional programming. Then look at going from java to scala, I would class that as learning programming for the 2nd time. No? 
I have never understood this Spring Boot hype - basically on every Java related post... At the end of the day it doesn't even support standard templates (jsp, facets).
http://www.reddit.com/r/java/comments/2yg6xr/is_there_a_better_looking_javadoc/ http://maven.apache.org/skins/maven-fluido-skin/
http://www.reddit.com/r/sysadmin/comments/27p4gu/prevent_askcom_toolbar_from_being_installed_every/
http://www.cs.swarthmore.edu/~newhall/unixhelp/debuggingtips_Java.html
Yes, if you want to stay close to your SQL, nice Interface + XML (impl) or full annotations, but for stored procedure/function something seems missing to avoid the HashMap loop in a service.
Huh, when I last checked, I couldn't find that, is this new with jfx? 
https://minuteproject.wikispaces.com/JPA2 MinuteProject 4 JPA2 generates: * JPA2 entities with annotations, embeddedId classes for composite key. The entities can be generated in java or in groovy. * JPA2 metamodel associated to entities to enable the user to build compilable queries. * Enumeration * Other maven pom.xml, querydsl integration...
Yeah I guess, learning functional programming is kind of like learning programming again. Learning Haskell made me feel like I was back at day 1
Spring Boot rocks. Absolutely.
It was initially introduced with it, but later extended to any Java application type.
I just wanna say that you really need to be patient. Java is not the friendliest programming language out there but the most loyal. I know that its not gonna be easy but don't be tempted to shift to easy language. They will offer you ease of use but it all comes for a price. Java is powerful when it comes to large applications and unlike other languages out there *cough* *PHP* *cough* Java is best in maintaining codes.
Thank you! :) Right now I have my hands full with the CodeCademy class and the small things I want to try for myself. After that I feel I'll be more able to digest all the info. 
When I was learning Java, one of the first things i did after I got the basics of If-statements, while-loops, for-loops and so on was to make a really basic text based game. My game was some kind of fighting game. The player got a few attributes, like how strong he was, how likely it was that he would hit/miss his blows, and how much life ha had. He would then meet enemies that would have all a random value for the those attributes, and they would fight. If you won, your strength would grow, and then you would meet the next enemy. Everything happened in the console. At least for me, it was a great way to learn the basics. And most of all, a good way to understand why and when to use objects, and to partition your code in different methods. 
Oh I referred to the volume of material, not the difficulty. The chapter on animation in the second link attracted my interest, and I think I understand well enough what's happening there already. It's just that I am only getting started messing with functions and flow control, once I have done all the most stupid mistakes once (at least) the books are without doubt a valuable resource.
I'm trying to learn Haskell for school. It's so goddamn discouraging.
Sure, but then you will never know how to use a blunt knife in the event that you don't have access to a sharp one. It's like how in math you usually start with basic arithmetic, then move on equations, and then eventually you can learn real math like calculus and trigonometry. Sure you could teach it all in one, but then if you ever needed to solve an equation besides a derivative you would be stuck. But honestly I think this is something that varies by person. Some people may be able to learn all at once just fine, but other people (like me) need to first learn what is going on underneath to fully understand.
Honestly I have never looked at the source of the Integer class, but even then I could write it without much trouble.
&gt; What is the MVC pattern ? This one I actually don't know. Doesn't it stand for Model-View-Controller?
That would be applicable if there was ever a time where you need to write java code without an IDE. I could maybe see it with C, but I genuinely cannot think of a single situation where I would want to write java in a text editor.
Technically you could have multiple main methods in one class, if they have different arguments, different capitalization, or different return types*. ^^^*The ^^^JVM ^^^actually ^^^allows ^^^methods ^^^overloaded ^^^by ^^^return ^^^type, ^^^but ^^^you ^^^need ^^^a ^^^bytecode ^^^editor ^^^to ^^^create ^^^a ^^^class ^^^like ^^^that.
&gt;StringJoiner Whoa, hadn't seen that one before! After looking it up, it seems like it could be quite useful for toString methods or for printing out the contents of a collection.
To be honest I have only once every needed to write java when I didn't have access to an IDE, and that really could have waited. But I still think it is beneficially to know how, even if it isn't really necessary.
I prefer [doobie](https://github.com/tpolecat/doobie) as my database wrapper of choice.
I think the head first book is more geared towards programmers learning java, although I still think it's a great book for beginners if they also use the internet to look up things in the book they are unsure of.
Go on Amazon and buy yourself a copy of the justly famous Java textbook: "Java: How To Program" by Deitel &amp; Deitel. Don't spend $100 on the latest version, go back a few editions and buy a used one. Then, by yourself, read each chapter and make sure you learn it. Most important: do every single homework problem at the end of each chapter. Doing so will cement your knowledge. Then, you can supplement the Deitel-led foundation with all your online tutorials and videos. When you read in the Deitel textbook that they have a program, go ahead and type that program into a "textpad" file, compile and run every example. Going to that trouble will again force you to cement in facts. Just reading means you forget. Writing code, writing in the examples and seeing if they run, will fix details of the language into your brain. If you do as I have suggested--you can succeed.
Learning assembly made me cry in the corner.
Your crying was merely a sign of programming weakness leaving the body. It is to be expected when becoming an assembly (god tier) programmer.
I agree. Constantly being shown the right way to do something (and, in this case compiling a functioning program) is well ... constantly being shown the right way to do something. It's a teaching and learning experience. Code-completion really makes me stop and think, "Damn! What other tricks does this language have up its sleeve?" Then, I go to the API docs for the bigger picture. I also go the API docs more often now before typing anything for the bigger picture and, because not all API's are documented in the same way - it helps to be able to know how to read docs.
Do tons of exercises. Make sure every chapter makes complete sense to you before you move on to the next one. Don't rush. (Of course if one chapter seems to completely stump you feel free to skip it, but make sure you've tried really hard to experiment or look up the confusing topic before you decide to shelve it and come back later.) As a professional I can tell you *all* the elements of a programming language eventually become extremely simple and obvious, after a while. But it takes a lot of time and effort, it took me a few years before everything really started to click. I made the mistakes I described, rushing and skipping things, trying to get to the "fun part." But it's ALL important.
&gt; but then you will never know how to use a blunt knife in the event that you don't have access to a sharp one. In the case of programming you just download your sharp knife and hey presto. Really, the use case of being able to handcraft code from notepad++ for most programmers is rapidly reducing to nothing. It's almost like a god of the gaps argument to justify it. &gt; It's like how in math you usually start with basic arithmetic, then move on equations, and then eventually you can learn real math like calculus and trigonometry. Sure you could teach it all in one, but then if you ever needed to solve an equation besides a derivative you would be stuck. The reason why this argument is dreadful is because it isn't fair. Nobody is claiming that people need to learn how to use every feature of an IDE straight out of the gate while simultaneously learning every feature of programming. Besides, the way we teach maths is terrible, it turns kids off of the subject. Hell, it's so removed from reality that people who work in applied mathematics (like programmers) don't even realise that programming is implicitly mathematics. 
Spring Data (JPA, Hadoop, MongoDB, Spring Data REST). Define some Entity classes, and you have a full HATEOAS RESTful web service. Done. For free. What's JavaEE bringing to the table for integration with non SQL data stores? I see nothing nearly as compelling and cohesive as Spring's Repository programming model. LDAP? Spring has greatly simplified integrating vs. vanilla javax naming, and provides at least a semblance of a "transactional" model for LDAP operations. What does JavaEE offer in terms of Enterprise Integration Patterns? Nothing, you're back to leverageing something like Spring Integration, or Apache Camel. Why use Spring? Because I'm tired of waiting for pure JavaEE to catch up...
Very much so. Hence you can't drive a lorry on a car license. 
I find a good way to learn is to do something fun with it! Make something that will be useful to you; even if there's a free software to do it for you, make *your own* scheduling assistant, binary converter, XOR encryptor/decryptor or whatever you can think of! It doesn't have to be complicated, but it'll be a good motivator if it's useful. If you like maths, I'd also recommend doing something like [Project Euler](https://projecteuler.net/). It won't get you much past the basics, but will solidify your understanding of those basics early on and maybe introduce you to some good mathematical concepts in programming. Plus I just love problems and puzzles and if I can code a solution it makes it all the more fun :D
Personally, I dislike that he doesn't adhere to commonly acknowledged standards. His variable naming is terrible, he doesn't stick to coding conventions, and more. The /r/learnprogramming wiki has a [relevant article](http://www.reddit.com/r/learnprogramming/comments/11ubro/28_ways_to_learn_programming/c6ppc38) - there he is also in the list of [discouraged resources](http://www.reddit.com/r/learnprogramming/wiki/index#wiki_discouraged_resources). The videos of Derek Banas from [newThinkTank](http://newthinktank.com), [Youtube Playlist](https://www.youtube.com/playlist?list=PLE7E8B7F4856C9B19) are a much better resource.
See my reply to your first comment. You double-posted.
Sorry about that.
No problem.
Learning to program, in some respects is retraining your brain. Its a paradigm shift in how you approach problems - very logical and object oriented (in Java's case). I think its hard until it suddenly clicks and you have an ah-ha moment. If you are learning Java, I would recommend learning the concepts of object oriented programming in parallel. You can learn java without learning those very well and I think you will struggle. 
Since I've only seen it mentioned here once, I just want to suggest JGrasp again. It is really, really basic, but it's just a solid IDE overall, and the debugging features (esp. for data structures) are fantastic. I use Eclipse and vim now, but it's a fantastic starting point.
We are using j2objc
JavaFX... javafxports.org
YouTube sucks, buy a book
As somebody who's spent the last year trying to get a grasp on a few languages, I would say start with processing rather than core Java. Getting a grasp of variables, datatypes and how to use them is a lot to take on at the beginning and processing will allow you to play and get visible results. It's not application programming per se but it will give you something of an insight into algorithms and the basic building blocks whilst letting you make things with fast visual feedback. I'm just starting to delve into Java &amp; android and the time I spent messing with processing has been invaluable in getting me over the initial hurdles. I found Daniel Shiffman's books &amp; vids to be a great help. http://shiffman.net/ Mainly though just keep at it. Good luck FYI. I am not Daniel Shiffman
Take your time. Try to have fun. Try to build real things as soon as you can rather than doing exercises.
In 11 years of Java development, not a single time past college have I ever found a need to write a recursive algorithm. It's academic minutia. 
C++. Available for free in all mobile OS SDKs However if you are selling your app and want to use Java on iOS, which keeps getting ignored by Oracle, maybe the RoboVM guys should be rewarded by their work. 
A lot of people want to work remotely for a place near where they live, to avoid tax implications, benefits, etc. You can search by tag by clicking on a tag.
Interesting...
So you want to filter by tag(s)? I can add that.
Ok, cool. Have you thought about making it semi-automated? It's an idea that I have had for a while, more for personal fun and benefit really. Basically just crawl all the sites and implement some searching alghoritm to define if the job is remote. List all possible found jobs on an Administrator page, where you then manually confirm (yes/no) which either posts it on the public site or removes it from the database.
Avian I believe
How do you manage the dependencies in your current project? Edit: since you are already developing for 3 years, it seems like you don't really need to know it to be effective. I just find that Maven or Gradle make my life a lot easier. Instead of having to go out on the web, download jars, and add them to the classpath, I now just have to add a single line (using Gradle) to my build file and then restart my project. I also use embedded tomcat servers with Gradle plugin "gretty" so that I can easily start my apps from command line while in development. In the end it's all about personal preference. You do not really need it, but if you know what it can do for you you'll find that it ends up making your life much easier. :)
I completly agree with you!
So is learning to drive. At least you can't kill anyone learning to code. Not to say you can't kill anyone with code, but you are unlikely to be writing mission critical software this early on in your career :P Just take it a little piece at a time and you'll get there. The /r/javahelp sub wiki has a lot of good info if you have not read that already.
If you work for a software house that really takes to automation of the build/integration and deployment cycle then I think it's rather essential to know at least one of these lifecycle management tools like Maven to Gradle. The concepts are simple and it doesn't take much effort (5 minutes) to get something basic going on. As other guys have said if you haven't needed it before it isn't something you are going to essentially need, but it but I think once you realise how much time and effort it saves you, you will not regret it at all. 
Maven is very implicit, so it assumes a lot about your project. It assumes a certain folder layout, that you have a file named exactly 'pom.xml' which tells it how to build your software, etc.. The terminology is also strange at first, what are groups and artifacts? Groups are just package names for a project while artifacts are specific library or application names within that project, so you could have something like groupId = com.yourcompany.yourproject and artifactId = yourproject-yourlib There's a lot you can do with Maven (through the use of plugins), but you don't need to know all that if you just want to package your project into a JAR or WAR.
So is there any good reference for that ? I mean to learn Maven ? I have downloaded couple of books. ? Do i need read it whole ? How much should i know ?&gt;
Absolutely agreed. We develop a lot of libraries which are re-used across projects, so we also have our own Maven repository. Our build server publishes every artifact there, snapshots and releases. This takes away a lot of hassle from the developers. They just develop things, test them locally and when they commit it it's built and tested automatically before being published in Maven so that other people can use it a few minutes after the commit without having to build everything themselves.
Check this [maven tutorial](http://www.codetab.org/apache-maven-tutorial/) out.
You should at least know the basics of Maven imho, so things like these: - How to build your project with Maven - What the structure is of a POM (properties/plugins/dependencies/...) - How to add dependencies - How to add a plugin - How to create a parent/child module Is it worth to read a book? Only if you like/prefer reading books, I never read a book about Maven, because it's just some configuration... you can usually easily configure it with a simple wizard in most IDE's and otherwise you can look it up on Google as well. Most of the time spent on your pom.xml file is about setting up plugins, and plugin configuration is unique to the plugin itself, so you'll have to read their documentation/google it. The easiest way to learn these basic principles is to create your own Maven project, use Eclipse/IntelliJ or another IDE to setup your pom.xml file and manually look at the source to see what is being generated for dependencies/modules/... .
So, why not switch to an Open Source database, then?
&gt; I'd love to try JOOQ but it's licensed software, and our team has yet to come up with a reason to buy it yet. I'm sure that I can provide you with tons of reasons! What kind of native SQL queries are you writing in your application? Are you using stored procedures? Vendor-specific data types?
I can't image a java project without maven.
Every time, without fail, that I've tried out an alternative build system I've ended up going back to Maven. I know it. It works well enough. It does the job. And it has a large ecosystem of plugins for everything else you would want to do with it. (To the extent that I've recently found the [Maven Frontend Plugin](https://github.com/eirslett/frontend-maven-plugin) to run Node, NPM and Grunt tasks for building Javascript for my webapps) Otherwise, I've tried Gradle, Ant, Make, SBT, Leinengen, and probably others that I can't remember. None of them have been as good - for me - at getting the job done. Gradle is probably the second best, but I've had so many problems with plugins not working because of the API changing underneath that I've just given up hope on it. 
I dread the day I have to go back to using Maven.
Oh definitely don't read any books. Just unzip Maven (and for Windows add Maven's path to the PATH environment variable), try to create your first POM and just run 'mvn clean install' from the command line (with the pom.xml in the current directory) and watch the magic happen (or fail which will also be useful). There is no secret to learning Maven, it's just a tool which does some useful things, like 7-ZIP, so just have to need to learn the most basic commands to get started.
Why? What do you use?
I'm sure with maven he meant any build tool.
Existing contracts?
It might be an idea to start learning java EE. Learn to understand things like JPA, what beans are etc. It depends ofcourse which direction you want to go. Maybe build a rest API that consumes some other public API and display it through an angular frontend that you can show people. Set up a development pipeline if thats what youre into. Or as the other guy mentioned, try creating an android app. Really its up to you.
Can't blame the tool for that, though. Those same guys were probably using GMaven to make a mess before they found Gradle. Or creating huge multi-module projects with filesystem dependencies between them.
I wouldn't be surprised to find that you can do everything in the SBT project files in the Scala project files too. It's just not always obvious or easy to find out how to do so. (Or at least, it wasn't last time I used it, which was last year sometime) What I find a real shame is that there are some very common use cases - multi-module projects being one - that the simpler form of configuring doesn't support, when it could quite easily.
If you're looking into Spring, take a look at Spring boot, takes a lot of the overwhelming-ness out of it, but at the same time, you don't learn the basics very well (i.e. it's good if you know what you're doing already, but also good if you just want something to work) Back in the day, I wrote a breakout-clone, seems silly, but games show a lot of programming understanding since the "business logic" is very apparent to the user rather than hidden behind some service. But, to be honest, CV/Resumes are usually glanced at, people don't really dive too deep into them in terms of looking at what you've done too in depth (most of the time). Have some app you wrote on there mentioned shows you are interested in this beyond just professionally. Also, post your code on github so it's easily viewable by companies looking to hire you.
Good question, I learned it mostly from courses I followed, so I dont know tbh, sorry.
Yeah, documentation is still pretty sparse with sbt, which is a shame cause you can make some really powerful build systems with it. It seems like they're making the simpler build files more powerful too so hopefully multiproject projects will be doable with them in the future.
In my opinion, I wouldn't dive into spring directly, and definitely not if you don't know the basics of JEE. If you study JEE a bit first you'll know exactly why spring exists and what problems it solves. If you dive directly into spring, or even spring boot, things will get confusing really quickly and cause frustration. (At least for me) I agree that games are good practice platforms though! If thats your interest, its a great way to learn new things while working with something you enjoy. An interesting thing for instance is using the public API for League of Legends to do some business logic and output some statistics. (This inspired my first posts suggestion)
Only reason I talked about Spring at this point was because he mentioned in his original post. I agree to an extent, but at this point JEE and Spring are so similar just pick one, then learn the other in a weekend.
Yep. 
But the main() method can only have an array of strings if it is to be considered a main method that could potentially be invoked from the command line. (See my related reply above that has examples.)
Isn't StringJoiner just to join multiple strings with a common separator, and possibly add a prefix / suffix? There are many uses of StringBuilder that are more general than that. For example, to construct an error message. StringBuilder sb = new StringBuidler( 1024 ); sb.append( "One or more of the following checks had conbobulated frrazzles." ); for( Check check : checks ) { sb.append( "&lt;li&gt;check number " ); sb.append( check.getNumber() ); sb.append( "; frazzle was: " ); sb.append( check.frazzle() == CheckStatus.Conbobulated ); sb.append( "&lt;/li&gt;" ); } sb.append( "&lt;/ul&gt;Please correct these checks and then click submit again." ); String errorMessageHtml = sb.toString(); 
Mostly multi-table joins, standard RDBMS stuff. The ugliest queries are probably ones that do pagination - SQL Server 2008 doesn't have any sugar to do pages like 2012 does, so we're stuck writing CTEs. Stored procs for legacy code - we avoid them for new stuff. No vendor specific data types that I know of.
Ah that's nice. Yea, we have to resort to the ROWNUM common table expression crap. 
&gt; I wouldn't be surprised to find that you can do everything in the SBT project files in the Scala project files too. It's just not always obvious or easy to find out how to do so. (Or at least, it wasn't last time I used it, which was last year sometime) There is none, it explains in the [5th page](http://www.scala-sbt.org/0.13/tutorial/Basic-Def.html) the sbt docs that the .sbt files are just plain scala files with import sbt._ import Process._ import Keys._ imported for you. &gt; What I find a real shame is that there are some very common use cases - multi-module projects being one - that the simpler form of configuring doesn't support, when it could quite easily. I went back to the oldest version of sbt's documentation I could find and found that included that has the .sbt dsl, and found a [working example](http://www.scala-sbt.org/0.12.1/docs/Getting-Started/Multi-Project.html).
Despite Microsoft's attempt to deprive Larry Ellison of the pleasure of the involuntary evil laughter he gets every time someone suffers from unknowingly installing the Ask Toolbar, Oracle will no doubt continue to distribute it. Microsoft's efforts won't stop them. 
There really is no easier way to make a nice looking highly interactive web application than PrimeFaces.
Hmmm pretty much all the services of my company are using SQLServer, the database team don't want to change it also. It's not like we have an option here :)
2014 post?
Interfaces *can't* have implementation (though I think with Java 8 and default methods that's not quite true anymore). Abstract classes *can* have implementation or you just call the method abstract and leave it like an interface with just the method declaration. Also, a class can implement as many interfaces as it wants (composition) versus you can only extend a single class/abstract class (inheritance).
How would you go about having maven on an external build machine. I am use to ant, can you checkout your own source from a repository before stuff is built? 
Four of the biggest IT companies. I'm not sure which ones they are except for IBM. Probably Microsoft too.
SWT is absolutely great as a GUI environment but unfortunately it is platform dependent so you need to have the proper library for each environment (amd64, i386...) which is pretty much a no-go unless you are writing something that you know will run in only a specific set of conditions (like when you download eclipse 32 bits for Windows or something).
The task was to build a GUI app with data IO. Solved it with JavaFX for a friend who can't programm, then he said they work with Swing ... ⚆ᗝ⚆. Did again with Swing and he got a 1, case closed :).
If you have a service that creates a bank account the interfaz only tells you that a service creates an account. On the other an abastract class tells you that the service creates and account and how you must create the account.
I thought about adding this disclaimer for my comment: I don't mean to say your choice was wrong in any way but I wanted to add this other option just so you know it exists. Anyway thanks for the post because I had the exact same doubt for a project I'm upgrading (originally used AWT) and I didn't want to go with SWT due to platform-dependency issues although I love it for GUI development. Having just found out about this sub about half an hour ago it wouldn't even have come to me to post the question myself :) What I got out of it: JavaFX for desktop apps (like my case) but otherwise web development is preferred (though I'd probably rather write Python then, depending on size/complexity of the project).
It's hard to switch when its not broken.
It sucks for real time apps but it's great for non real time, interactive apps such as almost every service. Services are one of java's most common use cases. Cms is better for small heaps. And parallel which is the current default is bad for everything but batch. 
GUI design improves a lot when you find out you can add gifs to buttons. Now I have 3 running pigs all over my app. https://www.dropbox.com/s/3uep6f6wsdq71gh/Csv2Html.jar?dl=0
Kind of. Spent years doing java perf stuff. It's complicated. I'd vote for cms for most services unless you can have near unbounded garbage growth or a lot of medium life lived objects. Or any service that can take 500ms per request I would keep parallel. 
I've worked in three java shops so far. Either they ran maven from day 1 or someone fought to replace all existing builds with maven and succeeded. If I were interviewing a programmer I'd consider it a problem if they haven't worked with maven, gradle, sbt, or any post-ant build tool. For enterprise level stuff our senior devs and architects will sometimes namedrop gradle and sbt but we always settle on maven. If we're comparing open source libraries and one doesn't publish their jars in a maven repository, I consider it the bushiest of bush league. Learning the basics is easy enough. Make one, play with it, once you understand what the parts are, read on best practices for dependency and plugin management. To see some decently clean examples, pull any given apache java project and check out the source, almost all of them use maven builds. My motivation is my undying love for maven's underlying philosophy of "convention over configuration", this idea that most every build has a source folder, a target folder, tests, packaging, etc., and there are predetermined places for all the normal ingredients. I have a burning hatred for the old way of make and ant, reinventing the wheel every time, differently each time. Maven won't always be the best, but it has fundamentally changed the game.
Interfaces can have default implmentations, but they must be stateless.
Unreadable.
With large heaps you fragmentation becomes a big issue for CMS. Tens of garbage collections can ensue after a few weeks. But I agree. It's complicated and there are always plenty of variables and no one size fits all approach. 
A solution/workaround for the `super(this::bar)` problem - https://groups.google.com/forum/#!topic/java-lang-fans/8kaBhp4Uzq4
This article should have more up votes. It approaches this whole dumb debate with the right perspective.
For more complicated scenarios StringBuilder is usually better. Here is [example](http://hg.openjdk.java.net/jdk9/jdk9/jdk/rev/8be081fb8db1) how StringJoiner was used to replace StringBuilder in JDK code.
Gomenazai it came to my twitter 
Submitting random Java Docs is not interesting at all. Please consider not submitting every garbage you see on twitter or the wider internet. 
If we're at the point where we have GC for every occasion, then would it be beyond the pale to suggest that the JVM pick an appropriate GC based on the process' past performance characteristics?
Learn a new language and do functional programming. Try scala, try Haskell, try f#, something different. Jar your brain into thinking differently (pun not intended)
books.set() sure seems like the easiest method there
Maybe I'm misunderstanding you because automation extends way beyond running Java builds, hence it not being an automation power horse. I still don't find Maven blissful though. Far too much effort involved in working around the Reactor order. The problem I keep seeing with tools like Maven, Jenkins and even Gradle, is that people find they have a problem to solve, discover that there's a Maven/Jenkins/Gradle plugin that appears to solve it, and they use that, even if it doesn't solve it very well. I've seen so many really awful build pipelines that jump through all sorts of hoops that just look odd, and that break easily, and it usually tracks back to "we had to do things this way because Plugin X only works like that". Replace the plugin with some scripting and usually everything's hunky dory. Example: signing an RPM, then pushing it to Spacewalk. **Nothing** does that better than a couple of lines of bash, yet the crap I see teams pull *just* to avoid writing those couple of lines of bash is ridiculous.
...*cough*...XmlBeans....
It's ok not to use one for a pet project, but why wouldn't you? Even on trivial apps I'd rather not have to compile and run things by hand. 
It's hard to see that it's broken when you don't know what "fixed" looks like. 
I'm surprised too by the amount of downvoting... To be fair, perhaps the Java vs. Spring (non-)debate has already saturated this subreddit. Perhaps it's simply enough for now.
Straight out of college, the bar is fairly low as far as technical ability is concerned. Interviews won't really be about language details, but about your ability to grasp concepts and problem solve. If you've got any pet projects actually deployed somewhere, that's worth a fortune to someone interviewing grads. Even if you've broken every rule in the software lifecycle book getting it there, you're at an advantage because as soon as you see how your employer does things, you'll understand the benefit of doing it that way over your way. Someone who's never gotten anything live will just go "oh that's how it's done" and not really have any insight into *why*. 
Objects aren't passed at all. References to them are. By value. It isn't so much a trick question, as a device for trolling the ~~Sun~~ Oracle Java forums. 
You're fired. 
Each class can have an arbitrary number of methods called main, right up to the size limit of a class. It's a worthless question because you don't know if the interviewer wants the answer "one" or if it's a trick. 
For the sake of simplicity, basically. The designers didn't believe the advantages of passing by reference were a worthy trade off. The JVM stores primitives on the stack, so putting references there - as values, because references are primitives - was simple. Storing an object on the stack complicates matters. It's solvable, but was deemed not worth the effort. 
I managed to find some time to verify a few things. Starting with your comment about "Java EE did not copy Spring DI. How could they? Spring DI is XML based and non-type safe, where CDI is annotations based and type-safe." - JSF 1.0 dropped in 2004, but Spring originated DI in Rod's 2002 book. - Spring's not XML-based. It's always had a metamodel that supports any manner of input. Since Spring was introduced before Java 5 (end of 2004), it supported the XDoclet-like Apache commons-attribute annotations and XML as ways to tell it about the configuration of the beans it managed. - we introduced a Java config approach in early 2007 and that was right around same time as Guice was announced, but YEARS before CDI (JSR 299 which was part of late 2009's Java EE 6 standard). Remember, CDI/webbeans was originally going to be JSF &amp; EJB (the rubber stamping of Seam), not just a DI container. It was based on Java EE 5 + EJB, so no DI. They added that much later and of course then JSR 330 (started by Rod J and Bob Lee) got added before EE 6 so the only truly portable DI mechanism is using JSR 330 (which works in CDI, android, and of course Spring). - Java EE5 had @Stateless and so on BEFORE Spring 2.0 introduced`@Component` and the like but we were the first to use annotations with `@Transactional` in Spring 1.2
Dependency Injection. It can be done via Spring ([Spring-context](http://projects.spring.io/spring-framework/), to be more presice, so you'll be learning one part of Spring per time. This is the most used one, most "basic" one.), or [Guice](https://github.com/google/guice), or [Dagger](https://github.com/square/dagger) or [Dagger 2](https://github.com/google/dagger), doesn't really matter which one of these you choose (for small projects, you don't even need a DI framework to write in DI style). You simply need to understand the concept and these tools tend to help.
&gt; the JAX survey had 1462 people vote on the survey. Google translate it into English and do your homework and you'll see it, just waiting for those who are thorough. 52 people is not statistically significant. Dude, I don't need to translate to English as I can read German directly. Thank you very much ;) I still don't know where you get the 52 people from. It were 1462 participants. The results were discussed in a couple of articles including the (German) print version. &gt; And all your data is waaaaaaay old compared It's not my data, it's JAX's data. &gt;re: SO, why am I including JSF + JSF2, exactly? I could argue that since spring mvc is part of spring framework, I should include that tag as well, which will crush your numbers. That would be wrong, since you would then have to include "Java EE" for the JSF query. JSF and Spring MVC are web frameworks that are part of resp. Java EE and Spring. &gt;I'm not a heavy SO user, but I am pretty sure you can tag a question with more than one tag, so combining JSF+JSF2 would yield a LOT of overlap. Please read what was written above: **SO is smart enough not to include duplicates.** "jsf or jsf-2" will yield as the result all unique questions that are tagged as either "jsf", "jsf-2", or both. You could have easily checked this yourself: http://stackoverflow.com/questions/tagged/jsf+or+jsf-2 35,102 http://stackoverflow.com/questions/tagged/jsf 26,584 http://stackoverflow.com/questions/tagged/jsf-2 14,177 Take a look at the fact that 35,102 does not equal 40,761. &gt;I checked and many questions ARE tagged JSF + JSF2, again, artificially inflating your numbers. You're running to conclusions here that are in favour of the numbers you want to see. If questions are tagged by "jsf + jsf-2" they will count as 1 question each when you query for "jsf or jsf-2". 
This is already covered, but there are two real options that you can use. 1. The Assembly Plugin. This will package together whatever files and dependencies you want, in whatever structure you want, in whatever format you want. You can make it produce a directory, a zip file, a tgz file, and so on. You can put all of the dependencies - including the current project, or not, in a directory. You can put static files in other places. You can pretty much do whatever you want. This means that you can then have all of your JARs in a "lib" directory, and a startup script that builds a classpath of them all, and runs the main class. 2. The Shade Plugin. This will build a single super JAR file that contains the contents of the current project plus all appropriate dependencies (Compile and Runtime scope only). You get a lot less control over what goes where here, and you can have problems with file collisions (If you use Spring, for example, you need to have some special config to manage that). But it is a lot easier to get going with and a lot easier for people to use. There are other options depending on what you're trying to achieve, but not many that are as useful as the above two. The Maven Exec plugin, for example, will let you run the project from Maven, but that's not useful for distributing it. 
Have you had a look at the Oracle trail for Java EE? Think could be a starting point for what you are after.
But there is also so much other stuff, I don't want to confuse myself, I'm not very experienced :/
I am because I got the question right.
Creating a functioning web shop is not a trivial task you can knock out in an afternoon. The odd criteria of '(no way around, no php or javascript allowed)' makes it seem a little like a homework project (apologies if I'm wrong). However the tutorials I mentioned will cover the areas you want. You could use something like SpringBoot to get the bones of it up and running fairly quickly, so you would want to look at those tutorials, but either way if you've not done anything like this before there is going to be a fair bit of learning required. 
&gt; Oracle used to support Glassfish or something but they canned it and nixed it. Just to be clear they "canned" and "nixed" commercial support for Glassfish, not Glassfish the server. The [Payara](http://www.payara.co.uk/home) guys provide 24/7 support for Glassfish as well as their own customized version. They are actively fixing glassfish issues and pushing fixes upstream.
It is OK for any software project. It can add some overhead if you only code an algorithm with no dependencies.
&gt; Spring data rest that basically exposes your JPA entities as discoverable REST resources. Is this similar to that? https://wiki.eclipse.org/EclipseLink/DesignDocs/JPARS2.0 (not trying to troll or argue, I *just* this morning learned the existence of JPA-RS and I'm curious how it compares since I'm not very familiar with Spring)
It is pretty much the same. The only extra I think you have in Spring is the ability to query resources, like saying http://localhost:8080/persons/search/findByName This is why we need a table Spring | JEE, to know what is available on each side!
Technically yes. The definition of a 'main' method being: a method that can be invoked using the java command from the command line. It must have a specific form. Either: public static void main( String[] args ) { . . . . } or public static void main( String... args ) { . . . . } When talking about a 'main' method, it is commonly understood to mean method that can be called from the command line when Java is started. The understanding is so common because no java code can execute unless it was called from a main() method. You might not write the main method, but there is one. 
The trick is to give up on your imperative thinking. Just tell the computer *what* you want, not *how* you want it. Then the magic of the lambda calculus will do the rest. It really isn't that difficult once you accept that it's a completely different paradigm. http://learnyouahaskell.com/ is a great free tutorial for people coming from non-functional languages. 
I think you can blame the tool. I think Maven's biggest feature is how hard it is to misuse. It is a godsend for sustain developer. 
This sounds like your teacher may need an update in what they are teaching. Not to say that JDBC and JSP are not valid and supported technologies, but there are more modern approaches to this. I have been in the classroom with professors whose knowledge is 10+ years old and it can be quite frustrating. From what I see most places these days are using JPA and JSF if youre a JEE shop or they are using Spring. Sticking with JDBC and JSP just makes me think this is a person who knew J2EE and has not updated their skillset.
The "problem with FP" is that it is only concise and effective when the libraries offer tons of functionality. Streams is just a bit too simplistic for most FP use-cases.
Besides the technical aspects, I think interfaces and abstract classes have a different purpose. Interfaces are general things that have a weak connection to the classes that implement them. As a class can implement multiple interfaces, each single interface can be just a small part of that class. Instances tend to be broad, like 'comparable': that just means you can compare it, not that it's a certain type of fruit or a particular animal or vehicle. And if you implement 'list' it just says that you contain a collection of sorts. But you could also do a whole lot of other things except for what your interfaces tell you to do. Abstract classes have a strong connection to their subclasses. A subclass really is just a specialization of the abstract class. So you have your abstract animal, but you can't make new animals, just cats and dogs. However, your cat can also implement the 'canPet' interface which may also be implemented by your 'petrock' class. If you think of your concrete class as an RPG character, the interfaces it implements are its traits or skills (athletics, will, etc) and its abstract superclass is its RPG class (warrior, wizard, etc).
yes, but I've heard them in job interviews.
You could always check out an article on [Model 2](http://www.javaworld.com/article/2076557/java-web-development/understanding-javaserver-pages-model-2-architecture.html) architecture (which is what the design of separating the servlet from the JSP is called). The date on the article is 1999. It's a blast from the past!
It's an important concept. Asking whether parameters are passed by value or passed by reference is a gotcha question. If you don't know that objects are passed by reference in java then you're unfit. 
If you don't know that objects aren't passed at all, you mean. 
That's another gotcha question. Practically, you do pass objects and you pass them by passing a reference. 
Oracle has good tutorials for these things: - Servlet, JSP etc: http://docs.oracle.com/javaee/6/tutorial/doc/bnafd.html - JSF (perhaps?): http://docs.oracle.com/javaee/7/tutorial/partwebtier.htm - JDBC: http://docs.oracle.com/javase/tutorial/jdbc/
Sure, on utterly trivial apps it's overhead. Once there's maybe more than one package, even compilation is simpler with a tool like Maven.
You're probably right about that. Initially I thought of it as a simple question with a simple answer. The discussion it spawned would suggest it is a poor question for a beginner.
Types are very useful to communicate intent. Consider the following two, functionally equivalent APIs: void method1(String s) throws ObjectNotFoundException, InvalidArgumentException, StringTooLongException, StringTooShortException; /** * @throws Exception - Look into the message. When it starts with * "ObjectNotFound: " - then we didn't find the object * "InvalidArgument: " - then the argument passed wasn't valid * "StringToo: " - then something's wrong with the string */ void method2(String s) throws Exception; Which one communicates intent more clearly? Now, there has been a lot of debate about checked exceptions. Not everyone likes them. But they do help communicate the nature of an exception much better than the alternative, so they help enforcing stricter error handling, where this is needed and useful. Much of the opposition against checked exception probably results from the ubiquitous `IOException` and `SQLException`, which shouldn't really be checked, as there's usually not much you can do when they occur, unlike the "business exceptions" in the above example.
There's a similar problem with a lot of "easy" questions: more often than not, someone has a corner case answer that goes against what's commonly understood. Once you have such a case, it's hard to know what answer is being looked for and you might come over as being underskilled, or a smartass, where neither might be true. I also think anybody with enough experience to be interviewing a junior dev will be too far removed from what it's like to be a beginner, to be qualified to write beginner questions. It's a really tricky problem. If I was interviewing a grad for a grad position, I think I'd just get them to write any old program, hello world or whatever, and see that they can get it to compile and run, then focus on other aspects than code altogether. Or maybe just a ready-made but slightly broken simple bit of code, and see if they can interpret basic stack traces and compiler errors. It's far easier to interview someone of close to your own level of experience, I reckon. 
I totally agree with the point that JDBC and JSP are foundational and easier to understand. Maybe I've just been burned by too many "expert professors" who haven't moved their skills beyond J2EE. It seems a lot of time at the college level there is nobody checking up on the professors to make sure that they are staying relevant. I guess I'm a bit jaded on the whole thing.
You need to break down the building of the site into parts and learn each part. Specifically: 1&gt; Build a web site that does the usual "hello world" web page. 2&gt; Add auth, change hello world so it says: Hello Vanx. 3&gt; Change the hello world web page to instead show a table that lists products taken from the database. 4&gt; Build a simple page to add/remove items from the database. 5&gt; Create the shopping cart concept. Where you can add an item from the table into a stored session variable and click out to a checkout page that retrieves the session data. Most any basic web tutorial or book should walk you through most of the above steps. The key is to just break things down into small, simple parts that you can build and work on. So right this moment you don't want to create a webshop. You want to create a standard MVC style website that prints "Hello World". Once that's done, then you should be able to find good tutorials on how to add user auth. When that's done you can look into reading from a database and display that information on the page. I have 30 years of programming experience and the above is how I build things. Break it into parts, keep it small, work on that until it's done, move onto the next small step. 
* **TurboPFor: Fastest Integer Compression** - **Direct Access** w/o decompression - Fastest **Variable Byte** implementation - Novel **Variable Simple** faster than simple16, better than simple8-b - Scalar **Bit Packing** decoding as fast as SIMD-Packing - Bit Packing incl. **Direct Access/Update** w/ zero decompression - Fastest and most efficient **SIMD Bit Packing** - Fastest SIMD-**Elias Fano** implementation - Novel **TurboPFor** (PFor/PForDelta) with direct access or bulk decoding More efficient than **ANY** other "integer compression" scheme. - Java Critical Native Interface. Access TurboPFor incl. SIMD from **Java** as fast as calling from C. ---------------------------------------------------------------------------------- * **Inverted Index + Intersections** - Novel **Intersections w/ skip intervals**, decompress the min. #blocks - **2000!** queries /sec on GOV2 (25 MB docid) on a **SINGLE** core - **Parallel Query Processing** on Multicores. **7000!** queries/sec, **quad** core CPU
&gt; But if you want to write a one-liner Then proceeds to write 6 and 7 line blocks of code.... 
The points still hold, don't they? Rod Johnson may have published a book, but JSF was not invented in a single day either. Papers about DI circulated since at least 1995, likely earlier. Both Seam and CDI are still not based on Spring. JSR 330 is identical to what 299 already defined, and 330 does not define a full DI solution. Read http://www.infoq.com/news/2009/11/weld10 
You are totally right, my prof is 64 and I think he simply stopped learning new stuff about 20years ago ... and I can kinda understand that but .. well it's still not really good for us
You actually can do multi-module projects in the .sbt files [now](http://www.scala-sbt.org/0.13.0/docs/Community/ChangeSummary_0.13.0.html#sbt-format-enhancements). The .sbt file format has actually received a bunch of improvments in the 0.13.x releases.
Please read the sidebar. Also: use the search function. This question has been asked [over and over and over again](https://www.reddit.com/r/java+javahelp+learnjava+learnprogramming/search?q=learn+javafx&amp;restrict_sr=on&amp;sort=relevance&amp;t=all).
Your company is stupid.
&gt; using Chrome due to NPAPI. Are you talking about Java-Applets? If so: yes, this is dying and should immediately abandoned by anyone. For everything else (desktop, *server*, mobile apps) Java is not only fine but a very good choice.
Java, still has a bright future. I think most of the readers here would say that. Most companies still use Java for Entreprise development. Java is supported by companies like Google with Android, Oracle ofcourse, IBM, etc. Also I think with the new JVM languages (Scala, Clojure, etc...) coming up they give people new ways on using the JVM as a platform. 
https://github.com/essiembre/eclipse-rbe Does everything you want, but is a eclipse plugin.
You're talking about Java **applets**, which should be deprecated because they're a mess. Java as a platform is used for quite a lot more than just applets though - to give you some perspective, Java (and other JVM languages) power quite a lot of major websites, including many of Google's services, Netflix, Twitter, etc.
"Java 8 requires JIRA 6.3."
Yeah - Gradle with proper discipline is dramatically more flexible and nicer to use than Maven, and it's much easier to write plugins for. So much so that nearly all of our builds now use Gradle as the entry point, even the ones that don't use the JVM at all, because it's usually easier and more reliable to use Gradle to bootstrap and coordinate everything.
Which is one of the reasons I prefer Gradle - when the best solution is honestly to just shell out, Gradle makes that easy too - to the extent that you can literally exec a string if need be, while still having access to a real programming language and Gradle's task system (and groovy's extensions to the Java collection and file APIs are extremely handy for build scripts, e.g. `file('some-file').absolutePath` does exactly what it says on the tin).
my company is doing the same thing. Moving from Java desktop applications and JEE application servers to web based applications (html, css, javascript) and ruby on rails as the application server. I understand moving to web based applications, but I'm not too sure about ruby instead of Jave EE.
Interesting guy, mannerisms make it hard to watch, but very interesting. 
&gt;Objects aren't passed at all. References to them are. By value. Objects are passed, by their reference. The reference itself is passed by value.
and since as I suspected, this is incorrect, I am changing it back. 
and yet, spring is 100% modular, so the complexity is only a reflection of your problem domain. Take as much or as little as you want. EE forces you to consume the whole thing, take it or leave it.
Yeah, but Eclipse is a huge step up from Notepad, IBM Visual Age (way way old, but that's what I learned on), and Rational Application Developer (which is based on Eclipse, but somehow make Eclipse worse). 
A prime example of the [Dunning-Kruger effect](https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect) at work.
:( why are they putting the dependencies in the repo as plain jars? We've worked hard to get things building via Gradle in a cross-platform manner.
Intellij Idea supports all of this out of the box. Here is the documentation for this feature: [https://www.jetbrains.com/idea/help/editing-resource-bundle.html](https://www.jetbrains.com/idea/help/editing-resource-bundle.html) Hope it helps.
Simply not true, this is just an attempt to be correct by subtle semantic juggling. Objects are not passed at all. Knowing a little about JVM internals confirms this. Objects are stored on the heap, references on the stack. What's passed into a method call is passed from the stack. It isn't an object, and it isn't, in fact, a reference to the object either. It's a copy of the value of that reference. If it was the reference itself, you'd be able to reassign a reference in the passing scope, and have the argument in the called scope point to a different object. That doesn't happen. If people will insist on using this question to test how much someone else knows, they're obliged to get it right themselves. This is all documented, and it isn't really a matter of opinion. 
Might want to run the spell checker over your work before you make it public. Also the user name made me not want to read it right away..
No, just no. You are far from ready to publish what you have learned. You need to work on your spelling ("alot" is not even an English word, it's either "a lot" which means plenty, or "allot" which means allocate, dedicate. "computor" is spelled "computer" and plenty more) The contents is not even at basic level. Your definition of a `String` object is completely wrong, as String is an object type, and not a primitive, even more, Strings are immutable (which is an important difference to many other programming languages). Also, leetScript as in your username is not really the best idea when you want to be taken seriously. (It's far since obsoleted, by the way, and only used by real wannabes who want to show off their "l33t skillz", which, in turn, lets real professionals know that they are dealing with some pretender or megalomaniac.)
I only use PyCharm but Eclipse for Java (work, etc), so holy shit, until now you couldn't click links in Javadoc? Not trying to start a flame war or something, I love their python IDE, but wouldn't have expected that.
It's popular and widely used for a long time. You can't say that about Ruby/Python. But yeah, you're right ;)
The article is trolly. I feel trolled. Yep, I have been trolled. To summarize: &gt; Java (1995) is old, not trendy like Node.js (javascript, 1995) or new and modern like Python (1991) &gt; But their choice to support Java can be defended because there is still so much legacy stuff written in it by aging programmers, many of them well over 25 
This run icon in the editor is real timesaver http://i.imgur.com/PfPl2nw.png
As is CTRL+Shift+F10
Aging. Well over 25. &gt;:(
aka F11, because I reconfigured all colors as well as the keyboard shortcuts right after getting IntelliJ. Inside my programs (while testing), F11 minimizes the program, F12 closes it. If someone likes my well thought-out [color](https://i.imgur.com/SHrYHBs.png) scheme, I make you a prefs export.
Passing a reference to an object by value is not passing an object reference by value? You seem to be caught up with my stating that the object is passed and ignore the rest of what I say about the object being passed. When you pass a reference to an object you are passing the object by reference, that's kind of why it's called "pass-by-reference". In Java you pass references to objects by value (i.e. you pass a copy of the reference). Taking these two facts and putting them together yields: objects are passed by reference, those references are passed by value. You keep arguing that the second half of the statement is the only part which is true. I'm sorry, but it's not. The first part of the statement is implicitly true as per the nature of object references. If a method has access to an object via a reference parameter, then the object, by definition, was passed by reference. Also, the semantics of our arguments are identical. We're arguing syntax here. I'm just not sure you've picked up on that yet.
Is today opposite day? Because it seems like its opposite day
Jira+Confluence Performance has always been terrible for me. I installed it on my local machine once, and it took me weeks to figure out why my computer had become useless. The server Jira+Confluence had running in the background had absolutely tanked my computer in terms of CPU &amp; memory. Using their online services at work, I often found it to be quite slow. I may be being a bit harsh, but using Atlasian as a measure for performance might not be the greatest thing. That said, yes, upgrade your Java versions.
Barb Darrow "Newbie cloud reporter at Fortune...." That explains it.
Yeah, jira does a lot of crazy things under the hood. You really only need to look at the API and then you realize how insane the whole stack is.
I mean, I haven't wrote a JavaDoc in like 6 years. Not sure I missed the feature ;)
The description outlines quite clearly where to start. If that is unclear I suggest taking some beginner Java courses.
Agree... this task couldn't be more straight forward. If you aren't able to do this I suggest you start go to classes or pick another subject.
writing is one thing (that's still weird) but reading it is pretty important..
Quite an interesting project. Still not done anything of note with it other than consuming twitter data. 
Had to do them in college. Never in job interviews but I can believe they happen there. But never in my real job. I'm not sure there's any situation where writing a recursive algorithm is either necessary, or superior to writing a loop.
Thanks for the link.
They need a native English speaker to copywrite or edit for them.
You have to know how to read before you can program. so you should probably look that up.
Sorry, but: A) you're in the wrong subreddit. /r/java is for news, technical discussions about the language and the ecosystem and not about actual Java programming. That's what /r/javahelp is for (as is mentioned in several places in the sidebar, the banner, and even at the submission page). B) your assignment is perfectly clear (it can not get much better/clearer) and all the required information is there. Write it out in a properly formatted, bulleted list and it will become much clearer to you. C) if you post to any of the "learn" programming related subs (such as /r/javahelp, or /r/learnprogramming - /r/java is the wrong sub) you need to show that you already have spent some efforts and that you don't want to be spoonfed nor that you want your homework done for you. **Post removed:** wrong subreddit
We have so many hints already in place and still, reading seems too difficult for some people. Unfortunately, there is no way to automatically flag/remove such posts. Code help posts where actual code or links to code hosting sites are involved are already caught by Automoderator.
Unfortunately, I need to be able to let a BA loose with the application. As a result, an IDE based option isn't going to work. Good to know though. 
Unfortunately, I need to be able to let a BA loose with the application. As a result, an IDE based option isn't going to work. It also needs Java 7. (I know, I know, but )where I am that's not an option. Looks like I'm going to have to do it the hard way... as usual.
I don't know what they are talking about with this new feature because I can click links in JavaDoc today (in 14) and have been for as long as I can remember. They don't open in a new browser, they open in the same window as the original quick popup did. 
/u/pedrobotero Are you distributing this for free? Do you offer premium licenses? Not clear from the site.
javOSize it is free and will be always free. We are developing a SaaS platform to offer a competitive APM and profiling SaaS service that will use the same javOSize agent, free, with no paid extension at all, and will report the data to the platform. Those users that want to create an account in the platform will have to pay. In any case and again, the tool as it is and its evolution will be always free. We are devoted to make the best and we believe making it free is the unique way to get all people engaged to provide feedback, and to be everywhere. Regarding the javOSize Platform, I can disclose to you this Teaser page we are working on: http://www.javosize.com/platform.html Comments welcome. 
We are working in providing on that page shortly a comparison, in any case I am not going to be neutral :) although I will try: First is very objective data: price. We will be offering our service for 9.99$ agent and month. That makes big difference. Then I would say mission, NR mission is providing a fantastic Analytics platform to manipulate the data your agents grab. javOSize Platform mission is being your best friend when you have a problem and you want them to be isolated and even more important FIXED quickly. So to be honest I believe they could cooperate and complement although there is some intentional overlap intended to offer a compelling low-cost APM solution for any company.
We have fixed this one, but we are doing some basic test in Windows and fixing some other minor issues. As soon as we release v 1.0.4 I will let you know. Thanks for testing it and coming back with the issue!
I've only hunted and pecked through the doco on the site, but why are all the _things_ in UPPERCASE? ('REPOSITORY', 'TOP_FAT_STATIC_VARIABLES', 'THREADS') I'm going to get pinky-strain from typing like that too much ...
V 1.0.4 fixing this and other Windows issues has been pushed to production. Should take about 3 minutes from now to be available. Thanks and regards.
I edited out my tab completion comment after I started reading the full manual. :)
I think it is a very good point. We were thinking somehow similar, however from human memory perspective it is like the first command we all suggested to deal with size, even it is not strictly speaking right, we though it could probably be the easiest to figure out. We really appreciate all those comments, positive, negative or constructive like yours is. I am actually thinking into building some sort of community here so people can help drive what is best. I was excepting people to use contact form in the initial stage but that is pretty rudimentary ... In any case those acknowledges does not mean we do not have criteria or we do not know what we want, but specially from usability and design perspective it is really important to listen. Actually listening is always good. So thanks for letting us know. And please do not hesitate to provide any suggestion. Tomorrow I will have a meeting with the team to analyze all those comments. Feel free as well to send us email to info @ javosize . com 
Yeah it's more a case of how you structure the code that I'm concerned with, the namespaces. is com.mycompany.myproduct.api.v1.component.service; and com.mycompany.myproduct.api.v2.component.service; A good idea?
Probably :) Thanks for correction.
And I think you mean "intend" not "pretend".
Why not open-source the agent, then?
&gt; This article should have more up votes. Or more down votes, this article seems like it is restating the obvious, and you have to contaminate your brain with sentences like "if you are working in so called giant enterprise organizations there are high chances that there is an Architecture Team who will decide what platform/language/framework/libraries to use". 
Covered Python pretty good I believe this year, we finished top 10 at HP CodeWars. Planned on using C++ for next year, but from all I have read when working on curriculum most state if you are going to do C++ to not do any other language first (which all of my students will have done). We covered most of Python up until objects. Covered most of [this text](http://faculty.stedwards.edu/mikek/python/thinkpython.pdf), up through Chapter 14 (it was a mix of different books and my own writings). Argh, driving me up the walls deciding between C++ and Java, not doing the AP course though (which requires Java).
Microsoft offers free virtual machines of all major versions of Windows that run for (I think) 90 days at http://modern.ie
I last used XSL:FO nearly a decade ago. I've been looking at various OSS Java APIs capable of producing PDFs from structured content as of late. Has XSL:FO/FOP changed significantly over time? The very limited docs don't really say a lot of anything. Has XSL:FO/FOP managed to move (at least a bit) beyond throwing a bunch of fo: XML at an XSLT transformer and seeing what sticks? 
... but the "actual" digest is (at some point) computed using the exact same algorithm (and possibly the exact implementation thereof) as the expected digest. I still don't see the underlying motivation for strongly associating the idea of "checksum checking" (really, digested bytes comparison) with a particular source of the original binary content. 
I wouldn't use a specific library for that as [CheckedInputStream](https://docs.oracle.com/javase/7/docs/api/java/util/zip/CheckedInputStream.html) already does the trick. It's just a matter of adding a utility method such as this: public static long checksum(InputStream inputStream, Checksum algorithm){ try (CheckedInputStream is = new CheckedInputStream(inputStream, algorithm)) { byte[] buffer = new byte[1024]; while (is.read(buffer) &gt;= 0); // reads the bytes return is.getChecksum().getValue(); } catch (IOException ex) { throw new IllegalStateException(ex); } } And a few overrides for convenience: public static long checksum(File file, Checksum algorithm){ try { return checksum(new FileInputStream(file), algorithm); } catch (FileNotFoundException e) { throw new IllegalArgumentException(e); } } public static long checksum(InputStream inputStream){ return checksum(inputStream, new Adler32()); } public static long checksum(File file){ return checksum(file, new Adler32()); } public static long crc32Checksum(InputStream inputStream){ return checksum(inputStream, new CRC32()); } public static long crc32Checksum(File file){ return checksum(file, new CRC32()); }
Great it is fixed, but an error is showed in my application: 2015-06-18-05:40:13 [javOSize] [com.javosize.actions.CompileClassAction] [DEBUG] Requested the compilation of code for class juan.interfaz.Vista 2015-06-18-05:40:13 [javOSize] [com.javosize.actions.CompileClassAction] [ERROR] Error compiling class juan.interfaz.Vista: java.lang.Exception: Errors compilin g class juan.interfaz.Vista: java.lang.Exception: Errors compiling class juan.interfaz.Vista: at com.javosize.compiler.InMemoryJavaCompiler.compileAndReturnBytecode(I nMemoryJavaCompiler.java:103) at com.javosize.compiler.HotSwapper.validateJavaCode(HotSwapper.java:69) at com.javosize.actions.CompileClassAction.execute(CompileClassAction.ja va:47) at com.javosize.remote.client.Client.run(Client.java:38) Caused by: java.lang.NullPointerException at com.javosize.compiler.InMemoryJavaCompiler.compileAndReturnBytecode(I nMemoryJavaCompiler.java:74) ... 3 more jacOSize is running with java7 and the application with java8.
The article lacks a description what CUBA actually is. Or is it so ubiquitous that I must be living under the proverbial rock having never heard of it? The homepage offers little help (guess what, it's another framework). And while we're at it: It's nice that the homepage offers multiple languages but the Russian version is default. I send Accept-Language headers for a reason. Consider redirecting to the English version where applicable. Lastly sending a GET request for every click seems always suspicious to me.
Best done with version control and branches? v1 branch, v2 branch, etc?
The question I would ask is, is it necessary to have two different classes? Consider what the version difference are. If all V2 does is add new capabilities on top of what V1 provides, then V2 should be completely backward compatible and a V2 class can service requests from a V1 client. If V2 needs to change a given service endpoint then is it possible to create a different enpoint in V2 for the new functionality and deprecate the V1 endpoint, but under the covers they are shaing code? If the change is truly a non-backward compatible breaking change, for example changing the data model representing a hardware configuration from having just a single NIC card/IP address to multiple NIC card/IP addresses (had this situation pop up on a legacy support system) then is it even possible for the V1 code to continue running as is? If so, keep V1 running but deploy a new version of V2 with a different URL and migrate the service consumers as soon as you can. If V1 can't keep running can V2 "pretend" to be V1 and make decisions such as picking the first IP address in the list for the return data? If none of that works then V1 has to shut down anyway and you have to move your service consumers. But fundamentally you should not need to create an entire new class just for an updated version unless you truly mean to re-write the whole thing at which point I might consider that a new service.
The issue is the API controls a hardware platform, the hardware platform is unlikely to change but we only expose a subset of its features through the API, as we advance the API more features will be exposed, and behaviour will change, but we'd like old clients to still be supported.
It shows up just fine for me, no registration/membership required.
Fix typo error: "Kakfa" -&gt; "Kafka"
From what I understand it is a framework of frameworks and libraries that try to make something similar to grails for java. Basically a higher level framework that tries to make it easier to make business apps that use other popular frameworks.
Thanks! I didn't know this existed.
Sorry, but that is exactly what I mean. I am aware of what Jigsaw is supposed to solve and I understand in a general sense how it will do that. But I want to know how that changes the build, how do I call javac, or jar or Maven? Will Jigsaw change the way apps are packed? In what way? I want details! 
Not only for the jvm. But, if I understand it correctly, it could bring modularity to your own projects, much like OSGI (but easier to configure/use I hope). With OSGI one can split a project in modules that have clearly defined connection points. This helps to have clear borders for each module and reduced high coupling.
Well, I have been using it only for the last couple of years, to generate reports for my [accounting app](https://github.com/hrj/abandon). It works fine for my use-case and since I am using scala, I use its embedded XML syntax, and do the transformation in scala itself. All in all, it was pretty straightforward, painless, and sufficient for my needs. I am also about to use it for a largish commercial project (though the generated PDFs are going to be simple).
Some good stuff in his other blog posts. Really liking the dark theme enhancements, hope it will make it look more professional on windows as well.
Behaviour will change? Or be added to? 
No, but that is a deployment concern.
My takes: &gt; * Expose some form of routing class that parses the request and routes the appropriate class to execute. Not maintainable in the long run. If you do not specify concrete API versions then this router will effectively be exposing the intersection of several APIs simultaneously. Customers will also be sorely tempted to write a "v1 plus this one little thing from v2 and v3", leading to oddball clients that work by accident more than by design. This solution could work but only if every succeeding API version is a strict superset of the preceding one. VT100 did this reasonably well: a VT220, 320, 420, etc. are always strict supersets of VT100 due to the design of the ECMA48/ANSI X3.64 codes. Another "ok" example is sockets: the socket address family and protocol type are an umbrella structure which are then specialized via AF_INET or AF_INET6. &gt; * Split versions of the api by namespace. This is an acceptable solution, but only if you fork at the topmost-level namespace. Do not do it like Windows did with winsock2 where some things are in ws2tcp.h, some in winsock2.h, and some in sys/types.h, etc. Put it in a.b.c.SomeVersion1.x.y.z and a.b.c.SomeVersion2.r.s.t, such that a single Java class (e.g. the router) could use any API without namespace collisions. &gt; * Have all requests specify the version of the API they expect. This is not actually a third solution like the first two, but instead an orthogonal option to the other solutions. The first two options are really just routing: how does one get the right bit of backend code to find its parameters and return a result. This option however is another flag to control behavior: I don't care what the backend class is named, I want to behave strictly like the version 1. The router class could use the version to select a different backend function, OR it could just pass the version to the same function and let the backend decide what to do with it. My vote is to do one of these two approaches: 1. Design an extendable system now based on specific sub features of the hardware you are exposing, and a method for clients to determine at runtime what those features are. This is the telnet protocol or OpenGL extensions model: there a baseline to talk, and then every individual exposed feature acts basically in isolation from the rest. Put the router in front, and structure the back by feature and not API version. In fact, there is no API version in this model. 2. Go with API version, require the clients identify the version they want, and make that API version persistent with the session, i.e. once you start talking v1 you are stuck at v1 until the conversation is over, then you can start another chat at v2. A single API version is a coherent whole unit, and its internal design can be whatever you want and can have lots of fuzzy state associated with the object lifecycles. Stick the router on the frontend and have it pass everything to separate namespace-versioned backends. You should only go for #1 if you already know _everything _about this hardware and can spend a few weeks designing the per-feature-type universal API. More likely you should implement #2. Build a v1 API that works OK, get customer feedback, performance metrics, bug requests, etc., and then build a better v2 API. After you hit a perfect version then you could refactor it into the non-versioned API of the #1 solution. 
This class does three things: * It messes with the `InputStream` it is given. * It calculates a digest on the `InputStream`. * It checks if the calculated digest matches an expected one. Those three things are at least two more than a good class should do.
Let us have a look at it...
OMG, 2 years in the USA and still having this kind of errors. Believe me learning a language after 15 years old is not a good idea :)
Did you try with version 1.0.4 ? By the way, on this hard patches, you need to restart the Application Server, because javOSize agent is not updated even you use a new jar. Could you try with v 1.0.4 after an application server restart ? And paste the trace if it is still there ? Thanks
What's wrong with Jackson?
I prefer gson. But why use either of those two well established libraries when there is a third option no one else uses, complete with ugly website and annotation heavy implementation.
Wow what a feature /s
I don't think the Java API in question is strange at all. However, your question was as to why it was designed that way, vs how it was designed in C#. The answer is quite simple: Java doesn't have an event subsystem like .NET does. This means that you, the programmer, are responsible for polling for changes. The loop described in the demonstration seems strange and contrived, but that's only because it is shown in the absence of any other code. This is very similar to the way one would do something like this in C, or C++ sans-QT.
It may be stating the obvious, but I don't see the obvious make an appearance much on this subreddit. I feel like I just see too much "this vs. that" on this subreddit, especially as of late with major Java EE 7 support about to be released. That sentence certainly applies to me. People long ago chose our app server, and I'm fairly certain that those people were not software architects or developers.
Working on this, letting you know as soon as fixed.
We are unable to reproduce it in WLS 12.1.1. However we have tried to patch a condition that could generate this issue in V 1.0.5, you can download right now. Could you please with this new version and in case of error provide the full stack trace in console and in WLS output. Thanks in advance. Also feedback if working would be great.
Yes, I tried with 1.0.4
JAX-RS 2.0 with annotations &amp; async support (in EE7) is sweet and easy. No/little XML required in your app (you don't even need web.xml, or if you do, it can be empty. Same with beans.xml -- file should exist to indicate that the app should be scanned, but it doesn't need anything in it). With annotations based stuff in EE6 and EE7, a lot of the boilerplate stuff has gone. And there are lots of tiny app servers (WAS Liberty, Wildfly, TomEE, etc.) that make it easy to play with and get going.
I tried with the new version, But I still get the same error. I have the trace from the weblogic log below: java.lang.ClassCastException: weblogic.utils.classloaders.GenericClassLoader cannot be cast to java.net.URLClassLoader at com.javosize.compiler.HotSwapper.hotSwappClassFromJavaCode(HotSwapper.java:47) at com.javosize.actions.HotSwapAction.execute(HotSwapAction.java:75) at com.javosize.remote.client.Client.run(Client.java:38)
What do you mean?
Yes it works, running the application with JDK the exception is not raised. There is another issue, using ls *myPackageName* doesn't list all classes from the package. 
Will jigsaw improve memory usage significantly? 
I've just started using JAX rs. Not totally sold on it yet, but do really wabt to learn it. Beans.xml has been out of use for a while with Spring.
An extra variable gives you a chance to name something. And naming something gives you a chance to make something more clear.
Yes, but it only works if you use good names, which is very very hard. What the hell is "mAge"? Middle age? My age? More age? In this case the extra variable is useless because it doesn't give the reader extra information.
In your example you do not gain anything by introducing mAge. If you look at this line in isolation person.setAge(mAge); you do have to look at how mAge is constructed to understand what it means anyways. (see /u/DJDavio post) Since you work with person.setAge and person.getAge you don't really have a way to convey what you mean by this. You can fix this in at least two ways: private void growOneDayOlder(Person person) { person.setAge(person.getAge() + 1); } or inside your person class public void ageByDays(int days) { age += days; } Then your calls become more clear: public void breakAndHealA() { breakLeg(child); growOneDayOlder(child); healLeg(child); } public void breakAndHealB() { child.breakLeg(); child.ageByDays(1); child.healLeg(); } How exactly you split your API depends on on the rest of the code, you will have to experiment a lot to understand advantages and disadvantes of each design. Usually getter and setter methods break your objects because they give (almost) direct access to your fields. So maybe start there. PS: you can read books and watch videos of Robert C. Martin (Uncle Bob) to get more information on clean code.
There is no direct connection between the use of language-level variables and jvm-level allocations. The compiler will do escape analysis, and only allocate the object on the heap if it is detected that the object will be referenced from other scopes. If this isn't the case, the object will simply live on the stack, and no GC is performed.
I probably do private static final int YEARS_TO_INCREMENT = 2; so that any value makes sense.
I think you might be confusing the terms "variable" and "object" here. Short-lived objects can create GC pressure. However, no matter if you store the intermediate object (the new "age" value) in a variable or not, it still creates a new object.
True, it would take a bit longer than changing a 1 into a 2, but imho, if you change something like that, the entire context of what that action does is changed, if you had a method called `increaseAgeForBirthday(Person p)`, and you change the `1` to a `2`, that wouldn't be right either. I'm suggesting that you choose meaningful constants for numbers. In this case I thought it was about someone having a birthday, and someone having a birthday is actually the same as "someone's age + 1 year". If you think that the 1 might eventually change to 2, then I would name the constant differently, for example `AGE_DIFFERENCE_YEARS`. But really, just having a number there doesn't say a thing, like I explained earlier, do you know what happened? The age was increased by 1... 1 year? 1 month? 1 second? I have no idea from reading that line.
I'm reading through Android for Dummies and they are using that convention. Like "mDbAdapter." I think it's like "my age," the way a lot of Hello World type programs use "My Class," "My String" naming schemes. 
You confuse two different things. Google says not to create short term temporary OBJECTS. There is nothing wrong with short term temporary VARIABLES. Those variables can be optimized away into NOTHING. They can literally disappear in the object code. OBJECTS cannot disappear. They must exist. However due to escape analysis, sometimes objects can exist on the stack, and thus never appear in the heap and thus are invisible to the garbage collector. So short term temporary objects can in fact have zero impact on GC. He said: There is no direct connection between the use of language-level variables and jvm-level allocations. That is correct. VARIABLES and OBJECTS are different things. Making things even better, some object allocations might be on the stack if escape analysis is able to determine that there can never be any permanent references to the object.
Another example of using code to actually serve as documentation, is when you can factor out a small method, especially a pure function and make it a static function. I would NOT do so in this particular example, but I will show you how to do it if I were to do it. I would only do this for a more complex case where it better clarifies what the intent is. public static int addOneYear( int year ) { return year + 1; } Again, DON'T do that for this example. A better example might be to replace an expression in one line of code that, for example, converts temperature between °C and °F, with a function call to a simple static function. The function name becomes documentation. Remember: the JVM aggressively inlines small functions into nothing. Even more amazing: suppose you dynamically reloaded a class at runtime, and your temperature conversion function had changed so that now other methods now have stale inlined the old version of the function! The JVM will de-optimize all of the other methods that have inlined stale versions of the modified function. If those methods are truly still on the hotspot (that is they use a lot of CPU) then they will once again get compiled into native code, with aggressive inlining.
1) Hungarian notation might have been useful in the 80'. Today even most stupid editors can highlight local and member variables using different colors/bold/italic etc. The mPrefix is just annoying noise. 2) In this example mAge is just a temporary variable, not a member variable! 
I usually prefer the keyboard. 
As Notorious4Chan noted below, m is a prefix for member variables in a class. Usually used in java for nonpublic fields. In other languages, _ is used instead of m.
It would be more clear to name the field ageInYears. Then ageInYears + 1 is obvious.
&gt; So what is in JSF 2.3? The real answer is that it depends on what the JSF community needs. So, Oracle doesn't know what to put in JSF 2.3. Perhaps you guys have some ideas?
There are many issues in the JSF jira tracker ;)
But now you have another magic number! Oh no! Quickly, extract a constant! person.setAge(person.getAge() + (TWO * ONE_YEAR)); Whew. Much better now. However, we are doing multiplication on two constants. So wasteful! Perhaps we should calculate the result ahead of time and put in in a constant named "TWO_TIMES_ONE_YEAR".
Oh, thanks. I didn't get that far in the comments. 
I don't think there's any extra clarification in creating a constant for 2. Any reasonable human being can understand that one year multiplied by two is two years. You're only making the year a constant so you're saying "hey, this variable means that it's a year."
You're right, it won't impact you much at first. But think of all of the useful tech and additions to the language we will gain by bringing embedded systems to java.
As my old math teacher used to say: there's more than one way to skin a cat and still end up with a chilly feline. This example could be solved "correctly" and be well-understood in about a hundred different ways. We could all argue over best practices, but in the end, if you can't understand someone else's crappy code, you're not going to get very far in the field.
and we can see one-year = 2 in the code review. was this a typo? or is there a good reason for 2 = 1 year? (data collected in half year increments or whatever) At least its not a magic number that we cant even question.
&gt; avoid creating short-term temporary objects They mean the *new* operator.
It might be better to use: http://docs.oracle.com/javase/8/docs/api/java/time/temporal/ChronoUnit.html 
Oracle's jdk not working for you? http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html
The only JDK you ever need is from Oracle. Download it from there and you're good to go. Now, you're posting your usual style for the fourth time here. I have explained previously and warned you as well. I'll take it with the baseball rules: Third time (because I don't count the first offense) is an **out**. ~~As soon as I get on my PC, you'll receive a~~ permanent ban for: + posting in the wrong subreddit despite being reprimanded thrice + not following any posting rules
Last one is indeed impossible since JSF doesn't have it's own bean model or expression language anymore. Those were both split off to CDI and the EL spec. It's CDI that doesn't allow field level access, but you could always propose it there? But because of proxies and how Java works I'm afraid it's just not doable :(
The first method is better. The second is an antipattern known as an [Inline Temp] (https://sourcemaking.com/refactoring/inline-temp).
Download the website to a file, and check the file's contents for that text.
There is no advantage to the nested version such as age.set(person.getAge() + 1) If the reason for nesting these was to save memory, don't bother. The object is created in either case but you just make it difficult to debug when you pile up your method calls. 
I am not sure what I would want. I am already very happy with JSF.
You are asking for help.... in /r/java... for javascript. I feel defeated today.
I know, but who better to answer questions about Eclipse IDE than the Java crowd? The people that are primarily Javascript developers don't use eclipse.
This is better suited for either /r/JavaScript or for /r/eclipse. Your post has **absolutely** nothing to do with Java and therefore was removed.
I'm sort of new to java so I've never heard of Regex but I'll check it out. Thanks!
There's an HTTP client in the standard lib. Just look at java.net.URL for starters. You can also look at Apache HttpClient or JSoup for more sophisticated requirements.
Really? I've never heard that part of the story of the Hungarian notation. Let me know if you find the article.
Definitely want to recommend jsoup. Helps with a lot of the gotchas with html. Browsers are built to be very error tolerant but xml is not, so if you have badly formed html page it may still show fine but can't be parsed with most libraries. Jsoup can handle this case no problem.
The mX and m_x notation is incredibly common. It's apart of the Google andorid coding style. I use it because it allows for consistent use of 'this' while also avoiding name collisions incredibly frequent with get/set accessors as well as buffers of method scoped variables.
oracle and redhat have been so cozy lately... aquisition?
That's not Hungarian notation
Highly recommend http://jsoup.org/ for this.
I name all of them clearly or avoid using a variable. It's easier to instruct people to always use descriptive names than teaching scenarios that might be acceptable. In a simple case like this though, I would just add 1 in the setter most likely. 
Yeah, except java 7 isn't what people would want to use on android; I'd be doing android development in my spare time if I could use 8. 
And monadic futures, and better threading stuff, and the streams api. 
If you want to get it done quickly and easily, use this software: http://sitemonitoring.sourceforge.net/ (it can browse your website using spider, load all pages from sitemap etc. and check if your pages contain some string) ... btw. I wrote it and use it for such tasks. And also it's written in Java :-) If you want to code it yourself, check out http://jsoup.org/ (it's also used in sitemonitoring).
&gt; Testing methods, not behaviour I can add to this "testing classes, not units". This is an extremely common misconception of what "unit testing" is about. I see unit tests gripping the implementation so tightly, refactoring without breaking half the tests is impossible. Most classes in a project don't constitute a unit. A unit is represented by one or more classes whose interface reflects the contractual responsibilities and needs of a component. A trait of well designed, modular code is that you can instantly identify what the units are, while in tightly coupled spaghetti code, either everything or nothing could be deemed a unit. &gt; One test to rule then all! Testing more than one thing at once. Got a typo there. That aside, this is highly contextual. Thanks to abstraction, no matter what you do you're testing "more than one thing at once".
Awesome, thanks! I kinda want to write it myself just so I can brag that I did :) but I'll check it out too! 
Very nice. Just to be more complete, here are the current main contestants to this: - [Apache Commons Config](http://commons.apache.org/proper/commons-configuration/) - not a modern choice, but still used a lot - [Confucius](https://github.com/IvanTrendafilov/Confucius) - [Owner](https://github.com/lviggiano/owner) - [Netflix Archaius](https://github.com/Netflix/archaius) - [Typesafe Config](https://github.com/typesafehub/config)
In theory, I wouldn't argue one way or the other. Just make it readable. However in practice... One advantage of splitting into multiple lines is that when debugging you can step through and see what the values are at each point. As the debugger will only step through by line, not expression. In the given example no big deal, but for more complicated examples it is very useful. Secondly, when dealing with potential nulls. If one chained expression on a single line throws a NPE, then it can be unclear which part of the expression is null. This is especially important in real world situations when customers report a bug and all you get is the stack trace with a line number.
Icons that render correctly is a new feature ? Good ol eclipse. No thanks.
Come along folks, let's get the Eclipse bashing bandwagon rolling again!
You need to Enable the Plugin support again as it is stated in the *More info* that you have linked in your OP: The page has a link: [Enabling NPAPI in Chrome Version 42 and later](https://java.com/en/download/faq/chrome.xml#npapichrome) *Here is a summary* **Enabling NPAPI in Chrome Version 42 and later** As of Chrome Version 42, an additional configuration step is required to continue using NPAPI plugins. 1. In your URL bar, enter: `chrome://flags/#enable-npapi` 2. Click the Enable link for the Enable NPAPI configuration option. 3. Click the Relaunch button that now appears at the bottom of the configuration page. Maybe you also need to restart Chrome to take effect.
Call it a bugfix, but at least they're making progress.
how long has eclipse been going ? They've only just fixed that bug. Used it for ten years - never going back, should have switched earlier.
I'd be ashamed to post screen shots of my product if my font rendering looked that fucking hideous, even if my product wasn't a text editor. Just look at the code in that first image. That's simply unacceptable. Hardware character generators did a better job than this in 1975. No thanks. I'll take IDEA any day. 
Was going to write exactly the same thing. It looks terrible.
I currently use Spring profiles to control the majority of my server-side configuration based on the environment I am deploying in. Can you give me a sales pitch for what these projects might offer over that approach?
Nope! I was sure Spring also has something, yes, but I forgot to check. Thanks for mentioning! Apart from usage and features, I don't know, this might be a good article for someone to write... Some of these allow you to have the config in your database and/or in different file formats, get an async notification when there's a change, JMX, etc. Lots of goods to go through.
So are both of these custom, home grown solutions?
custom, home grown as in built from scratch? yes Excel framework has already been created by someone in our department and used for a few clients already. The PGO framework's foundation(base classes) have already been established by the offshore team. Just need to create a page objects for each page for our client's website.
Dat ^*toHexString*
chuckles. as someone who uses both professionally and privately there are plenty of things eclipse does better. those bandwagon threads just point out who doesnt know their shit. :)
That image is re-sized to fit into the article. The font rendering looks nothing like that.
this is the hardest concept to get across to some people. unit !== class. my unit tests are generally broken down to the package level, but sometimes even higher. 
most di frameworks offer tools to get around this. it's really not a big deal. 
I used to (and still do) love typesafe config, but I've been using Archaius more now, and I like it a lot. 
Bullshit. You can zoom in to toHexString and see the individual pixels the text is made up of. Look at the x, for example. That's not image scaling. 
Agreed. Using eclipse, on some systems I've had decent results with the display of text, but I've also seen really poor text (like that image) on some Windows systems in Eclipse, and I have no idea why. In any case, they should have put more effort into the screenshots, especially since this page is for marketing purposes. Most developers are fairly picky when it comes to font rendering used for text they'll be staring at for hours on end. 
I love testing interfaces with default methods. I make a simple implementation as a test fake in most cases, and test the one or two methods my classes implement directly.
Do you work for Google's legal defense team?
No, but it isn't java, it may share the syntax and some common libraries but it doesn't implement the JRE, so it isn't java.
&gt; But alas, not in Java. Ah! You can do [better than that in Java](http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html#tainting-checker). This will actually make sure -- at compile time! -- that tainted and untainted strings are not combined unless sanitized. That's just a small part of Java 8's new pluggable type systems. The Checker framework comes pre-packaged with a whole bunch of useful intersection types.
`ClassNotFoundException` is thrown by a `ClassLoader` when asked to load a class that it can't find. When the JVM calls a `ClassLoader` automatically, it catches that exception and throws a `NoClassDefFoundError`, with the originating `ClassNotFoundException` as its cause.
Google is contributing to OpenJDK a lot (in fact, they're investing more in OpenJDK that in Go) even during the legal battle. 
Not sure if trolling... or just having no god damn clue about Java web application development.
Why use Java you ask? Well if you are expert in Java and not C++ then it will be quicker and easier to learn how to do GC-less Java than learn the large and complicated C++. 
Mocking in general has been so overused that it's almost an anti-pattern now. 
Not trolling (and not the author of the parent comment). Would it at least be fair to say that JSP/JSF would not be a common choice for a greenfield project? Is it still popular nowadays (genuine question, my reduced experience says no)?
Nooooo! We just upgraded to jboss eap 6 at work! Haha thanks for the share! 
It's probably time to re-evaluate your life and what you're doing with it if you define your self-worth and place in the world by which IDE you use.
It shouldn't be on the same scale as a 5-&gt;6 migration. As far as I know (and with some personal experience) the difference between EAP6 and WildFly is small. The EAP 7 transition should be straightforward. Also of note some features of WildFly (soon EAP7) were backported or engineered into EAP6. (Like the patching subsystem.) 
Umm.. Glassfish?
&gt; As far as production support goes I don't know lol but I'd probably trust Res Hat more than a smaller less-known company. Why would you trust more Red Hat than C2B2 Consulting or Tomtribe?
Google is sinking to new lows, it seems. Quite unbecoming of such a beautiful company. Just a few things that popped into my head: Young, new (Google-backed) tech companies are using Go? What exactly does this imply? "Cool kids use Go, and if you want to be cool like them, you too should use Go" just doesn't float, long run. Then, "Consider also that programmers working on your complicated Java or C# app may not stay with the company for as long as it takes to finish that same app."...has Google not learnt from the mistakes of others? This is a *good* thing, not a *bad* thing, because well-managed projects *benefit* from the contributions of various experts. Also, "getting s*** done" is so scripted and hollow. There are Assembly/C/C++/Python/Java coders in my department who "get s*** done" because they are intelligent and hard-working. They don't need Go to "look good to their bosses". It saddens me that Google has to dumb down programming and their communications with the public so much. Has the public really become *that* dumb?
I honestly think that Swift might start branching out of iOS for this reason. It's friendly and high-level without garbage collection. ARC is a pretty decent middle ground between manual and automated memory management.
"Payara" on its own doesn't sound like anything familiar. They release a glassfish build with patches and fixes. 
And what if I tell you that JSP and JSF are totally two different things? 
Spoiler Alert The roadmap is pretty clear from their JIRA. WildFly 10 is supposed to be the basis for EAP7, and its currently slated for 10/8/15 -&gt; https://issues.jboss.org/browse/WFLY/fixforversion/12327535/?selectedTab=com.atlassian.jira.jira-projects-plugin:version-summary-panel Which means both Weblogic and Websphere commercial versions should be out before then.
I am not trolling, just trying to understand the difference for the claim in the title. Is it about commercial support?
What about wanting to have 100% code coverage? I have witnessed using PowerMock to simulate some impossible cases, for example to throw an exception because you are missing UTF-8 encoding - not only was it a useless test, but it also broke tests while running in IDEs. (https://code.google.com/p/powermock/issues/detail?id=355) Other "sensible" unit tests, done mainly to achieve coverage, looked like shit, with everything strict mocked, and their only effect was making refactoring harder. So you started with shitty unit tests, and ended up with shitty production code, because nobody would be so crazy to refactor and break all those tests.
GlassFish is the RI and doesn't have a support option available from Oracle (who creates GlassFish). It's a "here's the source, do with it whatever you want" deal (within the limits of the GPL, of course). JEUS somehow got certified, but it's just a tech preview. It's weird that it's possible to certify a product that still needs years of development to be actually usable in practice, but alas. WildFly is the open beta program for JBoss EAP. For some reason JBoss certifies its alpha and beta releases. Here too, it's weird that this is possible. Hitachi Application Server is the first commercially supported enterprise server. But here in the west we pretend Hitachi doesn't exist and therefor Hitachi doesn't count. This is weird in its own way, and is a know logically fallacy in reasoning; just dismissing something out right without given reasons. E.g. "Cats never hunt birds", "But I saw the neighbor's cat hunt a bird", "Yeah, but that doesn't count". So if EAP is released, according to the thinking of the OP, it will be the first Java EE 7 implementation that's commercially supported by its own vendor. The OP forgets that IBM has announced the release of Java EE 7 Liberty for next week, and that it will very likely take at least a year before EAP 7 will actually be released. This is not remarkable. If you look at history, then you'll see that JBoss has always been one of the last vendors to release a final (GA) and commercially supported EE server (not the absolute last mind you, but one of the last).
Agree. I have created many integration/functional tests for webservices - xml in, xml out, with customized Spring WebServiceTemplate and RestTemplate, so it would check a marshalled request against a defined file, and return a defined response from other file. It was a lifesaver when I needed to simulate or change something. I could be sure that I did not break something, which bunch of isolated unit tests could never do. I even wrote an IntelliJ plugin, for cases when requests/responses did not match, so I could just click into a console and see a diff, then if the change was desirable, I would just apply it and be done.
Go is not simpler than Java. It's trivial to get a new dev on Netbeans and have him/her working with proper package namespace and creating tests/docs right from the start. It's all integrated and automated in the IDE. And the language features added to Java over the years are there precisely to make the language more readable. 
I see that a lot. Good luck then!
I'd tell you I know the difference. Read the slash as an "or".
Look into JavaFX if you want something simple. Also, you should probably move away from eclipse. Intellij is becoming the de facto rather quickly. as far as game making goes, it's more important to learn the principles first, rather than game making in java--if that makes sense
I recommend Slick2D or LWJGL if you feel like messing with openGl.
I'm just thinking that serverside rendering is going to die along with thread based server APIs. I know servlet api can be used in async mode but it is more a workaround than a straight solution like something vertx/netty-based. However SPA are going to be really big in web development and JSF is just a wrong/older technology brunch to use for a SPA.
Your argument is silly. Your comment has more to do with Windows and its shitty font rendering then eclipse. The reason why the fonts look the way they do is because the person turned off font smoothing / cleartype.
screw javaFX, go try out some openGL with lwjgl or libgdx... With this knowledge you will be able to see connections with different programming languages such as C++
I thought Go was a low level language like C/C++...not meant as a competitor for a higher level language like Java...
I've been meaning to learn generics, just completely slipped my mind! Thanks for that. And I just started lurking around stckexchange to read through what solutions people have given, so far i've picked up on a few things, but not completely new concepts. I'll read up on these, thanks for the recommendations man! Much appreciated. 
[java-gaming.org](http://www.java-gaming.org/)
It's a weird mix. It has garbage collection, good threading and really nice compiling and binary distribution compatibility. But it basically reads like C and was meant to be the new C. However Python and Rails peeps are flocking to it because of the threading and garbage collection. 
You could learn either new language features school probably didn't teach you (Java 8 stuff: lambda, stream, etc) or a large scale framework for building rest apis (say spring and hibernate, or play, or any other good option). Those are good things to be familiar with - otherwise just start writing a side project and see where it goes. You'll inevitably learn the most through that process.
Starting with just java is fine. Learn how to use scanner and make some random thing like a program that replaces "tiger" with "jaguar". You know, make stuff up and see what you can do with only a few simple tools. Learn arrays be using arrays. You'll make mistakes and get errors, but after the 10th time that happens you'll know why. That's how it is. Learning to program is all about perseverance and getting experience of what to do and what not to do. Then eventually you can download Android Studio. Search online for something like make your first app. Programming is all about making something simple that actually works and then slowly changing it. It's easy once you have enough Java under your belt to learn 1 new thing at a time. Android Studio will essentially make a bare bones app that dies nothing, so you can tinker around and add a button here and a text field there.
Not sure I understand that right. Are you suggesting that running the same deterministic test twice makes the code better tested than running it once?
What's even worse - System.out is synchronized. 
Oh, that's truly bad, I never knew that (but would have guessed), I just use SLF4J with Log4J2 and Disruptor/Async logging. :)
Me too, I hate navigation rules. They theoretically have some power, since you can have some conditionals in them, but it's wasted on me.
Keeping in mind that I started learning Java a couple weeks ago, so this is from the perspective of a fellow beginner: Give yourself a project. A simple one. I created a short questionaire programm that would ask what my favorite predator was. You can play around with that and just add features untill you run out of ideas. Then try something else. My second project was a command-line calculator, which ended up being pretty challenging for something so seemingly straightforward. Now I am developping a contact list, learning SQL on the side and generally having a great time. Learning by doing is THE lesson plan to go by in my opinion. Also, and this may just be a personal preference, get yourself an IDE (I use Eclipse). Its basically software that makes writing AND learning code a lot easier. Itll take care of writing out tedious code again and again (such as System.out.println()), and you can mouse over most bits of code, press F3 and youll get an explanation of what it is.
Big companies have better chances of keeping their heads above water but that's it, support level depends on how skilled their resources are and how well they are internally organized, where small companies are superior - it's easier to manage small team. But it's also easier to get swamped.
I like Netbeans. I live in DC and i'm not sure a lot of Federal contracts allow IntelliJ.
It's a joke. Obviously, running the same deterministic test the 2nd (3rd . . .) time does not test anything more than the first test. But the question was for testing anti-patterns. :-) Now a unit test that involved random input with verified output might have some value to run multiple times. 
I have to admit that I am not familiar with the pluggable type systems. However, the link you refer to, the taint checking, and sanitizing is exactly the 'function' I am referring to that converts from one type to another different type. (from the unsafe type to the safe type)
Should print to System.err ;) Even in JDK source you can find `if (DEBUG) System.out...` (hopefully hardcoded logging is disabled by default; maybe except in java.util.prefs)
Yep. The sanitation method would look like so: @SuppressWarnings("tainting") @Untainted String sanitize(@Tainted String) { // ... } The compiler won't let you call a function `void foo(@Untainted String x)` with a value of type `@Tainted String` (or even plain `String`, which is interpreted by the type checker as `@Tainted String`). These *intersection types* are more powerful than subclassing, as you're not limited to just `@Tainted String`. You can also have `@Tainted int`. And I don't know if this particular type checker supports it but, at least in theory, you could have a method `void bar(@Untainted Object)` which you can call with either `@Untainted String` or `@Untainted int`, but not with `String` or `int` (which are automatically `@Tainted`).
It's not hard at all. Just specify the parameters and the method body. One liner example: x -&gt; x % 2 == 0 Multi parameter: (x, y) -&gt; x % y == 0 Use curly brackets around the method body for multiple lines.
If some one could identify that in which cases it should be used..it would be great help
It seems like you know something about the language but not very much about programming. That's a feeling I share. What I did, and I am very happy to have done that, is learn about Design Patterns. Headfirst Design Patterns is a great book to read. It will give you a good idea what interfaces are good for and how to design your programs. Effective Java will help further understand the way things are done. Currently I am learning Java EE - I think it's a good idea since the most complicated tasks are off my head (concurrency for example) while I can still learn a lot and see things working.
In addition to the other comments, I'd recommend learning to use an IDE like Netbeans. The reason for this is it'll help with the layout of your code and using things like tests. For example, under Netbeans: 1&gt; Create a new project called Test, a Java App, don't have it create a new main class. 2&gt; Under source packages, create a new package called Animals. 3&gt; Under the Animals package, create a new java class called Cat and give it a single method that returns "meow". 4&gt; Right click on Cat.java file, pick Tools-&gt;Create/Update tests. 5&gt; Change the test on your single Cat method to expect "meow". You can now run a test on your project. Next select Cat.java, select Tools-&gt;Analyze Javadoc. You'll get a "Create missing javadoc for" warning on your meow method on Cat. Choose to fix this. This will add a comment block in Cat on your meow method that you can update. Change the "@return" line to say something like "returns a string of 'meow'". Right click on your project, select Generate Javadoc and you'll build documentation for Cat that'll open in your web browser. You'll now have a complete project with namespace, tests and documentation.
It's not hard, just unfamiliar. Manipulating collections is one of the more common use cases, especially map (applying a function to each item in a collection), filter (removing/retaining a portion of the collection based on a predicate), and reduce (think summing all of the items together) operations.
Does http://program.domain.com/program/ really exists ? you should use the real web resources links** from where the code (jar) files are downloaded**. Its as simple as this...
SLF4J -&gt; Logback -&gt; Logstash -&gt; Elasticsearch -&gt; Kibana
Posted a few days ago, with some comments there: http://www.reddit.com/r/java/comments/3a7dpw/5_features_in_java_9_that_will_change_how_you/
That's great. Thanks.
Wait... Seriously? That's the level they expect for junior programming positions? Here I thought I had a long ways to go... o_o
I'm not sure why this is focused on lambdas. It seems more like a general guide to not writing poor code.
Everyone got super excited that lambdas were added. Many people are so excited that they want to try them everywhere. This article is to remind people that function references were also added. In some cases a lambda is just what you need. But in many others, trying to use a lambda to do too much leads to poor code.
Not sure what "glue code" is supposed to mean, but I agree that lamdas longer than 1-2 lines should probably be extracted into it's own function or method.
Agreed with /u/unholysampler The reason being is that I've noticed numerous people seem to forget (or act as if) the old standards of clean code also apply to the new Java-8 functional features.
I completely agree.
Yeah, that sounded a bit confusing. Rephrased it now, thanks :).
/signed The only problem is figuring out where "good concise solution" and "clever hack" meet. For instance, I hate ternary operators in general (and only grudgingly use them in the 'good places' like returns and inline functions), and think they're too clever. Much easier to follow if you just set a variable in if/else and then use it elsewhere.
Raspberry pis are definitely pretty cool--but they can be pretty frustrating if you're new to linux and are trying to use it as an actual computer. It's definitely neat if you want to do something of a hobby project. Sounds cliche, but I would suggest getting a good book off of amazon for whatever youre trying to do! for instance, big nerd ranch has a decent android book, and (i cant remember the author or title) but i read a decent book on javafx that helped explain the system too. i'm not entirely in love with javafx, so i wouldn't really push that system too hard, but it is pretty decent if youre just trying to get off the ground with 2d java game making (in simple scenarios)
I have used them when I set simple constraints on setters.
Interesting. Everywhere I've been reading suggests that JavaFX is superior to Swing in nearly every way making it better to learn. Also, many say that JavaFX has some fundamental similarities with Android (you'd definitely know more about that subject than I do, of course) so I also thought it'd help me, at least a little, for Android development down the line. Or are you suggesting that Java itself isn't really the best choice for creating GUIs? I kind of thought that'd be the best/most interesting course of progression, but if you have any advice I'd be glad to hear it. 
Thanks for the thorough reply. I will try by building one simple project using Maven and will add some dependencies and check how it works.
"Keep it smart and simple". Unfortunately many people will make the easiest tasks messy and complicated, just because reasons
for loops are worse than streams, though. Slower and less portable. And often more error prone. (You can easily switch a stream to a parallelStream to get concurrent processing)
Cool, I wasn't aware of the full syntax.
Definitely! If I could keep only 1 Java book on my shelf, this would be it. Not sure it'll be worth to buy the 3rd edition though. Josh seems to be very sceptical about Java 8 in these videos, and I don't want to read a bunch of "OMG don't use lambdas!" chapters ;)
I've never actually seen what I would consider a ternary operator abuse. 90% of the ternary operators in our code base are used for what I would say is pretty acceptable (`Object o = v == null ? 7 : v;`). I've yet to see a nested ternary operator in the wild, the only place I've even seen such a thing suggested was a script kiddy forum where someone though ternary operators were faster than if/else statements (they aren't). So long as the conditional is easy to understand, I don't really have a problem with ternary operators.
I like how he wrote a blog about his own tweet to promote a book he wrote. Not saying the content is bad, but I find it an interesting way to communicate the subject.
I will keep you updated trying to fix for v 1.0.8 
Nice job!!
IMO in your specific example this is the best solution: this.count = Math.max(value, 0)
Nice post, I love these types of projects.
1.0.8 is out now. You can try with that one. This will fix the CastException however I am not sure that all will work. In case it does not work, if you could provide a sample application that does not work, we will fix in our labs. 
How do you handle security for a single page web app? 
The code in Math.max() is almost identical to what I posted. You mean for readability purposes? If so, since we are discussing readability exclusively, we can't really be arguing. I do see the value of using the static Math method for that specific example. I don't have any examples in front of me, but most of the uses of the inline ? : would not likely be so simply replaced by a static method.
I am using Undertow webserver as a base which has SSl support. However in general I'd deploy behind a reverse proxy (HAProxy or NGinx). These can add ssl to plain http or webservice apps. It's just crazy to have any server to reimplement security (that's the monolithic approach). Let reverse proxies do this. They have been around for years in thousands of deployments + have many advanced security + loadbalancing features such as rate limiting, ...
[This is what it looks like for me.](http://i.imgur.com/Lynn2YP.png)
I also kind of meant how do you control who has access to create this connection: &gt;jsk.connect("ws://localhost:8080/ws","WS") &gt; .then( function( app, error ) { &gt; app.ask("greet", "kontraktor") &gt; .then( function(res,err) { &gt; console.log("greeting:"+res); &gt; } &gt; }; Lets say I want to target messages to a specific user
One of the most important things for any Java programmer is to learn how to take advantage of the insane amount of Java libraries and frameworks out there. I would suggest learning to build a REST service with a simple web UI (or a java client if you prefer) and hooking it up to a database of any sort (SQL, Mongo, Redis). In the process you will learn a lot about the language. If you want to make a Twitch viewerbot and want to learn something about Java 8, you could try out the Vert.x framework. It is pretty cool and lets you create applications that are easy to create and connect to web services.
To echo the other comment here -- not SSL, method-level security.
from https://github.com/RuedigerMoeller/kontraktor/blob/trunk/examples/http-ws-javascript/src/main/java/sample/httpjs/MyHttpApp.java (stripped scheduling/scaling code) public IPromise&lt;MyHttpAppSession&gt; login( String user, String pwd ) { Promise result = new Promise&lt;&gt;(); if ( "admin".equals(user) ) { // deny access for admin's result.reject("Access denied"); } else { // create new session. MyHttpAppSession sess = AsActor(MyHttpAppSession.class, sessionScheduler); sess.setThrowExWhenBlocked(true); sess.init( self(), Arrays.asList("procrastinize", "drink coffee", "code", "play the piano", "ignore *") ); result.resolve(sess); sessionCount++; } return result; }
Not really related to your question but I'm curious as to why you're using restlet instead of jaxrs or sparkjava? I haven't really seen anyone use restlet in awhile so I'm just curious, not trying to flame you or anything.
Seconded. Adding the site to trusted sites is not enough, the cert has to be valid as well.
I'd recommend [**Scratch**](http://scratch.mit.edu), a graphical language targeted at beginners. Rather than dealing with the syntax and grammar of a language, Scratch focuses on programming logic and the visual style of the system makes it easy to follow the code flow. Once the kids have the basics down, move on to [**Pencil Code**](http://pencilcode.net), again, a graphical system similar to Scratch, but with the ability to convert the graphical program into CoffeeScript (similar to JavaScript). Then, move on to real programming languages like Python, Java (maybe even through [Processing](http://processing.org)), or C#, where for the first contact, I'd probably use Python. For more information you can head over to /r/ProgrammingForKids which has way more resources and also hints on good approaches.
Thanks for the reply
Ill try it tomorrow, I have to get some sleep.
Depends on how much you get out of it. Sure if you're a savant and have photographic memory, and can extrapolate intimate details from high level concepts, then sure you'll be able to make flappy bird after just watching a few videos. If you're like the rest of us, it's a grueling process to learn java. I've been at it for 7 years, 3 of which I've been a professional software engineer. It would still take me a fair amount of time to learn, and to do the task of making a game like flappy bird. So don't rush, this skill takes a lot of time to perfect.
17y/o here. That kid right there could've been me. Minecraft mods brought me into Java as well. Java was my real first coding language (yes, I don't count Visual Basic into this.) Other games I learnt programing from: - San Andreas Multiplayer (SA:MP) - Pawn - Multi Theft Auto (MTA) - LUA Really. It's just way more fun if you enhance one of your favorite games with your own content (-&gt; mods or scripts) 
Yes you'll get used to it. It's highly logical, so once you understand a little bit, most things will seem obvious You're setting a variable. On the right side you're taking an object and calling a method within it that returns something. That variable gets set to the returned value. Think of the names as descriptive. You have an input object, and to get the next segment of input you add on .input(), calling that method and telling the computer to ask the user.
Thanks ! I'll take a look.
Java and then they can play with minecraft's code. That's what got me into code when I was about 10 or 11
You'll definitely get used to it. This is just a initial problem. Once you work more with Java, you will remember to use the right syntax automatically. Don't really worry about it.
Thanks a lot... really happy to hear that. I am eager to create good content and good tools. Any feedback good or bad seriously considered! 
No thanks.
Do you people take every opportunity to post negativity about Eclipse?
after some reading: maybe vert.x covers similar areas. Kontraktor is more highlevel, you won't deal with sockets etc. Anyway: Diversity is good :)
If I am understanding the article correctly, yeah, the fact that some Unicode codepoints take up two chars, they aren't great. 
I'll second this, I too am 17 and without something interesting to apply my coding skills to, I would have given up a long time ago. 
I personaly prefer other IDEs, but I still don't go around posting negative comments about eclipse. If you have something to complain about at least explain the issue. The comment was just plain pointless, and didn't add anything :/
&gt; With established usage by Facebook on their giant apps, Infer has been put under fire for high scale. This sentence almost gave me an aneurysm.
If you like Eclipse, give NetBeans a shot. This doesn't seem to be a popular opinion, but (in my experience) they have a somewhat similar workflow and I moved fairly painlessly from NetBeans a few years ago to Eclipse. The only negative about NetBeans, I find, is stability - Eclipse might feel cumbersome at times but it's stable, which is something I only really appreciate when I need to use other IDEs/editors like Light Table or Atom-based ones.
Firstly, I'm not trying to be pretentious or argue this from a feature standpoint. I'm talking about the intangibles here - and usability. Crashes, crashes, and MORE crashes. Outstanding bugs for what feels like an eternity. Memory leaks. Editor pane crashes. Cryptic error messages. Stop being a fanboy and realize that it's a shit product Edit: an **objectively** shit product
I've switched to IntelliJ recently and I am really missing Eclipse. Like those forced 10 minute breaks, when it was updating something from Maven and everything was unusable for that time. Or that dull feeling in my brain, when I've tried to use Eclipse to merge code. Though Luna didn't crash as often as Kepler, that really took away the learning effect when you had to code things twice. (Ok, that one isn't fair, the auto save worked quite well)
Did you just create these accounts to fake a "review"? Is it coincidence that there are two 0-day old accounts praising this submission?
Why does the article load at the bottom of the page? o.O and for real, the fake reviews?
You can check, I guess what I do. Fortunately I have a lot of things to do and try to deliver nice content is my main aim, other stuff are or should be just coincidence. Anyway if you still think I added one fake vote, you can remove it just doing a negative vote (I believe)
Flappy bird is probably a lot more complicated than you think.
Stop creating new accounts to push your website. You're spamming.
Fixed ! Thanks for it. One colleague added a link to download with autofocus enabled. It is of course annoying and I appreciate you reporting it.
No, good programmers does not write bug-free code. And they DON'T write bug-free code either :) Silly grammar slaps aside, all that can be said about good programmers is that they write code that can more easily be fixed when the inevitable bugs are found. What does that mean? Well, a couple of things spring to mind: 1. The code is as simple as can be to achieve the task at hand. Complexity is perhaps the biggest evil in software development and is also one of the hardest to avoid. 2. Documentation, mostly in the form of good comments. There is of course a seemingly endless debate about whether commenting is good or not, what type and degree of commenting, etc. What I'll tell you unequivocally, based on almost 25 years of professional software development and about 10 years before that, is that code maintenance is more important than code development and commenting well plays a big role in that. 
See below. And don't be so sensitive. 
ITT: Haters, and hater-haters.
&gt;Oomph project now makes it possible to record and share user preference settings across individual workspaces Where have you been all this time!? 
More like 3 years ago.
Yes. Yes we do.
Frustrating indeed. Forgot where I saw it, but you have those jars that are empty except for the Manifest and that only refer to other jars. What were the original jar format designers thinking when they designed that, and why did their counterparts who designed the war format did put a WEB-INF/lib in? 
Because it helps you write Java?
&gt; hierarchical view of nested projects Yeah, finally, for God's sake! This will make things SO much easier when you are working with a complex Maven project structure.
Awesome, Eclipse has the fastest Java Compiler and great integrated editor that is big reason of I still uses this. (Android Studio is too slow compile process) 
I think the amount of downvotes you're getting says a great deal about the size of eclipses user base (and I can guarantee you that most eclipse users just don't care about the IDE holy war, unlike the users of another tool, which will remain unnamed, so only a small percentage of them probably even bothered with you). Perhaps take this as a lesson that some people actually *gasp* find eclipse useful. Or don't... what do I care?
I don't use it, but congrats to them for offering gradle integration. 
Find bugs? IntelliJ code analyzer? 
I remember my old times, when I was asking myself: seriously is all of this (System.out.println( "..")) to do simple print ? Now it is very natural for me. Also I remember when having certain java knowledge I decided to go for C# ... it was uncomfortable the initial days... But as everybody says it is a matter of time you are going to get used for sure. Keep going.
When developing [gngr](https://github.com/UprootLabs/gngr), we wanted a high performance fat-jar solution, that also allowed sand-boxing of the individual jars. We came up with a custom solution, called [unoJar](https://github.com/UprootLabs/unojar). The tradeoff we chose was higher runtime performance v/s longer and complicated build process. The project definitely needs more work (documentation and configuration), but it has achieved its primary goal.
Clickbait title ?
Ah yes the retarded child of the ide world. I used it for years, with much frustration, then one day after installing the mercurial plugin from a website that used horizontal scroll - it simply stopped starting. It just wouldn't work. intellij master race bitchez.
Nah, because it really is an all-one solution. I write Java, but also JavaScript, XML, XSLT etc. and I create some BIRT reports. It works pretty well with all of them at the expense that it gets bloated pretty fast. It's not uncommon for Eclipse to be a larger memory hog than Glassfish.
ITS NICE
All IDEs are codebase polluting garbage. Eclipse is a particularly heinous offender. I don't dislike auto-generated code, it can be extremely adventageous, and yes I understand that you can rely on plugins to use ant, maven, gradle, etc. etc. etc. in many IDEs including eclipse.... I don't care. IDEs so frequently generate broken code that breaks codebases and destroys portability. Fuck IDEs and fuck eclipse specifically. I want my projects to actually build. "Worked in dev, Ops problem now!" Oh yeah? Well I gotta support your broken shit. Use tools that work consistently or fuck off and die in a fire! **Sorry /u/Feroc, that was not actually directed at you, you have good points, I've been drinking and I'm venting, so I absolutely did not address them.**
Learn English before writing such shit articles.
All IDEs are codebase polluting garbage. Use vim, use emacs, use sublime text, use nano for Christ's sake. Any text editor wins over a codebase breaking IDE.
&gt;Eclipse might feel cumbersome at times but it's stable... Hahaha! You have a future in comedy, my friend. Use a text editor and a command-line friendly build system, then tell us about stability.
hahah. &gt; Jokes are meant to be funny. I have to apologize. You clearly have a firm grasp of comedy, yourself, my friend. &gt;Oh, you're one of those command line zealots, I probably should've realised from your vitriol. No... I'm a support technician. The machines you install your IDE polluted bullshit on DO NOT HAVE GUI INTERFACES. My only option is command line. That's all I have access to. Please... for the love of God, stop giving me broken code and then yelling at me for not being able to get it working the same way it works on your dev machine.
Yes, I'd rather have my junior devs finding their mistakes at compile time rather than on the fly. What was I thinking all these years having them up their productivity and learn from the recommendations of the IDE?
Code and Command completion is powerful. Code generation is a tool I use everyday... _when I understand_ the generated code and what it does. If you understand the code your IDE is generating, all power to you. If you and your team can maintain portability of generated code, awesome, keep at it. **YOU ARE AS GODS**. Don't ask me to support it, though. If it won't build on the command line, you're breaking the servers I maintain and I gotta get an earful about it as though it's my fault. Not Supported, bro! I don't have access to your GUI bullshit because all Linux servers are headless.
I can't speak to that scenario, because I haven't written Java in years. When I did, code generation was basic enough that I can't imagine a scenario where hiccups would happen. I don't have to even think about Ljnux or a headless machine over here in CLR land though :)
You have a valid point, which I haven't addressed. I'm just venting, you're absolutely correct to rely on a standard you can teach effectively. Perhaps your junior devs should learn the basics of how to navigate a filesystem hierarchy, though. Perhaps your senior devs should, too.
Thanks for pointing out the Class-Path manifest attribute. Learned sth. new.
Clearly, they hired the wrong person then
The Gradle plugin is terrific. Nothing close to NetBeans' awesome Maven support, but ahead of anything IntelliJ or Eclipse have to offer. jVi is absolutely excellent if you like vi. Markdown is also good (though slow). 
The solution I personally use for this is to develop a WAR file, and then run it with the jetty-runner.jar. This way I get to benefit from all of the tooling that exists around WAR deployments and Servlet Containers, I get the flexibility of deploying in any Servlet Container if I want to down the line, but I can run it up almost as if it was self contained as well. I actually develop by using the Maven Jetty Plugin, and just doing an "mvn jetty:run-war" to start the service up. I've then put together a system to deploy to Heroku using the exact same version of the jetty-runner as I'm using Jetty in my maven build, so I know that the two go together. On top of that, because it's easy to do so, I've got verification tests that run in Maven that start up Jetty, run my tests against the running Jetty service, then shut Jetty down again. The end result of all of this is that every step of the way I'm using the same servlet container to run my code, but I've not got to worry about any hassle with deploying the WAR file to a container - it just runs as if it was a single JAR.
Not sure about that but you can check [Greenfoot](http://www.greenfoot.org)
Yes, for some reason it is very popular there :) And Happy birthday to you! ;)
Excellent read 
It's spelled "bitch", and you left out a comma. 
I've only used 1 component framework, tapestry 4. The idea of component based frameworks just seem so busted to me. It's great if you know exactly what you're doing and really care about the code. But as soon as you get a junior dev in there, he's going to hack it apart so it just "works". After years of this, you end up with this giant ball of tangled components that have all kinds of conditionals of hard coded logic. Can someone confirm this isn't the case with these newer component based frameworks, I realize tapestry 4 is old and archaic.
Cool, thanks for the info. It's been hard to even take a look at these things after having dealt with tapestry 4 for over 3 years now... there's never an easy solution for anything I wanna do.
Are you the new promotional account for this website? Just a day after deleting the other? Are you going to [post fake reviews](https://www.reddit.com/r/java/comments/3ay76p/identify_top_java_performance_problems_in_seconds/), too?
VerifyError
&gt; Don't ask me to support it, though. If it won't build on the command line, you're breaking the servers I maintain and I gotta get an earful about it as though it's my fault. IDE + Maven
Yeah, I literally laughed out loud at being able to share settings between installs. IntelliJ has had this for at least 8 years.
An experienced java developer writes projects that build via an IDE or a command-line. An IDE just lets you write code, the build process is separate. So what are you ranting about? It seems like an uninformed rant. Also, why are you building the applications on the servers you are deploying it to? It should be built and made available for deployment. Sounds like your deployment process is broken.
For persistent queuing use hornetQ. This article compares performance for all https://softwaremill.com/mqperf/ 
That can be easily confirmed by using a continuous integration tool like Jenkins, Hudson, Bamboo, CruiseControl, TeamCity, etc.
I am using ActiveMQ with Camel on a fairly large project right now. I have found it to be easy to work with and setting up high availability was pretty simple. I have two brokers in an active/passive setup. You can get much fancier than that and have farms of brokers and active/active topologies as well. I have not cared about performance at all really so I can't give any feedback in that area, our use case is a lot of asynchronous processing so perf is lower priority. I don't have any experience with RabbitMQ, but I have used the Weblogic JMS implementation and IBM MQ Series and I can tell you I do prefer ActiveMQ over those for the ease of use.
+1 for A-MQ. Used it on a recent integration project alongside Apache Camel within a Fuse Fabric, so used the cool discovery features in Fabric to pull out end points. Simples 
I do like the pmd plugins
You sound very cynical, you must be a joy to work with. 
Article could be summarized with: &gt; So yes, mistakes are inevitable. We should not be afraid of them and be ready to make them. However, good programmers make cheaper mistakes in order to avoid making more expensive ones.* I agree with the point - sure, good programmers write fewer bugs, but most importantly they write code where bugs that pop up are easier to track down and easier to fix. Like the article said: &gt; My point is that mistakes are not all equal. If I'm writing a PDF report generated by a piece of Java code and my report misses the footer, that's one type of bug, and its fix will cost the business X dollars. On the other hand, if my PDF generation code is so difficult to modify that in order to change its format from A4 to US Letter we have to rewrite it from scratch, that's a completely different type of bug. Needless to say, its fixing will be many times more expensive. More important is not writing code full of duplicate copy and paste code, that fails while hiding where the failure happened (cough, Hibernate), or doesn't throw an exception and just sends back bad data.
You know, you could just keep a couple different instances of Eclipse around. One of them could be a slightly leaner image that's just for Java development and VCS integration, and the other would be for "everything else". That would also allow you to not worry about funky new plugins effing up your core Java coding experience. Heck, maybe even keep a third around for experimenting with those. I don't currently do this myself, because my Java needs are currently light, but I did wind up doing it earlier this year with IntelliJ and Eclipse. I used Eclipse for core dev because that worked best with the team I was on at the time, and I used IntelliJ for everything else.
 -noverify
Can we please have java 8 in the docker image now?
Can somebody explain real quick what exactly Liberty is? I have a hard time finding concrete information on that. Is it the Java EE implementation? I thought that was WebSphere Application Server. But then there is WebSphere Liberty. And what's "Liberty profile"? It's all Greek to me.
Liberty is a new Java EE implementation (server) from IBM. As far as I can tell the team who made it include a couple of people that worked in Geronimo before. WebSpere is the older server. For reasons that have never become entirely clear, WebSphere needs over 2GB to implement Java EE, while Liberty is around 100MB. WebSphere and Liberty share implementation components, which often aren't build by the vendor anyway. E.g. they both have the same JSF jar, and the same CDI jar, etc. It's not uncommon to start over with a new server. JBoss has done this before. What's currently WildFly 8 started with a total rewrite JBoss AS 7. 
People who found that interesting may also be interested in reading about https://en.wikipedia.org/wiki/Bottom_type
ActiveMQ uses JMS, and RabbitMQ uses AMQP, so.. first check which way of sending and receiving messages you'll want to use. (Different libraries will have to be imported into the project as well, e.g. in Spring - JMS is part of Spring Core, and for AMQP you'll have to add Spring AMQP http://projects.spring.io/spring-amqp/). Both RabbitMQ and ActiveMQ have persistence, HA, routing and etc. I've used both in production projects, and from experience, RabbitMQ has less issues and much better documentation.
It does work (though I may be biased so try it and see - it's free for use on developer machines). There's also a ton of other cool stuff it does such as being able to update apps while running and without needing restarts, packaging itself up with your app, config and the minimum number of files to work so you can move it around different machines easily, and changing its config at runtime without restarts. 
Different people refer to it with different names - "WebSphere Application Server Liberty" is the official name for the runtime however you may see WAS Liberty, WebSphere Liberty, Liberty profile, IBM Liberty and a few variations therein. 
I think the selling point of Liberty is that you can enable and disable features *statically*, but the semantics are debatable ;) The dynamic part is that you can do it during runtime and no server reboot is needed. The static part is that you explicitly put something in a config file (server.xml). Many other servers are fully dynamic, and they scan what the application needs and enable stuff based on that (but this takes time too and can be hit or miss) Liberty gives you absolute control, which is really cool for resource constrained environments. 
They should decide on a single name. IBM Liberty sounds just fine ;)
Exactly, not only we have to deal with the ask toolbar. Now, we have to avoid switching the default searcher to yahoo.
I'd argue that it's a lot less annoying than a toolbar. There are worse fates for end-users than having their default search-engines changed.
&gt; This article is suggesting that the new action oriented MVC framework will be a part of JSF. Actually - as far as I understand it - it will be the other way round: MVC will be a pluggable action based framework and will use JSF per default as rendering engine.
It's also cool for security or feature bloat reasons. If I for some reason don't want JMS to be used, ever, I can remove JMS from Liberty. An application can not accidentally use JMS then, since it's simply not there. Then Liberty can go one step further, instead of just disabling it via server.xml you can package the server based on a server.xml and the end result is a new binary package that physically does not contain what is not in server.xml. In a way it's container side Maven and pom.xml ;)
Err, Oracle is *very far* from dying.
Which is the dying technology for Oracle? Java, the most-used development language in the corporate world or Oracle database, one of the most-used databases in corporate enterprise or MySql, the most-used database in the world? 
why not use selenium
God damn Oracle. Give us a nice runtime to code for and bundle CRAPWARE with it. Thanks a lot.
Ugh. Agreed. 
&gt; RabbitMQ supports JMS Okay yes, it seems they support JMS 1.1 but they don't flaunt it. However ActiveMQ 6 (ApolloMQ) has support for JMS 2.0. &gt; The broker is written in Erlang, but that no more introduces a "dependency on Erlang" than using a JVM introduces a dependency on 'C'. You will not have to write any Erlang Thats just stupid. Erlang isn't a compiled language, meaning that RabbitMQ installs the Erlang runtime/interpreter in order to run the broker, i.e. you now have a dependency on Erlang. I never said that one had to write Erlang, nor does having a dependency imply it.
It's different because the assumption is, given that this is posted in /r/java, that he already has a dependency on the JVM, so he isn't introducing an additional one.
Just install via ninite, it will clear these check boxes for you. :-)
&gt; He as a dev may very well have. If he's introducing a message broker, that's an ops concern, and they are far less likely to give a toss if the dependency is on a JVM or the Erlang runtime. It's not necessarily an ops concern. You are making the assumption that there is an ops department. Even if we assume that there was, then they would probably care even more about extra dependencies. &gt; Whether he chooses RabbitMQ, ActiveMQ or anything else, it's a set of client jars for him, and a broker to be installed and managed. It makes very little difference to a dev. Thats not true. There can and are more differences than that. The ActiveMQ broker for instance can be run as an embedded broker in the application, meaning that he doesn't have to install anything extra and can run everything from maven. I doubt that can be done with RabbitMQ. &gt; And what about the outright nonsense that if he wants to use JMS he has to choose a broker written in Java? I never said that. 
Yes, you can indeed run an embedded broker. Have you ever done so? You lose any hope of store and forward. It's a recipe for disaster. You need to start this application before this one, or integration doesn't work. Relying on an embedded broker alone is idiotic. You're making the assumption that ops concerns require an ops department. If you think there's no ops concern here you don't understand the term "ops", pure and simple. And regardless of which broker you run with, and who is dealing with it, there will be dependencies. You are now free to downvote me again for daring to challenge your narrow experience of the matter at hand. 
Yep its great fun when you tell a client to install Java and they reply "Doesn't that install adware? Do I have to install it? How do I make it not run in our browser's cause its not safe?" Java already has a bad rep with sysadmins I'd really prefer they not keep making it worse.
No it isn't. He could be a hater, or a hater-hater. 
That seems amusingly ironic.
I actually know how this works! 1. If control flow drops off the end of a method, that's a verification error. 2. If a method contains a return instruction that doesn't match it, that's a verification error.
[This](http://www.reddit.com/r/java/comments/3b2fhn/java_method_with_return_type_compiles_without/csjmvv2) and by having a non-conditional jump backwards (aka GOTO), control flow never reaches the end of the method, so there are no problems.
&gt; Yes, you can indeed run an embedded broker. Have you ever done so? You lose any hope of store and forward. It's a recipe for disaster. You need to start this application before this one, or integration doesn't work. Relying on an embedded broker alone is idiotic. The distributed application we develop at work uses embedded brokers for each collector and backend in a store and forward configuration to ensure message persistence, and it works perfectly. Your claims reveal your stupidity and total lack of experience. &gt; You're making the assumption that ops concerns require an ops department. If you think there's no ops concern here you don't understand the term "ops", pure and simple. You are the one who made the distinction between dev and ops. My claims do not require them to be separate departments. &gt; And regardless of which broker you run with, and who is dealing with it, there will be dependencies. Yes, but they will be different depending on the choices made which is exactly my point. &gt; You are now free to downvote me again for daring to challenge your narrow experience of the matter at hand. I actually have extensive experience with ActiveMQ and I will continue to downvote your posts as long as you downvote mine. 
How about OpenJDK?
It isn't Oracle's profit bucket that is helped by this, but some executive in charge of the JRE getting a bigger bonus for increasing *their departments* profit bucket.
*facepalm*
AMQP is a protocol. JMS is a specification. ActiveMQ Artemis supports AMQP.
That makes sense, thanks!
&gt; Now you're just being an offensive little prick. You started with the offensive stuff so why don't you back the fuck up. &gt; Your app works "perfectly" under controlled circumstances. Relying solely on embedded brokers will bite you in the ass. I don't care how much experience you claim to have with ActiveMQ, that is a fact. I've discussed this at length with ActiveMQ committers, including the Fusesource engineers themselves, who basically run the entire project. What the hell are you talking about? You are just making stuff up at this point and trying to namedrop and hoping not to be called out on it. Embedded brokers in a store and forward configuration is a valid and common topology, amply described in the activemq documentation: **This is logically equivalent to Client-Server but some (or all) clients contain a locally embedded broker. So communcation between the client and server (broker) are all within the same JVM and so do not use real networking - though brokers may communicate with other brokers or clients connected to it. This can avoid the extra hop required to go from producer to broker to consumer - which is a great optimisation for RMI / RPC style situations, where you want the performance benefits (reduced latency) of point to point networking but with the scalabilty of a flexible messaging fabric. Embedded Brokers can also simplify deployment options as well, its one less process to run. Another use case for embedded brokers is to provide store and forward isolation from each service - so that the remote brokers can fail quite happily without affecting the service with the embedded broker. e.g. the entire network could fail, but a service could continue publishing messages to its embedded broker. ** &gt; You're tying yourself up in knots over "ops", give up on that. It's clearly not something you're concerned with, which is fine I am not tying my self up in knots about it at all. You claimed that dependencies weren't even a concern to someone developing an application "because ops" which is pure horse manure and you know it. &gt; I'll tell you now that having a dependency on an Erlang interpreter is no bigger a deal than having a dependency on a JVM. Probably less so, to be honest. Again, I am not claiming that it is a bigger deal, only that if YOU ARE ALREADY DEPENDING ON THE JVM you won't be introducing another VM/interpreter dependency by choosing ActiveMQ. 
ug 
But if your app goes down, you lose that broker. That's the problem with that topology. You still aren't grasping the deployment issues and I fear you never will. There is no "**you** are dependent on the JVM", there is only "this specific app is dependent on the JVM". That's no reason to tie your entire stack to the JVM. Unless you're deploying absolutely everything on one machine, which I'm assuming nobody is stupid enough to do any more. 
&gt; But if your app goes down, you lose that broker. That's the problem with that topology. No that is the whole point. If a broker goes down it only takes that one service with it, because every other application having its own broker will be able to continue to deliver messages, as opposed to if there were only one dedicated broker. Again, read this part of the documentation: **Another use case for embedded brokers is to provide store and forward isolation from each service - so that the remote brokers can fail quite happily without affecting the service with the embedded broker. e.g. the entire network could fail, but a service could continue publishing messages to its embedded broker.** Funny how you don't seem to understand even the simplest facts about the topology even though you claim to "have discussed it at length with core committers". &gt; You still aren't grasping the deployment issues and I fear you never will. I understand the deployment issues perfectly, which is why I know that using an Erlang application introduces a dependency on the Erlang runtime, since Erlang isn't a compiled language. You on the other hand were the one claiming it introduced the same dependency as an application compiled in "C", which just .. well lets just say it amply reveals your level of understanding. 
The documentation explains what *can* be done. That doesn't make it a good idea. And it isn't. 
Next you'll tell me they're making SourceForge the *exclusive* distributor.
openjdk from now on.....
unfortunately 
They got out of the consumer hardware market when the margins dropped below what they like, and still make metric fuck tons? https://www.google.com/finance?q=NYSE:IBM 
But Java is hardly a language being migrated to... It's legacy.
&gt;"Do good programmers write bug-free code?" I think that's the joke.
yeah, we can also see this from the massive size of IBM's research departments as well
No, and I hope the horrible truth will be discovered by you: Behind my posts of course there is an aim to share part of the things I freely develop for others, but also to contribute actively here with things I consider nice for java space, done by anyone. In any case it is very frustrating to have good tools without a commercial aim and see how someone pretends to boicot it just because I speak about what I did. I understand there are rules designed to make this a nice place and I am committed to strictly follow them to make this a better place. I am sure we will become good friends after all
I would rather that Oracle raises money from developers instead. This is crap needs to stop.
Don't make the mistake of confusing the Java language with the Java runtime (aka. JRE, which runs many languages) or the Java browser plugin, which has pretty much always sucked. The browser plugin is legacy, the other two are still incredibly relevant, especially the JRE. 
I believe that HornetQ is donating it's code to ActiveMQ so the best parts of HornetQ will soon be in ActiveMQ
Lol fuck you
Source? 
I used to do that. Installing programs in separate drive. It doesn't help. It makes a mess. Just reserve a 120GB for C and be done with it. Saves you 1000 clicks
Is Java the most used development language in corporate? I was sure .NET/C# was the corporate standard by now
I have no idea why some people still haven't switched to OpenJDK. It's much less of a headache.
You can distribute a copy of the jdk with the install of your product. With this bullshit, that's about the only way I'd do it anymore.
Yeah that's the way I've been moving but got old codebases that need to be setup to not rely on java being on the PATH variable. Its a bit shameful but I'd like to get to the point where my clients don't know its java based apps. Just leads to too much nonsense when your working with clients that just know what the news has told them about Java.
https://launchpad.net/~webupd8team This Ubuntu + Debian PPA is kept very up-to-date vs. Oracle releases.
After working for a very large corporation (not oracle) I learned that the majority of managers in them are just scrambling to prove they are relevant and not to cut their department. They are usually chasing quick gains and don't see the long term affects of their decisions (or don't care). The long term really means nothing at all, its just about staying alive for another year in that environment.
b == b is false if b == NaN. So we can't assume it to be true.
HornetQ is not donating code to activeMQ. It says they are wondering If they should. You need to be a bit more careful with facts. 
just published version 1.10.0 with a csvWriter in it see https://github.com/arnaudroger/SimpleFlatMapper/wiki/CsvWriter CsvWriter&lt;DbObject&gt; csvWriter = CsvWriter.from(DbObject.class).to(writer); csvWriter.append(obj1); possible to specify column names and formatter.
[Yep](http://www.azulsystems.com/products/zulu/downloads).
Sweet! Thank you!
Kotlin is great, have used it and like it a lot. It's very similar to Swift. It's also not Swift.
Really cool, nice job!
The day I can compile Groovy in Xcode, we will agree.
Its actually WAS right?
[God dammit oracle.](http://www.gifwave.com/media/97137_perfectloops-headdesk.gif)
The issue is huge legacy systems. What would be the replacement database that everyone will switch to? It would cost our company probably a few hundred million to switch to a competitor assuming it's got a different syntax. They won't pay it, they'll just maintain the old stuff. It's cheaper. Oracle isn't going anywhere for a long time. Our company is still using old 1970s shit :)
It's pretty interesting. But like the guy says in the presentation, real Lightweight Threads would be even better. Oh, and thanks for providing me with my daily lol: &gt; while still maintaining the simplicity, intuitiveness and familiarity of threaded code Yup. That's hilarious. 
&gt; These are real lightweight threads -- I know because I wrote them. Oh I didn't mean that they weren't really lightweight, I was referring to lightweight threads in the OS, as opposed to in Java or in the JVM. And you're right, the threaded code itself is neither hilarious nor complex, I misinterpreted that and thought you were calling multi-threading (and complex concurrency issues) "simple" and "intuitive". My bad!
&gt; I was referring to lightweight threads in the OS Unfortunately, the OS can't really provide lightweight threads (or, rather, it doesn't yet, and it's unclear how this could be done). The reason is that the OS doesn't know what the thread intends to do, and therefore how it's to be scheduled, so it must use a scheduler that is far from optimal for threads serving requests over the wire (like an HTTP server). Another reason is that the thread's stack is directly managed by each language's compiler, and they assume one (large) contiguous stack. Both of these are theoretically solvable. The first might be addressed by the kernel letting the application (or JVM) control scheduling decisions; the second is harder to solve.
Those are very good points, thanks!
cool this release fixed some bizarre behavior when using openssl 
This may be a question mostly directed to /u/pron98. Hopefully this does not sound harsh, as these are honest questions I have wondered for a while. I have watched this library for some time. I should first say that I LOVE the idea of continuations. I personally would have enjoyed the addition of continuations more than lambda expressions. I really wish the oracle VM would provide first class support for them (the same way avian does). Maybe there is not foundation of logic in this one, but I am nervous about byte code manipulation to provide continuation like support. I get nervous about any library where VM compatibility issues may not be discovered until runtime. I also am somewhat questioning the claimed performance gains for non-blocking use cases. Blocking cases I could see where there may be some advantage if you can avoid a context switch (is that true, can a context switch be avoided between task switching?) when switching from a blocking task to another task which is able to be ran. If you are able to avoid a context switch, how do you deal with cache coherency when you switch between lightweight tasks? If your not able to avoid a context switch, is there any gain in blocking cases? I have a lot of faith in the linux OS schedulers being able to efficiently switch between threads. In a case where you have threads actually doing computational work, I find it hard to believe that quasar could figure out when to deschedule threads better than the OS scheduler. Is there any benchmarks out there around this?
What is the metric they are using? Because Java is in all Android devices it is the most popular? Isn't the firmware and the actual JVM written in C? 
&gt; There are a reported nine million developers using Java with the programming language powering a reported 7 billion devices. It’s the most popular programming language, according to TIOBE Software’s monthly index, having switched places with C from a year ago. And Tiobe uses [search engine rankings](http://www.tiobe.com/index.php/content/paperinfo/tpci/programminglanguages_definition.html). Its really just handwavium, though in Tiobe's defense, its consistent handwavium. Still, whenever I see Tiobe, I go "meh."
&gt; I get nervous about any library where VM compatibility issues may not be discovered until runtime. I don't know exactly what you mean by VM compatibility issues, but the bytecode manipulation involved is rather contained. No extra class fields are added/changed. Only blocking methods are inserted with code that captures the stack. As Quasar matures, more and more kinks are worked out. It is already used in production by Braintree, Pinterest and more. As with any library, it may contain bugs, but it's already battle-tested enough to certainly be considered production-ready. &gt; I also am somewhat questioning the claimed performance gains for non-blocking use cases. I am not entirely sure what you mean, but fibers don't perform *better* than asynchronous, non-blocking code. The code is just a lot simpler, and the added overhead is extremely slight. See the [comparison with Akka](http://blog.paralleluniverse.co/2015/05/21/quasar-vs-akka/) for some benchmark, or [this one](http://blog.paralleluniverse.co/2014/05/29/cascading-failures/) with kernel-thread-blocking code (servlets). &gt; If you are able to avoid a context switch, how do you deal with cache coherency when you switch between lightweight tasks?... I have a lot of faith in the linux OS schedulers being able to efficiently switch between threads. We avoid a *kernel* context switch; Quasar (like Erlang and Go) does its own fiber context-switching. The reason this is much more efficient than kernel task-switching is precisely -- among other things -- making better use of the cache. Quasar (like Erlang and Go) schedules fibers using a work-stealing scheduler. This means that if fiber A wakes up fiber B, they will most likely run on the same core, and this reduces cache-misses because if A wakes B up, it is extremely likely that they're exchanging data (through message passing or a lock). In contrast, when kernel-thread A wakes up kernel-thread B, they will -- almost invariably -- *not* share the same core, hence *ensuring* plenty of unwanted cache misses. The kernel *cannot* use this scheduling strategy because it is only suitable for a particular thread behavior: basically threads that block, then run for a little bit, and then wake up another thread and block again -- but this is exactly how transaction-serving threads behave (see more below). The result is that a kernel task-switch -- not caused by blocking IO but by one thread waking up another -- takes about 20us, while a fiber task switch takes well under 0.5us (and can even be much faster). And that's just latency. When it comes to throughput, the effect is bigger (i.e. number of task-switches per second). In terms of RAM, a thread takes *at minimum* 500K, while a fiber takes, at minimum, about 500 bytes. As for general cache-coherency, that is handled -- just like with kernel threads -- directly by the hardware. Quasar doesn't add any fences not during task-switch (a task switch does involve a fence), and the usual JMM behavior applies (volatiles etc.). As far as your code is concerned, fibers and threads behave exactly the same. &gt; In a case where you have threads actually doing computational work, I find it hard to believe that quasar could figure out when to deschedule threads better than the OS scheduler. Absolutely true. If you're doing pure computation -- as in playing a video -- fibers (or work-stealing in general) are unsuitable. You should use a plain thread for that. Quasar fibers and kernel threads play along together very nicely. If you use the "strand" abstraction, your code doesn't even need to be aware whether it's running in a thread or a fiber -- e.g. `Strand.sleep` makes the current *strand* (thread or fiber) sleep. All Quasar channels and adapted j.u.c. classes work on strands, so threads and fibers can exchange messages, or even share locks -- just like two fibers or two threads.
Sidebar: &gt; Please seek help with Java programming in /r/Javahelp! Check the FAQ and Wiki of that Subreddit for lots of resources, and use the search function to discover similar threads linking to thousands of further resources. 
This looks exactly like what I need. I have wanted to change some GAV params for a while now in a big interdependent web of maven projects but I haven't because I know what a pain in the ass it will be. I will definitely be trying this out.
http://hornetq.blogspot.com/2015/06/hornetq-apache-donation-and-apache.html
Lambas and JavaFX 3d were the 2 killer features for me, suddenly Clojure doesn't shit on the garbage collector, YAY!
AFAIK it is very well known. I mean it comes with the JDK... I really wish the profiling was much better though. You don't get the callstack of the methods, and they mix all the threads together. So it is pretty damn hard to track down performance problems using it with non-trivial programs. I haven't found anything better though. :(
Good work! But it only applies to repositories right? It will be useful to adjust the changes to the source code, where the pom files are defined in order to fix them for the next commits and releases.
ROFL. 
C should start talking to Yahoo!
Yes, could you please share your code? We'd love to see what the problem is. Compilation to binary has nothing to do with it -- Java is also compiled to binary and by a far better optimizing compiler than Go's. It is possible that the instrumentation approach adds more overhead than goroutines, that are native to the Go runtime (but in real workloads Quasar code would usually beat Go code, simply because of Java's better overall performance). Still, there could be a problem, so I'd love to look at your code.
From what I understand, it's a sort of composite algorithm that takes a bunch of search rankings into account. I don't think the point is supposed to be that there's more code in X, Y, or Z language out in the wild. It's more a measure of "relevance" or something like that. And if you look at the list, I think they've got it more or less "right" in terms of the marketability of languages.
It was new to me. I had seen Ron Pressler's talk last year at JVMLS and was pleased to see that there was now a fancy website. 
Thank you for such a well thoughout reply. That helped me frame things in my mind a lot better. I had never considered the cache misses for sure, that makes a lot of sense. It does make me wonder why the linux scheduler is so willing to bounce a single thread to different cores when it's working heavily. It seems like it might be forcing you to loose part of what your attempting to gain. I wonder what affects could be achieved with a thread pool which was a bit more intellegent with cpu affinity (and specifies the CPU).
The NetBeans profiler magically does the right things... 
For me it's the kind of frameworks like Spring Boot and Dropwizard. Hell even my PHP friends start using Spring boot in their new project.
And he is a discouraged resource. He uses horrible variable naming, does not stick to commonly acknowledged standards and in general teaches frowned upon practices. [Relevant discussion thread](http://www.reddit.com/r/learnprogramming/comments/11ubro/28_ways_to_learn_programming/c6ppc38) If you want to learn proper style and conventions, stay away from him. I would strongly advise against using him as a resource. [Derek Banas](http://www.youtube.com/user/derekbanas/playlists) from [NewThinkTank](http://newthinktank.com) has about the same content but with far better quality.
Yeah, looking back at him, his naming convention wasn't all that great but he was a good guy that taught me the basics.
Better than YourKit?
Not too familiar with YourKit, but I should think so. First, as /u/PintSizedCat mentions, it's built into HotSpot and has an extremely low overhead. Second, both instrumenting profilers and sampling profilers on the JVM lie. JFR uses sampling that lies a lot less, so it simply gives results that are much closer to reality. See [here](http://www.slideshare.net/RichardWarburton/jvm-profiling-under-the-hood)
That's pretty impressive work for a single person. Well done! Though I noticed you haven't implemented a lot of things from python, from a glance, you missed CSVDictReader and Writer. Do you plan on implementing the whole standard library?
Thanks for your feedback! As you noticed I'm currently a single person working on xpresso. I hope other contributors will add some missing features as well.
I'd love to help contribute. 
Bad post is bad.
Yeah yours doesn't add much, you're right. 
Exactly as much as your original comment did with the added benefit of being a snarky way of pointing out you being an ass. 
I assume performance - both slowdown from the additional overhead, and the additional drain on the battery as a result of this.
The term Web service is a bit unfortunate. While it sounds generic if left unqualified, it usually refers to everybody's hate child SOAP (which btw can be used with as little code as your version does). Beginning with Java 8 you should be able to get to the parameter names programmatically so the `@ExposeAs` annotations should be optional then. I haven't looked into the API and class file format changes yet but when using Java 8, Spring 4 dropped the requirement for parameter name annotations.
&gt; courts sometimes rule in strange ways Yes but it helps tremendously if you are a big corporation. That being said, for OpenJDK it seems pretty clear. They require you to sign a [contributor agreement](http://openjdk.java.net/contribute/) which grants Oracle joint ownership of the copyright of the code you provide. I don't know how this has been handled in the past but I imagine something like this has always been there.
You need to pay for YourKit, too, and JFR is free for use in development.
There is lots of stuff on spring. http://www.tutorialspoint.com/spring/index.htm https://spring.io/guides http://courses.coreservlets.com/Course-Materials/spring.html ..
Could you suggest a better term if not web service? English is not my first language.
Also why reflections is a no no?
VisualVM is a Netbeans RCP app. I would imagine there's a lot of shared code.
Yes, you are right. To learn more about what CUBA actually is you can visit our website https://www.cuba-platform.com/en/ or have a look on this post https://www.cuba-platform.com/en/blog/2015-06-01/389.
Jersey will save you: https://jersey.java.net/ Their tutorials are pretty good.
I could do the same thing, but I couldnt revoke GPL. If you give me your copyright, its not your code that is subject to GNU GPL 2. Its mine. I could require this in exchange for distributing my code (which used to be yours) on my website. You could still have my code under GPL, but I would own the copyright because you chose to give it to me. They are requiring that agreement for putting it on that website, not for contributing in a GPL way anywhere else.
More likely licensing issues of 2 children not wanting to play in the same sandbox.
I did not comment at all on your submission, i replied to /u/adamcrume's comment and wanted to clarify that Oracle indeed owns and co-owns (you cannot give up your copyright in every jurisdiction) the whole thing unlike, say, the Linux kernel which is owned by thousands of people because they don't have such an agreement. The whole idea of "GPL revoking" sounds ludicrous to me. It makes as much sense as "revoking a tree".
Generated code annotation processors are the future. It's faster; no startup cost; lower memory; clean stacktraces; easily debuggable; no runtime errors. [Dagger 2](http://google.github.io/dagger/) is an example of a library that uses this approach to implement dependency injection. It's much better than Guice which is just like all reflection.
Right now you have a bunch of if / else if clauses that look at the method parameter class type. Why not implement recursive type translation, so you can support type parameters?
There are a bunch of interesting links that might be helpful to you over in /r/springsource. Its still fairly new and growing so if you find anything better, feel free to post it up there too :)
When I say Oracle doesnt own Java, I mean Oracle has no authority to change the way existing Java programs work or stop anyone from developing new ones or branches of the internal workings of the language.
So its your first job, don't be worried about asking the questions. Do a bit of research, then ask your team leader (or whoever gave you the project) some educated questions based on your research. Take the answers, digest them and do more research, then ask more educated questions. Be mindful that it is the sort of thing that might already exist in the company, so there might be some existing framework etc you can make use of. Also bear in mind the house style and infrastructure you need to work within, however these will probably be some of your educated questions. The company will not set you up to fail, just don't be shy if you're not sure on something. You are new, they will be expecting questions. :)
Using the allegro framework wrapper for Java as well. Impressive.
I would personally prefer to keep low effort posts like this out of this sub. A picture of a bag of coffee? Really?
Not sure it was very snarky. 
The snarkiness was me satirically using your comment as a response to your comment.
I think you give yourself too much credit. 
No
That's extremely reassuring. Thank you very much. Like what was already said - there are existing frameworks and standards set by the company that I was shown today since I asked, and it has helped immensely.
So you would have to call it by a different name.
When I was following Groklaw in the 2000's watching the SCO vs IBM farce, one thing we learned about was promisary estoppel. That means you cannot undo a promise you have made publicly that others may have relied on. Yesterday: here is some code under GPL Today: Remember that promise I made yesterday? Nevermind. The *next* version of Java might not be under GPL, but the past ones cannot be undone.
Oracle does have the authority to change the way existing Java programs work. There is absolutely nothing legally stopping them releasing Java 9 with incompatible changes. You're right about the other part, though, that they can't stop others from working on open source implementations, and nothing would legally force the open source projects to pick up the incompatible changes. (Except that Oracle might decide they can't use the Java trademark and would have to be called something else.)
True, anyone can do anything with the version released so far (within the limitations of the license), but only the original full copyright holder can release a new version exclusive under a new license or dual license an already released version. Practically, Oracle can license an already released Java version under a different license, but that would not affect the GPL version which indeed cannot be revoked. But nobody else can do this. The rights granted to you by the GPL do not allow you to also make the source available under say the Apache license. Note IANAL, but this is how I understood it.
I think it very well could. It appears there is also [Web API](https://en.wikipedia.org/wiki/Web_API). Take a look at how [Jersey](https://jersey.java.net/) identifies themselves. EDIT: To be clear, I think REST web server is understandable by all on what it means.
Thanks!
Excellent use of [Betteridge's law of headlines](https://en.wikipedia.org/wiki/Betteridge%27s_law_of_headlines) (Any headline that ends in a question mark can be answered by the word no.)
Yes. That is correct. The rights granted you under GPL do not allow you to re-license the code, but also those rights cannot be revoked. The GPL license text spells out what the licensed rights (and obligations!) are. All other rights not licensed are exclusive to the copyright holder who releases the code under the GPL. 
OMG No! Been there, done that. Never again! XSLT is a horrible, horrible language. Unless you figure out better syntax instead of XML, I am not interested. 
Learn git and make a github account. This is what source control is for and will be an invaluable asset to you as you continue on in your career.
Is this a legitimate question? Version control. Git, Mercurial, SVN, are all examples. In order of my preference.
I know about github and know there are easy ways to set it up with Eclipse, but my project has to be public (bad) unless I can afford the subscription (which I can't) and it's not real-time. It seems the only real-time collab. services work if I know how to setup and operate an XMPP server or don't work at all (saros).
I can't speak for ECF or the problem you are having I'm afraid. I can tell you I've used an eclipse plugin called SAROS which allows you to work on a particular project in sync with a number of other users, googledocs style, with success. Wasn't too complicated to set-up as far as I remember. edit: which I see now you've tried without success. Can I ask what the problem was / what you didnt like about it?
I am not very knowledgable when it comes to Unix systems, but wouldn't it be possible to access the local JMX port when you get access to a user account on the server? In this case it might be a good idea to additionally secure the JMX access. Malicious users can do practically anything with the application and its data when they have access via JMX.
It would be good news if the patches were public. I think perhaps if they were there would be significant pressure on Oracle to incorporate them.
Nah, not teaching, working on a project together. Figured it out..pretty much.
Bit bucket is like GitHub but it has free private repos.
Try Bitbucket. You can have 5 users on a private repository for free I think. It also has a built in issue tracker (Jira).
You started out disagreeing and then you kind of agreed. Oracle doesnt have authority to change existing java programs because, while they can release new software, they cant force anyone to use their implementation of java.
[step by step](https://www.digitalocean.com/community/tutorials/how-to-install-ejabberd-xmpp-server-on-ubuntu). Digital Ocean is decent hosting company, but these instructions work for any Ubuntu server.
You should absolutely write your own language. Everyone should do it once. 
yah. agree.Everyone should have its own programming language, own ide,own operating system. I think we should just copyright everything.
Step 1, install gradle
All good; we're just using Google Docs as a github-esque file storage for now.
You need to install an XMPP server. Here's a [list of server implementations](http://xmpp.org/xmpp-software/servers/). I have used Citadel and OpenFire and recommend them both. The first one provides more than just XMPP, it is a complete collaboration suite. While OpenFire is cross-platform (pure Java) and is more specific in functionality.
Friend figured that out. DocShare from ECF doesn't work so well, so we're just gonna use Skype to talk and screen-share our work and Google Docs to store everything and pseudo-file-transfer.
What does this lawsuit have to do with whether you should continue using Java or not? This isn't poor little-wittle Google getting stomped on by big-meanie Oracle...It's just 2 tech behemoth's battling it out in court. 
Oracle is not shitting on Google. This is just a fight between two mega-corporations, and if one thing is certain -- neither of them is fighting for you. OTOH, whatever the result of this lawsuit, it won't affect you in any negative way either. Just to explain what this whole lawsuit is about: * Around 2005-2006 Google wanted to use Java for their mobile phone runtime. * In 2006, Google rejects Sun's offer to license Java for $25M. * In May 2007, Sun open-sources Java. Google decides not to use OpenJDK because it fears phone manufacturers would reject a GPL runtime. * In November 2007 Google announces Android; it's going with Java anyway -- without its commercial license from Sun and without the GPL -- but breaking compatibility with the Java APIs. Google believes it has a chance to defend its actions in court. * October 2008 -- first Android phone is released. Those are the facts which no one disputes[1]. A few things to note: Google didn't just use a clean-room implementations of Java's APIs but it did so while: 1. Directly attacking Sun's main revenue stream from Java at the time -- mobile JDK licensing. 2. Breaking compatibility with Java, something Sun had always vehemently fought for, and sued MS over (and won). These two points, again, are facts that no one disputes. Both of those points left little chance that a lawsuit wouldn't be filed. But also note how Google now claims API shouldn't be copyrighted for the sake of compatibility, the very same compatibility they broke. The point is that regardless of your opinion on API copyrightability, neither of these companies did what they did to attack or defend some core value. Their actions were solely motivated by business reasons, and frankly, there are good reasons for both of them to have acted the way they did. Everyone's actions here are perfectly understandable, and entirely self-interested. Another thing you might find interesting is that Microsoft has sued over patents and extracts a lot of money from Android. More money, in fact, that licensing Java from Sun would have cost. Another conclusion to be drawn from this story is that Google, a self interested corpoation like any other, albeit one that happens to be the biggest private-sector espionage enterprise in history, has excellent PR, and succeeds, time and again, in convincing large portions of the population -- the very same population it mines for intel to sell to its customers -- that it somehow has *their* best interest at heart. No mega-corporation ever fights on your behalf, and there are no "good" companies. Finally, Oracle doesn't "plan to copyright its API". The court ruling is that APIs have *always* been copyrighted. How large the effect of this ruling is on the software industry is very much under dispute, but it makes absolutely no difference whether you're talking about Java, C#, Ruby or any other standard runtime library. The ruling applies to all of them. [1]: Source: http://www.pcworld.com/article/253666/a_timeline_of_oracles_java_lawsuit_against_google.html
Maybe https://screenhero.com/ ? 
Creating a web service is not as intimidating as it sounds. Spring MVC is a popular framework for creating RESTful webservices and configure it to use a ContentNegotiatingViewResolver to return a json response. Look up these terms and you will find plenty of examples on the internet that you can refer to get started. 
The first roadblock in understanding Spring Framework is always Dependency Injection. Read Martin Fowler's blog on DI and that should make things pretty clear on what is it and why is it required. From there on you can refer multitude of blogs that are available for spring framework
Any insight on why they created a bare-bones RI this time or is it just arbitrary? Many of the popular APIs have widely used (or at least usable) RIs like Mojarra, GlassFish, EclipseLink, Hibernate Validator, Weld, etc. Usage of JCache's RI in production is actively discouraged from.
Because I'm a junior developer and this is interesting. Thanks!
As this question is more related to Java programming, it should be in /r/Javahelp. /r/Java is for: **News, Technical discussions, research papers and assorted things of interest related to the Java programming language** as is stated in the sidebar. The various hints on this site should also have provided a pointer.
GitHub README states: "Why did we do this? Because a much greater engineering effort, which gets put into the open source and commercial caches which implement this API, is required to accomplish these things. Having said that, the RI is Apache 2 and is a correct implementation of the spec. It can be used to create new cache implementations." https://github.com/jsr107/RI Guess it comes down to the fact that commercial vendors already had solutions in place before the JSR was finalized.
Agreed, questions are VERY appreciated when we bring in a new team member. It's much worse when they don't ask and start implementing things in a way that does not work well with existing applications and infrastructure. Spend a bit of time getting familiar with how the team operates. Things like code style, and build jobs are two things I have seen people get cranky over. For the sake of all that is holy don't start reformatting code, I thought I would see a holy war erupt in a place I was at over that. Also, if you break a build send an email out. Say you did it and own up to it. That's MUCH better than not saying anything. People will be willing to work with you and help you fix it. I can say with complete honesty that I love working with smart new guys who are right out of school. They aren't jaded yet, don't have the stresses of marriage/kids on their minds all the time. They are really smart and ambitious. Usually they just need a few good habits. I wish you the best of luck in your future career. I'm sure you will do fine.
Its not a question by /u/stymiee, its just another spam SO submission from that account. Check its history..
Can someone tell me the main points/benefits/rationale/etc of why I would want to stream me coding or watch someone else code?
PBKDF2 is attractive because it's [recommended by the NIST](http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf) (important in some organizations) and you use do it [with Java SE 6+](http://blog.jerryorr.com/2012/05/secure-password-storage-lots-of-donts.html#example) and no external libraries (though if that's important to you, Heimdall would kind of defeat that purpose).
If you're going to do security, I'd do it from the experts as they usually know more than you: http://docs.spring.io/autorepo/docs/spring-security/3.2.0.RELEASE/apidocs/org/springframework/security/crypto/password/PasswordEncoder.html
I am not sure about that either, but 40 000 users seems to find the point ... 
*sigh* Heimdal is already the name of a cryptography-related software project, an implementation of the Kerberos protocol suite.
and firmware loader for samsung devices from linux...
Go out to the RedHat site, download jboss and start playing around with it. At a minimum, I'd say be able to interact with it (stop/start/deploy) and understand at high-level what some of the modules do. Also read this: https://docs.jboss.org/author/display/AS7/Getting+Started+Guide and this related to SOA: https://en.wikipedia.org/wiki/Service-oriented_architecture
yeah but I wouldn't worry too much about knowing it. It's an app server they are pretty similar, build a war or ear, deploy ! 
/r/WatchPeopleCode 
Why is this different than twitch.tv?
different platform, different TOS, different crowd, a lot of people still do not know about the programming/game development communities on twitch but having streamed and been a member of livecoding.tv for a few months and on twitch.tv in the last year the audiences are different - i get a much more mature audience and conversational on livecoding.tv.
If I did that everyone would just see me on Reddit all day...
Yep, I'll read it. Thanks again!
Well for one, technically you're not really supposed to stream non-game content. They're really laid back on that rule, but that could easily change. 
Somebody needs to make a site like this with a paired eclipse plugin (or whatever) that automatically syncs your code to a connected, live public repo as you hit save. Then the Viewers can actually read, copy, and explore your code instead of squinting at zoomed out compressed video of your code.
Seriously, if you are starting a new project use gradle. 
The quasar code: https://gist.github.com/anonymous/e71364452282bafcf3df The go code: https://gist.github.com/anonymous/cd5288306b671a6f2d06
Thanks! I'll take a look. The Java code can be written more succinctly [like this](https://gist.github.com/pron/33e0663dbb8bf63932d5) or [like that](https://gist.github.com/pron/76147aa66f076c783da8).
&gt; 4 lines of code damn good lines too.
That code the primary response used is awesome. I did not know about *Proxy*.
well, two of them are opening and closing curly braces. but they are damn good opening and closing curly braces.
They yell at me if I don't add debug flags to every code block. And I'll tell you what, that debug message is helpful.
If you're writing Scala, that's probably most of the business logic right there.
I find it interesting that this seems to mostly skip the YouTube phase. Before twitch came the let's plays on YouTube. I have never watched live coding sessions but I don't see any appeal to; I likewise don't see too much appeal in twitch. But let's plays work very well and for coding I think something similar could also work. There are many woodworking channels that walk you through sometimes big projects, highlight tricks and mistakes they made and how it all worked out. Something like this could be really interesting for beginning and experienced programmers alike. Editing would allow to make long coding sessions shorter and thus a bit more interesting. Sort of like screencasts but with more insight into the thought process. That being said, I do remember seeing at least some longer programming sessions with low view counts on YouTube and found them extremely boring.
Can you provide an example of these higher kinded objects you're taking about?
The easy fix is to just uninstall Chrome and use a compliant browser. I get why they want this stuff to go away but there are still a lot of applets out there particularly in banking and financial. I stopped using Chrome when they started reporting sites were not encrypted when they are.
I cant speak for that book but I did recently complete his beginner book: http://www.amazon.com/Java-Beginners-Guide-Herbert-Schildt/dp/0071809252/ref=asap_bc?ie=UTF8 His teaching/writing style is easy to follow and explains everything, like: -Task we want to accomplish -Code examples with explanations and comments -Important parts explained line by line -final paragraph summary -Entire code again from start to finish in order I pretty much never got lost. I too am learning Java to start game development, but I am totally new to programming. 
 interface ContainedToIntConvertable&lt;C&lt;T&gt;&gt; { public C&lt;Integer&gt; convertContained() } class Wrapped&lt;T&gt; implements ContainedToIntConvertable&lt;Wrapped&lt;T&gt;&gt; { ... public Wrapped&lt;Integer&gt; convertContained() } With generics a type parameter can range over all types, with higher-kinded types one can ranger over all types that take a given number of type parameters (with further restrictions if desired).
It looks like you might find [Suppliers.memoise()](http://google.github.io/guava/releases/18.0/api/docs/com/google/common/base/Suppliers.html#memoize(com.google.common.base.Supplier\)) helpful.
Thank you for the link! I personally learnt the core language (Before kind of... Forgetting everything due to school...) using the "Java for dummies book" I found some parts good and other parts not so much.... I will definitely look into that book. Thanks :D
Meh, that's a failure of the declarative type system. Using hindly Milner like f# or haskell would solve that nasty type signature 
Oh for gods sake stop with the fucking spam of your site already
&gt; 13\. If you are performing lots of string concatenation in your code, then use either StringBuffer or StringBuilder classes. These two classes give better performance than String class. [...] I was under the impression that concatenation was optimized when the code is turned into bytecode.
Back about 20 years ago I started on his "C++ the complete reference" book and it was one of my favorites. If he's kept his quality up I'd see no reason not to trust this book.
(Java 8 + Case classes - Higher Kinded Typefoolery) =&gt; Kotlin
I am using this book and Head First Java to begin my Java adventure. So far it seems pretty good. Simple to follow and well written.
I wouldn't worry about it. The entire thing is riddled with mistakes, half truths and misconceptions. 
The immediately obvious answer is *AOP*, isn't it? I'd like to know more about the real problem before making that call, though. It feels like OPs question is actually his own answer to another question. I want to know what that was. Just making method calls, and not knowing whether they do anything or not smells fishy to me. 
I've been reading The Complete Reference for a while now and its an incredible tome of information. It's literally the instruction/reference manual for the entire core of the language. I think it depends on what you need a book for. If you just need a basic refresher this is probably not the book. If you are beginner, this is definitely not the book. If you are someone that wants to learn all the intricate details about the language, it's history, all it's frameworks and core API, including much depth and detail on Java 8 changes than this may very well be the best book out there. 
Might be good, I personally never found those clean though, they make tracing calls a bitch. Kinda poisoned for me; I worked with this one lady that chained every form submission she ever wrote in this 100 case switch. Which part of me knows that was abusing it and it's still a legit pattern, but I just can't like it anymore.
I've seen that the most with open source programmers ( have it our way, if you don't like it you can code your own.......ha ha ), lately Google, lately Facebook. The later two being guilty of gratuitous UI changes, notification, or help understanding the changes ( when I've contacted those people they seemed genuinely shocked that their new design wasn't intuitive ). My biggest complaint for all 3 is making UIs gratuitously different
The size of the strings you're catting, as well as whether the strings are string literals or not also plays into what is faster.
Don't get me wrong: it's important to know this stuff. Even the most senior devs can discover a new trick every now and then. By the way, I didn't know that Java 7 has this Objects.toString method... 
He could have become an entirely different writer in 20 years, or he could have become even worse one. Who knows. Really, you take it however you like it. I have no stake with him or his 20+ books. OP asked an input for the author I recognized, and here is mine. If his style suited you and you gained knowledge from his book, good for you. I personally found better ones could be had without too much effort. 
That's what UX designers are for.
I agree wholeheartedly with this. UX is generally very very important. I feel as if UX designers should be used more frequently on internal software (such as ecommerce solutions etc).
I absolutely agree with you in that case. Appending one char at a time is the worst case scenario for StringBuilder. I don't think that it's appropriate to claim that that strategy gets 10-15% better performance over StringBuilder, but leaving out that the specific case is single character appends.
&gt; String concatenation with Objects.toString Maybe I missed something but both `"att1='" + att1 + '\''` and `"att1='" + Objects.toString(att1) + '\''` will produce the same result in case of null att1. &gt; StringBuilder You can sacrifice readability (probably bad idea) to reduce the number of append calls, e.g. `new StringBuilder("MyObject{");sb.append("att1='")` -&gt; `new StringBuilder("MyObject{att1='")`
This may be irrelevant, but you should look into libgdx if you haven't already. It's an absolutely amazing game development library for Java.
Under normal circumstances I would agree. Programmers are there to program. If the code works but the design fails that isn't 100% on them. When there are continual problems (every 2-3 days a new major issue) that effect end-users and people aren't stepping up to the plate... it's either time to hire more/new developers or have them see how their changes are causing people to lose their jobs.
Yep - + gets changed into a StringBuilder.append which essentially calls String.valueOf which handles null fine.
So... If I distribute code using this (compiled with a JDK I choose), it is safe to run in any Java SE 6 or newer JRE, right? I mean, I get String.valueOf in my bytecode, so even if my client's compiler wouldn't optimize this to a StringBuilder, it should run fine on his or hers environment. Am I correct?
I have one suggestion. I am forced to work in a Java 6 environment. It would be nice to have a Java 6 example on your site. I haven't yet had the pleasure to use try-with-resources statements. try { BufferedReader input = new BufferedReader(new FileReader(someClass.someMethodThatReturnsFile())); try { while (( input.readLine()) != null){ Iterator&lt;String[]&gt; it = CsvParser.skip(2).iterator(input); while (it.hasNext()) { System.out.println(Arrays.toString(it.next())); } } } finally { input.close(); } } catch (IOException ex){ ex.printStackTrace(); }
Looking nice! Currently the HEAD@master builds from Git seem to fail with missing kotlin.jvm..reflect classes tho - thankfully the downloaded build works tho...
Consider using Project Lombok to generate optimized `equals`/`hashCode`/`toString` implementations for you. [They're as readable as the `ReflectionToStringBuilder` version, but compile to the `+`-concatenation version.](http://jnb.ociweb.com/jnb/jnbJan2010.html#tostring) Have your cake and eat it too, as the saying goes. In general, moving computation from run time to compile time is a good idea. If you have an opportunity to do so, you would be wise to take it.
Go on Amazon and buy a later edition of Deitel &amp; Deitel for pennies and then work your way through that.
I'm not sure if this is what you're looking for, or how exactly to access it, but Lynda.com has a good set of courses on java basics
I strongly disagree with that approach. It's a good way to learn how to get things done with a new language in a way you're already familiar with, but not a good way to learn a new way of doing things. You end up like a friend of mine who taught himself Python. His background was in C, and he basically writes Python that looks like C. It's clumsy and awkward from the point of view of someone fluent in what Pythonic code looks like. Similarly, I don't care to write Java that isn't structured like Java and doesn't look the way Java is expected to.
Well, you can give "Head first design patterns" a shot. Written in Java and teaches OOO design patterns. http://www.amazon.com/gp/aw/d/0596007124
&gt; This is good if you are trying to learn a specific framework or stack but hardly addresses the need for wanting to deeply learn Java I agree and disagree. For someone coming from a C and Python background, learning Java can be a *daunting* experience. And by daunting I mean discouraging. It's not that the language itself is hard to learn, but Java has its own ecosystem, and every time you learn something new you discover 20 other things you've never heard of before. So much new terminology. So many new acronyms. So many new design principles. So many new "players" in the community. New tools, new package managers, new deployment systems. It goes on and on. Starting off using a framework could help _ease_ someone into the world of Java, so they're not completely overwhelmed and give up. Keep in mind a lot of people here learned Java organically. You started playing with it when you were young, and learned everything over the course of years before you starting writing code professionally. That's fine if someone is 16 years old, but if you're already knee deep in a career you may need to speed things up a bit, and starting from the ground floor may not be the best idea.
This makes sense. In that case, I feel like anything that is going to really hit Java OOP principles would possibly be the best start. But you are right, an experienced programmer isn't going to be interested (for long) in just running simple programs from the command line. For this, Spring, Maven, some persistence api would be a good start. [Enterprise Application Development With ExtJs and Spring](https://www.packtpub.com/application-development/enterprise-application-development-ext-js-and-spring) I mentioned above is really good for this. 
All excellent tips. Just a quick correction, Java is ALWAYS pass by value. Sometimes the value just happens to contain a reference. Confusing I know, and somewhat just semantics... * Edit: [link](http://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value) to a helpful discussion with examples 
The terms "pass by reference" and "pass by value" have an established meaning in the C/C++ community. In the terminology that they are used to, teeceli is correct: Java always does what C/C++ calls "pass by value". In the Java community, there's enough confusion about what these terms mean that I would argue that we just avoid using those terms when talking to Java programmers, somewhat like what you are suggesting.
The project is the driving force, forcing you to learn things end to end instead snippets/piecewise. As you do each part of the project development, search for the best practice for that part and learn about it. It's not that you use the old habit from the other languages. 
Perhaps you can augment that approach with code reviews from someone whom you trust "speaks Java natively". That way you'll get corrected if your Java starts looking too much like C++.
In my experience, phrasing it in this way for new people is actually more confusing and a bit pedantic
Possible, but it's not only about wasting memory. It is good practice to avoid creating unnecessary objects. And I believe the compiler will intern it for you if you do it as followed: String s = "something"; But I'm not 100% sure.
Why do different regions use '.' And ',' in opposite ways? It makes me crazy. I don't even care which way is the standard, I just want to be able to read numbers all the same way when they are written in English.
Even if that's the case I would ask - can you really blame them? In my opinion, in our industry today, the skill of being "connected" is not valued at all. Most programmers find their jobs by showing their coding/technology skills. From the first job search young developers "learn" that you are only valued for such skills. Then this brings many problems - developers viewing their job only as coding, developers leaving their companies, because their technology skills are stagnating, leaving because they are asked to do tasks that would not improve their skills and so on...
I believe a 3rd edition is due sometime 'soon'. Not that it helps right now of course :(
Given that a Java developer has no control over whether something gets passed by value vs passed by reference, it's not clear to me that a Java developer (as in, a hypothetical person who will program only in Java for the rest of their life and never ever explore any other language) gains anything from knowing the distinction between these two. Obviously, it's generally good to know concepts from other programming languages, because it may influence your thinking, or because you may one day use that other language.
There's the Octarine way, too: https://github.com/poetix/octarine/blob/master/octarine-core/src/test/java/com/codepoetics/octarine/functional/matching/MatchingExtractorTest.java
Software?
Really? You can't infer from context that I was asking what I get for my money *if I buy the software currently under discussion*? You didn't realise I was asking why one should pay for Liberty rather than use some other, free, JEE implementation? Ok, I won't buy this. I'll use *vi* instead. That's software, and I don't have to pay for it.
There is one more difference: `StringBuilder` will expand the internal buffer, `DefaultCharAppender` doesn't - it just throws an `ArrayIndexOutOfBoundsException` in your face. So this looks a bit like comparing apples and oranges. I would make data members package visible only if there is a really good justification.
So the company has business-critical systems with no strategy in place to keep them running? Sounds like they fucked up. 
Problem being, companies don't see that it's worth paying for all that "nonsense" if it's for internal use. 
Where did I say it was wrong? I'm more than happy to pay for software if I feel the paid for package is superior to a free alternative. I'm not going to do it just because the devs are hungry, though. Of course, you're probably forgetting that a whole ton of open source software is written by people who are paid to do so. Let's have a look at some JEE implementations: * GlassFish - written by Sun/Oracle devs who were paid to do so * JBOSS - Initially written as a research project, and then by developers working for JBoss inc., and paid to do so. Now written by RedHat employees. Who are paid to do so. * Geronimo - a mix of components which were all written by people who were paid to by various companies such as Sun, Red Hat, Progress Software So I can use any of these, for free, and sleep soundly knowing that the people who wrote it were amply compensated for doing so. So I'll ask again, why would I pay for Liberty? This isn't a rhetorical question by the way. Like I said, I'm more than happy to pay for software if it's worthwhile. I'm just not a charity, I'm not about to go all Bob Geldof and organise Dev Aid.
That's the thing: StringBuilder is a general purpose solution, not a something built for a specific situation. The `DefaultCharAppender` is specific to the problem I'm trying to solve. That is what I meant by "use a char array with System.arraycopy/String.getChars" in my first comment - if you want to squeeze maximum performance you've got to build your own custom (and more complex) solution.
OP is obviously (shadow)banned + site is added to "spam prevention rule".
I don't think there was a lot of mindshare that migrated back from Scala. It's ranking in tiobe was completely unaffected by Java 8 and it has so much more than streams and lambdas, my favorite being pattern matching and truly first class functions. I really couldn't see many people ditching it if they already knew Scala.
To make things more difficult, a Java reference is a lot like a C pointer, and not like a C reference (a "pointer" to a pointer). The history of this naming convention is a bit weird. In the earliest version of Java they even called it "pointer" instead of "reference" (that's why we have NullPointerException), but then they decided they wanted to more emphasis on how much it differed from C pointers where you can do arithmetics on them.
If you want something a little more theoretical, read - Domain Driven Design, by Eric Evans - it's the foundational text for spring-data, spring-data-jpa, and probably some of hibernate. - Enterprise Integration Patterns - its the foundational text for spring-integration - Clean Code by Robert C Martin (not super specific to Java but fantastic) - 12factor.net (the website). It's short and a little dated now, but it introduces you do to why spring-boot is the way it is.
Why?
Guava and, lately, Java 8 streams have some implementations of laziness.
I got started with Bruce Eckels free book, Thinking in Java. The book is older, but was invaluable to my learning and thinking like a Java programmer. It's arguably a top 10 java resource.
Even if they are jerks that fiddle while Rome burns, there's a reason they're like that. This company didn't by sheer coincidence hire a bunch of assholes that don't give a toss about the product. There's a direct relationship between how a company treats me, and how much of a shit I give that things are going wrong.
I agree. I feel as if programmers should SEE their software in the field. See how users are actually interacting with it. So many little problems get fixed that don't actually change anything but little problems that actually cause problems go unfixed for months.
This is a great comment. I'd love a book that discusses topics like what you have here, but fleshes them out with examples demonstrating how these principles are look in practice. If I cannot find such a thing, I'll keep everyone you said here in mind as I learn the syntax.
A lot of it comes down to developers feeling pressure from supervisors and supervisors feeling pressure from higher up (vps/cto/cio). This doesn't work well since most people outside the small group of developers have no idea about the process. Seems too many things are rushed to make them "better/optimal" that it causes problems.
Normally it doesn't matter if it's ugly etc etc as long as it works. When it's ugly and it doesn't work then there's a problem lol
This is the problem. Too many people think UX is all about making something look pretty.
This is a great list, so let me add to it: * Learn the strengths and weaknesses of the standard library. The Collections API is a must, along with IO streams (and Reader/Writer Addams) * I consider the source code to Guava to be very high quality if you are looking for examples. Both the API itself and the implementation. * Java has gone through several waves of style and best practice, so as you read or look at examples, be mindful of *when* this is from. XML has come and gone, big enterprisey frameworks have largely given way to lighter simpler ways of working, Annotations are probably still over used/abused especially by the more "magic" heavy frameworks, I think the builder pattern for public APIs is still in vogue (using these APIs is a joy, writing them is a PITA unless you like code generation or more magical introspection type techniques). And with Java 8, a new wave is starting as more functional programming techniques creep in to practice.
I know UX is far more than making it look pretty. Unfortunately there was no UX on this project when it was created and the time has not been taken to go back and correct its numerous flaws.
My comment wasn't aimed at you, it was aimed at the entire bullshit idea that UX is unnecessary for internal projects.
The devs are being defensive. They're covering their arses. There's a reason they're doing that. It's generally a symptom of a blame culture.
I think Effective Java 3rd ed is on its way.
Stanford has a free java intro to programming class on youtube (106a) not sure how new you are to programming but check that out.
The first edition is fine, the second edition just has a little more..
String literals won't necessarily create a string instance anyway. That's the entire point of the constant pool. That article was chock full of contrary bullshit.
You've got it half right. They aren't doing anything for you, they are making ham sandwiches because they like to cook. They then set them out on a plate with a sign "please take a turkey sandwich and give me praise for it". Then they get pissy when you say that their ham sandwich isn't a turkey sandwich.
I've heard about this library, I was thinking about going with LWJGL but I will compare the two. Thanks.
You're welcome.
Fortunately Python behaves the same way, so this is not an alien concept for me.
dear god I still have nightmares about this. Quick, what's the difference between a factory method, factory pattern and Abstract Factory?
I know what you talking about, all my Python exercises are all neat and idiomatic, however, whenever I try to touch a real project it inevitably ends up looking like Java. Because I only study Python but don't really make anything in it. That's why having a thing to work on at the same time makes sense. Just like with spoken languages, it's so hard to let go of the security blanket of your native tongue (first learned or most used) without immersion.
&gt; never specify an implementation unless you have to: pass around List&lt;T&gt; not ArrayList&lt;T&gt; … if we talk about function parameters. With returning type I would rather use the most specific one, especially when using Immutable types from Guava. Why? Because if I return it as List&lt;T&gt; then the other dev doesn't knows that he shouldn't call methods like add(newElem).
My team uses akka a lot and other teams at my company have had great success with akka and vertx. we're running at reasonably large scale too (every search for a domain available request on the godaddy site runs through our systems)
There's always someone online trying to pass the responsibility onto you, but the fact is it's the requirements people's job to make the requirements, and if I've made the mistake of arguing with them then management getting upset, when I should have just gone with a simple rule of "the requirements people make the requirements dev is not involved in that at all". The requirements people have a lot more free brain power to blame you if something goes wrong. I've often found it's best to just implement what they suggest, with a clear line of "we implement what requirements are specified", so that when they try to pass the buck for bad requirements onto you the answer is simply "flaws in requirements came from the requirements department, we don't write those". I only challenge requirements if they're unfeasible for us to implement, or as a nice sounding suggestion they can take or leave. I've had bosses that wanted us to challenge requirements and those who didn't, but it didn't matter - challenging them (other than them being unfeasible in which case we'd end up looking bad later anyways so might as well do it now) is always company-politics toxic. It almost always ends up making your boss and your department look bad. Nuanced details of who's responsible for what get lost in the company politics chain, your best bet is to have a simple line of "we don't write requirements" that prevents you getting blamed when things go bad.
Yep, that works for Guava Suppliers. [Cyclops](https://github.com/aol/cyclops) has an equivalent for JDK 8 Suppliers that might also be useful. [Memoise](http://www.javadoc.io/doc/com.aol.cyclops/cyclops-functions/4.0.3)
The thing is that, as you mention, even for free software eventually someone has to pay. Geronimo is no more because of this. The developers got paid (not all and not all fully, but still), but not the companies who did the paying. This model was not sustainable and Geronimo was axed, or just left to wither. They didn't even bother doing some kind of announcement. Ironies of ironies is that the very people working on Geronino are the ones who participated in creating the server we were discussing here: Liberty! GlassFish is free, but gets no security fixes and no bug fixes from Oracle. It's delivered once together with the spec, and then maybe gets 1 update (extremely likely for GlassFish 5 it will not even get this single update anymore). It was all over the news when Oracle announced this a year back. Then JBoss is technically free, but practically not. JBoss AS/WildFly are public alphas and betas for JBoss EAP. Everyone in the know is aware of this but Red Hat is a bit unclear about this with their parallel naming scheme. If you're willing to run on public betas, then go ahead it's free in every possible way, but it's not production level stability (that said, if you are willing to work around or patch some of the bugs yourself it's not that bad). The real GA/production ready server is JBoss EAP, which is the last public JBoss AS/WF with a lot of bug fixes. Now JBoss EAP is a difficult product. Red Hat does everything to paint the picture that EAP is commercial only. When you download the binaries from them you must promise that you won't use it in production. For most people and companies JBoss EAP is not free, but paid software. Long story, but if *everyone* thinks; the developers are magically being paid, so I don't have to pay, then eventually free software will crumble. 
I note you're still not answering the question "why should I choose Liberty?" I've asked it several times now and you skirt around it with appeals to morality.
Only that you advertised a ~15% speed bump without mentioning that you did that by solving a different problem than `StringBuilder` solves (i.e. focus on single char appending and using a fixed buffer size). I would not point this out if you had said for example "For specific problems you can find solutions that are ~15% faster than `StringBuilder`". The way it was phrased sounded a to me like engineers at Sun did not do their homework and I don't believe that would be an appropriate description of the job they did.
We use rxjava (in "enterprise" production) and love it. Started out as a way to avoid callback hell. Now it's our go-to way of implementing non-trivial components (some in groovy, some in java7, some in java8). There is a learning curve for sure, having a bit of functional programming experience helps. Documentation is pretty great though, and there is quite a bit of tutorials and blog articles to learn from. Debugging becomes a little different, but it's not that bad. I've read a lot about Akka, never actually worked with it - seems awesome. Also tried quasar, very cool stuff. Vert.x seems nice as well at a glance.
Sorry to hijack this discussion with an offtopic question but I always wanted to try and switch to Java for webdev (and here use Play as this is the only framework that made sense to me coming from PHP/Python/NodeJS). From what I've seen Play is async so this would mean that if you use something like PostgreSQL (which i would like to do) the db queries would block so basically your Play app would just handle one request at a time. And again from what I've managed to understand a solution would be to use promises. Is this the right way? Do you need to wrap all of your controllers to promises so that they will not block? Also does the ORM that Play use block? Or is it somehow using promises behind the scenes? This is something that I was not able to find answers to, and looks like the tutorials/documentation doesn't make it too clear and easy to understand. 
From what I read about RxJava, it seems really awesome. However, there are not a lot of resources around it (aside from the official docs). Are there any larger-scale examples, or tutorials that explain a how to build larger applications, maybe?
&gt; the founder of Vert.x discourages the use of StackOverflow What the hell for?
i've developed a database and have a reactive webapp written to test / demo it that uses [kilim](https://github.com/kilim/kilim). the performance is incredible - low end hardware (old laptop, $7 per month VPS) can handle 10k simultaneous connections (going off memory here - been working on other stuff lately) i haven't used vert.x but my understanding is that it simulates actors (as does akka) and you're still using a thread per connection which won't really give you the benefit of scale. if you're looking to the future, i'd take a look at kilim or quasar (i haven't used it, but it seems to be a similar system) - they use bytecode weaving to provide true coroutines 
http://sites.google.com/site/freejavalectures
It's really not. Java has changed *a lot* since that book came out. You'll soon find yourself relearning what Eckel taught you. Almost everything, collections, libraries, parallel programming, even core parts of the language itself have changed since Eckel's book.
Core Java by Cay Horstmann and Gary Cornell is *the* definining comprehensive text on Java. As deep as you want to go, they'll take you there. If you just want to quickly learn the language and get going on other projects, then Schildt (or any of several writers) will get you there. If you want deep and to fully understand what the language and JVM are doing, then Core Java is the book.
IMHO, Java has laziness only in the same sense that it has tuples: you can use other language features to approximate them. In the case of tuples, you could create a set of classes called Tuple0, Tuple1&lt;A&gt;, Tuple2&lt;A,B&gt;, Tuple3&lt;A,B,C&gt;, etc. and then argue that anything a language that has "real" tuples can do, you could also do with your classes, but it's just not as convenient to use, and since it's your homegrown solution, it's possible for two developers to independently develop incompatible implementations of tuples and not be able to have their code work together. Similarly, you could replace every single expression in your Java code with a Lambda that evaluates that expression as a way to approximate laziness, but it has the same problems as with homegrown tuples (inconvenient, and probably not compatible with someone else's home grown implementation).
&gt; they'd be a little more careful/hesitant to push out poor code just to meet a deadline As if it's a dev's decision to ship.
Old (non-ClearType) windows font antialiasing to be precise. This thread is fun.
It shouldn't take that long, it's a pretty simple signature. And your example highlighted the most important part: not lambdas, but with C# you also have expressions, which allow the examination of the code passed in. Opens the door to a static reflection, code analysis, and so many other useful patterns. 
I've been using Vert.x as my main productive environments for the last two and a half year. Just to give you some numbers, I've been able to manage ~3000 req/sec with a throughput of 5ms on a single EC2 Large instance. About the new version, I can assure you that the v3 is incredible mature and easy to use
I haven't seen any bigger examples really no. But I do feel that there are quite a bit of articles and blog posts around if you google some.
Oldy, but still current
You're essentially correct. I do think there are a couple of libraries that are de facto standards in Java (Guava and commons-lang) that provide things like tuples or lazy iteration, so in enterprise java one might be unlikely to find separate homegrown implementations in use. I hadn't even really thought about passing lambdas around as a homegrown implementation of laziness, but you're right about that too. Where I was going was that, at least in terms of iteration (which, granted, is a small subset of laziness), laziness is now baked into Java. 
Are you just deleting and resubmitting all of these because they're downvoted? How about you stop submitting the same youtube links over and over and over again?
Marketing is a bit extreme, but have to say my trial went swimmingly, and the tool seemed pretty useful
Your first post about the same subject has already been reported as spam, yet you post the same again. Again, your post is removed. Should you try to post again, you will receive a permanent ban.
Glad you like it. We hope to get a lot of community feedback on the CDI 2.0 EDR 1 release. We're also hoping for the RI to follow shortly so that we can update the EE showcase.
Thanks, I was scratching my head wondering what I was supposed to be looking at, exactly. Although it's interesting that the development happens in the open like this. Also they have [a nice theme for `hg serve` over there](http://hg.openjdk.java.net/jdk9/jdk9/jdk/graph/), compared to [e.g. Python's](https://hg.python.org/cpython/graph/) (which is largely the Mercurial defaults).
The producer and consumer of the code are not always the same. If you use it, either your team needs to use it too; or you need to rewrite it. Edit: Ternary operators are very specific. Macros on the other hand are unbound, and it is possible to get too creative with them. That said, if you need macros, why not use Scala? (I do when I have the luxury). There's no point in adding all features to all languages. Java, by design, strives for simplicity.
It's wasn't a bad question. Java was put out 20 years ago and a real problem back then was you sort of had languages that were really really hard to maintain. You had C/C++ which were hard and had a lot of ways of doing things and then you had languages like Perl which were easy to work with but created unmanageable code. Java came along to do a couple big things. First took the hard parts out of C/C++ by having things like garbage collection. It also had features that at the time were really damn nice at the time(networking, image handling, cross platform GUI, reflection, etc etc), and finally it was strict so than when a Jr programmer wrote code in it his work wasn't a complete clusterfuck. The last point can't be emphasized enough. Programmers like to hem and haw over not typing(because programmers are lazy, it's why we learn to make computers do our work for us) but what really kills programmer time is having to maintain code. A programmer may spend 100 hours writing a piece of code, but in a long lived project there will be many thousands of hours spent maintaining that same chunk of code. So having a language designed around making it not a nightmare to maintain that code, even when it's written by a below average blue collar guy, matters a lot. Go is a newer language that aims for the same goal. It lacks certain features and has a strict design so programmers can't splatter their code all over the place. So, define in itself may not be bad, but in a language like Java that's trying to force programmers into a certain pattern so their code is more standardized, it might not be the best option to add to the language. 
Holy shit please no, textual replacement in files is sickening. Please do not let C here :(
It is not Ok in C++, they have been trying to get a module system in the language for years.
No, this will kill code readbility so fast it is not even funny. Keep everything in one language, and do not deviate.
No worries. Don't take the "PLEASE GOD NO" reactions personal or anything. Think of it like post traumatic stress disorder from coders who've gone through Code Hell and back. There's a lot of stuff that's obvious when you've been coding for a long time that won't be to someone who's starting out. Only way you learn is to ask questions.
? import static java.lang.System.*;
&gt; But seriously why is this spam??? Read the [Reddit Rules](https://www.reddit.com/rules/) and its [definition of spam](https://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F). Your only activity on Reddit is to push your youtube channel, nothing else. And you keep submitting every link to any programming Subreddit that you find. &gt; There is a lot more trash that other people post here... Agreed. That doesn't make it okay for you to add even more to the shit pile just because "others do it too".
There are lots of commercial and free java courses on udemy
you cant use either of those build systems without using ant behind the scenes.
Assuming this is a response to the Maven/Gradle comment, this doesn't make any sense.
You are right on. I work on a huge legacy application that relies on this kind of dependency resolving, basically service locators and class path lookups every where, to provide the kind of optional plugability that the article is suggesting. Let me tell you that it is complete hell! Dependency injection is the way. 
/r/learnjava
Could someone explain what I could use this for?
/r/learnjava and /r/javahelp are always willing to answer questions
Ok, thanks :)
Sorry, I didnt know about this subreddits :)
Granted, Ant is basically "legacy" software, and most people would not use it as the build system for a new greenfield project in 2015. However, there are thousands of legacy projects out there which will likely never migrate. There also seems to be a small community that appreciates Ant for what it is, and does choose to use it for greenfield projects. I favor Maven myself, since you can always drop down to its Ant plugin if you ever need to do something really custom. However, I can understand some people wanting to eschew Maven's prescriptive lifecycle for various reasons... and also believing that Gradle is the most ridiculously over-engineered project that the Java community has cooked up in years. It's great that the Ant developers continue to put their volunteer time and work into maintaining this important project, rather than letting it go moribund. Not only does it benefit that community, but it also benefits Maven users as well... since once again, dropping down to the Ant plugin is still generally how you do custom things in the Maven world. I just can't imagine the mentality of seeing a release announcement for a major open source project, and writing a comment basically saying, "Ugh, don't use this". I can't imagine the mentality of upvoting that comment to the top, either.
I'll add you on Skype later this weekend. In the meantime though, where are you at? What are you working towards?
I would sugest that you try with [jhipster](https://jhipster.github.io/). Maybe you can take out only the things that interest you. [Here](https://github.com/jhipster/jhipster-sample-app) is a sample app built with jhipster. Good luck!
It's not that it's more efficient. It's that it's the only way they could implement it using the existing switch on int behaviour. 
I agree with everything you said, except: &gt; I just can't imagine the mentality of seeing a release announcement for a major open source project, and writing a comment basically saying, "Ugh, don't use this". I can't imagine the mentality of upvoting that comment to the top, either. I appreciate the work they contribute, and the contributors shouldn't take it personally. But it is a non-collaborative way to move forward, and to be honest, "Ugh, don't use this" is the thought that rushes through my head when I see an Ant project today. It's not like we're talking religious wars, we're talking about making a project that is easy to adopt, maintain, and build.
&gt; I will continue to use Ant for all my existing and future projects , thank you. It works and it does exactly what I want and how I want. One jar: ant-xxx.jar &amp; one extra file per project: build.xml, anything more = automatic disquialifier for me. Hey, they'll always be counter-society / fringe groups out there. I would just hate to be the one you inflict frustration on when they try to collaborate with you. P.S. Maven does all that.
&gt; You know, it's amazing what good people with discipline can do... most of these tools are made to cover up deficiencies in these areas, which is sadly a large percentage of "professional" developers these days. Yeah, those people with punchards had lots of discipline and they're wondering why we're programming with all these deficiency compensating tools now.
&gt; i misplaced the response but it does. both libraries depend on ant. Reference? Maven is completely independant and as an ant plugin. Gradle depends on Ivy which was built to bring Maven's dependency management to Ant.
WildFly is an open source Java EE application server that supports the Java EE 7 spec. Similar to GlassFish. 
So it can run on Java 6 when compiled. 
Reductio ad absurdum. 
Switch on char. switch (s.charAt(0)) { case ...: switch (s.charAt(1)) { case ...: } } A-la-trie implementation. Probably faster too.
That would be truly dire in a some fairly obvious cases. Hashcode is specifically designed to as wide a spread over the integers as possible.
If you type sout in Netbeans it will convert it for you.
It's twice as fast. Hash code = whole string scan (and also **multiplication**); followed by equals = whole string scan again; vs Switch chain (whole string scan) = whole string scan. Altho I guess the switch chain has branch prediction issues... (ofc x86 loves fucking everyone &gt;.&gt;)
I'm with /u/frugalmail. You need a reference. I can't provide proof as to the inaccuracy of your statement, but I find it extremely hard to believe that Maven or Gradle use any piece of Ant's original code. Furthermore, even if they did depend on Ant, the software build paradigms that Maven and Gradle introduce are so different that knowledge of Ant and its libraries are completely irrelevant to modern builds.
"How to terribly introduce a speaker"
Looks like jaxenter.com is the future.
amazing presentation! loved the class path analysis and the cheecky RubyBasicObject cast hahaha
That's something that I have trouble with too. For me its just looks funny, most popular web framework in Java community and yet everyone is OK creating their projects from scratch each time. If you show how to create Spring MVC project to someone from .NET community they very literally just laugh. Having said that, I found the easiest way to create Spring MVC project is by using Spring Tool Suite (Eclipse) IDE menu, then change outdated defaults. After that just switch to your IDE of choice. Many people nowadays recommend Spring Boot, however its not 100% capable in some use-cases. 
Why is ant even still alive? Somebody should have taken it out back and shot it ~~years~~ decades ago.
I've been looking for something like this, thanks!
&gt; Into just sout [JDK-8130086 static-import friendly convenience print methods](https://bugs.openjdk.java.net/browse/JDK-8130086)
Thanks! Very interresting and easy to follow. The "magic" behind string switches was nice to see.
Except that a hash code value for a string is computed only once, because strings are immutable. If you got this string you're switching on out of a map it's already been computed for you. You also need to check length first in your case. Unless you want to catch index out of bounds everywhere. Length is probably a compute once property but is likely roughly as expensive as hash code. 
Very educational talk. But holy shit, that was one awkward speaker introduction!
Presumably there's too much for a tl;dw? Do the things he suggest actually make your code more horrible even if they improve performance?
Then why not use Gradle? It has the same flexibility as ant, even allows you to use ant under the hood if you want, while still allowing you to aggregate defaults and conventions + have baked in dependency management.
TL;DW: * Every feature has a cost. * The JVM, JIT, etc are not perfect. * Don't be afraid to 'look under the covers' to find performance issues. * There are tools to allow you to analyze both bytecode output and assembly language output on your chosen platform, you can use them to make your java code a little more ugly but make it run a little more like assembly.
With that logic, calling methods with a return type without using the value returned should be illegal.
If that is what was meant: sure it's possible - as long as your methods return a value. Because operators, you know, *operate* on values. That said, using it as a shorthand for an if/else block is just lazy and in most cases will violate CQS principle.
Ok so it's not an operator. What repercussions does that have? EDIT: Let's call it a statement.
Just playing devil's advocate here; couldn't void be a legal return type?
What's wrong with it being a statement?
Oh, so code that's functionally identical to if (isTrue()) { doThing(); } else { doOtherThing(); } except less obvious/clear? Maybe because you can just `if...else` to get the same effect *plus* actual readability. OP clearly has a unique definition of "simplicity". Actual simplicity is not attained when there's no more to add, but when there's nothing essential that needs to be removed. Particularly for programming language design, [orthogonality](https://en.wikipedia.org/wiki/Orthogonality_(programming)) is a very useful metric for assessing simplicity. 
maybe legacy, migrations...
What problem are you trying to solve by making the ternary operator into an if else statement substitute? Less typing?
Just read spec for SE 7 @15.25, the only admonition I see is: &gt; It is a compile-time error for either the second or the third operand expression to be an invocation of a void method. &gt; In fact, by the grammar of expression statements (§14.8), it is not permitted for a conditional expression to appear in any context where an invocation of a void method could appear. Without him/her giving an actual example, I think OP is calling void methods, forgetting that the tertiary operator is responsible for returning a value to its caller. Edit: link: http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.25
&gt; ant sucks, but at least it can say its not as bad as Maven For some people the mental stretch is too much, I understand.
Sorry its hard to stretch my brain down to java levels of retarded
Class - class is use to create real time or user defined data type or class is a collection of objects which have common properties . If we define syntactically, class is a collection of member data and member method. 
Look up GUI tutorials.
That's funny, because there are numerous logical fallacies in your statement. You personal anecdote of your "talented team" team could also be popular opinion in your neck of the woods. To me it simply reads ignorance. Your generalization that most tools are made to cover up deficiencies, it's also fallable. So far I see: * Appeal to Ignorance * Anecdote * Appeal to Tradition * Argumentum ad Bacuulum * Argumentum ad Populum * Bandwagoning * Circular Reasoning * Confirmation Bias Now back to the topic. Those that use Maven doesn't imply that they don't have discipline. On the contrary, the plugins that Maven has make it significantly easier to add everything from static analysis, coding standard compliance, popularity ranking, license policy checking, etc.... Maven's build management, dependency handling, and plugin system are pretty flexible, about the only thing that isn't is the lifecycles, but multi-project POMs can compensate for that as well. 
/r/outside
Read more graphics tutorials, like pop up message boxes and input fields.
Well, you've tossed out a whole slew of fallacies but haven't actually backed up any of them. You say my generalization is fallable but haven't given any reason why. The only one that sticks on its own is anecdote... I have to concede most of what I'm saying is anecdotal... but I'll point out that it's anecdotal based on nearly 25 years of professional development experience at all levels (straight developer to architect to team lead) and another roughly 10 years of general software development on top of that. I've seen and done more than most people have frankly... Now, I don't claim that makes me any better than anyone else or any more definitively right on any given topic, but I *DO* claim that my opinions are based on a great deal of experience and shouldn't be tossed aside lightly even if they may sound wrong to you or anyone else. You say Maven has made it "significantly easier" to add things like static analysis, standards compliance, etc. Except for popularity ranking, which I'm not sure I know what you mean, we do all the other things with Ant and it's a trivial exercise. None of it requires more than dropping a JAR or two in a classpath and adding a simple task. There's no benefit to Maven in that regard (except perhaps for there being more plug-ins available, but more on that later). We also have some other teams using Maven who I interact with from time to time and I've seen their build files and they are really no "simpler" than anything we do with Ant. In fact, my argument would be that Ant is SIMPLER because it's more transparent... there's no need to go looking at documentation (in most cases) because it's obvious what will happen when the script runs. With Maven though, since it's largely convention over configuration, if you don't know Maven back and forth you need to go look stuff up constantly. That's less transparent and therefore not as simple. There's a common misconception that you're demonstrating that says things are simpler when you can't see the details. The more abstract, the better. You might be able to argue this is true when everything works 100% like it's supposed to and when everything it ideal. The real world however is rarely that perfect. And plus, just because there are plug-ins to do a lot of things you may want doesn't automatically make any given build tool better than any other (it MAY, but you can't make a generalized statement like that without knowing a lot more details). And once you start talking about multi-project POMs, which is something I've seen, any hope of simplicity you might have had starts to go out the window in a hurry, and that's really the crux of my problem with Maven: once you start to try to (a) work around any problems you might run into with it or (b) stray from the exact path it prescribes, you start to lose any of the benefits it may have had in the first place. Ant, on the other hand is quite transparent and is no less straightforward than any actual code you're trying to build. I do of course have to leave room for the possibility of writing crappy Ant scripts that are total messes... some people absolutely manage to do that... but again, talent and discipline tends to alleviate that concern.
I'd add some more specifics. * String in a switch isn't as efficient as an enum or a number * invokedynamic is more efficient than loading anonymous classes, but lamba have issues with many callers and targets
Yes, but in that case you're just trying to assign values to a variable -- that is, you're trying to use a ternary expression as, y'know, *an expression*. OP is proposing using a ternary as a standalone statement; so something like this: boolean isTrue() { // returns a boolean based on some condition } void doThing() { // some side effects happen, nothing is returned } void doOtherThing() { // some different side effects happen, nothing is returned } public static void main(String[] args){ isTrue() ? doThing() : doOtherThing(); } No variable assignment, no values returned, nothing but side-effects that could be more clearly written as an `if...else` statement. OP wants to use ternary *expressions* as *statements*; for more on the distinction between expressions and statements, [this](http://stackoverflow.com/a/4730559) is a pretty good start.
Totally wrong subreddit. **Post removed**
Java handler and groovy handler can also be used. We use Unsafe API to do copy things. e.g. Strings in jvm will be decoded into global ByteBuffers and Unsafe API copies these ByteBuffers to jni/c level. By our tests the copy cost is very low compared with IPC (interProcess Communication).Note that java socket/NIO APIs also need copy jvm data to jni level. So nginx-clojure won't be slower than java build-in socket and obviously faster than nginx + outside java HTTP server. BTW another case is use nginx-clojure to implement a dynamic proxy or balancer because most of things will be done by nginx itself, in jvm we only set host/url to nginx variables, this way is more better than to implement a complete dynamic proxy/balancer by Java/clojure.
This doesn't seem to be much use. Why make certain features backwards-compatible but not others? That just makes integrating libraries a nightmare, because actually, oh, it uses some features that work and some that don't! Like, I can use String swtich statements, but not the Path library? Yikes.
I work with an older JBoss legacy web app, I think it's pretty neat, actually. It's nowhere near 40 nodes though. What kind of pains have you experienced?
Thanks for the link!
EU citizen?
At least with Ant, I get to debug where my builds fail, instead of reading endless stream of error messages. But what I really hate is Gradle and how it makes my CPUs go full throttle, if it wasn't for Android I wouldn't even care.
Ours is anecdotal and we're still small and growing so take it for what it is. It wouldn't be difficult to set up some load testing of routes and then also load testing Ebean as well. I agree it would be nice if there was more documentation on Play's website. I've found most tech/framework websites to be lacking in one aspect or another (just so happens this is a pretty important one and maybe it's there, but buried).
Brace yourself! Downvote from Java EE people are coming! Anything spring in this subreddit will be downvoted like hell.
And the spring people downvote Java EE stuff...
So, style question. Assuming you use these methods where appropriate/simple enough to solve the problem, and implement a custom interface where you use querydsl or whatever to implement more complex methods... do you name your methods similarly to the auto-implemented methods, so users of the interface don't have to care about what implements them, or do you name them differently, to identify that they are "custom"?
Yes
Do you really find isTrue() ? doThing() : doOtherThing(); that much prettier than if (isTrue()) doThing(); else doOtherThing();
http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.at-query Think that's how your supposed to do it, but I've just been stuffing them in separate repositories, becuase those tend to be complex join statements that would involve multiple jpa model objects with custom returns I'm copying from someone elses legacy garbage anyway. You can use these for joins too, if you have good jpa objects, but it kinda starts feeling mindfucky. http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.query-property-expressions
I haven't found a use for @Query. Everything simple enough to write as a one-liner, I can do with a query method, and anything harder than that, I'd rather use QueryDSL than hardcode the SQL. Maybe my question wasn't clear (understandable, it's a pretty fine point, and maybe I'm just splitting hairs). I was just curious about others' approach to naming methods they implemented themselves, as opposed to methods that Spring Data auto-implements.
Impressively bad advice. Create a whole class, and presumably a set of unit tests, in order to change a static compile-time dependency on a constant string into a static compile-time dependency on a class. Then go on to (probably correctly) argue that the extra overhead won't matter, while ignoring the fact that you haven't in any way actually solved or mitigated a problem.
I swear this guy is just saying crazy shit on purpose at this point.
Jeeze... An hour though... I'd rather read an article ...
Relevant: https://github.com/rholder/guava-retrying
It still works well for writing Java apps.
I agree, you really need to work to make you site stand out among the dozens that are posted and linked to regularly. It won't be an easy thing to accomplish. I wish you luck in your endeavor.
Yes, it's the future of java desktop applications, swing should be deprecated in place of JavaFX. What you might be alluding to is a paradigm shift where more and more applications are web based, thus the declining trend in these technologies.
&gt; https://github.com/rholder/guava-retrying Looks similar. Differences: Recurrent doesn't require Guava or Java 8 (though its API integrates nicely with it), and it supports async retries.
Ah, but embrace the *power* of the 2x playback speed in YouTube. It has changed my life when someone sends me a long-winded talk. I grant you, it'll never be as accessible as an article, but if it's a choice between skipping the info and wasting only 30 minutes of your life, I'll usually take the latter.
Got one in mind? A site like DeviantArt works for javascript. 
You sound like you haven't yet gotten that joke. He's trying to make fun of enterprise development.
Why should you never pass around implementations? And why should you avoid arrays and depend on the Collections API? Newbie here, genuinely curious.
I see your point and I understand. In your situation though you shouldn't expect progammers to be able to solve a system outage. That is an admin function and programmers would be just as useless as anyone else. 
Well, if you want to write cross platform desktop apps JavaFX is going to be something you should be interested in. I know everyone today is gaga over the web 2.75 or whatever. Just like everyone was gaga over the web 1.25 in the 90's and "thin client" became a buzz word again(like it did in the 80's with mainframes). But the desktop and desktop apps are here to stay and a lot of people need good libs to write them. C# is wonderful for Windows apps and won't be replaced anytime soon. GTK cross platform isn't really going anywhere. Qt is really nice, but hasn't seen much adoption for whatever reason(maybe the licensing). I've seen some web frameworks being hacked to work on the desktop(Atom IDE uses this), but they're really slow and overly complex. Many devs are going to engines like Unity for writing cross platform apps, even though it's technically a gaming engine. And Java Swing is just ancient. So yeah, JavaFX is really needed. Particularly if it allows you to create nice looking interfaces, that performs reasonably well without a lot of effort and brings in some 3D with it.
Still? If I remember correctly OpenJDK only got it with Java 8 last year. 
In what framework. Swing?
Yeah, swing would be great.