Were you tormented by a compiler that couldn't make forward references when you wee young? j/k
I think the majority prefers IntelliJ. I've worked with both (more with Eclipse overall, but switched to IntelliJ quite a while ago) and it's definitely leagues ahead of Eclipse in many departments (like refactoring, general understanding of the different parts of a project, popular framework integration). I liked parts of Eclipse's Maven tooling and SVN repo browsing better but it's minor stuff really. Eclipse has the advantage of being completely free. If you're already familiar with a JetBrains IDE I'd definitely advise to stick with IntelliJ.
Obvious, "industrial" java is a bit differrent than android java. You should look at android as a framework. But this difference could be eliminated pretty easily: you should understand the basics of language and here good-old Bruce Ekkel with his "Java Pholosophy" will help you. Since you know language syntax it won't take long time to read this book. Next step, in my opinion, will be understanding java 8 basics. "Java 8 in action" is a book, that will help you here. From this point you could easily land your junior job (actually understanding java 7 might be enough). And of course Spring framework will help you to grow into enterprise developer. "Spring in action" (latest edition at this moment is 4th) could guide you through the bloody enterprise world.
I think, http://www.deadcoderising.com/ can be added to the list.
See the **sidebars** of /r/javahelp and /r/learnjava. Plenty free and high quality resources there.
The author might be opiniated, but the pattern name is correct. You can find more infor about it. Also: http://blog.jhades.org/open-session-in-view-pattern-pros-and-cons/
I think /r/javahelp may be better suited to your needs.
You might be onto something.
This certainly works, and with Oracle JDK or OpenJDK: http://aparapi.com/introduction/getting-started.html It runs Java on OpenCL which means even on AMD and newer Intel GPUs, on CPU trough OpenCL and in worst case on a Java thread pool. Which is useful, since its possible to debug the Java code before letting it run on the GPU.
I think that if you use docker for mac hitting either via the ip or localhost should forward the requests to the container as long as the necessary ports are exposed in the compose file. I can't tell you with 100% certainty as I don't own a mac but pretty confident it should work :) Send me a private message if you run into issues. 
the main ones I know are: * framework * boot * data * security * social * batch * amqp * cloud you really just have to use them to understand whats going on and how to integrate with it. The best way to learn something is to have a project that will use one of these modules. 
It isn't going to be easy, but you can do this. Start small and get a simple GUI working. Then build from there. From this you can at least get a passing grade.
That's true, Vaadin has the right idea by trying to make the client-server divide as invisible as possible. A few months ago I started work on a web framework that did something similar, but with a few differences: * Implemented in [Kotlin](http://kotlinlang.org/) * Uses new coroutines functionality in Kotlin 1.1 to make asynchronous code look like synchronous code * Easy to add to an existing project, it's just a library, no need to reorganize your project to suit it * Very light-weight, unlike Vaadin it doesn't tie you to any UI model, meaning that... * You can use it with any JavaScript UI framework * A flexible plugin architecture which can be used to provide direct support for any JavaScript library It's called [Kweb](http://kweb.io/), check out out. However, all that being said - if you need a web framework today and like the sound of kweb you should use Vaadin. Kweb is still at an experimental stage of development, so it is currently missing important functionality.
Are you hard set on Java? I've recently started learning [Kotlin](/r/kotlin), a much simpler and safer language IMO and it's also available on Android
Question to somebody that tried it, how's the security done? How difficult is the debugging? Do you have to fight the framework when creating complex views?
What are your thoughts on future of Kotlin in SW Dev?
Java will be much more popular than Kotlin for a long time. It's a great language, but I think from a career perspective you will have a tough time if you are sold on Kotlin over Java. 
OK thanks!
You can use spring security or anything like shiro. But ideally Vaadin is used for web apps not web sites
Umm, 21 years experience. Some APIs I can use in my sleep, and it gets really boring just typing in the code. For newer APIs, e.g. NIO, which I've rarely used, I just Google and copy and paste. I have the experience to tell whether I'm copyng and pasting the right thing! I use IntelliJ IDEA which does a lot of code completion for me, so I need to remember much less than I ever used to. It feels like cheating, but it's just the new way.
Vaadin is dope.
If you are going through the effort of bringing Kotlin in, you might as well use it fully. The only real reason I can see to go halfway is to try and convince a team who would rather stick with Java. This could work but it could also backfire as they may get a bad impression for the challenges of trying to mix languages.
I feel like that is Kotlin's strength though. Being able to do the mixing. I would rather use a data class than say Lombok. I would rather use some of the Kotlin collection extensions than bring in Guava. Examples like this are, IMHO, where Kotlin starts to really shine. 
Heavily using Java for 4 years now, I'll only find myself using Google generally if I'm looking up the correct way to do something. Other than that javadoc tools and the built in IJ decompiler are generally enough to keep me going. After trying to make a modified javac based compiler and AST modification library I can safely say that until you're messing around with internal APIs then it's pretty consistent throughout thanks to JLS
Yup, I've got an application built using Vaadin which started a couple years ago and is still under active development.
Server-side debugging is easy, if you run the localhost version through your IDE. You can of course do remote debugging too. Client-side debugging needs a bit more steps, but works easily at least in chrome using source maps.
Are you on Linux? Did you try with latest X/mesa? a memory leak in mesa using certain X versions was fixed around November 2016.
Our dev environment is just a kubernetes cluster. For running stuff locally I just spin up the services in my IDE; they connect to a Cassandra instance I start up in Docker. Most of the testing is done in our tests though; in our integration tests an in-memory Cassandra is spun up and other servers are mocked out. So I very rarely need to spin up a service of mine on my local machine. 
Pretty good, tbh. Jetbrains is, of course, pushing pretty hard, all the new code they write is in Kotlin. Gradle is also adopting it; you can now write your build scripts in Kotlin. Also some big companies are adopting it and there's tons of OSS libraries already out there.
Ugh 6 years into development and I have never used a finalizer in a real project... has anyone?
For the IBM stuff you need to use Streams, for the Aparapi call the library's own Kernel class. That's also just Java code.
To be honest, I didn't even know this was a thing. The only time I've ever done any manual resource management is closing streams after using them.
Has the JDK actually had any deprecated methods ultimately removed?
Ok, nice to see that you're satisifed :)
GWT is an open source project, and it's very active. It's still used internally by Google, notably in AdWords... their main revenue source. There are many GWT third-party frameworks, so it's pretty rare to use GWT by itself. I personally use and love SmartGWT.
Paste this simple snippet to expose your Java application to yet another unnecessary vector of attack
Can't you make it `AutoCloseable` so the caller can use try-with-resources? Or is the object typically long-lived and won't be released in the scope it was created?
In 21 years of development, I have only used it once. It was not for the closure of resources though. Our more specifically, it was used to detect no-closure of resources, leaks. This was for very early code written before we had nice frameworks to handle our database connections for us. 
If this post had some pretty big warnings about how dangerous this is I could see it as a 'joke'. But currently it's basically telling you to eval() a [piece of JavaScript](http://nudge4j.appspot.com/n/n4j.js) downloaded from the internet that both "phones home" and then **downloads and starts a server** ([this code](https://lorenzoongithub.github.io/nudge4j/)) on your machine. This isn't just advertisement, it's simply malicious. 
Updated, https://github.com/nirodg/easyrs/tree/dev/spring2 
Okay, it's true internet security is important. Probably comments like yours are just populism,demagogy and plain wrong. So how is it different from downloading a jar from Maven Central and or other places ? All source code is on github and the JavaScript is plain text code. So you can inspect it. "phones home"... just rubbish 
It is trust. I trust maven central to not change the code under my feet. With this method... not
I live off google and stackoverflow. There's simply too many frameworks/apis out there now to keep track of in your head. &lt;sigh&gt; I miss the old 8 bit days. ;)
I thought this was an interview question at every job ever. "What is the difference between final, finally, and finalize" 
Tiny jar?
I'm using it for detecting unclosed resources, as well, and I don't see an alternative. My library uses pooled connections where when a connection is released it immediately goes back to the pool. I can't rely on some easy "boundary" to flush resources. The best I can do is write in docs everywhere **with big bold letters** that people must use `try (...)`. What does your framework do?
That's true, the reason I can't use setters for things like `text` is that the get() and set() methods of a property must have the same type. While the "set()" version of the setter would be fine, the "get()" implementation of this setter would need to return type Future&lt;String&gt; (because of how kweb handles asynchronicity). This can't be done with a single getter/setter property. ie. you can't do this? p().text = "hello" val k : String = p().text // we can't do this, p().text would need to be of type String, but // we need it to be type Future&lt;String&gt; In the next release, which is a major refactor of how objects are created, the syntax gets a bit cleaner: doc.body.new { future { p().text("this is an example HTML paragraph") val k : String = p().text().await() } } 
Despite I know the difference, I still feel like the only proper response is to smack the interviewer and walk out.
[6 methods](http://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-B96BD00F-12A4-493A-9907-2FFE8DA6748C) were removed in Java 9 to fix module deps ;) @Deprecated annotation now contains "forRemoval" attribute so there is a hope that [more stuff](http://download.java.net/java/jdk9/docs/api/deprecated-list.html) will be removed in the future...
This was written back when I was relatively new and in Java 1.4. So no lambda. Doesn't matter, that code is gone now. 
Guess I should have said, I didn't. :)
We use hibernate or mybatis. We take resource allocation out of the hands of developers. 
You still manually close sessions in both. 
What is Tiny Jar?
I was not aware that _tiny jar_ was a common buzzword. But in that case is tiny smaller than thin and what would a thin jar be? 
I read the article, and what it does is the first time you launch the Spring Boot Jar it will download the dependencies instead of having to include them at build time, is like including something like Bundler from Ruby or NPM in node, it has potential.
Sure, then this story is just Big Whoop. finalize will continue to work, developers have been instructed not to use it for years, now it is just officially marked as such.
Why do we keep allowing obvious promotions like this post? All this user does is promoting Vaadin.
In some cases construction is not guaranteed to be done only once, so if you do anything in that it could be eventually expensive (doing expensive stuff in your constructor is generally wrong in the first place) but stuff like initializing empty arrays or collections is a valid default state. In other cases, the expensive stuff could be extracted in a special initialize method which is executed after construction encapsulating the expensive parts. 
we provide a cloud service but it requires communication with a client device connecting the desktop through COM port. Currently we are using applet as the bridge. Any suggestion to replace applet if it's not supported anymore?
It does matter. Code out there uses it. Libraries use it. If you have never ever heard of finalize, I don't think you have a very deep java Knowledge. Which may be OK for some positions, but not for others.
One use-case for an init method are circular dependencies between objects where A has a reference to B and B has one to A and only one of them can be constructed knowing about the other. edit: if you can avoid it, you certainly should. If there's a way in which you can reduce potential wrong usage, be it a wrong method invocation order or a lack of invocation of a method. The best way is always building things so that the user cannot run into the error cases.
&gt; Yes, but no one can be expected to know every obscure part of a language with a huge standard library. Agreed. But if I ask you about 4, 5, 6 "obscure" parts of java.. let's say * Finalize * CMS GC * G1 GC * Static inner classes * Reflection * ConcurrentHashMap And you know 0, you seem to not know much about Java. It's not a "miss 1 question you are out", but it is a reasonable question as part of a larger set of questions. &gt; Fair enough, but testing the knowledge of the standard library is not a good test for intelligence in that case. I did not say it was. I said I look for people to be smart. I would not ask Java specific questions in the be smart portion of my interview.
CDI beans with constructor dependency injection.
When we were forced to used this in school at leat I could kill time with rearranging the classes so that no two lines cross.
I still don't get it.
Vaadin has been along for far longer than GWT. Before GWT the client-side (browser components) were written in JavaScript, then GWT and now migrating to Polymer based components. For Vaadin Framework users, the programming model has stayed the same (which can't be said by many other frameworks given its 15+ year history). Otherwise the user base is solid and growing. Large companies building new business internal apps on it and over 150k developers using it monthly.
Java class graph theory... 
Generally, Spring Boot applications package all the Spring dependencies and Tomcat in your JAR, generating a ~13+ MB JAR for 5KB of business logic. That way, every time you spend time just zipping all the dependencies. Working with Docker it is quite uncommon to package your infrastructure with your application via your build tool if Docker can do that more efficiently. Spring Boot currently allows the generation of deployable WARs thus generating a WAR without Tomcat, but that still packages all your Spring dependencies, while they will not change if you do not decide to change your Spring Boot version. To elaborate that in some numbers: * Default deployable JAR: **13 MB** containing Servlet Container, Spring Web dependencies, and business logic * Deployable WAR: **10 MB** containing Spring Web dependencies and business logic * Pure business logic: **3 KB** * Deployable "thin" JAR: **9 KB** containing special Spring Wrapper and business logic For further information, you should read the [corresponding spring issue](https://github.com/spring-projects/spring-boot/issues/1813) and the [How It Works section](https://github.com/dsyer/spring-boot-thin-launcher#how-does-it-work)
[Play Framework](https://playframework.com/) is what I work on. [Java REST API example](https://github.com/playframework/play-java-rest-api-example) shows off what you can do with Play. I demoed this at Devoxx US last week, there's a blog post coming. Here's the write up I did on the [scala version](https://developer.lightbend.com/guides/play-rest-api/#when-to-use-play). Best way to implement authentication -- depends on your use case: [Play Authenticate](https://github.com/joscha/play-authenticate) or [Deadbolt 2](https://github.com/schaloner/deadbolt-2-guide-examples/tree/master/auth0-integration) or [Pac4J](https://github.com/pac4j/play-pac4j). Templating is done with [Twirl](https://www.playframework.com/documentation/2.5.x/JavaTemplates). Unit testing is standard JUnit and some [helpers](https://www.playframework.com/documentation/2.5.x/JavaTest). Persistence: [see the example](https://github.com/playframework/play-java-jpa-example/tree/master) for JPA, NoSQL there are many options, [Jongo](https://github.com/alexanderjarvis/play-jongo ) for MongoDB -- see [the module directory](https://www.playframework.com/documentation/2.5.x/ModuleDirectory) for more. 
r/cscareerquestions
Ok...
As evidenced by the being no C++ programs with memory corruption bugs? Oh wait, those are totally a thing. Give me real memory management (that is, full garbage collection with heap compaction) or GTFO.
&gt; To Dalvik, there is simply no such thing as a function name by its own. Neither is there in Java *(at runtime)*. [The full descriptor is used.](https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.4.8) &gt; And here is the clue: the entire signature is being used including the function name, the argument types *and the return type!* Additionally such a renaming pattern isn't native to android. Obfuscators like ZKM and DashO can do this. I can provide some samples later.
Does not handle that well at all. Given it's a server-side framework the state of the app is on the server. That said, we believe in PWAs (Progressive Web Apps) and building on top of Polymer elements (https://vaadin.com/elements) makes it possible to build part of your app in client-side and have it run offline and when you don't need it just be faster at development by not having to do client-side stuff for the rest of the time. That said, there are a few cases where people have made hybid (client-side&amp;server-side) apps with GWT&amp;Vaadin: http://demo.vaadin.com/parking/
I think you've misunderstood. &gt; Some set implementations have restrictions on the elements that they may contain. For example, some implementations prohibit null elements, and some have restrictions on the types of their elements. Attempting to add an ineligible element throws an unchecked exception, typically NullPointerException or ClassCastException. Attempting to query the presence of an ineligible element may throw an exception, or it may simply return false; some implementations will exhibit the former behavior and some will exhibit the latter. More generally, attempting an operation on an ineligible element whose completion would not result in the insertion of an ineligible element into the set may throw an exception or it may succeed, at the option of the implementation. Such exceptions are marked as "optional" in the specification for this interface. `java.util.Set` is a guarantee of an interface, not an implementation. The "optional operations" listed mean that implementations can either throw an exception on an invalid parameter or silently complete. You need to check the documentation for your chosen implementation to find out which.
It's dependent on the implementation, a good case in which you wouldn't want to implement that method is an immutable set. [StackOverflow](http://stackoverflow.com/a/8375663) comment on this as some more expanded answers.
Too bad tar is taken.
I'm sorry, how is this like Javascript? I have an interview tomorrow...
I think I learnt it coming from C++. Asking about deconstructors, we were told "don't do that; it doesn't work how you think it does". If I'd come from another language I don't think it would have occurred to me.
Yeah I'm afraid the boring reason is that it's a play on words from the mid-90s. Java. Beans.
Yeah, a bean seems to be nothing more than a class file which I didn't see get called a bean when I was learning Java SE (Although I didn't use Oracle Tutorials for SE) and I get the coffee thing lol. I just don't really see the point in switching up what its called so often unless there is some legitimate reasoning that will be explained later on. Without any solid "grounds" for that (haha), they are really just making it harder to comprehend.
The official Oracle documentation is pretty careful about how it uses terms. Keep the terms and concepts separate. The terms refer to different things. Many classes are not Java Beans. In fact, most classes are not Java Beans. Classes are classes, Java Beans are a specific type of class. Enterprise Beans are objects that implement the Enterprise Java Bean spec (more commonly called EJB) They are used in Java EE, not in regular Java (that is, Java SE). The "enterprise bean class" is a reference generally to the bean as code. Hope that helps!
&gt;So if you didn't know how to drive a manual transmission you'd think those were bad too? Manual transmissions are fragile, inefficient, and obsolete, as are the combustion engines that require them. Also, manual transmissions leak implementation details through their user interface. I don't know how you run your projects, but if I'm in charge, that kind of shit does not fly. Bad example. &gt;Some people don't like having their hands held. Those people are arrogant and dangerous. I'm sick and tired of scrambling to patch yet another stupid memory corruption vulnerability because some jackass thinks he's hot shit and doesn't need memory safety. **Everyone** needs memory safety. The CVE database is *littered* with evidence of this fact. Grow up. Stop circlejerking over C++'s nonexistent benefits. Use a language with real memory management. Until you do that, you are a menace to everyone who runs your code.
Some frameworks require and use a public nor argument constructor and then set fields through other methods or reflection. It's not exactly the same idea but sort of related.
In particular, I believe beans need to follow the following standard (that I conveniently stole from Wikipedia) &gt; They are serializable, have a zero-argument constructor, and allow access to properties using getter and setter methods. It's not a very big standard, but it's a standard nonetheless.
&gt; Manual transmissions are fragile, inefficient, and obsolete But hot damn they're fun and often required if you want to squeeze every ounce of performance out of your motor (think F1 race cars). It's nice to have the freedom to do so. &gt; Everyone needs memory safety. Not disagreeing with you. How does C++ or any language prevent you from having memory safety? People write memory managers all the time. &gt; I don't know how you run your projects, but if I'm in charge, that kind of shit does not fly. My projects run quite well. Thanks for asking. &gt; Grow up. Stop circlejerking over C++'s nonexistent benefits. Ad hominem? C'mon, you're better than that. You've made your argument so well that I'm sure you'll be able trying to convince those neanderthals at EA, Valve, Unity, Disney, and every other company that uses C++ every day to switch to a managed language like Java or C#. I don't know why they haven't seen the light yet when the benefits are certainly obvious. I use C myself because I'm an embedded developer. I manage my own resources because I *have* to and I'm a better engineer for it. Yes it's nice when the framework takes something off your plate but I've seen too many engineers who only know how to paste code and don't really know what's going on under the hood. Qt is a fine library for UI development and I'd much rather use it than a hog like Swing or JavaFX. Why? Because I believe a visual application shouldn't need gigs of memory to perform simple tasks. It really just comes down to the fact that some people want more efficiency and control over their software. Lower level languages offer that. Yes it comes at a cost and it sounds like you've had to mitigate that cost more than once, but does that really reflect on the language or the developer?
Idk about Haskell, but Rust doesn't have overloading.
I mean, it lowers the file size significantly due to needing less UTF8 constant pool entries. Not sure if name length affects performance that much.
I think my question has been misunderstood because it wasn't descriptive enough. Say you have a library method that doesn't say anything about its implementation and returns a Set. Would you call add on this set? You can't tell from the docs if this method is returning an immutable or mutable set.
[removed]
This seems overly hypothetical. But no, if you don't have docs it's unlikely​ I'd use your library given how mature the Java ecosystem is and how many set implementations already exist. I'd question in this hypothetical why some big library would use something other than Guava or the standard library. Fortunately decompilers are a thing so a user could somewhat see what's going on if they're interested enough. But the selling point would need to be pretty high to get to that level.
Implementations that don't support certain operations generally are asked to throw a UnsupportedOperationException so you could try/catch for that if you wanted. For example, the Set was run through Collections.unmodifiableSet so that Set no longer has an #add method you can call. 
I say please *do*
It's not about which implementation. Rather about the deficiencies of the java collections lib where it does not have a immutable collection so I separate from the mutable one. In this hypothetical sure I could read the code and see which implementation is being used but the author wouldn't be at fault for changing it on me because the only binding contract is that it is a Set. 
Ok, I kind of get where you are going with that. I have also done a little bit of side research and came up with these two descriptions. &gt;JB &gt;A JavaBean - a bean - is a reusable software component that can be visually manipulated in a builder tool. Builder tools help you assemble applications by visually connecting beans. This doesn't mean you can't build applications in the conventional way. If you prefer, you can hand-code applications by using beans. When you build applications by visual connection, no coding is involved (though in semivisual tools you may have to write some code).Builder tools also help you customize beans visually. Once customized, you can save beans as serialized prototypes (.ser files). When beans are part of an application, they run just like any other object. They are instantiated differently, though, as saved beans have to be resurrected from their serialized prototypes. &gt;EJB &gt;An Enterprise JavaBean - an EJB - is a reusable server-side software component. Enterprise JavaBeans facilitate the development of distributed Java applications, providing an object-oriented transactional environment for building distributed, multitier enterprise components. An EJB is a remote object, which needs the services of an EJB container in which to execute. Those came from [http://java.sys-con.com/node/36515](http://java.sys-con.com/node/36515). I am starting to get the concept, I now think that Oracle just made a really poor choice in how they termed these items. It makes things quite confusing. Anyways, thanks for the explanation. Edit: Some words
You could look at the *javah* command, which generates JNI headers from compiled Java classes. Alternatively, a time ago I did something similar, but in Kotlin. Uploaded the source code [here](https://pastebin.com/sjbJqB7d). For example, if you call: generateJniSignature("char[],int,int", "void") *(where the first parameter is the method argument types and the second parameter is the method return type)* It will generate: "([CII)V" You could adapt it to your needs. It's not battle-tested, though.
Check out [this post](https://bukkit.org/threads/oops-i-didnt-break-your-plugins-ambiguous-gethealth.156975/) for a brief explanation of the first time it was used. As for a more technical explanation: * Minecraft switched its health system from using integers to doubles. * Everywhere that integer health was returned or provided as a parameter we replaced that method with [_INVALID_methodName\(\)](https://github.com/Bukkit/Bukkit/blob/master/src/main/java/org/bukkit/entity/Damageable.java#L20). * New methods were added for handling health as a double. * During the compilation of CraftBukkit, the implementation of Bukkit, we used [Overmapped](https://github.com/Wolvereness/Overmapped) to rename _INVALID_methodName() back to methodName(), restoring bytecode compatibility. Developers build against Bukkit rather than CraftBukkit, so they just saw both _INVALID_methodName() and methodName() when they compiled their plugin. At runtime, because the methods are identified as methodName()I and methodName()D, both new plugins referencing the double methods and old plugins referencing the integer methods are able to function. 
I liked the article and hated the title. It's actually a list of valid cosiderations to make before deciding to go with microservices, not some hate/flamewar kinda thing.
Care to explain why?
Thank you for the response. I was actually looking for something similar to your second approach, but in normal java syntax.
wtf. why would you change your API from int to double all of a sudden? What did they need to represent that they couldn't with an int? Talk about code smell...
&gt; While I can read today's implementation, it doesn't break the contract if tomorrow the author returns an immutable set. THAT IS NOT YOUR RESPONSIBILITY. While my previous answer is correct, you simply just don't do it because its not your responsibility. If you need an implementation that has those optional features then you put it in the documentation for whoever is going to use it. Edit: For using a library, how could it happen if you never change the version. Third party libs break their backward compatibility all the time but it has nothing to do with how you should code.
&gt; I now think that Oracle just made a really poor choice in how they termed these items. It's a play on Java referencing coffee. Ever notice the logo? Java &gt; Coffee &gt; Coffee is made out of beans &gt; Beans. 
&gt; why would you change your API from int to double all of a sudden? It's not an API. It's the internal code. 
I was in that pretty rare part once ;) We had a project with Spring and pure GWT. I believe over 3000 Java classes on front-end side only. There was a custom crud engine with quite elaborate stuff going on, but since it was Java it was much easier to refactor that automatically than it would be the case with JS.
&gt;But hot damn they're fun Driving a slow car is your idea of fun? Combustion engines are pathetically slow compared to electric motors. Also, the noise they make does not say “powerful” to me. It says “wasted energy”. &gt;How does C++ or any language prevent you from having memory safety? Memory safety requires strict enforcement. C++ does not provide that enforcement. You are perfectly free to scribble all over your heap and stack. The language will not try to stop you. Nor will it make you explicitly say that “yes, I know this section of code is unsafe, and yes, I know what I'm doing.” &gt;My projects run quite well. When's the last time they got audited for memory corruption bugs? &gt;You've made your argument so well that I'm sure you'll be able trying to convince those neanderthals at EA, Valve, Unity, Disney, and every other company that uses C++ every day to switch to a managed language like Java or C#. I don't know why they haven't seen the light yet when the benefits are certainly obvious. I do: inertia. Most of the libraries used for game dev (physics engines, etc) are C++, so game dev in any other language is much harder. That doesn't mean C++ is better, only that it's popular. &gt;I use C myself because I'm an embedded developer. I manage my own resources because I have to That's a reason to use C, yes. It's not a reason to use C++. I'm under the impression that you usually *can't* use C++ for embedded dev anyway. &gt;Qt is a fine library for UI development and I'd much rather use it than a hog like Swing or JavaFX. Why? Because I believe a visual application shouldn't need gigs of memory to perform simple tasks. Then you'll be pleased to learn that Swing and JavaFX don't require gigs of memory for simple tasks, either. On my machine, JavaFX Ensemble uses 117MB when first started (to the main menu screen). As usual for Java, this will rise and fall according to GC settings. Note that JavaFX on Linux has had a number of memory leaks, at least one of which was apparently due to a bug in Mesa. The software renderer (`-Dprism.order=sw`) does not have this problem. &gt;It really just comes down to the fact that some people want more efficiency and control over their software. Efficiency is **not** more important than correctness. Again, much of the CVE database demonstrates this point. &gt;Yes it comes at a cost and it sounds like you've had to mitigate that cost more than once, but does that really reflect on the language or the developer? The pattern is quite clear. When code is written in C/C++, memory corruption bugs happen. When code is written in a memory-safe language, they don't, because they can't. So yes.
There are two ways how to deal with such a library. 1) You trust the library developer. I would expect the set to be mutable. If it is immutable, the documentation of the library method should point that out. So, I would just call add on that set. Also, I would expect that the developer does not change the implementation to return an immutable set in a non-API breaking update to the library. 2) You don't trust the library developer. But you still want to use their library. In that case I would write a unit-tested wrapper around the functionality needed by your application. If the current version of the library returns a mutable set, your wrapper can just pass it along. If a new version of the library is released, you can test it with your unit tests. If the new version of the library method returns an immutable set, one of your unit tests should fail. You can stick with the old version of the library or update your wrapper to create a mutable set with the same contents as the set returned by the library. You should even be able to replace the library with one of its competitors by writing a new wrapper.
Is there a difference to POJO?
w00t! Nice!
[JBoss also has a tool called bridger for this](http://word-bits.flurg.com/presentations/bytecode-hacks/index.html#/1)
I'm sorry but the number of start ups I have seen with 2-3 engineers and 10-15 micro services with no dev ops is just ridiculous. You are wasting so much time dealing with network boundaries, logging, debugging, cost of servers, having non dev ops people do dev ops. There is absolutely no reason you can't write microservice ready code but deploy it as a monolith. As your team, scale, or business requirements change then you can split into individual services. 
[Already submitted](https://redd.it/625eze)
Ideally the API you're getting the Set from would tell you in the doco whether you can change the Set or not. Java is indeed deficient in not allowing you to put it in the type signature of the API.
A debugging tool might help you a bit there. It's not THAT time consuming and it's probably a good idea to check out the code of the frameworks you are using, including Java libs themselves. Also the faster you can understand other's code the better. It's a learned skill and usually you will run into things that are not provided/bugged in the library and decide to patch them and submit a pull request.
To my knowledge there's no thing.
A somewhat related question - what is the justification for the design decision of optional operations? Isn't it breaking the concept of interfaces and contracts? Why not make separate interfaces instead of having to rely on implementation or risk exceptions at runtime? 
In theory you can write a 'good' modular monolith. In practice this really doesn't happen. When there is no real distinct boundary developers, often under time pressure, tend to take short-cuts. This is my experience at least. Also you really should pick a better title. With this title, no matter the content (which doesn't really match my experience with both microservices and monoliths anyway), you're polarizing the issue when in fact we need balanced views based on experienced on this subject.
&gt; I'm sorry but the number of start ups I have seen with 2-3 engineers and 10-15 micro services with no dev ops is just ridiculous. What do you mean with "no dev ops"? Are you sure you don't mean CI instead? We're with 4 back-end developers and handle somewhere around that many microservices too. &gt; You are wasting so much time dealing with network boundaries, logging, debugging, cost of servers, having non dev ops people do dev ops. I don't see how any of these are microservice specific issues. In fact I think most arguments in your post stem from organizations with rather low software engineering maturity. If you build complex stuff and don't have your shit together you're going to end up with a pile of garbage anyway, no matter whether it's a much of small or one big service. &gt; There is absolutely no reason you can't write microservice ready code but deploy it as a monolith. As your team, scale, or business requirements change then you can split into individual services. This is something so many people claim. But if you look at examples of companies that took this approach and ask them how the split went they are always "in the process of separating functionality into separate services". I haven't seen a single blog post that explains how they had a really excellent monolith that they were able to split into microservices in just a few sprints. They're always "in progress of". Starting with a monolith and then splitting is pure theory. While doing microservices is actually done in practice and there is a ton of good information about the pitfalls of microservices that doesn't start with "Don't".
Didn't write it just read it and thought it was good. You can make boundaries in many different ways though. It doesn't need to be a service. You can have a team that only writes utility code. That's not going to become a service. Microservices are great when there is a purpose, making them just because is a terrible idea.
Oh, in my company our developers also stick to Kotlin! Among the other reasons named, they said: 1)Kotlin requires less code to write. At least 20% less. As it was previously mentioned, 22-year old Java is a bit outdated already + Oracle created Java to be a backward compatible language, which basically, means that every newly launched version has to support the features included in the previous one, and as a result, with every update it becomes harder to include some new features; consequently, the amount of code to write also increases. On the contrary, Kotlin’s architecture was created from scratch, causing the absence of layer to layer architecture. 2)Kotlin is a type-safety language. Discover why and 2 more reasons to use Kotlin on our blog https://themindstudios.com/gblog/kotlin-vs-java-will-kotlin-replace-java/
Ah sorry, thought you were the author. &gt; Microservices are great when there is a purpose, making them just because is a terrible idea. Microservices are not a silver bullet, I totally agree on that. Especially for relatively simple applications where you can normally guarantee transactionality it often makes much more sense to go for a monolith. But moving from a monolith to microservices is something that's much harder than most people pretend it is. 
IMNSHO this is a poor practice IF the compiler lets you do something that can be described as weird/impossible/insane then write a comment explaining why its working. 
Most probably, the obfuscator in question was Proguard, as it's part of the standard tool chain.
Afaik, it was a choice between being lazy vs doing the right thing and they chose lazy. To be fair, the complexity of the collections type hierarchy increases quite a bit. I have also read that they wondered about the question , if the elements of the Set are themselves mutable, is the Set immutable? 
I took a look at how you handle the database itself [here](https://github.com/hannesmuehleisen/MonetDBLite/blob/Dec2016Lite-Java/monetdb-java-lite/src/main/java/nl/cwi/monetdb/embedded/env/MonetDBEmbeddedDatabase.java) and have a few remarks. First of all; why don't you follow the standard naming conventions for method names? [StartDatabase()](https://github.com/hannesmuehleisen/MonetDBLite/blob/Dec2016Lite-Java/monetdb-java-lite/src/main/java/nl/cwi/monetdb/embedded/env/MonetDBEmbeddedDatabase.java#L55) versus startDatabase() for example. I'm personally OCD enough that this really bothers me :) Same with the static var Locker sitting side to side with a static var named isClosed. Aside from that; I would also suggest you find a way to not make the database itself static. While I do understand that it's easier to just force a single database I would personally suggest you just create a file lock in it's data directory and allow one instance per data dir. This way you don't cause issues with multiple applications sharing a VM. 
I think the name "bean" is great - might take a little while to grok it initially, but it works fine after that, because there isn't really much overlap/overloading with other IT concepts. The idea behind bean is that it can be easily moved around, and you're usually dealing with a "thing", an instance, if you like. For JavaBeans it was because you could easily plug them into your GUI framework. For EJBs it was because you could plug them into your JEE Enterprise server, whichever one you happen to prefer. In both cases they "just work" without having to worry (too much) about all the complex plumbing around them. There's a portability to them. Of course, as soon as you start using all kinds of frameworks in different versions, the issues can start to mount up. But the idea is good, nonetheless.
&gt; But moving from a monolith to microservices is something that's much harder than most people pretend it is. With discipline I think its very doable but sure I agree its easy to cut corners and lose the discipline. However, I also have come across microservices that were supposed to have no external dependencies suddenly depending on other micro services in the same way. I have nothing against microservices. I think they are great in some use cases but like you said not a silver bullet.
&gt; You will never get ready as an engineering organization until you actually start developing microservices. I hope that was sarcasm. Your readiness as a engineering organization is determined by the processes used to design, develop, deploy, and maintain code and the company's ability to follow it. It has little to do with what technology is being used other than its ability to reenforce the company's process. Microservices are not a requirement.
Hi nutrecht! Thank you for your feedback! As for the naming conventions, you are right, and I am going to fix it now. I just do this for a better readability between class and instance methods. Making the database static is the better way to handle it now. The reason for it is not actually the physical representation, but the MonetDB source code (from which MonetDBLite was ported) has some global variables, which will conflict between multiple database instantiations in a single process. We can try to get rid of them, but it will give a lot of debugging nights :)
Great News!
Check out [Head Frist Java](http://www.headfirstlabs.com/books/hfjava/). Not a online tutorial, but helped me a lot.
I still maintain that if you can't implement an interface fully don't return that interface. If you return an interface and don't implement all the methods on it, it is a bug. What is stopping me from returning a Set but throwing NotImplemented on contains()? as long as the documentation says I didn't implement it would that be OK too? If there is truly going to be chaos, someone will come out with a set of immutable interfaces and everyone will adopt them. 
This doesn't talk to the biggest reason to do micros, which IMO is to decouple code repos so that you can revision different parts of code at different rates. with a monolith, to update a part of the application requires updating the entire application. the serialization of objects (usually to json) to send over the network makes a great abstraction for decoupling.
Agreed, to create a good modular monolith you need proper language/tool support, otherwise it won't fly. I made this point in my 'Modules vs. Microservices' article a couple of days ago as well: https://www.oreilly.com/ideas/modules-vs-microservices
While this is helpful advice, it doesn't address OP's question. 
having a monolith means you will have to plumb a library update through 100% of the application, regardless if it needs that update everywhere. whereas, in microservices, you can just update the library in the portion that needs it and move on. also, the non-linear interaction between different modules of the monolith makes scaling of it difficult. scaling a monolith is rarely as simple as scaling microservices.
&gt; you can just update the library in the portion that needs it and move on. To me this is just adding tech debt but yes this can sometimes be a benefit, it's a tradeoff. &gt; also, the non-linear interaction between different modules of the monolith makes scaling of it difficult. scaling a monolith is rarely as simple as scaling microservices. Often times you only need to scale a few routes though. At that point you can split it to a micro service and scale it independently. Its no harder to scale a monolith as it is a micro service it's just not always the best use of resources. Look how far Twitter got on ruby on rails monoliths. When they split to services yes they dropped their infrastructure footprint dramatically and teams became more productive but not many organizations are at that scale. Last I heard they still have parts of their monolith RoR code running because its not worth splitting into services.
I haven't done much with proguard in a while. The last time I checked it didn't do this. Whats the config option to enable this renaming scheme?
An int can represent millions of values, not just 20.
For various reasons the maximum is 20 in the game, or rather wss. No way around it without tons of internal modification (and building spigot SUCKS) By using a double you get infinite ish segmentation within that 1-20 range. Thought the 20 max health thing had been mentioned. Personally I think it's terrible.
Many thanks for your answers. I have another question, did you face any problems related to a configuration framework in the past ? If so, what kind of problems ?
I didn't. I just killed the interview. Is it now considered required to have some code you worked on for free to show?
None. 
I didn't but I've been offered jobs in the past where they have given me apps to code for them. I didn't take those jobs.
Have seen that too. I don't work for free except for personal projects
I created a maven project with 4,000 modules. mvn clean takes about 40 seconds.
I hear you on that, I was shocked when they handed me a take home project. I don't have time for that.
Twitter, Google, and Facebook do it, so it must be the best way, right?
&gt; write my blog post for me
Wait, Twitter, Google and Facebook use a single giant codebase?
Have you tried a [parallel build](https://cwiki.apache.org/confluence/display/MAVEN/Parallel+builds+in+Maven+3)? e.g. `mvn -T 1C clean` I would think that in a 4000 module project there would be lots of unrelated or sibling modules, so there would be good potential for parallelism.
Just starting so what exactly is multithreading?
mvn clean is like deleting a directory in windows. It's easy cause all that's basicaly all it's doing. You want to try maven clean install. I'm not sure what you mean by modules though. The projects I use at work has 7-10 modules in it and it takes it 5 minutes to go through clean - build - test - install (of which 3.5 minutes is tests usually). The dependency tree for that project probably expands out to hundreds of modules but even when I don't have all of the jars downloaded locally it only runs a couple minutes slower. I'd say that maven overall is far more mature. I'm only seeing back to a year or so for the first release of pants where as Maven is on its third major version (I run 2 at work but I've used 3 before and am confident it's just as good if not better). I'd also be dubious about the need to handle 4000 modules. How many modules do you have now? How many do you expect to have? If the honest answer is that you won't have more than a few modules they're over-engineering the issue. There's always the advantage of using something that new people are far more likely to know too.
Haven't shown a project in the four interviews that resulted in job offers.
[Clean Code](https://smile.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?ie=UTF8&amp;qid=1490810710&amp;sr=8-1&amp;keywords=Clean+Code) and [Cracking the Code Interview](https://smile.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850/ref=sr_1_1?ie=UTF8&amp;qid=1490810735&amp;sr=8-1&amp;keywords=cracking+the+code+interview) I'm sure everyone has their opinions on those two books, but I think they'll both give you a lot of good direction. Clean Code is actually in Java, while Cracking the Code Interview is more generalized. It's been awhile since I read it, but I think it did have some Java examples.
Pants... never heared of it. A non-standard solution will bite you back sooner or later. Especially when dealing with some edge case and Maven / Gradle has plugins for everything.
Maybe as a new grad... not sure.. I do interviews all the time for my company and I typically never ask to see existing project work. You can typically tell after talking to someone if they are competent as a developer or not. The only thing I have seen is where a company will send you a project description ahead of time, then ask you to bring in your code to finish the project into the interview via a Flash drive then go over it.
Hey, my $ 0.02 here: Although "Head First Servlets &amp; JSP" is a little outdated, IMHO it is the best way to understand the foundation of a Web app written in the Java platform. That will give you a solid background, then you can improve you knowledge with JSF and ADF, since they are a little bit more complicated than servlets+jsp with a more complex request lifecycle. ADF also has a concept of "Business Services", that can be made atop of EJB.Well, it´s a different topic, but surely it would be useful to understand how EJB works. In this case, don´t go to the heads first version for EJB, since it´s too old.
At least Google does, calling it the monorepo. Need special tools to handle it all, apparently.
You might want to go through the JEE tutorial, as ADF builts on top of it. https://docs.oracle.com/javaee/7/tutorial/
If the library developer doesn't say whether the Set is mutable, then all you have is the Set documentation, which says it may or may not be. In that case you have to be conservative and not expect that optional methods are implemented. You also can't expect (assume) that the implementation returned by the library will be consistent between calls if the developer didn't specify that anywhere. The library could return different implementations depending on the input (as an optimization, for example) and would still be fulfilling the contract of returning​ a Set.
The library could also keep a reference to the set and later modify it, for example as part of an optimization to avoid object creation. However, if any of this was the case without it being mentioned in the documentation, I would argue that you cannot trust the library developer and thus you would have to follow approach #2.
I saw Rat Pack recently I thought it looked really cool, I'm really happy a lot of these java frameworks are going more towards creating natural DSLs and making batteries included frameworks that let you get a working example going quickly. I think java web development was plagued in the past with really slow/hard barrier to entry. Another web framework I love, but isn't mentioned here is [Rapidoid](http://www.rapidoid.org/) I've used it for some personal projects and it's really awesome some of the out of the box things it provides.
It's a great idea to understand all of Java and JEE and web application development, etc. first, but you just probably won't get there quickly enough if you take that route. Instead, if your company uses ADF, then go learn ADF: http://docs.oracle.com/cd/E18941_01/tutorials/toc.htm Go for the throat on this and don't sweat the details at first. As a framework, ADF builds in a lot of components that are going to seem like straight up magic to you on day 1. You simply have to learn to be uncomfortable for a while here, because you will not understand what's going on at first. ADF is what I would call a "component oriented" web application framework. It has a lot in common with other frameworks like it like ASP.NET Webforms. In this type of framework, the technique is very high level. You want a table in your web app? Maybe you want spiffy stuff like filtering, sorting, paginating, etc. for "free", right? You aren't typically going to roll your own here. You will typically use the ADF table component instead. See tutorial example here: http://www.awasthiashish.com/2014/04/pagination-in-adf-table-with-jdeveloper.html As a general rule of thumb, component oriented frameworks like ADF are best for internal line of business applications where user interfaces must be rich in functionality, must be developed quickly, and don't necessarily need to be highly usable in a UX sense of the word. It's typically OK if they have a bit longer response times, take longer to load, and might have some occasionally heavy network traffic as a result. Compare that to sites like reddit which are external facing and where every layer must be hand optimized to minimize traffic and ensure scalability. Features get left out if necessary and users are impatient with many competitors waiting to take over if the experience becomes too slow. Then you'll see a focus on using small lean architectures using a controller routing pattern. The heaviest thing in such an architecture might be some jQuery or Bootstrap Javascript framework style components, but only on the client side where problems typically won't affect everyone at once. These architectures (as a broad brush family) can be just as capable, but it takes a lot more time to get to market with that type of development on feature by feature basis. Anyway... enough blathering for now. The main thing to understand here is that ADF development allows you to deliver web applications as a side effect, but it's not pure web application development: it's ADF development with Java. If you want to get into development in your current organization, then it sounds like you should just go learn that first and then focus on understanding the different layers of the web applications in general later. All this said, someone in here will likely point out that ADF itself isn't very marketable and, because of the trade-offs I mentioned above, that you would be better off going with more mainstream web application development using something like jQuery with Bootstrap, Spring MVC and IoC, and Hibernate. That's certainly valid too, but the "fun" thing about this field is you get to decide for yourself or let your employer decide for you. Both have trade-offs. 
Do we really need one of these threads every single month? It's the same thing every time: * "*Why are Spring MVC and Spring Boot two separate listings?*" * "*Why are GWT and Vaadin on this list, when they're client-side only?*" * "*Bah. You should all be using Rust. Transpiled to JavaScript.*" * "*My career choices are NOT obsolete! And stop calling it 'JEE'!!!*" 
It's [Twitter's build tool](https://www.infoq.com/news/2016/05/twitter-release-pants-build-tool). 
**Sidebar** -&gt; + **No surveys, no job offers!** Such content will be removed without warning.
&gt; Pants is modeled after Blaze, Google's internal build system, now open-sourced as Bazel. Why not [Bazel](https://bazel.build/) then?
DropWizard with a curious uptick. The only framework with an increase. 
&gt; Why are Spring MVC and Spring Boot two separate listings? This one irrationally bothers me. Spring MVC is a web framework. Spring Boot is an app container that uses Spring MVC as a web framework. Also, JHipster is built on Spring Boot. Shouldn't the Spring MVC number include JHipster and Spring Boot? What about Grails? It is also built on Spring MVC. Then, there's Dropwizard, which like Spring Boot isn't a web framework. Dropwizard uses Jersey, so why isn't Jersey on the list, or is Jersey lumped in with JAX-RS? So many questions.
Thank you so much! I'll check those out. Much appreciated!
I wish more people would even check their jpa/hibernate query logs to see what is going on. I preach and teach it, bit there are so many people I work with that still don't care. Sorry about the ramble, had a rough day at work exactly about this topic. 
Maybe coincides with an increase in microservice architectures? It's super easy to have a bunch of dropwizard apps, each with only a couple of domain specific resources and representations (starting from a base template repo). But since you're using jackson across everything you don't run into the issue where you have 10 services all implementing validation in different ways, etc.
Are you God?
JSF is pretty high on the list. Never thought I'd see the day. Recently applied for a job at a multinational. I had everything they needed except JSF. I figured, no big deal, they probably copied and pasted some Java buzz words they found on oracle's website. Nope. They specifically told the headhunter they liked me except for the fact that they I didn't have JSF. Good for you JSF. I might have to finally play around with you. 
Maven &gt; Gradle (unless you're an Android shop) &gt; anything else for projects that are primarily Java. You're going to hate having to do everything from scratch otherwise and have to walk everybody through onboarding. With Maven, you can * Create Avro components * Leverage Lombok or Immutables * Static Analysis via ErrorProne, FindBugs, SpotBugs, Nexus IQ Server, Checkstyle, PMD, CPD, IntelliJ, license-verifier, etc... * Plugins keep going on and on
You can do all of that in Gradle too so those are hardly arguments for maven over Gradle. Plus at the scale OP is stating Gradle would like get their hands dirty to help optimize their setup. Seems like every other release from Gradle (which are insanely consistent in release frequency) the notes quote some large enterprise build speed improvement they helped make. Plus Gradle script kotlin is imminent which should help alleviate the fear(unsubstantiated?) of groovy.
No. Just handling a token on the client side. Not even using an OAuth provider.
&gt;You can do all of that in Gradle too so those are hardly arguments for maven over Gradle. Sorry it wasn't clear. I was arguing Maven and if not Maven, then Gradle, and forget everything else. I tried to make it more clear. &gt; Plus Gradle script kotlin is imminent which should help alleviate the fear(unsubstantiated?) of groovy My dissatisfaction with Gradle, isn't that it uses Groovy [1], it's that it supports imperative builds at all. Having done this for years, going from make, shell, batch, ant, msbuild, etc... Maven projects are the easiest to onboard to and understand. [1] Kotlin is way better than Groovy though
Sure, you want to use the right tool for the job, but you also want to be sure that it has the momentum and mindshare behind it to sustain it during the lifetime of your project. I've been hit by Tapestry 4, Play 1 and Angular 1, so today I would choose only something that has both history and mindshare and is likely to be around in 5 years. Popularity is an important metric to consider to ensure that. 
&gt; Maven will require you to create a new project (or use an existing one) each time you want slightly different functionality to create a plugin, where as Gradle you can quickly script something and leave it in your build files. This is patently not true. You can configure plugins with multiple executions with different Ids and run them from the same POM. 
I was meaning project in the sense of creating a plugin, version tracking that new plugin, publishing the plugin to wherever it needs to be accessible from.
&gt; "My career choices are NOT obsolete! And stop calling it 'JEE'!!!" kek
IMHO the biggest selling point for maven isn't maven - it's tooling support around and within maven. Around it: Intellij / Eclipse / Netbeans all support it cleanly, and manage both the dependency and lifecycle stages that come with it. Gradle support in Intellij (our IDE of choice) has come a long way - but last time I checked (a few months back, so not the latest Intellij version - it may be awesome now) it just doesn't work as smoothly as the well established maven setup. Within it: (particularly important if you're working with a massive code base) the number of plugins out there for maven is awesome at keeping things smooth. Checkstyle / Findbugs / PMD (of which there are gradle equivalents) are awesome, but above all - the maven-enforcer-plugin (which I haven't seen a gradle equivalent of). If you have other mechanisms in place to manage the governance of your code base, then you can arguably get by without them in maven, but I've found they generally rely on people doing the right thing with their local environments, not enforced as part of the build process. If your colleagues are taking the argument that maven would choke on 4,000 modules, I'd suggest that the build tool isn't the problem you should be addressing. If you have that many dependencies between modules that you need to build them in one hit (a reactor build) then you need to work out how to separate them, regardless of build tool. If you start looking at splitting out those dependencies into well defined subsets, and managing their lifecycle independently so you can depend on known, released versions, your requirement to support that size of build drops off and your code base becomes far simpler to work with. 
The only way a single framework is going to be the right choice for 5 years is if people stop innovating on other frameworks. I've just embraced the idea that i will constantly be learning, and that to be good at this job you need to be able to ingest stuff quickly.
Non-EJB Beans tend to be used in older JavaEE technologies, such as JSP.
&gt; I didn't take those jobs. Why not? As a programmer, you can create the project functional enough to show your skills, but you can obfuscate some parts of it, including a killswitch that you should host and the app won't work without the proper authorization from your server.
4000 modules in the same project? The heck did you build.. 
Many places, language is second to the employee.. You can teach people technical stuff, but you can't teach them teamwork, being corporative and not socially awkward. 
Is GWT alive? I never see anyone use it.. Or talk about it, anywhere. 
Laughed my ass of while spotted: self.give(fryingPan.getContents(80, PERCENT)); // huehuehue :D Also very good article, method tidiness is one of the major clean coding pillar, good job!
Google also use Perforce, which is the worst fucking excuse for a VCS ever. Source: use perforce
google keep it all in one p4 depot. sounds horrendous
And this is when you become an external consultant. Advantages: 1. Quadruple the pay 2. Minimise the fights 3. Maximise the fame 4. Walk away without doing any hard work 5. Come back to re-explain because nothing had changed (goto 1)
If only we could compare that monitoring effort with just running actual SQL queries...
The effort of adding the statement count checks requires just 2 lines: - a call to reset counters when the test starts - a call to assertCount at the end of the test
Yeah our stack is mostly AIX, spring 3, java 6, jboss 5, Oracle/informix/db2, and GWT on the front end. Mix of SOAP and XML apis. Banking is legacy af. We even still have loads of Perl + C CGI apps let alone the unix batch stuff.
I'm sure Google do, with thousands of unit tests which are run on each commit. http://cacm.acm.org/magazines/2016/7/204032-why-google-stores-billions-of-lines-of-code-in-a-single-repository/fulltext
Indeed. When in banking, I had to literally fight to get to use Python 3 for some basic tasks running on a server(transferring/deleting files, stuff like that).. "Can't you just learn VBScript?" - Technically yes, but ... 
Also enjoyed it, thanks for sharing.
Of course SMVC is built on Java EE. Edit: Doesn't everyone call it that? It is way to hard to type out Spring MVC. :)
Doesn't dwell much on the fall aspect of the title.
TL;DR: Kotlin is expected to rise.
I agree with the container/component division (and the nuances), but a grammar for architecture must contain "services" too. And services have definite connotations of marshaling and remoteness, whereas components do not.
Codcademy is good for going over the basics.
If you have a service method that should do a batch processing, it's a good idea to know what happens behind the scenes, and if JDBC batching is happening as expected.
1. Describe what actually you are trying to do. 2. Show us some code, what have you tried 3. Not really sure if it is right subreddit
http://www.catb.org/esr/faqs/smart-questions.html
Im trying to write a peace of code on my calculator for !n. Basically the thing I want to do is for example: n!=n*(n-1)*...*2*1, tex 5!=5*4*3*2*1=120) I haven't tried a code yet. I have no Idea how to do
Quasar is awesome, but starting with an actor-model-based tutorial isn't the best idea for someone new to Java, regardless of how seasoned they are in general. If you're familiar with at least some concepts, [this github](https://github.com/cxxr/better-java) is a good place to start. It focuses on Java 8 features, and also trails with some resources for further learning.
No problem. Java EE stack is definitely learnable, but one thing at a time. ADF is just a starting point. 
Udemy has a 16hr free course called 'Java Tutorial for Complete Beginners' by John Purcell. 
For simpler usecases, https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#putIfAbsent-K-V- should do the trick
I thought the same. So.. too many choices means they've all "fallen"? Umm.... no. Nice clickbait-style title though.
Good course, but i dont think a senior programmer needs to be explained what a variable is.
Pick and choose right from the source! https://docs.oracle.com/javase/tutorial/
Checkout the awesome java git repo on the side bar. Lots of great libraries nearly split into their usage. Lots of modern frameworks on there. 
Since nobody's mentioned it, Effective Java is largely considered a must read for Java developers, but read it after you feel like you have a basic grasp on the language. You should definitely reach out to your new manager/lead and ask them about their stack so you know what frameworks to start learning. Spring and Hibernate are pretty much industry standards for Java.
For me the biggest hurdles were learning how to use Eclipse, learning what the heck Java EE is, and learning how Maven worked. Even if you don't use it for work, learning the Spring ecosystem of tools will be helpful. Udemy and Pluralsight are two great resources. Pluralsight has courses on [Eclipse](https://www.pluralsight.com/courses/eclipse-guided-tour-part1), [Maven](https://www.pluralsight.com/courses/maven-fundamentals), [Java EE](https://www.pluralsight.com/courses/java-ee-big-picture), and [Spring](https://www.pluralsight.com/courses/spring-fundamentals). Udemy has similar courses ([1](https://www.udemy.com/luv2code-eclipse-ide-for-beginners/), [2](https://www.udemy.com/apachemaven/), [3](https://www.udemy.com/spring-hibernate-tutorial/)) as well. With Udemy, wait for their famous $10 site sales (which happen at least every other month). [This Udemy course covers most of Java](https://www.udemy.com/java-the-complete-java-developer-course/); you obviously can skip around the basic general programming stuff. Similarly Pluralsight has [an entire "path" for Java](https://app.pluralsight.com/paths/skills/java), most of which you can probably binge by only paying for one month of Pluralsight.
Yes, definitely, that's also along the lines what Viktor Klang suggested. The implicit assumption here is that you actually need to use a Cache, not a Map, e.g. for entry eviction based on cache size / TTL.
Are you being sarcastic?
I'd recommend /r/javahelp.
No, I an genuinely curious what you find annoying about it. Is it the article you find annoying or the way the digital Java Magazine is presented i.e. having to use the controls on the right to navigate? 
Haha I love this response
Understood and not trying to knock the article, it's a great in depth and clear analysis. I just worry that some poor, less experienced programmer will see that and think it's the only way to solve get-compute-put.
Read [this article entirely](https://vladmihalcea.com/2016/10/20/the-best-way-to-implement-equals-hashcode-and-tostring-with-jpa-and-hibernate/) and you'll see why.
Everyone is assuming you are a web developer. If it's not the case, you should probably specify. You can probably go over a whole Java book over a weekend, but that would be a small first step. The biggest task is learning the ecosystem and the common patterns. My best advice is to start doing some small projects and post them for example on [codereview](http://codereview.stackexchange.com/questions/tagged/java). You can also just read the reviews there for other Java posts.
What sorcery is that website? don't they know what a PDF is?
Kotlin isn't only using the JVM ecosystem, you can now use the JS ecosystem, and soon the Native ecosystem thanks to their LLVM backend, Kotlin future looks bright to me, even without the JVM
That book is the s l o w e s t way to learn streams. May I suggest 'Java 8 for the impatient' by Horstmann instead?
Use Kotlin code as library, or mix in your project Java and Kotlin code: it works seamlessly.
I looked at it on mobile. Looks more like a press release for kotlin. Looks like it should have been written as two or three tweets rather than a full article, not much substance here. Is missing pieces, nothing about the fall, and I would have been interested in the non-corporate languages too. Has a fallacied corporate mindset, ~to succeed a language must have a company behind it~. This isn't true, there are other paths to success. C was a university team/project. Perl and Cobol were both government projects. The parallel columns of text style went out of style in the 1800s, this isn't a bible or a newpaper from the old west. It's almost like the author had an idea for an infographic, but decided it was too much work to either narrow down their thoughts or complete the idea. An image of a story is just annoying, especially to mobile users. I know contet developers have to fight screen scrapers, but still. Breaking a short article onto multiple pages was annoying. Most people I know are anti slide show. Wrapping all of this in a miniapp and requiring extra navigation steps is annoying. There is a reason people don't like html frames, the dev here tried to reimplement frames, badly. Is like a bad video game where they couldn't agree on the interface. This really just needed scroll up/scroll down. But instead had scroll up, scroll down, scroll right, zoom in, zoom out, look for next button, click next button, repeat... Was I entering cheat codes or trying to read. If I have to zoom into a webpage, she had better be hot. Operating like no other website I know is annoying. Landscape orientation is inappropriate. Is the dev imitating PowerPoint or is this supposed to be some sort of meme.... It's like a blog, but it's not a blog. What kind of timeline is this? A rise and fall has stories, this has details without specifics. Is this a reference piece? If this was a people piece talk about people. If this is supposed to be some sort of tutorial piece where are the lessons? If this is supposed to be an interesting look at tech, where are the examples of the old tech being good or bad? Any one of these would have been annoying. They took all of these and mixed them together into some sort of editorial superabomination. I'm just glad it didn't crash my phone....
That website gave me cancer.
There is a link to download as a PDF on the right.
There is a link to download as a PDF on the right.
I only download PDFs from sources I trust. And frankly, that is just another step in the 20 step dance it took to read this article. And, I see no pdf link on mobile.
You mean the user with the name /u/wildjokers?
Do the java tutorial. If you follow what's in there, you'll beat most of the people working in the field. Seriously, if you understand what happens when +-ing strings, how to use prepared statements and even know when to use volatile, you'll be ahead of 90% of the competition. Might sound like I'm bitter, but that doesn't make it untrue. 
screenshot of download link: http://imgur.com/a/83Yw6
Effective Java is always good Java Concurrency In Practice is still the best book on concurrent development Read up on Java 8 through Oracle Get to know your target library (Apache or Google Guava) from their docs 
no, javabeans are just a subset of pojos written following certain conventions
The thing about Effective Java though, is that it's more about best practices, how/why to do things a certain way. It's not just about teaching you the language.
Core Java for the Impatient teaches some good practices too, IMO. I've read both and I'd say that it's more valuable today than Effective Java would be.
It's hard not to advertise for Kotlin once you've used it. ;)
I think there's a downvote spam bot in here somewhere, it's consistently a problem...
Thanks, that's a pretty compelling combo once JS implementation kinks are ironed out and Native is production ready. I'd say the former will happen much sooner than the latter obviously. Case in point: work on Scala Native began 3+ years ago and they only recently published a 0.1 release. There's a ton of work involved in going Native vs. piggy backing on the JVM. In particular a robust battle tested GC solution is non-trivial, that alone will take a long time to develop and refine. The promise of iPhone + Android + Browser + Server all sharing one code base is definitely appealing, but I think realistically anything production ready is a long way away.
&gt; I'd pay to take courses from the motherfucker on SEO though he's apparently fucking amazing at that. 1 Create a shit ton of content 2 Create a donate to charity button to get the feels from the users, silently create a company and promote it over your blog. 3 ??? 4 Profit 
Java Magazine is an excellent read, but it's a shame about the format.
Yeah, not sure about the Holy grail of a shared code base on all 4 platforms. Most Kotlin stuff is already written to take advantage of Java libs. We'll have to see how well things work when all you have are Kotlin libs and the Kotlin stdlib. That said, you could easily write your business logic in a shared way and have your UI bindings and whatnot be implementation specific. Kind of like how Google Inbox works with j2objc. Regarding Native progress, it seems to be coming along well. A JetBrains employee posted a video of Tetris working on both iOS and a Raspberry Pi, written in Kotlin. I'm hoping it won't take as long as Scala Native has, given that: - Scala went first and probably figured a lot of the hairy stuff out - Scala is a more complex language with many more features that have to be considered when implementing a new backend - the Scala compiler probably has a lot more technical debt than the newer Kotlin one Not that the road is completely paved for Kotlin; far from it. But it's certainly harder when you're the first JVM language to try to go native. 
Well you don't have to use MVC with Boot. I think they are separate for this reason.
As someone who was in OP's exact situation about a year back, I second this recommendation.
Or just search this sub, this question is asked at least once a week for Christ sake.
Jetbrains will almost certainly come up with a Native solution faster than Scala has done. Scala still has to port over common Java libraries (there's a GSOC project that will address that this summer) and the GC solution is far from robust (work in progress). Will probably be a couple of years before a Scala Native 1.0 lands, and even then within the community not everybody is in OMG-so-amazin'-mode since there's a ton of work left to be done. Come 2020 when Java 10 lands it's going to be a very different landscape on the JVM; by then Dotty (evolution of Scala compiler), Scala Meta (evolution of Scala macros) and Scala Native will all be in production; Kotlin will also be Native, refined its JS implementation, coroutines, and evolved far beyond current 1.1 version of the language. and then .NET on Linux, Swift, Rust, OCaml, etc. there's a lot in the works in the static types land, would be great to press fast forward to the future...
You have to practice this for you to fully understand it. Build a tiny project. For instance a basic book store (books, order, customers). Build the ERD and user stories from there.
&gt; Effective Java is a little outdated (doesn't cover Java 8), A 3rd edition is in the works... 
link?
I haven't finished Effective Java, but what I've read so far has helped me an enormous amount. That and Clean Code by Robert C Martin
They just want you to feel like enterprise java.
thanks , will learn about .gitignore .
You mean they recommend axing something that developers have been warned not to rely on since at least Java 1.2, which came out 18+ years ago? Color me surprised!
http://imgur.com/1Fgpqrb Nothing too crazy, just thought it was funny.
The PDF download is not available on mobile. It appears on desktop and laptop.
Cherry picking vids from the course is the key to learning.
Depends what you mean by configuration framework. If you would use it as something that would read the config, fill up your data structure with the settings and you would use your own data structure in the rest of your application, then no. If you would use that configuration framework all over the place, then probably yes. PS. Get on that Dependency Injection (Guice/Spring Core with `@Inject` on constructors only) gravy train if you haven't already.
Thanks
&gt; Python and Scala are the go to for Big Data programming. For discovery, for production work, Java, or if you have deep pockets and have so much traffic/data that you need to eek out every last bit of performance it's C++. Scala could work too, but it's a challenge to staff &amp; maintain.
Java Magazine editor here. Yeah, I *so* get it! It drives me nuts too. My focus since coming to Java Mag has been on content. Once we get past the work on the Java 9 roll-out, I'll be working on improving the user experience, especially for mobile users, and see if we can deliver something a tad easier on the eyes.
If you want code reviewed /r/javahelp and /r/learnjava are more suitable subs as mentioned in the sidebar. 
“Hey, can you do Java?” – “Sure.” – “You’re hired.” That’s basically how it went. However, that was back in ’97… :)
Seriously one of the best talks of that Devoxx.
Oh, and everything is tax deductible and you can easily search everything!!!
So say we all
You mean... if ("Green Slime".equals(name)) { return new GreenSlime(); } *Explanation:* 1. String comparisons: In Java, a string comparison with "==" doesn't always work. It is actually doing an object comparison, not a value comparison. By using .equals() you are guaranteed to get the correct result. 2. Yoda conditions: if name was null, name.equals() would throw a null pointer exception. By flipping and making it "Green Slime".equals() you guarantee you won't get null pointer exceptions. 
Generated code doesn't have to be pretty. It is really just a compiler after all. Just know what it is doing and that what it is doing is what you intend for it to be doing :D
It is so close on performance it does not matter. The architectures for Java vs .net are so close that the differences in performance more have to do with how you use the language than the language itself. 
So a binding via Java / C++ works faster with Googles tensorflow? And writing filters, actions and transformation for Spark are so much faster written in Java than in Scala? Which frameworks for big data do you use for the C++ world? Imho the framework enables the true performance capabilities... scale out capabilities are much more important than pure performance of a process on one machine...
But the other post said that Microservices are bad
&gt; Rust for low latency Can't say I've seen any case studies of Rust in use beyond people tinkering. Although everything starts from somewhere, and since Rust is typesafe and static, it has a good foundation if a platform were built to support it.
I'm a back-end person so I know nothing about this. I just tried the docker examples the other day for the first time. Most everything at work is done custom too, so I have little chance to learn anything like this. I don't have a strong desire to learn about ops stuff, but I definitely should learn a little. This will be great.
Maybe... But it's harder to maintain code generator than actual code, I think. Harder to read, harder to modify due to possible regressions (because fuck unit tests)...
Very nice writeup. Well done. Will move up Jooby by 15 positions on my check-out-TODO list.
Fully agree, is probably junior or old. Like we're past the point of running java apps locally now 🙄
That article does not even remotely describe the reason for returning 31 in the hashCode method. It says the hashCode should be the same across entity state transitions, but it doesn't explain the how/why that translates to "return 31"
I don't deploy into containers right now though, so I've had little reason to learn about them or use them. The performance considerations tend to dominate (especially in the low-latency systems). And nothing I work on ever uses a public cloud network. However there is definitely a use case for the more throughput dependent and off-line systems or the ones we have to distribute identical nodes through the network. I just need to put in the time, but there is always something to learn and too often ops stuff takes a back seat to hardware, network, new experiments, blah blah...
Java collections fuguring in every interview, so repeat java maps, difference between lists and maybee concurrent collections. Position also plays a big role: when you try to higher positions you may be asked more about concurrency and high level framework like spring. Ugh, actually tough question, because you didn't provide any additional info about position you are appllying to.
I think the people who downvoted you were so focused on the "I'm a back-end person so I know nothing about this" they could not read past that. 
Why is that something somebody would take issue with? It's like people watching. You see somebody do something and wonder why they did that.
Thank you.
[removed]
Yeah I was pointing out issues with the code after he said he felt sick looking at the terraria code. 
because that's the way reddit works unfortunately (or maybe fortunately?) people will downvote things they disagree with. in your case the &gt; "I'm a back-end person so I know nothing about this" is, in my opinion, a "false" statement. if you think working in the backend means you shouldn't know anything about software architecture, then you're very incorrect. personally i didn't and rarely downvote. but because of your initial blatantly incorrect statement, i will take everything else you said with 2 lbs of salt. other people just downvote. different strokes
&gt; Ah, so you're jumping all over the word "so"? Well yeah, that sentence reads like back end folks shouldn't know architecture or be familiar with it. It's cool that you've got all that experience, but your domain is different and maybe saying something like "i haven't worked much with these technologies due to working in a different domain, so i don't know much about this" would have been more accurate 
&gt; maybe saying something like "i haven't worked much with these technologies due to working in a different domain I believe that is what I did say: &gt; Most everything at work is done custom too, so I have little chance to learn anything like this. ... I definitely should learn a little. This will be great. I can't believe people were so blown up over such a tiny thing.
Impressive! Very small amount of code and still sensible.
That's actually really cool. Looks a little like spark but his is the first I've heard of jooby gonna definitely look into this more.
one query per week?
Jooby is just the best. I used to be a fan of SparkJava, but will be using Jooby going forwards. Go Edgar! Here's a 16 second build, including WebDriver tests for a demo app Edgar made for TodoBackend.com - http://paulhammant.com/2017/02/05/a-16-second-java-webapp-build-including-webdriver-tests/
Check out libgdx
Why, indeed? YetAnotherJavaFramework is strong with this one and from what I can see it brings pretty little to the table thats ether new or significantly different (or better) compared to what is already out there. I'm ok if people write things to put on their CV, but declaring every single one of them the best next thing since sliced bread is getting old. We get it, your baby is the best! Of course! Now go away. _Opinionated_ these days seem to be a shortcut for "We don't care that you will have particularly stupid, but valid, business reasons to support things like proper logging, inspection, debugging, audit, lifecycle and working in a team - do it our way or go and fuck yourself." The truth most of these framework designers are forgetting is that in general people who would give a fuck about even trying them out would be very happy to throw one or two like these together themselves. And usually do. Sorry, edgar, nice self-post and I'm sure it's fantastic and cool code, but it boils down to "I know how to write something that's not outright broken". Well done. You are special. I hope you will get that job. Now go and do something _useful_. (dated yesterday, so I'll assume it wasn't mean to be a 1st of April satire/parody on the hipster ecosystem. If it was meant to be - well done!)
Pants is relatively unknown. It will be very hard to find support/documentation/tutorials and developers that know it. You might even lose developers during the interviews if they learn that you are using pants.
It's not, for big data it's Python. 
The basics are easy, but mastery is not. This course is 30 minutes a week and covers the basics by the look of it
It says it's 30 minutes of content a week
&gt; It's not, for big data it's Python. Sure, if you don't care about performance, erroneous type mappings, maintainability. It's only BIG DATA after all. I think you're muddying discovery vs. production.
Sort of. "POJO" is typically used when describing frameworks that can operate on any given class via reflection or annotations, as opposed to requiring the user to implement specific interfaces or exend certain base classes. In *most* cases these frameworks still require the classes to follow the Java Beans standard, though.
I'm sorry but it's a pretty horrible example. You creating a thread inside of something that implements Runnable shows you didn't check out the [official tutorials](https://docs.oracle.com/javase/tutorial/essential/concurrency/). Aside from that; it's good to start with the tutorials so you understand the underlying model but then when you actually use threads you should use an ExecutorService instead of spinning up threads yourself. 
JShell is a REPL (Read-Evaluate-Print-Loop) Imagine you would need to write up a Shell Script for every command you would ever enter in your Shell. Scripts make sense when you want to execute it multiple times and automate something but if you do it only once, then it is better to type in the command directly in your Shell.
do you have any blog recommendations that cover java &amp; trading topics?
to learn the basic how to rotate,scale[....] i would recommend processing as start. after the first steps move to libgdx and start with your gameidea :P
Your comment wasted a few minutes of my time and added zero value. Now go and do something *useful*. 
I know you are trolling and your comment doesn't bring anything to the table, but as someone who tried different Java frameworks (Play, Spring MVC, Dropwizard to name few) as part of my work and using Jooby for the past few months for one our project, I would say it is really a pleasure to work with. Simple, feature rich, good documentation, excellent performance... I couldn't ask more.
Understanding how the SQL engine interprets code (starting with the inner most nested "from" statement) was something of an eye opener and not immediately obvious to a programmer. 
The tortoise was viewed as obsolete by the hare.
[removed]
Really cool looking website, nice 
Not to mention he sounds super pretentious while most readers are mistaking Java/Javascript..
But understanding the basic logic is very important, it might be obvious to us but I think code.org is a great tool for teaching that. They can see visually that they need to make the character move so many steps, and that they can simplify movement with a loop. Or make a decision with an if statement. Bogging them down with syntax will most likely scare most kids away, they want to do something and see an immediate response to their actions. Hell, I've been a developer for over 10 years and I still just love writing simple unit tests that I can fire off in a second and see if it passed, or write JSF xhtml and immediately see in the browser how things changed. My kid started with code.org and is doing Scratch now, different strokes and all but I don't think you should knock these tools.
&gt;But understanding the basic logic is very important, it might be obvious to us but I think code.org is a great tool for teaching that. If basic logic is what they are really trying to teach then it would probably be better suited to learn in a math &amp; logic class(I heard many schools are going to soon which is good) and teach real programming later on in maybe high school(like I did). &gt;They can see visually that they need to make the character move so many steps, and that they can simplify movement with a loop. Or make a decision with an if statement. Bogging them down with syntax will most likely scare most kids away, they want to do something and see an immediate response to their actions. I fully understand that... however putting an unrealistic expectation of what programming really is is probably going to make things harder later on. Just like [this](http://imgur.com/a/1jCHY) post on the Minecraft launcher. It seems like everyone is trying to get kids to learn how to program and don't give a crap about being realistic.
It's not JUST an API tool, and in my experience it is not nearly good enough to offset the price. You're better off using Apache Camel and other open source tools. 
You might also get access to Safari from your public library.
No, no, no. It's not SOA. It's an architecture that's similar in concept to SOA, but different in implementation. SOA depended on dumb end points and smart pipes. Microservices depend on smart endpoints and dumb pipes. The difference might not seem big to you, but to anyone who remembers programming for ESBs, the difference is enormous. 
Looks shit on mobile.
The pictures are pretty but since they have no relation at all to the content I would suggest you remove them. 
you could try https://www.reddit.com/r/java but it does tend to get a fair bit of traffic that should go to https://www.reddit.com/r/javahelp :o)
I assume you want to see all classes that can be imported. Take a look here https://docs.oracle.com/javase/7/docs/api/
Uhm, thanks for feedback. Ill try to look into this, but for now I'm hosted on wordpress.com which does not leave me a lot of flexibility. When I move to self hosting it will be easier...
Search youtube. There are plenty of Java vids on various ways to do graphics/game programming.
There is also https://gcplot.com, which launched recently and looks pretty good
[Webdesign by this guy](http://motherfuckingwebsite.com/)
There should be a setting in WordPress that would allow your blog to become 'responsive' with a simple setting or plug-in without any coding required.
Smart endpoints dumb pipes, smart pipes dumb endpoints. It's hogwash. Marketing. Pipes are pipes, they're not smart or dumb.
Having worked in clojure recently has really shown me the great value of a good repl. It's not simply for teaching purposes. Firstly it means you can prototype your ideas faster without having to worry about all that java boiler plate code. Secondly, it means you can run code quickly inside your project. Imagine you are working on an application and things are breaking. Well you can sit through your code stepping through the break points or you could open up an repl and run actual code to try dissect what is happening.
[removed]
At least it wasn't designed by [this guy](http://budugllydesign.com/). (WARNING: auto-play audio ... by design!)
I think we can all agree that as the size and complexity of the enterprise increases, the need for bounded contexts increases. Multiple teams each in their own domains need to be able to make progress independently. Having each team develop a software product that builds and deploys independently can help with that. Obviously that will add overhead (dev-ops, web-ops, nice monitoring tools). But if you have 500 engineers then having a monolithic app is simply not an option, period. The build would be broken 99% of the time, unless you very nearly cripple everyone's ability to contribute, beyond major bug fixes approved by a dozen code reviewers. What most microservice developers don't understand is how crucial it is to have clear contracts between services. "Here is exactly what I expect from you, here is exactly what you'll get from me, and here is exactly what will happen as a result." When you have a monolith this isn't quite as important because you can easily scan a different part of the code to infer the contract. One idea of microservices is that you're not supposed to have to know anything about other people's code, but only what it will do for you. Clear communication between teams is everything.
An easy way to get email addresses and start spamming useless mails and [links](https://cleancodeacademy.com/giveaways/intellij-idea/?lucky=1045).
This is really cool! Thanks :)
I would study Java the same way Namasensei teaches Japanese.
Don't get me wrong, I love me some Vert.x, but as far as capabilities there is not much that can compete with Camel. It's like a Swiss Army Knife for integration.
Oh I agree, Camel is unmatched as an integration library and will probably remain so for years. I would always use it in combination something else however, be it Spring Boot or Vertx or whatever, if only not to bet the whole farm on a single tech but also because I feel it is not as container-ish as other libs. I was only saying that because someone considering Mule might be looking for a one-stop solution for app creation.
If you want to go "all in" on security, use a WAF that supports URL encryption and form protection. Very tedious to develop frontends with (because all URLs and forms have to be generated and published by the server before the client can call them) but really neat security concepts.
From the hashids web page: &gt;Do you have a question or comment that involves "security" and "hashids" in the same sentence? Don't use Hashids.
Custom annotation is something I didn't think about, thanks! One more idea... But it's not only about parsing the input string, it's also about applying the filter to the result map. In the first few examples, I don't write about it to be make it simpler: it's handled by the service. But it's the same problem, only on the service layer instead of the controller layer.
[removed]
Of course it's possible, but I would recommend spring mvc instead. 
Of course it's possible, but I would recommend JSF 2.3 instead.
Thanks :-) Will take a look.
Good Writing. Just one point: com.sun.net.httpserver.HttpServer is a 'com.sun...' package and that sadly implies: - in principle, developers are discouraged to use it. - Some IDEs (e.g. Eclipse) warn you against its usage 
I love spark java personally, I say go for it. I use spark for http://www.myboxnine.com/boxnine/ 
Thank you for the appreciation :-) 
Of course it's possible, but I would recommend using spring boot instead. 
&gt; Opinionated these days seem to be a shortcut for "We don't care that you will have particularly stupid, but valid, business reasons to support things like proper logging, inspection, debugging, audit, lifecycle and working in a team - do it our way or go and fuck yourself." I thought opinionated was something like, we ain't doing this framework to cover all edge cases and give 9000 options to do the same thing. 
Plan for the long-term. Sparkjava is really easy to bootstrap and you can a small to mid-size site up and running very quickly, but you can also run into a wall at some point where you suddenly need authentication, security, scaling, caching and whatever else that would have gotten from Spring.
Yes, you can. However, I think sparkjava is over-simplistic for most business systems. Take a look what [JAX-RS (Jersey)](https://jersey.java.net/documentation/latest/index.html) has to offer for building RESTful application ... and compare that with the capabilities of sparkjava. If you want to have a quick start with JAX-RS, you could use [Dropwizard](http://www.dropwizard.io/1.1.0/docs/). Another option could be [Wildfly Swarm](http://wildfly-swarm.io/).
[LibGDX](https://libgdx.badlogicgames.com/download.html) is one of the more popular 2D frameworks, and it's Java based. There's plenty of [handy documentation](https://libgdx.badlogicgames.com/documentation.html) out there too.
[libGDX](https://libgdx.badlogicgames.com/)
Thank you, i will check it out!
Thank you, i will check it out!
And will probably not be available for use in Java 9. 
Any tips for teamcity and gradle users to automate the checking?
Hey, thank you! It is available in jcenter() (not maven central). &lt;dependency&gt; &lt;groupId&gt;net.andreinc.aleph&lt;/groupId&gt; &lt;artifactId&gt;aleph-formatter&lt;/artifactId&gt; &lt;version&gt;0.0.2&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;/dependency&gt; 
Of course it's possible, but I would recommend Play Framework instead.
I would not, as long as there is no security framework written and maintained by the core team. 
I don't have any personal experience with those build systems. But there is a gradle plugin: http://search.maven.org/#artifactdetails%7Corg.owasp%7Cdependency-check-gradle%7C1.4.5%7Cgradle-plugin I don't know anything about teamcity.
Yea but it's shifting the dependencies to the container
He was talking about Spark Java though, which i believe is a completely different thing.
Of course it's possible, but I would recommend &lt;insert my favourite framework here&gt;.
You're confusing the public `com.sun.*` package with the internal `sun.*` package. `com.sun.*` fine to use; `sun.*` is not.
Will also check out FXGL!
very interesting. Source of this statement, please ? 
All the official warnings from Sun or Oracle are about the `sun` namespace. There is no mention of `com.sun`
It's SOA. The enterprise service bus is now just diffused into common libs, load balancers, container orchestrators, etc. And soap xml is replaced with json. Conceptually nothing much has changed.
Same thing. "My way or the highway".
mmmhhh... I am not sure that makes your case stronger. thanks though
Seconded. Undertow is coming on leaps and bounds for a relative newcomer. 
you didn't provide a reference for your original (and afaict wrong) statement flaming the OP
i ran into all sorts of trouble trying to use undertow with async at high concurrency levels. this was a while ago, so ymmv, but buyer beware http://blog.nqzero.com/2016/01/asynchronous-java-webserver-hello-world.html 
How about this? http://download.java.net/java/jdk9/docs/technotes/guides/net/index.html The Java Networking Documentation lists the `com.sun.net.httpserver` package under the API specification. That page is part of the JDK9 docs at http://download.java.net/java/jdk9/docs/index.html 
Looks decent. I suggest using GitHub's releases feature to upload the built jar. You also might want to look into Maven to handle your dependencies so that you don't have to have jars in your repo at all.
Am i only one who does not quite like this? :) Usually with similar helpers you got the part "How" and then next "What". Imho mixing them together is only asking for troubles 
Irrelevant to 99.9% of this world's population but for us 0.1% Swiss, Dep(p)li is a diminutive for Depp which is German for dork. I smirked 😉
sounds good
Can you please be more specific ?
It looks like you are not dispatching to worker threads so you are blocking on the IO threads which is bad. Those don't look like the best ways to benchmark web servers either. Undertow can also be fully non blocking which is why its one of the top on the tech empower benchmark. One of the best things also is the only java lib that beats it basically wrote custom code just to get the highest speed. Undertows uses their plain old api nothing too clever.
I use this: https://github.com/tguzik/valueclasses Project Lombok (mentioned in TFA) could work as well. Not sold on the JPA method though, particularly on the public default constructor.
Are you planning to build this as a project directly or just because you want an e-commerce website? If it's the former, read the other comments. If it's the latter (and your goal is purely to have an e-commerce website) I would recommend using an existing e-commerce solution as they are easier, more time efficient and will be more secure (generally) than something you build.
hmm, thanks for the info, i didn't know about the "Releases" option
We tried [to contribute it](https://github.com/google/auto/pull/162) before extensions existed. In theory it could be contributed back as an extension now, but the intent is to keep the core functionality focused.
A project I've done a little bit of work on at my job uses it.
As said in the comments you can create any kind of webapp using Grails. I've used it for 2 years then moved to SpringBoot...Graiks is based on spring technologies and with the third version it is based on spring boot directly. It was a very powerful and productive framework but imo it never got the traction it deserved and seemed to have a bad future in terms of market penetration. Ggts is unusable: using intellij idea is a must.
i'm really keen on testing jshell, it sounds great! the stream improvements were more or less overdue but are greatly appreciated as well. all in all, looking forward to this one. 
Some actual numbers would be really nice. Especially if it's a "big" impact. 
That's a lot of text to say "I don't know" :)
Your argument of &gt; So it's only double the size of a typical long auto-incremented integer. Is also not very accurate ;). In the case of MySQL you store double the bits on disk (correct), but also at a minimum double the space in memory for the index and often times much more since MySQL indexes each have a reference to the PK. Unless you only index the PK of every table :(. Index space is pretty valuable. The rest is too highly dependent on other factors so unless you test on your system you will never get exact numbers. What gave some random company a 40% boost might only give you a 5% boost because of the data models or hardware (SSD vs HDD, how many rpms is the HDD, what version database...).
JMH isn't unique to 9. You can use it with older versions right now: http://openjdk.java.net/projects/code-tools/jmh/ You can see the benchmarks running against JDK8 in the JMH author's blog posts in 2014: https://shipilev.net/blog/2014/java-scala-divided-we-fail/ JEP 230 clearly says: &gt; Add a basic suite of microbenchmarks to the JDK source code, and make it easy for developers to run existing microbenchmarks and create new ones. &gt; &gt; Based on the Java Microbenchmark Harness (JMH) Nothing says JMH is new.
Of course it's possible, but I would recommend sparkjava
Why would anyone use grey text on a white background?
Oftentimes the developer of an app will choose the dependencies. Because these libs affect the language's apparent syntax (like macros) the onus lies on that dev to convince the rest of the team of the benefits of said extension. In more managed environments, the decision to go ahead will need manager or architect approval. There can be an evaluation period. Lombok is nice for this reason, the delombok tools provides an easy way out if it does not work out.
Shiro was basically Les Hazelwood. Apache didn't add developers, not sure how you got that idea.
Instead of asking yourself if a certain framework can do this or that, ask yourself how can my app be maintained 5 years from now. Most full stack frameworks can build anything, even though some will be a better match than other. If you are building a small site to be maintained by you for all eternity, choose anything you are comfortable with. If you are building something where the business advantage lies in the need to develop and drive your own stack, choose something lean or build your own. If you think you need other people to maintain and develop over time, choose something more "standardized" like JEE or Spring Boot. By doing this, you can easily hire and train new people, consultants will know your technology stack, and there will be examples and finished code available on the internet. Just my 10 cents as a Java consultant.
You can check ~~it~~ out something similar online at http://www.javarepl.com/term.html
You have now asked basically the same question three times in the past 28 hours: + [Can I use sparkjava for building an e-commerce website?](https://redd.it/635m63) + [Is it possible to create an e-commerce website using Grails 3?](https://redd.it/63ap1m) How many more times are you going to ask this? Keeping asking more or less the same thing and expecting different results, especially after [that comment](https://www.reddit.com/r/java/comments/63ap1m/is_it_possible_to_create_an_ecommerce_website/dftedqm/) doesn't make any sense at all. Are you actually reading and understanding what the people tell you in their comments? **No more similar questions!** Next time will result in a ban.
Do lambdas add any sort of speed? Why use them?
The difference between "experienced with SCRUM" on a resume and "certified in SCRUM" on a resume is that the second guy was dumb enough to pay $100 for a PDF with his name on it.
You know, the really beautiful thing about Oracle's direction on Java so far is just that it has been so smooth since Java 5. So few things broke between the major version upgrades and they've completely avoided committing themselves to a debacle like Python 3 or Perl 6. As a result, most of us will probably get to work with Java 9 within a year or two of its release rather than waiting indefinitely. I know it seems odd to be in love with the lack of drama around a language, but I've seen far too much of it with other communities; so I greatly appreciate this.
There is a crash course video tutorial here: https://www.jetbrains.com/idea/documentation/ 
In regards to Project Jigsaw. Did we learn nothing from the MIDP, CLDC, CDC debackle of the early 2000s. This is the path to serious fragmentation that WILL bite developers in the ass down the road. Just my 2c. 
I'm not a huge Java user, but is JRE9 going to introduce DPI scaling to swing? I have a small(ish) app I made in swing many years ago and it is not usable on 4K screens at all. I dont plan to redo the whole app so it works (it's just a freelance thingthats mostly finished). I've seen references to it scaling but never seen any actual concrete details.
Really, I'm shocked to see anyone suggest JSF.
I think author just means, that now you would be able to write microbenchmarks with pure JDK. IIRC writing JMH benchmarks implied setup of a cumbersome Maven project. 
Is there an official package for UI? 
I'm not sure about EJB, but I wouldn't say JMS is irrelevant, try and pick a message queue... everyone has different needs and its nice to have a common abstraction to test *MQ's
"New Era", this guy must be joking. Java 9 changes essentially nothing compared to generics in Java 5 or lambdas in Java 8.
This thread feels like movies spoilers. CHILL! I'll soon be able to put my hands on the movie from O'Reilly. 
You are making synchronised method calls on IO handling threads. That is going to both exhaust your threadpool and context-switch like mad. That'll bog down any server imaginable. 
That's a good one!
Spring is probably easier to use and more lightweight than EJB but with most of the same functionality. In fact the latest versions of EJB look a lot like Spring. JMS has many different implementations and it's concepts are useful for Enterprise Integration Patterns so I wouldn't say its defunct and certainly hasn't been replaced by REST services.
They're till being used a lot but I think very few new projects are using them
I agree that the article was hyped up in such a way in an attempt to gain as many views as possible, but Java 9 will still be pretty cool. not as cool as I think Java 8 was or Java 10 will be, but still pretty cool.
Did you know that Java 9 now allows you to replace the JIT compiler in in the JVM with one of your own design, implemented in Java? That's pretty revolutionary. http://openjdk.java.net/jeps/243
Unfortunately, I don't understand what it is about. I've read JSR twice. 
A suggestion: "I mostly just used it because it was simple and easy" says to me you'd be better off focusing on the actual subjects in AP computer science than on learning IntelliJ. Leave the power tools for later. I'd recommend IntelliJ too - for professionals. But when I was teaching I recommended simple editors to my students so they weren't twiddling the knobs, letting the tool suggest things they didn't know were wrong, and generally breaking things they had no need for to understand the topics I graded them on.
yes. IMO, they are very dead technologies. If you put EJB on the resume many companies will not hire you.
You can make all sorts of crazy applications and crash a lot of stuff. Obviously you won't see any documentation for ridiculous edge cases such as the one you tried. You could also write `new File(System.getProperty("user.home")).delete(); ` for good measure (it's scary looking but it won't work). Play stupid games, win stupid prizes.
Which Linux X server? X11? Wayland? Something else? 
Ridiculous edge cases or not, shouldn't there at be an UnsupportedResolution exception or something thrown? Isn't it dangerous for these kinds of issues to not be documented in anyway, regardless of whether a programmer will realistically trigger them?
I'm excited for the publish and subscribe framework.
EJB, Yes! almost in the graveyard.
Reinvented half arsed message queuing via the database!
I use VisualVM every time I need to tackle performance problems with my apps. Really easy interface, and zero setup needed. It was really nice to have it included as part of the official JDK distribution but, given Visual VM is now an OS project of its own, it's understandable that Oracle want to break free from it. Development, testing, support / ticket management etc. all can be done by the contributors of the project. Oracle could have linked [Visual VM open source project site](https://visualvm.github.io/) at the end, though. 
Wayland doesn't provide an X server. 
I had the problem when I set a breakpoint in a onSelected Listener, my whole X server didn't respond (as it's main loop waited for the completion of the listener) until I killed java via a tty.
Likewise I'm shocked to see anyone being when JSF, a perfectly valid choice, is being suggested.
From a business perspective, I can completely understand this. For example, the APM market has exploded in the last few years. Cisco, HP, IBM, CA, and others are making big money today from Java instrumentation and monitoring. Oracle likely purchased Java to be at the forefront of these types of trends, and be the market leader supplier of commercial Java solutions. VisualVM has always been a valuable tool for developers, but nowadays it has been outclassed in most organisations by far better tools. With Java 9, we may finally see a different Oracle, then the reluctant custodian of Java that we see today.
Yes, but this is merely a compatibility layer for non-migrated apps. It is theoretically possible to run Wayland apps on Wayland with no X server around.
We're starting next year. Should I be glad or should I run? 
Please, try to import the project to ide.
But different implementations have different vulnerabilities (and "patches" constitutes "different" for that purpose), so it's standard practice to ask what variant the bug reporter was actually using. 
FUD. It never gets old.
Wordpress/Drupal/Joomla
This is absolutely and patently false.
Shouldn't value classes shun class inheritance and clearly favor composition? In that case, declare the class final and keep the instanceof.
&gt; but nowadays it has been outclassed in most organisations by far better tools. do you have some to recommend?
There's a kotlin subreddit over at r/kotlin
Generally if code crashes it's host, then this is by definition a *host* bug. E.g. if a program crashes the OS, then it's an OS bug. Any X application that crashes X is by definition an *X* bug. It shows that the host isn't properly isolated from it's clients.
... and massive, crushing overhead. I get better VM data from VisualVM w/ VisualGC. as far as APM goes, Dynatrace and to a lesser extent AppDynamics are less intrusive and produce better data.
"One day at a time I guess." -Omar.
Ever heard of System.out.printf?
You are comparing apples and oranges. Java (a language) + IntelliJ/Eclipse (IDEs) does not equal Rails/NodeJS (Frameworks). If you want a similar experience in Java, first pick a framework. If you pick Spring Boot and want a web application with data access, here is how you generate a project: spring init --dependencies=web,data-jpa my-project I think that compares pretty well with what Rails and NodeJS offers you. [Full Docs](https://docs.spring.io/spring-boot/docs/current/reference/html/cli-using-the-cli.html) 
From a security perspective, for some applications, it's actually desireable not to have any "page" be search-engine optimised at all. E.g. you wouldn't want an E-Banking payment form to be crawlable. Conversely, what website that cares about SEO also cares about security to an extent where IDs should be hashed / obfuscated? Seems like two orthogonal kinds of environments, but I may be missing the point...
Perfectly valid points. It's not really meant to be secure just a slight deterrent. Some people prefer shorter URLs, Trello and youtube do something similar. Another feature I left out is you can combine multiple ids into a single hash. `/somepage/2387809345703/23147092442` could become something like `/somepage/EQejyWaSRt`. Not a security feature and nothing super critical, just something I was curious about and decided to implement once I was pointed to a library :).
Yeah. Quite sure it's due to X bug. X11 on linux is _not_ a stable product.
Deleted the other submissions/account just to create a new one and submit your "tutorials" once more?
I have no problem updating the JVM version. And I doubt I would need to update JIT compiler that much. JIT compiler is good enough already.
**Sidebar**: + **Do not post tutorials here!** The exactly same, low quality, useless tutorials (posted from a different account) were already called out upon. Stop posting them or you'll be banned.
https://gradle.org/
Thanks for the challenge :) Gradle is one of the best out there for building java. But my biggest personal issues with gradle are: 1) groovy doesn't integrate as seamlessly with an otherwise java project as java. 2) the vocabulary is unfortunately quite imperative, which "programs" users' minds away from a purely declarative philosophy that suits incremental build scripts better. Of course I like many other iwant features over gradle (like using tab for the cli), but those 2 are the most important ones.
&gt; 1) groovy doesn't integrate as seamlessly with an otherwise java project as java. What has the implementation language to do with the code you are building? It could be written in Haskell of all things and you should not really care.
Kotlin != Java. This subreddit is for **Java**.
Nah, most people prefer simple CDI beans.
As for EJB , I have to say just ditch it and use CDI 1.2 or 2.0 instead as it's simpler and you end up being more productive.
I think you are wrong. VisualVM was never used for monitoring production applications. The APM market is a completely different story, and Oracle is hardly a popular choice for that atm. If you want to see what a good APM tool looks like, take a look at New Relic or Dynatrace.
https://www.google.com/search?q=voice+to+text+library+I+can+use+in+Java Shows a lot of results.
BTW, large parts of gradle are written in java and you can extend your build with java code, not just groovy. I contributed to a few plugins and it is very powerful. You should give it a serious look.
Xorg is the server most people use. X11 is the protocol.
Even basic introspection functionality isn't that hard to make for Java; getting the UI right is the hard bit. 
...or just use reflection and dump it into a json / xml file. No need to go roundabout over Nashorn / JavaScrap and browser. If no IDE is at hand that is.
What else would you use it for?
An exception that explicitly stops everything instead of trying to run garbage and opening itself up as a possible security hole? Why would you take something you know is bad behavior that can't result in any good and not throw an exception? Besides in this case the exception would be related to instantiating a window for that program instead of crashing the whole desktop. By your logic my entire computer should crash because nobody expected grandma to enter 0/0 in the calculator.
Per OP it seems to work in Windows, I imagine most window systems are actually smart enough to either properly handle the situation or simply not try to create a window that large. Also the issue likely isn't in JavaFX considering X11 is the one crashing.
could you explain what partial escape analysis is?
If the screen blanks in Windows, that might be the display server crashing and recovering. 
You can't use a `long` as an array size. It has to be an `int`. Are you sure that you actually need to use a `long`? Can you convert it to an `int`? If you actually need to store more than Integer.MAX_VALUE values, then I think you'll need to use some sort of specialized data structure. (e.g. like an array of arrays, or something along those lines) PS: This is not the right place to ask for help. You should have asked in /r/javahelp
I'm a Java developer in Arlington (for everyone else, that's near DC). My starting salary, with a Bachelors in CS, was 58k in 2003 (~70k in 2017 dollars). I'm worried about giving you any specific suggestions because salary negotiations can be hard: on the other hand, negotiations can almost never hurt you. Basically they can only hurt you if you think there are a lot of other people in line for your position.
&gt;I imagine most window systems are actually smart enough to either properly handle the situation or simply not try to create a window that large It does look like it's the full width. The screen blanks whenever the window is show or not shown on the screen.
The company you are working for wants to *lower* your salary when you transition from a support technician to a developer? IMO that is ridiculous. If I had earned a Masters in Software Engineering and was taking on a more in-demand role in the company I currently am working for, I would expect a salary *increase* regardless of what the company usually pays entry level developers. While you may not be an experienced developer, you probably have business experience that will be very valuable to the development team you are placed on. $70k seems too low for someone with (or about to have) a Masters in Software Engineering even if they don't have professional development experience. I would think that your academic experience and industry experience would make you worth more. For comparison, my first salary after I graduated with a Bachelor in CS was 70k in the Baltimore area in 2011. I would continue your search. 
After AT&amp;T, Ken Richie moved to MIT where he popularized UNIX and C. CODASYL was a mixture of business and government. But, their specification was mostly based on Admiral Grace Hopper's earlier FLOW-MATIC language, which developed after her experience with ARMY and Navy tabulating machines.
Personally I think 70k is perfectly reasonable for starting out especially with a masters. For reference I started at ~62k and now make ~77k. I graduated with a BS in Computer Science in 2014 and work for a fortune 100 company in Atlanta GA. 
I'd push for more, unless you're desperate and really need it. You can always look for another Java job while you're employed. Fastest way to make more money is by switching companies in my experience. Do you have other offers or leads, that's leverage you can use while negotiating.
&gt; no work experience as a Java developer That's where you are getting hit. In most enterprises, your pay is typically a function of your education, location, and related experience. Always ask for the extra nickel though! They are probably holding back a little bit anyway. &lt;Insert stat about the skyrocketing cost of higher education&gt; Make a serious request - not an in passing suggestion. Be assertive. 
The company I work for is based in DC but I work a couple hours away. I initially offered at 55k to 65k and was offered 67k. The owner is an exceptionally cool dude, and after working for him for some months I wouldn't think he was low balling, so 70k seems reasonable for the area. Sidenote: fresh from college no professional experience (class of 2016, hired 2016)
go for 70. with your masters you should be able to sail through the hierarchy in several years and be making over 100k within 5 years easy. youll have to move positions about every two years to keep the salary increases coming unfortunately, businesses love giving big increase to new hire and shafting their current workers. Also, join /r/washingtondc when u get a chance ;)
Ah, okay. Don't use Windows so I wouldn't know :/
The quality of recognition is not that great and language selection is meagre.
I've used Sphinx4 -- it basically does what you want, but it's not great. [Pocketsphinx](https://github.com/cmusphinx/pocketsphinx) gets better performance (both runtime and recognition rates) in my experience. In either case, it can take quite a bit of tuning to get usable results. Generally speaking though, the more restrictive (e.g. simple language models or grammars), the better. I've heard some OK things about [Kaldi](https://github.com/kaldi-asr/kaldi), but be prepared for an even more painful setup experience and massive resource hog.
les variables
So you've worked on a enterprise application too!
It is, apparently my comment was read inverted. JMS == useful, EJBs == Satan
&gt; ould easily be done remotely. :) haha - dont tell them that it will hurt their feelings. As a US dev though - there is a lot of bias down here. Noone wants to work with a person or a company that dont speak good English for starters.
Want to be in your position... take it. With experience in a few years you will make the money back. 
It's low for someone with a masters. It depends a lot on the company. Some simply have more budget for engineers. You may not be able to negotiate higher, but I'm sure you can find jobs around 85-100. (That's a large range because companies pay vastly different salaries.) If you like the company and want to take it and gain some experience and then look around, that's reasonable. If you want to maximize your salary, it's worth looking around.
At least with NetBeans setting up a new maven project is pretty trivial. Make a pom.xml with your dependencies (just like packages.json) and point netbeans at the directory. Everything just works, eg new file, and it will even populate a main class of you want
RuneScape stores that information inside of the program, items are widgets so find the widget class and fields aswell as the static instance of it. Load the RuneScape using java and using reflection you can find the field values of the widgets! 
Can you use division? When you do 145/10 you will get 14. Divide by 10 again, you get 1. 
Yeah, but i just gave 3 digit as an example, it can be any number of digits
That's pity money for having to work with php.
I'm not sure if that pay cut is fair but I'd say if you hustle and do well at this current job and improve your skills then with experience and good interviewing you'd be able to switch to another company and get a substantial increase above $70k in a year or two. Frankly as someone who has a masters in software engineering (I did enjoy the degree and don't regret it) I don't think the degree itself is that valuable over a BS in CS or a great substitute for work experience so I can see why they'd slot you in at a junior role, although taking a pay cut within the same company seems really unfortunate.
&gt; Noone wants to work with a person or a company that dont speak good English for starters. ಠ_ಠ
Thanks, but I think I have already given it a serious look, and watched a friend try it out for real. Like I said, it's one of the best, but there is still room for competition.
&gt; The only real work that I can show at the moment is a statistics database built from scratch with a website and an android app version on Google Play. That's actually significantly more than most people have. 
&gt; Also, I'm pretty disappointed by the users of this subreddit. Folks, downvoting someone asking an honest question doesn't lead to any good. The question has embedded in it inaccuracies presented as fact, I believe that's why folks are downvoting it. 
So, how do you deal with collisions?
Job requirements lists are like kids wishlist to send to santa. A bunch of people who don't understand the job put together a list of every keyword they could possibly think of, then they hire someone who has like 50% of it. I've been doing software development for over a decade, and I've **never** come close to meeting every requirement on the list. Literally next week I'm doing an in person interview for a job I don't even have half the requirements on their list for. I have experience with the same language they're using (Java) and talked a confident game about past projects. That's it. I got hired once knowing very little html for a job that was entirely writing html. I found out later - yeah I didn't have most of the things they were hoping for, but I was still the most qualified candidate who applied. Like specifically, this part is hilariously rediculous: &gt; AngularJS or equivalent framework (Ember, Backbone, etc.) Preprocessors and other front-end tools Node.js (NPM), SASS, Grunt/Gulp, Web Pack It's like "we want someone who drives planes, trucks, and buses, and who's dug ditches before". It's a wishlist with everything keyword they could cram into it. Take a front end framework - both angular and node.js seem to be popular right now - use it to implement the front end on your project - and search for "angular" or "node.js" and start applying for jobs. The one you listed out sounds like it requires more experience than you have. Searching for "angular", here's one that looks like it would fit: https://ca.indeed.com/viewjob?jk=1abb694ac2702ebe&amp;q=angular&amp;l=Markham%2C+ON&amp;tk=1bd0vlhtdb9dsfj7&amp;from=web&amp;advn=868164784451299&amp;sjdu=f1wQT7qNl3wRRYk6uPM_NaXF97NozfZyjQZtKsAUH3-xjz4blCvZDDc7rg5ze5g9Gi5hwILlVozAQw7QHsgbTGFfuC0AVRiY8mULriOH7PBxsbtpcOq1KBcJxWFv9Zv_&amp;pub=4a1b367933fd867b19b072952f68dceb I searched for "sql java junior" and this is probably the closest one I could find: https://workforcenow.adp.com/jobs/apply/posting.html?client=RPMTEC&amp;jobId=183926&amp;lang=en_CA You're going to the same problem everyone has - the age old "they want to hire someone with experience, but I can't get experience because they want people with experience". But other than that, really, these are absurd wishlists that the person who gets the job won't have matched half of. It's just how it is. Be friendly, likeable, and be able to talk about specific experience with some of the items on their list. After that it's just a numbers game. 
Should've probably looked into https://github.com/ultraq/thymeleaf-layout-dialect
The problem with your examples is that they are not real world. In real Java projects nobody handles DB connections that way, nobody creates new projects with "new project". &gt; Comparing Java to NodeJS is also disingenuous. NodeJS isn't a language - JavaScript is the language, NodeJS is an environment. I think Java here was meant as a platform not as a language, so comparing to Node is perfectly fine.
What that doesn't tell you is how to call a function that's not included in that list. For that you have to define your own dialect and register the relevant function there. You have to do this for all your target databases. package com.example.dialect; import org.hibernate.dialect.SQLServer2012Dialect; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.type.StandardBasicTypes; public class MySQLServer2012Dialect extends SQLServer2012Dialect { public MySQLServer2012Dialect() { registerFunction("DATE_SUB", new SQLFunctionTemplate( StandardBasicTypes.DATE, "DATEADD(?3, -?2, ?1)" )); } } Call `registerFunction()` for each and every function you want to be able to call. 
&gt; There are no collisions because the method is based on integer to hex conversion. As long as you don't change constructor arguments midway, the generated output will stay unique to your salt. From http://hashids.org/
Anyone customizing it?
Why maven over gradle?
Why not migrate to Git? That would allow hosting elsewhere too.
Declarative build over imperative. Gradle does allow you to do some neat things during your build, but in my opinion that's not actually a good thing. The constraints Maven places on your build ensures that your build process is understandable. If you're having trouble getting your build to work with Maven that's probably a sign that you need to rethink your build process.
Or copy-pasted from the spring docs
&gt;It is also possible to define different navigations (and states) statically as HTML, then only let the view decide which fragment (html file) to load. This can be parameterized based through model attributes too. Do you have an example of this? 
Do you have a specific use case? I assume you may have one navigation that's for logged in users, and another that's not. So if you have a th:fragment and in your layout, you can th:replace that fragment inside your view with th:include pointing to a different HTML file. This requires two HTML tags, but th:block allows you to not have any unnecessary tags rendered. I'm unfortunately not on a computer until Monday, but when using those tags, you can use expression language to access your model attributes as you normally would - so for example your controller could decide entirely which file to load by filling your model with the correct value. It is also possible to parameterize a th:fragment, as you would a method call (see thymeleaf docs). 
A simple example of maven's failure to be properly declarative: mvn compile. That's an imperative command, and the word "compile" can be found not only on the command-line but also in the build declarations themselves. And not only maven: it seems almost all build systems since _make_ force/encourage their users to tell their build script to compile, instead of _making_ objects/classes/... (nouns).
there is a fair amount of Java in fintech: front, middle and back-office. REDI and ULLINK are on Java stacks.
&gt; However other platforms do zero magic and keep simplicity. SO this is I would argue that Java culture is lacking. But you can do it simply - I showed that above. You just stated that it wasn't a "real world" example. The Spring-boot example was just a common example nowadays. And yes, Spring does a lot behind the scenes - but so do other frameworks and platforms, as well as the languages themselves. There's nothing lacking in the Java culture. I showed how to get a database connection in a single line. Executing a statement then can be done in 1-2 more lines, which is just as simply as NodeJS. &gt; And you have empty maven project Which is what I generally want. You don't have to use archetypes, or even Maven. You stated that people don't use new project, and I disagree from a vast amount of experience. How do you go about creating projects?
What's not fair? The OP is stating that simple things - like creating a project and getting a database connection - are complicated. Your example is obviously more complex, and has nothing to do with the comments I was replying to.
The closest I've found so far is DZone's bi-weekly Java Spotlight. Here's their web sample (join, then manage email subscriptions to sign up): https://dzone.com/pages/java-jdk-development-tutorials-tools-news-example It's not bad, but I wish they had a way to review past issues.
I want to start off saying that I like Java EE and Spring, I think they are tools that are good to know. Now, in what case would you need more then what he said: &gt; I just need an application server and a single Maven dependency to get things going. The powerful, type-safe dependency injection that acts as the glue of the platform is what really blows my mind. 
Yea, just saying, but there is a reason why most scripts are not tightly coupled to the internal representation. With a normal DSL you can write a custom parser if required to handle "old" situations. Build scripts are basically configuration with conditional logic (e.g. am I building from a CI or local?) but thats another cup. Regarding documentation: 1. fixed font-size. On my screen resolution it is not even visible to me. I had to zoom in to read the description. 2. sell it to me: if "I" am already invested in your project, you do not want to waste "my" time. Yes you present selling points, but it is all wrapped in text. I need to see something which instantly tells me: "niiiiice! I already wanted that" or "ohh, I never knew I wanted it, but now I want it" or "yo, that is much better than gradle, maven, ant, sbt, etc" 3. Even though documentation in general is good, you should assume, that people checking out your project already know an existing build system like Gradle or Maven and thus can be introduced faster. I am missing a simple example project or example projects for multi module support, basically more than toy project ready samples, but easy enough to understand the concepts, syntax etc. 4. I am not sure what SF is doing with your documentation, but it is showing diffs? 5. How do you prevent classpath polution that e.g. eclipse does not load your classes for a project but only for the build script 6. I think you are missing build time comparisons? How does it scale. SBT e.g. is quite nice, but slow as f**k (maybe faster now, but having experienced it once and having faster alternatives; why should I go back?) I suspect that your project gains more momentum if the Java language itself allows better DSLs like multi-line-strings or type-inference with `val`. Using the builder pattern for constructing fluent APIs is definitly a nice-to-have as seen in APIs like of AssertJ.
Because we are not as smart as the people that wrote the project to start with... (sarcasm, if that doesn't come across on the interwebs)
Ironically, I posted my issue with passing variables from the child to the parent on GitHub and I just got a nice reply from the developer saying that it is possible and he swore that it was documented. He seemed to take a lot of pride in the docs, so maybe if you get in touch with him about your issues he'll work with you. Best of luck and thanks for chiming in with your experience! 
Runnable is an interface that you implement with a class. The class has a single method that you need to implement, run(). Inside this method, you implement code that you want to run asynchronously from your other code. This means you have to be aware of thread safety. I won't get into that, there are better articles you can read on this. Then what happens is that in your code you can use the ExecutorService to create a pook of threads. You then instantiate your Runnable object and submit it to your pool. This will then execute your code asynchronously and the code submitted your Runnable object would continue to run also. http://tutorials.jenkov.com/java-util-concurrent/executorservice.html
What about generating a PDF that the user can print instead?
Can you be more specific? What do you mean? Do you mean an executable jar file that runs some main method? Do you mean making a file that you just run without running through Java? Do you mean like an exe file that doesn't require the user to have have Java installed?
Yes an exe file that can be used by any user without having Java installed.. Although...I would love to here answers for all your questions.. Thank you very much.
Lombok is bad for this reason because it is rather a compiler plugin masquerading as annotation processor and make you code JLS non-compliant. In other words, you suddenly end up programming in Java dialect rather than standard Java. Hint: JLS do not describe any means by which getter and other methods could appear on the class if they were not declared or inherited. More standard (i.e. the ones which generate source code (as opposed to AST manipulation or bytecode generation)) annotation processors are easy in the way to get out, you just copy generated source code to your regular source code, with Lombok, you need magical "delombok"
IMHO There are better ways to handle PII, exactly by using value types for them, well, and you will not forget to add special annotation: http://immutables.github.io/immutable.html#opaque-containers
The first thing that comes to mind is boiler plate generation from a few parameters. I was in project once where I would have been extremely glad to have JavaPoet
Your approach to arguing this topic I put into category of "complexity? what are you talking about, you just do x, y, z...". I remember when even Gosling argued that Java EE is as simple as Rails - well, formally you could argue that, but its distorted picture - if you look only at the code that might seem so, but once you go deeper you see all kinds of framework and infrastructure complications that will waste lots of hours. There is saying that stereotypes usually have some truth, and one of Java's is that its big complicated mess. My only wish is that Java comunity would acknowledge that and we could embrace simplicity - consentrate on frameworks like Spark and show that Java can truly be simple, anf not just on paper.
This is probably your easiest option. Use iText to read the data and lay out the labels, generate a PDF of them, then print the PDF onto the labels. 
Why not just print statements?
It certainly isn't fun to write code generator logic and it can be difficult to maintain. JavaPoet does a good job at its unopinionated API. There are other good approaches like templates (e.g. xtext) or rules (e.g. CodeModel), each strong in certain contexts. The main benefit of JavaPoet over raw strings is that it is type safe, making it easier to refactor with.
&gt; type safe, making it easier to refactor with. It is a lot of extra work (a very very very much a lot) of extra work added. The API is relatively large, it makes the coder being generated very difficult to read and understand (you are no longer looking for "for(...") but now you need to find the class that represents it, familiar constructs are completely foreign (doing a switch looks like a mess), etc. They seem to be giving up a lot for just some worry about mis-concatenating strings. Type safety is good, but don't go overboard and forget what you are giving up. More and more Java code I see is under the hood very simple, but when all these extra abstractions are layered on top, it takes a week just to figure out Hello World. (not a joke actually serious about it taking a week) Besides the side-tracked rant, so this is the reason? Type safety so when you move code around you remain safe? In the instance of this, type safety literally means accidentally concatenating the wrong strings when move code. This seems like a massive premature optimization in process.
Seems like you would need to be generating an awfully large amount of code and complex code at that, such as a transpiler for those benefits to begin to outweigh the negatives. I've done a decent amount of code gen (C++ reg-ex DFA, more complex parsing automata, SQL in a couple languages, etc). The closest would probably have been the DFA in complexity where as the SQL would have been the most in terms of lines. But the SQL wasn't quite like this in that it might have been a 20k line file, but it was largely repetitious. I can see using it for the complex stuff, but the API for me is way too complex. I think all the specifics for an if-statement, how many classes are using the switch construct?, etc... Anything below the Block construct (approx) seems to be too much to pay for too little. It would nice to have blocks that can be manipulated programatically (and methods and classes -- albeit simplified a little), so I can start to see the benefit there. Below that and I think you more likely to make mistakes with the API and creating the builders (?) than with the raw strings. I understand a little more of this now. Thanks. I guess I disagree on the level of detail and size of the API (I tend to make small APIs so I tend to prefer them too I guess). Next time I'm gen'ing code I keep it in the back of head though.
I know what annotations are, but I'm still not following you on why they matter for this code gen stuff? Why would annotations being involved make this code gen library look more attractive over just print out strings? These two things seem to be orthogonal to me.
Sadly, this also disables drag and drop, so debugging drag and drop on JavaFX on Linux is a huge PITA.
Yes, thats true. I see two ways frameworks/platforms try to make things simpler - having good tools (.NET + VS, Rails, Ember CLI...) or make programming model itself simple although more low level than previous group (Node, Go web apps). Personally I prefer later the most.
&gt; Your approach to arguing this topic I put into category of "complexity? what are you talking about, you just do x, y, z...". I was approaching the discussion purely from the examples that the OP posted. There are definitely complexities in Java that can be tricky, but creating a new project in an IDE isn't one of those things. &gt; and one of Java's is that its big complicated mess I would disagree. It's verbose, but it's not particularly complicated. Jumping directly into Maven/Spring/Hibernate/etc, however, is. That's because you're learning 4 different things at once, instead of focusing on one at a time. &gt; My only wish is that Java comunity would acknowledge that and we could embrace simplicity What isn't simple to you? Java itself is pretty straightforward, especially compared to language like C++. Things like static typing, great IDEs, tons of libraries, etc. all simplify the development process. &gt; consentrate on frameworks like Spark People are free to use Spark if they want. Spring boot is there too. We don't need to concentrate on one or the other.
Here's how I would handle it: * Probably your printer connects like a regular printer, but with a weird paper format. So what you need is to print from Java. Well java [already does that](https://docs.oracle.com/javase/tutorial/2d/printing/). Nice! :) * Oh but you want *custom* labels? Well then you need a reporting engine. I would recommend BIRT or JasperReports (both are free, both have editors, and both will accomplish what you need). Start with a printer and a prototype, and work from there. At least, that would be my plan of attack. Good luck!
Nice. I like it ;-) Keep on programming.
Stop it. I don't want to be reasonable. Besides I'm one of those that can't stand functional languages. ;)
You know, I never understood this attitude. If you don't want to answer the question, move on. If you don't like the question, down vote it. What point is there in being condescending? You just alienate people from the sub. 
Great question. They are really just shorthand for anonymous classes (like you already had), but also reduce the amount of code required and increase readability significant. Also, java 8 included a number of features that made using them extremely easy, such as the streams API. 
=&gt; /r/groovy 
Resulting in useless and ugly code with no benefit, except that you're explicitely reminded of null-check. Thanks, I was aware from the start. Using Optional-Parameters here and there assumes that a parameter that is _not_ an Optional is never null and you could safe a null-check, but you can't guarantee that.
IMO not really, I mean there are subreddits for a reason. Otherwise you'd have posts from Clojure, Scala, Kotlin, Ceylon, Jruby, ... I'm sure noone minds a post here and there especially if it connects thightly with Java, like Spark Java does, but a whole series is a bit much.
I mean, Spark, Thymeleaf, FreeMarker - they're all things that apply to Java developers. I happen to be writing the code with Groovy, but that doesn't stop someone from plugging in pure Java. I wouldn't post here if it was a purely Groovy. Hopefully that's OK?
I am a regular Lombok user and have learned to live with its JLS sins and IDE woes because the value it provides was worth way more than the disadvantages. However, in the light off new processors like AutoValue and Immutables, I reckon its now possible to stay on the holy JLS path while keeping boilerplate low. I will be giving them a try on my next project before adding Lombok to the maven deps. I still feel that annotation processors generating a separate "hidden" class is as magical as Lombok's inline AST manipulation from a syntax / understandability perspective, if not worse, since Lombok merely expands on a user created class rather than creating a whole new class with an indeterminate name. In that regard, I feel that a limited macro functionality might not be such a bad thing in a language.
There are no classes that represent code statements so if you're looking for `for(...)` then you can search for it directly. Also a switch looks really readable considering you just have a chain of control flow methods in a builder that map to the same switch structure. You don't seem familiar with the library. It has nothing to do with concatenating strings as most of the actual code you emit is still strings anyway, it's about handling the structure and imports automatically which is actually the hardest part of plain strings.
Retrofit doesn't use an annotation processor or code generation.
Mostly for flexibility / customizability. With pluggable converters and call adapters it becomes really hard to offer that level of support at compile time. It's not impossible, just harder. Also with the fact that you're making an HTTP request the overhead of a few milliseconds to parse things with reflection once is dwarfed by the time it takes to make the requests. I'd still love to get around to do it with code generation just as an exercise, but it's unlikely to happen any time soon.
My funny logic unit was temporarily disabled yesterday. No worries. :)
Well no problem if you ask me, it's not me that decides anyway :D
&gt; If there would be arguments for using Optional as a parameter type that outweigh the arguments against, it would only mean that the class is better than it intended to be and everyone should be happy. Sure. But there are no such arguments. The article doesn't seem to address the non-negligible performance impact either.
Spring (and Boot) is pants. Wildfly swarm is teh bomb. 
This poor kid is gonna be looking for work some day and all these senior devs are gonna see this blog post and say 'no thanks' we don't need an attention whore or an idiot on our team.
&gt; The intention was that the example project being written in the tutorial project would be that something. Apparently you didn't find it or weren't sufficiently impressed by it. Yes, it is quite simplistic and doesn't really document more challenging situations. Maybe I will create an example project (in github this time :-) that showcases real-life usage of iwant. In the meanwhile you can take a look at iwant's own build at https://sourceforge.net/p/iwant/code/HEAD/tree/trunk/as-iwant-developer/i-have/wsdef/src/main/java/net/sf/iwant/wsdef/ I meant for introduction purposes. Basic examples started way too late imo in the tutorial. &gt; It's not sf.net, it's me. My tutorial generator shows edits as diffs so the reader can more easily track how the example project evolves. ok, I seem to have missed *This chapter continues from where Creating the workspace definition left us.´* &gt; Yes, I don't have any numbers. But iwant is very good at laziness: no classes are compiled, if no ingredients have changed. No module coverage report is generated (meaning: no tests run!) unless something in the module test-time classpath has changed. And so on. The user always orders some noun and iwant does the minimal amount of work to ensure that noun (file) is up-to-date. And, iwant refreshes targets in parallel, unless there is reason not to. For example, if I don't touch anything and wish for a coverage report, it takes just a few seconds for iwant to bootstrap itself and see that the report is up-to-date. If I touch a module that is depended by no other module, iwant only needs to test that module. And note: this requires no optimization effort from the user, unlike in many other systems where the user needs to request a "partial build." This sounds very nice, but nobody trusts pretty words :P Cheers! Keep up the good work, I shall test it if I have some free time :-)
Because the Kotlin community is stuffed full of half-wits who can't stop themselves from spamming Java threads with their hapless "why not use Kotlin" crap.
I really should make a proper test class, my main class is comically bloated with examples of very large boards for easy testing. The main method itself is literally 2 lines and doesn't reference any of the methods defined in the main class.
Fuckin autowire me some beans anyday 
I think we're on the same context
Backend : use dockerized spring boot. That is how things are packaged and moved around these days. Codebase and runtime in one containerized portable package. Front end : containerized React JS. Containers are the new jars. 
And now with kotlin you can create type safe dsl's that work well with your tools. I recently saw this new kotlin wrapper of Javapoet on GitHub. Cool concept. Brings it back to a more human readable form. https://github.com/agrosner/KPoet
I hope Kotlin dies in a horrible fire someday.
Or you could embrace the take over rather than sitting by and watching your skills become irrelevant. But seriously, will you elaborate on why you feel this way?
wow you really know how to get a girl instantiated...
The article is certainly well written and detailed but I still disagree with its conclusions as it leaves out several important considerations. 1) Many application servers advertise live code reload. In practice this only works for very simple scenarios and as soon as a certain complexity is reached they fall sort. The fact that a single company - Zeroturnaround- is making money from their JRebel product means that application servers (or micro-containers if you prefer) have still a long way to go. In the end restarting a FatJar (or the whole application) is much easier and safer. 2) Docker brings a lot of complexities on its own and is always a trade-off. In true Docker hype the article does not mention anything about monitoring/debugging and restarting Docker containers. Debugging a FatJar will always be easier than a Docker container, as there is one less abstraction layer. Docker also still has some issues with Java memory and many security concerns. 3) These days developer productivity is much more expensive than memory and CPU. I cannot believe that the article has a table that compares MBs. Who cares about MBs today? Does it really matter if an application takes 45MBs or 145MBs? A real, mission critical application will need far more memory than 45MBs (and that is OK). 4) FatJars do not really need an "administration" console if you already have a good metrics solution. 
I'd like to point out that being NP-complete only means there exist a class of problems that require exponential time to solve, not that all problems do. It's entirely possible that almost all problems can be solved with a simple algorithm or heuristic, and that the rest are basically worst-case situations for the algorithm. PS: It's not a Nobel prize (they don't give those out for computer science) but a Millennium Prize, and nobody is going to accidentally solve it with a simple algorithm.
I would also commend that going from tinkering with projects, to actually publishing it as a product is an order of magnitude harder, and puts you ahead of a lot of people.
What's this got to do with java programming? This is just a lazy attempt to advertise. 
I don't think anyone argues that Java the language is super complicated, even the title says "java projects". So my point is that Java community embraces complex projects With Spring, Hibernate, Java EE, where on other platforms you don't need that, same concepts are being done way simpler.
The predecessor of JavaPoet was [JavaWriter](https://github.com/square/javapoet/blob/javawriter_2/README.md). It had a much smaller API because it was a thin layer over string concatenation. With string concatenation, generating code was repetitive. For example, to generate a basic bean, you’d need to loop over your fields 5 times: once for imports, once for the field declarations, once for the constructor parameters, once for the constructor assignments, and once for the accessors. With JavaPoet you write one loop that creates everything and it puts things together in the right place for you. It’s like using a DOM API vs. HTML templates. It’s overkill in many cases. But if you’re generating sophisticated code like in [Wire](https://github.com/square/wire/blob/master/wire-java-generator/src/main/java/com/squareup/wire/java/JavaGenerator.java), it gets the job done well.
&gt; With JavaPoet you write one loop that creates everything and it puts things together in the right place for you Can you point me to an example that shows the difference between the two. Unless you have bean specific methods for generation, I'm having a difficult time understanding how that relieves you of work. (I think just the JavaPoet would be enough to look at. I'm not a JEE person, but I think I can infer the string building from that.) Also are there different backends? That would be another positive I can see. Like Kotlin instead of Java or even Java 8 instead of Java 5?
For runtime code generation I'd rather generate byte code right away, e.g. using ASM and/or ByteBuddy.
Guys, say with honesty, how many of you obey this law? On my previous projects it was extremely hard to enforce it.
The latest shot by Spring / Pivotal "Gartner Reports JavaEE obsolete" was very counterproductive as it was read and spread quickly as "Java obsolete" by everyone else.
wow that's pretty horrible!
I'm not sure what's horrible about a project that specifically aimed to experiment with an approach and with the creation of tooling which would best support it, except perhaps for the part where people subsequently tried to apply the rule to projects without the necessary tooling. That part is pretty horrible. ;)
&gt; I don't think anyone argues that Java the language is super complicated I would argue that. It's not a particularly complex language. Yes, there are "simpler" languages out there, but that doesn't make Java complex. It's incredibly popular as an introductory language in college (along with Python), and it can be easily grasped. &gt; even the title says "java projects" I'm not sure what you're saying there. Java projects, to me, just means Java projects? &gt; embraces complex projects With Spring Spring used to be quite complicated with the XML configuration, but projects like Spring boot have completely stripped that away. Fully configuring an application requires virtually nothing nowadays (sometimes simply including the dependency). Documentation is also very clear, along with plenty of tutorials and examples. &gt; same concepts are being done way simpler. I'm not sure you appreciate just how much Spring includes. Sure, other frameworks and languages might do basic REST services better - but what about everything else Spring does? Security (OAuth, Kerberos, SAML, etc.), LDAP connectivity, database connectivity (RDBMS, MongoDB, Redis, Couchbase, DynamoDB, Hadoop, etc.), actuator endpoints (metrics, shutdown hooks, audit, process monitoring), ActiveMQ, logging, social network connections, HATEOAS, etc. There's an *awful* lot that it gives you in a remarkably simple way.
Is there a library that is able to analyze Java programs and is able to refactor existing code? Sometimes to refactor a large legacy codebase I'm in a similar situation as with a code-generated pile of files. I want a simpler single refactoring algorithm that helps me transform the existing code. Maybe what I'm looking for is the project spoon, but I haven't used it myself yet. http://spoon.gforge.inria.fr/index.html I had tried walkmod before but it seemed much more limited. http://walkmod.com/ This project uses spoon and JavaPoet: https://github.com/SpoonLabs/spooet
I assume you're not using your real name so this can't happen to you.
&gt; The article doesn't seem to address the non-negligible performance impact either. You're either inconsistent or use arrays instead of ArrayLists.
Colorized output
Venkat Subramaniam deals with the law of demeter in one of his devoxx talks https://youtu.be/llGgO74uXMI
&gt; With JavaPoet you write one loop that creates everything and it puts things together in the right place for you. This was my main draw for using a model-based approach. It lets you structure the code however best fits the project, rather than rigid concatenation. In my case, I used a simple rule abstraction to break apart into more consumable pieces. I appreciate jnordwick being mindful of not attacking the [code](https://github.com/ben-manes/caffeine/tree/master/caffeine/src/javaPoet/java/com/github/benmanes/caffeine/cache), but I don't mind that as it might lead to improvements. (We had chatted earlier this week, so I'm pretty sure this is what he was skimming)
I have written simple java program for the same purpose: http://marjavamitjava.com/underscore-keyword-java-9-use-java-code-check-code/
If you just write functions that delegate to lower level functions, then never. However, sometimes I used it as an indication that the api is wrong and you are exposing to much implementation detail. For example, image a Person class that contains two Leg objects. Each leg object has a move function. To make the person walk, you might right: person.getLeftLeg().move() person.getRightLeg().move() person.getLeftLeg().move() person.getRightLeg().move() If you tried to re-write this using the Law of Demeter and you wrote person.moveLeftLeg() person.moveRightLeg() person.moveLeftLeg() person.moveRightLeg() you'd be doing it wrong. What you should do is to look at the operations and realise there is a higher level abstraction so you'd write person.walk() I'd say that if you can't find that higher level abstraction then the law probably shouldn't be applied. 
If I need an array and not a list, yes. Caching the retrieved value in a local is usually an acceptable middle-ground, in any case. "The JVM will inline it" is magic that doesn't exist. Such an attitude betrays either a lack of understanding of the interrelationship between Java, the JVM, CPU caches, and the prefetcher, or a disregard for it. Either is excusable but the latter requires a mention when making a case for hiding a parameter behind an objectively-unnecessary pointer indirection. If that were a trade-off for vastly improved robustness or maintenance -- such as telescoping method signatures, a well-known pattern for substantially the same problem -- there would be a strong case, but `Optional`'s ergonomics are not good enough to justify it.
That makes little sense to me, because applying the Law of Demeter isn't only about redirections of simple getters and setters (and I'd argue if you have multi-level redirects then your model is wrong and hiding that fact through such multi-level redirect access methods is the opposite of what the Law of Demeter is supposed to do). The Law of Demeter about encapsulating internal logic. Stupid example code: PaymentService service = new PaymentService(); CreditCardProcessor cc = service.getCreditCardProcessor(); boolean success = cc.tryProcessCreditPayment(amount); if (!success) { DebitCardProcessor dc = service.getDebitCardProcessor(); success = dc.tryProcessDebitPayment(amount); } ... Replacing lines 2 and 3 with `service.tryProcessCreditCardPayment(amount);` and line 5 and 6 with `service.tryProcessDebitCardPayment(amount);` is not the intended outcome of applying the Law of Demeter. The correct application of the Law of Demeter moves the entire code block into the `PaymentService` class and exposes a single method `tryProcessPayment` that hides all the internal details. Something like this cannot possibly be automated or generated.
You've trotted out an example where everyone including me would agree with you, aside from describing it as strictly a Demeter case, and you're using it to, what, diminish my point that people mis-apply Demeter because they don't know that the project it came from built and depended on tooling as part of an explicit experiment in managing dependencies and indirections in a different way? On the basis that your example can't be automated away? What are you arguing against? Are you even sure? This much I can say: Go read up on the Demeter project, since you obviously haven't and I'm not doing your homework for you.
except that most of the DI-managed components, services, etc. are .... you guessed it - singletons. So, this should be rephrased to "unmanaged singletons are an anti-pattern". Or, don't use singletons unless you really know what you're doing. 
I'm not arguing about the fact that they had tools that helped them, but that the tools are critical to using the Law of Demeter, as you seemed to imply in your first comment. Sure, they did have code generators for their propagation patterns. Sure that saved writing some boilerplate code. But it a) it was only code generation, not automatic maintenance, b) it required a domain specific language to describe classes and the propagation patterns - so it's not exactly free either. As for my example not being an example for the Law of Demeter; I have to ask you: Have you read the paper yourself? https://pdfs.semanticscholar.org/052c/0646cc528cbdd33b58fc7bc933689fc3de3e.pdf Pay attention to the Example chapter and figure 4. It deals with a Library System that can search the Archive for a book reference. The bad style example does something similar to book.search(); archive.getMicrofiche().search(); archive.getDocuments().search(); The good style example does something like book.search(); archive.search(); whereas the `search()` method in `Archive`encapsulates the details of the search (in the Microfiche and the documents). They then go on to explain why one is a good style one is bad style. &gt;Assume the library installs new technology and replaces the microfi che and document sections of the archive with CD-ROMs or Video-Discs: .... The programmer now has to search *all* of the methods, including the searchBadStyle method, for references to an archive with micro fiche files. It would be easier to limit the modifi cations only to those methods which are attached to class Archive. It's not simply about replacing multi level method calls, but about hiding the internals, by trying to enforce not calling more than one level deep and designing your classes in such a way that they don't have to. 
BSON is another binary interchange format. JSON-B is basically JAXB for JSON: it's an api that allows you to convert between java objects and json data by autimatically populating and serializing fields. 
That's for Postgres jsonb dataype, which is different. This JSON-B is an api for binding java objects to JSON messages: http://json-b.net/
If you have academic mail account under edu domain, you can quickly sign up for microsoft account for 3 month subs in pluralsight. There are very useful courses in Java multithreding and concurrency covered by Jose Paumard, a Java Champion and conference speaker. 
Libgdx is a Java/JDK lib. https://libgdx.badlogicgames.com/features.html
https://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601
what purpose would that serve
wildfly swam is pretty cool. spring boot is too.
Oh, well now I feel dumb. I googled it and assumed, since it makes sense. Thanks for clarifying.
I was referring to classes with a private constructor and a "getInstance" method which is how Singletons were originally created in Java.
&gt; I would prefer back end development but realize that front end web development seems more likely. I don't think that's true. Personally I avoid frontend work like the plague and have never made a mobile app. Never been at a loss for work. If you mean they won't hire junior people for backend work, that's not true either.
Finally!
Maybe I'm misunderstanding you, but it seems like you said that the team wrote a software tool that maintained all of the wrapper functions that they needed to follow the Law of Demeter. I'm sorry if I've misunderstood, but having to develop a completely separate software application to maintain your code because you have want to enforce a particular coding style seems like an extravagant waste of time. Why maintain one complicated software application when you can maintain two? 
Please ask your question at /r/javascript. Despite the similar names, JavaScript (officially known as ECMAScript) and Java are not the same languages.
Nicely written piece!
I have an academic account and will be trying out the course, thanks for the help!
Steganography WIKI if you dont know what that is :) -- https://en.wikipedia.org/wiki/Steganography
Thanks for suggesting this awesome book, I read a few reviews and details about the book and it seems like the bible as /u/kkapelon suggests. I am unable to find the correct edition of this book, I found this here https://www.flipkart.com/java-concurrency-practice-1/p/itmdytstgbfk7g8e, this is the first edition - I am trying to find the latest edition. Can you provide some page where I can find edition info of this book? 
Tell that to the authors of `HashMap` or `ConcurrentHashMap` (whichever way of treating `null` you prefer).
Well, a Singleton is basically a global variable...
I love singletons but they either should not have state or be immutable. 
Correct, this is the difference between "single instance by design" and "single instance by application choice".
Sell you? You know Payara, GlassFish, WildFly and TomEE are totally free, do you?
I would rather Java allowed us to define objects on the stack instead of more efficient "pointer-free" (whatever that means) objects on the heap. EDIT: Wow. People actually choose to hate the truth? Well, get on with it then. Downvote this to oblivion all you like, but that's not going to change reality.
no problem. I never did find the one I was trying to find, but subsequent searches did seem to indicate the link I provided is well regarded in java circles. Another thing which could be useful is to look at the historical articles about the jsr's which have enhanced java concurrency, specifically jsr 166 and 236. The articles which detail these will be of the "here's how we used to do it, here's some examples of using the new constructs". Doug Lea is a name to also reference in this space. I did notice you mentioned concurrency AND GUI work, so make sure you're not spreading your net too wide. In GUI work the usual mantra is "don't block the ui drawing thread"; if that's the thrust of your current studies, make sure you're not biting off too much as multithreading and concurrency are huge topics. Good luck!
When you use an Optional parameter you are in charge of the contract. You tell the callee, that he can explicitly pass a nullable value and that you make sure to check it, because you need to check it. But when you use a *non*-Optional parameter you do the exact same implicitly. You're just not forced to check it, but because you're a good Java programmer, you do. You would only gain something if you could tell the callee, that when he passes null to any of your parameters he violates the contract or not. Which is exactly what you can do with `@NonNull` or `@Nullable`.
Some of that stuff doesn't seem so bad. The "bad" code is still pretty compact and readable.
&gt; broken module system. Agreed. 
Why broken module system? I'm not challenging, I just wanted to know.
It's not super explained, but now you can safely write your own custom JSON layouts as a pattern layout thanks to the [new JSON %encode option](https://issues.apache.org/jira/browse/LOG4J2-1848). Combined with some of the appenders available, you can log arbitrary data using a minimal "framework". Rather amusing abuse of functionality.
You don't really need servlets. Jetty, Netty, and Undertow servers can all work without servlets. Frameworks such as Pippo, Jooby, and Spark Java wrap those servers and have nice high-level APIs. JSP is a bit complex whereas llghter weight templating can be nicer, such as Freemarker or Velocity. Fundamentally templating is just a nicer way to output HTML than building up a Java string with HTML. Those templates return HTML and JS. Instead of server-side templating you could just do client-side rendering which means the templating is all done in JS basically. You serve some JS files and they reach out to the Java server on their own. I'd recommend, find some hello world examples for Spark Java that use Freemarker and you'll get a quick glimpse of how a lot of apps can be built today.
i do this and it works great i serve an HTML shim that just loads the javascript. and then have a RESTful api that the javascript accesses for the data, and then it renders the full html dynamically 
A nice common ground there is to extract code from Commons projects and just copy the code you use. This way, it's easier to add more of it over time if necessary, plus you can get bug fixes.
or just explicitly document that nulls aren't allowed (though i guess that is a form of anticipation)
yes, sell. ee exists to hawk wares. that's ok, but it is what it is.
That was not directly related to the point I was making - after all, the delay is not that substantial. In recent years, Java releases have been around 4-6 years between major versions (still far better than earlier days, of course).
Have you heard about Dagger 2?
Everything is what it is, isn't it mate? At the end of the day Spring is eager to sell you a support contract as bad as Jboss is. And I don't blame either, since at the end of that same day you do want the devs working on those things to afford a hot meal, don't you then?
Sorry, didn't mean to annoy. I read that as more "I don't need Joda because I have Java Time." rather than a JPA style, "I still need EclipseLink". Just trying to understand. Thanks!
Trailing numbers in module names are [allowed again](http://mail.openjdk.java.net/pipermail/jpms-spec-observers/2017-March/000839.html): &gt; Abandon the current proposal [2] to mandate that module names used &gt; anywhere in source-form module declarations both start and end with &gt; "Java letters". That doesn't mean they *should* be used for versioning purposes, but there are valid use cases that the expert group acknowledges. I agree that there is potential for conflicting names, e.g. the "spark" case. I believe this was acknowledged by the expert group and the official reason to allow this was "a name only has to be unique inside the module graph of your app, not globally", but I could be wrong and I'm on mobile and too lazy to find the discussion on the mailing list. Let's hope we won't get a dyytopian future where all the good names are taken by long abandoned projects. :)
Any real world project should use DI in this day and age. If not, then you have bigger problems than singletons. If you work in a prototype just for the weekend feel free to do whatever you want.
The article says that you yourself should not roll out your own reflection code (in a vanilla Java application). If other libraries (e.g. Hibernate) use reflection internally then this is fine.
This solves a problem that should not exist in the first place.
I would advise you to read the difference between procedural code (in C) and OOP code (in Java). One is not strictly better than the other. But if you write Java you should lean towards the OOP way.
&gt; What else is a possibly-null parameter but optional? A possibly null parameter is still required to make the calculation work. An optional parameter is additional information which absence doesn't matter. &gt; And of course I prefer overloaded methods or varargs before resorting to Optional but sometimes the latter is the best of these options, in which case I prefer it over null to make the code more explicit and less ambiguous. Me too but I view the Optional type to be not up to the task at all. Especially when it leads to resorting to unwieldy `if(optional.isPresent()) { do(optional.get()); } else { /* ... */ }` or `optional.ifPresent(this::do);` which is end-result is the same as a normal null-check without the perfomance penalty of Optionals. 
Nice demo. I think more people should be aware of the vertical split feature in IDEA.
There is still hope I guess. It's in the hands of the community now. And Maven / Gradle so they will make modules work with the version attribute. The discussion would be here: http://mail.openjdk.java.net/pipermail/jigsaw-dev/2017-January/011106.html I don't see any definitiv answer. Just that the people answering agree on a complete removal of automatic modules in favor of stability and clarity. Anyway it still doesn't solve the version problem, which is so important for any opensource module system to work. Modules need a defined standard and mandatory way to tell what version of module they depend on. Otherwise it's useless. The whole thing will just break once someone updates a module many depend on.
Yeah, use `enum`
Good overview. I wasn't aware of JSR-352
Screenshot plz :)
My singletons are enums. Only correct way to write a singleton.
I just released version 1.4.0 Please tell me what you think about it. Thanks !
Yegor uses lots of hyperboles to get his points across and that probably makes most of his articles that controversial. I don't agree with him at all times either, but most of the concepts he describes have a certain truth to them. I agree that the linked code is an abomination, I didn't even look at the example when I re-read the article. The problems will probably depend on the people and the application itself, so I still disagree that DI frameworks are a must as they probably cause more harm. But let's leave it at that and call it a night. ;)
Isn't WhatsApp known to aggressively shut down 3rd party clients? 
Adding unnecessary code is an antipattern imo. In exaggerated example: When i am doing something with 100 lines that could be done in 10 of equal complexity, i am doing something wrong. Less readable, maintainable and so on. 98% is purely my feeling, not hard data at all. The article states what the harmfulness is about. Most of the time it simply is not necessary by any means - just the old "oh i see, i could use a pattern, i'm not sure why i should but i guess this is neat" instead of "i have a problem that this pattern will solve".
I was incredibly surprised when I read they didn't include any support for versioning. I can't understand why they made this choice.
I don't think that is possible without writing a custom component.
I think it's faster maybe?
You'll have to extend jlabel and override the paintComponent method to draw the image 
What I mean that there is no "center crop" in Swing. If you want something like that then you'll have to write a custom Swing component (by extending JComponent or JLabel) which does the calculation and drawing for you. Or you could redesign your UI around this issue, by f.ex. doing the cropping in photoshop or using JScrollPane.
Probably not the reason of the developer in the video but I choose fxml over code because it looks clean and is faster to develop. Kinda like MVC in web dev
Me neither. Version selection is a inseparable from dependencies. We can only conclude that Jigsaw is not meant for effective dependency management. What it is therefor good for is beyond me.
Yes, but with valid arguments and no intention of forcing one's opinion.
i want log 4j to die forever. thank you.
and please.
First, where's the need for such a comment? Second, OP says "I *think* I'm proficient" Third, OP isn't appealing to the degree (OP even says it's not a CS degree) to justify being proficient. 
*Why* are you unsatisfied with your current career path? Whatever your issues, Software Development may have them too, or other potentially equally annoying or worse ones. Based on what you're saying I can't see you would ever have a problem switching to Software if you really wanted to. But if I were you I would consider finding a different job within your existing career first, especially since the money is better.
&gt; God forbid we try to pre-optimize our code by not including bullshit in the first place. Said all C++ programmers about Java. Also, do you apply this logic to arrays and array lists as well? Because it surely would apply just the same with lists adding indirection for a few stupid methods that might just as well be performed in place or with utility methods. If in your code base premature optimization trumps being explicit and unambiguous than that's your prerogative. Just don't assume that everybody shares that opinion.
The big headline change is not really all that visible to end users, which is the change in the resolver. 
and you can create it via scenebuilder
You can easily separate layout by putting it into a second class... (for example Main.java and MainUI.java). IMHO FXML only complicates things (another syntax to learn, no compile-time type check, onAction binding is more complicated than just `onAction(e -&gt; ...)`)
I assume people work within the confines of the language, if that means following the authors recommended practices because that's the best they can do without worrying about people like you then so be it. You seem to wish for something the language doesn't have while leaving open a NPE hole in your software. You also seem to think that no one would ever call your method with a null parameter despite the irony that you are abusing how Optional was intended for use in first place. Generally I do have personal rules of when and when not to use explicit implementation at a low level and times when abstraction is high but I'm a big boy and can do both within the confines of not ever using an Optional as a method parameter, because its the CORRECT thing to do. 
that sounds almost microsoftian. do all oss devs flip burgers or just some? it's not for me to "let" people do anything.
I've been a Java developer for the past 11 years and never had exposure to these frameworks. Just starting to use Spring Boot. It's really fast and easy to use. Built out a couple of restful endpoints and looking at hooking up hibernate.
It really depends on what type of application you're building. For classic enterprise applications with static forms for data entry FXML is better. On the other hand if your UI is highly dynamic then FXML becomes a PITA. As always - use the right tools for the job.
Neat hack, but `injectIntoUnmodifiableMap()` makes my skin crawl!
Have only used Java/Java EE at work but recently I looked into Spring Boot on my own. It is really good when you get a hang of it but occasionally I have a feeling of missing out on something because of all the autoconfiguration (especially the security and persistence part). But the more I research it it is really not that much different from traditional Spring (MVC) -&gt; which is what most tutorials use. I also like the fact that it is similar and easy to create MVC app as it is to create a REST API.
So are you able to use Kotlin as an alternative to groovy out of the box now?
How does it compare to rails/django/(insert cool web framework)? I'm an Android dev with decent java exposure, but never tried anything like writing web apps in java.
I want all the other logging frameworks to die... now and forever
spring is a collection of libraries. the "core" and original "spring" project is dependency injection. other spring-branded libraries build on this. one of the most common is "spring mvc" which provides a mvc-style servlet-based framework for web applications.
Hehe, Maven's holding steady - they don't even have to release anything new :)
Yeah I get that it just seems disingenuous to call something simply a bit slower "harmful." As pointed out in the post try-with-resource prevents the bug potential the author's talking about. Still a nice PSA I guess
Files.readAllBytes()
I wish they would distinguish between Groovy and Gradle. Are people using Groovy for things other than Gradle? That would be interesting.
Very clickbaity title &gt; Now that is not an issue for short lived programs… or for programs that do very little file I/O… but for programs that create a lot of files, it can cause issues. So at least 90% of programs won't have any issues, if they still use old-io in some places.
Since this is not in the faintest Java related, it is completely off-topic here. At best, you could post this in /r/cscareerquestions or in /r/learnprogramming, but I doubt that it will be received well in the latter. **Post removed**: not Java related and thus off-topic.
Problem solving is a key part of the job mate. Even after 18 years of it I still get insomnia when I can't solve a problem. I send myself e-mails with potential solutions to problems. It is just part of the job. I call it an infatuation.
Why synchronize bookmarks using GDrive? I suggest being able to save to a file of the users choosing, that way one could backup the bookmarks to a code-repository – and share it amongst team mates using a VCS.
Result: declining. 
JPA caches are pure evil. Unless you're clever enough to be able to design with a cache in mind, in which case it's certain you could just write better sql. Don't do it, it never really works the way you expect it to. 
K
Any feeling for testing frameworks for Java apps? I.e. What's hot and what's not? Just out of interest. 
.... Then you were doing something horribly wrong with Gradle. It should have taken approximately 10 minutes and 20 lines to be able to compile/test/assemble a new Gradle project.
He's talking about the EntityManager, which technically is a cache. I read the headline and thought he meant the Level 2 cache, which would have been much more interesting. He didn't even cover the more interesting aspects of the EntityManager, such as application managed vs. container managed, or transactional vs. extended.
Fair enough. If you care and would like to put up a github project, I'd be willing to check it out.
Check out Play if you're looking for something similar to Rails/Django. Spring is anything but "cool" imho. It's very comprehensive and reliable though. And getting started has become much easier thanks to Spring Boot.
Ant REPRESENT!!
&gt; The Spring Framework is an application framework and inversion of control container for the Java platform. The framework's core features can be used by any Java application, but there are extensions for building web applications on top of the Java EE platform. Although the framework does not impose any specific programming model, it has become popular in the Java community as an alternative to, replacement for, or even addition to the Enterprise JavaBeans (EJB) model. The Spring Framework is open source. https://en.wikipedia.org/wiki/Spring_Framework
I think this is the first post I have seen on /r/java that properly explained Java EE. Have an upvote. :)
Or just use https://github.com/fralalonde/iostream.
NO LOG4U!
You should check out Play. You can use Twirl as the template language, and do lots of cool things. There are youtube tutorials, but I'd go with the starter templates: https://playframework.com/download#starters and from there, you can run a server and start typing things, then see them show up in the browser as soon as you refresh the page.
just dig in: https://javalibs.com/compare/junit-vs-testng
Hi. If you want others to use your library it needs to be available in a public maven repository. I also noticed you don't use Maven or Gradle for your builds and instead added the libraries to your github project. Something to look into. 
Comparison to Netty? 
indeed. You can write perfectly fine enterprise applications using JEE, but what makes JEE a pain to develop in is testing. Not just compared to Spring, but also compared to most other frameworks like Dropwizard (eg for Web APIs). Unfortunately, I do not see any major activity to try to improve such major limitation in JEE :( (no, although Arquillian helps a lot, it is "monumentally" more difficult to setup compared to testing in other frameworks)
doesnt Spock offer this already?
JAX-RS, CDI + other Java EE parts (preferably not JSF or EJB) with Wildfly Swarm or DropWizard should be fine.
What problems? I use both JavaFX and WPF and I can tell you that JavaFX &gt; WPF.
What's the better way to read a large binary file into a byte array?
[removed]
I'd think so. Particularly classes like Vectors or HashTables for which there are proven ways to refactor them into their modern replacements
I didn't mean client code using them, but their mere existence in the JDK... as in: Does the JDK have broken windows? :)
But the classes in question aren't even deprecated...
But why would I want to do that? So if something goes wrong in production I won't be able to know what happened? Great idea! NOT.
Oh yes, please. There are many reasons why you'd end up in a situation where you desperately want to do this. Our example: We have to maintain, extend and adapt a huge legacy code base that until 3 years back only was covered by integration tests. As a result, there's a lot of static methods, and while we try to write nicely testable code and good unit tests with the help of Mockito *now*, we almost invariably run into trouble when dealing with these old static methods. Big refactorings just to make the code easier to test *without* the safety of a sound unit test coverage seem neither a good idea nor a good investment. Our solution 3 years ago was to use PowerMock for these exceptional cases. But now, we cannot update to Mockito 2.x since PowerMock is incompatible with it. Ideally, we'd like to ditch PowerMock, and only rely on Mockito. 
https://bugs.openjdk.java.net/browse/JDK-4058336 (KeyEvent.VK_SEPARATER case)
Because people say so! Its harder to test singletons so we shouldn't use the language features that are meant for them and instead use a DI framework that mimics it. Also who likes their code to start up quickly? I want to declare all dependencies at app start time even if I don't need them. Why would I want the language the handle lazily loading everything and make me more productive.
Lol at least your old code has integration tests.. :) My biggest issue I found with PowerMock is that it totally broke jacoco coverage for a project that I'm using it on
you are so correct. Below is KeyEvent.java from the JDK 8 /** * This constant is obsolete, and is included only for backwards * compatibility. * @see #VK_SEPARATOR */ public static final int VK_SEPARATER = 0x6C; /** * Constant for the Numpad Separator key. * @since 1.4 */ public static final int VK_SEPARATOR = VK_SEPARATER;
&gt; Added the new constant, but did not deprecate the old one. And no explanation given for the lack of deprecation.
Most of the rules seem common sense, at least for experienced developers, nobody will argue against them. However, we can often see how some of them are violated on a daily basis, even on experienced teams. Good post.
I've never really used WPF so I won't argue about which is better. I've developed a big JavaFX application for a large financial institution and we've encountered several issues with JavaFX: 1) Bugs. Most of them were not that critical (there was some workaround available) and it generally got a lot better with Java 8. However the development process was really a PITA. Found a bug in JavaFX 7 ? It will be fixed in 8. If you discover a bug now then the bugfix probably won't make it into 9. This means that it can take well over a year till something gets fixed. The problem is that although JavaFX is not part of the standard library they don't do independent releases. 2) Too little too late. JavaFX1.x was a failure and it took a while till 2.x got stable enough. In the mean time everybody moved to web. Oracle was never really committed to the technology. This means that the tools / documentation / resources are not as good as they could be. Finding FX developers is really (or just people who have at least basic knowledge) is extremely hard (and certainly harder than finding someone for WPF). 3) Testing could be easier. The headless-toolkit implementation is useful but not part of the default distribution so you have to build it yourself from source. I generally like FX, it has some really cool concepts. The problems I've encountered aren't really technical. 
It's not a bad practice to use static methods per se. The problem is that static methods are tied to a specific class, non-virtual and can't be overridden (not without hefty classloader/bytecode magic). This makes static methods really painful as factory methods or instance methods for singletons, especially if you want to test with mocks. OOP favors polymorphism so you don't couple yourself too tightly to your dependencies, and you can swap them out, like with a mock. Being able to write non-painful tests is a nice benefit. Stateless static methods are no problem at all and are super easy to unit test.
That guy is brutal.
Did you read the article or lookup anything on singletons.
I think he is generalizing. The key of having understandable code is good organization and good use of standards. And that's easier when you have less LOC. But one is not always a direct consecuence of the other, that is true.
Could talk more about not using hibernate? I mean, why avoid? Any use case where it can't be avoided?
MVP, meaning Minimal Viable Product? MVP is awesome. It isn't about getting something on the shelf as soon a possible, only that if the project were cancelled today, there would at least be something to put on the shelf. Also, the whole client feedback thing. The best part of MVP is that it forces you to take vertical slices through the system, so in each increment you are testing full stack, in production (or production-like). So, you're doing regular system integration when the system is simple, rather than doing system integration after many features have been added. I think this is really cool and is a lot less painful than delaying system integration when a lot more things can go wrong. Also, MVP is nice because since you're delivering in increments, there's a lot less code that's been added, so I can easily add a refactoring and cleanup step before I call the story "Done Done". Anyone rushing you to "Done Done" should be promptly tarred and feathered. SCRUM is not about going as fast as possible, but taking lots of measurements so you can produce cool looking burndown charts. PS: I learned the terms PSPI (Potentially Shippable Product Increment) and MMF (Minimal Marketable Feature). A MMF is likely to need several PSPIs, since the PSPI produced by the end of the sprint probably wouldn't be a feature that is fully usable.
Some of the time it would be too costly to try train GUI designers ( and related jobs) in hand coding. And a lot of the other times, it is hard to get a feel for your GUI component's positions and sizes in relation to each other by hand coding.
For security. You give the less details you can about you infrastructure and if some attack was partially successful. I don't know JAX-RS, but usually there are other way to log exceptions. 
What's the value in mocking a static utils method? 
I originally thought that too, that this was supposed to be about suppressing stack traces from HTTP responses. Stack traces in HTTP responses are clues for attackers: security no-no. Nope, it's about cleaning up the log. This guy doesn't like 40x and most 500 stack traces in the log file, and he'd rather log the error at the application layer where there is more context. So instead of both a JAX-RS stack trace and and an application stack trace, he just wants the application stack trace. Kind of obsessive, if you ask me...
You totally wouldn't! I mean, you can just call the method directly in a unit test. Simple args in, assert value out. If you need to mock a static method, that's where the pain starts.
I did say *per se*!
&gt; Practical hibernate step one: avoid at all costs &gt; Step two: apply bleach to ocular regions Some background would certainly be helpful to support your comment. I can think of a couple use cases like a trivial low traffic CRUD app that makes perfect sense for Hibernate.
In my experience we only mocked static methods because the entire code Base was static methods......
Just wanted to share.. I was wondering why I had to mock static methods, as it appears to be a bad practice (I didn't really know that tbh), and especially because the project I used it on was fairly new. Turns out that I had to mock JNDI lookups off an InitialContext because I was forced to put the microservice on an app server :(
&gt; But in practice and in my experience Not in my experience... &gt; The problem is that someday never comes If you build in increments, it's both very easy to not pay attention to what you're doing, and it's also very easy to pay extremely close attention to what you're doing. If you follow the entire process, you're supposed to pay attention to what you're doing. In Scrum, that's called inspection, one of the most important parts of the process. If they day never comes, somebody wasn't doing their job. &gt; all due to MVP I don't think you can blame MVP if you missed a very important step. &gt; it is almost always to justify a shitty solution Correlation does not imply causation. Sometimes a shitty solution is just a shitty solution. If argument is, "doesn't matter, MVP", the correct response is "MVP doesn't matter, it's a shitty solution". &gt; The op is literally talking about the end result of an MVP driven &gt; product. That's not what I read at all. I read an article about the importance of cleaning up after yourself as soon as possible, which is what you should be doing in Scrum as a rule.
I had my share of bad experiences with Hibernate... what's your story? My main issue with Hibernate is that, as on ORM, it should try to abstract from the database, so that you can concentrate on the business logic of the Java @Entities, and only look at the low level SQL when you need to improve performance. Problem is, with Hibernate you never know how it is going to screw you up, and you need to debug every single damn generated SQL statement to avoid (logical/semantic) surprises... my "favorite", if you save an entity `x` with `persist(x)` and save its id in a variable `id`, then, when you read it back with `find(id)`, in Hibernate the object you get back might not have the same structure of what you just saved...
Not if you write self contained methods that have minimal side effects. Like pure functions.
I used sed tricks to colorize Maven's output for a long time now. This is better because of buffering issues that could happen and because of various details in Maven's new colorized, like the plugins that run, the way things are colored, the shades, etc. One thing I had with sed that I have had to (reluctant) give up though is colorization of test runs and test results. I could not just delete my sed patterns for INFO, WARN, ERROR, and keep my patterns for tests either. Piping Manen's output caused it to turn off all colors and there is not --colors=always flag. So, it's an improvement, but also a loss in functionality (for me at least). 
Thanks for taking out the time and answering, I'll go through the resources.
I switched over to using zsh/oh-my-zsh with the maven plugin a few months ago, and realized that, while the color was great, something about that plugin swallowed any input prompts. For instance, I would (try to) create a project from an archetype, and it went through the whole process of downloading things, and _looked like_ it froze. It wasn't until I disabled the plugin before i realized it was the plugin somehow swallowing input prompts.
If you don't mind me asking, why no EJBs?
mvn | lolcat
Meh, use PowerMockito
Agreed, and that's been my position for a long time. Also static methods are not inherently evil. In a code base that is on the more functional side, you'll most likely see a lot of static, pure, methods. 
Har har har ;-) 
using it to build a configuration tree
can you give me some advice? i am ok with core java, and now i want to do some interaction with an rdbms (e.g. postgresql) which java technology do you recommend?
1) Agreed. Though you can get the fixes sometimes with openjdk. 2) People had already long before moved to the web. That's actually the main issue. There's often not a good enough reason to expend the extra work on a desktop application when the web is so easily distributed and deployable. You see the same thing in Windows land with .NET. 
I just upgraded a couple projects at work today. Our big complicated project turned out fine so far, but I won't get to try a release build for a while yet. But a tiny little two module project for some reason fails when trying to deploy a snapshot build with an http 417 error from archiva. No idea what that's about, but switching back to 3.3.9 fixed it.
Given an interviewee... Junior: do you understand basics ( collections and the advantages and disadvantages of their usages). Mid: getting into implementation language, problem solving skills and specifics. Senior: explain how you got to this solution like I don't know anything, regardless of language. Let me know you can efficiently b solve problems AND teach others your dark magicks. That is all it takes to get a job. Either know or show a extreme willingness to learn.
CI is worth it for a single dev - it's especially helpful for projects that don't change a lot so when you go back to it, CI is already there waiting to help you.
Agree! I do wish that it even did a decent job and the dependency management case. I have found that the only approach to make this work is to delete the entire node_module directory when I've done anything but ADD a new depedency in package.json. And yes, NPM does ALSO download the internet.
Static, pure methods like you describe them (e.g. like StringUtils) are perfectly fine and do need mocking at all. So you can write unit tests for them right now without any extra support from Mockito.
&gt; I understand that a lot of this sounds like heresy I don't think so at all. Arrays do have performance benefits. If only they had a bit more of a sophisticated API... &gt; OK, not really, but still this whole process has shaken a lot of my confidence in the OO paradigm. Or just Java's flavour of it. In hindsight, it's hard to understand why value types (hopefully coming soon) haven't been there from the beginning.
We only know of one case where maven fails, and that's when an interface changes and it doesnt' recompile the class. To resolve that case I added: https://github.com/DGHLJ/pub-maven-archetypes/blob/master/parent-poms/pom.xml#L1176-L1210 To our parent poms. 
That sounds better. But DI is not a silver bullet, it's a design pattern that should be used when appropriate (which is most, but not all cases)
You SHOULD NOT upgrade your build tool during the course of a project. You SHOULD use the Maven wrapper at the beginning of a project https://github.com/takari/maven-wrapper
-Screencaster here- You basically have three choices: Plain JDBC, jOOQ or Hibernate (or some other JPA implementation). My plan is to actually post screencasts for all three of them, but it's going to take a while. My advice would be not to worry too much and get a good feel for plain JDBC (and SQL/your database!) first and then go on to jOOQ or Hibernate or both. 
The main problem with Hibernate is that people who use it usually have a) no proper understanding of SQL/their database and b) no proper understanding of Hibernate. Yes, Hibernate has its quirks and drawbacks and is not the perfect hammer for every nail . But my guesstimate is that 90% of the problems people have with it are due to not reading the fucking manual (or Hibernate in Action). 
assuming OO is the right hammer for every screw (like so many people seem to) isn't directly the fault of Java. I like the fact that Java is a wide ecosystem with things that some people are baffled by because they see no need for in their use case, I've used things in Java I never dreamed previously I'd have need of (because there is newer shinier versions) While C is a great language and less bug encouraging than C++, you get a lot of safety and ease from Java, which makes the odd corner case well worth putting up with...
It is only "bad", because the mocking frameworks are limited. Actually you have limited design choice caused by the test and *that* is bad!
I consider EJB as somewhat redundant. CDI offers a relatively simple and consistent component model. EJB is not as clean as CDI and carries a lot of heritage. There are some things in EJB not supported by CDI, but you can get them separately. For example EJB offers a simple time (a bit like cron), but there are other (and more capable) libs fort that (e. g. quartz).
This is a subreddit for **Java**, not for **C/C++**. Your content is completely **off-topic** here. Plus, it violates the "**No tutorials**" rule as is stated in the **sidebar**.
FITA at “Training in T. Nagar”offer JAVA Training in Chennai with practical oriented class with highly qualified professional trainers from leading MNC. Training in T Nagar is the best place to take up Java course in Chennai. Java is considered as the most popular language in IT industry. It is important to learn Java in today’s programming world IT Companies in Chennai accepts FITA’s Java Course Certification as a standard with organization’s principles. We focus on organization needs and the course they offered are in practical oriented. . The syllabus structure is to coordinate with this present reality necessities for both basic level learner and advance level learner. The training will be taken care of in either weekday or ends of the week program. http://www.trainingintnagar.in/java/ 
Ah, evontech. You're not possibly related to /u/alwaystakeithome and /u/Livelongnstrong? Just because you're keep submitting that website over and over again, too. Let's see if you'[re deleting submissions](https://www.reddit.com/r/oculus/comments/64op5v/difference_between_virtual_reality_and_augmented/), too.
Of course I can. Every changed line of code should be and actually is reviewed in code review. If I see, that coworker adds too much in some util class, and I know that this is too much of "inventing the wheel once again" I simply recommend to add 3rd party lib and to refactor this class and it.
Would love to see a detailed post with code samples and time measurements. Obviously OO gives you cleaner, more readable and more maintainable code. If you start removing OO principles, some speed gains are expected. So it will be beneficial to see if there were sacrifices made in favor of mainitainability etc. 
It looks like you're ready to discover the ways of [Data Oriented Design](http://gamesfromwithin.com/data-oriented-design).
Sometimes you need to make use of a feature outside the scope of your DI, example is if an external dependency uses a ServiceLoader and provides no way to post process a service.
When I switch between maven profiles, I need to do a clean before I build.
I decided against adding to my comment "What's old is new again," because DOD is all about batch processing, which computers are designed to be really, really good at. All this high level abstraction is wonderful, but if you want performance, you have to accept the nature of the electric machine that underlies your program, a glorified state machine.
If you don't mind me asking, why not JSF? 
&gt; If two objects share a 1:1 relationship and you need a million of them, combine them into a single object Probably should do this regardless of app size. Java is great for refactoring later, so just keep them 'denormalized' until they absolutely have to be separated. Plus, then you don't have to overthink your design.
Wordpress is PHP!
That was the joke :)
Why does it need to be based on Java?
OO is optimized for maintainability, not necessarily raw performance. 
 Futures are good when you have stateless computation that needs to happen, but you let the computer deal with exactly when and where. However, there is a drawback to Futures in that they are anonymous and don't let you manage mutable state very well. These days, what's used in the field for stateful concurrency is the Actor model -- rather than having threads and synchronizing them, you have an actor which contains some encapsulated state, and actors can send messages asynchronously to each other. When a message is sent, it ends up in an actor's mailbox (a LIFO queue) and then when the actor's dispatcher is active, it processes a message and changes its internal state. There's a nice talk on Akka's model and how you design apps with it: https://www.lightbend.com/blog/akka-and-the-zen-of-reactive-system-design
For those that want to play it... "java -jar Remnants.jar" on the command line. Must have JRE installed.
This is awesome. Can't wait to dive deeper!
Take Apache Sling and build something on top of it. Other than that, I suggest to look into the community editions of HippoCMS or Magnolia. Any JCR based CMS will be superior to anything else. If only someone starts to build something like Adobe AEM on top of Sling, but free and open......
Right, addOpens() doesn't help. It can only be used by one "trusted module" to pass on the trust to another. But JDK 9's philosophy really is to to disallow deep reflection without consent of the reflected-on module / the user (in whatever way that consent is expressed, opening a package in module-info descriptor, via --add-opens CLI option, via the new "kill switch" or by passing a lookup).
At my job, we're evaluating DotCMS, which looks promising.
Awesome! Can't wait to try this out.
Wow, this is way overdue. Clover was my first code coverage tool a long, long time ago. Way better than Emma and the other tools at the time. Fastforward 10-12 years and I've been using Cobertura/Jacoco for so long now I wonder if Clover is still just as good? It was never worth the pricetag when Cobertura/Jacoco were free.
You're saying this as though these were two orthogonal, mutually exclusive concepts.
If you have memory issues, and a small list of offending classes, you can implement the underlying fields as a byte array, use your getters/setters to extract the right field via offsets, and reduce the memory footprint to roughly 5% of what it used to be. But, like you said, I've done this maybe three times, and it should never be step 1. The vast majority of my performance issues are I/O or wire related, with very few being actual processing or memory.
Whyyyyyy
No, he isn't. Read it again.
The announcement talks about community supported and that they think it gets the best "attention" via open source. To many others, it will read like the product is "dead", though this is a healthy way to kill it. In order to help people understand, I wish Atlassian would answer a couple of questions: 1) Why was this project chosen to "community-ize" over any other? In other words, what about the landscape changed that made it not get the "attention it deserves" internally. 2) Will Atlassian be a member of this community or is it a dump-and-move-on?
I agree that there are things that suck in AEM, especially with the insane Touch UI. They simply forgot that most corporate people use keyboard and mouse. But the concept of using components and inheritance is the most elegant one, I ever used in a CMS. And the core concepts of managing content is done well. Of course, these concepts were introduced by Day. But I know that Adobe has many good dedicated people working on the products. Lean engineering can lead to bad decisions. But they learn through our feedback and will change stuff. At least, Touch UI is better than ExtJs....
You keep submitting 'em, I'll keep commenting. And apparently you'll keep deleting the submissions, too. Did you finally get a chance to read the [guidelines for self promotion](https://www.reddit.com/wiki/selfpromotion) that I showed you multiple times? Let's see: &gt; You should submit from a variety of sources (a general rule of thumb is that 10% or less of your posting and conversation should link to your own content) 22 of your 32 submissions (70%) are to LinkedIn articles of "evontech". This account here a total of 10 out of 32 submissions (for once, direct links) to evontech.com. That's 32%. For /u/Livelongnstrong it's 4 out of 6. And that is _not_ counting the many submissions that you deleted! &gt; Don't use sockpuppets to promote your content on reddit. It's tacky and cheap, and detracts from your brand. Tell me again about these other accounts that just submit LinkedIn articles of evontech, too. [But it's not spam! I worked hard on that, I make no money from it, it's original content! I'm not a spammer!](https://www.reddit.com/wiki/selfpromotion#wiki_but_it.27s_not_spam.21__i_worked_hard_on_that.2C_i_make_no_money_from_it.2C_it.27s_original_content.21__i.27m_not_a_spammer.21) &gt; We're not making a judgement on your quality, just your behavior on reddit. Your stuff's probably amazing and someone would be really interested in it but... &gt; If you submit mostly your own links and your presence on reddit is mostly for your self-promotion of your brand, page, blog, app, or business, you are more likely to be a spammer than you think! Read the FAQ and make sure that you really understand that.
Alfresco is one
Magnolia CMS could be what you're looking for. But beware: gpl license...
The logging occurs after the profiled code, so that's not an issue. 
Tbh if you want that..just learn PHP. Java isn't utilized all that often for GP sites. It's usually for specific webapps for specific purposes. Nginx+php5-fpm is just SO optimized for general purpose...at low load especially. Spring isn't great at low load 
 I really liked working with AEM (I used it when it was still owned by Day). When I left my job that used it, I started a project to use the JCR as a basis of an open source CMS few years ago, but shelved it when some other priorities took over. The thought of using Ext.js was one of the reasons, it just felt too much like a kitchen sink and I didn't want to create Communique all over again. Now with JS frameworks gaining maturity, maybe it's time to look into it again.
&gt; Why was this project chosen to "community-ize" They can't sell enough of it to make it worth the cost of maintaining. &gt; Will Atlassian be a member of this community They claim that they will remain active.
1. In IDEA those are modules, you can have several modules per project, if that is what you mean. 2. It's under the Run menu, cmd-F10 on osx, maybe Alt-F10 on Windows. 3. Clicking the lightbulb usually shows the issue and recommended fix above the code, not sure why you're covered the code. Intellij refactoring of code on the fly is far superior to eclipse. Give it a month, that is how long it took me to get used to it and I never went back.
I haven't worked on such systems with multiple projects myself but my guess would be that you could add them as modules into one IntelliJ project to get them all together. Hotswaping classes is difficult in practice. There is some minimal degree built into IntelliJ I think, at least when in debug mode but I've only used jRebel for that. A post about a free alternative popped up just today: https://github.com/dmitry-zhuravlev/hotswap-agent-intellij-plugin. I haven't noticed annoyances​ about error popups but if there's the case, might be worth reporting the issue to Jetbrains.
Additionally there is a migration guide for people coming from eclipse https://www.jetbrains.com/help/idea/2017.1/eclipse.html
/u/rotaryjihad Echoing this. Plus CI - you can test new Maven on your local build. Then test upgrade Maven on your CI build machine. If the CI build machine fails up the chain, you know you have work to do.
&gt; 2147483647, to avoid confusion ~2.15x109. 2^(31)-1 you heretic! ;)
There is a way to add multiple projects under the same window. (Although I'm not usually using it, it sometimes comes handy when I need to attach foreign sources temporarily for debugging, which have nothing to do with project) [See this screenshot](http://imgur.com/a/CmSNj) Btw, this setting will be saved under your "main" project, so if you open any of the other projects next time, they will not contain the attached roots, so you'll always need to open the same project for your workspace to be consistent. I personally prefer separate windows though, I think it's actually better than having all your related projects in same window.
1. I kind of suspected that the Eclipse dark theme might look good on Windows/Linux. On the Mac, however, the theming is incomplete: some UI elements are still "light", and it's a bit painful to look at. 2. The IDEA code editor will dynamically wrap lines based on the width available to the editor, and the indentation of the wrapped line matches the parent line, with an optional additional indent. That's handy, since IDEA encourages you to open and close tool windows, changing the width of the editor space. The Eclipse editor does not support dynamically wrapping lines (it's been on the Eclipse to-do list for years), so if a line of code is wider than the editor, a horizontal scrollbar appears. For me it becomes an issue when opening third party source code that is formatted with extra long lines -- horizontally scrolling back and forth on code that you're reading is not fun. 3. IDEA comes with a pretty good set of configurable static analysis options, out of the box. Eclipse has some too, but IDEA has more. 4. Recent versions of IDEA includes support for Kotlin. JetBrains has written a Kotlin plugin for Eclipse, but when I briefly tried it it (unsurprisingly) seemed not as good for Kotlin as IDEA. Now, I have only written three lines of Kotlin in my life, but it seems like it might be something I would consider using in the future, and it's nice to have the option.
Thanks, I will give that a read. +10 points to JetBrains for providing a well-written manual.
Item 3, also get the cursor in there and try `Alt+Enter` - it should show an options menu on fixes and other tips (most those menus have more if you use the arrow-right). That's the command on Mac, I believe it's the same elsewhere.
Yup, give that a try. And keep the JDBC stuff simple at first. Keywords: Connections, Transactions, Insert, Select, Update. DataSources. Done.
For what OP wants, they probably should click that green + in the top left-center. That'll add a new module which can have its own roots.
&gt; I also like that I have the option to easily start using Kotlin You don't need Intellij for Kotlin, you can continue using [Eclipse](https://kotlinlang.org/docs/tutorials/getting-started-eclipse.html). 
Doesn't that just create a new IntelliJ project (i.e. .idea folder), then offer to open the new project in the current window (closing your currently open project) or open it in a new window? The method I described actually adds the Maven module/pom.xml to the dummy project. 
Take a look into nCMS. This cms oriented on developers and has a good admin UI.
I usually go for putting static final variables in an interface -- constants come to mind for me when thinking of static variables. Also, the interface would in some situations, preferably be in a common module that can be shared amongst other projects that might use yours as a dependency. That way they can sync up with your constants and not have your entire project as a dependency. Those are the things that I think about mainly. Placement of the variables is kind of arbitrary, but I put them above non-static variables. I usually only use static variables paired with the final keyword though. So they're really just constants and in that case I have their names in all caps separated by underscores (e.g. FOO_BAR.) The public/private part also makes a difference in its intended use. So it kind of just depends on what you intend to use it for. Static variables not paired with the final keyword -- I would say -- usually means that you could have structured your code a bit better. You'd have to have a good reason for doing it.
To hotswap without installing extra plugins (I would as it is worth it) in settings there is one for Compiler. It is a drop down where you can change from javac to Eclipse which will enable the minimal hotswap that Eclipse has during debug.
The commonly accepted standard is: + static variables + instance variables + static initializers + constructor(s) + remaining methods + static methods (even though they quite often are placed before the constructor(s) ) This is backed by the [Official Code Conventions for the Java Programming language - Chapter 3 - File Organization](http://www.oracle.com/technetwork/java/javase/documentation/codeconventions-141855.html#11684) In general, the [Official Code Conventions](http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html) declare the reference standard.
But not the type of word wrap we're talking about. It doesn't respect the indentation level.
Yes it does, but I usually work on one project at a time, so it's no big deal. I just like how it works.
Same here. Some people like to have many projects available at once, which I described above, but I'm happy to have one project per window too. 
1. You can import the projects as different modules in one IntelliJ project. Normally if you use IntelliJ it will even propose to import your workspace from Eclipse into a single IntelliJ project. 2. You can use Ctrl + F9 (or Command + F9) to build your project, which will hot reload when necessary. You can configure IntelliJ to do this automatically if I recall correctly, but I'm not really a fan of it (in Eclipse this sometimes was more of a nuisance than helping me due to the constant "build")
I have been working in IntelliJ for about 3 months now. I wish I can pull the plug and go back to Eclipse however it's a requirement for a project i'm working on. For me, Eclipse is way easier to use. Someone mentioned that IntelliJ's refactoring is far superior to eclipse, i'm curious to know how that is even remotely true. Maybe one of my personal strengths I find with eclipse is it's vim plugin seems to integrate better with eclipse than Intellijs. I have a feeling people are comparing Intellij with older eclipse. Personally I am not sold on Intellij. For C++ guys, I have yet to try either, not too sure i'd ever invest in clion when there is qt creator and just pure vim. 
It's much more practical to install Spring Boot as a [service](https://docs.spring.io/spring-boot/docs/current/reference/html/deployment-install.html#deployment-service). You can easily have the service start when your EC2 instance starts, easily bring it down, check the status... Setting up a rolling log file is fairly trivial as well. So no need to mess with nohup.out
I tried IDEA and went back to eclipse because it was way slower on my setup I run the IDE off a Linux box but the GUI is on Windows 7 using an XServer I also "want to like IDEA" because most people I talk to or read their reviews say that IDEA is superior any suggestion to improve my setup? a friend suggested that I dedicate one monitor to the IDE and use [Synergy](https://symless.com/synergy) to share the mouse and keyboard; however, installing it on the Linux box was challenging 
^ Hotswap agent is what I use. I haven't used Eclipse in a long time but quite like IntelliJ; there's a ton of internal logic that simplifies things, so I'd say it's well named.
Supposedly maven-release-plugin can do a lot of things for you, but I haven't been given the time to fuck with it in my team. We have 2 build systems. The first level is jenkins, which does our CI, runs our tests and builds artifacts and drops them in our artifactory repo. The second level is an in-house thing built 20 years ago which tarballs everything up for deployment. Before release, we do a git merge from our development branch to master. In the merge branch I update pom versions to release versions instead of snapshots (I think maven-release-plugin can do this for you, but don't count on my remembering), and we update a manifest yaml to inform the 2nd build system where to stage its deployment tarball (we separate by release number). Afterwards, I merge the master branch back to a new branch off of development (to retain common history) and then update to the next snapshot version. I then personally go through and tag everyone's projects on the master branch because nobody else can be fucked to do it. I think maven-release-plugin can also do that. We're a team of about 10 people - we should be more nimble than this but there's not much I can do about it. I'd have to research the right config, add it to all the projects, and write scripts to orchestrate it, but I'd never convince anyone to ever use it. You have an advantage in that you're alone. My advice to you is to investigate maven-release-plugin and anything else which might help do this sort of thing for you. You're not the first person with this problem but I think you're on the right track. If nothing else, you can bash script it. XML manipulation on the command line is a little weird but it can be done.
Since your project has a Swing based app, how are you planning to migrate it to IntelliJ? Eclipse has WindowBuilder, which is the only bi-directional editor that exists (unless I'm missing something, or you are using layouts that don't require mouse / IDE).
&gt; quick quit?
Doesn't seem to work under the MINGW64 console that comes with Git under Windows. Does work with CMD and PowerShell. Kinda sad =( I really like the Git terminal... 
You might want to look at: [Maven Release Plugin](http://maven.apache.org/maven-release/maven-release-plugin/usage.html): Most commonly used because it's been around since forever. [JGit-Flow](https://bitbucket.org/atlassian/jgit-flow/wiki/Home): Atlassian's alternative to the previous plugin. Their Wiki talks about why they prefer this plugin over the other one. [JGitVer Maven Plugin](https://github.com/jgitver/jgitver-maven-plugin): A Maven extension more than a plugin. It works by allowing you to control versioning directly from the Git tags. Quite interesting approach but it's a bit more complex to set up, but the result might be worth the trouble.
I started on netbeans, then realized eclipse was better, but after an update, scrolling started to freeze up on me. I'm now in intellij and I kinda like it.
Actually, I think the author buried the lede: public class Main { public static void main(String[] args) throws IOException { IntStream.range(0, 4).forEach(System.out::println); System.out.println("Waiting"); System.in.read(); } } &gt; BTW The above program creates &gt; &gt; `Total 35486 4027224` &gt; &gt; or 35,486 objects!
We hand-code the Swing views, which makes changing IDEs easier. 
IntelliJ support for Kotlin is far superior though.
....why would I lose or corrupt my code? We have source control for that.
Just to be sure that you are comparing like with like correctly here... you are defensively copying the mutable entries in the parameters array to ensure that the log message when output contains the values of the parameters *at the time of the log statement execution* and not the values *at the time of the log being written out*? [eh nope](https://github.com/a-hansen/alog/blob/966f6e5627b997a1e470396afdfcce422640c951/src/main/java/com/comfortanalytics/alog/AsyncLogHandler.java#L119-L134) Logback and Log4J2 are doing that as for generic utility it is required. I do not know the use cases you have for Alog, so I cannot speak as to whether such thread safety concerns are appropriate, but comparing performance of just handing over the LogRecord to another thread with performance of making the LogRecord object graph effectively immutable *before* handing over to another thread... well there is only one logical winner... so no need to benchmark that we know doing less work will be faster... but it does require all consumers to be aware and finalize all their parameters *before* logging... which means you need to wrap every log statement in a `if (LOGGER.isEnabled(Level.INFO)) { ... }` to ensure that you are not calling `toString()` on parameters that will not be output just to ensure that the logged message is the message at the time of logging
Maven release plugin.
Didn't realize that. Thanks!
And because this is JUL, which uses MessageFormat, finalizing the parameters array is non-trivial: * If it is `String`, `Byte`, `Double`, `Long`, `Float`, `Character`, `Short`, `Integer`, `Boolean`... leave alone as they are known immutable... also don't call `toString()` on the numeric types as we do not know how the message format string will format the numbers * If it is `Date` or `Calendar`, clone as the message format may be formatting dates, so we cannot call `toString()` on date like things * If it is `Number`... well anyone can extend that class... even `AtomicLong` does, we'll have to capture the value somehow without knowing whether we should capture the `longValue()` or the `doubleValue()`... eek... could get messy there * If it is anything else we can just call `toString()` Log4J2 and Logback have the luxury of using `{}` as the placeholder, so they can just apply a quicker `toString()` on all non-`String` parameters... but with JUL we don't know until formatting actually takes place... Alternatively you could call `MessageFormat.format()` directly in the `publish` method and drop the parameters from the LogRecord... Oh... and while we are at it... what about somebody logging with `LogRecord` where they repeatedly reuse the same `LogRecord` instance... will they get handled correctly? Are you still sure that "JULs lack of an async handler is easily resolved"?
What I don't get is why the original JDK authors thought appending a string should be thread safe. Same with PrintWriter
😀 I was afraid someone would ask this question I prefer Windows over Linux as my primary operating system, I know I am odd that way my colleagues use Linux as the main operating system with Windows just running on the side on a laptop and mostly ignored 
It's actually a neat project - I used JediTerm to create a Java based SSH/Telnet client for my company. Works pretty well for emulating the console stuff. I quite literally built it in 2 days of work for the SSH (The implementation the provide isn't exactly what I needed) and 1 day of work to add Telnet.
Thanks, I'll the way that you suggest and I'll update my blog post also. 
because they weren't even thinking in terms of threaded coding ? when where Java threads introduced?
Command + Shift + A you can search for actions. It also shows the hotkey next to the action. Double tap shift and it will search "everywhere" and also includes the actions.
https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html Since 1.0 ;)
Hotswapping works just fine with javac in IntelliJ. What does Eclipse compiler for hotswapping? When I tried it last time I did not see any difference between Eclipse and IntelliJ hotswap. I thought hotswapping was all about JVM, that's why javac+DCEVM works great.
I'm a Windows user myself, I was rather wondering why you don't run the Windows-native version of IntelliJ.
It's not just `StringBuffer`, many of the mutable data structures in java were originally thread safe such as [`Vector`](https://docs.oracle.com/javase/8/docs/api/java/util/Vector.html) and [`Hashtable`](https://docs.oracle.com/javase/8/docs/api/java/util/Hashtable.html). Java was unusual at the time in explicitly considering threading, and made some (in retrospect) bad choices in version 1.0. The question is perhaps why has `StringBuffer` hung around? Collections were rethought in 1.2, but `StringBuilder` only appeared in 1.5.
I think in the early days of Java the idea was that everything should be thread-safe by default. The approach taken for mutable containers such as `StringBuffer`, `Vector`, and `Hashtable` was to make all the methods synchronized, and to require the application to use external locking for operations that required multiple method calls. This was fairly quickly determined to be a mistake. Synchronization has a noticeable cost, and it was unreasonable to make everybody pay this cost even when they didn't need it. In addition, requiring external locking is tricky, error-prone, and prevents safe but concurrent implementations. The Collections Framework, introduced in 1.2, has mostly thread-unsafe classes, with optional synchronized wrappers (which get very little use, as far as I can see). But it took until 1.5 for `StringBuilder` to be introduced.
No, if a place requires a particular IDE, then they consider developers to be too stupid to make their own choices (and therefore not worth working for). Since any project should be buildable from the command line, your IDE shouldn't make a bit of difference.
I have to admit, you've got me there. I'll address that and see what happens.
My brother spent some time working within Sun with the people who originally developed Java. According to him second- or third-hand, some of the original java classes (_cough_ java.util.Date) are terrible for the simple reason that Sun was operating on "Internet time", and things were being developed on crushingly short schedules. 
I know right? You consider removing them and your boss says "No! Too much risk to modify!" You consider unit tests and the authors say "No! Mocking static is a code smell and we don't want to encourage it!" You consider no unit tests and every developer says "No! You can't not test your code!" So you sit there, with a giant monolithic piece of legacy code, full of thread locals and weird singletons, which is full of "not a bug it's a feature's" you can't fix, wondering what you should do. It's infuriating.
I do agree in principle. But I feel there are exceptions . . . it's not often I see people editing their vcproj files using anything but visual studio. Whereas vcproj files are buildable from the command line. Just an example exception though.
Would be interesting to know what kind of trouble. We switched rather smoothly from svn to git using this plugin.
I would avoid JNI if at all possible. I've only ever had one system which was not stable using java. and that system used JNI. 
It is a terrible situation to be in as a developer. I guess we could add powermock in the mix but I would prefer to stick with mockito.
Yea, that's what they meant by "race condition".
That is interesting because this article (albeit it is from 2010) says they do not recommend building two jars from a single project: http://blog.sonatype.com/2010/01/how-to-create-two-jars-from-one-project-and-why-you-shouldnt/ Excerpt: "I want to be very clear about this answer. We strongly recommend that you not configure a Maven project to create two separate JARs from a single project. It violates one of the most important core concepts of Maven: modularity...If you start designing complex POM profiles to generate these JARs you are going to have to do a lot of heavy-lifting managing dependencies (classified dependencies), and fixing hard to diagnose bugs in different projects." Although I suppose recommending against it isn't the same as not possible. Even the accepted answer on this SO post (http://stackoverflow.com/questions/2424015/maven-best-practice-for-generating-multiple-jars-with-different-filtered-classes) says: "The Maven general rule is one primary artifact per POM"
The log file that is sent in includes the info about installation directory and Java home and they're already fine. I don't think there has ever been a single case of users installing Java to a non-normal directory in all of the logs I have reviewed.
What do you think unintentionally interleaving output is?
&gt; "The Maven general rule is one primary artifact per POM" That is a good rule. But that has nothing to do with what you or OP said. You can have a project which consists of multiple modules (POMs) and each builds its own thing. Well, that's how it works by default anyway.
You're right that that's what the original article means, but it's still wrong. You *can* of course use a StringBuffer from multiple streams perfectly fine without race conditions. Just make sure the blocks you output are interleavable. Log lines would be an obvious example, but there are many more. So there are sane use cases for the StringBuffer, but I agree they are unusual.
But who in their right minds tries to make a string with multiple threads!?
I recommend running Spring Boot apps in java docker containers.
Good article! My mind is clear on testing in general... too many developers (even good ones) seem to forget how to code when writing tests. Tests that are tightly coupled to the functionality is equally as bad as tightly coupled production code. This problem was solved long ago with Single Responsibility, LSP, etc. For some reason developers throw such practices from the GoF book (and others) out the window when thinking about and writing test code
That's the same flawed logic that led to the original synchronized collections. Sometimes it is appropriate, but most of the time it's a bug or wasted overhead.
8G windows laptop is more than enough to run IntelliJ. Unless you have to run an extremely large stack of applications on that machine. But even so, you could remotely deploy the code on your Linux desktop, debug and do everything else on the laptop.
Make sure you look into JNA, too. It's pretty similar to p/invoke in C# and much easier to use.
OK, thanks, I will give it a try 
I've got a similar story about JavaSerialization hiding a problem: https://paulhammant.com/2013/03/11/legacy-app-rejuvenation/ "[...]Along the way, they discovered that a programmer had previously put in a static reference to a server instance variable. Not a reference to a POJO designed for serialization, but a server reference with more reference to other server objects. That was totally unintended. When that was serialized via Java’s binary serialization you couldn’t see why the byte array was so big. The shift to XML (via XStream) allowed humans to see what was wrong quite easily. That might have been the root cause of the whole problem for them. In other words, the root cause of the quest to change messaging technologies. [...]" Good old XStream saving the day. Last I checked it is still in place in that application.
They could be on Valve time, and we would be waiting for version 3 indefinitely https://developer.valvesoftware.com/wiki/Valve_Time
&gt; Have you tested this at all? It sounds like you've written a bunch of logic, but haven't tested or deployed it yet? I have tested the logic using RMI for the communication area, which allowed me to run both the server and client on my computer (making it a temporary server). RMI is not an option anymore. Our client runs on mobile devices (using Gluon Mobile). &gt; Are you using any sort of framework (like Spring-Boot)? No (unless Gluon is considered a framework, then yes). &gt; Because I don't know what your application does It's a game, like chess - players send their actions to the server, which does some computation, and returns the results back to the players. Chat is also supported so there are things like message broadcasting too. &gt; If you can provide more information, I can give better advice. Sure, what do you need? Thanks for the reply.
I took the time to look into what the jar size is (with no source, no docs, etc, just what you'd need to distribute). It's 432 **Kilobytes**. That's insignificant for an android app. 
Having all your code open at the same time and refactoring across projects is what makes Eclipse so amazingly powerful.
Yes, I have a Raspberry Pi 3 running the game
I have to say I have never heard of Gluon until this moment, but I'll still try to help. Is the server portion of this application also utilizing Gluon? If so, It looks like they've got 'CloudLink' that might be worth looking into here -&gt; http://gluonhq.com/support/samples/ . If you're server has nothing to do with Gluon, I would again recommend my previous link. Spring-Boot will get an http service up and running pretty quickly. Then, if you have most of the functionality done already it should just be a matter of adding your logic to the endpoints you create with Spring. 
The article contains so many fallacies that I believe the author is missing some basic information regarding unit and integration tests. &gt;"The original idea of unit tests, as far as I can tell, comes from the necessity of testing libraries.". * Wrong. You write unit tests to test your own code. You should assume that the libraries work ok. If you are working on a Java project and write unit tests for Hibernate, Spring etc. you are doing it wrong &gt; "I'd like you to focus on the assertion that the original purpose of unit tests is to ensure there are no changes to the behavior of a library" * Wrong again. You write unit tests for your OWN code. To catch regressions in your own code. &gt;"Did you ever have to delete or rewrite bad unit tests that broke because you refactored something and writing a different implementation broke them "at a distance"?" * Your tests are not written correctly. Google for "test behavior not implementation" and you will get a better overview on why is that. &gt; "Does this mean that we should give up unit tests and only perform integration tests? Not at all. We should perform the appropriate tests depending on our circumstances." * Wrong. You need BOTH unit tests and integration tests for a well written application. Search for "testing pyramid" in Google for the correct approach &gt; "It's about time we stopped overstating how useful unit tests are. There are very important features that we cannot unit test, like performance or quality and many of these are fundamental to a good application implementation. " * Wrong - You can add a timeout in your unit test to make it fail if your algorithm is too slow. You can also run load-testing if you are worried about performance. You don't have to use the same tests for correctness and performance. They can be different. &gt; "Here's how it happens. TDD is meant to work in three steps repeated cyclically". * Wrong. Just read the wikipedia page and you will see it has 5 steps with clear explanations on what each one does. &gt; "People refactor within the limits of passing unit tests, but they might make something else perform really badly. ". * That is not always a bad thing. Do you prefer to have a fast application that does not work at all (i.e. does not pass the unit tests) or a not-so-fast application that works? Again, feel free to add timeouts in your tests if you are worried that much. &gt; "Unit tests are merely tools that can be appropriately used to improve our code and that can equally be misused to make our code terrible". * Wrong. Not having unit tests at all is the ultimate way to make the code terrible. Tests also serve as specifications. &gt; "Unit tests are not a nearly universal solution to improve code quality as they are claimed to be. In the end, there's not (yet) a good substitute for a skilled engineer using their head appropriately." * Wrong. Nobody said that unit tests are a universal solution. It is one of many solutions. Not having unit tests is a really poor choice as well. I have a feeling that the author has only written integration tests for API calls of other libraries, which is certainly not the correct way to run tests for your OWN application.
Maybe you have tons of unresolved build errors. Also, what type of editor is it? I had a similar problem with editing Flex scripts.
And then somebody forgets to set this variable and your build server starts charging cards! So if you have 20 different static methods in your applications, you will create 20 environment variables? That is not an effective solution....
It will be too late at that point. Also if you are in a big team (i.e. 20 people) you cannot keep track of this.
&gt;That is not an effective solution.... Which is why you go cry in the corner. But I've seen it done.
Try to disable some inspections I also have CPU usage issues; i don't have a laptop so i don't care that much
Most security issues with client side java were with the browser plugins for applets. These are officially deprecated and you can't even run them anymore in a modern browser.
Thanks. This was very helpful.
Can't find a repo for LoadUI, but [SoapUI is here]( https://github.com/SmartBear/soapui ). Looks like a useful tool to bookmark for later. I could have used it a couple weeks ago. Couldn't have paid for it though.
A c developer can forget to guard against a buffer overflow exploit. A java developer could not know that storing passwords in String objects is a bad idea. It's all the same. Developers have to avoid writing exploitable code in all languages. Java is beautiful. So I think your lecturer is lame and probably an inexperienced Java developer.
It's not all the same at all. The level of exploitability of the two things you mentioned is really different.
Compile errors are marked on the right side. 
AsciidocFX? http://www.asciidocfx.com
https://github.com/viskell/viskell Haskell node-based ide 
I don't know, the CPU spikes shouldn't happen, you shouldn't ignore them.
Are you running 64bit version and have you modified the memory settings ? 
I had similar issues with the gradle/groovy editor in previous versions. Disable some plugins one by one and check if it makes any difference in between. From experience, languages that aren't compiled, when you try auto-completing code, it will have this effect.
Java 8 is the runtime. A platform that your application runs on. If you download it from safe sources then the runtime will not contain any exploits: - [Official Oracle](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) - [RedHat OpenJDK (Windows)](https://developers.redhat.com/products/openjdk/download/) - [OpenJDK (Linux/Mac)](http://openjdk.java.net/install/index.html) - [Zulu OpenJDK](https://www.azul.com/products/zulu/) Now any programm that runs in the Java VM could potentionally be malicious or is exploitable, like any third-party application written in any language. However (and when removing Applets from the equation) Java is rather safe in some aspects: * The VM provides a minimal sandbox of sorts that makes exploits more difficult or impossible E.g. buffer overflow exploits * Oracle officially reports security issues and others like Cisco and many library maintainers do aswell. Knowing is caring Precautions: * Download the Java runtime from above source * After installing, open the Control Panel (full settings, not those Windows 10 user settings) &gt; Java &gt; Security &gt; Very high. Disable the checkbox. * Always update to the latest version * Only run Java applications that you know are safe 
Ohh nice! I can use this for work
Nope, ASP.NET and some XML shit. XSLT is clearly superior because it's Turing complete.
I have this issue too. Not only typing, focusing the window will sometime spike out the CPU. Turn out it's the default JVM flag provided by Intellij in `idea64.exe.vmoptions` which is using concurrent mark sweep (CMS) garbage collector. Now I'm using G1GC and don't have any CPU spike during typing anymore.
And what about non-static initializers? 
Yes, Java 8 🥗 Very safe!
Try [here](http://dl.eviware.com/list_loadui2.html?sort=name&amp;sortdir=desc). No source, but it might be helpful... Edit: The page takes a while to render / load. I also see now that it is only pro versions. Been looking but it seems that SmartBear have removed all traces of the free LoadUI from the net, unlike what they did with SoapUI.
That's only 1 field less than Oracle asks for when watching a presentation of theirs :O
I've been writing JavaFX apps for a few years now. Lighthouse, a Bitcoin P2P crowdfunding app, no longer has a working website (i've moved on to other things), but the source code is still available if you want to learn: https://github.com/vinumeris/lighthouse There's a video promoting it here: https://www.youtube.com/watch?v=Y--lBpouUVs and a talk I gave about it here, although I don't talk much about JavaFX specifically: https://www.youtube.com/watch?v=i4iZKISMZS8 In my new job, we're also developing JavaFX apps, using Kotlin and TornadoFX. The code is available here: https://github.com/corda/corda/tree/master/tools/explorer https://github.com/corda/corda/tree/master/tools/demobench Hope that helps.
So this likely isn't used to generate "simple" stuff like the examples. Think of it more like a cglib or asm lib but done at compile-time instead of run-time. Think of adding methods to classes with specific annotations, adding getters/setters based on annotations, generating classes with a known implementation based on an interface definition, declaring and implementing transparent object proxies -- things like that. 
When I try using the `-XX:+UseG1GC` flag intellij refuses to start. Do I have to add anything else? Can you share your config file?
If you set it up using the right *.properties file and you can see in the right bottom corner (at least that's where it was in IJ 13) the proper amount of memory, then you're running 64bit for sure. The only thing left would be as others suggest tune the code completion. It's a bit weird, as I run IJ 13 in a vm without bigger cpu issues.
http://www.cert.ssi.gouv.fr/site/CERTFR-2017-AVI-116/index.html
I wonder how the performance compares to H2?
another one https://github.com/victims/victims-enforcer
https://news.ycombinator.com/item?id=14099895
Yup, the more tools the better. By my understanding, OWASP Dependency Check works by attempting to identify the CPE code that matches a package, and should a match be good enough it will report the vulnerabilities. We are different in a few ways: 1. Our CPE codes are connected with the associated packages by hand. In theory this should result in a better hit rate, since CPE codes are not defined particularly rigorously and misses could be very easy. 2. Some CVEs affect multiple packages, but will only be reported against a few. We identify cases where the CVE affect other packages as well. 3. We do so much more than CVEs. We scan many sources for our vulnerabilities, including the issue tracking systems for the packages themselves, which means we have a much larger number of vulnerabilities than currently accessed by OWASP_Dependency_Check. Currently it is quite possible that OWASP_Dependency_Check could find matches that we have not yet indexed, but we are aiming for complete coverage of CVEs.
Indeed, definitely a good tool and resource. As I mentioned in my reply to the other poster, CVEs can often affect more then the referenced product (CPE). The victims database is nice because they often identify the specific sub-module/package that has the vulnerability, and not just the containing project. I expect that for the most coverage and to find the most vulnerabilities possible it is likely best to run as many auditing tools as possible. I fully expect that victims has records that we do not, as does OWASP_Dependency_Check.
High level languages are more easily understood by humans whereas low level is more easily understood by machines. Some languages are just barely above writing literal 1's and 0's and some of them can be referred to as machine coding. Java is most definitely a high level language. And as such it is not able to perform some of the most fundamental networking protocols. There are 7 major layers to networking and Java can only adhere to the top few. Simple commands such as ping will not work in Java because, in Java, a socket is required. Edit: Java requires sockets and binding to a port. Ping does not. I'm sorry if there was confusion there. 
No gradle? :-/ Edit: the prototype (not yet released as a plugin) is pushed to https://github.com/OSSIndex/ossindex-gradle-plugin :-)
Not yet, but I will count your comment as a vote for gradle support. I don't suspect that it will be too difficult, but there is one caveat. I don't use gradle at the moment or have a lot of knowledge about it: does gradle use maven packages (in particular maven central, though we can pull information from elsewhere), or something else? If it uses maven artifacts then support will be that much faster to build, otherwise it will take some time before the database catches up.
Have a look at the side bar of /r/learnjava
Is C++ better than Java?
Depends on what you are doing. It is just a tool. No different than a hammer or screwdriver. Java just wouldn't work well where I work. Just not performant enough for us to be successful with it. 
why?
Thanks for all this info, I'll take it under consideration. I do have a database (of users). If I use Tomcat do I not need Spring? Is that what you say I don't need? I used Java WebStart once or twice in the past for standalones, did the job well.
great talk!
My buddy is developing a GUI based on JavaFX to edit some data, meant to be used by lay people working for his employer. It's targeting their domain-specific needs, but also meant to quickly adapt to changing db schemas. It features undo/redo ability and data versioning with optimistic locking. Rejecting JPA or DAO, which require us to recreate a db schema in entity classes, his approach aims to take a minimum of Java-based hints and reads as much as possible from the data store's meta data. It's quite an impressive application, but not yet finished: it doesn't save changes yet. I'll see how he feels about open-sourcing it, since he's building it for his employer. 
They mention failsafe. Is that built from the same code or is it a fork? Presumably the only difference is where in the life cycle the plugin runs and whether it fails fast or not.
Jdk 8, but I was also under the impression that intellij bundles its own independent runtime
Yeah but you can use something else. There's other implementations of java 8 you could try, but I'd say fiddle with settings first, like trying G1 as others mentionned.
No, you do not need Spring. No one actually needs Spring, or indeed JavaEE. Spring is an addon framework, that (like TomEE), gives you additional magic like Dependency Injection...just done in a different way, using a different API. its all very enterprizey... and can be difficult to get your head around if you haven't done HTTP server programming at all before. I think that if you dive into using spring (or tomee) now you're going to get yourself in a mess with all the additional configurations required. Its almost certainly better to do your first project without worrying at all about additional frameworks, and concentrate learning the basic concepts of HTTP server programming first. The thing about HTTP server programming is that you have to write it in a connected - process request - issue response - disconnect pattern, and its best if you can write it so the server is 'stateless' - as in has no record of the state of the game. It just processes each request from scratch. All the state is stored on the client. This makes it very easy to scale as you just add more servers. However, the action of connect - process- disconnect each time can hit the database hard with repeated JDBC connection/disconnections. Tomcat DBCP helps by pooling the connections. Your code will look something like this: @WebServlet("/doit") public class DBCPServlet extends HttpServlet { @Resource DataSource datasource; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { try(Connection con = datasource.getConnection(); PreparedStatement prep=con.prepareStatement("Select name from player"); ResultSet rs=prep.executeQuery()){ while (rs.next()){ resp.getWriter().println(rs.getString(1)); } } catch (SQLException e) { e.printStackTrace(); } } } The database username/password / jdbc connection string is all put into tomcat configuration, which opens and closes connections to the database when required. The DataSource is 'injected' into the object by tomcat, you don't have to do this yourself, just placing the @Resource annotation is enough for tomcat to search its resources directory and provide an instance to it. I've used Java Webstart a few years back. And, it was a really great concept, and it worked good for me also. I tried it again about 6 months ago, and thought OMG what the hell have you done!!....you've made it practically unusable) 
You're really not giving us much information to help you with. If you're using AWT you can use Frame.getFrames() to loop through all available Frames, find the instance you're looking for and then use it just as you would from the window itself http://www.java2s.com/Tutorial/Java/0240__Swing/GetallwindowswithFramegetFrames.htm If you're running everything in a single process, you can also use a global variable for that or create a publish/subscriber (listener design pattern) to communicate between windows/frames. If you're using a different process, you can look for ways of sharing data and, at least, keep a timer checking whether a boolean variable is true or false and show/hide the menubar according to that (a hack, but works).
Lets just say I want to access a different frame menu items to hide one of them, how can I access the variable of that different frame? If you can't help then I wont push it anymore, but this is the best way I can put this :/
I have already answered that. It's going to be hard to do from the NetBeans GUI builder alone. I"ll try to put it very simply: you can "save" your Frame instance to a global variable. public class GlobalData { public static Frame mywindow; } Once you have that, it's a simple matter of setting "GlobalData.mywindow=this;" from your first window and then accessing that from your other window: "GlobalData.mywindow.menu.disable()" or whatever.
Ok, so in a multicontext set of applications running on a single instance of Tomcat, one application could gain access to another applications request/response. Does anyone allow 3rd parties to install additional WAR's onto their tomcat? I wouldn't!! it would only take one of them to end up in an infinate loop to trash the whole server, and thats without the security issues of running apps from different people on the same tomcat instance. 
Low-level languages are those that are very close to the hardware (processor-specific assembly being the lowest level "language"). Java, on the other hand, is a managed language, running inside a virtual machine: it is not only hardware independent, it is also operating system independent and often architecture independent, in the sense that the same library can run on a smartphone, a desktop browser or a car's onboard computer without requiring any modification or even having any idea at all of which sort of context it is running at. So yes, Java is a very high-level language, even if nowadays it runs as fast as low-level languages on most popular platforms, due to the JIT compiler.
Yes it does use maven dependencies. I'll open an issue for you and gather some information ;-)
Ran it and it looks awesome. But, there seems to be a bug (or i am using it wrong): The tool reported a vulnerability in package Y (pulled in by package X). Now, i modified my pom.xml to use a newer version of package Y and excluded package Y from package X dependencies. The vulnerability is still reported, but the maven dependency tree reports that the newer version of Y is used. What gives?
I know it's hosted big projects for years, but I am really excited and impressed with all the big name projects being hosted on GH these days and I'm 100% certain the trend will continue. It tickles me pink to think of a future with OSGI compatible bundles being hosted in a transparent way. No more maven dependency hell. And omg, what if the community was able to easily update links to resources and docs?! Omg what if I could easily read docs on my phone?! 
You probably just did not have enough of heap. You could check in VisualVM how much of CPU is eaten by GC and normally it's not much while typing. Or even a quick CPU Sampling can tell you which Inspection or what is eating your CPU. Another good thing is enabling the Memory Indicator in IntelliJ, then you can easily see when you don't have enough, and if you get a lag and the memory is drastically lowered, you know it was a full GC.
Also disable automatic building in `Settings | Build, Execution, Deployment | Compiler`
High time 
Wrong. Java supports sockets just fine http://docs.oracle.com/javase/tutorial/networking/sockets/
Since this is help with Java **programming**, it should be, as the *plenty hints* on the page indicate, posted in **/r/javahelp**. Please be sure to **read** and **follow** the [**Posting Guidelines**](https://redd.it/48eykt) there before posting. **Post removed:** Programming help
I was reading http://www.sonatype.org/nexus/2015/04/07/maven-release-plugin-setup-guide-for-git-revisited/ https://dzone.com/articles/why-i-never-use-maven-release and http://www.sonatype.org/nexus/2015/04/07/maven-release-plugin-setup-guide-for-git-revisited/ to list a few
Thanks, I can see some configuration by hand is still necessary in some case.
That's some old Java code I must say.
old? it's using nio.
In sense of style and design. It would not pass our internal review. I get its a quick and dirty code but this is an official example from Oracle. E.g. `for (;;)`
if you already have an account on Github (eg, for your own projects), then I guess now it would be much easier now to report problems / fill bug reports.
Even if you set up automated deployments, that set-up is a manual job.
I've written a working prototype for a gradle plug in based on your maven plug in. Since your github account is no organization, how would I reach out to you? 
This isn't even Java, this is HTML and maybe JavaScript, it's just like 3 shitty slides of code with some dudes face behind it, if you're trying to teach someone something just showing them shitty code on slides is not the way to do it
Good. Your turn, Java SE!
That is not their choice (also bitbucket is shit)
That's what I meant. Java requires a socket for networking. Ping is a lower level of networking and does not require any kind of binding. Literally hardware talking to hardware. That's why ping can still work even if a computer system crashes. 
Is GitLab's runner free? And may I ask what made you choose it? I've never used it, but I'd like to. Yes, TBD absolutely supports hot fixes. If you utilize the Maven release plugin, Maven will create a tag in your Git repo for each release (otherwise you can create the tag manually as part of your CI). Then, if you need to hotfix something, you can branch from that tag, giving you a branch that has the exact code that's in your release. This way you don't have unnecessary branches when you don't need to hotfix anything, but the option is easily available to you.
Now put this website on github too so we can help to not make it look like a phishing website https://java.com/en/
Suitable for the code it produces.
There is a difference. Java EE is trying to bleed customers via vendor lock-in. Pivotal is trying to be paid for providing the better product. And the license fees companies pay for Java EE do not go into the pockets of devs paying their lunches with it. Java EE moves at the pace that makes Glaciers appear fast. Java EE licenses mostly an army of consultants trying to coax more and more managers with zero technical authority to decide for Java EE based products. That works more like a religion than engineering. Same as most church taxes do not go to charity.
i think you're getting downvotes because you did not stress "also bitbucket is complete and utter shite!"
[GRIP](https://github.com/WPIRoboticsProjects/GRIP). JavaFX GUI for making simple computer vision pipelines.
It seemed like such a strange name-change when looking at it in most fonts, but when you see it on their site it makes much more sense (turn it upside-down).
aye mate, total shite!
Uhhhh, why does the Java EE API cause vendor lock-in, but the Spring API not??? If anything it's exactly the other way around. If you code your app to the Spring API you are locked-in to Spring. If you code to the Java EE API you can relatively easy port your code between TomEE, Payara and Jboss.
Wouldn't you usually just make a separate microservice for each normal service and let the facade be either a http layer (rest controller) or a message queue? I'm not sure if it's best practice but that's how I see the transformation from monolith to microservice. Furthermore, why would layering be exaggerated? You still want to loose coupling, single responsibility and be able to change the facade later on.
https://github.com/openjdk-mirror (last update 2015)
I agree. In a monolith we usually have a facade which delegates to corresponding services. The service then calls the corresponding daos. In a microservice you usually have just one service and one dao. So the facade would always delegate to that same service and that service optionally to that dao. Of course that makes still sense, because as you correctly said enables loose coupling. However, I was thinking maybe there is some smarter way in separating these concerns now since the number of potential participants has decreased significantly. 
That's an interesting monolithic design. I've seen it done in the opposite order: controller &gt; service &gt; facade &gt; dao/repository. I suppose at that point, facade and service are practically synonyms, and really, it's starting to look like lasagna code by the time you have this many interleaving layers.
&gt; 9! 9! = 362880 /r/unexpectedfactorial
Thanks a lot! I have a server admin guy who does the database part so I'll consult with him, though until then I wanted to do some digging on my own. If I can get this running by myself it will give me a better idea what I'm up against. Since I'm already using Eclipse I think I can just add the required plugins for EE, or do you recommend having a separate Eclipse? I do know and use Gradle for this project. It's a multiproject configuration with a few dependencies. Gradle handles it all.
Not too unexpected, though...
Also, the code has to open a socket in order to perform the action. 
[Me: 🍿](https://www.youtube.com/watch?v=I6eQ78HCGEA)
Yep, codehaus went down back in 2015 I think.
XSLT is a hellhole you definitely don't want to enter. 
Whatever you want really... Personally, I prefer to take a prepackaged version of Eclipse, with the EE plugins all installed for me. but, each to their own.