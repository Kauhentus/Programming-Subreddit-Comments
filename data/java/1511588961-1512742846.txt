The hype.codes site seems odd. The linked article is nothing more than the first part of the README file from the [Cosmos Github project](https://github.com/OpenGenus/cosmos). I poked around some on hype.codes and quickly found a couple articles copied from Stack Overflow without attribution and without links. Seems like a scraper site to me.
I work at a very large financial company. We are transitioning away from JSP and JSF for Angular, and I know a lot of the other large financial companies are moving in that direction as well, and are trying to move off of Java in the UI.
I guess I could but the project I'm doing is required to be done in java. 
I do exactly this for an application at work. Unfortunately, in order to call MATLAB from Java you will need to have licenses for both the MATLAB Compiler and MATLAB Compiler SDK. I don't remember the exact cost but it is a lot, in the neighborhood of $3000-4000 
Why don't you use Kotlin then? It's not that a big step, and you have variable type inferences for return values &amp; properties as well.
I'm certainly planning to, probably after the next release. We have a lot of JPA entities that could be massively reduced by switching to kotlin for those. But then I also need to move to gradle and replace the JSP front end with thymeleaf or angular. This release has been moving to Java 8 and Spring Boot, which has made the project much nicer.
Are you using Matlab only for the plotting? If that's the case you might take a look at Python and matplotlib.
Firstenquiry is the best training institute in Bangalore which provides all software courses with economical prices and 100% placement assurance.
is there e-book version available to preorder?
Code formatting is wildly inconsistent, and the code quality is generally terrible. Code comments are few and far between, and when present contain gems like [this](https://github.com/OpenGenus/cosmos/blob/master/code/compression/lossless_compression/lempel-ziv-welch/lzw.cpp): // Add w+entry[0] to the dictionary. dictionary[dictSize++] = w + entry[0]; Nearly every class contains test code. The [Java Stack class](https://github.com/OpenGenus/cosmos/blob/master/code/data_structures/stack/stack/stack.java) push method will write an error to stdout if the stack is full. Meanwhile the [C++ Stack](https://github.com/OpenGenus/cosmos/blob/master/code/data_structures/stack/stack/stack.cpp) pop method will return INT_MIN in the stack is empty, despite Stack being a templated class. AFAICS it will fail to compile if you don't instantiate the template with a numeric element type.
Because I haven't figured out how to do SEO on Baidu yet
Firstenquiry is the best training institute in Bangalore which provides all software courses with economical prices and 100% placement assurance.
I'd advise you step-by-step migration. You can switch to Kotlin, and use Spring Boot, they integrate quite nicely together (e.g. https://youtu.be/UHoLuTVX7mg). Thymeleaf could be a next move, but only if you need to present your pages to the business as static pages for validation, then reuse them exactly as they for dynamic pages in your app. (And forget about Gradle, it won't bring you anything)
Gradle cuts my build time down considerably compared to maven. In experiments it's reduced by a third. I think I'm more likely to move to REST and Angular so the front end is more responsive. This is especially important because they complain that is slow. And I was planning on using kotlin in very specific situations at first.
That is a totally different thing than compile time safety. There is some classes of errors that unit tests are not well suited to detect. For example security errors, you can't write unit tests that sends all possible combinations of input to a function in order to verify that you can't break it in some security critical way. Some of those classes of security problems are better handled by hard guarantees by the language than unit tests. Unit tests are well suited to verify that the expected existing behavior is preserved during development, and by it's very nature security problems are not expected.
:D
This fallacy just ignores the fact that a builder also needs to be constructed by either a static method or a public constructor. In the old overengineering days, people abstracted over constructions twice. Ever used the XML APIs? DocumentBuilderFactory f = DocumentBuilderFactory.newInstance(); DocumentBuilder b = f.newDocumentBuilder() Document d = b.parse(...); I mean, the abstractions can be useful in edge cases, but for the general case, I need a single convenience method that shortcuts this builder madness.
Next time, please post such questions in **/r/javahelp** as is outlined in the *sidebar*. I'm leaving this thread here since there is some discussion going.
Should be described here: [MATLAB API for Java](https://ch.mathworks.com/help/matlab/matlab-engine-api-for-java.html)
&gt; And I was planning on using kotlin in very specific situations at first. Good plan. Kotlin makes it a breeze, as it's 100% interoperable with Java (really interoperable, not theoretically as with some other languages ;-) )
You really should do some vetting on the code people submit. The very first example I clicked: https://github.com/OpenGenus/cosmos/blob/master/code/artificial_intelligence/Linear_Regression/LinearRegression.java Pretty sure that doesn't even compile. You also should create a proper index. A lot of the 'solutions' don't have a Java version. 
alt: https://github.com/acmeism/RosettaCodeData 
Go the link I posted.
tldr; private interface methods have been added to Java 9. 
http://mvnrepository.com/
Hey guys. I was about to post this list with a question, we already have the list so here is my question :p I have been coding in Java for over 2 years, I do automation testing so I used Java with Selenium, Rest-Assured, TestNG, etc. The problem with this is that we have a framework in place and there isn't enough room for improvements (nor time given by employer) I wanna improve myself both technically and theoretically to give a career jump and move to a development team in one or two years. Can someone recommend a reading order for the books in the lists? Principally I wanna refresh object oriented paradigm theory and start building a personal project from scratch. Thanks in advance! Have a good day.
I kind of like writing to a file for logging. No "framework" needed.
Wait, what?
I think it's a form of bdsm. As long as it happens in private repo's I don't need to know.
TOP kek 
Are there reasons to choose Log4j rather than Logback?
You rarely ever need immutable collections factory methods though. When you know the elements you need in advance, it's often better design to create an enum or use Stream.
I recently used log4j2 for a project (I've been using logback for a while now after converting over from log4j1), and I was happy with what it provides. I am annoyed at how log4j achieves slf4j compatibility though (A: it's through their own interface layer). I am annoyed enough that I'll keep using Logback for my next project instead of log4j2 (since I am a big believer in "just use slf4j" and insert your preferred implementation)
Yes, a man cave! :P
I use this one. IntelliJ has a plugin for it.
It is interesting that all Matlab GUIs including plotting charts are built on top of Java Swing. &gt; Do you guys have anything that can help me connect java with matlab? You don't need Matlab to plot, you can use [JFreeChart](http://www.jfree.org/jfreechart/) library for that and you don't necessarly need to use Java. So you could call Matlab from Java as a subprocess and tell matlab to create some csv (Comma-Separated Value) file with the chart data and then read it from Java and plot. I would consider Scala language for this Job because it is far more concise, has a REPL like Python and compiles to Java bytecodes. If money is a problem, you should also consider Octave which is Matlab's open source clone.
javascript != java ....
This is the **second time** you are posting this here. The first time has already been removed because it violates our rules. + Java is not the same as Java**Script** + No Programming help + No job offers Reposting will earn you a permanent ban. **Removed**
I don't know what kind of fetish this is but I'm interested.
Last time I checked slf4j still did not have lambda style API which lets you get rid of the isLevelEnabled guards.
Can you provide a simple code example of that?
Holy Static Factorians vs orthodox Constructsrians
Instead of if (logger.isTraceEnabled()) { logger.trace("Some long-running operation returned {}", expensiveOperation()); } You can do logger.trace("Some long-running operation returned {}", () -&gt; expensiveOperation()); The idea is that you don't want to call expensiveOperation() if you don't want to log the information coming from it.
How expensive is the creation of the lambda instance? 
i'd argue that this is technical discussion, not help. the phrasing isn't great (likely not a native english speaker) but this is just the sort of discussion that i'd like to see here. there's a huge dichotomy between enterprise java and technical java, and if you ban this sort of topic, you've effectively banned technical java because we don't have pivotal et al publishing marketing material we can link to we already get downvoted by an army of spring and EE drones - don't mod-ban us too 
Ah, that is neat. Honestly, I don't have the need for the isLevelEnabled guards very often, but for those rare occasions, this would be very handy. Lets hope slf4j adds that to their api - sounds easy enough to add too.
probably cheaper than "the expensive operation"
That’s great when you have one or two servers but not when you have hundreds or thousands. 
I first read it as "Java 10 Experts and Devs to Follow" (and disappointed that didn't see any Java 10 expert)
Totally agree. His twitter: https://twitter.com/BrianGoetz
Log4j requires an adapter because the SLF4J API is more primitive. SLF4J only supports logging Strings while Log4j supports logging Messages. The Log4j API also supports custom log levels. The Marker API in Log4j and SLF4J are different. The Log4j API provides an AbstractLogger class that implements 90% of the Logger methods. SLF4J provides no such class. Sure, Log4j-core could have included the translation code contained in the log4j-slf4j adapter but then log4j-core would always be present as an SLF4J binding, which might not be desired. These are just some of the reasons why log4j-core is not a direct implementation of SLF4J. For what its worth, you could use the Log4j API in place of SLF4J and plug in whatever implementation you want. However, Logback doesn't implement the Log4j API so you would require an adpater to do that - exactly as Log4j does to bind with SLF4J.
You can follow https://jira.qos.ch/browse/SLF4J-371. It has been open now for a year and a half.
1. Performance - see https://www.loggly.com/blog/benchmarking-java-logging-frameworks/ for one set of tests. 2. Log4j 2 is designed to be usable as an audit logging framework. Both Log4j 1.x and Logback will lose events while reconfiguring. Log4j 2 will not. in Logback exceptions in Appenders are never visible to the application. In Log4j 2 Appenders can be configured to allow the exception to percolate to the application 3. Log4j 2 uses a Plugin system that makes it extremely easy to extend the framework by adding new Appenders, Filters, Layouts, Lookups, and Pattern Converters without requiring any changes to Log4j. 4. Support for Message objects. Messages allow support for interesting and complex constructs to be passed through the logging system and be efficiently manipulated. Users are free to create their own Message types and write custom Layouts, Filters and Lookups to manipulate them. 5. Like Logback, Log4j 2 supports filtering based on context data, markers, regular expressions, and other components in the Log event. Filtering can be specified to apply to all events before being passed to Loggers or as they pass through Appenders. In addition, filters can also be associated with Loggers. Unlike Logback, you can use a common Filter class in any of these circumstances. 6. Enhanced property support. You can reference properties in a configuration, Log4j will directly replace them, or Log4j will pass them to an underlying component that will dynamically resolve them. Properties come from values defined in the configuration file, system properties, environment variables, the ThreadContext Map, and data present in the event. Users can further customize the property providers by adding their own Lookup Plugin. 7. In Log4j 2, custom log levels can easily be defined in code or in configuration. No subclassing is required. 8. During steady state logging, Log4j 2 is garbage-free in stand-alone applications, and low garbage in web applications. This reduces pressure on the garbage collector and can give better response time performance.
Sure. But also cheaper than a call to isTraceEnabled?
It's fun if there's a static method `newInstance()` which only returns a `new` object.
Why would you do this? Running an expensive function ONLY to write a log-statement? It seems like a very dangerous thing to do, seeing as most operations of this kind will have side-effects. Introducing side-effects in logging statements seems like digging to dig a bigger hole, in addition to severely added complexity in tests. That being said, I have never had a use-case for this either, especially considering how awful this will be to write tests for. 
Why do you need isLevelEnabled guards? Just log and slf4j will do the guard for you: e.g.: `LOG.trace("user={} result={} took={}", user, result, elapsed);` just by using this api, the string expression is never evaluated and nothing is logged unless trace is enabled for this particular logger.
Does log4j2 have support for structured log-statements? As in, can you attach key-value pairs for logstatements?
The expensiveOperation might be a very expensive data aggregation step. For example, you may have a data structure with *many* elements. Each element has a "type" enum. For debugging purposes, you may want to find out the number of elements with each type. This is a very expensive operation, so you only want to do it in case you really want to log that data. 
Is it on their roadmap? If not someone (hopefully you) could just open an issue for that.
* the objects that you pass as arguments may be expensive to compute (usually you have them already but you might have to compute something) * you have to keep number of substitution marks in sync with number of arguments (string programming, less typesafe) * the logging framework actually has to parse the pattern to find the substitution marks That's why I prefer logger.debug(() -&gt; "Updated account.id=" + id + " with=" + accountUpdate);
[They claim performance](https://logging.apache.org/log4j/2.x/performance.html).
And this is one of the reasons why people shouldn't use slf4j. It's yet another dependency to wrap around other dependencies. They can't easily change their API without breaking existing usages. The way to do it is to simply write your own LogManager and Logger classes which delegate to the logger you want to use. Then you can change you own code all you want. If you later want to replace your logging implementation you'd then only have to change these 2 classes. 
The ORM-industrial complex did ensure that multiline strings are still not there.
**Sidebar** **NO programming help, NO learning Java related questions!** and **Do not post tutorials here!** Also: Nobody will be going to buy a course without even seeing so much as a teaser. You need to put up some **free** lessons. You want *paying subscribers* but are selling the cat in the bag. That's no way to make proper business. This is **shady practice** at best.
Are you talking about MDC? https://logging.apache.org/log4j/2.x/manual/thread-context.html
Yes. You can use a MapMessage or a StructuredDataMessageto log key-value pairs.
Then you ssh to your server to grow/follow/download it? Sounds efficient. /s
probably not
for a publicly consumable library, sure -- for a standard enterprise app? nah. no need to re-invent the wheel. I can't tell you the number of "logging wrappers" I've run into. All of them fall short of slf4j and really - who has time and really wants to maintain that sort of thing. 
I do it when it's expensive to make a pretty representation of something, like an XML document.
Although i mostly work in Java i agree with you. Calling it passing by value because it's a new pointer is just being silly and gives the impression that the actual object is being passed rather than a pointer. 
Who decides what *should* be the case? Nothing is ever perfect, try porting .net code between ms and non-ms platforms. Try moving Hadoop code between versions. Even when you have to port Java EE code it’s still much much faster than rewriting from scratch for another platform.
Is it?
I rest my case. In the end you made me realise that the fact that you cannot assign to the argument and expect the callers copy change is something that differentiates Java greatly from, e.g. C++. Still, I have been thinking about this from an educational perspective. I am not a teacher of programming languages (although I have been teaching closely related subjects like Computer Engineering) and can't help thinking that this must be a confusing topic for new programmers learning Java and these concepts. To call object reference passing to a method in Java "call-by-value" is confusing as the normal meaning of "call-by-value" means that you cannot modify the callers version of the object. That the argument technically is the reference doesn't help here. I get some support to this though in [the Wikipedia article about the subject](https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing).
 Test* test; test = new Test(42); passByReference(test); cout &lt;&lt; test-&gt;getValue(); //prints 999 test = new Test(42); passReferenceByValue(test); cout &lt;&lt; test-&gt;getValue(); //prints 42
looks more and more that way
Whether we pass a pointer or the object itself is not related to pass-by-value/pass-by-reference. It's a question of value types vs reference types (yet another overloaded meaning for the term "reference", yay) Currently, all Objects in Java are reference types, i.e. the value a variable stores is *always* a pointer/reference. But will change once Java gets custom value types. Then, assigning an object will actually copy the object itself, not the pointer. Java doesn't support aliasing *variables*, so there's no pass-by-reference.
Just learn Java EE ;)
At its core, Spring is about dependency injection. So make sure you know why that's important and what problem it was supposed to solve.
Depends on what you’re trying to create with it, but the main prerequisites would be Java, HTML, CSS, and maybe a little JavaScript. Spring is a Java framework that abstracts away a lot of lower level processes and set up involved in developing and deploying a dynamic web app. Hibernate is a relational database mapping framework that enables you to interact with a SQL database in Java. I️’d recommend learning the basics of SQL before learning Hibernate so you understand what Hibernate is doing under the hood. I️ liked the Team Treehouse courses on Spring and Spring + Hibernate, but the Udemy courses could be just as good.
Basic Java. A good frustration tolerance and ability to learn on your own. The educational materials and community support for Spring could be a lot better. Spring is nicely done, and it looks like they had more support for helping people learn at one point, but let it erode away. Hibernate is a framework in itself, a database framework, that turns a database into Java objects. It is a big thing to learn all on its own. I've had pretty decent luck with the courses on VirtualPairProgrammers.com Good Luck.
I don't know, but i'm currently love using QueryDSL SQL, but i got to check out jOOQ, it's learning curve is pretty straight forward
Oh, that's not what I thought you meant. While using the isLevelEnabled is useful for avoiding expensive operations, I thought that isLevelEnabled check was mainly to avoid the creation of the String literal. And that's not avoided by the lambda variant of the call. 
Right click? You mean you don't know the keyboard shortcut? 😪
There is a step by step tutorial on the spring website for creating a simple mvc app, but be warned that it is outdated and several of the features that they use have been deprecated. If you don’t mind having to work through those issues it does help to learn about spring, mvc, and jdbc. 
If you're coming straight into Spring I'd suggest starting with the various Spring Boot tutorials. Spring Boot is an opinionated layer on top of Spring which makes it very easy to get up and running. After a few weeks of playing with Spring Boot, when you're comfortable with how it works, I suggest trying to build something without Spring Boot so you can understand what Boot is doing for you.
Great tip!
JNR-FFI is great. I've been using it myself and it's very nearly as fast as JNI, with the ease of development of JNA.
[removed]
So unhelpful
A lot of these don't compile or are just copy pasted from stack overflow... the rearme says they try to maintain quality intact but a lot of the quality is lacking. There are very little tests for any of these either... 
Just curious, how does gradle cut down your build time?
There's various reasons. Better parallelization, especially with unit tests, better understanding of multi project builds and a build cache. I'm sure there are other reasons, but they're the ones I can think of right now. The main thing stopping me from migrating right now is that there seems to be a bug in the spring Boot module that causes builds to intermittently fail. Migrating to Spring Boot 2 might resolve it.
Wait, does `const` in C++ protect the object itself? I was under the impression it only protects the reference (assuming you mean passing by reference). In that sense, Java method calls are always pass-by-const-reference, as while the object is passed by reference you cannot change the original reference, yet you are free to change the internal state of the object (i.e. calling setters / methods with side effects). Does C++'s `void f (const Something &amp;s)` makes it a compile-time error to call any setter on `s` inside `f`? 
&gt; void f (const Something &amp;s) Yes, correct! This means the Something object s cannot be modified. The reference can obviously also not be modified. For pointers being passed to a function, you have more options: `void f (Something const * const s)` will protect both the pointer `s` and the object `*s` from being modified.
TIL. Thank you. I have also found this page which does a great job of explaining it: https://isocpp.org/wiki/faq/const-correctness 
How did you make an EXE out of your JAR file?
https://vuejs.org/ Its learning curve is way better than react. 
Is a SPA a hard requirement? When I've been in your position, I used Spring with the pebble templating library to make pages quickly. I used knockout.js to make the page interactive. But, you still had to reload pages from the server, so it wasn't a spa. 
vue is javascript, not Java. Vue is easier to learn, but I don't know of anyone that says its development cycle is any faster. 
http://launch4j.sourceforge.net/
[This](https://medium.com/reverdev/why-we-moved-from-angular-2-to-vue-js-and-why-we-didnt-choose-react-ef807d9f4163) article can explain it better. And regarding the language. Well, if you want the client to work only on browsers, you have to use javascript, it's the most popular technology for web clients. 
yep
To be honest, I can't like a PHP backend. No offense.
No, its ok. I'm not a big fan of it either. I learned it bc it was the only language supported for free hosting my websites, and now I'm kind of used to it, despite the time wasting process when trying to fix bugs. What backend language would you suggest to be best?
Why not?
You do know what subreddit you're on. That answer should be obvious. 
yeah, you're right. I'd love to practice Java for backend but I didn't get the chance to do that till now. 
In the industry, Java is the most used language for backends. You will usually find PHP on frontends. This is why your solution looks a little bit weird.
https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/
http://php.net/manual/en/class.datetime.php DateTime::ISO8601 DATE_ISO8601 ISO-8601 (example: 2005-08-15T15:52:01+0000) Note: This format is not compatible with ISO-8601, but is left this way for backward compatibility reasons. Use DateTime::ATOM or DATE_ATOM for compatibility with ISO-8601 instead.
Who in their right mind would put something like "expensiveOperation()" in a logging statement? Surely anything like that is used elsewhere and you can just store the result, rather than calling it again, if you want to log it? This example seems very contrived and not based in reality. 
Java / Scala would be my first recommendation, but Node is also getting pretty popular.
I would have much preferred an IRC client instead!
Hmm... I wonder what other languages might have bad code that is kept for backwards compatibility.... 
Actually, OP posted 3 options to do frontend development in Java. Granted, those compile down to javascript, but they still count. I'm not sure if any are great for SPAs. 
Thanks I will hava a look at Pebble.
Great. I'll read through post.
Okay, I read the article. Yes, it addresses coding speed, thank you. It's the first I've found which does that. I'll have to give vue a try. 
AWS free tier. You can host Java backends.
&gt; I guess GWT has a good backing since it is Google I'm pretty sure Google transferred GWT to the Vaadin team to maintain. I could be wrong can't find any evidence after a few Google searches but I remember seeing that when I used Vaadin.
Everyone undervalues old school server side rendered pages these days. It's honestly so much easier for simple tasks. If you don't have tons of interactions who cares if you do a full page load it's often fast enough and sometimes faster than SPAs page speed.
You know you can uhm...use java on the backend too write? 
I'm new in Java. I want to ask a couple of things. Does this use UDP Sockets? If yes, can you recommend a good library to work with them in a Cross language manner? I'm trying to write an (almost) identical Java and C# app.
Why not simply help them out building the stuff in JavaScript? Since you created the REST service it should be quite easy for you to write the bits that do the AJAX calls so the other developers (who seem to be quite junior) can focus on the other javascript code. That way you'll also end up with something you as a team together can maintain; those guys are probably not going to be writing Java anytime soon. 
Wicket is also a good alternative imho, just be aware that there is always a bigger communication overhead with these frameworks, as everything is send to the server and evaluated and rendered there. 
2012.
It's sad most people don't know about AWS free tier. It's super easy to get a server, as long as you pick a free tier instance size it will not charge you.
&gt; Java is the most used language for backends. ^^^^^node.js
It is only free for 12 months though. I used their free tier stuff and built a ton of things on top of it. Then one day got a 80$ bill (didn't realize it was only for 12 months). I stayed with AWS but switched to cheaper options (lambda because everything I was using was on demand and not required to run 24/7).
With any commercial JDK. ExcelsiorJET has a free license for open source projects.
None. It never ever happens.... ever........ /s
Can’t find the user list on the right /s
I meant on the left there when I wrote the thing. Sorry about that stupid mistake. Gonna fix it - soon. But thanks for the reminder. xP
How many SPA are structured these days server rendered ones are often also more userfriendly
A lot of people are suggesting JVM languages (obviously, given we're in /r/java), but just to throw another into the mix, especially if you're planning on checking out the AWS free tier, there's always Go. It's a fantastic language. Easy to deploy, easy to write, easy to learn, very fast, very good at (in fact basically designed for) web services and the like. It's very versatile too, unlike languages on the JVM, Go has an incredibly fast startup time. Also, the tooling is really great and simple. The website has some great starting points for new developers. The language spec is even a small and worthwhile read.
Try out JavaFX for the client.
Damn! I had a glimpse of hope for a moment. I've been looking for a Java free tier hosting after OpenShift ditched their free plan. 
I have a question. Are you guys actually able to view the source code of my Messenger. ?
Google cloud has a small instance type that is free forever :)
I know it is a stupid question but can you guys actually view my Source Code. Cause if so, that's so totally uncool.
TL;DR? 
Great job! Now make a java backend to prevent a holywar :) 
Yes quite easily. https://pastebin.com/WXbAGe5z 
Just going to suggest this, You can host PHP, Java, Ruby, and more, on [IBM Cloud for free](https://console.bluemix.net/registration/free). I've been running a 512MB Java app for over a year without issue.
Even if it is an exe file or still contains a normal Java jar file. That one is basically a zip file with your classes inside. If you didn't go the extra mile to obfuscate the class files, anyone can just decode it and get most of the code in a really readable fashion. Also this is the wrong place for your post if you don't even open source it. 
only in US :(
Check out the sidebar, there's a bunch of links to all kinds of resources.
Like last time: note that this is blog more about some black magic and java trivia, you should never use such code in production, unless you have some weird and important reason to do so. It might be useful for some special libraries, and mods, where you want to be sure that it will work even if someone will not add some special argument to jvm, and --add-opens etc. Just like byte-buddy-agent can attach to VM in many different ways to provide always-working mechanics, even if some of them are a bit dirty. But never use that on purpose in production code as a shortcut to clean code version ;)
I’m on my phone so I can’t really look 
You should really take this down... https://andihamolli.000webhostapp.com/NetChat/action/get_existing_users.php?userid=
Top right of the screen, there's a button with three dots. Click 'community info' in the menu it opens.
How do you open source it? You mean posting that to GitHub? I just thought Java would be a safe place and I wouldn't have to worry about encoding anything.
That's incredible. Yeah I learned my lession. fck this shit. Still hope you guys like it. 
" I am writing this to assure you that my programs do not have viruses of any form and that I take full responsibility for any harm caused to your computer by the programs you find in my portfolio." I'm no lawyer but I feel like you should definitely remove this from your web page.
Why use java if you end up writting PHP at the end ? I'd have done everything in Java
Latency is pretty good from the us zones :)
Spring Boot has a number of template rendering libraries for server side rendering. Thymleaf is the most popular I have seen, it has natural templates that can still be used as design artifacts or by front end developers. Handlebars is the other template engine I have used. The syntax will also be familiar to front end developers. This with appropriate AJAX calls is the most the majority of sites need. There is also PJAX which I think is massively underated approach. At this point I would stop and just think about what you are trying to achieve? SPAs are the fancy hip tech but do you really need it to find out what your building is what people want or need?
I love when SPAs don't implement stateful URLs. It's like great something that has worked since the internet was invented is now extra work in "modern" frameworks. Luckily that doesn't happen as much anymore. Another big one is the partial page updates where now data is out of sync across panels of the page. Even Facebook, Twitter, GitHub and many other large companies still have these constant problems. Cool I now have a live updating page but I have 3 different follower counts on the same page, that's not confusing.
I'm glad to hear you've decided to get rid of PHP and instead work with a perfect language that is free of gotchas and problems.
Allocation-free logging, for example. Not sure if it's the only library providing this kind of stuff, though https://logging.apache.org/log4j/2.x/manual/garbagefree.html
For a beginner it doesn't matter which Java version &gt;= 7 you use. All additions after Java 7 are not beginner material. Head over to /r/learnjava and check out the *sidebar* there. If you're on mobile, you'll need to go on your desktop. The *sidebar* in /r/learnjava has a section **Free Tutorials** with some of the best beginner tutorials.
I made a messenger app with a java backend and WPF c# frontend, does that count?
.class files are easily disassebled.
Nope. Still not pure java :) 
"[B]ut this is why reflections exist in the first place - so you can skip that limits when needed." Umm. No.
Can one really get rid of javascript when developing a web app? I figure that you'll end up writing a lot of jQuery if you want to avoid using a spa - and writing a lot of jQuery is something that spa frameworks have abstracted a lot of away. 
Uuum, yes. Any arguments? Whole java works on reflection stuff, most of the web framework, many of java libraries. Even some java features use reflections, like: - I/O for serialization - security manager creation via manager - lambda creation - proxy classes - that are used by annotations. - some socket implementation (and I don't even know why it does use reflections here) - services - nashorn engine And I only counted places where it does use .setAccessible feature, so not just normal reflections for dynamic code, as then this list would be too long. 
After having used react and ES6 for a while and now trying out thymeleaf / spring mvc, I absolutely hate using jquery and vanilla js :( but it seems the only way to actually do anything when you use server side templating engine and need to do some js. dev experience seems so much better using a SPA, which is saying alot given I thought it was a mess when dealing with the js ecosystem at the time. Grass isn't always greener on the otherside so it seems.
OK so we have an app with about 16000 Java files. Originally we had started with JUL. But when I changed to log4j I replaced the LogManager and Logger with our own util package classes. Then later, when we moved to log4j2 I only had to modify 2 class files instead of 16000. But downvote me instead. 
Reflection without setAccessible, Unsafe and other dirty hacks follows the access restrictions imposed by the java language accessibility rules. Nothing more, nothing less. I only meant that breaking those rules and limitations were never the "intent" of reflection. Not sure how it matters what the JDK does internally, but violating these rules have historically been necessary for some internal code, yes, but will gradually be replaced with VarHandles, MethodHandles and other public APIs, since these alternatives provide a supportable, safer and (often much more) performant alternative. How to use VarHandles and how to further improve the public API are much more interesting discussions to be had than this.
Thisis why I listed only reflections that use setAccessible. and MethodHandles are still reflections, just better as access check is done once while creating one. And I still don't like where oracle is going, as it is blocking many features for no real reason. I think that java 9 is just big breaking change, as they just added additional rules and new exceptions for already existing code, I feel like .setAccessible should do what is was made for, make something accessible, while using that you already know that you are breaking some rules, but it is sometimes needed, even for stupid serialization in gson etc. Or some libraries use some small reflections over java code to improve performance or just implement some features, like some common utility libraries or something like netty. Oracle even added additional method to... unsafe - invokeCleaner, to still provide some way to implement this. but still in hacky and weird way... And modules are not even usable for big companies, as they don't support anything they need, as some companies like IBM pointed out. Modules are great for JDK itself, but restricting reflection access just feel weird... And so far even spring boot made for java 9 is not compatible with java 9, why limit so many language features? It feels that java want to go backward, not forward.
Check out SmartGWT. It’s a great option if your application will be functionally dense.
Real reasons: How about allowing more of the JVM internals to be implemented *safely* in java itself? Restricting user code access to such internals is simply necessary for a lot of the things that are in the works in the OpenJDK. Think of it as an OS: how well do you think things would go down if any little user script could write to kernel managed memory? And still developing user mode applications on such OSes doesn't *feel* restricted, does it? Most code runs as fast as it possibly can, but the restrictions ensure the stability, integrity and safety of the platform. We might not be there yet, and while there might always be reasonably awkward ways to circumvent the controls (using agents, JNI libraries etc), wouldn't it be better to ask ourselves how to enable more libraries and applications to not ever need to?
I'm biased, but [Play Java](http://blog.caplin.com/2015/01/15/review-24-hours-with-the-play-framework/) running with CoffeeScript or [Scala.js to compile the SPA to Javascript](https://github.com/ochrons/scalajs-spa-tutorial).
Any good place to see this in action as a whole? A conference talk, a tutorial?
My saviour
But why should the OpenJDK devs care about breaking code of people that use an unofficial, unsupported API? 
Because those devs - and the devs using their libraries - complain endlessly whenever something unsupported break. 
Correct answer: *Don't.*
Is Edgware a collection of the cloud projects or a separate project ? 
LOL
PHP = shit 
Java offers an API to work with sockets in the JDK
Some pop up constantly blocks me on mobile, can’t close it, have to reload page 
* We need to care because for every library author that breaks into something they shouldn't, there is an untold number of unsuspecting people (other devs and end users) using those libraries who'll risk getting stuck with abandonware that will be hard or impossible to upgrade to a modern version of the OpenJDK * We're moving to a 6 month release cadence which changes a lot of the dynamics where useful fixes have previously taken a long time to get into a production quality release. Now we're working on fixes that will be in production in March. Also, there are still going to be ways to patch and replace internal code even in core modules (--patch-module, --add-opens) - it is simply not going to be available to plain "user mode" java. * While I acknowledge that reverse-engineering the proprietary JDKs of old was likely made possible thanks to the setAccessible hammer, being open source has dramatically reduced the usefulness of it in that regard. The future is open source. 
Sometimes you need.
easy combine with spring and you can write any sql to work out you service
Already done. See Project Jalapeño from IBM, SquawkVM from Sun as two possible examples. The Project Metropolis plans to do the same for OpenJDK.
Well maybe he can redo WPF and make it good like JavaFX.
Right, my point is that implementing something like Project Metropolis without encapsulating access to the supporting, internal APIs (such as JVMCI, initially) would be a world of hurt. 
* That argument is off. In the same manner they'd better be off fixing Nullability defaults because NPE bugs are causing more problems for unsuspecting people than reflection being broken. * There's a bug in java.util.Currency that it can't be serialized properly because equals override is missing. Bugreport was done long ago. Priorities are probably elsewhere or it's not a "bug" in their eyes. No option for alternatives, so... * Open source gives you insight but the current model gives you no power and pragmatic solutions. It needs to be done now. Not in 6 months or years.
If you are the website owner : justify your text, left-align it or add correct word-break. Here you just cut in the middle of the word, it's unreadable.
* I gave you one of my reasons for why I think we should strive for minimal poking into internals. Whataboutery about Nullability(?!) is hardly a counter-argument, though. * Can you provide a link to this bug? Have you suggested a patch on core-libs-dev@openjdk.java.net? Our processes leaves a few things to be desired, for sure, but there are many committers and reviewers (you're talking to one) that can help get reasonable fixes and improvements in, but most don't browse old bugs in the JIRA.. * Have you explored any alternatives? You can use --patch-module to replace code in modules. Or why not roll your own OpenJDK. Unfair? Maybe, but in essence I do not consider poking into and patching encapsulated internals (via reflection or other means) to be any different from maintaining a fork. 
I was lazy, so I just googled for that: https://gist.github.com/raphw/91c81b8afdfd76ccfd87508a0af0e8bb From author of byte-buddy, should work fine I think.
Hi, I'm the owner. I think it's rendered correctly in my browser. Can you attach the screenshot, please?
[Of course !](https://i.imgur.com/lEG2wNQ.png) Linux, Firefox developer 58.0b4 (64-bit) As you can see, words are cut randomly.
in my web-browser everything is alright(opera), thanks for text 
Jquery + mustache.js - simple. Powerfull
Seems to be a Firefox-specific issue - i see similar issues with FF on MacOS. Chrome and Safari don't have the issues.
It seems that `word-wrap: break-word` causes trouble
If you had SLF4J in there already, you wouldn't change any files, just a couple maven dependencies and magic happens. In fact, performance aside, you could have kept logging to JUL and outputted to log4j2, logback, or whatever you'd want to do by simply changing the dependencies (bridge adapters, etc). Using SLF4J instead of _your magic log wrapper_ just means that slf4j is now the log wrapper instead of your classes. Now you don't have to maintain it (and probably have deficiencies in the API -- or if not, you've had to develop quite the wrapper so far that I bet it's more than a simple wrapper class).
Yeah Chromium doesn't have issues for me too. I confirm the Firefox-specific issue.
I'm a developer for jWt: [https://www.webtoolkit.eu/jwt](https://www.webtoolkit.eu/jwt) It is server-side framework with an API that's based on the popular c++ framework Qt. The java version of the framework is maintained in parallel with a c++ version. We use the java version in-house for a few enterprise apps. 
Thank you, I will check that!
LOL best comment over there: "Please blog about how JavaFX is superior to WPF once you’ve tortured yourself learning WPF."
Is any cross language wrapper available?
Are the devs new to React? If so, give then some time to learn. :) You see this question hits really close to home for me. I've been maintain a large legacy SPA with pretty advanced interactions created with apache wicket. And at the same time creating quite a few new SPAs using ReactJS. Now, I won't go as far to say that wicket is useless, it most certainly isn't. But in my experience it doesn't do very well with complex interactions or scale with complexity (partially our own fault though). However, it all boils down to the level of interactions needed on the site. Given what I know today I would never created our large legacy SPA with a Java-framework, the abstraction is leaky and not worth the time. But for simpler sites I would consider template rendering libraries (Thymeleaf etc). 
That's a good deal!
Whoa, thanks for the link!
Wish they were physical copies :(
What do you guys think about the book selection? Are the some good one for experienced Java devs?
Probably, assuming the FTP server has the chmod command or similar. However, I would ask this in the issue tracker of the project itself since I'm not sure if any of the project maintainers read this subreddit.
I had a case of forgetting to close resources against a database. Made a great little method using reflection and setAccessible to get hold of the list of open resources in the connection object. Set it to run when assertions were enabled, so now we can quickly detect any leaks during tests without affecting our production system.
Not sure how old these are - the description of one of them talks about JMS 1.1 (released 2002) as if it's a recent thing.
QueryDSL is excellent. I've used Hibernate in the past, and I felt very inconfortable with it. Hibernate needs a lot of experience to avoid mistakes, and in a large team it's very hard to keep an eye on all of that. What I love with QueryDSL SQL is the Pojo generation using a Maven plugin, but except that, no magic mapping, everything is straighforward SQL. No magic fetching relations, no magic update of the database. One negative point is that the QueryDSL API needs a connection to build a SqlQuery object. It would be more practical if not. 
Maybe you can find what you are looking for in the previous post: https://www.reddit.com/r/java/comments/7ebkfc/humble_bundle_just_released_a_java_book_bundle/?st=JAK2586D&amp;sh=c9e5e823
:-) I think we'll just all agree JavaFX is the solution to the client side problem, and I'll worry about making Java on Azure rock instead :-)
The one true fork.
Oh i get it. Thought java protects source files. doesn't seem to be the case.
Oh i get it. Thought java protects source files. doesn't seem to be the case.
There's [Proguard](https://www.guardsquare.com/en/proguard)
Yeah, some of the books are very old. Some haven't been updated since Java 5, while others cover Java 8. I'm sure most of them still apply, but it would have been nice to have more up to date books.
Hey! Did this session about event sourcing last week and if you find it interesting enough to watch I would love some feedback :-)
https://github.com/JetBrains/create-react-kotlin-app
I have a physical copy of the JAX-RS book from way back, and I've managed to get some mileage out of it here and there, at least above and beyond the clusterfuck that you'll usually find for Web tutorials. The JMS book is for version 1.1, and while it's technically not deprecated, the 2.0 API is so braindead simple that you don't really need a full book to muddle through your first couple of ActiveMQ/whatever projects. I was actually looking forward to the Jenkins book until I found out that it's from an outdated version from 2011. Might still be a good primer; I don't really know yet. I'm not sure about the JAX-WS book; I believe that this edition may have had poor Amazon reviews when I was looking into a physical copy a few years ago. Java Performance: The Definitive Guide sounds pretty intriguing. Pretty much everything else sounds like it's for programmers who are new to Java and/or certain JDK features (JDK5 generics and threading, JDK8 lambda syntax, low-level TCP/UDB socket programming).
&gt; It might be useful for some special libraries [...] But never use that on purpose in production code So, using *"special libraries"* will give you clean conscience in production?
Programmers will always find a way
I lol'd when it was talking about stuff being fixed in php 5, we're on 7 now matey
Looks like I just got infected.
Thanks :)
Didn't he said Oracle won't pay him for working on JavaFX so he left? so WPF is the new JavaFX i guess haha. 
This should also be solvable by JDK 9 javac `release` flag. AFAIK, this is also available in Maven - https://www.youtube.com/watch?v=VrI6rJNO2x4&amp;feature=youtu.be&amp;t=17m13s 
The subreddit you want is /r/javahelp 
They look kinda narrowly focused, actually. I mean, a whole book about lambdas?
Yes indeed, really cool!
Affiliate link list.
He said Oracle won't pay him because he's not working for Oracle anymore. DOH
Original article here: https://arnhem.luminis.eu/pure-bliss-with-pure-functions-in-java/
Not all of these books are long, the lambda one is below 200 pages. It also contains sections on the apis using lambdas (streams), parallelism and on designing around lambdas.
Ah yes, thanks Lukas!
Spring use dirty hacks like that, directly or in libraries that it use, netty use them too..., and many other libs. so... yes. Also there are special tools, like profilers etc and some tricks like that might allow to implement some additional helpful feature that would not be possible in different way. 
Yes. And how are they different from your own logic? I mean, haven't you ever run into a situation where such a hack was just the right thing to do?
I don't know if this subreddit is the best place to ask for eclipse plugin support. Perhaps try /r/eclipse.
You could make one? Make an exception class and in the constructor just calls something to play a sound? Or maybe if there's a way to monitor the console you could have it look for specific keywords to play a sound when found?
Pure functions are a gateway drug to [vavr](http://www.vavr.io/) and [Eta](http://eta-lang.org/)
Your question does not truly make sense, though. Eclipse is an IDE. Under normal circumstances, you would run your programs *outside* the IDE which leaves Eclipse (and any other IDE) out.
Well I only need it when debugging so Eclipse would be running. I know if you use eclipse for C/C++ you can set breakpoint actions that play a sound, so eclipse is capable of making sounds. But I couldn't find any plugins that make a sound under certain conditions that's why I'm asking if its possible
&gt; But I couldn't find any plugins that make a sound under certain conditions that's why I'm asking if its possible Sure it's possible; plugin code runs with the same rights as the user. 
&gt; they are guaranteed to traverse elements as they existed upon construction exactly once, and may (but are not guaranteed to) reflect any modifications subsequent to construction. Does this mean that even if an element at the end of the last was removed after the iterator was constructed, the removed element is still guaranteed to be traversed? It seems odd that the iterator may reflect addition-modifications but guarantees not to reflect deletion-modifications. 
I did, but I still think that you should always try to find different solution. Like I said: &gt; But never use that on purpose in production code **as a shortcut to clean code version** ;)
OK, that makes sense
Vavr looks like a gateway drug to scala...
I would say to scala + scalaz or scala + cats
Probably either codecademy or Project Euler, both come up pretty frequently
Seems like they are moving off PHP to Java
If an eclipse plugin fails in the forest.....
If only there was a library that would solve this problem for good...
Thank you!
[Slick2D](http://slick.ninjacave.com/0), [LibGDX](https://libgdx.badlogicgames.com/) or [LWJGL](https://github.com/LWJGL/lwjgl3) might help.
This was a very interesting talk. You were trying to squish quite a bit into a short period of time. Are there any other talks which go into the event source model in greater depth ? For example, I'd be interested in a good technique for doing event sourcing on the browser. 
But other languages seem to do this more blissful.
I don't know if this answers you question, but a guy posted [this](https://www.reddit.com/r/java/comments/6z8v0i/lessons_of_a_java_game_developer/) some weeks ago. I hope it helps.
Your boss sure has strange fetishes. A noisy IDE... Could make sense for accessibility, though.
scala to haskell haskell to idris idris to ....?
That was [already submitted](https://www.reddit.com/r/java/comments/793gto/pure_bliss_with_pure_functions_in_java/) almost exactly a month ago – by OP. Who is also [the author](https://www.reddit.com/r/programming/comments/793ejt/pure_bliss_with_pure_functions_in_java/doz71qs/?context=3).
Hi! For front end I would look into redux (preferably react redux) which applies these principles. Sorry but I don't have any great talk from the top of my head 
I'm using libgdx to make a game. It's pretty easy to use. DM me if you want a link to the github. BTW, before you ask. I'm not a game designer, and my game is pretty weak. It's just for fun. 
Idris to living on a sole Island to avoid sideeffects on other people. Dont do functional programming kids, it hurts you. 
You must be jooqing....
Yeah, the money tends to dry up when you leave a company :-)
Rouge Wave is also the company that [bought SOA Software (Akana)](https://www.roguewave.com/company/news/2016/rogue-wave-acquires-api-management-leader-akana), the API gateway company. Seems like a real hodgepodge they've got going on over there. 
Too late. Java stdlib has three monads. The call is coming from inside the house.
That's right, I'm the author. Is that not ok? My line of thinking was: it's been republished after a month, I'll post it so people that might've missed it can see it. If you already saw it, you can skip it. If that's not alright, please let me know why not. Than I could not do this in the future. 
Skimmed it, and I liked the guide. Obviously, Java is not a purely functional programming language, and if you try to write it that way you're probably going to have a bad time. But then, it's not a fully OO language either (in the Smalltalk/Erlang tradition), but people still strive to follow OO principles like encapsulation. "Pure functions" is just something to add to existing axioms like SOLID - a goal to aim for when writing your code. It doesn't hurt that a lot of principles of good functional programming are similar to principles of good object-oriented programming (IMO). I find that striving for pure functions and the single responsibility principle play pretty well together, and the same goes for encapsulation and the monad type.
Thanks!
They were so tired of paying the yearly licensing fees they just bought the company instead.
Well java has been a sole Island for a few thousand years now, so thats that :D
Thanks!
Thanks. Very helpful!
Thank you
As you [can make sound](https://stackoverflow.com/a/26318/4193304) in Java, you can also create plugin which plays sound. The difficult thing is probably going through the jars in plugins folder just to find the correct plugin as well with correct extension point (if there's any applicable) that you can hook your plugin into.
depending on what you're trying to do, you may find [intercooler.js](http://intercoolerjs.org) to be a nice fit.
"Buy me some jrebel". You won't believe what happened next!
processing.org might be appropriate too, depending upon what you are building.
2d sidescroller all assets and development tools must be free
Top kek 
I've played around with several, if I were going to make one for release, I'd go with libGDX for 2D and possibly for 3D but in the case of 3D, jMonkeyEngine which uses libGDX might be better. Rising World is made using jMonkeyEngine.
PHP? Rogue Wave is (the last time I paid any attention to them) primarily a maker of dev tooling for C/C++. They made a commercial library of basic goodies, that was very popular before STL came out. I used to use it back in the 1990's when I was still doing C++ work.
Yeah I noticed that as well in the products. But a lot of them are PHP as well. 
FXGL is nice. https://almasb.github.io/FXGL/
Probably had a breakdown after being contacted by a JRebel sales agent about a license renewal for the fifteenth time that week.
Thanks I’ll check it out
&gt; it's been republished Spamming reddit is a part of "republishing", gotcha. ;) 
I wasn't aware they were still around. Wow.
Nah, just giving out good advice 👌
They [bought Zend](https://en.wikipedia.org/wiki/Zend_Technologies#History) a while back, the steward company of PHP.
I had a JRebel salesman track down my LinkedIn profile to discover my new employer, call the main switchboard (for a 25k employee healthcare system), and manage to get connected to me. I was not amused.
I love playn (https://github.com/playn/playn). It's java, maven based. You can compile your game to jvm, web(gwt), android and ios. Simple, but good enough for 2d games. 
I remember that rogue wave. That was a long time ago. Do you remember centerline c++ too? That was even further back but not by much.
http://commons.apache.org/proper/commons-daemon/changes-report.html
https://news.ycombinator.com/item?id=15801901
Yep very similar to what they do with me. Absolute nightmare company.
No, I meant it was published on a different blog before, and DZone republished it on their own website.
Is there a quick start tutorial somewhere? I find the apache websites very hard to explore.
Is it *really so difficult* to read the **sidebar**? **Do not post tutorials here!** These should go in **/r/learnjava**. 
[jMonkeyEngine](http://jmonkeyengine.org/) when you want a 3D engine.
It's a nice article :)
The [grep console plugin](https://marketplace.eclipse.org/content/grep-console) can play sounds. I use it to syntax color my logback output. You can for example grep for a maven build failure &amp; play a sound if it occurs.
I hear you bro! Prettier spoilt me!
Thank you very much!
Slow down. How many companies out there are wlling to pay for haskell developers? At least, Scala and Eta run on the JVM.
Oh
Sorry, but I am going to remove this as it bears no meaningful contribution. It wouldn't even be suitable for **/r/javahelp** where *programming related* questions should go.
Wow! A ton of new features! Damn. I know what I'll be playing with this weekend.
As far as I understand Oracle only publishes packages for *certified* platforms. Solaris X64 is apparently no longer a certified platform for Oracle Java, hence there's no trace of it on the Java download site. When Java 9 first came out you could actually trick the Oracle Java website to download you a copy for Solaris X64. All you had to do was to find the link to the Oracle SPARC version and then replace 'sparcv9' with 'x64' in the download URL. I don't think you can do that anymore which proves to me that Oracle are serious about removing the Java bundle for Solaris X64. Also see [this SO question](https://stackoverflow.com/questions/46369860/java9-for-solaris-x64) for more information. 
That's a lot of features! Gonna have to try the docker panel again.
Is it *really so difficult* to read the **sidebar**? **Do not post tutorials here!** These should go in **/r/learnjava**. Still, since this is about *android development* it shouldn't even be there. Should at best be in **/r/androiddev**. You should also **read** and **adhere to** the reddit rules: [**What constitutes spam? Am I a spammer?**](https://reddit.zendesk.com/hc/en-us/articles/204536499-What-constitutes-spam-Am-I-a-spammer-) Limited self promotion is okay, but **excessive** self promotion isn't. 
ok am kool
There is an example [here](https://wiki.apache.org/commons/Daemon)
This is exceedingly awesome thank you! Also checking out the rest of your blog. So many *terrible* blog posts here, but your blog is high quality.
I'm not the writer of this blog, but thanks anyway 🤣🤣🤣
I swear your usernane showed up as Baeldung weird.
RemindMe! 1 hour
I will be messaging you on [**2017-11-30 17:04:15 UTC**](http://www.wolframalpha.com/input/?i=2017-11-30 17:04:15 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/java/comments/7gm38z/intellij_idea_20173_released/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/java/comments/7gm38z/intellij_idea_20173_released/]%0A%0ARemindMe! 1 hour) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Been using the eap version for awhile and enjoy seeing positive continuous development. Hands down the Tesla of ide's.
Looking forward to some of these new features and improvements, especially around Docker. JetBrains builds quality stuff :) 
And Check for Updates yields nothing :)
I'm glad you're enjoying the site :)
Since this is a new version and not just a minor update, you can just download it from the site, install and migrate your settings.
&gt; has three monads What? I knew about Optional being a Monad, I suspect about CompletableFuture... and which one is the third one? 
And Frege!
Take a look at the spring boot project. Also, JSP's are basically deprecated. It's kind of hard to recommend anything to you without more specifics around your requirements. Do you need to serve a front end, or are you just serving data?
Stream form a monad, where `flatMap` is bind and `Stream.of` is return. I believe it's also lawful. Optional and CompletableFuture actually fail to follow some of the monad laws, but they're still close enough that we treat them as honorary monads - just ones with a few quirks. ;)
&gt;Where to begin with Spring MVC? At the end, which means dropping it and moving over to JSF :P
Nope
Use an actual build tool like [Maven](https://maven.apache.org/) or [Gradle](https://gradle.org/) to build your project. An IDE is for writing code, but your project should be buildable without an IDE.
Sounds good
Did you try the official docs?
Ooohhh, more than one column marker! Woo-hoo! That and settings synchronization alone makes this a worthy upgrade!
"blocked" behind subscription
what did I just see?
I was missing the reason why I would need a Java Compiler Plugin
I'd also recommend starting with Spring Boot. It's an opinionated layer on top of Spring Framework. This has the advantage of not throwing everything at you straight away.
I swear the rest of my blog is also very high quality!
Perhaps this Youtube playlist from LauchCode: https://www.youtube.com/watch?v=M1niptdxtIM&amp;list=PLs5n5nYB22fI83_UAFbPLC-Mg9Uc6jeU4
That's what I ended up doing, thanks. The project isn't open source so the build tools didn't matter to me and the fact that we pay Jetbrains means their build tools should work.
Oh no, not JSF please. I would also start with Spring Boot and look specifically at Spring MVC REST or maybe WebFlux. If you need serverside templates I would give [FreeMarker](https://freemarker.apache.org/) or [Rythm](http://rythmengine.org/) a try. [Thymeleaf](http://www.thymeleaf.org/) is popular these days, but relatively slow. Interestingly the performance is reciprocal to the visual appearance of the website ;-)
Or.. you can save a few clicks by simply hitting "update" in Toolbox :) Not sure what the advantage of going to the site is if you *already* have the toolbox.
little off topic: I had trouble understanding Spring Boot. It hides so many things, got many error messages. Even Intellij couldn't help me figuring out whats going on. I felt so helpless. Also field injection is a terrible idea. Annotations are good, but with reason! Spring MVC is the one of the most widespread framework. Has the highest "market share". You should stick with it, it's pretty good and you will always find people who can help you out. This tutorial was written in 2015. https://www.tutorialspoint.com/springmvc/ 
JSF? Are you still in 2010? 
Thank you. I read comments encouraging me to not learn it since it's old, but I see it in a lot of job postings and it seems like a useful skill to learn since I don't have much experience. Plus, it's not like I have a choice, since my jobs requiring me to learn it. I feel like if you're always chasing the newest technology you end up making things more complicated for yourself and sort of restrict yourself from well established communities too.
It's based on Spring 5, which has been out for three months. Spring Boot 2 isn't due until February 20th 2018 so still two to three months away. I'd say no. I would target Spring Boot 1.5.9 right now and schedule in some time next spring/summer to migrate. Spring releases are pretty good at being backwards compatible. This means your code will continue to work without having to change much when you upgrade. However you won't take advantage of new features until you spend the time to start using them.
Yes, please, finally.
Weirdly, I've never struggled with putting the wrong thing in a collection. I suspect this is because your compiler and IDE are going to shout quietly at you if you try. You have to intentionally ignore warnings about casts to get it wrong. I imagine part of the reason is that I don't have any down stream users of my APIs. I'm not creating libraries for strangers to use. If I was, I'd consider using these libraries when ever I transferred data to and from my code, just like I'd currently use the unmodified collection stressors wrappers. That way they'd know as soon as they gave me data instead of a later call blowing up for unknown reasons.
I tried PHPStorm 2017.3 and it's *really* good. I have no doubt this is as well. As someone who is a big open-source enthusiast, I must admit, JetBrains makes some damn fine software. 
It's little-known because it's not really that much of an issue, really. If your code isn't part of an API for use by others, you generally don't need to be that careful when using Collections. Any decent software shop that does code reviews wouldn't allow people to do things like that, and it's also probably easy enough to create Checkstyle/FindBugs rules to prevent it also. Even if you are writing an API for others to consume, I'd argue that it's not even your responsibility to go to this extent. It's not the API author's job to save consumers from doing stupid shit like the examples given.
&gt; Also, JSP's are basically deprecated. Source needed. And no they aren't.
I wish this were built into IDEA.
Back when JAXB was created, it was common to add setters everywhere. Because of that, it doesn't handle today's immutable data well.
&gt; Also, JSP's are basically deprecated. That's not really true. If you want to do server side rendering, they haven't been replaced with anything other than a bunch of projects that got temporary hype then everyone forgot about (thymeleaf anyone?). Jsp is the most commonly used language for server side rendering by far. Of course client side rendering stuff with javascript has become popular. But if I had a straight up conversion ColdFusion application and they wanted to the new app to act the same way, I'd stick with jsp personally. Certainly nothing server side has replaced it.
Maybe *Effective Java* by Joshua Bloch. The only thing is that the new 3rd edition is coming out shortly, so I would wait for it to be released.
What would be a good alternative?
I'd suggest that it would make your life easier if you threw a `StopBeingAnIdiotException` when they pass you a list or attempt to put things in a list you gave them (but you did probably return an unmodifiable collection) then throw a `ClassCastException` in the middle of a seemingly unrelated operation. You'll have fewer open issues saying your code is broken.
Uhm, are you still in 2005? JSF has improved considerably and 2.3 has recently (this year) been released as part of Java EE 8.
Loads just fine here... with private browsing too.
Jackson has XML binding and supports constructor or builder binding.
&gt; Preserving workspace when switching between branches That's just great
What do you mean by settings synchronization?
It can now save your settings to your Jetbrains account and you can then share them between multiple installs. So, no more manually matching settings, and plugins too.
Is it superior to syncing with a git repo? Or just an alternative?
I’m not sure since I never synced to Github so it’s hard for me to compare. For ME though I’d say it is because it’s all in one place, my subscription and my settings. I prefer that. Also, are the settings private on Github? Not that it’s confidential stuff, but I prefer not to share things I don’t explicitly choose to, so if not then that would be an advantage.
It's not restricted to GitHub. You can choose a remote repository of your choice. Okay then it's probably the same but yeah having everything in one place is definitely a plus.
The whole programming model of JSF is broken. Instead of using the strength of http and REST it provides a leaky abstraction over it. The different scopes aren't a strength but a symptom of a programming model not very suitable for the fundamental principles of the web (aka REST).
&gt; the fact that we pay Jetbrains means their build tools should work. Umm... no. That’s not how this works.
Totally agree I’ve been a static language guy for most of my career and when I dev JavaScript in Webstorm their static analyzer is so good I feel like I’m coding in a static language. Also I write better code cuz of the hints and warnings it provides. 
I've been syncing my settings to a private (free) BitBucket repo for a year now and it works fine.
This would remove java.xml.bind too. Which would break every existing application which uses JAXB e.g. to load configuration files. 
Simply depend on and bundle the version of JAXB you're using explicitly. Many (most?) applications already do this, and work transparently in Java 9 already (where you have to do something like --add-modules java.xml.bind to enable loading the platform-provided JAXB)
Simply depend and bundle isn't simple at all for many applications. And adding command line switches is not transparent, especially when you target multiple versions of Java. I agree that it is a good thing, but Java 9 the toughest migration yet.
&gt; Editor-based REST client This is gold. If they add support for more curl-like things (like import/export curl lines) would be platinum.
It's pretty common to see jaxb in a project. The alternative is Jackson which I think performs better. 
Spring in Action. 
If rebuilding an old application is an acceptable solution, then yes (and assuming the licenses allow bundling, there are many steps that need to be checked). Lucky that enterprise are in practice stuck with java 8 for a while so stuff made to work with e.g. 6 should work, but eventually this is going to be a big problem as in my opinion one of the strongest java features has been superior backwards compability. 
I shouldn't have used the word "simply", agreed. :-) By "work transparently" I meant that if your application (or application server) explicitly uses and depends on some version of JAXB (like it probably should), then it'll keep working on 9 and forward and should be less of a hassle in the long run. Prior to 9 you'd typically have to add the version you depend on to lib/ext to avoid fragility (not many do this), while on 9 and later then --add-modules java.xml.bind will actually be more likely to break your app. 
No need to rebuild anything to add a JAXB jar to your application class path in 9.
Ever since I switched to IntelliJ, I'm using the Eclipse keybindings in it. Fortunately, there is a Eclipse keybinding profile available by default 
Seriously scratching my head at this one. Any ideas welcome. 
yay some pages and the good ones are hidden behind "Please sign in" 
Is it worth buying Webstorm if I already have IDEA that seems to have pretty good analyzer for JS sources?
Haven't used idea for JS much, but have used both webstorm and phpstorm and honestly both do the job just as well. Webstorm is aimed more at JS frameworks, but I have developed an Ember app in phpstorm and that worked really well. So I think idea should be great as well. 
Yeah I think I'll give it a try with montly sub. IDEA can already understand React jsx, modules in package.json and ctrl+t/g/click navigate through stuff which already is paradise so I'm hoping for some real magic in Webstorm :)
Did you look at the source?
:-) Did you look at the question?
Unfortunately, spring can get in the way. I have a spring boot webapp which sends json data to various other services, via RestTemplate.postForEntity. As soon as I add the jackson-dataformat-xml dependency in the pom, postForEntity decides to serialize *everything* as xml, which obviously breaks everything. I think that [this code!!](https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java#L83-L85) has something to do with it. I could not find a way to prevent that, and am now forced to go back to using JAXB or org.json. Autoconfig is a big fat mess if you ask me.
It was a neat idea at the time, but no longer relevant to the code I write. A bigger concern is that many of the libs I depend on *do* use JAXB, and that it is no longer available to Java &lt; 9 code running on Java 9. Yes, I know about the command line switches, and module configuration classes, and multi-version jars. The bottom line is that there is no way for me to compile my application once and cleanly deploy it to both the Java 8 and Java 9 runtimes, and the crux of it is JAXB.
Who needs getters/setters? @Test public void noGetOrSet() throws JAXBException { JAXBContext jc = JAXBContext.newInstance(Data.class); Marshaller m = jc.createMarshaller(); m.marshal(new Data("This is a test", 1), System.out); } @NoArgsConstructor @AllArgsConstructor @XmlRootElement @XmlAccessorType(XmlAccessType.FIELD) private static class Data { public String msg; public int count; } Output: &lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;data&gt;&lt;foo&gt;This is a test&lt;/foo&gt;&lt;bar&gt;1&lt;/bar&gt;&lt;/data&gt;
I do this in my spring boot project with Stax but the pattern is the use a HttpEntity&lt;String&gt; and just provide the json payload as a String value. Take a look at the docs for RestTemplate and you can see how to add your own converter https://docs.spring.io/autorepo/docs/spring-android/1.0.x/reference/html/rest-template.html It shows some usage examples at the bottom for sending Json by adding your own converters to the RestTemplate
I'm surprised it's not been mentioned, but if you can start from scratch on it then look at https://start.spring.io/
It's an Eclipse application, and available as a plugin to Eclipse. But I'm sure, you can ping https://twitter.com/hirt and discuss the possibility of future IDEA support...
In this project, we inject the restTemplate, so it's a singleton and we can't modify it on a per-request basis. We really want to inject it ready-to-go, because that's what spring is for, right? Converting to string before sending is a good idea, but we'd have to make changes in many classes, and could easily forget one. 
I'm thinking that count is possibly set to -1 or something as a default value? What does count actually count? Is that what is returned when .size() is called?
Yup, and you can also profile in Netbeans with VisualVM. I’ll make a Twitter later and ask him if there are plans to support IDEA though, thanks.
Funny how people always adjust what's supposedly the "principles of the web" to what their own favourite framework does. Aren't the principles of the web requesting a URL and getting HTML back? Where is it written that those principals threat the web as an RPC service that transmits raw data in JSON format to client applications? Anyway, modern JSF makes better use HTTP and HTML than you may think it does.
&gt; No surveys, no job offers! Such content will be removed without warning.
`StringBuilder.count`is the number of characters actually used in the StringBuilder. `StringBuilder.length()` is implemented by returning `count`. It is not possible for `count` to be negative. 
You can also try CodeFights.
Webstorm is not better than IDEA with appropriate the plugins installed. You can install all jetbrains IDEs except for Resharper and CLion as plugins in IDEA.
Not only is this a *programming related* question but, what is even worse, it is a direct link to *stackoverflow*. + *Programming related* topics should, as the plenty hints on the page indicate be posted in **/r/javahelp** + direct links to other sites, like SO are forbidden in all programming related subreddits since we are not a second opinion to those sites. **Post removed**
When it comes to reading XML I prefer XPath based binding e.g. via &lt;a href="https://xmlbeam.org"&gt;XMLBeam&lt;/a&gt;. It produces much more relaxed bindings, allows dynamic updates.
Is it *really so difficult* to read the **sidebar**? **Do not post tutorials here!** These should go in **/r/learnjava**. Still, since this is about *android development* it shouldn't even be there. Should at best be in **/r/androiddev**.
&gt; where you have to do something like --add-modules java.xml.bind to enable loading the platform-provided JAXB That's precisely the thing that will no longer work, if I get this right.
While backwards compatibility is an important concern in the Spring world, the migration from Boot 1.5 to 2.0 most certainly will require some changes to your sources and/or configuration as there are major upgrades of underlying ecosystem projects included. E.g. the new major revision of Spring Data took the chance to tweak some of its user facing APIs to use Java 8 concepts etc.
You display next to no participation in discussions and only keep posting links. This is not the behavior we expect to see here. You don't even follow the *"no tutorials" rule. We want *active participants*, not just *content submitters* and *self promoters*. Keep going like that and you will overstay your welcome and actions will be taken against you. I'd also recommend that you read and follow: [**What constitutes spam? Am I a spammer?**](https://reddit.zendesk.com/hc/en-us/articles/204536499-What-constitutes-spam-Am-I-a-spammer-) 
That JAXB thing is really something (for library devs). It looked like any other JDK API when it wasn't. Upgrading that dependency when supporting Java 6 - Java 9 isn't exactly straight forward... But ultimately, it's probably worth the trouble.
Or not spam random articles at all. OP is one of the strange accounts that seem to favor "kdnuggets.com", but posts juuust enough other stuff to hover around the 10% mark (the old classification for spam).
It seemed like a neat little API to use when it was part of the JDK (Java 6 - 8). But now that it has become an external dependency, I really regret having used it (Java 9+). This is my opinion as a library developer. For end users, I still think it's neat. One of Java EE's better "standards".
&gt; There are two more event kinds – ANNOTATION_PROCESSING and ANNOTATION_PROCESSING_ROUND but we’re not interested in them here. &gt; we’ll insert runtime checks for all numeric arguments marked with a @Positive annotation. So you're writing a plugin to process annotations but not use the intended events for that? Seems like a weird thing to do. 
It's now an external dep and when it comes to external JSON libraries Jackson is the de facto standard. I've used it a few times (because of consistency reasons in existing codebases) but I personally prefer Jackson. 
With Java 9 that already breaks since you have to enable them at runtime. 
I assume you've tried to manually configure your RestTemplate? You should be able to declare it in your configuration and instantiate with whatever MessageConverter you want rather than just using what autoconfig decides.
You can still run JSP's in Spring Boot, but not as an executable jar. If you deploy as a WAR, or even use an executable WAR (instead of a jar) you should be able to get it to work (just follow WAR resource location standards) 
Why not? If your application is as mission-critical as you say, you should have tests which verify your entire application. If you are unlucky enough to discover a bug in your testing, submit a pull request.
Have you tried debugging and checking count at each step? This is quite interesting. 
Even if you do one-man projects that are company internals, always use source-control (Git) and a proper build setup (Maven/Gradle). This way your source code and builds are managed independently of your IDE, and it becomes much easier to maintain over time and to enroll new developers on a project. This also enables build pipelines to automatically test, build and deploy your code. Also it prevents huge IDE's interfering in your build with their own ideas about what your build should consist of. Only advantages in my opinion.
Don’t think so, look at OpenLibert and Payara just to mention two. Quite a lot of activity there.
Yes, once JEP 320 is delivered as proposed (might be 10, might be 11), then the java.xml.bind jar/module will have to be manually added to your application class or module path.
Blog spam. Here is the original article: https://www.jetbrains.com/idea/whatsnew/#v2017-3-java-ee-8, which was already posted btw. 
I would say either you have it or you don't. There is really no time frame.
It's a trap (I recently ported JAXB to StAX and it's now more maintainable and faster)
I get the need to cleanup the standard lib, but curious why removing the binaries is necessary? Surely the JDK should be shipped with all of the software tools a dev would need when building any kind if Java-based app? I use wsimport all the time in SE apps to generate classes for web services. It seems silly to make it a separate download...
I use it all the time, directly or indirectly. It's a very simple means of serializing objects to a neutral format.
Seems you’re right, the pages I randomly checked happened to be accessible in the preview. Hmmm
You can specify the message converters for a particular rest template. In my experience it does a really good job at looking at content type and selecting the correct one. The default list of message converter has like 7 or 8.
Yeah well it is a slow heat death, with some big companies trying to maintain their legacy app. But how does it look regarding new apps? When there's a choice between Java EE, Spring or even another stack, the Java EE choice is at the bottom of the list.
I'm not sure if it's me, or the conventions, or the libraries... but I can't stand working with XML. Everything seems 1000 times easier with JSON. Obviously, it could just be that I suck, but it seems that other people control the annotations for your XML and you're forced to use them. I'm currently working with a very large company's API. They were kind enough to provide XSDs. I'm able to create Pojos from the XSDs, no problems thus far. But when I get into serializing requests, lots of the request objects that I'm posting aren't annotated with @XmlRootElement, so they won't transcode. The only way I can do it is to wrap then with in a JAXBContent node with a Qname that matches what it should be (https://largecompany.com, and 'Request', respectively) and then send across an HttpEntity of type string, but with Content header of application/xml. This really isn't isolated... I just tend to end up in ridiculous situations when using XML for transport. I think JAXB is decent at what it does, but at the end of the day it's too rigid. At least with Jackson and JSON I can pick and choose how I want the objectMapper to behave when things go awry... or create mixins when the code I'm trying to transport isn't mine, but won't transcode.
JAXB is fine, it's not its fault it tries to implement an impossible data format. I hate when it creates a `List&lt;Serializable&gt;` or `JAXBElement&lt;? extends Foo&gt;`, but it can't really be blamed.
XML is so common that JAXB doesn't really belong in Java EE.
I've been using git for years now. Java is just not my forte so I am not familiar with all of the tools. I'm the only developer here currently so I wasn't too worried about having the IDE manage everything.
There are good migration docs though, which should reduce some of the pain.
I only ever used it in context of having an xsd file, generating the jaxb classes by xjc, and then filling them with data. It's really useful and straightforward when used this way imo. 
Annotate your controller methods with produces application json. Then spring should take for you. 
He said immutable.
It's been this way for at least the last seven years that I've been using it. I wish I'd switched to the Toolbox sooner though. It makes updating so much easier.
Everything still works fine when msg and count are private...overlooked that the first time. @NoArgsConstructor @AllArgsConstructor @XmlRootElement @XmlAccessorType(XmlAccessType.FIELD) private static class Data { private String msg; private int count; }
How are you calling `postForEntity`? If you do the following, `RestTemplate` will serialize the entity to JSON with jackson-dataformat-xml in the classpath: HttpHeaders headers = new HttpHeaders(); headers.setContentType(MediaType.APPLICATION_JSON); template.postForEntity(uri, new HttpEntity&lt;RequestType&gt;(request, headers), ResponseType.class) If you just do this: template.postForEntity(uri, request, ResponseType.class) The request is indeed XML. But how would you expect RestTemplate to serialize the request if you don't tell it what the content type is?
This seems to keep coming up here. See https://www.reddit.com/r/java/comments/71lse7/java_9_released/dnhk2ls/ 
Once upon a time I've used and liked JSF and then discovered its fundamental design flaws. Thus I don't adjust the principles of the web to my favorite framework. &gt; Aren't the principles of the web requesting a URL and getting HTML back? No. This is only one of many aspects. Another is linking ressources what was a complete disaster in early JSF versions and is still not as naturally as it should be. And what about content negotiation? Some clients may prefer content in french or PDF or JSON instead of HTML? Another thing I really dislike in JSF is the use of different scopes. This programming model is unnecessary complex (while simple at a first sight) and contradicts the stateless nature of the web with implications regarding scalability and fault tolerance. Yes app servers can do something about it, but they are (in this point) a cure to a fundamental design flaw that comes with stateful web applications and client state on the server side. 
Nobody is forced to use field injection with Spring (Boot) or any other DI framework. But it is true that Spring Boots hides many things. But it gives you a configured system where most things work out of the box. If you would start with plain Spring you would need to learn a bit more to get started, however this could pay-off in the long run.
Be careful to select "Gradle" and "Kotlin" for the best experience ;-)
He said immutable.
Yup... That was the first place we discussed it. The solution was anything but clean, though. I had to bundle a copy of a *core* API that's included in both the Java 8 and 9 runtimes with my application, just to get around Jigsaw's nonsense.
&gt;Even if you are writing an API for others to consume, I'd argue that it's not even your responsibility to go to this extent. It's not the API author's job to save consumers from doing stupid shit like the examples given. When working on the Bukkit API, it was an issue for us. Our primary stakeholders are server administrators who don't want some novice developer destroying the server. The API was defensively coded, making mistakes obvious to the plugin-developer and administrator (both of whom have almost no direct interaction with each other). The server cryptically becoming non-functional is a worst case scenario. A plugin loudly failing to function is a best-case for mistakes. And, if you ever met this developer community, you'd be surprised at what gets tried, intentionally or not. One of the biggest culprits was developers trying to implement (badly) certain interfaces that are supposed to be explicitly constructed from a factory or internal systems.
Nobody is forced to do it, sure. But you join a dev team who are balls deep in spring boot magic and like themselves for it, and you really can find yourself scratching your head about how anything works without hours in the debugger. Spring Boot can create that situation. Spring MVC is useful and reasonably minimal, you can keep it to the sides of your app, whereas boot tries to do way too much, it becomes intrusive. There’s always a social aspect, and in that context minimalism can keep your code honest.
If anyone on your team puts "import *" into the manifest get rid of it. Keep your imports tight and be sure you know the versions of everything you are using. You can end up with crazy scenarios where you import the wrong dependency at runtime because of an import statement being too permissive in the manifest. Consider splitting your bundles into an API bundle and an implementation bundle. This will allow you to update the implementation at runtime if you have a need for such a thing. The API bundle will really contain mostly interfaces, and the impl bundle will contain your classes. Try to be aware of your dependency graph, if you are deploying a lot of bundles with lots of interdependecies the resolution of all of that can consume a lot of time when bundles are being started because it is a [NP-Complete problem](http://underlap.blogspot.com/2010/02/osgi-resolution-is-np-complete-so-what.html). I would recommend flattening it out as much as you can. I have made extensive use of Karaf as a runtime container in the past, not sure if you are going to use something like that, but it definitely makes administering all of your bundles pretty easy. There is a [Karaf plugin for Maven](https://svn.apache.org/repos/asf/karaf/site/production/manual/latest/karaf-maven-plugin.html) that will allow you to build a customized Karaf runtime that only has the features you need. Features are a deployment descriptor for Karaf that allows for very easy deployment of code. I recommend if you use Karaf that your deployments use features as well.
&gt; thus I don't adjust the principles of the web to my favorite framework. I'm not sure how that follows. JSF is not your favourite framework, or is it? &gt; Another is linking ressources what was a complete disaster in early JSF versions and is still not as naturally as it should be. I'm not sure what you mean. Linking to another page or to an image? A link to another page is, well, just a link. There's very little special about it. You might refer to the navigation rules that JSF has, but to be honest, I've written uncountable lines of JSF and I never used them since the early days. &gt;And what about content negotiation? Some clients may prefer content in french or PDF or JSON instead of HTML? Locales are perfectly supported, always have been. Content negotiation is actually something that was a very early feature of JSF, long before REST was known by most people. It's the entire render kit concept, which, indeed, allows you to render the same page in HTML, CHTML (yes, was a thing back then), PDF, and what have you. But... for a website you rarely if ever request a complete page in JSON. Take this reddit page that you are now looking at. Can you request this page from reddit in JSON? What does it even mean to request a full page in JSON? When requesting data as opposed to full web pages in JSON one normally does a web service call, and JAX-RS in Java EE is perfectly capable of serving that. A web service call returns a specific amount of data, say all users that you responded to, and that's completely different from a full web page which has menu's, login elements, different amounts of content (posts, last visited pages, your name, your karma, etc etc etc). &gt;This programming model is unnecessary complex (while simple at a first sight) and contradicts the stateless nature of the web I wonder if anything but serving plain HTML contradicts the "nature" of the web. The abuse of javascript that we see today, is that so true to the nature of the web then? The SPAs that pop up all over the place and break the back-button and history and linking and what have you. Is that true to the nature of the web? Scopes are in recognition that state exists. You can want things to be stateless, but they often aren't. A stateless protocol like HTTP doesn't exclude a notion of state. That's why we have headers with correlation IDs, and cookies with session IDs. A scope is an easy programming concept that organises these things at a high level. Best of all, in JSF you don't *have* to use scopes. Go on, make everything request scope and use the stateless mode for your views. Nothing is stopping you, and in fact I have designed a couple of apps using that because it made sense there. But in other apps I happily used all common scopes. Funnily enough, not rarely I see other frameworks discussing features for their restfull MVC frameworks, that basically boil down to what JSF does with scopes. Go lookup some of the discussions for the MVC 1.0 framework. Look at server-side react for instance. &gt;fundamental design flaw that comes with stateful web applications and client state on the server side. It's not a fundamental design flaw. Tons of things keep some state at the server. Not doing so makes a lot of things much harder and more eager to bugs and faults. And did I already mentioned that in JSF you don't have to have state at the server? 
If you were part of my team, I'd smack you on your head for this kind of thinking.
get the trial and check it out
&gt;With Docker-based workflows, you can create a list of steps that automate the entire process And then later on... &gt;No other software installation or setup is required! No databases, no caches, no Docker I am confused. Does it use Docker behind the scenes or not?
Sorry, didn't mean it to be misleading. It does use Docker behind the scenes. The "no databases, no caches, no Docker" was meant to convey that you don't need to manually install them. It is essentially a bootstrapper which starts a VM (using whatever hypervisor is available) that has a Docker daemon, and that runs a single-node Kubernetes cluster. The workflow steps are essentially translated into the running of Docker containers (in reality, it actually turns them into Kubernetes pods and services). The error you are experiencing: that does seem to be an issue, and we'll take a look (if you want to track it - I created it as an issue - https://github.com/stackfoundation/sandbox/issues/8). If you are able, did you try running sbox as an Admin?
That maybe true but I’d rather support jet brains because they make awesome products and it’s like 6 bucks a month and I don’t have to fiddle with plugins. 
Nothing is immutable if you count reflection or other tricks.
The animation shows what happens within the JVM for spring pet clinic when u click logout link. More examples here www.xray4j.com
Equifax Edition.
Equition. *** ^(Bleep-bloop, I'm a bot. This )^[portmanteau](https://en.wikipedia.org/wiki/Portmanteau) ^( was created from the phrase 'Equifax Edition.'. To learn more about me, check out this )^[FAQ](https://www.reddit.com/78ilq0).
And here I am stuck with a huge enterprise powered by struts 1.3.8. FML.
Spring Boot is just Spring Framework with a bunch of pre-configure. Just check out the sping-boot-autoconfigure.jar/META-INF to see the magic box
And then you need to use Intellij for best experience too 
[removed]
https://www.xray4j.com/view/26/all I don't know why Spring MVC is so obssesed about UrlPathHelper
Maybe i'm missing something. What is the added value in using this solution with respect to a docker-compose solution? You still need a Yml conf file, and fine tuned env variables and port assignments, i guess.
That's a good question - here's some additional conveniences: - You have a wrapper available, much like the Maven wrapper or the Gradle wrapper, which means if you add to Git like those wrappers, you can run workflows immediately after checkout .. that out of the box experience is nice (requires work and help to improve - we have lots of platforms to deal with and bugs) - With a workflow, you can provide a base image and a script and the image is built from that - a lot of times that's all you want - customize an image just a little bit without having to create a Dockerfile .. you can also use a Dockerfile like compose if you want - You can run sequential steps and start long running services - as in the example, you sometimes want to start services and then run things against those services - The health checks are based on Kubernetes checks so in addition to script checks, you get TCP checks and HTTP/S checks I think altogether, they make it more convenient to use Docker - of course it's still Docker underneath. 
Is it *really so difficult* to read the **sidebar**? **Do not post tutorials here!** These should go in **/r/learnjava**. Still, since this is about *android development* it shouldn't even be there. Should at best be in **/r/androiddev**. You should also **read** and **adhere to** the reddit rules: [**What constitutes spam? Am I a spammer?**](https://reddit.zendesk.com/hc/en-us/articles/204536499-What-constitutes-spam-Am-I-a-spammer-) Limited self promotion is okay, but **excessive** self promotion isn't. 
**Sidebar** -&gt; **Do not post tutorials here!** This is your **only** warning. Next time will result in a permanent ban.
Thanks, I guess that would work. I probably won't be able to do it this way, though. Making changes in many places is considered risky in my current job. Also, that's pretty verbose! I think there should be a spring config to set the default serialization explicitly. After all, the concept of default serialization *does* exist, in a very real sense, even if people are not supposed to depend on it.
In general people don't write tests to test the frameworks they use.
&gt; Can you request this page from reddit in JSON? actually, you can: https://www.reddit.com/r/java/comments/7goy9i/where_to_begin_with_spring_mvc.json
This is the first time I've seen the word "struts" in over ten years.
He's writing his code, not using others that he needs to sidestep with tricks or reflection.
I'm confused. 4.2.1 was released in April 2016. Current version is 5.2.0. Milestones and roadmap is documented here. https://github.com/apereo/cas/milestones
&gt; I probably won't be able to do it this way, though. Then configure the `RestTemplate` with the set of message converters that gives it the behavior you desire, but keep in mind... &gt; Also, that's pretty verbose! ..it's REST and inter-system communication. It pays to be explicit and say more, rather than say less and depend on invisible constraints. Communication protocols should be clearly visible in the code. &gt; I think there should be a spring config to set the default &gt; serialization explicitly. There already is exactly this. The `RestTemplate` has a constructor just this purpose. 
Thank you very much!
Just a general comment that applies to this post and to a number of others in this sub: what *is* it? I have never heard of Apereo, and after reading the linked page, I still had no idea. (I eventually figured it out, but it took several clicks around the website to find it.)
Same JSON, both should be in standard platform
You should probably read a nice book. This might help you: https://redditfavorites.com/books/programming/ 
I second reading a book on the subject, but I personally also had great use of John Purcells java beginners guide (videos on cave of programming, udemy and possibly YouTube) as it also integrates the basics of thinking more object oriented. I moved from C to java as well and found that to be helpful at the time. 
Read the sidebar please. We have other subs for these types of questions. Check out /r/learnjava and read the FAQ.
The point of the builder pattern is to be able to construct immutable objects with an arbitrary number of optional parameters (with default values). How do you do that with a single convenience method?
Cave of Programming is really great
You should check out Head First Java. It gives you a good introduction to many areas of Java in a fun and easy way.
We've recently decided to switch to TypeScript for new projects at work and it's been very nice so far, I can only recommend you to give it a try :) WebStorm/IntelliJ support it very nicely, too.
Not trying to discourage your support, you do you, but if anyone else is interested: I think I only had to install the NodeJS plugin to get a standard npm/webpack JS project running super nicely out of IDEA.
Yeah I pay to support Jetbrains. I wouldn’t be remotely close to where I am today without them. Show some love lol 
Hello googlything. Mixe ist in search for a job. :)
If you are rendering a front end GUI, you can also look into Vaadin or GWT. They provide a nice front end and then you can connect to the backend using RPC
Excuse me, are you sure that this book about Java?
Some of them are, it's a list.. 
I guess this list of books has excessive books for learning Java, specially about Perl and Python. For learning Java I recommend books of Key Horstmann "Java for professionals". And "Effective Java" of Joshua Bloch. They are classic books which verified by time. But of course exist many other good books about Java, which you can find in Internet 
My strategy is to skim through each book, which doesn't take more than a couple of days each. If after that any of the books seem worth a more thorough read, then I usually find that the second, deeper read is much easier.
[removed]
Java3D or JavaFX? Java3D is old. I found this: http://lqd.hybird.org/journal/?p=196
If only Java had named and defaulted parameters, right?
https://github.com/apereo/cas/releases
Is there any advantage of using Jetty instead of tomcat? Quick google search showed that main benefit is that Jetty is more lightweight, but that looks to be the main point of it? Is there any other scenario where Jetty is better other than limited resources?
Jetty is very easy (perhaps easier) to embed and often used this way. Tomcat is more of a traditional servlet/war container. In the end, it depends entirely on what you want to do with it.
The embedded nature, we use it as a way to do integration testing as it is easier to setup and get going from within a Java unit tests, at least it was a few years ago. Also much easier to have it run via a console app.
didn't use jetty but i could embed tomcat easily on my app.
You can also embed Glassfish if you really want to.
we use jetty directly without embedding it in tomcat, by deploying and running it through docker, using kubernetes to handle the abstraction. it keeps everything a lot simpler, and performant
So, if I understand correctly, that is just an outline to the course. The actual course is to be taken in person over screen sharing software at specific times of the year.
Spring Boot defaults to embedded Tomcat. With that use case, I don't see any appreciable difference between it and Jetty.
Code academy is good for learning the basics but in my opinion nothing beats actually trying to make something. Object orientation can be confusing at first and is probably easier once you have programmed for a bit.
Not sure your age matters, the best way to learn is by reading and doing. There's plenty of books recommendation threads here already, so I won't repeat that. If you do have specific questions don't forget to use /r/javahelp instead of this sub-redit.
If you're serious, do a beginners course. Second best is buying a good book. DO NOT buy anything that teaches java in 24 hours, 7 days etc.
Try the 'Head First' series of books. The one on Java and the one on Object-Oriented Analysis and Design would get you started the most. (If you look around a bit, you might even find pdfs of them online for free)
Check out /r/learnjava and consider the MOOC. 
Learning related questions go in **/r/learnjava** where the **sidebar** contains a wealth of resources including the **Free Tutorials** section that holds some of the best Java tutorials available. In particular, the MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html) is highly recommendable.
I like Tim Buchalka's video courses on Udemy. He explains the concepts well and challenges you to complete exercises on your own. He has a full Java course and an Android App course (that also includes some Java). Keep an eye out for the next $10 sale on Udemy.
I use JAXB quite frequently. If you want to do both XML and JSON the Eclipse Moxy JAXB implementation does both XML and JSON with the same annotations. http://www.eclipse.org/eclipselink/#moxy If you don't need JSON then you can just use the reference implementation which is in the JDK in Java 1.6 - 1.8.
Yes, as I said that is just the course description and frameworks used. You have to pay for the actual course, and I don't know if it's still available.
Embedding Jetty in Tomcat? That's a new one.
[Looks like it](http://download.java.net/media/java3d/javadoc/1.5.1/javax/media/j3d/Shader.html), [yes](http://download.java.net/media/java3d/javadoc/1.4.0/javax/media/j3d/GLSLShaderProgram.html).
went a little fast ther; meant to say embedding the servlets* in tomcat
 * [JOGL](https://jogamp.org/jogl/www/) * [LWJGL](https://www.lwjgl.org/) * [jMonkeyEngine](http://jmonkeyengine.org/)
Couldn't I just put a .properties file somewhere and use the [Properties](https://docs.oracle.com/javase/9/docs/api/java/util/Properties.html) class?
So are you an alt account of /u/salarydog, or is it just a massive coincidence that both of you only spam links to this site?
We have something similar to this hand built, but we choose to have the environment variables override ones in the .env file. Curious as to why dotenv chooses otherwise.
you might want to check that out too http://simpleflatmapper.org/0105-getting-started-poi.html no annotation needed
Just wanted to point out that the difference between this and other libraries is that it doesn't rely on Apache POIs usermodel classes e.g. `org.apache.poi.ss.usermodel.Cell` which consume a lot of resources for some bigger files (turns out those XmlObject's take up lots of memory). In zerocell, we hook straight into the XSSF parsing events which keeps the memory in check and gets us the data a bit faster. For anything other than reading simple straight forward POJOs, you're better off using something like SimpleFlatMapper :)
nice thanks for the details.
Too bad, this has a hard dependency on lumbok.
What's wrong with that?
Is there also a programmatic, non-annotation-based API (because annotations are hard-wired)
you're up to something
The problem this library is trying to solve, is already solved by Spring PropertyPlaceHolder and friends. Spring configuration also contains support for several other scenarios not covered by this library. So why re-invent the wheel? Unless of course this is just an example project for the author to learn Kotlin.....
I use Eclipse and downloaded the "windowbuilder" plugin. It's all drag and drop and I churn out tools and desktop applications pretty fast. used it for my world editor/entity editor for my game in LIBGDX. I'm not saying it's better than C#, but gives me that drag and drop options that you get in visual studio.
JGit not good enough?
Another one of these kdnuggets accounts, eh? https://imgur.com/a/hzN6B
I'm glad you gave me a plug-in. It's annoying to be developing in Java and not be able to physically see what's going on before runtime. I wish that was standard in eclipse.
Good point. .env should never override the env vars. machine specific env var should override .env. i will make that change
we have microservices written in python, node, java, and go. rather than using framework specific methods for configuration we've adopted the use .env for all, hence the need. agree on this precedence issue. the machine env should override .env. i will make the change
thanks for all of the feedback. i've modified the precedence as such. java-dotenv now ensures that existing environment variables override those specified in .env
I feel like there are two inevitable stages for the growth of large software projects. 'Let's make everything a plugin!' And 'Let's give our new architecture a totally cryptic code name!'
Tell me about it. For some of my projects like my games in LibGDX I use Android Studio. I only use Eclipse for the WindowsBuilder and then I copy the code over to my projects. And you still have to know about the layouts. Though if you put Absolute layout on forms and widgets then it's similar to what you have on windows. Like I said, not the best, but helps having the Editor to layout things quickly.
That will definitely help.
What is the alternative in spring for SpringJUnit4ClassRunner after moving to 5? Been looking at upgrading to 5, that is the only real question to look into as everything else is pretty straightforward. Has anyone upgraded yet that used the old runner previously?
I haven't tried it yet, but I believe you are meant to use `@ExtendsWith' and the `SpringExtension.class` https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/junit/jupiter/SpringExtension.html Happy to be shown otherwise
I don't want to pull a dependency that is not approved or that I don't use in a sensitive project. If you're forcing the issue it's harder to adopt or to sell to existing code bases.
Thanks!
Try [Spring Pet Clinic](https://github.com/spring-petclinic/spring-framework-petclinic/blob/master/readme.md).
https://github.com/spring-projects/greenhouse
I had found it, it could use the old libraries or maven. I followed their guide, it failed. However, I had managed to find this good one: https://github.com/st-tu-dresden/guestbook
Lombok is a bytecode generator. As such it is not necessary to exist on the classpath at runtime. If you look at their pom its actually scoped as provided which means that, while its in your dep chain, it will be excluded from any deployables you build by default. If you are hesitant to bring in outside libraries why do you care if this project uses it in the first place since it is also an outside library?
The fallback is incredibly useful as it is means you can configure environment specific info in your deployment scripts instead of trying to maintain multiple environment cpnfigs in your project. You may also have a seperate team managing deployments that needs to be able to configure things and not want them to have to create environment specific builds. For those of us already using spring we get this by default with java properties so there is no need for this lib. However, when not in spring land I often want this behavior.
Ugh we are doing something similar to keep alive odbc connections within our application. The behavior of odbc is different enough when compared to jdbc that swapping is i.possible without a full test of the system but nobody really knows the system well enough anymore its too old. So odbc live on :(
This is a very minor point, but Assume isn't new in JUnit 5: http://junit.org/junit4/javadoc/4.12/org/junit/Assume.html
JUnit 4 also had parameterized tests but they were real ugly and didn't work well for applying to a single method. I like JUnit 5's CsvSource for easily and readably defining a list of cases when you have multiple parameters that are varying (often, an input and an output).
Not super happy it takes multiple dependencies neither of which is called junit. Very confusing to figure out what you need to add.
I have also learned to love AssertJ after a brief period of initial skepticism.
Ooo. What is this? More info please!
Angular 5.0 xd
That was interesting. Much more because i had no idea they released angular 5. Wasn't 4 released not too long ago? And 2 a year ago? Wtf are these people doing? Are the APIs that much changed? I guess they must be if they change major version numbers. Who the fuck can keep up with this shit?
/r/lolangular
We still use [XmlBeans](http://xmlbeans.apache.org/) even though it is no longer an active project.
Java 8 and 9 stop recieving security updates in September 2018. I'm confused about Java versioning but it's not clear to me if there will be a Java 10 or if there will be a time based release of 18.3 (March 2018) support for which will also end in September 2018. Under the current proposal that means the release after that, 18.9 (September 2018) will have long term support for 3 years. That's a good reason to update to that version even if you don't feel like you are getting much feature-wise. Source: http://www.oracle.com/technetwork/java/eol-135779.html
This...
That's why i just use react. They've recently done a major rewrite with react fiber but didn't change APIs. We just got better code under the hood. It's less similar to Java but that's not really a bad thing when building. I don't know why Java people are so into angular
Oh! Matt; didn't know you were on Reddit. Awesome work; thanks! Posted this to our internal Slack too. 
They changed to SEMVER at some point and with that stated that they'd be doing a major release every 6 months, minor release every month and patches every week.
Angular will have a new release every 6 months, so yeah, releases will follow-up quickly. APIs didn't change much though, the most prominent change is the deprecation of `Http` in favour of the new (since 4.3) `HttpClient`. The biggest difference between the two is that you no longer need `.map(res =&gt; res.json())`.
Have you read it? (aren't you agree?)
I have more experience in Java than Python. They are very different languages. You will only benefit from Java in some specific projects. You will be better off learning Python, not just for it's modularity but also for it's ease to learn, and I don't think the hate you'll get for programming Java will be worth at all. Although this also depends on what are you planning to do in the future, what do you want to program? Overall, I would highly suggest you to learn Python but this depends on your situation.
Although i dont have a computer background i know 2 languages already. Excel VBA (Advanced) and SQL (Basic). As to what do i want to do. I am interested on doing automations but i am also open to creating mobile apps.
Okay. I think you should learn Python first. Java can be a bit overwhelming and will make you develop a different mindset that you would want for programming other languages. Python is really good for automation and easy to learn for someone without much experience. After you learn Python you will have a good idea of what programming is and it will help you understand the complexity of developing mobile apps. You can take Python as a starting point and as a kinda of "really check" before you step into Java for mobile apps (in case I was not clear enough, you will use Java for Android applications). In this case if you decide to back off you won't feel overwhelmed and you have knowledge enough to make scripts for different purposes, which come in handy, as well as a good background in programming which will make easier to learn other languages. As you learn more you will be closer to the reality of programming in different real life scenarios, this will also allow you to find new areas and passions as the world of programming is huge. Good luck man, let me know if you need anything!
Any video recommendations for Python? I have this bookmarked: https://www.youtube.com/watch?v=1F_OgqRuSdI&amp;list=PLGoJzB271_7r-iLYuEHEPJ5pSIYxXjJEn
I don't really know a lot of video resources of programming. I recommend reading 'Learn Python the Hard Way'. I just realized they have some video resources but I don't know if it's in your budget. https://learnpythonthehardway.org
Java is a tool you can use to produce a wide variety of apps, here are a few things you could try - Mobile apps - Web apps - Desktop apps - Discord bots - Automation with a raspberry pi You can probably do all that with python too, so it all depends on your personal preferences. Both of them will have a library for about everything you might want to do.
Literally Everytime my organization tried to come up with some angular prototypes to demonstrate and create some momentum (large Dev shop) we were met with... Well the next version of angular is coming out and it's so much better why are you wasting our time. So we're still largely on struts 1.
Since this is a spring-boot app, might be worth directing people towards using the maven-frontend-plugin (basically Node for your build phase). One less software to install and maintain. We maintain a small fork of it to use it in production (since the actual node server is only used during the build phase for resoure compilation).
But in a corporate setting which is mostly used? Or it depends?
They do different things usually. Most enterprise applications are in java but a lot of related tasks like scripting in DevOps uses python (or jython)
Do they know that this is an API not a distribution? And why nowadays every idiotic decision that developers make is excused by "SEMVER"?
Would you recommend that i start with Python first before learning Java?
You can use Java for just about anything. However, like everything, it has advantages and disadvantages. Java performs well and is available on a lot of platforms. It has a slew of mature libraries and there is no shortage of documentation. But Java is also tedious to write and lacks some of the nicer features of other, newer languages. Python is a beautiful language and fun to write with. It also has a ton of libraries and plenty of documentation. However, it does not perform as well as Java and would not typically be used for large scale applications. It doesn't have any compile-time checking, so it's easier to make some mistakes and can be harder to maintain when working on large teams of engineers. If you want to learn programming, Python is actually a better learning language, but if you want to write applications for money, Java is a safer bet.
&gt; but if you want to write applications for money, Java is a safer bet. Okay, +1. Thank you for your input. 
Slick2D is not developed anymore but nevertheless still useful for simple 2D games and very simple to use
LPTHW is a discouraged resource - even on /r/learnpython.
Not videos but excellent tutorials: + [Invent Your Own Computer Games with Python](http://inventwithpython.com) + [Automate the Boring Stuff with Python](http://automatetheboringstuff.com) Not that I actually agree with the previous commenter, though. Java is as good a language to learn as Python. Probably, Java is even more beneficial since it uses proper OOP, has explicit and static typing, and is quite verbose. BTW: Excel VBA and SQL hardly count as programming experience even though both are very powerful. SQL is not even a programming language.
No, it's not. Please take some time to read the argument. The book's content is fine, they just have a problem with the character of the author. Apparently he contributed to the division between Python 2 and Python 3. The book's content is fine. I am an experienced developer and I was introduced to Python by this book, and as many other people I don't see any reason why this book would be discouraged without being because it supports the author. And even that doesn't really matter if you get a copy of the pdf which is highly available online.
Love Love React! If facebook could only make it more of a full framework somehow. Facebook is great! Love it. React!
&gt; Python is also tedious to write and lacks some of the nicer features of other, newer languages. &gt; Java is a beautiful language and fun to write with. FTFA 
It should also be mentioned that once you learn one of them, learning the other will be *much* easier. So if you want, you could learn both.
Over the years i've written a lot of different software in different languages. Starting with Java, using Python, Ruby, i ended up at Java again. Java has its problems, as does every language, but the good parts are simply not to ignore: - Tried and tested virtual machine, easily running on any current operating system (just be careful of file paths, etc.) - Awesome performance if you implement your code/algorithm carefully - huge amount of libraries, documentation etc. to implement practically anything you want (even games e.g. Minecraft - even if it isn't perfect for it) - Many companies use it, thus many job opportunities in different business sectors - Android uses it, even if they are now also using Kotlin But there are also negative parts, e.g. it can be difficult to get an IDE working the way you want, and because there are so many libraries, it can be difficult got understand which to use or how to use them.
Just lol
I tried out window builder. I like it, but I find that I will have to refactor the code. 
Ideas? I recommend switching to an IDE that works and is reliable, Eclipse.
I have been told Python is easier to start with. That doesn't jive with me personally, but I think it's more to do with the fact that I started in C++, moved to Java, then started Python. Most of the applications I see running in Java are web applications, because the nature of the JVM (Java Virtual Machine) make it good for long-running applications that don't need to restart often. Python is especially good for quick scripts and utility operations like generating reports or configuring systems. It starts up very quickly and is very fast. This is also partially why it is the language of choice for Machine Learning programs.
&gt; not just for it's modularity but also for it's ease to learn, and I don't think the hate you'll get for programming Java will be worth at all. Err what? Since when it some random people 'hating' on you in any way relevant. There's only two types of languages: the ones people complain about and the ones no one uses. 
&gt; We know that Spring developers love their IDEs and code editors. And we want them to continue to use the tools that they love. Therefore we implemented most parts of the Spring Tools 4 in an IDE-agnostic way. You can use them in: &gt; Eclipse (or download a ready-to-use distribution of Eclipse, as usual) &gt; Visual Studio Code &gt; Atom IDE So no IntelliJ?
Lots of Pivots are using intellij for their development. They probably aren't contributing an intellij plugin because they trust jetbrains to do it for them. I wouldn't be surprised if there was feature parity or better in intellij already.
Yes, I agree. Maybe I didn't express myself well. I just said that to warn the OP that he would receive hate, probably more than other languages. That shouldn't matter when choosing a language but still many people don't deal well with it.
As someone who is stuck maintaining multiple struts 1 applications....i feel your pain
Tons of shops out there still can't find the effort to upgrade beyond java 6!
I've read that 99% of Amazon is Java. So I'm guessing that means pretty much everything. 
I used eclipse for the first time over ten years ago. It was awful. I'm not sure if it or netbeans is worse. Maybe it's gotten better, but I don't need to try it again. As an IDE, IntelliJ is great. 
I agree to disagree.
Oh yea. Like I said, it's still not as good. I Use it best, when I have a good idea how I want an app to look like, Then I Plan out all the buttons/widgets and then kind of tweak it in code for the rest of the project. Best for rapid prototyping I guess. But worked enough for me to get a world editor and entity editor up in my game really really fast.
I miss a lot of features from IntelliJ Ultimate (license trial expired :( ) but STS it's pretty great. But I hope they improved the Thymeleaf integration.
But with a Spring developed plugin the Intellij Community edition would be sufficient for most people that want to try Spring.
For anyone interested in Graal and Truffle, I created a video playlist from all the presentations/tutorials given, ranging from newest to oldest: https://www.youtube.com/playlist?list=PLHkZYTuOrXRLWIwLbxGo2D6LoGmxHCmOb 
I don't really have more information. I just noticed that there are _a lot_ of account with a strange pattern of their submissions * a lot of submitted links, while at the same time * almost no comments (comment karma), but not none * very close to 10% submissions from kdnuggets.com * 10% was the former threshold for accounts to be considered spammers (and in my view that still the case) * kdnuggets is a website about "Business Analytics, Big Data, Data Mining, Data Science, and Machine Learning", so it's definitely possible they scripted a bot or two You can browse the [domain search for kdnuggets](https://www.reddit.com/domain/kdnuggets.com/) to view who submits links to there, and take a glance at their stats/submissions.
I've used that plugin! Really nice :)
Java. I work in banking. 90% java. Most large enterprise apps are.
I don't know if it was necessarily ever considered a good practice, but is one that some developers have adopted. I, myself, only use `Optional` with the Stream API, which is why it was created in the first place. Aside from having to use another object, I just think a return type `Optional&lt;Point&gt;` creates a lot more unnecessary visual noise than just `Point`.
I started with Python and now work almost exclusively in Java. I think that this is a good way to start, since Python has a lower learning curve in my opinion due to its extensive syntax sugar and lower overhead in starting. Not that one couldn't start with Java, but Python is probably an easier journey, if one were interested in learning both.
It depends. A data or value class like eg class User class with name and birthdate should use constructor injection that enforces all attributes are provided and are not null. Then there's no need to wrap anything in Optional. A class List can have a method findFirst which, in case there are no elements, should return an Optional to indicate this.
Actually once you understood Optional you'll find it much better as returning-type than inner-fields or method parameters, just for the sake of clean code Using Optional for inner-fields or method parameters decreases code readability for... well... nothing, since any object instance in Java may be null, even Optional itself so in such cases it does not add any chance to avoid nullability. It instead tries to mitigate the problem if you use it as returning-type, because of this you are more or less forced to check if the value inside is valid or not and do some operations on it (and you know if a method retrieves a valid result or not). Some dev.'s try to use Optional as inner fields for a POJO in order to say which fields are required (non-Optional) or not (Optional), but frankly speaking non-nullable fields should be supported by language natively and this kind of solution is just a trivial and misleading workaround. It is the same for method parameters. I hope I made myself clear :)
Where in the StackOverflow answer does Goetz say Optional should not be used as a return type for a "getter"? He quite clearly states the original intent was for it to be used as a return type for methods where no result is a possibility (and null might lead to errors), and a getter method could easily meet this criteria.
&gt; Using Optional for inner-fields or method parameters decreases code readability for... well... nothing, since any object instance in Java may be null `Optional` documents the "nullability", and required the consumer to handle it. If you don't understand this you really don't understand `Optional`.
&gt;I think routinely using it as a return value for getters would definitely be over-use.
Why?
Why what? That’s what he said in the response.
If you call `get` you deserve to have your program blow up in your face. Any good ide will scream at you if you do this and `Optional` comes with the basic understanding that you know how to use it properly. 
it's what I tried to say when I wrote about the returning-type :) it's contradiction saying Optional describes nullability, since any object in Java can be null, Optional as well! the goal of Optional is to say if there's a result or not (read the API if you need) and it's a better option comparing it to null-object pattern for instance. There's no way to define required objects (objects not primitives ;) ) in Java, so you could say if a POJO has non-Optional inner fields are non-null for sure, but this is an internal devteam convention and it has nothing to do with the language itself and it is the same for Optional inner fields. 
If you attempt to use a value without checking for null first, you deserve to have your program blow up in your face. etc..
In general it's now considered bad practice to use Optional at all. As a return type anywhere, it's terrible since it's not serializable. Here's some good info. https://developer.atlassian.com/blog/2015/08/optional-broken/ http://blog.joda.org/2014/11/optional-in-java-se-8.html
But what about in scenario where you're a model in a JPA or Hibernate context? Basically, in a scenario where there is DB interaction. I think it makes sense return Optional&lt;User&gt; for a method called findUser(String username). But does it make sense to have a getter within the User class which has corresponds to a nullable column? For example, if the User table has a nullable column called "middle_name", does it make sense to have a getter in the User class as follows: Optional&lt;String&gt; getMiddleName()?
Stuart Marks discusses the problem with `get()` [here](https://youtu.be/Ej0sss6cq14?t=35m49s). It's such a short, simple name that doesn't reflect on the empty `Optional` case, and so some clients might accidentally choose it without looking into the semantics. Is that their fault? Yes, but the method name doesn't help. The architects are currently looking into deprecating `get()`, and replacing it with a more fitting name.
Yes, my point as well.
but if you invoke get() immediately is just a misleading Optional use-case, am I right? if you use Optional properly you should be able to avoid such scenario and retrieving a non-null situation of the flipped coin 😬 
It makes sense why it's not serializable. I don't think it's an issue, and I don't believe that makes using Optional a bad practice.
Let's disambiguate between the concept of optional as a concept (very useful) and the Java native library Optional class (less useful than most other implementations)
The point I'm trying to make is the action of checking if an `Optional` is present and checking is a reference variable is `null` is quite comparable, and so the basics of `Optional` don't really get you anything different. A program can still throw an exception if either check is not performed.
One of the reasons it isn’t serializable is because they want to convert it to a value type when they are ready.
Returning Optional&lt;User&gt; for findUser() is great, but again, if you find yourself adding Optional attributes to data or value classes (or nullable columns to database tables), you're probably doing something wrong.
Yeah but if we move to the "concept," then we're just talking about monads right?
As I point out elsewhere, Optional documents the fact that the value may be sent and forces the consumer to explicitly handle it. A nullable reference does neither.
Optional is non-serializable by purpose, check some Goetz posts about it. I don't get why it's a bad practice, by whom? Vavr uses its own version but Option is a good practice and it's inspired by Scala and Haskell API. Maybe you wanted to say it has not been implemented as someone wished... but it's not the same. 
I have found value in using `Optional` in getters or any method as it makes call site code a lot nicer to read **PROVIDING** you can leverage the transformation chaining methods such as `map`, `flatMap`, `ifPresent` etc. If you cant do this then there is not much benefit as you will be doing the same ugly type of if check code anyway which I try to avoid. if (person == null) if(person.isPresent())... Ensuring your entity can be created in a valid state guaranteeing all required fields are null eliminates the need for "abuse". If then you had a couple of fields that had to be left null for something like a `lastUpdatedTimestamp` then using `Optional` makes it obvious to the caller that this is actually could be `null`. Whole libraries are built around this idea and provide many container types like Either, Try etc which are bread and butter functional programming concepts and can be good tools to use. How much so in java? not 100% sure yet. https://github.com/vavr-io 
sure and Intellij SCREAMS at you if you try use `get` before an `isPresent` so there are many warnings despite the awful method name.
For me, the semantics of "this value may be absent" and the enforcement of "deal with it accordingly" is the main benefit of optional as a concept. The monadic nature of the implementation (ie being able to chain optionals, and them short circuiting at the first absent value) is just an added bonus. (but Java's native library Optional class doesn't obey the monad laws, so...)
&gt; Why what? That’s what he said in the response. Sorry, RedditSync rendered the quotation bar in a hard to see color, so I didn't realise you were spring quoting the SO response. I missed that, but it seems completely inconsistent with the stated intent, namely as a return type for values which may be absent.
Check the original post. The question is specifically about using it as a return type. A good majority of use cases for optional as a return type is in JavaBeans which as a spec specifies serializability. I'm just connecting the dots. You can find further reasons why Optional sucks in the links I included. I'm not an Optional hater. I was a heavy Scala user when Java 8 came out and I evangelized Java's Optionals for a long time until I saw the major flaws in it. If you put code with heavy use of Java 8 Optional's into production you'll soon run up against all the fun (aka pain and suffering) that others like me have already run up against.
Except it doesn't force the consumer to explicitly handle it since get() etc. etc. Oh never mind anyway! You're not going to listen to me
It's not a contradiction at all...
sure but again it's a misleading scenario, maybe the problem with Optional-implementation is the presence of isPresent and get methods they all lead to a bad use-cases
Simply calling get() without testing the value is not handling it. Only a complete moron would think so.
I wouldn’t say it screams.
Optional describes if it has a value inside or not, nothing else
I’m sure if Stuart were here, he’d call this all just bikeshedding.
Yes, so?
Yeah, that might just be.
My point is that your reasons don't recommend Optional over null. Optional doesn't **force** the correct behavior any more than a null reference does. Look at it another way: a lot of methods return random stuff like a negative int (see Arrays.binarySearch or String.compareToIgnoreCase) which is supposed to mean something totally unintuitive and is specified only in javadoc. Still, we would tell programmers to RTM and know what the method contract is. So my point is that saying that "only someone who completely fails . .. would think so" is not a reason to use Optional instead of a null value and actually is just an irrelevant non sequiter as far as I can see.
It doesn't matter. If I pull 1 dependency, I'd rather file a report only for that one. It's a bad practice for libraries to force downstream dependencies that can be avoided. Like Guice for instance I would never use it in a lib directly, on an end product I have no issues whatsoever however. This should be zerocell-core &amp; zerocell-lombok and everyone can have their beef.
Just install it into your repo without the lombok dependency in the pom. Pretty simple. Demanding that a library not have any dependencies itself is silly.
But optional does *encourage* the right behavior. You have to go out of your way to use it incorrectly. It makes it very explicit to the person reading the code that not handling the empty case can cause a problem. Null does the opposite. It hides the possibility which *discourages* you from checking the empty case. 
@Nullable is all I need.
I like to use a mix of @Nullable (jetbrains annotation) for data classes. I only use optional as a return value when I need to force others to handle THAT nullability, otherwhise the annotation is fine. This happen when you access external environments you cannot control, such as a db, a rest service response, etc. 
&gt; If you attempt to use a value without checking for null first All references are nullable. Are you suggesting that every method that returns a reference should check for null, or you deserve to have your program blow up in your face? That's a lot of null checks, especially when most methods aren't going to return null references. `Optional` isn't supposed to be null, and the `get` method is unsafe, which is a basic understanding of the `Optional` type. If you don't use a simple type like `Optional` the way it is supposed to be used, then yes, you do deserve to have your program blow up in your face.
&gt; it's terrible since it's not serializable. Why would you ever want to serialize an optional value? Also, when you serialize a type, you're serializing its internal members. `Optional` should never be used as an internal member, as it is purely a return type.
&gt; The question is specifically about using it as a return type. A return type of what kind of operation? &gt; A good majority of use cases for optional as a return type is in &gt; JavaBeans which as a spec specifies serializability. This is not a use case of `Optional` as it was originally envisioned. It's designed for an operation that may or may not return a result, like a finder method that returns a single result instead of a list of results. A use case where you might have returned `null` or thrown an exception. JavaBeans are a different matter entirely. And the Atlassian article doesn't make sense. `Optional` is bad because Java has `null` and `Optional` is bad because it can't contain `null`. But, that's exactly what I want. Also: &gt; If we however map that first function on an Optional, it must &gt; become empty/none Why? If the `null` is significant, it's not empty/none in the sense of `Optional`. So you if you insist on using `Optional`, you have to wrap the value (for example in an `AtomicReference`) and unwrap it before calling the next function. But this is what happens when you mix things that aren't supposed to be mixed.
Oh, I'm not sure I'd call this bikeshedding. Would you?
Yeah, I’m not quite sure. You are the expert, haha.
Any projects in mind that you think are out of reach? Try stripping those ideas down and writing on that. If not you can find plenty of project ideas online. For tutorials what kind of tutorial are you looking for? What area are you trying to learn more about?
Then you'd be stuck using IntelliJ, most of us know to use a proper IDE.
The JetBrains fan crowd seems to have arrived in a thread having nothing to do with IDE's.
Optional is a hassle, I try to avoid it when possible.
Lies
I agree that database entries should almost never have null values and don't like having possibly null fields on models, but just for the sake of argument what is the difference between: 1. having a model with an attribute that might not be present and returning an optional from the getter and 2. having that attribute separate from the model, stored in its own table/repository/service, and returning an optional from the find
/r/cscareerquestions 
I really have no clue tbh. I will run with whatever anyone gives me. I understand java fairly well, have experience with html, css, JavaScript, can learn syntax to languages super quickly, am decent at coming up with algorithms, and my best asset is my ability to collaborate with my classmates. I just can’t think of something doable but fulfilling.
Oops, sorry I’ll post there next time!!
There is [this list of project ideas](https://github.com/karan/Projects). Maybe try and see if there's something that seems interesting on there.
What IDE do you use?
They are talking about _developing_ IntelliJ not programming inside it.
The problem here is that `get()` is a bad method name. I would think they should just deprecate it and make a method called `getOrThrow()` that is identical in implementation.
I never considered that situation. It is kind of pointless isn't it?
I've talked about optionals and tried to explain they are not good for the use case OP is asking and offered an alternative solution. If you don't like it, please let me know your opinion instead of ranting.
Are you retarded? It never was and never is. Use optional when the value might not be there, don't use it when it should be there. Jesus, what is this shit.
&gt;It never was and never is. Use optional when the value might not be there, don't use it when it should be the 
JSR 305 works fine, too.
fuck off you poof "polite" fairy.
I follow this guide: 1. If possible, make your attributes/getters non-optional, i.e. neither return null nor Optional. E.g. if no caller can do something useful without a value or if it's possible to always construct your object with sane non-null values. 2. If your attribute can be absent, use Optional instead of nullable methods. It's superior, since it's type-safe. Your compiler won't let you use an empty value, where a real value is needed. You have to explicitly unpack the value, hopefully using one of map, ifPresent, getOrElse instead of get. But in my opinion even get with a preceding isPresent is better than a null-check, as you can't accidentally skip it.
I personally don't care for Optional. My stand on null checking is that the null should be checked by whoever is dereferencing it. When you start adding Optional&lt;T&gt; all over, suddenly you have to null check the optional before you can hand just the object off to older code. In addition to that, an Optional&lt;T&gt; can still be null, so to truly be 100% NPE safe, you need to check the optional itself. Plus you have to null check the contents of the optional before you can use it [or it may NPE], so it really doesn't save you any hassle over just doing your null checks in the first place. I find it just adds code and more things to go wrong.
&gt; But with a Spring developed plugin the Intellij Community edition would be sufficient for most people that want to try Spring Exactly, which is why they need to keep some goodies behind so you can exactly be persuaded to pay them for their hard work.
&gt; license trial expired You know it can be renewed, right?
I'm still wondering whether it's really just about API copyright. Wasn't the problem that Google made the Android API only partially compatible with the main Java API which meant Android developers couldn't use modern Java to program for Android?
But that's not a legal reason. It could be a motivation, but that alone doesn't prove Android infringed on the API copyright. What really happened here is that Oracle got greedy and wanted everyone to pay for Java, even if they used a different implementation, which is what Android did. But any programmers know that APIs by themselves aren't code, they're contracts between a client and a library. The API tells the client how to call the library and what to expect. That's not what Oracle wants to hear, of course. It's not the first they tried to pull crap like this. Just take a look at MySQL. Basically, everything Oracle does is buy a widely used software with the intent to monetize it.
While the default preference is to model things such that the presence of all attributes is always enforced, sure, there are cases where putting an optional attribute in a data or value class can be justified and is the option that makes the most sense. In such cases I personally make the attribute, constructor argument and getter all optional so there are no surprises. It also needs to be made sure any serialization issues are taken care of etc.
Why would that be an issue? Android is not using Java. If Android was using Java Google would have needed to have a Java certified JVM on Android which they never had.
You write android apps primarily in Java. They didn‘t want a full-blown Java RE so they wrote their own implementation (which has been done before, look at OpenJDK or the JDK for Lego Mindstorms). Which means that Google has to implement a VM that can execute Java bytecode and basically copy the API and implement it themselves. 
Well, that's disappointing. I was expecting some sort of news, not just a rehash of history and a clickbait headline.
[Apparently there is a hearing scheduled for this Thursday](https://www.lexology.com/library/detail.aspx?g=ef3ab195-f969-4565-bdd2-afa364b068c0). More info [here.](http://www.project-disco.org/intellectual-property/120417-previewing-thursdays-oracle-v-google-oral-argument-at-the-federal-circuit/) So maybe I made a mistake by crossposting this article. I'll be more careful the next time.
I have a user class with fields first name, last name and middle name. Not everyone has a middle name, so its getter returns Optional currently. How would this look in your proposed pattern?
This is gonna suck.
Except they didn't write something that can execute Java bytecode. The whole reason Oracle kicked up a stink is because it didn't execute Java bytecode. Instead it's cross-compiled to Dalvik. 
Are you unable to comment in a professional, non-abusive tone? We are not tolerating such behavior. We are requiring everybody to maintain a civil attitude and to not be abusive. Your outbreak is in no way justifiable. Any further step out of line will get you removed from here.
In out current project we use it everywhere for methods of services and repositories that might or might not a result. It's combines both null-safety and documentation and I personally really like it. You're mentioning 'getters' but that is in fact somewhere where we typically do not use it. We have domain classes and DTO's in our system and all the getters/setters are handled there by Lombok. Most of the domain classes/DTO's are immutable (the DTO's are just there to be serialised from/to JSON). While I do see that the distinction between 'methods' and 'getters' is a bit arbitrary I think that's where you're confusing the 'against them' bit. I am also against using them on POJO/Domain classes/DTO's because there it's not really worth it. I'm very much in favour of them on methods that return objects that might or might not be there based on external circumstances (database, service calls). I'm against using them as method parameters for obvious reasons.
Can you make a todo-list type web application?
No that explanation is overly simplified to the point of being incorrect (but conveys enough information to be useful in mose cases). What Google did is create a program execution environment which has similarities to Java (as in it's based on a FOSS JRE implementation) and a tool to convert Java programs to this environment so they could leverage the existing Java ecosystem. I do realize that this feels similar to being Java but being Java means passing a Java Compatibility Kit, Google explicitly chose against that (and also: why would they it costs a lot and offers no benefit to them) The sueing that Oracle is doing/did completely goes against the spirit of the OpenJDK license and is therefore unethical.
Actually, treating references as nullable is the root of the problem. Perhaps I’m tainted by other platforms, but I treat usage of null as code smell, and personally never return it under any circumstance. If my method could have a possible missing result, I use Optional, no exceptions. It follows the principle of ensuring that illegal states cannot be even represented in code, and allows the compiler to do work instead of checking at runtime. 
Gosling already mentioned multiple times, including on his blog that Sun did not sue, because they were out of money. Paraphrasing, "Jonathan decided to make juice out of lemons. Many at Sun weren't happy.".
I really don't understand why people can't grasp this. It's as though they regard the type system as an adversary...
No, it is because they forked Java and were successful in doing what Microsoft failed to do with J++. A language is defined by grammar, semantics and libraries. Most Java 7 and newer libraries require either Android specific versions, or restricting to the common subset. No support for NIO2, invokedynamic, methodhandles, .... I bet Java 9 and newer will never come to Android, hindering even more the portability. S2T, IBM, HP, ExcelsiorJET, Aicas, PTG Azul, ..... all sell commercial JDKs, with their own extensions, yet only Google gets sued, because they think they know better. Rubin's emails prove they knew they weren't being good boys.
Probably, this would be better in **/r/learnprogramming** since it is a general question. Before posting there, make sure to read the [**Frequently Asked Questions**](https://www.reddit.com/r/learnprogramming/wiki/faq) as they contain a wealth of resources, including practice projects. **Post removed**: general question
Well, you can use it everywhere as JSR 305. And even better if you somehow add compiler generated runtime checks.
That's just retarded. All major IDEs support it.
I use optional as a return type to tell users of the API what to expect. Basically, optional means there's a possibility of not getting what you want. If a method has a return type of `User`, for instance, that method would never return anything other than valid instances of `User`. Never null. It's just about making clear to consumers what they can expect to get back. 
One good thing to do also, is use JDeps and the maven jdeps plugin, this gives a report of each of your java packages, the packages they in turn use, and which exact jar file they're resolving those classes from. This was added to JDK 8 to prepare for Jigsaw modularity, so you can track exactly where your dependencies are actually being used. As part of our projects, we also have a checkstyle rule that bands * imports, unused imports, and a maven enforcer plugin I wrote that checks for unused private methods/fields ( you'd be surprised at how many dependencies we found we no longer actually needed as things were refactored, but services still imported ). 
In your particular example, I don't think it would be unreasonable to return an empty string rather than null. There are other situations where the domain suggests a default value. Where it doesn't, it's a tough call between annotating the method is nullable or returning `Optional&lt;&gt;`, but I'd lean towards the former. (We're only talking about data classes and getters here, not methods in general)
I'm a massive fan of `@Nullable`/`@NotNull`, and annotate my code where possible. It definitely helps me think about null issues more. "Should this function return null? If not, what should it return as a default?" It also helps me notice when I accidentally let nulls escape from a method that shouldn't. And of course, it warns me when my code might cause an NPE. But I also like returning `@NotNull Optional&lt;?&gt;` from my service methods. :)
I'd suggest that `isPresent()` isn't the ideal way of interacting with `Optional&lt;&gt;`. I prefer to use one of: * `orElse()` and friends * `ifPresent()` When migrating a new method to return `Optional&lt;&gt;`, my call sites tend to end up with either `orElse(null)` (non-preferred option) or `orElseThrow(IllegalStateException::new)` until I've gone back and rewritten them properly. (I've really been enjoying `Optional&lt;&gt;.map()` when rewriting call sites, but you still need one of the above methods eventually.)
Which might be confused with `orElseThrow()`
Nullable/not null annotations have nothing to do with IDEs neither.
NPEs are a hassle; I try to avoid them when possible.
I don't think he discourages use in that way (ie getters) just not in place of empty arrays or collections instead. It should be used in cases where null would otherwise be a valid response.
They should have added some syntactic sugar like in ceylon, something like String? Or such
I know they're making a coffee joke in the headline, but it makes it really confusing for those who aren't familiar with it.
As of Java 9 we have an AOT compiler which could compile directly to Davlik making Android's version moot. 
There are even annotations in JSR305. It's a shame that the JSR didn't make it, as it would reduce the proliferation of nullablity annotations. I can think of: * Jetbrains `@Nullable`/`@NotNull` * Eclipse `@Nullable`/`@NonNull` * Findbugs/JSR305 `@Nullable`/`@Nonnull` On the plus side, most tools can be configured to support multiple annotations.
&gt; OpenJDK I thought OpenJDK was GPL'd Sun JDK, not a truly new implementation. The cleanroom new one would be IcedTea + GNU CLASSPATH.
Just a heads up, you can call instance methods with the double colon too SomeObj::someGetter
&gt;I have a user class with fields first name, last name and middle name. This is common but not a good practice. &gt;How would this look in your proposed pattern? To really fix the problem: * Introduce new field name * Migrate all existing data to the new field * Wire everything up to the new field * Nuke the old fields Failing that, at least the separate getters could be replaced with a single one.
And if you're feeling lonely give their sales department your phone number. They'll call you once a week for the rest of your life.
1. They are not computed unless trace level is enabled for this logger. 2. This you have to do anyway? 3. slf4j caches the pattern, so it only parses it the first time a pattern is used. if you use string concats, the string must be evaluated before the logger is called, trashing the log statement cache.
Deprecate that too and replace it with an overload for `getOrThrow`. :) 
No, that's deprecating a working function for no reason. Just deprecate `get()`.
`get()` "works" too, if you know its contract. The whole point of deprecation here would be to make the API clearer.
Except there's no reason to use `get()`. You can cover all use cases with `orElse*()` or `ifPresent()`.
This is wrong. Anyone can write an implementation of Java and ship it for free. Many companies have done that, eg IBM. What you can’t do is take part of Java and thus make it incompatible with other implementations, as it breaks the central tenet of Java which is write once run anywhere. Google did exactly that with Android. Sun called them out on it, then Oracle sued them. Also, the case was about whether an API was a creative endeavor, and thus copyrightable. As any programmer knows writing any large API, especially one as large as Java’s, is incredibly important and no trivial matter. The API was designed and refined over many years, by very talented people. Google just took the lot and said ‘sue us’.
I will leave this here as a reminder: http://bonkersworld.net/img/2011.06.27_organizational_charts.png
Yeah Optional feels like a fad to me. If this code compiles: Optional&lt;List&gt; foo() { return null; } Then what's the point ?
If you’re interested in the evolution of the language, suggest joining some of the [OpenJDK mailing lists](http://mail.openjdk.java.net/mailman/listinfo).
&gt; How would this look in your proposed pattern? Having encountered this problem, I solved it through encapsulation. Instead of returning these three attributes as separate values, I simply have one method that returns one string given a formatting enum argument. The user class knows how produce the required string and users of the user class don't have any knowledge of how the name components are stored. This is a corollary to why getters are evil (when they break encapsulation).
&gt; No versioning, snapshots only My condolences.
I totally agree. I avoid null if I can. If I can't avoid null, I encapsulate it, never return it. In the olden days before Optional, I would throw a checked exception to indicate to the caller that the method may not produce a value (heresy?). I would use Optional in these cases, particularly because Optional is more composable than exceptions.
LOL! I hadn't seen this one bdfore.
Can you elaborate? This is very much a conscious decision on our end
&gt;Google just took the lot and said ‘sue us’. Even if they did, that's no excuse to pretend you can make an API an intellectual property. The whole idea is ridiculous, ask any programmer. An API is not a recipe, it's a public specification.
It depends on what you like. If you like boilerplate and ceremony, use Optional. If you like leaner and more efficient code, done. Personally, I think Optional is crap.
Have you tried "obj == null" ?
Spring MVC: It's like servlets but you can put many methods in one controller class. Controllers and methods are annotated so it's piece of cake to tell Spring which method is get, post, which parameters it takes, etc. If you've done REST services with Jersey, it's practically the same. Each method ("action") returns a view, which can be a JSP, or whatever template format you can plug into the framework. So if you use servlets, your first step is turning them into controllers, and then make each controller add the view properties so your JSP can see them. Then you can move on and use a template engine like thymeleaf and whatnot, so you can get rid of JSP altogether.
&gt;&gt;Where to begin with Spring MVC? &gt; &gt;At the end, which means dropping it and moving over to JSF :P Funny, my workflow is about moving from JSF to Spring MVC. Maintenance costs plummet :)
Wait, what? I... I'm speechless. Why the fuck would ANYONE do that?
We've the following policy: All inputs from outside sources (like other remote services) we use bean validation and @NotNull and for field which are nullable we use Optionals on getters. We also use it on service/repository/etc methods that can return null. In internal models we assume everything is not null unless it has an Optional getter. We don't use Optional in fields or parameters.
Sure, but is designing, naming, structuring, an extensive API a creative endeavor? That's the legal question. If you think it is then it is copyrighted.
I'm not sure why/how they expected to glean a sale from that strategy.
One can be enforced in a type safe manner by the compiler if you don't use a known dangerous escape clause ('get()', casting, etc.), the other completely circumvents the type system. That's a pretty big difference for a lot of developers, myself included.
&gt; It's as though they regard the type system as an adversary... C's legacy? :p
What would you suggest in the example given where a user object has a middle name that may or may not be specified by the user? How would one compose the User object so that the presence of a middle name can always be enforced if the intent of the application is to allow that field to be unspecified by the user?
s/boilerplate and ceremony/a type system/ s/leaner and more efficient/Javascript/
I notice that there's some additional information on using Open Liberty with Spring Boot at this blog. Have you tried it? https://openliberty.io/news/2017/11/29/liberty-spring-boot.html
Could be argued that middle name is a bad example to use, given that people can have multiple middle names - so could be a List of an entity containing the String value.
Phone number? Address? Display Name? I can think of a very long list of properties in a potential user object that could be optional.
My interest in this announcement is currently focused on configuration. Spring Boot (just one part of the announcement) takes an opinionated approach to configuration, potentially freeing me from the need to define boilerplate configuration - which often trips me up. But ideally, Spring Boot allows me to do more prototyping, throwing away bad ideas, and trying out more better ideas. I want to be against opinionated but I'm mostly seeing the advantages right now.
Follow the right people on Twitter.
I usually take a look at topjavablogs.com news (something like the former Atlassian's javablogs). Don't expect many interesting stories but once in a while there's something that it's worth it. There was this planetjdk.org too but, as you can see, it's got almost no activity at all.
Feels like IBM is a bit late to the Spring Boot party but it is still nice to see IBM getting on board.
&gt;Sure, but is designing, naming, structuring, an extensive API a creative endeavor? That's the legal question. No, that's a strawman. Here's why: Let's say you publish a spec on the newspaper and tell everyone, "hey, from now on every business done with me has to be in the following format" and you attach a form, the form becomes public domain. If you don't want the public to know what you're using for an API, DO NOT PUBLISH IT. PERIOD. What happens here, is: Sun publishes a business form and releases it to the public. It's stamped on the blckboards, on bar walls, and copies are freely available on libraries. One day, Oracle purchases Sun, and makes the business decision of using EXACTLY the same form, with some adjustments that they KEEP PUBLISHING like Sun used to. Google copies the publicly available form and says: Hey! For my business, we also use this form, too! Oracle gets pissed and sues, because everyone's using the same god damn business form and wants a monopoly on it. APIs are like a contract. If you want royalties for them, don't publish them at all. Oracle is a classic case of having your cake and wanting to eat it too.
Can you give some examples?
We do the same thing but all we do is releases, no snapshots. Works great in practice.
Thanks for weighing in. What's the alternative to using Spring Boot, assuming I want to use Open Liberty and Spring?
Some I follow: java, mreinhold, BrianGoetz, trisha_gee, nipafx
OpenJDK as well
TL;DR How we abused Maven by not using the standard release mechanism but instead created our "releases" using a db, HTTP server and custom Maven extension.
I'm curious about this, is there an automated process to bump dependency versions to the latest release? Or do people do it manually when they want to pick up a change?
You are abusing Maven with an over-engineered solution which allows you to dynamically decided if a snapshot is updated or not. And for what? Did you actually try using releases and that didn't work for some reason?
Phone number could be a list (number plus type), likewise address. Display name could be forced to be mandatory so that it's an explicit setting, rather than defaulting over to first name. I'm not disputing that there are instances where null is appropriate, and would like to know OP's thoughts on what to do in that situation too (my guess would be to allow null), but the examples given are situations where it's possible to break out the information into smaller pieces.
Maven version plugin: clean versions:use-latest-versions -Dincludes=${bamboo.internalGroupId}
If you are conceding "leaner and more efficient" to Javascript, then maybe you should turn in your competent software developer membership card. 
good idea
That's really interesting, do those versions ever get committed back to source control? Also, when publishing how do you handle making the versions unique and increasing, append the CI build number to the end?
If I could upvote you a thousand times I would
Well the behavior we want is to always pick up the latest version of every internal dependency to avoid people falling behind and causing internal dependency conflicts (for example, I want to use your internal library A but it depends on a newer version of internal library B and I can't bump my version of B because I also use library C which depends on an older version of B, so on and so forth). Given that this is the behavior we want (which has its own tradeoffs, but is a separate question), it seems like Maven snapshots are exactly what we want, no?
&gt;Phone number? Address? Display Name? I can think of a very long list of properties in a potential user object that could be optional. Put the user in each of them instead of each of them in the user. Then the presence of all attributes can always be enforced.
Having separate fields for names is common but not a good practice. To really fix the problem: * Introduce new field name * Migrate all existing data to the new field * Wire everything up to the new field * Nuke the old fields Failing that, at least the separate getters could be replaced with a single one. (as also suggested by https://www.reddit.com/r/java/comments/7ht1b0/is_it_still_considered_good_practice_to_return/dquosxk) But sure, there are cases where putting an optional attribute in a data or value class can be justified and is the option that makes the most sense. (get it? option, huhu... I will show myself the door) In such cases I personally make the attribute, constructor argument and getter all optional so there are no surprises. It also needs to be made sure any serialization issues are taken care of etc.
At face value this seems like the kind of thing that inspires a blog post like this: https://danluu.com/wat/ What's the reasoning for snapshots and always grabbing updates. Semantic versioning (https://semver.org/) seems like an established and sane way to allow for automatic upgrades. You can allow automatic dependency updates for all minor and patch versions, just leaving out major versions which represent breaking api changes.
1. Me 2. These people (including me): https://jaxenter.com/top-20-java-influencers-2017-135312.html 3. These other people (also including me): https://techbeacon.com/java-leaders-you-should-follow-twitter 4. Even more people (by now, you'll guess what...): http://www.javais.cool There may be other lists of people out there. Don't worry about those other lists.
I think it's a matter of perspective. To give an analogy, imagine telling someone who's been using subversion for too long that as a git user you create 50 branches per day and watch their eyes grow wide. From the perspective of the subversion user, your workflow is horribly broken. But from the perspective of the git user, it's subversion that's broken. In the case of the blog post, it may indeed be the case that we're implementing the git workflow on top of subversion, which definitely isn't ideal.
A common work-flow is to let the CI build server automatically increment the version number and create release tags after a successful build (including tests) and then push to git. Major version bumps (instead of minor increments) are triggered by a keyword in the commit message.
Please stop trying to bullshit people into thinking Google forked Java. It's actually embarrassing how many times you've done this. You are either ignorant of the term "forking" or your cognizant of the definition, but choose to mislead people on purpose to satisfy your agenda - which is considerably worse.
Just because something is published, doesn't mean you can copy it. You are missing literally the whole point on copyright. It allows novel creations to be released and receive implicit legal protection from others stealing the creation. You don't have to keep it secret. CNN publishes articles everyday, and keeps publishing them. Set up a website that scapes them, republishes them as yours, and wait for the lawyers to call. Tell the lawyer, "it's OK, I saw them for free on the internet, it's just the same news that everyone has". If you want to report on the news, create your own story. Don't copy word for word someone else's, and then say CNN are being greedy for not sharing their version of the event with you for free. Maybe it's not news articles, but just headlines. You could compare that to an API perhaps and argue that it'd be OK to reprint news headlines. I wouldn't disagree about one or a few headlines. But thousands and thousands of headlines, in a particularly well defined structure? You're just mooching off someone else's work. That's pretty much all I have to say.
Wait, you want maintenance costs to plunge deep? Or do you mean you are a contractor and want those costs to increase for your clients by switching them over to Spring MVC?
Or perhaps they realized that they didn't have a case. But, Oracle did which was one of the primary reasons they purchased Sun. According to James Gosling: &gt;"Not a big surprise. During the integration meetings between Sun and Oracle where we were being grilled about the patent situation between Sun and Google, we could see the Oracle lawyer's eyes sparkle" And then there's this from Jonathon Schwartz: &gt;In testimony last week, former Sun CEO Jonathan Schwartz basically dismissed Oracle's claims of infringement.He stated that Google didn't infringe on any Java intellectual property and didn't require any license from Sun as long as Android was not branded Java in any way. 
Google has **forked** Java by breaking WORA compatibility. - Partial implementation of Java 6 with Apache Harmony. Some methods even have semantic differences with the OpenJDK ones - Partial implementation of Java 7 with some bits from OpenJDK - Partial implementation of Java 8 with some bits from OpenJDK - No roadmap for Java 9 and its planned 6 month release schedule I cannot take a random Java 8 library and be confident it will run on Android, it is quite easy for anyone to validate it, even on Android 8.1. Anyone can validate my statements by downloading the Android Studio, Android SDK and trying to use random Java 7+ libraries out from Maven central. Apparently it is ok to bash Microsoft when they don't fully comply ANSI C or ANSI C++, but as usual Google gets a free pass. Get used to it. 
Any favorites?
Definitely `valhalla-spec-observers` and `amber-spec-observers`!
No, I'm a dev. Pretty often the users want us to do apparently easy things that become super complicated when you're using datatables or X or Y component. JSF is easy for 90% of use cases, but we happen to stumble on the other 10% and it's a nightmare, especially when we don't control the server and they use one that forces you to stay in JSF 2.1. Then you have to toss the components into the garbage, implement a for loop, and realize that using an alternative would have been easier in the first place. The advantage of Spring MVC is that you can use it without having to worry about the target infrastructure. Oh, you're using Glassfish 3? No problem!
Maybe you should stop lying. The only code Google has ever used from Sun was the 37 Java API headers. No source code was ever forked or copied so quit trying to perpetuate that bullshit. I'd also recommend to look up the definition of the word "forked" so you don't have to ignorantly keep using it incorrectly. &gt;Partial implementation of Java 6 with Apache Harmony Apache Harmony was never a fork of Java. &gt;No roadmap for Java 9 and its planned 6 month release schedule Since Google doesn't use any of the Java trademarks they can do whatever they want with their runtime. &gt;Apparently it is ok to bash Microsoft when they don't fully comply ANSI C or ANSI C++, but as usual Google gets a free pass. The difference is that Microsoft used Java trademarks and called it Java. It's also the reason Sun collected nearly 2 billion from Microsoft. Google doesn't use any Java trademarks. &gt;Get used to it. Get used to Oracle losing again. 
&gt; especially when we don't control the server There's your problem. The Java EE server is something the development team should always control, JSF or not. &gt;The advantage of Spring MVC is that you can use it without having to worry about the target infrastructure If you don't control your target, I assume your customer could just as well dictate you're using Spring 2, couldn't they? I already know the answer to that somewhat rhetorical question, as you're going to say that with Spring YOU control everything and only depend on the Tomcat or GlassFish that the customer has installed. But there's where things go wrong. Tomcat nor GlassFish shouldn't been seen as the target environment that's a given. Tomcat and GlassFish are part of the deliverable that you as a solutions provider or contractor provide. Sure, the customer could have demands, like having consolidated to version X of product Y, but exactly the same would hold then for the version of Spring that you use. It's just as chaotic if provider A would use Spring for an app, and then for the same customer provider B uses JRuby, and provider C uses Grails.
&gt;Just because something is published, doesn't mean you can copy it. You are missing literally the whole point on copyright. And you missed the entire point of my analogy. The point being a) Sun never having litigated the Java API, and b) APIs being a purely functional product. You can't copyright the shape of a screw, or the distance between the poles of an wall socket. Oracle bought Sun with the intention of monetizing everything they owned because their userbase was huge. Neither MySQL nor Java would have gone as far as they did had they not been free to use, and Oracle knows that perfectly. Pretending you owe them royalties just because you use a MySQL compatible client is both ridiculous and insulting. That's what Oracle does. They do not produce; the JavaEE specs were on the brink of collapse because Oracle wasn't able to do anything with them. They don't produce, they don't provide. They take, and the only thing they think about is money. They are leeches.
Our CI job creates a tab in source control. When publishing we use the build number coupled with a semantic version: 1.0.555 where 555 is the build number.
How do you have the CI build server increment the version? We've been thinking of doing this but weren't sure how to approach it.
&gt; Optional doesn't force the correct behavior any more than a null reference does. nothing can make the developer handle potentially null values, but returning an Optional strongly suggests that they should and explicitly places the responsibility on them. when you call a getFoo() method that returns the value there is nothing to indicate that foo may be null and you should check before using it and nothing stopping you from immediately using the returned value. this is not the case when you call a getFoo() method that returns an Optional. if the developer doesn't know what an optional is they have to go read the docs for it **before they can use the value it contains.** they'll learn that it is contains a potentially missing value and that it has a method for checking if there is a value and a method for retrieving the value. at this point they can either check if the value is null as intended or ignore the warning and immediately call get(). either way they have to acknowledge the Optional and the intent.
For some background: [APIs should not be copyrightable](https://martinfowler.com/articles/copyright-api.html)
http://maven.apache.org/maven-release/maven-release-plugin/usage.html
I like that Grade is moving out from just building Java projects. I look forward to it having built in support for node projects so I can generate front end projects in the same build without verbose build files.
Git and SVN both have branching. Both also allow you to use branching in any way you want or completely ignore the feature if you choose.
&gt; According to npmjs.com, Angular has 17,938 packages. React has almost three times as many at 42,428 At those numbers, I'm not sure this is a good thing
I did.. I got the 3 month expansion... 
The 3 main Java IDEs in use are : Intellij IDEA, Eclipse and Netbeans. You could give them a try and see how it goes. In the case of Intellij, the 'community' version is free while the 'ultimate' version is paid. What kind of mac / specs do you have? If the hardware is too old (and the fans need cleaned and/or thermal paste replaced) then it won't matter what IDE you use.
I've read good things about intellij, I think I'll try it. My laptop is relatively new, so I don't think that's the problem, it's a mid 2014 13' MacBook pro retina, 8 GB of RAM and 2.8 ghz 
The MOOC supports both, Netbeans and IntelliJ (Community Edition). Only the above support the TMC plugin.
The MOOC OP is referring to uses a special "Test My Code" (TMC) plugin that is only available for Netbeans and IntelliJ, but not for Eclipse.
Intellij is, by far, my favourite out of the 3. You're right about the hardware but I'd install a software to check the CPU temperature and keep an eye out for it. Especially during the moment the fans start spinning up loudly while using netbeans. Temps shouldnt be reaching 70-75 for too long or it could hurt the CPU in the long run.
Cut it down with flooding your domain. Before continuing, please read [**What constitutes spam? Am I a spammer?**](https://reddit.zendesk.com/hc/en-us/articles/204536499-What-constitutes-spam-Am-I-a-spammer-) Were the old reddit spam and self promotion rules still in place, you would have been banned reddit wide by now. The old rules allowed *one* self promotion in every *ten* other contributions.
Will give it a shot and see how it goes. Thanks. 
If you're having problems with performance, you might want to check out Eclipse. IntelliJ is really, really hard on the ol' CPU.
I love you
Do you know who Matt Raible is?
I imagine that with certain (high) level of manpower this can be made to somewhat work with certain policies (often damaging to the code quality - api stays forever, no modification of functionality ever, forever growing amount of code) Here's what you're missing (you probably already know this) * reproducible builds - I've built this thing just now, now I build it again, is it using the same dependencies or slightly different ones?, did the version control build the right thing? * version control now meaningless, can't go back and build old binary (unless you can rollback entire universe, multirepo would help with that but you'd also need to rebuild the universe at the target state too) These to points should be enough to undermine developer's sanity when investigating issues. I've worked with snapshot hell before, I hope to never go back to it. My current company versions everything it can (containers, configurations of containers, whole environments) for the reasons mentioned above and I feel much better off. 
Use it. one command to build and test both server and front end.
Well, this is now mostly just opinion and name calling, not legal argument. Sun couldn't litigate as they had no money, Gosling has publicly stated this. It's irrelevant to whether the law was broken though. The case wasn't about the function of the API, it was about the design, structure, and naming of it. A creative venture for something that size, no doubt. A screw can't be copyrighted as it's a physical thing, but any novel design of a screw can be trademarked, but that's something different. The wording of plans for how to make a novel type of screw would be copyrighted though, as that can be a creative work. See, creative work means copyright. It's that simple. It's so others can't leech off your creative effort, well at least for a while. Look it's obvious personal opinions are clouding a limited understanding of copyright law here. Think of these companies how you like, call them all the names under the sun, it doesn't change the law.
&gt; for example, I want to use your internal library A but it depends on a newer version of internal library B and I can't bump my version of B because I also use library C which depends on an older version of B, so on and so forth That is the whole point of using Maven. Dependency management. If you want to avoid this situation, then you are missing one of the core benefits of using Maven in the first place. 
Excellent points. I just released that the article says nothing about reproducible builds.
I don't think that having reproducible builds is a matter of perspective. Either you have reproducible builds or you don't have them. Simple as that.
&gt; &gt;The case wasn't about the function of the API, it was about the design, structure, and naming of it. The design, structure and naming ARE function. If you make a key shaped like the most beautiful butterfly in the world, and even if it were codesigned by Dali, it doesn't stop being a key. Why? Because the design is incorporated into the functionality. If you change the name of an API function, and a program used it, you break the program. Period. If you add comments in the form of poetry, you have all the right to license them, and I'll remove it from my implementation of the API. But if you turn that poem into a function name, YOU MAKE IT FUNCTIONAL. That's how APIs work. 
neat
I think you somewhat inherently give up reproducible builds when you adopt a microservice architecture (or at least give up the benefits you're referring to). Sure you can freeze your dependencies, but the real complexity is coming from the other services you're interacting with. For reference, our team has done 592 deploys to production already today and will hit 600 before the day is over. In this environment, being able to freeze your libraries isn't of much use since most of those libraries are just making calls over the network to other services. So I think in this sense it is very much a matter of perspective.
I left a comment above ([link](https://www.reddit.com/r/java/comments/7hy7xy/need_for_speed_accelerating_maven_snapshots/dqvlk47/)) that I think addresses some of these points. In terms of the point about forever growing code, the majority of code is only used within the repo in which it is defined. This lets the owner refactor quite easily. We use APIs to communicate between services, so for the most part the API client will be only the shared code that's used outside of the repository. And let's say you want to replace an API endpoint. You update your API client to hit the new endpoint and everything using your API client rebuilds and picks up your change (because everyone picks up the latest snapshot automatically). That change goes out in their next deploy, and pretty quickly all usages of that endpoint are gone and you can delete it (to verify, you can check API traffic in Kibana or use our internal tool to make sure everyone who uses your API client has deployed your commit). Without snapshots, wouldn't making this sort of change be harder and take longer?
Sorry if the analogy wasn't clear, I'm aware that both git and subversion support branching. My point is that subversion branches are slow and extremely heavyweight (at least they were the last time I used subversion). So to someone only familiar with subversion, a workflow that relies on extremely frequent branching might seem insane. But they don't realize that their perspective is warped by the tool they're using, and many people swear by the cheap, frequent branching workflows that git enables.
3 months only? There's a way to have a basically infinite renewal. You can do it in multiple ways, but one of them is via PayPal and is relatively easy.
You mean paying? Yeah obviously but with STS I don't miss much.. only some features that are cool but not essential
:)
thanks
Here's one: https://github.com/shawnmckinney/wicket-sample It's an apache wicket tutorial that has an optional step to shows how to run with security, that can be skipped.
This looks badass.
Look into OSGi, and the Eclipse P2 repos.
Do you think an English dictionary has copyright? It’s basically a list of simple facts, each of which you can say, “well that’s obvious”. However the compilation of the whole thing was, of course, a non-trivial creative endeavor. It’s copyrighted. Rightly so. Google could have written their own API for their new separate platform, but they chose to copy someone else’s work without asking. The ad hominem attack says it all. There’s no point discussing further.
You deployed to production 600 times today? When do you find time for development?
You make a commit and continuous integration takes care of the rest.
So it's like [guava](https://github.com/google/guava), but...way less capable? I don't see the appeal.
You deploy to production every commit? Why?
I see the appeal in the stream utils/helpers but by this point I and I assume many others have already written their own abstractions over streams. I'll just wait for guava to support Java 8. 
That was my first thought, not sure why you're being downvoted. There's already a dozen utilities for fluently creating collections like that. I'm also not a fan of "findIn". It's filtering, not finding. That's why the stream api calls it a filter
This is great for me. I'm coming from python right now trying to expand my skills and I've missed the expressiveness. This library looks very useful! 
I use Guava in multiple Java 8 projects. 
netbeans user on linux. i've found it to be pretty lightweight (ie normal editing shows very low cpu use). but at least at one point, and likely still today, using openjdk instead of the official release caused things to be much less efficient not sure which sdk MacOS uses also possible the plugin has problems
You and I, both.
I don’t see myself using this, but the webpage looks amazing. It’s super pleasing to the eye.
I had a slow NetBeans experience too but on a MacBook Pro from late 2011. Replacing the HDD with an SDD fixed it. With your much newer computer NetBeans should run really well if you have an SSD. 
Groovy also calls it findAll, which is frustrating. I’d prefer filter or where.
&gt; Do you think an English dictionary has copyright? It’s basically a list of simple facts, each of which you can say, “well that’s obvious”. However the compilation of the whole thing was, of course, a non-trivial creative endeavor. However, an API is not a dictionary. APIs are programmer interfaces DESIGNED FOR INTEROPERABILITY. The effort needed to create an API is not creative. It's merely technical, and it can be done by request of the users of a library, or they could have played a part in its creation. A specification is often the result of months of discussion between experts in the field. The most recent example of this is C++17. Let's remember, simply, that an API is a TECHNICAL specification, such as the Document Object Model provided by the W3C. The API says: All implementations must do this, and that. The implementations are creative. If we take an example, let's look at a sort function: string[] sort(string[] items); Now, there are dozens of implementations of sorting algorithms, ranging from bubble sort, to shell sort, to radix sort, etc. That's where the creativity comes in. But implying there was a great, non-trivial deal of creativity in the enumeration of a list of functions, classes and parameters? Seriously? &gt; The ad hominem attack says it all. There’s no point discussing further. Ah, the fallacy fallacy. An Ad hominem has no value on its own. But it does not prove one wrong. An ad hominem should simply be ignored. 
I meant for when they support Java 8 features. Apologies for the confusion. 
No matter what version control system you are using, the speed of branching is determined by how well you can you use your diff tool. This is completely independent from your vcs though your vcs might provide a default.
Rather than debating the specifics of the contrived analogy, hopefully the point is clear? Our perspectives and workflows are often shaped by the limitations of the tools we use, and sometimes it can be hard to recognize that you're evaluating an idea through this biased lens rather than on its own merits.
Reasonable. Even if I don't agree with your approach in the article, it is well written, and I hope it serves your company well.
We don't deploy every commit to production, but it's not too far off either. I think this is one of those things that sounds scary and dangerous, but actually isn't so crazy. When you push a commit to GitHub, it can be live in production can be 2 or 3 minutes. If something breaks, you can roll back in a few seconds. Debugging is a lot easier because you know the exact commit that's broken and that code is top of mind because you just wrote it. This workflow doesn't scare me. Batching 2 weeks of work (representing thousands of commits by hundreds of different engineers) and releasing that all at once, to me *that's* scary.
Thanks for the kind words. We've been doing things this way for a while so the analogy applies equally to me :)
"How to ~~handle~~ *avoid* Java OOM errors *in a CirceCI build by using JVM flags*."
I only speak about facts. The fact is that Java developers are unable to use the majority of Java code **without changes** on Android. Well, when I go to https://developer.android.com I see Java word everywhere, maybe I am not seeing correctly? No, the trademark issue was the excuse for the suit, the actual reason were all the J++ language changes that made Java code not portable outside Windows, just like it happens with Android. What Google fans like to do is to play with words, as a means to pretend they are somehow better than Microsoft. Not everyone that is right gets proper recognition from the law. 
That statement from Jonathan is was Gosling refers to making juice with lemons.
The Java Optional is just too confusing. Why they didn't create a normal Option (as in other jvm languages or Java libraries like Guava) is beyond my comprehension... :(
Technically SVN has only folder, nor branch. If you call a folder branch it remains a folder.
Coomment
&gt; Debugging is a lot easier because you know the exact commit that broke things, Not sure I agree. If you are deploying 600 times a day, over the course of a standard 8 hour work day that's once every 48 seconds. How do you tell which release broke prod?
Didn’t they add some support in version 22+? I think there are some stream utilities.
So you're now interpreting what Jonathan Schwartz said now? I think it's pretty clear what he said and it doesn't need to be misinterpreted by you to fit you agenda. 
Gradle was always intended to be language-agnostic. Without an additional plugin Gradle ist not even able to build Java projects.
&gt;The fact is that Java developers are unable to use the majority of Java code without changes on Android. Are you upset you can't make your app UI in AWT or Swing? &gt;Well, when I go to https://developer.android.com I see Java word everywhere, maybe I am not seeing correctly? Do you know what a trademark is? Do you see Google using Java trademarks? &gt;No, the trademark issue was the excuse for the suit, the actual reason were all the J++ language changes that made Java code not portable outside Windows, just like it happens with Android. It was one of the primary reasons why the Sun was able to win the suit. Microsoft tried to do their usual Embrace, Extend and Extinguish routine. &gt;What Google fans like to do is to play with words, as a means to pretend they are somehow better than Microsoft. Maybe that's because Google didn't do what Microsoft did. They actually forked and extended Java with their own OS extensions. But, your okay with that. &gt;Not everyone that is right gets proper recognition from the law. I really hope IBM goes after Oracle for using the SQL API and drives them out of business. 
If so that's awesome. I'll check it out. Thanks stranger. 
And so? The self-promotion and spam rules apply to everybody.
*Removed*
I find very usefull http://java.dzone.com/. Also, there are multiple 'zones': mobile, devops big data etc.
It is simpler and focused on the essentials - to keep the simple things simple. It offers alternative (arguably more elegant) style of expressing collection operations through the `Do.*` and `New.*` API / DSL. And essentials4j is so small (both API and JAR size), that using it together with Guava or some Stream extension library wouldn't add significant overhead.
Well, it's filtering + finding. E.g. `Do.findIn(coll).first(p)` is a shortcut for `coll.stream().filter(p).findFirst()`. I am curious, how would you name it? Something like `Do.filter(coll).first(p)`?
Thanks! :)
I guess my point is that I wouldn't name it in the first place. The Streams api is already structured pretty fluently. I really don't see the value that "Do" is adding.
True. but the java plugin is supported by gradle.org. You need a third party plugin for node etc. This means they can get out of date quite quickly, and there's often several different plugins that don't always work. Additionally, gradle.org supported plugins are more likely to get IDE support.
I guess you enjoy writing code like: nums.entrySet().stream() .filter(entry -&gt; entry.getKey() % 2 == 0) .collect(Collectors.toMap(Entry::getKey, Entry::getValue)) Other people would prefer writing: Do.findIn(nums).all((k, v) -&gt; k % 2 == 0) 
Thanks for providing your example. I believe a good usage scenario for Java's fluent Stream API are the non-trivial operations, e.g. when we need to chain few transformations.
I once heard a talk from a guy from Netflix and although I can't use the exact words, a verdict: You want reproduciable builds. But you also want to ever ever use the latest dependencies. So instead using your approach, you could spawn a infrastrukcture, that is able to scan a project's dependencies and check if the latest available dependency is used. If not, the depency can be udpated, all tests can run and when succesful, the changes can be committet. I was told Netflix has a shitload of infrastructure for this purpose. So you use the build tool appropriately and you have the benefit of having the dependencies updated automatically.
I'm genuinely interested in understanding how anyone would prefer the latter. I very clearly understand what is undesirable about your first native Streams example, and depending on which specific parts you don't like it's pretty easy to streamline it. But the latter is a mess. There is nothing obvious about "all((k, v) -&gt; k % 2 == 0)" that makes it clear what its *doing*. I don't know how its using the argument or what the method is supposed to return. "All" usually means *all*, except the argument is a predicate of some kind, so maybe its filtering? Is it filtering in or out? Why does the Consumer take two args but only use one of them? And that's not even starting on what a "Do" is and what "findIn(nums)" returns. Less code does not always mean cleaner code. I'm not sure what kind of field you're in, but my perspective is heavily influenced from maintainability of code. It doesn't matter how small you can make code, what matters is that someone else can come along and read it, and easily modify it. Designing code for feature velocity in the future is important. If someone down the line has no experience with the library that you're using, the code should be descriptive enough to make it obvious what it's trying to do and how to the pieces fit together without needing to dig through all of the documentation. Chances are good that if someone else is reading the code it's because it's either not working correctly or they need to change it. Adding a few more letters to put another word or two into the method names, or even a few more method calls to clearly indicate functional steps, is often far more valuable than any perceived gains of shorter code. And to be clear, I am *not* making any kind of argument that the Streams example is amazingly awesome. The toMap collector is super annoying. But it's also really easy to replace without replacing the entire Stream library, and is far more flexible for additions or changes. I can't tell you how many times I was able to fix a bug or implement a feature by just adding a sort() or a filter() into an existing Stream chain as-is. 
I am just repeating what Gosling said, which knows way better than either of us how things actually went. &gt; “We were pretty ticked off with what they were doing and the way they were doing it,” he said of Google. “But getting into litigation is phenomenally expensive, not just in terms of money but in the time of senior people.“ Besides, “Google has the PR aura about it as being the universe’s love child,” and suing the universe’s love child was not necessarily a position Sun wanted to take, he indicated. -- Gosling, 2010 Very easy to find on the web.
&gt; Flyway Pro Edition ... comes with additional features aimed at power users and companies requiring even more flexibility. Additional features include ... dry runs, undo migrations, custom error handlers and more. Another open source project that removes or holds back useful features from the community edition to be able to sell commercial licenses :( I'd understand special support for commercial databases, since these are really only used by companies that can afford "Flyway Pro". But dry-runs and undo? These are useful to anyone, not just 'power users'. 
&gt; Are you upset you can't make your app UI in AWT or Swing? This just shows you don't have any idea of the amount of Java features not supported by Android. &gt; Do you know what a trademark is? Do you see Google using Java trademarks? Java is Java, just like C is C, C++ is C++ and so on. If Microsoft gets bullied by only doing C89 and half, C++/CX and C++/CLI instead of C++. &gt; It was one of the primary reasons why Sun was able to win the suit. Microsoft tried to do their usual Embrace, Extend and Extinguish routine. Just like Google has managed to do with Android, by breaking the Java portability story. Now we have Java 8, Java 9, and whatever might come afterwards outside Android, while Android is a pile of cherry-picked features from Java 6,7 and 8. And ART does not support any of the new JVM bytecodes introduced since Java 7, thus preventing libraries that use them to be ported into Android. &gt; IBM should go after Oracle for using the SQL API and drives them out of business. SQL is defined by [ISO/IEC 9075](https://www.iso.org/standard/45498.html), which Oracle, contrary to what Google as done with Java, pays for. Oracle knows when they need to pay for licenses.
It doesn't take a big effort to understand what : `do find in ( map) all (k, v -&gt; condition)` means and what it is doing. Also, it is a one-time investment, the second occurrence of a similar expression would be easy / fluent to read. On the other side, having to visually "parse" the ugly 3 lines of Stream chain just to understand it is just searching is not easy. I wouldn't call that readable, and from my point of view, that's the real mess here. I believe most people don't enjoy having to read or write so much code for such a simple thing.
Flyway creator here. First of all, let me say that I like free stuff just as much as you do. But believe it or not, the reality is that developing, maintaining, thoroughly testing and documenting a successful open source costs a lot of time and money. It wasn't an easy decision to go down this path. We took great care the divide the new features up among the community, pro and enterprise editions in a way that made sense. If you are a one-man show or a very small team, none of the features in the pro and enterprise editions should be relevant to you. Also if you have a modern continuous delivery process and you have a somewhat up to date infrastructure in terms of runtime and database versions, the same applies. The pro edition features are aimed at somewhat larger teams using slightly heavier development processes like Git flow or teams that do require manual DBA approval for database changes. And even there we made it incredibly affordable. The pro edition costs 950 USD per year for 10 production database schemas (and an unlimited number of database schemas in dev and test). This boils down to less than 8 USD per month per production database schema managed by Flyway. For any company having those requirements, this isn't just very cheap compared to the time it would take an engineer to even consider doing this manually. It's a steal. And look at it this way, a company that chooses to go for the pro or enterprise edition is also a company that chooses to invest in and support the future of Flyway. This way everyone benefits, even those who prefer to stay on the community edition. As this guarantees the development, maintenance, testing, and documentation efforts will be covered and solid new features can be released for all editions for a long time to come.
Serious question: Have you done the math? I'm talking about this math: - A = Reduced cost (= increased value) of your developments thanks to the additional benefits ("useful to anyone") - B = Increased cost due to purchasing the "Pro" edition Now do A + B and see if you'll be better off than breaking even. - If yes: Buy - If not: Keep using the community edition Sure, every time a product increases its prices, users will have to re-evaluate the cost/benefit ratio. But I often am under the impression that this evaluation is too binary rather than nuanced (speaking from experience here, being a dual licensed software vendor, myself).
I understand and agree with everything you just said. Of cause you have the right to do it this way, and I can see your motivation. But it still sucks for users that are developing non-commercial projects with flyway and would benefit from these features. And I think that some of the features you decided do exclude from the community edition are useful for non-commercial users, too. That is all I said. No need to downvote. This dual-licensing stuff is tricky to get right. On one side, you want your community to support and like your project and benefit from it (contributions, bug reports, feedback, visibility). On the other side, you don't want the community edition to be too powerful, because then no one would buy the pro edition anymore. This creates a conflict of interest: You have to think twice before accepting a pull request that add a pro feature to the community edition, even if the contributor wrote everything from scratch, because it would hurt your sales. You have to find a balance between pushing sales of the pro version, and also not angering the users of the community edition too much or risk a fork. I really hope you get this balance right, because I currently use and like your product. 
&gt; It doesn't take a big effort to understand what : do find in ( map) all (k, v -&gt; condition) means and what it is doing. No, but it did take more effort than usual, and all I've learned is what it means when you stick all of them together. The building blocks are not intuitive. I'm just going to focus on the second method right now. "findIn" is two words that act on different subjects. It definitively expects two arguments: "find": what to find, and "in":where to look. Typically in a library like this the two arguments would be relative to the method name. So you'd either have "...findIn(what, where)" or "what.findIn(where)". But in your case the "what" isn't part of the equation yet. You're providing a where but not what to look for. Which leads to the next functional question: what does "Do.findIn(map)" do on its own? What object type is it returning? What functionality am I supposed to expect next? You seem to be confusing "short snippets of code" with "fluent code". The point of fluent apis is that they speak to you and tell you exactly what they are doing because the words and the grammatical structure of the call flows are natural. To be fair, the grouping and mapping tools in this library does seem well structured, but the searching is backwards and is not a great example to parade around: List&lt;E&gt; results = Do.findIn(items).all(predicate) Optional&lt;E&gt; any = Do.findIn(items).any(predicate) Optional&lt;E&gt; first = Do.findIn(items).first(predicate) Optional&lt;E&gt; last = Do.findIn(items).last(predicate) boolean exists = Do.findIn(items).exists(predicate) What is so weird is that the predicate comes after the action, and the action has variable scope. With all of them side by side i think this structure makes more sense: Do.find(predicate).in(items).action() It may also help to break up the Do class... Everything is doing something, the name is not a helpful qualifier for the functionality. The docs already separate searching/grouping/mapping, I'd think separating the static root of the apis by those functional groups would also work well. Trying too hard to hide things behind simpler/shorter code is a bad thing. Strive for readability for its own sake and not worry about measuring how much code it is. I remember a quote one of my mentors told me many years ago and I still reference it often when working with my greener engineers: &gt; Debugging code is twice as hard as writing it. If you write your code as clever as possible, by definition you will not be clever enough to debug it. Having to parse more code that's clearly visible is better than having to decipher code that hides too much. 
We don't think of "prod" as a single system; it's broken up into many, many smaller systems that are individually deployable and monitorable. After you deploy one of these sub-systems, you'd usually keep an eye on its dashboard for a bit to make sure everything looks good (we invest in multiple layers of automated testing that need to pass before a prod deploy can happen, but things can slip through of course). If something looks amiss, it's very easy to roll back.
I don't necessarily have a problem with someone making a paid "enterprise" version of an open source project. I'm a 20+ year Java vet... I *expect* it. However, my feedback is that this release announcement does a poor job differentiating between "what's new" in 5.0.0, versus "what's new" in the each of the paid versions? I *think* that undo migrations (by the far the most significant item here) is a "Pro" feature (?), but it's not completely clear. You should get a "compare versions" table up on the website ASAP. I can't stick my neck out too far in talking this up with my peers (much less my manager), if I'm murky on what exactly I'm talking up.
I believe this is what you're looking for: https://flywaydb.org/download/
One minor bit of criticism From the example, `New.map` instantiates a `LinkedHashMap` behind the hood but this isn't very clear to the reader (without understanding what essentials4j is doing) Maybe `New.linkedHashMap, new.hashMap, new.treeMap` would be a better alternative? 
By setting the max size flag at that... guess maybe next week we will have one about per gen or meta space.
This is an easy problem to solve...there is a ton of competing free products. Liquibase here we come. Thanks flyway guy, you made our decision easy.
Is there a licensing structure that supports using the paid edition for packaged software that is distributed? If I wanted to make use of Flyway Enterprise by packaging it in a shipped/sold software product where Customer may or may not bring their own DB, is there a path for that? 
Is the commercial license text available?
Yes there is. Send us an email at sales@flywaydb.org and we'll work out the details.
Yes, click the buy button for the edition you want and you'll be presented with a popup linking to the license text for that edition.
You're welcome. Best of luck on your journey.
.
&gt; Java is Object Oriented Programming language. You cannot run a Java program without creating an Object First. Literally shows a main class with a hello world where no object is being created. And the rest is just as bad. Example: &gt; Primitive data types are stored in stack memory of the JVM. 
I'm surprised that this would be your primary (only?) decision criteria, to the extent that the decision is now "easy". Liquibase and Flyway tackle roughly the same problem, but their fundamental approach is quite different! If the Flyway approach worked best for you last month, does that suddenly change this month when you find out that teams with deeper pockets than you now have access to new undo migration functionality?
Nope
This change won't affect teams that are already using Flyway. Boxfuse did not remove any features, they just decided to not add some of them to the community edition. But this change will affect how developers choose their framework of choice for their next toy project thy are starting in their free time, and this will also affect their business decisions in the future. We are all humans after all. Boxfuse just told /u/doogie-houser-md that there is ice cream, but he/she won't get any. I'd be mad, too :) This really takes the fun out of release notes.
Axel, I'd love to pick your brain regarding CockroachDB, if you're still around reading these comments. What was the trigger for adding CockroachDB support to Flyway? Was it requested by a single important customer? Or was there a building chorus of voices asking for it? How has your own experience with it been? Any warnings or caveats to share? The reason I ask is that we have a new application that is in theory a great fit for something like CockroachDB, but we're a bit wary of the risks involved with something so new backed by a startup so young.
Yep, this I can agree with... but the analogy I'd choose is that /u/doogie-houser-md is apparently already enjoying the free ice cream and has been told that he won't get any sprinkles for free :-)
&gt; if you're still around reading these comments This is how you ping someone: /u/axelfontaine
Just report as a tutorial, it will get deleted.
You could have one of those white-on-black menus at the bottom of your page for such links...
Already did :)
It was requested. We did run into some issues, but the CockroachDB team has been incredibly responsive in fixing them. Their interface is more or less PostgreSQL-compatible so that will definitely reduce your risk of lock-in should it no meet your expectations.
Congrats on the release and best of luck with the paid versions. Hopefully you can turn it into a viable business model that will help sustain yourselves and future versions of the community edition. Been loving the community edition for years!
Thank you. I truly appreciate the kind words. Enjoy!
I fully support Axel and the team providing both free and paid versions of the product. Flyway has been a great tool for many years now, a tool that many have benefited from at no cost. There's nothing wrong with a group looking to generate revenue from their hard work with a tool that provides clear value to the community. Thanks flyway team for making a great product!
What I think with a lot of these open source products is that they accept contributions from the community and then turn around and monetize on those. Doesn't seem fair to community contributors, does it?
Congrats on the release and thanks for the continued development. We use Flyway for my company’s SaaS product (Feature Upvote) and we appreciate how it makes our database schema migrations painless. 
Let's be real, I'm not switching away from flyway where it is being used in existing projects. :) But it definitely changes the decision landscape for our future projects.
&gt; Version control for your database so you can migrate it with ease and confidence So is this a competitor to Liquibase? If so, how is Flyway better?
All contributions received so far are in the community edition. What is unfair about that?
Thank you! My pleasure!
Feedback is also a form of contribution.
Compared to Liquibase, Flyway lacked dry runs and rollback before, and has them now but only in the paid version. Ergo: wasn't better, isn't better.
I also would not use it, simply because I enjoy the stream api as it is. The next reason, is that it would just add another dependency to my projects but it would not solve any real problems. But I value your work and your commitment. thanks for sharing.
So anything that requires you stop and think about nr of schemas, hosts and whatnot is just too much work.
For large deployments where this is a concern, we offer site licenses so you don't need to worry about it.
Flyway migrations are just SQL statements; Liquibase migrations tend to be expressed as higher-level operation abstractions like "renameColumn". The abstraction can be nice or it can be annoying, depending on your personal preference, your established processes, etc.
If you can learn a gaming lib or framework in Java this could maybe be done. Either way this project is rather large and a month and a half including your normal school life and such is not a lot of time. If you are trying to do this from scratch, I would scope down. 
if you could link me to a page where it gives some of the basics for games I would very much appreciate it
Well since it is a job I can not tell you a yes or no answer. But I wouldn't afraid touching on new things, it doesn't mean also you will just use 'gwt', try to understand your team, are they open minded maybe they already consider new implementations with new tech stack, also ask them why they choose this road map. 
with all due respect... googling and learning is half the process.
Change wont happen. The product is a widely used platform that is legacy for a lot of people. Not afraid of touching it. Being young in my career I want to touch things that will give me skills and resume builders for the future. And my impression has been that GWT is old and dead. Not trying to spend the next couple years using a dinosaur of a piece of tech that wont help much after that position. But upon reading more it seems that Google still uses it in a lot of its core products. So maybe I answered my own question here.
java-gaming.org Just look around, they have many resources guides and links to other tutorials etc. Btw I also did the same thing like you, I created a small (multiplayer) game as a school assignment. If you really want to make a game in pure Java with Swing/AWT, you will soon run into weird issues. For example, my game had a lot of stuttering even on good PCs and I was not able to fix it 100%. But there is also LibGDX a framework for creating (especially) 2D games, which provides many many many tools (AI, sound, OpenGL bindings, map stuff, you can compile for Android, iOS, Html or just for your JVM. This might be a total overkill. Or you use JavaFX the "better" Swing/AWT. There is also FXGL an (academic) game engine written with JavaFX, you can find it on GitHub. But be warned: it took me around 8 months (I have to admit I took a longer break) to get the game playable (no bugs/crashes, all features implemented). I don't think you will be able to finish your planned game in just 1.5 months, if you don't plan to program every day for at least 3 hours, make the game smaller. Do you have any other programming experience besides school?
Ok so I switched my game to just be a endless fight no boss or anything. Just them constantly coming at you with a timer instead of score for more simplicity. Would this be easier? and I have used java a couple years back to make minecraft mods and I have touched swift but besides just as a very small interest/hobbie then no not really. 
I used it a few years ago. Loved the idea of developing both front and back ends in a type safe language. At the time compilation was very slow. Apart from that it seemed pretty good to me. 
Yeah, seems better. And no, I don't think there is an "easier" language to create games than Java. Mainly because the eco system around Java is one of the best out there: You have a lot of libraries for everything and there is no build tool like Maven/Gradle available in other languages like C++/JavaScript (if you want to use FXGL/LibGDX you really should take a look at them). You also don't have to deal with memory managment like in C++ and your game will run everywhere as long as the right Java version is installed. The only downside is the poor performance, but this should not be a problem. 
I couldn't really see the point of features like undo being a paid thing when the most obvious open-source competitor to it, Liquibase, has had it for ages. I guess it makes sense if all your existing migration files are Flybase??? Also, Liquibase migrations are basically SQL statements too: http://www.liquibase.org/documentation/sql_format.html --liquibase formatted sql --changeset nvoxland:1 create table test1 ( id int primary key, name varchar(255) ); --rollback drop table test1; --changeset nvoxland:2 insert into test1 (id, name) values (1, ‘name 1′); insert into test1 (id, name) values (2, ‘name 2′);
I have used it back in 2011, and it was great for the team I was in, given we were primarily Java developers. It gave us a nice product, written in a language we can understand and maintain without having to mess with the front end code. Not bad at all.
alright i appreciate it!
From an outsiders point of view, indeed GWT doesn't sound really lively, atleast directly. [Vaadin](https://vaadin.com/) uses GWT internally and that one is a nice tech to develop in.
Dry runs are nice and I use them a the time, but it's not a deal breaker. Not having the ability to rollback though, that's a nightmare just waiting to happen 
You might be able to iterate faster with JavaScript and a 2d gaming library like Quintus.
&gt; Flyway migrations are just SQL statement Liquibase gives you both. Just having SQL is a drawback, now you're tied to your database, and a simple &lt;addcolumn /&gt; becomes a proprietary create table alter table drop table rename table
It might be useful to paste the exact error.
But how often does a business change database?
I use [gradle node plugin](https://github.com/srs/gradle-node-plugin) for this. A simple *build.gradle* can do installation of node/npm, installation of npm dependencies specified in *package.json" and running node tasks. It works pretty well - it's a bit clunky if you need multiple separate NodeJS sub-projects, but other than that - it's pretty good. Though yeah, I'd love to see direct Gradle support.
Not using dry runs is a nightmare waiting to happen.
In my experience, there is no getting around platform-specific issues anyway, i.e. having to either have platform-specific SQL or having to define different liquibase configs for each database type. 
950 USD just to get dry runs and rollback? LOL. Glad we're back on Liquibase.
For what it's worth, I can only extremely rarely make good use of that kind of rollback support. There are almost always other factors involved which result in various incarnations of staged deployments with strong step-by-step compatibility management, manual and/semi-automated checks and balances to be interjected in between any automated rollback steps, safer/faster restoration mechanisms, "roll-forward" policies and/or processes, etc. Frankly, _use_ of the rollback functionality isn't the clincher as much as the _option_ of rollback is. Try getting a migration tool without rollback through a technical steering committee, review board, what have you. Same goes for the ability to generate a script file representing the exact migrations that will be run so that you can get DBA and/or wider change management sign-off before the migration can run. I never need or want to _use_ these features, but using them isn't always the only thing that matters. ;)
Simply, none. The only sector/area/persons in IT that give a shit about certificates are: a. people who don't know better ( you for example, which is not an insult) b. in the IT sec sector people seem very passionate about certificates. c. Shitty managers d. People who create certificates to make people pay for it. If you want to learn something, just build something. No one asked me for certificates in 10 years and if they would, I'd probably just start laughing while leaving the interview room.
GWT has been a dead end for years...
The alternative to Spring Boot and Open Liberty is Spring and Open Liberty. Spring Boot for the most part simply automatically configures Spring, which you can manually configure. Of course, some products like Spring Cloud were developed without considering ease of manual configuration...
As any framework, it's not bad if used cautiously. There are things in there that have been made better over the years (not-nested Activities, any kind of RPC e.g.), but if the shop's code isn't outright ancient and/or has been using sane development practices, you should be fine. The devil lies in the deatils, so you won't be sure until you've seen the code.
Congratulations for this new version. However, unless you fix the non-flexible naming convention (https://flywaydb.org/documentation/migration/sql), liquibase will always be better for bigger teams.
10 times an hour? I run development in H2, and integration testing in Postgres. Production is postgres. It is very very much normal to do so. A developer, to start working on the project all (and by that I mean all) he has to do is: - install java - clone project - ./mvnw spring:boot start and you're up and running with h2 as your database locally, all the table structure setup with an admin user and a normal user created for you (thanks liquibase) and ready to roll. To ask more than that (install database service, fuck with configuration files, pray to the gods that ...) means that there's something wrong somewhere. Now, that something wrong could be a native @Query. And if you have to do it live, then you have to do it live. But if I can help it i prefer to not use native queries and retain the freedom of multiple databases. 
My company used it and we're now getting off of it. The development cycle is extremely slow and now a lot of people use it. I'd recommend something in React or Angular if you want to do front end, but if you just have Java experience, go for it. It's not a bad framework, but it's definitely different than the more modern ones.
Fair points. I'm a Rails guy. So I am trying to stay somewhat full stack.
It might be fine for you then. I'm more of a front end person, so finding out that we did front end development in Java when I had a JavaScript background was a little scary 😊. Getting a Java background when you want to do full stack is definitely good and GWT still allows you to write good Java code and you'll learn a lot about RPC and how to write good and efficient full stack code.
At $work we've worked around this issue by bending the numeric naming convention Vx.y.z__some_comment.sql into a chronological Vyear.month.day.hh.mm.ss__some_comment.sql to avoid needing to hold meetings about who gets which script version number. This way we get a consistent run order across scripts in multiple projects which each manage a part of the whole schema.
But how can you avoid native queries though? Sometimes I get nightmare sized sql statements with a million joins as a requirement on a story. No way is vanilla/queryless JPA going to run that thing.
As I said, when you have to you have to (though 1 million joins JPA can do that just fine). I had to as well in the past for other projects and well .. that was that. In the project that I'm working right now though, for a year, i don't have any native queries. It's perfectly fine.
Updated my migration tool this morning, everything worked fine locally on my dev machine, pushed a rev to our staging server and BOOM - turns out the minimum PostgresSQL is now 9.3 for the community/oss version, whereas 4.2 allowed 9.1 ( which this box happened to be running ). Not mentioned in the release notes, but is in the 'supported versions of postgresql' docs. 
One problem we often face, which may also hit this, is a feature branch may include a migration script, and another (smaller) feature branch also has a migration - but started as a higher version, but gets merged earlier. So we end up with a dance of renaming migrations.
If your migration has a DROP COLUMN or even DROP TABLE. Pray tell - how do you rollback?
I was first introduced to Java through AP Computer Science, and have just kept on discovering more about the language and platform from there. If you are interested, there are some APCS courses on edX that are free, such as [this one](https://www.edx.org/course/ap-computer-science-java-programming-purduex-cs180-3x-0).
First off, make sure you know for sure whether you're programming Java or JavaScript. Since you talk about HTML and CSS, I have a suspicion you're not really talking about Java. The names might be similar but they are very different languages.
I pushed for it a bit at my previous job. Nobody understood what I was talking about, so I left. More seriously, it looks really nice but it's the kind of stuff that would be best integrated into the JVM. I assume there will be something like it in the future. JDK 11 maybe? Benchmark first, make sure you need it. You'll be ahead of the curve. Prepare to switch to a more standard solution if one comes out. And let us know how it went.
&gt;This just shows you don't have any idea of the amount of Java features not supported by Android. You're confused again. This just goes to show the Java garbage Google didn't want to put on a mobile OS. It's also why Oracle has repeated failed to develop a worthwhile smartphone OS. &gt;Java is Java, just like C is C, C++ is C++ and so on. Do you not know what a trademark is? Java is a trademark of Oracle and you cannot use it without their permission. &gt;If Microsoft gets bullied by only doing C89 and half, C++/CX and C++/CLI instead of C++., so should be Google for breaking the WORA story for Java. C/C++ are ISO standards and, thus, royalty free. if Microsoft creates a poor implementation of the C/C++ language then it's their products and customers that will suffer. &gt;Google for breaking the WORA story for Java. Google doesn't use any Java trademarks nor do they use any Java IP and why should they care? They don't even use a JVM so your ludicrous argument that they're breaking Java's WORA feature is hilarious. &gt;Just like Google has managed to do with Android, by breaking the Java portability story. Once again, Android doesn't use a JVM and it doesn't execute Java byte code so there is no Java portability to break. &gt;Now we have Java 8, Java 9, and whatever might come afterwards outside Android, while Android is a pile of cherry-picked features from Java 6,7 and 8. It's their OS and runtime. They can pick and choose whatever they want. &gt;And ART does not support any of the new JVM bytecodes introduced since Java 7, thus preventing libraries that use them to be ported into Android. Why would Android use a VM that's not optimized for memory constrained smartphone devices? &gt;SQL is defined by ISO/IEC 9075, which Oracle, contrary to what Google has done with Java, pays for. Well, it was invented by IBM so unless the patents, copyrights and trademarks were all donated they could go after Oracle. &gt;Oracle knows when they need to pay for licenses. So do the customers they rip off.
Didn't you originally say Sun didn't have the money? Not having the money and something being very phenomenally expensive are two very different things. Sun did have the money, but unlike Oracle they knew their attempts would have been futile. So it was a good business decision by their CEO. Of course, it helps when the former CEO states under oath that **Google didn't infringe on any Java intellectual property and didn't require any license from Sun as long as Android was not branded Java in any way.**
Standard stuff. Before the drop, a migration step creates a backup table with the data about to be dropped. The rollback script recreates the dropped structure, repopulates from the backup table, recreates indexes, triggers, key relations, etc. and either then cleans up the backup table or leaves that work for a separate follow-up script.
I'll agree that Vaadin does pretty good job. It's quite easy to compose UI with Vaadin when you have no javascript and front-end experience. UI composing is the same as you would write a desktop application. It fulfills its purpose pretty well: allowing developers to easily write UI and focus more on business logic.
Yeah, they could really just tell you what you actually need in a common setup. The documentation doesn't do very well on this. 
From what I understand, the different IDEs mostly differ in how convenient it is to set up e.g. A web project. Functionality wise, IDEA may sometimes lag a little behind because they don't always release the plugins and core IDEs in sync, but it's essentially the same thing under the hood. 
That website had a spinner to load a text article, and made my phone hot. No thanks.
This is something we are considering opening up. Feel free to share your suggestions in the relevant issue: https://github.com/flyway/flyway/issues/1858
Thanks for the feedback. We have just updated the release notes to make this more explicit.
We have many customers and need to support different database.
If you still want to make a game, to lower the difficulty you could try a turn-by-turn game. It will be probably be much easier.
Nothing really wrong with GWT. Compiling is slow, but developers have moved to “SuperDev Mode” which uses a JIT compiler. I enjoy using it, and enjoy building front end and backend code with one language. There are several flavours of GWT out there, Vaadin and SmartGWT, being the main too. The framework is very mature and well maintained. Don’t expect lots of new features though, as the current changes are mostly to keep the framework compiler up to date with Java itself.
The same can be said of SmartGWT.
It's very dead. I see next to no jobs or contracts using it. Actually, none here in scandinavia :) Its usage goes down by the year and it was never really that popular. 
I started making by minecraft mods. Year later i have tomcat based webapp and site, wote some simple gui apps because did not find any alternatives, made an android app, had experience in CI/CD deploy. Still making the god damn mod thou. Also end up learning python. Still java one love &lt;3
I started making by minecraft mods. Year later i have tomcat based webapp and site, wote some simple gui apps because did not find any alternatives, made an android app, had experience in CI/CD deploy. Still making the god damn mod thou. Also end up learning python. Still java one love &lt;3
I started making by minecraft mods. Year later i have tomcat based webapp and site, wote some simple gui apps because did not find any alternatives, made an android app, had experience in CI/CD deploy. Still making the god damn mod thou. Also end up learning python. Still java one love &lt;3
Read the sidebar. Questions about learning programming in Java should go in /r/learnjava
Anyone have a pdf? The site crashed :/
The 'let' and 'requireNonNullElse' features are both covered by the standard `Optional` class.
If you already avoid null everywhere by using Optional you don't need this. It's meant for projects that use null. Adding null4j to an existing project is easier than rewriting everything to use Optional. Also, many developers say that Optional should only be used for stream related things and not as a general replacement for null. Null4j might be an easier sell to those developers. There are also developers that don't like Optional because "null is simpler". It really depends on your project and team which solution works best to solve the null problem, be it null4j, Optionals, Kotlin or whatever.
Hey /u/lukaseder thanks for the response and sorry for the delayed reply. After your question we decided to add support for this in zerocell and we've just released an update. See https://github.com/creditdatamw/zerocell/releases/tag/v0.3.0. PS: personally a fan of your work :)
You don't need APIs to return Optional in order to use it. `Null4j.let(maybeNull, Some::method, SomeOther::method)` `Optional.ofNullable(maybeNull).map(Some::method).map(SomeOther::method).orElse(null)` `Null4j.requireNonNullElse(maybeNull, "was null")` `Optional.ofNullable(maybeNull).orElse("was null")` Granted, Null4j is shorter in some places. 
Hopefully this won't be an issue with our recent updates where we removed lombok and trimmed some other fluff :) Check it out here: https://github.com/creditdatamw/zerocell/releases/tag/v0.3.0
Our customers complained because they got an NPE, we fixed it, and now "they got the same error", so we haven't actually fixed it... 
I don't appreciate you saying I am confusing "short code" with "fluent code", but maybe you are confusing "too much details" with "readable code". If something is too long (code or Reddit comments), people don't read it, they just scan through it. Writing too much text doesn't improve readability, it worsens it, because the boilerplate hides the things that matter. That's why abstracting the verbose boilerplate with a simple library makes sense.
This has bitten us numerous times as well.
[removed]
In the second case, Null4j is slightly more type-safe because requireNonNullElse requires that the last parameter is not null. requireNonNullElse(maybeNull, accidentallyNull); // will be flagged Optional.ofNullable(maybeNull, accidentallyNull); // will return null That's because requireNonNullElse's signature is basically this: &lt;T&gt; @NotNull T requireNonNullElse((@Nullable T)... nullables, @NotNull T defaultValue)
Great news, looking forward to test this in real world cases.
I despise GWT, but that's mainly due to working on a legacy application that used it. My main beef with GWT is that it allows management to skimp out on hiring an actual front-end developer (or at least someone with some full stack knowledge) and hoist those duties onto devs who really shouldn't be in charge of designing a UI. "It's all just Java, right?" I like the idea of having Java's type safety for front end development, but today we've got Typescript to fill that role. I think GWT has been eclipsed by better tooling.
Waiting for the Loom one to be created
Another thing would be that it doesn't wrap `maybeNull` in another object.
&gt;it was never really that popular. Wasn't GWT the framework that EVERY web application from Google would be using, and thus had such an amount of resources devoted to it that no other framework would ever be able to compete?
**Off topic** because not about **Java**
Guys you're overreacting... *It's okay to return null*
Yes. I know the difference. I was just saying the only thing I'm really into is HTML and CSS. I want to learn Java though.
There is a site where users an enter their usernames and see stats on a specific Minecraft server via the servers API.. I want to learn how to do things like that. Any ideas on how to start?
Really good way to start