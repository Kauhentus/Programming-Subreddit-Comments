It's not always guaranteed. It's not unusual for people to want their app, MyApp.war, for example, to respond to the url "http://mydomain.com/" instead of "http://mydomain.com/MyApp/"
I've never touched Jboss. For what it's worth, Apache (although I havent tested in Tomcat) can utilize mod_rewrite to reformat the request prior to it being handled. 
What Nebu said. It's more uncommon to see more deeply nested contexts, but it is valid. But I'm a little concerned about why you want to know about localhost. If you make your app behave differently on localhost, it can mess up tests against localhost. Is 127.0.0.1 going to be treated the same as localhost?
Thanks for the info. I just used localhost as an example instead of, say, server.com. There's nothing special about localhost or 127.0.0.1 in this context.
PrimeFaces *is* JSF. Think of JSF and a layer of visual widgets. PrimeFaces adds more widgets. When using JSF, you layout of your UI widgets in XML and specify the Java beans that are provide data to the view and handle the events initiated by the widgets. Spring MVC is different. It's basically the controller layer that redirects from one HTML page to another. JSF and Spring MVC are two very different things. There is something called Spring Faces, but I've never looked into it.
JSF is more like Swing than a traditional JSP based MVC framework like Struts. With JSF you layout of your UI widgets in XML and specify the Java beans that provide data to the view and handle the events initiated by the widgets. 
Head First Java is a great hands on book that demonstrates things visually. I loved reading it.
http://reddit.com/r/HomeworkHelp
Looks like the whole point of the exercise is to learn the modulus operator (%). Using it should make your life, and your examiner's life, a lot easier.
I don't really thing this is an issue of lazy error messages, it's an issue of semantics. I imagine they chose to use the Index out of bounds exception because it's a catchall exception to say "hey you can't use those index numbers". Which is easier than having different exceptions you have to catch for different problems with the index numbers.
The exception type wouldn't be so much of an issue if the text of the error pointed to the actual problem, instead it's suggesting a different issue, that the index was out of bounds. The actual bug in question came from this being called in a tight loop over a large data set, and so it wasn't obvious that an index of -1 wasn't being passed.
What's really interesting about substring in Java is that the returned string contains a reference to the original character array. This is great if you want to keep both strings but pretty horrible if you are trimming down strings and only want the new, smaller one. We had a massive memory hit because of this that we only discovered the other day.
I think a java.lang.IllegalArgumentException would fit here rather nicely.
well they are both reasonable uses of the exception, the purpose of using indexoutofbounds exception is because it's an error with choosing indexes. It just doesn't work well to use two exceptions on a class for the same purpose, because if you want to catch that exception in your program to detect if incorrect index values were calculated before the substring, you'll have to catch IndexOutOfBounds and IllegalArgumentException
I understand why they chose IndexOutOfBounds, but do not agree with it. IllegalArgumentException would help you diagnose the problem quicker, and that's the entire point of exceptions. And there is no hard requirement that the library have been designed this way. If they'd chosen IAE at the beginning then this would not be an issue today. Either way, there are better choices for messages than "String index out of range".
Why don't you [submit a bug fix](http://bugs.sun.com/) then? I agree that it would make the problem much more obvious when iterating over lots of data.
I was wondering if there are any java certs that are a must-have for java developers? I have been developing java code for about seven years now and I haven't pursued any java certifications. I was considering going through with it. Is it worth the money? Do employers care? Will it open doors for me?
I think experience and recommendation from previous employers is more important than any certifications. You can easily learn to pass a test, but that doesn't mean you know how to solve any problems thrown at you. It also doesn't show that you can work in a team and get along with other people. Having said all that, if you already have experience and recommendations, and are still having problems finding a job, the cost for the various certifications doesn't seem like that much to give you an edge over your competitors..
It's not really that I am having troubles finding a job. I have a good one with decent pay. But, I am considering striking out on my own to do some more freelance stuff and I think it might help clients feel more comfortable hiring me if I have some certs in my resume.
I'm the hiring manager/senior architect for a java shop who has read one too many resumes... A well written resume that passes the 15 second test is the most important thing just to get in the door. Then I care about the following in order of importance: 1. how you answer my technical questions when you know the answer 2. how you answer my technical questions when you don't know the answer 3. personality/team fit 4. being well rounded and just a good engineer ie. being well versed in every tier of an enterprise app from CSS to SQL and all the java in between which often comes from working in smaller shops. To answer your question, imo absolutely not. Certs are a joke and are actually a bit of a red flag for me personally.
Answer: it depends If you are in an organization that pays you based upon certifications, do it. If you are goal-oriented and new to the language and want a quick way to learn all types of nuances of the language, do it. If you need a talking point to quickly (not completely) convince others that you understand the language, do it.
I wouldn't get certified unless an employer specifically asks for a specific certification.
What do you mean by freelancing? I can only think of a few scenarios where a java certification would make sense. For instance, if you were going to try to do training classes then becoming a certified trainer would make sense. With most other types of independent work (consulting, solutioning, etc.) then your time is almost certainly better spent working on cultivating relationships, building up your industry rep, etc.
The first level certification (SCJP) can be used to skip the most basic questions in some interviews, and to force yourself to re-learn some concepts or situations that you may not have confronted with in your programming career; and that's all. SCJP implies that you know Java, but it does not imply that you *know* Java. However, it is a prerequisite for the more advanced certifications. The intermediate certifications (Business / Web Component Developer), although still just a multiple-choice test, need some more knowledge to pass, thus they can be useful if you're trying to get that specific position in some company. The advanced certification, SCJA (now "Certified Master: Enterprise Architect"), on the other hand, is hard to get, forces you to develop a whole application, write an essay, etc., and I certainly would respect anyone in posession of that certification (in a Java sense). Now, is all of that worth the money for a Java developer with 7+ years experience? If you were to opt for a company job, at that level of experience they'd surely value your previous projects, key achievements as a developer and related skills (managing skills etc.), so your certifications would slip to a second plane, being added value at best and ignored at worst. If you're trying to establish yourself as a freelancer, though, it can be useful as a presentation card (literally) to make your clients trust your developing skills, but bear in mind that not every client will know what a certification is nor what level of skill you're supposed to have based on it. All in all, it comes down to this: **they'll be worth your money if you're trying to work for people that think they're worth it**. If the people you'll be working with don't value certifications, don't waste your money. Except if you're going for the Certified Architect. That one must be worth it if only for the self satisfaction of getting it.
I would be targeting large educational clients for the work that I do. Higher education web-based systems are my where I have the most experience. I have attempted to get a few clients and they all want to see certifications. Maybe, it is just an higher education thing.
What would you envision a typical freelance project looking like? It's hard to say how much weight to put on the objection about lack of certifications. It may be legit or may be an excuse and if you had some certs there would be other reasons they would find not to give you the work. Is the person telling you that you need certs the same person that could make the decision to award you the job and cut a check to pay for it? If not then I would not assign a whole lot of weight to the notion that having a certification is what's preventing you from getting the work. 
The documentation of StringIndexOutOfBounds says "Thrown by String methods to indicate that an index is either negative or greater than the size of the string." So its use in substring doesn't conform the specification, since "3" and "4" are neither negative nor greater than the size of the string. However, I do see the usefulness in the hack not needing to catch both types of exceptions, even though doing it this way is approaching pokemon exception handling.
How do I get into one of those "smaller shops?" I'd love to make a career out of programming, but to be honest I do not know exactly where to start. I'm going to school at the moment (math/comp sci). I thought about getting certified just to make my resume look better but you make it seem like a waste of time.
The education system typically works based on bids (unless you have someone on the inside). My bids are low due to the fact that I am just getting into the game. But, there are many things holding me back from the business. I am sure you are right that the lack of certs is more of an excuse not to give me the bid, but it might be that they do have others that have bid on a project that have certs. Who knows. I would just like to hear from people that are out there making good money programming and how much value they put on their certifications. 
3 and 4 are not negative. but 3-4 is
I am a manager for a Java development unit and I occasionally hire developers. I put some value to Java certifications because I know the tests are challenging and a passing grade demonstrates competence in the field. The certification is not the "only thing" of course, not even close. But it is worth something, and in my opinion, if you think you might be in the market at some point (who isn't?) might as well invest the relatively small amount of money it costs to take the exam.
You apply! Seriously though, I do some hiring at our "small shop" and for green horns I like to at least see that they've built an entire web app (any language) on their own, outside of school. it shows that you have confronted all aspects of an application. Not just done some labs in school.
I know 3-4 is negative, so is 4 - 3^4, so what? [edit: I didn't pass 3-4 into the method, I passed 3 and 4 separately] The gory details of the way something is implemented shouldn't be exposed to the person using it, that is the core value in information hiding and purpose of specifications. This key concept in programming is obviously failed by substring, which requires you to understand its internals to understand why calling it resulted in an exception.
It does (BigDecimal).
BigDecimal can only handle fractions with denominator 10^x. You cannot exactly represent e.g. 1/3 with BigDecimal. BigDecimal should be adequate for currency values though. 
In cash world you cannot do things like dividing a dollar in 3. Basically what you are doing is integer math with cents. Of course, in virtual currency world, you do divide and calculate odd %s but for the sake of simplicity the standard way of doing it is agreeing a number of decimal places and the rounding. This is not a problem that stems from Java, but from the legacy standards in financial computing. You can't single-handedly improve on the standards because then your results don't match and this is not acceptable from a legal standpoint. In theory you can just use a symbolic math package like jscl-meditor. But that's in theory. In banking, where the contract specifies that balances are rounded in a particular way (usually towards 0) with a particular number of decimals (usually 2 for current accounts, up to 6 in securities), you as a mere programmer have no say.
While I can't really blame them, still, holy shit. 
We're using it for a couple of months now and it's certainly one of the better components suites for JSF. And, in contrast to RichFaces, speed of development is currently very high even though it's essentially a one-man project (this also means some amount of breakage, but it hasn't been a big problem so far). Btw, if you want to use JSF 2, PrimeFaces is currently the only production-ready component suite (you can use JSF 1.2 component suites under JSF2, but then you can't use the new features like the built-in AJAX engine or improved Facelets with composite components).
Finally!
No, all it needs is operator overloading (well, a little more than just that) so you can define your own number types and use them the same as the existing ones. 
You could always roll your own object. * setNumerator * setDenominator * Constructor(numerator,denominator) * BigDecimal(round) getResult() * ...
 What a colossal waste of time. 
Terrific and thorough answer! Thanks! Have you gone through the certification process? 
Someone that actually understands OOP. :)
All 100 JavaFX users are going to be pissed.
But.... where will I find my button tutorials ? I mean, JavaFX was really about innovation ! I won't miss it ;-) 
No, it should be immutable, just like BigDecimal and BigInteger. 
In the same boat as the OP, however, it's been ~6yrs for me. Thanks for the advice and guidance Redditors.
He makes some really good points. But I'm not sure I agree with his ideas about dynamic typing being harder than static typing. At least not in a development phase. I suppose he is focusing on debugging and maintenance.
Or that no checked exceptions is a good thing
I'm a SCJP myself , and thinking of getting the SCWCD since the JSP/Servlet technology is one of Java's most widely used.
Based on the other comments in this thread, I am left with a few questions for you. Does your current employer value your certifications? Has there been a monetary benefit for achieving these certs?
This was my favorite part, &gt;Primitives and Arrays. [...] The correct solution is a language where the source code does not have exposed primitives or arrays, and the compiler (or perhaps the JVM) works out if it can optimise it for you. This is *exactly* how I've always felt about these, but I've never seen anyone else say it before! 
Oh, dude... Of course, you're totally right. Forget the setters and keep the constructor.
Btw, I'm using CTRL+R for "Run", I find the default set of shortcuts quite cumbersome for such an used command.
[F11] runs all of the tests in debug mode. If no breakpoints are set, it just runs all of the tests.
If you install the [MoreUnit](http://moreunit.sourceforge.net/) plugin, you can jump from a class to its test case and vice versa 
Only if you program by the skin of my yellow country teeth.
BigDecimal. If you really want to, create a class that sets the exact precision, and create a toString() like method to prepend the desired currency symbol. Except for when one is hand writing checks, when does anyone ever write currency out as $5 and 50/100 when they mean $5.50 or €5.50? 
And a large part of that was due to the fact that Sun was pushing JavaME, which was one of the last revenue streams they had (manufacturers paid for certification) (not to mention that JavaME was shite).
Like I told you, SCJP serves only as a "free pass" through some interviewing processes and to reinforce the basics. Since I was already working for my current company when I got certified, none of the former applies - I already got the job and I already knew every aspect of Java we used in our daily routine. My workplace colleagues seem to turn to me whenever they have some question about Java, though. But the other day (this same week) I had an interview with a different, quite smaller company for a Java position. When we got to the technical part and he asked for my Java background, I just said "I've got the SCJP certification". The interviewer said "oh", wrote it in my CV (i forgot to update it :-S) and the next questions were "why did you choose to certify yourself? Are you planning on getting some higher level certification? Which one, and why?" No more Java questions :) About the monetary compensation: my current company has a "certificates program" that encourages employees to get certified in the technologies they use. They pay for the certifications because its "added value for the company". I was planning on getting it by myself if I didn't meet the criteria anyway, but fortunately I did, so they signed me up for a course and then paid for the exam. I'm not getting a salary raise just because I passed the exam they paid for :P but now I'm less afraid of asking for "too much" money in new interviews. If I ever switch jobs, I for sure will ask how my being certified affected the recruiting process. The Internets say that a certified Java programmer earns as much as a 30% more than a non-certified one - I'd like to verify that :)
&gt; The Internets say that a certified Java programmer earns as much as a 30% more than a non-certified one Thanks for that tidbit! I had heard something similar (in the 20% range), but I haven't researched it.
ctrl shift e is easier for me to swap editors, my hand is nvr anywhere near f6
But cmon guys, with a slogan like "don't be evil" google couldn't have possibly been in the wrong in this one!
The reason I moved back to Ant was the ability to set up off line build environments and Maven is a complete hassle for any kind of offline installation and build.
How about creating a deb wrapper-script around maven project manifests? So, say, you're packaging up Vuze; it declares its dependencies via its pom.xml; your wrapper creates a deb for vuze, and a deb for each of the libraries vuze is dependent on with the specific version, and creates deb dependencies linking vuze to those artifacts. Eventually each distro would end up more or less maintaining a deb (or rpm)-ized mirror of the maven repositories, but that's inevitable unless a reference platform can be achieved (which ain't going to happen.) The benefit of this is that most third party libraries in the maven repo also publish their source. So, just require anybody who wants to have their java project to be included in your repo to include a maven manifest; they don't even need to use maven as their primary build system. 
Two of my customers had the same problem : they finally decided to rent a dedicaced server and pay a sysadmin a monthly $400 forfait. CloudBees's RUN@cloud (http://www.cloudbees.com/) seems to be a good solution, but it won't be available before the end of the year.
I haven't had much success with managed Java servers. Virtual Private Servers (VPS) is the way to go if you're comfortable managing your own server(s). Lots of good companies to choose from. I like [Amazon Web Services (AWS)](http://aws.amazon.com/) since you can add servers to your cluster when needed on an hourly basis.
I'd go for a VPS myself. Try AWS or [Linode](http://www.linode.com/). I consider myself a Java noob, but I managed to get a Ubuntu server running on Linode with a Jetty+nginx combo pretty easy.
I'm using http://intovps.com myself (really cheap, and decent services so far - 1 year). Linode seems to be the standard choice, it's good. I'm also using slicehost - good, but unreasonably expensive.
I have not tried it but Stax seams nice http://stax.net/
Any dedicated VPS is what you want for sure, Linode or Slicehost. I run a Jira instance on a 1GB slice at slicehost, works great.
I use http://www.kattare.com for JSP hosting. I love their customer support. You don't talk to "customer service", you talk directly to the sys admins. Instead of telling you to do x and y in the control panel they will often just do it for you. Very nice.
Thanks for recommending these guys, I'm about to start a project that needs hosting as well and I'm going to give these guys a look. 
I am using hosteurope.de and for 13€, you can get a 1GB linux system very easy. Their app is all in German but you can work it with Chrome/Google Translate. You have to verify your self by receiving a letter which contains your password, so its not instantaneous.
This is really the best solution, you get machines here, which allows you to do anything.
I've not done much threading in Java because you should always shy away from threads, but here's my guess/take/guestimate/opinion: 1a - methodA will block methodB if you call A first; notify will wake all threads that are blocked by the object's monitor. From the [Javadoc](http://download.oracle.com/javase/6/docs/api/java/lang/Object.html#notify\(\)): &gt;Wakes up a single thread that is waiting on this object's monitor. If any threads are waiting on this object, one of them is chosen to be awakened. The choice is arbitrary and occurs at the discretion of the implementation. A thread waits on an object's monitor by calling one of the wait methods. 1b - if 1a is true, b can't be. Right? :) 1c - no.
redacting
&gt;if you have a single object with two synchronized methods, do they lock each other? Yes. The synchronization uses the monitor of the instance. You could equivalently omit the `synchronized` keyword from the method signature and instead wrap each method body with `synchronized(this){...}`. If you want separate monitors, then just use the synchronized block with different objects. &gt;1a. If methodA does block methodB, does 'notify()' notify all threads on mA and mB that the synchronized block is open? `notify` wakes up *one* thread that is waiting on the monitor of the object you called `notify` on. In your example, that would be anyone waiting on the `ProducerConsumer` instance, which includes those threads trying to get into the two methods. &gt;1b. If mA does not block mB N/A &gt;2 If mA and mB block separately, do I have to worry about accessing the memory they share at the same time? They don't block separately, so as long as all mutation uses the same monitor, you're fine. ----- A note about your example code: I don't see a point to your use of `notify` and `wait`. If you want single-threaded access to the instance, just using the `synchronized` keyword should suffice. (Note: this is entirely predicated on my assumptions about what I think you're trying to do.)
static synchronized methods synchronize on the class, non-static methods on "this", which means: yes, both methods wait on each other. notifyAll() notifies all threads waiting, notify() only notifies one -- I guess the first other lock holder Java finds. Locking on different objects doesn't work.
this would not work since both methods lock on different objects thus change the queue field without synchronization.
1a is correct: yes, methodA blocks methodB and vice versa. notify() acts on one thread that wait()s, notifyAll() on all. However, your code deadlocks, no matter which of methodA/B gets called first, because all methods have a wait() before a notify().
What wouldn't work? Do you mean using a `synchronized` block on `this` wouldn't work? If so, I disagree, since `this` is the same in both methods, namely the `ProducerConsumer` instance.
Yes, by default the methods will synchronize on the instance of the object (or on the class itself, if they are static). If you want blocks of code to synchronize on different objects, you can wrap the blocks in curly braces and prefix them with "synchronized(objInstance)" (where objInstance is any object you want; of course it needs to be made available to the various threads that need to be synchronized together). Yes, this means that every object in Java is also a monitor. This simplifies the programming (you can just add the synchronized keyword to some methods, and it works, no need to instantiate a Monitor and share it, etc.), but is costly in terms of memory and JVM implementation complexity. This is one of the points where several Java experts wish a different decision had been made, or that backward compatibility could be broken.
when I was replying to your comment it was showing some code using two separate objects as locks. If I only hallucinated this, forgive me, it was early and all.
Ah, yes. It was just a demo of using separate monitors, but it didn't really make sense given the surrounding code (which is probably what you picked up on), so I removed it.
Type safety is not worth all this typing!! 
The JPA 2.0 Criteria API, fucking awful. EclipseLink is my preferred persistence provider, I use it's native Expression API. At least with it I can copy criteria from one query to another with it. The JPA 2.0 Criteria API does not support this.
The JVM worries about this for you. If you'd read the Javadoc you'd have all the info you need: &gt;The awakened thread will not be able to proceed until the current thread relinquishes the lock on this object. The awakened thread will compete in the usual manner with any other threads that might be actively competing to synchronize on this object; for example, the awakened thread enjoys no reliable privilege or disadvantage in being the next thread to lock this object. &gt;This method should only be called by a thread that is the owner of this object's monitor. A thread becomes the owner of the object's monitor in one of three ways: &gt;By executing a synchronized instance method of that object. &gt;By executing the body of a synchronized statement that synchronizes on the object. &gt;For objects of type Class, by executing a synchronized static method of that class. &gt;Only one thread at a time can own an object's monitor. As you'll see from the above, the object that calls the synchronized method becomes the owner of the monitor; so yes is the answer.
It's java, it's doesn't matter. The code you write for a 32 or 64bit JVM is exactly the same. 64 bit JVM just gives you access to more memory. If you're just developing desktop apps, don't worry about it. The only gotcha will be if you're using any libraries with native shared libraries (Mozilla's JSS for example). Then your JVM has to be the same arch as the DLLs you're loading.
[eapps.com](http://www.eapps.com) I have no affiliation with them other than being a customer.
You really need to read up on this stuff, it's evident you haven't. Read the javadoc, then get Goetz's book. Then check out answers on stackoverflow, they've been over this stuff hundreds of times.
All the advice given so far is correct. However, I think it might be useful (for you and others who might be reading) to have some links: [The Language Specification for "synchronized"](http://java.sun.com/docs/books/jls/third_edition/html/classes.html#8.4.3.6) [The Java Concurrency Trail in the JavaSE tutorial](http://download.oracle.com/javase/tutorial/essential/concurrency/sync.html) You don't need to worry about notify or notifyAll if all you are using is synchronized methods. The JVM will take care of waking up the next waiter when your code exits the synchronized block. With that said, if you are really worried about performance and the risk of deadlocking because synchronized methods are on the Object instance or Class (static), then you should instead focus on synchronizing on another object which actually reflects the algorithm you are trying to use. 
Yep... agree all the way. Java is 64bit in terms of the length of an int/long and the such. There is no difference in your application -- presuming it is "pure java". One caveat (and this applies to all 64bit programs) is that your pointers are going to be double the size in a 64bit application. So unless you really need the extra memory addressability, I'd suggest sticking with 32bit for the performance benefits of cache locality and reduction in memory usage. Related note for "Advanced Study": [Sun's writeup on CompressedOops](http://wikis.sun.com/display/HotSpotInternals/CompressedOops) Both Sun and IBM's JVM offer a way to run a 64bit JVM with 32bit pointers; for those cases where you need just a little bit over 4GB of storage. 
Your code is syntactic sugar for public class ProducerConsumer { private Queue&lt;String&gt; _queue; public void enqueue(String s) throws InterruptedException { synchronized (this) { wait(); _queue.add(s); notify(); } } public synchronized String dequeue() throws InterruptedException { synchronized (this) { while (_queue.size() != 0) { wait(); } notify(); return _queue.remove(); } } } That should make it clear what actually happens.
You might want to check out the 'bible' of Java thread programming: http://www.javaconcurrencyinpractice.com/ It's the only concurrency book you'll ever need.
Awesome, thanks!
lol JDeveloper is NOT a top programming tool.
Because no matter how great something is, someone will dislike it. Conversely, no matter how bad something is, someone will like it. Some people, for example, dislike sex while others like national-socialism.
Questionable upbringing, maybe?
Basically, java is verbose. Here's one example of many: (java) HashMap&lt;String, String&gt; map = new HashMap&lt;String, String&gt;(); (C#) var map = new Dictionary&lt;String, String&gt;(); (Python) map = {} (Ruby) map = {} Java's example is pretty easily the clumsiest. You could argue that strong typing prevents bugs, but my opinion is that any decent software team will build a suite of automated tests anyway, which greatly diminishes the value of strong typing. I guess the java tools are pretty fantastic, and dynamic languages tend to have shitty code completion. If you want to pick java because of that, I won't fault you. Me though, I'm a dynamic language guy who just happens to find a lot of work in java.
Because there are different programming languages for different tasks, much like a carpenter has different tools for his different tasks. If he tried to use his hammer as a saw then he will also think that a hammer is a stupid tool.
I'd think a carpenter that tries to use his hammer as a saw is a pretty stupid carpenter.
I get what you're saying but: You only write: Map&lt;String, String&gt; map = new H then hit tab and the IDE fills in the rest. The verbosity is a side effect of Java's strong typing, the same strong typing that lets a lot of the code be dynamically generated on-the-fly as you type. But yes, if you don't like strongly typed language, you won't like Java.
That was the insult I was looking for.
The "goodness" of a language shouldn't be assessed based on how cool your IDE is :/
&gt;then hit tab and the IDE fills in the rest. What's happening there is the IDE filling in for a weakness of the language. In that C# example (if I understand it correctly) it's implicitly typed, achieving the same static typing but cutting down on some needless verbosity. 
It's the "weakness" that lets the IDE perform this function. 
Languages do not exist in a vacuum. 
I expect Oracle to continue pushing it as if it is, though. I don't care if they do, as long as it does not come at the expense of Netbeans, which has become a quite usable IDE in recent years.
With Google Collections the first example becomes more concise: HashMap&lt;String, String&gt; map = Maps.newHashMap();
Yes, it should. The toolset available for a language is as important as the language itself. The best language in the world with crappy tools is of limited use.
Personally, because I have to work in Java. 
Yes, but a language is not defined by an IDE.
I'd suggest that it does define the *developer*, to a certain extent. I don't believe that a hipster-developer-guy using emacs can be as efficient as if he were using IntelliJ IDEA, even though hipster-developer-guy will argue forever to the contrary.
Why generate lots of code when another language will just let you get by with less code to begin with? :)
Why not? Are you worried about your HD filling up?
Shorter code can be read faster. It makes maintenance easier.
Longer code is less ambiguous. It makes maintenance easier. When maintaining code it is not the speed of reading that is the limiting factor, it is the speed of understanding.
Man, in 1995, I had to upgrade my SunOS 4.1.3 box to Solaris to install that piece of shit so I could rock tic-tac-toe like it was 1982. Then it got a bit better when we all realized how much less sucky java would be as a server-side language. Things were good. javac, packages, javadoc. I wrote a lot of shit for banks in the 90s in java. Then bandaids like inner classes started to appear. There was an xml explosion. I escaped and haven't looked back since.
Python is a language with strong type enforcement too, the difference is that it doesn't have static typing. It has dynamic typing instead. See strong vs. weak and static vs. dynamic [here](http://en.wikipedia.org/wiki/Type_system).
Of course it should be part of the equation. Why shouldn't it? If the language is what makes a great IDE possible or easier.
But he is, by definition, as productive as he can be. :) Efficiency is never my first criteria though; productivity is. If I have to live in a boiler-plate infested language like Java or even, increasingly, C# then I'm going to demand a commercial grade IDE to go with it to shlep the boiler-plating with it. There's no way I'm going to maintain SOAP web services in emacs or vim.
Cause I have to read that later and map = {} is horribly ambiguous.
Escaped to what? Ruby? .NET? Unemployment?
No, but it has an impact. If youre typing everything up in notepad or something to show how badass you are, of course anything outside of python is unbearable. But if youre using a modern IDE then there is no noticable difference between coding python and java. (Except maybe for readability, I find it difficult to sift through large amounts of python code due to how abbreviated it is)
I dislike it because of the difficulty in GUI programming. Java by itself is fine and easy to use, but when more complex GUIs need to be made it begins to falter. I tried developing an application with Java and found the documentation to be confusing for creating GUI layouts. I also downloaded a window manager but only muddied up the code. I then started up MonoDevelop and began using GTK#. The GUI was much easier to create and GTK# (C#) is a very similar language to Java. I also don't have to deal with the ugly icons and layout that Java Swing/AWT/SWT provides (which one do you use anyway?). Package repositories also don't deal with Java or JAR sources. You would have to create a deb/exe/rpm installer to publish your application. If you publish on your own website then you may want to reconsider JAR files because these will open as archives and not Java binaries. This will confuse and frustrate the common user (we are not common users). Then there's the fact that even though Java claims to be cross-platform, it really isn't. One feature that they never got right, for example, is hidden files. In Windows you have a hidden flag, but in Linux you prepend a dot (.) in the filename. In Java you can't just use "myFile.hidden = true;" you have to test if it's Windows or Linux, then hide the files appropriately. I'm not sure yet if GTK# has the same limitation, but it's just an example.
&gt;You could argue that strong typing prevents bugs, but my opinion is that any decent software team will build a suite of automated tests anyway, which greatly diminishes the value of strong typing. Doesn't that INCREASE the value of strong typing? Many tests that you have to run and think about on python are already taken care of thanks to strong typing. I'd argue that the few more seconds you spend typing out the line that properly explains what you want, is the minutes less you have to spend testing the abbreviated version.
I like Java precisely because you can't always rely on a decent software team.
No, no, no. Nothing, really. I dislike almost all programming languages today, especially ruby. I admit to having a love of java in the 90s, having left C++, but nothing of interest since. Though JavaScript is actually kind of interesting after all these years. I like the prototype object model, like Self.
Type erasure. No type inference. No closures. No mixins.
Map map = null; There you go.
Shorter code doesn't really have anything to do with being read faster. Not only are there (childish) counter-examples I could write with perl or haskell, but reading-speed is really connected to design, not to language (at least, not for the languages: Java, Ruby, Python etc)
There is some hope, at least in this specific example. I heard rumblings about Oracle putting "type inference" into Java. That would allow you to do something like "HashMap myMap = new HashMap&lt;String, String&gt;()", and the JVM would be bright enough to infer the type of myMap from the other side of the assignment. I'm currently coding a project in haXe, and it has type inference. There are some little gotchas here and there with type inference, but overall, I think it's a good thing.
Ah, an actual argument, instead of just "we have to type more characters!"!
I haven't used GTK#, but Swing is actually a lot better (conceptually) than GTK but a long, long way. If you found Swing hard you were doing something wrong, it's actually extremely simple, well-designed and easy. It's a shame that it's still not as fast as PyGTK.
&gt; Type erasure. This one bears some explaining. I first got bitten by Java's dumb-ass type erasure bullshit in 2008, but the problem has been around a lot longer than that. [Here's my LJ post on the subject](http://mackys.livejournal.com/558785.html). Basically, the manifestation of the problem I saw, and that pissed me off massively, was that calling "toArray()" to a collection of type Foo, did not return an array of Foos. And that doesn't make any sense. If you do "new Collection&lt;Foo&gt;()", then everything in Collection is-a Foo. The fact that toArray() doesn't return an array of Foo is pure fail. 
I asked this before. http://www.reddit.com/r/java/comments/dazz7/here_is_why_i_use_java_tell_me_where_i_am_going/ I am realizing, there is a certain group dynamic and psychology to software development. These questions don't necessarily have anything to do with the technology. Why do some people dislike Java. I think the main reason they don't dislike Java is that they don't understand it. A lot of young people, especially on reddit and in college don't use Java and bash the technology, the majority because some smart hacker on reddit said they don't like Java and/or they saw a blog somewhere from a haskell developer. Usually, they don't spend time with the platform because they aren't in industry or work with it daily. Java is more difficult to get involved in as a college student, because you probably aren't writing enterprise apps (stuff that runs on a server). When I was in college, I was writing fast software, game software, graphics software. I wrote in C/C++ and also avoided Java and bashed it. So there is a large group (college students) that don't need to use Java and they don't do web application development. They don't need SOAP or Axis or JMS or all of the stuff that a Java/J2EE environment offers. I would respond to these people with, well there is a lot of the Java platform that is more mature for server side development. There is a lot of maturity for many industry libraries out there. There are others that are really informed about Java and bash Java for merits of the language, the runtime and everything else. I read Tony's blog and he is always bashing Java. http://blog.tmorris.net/java-and-practicality/ "I have found that those who advocate for the practicality of Java as a programming language for solving software problems invariably have an incredibly poor understanding of programming language theory and poor general problem solving skills. However, almost always, an even poorer understanding of the Java programming language itself is most prominent. Consequently, one cannot have a reasonable discussion about the merits of problem solving, using the Java programming language, or programming languages in general. However, one hopes that this sample set is biased and so one continues the search for a counter-example." Normally, this group is dead on. But, my response to them; well there are a lot of libraries out there for getting stuff done. To this group, a smart developer wouldn't chose Java as their language choice. But it would explain why so many in the industry have chosen Java. Apparently, there are Java libraries out there and people use them and write them. 
It's because Java has some serious drawbacks, even compared to other bad languages like Python and Ruby. Primitives should be objects. Methods should be objects. Concurrency isn't nearly as good as in other language (cf. Clojure). Static typing is a good design move, but it should be better (cf. Haskell/ML). Most of these problems don't extend to the JVM (hence the interest in Clojure/Scala) and there are lots of great things like EE that don't really exist for any other platforms.
Here are a few of my frustrations with the language: * Primitives are not first-class objects, so the only collection they can be used in is an array. This leads to some ridiculous stuff like Integer, Byte, and Float objects. Ugh. * No unsigned primitives, even though they have primitives. * No closures - I end up writing a lot of the same boilerplate because of this. * No way to say "only subclasses can see this" - protected means the package and any subclasses, no modifier means the whole package. They can all be worked around, but yeah, those are what I run into most often. 
actually, I'm pretty sure Visual Basic **IS** the IDE. Pretty hard to do GUI VB apps without the IDE.
Probably not possible. Definitively not a good idea. The main advantage to Java is portability. You do not want to try to load/access/extends dll and other non-java application inside your own. Let Java open the platform browser. Its the best solution.
That's what I figured, thanks. The reason I ask is because the end-user(at the moment, my boss, but potentially an analyst in the future) wants to make it so that the browser window containing the web page will close automatically when he's done with it. Basically, he opens a detailed information page on a domain which also opens the domain in a browser window. When he closes the details page he wants it to close that browser page as well - but not necessarily the whole browser. 
 x =&gt; "Boo yeah"
Yea...but does this really stop me from using say Google's GWT or Apache Wicket to build RIA based web applications or adding Lucene to a project to build web site with full text search. It is kind of like saying, "I was going to use Java to build my GWT based gmail like application and solve problems but it took me 30 characters to create a hashap. Screw that." 
Oh, before anyone assumes: I mostly like Java. I think overall, it's a fairly useful language/VM/runtime. But I'm not a stupid Java fanboy. I'm not blind to, nor in denial of, Java's flaws and weaknesses.
I actually like Java because of this. Verbosity makes me think trough what i want to do. It makes me write precise code, and not code based on guesswork. Verbosity in Java is the result of syntactical simplicity. And that makes code more understandable, it makes you focus on the solution to the problem and not on "syntactically improving the language itself, and hoping that the problem will solve itself". For exactly this reason i don't like Scala. It is not syntactically so simple any more, it has all kind of syntactic sugar added, and that hurts readability, and distracts attention from problem solving to the syntactic "look" of the solution. 
Arrays in Java and generics in Java are a failure. The workaround is to not use arrays, but instead, collections. However, so many people use arrays and litter their apis with them, it's almost impossible.
&gt;Primitives are not first-class objects, so the only collection they can be used in is an array. This leads to some ridiculous stuff like Integer, Byte, and Float objects. Ugh. You don't want there to be primitives, but you hate Integer, Byte, and Float classes? What exactly are you looking for? &gt;No closures - I end up writing a lot of the same boilerplate because of this. Anonymous inner classes are closures. I can't get bent out of shape that my IDE has to generate more text. &gt;No way to say "only subclasses can see this" - protected means the package and any subclasses, no modifier means the whole package. I would like the same thing plus I would like a module-level scope that allowed multiple packages to share methods but not anything beyond. Otherwise, you end up sticking two classes in the same package only for this reason.
with static method import : HashMap&lt;String, String&gt; map = newHashMap(); And, magically, the least interesting debate of computer science history has no subject anymore... 
You could try [mozswing](http://confluence.concord.org/display/MZSW/Home), which supposedly uses the Mozilla renderer. Last update was 2 years ago, but I didn't see anything newer. It didn't work for me, though. There's also [JDIC](https://jdic.dev.java.net/), which purports to embed the native browser in your Java application. If you don't need JavaScript or complex CSS, you can also render HTML in a [JEditorPane](http://download.oracle.com/javase/6/docs/api/javax/swing/JEditorPane.html) as long as you're using Swing. Edit: I don't have any actual experience working with a browser inside a Java application, though. Sorry!
You could probably get an equivalent effect through Javascript. Your boss needs to realize though that doesn't amount to real security, assuming that's his concern.
ppl thought java would be C++ without madness and it started out that way but had a lot of missing funcionality and verbosity at the start and turned many off. now java has filled out all the missing functionality and is almost as hairy as c++ syntactically, more verbose and gc behavior only makes it slightly less painful than c++ pointers to deal with. also ppl have written a ton of competing open source frameworks for routine tasks and any java coder will tell you that there is little chance of keeping up with the java universe. this is a problem c++ didn't have because most c++ frameworks were locked away under copyright and employers didn't expect developers to know how every proprietary library worked before you even started. :) 
I don't think he cares too overly much about security. There's no interaction other than browsing. He's just too lazy to close his tabs.
Thanks... I'll look into these.
I don't like java so much as I like the ecosystem. Eclipse, maven, tomcat, hibernate, spring. It's good.
Just push it out as a JNLP....
What I meant by the first point was that there should probably ONLY be Integer, Byte, Float, etc., not both. Primitives and methods should be objects, IMO. I understand why that's not going to happen with Java, and those reasons are basically good ones. Anonymous inner classes are (for me, and I think for others, too) harder to read and comprehend. I think the syntactic addition of closures would be a great thing. Like I said before, all the problems I'm noting can be worked around, but they are frustrating.
I understand finding inner classes harder to read, but I find them easier, because it is not just a method signature, it is an interface signature that describes what that method is expected to be for. I can hover over it and see the javadoc for the interface pop up. Were it simply of type *fun String,Integer =&gt; List&lt;String&gt;* that would be not as thoroughly described. So, I appreciate the inner classes and I'm not really looking forward to reading a more abbreviated syntax, or worse, one littered with special characters like #.
**Technically:** 1. No properties violates uniform access principle (which leads to `get__` and `set__` for everything). 2. No first-class functions or closures (which leads to verbose one-method interfaces). 3. No unsigned ints (which makes parsing binary data a pain). 4. No switch on strings. 5. Type erasure (which cripples generics). 6. No type inference. 7. No mixins or other way to extend existing classes (which leads to annoying `Collections`, `Arrays`, etc. static classes). 8. `null` 9. No metaprogramming, macros or other syntactic flexibility. 10. No coroutines. 11. No tail call optimization. 12. No first-class classes. 13. Virtual by default. 14. No operator overloading. 15. Special syntax for constructors (which violates uniform access and leads to factories for everything). 16. No unboxed collections. 17. Primitives. 18. No `==` on strings or other user-defined types. **Culturally:** 1. Many Java programmers only know Java, so there isn't much momentum to try to improve it since they don't know a better way. 2. There's a lot of awful Java coders which leads to a lot of ugly defensive programming practices being considered idiomatic. 3. The arrogant psychology of "other dumb people won't understand so we can't have this feature". 4. Enormous ungainly "enterprise" architecture, much of which is a consequence of language decisions.
&gt; then hit tab and the IDE fills in the rest. You still have to read it. Code should be optimized for reading, not writing.
&gt; Longer code is less ambiguous. It makes maintenance easier. These two statements are equally unambiguous: HashMap&lt;String, ArrayList&lt;Int&gt;&gt; collection = new HashMap&lt;String, ArrayList&lt;Int&gt;&gt;(); var collection = HashMap&lt;String, ArrayList&lt;Int&gt;&gt;(); The only difference is that the latter isn't redundant.
Even then, it's still `Map map Maps Map`.
&gt; You could argue that strong typing prevents bugs, but my opinion is that any decent software team will build a suite of automated tests anyway, which greatly diminishes the value of strong typing. ("strong" typing is a vague term, I think you probably mean "static" typing). Your argument isn't against static typing, its in favor of type inference. Scala, which is statically typed like Java, looks like this: val map = Map(a -&gt; b, c -&gt; d) People who say that testing achieves the same thing as static typing don't understand its value. Strong typing is a **guarantee** regarding a function's behavior. Testing doesn't guarantee anything except that the specific things you tested work as expected. Static typing also allows the IDE to help you in ways that it couldn't with a dynamically typed language like Python or Ruby, as others have noted.
This is a false dilemma. Haskell is simultaneously much more strongly typed than Java, and much less verbose.
Let's treat the Java language and the Java platform as the two separate topics that they are. Yes, the Java platform is great. But as for the Java language... if at all possible, use Clojure or Scala instead.
&gt; And that doesn't make any sense. I think the decision for things to be that way make sense in the historical context in which that decision was made. You're a bit vague, so I'm not sure if this claim I just made contradicts yours or not. One of Sun's most important goals was backwards compatibility, which is what forced type erasure in the first place. Since type erasure was already a given, and that the Collections API is just plain-old Java source code, and doesn't have any special hooks into the compiler, I don't think it's actually possible to implement toArray() to behave the way you'd like. That is to say, you cannot write Java code that identifies your own own generic parameters (because that information is "erased" at runtime) and create an array of that type.
Unnecessary verbosity is a perfectly good argument against a programming language. Powerful programming languages are succinct.
Say what you will about the tenets of national socialism, at least it's an ethos.
&gt; HashMap myMap = new HashMap&lt;String, String&gt;() This is already legal Java 5. What you're probably thinking of is: HashMap&lt;String, String&gt; myMap = new HashMap&lt;&gt;() which may become legal in Java 7.
There is also the Cobra/Lobo open source Java browser that may work for your second option. 
&gt; No metaprogramming, macros or other syntactic flexibility. &gt; No operator overloading. These are strengths rather than weaknesses, depending on what you're looking for in a programming language. &gt; No == on strings or other user-defined types. The == operator is defined on all objects, including Strings and user-defined types. It just doesn't do what you personally think it should do, I guess. &gt; There's a lot of awful Java coders [...] &gt; The arrogant psychology of "other dumb people won't understand so we can't have this feature". Doesn't the former justify the latter?
Why not offering to download and install it automatically during the install?
But its "verbosity" should...?
I disagree.
Groovy..?
People who want to be considered "smart" by their peers feel it is a requirement that they openly hate Java. It's really as simple as that.
nt, but no. {} defines an empty dict, it's not even a little ambigous.
&gt; These are strengths rather than weaknesses, depending on what you're looking for in a programming language. Any feature can be abused. I can make a function named `doSomethingInnocuous` that actually erases your hard drive. But a language that doesn't let me define `+` to add two vectors is pretty limited for many valid use cases. &gt; It just doesn't do what you personally think it should do, I guess. That's correct. I think logical equality is more useful than reference equality in the majority of cases where you'd care to do either, so I think making `==` be *only* reference equality is optimizing for the wrong case. (Not to mention the awkwardness of needing to explicitly check for `null` when using `equals`.) &gt; Doesn't the former justify the latter? No, I think the latter encourages the former.
Sure, I didn't mean that as an exclusive list or anything. There's plenty of great languages running on the JVM these days; it's just that Java itself isn't one of them.
Then what about having an overly verbose language makes it more powerful? Do you disagree with him characterizing java as 'unnecessary verbosity'? Because I doubt you would say that unnecessary verbosity makes a language good. You didn't really input much to the conversation at all at this point.
I think there's a balance to be struck between economy of the language vs. crypticness and opaque syntax that's extremely difficult to parse. Java certainly falls on the side of "too verbose", though. Even for my taste.
Care to tell us why?
&gt; One of Sun's most important goals was backwards compatibility, which is what forced type erasure in the first place. As I mentioned in the comments on my LJ post, I have no problem at all with thrashing the living shit out of backward compatibility when the old way is broken as hell. Some things suck, and richly deserve to be destroyed. We call that "progress".
Powerful programming languages are conceptually simple, like Haskell. This has nothing to do with the Paul Graham-esque metric of "characters typed".
I guess it all depends on what is meant by "unnecessary" verbosity. One man's "unnecessary" verbosity is another man's "necessary" verbosity. It's all covered elsewhere in this thread, I'm sure. Strong typing, alla that noise, ya know.
http://www.reddit.com/r/java/comments/dkfgm/why_do_some_people_dislike_java/c10x22o Yeah, I guess I shouldn't have chimed in.
Yeah, that's a good point. I guess APL would be a good counterexample.
What kinds of things can the dict hold? I know, anything at all. That's why it's ambiguous.
(groovy) def map = [:]
HTTP POST is really not idempotent; 'accepting a representation of a resource as subordinate' means the server could or could not accept the resource twice and create two new resources. Who hasn't ever submitted an HTML form twice? Using the words 'data model' for a representation of a resource is unfortunate, or even wrong. A data model in HTTP is more the URL structure that the server exposes than anything else.
[DeMorgan's Laws](http://en.wikipedia.org/wiki/De_Morgan%27s_laws)
Awesome, thank you. Somehow I missed this in class. Karma for you!
Yeah, this is a good idea. As a Java developer myself I can't understand anyone getting by without having Java installed on their pc, but a lot of people don't. It's annoying when people can't run stuff you write because they don't have Java installed, and hopefully more people will have it since you are doing this!
Yeah, I really like Netbeans.
I used it a while ago. I remember it being a cool and easy introduction to 3D programming with scene graphs. Pretty cool stuff, I liked it.
&gt;If youre typing everything up in notepad or something to show how badass you are, I hate people who do this. It's like saying: "I built my house out of toothpicks. It's shit, but man was it difficult!"
1. This does not apply when the HashMap is returned by a function instead of created in situ. 2. The variable does not have to be of the same type as the object it holds, in other words: Map&lt;String, ArrayList&lt;Int&gt;&gt; collection = new HashMap&lt;String, ArrayList&lt;Int&gt;&gt;(); 
NSIS installer allows to do this. For example, JDownloader downloads and installs JRE if it doesn't find it. Just make sure to disable the installation of browser plugins or you will be creating security holes in the computer, unless you enable Java update (which as you said, is a bit irritating).
Really? I like the new Java a lot better, since 1.5 to be exact. Generics make using collections a lot easier (no more casting), and the new for loop to iterate over a collection make it a lot nicer to use. Inner classes where there since 1.1 (1997) and I don't mind them that much. I don't mind XML either, finally a standard format for data. The funny thing about Javascript is that since web applications are getting more elaborate, performance starts to matter, so they looked how they could make it faster. Then they finally realized that the lack of static typing was not a good idea.
&gt; This does not apply when the HashMap is returned by a function instead of created in situ. That function still has to declare its return type, so you don't escape the redundancy. &gt; The variable does not have to be of the same type as the object it holds, in other words: Yes, but that's a rare case, especially for local variables. Forcing you to *always* annotate the type of local variables for minority of cases where you do care is optimizing for the wrong case. It would be just as easy to do: var collection = (Map&lt;String, ArrayList&lt;Int&gt;) new HashMap&lt;String, ArrayList&lt;Int&gt;&gt;(); For the few cases where you want the declared type to be different from the inferred type. Java already has to do this type inference anyway, so it's kind of inane that it doesn't let you use that to your advantage.
&gt; One of Sun's most important goals was backwards compatibility, which is what forced type erasure in the first place. C# managed to add reified generics without breaking backwards compatibility. It's not like this would have been rocket science for Sun, they were just too proud to borrow something from .NET.
Strong typing and terseness are not mutually exclusive. These two statements are equally strongly-typed: ArrayList&lt;Int&gt; collection = new ArrayList&lt;Int&gt;(); var collection = new ArrayList&lt;Int&gt;();
&gt; Were it simply of type fun String,Integer =&gt; List&lt;String&gt; that would be not as thoroughly described. The method that takes that function should be describing what it's for.
If it's a one off, that's fine. If there are 10 such functions that use the same closure for the same reason, then a unifying interface with the documentation for all of them saves duplication of effort and outlines an important design idea of the system in question. Just the fact that the closure syntax will be easier to type, I know this latter case will get short shrift by most developers who think that defining an interface for such a thing is "over-engineering".
&gt;That function still has to declare its return type, so you don't escape the redundancy. True, but it does remove the ambiguity of this statement: var collection = someMethod(); To find out what type collection is, you'd have to look up (or at least mouse over) someMethod. &gt;For the few cases where you want the declared type to be different from the inferred type. Whether one would consider this to be a rare or common case would, I suspect, depend on whether one programs in a language that allows it and makes it simple.
In C# you can have both of those things: 1. Create a named delegate type to document what a function means. Then your methods can take functions of that delegate type to avoid the redundant documentation. 2. Pass the method a closure that implements that delegate.
That statement isn't *ambiguous*, it's just that it may be *unclear*. It still returns precisely one fixed type, the type just isn't apparent at the callsite. Personally, I don't find that a big loss. If I see code like: var names = getNames(); It's pretty obvious that I'm getting a collection of names. The concrete type of the collection class is not something I care about often enough to want to echo in the code there.
&gt;That statement isn't ambiguous, it's just that it may be unclear That may be so, but that's not necessarily a good thing. Your example of getNames is obvious, but what if it's getDirectoryEnties() or getIDs()?
How often do people not bother to create the delegate type?
Before C# 3.0, you had to define the delegate type, it had no generic function types. After they added `Action&lt;T&gt;` and `Func&lt;T&gt;`, everyone just uses those. It turns out that it's pretty obvious what a function is for in the context of the method you're passing it to.
In those cases, what I still care about the most is the operations I can perform on the result. If the returned value lets me do what I need to do, seeing the nominal type spelled out in code doesn't add a lot of value. I can always just hover over the method to see what its return type is.
It doesn't sound too bad, you're right. 
I don't mind java all that much, to be honest. Its been five years since I've worked it on a daily basis. Generics are certainly convenient. However, recently I was resurrecting a servlet project from 2000 and my impression of ant, tomcat, etc., is that they are far more complicated than I remember such things needing to be. That's my overall impression of the java universe now - that its complexity is getting out of control, and I would only ever write small programs that don't necessitate an IDE infrastructure and code generation, *or* I would target the JVM with an alternate language like groovy. I'm no fan of static typing except in the case of haskell (I am not terribly fond of it either, though) 
They aren't THAT separate. The Java platform if you are talking about the JVM was designed for the Java language. The very concept of java primitives, java bytecode, java objects is very apparent for the JVM. Both Clojure and Scala are written in Java and target the JVM. In theory, we all could code in Java assembler, but it just so happens there is a Java language we could use.
In this context they are separate. The question of whether Java, Scala, or Clojure is the better language is orthogonal to the question of whether the JVM is a good platform to use.
Here is java assembler, which is a very close approximation to Java bytecode. When the JVM startsup, the Java libraries are loaded (see rt.jar, java.lang.String, java.lang.Util, etc). You have java language, and possibly Java assembly language and then Java bytecode: You even tune your JAVA code for the jvm, including how objects are created and how many. Do you use a java string or character array? Java threads or not. Clojure (written in Java) designed to interoperate and call Java libraries runs on the JVM. Scala and these languages can work with Java but there is still the translation to Java bytecode, so you still have to worry about java Object creation, method calls, static or not work on the JVM. Even though you may create code in Scala or Clojure, java objects are created by the JVM. Method calls are invoked. Java threads are created. &gt; public G(); Code: Stack=1, Locals=1, Args_size=1 0: aload_0 1: invokespecial #1; //Method java/lang/Object."&lt;init&gt;":()V 4: return LineNumberTable: line 1: 0 public static void main(java.lang.String[]); Code: Stack=2, Locals=2, Args_size=1 0: aconst_null 1: astore_1 2: aload_1 3: instanceof #2; //class java/lang/Object 6: ifeq 20 9: getstatic #3; //Field java/lang/System.out:Ljava/io/PrintStream; 12: ldc #4; //String ===&gt; 14: invokevirtual #5; //Method java/io/PrintStream.println:(Ljava/lang/String;)V 17: goto 28 20: getstatic #3; //Field java/lang/System.out:Ljava/io/PrintStream; 23: ldc #6; //String Not a String. 25: invokevirtual #5; //Method java/io/PrintStream.println:(Ljava/lang/String;)V 28: getstatic #3; //Field java/lang/System.out:Ljava/io/PrintStream; 31: ldc #7; //String Running 33: invokevirtual #5; //Method java/io/PrintStream.println:(Ljava/lang/String;)V 36: return LineNumberTable: line 4: 0 line 5: 2 line 6: 9 line 8: 20 line 11: 28 line 12: 36 }}}
I use JCreator lol
You just use a semaphore like you would in any other programming language. In your main class: private Object[] semaphores; private Object[] data; public Main() { data = new Object[2]; semaphores = new Object[2]; semaphores[0] = new Object(); semaphores[1] = new Object(); } public void sendData(int threadNum, Object data) { data[threadNum] = data; semaphores[threadNum].notify(); } public Object getData(int threadNum) { try { // etc etc for exception handling and timeouts. semaphores[threadNum].wait(bla); return data[threadNum]; } catch (.... stuff ...) { ... stuff ... } } and then your threads would all need to periodically call getData(threadNum) to check for data. The code above obviously needs fixing up to fix the race conditions. It depends on how you want to implement the details.
Something like this wouldn't really work for me (I don't think so, at least). I'm trying to make an instant messenger and my current roadblock is passing data to a specific thread so that it can route data around. There's no simple way of accessing a current running thread based on name or ID? =/
I'll assume your class that extends Thread is called MyThread for this example. Add a method called (for example) putData(String data) to your MyThread class. Your main Hashtable then should contain MyThread objects. Use your public method to get the MyThread object you want to communicate with. Call the putData(String data) mthod of that MyThread object with the data that you want to send to it. 
dude
&gt; Many Java programmers only know Java, so there isn't much momentum to try to improve it since they don't know a better way. Yeah, why is that? Is it because Java is so huge that they don't have the energy left to try learn other languages?
Java isn't that big. I think it's just that there's a large body of programmers where programming is just a job. Those people end up at mid-level enterprise programming jobs where Java is common.
So you really just complain about pythons dynamic nature. Which is fine (sometimes I really like static typing, stops me from fucking up). But {} is absolutely unambiguous in python.
I haven't used ant or tomcat, so I can't say. I typically use Java for applications of average size, for which Eclipse suffices. I had a look at Spring and Hibernate, and those are definitely complex. I guess it's a matter of investing time to learn them and save a lot of time afterwards, just as well for ant and tomcat.
http://www.eapps.com/applications/java-hosting.php 
Of course that's what I'm complaining about, and as a result {} is ambiguous in *programming*.
&gt;Call the putData(String data) mthod of that MyThread object with the data that you want to send to it. This is the problem, I have no way of distinguishing which thread I'm calling the method from. I've tried putting the thread object, thread ID, thread name, etc into the hashtable and I don't know how to call the method from the specific thread. It's only been sending to 1 thread no matter what I try to send to a different one.
Read the [documentation](http://download.oracle.com/javase/1.4.2/docs/api/java/text/MessageFormat.html).
!c.)
First, take a lot of pain medication.
Dammit, I came here to say, "First, install something else", but yours was actually funny. Actuall, I wanted to say, "First, install &lt;competing framework&gt;", but are there really any good MVC-ish frameworks for Java? I'm so done with Java.
When I think of Spring, I think of the IoC stuff, not their MVC stuff. If we're talking web MVC frameworks, I rolled my own long ago and always liked it better than Struts (triple ugh!) or Wicket or whatever. Mine was simple, easy, powerful in ways the others weren't that mattered, and not powerful in ways the others were that never mattered. And nowadays, I wouldn't use anything but GWT. If we're talking desktop, I'm one of those strange birds that actually likes Swing.
Dude! Awesome answer. Your right, Spring is better known for IoC. I've been out of the Java world for about three years and haven't been following it's developments very closely.
Yes, but when?
Hah, beat me to this :) But here's some info: &gt; As to that plan, the database giant has decided to deliver the delayed JDK in two installments, in 2011 and 2012, apparently deciding it's unrealistic to cram all the planned changes into a single code drop. [www.reddit.com/tb/dh7zz](http://www.theregister.co.uk/2010/09/22/oracle_on_java_roadmap/) I can't find the relevant thread/post/whatever, but this one just has the same relevant information. edit: found it... [http://www.reddit.com/tb/db6r1](http://blogs.sun.com/mr/entry/rethinking_jdk7) 
You'd expect a company called Oracle to provide some answers, eh?
What world did you move on to?
The last 2.5 years have been C#, though I'm moving to a place that will be 50/50 C#/Java.
50% C#/Java sounds like a really weird combo. I like everything I know about C#, but can't bring myself to be even somewhat tied to Windows. I haven't used a windows machine at home or at work for 4-5 years. Where I am now, there's a split between programmer groups - one side uses C#, the other uses C++/Java. There are maybe 6 programmers total, so being split like that is absurd. But, some people have absurd personalities.
&gt; Yeah, why is that? Is it because Java is so huge that they don't have the energy left to try learn other languages? I'm a Java programmer, I'll share my story ... I learned to program at university in Pascal and some C. I didn't like C, I liked Pascal. Then I found Borland Dephi (which was basically "Visual Object Oriented Pascal") and liked it a lot. I worked as a Delphi programmer for a couple years, and then was sent on Java training. I took to Java pretty quickly, I think mainly because I didn't have to bother with pointers and memory management in Java -- I could focus on the business logic. I also enjoyed building UIs with Swing and web apps with JSP. 10 years later, I've used just about every tool in the Java/JavaEE toolbox. Recently I've tinkered with all of the following and plan to learn more about them: JQuery, Ext JS, Groovy and Grails. I have no plans to program in any of the following, and will likely only do so if employment depends on it: C, PHP, Ruby On Rails, or any such non-Java tool. I use Java because I like it and because I've built a lucrative career using it. Java has been very good to me.
I agree that you don't want to go down the route of trying to implement your own browser if java's built-in support for basic html isn't sufficient. If you're determined to close the browser page from the app, you could embed the Jetty web server (http://jetty.codehaus.org/jetty/) and serve the pages with suitable javascript to do a window.close(). The user will still get prompted to confirm the window closing, but it could give you control from the app. In order to actually tell the javascript to run you could either have the javascript poll a certain URL on your embedded server using ajax or (if the browser is new enough) use HTML5 web sockets. Depending on how bullet-proof you have to make this though, the effort could range from a quick hackathon to quite a bit of work.
The simplest way is to separate the console window from keyboard input, and only send the kbd input to the server and to the console when an entire line has been input (as in chat). About the second problem, hitting return would include an EOL character in the stream, so technically the stream is not empty.
What character is it so that I can make it so it won't send if it's only that? 
It should be one or both of '\r' and '\n'. Simpler to call BufferedReader.readLine(). It'll strip all EOL chars and return you the rest of the line. Check string length before sending.
I already use readLine() but I want to make sure the client stops accepting blank messages. Thanks!!
When Larry bought Sun he clearly thought Java gave him a noose with everyone's necks already in it. But if Intel, Google and IBM are at the end of that rope then you best drop your end because you about to become the new SCO, Larry.
I can only hope that you're right. I firmly believe that the healthiest possible thing that could happen to Java is for Oracle to set it free: create for us a Java Foundation, release everything under a FOSS licence (not *almost* everything...I mean *everything*), and assume a less involved roll in the shaping of Java's future. Imagine what would happen if the community using Java could actually have a say in its future for a change (instead of begging for lambda expressions and closures for ages)! BUT If the JCP is unanimous against Oracle on this one, that's wonderful, but since Oracle owns it they can veto any decision the JCP makes. And since our buddy Larry has proven himself to be largely comprised of the black parts of burnt toast (or whatever they make vegetarian bacon out of), what we're going to see is Oracle giving a big "fuck you" to the JCP and doing whatever the hell they want. Quite frankly: Larry's got himself a patent laden cash piñata and he's going to keep whacking it until he runs out of candy.
This is probably bigger than the JCP. IBM alone has a patent portfolio that would make Larry shit several houses worth of bricks if they brought it into play. Maybe Intel will decide to shut Oracle out of advanced access to new processor technology. Maybe Google will throw a shitpile of support behind PostgreSQL. Watch to see if IBM becomes an official supporter of Libreoffice. If they do, it's a sure sign this will turn into an epic gang beatdown.
My question now is, could oracle sue java if java is branched off and still use whatever patented code they have?
I'm quite tickled by the LibreOffice situation. I mean...a vote of no confidence in Oracle's leadership that actually has some (Google, Novell, Red Hat, and Canonical shaped) teeth! Take that, Oracle! ...But now, I can't help but think that it was a warning sign of the start of a long and drawn out conflict between everybody who doesn't hate the programming community and Oracle. The thing is, I don't want the future of Java (and OOo, MySQL, etc) to be decided by a patent bitch-slap-fight. I don't want to have to worry about Java's fate being decided by a man wearing a silly black robe. I mean, when/if the legal gauntlet gets slapped across a face, what does the Java community do for the years it'll take to sort the mess out? Keep waiting for type inference because Oracle is too busy to approve what the JCP wants (like Oracle gives a crap what the JCP wants)? I'm so confused :( Fucking software patents...
I believe that Java cannot be forked due to licence limitations and the looming threat of patent infringement. I wish we could, but we've seen that if someone (Google) makes something (Dalvik) that Oracle doesn't like that involves Java, the hounds (lawyers) are released.
Badass stuff I really like it. Is anyone using this in their shop?
I use it everywhere I can at work, it's as awesome as it sounds.
You ever use it with hibernate? How did it go?
Works perfectly fine, lombok is invoked during compilation so the classes generated have everything needed for hibernate or anything else to work.
What browser are you guys watching this video on? Neither this one nor the video at their home website is working with IE8 nor Chrome 6. Just wondering which browser/version I should download. Firefox 3.6.10 fucks up as well.
It should work fine with hibernate now, previous to the current version of lombok if you wanted equals and hash code methods you would still need to write your own because hibernate proxies didn't play well with the generated code. There are still problems with large-ish projects and eclipse. The eclipse compiler will occasionally throw NullPointerExceptions whenever you make huge changes (like switching branches) but you usually only have to clean the project and it should work.
Really sweet. I have the feeling the minutes spent on reddit today won't be lost :)
As much as this is nice, I have a couple of reservations. A lot of it is unusable with java EE as jpa uses getter annotations for ORM mappings. (well, you CAN use xml, but annotations are SO much nicer.) As well, with jpa entities tostring/hashcode need to exclude fields that might have db access as you could string together a lot of db accesses down the line of recursive tostrings... 
[Download link](http://download.playframework.org/releases/play-1.1RC1.zip)
Great framework! Bunch of cool new features! Thanks for the hint :-)
first off...IBM already paid their java tax, so I don't know why we're even mentioning them..and they would continue to do so no matter oracles decision because java is a huge revenue stream for them. Stop being dumb. Second, if you spent 2bn$ on sun; probably half of which was for java...I know I'd want some ROI. Not to mention the father of java was just quoted as saying how much cash resource it takes to make the java ecosystem work. You wan't a for profit company to flip that bill all for the purpose to make java free so other people like google can make serious cash on it? YOU NUTS BRO.
IBM is a member of JCP and voted for independence. Read the fine article. My point is that Oracle is poised to make a lot of powerful enemies if it continues to be assholish with respect to Java, and some of those powerful enemies have the means to put a serious hurt on them.
Oracle voted for independence at one time too. All that changes when $$ is involved; if you think IBM would be any better, look at what they did to the people who wrote mainframe emulators (Hercules i think it was?). So My point is, I don't think these companies will turn on Oracle like you think, there are many happy paying customers and I'll bet the overwhelming majority of java developers don't give a shit about java independence.
Does the "Default Methods for Interfaces" mean we will have something like Scala's Traits in Java?
I was also a C# programmer, and when I wanted to learn Java a while back, I just thought up some program, and started making it, learning as I went along. C# is VERY similar to Java, so you don't need to learn as much. Oh and I tried out Netbeans, but didn't find it very nice for a Java newbie like me, switched to Eclipse, and never looked back. Also Notch, creator of Minecraft, uses Eclipse.
my first java book was "building java programs" by marty stepp.
"Effective Java" is an incredibly good book for people who already know Java. That and "Java Concurrency In Practice" by the same author are required reading for anyone who wants to develop solid, reliable, efficient systems in Java. However, I wouldn't recommend either as a starting point for a Java newbie, and the books that I used when I learned Java are from the 1.0 days. I've heard good things about "Head First Java" as a good first Java book... Anyone care to comment on that one? 
Eclipse, google, and a sample app. What more do you need?
I second this. If you're learning Java from a C# background (or the other way around, as I did), the languages are so absurdly similar that the best approach is probably to find a good guide to the differences between the two, such as [Wikipedia's](http://en.wikipedia.org/wiki/Comparison_of_C_Sharp_and_Java). Some highlights: * Instead of arbitrary .NET assemblies you have one Java class per `*.class` file. * Java doesn't have reified generics, it uses type erasure instead. This can have some consequences you might want to be conscious of. * Java enums are richer than .NET enums (full-fledged class instances rather than numeric values). Java enums won't have the metadata constant versioning issues of .NET enums. * No syntactic sugar for events and properties. * No LINQ. * No anonymous methods or lambda expressions, though you can achieve essentially the same effect (minus closures and more verbosely) with anonymous inner classes implementing the Runnable or Callable interfaces. * All instance methods are virtual. * No operator overloading. Operators for e.g. String are special-cased. * Java doesn't have value types ("`struct`"s), but there is a built-in set of primitive types that will be subject to boxing and unboxing under certain circumstances. Any class you define yourself will be a reference type. * Java methods support override covariance, if you're into that sort of thing. * Java has a concept of "checked exceptions": Exceptions declared by the `throws` keyword of a method definition which must either be caught or likewise declared in a calling method. * No pointers, no running "unsafe" code in Java.
Perhaps you should discover what problems you're having, and work towards a possible solution … 
Look at [r/learnprogramming](http://www.reddit.com/r/learnprogramming).
I went in the other direction and did this. I would just code until I hit a problem, google the answer, then carry on. That said if you do want to start with a book, thinking in Java is probably a pretty decent choice as it really gets to grips with the specifics of the language without worrying about teaching you to program.
public class Enrolment extends JPanel implements Report { public ArrayList&lt;String&gt; studentListing = new ArrayList&lt;String&gt;(); private final int WIDTH = 800; private final int HEIGHT = 550; public Enrolment() { setBackground(Color.LIGHT_GRAY); setPreferredSize(new Dimension(WIDTH, HEIGHT)); setFocusable(true); setTextArea(); } public String currentStudentListing() { String currentStudents = ""; for (String s : studentListing) { currentStudents += s + "\n"; } return currentStudents; } public void setTextArea() { JTextArea pane = new JTextArea(30, 60); JScrollPane scroller = new JScrollPane(pane); pane.setLineWrap(true); scroller.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS); scroller.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER); add(scroller); Font font = new Font("Arial", Font.BOLD, 14); pane.setFont(font); pane.setForeground(Color.blue); pane.setBounds(0, 0, 20, 80); pane.append("Current Student Listing: \n" + currentStudentListing() + "\n"); } } Here it is mostly. Just cut out some junk that isn't relevant. Just confirming, the String concatenation works fine when I output it to the Netbeans console but when I try to print it out to the Text area, it doesn't want to show. It display the "Current Student Listing: \n" but that's it. Nothing from the return statement in the method. 
In future, please provide *all* your code, not just the parts you think are relevant. Without exactly your code, effort is required to make your code run (only ewd himself can diagnose every problem from source code!), plus I can't really be sure of exactly what your code is doing. Your code works for me, [once I have added imports and a tiny main class](http://pastebin.ca/1956532). 
&gt; No anonymous methods or lambda expressions, though you can achieve essentially the same effect (**minus closures** and more verbosely) ... Why do people keep saying that when it's just not true? With being able to reference final fields, java does closures, the only thing it is lacking is a sane syntax for it.
My apologies. I guess I thought I was being efficient but perhaps I was being counter productive. Thanks for your help, I think I've caught onto the problem now and working through it. Thanks again! 
:) Are you a first year CS student?
Actually no, I'm a final year engineering student who decided to learn a bit of object oriented programming as an elective. It's been good. I initially wanted to learn Java because of its cross platform functionality and being a bit of a linux enthusiast I thought it might be somewhat useful to learn. Update: I found out what was wrong with my code. Sorry I wasn't clear about this but the info going into the studentListing array list was being inserted from another class. However, it turns out when I was calling the method to append it to my JText area, the arraylist would reset itself and there wouldn't be any elements in them, hence why it wasn't printing. I declared my arraylist to be static so that it wouldn't reset and it seems to have worked! I don't know if this is good programming practice though...
It's absolutely true. Java's inner class workaround only provides access to final variables, it doesn't offer true lexical scope. Java doesn't have closures.
the difference is just a technicality.. for all practical purposes it's totally the same, just more verbose etc. edit: think of the "final" as an explicitly declared closure scope in this case.
My advice - start coding and do some Googling and reading when you get stuck. Transitioning from c# to Java is easy. Once you figure out the minor differences in the language, you can pretty well find the Java equivalent for any of the .NET classes. As for Android, check out the SDK documentation. It's a very nice SDK. http://developer.android.com/guide/appendix/api-levels.html
Whoohoo! Multiple inheritance is good again! [This comment courtesy of Del. Hi, Del!]
It is not good practice. Try to solve the real problem instead of working around it.
This is a good read to see the differences with C# vs Java: http://www.25hoursaday.com/CsharpVsJava.html You can also look at MonoDroid: http://www.monodroid.net that is currently still in Beta. Goodluck! Btw guys, Java isn't so bad.
What are some uses for this client? Screen scraping type applications?
I've been trying to get into it. I find the documentation to be lacking.
ups for "Effective Java", i continually reference that book. in fact it's sitting here right beside my desk. learning the language syntax is one thing, EJ will help with understanding some best practices and give insight into how java works.
To implement something like that you would write: static int abs (int num) { // this is where you calculate the absolute value } NB: You can't have a method on it's own, it must be in a class. In case it's the syntax that's confusing: **static** means that class doesn't have to be instantiated in order for the method to be called. If you put this method in a class called "Math" you would call it like this: Math.abs(-3) instead of like this Math math = new Math(); math.abs(); [More on "static" here](http://www.ensta.fr/~diam/java/online/notes-java/flow/methods/50static-methods.html) **int** is the return type. This means your method has to return an integer value. **abs** is the name of the method. You use this to call it. **(int num)** is the method parameter. This is the value you pass into the method. This method accepts one parameter named "num" that has to be an integer value. Methods can, and often do, have more than one parameter. [Here's some more info on methods](http://download.oracle.com/javase/tutorial/java/javaOO/methods.html) Does this help at all?
Yes, thank you.
So with Apache Ivy and other projects, what Maven alternative, ideally something that avoids the ugly complex xml config files which characterize Maven, are people liking these days?
So you want to use java to drive a browser? I'm not sure it's going to be the best tool for the job. Have you thought about using testing tools such as selenium/web driver?
Apache HttpClient libraries have done all the hard work for you.
Maybe I should clarify, I don't want to drive a browser and I don't want to rely on API calls. Doing some research I've found that the Java Robot class can do things like send keystrokes, move the mouse and send mouse clicks, find pixels etc. As a Proof of Concept application I want to use Java and Swing(with swing's built in browser component) to monitor a trend on twitter and retweet it whenever a new, matching tweet is made. Because I'll constantly be monitoring for potentially viral trends I would quickly run out of my api limit per hour which is why I am attempting to bypass the need for api calls completely.
Every time I google something and end up on your page and see a fucking fly buzzing around a moose I know at that moment nothing good will come of whatever posts are there. Please shutter this scourge of the internet.
http://www.reddit.com/r/video/comments/clue5/java_4_ever_trailer/
I mean, no offence, but we all saw that video three month ago.
Seriously people, has anyone EVER gotten any good information from javaranch?
JMS. ActiveMq
No, but there are APIs for mail (JavaMail, Apache Commons Email) and APIs for batch jobs (Quartz, Spring Batch). Google those. And, of course, do the inserts/updates with your persistence API of choice.
5 firsts: "The parallel language, developed by researchers at UPCRC Illinois, is the first to guarantee deterministic semantics without run-time checks for general-purpose, object-oriented programs. It's also the first language to use compile-time type checking for parallel operations on arrays of references ("pointers") to objects, and the first language to use regions and effects for flexible, nested data structures. And if that's not enough, the yet-to-be-released experimental versions promise even more. Such as the first language to guarantee deterministic use of object-oriented parallel frameworks. Or even the first language to allow safe mixing of deterministic and non-deterministic code -- which greatly simplifies reasoning about such software." I believe statements 1 and 4 only - and those are the only ones that mention object-orientation. I am reasonably sure that the others have been done, most likely in Haskell, but also in Ocaml and others.
What does JMS/ActiveMQ have to do with *email*?
¿Qué?
I assumed that the part for sending mail itself was in fact quite obvious (using Commons Email as RedditMan74 pointed out). The jms hint was to help poster to avoid redevelopping a crappy home made jms . Store mail send requests in a table, mark mail status as sent when it is sent, retry 3 times, inform in case of failure, and so on, are out of the box jms capabilities which are perfectly appropriate for this kind of stuff. As additionnal bonus point, the investment spent in learning JMS and an implementation such as ActiveMq will probably not be lost as it is something quite useful.
I see where you're going with that, but JMS/ActiveMQ is just a messaging layer. The error handling will still have to be present on the comsumer and producer ends of the channel, and specify retries, etc. So JMS really is only adding complexity, unless I'm missing something completely. I agree though, investing the time learning JMS/ActiveMQ would not be lost. I use it frequently and see the value in understanding the technology and implementations.
You'll have indeed to perform a minimal error handling to make the distinction between the fatal SMTP exception (wrong email adress, ...) and the exceptions worth retrying. That being said, number of retries, behaviour for dead letter queue, persistence and so on will be provided with by ActiveMq without any coding. ActiveMq integration with tomcat is pretty straightforward, but I agree that, assuming no prior jms experience, the entry cost is far from neglictible. That being said, it's really worth it, cause once you have the framework, the number of potential usages is really huge.
http://poi.apache.org/ 
If you just need to work with Excel files, you can use JExcel http://jexcelapi.sourceforge.net which I find easier to implement. However, if you need something more powerful, try POI as maddmike suggested.
This might work better since I only need excell.
Depends what you want to do, and with which formats, I have ended up having to use a combo of poi and Aspose (which is closed source) since a lot of the functionality of poi is incomplete. If you are just trying to extract and index data with the xml based formats it is normally easier to just unpack the zip and parse the selected xml you need directly.
What do you mean by Canadian address fields? You can parse out a postal code with a regex, but without knowing what your input string looks like its hard to know what you mean. You wouldn't be cheating on your homework, would you?
I thought I read about a Google webservices API to read/write office documents (App Engine) but can't find it.
well of course..no one needs apache anymore and this will benefit them better financially..
No, cheating on work. :) Doing research actually. Looking for a parsing code that would allow a user to input a freeform Canadian address and have it parsed out into its components. Requirements are kinda vague... I'm looking to see what is out there and what can be done in terms of just how freeform it can be (are some srots of delimiters like commas or newlines required, for example). I know about regular expressions, I don't want to reinvent the wheel if there is some code out there that can be used or at least modified.
What does Open Office use?
Mmm... thats a great question.
Spoiler alert: I thought this might have actually gone somewhere, but the author concludes: &gt;the language best placed to be the Next Big JVM Language is Java
I'll second that. I use Java simply because I like Java, there is a lot of community support for it, and it's been very versatile as a language as far as platforms supported and types of applications I can "easily" create with it. I've programmed in Assembly, FORTRAN, C, C++, Lisp, Basic, VB, Tcl/Tk, *sh, PHP, Python. I just enjoy Java like I enjoy a great pair of shoes that I am comfortable wearing anywhere.
hmmm.. you can't really parse anything unless you know the basic form its arriving in. There's good libraries for parsing xml if it comes in that way, but if you just have one long string you'll just have to hope that the fields are separated by a unique marker (a tilde, a newline, a colon or some such) then you can explode into an array with String's split method, but this won't handle things like the optional second address line. Also provinces (if the user is allowed to enter them) can be a problem - On, On., Ont, Ont. Ontario etc, and that's if they are correctly spelled. If the data doesn't exist already its far easier to design a form(web or swing) with predefined and validated fields.
[Javadoc of its sole Class](http://developer.amd.com/zones/java/doc/com/amd/aparapi/Kernel.html)
Will this be available for nVidia cards? It kinda sucks to see such a cool and extremely useful API be locked down to ATi.
I would think so, since it uses [OpenCL](http://en.wikipedia.org/wiki/OpenCL).
Right, but it seems to be backed by AMD, who bought ATi. It seems to require some ATi-specified "Streamer" stuff.
Interesting. I didn't get far enough into it to notice that. It would be a shame, since I'd love to use this with an Nvidia card.
Also, I hate ATi. It's not their cards; they are good, but the software (drivers + their awful control panels) make me want to vomit. And I hate the ATi red color. And the logo. That Ruby clip was awesome, though.
It's really heartening to hear the increased usage numbers of Netbeans. It's a really well-designed IDE. 
Maven
Thanks, a couple questions: Can Maven be configured to run nightly and to start from scratch, meaning check the source out of SVN, compile everything, create a clean database with scripts, run the JUnit tests, send email on success or failure ... that sort of thing? Thanks again.
You're probably looking for something like Hudson, which can use Maven to do exactly that (and much more). http://hudson-ci.org/
+1 on hudson. I've worked with a bunch of similar systems but hudson is the one I choose for my own projects.
Does Aparapi work with non-AMD graphics cards? The alpha release does not work with non-AMD graphics cards. Our alpha test matrix focused on testing against AMD’s Stream SDK and as such we currently only look for AMD GPU devices. We intend to enable Aparapi to use any OpenCL distribution in the future. (http://developer.amd.com/zones/java/aparapi/pages/FAQs.aspx)
Maybe not what you're looking for, but I would suggest contributing to a project that you actually use -- maybe a specific feature/bug fix that you need. Navigating a big open source project (or trying to get attention on a tiny one) can make you lose interest quickly if you have no motivation other than to work on an open source project.
What ever you end up doing... start off by finding/fixing bugs... and work your way up to code changes. Don't expect that an open source project is going to start taking wholesale code changes. 
My suggestion: scratch your own itch and develop on anything you find useful and interesting :)
You could use Google Code's search feature to look for projects you might not have heard of that could be of interest to you.
You may want to check out [openhatch](http://openhatch.org/)
Join the Firefox project and when a URL is highlighted and right-clicked, add "go to URL" to the options menu. j/k... it's not a java project. :) but I'd love the feature. 
I think the article rather says, "out of PDF and Java, Java is the most attacked". And I'm sure theres another software package which is still attacked most... :P
&gt; had well surpassed the total number of Adobe-related exploits we monitored That "we monitored" part doesn't sit well with me
Lucene and Solr are popular and widely used searchengines. Often there is a question, which one to choose? This article explains about this detail. 
Yep Microsoft, you are showing us that definitively Java platform is more popular than .Net if we take the same principle as Windows is more popular than Linux because there are more attention from Malware developers. :D
&gt;So, if the antimalware people can see it, why aren't they talking about it? Well, looking at the numbers, Java exploits (and most exploits for that matter) are very low-volume in comparison to the volume of common malware families like Zbot (a family for which we added detection in MSRT just last week). Sounds like Microsoft is covering up all the Zbot attacks while riding on the back of the recent attention the adobe exploits to put down Java.
Did you just trick me into reading an advertisement for MSE? 
Well it is more popular..it had quite a bit of a head start I'm sure even Microsoft is aware of that. And also as we know...more popular isn't always better. You're blind if you think java is better than C#, and I say this as a Java programmer as my primary profession.
Shocked? These people need to grow up, what did they think was going to happen? 
I guess IBM was not open enough about their intentions.
"The software has never lived up to many of the promises that Sun made about it. Chances are it can be uninstalled from most desktop machines and the user won't even notice." Brilliant advice....... *sigh*
I know this might look like "spam", but I really think this would be a Good Thing (TM). I've been following Bob's work since some time already (Guice, JSR 330), and he is awesome. Sadly, I cannot vote for him, since I am not a JCP member... I thought I'd help by advertising his candidature.
Cue annual 'Java is Dead' article frenzy.
Can you make it easier to configure so if you aren't connected to a network it doesn't crap out.
Wicket.
If oracle step in and provide a good implementation it could be positive. Apple literally dragged their feet with java.
&gt; If oracle step in and provide a good implementation it could be positive. Only *if*. Besides nobody but Apple can implement a decent OS X Look and Feel for Java. Just compare Mac OS X and Windows look and feels...
I think this is another sign that Apple no longer wants to be in the computer business and is instead becoming an information appliance company.
Any developer who has followed Apple for a few years knows this means they have completely lost interest in Java and it will disappear from the OS in the future. Funny given the number of Java devs who use Macs. It would be nice if Oracle stepped in and provided an implementation. I'm not sure that will happen though. Apple has truly sucked at keeping parity with releases. 
&gt; Funny given the number of Java devs who use Macs. Not so funny if you are one of them :-/ Looks like my next laptop will be an Ubuntu box...
&gt; Apple literally dragged their feet with java. No.
It would be nicer if Oracle stepped in and acquired Apple. :)) But, well, they can't...
I don't think so. They have just opened the app store for Mac. But, you know, back in late 90's and early 00's Apple needed to do something to attract customers to its platform. Hence they *needed* to bundle Java with OS X. Now they are rich and no longer threatened. Hence they stab us Java developers in the back and drop Java support because it ain't gonna hurt them.
Well, it's time we deprecate our Macs then and move on to better platforms. 
I know right? Complete waste of money too. Do you have any idea how hard it is to find shoes in Apple's size? They really need to be careful about wearing out those shoe soles. Not to mention how freaking hard it is to buff out corporation sized scuff marks.
How hard is it to compile a binary with only the libraries you use? (I mean, a native (Universal or not) binary executable). EDIT: thanks for downvoting my question
http://www.macworld.com/article/133225/2008/04/javase6.html
You wouldn't like that a bit...
iOSX is coming.. When iOSX Liger is released, you'll have to jailbreak to install Transmission. =)
hakkon's complaint is about the use of the word literally. Can you show me an image of apple's feet? How can they literally drag them?
I know... but I was referring to the fact that in the past few years when Oracle has been unable to beat the competition they have acquired the competitors... ;-)
Maybe they literally dragged their figurative feet!... somehow
Did anyone read the article? I think they are just deprecating their own Java port ("[..] the version of Java that is ported by Apple, and that ships with Mac OS X, is deprecated") but they show on the exact same page how to use OpenJDK. So big win for everyone since the Apple port was way behind anyway?
That's how I read this, as well. I would imagine that if Apple deprecated all versions of java, then this would be much bigger news. 
AFAIK, many of the Google Java engineers, like those on the GWT team, use Macs. Hopefully the OpenJDK plays nicely with their projects!
&gt;&gt; and is instead becoming an information appliance company. &gt; They have just opened the app store for Mac. kind of proved his point ;-)
Impossible. You'd basically need to replicate every single change Apple has made to the standard Java implementation to get it to cooperate with OS X. That's work for an entire group at a company, being paid to work on it week in and week out.
## 
They're deprecating their own JVM; it's not like they're forbidding the use of Java or something. Disappointing, though; I've always felt that Mac OS X's Java support was superior to Windows'.
I would not be surprised at all. I'm sure this is going to be an incremental lock in.
Face
AFAIK, OpenJDK isn't exactly supported on OSX atm.
... yes they are deprecating an older version of java in favor of a newer/different version..... Did you even fucking read it before posting? Or did you read it and then realise that "Apple deprecates Java" sounds like a much better headline than "Apple updates java!"
If OpenJDK is an improvement over Apple's old version, that's pretty sorry. I'm all for the concept of OpenJDK, and I suppose from a runtime standpoint it's ok, but it really isn't as good as the real JDK.
If Apple actually called it Liger and put Napoleon's drawing of it on the box, I'd buy it.
More integrated, maybe, but not superior. They've consistently lagged behind other operating systems on both security and feature updates. In fact, I think I remember having to upgrade to OS X 10.4 just to get Java 5. On Windows or Linux you can just download new versions of Java as they're released, you don't have to wait for your OS vendor to get its act together on each new release, or stay on the paid OS upgrade train just to get the most recent JRE (and for comparison: heck, Microsoft even backported .NET 4 to XP...) Anyway, I mostly wonder how this will affect the Clojure developers... it's about as Mac-centric a crowd as the Ruby community, but Clojure lives on the JRE. Incidentally, so much for that MacBook Pro I was planning on buying; looks like I'm sticking with Windows for Clojure development.
**As of the release of Java for Mac OS X 10.6 Update 3, the version of Java that is ported by Apple, and that ships with Mac OS X, is deprecated.**
From the Mac App Store guidelines: &gt;2.24 &gt; Apps that use deprecated or optionally installed technologies (e.g., Java, Rosetta) will be rejected
Yes, well... I was discarding OS level integration. Something more like using wxWindows or GTK (suckage I know), or something of the sort (I realise it's not the same, but still).
..... in other words they finally accepted that their port sucks and they think their users are better off using OpenJDK. 
Well, I don't want to just give you the answers, so what do you know about interfaces/inheritance? what is similar between them? what do you use an interface for? what do you use inheritance for?
Well this is the problem, this project is for the first ever java class, so my knowledge is about 0. Basically what I know is that Inheritance is like a superclass for an unlimited number of subclasses. It passes on a few characteristics or behaviors to each subclass. "An interface is a group of related methods with empty bodies." I don't understand how can I compare them. PS: I have no experience in programing, I'm more on the sysadmin side of IT.
Sorry to be this way, but you need to pick up a book and read. The explanation you find in a reasonable intro to OO will be much deeper and better than something that people are going to type into a fairly low traffic web forum
At least give me a general idea of a difference, I don't want somebody to do my project, but help me get the overview.
Well there is a good place to start: an interface is pretty much what its name says - it provides a definition of the interface you can use to interact with that object, but it does not actually provide any behavior, the method bodies are empty. A superclass, on the other hand, can provide default behavior that can then be overridden by the inheriting class. Think about how this relates to the fact that you can implement multiple interfaces, but only inherit from one superclass. Why is that?
What "real" JDK? All current builds towards JDK7 are generated from OpenJDK sources. There were/are? some classes in current that could not be released under GPL but this has been sorted out already AFAIK :-) oh and happy birthday!
Don't know about that, but is Python supported on OSX? I mean you can just install the interpreter yourself just like you can install the JDK yourself. That may be inconvenient for some but there is http://landonf.bikemonkey.org/static/soylatte/ - maybe that helps? That way you get an up to date version of the JDK at least, not Java5 &gt;_&gt; I really think that this is no big deal. Users on Windows/Linux are already used to install the JDK manually (or maybe with their package manager) and all application developers take that into account. The integration into OSX was superior before because you could just click on any .jar and it would run like java -jar &lt;asdf&gt;.jar but there are start scripts for that which are often used/needed anyway to setup classpath, set VM arguments, etc..
Doesn't that prove that OS X is still going to be developed by Apple? Also doesn't it mean that Apple is still going to produce computers for that OS? Does that mean that they still want to be in the computer business? ;-)
Superclasses are so that you can share common elements between objects that are conceptually similar. Imagine you had some type of car: the Rover 25. If you made an improved model, a Rover 25i, you might inherit the characteristics from the earlier car. Interfaces are guarantees that a class has certain characteristics, but there is no sharing of actual information between classes. You might use inheritance if you were taking some work that had originally been done and extending it to account for some new usage. You might use interfaces if you were creating a large number of classes that were interchangable in some respect (they all had an object.add() method, for example). A good book to read about exactly what kind of OO techniques you should think about is Object Orientated Software Construction by Bertrand Meyer. It's expensive, but it's probably in the library somewhere near you. The modern view of OO is to avoid inheritance and prefer non-sharing types of characteristic sharing.
Where is the mention of OpenJDK? Are you referring to the section about where to put a 3rd party VM? 
Thanx, I got the picture now!
Translation: I am still keeping you all in the dark by giving valueless answers. Jobs didn't know that Sun is supplying Java for all other platforms in the past 15 years or so?
I figured that was the reason for it. OSX Java has always laged behind other platforms. There are those who say that the ugliness of most Java UIs is to blame; I prefer to think that Apple doesn't want to do something that the Java folk are more than happy to do, better, themselves.
No man, I'm sure he was completely fucking unaware of that. And what is being kept in the dark? They announced that they will be ending further development on their JVM. What other info do you need?
I guess you could say at least they waited until java had a custodian who could afford to take it on?
That's the main reason I went back to Ant, was the ability to do an off line Dev install.
And in the other corner, Android embraces Java and its developers. Gosh, I wonder which platform they will develop for in the future?
A few bullet points on a blog full of advertising and seo? No thanks
Pretty straight forward, isn't it? :P
Does this mean that Oracle is going to provide a Mac OS X JVM instead? That would be great! (IMHO). Otherwise, I, for one, welcome our new SoyLatte overlords.
That myth has been repeated so often that it is now considered absolute truth. You can't tell that an application is a Java application on OS X at all by simply looking at it. It looks just like native application. You can however discover it's not native by feel. Start typing in a text box and you discover it does not support normal Cocoa keyboard shortcuts etc. But it still looks perfectly native.
Not very likely. Why would Oracle do it? There is no money to be made for them by doing it. They have to do it for Windows because it's a major platform. If JDK were not available for Windows, Java's success would never have happened. OS X is still marginal and no one really cares about it. Google most certainly won't do it. Google and Apple are now competitors and not exactly friends. Why would Google increase the value of competitor's platform by making JDK/tools and more software available for it (dev tools are enabling technology and because of Java's portability, instantly thousands of software titles become available if JRE is available). That would be really silly thing for Google to do. Yes, Google has some employees using Mac OS X to do Android development, but rest assured, they are already installing Linux on their Macs, as we speak :D.
Am I the only one who thinks that didn't make any sense?
except there are things in the sunicle jdk that are not available in openjdk because of their proprietary nature. I've seen products that just plainly don't support openjdk too. Even one as popular as atlassian's confluence for instance
&gt; Not very likely. Why would Oracle do it? There is no money to be made for them by doing it. They have to do it for Windows because it's a major platform. If JDK were not available for Windows, Java's success would never have happened. If there is no money to be made, then why did they do it *at all*? Zero multiplied by (large number of Windows installs) is still zero. &gt; OS X is still marginal and no one really cares about it. This is frankly ridiculous. OS X is the #2 desktop operating system in the world, by a large margin. It is also the OS of choice used by a significant percentage of Java developers (the majority, if the conferences I have been to are indicative of the general population). If Oracle cares about the continuation of Java they will at the very least dedicate resources to maintaining and improving SoyLatte. &gt; Google most certainly won't do it. Google and Apple are now competitors and not exactly friends. Google does not make a desktop JVM, for any platform. Android is written in Java-the-language, but it runs Dalvik for its VM. Google is irrelevant to this discussion.
Sun failed to monetize java, that's why it got bought for cheap by Oracle. Oracle has a lot of investment in Java, so they bought it. I don't think Oracle cares as much about it being available on other platforms as much as Sun did, since Sun had to make sure Java succeeds. OS X is distant number 2, and anyone (me included) that currently uses Mac OS X to develop java server side solutions that are deployed on other platforms, will be switching to other OSes, like Linux. Developers already have a solution, move to better platform that supports the tools you use to make a living. Mac OS X users on the other hand are left dry by their vendor. But most are clueless about technology (that's why they use Mac to begin with) so they don't care about any of this. 
Or just use http://www.miglayout.com/ which mostly totally rocks.
I've had issues in the past, but as you say, those inconsistencies have been resolved, so perhaps it's time to give it another try. 
You can even be connected to a network, but the servers could be down or anything. Maven is the only developer app that I have seen that really requires some server.
Nope. I had to read several paragraphs into it before it seemed to match it's title at all. I kept thinking, *"Ok. So when do we get to the bit where Jobs explains why he's ditching Java on Apple?"*
Sorry, midlayout has the same inherent problem as GridBaglayout: both mix code and layout. Miglayout may be a bit easier to handle, but what you actually want is to specify the component placement, using a layout language, not messing around with configuration settings. Here's the basic problem: Jane from requirement analysis tells me that the customer expects a dialog window with the following controls: * JButton saveButton * JButton cancelButton * JList listView * JTree treeView * JCheckBox iMeanIt Bob from human interface design then tells me that these widgets have to be laid out in a specific way. With Miglayout, we three end up by Jane handing over some uncompilable pseudo code, Bob producing some mockup screenshots and me cleaning all the mess up. With table2gridbag, Jane just starts a HTML document, listing the required widgets informally. Bob then takes that file and adds the logical layout in terms of a table. When I get the thing, I only need to convert it to Java and that's it. The three of us not only save a lot of time, but also hit two birds with one rock as the specification of the dialog is self documenting.
That guy is an imbecile. I vaguely agree with him that some way to restrict against null variables would be good (for performance), but what's with the banning primitives, arrays, static, overloading, and generics? Is he a troll? GRRR!
I don't see what the big deal is if Apple stops building their own Java VM. In fact, it might be better if they don't. Microsoft doesn't build their own Java VM, I go to Sun's website and download it. On the one hand, I always liked that every Mac had Java installed, but on the other hand they're always a version behind -- I was forever waiting for Java 5 from Apple, ended up having to write all my Java 5 code on a Windows box. Currently I can download Java from Sun's website for Windows and Linux. As long as they provide a download for Mac OS X too, I'll be fine. If the argument is that not having Java on every Mac will affect popularity of Java desktop apps and Applets? Well, that ship sailed years ago. Client java, for all intents and purposes, does not exist. Mac Java programmers will just have to ensure their users have a VM installed the way Windows programmers do.
Cry Baby.
Jobs is wrong: Always a release behind? So you get rid of the entire system? Or not support it? Why not work with the vendor (Oracle) and try to provide better release schedule to work between Apple and Oracle. Gosling is wrong: Sure IBM provides a system and HP. But their developers implemented their runtimes and Java platform for particular systems. Does that mean Apple has the resources to implement their own Java runtime or their particular systems? I have a question. I am assuming Java has always tried to be cross platform. Will a download from Oracle for Java work on the Mac?
Nope. I think Gosling needs something else to do; like either support and work on OpenJDK or just start something new. I kinda keep hoping he'll go off and create the next big thing incorporating all his lessons learned from Java, but I'm probably just fantasizing.
Java. RIP.
In fact, they speed up the updating process: 1.6.0_22 is available as default update, well done.
&gt; upgrade to 1.6.0_22
&gt; Miglayout may be a bit easier to handle No, it is awesomely more powerful *and* easier to handle (once you've spent a few hours learning the basics). &gt; I only need to convert it to Java and that's it I don't believe that for a second. You most likely need to modify the code, if only to add callbacks. Also, what happens when requirements change? The HTML has to be edited (might not be so simple when you need to move huge blocks around), you have to re-generate and merge your changes. Do you do that for every single bug that will be logged by the testers? By the way, does your tool handle the placement of Ok / Cancel buttons depending on the currently running OS, does it give you shortcuts to size your buttons according to the OS defaults, does it allow you to express sizes and placements relative to other elements? :)
&gt; I don't believe that for a second. You most likely need to modify the code, if only to add callbacks. I believe that you are dissing something, you have not bothered to even look at! &gt; Also, what happens when requirements change? The HTML has to be edited (might not be so simple when you need to move huge blocks around), you have to re-generate and merge your changes. Would you like to tell me that, if your requirements change, Miglayout magically adopts them without you having to reconfigure anything? &gt; By the way, does your tool handle the placement of Ok / Cancel buttons depending on the currently running OS, does it give you shortcuts to size your buttons according to the OS defaults, does it allow you to express sizes and placements relative to other elements? :) Miglayout just grew more horrible in my opinion. Automatic handling of OK/Cancel buttons by the layoutmanager? Not only does it mix code and layout, but also functionality as well? Furthermore, the idea that you should have shortcuts to size your components according to OS defaults runs contrary to the whole point of having a layoutmanger. You use these things because you *don't* want to care about sizing components. They should just be as big as they need to be to display their content and it's the layoutmanagers job to construct a window around that. 
Except that Sun pretty much had to have JVM for Windows for the language to succeed, since Windows is the most popular OS out there. OS X on the other hand is complete niche that Apple wants to turn into an appliance in the near future, so there is no incentive to make JVM for it by anyone else. 
&gt; I believe that you are dissing something, you have not bothered to even look at! I had looked at the page, and was careful to write "most likely" because I hadn't tried it. I have tried it now, and it is exactly as I thought. Also, the names found in the table cells are used as-is in the Java code, and the tool has quite a few limitations (does not support empty cells or nested tables, are requires you to edit the code when you need asymmetric spacing/padding between cells). Besides, when you ask for a full class to be generated, you get code that uses introspection, which might not work in applets. &gt; Automatic handling of OK/Cancel buttons by the layoutmanager? Not only does it mix code and layout, but also functionality as well? You're misunderstanding. Some OS, when faced with an Ok/Cancel button pair, require the Ok button to be on the left, on the Cancel button on the right (or vice-versa) (and sometimes taking into account the Right-To-Left-Writing setting in the OS). MigLayout handles that, so that you app can be both portable and respectful of the OS requirements. &gt; They should just be as big as they need to be to display their content and it's the layoutmanagers job to construct a window around that. The layout manager's job is to *layout* elements, which means determine their placement *and* their size. It is *not* to make all of them "as small as can be". Especially in the case of buttons, where most OS have preferred sizes, if only so that the very common Ok/Cancel buttons have the same size. And yes, I use a LayoutManager so that I *don't* care about sizing components, and MigLayout helps me do that with buttons.
&gt; I have tried it now, and it is exactly as I thought. Also, the names found in the table cells are used as-is in the Java code, and the tool has quite a few limitations (does not support empty cells or nested tables, are requires you to edit the code when you need asymmetric spacing/padding between cells). Well, I cannot possibly see, how you'd want to layout components without somehow referencing them in the layout language, so I don't understand your critique about having the component names in the table cells. Also, empty cells are supported. The tool simply autocreates an empty container for them. You are right about nested tables. Having them would be a bliss, but you can work around that. As for introspection: Thats just for convenience. If you actually do applets (who does anymore?), just pass all of your components to the constructor. Since this is a pure AWT solution, you even save some bandwidth by not having to bundle Miglayout with your applet. Asymmetric spacing, padding, etc. is [also supported](http://www.onyxbits.de/content/specifying-layout-using-xhtml) (see: style tag). &gt; You're misunderstanding. Some OS, when faced with an Ok/Cancel button pair, require the Ok button to be on the left, on the Cancel button on the right (or vice-versa) (and sometimes taking into account the Right-To-Left-Writing setting in the OS). &gt; MigLayout handles that, so that you app can be both portable and respectful of the OS requirements. I fully understood that. I just disagree on this being the job of the layoutmanager. Nevertheless, I don't see, why I should not be able to specify view-windows.html and view-macos.html and use the correct one appropriately. 
File associations are fucked up, I guess. I the end, you need to invoke the java runtime installed with a "-jar" option followed by the jar &gt; c:\path\to\java\bin\java -jar c:\path\to\jar\the.jar
I have no doubt that Oracle will release a Mac OS X port of Java. It's likely not that different from the Linux version internally, and with a little help from Apple handing things over, it should be seemless. Yes, Windows is the most popular OS among the masses, but Mac is still a strong platform. Among developers I'd guess Mac is at about 40%. Just go to a programming conference, there's Macs everywhere.
I *love* this database. It's footprint is small, has great tools, and is easy to use. I wish more java tools were as much of a pleasure to work with as h2. I actually contributed $50 of my own money to him because I enjoy working with it that much. If you have never check it out, I really recommend you give it a shot.
Obviously, you don't use or program on Mac OS X. I do, and Linux and Mac OS X are quite different. OS X is closer to BSD, but not quite the same. Also, Oracle's core business is databases, and they are not exactly agile even when it comes to their core business. Did you ever submit a bug report to them (a serious one)? Usual response is wait 3 years and MAYBE we will fix it. Also, a lot of good Sun engineers including the creator of Java, have left Sun/Oracle after Oracle bought Sun. This does not look that good for Java's future on the Mac. Besides, OS X is totally marginal platform for them, even when it comes to their database, it's not present in the server market space at all, and it's fairly irrelevant in the desktop space as well. Macs make good developer's machines, but it seems Apple won't stop until they kill the notion of general computer and make everyone use restricted appliances.
No he's just stating long overdue facts. He would be a crybaby if he started whining bout Oracle not being fair to the "community" etc etc.
Now that I reread the error message, he is not complaining about a class missing ( nor -jar option), but about not being able to find a main-class. Are the jars really, totally the same on both computers? Is the non-working one missing a declaration in META-INF, is it missing the Main class for some reason? 
I'm looking for community software too, but I've never really used anything. My problem is anything with a commenting system that's lesser than reddit leaves me cold.
http://en.wikipedia.org/wiki/List_of_content_management_systems#Java
so, i have a lot of experience with opencms. used it on several large projects. the key to a successful opencms implementation is to completely decouple it from the actual web site. opencms should not serve the actual content. instead we used it strictly to manage content/assets. we wrote a custom publisher (aka "action class") that published content to a database where our own MVC framework (on a completely different set of servers) then mapped URL's to "pages" managed by opencms. it worked really well. the content editors really liked opencms in that we could create our own custom page types (via "structured content types") so they could easily manage all manner of pages and the overall structure of the site without ever having to ask us to do anything. we would just gather the requirements for the different site sections, implement it in XML schema, write a custom JSP "preview template" and poof, done. we actually extended it so that the users could make their own custom forms and "micro apps" we also wrote our own workflow management system for opencms, where a workflow was defined using simple javascript (and then hooked it into opencms via rhino) -- someday might actually "publish" it, because it was pretty helpful. well, i hoped that helps a little. if you have any other concerns, just let me know. oh, and opencms is NOT the answer to every cms need :) it like all "enterprise" cms's can drive you absolutely insane too. 
I had a horrible experience with a custom Hippo installation from a vendor so would avoid it. Liferay seems to be more of a Portal not a enterprise CMS.
if you want something like that, you'll need to build it yourself ;)
still looking for alternatives for google app engine, http://www.vosao.org/ is all I've found so far =(
I can comment on Alfresco. Don't use it. Alfresco's main product is a document management system, and they tacked on a CMS called the "WCM". It's very unfriendly to work with. They can't seem to make up their minds on how to publish content (official method is always changing). Same with preview. Localization is also a nightmare. 
I know, I did actually, but I didn't finish. I have it up on google app-spot.
This is exactly the kind of feedback I was looking for! I played with OpenCms for a couple hours and had a lot of questions about it. Appreciate the passing along of your recommendations and experiences with it!
Interesting, thanks.
Thx for the reply, but i got it fixed. I didn't set the 'countries' attribute in my servlet :p
I have implemented several large sites using [Magnolia](http://www.magnolia-cms.com/) and consider it the best Java open source CMS currently available for both content managers and developers. Integration with other Java technology is pretty easy (KonaKart, Spring, etc.), the source code is good and the community small (At least in the US) but growing.
Yeah, I guess all 80 developers in my workshop who work on company issued MacBook Pros are "super-hip." What a jackass. EDIT: I just found/submitted a more insightful article on this subject, along with a good reason to decouple desktop java from the backend stuff. http://www.subfurther.com/blog/?p=1305
I hate how people keep saying "apple is deprecating java", theyre just discontinueing development of their own version of the virtual machine. thats fucking it.
This is *by far* the smartest response I have seen so far. None of Gosling's incoherence, none of the general "OMG how dare they" I've seen all over the place. Just a simple, straightforward explanation as to why things are the way they are, and ways to get out of it. Client-side Java really is a huge drain on the libraries. If Oracle -- should they ever bother to even freaking comment on the issue, of course -- has any sense they will realize that AWT/Swing are dinosaurs, deprecate them, and remove their requirement for certification.
Cool! I really like the looks of this one and will definitely check it out. Thanks!!
You should ask, what are your experiences with jmonkey 3? It includes shaders now, have anyone tested it?
There are good points, but I have some nitpicks, &gt; a creative FSF lawyer could use to claim that Mac OS X links against the GPL’ed OpenJDK and must therefore itself be GPL’ed. This sounds like some of that GPL fear-mongering. If a company is found in violation of the GPL by linking there are *two* ways to get to compliance: release the linked libraries as GPL *or* simply stop distributing the infringing code. If you come into compliance within a reasonable timeframe (usually measured in years), the risk of lawsuit from a GPL licensor is practically nil. Second, the GPL has a[n exception for linking against system libraries](http://www.gnu.org/licenses/gpl-faq.html#GPLIncompatibleLibs) anyway. &gt;When you assert that you will never be their customer again, you remove any reason the company would have to listen to your opinion. Really, this much should be common sense, right? The author didn't think this one through. They also want to listen to the opinions of people that are *almost* their customers, like the people who stop becoming customers in response to what they see as a poor business decision. &gt;Linux (where many distros turned up their noses at un-free Java for years) That's like accusing vegetarians of turning up their noses at a hamburger. Edit: Oh yeah, and peterkirn (comment #15) in the comments on that page makes a good point: OpenJDK already does what the author is talking about. 
The java foreach is just syntactic sugar for simple cases. If you need something more complex, just use an ordinary for loop. *edited for spelling*
Yes I suppose this would be the way to go. Just tossing up some food for thought here.
you can make a proposal to the jcp. jdk 7 and jdk 8 are now full, but it could be studied for Java 2025 Edition
You seriously need to try scala. For loops are more expressive in the language, and on average, you can buzzsaw your code size in half. For a List, your loop would be something like var myList: List[E] = ... var myFilteredList: List[E] = myList.filter { some function using "_" to represent the current list entry }; It used to be that Scala collections were all up in the air, but Odersky et al have really made the collections in Scala quite elegant, there's even a small pdf that gives you a cheat sheet of the functions available. It's worth a look: http://scala-lang.org
DEAR JAVA COMMUNITY, YOU'VE BEEN ASSIMILATED BY BORGACLE. PLEASE GO ELSEWHERE. THNXBYE
I like when people say "Get a clue". I find they're usually right, and this guy is too.
Um...fine, but would you mind explaining why?
I don't remember what this post was about. I'm an asshole and it's my birthday. Check out my comment history and you'll see that this alt account has being going for a year. Also, I once did a poo so big that it took 3 flushes to get down. That's almost as bad as that puppy I had to flush a few weeks back - he only took two. The puppy was grand and everything, but I left it in the oven for 10 minutes too long and it burnt. Oh no... wait... no that was poo that time too. I tried eating it anyways but it was crusty and hard... well done if you will. My poo was ruined and so was my day. I... I cried all night. HAPPY MOTHA FUCKING BIRFDAY ME!
It looks nice, especially if the condition could use the element. Syntactic sugar like this that makes code easier to read is always welcome.
Yeah that's what I was going for. I came up with the idea while coding my Npc Manager class. I wanted something like: for(Civilian c : civvies, c.x &gt; p.x &amp;&amp; c.x &lt; p.x+10) So I could easily only update and draw the Npcs near the player.
It's not easy but there are several Model Driven Architecture ([MDA](http://www.omg.org/mda/)) tools you can use. The easiest open-source tool is [Andromda](http://www.andromda.org/index.php). The most comprehensive tool is the Eclipse Modeling Framework ([EMF](http://www.eclipse.org/modeling/emf/)) but doesn't have as many complete templates so you must write your own.
Thanks for the links, but I guess ideally I'm looking for a component that I can just drop in and allow users to draw flowcharts. You suggestions look far more complicated than that. And they also appear to be Eclipse based. I would ideally want a Swing based solution so I could run it as an Applet. Thanks.
It's probably not 100% what you're looking for, but Gliffy is the closest thing that I have seen and I'll mention it because it *might* do what you need: http://www.gliffy.com/developer/ 
Sorry about that... looks like I misread your question completely. There's probably some great flowchart components out there.. I'm just not too familiar with them. Here's a couple of basic ones but you can do much better: [J-Painter](http://www.izhuk.com/painter/) or [diagram editor](http://diagrameditor.com/) [aPaint](http://www.berthou.com/us/2007/12/01/adraw-drawing-applet/) I'd also look into DHTML and Flash as well. 
Says the former oracle and IBM manager leading a foundation spun off from and still significantly funded and staffed by IBM.
This post is more appropriate for [Stack Overflow](http://stackoverflow.com). Besides, you'll probably get better help over there.
Oh, so the condition is a filter, not an end statement like in an ordinary loop. An end statement would also be nice, e.g. if you want to find an element with a certain property. So they are both interesting.
Well I suppose my example could be called filterfor, and the enhanced for could use an end statement, but it's not too much different from just nesting if/else statements in a regular for loop I guess.
This is ridiculous.
This is really starting to look like SCO vs. IBM all over again. 
So basically, all the interface definitions are identical.
Wait, that's what's supposed to happen, right? And Oracle is just making a big deal out of it for no reason?
Wasn't Java open source? Aren't there several distinct implementations which, I assume, also copy verbatim 99.9% of class and method definitions? Or am I not getting something here?
Java would just do much better without an owner. If Linux can thrive on its own, Java could as well, even more.
Time to short ORCL
There's presumably a part that isn't open source. That's my guess, anyway.
I hope groklaw covers it!
Oracle is the one pouring the gas all over it.
stop hitting yourself
1. Its programmed to be cpu intensive 2. Yes 3. Yes
thanks :)
A follow-up question: Do you know of a library for Java to use the graphics cards instead of the cpu?
https://jogl.dev.java.net/
Cool. Thanks.
Minecraft is pretty intensive for such a simple-looking game. My video card fan will often go to full blast when I'm playing it and the game will freeze every so often when it needs to allocate more space (or something). I'm running it at 60fps on binary NVidia drivers that suck worse than the older ones (my screensaver is jumpy now). IMO, Java is a horrible choice to program a game in due to various resource management issues, but it seems to work ok for Minecraft. I've only noticed the sound will die midway through a game, which will prevent the program from terminating when I want it to. Restarting Alsa and PulseAudio have no effect, only a game restart fixes it.
I've been nerding out on webdesign recently and a lot of other technology related activities like building computers, hackintoshing and so on. I was thinking of learning a coding language, one that may be helpful for free time creative pursuits like creating a game, but also useful in a media environment. What are your thoughts on a language to start looking into?
Seriously? Just download eclipse.
The typical language has been C++ because it's fast and has some great libraries. Sadly, I'm not an expert in C++, but I've been meaning to learn it. Android has some great game applications and a fairly easy programming environment if you're looking to jump into the mobile market. You could also use C# or GTK#, which are very similar to Java and can be just as fast. Monodevelop is a wonderful environment for GTK# (which also runs on Windows), and it's soon to come out with an Android plugin (currently in Alpha).
If you want a fully featured Java game-engine, check out http://jmonkeyengine.org
Java is a fine language to choose to program a game in. It's caught up a lot in recent years and there are quite a few good engines for Java available.
I've heard that C++ is good. Is it cross-platform? (not essential, just curious) I don't know anything about the other codes you mentioned so I'll definitely look into those. I play so many computer games that I think learning a coding language would be similar to studying filmmaking just to understand and appreciate the process that goes into making a great film. But, with the advantage that its a skill I can use without too much equipment.
C++ can be compiled for different platforms, but the code is usually built for a specific platform. For instance, in Windows you would want to use DirectX for advanced games, but Linux uses OpenGL. You could also use OpenGL for Windows, but it's not as fast. There are other libraries that are Windows specific. This is why you hear about companies "porting" a game to Linux. They need to find these libraries and change them to the open source counterparts. The best thing to do is build for Linux and compile for Windows later (IMO).
There's also [lwjgl](http://lwjgl.org/) which Minecraft uses. So Minecraft does in fact use OpenGL -- and it's not really slow because of java, but because the nearly infinite worlds of minecraft, despite all chunking tricks, are not easily rendered and real-time-light-shined etc.
For a game that looks like Minecraft it can just barely run on my netbook.
Since you have had some tech experience C++ might be a good choice, but almost everyone I know that starts out with C++ before learning an easier language gets disenchanted with the idea of coding. If I were you I'd start with Python, Ruby, or even Java before C++.
skooma714 is your username taken from Morrowind?
Since I'm probably going to self teach, i definitely don't want to get disenchanted. I don't mind taking a big bite, I think my worries are (in no particular order) 1. picking a language that is usable for new media/journalism jobs and making games. Versatility is important. 2. Has a really solid community of helpful coders. 3. Resembles lego more than it resembles math. (I just think in terms of construction better than I do in terms of formulas. I can handle both though)
It sounds like Java might be a good choice for you. It has a very large community of coders that can help you out and is also quite a bit easier to learn than C++.
I didn't really see the potential of java until I played Minecraft. Its made me very interested in the code, which I've only ever used to enhance a website menus or images.
Yep :)
c# and XNA
I think Oracle should kill java and design their own language called Orlang.
Dude, I got so hooked on Morrowind. Better than Oblivion imho. [This article may drag you back into the game](http://thinkpadius.com/content/returning-to-morrowind) If so, I apologize/you can thank me later.
You may actually want to go with Python for the language and PyGame for the game library (for 2D games anyway). If you're totally new to programming, then I wouldn't attempt a 3D game until you've finished at least a 2D one. If you MUST get into 3D right away, then you're probably best off starting with a mod to an existing 3D game that you like. So, you could mod Unreal for instance, or mod Half-Life 2. Any of those are outstanding options.
Minecraft isn't CPU intensive, its GPU intensive. This mainly due to the timing loop used in the game and not really a Java issue. Starcraft 2 has similar issues.
Oh interesting notion. Modding has always been a pretty fun activity. Especially for Morrowind. I don't mind making a 2D game, especially in the process of learning how to code.
huh, I thought it was the other way around. Interesting.
In 1999 I read on slashdot that Java is slow, an opinion I immediately adopted and now refuse to change!
I get frame rate stutters on my gtx285 during the switch from night to day and during the initial world generation. It would seem strange that a relatively new GPU would even encounter a stutter on a game like Minecraft. Is there something I'm not considering?
Fuck, look at Dwarf Fortress. I have an i7 920 with 8 gigs of memory and that fucking game with *text graphics* hits a whopping 13 frames per second.
Sadly, this makes more sense than their current (mis)behavior. 
That's interesting. I actually understood what you were talking about. Does that imply that there is lot of unnecessary visual information loaded into the the system that you don't need? Does it also mean that having higher resolution blocks would cause a greater degree of stutter and more frame rate issues? Where would the impact be felt if one were to change the textures of the game to a higher resolution?
As someone who has coded for it before, J2ME is a load of crap and needs to die, so I'm glad that dumbphones are phasing it out. RIM and Google both realized they had to add everything back in for their handsets.
Ugh ugh and ugh. If you don't know C++ well, at least have the self restraint to accept that you might not be the best person to give recommendations to people.
Learning a programming language will teach you little to nothing about what goes into creating a modern videogame. Look at the credits for a modern video game, especially where an engine is not being created: the majority of contributors are artists.
You probably used JavaScript and not Java I suppose.
Fair point, I enjoy being creative when it comes to web design, and I futz around with drawing and image manipulation on photoshop / paintDOTnet using my tablet. My sister is also a genius artist, so perhaps I could recruit her too. But in the end I need to know how to put it all together and I presume that requires a coding language. If I'm going to direct the creation of my own game, then I want to be able to have a hand in all aspects of the building process.
I didn't give specific instructions to use any language, only recommendations. Please understand that when people want ideas they appreciate these kinds of responses. Since you're such an expert, would you be so kind as to provide a response to this person? If not, then you need to shut the hell up and let the adults talk.
oh yes. Shows what I know, I guess they're not the same thing really.
Yeah, I'm definitely going to be looking into that.
If you want to learn a language under your own steam, the best criteria are: 1. Immediate utility * Conceptual simplicity * Ease of learning * Availability of libraries * Community size On this basis, Python is a good language to learn with. Many skills you learn while learning mainstream programming languages are transferable; learning Python well will put you in a good position to tackle other languages later. Ignore all the sexy arguments about speed, utility for videogame engines, ability to write viruses, etc. You will be programming alone and non-professionally for the foreseeable future, and these things will be far out of your reach. I teach novice programmers (undergraduate students) as part of my day job. We don't do Python for various reasons (Haskell, Java, C and a little Perl) but I absolutely advise it if you are learning alone and without the kind of support an undergraduate program provides. Mark Lutz has an excellent book out with O'Reilly called Learning Python. It is pedagogically excellent.
Check out CUDA, if you have an Nvidia card. They have a Java library.
I cannot advise you about anything to do with art. I'm sorry to tell you this but the creation of a serious videogame is not a realistic (but, sadly, a common) aim of a person who has not yet learnt to program.
It was exactly those recommendations that I objected to, idiot. As someone who knows C++ and Android very well, I can assure you that they are a terrible first choice for a beginner. Controversially, my advice was based on **actual** **personal** **experience** of the programming languages involved and even on experience of teaching people to program.
I don't disagree with you. That's partly why I'm looking for a good language that is coincidentally useful in the fields of new media journalism (online content mostly) or something related to web design. I enjoy web design a lot and I've created some fun websites using drupal. They're not making me rich though. The most beneficial result from those set of skills came from creating a client/case management database for the small civil rights law firm where I work. We didn't want to pay for the expensive legal software to improve efficiency and management, so I made our own using Drupal and heavily modified CiviCRM. It was fun and its been a useful program. Ideally, a coding language I learn would be useful in more than one way.
Then write your goddamn objections out instead of being some douchebag just saying "ugh ugh and ugh. You don't know what you're talking about!" This is a matter of conversation style. When I provide helpful hints on programming direction and you disagree, then the best option is to provide your own opinion in a thought out way, and to point out the reasons why my suggestion may be misleading. Your last statement starts to do just that. You state that your advice (which wasn't advice but more a knock at my intelligence) was based on personal experience. Mine was as well. As someone educated in Java, I know that it's a difficult language to learn and it's a dying language due to recent corporate purchases. I've always found C# to be easier to work with, and C++ is relatively easy to follow. Many of my friends knew C++ before entering any CS program in school, which must make it an easy language to follow. The amount of resources online also makes C++ a strong language for learning. While your opinion is welcome, you immediate shutdown of my recommendations without evidence against them is not. Please be more civil when making comments.
I don't have any numbers to back it up, but I suspect Minecraft's seemingly slow performance is due to its use of [voxels](http://en.wikipedia.org/wiki/Voxel) to represent... well, pretty much everything. It's a tradeoff for being able to display an insane number of blocks without stuff popping in and loss of detail; I don't think it really has anything to do with Java. But correct me if I'm wrong, [IANAVGD](http://www.reddit.com/r/java/comments/dy8vm/question_is_java_always_so_cpu_intensive_or_is_it/ "I Am Not A Video Game Developer").
Thank you for this information. That really is a good breakdown of why I should pick Python. Coming from the Prof's perspective too I can see that you've probably experienced several people say "ooh I want to make video games" etc etc. And then watch as the disillusionment (and resulting lack of effort) sets in. I'm a tinkerer at heart and a scrounger in general, so I'm good at finding specific information to fill my needs (particularly in web design) without knowing the whole breadth of knowledge associated with a field. I'd like to have the range of knowledge this time, so I can be more creative and gain a marketable-scratch that-useful skill.
[TAIL] "that acronym is ludicrous"
Yeah, also notch is a brilliant guy, but he is still only one guy and I don't know how many graphics optimization techniques he knows, so I doubt minecraft is implemented as well as it could be. 
If it is doing more math than required wouldn't you call the inefficient? Or is it doing more math than required to show the *rendered* blocks, but enough math to calculate their positions for when they need to be rendered? And if so, it presumably only needs to do those calculations once per chunk load, correct? 
That's some pretty intense ostrich logic. And thanks for explaining with the words like that.
And, if you have an ATI card, check out [Aparapi](http://developer.amd.com/zones/java/aparapi/Pages/default.aspx), a parallel API. It basically allows you to write Java code and run it on either your GPU (by mapping the bytecode to OpenCL) or in a thread pool. If you're more comfortable with (or like to try) OpenCL you should have a look at [jocl](http://www.jocl.org/). 
Java is to Javascript as ham is to hamster.
squeek!
Holy Moses Batman!
No no, I wasn't being sarcastic - I genuinely was glad for the way you explained it. But I was also joking that the whole process is based on the ostrich sticking its head into the sand when it sees enemies. The thinking is "if he can't see it, it doesn't exist." anyway, I'm sure it only got funnier when I explained it :P
JME3 is released with shaders and opengl support :)
or Ardor3D.
java isn't really slower than other languages, the main thing it has against it is the longer startup time because it needs to start the virtual machine. Once the game is running, if theres any "sludginess" it's either poor programming or simply a resource intensive game.
yea this whole article was a load of crap
Link to the actual article, ugh. Blogspam.
http://googlewebtoolkit.blogspot.com/2010/10/announcing-final-release-of-gwt-21.html
I'm not a professor :)
No no, my advice is later down in this thread. I seriously don't have the time to explain to you why you should not be advising people to learn languages you have no experience of. Java isn't a dying language just because Oracle are being obstinate. Sun were obstinate and difficult for the vast majority of Java's history going way back to 1996. C# has a far, far more difficult owner and still manages to be popular. C++ has many, many problems that are well known and discussed. Google for them.
Oracle is a company from the future, send by Microsoft to destroy Java.
Please use PMs for such conversations. (Click on the username, then click on the "send message" link in the top-right area of the user page, right under the user's karma stats.)
Run PHP applications within any J2EE server or servlet engine and/or connect script engines like PHP with Java back ends efficiently. 
Wow what a fucking waste of my time! Was there a point to this?!
Good post. I am a server side Java developer, and I do dislike Swing. I'll certainly look into it again after reading this.
If you use the netbeans designer (which is awesome now), and make sure to keep the business/control code out of your components (to keep them nicely re-editable), swing is definetely bearable.
Stillborn.
I've recently developed an applet for a client, which was quite a learning experience (it had been years I hadn't touched the technology, and that was school work mostly). A few notes in addition to the article: * If you don't like the auto-generated code produced by GUI builders, [MigLayout](http://www.miglayout.com/) is an awesome layout manager for the programmer that cares (it's the [#3 RFE in Java](http://bugs.sun.com/bugdatabase/top25_rfes.do)). Mostly it can do all what other layout managers do (except being driven by a GUI builder I guess), with *plenty* of nice extra (such as sizing and swapping the Ok/Cancel buttons at run time according to the OS your app runs on, in order to better integrate with the native OS L&amp;F), all in a small Jar (75 KB for the Swing version). In the most basic usage, you lay components in the spirit of HTML (from left to right, and adding linebreaks and skips as needed), but there are many ways to do exactly what you want. There's a learning curve, but nothing too bad. It has become the [official layout manager of Jajuk](http://jajuk.info/index.php/Developer_Guide#Layout_Manager) for example. * Try [Astah](http://astah.change-vision.com/en/index.html) if you want to see a real nice and quite lightweight and yet quite complex Swing application (and a really excellent UML modeler). The community edition is rather complete and free of traps (and ok for commercial use, except you might badly want some of the features of the commercial editions, such as support, documentation, code import/export, and the ability to split the model in several files, in order to work cooperatively with other designers). * Be sure to fully understand the [EDT](http://en.wikipedia.org/wiki/Event_dispatching_thread). The first three bullet points in the [Jajuk threading conventions](http://jajuk.info/index.php/Developer_Guide#GUI_threading_conventions) apply to all Swing projects. Most graphical glitches in Swing apps are caused by mis-usage of the EDT. * Beware of applets, there are several bugs in browsers that nobody wants to fix and that have been there for *years* (I'm looking at you Mozilla/Firefox). Also, you will encounter security limits. You might well prefer using JNLP/Java Web Start, unless you really *have* to interact with or be part of a web site.
Is Java Dead? YEP. FTFY
Google's recently-purchased WindowBuilder Pro Eclipse (RCP!) plugin is now available for free and can generate MigLayout code: http://code.google.com/javadevtools/wbpro/index.html Its output is not as... idiomatic(?) as I'd like, but it beats dealing with hacked up GroupLayout code. FWIW MigLayout+WindowBuilder has been a great compromise between the IDE-phobic and mouse jockey coders on my team.
I've been trying to download that plugin for months. It always says "our product is not available, stay tuned"... :( edit: hmm, it appears the update site on the install page is down, and the correct one is: http://dl.google.com/eclipse/inst/d2wbpro/latest/3.6 
I really like netbeans designer, I was unhappy to learn that theyre going to stop work on it as it doesnt fit oracles agenda to make netbeans a lightweight mini-ide.
The best thing I learned from reading this is that there are so many look&amp;feels available. Thanks for the article.
Swing was never that alive to begin with.
Desktop apps are certainly in decline but if you need a cross-platform app, Swing is still the best option. What else would you use?
AWT or SWT, depending on which form of masochism you're into.
GTK+, QT?
Aggregator spam. Why not link directly to the blog post rather than your own dzone post?
Maven makes me miss CPAN sometimes. What I am looking for is a quick command line tool for looking up artifacts as per some search expression and then drilling down until I have few enough hits and print out the dependency coordinates and possibly the repository spec.
&gt; Desktop apps are certainly in decline I know it's a fashionable thing to say but... in fact, it's not true at all. Internet has replaced nothing on my desktop. Apart from my mail client perhaps (I use gmail, but I still rely on thunderbird for backuping...)
I can't say I use it much, and I make no claims of none-suckyness, but [mvnrepository.com](http://mvnrepository.com/) does the job for "what's the mvn artifact for library X" type situations (at least for me). Something command line based as you describe does sound useful though.
I use Firefox.... and poke through the pomfiles by hand. Wait, that's a terrible idea... yet I do it ... every ... single ... time. 
Hm, a Maven thread. Maybe someone could tell me about it. Is useful? Maybe it's more than a brain-hemorrhage of XML? I have encountered it while trying out Lift the Scala web-framework. It's not a pleasant experience. (Trying out Symfony 2 was a bit easier, git clone git://github.com/... versus some arcane mvn commands that I had to guess based on some outdated wiki page. And the semi-persistent Scala wonder wasn't even faster :c Scala seems such a nice language, why did the Lift folks made it horrendously Javaish? Also sorry for hijacking this textbox with off-topic ramblings.)
Maven is useful, kinda. It's useful if: * You want to create a new project with heaps of dependencies; * You don't mind having to follow their archaic folder and plugin structure, in return getting a standard website layout etc; * You want to keep all of your project dependencies up-to-date, even if this means rewriting broken code; * You don't mind having to figure out documentation and plugins for yourself; * And you're happy to hire someone exclusively to deal with Maven in your project, because it's almost a full-time job in medium-to-large projects. Sadly I don't know of a better dependency-resolver-updater project, other than using Ant and keeping your dependencies up-to-date yourself.
I kind of like the dependency management via some SCM/VCS, you just check out the branch you want into a directory, and check for updates every few days (with cron, for example), if you want to migrate to a new version, just change to/checkout a new branch and in your code make the required changes to be able to interface with the new API. Sure, this can't handle documentation or automatic dependency resolution, but even large projects start small, so it's not like you have to figure out all dependencies overnight. Or maybe I'm just not too keen on the idea of some command-line tool doing who-knows-what dictated by cryptic XML files :)
Wrote my own, run's allot faster and uses allot less memory....
for Lift, you absolutely should be using sbt. See http://www.assembla.com/wiki/show/liftweb/Using_SBT for more explanation. &gt; Scala seems such a nice language, why did the Lift folks made it horrendously Javaish? You might want to check out [scalatra](http://www.scalatra.org/), which is fairly opposite of scalatra-Clean but very simple, no fancy ajax/comet support etc.
Thanks! At that time the sbt way was closed (probably just lack of documentation), but I'll give it a try.
http://repository.sonatype.org. It's running Nexus, which has a REST API that you could query from the command line?
I wasn't really asking about people's opinions about Maven. You can take it for granted that everyone who has half a brain feels unease when using a piece of software that is as crap as Maven. What I was interested in was if anyone has actually focused on adding a plugin that makes things LESS complex for once.
Dude, use m2eclipse. Not command line, but the search tool is great.
I generally use http://mvnrepository.com for looking up artifacts that I need. Generally though if the artifact isn't in one of a few standard ones then I put it into my own personal one that I use...
Yeah, maven is rough, but let me remind you that it actually pioneered the sane dependency management and build conventions in Java land. Also [this](http://www.wakaleo.com/blog/283-what-has-maven-ever-done-for-us) is a must-see. If you want something prettier - use gradle.
SWT with JFace and Eclipse RCP is actually pretty good.
We use Nexus which has good search features on paper, but that don't work so well in practice. For instance, they have the ability to search by keyword, group/artifact/version, and several others. But when searching it often returns either zero results or too many results. Thanks to an unfortunate design/implementation decision, if your query returns more than 100 results the tool returns a message of 'Too Many Results Found' instead returning the first 100 and paginating through the rest. So while it's not unusable, and the visualized browsing features are nice, the searching is not as good as the feature list would suggest. Has anyone used Artifactory? How does that stack up?
Generics rock.
minecrafts calls out to opengl are very cpu expensive. 
I came here to post the exact opposite of this.
Really? May I pick your brain as to why?
tl;dr: the combination of two simple things may be complicated.
You're both right!
The fact they don't persist until runtime in Java, and are more of a compile-time aid is a bit meh.
I disagree. How would you use a runtime-persistent generics? Unless you have a need for significant reflection, compile-time generics are great to ensure your compiled code is much more robust. In all my years of Java, I've never had the need for runtime generics.
Java generics were added as an afterthought to not change the compiled .class code so that older JVMs could still run with these things. Turns out that thanks to this type erasure, Java generics can be subverted at runtime (typically using reflection). Heavy / advanced use of them can lead to @supresswarnings declarations peppered throughout your code which isn't good for readability. C# generics have better runtime performance as Java has to do a lot of casting and things under the hood. [This](http://www.jprl.com/Blog/archive/development/2007/Aug-31.html) and [this](http://www.artima.com/intv/generics2.html) are good resources which will explain more. I personally think they didn't go far enough and implement them as well as they could have done.
Java generics being an "afterthought" is by far a completely irrelevant point of argument, please please stop using it. Your tl;dr is basically, arrays are harder to use. Ok, granted, there is a language with with slightly better generics, doesn't make Java generics not rock.
Why is it irrelevant? In this thread I (me, personally, this is my opinion here as a Java developer) talking about why I think they are 'meh' and not as good as they could have been. I never said they sucked; my explanation is the post above, I can repeat it for you if you like. A tl;dr of it is not 'arrays are harder to use'.
I'm glad you asked. It is irrelevant because the means by which a feature is attained does not speak directly for the actual merits or faults of the feature. If Java got generics correct, and say better than C#, than would you still use the "afterthought" argument against it? You're already mentioning the faults of Java's generics, coincidentally they are an afterthought, but that argument does not give greater weight to the faults themselves. The faults and merits of a feature should be evaluated based solely on their effects as feature, not by how they were attained.
You're divorcing the word from the context. It being an afterthought carries weight and implications, in that it's a compile-time decoration rather than the properly backwards-incompatible change that would be needed to work without the caveats listed above. It being an afterthought meant they could not (and did not, in order not to fragment their user base) want to break backwards compatibility.
when looking at repository managers I got a bad gut feeling when looking at Nexus. think I dodged a bullet there when i chose not to install and use it. anyone capable of designing search that badly should not be programming.
Did you check out the live demo of artifactory? http://repo.jfrog.org/artifactory/webapp/home.html 
Maven can be described as "the right idea implemented by the wrong people". There are design and implementation fuckups at almost every level. Some examples (from different abstraction levels): - braindead design decision: unnecessary "normalization" that attempts to decouple repositories from dependencies. the canonical source of an artifact belongs in the dependency declaration -- not in a disjoint repository declaration. this is why Maven has such a braindead resolution algorithm that results in stupid and potentially dangerous behavior when resolving artifacts. (don't get me started on what a massive clusterfuck this turns into for transitive dependencies). - maven has perhaps one of the worst built in help commands I have seen. it involves a *lot* of typing, it is irregular and i rarely see people actually using it. which isn't too strange: it is entirely useless. - given that dependency structures are at the core of Maven, locating dependencies is not really part of the Maven command line experience. which is odd since the Maven designers should have learned from what the Perl designers solved 15 years ago. (For christ's sake: the CPAN shell even had tab completion when browsing artifacts more than a decade ago) - the output is abundant, noisy and largely useless. early sloppiness has bred a culture of sloppiness and today nobody gives a hoot. it can sometimes take you hours of studying *lots* of output from mvn to figure out where something goes wrong. the default for any plugin should be to SHUT UP if there is nothing to report. much of this is because Maven has attracted lots of people who are unaware of the fact that they are bad programmers and/or bad designers. these people have also missed the most important lesson in the open source world: "*nobody* cares if it works for you".
the dependency management can only be labeled as "sane" if you have really trivial requirements. as soon as you have to add custom repositories to a build you start to see how incredibly naive and dangerously stupid the dependency management is. it "kinda works", which is a large part of the problem: no incentive to fix it.
why would I want to use a third rate IDE just to search for artifacts?
I use SWT, but with RCP, so I don't know how much help I can be. Though I will say that you can use as much or as little of RCP as you'd like, and I see no reason why you couldn't use it based on what you've said. Except for automated builds, those are a bitch with RCP.
I'm using Artifactory already
Oh god, you're one of *those* guys who will fight and argue to the death in the face of logic and reason just to be seen right. Ok, you're right, whatever.
'Cause it solves the problem you have?
Can you expand on that automated builds point?
I made an effort to make use of Eclipse last year. I gave myself four weeks and avoided using any of the tools I usually used. It was quite possibly the most miserable I have been in years. (In fact, I go through this exercise every 3 years or so because I think I should give IDE's a new chance every now and then). It wasn't so much any one big thing as all the lack of attention to detail. The small things. For instance, you would think that GUI developers would pride themselves on getting the visually oriented features right. Good default font selection, good support for color-schemes with at least a handful of decent themes for dark/light background etc. They didn't. Just getting the fonts set up properly and fiddling creating a reasonably comfortable theme for someone who prefers a dark background takes a couple of days. Not least because you have to figure out what color combinations you have grown accustomed to and then make sure you configure these consistently in the gazillion or so settings you have to change. (Sure, you can download other people's color schemes, but I was unable to find any that were not sloppily made). *(And if you think selecting fonts is just a simple matter of choosing a font, it isn't. In particular not if you need it in a different color scheme than you are used to. I've spent a lot of time choosing what fonts and font rendering parameters I want in my usual setup so these things matter to me. The last time I did a big revamp of colors, fonts, window layouts and desktop layouts was some time in the late 1990s. I try to keep the diff from system defaults as small as possible to make it easy to get new machines adapted to my preferences. Most things are just a matter of adding a few keybindings and copying color, window and font settings from my repository. I also have a defined place for all the tools I usually use. Desktop 1 is for commuicating, Desktop 2 is for two side-by-side browsers, Desktop 3 is split in two with a stack of terminal windows on the left and an editor on the right etc. I can get to *any* of the usual applications I run in an average of about 1.5 keypresses)* Then there are the plugins. I happened to do some WS-related development at the time. I don't particularly like Web Services because I think most of the frameworks and tools are too brittle, too slow and most of the underlying code is just too damn ugly to debug. But I digress. The WS-related plugins I tried to make use of just made things a lot worse. You have to learn their quirks to use them and to be honest: it is faster and easier to just do a lot of the stuff without the plugins. At least that results in less time spent debugging the tools that should help you and come up with workarounds for the quirks. There were other things as well. The documentation browser is infuriatingly inadequate and what little it does manage to cram into your UI, it renders so visually unappealing that I found myself wasting even more time jumping to a browser and find what I wanted to look at there. The documentation integration I have in Emacs (which sends commands to my browser) is faster, looks a lot better and is more convenient for me. Correctly formatting the code was also something that ended up being slower than I was used to. In fact, any sort of editing that wasn't making use of the refactoring tools was painfully slow compared to, say, Emacs. I made a conscious effort to look for ways to speed up editing and make the editor do what I needed but it generally isn't very good at editing text efficiently (have an experienced VIM or Emacs user show you effective text editing some time -- experienced VIM/Emacs users usually have a sizeable bag of tricks that does things much faster than you thought). The editing shortcomings are the hardest to articulate and describe since text editing is such a complex task. Also it is something that, over time, people do without thinking. Everyone has their little strategies for doing this. I also tried to observe experienced Eclipse users and I noticed that even though they use keyboard shortcuts to a varying degree, most still use the mouse a lot more than I am inclined to. My way of writing code involves moving between a lot of source files, occasionally displaying things in a browser and switching between desktops and windows. For almost all workflows I barely touch the mouse and I have lots of tricks for minimizing typing. Navigation and switching is usually so fast that pair programming would be hard for the guy watching my screen. And, of course, I have a small set of customizations that do useful things like switch between files that are related in some way (for instance: "toggle between a class and its unit tests") I wanted to use Eclipse for 3 reasons: - refactoring support and automation of really dull things like making beans - make use of plugins to automate tedious tasks - be able to write my own plugins in Java While the refactoring and some of the code generation features were indeed nice, they didn't make up for the lost productivity due to the clumsiness of the interaction with the editor and the exceptionally low quality of many of the plugins that I tried to make use of. Overall, I can't seem to do things quickly in Eclipse. It could be argued that I would be able to pick up more speed if I kept at it for longer (8 weeks? 20? a year?). I am already a relatively slow and meticulous programmer -- I really don't need tools that get in the way of rapid editing when inspiration/insight/caffeine kicks in. So no, using a piece of shit software that will slow me down just because it has [insert feature] that doesn't balance out all the other drawbacks isn't really an option.
No, not really. I've been arguing the same point(s) throughout and you seem to have issue with the fact I've referred to it as an afterthought rather than actually addressing the list of issues I've detailed above. What logic have you given against those? What reason? 'Arrays are harder' doesn't fit the bill. I was actually looking forward to reading your response and the discussion, but yeah whatever.
I don't know how I got here. 
Sure. There just isn't a straightforward way to build an RCP app using the common continuous integration tools that are out there. I'm close to finishing a setup with hudson and buckminster, but it requires a lot of painful configuration that is nowhere near self-sustenance. The main problem is that the app must be built within the context of an eclipse platform - it can't just be done with a JDK on its own. So part of your build would be to define a target platform. Also, if you wish to run PDE tests as a part of your build (these are just junit tests that have dependencies on RCP) you need to do so within the context of your entire application, after the full build step. So as you can see it's a far cry from telling a CI setup "here's my src folder, here's my junit folder, go to town" like you can with a less restrictive app framework. But if you just want to build your product from the eclipse IDE, it's as simple as pressing a button.
I do do all my building from Eclipse... but I use Ant, and make it a point of pride that anyone can build just by hitting the ant script in a terminal rather than needing Eclipse. I think I'll pass on RCP. I might try out some other books and try hitting SWT again, maybe it'll click this time.
You can do everything I just described with ant, but it's still not pretty. But yeah, if you don't want to deal with that kind of nonsense (and that is totally reasonable) then RCP might not be for you.
I'm sorry yours wasn't upvoted enough, despite its better title. Have an upvote.
This isn't a plan it is just a continuation of what Oracle has done for years. And BEA did before Oracle bought them.
Depends what you're looking to do, if you want a general high level language I'd recommend Python or PHP. I prefer PHP myself mainly due to the syntax (I like braces). If you're looking for a lower level language that can give you (arguably) more extensibility you should probably go with C or C++. You shouldn't have much trouble learning these since Java is a C derived language and therefore they have almost identical syntax.
I started with Basic, Assembly (6502, Z80, 68000) then got into C which is ok, C++ and MFC was a bit ugly and WTF for me and I just stuck to C with a bit of inline ASM but ugh x86 is kinda nasty. I Finally got into Java and it just instantly made sense and I started getting stuff happening, knocked out the first Chaoslab and wrote a space invaders clone called Javaders. Back in the day when Sun and Microsoft where buddies it even got demonstrated at the MS Dev Days 1996 here in New Zealand (Auckland / Wellington). So yeah at that I point I thought yeah it can do real time graphics and that was when the Microsoft JVM v1.1 definitely kicked Sun's JVM as it had JIT and other things. So I was bitten and still am.... There's been other languages for instance I should just take Perl and TCL off my CV hehehe. My 2 main drivers are.... - Real time graphics and video. - Web development that is quick and practical Now Java's graphics processing is good but the video side is a bit fuzzy - JMF + Fobbs haven't been touched in years (it does work though, e.g. on my i5 it can play 32 videos at once 320x240 resolution and not drop frames) but theres bugs and no 64bit version :-(.... - JavaFX and well what exactly is going on here? Anyone really know? Its probably better to skip JavaFX altogether and just go to GStreamer which the Linux flavor of JavaFX use's anyway. That's my take at this point, would be nice if one language solved my 2 main drivers but I think that might be stretching it.... edit:tidy
Stop spreading panic already. Java won't go anywhere even if Oracle starts selling it's JVM without offering a free version at all. There is already OpenJDK, and if this really happens, I reassure you that either Google or IBM or someone else starts supporting it's own free virtual machine and dev kit.
My 3D game uses JME for the 3D (natch), but someone recommended I move over to Ardor3D. How easy would that be, and is it worth it? I can't really tell how advanced Ardor3D is. Has anyone used both?
Thank You ASF... you have our support.
Hey guys, there was such a great response to our last post about diagramming I thought you would enjoy this one!
All one of you, good job.
no MAC build?!
openjdk has one : http://landonf.bikemonkey.org/code/java/SoyLatte_Meets_OpenJDK.20080819.html :) GET TO WORK
It is a nice gesture... but I don't think Oracle cares at all
...and creates a hundred more
Java or Python I think are fine choices. Java is a pretty great technology, and I think a lot of the Java hate is residual from an era when it was less advanced. Many programmers will be able to get what needs to be done just fine in Java and have no issues. Any performance bottlenecks these days are likely to be the fault of the programmer, not the technology. If you're focused on web development, Java apps are extremely easy to deploy through the web. This is a big reason why I use Java for personal projects, it's really easy to hand your friends a url and just say "check this out," and they usually will; they might not be willing to download or run an installer, however. I don't know as much about Python, but from the documentation I've read it seems like a good place for new programmers to get their feet wet, too. C++ is great, but of you're just starting it can be difficult (and unnecessary) to work with at times. If you get serious enough to need C++'s strength, you'll be able to pick up C++ just fine from a Java background, but you'll still have some things to learn (although much less than if you jumped into C++ from the beginning). Someone here suggested C# and XNA, which is actually a great technology for people getting started with game programming. A lot of things come out of the box with VS that you might need to code yourself in Java. I think the real downside to XNA is the fact you're only going to be able to run on MS software; If you want to make a portable app, XNA will not do. I personally started with TI-BASIC, and moved on to C. This was 15 years ago, however. I think today it's great there are so many different tools available to new programmers.
thank you for that input. People have written a lot on this post and it's become a good resource for me to check back to while I search for books to teach myself. I'm now pretty settled on java or python. I'm having a meeting with someone tomorrow about journalism and new media, so I'm going to use the opportunity to get information on preferred programming languages in that arena. The more versatility I can get from my language the more motivated I will be to continue learning during the dark and difficult parts. :)
git?
I'd say go for git (not fantastically easy, but well documented, with tutorials and tool support). I don't really think there is anything to be gained from going for subversion or anything centralized, if you are about to start learning you might as well learn the most useful stuff. Create one central repository (under a backup regime), get all developers to hold their own repositories on their own laptops. Look into a well defined workflow - there was one published not too long ago, with a good map showing feature branches, release candidate, bugfix branches etc. You may well want to use one of several graphical tools too, like gitk, gitx, gitcola. Make everyone experiment with their own toy repositories. You may even install git achievements, so people get an incentive to learn. (It adds achievements, so maybe when you do a "git rebase" it tells you "Achievement unlocked: you are now a "git engineer"" or something)
I think there are really two questions here. (i) what is an easy to use rcs system, and (ii) what is easy to setup. There are lots of web-interfaces that can help with (ii). You likely want something that is easy to use and is not too expensive. We use assembla, but there are many: codesion, bitbucket, github, etc. As for (i) - the question is a little dependent of what development environment your team is used to. If you use Eclipse - all rcs plugins to Eclipse are equally easy (in my experience).
Try Mercurial. Much easier than Git and supports all major platforms.
Subversion.
Depends on your users, and how development gets done. If it's distributed, with various contributors all over the place, Git might work best for you. Subversion is a more traditional central repository-type system. Subversion is probably the most widely supported, and I would guess has the most support by developer tools like Eclipse, etc. 
Could possibly provide a link for that workflow you recommended? I feel that I have a good grasp of git/revision control practices but the team I am working with seems to have a hard time following them. Maybe a good explanation from another source would be helpful. Thanks!
This looks nice. Thanks for the suggestion.
It's definitely centralized. We have 4 developers right now and we generally code in the same office, though we do some offsite development from time to time.
Are there any web based tools that can interact with git?
you can even get online private repositories with web interface at the likes of github, assembla
http://ondrejcertik.blogspot.com/2010/10/git-has-won.html
seconded. svn is solid easy to use, and has plenty of available clients.
Not sure if this is what you're asking about, but Git comes with gitweb (which [looks like this](http://git.kernel.org/?p=git/warthog9/gitweb.git;a=summary)), and there are a few similar tools like cgit. These are read-only, with the purpose of browsing a repository from a browser. 
I would third it. I actually use a local SVN repo set up in my Dropbox folder. It means my SVN is local on every machine I use for development and that way I don't have to administer a server. I'm sure the op could use this method for a small dev team through a shared folder in dropbox. 
IMO Linus Torvalds will be remembered for two things: git, and Linux. In that order. Git is really, really nice. I've used svn, cvs, Perforce, and MKS. Git is really head and shoulders above the rest of them. 
Git. (No question mark because I is confidence.)
 private String name; public int num=0; //default 0, who cares if it's public, but you can make it private. private ArrayList&lt;Node&gt; children; public Node(String name, Node parent) { this.num = parent.num++; this.name = name; //should this be name+this.num? children = new ArrayList&lt;Node&gt;(); } //overloaded constructor for first node. public Node(String name) { this.name = name; children = new ArrayList&lt;Node&gt;(); } //The children are ArrayLists, but you use LinkedList in the example. // Here I chose AL. public void print(ArrayList&lt;Node&gt; root) { for(int i = 0; i &lt; root.size(); i++) { Node currentNode = root.get(i); System.out.println(currentNode.getName()); //should this be currentNode.getName()+currentNode.num? print(currentNode.getChildren()); //it's recursive! boogie woogie woogie. } }
Personal preference. I'll use git if I need to, but mercurial is my go-to DVCS. Each does something a little different, and each have little bonuses or quirks, but they are both perfectly fine products.
Git. The only disadvantage when it comes to Java development, is that Git support in Eclipse (and other IDEs, I guess. I don't know) is immature. This only means that you will need to go outside of the IDE to use Git, i.e., use the command line.
hg init and you're good to go! (also check the nice tutorial at http://hginit.com)
There's a little up front time you have to spend learning git, but IMHO it's totally worth it. Everything you'd want to do with your code and/or VCS becomes surprisingly easy once you get the hang of it and there really is a lot of good documentation out there. I will also say that the beauty of git is not readily apparent when you first start using it as it feels a little clunky for a VCS, but after a little while it flows and is nearly effortless to use. 
Here is the link: http://nvie.com/posts/a-successful-git-branching-model/ http://www.reddit.com/r/programming/comments/dhipp/a_successful_git_branching_model Apparently he has also create a set of tools to follow this workflow
There seem to be several: https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools Even one delivered with every git installation: gitweb. Gitorious seems to be an alternative if you don't want to host it yourself - there are probably other similar providers.
Joel Spolsky's [Mercurial Tutorial](http://hginit.com/). Easier to grok than git, perhaps not as high performance, but along the same lines.
If you don't already know that you should be using a version control system as soon as you start writing code and you're unable to figure out which system is for you from googling, I have doubts about this start up.
Yes, but the point the article makes is that the personal preferences of the majority give a lot of momentum and that creates a virtuous circle.
The thing is, Adam Messinger did say "It's our intent to have a premium version of the JDK." Then that got twitted. That single sentence, in whatever context, coming from Oracle in a keynote rightfully triggers a massive reaction. If he didn't mean it, he messed up.
It's called a [variable-length argument list](http://www.deitel.com/articles/java_tutorials/20060106/VariableLengthArgumentLists.html).
:rolleyes:
Fourthed. SVN is quick, lightweight and easy. Most IDEs have great tools around them. But it's shining moment is how easily it merges branches. You could also spin up a EC2 machine and use it for SVN and build automation. 
Yeah, this is simple, high-school level recursion, and exactly how it should be done. Also, OP, why use Vectors? Nobody's supposed to do that anymore.
Even if they didn't *mean* a for-pay-premium JDK, Oracle's track record on these things absolutely makes such speculation highly believable.
in general, this is known as a [variadic function](http://www.google.com/search?q=java+variadic+functions)
Aha. I should have guessed, but when I wrote that I was thinking more about what the ... meant (now I know that too (ellipsis)).
Finally some good news.
It seems that reports of Java's demise have been greatly exaggerated
People love to make as if the sky is falling. Other than the horrific lawsuit against Google, only good seems to have come out of Oracle's stewardship so far. OpenJDK development is taking off, there is finally a practical and realistic plan towards both Java 7 and 8, and now Java for Mac will not only be as good or better than before but also free and open. Oracle sucked at talking to the community at first, but now [they seem to improve](http://blogs.oracle.com/java/).
but watch this get _no where near_ the attention of the bad news.
In your example, the *first* argument is not needed: public static int sum(int... numbers) { int sum = 0; for (int i : numbers) { sum += i; } return sum; } "Tricks" like these are just part of the language, so to learn them, read a relevant book I guess. To learn more idiomatics and best practices, I'd recommend [Effective Java](http://www.amazon.com/Effective-Java-2nd-Joshua-Bloch/dp/0321356683)
Git works just fine in IntelliJ IDEA and if you're only doing Java, Scala and/or Clojure development you can use the CE version which is free and open source.
Can it do merges? If so, that is great news!
Thank the Flying Spaghetti Monster! Believe it or not, I was losing some sleep over this. 
Yeah. I found that out. It was just how I saw it the first time. It was in a different context though and I sort of copy pasted and didn't play with it enough before I posted. I now discovered that I can input an array as well like: int[] ns = {1,2,3}; sum(ns); Does it hold for all collections? I have been using Java for quite some time, I just haven't been keeping up with the times since 1.4. (That's the version the last book I got was for. I sometimes stumble upon things like this when I look at other peoples code). Thanks for the book suggestion though. It looks really interesting when I get the time.
&gt;Other than the horrific lawsuit against Google But other than that, how was the play Mrs. Lincoln? 
Seriously? I know we all love Google around here, but has anyone considered the possibility that Oracle's suit against them has merit?
Yes. I think it was determined in an earlier reddit thread that it is likely that Android sources contain decompiled class files.
Sometimes it's a good idea though, if you want to force at least one argument. Otherwise you can call the method with no arguments at all.
One of my favourite tricks that often impresses people: Iterating through an array to remove certain ones. if you do this you'll get an error: List&lt;String&gt; names = ... for (String name : names) { if (name.equals("Steve")) { names.remove(name); // causes error } } So the trick is to do this which works fine ... List&lt;String&gt; names = ... for (String name : new ArrayList&lt;String&gt;(names)) { if (name.equals("Steve")) { names.remove(name); // works fine } } To answer your original question, I once found this on a blog somewhere. Read, search, and do -- that's how we learn.
Good point.
&gt;Does it hold for all collections? No, only for arrays. The variadic argument becomes an array in the method scope.
I would think your first example only fails if the List implementation behind *names* doesn't support the remove operation. And I can't see how the second example makes any difference there.
The "for" in the first example uses an Iterator under the covers, which will suffer from a ConcurrentModificationException if the structure underneath changes during iteration. "remove" causes such a change. The second example creates a new local List, that can suffer from the same problem. However nothing has access to modify it, so you will be okay. The code is modifying the original list and iterating through the copy.
The following code avoids getting a ConcurrentModificationException, and also avoids making a copy of the original list. List&lt;String&gt; list = ... for (Iterator&lt;String&gt; itr = list.iterator(); itr.hasNext();) { if (itr.next().equals("test")) { itr.remove(); } } 
Ramen
if that case has merit we have bigger problems
Usually when something is labeled "deprecated", it's because your intent is to replace it. I see this clear now.
Mac users don't throw away Java yet!!
Out of date, ill-informed, needlessly alarmist title, *and* doesn't deliver on the promise "and what it means for developers".
Apple's server side (I believe) is java based. I guess they can't remove it entirely. They have still made it impossible to write apps for the mac store in java which is what they see as the future.. I'd say they're giving it a temporary reprise because they need it...
I also put the brackets other own line. I find it helps me especially in if clauses (I also indent everything in an IF)
You would really enjoy this book: http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882 
good point
One thing I absolutely hate is when people don't add empty lines to break up their code into smaller logical sections, and each method body just becomes one gigantic block of code. I also add an empty line after the opening brace and before the closing brace of method declarations (even if the method body is a one-liner). I think it nicely separates the method signature and the method body.
Agreed. I think having the opening bracket on it's own line like that makes code far more readable, especially when you're skimming for the right place to make an edit. You're not constantly looking for if/else/etc. keywords and then looking across to check if they apply to more than one line. 
What's your honest prediction on the future of this language of ours? I admit I'm a little concerned. Not immediately, but more 5-7 years down the line.
I'm not really concerned for less than 10 years down the line, and anything after that is a little far away to predict. Right now it's too soon to see if any of these potential threats against it really amount to anything.
I use almost the same style as you but: I prefer to put brackets on their own line. I lead private instance variables with an underscore I use `region` to separate private and public instances when able I couldn't work without substantial commenting and whitespace
5-7 years is a long time. Some of the high school students graduating this year will be doctors in 7 years time and you will be going to them entrusting your life to them. Think about that for a minute. I don't expect everyone to achieve the same amount of personal growth in 5-7 years, esp. if working full time, but you should be able to learn a new language/technology. 
Well, since you asked (I like that you asked)... I don't use "this" to refer to class variables except in constructors or setters when some arguments have the same name. However, I agree with your reason for using it. I used to use "m" in VB but I phased out of it. In PHP you get no choice due to its funny scoping rules -- if you omit "$this-&gt;" by accident it creates a local variable... doh! Always start method names with a verb or "is". It really makes code purpose clearer. There are a couple of exceptions where the method purpose is clear like size() or length(). In Java I use CamelCase in the standard way always. In PHP &amp; C/C++ I use lower_case_with_underscores for variables and functions not on objects, and CamelCase for object-oriented stuff. It's a mix of habits and I'm not always consistent. I always stick the opening brace on the same line. I'll tell you what I hate, this: if (condition) doSomething(); That should always be: if (condition) doSomething(); Or: if (condition) { doSomething(); } I find the first way very confusing to read (because I'm not used to it) and it looks unbalanced. It grinds my goose when you get an expression too long for one line and someone indents the next line by like 30 characters to match up with where the expression or brackets started on the previous line. That doesn't play nicely with the tabs/spaces issue, it takes longer to edit, and it doesn't give you much extra space. I usually lay it out like this: return new ComponentColorModel( ColorSpace.getInstance(ColorSpace.CS_sRGB), new int[] { 8, 8, 8, 8 }, true, false, ColorModel.TRANSLUCENT, DataBuffer.TYPE_BYTE ); See? It's like a block then. But sometimes I just put the ); on the previous line. Here's another odd layout thing I do sometimes when a single loop is inside an if or else block. It looks like weird but... if (condition) { ... } else for (int i = 0; i &lt; n; i++) { ... }
Personally -- unless I'm matching the style when editing someone else's code -- I strictly follow the [official style guide](http://developers.sun.com/sunstudio/products/archive/whitepapers/java-style.pdf) [PDF]. I use [Artistic Style](http://astyle.sourceforge.net/) to help adjust indentation when Emacs doesn't get it quite right, and, when I can, I use [Checkstyle](http://checkstyle.sourceforge.net/) to enforce it. 
Im a total java noob and had this problem today thanks for that!
[Here is web version of code conventions for java](http://www.oracle.com/technetwork/java/codeconvtoc-136057.html).
&gt; I like it better because with code coloring in the IDE, I can easily see at a glance which references refer to the class itself. I What IDE do you use? Eclipse colors class members blue, so there's no need for distracting naming conventions. As for formatting, I use whatever is default in the IDE I'm using (usually Eclipse). I set it up to format whenever I save (ctrl-S) and there is thus no muss or fuss. Doing anything else would require work, effort, and thought about something I couldn't care less about.
My company is actually migrating from CVS to Subversion. We felt that Git was too different from CVS for the greybeards.
I imagine you want to [put the FileWriter into append mode](http://download.oracle.com/javase/6/docs/api/java/io/FileWriter.html). ... @Before public void setup() { listing_out = new BufferedWriter(new FileWriter("test.txt", true)); } ...
That did it, thanks a bunch!
Yeah, I use eclipse, but for some reason, the purple "this" followed by the blue name just looks more defined. I see what you mean, though. Perhaps that was a bad reason to mention. Mostly, it's hard for me to see other people's code outside of Eclipse and tell local from class variables without the "this". Also, in Eclipse, it's nice to type "this" and then have code completion find what I mean on the next character.
As for not viewing in the IDE, I've always been of the theory that if you can't easily tell whether a given variable is a method-local variable or a class instance, then the method is too long :-)
You probably want something like: String myDirName = "c:\\somedir"; And then do FrameSequencer fs = new FrameSequencer(myDirName); for(int i = 0; i &lt; pictureSequence.length; i++) { fs.addFrame(pictureSequence[i]); } Basically, you're making a String object, called "myDirName", and setting it to be equal to "c:\\\somedir". (The double backslashes are because Java uses backslash as an "escape character" to cause the character after the slash to have a special meaning. Like how "\n" turns into a single character, a newline. If you want a real, actual backslash you need to do "\\\", which turns into "\". If this bugs you, you can usually get away with using forward slashes, which don't behave weird. E.g. use "c:/somedir" instead of "c:\\\somedir".) I hate pointlessly verbosely variable names, especially when they're easy to confuse with a class name. Having a class named big-F "FrameSequencer" is fine, but having a variable named little-f "frameSequencer" is just asking for confusion and headache. Makes the code so damn hard to read! So I abbreviated the FrameSequencer variable name to "fs" instead. Which I think is a lot more clear and much easier to read. Best of luck! You should see your prof or TA in office hours if this stuff is confusing you. This is real basic, and I'm very worried about you if you're still struggling with this stuff.
I'm going to interpret the assignment as "The variable, directoryName will be of type String. This variable should be set using a method named setDirectory." You are incorrectly conflating this into one line (String directoryName = setDirectory(); ) when you should 1) declare a variable directoryName of type String and separately 2) write a method with a name of 'setDirectory' 
omg, you are amazing you guys! Our teacher didn't even teach that method yet. Thanks!!!!!! x 10000
 System.getProperty("file.separator") gets you the correct glyph if you're planning on running the app on multiple OSes
&gt; edit: Damnit, reddit scrunches the text up :( Also, 4 spaces before a line saves your indentations and such Like This! :)
Also next time you should post in /r/learnprogramming 
What is the difference between using System.getProperty("file.separator") and import java.io.File; File.separator // direct reference where needed I'm just starting to learn Java and would really like to understand which is the proper way and what reasons stand behind it.
I always just use / ... String myDir = "c:/this/directory"; ... and works on Windows and UNIX just fine. Is this wrong?
I believe the Mac OS X uses ":" as the directory separator. I don't know if Java IO libraries due some checks/replacements in the background but that approach seems fragile as some third party libraries might circumvent such checks with their own calls. Also using native libraries (C/C++ code) might bump into problems if they get this passed to them as an argument. Note that this is just speculation on my part.
not 100% true. git has a large following, but mercurial is also doing well, among the more notable projects using mercurial: Mozilla, OpenJDK, Vim, Xen, googlecode (supports svn as well) the fight is not over :)
http://www.jetbrains.com/idea/features/version_control.html#Git_support
You have the following line: ...fs2.addFrame(pictureSequence[9]); Should that value be hard-coded to "9"? Or should it be "s"?
Woops, yeah it's s. I just forgot to change it back to s after messing with it. But thats not it thanks :(
Thanks Vikas. My motive about the article was make it easy for someone new to REST to be able to understand it quickly. Have you used REST before? Do you have any insights to share? 
ah, remember when everyone was like "dude theyre deprecating java!" and I was like no dude their not deprecating java, theyre just switching things up. Then I got downvoted a bunch of times? Ah yes... I love being right.
The +1 in "redValue = redValue + (((redValue2 - redValue)/(numStages +1))*k);" makes me nervous, because it smells like a [fence-post error](http://en.wikipedia.org/wiki/Off-by-one_error), but it's hard to say without [the contract being documented for your morphStage method](http://en.wikipedia.org/wiki/Design_by_contract). The general advice I'd give you is: Fix one problem at a time. Don't worry about getting your "backwards morph" working until your forwards morph is working 100% The more specific advice I'd give you is: Your design suffers from rounding errors. Trying using floating points rather than integer arithmatic. It's a big topic, so if this is totally a new concept to you, you've got a lot of reading to do. If that's the case, then start by trying to understand the output of this program: public class RoundingDemo { public static void main(String[] args) { integerArithmatic(); floatingPointArithmatic(); } public static void integerArithmatic() { int x = 3, y = 2; int z = x / y * 2; System.out.println(z); } public static void floatingPointArithmatic() { float x = 3, y = 2; float z = x / y * 2; System.out.println(z); } } 
&gt; and works on Windows and UNIX just fine. &gt; Is this wrong? It's "wrong" in the sense that it's not what you're supposed to do. In theory, using one of the library-calls above would mean the code would work on any and all OSes that Java supports, including OSes that don't exist yet, whereas with your method, you could only be confident in it working on the OSes you specifically tested against. For example, if I invented a new OS tomorrow that uses ! as the separator character, and someone (perhaps Oracle, perhaps me) ported the JVM onto my new OS, we'd implement those library calls to return "!" as the path separator. In practice, the likelihood of a new OS with a new path separator being invented is low, so you'd probably better off focusing your bug-hunting attention elsewhere in your programs. ---- Probably better than all of the above is to not use Strings at all to represents file paths, but instead use a class specifically for representing paths, such as java.io.File.
are you trying to say that Eclipse is a great piece of software or do you suffer from a brain injury that causes uncontrollable spasms of the eye?
Neither. I am trying to say that typically someone who starts spouting about using VIM/emacs, text editors and command line as the best way to do anything tend to be very hard to manage, especially on a team where there are multiple levels of developers. I've worked on multiple teams where everyone is using a particular IDE and there's one guy who thinks he is smarter and more productive using his sets of tools always ends up dragging down the overall productivity of the team, mostly from having to push back on repeated religious arguments about best practices as well as his checkins breaking IDE specific portions of code (classpath entries are a great example). For the most part, Eclipse has gotten the job done for me over the past 6 or 7 years, on 10+ projects, managing probably 20 different developers at all skill levels, on projects using both ant and maven for building. Sure there are some things I would want to change, but I consider it to be best of breed, especially for teams with junior developers. 
I give you an upvote because you got downvoted but you should know this rule : Remember people you were right brings generally more downvotes than upvotes.
Do you separate if and () by a space? I prefer to write method(), if(), for() etc.
No, I do not use a space.
I've made a habit out of re-evaluating choices I've made periodically. This means that from time to time, when technologies, software packages etc mature, I change my position and adopt them. Some things can take half a dozen attempts (such as Java, which I played with since the first release, but switched to only after the 1.4 release stabilized somewhat) Every 2 years or so I give Java IDEs a new chance. Last year I spent 4 weeks trying to like Eclipse. I forced myself to only use Eclipse and whenever I wanted to do something, I tried to figure out what would be the "Eclipse way" of doing things. (Going berserk and changing all the settings is a bad idea because it means that it will be harder to set up new development machines or exchange ideas/info with other developers). I won't bore you with the excessively long list of things that are wrong with Eclipse, but I can summarize it for you: It isn't so much one single thing as an aggregate of many, many small things that are done badly. I'll keep notes the next time so I can post them on my blog. Eclipse has some positive points, but for now, the positive points are outweighed by the negatives. I am less productive with Eclipse and that is pretty much what is the deciding factor. I'll probably try Eclipse again next year. Next up is IntelliJ. Probably around jan/feb. 
This seems like Javascript. Javascript is not Java, not even remotely. Actually, they choose their name because of a marketing run after Java became popular. It was originally called ECMAScript
AS DocTomoe said try the [javascript](http://www.reddit.com/r/javascript/) subreddit. It's also more popular than this one :) Also from reading through your description it sounds like you are trying to do something pretty gnarly. I would recommend that you post what you are trying to solve along with your question and see if someone can offer a better approach. Generally when a problem starts to sound like yours there is a better solution.
Try your question at [stack overflow](http://stackoverflow.com).
the vadiables, the vadiable, the vadiables...the vadiables, the vadiable, the vadiables!
i'm thinking the lack of comments might be reflective of the idea that people aren't quite sure what will happen yet. the big boys(oracle, asf, google, ibm) are still sending warning shots across each other's bows. unfortunately we'll need to wait and see which direction things will go. asf is very concerned about the future of harmony and seem like they are stamping their feet about getting oracle to make good on relaxing the licensing of the TCKs. ibm, oracle, and apple are throwing support behind openjdk, which speaks pretty well for the health of that jvm. java isn't going anywhere, and i would hesitate to call it the new cobol. there is a metric shit-ton of java server side code and it will need to be maintained and expanded for many years to come. i'm not sure how i feel about the future of desktop java, it seems like it is in a slow decline but there are some fine world class apps built on it(e.g. eclipse, netbeans, openoffice). tl;dr answer hazy, check again later ;)
I'm curious to see whether this actually is going to be released. I stopped holding my breath early 2009. Edit: I don't really care anymore. I'm using Groovy for most of my JVM development these days anyway. It would be nice if they backported JSR-292 though! 
Java is very strong in the enterprise market, and companies have invested so much time, effort, talent and money into their Java based systems that they won't just ditch it overnight. (I'm not talking about web startups here. Think banks and such.) It would take decades to port all that stuff to the latest and greatest platform. The demand for Java developers would obviously dwindle over the years, but if you want to make a living in IT, you should be prepared for things like that anyway, and keep up with all the new stuff, and not let your skills and yourself go obsolete.
Tonight's guest speaker -- James Gosling
One thing which would keep me in Java would be automatic increase of maximum heap space upon demand. Choosing a hard-limit at runtime is horrible.
Absolutely. It seems ridiculous that on a machine with 4 GB RAM, it's far too easy to run out of memory (stack space) in Java.
Yeah. The first time I ran out of memory compiling I found it stupid to have to fork threads and specify the heap size to use the maximum memory of the server I was using. WTF.
I need to program in Java for a living, and a lot of these features would be nice (particularly multi-catch). I'm not "curious" as to whether Java7 will ever get released, merely hopeful.
Java is serious technology, but as it is OSS, it's always been vulnerable to shifts in attitude, loyalty and opinion - more so than closed source, proprietary languages whose behind-the-scenes politics are occluded by the shiny corporate coating. Java is deeply entrenched in many large-scale infrastructures, not because it is a long-standing flavour-of-the-month, but because it is a powerful, versatile language and a LOT of programmers LIKE working with it. There is no danger of Java losing favour in the long run, although there is the possibility that it may suffer some decline in popularity in the short term. The sheer vastness of its deployment is one of its saving graces; it has enough momentum (and loyalty) to see it through the current turmoil, and will emerge from it stronger, tougher, leaner and meaner.
You mention desktop Java... This is going to be slightly off-topic but, it's something that has been on my mind a lot. Frankly, as said in my OP, I find Java+Swing currently the most *convenient* (note the choice of word here!) way to write desktop apps that I am aware of. Mostly because Netbeans is a killer UI-editor. And everything, from top to bottom is Java. Qt with C++ is another interesting alternative, but I don't like writing C++ that much. Using Qt with Python on the other hand is quite nice. But it's cumbersome to setup the development environment on Windows and to compile and deploy it to Windows executables. Whereas, with Java, it Just Works! So when you say that desktop Java is in slow decline, I am inclined to ask: In favor of what? If Java is in decline on the desktop, something else must be gaining "market share". Now, if that's C#, I wonder if people are using WinForms or WPF. WinForms seems to have a usable UI Editor with VisualStudio, but WPF is still very cumbersome to build GUIs with. And what about running C# apps on other platforms... Mono? Or is everything really moving to using the Browser as application UI?
I was there just hours ago! The live stream was apparently half working the entire time, unfortunately. Regardless, Gosling is a cool guy.
&gt; So when you say that desktop Java is in slow decline, I am inclined to ask: In favor of what? great question. maybe it's not so much that it is declining, but rather that other technologies are arising that make cross platform easier(C#, python, web-stuff). this dilutes the cross-platform world such that whereas 10 years ago java was _the_ tool for single binary cross-platform executable, now there are many more options. i've tried the options you have listed with the exception of the c++/qt route(i prefer python/qt for that) and they all seem to work pretty well but each have their own caveats. i definitely like that my java/swing apps transfer so cleanly from desktop to desktop, but i find building in java to be a slower process for me than building in python. &gt; Or is everything really moving to using the Browser as application UI? that could be, it is insanely easy to build browser based apps that look exactly the same on every platform. i've started building some apps strictly with python/django just because it is so quick to get an application with a strong data storage back-end and consistent visuals without really thinking about the gui toolkit or db orm. this solution doesn't work for everyone though as configuring a webserver and associated apps isn't always as fun as we make out to be. i have a feeling though that as people package the server-side deployments into smaller and more tightly coupled packages it will be easier for anyone to build apps in this fashion. just look at the way ios and android apps are assembled and you can see the web based technologies making their way to the desktop. building dashboard apps for osx is almost a process of web design as opposed to more traditional methods of building desktop apps. i think as things like osx dashboard, windows desktop gadgets, kde plasma, and the like become integrated into the operating systems, these apps will only become more prevalent. there's my $0.02
Very good points! &gt; [...] and you can see the web based technologies making their way to the desktop This reminds me soo much of Adobe Air, Mozilla Prism &amp; co :) These are very cool ideas. I wonder how this will pan out. Also, why not run Android apps on your desktop in an Android VM? That would be cool :) And IIRC, it's been done already... ;)
i think what might be an interesting idea at this point would be to make a rootless java app that could process web standards(e.g. html, css) to create desktop apps. i guess this makes me think of the way xulrunner operates. i'm not sure if this is possible or if it hasn't already been done, but i think the strength of things like the android platform are that you don't have to learn a completely new language to be productive. by leveraging the widely accepted and understood web standards more people can gain access to the desktop without disregarding their current skills. 
Yes, it's old but I can't believe it never got posted here.
Only corrections: C is a procedural language (Haskel is functional). Java is also not pure OO (primitives vs objects).
From what I've heard, "Core Java" is supposed to be the best book for people coming over from C and C++.
I think the book people normally recommend for this is [Effective Java by Joshua Bloch](http://www.amazon.co.uk/Effective-Java-Second-Joshua-Bloch/dp/0321356683/ref=sr_1_1?ie=UTF8&amp;qid=1290132015&amp;sr=8-1)
The book I was taught from in school was called Thinking in Java, it is very good at teaching the Java way of doing design patters and such ISBN: 0-13-187248-6
I don't mean to be anal, but you missed an 'l' in "Haskell".
My problem doing java for a living is the fact that we're still on 1.5 and probably wont see 7 for another decade.
Hmmm... sample code from IBM WebSphere.... Maybe IBM know's where BJs Warehouse is... 
I think that [JFreeChart](http://www.jfree.org/jfreechart/) allows for interactive editing.
JFreeChart, is the best charting library I have come across. You could also try modifying prefuse, which is a graph (i.e. node and edge) drawing program. I have had success in the past using it as an interactive timeline, took some effort but the results looked good.
A little too fanboyish for my liking. Also, what's up with using "-&gt;" to separate the parameters from the logic. Couldn't they use something that denote separation rather than pointing to something?
[Incanter](http://incanter.org/) is a math/stat/visualization library. It's written in Clojure, so it's not a Java library, precisely -- but it's certainly a Java-universe library: runs in a JVM, and should be straightforward to use from Java. It may not (yet) have the feature you're looking for, but it's worth knowing about if you do data visualization in the Java universe.
Prefuse is pretty slick, but JFreeChart seems more practical.
Incanter uses [Processing](http://www.processing.org/) for its vis.
Yes, and JFreeChart as well.
Isn't this the same as @Value("${property.name}")?
The "UML" has ForeignStudent extending Student
The diagram implies that ForeignStudent extends Student. Think of it as a more specific kind of Student.
Double inheritance would mean that ForeignStudent extends Student and Person. Its just normal inheritance to have a multi leveled tiered approach. Student extends Person, ForeignStudent extends Student. perfectly acceptable. What is the error you're getting?
That's not multiple inheritance, unless you're attempting to extend Person and Student directly. Your Student extends Person, and ForeignStudent extends Student. That ForeignStudent is a Person is only due to the fact that a Student is a Person.
What do you mean by driver class? The class with the main() method that is being called? I didn't take Java in school, but this isn't terminology I've used in industry.
party on
Yes, the Spring 3 @Value annotation does this, this project is just for Spring 2.5.
Ah, I see. Good for those who haven't upgraded yet.
It also will have some additional features that the @Value attribute probably doesn't support, such as update-able properties.
Nevermind found it out: interface IntSeq { public int nextInt(); }
you prob. want to write: public interface IntSeq { int nextInt(); }
You don't need to do this. All interfaces are inherently public and abstract. Declaring them public is redundant.
From my own experience, i learned about varargs while studying for SCJP certification. Although one could debate the merit of Java certification, in the process of studying for the exam I learned quite a bit about how wrapper classes work, different ways to tokenize data, working with collections, scope of inner classes, that Strings have their own special area in the heap, and so on. Just to name a bunch of random stuff. I studied with SCJP Study Guide by Sierra and Bates. I'd definitely recommend it for learning lots of the neat little idiosyncratic behavior that'll help you perform all kinds of tricks. I'd also recommend actually studying for and taking the exam since I work better with deadlines. Of course, to each his own.
As far as I understand it, the methods of interfaces are public, but the interfaces themselves can be package, private, protected, or public. I think there can even be static interfaces inside a class.
A great place I found those sorts of tricks was in the list of new language features, particularly those that were introduced in Java 5: http://download.oracle.com/javase/1.5.0/docs/relnotes/features.html#lang All sorts of neat tricks.
You're correct. [My bad.](http://java.sun.com/docs/books/jls/third_edition/html/interfaces.html#9.1.1)
This is not new. It has been this way for years.
Do you have any experience with VisAD?
tl;dr: minecraft will run better on multi-core processors, maybe before beta
Have you installed the JDK or just the JRE?
#&gt;find / -name javac #&gt;EXPORT PATH = $PATH:/path/to/what/you/just/found #&gt; javac -blah -blah add export statement to your .bashrc file if you don't find anything (which is my guess) you'll need to install java. I know in ubuntu a normal install of java provides links in /usr/bin which should already be on your path. http://wiki.centos.org/HowTos/JavaOnCentOS
Like listcomprehension said - you need to [install](http://wiki.centos.org/HowTos/JavaOnCentOS#head-98e26dc0ed04622c86be3e0d9cdb2baf63c07b19) JDK
I'm a retard.... ~$ sudo yum install java-1.6.0-openjdk-*
thanks!!!!!
None. Looks pretty good for scientific applications.
And will it pass??
I just wanted to say thanks for your help. I ended up using JFreeChart, and so far it is working out great, especially after I bought the developers guide. Thanks!
No. Use an IDE that adds them for you.
No kick, just [an answer](http://www.jython.org/). :D
I'm not looking for Jython, as I can't develop for Android with Jython. I don't want to use ALL of the syntax. I don't mind declaring variables, or doing things "the java way" (with the exception of this)
I DO use an IDE that adds them for me, I can code just fine in the current model of braces and semi-colons; I just prefer the python way. It has nothing about my ability or inability to use them, I just believe the whitespace way looks a TON cleaner.
No. *kicks you in the teeth*
Well, the only thing I can say to that is to get used to it, since the majority of languages and programming jobs are using C-style (read: braces) syntax and that's not likely to change soon. The other style of indentation tends to break down if you nest enough things (e.g. - and this is from real code - method &gt; try &gt; if &gt; try &gt; if &gt; try &gt; while - that's 8 \t characters in the python style, I have it as 4 because of bracing). It may also be worth getting used to because any parser tool you write will probably be fine, but will break just about every other tool around.
Well, I don't know what to tell you.. you want Java *without* the warts? Blasphemer! :) Have you looked at [Android scripting](http://code.google.com/p/android-scripting/)?
That's the thing I don't WANT full-on Python. I really just want cleaner code. Also, SL4A doesn't provide access to the GUI subsystem of Android, and it probably never will.
The parser I'm planning on making would just load code into a notepad-ish interface and save as java -- I don't plan on making this something that saves files as psuedo-pyjava. "Just deal with it" isn't an answer I'm willing to accept. This isn't for employment, I want this purely for my own use.
i have to agree with oorza its part of the language not putting in the braces is like writing without punctuation or capitals its maddening to read 
Seems like an awful lot of work for no gain, especially because as you do things like debug, or read FOSS code, or anything Eclipse does, you're going to be dealing with the braces. Suck it up? There's things everyone hates about every language and you just have to get over them to be productive.
Java was created because some programmer decided he wasn't just going to "suck it up"...ditto for most languages. This isn't about productivity. This isn't about typing less. This isn't about being unhappy with the language. This is about my own personal desire for such a tool; if it doesn't exist...so be it.
add $JAVA_HOME/bin to your path which $JAVA_HOME is your jdk installation path. Typically, if you install openjdk, it will be some name begins with /usr/lib/jvm/java-6-openjdk. 
I love the fact the only really important thing about the next version of Java the public gives a rats about is "it might run MineCraft faster" lol! Seems like maybe Java's implementers haven't really realized there full market yet as MineCraft becomes Javas "Shadow of the Beast" per say.... :-)
Yes, you are.
via: http://www.theserverside.com/discussions/thread.tss?thread_id=61352
Java may be a dead end, but there aren't really alternatives. I've been having to do Microsoft development for past few months, and it's extremely painful because the community and the libraries are so anemic. I suppose Perl could be considered a viable alternative.
thanks!
thanks a lot. i was actually looking for this information, so I could document it. much appreciated!
Why exactly does a single server need more than 1 port for this?
Personally, I love jME3. It has a ton of new features, a great API (which is till maturing) and has a great community. AFAIK Ardor3D is a spin-off from jME2. Just my $0.02
The devices are all (for all intents and purposes) "hard coded" to connect to different ports.
It's just a programming language. Stop being nasty!
You cannot create arrays of generic objects in Java, it's a language limitation. You can, however, do a Collection&lt;ArrayList&lt;PolygonGene&gt;&gt;, or maybe write a class to avoid nesting generics.
Thank you.
&gt; PolygonGene Are you making a genetic twitter image maker ala http://rogeralsing.com/2008/12/07/genetic-programming-evolution-of-mona-lisa/ ?
Same idea, but I've written mine from scratch. I will post on Reddit when I'm done.
i know it's a bit late but you could have done private ArrayList&lt;PolygonGene&gt;[][] polygonList = new ArrayList[parameters.width][parameters.height]; that would have caused an *unchecked* warning, but it's something you can live with.
Thanks. I took Ho-race's advice and wrote my own class PolgyonList, extending ArrayList.
some videos of it in action: http://www.youtube.com/user/sloetjes
hope they will...
Fork fork fork! I hate to depend on projects ruled by king Larry! 
Tabs for indentation. People that use spaces for indentation should be re-educated.
view page source == all answers for that given "test"
dude, it's the internet...you could find all the answers anywhere else... the whole point of the site is to test yourself
I think that's a good thing. If you get stuck, at least you can figure out what the answer is supposed to be.
[This](http://codingbat.com/) is also kinda cool...
As you can see in my post, I never mentioned that finding the answers on the page was a "bad" thing. I was just making readers aware that they can find the answers easily.
Evlautes to true
Great talk, thanks for the post. 
I learned it from [this](http://www.amazon.com/Core-Java-TM-I--Fundamentals-8th/dp/0132354764/ref=sr_1_1?ie=UTF8&amp;qid=1291535590&amp;sr=8-1) book. I took a class that primarily used Java, and I had never used anything but C (and thus had zero knowledge of OO programming). This book brought me up to speed fast and it was very thorough.
http://java.sun.com/docs/books/tutorial/reallybigindex.html
So, there are a lot of good tutorials out there, but they don't necessarily promote you figuring things out on your own. I would suggest looking at MITOCW for there software engineering class if you are looking for some rather intense java programming ideas (I think it's implementing a google maps-like thing...), or look at other university's course webpages (For example: http://www.cs.washington.edu/education/courses/cse142/ if your looking for basic java things, or http://www.cs.washington.edu/education/courses/cse143/ if your looking for something sligtly more advanced.)
[Head First Java](http://www.amazon.com/Head-First-Java-Kathy-Sierra/dp/0596009208) is what you want.
[Javabat](http://www.javabat.com) 
http://www.reddit.com/tb/eg77m
Look through some books as suggested below. Then there is only one way of learning it well: Code, code, code and then do some more codeing. 
I concur.
I agree. Don't buy a book. Read the tutorials. Save your money.
These two are proving to be very useful in my own Java-quest. The first 5 lectures of the stanford course can be a bit remedial if you've already had some programming experience. http://www.cosmolearning.com/courses/programming-methodology/ This is similar to codingbat.com/java (Diggtionary's link) http://webster.cs.washington.edu:8080/practiceit/ also stackoverflow.com is a great reddit-like site specializing in programming. They are very helpful.
Make sure to get a good IDE to program with. Nothing is more frustrating than trying to write code in MS notepad. Real programs use programs to help them program. I suggest Eclipse which is free.
Thank you! Very much appreciated.
Get Netbeans or Eclipse running, load a Hello World program, and run it. Then start tweaking, or loading larger suits of classes. (from tutorials etc). Build a class to represent some kind of concrete object, like a car (and what a car should hold reference to) Get to know the debugger, stopping at breakpoints and seeing what's going on.
http://www.coderanch.com/how-to/java/how-to-create-java-program And then http://www.javaranch.com/java-college.jsp 
This is what I used.
learn about oracle business practice and you are done.
once you've done programming in java for a month or two go and find 'effective java' 2nd ed by Joshua Bloch. for serious! it good book! help you much! short sweetest info
The best way to learn anything it to practice it in context. Write a program that interests you and you will learn Java through the process and it will be more enjoyable. Of course suggested books by others can and should be used to get started but most of all make sure you have a project that you are interested in. Edit: Clarification
Start reading about java, now.
The Sam's 21 days book does a good job of explaining it in plain English. If you're an absolute beginner, I absolutely recommend it. All the other stuff assumes you have a foundation. The Sam's book assumes you don't know squat.
pick up any good introductory java book. practice examples in the books. use a text-based editor. 
IntelliJ Idea is free now as well. I've made the switch and prefer it, but YMMV.
http://download.oracle.com/javase/tutorial/networking/
Check out the networking part: http://courses.coreservlets.com/Course-Materials/java5.html
http://www.thenewboston.com/ I have read guides and online tutorials for months getting no where but when I found thenewboston I was learning more in a week than I had a whole month. He has 121 short Java tutorials that make learning the language and syntax simple. He also teaches over 14 languages, as well as various tutorials for other computer related projects in the same simple and slightly humorous way. The tutors name is Bucky, his videos are addicting.
Get to know the debugger! I couldn't agree more. It something that when you're self taught may come a little later as you try and gather new concepts and techniques, but it will fill in so many blanks and answer questions you didn't even know you had.
Agreed, this is a great book. Although I would've found most of the concepts still over my head in the first month or two (granted I wasn't coding everyday and I'm not the fastest learner), but this book can really shine the light on best practices.
What's your question? 
Right. First, your do while loop doesn't make sense at all. You're looping based on the number of tickets entered, which is what you want, but the loop's in the wrong spot, as you're looping the whole application. I see what you're trying to accomplish, however. I won't rewrite your code for you because you won't learn that way, but what I will tell you is that you should consider what you are trying to loop. Does it make sense to loop where the code is now or should it be somewhere else?
why wont it output an array of ints? instead of getting 6 numbers i get returns like [1@42e816
it should definetly be somewhere else, i'll cross that bridge when i come to it. right now i extracted this import java.util.Random; import java.util.Scanner; public class TEST { public static void main(String args[]) { final int SPOTS = 6; final int MAX_REG = 56; final int MAX_MEGA = 46; Random randomNumbers = new Random(); int[] numbers = new int[SPOTS]; numbers[0] = randomNumbers.nextInt(MAX_REG); numbers[1] = randomNumbers.nextInt(MAX_REG); numbers[2] = randomNumbers.nextInt(MAX_REG); numbers[3] = randomNumbers.nextInt(MAX_REG); numbers[4] = randomNumbers.nextInt(MAX_REG); numbers[5] = randomNumbers.nextInt(MAX_MEGA); System.out.print( numbers ); } } and i cant get it to output an array of 6 numbers, i just get garbled garbage for the most part
What kind of infrastructure are you working on? If it's just your home PC, you can set up a scheduled task/cron job to execute your code.
I am not sure exactly what your question is. Are you asking how to parse a CSV file? If so then check out opencsv. Are you asking how to perform time based, possibly recurring tasks? If so then check out quartz scheduler. Or are you asking about how to add data to a database? I would recommend you look into hibernate or JDBC. Also, for future reference, it would be nice if you asked more specific questions rather than making glib requests. PS - I was a big fan of your work on the offensive boards in your Chicago days.
You have to print them out individually. If you print the array name, Java will print out the memory address where the array lives in memory. You have to tell Java which individual int from the array you want printed. E.g.: System.out.print("first int = "); System.out.pring(draw[0]); System.out.print("second int = "); System.out.pring(draw[1]); And so on. 
A couple of things - 1) You need to call createTicket() the same number of times as they want tickets. So, for(int i = 0; i &lt; tickets; i++) { createTicket(); } OR, modify createTicket to take in the number of tickets you want as a parameter, and do the loop in that method. I prefer making createTicket() just do one thing, but that's just me. 2) createTicket() doesn't really need to return anything if you are just going to print it out in the method and then throw it away. Either print in the method and return void, or return the numbers and have the caller print them. 3) You are declaring your SPOTS, MAX_REG, and MAX_MEGA inside the create ticket() method, where it might be more appropriate at the class level. 4) MAX_REG and MAX_MEGA are unused, replace the nextInt(56) and nextInt(46) with constants. 5) You don't do anything to guard against duplicate numbers. I'm not sure what your requirements are, but generally the first 5 numbers (1-56) would be from one set and cannot duplicate. Perhaps the last (MEGA?) number can duplicate the others. You'll have to guard against that. 6) When you do println(numbers), you are printing out the ADDRESS of the array (that's why you are getting an odd hex-ish thing). To fix that, do some formatted printing, like this: System.out.format("%d %d %d %d %d %d%n", numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5]); OR System.out.println(numbers[0] + " " + numbers[1] ...etc); OR for(int i = 0; i &lt; numbers.length; i++) { System.out.print(numbers[i] + " "); } System.out.print("\n"); Good luck with your studies. Feel free to ask questions. *Edit:* Formatting. 
ok cool, so i guess i would put that output in the arrays method, so that when i have the main method call the array method x number of times the array method will just handle the output?
&gt; System.out.prin**g** Wat? ;D
what variable is i representing? the index of the array? also MAX_REG and MAX_BONUS are being used to set the parameter for my randoms in the final program. e.g. randomNumbers.nextInt(MAX_REG);
Correct. Use a for loop to handle printing that array: for(int i = 0; i &lt; numbers.length; i++) { System.out.println(numbers[i]); }
Your explanation is far too vague for me to tell you if you're right or wrong. Code it and try it. If the code doesn't work, post the code.
The constant, in this case, represents the maximum int you want random to generate for you. Then you assign that to a slot in the array. Sorry for the confusion - when I typed that up there were no comments on the thread. When I finished about 5 minutes later, there were comments and replies! Screwy.
In response to your deleted comment: &gt; trying to figure out how to have the array method repeat as many times as the user wants the ticket now. The way I would do it, would be to use the "break;" keyword. This is a keyword that kicks you out of the current loop. Something like: while(1) // FOREVER!!!!!!! Z0MG Z0MG!!!!!! { numTickets = input.nextInt(); if(numTickets &lt; 1) { break; // break out of forever while() } }
finished a rough version of the code, compiles and runs to standard but theres a few things the professor still wants me to that arent necessary. he wants the numbers in ascending order, and he wants me to make sure all the numbers are unique. Im pretty sure 5 of 6 numbers will be unique (mega might be a repeat). I have no clue about the ascending order though. heres my current revision, sorry for the horrible coding style import java.util.Random; import java.util.Scanner; public class Project5 { public static void main(String args[]) { int tickets; String userChoice; Scanner input = new Scanner(System.in); do { System.out.println("\n\nWelcome To Quick Pik, How Many Tickets Would You Like? (0 to exit)"); tickets = input.nextInt(); if (tickets &lt;= 0) { System.out.println("\n\n\nHave A Nice Day"); } for(int i = 0; i &lt; tickets; i++) { createTicket(); } }while (tickets != 0); } public static void createTicket() { final int SPOTS = 6; final int MAX_REG = 56; final int MAX_MEGA = 46; Random randomNumbers = new Random(); int[] numbers = new int[SPOTS]; numbers[0] = randomNumbers.nextInt(MAX_REG); numbers[1] = randomNumbers.nextInt(MAX_REG); numbers[2] = randomNumbers.nextInt(MAX_REG); numbers[3] = randomNumbers.nextInt(MAX_REG); numbers[4] = randomNumbers.nextInt(MAX_REG); numbers[5] = randomNumbers.nextInt(MAX_MEGA); System.out.print("\n\n" + numbers[0]); System.out.print(" " + numbers[1]); System.out.print(" " + numbers[2]); System.out.print(" " + numbers[3]); System.out.print(" " + numbers[4]); System.out.print(" MEGABALL " + numbers[5]); } }
havent been tought how to use the break keyword really, im having enough trouble as it is. The for loop seems to work fine, it repeats the method for as many times as the user enters (my comp nearly shat itself when i told it i wanted 56999348343 tickets as a test). how to categorize in ascending order however is a totally different story
Heh... so, again, what's your question? ;]
lol well i know i have to use an arraylist to make sure all the numbers are unique so i guess its just down to arranging the output of the array in ascending order, which im not sure abotu how to do. however the real trick to this seems to be that he wants the MEGABALL output at the end. so i guess i have to modify the array to contain only 5 values, have a random at the end for the megaball. edit: also by this point i feel i owe you atleast a few beers, any chance you're in nj or by nyc atleast?
When printing text and numbers in Java at the same time, you may consider using the String.format() method to make your life a bit easier in the long run though it is situational. For example: System.out.println(String.format("Number=%d",draw[0])); will print for example: "Number=23" String worldString = "World"; Can do this with other Strings too, not just ints. String.format("%s, Hello, %s", "Hi", worldString) Would print out "Hi, Hello, World" for example... Additionally, while looping through an iterable object such as an array where you might not necessarily care about the index (such as int i=0 in a for loop), you can write your code like such: int[] myIntArray = new int[2]; for(int myNumber: myIntArray){ System.out.println(String.format("Number=%d",myNumber)); } Which might print out: Number=5 Number=12 Number=51 If the numbers in your array went 5, 12, 51 in that order. These may not be helpful immediately in your project, but I've found that they've helped out quite a bit with most of my project.
Run a cron or windows task scheduler (which is less reliable) to run your java? application. Read the csv spreadsheets from the directory as simple files. You can get a last-modified from the filesystem. Store the last-modified in the db per file. If the last modified has changed, read the files using opencsv (or whatever). Best case scenario is that rows are only added. If that's the case, you just need to store an int width the last modified timestamp to indicate the last row imported. Even if some 3rd party just opens the file, does nothing and saves/closes it (changing the last modified), the program will run and see line 35 was last imported, there's only 35 lines in the file, exit. That's probably your scenario. If data can be added and removed, we have a tougher problem. It's the same if you can have modified rows. You have to hash every row and store that with the row (assuming the data is not normalized). Walk through the file row by row in the file, hashing the row, comparing to current stored row data (this is going to be taxing on the db if it's normalized and all the data has to be re-aggregated every time it reads through the file) and replacing with current data or ignores (hashes match) and goes to the next row. After the file has run out of rows, delete any additional rows associated to that file beyond the current row increment.
Sadly, I am in Colorado. I would really love a beer, too! If you're super bored, go by [2nd Floor Brewing](http://2ndfloorbrewing.com/) and buy a six-pack. Tell Maggie and Brad that some weird programmer guy from Colorado said "hi". (G)
definetly will. im trying to move to colorado by the beggining of next school year. Last question: i changed the first 5 numbers from an array to an ArrayList. I used the shuffle and grabbed 5 random unique numbers from it. is there anyway i can now sort these numbers into ascending order? i assume i need to figure out how to convert it back to an array, and use Arrays.sort on it, but it seems a bit above me public static void createTicket() { ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;(); final int MAX_MEGA = 46; Random randomNumbers = new Random(); int megaBall,count,number; for(int i = 0; i &lt; 56; i++) { numbers.add(i+1); } Collections.shuffle(numbers); for(int j =0; j &lt; 5; j++) { System.out.print(numbers.get(j) + " "); } megaBall = randomNumbers.nextInt(MAX_MEGA); System.out.print(" MEGABALL " + megaBall); System.out.print("\n\n"); }
 import java.util.Collections; Collections.sort(numbers);
If you don't need it to be in Java, Python is probably a better bet for this, with its built-in CSV support.
So the problem is in: ++buckets[a[i]]; when i ==0 (the first loop) a = some random integer generated in main (this case 80552) ... and buckets[] clearly doesn't have that many elements... I haven't really done a bucket sort before...so I'm not sure what exactly the algorithm is...but that is where your problem is. Let me know if you need more help. 
Okay, thanks for helping me locate the problem. I don't really know how to fix it, but hopefully now he'll be able to tell me. Thank you very much!
The sorting array has to be large enough to accommodate all possible values. That's why that line doesn't work. I got it to work by changing this line array [i] = (int) (Math.random () * 99999); to this: array [i] = (int) (Math.random () * 50); [Source, which happens to have the same code example.](http://www.brpreiss.com/books/opus5/html/page76.html) Edit: Alternatively you could change the call to bucketSort to account for the range of possible values: bucketSort(array,99999);
thank you, it works now! but if I wanted it to make numbers that large, how would I go about doing that? 
Um, you are making numbers that large? To be clear, you should only need one of my fixes, not both. Originally, you were randomly generating numbers from 0 to 99998. The line ++buckets [a [i]]; stores a count of how many of each random number you have. So if your random sequence happened to generate the value '6' five different times, the value located at buckets[6] would be 5. Originally, you were generating numbers from 0 to 99998 and trying to use those as indices for your bucket array which only had a length of 50. So the first time you encountered a number larger than 49, you'd have an ArrayOutOfBoundsException. So, you should either change the range of random values you're generating to be smaller than the original size of buckets[], OR change the size of buckets[] to be able to index the whole range of random numbers you're generating.
[Thinking in Java](http://www.amazon.com/Thinking-Java-4th-Bruce-Eckel/dp/0131872486/) is an excellent resource.
aha yeah, I just tried the second option, the bucketSort (array,99999) and now it works. Thank you very much! 
Sorry, should've been more detailed. I'm working on mobile app, here's a framework outline: 1. Spring Framework + Apache CXF RESTFull web services returning JSON data 2. MYSQL DB 3. Appcelerator Titanium (also looking into phonegap) My question was also pretty vague. The time based, possibly recurring tasks is my my main goal. I'm going to try a poc with quartz and see how this works out :)
Also agree, it's what I've been using to get up to speed on java.
http://www.blackbeltfactory.com -&gt; free courses, coaching and exams on Java related topics.
start here : http://www.blackbeltfactory.com/ui#!Course/javaoofundamentalscourse
B-b-but but NBJL needs to be compatable with *bad developers*.
Tip #1: Download IntelliJ Idea community edition and import your eclipse projects.
is broken :(
Yea, I checked this out from the library seems pretty good so far, I'm on Chapter 3.. libraries are free and I much more prefer a physical book. Just make sure the book isn't too dated. Also this way you're also typing everything in yourself instead of potentially copy pasting.
I prefer to not use an IDE yet so that I will be forced to type out all code instead of auto completion. I will use one eventually. With that said a good notepad with syntax highlighting helps. Notepad++ http://notepad-plus-plus.org/
So... is he with Google now? His Wikipedia entry and his blog seem strangely silent on his current status. 
A lot of stuff going on at the moment over the tubes and software associated... (yes, some would certainly laugh to that, but I believe that java and the internet are somehow very related children of the same openness spirit) I really fantasize about Apache forking and the community (and by that I mean major libraries/frameworks people, software editors, and to a lesser extent corporate ITs) following, but I don't know how plausible that scenario is. I know for sure I would happily follow apache with my minor tiny software company in any bold move they would do.
Isn't the JCP pretty much a do nothing group?
Instead of Java as a language, consider the JVM as a platform. Between Groovy, Scala, and Clojure there are lost of expressive choices to write code in. Let those language designers write Java so you don't have to. I am partial to Groovy as an expressive, low ceremony alternative. Far cleaner code, less repeating yourself, and closures to boot!
Unfortunately, for corporate stiffs like myself (who are at the whims of our IT department masters), we're terrified of the next 3-5 years. Which is why I'm freshening up my Python and Ruby, because, if Java becomes all-Oracle-all-of-the-time, I might as well be writing C#.
Why not freshen up your C# then? If you're an experienced Java programmer, it will leverage what you know and give you lots of new fun features to play with.
Because single-vendor-ecosystem lock-in, whether it be Microsoft or Oracle, is equally terrifying.
What sucks the worst about this is that it affects every language built on top of the JVM. Harmony should just become a brand new vm with no explicit ties to the JVM. Screw the TCK, Harmony is what it is. It's own standard.
And just wait for Oracle to sue Apache for patent infringement....
C# and GTK# using Monodevelop are very closely related. You could freshen up on GTK# and deploy applications to Linux, Windows, and Mac. This would also give you that C# experience.
I'll plead a bit of ignorance here, and say that I've been under the impression that Mono isn't quite a 'first-class-citizen' in the .NET ecosystem. Having said that, Java developers have had a pretty cush setup for the past decade, in that: * WORA has been a fundamental reality for us. At my previous job, I developed on Windows, tested on Linux, and deployed to Solaris. When I worked remotely, I did so on a Mac. And, this was developing software for the US Department of Defense, and 64 separate civilian jurisdictions. * The world of open-source libraries/toolkits/platforms available to Java is just immense * Having 5 or so major vendors competing to develop tools and support the language gave us gobs of great tools and IDEs * And, of course, there is/was plenty of Java work to be had, anywhere, as medium-sized and large-orgs defaulted to Java for most modern projects What we ended up having, effectively, was a well-supported language ecosystem, with a huge presence in the open source world, while simultaneously being considered absolutely and unquestionably commercially viable. It was, to use a cliché, the best of both worlds. It was unlike use of Python or Ruby (or even Perl, ugh), in which I had to jump through hoops to get it approved for a project, and unlike being stuck in the Windows/Microsoft stack (I have an immense hatred of administering Windows servers - I'm told it's better these days, but "once bitten"). So, while I openly admit that C# does quite a few things objectively better than Java (the usual things: proper generics, named closures + lambdas, LINQ), any movement to C# or the .NET platform will feel like handcuffs, given that I'm used to both an expansive open source community AND first-class support on all platforms AND complete commercial viability. 
They haven't sued them yet. There ought to be some limits on suing someone for something they've been doing for years and you've not sued them.
So far it's great. Should cross post this in r/flex. Our team saved the company using IDEA 9/10 because we didn't need to upgrade our FlexBuilder licenses. IDEA blows FB out of the water for flex development.
Our shop just bought everyone version 9 licenses, merely three months ago. D'oh.
I've been keeping an eye on the [Play framework](http://www.playframework.org/). I haven't had a chance to do much with it beyond the basic material, but it has a lot of the "feel" of working with fun, dynamic Python stuff. But instead of Python, it's Java, so all of your business logic will/should still work. I'm curious to see what others think about it. Personally, I recall in at least one case where things are too dynamic that, for example, Eclipse couldn't do a refactor for you; I believe it was using the name of a variable in a string, and that rubbed me the wrong way. Edit: "Java" is a proper noun.
Play it is my fellow player ;-)
Get JRebel, helps a ton with the redeployments. http://www.zeroturnaround.com/jrebel/
* Lots of XML editing * Long redeploy/edit-to-test times (upwards of 30 seconds) for things like editing JavaScript or HTML * Complex JSP-based views where people only partially understand what the soup of custom tags is doing My response to all three is, "you're doing it wrong". Don't use JSP - either use GWT or freemarker or velocity or StringTemplate templates. You should be able to run straight from your development environment if you set it up right so that you neither have to copy any files to run nor build a war nor restart the webserver. Edit a javascript file and hit reload in the browser should be your edit-debug cycle. And XML is terrible for configuration. Stop doing it, put configuration in groovy code and in simple property files. Beyond that, I am more and more of the opinion that the front end should be done in javascript/CSS3 and the back end in Java or some other robust static language. GWT is nice, but writing the javascript directly is much more efficient, and communicating with JSON objects back and forth makes for a nice separation of back end and front end.
been very happy with wicket lately
Apache Wicket, Spring and Hibernate. Shrug.
This isn't strictly Java, but Groovy on Grails is a great framework that is practically a drop in replacement for Java. The syntax of Groovy is almost identical with some added dynamic sugar. If you've done any Ruby on Rails (or any framework like it), GoG will feel very intuitive and you'll be up and running in no time. Layouts, partials, and a much richer in-view JSTL style language all make working at the view layer a lot more fun. There's [a growing list of sites running GoG](http://www.grails.org/Success+Stories) too. If you like the JVM, want to keep some Java code or libraries you already know and love, but want a more dynamic language and a framework that supports convention over configuration and abhors XML, then give it a try.
Spring doesn't require a lot of xml if you use the annotations which are quite straightforward. I second "speek" who says you should definitely get an IDE that allows you to update a deployment dynamically. Some of the developers at my office don't have Eclipse set up that way and I find it hard to understand how they get anything done.
checkout apache click. its similar to wicket, but much lighter and stateless. 
I'm probably dreaming, but anyone out there have a recommendation for a true Java RAD environment (web or otherwise)? I mean, it ought to make you feel like you have crack coming out of your fingertips and have magic features oozing out of each layer like an artery blocking double quarter-pounder cheeseburger with bacon, jalapeno cheese, etc. For hobby / side projects, this is how I prefer to get stuff done. I leave the actual software engineering work for, you know, work.
Check out groovy and grails, it's built on the JVM and spring.
From the IDE side, Intellij IDEA; the community edition is free. For a web framework I haven't found anything that comes close to matching the productivity I get from Groovy/Grails.
&gt; The syntax of Groovy is almost identical It's actually a superset; you can rename .java files to .groovy and they should compile fine with groovyc. 
Spring MVC, purely annotation based works great. Very little XML and very easy to test.
Another vote for wicket, but I am a contributor to wicket-stuff, so I'm biased.
There's a big gap between massive server-side frameworks like JSF and thinner, more 'web-focused' frameworks like Play or (Scala) Lift. Personally, I'm doing JSF2 at work and while there is a lot to criticize, it is working quite well for enterprise stuff. With that I mean you'll never get ultimate control over your webapp with JSF as you do e.g. with jQuery (or even JSP), but in exchange you get slim (in terms of LOC) and maintainable applications with reasonable effort. And the component model allows you to put *lots* of custom logic into a component set that is reusable between different applications. Things I like about JSF2: * Good development experience (I'm using Netbeans and Glassfish 3 Web Profile). XHTML-based templating, updates automatically published to server, only redeployment after code changes. Auto-completion for JSF-EL (expression language) and components. * "Composite components" are a quick and clean way to whip out complex widgets composed of other components, custom logic is wrapped in a backing Java component class. It is also no longer necessary to register all components in a XML file, just creating the component template automatically registers the component with JSF (and the IDE, including autocompletion for its attributes). * POJO-based programming model (managed beans) * Nice component libraries (JSF2 support is not yet on par with JSF1, but Primefaces and Openfaces are pretty nice). * Good server-side state model with CDI (e.g. conversation scope, dependency injection). Things I dislike: * JSF is really on the extreme end of (re-)creating the entire UI on the server. This leads to a lot of complexity that simply isn't there in most other frameworks. * It's too easy to build slow applications. Since everything is pluggable and the entire JSF lifecycle is traversing the component tree several times, even simple property lookups using JSF-EL (expression language) can lead to noticeable performance impacts because of all the proxying and reflection going on (CDI doesn't help either). * A lot of baggage has accumulated since JSF 1.0 was released in 2004 (e.g. JSP support, complex rendering model to support visual JSF editing that never really worked anyway). Would I be using JSF for personal programming projects? Probably not. Unless someone's paying for it, diving into the depths of JSF (and you really need to dive into the JSF implementation's source code at some point) isn't that much fun. On the other hand, you get to spend a lot of time building applications with a very strong focus on creating reusable components, and JSF isn't going anywhere soon - I'm pretty sure it will still be around and actively developed in a couple of years, which is more than I can say for most other frameworks. 
Big Play user here. It has my vote.
play is a great, great choice
I second GoG for RAD. I don't think Play or Wicket or anything that is still pure Java will come close from a strictly RAD point of view.
Spring MVC (or annotated controllers) with Spring JDBC templates. Hibernate is a step too far in my opinion. 
Very true. 
And if you can't do Groovy on Grails (which I have profoundly enjoyed), Spring MVC (with annotations) gets you very, very, very close.
Upvoted for Spring MVC, I'll try to ignore the 'JDBC templates' part. *shudder*
I've reduced an inherited codebase from 38k to 18k lines by switching it over to Spring MVC (+ annotations). Easily the best web framework about, but, I'll be damned if the documentation isn't absolute garbage.
Feeling your pain on this. I'm just out of the free upgrade window as well.
Appears that you haven't link OS depends libraries in Eclipse. [Try this](http://www.eclipsezone.com/eclipse/forums/t49342.html) you should find OSX .dyn libraries in a folder under JOGL directory. Also I 'd recommend you [LWJGL](http://lwjgl.org/).