You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I've been slowly migrating to jigsaw on a library project. Up until very recently, jigsaw and junit didn't play nicely due to split packages. jUnit 5.3 and surefire 2.22 seem to have fixed the issue for maven builds, but I still get test compile errors in Eclipse 4.7.3a. I'll try Eclipse 4.8.x when Fedora 29 lands. Netbeans 9 doesn't have compile errors on the tests, but when I try to run them with the IDE, no tests are executed. I'm hoping for better jigsaw support out of everything toward the middle/end of October once JDK11 has been official for a few weeks.
Release notes here: [Eclipse 4.9 - New and Noteworthy](https://www.eclipse.org/eclipse/news/4.9/).
Who of you will switch from OracleJDK to OpenJDK next release?
“Public updates for Oracle Java SE 8 released after January 2019 will not be available for business, commercial or *production use* without a commercial licence. ” How is that not being greedy? It is only the JDK that has the GPL licence. You don't realise Java SE, &amp; Java EE Technology Compatibility Kit remain closed source.
just upgraded a bunch of machines to 7u191 few days ago! (a lot of stuff is on 8 though but no 9,10,11 yet - unless we count build slaves)
No. JSE 11 is LTS at the project level -- this has nothing to do with Oracle alone. True however that Oracle is only distributing its LTS under a commercial license. The OpenJDK is committed to supporting each LTS for 4 years.
Yea. It still is, SAP actually uses it. I have a friend of mine that is starting to use it on a project where they design the front end as users request it and send it to the devs code the backend. I dont actually have any experience on it and would like to learn the basics.
Which OpenJDK builds do you refer to exactly? The OpenJDK 11 builds by Oracle will only be available for 6 months as of this: https://blog.joda.org/2018/09/time-to-look-beyond-oracles-jdk.html
I've deleted it many times but it keeps coming back
On both 8 and 10. We'll probably ditch both later this year for 11 (probably running mixed 10/11 clusters for a while).
what kind of content are you looking for, I mean for eg. are you looking for blazeds, granites, flex 3,flex 4? Flex has gone through quite a "few" changes over the years. 
Not invented here syndrome
Are you talking about a particular new feature in 4.9 or Eclipse in general?
1. /r/techsupport since this is not related to Java, nor to Java programming where it would still be in the wrong subreddit because it should be in /r/javahelp in this case. 2. Reboot the machine. It seems as if a Netbeans process hangs. Check the Task Manager to see if there is still a Netbeans process open.
The Eclipse Installer
1. NetBeans is a Java IDE. But i will crosspost there as well 2. I have many times, nothing in the task manager
1. I know that Netbeans is a Java IDE, but it still doesn't have anything to do with the topics of /r/Java: + News, Technical discussions, research papers and assorted things of interest related to the Java programming language Nor does it have anything to do with Java programming. Then, it would fit in /r/javahelp. You need *technical support* and that's what /r/techsupport is for.
I know, which is why I'm crossposting it 
You can get OpenJDK builds for JSE 11 that will be patched for at least 4 years at [adoptopenjdk.net](https://adoptopenjdk.net) and from Azul's Zulu download. Moreover I believe both have committed to supporting JSE 8 through 2023 as well. Check out [https://adoptopenjdk.net/support.html](https://adoptopenjdk.net/support.html) for details. Oracle has arbitrarily decided to limit the updates to its own OpenJDK builds at 6 months but that is not a reflection of the overall OpenJDK community. It just applies to Oracle's own distribution channel of the the codebase. By 2020, the [adoptopenjdk.net](https://adoptopenjdk.net) project will be the overwhelmingly dominant source for non-commercial JSE downloads. Oracle's distro's will be limited to its own commercial relationships.
Simultaneously.
You're confusing Amazon with Facebook. :-)
&gt;The [JNoSQL project](http://www.jnosql.org/), of which I’m a part, is excited to announce that it will be the first new standardization project to be adopted by Jakarta EE providing a robust and vendor agnostic API that will allow any Jakarta EE implementation to seamlessly integrate with most NoSQL databases. Is it me or is it weird that a vendor blog post single-handedly announces that something will become a new JSR when nothing of that was ever decided upon by the Jakarta EE working group?
How about [Vivid Cortex](https://www.vividcortex.com/)? Baron Swartz is the CTO, and he formerly worked for Percona and wrote the High-Performance MySQL book. Have you tried it so far? 
I'm going to keep one month for preparation of OCAJP. My colleagues at my company say that's sufficient even if you're new at Java but have experience in OOP programming before. 
I am working on getting OCA SE8 certified, does that count? &amp;#x200B; (As long as there is no certifcation for newer versions...)
I think there's a typo/thinking in the `var` section. &gt; You can also use final in conjunction with var to permit reassigning the variable with another value: I think you mean forbid instead of permit.
&gt; if you copy a mutable list, copy is indeed a new instance so it's garanteed there's no side-effects when mutating the original list `unmodifiableX` returns a wrapper over the original collection; think of it like a view instead of a copy. Modifications made to the original instance will be reflected in the "unmodifiable" collection, but using `copyOf` will protect you from this because the returned collection is distinct from the one it copies from.
Thanks for your feedback! I've updated the article.
I remember Otavio talking about making a JSR out of this a couple of times. Different story of course to include it into Jakarta EE, I haven't followed the discussions there. Would it even make sense to have an actual JSR done via the JCP, or would be not Jakarta EE define its own process for creating specs? All in all I think this effort would be better suited for MicroProfile first, given the volatility of the domain.
Thanks, I studied your csv-parsers-comparison and the corresponding from simpleflatmapper but the library avoids intermediate representations such as String so that performance is improved, so it does not directly fit in the way the current benchmarks are implemented (String\[\]). &amp;#x200B; There is now no flexibility in that if a column is specified as not quoted, and it turns out the data is quoted, it will not work. A quoted can be with or without quotes though. Different column counts will only work if after the last column expected to have a value. &amp;#x200B; So I guess some flexibility is lost/exchanged for improved performance; however it is certainly possible to add that flexiblitiy as a feature (dynamic code generation after all). I'd think that the library would then output code looking like the traditional parsers and would be on pair with them (but with overhead of using ASM); so on other words kind of pointless. It is fair to say that only use the library if you have strict control on the expected input files; in exchange you'll get better performance. &amp;#x200B; The overall parse loop is optimized for no or few linebreaks and quoted values, so that design choice might be skewing the perceived advantage of a generating a specific parser using ASM. &amp;#x200B; &amp;#x200B;
No Java 11 support out of the box though :(
Wait does that filter out nonpresemt Optionals in the original collection?
In RedHat, we trust!
Seems like they are jumping the gun abit! 
It does, because it unwraps the Optional, and leaves you with just the valid entries. If you'd called `.collect(toList())` on the stream you'd get a `List&lt;String&gt;` rather than `List&lt;Optional&lt;String&gt;&gt;`. https://www.baeldung.com/java-filter-stream-of-optional
inputStream.transferTo(outputStream); &amp;#x200B; Great addition!
What's the use case for this? Why not just use the REPL?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Nice, didn't know about this. Thanks for pointing this out. On the other side I rarely use the terminal to run java files as I'm an IntelliJ IDEA user.
Java scripting. You can make an uncompiled `*.java` file executable now. The sheband (`#!/usr/bin/java`) is also properly supported (ignored) by Java 11 if I remember correctly.
You mean like python? Running just `java` would start a the REPL.
This is something I think gets overlooked quite a bit. Modules are great, but they aren't the only way to use the new stuff. At least for application developers. I wish more libraries had proper module support already.
Here. Plus, away from J9 probably.
As an Eclipse user, same here. Never run anything from the terminal.
right, the company that set back desktop linux by 10 years, and ruined audio and init files on linux is gonna swoop in and "save" java
This was already posted [barely a week ago](https://www.reddit.com/r/java/comments/9fgigm/a_guide_to_logging_in_java).
ok
I wonder how long he was waiting for big boss approvals to post this. As someone who has worked with Andrew and his team in the past, I don't care what some might think about trusting Red Hat in the bigger picture. Now that this has been posted, he'll fight tooth and nail (and probably win) to make sure the technical outcomes are the best possible. And the fact that this has been posted means he has probably already been fighting for months. I don't venture into java-land often these days, but I'm happier knowing it's a better place thanks to aph.
I'm sorry what does this mean for Java? Is Java dying?
PulseAudio and systemd are awesome. Y'all crazy.
It's been a while for me since i used activeMq, wasn't their a UI interface listing all the channels and queues? I'd assume that's the easiest way to check....
Does that mean Oracle is going to make security fixes for paying customers only, and Red Hat and the community will be separately reimplementing those same security fixes for everyone else? That's insane!
Oracle is part of the community, and very much involved in the vulnerability group. The VG develops the security fixes.
&gt; I wonder how long he was waiting for big boss approvals to post this. "It was about an hour", he says.
Yup, login to the broker at [http://localhost:8161/admin](http://localhost:8161/admin) unless you've changed it. See [http://activemq.apache.org/web-console.html](http://activemq.apache.org/web-console.html)
I haven't used REPL / JShell, but it seems they have different use cases. Running the file with `java` requires all the normal java syntax rules, and run the `main` method of the file. I use it to run simple .java files as I'm writing them in vim, without having to using an IDE or scatter .class files around. 
jshell in JDK 9+ does that.
I was surprised these are illegal. &gt; var lambda = () -&gt; System.out.println("Pity!"); That should just be `Runnable` and enforcing that arguments are effectively final. It looks the compiler will actually do that if the variable is declared as `Runnable`. The second could be inferred from the method, and just be a compiler error if `this::sometMethod` couldn't be converted to a valid class from java.util.functional &gt; var method = this::someMethod;
Java is not dying. You just have to choose an Open JDK build, not an Oracle one: https://blog.joda.org/2018/08/java-is-still-available-at-zero-cost.html https://blog.joda.org/2018/09/time-to-look-beyond-oracles-jdk.html
Thanks for the chuckle :D Oracle can't win, can they? It's either "Oh no! Oracle is in control. They're going to make me pay money!" or "Oh no! Oracle gave control to someone else! It must be dying!"
Nice! How about a build for Solaris x64? The site has the download for Sparc...
The architects said they are going to focus on macOS, Windows, and Linux. You may be able to get builds for Solaris from another vendor.
The wait for Adopt OpenJDK builds begins.
OpenJDK builds (GPL2+CE): http://jdk.java.net/11/
The downloads on this page are currently early access builds (11+28). Oracle has the full releases on their page.
BEGIN THE MASS MIGRATION!!! _Actually really excited to start the roll out at my company_
No, Oracle will make fixes for the latest OpenJDK version and if you continuously update then there is no issue. Only those that want to stay on a single version(LTS) for a longer time need to look for vendors that back-port the fixes.
Note that this post from Red Hat explicitly refers to Amazon taking on a greater role in the OpenJDK space: [https://developers.redhat.com/blog/2018/09/24/the-future-of-java-and-openjdk-updates-without-oracle-support/](https://developers.redhat.com/blog/2018/09/24/the-future-of-java-and-openjdk-updates-without-oracle-support/)
Whoa...
They updated the page an hour or so ago -- you may just need to refresh.
Nope, they just point to the EA builds: https://download.java.net/java/early_access/jdk11/28/GPL/openjdk-11+28_linux-x64_bin.tar.gz Which isn't a problem since [that's the official release build according to Mark Reinhold](http://mail.openjdk.java.net/pipermail/jdk-dev/2018-September/001973.html)
I've already been on it for a week or two now. There's some issues with my tooling or tools I want to use, but I imagine that will get worked out soon.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Woah, two times lighter than v10: 171.43 MB (jdk-11_linux-x64_bin.tar.gz) vs 338.43 MB (jdk-10.0.2_linux-x64_bin.tar.gz)
&gt; I don't go near desktop linux that explains why you don't have a problem with systemd ;) 
FX is out! :D
Let the Great License Confusion begin!
+ it seems to be built today: $ java --version openjdk 11 2018-09-25 OpenJDK Runtime Environment 18.9 (build 11+28) OpenJDK 64-Bit Server VM 18.9 (build 11+28, mixed mode) 
You can already see it listed here: [https://www.oracle.com/technetwork/java/javase/downloads/index.html](https://www.oracle.com/technetwork/java/javase/downloads/index.html)
the main developer has been really engaged on the mailing list too and open to suggestions and improvements. there are ClassLoader and classpath improvements in the pipe to make it useful in even more situations
Ah, that's fair. Coz I know we had some problems with the java.se module as well.
Given they're not going to back port changes, why?
There's going to be a lot of angry Oracle customers.
It will be available to everyone without subscription for a week. Enjoy!
You can see what features have been added so far by going [here](http://openjdk.java.net/projects/jdk/12/). I don't think they will make it into 12, but we'll see.
It will be available for everyone without subscription for a week. Enjoy!
Yeah, that's basically what I expected. How is that not a big F U to the people who have been Oracle customers who bought Oracle hardware running Solaris x64?
Is it a Long Term Support version?
Yes, yes. But by the time Java 13/14/15 is actually used at my organization, I will be too busy making macaroni art in a nursing home. 
True, true haha!
Yep!
Shit we are stuck on 7 because one customer refuses to upgrade weblogic. Ughhhh.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
brew upgrade java
WTF?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Oracle saying F U to Oracle customers?! Inconceivable!!!
I thought I read a note on the JDK 11 page yesterday that there would be no desktop JRE release. Only JDK and Server JRE. I can't find this note now that all the pages changes for GA release.
Because you don't go against the AdoptOpenJDK circlejerk. AdoptOpenJDK have said that they're just going to provide builds of OpenJDK repository, which doesn't help with security fixes, if no one else backports them. Oracle will provide backports and builds from the OpenJDK source for at least six months. We'll have a better idea of what will happen with Oracle in four or five months time. [Redhat/Andrew Haley](https://developers.redhat.com/blog/2018/09/24/the-future-of-java-and-openjdk-updates-without-oracle-support/) has said that OpenJDK should provide binaries themselves. So again, I ask, what benefit does AdoptOpenJDK bring?
Just pulled it down this morning from there! Do you know how long https://adoptopenjdk.net usually takes to host new versions?
Excellent question. I hope someone responds to this as I had just educated myself on the site last night and had the same thoughts.
My understanding [based on this thread](http://mail.openjdk.java.net/pipermail/jdk-dev/2018-August/001830.html) is that AdoptOpenJDK's purpose is to build/test so that there is a consistent location to get tested OpenJDK binaries. As long as someone is backporting fixes, it makes sense for them to keep generating builds. The OpenJDK project was in charge of development, and that will remain the case: Oracle will manage each release for the first 6 months (maybe more) and then hand the reins over to someone else, perhaps Andrew Haley at Red Hat. 
So if all I'm interested is Linux/64 and macOS/64 Hotspot JDKs, is there any reason to use an AdoptOpenJDK install over a http://jdk.java.net/11/ install? 
Here's the full changelog https://www.oracle.com/technetwork/java/javase/11-relnote-issues-5012449.html I wonder why did they remove desktop auto-updates...? It's almost as if they are planning on breaking backwards compatibility soon and don't want random Java stuff breaking for desktop users... Also why are all the of the rationales involved in the removal of auto-updates, Web Start, JavaFX, JMC, etc. "not public"? Like I don't mind security stuff being not public but these things...? You pretty much just have to assume that they're hiding some upcoming plans that most Java developers and users aren't going to like what's in there... Highly suspicious! I sure would like to see what they don't want me to see in those otherwise harmless docs!
No, but most of your changes will (likely) be "update your dependencies". Then build and run. Building will find like 90% of the problems. Running will find the other 10%.
What about the spring boot project which depends on Java ee?
https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-with-Java-9-and-above If you can't find "lib with Java 11" try searching with 9 instead since that is where most of the breaks occurred.
Wonderfull tool. In this modern world, thread dumps are still analyzed in a tedious &amp; manual mode i.e., you have to get hold of DevOps team, ask them to send you the thread dumps, then they will mail you the thread dumps, then you will upload the dumps in to a thread dump analysis tool, then you have to apply your intelligence to analyze it. [https://blog.fastthread.io/2016/10/27/thread-dump-analysis-api/](https://blog.fastthread.io/2016/10/27/thread-dump-analysis-api/)
You should be able to get them here: https://ci.adoptopenjdk.net/job/build-scripts/job/jobs/job/jdk11/ if you don't want to wait for the homepage to be updated.
Interesting. Thank you for the link. I've got to wait for their homepage to update though because I am doing a video on Spring Boot with OpenJDK and I'd like just to show the audience the homepage instead of navigating to the CI area. Thanks for that link though! For work I actually nabbed it off the Oracle site today.. but I heard folks like AdoptOpenJDK better so I'm just trying to figure out how it differs.
I plan to keep my personal site on 8 for as long as possible.9+ is missing too much useful stuff. Oracle is now an abomination.
&gt; So I guess the downloads are functionally identical Previous EA/RC build (from August) and GA build are identical (same SHA-256 checksum)
&gt; Path writeString(Path, CharSequence, java.nio.file.OpenOption[]):Write a CharSequence to a file. Characters are encoded into bytes using the UTF-8 charset. Unfortunately `Files.writeString` [is broken](https://bugs.openjdk.java.net/browse/JDK-8209576). In some cases, it writes as UTF-16 instead of UTF-8 which may corrupt output and cause read errors.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9izl3m/intellij_question_shortcut_on_how_to_get_to_next/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I’m worried about changes to CORBA dependency. Does it mean RMI will no longer work?
This is a really good investigation. Just wanted to say thank you for all the time you've put in. On other note, I've got a more realistic view regarding Graal. I still believe it can be a big game changer for Java, but now I know that it still has a long way to go. 
Unlikely. It is to expensive to support all releases for a long time, as you would have to backport and test everything on dozens of releases after a couple of years, so all other vendors and OpenJDK contributors will most likely also focus on the LTS releases for long term support, just like oracle. That is what LTS releases are for.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/learnjava] [Which Spring Course to buy on Udemy? Or any where else to learn Java Spring?](https://www.reddit.com/r/learnjava/comments/9j02hi/which_spring_course_to_buy_on_udemy_or_any_where/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
What are you missing? All the modules that have been removed are just a maven/Gradle dependency away 
There hasn't been a separate JRE download for a few releases now. You need to install the JDK. On the plus side, the JDK is much lighter than in the past.
&gt; I wonder how long he was waiting for big boss approvals to post this. "It was about an hour", /u/Andrew_Haley says.
Hey, I came here to say I started one a little while ago, never finished (I intend to), but enjoyed what I had done of it, and that was the one by John Thompson that you have listed. I actually see that after I started writing the post. I can recommend that one based on what I have done of it so far. Good video tutorials, he speaks clearly, easy to follow, has a busy slack channel as well should you need help.
This website is made by ruby its like freaking insult. 
ELI 5 what are the differents between the downloads at [http://jdk.java.net/11/](http://jdk.java.net/11/) and [https://adoptopenjdk.net](https://adoptopenjdk.net/) ? I think they are both the non oracle jdk versions which are open source?
The whole OS was discontinued, why build Java for it...
In practice it absolutely does matter. Alternative distributors of binaries are likely to follow Oracle's model if they want to present themselves as a valid migration target. At least AdoptOpenJDK have signalled their intent to match Oracle's LTS release schedule afaiu.
[Backports will already be made as part of the jdk11u project. This discussion describes AdoptOpenJDK's role.](http://mail.openjdk.java.net/pipermail/jdk-dev/2018-August/001830.html)
I'm not a big fan of udemy courses, some of the books mentioned here might not be bad, the official documentation is not that bad. I think with something covering so many areas as Spring does, it is important that you don't lose yourself in the many many details. Learn the Spring Java Config and enough of the core to understand it and the modules you are interested in now. You can always come back later and learn the other modules if you need them. 
There is no trap, they all the time mention you can download the OpenJDK build But yesn Keep doing your Oracle bashing, after all they are the one who are funding all the new features, but yes, everything should be available to you for free, i'll also work for you for free if you wish, i can also give you my house for free
the current OpenJDK build (on https://jdk.java.net/11/) is still the same as the beta-28 release. Is this... intended? Downloaded the oracle one earlier, as it looked like the only one that had actually been updated at release yesterday.
Oracle will find ways to make you use it instead of OpenJDK. 
Just use the openJDK. Going forward Oracle says the openJDK and Oracle JDK are functionally identical and only cosmetically different. If anything this is just a positive push for the open source variety.
As per the OpenJDK release announcement, 28 is the GA: http://mail.openjdk.java.net/pipermail/jdk-dev/2018-September/001973.html
Looks like it's been fixed on the 20th August in jdk12. Just needs someone to backport it to 11. 
Could not agree more
&gt; It is a major release because it has long-term support (LTS). I find this baffling. A "major version" has both a popular connotation and a (compatible but) more specific and precise meaning for OpenJDK. While it is true that according to some reasonable interpretations of the (rather vague) popular connotation Java 11 is a major version, according to the same interpretation, so are 10, 12 and 13. According to the more specific and precise definition of OpenJDK, Java 11 is *not* a major version, and neither are 10, 12 and 13; one of the main goals of the new release model is to make upgrades easier by doing away with major versions altogether, and Java 9 was the last. Because the meaning of a new version number has changed *radically*, so has the name (feature releases and feature releases with LTS). I don't understand why use old terminology that no longer applies, especially if the goal is to clarify rather than confuse. &gt; Is this trap malicious behaviour on the part of Oracle? Readers will have their own opinions. Readers should at least take into consideration that when [attempting to download the commercial build](https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html), the page displays a large, red-and-yellow notice that the license is now "substantially different," as well as mentions and links the GPL build.
That is borderline insane: how would Oracle even know whether you're using their JDK or OpenJDK in production? How exactly are they gonna give you a nasty phone call (or whatever it was the author said)?! License-wise, yes, the article has a point but "don't download you'll get sued" is bonkers!
Some courses definitely don’t give nearly enough insight into the topic but both Chad Darby ( who is definitely my favourite teacher on Udemy) and John Thompson have been pretty good. If you’re a beginner, I would highly recommend Chad Darby as Thomson sometimes races though topics. Chad’s course is ‘spring and hibernate for beginners’
They plan to be there later this week. Passing the tests (TCK) can take a few days.
The download notice does not say "commercial use only", which is IMO deceitful (you wouldn't know without reading the legalese). I find Java 11 to be a major release because it will be widely adopted by slower-moving shops simply because it has LTS. With the new numbering, "major" is not about features, it is about support. I covered this here: https://blog.joda.org/2018/09/java-release-chains-features-and-security.html (Migration from 11 to 12 to 13 is not like 8 to 8u20 to 8u40, and repeated protestations from Oracle don't make it true)
Speaking as one who regularly receives calls from Oracle asking if our company needs any "assistance" with Java or MySQL, they check your company's website to see what you recommend for download and/or offer links for. If you have instructions for downloading Oracle stuff or indicate that your product uses it, that's what they look for. They probably have other ways, too, but that's the one I've seen.
Yes, the actual goal - more use of OpenJDK - is great. It is just a pity that all the links Oracle produce point at the commercial build, without proper clarification of the risks that ensue.
&gt; The download notice does not say "commercial use only", which is IMO deceitful Because that may be confusing as it's not what the license says. It does refer you to the actual license, which is shorter than the GPL. &gt; I find Java 11 to be a major release because it will be widely adopted by slower-moving shops simply because it has LTS. But that's not what "major" means. &gt; Migration from 11 to 12 to 13 is not like 8 to 8u20 to 8u40 And it's not like 7-&gt;8 or 8-&gt;9, either, hence the new name.
If you already have the 2nd edition then there's no need to rush out for the 3rd, but if you don't have a copy at all, get the 3rd edition! Everything it says about Java 8+ features is solid advice, and the rest of the book is as great as ever.
But it's not for "commercial use only". Let's review the facts: 1. Oracle has changed the license and has announced these changes far and wide. 2. You don't need to read "legalese." The new license (https://www.oracle.com/technetwork/java/javase/terms/license/javase-license.html) is very clear. It states *in plain English*: "use the Programs for any data processing or any commercial, production, or internal business purposes other than developing, testing, prototyping, and demonstrating your Application;". How is that not clear? 3. Everybody at Oracle has said repeatedly don't download the Oracle JDK unless you want Oracle support. There has never been any confusion or attempt to confuse. **It's all there in plain English, out in the open.** And yet people like you are constantly driving FEAR, UNCERTAINTY, and DOUBT about this. You accuse Oracle of being "deceitful" and laying "traps." It's pure madness. Seeing all this I can only wonder what the hell is wrong with you. All of this has spelled out very clearly over and over. All the confusion around this is *due to people like you* trying to scare people. You've literally invented the problem you're constantly trying to warn people about. Again, it's madness.
I've tried to check out what's Firebird on their website, but I couldn't find anything. 
Well, I guess at least as far as this subreddit is concerned, this "trap" has been sufficiently warned of, over the past months...
How about GraalVM? Is it "trustworthy"?
Except for the large, red clarification?
Funny thing is that in the footer of the page\[1\] there are Oracle logo and trademark notice. \[1\] [https://jdk.java.net/11/](https://jdk.java.net/11/)
So you trust oracle that much?
That says nothing without clicking away from your download. It should say something more like "Don't download this unless you want to pay us".
If these have been deployed in docker containers, these are generally already OpenJdk. One would need to go out of their way to find an oracle based container. &amp;#x200B; Any business worth their salt would have researched this anyway (Oracle isn't the first company to want to charge people for their product) And Oracle has been very upfront and transparent about this in recent months.
This course is awesome: [https://www.udemy.com/spring-tutorial-for-beginners/](https://www.udemy.com/spring-tutorial-for-beginners/)
Because Java is still free, you just can't use the Oracle JDK in production now without paying for a support contract. There are free alternatives and the OpenJDK has parity with the Oracle one. Secondly, this news was announced many months ago and as been widely disseminated and discussed since then. A company charging for support for an open source product is a common business model in the open source world and that is all Oracle is doing. They have their own version of the JDK that is built from OpenJDK and if you want to use it you pay for a support contract. If you don't want or need support from Oracle there are other builds of the JDK available also built from OpenJDK. Some of those are built by other companies that are also following the model of charging for support (e.g. Azul). 
&gt; But by the time Java 13/14/15 is actually used at my organization What version is your organization using now? Java 15 should be released September in 2 years.
Because that's an Oracle website. You'd expect to see them there.
&gt; Get a nasty phone call from Oracle's license enforcement teams demanding lots of money At which point you say, "Oops" and you run the same bytes on the OpenJDK instead and tell Oracle to pound sand. Except that they would never actually demand money. They would just politely ask you to stop using their JDK, while helpfully providing you contact information to sales in case you'd like to purchase it. &gt; (No comments on this post. There are plenty of other places to express opinions.) Because the comments would contain phrases like "click bait". As far as I'm aware, there is no meaningful technical difference between the Oracle JDK and OpenJDK, are am I missing something?
[What's New in Effective Java's Third Edition?](https://marxsoftware.blogspot.com/2018/01/new-in-effective-java-3.html) provides an overview of the updates to *Effective Java* for the **Third Edition**.
Yes, the JDK was always a superset of the JRE. If you install the OpenJDK build from https://jdk.java.net/11 you can continue using Java as you always have. The only difference is that there may or may not be a shorter timeframe before upgrading to a new version, but the differences between Java versions is a lot smaller than they were prior to Java 10.
Because it *has* been all over the web for at least a year, and it really isn’t a big deal.
&gt; There are also lots more Emojis, including the long-awaited (apparently) Colbert Emoji. Well if this isn't a reason to drop everything and upgrade to Java 11 right now, I don't know what is!
I have both courses, and they are a bit different from each other. I don't consider myself a beginner, so going in on Chad's course was really not for me. He is knowledgeable and friendly, but the progress is very slow (so better suited for beginners). Instead I went with John's course. Here he keeps a certain tempo going. Sometimes it goes a bit fast and he fails to explain why he does certain things, however, it is something he may detail later on. I'm still doing the course and I enjoy it. BTW. He uses Intellij Idea instead of Eclipse if that's important. 
I'll start. I work for a large multi-national with hundreds of internal Java-based systems. Short-term, we are probably going to pay Oracle a significant amount of money for Java licensing. However, management is very unhappy with Oracle's behavior and they have been placed on a vendor blacklist, so going forward any use of Oracle technology in new projects requires additional justification and approval. This includes their RDBMS (!), which we use for 99% of our systems today. Mid- to long-term, I see this accelerating our move away from Java on the desktop. We will be moving to OpenJDK on the server-side (free LTS from our Linux distro partner), which will probably also accelerate our move away from WebLogic. Finally, there is some grumbling about moving to alternate technology stacks entirely. While this might get some traction, I think the likelihood is very low. So in 5 years the most likely outcome seems to be: no more Java on the client-side, OpenJDK on the server-side (instead of Oracle JDK), no more WebLogic on the server-side, and fewer contracts/licenses with Oracle in other areas due to the blacklisting...
I think it’s probably irrelevant till Java 12 comes out. When it does, it’ll be available for public download. At that point, Oracle Java 11 LTS will only be available for download with a login which will know whether you paid or not. 
&gt; It includes a link to the standard Oracle download page. You mean the download page with a big "Download" button that takes you to a commercial JDK, whereas for the last decade or so going to the standard page got you a free JDK instead? That's the trap.
I'm not here to argue if it's an intentional trap, poor documentation on Oracle's part, or just links that haven't been updated yet... but I saw the thread and it looks like others are having the same questions I have. I've been reading through the documentation to see what we need to do as a company to stay compliant. Maybe I haven't found the right documentation yet, but there is still a lot of confusion for me. The one thing that seems clear to me is this that the license has changed and if you want it for free, then use OpenJDK ([http://jdk.java.net/11](http://jdk.java.net/11)) &amp;#x200B; What isn't clear to me is this: * There is a Windows download on that page for what I assume is OpenJDK, but it is in Zip format. I'm not sure how to install it. * If you follow the installation instructions on [http://jdk.java.net/11](http://jdk.java.net/11) take you the corporate download page - there aren't any instructions on how to install OpenJDK that I could find. It's still pretty early in the release of 11, so I'm assuming that this is an error, and they still need to publish the OpenJDK installation instructions? * We have only ever needed JRE to run web apps...is JRE is included with OpenJDK - I think someone in another thread was able to point me in the right direction with this one - but I can't test it because I can't install the contents of the zip file. * What about our x86 clients? Will we need to purchase support to keep getting security updates for JRE 1.8 x86? I don't work with Java unless I absolutely have to - which is just mainly pushing updates to it. So it's likely that I have missed something somewhere that spells this all out clearly. My biggest hurdle right now is getting OpenJDK 11 installed so I can have people testing their apps with it. If anyone can provide some clarity, to any of the questions above, that would help me a lot. &amp;#x200B;
Why?
It would be unusual to use oracle for personal use or development and deploy on openJDK. How about: Use in production requires a paid license. See license for details. 
Since you are on this reddit, I'm assuming you are trying to get the jdk. Install https://sdkman.io/, pick an OpenJDK instead of Oracle SDK (it supports both). 
With Mac, I just had to move the Java 11 folder to where my previous JDKs were. I’d assume it’d be the same with Windows. I hadn’t been able to download it on my PC yet.
I appreciate the desire for more succinct communication, but it is not the same as, "beware trap!" It attributes to malice that which is adequately explained by big-corp culture.
Chrome versioning is leaking.
Thanks for posting those links. Going through bugreport.java.com will work, but sometimes it's hard to track what's going on with the bug report. You'll get some kind of opaque tracking number but the submitted bug will drop into a black hole for a certain amount of time (depending on the backlog of the triage team), after which it might resurface in the OpenJDK bug database. If you want to talk to someone, the mailing lists are probably a better bet. Sometimes an apparent bug can be clarified, or the actual underlying cause can be revealed. I'd suggest not starting out with core-libs-dev, unless you already know that the issue pertains to "core libraries" (java.lang, java.util, java.io). The core-libs-dev list has a HUGE amount of traffic and it's easy for stuff to get lost. Instead, perhaps a better bet is to start with the discuss@openjdk list, and ask about which mailing list is a good a good place to discuss the issue. Or, as noted, if you're interested in discussion of a specific JEP, use the mailing list listed in that JEP.
Ask your legal department if "Oops" is a valid defense tactic.
Note, `Thread.destroy()` never worked. The `Thread.stop(Throwable)` overload was removed; it had been disabled since Java 8. The `Thread.stop()` (no-arg) overload is still in the system, and it remains deprecated, but it probably won't be removed.
If the class is already loaded: Instrumentation [https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html](https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html) If you're loading the classes using a custom classloader: You can use ASM to modify the bytecode [https://asm.ow2.io/](https://asm.ow2.io/) If you're mad enough, you can use JVM Tool Interface too: [https://docs.oracle.com/javase/8/docs/platform/jvmti/jvmti.html#RedefineClasses](https://docs.oracle.com/javase/8/docs/platform/jvmti/jvmti.html#RedefineClasses) or ClassFileLoadHook on the same page &amp;#x200B;
Note, `Thread.destroy()` never worked. The `Thread.stop(Throwable)` overload was removed; it had been disabled since Java 8. Thus, there isn't be any recent code that actually uses these methods. Now there might be code bases that have dead code with calls to these methods, and their removal is a source incompatibility, because such code would no longer compile. That doesn't seem like a big deal though. The no-arg `Thread.stop()` overload is still in the JDK, and it remains deprecated, but it probably won't be removed. 
I'm just curious about what you will do that can't be achieved with a dissassembler and can be done manipulating arrays of bytecode... You can manipulate the flow of a program debugging disassembled code. 
I'm just curious about what you will do that can't be achieved with a dissassembler and can be done manipulating arrays of bytecode... You can manipulate the flow of a program debugging disassembled code. 
Java 8
Usually Java apps are distributed as jar packages. Next time please ask such questions in r/javahelp
The trap is that there may be people out there that do rush through it because they've downloaded Java 100 times before. And then they use it for 3 months and end up with 3 months of code that needs to be refactored. Oracle needs a better website (clearly). At least I won't be one of those people now
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
If I had to guess, the commenter might be implying that there isn't really that much new. The author pretty much just added the newer java features (lambdas, streams, etc.) So if you bought the 2nd edition then you'd only be buying the 3rd for a few chapters. I read the 3rd edition without ever reading the 2nd and I thought it was great. Learned a lot I never thought I would
To be fair, akin to JVMTI, you can use a Java-implemented agent to request class redefine (or request agent retransform) and mutate the bytecode instead of via native code (I've done both with success).
I've been out of Java a bit since about when JDK 9 landed, so this was a great way to get caught up quickly. Your teaching style also made it easy to put on headphones and let it play while working. Really well done, thanks for putting it together!
That page DOES NOT give instructions on how to install OpenJDK 9 10 or 11. It just tells you how to extract the .gz archive, which we do not need help with. All that gets you is a new jdk-11.jdk dir in whatever folder you downloaded it to. This is not 'installation'. This does not place it in the folder where Oracle JDK 10, or even tell you where these things reside. 
Both are OpenJDK builds. jdk.java.net contains binaries built by Oracle.
Yes, that is intended, that's how the release cycle works. You can't ship something without going through QA. That means any change requires another set of testing. So alpha27747 and beta32 and rc2 may very well be the same version going through the release cycles.
pass TCK on hadoop
yep, it says person, but a company is not a person, and they make contracts with companies not with persons.
all companies do web scraping/buy data on shops related to their interests so that they can target them directly and in a personalized fashion or maybe to compete with them, etc. It is very, very common.
how come we're not all up in arms that glassfish, wildfly, liberty etc. have horrible documentation and are usually abandoned after the first few releases. Oh wait, I know why... we all use Spring
On Linux this will not be a big matter, also in enterprise environments. Since all package managers include stable and reliable versions of OpenJdk. On Windows in enterprise environments my first thought is, if there are MSI packages for proper Java runtime rollout. I've found: [https://github.com/ojdkbuild/ojdkbuild](https://github.com/ojdkbuild/ojdkbuild) and [https://developers.redhat.com/products/openjdk/download/](https://developers.redhat.com/products/openjdk/download/) &amp;#x200B; 
Yup. `sun.misc.Unsafe` allows one to access C data structures at C speed.
&gt;Why not just get it from here? [https://jdk.java.net/11/](https://jdk.java.net/11/)
Oracle through use of its other products in an enterprise (eg DB, MySQL, Forms...) has the ability to trigger an audit. As part of this audit they can request to see every Oracle JVM installation and tally up to see if it's been paid for or not. Same for MySQL and DB of course. They usually won't go after small players, they do go after larger companies though. It is part of their business model, there are entire corporate and legal workflows that companies deal with when Oracle comes calling. The most ridiculous thing of all - there's even an up-front settlement fee that you can pay for them to *not* audit you. Re: your other comment, they aren't wasting time calling or emailing people, this is a normal part of their business. 
&gt; Going forward Oracle says the openJDK and Oracle JDK are functionally identical and only cosmetically different. So what’s the point of separate licenses?
An actual oops means you never entered into an agreement, so I think it actually is. It would be if you kept using it after you knew it cost money.
That are great questions, Gunnar. Thanks for that. First of all, there is no "instead". A lot of people from the reactive community have followed the activity on the ADBA mailing list which is visible from the list archives. But here's the gist. We suggested adjustments to it to elevate it from a purely asynchronous API based on \`CompletableFuture\` to also work with JDK 9's \`Flow\`. That was deemed out of scope of the project. We then wanted to explore what's possible if these restrictions don't come into play and we design an API based on Reactive Streams. This not only allows handling real streams of data in a reactive way, it also allows drivers to implement backpressure. Something that's just not possible on a plain asynchronous API. That said, we're not building a replacement for ADBA. There have been signs recently that the team is interested in resorting to \`Flow\` in parts of ADBA and we will continue to chime into the conversations or just influence the direction of ADBA by providing an example of something that actually works and makes the benefits a purely reactive API offers. We're in good discussions with a variety of database vendors and ecosystem projects to experiment with what we have. I'm gonna summarize the state of the project in more human approachable fashion on the \[mailing list\]([https://groups.google.com/forum/#!forum/r2dbc](https://groups.google.com/forum/#!forum/r2dbc)) (currently rather silent) next week. Until then feel free to have a look at \[the examples\]([https://github.com/spring-projects/spring-data-jdbc/tree/r2dbc#r2dbc](https://github.com/spring-projects/spring-data-jdbc/tree/r2dbc#r2dbc)) and play with those.
Thanks for the kind words, glad you enjoyed it!
Count me in!
intellij only supports writing for java 11. it can't actually run on it.
Since this is Oracle we're talking about, people are more likely to assume malice.
Question: If the Free and NON-Free JDK are the same actual bytes, then how do you prove that you are using the Free version? &amp;#x200B;
AspectJ and bytecode weaving maybe? Or bytebuddy. Never got bytebuddy to work, but aspectJ with the around annotation was fine enough.
There is no need to install anything. It's an SDK. Extract it wherever you want.
I am happy to give Oracle credit and a very big thanks for what they do. And I don't want to seem ungrateful. At the same time, Oracle is one of the mega corporations I trust the least. So I do look at things in the light of what is the worst possible way I could interpret this as far as it getting me into trouble? 
More important, I'll repeat a question I had asked much further down below. Some people say the binaries of OpenJDK and OracleJDK are the same. If so, then how do I prove I'm running OpenJDK and not the paid OracleJDK? &amp;#x200B;
More important, I'll repeat a question I had asked much further down below. Some people say the binaries of OpenJDK and OracleJDK are the same. If so, then how do I prove I'm running OpenJDK and not the paid OracleJDK? &amp;#x200B;
&gt; Java 11 may only have only just been released, but IntelliJ IDEA already fully supports it,
Then what do you read into Oracle putting a big, highlighted warning saying "Substantial license changes; read carefully; GPL version here" as opposed to a big highlighted warning saying "Substantial license changes; read carefully; not for commercial use; GPL version here"?
I’ve done equal years java and C#. Both languages and run times have their advantages and disadvantages. For the most part, I’ve seen the language preference strongly correlated to the choice of server - Linux v windows. And of course, if you are building a fat client. I like Java’s threading model and dependency management tooling better. 
Could it be that they intend to make their OpenJDK available in source form only in the future? I mean the beta 28 seems to lead people to believe that the download is not the same though maybe it is? In any case, Oracle can't be trusted. It's something we've known for years. 
&gt; this is a normal part of their business and it is very lucrative No, I guarantee you that they're not googling random companies and software and calling them to ask if they're using an Oracle JDK nor are they bashing open doors during the night shift and checking for themselves. I don't think you understood what I meant in my other comment but other than that I fully agree and am, of course aware of what you said.
Oracle's build is going to be supported for long term, with security fixes and possibly backported features, performance optimizations, etc. You need to pay a hefty sum for that and that's targeted at some of the biggest IT companies out there. OpenJDK is going to be maintained entirely for free on a release-to-release basis by the community, so if you want to get the latest patches and updates you need to migrate your environment to the latest Java every semester for the rest of your lifetime (which is OK for most companies out there but not for those same huge ones working with extremely rigid platforms and infrastructure deployments). Not only this is pretty much fair, considering they give you plenty of ability to use Java for free regardless of your personal, business or corporate profile, but is also the only way Oracle can really make decent money off of Java commercially and keep developing the language for all of us to use for free if we want to.
coming soon to jooq an admin gui, including db network analysis chart
If you were running the Oracle jdk and didn't know it wasn't free, all they can do is make you stop. By "same bytes" I was referring to your compiled bytecode, which will run equally well on either jdk.
I am a staunch supporter of Java because of its continued stability, compatibility, and vast documentation. Their is also renewed excitement about the language because of [Project Amber](http://openjdk.java.net/projects/amber/), [Project Loom](http://openjdk.java.net/projects/loom/), [Project Panama](http://openjdk.java.net/projects/panama/), [Project Valhalla](http://openjdk.java.net/projects/valhalla/), [Project Metropolis](http://openjdk.java.net/projects/metropolis/), etc. The future is long and bright!
What do you use Java for personally?
Figuring out what learning Java can do for you is up to *you*. Some, myself included, utilize the fantastic ecosystem to create software in Java, that runs on Windows, macOS, Linux/x86 and Linux/ARM at performance levels near that of C++. So what do you hope get out of learning Java?
As a student and research assistant, I mainly work in academia right now, but have used Java to build systems for clients.
Nothing huge, but I've been working with historical societies and museums to create custom cataloging applications and such. My main area of focus is language architecture and garbage collection, though.
So is this like a desktop application? Or is it a web based app and your using Java for the server?
It is a desktop applications right now. I am currently working on a cloud-based version whenever I have free time.
Holy shit, that’s even more convoluted than a normal jira bug report. Why even bother?
I have learned quite a few languages thus far (C/C++, C#, Haskell, Python, etc), but I am best able to express myself in Java. It is just a great language in my opinion. Cross-platform applications are also a plus.
that's what i thought at first too. in fact, my first 6 attempts to join the mailing lists failed because i had one more spam filter than i was aware of :( so it took a while, but i've been really blown away by how professional the responses are openjdk is a huge bureaucracy, and having someone else take ownership of an issue and champion it is actually a blessing. that said, i feel your pain - when i find some issue that doesn't affect me directly, i don't end up reporting it 
[removed]
Java == $$$$$$$$$$$$$$$$ C# == $$$$
It ships with its own JVM so it doesn't really matter.
Windows ... HAHAHAHA
Docker aint the only container technology out there! 
So, you transferring devs relapse to get up to date with Java News as Oracle trap! Please, just stop! 
SWEET! 
I see that spring is boot is only required by the client as a test dependency. Am I reading that right? Is spring not a required dependency? 
It’s not beta-28, it’s _build_ 28. Build 28 is GA.
it does since I want to run it on non-java 8 jvms.
Looking forward to this series.
Nice, but the look &amp; feel of the 'webapplication' feels unpolished. 
Looks interesting. A bit unpolished though, some icons are unaligned (e.g. close button in console), etc.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
`sudo apt install openjdk-8-jdk` Not sure why you are trying to install the Oracle version, the world is moving away from Oracle Java builds.
Some key features included in the new release: Flight Recorder and the now open sourced Mission Control: This will bring a lot of power to developers that need performance and troubleshooting help. No-op garbage collector: It will be very effective when it comes to distributed systems that consist of a lot of super short-lived services. Launch Single-File Source-Code Programs: This appears to be just a small change, but for newbies to learn Java, it is of great value, just like the jshell. VarHandles: A large step towards eliminating the need for the use of sun.misc. 
Any idea, how new feature VarHandles will help ??
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
\&gt; There’s several metrics - according so some post on Stackoverflow ‘Virtual Size” aka VSZ is a good metric No, VSZ is a bad metric, and you are actually showing RSS in the next paragraph. Perhaps this one slipped through? Otherwise, nice article. But the flow is kinda strange. In summary: "We use Spring Boot for micro-services, but Spring Boot is slow and heavy, so we want to use GraalVM to make it start up quicker. But we can't because Spring Boot heavily uses reflection and dynamic class loading, which is not supported by GraalVM very well. So in this example we use javalin, which is small and fast even on traditional VM, so we would not have needed GraalVM in the first place. But it's still faster and smaller with GraalVM. So, profit?" The \*\*tl;dr;\*\* would be: GraalVM is nice, but not a silver bullet. &amp;#x200B; &amp;#x200B; &amp;#x200B;
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
AdoptOpenJDK will have security patches for the next 4 years. https://jdk.java.net/11/ will only have those patches for 6 months.
Good catch, i forgot to update that sentence. Thanks! VSZ just didn't make sense from the numbers. Didn't dig too deep into that. &amp;#x200B; About the TL;DR: i think even the lightest Java applications are too heavy-weight. So yeah as you said, GraalVM could help, but compatibility is a problem. :) Everybody has to decide what's too heavy and what isnt. 
Following !!
I remember when 22 megabytes seemed like a very large project. Then I started fucking with Spring and hibernate...
Azul (who I work for) provide MSI files for the Windows version of Zulu JDK. We hope to make our JDK 11 GA builds available shortly and these will include the installer files. With the introduction of the Java Platform Module System in JDK 9, the distinction of a separate JRE was removed. The advice for future deployments is to use jlink and create a Java runtime tailored to your application. You can still do that and leave all your application code on the classpath but you need to use jdeps to create a list of JDK module dependencies. Hopefully, those two things will solve your issues.
In our company we are not planning to switch to java11
This seems almost like it's directed at /u/jodastephen
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You’re right. There are no Spring dependencies in R2DBC. The only reason *we* run this, is that we *need* something like this to complete the reactive picture of WebFlux in the relational database space. So, R2DBC SPI is based on Reactive Streams, both the client and the Postgres implementation use Reactor as reactive implementation library. Those artifacts are then consumed downstream by Spring Data.
So once OracleJDK gets a backported feature, how is it functionally identical to OpenJDK which did not get that feature?
Be sure to chime in on the Google group of the initiative: https://groups.google.com/forum/m/#!forum/r2dbc
I'm impressed that Oracle isn't now charging us to view the release notes.
This doesn't and can't apply to previous versions of the JDK, right? Can anyone confirm?
The problem with that is performance. Last time I looked into the open JDK, I believe the performance was much worse than oracle's JDK. How are things looking now?
This is what happens if you don't specify an `Executor` by calling `HttpClientBuilder#executor`: ```java Executor ex = builder.executor; if (ex == null) { ex = Executors.newCachedThreadPool(new DefaultThreadFactory(id)); isDefaultExecutor = true; } else { isDefaultExecutor = false; } ```
Can you please answer this: - Can I keep using oracle jdk 9 / 10 without this change? - Are there any performance differences between OpenJDK and Oracle JDK?
Is the “fast booting apps” business any good?
&gt; Can I keep using oracle jdk 9 / 10 without this change? I am not 100% sure, but I think so. &gt; Are there any performance differences between OpenJDK and Oracle JDK? No. OpenJDK and Oracle JDK are now (starting with OpenJDK 11) *the same* software distributed under two different licenses (there are some cosmetic differences detailed [here](https://blogs.oracle.com/java-platform-group/oracle-jdk-releases-for-java-11-and-later)). 
Is there binary compatibility between the versions? I actually use scala, but my laptop is still on jdk 9. And I've been developing a project using jdk 9 in Scala. Can I expect it to keep working if I switch to openjdk 11?
Thanks! I love that you guys are doing this. I don't use spring anymore and this library is looking great. I'm glad I'll be able to use it. 
I would like to know why you believe that is their only remedy. To stop you. You would be technically infringing their copyright. There is a statutory minimum per-instance copyright infringement penalty of $150,000.00. They might be happy to settle for merely getting you sign a long term sales contract to use their version. Years ago there were plenty of stories of what Microsoft did when they found shops using unauthorized Microsoft software. In the end, the "pirate" would become a Microsoft only shop. No more open source. (I'm talking 1990s or possibly early 2000s here IIRC) Why do you think you would somehow magically walk away from copyright infringement? I know there might be claims that your defense team could use. Oracle wasn't clear enough that this download required a commercial license. But that might only limit their damages. I would be happy to understand, or be corrected, or to learn something about how one could just walk away from this.
If you obtained something under a certain license, then the licensor cannot retroactively change the license unless you have an agreement with them allowing this. Example 1: I buy Microsoft Foobar for $495 in exchange for a permanent license to use it. Later Microsoft decides that the license is only for one year and must be renewed annually. Furthermore, Microsoft decides it wasn't really $495, but was $695. I'm altering the terms of our deal, pray that I don't alter it any further. Example 2: You download something offered under, say, the Apache 2 license. The licensor cannot later change the terms of the license. The licensor can change the terms *going forward*, but not on anything previously distributed under license. Microsoft could raise its price, or change to subscription model. But this would not affect your existing copy of Win XP. Or an open source licensor could change their mind and start licensing iText under a new license and business model -- but cannot retroactively affect previous versions licensed under the old license. &amp;#x200B;
be careful ... they might read this and change their mind
They would not have gotten this criticism if the warning box on the Oracle JDK download page said clearly that you will have to pay Oracle if you use it in production instead of just that the license changed, or if they had separate production and development-only versions.
So why doesn't it say that? Why does it link to DMG instructions for the Oracle.com release? Why do they have a DMG install for macs and an .exe for Windows?
I get what you mean. But the OP was interested in speed. So I provided an option. Personally I have seen cases where startup time matters more than developer convenience. Hence removing the Spring dependency played a factor and helped. We did it since we were confident we could maintain enterprise quality apps without Spring. 
So why so much negativity towards Oracle? Why is Oracle puzzled by this? The author of the blog should put aside his astonishment for a sec, and look seriously at why people have such a deep dislike and/or distrust of Oracle. If this comes as a shock to Oracle employees, they are out of touch. I would suggest it is not primarily about JDK 11, or the licensing change. That is just the pebble that broke the dam. I'm trying to be helpful here in pointing this out. Just sayin' It's like Microsoft wondering why all the hate? (and I'm NOT trying to introduce politics here:) or Mr. Trump wondering why so many people dislike him and his policies. It is a problem, partly, of being in a bubble, me thinks.
This is so untrue. The internet was always going to give oracle shit. 
Nice work /u/birdayz, I've really wanted to test out Javalin with GraalVm. Would you mind if I re-published your tutorial to https://javalin.io/tutorials/ ?
You already have been told that this subreddit is about **Java**. Node.js is Java**Script** and has zero to do with Java. You also were told not to spam here. Since you violated this, you are herewith permanently, irrevocably banned from here. **Removed**
Oh damn. You're right!
first reaction...."22 Megatbytes, how is that a Microservice." then I check my own projects..... nevermind, that is indeed a small service.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9jd3fs/programmatically_bypass_project_jigsaw_at_runtime/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It is the same codebase now. Same performance. Just a different license. https://blogs.oracle.com/java-platform-group/oracle-jdk-releases-for-java-11-and-later
Oracle JDK and other JDKs will diverge once Java 12 is out. But for most users that is not a problem. https://blog.joda.org/2018/09/java-release-chains-features-and-security.html
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It's called IBM J9(without the open part) Also a bit of trivia how it got its name: https://medium.com/@rservant/how-did-the-j9-in-openj9-get-its-name-95a6416b4cb9
To be honest even that is not too bad against a big Node or Python project.
Apparently everyone is jumping on the 'serverless' bandwagon now for some reason, so I could see it having some benefit there. Otherwise though, is everyone suddenly restarting their apps all the time?
I just use dropwizard. My largest project right now is ~40mb with an embedded jetty server and it starts damn quick. If I am really looking for super small, super fast web service, I don't write them in java, I write it in go. 
Nice, so the Executor is only there to define which thread the callback will run on. Do you know the recommendations around reuse of HttpClient instances? Should I be creating a single one and reusing it (I guess depends on how many concurrent requests)?
If you don't set an executor explicitly then the client will use a cached thread pool executor.
yeah sure you can. just don't forget to give me credit in a footnote. :)
well yes, as i wrote spring boot is a huge problem. but still, another example: whenever i launch java cli tools - e.g. the kafka cli tools, you notice that small delay when starting. same for node. it's certainly not the end of the world, but native feels just so much better! one thing i didn't go into: compiling with graal IMHO exposes libraries that over-use stuff like reflection or cglib. reflection was for me personally always a hack. but that's just my opinion, as i prefer development in Go my opinion is heavily biased 
Doh. You are right, and I am wrong. https://www.traverselegal.com/blog/accidental-copyright-infringement-is-still-infringement/ Is it supposed to be character building to admit a mistake? It doesn't feel as good as I was led to believe. ;)
J9 (with or without the "Open" prefix) is definitely not a name I ever knew before today. (Do you really think I would have encountered "OpenJ9" and not recognized J9 as what I was looking for?) I suspect that the truth is that I invented the entire memory and never actually knew the name of IBM's JVM. Thanks anyway!
I'll add a notice in the beginning of the tutorial and add you as the author. I just want to make sure this information doesn't get lost, it's a great tutorial!
*sigh* direct link to the video instead of having to read a tweet then go through a link aggregator https://www.youtube.com/watch?v=9JxMxfKBr20 And the image: https://pbs.twimg.com/media/DoBqAwJVAAYDhx4.jpg
Argh...how could I have missed the typo? :D
ah my 66 pip dependencies in at 43mb in its own little virtualenv feels good. My js deps get loaded from a cdn like the bastards they are,
If you dig into IBM Redbooks you will find J9. Also they used to have Metro for real time, which eventually was renamed as WebSphere RealTime. The implementations for IBM i and IBM z do have another name, which I cannot recall without diving into docs.
what a beauty :) 
OpenJDK is great! The team at Oracle and beyond who create the code are great! The final settlement of a commercial Oracle JDK and zero-cost OpenJDK builds is great! But it sucks that Oracle's main public Java 11 messaging points developers directly at the commercial offering, not the zero-cost one. And that the download page simply isn't clear enough given the importance of the change and the risk that ensues if you download the wrong build. I've expressed elsewhere a number of ways those commercial pages could be enhanced to be clearer and thus effectively solve the issue. Its up to your management team to decide if they want to action those suggestions (or something similar).
If you own the second edition and are familiar with the changes, you don't necessarily need the 3rd edition as the changes aren't that huge. If you don't own the previous version, yes it's definitely worth it.
The name was Jikes.
Thank you! I think that’s the name I was searching for. 
I'm just glad you understand the real danger. As well as the importance of paying attention to the licensing of every single piece of software that you use. Whether commercial or open source. Oh, and some open source may have license terms which are inappropriate for your business. So be aware of what different open source licenses mean -- they're not all the same. &amp;#x200B;
Isn't Jikes the name of a compiler? Not the name of a JVM?
As noted above, no, I don't think so. :)
\&gt; Back in the day (early-mid 2000s -- the Java 4-6 era), I seem to recall IBM having a JVM implementation of their own. I think it came bundled with WebSphere of that era. &amp;#x200B; That one was called Sovereign, it was in Java 4 IIRC, and wasn't used for Java 6 (6 and later are J9), don't recall what happened with Java 5. Jikes wasn't used in any IBM JVM that ran WAS as far as I know.
The “bundled with Websphere” part was the thing I was least confident about. Pretty sure Sovereign is not the one I was thinking of. Thanks though!
dude, there are people trying to say that openjdk is just a trap, and once people are using it oracle will turn up the heat until the frogs boil they are predisposed to assuming the worst when it comes to anything regarding oracle, reality be damned
while i agree with your point, the post could've been worded a little less strongly than it has been. i've been discussing the openjdk with people as a result of your article, and they're predisposed to making up any and every kind of bullshit to paint anything java as a dead end or a trap. your article, however well intentioned has just fed the people who have decided to attack java without any regard for reality or facts as an example of stuff i've been arguing with today, i've seen people saying that openjdk is a trap because it's gplv2, and once people start using it oracle will close it up quick and then sue people for forking it with patents they have on java. it's crazy, it's not based in any case law, or in the opinions of the software freedom consevancy, or on any reputable source, but that doesn't stop people from this insane conspiracy crafting and your post just whipped them more unfortunately
Wouldn’t that be covered by IBM’s https://adoptopenjdk.net/ ?
it's MIT licensed (as noted in the readme), but i'll add a license file and headers to make it easier to find that info 
does this support maven dependencies ?
Awesome.
AdoptOpenJDK is *not* IBM's.
Iirc it was jikes. It wasn't a full VM or runtime , just a compiler. 
Use OpenJDK instead of Oracle's: http://jdk.java.net/11 You can use jlink to create the files needed for a native package, but I think you'll need another tool to bundle that in an installer or executable. jlink also only works if your application has a module descriptor, and all of the libraries you use (direct _and_ transitive) also have module descriptors You can use JavaFX like any other Maven dependency. Since the artifacts are platform-specific, you'll need some logic in your build to depend on the correct platform artifacts
Go OpenJDK with openjfx via maven/gradle and you're set 👍
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The problem is that the JVM warnings are being dumped on end users for the sins of the authors of third party libraries. The application author in between gets the short end of the stick and can't do anything about it.
This doesn't mention having \~100 print statements. What a horrible article. Downvoted
This is definitely the way to go. It isn't even that difficult to setup (if on linux).
Well, u/notfancy kinda beat you to it, but yes, I believe it was the answer I was looking for. 
Agreed !
Thanks. I'm redesigning the console part. Do you have any specific need that I should incorporate? Also, do you use it in mobile or laptop? So I can first optimize for the right form factor. 
This should work on all systems really :)
I've made cataloging/library applications in Java and in Python. The Java version was a group effort taking several weeks, with several files and thousands of lines of code. The equivalent Python version took me about two hours for a couple hundred lines of code.
&gt; people trying to say that openjdk is just a trap No, most critics are saying that Oracle's "download this for free but you owe us money if you use it in production" JDK is a trap. Stephen Colebourne's [post](https://blog.joda.org/2018/09/do-not-fall-into-oracles-java-11-trap.html) says to use an OpenJDK build instead (even linking to the Oracle one) in the first sentence.
`var log = System.err;` - the ultimate Java logging and debugging framework
Ditto.. :/ 
&gt; I suspect that the truth is that I invented the entire memory /r/MandelaEffect in a nutshell
You can use javapackager.exe from the JDK bin directory to create a MSI or EXE Installer or a portable set of folders with or without an EXE. (Javapackager calls jlink internally anyway in JDK v9+).
One thing that I notice about azure java offering in azure app service is that their java startup time is wayyy slower than other vendor such as AWS or Google cloud platform. Is it just me or other experiencing the same thing? For example, in AppService it can take up to 1 minute vs. 5 second in AWS. 
Logic is the same regardless of programming language. Obviously the filing status comes from the 4 columns for single, married together, married separate, head of household. Keep it simple and you do fine.
This will probably be how I go. I don't use an installer (it's a modding program) and I ship a JRE in a subdirectory that the executable (wrapped in launch4j) finds and uses. It seems to work OK.
no, i've been running into people saying that openjdk itself is a trap in r/programming.
You have screenshots of **other tutorials** **and top 10 tips** in your own top 10 tip article? Seriously? Apart from making this extremely low effort, I believe this is borderline copyright infringement.
Hit me up on pm.
I would start by putting each filing status in its own method. Heres the pseudocode for how I would do one of these methods: Private int singleFiler(int income) { If(income&lt;=8350) Return income × .10 Else if(income&lt;=33950) Return (income-8350)×.15+8350×.10 Else if(income&lt;=82250) Return (income-33950)×.25 + 33950×.15 .... }
It's not true that you can't do anything about it. For example, you can: - upgrade to the latest version of the third party library (many have already been updated to use and prefer public APIs) - demand your third party libraries use supported JDK APIs when available - migrate from third party libraries that aren't being actively maintained - as a _temporary workaround_ you can use `--add-opens`, `--add-exports` etc to silence the warnings. They're not _convenient_ like the hack in question (which may or may not work in alternative or future JDK implementations), but they get the job done while still making it obvious that something is doing something that perhaps it shouldn't I can sympathize with the wish for a way to just silence all warnings, but that'd be an attractive nuisance that would make it easy to keep ignoring the very *real* migration and integrity issues of applications unknowingly relying on implementation details. 
 &gt;- migrate from third party libraries that aren't being actively maintained Yes, I've been hearing all the handwaving solutions since Java 9. It's nice that such things work for the ivory tower. Down here in the real world, things have sharp corners. I don't expect you to care, but it'd be great if you weren't so dismissive. Onto the ignore list you go.
Yes, I get that you like ignoring warnings. :-) The prevalence of unmaintained libraries is a liability to everyone in the ecosystem, so yes, I'm quite dismissive of their use in particular.
/r/javahelp is for such questions.
There is no javapackager in OpenJDK 11 but I read on OpenJFX mail list that they're working on a new version.
I am using it from laptop for now. Don't know if it would be usable from mobile (due to screen real estate).
Python codebases scale fine, but my point was that beginner-level projects like student work don't really showcase Java's strengths, as those projects are much more straightforward with higher-level languages like Python. Java does have advantages (like platform independence, packaging, speed compared to e.g. Python and JS, etc.), but ease of expression for small projects isn't one of them.
There is so much FUD about this shit, it needs to end. Use OpenJDK, job done. That's all you need to know. And JavaFX is easier to use now, it's on Maven, use it like any other dependency.
Fucking tone down the melodrama Jesus Christ. Complain that people are dismissing you then proudly declare that you intend to ignore them. Great. Onto the ignore list *you* go.
Can't we just not do ignore lists? :)
I was just saying that to be melodramatic I didn't actually do anything
I just said that to sound dismissive, I didn't actually mean it.
Harmony is/was a reimplementation of the standard library rather than a JVM.
How does this work if a read-write transaction has already been started?
http://jdk.java.net/11/ will probably only have updates for 6 months. Other non-Oracle OpenJDK builds (AdoptOpenJDK, Zulu, your package manager) will have updates for 4 years or more.
That can be done at the query-level if you apply the RO hint while running ina default RW Session. Hibernate will just load the entities fetched by the query in RO mode.
Andrew Haley has said that there'll be official OpenJDK builds under his watch. 
Step 0: Just don’t ever have bugs
Wow this plus the RedHat announcement is good news for java.
For anyone running a JDK on Ubuntu, I'd recommend installing via sdkman. Its made switching JVMs and upgrading etc much easier than dealing with alternatives.
Because real developers use `jdb` by hand? There are plenty of issues with this article, but picking a popular IDE to demonstrate the points is not one of them.
I thought you were joking, but no, there's full screen screenshots of images from other pages in a browser instead of the dialog image. This is only a step up from having a screenshot in a Word document in the ranks of "Don't know how to use a computer effectively". 
How do you expect anyone to help when you don't provide any details of what you tried and what the failure might be? On linux, I did the following: \- download/install the 2018.3 EAP \- download/install the Oracle OpenJDK 11 \- rename the jre64 directory in the EAP install \- export PATH=/dir/with/your/jdk-11/bin. \- fire up the IDE. Remove any offending lines from idea64.vmoptions \- fire up IDE again. Remove the AndroidSupport plugin as it seemed to cause some grief. \- fire up IDE again. Develop with pleasure.
`sudo apt install openjdk-11-jdk`
 mojo-jojo root% apt install openjdk-11-jdk .... openjdk-11-jdk is already the newest version (10.0.2+13-1ubuntu0.18.04.2). .... mojo-jojo root% /usr/lib/jvm/java-11-openjdk-amd64/bin/java --version openjdk 10.0.2 2018-07-17 OpenJDK Runtime Environment (build 10.0.2+13-Ubuntu-1ubuntu0.18.04.2) OpenJDK 64-Bit Server VM (build 10.0.2+13-Ubuntu-1ubuntu0.18.04.2, mixed mode) /u/mods_are_arseholes just didn't read the article. It's mentioned in the first paragraph that it's Java 10.
Yeah, I use sdkman for development too, but for deployments I prefer fixed jvm installs. The article was born after I was trying to build an Ubuntu based image on EC2.
The builds at http://jdk.java.net/11 are Oracle's. They're just under the OpenJDK license.
It's certainly your bad for commenting without reading the article.
That's optional. You can download a JVM-free version.
For an open source project it seems quite difficult to report bugs.
I’d have to look up the issue again since it’s been a month since I reported it. Didn’t have the time today as I’m rushing towards a deadline next Friday and I’m not ready for it yet
 public class Main { public static void main(String[] args) { int H = 40; int W = 5; int I = 2; double T = 22.0 / 100.0; double N = H * (W - I) - T * H * (W - I); System.out.println(N); } }
Why not just use double data type for N? I don’t really get your problem here. Or do you mean you want to parse the value of N to double?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Do not give out solutions. This is against the rules in most if not all programming related subreddits.
/r/javahelp is for help with Java programming. You will need to provide a lot more than just your assignment. You will need to show your code. *removed* - programming help needs to be reposted in /r/javahelp
&gt; * upgrade to the latest version of the third party library (many have already been updated to use and prefer public APIs) But not all &gt; * demand your third party libraries use supported JDK APIs when available Need a solution until January 2019 &gt; * migrate from third party libraries that aren't being actively maintained There's no alternative or it's so deeply rooted in the application that you would have to rewrite it from scratch &gt; use `--add-opens, --add-exports` None tech-savvy customers or in general not having control over the deployed JVM 
Alternative: [Weakening Agent](https://gist.github.com/raphw/91c81b8afdfd76ccfd87508a0af0e8bb)
Opening a package to all unnamed modules works fine, e.g., `--add-opens=java.base/java.io=ALL-UNNAMED`
It does work on all systems. I was just saying from my perspective as a Fedora user, it is very simple to set up an OpenJFX project with gradle. As I haven't done that on other platforms I can't speak to the ease, but I imagine it similar once they are installed anyway.
TL;DR; Spring WebFlux, both with Postres and Mongo, performed very poorly in that particular test (called Fortunes), worse than non-reactive Spring. It did better in other tests, though. In the Fortunes test the application is required to select a list of data and render a HTML based on that list. I would very much like to hear from experts about the reasons. Here's what I think: In case of Postgres, Spring's version uses JDBC (and JdbcTemplate) for accessing the database - a totally synchronous API. It then wraps it into Flux. One of the fastest frameworks - Vert.x - uses a truly reactive and low overhead [reactive-pg-client](https://github.com/reactiverse/reactive-pg-client). However, in case of Mongo, Spring uses reactive Mongo client and that doesn't help much for some reason. Another problem, I think, is template rendering. Vert.x submission uses the fastest there is - [Rocker Templates](https://github.com/fizzed/rocker). Spring uses Moustache templates, passing it a Flux instance as the list of data. I think that Moustache renderer, when iterating over the collection, just collects everything into a list underneath, so it is a sort of blocking operation. This may explain why Spring WebFlux performs so poorly when tasked to return a HTML, but is better when the result must be a JSON (I think it can streamingly render JSON from a Flux).
you are a good person 
I can't stand eclipse. And yes it is one of the two most popular IDEs. 
in short: spring is weighed down by old inefficiencies. Switch to vert.x, it's more fun too.
Except not, because Jikes!
A good explanation can be found [here on stack overflow](https://stackoverflow.com/questions/52511778/how-to-install-openjdk-11-on-windows/52531093#52531093)
It’s all about productivity vs performance. Spring has a library for everything. Some times you need one sometimes you need the other. 
Off topic, but AdoptOpenJDK is a poorly chosen name. Some better alternative names: * LibreJDK * FreeJDK * EverJDK * CoffeeJDK * etc.
Also looks like Oracle never learns from its mistakes and insists on continuing the same old failed practices (Hudson/Jenkins, OpenOffice/LibreOffice, MySQL/MariaDB, Open Solaris/extinction, etc. etc.)
I didn't read any of your response and immediately downvoted when I read "You're incredibly stupid". Totally uncalled for.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The some nice QOL stuff in there for Java. Keep it up!
It looks like in your [submission](https://www.reddit.com/r/java/comments/9juio5/upgrade_habits_oracle_jdk_11_and_javabased/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Reactive Spring is blocked until we get a well supported asynchronous database driver standard. I know there are several efforts out there, but they aren't here yet.
interesting. I didn't see boosted performance with openj9 on my apps, but then again that was a year ago so things may have changed. i always did see the memory usage reduction, but then again, that may have something to do with openj9's gc algos being more eager to release unused heap than hotspot's hopefully this gets changed in 6 months with java 12: https://bugs.openjdk.java.net/browse/JDK-8204089
Yeah, I only saw a small, 10-15% perf improvement. But the memory improvement was massive.
No, I think its pretty good and conveys its purpose pretty well.
I also started using vert.x a while ago. Somehow I feel more productive with it despite the weirder code I write.
adopt openjdk is openjdk, and it's backed by oracle too.
Same here: we need to use Postgres as our database backend because Grafana doesn't really support MongoDB that well. It was kind of disappointing seeing them hammer Reactive Spring over and over at SpringIO back in May when it's not doable for a non-trivial amount of the user base. One would think that they would have get the relational DB driver up and running first - or at least give a concrete timeline for when it'd be implemented - before advertising it so much instead of just telling us that we're simply not able to use it, as it made quite a few of the sessions completely useless for me.
Also, what is your take on this &gt;" use the Programs for any data processing or any commercial, &gt;production, or internal business purposes other than developing, &gt;testing, prototyping, and demonstrating your Application;" From there [official site](https://www.oracle.com/technetwork/java/javase/terms/license/javase-license.html)
My favorites and underrated debug features in the JVM are HotSwap (when available by the kind of change) and Drop To Frame. I agree that it is a horrible article.
ur mom
I'm embarassed to answer this truthfully.
First of all, the recent changes to the Java licenses were in favor of making it *more* open source, and the cost of support offered by Oracle dropped significantly. So regardless of your main point, recent changes are in line with what you think is the right direction. Second, AdoptOpenJDK provides builds of OpenJDK developed by... you guessed it -- Oracle (along with other contributors, but Oracle contributes &gt;90%). It's not an *alternative*, but an alternative distribution. Most of the hard work is still done by Oracle, which, BTW, [offers OpenJDK builds](http://jdk.java.net/) that now, as the rest of Oracle JDK has been open sourced, are identical to Oracle JDK. Oracle now provides the *same* software under two different licenses: one paid, with support, and the other free and open.
PSA: While a piece of software can be *based* on OpenJDK, [it *is* not "OpenJDK"](http://openjdk.java.net/legal/openjdk-trademark-notice.html) unless it is a substantially complete implementation of the upstream OpenJDK sources and does not substantially rely on code that is not part of OpenJDK upstream.
1. I have been using OpenJDK 8 in production environments for more than a year, I didn't just discover it. 2. I have been using Linux in production environments for more than 7 years. 3. Oracle provided OpenJDK binaries do not have the OpenJ9 VM. So some AdoptOpenJDK binaries, while fully compliant with the Java Virtual Machine Specification, are not identical to Oracle built OpenJDK binaries. And I think you replied to the wrong comment. You said you don't understand how what Oracle did to Hudson, OpenOffice, MySQL, etc. is comparable to what they are doing to the Oracle JDK (which use to be the Sun JDK reference implementation) and I answered that. To expand further on that: Oracle, by reducing the length of time for which they provide free support for OpenJDK, expect Java shops pay for ongoing maintenance releases or switch to Oracle JDK. But now that IBM, RedHat, Amazon, Microsoft, Azul, etc. are committed to providing long term support for OpenJDK, I doubt that any significant number of Java users choose to pay and switch to Oracle JDK instead of using the free builds of OpenJDK. So Oracle, again, will fail to monetize JDK in a significant way.
We do absolutely forbid derogatory comments, name calling, and foul language. You are a fairly new redditor. Consider this your first and only warning. Next misbehaviour will earn you a permanent, irrevocable ban from here.
So what's the big difference between grabbing the OpenJDK from adoptopenjdk.net or grabbing it from Oracle's hosted website? They are the same exact version of OpenJDK.
That's right (except for the "variant" with J9, which isn't OpenJDK).
Why does that tool feel the need to embed itself into every shell instance though.
Thank you. I have another quick question if you don't mind. If Oracle JDK is built from OpenJDK then what exactly are folks getting from Oracle buy using their version? Are there little extra enterprisey features in Oracle's version or are they 1:1 and the only difference is in the support? And by support I think that means patches and bug fixes right and if so won't they incorporate those into OpenJDK anyway? I'm just trying to see where the value in sticking with Oracle JDK is even for large enterprises.
Ah thanks for that explanation I actually verbally let out an 'Mmmm' after reading that. Makes sense.
Thanks! That article you linked was an excellent read.
I'll take that as a "none".
Don't mind the downvotes. You speak the truth.
 We did some internal testing and measured some 60 to 70 percent reduction in memory consumption (after gc) with a hit of about 15% to throughput. CPU usage remained about the same. We used our spring based application for measurements. We are planning to use openj9 exclusively in the future. Class sharing is key to make the startup as fast as with a hotspot jvm
Not to be that guy, but if you have a proposed fix (as shown on the repo) why not just PR it yourself? Better than nothing :)
You should note that you're the author of jsoniter-scala.
No no, I just a one from maintainers.
What C# features do you not like?
So you're using this as an excuse to force people to a new library knowing that jackson is well used and provided by default in may frameworks as serialization? Yeah, that's a nice contribution to FOSS
Nice question! IMO it is happened due lack of generative (aka property-based) testing.
This is definitely something that even generative testing could've missed, though. But ensuring that JsNumbers are handled properly would surely involve testing with a few large numbers, in which case, you'd probably run into this issue. I guess they just got unlucky and didn't? Just to make sure I'm not misunderstanding the issue, the problem happens when generating the BigNumbers, right?
I made a weak attempt at **[a fix](https://github.com/FasterXML/jackson-databind/issues/2141#issuecomment-425683192)**.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; a hit of about 15% to throughput I've heard this said but didn't understand what this refers to. Throughput of what? Requests per second?
It looks like in your [submission](https://www.reddit.com/r/java/comments/9k2o0t/help_with_java_swing_jbutton_events/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The bigger question is, why would BigInteger::longValue() hang there at all. Or why scientific notation is valid for a timestamp.
Scientific notation is valid because it's just another valid json number repr. No reason why it shouldn't be. But I don't get why longValue hangs either. Its code looks pretty tame. I could see bigint creation hanging though
 &gt;Scientific notation is valid because it's just another valid json number repr. No reason why it shouldn't be. Valid for a number, yes, but for a date, not really. Nobody writes timestamps in scientific because they have no semantic imprecision. &gt; I could see bigint creation hanging though That seems more likely but also doesn't fully explain the situation. If that were the case, the same massive scientific notation number would hang it in other contexts too, not just when converting to date, which is just one case of numbers being parsed.
This &gt;There is no reason to distinguish them. slightly contradicts this &gt;Jackson does not always parse numbers as bignum, only when you ask it to. If it always doesn't, it already does distinguish them on some criteria. 
The criteria is the method call you use on the pull parser.
It's better to create organisation or develop on my own repository? 
What shout be in description? Some general information and few use cases? 
Or beerware ;)
You can use readme template https://gist.github.com/PurpleBooth/109311bb0361f32d87a2. This will show what problem your library solves, and how people should use your library.
I have no experience with this but you can always switch later if there is need for an org. For me as a developer it is usefulness, clear goal(what problem this library is solving) and "easy to get going" documentation that is important. 
Thanks for template
Yes they've page about this https://www.eclipse.org/openj9/oj9_performance.html. I think the main difference is that HotSpot is selfish and greedy, it just holds a ton of empty heap. But it also depends on GC settings.
* Have a good README file (title, summarized description, the license, etc) * Prefer to use Maven (or some alternative) to manage the library's dependencies rather than adding them all yourself to the JAR. * Have documentation (be it auto-generated javadocs, more user-friendly documentation, or both) * Use custom exceptions only when there is no better one provided by Java. * Have unit tests for the library to show some kind test coverage and that you care about quality. It doesn't matter whether you write the tests first (test-driven development) or after the code. Just a good idea to include them. * If applicable, include integration tests as well as they can easily catch (and prevent) many bugs that unit tests cannot. * Prefer to host your project on GitHub. Honestly you could host it anywhere, but I think you'll find most people willing to contribute on GitHub. Also just having "GitHub" on your resume can sometimes give you a point or two over competition when job searching.
Is jcentral synced with repo1.maven.org?
Consider your dependencies carefully. Do you *need* guava? Is log4j the best logger to use? This is especially important with the recent Java changes, because there are certain older dependencies that will stop working on Java 12 (I think). It's also important that if you need any JavaEE dependencies - like JaxB - that this is handled because they're no longer part of the JVM. And actually, on that note, CI builds against different Java versions. It's really easy to do for free, do there's no reason not to do so, and it'll catch problems early.
There is! Maven is very opinionated about how you should build your project. If you are generating a standard library, Maven maybe plenty good for you. As your project grows you may want some of the Gradle features, like improved performance, more readable build scripts, or more flexibility. Really it depends on what type of project you are building. Both of them are valid choices. 
Under your own repository is just fine. I have a [project](https://github.com/Scuilion/gradle-syntastic-plugin) that is not under an organization, and is published to [jcenter](https://bintray.com/scuilion/maven/gradle-syntastic-plugin). It would be simple enough to move your repo to an organization later. 
No, but it is a pretty popular option. Especially for personal projects where you don't want to go through the hassle of getting a library put onto Maven Central. Including a library from jcenter is fairly straight forward. buildscript { repositories { mavenCentral() jcenter() } dependencies { classpath "com.scuilion.syntastic:gradle-syntastic-plugin:0.3.3" } } &amp;#x200B;
There's "maven the build tool" and "maven the repository". Maven the build tool and Gradle and Ivy use Maven the repository for finding and downloading dependencies.
This is great advice. Guava has become less and less useful due to the features added in Java 8, 9, 10, etc. My favorite thing to see, is pulling in a utility library just to use one method (eg Apache Commons Collections). I wonder if there is a tool for judging how "use" a library is in a project. 
&gt;Is there any differences between gradle and maven here? Although technically they should be interchangeable from an *end-user's* point-of-view, which one you go with might affect how maintainable it is for you and any other maintainers or contributors. I don't have much experience with Gradle, but as u/pellucid_ mentioned, Maven is very opinionated. However, Maven being opinionated is good when your project's structure is able to match what Maven expects. Also keep in mind that Maven allows you to change the structure if needed. &amp;#x200B; As for Gradle, personally, I would only use Gradle if: * If Maven isn't flexible enough for your project * If Maven isn't fast enough for your project * You prefer build scripts over Maven's XML configuration * You just prefer Gradle for any reason
If it's a library, SLF4J is almost certainly the right choice for logging. SLF4J and Log4j2 can deal with libraries that use other logging frameworks, but it's better to reduce the work required to make your library behave well.
That's true today. It used to be true of Commons Logging though - not sure if So Spring is still using that? - and JULI before that. And no doubt there will be a "better" replacement for SLF4J at some point too... The point is that you should be aware of this and consider your choices carefully so you don't get stuck.
Amusingly, every time I've tried gradle what's put me off is the things that I can do easily in maven and can't work out how to go in gradle. Often as a result of maven plugins, I'll admit, but still...
Having more digits isn't scientific notation (`1e1000`) though. Scientific notation just allows increasing the number without having all those digits specified so it really doesn't convey additional accuracy to use exponents in a timestamp, especially because it's easy to shoot in the foot with the accuracy and rounding of them.
I understood, thanks ;)
You're both correct. Both instantiation and longValue hang in different circumstances: https://github.com/abracadv8/bigdecimal-test * Both Instantiation and longValue() scale roughly linearly with the size of the number. * Using insanely long string values: * Instatiation of the BD takes a roughly linearly long time * longValue() val is at least 100x faster than instantiation, but still seems to be linear with size * Using huge scientific notation string values: * Instatiation is realtively quick as opposed to above (say 100x fater) * longValue() is at least 100x SLOWER longValue() above During tests, during the conversions from the long string into a BigDecimal, it appears to repeatedly call BigDecimal.multiply, based on the size of the number. So it must try to represent numbers in both long-string and scientific notation and going back and forth between the two is expensive. ------- Given a really large number: Relative Speed | new BigDecimal() | longValue() ---|---|---- Scientific notation | fast | slow Really Long String | slow| fast 
It's part of the JSON spec though. * Why should a client be forced to write a 10kb string as opposed to 1E12345? * Also, would anyone adopt a JSON library if it only implemented 90% of the spec? 
I agree that doesn't make sense in 99.9% of the cases. A java Instant and Duration are just ever so "slightly" larger than an Epoch long, because it's stored in seconds instead of ms. Theoretically, you could store a positive or negative Epoch that 1,000x larger, which is roughly the difference between +/-1 million years and +/- 1 billion years. An Instant or Duration could represent certain periods when dinosaurs lived, but still could not represent generally agreed upon date that the earth was formed (4.5bn).
You might be interested in Shipkit: https://github.com/mockito/shipkit We use it to automatically publish new versions of Mockito. It takes away the hassle of syncing with jcenter and Maven central.
Try r/javahelp. You kinda need to specify what you mean by "I need assistance" though. "Java" is a very broad term, and without info on what you need, we won't be able to help at all.
Edited the post, thank you. I’m just looking for teaching aids really so I can learn myself, not I have this problem please solve it lol.
Not saying it's not, I just see a lot of people using jcenter and I wondered if it was synced, I personally use Sonatype OSSRH I don't find it that hard to use and syncs with Maven Central
https://www.youtube.com/watch?v=Hl-zzrqQoSE&amp;list=PLFE2CE09D83EE3E28 The New Boston java tutorial series is very useful material that you can go through at your own pace. Just skip through any lessons that you feel comfortable with.
True... actually writing in Groovy really turn my off. At some point, I would rather write in a python for the gradle part.
https://openjfx.io/
generally, throughput refers to op/s or some other measurement of performance.
This is a question for /r/learnjava. There, the *sidebar* (old reddit only) lists some highly regarded free tutorials: * MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html) from the University of Helsinki * [Java for Complete Beginners](https://www.udemy.com/java-tutorial) * accompanying site [CaveOfProgramming](http://caveofprogramming.com) * [Derek Banas' Java Playlist](https://www.youtube.com/playlist?list=PLE7E8B7F4856C9B19) * accompanying site [NewThinkTank](http://newthinktank.com/) The MOOC in particular is one of the best Java courses in existence. It is textual and has plenty graded practical exercises.
Buy a domain for your project as soon as possible if you don't want to pay a hefty markup later
What does it mean.. When we will use it?
If I want to make a prediction or find a correlation between factors using java
Okay..🤗
The "Time to Hello World" is quite important, since people spend less and less time to evaluate but skip to the next library. Good tests help, since they are little examples 
damn, this site is so cool :D going to buy some stuff right now, thanks!
First link is what I wanted (the jmods). I was on the pagw last night... I'm not sure if the jmods weren't there, or if I totally missed them. Thanks!
What do you mean? [Apache Commons Math](http://commons.apache.org/proper/commons-math/), [Apache Commons Statistics](https://commons.apache.org/proper/commons-statistics/), [Smile](https://haifengl.github.io/smile/) and many for machine learning.
There are various legal and licensing limitations on who is allowed to get accounts on the OpenJDK JIRA system. Anyone from “the general public” may submit bug reports at https://bugreport.java.com/bugreport/ It does have to go through a moderation step before it gets into the bug database, though.
Nice find! I've been looking for a quick read intro to Java.
Another load of Pakt Publishing hot garbage. You've been warned.
No, this is No Starch Press.
100% unbiased right here 
You might be able to do it with the medial library in JavaFX
He was open about the fact that his book was in there too, whats wrong with you? 
I found publishing to maven central via sonatype, odd. Jitpack just works. Jitpack also serves your javadocs, and it is possible to link to master-SNAPSHOT. &amp;#x200B; Figure out how your going to handle branching and versioning. &amp;#x200B; I hate, absolutely hate, gradle. But it's all I use now :-P &amp;#x200B; \[Here is a nice README template.\]([https://gist.github.com/PurpleBooth/109311bb0361f32d87a2](https://gist.github.com/PurpleBooth/109311bb0361f32d87a2)) &amp;#x200B; A good no-bullshit license is \[ISC.\]([https://en.wikipedia.org/wiki/ISC\_license](https://en.wikipedia.org/wiki/ISC_license))
You ask for a library and then say you can’t use libraries?
that was cool but then I saw that they don't currently nor plan to eventually support IntelliJ
They didn't say they don't plan to: &gt;"We implemented a prototype to integrate the Spring Tools 4 with IntelliJ IDEA, but the third-party support for the language server protocol for IntelliJ isn’t mature, stable, and feature-rich enough to implement a meaningful version of the Spring Tools 4 for IntelliJ yet. However, there is awesome support for Spring available out-of-the-box in the IntelliJ Ultimate Edition that you can use instead if you prefer IntelliJ."
&gt; Please do not suggest a preexisting software. I need a library to create my own software, I'm not interested in using someone else's software. But a library is pre-existing software, and someone else's software. Your request doesn't make any sense.
It's still SPAM either way, worse, it's SPAM disguised as discussion, which is how SPAM got started in the first place.
Yeah, what you know is always easier than what you don't. I moved from Ant to Gradle, then Maven. 
Also a CHANGELOG is very useful.
Er, what? It appears none of the books in this Bundle are from Packt
It looks like in your [submission](https://www.reddit.com/r/java/comments/9kdhsz/autogenerating_gui_code/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
eh. are the books any good, though? I looked at Amazon, 1 star reviews, they keep me from buying. For example (emphasis mine): Not worth the money, unless you're a total beginner and want something to read on the plane. ByD. Hellumson November 7, 2015 Format: Paperback With all due respect, the boring stuff was reading this book, which unfortunately I couldn't automate. It is a nice quick and easy reader or tutorial on basic Python programming, downloading offline webpages, and manipulating files, folders, CSV, Excel, Word and PDF, or sending a simple email, but that's it. **What most people really need to automate is "beyond the scope" of this book.** For example, it doesn't address how to get past an SSL-based login page to do a web scrape of data in investment portfolios. Few pages of import or usefulness allow unencrypted login, and anyone worth their salt wouldn't do something like that in plain text. **If it can't help me automate the one simple thing I'd want to start with, then why bother?** And why call it "Practical Programming" if it's hardly practical? True, it does show me how to scrape weather information and suck it into a CSV file for graphing. Just like my first programming class taught me how to create a video library is. Problem being, nobody needs a weather tracker or a video library. **Bottom line, there are Python primers all over the web for free.** Save your money. Read this at Barnes and Noble over a cappuccino, like I did. Nothing bew here, move along... . I don't mean to shit on your parade, but it's a public forum here.... 
Yeah, actually you're right. At second glance on my laptop, doesn't seem to be any from that publisher. My bad.
You can just wait for Udemy sales and buy a full java course with video, tutorial, and professor help for like $10
Do they? What and how? I'm surprised because sometimes dependencies are in the form of resources only, or are only used by reflection, or are only needed for other dependencies to access, or all sorts of other reasons that makes that a very hard problem to solve. But equally if there is one it would be very useful :-)
Udemy courses are always on sale though.
That's even better then. The courses are really good and come with lessons with videos and can be very good. Reading a book is one way to learn coding, but nowadays I find people learn really well when they have a video to write code along to and are given assignments to practice on. Books will always be the foundation but Udemy courses will offer more than this book off humblebundle (I am just assuming). $1 vs $10 isn't too much I like to think
That hasn't been the case for nearly three years. https://jira.qos.ch/browse/SLF4J-324
Why you hate gradle so much? 
Why wait and pay? The MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html) from the University of Helsinki is one of the best Java courses, has lots of graded practical exercises and is free. Also, [Java for Complete Beginners](https://www.udemy.com/java-tutorial) by John Purcell is excellent and free.
Udemy is the furniture store of eLearning. Permanently on sale.
And if you have enough money.
Just skimming the MOOC one, wow that one looks really nice. I learned Java in school but paid for a C++ course last year on Udemy. Udemy is just nice since you can message the professor, so I would also recommend the John Purcell course. I don't know why but I thought I was in a gaming subreddit because it had Humble Bundle in the title so I was trying to appeal to a different demographic, lol.
&gt; I thought I was in a gaming subreddit because it had Humble Bundle Since quite some time, Humble Bundle also sells books. Bought a couple bundles of them and am quite happy. I have most of the books of the current No Starch press bundle. Some of them are excellent. In particular, "Think Like A Programmer" is great for beginners.
Does Payara run on Java 11?
Does anything run on Java 11?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
[Spring Framework 5.1 does](https://spring.io/blog/2018/09/21/spring-framework-5-1-goes-ga)… 😉😬 Congrats, Payara, on the release!
Spring Boot 2.1 😉
When you learn Java, make sure you understand the ecosystem and how everything's organized. Specifically, understand which are the specficications (Java SE, Java EE etc), which are the implementations and how they are working. &amp;#x200B; Don't just start coding, "learning by doing" and then end up not being able to tell what is the JDK, what is Spring or what is Java EE. I wrote about this idea and general problem in Software Development here: [https://www.amihaiemil.com/2018/01/24/teach-them-the-language-first.html](https://www.amihaiemil.com/2018/01/24/teach-them-the-language-first.html)
Be careful on which libraries you depend, because you force them on your users.
What does a python book have to do with learning Java?
And the Spring support in IntelliJ is awesome, and only keeps getting better. I remember discovering Spring Data JPA back when it was first released and then the IntelliJ EAP got support for it about a month later. 
Isn't Solaris on life support anyway? Oracle fired the Solaris team.
So you want a statistics library?
No, there's no OpenJDK builds for Solaris. You might be able to find one from another distributor. 
Is this a statement or a question?
Question 
I haven't found anything since the demise of JavaPosse back in 2015. You could try listening to past episodes, although I don't know how much of it will still be relevant to today. Maybe from a historical point of view.
What's your book?
There's Illegal Argument which I enjoy occasionally.
They are selling brand new SPARC Solaris hardware. 256 core with terabytes of ram. [https://www.oracle.com/servers/sparc/m8-8/](https://www.oracle.com/servers/sparc/m8-8/) Solaris 11.4 came out 1 month ago. [https://en.wikipedia.org/wiki/Solaris\_(operating\_system)#Version\_history](https://en.wikipedia.org/wiki/Solaris_(operating_system)#Version_history)
The architects said they are going to focus on macOS, Windows, and Linux. Mark Reinhold talks about it [here](https://youtu.be/H48QEcjP1PU?t=7m44s). You may be able to get builds for Solaris from another vendor.
#### [Moving Java Forward Faster by Mark Reinhold](https://youtu.be/H48QEcjP1PU?t=7m44s.) ##### 828 views &amp;nbsp;👍10 👎0 *** Description: The Java SE Platform and the JDK are moving to a rapid, six-month release cadence, with the next release in March 2018. We’ll review the motivations f... *Jfokus, Published on Feb 22, 2018* *** ^(Beep Boop. I'm a bot! This content was auto-generated to provide Youtube details. Respond 'delete' to delete this.) ^(|) [^(Opt Out)](http://np.reddit.com/r/YTubeInfoBot/wiki/index) ^(|) [^(More Info)](http://np.reddit.com/r/YTubeInfoBot/)
No, but for some reason they make sure it builds and passes the tests, but don't provide an official build for it. Maybe they will provide a build through the normal Solaris package repository/upgrade channels? 
Thanks. I should have also mentioned that i was looking for a Solaris Sparc version which was not talked about.
I've almost completely removed my usage of the various Apache Commons libraries because of this (or because Guava has a better replacement). Java got base64 support and has `Objects.requireNonNull()` which replaces `Preconditions.checkNotNull()`, but for some reason there's no replacement for `checkArgument()`/`checkState()` beyond doing the check/throw by hand. Java 9 or 10 gained `StringJoiner` and Java 11 now has `String.repeat()` which removes another Guava usage.
The distinction to understand here is between the Oracle JDK and a build of OpenJDK. The Oracle JDK (the one that you now need a Java SE Subscription to use in production) is supported on Solaris SPARC (available from [java.oracle.com](https://java.oracle.com)). The free builds that Oracle are producing of OpenJDK (available from [jdk.java.net](https://jdk.java.net)) are not supported on this platform. AdoptOpenJDK are not listing this as one of their build platforms, either. Azul (who I work for) do not currently have a build available.
The overlap between people who need Spring Support, are not Students, and don't work a Job that either pays for or makes them able to afford a $500/yr tool that they use basically every working day for 8 hours seems really low.
Adam Bien‘s interviews are available as podcasts: http://airhacks.fm
First of all, it's a personal choice to buy it or not. Second, at work my employer pays for license, but at home I use community edition (I don't code Java a lot at home). So I don't have ultimate license and I won't probably check out spring tools because I prefer idea. That comment states that I can use it if I prefer idea. No I can't without payment. That's it.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
All InfoQ talks are available as downloadable MP3: [https://www.infoq.com/java/presentations/](https://www.infoq.com/java/presentations/) Probably in some talks you need to see slides, but you can review later if you are interested
Java Pub House Off Heap InfoQ Fragmented (for Android)
Programming jobs pay good enough that even a fresh college grad can easily afford intellij.
there once was a bug in django that allowed set 4GB file as a password, it would accept such long stream of data and try to hash it, causing basically a DoS on CPUs.
Despite all the documentation, it's poorly documented. If you have to do anything unusual, expect to spend 1/2 a day or more figuring it out. Groovy is magic to me, which is a bad thing (although I'm keen to try the Kotlin version).
Your missing the point. If you are a library provider hand you have 3rd party dependencies, users of your library may not be able to use your lib because of those dependencies.
It's not about "enough" or not. I've just mentioned that it's not free. Is it bad? No. Is it good? No. It's just a fact. And you guys blame for that. Ok.
Good to know. I was thinking about buying the course. I expect this course to have rich content than the courses on Udemy. After your review I see this is not the case.
Thanks for providing this review. I think that it is wrong to upgrade the price and not upgrade any of the material.
I agree most part of this review. Honestly, I don't spend few hundred dollars for a video course, If there are other sources like packtpub, Apress and Udemy are offering loads of knowledge on the same topic for few tens of dollars. I personally like 'Pro Spring 5 from Apress' , 'Spring 5.0 cookbook from Packt' and 'Master Java Web Services and REST API with Spring Boot on Udemy'
Well reasoned and supported, thanks for sharing!
That ~~helpful~~ moment when someone answers a question with another question.
Baeldung appears to be a very shady undertaking. They are basically running an article-writing farm at around $5 an article, forcing people to focus on quantity rather than quantity- possibly to collate into a low-quality money-making venture such as this one. Now it all makes sense. 
For reference I did a RESTful API course from Baedung several years ago for a lower price. I literally turned off because it focused so much on using abstract classes and inheritance to implement common RESTful behaviour. I sat there like WTF?!? A lot of this is in Spring and what was implemented was nothing like a clean architecture that is so popularised. Never rated the site much since that experience.
If you're running an Oracle SPARC M8, you're an Oracle customer, and you probably already have a support contract. Contact your Oracle representative to see about upgrading to JDK 11.
Did you take word "enough" too seriously? I'm not a native and maybe it sounds like "only moneybags can afford it" but it's not. You know $20 is $20 (especially when it's $149 for a thing that is not used often).
Thank you for sharing! 
I think you hit the nail. A good udemy can give you a good jumpstart, especially to get off the couch. A good book will add depth to what you learn. Spring Recipe is really good too.
Try javapubhouse.com Plug: I'm the featured guest in the next episode, which should be coming out in a few days.
&gt; The distinction to understand here is between the Oracle JDK and a build of OpenJDK. Just to clarify, both "Oracle JDK" and "Oracle builds of OpenJDK" are, as of OpenJDK 11, both builds of OpenJDK released as binaries under two different licenses. See [Oracle JDK Releases for Java 11 and Later](https://blogs.oracle.com/java-platform-group/oracle-jdk-releases-for-java-11-and-later).
Am I the only one that actively avoids Baeldung's content? While I appreciate that Baeldung in that they often are the only third party resource covering certain specific topics, I've never been impressed by the quality of their articles or their business practices. Articles tend to be shallow, lacking in meaningful examples, and occasionally skip important steps. In one instance, I've noticed that their article was pretty much copied out of the official doc's PDF manual but reworded and with some omissions. Additionally, when Googling about Spring topics, Baeldung often comes up before Spring official documentation and one could easily mistake Baeldung as official Spring documentation due to the similar color scheme and logo. Frankly, I'm not at all surprised that their paid for content is crap. It's just a shame that the Java community doesn't have very good third party blogs and tutorials.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
If no one publishes builds, why not build it yourself?
I think it's all about finding a recent tutorial. Search github for example projects, make sure you search by date (last 1-2 years), and recent books (like the "{Topic} In Action" series) will have good material.
Seems like its... full of dung
Reading about support for the [Japanese New Era Implementation](https://www.oracle.com/technetwork/java/javase/11-relnote-issues-5012449.html#JDK-8202088) has made me realize what a headache that is for everybody. Not only do we not know what it's called, but if the Emperor dies before his planned abdication on 30 April 2019, then JDK 11's implementation is completely wrong.
From [Oracle's JDK 11 Release Notes](https://www.oracle.com/technetwork/java/javase/11-relnote-issues-5012449.html#Diffs) in the section about the differences between Oracle JDK and OpenJDK: &gt; Only Oracle JDK offers Solaris, only OpenJDK offers Alpine Linux.
Haven't really jumped into reddit too much, so I'm honestly curious if I should jump in here or not :) We'll see how it goes. I generally try to pay authors for their work - a lot more than 5$, as you can probably see on the contribution page: [https://www.baeldung.com/contribution-guidelines](https://www.baeldung.com/contribution-guidelines) Now, in terms of quality - nothing's perfect, and if you have any suggestions for improvement I'm certainly open to them. Cheers, Eugen. 
Hey. This is Eugen (the author of the course). Jumping in here with a few quick notes that will, hopefully, provide some feedback to the notes in the review. First, the version of Spring. I recorded some of the course material in the Spring Boot 1.2 days - that's why the older version appears in those videos. That being said, I always keep the codebase up to date - it's now using Spring Boot 2. And, whenever a new version actually changes any functionality, I always update the lesson as well. However, in a lot of cases, new Spring versions haven't really touched the core functionality. So, on a version where literally nothing has changed from Spring 4 to Spring 5 for example, I upgraded the codebase but didn't re-record the video. About going into technologies like Docker and Kubernetes - that's not something I planned to go into, at least not in this course. The material is already an extensive 13 hours and I'm still working through the new lessons - which is why I'm not planning to tackle these as well. Next - on the OAuth functionality - Philip has a good point. This is one of the very rare cases where the Spring core team (more specifically the Spring Security core team) has decided to rewrite rather than evolve. And, so, when that effort stabilizes (as it's beginning to with the very recent Spring Security 5.1 release) - I'll definitely redo those lessons. Finally, about the refund policy - I'm quite flexible on refunds and basically very rarely say no. But yes, certainly - when someone literally goes through 100% of the course material and then asks for a refund - I say no. Finally, there was another interesting note about authors on Baeldung below. No, I certainly don't pay 5$ for articles. Our average is about 80$: [https://www.baeldung.com/contribution-guidelines](https://www.baeldung.com/contribution-guidelines) &amp;#x200B; Hope that helps. Cheers, Eugen. 
Not true. Most if not all of these releases will bump the bytecode version. This will break most tools that do any sort of bytecode reading, usually via cglib or asm. For example, you'll need a new version of guice every 6 months. 
That will be because Java 11 [removes the `java.se.ee` module](http://jdk.java.net/11/release-notes#JDK-8190378) which was deprecated in Java 9. You may have some success with Java 10 and making sure to include `--add-modules=java.se.ee` on the command line. Payara were planning on having support for JPMS in Java 11, but I wouldn't be surprised if this removal has delayed things a bit. Fortunately Java 8 is still supported until January.
This by no means contradict what I said. Upgrading your libraries does not mean that the cost of upgrade is significantly increased. Also, a new bytecode version does not necessarily require new byteocde manipulation libraries, especially if your code does not use new bytecodes.
Haven't went through that course but I'd like you to know I've found tons of useful content on the site! 
Yeah that makes since just harder to get into spring as a student I guess. If you know any good resources send them my way
Or to build it yourself and that's gonna suck.
I don't really get this. Why this style? Getting people riled up so that they don't even bother reading what you're writing and then going "oh no, it was satire, do the opposite. How is that going to teach anyone? If the audience is people know that this is important; they would probably not have read most of what you wrote (I skipped to the end myself first to see if I was not completely wasting my time). People who don't know don't get taught anything; you're not explaining the 'why' of the items you touch.
&gt; Baeldung appears to be a very shady undertaking. Shady? That's a very strong word, implying something dishonest or unethical. AFAIK, they've always made clear what their model is. I think if you're going to suggest there's something dishonest about them, you should actually point to it rather than implying there's something unethical. 
The issue with this article in particular is that it doesn't pull off the humour it's trying to go for (other than a high point regarding a wheel). And once you get to the penultimate paragraph you discover it's not adding anything new to the discussion.
Ironically as it is given this post, I've found Baedung to be some of the better resources, but then he's only been running his site for the last two years.
You can still fire up an `applicationContext.xml` from the Spring 1.0 days with Spring 5 and expect it to still work. I mean you wouldn't want to write a context in XML these days, but it should work.
In all honesty, it was more a feeble attempt at humour than anything else ;)
Their spring stuff is total garbage. It's like they try to implement spring *in* spring. It's really bad for new coders who learn the anti-pattern as the pattern. I tried to pull it up, but they had one article where the only way it would work is to fully override spring hibernate auto conf orm, and use Jackson to manually map objects to json outputs. I almost wrote them a strongly worded gtfo, but realized it wasn't worth my time. 
Don’t worry, in many cases tutorials on Baeldung are copy pasted from docs or other sites.
Manual Jackson mapping is also in this REST course, and many more weird techniques.
I don't think anything has changed between spring-boot 1.2.5 and 2.* that would significantly change the way you write a rest app, unless you want to use the reactive stuff, which i tbink most people probably wont care about.
I learned a ton from Elegant Objects, volume 1 and 2. I highly recommend. It’s written by someone with strong opinions, and provocative style of writing. But it’s to keep you laughing and intrigued. Ive read those books 10x each. Hope you enjoy. Even in areas where I disagreed, it was on my preferred style and not correctness. 
We did contact our Oracle rep to try to get a JDK11 for Solaris x64. We were told that one would not be available. We're now trying escalate our request to someone more senior. To say we are disappointed would be an understatement. We would still like to get the JDK11 build for the OS...and we are also going to escalate our migration to a different OS. I'm looking into building OpenJDK 11 for Solaris x64. If someone finds a build, please let me know.
Am I the only Blankman fan in the world?
Well they are all offered together, and I checked a bunch of the reviews out, and just copied this particular one as a representative sample. But check it out yourself.
I'm not sure if I'd call it shady but I think their problem is that too many people will infer &amp; pay for higher standards than they end up getting.
I have learned the most about maven and gradle by looking at popular open source projects and seeing how they were constructed. They are always a little different. Maven and Gradle can take care of a lot of the classpath and jar building for you as well. I write a highly opinionated Java blog that doesn't follow most Java conventions but works a little more like node.js where you wire everything up yourself. https://www.stubbornjava.com/ The whole site is open source and shows how I build / deploy the code and infrastructure (might change soon). I do not use any DI and use quite a bit of static but it would be pretty easy to convert to DI and non static if you prefer that.
Nice, that sounds like what I'm looking for actually. I'll check out your blog.
there's dozens of us unemployed java spring devs DOZENS
Whenever Baeldung links appear in google search I actively avoid them. Unfortunately they have high page rank :(
OpenJDK is a thing. Java is too common in business and education for a simple licencing change to cause much of a shift. Also, Java, C, and Rust are hardly interchangeable. The infrastructure changes required to make a shift from Java to C is more money than just paying Oracle's tax or using OpenJDK. All the fuss is little more than tech blogs writing articles people will read. Literally no one I work with gives a shit about the licence changes--its all bloggers and Medium posts. 
Not about **Java** and actually bad quality. The satire doesn't come across as intended. **Removed**
What on earth are you going on about? You seem to have got the wrong end of the stick. The "shady" part is about the kind of deal that Baeldung hands out to *developers*. I should know - I was almost roped in, and I rejected them. You know how so many people call sweatshops in Asia "shady"? Well, I meant it in the same way, but if you really think about it, it's much worse off than that. They advertise themselves as a part-time venture where you, as an experienced dev, can write articles, and use them as the medium of your works, and they pay you a reasonable fee in exchange for holding the rights to publish your work as they choose. Sound fair? Sure. In reality, the moment you evince interest, they immediately send you a substantial checklist to get started with - this itself takes a lot more time than you'd imagine. Then they assign you an "editor", whose only job is to badge you to get started - which essentially means picking up a topic from the pool of topics they maintain on JIRA. If you don't get started within a week of "onboarding", they start threatening you about "ending the relationship". Are you fucking kidding me? All for what - $5 for around a minimum of 1000 words? Replete with working code samples collated into another Github project, and follow-up edits and maintenance of other people's issues. and churned out in such a way that there is constant update and monitoring? All seemingly for a target of collecting as much information (regardless of quality) in as short a time as possible? That is utter bullshit, and not worth the time of any serious and/or experienced dev. Only for people willing to invest a whole lot of their time being treated like actual semi-employees in a semi-regular job with little to no pay. The threatening letters are the best part by the way - as if they have actually employed you. Thank God I checked all the information and bailed out before I got into that mess. Have you gone through the process of writing for them? Have you seen the whole sweatshop process from the inside? Seen the way that these articles are being written? A simple mathematical calculation tells you that for the amount of time you would spend on generating these articles, the payout is ridiculous, whilst being subjected to constant threats and progress checks. If you haven't, then I suggest you fuck off instead of making ridiculous assertions about people's intent. In the beginning, I used to find some Baeldung articles useful - particularly for some niche topics. That was a long time ago though, and the current model of working, even not considering the business model, is extremely fucked up, and that reflects in the "quality" (or rather the lack of it) that people are complaining about. Kindly get your head out of your arse.
There was a fair amount of incompatible changes. Mostly renamed configuration settings and similar, but there was a decent amount of work required to upgrade. There were also quite a few third party dependency changes too, which may or may not require changes.
So organizations and providers will pay licensing fees? I remember IntelliJ didn’t quite work well with openjdk 2-3 versions earlier. They are shipping their own bundled Java nowadays right?
The only thing that really changed is the download link for a JDK. OpenJDK is and will always be free. OracleJDK and OpenJDK are built from the same source. That something works better with the Oracle version is no longer true, if it ever was.
Don't really code in Java (At least not anymore) But if I purchase an online course over Udemy or whatever platform there is, specially if it's named "Masterclass" it better be damn Gordon Ramsey teaching me this. What I mean by this is, always try to learn from the best, not just someone else posting a video or tutorial online trying to make a quick buck and teaching you nothing useful, look for someone with track record or great reviews from non-programmers and programmers wanting to learn new stuff. PS. not throwing any shade at Baeldung, but did a quick skim reading over his website and don't see anything interesting or a good resume to back up that "Masterclass"
Don't underestimate the real costs that this license change will induce! This is simply a problem as lots of customers of business software don't care about the technical details - but if it comes to added costs appearing right now, they will complain about and blame their software vendor. For small and medium sized organizations this just mean trouble and probably costs too. On the other hand there are the cloud vendors like Amazon - even for them it is hard to rise their prices just for egalizing the costs of paying oracle. Especially if the Microsoft cloud don't have such a pressure for their dotnet services - funny if we think about the fact that MS behaves nicer as a platform leader than others 😜 So of course there will be new strategies evolving from this license change: - increase update cycles of your product and your servers to stay with the cost free jdk - change to another platform (for new projects) - establishing a cost free / reduced alternative (redhat has allready indicated its intention to do so iirc) I am curious especially about Amazon and Google in this context. 
Projects like Jakarta EE and the stronger focus on OpenJDK actually have increased my interest in Java.
I've been using OpenJDK on Intellij almost exclusively for the last 6 months. I haven't had a single issue thus far. 
Shouldn't we have gotten Solaris 12 like two years ago already? &amp;#x200B;
AdoptOpenJDK is doing backports. Azul is doing backports. There will never be a time when you will become suddenly unable to get your hands on a patched LTS release of the OpenJDK; within reason ofc. Oracle is not now, nor will it become the only source of reference complete JDK builds. 
Cloud providers actually have it easy because of economies of scale. Amazon already have a Java engineering team so can use OpenJDK and backport fixes without paying Oracle. Likewise, Google and IBM. Microsoft announced last week they would be providing free Java updates on Azure through Azul's Zulu (full disclosure, I work for Azul). 
*Disclaimer: I'm not replying to the specific article or offering by Baeldung. Just some general musing:* The perception of the cost / benefit ratio has shifted drastically over the past years, at the cost of quality. The abundance of mediocre, but good enough, free content by platforms with great SEO skills has destroyed quite a bit of classic content markets. Just look at us hanging out on reddit ever looking for the next bikeshed, ever ignoring a high quality link if there ever is one (because: no time, TL;DR) in favour of cheap laughs and blames. (Depending on your local purchasing power, of course) $ 299 used to be extremely cheap for something like Baeldung's offering, in the "old days." But not today, as everyone is competing with free and / or super cheap. You liked Baeldung when it was freemium, and you seem to like Udemy which is super cheap (translates to: content creators get almost nothing). I don't blame you. The market has done this with all of us. Even if this particular offering didn't fulfil your expectations in terms of quality (and probably rightfully so in some aspects, and surely, Eugen is taking notes where there's room for improvement), you could see your investment as a way to thank Eugen / Baeldung for the tons of free content you've consumed in the past - even if you will, understandably, not purchase from Baeldung again. I just find it worthwhile, from time to time, to reflect on the bigger picture of where our markets are heading, and what part we as consumers play in it.
This rather depends on your perspective. If all you want is a current, free JDK then you're right it's just the download link that changes. However, if what you need is any form of long term support with bug fixes and security patches for more than six months, things will be change more substantially when public updates for JDK 8 stop next January.
Java has a _**LOT**_ of momentum behind it. Licensing would need to be mighty expensive for any given shop to start developing in something else. 
Under the new license, the Oracle JDK can still be used without a Java SE Subscription for development and testing. That mean that for tools like SQLWorkbench you do not need an Oracle Java SE subscription (i.e. you can use it for free). Eclipse ships with its own compiler but, again, for development you can use the Oracle JDK for free. If you want to deploy an application in production and use the Oracle JDK then you will need to pay Oracle. In that case, it is worth looking at OpenJDK binary alternatives. (Full disclosure, I work for Azul who provide the Zulu JDK).
OpenJDK license comes with checked [ClasspathException](https://openjdk.java.net/legal/gplv2+ce.html) which you can try and catch.
I am migrating all my projects to OpenJDK atm.
not at all openjdk is gpl licensed, available on windows, linux, and mac, and openjdk 11 will have 4 years lts support
If it does a lot of work then divade it into two simpler methods. It should be easier to name them after that
I just want to say thank you for giving free content at all!!! You have saved my butt more then a few times. 
Look into spring boot. https://spring.io/projects/spring-boot Enterprise framework. Sorry it’s not exactly what you are looking for but I think it’s adjacent. 
I like using the "enrich" suffix as in enrichXXX or enrichXXXDetails. A less fancier suffix would be "populate"
Without a specific example this is all a bit speculative but: * A good practice is - as you note - to avoid using 'set' when you actually want to do multiple activities. * A method that does a lot of work could potentially be decomposed such that multiple small methods solve naming issues and your method that calls them all can then be seen as a saveX, buildX, openX or whatever its overall purpose is. * Once you can define what needs to happen in the method (if you can't decompose) then see if you can name the method as a way to describe a 'what'( what steps your code will do to solve the problem). Generic names are easy but are less helpful - evaluateX is less useful than calculateProfitOfX. There will always be a trade off between method naming and patterns (if you use a pattern use its example naming) and if you want to create extensible classes then you need to create a more generic interface name. Respect bean naming conventions. * A good rule of thumb is that if a method is longer than your standard development window it should be split up. If you find that your code is getting swamped by lots of tiny low value methods then go back - its a balancing act! * If you can identify a significant block of code in a method that can stand alone as a private method then extract it (highlight alt-shift-m in Eclipse) - it will make code easier to read. Try to avoid the temptation to make that extracted method public if you have already published your interface. * Small, specific and simply named methods start to create self-documenting code (though never dispense with comments - explaining why is as important as how.) * If any setting of instance variables occurs then create and use a setter - that you then refer to that in your method is probably ok as long as your method comments make clear that you are making state changes. A cleaner design is to make state changes after evaluating unless the state change is itself crucial to the evaluation so if possible do evaluateX then do setY rather than setting Y during evaluation of X. * If you ever have trouble on defining what your method's main purpose is its worth taking a step back and try to describe the flow of information and behaviour to someone (or a duck). If you can describe your flow in defined steps using plain words you have a good chance of creating well defined method names. If you can't it suggests that there is a potential design problem which if not solved will be a maintenance thorn thereafter.
Thats interesting, never thought about that prefix, might come in handy sometime.
Yeah, he saved mine too! Thanks Eugen! I owe you my butt!
&gt;which essentially means picking up a topic from the pool of topics they maintain on JIRA. If you don't get started within a couple of days of "onboarding", they start threatening you about "ending the relationship". Are you fucking kidding me? All for what - $5 for around a minimum of 1000 words? Why are you telling lies here ,,, hope you're aren't being paid for that. All of this isn't true, I've wrote almost 10 articles for Baeldung while being paid 40$-50$-60$ because I was an Author of level 3, a level 10(&gt;10) Author may have at more than that (like 80$-100$-120$) because of the quality of his work. I have never received 5$ for an article ,,, and no threatening about ending the relationship ,,, they just assign the article to someone else and it's all. Maybe I got you wrong? or someone just tell you shit about Baeldung ,,, go to the source to have the correct info guy.
TFW the initial list doesn't include C or CPP
just remember to always stick to the get/set convention if you need java bean behaviour. All the reflection libraries rely on this assumption so most of the time its best to not rename and just live with 'java'isms 
That is a good reminder about the javabeans, doesn't apply to me but it could to someone (or me in the future as well).
I think their problem is that amount of money they offer is simply not worth it for experienced developers. You can appear as a 'guest author' under your own name, but then you don't get paid for it. Sounds weird right? You'd expect Baeldung to be very willing to have your name on their, heck, even with a LinkedIn link, to give some extra weight to the material. So I am getting the feeling they don't want that because most of their writers are people not able to make 20-40 dollars an hour (because such an article will take you 2 hours minimum) will just be very inexperienced developers. You see that in a lot of content; many of their Spring content is just stuff rehashed poorly from the official documentation. 
Nice writeup on even a broader topic than my question. These things even if they are known need to be reminded! (for me at least)
OP is a spammer for ITNext.
You write the method differently because such a method is an indication of poor separation of concerns and state-related bugs.
Splitting into smaller methods just for the sake of it may result in poor encapsulation. If multiple actions are combined into a single method it's probably because those actions only *ever* need to be made in that specific sequence and already constitute a single conceptual unit of behaviour. If you split them up you're just forcing your users to remember more invocations (which they will always have to make in the same order) and you create the possibility that your class is left in an inconsistent state. Split the methods up internally by delegating to multiple privates, sure, but the API should not expose this. I blame JavaBeans for popularising this anti-pattern in the Java ecosystem. A class full of mostly getters and setters is usually an indicator of a shitty design.
To clarify, the license change has been the full open sourcing of the remaining bits of Oracle JDK and contributing them to OpenJDK. I.e., whereas Oracle's JDK was partly proprietary, it is not released full under the GP. *That* is the licensing change.
I use enrich when the object has already been created with some values and the enrich method has to add some more details to it based on certain conditions. 
Right, but you're forgetting that the meaning of long-term support has also changed. When Java had major releases with big and sudden differences between them, those major versions created sharp differences between JDK versions, and justified parallel release lines. Java no longer has major releases, and there are only small differences between versions. The assumption is that most companies would not find it hard at all to upgrade, while those that for some reasons must stick to the same version number would pay for support.
The getting started tuts on spring make me just feel like a dog doing a trick rather than learning about the capabilities of Spring, especially when used to vanilla java(x) with Maven. Could be just me tho
I just enumerate those methods as `m1()`, `m2()`, `m3()` and think of names later.
Hey, while it might take one or two more weeks I'm currently writing a guide on that whole ecosystem (build tools, jars, deployment etc). It'll message you again once it's ready.
There was a book called "Java power tools" a few years ago. If there's a new edition of it, it'd be good. It covered a lot of the Java ecosystem things (Maven, etc)
Except that, even with a six-month release cadence you can still have significant changes between releases. Sure, much of what's being added is fairly incremental but look at what's being removed. The difference between JDK 10 and 11 is quite significant and causing a lot of people real headaches (most of whom are actually trying to migrate from 8 to 11). JDK 11 dropped the [java.se.ee](https://java.se.ee) meta-module, that includes JAX-WS for SOAP-based web services. Quite a few people I've spoken to are still using those and now have to include this functionality from somewhere else. The removal of the browser plugin and, more importantly, Java Web Start. You can argue that these are ancient technologies but there are still enough people, especially using Web Start to make this a major disruption. Oracle have been quite clear that future release may contain breaking changes and compatibility is not guaranteed. I hear Oracle say that moving between 11 and 12 is more like moving between 8u40 and 8u60 but it's not. Firstly the classfile version number is bumped for every release and secondly, there's a new JSR for each release (unlike 8u40 or 8u60). This means there can (and most likely will) be changes to the language spec, VM spec and class libraries. Keeping older versions of the JDK supported with backported fixes will become an increasingly difficult task as the code bases of JDKs diverge over time.
&gt; Except that, even with a six-month release cadence you can still have significant changes between releases. True, but we did before. &gt; most of whom are actually trying to migrate from 8 to 11 Ah. So there was a major release there (9), so this is an "old-model" transition. &gt; and now have to include this functionality from somewhere else You should consider the people who were already on 10, not those who are still transitioning from the old model. Each such developer would encounter such a breaking change roughly at the same pace as before (i.e., if previously, every major release affected all parts of the JDK once every three years, now every feature release affects only some parts). As to those who were on 10, those modules were depracated for removal already in 9. &gt; The removal of the browser plugin and, more importantly, Java Web Start. You can argue that these are ancient technologies but there are still enough people, especially using Web Start to make this a major disruption. It is, but it didn't really happen in 11, but in 9. Java 9 is no longer supported as a "desktop JRE" (8 was the last). &gt; Oracle have been quite clear that future release may contain breaking changes and compatibility is not guaranteed. Compatibility was not guaranteed between 8u20 and 8u40 either, and things broke. Update releases always contained pretty big changes, just not to language/APIs. &gt; Firstly the classfile version number is bumped for every release and secondly, there's a new JSR for each release (unlike 8u40 or 8u60). This means there can (and most likely will) be changes to the language spec, VM spec and class libraries. None of this changes the fact that it's more like moving between 8u40 and 8u60. It's not *exactly* like that, but Java 8/9 had about 100 JEPs, while 10,11,12 had about 12. &gt; Keeping older versions of the JDK supported with backported fixes will become an increasingly difficult task as the code bases of JDKs diverge over time. While it would be great if more people paid for support and helped support Java's development, the goal of the change has been to move Java software faster, because that's what's best for the platform. To make that viable, the goal is to have fewer, not more, "diverging lines", and even people who choose to pay and stay on an LTS release for some reason are very, *very* strongly encouraged to keep up with the feature releases, as the entire purpose was to make change smoother and easier. True, this is a change, and the industry will need some time to adjust, but I think that claims that the new model would be harder, rather than easier, to follow are unsubstantiated. People should, of course, choose responsibly for their services and customers, but they should also give this new model a chance. 
Dog doing a trick is useful when you have no idea what you’re doing, follow the tutorial and do it yourself, increase understanding. Then move on and apply the concept to your own use case, google what wasn’t covered in the tut (usually they only do the most basic use case) and eventually you know what you’re doing. They’re trying to get the bare basics across, the rest is all in documentation.
You simply dont kind man. According to the old testament you should break down that method into multiple ones. 
Sure but .NET Core is coming fast as well and may sound appealing 
Same here! I'd also like to add that the few times I've contacted Baeldung for various reasons I've always gotten a quick and accurate reply.
as well as the licencing , some of the newer features (of Java) lead me to look around at different languages, so thankful I discovered **D** which was a multitude of paradigms to choose from but doesn't force you in any particular one... 
OK, so clearly we have two very different opinions on this so will have to agree to disagree. However. *The removal of the browser plugin and, more importantly, Java Web Start. You can argue that these are ancient technologies but there are still enough people, especially using Web Start to make this a major disruption.* &gt;It is, but it didn't really happen in 11, but in 9. Java 9 is no longer supported as a "desktop JRE" (8 was the last) and Web Start was deprecated. Yes it *did* happen in JDK 11. Both JDK 9 and 10 included the Browser plugin and Java Web Start. If you were using those features you had no problem moving to either of those JDKs, despite the deprecation. *Oracle have been quite clear that future release may contain breaking changes and compatibility is not guaranteed.* &gt;Compatibility was not guaranteed between 8u20 and 8u40 either, and things broke. Update releases always contained pretty big changes, just not to language/APIs. I disagree with this. Compatibility at the language, VM definition and API level (which are the things developers are most concerned about) was guaranteed by not changing the Java SE specification between updates. The JDK was required to pass the same set of TCK tests for 8u20 and 8u40. This is not the case between 10 and 11. If Oracle broke compatibility in terms of how they implemented the JVM between updates I would consider that a failure on their part. At the end of the day, the proof will be in how the new release model with LTS releases works in practice. I've spoken to a lot of users who simply can't even countenance the idea of changing JDK every six months. Even convincing people that a move between the same version of Oracle JDK and an OpenJDK binary can be a struggle because of the required testing involved in such a move. My opinion is that a lot of people will not want to move off JDK 8 until they really, really have to.
Note 2 on the AdoptOpenJDK web page you link to quite clearly says, "We fully expect that OpenJDK8 will have open community maintainers beyond January 2019, so we expect to be able to continue supporting JDK8 beyond that date. Until maintainers have been established we are unable to make a definitive statement. This position is the same for JDK11 and all future "LTS" releases." At this time, there is no guarantee of updates being made available in older JDKs. I'm not being argumentative; I'm just pointing out that at this point in time how people are going to access LTS is something they need to think carefully about.
Happy cake day!
Unrelated, but I would love to see details on what GraalVM's GC story is but I cant find anything on it.
GraalVM doesn't bring a new GC to JVM. Only the JIT
Poe's Law, much?
If you're looking to expand your knowledge is developing a VST the best way to do that? I doubt you can do it in Java (as Java really isn't designed for tasks than that). Would your time be better spent perhaps learning c/c++ with the end goal of building a VST? s you then also have a new language under your belt.
The key difference is that you have to pay for LTS versions. And that is a new cost factor. 
Yeah. Hopefully they offer the maintenence backports to all openjdk users. If everybody makes their own thing, it multiplies the overall costs and leaves smaller companies on their own. 
Would this be an outlandish goal? I've taken 2 csc classes and we use java, I really want to learn c++ tho and this project could teach me a little audio processing, and a little GUI Not trying to go crazy just trying to have a something i could work on, any resources would he much apreshed
Yes, but on the other hand you need them less because there are no major releases. Before, there was no gradual migration path from 7 to 8, so there was a better reason not to upgrade. Comparing the new model to the old model on any *single* axis doesn't make much sense, as it's a comprehensive change with different tradeoffs. The new model will need to be judged as a whole, and yes, it will take some getting used to, but the panic that ensues when people focus on just one aspect (no free upgrades to 11!!! -- yes, but 11 isn't a major release. no parallel update lines!!! -- yes, but upgrades have been made considerably easier) is unjustified. Give the new model a chance.
not ironic really
Better Builds With Maven
The short answer is: yes. 
How hard it would be to serialize this optimization IR code and data to a file (as a last step) and load it on the next run (kind of AOT)? Is there a showstopper?
It looks like in your [submission](https://www.reddit.com/r/java/comments/9ks5ao/kotlin_vs_java_which_is_most_suitable_for_your/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
My notes from Clean Code: **Small!** The first rule of functions is that they should be small. The second rule of functions is that they should be smaller than that. Functions should not be 100 lines long. Functions should hardly ever be 20 lines long. FUNCTIONS SHOULD DO ONE THING. THEY SHOULD DO IT WELL. THEY SHOULD DO IT ONLY. So, another way to know that a function is doing more than “one thing” is if you can extract another function from it with a name that is not merely a restatement of its implementation [G34]. Functions that do one thing cannot be reasonably divided into sections. Notes from Refactoring by Fowler: **Chapter 6. Composing Methods** A large part of my refactoring is composing methods to package code properly. Almost all the time the problems come from methods that are too long. Long methods are troublesome because they often contain lots of information, which gets buried by the complex logic that usually gets dragged in. The key refactoring is [Extract Method](https://refactoring.com/catalog/extractMethod.html), which takes a clump of code and turns it into its own method. There is also a [cool site](https://refactoring.guru/extract-method), which basically made it more visually appealing.
Neither C or VST's are things I know much about so I can't help you there, but I wouldn't say it's bad to learn, knowledge in C related languages is excellent as so much of computer science is still based around C, and audio processing sounds like a great topic to get into it. It just depends on how much free time you have.
Yours? No. Mine? Yes.
[Yes](https://opensource.com/business/14/1/how-to-transition-open-source-to-revenue). [Make it a business from the beginning](https://opensource.com/business/14/1/5-lessons-open-source-revenue-based-model)
Unless you want to later switch licensing, that's usually not a problem. Having said so, you may want to later switch licensing :)
It's not a problem until it is. And there's a bunch of projects where its been a problem. 
I see this was two months ago, and I cannot find a maven version released for stock jdk. Is that still happening? If so, can you advise when? I am anxious now that I saw Nashorn has been deprecated.
Hey! I found your site a while ago while evaluating embeddable http servers (in the end I went with vertx though). I really enjoyed it. Keep up the good work!
Use the decorator pattern. If the state can't be determined at the time of instantiation, you're dealing with two separate concepts.
Not entirely VST related but it certainly is possible to do lots of real time audio processing in java [a test song made in my java DAW test](https://youtu.be/upjaqaQ3_xI) 
Poe's Law then
Am I missing something? The API documents and reference documentation are normally pretty good, and the examples projects and unit tests fill the gaps. If all else fails the code is pretty clear 
What sort of resources are lacking? I can imagine the lack of youtube tutorials from pivotal is an issue? One problem with video courses is they all want to offer 40 hours worth of video and charge $100's. Id prefer a focused course on a specific issue at a lower price - so a 2-4hr of videos for $25-50
It looks like in your [submission](https://www.reddit.com/r/java/comments/9kucqx/can_someone_please_explain_me_the_difference/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
My company isn't worried about this. We've already moved to OpenJDK internally and starting next year our public releases will use it too. We will be relying on the public updates from OpenJDK vendors who have committed to it. To be honest, the ClassLoader/JDK module changes from Java 9 were a bigger deal for us than the Oracle JDK licensing stuff.
Question, are you in a 4 year program and do you know what languages your 300 and 400 classes will be using?
The idea of an Application Server gave room to Kubernetes / OpenShift / CloudFoundry, which are basically a polyglot appserver-ish technology with less capabilities than a traditional Java EE application server. Which is not a bad thing at all, just a bit different. But, many companies have invested years, lots of resources, trained several employees, and built integrations around that model that for some, it is not a simple replacement/migration. For those, it is important that the application server continues to evolve, or at least improve (even if only bug fixes), to keep their systems running. There is still need for this technology, and will be like that for a long time. So, for green field apps, or when projects and teams have an opportunity to re-write and/or migrate? Sure, people will do it. Several systems were 'migrated' to Java EE in mid 2000's. Circle of IT life.
Eclipse has been around for a long time. I had a couple of years in the late nineties while I used vi. Coming from punch cards it seemed like the future was finally here. Google has has more of an impact.
I've never not had an IDE for Java. I started coding in Java in 1998 and I had JBuilder. The first IDE that I saw that had auto-compltion. Blew my mind. As for how do you compile without an IDE there were a few ways: - ant . It is and was quite good. maven is better, of course, but ant had its time. - makefile. Yes, you can use makefiles to invoke javac - shell script (bash). depending on how large the project was, there was quite a bit of writing to do. But, before Java, as editors we had the good old emacs ( vi only if you had a brain haemorrhage), and on ms-dos we had Borland C++ and Turbo C and Turbo Pascal . Not IDE's but quite advanced environments on their own. And, let's not forget DBase and FoxPro after it. They made creation of data applications a breeze. 
If you looked at software before the 90s, it makes sense . . .
Depending on your definition of an IDE, they predate Java. Microsoft and Borland had commecial IDEs that were fairly full featured. Both IBM and Borland had commercial Java IDEs based on other products. NetBeans was orginally started in 1996 and bought by Sun in 1999. The main difference was cost - none of them were free and often cost hundreds of dollars. Borland JBuilder [https://en.wikipedia.org/wiki/JBuilder](https://en.wikipedia.org/wiki/JBuilder) VisualAge [https://en.wikipedia.org/wiki/IBM\_VisualAge](https://en.wikipedia.org/wiki/IBM_VisualAge)
I've always built projects using the terminal. Whether that was using make, ant, maven or Gradle. IDEs are no way to build artefacts. I've used vim for editing Java before, but the deep directory structure of Java projects makes it a pain than for most languages. Ctags/stats helps but it's still a pain. Writing Java without an IDE is a form of masochism.
When I started professionally in ‘98 UltraEdit was our editor of choice; builds were done by Make scripts; and one of my first tasks was to help migrate source from Visual Sourcesafe to an RCS variant. IIRC, Notepad was screwing up carriage returns making our Unix ports “interesting”. Microsoft was still sorta pushing their Java implementation (Visual J++?), but I don’t think I’d ever heard of anyone using it. A year later I started at SunW and found nearly a holy war between VI and EMACS users. With enough knowledge, EMACS functioned as a somewhat complete IDE, I could edit, build (Makefiles), debug (gdb?), and run from a shell anything I worked on. IIRC EMACS had integrations to source control built in so one could check in and out easily. Someone I worked with there had an early IDE running, I think it was IBMs, I don’t remember it running well or providing anything more useful than I already had with XEMACS. 
yea OS should use C, id advise learning c++ and learn how pointers and references work. it will give you a deeper understanding of computers.
I only was without an IDE for a short time before Visual Cafe. We built with makefiles onto floppy disks. I was doing C in a terminal, then MFC hell before Java, so it wasn't a big deal at the time. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/9kw83a/admin_programmer_perspective_on_java_18_years_on/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
How useful is it for someone who does a lot of work in the terminal, but doesn't know any perl? I want to learn perl for it's text processing capabilities, not for application development.
You got a decent text editor (SlickEdit), used the cli utils, and wrote cmd/bash and make files to automate builds
Still use java in the cmd too this day. Its a good check for your application is in a releasable state. If you don't like typing the commands get a multi button mouse with key sequence macros (you'll never look back).
Generally, compiling using the terminal was a good learning exercise, like one does with C is most entry level classes. But really, no one I know really worked that way. The worst build system I saw used a chain of DOS batch files though, and yes, that was how they really worked. It was painful. 
Well you can always code your own IDE. If it seems daunting start with a text editor and move on from there. Wrote a 68000 IDE on the Amiga back in the day and now onto my 4th one (java).
I used JBuilder in the late 90s. :) Then I took a college course in 2001 that required use of Emacs for some reason.
My college had us using emacs for CS1-3 with Java. Probably could of saved myself hours a week in typo compile errors. Also lots of looking at the actual Javadocs. 
good god.... Borland C++. What an amazing time it was to be alive back then.
My undergrad program was taught in C++ and you were required to use VIM and compile from the command line using a Makefile you created. Everything was from the console. I had never used an IDE until about a year ago. when I started using IntelliJ for Java stuff.
It was fun like now but the language and platform were simpler. The first IDE I bought was Visual Cafe. It was great. Like Visual Basic but for Java and better. The original Visual Cafe.
As others have pointed out, many IDEs predate Java, and I'd add what constitutes an IDE can vary a bit as well. I personally didn't use integrated development environment when I first started writing Java, but rather a collection of disparate tools (editors, terminals, debugging tools, etc...). While having all of these tools integrated together had a significant impact on my efficiency, it pales in comparison to the impact google had on writing code. There were plenty of search engines at the time, but it's hard to overstate how much google transformed programming. So much so that it seems as if I've had two careers: BG and AG.
javac and bash/batch scripts. It actually wasn't terrible, you chose your dependencies much more carefully back then. The refactoring tools were/are the major game changer for sure.
Still doesn't come close to a real ide though. eclim is a similar project for vim.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'm surprised I'll be the first to say this... JEdit, and full of plugins. Today some people use VS Code, full of extensions. :)
The IDEs back then were shit, though. I worked for Borland when JBuilder came out, and I found it to be of no use whatsoever. So I just used a text editor and the command line until IntelliJ came along.
It was nod bad using IBM's `VA for Java` i.e. Visual Age for Java - from which `Eclipse` IDE was born
&gt; while I used vi I still use vim predominately for other languages. That being said, I can get away with having one or two files verse a few dozen :3.
Rather than asking about IDEs the two things that have most affected how we develop are package managers and google. In year 2000 you had to search your jars and download them and manually add them to your classpath. This was a nightmare. You also had to thoroughly read the docs because there was rarely samples from other devs, articles or getting started tuts and nevertheless they were close to impossible to find. Not to say, no free stackoverflow. So you relied a lot on your super experience coworkers.
I find it just TOO much, you know? NetBeans is my puppy. Learnt with it and never saw much point in changing.
I love vim, not gonna lie. Vi is/was a real basterd (the only time I use it is when I have to remote into crusty old Solaris servers and read some logs)
 IIRC, Notepad was screwing up carriage returns making our Unix ports “interesting”. [dos2unix](https://linux.die.net/man/1/dos2unix) is a good tool for that. Bit late now haha.
See, I write a bit of C, and I find it easy enough 'Make'ing, etc. I didn't realise you could 'make' java files. Might have a go at that tomorrow.
Thank you for this! I really wasn't sure if it'd help or not since a lot people don't recommend getting certified.
I rarely use the autocomplete. I only really use NetBeans IDE for the auto-formatting, syntax error highlighting, easy viewership/navigation of my project files, and having an easy way to pop the GUI/run terminal. I remember reading an article by a web developer that only used NotePad++, never had any plugins etc. Saw his colleagues spending more time messing about getting them working than actually, well, working.
I learnt C (badly), with just VIM, a terminal, and *The* C Book. 
Don't you mean... Stack Overflow ;)
It depends tbh. Understand its no subsitute to programming practice, its something that's valued by some employers. 
Yeah, I figured since I'm in a bootcamp as well, I could showcase some of my projects that I complete. I also want to try to stand out when being compared to other bootcamp graduates.
I actually make a point to search the internet as a last resort. Trying to stick to reading docs, etc. and writing my own class/libraries etc. Only google if I'm either well stuck, or looking for peoples opinions on things (i.e. Reddit, lol)
I studied Computer Science in the late 90s, mostly C++ using Borland's IDE. Did a little with Java and JBuilder. After I graduated I changed career and never touched an IDE or programming for years... When I came back to IT, 6 years ago, I was astonished by Eclipse and what it could do for me. Auto-complete, documentation hints, refactoring - refactoring! Of course, I'm an IntelliJ guy now. And sometimes vi :).
Notepad iin Windows 10 now understands alternative line endings and doesn't mess with them. Only 20 years too late.
Having worked with a couple of junior programmers, I can state that its not only for "getting a job" as in it's just a paper which is nice to have, but states that you have basic knowledge of Java. I've seen juniors who cannot say how many access modifiers Java has.
Interesting fact: O'Reilly got started by publishing the X11R6 APIs/standards in book form.
Luxury. My 1998-2001 CS course used vim+make for C++ and vim+javac for Java. The information systems students used Visual Basic too iirc.
I still don't use an IDE. I edit the code in Emacs, and build via the command-line. With Maven/Gradle it's just a single command to build. And editing is fast, without the editor ever trying to distract me with all kinds of stuff popping up, and the editor hanging because it's reindexing/using too much memory/whatever. A benefit of doing it this way compared to having the IDE build for you is that I know exactly what is going on. I've often seen colleagues using IDEs curse and swear because their build isn't working right because something's happened in the IDE environment and they don't know what. That's never an issue for me.
&gt; VisualAge \*shivers\*
&gt; Curious to know how you got on with using terminal/javac etc. Back in school between '98 and '02 we just used Notepad++ and similar text editors. I started using a real IDE back in '01 in my internship (VisualAge for Java) and it was a huge eye opener. Code completion and integrated debugger was amazing. &gt; I just tried to compile a project from terminal and had a good ol' headache. It's not that hard; you just have to get over the learning curve. 
It was still tons and tons better than just using a text editor. 
I would advice against paying for the certs yourself. If your company is letting you get them; by all means go for it. But it's IMHO not a smart investment, time and money wise, by yourself. 
That's why I said many employers. I know mine, he says it worthless. But many in my company have favourable tendencies toward it. 
I went from Turbo C to JBuilder. JBuilder was magic, it told me the compilation errors without needing to compile the project. I remember how blown away I was with that feature.
Probably the ones who went through getting the cert, so I'm guessing there's a bit of a selection bias there ;)
[removed]
I agree. In the same sense, if I know English language (albeit not well) does not make me a writer. It takes time to developer those skills. What I am saying, that if you don't know English words and you are given a task to write an essay, you will stumble at the first sentence.
No need to worry. It is actively worked on. It will likely land with the release after rc7. Unfortunately it took a bit longer than I expected in my post. 
I agree, the dominance of Eclipse is no longer the case. Most of the survey data I see shows a continued dominance of Eclipse but only by a slight margin over IntelliJ. Eclipse seems to be slowly losing market share and IntelliJ is picking it up. In the past the margins were much higher. Accurate historical data is much harder to find these days, but as I recall, by some accounts Eclipse enjoyed 65% to 75%+ market share around 2012(ish). Also keep in mind that the "Eclipse" platform is the foundation for quite a few vendor tools. So the numbers vary depending on what 'flavor' of Eclipse we include. 
Tbh, I feel somehow intimidated by all the IDEs, because I have to figure out what are they actually doing when I clicked something, and sometimes they generate shit loads of junk and hide them somewhere I would never know... I'm also not really a fan of vim, it's great especially for some light weight scripts, but I'm just more used to something modern, it's already 21st century after all.
I'm lucky enough to have been able to avoid WSAD and he deep J2EE build-outs and systems for the last 17 years :)
How many LOC? 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
netbeans is great
netbeans sucks, the only good thing was the good integration with maven (compared to eclipse)
gradle and maven work with some IDE's. . no need for a terminal if you use intellij (or eclipse i think)
Hey /u/speaksjava, what's the process for getting content on DZone? Do they ask if they can republish it, or did you approach them? Do they pay a flat fee? Percentage? Nothing? [Here's the discussion](https://www.reddit.com/r/java/comments/9iv9jb/90_new_features_and_apis_in_jdk_11/) from the source article that was posted last week.
In that analogy, it's better to ask people to produce you a sentence, or an essay. Instead of quizzing them which letter in the english language is the most common, or some other trivia.
Sticking a button in front of executing `mvn install` or `gradle build` is very different from requiring the IDE to build a project.
Ok, to give some perspective. Java 1.0 came out in 1996. Java 1.2 (I'd argue it's the first really usable version) came out in 1998. First, you could always use an editor with syntax highlighting + Make. UltraEdit came out in 1994. JEdit in 1998. As far as I remember Midnight Commander had Java syntax support quite early as well. JBuilder was available in 1997. Netbeans was started in 1996 as a commercial product, made freely available in ~2000. Eclipse was available in 2001. So there wasn't much of a gap between availability of Java and availability of IDEs or enhanced editors. The concept of IDE wasn't new by then. Turbo C++ was available for DOS since 1990. Turbo Pascal version 4.0 which could be called an IDE was available since 1987? For me personally- I started with Make + Midnight Commander on Linux in the university around year 1999-2000. Used Netbeans when I got my first real job in 2001. Kept switching between Netbeans and Eclipse since then. Now I use IntelliJ at my current job, and Netbeans or Eclipse at home. &lt;/nostalgia_trip&gt;
Does anyone here remember using Kawa? It was a bare bones java IDE on windows that had hooks into the jdk for compiling and debugging. Used it in the java beta (pre 1.0) days. Moved pretty quickly to Intellij IDEA from there. 
People use build automation technologies (ex. make, ant, maven, gradle, sbt, etc.) to simplify development activities outside of an IDE. Make existed **long** before java, so that's what many people used in the very early days.
Configure, init, computer, prepare, etc.
There are trivial questions, but there are also questions regarding objects equality (seen equals overwritten with Integer value == Integer value), polymorphism, inner classes, string pools, shadowing, overload, streams etc etc. And I see them useful, especially for juniors.
Thank you! Is there somewhere I should watch for this specific announcement, or a ticket I can watch for updates (about artifacts being added to maven central)? Several people seem interested and Google isn't very helpful on this issue.
thanks!
Don't forget [TurboVision](https://en.wikipedia.org/wiki/Turbo_Vision). It was the UI kit and basis for IDEs for Borland Pascal and C++ in the text world.
For me it was Emacs with JDEE (Java Development Environment for Emacs) mode. Still is today although JDEE hasn't really kept up with the changes in Java.
Did you ever use JDEE? How does it compare to lsp-java?
The AdoptOpenJDK build of OpenJDK is a great choice if you are planning on staying on Java 11. The plan is that it will receive 4+ years of security patches (thanks to Red Hat, IBM and others). Note that these security patches should also be available via your package manager, Azul Zulu and SAP amongst others. If you intend to join the release train and move from Java 11 to 12 to 13 etc then you may find Oracle's OpenJDK builds a better choice - https://jdk.java.net . But note that using Oracle's OpenJDK build means that you will only have 1 month following a release to upgrade to the next version before a security patch comes out. These links may also help if you need more detail: https://blog.joda.org/2018/09/java-release-chains-features-and-security.html https://blog.joda.org/2018/09/time-to-look-beyond-oracles-jdk.html
Hahhaha, debugging, wtf was that at the time? Let's print to console and hope for the best.
I don't know I kind of feel like we've come full circle. IDEs are kind of bloated now, and eclipse has a really messy UI IMO. I think the best way to do things in the current enviroment is just have a simple editor. All the tools you probably need from an IDE are available as individual command line applications or plugins. For instance I use vscode right now. For java, it has autocomplete, syntax highlighting, debugging, can generate getters/setters, and is hooked up to the eclipse code formatter. So all the features from elcipse that I actually use, in a lightweight more flexible package.
Where TF is part 1? 
So Oracle is not that evil? hah people have been making such a big deal from new license but Oracle just make Java more open.
And GitHub
How many? I don't know. Lots. I've been writing Java since 1996. I did some open source projects: [JSLT](https://github.com/schibsted/jslt), [Duke](https://github.com/larsga/Duke), but most of what I've done is [at work](https://vimeo.com/181805765) and therefore closed source.
It's mostly Java outsiders that have been moaning about it. I was excited the day the announcement was made. We might actually be getting the open Java we've always wanted, and the elephant in the room is actually getting out of the way.
Hmmm, just installed it via brew - Idea does not recognise it as JDK, and directory structure differs from Oracle's JDK...
That's a good question. I believe that Azul (who I work for) have some kind of setup with DZone to pick up most of the blogs I write and re-post them. Sadly, I don't get any compensation for the re-posts.
Also note that Andrew Haley at Redhat, who will almost certainly be leading OpenJDK 8 and OpenJDK 11 after Oracle moves on to Java 12 has said that OpenJDK should release binaries themselves. https://developers.redhat.com/blog/2018/09/24/the-future-of-java-and-openjdk-updates-without-oracle-support/
We will announce it in the release notes. We release roughly every month (this week its RC7 and just before Code One, aka JavaOne it is RC8). Follow @graalvm on Twitter for release announcements.
IntelliJ is just awesome. I really have no complaints. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The fact that vscode doesn’t have many features doesn’t mean it is lightweight. I am almost sure that my full featured IntelliJ is using comparable or even less resources. Keep in mind that vscode starts some kind of headless eclipse in the background.
If I were to get certified, it would come out of my pocket. I guess if anything I could read through the study guides and practice what I've learned. I'm hoping to have a better understanding of Java and be able to convey that in an interview. I have an internship that I list on my resume, but I don't know if employers would care too much since a different language was used. I just want to be able to stand out in a sea of applications and be able to prove that I know what I'm doing. 
According to the github repo it's powered by the eclipse JDT language server. Which looks like a port of JDT core. I do a lot of my work on a low budget Chromebook and it can't take eclipse. Vscode runs like a dream and I love how much I can fine tune it to my needs.
me too. i used emacs for java coding before emacs even had proper unicode support. :)
&gt; thanks to Red Hat, IBM and others ... and the many OpenJDK developers at Oracle, of course, who will likely be the ones actually writing the patches.
Right now, sure. I think this new release cadence and licensing strategy means the OpenJDK project is going to attract more contributors outside of Oracle. It's a new Dawn for OpenJDK.
I hope so. Oracle has been begging for more companies to contribute.
I sure hope so. But I am always confused when people bring up the new "licensing strategy." Do you mean the [transition from the semi-commercial BCL to the fully open GPL](https://blogs.oracle.com/java-platform-group/oracle-jdk-releases-for-java-11-and-later)?
I'm not saying the content of the course is not useful, but you can get the content for free instead of paying for a certification exam.
Why is openjdk/windows way bigger than oracle jdk 11 ? Are the .pdb files really needed ? (I am thinking of shipping this with a java app) openjdk = 414 MB oracle jdk11 = 285 MB
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/9l1ytw/java_9_programming_for_complete_beginners_in_250/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It shouldn’t matter much. You’re supposed to use jlink to reduce the size of the jvm.
If you think about it from the perspective of the caller of the method, if the setFoo(Foo foo) method does or doesn't do a lot of work or does why do you care? I think the semantics are more about the signature of the method. Naming it `set` is fine if it sets one thing no matter how much it does in order to set that one thing. 
I know, but jlink doesn't work on non-modular (old) libraries.
You can still use it for just the jdk libraries itself. If all you need is java.base packages, strip it down to just java.base.
jlink works in two "modes", roughly speaking: - generate a new runtime image from a subset of JDK modules, e.g., something akin to a JRE or any other custom (but valid) combination of the given modules. You can use redistribute this runtime image, run whatever (non-modular or modular) java programs you want etc, just like you would from a full JDK - generate a new custom runtime image containing both a subset of (or all of) the JDK images _and_ third party modules, possibly including application module that are configured to give you added executable in the `bin` folder of the image. It appears many are under the impression that jlink is mainly about the latter mode, while it's really used a lot in the former (most notably in the OpenJDK build itself).
interesting, I might need to make time to check this. thanks.
What happens if I stay in Java 8? I remember trying to install Java 9 like a year ago and deleting it since it didnt work with Netbeans at that time (dont know if it works now) and now Java 11 is coming out lol. This is too quick for me.
I think you are confusing things. Spring boot is a framework that gathers a bunch of libraries that make it easier to put an application out there. There is no sense of models in spring boot but beans. With the help of annotations you can configure and expose rest endpoints to the client. If what you are building is an rest api, where you on expose those crud endpoints. You can put another library (swagger) and annotate those endpoints with the swagger annotations and by doing this the non technical people can access a webpage where they van easily interact with this api. Does this help you?
Jhipster
My first IDE back in '94 was QBasic that came with ms-dos. Then it was Borland Pascal and Turbo C++.
I'd like to escape IntelliJ, any ideas? I'd like to escape back to Eclipse.
By exposing the a web interface, I suppose I would still have to build the admin panel interface and all? I was hoping there would be something that has the administration portion of the site covered so that I can focus just on the actual site itself. 
Polls are far from accurate.
Would this mean I will still have to build the frontend of the admin panel using the endpoints exposed? So an admin panel doesn’t quite come out of the box? 
If you want to write a SPA front-end, Spring Data Rest might help reduce the backend work required, as it will create REST endpoints for all your entities. 
Spring Data REST is an alternative to Swagger if you're already using Spring Data JPA and friends.
&gt; Oracle, of course, who will likely be writing the patches. But unlikely to be backporting them though, right?
Spring data rest and swagger are two different things for two different purposes. Spring data rest wont give you the UI to interact with the endpoints for example
No. If you use the swagger ui you get the frontend out of the box
Thank you for your reply, I agree with you in common, possibly that is not pretty right direction I chosen. And sorry for posting direct link
/r/javahelp
Right.
Author here - lsp-java in combination with few other plugins (lsp-ui, dap-mode, projectile, treemacs) comes pretty close to what real IDE has. It has refactoring support, quick fixes, completion, go to implementation/definitions, references, fully featured integrated visual debugger, renaming, moving classes, browsing classpath, test runner, test explorer, project explorer, etc. There are few bits that are missing but they are planned to be added. You may take a look at [https://pbs.twimg.com/media/DnPkl10XgAIFugB.jpg:large](https://pbs.twimg.com/media/DnPkl10XgAIFugB.jpg:large) .
lsp-java maintainer here - I have never used JDEE(I was never able to configure it properly) but if you have some specific question about lsp-java you may ping me. 
I'm not aware of any type-safe templates; we still use JSP/JSTL, as it's a tested, reliable, *fast* technology that's also extensible, even if it's old.
I’m think of something like Twirl for Play. That engine is actually a super-great!
Thymeleaf has full Spring integration and simple config with Spring Boot. 
DZone approached me about syndicating select blog posts from my blog and I agreed to it. There is no financial compensation generally, but the syndication on DZone makes posts available to a far larger audience and they provide a link to the original posts. https://dzone.com/articles/how-to-submit-a-post-to-dzone
Ah yes, "exposure". :)
Thank you for this information. I just tried it and I managed to create a custom runtime image with only 70 MB :-)
Thanks!!
Hmm, will check thymeleaf again. Thanks!
Why not just use Twirl, then? It says it can be used standalone; you'd just have to write a view resolver for Spring.
I always thought it was significant that IntelliJ was the first refactoring IDE that kept the entire compiled AST in memory, using the same terms from Martin Fowler's Refactoring book.
You can probably just copy from [https://github.com/67726e/Spring-MVC-Twirl](https://github.com/67726e/Spring-MVC-Twirl)
Main features of JDEE I utilize * Clean integration with Ant and Maven for building * Able to configure templates for skeleton classes/interfaces. Also inserts the correct package when creating a new class/interface. * Able to generate import statements for referenced classes * Able to generate skeleton code when implementing an interface * Able to generate selected getter/setters. So mostly it handles boiler plate work for me. 
Generally, you will understand how to apply tools. You require multiple tools to complete a toyproject. You might start with a screwdriver move to an electric screwdriver but you will not stop there. &amp;#x200B; One day you will see an unfinished project with many unfinished parts and you will realize which tool you need to finish those parts. Other parts might not work and need a replacement. Programming is a craft and art which you need to hone.
Yes! This is the book I ended up starting to read today. I didn't realize the creators of Maven published their own book. As for the official documentation, I just felt it to be a bit over my head because I wasn't familiar with working with Java professionally. I have a lot of preconceived notions about organizing projects and work flow because of my Node experience. 
Does anyone know if there is a built-in alternative to Guava Throwables.getRootCause or Commons Lang ExceptionUtils.getRootCause yet?
I think that's correct. I'm on the same boat as you, now I'm kinda forced to move to intellij since netbeans doesn't like Java 9 or 11 
I don't know what makes you so certain it will receive 4+ years of updates. In your own [blog post](https://blog.joda.org/2018/08/java-is-still-available-at-zero-cost.html) you say that Oracle only does 6 months of updates. Even in the [adoptopenjdk](https://adoptopenjdk.net/support.html) website it says: &gt; Until maintainers have been established we are unable to make a definitive statement. This position is the same for JDK11 and all future "LTS" releases. We will just have to wait and see, and I prefer to be skeptical until then.
I'm more excited about a JDK 8 build that actually includes a cacert file ([https://github.com/AdoptOpenJDK/openjdk8-releases/issues/11](https://github.com/AdoptOpenJDK/openjdk8-releases/issues/11))
In the real world, inputs and outputs of your program are actually linked to sensors and actuators. For example, in a rocket, maybe your code would read airspeed, attitude, air pressure, acceleration and write throttle opening, winglets position and send radio telemetry back to ground station. In between the two, your code would calculate the adjusted values to output to maintain the expected course. This would run in a tight loop that never ends. Read from sensors, calculate, write to actuators, repeat. The number of things to track determine how complex the code is, but ultimately it's always that pattern. Most important for real world code is error handling. If the control loop exits or even just pauses for too long, congratulation, you've just crashed a rocket! So you need to know in advance how to detect and best handle a faulty component or a bug in your code resulting from unexpected conditions. Good luck, and happy flying. 
Watch all 15 mins of https://vimeo.com/33403686 and tell me whether you’d want to go to something where that is not possible
Still does not work? I love Netbeans with my soul. I still remember when I Installed Java 9 and changed the path lol, netbeans blew up and my was a huge red line. I think Im gonna die with Java 8. Probably because of my ignorance but I dont think I need anything more than Java 8. It is a pain to distribute apps that use new features since users never update their JRE.
I suppose you are behind the "Hello World" if you allready know the Dog extends Animal thing :) Lets make a program, that have 1 Button, and it writes text on screen"clicked" when you klick it. Looks useless, but kinda similar to a pedestrian lights. You click a button, a text "Wait" starts to blink on the light, and the light turns green for you after a while. Lets write a Class, that simply gets numers, and if the number is big Enaugh, you fire an Event. Looks useless, but if i call that Class "AirbagLauncher" you will get my Idea :) Many thing's that depend on speed are not written in code, but "harcoded" in hardware (I gues nobody want's an AirbackController to be in JVM :) But the logic is the same. The Paiment with Creditcard ? Authentification, authorisation, Datatransfer, you get your goods at the end and the shop gets the money :) It all starts with a line of code, just try to make your first website with a login and authorisation. Make content forbidden to certan group of users, and you won't stop learning until you are to deep in the rabits hole ;)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
NetBeans works well on 9 and beyond; it just has a new home: https://netbeans.apache.org/
Yes saw that release yesterday. And works fine but I may need to read about plugins for it I think it doesn't have the same list or something. 
I have also searched for various template engines some while ago. The only ones (in plain Java) I remember that match your type-safety criteria are [Static Moustache](https://github.com/sviperll/static-mustache), [Rhythm](http://rythmengine.org/) and [Rocker](https://github.com/fizzed/rocker). I personally have no experience with these libraries and I don't know how well they are maintaned.
Should be able to import an a Java 8 project to Java 11 in theory? 
I've used IntelliJ every day for months, I went back to Eclipse. There is nothing that is faster in IntelliJ than in Eclipse in my view.
You're welcome! One of the LJC / jClarity engineers figured that one out.
Hi All, I'm one of the folks behind AdoptOpenJDK. Feel free to ask Q's here or DM me.
We're going to try and build this platform at [AdoptOpenJDK.net](https://AdoptOpenJDK.net) \- we're just racking a few Solaris boxes this month.
For anyone established I’d agree, OP is a student so I’m re-thinking that. Anything that shows you’ve made the extra investment in yourself could help differentiate once you graduate. I’m skeptical of certs for the most part, especially the MSC*** ones that came from boot camps back in the day. If they can do it without too much $ out of pocket, and has the time while finishing up core classes it won’t hurt and might help with that first resume review. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/9l79wf/is_it_worth_readinglearning_hibernate_even_if_you/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
If it is “just” crud, we can say your application is actually a (protocol) bridge between the database and the consumers. In that case, there are ofc out-of-the-box solutions, but spring is not the right place to look for them. You need to deploy a UI for the database, and give non-technical people access to that. As an example, assuming you store your data on mysql, deploy a phpmyadmin docker container, configure it and give access to people who need it. If this is not sufficient for you, that would mean your app is doing something more than crud - in that case you need to build your own UI against your API.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
What's the difference between an AdoptOpenJDK built JDK and a Azul Zulu built JDK?
* `lsp-java` supports `Maven`, `Gradle`, and `Eclipse`(not sure whether Ant could generate Eclipse project though). * It has snippets support, e. g. in an empty file if you type `class` it will suggest `class` snippet but I am using yassnippets for that. * It supports import statements, configuring favourite statements. It also suggests the import even if you have mistyped the name of the class. It suggests generating the class/method/field if it is missing, etc. * It supports generating an interface implementation. Also, if some method from the interface is missing it auto suggests adding it. * It has code action for generating getters and setters but again I prefer yasnippet here. The main benefits are the context-aware features, e. g. when you auto-complete method it will guess the best matching arguments for you. If you need only what you have described I guess you may stick with JDEE.
Since you can use any template engine with Spring, I suggest [Rythm](http://rythmengine.org/) that is inspired by Microsoft's Razor. It looks like this &lt;ul&gt; @for(Product product: products) { &lt;li&gt;@product.getName(). Price: @product.getPrice().format("## ###,00") €&lt;/li&gt; } &lt;/ul&gt; Last, but not least, Rythm is blazingly fast.
In my experience, certificates don't matter at all and some (me included) even tend to consider them as a contra-indication. You can't "proof" you're a great software engineer by passing some exam with nitty-gritty detail questions on the options of the javac tool and stuff like that. Instead, I'd recommend to work on getting actual experience and perhaps do some open-source stuff, too. Then, when talking to potential employers, you can speak based on these experiences, tell what you did do great in past projects, which things worked well for you in the past (and which not) and good interviewers will be able to make up their mind whether they think you're a good fit or not. In contrast, I've found places that put high emphasis on certificates are not the places I'd like to work at, because they tend to value people by checking off items on some sort of "skill matrix", and people very after getting certificates tend to be not the people I can work best with. YMMV of course. That all being said, e.g. learning for the SCJP/OCJP certificates isn't bad by itself, there's good knowledge in it. It's just that valueing people based on whether they passed this or not won't do a good job in identifying the best engineers. Hence I wouldn't mention the certificate e.g. in my CV, even if I had it. 
Effectively, nothing. Azul (full disclosure, I work for them) build from the same OpenJDK source as AdoptOpenJDK using the same basic build scripts.
You are safe to continue using JDK 8 (or 7, 6 or earlier) indefinitely in the same way you have until now. JDK 8 was released under the Oracle Binary Code license for Java SE. As of JDK 11, the license for the Oracle JDK (not OpenJDK binaries) has changed to the Oracle Technology Network License Agreement for Oracle Java SE. This is the more restrictive license that does not permit you to "use the Programs for any data processing or any commercial, production, or internal business purposes other than developing, testing, prototyping, and demonstrating your Application". This has not been retrospectively applied to JDK 10 or earlier.
Yes you can!
There should be no difference. The only split will happen later on between Oracles commercial OracleJDK and AdoptOpenJDK binaries (and we expect the diff to be small and both jdks to have the same security baseline)
As other have said, certificates aren't really valued in most jobs - they're something that you generally skim past while reading the CV, and they don't tend to come up during any of the actual interviews. From my experience interviewing juniors, I'd recommend starting some small projects on GitHub (or similar), and learning some of the tools that don't get used in college. Things like Maven, Spring-Boot, Git, etc. I don't expect a huge amount from junior developers interviewing for their first position, but if they can demonstrate that they're willing to learn more than the bare minimum, then they're a leg up on the other candidates.
Speaking to backports. How does proposal work to backport fixes. This bug https://bugs.java.com/view_bug.do?bug_id=8075939 is fixed in 10 but not 8 or 9. It is quite significant no?
&gt; An annotation on the method. I don't think this is a good idea, as that would seem that this javadoc improvement is part of the language. (Like @Override and @FunctionalInterface) I'd like to think of javadoc as a separate tooling that the language itself. &gt; Heuristic inclusion of static methods that return this type. This is very error prone due to the type of the return type (as you suggested). &gt; A JavaDoc tag in the JavaDoc comment on the method. I think this is a very good approach. You can even go further and generalize this a bit like defining a tag and assigning a type to it. And based on the type the tool generates different sections for the method. Like: * @docType factory * @docType builder &gt; Methods will have their own summary section Yes. I don't like mixing different things under the same category as that would just confuse people searching for a specific type of method.
Latest commit was a year ago and latest release was 2 years ago...no thanks
Red Hat have [already indicated](https://developers.redhat.com/blog/2018/09/24/the-future-of-java-and-openjdk-updates-without-oracle-support/) that they intend to offer to become the project lead to backport fixes for both Java 8 and 11. IBM haven't made a statement re Java 11 AFAIK but have [re Java 8](https://developer.ibm.com/javasdk/2018/04/26/java-standard-edition-ibm-support-statement/). But their support model is based on AdoptOpenJDK OpenJ9 builds hosted there. Transitions to Red Hat have [happened before](https://blogs.oracle.com/java-platform-group/end-of-public-updates-is-a-process%2c-not-an-event), so in many ways are not news. A degree of scepticism is reasonable, but with each new announcement we get closer to things working out the way everyone hopes they will. On feature releases, if you want them then you have to move to Java 12, 13, 14 etc. If you don't want additional features then stay on 11 until the next LTS. It is a simple enough plan, but does require choosing the correct JDK for your plan (ie. Oracle's OpenJDK build is no use if you want to stay on Java 11).
I mostly agree with what Sipkab wrote in [his comment](https://www.reddit.com/r/java/comments/9la6vj/opinions_request_would_you_like_to_see_factory/e755bq7/). A JavaDoc tag sounds alright. That said, I'd like the heuristic option as well, where we could hint the system with the aforementioned JavaDoc tag where unclear. Results: 1 - let us see the methods in constructors summary.
THATS RIDICOLOUSLY EXPENSIVE?
A Javadoc tag would be very useful for factories and builders. And yes, those two are different and should be treated differently. A new section in the main view and a new tab would seem like the bast choices.
Sure, if you hit any issue you may ping me. 
This is a software license manager that integrates with Shopify to handle the entire license purchase workflow of commercial software. I built this to scratch my own itch as I develop some commercial libraries and the existing licensing products out there didn't really help much with the "selling" part of licenses... in the end I spent some extra time to make it usable by other developers. This is an entirely cloud based solution that manages license updates, renewals, etc. and doesn't require you to manage your own license server. [Here](https://www.univocity.com/pages /license_manager_integration_java.html) is a tutorial demonstrating how to integrate the Java API on your commercial software. 
&gt; You can even go further and generalize this a bit like defining a tag and assigning a type to it. Very interesting idea, but wouldn't it go against standardization, which, I believe, is a big part of what the JavaDocs do? People will start using all sorts of subdivisions and their own method categories (not only builders/factories) and it can result in a mess where each library will have their own style of JavaDocs. Maybe limit to predefined accepted options?
&gt; each library will have their own style of JavaDocs I don't think this is a problem. More like a feature. If the user would like to aggregate a collection of methods into their own sections he/she should be free to do so. The documentation tools could be configureable to allow specific types, or just automatically collect them without any further configuration. The accepted types could be standardized, but I think that freedom in this case is much more applicable. IMO established conventions are better than limiting the options.
\&gt; But Bitwig Studio is written in Java and might have some Java APIs for Bitwig plugins. Only the GUI layer is written in Java. The audio engine is C++.
I was really surprised at first then I realized it's for the native JDK code. Still cool I guess.
Yep, let's JVM developers use C++11 and C++14 constructs. Currently they're limited to C++98. 
I don't think there is something that helps in CRUD on the administration UI side, however, there is something interesting that's called SPRING BOOT ADMIN SERVER. [https://github.com/codecentric/spring-boot-admin](https://github.com/codecentric/spring-boot-admin) [https://www.baeldung.com/spring-boot-admin](https://www.baeldung.com/spring-boot-admin)
While JDK 9 was the last (ever) major release, it is not an LTS version, so backporting doesn't mean much. The update version to 9 is called 10. As to 8 (and to 11 and other LTS versions), I'm not sure which fixes are backported (this is a P3 bug). In general, under the new model, it's best if people stop thinking of the version numbers ("Chrome versioning") as if they still mean major versions. There is now a constant stream of updates, called "feature releases", to a single release line. That line has *secondary* offshoots of update versions to LTS releases, but those offshoots are very much secondary. Even if you decide to stay "on 11" in production, you cannot ignore the main release line and should test them at least in development.
I started writing Java with Java 1.0, and did not have an IDE. As college students, none of us did. We used only a basic text editor and the compiler on the command line. We often memorized the API or had a printed book close by to reference the documentation. Having auto complete is a total game changer in how you program! 
Small piece of advise, you need to change the java logo on your desktop app. Very important as part of productizing your software. 
That's just the default icon used in a Swing dialog. It's there until you can set your icon. Setting an icon of my choice won't really work either as your software should have its own. 
Thanks for the clarification.
I know but your screenshots should then at least a sample company logo. The java logo just gives a bad perception. Most people aren’t going to read your documentation initially and just look at the screenshots. 
What kinds of projects could I make to show off my backend skills? 
It doesn't have to be anything spectacular - just showing a willingness to learn, and some skills outside of the basic college-learned ones (especially with tools/libraries common in the industry). A simple RESTful API with Spring-boot, Maven, JUnit/Mockito, etc. would be a huge plus in my books.
For more information: https://www.jhipster.tech/
Bit shift? Java has that
I like the idea of an annotation. Would annotations like @JsonbCreator extend from it?
Then /u/-Luciddream- is right and this statement you made is just false: &gt;The plan is that it will receive 4+ years of security patches (thanks to Red Hat, IBM and others). "Reasonably expect" is not the same as "it will".
They will probably provide security patches. But security updates is not all we have got the past 4 years for Java 8. I'm more concerned that after about 1 year from release, the LTS version will not be used by most people. I'm afraid in the end we might have to accept that we need to update our JDK every 6 months, and follow Oracles release schedule.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Of course, I agree with you :)
**Use this on weird trick!!?!** class Meh { static Meh _build() { ... } static Meh _build(int something) { ... } static void other() {} void method() {} } Know your [ASCII ordinals](http://www.asciitable.com)
Take this as you will but I think the webpage needs to have a summary of the product and why you'd use it in a more eye catching style. Currently when I go onto the [https://www.univocity.com/pages/license\_manager\_about](https://www.univocity.com/pages/license_manager_about) the first thing I start seeing is the first diagram with JSON on there doesn't mean much to me at this point. &amp;#x200B;
Tool chain dev hate him.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9lf5to/cant_find_the_docs_java_net_packet_class/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; The IDEs back then were shit, though. But VisualAge for Java was the bomb. It pioneered everything we take for granted in the current crop of ides. 
It was different. I remember being in a Java intro class at the University of MD where the instructor said "Look, no one will do a real application in Java, but applets are going to be huge." Class came with first edition of "Java in a Nutshell" -- that book was a bible. I started with Java 1.0, and worked on some large scale satellite telemetry processing software. We started with make (because there was no ant) and Emacs/VI. We learned fast that make was insufficient, because it could not identify dependencies. There were various dependency tools to try to help that, but in the end, you just rebuilt everything. Every damn time. It was not great. Plus, Java in those days we had fun stuff like no unicode, green threads on some platforms (truly awful thread library instead of native threads) and no supported JDK for Linux (anyone remember Blackdown?). So it was the wild west. Around ... 2004? I moved to a new company, and we all moved to Eclipse. It was magic. Incremental compilation, refactoring, project management. Whee. Later, I moved to IntelliJ, which I love, and pay for gladly. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thankfully everyone who matters knows that operator overloading is a crazy idea and discounted it twenty years ago.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
"Crazy"?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yeah. A jhipster generated app comes with an Angular or React CRUD front-end and its easy to generate new entities keeping everything in sync. 
Operator overloading makes sense for numeric types, such as `BigInteger`, but not for types like `Shoe`.
Checkout hacker rank or interviewcake to see if that’s what your looking for. 
The industry demands javaEE. Install a Payara (Glassfish) server at home and start developing a few webservices or JSP/JSF pages. It's also the perfect environment to learn Spring, which is used A LOT. Half of the effort is learning to configuring the web server. The other half is learning to deal with unexpected problems in JSF, and why sessions aren't working as they should. The other half of the 200% effort is the actual learning :P Good luck!
the best way is simply use Java. Find a project to work on on the side. This might be an open source project, or just something you tinker with on your own. "Hey what if I were to make an app that stored data about Pokemon?" "It would be cool if I could make a program that stored my passwords on my Android Phone" And then find libraries that solve common problems, "how can I turn a JSON string into an Object in Java" . "Is there a better way to connect to a database?" 
Code Wars will keep you sharp. Its good to find some katas that push your abilities and drill them daily/weekly (should be quick but arduous). You can also solve some monster problems too if you want to feel the real hurt.
I'd have to agree with you. Unfortunately for my workplace, we develop off a lot of Vendor products whom force us to use Eclipse plugins, garh!
This reminds me of when I used to write code in Perl in the late 90s and relied heavily on FTP to fix line endings when moving files back and forth between Linux and Windows. Bad things happened if you forgot to switch your FTP client between binary and ascii when you switched which type of files you were transferring.
As I'm learning, I use code completion more to explore what the various methods etc. can do. As I'm writing I try and stay clear (muscle memory, is very important, imho!)
Like + being overloaded for strings? Yeah, crazy idea, would never happen.
At leetcode.com there are programming tasks from easy to hard, that are used for job interviews. If that's not fun enough, find an interesting open source project and contribute. You could look at GitHub and create pull requests for example: https://github.com/topics/java
Thanks for clarifying this. Was about to ask for confirmation that this is the case.
There is also a remote API for Pokemon that can be used with Java and there are Java libraries like for example Retrofit and Moshi that make it quite easy. https://github.com/PokeAPI/pokeapi
Just to clarify for OP: You still don't get the admin panel from Django. You simply get a list of available methods in your controllers and a convenient way to invoke these methods. You don't get a list overview of users in the database, and forms to edit these.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt;Well, it's not a good idea to start learning JSF/JSP in 2018. Both are dead technologies I don't think that's really true. They're still prevalent in the finance industry so there's definite worth in learning it.
This is not a code problem as much as it is a domain problem. In time you will learn to split tasks or problems I into much smaller tasks and problem and tackle them one at a time.
Sadly, people will overload operators on `Shoe`, because they can.
That's the only overload in Java. You can not implement an overload yourself.
&gt; The industry demands javaEE. Only to maintain of migrate legacy projects.
Rule 6 &gt; 6. No Job offers &gt; &gt; /r/Java is not a job market. We do not allow job offers. 
I didn't post the roles. I'm asking where I should :)
&gt; May I do it here? No you may not. 
Alright buddy.
I bet this dude is a lot of fun at parties 
It looks like in your [submission](https://www.reddit.com/r/java/comments/9ll16h/idea_declared_complete_implementation_of_an/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/javafx] [Of the usage of JavaFx Property](https://www.reddit.com/r/JavaFX/comments/9ll3b7/of_the_usage_of_javafx_property/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Aside from that this is against the sub rules, I'm curious: how would that work exactly? At our company we have a referral bonus (roughly a month's salary if someone stays with the company for half a year) as well, but it comes with the agreement that we're not going to just refer any random person with a pulse. Because that's pretty much what recruiters are doing currently. If I were just posting our vacancies here with my name attached I'm pretty sure a few people would be pretty miffed with me.
I would recommend moving towards RxJava. The APIs are fairly similar and battle-tested.
Eeek!
Ah. In that case it's completely unsuitable for this sub as it would just fall straight under the category spam. 
What is wrong with installing Java and one of the many free editors/IDEs on your computer?
Just visited Badelung a few days after this comment. Pop up experience is much much better, hope this will improve overall vibe of Badelung going fwd.
Why are you adding a new method? is because class `A` has this new behavior? or because Java doesn't have multiple inheritance and you can not mix two parents? This is one of the reasons to choose [composition over inheritance](https://en.wikipedia.org/wiki/Composition_over_inheritance).
If B is abstract, it does not need to implement all of A...the class that extends B will need to implement all of A and B. A should not care about the implementation of B. And all the compiler cares about is the first concrete class in the chain. Once sent out, great care should be taken with changes made to A or B because any code that implements them will be broken. It was because of issues like this we have default methods in Interfaces, so that methods could be added without breaking existing contracts. If changes were being made to either A or B, it would be advised the not be abstract, but implemented with a @Since in the javadoc and give the child class the ability to override if necessary.
Indeed, they would.
Fantastic, been stuck on version 3 because I was waiting on the Percona XtraDB Cluster support.
Sounds nice. Is there a feature comparison chart with Liquibase somewhere?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/9lncj8/java_9_programming_for_complete_beginners_in_250/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
We offer a weekly stream of new quizzes on SQL, PL/SQL, Java, Database Design and Logic. The Java quiz is our newest, here's the landing page for it: [https://devgym.oracle.com/pls/apex/dg/competition/java](https://devgym.oracle.com/pls/apex/dg/competition/java) Since it is new, we don't have an extensive library of quizzes, but those will grow over time. And of course members of the Java community can submit their own quizzes to be played by the community!
For me the real power of properties are bindings, so I would actually expect you having only a few percent properties in your codebase, as long as you use binding to connect your pojos to the UI. Personally I only use properties whenever I create a control. If I use anything from the library you generally have all the properties you need and only have to take care to set/bind those correctly. Also be aware that good old manual updates are sometimes way more efficient and less error prone: overblown example: bind all width and height properties in your UI. It will work eventually, but it is slow as heck and will trip up the update based code that ships with javafx ...
Maybe I’m a dummy but flyway seems to be a lot more straightforward 
Removed; see reddit's policies regarding [spam and self-promotion](https://www.reddit.com/wiki/selfpromotion). Also, this subreddit is not for posting tutorials.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Liquibase is the superior solution for big teams. Unless something has changed in the last years, flyway suffers from a serious limitation where the name of the changeset file is actually affecting the order of databases changes. Working in a big team where multiple branches exist at the same time is a nightmare with flyway For small projects both of them are ok.
See my other comment on this thread regarding the naming problem of flyway
**No tutorials**. This subreddit is about **News, Technical discussions, research papers and assorted things of interest related to the Java programming language** Also, please see reddit's policies regarding [spam and self-promotion](https://www.reddit.com/wiki/selfpromotion).
The proper approach here would have been to [message the moderators](https://www.reddit.com/message/compose?to=%2Fr%2Fjava) instead of publicly asking this question here. The answer is still **no** Because of: + No job offers + No spamming
_How to:_ although people on the thread doubt how accurate the heuristic will be, I think it's an interesting approach as it requires zero effort on the developer side. Alternatively, we might go with a tag and _shift_ the responsibility on developing the right heuristics on tool makers (i.e., IDE developers). By the way, have you reached out to them (e.g., Eclipse, JetBrains)? _Result:_ That's a good question because I don't know how often people have both `public` (there are examples from the standard library — `String`, boxed primitives) :-) Would be interesting to gather that data. Maybe *4.* Methods will be displayed in a new tab of constructors summary? 
While we are discussing Javadoc improvements, would it be possible to make https://docs.oracle.com/javase/11/docs/api/java/lang/StringBuilder.html (404) redirect to https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/StringBuilder.html so that folks that got to the old version can easily navigate to the new? Or, even better, add a notable button "Go to the latest version" to already published Javadocs?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Actually I use properties in all layers as it is a convenient way to trigger data related events. And this is what is bothering me the most. I have been able with listeners to managed synchronization in a very convenient way and I really don't want to go back to the old days. You are right about binding Ui nodes being slow. Personally, i don't see why people would do that as you can do pretty much easier and faster with layouts. Anyway I am looking into rxJava as advised earlier. Hopefully this will be it.
You can version migrations with timestamps (V201810050000001__my_migration.sql), which solves version collision.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thanks for letting me know :) Maybe it's time to resubmit this link?
[Here you go.](https://www.youtube.com/watch?v=dQw4w9WgXcQ)
Actually, the naming issue is already visible in small teams. I am currently using firebase with a small team and gitlab merge requests. If your merge requests are in the wrong order, you need to rename the pending files. I also don't like that undo is part of their enterprise version
The only thing you can do is separate your JavaFX code and create a shim. If you are using Java 9+ modules you could just create a new module with the shims and export what packages are required. Assuming everything works out(I haven't tried it for myself) it will allow you to continue to use JavaFX without being completely dependent on it. Look at the Property and ReadOnlyProperty interfaces.
Thank you, akerro, for voting on Link-Help-Bot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://botrank.pastimes.eu/). *** ^(Even if I don't reply to your comment, I'm still listening for votes. Check the webpage to see if your vote registered!)
Sorry to tell you this: this will not solve the problem. It will simply hide the issue, that you should have checked your migration files for dependencies.
Ideally `A` would have been an interface, and then when A needed to add a new method, it would create a default method, which either did something sane or, failing that, throws an exception.
Unless there was some kind of state involved. Interfaces are generally better, but every case is different. Going to deep with inheritance can lead to some weird issues.
Congrats, Flyway team. My little software company relies on Flyway to keep our database updates sane. 
Servlets jsp to begin with.
I stand corrected. It was approved under the web profile under JEE 6 and was never re-certified under 7 and 8. I assumed it had, Thank you for keeping me honest.
Spring boot wraps everything up for you to make it very quick/easy to get started and add features. They have many 'about 15 minutes' getting started guides, here's one for web: https://spring.io/guides/gs/serving-web-content/ That example uses server-side HTML rendering using a library called Thymeleaf. If you decide you would rather do HTML rendering on the client in JS using something like Vue/Angular/React you'll use similar controller code to make a REST endpoint providing JSON data: https://spring.io/guides/gs/rest-service/
&gt; you'd have to write your own server implementation using ServerSocket I guess. Or use a "microframework" like [Jooby](https://jooby.org/), [Javalin](https://javalin.io/), [Spark](http://sparkjava.com/), etc.
&gt; B &gt; is supposed to be a complete implementation of &gt; A There should have been an interface. Abstract classes shouldn't be used to define a class' contract.
What do you think an abstract method does then?
Isn’t TomEE Apaches application server for enterprise applications?
Check out jhipster for a great production ready cookie cutter around spring boot 
Yes, TomEE is Tomcat plus other Apache projects required to make a full JavaEE stack. I believe it only supports JavaEE 6 though, not 8. For that, you'll need Glassfish or WildFly.
What a horrible answer 
I've been using Tomcat almost exclusively for quite a few years, what is the better and more current approach? Glassfish?
there were no issues. they just updated the docs. (i think some people think it’s not supported unless explicitly listed) https://github.com/flyway/flyway/commit/89ed723d0e6b3cdc2de2276336d396e338352220
+1. It's a great starter.
Ah ok, thanks. 
[DOSBox](https://pimylifeup.com/raspberry-pi-dosbox/)
Thanks everyone, I'll start by looking into spring and javelin! 
Ty. I've looked at DOSBox before and the problem is the steps to install it. I just don't think Middle school students can handle installing it and understanding what it is. Just adding a few extensions and creating bookmarks on the bookmarks bar is above most students. It would be nigh impossible to walk a class of 30 through install the extension, copying the game over, and configuring it. Remember that there are kids in the 8th grade who literally can't read for aggravating reason I won't go into. 
You might be able to download a JavaScript version and host that on an internal webserver. Looks like there are a few around. 
Jooby is really great. It’s simple, but has modules if you’re looking for more. 
ty
Heh, belated response. I'm sure that was the turnaround time on the posting itself. But I guess I was referring to the longer conversation that must have happened around whether RH was prepared to take on this particular support burden.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9lti9g/ootl_whats_going_on_with_jre_licensing/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I once, in a moment of fandom and immense frustration with the the abandoned nature of sparkjava, did all the work necessary to make it non-static. Yup tests passing and all that. Pointless act of futility. Modtly methodocal baby commits with IntelliJ. Now deleted!
It's been a while since I looked at them, so my knowledge of liquibase may be six years out of date. Flyway uses SQL scripts to do the schema changes but you can also use Java classes and JDBC to do more complicated upgrades. If you want to support multiple engines I think you need to write a script for every engine. There may or may not be a way to override a common script if needed. Liquibase on the other hand uses an XML description of the change meaning you only need one description per change as the tool will create the right SQL for each engine. I only had a single engine to support, so picked flyway. The version issue that others have mentioned has been an issue and requires coordination between developers.
You might want to look into Vert.x as well. It is non-blocking like nodejs.
It is. Unless you have multiple developers and/or multiple database engines to support. We picked flyway and I'm happy with that choice.
Nah. Don't bother with jsp. Servlets are a good basis to learn, but not necessary to start out with nowadays.
No.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I agree. Now I look at the open PRs, issues and commit/release rate from the lead(s) before I commit to using a project for important stuff.
spring boot 2.1 is necessary to use jdk11 right?
I use wicket in a production-environment at work. It is great at stateful page handling. It's pretty... Weird to wrap your head around at first, but pretty fun once you get the hang of it!
&gt; I have been able with listeners to managed synchronization in a very convenient way &amp;#x200B; &gt;Anyway I am looking into rxJava as advised earlier. Hopefully this will be it. RxJava's events are asynchronous, which means there is no guarantee in which order they happen. JavaFX's events are synchronous. If you are trying to do synchronization with RxJava you might get unexpected results.
FYI: You're posting all that in the wrong subreddit. This subreddit is exclusively about **Java**, not about general programming, not about techsupport. You may have better luck in /r/techsupport or in /r/learnprogramming (which I doubt, though). **Removed** as not Java related at all.
&gt; I cannot see where JavaFx will be in 5years. &gt; &gt; the probability of javafx becoming a deprecated technology is higher now. Not at all. It's actively maintained and has had an increase in development ever since it went public on GitHub and Gluon took over some of the management. I would say deprecation chances have gone down, if they were ever existent. No one can predict the success of a library 5 years from now (where will Java the language be at that point even?). &gt; I will have to go through some admin overheads to have it bundled with jdk11 The good news is that, like other projects, you rely only on the base module of JavaFX, which is not GUI-specific. This means that you can specify a dependency on that module only and get a very lightweight bundle of properties, bindings and listeners. JavaFX still has a lot of improvements to do on this module alone, though. Aren't admin overheads the same if you use any other library, like RxJava? It's an external dependency which you need to bundle.
&gt; By the way, have you reached out to them (e.g., Eclipse, JetBrains)? The JavaDocs are created by a tool maintained by Oracle. IDEs don't generate these docs by themselves (at least Eclipse), they use the tool given by Oracle. So, I don't know why IDEs should develop an algorithm that is not used unless you also use the JavaDoc tool. &gt; Maybe (*4.*) Methods will be displayed in a new tab of *constructors* summary? I like this idea.
If you come from a Node background, try Vert.x It's very similar (promise style callbacks) and very flexible. https://vertx.io If you want to jump all-in, Spring Boot
Don't hesitate to open an issue on https://github.com/tipsy/javalin if you run into trouble, it's always great to get people's first impressions.
Spring Boot 2 works fine on JDK 10, so there's no reason to suspect it won't run on JDK 11 given the limited changes. Spring Boot 2.1 does use Spring Framework 5.1, which should hopefully remove most, if not all, warnings about doing naughty things with reflection. 
Isn't this jumping the gun a little? You could have waited 10 days and posted the RC1 release. It's one thing to fill the sub with minor release announcements, but to post something that isn't even a release of a release candidate is taking things a little far. Why not post an article telling us about the upcoming features of 2.1 instead?
That's exactly my intention to write an article, maybe about the new features of Spring Boot 2.1, but I've got multiple titles in my mind which I could do a post about. Before jumping into writing about the new features of Spring Boot 2.1, I wanted to see, if it's the one which best resonates with the community. If you're interested in the new features of Spring Boot 2.1, up-vote this one, otherwise you might want to up-vote the two other topics I'm thinking about. Kubernetes: [https://www.reddit.com/r/java/comments/9lu8rm/kubernetes\_for\_java\_developers/](https://www.reddit.com/r/java/comments/9lu8rm/kubernetes_for_java_developers/) RabbitMQ / Kafka: [https://www.reddit.com/r/java/comments/9lu8kg/understanding\_when\_to\_use\_rabbitmq\_or\_apache\_kafka/](https://www.reddit.com/r/java/comments/9lu8kg/understanding_when_to_use_rabbitmq_or_apache_kafka/) Please feel free to drop me a message any time, if a Java related topic specifically interests you: [https://springuni.com/contact/](https://springuni.com/contact/) Thanks!
Hey, I highly recommend using Thymeleaf whose support is embedded into Spring Boot, it is very flexible.
I don't know any tool that does this, but I actually find this problem kind of interesting. There could be two approach to this: 1. Scanning the source files 2. Scanning the already compiled files Scanning the source files could be done, via parsing them first and searching for the appropriate source elements. This is not straight forward, as you don't want to write your own Java source parser, and you would have to update this program with the language updates. Luckily, the JDK [provides an API](https://docs.oracle.com/javase/8/docs/jdk/api/javac/tree/index.html) to parse Java source files. This can be combined with the [compile API](https://docs.oracle.com/javase/9/docs/api/jdk.compiler-summary.html) to only parse the files, but not compile them (by only calling [parse() on the JavacTask](https://docs.oracle.com/javase/7/docs/jdk/api/javac/tree/com/sun/source/util/JavacTask.html), but not analyze and generate). When the files are parsed, you can examine the created source trees for the elements you'd like to select. If you have already compiled the files, then it would be easier to use a class file parser library like [ObjectWeb ASM](https://asm.ow2.io/) and select the elements as you like. I think both approach is viable, the second one is probably easier to implement, but it requires the sources to be already compiled. There is also the javap program included in the JDK, which disassembles the classes on the CLI, but AFAIK it can't be used to filter elements like you'd like to do.
`grep`?
Oracle has completed the "open sourcing" with Java 11 (at this point OracleJDK and OpenJDK are the same for all intents and purposes, just different licensing and branding), so that's great, thanks to a bunch of great folks at Oracle working on Java. However [Oracle keeps confusing everyone](https://twitter.com/ObeyComputer/status/1048503973169254400) with weasel wording and omissions that look very intentional.
Jooby’s Edgar Espinar is a machine for completion. It’s compositionally perfect for me, and extremely good in five grained unit/service tests. Well nearly conpositionally perfect: https://groups.google.com/forum/m/#!topic/jooby-project/9YLDaOtq3_g
Agreed. Definitely don't bother with JSP. Modern projects are developing their back ends for at least two multiple clients: web and two mobile apps. The apps will want JSON, so it makes sense to serve the same JSON to the web and write the the web front-end in a JavaScript framework like vue, angular or react. These frameworks make it easy to have a dynamic UI which provides a good UX and looks attractive. If you must generate your HTML on the back end it's either JSF or Thymeleaf; I'd choose Thymeleaf.
http://ctags.sourceforge.net/ supports Java. Whether you can make that do what you want, I don't know. 
You are solving a problem that shouldn't exist in the first place.
Exactly. The problem is even more evident if developers also co-operate before merging to mainline and instead they want to merge between them.