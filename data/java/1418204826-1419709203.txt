&gt; OK, well I've already explained the problem already several times, so I guess we're not making any progress here :-( Indeed, you're implying some relation between FunctionN and TupleN that I'm not understanding, maybe an example of code would be helpful? EDIT: I should add that FunctionN are is just an detail of implementation of the compiler, and don't impose a constraint on expresssion like tuples do. In Scala if you declare a function with more than 22 parameters the function is curried like so: Welcome to Scala version 2.11.0 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_25). Type in expressions to have them evaluated. Type :help for more information. scala&gt; def alphabet(a: Int,b: Int,c: Int,d: Int,e: Int,f: Int,g: Int,h: Int,i: Int,j: Int,k: Int,l: Int,m: Int,n: Int,o: Int,p: Int,q: Int,r: Int,s: Int,t: Int,u: Int,v: Int,w: Int,x: Int,y: Int,z: Int) = a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z alphabet: (a: Int, b: Int, c: Int, d: Int, e: Int, f: Int, g: Int, h: Int, i: Int, j: Int, k: Int, l: Int, m: Int, n: Int, o: Int, p: Int, q: Int, r: Int, s: Int, t: Int, u: Int, v: Int, w: Int, x: Int, y: Int, z: Int)Int scala&gt; alphabet(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26) res0: Int = 351 scala&gt; 
The verbosity gave me cancer :/
Thank you, will try that graph method today!
Great, send me a msg if you run into any problem.
Thanks! http://www.asciidraw.com (linked in the article) is a nice tool.
Didn't find any info about this from the official sources, but it seems like it *is* accelerated by default: https://community.oracle.com/message/11018975 &gt; I Cannot force OpenGL on Windows! it's always Direct3d. http://stackoverflow.com/questions/18754803/how-to-disable-or-bypass-hardware-graphics-accelerationprism-in-javafx &gt; How to disable or bypass Hardware Graphics Acceleration(Prism) in JavaFX
Yes, but it's a very shitty implementation. On the dev mailinglist they said they wouldn't fix it, instead you are supposed to simply not use it for graphically intensive applications.
Crap. CRAP! Why is 3D always the stepchild? Always it has to be an external engine. :(
Check /r/ProgrammingPrompts for inspiration.
I'm not sure we'll globally move away from PaaS anytime soon, whether that's a good or a bad thing, I'm unsure.
That was exactly what I was looking for :) **Great!** I worked with [asciiflow infinity](http://asciiflow.com/) before and did not enjoy it at all.
Very interesting, although it seems to create more problems than it solves.
&gt; Indeed, you're implying some relation between FunctionN and TupleN that I'm not understanding The relationship comes into play when you want to abstract over function arity. The fact that there is no such relationship in Scala is the problem. &gt; maybe an example of code would be helpful? Well I did already provide you with a link to an example. Here's another example, that is perhaps clearer: &lt;https://modules.ceylon-lang.org/repo/1/ceylon/language/1.1.0/module-doc/api/curry.ceylon.html#1,17&gt; Perhaps it's easier to read in Ceylon 1.1.5 syntax: Return(*Rest) curry&lt;Return,Argument,First,Rest&gt; (Return(*Tuple&lt;Argument,First,Rest&gt;) f) (First first) given First satisfies Argument given Rest satisfies Argument[] =&gt; flatten((Rest args) =&gt; unflatten(f)(Tuple(first, args))); This higher-order function accepts a function with an arbitrary number of parameters, and returns a function with two parameter lists, the first of which contains the first parameter of the function, and the second of which contain all the other parameters. It's a very useful function. 
This pattern is nice in languages that support value types (which Java won't get too soon, alas). As it stands in Java, it doesn't work too well: Names can have null strings, unless you make the class final subclasses could break contracts, you need more code to do stuff. On the other hand, Java as of 1.8 makes pluggable type systems available, so you can create "type" annotations `@Name`, `@ZipCode` etc. and have their usage checked at compile time. It's the next best solution, but it doesn't incur an indirection.
Nah. I'll stay with LibGDX.
Did not know of that subreddit, thank you.
It is often easier to teach the wrong thing than teach the right thing. Students end up learning the wrong thing, even if they know meaning of the words. I teach OOP classes and essentially teach out of Coffee and Heuristics, using video games as the teaching vehicle. This gives the students a problem like they might see in the real world, rather than solving contrived problems that don't reflect real world scenarios. Interestingly, Coffee and Heuristics is a summary of how Bob Martin teaches OOP, and he relates how the teaching method you describe was his early approach, which he later abandoned because the bad designs in real code that resulted.
I'm on my phone, so I can't look up the answer. But I will tell you how I would find out. The source code for the JDK is online. If you are using an IDE, the source code is most likely right there. Why not take a peek under the hood and see if you can find the answer for yourself? That's what I do. It's a great way to learn! 
The problem lies with their Node implementation. It's just *massive*, because they want it to guarantee all kinds of functionality. Also, they move the camera by moving all nodes. Thus using lots of nodes has incredibly bad performance. It's fine for 2D or when you don't have to display that many objects, but for CAD or games it's not good enough. You are better off handling everything yourself and just copying it to a canvas. And at that point you would just use a better fitting technology.
In your IDE, set a breakpoint on line 9 and step into it. That will send you down the code execution of that particular method.
&gt; The fact that there is no such relationship in Scala is the problem. There's no such relationship in the standard library, but I hope we're already past that the standard library isn't representative of what the language is capable of. It isn't difficult to define that relationship. So given the signature: def curry[F,G,R](f: F)(g: G)(args: F.P): G.R You would need to define a type class that would constrain F such that F is a Function with some input P that is some kind of Product, and return type R. You would need the same type class also applied to G, and last a equality comparison between F.R and G.P(path dependent types are awesome). The [Generic](https://github.com/milessabin/shapeless/blob/master/core/src/main/scala/shapeless/generic.scala) type class is such a class that ~~does exactly that~~(It's actually a bit more complicated, but Generic allows us to assert for the isomorphism between the two types we give it). Using type classes as constraints on type parameters may seem weird at first, but is actually one of the best features of Scala. EDIT: This [Example](https://github.com/milessabin/shapeless/blob/master/examples/src/main/scala/shapeless/examples/lift.scala) lifts arbitrary functions to options.
I thought it utilized the graphics card if the JVM knew about the driver, if not it would push it to the CPU. https://docs.oracle.com/javafx/2/system_requirements_2-2/jfxpub-system_requirements_2-2.htm
Java needs to embrace groovy's Map/List/Set literals, it's implicit properties, and its getter/setter object initialization shorthand. The clarity and compactness advantages to code are just huge. Technically speaking though, the only objection to this is a runtime/VM/optimization objection, not a pure language concern. Compilers and VMs should theoretically be able to detect and optimize these temporary initializer classes and either reuse or discard them.
&gt; You would need to define a type class that would constrain F such that F is a Function with some input P that is some kind of Product, and return type R. You would need the same type class also applied to G, and last a equality comparison between F.R and G.P(path dependent types are awesome). Dude. Seriously? C'mon, take a step back, and look at what you're saying here. You need all that crazy additional machinery to sorta do what you can do in Ceylon with a plain `ol _function_? Just look at the signature of that function you linked to: it actually has _five_ (5) implicit parameters. Along with all the other totally impenetrable machinery which comprises Shapeless. And then Scala folks get upset when people describe Scala as complicated! Can't you just admit to yourself that Ceylon does this one single thing in a much nicer and more elegant way than Scala, and move on? Admitting the obvious doesn't mean you have to stop using Scala. It doesn't even entail admitting that Scala is "worse" than Ceylon overall. It's just one single thing in a long long list of differences between the two languages.
What
Yes, there is not as much point in them. I think the best approach now is to just create a restful API in Java and expose this to the JS MVC framework of your choice. Also this works well when moving to websockets as the framework can be reactive. Keeps the server code nice and clean and all you manage is the API calls. 
I think you were right. I reconsidered my design and went with a JPA CriteriaBuilder solution. After I started using stored proc, I realized they aren't what I needed and are difficult to maintain.
The answer to this question entirely depends on the kind of web application you deliver. HTML5/JavaScript (using Ember, Angular, React, etc.) implemented with Java web services (REST, Websockets, etc) represents one style of application, called the [Single Page Application](http://en.wikipedia.org/wiki/Single-page_application), leveraging more capabilities of the web browser to deliver rich single-page applications which transcend the traditional concept of the page-driven web application. The client renders the display templates, maybe hosted in static HTML with placeholders for dynamic content (like Angular's `{{ }}`), using JSON data delivered by the server. More "traditional" applications are delivered using server rendered templates, layering Javascript on top of the delivered content. You might see the terms "Progressive Enhancement" or "Graceful Degradation" [thrown about](http://alistapart.com/article/understandingprogressiveenhancement). Many call this style of application dead, but reports of its death may be [greatly exaggerated](http://thatemil.com/blog/2013/07/02/progressive-enhancement-still-not-dead/). Each has its use case, and one style of application may not make sense in all use cases. The most famous example is Twitter, who used to use client rendered templates, but [switched to](http://openmymind.net/2012/5/30/Client-Side-vs-Server-Side-Rendering/) server rendered templates due to performance issues. So you should be aware of both server side rendering and client side rendering, and most importantly, you should develop the judgement to know which use under which circumstances. Don't fall into the trap of using a [golden hammer](http://en.wikipedia.org/wiki/Law_of_the_instrument).
I love how re-sizing the frame changes the orientation of the blocks 
Why the hell did they even add this? 3D graphics is way outside FX's problem domain.
&gt; C'mon, take a step back, and look at what you're saying here. You need all that crazy additional machinery to sorta do what you can do in Ceylon with a plain `ol function? Never tried to claim which language better or worst. Only refuting your claim that the type system doesn't allow for it. I did however claim that the shapeless implementation is better than the standard library's. &gt; Just look at the signature of that function you linked to: it actually has five (5) implicit parameters. This isn't problematic. There are 5 constraints. * One to constrain the the function to some kind of product * 3 to assert that product has the functions map, flatMap, and fold. * One more to turn that product back into a function. EDIT: shapeless is meant to be a library that bends the type system to it's limits, shapeless implements map,flatMap, and fold on products as typeclasses because it can, not because it has to. I think the problematic part is the verbosity in the number of type parameters instead of implicit parameters. A real syntax for type lambdas would go along way in simplifying how those constraints are expressed so that the intermediary types aren't necessary. At most you should only have to have 2 type parameters in that function. &gt; Along with all the other totally impenetrable machinery which comprises Shapeless. Shapeless documentation and leaves alot of be desired, but the machinery isn't impenetrable.
It looks like a C style typedef would be useful here, especially in terms of memory usage and code complexity
Sure. it's going to smooth some rough edges. But most of the broken bits are here to stay. They're really ingrained and fundamental. Getting rid of them would be akin to creating a new language. Hence Dart, CoffeeScript, TypeScript, ClojureScript, etc, etc. What I really hope is that all the browser people can come together and agree on a new language and ideally a new interface with the DOM (for example, angularjs is a really interest model, but change detect in the JS is just too slow ). Almost anyone of the above would be a huge step forward if I could depend on it being in all browsers. I don't hold out a lot of hope. 
If you want true backward compatibility to IE &lt; 8 and awful things like that. You need to send boring old HTML. For certain types of systems this is important. Not many, but they are out there.
&gt; Only refuting your claim that the type system doesn't allow for it. In practical terms it does not. Sure, if you suck in some super-complex external library that "bends the type system to it's limits" you might sorta kinda almost be able to do the sort of stuff I'm talking about, as a kind of intellectual exercise to show what's conceptually possible at the outer limits of impracticality**. But you and I both know that this is not the same thing as having support for that kind of abstraction in the language itself, as a perfectly usual, practical thing that people can easily take advantage of in regular programs. I know you know this, since upthread you already stated that `HList`: - "has awful Java interop" - "are also incredibly slow to compile" and - "creates a box for each element". I have no clue what makes it so hard for you to just concede the point. Does it really hurt _that_ much to admit that another language does _one thing_ much better than Scala? Seriously? Programming languages are not religions, and you don't need to treat Scala as infallible. ** Note: this remains to be proved of course, since we don't yet have an actual working implementation of `curry()` and `uncurry()` in Scala, we're only speculating that it's probably doable. 
Or any client which has JavaScript disabled, or is behind an aggressive firewall, etc. Progressive enhancement exists for a reason, and any business which forces requirements on its clients risks immediately removing a share of the market from their audience.
AngularJS has basically been deprecated so I do not think that is what a new developer should focus. Frankly it is talked about a lot on blogs but not really that widespread in the wild. You are mixing things up since you can use HTML 5 with JSF or Spring it is not an either or proposition. If you are looking for a career in Java development those are the frameworks that most companies are looking for. I do not think Struts is used much at this point but that may vary based on location.
Not going to happen that soon, in my opinion. The fact that you don't have to have a server room, or worry about hiring competent people, etc, outweighs the cons for most companies out there.
Same here. Both asciiflow (newer) and asciidraw (older) are from the same guy. But I failed terribly with the newer. Exporting contains non-standard spaces, and other annoyances I did not get along with or did not "fully understand" ;-) anyway happy the simple one still exists, and gets the job done perfectly. Like ... we still use Word/Excel from Office 2007 at the company.
Might be. But don't you wonder how companies give away one of their most important assets to external service providers? I mean, HR relevant data is given to someone else to host. And while there are contracts you do not really have control over where they store and who accesses. But my astonishment probably just shows my different cultural background.
When done properly, most things are encrypted and safer than if it would be in a inside server poorly configured. But each individual company has to analyze what is best for it self. If you work with a lot of sensitive data, maybe you should invest a lot in internal servers and competent staff, if not...
My trouble with AFI started already when I tried to move text around or when I tried to select anything. My all-round solution usually was to resort to Notepad++ and draw my charts there.
A c style typedef would still let you pass anything as long as it's a string anyway. What we need are value types. 
If you have very many elements in your program (think millions), even if you aren't rendering all of them, moving the camera becomes a very costly routine. It may simplify calculations elsewhere, but its more efficient to only update one element instead of many. This makes rendering a little more costly, though, because now there's a little more calculation for each element you render, so there's probably some tradeoff. I imagine that if you aren't (logically) moving the camera around frequently, its more efficient to move the camera by moving the elements. That way you always know where the camera is, so there's lest cost for render. However, if you are moving the camera every time you update before you render, the order of complexity for update + render is O(n^2) for updating the elements and only O(n) for moving the camera. If you have some other horrendous code going on you won't feel the difference, just like if you don't have many elements you won't feel it.
&gt; What is the point of * JSP: I still use JSP to create some shared constants between JAVA and JavaScript, and maybe to generate something that will never change in a session, like the logged user, some configuration data * JSF: I never get the point of it. * Spring MVC: I use it mostly for security, data binding, and project structure... I could use something simpler, like Spark, but I use spring for lots of things, and Spring MVC is there * Struts: I left that ship long ago. &gt; now that we have HTML5 and AngularJS ( and Ember and ...) I'm not a fan of any of this frameworks, and with some discipline you don't even need them. jQuery + lo_dash + bootstrap can help you make a nice SPA without much suffering, with a nicer learning curve and more meaningful error messages. Of course, for ones career, you always need to be able to use whatever framework is *hot right now* ... but that changes a lot. I would recommend to keep an eye on angular 1, another in angular 2, the other in [Vue.js](http://vuejs.org/) (is like angular but lighter) and your 4th eye in [riot](https://muut.com/riotjs/) (it is almost nothing)
Developing for cloud isn't a fashion and it won't go away IMO. At most you may see more services capable of running on private clouds. What does Europe favor instead?
Not really. The import just means that class b is visible from within class a. In practice, this means that you don't have to write the whole package name and can just use the class name.
But if a method of class a was public void test(b o){} with the b coming from the import not an attribute of class a. Would this be a dependency? Because it is really confusing me.
&gt; AngularJS has basically been deprecated Does anyone have any sort of source or anything for this? I'm working on a project that's thinking of adopting AngularJs. It seemed to me that it was just like a JQuery replacement, and had no risk of being depreciated or anything.
I don't think your question makes any sense. It's like asking if with newer tires, your car will no longer need gas. It's just non-sensical. Jsp/Spring Mvc/Struts is about handling what happens on the server side. Html5/AngularJs is about what happens on the browser/client side. I'm not aware of either of those getting rid of the need for jsp's. It could be I missed something. What I'm 100% sure of though, is that there are a large number of operations you'll never ever want to do in the browser for security reasons. The browser shouldn't have direct access to your database and it can never do security checks securely. You'll always need something fairly complex at the Jsp/Spring Mvc/Struts layer (on the server) to handle that. I'm not aware of these new things letting you magically populate your pages with info either. I've watched the Angular Js tutorial videos, and they still require jsp's to populate the initial data on the page and create the pages. 
&gt; JS debuggers suck dirty hobo ass. I hear this a lot but I do not understand what the problem is, can you explain?
Well, 3D on the web is provided by OpenGL bindings for JavaScript. Unless FX can provide 3D on par with OpenGL, what's the point of providing a weak 3D API that no one uses? There are OpenGL bindings for Java.
 www.infoq.com/news/2014/10/angular-2-atscript Basically version 2.0 is going to have the same name but be very different and there is no migration path. The current version will get no more new development but will have some security patches and bug fixes.
&gt; I'm not aware of these new things letting you magically populate your pages with info either. I've watched the Angular Js tutorial videos, and they still require jsp's to populate the initial data on the page and create the pages. Every javascript frontend framework lets you magically populate your pages with info. It's perfectly possible to only serve static html+js files and have a json api. When the static html+js loads it makes a request to your json api for the info, and renders it on the client side. In backbone this might look like: Books = BackBone.Collection.extend({ url: '/books' }); var books = new Books(); books.fetch(); And by the magic of javascript, your books appear on the page(Assuming you've set up your Backbone views and templates, etc. One issue is performance, as this requires 2 round trips to the server. A solution is to render initially on the server side using a traditional templating solution like jsp, as you suggest, or just inserting the json into the page to initialize the models/collections. 
A framework like AngularJS gives you a model, view and controller all in the browser as a thick client and the data typically comes in over RESTFul web services. In most cases this does in fact replace any JSF/JSP or Spring MVC components. It does in fact "magically populate your pages with info". With HTML5, modern browsers and the related frameworks, there is in fact a trend in many enterprises for the server side to get out of the "view" business. The question wasn't non-sensical unless one doesn't know what one is talking about. Its a simple question about whether people believe there is such a trend and if the role of things like JSF and SpringMVC will continue to be diminished in the coming years. Or how will they adapt or be used differently? So in addition to being a bit arrogant, you are wrong. You should be embarrassed. 
They never said their won't be a migration path. They just said they are going to work on the migration path after 2.0 is further along. They also said that some of the big changes are driven by there future version of JavaScript (ECMAScript 6) and that most frameworks are going to have to go through similarly radical changes if they will keep up.
Thanks for your very reasonable and thought out response. &gt; single-page applications which transcend the traditional concept of the page-driven web application What's lost in the hype around SPA applications is the elegance RESTful applications. That your application's state changes can be driven through hyperlinks. Most json-over-http api's are not "RESTful." I think implementing your app purely in html with no javascript and state being changes driven through links is a good litmus test for the architecture of your app. Then you can then turn it into a javscript driven SPA with your json api returning json structured in the same way as your html, with proper links and all.
&gt; Unless FX can provide 3D on par with OpenGL, what's the point of providing a weak 3D API that no one uses? The API is targeted for 3D effects in business applications, not games. &gt; There are OpenGL bindings for Java. Which aren't available in all platforms there is a JVM for.
I do not agree. They are basically creating a new framework with the same name with no plan for backwards compatibility. Sure they might figure something out but anyone building more than a trivial application would be crazy to rely on that.
&gt; Sure, if you suck in some super-complex external library that "bends the type system to it's limits" you might sorta kinda almost be able to do the sort of stuff I'm talking about, as a kind of intellectual exercise to show what's conceptually possible at the outer limits of impracticality**. It's not that black and white, you don't have to go as far as shapeless does to accomplish curry and uncurry(but why not, it already does a lot of the work for you with tuples that don't suck, thats compatible with all kinds of products, even case classes). &gt; ** Note: this remains to be proved of course, since we don't yet have an actual working implementation of curry() and uncurry() in Scala, we're only speculating that it's probably doable. Here's a minimal implementation for curry. uncurry would be similar except we'd need a function to flatten arbitrary tuples. http://scastie.org/7678 
&gt; In most cases this does in fact replace any JSF/JSP or Spring MVC components. What happens when you submit it? That still sounds like the Spring Mvc layer to me. Your javascript cannot talk directly to the db for security reasons. Would you happen to know of any links/tutorials describing how this works? I haven't seen any, but it's possible I'm just missing them. &gt; So in addition to being a bit arrogant, you are wrong. You should be embarrassed. What is it where people accusing someone of something are almost always the people doing those things themselves? I wrote in my post "I'm not aware of either of those getting rid of the need for jsp's. It could be I missed something." If you have a link that shows something different, feel free to post it. If there's another way of doing it I'd be interested in learning about it, though preferrably from someone who's interested in the topic more than just grandstanding.
I found that on StackOverflow. Didn't fix the issue.
Yeah, but does that create a UML dependency? http://en.wikipedia.org/wiki/Dependency_(UML) 
&gt; It's not that black and white, you don't have to go as far as shapeless does to accomplish curry and uncurry(but why not, it already does a lot of the work for you with tuples that don't suck, thats compatible with all kinds of products, even case classes). OK, so that approach seems much more reasonable, though it still requires 22 `implicit def`s (yick!). But: &gt; http://scastie.org/7678 This doesn't actually look to be correct. `curry()` takes a function of type `R(W,X,Y,Z)` and produces a function of type `R(X,Y,Z)(W)`, or, in Scala syntax, it takes `(W,X,Y,Z)=&gt;R` and produces `(W)=&gt;(X,Y,Z)=&gt;R`. I'm not totally sure what your function does, but it doesn't seem to do that. 
Picocontainer or perhaps Avalon before that ?
&gt;This doesn't actually look to be correct. curry() takes a function of type R(W,X,Y,Z) and produces a function of type R(X,Y,Z)(W), or, in Scala syntax, it takes (W,X,Y,Z)=&gt;R and produces (W)=&gt;(X,Y,Z)=&gt;R. I'm not totally sure what your function does, but it doesn't seem to do that. Ah yes, I derped and wrote compose instead of curry. I'll update with curry in a moment.
Being able to load up Java code in something like [JIVE](http://www.cse.buffalo.edu/jive/) and run it with the ability set up VERY granular breaks and stepping backward and forward while introspecting live values... 
Curious, what are you using to build your project? Maven? Grade? Ant? The issue with Spring I see a lot with IDEA and it just means the class path isn't being updated correctly. This can happen for a number of reasons, and in my case it's usually because the project dependencies haven't been refreshed or have become corrupt. As someone who had the same issues you're having now, it took me a couple of months to get used to and figure out how to solve these problems. Once I did though, I realized eclipse suffered from the same issues (manifested in other ways), and I had just figured out how to get around them. IDEA is a far superior IDE to Eclipse so if you can bear the pain of learning your way around it for a bit, it's very much worth it.
Updated scastie: http://scastie.org/7679
&gt; http://scastie.org/7679 Yep, that's now the correct impl. The problem with this is, that for each of those generic functions, you have to define 22 `implicit def`s, one `implicit def` for each function arity supported by Scala, and the actual _implementation_ of `compose()` and `curry()` is in the `implicit def`s themselves. i.e. one implementation of each generic function for each function arity. Yes, you use implicits to make it _look as if_ you've abstracted over function arity to the caller of `curry()` or `compose()`, but in terms of the implementation you haven't abstracted at all. So whereas Ceylon has one function `compose()`, and one function `curry()`, you have 22 of each in Scala. Sorry, but that's just the not true "abstraction over function arity" we talk about. Still, it's a fun exercise, and it's always nice to explore what is possible!
&gt; Why: &gt; &gt; curry(addTwo _)(addOne _)((1, 3)) &gt; Instead of: &gt; &gt; curry(addTwo _)(addOne _)(1, 3) &gt; ? No good reason, I should take two param lists and return a function instead of evaluating the composition.
welcome to Java
14.0.2 - also might be good to let you know I'm developing in Linux Mint. Doubt it matters too much, but just in case. I will edit the original post with that info too. I'm going to try re-installing tomorrow out of pure desperation. Will update more then.
I updated it with some relevant info at the bottom.
&gt;tackle this using a piece of paper This is always a solid first step. 
If that fails, try 21 pieces of paper.
&gt; So whereas Ceylon has one function compose(), and one function curry(), you have 22 of each in Scala. Sorry, but that's just the not true "abstraction over function arity" we talk about. By similar logic one could argue, that because there's only 1 implementation of Function with 1 method implementing curry for it, that Ceylon isn't abstracting over anything and should there ever be a second implementation(maybe functions with reified generics!) and only an abstraction with multiple implementations is "true abstraction". But that's BS, because "abstraction" isn't defined in terms of whether or not you statically dispatch to multiple implementations.
As a long-time user of eclipse, I started a new job a couple months ago and had to learn IDEA. I've mostly gotten used to it, and agree that eclipse has its own problems that I've learned to work around. I don't know if I'd go as far as declaring it to be far superior (just my opinion), and for the cost of the ultimate edition, it's not as polished as I would have expected. I've run into some flakiness in 14.0.2 with config files, such as spelling dictionaries, code style, and inspections. So for me, the jury is still out as to which IDE I prefer.
What are you trying to do? 
How strict is your hardware requirements, and what kind of volume are you expecting? I've personally run Tomcat and Spring on pretty basic hardware. Tell us a bit more about your implementation, and we might have some other suggestions to accomplish your goal.
You can run node.js on the same server as as the java app :D They are like kissing cousins. or something. EDIT: Can't take a joke? lol
If it is Intellij IDEA it is not a bug, it is a feature so STFU Eclipsetard.
I used eclipse forever and a half, I recently moved to IntelliJ. At first, I hated it. Went back to eclipse for a few months. Recently, I got started using it again, and love it. I think you just need time to get used to it. I think you're having more errors though, which if you can fix, I think you'll warm up to IntelliJ
Java != JavaScript. But to OP. If you need something light, I'd recon you check out jetty. It's a lightweight servlet container, easy to embed within a java application, there is an easy to use jetty client also.
Yeah, I have heard a lot of people like it which is why I want to try to keep using it, but I don't want to leave work each day ready to smash my computer either.
Maybe, but there's [Node.jar](https://avatar.java.net/) nonetheless 8-) OK, it was rebranded Project Avatar. But it's cool just the same.
Jetty is pretty light as far as servlet containers go and is used at the heart of several Java microservice frameworks.
The lightest possible servlet container in Java is Winstone: http://winstone.sourceforge.net/ That is what the Jenkins CI server uses to serve its UI (at least last time I checked). The full JAR is 327 KB.
 import java.awt.*; import javax.swing.*; public class ThreeCards extends JFrame { public ThreeCards() { int[] list = new int[54]; list[0]=1; list[1]=2; list[2]=3; list[3]=4; list[4]=5; list[5]=6; list[6]=7; list[7]=8; list[8]=9; list[9]=10; list[10]=10; list[11]=10; list[12]=10; list[13]=1; list[14]=2; list[15]=3; list[16]=4; list[17]=5; list[18]=6; list[19]=7; list[20]=8; list[21]=9; list[22]=10; list[23]=10; list[24]=10; list[25]=10; list[26]=1; list[27]=2; list[28]=3; list[29]=4; list[30]=5; list[31]=6; list[32]=7; list[33]=8; list[34]=9; list[35]=10; list[36]=10; list[37]=10; list[38]=10; list[39]=1; list[40]=2; list[41]=3; list[42]=4; list[43]=5; list[44]=6; list[45]=7; list[46]=8; list[47]=9; list[48]=10; list[49]=10; list[50]=10; list[51]=10; list[52]=0; list[53]=0; for (int i = 0; i &lt; list.length; i++) list[i] = i + 1; shuffle(list); setLayout(new GridLayout(1, 4)); add(new JLabel(new ImageIcon("image/card/" + list[0] + ".png"))); add(new JLabel(new ImageIcon("image/card/" + list[1] + ".png"))); add(new JLabel(new ImageIcon("image/card/" + list[2] + ".png"))); } public static void shuffle(int[] list) { for (int i = 0; i &lt; list.length; i++) { // Generate an index randomly int index = (int)(Math.random() * list.length); // Swap myList[i] with myList[index] int temp =list[i]; list[i] = list[index]; list[index] = temp; } } public static void main(String[] args) { Exercise12_09 frame = new Exercise12_09(); frame.setTitle("Three Cards"); frame.setSize(300, 170); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLocationRelativeTo(null); // Center the frame frame.setVisible(true); } } 
I think you should look at what a ''restful'' api means. Nobody said that it's the javascript that calls the db, the javascript just calls the api like : app.com/api/orders and receives a json populated with a list of orders that can be represented as Order objects on your client app. In fact, the controller of your client javascript app is just calling the controller of your backend app. And it's in the backend that you will handle all the security stuff (auth with access token, roles, cors....) 
Blah blah blah. My point was there is little reason to use a Java web framework when you can still just use node.js on the system. Just because I have a cup holder in my car doesn't mean I have to put my hand in it... just because I need to put my hand somewhere. Cup holders are for cups. Java is for Java stuff. Node.js can run beside Java and V8 will still be lighter than a Java Framework. The kissing cousins remark was a joke... obviously.
Just encrypt it before you send it
Is it really any different from the SIMULA 67 definition of an object?
I don't know too much about UML, but if you don't actually use the class I don't see why it would create a dependency. UML doesn't actually describe how the code is implemented but rather how the code is structured. That is how I understand it, at least.
Thank you. That was a great help.
Urbandarkknight was actually asking about: import b; public class a{ public void doSomethingWith(B b){ //... } } or at least that's how I interpret his reply to your comment.
I would probably use an enum for this. Have a Card enum, with each card having a integer of its worth. (or you could even use byte because its 1-11). Make three objects of type Card, assign it a random one from your Card.values(), and add what theyre worth together.
Doesn't a build-attempt reveal any hidden errors immediately? Btw., I had a very curious bug yesterday with IntelliJ after working with it flawlessly for months - it said about a project that had worked the whole time that it couldn't find a package I was importing. Restart with cache clear didn't help, deleting and restoring the whole project directory tree from one of the weeks old 7z archives didn't help, using an older IntelliJ version than 14.0.2 (0.1 or 13.1.5) didn't help. Ultimately what I had to do was to uninstall IntelliJ *incl. deleting prefs etc.*. Then after a reinstall of 14.0.2 everything worked again. I've never had that before. Btw., while looking for a solution, I saw that the "package not found" problem does occur sometimes with Maven projects (which mine is not), maybe you find a hint there: https://www.google.com/search?q=intellij+package+does+not+exist But I can say that changing from Eclipse (after &gt;1 year) to IntelliJ was one of the best software developing decisions I've ever made.
I find Apache Tomcat to be very light and portable. It is even has an embedable version.
Finally a fresh approach to a still extremely relevant programming technology. Good read.
It should be easy for someone to understand. It does not matter if it is easy or difficult to teach. I could not find anything wrong in the way it has been taught here. Programmed animals is fine or else the one who is learning may get into logic more than oop itself. OOP must be taught by approaching from the problem side first. It gives better understanding. Do you have a link/writeup about the video games approach. It would be interesting to use.
Outer `for` is for rows. Inner `for` is for columns. Your current condition states: `if row index is greater than column index, print space`. If you number rows and columns you see that row &gt; column is to the left, and row &lt; column is to the right. You need it to be the other way around. What should you change.
Technically yes building does reveal all errors, not going to lie, half of this post was just me ranting after a long frustrating day of fighting with it, and the other half was wanting to find a solution. Up to this point I have almost always used Eclipse, and I just like that Eclipse will tell you when something is breaking without an explicit build (I know it auto runs them in the background, I just don't want to run them) As per my other comments I am planning on re-installing and seeing if that works tomorrow then updating here. And yes, I did try googling before coming here :P I'm glad to know that if this is resolvable its worth it.
You are right. It is necessary to have good communication skills so as to do anything correctly. However the article is well written and free from any language mistakes that hamper communication. Your frustration appears to be beyond the language. If not then it would be fair enough to point out the exact mistakes and suggest corrections.
Undertow + its servlet package. Undertow is amazing. Next I'd say Jetty. Not that one is better than the other. I have a softspot for undertow but have been known to use jetty.
/u/lapinrigolo asked about Java containers, therefore answers about node.js are off topic, joke or not.
This code is ugly but seems to do what you want. What's the problem? The total would be list[0] + list[1] + list[3]
in addition, try [spark java](http://sparkjava.com/), which is a tiny framework built on top of Jetty. Your hello world website becomes 1 line long.
Any addition, ie: in System.out or in a Jlabel only displays the number of the card. like list[0] + list[1] + list[3] prints 013 instead of the expected 7
It is based on regular annotations that augment the type information. An example checker (that should be possible to extend to cover your problem) is the units checker. Hopefully, this idea catches on and finds IDE support soon.
This post is better posted in /r/Javahelp because /r/Java is for: &gt;**News, Technical discussions, research papers and assorted things of interest related to the Java programming language** as is clearly stated in the **sidebar** where you would also find: &gt;**Please seek help with Java programming in /r/Javahelp!** **Also:** be sure to read the [Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/posting_guides) on /r/Javahelp before you post.
This post is better posted in /r/Javahelp because /r/Java is for: &gt;**News, Technical discussions, research papers and assorted things of interest related to the Java programming language** as is clearly stated in the **sidebar** where you would also find: &gt;**Please seek help with Java programming in /r/Javahelp!** **Also:** be sure to read the [Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/posting_guides) on /r/Javahelp before you post. **Plus:** This is a cross-post. You should mark that in the title.
Relevant username?
This would not create a dependency, but **o** would be a parameter of **test** with the type **b** and it should be annotated as such.
Oh! Dear curmudgeon99, Communication is a basic activity of exchanging information. What I am trying to emphasize upon, here, is that whatever shittiest use/bastardization of your mother tongue Indians would indulge into, you can figure out what it means. Having established that, I would want you to understand that in this age even the deaf, mute and blind can communicate and so can illiterate homeless Americans. I assume so that you are an American because of your choice of words, a worthless attitude and constantly stressing on Wall Street believing it to be a place beyond comparable standards, when it merely houses brokers. Oh lord Jesus, somebody said Writing = Thinking! If I interpret the same literally, it sounds meaningless. If I interpret it liberally, I laugh on you. And if I interpret it mischievously, I'd excuse you. On a friendly note, in the last comment you'd written "I have seen the evidence of this maxim over **he** past 15 years". I feel you should read what you write thrice before posting as your ego might not allow you to make a mistake in what you'd claimed as your forte. On an ending note, there are 13 grammatical errors in what I have written. If you are reading this and feel that you have correctly understood what I meant, maybe you should read again to figure out that those errors might have lead to a change in the essence of words. And if you have actually understood it, enjoy finding the errors and experience the sense of accomplishment. Happy hunting! 
I'm in the same position. I've tried the community edition of Intellij a couple of times, but end up going back to eclipse due to the same having to "drag it kicking and screaming and refusing to cooperate in any way" feel. I'm what you could call a eclipse "power user" and things I can do with a hot key cord in eclipse seem to take a lot more effort in intellij. For instance, Running a single unit test in eclipse. I can select the test method name, press Ctrl-x, t and it just runs that one test. The same hot key cord outside of a method name and it runs every test in the class. To do the same in Intellij you seem to have to make a configuration before you can run the test. For the types of things a configuration of unit tests make sense for, we use maven. Just a note, In our team, we write a lot of unit tests for our code. And we write them either while we write the code, or before we write the code. So this was the deal breaker for switching to intellij. I think the better you are with eclipse (or what every IDE you use) the hard it will be to make the switch.
Go fanboy it up with your shitty abomination of a server platform somewhere else. Around here, we use stuff that actually works.
Technically all you need is Paint.fillPolygon() or setRGB() to implement 3d in java.
Note to whoever marked this as spam: It may be a low-quality article (and at least this mod wonders whether the author intended to call prospective readers idiots or is referring to self), but according to reddit rules, it's not spam.
A static method to invoke the constructor and set the font would reduce visual clutter and a lot of needless inner classes, e.g. panelTop2.add(jLabelWithFont("T", displayFont));
I said **bindings for Java**, which is quite different from having OpenGL support. Since you asked so nicely Freescale i.MX6 http://www.freescale.com/webapp/sps/site/taxonomy.jsp?code=IMX6X_SERIES&amp;cof=0&amp;am=0 Do JOGL or LWJGL **bindings** exist for it? There are many other embedded platform examples.
I've run tomcat on way worse hardware without issues. 2 xeon vCPU and 256Mb RAM. Server not running any DB software though. Not needed In my use case.
I thought the usual bindings would work with any OpenGL implementation. I take it I was mistaken?
I saw that a few days ago and was very intrigued. Compared to Jetty and Spring, the syntax makes me very jealous. Do you (or anyone else) know much about it? Would you use it in a professional production environment? Is it well supported and updated? How stable is it? 
Some other JVM languages - Scala and Kotlin, for example - make this even easier to implement by use of Data classes (Case classes in Scala). Basically, in Kotlin, the definition of the Name class is: data class Name(val value: String) And that's it. That defines a class called Name, that has a constructor argument for the name itself, a getter, and correctly implemented equals, hashCode and toString methods. You then make use of it by: val cs = CoffeeShop(Name("Caffe Nero")) Which, whilst not significantly easier than in Java, is slightly so and slightly easier to read. Having said that, Kotlin also supports named parameters so you can just do: val cs = CoffeeShot(name = "Caffe Nero")
Well you can actually use the Eclipse compiler in IDEA. http://blog.dripstat.com/post/103658392234/why-you-should-use-the-eclipse-compiler-in
I'm running Postgres.
The JTextPane has a pretty well defined API, located here https://docs.oracle.com/javase/7/docs/api/javax/swing/JEditorPane.html. You can then save this text to a file reasonably simply. Google "Saving text to file java", and you should get some good links (StackOverflow, for example). Follow these. Loading text is a similar task. Google this, and you'll find your answer at StackOverflow: "read from file, convert to string java". Finally putting that text to the text field is reasonably simple. You already went through the API when you looked up how to get the text. Putting text in the field should be a really similar task. Just take a look.
I do. But I can't shrink the size of that jar.
There would be some DB work but not much. The jar is a self contained web application that must run on a servlet container. I have no access to its source.
&gt; But that's BS, because "abstraction" isn't defined in terms of whether or not you statically dispatch to multiple implementations. Sure it is. That's in fact _precisely_ how abstraction is defined :-) Indeed, how, in practical terms, is your implementation of `curry()` different to plain 'ol overloading? Really, you're just using the `implicit`s mechanism to resolve an overloaded implementation of `curry()`. I'm not convinced you couldn't do the same thing just with method overloading, since Scala supports that. I think we both agree that overloading isn't truly "abstraction", right?
I've just tried running the code and can you tell me what this is supposed to do? for (int i = 0; i &lt; list.length; i++) list[i] = i + 1; It's overwriting your list with sequential values. If I remove that and add these lines to the bottom of the constructor: System.out.println(list[0]); System.out.println(list[1]); System.out.println(list[2]); System.out.println(list[0] + list[1] + list[2]); It prints out as I expect, for example here's output from one run: 5 9 10 24 So it's adding them up fine.
Ah, then I opt against JEE container. You really only need a servlet container. Btw. shouldn't it be a WAR instead of JAR?
Those bindings have native code, which needs to be ported to whatever platform you might be targeting.
I... cannot underline enough how strange your unit tests seem to me. having one test for each method sounds like you're still working in a C fashion, also that one test runs multiple scenarii at the same time. 
Hey I love Java. I love it because it runs really fast in certain use cases. I like Node.JS because it is easy to make and maintain incredibly fast code. That is why Paypal moved from Java to NodeJS. That is why so many others have done so as well: http://nodejs.org/industry/ It is a fine platform. It isn't just a server platform. I suggest you educate yourself.
Formatting your code properly would be a good start, it's hurting my head.
Why do you stay static method? `panelTop2.add(new JLabelWithFont("T", displayFont));` This only works because you're making a new JLabel subclass, correct? I could have done it that way. I wonder why I didn't.
This has nothing to do with Java, it's reddit code formatting.
&gt; Indeed, how, in practical terms, is your implementation of curry() different to plain 'ol overloading? That implementation isn't much different no. That's not to say the technique can't be improved to be better than just overloading. Shapeless is evidence of that. Having things like a type level representation of natural numbers, which help ordering and traversing products recursively help with that. The important difference is that we now have a custom and reusable constraint that can be used to type check curry-able things. &gt; I'm not convinced you couldn't do the same thing just with method overloading, since Scala supports that. The same thing is done with method [overloading](https://github.com/scala/scala/blob/v2.11.4/src/library/scala/Function.scala). &gt; I think we both agree that overloading isn't truly "abstraction", right? I disagree, it's a valid form of abstraction. Just not necessarily a good one, that's used much more often than it should be.
You'll be fine with tomcat, spark, or jetty. That's decent hardware,mu less you have a huge dB.
What were you using before you switched? The major issue we find with switching between IDEs (I recently switch from IDEA to NetBeans for the much better Mercurial support), is that they work differently. You can use all your old keyboard short cuts though, which helps.
You don't need a full JavaEE container like JBoss just to do some RDBMS access, Jetty is sufficient for that.
This post is better posted in /r/Javahelp because /r/Java is for: &gt;**News, Technical discussions, research papers and assorted things of interest related to the Java programming language** as is clearly stated in the **sidebar** where you would also find: &gt;**Please seek help with Java programming in /r/Javahelp!** **Also:** be sure to read the [Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/posting_guides) on /r/Javahelp before you post.
Or if using an Oracle or Sun JDK , use the built-in web server: http://stackoverflow.com/questions/3732109/simple-http-server-in-java-using-only-java-se-api 
To run just the specific test in IDEA you just press Ctrl+Alt+F10 inside the test method. 
Interesting. Will look into it. Can you explain the newer paradigm?
Yes, of course. But that was just an example. But since what /u/lapinrigolo wrote in the meantime a simple Servlet container seems to be sufficient.
It's built on nonblocking io and many of the ideas that were brought to Jetty but from the start. Jetty is solid but is also a bit encumbered by the years. Undertow is also the server that forms the core of WildFly.
Your best bet is to grab a [word list](http://wordlist.aspell.net/) and go from there. If that doesn't suit what you're looking for, there are plenty of forensics tools which reference word lists for bruteforce password cracking (check BackTrack Linux and the like's packages to see what options you've got). If you're looking for name/adj/verb part of speech tagging, take a look at the [NLTK](http://www.nltk.org/) and their POS-tagged data (yeah, it's a Python package -- but you should be able to parse their data with a little java-foo once you've downloaded it). 
I switched from eclipse. Is there a way for me set the keyboard shortcuts automatically or do I have to go one by one and change them?
I hate lazy recuriters, its folks like you that ruin our industry and suck money from our pockets to uselessly spam professionals like this. GFY.
JSON-over-HTTP can be RESTful as well. See [Spring HATEOAS](http://spring.io/understanding/HATEOAS) for an example. Whether the links are provided through HTML or a JSON format like [HAL](http://stateless.co/hal_specification.html) is not important because HTTP supports multiple representations of a resource. Most JS frameworks provide a good REST layer, for example [AngularJS](https://docs.angularjs.org/tutorial/step_11), which can dynamically construct service endpoints from links embedded in JSON responses.
&gt; Would you happen to know of any links/tutorials describing how this &gt; works? See [here](https://docs.angularjs.org/tutorial/step_02). AngularJS provides a very rich template model, generating HTML entirely in JS. JSPs are for server side template rendering, Javascript templates are for client side rendering. You would still use something like Spring MVC, but instead of serving a response generated from a JSP, you would return a JSON object, and the JS layer would render the HTML from the JSON. 
Why did you post this in /r/java? It has nothing to do with java? It even has very little to do with python.
Don't worry about it. The guy is being dramatic. 
Actually, a further search of the subject kinda backed up what he was saying. The 1.2/1.3 branch they're abandoning for the new 2.0 branch that doesn't seem to be out yet. The project itself is not being abandoned, but the 2.0 stuff won't be backwards compatible with the 1.2/1.3 stuff, and it will be a "whole new model" to learn or something. http://www.infoq.com/news/2014/10/angular-2-atscript
There isn't one. If you want Java 8 you'll need to upgrade to [Mountain Lion or above](http://docs.oracle.com/javase/8/docs/technotes/guides/install/mac_jdk.html). Even the [OpenJDK build instructions](https://github.com/hgomez/obuildfactory/wiki/Building-and-Packaging-OpenJDK8-for-OSX) require Mountain Lion.
After the reinstall everything seems to be more friendly. Thanks for your help.
Compare with Python, which everybody likes - kind of: Ever since I started learning Java many years ago, I've never encountered installation nightmare you may see in python, like in this link http://stackoverflow.com/questions/2817869/error-unable-to-find-vcvarsall-bat I saw the same error when I tried to install the extremely widely used numpy package. 
2.0 will never be released. 1.x has too much momentum. There will be much better frameworks than 2.0 at that time. The best framework designer already left their team.
This just in: Wanted: Recruiter for CA Stealth Startup who knows how to use periods, commas, and other English related punctuation. Bonus if the recruiter knows how to eliminate buzzwords from random posts which turn potential job seekers off. Salary commensurate with experience.
Our salary is 10-15k/month, experienced only.
So did I, but I can still spell and punctuate correctly.
This is not a job board.
No problem, and glad you got it working!
perhaps there ought to be a "/r/javajobs" ? 
Fuck of with your spam. Read the [Reddit rules](http://www.reddit.com/rules/).
Embedded Jetty (sans framework) is my absolute favourite way to build microservices. Most of the time, I'm left with fewer lines of source code than I had of configuration in a full-sized container.
Personally I don't get why you gloss over the fact that IDE's solve the problem with intelliSense. Doesn't require doing anything extra. Using the builder pattern also means you don't have a class explosion and I don't think it's really that complex to implement.
Interesting, zurb just released AngularJS integration[1]. [1]http://foundation.zurb.com/apps/ 
I'd think about 1. support. 2. why build it, use a free hosted service like openshift online. 
So is PHP. That doesn't make it good.
A bad joke is what it is, and I'm not laughing. JavaScript is a terrible language, and using it when you aren't forced to (i.e. browser scripting) is utter madness. Also, absolutely none of its claims to fame are even remotely unique. Java has had non-blocking IO, callbacks, and an event model since long before Node was even invented.
Wow, thanks for the great feedback. 1. Formatting got altered upon submission. Wasn't sure how to navigate that. 2. Lazy? Spam? Viable and genuine opportunity for a mid-level developer. Not sure how I'm sucking money from anyone.... I have a client, they have a need. 3. As far as being a recruiter, maybe I wasn't clear but that would seem obvious from the post. I have assisted many folks in finding their next position, assisted them with career development and have even helped when it didn't benefit me in anyway. Sorry you folks have been burned or can't decipher the good from the bad any longer. I work hard and I'm honest. 4. Lastly, I did include the location originally and it is in-house, perm.
&gt; Lazy? Spam? Viable and genuine opportunity for a mid-level developer. Not sure how I'm sucking money from anyone.... I have a client, they have a need. Your inability to understand why you are a useless waste is exactly why you are a useless waste. Keep sucking that scum.
&gt; JSF: I never get the point of it. The basic idea is rather than reinvent the wheel over and over again you can use components for all the front end stuff that most web applications need. It works great at least for my needs. There is team of guys at PrimeFaces who not only create the components for me they also cross test it against every major browser. They do this for free although I choose to pay a nominal fee for the Elite license. Not only that but it is very widely adopted so if a bug does come up it is found and reported and fixed. It is incredibly productive and allows me to create a Rich application that simply would not be possible without having a much larger development team than I have. I now spend the vast majority of my time on business logic rather that fighting with JavaScript.
Useless recruiters in my industry, coming into forums for professional discussion of the craft to hock their worthless opportunities that if they were 1/2 as great as they seemed to be the recruiter would not need to push their shit in the forum. Yes I have some deep-seated anger against lazy useless sacks of carbon like yourself. Folks such as you are classed below car-salemen and only slightly above IRS agents. Tip #1 - You are not doing anyone a favor except maybe your client, you NEED us. Not the other way around. 
This JIVE thing looks like a fancy research project, but doesn't explain at all why JS debuggers are totally bad. Afaik non of Microsofts can do any of that and people always try to convince me Microsofts debuggers are best in class.
If a company won't direct hire on a position or only needs a temporary/project consultant they aren't willing to W2, and they utilize a recruiter to identify, screen and qualify a candidate, then how are we the bad guys? Usually these positions are advertised so what other process is there?
I used to dismiss Spring Boot as just a Spring-lock in focused Dropwizard clone, but I see it is getting more and more interesting features. Good work Spring team, this goes a long way of relegating Java EE complexity to the garbage heap and letting Java compete with newer, more nimble languages.
File &gt; Settings &gt; Appearance &amp; Behaviour &gt; Keymap &gt; Keymaps &gt; Eclipse or by shortcut Ctrl+` &gt; 3 &gt; 9
He didn't say he has one test per method, he said he wants to be able to run a single test (which may be one of hundreds). If fixing a bug exposed by a particular test, running that one test seems like a reasonable thing to want to do. Incidentally, resharper (also by jetbrains) makes this very easy in VS, so it would be an odd thing to be missing in IntelliJ. 
Just did it! Thanks a lot!
You can use maven to build, test and download all dependencies
You could use maven, gradle, ivy, or sbt.
Sounds like a pretty standard setup. Any load balanced tomcat guide will do. But you may struggle with the startup time of 1 sec. Tomcat will always utilise all the cores available.
I'll note that Gradle actually uses Maven repositories for dependency management. Maven and Gradle are also both full build tools, whereas ivy is only dependency management and tends to be coupled with ant. I've never heard of SBT so I can't comment on it.
Not sure if your trolling but Maven has been around much longer than just about everything on your list.
Windows is _always_ a different story :). Luckily though for native deployment on Windows there is already IKVM which works fairly well.
Spring Security 4.0! Been waiting for this! Yay!
Not trolling. I just didn't know. We should all face the fact that some people will be learning about Maven for the first time long after having learned and become familiar with Bundler, Packagist, Gems, Composer, and NPM.
Cool story. I wonder why people are moving away from Java to node in droves? I checked... Lambda launched with Node.JS support, not Java. Why? It would be a joke trying to deploy your war files to a lambda tomcat server.
&gt; What do I use to manage all of the dependencies This is unsurprisingly referred to "dependency management" for future googling.
https://stackoverflow.com/questions/18119211/how-to-check-if-user-input-is-not-an-int-value
Argumentum ad populum. PHP is also a popular web dev language, and we all know how terrible it is. What others do does not prove that their platform of choice is any good (which Node isn't). JavaScript is a half-assed legacy shitheap that's alive way, *way* past its expiration date. It was only ever designed to let people make elements on web pages move around, and it's not even very good at that. It has no static types, no multiple inheritance, no namespace system (other than the laughable hack Node concocted), no classes, an `==` operator that's basically useless, no compact bytecode form, no pattern matching, lame list comprehensions, a laughably over-verbose lambda syntax… crap, long story short.
I have nothing in particular against Rails, but PHP and Node…you'd have to use a pretty flexible definition of “works” to make it fit those.
Maven is also very poor compared to the tools you listed. If you're coming from those sorts of tools, you might be more comfortable with something like Gradle.
Can someone explain to me how this is architected? Is the JVM embedded in the nginx process(s) ? Or is there some sort of memory or socket interface between two separated processes. 
By "works" I mean it's used on large production sites, which is what I said originally.
Gradle is a declarative build tool. It also accepts maven and ant builds. 
Two possibilities - use Integer.parseInt() and catch the NumberFormatException, or (better) use a [Pattern](http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html) and scan for an integer regular expression. (e.g. something like "[-]?[0-9]+").
Another vote for Maven. Well documented and well supported. Plays well with IDE's like IntelliJ. 
Your probably better off asking these type of things at /r/javahelp, but i'll take a stab at addressing a few of your requirements. **Preface:** Typically when you build an application for Tomcat, you deploy it as a WAR file (Web ARchive). This contains all of your dependency JARs (Java ARchives) that your application will use, JSP files which will be used to render your pages, and any static resource files such as images CSS, JS. This WAR (myapp.war) gets deployed to your tomcat server and you can specify the Applications context path (/myapp). **Items 1 and 2:** You're good. Java can run on Ubuntu, and Tomcat can run on Java, and Tomcat can use all cores. By default Ubuntu utilizes OpenJDK for Java, but you can alternatively install Oracle's Java. There is documentation online on how to install that. **Item 3:** You can deploy multiple applications to a single Tomcat instance using different WARs deployed to different context paths (/myapp2, myapp3, etc.) **Item 4:** This i'm not sure about. Since your application runs in the Tomcat container, any crash would be an exception and would only affect the current session the application is handling. It wouldn't bring the entire Tomcat instance down, if that's what your thinking. The Exception would be contained to within the app itself. If your Tomcat container itself is throwing exceptions, then something is probably really wrong with your setup. **Item 5:** Look up adding process to startup on linux. You will want to look up starting certain processes as a specific user, so that your applications are not running as root. **Item 6,7, and 9:** These aren't Java specific, but Nginx questions. They would all be configured on your Nginx config. You will probably want a separate Nginx server acting as your load balancer for your multiple Tomcat servers. Don't forget to configure sticky-sessions for Nginx load balancing. **Item 8:** I've never set it up like this, but it probably goes with the Nginx stuff above. You could have a separate Nginx instance on each Tomcat server configured for the application and for the static files. If you leave all of the static content in the WAR, the content wouldn't be served by your application per se, but by Tomcat.
Its not 2004 anymore and Java is not the king of the jungle. Node.js is a perfectly good platform. Have you seen the performance of V8?
I'm a little rusty, but if I'm understanding you right then the add method comes from the JList object. So you add the String to the JLIst with something along the lines of: JList list = new JList(); String listItem = "foo"; list.add(listItem); Hope this helps and I'm not to off the path with it!
Just as a minor point, you can just do: "-?\\d+" for the regex. 😃
Yes thank you. So sick of these intro to OOP tutorials which attempt to model classes after real world objects. That is not what OOP is about and it leads students into believing that objects are just structs (adt's) with functions attached to them. OOP should be about modeling communication between different components of your program. 
You probably want to initialise the JList with a mutable ListModel of some kind and save a reference to the ListModel somewhere. There's some documentation on Oracle's site that seems like it might help: http://docs.oracle.com/javase/tutorial/uiswing/components/list.html#mutable
I don't understand why you mention no multiple people inheritance. Java only allows you to extend one base class as well. Sure you can implement any number of interfaces, but in a dynamic language like javascript, there is no need for a formal concept of an "interface" because everything is duck typed anyways. If you want to "implement an interface" then just define the methods that the calling class expects to be defined.
Anyone know if this will work for security on queue subscriptions?
Have you seen the fancy static type checker JavaScript finally has? Class-based multiple inheritance? Non-useless `==` operator? Oh wait, no, it still doesn't have any of that stuff. I don't know how fast V8 is, and I don't care. It's still host to an atrociously bad language, and I've got better things to do than try to work around its brain damage. Even if the Scala code I write were slower (which it isn't), it'd still be well worth it for the time I don't waste on struggling with an idiotic language like JS. JVM or GTFO.
&gt;Java only allows you to extend one base class as well. Java allows inheritance of method implementations from interfaces (new since version 8). Scala, my JVM language of choice, allows that and also inheritance of storage and initialization from traits. It's unfortunately still not full multiple inheritance like in C++, but it's a lot more than JS can do. &gt;everything is duck typed anyways. Yes, and that's terrible. Static type checking is crucial for writing quality code. P.S. I also want typeclasses, user-defined implicit conversions, user-defined operators, powerful pattern matching, powerful list comprehensions, an option type, union types, generic types, and macros. Scala gives me all but one of those (the exception being union types). JavaScript gives me none. JavaScript is *crap.*
JList doesn't have an `add` method and OP says that right in the comment
Playing Devil's Advocate: If you unpack the contained String inside of the constructor and the JIT decides to inline the constructor, then the allocations will almost definitely at least be put on to the stack (if the construction of the intermediate Name instance isn't omitted completely). Naturally, this means you'd have to write your constructor to be trivially inlinable (probably just a call to a private init(String, String, String, int) func) in order to get the maximum effect, and each method that constructs CoffeeShop instances would make up to 160K of useless garbage per parameter^1 (assuming the stars align and *all* of the above assumptions hold, you're sitting on a nice modern JVM [Dalvik doesn't count unless they've improved it since I last checked -- hopefully ART does], etc.). But hey, you don't have bugs that a single well-targeted unit test would easily find, right? 1 - Assuming 16-byte aligned allocs + JIT at 10K invocations.
 over-verbose lambda? really? "function" is too long to type? no namespaces??? module.exports says hi. no static types? Who cares? You sound like C fanboys screaming about dynamic dispatch making Java a pig. It is a joke. You should know better. You don't know what you are talking about, but you don't seem to care. You are an overly-argumentative prick with clearly too much time invested in a technology quickly fading away. Enjoy Java. I do. It is a great tool. I don't have legacy hatred for it because it used to be a fat disgusting pig of a wanna be web browser / applet language... Oh shit. Java was created to make a web browser. Java applets were created because the browser could run them natively. Guess what, it was a piece of shit and died to Javascript, even though Javascript was pretty shitty itself. Then Google made JS scale with V8, and node.js gave it a toolset, and expressJS gave it a framework, and so on and so on. And now there are tons of modules available in with npm to do everything you would need a web app to do. No pain in the ass required.... Enjoy living in your hate-fiill troll world of pain. I don't have to anymore. Too much free time with all this hyper productivity in node.js.
Lord Maven
Sorry, I plugged it in Eclipse real quick and it didn't throw an error. I also guess I didn't understand the question.
Productivity without a type checker? Having to write unit tests for absolutely everything? That's not my idea of productivity.
Test driven development? Yeah that's an anti pattern if I ever heard of one. Go back under your bridge.
The preferences option allows you to choose the set of keyboard shortcuts from eclipse rather than the defaults. If any are missing you can define your own there too.
Gradle can use Ivy or Maven style repositories and publishing. SBT is the Scala Build Tool.
"2 minutes looking at the docs cleared it up" You must have forgotten what being a beginner was like.
This post is better posted in /r/Javahelp because /r/Java is for: &gt;**News, Technical discussions, research papers and assorted things of interest related to the Java programming language** as is clearly stated in the **sidebar** where you would also find: &gt;**Please seek help with Java programming in /r/Javahelp!** **Also:** be sure to read the [Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/posting_guides) on /r/Javahelp before you post.
For more details please check this link https://github.com/nginx-clojure/nginx-clojure/issues/20 
Why don't you want to serve static content from Tomcat? I am asking because it seems you are wanting this for performance reasons and you may be complicating architecture without need. See [here](http://stackoverflow.com/questions/3677108/serve-static-content-in-a-web-server-and-dynamic-content-in-tomcat-is-still-a-go).
I write tests for code that is not obviously correct. Writing tests for code that is obviously correct is a waste of time. Trouble is, without static type checking, the set of code that is obviously correct is a lot smaller, because there are many more subtle bugs to concern yourself with that a static type checker would have spotted for you. This forces you to write a lot more tests. So much for increased productivity. And no, I don't pray at the altar of TDD. Frankly, the whole idea is ass-backwards. Tests are for verifying correctness, and you can't verify the correctness of a program that doesn't exist and hasn't even been fully *designed* yet. Writing tests first would burden me with updating them repeatedly as I make and remake design decisions in the course of writing the program, which I do a lot of. Writing tests first would therefore be a waste of time. Finally, I would like to remind you that tests are not a panacea. I've seen plenty of buggy code with a large test suite, and some excellent pieces of engineering with no automated tests at all (the Linux kernel, notably). Automated tests are worthless if the program does not pass the ultimate test: real-world usage. My code does. Type checking makes that possible.
&gt; Why is this LIKE this? [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) You're not supposed to directly add things to a JList. A JList is a view component (the V in MVC). It's responsible for showing a list, not managing the contents. If you want to add data, you use a model (the M in MVC). The basic ListModel provides the minimum interface required to show list items and provide hooks for the JList to receive data events. If you want to add items, you have to work with the specifc model type that allows adding, either casting the generic model to the specific type (not so good) or keeping a reference to the specific type of model (better). Swing was designed around MVC. That is why it is the way it is.
Can only relay what I've construed base don what I've read... so I'd kindly ask others to correct me. The simplest answer is... it depends :) As a developer developer, maybe not so much. These technologies are geared towards DevOps and Team work. Vagrant is to development environment akin to what Maven did to dependency management. An instruction set that creates an environment for development and other purposes. This makes the same env portable and share-able, hence squashing the last bit of "but it works on my machine" excuse. Docker on the other hand is geared towards the finished (or some other state dev/beta/test, etc.) code and how/where it runs. Rather than spinning up a VM, docker creates an isolated "vm" esque enclosing that contains all the necessary items for the code to run and independent of the surrounding operating system. It communicates directly with the kernel. This approach is better than using a VM because a VM creates a kernel/os on top of the base kernel/os. Docker eliminates the need for two OSs and a Kernel from that equation.
Ah, crap. That's what I get for posting from my phone. No sidebar. 
i setup a stack based on vagrant/packer/virtualbox/puppet at my current job to allow developers to get as 'close to production software stack' as possible. This has proved tremendously helpful in eliminating the 'it works on my machine, but not yours'. We can now easily duplicate issues/bugs that happen in prod on our virtualized dev environment. The only downside is that there is a one time setup that currently takes about 30 min (its all automated though, so I usually tell onboarding devs to run the script and go get coffee, and by the time they come back, they will be spun up on the stack). This has worked for stacks ranging from LAMP, Java, Scala, RoR, Python + Django.
I disagree for my purposes. I don't think TDD is bad for small, contained software modules. It can help you catch bugs you might have otherwise missed. Fixing bugs in production costs tons more than in devel. It isn't ideal for everything... nothing is. However it serves a great purpose. Also Node.js doesn't require you to use end to end testing. You can test only what makes sense provided you are modularizing by following the established patterns and best practices for the platform. If you write shitty clusterfucks of code, then testing it will be terribly hard.
I use Vagrant all the time for testing. If I hear about some new tech that requires installing a bunch of stuff, I will spin up a Vagrant image and do it there. That keeps my Mac less crufty, and gives me a pristine environment to test out whatever it is I'm testing. I've even taken it a little further and created a customized Vagrant box that has all the base stuff I want in an image. I also have a stock Vagrantfile that references this base image. So I can have a running Vagrant image for testing whatever I want in under 30 seconds, which is really nice. Edit: I am a long-time Java developer, and the tech I was talking about is things like Spark or Storm, or etcd, or any sort of server-y thing.
I have about 1.5 weeks of experience in each, so my experience is a bit limited. The advantage I found with Docker over Vagrant was that I could launch several brand new instances in seconds, and in general seemed much lighter weight than Vagrant as well. That aside, both worked fairly well after I figured out how to make them work &amp; generally I'd probably prefer running any production-servers within one or the other to ensure my environment is clean.
I told you [hours before](http://www.reddit.com/r/java/comments/2oyyxb/java_networking_tutorial_javatpoint/) this submission: Fuck of with your spam. Read the [Reddit rules](http://www.reddit.com/rules/).
yeah, I get the MVCness of it all. I think what's going on is that either the concrete model is sufficiently barebones that it doesn't have add methods, or it's just coming back from getModel cast as an abstract enough interface that I'd have to cast it back down to see mod methods that are there, if they are.
In my project I subclassed JComboBox and JList with a bunch of convenient addItem/sort/etc methods. No more Swing data model API hell :)
Yeah, if I pursue this, I'm going to wrap this stuff up tight. I'm still "playing" at this point, trying to decide if I'm going to dive deep into java for UI work or not. 
Yup. I would highly recommend checking out the [JavaDoc](https://docs.oracle.com/javase/7/docs/api/javax/swing/JList.html) for JList to see what your options are. The API documentation is quite thorough.
Vagrant can be configured to use Linux Containers too (the same tech that Docker is based on). However, from my limited understanding, Docker uses a script to build the environment, while Vagrant uses a snapshot of an existing system.
I don't get why effective java even gets recommended for newbs, read Head First. I read Head First and I also have Effective Java, its more of a book to read when you already understand programming. Its short enough to be read in one sitting but its more of something I read every now and again to remember best practices.
I didn't really explain myself too well. I was going to buy a Java book for someone who already owns and is making their way through Head First Java, I'm more of a C++ man myself but I just wanted to confirm that Effective Java is a decent purchase to read *after* having made your way through HFJ, or either to supplement it. 
that's just wrong, haha. you're giving yourself more pain than it has to be. the swing API is extremely well designed and very simple to manage once you understood the basics of it (that is, you have a controller - jlist, jcombobox, etc., that manage the model and the view. you manipulate data via the model, and manipulate the view via renderers. cannot get any simpler). 
since swing is a quite old API, and Oracle has largely abandoned it, i'd recommend going to JavaFX instead. Learning swing however is not a bad thing as a lot of the swing concepts can be found in JavaFX (improved/more complex of course). swing is a quite simple api once you grasp the basics of it, as all the components follow the same very simple rules.
I think Effective Java is the book that you read when you are in that little slump between beginner and intermediate. You can work your way through problems but it takes some time. You've experienced threading and memory management and generics and interfaces and abstraction. You're basically set as a junior developer. But you want to get better and getting better means you need to learn why the way you've been coding for the last year or two is wrong. There's a lot of information in effective Java that isn't easy to digest or apply until you see it done poorly.
Yes, you do.
Not exactly. The L&amp;F part implements the UIDelegate, which is one part of the view, which cooperates with the other part of the view implemented in the component classes like JList. For example, paint management and layout management are done entirely in the component classes. Also, management of renderer classes is also done by the component classes (such as ListCellRenderer). Check out the view logic in more complex components like JTable sometime. However, the component classes also implement the controller, mostly by implementing the hooks on the model which signal model change events. Swing doesn't implement a clean separation between V and C, as much as it does with separating M from V and C, such that Oracle calls the Swing architecture [quasi-MVC](http://www.oracle.com/technetwork/java/architecture-142923.html#delegate).
Still, if it's their first time learning programming, *Effective Java* probably isn't the best fit. Most of its tips are the kind where you hear something for the first time, recognize it as common sense, then wonder why you didn't do it that way in the first place. However, its tips won't really be of use to someone who hasn't grasped object oriented programming yet. Chapters 3, 4, 7, and 8 (of 10) are probably the ones that a beginner would get the most use out of. (Amazon's Look Inside has a TOC, which actually lists out all the tips in the book, so you can verify this yourself.) The other chapters are fairly specific to Java, which may be "in the weeds" and a bit *too* specific to Java to be immediately useful to a first-time learner. That criticism also somewhat applies to Chapter 3, but your friend is probably already working with methods inherited from the Object class (such as toString()), so that one would be useful to them. Also, *Effective Java* is [available freely online](http://uet.vnu.edu.vn/~chauttm/e-books/java/Effective.Java.2nd.Edition.May.2008.3000th.Release.pdf) from an .edu extension, so (more than likely, but can't really verify) legitimately. I do own a copy, myself, but that's something to consider. For a book that is entirely general programming advice (and thereby more useful to a beginner), I'd instead recommend [*Code Complete*](http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670), second edition by Steve McConnell. You can open up that book to practically any page and find tips and best practices that can be applied to writing code in any lanaguage. It's also usually at least a bit cheaper than *Effective Java*.
From my experience - Vagrant helped a lot during development stage. Everybody in a team had the same setup -databases, libraries, so no surprises when going to production or "on my machine it's working properly " stuff. However in further development we noticed performance drop due to folder syncing.
ha, just because swing doesn't cleanly implement a proper separation of the view doesn't make it any less true that jlist is actually the controller. and jtable, and jbutton and....so on and so forth. yes, having paintComponent and border and stuff in the J something part is not nice, but it's much close to mvc than any other ui framework i've seen. 
No, I can guarantee that JList is more than a controller. In my many years working with Swing, I've created custom versions of Swing components (including JList) that would not have been possible if JList were only a controller. Think about it. If it were so that JList were only a controller, that would mean I would have had to modify the UIDelegates for all of the Platform L&amp;Fs to support those customizations. This is a strategy used in Swing itself for custom variants of some controls, such JTextField and JFormattedTextField. Remember, the Controller in MVC is a bridge between the Model and the View, communicating edits in the view to the model and updates in the model back to the view. JList and the rest do far more than that.
Could you elaborate more on this?
getting screenshots. will edit in one second.
http://imgur.com/N43VPSR on the left is the result with the for loop, on the right is without. it will not display any cards past the number 10 
What's wrong with ~~Sun's~~Oracle's Java tutorial? When i started they had a book version. I liked it a lot then. Then i moved to "Thinking in Java"
At my work we used Vagrant for some time, mainly to host the services we depended on, like MySQL, Redis, Cassandra, etc. Today we exclusively use Docker for developement, testing, and production. For our java apps our stack is either Play 2 or a simple netty server. We made Docker images for our services up to date with the latest schema and some times even with a production dump. We use https://smuggler.io/ to build the apps and run testing and or preproduction environments. The app images are the same in all environments, which is really nice. We made the move to Docker in Januay, and migrated everything over the year and right now almost everything is dockerized. All our devs love it, and we've seen our deployment time decrease a lot, so it's a definite win in my book.
yes, it's a polluted controller (for good reasons though). it is a controller at its core.
haha, no. no you dont need to subclass. rarely i ever needed to subclass anything. it happened, yes, but maybe once in 100 projects (one with weird UI requirements). if you have no idea how to use swing, sure i guess, you subclass, but you don't need to. certainly not always. &gt; I bet you call JCheckBox.getModel(). ... no i dont. i call: checkboxModel.setSelected(....) bla bla. I have the model, why wouldnt i? 
Do u really need vagrant? Why can't u just use virtualbox directly? 
/r/ProgrammingPrompts is a good start. Kudos goes out to /u/desrtfx for re-kindling the subreddit. If you run into trouble /r/javahelp will give you some key pointers (yes all pun intended) to get your code unstuck. Then when you get some coding done there, you could head over to /r/reviewmycode and post your code to help you get your coding skills improved.
Ah, submission no. #30421 for project ideas.. * http://www.reddit.com/r/java/search?q=project+idea&amp;sort=new&amp;restrict_sr=on&amp;t=all * http://www.reddit.com/r/learnprogramming/search?q=project+idea&amp;sort=new&amp;restrict_sr=on&amp;t=all * /r/ProgrammingPrompts 
Not according to the designers of Swing. Are you saying they are wrong when they themselves say that JList is both a controller and view, that they are mistaken when they analyzed Smalltalk's more pure form of MVC and decided to merge the view and controller in their design, and that they are mistaken when they themselves call Swing's implementation quasi-MVC? Are you saying that the designers of Swing are misunderstanding their own design, and you understand Swing's design better?
It doesn't include JAX-RS, which is what I'd have thought would be the first one to consider - you can then develop your app using this API, and deploy on any JavaEE container.
Your array only contains numbers one to ten and that's what you're using to select the image. I suggest having two arrays, one with the card number and one with the card value. Pass both into the shuffle method and shuffle them both the same. Then select from the card number array to get the image and select from the card value array to get the values to add up. This is a perfect place to use a class to lock together a card number a d card value but if it's a homework assignment the teacher probably doesn't want you using advanced features in a basics class. 
just a second: you are saying that jlist is both a controller and a view, but we all know that quite a bunch of view responsibilities are also passed on onto the L&amp;F (uidelegate and so forth). I am saying that jlist is a polluted controller with some view responsibilities, but it is a controller at its core. and you seem to not agree with me for some ... reason? what? how? when?
&gt; I am saying that jlist is a polluted controller with some view &gt; responsibilities, but it is a controller at its core. You can just as easily say that JList is a polluted view with some controller responsibilities, but it is a view at its core. This view would actually be supported by the evidence, because the Swing team *tried* to make JList a pure view, but they did not like the results. I am not agreeing with you. You seem to think that it is one thing "at its core" and the other thing is just pollution. How about we just say what the people who *actually* designed Swing say: JList is both a controller and a view, it is not a controller at its core nor is it a view at its core. 
What result do you get when you do s.equals(cs.toString()) My guess is that the String class is checking to see if the object passed in is of type String and since it's not it returns false
Yes, a Groovy DSL that is a declarative build tool that accepts maven and ant build files. What's your beef?
If you want to know the gory details, [read on](http://www.artima.com/lejava/articles/equality.html). Your own `equals` method is very likely violating the [equality contract](https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals%28java.lang.Object%29): is it reflexive, symmetric, transitive and consistent?
&gt; none of the controller responsibilities are passed to anyone else as far &gt; as i know. Fortunately, the designers of Swing know better. The controller responsibilities are also handled by the UIDelegate. Both JList and its UIDelegate each share controller and view responsibilities. &gt; you can call it whatever you want, but not a view. I am saying what Swing's designers say. They call it a view *and* a controller. No view crap and no controller crap. Are you disagreeing with the designers of Swing?
Read the gory details. If String could accept arbitrary CharSequence objects, either symmetry or consistency would be violated.
Thanks guys this will really help
Meh...
I've done something similar to this using the pub sub functionality of zeromq. It worked, and I'm sure there are other options out there that are better, but the core distribution model is relatively simple.
Make a simple game. It covers a wide array of fields in just one application. 
&gt; I am saying what Swing's designers say. They call it a view and a controller. I am saying what the code does. one does view and one does controller+view. look at the damn code, don't recite crap. I wanted eggs with bacon this morning. I got scrambled eggs. My intentions were noble, but what i did proved otherwise. 
[r/javahelp](http://reddit.com/r/javahelp)
Also, one more note. The [CharSequence](http://docs.oracle.com/javase/7/docs/api/java/lang/CharSequence.html) contract specifically states that arbitrary CharSequence objects are not safe to compare to each other: &gt; The result of comparing two objects that implement CharSequence is therefore, &gt; in general, undefined. Each object may be implemented by a different class, and &gt; there is no guarantee that each class will be capable of testing its instances for &gt; equality with those of the other. It is therefore inappropriate to use arbitrary &gt; CharSequence instances as elements in a set or as keys in a map. 
The biggest gain is with vagrant you can share a VM with a textfile, rather then a multi gig virtual machine. You can also completely destroy your vagrant box and reprovision it with one command. Vagrant also allows you to use docker directly as the provider, eliminating the need for virtualbox or other virtual provisioners.
&gt; handling the input. mouse and keyboard. Yes, of couse it does. The UIDelegate handles both view and controller responsibilities. &gt; some of the input have obvious effects on the list (what's selected). And those effects are being translated into the model. That is the controller responsibility of the UIDelegate. Because of the read-only data model, the controller behavior isn't that interesting (only the selection is mutable). Check out the UIDelgate classes for more interesting components, such as BasicTextUI, for much more interesting controller behavior. Are you going to call this "pollution" as well?
I have multi dimension menus implemented with css and html5 &lt;nav&gt;. I'm a rookie and don't see the big deal.
no. this is not pollution. this is getting things done. however, this is not controller behaviour. this is input management. not a controller job, by any definition.
I am using plain servlets (although I am also trying to learn the basics before going up too much on the ladder — have tried ninja,spark,spring). I don't have a lot of data, so it isn't a pain.
According to [Wikipedia](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller): &gt; A controller can send commands to the model to update the model's state (e.g., &gt; editing a document). It can also send commands to its associated view to &gt; change the view's presentation of the model (e.g., by scrolling through a &gt; document). So according to Wikipedia's definition, which I think is spot on, since the UIDelegate is "sending commands" to the model by calling the model's update methods, it is indeed implementing a controller responsibility. Also, since the UIDelegate has listeners attached to the model, and these listeners are "sending commands" to the view to alter its presentation, there's even more controller responsibility for you. By every reasonable definition of the job of a controller in MVC, the UIDelegate is a controller. And a view too.
Review my code sub sounds awesome, thanks 
the problem is there's so many things i'm passionate about, and i don't really have any... guidance? let's say i want to build an app like mint to keep track of my spendings, i have knowledge of data structure, but for UI, how would i go and search the best tool/language to use? there's SO MANY different ways of doing something, and what if i spent a long time and it's an inefficient way? /rant 
please obi wan kenobi you are my only hope!
The problem is that the variable 'user' is a String, but you're trying to compare it to an integer (numeric value). In order to compare the user's age to 18 and have it treated numerically, you must first convert the String to an int. A simple method of doing this might be to use the Integer.parseInt ( ... ) function.
You can't evaluate a string with an integer. You need to get the string's length. You may be able to do this: if (user.length() &lt; 18) {...}
why would he need the strings length? He needs the string as an integer value , "2" is 2 not 1. 
Thanks for sticking with me and not just telling me what to put. You have greatly helped me out. c: On another note, as someone looking into learning more coding what are some sites/books that you would recommend to help broaden my knowledge of java?
No worries, hope you've got it working. I don't really know what to recommend to read. Effective Java is always touted as the best overall Java book but it looks like you're a beginner so it might be over your head. Maybe the official [Oracle Java Tutorial](http://docs.oracle.com/javase/tutorial/java/index.html)? Java wasn't my first OO language so I didn't really need any basic tutorials on it.
We've started using Docker for testing purposes, and vagrant is great for spinning up machines. In the context of Java, well, Docker is useful for the same reason it's useful for other stacks. Containers allow you to control your dependencies and greatly simplify deployment.
yes, for example you could create a docker image of ubuntu with hotspot JVM installed , and other dependencies.
I'm not overly impressed with these. Much of it is blindingly obvious, other bits... like admitting your interview questions are tangentially related to the job don't speak well.
The intent was more that most interviews are like that. If you interview for me I avoid those sort of questions :). As far as blindingly obvious, I agree, but every single thing mentioned is in there because I've witnessed it repeatedly. What's obvious to me and you isn't obvious to everyone.
I miss there [Java Performance](http://java-performance.info), top noch blog.
Are these on iTunes/Apple podcast thing?
Spring using @RequestParam, job done
I think the fact that it is seeing a lot of use as part of WildFly speaks volumes. I'd use it if I had a reason.
Cool that's exactly what I meant, good job.
Needs http/https before the site to turn it into a link.
I'm using in production, as both a part of WildFly and part of an SE app. It's much simpler than even Jetty, so it doesn't understand things like WAR files but you can map servlets, etc. I have a small framework around using it + resteasy https://github.com/johnament/hammock
Got a couple of books. Read every page and tried every example. Then studied for, and obtained, java certification. Then talked my way into an entry level job. Then learned the rest on the job.
Received a degree in CS in 2000. Java was the language du'jour from 97-00, but I had previously taken classes in Pascal, Modula-2 (thanks, Ohio State), C++, C. The good thing about a university degree is the amount of classes you take about learning the various types of languages (OO, functional, dynamic, procedural, etc.) - it makes learning a new language a LOT easier. But, in my view, there's no substitute for experience. I hire programmers now, and I don't care if the person learned it on their own or in university, if they can think logically, then they can learn to code in any language.
Thanks.
Indeed, that's superb blog. +1
Is anyone really going to use nashhorn? What for?
Interesting stuff! Generic AST compilation for dynamic languages? Sounds like they are aiming to cover a lot of the same use cases as [Graal and Truffle](http://medianetwork.oracle.com/video/player/2623645003001). And unless I'm misunderstanding, though there are similarities between the two approaches, there seem to be some key differences: - Nashorn uses lots of static analysis, with optimistic assumptions over unprovable types, recompiling and falling back when these assumptions prove incorrect. - Graal/Truffle forgoes static analysis for aggressive strongly-typed replacement and recompilation of AST nodes on the fly, falling back to interpreter code when these assumptions are invalidated, until new assumptions can be made. I wonder if these teams have been in communication with each other, and what the futures of these projects look like alongside each other.
Does he? Ok. Haha, I wasn't really paying attention to what he was wanting to accomplish.
Self taught. No programming background other than awful Windows batch files. Then some VBScript. Bought a copy of Java A Beginner's Guide by Schildt. Installed the JDK, Notepad++ and Eclipse and read through the book. Then read Java The Complete Reference also by Schildt as I liked his writing style. From there I could pretty much understand any other intermediate Java books and online tutorials. For projects I started with making my own version of small command line tools like my own copy tool, etc. Then built GUI front ends for them. Then rewrote them as full GUI apps. Once I was comfortable and had made a dozen or so little utilities I decided to write a simple backup tool. At first it just copied files/folders from one place to another, then added logging of errors, then zipping up everything, then calculating file checksums for integrity, etc. In the end I have an alright backup tool with a smart GUI that could send emails for success/failure, verified backups, all that kind of stuff. Was a lot of fun. Java is a pretty nice language. It can be wordy for a beginner but just make good notes and you should be fine. 
I used to love Runescape when I was younger. One of my friends told me about a website called Moparscape where I could play Runescape and have all the items I could ever want. Moparscape was my door into Runescape private servers. From there I self-taught (poorly at first) myself Java and created multiple failed and a few relatively successful servers. From there, I began to become interested in wider programming and indulged in a few other languages. It was only during the last two years that I became very interested in design patterns and other things like practices. 
They surely talk with each other, after all they do present talks at the same events. Check the JVM Languages Summit talks. http://www.oracle.com/technetwork/java/javase/community/jlssessions-2255337.html 
I guess there's some stuff you can do, like make your own [custom browser](http://docs.oracle.com/javafx/2/webview/jfxpub-webview.htm) embeded with your app. So, a better javascript engine sound great. Also, sooner or later project like [Doppio](http://int3.github.io/doppio/about.html) could get some benefit once they migrate from Rhino to Nashorn, so you can run actual bytecode program within a browser without any Java plugin. But I guess this is still experimental.
For example https://avatar.java.net/
Well I'm sure they've interacted to some extent, they are both high profile projects in very similar domains. I guess I would just love to know of the extent of these interactions, and to hear what they both think of each other's efforts and how they may compete with or complement each other. Thanks for the link, I've seen a few of those talks already but there are a few other interesting ones there.
thanks for the detailed reply! it's very encouraging!
Self-taught. Followed Berkeley's CS61B course, it's in Java but you have to dig around cause different semesters have different people and different style. This is the one I found the most approachable - http://www.cs.berkeley.edu/~jrs/61b/ That Head First Java book is a friggin gift to beginners. Don't let the silly pictures throw you off, you have all the time in the world to get into dry and complicated formal textbooks, there's no way around it :] Then decided to dabble in Android but even though I felt pretty confident around Java I couldn't make sense of what the hell was going on with all that design and the weird class names ending in `Impl` and how come you couldn't call `new` on half the things in there, so I got me Head First Design Patterns as well. Made a lot of things so much clearer. Seriously if any of you plan to work with Java on something more substantial than homework, like getting into real frameworks or making web/mobile apps, a design pattern class is a must.
No, you cannot provide a WAR for deployment. In each example you listed, they manually register servlets, listeners, filters, etc. Think of this more like embedded.
One interesting thing about Graal, is that Hanspeter Mössenböck works on it, a former Oberon(-2) researcher.
What did Googling your problem turn up? What have you tried? What errors are you getting? Read the sidebar too - this should be in /r/javahelp instead if being here, but even then youre expected to have put some effort in.
This reminded me of you, http://files.explosm.net/comics/Dave/itsnotitsnew.gif
There is also this: http://www.drdobbs.com/jvm/java-qa-how-do-i-correctly-implement-th/184405053 Since no additional aspects are being added between CharSequence, String, StringBuilder, etc. I simply don't see why .equals() can't be made to work. If an aspect is being added, like a Color in this link and in the comments here, then an equals implementation is available which satisfies all the requirements of equals. Perhaps it's a simple matter that CharSequence was added so late in the game and the API was already set. 
You and I have exactly the same story my friend. Runescape private servers were the best motivation. Although at first you learn how to do everything wrong lol
This post is better posted in /r/Javahelp because /r/Java is for: &gt;**News, Technical discussions, research papers and assorted things of interest related to the Java programming language** as is clearly stated in the **sidebar** where you would also find: &gt;**Please seek help with Java programming in /r/Javahelp!** **Also:** be sure to read the [Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/posting_guides) on /r/Javahelp before you post.
Here's some ideas: - For web apps, use the same code/logic on server and client-side, e.g. models, validation. - For games, use JavaScript as a scripting layer on top of something like LibGDX. (I've done this previously with Rhino) - Run JS unit tests as part of your JUnit test suite/Maven build. - For SPA web apps, you could use JS for frontend and backend (connecting to something like MongoDB), letting you use all the good stuff from the JVM or JEE techs, without having to use NodeJS. Or, NodeJS could be ported to run on the JVM, giving you more options for deployment/hosting.
Yes but I used it when I was a noob and rarely go on it now a days. I still work on private servers though and right now I am working on a 667.
Dont companies require experience?
Isomorphic web applications
is this a troll? plenty of jvm users are non java and this would benefit nearly all of them.
Interesting. I see Microsoft bought the visual studio Java plugin. Visual studio could use something like this as well as to build web apps. I'm interested to see how it progresses.
&gt;no criticism Too bad. Who ever got better by being told all is great? This is genuinely just bad. Your writing is bad. Your information is even worse. &gt;java programming Just java is fine. &gt;not to be confused with JavaScript Sure, but java is also used in web development. The rest of this paragraph goes in a strange tangent. Poor writing skills are especially apparent. &gt;fast growing language It's usage is shrinking, along with most every general purpose language. &gt;you can make anything because it is object oriented Absurd. The programming paradigm doesn't prescribe the capabilities of a language. Solutions may be easier in one paradigm over another. &gt;definitely cannot make an operating system Also wrong. You can and it has been done. &gt;cannot make stuff for the web Java has massive web presence. Java is actually a pretty damn fine language for the web. &gt;benefits stuff I mean. Sure. I guess. The writing is poor and you often go on tangents with little reason still. Lots of the info here is still wrong, but I grow weary of this page. &gt;the api is too big and hard to browse http://docs.oracle.com/javase/7/docs/api/ Real easy to browse &gt;too many versions Yes, the language has to update, however your claim of incompatibility is wrong. A huge focus of java post v5 is backward compatibility. In fact, this is been a slightly sore spot for java. In many ways, it needs to buck up and start breaking backward compatibility. &gt;click next to see the next lesson My god. There's more of this? OK. &gt;blah blah blah Your writing remains almost intolerable. Stop using smilies. &gt;can be used on the internet But you just said it couldn't be! I am not a fan of your information here either. I'd hardly call servlets "applets that run on the server" You missed jsp. There is a wide variety of usages beyond generating HTML. &gt;java compiler software for running java applications java and javac are not the same thing. Yikes. &gt;you need compiler software, known as an IDE An IDE is an Integrated Development Environment. You can easily develop in java with nothing more than the jdk and a text editor. An IDE is NOT a compiler. &gt;this is what's known as a compiler Say what? You didn't describe anything. The java compiler converts properly written java code to java byte code. The compiler has many responsibilities beyond that. Syntax checking, type checking, checked exceptions, etc... &gt;walk you through my favorite compiler Hey, you were inadvertently actually kind of right about something. There are a few implementations out there. IBM, oracle and openjdk to name a few. &gt;the rest of the paragraph Facedesk &gt;install jre and jdk No need. The jdk includes a jre. Do you even read your installers? &gt;description of steps for using a text editor Where's my gun cabinet. I can't take this any longer. &gt;sorely small list of IDEs with 0 comparison, but declaring eclipse as the best. Whatever floats your boat. I am not getting in to an ide war. Then you list notepad++ despite just saying how much work text editors are. Sigh. Nothing wrong with notepad++. Just your article. &gt;install eclipse / desktop shortcut I must be living with under a rock. Does eclipse not still just extract to a folder on windows? DAT jpeg. &gt;more wrong stuff I just can't keep going. 
I accidentally the whole package.
I shit you not: While reading a few pages of that Web site, my computer froze in an audio-loop-of-death, only showing the page's blue background. I use Windows 8, my Firefox' About window says "34.0.5 ... EU". After reboot, I continued reading, then opened a new window to search for something in Google - the search did not go through, and then every Firefox window I used became completely black. After a fresh reboot! If I happen to find a different reason than this Web site, I will definitely edit, and of course the reason *must* be that Firefox is buggy, but still: I think I better don't touch that site again. Apart from this, I generally agree with what CanadaDotJar said. The writing style sucks, and at least a few of the things said are plain wrong, to the point that I hope that a Java newbie will not fall victim to this site. It's like the author has a few months of Java experience and then felt ready to turn around to face the pupils and teach them while the actual teacher was not in the room for some reason.
hmm.. does your browser normally do this? I would check that the browser is up to date and see if that helps. As for the website's writing, I think I've corrected all the wrong info. I wrote the first few lessons when I didn't have a tonne of experience, but was fairly familiar with the language so it's legit that I got a few things wrong. However the later lessons should be Ok, but I'll have to check them.
&gt; hmm.. does your browser normally do this? I would check that the browser is up to date and see if that helps. It's up to date, and I mentioned this because I assume a cause&amp;effect connection. Again, it's the browser's fault if a page would kill it, but my experience *suggests* that your site is a causer of such a problem much more than other sites. Of course this isn't *certain*, but I felt certain enough to mention it. &gt; I think I've corrected all the wrong info. (Didn't re-read it now.) If I were you, I'd do this: I'd wait a day or two after this collision with different view points, then I'd go through each text and sentence and rethink/redo them somewhat. I mean, the difference between the text we read and one that would be accepted without relevant criticism might not involve a lot of work, just a proper new iteration of the whole thing.
**Hint:** find out how to compile classes into **jar**s
Ok, thanks. I'm still not sure about your browser problem- you are the only one who has reported this problem and the website is made in wordpress so it might be a plugin or something that is causing it...
Well, I do have browser problems sometimes, but only after a lot of use and run-time. Something in the site might just have accelerated this a lot. But you know what, that could be an asset. I'll give a short feedback notice via Firefox using your site, maybe they can use it to hunt for bugs.
&gt; I said a compiler was something you write Java applications on then run them. No. A compiler converts **pre-written** programs into **bytecode** executable code. You **never write** anything in a compiler.
http://resteasy.jboss.org/
http://www.sugarforge.org/content/open-source/ http://ofbiz.apache.org/ 
For ages reverse engineering forums has a green and black background
I cannot visit the link, it is just me? I have Opera 27.
I mean, the problems go through every single lesson. &gt;You can think of a string as a type for simplicity You conflate "type" with "primitive type". So you're really wrong here. String is an immutable object. In many ways, it's nothing like a primitive type. It's just filled with stuff like this everywhere. &gt;A class type is the same as an object type is the same as the reference type This is just not right either. The reference type only has to be somewhere above the object type in the inheritance hierarchy. An object is defined by the class which is used to instantiate it. Confusingly, you get this concept correct in earlier lessons, though I think you just copied it from somewhere else. &gt;A reference type is any type of variable that is not defined in the Java programming language itself, thus any objects defined in the Java API are reference types. Then when you make a List&lt;&gt; variable, what is it's type? Something we've apparently never heard before. Or is it? If I were new, I'd have no idea what you are saying here. It just goes on and on with this incorrect information. You should think hard about taking these down. Thankfully, in the later lessons your writing seems to get a little better. It still needs a lot of work. I am no master of writing myself, granted, but when you make public facing articles you really have to read it 10-20 times over and quadruple check every bit of information. Maybe you should take them down, then write about your learning experiences. Then maybe I will visit from time to time and help you out.
Ok, thanks a lot I appreciate your help. I have used my Java All in One for Dummies book as a guide to help me with the information and some other websites so I don't know why some of it is wrong... I think I'll just take them all down and change the website a bit. I like your idea about writing about learning experiences, I think I'll do that :) It's a shame that I'm getting rid of hours and hours of work, but I guess it's a valuable lesson.
what does it do better than other viewers?
&gt; I have used my Java All in One for Dummies book as a guide Really not the best idea. Don't get me wrong, the "for Dummies" books are not bad, but they are so basic that they often over-simplify things to the point where they are extremely close to being wrong. If you want to use something as reference or guide, stick to either the original **Oracle Documentation**, the **Oracle tutorials**, or some more "professional" book.
Could you try now? Maybe the website was offline, the URL is https://the.bytecode.club
Features: Java Decompiler - It uses a modified version of FernFlower, Procyon and CFR. Bytecode Decompiler - A modified version of J-RET's. Hex Viewer - Powered by JHexPane. Each Decompiler/Viewer is toggleable. Fully Featured Search System. A Plugin System With Built In Plugins. (Show All Strings, Malicious Code Scanner, String Decrypters, etc) Fully Featured Scripting System That Supports Groovy, Python And Ruby. Recent Files &amp; Recent Plugins. And more! Give it a try for yourself!
I can with plain http http://the.bytecode.club/. With https i get this: &gt; This webpage is not available &gt; A secure connection cannot be established because this site uses an unsupported protocol.
I started with an AP Computer Science course, then taught myself from then on.
Thanks for the help! Ill pm the game when i finally get it done!
Well i know the basics of java, i also know about classes, methods, loops, if statements, and the data types. Ill take a look at that other sub, thanks for the help!
For those of us that don't know what parallel computing is, what is it? 
&gt; parallel computing http://en.wikipedia.org/wiki/Parallel_computing hurr hurr
Well, on your PC right now, you certainly have a multicore processor. One aspect of parallel computing is writing programs that will exploit those cores to either accomplish some task more quickly, or to accomplish more of some task in the same amount of time (e.g. extra computations with the extra cores in order to get additional precision in some calculation). Those concepts are known as speedup and sizeup. Traditionally, you would just use a language's Thread classes, but part of this library allows you to write more generic programs that will exploit the number of cores present on the machine being run. It just makes it a little easier to write multi-threaded programs. In addition to the conventional development of multi-threaded programs with multiple cores, you also have clustered/distributed systems where you have an array of computers (not just multiple cores on a machine) running together to do some calculations. Super computers are an example of this. You also have a GPU in your machine. A GPU differs from a CPU in that your GPU probably has something like a thousand cores (instead of, say, 4 cores). Thus, if you're writing some scientific program that can benefit from many computations at the same time, you can use this library to distribute your computations to your GPU's many cores. That's just parallel computing in a nutshell. You can look through the book at the link I provided, or my professor's lecture materials if you want to learn more about it! It's a really interesting topic, I loved the class. Edit: And sorry that you were getting downvoted. There's no reason to downvote someone wanting to learn.
Heh RIT. Wanna mail me a garbage plate? I've had a craving for one for months. Looking at the [Javadocs](http://www.cs.rit.edu/~ark/pj2/doc/index.html) I don't especially like how much scope creep and wheel reinvention there is. For instance there's an http server, crypto, basic 2d graphics, and a custom tuple space system (instead of using JavaSpaces). It's definitely made for educational purposes between that, the presence of "example" classes, the non-standard code style (especially setter/getters without the word set/get), and all the documentation. It's also definitely apparent that he put a lot of work into it so apologies if it seems like I'm bashing it, I was looking at it more from a "using" instead of "learning" standpoint.
Don't worry, I understand what you're saying. This professor's code style actually drives me nuts. Everytime we had to use some starter code of his, I always needed to rewrite it because his code style is so bizarre to me. We actually talked about his custom tuple space on the last day of class. It sounded like he was pretty proud of that! I can see why not using the standard would be a problem though.
Yes it's for educationnal purpose. Hehe, I even saw an example class about mining "fake" bitcoin. I guess it wouldn't be that hard to fork the project, refactor and make a maven plugin out of it, so it get a better usage of dependencies, easier to use, etc. That being said, I think it's really nice to have one library that unify multicore+cluster+GPU... edit: I just tested [this](http://www.cs.rit.edu/~ark/pj2/doc/edu/rit/pj2/example/MineCoinSmp.html), not sure what's up with that(I just extracted pj2src_20141107.jar) edit2: oh, look like it works great actually: D:\pj2src_20141107\pj2\lib&gt;java pj2 edu.rit.pj2.example.MineCoinSmp 11 11 Coin ID = 11 Nonce = 0000000000002f94 Digest = 001c5947f1c1061205db78463c120c72e0c43c668b591f9804a17c2260957a5d Coin ID = 11 Nonce = 00000000000027a7 Digest = 001b66510a9db83cf296a60c6e45530af1bea34519ec8dd63c56b066ac65c3e9
Did you try the link on the first bullet point of the JCreator installation page?
Just use Object instead of var.
There's a bunch of minor syntax things I'd like. I wish method references called with a set parameter would turn into a one-argument lambda taking the object to call the method with those parameters on, for example. But when it comes to big language features the value types slated for Java 10 is what I really want. Perhaps that would also be the place to allow some amount of operator overloading, to get that vector math looking nicer. Multiple vararg parameters would also be nice, it seems to me that if they're required to be of the same length and are called by interleaving it there wouldn't be any problem.
You go to RIT? Cool! My friend goes there. Totally off topic, but how is it?
The lecture materials for his introductory class are [here](http://www.cs.rit.edu/~ark/251/). Unfortunately, it's not videos, if that's what you're expecting. Rather, he has a set of notes, handmade diagrams (he makes very professional, consistent imagery), demos, source code, etc. for each topic that he covers. They're really thorough and complete, so you should be able to learn a lot, if that's what you're looking to do.
I like it. If I'm being honest, I can't really tell you how good it is, because I've never attended a different university to allow me to have some perspective. However, 95% of my professors have been really, really awesome. It took me a couple of years before I started to take advantage of having these great professors (by visiting office hours, getting to know them, emailing them, etc.), but once I did, there was a significant increase in my performance. The classes tend to be very difficult, so you really can't slack off at all, but you'll get as much as you give! The biggest advantage that RIT has over other schools is that it is career focused, as you'll be required to complete several paid internships/coops in order to graduate (graduation time is usually ~1 year longer than it would be at another school for that reason). I'm actually going on coop next semester. I got picked up as a full-time researcher, and I am beyond ecstatic to have gotten that position; I absolutely cannot wait to start. Also note that I am a computer science major, so I can't speak for non-computing majors. For example, RIT has top film and photography programs, but I know nothing of those worlds.
Someone voted you down for truth I guess.
And C# loses a lot of ground to Java in libraries and frameworks. What's your point?
go here: http://www.java-gaming.org/ 
No, because you then have to cast back out of Object. With var/auto, the compiler still knows what type the object is, you just type less. It's just an extended version of the diamond operator &lt;&gt; syntax.
Fast and nice CharSequence for-loop: for (char i : string) // &lt;- easy to implement ;p Current solutions: * String.toCharArray is slow * Classic for + String.charAt is verbose and error prone * CharSequence.chars() is slow(ish) and uses "int" type * StringCharacterIterator is (C) 1996
GPL 3... I'm afraid it's unsuitable for a lot of applications that way.
What's wrong with GPL3? Isn't that what most open source software uses?
Some does... but the GPLv2 and 3, and to a lesser extent the LGPL, place serious restrictions on what commercial applications the code can be practically applied to. Understanding OSS licensing is a *big deal* if you want to create software professionally, or even for casual distribution. Might be worth spending an hour or two sometime soon to [read up](http://www.smashingmagazine.com/2010/03/24/a-short-guide-to-open-source-and-similar-licenses/).
Ah, that would make sense then.
I can't imagine it's too hard to implement vars in Java. Each expression has a known type it resolves to. Since methods can't overload based on return type, `var result = myThing.foo();` is unambiguous.
 Object s = "Hello world"; System.out.println(s.length()); Leads to error: cannot find symbol System.out.println(s.length()); symbol: method length() location: variable s of type Object 1 error So no, not a substitute.
LOL, welcome to education vs industry. Not bashing profs at all. We had one guy come in and design some very complicated statistics algorithms. He knew his stuff but couldn't write performant, readable, tidy code if his life depended on it. Was fun to work with though and I learned a lot of stats.
This sort of question is better suited for /r/javahelp, see sidebar.
For parallel computing within the same JVM instance I'd recommend using the built in classes in java.util.concurrency. There's lots of good stuff in there including a Fork/Join framework. Java 8 introduces parallel streams/collections, which is something JVM scripting languages like Groovy and Scala have enjoyed forever. Basically it takes a regular List/Set/Collection and automatically divides work you give it into parallel workers. Parallel computing across JVM instances/network is a whole different concept and there are many solutions available depending on what you're trying to accomplish.
I see, so you really don't want to cast it back? Why? Lazyness? Sorry, but I'm definitely not a fan of that feature. I believe it encourage bad practices. Just create your own generic already.
&gt; http://java.sun.com/javase/downloads/index.jsp Directly listed below the download for JCreator The above page redirects to: http://www.oracle.com/technetwork/java/javase/downloads/index.html Download the **JDK** (listed with a big blue Download button on the right side of the center column.)
&gt; GPL2 Even GPL2 isn't safe, you probably mean LGPL2.
[Lombok](http://projectlombok.org) has at least [`val`](http://projectlombok.org/features/val.html). You sure sound a lot like some of the trolls that go for both /r/java and /r/csharp recently. Oracle has a very comfortable position with java. While the language has evolved very conservatively, they invested a lot of very clever engineering effort to make the JVM the best environment for running byte code available. While every developer and their cat will want more "modern" features (that is, things that stem from at least the '70s or younger), those features have little bearing on the actual work of many developers. As with lombok, those who feel it's to painful find clever little workarounds, and others will just ignore the siren song of possible language features and churn out code that does interesting things. TL;DR: Language features are irrelevant. What you code is where it's at.
Because it's no longer type-safe. Say at some point I change `Object s` to be a `LazyTextLookup` or some other baloney. Now the compiler can't tell me that `s.length()` doesn't make sense. `((String) s).length()` turns compile-time type errors into runtime errors, which is terrible... Why voluntarily throw away type info? Laziness? &gt; Just create your own generic already. wut
What about erasure?
https://tapestry.apache.org/typecoercer-service.html
Additional info around the general topic, since it's well placed here: The Oracle JRE installed by https://ninite.com/ supposedly does not have the Ask toolbar. You could also install the [JDK](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html). Its JRE does also not have the Ask toolbar. Additionally, it also does not have the browser plugin, which is the main reason that "people say" that Java is insecure. Finally, the JRE of the JDK will not nag you for updates, but whether that's a "bug or feature" depends on the proficiency/intention of the user. Personally, I'd never let the plugin on my harddisk. There was a time when I still had it. Some forum link lead me to a domain where you can supposedly play Minecraft for free. (I owned a license of Minecraft already at the time.) I wanted to check that out, and the moment I was there, *the install process began*, which I of course aborted, and I removed everything that had been installed. It would probably have been confined to some sandbox directory tree, but that is just the point where the various security problems of the plugin had come in: The possibility to break out of the sandbox. We all know that after a hundred fixes, no one can exclude that there won't eventually be more holes / fixes. So, my personal opinion is that the plugin should not be installed by anyone, if at all possible. (Company infrastructure sometimes requires it, though.) What are your thoughts on this? Am I too paranoid regarding the plugin?
&gt; ...turns compile-time type errors into runtime errors, which is terrible I believe those kind of error could propagate quite a bit *more* with the introduction of `var` and turn simple cast error in pure nightmare later. That being said, I can see how this could be useful for some rare occasion where you have no idea about what kind of object you deal with.
&gt; I believe those kind of error could propagate quite a bit more with the introduction of var and turn simple cast error in pure nightmare later. It can't. Type inference is a compiler feature, not a language keyword that disables type checking. The code compiles the same way whether you use `var s = "Foo";` or `String s = "foo";`. In particular `var s = "Foo"; s.run();` will cause a compiler error because `String` has no method named `run`. I get the impression you think a `var` keyword would behave like the `dynamic` keyword in C#, but it wouldn't. It *would* behave like the already existing implied types in Java8 lambdas. If you change the signature of a functional interface, all lambdas will automatically check against the new types, even though no types are written. `var` would do the same thing, but on local variables that you initialize when you declare them. Whatever type you initialized them to will be that variable's type. This is different from `Object s = whatever();` because the usage of `Object` throws away the type info. As another example `var s = "foo"; s = 3;` would not compile (where of course `Object s = "foo"; s = 3;` does).
Java side of this would just be a one-to-many relationship, when the user accesses URL return the many links to the browser along with JavaScript code to open each link in a new window (you can't explicitly target new tabs, it's up to the user's browser to determine how links are opened). Seeing as you've mentioned the networking packages though I'm now guessing you're on about an offline package which can be clicked, in which case your best bet would be to try to launch the links from the command line via ProcessBuilder. Being blunt though if you're having to ask such a general "how do I..." at this stage I think you've got a lot of learning to do in order to get this project off the ground. Plus this isn't really the right sub for this type of thing - something like /r/javahelp is there for specific questions, but this seems more suited to a general programming help for newcomers sub.
With all GPL you need to release the source, however the LGPL allows inclusion of libraries without releasing the source of the master project. If you accept a GPL library even in your maven, it means your entire project must be GPL or you are in violation of the license. As far as permissiveness goes, it's GPL then Apache and MIT licenses. 
It supports GPU computing, which is nice. (CUDA only) Your professor seems to favor unchecked exceptions, do you know his motivations behind that ? The license is an issue though, AFAIK you can't use a GPLv3 licensed library in your project unless it is also GPLv3.
Came across this http://www.dzone.com/links/r/introducing_docker_to_a_java_developer.html
i) Type aliases newtype UserId = String; newType WidgetId = String; UserId userId = "foo"; WidgetId widgetId = "bar; String userIdString = userId; // OK widgetId = userId; // Compile error ii) Case classes case class Address(String firstLine, String secondLine, String thirdLine="", String fourthLine="", String postcode); newtype Name = String; case class Person(Name name, Address address); Person person = Person(address = Address( firstLine="22 Acacia Avenue", secondLine="Sunderland", postcode="VB6 5UX"), name="Arthur Putey"); Person renamed = Person.copy(name="Agnes Yentob"); Note named parameters. Should also be immutable, with automatic equals, hashCode, toString. iii) Typed tuples (String, int) tuple = ("Foo", 12); newtype Point = (int, int); iv) Final by default for all fields, parameters and local variables. "var" or similar as a keyword for non-final values.
I recall a checkbox I set for my mother back in August.
For anyone wondering, since there is little explanation, from what I can see this forgoes using reflection in favour of dynamic bytecode generation and loading using ASM.
To be fair, using asm and bytecode generation instead of reflection is a tried and true way of doing it quickly. https://code.google.com/p/reflectasm/ I'm sure there are other similar projects. --Coder
I would like to try it too, I am just starting Java.
You can fully initialize an object without EAGER fetching. For many-to-one associations you can simply **join fetch** fetch in the owners SELECT. To avoid Cartesian Products you can at most join ONE AND ONLY ONE one-to-many children collection. If you want to fetch more one-to-many collections, you can use Hibernate.initialize(collection) utility. All in all, EAGER is a bad practice, because you can't override it at query-time.
If you have a handful of objects that always need hydration, why go through extra work with fetching?
I didn't know about ReflectASM, thanks! It seems ReflectASM is just a tiny bit slower then my toy; I expect it's because they do some safety checking I'm not doing. Benchmark (type) Mode Samples Score Error Units benchmarkIntegerExtraction DIRECT thrpt 5 335.554 ± 30.888 ops/us benchmarkIntegerExtraction REFLECTION thrpt 5 135.411 ± 4.369 ops/us benchmarkIntegerExtraction MAGIC thrpt 5 330.325 ± 19.023 ops/us benchmarkIntegerExtraction UNSAFE thrpt 5 300.564 ± 7.432 ops/us benchmarkIntegerExtraction REFLACTASM thrpt 5 282.560 ± 12.637 ops/us benchmarkQueryLikeWorkload DIRECT thrpt 5 863.447 ± 151.511 ops/s benchmarkQueryLikeWorkload REFLECTION thrpt 5 427.084 ± 76.780 ops/s benchmarkQueryLikeWorkload MAGIC thrpt 5 856.360 ± 115.519 ops/s benchmarkQueryLikeWorkload UNSAFE thrpt 5 731.284 ± 124.358 ops/s benchmarkQueryLikeWorkload REFLACTASM thrpt 5 799.522 ± 102.515 ops/s benchmarkStringExtraction DIRECT thrpt 5 332.067 ± 21.745 ops/us benchmarkStringExtraction REFLECTION thrpt 5 135.424 ± 9.603 ops/us benchmarkStringExtraction MAGIC thrpt 5 337.560 ± 20.807 ops/us benchmarkStringExtraction UNSAFE thrpt 5 292.441 ± 42.887 ops/us benchmarkStringExtraction REFLACTASM thrpt 5 263.038 ± 21.555 ops/us The big difference is my project can access private fields where ReflectASM can access only public/protected/default fields. 
Oh wow, this is the kind of thing I want to see here. Thanks for the link, OP!
You are right, it does rely on bytecode generation. I also (ab-)use MagicAccessorImpl - that's an internal class in HotSpot and all its subclasses are free to access private fields/methods of any other class. I believe that's a unique feature. It's non-portable &amp; dangerous, but that's what makes it fun!
Sorry; am I incorrectly referring to the act of fully populating each child reference (and grandchildren, etc.) of a Hibernate entity as "hydration"?
Hmm, I didn't look at it closely how you implemented accessing private fields with asm (don't have time for it at the moment). I wonder if reflectasm didn't do it as a design decision, or because they were unable to implement it. Maybe you should contact reflectasm and offer to help them add private field accessors if they want it? This could be interesting.
I searched the Hibernate code, and the org.hibernate.persister.entity.AbstractEntityPersister uses hydrate when binding parameters to PreparedStatements and dehydrate when extracting data from a ResultSet. Now, back to your question. If I need a handful of objects I need to fetch them form the database. You can explicitly instruct which ones to be fetched, or rely on a default fetch plan (a.k.a EAGER). The EAGER has all the disadvantages I presented, so yes, you shouldn't use it. There is no extra work with fetching. The only extra work is when you don't actually need those and Hibernate fetches them anyway, because you mapped them a EAGER.
What is the use case for choosing nashorn over node.js? Does it provide better hooks between java and javascript?
There needs to be a distinction between the JVM and the Java Programming Language when we discuss things like this. I bring this up because the current top comment, from /u/codepoetics, lists some things - all but the first one - that are achievable in alternative JVM languages like Scala and Kotlin, but are not supported in the Java Programming Language. Likewise, type inference is supported in alternative JVM languages but not Java. (I'm not even sure what a C# Raw String is, so I can't comment there) If the Java Programming Language doesn't fit how you want to work best, then you aren't tied to it. There are alternatives that you can use - a growing list of them - and you get the advantage that you get to interoperate with other JVM libraries if you want to. Kotlin in particular is well worth a look as a language that fills in what are considered to be some gaps in the Java Programming Language, but isn't so far away that it's hard to get to grips with...
Great library for solving heuristic search problems. Very useful for both academia and research. Thanks for sharing
Wasn't much of a puzzle.
How long did it take you to solve it?
absolutely. most jvm scripting languages allow you to use a java object almost as if it had been defined in that language.
In my opinion, if your code uses reflection so often that execution speed becomes a real problem, you’re doing something wrong.
&gt; How long did it take you to solve it? Maybe 20-30 minutes? I spent some time looking into replacing the calculateSecret() with a functional equivalent before I eventually decided to just make the simple fixes and see how long it took to run (pretty fast, since the input numbers were small).
It applies to any ORM. Both theoretically and practically it makes sense to only select what you're business case requires. A default fetch plan is not going to suit all your business querying use cases, or is it?
Fuck tapestry with a burning pinecone. Component frameworks like this are the product of architect astronauts who are completely unable to simplify things.
What about it? Type inference occurs before erasure.
You can read the entire article on omnifaces-fans dot blogspot dot com/2014/12/use-omnifaces-to-buffer-facesservlet.html
What do you dislike about this specifically?
He talked about having plans to upgrade his GPU programming to support OpenCL, so that could happen at some point. As for his exception methodology, I do not know his rationale; I'm sure he'd tell you if you were curious enough to email him though. 
Depends what you want to do. If mobile is your thing, then Android apps are an okay way to get more proficient. The downside with Android is that you have to do things to work around Dalvik short comings that would be considered poor design for server Java. IMHO, Java the language spec is pretty easy once you get past the generic gotchas and have some experience with the new lambdas. What many companies want when they say proficient in Java is experience in the big frameworks. Pick a DI framework and implement an app. Pick a testing framework and test said app. Pick a MVC/Web Service framework and implement and test. All the above should be built using a standard build environment. You can probably see where I'm going at this point. Additionally, implementing the above will naturally hone your general Java the language skills.
It's for swing developers who never wanted to learn about the web, it's a fucking abomination but I've made good money migrating applications to spring from tapestry so it has that going for it, which is nice
For everyday use, avoid it. For when you have to use it, spin up a VM with it installed
The article hints at the fact that why Oracle does this is a mystery...It's no mystery, it's a revenue source. Sure it's shady and preys upon the unaware, but hey, it's money.
Android isn't exactly Java (read another [post](http://www.reddit.com/r/java/comments/2nc496/i_need_an_idea_for_a_test_project/cmdoub8) I made about it). You'd get some Java practice writing Android apps but you wouldn't be ready to write Java apps for most organizations. You want to look into Java EE and Spring.
I have heard about doing "dot" for e-mail addresses. Why hide the URL?
Maybe to beat an overzealous anti-spam engine at Reddit? Nobody noticed that since a few months there are no blolgspot or Wordpress links anymore in /r/Java? A shame, since some very good bloggers use those platforms. The link at least looks to be legitimate, so no reason for it to be blocked. 
CacheKey should be eliminated entirely. Cache size is too small. Accumulator is unsynchronized. As an aside, the cache API itself has no provision for simultaneous cache misses across multiple threads. There should be a method something like: get(Object key, Supplier valueSupplier) Where the *valueSupplier* generates the *value* in case of a cache miss, and causes further get() calls on the same key to block until it is finished. That way, if multiple threads request the same key and result in a cache miss, only one thread will expend resources generating the value, the other threads will just block until it's done (but threads requesting a *different* key will not block). I think this happens in the initial *Source.readData()* calls. It does require more care in that a bad *valueSupplier* implementation has the potential to create deadlocks or block other requests indefinitely.
Don't downvote the guy. He has a valid point. I agree 100% that reflection should be used sparingly and with great care. And if you are relying on reflection, you absolutely need to stop and think if you are really doing things the right way. But then there are cases- frameworks, libraries, etc. where it is necessary. And then there are cases when you need it to go as fast as possible, as fast as native access if possible- for example some configuration driven processing of high volume data.
Looks like the trick is to let the generated field extractor class implement [MagicAccessorImpl](http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/sun/reflect/MagicAccessorImpl.java). That will "magically" instruct the JVM to allow other classes to access private members. Of course, this is not very portable - it doesn't seem to work on Android for instance.
JavaEE and Spring are pretty common, but I know several places I have worked would look at Spring experience (by itself) as a reason NOT to hire... Learning how to bootstrap your own environment for microservices is also a common requirement these days, so learning Jetty or Undertow might be a good idea.
Check /r/ProgrammingPrompts for inspiration. If you need help with your code, you can always resort to /r/Javahelp. Links to tutorials can be found in the /r/Javahelp wiki.
Is this more of an exercise rather than to be actually used in the field? I just got done a HPC course that worked directly with pthreads, MPI, and openMP. We examined the differences and similarities of each and calculated pi on BA supercomputers. I don't even think TACC has java installed..... checking. ok yeah it did have java installed. Can you post your last / most difficult assignment so we can try it out? 
Our last assignment had nothing to do with this library though. Another aspect of parallel computing is networking/communication/whatever, so our last project was to write a server and GUI client for a multi-session multi-player network game. This library has nothing to do with networking. That said, it definitely has a stronger focus on education than field use, from what I've seen and what people in this thread have said. Inside the package, there are a bunch of example uses of this package, you can look at those if you like. Off the top of my head, there's an example that uses the library to calculate pi using parallel computing, one that models zombie movements, and so on.
The entire semester? That's pretty intense. [Here's](http://www.cs.rit.edu/~ark/251/module05/java2html.php?file=4) the code for that program using PJ2. And [here's](http://www.cs.rit.edu/~ark/bcbd/ch04.pdf) the chapter in his textbook on it. His calculated efficiency is 0.988 (from the speedup), so it's a pretty decent implementation.
o cool , you did Monte Carlo too. 
"shouldn't use it because my reasons" is not good enough. If the strategy calls for it, eager loading is fine. If I need a fully formed object with children and grandchilden (and however deep it goes) I am just going to use eager loading. There's no reason not to.
I'm a moderator over at /r/javaserverfaces. The link was posted there too and (as far as I can see) automatically removed. I'm not sure why, Reddit is sometimes magic to the moderators as well. I double checked and did some research for the domain. I doesn't have any prior history of spam and its content is genuine. I have no idea what triggered Reddit here, but I manually approved the link here: http://reddit.com/r/JavaServerFaces/comments/2pdd29/use_omnifaces_to_buffer_facesservlet_output 
Professor Kaminsky is the best! If I ever get the chance to go back in time, I'm going straight back to day one of his crypto class. Does he still bring his pet rock to class?
Maybe the ORM would have worked better if there wasn't a concept of LAZY/EAGER and you'd always have to specify the depth of the fetch graph at runtime. The mechanisms to do so would have to be a little better than what we have now, but if there never was LAZY/EAGER I guess they would have been. The entity graphs in JPA 2.1 are a great step, but more is needed and they are so new that it will take years for Hibernate to iron all bugs out. Something like entity graphs should have been there from day one. 
Haha, no, he doesn't bring his pet rock to class anymore. He still does all kinds of hilarious things that you wouldn't expect from him if you had just met him though. For example, on the second to last day of class, he discovered that some fashion agency had picked the color shirt he was wearing that day as the "in color of the season" or whatever, so he spent a few minutes of class showing off how stylish he was by going through that agency's website with us on the projector.
*benefit
Wrapping an array is always more performant
IMHO, it depends. When you quickly need to go to element X with X being an ordered number it's a winner for sure. If you need to go to element with key "pete" a regular hash map can be much better, unless the number of elements is small (then iterating over an array is faster). This article shows yet another way. Pretty much all datastructures have specific pros and cons. Your job is to weigh which of those are most important for you ;)
True, can't argue with that ;) Still, there's wishing (and just wishing, since nothing we can do about it now) that of all aspects of ORMs that were discovered later, this particular one was discovered somewhat earlier.
CacheKey is an issue but nowhere close to the biggest bottleneck of this program.
&gt; Your professor seems to favor unchecked exceptions, do you know his motivations behind that ? What would the motivation behind using *checked* exceptions be? 
The title for this is ***REALLY*** misleading. He does not actually discuss Servlet 4.0 at all, other than to say he is working on it. This video is basically 4 mins of Oracle PR for the JCP. So in addition to this ***NOT*** being informational about Servlet 4.0, it makes me feel swindled for having watched it. In case anyone is interested, I did some googling to see what Servlet 4 was about and I found some links with relevant information: http://java.dzone.com/articles/ed-burns-servlet-4http-2 https://blogs.oracle.com/theaquarium/entry/servlet_4_0
5 months later my 100 just got shipped out! Yay!
Biding the data with its related and corresponding methods
&gt; If you accept a GPL library even in your maven, it means your entire project must be GPL or you are in violation of the license. I was under the impression that that's true if you release it to end users for all GPL, and if you run it on a server in GPL3 that they can access the service authored in it. But for example, if your unit tests rely on it, and it's not a service that others use then you don't have to release the source. But I agree, they are all not good licences to use if you want your work to be used most broadly.
Even if your customers don't use it you are obligated to release, though it would be hard to prove gpl violation on in house tools
Use 'Preview Diff' from the Changes tab. It is not editable. 
The game is pretty good though
Quoting /u/johnjannotti from the other discussion: &gt;... Double implements Number. But if you put 2.2 and 2.4 into these "Maps", they will both be put in the slot for 2. This doesn't sound like a very reasonable solution at all. :(
Eager is fine for tiny schemas with a handful of tables; that's my argument, that the cry of "Eager is BAD for all cases" is not necessarily true.
A good approach is suitable for any type of schemas. What if you have a handful of tables with hundreds of millions of entries (sensor data). Will you use EAGER to-many associations? I doubt it. Or Maybe some root entity has 5 many-to-one associations, each having other 5 many-to-one and again other 5 many-to-one. Fetching the root will generate 5*5*5 = 125 additional selects or 125 joins. And the worst thing is that you cannot do anything about it. You will always get those selects and joins even if you don't need them. So EAGER fetching is not suitable for any type of application, small or large.
I still like Bruce Eckel's Thinking in Java for a real deep dive into Java.
If you use Netbeans, there is a new plugin which allows complex tiling of windows https://blogs.oracle.com/geertjan/entry/tiling_of_editor_documents_in
That was my first Java book. It's good to start with but afterwards you need more than the language syntax and basic API usage.
And of course: [Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions](http://www.amazon.com/dp/0321200683/ref=as_sl_pd_tf_lc)
Write code for something you're interested in. Write some sort of game tracker or a notifier for game updates or whatever. That will increase your interest level and the learning of the language becomes a joy not a hassle.
I'm just asking a question, everybody calm down. I'm interested in what arguments a CS professor would have on this matter.
It's just weird reddit has something against it for no apparent reason. It keeps removing posts that contain that link, even though it's just a normal link! :( Even weirder, it even removes comments that link to other sub reddits that contain that link :X The link appears in /r/JavaServerFaces/ after it was manually approved by a mod there, but if I link to that link, this comment is automatically removed.
Most of them can be read by beginners too.
Servlets read the explicit data sent by the clients (browsers). This includes an HTML form on a Web page or it could also come from an applet or a custom HTTP client program.
I think you're struggling to find examples to make your point, whereas my point was very simple and easy to follow. I'm done with this thread; thanks for your input.
Thank you too. You know better if it suits for you needs. If you enjoyed this article, you should know that I'm working on a free on-line [Hibernate master class](http://vladmihalcea.com/tutorials/hibernate/) tutorial series. Check it out if you are interested.
My own Amazon tech book wishlist shares a lot of those on Petri's list, but I'd have to include [Code Complete](http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670) as one of the best books on software development that I've read. Petri has written some of the most helpful articles on Spring tech that I've read online. You have some really awesome in-depth Hibernate articles, Vlad. Thanks for your hard work!
I just gotta ask … 10? Really? Where in my weeks of 16 hour days am I supposed to find time to read 10 books?
TIL that it's still alive.
You have 0 free time and can't read books yet you look for book suggestions?
I would argue against using Java as a build language. Something like Maven makes sense because it uses XML which is declarative instead of imperative. Instead of listing the actions the build should take, you're telling the build system what you want done and it does the rest.
Best bet is Gradle which is written in Groovy. Groovy is essentially a superset of Java.
I would second this suggestion.
[Java Performance: The Definitive Guide](http://www.amazon.com/Java-Performance-Definitive-Scott-Oaks/dp/1449358454/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1418740471&amp;sr=1-1&amp;keywords=java+performance+the+definitive+guide) 
I've taken a look at Gradle and specifying builds definitely looks nicer than in Maven or Ant (my builds are pretty simple). I was wondering if something similar existed for Java, partly just to see how it might look and work.
Since Java requires compilation you'd need a build tool for your build tool. Honestly, in my limited experience Maven is still better than Gradle. I don't know if it's just the quality of the implementation, but I find declarative builds to be cleaner than coded ones. It's already dead simple to write Maven plugins (in Java). If you really, really wanted you could declare a Maven POM with a single custom plugin and do everything in that Java plugin.
**Java Generics and Collections** http://www.amazon.com/Java-Generics-Collections-Maurice-Naftalin/dp/0596527756
Maven's not bad, but in my experience the learning curve is steeper than Gradle and its tougher to extend if your needs are not handled by the existing core or plugins. 
There is already a colored bar in your source code pane on the left gutter that shows code that has been changed already. Are you using Ultimate or Community version?
Every time I've tried a build system for a language where you define the build in that language I've been hugely underwhelmed. If nothing else, it's a huge barrier to entry when you need to learn the language before you can build anything in the language...
i'm not asking for a statue. but this is the reality of life and it has to be managed. sometimes that happens. and if it doesn't happen, the rest of life happens. got a wife or girlfriend? she's only gonna be so patient about something like that. got kids? they're gonna be less patient. got aging parents? what about taking care of your health - ya know, exercise to counter this sedentary job we do. all that crossed my mind when i read the blithe statement that here are 10 books every java developer should read. as far as "experts" are concerned … there are no experts. there are just people who make smaller mistakes than you and recover from them better. as far as being "hated" by management. did you pay attention to who got laid off during the Great Recession? who do you think is among those who get whacked first? yep, the "hated" 
I wrote https://github.com/adamd/jant for Java 8 as an example.
If you're open to other JVM languages there's also SBT which has a rather concise DSL for expressing a build using immutable data structures and higher order functions.
Scar is a java based build system
Apart from concurrency practice, Java generics and Collections, this is the book I missed most. 
"Who's laughing now?" said Scala while cackling softly.
Sometimes you want an imperative build. Sometimes you don't. Depends on what you're doing. Don't get me wrong, I absolutely love Maven. I tolerate gradle. But at the end of the way, I really prefer the combination of Makefiles and shell scripts. Fuck portability. 
That guys 'plugins' are always just proof of concepts and always break on updates or never work unless your setup and plugin structure is the same as his. Since he's been doing it for so long, I suspect he uses a highly modified version of netbeans and has no clue that his shit doesn't work correctly for the rest of the masses. You have to know how to create plugins to use his stuff because it breaks so easily. 
Thanks for the suggestion, will check it out.
This is a solution i am aware of: https://github.com/ihilt/JavaSocketBridge It uses an applet on the client side and javascript functions to communicate with that socket.
What's in the Object? There is the possibility to extend an object to make it Serializable, or perhaps write a wrapper that holds it. You could manually deconstruct the data and recreate the object. Maybe convert to and from JSON or plain text file, etc...
That's absolutely true! It's a dirty trick and dirty tricks aren't for free. I'd never recommend it for a production usage without a rock-solid fall-back. 
Because programming in XML is fun! Sorry, Maven is an incomplete flawed tool that only works well in certain limited circumstances. I have no issues with Maven for a basic library or simple project, but it is seriously overprescribed.
Your "imperative" maven XML files turn into XML programming. Maven sucks for anything besides simple library files and projects. It is a dead-end for build systems that took five years for the java ecosystem to recover from.
Gradle IS a declarative build tool. 
Ant is extendable with Java classes.
Huh ? maven is not imperative. it's declarative. http://en.wikipedia.org/wiki/Imperative_programming Yes, XML is programming; I didn't say it wasn't. And yes Maven, sadly, depends on XML. It's verbose, but honestly I spent far less than 1% of my dev time editing pom.xml. it's not perfect, but it's good enough. They say that the perfect is the enemy of the good enough. But it turns out that good enough often wins because people keep having small revolutions until good enough shows up, and then they concentrate on other aspects of their lives which are not yet good enough. Make and Ant ( and even Jam ) were tossed aside when maven became good enough. Ivy was an attempt to back port maven's best feature (dependency management ) to Ant, but Ant still suffered from lack of convention. And Gradle suffers from being TOO extensible leading to inner platform effects and, again, lack of convention. No, people are not disciplined enough. If you want to rail against something, go check this project ( honestly, this just makes my head hurt ): http://commons.apache.org/proper/commons-jelly/ 
I've deleted all the lessons and have just posted a new post on static. You know how you said you might be able to help me out? I was just wondering if you could check the post just to see if all the information is correct. To my understanding, it I think it is correct, but I know you gurus always know a lot more and can pick out problems in almost anything, lol. Here is the link: http://learnbasicjava.com/2014/12/understanding-static-java/ I'm also not sure what it looks like presentation-wise... do you think it looks OK? I'm not sure, just want to know what you think. Thanks a lot, I greatly appreciate this if you help me out :D
This is what I am getting org.apache.commons.lang3.SerializationException: java.io.NotSerializableException: com.sun.org.apache.xalan.internal.xsltc.runtime.Hashtable
Both Gradle and Maven suffer from 'obscuration sickness'. Good look trying to find out what your build.gradle file does 6 months later. Unless you are constantly subjected to their built-in conventions and the magic behind the scenes, you will have a hard time. 
there is already a major project called spark... they should call themselves jetty-spark 
That was the outcome of a regular blog done by a Sun employee. Swing applications can look great, the problem was the default L&amp;F and most developers not willing to put the effort how to customise it. Also doing everything on the UI thread. 
Why the mellow harshing?
are you including serialVersionUID on your objects. You could try to serialize to json, protobuf, etc
Really? I have used Maven to implement really complex builds with no trouble at all.
Maven isn't imperative and isn't XML programming. Ant is XML programming, because you are specifically stating the steps you want done. Ant build scripts don't have to be this way, but because Ant provides tasks which are imperative in nature, you can quite easily end up doing XML programming. In Maven, you are just specifying the plugins and corresponding configuration and let Maven take care of the rest. That isn't XML programming, that is XML configuration.
Check the /r/Javahelp wiki tutorial page
What are you trying to accomplish? What are you trying to serialize? Are you sure it's a good idea to serialize what you are trying to serialize?
Pick a good book and make your way. I suggest Introduction to Java Programming by Y. Daniel Liang, it's a nice catch-all book that teaches from the very basics up to algorithm design, database programming, web programming and graphical user interfaces.
Convention over configuration is a good thing. Forcing people to go out of their way to make things a special snowflake ensures people put a little more thought into why they need to break consistency.
because i find the concept of 10 books you MUST READ since you're a java developer ridiculous. i have yet to meet anyone in IT who does not work long hours and have responsibilities outside of work the will preclude reading damn near anything. 
Not web-sockets?
I think this actually precedes apache spark
Could you please elaborate as I am new to this topic? 
Sure, web-sockets is a protocol for full-duplex communication over a TCP connection implemented to provide the functionality you seem to be requesting, a socket between a java application and a javascript application (presumably running in a browser). http://en.wikipedia.org/wiki/WebSocket http://www.oracle.com/technetwork/articles/java/jsr356-1937161.html 
Very cool (Nate's Scar was the only other example I was able to find til this point). What do mean by "hashing resources", does it refer to generating checksums or is it something else?
My only issue is it keeps switching back from an int to a static type 
Didn't realize this is a repost from 8 months ago until after I posted [here](http://www.reddit.com/r/java/duplicates/2pikza/isomorphic_javascript_apps_using_reactjs_nashorn/), but given that Isomorphic JavaScript is becoming such a buzzword lately, thought it'd be worthy of a relook.
That's true. It's the only *contract* of `Iterable`, which doesn't mean that it's the only *use-case* of `Iterable`. Note that there are two new `default` method in Java 8's [`Iterable`](http://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html) type: `forEach()` and `spliterator()`. Both new methods indicate that new use-cases have been considered viable, while the contract remains unchanged.
Hm. I suppose I could. I'll have to clean out some proprietary bits first, since I use it to compile some really, really complex builds. I'll let you know when it's on github.
The only *contract* of a screwdriver is to turn screws, which doesn't mean that it's the only *use-case* of a screwdriver. Brian Goetz pointed out that Iterable wasn't really designed for the purposes for which Stream is meant for. But, it seems like the Java guys really tried to make the screwdriver work like a hammer, figured it really isn't possible, and at least provided a way to harden the handle (by providing the ability to turn an iterable into a stream). So, if you really want to use a screwdriver as a hammer, if you have the will there is a way, and at least you can do so without destroying the screwdriver.
&gt; if your needs are not handled by the existing core or plugins. I hear this a lot. What is it that your build does that is not handled by Maven?
to what?.. varargs is just syntactic sugar for passing an array of values. A simple array, with length equivalent to the number of arguments passed. How would access and sum the elements of an array? It's exactly the same.
APB - Another Project Builder https://github.com/emiliolg/apb 
http://docs.oracle.com/javase/specs/jls/se8/html/index.html http://docs.oracle.com/javase/specs/jvms/se8/html/index.html
Look like an aggregation association and thus, it's a dependency. Thought, here's a relevant question on [stack overflow](http://stackoverflow.com/questions/1644273/what-is-the-difference-between-aggregation-composition-and-dependency).
There was Gosling for awhile, but I don't have any links handy. 
What do you mean it's not an acronym? I though all programming languages were capitalized, like BASIC, FORTRAN, and C.
Have a look at http://xstream.codehaus.org/ which dumps/reads from xml/json. XMLEncoder should work for you too.
Dune, by Frank Herbert.
/r/javahelp is already there....It does not seem to matter
I know. I want to be less polite about it.
Just down vote them, and/or tell them to go to r/javahelp
Nope. **FO**rmula **TRAN**slator. **B**eginners' **A**ll-purpose **S**ymbolic **I**nstruction **C**ode. C is just called that because it was it was made by the same guys that made B, which was called that because it was a stripped down version of **B**asic **C**ombined **P**rogramming **L**anguage. Java is no acronym. It should not be all-caps. Never put it in all caps. It's a proper noun, so just the J should be capitalized. Cargo cults are bad, mmkay? ETA: I'm flying high on codeine cough syrup and Houston hip hop right now. My sarcasm detectors are offline while I try to keep my lungs in place.
Good, keep it a buzzword and gtfo. 
Lol classic /r/java response. Like it or not JavaScript isn't going anywhere, and personally, I am looking forward to leveraging Java's frameworks while driving better HTML content through the ever growing JavaScript community. I'm sure I'm not alone in this sentiment.
Ever post that to /r/coolgithubprojects/?
Can anyone, for a million Zimbabwe bucks, tell us the name chosen before James chose Java?
So three posts in the past day have shown up in this sub that should be in /r/javahelp IMHO: 1. http://redd.it/2phm8g 2. http://redd.it/2pi22i 3. http://redd.it/2pifmj (the one you mentioned) We're smart kids, we got to come up with a way to direct these type of posts to /r/javahelp and leave /r/java for News, Technical discussions, research papers and assorted things of interest related to the Java programming language 
What use case do you want to support with this? Surely you are aware of the diff markup in the left-side gutter, which you can click on to show the changes in the local copy? Is that not good enough? I also often right click and 'compare with same repository version' if i need to see the original file blown up, but im sure youre already aware of that 
Oak.
I half expected the explanation why it changed, too. (Now I don't know the explanation without looking it up).
Yes click on the colored areas to show the changes (the old content) as popups.
I'm pretty sure that is part of community edition as well, isn't it?
Don't be, that would just be recreating Usenet. Simply not responding uses the least amount of your time and is very discouraging.
The solution would be in a more radical use of style sheets. Many subreddits do it, but /r/java only has a logo, nothing else.
Encapsulation, ELI5: Don't touch my private stuff. The more you share your stuff, the more other people can mess with your stuff, the less control you have over your stuff and the more others can change things up on you. Which means you can't be sure how much the effect of a change here will change things there. Encapsulation is a technique of keeping your stuff to yourself. The most basic way is to mark your private stuff with the "private" keyword. The other way is to follow rules like the [Law of Demeter](http://en.wikipedia.org/wiki/Law_of_Demeter) to control how much of your private stuff leaks out.
It's in the works, I've already mentioned it to /u/desrtfx. IMO The links should be more prominent, with the "Seek Help Here" message distinctly visible.
That is pretty much my point: if you’re doing high-speed, high-volume data processing, Java with reflection most probably is not the right tool.
I'm currently watching the videos and doing the assignments in the free Stanford CS106a course. 
This post is better posted in /r/Javahelp because /r/Java is for: &gt;**News, Technical discussions, research papers and assorted things of interest related to the Java programming language** as is clearly stated in the **sidebar** where you would also find: &gt;**Please seek help with Java programming in /r/Javahelp!** **Also:** be sure to read the [Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/posting_guides) on /r/Javahelp before you post. **But note:** /r/Javahelp will **not** do your homework for you. You have to show that **you** have spent some effort (other than producing a post). What you are asking is easy enough that you should be able to solve it yourself.
First read Effective Java and Effective Unit Testing, then Design Patterns and the rest care be read in any order you like.
TBH I was already looking into a way of configuring Automoderator to trigger an action as soon as anybody calls for **help**, but so far I coudn't come up with something really useful. The problem is that I can't just look for the keyword **help** - that's not enough.
With "radical", I rather thought about background text in the comment box (while not having focus) and e.g. effects like in r/debatereligion when you are about to vote on a post or comment - [example](http://www.reddit.com/r/DebateReligion/comments/2pixw3/is_god_a_person/).
I wonder what percent of this sub is someone who hasn't tried google working on a CSC 101 assignment. i.e. "I need help sorting an array"
`help();` ;)
Take a look at Kryo, its much faster than Java native serialization [https://github.com/EsotericSoftware/kryo#quickstart](https://github.com/EsotericSoftware/kryo#quickstart). Depending on your class/object you might need to write custom Serializer tho.
A very common pattern in Java that violates encapsulations is: public class MyClass { private SomeMutableClass mutable; public void setMutable(SomeMutableClass mutable) { this.mutable = mutable; } public SomeMutableClass getMutable() { return this.mutable; } // ... } Here *mutable* is a part of your private state that should be encapsulated by the class, but the getter and setter let the reference escape and allows anyone to do anything they want directly with your internal state.
If you could let me know too that would be great. I would be interested to take a look.
Absolutely.
I like the new style.
&gt; extensible ONLY via plugins I'm not that sure. I mean, you can use ANTRun from maven, and write your ant tasks in javascript. I've done it, it works. I'm not proud of it.
Responsibility. This here be my responsibility. How I do it is none of your business. If you need soemthing from me, call the office (the public API).
Well I'm gonna be eating popcorn and reading that sub all day.
The whole debate, whether in that subreddit or in other places (e.g. Atheist-Experience) gets old eventually, because the gist is: Neither side can provide evidence for their view or build a solid logical argument, but the agnostic variant has rationality on their side. And every discussion that goes far enough ultimately ends there. Atheist Experience is at least entertaining in that the guys on the phone, if they are believers, are sometimes quite entertaining (in the "insane babbling street preacher" kinda way).
How much can you configure Automoderator? If it allows you to do some decently complex scripts, we could download a dataset of submissions from /r/java, /r/domyhomework and /r/javahelp and train a bayesian classifier (using /r/java as "normal" submissions and the rest as homework submissions) to recognize homework requests. Then we could just upload the probability tables so that the bot can access them and classify each new submission (classification is very cheap, it's just looking up values and summing log probabilities). Or am I overthinking this?
Nice
Check out `TreeMap`, which implements `NavigableMap` since Java 1.6. I'd say the darn screwdriver just turned into a Swiss Army Map. Brian Goetz didn't say what you just said. He said something quite different. He actually embraced the fact that this particular screwdriver looks like a hammer, but that kind of change is simply too dangerous in this particular case, not in general.
At the current speed the web is developing, Q3 2016 seems rather slow. My concern is that Java EE will be pretty irrelevant by that time as opposed to something like Spring. Don't get me wrong, I use and like Java EE, but we shouldn't have to wait for new or improved features that long. Having committees to make sure a spec isn't cluttered is a good thing, but you always have to watch out for too much bureaucracy which slows the process down to a halt.
It's finals week.
&gt; Or am I overthinking this? Nope... Spot on!!! Engineering approved "solution".
What was the question?
&gt; Check out TreeMap, which implements NavigableMap since Java 1.6. Read the [API](https://docs.oracle.com/javase/7/docs/api/java/util/NavigableMap.html) for NavigableMap. There's nothing in the documentation which states it is used for a specific implementation (ie, enhanced for-loop). It's a straightforward extension API of SortedMap not specific to any use case. NavigableMap was not designed specifically for TreeMap. Unlike Iterable, which states it was designed for the enhanced for loop. &gt; He actually embraced the fact that this particular screwdriver looks &gt; like a hammer, but that kind of change is simply too dangerous in this &gt; particular case, not in general. That's exactly what I said. It is dangerous in general to use a screwdriver like a hammer, even though in certain cases it can be used like one. And as I said, the Java guys considered that use case and provided the screwdriver hardening tools, so if you have the will, there is a way. 
Just pointing out that students are finishing up homework, projects, final exams this week, hence the natural increase in people asking for help, especially those that waited too long as usual. 
Yes, the discussion is trying to get them to use /r/javahelp and not /r/java.
Explicit Get/set accessors are a pretty shit example of encapsulation. Since they generally lead to scattering behavior from data. 
This post is better posted in /r/Javahelp because /r/Java is for: &gt;**News, Technical discussions, research papers and assorted things of interest related to the Java programming language** as is clearly stated in the **sidebar** where you would also find: &gt;**Please seek help with Java programming in /r/Javahelp!** **Also:** be sure to read the [Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/posting_guides) on /r/Javahelp before you post. How much bigger and redder do we need to make this info in the **sidebar**?
Not responding would be the best, but for some reason there's always someone (a few even) who wants to show of or so, and answers the question anyway. THAT is what keeps those questions coming. IMHO, people answering those questions are more "wrong" (if you want to call it that) than the ones asking them at the wrong place.
Binaries for DCEVM are available here: https://dcevm.github.io
You are right, but I heard the same arguments for decades on Usenet. People scolding people on Usenet did not stop that problem. All it did was make Usenet a nasty place to ask a question.
To save anyone the trouble of clicking on a link, here's the site's appalling introduction to Java: &gt; Java is a high-level, third generation programming language, like C, FORTRAN, &gt; Smalltalk, Perl, and many others. You can use Java to write computer applications that play &gt; games, store data or do any of the thousands of other things computer software can do. &gt; Compared to other programming languages, Java is most similar to C. However although Java &gt; shares much of C’s syntax, it is not C. Knowing how to program in C or, better yet, C++, will &gt; certainly help you to learn Java more quickly, but you don’t need to know C to learn Java. A Java &gt; compiler won’t compile C code, and most large C programs need to be changed substantially &gt; before they can become Java programs. What’s most special about Java in relation to other &gt; programming languages is that it lets you write special programs called applets that can be &gt; downloaded from the Internet and played safely within a web browser. Java language is called as &gt; an Object-Oriented Programming language and before begining for Java, we have to learn the concept of OOPs(Object-Oriented Programming). It reads as if a five year old wrote it, but is outdated enough that the five year old would now be going through puberty.
This is a sad question to be asking near finals. If you just took a semester of classes, and still cant create a method to return a sum of a few integers, programming is probably not a good path for you. ("You" referring to the guy asking the question)
Glabel is a class from a non standard library. Specifically the acm graphics library.
Is this beta? Would this mean that I no longer need to maintain my specialised classloaders in my project and could simply instruct the VM to reload a class? What happens to already existing instances? 
Anything that starts ELI5 should be in its own category too.
I had an experience about a year ago, but just as an academic tool (for teaching). It is a good library, it's just like swing but for console use. For a small project it is great, but I don't recommend it for a bigger project. 
You win. And I bet, you always win ;-)
You win some, you lose some, and if you're lucky, you get some.
Well, little one, say you want to send a letter to grandma. You walk to the mailbox and drop off the letter. Do you know/care if the letter goes by van, train, car, runner, pony, airplane, ship, canoe, or bicycle? Will you know? Nope. All those hidden details aren't visible to you. You only care that you placed a letter in a prescribed place, and then the result happens. _Encapsulation_ is the name for hiding all those mucky details that happen in the process of doing something that don't need to be seen. You don't care what combination of transportation was used, as long as the desired effect (delivery) in reasonable time happens. The mailboxes on either end are an example of an _interface_. The _interface_ is a simple, basic understandable contract of use (you place stamped mail with address in box, it gets delivered). The post office _implements_ the process of actually delivering the mail, while _encapsulating_ / hiding the dirty details that occur along the way. Notice that you could switch the implementation and say, use FEDEX to mail the letter (a bit more pricey). You drop the letter in a different mailbox, and it gets delivered, with a different implementation (different vans, planes, people, etc). So the interface - implementation abstraction is aided by the encapsulation of the process, so that implementations can be switched without major impacts to the users of the mail services. 
&gt; Spring Web Apps (MVC, WebSocket) Java EE has JSF now with a great ecosystem of (open source) projects supporting it, like PrimeFaces, OmniFaces and many more. &gt;Deeper REST support JAX-RS is pretty slick &gt;Ruby like productivity for Java I'm not sure what that is supposed to mean really. Do you really mean Ruby the language or RoR? Last time I looked RoR wasn't doing that great. &gt;Spring Security Basically the only thing on the list that really makes sense, even though I do hear people complaining that Spring Security is complex and Shiro is much preferred. But indeed, the absence of a COHERENT security framework in Java is a disgrace. There's JACC, JASPIC, various annotations (that actually work well) and the well-know path based constraints in web.xml, but it's all primitive, low-level and full of small gaps everywhere. But... at least they are working on improving things for Java EE 8. &gt;Spring Batch* (java ee has copied the basic functions of spring batch and made it into a JSR) Partially indeed so, but this is the entire idea of Java EE. Standardizing things that have worked. Spring Batch is indeed a good idea, as is Spring Security. This happened many times over in Java EE. JPA for instance is a standardization of the model that TopLink made popular (and Hibernate even more, but Hibernate itself began as a "cheap" clone of TopLink). I'm not 100% sure how much the Spring Batch guys cooperated with the Batch for Java team, but I do know that Spring Batch actually implements those interfaces now and is a certified implementation (just like Hibernate is a certified JPA implementation). So it's likely there has been cooperation indeed. Also, Java EE did NOT copy Spring Batch directly. IBM had batching solutions before Spring even existed, and much of Batch for Java is based on that. While it's funny that Spring now has a diverse portfolio of haphazard projects as-if they were something like the Apache or Eclipse organization, they have been resting on their laurels where it concerns the core bean model and the services around it. CDI is clearly more powerful and better thought out than ye olde Spring beans. Bean Validation, Expression Language and Interceptors are all more elegant and easier than the solutions Spring offers here. While Java EE does not have it as their mission statement to innovate, they have in fact leapfrogged Spring with CDI. While Spring was still thinking about moving MORE things to XML, telling us that code wasn't code, no code was supposedly "configuration" :X :X :X I guess you'd rather want to forget that, but it's a fact that can't be denied. If it were up to Spring a 10k LOC project would consist of 3K Java code AT MOST, and some 7K Spring XML-hell. That Spring XML-hell supposedly made the Java code independent of Spring, but if 70% of your code is in Spring specific stuff it's anything but. It wasn't until Java EE started the no-XML revolution with annotation based injected, soon followed by annotation based *type-safe* and *contextual* injections that Spring reluctantly started to give up on their flawed idea that most code should be called configuration and lived in their XML files. 
I used it about 9 months ago. I haven't written any production code with it but I would certainly consider using it for that if it fit my use case - it seemed to do exactly what it promised. I was looking for a small project to get to test out using java 8 lambdas for UI event handlers so I wrote a small text adventure game that used lanterna at the windowing toolkit level of abstraction (gui) and a snake game using the lower level screen buffer mode. Once I understand the 3 level of abstraction lanterna provides and the way the packages are laid out it was straight forward to use. When I was using it there wasn't a lot of documentation on the site, but that may have changed now. I only used it in the swing rendering mode (didn't try the terminal based rendering mode).
It's a good thing if you don't forget which conventions exist. And if there is anyone here who likes to dig through the gradle manual, it would genuinely surprise me.
The label.contains method considers any point (x and y) within it to be containment. 
should've made a username that has female name to get more help :p
I'm in the process of writing a Textual User Interface library for Android. Because... because.
The conventions that Gradle uses are largely the same ones that maven uses, and that are pretty standard in the Java ecosystem as a whole. Going out of your way to break those conventions for no reason not only complicates the use of these build tools, it complicates collaborating with other developers and libraries too. And if you do have a good reason to break those conventions, chances are very good someone else had the same reason or you have multiple projects with that same reason, and you can break out the extra configuration as a plugin (and this is much easier to do with Gradle than Maven or Ant/Ivy). The long-form Gradle manual definitely has issues and suffers from being out of date, but the API documentation is quite good, and the API has a lot of very useful stuff for making your builds straightforward and declarative via lazy evaluation. The only real problem with "magic" I've had with Gradle is publishing, and with the newer ivy-publish/maven-publish mechanisms this is mostly fixed (plus most artifact repositories for java have Gradle plugins as well).
I'm not saying break the conventions. I'm bemoaning the fact that our build tools are not self-explanatory. Not by a long stretch. And dubious conventions that you might or might not remember half a year from now might save you time WRITING a build file initially, but not reading and understanding it. Example below. What is this buildscript thing doing again? Several google searches later you might stumble over a stackoverflow question that might or might not help you. If all you have is a hammer, everything looks like a nail. Buildscripts in the java world suck majorly. buildscript { repositories { mavenCentral() } dependencies { classpath 'com.android.tools.build:gradle:0.6.+' } } 
Most answers already here seem to be missing on a major aspect of encapsulation. When you define the API of a class, you should be thinking principally about one thing: intrinsic vs. extrinsic state and behavior. Intrinsic state and behaviors get encapsulated within the class, extrinsic state and behaviors do not. Intrinsic here means "independent of context," and extrinsic means "depending upon context." This is not the same concept as in physics, where, say, mass is intrinsic and weight is extrinsic. Within the particular context of a given application, a lot of context might be fixed that is not so in the real world. For example, if we happen to know that all objects in your system are always weighed at rest in Earth's gravitational field at sea level, then we may say that weight is an intrinsic property of such objects. However, if a caller may ever get the weight of an object that is moving (say it's in orbit around the Earth, for instance, where it would be weightless), then you certainly can't make such assumptions and weight is extrinsic. Classes should only encapsulate state and behaviors that are intrinsic to the objects within the context of that application. This doesn't mean that a class may never hold a reference to another object that it doesn't fully encapsulate, it only means that such relationships should be clearly understood to be mere associations, and you should be careful about how they affect dependencies. For example, you might find it expedient in your application to represent a carpenter with a `Carpenter` class, and that class might have a reference to a `Hammer` instance. Certainly a carpenter is a carpenter with or without a hammer, and there are many ways to model how a carpenter might interact with tools. But it is important to understand that the carpenter does not fully encapsulate a hammer in that a hammer might be given to that carpenter and taken away and given to other carpenters to use; the effects of such use might be that the hammer accumulates wear and tear and eventually must be replaced with a new instance. This is different from, say, the name of the carpenter, which is pretty much free of all other context in an app. A carpenter has a name and that's true whatever job the carpenter is on and whatever tools that might be accessible in that environment. For this reason, if I were modeling this scenario with an OO design, I would definitely include a `getName()` method on the `Carpenter` class, but I probably wouldn't have a reference to a particular tool like a hammer. Instead, I would find a way to track the associations between a particular carpenter instance and the tools that instance has access to on a job outside the carpenter. If you think about how this impacts dependencies in your application, it makes even more sense. Think about it, if a carpenter is a carpenter with or without a hammer, then why should the `Hammer` class have to be on the classpath in order to compile the `Carpenter` class? It shouldn't. If a carpenter has to use a hammer anywhere in the execution of the application, both classes certainly have to be available at runtime to work, but checking your compile-time dependencies is a good way to figure out if you've done encapsulation properly. Compare this example to the relationship between a `Building` and a `Room` class. It doesn't make sense to have a building without any rooms (assuming within the context of our app that a "building" is a structure meant for people to enter, as opposed to just any built structure like an antenna—see how important the context of the application is!). In this scenario, these two concepts are inexorably intertwined. A building cannot exist without rooms, and rooms cannot exist free of a building. The very identity of a building is tied up with the rooms it contains, and a building instance and the room instances it encapsulates must have similar lifetimes; they are newed up and garbage collected together. Once you establish this kind of relationship, you need to be aware of the restrictions this places upon your application. If the next version requires modeling a building that can undergo a major remodel, in which internal walls are knocked down and new rooms replace old, then you probably want to rethink this decision. This is, by the way, why you'll often hear people say "prefer composition to inheritance." This is a true statement, but kind of useless in that it doesn't really tell you *when* to prefer one over the other. The truth is that inheritance is a much better way of modeling accumulations of intrinsic state and behavior, while composition (with dependency injection) is a better way of accumulating associations of objects that interact with each other. Most of the modeling we do with OO is around interactions of different objects, which is why this statement is a generally good rule of thumb. But it is crucial to encapsulate the right things too, or else your design suffers too, so it's kind of a stultifying rule if you have no further insight into the specific problem.
[Buildscript closure](http://www.gradle.org/docs/current/javadoc/org/gradle/api/Project.html#buildscript(groovy.lang.Closure\)) in the API docs: `configureClosure - the closure to use to configure the build script classpath.` The only common use case for using buildscript closures like this is plugins - and most of them have moved on to the much cleaner Gradle 2.0+ syntax (Android hasn't yet), which looks more like this: plugins { id 'nebula.info' version '2.0.0' } But the syntax you listed should be familiar to anyone who's added a third-party plugin to their gradle build, because it looks the same whether it's the android plugin or any other third-party plugin, the only thing that changes is the dependency.
Pretty sure the lightweight JSON API (JEP 198) was dropped from Java 9. It is not listed on the feature list URL the article points to, and this was posted a few weeks ago here: http://www.reddit.com/r/java/comments/2ocu6i/proposed_to_drop_jep_198_lightweight_json_api/ 
For those who wonder WTF the "smart Java complier tool (sjavac)" is (since the article doesn't really explain it) http://stackoverflow.com/a/26424760/3500521 Gist: &gt; incremental compiles; parallel compilation; People who are working on large projects and frequently recompile the code base during development are encouraged to try out sjavac.
If you open a diff view, the current version is editable. 
It's actually a contractual obligation that [dates back to Sun](http://www.computerworld.com/article/2494794/malware-vulnerabilities/oracle-will-continue-to-bundle--crapware--with-java.html), so Oracle *has* to keep bundling it. Relevant bits of link: &gt; Smith also defended the practice by saying Oracle had inherited the deal when it acquired Sun Microsystems, the creator of Java, in 2010. "This is not a new business, this is not something that Oracle started," Smith said. "This is a business that Sun initiated a long time ago." &gt; Sun had bundled third-party software with Java since at least 2005, when it offered a Google toolbar. In the following years, Sun made similar arrangements with Microsoft and Yahoo, before switching to Ask.com.
One thing you could try is to use [strictfp](http://en.wikipedia.org/wiki/Strictfp) in your code, and see if it behaves the same with the previous and the new JRE.
&gt; **Segmented Code Cache** &gt; When Java executes code quickly, it currently compiles it to a single code heap, which can impact performance with an increased memory footprint and execution issues. In Java 9, code will be divided into three distinct heaps: non-method, profiled, and non-profiled (that’s permanent, short term, and potentially long-term, respectively). &gt; This segmentation is expected to improve execution time and reduce memory footprint, as well as reducing code fragmentation. I had no idea about this one.
Even a few more updates to the style. When hovering over the "Submit Text" button, a big red overlay appears with "Please seek help with programming in /r/Javahelp", and other cosmetic candy.
Good. Things like this are much better being in a well supported dedicated library than core jdk. This would improve future proofing, and avoiding jdk bloat. Think CORBA.
So it took one whole google search to know that OGM = Object/Grid Mapper. Try to include what the acronym stands for next time.
I agree with the Spring debate and not wanting to go in the 1000th flame war. One thing I would like to mention is the usage of the term J2EE. For you it might just be a term, but in Java EE land there's a clear difference. J2EE is old world Java EE, where things got increasingly more complex. Spring made really sense back then. Java EE marked the turning point, where the focus shifted to making things easier and more elegant. About the JSON issue. It's in fact Java SE that will not proceed with this. Java EE has in fact [included JSON support](https://javaee7.zeef.com/arjan.tijms#block_1505_java-api-for-json-processing-json-p-1-0) while Java EE 8 [will expand on this](https://javaee8.zeef.com/arjan.tijms#block_21699_java-api-for-json-binding-json-b-1-0).
If you're having difficult doing this you can check out my repository [here](https://github.com/NicholasDenaro/HTTP-Server). I tried doing this a while back and it took me a good 5-8 hours to get it working, mostly because I was having such a difficult time with what limited information I could find about it. Sorry about the lack of comments, if you need me to explain anything, send me a message.
That contract expired a while ago
Gradle is declarative for 95% of what you do with it. It just allows you to write custom behaviors if you want.
How long did it take you to dig up that information? Probably too long. The point is: It might be familiar, but will you remember it half a year from now? Especially gradle is terrible. It claims to provide a DSL (or several) to write build scripts, but the language provided is not very readable at all. It's not very domain oriented or specific either. task intTestJar(type: Jar) { from sourceSets.intTest.output } vs. jar -cf my.jar $intTest-classes $intTest-manifest vs. (domain-specific natural language) PACK $intTest-classes, $intTest-manifest AS 'my.jar' Which of those are easier to understand? 
I'm not convinced either way. JSON is the de facto language for data exchange from and to the web so a good standard JSON library definitely has its place in the JDK. On the other hand, I can see that this would take a lot of time and resources for not much gain. If they reached something equal to Gson in a full year, they could have just as well spent that time on something else. Java could have some sort of adoption strategy. If a library is good enough and widespread enough, maybe it should be included by default? I mean, the Java core programmers wouldn't have to spend time reinventing the wheel, all that should be done is just integration work with the current JDK (package names and stuff like that).
&gt; incremental compiles; parallel compilation; People who are working on large projects and frequently recompile the code base during development are encouraged to try out sjavac. The sad thing is, it's typically a problem on the end user side. I've seen way too many times were people do a 'clean' before a 'build' because they don't understand how the tools work.
I really appreciate this. Thanks for the help!
Oracle is opening the door to support AOT compilation and JIT caches in the OpenJDK, like many commercial JVMs do for ages now. The target is version 10.
If you mean maven, then cleaning is kind of important. Without cleaning your old files stay around. Can lead to hard-to-debug issues when you remove a resource file from source directory but it still gets picked up because a copy is in the bulid directory.
I guess you mean 9. Check Java 9 head revision. The initial set of changes have already been integrated. 
Modules are happening: http://mreinhold.org/blog/jigsaw-modular-images
&gt; There is no intermediate MVC style controller required, it's all taken care of for you. It sounds like they replace the Mvc Controller with another different controller, but otherwise ok.
Could we link the /r/JavaHelp-Banner to their submit site?
I can't find the source now, my Googling fails me, but from what I remember reading, the contract as either for 3 years or had 3 years remaining, and expired in 2013. If I run across it later, I'll update my comment.
I think it's the sort of thing that you get bitten with once and you do whatever you can to avoid it a second time. It's the same reason I would always call a macro that implements max `MAX` in C. Otherwise that one time in a million someone calls `max(i++, j++)` will result in someone wasting hours of their time.
Thanks, was surprised this article didn't mention them as it seems like the most important (and complex) feature being added.
Thanks.
I don't really know what any of this is, nor will affect my current project. But its great to hear of progress being made. 
It is the defacto standard today. Yesterday that standard was XML.
Reads like an advert for clojure. Language wanking is best left in academia. We, in the real world, just want to *use* the bloody tools, not wank ecstatic about them!
Or, you know, clicking the link &gt; Hibernate OGM is an object mapper. It persists object graphs into your NoSQL datastore. 
The button should read 'Get Help' or something to that effect.
Okay, I just have to find out how to place it. I already know how to make the button - at least...
[buck](http://facebook.github.io/buck/)
I'm fairly new to Java and I really enjoy this book. Lots of example problems to work through, which is what really helps cement concepts. 
I also think it's really cool, I didn't know what it meant before reading this but it's fascinating. I've used hibernate before, but I have no experience with the whole nosql concept
http://tapestry.apache.org/release-notes-54.html
Once something is in, it is rarely taken out. I can't think of any large example. As far a I understand, every time the JVM/JDK is ported to another machine or architecture, everything must be implemented fully to pass the acceptance tests. It's hard to think of a bigger waste of time than reimplementing legacy technology that simply won't be used. Perhaps project Jigsaw and future modularization will help, so redundant technologies can be pushed into their own modules, and at some point be left out.
Yup. It is already a big problem with jvm startup time and memory footprint that the standard library is WAY too big. Maybe once upon a time when getting libraries was more of a pain, it would make more sense to push stuff into the standard library. However, now that we have the likes of maven, gradle, ivy, and google, there just isn't any reason for a large standard library.
But... what about the cloud based synergistic strategies to promote cross-dependency bleeding edge turn key solutions using blue-sky tools with seemless big-data Hadoop integration resonating with the new paradigm of envelope pushing venture capitalists?
The best solution would be to use Optional, but have a specific syntax to "propagate" the "empty value", without verbose flatMap/etc calls. How about something like this perhaps? Optional&lt;String&gt; version = computer &gt;&gt; getSoundcard() &gt;&gt; getUSB() &gt;&gt; getVersion(); The actual calls to "flatMap" and "map" and the like would be handled using the "&gt;&gt;" syntax. Note: "computer" would need to be Optional&lt;Computer&gt; instead
A few reasons off-hand: What if you want to modify the behavior of setting / getting in the future? Like instead of doing a straight "set" you run some validation logic. You don't want to confuse or "spam" a consumer of your class with options they don't need. If they need a function, make it visible. You don't want an uninformed consumer of your class fiddling with things that aren't their business. Keep in mind this "consumer" just might be future you, who forgot all about how the class your wrote works. 
&gt; You don't want an uninformed consumer of your class fiddling with things that aren't their business. They can't fiddle with things if the field is public final &gt;What if you want to modify the behavior of setting / getting in the future? Like instead of doing a straight "set" you run some validation logic. They can't do a "set" if the field is public final &gt; You don't want to confuse or "spam" a consumer of your class with options they don't need. If they need a function, make it visible. The solution is to only make fields public if you want them exposed. you can hide other fields with private. 
I do use a lot of public fields and one of the drawbacks I find is that even though being part of the interface in the sense that they're part of how you're allowed to interact with a class, the language does not really consider them part of the interface. So you can't mark them abstract or put them in interfaces to let subclasses provide the "implementation" value.
&gt; JSON-over-HTTP can be RESTful as well I never said it couldn't. I just said it makes it easy to violate HATEOS in a way that serving static html essentially makes impossible.
&gt; They can't do a "set" if the field is public final &gt; They can't do a "set" if the field is public final What if you want them to be able to make changes, just not certain types of changes? E.g. `Bag.size` is changeable but should never be negative. &gt; The solution is to only make fields public if you want them exposed. you can hide other fields with private. The problem is if you ever need to modify the rules even behind accessing that value, you have no solution. In languages with properties, like C#, this isn't a problem, but in Java once you've made something public you can't "go back" on it in any way without breaking builds and forcing every caller to be rewritten. Consider this: you start out with a `buttons` list, but you realize a year in that exposing the `buttons` directly is actually a bad idea and one of the few poor choices you've made in some hypothetical API you're writing. If you wrote `getButtons()` you can, at the very least, send run-time deprecation warnings etc. But with a field you are just stuck.
I still remember [java.lang.XML](http://tech.puredanger.com/2007/03/26/xml-java/) proposal ;)
&gt; But this seems like a none-issue, since the places you'd want to use public fields wouldn't be objects that you'd need to "change" how to access the fields. How is this a fact? You can't guarantee a claim like this... &gt; Did anybody ever face a situation like this before? Where the best possible solution was modifying the getter of the object? There have been plenty of smaller changes that I've faced where modifying getter/setter logic was valuable. It's never been so drastic as to be something like turning a local member into remote access. The real problem is that if you are in one of those cases where you really *do* need that kind of flexibility, if you used public members, you're completely hosed. There are no options for you. Meanwhile with a getter, you can do any number of things (triggering warnings, doing validation, etc). The real issue is that Java doesn't have properties like C# does. But with that in mind, yes, the Java trend of always using get/set methods does indeed have a very good justification. &gt; I.e they don't seem to be optimal solutions, and you can come up with a solution that produces better code by keeping the public fields of your object and just modifying your design. Every major new language has support for properties. Countless software engineers throughout history have run into this problem in languages like C++ and Java. There are a few causes: * Humans make mistakes * Humans can't predict the future If your requirements change and suddenly you need to do some extra logic on member access/assignment, you **will** be fucked if you decided to make everything public. It's really that simple.
I don't think I have the expertise to really give you a good answer, and I think the other commenters have covered (or will cover?) the main issues well enough, so here are my two cents on the topic: I find this entire debate on public fields/whether getters/setters are evil to be somewhat missing the point. Good design shouldn't just involve you getting data from some holder and doing something with it; instead, one should prefer to ask the object with the data to do something with it, and give you the result. It really allows you to separate implementation from interface, and I think helps make code more maintainable. (See [here](https://pragprog.com/articles/tell-dont-ask) for more) Yes, I admit, it's not always possible to do this, and I've never used any of the big frameworks like Hibernate/Spring that might require things like this, but it always seemed cleaner to do things this way. Information is truly hidden away inside objects, and each object is responsible for processing its own data. Perhaps it's just the naivete of a college student, but I think trying for "tell, don't ask" first could be a good idea.
I guess it comes down to using "datatype objects", where the object itself is nothing more than a hold up for structured immutable data. When I program in Java, I generally use a lot of these, for example: Use a certain library/framework to receive a message from an HTTP/JMS/etc endpoint and pass it around as a POJO. Then add external validation to it, and transform it to a different POJO that has "typesafe" fields (like "Date" instead of "String"), and do something else with it later. In cases like this I find using final public fields much easier. Since these objects have no state and are immutable, I have no problems with that "tell, don't ask" issue, since I can't really ask a message to do anything (at least I can't figure out a clean simple design for using it that way). I just don't really see, for instance, blogs or posts describing these kinds of situations and discussing the possible advantages and/or disadvantages of using public fields.
Encapsulation. You can't make wide-ranging changes when you don't know how people are using your class. You can't make assumptions about state if people are able to, eg, directly modify the cash value in your "Bank Account" class. And if I hear another candidate explain that encapsulation and date hiding exist for "security" reasons, I'm going to fail them like I did the previous five million times. (Unless they start addressing serious reasons to "protect" your data (aka state (aka your sanity and reasoning)).) Also, http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29 However ... properties-style fields are useful, and encapsulation / data-hiding isn't the be all and end all, eg some kind of config class that's just a random collection of settings. But ... maybe it's like GOTO ... people have seen the horrors of public fields and how hard it is to refactor that shit ... blah. PS I didn't bother reading your post properly.
You have a point there. In that case, I agree that public final works better than getters/setters, as long as the value that the field "points to" (for lack of better wording) is also immutable. I know Stack Overflow has a few posts about public fields and/or getters/setters, so those be a start? ([this](https://stackoverflow.com/questions/1568091/why-use-getters-and-setters) might be a good one, if you haven't read it already) I guess the main advantage(s) is/are conciseness/simplicity, with disadvantages being lack of flexibility (depending on what other alternatives are considered/possible). As with all designs, there are tradeoffs to be made, and in a lot of cases there won't be a strictly "right" one.
Anecdote time. Several years ago, vineetr had to debug some performance-critical application running in a bank. It handled card requests - querying balances, cash withdrawals etc. And of course these requests had to meet SLAs - 1 second and no more (which by the way is not easy when you look at the infrastructure in some countries in East Europe, Asia or Africa). What does vineetr see when he examines the app for the first time? The source code was a steaming pile of dung. The app had nothing unusual to do. It had a few simple responsibilities - listen to requests from a card management system, parse them, convert into a different format, push down to the back office for processing, and reconvert the response into a different format to relay them back, while managing several requests through different connections at the same time. And the original devs managed to make a supreme mess of it. By 'mess', vineetr was told that the devs could not figure out where the performance issue was. Little did he know that the devs barely understood what they had written. What should have been a week's work to fix the performance issue needed a month. There were like 5-10 classes, but every field in them (maybe 30 in all, but vineetr doesn't remember) was public. And every single one of those fields had it's value modified in a different class. Absolutely no encapsulation whatsoever. Field values used to change when a new connection was obtained, when a message was parsed, when a message was processed etc. etc. and all of these changes were done from whatever class the messed up minds of the devs thought of. When you are debugging a multi-threaded app, having the state of an object modified in unknown ways at unexpected times makes for very painful debugging. You can't afford to spend time thinking - "Hey!! Why did this field change value now? And why would it need to?" vineetr had to refactor the app to make it readable so all state transitions were understood (did I mention that no one even knew the details of how this worked), and then he had to fix the performance issue. One of the corner stones in object oriented programming is that the class manages it's own state. You tell it to modify the state, by sending a message to it to do something. The message passing mechanism is of course method invocation. If you want to change state by simply modifying the value of the field directly, you can, but you are an incompetent dev if you choose to do this. You've made debugging and refactoring way more difficult because you have failed to express the requirements for the app in terms of message passing and state encapsulation. Getters and setters are not the only place where expose state to the clients of the class. Every method of the class qualifies for the encapsulation principle. The way I see it, there is no JavaBean vs public field argument. It is a public vs private field argument. If you need JavaBeans, use them. If you need a classes with no getters and setters but semantically correct methods, use them. But if you ever think of making a mutable field public, you need to think twice about how you are going to encapsulate state. Encapsulation isn't merely about wrapping a method around a field; it is about constraining the responsibility of modifications to the field within the class. Other classes should tell this class to do something, and then the field should be modified. This is why I remarked about using JavaBeans if you need them. Not every class should be a JavaBean. Object oriented programming is a lot richer than an anaemic model like JavaBeans.
&gt; How is this a fact? You can't guarantee a claim like this... No I can't. But on personal experience and on intuition, if I want to use immutable data, where the design of it hasn't introduced the need for any complex logic to be done to it, then IMO it doesn't seem like you'll ever need to change how to access their members, so this justification wouldn't really apply to them. &gt; The real problem is that if you are in one of those cases where you really do need that kind of flexibility, if you used public members, you're completely hosed. There are no options for you. Meanwhile with a getter, you can do any number of things (triggering warnings, doing validation, etc). &gt; If your requirements change and suddenly you need to do some extra logic on member access/assignment, you will be fucked if you decided to make everything public. It's really that simple. It's just that, whenever this issue pops up, people (like you now) say how you WILL need to change that code someday, and you WILL get fucked if you use public fields. But it seems like it's not something that pops up that much (with the specific kind of data/objects I'm talking about). I don't remember seeing cases where someone absolutely needed to change the access code to a field, but it was a public field and they just couldn't do it (i.e it wouldn't be solved by a 5 minute refactoring). Seems like this issue can pop up, but very few times in your software's lifecycle; and if it does pop up, it wouldn't be that costly to just refactor it (and adding the getter logic then). But the way it's presented in most texts it seems like it's a fundamental problem that is CRUCIAL to every single program made in Java. Of course, I'm talking about things where you already have applied common sense before. For instance, you wouldn't just expose a core part of your API to millions of users as a public field in an object. Regarding validation, if it's immutable data I'd expect said data to be validated before creation. After creation you can access it any times you want. If it's a more complex type (like maybe an immutable stack/queue), then yes, I'd expect it to be behind a more controlled interface, where the internal implementation is hidden and only an abstract type is presented to the user. Unless you can safely embed the invariants and stuff in the implementation itself (in which case there'd be no problems presenting it as a public field). I agree that if you keep mutable state in those fields, you should control it (mutable state being the root of all evil and all). But if it's not mutable state, is there really that much of a problem? It feels like this is more of a premature defensive mechanism (in some cases) rather than a design based on principles. For example, it would seem to be at odds with the YAGNI principle
&gt; if you try to provide immutable objects, then in my mind it seems that providing "public final" fields is the most concise and correct way to do it. Putting "final" in fields won't guarantee the object will be immutable.
Did you guys read OP? /u/gonzaw308 is talking about immutable value objects. 
If the objects you access are immutable they would, wouldn't they? Yes, if you use "public final java.util.Date date;" you would get some nasty surprises, but if you use "public final java.time.LocalDate date;" instead you wouldn't (unless I'm missing something)
I actually work with code that uses public fields instead of setting getters/setters. I find it more difficult to trace code and understand what the logic is doing because I can't do a reference search on a setter of a field to see places where that field is set. Instead, I have to do a reference search on the public field itself, which is more cumbersome. Other times, in a setter method, I can set a debug breakpoint or do a new Exception().printStackTrace("field set to : " + value); to trace what is setting that that value and where the method stack originates from. I can't do this with the code that has public fields and no setters, so it's a bit more frustrating to understand what's going on. So yes, having public fields saves time for the original developer, but the next developer(me) has a couple of challenges to deal with because of it.
I do agree with you. As you mention, and as the other comments mention, there are important use cases for JavaBeans-style getters and setters. They are certainly more powerful and more flexible, but there are also classes where those use cases do not apply. I think the main deciding factor is, is the class public to code outside the walls of a single application? If yes, you should err on the side of caution and generate getter setter methods, because it is not possible to be certain how needs might change. (But for such public code, there are also lots of other factors that need careful design.) If the class is private to an application, then the argument that things might need to change later simply does not carry weight because it is *so easy to change it later*. IDEs can even do the necessary refactoring automatically. When you have an application-private class, and the fields it should have are straightforward, exposing plain data values, and especially if they are immutable, there is absolutely nothing wrong with making those fields `public final`, and it's good style for simplicity and succinctness. But even in these cases, people still overcomplicate things with private fields and getters. That's cargo cult programming and should be discouraged.
One thing I have doubts on, is regarding that "is the class public to code outside the walls of a single application?" thing. If you expose your class with public fields to your users, it means that the contract of your API states "You can access/modify this field without repercussions". If any later change, that necessitates you to change the accessors to getters/setters and change the internal logic of them, happens, then that means that contract is broken. So in this case, wouldn't it make more sense to add a compatibility error, so the clients know the contract was broken and now there is a new contract? What if your users were using your class in a way that would be broken with your new approach? By forcibly changing the API your users would be notified (they'd get compilation errors), but if you had setters all along they wouldn't. The validation example would be good: If you suddenly need to add validation to a field of a class you expose in the API, then it means that potentially your users may be using that class with certain states, that would now be invalid (i.e the validation would return an error). If you don't change the API, the users would have no idea of that and their code would still assume your class allows them to encode that invalid state, and they would only get a runtime error some time in the future, when they should have gotten a compile-time error to notify them they should change their code. Having public fields initially and changing them to setters later would allow this situation, but if you had setters all along it wouldn't. Could this be a counterexample for the "always use getters/setters", even for mutable objects? Or is there something I'm missing?
You probably have never worked with COBOL, which is *truly* verbose.
I agree with you, for immutable objects, the constructor + public final should be the rule. That said, I have the idea Java was designed (and the current set of best practices were discovered) in a simpler time, when most programmers didn't think about immutability at all. And one thing about Java: It's a conservative environment. Things (the language, the best practices) change, but slowly. That allows a group of junior programmers (and one semi-senior) to maintain the horrible mess some guy created five years ago, in another country, speaking a different idiom, who is not working in the same company anymore. Adam Bien [here](http://adam-bien.com/roller/abien/entry/value_object_vs_data_transfer) suggests even using public fields for mutable DTO's, but I quote: &gt; Actually you can even use public attributes without any getters / setters, but this will probably cause too much meetings and discussions So, IMHO, while you are right, keep using getters. It will make things easier to understand to the next guy who will work in your code. Not because the code itself will be simpler, but because it will be more like the code he is used to work with.
The concepts that cover what you are trying to accomplish are arrays and loops. http://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html http://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html Here is how these might apply to your bunny example: Bunny.java public class Bunny { private String name; private boolean likesCarrots; private String color; public Bunny(String name, boolean likesCarrots, String color) { this.name = name; this.likesCarrots = likesCarrots; this.color = color; } @Override public String toString() { return "Bunny{" + "name='" + name + '\'' + ", likesCarrots=" + likesCarrots + ", color='" + color + '\'' + '}'; } } BunniesExample.java public class BunniesExample { public static void main(String[] args) { Bunny[] bunnies; // bunnies is an array of Bunny object. We can't use bunnies yet. bunnies = new Bunny[500]; // allocates enough memory for 500 bunnies. for (int n = 0; n &lt; bunnies.length; n++) { //loop over all of the bunnies in the bunny array bunnies[n] = new Bunny("Bunny" + Integer.toString(n), true, "White"); //create a new bunny and put it into the array } for (Bunny bunny : bunnies) { System.out.println(bunny); //print all of the bunnies we just made so we can see what it looks like } } } 
Because it breaks encapsulation, and that's bad.
Hadn't thought if that.
Thanks guys, its working now :D. I'm using an arrayList to store the bunnies and the syntax was giving me trouble but after seeing the syntax for the more simplistic array i was able to get it working.
Only the first one actually tells you where the stuff came from. As for how long... off the top of my head. As I said, it's a very common way of applying a third-party plugin to a project. The API link was literally the first google result for "gradle buildscript api". I've found maintaining gradle builds *significantly* easier than maintaining ant/ivy scripts, make files, gruntfiles, or bash code.
Uncle Bob in "Clean Code" describes a principle called the "Data/Object Anti-Symmetry": &gt; Objects expose behavior and hide data. This makes it easy to add new kinds of &gt; objects without changing existing behaviors. It also makes it hard to add new &gt; behaviors to existing objects. Data structures expose data and have no &gt; significant behavior. This makes it easy to add new behaviors to existing data &gt; structures but makes it hard to add new data structures to existing functions. So, if you follow Uncle Bob's advice, if you are developing an object model, do not use public fields, because encapsulation is key. If you are developing a more procedural model with data structures, as long as you can maintain immutability, I don't think it really matters. &gt; is it a problem with those frameworks that don't support immutable objects &gt; defined with public fields instead? This is not a problem with Hibernate, JEE or Spring, and exposes the problem with public field access (the way public fields are implemented in Java). The problem is that these frameworks implement things like lazy association fetching and AOP by creating dynamic proxies. Thus, when you get a reference to a persistent class from the entity manager, for example, you are getting an instance of the "target" class, not the "real" class. The public fields through the "target" reference will always be null and the client code will not get the expected results. On the other hand, If you use a getter, the method call on the "target" class is forwarded to the "real" class and the client code gets the expected value. This demonstrates one of the dangers of the loss of abstraction.
&gt;If you suddenly need to add validation to a field of a class you expose in the API As I said, public APIs need very careful design. If you find that the initial design was not good, then there are no good solutions. You either have to put up with it or break something, or make a new separate API.
&gt; The other reason I hear is that it doesn't provide support for frameworks like Hibernate, JEE or Spring (which need JavaBeans with setters and getters to manipulate them). But is this a problem inherent with java and public fields, or is it a problem with those frameworks that don't support immutable objects defined with public fields instead? You lose out on a lot of features if you don't use proper Java Beans with Hibernate and JEE because these frameworks override getters and setters in your classes to implement features.
This is a huge one. The classic Vehicle interface/Car implementation/getNumWheels example (I can explain if anyone hasn't heard it already) demonstrates this perfectly.
&gt; It's just that, whenever this issue pops up, people (like you now) say how you WILL need to change that code someday, and you WILL get fucked if you use public fields. But it seems like it's not something that pops up that much (with the specific kind of data/objects I'm talking about). I don't remember seeing cases where someone absolutely needed to change the access code to a field, but it was a public field and they just couldn't do it (i.e it wouldn't be solved by a 5 minute refactoring). It's nonsensical for anyone to claim that you *WILL* get fucked on any particular field if you don't use a getter, but I'll say that on any project large enough, you *will* get fucked on *some* fields if you don't use getters. I don't know of a single project I've done where I haven't ended up having to go back in and add logic into a getter or setter, it seems to be especially common with dates and strings. In my experience, it's just been more time efficient to use getters and setters from the get go. Once you get into the habit, it takes almost nothing to do up front (most IDEs will auto generate them for you). I'll note that there are quite a few people that push for using public fields on POJOs in Android because it has slightly less overhead. Not as many as a few years back though.
Related to the interface: Using a field also eliminates a ton of proxying functionality, such as mocks for testing or aspect decorations. You're right that simple get/set methods often seem like overly tedious extra work, but the payoff is huge for many reasons. And on the flip side there really isn't any big advantage to using public fields. 
&gt; reference search on a setter of a field [...] reference search on the public field itself, which is more cumbersome. Why/how is it more cumbersome? From my experiences with IDEs, I can't confirm this, but maybe I'm overlooking something. 
If you're the only programmer public fields are probably okay because you're probably going to be consistent in your implementation. I'd you're in a team though you want access restrictions so someone doesn't, completely unintentionally of course, put your object into an invalid state. For example, someone may change one of your String fields by assignment, but he/she didn't realize it was being set to null (a perfectly acceptable value for a String to have). Though you never planned on that property being null so suddenly there's NullPointerExceptions everywhere and you have to track down which assignment is making it null (this could be another method returning null and getting assigned to your public field). If you used a getter and setter though you could add a check for null (just once rather than every time it's accessed) and even throw an exception so others know null isn't a valid value. Java is cumbersome at times but if you use it properly tracing and even avoiding errors is easy. What is "proper" usage of Java? That's a different topic.
You get all reads + writes instead of just writes
Recently I was in the same boat as you. Scraping the web interested me, so I built a Java program with JSoup that scrapes indeed for software engineering internships for 3 locations. It then saves them to ArrayLists and outputs them in a clean format with the posting title, company name, and a link to apply. I learned a lot building it and keep tweaking it to make it more efficient. A portfolio project doesn't need to be some grand thing, but it is to show that you learned something and took initiative to build what that you saw fit.
In IntelliJ you can filter the results to hide reads or writes individually 
Well, how about a large, but modular standard library? I don't know the details of project Jigsaw or what it tries to accomplish (maybe what I'm saying?), but you could have a lot of libraries which may or may not be booted upon starting the JVM or loaded only when your code asks for it? But I'm still torn, because an official Java library may just as well screw things up (how many tries did it take to get the date/time API right? And I still use JodaTime myself). On the other hand, JSON is such a core language that it has its place. Ideally I would want a lot of libraries in the standard JDK that are not developed by Java. :)
And the API makes declaring even custom behaviors relatively declarative. Practically everything in gradle uses Gradle's specialized collections, and those collections have incredibly useful lazy evaluation filters like `matching`, `withType`, and `all`. For example, suppose I wanted all Test tasks to use 2 threads instead of the default one: tasks.withType(Test) { maxParallelForks = 2 } It doesn't matter where in the build script (or a plugin) I place this logic (as long as it's after the java plugin), because `withType` will lazily match against all Test tasks.
&gt; The real issue is that Java doesn't have **properties** like C# does. But with that in mind, yes, the Java trend of always using get/set methods does indeed have a very good justification. I was just about poiting that out, when I read, that you did it allready 😉 That is **the** reason. (And **that** is imho a design flaw of the language that should be improved by adding properties to java!)
The big red box suggesting posting to /r/javahelp was too subtle? Post questions like this on there in the future, it's where posts like this belong.
Having logic in your getters/setters is a code smell. Following the single responsibility principle, a class should not hold data AND execute behavior. I agree with OP, in most cases, public fields should have been used instead of the accessors. There are still some cases (complex data structures, lists) where you must use accessors, but these should be the exceptions, not the rule. The only times I use getters/setters is when my objects needs to be processed by a component that expects Java Beans (ie Jackson Mapper) or when you need to add a proxy to a class (ie DB entity lazy loading) Also, public final fields force you to initialize your data in your constructor, which means your objects are valid as soon as they are created, and you will never be able to "forget" to set a field. And the day you need to refactor your code to use accessors, you just make the variable private, you will instantly see what does not compile and you can fix it very quickly. 
This post is better posted in /r/Javahelp because /r/Java is for: &amp;gt;**News, Technical discussions, research papers and assorted things of interest related to the Java programming language** as is clearly stated in the **sidebar** where you would also find: &amp;gt;**Please seek help with Java programming in /r/Javahelp!** **Also:** be sure to read the [Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/posting_guides) on /r/Javahelp before you post. How much bigger and redder do we need to make this info in the **sidebar**? Also, as soon as you hovered about the "Submit Text" button, a really big red bar appeared that told you to place questions like this in /r/Javahelp. Did you not see that?
Have you considered writing a plugin for Netbeans? This allows you to get a good understanding of writing an RCP, you do not need to learn to all the project and you can put the plugin out on the NetBeans portal for publicity. There are also big Companies like NASA and Boeing using NetBeans as a platform so it is a good skill for the CV. There is a good starter introduction on https://platform.netbeans.org/tutorials/nbm-google.html
While I understand your concern in the abstract; I can't practically see how you can have an "abstract" variable. Certainly for base types; possibly one could argue that a null pointer to an abstract object is abstract.
If you let people randomly use things they shouldn't need to, then you can't change. Your class should only expose what you need to use it, if you start letting people use everything even things you don't intend to, then you can't change things. In fact, program to interfaces, and never use any public fields if you can. 
Public final fields are by definition part of the API of your class. And the limitations they impose on implementation refactoring is precisely their downside. They are perfectly fine in classes that are essentially just data containers without logic, but in other types of classes you probably want to think hard whether they're the right thing to use.
In OOP you should never have direct access to any publicly accessible class' internals. You should always operate with it's interface. That's why, there came this idea of hiding all of the properties behind some layer of methods. However, this backfired. OOP is not as easy as it looks at first sight. OOP is not "structures with methods" it's a different way of programming. Instead of calling `dog.setPosition(dog.getPosition()+10)`, in OOP you should be able to write `dog.move(10)`. Exactly because of this reason, all the public fields are usually hidden. However, because people fail to properly model this kind of interactions, they usually generate a bunch of getters/setters and call it a day. Don't take this wrong, I'm not saying you should never use public fields with OOP. You should distinct the cases where you need a mere structure for data (DTO for example) - then public fields are ok; and some entities which you want to contain some business logic - then usually most of the fields should be hidden and abstracted by additional layer of functions.
Vehicle is the interface which defines getNumWheels. Possible implementations of Vehicle would be Car and Motorcycle. Relating to the issue at hand, this sort of implementation wouldn't be possible with public fields.
I've personally reexamined this over the past year as I've been working on a team of one so there was no one who would have to deal any pain from he experiment. I started making almost everything public and then doing "encapsulation" refractors whenever I had issues. A large part of this was prototype or proof of concept code not destined for a long life. In some cases I had refactors which reached across several modules (which would have been terrible if the team size was more than one). After all this, I've settled on using public fields in a couple specific cases: * private inner classes * final fields in prototype code (assuming I would have written a getter for it otherwise) * "struct" like situations, e.g. If I write a class whose purpose is to be (de)serialized to JSON by Jackson
&gt; overly tedious extra work Right-click -&gt; Generate getters and setters. I'm not sure why people even try to make this argument any more.
That's a lot of things that you have to remember (which classes are mutable and which are not)
I think that this misunderstanding comes from how OOP is taught with simplistic examples. If your objects are simply bags of values, you don't really need them to be their own objects at all--you could have just used a Map and avoided writing the code for your objects. The missing piece that doesn't get taught or isn't taught early enough is that your objects should have those functional methods a part of the object itself. 
public final is fine.
If a public final field better expresses how someone should use your class, there is nothing wrong with using it. It is essentially a public API on top of your class with the verbosity out of the way. I think when people say that "everything should be private" , they are referring to not exposing a class' internals to its client. Out of this fear/best practice w/e you want to call it, most people just make everything private.
Or use Lombok @Getter/@Setter
Or annotations with Lombok. Google AutoValue, Apache Lang, Guava
Pretty much Date. That's why you should be using LocalDate if you're on Java 8.
&gt; Easy. We have an "Identifiable" interface for the very common case of "This object has an ID" pretty much every implementation of this in our code has the field &gt; &gt; private final int id; That kind of makes my point -- that's not abstract. That's concrete. The thing is, 'interface' is what lets you have multiple inheritance in Java without needing to worry about resolution order or diamond inheritance. If you allowed this non-abstract variable into the interface all that goes away. Remember that other than that, an interface is just a class with only abstract member functions. Perhaps what you want then is an abstract base class with a concrete member variable?
Java doesn't have properties at the language level because it's a bad idea.
Good read. Last line made me think of the regular Indian IT person always ending their emails with "kindly revert back to me if you can do the needful" trope. 
&gt; The alternative is the JavaBean approach, where your fields are private and you provide the usual getters/setters, but in the case you want an immutable object you just provide getters. But this feels too verbose, and unneeded at times. It is verbose. That's why C#, Scala, and other languages have "properties": things with the syntax of fields but the semantics of methods. The lack of them is one of the really annoying things about Java in my mind. Still, I prefer hiding my fields behind methods, even in immutable classes. Doing so let's me distinguish *the set of conceptual properties the object exposes* from *the bits it stores in memory*. Having a line of separation there lets me evolve either over time without affecting the other. I rarely make changes like "instead of storing locally, get from a server", but I *do* very frequently make changes like "calculate this on the fly since it can be derived from this other state" or "cache this even though it's redundant for performance". For a simple example, say you have a 2D point class. It has a lot of "properties" in the conceptual sense: x, y, length, theta in polar, etc. Which of those are stored in memory and which are calculated is purely an implementation detail. If some of those use public fields and some use getters, that implementation detail has leaked into the public API, and I can no longer change it without breaking clients.
All of the your `BIG WORDs` can't beat mine: NodeJS!
When you run into issues, how do you add logging or put a debug breakpoint on a field?
That's not an interface
To be honest, any online degree you get is not going to be worth much in itself. What will be valuable for you is any skills or experience you gain via the process of obtaining that degree. What employers and interviewers are really looking for is solid development experience, with a proven record of writing good code. To that end, what you need is a project you can work on. A portfolio of your projects will go much farther than an online degree from a potentially unknown school.
So a project, like a group project or just a project to be produced alone. Or either? If a group would it matter if it was a face to face group project or a project say on an online community. If a online community is ok any ideas of somewhere I could find a place like this?
But it should be an abstract varaible, one that is only declared to exist, but leaving the implementation to the subclass/implementer. That is no more concrete than declaring a method will exist without implementing it.
You're WRONG. See? without justification, your assertion, as well as mine, is baseless.
What about any other non standard library immutable class?
Justification of getter/ setter properties: - you can fine-tune the mutability of the public aspect. an initializer or a constructor sets the value, and then it can only be read. While public final would probably do this too, it wouldn't be as obvious from the javadoc and code completion in the IDE - you can do side effects in the getters/setters in case the actual internal representation is much more complicated, or is a facade That said, I love how groovy treats properties (autogen's getter/setters, gives a nice, compact setter constructor to beans, still lets you inject a getter/setter override beyond the default if there is complexity, has direct object.property syntax, object[property] syntax, etc.
Oh woops tottaly didn't notice that! My bad :)
Depends, online degrees from questionable schools aren't worth much. If it is a good (accredited) school that allows you to earn a normal degree by taking online courses then it might be worth it. However if the local schools are decent and they just using a different programming language in their degree path I'd suggest the local school. Learning about multiple languages is a good thing. 
Depends where you live. The job market in Tempe is poor compared to Seattle, New York, LA, or just about anywhere else in the US. I've worked on small teams bringing large projects to successful completion, including in some interesting industries, but last round of job hunting, no one called me back. A lot of major employers out here have information systems that they use to pre-screen resumes. Without a completed college degree, I get pre-screened out and no one ever even looks at my resume. A degree might not help you in an interview, but it might help you get the interview.
The local school doesn't really have a course in any language, I'm definitely not against learning a new language by any means. My only bet to go physically to a school that offers any course in a language would be to uproot and move 4+ hours away which is what I'm trying to prevent. Any ideas of a school that is credible that would allow for an online degree in this field?
I use a lot of libs and I don't know of any that do that.
They hide performance deficits in the code, they make intellisense less intelligent and there's no good convention for them. Happy now?
I live in a very small town in North Carolina lol, so the job market is probably awful. I am just having trouble supporting myself off 13K a year working fast food and would like to get my foot in the door but have no idea how, I'm obviously not looking for big bucks like I said I work fast food atm but want to get a start. My schooling had been delayed out of high school due to unforeseen financial problems due to unforeseen medical problems that have been fixed and will have the money to start school again around may 2015 and possibly the money to move but am unsure of a place of school or living.
I was able to get a programming job in java for CVS without any degree at all. udemy.com caveofprogramming.com I've been working there for about 4 or 5 months now, and it's my first software development job. If you'd like, PM me and I can help point you in the right direction. Again, a degree helps but is not needed to start your career. 
George is getting angry!
Thank you very much for the vouching, I appreciate it.
And if you're still not sure how that relates to the issue at hand we can find a concrete example.
Button is there :)
&gt; ood design shouldn't just involve you getting data from some holder and doing something with it; instead, one should prefer to ask the object with the data to do something with it, and give you the result. It really allows you to separate implementation from interface, and I think helps make code more maintainable. It sounds cute on the surface but there's a reason why no one does it that way. Take a typical web app. So you want to load data from the database - using that approach you have to put the database loading code in the object itself. Then you want to send the object data to be rendered a certain way in html - then you'd have to put html generating code in the object itself. When it comes back, you need to turn the submitted request back into the object - again, now you're putting web interpretting code that's specific to one submitted page into the object itself. Then you want to validate the object, well there's a very different validation between creating a new object and saving the object so now you have at least 2 validation methods on the object. Those validation methods might need to access the database themselves. Then you need to save the object to the database, and yet another time you're putting database code in the object. Then later you want to change things to use a different database, and implement an android app. Once again you're editing the object itself to handle every way that it might be used. It gets really messy, and ties your object with the data in it to every single way that you want to use the data, inside that object, which is a maintenance nightmare. It's **much** easier to put the data in an object with getters and setters, then let that object be used without the object knowing how it's being used. Rendering the objects info to a jsp, or to a screen in an android app, means you just pass in the clean object and use it's properties as needed. 
It's just the worst thing to do. That is, public mutable fields. Getters/setters adds one level that enables you to control how values are returned/set, so that you may change how the underlying data is stored without worry. But having setters is bad encapsulation as well. And getters aren't that much better, both tend to imply a bad design because it's leaky abstraction. You want to tell, not ask. As in, you tell an object to do something, not ask it for data so you can do something. In other words, a class should be created to do something. Some action, some kind of behavior. If it doesn't have all the data it needs to do so (its own private fields) you pass in the required data as parameters. Then you do the action. This is how encapsulation is supposed to work. As long as the object does it's duty, object outside don't necessarily care how it does it (the implementation). Public getter/setters is just a poor attempt to try to follow good principles (encapsulation) without really getting the point of it or having to change their behavior (which is having public mutatable state accessible everywhere). This is why getters/setters are considered often an anti-pattern when dealing with things that aren't or don't have to be dumb data objects.
&gt; I agree that if you keep mutable state in those fields, you should control it (mutable state being the root of all evil and all). But if it's not mutable state, is there really that much of a problem? &gt; It feels like this is more of a premature defensive mechanism (in some cases) rather than a design based on principles. For example, it would seem to be at odds with the YAGNI principle I think the references you're finding **are** getting it wrong, but not in the way you're describing. The problem isn't one of public field versus public getter, but rather that they're both probably wrong. Publicly accessible internal state probably indicates that the behavior of the object is external to the data and thus probably not good OO design. Consider the vehicle example used elsewhere here. Perhaps somewhere we want to calculate the distance the vehicle can travel before empty. It doesn't immediately seem unreasonable to provide a method that returns the amount of fuel remaining in the vehicle, e.g. `public Measurement getRemainingFuel()`. But that's probably dependent on a number of other elements, for instance the vehicle's current speed. So we expose `public Measurement getSpeed()`. But we also need to know the number of cylinders in the engine and their size so we expose 'public Engine getEngine()' which, in turn, exposes `Measurement getCylinderVolume()' and `public int getCylinderCount()'. And now, finally, we can write our `public double milesTilEmpty(Vehicle v);` method: public double milesTilEmpty(Vehicle v) { return calculateConsumptionRate( v.getSpeed(), v.getEngine().getCylinderCount(), v.getEngine().getCylinderVolume()) * v.getRemainingFuel(); } But it turns out some vehicles don't have engines that have cylinders e.g. rotary or eletric, so now we have to have conditional statements in our tilEmpty calculation to account for the different types of engines. We also need to refactor the Engine interface to push the 'getCylinder*' methods down into something like a `CylindricalBasedEngine` type. Also it turns out that the altitude has a significant effect on the fuel consumption, so for some types of engines we'll want to include that. public double milesTilEmpty(Vehicle v, Distance altitudeAMSL) { if(v.getEngine().getType().isCylindrical()){ return calculateMilesTilEmptyForVehiclesWithCylindricalEngines(v, altitudeAMSL); } else if (v.getEngine().getType().isElectric()) { return calculateMilesTilEmptyForVehiclesWithElectricEngines(v); } else { return calculateMilesTilEmptyForVehiclesWithRotaryEngines(v, altitudeAMSL); } } A better design would have been to ask the Vehicle to just tell me what I really want to know, `distanceToEmpty`.
Nowadays there is enough free material on the internet ( Youtube, github etc ) that you don't really need any collage IT degree, just hands on projects. Try joining an open source community, learn the basics on how to contribute from them, go through their bug list, keep trying to fix bugs one after another till you get into the flow, and make it a habit. Once people find that you are sincere and are open to learning, you will be surprised by how much they help you ( here in reddit, on places like stackoverflow etc ) The key thing to remember is that coding by doing is the best form of learning, and nothing beats a portfolio of projects, not even collage degrees.
This link is pretty useless as it doesn't tell me anything about what it is.
I use public final much as you as thinking and haven't had any issues. Most naysayers are missing the *final* bit here I think. Since you cannot have a setter, providing a getter is unintuitive IMHO. Also there are no concerns of compatibility with things that expect getter/setter pairs, because those things aren't going to work on a final variable anyway. One important aspect though is to question whether something needs to be exposed at all, whether the operations using that value shouldn't be encapsulated in the object it comes from somehow. Needing a lot of these public fields might well indicate poor design.
Look at coursera and udemy. You don't have to go to a college to learn.
May i ask what "open source community" do you suggest ? I'm trying to find projects to contribute or community where programming is the main topic, but i can't find anything. 
You might as well lie about the degree. I have no clue if recruiters actually fact check that stuff.
I got a BS CS from Regis in an all online program. I'm now in my 4th year of Java Development and a Senior Software Engineer. Get a BS from an accredited school offering a true college program, and you'll be just fine.
Would the minuscule performance increase be enough to forego safety though? The advantage of using Option over null is that you **know** the value can be empty. Using null, you have no idea which object is allowed to be null by your application and which one isn't. If you pass your "version" string to a user or another application, how can they know if it's supposed to be null or not? With Optional they can though. Regarding verbosity, had Java had type inference and allowed you to do something like "var version = computer &gt;&gt; .... ", then verbosity would be a nonissue. I think Java could really benefit from the advancements on type safety and syntax from other languages
I have a degree in IT with a focus on software dev from http://www.wgu.edu I picked the school because it was non-profit and self paced. Having already worked in software development for over 10 years before attending, I was able to go through my basics very quickly. The main thing WGU has going for it, is that the classes that relate to your major are not exams they made up, but they are all Industry certifications. You complete the main java course once you receive your Oracle Certified Java Programmer cert. Project management required me to take Project+, IT Security required Security+ and so on. I don't know how much value folks place on these, but they are least carry some weight in the industry, and in addition to earing a B.S., you also leave the school with around 10 certs. It's a full accredited school, which is all anyone really cares about from an HR perspective. It will at least get you past hiring managers looking for buzz words and getting interviews with the people who simply care how much you know and how well you work. To be honest though, I don't feel like a degree has helped me at all, but I am in my 30's and started working in software in high school at age 18. I don't know if self-taught developers starting out now can get away with that anymore. I will say that the last time I was job hunting, more people asked me for by github account than my resume. If you do feel like pursuing a degree is the right choice, it sounds like WGU would be a great fit for you however.
I've been very happy with Hibernate internally, and the ability to execute SQL directly through the engine ([session.createSQLQuery](https://docs.jboss.org/hibernate/orm/4.3/manual/en-US/html/ch18.html#querysql-creating)) really helps out when you need to do something very SQL-specific without having to pull a bunch of objects locally to make a trivial change. Of course this does lead itself to being database specific, but what's the point of having a database if you're not going to rely on its' feature set, right? JDBI worked when I tested it, but it just wasn't enough of a change to make me move away from JDBC and Hibernate for my two primary apps.
I'd like to give Hibernate OGM a try. The only thing to keep in mind is that it requires JPA 2.1, so it's Java EE 7 (I'd have a pain-in-the-butt time using it in WAS 8.0 for instance). EclipseLink also has something similar that's been around for a while, but it seems more complicated at passing glance (makes use of Java Connector Architecture aka JCA). I think those two JPA implementations are the only two that offer an OGM solution.
&gt; They hide performance deficits in the code, As do getters and setters &gt; they make intellisense less intelligent How so? &gt; there's no good convention for them What do you mean?
Hibernate is not worth the trouble. For anything other than trivial OR mapping, it is a pain in the ass. Spring templates are the shit.
Feel free to read my post history if you want to see examples of interacting with people with civility and respect. It will make your discussions easier, I promise! 
You have to make the difference between classes that have only final fields, that are the best thing we have in Java to represent immutable values, and in that case direct access using public final fields is perfectly fine, because being any smarter than that would break the value object paradigm. Then you have "normal" objects, with state and behavior, which use public non-final fields. This is very bad as this makes code highly coupled internally and among friend classes which access those fields in many places instead of using a well-defined public interface. This also makes such classes hard to extend because there is no single extensibility point. I'm working on a project which uses a library which makes extensive use of public or protected fields and this regularly makes my work more difficult. In summary : constant value objects : final fields; standard objects: provide an interface with extension points. I think people still insist on using getters even for immutable value objects is because of the eons-old JavaBeans standard, which is pretty much outdated nowadays. 
I did something similar-ish for intellij a while ago at http://samatkinson.com/?p=59. Props for this though. Most Eclipse users I've met don't seem to use shortcuts and it annoys the crap out of me. (caveat: MOST. Not all. Some Eclipse devs are good :D )
Not enough content for a cheat sheet, it should be crammed full of info with no space wasted. If you add graphics/colour then put it to good affect. https://github.com/pellaton/eclipse-cheatsheet http://michael.peopleofhonoronly.com/vim/
I'm not sure if anyone else has posted, but it doesn't guarantee the object A is immutable. All that final does is stop you assigning to that variable again. If a variable X happens to be one which can mutate, the original object A is now not immutable. The only time you can safely expose a field using public final, is if it is immutable. If the object X is not immutable, to make the overall object A immutable, you need to provide a getter which creates a deep clone of the object X which shares no references with the other object X. Hopefully that makes sense.
Good point. I suppose that's my inexperience showing, since I have yet to work on anything like that.
I converted it to a [1280x1024 image](http://i.imgur.com/XjXVRJ7.png) if anyone wants to use it as wallpaper. I've found making wallpaper references helpful when learning new technologies. ETA: And since it just occurred to me that most people probably don't put their icons on the same side that I do, [here is one for you too.](http://i.imgur.com/RmKOmgB.png)
Yeah, I mean there are specific cases where having objects modify their internal state does make sense. I recently created a menu object. It has submenu objects that need to be set up to be connected correctly. I wrote a "addSubmenu()" function so that that is all done correctly in one place. It makes sense sometimes, do it when appropriate, but a lot of the time particularly when passing data around it's better to keep actions on that data in a separate class. The db and the ui both look at the same data, it's easier to work with when the data itself is separate from how it's presented/manipulated/display/etc.
I'd rather poke my eye with a fork than read through your comment history.
I'm not going to give you an answer, sorry, I've been using all these to great work without any major problems. What about jOOQ?
Are you worried about performance and/or do you forsee yourself having to tune SQL queries/indexes? If so, you should probably stay away from ORMs. If you have a more "casual" use case, they will probably save you work. 
Jdbi is all over production from dropwizard. It is pretty solid.
Worth trying it.
Disclaimer: I've never really used an ORM like Hibernate for any large projects. I'd only use Hibernate if I needed to do some rapid prototyping or if I know I'm only going to be doing CRUD. God help you if you try to do some OLAP queries with it. I'd definitely go with some sort of result-mapper like JDBI or MyBatis over normal JDBC in most circumstances. JDBI is easier to use/learn, but MyBatis has some nice features like a pluggable, transactionable cache. MyBatis is more compllicated, but has good documentation. Both keep you close to SQL, so if you're comfortable with writing queries, it's the best way to maximize your database performance imo. JOOQ looks nice (I've never used it) and appears to have a lot of features. However, it appears to translate its DSL into vendor-appropriate SQL. This is a nice feature if you're trying to support multiple databases, but I personally fear what type of query/performance I would get with some of the complex OLAP queries I end up writing, and that I'd end up having to work around it to get the query that I actually want. Probably not a big issue for many types of projects, however. There are only 3 reasons I can think of to stick with pure JDBC: * You're working on a very small app with only a handful of queries, and don't want to deal with setting up a framework * It's simpler for others on your team to work with * You have some atypical problems that are difficult/impossible to handle inside your framework I'll give an example of the 3rd item in that list: I'm using MyBatis and I have a SQL Server database where I need to do batch inserts, but I want to get the auto-generated keys for each insert. JDBC auto-generated keys don't work with batch inserts. The alternative is to write a single query that has multiple insert statements that also use the OUTPUT keyword to return the auto-generated ID for each insert. However, the getGeneratedKeys() doesn't return the keys when using this methodology, you have to get them from the result set, which JDBC does allow to be returned from insert statements. MyBatis doesn't allow you to access result sets for insert/update statements though. In order to do this, I had to spend quite a bit of time creating a MyBatis interceptor for auto-generated keys that actually fetches the result set. It's a bit of a kluge, and I spent a ton of time trying to come up with another solution when doing it in JDBC would have been trivial. Still, 95% of the time I'd say JDBI or MyBatis is a better solution than normal JDBC.
For everyone else http://i.imgur.com/YfsfoLd.png
Yeah, I get what you are saying. I guess I meant more of a quick reference. I am sorry for saying the wrong name, but I don't really think that warrants downvotes on my comment.
Take a look at http://www.querydsl.com/ as well.
If you love scraping, try browser automation with selenium. It's heaven
No downvotes on my part, just some examples if you choose to create a version 2.
CTRL-Shift-O is fantastic! Does anyone know how it behaves when there are multiple import options for a class?
Let me Google that for you. It's a JSF 2.2 implementation! Okay, now you'll be like: useless info since it doesn't say what a JSF impl. is. So let me google that for you as well. It's an MVC web framework. And you'll again be like: useless info, since it doesn't tell me what MVC is. So let me Google that for you...
&gt; As do getters and setters Not really since they are explicit. Which code is more obviously problematic: for (int j=0; j &lt; Count; j++) { // do something } or for (int j=0; j &lt; getCount(); j++) { // do something } In the 2nd example it's obvious that I should probably not be calling a method in the loop. I could have threading issues, I could get back an inconsistent result, but for sure I see that this would be doing more work than simply using an intermediary variable. With the property syntax - not so much. &gt;they make intellisense less intelligent In Java when working with a library you're not familiar with it's easy to find things. Suppose I want to set the size of something. Is is Size? Height? Width? Length? In Java you hit ".s" and you zero right in on the setters. In something like C# you just get a long list of methods, properties, delegates, objects, enums etc to plow through. &gt;there's no good convention for them Should we use "_var" for field and "var" for property? Or maybe "var" and "Var"? or "var"/"var" or worse should we just hide the var with magic syntax? Even in C# there's no agreement. In older versions it was different. But at the end they stuck with PascalCamelCase for properties - which is the same convention as classes, methods, delegates, interfaces, etc. Everything looks the same! 
Select a word and hit Ctrl-k to get the next occurrence of it. Ctrl-Shift-k for previous occurrence.
What's the point of modularization for a tiny platform no more than 200MB in total? All users need are a few GBs of RAM and fast SSD for initial loading, both are quite common these days. Microsoft is also attempting the same thing; It seems everyone has gone insane or they simply have nothing else to do.
I love me some eclipse 
There are many business and developers that would still use Java, even when presented with said alternatives. Maybe the cost of changing the programming language would be to costly, they'd have to get new programmers that know that new language, would have to maintain in parallel components written in Java and in Scala/Kotlin, etc. In those cases, they are still "stuck" with Java, at least in the cases where other languages would fit best. Trying to improve Java makes it better for these situations. Even more so, when these companies/developers get used to the new "improved" ways of programming, they'll find that it'll be much much easier to change to one of the other languages if they need to
Don't know about an "adding library", but there's [this](https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition), which might be similar to what you are seeking.
Assuming that it's impossible to disable anti-aliasing in JavaFX, one work-around would be to embed a Graphics2D component inside of JavaFX. JFreeChart developed a library that makes this pretty easy: https://github.com/jfree/fxgraphics2d I've never done this myself. I do know that you now have to take into account the fact that Swing components expect code to run in the EventDispatch thread, where JavaFX expects its code to run in its own thread. Something to keep in mind.
The very best resource for Spring are the free Spring Reference guides. I print them at work and bind them. They are better than any of the books you can buy. I adore them and hunt them down for every Spring project I use: [Spring Framework Reference Guide 4.1.3.RELEASE](http://docs.spring.io/spring/docs/current/spring-framework-reference/pdf/spring-framework-reference.pdf). Page 364 of this guide explains how to use the JDBCTemplate. Also, [this Chinese guy](http://www.mkyong.com/spring/jdbctemplate-queryforint-is-deprecated/) seems to make really good and simple tutorials. In all honesty, if I go looking for a tutorial and see the author of a particular one is Indian, I bail. They just don't seem to be able to explain their way out of a paper bag. Stick with the Spring Framework Reference and go after every one they've got. They're always to be found in locations like this: [File locations for Spring Reference Guides](http://docs.spring.io/spring-data/jdbc/docs/1.2.0.BUILD-SNAPSHOT/reference/).
Check the [/r/Javahelp wiki tutorials page](http://www.reddit.com/r/javahelp/wiki/tutorial_list).
I was worried when I saw JFreeChart listed, as their product is GPLed, but this component has an Apache(ish) license. Might have a use for this later early next year.
This, or /r/learnjava, or any of the other links in the sidebar.
If I'm not mistaken, it is possible to use Swing components in a JavaFX app. If that's correct, you could use Swing for the image display, and use JavaFX for the rest of the interface.
Your biggest challenge with an app like this is going to be your data model. For an image editor, you're headed down a rabbit hole of storage and retrieval schemes for pixels, tiles, and data formats, especially for large images. That being said, Swing and Graphics2D has quite a decent library in the venerable java.awt.image package. Most every image operation you can think of is already implemented in the core libs. SwingNode will allow you to embed a Swing JPanel subclass into your FX Scene that will make pipelining changes from your image model to the screen easier. The bit that will be difficult will be bridging the two event dispatch thread models. You might end up with some visible lag between when FX acknowledges a user gesture and when Swing gets around to repainting your UI. You might also have some fun with translating coordinate systems...
For your first point about the loops, sure. Using object properties in for loop tests will become problematic. But compared to current Java, there would simply not be a `public int count;` member in the first place, so your only option would be to loop over `getCount()`. In this case, then, does it matter to you that it's a property called `count` or a method called `getCount()`? If properties were implemented, I'm sure people would get accustomed to not looping using properties of a class. As for the bit about not being able to filter to setters by typing `set`, well, this doesn't make IntelliSense any less effective, it just means that if your classes are confusing you're going to have a bad time. IntelliSense can still deal with and complete properties as well as anything else. As for the final bit about what to call the actual value, I suppose I do not see this as a significant enough problem to decide that implementing properties is a bad idea. Sure, if everyone comes up with their own system, it will be confusing and more difficult to read, but within your own project you should have the ability to write coding guidelines, and in open-source code, well, I really don't think it's going to be that big of a deal in the majority of cases. I mean the biggest nightmare I can imagine is if one class has dozens of properties and no two of them use the same pattern for accessing the actual field that the property stands in front of. But the same can be true today of other conventions we use. I work in Python where functions are supposed to be `written_like_this()` but plenty of libraries have them `writtenLikeThis()`. Usually if the library is popular enough people will complain and the author will adjust/make aliases, but in those cases where it's unavoidable, it's really more of a minor annoyance than anything...
You've got no argument from me on the joins, but having hibernate map rows into objects rather than manually mapping them does reduce the amount of boilerplate code I have to write. Simple crud transactions are easy, and the complicated stuff is handled through carefully crafted SQL. It's the best of both worlds in my book. Now if I could only get hibernate to boot up faster. It seems like startup takes ages when it scans classes.
You are correct, but this stuff is buggy and definitely not fit for production use! It's also quite a choir to juggle code between two UI threads. 
I used Hibernate for about 7 years and I'm sick of it. I either write straight JDBC code and get it done in minutes or I use the Spring Template. I write the exact SQL I need in very neat code and I am tremendously productive. And the Hibernate startup time is a serious and recurring issue. I have had apps that found their greatest slowness came from Hibernate--and at version 4 there is no way to solve it. It's a part of Hibernate. So, you choose to use what you want but I am among the many who have "fallen out of love with Hibernate".
http://stackoverflow.com/questions/16209512/is-there-any-javafx-image-editor http://code.makery.ch/java/javafx-8-tutorial-intro/ https://github.com/marcojakob/tutorial-javafx-8
No you'd use: int n = getCount(); for (int j=0; j &lt; n; j++) { // do something } I thought that was obvious but I guess I had to spell it out. As for your other points: Dude, if you're writing code by yourself (as you obviously do) then you can do whatever you want. 
https://github.com/fujaba
http://en.wikipedia.org/wiki/Time_Out_%28album%29 they did not take 5.
&gt; I thought that was obvious but I guess I had to spell it out. Er, don't know why you're being condescending. In that loop test you're using a local variable, not a property of a class... Which was exactly what I was implying. I guess I didn't spell it out enough lol &gt; Dude, if you're writing code by yourself (as you obviously do) then you can do whatever you want. Er, I obviously do? Guess I should break the news to my team lol. I am assuming you're getting rustled because you're being condescending and skipping my points. My takeaway from this is you think properties are bad essentially because you don't know if you should call the backing variable `_var` or `Var` or something.
I don't think you're getting the whole picture on modularization. The primary benefit isn't modularizing the JDK itself, although that does have benefits, but creating a standard module system for developers of frameworks and libraries. The benefit of breaking up the JDK is that you can drop legacy packages, replace parts with alternative implementations, or do partial upgrades. The larger benefit covers when two libraries you want to use, say Spring and Hibernate, depend on the same 3rd party library but different and incompatible versions. A module system would allow Spring to depend on its version and Hibernate to depend on its version. Basically eliminating Java's longstanding problem of "DLL Hell" 
Whatever you say.
Thanks, maybe this is what I was thinking about!
There's a certain anti-ORM circlejerk that you'll hear from the other posters in this thread. Quite simply, Hibernate is designed for a certain use case scenario: fairly simple data interactions, where insertion/modification/deletion of records into relatively simple table structures is all you need. If that's you, then knock yourself out with Hibernate. If not, investigate alternatives like MyBatis (which actually works fairly well--I migrated a project from iBatis to MyBatis this year and it was actually pretty smooth). The fact is that trying to use a domain specific language (and APIs count) other than SQL for database access means you have to know two domain specific languages for database access: the one you're using and SQL. I would not use raw JDBC. Ever. Let your ORM do that for you. But a good ORM should allow you to pass properly escaped, hand-made SQL queries to it. So should you use Hibernate? Maybe. If it's the only option you have because of politics, it's better than raw JDBC. 
No idea what any of this stuff is, it just looks like alphabet soup. Working on documentation?
Also gave a motorcycle 4 wheels. :)
What the **fuck**?
I love FP, big fan of Haskell. I'd say I'm intelligent just enough in these matters to know that replacing loops with callbacks is not what FP is about. Extend a language indefinitely and you'll get another version of C++. And this cannibalizing policy is for me hard to understand.
Related examples (pdf): https://github.com/laforge49/JActor2/raw/master/docs/JActor2RevisitedByExample.pdf
There are four different ways to create objects in java: Using new keyword: This is the most common way to create an object in java. Almost 99% of objects are created in this way. Syntax: MyObject object=new Object(); Using Class.forName(): If we know the name of the class &amp; if it has a public default constructor 
You're always free to send a pull request :D (though it seems the repo isn't being super actively maintained, unfortunately)
What is your current level? Do you know any other programing languages already or are you just starting out? - Providing a little more detail will probably go a long way towards gathering advice more targeted to your specific situation.
Agreed. The painting of Swing components inside JavaFX containers isn't easy to manage / stable. That said, if someone was planning an app from scratch, with that in mind, it is probably doable.
Download an IDE (NetBeans, Eclipse, IDEA) and experiment with the sample Java projects.
The adder was written in PHP: https://github.com/Herzult/SimplePHPEasyPlus
That's the one, thanks!
It seems that having a column name as "INDEX" was causing this.
I've experimented with public fields when (a) the class is immutable, and (b) the class isn't a part of a public API (e.g. it's package-private). I can't say I'm completely comfortable with it. I'd much rather have language support for [first-class properties](http://blog.joda.org/2014/11/no-properties-in-java-language.html) that eliminate boilerplate without sacrificing flexibility...
I found the fujaba [reclipse project](https://code.google.com/p/reclipse-emf/) and the fujaba [archimetrix project](https://code.google.com/p/archimetrix/), but there's no build provided?
Interesting. We always used the JEE server configuration for the load order. I wasn't aware of doing it this way. 
I'm not a fan either, especially the factory pattern abuse.
Currencies can appear or disappear, and thus you don't want them as an enum since that makes it part of the API. Even if it's not common, this type of API needs to support every currency in the world for an extended period of time. It may rely on "magic strings", but those strings are rooted in international standards, so it's not exactly the type of arbitrary choices that is the sign of a code smell. Finally, Java doesn't have operator overloading, so how exactly do you expect them to use standard operators for common operations?
I find JDBI to be incredibly useful and have used it in multiple production products. I in fact know the creator/maintainer of the project and worked at Ning where it was initially developed. From a maintenance perspective I find it incredibly easy. Since it's annotation and interface based it's easy to mock out for testing. And making changes to either the queries or interface is simple and straightforward, there's no need to rewrite a bunch of code. The documentation is pretty good and it's easy to map POJOs into queries and easy to transform results into your own internal POJOs. Additionally it's a small, tight library with an active and responsive maintainer; not that you'll be likely to encounter many issues. Personally I like JDBI because it provides a simple API that abstracts a lot of the pain out of working with JDBC. As a developer I tend to prefer lower level abstractions that I can then build into my own projects while still having a good deal of control of the underlying mechanisms and JDBI definitely fits my style incredibly well. This lower level abstraction is a double edged sword as you have to write all your own SQL and really nothing is done for you, it's just an easier way to work with JDBC. **tl;dr: JDBI is a performant, production ready, easy to use library that takes the pain out of JDBC and nothing more.**
Is it good at handling dong? ^(In case I go to Vietnam...)
What exactly does JArchitect do and SonarQube does not? 
Looked at the product expecting to see a competitor to Visual Paradigm or other architecture tools, instead found a static code analysis tool...
Note also that you have to contact (email) support to get the licenses.
Just an FYI, being a good programmer has nothing to do with how many ide shortcuts you use. Yes, knowing your ide and it's feature are important but aside from a few shortcuts (Ctrl shift o/f) they aren't accessed frequently enough to be all that useful to remember. Its the same reason I don't use vim...relatively speaking, I spend way more time thinking about what I'm going to write. The bottleneck for coding speed is not how quickly I can bang my hands against the keyboard.
As long as there is support for creating custom currencies, there's no need for rush cycles like this. Timezones follow the same pattern, you can do TimeZone.getTimeZone("America/Los_Angeles") What if I enter America/Los-Angeles instead? These things do change from time to time, but rarely enough that you could just turn them into statics or enums.
Any specific reason for wanting these? The binaries for JDK 8 are based on OpenJDK. Unless you are building yourself, the OpenJDK project seems to be a source code repo for packagers to build their versions on
The Oracle and Zulu builds of JDK8 are restricted; they don't have all the cipher suites enabled and the user needs to jump through hoops to enable them. That is fine for developers, but asking my app's users to install the "JCE unlimited strength jurisdiction policy" is *ahem* not going to go down well.
It's a scam of some sort. I just heard back from a person called Emma, she was wanting numerous pieces of information including a phone number and address as she puts it: "in order to emit a valid license file"
No, the moral of the story is that even in 2014, close to 2015, we're stuck with non-SQL-standard interpretations of basic data types in some databases.
&gt;CoderGears Support &lt;support@codergears.com&gt; wrote: &gt; &gt; Hello, &gt; We will be glad to offer you a pro license of our products, could you please send us your phone number and address in order to emit a valid license file? &gt; Best regards, 
I'm pretty sure that anyone who would be running this would probably also have access to a build environment that includes Jenkins and Sonar connected to SVN or Git(hub) anyway. 
&gt; do you really want to do a JRE update each time a new currency is added not necessarily, but... I don't think that happens all too often (BTC?) I'm not really a huge enum fan, but the point about 'they come and go' on its own isn't enough to make enums a bad choice. My one thought is that almost anyone doing a lot of work with multiple currencies is likely going to be a larger company, and the addition of currencies in an application is almost always going to be accompanied by other application changes (not out of a technical requirement, but likely a business requirement). Assuming this was able to be modularized/externalized somehow, dropping in a new currency module (vs an entire new JDK) would still require a bit of testing/dev and possible small downtime 
Ah yes, I feel you on that. We deploy on Linux and work around the restriction by using the TAR option and just adding the two jar files.
syserr and main Also work
One of the differences between thsi and SonarQube is that it provides a SQL like naviagation ability through your source. See for example their latest blog post: http://www.codergears.com/Blog/?p=768 investigating IntelliJ
There's a small difference between the two approaches. Modifying the library precedence in the faces-config.xml modifies the order in which the faces-config.xml files are processed. So you don't really modify the load order. However, modifying the load order using the JEE config does the trick, too, so from a practical point of view the difference isn't important.
This
Blegh, what a bogus reason. Unit testing is as overrated as the factory pattern.
&gt; If you’re using JPA / Hibernate, you can only hope that they got it right, because you probably won’t be able to fix those queries, otherwise. Which they have, which they are. And you can fix those queries even if they havent. I understand marketing, but this is taking it to another level.
I'm getting tired of the JOOQ related spam on r/java and the sockpuppets that upvote it. After years of it, one can only come to the conclusion that it is moderator approved.
true this. marketing is marketing, but to promote an inferior technology like it's the best thing since slice bread ... to programmers nonetheless .... maybe grandma will believe this shit, but not somebody who knows what they're doing.
So you knew about the issues that might arise when binding `java.sql.Timestamp` to Oracle via JDBC, before?
A month ago I also tried out dropwizard. It's just awesome. For me thats the first thing in Java that allows you to do "rapid development". Within 20 minutes you can setup an simple API. The source code is nice written and one can really learn from it. But one think I don't understand. So it is only for building APIs, right ? You could than use AngularJS. But do you than have to host you frontend than? or in Assets ? Does it than communicate via JSON ? How to avoid that others use the api? So whats the missing link?
Plan to learn in an iterative manner. What I mean by that is understand that you will likely not know or understand everything all at once; you will learn and grasp some of the material now and then later on you will likely find that some things will "click" and tie together a lot of things you previously did not understand (or maybe thought you understood but didn't quite). Perhaps the biggest piece of advice to a beginner is "don't get discouraged". (1) First you should aim to get familiar with the underlying fundamental concepts of programming. These are things that apply to just about all programming languages in some way; Things like primitive data types (int, float, char, boolean, String* - technically String's are objects in Java but don't be concerned with that for now); Flow-Control Logic (Conditionals such as IF-ELSE statements and Ternary statements, Loops such as While, Do-While, For Loops, etc), understand Scope (this one is tough especially for beginners and is tied to the "this" keyword which is directly ties to knowledge of Objects and Classes), understand Methods/Functions, Importing and package management, Instantiation (creating instances of Objects). (2) As you progress through the above you will certainly come across a lot of keywords that are unique to the language you are learning in - in this case Java it seems for your case. This is language syntax and, while a lot of it will be unique to Java, the knowledge of these and how they work will carry over to other languages in many cases. These are things like your access and membership control keywords (public, private, protected, static, abstract) ... it is a long list and there are quite a few that you certainly don't need to even try to understand so early on ('transient' and 'volatile' come to mind - you can learn these down the road so you only need to be aware of their existence for now). (3) As you go through 1 and 2, you will probably run some examples or do some tutorials or test yourself with some practice problems (and you should as it becomes very easy to get used to just copying directly from a book or video - realize that the sooner you start to freely think on your own the better. Most job applicants are given some sort of tests in their interview process which often requires writing code without an IDE and often just means handwriting code on plain paper or whiteboard). Now despite the statement I just made regarding IDE and interviewing - you should probably use an IDE as it makes managing code and projects better, IMO the suggestions expose you to library features and functionality that you may not learn about otherwise, and knowledge of an IDE is going to be a plus later on. For Java I always tended towards Eclipse and Netbeans, but do your own research. I do recommend you occasionally write your code in a generic text editor (Notepad on Windows, Gedit or even Nano/Vim on Linux, whatever they use on Macs...) and then compile + run your code from command line, and do this early on to at least understand what is happening underneath your IDE when you run your code from inside of it. (3) At any rate - you may start with a basic "Hello World" program. Then, as you learn the For-Loop, use it to print out "Hello World" N-number of times, and continue to build and alter your initial programs to make them more advanced as you learn new things in that manner. Understand Standard Input (stdin), Standard Output (stdout), Standard Error (stderr) and how they are used, so you can begin asking the user a question, take their response as input, then process it and display some response as output (or log a stack trace in the event of an error). Then you can begin to break out and write your own methods and call them when you need to. This will build out towards creating instances of Objects from existing classes in the library (Scanner class to take user input, Math class to access many mathematical functions) and even writing your own classes. (4) The ultimate goal is, of course, to start understanding OOP (Object Oriented Programming) which will be heavily used in game development. Don't be too concerned with the best practices and design patterns of OOP yet - you'll get there, but just know that it exists and the purpose it to compartmentalize applications by breaking down code into re-usable, smaller components rather than writing everything in one giant monolithic file. In fact you will not only write separate classes, but you will create separate packages which have series of classes that are related to each other in some way, but each should encapsulate a very specific process or piece of that functionality. (5) At some point you will get confident enough to branch out of tutorials and text books. Start looking at frameworks/platforms - things like Spring MVC and Tomcat/Glassfish. I don't personally am not a game developer so those examples might not really be of interest to you as they're more for building enterprise-leve software systems and web applications - the only Java game development platform that I ever looked into for a minute was something called "Java Monkey Engine" years ago, so I'll let you do research or others give better advice as far as that goes. Also check out open source projects on Github and try to get involved - start out as a lurker and just read through the code and follow the commit log to get a feel for how code is written and how teams coordinate and integrate themselves. Or even start your own project if you have a decent idea and try to get others to jump on (it doesn't need to be huge like "hey lets create the next social network"). Check into Android development - the cost of entry is basically free and mobile application gaming is big. ( * ) I also highly recommend you create your own Github and/or Bitbucket account and start to use them for Continuous Integration and Versioning Control because it is immensely useful and will more than likely be used by any development team you come across. 
pics or it didn't happen... those 4x3 pixel images are not impressive
Since you've used PHP, then a JSP webapp might be a good aim.
Which is a leaky abstraction from a relational model and often the database quirks leak in to higher levels. You can argue all you want, there is a lot of leak going from an RDBMS to an ORM. [Martin Fowler](http://martinfowler.com/bliki/OrmHate.html) has a piece on this. The fact that the RDBMS abstraction leaks through may not necessarily be bad, but it's certainly leaky and certainly any non-trivial app will encounter these leaks.
Well any programming language is a software language.. unless you meant something else? As for what you can build, pretty much anything. Thats whats awesome about programming you can build whatever you want. The language is more of a tool. There are some things that are better for certain languages, like sciency stuff with Matlab and low level things like drivers with C. For more Java specific things you might want to look at Android apps. It isn't hard to pick up the basics if you already know Java well enough. Like the other commenter said since youv used PHP you might be interested in web things. Theres a bunch of web frameworks for Java, iv never really looked at them except for Play which is pretty simple. Theres also the whole servlets thing, i know very little about that but i have read that that its kind of a mess. Basically just find a subject your interested in and build some project based around it. 
We recently did a quick demo UI for an experimental backend project. 5/5 would use again for dynamic display of server status that can be shown through SSH.
The biggest Java feature is not the language itself but the multitude of open-source libraries that you can harness. If you are looking for projects, I would start with one that does something you find cool and code with it for quick results. Although It goes against your "from scratch" philosophy, you'll learn plenty of coding styles and tricks from other people's API, build stuff that does real work and give you more ideas for new projects. Soon enough you'll find something that hasn't been solved to your satisfaction and start from scratch... with a purpose.
There are a ton of ui frameworks for Java. It depends on in you are developing a native app or Web app though
Good for you. And how did you learn about it? By doing or by googling? If it's the latter, it might've been someone who wrote about it, just for you! If it's the first, it could have been *your* blog post that would have helped others. If those others are able to see past the advertising at the bottom of the article, they've still learned something useful for everyday JDBC usage.
I see your point. Fair enough. Although in this particular article, a couple of remedies have been suggested to prevent this particular flaw from leaking into the application.
Here are some examples I made without external libraries: An alternative Steam software library that automatically reads the games you own from the local Steam files, supports renaming (in this client - no Steam files are ever altered), 2 tag levels (= even tags for tags) with a powerful filter, simple filter textbox, various sorting options, multiselect (which has by now arrived in the otherwise still quite rudimentary Steam library, too), keeps track of when it first got to know a game, when you last started it (via this client), can list all DLC, can of course start games (or trigger install), can show the store page of a game, etc. A file/directory rename tool in which you see the whole chosen directory and can edit the elements in it right away as if this were just a text in Notepad. (Actual renaming doesn't happen until you explicitly say so, for all entries or for individual ones.) Highlights changed lines (if they are actually different), has "infinite" undos/redos, block select, multiline typing, block copy/cut/paste, can trim the clipboard (optionally cutting off the file extensions), so you can now easily copy a whole directory's content as a text. A nice looking Battleships game with sound effects and music in less than 200KB. &gt; What can I actually build with Java? There are some things that Java isn't all that suited for, but most such hurdles can be overcome with some effort (better than changing the language just for such a situation), e.g. by using JNA/JNI (which I so far never did). Apart from that, I think the sky is the limit.
I'll be interested to see if this effort from the spring team takes off, but really this looks like a semi-complete Netflix microservice stack, but dropping the lightweight Karyon for the not-so-light Spring. I can't really see what you might gain other than a few components that come pre-wired. 
Take a look at /r/ProgrammingPrompts for inspiration.
I'm not anyone's sock-puppet yet I have upvoted it. I have learned something new and I couldn't care less if Lukas is using it as a marketing tool to promote his product. It's a great content and that's what counts in my book. 
the problem is not the new information conveyed in the post. the problem is the spam. the problem is the bashing of everything else, and then coming to the rescue with jqqqqq. every single post. the problem is that those that have no idea what this posts are all about, they may even believe them. where did i find about it? probably stackoverflow i assume. 
So, how is the (highly contextual!) advertising on stack overflow different from ordinary content marketing? Everyone who puts something on the internet will market something. Most personal blogs will inevitably market the person who's blogging includiong all their convictions - perhaps an individual contractor selling his expertise and services. In this blog's case, it's a software product. Some people just blog for fun, of course, but they won't blog as often because they don't have as good of an incentive as those who follow some conversion strategy. You get free content, but you pay for it by having to look at advertising. 20 years ago, the content wasn't free - you had to buy magazines, which *still* had advertising in them. If you don't buy the ad's message, don't buy the product, fine. You're exposed to millions of similar ads every day that you already successfully ignore. As of right now, 81% of the people (out of a non-representative sample - stay tuned for a related jOOQ blog post about how to emulate `MEDIAN()` in PostgreSQL 9.4 via inverse distribution functions!) have upvoted this reddit discussion. If you believe that they're mistaken and ignorant of the fact that there is a "hidden" commercial message in it, and that they deserve interesting, ad-free content that is equivalent to the one posted here but without a commercial call to action, I cordially invite you to start a completely objective blog with high quality content to compete with ours. I'd more than love to subscribe to yours!
hahaha. yes, in the past i had to BUY the magazines (oh, the horror). if i didnt like them, i had the option to not buy them. on r/java though, i see the crap whether i like it or not. my option is to downvote it. usually i ignore the crap (that is, downvote it and move on with my day), sometimes it becomes annoying enough that i drop a comment (with the tacit understanding that the fanboys will downvote me to no end). you don't like it? tough luck. downvote me. about the &gt; (highly contextual!) advertising on stack overflow I only get to stackoverflow when im looking for an answer (i have a problem, and google sends me there). if the answer contains advertising for framework X, that's fine as long as it solves my problem.
This can go on forever, so I'll try to suggest something constructive that will allow you to give back to the community: Send an e-mail to Reddit with a feature request: You'd like to apply a personal filter to content within a subreddit. I'm sure that many people would appreciate that feature (I most definitely would), and in addition, many of these meta-discussions would actually disappear and discussions would get back on-topic again! That would be incredibly much more productive for everyone, and I'm sure, your day would have been much better than it is now :) &gt; if the answer contains advertising for framework X, that's fine as long as it solves my problem. See? And all we are trying to do with our blog is have Google send people to us, consuming our advertising and thinking that it's fine as long as the article solves their problem. And as you said yourself: You could've done the same: Read the title (and / or the domain name), and decide: Do I have this problem? Yes -&gt; Read / No -&gt; Ignore.
Dude sober up before posting, ok?
Take a look at /r/ProgrammingForKids
the marketing guy is correct though. you need both to be able to sell something to the masses. to other engineers though, not necessarily. 
You don't always need the client to generate page content dynamically with JSON. When you want to create a dynamic page on the server you can use technologies like JSP. There's really no right or wrong here, just whatever tools you need for the job. Also to note MVC isn't a framework just a design pattern. That pattern (or something similar) is often used on the client and is very much relevant.
I have experience with MVC style frameworks (mainly ASP.NET MVC and some Play) so I can't speak a lot about JSP or JSF. There is nothing preventing you from using a REST API along with a MVC style framework. The basic idea behind MVC is that your models are suppose to handle data access, views handle the ui, and controllers handle the HTTP logic. You can have your models call the REST API to get the data, then the views can call a model's method to get the data without worrying where the data came from. I think MVC frameworks address your concerns of separating the backend from the frontend. The MVC framework deals with the frontend and a REST or SOAP web service handles the backend. Also, you can use JSP in a MVC style way too. In that case, the JSP files become the views, the controllers extend HttpServlet, and the models are just POJOs. 
&gt; Why are web frameworks like JSP, JSF and MVC so popular? Two things - * My guess is that a *lot* of the jobs you see for JSF and Struts are either legacy systems or using software packages that have been around for a while. While out of fashion for new projects, there are a lot of systems still running on JSPs that aren't going to be re-written anytime soon. * The original goal of a many Java web frameworks was to keep developers in the J2EE environment and not require knowledge of the web stack (JavaScript, CSS, HTML). However, the growth of cross browser libraries like prototype and jquery have made development in the browser easier and more reliable. So rather than break up an HTML mockup into JSPs, you can take the raw HTML and wire in the data.
I think you are confusing some technologies. JSP is a "view" technology and not an application framework in the same way JSF is. Also MVC is a design pattern. To answer your question, you can get pretty far with just servlets and JDBC. But I'd bet that if your web site consists of more than a page or two delivering database content to the browser, you'll quickly discover why web frameworks are so numerous. You'll find you have a lot of similar, repetitive, but slightly different code for each bit of new functionality. If you have to maintain a site and keep it going, eventually it's likely that you'll reach the conclusion that there are patterns ripe for capturing. 
Thanks. I wasn't aware of that sub. I just posted it over there, too.
The MVC I mentioned is the new J2EE MVC: https://jcp.org/en/jsr/detail?id=371
I meant this MVC: https://jcp.org/en/jsr/detail?id=371
Are you trying to start an argument? Because this is a really poor attempt at that.
Probably much easier to do in a language like python, java seems like overkill.
This is the old-new-thing effect. I can guarantee you that in a few years most tech shop would go back to server-side rendering scheme started years ago. While JS frameworks for client-side rendering is nice and hyped, I don't quite buy it, intuitively. I start to see several companies are going back to server side rendering/templating (Twitter, Linkedin). Even prominent JS framework Ember.js is developing a server-side rendering counter-part for their Ember view. Amazon, the biggest online retail site in the US would never go client-side 100%. So yeah, history always repeats itself.
JSP, JSF and MVC are popular server-side templating technologies. This is where the view template is rendered to HTML on the server. The common use case is to implement multi-page applications based on techniques such as [progressive enhancement](http://alistapart.com/article/understandingprogressiveenhancement). REST serving JSON to usually JS client-side templating technologies, such as Angular. The common use case is to implement Single-Page Applications. Neither are golden hammers. You must judge your use case and decide where it makes the most sense to render the view template. For example, Twitter used to render their view templates on the client side, but due to bad performance, they switched to server side template rendering. If you're likely to render the page only once to drive-by visitors, then it might make sense to let the server render the template. If you expect the user to stick around and have complex interaction with the page, then it might make sense to let the client render templates for different parts of the page incrementally. Don't go into a decision like this with your mind made up before you analyze how the site is likely to be viewed by your users.
That is the same as the 'old' MVC
J2EE is specific and means a quite ancient version of the enterprise Java stack. The official term for the newer enterprise releases is JavaEE
Try the following books: 1- "Head First Java", it is very good at getting you the basics, in an organized way. Then when you are comfortable enough with the language, check out the 2-"Effective Java 2nd Edition" book.
No disrespect intended, but seriously?
It definitely is possible. Your task consists of the following: - read data from excel spreadsheet - convert that to a form you can work with - open a webbrowser - navigate to the appropriate page and enter the required data - validate the input For the first task, you can use [Apache POI](http://poi.apache.org/). This lets you open an excel file and read the data in as standard Java types. You can use standard Java to convert and validate your excel data as required. Then, to interact with a web browser, you can use [Selenium](http://www.seleniumhq.org/). Selenium is a suite of software which lets you interact with your browser through some standard APIs. It's primary use-case is testing as one writes code and automating interaction with a browser. [Here](http://www.seleniumhq.org/docs/appendix_installing_java_driver_client.jsp) are instructions on getting it set up with Java, and there are plenty of tutorials out there to get you started with real usage. Good luck! 
See [CDI interceptors](http://docs.oracle.com/javaee/6/tutorial/doc/gkigq.html).
You can use CDI interceptors for AOP.
I speak about A specification that vondors (Aspectj, spring...) should implement. cdi interceptors offer some AOP features, but not all of them
To start with it's Java EE, not J2EE. But that MVC is nothing new, and it's actually not specifically MVC, but ***action oriented*** MVC. There's already an MVC in Java EE called JSF. 
but CDI is intented for dependency injection not AOP 
java tutorial
50 seconds of you typing text that you could have spoken in 10 (or at least prepared)? You should be aware that this is sub-par.
CDI is a suite of specifications, Interceptors being one of them.
Do I smell some alcohol on ya? Cause this kinda post (incl. its rather emotional capitalization) seems typical rather for someone who's indeed Celebrating already than for a sober moderator-type. Merry Christmas to you, too.
Nope, not yet any alcohol. That was just a typo. We're just about to start the celebrations. Merry Christmas or Frohe Weihnachten!
You're welcome! CDI stands for "Contexts *and* Dependency Injection". See [here](http://cdi-spec.org/) for the different specs that live under the CDI umbrella.
you didn't deliver, I was expecting at least some kind of message in java code like System.out.print("Marry X-Mas"); but way cooler
Thank you. Merry Christmas to those who love Java:)
If you still want to use keyword "INDEX". You quote a table or column name with backticks in the mapping document/annotation. example: @Column(name = "`INDEX`", nullable = false) private String index;
Something like this http://stackoverflow.com/questions/19551794/draw-a-christmas-tree-with-x
More like this (not mine): public class HelloWorld{ public static void main(String[] args){ int treeHeight = 7; int treeWidth = 1+2*(treeHeight-1); int trunkHeight = 3; for(int i = 0;i&lt;treeHeight;i++){ String treeLine = ""; for(int j = 0; j&lt;treeWidth;j++){ if(j&lt;treeWidth/2-i || j&gt;treeWidth/2+i){ treeLine = treeLine + " "; }else{ if(Math.random()&lt;0.15){ treeLine = treeLine + "x"; }else{ treeLine = treeLine + "*"; } } } System.out.println(treeLine); } String trunkLine = ""; for(int i = 0; i&lt;treeWidth;i++){ if(i&lt;treeWidth/2-1 || i&gt;treeWidth/2+1){ trunkLine = trunkLine + " "; }else{ trunkLine = trunkLine + "#"; } } for(int i = 0;i&lt;trunkHeight;i++){ System.out.println(trunkLine); } System.out.println("Merry X-Mas!"); } } http://www.tutorialspoint.com/compile_java_online.php
I'm giving all my child processes a special message tomorrow morning, but only if they obey Thread.sleep() 
Good to know, thanks!
You can create jaw-dropping front-ends for a JSF app, specifically starting with v2.2, which allows for pure HTML 5 xhtml files to be used on the front end. Technically, you can do the same using v2.0 and v2.1 with the help of OmniFaces.
Try it and see.
Yes.
Sorry i'm not near a laptop(at work reading during break) so when your in a different class and you declare an object you have to put the class name for the object your declaring correct? 
Read [this](http://docs.oracle.com/javase/tutorial/java/javaOO/objectcreation.html).
I was going to do some enterprise Java schtick where I modified [FizzBuzz Enterprise Edition](https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition) to print Merry Christmas instead. After looking at the code for 10 minutes, I realized it would take me a good hour to figure out how it works well enough to modify it, and I have better things to do on Christmas morning!
 public class Tree { public static void main(String... args){ System.out.println( TreeOf .height(7) .trunkHeight(3) .baubleRatio(0.15) ); } interface TreeOf { BaubleRatio trunkHeight(int trunkHeight); static TreeOf height(int height) { return trunkHeight -&gt; baubleRatio -&gt; { int treeWidth = 1+2*(height-1); Predicate&lt;Integer&gt; even = i -&gt; i % 2 != 0; return range(1, height * 2) .boxed() .filter(even) .map( i -&gt; times(treeWidth / 2 - (i / 2)).concat(" ") + times(i).concat(j -&gt; random() &lt; baubleRatio ? "x" : "*") ) .collect(joining("\n")) + "\n" + times(trunkHeight).concat(i -&gt; times((height * 2 - 3) / 2).concat(" ") + "###\n"); }; } } interface BaubleRatio { String baubleRatio(double baubleRatio); } interface Concat { default String concat(String s) { return concat(t -&gt; s); } String concat(Function&lt;Integer, String&gt; s); public static Concat times(int i) { return s -&gt; range(0, i).mapToObj(j -&gt; s.apply(j)).collect(joining()); } } } 
Don't like this article. First of all, the title is a lie - "14 tips ...", while in reality 13 of those tips are telling how to use Spring MVC basics, without any tips whatsoever. What's worse, the last 14'th "tips" are totally wrong too. First tip tells: &gt;A controller class should not execute business logic. While in example we see that controller happily saves and deletes users using persistence layer directly. If a controller saves users in persistence layer, then it WILL become bloated by business logic eventually. The next tip is even more obviously wrong: &gt;Create each separate controller for each business domain. For example, UserController for controlling workflows of the user management, OrderController for controlling workflows of order processing, etc. A controller for each business domain? WTF? What if I have 5 forms which all list users grouped by different criterias? Reading this "tip" I'd guess I need to reuse one huge controller for all of those. What if some other form lists users with their recent bills? Should that go to "user" controller or "bills" controller? Generally, this tip is total bullshit and it totally makes me mad. In reality, the proper word for described concept is SERVICE (in case we are using layered architecture and not using DDD). Services are usually bound to some specific business domain. There can be a service for "Bill management", another for "User management" and controller would delegate client requests to specific services in service layer. Controller itself is tightly coupled with some aspect of GUI, not business logic. There can be controller for "User management FORM", another controller for "Bill Management FORM" and another for "Bill and User management FORM". And each of those controllers would be calling some specific services in service layer respectively. The only exception, when the OP could be right, is when we are dealing with thick clients. If the client does lots of micro-calls to server (usually desktop applications or rich web applications), then it could be ok (also, very rarely in reality) to make a very thin controller layer which partially exposes service layer to the client directly.
This isn't really the place to post this. /r/learnprogramming or /r/javahelp were made for this purpose.
I've always liked how Head First Java was laid out. It is a bit outdated. The best way to learn Java in my opinion is to start off with all the simple syntax items. Don't get obsessed with a lot of the OO stuff up front. Try a Swing app or two, not because there is a lot of Swing apps out there, but because doing a swing app gives you an insight into how events and classes (and inheritance) work before you ever move into the web side of things. Java is a relatively easy language, but there are a lot of libraries and frameworks people tend to push as "the thing" you must learn in order to do Java. 
AOP the way you see in many "Java" implementations, are actually bytecode hacks, which is why the reason they often break when Java Language and Bytecode specifications evolve. CDI on the other hand is a specification built on top of the Java platform in a way to avoid breaking compatibility with changes in the language and/or specification. If you care about paced and steady evolution, you should look into CDI and avoid AOP frameworks.
I liked this a lot. I'll save it for later (hopefully with comments from other more experienced programmers).
While comprehensive, I am not sure I buy it entirely. It seems like arguing it isn't needed because if you need it, here are some hacks to do some things.
This is simply wrong. It's basically using the argument "Java shouldn't have unsigned types because C does it wrong". The *right* way to do unsigned math is to disallow the implicit conversions that make C's math dangerous. Yes, something like (int32) &lt; (uint32) is problematic. That's why you disallow it and require them to be explicitly converted to a type big enough to hold both operands, in this case (int64) &lt; (int64). Yes, C does everything about this wrong. That doesn't mean it's impossible to do it right.
In 15 years of professional Java I didn't once need an unsigned int. Of course, you can say that this just means that I've never done anything performance-intensive, but you would be wrong. Show me an application where signed vs unsigned and long vs int length become a bottleneck and I'll show you a 2-byte int implementation that can do it where it is needed, locally. We spend 99% of our time in synchronizing some state from one place to another, be it main memory, some form of IO or synchronization. I fail to see a need for this complication in the language.
An unsigned byte would be incredibly helpful however.
Performance intensive? What does that have to do with anything? Signed vs unsigned only matters when dealing with non-Java code or data which uses unsigned ints; at that point Java's lack of unsigned ints can become a pain in the ass. I wouldn't suggest you haven't done performance intensive code, rather I'd suggest you probably haven't had to deal with unsigned ints from a non-Java environment. No, of course it's not insurmountable. But it's much more work than it needs to be, and it's not a lot of fun to deal with.
The problem is that one particular bit of a random double does not have a 50/50 distribution, while the entire random value being provided is still distributed evenly. That is an important distinction. The question is kind of silly anyway, since java's Random has a nextBoolean() which serves the use case in a straightforward manner. 
Or if you want to have an adjustable barrier: if(Math.nextDouble() &lt; 0.5) 
I quickly went over code. It's nice initiative. Website mentioned it is asynchronous. Can you share link of code, which makes it async? 
OP here. I was not trying to generate a random boolean, I was trying to make a 1 bit hash function for doubles with even distribution. I tried `(Doubles.doubleToLongBits(value) &amp; 1) == 1` and assumed that random.nextDouble() has a 50/50 distribuion of the last bit of the generated doubles. If you wonder why anyone would need such a function, the answer is in the comments to the question.
I'm pretty sure we use a version of [this algorithm](http://www.cs.cmu.edu/~quake/robust.html) for performing robust left of line calculations. Edit: I remembered there is an open source java version of the Shewchuk algorithm [here](https://github.com/dhale/jtk/blob/6a7cd33484f20f29a0ab1689f33ea8b506571931/src/main/java/edu/mines/jtk/mesh/Geometry.java)
Hashing a double doesn't have anything to do with left of line calculation. That's just an example of an algorithm that has a set of outcomes for which we could pick both of two possible answers.
Only for nextDouble(). It is a known quirk of how doubles are generated that the bit patterns of the doubles are not truly random, but the values they represent are evenly distributed. So doing anything at the bit-level for generated doubles can sometimes lead to unexpected results, but using the values as a whole are still very reliable. By way of comparison, I just tested this same kind of bit math on nextInt(). All 31 bits were individually evenly distributed: Testing 2000000 random ints Bit 1 -- 1000113/999887 Bit 2 -- 1000056/999944 Bit 3 -- 999699/1000301 Bit 4 -- 999966/1000034 Bit 5 -- 1000004/999996 Bit 6 -- 1000484/999516 Bit 7 -- 999711/1000289 Bit 8 -- 999014/1000986 Bit 9 -- 1001002/998998 Bit 10 -- 1000264/999736 Bit 11 -- 998939/1001061 Bit 12 -- 1000195/999805 Bit 13 -- 998782/1001218 Bit 14 -- 1000227/999773 Bit 15 -- 1000666/999334 Bit 16 -- 999787/1000213 Bit 17 -- 999953/1000047 Bit 18 -- 999094/1000906 Bit 19 -- 1000934/999066 Bit 20 -- 999452/1000548 Bit 21 -- 999208/1000792 Bit 22 -- 999527/1000473 Bit 23 -- 999935/1000065 Bit 24 -- 1001337/998663 Bit 25 -- 1000058/999942 Bit 26 -- 999256/1000744 Bit 27 -- 998699/1001301 Bit 28 -- 998871/1001129 Bit 29 -- 999257/1000743 Bit 30 -- 1000502/999498 Bit 31 -- 1000123/999877 And as always, use the next*() generator that is as close to your use case as possible. In this case, OP was using the Double generator simply as an input generator to test a function he wrote. If you actually need a 50/50 random, use nextBoolean().
What about `nextLong` / `nextInt`?
The lack of unsigned types was something I found infuriating about Java when I started it, but over time I realized there was only one type for which I really needed it: **bytes**. I have *always* wanted bytes unsigned and *never* signed. You can certainly work around it, but you always have to do so and it never stops being annoying. For Java's bytes to be signed is wrong. For the other types, I have not really missed unsignedness.
Typically java is not at home for iOS (but very much is at home for android). With that said, you can run (and submit) iOS apps using java with avian ( https://github.com/ReadyTalk/avian ). You can compile avian in a pre-compiled mode, and not a JIT mode, so it can pass iOS's requirement of no runtime interpreted languages. The reality is that it is apple's inability to be flexible around language usage that makes java hard on iOS. AFAIK, avian is your best tool for getting java on to iOS.
hack: [Byte.toUnsignedInt](https://docs.oracle.com/javase/8/docs/api/java/lang/Byte.html#toUnsignedInt-byte-)
What is the difference between the two. 
For general Java, the classic Java in A Nutshell from O'Reilly has just been updated and reissued.
RoboVM. And LibGDX (which uses RoboVM for iOS) for games. Although I feel obligated to say that the apps developed will not be of the same quality as those done in the native language (Obj-C) with the normal tool chain. 
JavaFX is new. It is replacing Swing.
Try "Swing" second edition by Matthew Robinson and Pavel Vorobiev. Like others have said, JavaFX is the newer alternative for GUIs in java, but there is nothing wrong with learning swing if you want to. There are tons of applications written with swing. 
That's basically just using the most significant bit instead of the least. I can see where someone might expect the bits to all be equally useful.
question on your question: why are you using AOP for? I always liked the approach of separation of cross-cutting concerns, but I can never find another use case beyond the basics (you know, log, security, transactions, caching) and the are already taken by spring... [Wikipedia](http://en.wikipedia.org/wiki/Cross-cutting_concern) list some more, but what are you trying to solve?
But, because the values are disturbed evenly, even after normalisation this still has a 50/50 chance :) Also if you adjust it to say 0.40 it's not only the most significanr bit anymore 
Well is javaFX just updated swing? Do you still create JFrames and JButtons and do you still implement ActionListener for an event handler?
You can make iOS apps in java using [Codename one](http://www.codenameone.com/)
Stop spamming your website, read the [Reddit rules](http://www.reddit.com/rules/).
No, JavaFX is rewritten from the ground-up. If you're going to learn just one then JavaFX is probably the better option as Swing will become deprecated, though Swing is still more established at present. Searching for say "JavaFX Swing differences" for more info, e.g. [this SO question](http://stackoverflow.com/questions/3443354/what-is-the-difference-between-java-desktop-application-and-javafx).
Yes one of the most popular ARGs uses LibGDX (Ingress)
Did you read what [I wrote before](http://www.reddit.com/r/java/comments/2qfzj4/java_bubble_sort_array_example/cn5qdl2), /u/javac-in?
Advertising.
Blogspam...
Could some one put in a fraction more effort into showing how this would actually benefit common use patterns? 
Like when you load an object graph from a cache and then extract a children of children collection with just a few lines of code.
Yeah, that helped immensely. Sorry. I just don't get this. 
When you map a collection you get a stream of streams. To flatten it you use flatMap so you get a stream of grandchildren instead.
The things I forget from working for years on legacy systems come rushing back to me with a single sentence comment on reddit. Sorry I couldn't understand what you said earlier. 
https://github.com/google/j2objc for game logic, then put the menuing in swift is your best bet
So I've been using C++ and Java since the languages came into existence, and have been fortunate enough to work on large scale financial systems in both languages. Except for occasional usefulness for unsigned bytes (already mentioned by @okmkz), I have never ever missed unsigned integers in Java. I have, however, spent countless hours fixing suble bugs in C++ due to signedness conversions. The extremely rare cases where unsigned arithemtic can already be handled quite easily. That said, a good monetary type is needed (likely in JDK9, fortunately)
This article misses one final step, which is producing compiled output with [JavaCompiler](https://docs.oracle.com/javase/7/docs/api/javax/tools/JavaCompiler.html)
Bubble sort is very good in some cases that you often end up with in real applications (small, mostly sorted lists). It's because bubble sort accesses memory sequentially, which is very fast while more complex algorithms (more efficient in the O-sense) tend to chase pointers, which makes them perform worse for small n. That's why many libraries pick something like bubble sort when sorting small arrays.
Your final output was a plaintext java program on stdout. The Java compiler is actually implemented in the jvm itself, so you could instead output or run the code as a compiled product instead of printing the code. Then you go full circle and ditch the original interpreter, making you program a full compiler and runner of bf. 
Now I understand that you are referring to the second part of the article. Thank you to pointing it out, I will sure try to do it. I think that in the case of Java would be impratical since the JVM does not allow more than 64K segment code in a single method. Thank you again for your suggestion :)
Then that's the real challenge. Figure out how to compile down arbitrary bf to run on the machine without accidentally ending up with an interpreter again. Code golf is fun 
This post would be better in /r/javahelp
You can use [LibGDX](http://libgdx.badlogicgames.com/) to build apps for most desktop and mobile platforms, including Windows, Mac, Linux, Android, iOS, BlackBerry and HTML5.
What you are trying to do isn't really possible. You should be storing your database in a separate file. If you want multiple users to be able to access the same database, you need to have a way of transferring that file around. You could set up some sort of special server, or just use Dropbox. (Yes that is messy, but it works.)
SQLite or setup MySQL on a VPS.
Sounds like you don't need to do any relational queries. So, why not use a flat file (xml or json) as your db? 
There are better options than SQLite or Derby; definitely not mysql for your project. For java, checkout h2 database or hsqldb. Both are database "servers" that can be run just as easily in the local java process, meaning they run in "embedded" mode. They do require 1 or 2 files to be stored somewhere (of your choice) on the local file system. For a completely self contained setup, you can definitely extract the h2 or hsqldb files from the executing jar (the jar is just a special zip after all ) and copy them to a temp dir, then start the database in embedded mode. When shutting the app down, you can then first shutdown the database and then re-zip the database files back into the executing jar. I wouldn't necessarily recommend doing that (above), but it that's really what you want to do then it can be done quite easily.
Where did you get the idea he doesn't need to run relational queries? This sounds like a small inventory app to me, nothing wrong with using a lightweight / embedded database.
I would like to know how to modify something inside of a running jar.... Because that is what the op wants to do.
Just to add to this (as you may experience problems with file locking), stackoverflow has some information on modifying executing jars: http://stackoverflow.com/questions/2463785/modify-executing-jar-file
Easy: open the file, append data, close the file. Done. Three invocations: TheHorribleTruth@alderamin:~/Downloads/selfmod$ java -jar selfmod.jar --- Exec Selfmod --- Got jar file: selfmod.jar Stats of file selfmod.jar are: Size : 2541 Last modified: 2014-12-26T23:33:41Z Appending dummy file "appendedContent1419636830511.txt" Content appended. Stats of file selfmod.jar are: Size : 2715 Last modified: 2014-12-26T23:33:50Z TheHorribleTruth@alderamin:~/Downloads/selfmod$ java -jar selfmod.jar --- Exec Selfmod --- Got jar file: selfmod.jar Stats of file selfmod.jar are: Size : 2715 Last modified: 2014-12-26T23:33:50Z Appending dummy file "appendedContent1419636836960.txt" Content appended. Stats of file selfmod.jar are: Size : 2889 Last modified: 2014-12-26T23:33:56Z TheHorribleTruth@alderamin:~/Downloads/selfmod$ java -jar selfmod.jar --- Exec Selfmod --- Got jar file: selfmod.jar Stats of file selfmod.jar are: Size : 2889 Last modified: 2014-12-26T23:33:56Z Appending dummy file "appendedContent1419636840524.txt" Content appended. Stats of file selfmod.jar are: Size : 3063 Last modified: 2014-12-26T23:34:00Z Contents before: TheHorribleTruth@alderamin:~/Downloads/selfmod$ unzip -l selfmod.jar Archive: selfmod.jar Length Date Time Name -------- ---- ---- ---- 69 12-27-14 00:33 META-INF/MANIFEST.MF 0 12-26-14 23:58 selfmod/ 3958 12-27-14 00:33 selfmod/Selfmod.class -------- ------- 4027 3 files Contents of jar afterwards: TheHorribleTruth@alderamin:~/Downloads/selfmod$ unzip -l selfmod.jar Archive: selfmod.jar Length Date Time Name -------- ---- ---- ---- 18 12-27-14 00:34 appendedContent1419636840524.txt 18 12-27-14 00:33 appendedContent1419636836960.txt 18 12-27-14 00:33 appendedContent1419636830511.txt 69 12-27-14 00:33 META-INF/MANIFEST.MF 0 12-26-14 23:58 selfmod/ 3958 12-27-14 00:33 selfmod/Selfmod.class -------- ------- 4081 6 files Sourcecode: http://pastebin.com/eLHNUVBU
OK, your outputs look pretty legit, but I cannot get this to work for myself. My initial suspicion was that the reason you couldn't self modify was because the jar file would be in use by the JVM. If you look at the Stack Overflow link that Janpu provided, that looks more like I would expect. This Exception seems to be consistent with the "in use" logic: Exception in thread "main" java.io.IOException: Could not make temp file (Throwaway.jar) at throwaway.Throwaway.addFilesToZip(Throwaway.java:36) at throwaway.Throwaway.addDummyFile(Throwaway.java:27) at throwaway.Throwaway.run(Throwaway.java:22) at throwaway.Throwaway.main(Throwaway.java:71) Yes, I named my project Throwaway. Any suggestions? Edit: grammar, and added Stack Overflow sentence.
"considered harmful" titles are themselves considered harmful.
Did you not read the website? The 1Z0-804 explicitly says the 1Z0-803 is a prerequisite. Edit. Hrm. It used to say that all the exams were prerequisites, but that part seems to have been removed, or I am just not seeing it any more. For books, I have this one: http://www.amazon.com/gp/aw/d/B00N9IC9Y0/ref=mp_s_a_1_1?qid=1419648029&amp;sr=8-1&amp;pi=AC_SY200_QL40 And it's good. In terms of jobs, the 1Z0-804 is arguably more useful. Certifications alone won't get you a job though. Being book smart doesn't make you work smart. Certifications will help you stand out, but they won't get you a job.
CEO of Spartez Wojciech Seliga said something like this: *There are two books every Java developer has to read. Effective Java by Joshua Bloch is the first one. After that you may think you know everything. Second one is Java concurrency in practice. After that you realize you know nothing.* Sorry for my possible mistakes, because I don't speak English very well, but I hope i helped you a little bit :) 
Release notes: https://jira.codehaus.org/secure/ReleaseNote.jspa?projectId=10500&amp;version=20819 
Another possible direction is generating the JVM bytecode directly. I ended up writing a [Brainfuck to bytecode compiler](https://github.com/pdehn/fjck) when I first started experimenting with the [ASM](http://asm.ow2.org/) library. Not terribly pretty and certainly not practical, but it was a fun mini-project.
I can't agree. We're both guessing here, but I've written many little apps like this. The frontend in Swing is irrelevant to sql vs xml. H2 would be a perfect fit for this app. Even just looking forward (a tiny bit), an embedded database allows the app to scale (with 3 lines of code change) to a multi user app that can be run by multiple people at the same time on a local network. Btw, a spreadsheet is a horrible way of maintaining inventory, I really hope you were joking.
Thank you for sharing your work :) 
 3 words : Factory Design Pattern
Please don't submit the same link over and over and over again. It's considered spam and goes against [Reddit rules](http://www.reddit.com/rules/).
Why do I like it? Because anyone that wants to make my object X doesn't have to wait for the auto complete dialog box to appear before they can determine which is the next thing to be followed by commas. I can easily add parameters, remove parameters, or set default values to parameters without changing the object creation code. If I want to lazily build an object or conditionally set values for the constructed object, I can do that. I can push all my state changes for the object off into object creation time and then settle with a nice immutable object at the end of it. (Rather than having a mutable object whose state is only there for the construction of the object).
nice method name: givenUsingTimer_whenSchedulingTaskOnce_thenCorrect() 
I never heard that Java 8 could be less stable than 7. My personal experiences with Java 8 have all been 100%, and it has a lot of better stuff to offer than Java 7. I have been making my stuff with Java 8 for over half a year now and have never regretted it. I don't know about this apt-get business, but if you're looking for an interaction-free (and crapware-free) installer, https://ninite.com/ should have that.
Java 8 is perfectly stable. http://www.webupd8.org/2014/03/how-to-install-oracle-java-8-in-debian.html