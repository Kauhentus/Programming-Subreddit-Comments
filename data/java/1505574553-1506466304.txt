OP's title is misleading. Don't think IBM is trying to mislead anyone. 
&gt; This is an entirely separate Java implementation than openjdk It's not. It's just a VM bundled with OpenJDK classes. It might work better / worse in some situations, but I don't see it being used very much.
It's the Internet. I can't tell without an appropriate emoji permutation üòúüòãüòÑüòÅüòâ
Especially since they didn't provide any examples or explanations of how OpenJ9 outperforms hotspot
It's not a JDK it's a JVM bundled with OpenJDK
Oh I see. I get this one also when I searched for my query. https://stackoverflow.com/questions/24694050/what-are-the-difference-between-ibm-jdk-and-oracle-jdk
TS is structurally typed with a very flexible type system (unions, intersections, aliases, etc.). You don't have to code differently, even if you're going for "idiomatic" code, which was a major goal of TypeScript as a language. In fact the idiomatic TS class happens to be the most efficient and best performing type of object for any mainstream JS runtime (i.e. flattened prototype). Something else is going on but as I can't see code, I can't say anything further.
Compared to C/C++, it's got the garbage collection. I don't like having to worry about memory management when I'm writing production stuff. Compared to dynamically typed languages like Python, I like the compiler being able to help out before run time. I'm using TypeScript a lot lately and this helps a lot with avoiding bugs and working on teams, but I find the tooling around TypeScript to be annoying. Pulling in a library and having to keep its type definitions in sync with the library itself is... bizarre. XD
Well you could say that if you only ever returned static values, but if the return is ever a calculation of some sort, then you are still in the same boat
I agree with you, but I think your comment can be summed up as "If the class is modeling a *thing* override equals (and hashcode) if it just contains behavior don't worry about it."
My point is that non-project specific stuff is not an issue, once it has been written it has been written. Before modules and packages were called modules and packages, they were just libraries, and with proper versioning controls there is no pain in the butt.
IBM assisted in the holocaust. (Pick a source: https://duckduckgo.com/?q=ibm+assisted+in+the+holocaust ) Meanwhile, there have long since been better people doing an opensource JDK etc: https://icedtea.classpath.org/wiki/Main_Page
I'm very very keen to see how cotenant memory management works on this JVM. I have a workload that sporadically allocates *tons* of heap memory, then deallocates 98% of it for spans of up to 45 minutes. The Oracle JVM keeps the sparsely allocated heap in the process... unless the old serial GC is used. If the IBM JVM can compact the heap and release the unused memory to the OS, I'm 100% on board.
no thanks * submit bug report * spend 5 years arguing with 10 different engineers all trying to CYA * ... * profit in this case, i think oracle benefits from the "bug" as it helps (or at least used to) drive customers to the embedded solutions that they make money from (vs SE that's free). but even in cases in which fixing the bug would benefit oracle, prosecuting a bug report is a lot of work. and i've never had one fixed before i had moved on or integrated a workaround (and that's not limited to oracle - most projects go through a very narrow time window during which they're engaged and responsive to bug reports, and beyond that there are too many vested interests and everything slows down dramatically)
Gradle is an interesting beast. To think that a build tool needs a background process/server running. Just weird.
YouTube player for music organized into 36 genres. Java backend generates the data for the "static" site http://remixrotation.com/channels.html
my "rule" is that single-exit is required for methods that are longer than one screen also, that methods which don't fit on one screen are probably too long and should be broken-up
That jvm cold start time tho üòì
Why do you think this is? I feel like two people working on the same project, but different files, at once would be relatively straight forward and useful. I have done partner programming in the past and the short time between edits and merges add up and seem like a hindrance. I understand the power of Git, but I'm surprised by the potential that hasn't been acted upon yet.
What's the relevance of that? Also when citing sources you should actually ehem cite a source, not a search engine.
Just because Management 70 years ago made a decision that is undoubtfully questionable, they can be very well fit to have a good implementation of the java vm. I mean, ibm isnt exactly a company that never delivered good Software. 
IBM is also experimenting with using GPUs to accelerate the Stream API but I don't know if it's part of the production build or not.
Side project, A library for simpler end-to-end encryption https://github.com/JigarJoshi/otr
Well, I hear you, just hope it is not the only reason for gradle to be somewhat faster than competition.
I don't particularly recommend it because it's faster, I just find it much much nicer to work with than xml or sbt. Never used ant or other pre maven tools but I'm assuming they are even worse.
Please give it a try using the OpenJDK9 with OpenJ9 binaries at adoptopenjdk.net and let us know what you find out! I encourage you to open issues at our github.com/eclipse/openj9 repository to tell us what went well and if there's anything that didn't meet your hopes.
Still working on this story, but the gist is at the main project web site www.eclipse.org/openj9 . There's no data there, but we've been pretty busy just getting things out the door!
Eclipse OpenJ9 is not owned by IBM; it is an openly governed project at the Eclipse Foundation with flexible licensing (AL2 + EPLv2 with a secondary license compatibility with the GPLv2 license used by OpenJDK). If you want to participate at the project or use it to improve your Java application runtime performance, we'll welcome you along with anyone else interested to developing and working in the open with Java and other language runtimes. If you don't want to, that's up to you. But at the same time, I want to express my profound respect for the literally hundreds of incredibly intelligent and careful developers, both currently and previously employed by IBM, who have spent years of their lives developing this JVM, trying to make it the best JVM implementation they possibly could. They worked and do work incredibly hard and, in my personal opinion, do not deserve the brush you so cavalierly paint them with in your comment.
Any chance of that being merged with OpenJDK? Project Sumatra really excited me.
I only know as much as you do :P
It just happened to be the first language I was able to actually learn. C++ was too cumbersome. Then C# came out and it seems cool but it was late to the game.
&gt; Larger Objects are in a different space than Small Objects Is this a pro or a con? I saw benchmarks of various Regexes on the JVM and CLR, and some benchmarks were severely inhibited on CLR due to it's Large Object Heap, which is garbage collected differently.
C# wasn't invented when I started. Then I became a Linux guy.
Note that what has been open sourced is the J9 JVM, not the IBM JDK. They are almost the same thing, but this JVM runs underneath the OpenJDK class libraries (along with a few patches needed to integrate OpenJ9). And, just so nobody misunderstands your comment, the IBM SDK for Java is used by all kinds of Java applications and services, not just WebSphere Application Server.
Literally who uses C#?
Try adjusting the font size by editing the netbeans.conf file. It's located in the etc directory where you have your Netbeans program installed. You'll need a text editor for this. Add (without the quotes) "--fontsize 16" to the netbeans_default_options variable. You can change 16 to whatever font size you want. The default is 11. This appears to change all the text to this size, including the text in the projects window. Other variables in the conf file are explained [here](http://docs.oracle.com/netbeans/nb82/netbeans/NBDAG/working_nbeans.htm#NBDAG162)
I really like https://codingame.com 
I don't know why I didn't consider this option in the first place. Thank you!
Java happened to be the language being thought at my university. There are way more Java jobs in my area. Despite being very open to other programming languages, I'll probably never look into c# because I don't want to use Windows and be tied to the ecosystem provided by Microsoft. Working with nearly any other programming language would be fine.
People keep paying me to code in it.
786 CRUD applications
Some of my work in java and groovy https://pyckio.com and https://pichtechnology.com
ecosystem, community, performance, cross-platform, tooling, etc. 
because Microsoft is terrible
Because C# is kinda shit with partial classes. Lame libraries. Visual Notepad is a kludge compared to intelliJ. Easier deployment. 64 bit across the board - no hidden 32 bit garbage from 1990's COM. Lousy performance. No hot reload. etc.. etc.. etc.. 
You can hold alt and use the scroll wheel to change size. https://stackoverflow.com/questions/18553853/does-anyone-know-how-to-zoom-in-on-netbeans-code
A transactional database engine/dbms that uses Java as the query language and continuations to enable "unlimited" concurrent queries https://github.com/db4j/db4j 
Probably preallocated buffers that didn't get used. Can you see where those arrays are declared? 
Nope. Yourkit says they're "unreachable".
There's a command line option but u won't be able to pay it till I get home edit: Try "--fontsize 14" 
Mine doesn't have anything like that. I only see 87 instances, 2968 bytes, on openjdk 1.8.0_141-b16, Linux. jmap says this: 1: 956 93984 [C 2: 448 51176 java.lang.Class 3: 8 24984 [B 4: 497 24784 [Ljava.lang.Object; 5: 945 22680 java.lang.String 6: 75 5400 java.lang.reflect.Field 7: 256 4096 java.lang.Integer 8: 121 3872 java.util.Hashtable$Entry 9: 89 3560 java.lang.ref.SoftReference 10: 8 3008 java.lang.Thread 11: 87 2968 [I ‚Ä¶ The largest is 1040 bytes, and that's CharacterDataLatin1.A, doing exactly what you'd expect static variables to do to assist with internal implementation details. 
There was a talk about this at FOSDEM: https://archive.fosdem.org/2017/schedule/event/openj9/. I can't remember what was so special about it either but I was intrigued so I might watch the video again.
I would assume it's preallocations to try to ensure things like decent initial heap size or something. 
[removed]
Sweet, accidental haiku!
What's more "truly" asynchronous about this than a normal async HTTP library, I don't get it?
Well if it makes any difference I'm running on Windows 10 x64 with x64 Jdk 1.8_144. Just tried it again and still happens. https://dl.dropboxusercontent.com/s/9m3m4g9s2axvs62/javaw_2017-09-17_02-15-37.png
It definitely has to do with the heap size. For example, if I set -Xmx5m and -Xmx5m, the int array allocation is gone. Whereas if I set -Xmx5g and -Xms5g it creates a lot bigger arrays. https://dl.dropboxusercontent.com/s/z4quh7uhdc5w0qo/javaw_2017-09-17_02-20-17.png I wonder what they use them for. It can't simply be a placeholder?
It's a TLAB, see: https://shipilev.net/jvm-anatomy-park/4-tlab-allocation/ If you're profiling for memory issues and this is your suspicious allocation pattern, it probably means you don't have a memory problem. Happy hunting.
Thank you
Why is Gradle better than Maven in this aspect? Personally, every time I tried using Gradle I was stumped by a plethora of version mismatches and cryptic error messages, whereas Maven seems to "just work" for me. 
More Java jobs in my area than C#. 
Iirc some gcs use a giant int[] for unused memory at the end of a heap region. When you allocate something, that int[] shrinks and the space is used by the new objects. Edit: see what /u/shipilev wrote, that's the article where I remembered it from :)
Is it possible that the YourKit-Profiler allocated it? You could check by having it disabled, using the jdk-tools.
There's either some form of haiku I'm not aware of, or this is nowhere near being a haiku - the 5-7-5 pattern is based on syllables, not the number if words.
Totally not a spam account, eh? Also, [still not Java](https://www.reddit.com/r/java/comments/6ze5b2/angularjs_interview_questions_for_freshers_and/). Fuck off.
We do not allow linking to **pirated material**. This is a commercial book and you are linking to a pirated version of the book. This is not acceptable.
bad bot
Thank you OldMiner for voting on I\_am\_a\_haiku\_bot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
Most probably, those are filler objects in Thread Local Allocation Buffers that help with heap parsability: https://shipilev.net/jvm-anatomy-park/5-tlabs-and-heap-parsability/ They are supposed to be unreachable, and filtered by tools that parse heap dumps. In your screenshot, the profiler shows "All Objects (reachable and unreachable)".
Seeing references to jar and Zipfile suggests you are running the code from a jar file, and a lot of those ints are part of objects used to load it. If you are using a jarfile, have you tried comparing to a single compile java file?
Because I am a Linux user. A lot of C# tutorials on the net involve WPF and other Windows only GUI stuff. 
To avoid host platform lockin.
Why zero it out preemptively though? I know Java zeros new arrays in user code, but if it's unreachable allocation in the background for optimisation, it wouldn't need to be initialised.
BTW - you are a rockstar and a legend!
Could it have to do something with windows sequential mem allocation. You say 5mxms. Jvm should take it all at once or it may not get it at all later
I work as a research fellow at a university, and everyone uses Java here. I also use Python sometimes.
The problem used internally for the enum type is the wrong problem to fix with Java enums. Inside Java only code the Java enum is the right answer but the minute you cross the boundary from Java to another system where the data has to be serialized it works out differently. HTTP protocol uses integer values and in traditional C and C++ an enum type serializes as an integer value. However if you blindly serialize a Java enum you get the text string of the enum, not a custom assigned internal integer value. Deserializing of an enum by Java also expects to match the text value to a defined enum value. So if you're going to cross the boundaries with Java enums you need to deal with the marshalling/demarshalling of the wire protocol content that is expected. When kept inside Java it provides some nice type safety and a simple mechanism for implementing a singleton guarantee.
It's not you choosing java. It's java choosing you.
&gt; HTTP protocol uses integer values The HTTP protocol uses document transfer via MIME type. In fact, one of the reasons to use enums is that common Java serialization libraries like Jackson will use `toString()` to serialize and `valueOf()` to deserialize, when the serialization format is JSON. This gives you serialization, deserialization and validation for free. The fact that enums have a text and ordinal representation works out well for serialization to HTML forms, such as `select` options, because the `option` can be serialized as HTML using `ordinal()/toString()` and be deserialized from `ordinal` from the form submission. You shouldn't blindly serialize/deserialize for any type. For example, even with the simple `int`, are you serializing signed/unsigned, 16-bit/32-bit/64-bit? But the enum type has standard semantics means that serialization/deserialization using Jackson or Spring MVC can make reasonable guesses which work out much of the time.
Sidebar: &gt; Please seek help with Java programming in /r/Javahelp!
SAP**.** (that dot at the end is final)
&gt;The HTTP protocol uses document transfer via MIME type. HTTP error codes have nothing to do with mime types, they are a defined set of numeric values the HTTP protocol uses to indicate status regardless of what is being transferred. &gt;The fact that enums have a text and ordinal representation works out well for serialization to HTML forms, such as select options, because the option can be serialized as HTML using ordinal()/toString() and be deserialized from ordinal from the form submission. The article wasn't talking about textual forms, it was talking about HTTP error codes. Java enum ordinal values are not guaranteed to have any significant pattern of meaning, which is why the article showed creating a new attribute 'code' in the enum itself to hold the HTTP code. Without custom serialization / deserialization routines being written the value of that integer will not be used by default. &gt;You shouldn't blindly serialize/deserialize for any type. For example, even with the simple int, are you serializing signed/unsigned, 16-bit/32-bit/64-bit? Unless you are doing binary transfers of data, the serialization of a number data type is into a numeric string representation of the number value generally using the ASCII digit codes 48 - 57 and the '-', so the number of bits has no meaning. What numeric data type that is used is based on what the language provides that is a proper type capable of holding the full set of possible values once it is parsed out of the string, if it is even necessary to parse the value out of the string. A well defined set of error codes like the HTTP ones can be used with direct string comparisons as easily as it can be converted to a numeric binary format and checked. The numbers themselves are not technically used as numbers, so they can be treated as text strings made up of digits and that will work just fine. C generally treats them as numbers because the C language uses integer type values for switch/case constructs. Java had that limitation as well up until recently when it allowed using Strings in the switch/case. So where as Java enum default serialization would put the value of "FORBIDDEN", "NOT_FOUND" or "OK" onto the wire, what is expected by standard HTTP clients is ASCII digit text values "200", "403" and "404". My point was that when using enums for something that may come from a system other than Java, there's more work to do. In the article example, when the Java code makes an HTTP request and gets back a status code of 403 from the connection, that value must be translated into the appropriate HttpResponseCodes enum instance. So the example in the article shows the enum class as: public enum HttpResponseCodes { OK(200), FORBIDDEN(403), NOT_FOUND(404); private final int code; HttpResponseCodes(int code) { this.code = code; } public int getCode() { return code; } public boolean isSuccess() { return code &gt;= 200 &amp;&amp; code &lt; 300; } } then uses the getHttpResponse().getStatusCode().isSuccess() to check the enum. But the key question is what does the **getStatusCode()** method do? Is it doing something like: HttpResponseCodes getStatusCode() { int responseCode = ((HttpURLConnection)httpRequest).getResponseCode(); switch(responseCode) { case HttpURLConnection.OK: return HttResponseCodes.OK; case HttpURLConnnection.FORBIDDEN: return HttpResponseCodes.FORBIDDEN; ...all the rest... } return null; } or is it looping through all values of HttpResponseCodes HttpResponseCodes getStatusCode() { int responseCode = ((HttpURLConnection)httpRequest).getResponseCode(); for (HttpResponseCodes c : HttpResponseCodes.values()) { if( c.getCode() == responseCode ) return c; } return null; } Some pattern like the above is required to convert the HTTP response codes from an HttpURLConnection into the HttpResponseCodes enum value. &gt;But the enum type has standard semantics means that serialization/deserialization using Jackson or Spring MVC can make reasonable guesses which work out much of the time. Yes it does so long as you are talking Java to Java, when you have Java communicating with JavaScript or Python or C or C# those semantics may or may not apply. That was the point of my comment on the example used for touting the benefits of enumerated types over static integer defines. They work great Java to Java but not necessarily as well Java to something else without some additional work on both serializing and deserializing when talking to non-Java systems.
I believe that Java zeros *all* allocations, although I'm not 100% sure. 
I haven't checked, I'm imagining there's native code, or some `sun.misc.Unsafe` shenanigans they could use to get a quick uninitialised block of memory.
Are you talking about this one? https://github.com/mariomka/regex-benchmark that is a great example of how not to benchmark.
&gt; HTTP error codes have nothing to do with mime types Of course they don't, they are merely a status code for the response. But you said the HTTP *protocol*, which transfers documents encoded by mime type. &gt; The article wasn't talking about textual forms, it was talking &gt; about HTTP error codes. Oh, you're referring to the example in the article. &gt; Without custom serialization / deserialization routines being &gt; written the value of that integer will not be used by default. You don't need serialization at all for this. Think of where you would actually specify an HTTP response code. Perhaps `HttpServletResponse`? You specify the HTTP response code using the `setResponse` method, which takes an `int`. An `enum` type won't fit there, so you have to *call a method* on the `enum` itself to convert to a representation you can plug in. This is only the case where the numeric representation has any significance at all. &gt; My point was that when using enums for something that may &gt; come from a system other than Java, there's more work to do. As shown with `HttpServletResponse`, this is not even an issue between Java and another system, but between two different Java libraries. So again, what is the use case for serializing an HTTP response code? &gt; But the key question is what does the getStatusCode() method &gt; do? It returns an enum instance. But, you're assuming that the enum instance needs to be converted from an integer form to an enum form. The entire point of using enums is that you *start* from the enum type. So, to answer your question, the `getStatusCode()` method would return a reference to an enum member instance, that was specified *as an enum reference in the first place*, i.e. a getter for: this.responseCode = HttpResponseCode.OK; You are talking about converting a numerical response code from an `int` to an `HttpResponseCode`, which makes sense for an input interface, but the response code is by its nature an output interface. You are *serializing* from a more abstract type to a more primitive type, so a loop or switch is very likely unnecessary by the use case of the type. &gt; Yes it does so long as you are talking Java to Java Jackson is serializing to JSON, which is used for Java to Javascript communication. When you serialize from Java to something else, you will be doing type conversions, and you *will* have to think about the semantics of the conversion from one system to another. Serialization/deserialization *always* requires work, unless you stick to a lowest common denominator set of types. For example, Java has a wide variety of types representing fractional values, including `float`, `double` and `BigDecimal`. If you are going to JS/JSON, there is only one floating point type, 64-bit floats. This is not a problem with `float` and `double` which are already floating point types. But what about `BigDecimal`? Floating point values cannot exactly represent all decimal fraction values, so direct serialization can introduce errors. There is always some amount of work when you cross systems because different systems have different representations for values. You shouldn't stop using `BigDecimal` because some other system only supports floats, the lowest common denominator type. Just like you shouldn't avoid `enums` because some other system only supports int representations. Http status codes have semantic meaning, they are not just meaningless numbers. Like 2xx is a successful response. It is nice to be able to capture that semantic meaning in a type. That is after all why we have abstract types in the first place.
I enjoyed it very much the first time. May I please have more downvotes from people who don't want to be reminded that supporting IBM means rewarding them for assisting in the holocaust? Thanks
I create a program to translate UK Ordnance Survey data into a 1:1 scale map of Great Britain. The final map was 3.5TB. https://github.com/matthelliwell2/MinecraftOSLoader https://github.com/matthelliwell2/J2Blocks The code isn't the neatest as it was designed for a single (large) run rather than re-use.
&gt;But you said the HTTP protocol, which transfers documents encoded by mime type. The example in the article was about HTTP protocol status codes. &gt;Oh, you're referring to the example in the article. Yes, the first line of my comment was &gt; The problem used internally for the enum type is the wrong problem to fix with Java enums. Which is the point of view my comments were all written from. &gt;So again, what is the use case for serializing an HTTP response code? HTTP response codes was the example used for showing why you should use enums. &gt;The entire point of using enums is that you start from the enum type. Enum's are language specific. You can only start from your language's enum in your language. &gt;Jackson is serializing to JSON, which is used for Java to Javascript communication. But what if the client isn't a JavaScript engine, but is instead a C TCP/IP server and JSON is simply being used as the transport format? The JSON text value of a Java enum is going to have to be interpreted by the C code. JSON is an ASCII format with limited *primitives*. What does Jackson generate for a Java enum? A text string unless a custom serializer is plugged into Jackson to send a number. Just like the fact that JSON doesn't have a date primitive so what would you get for a java.util.Date or java.time.LocalDate object? Would those serialize to the same format? Would that be a JSON object with a month, day, year attribute or a text string in ISO format or the underlying long value of the time in milliseconds since Jan 1 1970? And would the client know to expect the format of either the textual enum or the date format? Enums are language specific, numeric codes are generally not. So what I was pointing out is that the example used in the article of HTTP response codes as enums was not the best example to use. 
&gt; HTTP response codes was the example used for showing why you &gt; should use enums. That's not a use case. &gt; Enum's are language specific. You can only start from your &gt; language's enum in your language. That's the entire point. Different languages have different features. Those features are *selling points* and let you do things that primitive types can't. &gt; The JSON text value of a Java enum is going to have to be &gt; interpreted by the C code. Which, depending on the *use case*, might be totally fine. As long as the JSON format is *specified* correctly, the C code can do whatever it wants to read the JSON. That is not relevant to whether or not the Java code uses enums under the hood. But there is no serialization use case of the enum in the example, which seems to be purely a middleware concern. &gt; Enums are language specific, numeric codes are generally not. Right. Using enums *enhances* numeric codes to capture semantic meaning of those codes using abstract types. For example, the 2xx range of numeric codes indicates success responses. Wouldn't it be nice to capture that semantic meaning in a type, rather than replicating the same `if` statement on a primitive number everywhere? 
He'll have just as many headaches dealing with jni in maven. I only acknowledge that there is a fanatic group of "I tried gradle and it sucks because its not maven" people.
&gt; That's not a use case. We agree, but is what the example is. &gt;But there is no serialization use case of the enum in the example, The example is discussing taking HTTP response codes and replacing them with enumerated values to be used in the remainder of the code to provide some type safety. The example doesn't show how to translate an inbound HTTP response code into the corresponding enum. That is basically the same operation as deserialization, converting the wire format of a data type to an internal language specific data format. So there's no argument against using enumerated types for the value it provides to the application but if you're going to discuss using the enumerated type as an alternative to a defined set of HTTP integer response codes, explain how to convert the integer code into the enumerated type because in Java there isn't a clean mapping between numeric enums and Java enums like there is in other languages.
Let's look real world example. Spring comes with an [HttpStatus enumeration](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/HttpStatus.html), which is used for both serialization and deserialization. The HttpStatus enum is used with classes like [ResponseEntity](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html) to specify the HTTP status code and is used for serializing responses from REST controller methods. It is also used by [RestTemplate](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html) to deserialize responses from REST services. This is actually useful because what if you want to see if the response of the REST service is response is successful (in the 2xx range), but without having the logic repeated everywhere to check if the response is 200 OK, 201 CREATED or 202 ACCEPTED? With the `HttpStatus` enum you can just do `response.series() == SUCCESSFUL`. The Spring HttpStatus enum uses the loop method to deserialize an HttpStatus code.
Tools &amp; ecosystem.
&gt;The Spring HttpStatus enum uses the loop method to deserialize an HttpStatus code. Which is what I've been saying was missing from the example. And there is likely code in ResponseEntity that uses the **value()** method to put the expected numeric string on the outbound wire. If you're going to use an enum in Java to represent a defined list of numeric status codes, because you can't define the actual enumerations to match the codes so that the Enum class itself can find the correct enum instance for you, then you have to have additional code to deal with translating from one type to the other. 
C# runs on Linucks.
This is the exact line from Spring MVC which serializes the response code, not quite on the wire: this.servletResponse.setStatus(status.value()); &gt; you have to have additional code to deal with translating from one type to the other That depends. HttpStatus *specifically* can't be serialized by name. But, in many cases, serializing/deserializing by name is exactly what you want, and Jackson for example will serialize/deserialize/validate automatically based on this assumption. Furthermore, if you take the minimal effort to write a type converter (which can be as simple as factory methods on the JSON entity), you still get Jackson's automatic serialization/deserialization/validation. Regular `int` values require you to write that code elsewhere, and without the benefit of encapsulation. There is no free lunch. With modern tooling, using custom value types (enums and otherwise), actually makes serialization, deserialization and validation *easier*.
&gt; I have done partner programming in the past and the short time between edits and merges add up and seem like a hindrance. Well, first of all, merging isn't really necessary unless one of you makes breaking changes to the code or works on the same file(s) as you do in which case you should really talk it over before actually doing it. Secondly, that's why version control is necessary for projects where multiple people develop because of those same merges and ability to see what the other has done and how it will affect your code base. A Google Docs-type IDE would be completely unusable and will drive you insane in a day or two.
jesus fucking christ
/r/javahelp /u/davidreiss666 /u/TheSkyNet /u/DeliveryNinja 
Some code coverage/whatever tool (can't remember) we used was creating synthetic methods. The reflection code I wrote didn't expect those as I wasn't aware of synthetic yet. It was fun debugging that one...
It doesn't completely. A lot of C# tutorials focus on Windows only GUI stuff like WPF.
There's also the inline anonymous class trick: Map&lt;String, String&gt; myMap = new HashMap&lt;&gt;() {{ put("foo", "bar"); put("chunky", "bacon"); }}
int[] fun()[]; This would trigger me so hard in a code review.
I use this and the same capabilities for arraylists all the time. Except my opening curly brackets are in the correct place. ü§£
Which may not always be that [efficient nor preferable](https://stackoverflow.com/questions/924285/efficiency-of-java-double-brace-initialization).
I dont know of any apis, but I think this looks like something that can be done with java2d 
Oh boy, those dicts instead of a simple object class, they are everywhere! And the thing is, no one seems to think there is anything wrong with it (at least not in my experience). Now I have to keep a complete mental model of the whole damn application structure anytime I make any changes because everything is a dict, and I can never trust the key will exist anyways, so now I'm always checking key existence first or supplying default values via the get call! It's not my damn responsibility to check all that shit, it's the objects responsibility to manage that for me, but no, I don't have an object, I have a fucking dict that may or may not have what I need, oh and don't even think about what will happen if the type is wrong! Fucking Python! There is a right tool for every job, and Python works great for small scripts, but enterprise applications with large distributed teams? Hell no. So much wasted effort trying to maintain code that is impossible to refactor with any level of confidence because the language itself is trying to make things "easy". /rant
JavaFX has charts built in. Refresh the data in a timer. http://docs.oracle.com/javafx/2/charts/jfxpub-charts.htm
Please don't do that. It creates a new class, captures the outer instance, and makes type checks weird and not like you'd expect. There's definitely no excuse for lists since you can just do `Arrays.asList`, but it's bad for any scenario, not just that. 
I don't know why one would use that instead of something like ImmutableMap.Builder :/
Working or not, this would result in your code being posted to my office's "wall of shame"
One of the strangest quirks, IMO, not mentioned in the article involves extending a inner class from outside of its enclosing class. The instance of the parent/inner class's enclosing class can be passed via constructor: class Outer { class Inner {} } class ChildOfInner extends Outer.Inner ChildOfInner(Outer x) { x.super(); } } or you can use any available instance of the outer class; even create a new one. class ChildOfInner extends Outer.Inner { ChildOfInner() { (new Outer()).super(); } } 
Agree with the sentiment regarding learning Git from the other comments. Here are some options, if you still want to check the workflow described in the post, these do something similar perhaps: - Eclipse Che: http://www.eclipse.org/ecd/ - Cloud9: https://c9.io/ Edit: Didn't see that Cloud9 was already mentioned. ;-)
Apache already has lot of java based open source projects. It is good that JavaEE is moving to Eclipse foundation. Oracle, IBM , RedHat are already member of Eclipse foundation. Eclipse also has microprofile project which is designed to optimize Enterprise Java for a microservices architecture. 
`foo.new Bar();` - [shadowing](https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html)
Also cool: the new TYPE_USE annotations. Makes odd types like `T @A []` possible.
I assume you're a consumer. Later updates contain all changes of previous updates. You only need the latest.
Because it's immutable?
Which creates an immutable list which you may not always want. 
you can create an ArrayList with your `Arrays.asList` as the parameter and it's mutable
/r/ProgrammerHumor?
Wut?
`new ArrayList(Arrays.asList(...));`
 public class SomeClass { private static String s; private SomeClass() {} public static void main(String[] args) { new SomeClass() { private void invoke() { s = "hmmm"; System.out.println(s); } }.invoke(); } }
The Android Marketplace.
They run on the Java Virtual Washing Machine
Why not just use `Arrays.asList(...)`?
[itch.io](https://itch.io/) is really popular for amateur game developers and indie games in general, not only Java games, there are games done with all kind of engines and APIs. I've already seen plenty running on LibGDX (A Java game development API).
If you're hardcoding values, chances are your map should be immutable. 
I think OP is referring the text on the java installer banner. The one that begins with "3 billion devices worldwide run java".
Because that List is immutable..
/r/TooSubtleHumor
It would probably be JavaFX-ier to use an observable property to update the graph. Plus, the charts in JavaFX have built in animations, which you can turn off if you don't like them, that will smoothly change the charts to reflect the new values. Watch out for updating the charts outside of the JavaFX application thread though. Be sure you understand the Platform.runLater static method. I imagine updating a chart at that rate would not be a problem.
I love kotlin more and more every day
Thanks for creating this project. The only other Java blogging framework I'm aware of is Apache Roller, which seems to work just fine, but doesn't appear to be actively developed any longer. I'd like to see a framework that doesn't lock me into MySQL though. I'd like to be able to use H2.
It uses hibernate which works with multiple database servers. Change the pom to use h2 and it should work. 
In which case I would advise you to remove all the "default" values from the .properties file as they're MySQL-specific right now.
[removed]
But it sure looks neat. edit: It'd be good if they could eventually optimise this syntax since it is a pretty concise way of doing map initialisations.
I recently discovered that array literals can have trailing commas, that's nice. 
These values are in a properties file because they are meant to be changed. Even if you chose to use Mysql, you would need to change at least the default password in that file. 
I know what .properties files are, that's exactly why I'm saying you should clean them up and let the user decide what he wants to use. 
Thanks for the reply - yes, I did look at Apache Roller and while it's very good it seemed a bit overkill for a single user blog. It seems more suited to multi-user scenarios. As another Redditor has commented, I've used Hibernate so multiple databases can be used. You'd need to change the values in application.properties, and I haven't tested it. If you make the changes and test - please let me know how it goes!
 class Dupa { public static void main(String[] args) { if (true) { class Wtf { public int i = 5; } System.out.println(new Wtf().i); } System.out.println(new Wtf().i); //cannot resolve symbol } }
Then use Google Guava which declares Lists.newArrayList(T... elements)
In 2007, The Nokia N95 cost US$730 while the SunSPOT was available for US$550 and for educational use at US$299. As for "smart phones", the Handspring (and eventually Palm) Treo appeared 4 years earlier. EDIT: I owned a Sharp Zaurus SL-5500 that ran Linux back in 2003ish but I can't remember how much I payed for it.
I've seen someone suggest JavaFX. I work with JavaFX daily and it's great, but I don't think it is the ideal tool for this case, it focuses more on "classic" user interfaces (Menus, panels, buttons, charts... the usual GUI stuff). I'd recommend LibGDX. It is mainly used for Game Development, but it can be used for diferent things too. being designed for Game Dev, you can easily control framerate and draw all kinds of imaginable graphics on screen. If interested, you can start [here](https://github.com/libgdx/libgdx/wiki/Quick-start).
You want to go to /r/javahelp 
I would love to chip in. I am also learning Java and Spring framework. Would like to connect with you and understand the project.
Starting with Java 9 there are built-in map creation methods (though it will create an unmodifiable collection)! You can also create a util class to do that same thing pretty fast!
Good point! I'd rather create an immutable map 99% of the time if I were to do this anyway.
But. . . that isn't valid, it won't even compile. The class definition "Wtf" is scoped to the if statement, regardless of if the if is always true, of course it's not available outside of it.
I'm a bit promiscuous when it comes to my choice of languages tbh.
Truth. Unfortunately J9 doesn't add immutable typed Collections, so you're probably better off using Guava or Vavr still :(
&gt; I am too lazy to just start reading the language until I understand everything &gt; it shouldn't be too hard to learn &gt; any good way of learning java quickly You are going to have a hard time with that attitude. Follow /u/cyanocobalamin's advice and go to /r/javahelp. And please, don't go there saying "This is going to be easy" because it's not and you'll realise soon, with that attitude no one will want to help you and you are going to need that help.
&gt; do you know any good way of learning java quickly My suggestion would be to not be lazy. There are no shortcuts to learning.
Looking forward to this in Java 9. `Map&lt;String, Integer&gt; cities = Map.of(‚ÄúBrussels‚Äù, 1_139000, ‚ÄúCardiff‚Äù, 341_000);`
A great deal of trickiness in trying to get this to work. The absence of a bundled OpenJFX took me a bit to get past - I ended up rewriting my solution to suspend the dependency. I'm now getting NPEs thrown deep in third-party code. My *own* code seems to work -- unit tests pass and benchmarks show performance roughly in line with what I see from other JVMs. If I can swing the time, I'll try to prepare a minimally viable test case for the libs that are blowing up.
[Don't do it, though](https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/)
Goto, jumping forward: label: { // do stuff if (check) break label; // do more stuff } Goto, jumping backward: label: do { // do stuff if (check) continue label; // do more stuff break label; } while(true);
I know it's not easy, I just don't have the time to read a book. I just wanted to know about some alternatives. I've completed a few online courses. Sololearn was pretty fun using. Sololearn gave me control of the basics but it didn't learn how to use java. Do you know of anything online that is free and learn more than just the most basic stuff? 
&gt; When an enclosing class accesses a private attribute of a nested class, Java compiler creates synthetic method for that attribute. Thank you for helping me to start a day with a puzzle
Could you explain how you put things together?
Sure. Java spark for a webserver/websockets, activeJDBC for ORM, postgres+liquibase for setting up the DB, and angular4 for the front end. Tech used: - [Java Spark](https://github.com/perwendel/spark), [Bootstrap v4](https://github.com/twbs/bootstrap), [Angular2](https://github.com/angular/angular), [Angular-cli](https://github.com/angular/angular-cli), [ng2-bootstrap](http://valor-software.com/ng2-bootstrap/), [ActiveJDBC](http://javalite.io/activejdbc), [Liquibase](http://www.liquibase.org/), [Postgres](https://www.postgresql.org/), [Markdown-it](https://github.com/markdown-it/markdown-it), [angular2-toaster](https://github.com/Stabzs/Angular2-Toaster)
Aaaargh! My eyes!
I noticed you have your sub(flowchat?) names as an id in the URL, maybe having them as text is better for SEO.
what specifically looks bad?
The window titles are correct, and I think are more important for SEO. Look at IMDB URLs for example. 
The window titles are correct, and I think are more important for SEO. Look at IMDB URLs for example. 
Yes. Yes. Software. Phew, that was easy.
Everything? Seriously. Find somebody with a sense of style to give it _some_ skin.
It's a weird mix of mutable and immutable: you can change existing elements via `myList.set(index, newValue)`, but methods that would change the number of elements (like `add` or `remove`) will throw an `UnsupportedOperationException`.
It's a nice idea and good personal project, but sorry, unless it's amazing people most likely won't use it. There are plenty of good text editors out there, why use yours? But you could prob upload it to github or something. No idea who or how you could send this out. 
jeowith was asking for a reason. Also if you're hardcoding values, in most cases there are only a handful of elements and there are often better structures to represent them than a Map.
Sidebar in /r/learnjava - section **Free Tutorials** -&gt; MOOC [**Object Oriented Programming with Java**](http://mooc.fi/english.html) There is no shortcut. Learning Java and programming in Java requires effort and determination (just like all other programming languages). Plus, you'll need lots and lots of practice (that's why the above course is so great - it has lots of graded practical exercises). &gt; I just don't have the time to read a book. Only reading a book (or a hundred books) will get you nowhere unless you practice a lot. Programming and learning to program *is hard work*. There is no shortcut as it takes as long as it takes you to understand and to be able to apply the presented subjects and there is no place for being lazy. If you don't change that attitude, you might as well forget about it altogether.
however, it would be way better for linking and remembering the URL.
It would be wtf if this wasn't the case.
Don't care what other people think. Just don't expect it to be the next Notepad++. The official JShell comes with an "[editor](http://codepumpkin.com/wp-content/uploads/2017/04/editJShell.png)" that is nothing more than a TextArea with 3 buttons. 
Thanksfor the suggestion!
C# is one of those languages you learn to get a specific job or make a specific program whenever you already have experience. I don't see it as a beginning language at all. 
Describe the game are you working on I'm interested 
Yes you can. Have you looked into: http://ammonite.io/ ? It runs 100 times faster than bash (or python). It is also possible to write scripts directly in java. ;)
Not this dude but maybe a little bit of a margin between each card or a thicker border on mobile as its kind of hard to tell the difference between cards. Nice site though, a dark theme wouldn't go amiss 
I'm curious why did you post today. Latest commit from March, did you abandon it? 
Thanks for the advice, I really appreciate it. I understand what you are saying, but my question is should I publish a working version or should I develop it further and make it more complete. 
You could publish it to github/gitlab/your chosen VCS and continue to develop it. That would allow people to use it, report bugs, suggest features etc. You would also be able to ask users for advice on said bugs/features. Having it published also looks good from a recruitment point of view to. Edit: Publishing now also allows you to see where you have developed in future years and spot areas you can continue to improve on.
The answer is up to you. If you're developing the additional features b/c you hope that will lead to adoption by others, then no, it's probably not worth your time. There are many, many OSS editors out there with advanced feature sets. If, however, you're adding features b/c you want to learn how to program them, then yes indeed. That's one of the best values of writing OSS--what you learn in the process. In sum, you should publish it whenever you feel like you want to share the code with others. You're not hurting your chances of adoption by releasing it early in its development cycle. 
It's a simple RPG. The aim is for my Portfolio + Kids/Family/Friends. These are some older screenshots of the game before the Java conversion. IT renders a bit better now. Please note all Art and textures were made by me (not an artist) [Sample Screenshot] (https://ibb.co/mQdqEQ) I really enjoy Java and i've written a few games in C++/DirectX years ago. I recently found out about LibGDX and started porting my code over to Java. There are bits and pieces I'm using from LibGDX to make my life easier, but I've also written my own engine in C++ which got ported over and improved. The game is a 3rd person RPG where you go around questing, leveling up, and finding new items. I have a world editor to design the terrain, paint the terrain, throw objects on it, quest triggers, etc. And an Entity tool to combine components like (light, model, sound, particle effect) etc. So I have a grab bag of components that makes an entity in the entity tool. That is outputed to an entity that can work in the World Editor. The world Editor then saves all of this into some binary file which is the gamedata that is loaded by my game. Writing the tools in Java lets me use all my Engine code between the tools and games. And Java Swing makes it great for having UI for my tools and I just render to a Canvas on the Form). Lastly, LibGDX lets my game work on Desktop and Mobile. Letting me test the game on PC without having to test in android emulator. That means I just have to abstract the UI and Input code and the game should be good. 
Human-readable permalinks can be a moving target to code for unless you wait til late-stage development to add it.
Does anyone have a real-world use/example for the receiver parameter? 
Publish and iterate. Personal projects often end up in feature-creep never released state because the developers don't get it shipped and instead bog themselves down in details. 
That doesn't look super promising, hopefully there are some workflows that OpenJ9 excels at that weren't in that set of benchmarks.
The interesting parts of J9 are things as the soft real-time Metronome GC, not raw number crunching performance. I haven't checked (yet), but I suspect Metronome might be an implementation of about the only patent on software that I've ever felt to be okay, I was completely awe-struck by the sheer brilliance and engineering effort that went into that GC the patent described when I first read it more than a decade ago, it's going to be fun to revisit it some rainy day :)
Everybody has to start somewhere. *Although, I am sure you were a great programmer when you started.*
There is an object model in SLF4J look into custom appenders or try googling for a stackdriver appender. It might already exist.
Hey I found your question again! Using a nested for loop: import java.util.Scanner; public class Words { public static void main(String[] args) { Scanner reader = new Scanner(System.in); String word; int times; String indent = ""; int ident_count = 0; System.out.print("Please enter a word: "); word = reader.next(); System.out.print("Please enter a number: "); times = reader.nextInt(); for (int i = 0; i &lt; times; ++i) { for (int j = 0; j &lt; ident_count; ++j) { System.out.print(" "); } ++ident_count; System.out.println(indent + word); } } } Don't forget to save the file as Words.java
[Here is the error I get when clicking on a username](http://imgur.com/w8QZPwx.jpg)
You will need to tell the client to store the token and send it with each request. A good way to do this would be to set a cookie, since you know the cookie will be sent with each request to your site. Then in your authentication step, you can fetch the token data out of the cookie in to verify it. So the basic flow of your app might look like: - User hits getToken endpoint with username/password. If credentials are valid, set JWT token in cookie - User hits secured endpoint. Grab the token from the cookie. If token exists and is valid, let the request through, otherwise reject it
In all seriousness, I think most use lower end micro controllers, most of those still use C...
Bit of design didn't kill anybody. And when I started it was not the norm to shove every little fart I did down out onto public.
This is a [Spring Boot](https://auth0.com/blog/securing-spring-boot-with-jwts/) example. JWTs are typically sent by the server to the client using the `Authorization: Bearer &lt;token&gt;` header after successful login, and the client sends the token back to the server for verification the same way. The example is sets up Spring Security to redirect unauthenticated access to secured resources to a `/login` route, and configures the `/login` route to return the token to client on successful login. Access to secured resources is guarded by another filter which checks the header for the JWT token. The concept should transfer to DropWizard. At least the `TokenAuthenticationService` should be reusable since it is only dependent on servlets.
How long did it take to build?
Po
I think I built the core of it in a month or so, and have been doing little updates to it for a while. 
Well there is a really good YouTube channel of Derek Banas and he makes really amazing Java tutorials Here's the link to his playlist: Java Video Tutorial: https://www.youtube.com/playlist?list=PLE7E8B7F4856C9B19 Now obviously u wouldn't get a certificate or something like that if u needed. If u wanna learn Java for certificate and practice then I would recommend codeacademy.com 
Thanks, I'll take a look. 
&gt; If u wanna learn Java for certificate and practice then I would recommend codeacademy.com Codecademy for a certificate? You must be kidding. Codecademy merely scratches the surface of Java syntax, nothing more.
Check out the *sidebar* in /r/learnjava. There are plenty tutorials linked. The commonly most recommended ones are in the *Free tutorials* section. Honestly, certificates don't mean much in the industry and are mostly a waste of money. Practice and proficiency are what count.
Nice! I'm guessing it was quite fun to do eh?
Since this is not directly **Java** related, you're better off asking this question in a *general* subreddit, like /r/learnprogramming or /r/cscareers.
Publish now and develop it further! It's an important step to do, to publish and package software.
[removed]
Hi, I think you are right. I will change it.
I've been benching and reporting issues with openj9. Currently it's suffering from a regression in its default gencon gc where it will not expand the nursery generation appropriately, causing excessive amounts of time being devoted to gc. These benches might have something to do with that. I've been doing some microbenchmarks with openj9 in scala and I've seen some promising results in some of them. In one bench I wrote to test abstract class polymorphism vs interface polymorphism vs typeclass polymoprhism in scala, openJ9 was achieving 2x faster results than openjdk. I'd say wait and give the openj9 devs some time to finish it up. It's still got some rough edges.
This is Java, not JavaScript (where there is no such thing as block scope)
Feel free to compete against my current text editor of choice, notepad++ :)
No, not abandoned! Its purely due to time constraints and it being semi-functional that I haven't updated it. I've been learning more and more and didn't want to use the blog as a test ground so I created a few other projects for me to test on. I posted today as I was trying to work out what to do next on the project and thought that I'm at a point where I want to interact with other developers and learn from their techniques and code. I'm the only Java developer I know right now, everyone else I know uses C# and .NET :-/ Some of the things I would do on that project now are things like: * I'm using Spring Boot, but I've done too much manual configuration, so I'd strip all of this out and let Spring Boot do its thing * Use SQL imports on boot to automatically create / modify tables on the database if needed * My DAO is sort of like a DAO with a repository bolted on the end. I'd change this so my DAOs were repositories inherited from JPA CrudRepostiory * Major rewrite, for version 2.0 (but I'd like to get more functionality into this first!) - change the back end to a REST api, and have a front end client All this stuff was learned on other projects. 
Really depends on how much you learned. They say 10000h makes you a professional at what you're doing. I had been programming java on and of for 3 years. Started doing minecraft programming for about 7 months and now I develop for a server on commision. It's really how you offer yourself and the knowledge of you knowing what you can handle or not. I consider myself a Java developer. Even though there are millions of people who are 100x better than me and have better pay etc. Just do what you love and if it all goes well, try to find a branch to get a job in. Then in my eyes, you can call yourself a Java developer.
Of course I will learn by myself when I'm at home but it helps me to have a teacher when I have a specific question, I just wanted to know if 400h of "classes lessons" where enough to go in an entreprise in internship. I knew a lot of people were going to respond "you can be as good as you want if you study by yourself" but wanted your advice anyway, thanks :) hope I'll feel like a Java developer in 6 months! Thank you 
I think you will end up a bit below entry-level, depending on how much work you do on the side. It's hard to estimate this based on your past courses (was it just a single Java course that spanned a year?). A lot of Java developer jobs require you to have some sort of experience with frameworks such as Spring. So check the curriculum to see if it includes this sort of stuff (if not, this might be something you want to check out on your own time). I'm looking at this from a hiring standpoint. Seeing that you did not finish the education and are short on the job experience, I would try to find another (longer) internship after this formation. After that I think you'll have no problems finding a job as a junior developer. 
Sure that would be great! As I'd like to collaborate with other developers on the project I've created a Slack channel https://twibbleco.slack.com and a Subreddit /r/twibbleco - other than me, they are both empty at the moment.
The formation includes Jquery, Ajax, Javascript, SQL Java SE7 and web spring applications yeah, but I just don't know what is enough and what is not enough to enter as a junior developer. For the Java I did before I wasn't a complete time on Java, it was like the university and I had maybe 10 to 15h on Java per week. Thank you for your response! 
&gt; 2x faster results than openjdk. You mean Hotspot
"release early, release often" is good advice, in my opinion.
I'd say that it's probably more interesting to show the code, as a thing people can learn from. It could be fun for beginners to download and play around with changing functionality in it. If you want people to be interested in the editor itself, you should figure out a thing that you feel is missing from most other editors, and implement that.
I don't think there are hour requirements to get a job. Can you make a web application (or game, or mobile app or whatever it is you want to get paid for building) in (mostly) Java yet? Doesn't have to be good, just has to work If you can, I'd say start applying.. you'll pick things up incredibly fast on the job as a jr dev somewhere. Anecdotally I was hired somehow before I knew exactly how a set was different than a list ( I just used vectors everywhere as that's what my teacher taught us in school for some odd reason). If you do this formation thing you'd be a much stronger candidate than I was but you might want to just look around now for a job or internship?
This seems like a terrible idea. If I had to test code like this, I would refactor it into two classes: an extremely simple generic class that is responsible only for obtaining system environment variables and making them available to another class (really just a thin wrapper of the system call), and the rest of the code in the other class. The class that contains all the business logic can now be fully tested on its own, using a mocked version of the simple class as an injected dependency. And the simple class can be carefully tested manually, confirmed to be working, and then probably never touched again.
I took this one just for the lambdas and regexp, it's very comprehensive and well done, I highly recommend ($6): https://www.udemy.com/java-the-complete-java-developer-course/
You can use Apache Flyway for the SQL imports, it works really well with Spring. 
Thanks a lot for your response! I don't know how to do a web application yet, no :( I studied until the beginning of graphic interfaces and I had a few troubles, and then I stopped the university. Oh and sorry for bad grammar, English is not my native language :) 
There are people sitting 10000h in front of the code but are worse than others. It is just a matter of skillset. Inform yourself what the industry in your local area requires and learn/master that to a certain degree.
This is quite broad. While possible, it does seem like a lot for such a short period. Be sure to get an honest evaluation at the end of your first internship so you know where you stand.
I searched on internet and I didn't find some opinions about this formation, I'm going to an information session soon, I'll ask the teacher everything, just wanted some advice of Java developer who knows the requirements better than me probably :) 
Yes, now I can see I wasn't clear, but that was my point - many java developers don't know there is such thing as "scoped class" definitions (and for me it is `lesser-known Java syntax`) :D 
It's not immutable actually. It's a list that functions as an array. You can still modify any index in the list, you just can't add or remove an index.
Where are the actual test results? 
So, the answer on the Why question is "just because we can?". And ~~compiling~~transpiling java code to javascript is not new - GWT is well-known and still in use by some big frameworks like Vaadin. And I honestly think that sharing code between java and javascript is a horrible, horrible idea.
There's a pagination thing at the bottom of the article. I missed it at first too.
In summary, OpenJ9 is slower and has a more forgettable name.
Hours themselves aren't important, what's more important is what are you actually *doing* with those hours? Are you just reading and trying examples? 600h of just reading and trying examples will give you book knowledge, but very little practical knowledge. Are you solving actual problems? 600h of dealing with real life problems is far more valuable, because a lot of the problems faced in real life development can't adequately be explained or understood in a book, but have to experienced and worked through. Whenever I learn a new platform, be it Java, C#, Haskell, whatever, I always start by trying to write real apps. Like for example, an IRC client or a web app.
tl;dr - the WebSphere team have released an open source Java EE 7 compatible application server, called Open Liberty. (Disclosure: I work on the WebSphere team so feel free to ask any questions here and I'll try to answer them)
Angular 4 + Spring Boot is beautiful as my company uses that exact stack. The ease of not having to use base JavaScript but TypeScript instead makes a smooth development experience. 
Referring to suspect code as "code smells" is just... infantile. Before you know it we'll be fixing code boo-boos and wearing ~~diapers~~ coding pants.
It's not that deep, my guy
That's amazing news! Liberty is an amazing piece of engineering really. What are the plans for EE 8 support? JAX-RS and JSON-B already have Apache implementations for EE 8, and EclipseLink is EE 8 ready too.
What a mess of an article, the conclusion of which is to try to understand the problem first. Really. As if knowing the problem domain or what the code is supposed to do is actually going to help you instead of a fine list of techniques to refactor code with the awesome intellij IDE. Did I mention intellij is awesome? 
We have jsonb code in the version in github already: https://github.com/OpenLiberty/open-liberty/tree/integration/dev/com.ibm.websphere.appserver.jsonb-1.0/
Yes, but I figured anyone who knew the difference would know what I'm talking about while those who don't also get to know what I'm talking about 
I love that Red Hat and IBM are really pushing back against the idea that Java EE is slow is bloated. Keep up the great work.
Not even sure why this is an argument anymore clearly types are useful. People are just annoyed with these and redundant syntax. Having no static analysis in shippable production software then supplementing it with 1,000s of unit tests is insane.
What is horrible IMO is having to rewrite again and agin the exact same applications just because the languages change or evolve. Really shouldn't we expect more of the languages and associated tools when we talk so much about IA? You should look at this software: http://www.sweethome3d.com/blog/. It is a 10-year old project written in Java and is downloaded 20.000 times a day. And now it has an online JavaScript version, which has been transpiled from the Java code using JSweet. Can you imagine how much time the maintainer will save having only one source code base for both the Java and the JavaScript versions? No, really I don't understand how you can say it is a horrible idea...
Thanks! :-D
I will take a look. I am working on spring boot with an embedded tomcat server. How does this compare to open liberty?
Liberty can be made incredibly small; just put the specs (features) that you need in server.xml and mimify it to include only those. Another great feature is that liberty can load features from a local repo, so if you're on the road with bad 4g or behind corporate firewall this can be a real lifesaver. Kudos to the liberty team for this! It's these small things that really help when developing.
I think that is mainly a question of how does Eclipse MicroProfile and Java EE as an API compare to the Spring one. Personally I think a well written Java EE application on a lightweight application server is much better than Spring, but I know a lot of people have a different view (and I'm totally biased). You can't run Liberty as an embedded app server under SpringBoot right now, but I think that makes total sense for us to support, in that case Liberty would just be another option for SpringBoot to run in, like tomcat, jetty or undertow.
Yeah, My company also is using the same stack. Angular 4 some kind of similar to Java for me.
I do think there are some major use-cases where code sharing would be very useful. First, if you are not developing some trivial application, the application will have multiple players and in the end a DTO will be returned in serialized form (JSON, XML). You did already define the DTO class server-side, why not use the exact same class on the client for parsing/databinding? Second, shared validation logic could be very useful. Data should *always* be validated on the server. Why not use the same validator classes on the client for client-side validation?
Yeah, I am so glad that IBM didn't let Websphere have a slow death. They are really trying to innovate with Java EE and regain marketshare against Spring and JBoss. I look forward to what they come up with next. 
I've never liked the phrase "code smell"
Is not beautiful! üò° Better use Java EE and Microprofile! Much more Nice! ü§ó
Javascript has had block-scoped variables since ES6 hit the scene. . .
[removed]
Hehe yeah definitely. Was a good opportunity to learn angular too. 
Cool, I just added margins now: https://github.com/dessalines/flowchat/commit/13114675c9d6df6e578f8001849dcf9af7d365be
I've never heard anyone doubting that strong types reduce the amount of bugs, tbh. The common argument seems to be that only beginners make type mistakes, while on the other side the verbosity of strong types only helps beginners but hinders experienced programmers. However, it can't hurt to have statistics like this :)
My question is, how much do they change productivity?
That's not what I'm talking about. There was no issue zooming in on the code, the issue was with the size of the fonts inside of projects, files and services tabs to the left of the code.
Oh, P.S. I forgot to mention that for my purposes this ended up being the best solution and that link with all the conf variables is super useful. Thank you.
I ended up just adding the --fontsize 16 variable to my conf file, which is basically the same thing. Worked very well. Thanks.
Thank you for your kind words. Glad to know it is appreciated.
I feel like an experienced programmer who thinks that strong typing is a net hindrance has never had to deal with an undocumented API written by someone else (or one written by themselves six months ago, for that matter).
Dude try nashhorn interpreted js...transpiled from es6. I don't even get fucking typo checks
Liberty uses Apache CXF as its base for JAX-RS 2.0 and soon 2.1
[removed]
An experienced programmer probably wouldn't produce an undocumented/unintuitive API :P. However, and you'll probably agree with me, relying on not only you but also everybody else to write good code isn't a very good quality assurance
ES6 on Nashorn? What did you do, commit genocide in a past life?
i would have started the refactoring by getting all the de factor early exits to the top and then do the rest
You can have strong types and type inference to reduce verbosity. `val thing = Thing()`. And at least those types are either that type or null; not null, undefined, "" or any other such nonsense. What's more verbose, a simple null check or a check versus any of the essentially null values where you have to worry about type coercion?
Liberty uses Weld for CDI, doesn't it? So that could be used as well. 
Uhm I went from doing business logic in C# as a consultant to working on...I know.. a Minecraft network. The pay is like 1.5x higher, and I get to use a lot of Java, so I prefer it. Unfortunately one of the people in this community created a plugin based on the nashhorn interpreter which I'm sometimes basically forced to use. Sadly it's pretty well consistent that all these devs say it's "better." I just look like a crazy person when I try to explain to them the level of sacrilege occurring. Nothing like spending 90 commits fixing typos, incorrect method names, and other shit my IDE would have prevented.
Is Open Liberty going to use Soteria for Java EE Security, an Apache implementation, or an implementation done by IBM itself?
Awesome, I just tried to login and it returned 405 HTTP method POST is not supported by this URL going to https://flow-chat.com/login
You're right, I keep forgetting the newer features. Yet, it is easy to get it "wrong", and e.g. declare a function that escapes block scope, right?
I just tried logging in and it worked fine, but I did just do a deploy fix a minute ago. What browser are you on. And try again. 
There are a number issues open for Java EE 8 works now in the git repository. https://github.com/OpenLiberty/open-liberty/issues/57 https://github.com/OpenLiberty/open-liberty/issues/48 https://github.com/OpenLiberty/open-liberty/issues/41 https://github.com/OpenLiberty/open-liberty/issues/40 https://github.com/OpenLiberty/open-liberty/issues/39 
I'm using Firefox 55.03 64bit. It's working fine now.
Question isn't just about experience, is also about giving a shit.
As long as you're using let/const you shouldn't ever have to worry about that! if (true) { const someFunc = (x) =&gt; x + 1; console.log(someFunc(1)); //2 } console.log(someFunc(1)); //ReferenceError: someFunc is not defined Both are scoped to their block and can't escape!
&gt; An experienced programmer probably wouldn't produce an undocumented/unintuitive API :P God, how I wish that was true. :(
Listen to what you're actually saying. Do you seriously believe people who have programmed, say, Python for 20 years never came across this kind of stuff? Many people love untyped programming languages, and there are reasons for that. Telling people who aren't familiar with that type of programming about it tends to be a waste of time, though.
Our current plan is to provide our own implementation. However, I don't have details of the plan so that may change.
correct
Regular GitHub issues for Liberty, that's really an improvement too! :)
Cool, sorry about that, I've been deploying fixes rapidly today. 
I find I am much faster at fixing problems when the type system is able to guide me in the correct direction, and I have to write/do less tests to be comfortable a (sub)system is working.
Chasing 100% code coverage is a waste of time. Having checked types avoids having to test a large number of error cases. That mean net less work.
Really nice! We were a Spring shop, but Java EE and the new MicroProfile is looking better by the day. Liberty looks very intriguing.
Question isn't just about fixing problems. It's also about coding. 15% fewer bugs only matters when time is unlimited or in systems which require strong stability. If it takes 300% longer to code in a strong typed system, that 15% becomes moot much of the time. But, I was looking for studies on this to be objective, rather than just opinions. Looking around, [I see a lot of opinions on the subject](https://softwareengineering.stackexchange.com/questions/10032/dynamically-vs-statically-typed-languages-studies)
Sure doesn't help that about 15% of Java developers actually use static typing even when it becomes a slight challenge to do so, like when an object mapper has to be configured. Instead they pass around all sorts of things as Strings. UUIDs, URLs, Enums, whatever... Every time I see a String passed around I think, "boy it sure will be nice if this ends up being in the format the previous developer said it will be..." &gt; Enum.valueOf(X.class, str) &gt; IllegalArgumentException
&gt;300% I really don't understand this. Figuring out which types I want something to be has never been an issue for me, and I'm hardly any slower because of it. And refactoring to change type names/etc happens relatively rarely and can be done with IDE tools. Spending all the extra time chasing down bugs from mismatched types in dynamic languages that test cases happen to miss (or if we haven't written tests yet) has taken me upwards of an hour in some cases. Linters (and such) exist but they aren't as powerful as *just having the compiler do type checking*.
Here is a sample gradle project to work with java and jni. It can be opened in IDEA. https://github.com/avu/gcj
How is it hard to understand? Scripting is faster than coding/compiling. Had to write a java program to package a set of files/directories for backups, off of a configuration file. Took two hours. A shell script, would have taken five minutes.
Please make a graph.
Alright, great to know! Thanks
Obviously Java is the wrong tool for that job. You and I both know that. I'm talking about non-trivial projects, a la anything with Django or lots of SQL. Etc.
So you would rather spend more time to write tests for obvious type mismatch cases than just annotating with type in the first place? 
Java was the right tool. Had to back up a windows system. Spending the two hours doing a java app was better than trying to port over a shell and zip utility I know, or learning power shell. Can power shell even do zips? SQL is a nightmare in Java. I would much rather use something like Perl DBI. Job is irrelevant and point remains. I didn't have a tool to do the job I needed, so I built one. Building a tool in a strong typed language was slower than in a weak typed one, just in this case was the fastest option over all.
See the *sidebar* in /r/learnjava and there the section *Free Tutorials*. The MOOC listed there is the best free course available.
&gt;Windows no comment &gt;SQL is a nightmare in Java It's far from the most comfortable thing, but the most comfortable thing is writing queries by hand in the REPL, which isn't Web Scale‚Ñ¢, so it's out of the question. Have you taken a look at using an ORM for simple/moderately complex things? &gt;strong typed language was slower than in a weak typed one This thread is largely about static vs dynamic types. And explicit conversion between `"1"` and `1` (and other versions of the same idea) is not hard enough to warrant the unsoundness and potential (security(!)) bugs of allowing it to happen implicitly. I'm pretty sure most people agree on that.
Because code duplication is actually lesser evil than shared code. Separation of concerns and code bases is vital property of maintainable system. Have you ever tried to upgrade/maintain big monolithic enterprise beast? If yes, than you know it's a pain in the ass. Despite all books about OOP - code duplication, duplication of data structures is more maintainable than shared code. The worst happens when people try to define 'shared domain model' which is just oxymoron.
Java: Did you want a large coffee cup for coffee with your large liquid coffee for a large coffee cup? That will be $2. Check with our payment SPI for acceptable forms of payment. JavaScript: Thanks for the "$2", I will put it in the coffee maker. Here's your NaN sir!
Just because you can do that does not mean that you should do that. When you write in one programming language you use abstraction layer provided by that language, when you transpile to another language, you must emulate another abstraction layer. It's really like hypervisors and virtual machines - you have all existing complexity plus emulation layer. Therefore result will be more bulky and slow. If I write java application which utilize OpenGL will my transpiled application use WebGL? Or if I use JavaFX will it produce alike interface? Will it be fast? What happens with my project when 3rd-party transpiler dies? It's a matter of choice of course, but I would noped out from that idea because nothing is wrong with re-writing. Re-writing is just an evolution of the project. Re-thinking, re-making - things just get better. Bad solutions die out. P.S. Transpaling JavaScript to JavaScript is different thing, because you just convert from one syntax from another, but abstraction layer from platform remains.
Feel free to give a corporate response to this one: as someone who is happy enough running a Java EE app in Wildly, what are the compelling reasons to look to shift over to Liberty? Things like faster startup and redeploy times would be enough to convince me (disabling features is probably a non-starter though), although other perks would also be welcome.
Beauty is in the eye of the beholder.
What is the difference between Liberty and Open Liberty? And what does all of this mean for WebSphere Application Server?
Open Liberty is a subset of IBM's Websphere Application Server Liberty Profile. This image shows the features supported by Open Liberty: https://i.stack.imgur.com/ijuMs.png What this means is that anybody can use or contribute to Open Liberty which includes javaee-7.0 and microprofile-1.0 features as well as others. 
Open Liberty is the Java EE and microprofile spec capabilities that are in WebSphere Liberty, but none of the other capabilities such as cluster management, WebRTC, SIP telephony, OAuth, and a few others. WebSphere Liberty and WebSphere traditional are still fully supported and not going away at all - if you want IBM support on Open Liberty then that supported version is WebSphere Liberty, as it builds on the same features that are in Open. Look at this as an additional tier of Liberty that completely coexists with the existing WAS portfolio.
I can't comment on startup and redeploy comparisons, but Liberty is designed to be lightweight and configurable. You only load the features that you need which adds the benefit of a smaller footprint in cloud environments. The nice thing about Open Liberty is that anyone can grab it and try it out for themselves!
Java is *really damn good* for larger *object oriented* tasks. You can practically convert the spec straight to Java and plug away at some code. But for quick scripts? Python, Javascript, literally any language that's quick to start. Heck you could have written it in C or C++. I write my short scripts in C++ and it's great! ^(P.S.: Sorry, other programmers, I'm just not a big fan of bash syntax :P)
You should write the library as part of the assignment...? Or..?
When I started C# didn't exist. Then went to academia, java is/was v popular there. Tons of places use java. Java is free.
Depending on how many layers you want to code, either Netty or JGroups could do the job. I'd check with your teacher if it's ok before investing much time in either though, as if he's imposing UDP the aim of the assignment might be to teach you network programming concepts like selectors, or building reliable apps on top of unreliable transport by handling latency, drops, retransmits, out of order packets, ...
Yeah it's use is fast becoming a programming article smell.
The problem has never been Strong Typing. The problem has always been DUMB compilers with atrocious Type inference hacked together on a Type system that's barely an afterthought. So programmers spend half of their time over-engineering boilerplate abstractions to make up for a poorly designed Type system. Look at the revelation Functional Interfaces, Lambdas, and Streams brought to Java. By making the Java compiler a little smarter about Types, all of sudden, lines and lines of boilerplate code and redundant abstractions were eliminated, and replaced with code that is simple, succinct and clean. The introduction of these features made Java feel like a completely new language. So much so that I don't care for Kotlin, Clojure, Groovy, etc anymore. The benchmark for a beautiful, well-designed and Strong Type System is still Haskell, in my opinion. Haskell is stricter about Types than Java. Like Java, it is statically and strongly typed. Yet, if you read Haskell code, you'd barely see any types. Haskell code is 90% functions, composable functions, and operator functions. In other words, mostly business logic. Java, however, has an obsessive fetish with shoving Types down our throats. The first thing we are taught as junior Java developers is how to babysit it's Type system to make it happy. And then as we become "Engineers" we begin abusing, ahem, I mean, exploiting design patterns to appease, circumvent, or fix Java's dumb or inadequate Type System. This drawback has earned Java the reputation of being needlessly verbose and hopelessly over-engineered. It's little wonder that the community endlessly wastes most of its resources writing frameworks, languages, and abstractions with the goal of hiding Java's tedious and overbearing Type System. So, once again, Strong typing is good. Static or Dynamic typing shouldn't matter in a language with smart Type Inference engine and a well-design Type System. And Immutable should be the default state for all types. What is bad, really bad, is an inflexible, poorly-designed, half-baked Type System with prehistoric Type Inference. This crime, unfortunately, is why JVM languages like Kotlin exist. Managing Types should be the job of the compiler, not the programmer. The programmer's job is to communicate intent, design and map abstractions to business problems, and compose (pluggable) systems that are amenable to change. If a language forces you to exhaust cognitive energy trying to make sense of the signature of a Generic Type, it has failed you.
Very well written! Part 1 is also good as well. &gt;If you ever find yourself in a situation where you really really need to test a private method you should take a step back and ask yourself why. I wish this got more visibility
Scala and Kotlin are a proof that you can have both strong types and a compact syntax, by using type inference
If you have type inference, you won't have a longer code. It is in haskell, kotlin and scala
sounds like some refactoring is in order
Typescript 
I am not a compiler engineer. But at least with java. You detect errors at compile time. There is that step. But with JavaScript you may detect runtime errors months or years later. Could have been prevent with a compile step
[removed]
Oh, JavaScript is garbage. It's offensive to even compare Java to JavaScript. They're not in the same league at all. JavaScript is like junk food. We know it's unhealthy, but it fills you up, it's cheap, and our excuse is that everyone is doing it. It baffles me that people use it for anything other than heavily sandboxed front-end development. I don't even believe you can build anything scalable or robust in JavaScript without extreme unit and integration tests. Web Components is the only cure I see to the ailment that is JavaScript. And that's because it brings discipline to JavaScript by imposing strict encapsulation and sandboxing. I'd love to wake up one day and hear that JavaScript has adopted TypeScript's, or Dart's, Type System and features.
Just remember that with UDP there is no guarantee packages will be received so if you want that you need to build a clunky ack mechanism. Also UDP has a nasty max packet size so be sure to split your data. But maybe that's the assignment...
Python is strongly typed but not statically. 
With Spring, Java developers now also have the joy of runtime type errors. Unit tests, good design, and automated regression suites are essential.
&gt; no static analysis in shippable production software then supplementing it with 1,000s of unit tests What are unit tests good for if all you need to do to break your software is calling those units with a parameter of a type they don't expect?
Thanks for answers. I see your concerns but he definitely doesn't have the intention of teaching us UDP communication. He just wants us to build communicating agents and he said they usually use UDP so we should too.
I think good type system helps more with navigating in the project. This property is especially useful in large(read enterprise) monolithic systems. + You get a good IDE support 
Nice One. I agree with most of the column with the exception of the last e2e test example. You cannot mock the database there, you should use a real one. If it functional testing and not performance related, it's fine to drop the DB and recreate it with the schema at every test start session.
Any reason not to use the built-in classes (e.g. `DatagramSocket`)? It seems that you only need to work on a fairly basic communication and the built-in classes should suffice. Some links that might help: + https://systembash.com/a-simple-java-udp-server-and-udp-client/ + https://docs.oracle.com/javase/tutorial/networking/datagrams/index.html + http://www.baeldung.com/udp-in-java 
I just want something which will save me some work as the task isn't about building the network layer.
I don't understand what you're trying to achieve with militantly trying to push Java EE everywhere but it's probably doing the opposite of what you're trying to achieve. 
Are you spending 600 hours writing the same "Hello world" again and again or are you actively learning? Point is; there is no way for us to answer your question. 
How would it crash? Anyone worth a damn would defensively program and raise a type error ( python ) or something. On top of that, assume the client is a consenting Adult and all that yadda yadda. 
From commercial point of view my gut feeling is that both type inference and flexible type systems are actually increasing the total cost of software development. With type inference you save bit of time when originally writing the code, but then during the subsequent years of maintenance everybody who reads through the code needs to mentally keep track of type of each variable, instead of seeing the type information right in the code. Similarly with flexible type systems you may save writing some auxiliary classes etc, but then junior devs trip over the advanced type constructs, and even senior devs are slowed down 'decoding' complex type signatures when reviewing and maintaining the code.
Thanks! What a cluttered design ...
Very mature, and used as akka new remote backend https://github.com/real-logic/Aeron
This is your frequent reminder that SQL too *is* a strongly typed language, e.g. if you're using views, stored procedures (e.g. in PL/SQL), or the excellent [jOOQ](http://www.jooq.org) #shamelessplug ;-)
Next, they'll open source DB2!
Thanks for your feedback. To be clear: the database (the *PersonRepository*) is not mocked in this case. I autowire the repo so that I can populate it with test data. There's a real H2 database running in the background.
They're called code smells not because the person calling them that subjectivity dislikes the code, but because the "smell" refers to the shape of the code being a bad sign. If the code fits that shape, then it "smells", and should be investigated. Not all code smells lead to bad code. https://speakerdeck.com/skmetz/get-a-whiff-of-this
[Akka](http://akka.io/) is essentially CSP. Then there is [Quasar](http://docs.paralleluniverse.co/quasar/). And with [async programming in Kotlin](https://blog.jetbrains.com/kotlin/2017/03/kotlin-1-1/) you can implement CSP, too.
Have you tried writing your code in TypeScript? It compiles to JS, and if you're already transpiling from ES6 you should be able to fit it into your build workflow.
I deployed `jenkins.war` in Open Liberty (rc1) and Tomcat (9.0.0.M26) and fired a million requests to both of them. After that, I ran a full GC. Performance was comparable. Memory consumption (used heap space) before and after GC were comparable. Deployment in Open Liberty was twice as fast (1.5s) but that is probably an unfair comparison and tomcat can be configured to be quicker. All in all, I could not find any significant differences considering runtime performance or resource consumption. Which is actually really good for Open Liberty because, other than Tomcat, it *can* scale to a full featured EE Server if required. Edit: Both would benefit from an GC that is quicker in freeing up unused heap space (e.g. G1) if run in a container and only hosting microservices. *tl;dr*: Open liberty is as lightweight as Tomcat for a simple application profile, but can scale up to a full featured EE Server if required. That's nice.
[Did you know that JavaScript was originally going to transition towards something very much like ActionScript 3, the language used in Flash?](https://en.wikipedia.org/wiki/ECMAScript#4th_Edition_.28abandoned.29) It would have been a vast improvement.
We've worked really hard on making Liberty really fast, but I know that every different benchmark can produce different results so I'm glad we stood up well against your benchmark. We are always looking to improve too. 
I forgot to mention, this is an android application I'm working on. So a lightweight implementation would be best. Kotlin seems to be the best bet.
I'm well aware of the meaning, hence my use of the term "suspect". The phrase seems to have originated in the extreme/agile community - M Fowler, R Martin &amp; K Beck are all fond of it, which is an enormous "smell" in itself and another good reason to not use it.
You sound more experienced than I was in my first junior/graduate Java role. I had 1 years experience from a conversion masters -- then got stuck in a job using an ancient language (Filetab D anyone?). I somehow got my first Java role despite not using the language for a year, thankfully it all came back quickly! Don't worry as a junior, you shouldn't be expected to know much. Typically (in the UK) a junior needs to prove that they can learn. Completing such a course without a teacher would definitely prove your ability to learn.
I'm going to be downvoted despite the fact that I'm huge fan of Typescript... It never reduced bugs from my codebase. It was never meant to and I don't use it for that matter. I migrated recently from a full javascript ES6 application to typescript. We did not find any bug using typescript. It changed the way we write code, so the code did not look the same after the migration. I never encountered the case where someone was passing wrong argument to a function in my codebases even though I was working with javascript, because we are using tests ! And no need for bigillions tests to reproduce typing system. If someone want to use your function it should read tests to know how to call it. So selling Typescript saying that reduces bugs is demagogic for me. It has several other advantages that are really better than that.
You can try something basic like [SynchronousQueue](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html)
Single API entrypoint when using Assertj makes my life easier thanks to autocompletion
Akka is an implementation of the Actor Model, correct, which [isn't exactly the same thing as CSP](https://en.wikipedia.org/wiki/Communicating_sequential_processes#Comparison_with_the_Actor_Model)? 
Strong typing may even make it faster to write code, since you can autocomplete through most of it.
Wow, quite a story ;)
People working for ibm and working on this have nothing to do with that and it's free sw anyway, so stop spamming with this.
You can Teach Yourself Java in 24 hours‚Ñ¢ so why spend 600 hours?
This whole genre, and therefore most of jetbrains marketing material, is asinine. Disclaimer: I'm actually a big IntelliJ fanboy.
wrong subreddit
Which applications are you working on that don't have "stability" as a requirement?
/r/Kotlin 
Goodness, this has made life so much easier!
I fully understand what you are saying. Actually, I was always a detractor of GWT and its Java emulation layer. That's part of the reason why I did JSweet actually. JSweet has no Java emulation layer. It maps the Java API to actual JavaScript APIs at compile time, so that what you get is real JavaScript. You should really take a look at what we did to transpile Sweet Home 3D. Basically, we transpiled the model, the controllers, and some key services such as Parsing a Sweet Home 3D file (in XML). On the other hand, the 3D scene written with Java3D was not transpiled, but completely rewritten with WebGL. It did not make sense to try to transpile it and it would have been too much effort compared to rewriting it manually. The point is that we have selected what was useful to be shared and were able to focus on the remaining small interesting parts that remain tightly bound to the WEB. JSweet is not a "all should be Java" approach. JSweet is more about sharing was makes sense to be shared. And there are a lot of things in a well-designed app that deserve to be shared. Namely all the core domain logics, because the core logic does not change at all wether you are in Java or JavaScript! Since JSweet generates regular JavaScript, it is fully interoperable with other JS, which allows you to pick up what you need to share and what you need to rewrite. Nothing is wrong with rewriting. But something is wrong thinking that you should always throw everything away and restart from scratch. Thinking that new things are always better than new ones will bring us nowhere. We need both new approaches and old approaches. Especially, we don't want to waste time changing things that don't have to change. Let us focus only on things that have to change!
JSweet is a transpiler. It is about automatizing code duplication. It is about automatization of code rewriting!! When you have JSweet, you duplicate your code base in Java *and* in JavaScript. Except it is done automatically with no risk of human errors in the process. If you want to drop JSweet after the rewriting is done, FINE. At least you saved a lot of time and boring debugging in the rewriting process. It's not because people have done things wrong in the past, that they cannot be done the right way. Many "new" things are just very old things done in a better way: think of functional programming or neural networks for instance :) Let's keep an open mind!
About time! üòä
I was interested in minimum memory consumption, so I did some basic 'hello word' tests (simple object alloc, loops to warm jit etc, also tried basic tuning) and it seems to be using little less than hotspot and actually release memory to the os, but why is it java requires so much (~40M) for simple programs? Is it the VM, or is OpenJDK so hungry? I'm interested in this because on VPSes usually memory is expensive. With java, 1G is minimum. But in comparison, something like golang (or even luajit) can run complex sites just with tens of megabytes.
Seems biased towards AssertJ. For instance, they never bothered to use Hamcrest's `is` decorator.
Agreed!, It also feels like there's still opportunities and improvements to build upon from these.
That is my point.
Expressive code, higher-order constructs, and well-designed abstractions will always communicate intent better than Types. I can think of only one scenario where Types matter to programmers. And that is to expose the Interface of an object. That's it! Every other reason programmers fiddle with Types is to cuddle handicapped compilers. Code is hard to read not because it isn't littered with enough Types, but because it's not expressive or assiduously abstracted.
I really love these little bits of history. Great story.
i'm not a compiler engineer either, but i know that one of the focuses of the java team is incremental compilation and that's what enables the incredible ecosystem of tooling. i'm not sure to what degree type inference impedes that effort, but it seems reasonable that there's a trade-off (i haven't used kotlin inside of jetbrains ide - i assume it's competitive with java in that regard)
Writing in an untyped language, you pile up a few more bugs. Trying to *maintain* someone else's code in an untyped language... you're often better rewriting. :-/
Sorry, I searched for Kotlin and didn't see it. Is it possible to move or should I just delete and repost?
I have already removed the post, so, please repost in /r/Kotlin.
Thanks!
Same here. I enjoy the stack, but the fact that Angular is an application development framework is a bit of a two-edged sword to me. It can feel bulky at times (vs libraries like knockout or react), but perhaps I am not proficient enough.
Same here. I vaguely remember it having some kind of visualization for object instances (boxes).
Our mention that 2 static imports are all you need for majority of tests. 
[removed]
Given that almost all testing i've seen out in the world uses jUnit or testNG, whats the point of bringing in another framework just to assert things
JUnit or TestNG are testing framework. On the assertion side, they are both pretty lightweight. Assertions benefit from a full-fledged DSL, making writing - and more importantly reading, them much easier.
Not sure what does it change? It still a set of interfaces without an implementation which is provided by webserver(like JBoss, Wildfly, Glassfish etc.), isn't it? Could somebody correct me if I'm wrong
https://github.com/vu3mmg/netty-udp-client-server 
But if you are running the application as Black box, you are not supposed to use the PersonRepository. For example if you want to run the e2e test whe the application runs as a Docker container, how would you populate the DB then?
Akka is what I would pick. Having worked with Quasar I've decided that java bytecode instrumentation is the devil
It's trying to make something subjective sound objective. "Code smell" is often just another way of saying "Not my style"
Hey man, they gotta sell books. It's not like they actually write code for a living
It changes that it's for Java EE 8. Before this people had to put the individual components like CDI 2.0 in their poms.
There is also Google Truth, which has a [page comparing its assertion syntax and capabilities with other assertion frameworks](https://google.github.io/truth/comparison). What the posted article doesn't show is the syntax to use your own `Matchers`. I personally like that the standard Hamcrest matchers and custom ones look the same in the code: assertThat(message, equalTo(expected); // A custom one assertThat(myServer, isUpAndRunning());
AssertNull(a) vs assertThat(a, nullValue()); assertEqual(a,b) vs assertThat(a, equalTo(b)); Trying to make code read like english is a misguided goal. Readable as code vs readable as english are 2 different things.
"Best" in what way?
Don't know any java compilers like that. I'm trying to get into coding and any that's good like in terms in UI. 
I am officially warning you: Don't bring any politics or unrelated things to this subreddit. They have no place here. This doesn't mean that I deny the holocaust at all, but still, this is a *technical* subreddit and history and hate have nothing to do here. Next time, you will be banned without further warning.
*its
To be fair, directly asserting equality is a very trivial thing to do. Of course you don't need another framework for this. But where Hamcrest &amp; AssertJ really shine is with assertions on more complex data structures like Optionals, Collections or even your own domain models. Basically everything where you have to "unwrap" or "extract" values. In AssertJ for example you could do this: final Optional&lt;String&gt; methodResult = /* ... */ assertThat(methodResult) .isPresent() .contains("expectedValue"); Whereas with vanilla JUnit you'd have to do something like: assertTrue(methodResult.isPresent()); assertEquals(methodResult.get(), "expectedValue"); A similar thing with Maps: final Map&lt;String, String&gt; myMap = /* ... */ // Hamcrest assertThat(myMap, hasEntry(is(equalTo("myKey")), is(equalTo("myValue"))); // AssertJ assertThat(myMap) .containsEntry("myKey", "myValue"); // JUnit assertTrue(myMap.containsKey("myKey")); assertEquals(myMap.get("myKey"), "myValue"); I find especially AssertJ to produce more readable assertions. You can read them from left to right, from top to bottom and simply understand them, whereas Hamcrest often produces strange word combinations and JUnit's style is very limited.
Do you mean a development Environment? Then your two best bets would probably be intellij community Edition and eclipse :) 
javac and ecj are both fine
I feel like both of them are very much the same. Only once I experienced an odd difference: Akka didn't work with Eclipse because Akka used a reflection mechanism that was actually forbidden in the Java spec but javac hadn't implemented it.
Readability of the assertions is only one aspect. The more important aspect is good error messages when those assertions fail "assertion failed" helps no one.
You are looking for an IDE (Integrated Development Environment), not for a Java compiler. The three most common IDEs are: + Eclipse + IntelliJ (Community edition is free) + Netbeans If you are looking for a compiler: that is part of the **J**ava **D**evelopment **K**it (JDK). ---- Next time, please ask such questions either in /r/javahelp or in /r/learnjava. Here is not the place for these questions as the sidebar clearly states.
To create a working Java EE application you could just use this dependency and do everything with the annotations from it. That's the whole point of Java EE: program against APIs and let the application server pick the implementation. However, usually you want some extra non vanilla features for which you would add a dependency on something like Jersey. If you take this feature dependency further you get Spring where everything is much more explicit even if it's hidden through transitive dependencies.
So why did Java win and not Smalltalk?
Yes, with regards to blackbox testing you're absolutely right. It's very convenient to use the *PersonRepository*. And it makes for a readable test that's easy to reason about. Everything you need to know for this test is right there. In a sense it's still end to end as the data flows from one end (the API) to the other (the database) and back. Still, you're right that running end to end tests often comes in a flavor where you run against a deployed system. Now somehow you need to get test data in there. In fact that's one more thing where E2E tests become annoying and hard to reason about. Basically, you only have a couple of options: * use "well-defined" test data that you always load into your database as seed data (e.g. a test customer with a special name that you use in your test) * have the end to end tests insert test data by using your applications' API (if you have one) * let tests insert test data directly into the database. This can be hard to maintain when your database schema changes * design your tests cleverly. If you need a test customer, maybe you can make registration of that user part of your test journey. This is incredibly hard and won't work in all cases though The test data problem is a big one in E2E tests. That's one of the reasons why I think you should have as few as reasonable. Some go so far to say that all your lower-level tests in combination with a proper monitoring of your production systems are sufficient and can completely replace the need for end to end tests. I've recently been with a client where we did just that, replace all end to end tests with CDCs and monitoring and there's not one case where we regretted that decision.
Or use tcp and have a lot of issues automatically solved. Also make me it easier to switch to TLS.
I did 2 minutes of research and have come to the unshakeable conclusion that the company mismanaged it so hard that it died. They charged too much, they wanted profit sharing in addition, they didn't partner with anyone smart enough to do a good job, and they didn't tie it to anything to get it widely distributed. 
Ohhh, Sureee, you not understand!??? I think you understand very well Mr! 
Fair enough on Maps at least as far as it being a bit of style. At least in the junit example you wouldn't really bother with checking if the map contained the key, as it just returns null if not, and null != myValue. But for sure asserting via continuation can be a bit nicer. 
I think all of the assertion methods in junit at least let you put a custom message in. 
Custom messages can be helpful, but I prefer it generating better ones from just the assertions I write. That's why I've been using hamcrest for ages. For Javascript, I'm using [power-asserts](https://github.com/power-assert-js/power-assert) which work even better while using even simpler asserts.
Actors and CSPs are not exactly the same, but close enough to be interchangeable in most cases. 
That's sad but the way of things I guess. Best technology doesn't always win. Read that it's still somewhat alive with Squeak, might look into it for a pet project.
[removed]
Enough is enough. You're banned. I warned you. I told you that this is a *technical* subreddit. You won't stop. You're banned. Goodbye.
&gt; I believe that Java zeros all allocations, although I'm not 100% sure. Yeah, the variable is either assigned an initial value, or 0. It's never a random value from whatever was in memory. int i; // value of 0 int i = 5; // value of 5 
Why do you need to sort map? If you need sorted collection pick right data type.
I actually really like C# as a language, but Java 8 has helped with lambdas and other goodies, but I use Java because it's the language I learned, and there are jobs for Java devs. 
from an engineering point of view this might be true, but what if you have no way to change the implementation and just work on the `Map` interface
Take a look at Pharo and Cincom as well.
The majority of Smalltalk environments were commercial, sold with typical enterprise prices, while Sun was giving away Java SDKs for free. Almost every computer programming magazine after 1996 had the JDK on its free CD.
Why do people bother, I really don't get why you'd write this. It's so basic. And the website is shit on mobile.
I think I ran into a couple cases of this when using checker-framework to analyze some code. As I recall, if you call an instance method from a constructor, checker-framework will complain because the assumptions are that 1) the instance isn't fully initialized until the constructor returns; and 2) instance methods expect a fully-initialized `this`. If I remember it right, a solution is to annotate the `this` parameter in the instance method as `@UnderInitialization`, which tells checker-framework that the method is designed to handle an incomplete instance.
I am loading word frequency from a given text using collectors and the had the frequency number in the value. Can you code review an alternative? private static Map&lt;String, Long&gt; wordFrequency(String txt){ Stream&lt;String&gt; stream = Stream.of(txt.toLowerCase().split("\\W+")).parallel(); return stream.collect(Collectors.groupingBy(String::toString,Collectors.counting())); } private static Map&lt;String, Long&gt; sortByFreq(Map&lt;String, Long&gt; col){ //decending is Comparator.reverseOrder(), asc is Comparator.naturalOrder() return col.entrySet().stream() .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())) .collect(Collectors.toMap( Map.Entry::getKey, Map.Entry::getValue, (v1, v2) -&gt; { throw new IllegalStateException(); }, LinkedHashMap::new)); }
&gt; I can think of only one scenario where Types matter to programmers ... Every other reason programmers fiddle with Types is to cuddle handicapped compilers. I don't understand your opinion at all. Most statements in most languages deal with variables. To write or modify the statements developers need to have mental model what the variables represent, and one of the most important aspects of that is the type of the variables. E.g. if a variable represents 'user', the developer must keep in his mental model whether the type of 'user' is string, a domain model User instance or perhaps authentication library's User instance. The need to keep the type of the variables in mental model is equally true for languages that have great type inference, and for dynamically typed languages, and for languages that use different paradigms than OO, and even for math or physics done on paper.
&gt; Why do you need to sort map? If you need sorted collection pick right data type. Two common reasons: * you get unsorted map from code you didn't write, and the cost + risk of modifying that code is higher than the cost + performance impact of sorting the map. * you want to use map implementation optimized for high concurrency, e.g. ConcurrentHashMap, and after a parallel computation has been completed you sort the results.
Yes, most languages deal with variables. And by their very nature, variables are not Types, they are Expressions. The Type of "user" doesn't matter. It's a silly detail. A meaningless data structure in the absence of context. Why the hell do I care about its type? What does user do? Why does user exist? How is user expressed? That's what matters. user.willNeverDance() user.withdrewCash() user.canAttackDroid() user.hasInvalidPassword() I have just "Expressed" user in 4 different contexts. These contexts are clear not because of Types, but because of the expressiveness of my intent, and the use of an abstraction called a method. How much time do you spend communicating and deciphering intent when you work with source code, and how much time do you spend admiring data structures? from django.shortcuts import render def band_listing(request): """A view of all bands.""" bands = models.Band.objects.all() return render(request, 'bands/band_listing.html', {'bands': bands}) The above is a random snippet of code from the Internet. It barely has any Types, at least none that is obvious. The Java compiler will squeal at this code. It will claim it doesn't understand what is going on. Even though it has significantly more details about this piece of code than you. So, tell me, how is that without any Type information, and without as many details of the inner workings of the code, it is very likely that you understand exactly what this code is doing. What is very clear is that it has nothing to do with Types. The reason you understand the code is because of Expression and Abstraction. You understand the abstraction of a container. A container is container is a container. The details of its exact type are completely irrelevant and don't add anything to do with your understanding of the code. For the most part, all containers behave alike. The function is expressive enough for you to infer that returns some type of list or container object. It communicates its intent clearly. And from the way the expressions are composed, we can deduce that this piece of code is handling a request. That's it. That's all that matters. Types? Who cares? Let the compiler/IDE figure that shit out. I know what this code is doing. The compiler/IDE with more information than I have should also know what this code is doing. The person who wrote this code has done her job. She has Expressed her intent using clean abstractions. There's no redundancy. No boilerplate constructs. No funny syntax. No casting BS. And most importantly no Type to be found anywhere. Again programming is about Expression and Abstraction. Not Types. Types are useless details. They should be managed exclusively by compilers and IDEs. The only time anyone cares about a Type is always in the context of Expressing or communicating an intent. Even in Java, good IDEs and compilers will show you how to use the protocols of Types to express your intent. Seriously, do I really need to tell Java that the number 6 is an Int? Really? Can't it figure that out on its own? This is why Languages that manage Types are always more expressive and packed with power abstractions than Languages that don't. When you're not limited by the shackles of Types, you can express yourself powerfully and succinctly. There are one line constructs in Python or Haskell that will take dozens of lines and multiple Classes, I mean Types, to express in Java. Try implementing Haskell's pattern matching in Java. Have fun fighting with Types. 
&gt; The function is expressive enough for you to infer that returns some type of list or container object. Actually it looks like the function returns a rendered HTML snipped, not "some type of list". But we cannot know for sure, without explicit Type information in the code. &gt; And most importantly no Type to be found anywhere. There is half a dozen Types in that function, both in the mental model of the developers, and in the the runtime model of the virtual machine. My original point was that being explicit at code level/model about the Types that are *anyway* around at different levels/models seems to reduce the total cost of writing and maintaining software in many cases. I agree that the explicit Type information itself does not "Express Intent", but it provides developers context how the variables/object can be used and what methods can be invoked on it (in your terms perhaps "what intents the objects can express").
Because i can't C Sharp ! Actually, because it has a solid and large community, widely used and it's sweet to use in problem solving competitions.
I find it somewhat amusing that, since basic java questions aren't allowed, we now instead get blogs with answers to basic java questions. Is the cure worse than the disease?
Since this question is *programming help* it should, as the *plenty hints* on this subreddit indicate, be posted in **/r/javahelp**. Still, as this is a *no effort*, *solve my problem* question it would not be acceptable there either. You should try to solve the questions *by hand* as it is not difficult at all. Learning manual debugging (i.e. tracing code on paper) is an essential skill for each and every programmer. &gt; is there an easier way to figure it out? Yes, pen(cil) and paper. You don't need to use a computer for that.
&gt; Actually it looks like the function returns a rendered HTML snipped, &gt; not "some type of list". But we cannot know for sure, without explicit &gt; Type information in the code. My mistake. You're right. It returns an HTML page populated with a list of bands. It's late over here. :-) &gt; My original point was that being explicit at code level/model about the Types that &gt; are anyway around at different levels/models seems to reduce the total cost of &gt; writing and maintaining software in many cases. By the way, I'm not against entirely getting rid of explicit Types. Types just shouldn't be a big deal. Certainly not at the expense of powerful expressions and better abstractions that eliminate needless code. Today, Java is verbose because of its arcane philosophy about Types and reverence for it! Mixed Strong Static Typing is a thing. It works today and it doesn't get in the way. Haskell, Go, and Kotlin are rich examples how to do them well. Types in these languages are not overbearing. They are not the center of gravity that defines the momentum of these languages. When you focus on Expression and Abstraction, you get Functional Interfaces, Lambdas, and Streams. When you focus on Types, well, you get Generics. And Generics, as they implemented today in Java, is what you get when the compiler says, "Fuck it, you manage and deal with Types because I can't be bothered". &gt; I agree that the explicit Type information itself does not "Express Intent", but it &gt; provides developers context how the variables/object can be used and what &gt; methods can be invoked on it (in your terms perhaps "what intents the objects &gt; can express"). We agree. That's basically the extent of their utility. They document an Interface that shows you how to use an object. Nothing more, nothing less. Types should be as inconsequential as annotations. When Expressions and Abstractions are not enough to communicate intent, maybe they show themselves inconspicuously to provide additional context. That's not the case today in Java, though. &gt; There is half a dozen Types in that function, both in the mental &gt; model of the developers, and in the runtime model of the virtual &gt; machine. Exactly, the runtime model of the virtual machine is precisely where Types should be trapped. It should never invade the cognitive burden of a programmer. The fact that programmers have to manage Types to the extent they do today in Java is a leaky abstraction. You're never going to know as much about the Type system as the compiler. You're never going to have all the extensive details about the hierarchy of Types and their relationships as the compiler. You're never going to know all the rules and theories that define the Type system as the compiler. So why again should you care about it, much less try to co-manage it with the compiler? The mental model of a Python programmer is that everything, literally everything, is an object. The notion of a Type is dynamic, polymorphic, ever-changing and contextual. This is precisely why Types don't matter to them. It's a given that everything can be manipulated. The question is to what end and for what reason? In contrast, Types in Java, well, they are such a big deal! They are fixed, static, and inflexible. If you look at them wrong the compiler will have a seizure. They demand so much attention they are such divas. And that's beside the sacred rituals, apocalyptic rules, and mind-numbing drudgery you have to do to make them somewhat dynamic or polymorphic. Java is called the BDSM of languages for a reason. What's worse we put up with all this crap, not because it is necessary, but because we have to pacify a compiler designed with the flawed philosophy that programmers should value diddling data structures, over composing simple, beautiful, and powerful instructions with ease and efficiency. That philosophy is why Types demand so much unnecessary energy in Java. We take it for granted because if there's one thing Java got right, it's the powerful tools, IDEs, and frameworks, that work miracles in the manner they hide many of Java's inexcusable flaws. It's ironic that Java IDEs can infer types with stupendous accuracy in a manner that the compiler still lags behind. The Java IDEs semantic analysis always seems to be 2 or 3 generations ahead of the compiler's own technology. On a positive note, I'm convinced the introduction of Functional Interfaces and Lambdas was a moment of epiphany for the Java engineers. I won't be surprised if, by Java 11 or 12, Java is fully inferred and completely managed by the compiler. Heck, I was surprised to see an API for Reactive Streams in Java 9. I think the functional bug may have bitten the engineers. I hope, someday, we look back at the mindless and silly rituals we made adulating Types, the same we look back at the era manual memory management in terror. Unfortunately, I have to call it a night. Great discussion. :-) Good night.
haha that's so awesome. Wish i worked at a place with people that do this stuff
Thought I'd bring in some treats for the office! Although I'll readily admit that I'm a programmer, not a baker.
**Sidebar** **No surveys, no job offers!**
Wonder what time Oracle will drop the JDK9 installers. I see Azul has released their final build :) https://www.azul.com/downloads/zulu/zulu-windows/
When you start generating assertions using AssertJ Generator, your tests start to look brilliant. You then start writing: assertThat(myObj) .hasName("name") .hasTitle("title"); This is the main reason we chose AssertJ. We generate assertions into a seperate jar using Gradle/Maven plugins.
That's a fantastic couple of articles - thanks for taking the time to write them. My team is currently following a lot of the practices here - however integrating with services provided by other teams is a huge pain point in the organisation. Pact is new to me, and looks very interesting (which the huge caveat that provider buy-in is required - much easier said than done!). I look forward to digging into that further. In a situation where you (or your team) has been responsible for developing multiple communicating microservices, have you a strong preference for using Pact over integration tests? It seems its core strength is in removing any API ambiguity between producer and consumer which might easily creep in - however an E2E test should catch such things (again, assuming your team is responsible for a pair of microservices under test).
I use Java mainly at work. I am guessing it's going to be at least 1 or 2 years till we start thinking about upgrading to Java 9 for future projects. It'll be a lot better than Java 8 in many cases, but we currently have no idea on how to adopt it or what advantages it gives (Actual advantages, not advantages they say it gives), it takes too much time and time means money when working, so the bosses (the people who control the money) won't like seeing us "wasting" time with a new technology.
Any pointer to release notes?
Fixed link: https://www.azul.com/downloads/zulu/zulu-linux/
Don't seem to be any :( Nice that this is released, but a little bit more fanfare would have been cool.
They've updated the docs on the migrated site https://javaee.github.io/glassfish/documentation Very subtle release but they've updated all the important bits
I feel the smell of old nasty enterprisy monolith here...
You write very eloquently :) I'm not saying that you are "wrong", but i think you are right only for a narrow set of types of programs and sizes of projects. For example, if you'd do systems programming for large projects you'd likely agree that things like "Type is dynamic, ever-changing" and "everything can be manipulated" are extremely dangerous and highly undesirable. Similarly priorities change with the size and type of project; for small web projects perhaps your idea about expressiveness and abstraction being the most important concepts is right, but when you have a system of 20 million lines of code the existence of the company and thousands of jobs depend on modularity, while expressiveness of code is only "nice to have". &gt; My mistake. You're right. It returns an HTML page populated with a list of bands. It's late over here. :-) Ultimately my point is that if your example code would have had explicit type information, then you would not have made the mistake, even though it was late...
Wasn‚Äôt in the news section, but docs seem to have been updated. This is quite the silent release indeed.
3255 open issues, maybe I'll wait a bit. :)
I think that the argument that Java EE would be a better fit (than the not mentioned Spring) for containers, because the application server contains the libraries, is a bit artificial. Yes, you can create a docker image with the application server and only add your app, but building a fat jar and copying that to a container, is not a big deal. You could even place the jars in some base docker image, but I've never seen that, because it is simply no issue. But the downside of app servers in container is that they must be configured what is painful compared to the Spring approach. If you would use embedded app servers like Wildfly Swarm instead you would get a fat jar as with Spring. I'm quite a bit shocked by this statement: &gt; Java EE 7‚Äîespecially when used together with Java 8‚Äîcomes with enough functionality to cover the majority of use cases without any other dependencies. What isn't contained out of the box can mostly be realized with a minimal amount of code, for example, injectable configuration via CDI producers, circuit breakers via interceptors (have a look at Adam Bien's open source libraries), or sophisticated collection operations via Java 8 lambdas and streams. &gt; Of course, you could argue not to reinvent the wheel here. But actually it doesn't make a lot of sense to include megabytes of external dependencies into the deployment artifact just to save a couple of self-written lines of code. I would strongly advise against this copy and paste approach! If you would really care about the sitze of the final jar, then you could strip unneeded classes by using a Maven/Gradle plug-in. But don't copy paste code to save a few kilobytes!
Download page will be updated around noon Pacific time. https://twitter.com/DonaldOJDK/status/910830843668525056
Thanks!
good video for java
The release notes: https://javaee.github.io/glassfish/doc/5.0/release-notes.pdf Highlights: GlassFish Server 5.0 includes the following new and updated Java EE standards. **New Features:** ‚ñ† Java EE Security API 1.0 ‚ñ† Java API for JSON Binding (JSON-B) 1.0 **Updated:** ‚ñ† Java API for JSON Processing (JSON-P) 1.1 ‚ñ† Java API for WebSocket 1.1 ‚ñ† Java API for RESTful Web Services (JAX-RS) 2.1 ‚ñ† Contexts and Dependency Injection for Java EE (CDI) 2.0 ‚ñ† Java Persistence API (JPA) 2.2 ‚ñ† Common annotations 1.3 ‚ñ† JavaServer Faces (JSF) 2.3 ‚ñ† Java Servlet 4.0 ‚ñ† Bean Validation (BV) 2.0 ‚ñ† Interceptors 1.2 ‚ñ† JavaMail 1.6 
&gt; Yes, you can create a docker image with the application server and only add your app You can also create a separate container layer and put everything on the classpath there instead of building a fat jar. I really don't understand why this is even an argument. Just because it's the most convenient way (building a fat jar that you can just run with java -jar) doesn't mean it's the only way. If you're in a world where Docker image size is somehow relevant (our microservices are around 50MB in size so a 3TB disk can contain 60.000 of them) then you can always go through the effort of having your dependencies in another layer. Which completely goes against the idea of having your container contain all it's dependencies to avoid conflicts. 
I don't see any Zulu 9 build.
That's strange [it was there earlier](https://i.imgur.com/btJwY2w.png) as I've downloaded it! Edit: The download link still works - http://cdn.azul.com/zulu/bin/zulu9.0.0.15-jdk9.0.0-win_x64.zip - but they seem to have removed the links from the download page. Edit 2: It's there again :)
This is 9 PM CEST, 7 PM UTC
9 PM CEDT happens when this comment is 3 hours and 51 minutes old. You can find the live countdown here: https://countle.com/Bzx632778 --- I'm a bot, if you want to send feedback, please comment below or send a PM.
Could somebody ELI18 why Azul? Why not Oracle JDK? P.S: I'm really glad that there are many implementations of JDK, but why would you use it over Oracle's one?
Just because you lack vision and can't think of a use case for sorted values in a Map doesn't mean there isn't one.
/r/javahelp 
i tried that, for some reason it says 'subreddit doesnt exist' o.o i dont use reddit much
From the hyperactive thumbnail photo, I thought it's this guy: https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q Thank god he's still contained within the JavaScript community.
Can confirm - they were there :-/
OK, I wrote the blog post and I work for Azul, but... As an alternative to the Oracle JDK, there is no difference from a feature, performance or technical perspective; it's simply about offering a choice of supplier. However, if you are looking for commercial support let's just say you may find our pricing more attractive...
You want a pauseless GC able to handle heaps of several hundred GB in size , alongside a JIT and AOT compiler able to deliver the desired throughput in Fintech.
We (Azul) were a bit too enthusiastic and didn't realise that 21st September meant noon PST on that date. It's Oracle (and the OpenJDK's) project so in fairness we took down the links until the official release is out.
If you are trying to do "communicating agents" Then you should look into Actors. Since this literally exactly what they do. For java a common framework for this is Akka. These agents will work both WITHIN a JVM, between JVM's on the same machine, and between JVMs on remote machines.
So you could just as well offer support for openjdk?
Good bot
Thank you DJDavio for voting on timezone\_bot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
As in your [last post here](https://redd.it/71ci8j) the question does not belong here as per our subreddit rules. This should either be posted in /r/SublimeText or in a general forum, like /r/learnprogramming. This time I am removing the post. Next misplaced post will earn you a ban from here. --- Still, to answer your question: Sublime is a text editor with plugins. That's it. You use it to edit plain text files (including source code for various languages).
Clicking on the link I wrote works for me. Seriously, people will just scold you here and tell you to go there. Good Luck. :)
I've used both full Java EE and Spring in containers and the difference in simplicity is big. Java EE containers often have weird bootstrapping issues which isn't an issue at all with Spring.
Difference in simplistic big indeed, Java EE much simpler! üòú
Nice suggestion! Sadly our project have to work together independent of platform or language (other students are implementing it in c#). Maybe I will take a look in the future though.
For the **very last time**: #Do not post tutorials here! Next time will result in a ban without warning. Your post history consists **solely** of self promotion. This is strictly forbidden. You are a **SPAMMER**.
The subreddit exists **and** the link works - as do the plenty links to it in the **sidebar**. Your question does not fit here according to the subreddit rules in the **sidebar**.
Correct me if I'm wrong, but I believe that Azul's license is more permissible. For instance, I believe that you can distribute only a partial JVM with Azul's distribution in case you want a smaller install footprint. edit: For Java 9 that example is probably not as useful.
Oracle JDK is OpenJDK plus some proprietary tools, like Mission Control and Java Flight Recorder (though they are targeted for open source in the future). Zulu is OpenJDK with nothing proprietary. Oracle sued some companies for using some of their tools that are bundled with their JDK (you can't use them in production without paying). Using Azul's or RedHat's packaged OpenJDK avoids such legal land mines all together. Edit: Azul also makes Zing, which is a completely different and pricey JVM, but that's not what the post is advertising.
That's what I was thinking. They should set release dates in UTC. :P
The fact that assertj has evolved to support modern Java 8 features - such as lambdas and streams - puts it far ahead of other assertion libraries like Hamcrest, not even accounting for readability of the respective DSLs.
AH got it. Ok I would suggest Mina (older ) or Netty. This will take care of all the NIO stuff (meaning it has an acceptor and handlers threads), you just write "handlers" which are called on the handler threads. Should handle any reasonable amount of traffic you send at it. No idea if this project works, but it looks roughly correct: https://github.com/vu3mmg/netty-udp-client-server
Thanks, I really appreciate that you took the time to read and that you liked it. I believe that taking Pact for a test drive will be tremendously helpful for you, even if you don't end up using it. The moment where you understand the flow and purpose of CDC tests (which is quite hard to grasp, I think) will be helpful for you to find a good solution for your integration problems. Having something like Pact in place is what counts. Don't be caught up on the tool itself. Having tests that test the contract between two services from both sides is essential. If you struggle to get started with this practice, I suggest you start simple: write tests that send http calls to the interface of the team you're integrating with. Include everything in the tests that's crucial to your team (endpoints, headers, response bodies) and assert that everything is correct. Take these tests, bundle them up as an executable and send them to the other team. Even if your neighboring team is not convinced of what you're heading for, I believe hardly anyone will say "no" if you approach them and say "hey! We've written some automated tests for your service. Just run this file and we will bug you less in the future". Does that help?
Sure, I'll keep in mind. Really sorry, I apologize for the inconvenience.
Good bot
You are the 9455^th person to call /u/GoodBot_BadBot a good bot! ^^^^/u/Good_GoodBot_BadBot ^^^^stopped ^^^^working. ^^^^Now ^^^^I'm ^^^^being ^^^^helpful.
Good bot
You are the 4439^th person to call /u/Good_Good_GB_BB a good bot! ^^^^And ^^^^now ^^^^I'm ^^^^being ^^^^anti-community.
It seems to be there: http://www.oracle.com/technetwork/java/javase/downloads/jdk9-downloads-3848520.html
Trisha Gee, you're a great programmer, why are they making you write this marketing stuff? There are so many exciting things to implement and so many bugs to fix in IntelliJ, I'm sure your time can be better spent there. All my bug reports are still Open :(
JDK 9 Now available on standard downloads page http://www.oracle.com/technetwork/java/javase/downloads/index.html
Huh? You work for Azul and you're saying there is no difference from a performance perspective? I'd say the pauseless GC is a pretty fucking big difference, and the only reason why my firm pays you guys buckets of cash every year. Not that there aren't costs that come with that. 
I hope Oracle still releases the JRE for 32-bit Windows. **EDIT**: [Java 9 on Windows is 64-bit only.](http://www.oracle.com/technetwork/java/javase/jdk9certconfig-3761018.html#clientos)
When can I expect it on Arch Linux and centos?
Here you go: http://mail.openjdk.java.net/pipermail/announce/2017-September/000230.html
Arch Linux? Probably in a day or two. CentOS? Given that RHEL would probably be adding this at some point (it has all other JDK versions), CentOS may not be adding it soon. Fedora should be getting it within a few days too.
The Linux archives are available on the Oracle site so you can get it now. Or you can get the OpenJDK build at http://jdk.java.net/9/
Please write 3rd part about authenticated requests, JWT or session based.
but it's well written and documented, so this one should be alright to post, part 1 got some above average number of upvotes.
StackOverflow my boi.
Where is "Linux ARM 64 Hard Float ABI"?
Oh there's a shock. I installed a pre-release JDK9 for 32-bit just two months ago. Edit: Puzzlingly, the documentation explicitly describes installation and system requirements for 32-bit Windows: https://docs.oracle.com/javase/9/install/installation-jdk-and-jre-microsoft-windows-platforms.htm#JSJIG-GUID-61460339-5500-40CC-9006-D4FC3FBCFC0D Perhaps there will be 32-bit binaries online later?
lol, the webpage still looks like it was build in the nineties :|
Configuration of app server was always pain in the ass. I am glad that after 5 years in javaee I am currently working with spring. One could say that spring also need to be configured, but I've found it much simpler than in javaee. 
And now it's "just" a matter of replacing/updating tooling which uses internal JRE APIs. This is going to fun.
[Yup!](https://github.com/gradle/gradle/issues/2992) Or in that case, just the version parsing.
OpenJDK is source code. It needs to be built into a binary distribution to use it. That's what Zulu is and that's what we offer support for. It's the same idea as Oracle's support of their binary distribution.
We (Azul) have two different JVMs. Zulu (which we're talking about here) is the straight build of OpenJDK with no changes. Zing (which you're thinking about) is where we replace GC and more recently the C2 JIT. We have not yet released Zing 9 but will do shortly. My blog post was about Zulu 9.
Literally anything you'd use any other General Purpose Programming Language (C, C++, C#, Python are the obvious comparisons) to accomplish. [Games](https://en.wikipedia.org/wiki/Minecraft) have been made in Java, and a wide variety of Enterprise Software companies use Java as their programming language of choice for their software (I work for one of them!). Basically, if your question is "what language should I use to solve this problem?", Java will always be an acceptable (if not necessarily the *best*) answer to that question. As to what it's mainly used for: the main uses are * Java Applets that run in web browsers; however, this functionality has been largely going the way of the Dodo in the last decade, because of tremendous security concerns that go unmasked/unconsidered by average web-browsing users, that are easier to maintain/understand when using more robust Java technologies (like Web Start) or other languages entirely. * Web Servers and Application Servers, especially in Enterprise settings. This is where most of the money is these days: the "compile once, run anywhere" mantra associated with Java is extremely appealing to corporate scenarios, where you need to be able to guarantee that your software will work on dozens of potentially unknown environments. * Standalone smaller applications. Probably the least common (though may overtake Applets just by sheer virtue of Applets being phased out), but if a freelancer or hobbyist has some kind of simple task they're trying to accomplish, it can be convenient to write it in Java. * **EDIT** (Thanks /u/feral_claire): While Android development does ostensibly have the NDK for direct development on the underlying hardware of the device, development does principally require Java for the core of any application development. 
**Minecraft** Minecraft is a sandbox video game created and designed by Swedish game designer Markus "Notch" Persson, and later fully developed and published by Mojang. The creative and building aspects of Minecraft enable players to build constructions out of textured cubes in a 3D procedurally generated world. Other activities in the game include exploration, resource gathering, crafting, and combat. Multiple gameplay modes are available, including a survival mode where the player must acquire resources to build the world and maintain health, a creative mode where players have unlimited resources to build with and the ability to fly, an adventure mode where players can play custom maps created by other players, and a spectator mode where players can fly around and clip through blocks. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.27
At least this one is easy to fix, there is a solution provided out of the box: https://docs.oracle.com/javase/9/docs/api/java/lang/Runtime.Version.html
Gradle still needs to run on Java 8 and 7 though.
That's a fair point.
Anyone actually use glassfish?
[removed]
[removed]
Just installed the JDK and tested a little pet project of mine. Spring Boot worked fine but an API wrapper I'm using is using stuff that's part of Java EE officially so for now I will have to run it with --add-modules java.xml.bind. So assume there will be quite a few broken libraries. 
A big thing you missed is Android. Java is the primary language for Android app development which is a huge portion of it's market share.
I've added that. Good point.
Applets aren't even worth mentioning. Java's main appeal from a corporate point of view is the mature tooling, the huge ecosystem and the massive number of potential hires; Java is still the most popular programming language in the world according to the TIOBE Index. "compile once, run anywhere" is rarely a deciding factor.
&gt; Arch More like 2 days ago, with a beautiful wiki page already created.
I can't speak to your specific experience, but in mine, the reason so many companies use Java today is because of inertia, not strictly because of any particular appeal. It might very well be that there are companies who are starting fresh, looking at the available environments, and deciding spontaneously that Java is indeed the correct solution for them, but most companies seem to only pick Java because they already picked Java 10-15 years ago, and correctly deduce that maintaining + updating the software they've already written is more worthwhile than starting over from scratch. Pretty much everything else (mature tools, large number of hires) are reactions to the status quo, not a *cause* of the status quo (unless you explain it like an Ouroboros, I suppose). Colleges teach Java because a plurality of companies use it. The tooling is mature and extensive because a plurality of companies use it, and so on, and so on... Which is sort of a round-about way of justifying the inclusion of "Compile Once, Run Anywhere", because even if that isn't the deciding factor today (or even terribly important in any capacity), it did matter once upon a time, back when these decisions were actually getting made. It's sort of the same with Applets: like, today, Java Applets are irrelevant. They're even Deprecated in Java 9. But once upon a time, they were important, and informed upon the decision-making processes that led to the adoption of Java in the first place.
I just downloaded the new JDK 9 and tried to build univocity-parsers (https://github.com/uniVocity/univocity-parsers) only to find a bunch of unit-tests failing. Here is what I found: * `string.getChars` used to throw ArrayIndexOutOfBoundsException (tested on JDK 6-8) but now it throws StringIndexOutOfBoundsException. Changed my try-catch to get IndexOutOfBoundsException instead so it can work with all JDKs. * **NOT BACKWARD COMPATIBLE** - any library that catches ArrayIndexOutOfBoundsException on `string.getChars` will fail to handle the error and potentially break your application. Same for other methods such as `substring`. Changing the exception type was a BAD decision and provides no benefit from what I can see. * `SimpleDateFormat` - the "MMM" date mask for the month used to return "Oct" for October. Now it produces "Oct." with a trailing period. Dates that used to be printed as "25-DEC-2015" will now come out as "25-DEC.-2015" which sucks. But what sucks more is that dates that were parseable now simply aren't because they don't include the dot. Passing `Locale.ENGLISH` to the constructor solves the issue (e.g. `new SimpleDateFormat(datePattern, Locale.ENGLISH);`) but it is a problem for libraries. Looks like something changed in my default locale (`en_AU`) in Java 9. * ~~**NOT BACKWARD COMPATIBLE**~~ - At least in Australia this used to work since ever but won't work with JDK 9: `new SimpleDateFormat("yyyy-MMM-dd").parse("2015-DEC-25")` throws an exception now. In any case this is by design as per bug report https://bugs.openjdk.java.net/browse/JDK-8173621. I'm sure it will annoy a lot of people regardless. * **Edit 3: the actual backward compatible solution** thanks to /u/cl4es &gt;&gt; The use of CLDR by default in 9 can understandably lead to some issues, especially if the legacy JDK locale and the CLDR-based locales differ in unexpected ways. Setting -Djava.locale.providers=COMPAT,SPI would revert back to the behavior in 8, if the alternatives fail to satisfy. * Got a mysterious error processing annotations. ~~Will update when I find out what is going on.~~ False alarm. I had a test case relying on the assumption that `Method[] declared = clazz.getDeclaredMethods();` will return methods in the sequence they are declared in the class. It always worked before JDK 9 even though the documentation says *"The elements in the array returned are not sorted and are not in any particular order"*. **Edit:** It didn't take long to find other existing libraries barfing on JDK 9. After fixing my test cases, I just got this error from Maven when trying to run `mvn clean install`: [WARNING] Error injecting: org.apache.maven.plugin.javadoc.JavadocJar java.lang.ExceptionInInitializerError at org.apache.maven.plugin.javadoc.AbstractJavadocMojo.&lt;clinit&gt;(AbstractJavadocMojo.java:190) at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ... Caused by: java.lang.StringIndexOutOfBoundsException: begin 0, end 3, length 1 at java.base/java.lang.String.checkBoundsBeginEnd(String.java:3116) at java.base/java.lang.String.substring(String.java:1885) at org.apache.commons.lang.SystemUtils.getJavaVersionAsFloat(SystemUtils.java:1133) at org.apache.commons.lang.SystemUtils.&lt;clinit&gt;(SystemUtils.java:818) That's the first error I pointed out in my list. Yay **Conclusion:** Remember that you could run a java program from 2005 in the latest JDK 8 without a hitch? That is over. Java 9 rendered my library unusable and it doesn't do anything fancy. It looks like migrating from Java 8 to 9 will take a long time as I'm not alone. **EDIT 2** Released version 2.5.6 (https://github.com/uniVocity/univocity-parsers/releases/tag/v2.5.6) which will work fine with JDK 9. 
Head First series worked for me. Formatted to be a very easy read too. 
&gt; the whole Java Engineering team at Oracle deserve a big vote of thanks They don't deserve shit. They let the OpenJDK community do most of the development and testing for these things and then just adopted it and called it "official". Leeches is all they are. Oracle is showing to be just as terrible a steward of Java as we expected.
They've been available for a few hours now: http://www.oracle.com/technetwork/java/javase/downloads/index.html OpenJDK has also published a linux tarfile: http://jdk.java.net/9/
It‚Äôs used a lot especially with Payara out there.
Java EE is generally simpler to configure, this is pretty much a well known fact. Still, I'm curious, which thing specifically was easier to configure using Spring?
I thought the json api was dropped from Java 9
Who did Oracle sue? 
What is this whole Jigsaw thing. I tried reading several articles on it and it looks like it's something outside of actual coding? Edit: I'm a half self taught CS student if it helps guide your explanation
Just in case, I downloaded the latest prerelease JDKs and JREs for all platforms that aren't reflected on the official download page, from [the latest cached version of the pre-release page](http://webcache.googleusercontent.com/search?q=cache:0rRblrGizr4J:jdk.java.net/9/+&amp;cd=2&amp;hl=en&amp;ct=clnk&amp;gl=us), and I'm copying the URLs below (even for those platforms that *have* made the jump to stable): **Platform**|**JRE**|**JDK** -:|:-:|:-: Windows 32-Bit|[binary](http://download.java.net/java/jdk9/archive/181/binaries/jre-9+181_windows-x86_bin.exe) [sha256](http://download.java.net/java/jdk9/archive/181/binaries/jre-9+181_windows-x86_bin.sha256)|[binary](http://download.java.net/java/jdk9/archive/181/binaries/jdk-9+181_windows-x86_bin.exe) [sha256](http://download.java.net/java/jdk9/archive/181/binaries/jdk-9+181_windows-x86_bin.sha256) Windows 64-Bit|[binary](http://download.java.net/java/jdk9/archive/181/binaries/jre-9+181_windows-x64_bin.exe) [sha256](http://download.java.net/java/jdk9/archive/181/binaries/jre-9+181_windows-x64_bin.sha256)|[binary](http://download.java.net/java/jdk9/archive/181/binaries/jdk-9+181_windows-x64_bin.exe) [sha256](http://download.java.net/java/jdk9/archive/181/binaries/jdk-9+181_windows-x64_bin.sha256) MacOS 64-Bit|[binary](http://download.java.net/java/jdk9/archive/181/binaries/jre-9+181_osx-x64_bin.dmg) [sha256](http://download.java.net/java/jdk9/archive/181/binaries/jre-9+181_osx-x64_bin.sha256)|[binary](http://download.java.net/java/jdk9/archive/181/binaries/jdk-9+181_osx-x64_bin.dmg) [sha256](http://download.java.net/java/jdk9/archive/181/binaries/jdk-9+181_osx-x64_bin.sha256) Linux Intel 32-Bit|[binary](http://download.java.net/java/jdk9/archive/181/binaries/jre-9+181_linux-x86_bin.tar.gz) [sha256](http://download.java.net/java/jdk9/archive/181/binaries/jre-9+181_linux-x86_bin.sha256)|[binary](http://download.java.net/java/jdk9/archive/181/binaries/jdk-9+181_linux-x86_bin.tar.gz) [sha256](http://download.java.net/java/jdk9/archive/181/binaries/jdk-9+181_linux-x86_bin.sha256) Linux Intel 64-Bit|[binary](http://download.java.net/java/jdk9/archive/181/binaries/jre-9+181_linux-x64_bin.tar.gz) [sha256](http://download.java.net/java/jdk9/archive/181/binaries/jre-9+181_linux-x64_bin.sha256)|[binary](http://download.java.net/java/jdk9/archive/181/binaries/jdk-9+181_linux-x64_bin.tar.gz) [sha256](http://download.java.net/java/jdk9/archive/181/binaries/jdk-9+181_linux-x64_bin.sha256) Linux ARM 32-Bit|*none*|[binary](http://download.java.net/java/jdk9/archive/181/binaries/jdk-9+181_linux-arm32-vfp-hflt_bin.tar.gz) [sha256](http://download.java.net/java/jdk9/archive/181/binaries/jdk-9+181_linux-arm32-vfp-hflt_bin.sha256) Linux ARM 64-Bit|*none*|[binary](http://download.java.net/java/jdk9/archive/181/binaries/jdk-9+181_linux-arm32-vfp-hflt_bin.tar.gz) [sha256](http://download.java.net/java/jdk9/archive/181/binaries/jdk-9+181_linux-arm64-vfp-hflt_bin.sha256) Solaris SPARC|[binary](http://download.java.net/java/jdk9/archive/181/binaries/jre-9+181_solaris-sparcv9_bin.tar.gz) [sha256](http://download.java.net/java/jdk9/archive/181/binaries/jre-9+181_solaris-sparcv9_bin.sha256)|[binary](http://download.java.net/java/jdk9/archive/181/binaries/jdk-9+181_solaris-sparcv9_bin.tar.gz) [sha256](http://download.java.net/java/jdk9/archive/181/binaries/jdk-9+181_solaris-sparcv9_bin.sha256) Solaris Intel 64-Bit|[binary](http://download.java.net/java/jdk9/archive/181/binaries/jre-9+181_solaris-x64_bin.tar.gz) [sha256](http://download.java.net/java/jdk9/archive/181/binaries/jre-9+181_solaris-x64_bin.sha256)|[binary](http://download.java.net/java/jdk9/archive/181/binaries/jdk-9+181_solaris-x64_bin.tar.gz) [sha256](http://download.java.net/java/jdk9/archive/181/binaries/jdk-9+181_solaris-x64_bin.sha256) Alpine Linux Server|[binary](http://download.java.net/java/jdk9-alpine/archive/181/binaries/serverjre-9-ea+181_linux-x64-musl_bin.tar.gz) [sha256](http://download.java.net/java/jdk9-alpine/archive/181/binaries/serverjre-9-ea+181_linux-x64-musl_bin.sha256)|[binary](http://download.java.net/java/jdk9-alpine/archive/181/binaries/jdk-9-ea+181_linux-x64-musl_bin.tar.gz) [sha256](http://download.java.net/java/jdk9-alpine/archive/181/binaries/jdk-9-ea+181_linux-x64-musl_bin.sha256) [API Javadoc](http://download.java.net/java/jdk9/archive/181/binaries/jdk-9_doc-api-spec.tar.gz) --- Apparently the 32-bit download links have stopped working. (2017-09-27)
I don't know, they didn't want their names out in [this article](https://www.theregister.co.uk/2016/12/16/oracle_targets_java_users_non_compliance/).
r/Java is mostly for news &amp; articles related to java. This question would be better for r/learnjava/ or /r/learnprogramming
&gt; And yes, my entities would be defined using a few annotations for things like @id and the join on user The whole point of your argument was its less lines. And then you post something incomplete. Even in this very simple case, the number of lines of code is comparable. I really can't see myself ever using hibernate again. Or spring as it happens.
Wise! Thanks!
There's a digital sig in the Windows binaries at least, but yeah the lack of HTTPS is seriously embarrassing.
&gt; You write very eloquently :) Thank you :) &gt; I'm not saying that you are "wrong", but i think you are right only for a narrow set &gt; of types of programs and sizes of projects. I don't think we should approach these issues in terms of being wrong or right. I think we should be open-minded enough to challenge many of the stale myths regarding Types system we've been misled to believe. Especially, in light of many of the new languages that have challenged those myths. The Type system of a language should be STRONG and STRICT, not weak. Hence, why JavaScript will always be garbage to me. The compiler should, exclusively, manage and enforce the rules of the Type system. This responsibility should not be shared, at all, with programmers. That's the job of the compiler and the compiler alone. Now, I think this is where I think our views differ. Type information inside source code should only be used, very sparingly, and only when needed, to add context to expressions or abstractions. Expressions and abstractions should be the primary means of communicating intent, not Types. See Go, Haskell, Kotlin, Python, etc. Once an expression or abstraction is encoded, regardless of how dynamic or static it is, it should become immutable. This addresses many of the problems of scalability with respect to code size, project size, and concurrent programming. &gt; For example, if you'd do systems programming for large projects you'd likely agree &gt; that things like "Type is dynamic, ever-changing" and "everything can be &gt; manipulated" are extremely dangerous and highly undesirable. Not necessarily. The properties of Types don't magically make large projects extremely safe and highly desirable. For example, the Linux kernel, arguably one the largest open codebase in the world, is written in an unsafe language with a schizophrenic Type system. If the center of gravity of a language is centered around expressions and abstractions, then dynamism simply means polymorphism. And polymorphism is the cornerstone of managing dependencies, and scaling projects to any size. So you can write large code bases even in weakly-typed languages, as long as the value of Types in the codebase is significantly diminished, and the focus is on abstraction and expression. It also helps to exercise every use-case inside a test harness. But that goes without saying regardless of properties of Types. &gt; Similarly priorities change with the size and type of project; for small web &gt; projects perhaps your idea about expressiveness and abstraction being the most &gt; important concepts is right, but when you have a system of 20 million lines of &gt; code the existence of the company and thousands of jobs depend on modularity, &gt; while expressiveness of code is only "nice to have". The skill you need to design a system that is scalable has very little to do with Types. That's the domain of Software Architecture. And Software Architecture is language-agnostic, so Types don't matter. The holy-grail of Architecture is building pluggable dependencies and modular systems. And we achieve this mostly by inverting dependencies and exploiting polymorphism. This is basically what object-oriented design is about. I believe Strongly Typed systems are better than Weakly Typed systems for everything. Be it large or small projects. However, when you're designing the architecture of an app or service, how you partition systems, separate concerns, and invert dependencies is way more important than Types or even Programming language. If the design and architecture of your system are sound, then it doesn't matter if you have 20 thousand or 20 million lines of code. Your system will scale and be resilient to change even if it is written in JavaScript. &gt; Ultimately my point is that if your example code would have had explicit type &gt; information, then you would not have made the mistake, even though it was late... Funny, last night, between being distracted by responding to Reddit comments, I stared at the Generics Type signature of a RxJava Observable for at least 10 minutes. I thought I had it figured out until I spent the next 45 minutes listening to the compiler whine about why I wasn't using the Observable properly. Eventually, I gave up and did a Google search. An example of the observable used inside an expression was all it took to help me understand how to use it and why I wasn't using it properly. Granted, I'm not a bright programmer, I think I'm a notch below mediocre, but all that Type information didn't do shit. The Observable being used within an expression gave me better context and understanding than all the Type information in the reference documentation. It's for reasons like this that when a project has unit tests, I'd rather read them than documentation. They often provide better context.
Heard about it! Thank you so much :) 
Oh man :s sorry about it. I'm gonna re-post it
Modularity. https://dzone.com/articles/the-features-project-jigsaw-brings-to-java-9-1
On the JavaFX side of things, The content(a Pane, for example) of a tab in a TabPane is a bit glitchy. The content will fit whatever space that it's given or it'll only use the space required by the content depending on how many tabs are open in the TabPane(AKA it changes dynamically). You can fix it by specifying the preferred height of you're TabPane's content. Personally I just did this as a static final variable in my custom TabPane object so that I can just reference it. Of course, this is backward compatible too. You probably won't notice this unless you are using a custom CSS skin so if you have an existing JavaFX application I wouldn't worry about it.
"Modularity" via libraries was already a thing in Java 8 though. Also so was native system packaging... 
Fair, that's just not at all clear in the context of this comment thread. Might want to edit your comment above to clarify. Edit: Seems I'm getting dinged for not RTFAing. Though the confusion persists as evidenced by other commenters, brought about by the unspecific terminology in the top-level comment.
Really? Most of the changesets appear to be pushed by Oracle engineers.
And how long until JEE9?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/unexpectedfactorial] [Welcome, Java 9!](https://np.reddit.com/r/unexpectedfactorial/comments/71oiie/welcome_java_9/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
JVM modularity. It'll be great for embedded stuff with limited storage. Why package the whole JVM when you can shrink that by a third or more?
Went to a Meetup yesterday and found out a little about the new features. here's a small overview. I am by no means a Java expert, so please correct me if I missed something. Jigsaw is the java 9 modules project. It basically allows you to create modules in your project which can expose certain packages to other packages for use. The key bit here is that the modularity is enforced at compile time, AND at run time (and also at link time, more on that later). What this means is if your modules only exports package a, but you also have package b that is not exported, anyone that uses your project will only be able to access a. Previously, there was no real way to enforce that. You could tell people that certain classes were only for internal use, but they could still go and use them (i.e the sun packages). The module system also requires you declare the required modules for your project. I.e if you want to use the logger class, you won't be able to until you declare that you require the logging module. All of the jdk has been broken down into modules. All the module declaration is done in a file called, i think, module-info. The linker I mentioned earlier allows you to basically create your own custom jdk for your project that only contains the modules you need. This greatly decreases it's size, but the biggest benefit is that now people don't need to install java to run your app!!! The jdk + your app is built into a package that can be just run. And since the size is so small (only contains modules you need), it can be easily distributed.
REPL seems like it could be great for debugging if you could drop into JShell after your program throws a runtime exception, and run JShell in the scope from which the exception was thrown. I'd use this all the time, but I can't find out any way how to do it from the docs.
does anyone know the release date for JDK 10?
Yes, move to Python for true multi core Parallelism.
Is that really that big of an issue? A JVM in Java 8 is around 170(ish)MB. Surely something like a Raspberry Pi, even with 8GB or less, is just fine with that. If you don't convert to the new module system it seems like Java 9 increases that to about 215MB(or maybe it's something else included in Java 9, i'm not entirely sure. I'm comparing OpenJDK 8 to Oracle JDK 9 here.). Also, why force it onto everyone? The module system doesn't do anything if you just distribute your program via jar files and use the system JRE. IIRC it's required in Java 9 so schools teaching CS are going to have to change their project's source to 1.8 due to how complicated it is compared to just classpaths. And what happens when they drop support for the 1.8 source option? 
This is the best explanation that I have seen on Java 9's modules, and I have read several articles on the subject. Thanks!
All of those points are definitely relevant to you and I since (I assume) we develop for normal systems. But from what I've heard, there was a big push to present some standardization for embedded installs, since as it stands with Java 8 and before, you had to roll your own. You know that splash screen in the JDK installer that says there are billions of Java devices? Those are the targets for this change. A decent [rundown](https://en.wikipedia.org/wiki/Embedded Java) on the challenges of embedded development. (Honestly I didn't realize that installs could be as small as the ME standards..) I'll be sticking with Java 8 for the foreseeable future, with most of my maintenance work still being done with 7. But I understand why they pushed this change.
**Embedded Java** Embedded Java refers to versions of the Java program language that are designed for embedded systems. Since 2010 embedded Java implementations have come closer to standard Java are now virtually identical to the Java Standard Edition. Java 9 allows for customization of the Java Runtime through modularization, further removing the need for specialized embedded Java implementations. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.27
[Your promise](https://www.reddit.com/r/java/comments/71kbdt/angular_4_crud_application_with_spring_boot_rest/dnbh5vv/) didn't hold for very long, did it?
We only know that it will be under Eclipse. It will change name too. EDIT: Eclipse foundation
First example: installation of a PostreSQL driver in Wildfly 10 - I don't know how it looks like in different app servers, but in wildfly it was a few steps including manual download of a jdbc driver: http://www.mastertheboss.com/jboss-server/jboss-datasource/configuring-a-datasource-with-postgresql-and-jboss-wildfly Second: security modules, security domain. The link here is not necessary I think. Third: JMS client configuration. https://docs.jboss.org/author/display/WFLY10/Java+Message+Service+API+%28JMS%29?_sscc=t I've never managed to run a build in jms server, simply because I've never done it successfully-there was many attempts however... Fourth: Integration tests with fucking Arquilian and gradle. My god that was totally fucked up and worked only with the most basic examples. Maybe in other app server it's different - I don't know, but in these areas spring is really, really easier. Not to mention, that if you want e.g change the driver, you don't need to manually change xmls and download jars in all development envs.
Somebody should send this to the Eclipse team.
A quick 'fix' for working with Maven/SBT and certain plugins: export MAVEN_OPTS="--add-modules java.xml.bind" export SBT_OPTS="--add-modules java.xml.bind" I've had at least maven-failsafe-plugin fail to run simply because java.xml.bind isn't exported by default ( really wish they'd change that, leave java.xml.ws off tho ). Add a standard dependency on one of the various versions of the xml API classes also helps if you not doing modules/java 9 targets, such as http://search.maven.org/#artifactdetails%7Corg.openehr.java-libs%7Cxml-binding%7C1.0.71%7Cjar
There's updated versions of the javadoc maven plugin, maven jdeps, enforcers etc. that all work with Java 9 - see https://cwiki.apache.org/confluence/display/MAVEN/Java+9+-+Jigsaw for Maven/Java 9 details.
&gt; Anyone worth a damn would defensively program and raise a type error ( python ) or something. Sorry, I don't really program a lot of non-strongly typed languages, but to me it sounds like you'd have to manually check the types of incoming parameters _in each function_ to "raise a type error or something"? That sounds like a lot more work than just letting the compiler check. Not to mention less readable code if there's type checks all over the place.
So long JavaFX, hardly ever used you. 
Under Eclipse Foundation, not Apache.
For those of you who, like me, were looking for the Cryptographic Extensions (JCE) download: they changed how that works, now you have to activate it through `Security.setProperty("crypto.policy", "unlimited"`) or by editing the java.security file. It's still weird you have to actively opt-in for better security. Edit: I found out the default setting is actually unlimited, so they changed from opt-in to opt-out which is much better. See https://docs.oracle.com/javase/9/migrate/#GUID-D6EE05FB-6791-43B3-A610-3F4416DEE508
Thanks! I tried to build with version 3.0.0-M1 of the maven-javadoc-plugin earlier but it crashes the JVM: # # A fatal error has been detected by the Java Runtime Environment: # # SIGSEGV (0xb) at pc=0x00007f63aa5cc2f0, pid=7444, tid=7484 # JRE version: Java(TM) SE Runtime Environment (9.0+181) (build 9+181) # Java VM: Java HotSpot(TM) 64-Bit Server VM (9+181, mixed mode, tiered, compressed oops, g1 gc, linux-amd64) # Problematic frame: # V [libjvm.so+0x9292f0] JVMCIGlobals::check_jvmci_flags_are_consistent()+0x120 It looks like there is some stabilization work to do in version 9. It works after switching back to Java 8.
**Sidebar** -&gt; **Do not post tutorials here!** This is an official warning. Continue to post tutorials here and you will be banned. This is your **second warning**. [Link to the first one](https://www.reddit.com/r/java/comments/6wcjbi/how_to_install_java_jdk_on_windows_on_mac/dm6znkc/) for reference. There won't be any further warnings.
[removed]
[removed]
[removed]
[removed]
I think it is related to US export restrictions.
You have to do the same thing in Java to handle runtime errors. How is your compiler checking against what is being passed into an endpoint is what you want? Or has the fields you need / want. How do you validate that? Also, in something like Python you could use a decorator to ensure the types of an incoming variable or raise value error so you could just do something like @accepts(str) def handle_input(param): pass and then throw a value error if it doesn't pass. Still easy to read.
Wow actually crashing the VM! That's impressive, I wonder if that's a known issue currently.
I'm not sure it makes much sense for it to have OOTB support for attaching to an existing process or even what that would look like, but I can imagine how an IDE could start it up at a breakpoint and prep it with visibility to local variables.
&gt;don't need to install java to run your app! This seems huge, actually! 
well said!
Yeah, very much so. I‚Äôve a project starting in the new year that has a ridiculous dependence on varied internal data sources - so anything to reduce friction is worth close examination ;)
u/uniVocity do you have a full hs_err file available? Would you mind pasting it somewhere and link to it? I downloaded https://github.com/uniVocity/univocity-parsers, changed `pom.xml` to use `maven-javadoc-plugin 3.0.0-M1` and run `mvn site` and `mvn compile`, but I could not reproduce your problem. Would you mind describing the exact commands you executed? Thanks, Erik (OpenJDK developer)
&gt; You have to do the same thing in Java to handle runtime errors. &gt; Yeees, but in Python you have to do that as well, plus the type checks? &gt; How is your compiler checking against what is being passed into an endpoint is what you want? Or has the fields you need / want. How do you validate that? &gt; Are you talking about a web service endpoint? That's an entirely different topic, no? As in, doesn't have anything to do with the programming language you implement it in. &gt; Also, in something like Python you could use a decorator to ensure the types of an incoming variable or raise value error so you could just do something like @accepts(str) def handle_input(param): pass &gt; &gt; and then throw a value error if it doesn't pass. Still easy to read. &gt; Yes. So, essentially def handle_input(param : str) pass but with type handling done manually.
Does this mean all my codes are now obsolete and need to be updated?
Who knows. There is a proposal to switch to a strict 6 month release cadence so they don't hold have to keep holding the rest of the platform back due to delays on a single project. https://mreinhold.org/blog/forward-faster Personally I'm keeping my fingers crossed for this.
You couldn't prevent users of your library from accessing internal classes that they shouldn't be messing with. Now you can publish an API and not worry about people using undocumented methods, so you're free to change them without breaking your users' code. See `sun.misc.Unsafe`.
No. Newer Java releases have always been source code compatible with code written for older releases. Java 1.0 code should compile with Java 9. Having said that, for the first time ever, they've removed six functions: * `java.util.jar.Pack200.Packer.addPropertyChangeListener` * `java.util.jar.Pack200.Unpacker.addPropertyChangeListener` * `java.util.logging.LogManager.addPropertyChangeListener` * `java.util.jar.Pack200.Packer.removePropertyChangeListener` * `java.util.jar.Pack200.Unpacker.removePropertyChangeListener` * `java.util.logging.LogManager.removePropertyChangeListener` But then, I really doubt you've been using those functions. 
There will be no JDK 10. Next Java version will be 18.3. https://www.infoq.com/news/2017/09/Java6Month
The next one is JEE8
Well, our app runs in Mule ESB, and it looks like that doesn't run in Java 9, it bombs on startup. Guess we need to wait for an updated Community Edition
Packages are an incomplete solution 
does anyone know when java 9 is going to be on https://java.com/en/download/ ?
most real world enterprise apps are java I work in Banking and basically 95% of our our backend systems are JavaEE/Spring apps, running on Tomcat/JBoss, with Oracle databases, running on Oracle RedHat
Why do you say that? Yeah there were no major changes to JavaFX but bug fixes etc...
JavaEE app servers need to be configured, and its complex... and its much easier to use Spring?? Then the problem is your app server, NOT the technology. use something like TomEE - its a case of unzipping, dropping your war in the webapps directory, and starting it. DONE. NO configuration needed. Yes, changing default ports / adding managed database / etc will require configuration. BUT, you'd have to do the same in Spring anyway. 
This is why early-access versions were available for months, so everyone could test and report/fix bugs early... The GA version released today is _identical_ with EA version release almost 2 months ago.
So how do you configure PostgresSQL in Spring?.... don't you have to download the database? dont you have to tell Spring the connection details? Or isn't this counted? Same goes for the other options. 
Actually I don't download the database by myself. We are using db on AWS, even in development, and if we really, really need one, we use docker. So no, I don't download the database. But it is not relevant in case of Spring/JavaEE discussion. In spring you have to add a dependency in grade/maven. Configuration is obviously in the spring's property file. In a project, not at some xml on the server. It is completely ok for dev env. You don't need to configure the app server at all. You're configuring your project. And you're configuring your project by using project's files. In Wildfly we have a special scripts which were using jboss-cli to only to add a .jar with PostgreSQL-jdbc-driver, some auth modules and user privileges. So (before docker) every time something changed, we had ask all our developers to e.g. to replace the jdbc driver version by full-text-searching the standalone.xml and to copy new driver into a module. Sure, it's not a problem if you have 2 Java devs. It is a problem when you have 20+ devs where quite few of them are only into Frontend and they don't want to have ( and they shouldn't ) anything common with things like jars. Integration tests are just working. One annotation. Pure simplicity. You don't have to download and configuring things like Wildfly only for integ-testing purposes ( because you obviously can't use the wildfly you're using on your normal dev purposes, god knows why ) and struggle with fucking "arguilian.xml" file, SchrinkWrap and all those never-working-as-you-would-like-to-expect shits. And what are your experience with Spring /u/tonywestonuk ?
You are correct, I have not
Thanks! I opened this issue with all details and the hs_err files for you: https://github.com/uniVocity/univocity-parsers/issues/189 Thanks again for the hard work.
Is it? Maybe for docker folks, or embedded. But it wasn't uncommon to ship your app with JRE and this is (almost) the same thing, but in addition it throws away classes that are not needed. The benefit is only in the download/installation size.
Yea it's great! For server side apps I don't see it making a big impact as right now most people use some form of containerization to deploy the apps, which basically achieves the same. But distributing your app to users will be a lot easier! Also using Java for IoT will probably be easier as well. The file size reduction is quite significant too. They are using a new file format called JImage for storing the modules in your packaged application which has much better compression. The jars use zip compression, I believe. As I understand it, JImage uses some form of memory mapped files, so it will be faster in terms of performance as well.
No, it should still work. Only thing you might have to change in your code base is if you are using reflection to look at private fields. Modules aren't supposed to allow this, but since a lot of open source libraries use this, modules are currently 'open', which means they will allow it. But this will be removed in Java 10. One of the reasons why the release was delayed from earlier in the summer.
Since this is help with *Java programming*, it should be, as the *plenty hints* on the page indicate, posted in **/r/javahelp**. Please, repost there.
String has been thoroughly rewritten in 9 to implement [Compact Strings](http://openjdk.java.net/jeps/254), and it's not too surprising that some implementation details behave subtly different, while care has been taken not to change any specified behavior. `String.getChars` has been specified to throw `IndexOutOfBoundsException` from the start, meaning there was never a guarantee which specific subclass would be thrown. Catching only a specific subclass is creating a dependency on an implementation detail that may be different in different implementations and versions of the JDK. The use of CLDR by default in 9 can understandably lead to some issues, especially if the legacy JDK locale and the CLDR-based locales differ in unexpected ways. Setting `-Djava.locale.providers=COMPAT,SPI` would revert back to the behavior in 8, if the alternatives fail to satisfy.
Yeah, I mean your compiler would have been warning you about using deprecated functions for the last couple of years. Interestingly those functions have only been deprecated since Java 8, which was released on March 18, 2014. Although I don't know if they were deprecated on release or in a patch release. Java 9 introduced `@Deprecated(forRemoval = true)` which indicates that you really shouldn't be using that function any more, and that your code will break in the future. (They also added a `since` attribute so you know how long something has been deprecated).
I love the new String implementation. It improved the performance of my library by almost 20%! However it is hard to agree on the exception issue because how users handle them is an almost automatic process: you get the exception and see the stack trace. The concrete exception type is shown there so you simply add a catch block for the exception type you saw. Rarely someone will drill down to find whether a more general exception type is available. Proof to that is we now have software failing to run because the old catch blocks are not hit and the exception propagates. Essentially we can't trust many dependencies released prior to java 9. Apache-Commons is one of the affected. My library too and I just fixed it. Think about it. There are 66 libraries I know that depend on mine. ALL of them may be used by other libraries and ALL of them are prone to fail randomly at runtime under Java 9. That holds true until everyone updates to version 2.5.6 I released today. Now think about how many libraries depend on apache-commons. It is going to be a wild ride until everyone sorts their stuff out, and that for the libraries that are actively maintained. Who depends on legacy unmaintained stuff will be stuck to java 8 forever 
Having a Java docker image under 200MB would be nice :)
The jars can use also pack200, it's there since java 1.5, but have you ever seen someone using it? I can't find anything about the JImage, but it would be cool if there's a new format which could be mmaped and paged in by jvm on demand, exactly like dlls work. I think that would be useful for large aps. And also because the OS would be able to page in/out the code, I thing the memory would be utilized better (note the OS don't need to swap into the swap file if files are mmaped, that's good for ssds).
no, you have to install it by yourself
Is it possible to turn hidpi off? I don't like it (trying netbeans).
Everything I've seen, it is WAY more limited. It is basically not much more than a dynamic main.
JavaFX in the browser is being killed. 
Today that's impressive. It used to be a monthly event for our ~500 kloc codebase in the 1.2 - 1.4 era.
Java in the browser - like all plugins - have been killed years ago. JavaFX is for desktop and mobile applications. If you want applets, well the 90's called.
Hmm, in Java 8 the String.getChars method actually declares that it throws IndexOutOfBoundsException, so maybe it's not their fault someone relied on it throwing a specific subclass. Edit: ah someone already pointed it out.
Exactly. Shipping JDK with app is already fairly common. Sometimes done to guarantee no version compatibility issues.
Raspberry Pi? Sure, that's fine with Java, but that's on the large side for an embedded device. There's a lot of embedded devices where they still need to count their megabytes, where cost of adding just an additional 50mb or more can drastically alter feasibility. C/C++ tend to dominate there.
Java choose me. The JVM is strong in my family and keep me away form the dark side of Micro$oft :-)
The issue is that there are heaps of libraries out there that can be catching ArrayIndexOutOfBoundsException and this will only fail at runtime. You will only find out if your existing application can run on java 9 once it is deployed and running. Potentially in production. This affects WAY more people than removing the Unsafe class. Unsafe was kept to prevent what is happening with this exception type change. There is no practical difference to the internals of the JDK if the new string implementation still used the old exception to avoid breaking almost every mid sized java application built before java 9. 
[removed]
Glad to hear you get a substantial performance increase! It's rather unfortunate if this way of dealing with exceptions thrown by the JDK API is common practice, though. The JDK is often very explicitly specifying exceptional behavior in javadoc, since this specification controls what implementations must conform to in order to pass the JCK. It follows that it's well advised to use these specifications to guide library and application implementation, both to ensure compatibility across different java implementations, and to avoid any issues if and when the implementation do change. That said, we do try not to change unspecified but observable behavior unless there's a very good reason to do so, and invite everyone to test early access builds to discover unforeseen compatibility issues like these before the release is set in stone. I'll ask around to see if there's anything we can do for the next release, which you may have heard isn't too far off..
&gt; The benefit is only in the download/installation size. Not sure why you use the word "only". Being able to ship a smaller download can be important to people without fast internet connections (not everyone lives in an urban area). Also think about embedded systems. Just because it might not be important to you, doesn't make it unimportant. 
&gt; The jars can use also pack200, it's there since java 1.5, but have you ever seen someone using it I use pack200 to compress the fat-jar of a Swing application I deploy with Java Web Start. It does a good job getting the jar smaller. Have a jar that is 6.9 megs, pack200 version is 1.7 megs. As far as I know Java Web Start is the only thing that can handle pack200 compressed jars.
You can still use the classpath in Java 1.9. Also, modularity is about more than just reducing size of the runtime. It is also about encapsulation. So you can have truly private parts of your library that no one can access.
Oh my God. They delivered. Fucking finally. 
Apart from this exception issue and being unable to have different jars using the same package in the classpath (not sure why this restriction exists), I'm very happy with how Java 9 is looking. There are so many things to consider to keep backward compatibility but almost everything is covered. The locale flag is a life saver for existing projects. As always there are always a lot of details to adjust after a large release. I believe Java 9 is by far the most complex JDK release we'll ever see. Things will only improve from here.
Then you'll be happy they are also moving to a 6 month release schedule now, no longer waiting for specific features to be done and holding up the release.
JavaEE 8 was just released yesterday, GlassFish 5.0 is the only released implementer, although I would expect other containers to be released soon. JavaEE version numbers do not run in parallel with Java SDK version numbers. https://blogs.oracle.com/theaquarium/java-ee-8-is-final-and-glassfish-50-is-released
A while. JavaEE started with the second Java release, so it always lags one version number. JavaEE 8 released on August 31. 
No, it‚Äôs now 9. JavaEE 8 (the spec) was released on August 31. 
I think you are wrong for the following reasons: 1) People should not just assume things, especially what implementation gets returned from specific method, when the method only specifies the interface or some superclass. Even if all known implementations return subclass 'A', no one should write their code assuming it's 'A' if the documentation says it's actually some superclass of 'A'. That's just asking for trouble. 2) I'm pretty sure most java applications are not depending on this, why would they? If they are, that's a bug, because they are ignoring the spec and expecting something that's not promised. It's not different from expecting something to be not null, while the spec clearly says it can be null in some situations.
That sounds much more convenient, so you can just enable it from code rather than having to install the extension into the JVM?
I will not hold my breath. Why? One raging asshole called Larry Ellison. 
&gt; I found out the default setting is actually unlimited, so they changed from opt-in to opt-out which is much better. Source? 
x.x I'm installing IntelliJ now since they promise better integration. It's frustrating writing modules with errors everywhere in Eclipse and having to use Gradle to validate them. Hopefully it won't take too long for them to catch up.
The meaning is there's no other benefit with respect to shipping with full JRE. When people started to talk about jigsaw, I thought it would also make difference in runtime.
Here is more info on the JImage format: http://openjdk.java.net/jeps/220
Done 
ROFL.
I actually looked in the java.security file after installing the JDK and JRE. There's also a readme in the policy dir explaining it. Might be different for non Windows but haven't checked those.
It comes with Graal, but not with Truffle or the graal-truffle integration. Edit: for clarity: It comes with the *Graal compiler* but not with *Truffle* or *Graal SDK* which are the language implementation frameworks used by Truffleruby. It also doesn't come with *graal-truffle* which is a library that uses the Graal compiler to JIT-compile languages implemented using the Truffle framework.
Thanks for letting us know. We appreciate any time you can spend to help us make the project better (opening issues, etc.).
Does anyone know if there is a 32-bit runtime available? I only see 64-bit downloads, and my searches are coming up nil.
Argh. Just discovered that JAXB is considered a "Java EE" module, and excluded from being loaded with the default Java SE module set. I don't use JAXB in my code, but I have dependencies that do. Yeah, sure, I could add the java.xml.bind package to the path via command-line args... but those args are illegal in Java 8. Oh, but I could declare a module-info... but that classname is illegal in Java 8. Essentially, there isn't a mechanism for building something in Java 8, and compiling it in 8, that will tell 9 what to do regarding modules... unless someone knows something I don't (and really wants to make my day!) There *are* strange kinky ways involving compiling parts of your app in 8 and parts in 9, but I'm not going there.
FYI, for truffle languages you don't need `-XX:+UseJVMCICompiler` or `-Djvmci.Compiler=graal`: those flags are about JIT compilation of Java bytecodes, not about compilation of Truffle languages.
JavaEE 8 released yesterday along with Java 9: https://blogs.oracle.com/theaquarium/java-ee-8-is-final-and-glassfish-50-is-released
 &gt; 1) People should not just assume things, especially what implementation gets returned from specific method, when the method only specifies the interface or some superclass. Even if all known implementations return subclass 'A', no one should write their code assuming it's 'A' if the documentation says it's actually some superclass of 'A'. That's just asking for trouble. What if the libraries you use did that for you and your stuff simply stops working on java 9? Also, typically developers write catch blocks with the exception types seen on stack traces. Methods such as `substring` are used everywhere inside a deep nesting of method calls. If you get an ArrayIndexOutOfBoundsException after calling a `parseAddress` method you didn't write, do you actually navigate the call stack and read the javadoc of the String where it originated? If you just stuff the exception type you got into a catch block and your problem is solved, you'll never look back. After 2 decades of java being around do you really think everyone looked at the docs when the stacktrace gives you the exception type, every single time an error popped? 2) I'm pretty sure most java applications are not depending on this, why would they? If they are, that's a bug, because they are ignoring the spec and expecting something that's not promised. It's not different from expecting something to be not null, while the spec clearly says it can be null in some situations. You are being idealistic. You need to be realistic. Do you have any idea how many projects depend on apache-commons? Your standing of seeing it as "just a bug" may work in a team of 10 people. It is just too simplistic. There are innumerable projects that won't run on java 9 now because the backward compatibility is broken. For a large project that runs since 2001 it doesn't matter if it is "just a bug". What matters is that the project won't run with Java 9 and people will simply stay on version 8. It's too late to change this sort of thing and the only solution I can see is having the java 9 `String` throw the old exception everyone and their dog expected
The development kit came out yesterday. The approved spec was posted on August 31. JavaEE is a spec. 
What ide you people use?
Again, It's a bug in your code and probably in many other projects as well. The fact that many people have made this mistake does not make it any less of a bug. Just fix it, and move along, we've all made mistakes. Backwards compatibility is only expected in Java if you follow the API and the spec strictly, if you expect the internals to stay the same, you are in no luck. You can't expect backwards compatibility from implementation classes. Lets take reflection for example. You think programs that have been built using reflection against java8 classes and their internals will still work with java9? Nope. They'll blow up. So do many other programs that are ignoring the API or expect what is not promised by API. 
Then why the Unsafe class is still around? To prevent breaking backward compatibility. Because it matters. This exception is a more trivial alteration that did way more damage than removing the Unsafe class would, for no improvement other than having a more appropriate name. 
Okay I don't have time right now to look up why they kept Unsafe. &gt; "This exception is a more trivial alteration that did way more damage". It only did damage if people wrote code that didn't catch the exception that was specified by the javadoc. It didn't affect people, who expected the correct exception from this method. I really don't see the problem here. People should read the doc more maybe? 
I think this fits here perfectly: https://xkcd.com/1172/
&gt;You can still use the classpath in Java 1.9. Oh hey, I just tried switching the source to 1.9 and it does work. I tried with the pre release versions in Arch Linux and it was throwing a bunch of problems because I wasn't using the modules. Also, WTF happened to logger in Java 9? Is that an internal API?
IntelliJ
ecj is more a dev compiler. It uses some tricks to "optimize" the workflow. The difference margin is getting smaller by each version though.
Yes. Get the download link for the 64 bit version an replace "64" with "86". http://download.oracle.com/otn-pub/java/jdk/9+181/jdk-9_linux-x64_bin.tar.gz -&gt; http://download.oracle.com/otn-pub/java/jdk/9+181/jdk-9_linux-x86_bin.tar.gz http://download.oracle.com/otn-pub/java/jdk/9+181/jdk-9_windows-x64_bin.exe -&gt; http://download.oracle.com/otn-pub/java/jdk/9+181/jdk-9_windows-x86_bin.exe
Are you already using Netbeans 9 developmet branch? Version 8.2 does not support Java 9 properly.
So this is the year of ~~Linux~~ Java on the desktop?
No and you're right, I've other issues. But I've actually hidpi monitor and had to increase system dpi (win7). So I've this blured and jagged images and icons also in some other apps. But other java apps have issues too or don't even start, so I'll stick with j8 for some time.. 
So you are being exasperated that it takes so long to deliver, then don't care that they also release plans to fix those same issues? What about their inclusion or gpl licensing?
I care. I just have no confidence that their plans will stick. Why? Oracle. GPL? Oracle doesn‚Äôt care. Inclusion? Oracle doesn‚Äôt care. 
Seriously? üòÇ
We did before we switched to Payara. Currently trying to move more and more to Spring Boot.
*code is *needs It's an uncountable noun.
There were several issues created before, but the Eclipse team claimed everything was okay üôÑ
Nice, thanks! I am assuming then that the 32-bit builds will be available on the web pages at some point. Kinda freaked me out not seeing them. I maintain a number of applications that interface with 32-bit libraries, and if those builds stopped, those app's would get stuck on old versions of Java! :)
Checked out the openjdk:alpine image yet?
Is this about *building* your software or *running* it? In case of the former, you could use Maven profiles (or your build tool's equivalent to those) for adding the required command line flags. E.g. in a profile activated only when building on 9 you'd add --add-modules java.xml.bind to the compiler invocation. If it's about running, you could have a simple switch in your launch script which adds the required flags based on the version.
Bye
I guess that it also gives you less stuff to work with when doing reflection or serialization attacks, but I'm not totally sure if it has any practical effect.
Since this is help with *Java programming*, it should be, as the *plenty hints* on the page indicate, posted in **/r/javahelp** Still, you are just asking for something to be given to you that could be just as well googled. This is not acceptable at all. Worse, you show *zero effort* on your own. Another unacceptable thing. As is, this post will not be accepted in any learning/helping/programming subreddit. **Post removed**
This affects both building and launching. On the building side, Maven profiles are an option, but represent a split between a Java 8 and Java 9 release of what is ostensibly a single product. On the runtime launching side, thus far the product hasn't needed a launch script. I've used JNLP to great effect, in spite of the warts it has. I suppose I could fork the descriptors for Java 8 and 9... I haven't yet checked to see if the Java 9 Web Start launcher allows adding a bundle. All this to say that Java 8 to 9 is a much less obvious upgrade than was 7 to 8.
Noticed that my personal dashboard app starts up much quicker on my Raspberry Pi, using the 9-jre-slim docker image. Before it took 50-60 seconds, now it takes around 15 seconds! Is this because of http://openjdk.java.net/jeps/297 ?
Eclipse Oxygen on OSX doesn't even run with Java 9. It just crashes during startup.
why is this here?
Eclipse Oxygen on OSX just crashes. It won't even start up. From the log: !ENTRY org.eclipse.e4.ui.workbench 4 0 2017-09-22 19:30:39.476 !MESSAGE FrameworkEvent ERROR !STACK 0 java.lang.NoClassDefFoundError: javax/annotation/PreDestroy at org.eclipse.e4.core.internal.di.InjectorImpl.disposed(InjectorImpl.java:450) at org.eclipse.e4.core.internal.di.Requestor.disposed(Requestor.java:156) at org.eclipse.e4.core.internal.contexts.ContextObjectSupplier$ContextInjectionListener.update(ContextObjectSupplier.java:78) at org.eclipse.e4.core.internal.contexts.TrackableComputationExt.update(TrackableComputationExt.java:111) at org.eclipse.e4.core.internal.contexts.TrackableComputationExt.handleInvalid(TrackableComputationExt.java:74) at org.eclipse.e4.core.internal.contexts.EclipseContext.dispose(EclipseContext.java:178) at org.eclipse.e4.core.internal.contexts.osgi.EclipseContextOSGi.dispose(EclipseContextOSGi.java:99) at org.eclipse.e4.core.internal.contexts.osgi.EclipseContextOSGi.bundleChanged(EclipseContextOSGi.java:141) at org.eclipse.osgi.internal.framework.BundleContextImpl.dispatchEvent(BundleContextImpl.java:908) at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230) at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148) at org.eclipse.osgi.internal.framework.EquinoxEventPublisher.publishBundleEventPrivileged(EquinoxEventPublisher.java:213) at org.eclipse.osgi.internal.framework.EquinoxEventPublisher.publishBundleEvent(EquinoxEventPublisher.java:120) at org.eclipse.osgi.internal.framework.EquinoxEventPublisher.publishBundleEvent(EquinoxEventPublisher.java:112) at org.eclipse.osgi.internal.framework.EquinoxContainerAdaptor.publishModuleEvent(EquinoxContainerAdaptor.java:168) at org.eclipse.osgi.container.Module.publishEvent(Module.java:476) at org.eclipse.osgi.container.Module.doStop(Module.java:634) at org.eclipse.osgi.container.Module.stop(Module.java:498) at org.eclipse.osgi.container.SystemModule.stop(SystemModule.java:202) at org.eclipse.osgi.internal.framework.EquinoxBundle$SystemBundle$EquinoxSystemModule$1.run(EquinoxBundle.java:165) at java.base/java.lang.Thread.run(Thread.java:844) Caused by: java.lang.ClassNotFoundException: javax.annotation.PreDestroy cannot be found by org.eclipse.e4.core.di_1.6.100.v20170421-1418 at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:433) at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:395) at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:387) at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:150) at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:496) ... 21 more
Because Youtube channel spam, check its posting history.
We used to get crashing regularly under 1.5 with Restlet, or more - one specific method, but never one that could be reproduced in demand. Last year I found in our apps startup script we still had that method excluded from JIT compilation in our JVM settings.
Not surprising...
That's because you didn't read the setup instructions.
I have Eclipse set up with Java 9 support and I'm trying to convert a project into a module, but it doesn't seem to understand automatic modules: in `module-info.java` it won't let me write e.g. `requires foo;` for `foo-1.0.jar`. Is this simply not implemented yet?
&gt; Second: security modules, security domain. The link here is not necessary I think. Doesn't seem to be that crazy difficult: https://github.com/javaee/security-soteria/blob/master/test/app-db/src/main/java/org/glassfish/soteria/test/ApplicationConfig.java#L48 &gt; installation of a PostreSQL driver in Wildfly 10 - I don't know how it looks like in different app servers, It's the same in all app servers, since it's standardised in the EE API: https://github.com/javaee/security-soteria/blob/master/test/app-db/src/main/java/org/glassfish/soteria/test/DatabaseSetup.java#L59 &gt; Integration tests with fucking Arquilian and gradle. My god that was totally fucked up and worked only with the most basic examples. Seems to work pretty well for a lot of tests here: https://github.com/javaee/security-soteria/tree/master/test and here: https://github.com/javaee-samples/javaee7-samples 
Are you sure you can't just have both Java 8 32-bit and Java 9 64-bit?
Eclipse being a problem. Color me surprised.
It seems that String#getChars has thrown a StringIndexOutOfBoundsException since at least JDK 6? http://hg.openjdk.java.net/jdk6/jdk6/jdk/file/b2317f5542ce/src/share/classes/java/lang/String.java#l852 http://hg.openjdk.java.net/jdk7u/jdk7u6/jdk/file/8c2c5d63a17e/src/share/classes/java/lang/String.java#l816 http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/java/lang/String.java#l804 Edit: Just downloaded JDK 6u43 and StringIndexOutOfBoundsException was thrown.
That's terrible. I'm so sad I am going to smirk and continue to enjoy my platform of choice that is not Windows.
Didn't get into your library, but what's wrong with Mockito? 
Mockito is very nice tool for mocking and stubbing. But when I write test, I need many entity beans or dto beans(should be POJO thing). It's hard to prepare that kind of beans if a bean has a many dependencies or dependency depth. Beanmother actually creates a real instance for testing. https://martinfowler.com/bliki/ObjectMother.html
'This can make a difference of several seconds on each and every build. If you sum up all that extra time that is spent by developers and the continuous integration (CI) server, it makes quite a difference.' Really? 'Make quite a difference?' How many billion dollars will that save any company? And why this kind of statement in an article using Maven as a build system?
You really should not even mention Applets, especially not as the first item. The technology is dead and the support in browsers is being completely removed. It's not even in Java 9 anymore.
I have told you [here yesterday](https://www.reddit.com/r/java/comments/71m3tb/how_to_write_hello_world_program_in_java_video/dncfrna/) **not to post tutorials here**. You are now banned from /r/Java.
java 9 is a huge powergrab by oracle. there are some superficial incompatibilities you can workaround, but under the hood there's a bunch of stuff, esp unsafe, that is gone. and yet it's not gone - oracle still has access to it so oracle can provide solutions that nobody else can. this is what MS did in the 90s and allowed them to dominate the platform. the next several years are going to be a warzone for java
Yes, editing the .ini file is a completely reasonable approach to releasing new software. Whatever happened to 'it works out of the box'?
What is the use case for this product?. I can use an IDE and get a billion more features and productivity enhancements...
How fast is the creation? We struggled using reflection for testing since the caching was often reset between tests. Though how is this better than using a simple factory method? It is just outsourcing the creation to a `.yml` file. Though some script runners are nice to have, for example the lorum ipsum generator.
pretty nice error on /profile https://ibb.co/nchxYk
that's what I think too. But our informatics professor claimed that Java would be used in washing machines, dish washers toasters etc. So, I personally don't know any device of this kind using Java, that's why I'm [seriously] asking.
Java 9 wasn't even out when the current version of Eclipse was released. But yeah, why don't you bitch and moan? Maybe you should ask for a refund?
I sure I can have. Even have simultaniously 6, 7, 8 etc if I was developer. The point is what if I'm *general Joe Windows PC user* and want to have one Java runtime on my PC to run Java apps, not bunch of them I bet that's the reason why Java died on PCs and stay only in serverside nowadays. Sad. It could easily compete with .NET
IntelliJ works fine, and for the same price.
I thought the usual MO was to install both the 32- and 64-bit JREs depending on what the Java application in question requires; the difference between now and a few days ago is that the latest 32-bit build isn't at the same level as the latest 64-bit build.
The official JRE release isn't available on any 32-bit platform, although if you meant you're on 32-bit Linux, someone is probably compiling OpenJDK stuff for people like you.
I there, first of all thanks for all the support. I came back just to notify that I found another application that crashes the entire OS for me when Java 9 is used: http://www.jinchess.com/download It's just a matter of downloading, unpacking and trying to start it with `jin-2.14.1/jin` The OS crashes and I have to hard-reset the computer. It works just fine if revert back to Java 6, 7 or 8. Not sure if it makes any difference, but I'm using the binary distributed by Oracle instead of OpenJDK.
They're still 150mb and you have the added risk of musl libc bugs/incompatibilities.
Thanks! I think, When you have just ~ 30 beans(entity or dto), a factory class is a ok. But If you have many beans and they are also have associations, factory methods will be getting verbose. And it is also difficult to write/read/maintain. Preparing fixture data(for test or as a initial dataset) in yaml files is a common way in other languages like, ruby or python. I do not focus on performance(I just start this project haha). But, Beamother caches fixture files as a LinkedHashMap. When I test a creating simple 100000 objects(https://github.com/keepcosmos/beanmother/blob/master/beanmother-core/src/test/resources/testmodel_fixtures/coffees.yml) with 512m, It tooks about 11 sec. Thanks :)
 Yeah i didnt check but i would implement for experience, beside of experience can be used for online challenges, interview, coding from devices which doesnt have java etc... Also I dont think its the first time an online java ide implemented, amazon has something similar
The `ArrayIndexOutOfBounds` comes from `System.arraycopy(value, srcBegin, dst, dstBegin, srcEnd - srcBegin);` All you need is to have problematic values for parameters `char dst[]` or `int dstBegin`.
This day did come!!! Great.
any idea how to install it ? the docs only talk about a predistributed jdk8 based full distribution.
any idea how to install it ? the docs only talk about a predistributed jdk8 based full distribution.
`sun.misc.Unsafe` is still there for everyone to use (when not disallowed by a `SecurityManager`, like in earlier releases), and 9 adds features like `VarHandles` to provide supported, public APIs for some of the things `Unsafe` has been used for, often with better results performance wise. Intent with encapsulating internal APIs isn't to make tricky, unsafe things impossible for developers but to allow internal implementation to evolve without (or at least with less) fear of breaking application code, removing a serious impediment to reducing JDK technical debt as well as some concerns when developing entirely new features. There's surely some gaps in the public API, so if something you think is generally useful is available only in an internal API, do speak up about it or even suggest a patch.
I've started looking at this myself, eager for what it can provide. Finding the documentation, including up front clarification of what is and isn't supported, isn't really there yet. I think graal + truffle + sulong will be game changers one day.
Thanks. That is the use case, I envisioned. Only difference with Codiva compared to other online IDEs is speed and simplicity.
Another content-less regurgitation of basic javadocs :/ With a click-bait title, no less. Queue the fake upvotes.
No, I'm just sad of what constitutes content in this sub at times. Might as well be another baelung article.
What a cunt remark. Have a good day.
So, you are promoting bad development practices? Needing such a wave of objects for a tests is a very very very good indicator of fucked up design. tut tut... 
imo no. Either take on some backend responsibility or pursue frontend opportunities elsewhere. 
Stop trying to do everything in a browser, you stupid hacks.
Learn backend Java. Very profitable.
So deliberate weakening that can be exploited?
The trend right now with Angular and React is for the backend to return JSON via REST requests. If you're not working on either the JavaScript or the database/middleware parts of the system you're probably not learning skills for the future. I mean I already consider JSF to be an old technology.
Best to ignore or block the dude. Look at his post history... not exactly a happy person.
Assuming you want to keep working in Java, try to learn as much as you can about core Java and general programming concepts, and then start looking for a shop where you'd get to work on the full stack (Fe/be/DB/whatever).
&gt; but represent a split between a Java 8 and Java 9 release of what is ostensibly a single product you can use a Multi-Release jar for that. http://openjdk.java.net/jeps/238
What others have said: it's now REST services (can be written in java) serving JSON to front-ends in JavaScript (react/vue/angular) and mobile apps. No JSF any more except for the odd case when a server side render is more efficient, and then people prefer more modern rendering engines such as Thymeleaf. Luckily you've got a good foundation to move over. I'd suggest to your current company that they consider it for the next project, and you can learn JAX-RS (Jersey) or SpringMVC - they add functionality on top of servlets to help you. Benefits for your company: Less server load and bandwidth use, opportunity to use modern js/css frameworks which let your webpages resize themselves for mobile devices, easier to find more developers.
Not using just Java 8, I can't. The core of the issue is that I have dependencies that in turn consume APIs that were available by default in 8, and require module-request mojo to be used in 9. There does not appear to be a way in Java 8 to make Java 9 aware that I need these modules that does not break my app's ability to be invoked uniformly.
Yup nobody wants Java on the frontend anymore. I would try to do some backend stuff rather than go into JS framework land. It's excessive high churn where a new framework becomes in vogue every two years and all these bootcamp students are trained in the latest one to get jobs. They are very complicated, so you'll end up wasting a lot of time learning something that is deprecated quickly. Still, it might be good to learn at least one of them if you are interested in front end work.
I know people might disagree with this but if you're set on Java server side work then you might want to check out Spring MVC. You can deploy your jars using tomcat and it integrates nicely with junit. This will also get you comfortable with build tools like Maven and Gradle if you're not already. After you're good with spring mvc, you can do spring boot, learn grails and go from there. I start a server side job on Monday and spring mvc and test driven development are apparently things my four year school didn't focus on that I wish they would have lol.
Or it could be useful for property testing which can be super useful for certain API design patterns.
Tell that to enterprise customers pumping up PrimeFaces projects.
Though .NET and C++ is not much better on Windows. This is my current setup so that all my games run: [image](https://i.imgur.com/agPRMTU.png). Btw. for some odd reason I needed to install VS Office runtime, otherwise a game complains about a missing dll. Why does a *general Joe Windows PC user* run Netbeans / Eclipse / IntelliJ?
If you want to get a head start at the college, I'd rather get more fundamental programming knowledge. Get a book about algorithms and datastructures (e.g. [this](https://www.amazon.com/Data-Structures-Algorithms-Michael-Goodrich/dp/0470383267) or [this](https://www.amazon.com/Introduction-Algorithms-3rd-MIT-Press/dp/0262033844), first few Google results pointed me to a PDF). Well of course practical knowledge is also never bad. 
I wish but that will be a very difficult option given my current experience.
JSF is dead. The only people who tout it are backend Java devs that don't have front end experience. As far as servlets go, I think it's good to have core knowledge on that, as all JEE web specs are built on servlets. Jax-RS uses servlets, and that is the domain I would focus on for Java web. If you want to remain in Java, I would focus on backend stacks. There's still plenty of work in that. I spend many of my professional hours working in it.
Why is it difficult for you to learn something on your own? Maybe we can give suggestions if we knew more. 
I have academic experience with SQL/JDO and that is about it. I am more concerned about being able to convince future employers that I can do backend Java work despite my professional experience.
Agreed, java lost the frontend (or really, JavaScript won it). If you aren't learning JavaScript and you want to do frontend work, you are learning the wrong thing (unless you already know it).
I had no Java experience when I got hired at my current job, only C. It is not difficult to learn if you have to. Java IDEs like IntelliJ are a huge help. You will very quickly be out of a software job if you can't adapt. You'll find that language does not matter as much as long as you have a solid background.
Reads like "slow as fuck and lacking features".
+1 for Jax-RS
Javalution and some others don't fit in that context, "realtime" in the classic context has more to do with jitter and guaranteed performance targets. https://en.wikipedia.org/wiki/Real-time_operating_system
**Real-time operating system** A real-time operating system (RTOS) is an operating system (OS) intended to serve real-time applications that process data as it comes in, typically without buffer delays. Processing time requirements (including any OS delay) are measured in tenths of seconds or shorter increments of time. They either are event driven or time sharing. Event driven systems switch between tasks based on their priorities while time sharing systems switch the task based on clock interrupts. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.27
I'm a firm believer that you can learn anything on your own. Study up on Java backend and spring/spring boot. Then it's all about how you word your resume. Instead of putting Java frontend engineer try something like Java engineer. That way you're not lying about your work experience but it also give you credibility with the things you've learned on your own.
https://wiki.eclipse.org/Configure_Eclipse_for_Java_9
We use primefaces on our internal products. A number of our clients do too.
Right - I don't know how you could build any kind of realtime application on the JVM, without an extremely complex understanding of how the JVM will compile and run it.
Why do you suggest Spring? There are other web frameworks that are arguably better
Thank you will start reading about Spring MVC right away. Would you consider Spring MVC current and up to date? What employers are seeking?
So, why?
 No, but i can understand what you said. Could you explain more?
You might be right, but there are few as complete or ubiquitous 
There really aren't. (You might claim that another framework might do one piece of what spring provides "better" ( and *that* would be arguable), but there simply is not another cohesive framework with the breadth of spring.
We'll update the TruffleRuby docs to say how to use Java 9 soon - the current instructions were for an earlier EA release and are out of date.
People in natural and physical sciences seem to call code 'codes' for some reason. Nobody has ever been able to explain why to me.
I think spring boot is the more contemporary choice. I'm having a hard time finding good literature for spring mvc but Manning's boot into spring is good and packt publishing has a few recently published books on the topic as well. I'm new to software engineering, just career pivoted from Telecom, so I can't speak to how prevalent spring is, but a Google search for remote spring mvc jobs returns a lot of results.
No kidding, specially if you're talking about "something that gets me a job" ... that's gonna be Spring.
Java is java. Seriously, I call myself "full stack developer", have a lot of experience with backend and honestly hate native java frontends. There are much better technologies for frontend. And I just learn those along the way. Angular 4 is where it's at for me right now. Technologies come and go. 
Get the certifications and start applying for jobs. You're a junior developer, nobody is expecting you to implement the entire system.
Perhaps but Spring has dominated the work force. I just want OP to spend time learning something that will pay off.
Bad.
Contrary to what most people said here, there's a lot of enterprise jobs for Java front end work. But you'll have to stay in the enterprise space. Shit, struts is still being used obviously. That said, I agree with everybody here, you're better off learning Java backend and JavaScript front end. 
It's a pity that document says: Note: Java 9 is still in early access, and hence the options are yet to be stable. It is possible that the info given here will change over time. 
You'd be surprised at how good online resources are now for learning various programming lanuages and frameworks. Udemy has some really good courses (in a sea of mediocre ones). You can just look for the ones with lots of students and high ratings. Since you already have some Java web dev experience, you'll notice similarities here and there even if you study new Java web dev stuff. Just be confident and have an open mind and you'll be fine. :3 Another tip, just my opinion here, but be open minded to learning about NoSQL databases and NoSQL features of SQL datbases like modern Postgres. They've matured and they aren't just hipster things anymore.
Removing unsafe would have prevented use of low level memory management that is used by many libraries without leeching any alternative. It would be a JVM feature completely removed. I don't use unsafe, but I oppose its removal. This https://docs.google.com/document/d/1GDm_cAxYInmoHMor-AkStzWvwE9pw6tnz_CebJQxuUE/mobilebasic shows the public campaign to keep unsafe. I agree that it would be better to keep behavior unchanged, but there was an explanation - strings were rewritten in this version.
If you actually finished the MOOC and have a solid understanding of all the concepts you'll probably be a solid 2 semesters of Java ahead. Hell, you might know more than some graduates that just coast through their entire degree. I'd also recommend looking into Spring Boot if you want to stick with Java. Pluralsight has some good courses on it (and a million other things) and I know they offer free trials. 
I know this is r/Java but try to remember you are a dev/programmer first. If you understand programming you can pick up a language in a matter of weeks to a level you can get pay for. I started Java Backend, with C# frontend (games), then went Scala and Web/HTML/JS, then Python, then Java again, now Ruby and React and in the future probably Elixir and Vue.js. And maybe back to C# a bit. Just learn a bit of theory in OOP and then FP. Learn you basic DBs, and you are good to go anywhere.
Just google java 8 download. Usually installing 8 will make it the default but you can also google how to uninstall older versions. Depends on your OS. 
is there an accepted standard for json parsing in java?
Officially, it doesn't appear to be released yet, though you can download a development build [here](http://bits.netbeans.org/download/trunk/nightly/latest/) or build the latest from [Github](https://github.com/apache/incubator-netbeans). On Sept. 13th, Geertjan Wielenga, who is part of Oracle's effort to donate the Netbeans code to Apache, [wrote this](http://mail-archives.apache.org/mod_mbox/incubator-netbeans-users/201709.mbox/%3C4F49370F-2BD2-4A44-A5B2-CE6E00CBE9AE%40oracle.com%3E) on the Apache Netbeans users mailing list: "9.0 is still some way away, we need to change license headers to Apache first, among other things."
In my experience, the Java 9 support in Eclipse is still buggy. I had tons of issues with modules, half the time doing a clean of the project magically solved them.
You can download it from [here](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html).
Not for greenfield projects. But definitely for brownfield.
If you want to do front-end and also do Java, Android is where it's at.
If you don't mind, may I ask, how long did it take you to finish it?
I would strongly suggest a Java backend approach. If you are particularly interested in fronted, I would suggest learning a JavaScript framework like reactjs or AngularJS, these are in demand now and will get you jobs. If you are interested in java, go for backend frameworks like Spring/Spring Boot. Learn the concepts of functional programming which were brought in by Java 8 and also hibernate. With this, you should have all the knowledge to get a proper job with java.
No, but Jackson and Gson seem popular libraries.
Funny thing about experience - we all start without it...
You are making easier for people to make God Classes. Pieces of code that _need_ lots of moving parts just so that they are even testable. That's a design smell and bad code. Your little project is encouraging it. I mean, if my first explanation was not sufficient for you to understand what I meant maybe you need to spend some 3-5 years learning a bit more about development first?
Instead of having a newbie manually deploy stuff into Tomcat I would suggest just pointing them to [Spring Boot](https://spring.io/guides/gs/spring-boot/). Much easier to get started with.
&gt; I think spring boot is the more contemporary choice. Spring Boot **is** Spring MVC. All Spring Boot is, is a collection of starters that are preconfigured for a certain task, together with a mechanism to start tomcat from within your application. Other than that you're still just using Spring MVC (and IoC and Config etc...).
Ok, maybe I was wrong. maybe you are right. I've used ruby for 6-7 years. I am pretty new to write a program in Java. I am trying to write good tests always. But I stuggled with creating test data. So, I needed a fixture replacement tool like [factory_girls](https://github.com/thoughtbot/factory_girl) in ruby that I'm using very well and so, I made beanmother. I don't think that fixture replacement tool makes people god class easier. Even if it is a wrong attempt, I hope to learn better way later. Thanks for advise and sorry about my English :)
Sorry for being harsh. Basically - big classes with lots of objects and dependencies is bad code. They should be broken up so that it is obviously easy to test them instead of writing tools to try to hide the hideous size of effort required to test them. :)
There is a *Real-Time Specification for Java* which exist exactly because of this problem. It's a specification for the JVM as well as APIs that allow the implementation of soft or hard real-time programs. The standard HotSpot JVM does not implement it but there are a number of JVM implementations that are specifically designed for RTSJ.
&gt; Why does a general Joe Windows PC user run Netbeans / Eclipse / IntelliJ? It's examples. I run JDistReport, jDownloader, Vuze, rssOwl, theBrain they all are end user apps. They all couldn't find jmv 9 and failed to start. Probably setting JAVA_Home may help, but I wanted to just make clean, hassle-free, like average Joe, install
&gt; How the Taligent Object-Oriented Operating System contributed to Java so........ how?
&gt; Though .NET and C++ is not much better on Window Well, .NET of course too is bad, we must keep like 3 rut-times 3.5, 4.5, 4.7 IDK maybe some else, and 2.0 for legacys .NET programs if any. But I think that actual .NET programs don't have trouble at least finding .NET VM on Window PC. One don't need to fiddle with NET_HOME env variables and similar cumbersome, legacy and very outdated stuff
Nope, the move to Apache has been keeping the NetBeans team busy, so sadly no NetBeans 9 release to go with the Java 9 release.
I totally agree with what you said about bad big classes and bad dependencies. And I know about breaking dependencies, extracting code, making it smaller, that kind of things. I understand what you said about my lib makes god classes easier, but it does not force making god classes. It's depends on how to use it like any other things. I know good code makes to writing tests easier, but ease of writing test does not mean your code is good. My concern is here, (I don't know, maybe I couldn't find best practices or maybe just my concern is wrong.) * How to prepare entities(for example, 10 authors and each author has 5 books) must be displayed in integration tests(or api tests). * How to prepare returning DTOs from mokcing or stubbing object(such as JPA repositories or DAOs) * How to prepare hundreds of fake request parameter DTOs for controller tests. It does not mean the way of Beanmother is right or wrong. Just my concern. I should think more. Anyway I appreciate your advice, I get a chance to think deeper. And also thanks for your patience with reading my english :)
The NetBeans team now consists of all those who care about NetBeans. You do need to get involved in the project, actively, if you want NetBeans to be released: https://cwiki.apache.org/confluence/display/NETBEANS/List+of+Modules+to+Review
Certifications for Java are useless.
:) No worries, I'm sure that the lib is reasonable and may find good uses. Don't abandon it just because some meanie on internet is being nasty to you :P But if you written one lib that simplifies overabusing tests - write another one that encourages clean coding :)
Thanks! :+1: I learned from meanie :p haha. I hope to introduce another one someday. better one.
What do you mean about accepted standard? There are a lot of libraries than can parse and manipulate json objects in Java. You can even persist json objects if your using something like mongo, postrges w/ jsonb, etc.
https://github.com/graalvm/truffleruby/issues/556
https://github.com/graalvm/truffleruby/issues/556
Interestingly there is a proposal from iirc Dan Smith for introducing declaration site variance to Java.
Dude, if you can handle writing java front ends in crazy shit like Awt and Swing, you can handle Springboot.
Please, not again. This is one of the most commonly asked questions in the subreddit. Please, use the *search* function to find relevant posts. There will always be the same answers: 1. IntelliJ 2. Eclipse 3. Netbeans And then there will be some discussion which IDE (#1 or #2) is the best.
Android is another option for Java devs. You can build up a portfolio by yourself by releasing apps on the store. Front-end sensibilities really pay off with app development, and with Kotlin and recent tooling and library improvements, it's a good time to start. As others have said though, self-study can make you just about as valuable as you need to be if you're willing to put in the effort. Maybe you dislike Java and Android, and find languages like Scala interesting. You should stop thinking in terms of your current experience, and ask yourself what you're really motivated to do. 
My bad, new here
Then tell that Microsoft. You know there are platforms that don't even need *average Joe's* to click through an install wizard? Because even that has apparently become too difficult for them.
&gt; on Window PC That's the keyword. Microsoft can of course make it easier to have .NET applications run on Windows. Then again it **only** runs on Windows.
No, because Microsoft has nothing to do with that issue. Under Java 8 all those progs run fine. 9 has changed something, probably even backward compatibility
Completely void of any meaningful content. 
In what sense? I learned a ton about java getting the certs. I went from barely coding in java to senior level in 2 years, and the certs helped me a lot. Any qualification is useless in the wrong hands. 
&gt; No, because Microsoft has nothing to do with that issue. The issue is Windows giant point of failure called "registry". Therefore to have multiple JDK's available in different paths without having to deinstall one and install another, it can only rely on the PATH and JAVA_HOME environment variables. Btw. that's one of the reasons why developers have started to hate developing on and for Windows. Python etc. have to deal with the same Windows issue. &gt; 9 has changed something, probably even backward compatibility They did, as stated before and it's officially documented. Also for now, the official Java download (the JRE) is still version [8 Update 144](https://java.com/de/download/). You've installed JDK 9, for developers. Well even when Oracle makes the JRE 9 official, you'll have to wait until the applications you mentioned have migrated. 
Could you give some examples?
What other frameworks come close? The only thing I know of so far is Play.
JShell is [integrated](https://d3nmt5vlzunoa1.cloudfront.net/idea/files/2017/09/14-jshell.gif) in the latest IntelliJ. You can choose to make it start in your development environment, with all the library imports etc. A nice step closer to what you want. On the other hand if you have a breakpoint at the thrown exception and reproduce whats leading to the bug, you can do similar stuff with the variables in display / evaluate expression.
There's more to software engineering than coding. That said, modules are a part of coding.
If you only need java.base, you can get it down to 15MB for the runtime.
Downvoted because it's impossible to view on mobile. Keeps jumping around with all the ads.
Even though this is basically a tutorial, in light of recent events and problems with the major IDEs in Java 9, I am going to let this one pass. Just for future: please follow the guidelines in the *sidebar* and *don't post tutorials here!*
As someone who hasn't looked into parsing json with Java, one library looks the same as another. Sometimes good libraries/frameworks/etc just rise to the top. Apparently asking questions here gets you downvoted :/
@SpringBootDoAllTheThings and then one or two lines of REST controller and a DAO/Service/whatever... app done.
I consent
You're advocating naming the lambda by turning it into a local variable? Use methods and method references (e.g. `this::isMaleOrAdult`).
That's indeed an interesting and still not very developed topic. I agree that naming the predicate and hence making the lambda not anonymous anymore, is a simple yet good idea. I personally prefer lambdas to be very short; 1-3 lines. Making it bigger just makes the code look horrendous. By naming them, we mitigate this problem. IMO we need IDEs which are able to format them nicely too. That's as important as the code itself. Concatenating those functions isn't really what I'd call beautiful.
The implementation of `isMaleOrAdult` really disturbs me. Why not like this? Predicate&lt;Person&gt; isMaleOrAdult = p -&gt; p.isMale() || p.isAdult(LocalDate.now());
IMO having certifications allows a someone to have a goal when learning Java. It also forces a person to be knowledgeable in areas they might not have studied on their own otherwise. 
Cool, gonna check it out on Monday. 
it took me 5 weeks. But I spent about 5 hours a day every weekday. Good luck! 
PrimeFaces is the primary technology for the front-end where I work. While there might be a bit more of an initial learning curve using JSF, I believe it allows a developer several benefits. 1) Tooling such as using IntelliJ allows refactoring from the front-end all the way through to the back-end. 2) Because of the provided components and available styling templates the developer does not have to lean as heavily on a UX person to do work. 3) Little to no custom Javascript is required to write complex, user friendly pages (this includes SPAs as well). 4) I have not had to deal with this, but because much of the rendering work takes place on the server side battery life for mobile devices can be conserved. 5) JSF is a mature (no old) technology with plenty of documentation and community support and has been generally backwards compatible between releases. 6) I work BOTH front-end and back-end which I think is easier to to when dealing using JSF/Java EE IMO. Admittedly JS frameworks seem to be in vogue. I've played with Angular in the past but was not quite sure of what the benefit was over using JSF. 
Predicates have and/or/negate continuations. static Predicate&lt;Person&gt; male = Person::isMale; static Predicate&lt;Person&gt; adult = p -&gt; p.isAdult(LocalDate.now()); persons.stream() .filter(male.and(adult)) .map(toFullName); 
You can't define a method from inside a method yet you want to limit polluting your class space with these stream helper methods AND you'd like to retain some locality to the method logic. They end up as local variables defined right before the stream operations. 
Everybody, right here. I didn't expect to find it, but right here a person more of a jerk than me. You sir are a rare animal, the right mix of nature and nurture-- we all know it isn't easy to be green and that it is lonely at the top --but I bet you're truly living it. I have no more words, I am speechless.
It's still a puzzle to me how it can instantiate the class despite it having a private constructor.
Thanks for the code review!
You have got to be kidding! If you download the latest version of Java and the latest version of Eclipse, you still have twenty steps to go? Why don't they 'just work'? This is unacceptable BS.
This looks cool. Is there a standalone software that can do the same? For those who don't use Netbeans.
There is something similar which is [JHipster Sudio](http://www.jhipster.tech/jdl-studio/) which is a modeler for JHipster.
Pretty inexcusable in my opinion and one of the many reasons I left Eclipse for IntelliJ.
Should be male.or(adult).
lol, eclipse is so shit.
&gt; JSF is dead. The only people who tout it are backend Java devs that don't have front end experience. Or people who have front-end experience and believe that not all web pages need the power/complexity of Single Page Application JavaScript frameworks. For some cases JSF is just fine (e.g. a simple search engine) In other cases even a servlet is fine (e.g. PDF generation) JavaScript frameworks are NOT the solution to every possible problem.
I haven't run into this issue yet but the article seems worth a bookmark.
The answer is in running something like &gt; javap -v SomeClass\$Inner.class And the watching out for compiler-generated additional methods (they have an `ACC_SYNTHETIC` flag). You'll see an accessible constructor there. Compiler did it for you.
Would it be so easy to spot if it was just the name of an aggregate method defined somewhere else?
I would also use either isAdultAt or isAdultOn, otherwise the method gets confused with a simple Bean property.
&gt; personally prefer lambdas to be very short; 1-3 lines To be fair this could be done like that, just depends on how terse you're willing to be. List&lt;String&gt; maleAdultNames = persons.stream() .filter(p -&gt; LocalDate.now().isAfter(p.getBirthDate().plus(18, ChronoUnit.YEARS)) &amp;&amp; p.getGender() == Gender.MALE) .map(p -&gt; p.getFirstName() + " " + p.getLastName()) .collect(Collectors.toList()); 
I have. On Solaris. On a box I didn't admin. So no graphing or useful tools available to debug the issue (or enough experience of Solaris on my behalf). 
(please note I'm the JHipster lead dev) In fact "JPA Modeler" re-uses the JHipster templates, so that's very similar to JHipster. They basically migrated the Spring Boot code to Java EE, and did a Netbeans-based "studio" to replace our Eclipse-based one, but otherwise it's our code and our ideas, so the final application should be quite close to a JHipster application.
Eclipse Oxygen was released in june... and it is not magic, you have to update it to enable Java 9. Did you read the steps to enable it? It is very easy... 
thanks! really looking forward to this.
Yet it runs circles around IntelliJ performance on my computers.
Everytime this has happened to us, it's always been the ulimit issue, with the process creating alot of new threads.
(I am Jeddict lead) Yes, Jeddict is using jHipster templates (for Angular JS 1, Angular, Kubernetes and Openshift) but it's not right to say **our code and our ideas** for just [one extension](https://github.com/jeddict/hipee). Jeddict is more than fullstack application generator, here is the [history](https://jeddict.github.io/page.html?l=p/discover). Again it is a coincidence that development of both started in same year but jHipster front-end templates forked since last year. Ofcourse jHipster is great tool developed by great team and Jeddict will continue to fork front-end templates to help Java EE community.
of course it does
On my cheapo laptop, I found that swapping to a cheap, small SSD made IntelliJ far more bearable.
The article speaks about PermGen. Isn't that outdated since Java 8?
Doesn't look like there's a build for Solaris x64 currently: http://www.oracle.com/technetwork/java/javase/jdk9certconfig-3761018.html http://jdk.java.net/9/supported Oracle did support Solaris x64 in Java 8, so hopefully it is just lagging behind a bit for Java 9 and will be there soon. http://www.oracle.com/technetwork/java/javase/certconfig-2095354.html
solaris is dead, or so i hear. https://www.thelayoff.com/t/KTCW4qz
The article title says 15, but the article itself lists 20. 
eclipse has funding, so yea, maybe that is something that should happen.
make me
 For me it seemed to work to add &lt;dependency&gt; &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt; &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt; &lt;version&gt;2.3.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.eclipse.persistence&lt;/groupId&gt; &lt;artifactId&gt;eclipselink&lt;/artifactId&gt; &lt;version&gt;2.7.0&lt;/version&gt; &lt;/dependency&gt; as a dependancy to my Java 8 SE compiled application that produced a jar that could be run by either Java 8 or Java 9 with no additional arguments. Also I needed to add System.setProperty("javax.xml.bind.JAXBContextFactory", "org.eclipse.persistence.jaxb.JAXBContextFactory"); near the beginning before the jaxb stuff was used. I need to test more to see if this is really a good solution. 
Read this informative discussion: https://stackoverflow.com/questions/7520432/what-is-the-difference-between-vs-equals-in-java String s1 = new String("Test"); String s2 = new String("Test"); System.out.println(s1 == s2); // false System.out.println(s1.equals(s2)); // true
Assuming the equals-method of a class is properly implemented, the difference is that == compares references, while equals compares values. For example: public class Test { static class A { private int a; public A(int a) { this.a = a; } public int getA() { return this.a; } public void setA(int a) { this.a = a; } @Override public boolean equals(Object o) { if (o instanceof A) { return this.a == ((A) o).getA(); } else { return false; } } } public static void main(String... args) { A a = new A(1); A b = new A(1); System.out.println(a == b); // false System.out.println(a.equals(b)); //true } }
Not that this is really applicable in a real world scenario, but: Object a= new Object() { @Override public boolean equals(Object obj) { return false; } }; Object b= a; System.out.println("== : " + (a == b)); // true System.out.println("equals: " + a.equals(b)); // false Also: /r/javahelp (see sidebar).
Or this from the wiki &amp; sidebar of ***/r/javahelp***: https://www.reddit.com/r/javahelp/wiki/string_comparison
Your first case is contrived, as generally you would want that if `a == b` is true then `a.equals(b) == true`. Otherwise you are essentially violating the semantics of `equals`(). In other words, how is it possible that the _same_ object is not equal to itself? The second case is easy. Imagine `Person` data structure (code not checked). class Person { private String name; Person(String name) { this.name = name; } @Override public boolean equals(Object other) { if (this == other) return true; if (!(other instanceof Person)) return false; Person otherPerson = (Person) other; return name.equals(otherPerson.name); } } Given `Person a = new Person("Mike");` and `Person b = new Person("Mike")`, `a == b` is `false` because `a` and `b` are two _different_ objects. However, `a.equals(b)` is `true` because they both are equal in the sense that both "contain" `Mike`. Clearly if you implement `equals` in a different way, then you can expect different results. To sum up, if `a == b` is true, then `a.equals(b)` _should_ be true. If `a.equals(b)` is true, then `a == b` can be true or false depending if `a` and `b` reference the _same_ object.
Here you go: public class Evil { private int counter = 0; public int hashCode() { return counter++; } public boolean equals(Object other) { return false; } public static void main(String...args) { Evil a = new Evil(); Evil b = a; System.out.printf(‚Äú a == b -&gt; %s\n‚Äù, a==b); System.out.printf(‚Äú a.equals(b) -&gt; %s\n‚Äù, a.equals(b)); } } But that code would fail code review like an avalanche...
It is, now there is only heap, you can set it with some metaspace flag, but it works differently and it's okay not to set it and just let xmx do its thing.
Please, follow the *plenty hints* on this page and address such questions to **/r/javahelp**. Questions about programming help are to be addressed there. **Post removed**
For me, most of the problems were solved changing the Stack Size (-Xss) 
Oracle may not be working on Solaris anymore but that doesn't change the fact that a lot of our customers are still running it on their servers and want to run our software on it. 
Vaadin is used for web applications, not for website. It's a little tricky to comprehend, but they are two different things. 
Learn enough to be dangerous or code academy, both are free up to a point . I don't have the link handy, but there are several debuggung tools or on Google
Obviously they're using base 15. They saved the best for last though - the #1 biggest feature/update in Java 9 is...: &gt; 1. Other Minor Language Changes The article title is lies and damned lies.
But you think is the Oracle care? Is them worth ü§ë?
You will learn by doing your assignments. Learn how to do that through working out tutorials on the web. 
I'm working as a system administrator and as part of my job I'm allowed time to learn Java. I've been using Mooc.Fi, an online course from the university of Helsinki. Really enjoying it so far, on week 10. I work with professional Java developers and can engage in various topics with them that have been discussed in the course. My experience was vastly improved by using Netbeans only as a code checker, instead using Eclipse to create the programs.
Wow, super! üëç 
Yep, the release of NetBeans depends on you: https://cwiki.apache.org/confluence/display/NETBEANS/List+of+Modules+to+Review
Trying to make it seem like the issue is the wording of website vs web application, when they are essentially the same damn thing is missing the forest from the trees, while offering a completely superficial comment devoid of knowledge.
Vaadin is Java server-side components for building single page web applications. https://vaadin.com/framework/comparison This is different Spring which is a multi-page site framework. Can you make Vaadin into something like a Spring MVC site, yes, but why? You can implement vaadin in a site.
/r/learnjava 
Just read the article ;) The information is there!
If you can guarantee zero garbage collection, then my guess is that java could do pretty well WRT performance targets. I would not be using it to control a PID loop on a robot however.
I know what the fuck a web framework is. You are assuming I don't because is overly pedantic view of the term web app, which is just a fancy word for a web site. Question was literally just if people are actually seeing it used. I get this weird feeling you're going through thread necroing while looking through a dictionary to look smart.
As the previous poster stated, to which you agreed, no it isn't!
Yawn
Sadly, this doesn't work if you want to switch between java 8 and 9 for testing purposes, as --add-modules hard fails the JVM instantiation.
Who the fuck shitted in your Apple Jack's this morning. Calm the fuck down
**Sidebar** -&gt; **NO learning Java related questions!** The place to look at is **/r/learnjava** and there the **sidebar** where you have a section **Free tutorials**
Codecademy teaches mainly Java syntax, but not actual Java programming. It is basically a waste of time. The best intro Java course is the MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html) from the University of Helsinki
Cool, ty for the clarification. Thanks for the Java link as well, I'll be looking into this more when I'm off work =)
Codecademy has benefits for people familiar with programming, but not for complete beginners. Someone familiar with other languages can use Codecademy to quickly learn the basic syntax and to get into the new language, but it is too shallow beyond the very basics. Their HTML/CSS courses are okay, but anything beyond that is not going deep enough.
Imagine if somebody wrote code like this article is designed.
&gt; There are some optional tools like jlink, java and javac java and javac are optional now? /s
&gt; 14. Short strings They're called *compact* strings. 
[removed]
even more embarrassing when HTTPS URL redirects back to HTTP one .. 
the best feature of java 9 is java 9 being released... so we can get to the good stuff in java 10! 
[removed]
[removed]
This chart is a great example of how a dev survey conducted by a technology vendor, amongst its own audience, can show biased results. https://zeroturnaround.com/wp-content/uploads/2017/09/17-top-reasons-why-people-use-thier-languages.jpg The survey has great format, interesting data points being pursued, but IMO 2060 respondents is not enough, and not diverse enough. 
Of course. Yet, it will be cited all the time by the "winners" of the survey ;-)
In the Artikels defense, the minor changes are not enumbered in the list its more like an extra paragraph for completenes.
Sure. You can just use c++ :P
fair enough. but I think that, even with a potentially biased selection, the trends throughout the years are very interesting (eg Eclipse vs IntelliJ) 
Don't think it's fair to dismiss the entire survey because of that one question.
And what's wrong with this chart? In which way is it biased? Missing Java 1.4? ;) In the beginning of the report there's data about the geography and affiliations. IMO, this is diverse enough. Of course a bit more biased towards enterprise devs. But hey, that's what Java is, isn't it?
&gt; For Hibernate 5.2, use this dependency: &gt; &gt; For Hibernate 5.1 and 5.0, use this dependency: &gt; &gt; For Hibernate 4.3, use this dependency: &gt; &gt; For Hibernate 4.2 and 4.1, use this dependency: Egh. Some insights on why this is required? Did the SPIs change incompatibly all the time?
[subtle use of comic sans in the middle](https://i.imgur.com/ngkJdv3.png)
sadly we do
&gt; The presentation and grouping of options within the control panel has been improvised. 'improvised' doesn't mean what the author thinks it means. A poorly written article from both languages' perspective (java and english ;))
The API for `UserType` has changed one time, so I could have made it with few releases if I chose to use the `UserType` for all these types. But, I didn't want to do so because the Java and SQL descriptors allow me to better reuse the logic for the Binary and String-based JSON types. Unfortunately, the API for these descriptors was used as an internal Hibernate mechanism, hence it changed more often. Well, from a user perspective, the problem is solved. The hard part was to come up with a working solution for each particular version.
&gt; They basically did a Netbeans-based "studio" to replace our Eclipse-based one Please always explore and have a look on the history first before any wrong claim or statement : **NetBeans-based studio :** * [NB Modeler 1st commit](https://github.com/jeddict/NBModeler/commit/426228c8861ef71197325b8c96087461053dbfcf) : Feb 2014 * [Jeddict 1st commit](https://github.com/jeddict/jeddict/commit/1ffab8eed2ddcfc963dfb3ec78f0cbace5728c78) : Mar 2014 **Eclipse-based studio :** * [jhipster-uml 1st commit ](https://github.com/jhipster/jhipster-uml/commit/70d3a1bb3a31219eaf478d1e8e64f1b9e8534596) : Apr 2015 * [jdl-studio 1st commit](https://github.com/jhipster/jdl-studio/commit/042bed1bb33ccb8d6c5cf4f839a4a3ff79bd2588) : Feb 2016 * [jhipster-ide 1st commit](https://github.com/jhipster/jhipster-ide/commit/b1b319a189c5c4bfb5e838d8dd6449644c30252d) : Sep 2016 
Jeddict uses a fork of our templates -&gt; just have a look at the templates used, as well as the generated application, it's JHipster everywhere. The Angular and AngularJS code, the Java code (it's a port of our Spring Boot code), Kubernetes, Openshift... Do you have an idea of how much code that is? I was just saying that the final application would be very close to a JHipster-generated one: given the amount of forked code, this is going to happen. Even the Jeddict official screenshots look like our own screenshots, with just JHipster replaced by "Java EE". Maybe the project started earlier, but in no way did they code any of those templates. There is a huge work here, that comes directly from JHipster. I'm not saying it's bad: the Apache license allows you to do a fork, so there's no problem here. But the original work comes from JHipster. I understand this is made by a company that has much more money, lawyers, and marketing power than me or the JHipster community: this is why I won't answer you anymore here. I have already had some very bad contacts with some "Java EE evangelists", I do not want to have any more. This is the very reason why I left the JCP in the first place. Please copy our code, as the license allows us to, but please also respect our work and leave me alone.
wow, that‚Äôs great. Congrats. Good luck to you too :) 
try [jeddict.github.io](https://jeddict.github.io)
All the places I contract at, people use Eclipse.
&gt; just have a look at the templates used, as well as the generated application, it's JHipster everywhere We didn't tried to hide the jHipster in code. Given the credits to jHipster on the home page of generated application and followed the Apache license. &gt; Do you have an idea of how much code that is ? Yes, because we re-written the execution logic in java and to make it compatible with JDK 8 Nashorn javascript engine. &gt;I understand this is made by a company There is no company behind jeddict, this is started by individuals to help &amp; provide the tooling support for Java EE. &gt;please also respect our work Yes we respect, Already given credits(for the forked templates) and mentioned on jeddict.github.io (credits page, history page) and generated application (home page)
Anecdote is not data.
It separates out SOA and microservices on one of the questions. Isn't microservice just a sub-category of SOA? 
The "OutOfMemoryError" you get when you hit a thread limit on a *nix box couldn't be more misleading. Who in their right mind named that "OutOfMemoryError"? How about "ThreadLimitError"? 
What's the good stuff in Java 10?
I'm mostly glad the pattern Interface.of(...) has been established so I can hide all our ugly Impl-classes.
No, it's really different. SOA architectures are generally coupled in rather complex ways via service bus systems. They are a complete and utter pain to deploy. SOA is basically microservices before people knew what the good and the bad parts of microservices were so it contains a lot of the bad parts of a monolith together with very few of the good parts of microservices. 
The data is too small, too narrow, and focused on the audience of the technology vendor (ZT). It is representative only at their own audience. It doesn't prove anything at the scale of the market size.
All that data represents only the vendor's audience. So if anything, the report is great to say: "Here's a report on trends by our user base ".
Yes it is, if you want to ask "what is the market using". The survey represents what the vendor's audience is using.
ExtJS is pretty desktop-y
I will only comment on the alternative part. As you mentioned you have good experience with JavaScript, you can develop your application with HTML, JavaScript and CSS. From this web app you can use electron to generate a desktop client version of web app . Electron has close integration with angular framework so using it in your app will make things easier. This is the link to electron. https://electron.atom.io
Guys, thank you so far for all the input. Still, I don't want to be too limited with just JavaScript, I want to explore other possibilities as well, especially Java.
I despise ZT and have nothing but hate for the licensing model of their apps (especially JRebel and XRebel). So I am not in their audience and I took the survey. I have no idea how I found it but I found a link to it somewhere.
I used Vaadin(7) on my previous job and I kind of liked it. It's a good choice for a team where you don't have much front-end resources and your application is a typical enterprise app - forms, tables, some graphs. If you need to build more complex UI, then I would go with javascript frontend(like VueJs)+REST. And be alert about Vaadin - it makes it too easy for developers to slip into anti-patterns and start to mix presentations with business logic. I think you actually can use Vaadin in the right way - Vaadin+REST API should keep you on the right track.
Yes, exactly, I've read that Vaadin also enables to expose REST API, additionally to the conventional approach. So, in theory, one could mix both approaches? I know it's sounds all sorts of wrong, but we're talking about how the things work, so would that be possible?
Typescript 
&gt;SOA architectures are generally coupled in rather complex ways via service bus systems This is a myth that needs to stop. A service bus was just one of the ways that you could do SOA. People were "doing SOA" with just queues and direct http connections EXACTLY like "microservices" are doing today. For some well behaved companies SOA and microservices are exactly the same thing. I know that not all companies are that lucky, but some of them are.
&gt; The survey has great format, interesting data points being pursued, but IMO 2060 respondents is not enough, and not diverse enough. I know that it is not perfect but can you point me to better/less biased survey than this?
I've been using Vaadin for my startup for the past few years. It's worked pretty damn well for us in general. I'd recommend it.
Pay walled 
They acknowledge that: &gt; And yes, we know, it‚Äôs not the most scientific method to sample the community. &gt; Indeed, it reaches ZeroTurnaround customers and the developers who are close to us on the social networks first. But this is probably the best we can do. We do not claim the results represent the whole community.
Thanks! I've been hearing just great things about vaadin, but nothing "bad", so I'm a bit suspicious... since you've been actively developing apps in Vaadin, what would you say are the DOWNSIDES when compared to a more trendy "angular front, REST api in the back" approach?
I work with Vaadin in my current company: it's a nice active framework - especially for internal facing websites running inside the corporate network. also useful when you only have a team of Java developers without Javascript background. The two main downsides in my option are: A. There are allot of round trip networking as every operation needs to be handled on the server-side (work with push/websockets mode if you can) which makes it less idle for an Internet website. B.It's hard to customized the widgets. Vaadin9 should improve on that by supporting web-components as the client-side technology instead/along GWT.
It's also pretty dead.
still big in enterprise world, but dead in open source world, yes
There's also http://erraiframework.org though I don't know how big its community is.
If you would respond then there would be 2061. 2060 respondents is not enoug? Many surveys are based on ~1k responders.
It's not vendor audience only. Zeroturnaround is active in Java community. Simon, who is their employee, is one of the leaders of London Java Community, Java Champion, popular speaker and founder of vJUG. He advertise survey among members of these communities, which are not affiliated with Zeroturnaround.
If you think it is biased, why you provide link to it?
yeah I've noticed that there is a "two-way databinding" but between the server and client, which is both amazing and a huge overhead, I suppose.
Find/develop a webGL port for Java and then find a Java to JS compiler and you can do anything you want in the browser without any HTML/CSS/JS
If you don't know Java yet, make sure they know that, then they won't ask you Java questions.
The downsides are simple. GWT, Vaadin, Flex, OpenLazlo, etc are dead. Many of the 'rich internet application' and all the "* transpiles to html/javascript/plugin frontend" frameworks have shown their true colors; you eventually have to dig deep into the internals to understand anything non-default and debugging is a nightmare. People who use it of course won't say its dead but 'its dead, Jim.' Almost all of them are dead or dying because many of them leveraged browser plugins like Flash/SilverLight/Javafx/AdobeAir mostly for displaying video or to get around certain browser security limitations. Those technologies are dead themselves and have been replaced with html5 web specifications that actually work now but yes there are/were some overlap gaps. Essentially Vaadin has no reason to exist anymore and its initial premise of simplicity is dwarfed by the reality of having to learn this behemoth of a frameworks internals to approach custom solutions beyond what is provided and that, of course, always comes up at least once and once it all it takes to lead you down that rabbit hole of having to learn the entire framework internals to do your one stupid thing. New projects in Vaadin? See your doctor. These frameworks were meant for Java people who couldn't/wouldn't/or can't learn the javascript/html/css ecosystem. You are the opposite of that demographic. 
I agree that if you do not know Java, but they still want you, they will not ask you Java questions ... and you cannot bluff your way into Java EE very quickly. However, I would suggest that you study up Java Design Patterns which will give you a conceptual understanding of many things about Java EE challenges without actually programming it.
The bias is not the same on all dimensions of the survey. Besides, feel free to link to an unbiased report of similar content. I'll be interested!
Conversely, before long, we'll see a enterprise microservice bus show up eventually. Some vendors will make good money out of it.
Oh, I see. Well, I think if your library gets some traction, you might regret that decision down the line :-)
This is HARSH! I wonder how many Java developers feel like that. Vaadin, for example, is adapting afaik. Also, latest update was like a month ago. Did you use the version 8? So i guess you're for the angular-jersey/spring combination?
Yes, the underlying tech behind Vaadin (GWT) is dead. Google has given away GWT and no longer contributes to it. Instead, for desktop apps, use the Electron framework where you can leverage your React/Vue/ES201* skills. The IDE VSCode is built on Electron and is super solid.
Really?
2060 respondents can actually paint a pretty good picture. In this sector you typically won't get much more responses anyway. The question is though, is it sufficiently diverse enough, and there it's indeed where a debate can start.
&gt; All that data represents only the vendor's audience. Not at all! The survey as shared and re-shared on the social channels. Of course, some part of the audience are in the informational circle of ZT. But there's no evidence that it is 100%. And BTW, you did not answer, what's wrong with that particular chart.
GWT was last updated like 5 months ago or something. And they've added support of Polymer, which is good: "In an effort to make Web Components easier to use for Java developers, Vaadin is releasing GWT Polymer Elements, giving you both GWT widget and GWT element APIs for all the components in the Polymer catalog." 
OK here's what I think and please, let me know if I'm mistaken. Again, I am a JavaScript developer, so I might lack the advanced understanding of Java, but here we go: * the main advantage of Vaadin is IMO that you do not have to develop an web app in TWO (or three) languages. You don't need to know JavaScript at all, neither TypeScript. It's Java all the way. * since you write "client logic" on the "server side", you don't need to implement double validation (client and server), since the Vaadin does that for you * no need to implement a custom token verification process, since Vaadin does that for you * there's a two way data binding of sorts between client and server - no need to implement explicit ajax calls and worry that the client does not represent the actual state of the data on the server * you can use sessions, which (I think) are a bit limited in traditional JS - RESTful API architecture * easier development, since Java has types (okay, typescript has'em too) and it's easier to debug So, these are my thoughts. Feel free to correct me at any point.
I know Java for mostly application development. I'm unfamiliar with Java EE, though I am learning it in my free time. I am comfortable with Web programming, mostly back end with ORMs, MVC, and API services. Though most of my experience has been PHP/Kohana, Ruby on Rails, and a bit of .net
Its just going to be a long period of phasing out. Like those Cobol mainframes.
hopefully value types, boilerplate elimination of get/set/equals etc and some form of pattern matching among other things. 
The[ Vaadin framework](https://vaadin.com/docs/framework/v8/introduction/intro-overview.html) has two programming models: Server-side and client-side. I recommend trying out the former first. It lets you create a web application without having to be concerned about web stuff. It's more like building a traditional desktop application. The later you should be familiar with. It's an approach nearly all JavaScript frameworks take - atleast Angular and React I guess. They more or less directly interact with the DOM/HTML/CSS. You can ofc mix the two. Note that Vaadin uses GWT to compile Java to JavaScript to run in the browser. So atleast some of GWT's disadvantages could apply. I heared it's not too bad though.
Bullshit. Well, somewhat. If your code doesn't explicitely require use of a security manager, there is nothing that the developer can do to prevent "well-intentioned" users from running the application without the policy. And by default, java lets everyone execute everything once it's on the executing machine. So your company-wide deployment policy should force the java policy to exist, and make it nearly impossible to remove it, and the application should stop fully is the policy file is missing. Next challenge: a java security manager can keep the policies of only 1 policy file at a time. Read another, and previous policies are forgotten. And unless your application specifically determones which policy file to read, it will read the default that is distributed with the java SDK or JRE: the same one that every other application on in the same environment will use. So use a specific file, require the use of a security manager, and force system administration to refuse users the right to remove that policy file. Yes, file permissions will help. Specifically if your application persists serialized objects in a predetermined location: drop exexution from that location. Application runner permissions also help: make a specific user to run it, and deny its right to run anything unknown. Whitelist what it can run; blacklist everything else. Cheers.