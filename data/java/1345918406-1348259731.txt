if all you need are rest services, check out jersey. it ships with a built in server which is pretty fast. take a look at jdbc or if you dont mind a little more framework, then look at spring jdbc for your db stuff.
The JDK is a great place to find examples of anti-patterns and bad design, it's true.
you can bootstrap a Jetty server in a few lines to your application if you want it integrated to your program, though you might consider doing something else like making it a Web archive project instead of binding it directly and putting the server inside of the application. Embedded Jetty hello world example: http://wiki.eclipse.org/Jetty/Tutorial/Jetty_HelloWorld 
I dont think you can count anorm as an orm
The JVM for your application needs to have been started from a Debug launch rather than just Run since this is a feature in the Java Debug Protocol. 
There's also JRebel, which does that a bit better than the debug mode (introduce new classes, new methods and new fields). It's free for open-source development. http://zeroturnaround.com/software/jrebel/
Thanks! This will work for the short term. Eventually I plan to do more than little hobby projects, so its in my best interest to figure out how to make Eclipse go. Do you have any suggestions for that?
For Java, it comes with the EBean ORM and Anorm. Scala only comes with Anorm.
Making a war is an extra step, no reason to do that stuff.... this is just some small prototyping.
Thanks for sharing. I read your formatting standards and was curious about the 200 column limit. Are some developers really using 200 columns? I thought the preference was usually for 80 columns or a "stretch" if you wanted to up to 120-132ish. Is 200 a preference for some languages now?
Sounds fun. Remember what you used for Eclipse class path stuff? And you are right, the variable ant-contrib uses the PR. 
I don't have any practical Maven experience, so "supposed to" means hearsay, not that Maven is opinionated about extensions. And I am jealous of the way maven makes it easy to onboard people. 
When I', coding on a 1600x900 screen with Eclipse (JBoss Developer Studio, anyway) I have 137 columns. That's on my work laptop. When I use my 1080p screen I'm sure I have over 170 columns to work with. Limiting to 80 columns is just... archaic.
Oh I kinda copied them from the common formatting standards of the development team I work for (http://www.spout.org), but I guess 80 is more reasonable. I'll change that.
If you're stopping on breakpoints, you should be almost there. Set a breakpoint somewhere in your main loop. You can modify the code right then, save the file, and on the next iteration it will use the new code. I do this with my Tomcat projects and it works well, in my case if I add or subtract lines though, debugging gets out of whack. I'm not sure if that happens with a plain Java project.
Thanks a bunch! 
/r/learnprogramming 
Actually, as soon as your file is recompiled the method will be re-executed from its first line.
In this time and day, 80 is not that reasonable. It's severely limiting. 80 was imposed at a time where we had 80 column printers and screens were so rubbish that people printed their code all the time just to read it. This was the same day and age that a resolution of 640x480 for desk tops was still called high resolution, and many of us had to do with 320x240 screens. Now we have 2560x1600 and it's still climbing. It's true that lines of unlimited length don't read well, but having most lines around 100, some extending to 120 and occasionally the rare 150 chars line is IMHO perfectly okay.
https://gist.github.com/3477959
Yeah that's right. My screen is 2560x1440, so I even could read all 200 columns I guess.
 Thank u but which "if" is the "else" associated with? "Which "if" is the last "else" associated with?" I needed to find that out with the code I posted :)
 sorry! Your answer cleared things up. thanks :)
For anyone who finds this, looking for the same solution, it was answered in a crosspost, here: http://www.reddit.com/r/gamedev/comments/ytqls/hot_code_replace_in_eclipse_xpost_from_rjava_and/c5yshoe
its working now. i deleted the other older versions and viloa.thanks anyways.
The route terminology, as I understand it, means how many connections httpclient will allow to a proxy server or tunneling over another connection as well as direct connections to a server. I've run into situations where a http client based java app will get timeouts under load trying to obtain connections from a connection pool because only two active connections to the server are allowed by default. 
Java files are .class files when compiled, not .java. That could be your first problem, you may also want to look into a manifest file.
 Another big thanks! :D but I needed to be able to make my own project and quiz scores instead of having both random. I was also wondering if u could make the main class a little more simple because some of the code in there is advanced for me and I don't quite see how it's working :\ 
Try running `javac Circle.java` and then `java Circle`
how is it friendlier?
 public static void main(String[] args) { Student[] students = new Student[] { new Student(0, "Alan", "Turing"), new Student(1, "Ada", "Lovelace") }; Student alan = students[0]; alan.setProjectScore(1.4, 0); alan.setProjectScore(5.2, 1); alan.setQuizScore(3.3, 9); int quizThatDoesNotExist = 400; if (alan.setQuizScore(4.2, quizThatDoesNotExist) == false) { System.out.println("Failure: could not set score for quiz(-index): " + quizThatDoesNotExist); } System.out.println(alan.getStudentId() + " " + alan.getFirstName() + " " + alan.getLastName()); int i = 0; while (i &lt; Student.MAX_PROJECTS) { double score = alan.getProjectScore(i); if (score == Student.NO_SCORE) { System.out.print("-"); } else { System.out.print(score); } i++; if (i &lt; Student.MAX_PROJECTS) { System.out.print(", "); } } // Similar for quiz scores... } There's something for you to work with. I would advice you to start with a clean Main class and try to write the printing logic yourself. Protip: keep it super simple and tinker with it. You can perhaps try to recreate or adapt parts of what I wrote. No copypasta - do write it yourself. I know I overdid the printing stuff, but I could not help myself. I encourage you to take some time to read the code though. The Student class does not have the gnarly parts that you find in Main, but there are a couple of utility-methods and I made some generalizations to make the code more neat (setProjectScore, setQuizScore -&gt; setScore + an additional argument). May I ask what you are studying?
 Thanks! I'm just studying basic java se right now. I'm still very new so it's been pretty tuff.
It's actually pretty disgusting. Why would you have one one class to hold an entire phone book when they're supposed to be teaching about OO languages? Dumb.
YES! I'm glad that I'm not the only one to notice how bad this material is. I read about how great O'Rilley school of tech was but it's been nothing but a waste of money :( I bet I could have found a better way to learn programming without spending this cash. I'd like to make another class but it will seem pretty strange if I turn in 3 classes when it is only meant to be 2. Any other way? 
Paste your code? 
As others said, you should really keep a list of entry's, and each entry stores it's own number + name. However, if you cannot use this for whatever reasons, look up Java HashMaps. It's essentially an array that lets you store 2 variables per entry. 
So if I want to build a simple "Hello World" using SLF4J+Logback, all I need to do is: 1. Find SLF4J and Logback packaged as OSGi bundles, or turn them into bundles myself 2. Deploy them to an Eclipse update site (because even a simple OBR is not enough) 3. Add dependency on an OSGi container, let's say Equinox to please the Eclipse Ecosystem™ 4. Write my "Hello world" as an OSGi module 5. Write code to bootstrap the OSGi container and load my module 6. Do not worry about classloading issues, because it is all transparent (SLF4J is a good example here) 7. Do not worry about performance, because it is high performance 8. Run `java -cp &lt;insert 500 chars classpath here&gt; org.eclipse.harakiri.HelloWorld` 9. `Hello, World` You see what's wrong, right ? OSGi is a **dynamic** component platform, it deals with dependencies at **runtime**. It's great but you don't need it for dealing with "static" applications. Not even talking about the whole "storing dependencies in Eclipse update sites" part... 
In the example, we have 7 bytes of allocated but unused memory. Is this waste? Will it ever be used? How? It seems to me that this object will never be able to make use of this and it is now just waste.
Hmm... code is too long to paste, max is 10k lines. Let me get it in a .zip or something. Sec.
Hmmm, Minecraft isn't open source. You really want people to help you steal code?
Upvoted for supplying useful information that I was able to pass on to my security guys. Thanks!
Current error: http://imgur.com/jsxNX Here, I found Pastebin: http://pastebin.com/fsumtS8R I think where I'm screwing up is in the class and source paths. Here's what I'm using: Class Path: C:\Users\DEFAUL~1.DEF\AppData\Roaming\MINECR~1\bin\jinput.jar;C:\Users\DEFAUL~1.DEF\AppData\Roaming\MINECR~1\bin\lwjgl.jar;C:\Users\DEFAUL~1.DEF\AppData\Roaming\MINECR~1\bin\lwjgl_util.jar;C:\Users\DEFAUL~1.DEF\AppData\Roaming\MINECR~1\bin\minecraft.jar;C:\Users\DEFAUL~1.DEF\Desktop\Zombe\classes\;C:\Users\DEFAUL~1.DEF\Desktop\Zombe\source\ Source Path: C:\Users\DEFAUL~1.DEF\Desktop\Zombe\source\;C:\Users\DEFAUL~1.DEF\AppData\Roaming\MINECR~1\bin\jinput.jar;C:\Users\DEFAUL~1.DEF\AppData\Roaming\MINECR~1\bin\lwjgl.jar;C:\Users\DEFAUL~1.DEF\AppData\Roaming\MINECR~1\bin\lwjgl_util.jar;C:\Users\DEFAUL~1.DEF\AppData\Roaming\MINECR~1\bin\minecraft.jar;C:\Users\DEFAUL~1.DEF\Desktop\Zombe\classes\ So, this is what the compile command comes out as: C:\PROGRA~1\Java\JDK17~1.0\bin\javac.exe -sourcepath C:\Users\DEFAUL~1.DEF\Desktop\Zombe\source\;C:\Users\DEFAUL~1.DEF\AppData\Roaming\MINECR~1\bin\jinput.jar;C:\Users\DEFAUL~1.DEF\AppData\Roaming\MINECR~1\bin\lwjgl.jar;C:\Users\DEFAUL~1.DEF\AppData\Roaming\MINECR~1\bin\lwjgl_util.jar;C:\Users\DEFAUL~1.DEF\AppData\Roaming\MINECR~1\bin\minecraft.jar;C:\Users\DEFAUL~1.DEF\Desktop\Zombe\classes\ -classpath C:\Users\DEFAUL~1.DEF\AppData\Roaming\MINECR~1\bin\jinput.jar;C:\Users\DEFAUL~1.DEF\AppData\Roaming\MINECR~1\bin\lwjgl.jar;C:\Users\DEFAUL~1.DEF\AppData\Roaming\MINECR~1\bin\lwjgl_util.jar;C:\Users\DEFAUL~1.DEF\AppData\Roaming\MINECR~1\bin\minecraft.jar;C:\Users\DEFAUL~1.DEF\Desktop\Zombe\classes\;C:\Users\DEFAUL~1.DEF\Desktop\Zombe\source\ -d C:\Users\DEFAUL~1.DEF\Desktop\Zombe\source\ C:\Users\DEFAUL~1.DEF\Desktop\Zombe\source\ZMod.java
It hurts my soul to see an obvious misuse of Object Oriented programming. It really does.
A heap that only holds physically attractive memory objects.
So great to know I'm paying for bullshit knowledge. Could I get some help with this mess?
I found this: http://www.roseindia.net/java/java-get-example/cannot-find-symbol.shtml But I'm not entirely sure where the "import" part of the process comes into play.
I'm actually just starting a java course this semester and I am using a Mac. My instructor recommended bluej but I keep getting a corrupt download. I've also got eclipse and net beans setup so I guess I'll end up using one of those. edit: nevermind about the corrupt d/l, had to change security settings for mountain lion so I can download use apps from the internet...
Whoa, hold up here. This is **bad** advice. If the age of the language were truly a problem, no one would write C code anymore. Scala is a great language, but you cannot honestly call it less complicated than Java. If you have no programming experience, throwing someone directly into FP isn't a great idea. Here's my suggestion: Download Java from Oracle - you will need this no matter what. Grab the latest JDK 7. Mountain Lion doesn't come with Java. As far as IDEs go, my personal preference is IntelliJ, and they have a great "community edition" that you can use. NetBeans isn't bad either, but I avoid Eclipse like the plague. Once you're comfortable with Java, then go after Scala or Clojure. You will inevitably need to deal with the Java interop or read existing Java code. Become proficient in Java first. EDIT: Something that corroborates this was posted a while ago and I just saw it on my reddit home page: http://www.neverworkintheory.org/?p=375
I never thought I'd be happy to be on a team that is several years behind the cutting edge. 
[285 jobs for “java”](http://careers.stackoverflow.com/jobs?searchTerm=java) [24 jobs for “scala”](http://careers.stackoverflow.com/jobs?searchTerm=scala) [3 jobs for “haskell”](http://careers.stackoverflow.com/jobs?searchTerm=haskell) So 24 jobs right now just on SO Careers, alright, it's 12 times less than Java, but I find that more than decent considering the ubiquity of Java. Haskell doesn't fare so well, though. Also: http://skillsmatter.com/podcast/scala/lightning-talks-talk-1 http://thoughts.inphina.com/2011/04/22/how-to-introduce-scala-in-the-enterprise/
What about the monitor lock that all objects have?
... If you like Eclipse, great, go for it. I avoid it like the plague. The mess of trying to get the right plugins, etc and how absolutely terrible it looks on Linux is just a turn-off for me.
That's a good point, I've been using Eclipse for years and after upgrading to Juno it looks like total crap on OSX.
I use Eclipse for Java development, it automatically compiles whenever you save. I can't remember the last time I've had to actually manually compile Java source files by hitting a key or clicking a button. Mountain Lion already comes pre-installed with Java 6, but if you wish you can download Java 7 from oracle.
Have you been to New York.
Here is a good starting place because it will walk you through a lot and also give you a library for OpenGL. - http://lwjgl.org/wiki/index.php?title=Main_Page#Getting_started As for IDE I use [Eclipse](http://www.eclipse.org/) and you can use [this](http://ninjacave.com/jarsplice) to package it for other operating systems. You can also use Mojang's ["Catacomb Snatch"](https://github.com/Maescool/Catacomb-Snatch) to help you out.
You said: &gt; Not sure how old are you but Java is a really old and complicated language, stuck in the past due to Sun/Oracle issues. I'm not sure why my response was hard to understand. You only argued against the age of Java. Java, as a language, is not "enterprisey" - J2EE, etc are "enterprisey". As for your other list, you have a few spot-on things (checked exceptions suck), but semicolons? That's really not a good argument against Java. Also, the generic-or-not argument also applies to Scala, since that's at the core of the JVM through type erasure. Type inference is cool, except for when you run into things that it cannot infer, or you end up with things like OCaml, where you have to use different operators depending on the type, example: 1.0 +. 1.5;; as opposed to: 1.0 + 1.5; Luckily, Scala doesn't suffer the same fate as OCaml here. Scala's complexity is clearly up for debate. Let me give you an example: def add_two(i) { i + 2 } Okay, it's not obvious to someone that's inexperienced with Scala what's wrong with that. (For those that don't know Scala, it's missing a = in the def line, therefore it returns unit.) The Java version, while verbose, is rather explicit: public void addTwo(int i) { return i + 2; } If you wrote the latter, the compiler would stop you immediately. I haven't written any Scala in a while, so I'm not sure if the compiler will now warn you if you return a non-unit value from a function that is inferred return unit. As far as Scala being easier to learn OO, the most immediate thing that comes to mind is the difference between class and object. Yes, this is an important concept, but not an easy concept to grasp at first. If you really want to learn OO concepts, start with Smalltalk. I do like Scala, but I find personally find it to be more complex, and the lack of maturity in the tooling and documentation isn't a good thing for a beginner. Hell, even the Scala website suggests you start with Java: http://www.scala-lang.org/node/1305#Begin &gt; Nearly all of the material existing for Scala assume that you already have some programming experience and are familiar with the basic jargon. If you have never done any programming, you may like to consider starting with Java first, as there is a large amount of beginner material available.
This needs more upvotes. Also, [this](http://www.gamefromscratch.com/post/2011/08/04/I-want-to-be-a-game-developer.aspx#Java). Scroll down to "Still too many choices, tell me exactly what to do!" for a complete babystepped path on learning Java and getting into game design.
Mountain Lion does not ship with Java. Lion did not ship with Java either. If you upgraded to Lion or Mountain Lion, your existing Java installation would have still been there. If you type java or javac from a command line, it will download JDK 6, but you'd be better off downloading JDK 7 directly from Oracle. Don't spend any more time on JDK 6 if you're new to Java. edit: Lion did not ship with Lion - oops, meant Java.
No, upgrading from Lion to Mountain Lion won't preserve your java installation :(
Where is that? 
Depending on your OS X version you can get your JDK from Apple or Oracle (afaik mountain lion means JDK 7 from oracle, no longer from Apple). But I assume you've got that covererd. Personally I like [Intellij](https://www.jetbrains.com/idea/download/index.html) Community Edition best, simply for it's speed compared to Eclipse, but the latter will do just fine. No real experience with NetBeans. What else could you need? I'd recommend [homebrew](http://mxcl.github.com/homebrew/) for the moments you need to install some build tool like maven, ant, gradle.
My point is, how exactly do we know that a `java.lang.Object` requires exactly 8 bytes of memory? Did this person actually look in the HotSpot sources and dig that information up, or what?
8 bytes is size reported by java.lang.instrument.Instrumentation.getObjectSize. Which is more or less adequate estimation.
Oracle is now updating the JDK on Mac themselves, so there should theoretically be less of a lag in updates from here on out.
If you want to spend lots of time fighting your IDE, while having no idea what's actually happening to your code, I recommend picking Eclipse. My experience working with people who use it is that they generally complain a lot, spend a good deal of time fighting Eclipse, and that they don't really understand the environment their code runs in. Eclipse may be useful for later if you're going to work professionally with Java, but I wouldn't start there.
Yeah sorry, of course I meant Oracle Java. I use OpenJDK so rarely that I don't even realize it's there.
By that non-logic, using anything more complex than Notepad is wasteful.
What are you needing help with?
I wouldnt even use an if then.... just an if-else. if(player score = whatever){ fill in circles } else if(player score = whatever agian){ fill in different circles }
I would use a for statment for this instead of a bunch of if-elses. Same for drawing the original, empty circles. It would look something like this, assuming you're filling circles from the top down: g.setColor(Color.WHITE); for (int i = 0; i &lt; computerScore; i++) { g.fillOval(15, 80 + i * 63, width, height); } This needs a little tweaking so that it won't draw circles on a score of 0, so I'll leave that up to you. You only need to set the color once until you need to change it again. You can save a lot of space if you remove the unnecessary calls. You'd have two variables that increment every time someone scores. This would be what you would use to track player victory and reset the game. All you need is to check whether or not the score is greater than the maximum score (in this case, it's 6), then reset the game if it is.
http://www.reddit.com/r/java :) http://www.reddit.com/r/javaserverfaces
Actually I have done grinds for a number of students starting off on Java (well last done last year). 99% of the time they are told to use a text editor and command line javac/java. They are only allowed to submit projects that compile/run that way. They are allowed to use an IDE if they mention the IDE and can explain in detail why the IDE did what it did in relation to their project/code. 
Since you want to learn java and esp. OOP, I would say start with a good book. I like [Core Java Vol. 1](http://amzn.com/0132354764) and [Core Java Vol. 2](http://amzn.com/0132354799) but you can start with any book you like. Download Java from Oracle since they have version 7 for Lion. For editor, I would stay away from any full featured IDE like Netbeans or Eclipse in starting phase. Start with TextEdit or Sublime Text. Write few code by yourself and compile it using Terminal. This way you will learn the compilation process. All IDEs compile files automatically so you can't learn what is going on behind the screen. If you use command line, you will also learn CLASSPATH, packages, class creation etc. You should use command line for first 2-3 months only or may be less depending upon your learning curve. After that you can choose IDE. By that time, you will also good knowledge to judge which IDE is good for you. Netbeans and Eclipse both are good and free. I like Netbeans. Good luck with your learning process.
And the community! Can you imagine if thecommunity of Scala developers was as massive as that for Java? That you could search for a specific error message, and instantly see hundreds of forum posts talking about the problem and how to solve it?
And yes I'm fully aware the project name sounds like a pirate. It's what I call a happy coincidence!
CodeRanch Forums http://www.coderanch.com/forums
No problem. For future reference, this is getting downvoted so hard because it's better suited for /r/javahelp.
The IntelliJ Scala plugin is fantastic.
reddit.com/r/jpa
Most of the dependencies are compressed anyway (big ass jar files) so it seems logical enough that you could just stream them all down one after another like one big file. Of course, it's just as doable to extend Maven to download multiple objects simultaneously.
Nice. You should consider implementing it as command line application
I'd suspect that it'd do the same for each server.
Thanks! What do you have in mind when you say a command line application? I don't really see how this would be done.
That's the tricky part. If you manage to do it in an efficient way, that would be awesome!
Casting to int will always round down. You can use the Math.round() function, or do something along the lines of adding 1 to the double before casting if tal1 is above 0.5
Yes, also, if boolean foo = false; is declared in a method, it's scope is private to the method. Technically it's "private".
Looks like I posted this in the wrong subreddit :/ www.reddit.com/r/technology/comments/yyiu7/disable_java_now_users_told_as_0day_exploit_hits/
Also, the "tall" variable isn't really used, unless there is some code that is left out. I would go about the problem using if statements, and also adding 0.5 like you did.
Don't use the installer. The installer may install a plugin for each of your browsers and I _believe_ this is the only way to get Java in a browser. If you just download a zip file, extract the zip anywhere you want and set your JAVA_HOME correctly, I'd say you'll be fine. Your best bet is probably to just disable it in your browsers. Is this not an option?
Just using multiple parallel and persisted http connections should speed up significantly. git can check put pretty fast even from a "dumb" http server. I don't think we need the super clever Maven server, but should leverage the http technology we already have. Look how video streaming have moved to m3u8 and a stream of small video chunks retrieved by regular HTTP GETS, cacheable and working everywhere, as opposed to those "multimedia servers" with custom protocols as we used to have. I remember reading about alternative maven settings for multiple connections http://maven.apache.org/guides/mini/guide-http-settings.html 
There's nothing RESTful about twitter's API: http://stackoverflow.com/questions/3408191/is-the-twitter-api-really-restful Stop saying "REST" when you mean "RPC that leans heavily on HTTP features." REST is a concept that most "REST" APIs do not embody.
Good link!
Maven already does multiple parallel connections, but it doesn't solve the central problem of having to setup, connect, download, parse XML, build graph - repeat that 200 times. 
Click, ah, this is the comment that helps me to understand -- transitive dependencies can be resolved on the server? That's damn cool.
Nope, that's still too much work to do on the client, you'll spend time parsing XML (with Modello, which is an awful way to do it). The Nexus Indexer format exists already, and it likely has all of the dep info for Central. All you would need to do is query the various indexes of the repositories and create this graph. (Should only take a few milliseconds to traverse all of this if it is in memory)
Is build logic going to end up leaking out of the project and into the repository? I'll take slow and simple over fast and complicated, especially when we're talking about a difference of 8 minutes for big projects. For mid-sized projects, I don't see how you could save more than a few minutes here and there. Even the tiniest amount of added complexity is going to eat up any productivity gains you'd get from this. 
I don't see any ZIP files for Windows on either of these page. Suggestions? * http://www.oracle.com/technetwork/java/javase/downloads/jre7-downloads-1637588.html * http://www.oracle.com/technetwork/java/javase/downloads/jre6-downloads-1637595.html 
Collate your libs by hand then then check them in like source?
you may not be able to do it entirely at the repository manager level because it is not privy to all the repositories in my POM - and arguably it shouldn't be. But for anything that the repo cannot find it should just ignore. won't the normal maven process be "i don't have this artifact, time to query all my repos"?
You should use [minecraft coder pack](http://mcp.ocean-labs.de/index.php/Main_Page). It handles decompiling/deobfuscating and recompiling/reobfuscating. They also added comments to a good part of the code base. It's really easy to use too! This definitly the way to go if you want to mod minecraft.
http://docs.oracle.com/javase/tutorial/ is the official Java tutorial and also the first hit on Google. 
I have begun to learn Java 1.5 weeks ago, and in the application I am to develop I already have: Window, custom button with optical hover and click effects, button delivers a *script string* to an interpreter I'm writing (each running in its own thread), interpreter parses it (Only half done.), and I'm currently writing a plugin system that loads additional .jar files at runtime (via the awesome and super simple [JCL](https://github.com/kamranzafar/JCL/) library), which already works a bit. Before Java, I have only programmed VB6 for 10 years (and 68000 assembler a few years before that). To get this far this quickly, I installed "Eclipse IDE for Java Developers" and Java SDK 1.7 (includes JavaFX 2.2, check [this](http://www.efxclipse.org/p2-repos/releases/latest/) out to add support for Eclipse) I then worked through these: http://eclipsetutorial.sourceforge.net/ I did "Eclipse and Java for Total Beginners", "Eclipse and Java: Introducing Persistence" (Not of much use for me yet.), and "Eclipse and Java: Using the Debugger" (very useful). There are a few more setup tricks that I found over time, e.g. forcing Eclipse to use local Java documentation instead of pulling it from the Web all the time, and other stuff. This IS work! But it's worth it. The more I see of Java, the more I'm glad that I invested the effort. I also searched a thousand things on Google since then, this fills the head with puzzle pieces, and they start to assemble after a few days, just have faith in your mind's automatisms. I also bought "Einstieg in Java 7" by author Bernhard Steppan (which seems to be only available in German) which helped clear things up quite a bit.
I do the following to easily have multiple JDKs installed without polluting the registry: * download the JDK * install the JDK into a virtual machine, in a directory of your choice * copy this directory to your Windows host * using the System control panel, set up a JAVA_HOME environment variable pointing to the directory where your new JDK lives, and add the JAVA_HOME\bin directory to the PATH environment variable The JDK is a little larger than the JRE, but it doesn't need to hook into the registry, and everything that requires a JRE will work just as well with a JDK.
Excellent answer! Thanks!
Another way could be to install java, zip up the installation directory, uninstall java, extract zipped installation directory and set up JAVA_HOME.
This happens by default for me. I install the 64bit JRE/JDK, and Firefox and Chrome are 32bit, so won't touch it.
It's 25 weeks long! The question is should a job come along in the interim (java related or not) should I take it?
it might help, it might not. if you are currently unemployed and don't see getting a job soon it might be worth it simply so you can say to employers you are not going stale. 
Given that you don't have a degree, I would certainly go for the certification: you need something on your resume to show prospective employers that you have the skills they are looking for. It is certainly true I've interviewed many people with a degree who were complete dullards, but that one thing got them through the HR filter. 
I like this. Its clean, simple and useful. The makings of a good program.
So what's the argument for not encrypting? Author says they kept reading methods of encryption, so don't encrypt. That's all I took from it.
Are you guys using the JDK that comes from Apple or have you moved to the Oracle supplied JDK? Any issues with it?
HR Filter. Says it all really. They look for one thing (certs) and don't appreciate practiced experience (or how to recognize it)
Thats exactly why im doing this course at the moment. Id rather be certified in something im familiar with then sit-on-my-hole (That's an Irishism right there!) doing nothing.
agreed, that's the only reason I read the article, I wanted to see what the argument was for "don't encrypt", as I'm still a noob and thought I could learn something. Instead it just talks about how he solved some other guy's problem.
That's not encryption, that's hashing, a many-to-one, one-way (in theory) process. Cracking the hash is not decryption as there are an infinite number of strings that will result in that particular hash. This was what the article, poorly written, was talking about. SHA256 is a very fast algorithm and makes for a poor password hash. As far as cracking hashes goes, that's one of the easy ones. There are CPU-intensive and/or memory-intensive algorithms out there that are much better suited for hashing passwords. 
You first point is what people should take away from this discussion. As you said, many passwords can have the same hash. The tactic used to get a password by using the hash is to simply look for a work that has the same hash as the user's password and use that word. If I am able to reverse engineer a password from a hash, I might only be able to use that password on the system I hacked because other systems might use a different salt. Also, I've solved the password for that single user. I have to repeat the process, from the start, for the next user. But, if I break the encrypted password or manage to get the key, I now have a access password that a particular user may use for many systems. Plus, if I break the encryption, I have access to all passwords for all users.
Probably because its not encryption.
When encrypting, can you use something like a salt to keep someone from having all the passwords?
thanks for this. i'm a work right now, but i'll get back to this later and give it a shot. appreciate it.
I hate this sort of rote memorisation for the clueless - it is just to pass screening questions and does little or nothing to develop understanding.
Yeah, I mean the answer is how critical is income to you right now? If you are starving and have no shelter I would say take any job offer that comes in, regardless of what you are in the middle of. If you want to get good at java, take the class and see where it takes you. Most employers don't give a rats ass about any certification, its more important you know what you are doing. What are you goals for employment? Do you want to be a java developer? Do you have a plan for yourself after you get certified?
No worries. I used it to work on a mod of my own, so PM me if you need help!
Does anyone else have issues debugging with Eclipse on Glassfish 3.1?
Maven POMs don't have repositories, and if they do they are overridden by a global mirror that points to your repository manager's single group. This is the way of the repository manager, it has thusly been written (by me).
looked at the first page (or three) for each of these, and scanned a few stories from each. none of these seem to add much value ... * theserverside: 9 comments on the front page (OTFP) * jaxenter.com/news/java: doesn't list comments OTFP, 0 on the 2 articles i read * dzone: 14 comments OTFP, most articles have zero * infoq: not much java content * javablogs: doesn't list comments OTFP, 0 on the 2 articles i read overall, none of the articles i read were technical and i didn't see any meaningful discussion. appears to be a real dearth of (centralized) meaningful discussion of technical java 
Not to be too much of an asshole, but this is really like debugging 101. 
[RAD](http://www-01.ibm.com/software/awdtools/developer/application/).
Agreed. If you don't know how to use your IDE for debugging, then you are not doing it right.
well then I mean all the repositories referenced in my pom. does nexus support overwriting POM repository references? I know artifactory does. my personal preference is to combine the common public ones (central, codehaus, etc), supplemental (mostly sources to binaries that exist in central or other open source projects, or our repackaging and re-groupid-ing of open source projects), and restricted (freely available but not really freely redistributable, the classics being sun jars, oracle jdbc drivers, ibm mq, etc) into one central mirror. but in house projects still have their own repository, so that repository is explicitly referenced in the pom. some projects use more than one private in house project as a base. I also abuse Maven 2.1 a bit in that the URL for those private repositories is "settings.xml" indicating that you *must* provide a mirror for it. Partly because we don't yet have a single repository but that's a different battle. I think Maven 3 chokes on that :-/. I can see the argument for only having one implicit repository ref in the pom - that is central. maybe in time we'll move to that.
Agree completely!
I had no idea that you could filter what you step through, drop to a new frame, or stopping at main. I'm still surprised how many people I run into that don't know about expressions.
Also, sooner than later, you'll need a decent text editor. [Sublime Text](http://www.sublimetext.com/) is the way to go.
Leepoint.net helped the shit outta me in high school.
It's a good reminder.
You're not alone. I've been debugging Java programs in Eclipse every second day for the past 6 years and I didn't know about step filters or stop at main either. The drop to frame feature and most other features, on the other hand, are old friends of mine since the ancient times of VisualAge (the IDE Eclipse is based on). VA was a pain in the ass to use, but the debugger was pretty good.
Thanks
Thanks
log.trace();
Here's one contribution. In your MathExt.factor() function, you are returning a List of Integers. While I always favor the Collection API when I can, this is one case where I would recommend returning an array of ints. An ArrayList of Integers is creating boxes around the individual primitive integer values and storing each of those boxes in an array. So, even though the underlying data structure is an array, the integers take up more space and are scattered all over memory. On the other hand, a primitive int[] holds all the integer values directly in a contigious block of memory. Why is this important? Number crunching algorithms tend to be cache-sensitive when it comes to raw performance. You want to have the necessary information close at hand, such as in the processor cache. A cache miss will require going back to main memory, which can be expensive (in relative terms). This is almost never a concern in day-to-day applications, in which case the pain of using an array instead of a collection is not a worthwhile tradeoff. But math libraries are different.
Why don't you do some investigation? Think of all the different kinds of all the mail protocols the server could support. Then, read up on how each of those protocols works at a low level. Once you have that information, for each protocol, connect to the server using sockets and see if the response is what you expect for that protocol type. Then you will have your answer (if you don't want to ask directly).
Come up with medium to large sized projects that you can tackle in Java. Video games, web applications, desktop applications, you name it. The easiest way I can think of for ideas is to consider applications that you use or would like to use and then roll your own. You'll hit the real problems that professional programmers have to deal with, and you can always come back here or /r/javahelp to ask questions.
When you're meeting with him, get the details directly from his computer's email program configuration.
Read Google Guava, and remove redundant utilities from your library.
Eclipse works fine for that. I spent my evening yesterday doing just that.
How?, Those messages he reads on his Microsoft Outlook, is there a way to check configurations there? ..sorry if it's a dumb question.. but this is my first java project for which I am getting paid..:)
When I use session.getStore("imap"), I get java.net.UnknownHostException: java.net.ConnectException: Connection refused: connect While if I use pop3 I get: Caused by: java.net.ConnectException: Connection refused: connect at java.net.PlainSocketImpl.socketConnect(Native Method) For SMTP : I get NO Provider for SMTP connection exception 
It says to use a log analyser, can anyone recommend me one? 
Go ask on Stackoverflow. How can I access exchange server with Java?
e.g. guava has these factorial functions http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/index-all.html#_F_
in all honestly, methinks oracle just wants to eat the golden goose rather than let it keep laying golden eggs for the whole community. In typical oracle style, they'll bleed java dry, squeezing every dollar out of it while asphyxiating it with legal maneuvering, all the while disregarding the java community entirely. I'm not surprised oracle did absolutely nothing about the exploit, even though they had sufficient warning. They are the GWB of the software industry (actually, more like the dick Cheney): cynically opportunistic and unashamedly self-serving. Sun should have GPL'ed java at the last minute, but their pride got in the way. And now, they have to live with the monster that Oracle has spawned. Sun dropped the ball big-time. It's not like what oracle is doing is in any way surprising. 
The netbeans tutorials are pretty good. You can download the development environment along with application servers with a single executable. www.netbeans.org 
http://www.oracle.com/technetwork/java/javase/7u7-relnotes-1835816.html http://www.oracle.com/technetwork/topics/security/alert-cve-2012-4681-1835715.html http://www.reddit.com/r/java/comments/yzavq/question_how_can_i_install_jre_on_windows_7_to/
http://www.reddit.com/r/java/comments/z3azv/java_7u7_fix_for_cve20124681/
thenewboston.com has a tutorials on a lot of stuff, also java. Is that what your looking for? Like videos?
gg: http://support.microsoft.com/kb/319426/en http://exchange.mvps.org/smtp_frames.htm http://stackoverflow.com/questions/1739921/are-there-any-api-to-integrate-microsoft-exchange-server-with-java-application-f 
To be more clear: the proper prevention is now to upgrade to the just-released Java 7 update 7.
related: http://www.reddit.com/r/netsec/comments/z0rkk/java_cve20124681_disabling_the_java_plugin_in_ie/
[This](http://www.youtube.com/watch?v=KkMDCCdjyW8&amp;feature=BFa&amp;list=EC84A56BC7F4A1F852) lecture series by Professor Mehran Sahami from Stanford University is amazing. If you are familiar with the basics of oop then you can skip the first 3 or 4 lectures although it is a really nice review. He explains the concepts really well.
Arrays are 0 based, so the smallest subscript is 0, and the largest 99.
Funny you should mention that. The same thing happens in /r/webdev all the time... and I think they actually did add some stuff to the sidebar to help. That's why I first checked the sidebar of /r/java before asking :P
Array elements are initialized to zero, false, or null, whatever is appropriate, when the array is declared. The question is more about, how do you refer to the first element in the array, and how do you refer to the last? They want to know if you know how java indexes its arrays. EDIT: And I see treerex has given up the answer...
Part of the reason I'm learning java is because my girlfriend is starting a CS degree. Aside from my own interest in java (which ive had for a long time) I'm learning so that I can help her out since my base programming knowledge is pretty high I'm hoping I can keep a little bit ahead of her to help her out. I know that Java has a few IDEs. If I go the netbeans route will I run in to problems when trying to help out my girlfriend if she's not on netbeans? edit: apparently at my girlfriends school they tell them all to use "dr java"... is there a reason not to use this if for the time being im relegating myself to simple tasks?
Anyone who honestly thought that Oracle would just sit back and let this vulnerability sit in the wild for up to 6 months need to think again. Certainly when it comes to Oracle's other offerings they can be more relaxed with their security patches, but in this case, it affected end users, of which there are millions. Granted those end users generally are non-fee-paying users, but to let the vulnerability sit out there for that long would damage the image of Oracle significantly.
http://seclists.org/bugtraq/2012/Aug/182 "We reported what seems to be an instance of Vuln 1 to Oracle in Apr 2012 (Issue 11). In our report describing Issue 11 we demonstrated a successful loading of a "sun.awt.SunToolkit" class by the means of a findClass method of ClassFinder class." "Vuln 2 was reported to Oracle in Apr 2012 (Issue 16)."
It's pretty ridiculous to suggest that the product with the largest willing user base of people who use it by choice, would fall.
Just type "oracle javase" in Google, besides it's always at the same (rather legible) address, just bookmark it: http://www.oracle.com/technetwork/java/javase/downloads/index.html
If it wasn't for NASA's fantastic Java applets, I would not bother about those vulnerabilities...
So someone took the diagrams that explain a bachelor's vs master's vs PHD and changed it to apply to programming with a nearly incomprehensible story?
From a security IAVA: * JDK and JRE 7 Update 6 and earlier * JDK and JRE 6 Update 34 and earlier * JDK and JRE 5.0 Update 35 and earlier * SDK and JRE 1.4.2_37 and earlier * JavaFX 2.1 and earlier
A large number of people who apply for programming jobs have zero ability to handle even basic stuff like FizzBuzz. At least certification ensures that the person has that baseline knowledge and is potentially capable of learning more. More importantly it indicates a willingness to accept the sometimes arbitrary constraints of reality and put up with certification silliness rather than relying on mostly unproveable assertions of programming competence. In other words the sort of person who will most likely be willing to adopt the company style rather than cowboy along with their own idioms. Can you fake your way through the tests? I kinda doubt it, but I'd never bet against a sufficiently determined cheat. Does it a guarantee anything? Nope, not in the slightest. But HR filters and certs aren't intended to assess technical competence beyond the basics. They're intended to screen out the unwashed masses so that technically competent people can assess the capabilities of the remainder. If bad programmers or cheats are slipping through the interviews, then you've got a problem. But filters that prevent a person with no degree, no certification and no demonstratable professional experience from getting a look in? Hardly an example of systems not working as intended when degrees and certs are so trivial to obtain.
The stolen images are a little silly. I do think this article gives credence to syntactical sugar and code re-use. I think it is also makes apparent how difficult it is to create a good and unambiguous protocol and API. As developers, we often look for new and better ways to do a certain thing, but often miss what are the pitfalls in managing this process - lost time and negative, unintended consequences. 
It's better than that; the images themselves are still hosted at the original "PhD" authors site: http://matt.might.net/articles/phd-school-in-pictures/
Make sure that when you get a response back, you are consuming the stream. There's an EntityUtils.consumeQuietly(response.getEntity()) if you don't care about the data. This bites me every year or so :) 
How about http://davmail.sourceforge.net/ ?
http://thinkinginsoftware.blogspot.com/search?q=exchange
Yes. Plus, you can get it in Kindle and epub formats: http://www.oracle.com/technetwork/java/javase/downloads/java-se-7-tutorial-2012-02-28-1536013.html
Why is this in the Java subreddit - the article doesn't even use Java?
I am, though I am full time military and father. That aside I have been doing bits (LOL) at a time. I'm interested.
Sure. I just got started with Slick2D after watching Bucky's tutorial on TheNewBoston, and I've found it to be a great way to get started.
Psh. All the real masters use System.err.format.
As a not-really-militant-person, I accept your thanks, but it's really no big deal. If anyone knew what really did, people would probably quit paying their taxes.
It was always safe to update, I believe, but the patch Oracle released is only a temporary fix. The research group that released the zero day already found a new way to break out of the Java sandbox. Go figure. Edit: Oracle, not Adobe. Derp.
Nearly every update of JavaSE from Oracle includes some sort of security updates, whether it is the regular (twice yearly?) updates or out-of-band updates like this one. You almost certainly want to accept these updates as soon as they come out, because usually once they are released, so are the technical details for the security holes they patch (meaning the bad guys are almost immediately looking for machines that are note yet updated in order to exploit). The difference in this case is that the exploit was discovered and used in the wild *before* the update is available. If anything, this makes it even *more* important to update asap, because instead of there being a theoretical possibility that the hole is being abused, it is well known that the hole is being abused. The only really good reason to delay these updates is in a corporate environment where complex java software is running that might rely on implementation details of Java that can change across updates and needs testing before updates can be applied, and even then it's probably only safe for machines on which they have strict control over what java code will run.
I'm not sure on Solaris, but on Linux the threads become lightweight child processes in the OS. You can maybe jstack the JVM process and see if you can identify which thread is the main and the corresponding OS process and then send a signal to the process from the command line with kill.
How does one join this private subreddit? 
I am VERY interested in joining this team if I may. I was actually getting on here to ask a question basically just like this! I have a huge interest in Java and Ludum Dare, and would love to help out! Please let me know if you get a private subreddit up and send me an invite!
I have a good bit of Java experience and am actually have a career as a software developer... but no games. This sounds like it could be fun side project. If you want to do this right you need to establish a revisioning mechanism (GitHub, mecurial, etc.), set up Jabber (text chat), and stick to open source / programs that are not OS dependent. How much experience do you have coding?
Good one..but sadly I am not allowed to install any third party application
Is it possible that your system clock is jumping around? long timeout = System.currentTimeMillis() + 500; while (System.currentTimeMillis() &lt; timeout) { eventPtr = OS.gdk_event_get (); if (eventPtr != 0) { break; } else { try {Thread.sleep(50);} catch (Exception ex) } }
The link from [this thread](http://www.reddit.com/r/java/comments/z5o35/new_vectors_to_java_0day_found_by_original/) mentions that the fix was simply to remove the getField and getMethod methods from the sun.awt.SunToolkit implementation - in other words they removed the immediate problem being exploited, but haven't yet fixed the underlying cause (which the research group have found other ways to access).
I have several years of programming experience in Java. I even might be able to find a few hours every week to help coding or answering questions. Sign me up. 
Go back a step and write some pseudocode, as your logic's wrong. 1. Figure out the number of quarters in the change to be given. 2. Get the value of the change amount modulus the value of a quarter (i.e. 25). 3. The value from step 2 is the remaining change to be given. Repeat the steps for smaller coin values. Also [your image link's wrong](http://i.imgur.com/M2eRY.png).
&gt; Im thinking Skype but I don't use it enough to know for sure if you can do group chat or not? Any suggestions would be helpful when we get the ball rolling! Google+ is perfect for this. The Hangouts can have up to 8 people video chatting at the same time, through the browser. A lot easier as most people will have gmail accounts (then you have a g+ account) rather than people signing up to skype.
Properly formatted code of the submission: public static void main (String args []) { int quarters = 0; int dimes = 0; int nickels =0; int pennies = 0; int num; Scanner sc = new Scanner(System.in); while (true) { System.out.print ("Give me some pennis, press 0 to stop: "); num = sc.nextInt(); if (num == 0) break; quarters = (num/25); dimes = (quarters % 1)/10; nickels = dimes % 5; pennies = nickels % 1; System.out.println ("You have" + quarters + "quarters"); System.out.println ("You have" + dimes + "dimes"); System.out.println ("You have" + nickels + "nickels"); System.out.println ("You have" + pennies + "pennies"); } } 
What type of card game are you making? I did a Texas hold'em project a few years back for a college project. Not sure I'd be any help but let me know.
I already made a very simple java game and it runs horribly. It doesn't really have any graphics at all, so I'd like to know how to get a proper framerate. Count me in.
I love the idea of a private subreddit just for new-ish Java programmers to share code. Sounds like a great idea. Invite me whenever it is up.
Thanks, I'm glad you like it!
% gives you the remainder. So if you have 90 pennies, then I can give you 3 quarters which is 75 pennies right? So, now I have 15 pennies left over. This is what you want to continue to find dimes and nickels. Notice how I said 15 pennies left over (modulus). Just do a few examples in your head and you may understand a pattern or algorithm on how to solve this. Give it another shot and post back on how you do.
I am interested and i have loads of free time coming up. Please pm me either way I'm still going to work on this
&gt; I'm getting errors stating that length and PhoneBook cannot be resolved or is not a field. This means that the array PhoneBook does not exist in your program. Did you ever instantiate PhoneBook? 
How do I do that? I thought the class name just needed to be put in the code. Also, what about length? 
Just pointing out, how you have it right now, all you do is return an empty string. You never modify or add anything to result. And other than for testing purposes, do not have System.out.println()s in the toString() method. As for the phone book issue, for it to work you need to have an array called PhoneBook Judging by the line: PhoneBook[i] = i + 1; PhoneBook appears to be an int array. Also, in that line you are changing the values stored in the array. Are you sure you want to do this in a toString method?
I'm guessing that he's trying to increment his counter, again.
Just at a glance, it looks pretty good, but I would recommend abstracting some things out of your classes. For example, look at Enemy and look at Player. They are so extremely similar in composition. You should really think about creating a super class that they both extend that contains all the location and sprite methods and variables. And then you should have a second class which has things like the health. So you get this kind of relationship: Player IS A Character Enemy IS A Character Tile IS A Entity Character IS A Entity
This won't teach you all the fundamental concepts involved, and you're missing quite a few. (Starting with "this") Since I don't know what order your teacher is addressing the topics, I don't even know where to start telling you the things you need to know. This is really not a very good place to get help with your homework. I could use some typing practice, so here's a solution using value objects in a subclass of ArrayList. public class PhoneBookEntry { private String name; private String number; public PhoneBookEntry(String name, String number) { this.name = name; this.number = number; } public String getName() { return name; } public String getNumber() { return number; } public String toString() { return name + "\t" + number; } } public class PhoneBook extends ArrayList&lt;PhoneBookEntry&gt; { public String toString() { StringBuffer result = new StringBuffer(); for(PhoneBookEntry entry : this) { result.append(entry.toString()).append("\n"); } return result.toString(); } } Stick that in two files with the right import and it might even compile. Once all the typos are out of it, it should work. By the way, teachers and professors can use the internet. If you use an answer from here, you may be in trouble for plagiarism. 
Alright. Thank you very much. I definitely agree and like that idea a lot. I will work on abstracting them out into their own sub classes that extend the super class.
I actually do like this idea, but I figured location handling would be something I want to work on after I get the collision detection working...is this a good idea, or do you think I should work on location handling and then add in the collision detection?
Hey! Good to find another PHP developer! I have plenty of experience in PHP as well, and I could also help! Any chance you have a site of your own? I'd love to see some of your work. Mine is [serym.com](http://serym.com/)
Unfortunately, it depends on what's in the file and what you want to do with it. Briefly, Streams will read any data, not just character streams. Readers wrap Streams to add character encoding. BufferedReaders allow you to read line by line instead of a block at a time. Most of the time I wind up using a BufferedReader.
Each of these classes is just an abstraction of the other. Starting from the most basic "FileInputStream" we are dealing with simply reading bytes from the file. The InputStreamReader can wrap this FileInputStream (or any InputStream) and translate that into characters. Depending on the data in the file you may want to read it as characters or bytes. The FileReader just provides convenient way of wrapping an InputStreamReader around a FileInputStream. So instead of doing something like (new InputStreamReader(new FileInputStream(new File("myfile")))) you can simply do (new FileReader("myfile")). Lastly, the BufferedReader can wrap a FileReader (InputStreamReader) and provide convenient ways to retrieve whole lines (basically looking for new line characters and returning everything up to that point. So really it depends on what data is contained within the file. If you want to read it line by line (which is common) it is probably best to read a file such as BufferedReader br = new BufferedReader(new FileReader("myfile")). If your data is characters but you are not reading on a per line basis, then using a FileReader will be sufficient. Of course you could always use a FileReader and look for new line characters yourself, but why not use BufferedReader :). And lastly if you are concerned with reading bytes of a file, you would use a FileInputStream. Hope this helps!
There are 2 axes to think about: 1. What am I reading? Binary or text? If I'm reading binary, use an InputStream. If I'm reading text, use a Reader. A Reader basically wraps an InputStream and handles the conversion from whatever encoding was used to store the text (e.g., UTF-8, ISO-8859-1, etc.) 2. What do I have? If you have a File, use a FileInputStream or FileReader. If you already have an InputStream, use an InputStreamReader. The other thing is that these things "stack". So if you have a File with some text, probably the best thing to do is to create a new BufferedReader(new FileReader(file)) BufferedReader is nice because you can read one line at a time using readLine(). BUT, there's a glitch here, which is that doing it that way doesn't set you specify how text in the file was actually encoded. So what you really need to do is: new BufferedReader(new InputStreamReader(new FileInputStream(file), "utf-8")) Hope that helps.
http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/io/Files.html#newReader%28java.io.File,%20java.nio.charset.Charset%29 http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/io/Files.html#toString%28java.io.File,%20java.nio.charset.Charset%29 http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/io/Files.html#toByteArray%28java.io.File%29
That's good for Java 6 users :) In [Java 7](http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html) there are already many convenient functions like Files.newBufferedReader, Files.readAllBytes, etc. Example: Path file = ... for (String line : Files.readAllLines(file, StandardCharsets.UTF_8)) { System.out.println(i); } 
Indeed, I'm just not personally so fond of the ``readAllLines`` method, it's neither fish nor fowl. The text files I'm interested in rarely hold interesting context on the line level, and when they do, they're arbitrarily sized and require streamed parsing.
I'd love to be a part of this, i've only made really basic games with text/swing guis. Would love to try and expand that and create something a little more complex with you guys.
I think he is trying to tweak someone else's mod. The Zombie Mod is pretty popular in Minecraft, so maybe he is trying to decompile it, edit it, and then recompile it.
Why not use the Scanner class?
Any reason why you're using Math.PI in one calculation and 3.14 in the others?
You return an array like you would anything else. If a method is defined to return an array, just return whatever array you need. Unless you've got an error in your code, it should work fine
Thank you for all the answers. I now have an understanding of what to use, when and how the different classes are suited for different things.
in your example, you would want the line return array; String[2] is the type, array is the actual object. The other lines are suspect as well, but I'm not sure what you are trying to accomplish so I can't tell you what needs to change
No. That wouldn't be allowed. If you created a string array like this: String[] returnMe = new String[2]; return returnMe; P.S. I'm using my phone, so please disregard any mistakes.
You can't return String[2] since String is a type, not a variable. I think you meant to do return array[2]; or something similar, where *array* is the name of the array you created on line 3. However you can do that either since your return type is String[], e.g. an array *of* Strings, array[2] means "item 2 of the array *array*", which is a String object, and not an array of Strings.
array[2] is actually item 3 of the array, since array indexes go 0,1,2... so in this instance it would throw an "indexOutOfBoundsException"
I think you probably need to spend a little time reading about how arrays are used before proceeding. The official Oracle tutorial is a good place to start. http://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html Looking at your code it seems like you are getting confused about the purpose of an array. An array is just a contiguous block of memory with a uniform type that you can refer to by an index. In this case, your assignment (I'm assuming this is homework) is asking you to create a new String array of size 2, and fill item 0 with the name and number from two different . You will want something more like this: String[] record = new String[2]; // create a new string array of size 2 record[0] = nameArray[index]; // assumes name array is a string array record[1] = numberArray[index].toString(); // assumes numberArray is not a primitive array return record;
Ok, gave the definition a read and I'll throw you another tip: your current lines 4 and 5 assign a new array to the objects nameArray and numberArray. What you actually want to do is assign a string to the 0 and 1 index of the object array. nameArray = new String[0] will assign a new array to the object nameArray. array[0] = name would place the string 'name' at index 0 of array
Right, I should have clarified that, I meant as in "item *n* where *n* is in 0..N-1".
Something I noticed: (4/3) returns 1. Java thinks you want integer division (which rounds down). Change it to 4.0/3.0. This is where new programmers have issues. You seem like you need practice in debugging (particularly without tools). Get a calculator out and follow the instructions in the program and print out the result of each equation, check them against each other and when they disagree you know that something unexpected occurred. By reducing your question to the line where something unexpected happens you can get faster feedback.
 It does happen inside a method but i just didn't include the method name. How do I set up this for method?
Well, I'm kinda done doing this homework assignment for you but basically, if there is a null in the array return the 'for' index otherwise return -1.
Hey, I'm about to start my comp sci degree and I was looking for something like his for a long time, I love to make games and I would LOVE to work with other people. Please message me for info
Because i was trying a bunch of different stuff to try and get the right answer. I started out with 3.14.
hey ive been messing around with programming for a little over five years(silly stuff in AHK and ti-83's) but two weeks ago i got heavy in to java and im trying to soak up as much info as i can. i want to make a game one day. so ive love to join this sub
Can anyone please explain why not? I know bugger all about this, still being in uni, but I've used Scanner class to read from file, worried it might not be a good habit to get into?
http://commons.apache.org/io/api-release/index.html?org/apache/commons/io/package-summary.html Look for DirectoryWalker
This is great but in all honesty I have little to no clue what this is saying.
It means you create a class that extends DirectoryWalker abstract class and use your implementation in order to walk a directory and handle every file/folder in it with whatever logic you could muster. Example From the API public class FileCleaner extends DirectoryWalker { public FileCleaner() { super(); } public List clean(File startDirectory) { List results = new ArrayList(); walk(startDirectory, results); return results; } protected boolean handleDirectory(File directory, int depth, Collection results) { // delete svn directories and then skip if (".svn".equals(directory.getName())) { directory.delete(); return false; } else { return true; } } protected void handleFile(File file, int depth, Collection results) { // delete file and add to list of deleted file.delete(); results.add(file); } } 
LOL...as another not-really-militant-person in the military...I concur with you completely.
It's definitely possible, but with the rapid application development frameworks, you are just able to get a lot done faster IMO. Also those languages are quite fun to write in (talking about Ruby and Python here). But if Java is your wheelhouse and you enjoy writing in it, then by all means, there's nothing wrong with it. Food for thought, check out Opinion number 8: http://programmers.blogoverflow.com/2012/08/20-controversial-programming-opinions/
Nice! I remember hearing or seeing GWT somewhere but never dug into it, thanks!
I agree - Coldfusion can lead to quality work quickly. On opinion 8: I agree with it, but I do too many languages and am spread quite thin. At the moment I actively use a lot of languages but I'm not exactly "great" at any of them. I have spent a little time with many languages - I'm "comfortable" in CF, VB.NET, C++, PHP, PL/SQL, Java, Python; but I've spent so little time on any one language that I never really get to the more advanced concepts. For example Python is the only one I can thread anything in, because it is very simplified. I have'nr spent enough time to get much past the basics with any language.
&gt;Consider who may be touching it 6 months or maybe 2 years from now. Do you want it to be you, or do you want to be able to hand it over to someone else? This is a great point I hadn't considered completely. In my case though, these websites are (primarily) my own projects and sites I build for profit on my own. In my case I'll be maintaining these, but still a valid point to ask, thank you!
Yep, PHP is ubiquitous in hosting environments. That's actually why I learned it a few years ago, hosting my own sites would be a lot cheaper than Coldfusion and I didn't have many, so I just sat down and rebuilt them in PHP lol. Prices at Linode are great! I'll have to look into that... ;)
Websphere is a complete JEE application server which means all features from the JEE spec are implemented. However, I am not a big fan of Websphere. If you decide to use a JEE app-server, I prefer JBoss.
'Bout Time. Took them long enough. who knows how many systems were compromised in the meantime.
\#0: Use Spring JDBC Template (or switch to an ORM).
Or Apache DbUtils or MyBatis.
Could you explain what those are like I'm 5?
I'm a fan of BoneCP for connection pools.
Thank you!
JDBC/DAO patterns, MVC pattern, dependency injection, threading and concurrency, java memory model. 
This needs more line breaks. &gt;Each of these classes is just an abstraction of the other. &gt;Starting from the most basic "FileInputStream" we are dealing with simply reading bytes from the file. &gt;The InputStreamReader can wrap this FileInputStream (or any InputStream) and translate that into characters. Depending on the data in the file you may want to read it as characters or bytes. &gt;The FileReader just provides convenient way of wrapping an InputStreamReader around a FileInputStream. So instead of doing something like (new InputStreamReader(new FileInputStream(new File("myfile")))) you can simply do (new FileReader("myfile")). &gt;Lastly, the BufferedReader can wrap a FileReader (InputStreamReader) and provide convenient ways to retrieve whole lines (basically looking for new line characters and returning everything up to that point. &gt;So really it depends on what data is contained within the file. &gt;If you want to read it line by line (which is common) it is probably best to read a file such as BufferedReader br = new BufferedReader(new FileReader("myfile")). &gt;If your data is characters but you are not reading on a per line basis, then using a FileReader will be sufficient. &gt;Of course you could always use a FileReader and look for new line characters yourself, but why not use BufferedReader :). &gt;And lastly if you are concerned with reading bytes of a file, you would use a FileInputStream. Hope this helps!
Closing the connection should be sufficient as long as you issued a commit/rollback. Static analysis plugins like pmd/fingbugs complain a lot about not closing each explicitly. 
&gt; once I'm done learning This should never happen, you will never know everything but you will get an understanding of what you know you don't know and this will help when you take on a new project. Here are some things I've needed over the years: [Jersey](http://jersey.java.net/nonav/documentation/latest/user-guide.html#d4e8) [Jackson](http://wiki.fasterxml.com/JacksonHome) Some type of ORM like Hibernate or ibatis. At least be able to tweak and install Tomcat or some other web container (JBoss, glassfish, etc). Maven is useful, learn to configure Jenkins CI builds, learn to use Git/Mercurial/Subversion effectively (typically SVN and one of the DVCS will suffice). [Guava](https://code.google.com/p/guava-libraries/) is incredibly useful. Java concurrent API, JMX, JMS are also very useful. And at least do a little bit of digging with JNDI since it is still in use.
I don't think there's any specific list. The scope of web development for Java is pretty huge. It's really a thing where you figure stuff out as you go along, and have to pick up new technologies as you hear about them. 
I'm sorry, but it's a *bit* hard to take software seriously if it has a website like that.
If you go the web dev route, get familiar with a few frameworks : Struts (widely used although I can't comprehend who in their right mind would choose this) Apache Wicket GWT JSF etc. Also get *very* familiar with Tomcat
I agree that Code Complete is an excellent book. Another I'd add to the list is [The Pragmatic Programmer](http://www.amazon.com/gp/product/020161622X?ie=UTF8&amp;force-full-site=1&amp;ref_=aw_bottom_links). Effective Java is good but it's really about the nuances of the Java language. It looks like you are looking for better programming practices in general. If so I'd go with the books already mentioned. 
The Pragmatic Programmer http://www.amazon.co.uk/Pragmatic-Programmer-Andrew-Hunt/dp/020161622X Has a lot of similar stuff to Code Complete 2 but not quite as dense so makes a good primer.
Some people still like NetBeans
I realize that your list isn't ordered, but I'd put version control and Maven at the top of that list. I really can't stress how much better Maven has made life in an organization where we use IntelliJ, Eclipse, and Netbeans.
I think deep nesting of conditionals is a worse sin than having many method exit points. So I just basically write what you did there. When the exits are not returns but exceptions instead, I consider it part of *Design By Contract*.
That's why I said "JDBC/DAO patterns". 
What are you actually doing? It might be that what you can do is separate your object out into many objects that each have one well defined job. So you have a Rule1CheckingObject that checks Rule1 and either returns NOT_OK or delegates to the next one, which is a Rule2CheckingObject which ..... That way you can then change the composition of the rules by simply changing the order that the objects are chained together, and it means every object is really easy to unit test...
A non-ironic suggestion to use OSGi?
App frameworks, especially Spring. IMO, talk about knowledge of this or that language is kinda outdated. Current state of play: Frameworks.
I guess a first question would be why this has to be in code at all. Is there some way you can express it as configuration, in a rule language, or in some other way externally to the code? Knowing what the rules are and what the rules refer to would help here.
Wow. That sounds really complicated, but I sort of followed it. I'll give that a shot, thanks for the help.
I think I understand what you're saying, I'll check out that tutorial, thanks!
Things that you should know for *any* kind of Java programming: * What generics erasure is * The implications of arrays being covariant * The relationship between .equals() and .hashcode()
i know this thanks to the study guide by kath seirra for SCJP
Excellent! You are well ahead of the vast majority of Java programmers, then.
The application of a rule can be seen as a cross-cutting concern, and there are several ways of dealing with that. One approach is called AOP (Aspect Oriented Programming), using tools like [AspectJ](http://www.eclipse.org/aspectj/doc/next/progguide/starting-aspectj.html), where you add "advice" to a method which can decide whether the method call should proceed or abort. The rule application is rolled up into a "pointcut" definition. Another approach is the Decorator Pattern. This will require extracting an interface and then wrapping the call: public interface TransferOperation { public Status transfer(Params params); } public interface ActualTransferOperation { public Status transfer(Params params) { // default behavior } } public void Rule1Application implements TransferOperation { private TransferOperation realOperation; public Rule1Application(TransferOperation realOperation) { this.realOperation = realOperation; } public Status transfer(Params params) { if(Rule1) then return Status.NOT_OK; return realOperation.transfer(params); } } etc, etc. new Rule1Application( new Rule2Application( new Rule3Application( new RealTransferOperation())); These can be hand-spun, or you can use containers like Spring to automate.
When you deal with oracle there is only one promise, and that is you won't get what you expect. I'm surprised some people still can't come to the conclusion for themselves that it's either oracles way or the highway. The author needs to save himself some time and move on.
I'm not a big fan of AspectJ to be honest. However, Decorator is a pattern that is definitely useful in this case. What do you think about the maintenance of Decorators in the long run? 'Coz you might have many different decorators for different business cases and you might not be able to categorize them well? At least my experience is on this way..
Yeah, but usually problem happens when State's have these rules in them :S
They're asking: When you have an array with 100 elements, how do you reference the first value? How do you reference the last one? Hth. Btw, you might also consider r/javabeginners and r/javahelp.
A couple things, first, you probably want [GC logging](http://java.sun.com/developer/technicalArticles/Programming/GCPortal/). This is VERBOSE! Very very verbose. This bascially records GC every X seconds or something like that. Then you want to analyze the logs. I have known developers that can do so without charting it, but that really requires understanding those numbers. And one of them once ran into a strange pattern that was only seen through graphing it. Now, to graph it, checkout this [stackoverflow question](http://stackoverflow.com/questions/541832/know-of-any-java-garbage-collection-log-analysis-tools). HPJmeter is the greatest in my opinion, but not was great for non HP JVMs. GCViewer is good, but more limited. Just try all the mentioned tools. Look for spikes, look at perm gen, look for gradual slopes that never go down, etc. Now, correlating what you found to what is happening. Also use [VisualVM](http://visualvm.java.net/). This isn't as great for in depth memory issues, but still a great tool to use. This is a very difficult task tracking down and understanding and then tuning the JVM memory. And figuring out what is leaking. Once you have data, ask more questions. 
Without knowing more details about the app - it might not actually be a leak. But if it is, then http://plumbr.eu is definitely a tool for the job. 
http://www.reddit.com/r/java/comments/z2loh/help_needed_in_a_highly_ambiguous_project/
Another vote for code complete, but the best option is to join a well-developed open source project and start writing patches. Developers with way more experience than you will mercilessly ream you a new one if you write crappily formatted code. I've contributed to several FOSS projects and they have all made me a much better coder. 
The easiest way for me to analyze OutOfMemory is loading heap dumps taken when error occurs. You can tell JVM to dump it by setting -XX:+HeapDumpOnOutOfMemoryError option. Then you can load the file in some analysis tool and leak suspect should be located. Good article: http://www.rallydev.com/engblog/2011/09/20/outofmemoryerror-fun-with-heap-dump-analysis
PragProg is the most important programming book since GoF Design Patterns. A decade old and still very fresh. 
Here's a quick list to browse through: http://www.sitepoint.com/30-creative-commons-sources/
&gt; Effective Java QFT. Try for the 2nd edition if you can (as it has 20 or so more sections)
This is fascinating. My first thoughts are: 1. Does it flag cases where SQL is vulnerable to injection attacks? I suppose this would be any instance where an unescaped SQL string literal is concatenated into the statement, rather than going through PreparedStatement or something similar. SQL injection attacks have been the top OWASP vulnerability for years now. 2. (Wow, are people doing this much? I tend to go through my ORM.) 3. How does this compare with ordinary unit testing? After seeing the annotations in the production code that seem to describe expected values, it seems a few unit tests are in order. Alvar would seem to have an advantage, though, in terms of checking against an actual schema. 
This is awesome, now if I could get this for netbeans I would be in business.
&gt; 1) Does it flag cases where SQL is vulnerable to injection attacks? FindBugs is pretty good at this, actually! Alvor doesn't seem to be doing that. It doesn't care where the SQL comes from. If it can't figure it out, it just skips the statement. &gt; 2) (Wow, are people doing this much? I tend to go through my ORM.) Well, there's always 10-year old legacy code &gt; 3) How does this compare with ordinary unit testing? In its current state, I can only recommend this plugin for ad-hoc analyses. It's no way near being automated. Look at it as being an enhancement to ordinary TDD. Note also my remark for your point 2. This tool is especially useful for legacy code. Nevertheless, a nice tool. A 5min setup helped me find 23 obvious bugs in a large application
What if I parsed a result set into a linked list of hash maps that record every cell in every row by mapping the column name to the value for a given cell (result set .getObject())? Would that let me .close() the result set and have it removed from memory when GC runs, minus the object whose reference I maintain in a hashmap?
Yes. Although I havent understood why you would need the linked list, I'll treat it as an implementation detail. The crux however is that you must parse the ResultSet, extract data and create new objects that are to be cached. This would ensure that the ResultSet instances arent dominated by the references from the cache, and hence make them eligible for GC. Note that although closing the ResultSet may free up resources, a GC cycle will not reclaim the ResultSet instance (and other objects referenced), if the ResultSet instance is reachable from a live object. This is why you must parse the ResultSet instance and cache the data, instead of caching it for a certain duration.
Thanks for the great reply, and for the FindBugs recommendation.
As maddmike said, you spelled the method wrong. To add to his answer, I find it good practice to add the annotation "@Override" above methods you are overwriting so you know when you didn't get any part of the method right.
Very well explained. I thank you sir.
Thanks all! I will test when I get home.
You also have to be extremely careful with limiting what can be imported or used, or otherwise someone could just write code to delete your entire filesystem on the server :D.
Why this here's the Java ranch, partner! Whatsamatter, ya got corn in yer ears or somethin?
ughhh
It's their schtick, been doing it for a long time and have helped a lot of people. Just make sure you use your real name on their forums. Now giddy up.
I believe for a situation like this, a LinkedList might be the best approach. An ArrayList would be faster for searching purposes, but the massive number of removals needed would be better handled with a LinkedList (merely changing a few references rather than shifting a bunch of values in an array).
Its their quirky way of doing things. The site is actually not bad.
One approach might be to use a [Trie](http://en.wikipedia.org/wiki/Trie), which can be implemented as a Map&lt;String, Map&gt;. As you read the dictionary, you build up a map of prefix substrings which lead up to the word. Then, as you accept guesses, you can walk the tree and remove huge chunks of it.
Yeah i had the pro spring 2.5 I think. Not a good read. Always stick to the in action series these days. 
Really? I've found it quite useful but I'm a Spring newbie so I don't have much to compare to. I don't think there's really a hard and fast rule about which publishers' books are better. You can only really rely on reviews for individual books. 
I was just thinking of getting Head First Design Patterns yesterday. Have you read it yet? I'm not really sure what I'm looking for, something to help with laying out programs/classes, would this book be helpful for that?
Read head first design patterns to understand solutions to common programming problems. Also have a look at clean code, I'm a big fan of that book. 
I'm still pretty new to it all so could you give an example of what you mean by "common programming problems"?
Have a look at design patterns on wikipedia. http://en.wikipedia.org/wiki/Software_design_pattern 
Ah Ok, I misunderstood. I don't think I own any '... in action' books so I'll make sure I check them out next time I'm looking for a book on something.
Doing real continuous delivery would be great but the business just seems to push back on it constantly. We don't have enough control of our environments unfortunatley being a big business with a managed data centre.
Is Continuous Delivery a good book? I was looking to read up on the subject and this seems like very good candidate.
Because it is an integral part of how java works. It would be like asking why you can't turn off the alternator on a car.
Why can't we pause the GC for short bursts? Or even just add in an indication that we want it to wait if it can?
You could compute a hash map of letters to words ahead of time. Then every turn by a player would allow constant time access to a list of words that contain that letter. This data could already be saved and read in like the words from your .txt file.
Nothing beats a real book on the desk. Most come with epub PDF and kindle versions.
Well, you should be closing PreparedStatements when you no longer need them, since an active connection is always going to be bound to the PreparedStatement. At the same time, you do not want to be creating multiple PreparedStatement instances for the same SQL query. So, provided that you are executing the same query repeatedly over a short duration, you can afford to close the PreparedStatement after you are done with it.
Why do you need it turned off?
Most likely you do not need to turn it off. But every once in a while you feel the urge when the full GC is pausing in compaction phase and you just know (or think you know) that there is no need for this. EDITED: fixed the confusing first sentence.
Yea but those other programmers know stuff like Hibernate Spring MVC framework Tomcat, JBoss, Weblogic...etc ant, marven Logging Frameworks Junit among other I am just puzzled by the complexity that is the java-sphere , I just want a way to get a handle on this Monster. Books and courses exist but i haven't found something for this as good as when i was preparing for the SCJP exam passing that gave me a sense of fulfillment and accommplishment. Studying this from a book is just plain boring. thats why im preparing for the SCWCD exam next. 
Most likely you do not need garbage collection? Like, most applications don't need to allocation and de-allocate memory on a regular basis? Exception the whole.... Object model? I think I need to lay off the sauce, I can't be reading this right. **update** -- ok, so what you mean is that you know there is no need for compaction at a given moment, but you would prefer to put this off -- which is what it will be. Compaction is coming. Prepare thyself.
This is an interesting article, but huh? "Garbage collection is simulating a computer with an infinite amount of memory." Garbage collection does not allow you to allocate an infinite amount of memory, nor simulate it. That would be a caching to disk, which garbage collection does not do. If it were, I wouldn't end up tweaking memory settings in java, which I find annoying and confusing. I'm happy for someone to try and explain this better.
Hah, maven is a blessing and a curse. In particular, its apparent hostility to the idea of checking in dependencies seems strange to me, in particular; it makes it hard to have an old, repeatable build. Either the build is flaky, or your 'source' is spread between the source control system and the organizational maven proxy. This is a step backwards. I don't think maven's strength is that it's a 'best practice' of any sort, it's merely a codified *standard practice*. If you don't mind the way it does things, you gain speed through compliance with its assumptions, and you get to make use of plugins that also comply. Step out of its sweet spot, though, and it's black magic. The vagaries of trying to get the various plugins to do what you want (I'm looking at you, 'assembly' plugin) just feels like pain. &lt;please&gt; &lt;ohgodplease/&gt; &lt;version&gt;0.1.5&lt;/version&gt; &lt;!-- version 0.1.6 includes jars that screw up jetty --&gt; &lt;/please&gt;
I would like proof that maven does not suck.
I might have to look more into Gradle. I haven't bothered because we don't make use of Groovy, though I understand that it isn't a good reason.
I have not used maven for anything serious, since it has never impressed me. It's dependency management is great (with Java, and dependency management is great though) but I don't care for it's build process. Working with an ever growing application, makes me reconsider the benefit of having a standardized build system though. So I'm taking another look into it.
Sorry for the confusing response, I intended to write: "Most likely you do not need to turn it off".
Requirement on their forums, not sure why they require it honestly.
&gt; Are binaries source? Source control systems have never excelled at dependency management either. I meant 'source' in the broadest sense of 'stuff I need to get this thing built'. (Some organizations consider the compiler part of this.) What I'd really like, for the flakier dependencies that change repositories every six to twelve months, is a way of telling maven to download the dependency/pom/etc. into the project's directory (e.g. ${project.home}/depdendencies). Identical in structure to my development machine's maven repo, just on a per-project basis.
The performance of the garbage collector has come *a long way* since the early days of Java. Huge sweeping GCs are much less frequent than they used to be. If you really feel you don't need GC but want OOP, why not use C++?
Maven itself is built with Maven, for one.
Can I join the subreddit?
If you came into Java 1.1 from a C background, you were used to doing memory allocation (or lack of it) manually, and would probably have been quite annoyed that Java intrudes on your space. (Also, things like games: Once the data structures are loaded, you can arguably prevent any new memory from ever being allocated, therefore it might be helpful to turn off a blocking GC.)
&gt; Why doesn't my screwdriver work with nails? Seriously, use the right tool for the job. Garbage collection is one of the key points of the JVM. If you want to manage memory use C or C++. 
Because as the author implies; the whole point of a GC is that you can always allocate stuff, and never worry about freeing stuff. It's basically presenting to you an apparently limitless resource. Behind the scenes, it then runs around cleaning up all the stuff that you allocated but no longer need.
Seeing as you sound like you're just starting out, I'd say Netbeans - Eclipse is extremely configurable and extensible, but as an out-the-box experience I always found that Netbeans was always easier to get up and running with. Don't rule out [IntelliJ Idea](http://www.jetbrains.com/idea/free_java_ide.html) either - the Community edition is free, and Idea certainly used to be very easy to work with.
So would anyone add any other "must have" free tools to [this list](http://thoughtsforbeans.blogspot.com/2009/10/development-environment.html)? Anything we always install and use frequently in Java development?
The trick is to make sure you follow maven's conventions, not try to make maven fit your conventions. It's painful at first, but future developers on your project will thank you. 
How about that, Statement already has methods for doing batches of updates. Decreased the number of sql connections by a factor of ten.
Um, not it isn't the build is now temporally and referentially transparent, all artifacts that are needed to build thing X are located in the repo. U have maven mind sickness. How many of your projects from even a year or two ago are still buildable directly from the tree? What about 10? If you care about maintaining software, every needed to recreate it should be under version control. ---- If maven were pure, it would push source poms to the repo and another system would build those src poms to generate bin poms. There is no way for me to prove with the current system that the artifacts I am pulling in can in fact be rebuilt.
Oh come on. Be honest, CVS and SVN never had a problem even with 10s or 100s of megabytes of jar files. This is disingenuous at best.
Why do "flammable" and "inflammable" mean the same thing?
The problem with maven is that 1. it doesn't compose 2. every plugin defines its own semantics/language The only thing it has going for it is a bloated consistent AST using XML. Nothing in Maven enforces regularity, only by strict stewardship of the maintainers. The problem maven solves is not difficult and it does it in such a pompous way while encouraging a cargo cult attitude around maintaining 3rd party dependencies. Just look @ the post below by [vermin](http://www.reddit.com/r/java/comments/zghma/maven_does_not_suck_but_the_maven_docs_do/c64hkbz). 
Just like taking a sync lock, it would be nice to force that a GC cannot happen inside of a block. I have only used hotspot, but I am sure some of the other JVMs have options for pausing the gc. 
Here are some reasons: 1. Within the scope of the function, the parameter values will not be allowed to change. This is a common practice to enforce the notion that input parameters values should not change. Similar arguments can be made to make local variables final too, when you can. Immutability is good. 2. You need to pass the parameter into an inner class. Since inner classes can only close over final variables, you are forced to make the parameter final.
&gt; It does prevent you from accidentally reassigning in the body of the &gt; method That's the only reason. It's just a safety blanket. Some people find comfort in using the compiler keep them honest. &gt; but that puts implementation details into the method header Meh. No tool will show the final outside of the class source. You have to be inside the method to see it, at which point it's all implementation detail. It's less effort than creating another variable just to close over. 
And then every usage of a given jar across all your org's projects is repeated in your SCM. Doesn't that smell bad to you? 
Most likely because the point of GC is that you don't have to think about it (much) and that it probably is better at doing its job than if programmers gave it a bunch of hints. If GC is causing performance grief the first stop is trying to tweak the JVM startup parameters. Over time JVM GC has gotten increasingly better. If we created a bunch of GC hints in code, then we limit our code from taking full advantage of newer JVM versions. The JVM is not appropriate for certain types of development: Real-time systems, processor-heavy gaming, etc. Virtual machines in general are probably not appropriate for these same tasks.
Actually, you can. I've just recently read an article about removing GC from OpenJDK. It's opensource, it is easy to edit. The article was on a site which is down at the moment. I'll post a link once (if) it comes back up. But there were little past the initial idea: the guy donwloaded vanilla OpenJDK sources, found the place where GC is called and commented it out. Upd: the [link](http://translate.google.com/translate?langpair=ru|en&amp;u=http://habrahabr.ru/post/142447/) Be warned, that's an robotic translation from Russian. Quite a good one, though... Upd2: code sections formating is damaged a bit. You may want to look at the original [post](http://habrahabr.ru/post/142447/) for the code. But as I said earlier, there is nothing out of ordinary there.
If you're using CVS or Subversion, you're doing it wrong. If you're using a DSCM like you should be, you will find that DSCMs have a hard time with big blobs, for the simple reason that cloning a repository involves cloning its entire history, including every single version of every single blob it has ever contained. DSCMs have many massive advantages, but keeping blobs efficiently isn't one of them.
*lol* I don't mind a little honest misunderstanding now and then, but there's really no need to be a cock about it. The really terrible idea is storing project dependencies in an organizational repository mirror. What I'm describing is using maven to download my dependencies, which is much easier than trying to source them manually, and then checking them into the project's source tree. This is very similar to what you describe, using a repository mirror: as with a mirror, all the developers use the same versions of the dependencies, even when they're moved or become unavailable on the net. In fact, it is a repository mirror. But there are benefits: 1. I don't need to arrange separate hosting, backup, and developer access for the mirror 1. I can easily send someone a snapshot of the source, as a mere collection of files, without worrying about granting them access to my company's intranet-hosted mirror 1. I'm not at risk of someone modifying dependencies on the mirror and breaking old builds Basically, from the perspective of dependencies, using a mirror is like having two separate, unsynchronized version control systems, with half the build assets in one, and half in the other. Whee! This is an unnecessary and inconvenient step backwards from the idea of a truly repeatable build. Mirrors make sense as private repositories for the results of my build, for consumption by other internal projects, but not for third-party dependencies.
Hmm, I'm not sure I understand this correctly, but are you using the same PreparedStatement instance for different queries? If so, you might be leaking memory (temporarily) - a PreparedStatement represents a compiled form of a singular SQL query; you'll need multiple PreparedStatements instances to execute different SQL queries. So if you're reassigning a PreparedStatement instance to a new one retrieved from `Connection.prepareStatement(...)`, then the original one will not be closed and may linger around consuming memory until a GC cycle comes around. In any case, it looks like you've more or less reached a point where you know the subset of the application responsible for the OOME. If you need more help, PM me.
I'd buy this in 1995, maybe. In any case, this is an argument for more capable SCMs, not for inappropriately using a parallel, unsynchronized system to store half the project's build assets in the name of saving hard drive space.
Do you mean compiler or IDE?
If you dive into programming trying to make games before knowing the language, you're gonna have a bad time.
IDE. Yeah, should have been clear about that.
Have you read the [Sonatype book, Maven by Example](http://www.sonatype.com/Support/Books)? I think it's a shame that those books are not prominently featured on the Maven home/docs page...
For some reason, I think this is the cleanest explanation, but I think the authors focus on allocation of memory is misplaced. Garbage collection doesn't free you from worrying about the amount of memory, so it's not "as-if" memory was infinite. It does free you from tracking what has been allocated and what has not, and when to deallocate etc... Am I still missing the point?
&gt; In any serious dev environment, a "corporate" repository ... might be a bit infrastructure heavy The corporate repository actually worsens build repeatability. Repos aren't versioned; if anyone replaces or modifies a dependency, then old projects in the scm may not build. From a dependency perspective, having a corporate cache that your build relies on is like having some of your project's build assets in a parallel version control system that's not mechanically synchronized to the one you're using for the rest.
But it's not apparently limitless in any practical sense. The goal is not to appear to have a limitless resource, otherwise, again, JVMs and other systems would attempt to appear limitless. The goal is to free yourself from worrying about memory in general. *time passes....* In re-reading the article, it looks like he's just trying to make the point that you can never trust finalizers to run. Ok, I get that. That's a worthwhile point. 
Do you mean JavaScript? If so, that isn't the same thing as java. JavaScript is mainly used as a scripting languages in web pages.
Which SCM do you use?
&gt; I've had to deal with projects where a bunch of jars have been checked into the version control system without any metadata Those are good points. I've been there - and caused it - myself, ant and jars checked into the project's lib folder with no naming convention. Yes, if anything's checked into the source control, it should have a full repository structure with all the metadata, definitely. You know, it occurs to me I could get approximately what I want by launching maven with project-specific environment variable to define repo location. Though that would screw up multi-project builds, etc.
Plain old svn.
I use BlueJ when I program Java simply because it was used by a classmate of mine on the school system and it didn't get uninstalled. I have tried other ones, like JCreator and Eclipse, but I couldn't seem to get them to work for me so I stayed with what I knew worked. --- **TL;DR** I agree with your Prof, use BlueJ.
After using Eclipse for years and years, I tried Intellij a couple months ago and now I'll never look back. The refactoring tools alone make it worthwhile. 
You can't debug if your class names are obfuscated. a.b.c throws NullPointerException is not helpful to anyone.
GC already doesn't really run unless it really needs to :) And you can fine-tune these urgency thresholds via JVM startup parameters.
Why do you need that? What is the use-case that requires the absence of GC activity?
it is just as suited. If you need to use your parameter, you need it non-null. I would actually use assert there, as R1cket says. Less code, clearer code. But, why would Sonar tell you not to throw a NPE? Because it is expected to be thrown by the runtime, and not the developer! if a machine monitors your code in production, it might classify this differently. 
I find it much easier to read and code along with a PDF than a "real" book.
I've found ProGuard to be weakly - but only weakly - helpful for making code run faster. Since it still outputs Java bytecode it can only have a limited effect on the native code generation and optimization performed by the JIT compiler. Bytecode optimization is good, but it's no substitute for programmer ingenuity and for a competent, optimizing JVM. However, ProGuard also makes code significantly smaller, partly due to the bytecode optimization, inlining and dead code removal, and partly due to the obfuscation using identifier names which are shorter and more repetitive (the repetition lets the names be reused in the class file constant pool), and it makes initial classloading faster. So it's good. There are some catches though. Optimization and obfuscation are dramatic whole-program operations that can inline methods, merge or remove classes, and flatten packages. This can interfere with serialization, reflection, resource files, and other features which depend on the original class names. ProGuard has options to fix up all of these features, but it's something to be aware of. If you let ProGuard use obfuscation (it does it by default), stack traces become obfuscated. You can deal with this using the `-printmapping` option. The generated map file lists all the original and obfuscated identifiers, which you can use with the ReTrace feature to deobfuscate a stack trace. Better to avoid obfuscation for debug builds, though. As to why the standard compiler can't do these things, mostly it's not a good thing for the compiler to do. E.g., the compiler is able to recompile source files individually while keeping class files that are already up to date; but this isn't compatible with the way optimization can change the class structure. So it would always have to be a utility separate to the compiler, and I guess Sun never got around to writing it. It's also quite slow: fully optimizing with ProGuard can stretch a 30-second build process to five minutes.
BTW: Guava can abbreviate this code to, see [Preconditions](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Preconditions.html) checkNotNull(name,"name must not be null); // to throw NPE or checkArgument(name != null, "name must not be null"); // to throw IAE
[It took me a while, but at the bottom of this comment I finally figured that out.](http://www.reddit.com/r/java/comments/zg4sf/why_cant_you_turn_off_the_garbage_collection_in/c64l3ki) The article has a really clunky way of saying it, and I think it actually misrepresents the *purpose* of gc, but the authors point about finalizers which was what the majority of the article was about -- was dead on.
If Maven were pure. What? Seriously. Pay attention, read a book or two, and install Nexus.
Yes, this is such a bad idea that every serious development organization uses a repository manager (either Artifactory or Nexus). Almost every concern you outline is addressed by... ...oh seriously, who cares about your schlerotic mind. If you haven't figured it out by now, there's little change you will. 
I highly recommend them too, I wrote them.
Gradle doesn't kick Maven or Ant in the balls, but it is another alternative. I've been using Gradle on 1/2 of my new projects, it has some advantages over Maven, but there are things I mess when I develop in Gradle. It's a wash.
That's one concern, but don't discount it based on that alone. I've seen the most complex Maven builds in the world, they almost always end up with some level of inscrutable customization.
That is a shame, isn't it?
We use Proguard primarily for: * Obfuscating our applet code before we ship it to the customer * Repackaging third-party libraries into an überjar * Removing dead code as a result of the third-party repackaging We use lots of libraries like log4j, Spring, etc., but we only use a small fraction of their functionality. Proguard's dead code removal lets us repackage the classes we use into an uberjar, and eliminate the classes we don't. If we were to package them all into one big Jar with something like the maven shade plugin instead, our Jar file would end up massive. When we added proguard optimization, our applet jar shrank to 40% of its original size, which saved us and our customers time and money. Some things to watch out for though: * You have to tell Proguard about any classes that you reference by name (e.g. `Class.forName("...")`) so that they're not repackaged, otherwise you'll get a NoClassDefFoundError at runtime. * Be careful when Proguard warns about missing classes. Make sure that you know you won't need them at runtime before you tell Proguard to ignore them. * If you're targeting a JVM version other than the one that you're running proguard on (e.g. you're targeting 1.4 but building on a 1.6 JVM) make sure you make that explicit to Proguard otherwise you may not be able to run the code. Edit: If you're obfuscating, and you want to make use of ReTrace to inspect stack traces, ensure you include the line number attributes, which are removed by default.
&gt; The dependencies are versioned and checksummed, changing a non snapshot artifact in your repo is tantamount to checking in a change to a "tags" folder in SVN. This is the response I was hoping someone would make. Some people here seem to be worried that the mirror is going to change an artifact and break the build. No, artifacts don't change and if everything works with a particular version of the dependencies then it will always work for that version. 
How is it vs. http://code.google.com/p/jarjar/?
IntelliJ is great for learning Java because it forces you to write the code and as a lot of code insight and analysis tools built in.
Wow. Now I will delete those PDFs off my computer based on your attitude in this thread. 
I'm devastated. Totally and completely devastated, someone's going to delete free PDFs off of a computer. Please, no, for the love of God, don't delete that poor PDF that you downloaded for free.
I agree with you with that having all dependencies, in source form or binary if you don't have access to source, check-ed in with the source control is a good way to ensure re-buildability. Using the nexus repository to address the problem you raise, is in effect using it as a parallel source/binary control management system... it's fine if you maintain the diligence in securing or backing it up as you would your source control system. Heaven help you if you're repo goes down without backups and you are supporting a multi-million dollar software that relies on third-party libraries which are no longer around. The point is it's another system to backup/maintain. With that said, I think there's a cultural, perhaps generational shift here. Whether the above is a big deal or not depends on what type of software you're building. Those of us who have worked in enterprise software would appreciate tightly controlling the artifacts. That type of software has a lifetime of decades and have a lot of proprietary libraries which you can't download anymore. Those of us who are developing new software, primarily using oss and who haven't hit the sunset phase of the software lifecycle may not see the value of checking in dependent 3rd party libraries vs grabbing it from a repo. Especially now we're in the cloud age, where everything is accessible. 
Slf4J has always worked well for me. 
The jdk logger is awful. Or was awful the last time I looked. Is it easy to log to a jms queue via jdk logger? 
http://xkcd.com/927/
We did. It's called log4j. If that's broken, fix it. I'm not changing loggers.
slf4j/logback is good enough.
you apparently don't know the definition of "anything" then...try using your own advice and Google'ing it.
The API doesn't guarantee it, as you'll find out if you ever use DB2.
One of the advantages to something like Slf4J is that a library provider can utilize it internally and give the user of the library the option of using whatever concrete logging system they want. Solr does this and it's a boon for integrators. 
log4j works, we have never ever needed to switch from log4j so we use it directly. We have no need for any api on top of it. 
LogBack is the self proclaimed successor to Log4j. FTFU. 
I think you can write your own (or use someone else's) log handlers for that stuff.
Personally, I just use JUL. It has it's weaknesses, but honestly, it does what I need it to: It logs stuff. There's not a hell of a lot more that I really need. It's a little clumsy, but it's included in Java, so I deal.
We *did* standardize a logging API. It's called `java.util.logging`. Just because every self-important clown wants to make their own API doesn't mean we don't already have a perfectly good standard. And on the same note, making a new standard won't make all those self-important clowns get back in line and stop trying to reinvent the wheel because they think it's cool. Just shut up, grow up, and use `java.util.logging`. Edit: Or use a facade over `java.util.logging`, if you want. For instance, the upcoming Scala 2.10 adds a fancy macro and string interpolation system, which is practically begging someone to make a fancy logging facade that uses it. Imagine saying something like `fine"I am doing foo with a ${bar}."` instead. Just as long as the actual log messages end up as calls to a `java.util.logging.Logger`.
My only gripe is that I find the logging statements quite verbose with java.util.logging.Logger, but then that's because I check if (log.isLoggable...) before calling the statement, and always use log.logp (apart from log.entering and log.exiting). For webapps the logger works fine though. I'm not sure how great it is for non-webb apps though, maybe that's where people's complaints come from?
&gt; Why not have a "System.nogc()" that "suggests" that the gc shouldn't run Of course, this suggestion would only last the duration of the method invocation. As soon as nogc() returns, the JVM is free to do perform garbage collections again. ;)
Spring is an existing standard and it is as open as EE6. Personally, the Spring way makes a lot more sense to me. I can't count how many projects I've bootstrapped using roo to generate my jpa and mvc layers. 
&gt; Video games (frame updates) Does it really help to move the non-deterministic latency in between frame updates, as opposed to during frame updates? Particularly if the game is double-buffered (which I think pretty much all games do nowadays)?
You're conflating changing the parameter, with changing the objected pointed to by the parameter. &gt; The way Java passes parameters already prevents change of identity. final does nothing to preserve the state of the parameter. The way Java passes things in calls neither protects you from changing the parameter, nor does it protect you from changing the object pointed to by the parameter. It does "protect you" (in the sense that it makes it impossible to) change the argument that was used when the method was invoked, though it does not protect you form changing the objected pointed to by the argument. &gt; It does prevent you from accidentally reassigning in the body of the method, This is correct. &gt; but with good program structure and habits (Mostly applicable here is that methods should be short, and never longer than your screen) you should be able to remember your parameter names without any trouble, This is technically correct, but similarly you could argue: "Why should I enable compiler warnings? With good program structure and habits, you shouldn't be writing any code that generates warnings anyway!" "final", like warnings, are there in case you mess up. &gt; and it does nothing to protect you from invoking a method that will change its state. This is correct, assuming the second "it" refers to the objected pointed to by the parameter. "final" also does nothing to protect you from directly changing the state of the object, without resorting involving method invocations.
No. Because we will inevitably fuck it up. Some awesome third-party variants might crop up though.
It seems like there's been a major push by Oracle (through developer evangelists) to convert people to Java EE. EE6 is basically Spring, but without the enormous community that Spring has. Personally, I see no reason to ditch Spring for something that bills itself as an equivalent, without the rest of the Spring ecosystem.
Having versions of artifacts is different from being under version control. 
I've found vendor neutrality to be a paradoxical thing. I've written Spring applications that can be deployed on numerous application servers with only container specific XML files required to get it to run. On the other hand, I've dealt with Java EE (1.5) applications hoplessly tied to Weblogic. So, in theory, Spring is a single vendor, and Java EE is vendor neutral, but why do I feel vendor lock-in more with the vendor neutral product?
I would recommend Java EE 6 over Spring 3. They are fierce competitors, and both have their strong and weak points while at the same time having more in common than anyone dares to admit, but the Java EE 6 model is just that bit cleaner and more well thought out. Spring has always been a big advocate of XML. I really don't like how they tried to push me into the lie that my code would have no dependencies on Spring, while simultaneously asking me to rewrite over 50% of my code into their own proprietary XML. Explaining this lie with "it's not code, it's configuration" only made me like them less. What I particularly like about Java EE are the contextual injections. Spring likes to give you the impression that they invented DI (something which is not true), but it's this particular area where Java EE has far surpassed Spring. I also think the bean types (@Stateless, @Stateful, @Singleton) and the scopes (besides the well known Servlet scopes, @ViewScoped, @ConversationScoped) are more powerful and easier to work with. The trend for the last couple of years have been that Spring is getting fatter and more complicated with each release, while Java EE has been getting slimmer, simpler and more lightweight. It has to be seen if this trend continues, but everything points in that direction.
Who says he would have to bear the brunt of maintaining those millions of lines himself? After all, Oracle definitely did something the community didn't like with Hudson, and so now we have Jenkins. MySQL got forked off into MariaDB. (Hmm, recurring theme - Oracle) It's not like the doomsday scenario you're describing hasn't happened before, and communities who care enough about the product manage to find a way.
TIL people actually use something other than log4j.
Well, he did clearly say "you", which seemed to indicate you as a user can do whatever you want. A better wording might be to say you can hope the community forks the project when -you- have a beef with Spring about something. With Java EE there are already a dozen of implementations to choose from. I don't have to hope for any community to pick up anything, it's already there. Just as there are multiple C implementations, multiple C++ implementations, etc. Of course, I might still disagree at some point with the direction the Java EE -spec- is heading. If that were to happen, there's still a chance some implementation offers a vendor specific solution for my issue, but ultimately if it's really about the general direction I would have to switch anyway to something else (Spring, .NET, whatever). But there are far more alternatives with Java EE in any case. With Spring, both the "spec" (the design and architectural philosophy) as well as the one and one implementation are firmly controlled by VMWare. I'm not sure if you have been paying attention, but last time I looked VMWare was a "big evil enterprise" just like Oracle, and Spring's hero Rod Johnson got a butload of money and then bailed ship a while after. 
tutorials on Java (beginner, intermediate, and game dev categories) http://thenewboston.org/tutorials.php
I don't think anyone's suggesting EE5 for new work. Why the straw man? I'm not taking a side in the EE6 v Spring debate, don't really have the experience to honestly. Just trying to keep the debate honest, is all.
&gt; With Java EE there are already a dozen of implementations to choose from. This is precisely the problem I have with Java EE. It's only a standard, and vendors routinely extend the standard in incompatible ways. For example, the application I'm currently working on is hopelessly tied to Weblogic. That really hurts me more than being hoplessly tied to Spring. Yes, the "standard" and implementation of Spring may be controlled by VMWare, but who cares? Lots of open source libraries and applications I use are controlled by one evil organization or another. The nice thing about Spring is that it is not tied to any application server, so you can use it pretty much anywhere. It's this reason alone that I turned to Spring in the first place, and the reason I've avoided Java EE when I can.
Java EE 6 for me. I like how it all ties together and how each standard supports and works with others (e.g. CDI + JSF2/EJB, Validator + JPA, etc.). I only use spring when working on an existing spring-based projects. Even then, I use a lot of Java EE 6 standards (JSF2, Validator, JPA2, etc.).
I hate his tutorials, tried to watch it
The main tools my department uses are Struts 2, Hibernate, JQuery, SiteMesh. Should we consider switching to Spring (instead of Struts)?
Struts 2 compares pretty favorably to Spring Web MVC, if action frameworks are your thing. I think Spring is more popular, so that might be a reason to switch, if you want to be in the "in" crowd.
Didn't mean to come off as a jerk BTW. Those books have serious issues, we're going to be spending some time updating them over the next few months. If you have any feedback let me know. Also, the Better Builds book was something of a mistake. Any book with that many authors turns into a disaster to try to write, and the awful thing about that book for me is that I ghostwrote portions of it (but I'm not supposed to say anything about that :-) ) - but it still isn't very clear.
I agree with this. Spring Framework filled a need that J2EE didn't fill until Java EE 6. Here is a fun article Oracle put together where they tackle porting PetClinic from [Spring to Java EE 6](http://www.oracle.com/technetwork/articles/java/springtojavaee-522240.html) It uses NetBeans which has some really neat features for Java EE6 development including Database Reverse Engineering (which I know Spring Roo does too but at least this doesn't clutter up the application with AspectJ) 
Try these: http://bit.ly/QsQctO
So is Java EE. You can add just JSF to Tomcat or you can go with Open EJB. You do not have to use a full Java EE web server but there are many to choose from if you want.
The thing is... the effort came quite late, when there was an already growing set of logging libraries and each main project had already picked one, with log4j being the de-facto standard for several years, but also with other projects using JCL. I think the best approach is slf4j, as it does quite well in unifying logging libs, in the not-so-uncommon case of using libraries/bundles with different logging libs.
You need to walk before you run. Learn Java, then learn how to develop games. There's a few books in Java games, but they're quite badly dated. In addition game dev is quite large. 3D or 2D? Software or hardware rendering... Oracle has some okay tutorials at http://docs.oracle.com/javase/tutorial/ . I would personally say the first three 'trails' "Covering the Basics" are essential knowledge (but it's not the best resource to learn). Whether you need an actual book I don't know. I got one mostly for reference. I partly learned in a University course, partly in the Oracle stuff and other online sites. Avoid the 'for Dummies' though in my view, it's not a good series. The 'in 24 hours / 30 days' series are okay (although the time scale is clearly impractical - I've sort of tried it for other languages). With that said, I know of 1.5 Java Game dev books and the website is down. Personally it helped me a bit. http://fivedots.coe.psu.ac.th/~ad/ is the author's site, but it's down right now. I bought [Pro Java 6 3D Game Development](http://www.amazon.co.uk/Pro-Java-Game-Development-ebook/dp/B001CSM17O/ref=sr_1_1?ie=UTF8&amp;qid=1347067373&amp;sr=8-1). I say 1.5 because his earlier book covers some different and some overlapping topics. These (and any others) will assume you know how to program Java though. You can't do it with a single book. There's a ton of general game design books which are useful once you can develop software in a language. Also even C-based graphics books are good for JOGL because it's essentially the same code (it's a Java binding of the C library).
Ouch, watch out for the java ee astroturfing going on here. My opinion is that spring is still easier to work with and more flexible. The information I found on the net seems to confirm this.
LogBack was created by the original authors of Log4J.Therefore, they can claim that legitimately.
I beg to differ. More and more libraries are moving to slf4j as it allows the final user to decide what is the logging framework he wants to use. Moreover, if you never had conflicts with various version of Log4J, plus those installed in you app server, you should consider yourself as VERY lucky.
We use Struts 2 as well in most of our web apps. You can still use spring for DI and Transaction management (for DB stuff). We use a lot of Spring JDBC for database stuff which I would personally choose Hibernate for vs. Spring JDBC. We are also looking at Spring LDAP vs. [Unboundid](https://www.unboundid.com/products/ldapsdk/) for some applications. I have no experience with SiteMesh but JQuery is great for Javascript and/or Ajax (Spring doesn't help you out much here AFAIK). **TLDR**: You can use Spring along with Struts 2, Hibernate, JQuery (and maybe SiteMesh).
Astroturfing? Which comments in particular are suspect?
Parts of Spring do work fine with JSF. Some people even use Spring MVC with JSF but it is redundant. You can use jQuery directly with JSF as well. I find in most circumstances I do not need it.
I didn't know better builds was written by committee. that probably explains why it was so hard to get a cohesive picture from it. if felt like three trips through a forest focusing on the branches and leaves. To be completely honest I haven't read the Sonatype books in quite a while. I skimmed through them when I saw them first several years ago, and page through the contents every so often, but I spent a year doing nothing but converting our build system from Ant to Maven, so I didn't really need a reference or tutorial like that when I ran across it. But it was orders of magnitude more coherent than better builds which is why I point those out to everyone who wants to learn more about Maven. I suppose I could brush up on how to create plugins, that's something I never really got very far into. I think I might suggest pulling that out of the complete reference into a hacker's guide; but then you couldn't call it a "complete reference" anymore I suppose. I just think that plugin authors are going to be a different type of user of Maven - one who is more concerned with extending the capabilities of Maven in a very specific way rather than using Maven to get a relatively high level job done. I just don't think you can give plugin authoring the level of treatment it deserves when you limit it to a chapter in a book that most of the readers aren't going to need or care about. But giving it more room by moving it to a different book may allow you to shed some light on different types of plugins, different languages like Ant and Groovy, and the testing facilities provided by different frameworks (or is there one built in?). I for one would really like some information on the tradeoffs of creating one-off plugins for a project; where to build it, where to host it, how to reference it. Because, despite Maven's claim to the contrary, sometimes you do need just a little bit of imperative logic in your build process. ( You should see the last project in my current reactor... ) Or even more important to cover is how plugins interact with each other. I wanted to improve the SCM and SVN plugins, but I have no idea how they work together. Now if we are going to criticize Maven itself, I have this list.... but what it really comes down to though is realizing that Maven is not a replacement for Ant... Maven is a replacement for your *build tool*. Let Maven take care of the build concerns - compiling, testing, reporting, packaging, and distribution (I'm not quite decided on whether or not interaction with the SCM falls under the purview of the build tool, but Maven did it badly in any case). For other concerns, like deployment, you should use the more appropriate tool Maybe it's Ant. I have a couple of jython scripts for wsadmin that I would never consider hoisting into the POM because deployment to the servers is not a build concern. And for the record, I didn't detect any jerkiness.
Spring is all about its parts. But, using jQuery directly gives far better control. For example, using the DataTables plugin, you an easily get a table with filters, sorting pagination with one JavaScript call. Just as simple as JSF. However, it is somewhat complicated to do lazy server side pagination using offset/count in SQL on large datasets. The standard DataModel does not provide that capability, but fortunately I was able to [snag some code](http://anydoby.com/jblog/en//45) to do it. However, I have not yet figured out how to use a4j to prevent the intial SQL query on page load. I want an empty table to start, and let AJAX load the data in the background. I know there must be some combination of facelet tags that will let me do this, but I have yet to figure it out. On the other hand, all of this is trivial and transparent with jQuery and the DataTables plugin and Spring Web MVC. Worse, in a Java EE 5 environment with servlet spec 2.5, I'm capped out at JSF 1.2. I can use Spring Web MVC 3 without a hitch.
Interesting! I wonder how well supported this usage outside of Java EE? For example, Akka advertises its [Spring integration](http://doc.akka.io/docs/akka-modules/1.3.1/modules/spring.html) and [Spring Data](http://www.springsource.org/spring-data/hadoop) supports Hadoop. On the other hand, Google Guice works in a lot of places Spring does, but it is clearly a second class citizen because it's not as widely used as Spring.
While I generally agree with the sentiment I cannot in this case so I will play devil's advocate: By your reasoning anyone who uses a calculator should understand how an adder circuit works in hardware. So do you understand how an adder is implemented in hardware with transistors? Do you advocate anyone who uses a calculator understand this? At some point the amount of garbage I want to know needs to be limited. Yes, I've done JDBC and ODBC programming, but that does not mean that someone who hasn't but who wants to store data must first do JDBC programming before they can use Hibernate. The amount of useful information which can be stored in working memory is limited, so why clutter it with JDBC's API?
Use a newer version of the JDK.
I'm using Geany. Linux says I have OpenJDK Java 7 Runtime installed. Is that the latest?
You are importing class files that were compiled with a newer version of java that you are trying to compile with now. This can be because you have some classes compiled with an IDE which have uses a newer version of java than your command line. Or it could be that you are using a library you downloaded that was compiled for a newer version of java than you have on your command line. The simple solution is to insure your command line version of java to the latest. Java compilers and JVMs are backwards compatible, so you don't have to worry about the other way around. You can tell which version you have on the command line by running "java -version"
It says I'm using IcedTea6 1.11.4, but I remember uninstalling that and replacing it with OpenJDK Java 7. How do I update it in my command line?
Which command did you try using here? Did you do "java filename" or "javac filename"? I believe you're trying to do "java filename", I will warn you that you need to re-compile the code first. To do so, first do "javac filename" (this will compile the code), then try "java filename". If you ARE trying to compile, you should be using "javac filename", then run with "java filename"
How do I update it for my command line?
Do you... know me? Or you just figured out my name? EDIT: Seriously, most people just think my username is a Patrick Bateman reference. Also, thanks for the link... not entirely sure what to do with it.
java.util.logging?
Ah ok, that makes sense! Then how would I be able to return the sum in the main method? Or is this a bad example? 
For starters, you have not put anything inside your main method (in-between line 5 opening bracket and line 7 closing bracket). to make it run I would: 1) delete lines 7 and 8 2) change line 14 to read: System.out.println(number1+number2);
I wanted to try and make new methods other than the standard public static void main(String[] args){ } Would you know of any other examples? 
for your second problem check here: http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html
The Spring documentation is vastly superior to EE6. The Spring community is also significantly larger. Good place I like to start gauging popularity lately is StackOverflow. So many times has StackOverflow solved my problems in minutes where I could have spun my wheels for hours!!
I think the "always" part of the rule is probably overreaching. I probably didn't explain myself very well, but I didn't mean to suggest that you can't often make good use of a tool without understanding what it's actually doing behind the scenes. I do think that in the long run though, especially in the programming world, it will often pay off to have that knowledge anyway, if not for any other reason that unless you work at some hipster startup you'll probably get stuck updating some nasty looking legacy code and be stuck trying to figure out what it's doing.
You can create a method: http://docs.oracle.com/javase/tutorial/java/javaOO/methods.html
I don't know if you've figured it out already but if you want it to output the sum of the two just put System.out.println(number1 + number2); at the end of your addition method and when you call the method out in the main method it'll just use the code EDIT: I mess around with it and found something that works: import java.util.Scanner; public class Main { public static void main(String[] args) { Addition(); } public static int Addition() { Scanner sc = new Scanner(System.in); System.out.println("give 2 numbers"); int number1 = sc.nextInt(); int number2 = sc.nextInt(); System.out.println(number1 + number2); return 0; } } So just a little explanation of what I changed: If you want to call in a method, just say MethodName(); and it'll call it in. This is an integer method so it expects a return value, which I set to 0. I'm a beginner too so I'm not sure why it would be anything other than 0. Sorry if I'm unclear, or haven't explained something well enough, I'm not a very good explainer. 
&gt; I couldn't figure out a way to create something similar to alert() in other languages. It basically creates a pop up alerting the user of something. The simplest way, I think, would be to use [javax.swing.JOptionPane](http://docs.oracle.com/javase/6/docs/api/javax/swing/JOptionPane.html): JOptionPane.showMessageDialog(null, "Your message here. "); === &gt; I couldn't figure out how to get a box to appear for user input Again, I think the most beginner friendly way to do this is with JOptionPane: String input = JOptionPane.showInputDialog(null, "Your prompt here: "); System.out.println("The user entered: " + input); === &gt; I have completely no clue how to create vars. I tried to use var random = Math.floor(Math.random()*52+1); Java is strongly typed, meaning that you have to explicitly declare the type of variable (e.g. integer, floating point number, String, Object, etc.). === &gt; I tried using int and that came up with some errors. That's probably because the [Math.floor()](http://docs.oracle.com/javase/6/docs/api/java/lang/Math.html#floor\(double\)) method returns a `double`, not an `int`. The compiler won't let you assign a double value to an integer variable due to the loss of precision that may occur. If you're OK with that loss of precision (losing the fractional part of the number, for example), then you can cast the double as an integer: int random = (int)Math.floor(Math.random()*52+1); 
If you click through the link you can find the download of that book as a website / some html files: [http://www.mindviewinc.com/Books/downloads.html](http://www.mindviewinc.com/Books/downloads.html) 
Thanks! That definitely helped
Breaking code up into discrete units which perform tasks is a good thing - that's why you'd make a method for it. Hence why you'd return the result of the addition, and why it would return something other than 0. Breaking down further, a method that adds numbers together shouldn't read them in - those tasks are different. Of course once you remove the reading code you're left with very little - this makes sense, addition is a relatively simple operation so it's easy to do. You're learning though, so don't stress about it - keep the code neat and understandable and you'll save yourself many difficulties in the future. Any line that you cannot explain the existence of should probably be rethought.
alternatively, as I just discovered from below, you could just have the return value as return number1 + number2; and then print the value of the Addition method in the Main method
Hi, the problem is that only things inside the main method will be run by your computer. So, in your main method, put System.out.println(Addition()); and that should work. 
I'm currently reading Core Java 2 Volume 1 - Fundamentals, by Horstmann and Cornell. I started out with thenewboston tutorials, but I became frustrated with how slow paced they are. Then I moved on to oracle tutorials, which were more helpful, but I felt information was not organized clearly. The book I mentioned, though, is very thorough, and provides good example code. It's also a little bit out-dated, but I haven't had any difficulties with this aspect yet. 
IDE? Eclipse. Although it's the only one I've used.
I'm aware of that. Snapshots have time stamps. Release builds are created once. Why do these binaries need to be in version control? Nexus can enforce that you only upload a release version once (and this is the default.) 
Not a problem - in C the return code of the main program was used to indicate if the program was successful or not, perhaps you read that somewhere and it confused you.
I'm not sure exactly what you mean/want, but I'm guessing the answer will include threads somewhere
Hopefully one day we can also trace back the SpringSource and VMware employees to the many pro-Spring comments that we have seen through the years.
The problem is that Roo leaves its ugly scaffolding behind. To bootstrap I much prefer Forge, which generates the project structure for you without leaving any trace of Forge code behind.
&gt;The nice thing about Spring is that it is not tied to any application server, so you can use it pretty much anywhere. Isn't that the same as saying Java EE is not tied to any particular JRE?
So it *again* boils down to a political problem, not a technical one. Somehow in your company "they" have claimed ownership over Java EE, but haven't done the same for Spring.
Right. So every developer in favor of whatever you are also in favor with is an honest person, and every developer in favor of whatever you are not in favor with is an astroturfer?
&gt;Good place I like to start gauging popularity lately is StackOverflow As it happens to be, StackOverflow is one of the best places to get a JSF answer. Now is JSF part of Java EE or Spring? As to the popularity numbers on SO: JSF - 15k Spring MVC - 6k Just saying...
&gt;It doesn't appear to me that they'd have such a need to involve themselves in unethical astroturfing, with them having built the community around their product on free and voluntary usage. Pffff.... maybe they toned it down a little recently, but this practice used to be the bread and butter of SpringSource for a long time. How do you think this community was build in the first place? This "voluntary usage" was given more than a little push by systematically bashing Java EE in talks and blogs and of course offering Spring as the alternative for all the evil that was in Java EE according to them. People rather often do research by Googling around and reading blogs. If they encounter a single word more than a couple of times and hear it being praised, then that's what most of them will invariably end up using. SpringSource made damn sure that the word about Spring was out there, long before Sun discovered this. And "free"... don't you for a second think that SpringSource wasn't in the game for the money and that Rod Johnson didn't get rich. &gt;I'm in no way, shape or form paid to publicly advocate either Oracle's or VMWare's products, nor am I part of any organized public advocacy group for them. Glad to hear that, the same holds for me.
+1 to Java EE having to do better at the security front. The declarative model itself works well. The simple `@RolesAllowed`, and `isUserInRole` etc by themselves work. But this is only half of the equation. The other half concerns the actual security modules, which in Java EE are vendor (e.g. JBoss, Glassfish, etc) specific. Those by themselves do work as well, but they are different for every container. The sad thing is that Java EE does provide a standardized SPI for these: JASPIC, but it's barely being used. There is activity in this area, so not all hope is lost e.g. there's work being done for the Java Identity API (see http://jcp.org/en/jsr/detail?id=351).
Of course it's a political problem, with technical consequences. IT has standardized on Weblogic 10.3.2 as the application container that we are allowed to deploy in production. We are not allowed to deploy random app servers. I think this is because of a package deal in licensing and support with the Oracle database. Not my department. Unfortunately, the Java EE version we are capable of running is tied to the app server. The Spring JARs can easily be slipped into the EAR and is oblivious to the app server version. IT doesn't care what is in the EAR, only where we put it. EDIT: Haha, you've given me another reason to like Spring better. I don't have to deal with politics.
Download it and change your path
Of course, that's why we were able to migrate our apps from 1.4.2 to 1.5. It's all Java SE at the bottom, and Sun/Oracle have gone to great lengths to make the Java SE backwards compatible. The code can certainly be stuck at Weblogic, because we are not depending on Java SE *only* but also Java EE, and Java EE is hardly free of proprietary vendor extensions in practice, both in the extensive configuration we have of CMT on the one hand and on the use of proprietary WebLogic Portal (oh god, why) libraries on the other. And not only that, even if *our* application were able to move forward, because Java EE is tied to the container, *everyone else* would have to be able to move their apps as well, otherwise IT would have to maintain multiple application servers vendors/versions, which I'm sure they'd be *happy* to do. So, for a variety of technical and practical reasons, just swapping out application containers is hardly trivial compared to swaping out JREs. On the other hand, I can introduce Spring 3, which is also proprietary but not tied to the container, independent of the Java EE version and only dependent on the Java SE version. It's really a lot more complicated than you are making out.
What "pure" Java EE alternatives are there to JSF? JSF is a component oriented framework, and while the "h" namespace exists, you *really* don't want to use JSF like you would use Struts or Struts 2. That is a recipe for a bad time. Use JSF and embrace server side components, or use another web framework.
Does it really matter? If Spring learns from Java EE, and Java EE learns from Spring, aren't we all better for it? Competition is good. Embrace it, and stop whining about "we did it first!!!!" and instead focus on moving Java EE forward and out. In this case, Spring does have the edge, because Spring is vendor agnostic and doesn't *need* Java EE, playing happily with alternatives such as Akka or Hadoop. Weld can theoretically be used this way. Why not make that integration work better instead of pushing Glassfish?
Spring 3 has grown out of control with dependencies. With Spring 2 it was a few jars, now with Spring 3 using Ivy/Maven I get like 20 jars and many unresolved dependencies that have to be excluded (like BEA and WebSphere jars, since I don't want their junk in my code). Two of my projects I am not moving to Spring 3 and staying with 2 for now until I find a better way, as there is a lot of pushback on adding so many new dependencies. I am starting to look into JavaEE 6 as a way to separate myself from Spring.... I used to love Spring a few years ago.
&gt;IT doesn't care what is in the EAR, only where we put it. This is so wrong...
not really related to your problem, and obviously you solved it, just for the sake of programming practice I can recommend http://codingbat.com/java 
&gt;because Java EE is tied to the container, everyone else would have to be able to move their apps as well, otherwise IT would have to maintain multiple application servers vendors/versions, which I'm sure they'd be happy to do. 1. Run 1 app per container instance. 2. Run container instances in virtual machines (Xen, VMWare, ...) 3. IT doesn't maintain a (Java) container. At most they restart it. To them a Java EE container is a Java application and nothing else. &gt;It's really a lot more complicated than you are making out. I think YOU are the one making things more complicated. We are able to upgrade the JBoss AS that we have in production with exactly the same ease as we upgrade any single jar that goes into a .war or .ear. Both kind of upgrades follow a straightforward trajectory from a DEV staging, to a BETA staging to a pre-LIVE staging, to the actual live servers. It hardly matters what we put in our deployment pipeline. The scripts that we use (among others Chef and cfengine) handle it just fine. It sounds like you or your organization has fallen into the traditional pitfall where there's an all powerful IT department whose only job is maintaining software they themselves do not understand. OF COURSE, they refuse upgrade requests in that situation, since they are most likely in a "it runs, don't touch"-mode. Their job has degraded to just refusing everything, and refusing even the most senior developers and engineers access to the live system and live logs. Am I close? To make matters even worse, you've also fallen into the trap of deploying multiple totally independent apps to a single AS. An agile team that **knows** all the bits and pieces of the software that's going into production and has **thoroughly** tested it, is not afraid in the least to upgrade the AS. Just like you seemingly aren't afraid to upgrade your Spring jars. Your organization has clearly given the wrong people the wrong responsibilities. You blame Java EE for that, but ultimately it's their stupidity, not Java EE's.
&gt;I am the lead developer. I really feel for you. If that's your title, then YOU should have the responsibility to decide what the version of the JRE and AS is that's going to be installed on the target server for the application you are responsible for. If your application is more like a module in a large platform, then of course you probably need to negotiate with the lead developers of other modules that make up that platform (if any), depending on how the communication between module happens. If it's remote and binary EJB communication, you have less freedom, and if it's REST there's (a lot) more freedom. In NO WAY should a grumpy IT department pre-install some AS and allow you to only deliver .wars or .ears and nothing else. I've seen organizations doing that, and it always leads to massive overruns on budget, failed IT projects and what have you. It's more typical for large enterprises to fall into this trap, but it doesn't have to happen. I've worked at very large organizations that had indeed originally been bitten by this, realized their folly, and restructured to prevent this. Also, places like Google, Twitter, Apple and Facebook obviously have huge IT installations. Do any of them work like this? Indeed, don't think so.
Since you have a direct link to God, can you make the Nexus repo sort artifact versions correctly. You guys built the whole system yet still managed to fuck this up. 
Nice real world example.
Two words for any JSF developer looking at StackOverflow: BalusC The number of hours his answers have saved me over the years is frightening.
I am quite happy with just choosing the JRE version. I don't *care* about the application server, and I don't *want* to care about the application server. Java EE forces me to care, and that is why I have a natural resistance to it. If I can hand that responsibility off to IT, and they merely give me the key to bounce the application, that's more than enough "freedom" for me. There are a number of other applications that operate in this environment, and we all operate on the same app server *vendor* and *version*. This is less work for IT to manage, and for the business to get licenses and support. If this means I have to work with WebLogic 10.3.2, that's fine by me. The only loss to me is that I don't get EE 6, but that's hardly a loss, because I can use Spring 3. In the end, I take it as my job responsibility to make the apps that I work on on focus on the business they are supposed to be doing, and application servers are mere trivialities to me. A means to an end. If my software depends on a particular version of WebLogic (or JBoss, or whatever), then I believe I have failed in my job. Financial transactions don't depend on Java EE (except, I do want my CMT). This is why I like DI, because it allows me to wrap interactions with the "real world" behind external interfaces. The same software can be run in an app server or as components in a BPM. That's why I first started to use Spring, for the DI. And, then for Spring Web MVC. I've been evaluating JSF, but I grew up on Struts, so the component model doesn't really do it for me. You can tell me that I can do JSF like Struts, but really, you can't. So, am I sad that I can't use the latest and greatest JSF 2? Nah. And I've had no problems with budget, cost or time overruns, when it comes to having IT manage this. My problems have been almost *entirely* people and team organization problems on the application side. So, why should I care about the application server again?
We're not running every app on the same application server. That would be dumb. We are running many culstered instances of the same application server *vendor* and *version*. That makes it easier from a business and managment perspective. I find it funny that you mock my company's organization and are trying to make me feel bad that I can't control the application servers, and that I am somehow "crippled" because I can't muck around with WebLogic in production. This is actually one thing I *love* about where I work (and what I hated about the smaller places where I worked before). I don't want to mess with WebLogic. It's painful enough that I have to manage the development server. I don't care about the application server. I'm paid to write software, not play around with application server configuration. Why would I want to change that? 
Performance-wise there's not that much difference between JSF 2 and Wicket, and they are only similar in that they are both component frameworks. Beyond that, JSF and Wicket are completely different. JSF is driven by XML through Facelet tags and embedded references to managed beans, while Wicket is driven by pure HTML and a backing Page object. JSF is about composing XML, while Wicket is about composing objects. This means that Wicket requires two representations be maintained, in HTML and in an object graph. This can be seen as a point for JSF, although working with objects instead of beans+XML is kind of nice, if you like OOP.
&gt;It's painful enough that I have to manage the development server. I don't care about the application server. Wait, what!? What on earth is the difference between a development server and an application server? You are hopefully not such a person who develops on Tomcat and then deploys on WebLogic, are you?
Your are right. They are adding the ability to do View scope in the @Named bean. Sorry to cause confusion. This means there will not be much reason to use @Managed beans in the future.
I see it as entirely opinion. I would argue that this is not a case of illegal use of the null object, it's a case of an invalid argument being passed, which happens to be the null value. If there were multiple values which `name` was not allowed to be, I believe you should simply check for those invalid values and throw an `IllegalArgumentException` if any of them were the case, rather than special-case the `null` value. So I consider this the same - even though there is only one value which `name` is not allowed to be, the key idea is that we're checking to see that name's value is legal, not that we're doing something bad with a null pointer (because we aren't making use of it at all; we're rejecting it as invalid input). Still, I wouldn't put up a fight if a project's standard was to throw a NullPointerException. It's not worth arguing against established standards; but it is worth establishing your own standards for a project, first and foremost based on your beliefs (and logic) regardless of what other people are doing.
The thing is that i'm the java developer on the team, i don't make the flash content i just implement it, if we use FX i will have to do all the work haha thank anyway i'll check it out anyway
I don't see this discussion going anywhere, but my 2 cents: banuday17 you seem to attach some magical meaning to an "application server", but in reality the term is ill defined. In Java EE development you don't treat Java EE like on OS when you're developing specifically against the APIs that make up Java EE. Piece by piece, Java EE APIs have counter parts in Spring. Spring Core can be matched to CDI and EJB, Spring MVC to JSF, Spring Web Services to JAX-RS, etc. You can include all Java EE jars inside a war that you deploy to Tomcat (TomEE essentially does this). You can also copy all Spring jars to the lib folder of Tomcat. Both actions do not change the essential meaning or functionality of those jars. &gt;I care about the Spring JARs like I would Boost libraries if I were writing a C++ application. I don't care as much about the operating system libraries only except for compatiblity. But why do you keep comparing Java EE to the operating system and Spring to your libraries that you directly use? This is an artificial difference that blinds you into seeing the technical similarities. If I develop a Java EE application that uses say JSF, then I care about the JSF jars just like I would care about the Boost libraries if I were writing that C++ application. Why would I think of them as an OS? It's the thing I'm directly working with, directly calling the functionality from and walking through with a debugger if something goes wrong. The **only** difference is that the Java EE default model is to have the jars on the server by default, so you can do small deploys. You can consider those deploys delta deploys if you wish. Instead of shipping the same Mojarra and Hibernate, etc jars every time, they are cached on the server and I only deploy my application logic. &gt;Is it WebLogic 10.3.2, is it JBoss? I don't know. I don't care! That's because you are a Spring user and don't use much or any of the Java EE APIs that are in WebLogic or JBoss. But that DOESN'T mean that nobody cares about that. If you are a Java EE developer, you care. And in that situation a developer can easily ship a specific version of the AS as part of the application. For a Java EE developer it really is *wrong* to have an operations guy decide about the version of JSF, when all this operations guy has is some cursory knowledge comparable to knowing what the Gnome libraries are, but knowing nothing about its API, or internal workings.
Well a while back I started learning some on my own from random Java websites. Now I'm majoring in Computer Science and actually **need** to learn Java now, so I am actually buckling down and learning for this CompSci class I am taking. The textbook we have for this class is superb. It's called Building Java Programs by Stuart Reges and Marty Stepp (ISBN-13: 978-0-609-181-3) I have to say though, tutorials and guides and forums on the internet seem to help me the most though once you learn the basics.
Yeah I knew something wasn't right about that. I guess I don't properly understand what makes things static or non-static and how to use them properly. Could you try to explain how I should go about doing this the right way? If it's a long explanation maybe a summary or just point to where I could find the right answer? I want to become really good at Java so I'm really interested in this. OFF TO GOOGLE!
Why do SUM, DIFF, DIV, and MULT exist? Those are used only to hold an answer to a very specific operation in a method. Why not just "return (X +Y)" instead of "return(SUM)"? If you do need to hold those values for some reason (within the method), declare it locally. For something simple like this, it isn't a big deal. But in a bigger application, stuff like that leads to things not being thread-safe really quickly (ie. imagine this were a singleton class - only 1 instance exists so if 2 threads called getSum at the same time, one might get the wrong answer). Also, and some people are more strict about this than others, but typically when you see an attribute with an all CAPS name, it's a public static final (the Java near-equivalent of a constant). That's just a common style I see that Java itself has used from the beginning. Glad to see another CompSci-er joining the ranks. When hiring folks, I tend to value the CompSci background over other IT degrees. Good luck and have fun!
I made some edits; https://gist.github.com/3681798
Thank you for the advice! I changed those things you mentioned! Those are very valid points that I didn't think about. Also I will remember the rule about names of constants.
That looks a lot more efficient but I don't understand a lot of it :( haha I don't yet know when to use ~~**private** and **public** and~~ **final** and I don't know how to use **this**. I don't understand: new AutoCalc().read().print(); I think I almost understand what you are doing with **%d** and **%n** but I will have to stare at it for another 20 minutes. I also need to better understand: public AutoCalc read() { while(true) { try { System.out.print("Input first number: "); x = scanner.nextInt(); System.out.print("Input second number: "); y = scanner.nextInt(); System.out.println(); return this; } catch (InputMismatchException | NoSuchElementException e) { System.out.println("Thats not a number...or something"); } } return this; }
This actually seems close to what I need, but from what I'm able to glimpse, the capturing is done from the linux shell, while my boss wants a GUI within another Java project to grab the stream (and livestream). Nonetheless this is a step forward. Many thanks!
Personally I'd use `first` and `second` as the variable names, because that's what you always refer to them in the text. It's a little better and more descriptive of what you're doing. Other than that I broad agree with the changes made by others. Regarding making it more OOP based, I'd say it was not an efficient way of solving this problem - non-OOP != evil ;) - but you will need to learn about classes and objects for future Java programming.
I'm a little rusty on how to do that in Ubuntu. It used to have to do with setting which java you wanted to use on your system by using java-alternative to set which one to set the java link to.
http://codingbat.com/java You can start there. I found this a couple of days ago.
&gt;I don't yet know when to use private and public and final and I don't know how to use this. * The simplest rule of thumb for beginners is that a variable should be *private*. Use getters and setters for instance variables, it makes **side effects** more obvious. Only use *protected* when you need the variable in subclasses you make, using inheritance. * Methods should also be *private*, but you will need a method to be *public* to use them from other classes, a common occurrence in larger programs. Essentially make everything private until you find an explicit reason to change it. Some might find issue with this, but I find it much better for teaching beginners to write better quality code. &gt; new AutoCalc().read().print(); * This is odd. I would just call read(); and then print(); on the next line, and make those method definitions *private* since they're all contained in the same class.
 * Think about it in terms of real world objects, say a **car**. A car is an object right? So we need to represent with a **class**. This allows us to **instantiate** (bring into existence) the car. * But the car can't do anything, it needs **methods** to perform actions. Accelerating, Braking, Turn Signals, Shifting, etc, these are all your methods you would need to write. Methods are actions. * Your **variables** would be information *about* the car. How fast you're going, the make and model, etc.
Thanks I saw that, looks good!
&gt; Good for you Yes! Good for me! &gt; but do realize Spring is following Java EE here. That is like saying to anyone who buys an iPhone "Uh, you realize Apple didn't invent the touchscreen right?" &gt; Without Java EE, you would still have to write everything in XML in Spring today. We will never know, but I highly doubt that. The shift was already happening and I believe was inevitable. I know of few developers who didn't bitch and complain to no end anytime they had to deal with mounds upon mounds of XML config files well before the change. But really, like banuday17 said, does it really matter? Both are proven, popular, and powerful technologies. We all benefit from a little competition!
I understand how hard it is to understand and what OO means, but here is a little helper: whenever you have a method you want to take care of your actions and you're passing in some parameters like "addCitzenship(person, citizenship)", try to think about which one of your parameters is actually THE object and then convert: addCitizenship(person, citizenship); becomes Person person = new Person(); person.addCitizenship(citizenship); that's a really abstract way of thinking about OO, but it took me some practice as well to understand what it means. I keep telling people that if you are passing in the same parameter over and over again, you might wanna consider to think about if it's an object and then make your methods part of your object: public boolean isPersonMarried(person) { ... } converted into OO -&gt; person.isMarried() { ... } 
That all makes sense. Thanks. The other confusing parts for me are interfaces and constructs. Also invoking methods/constructs/interfaces and passing arguments between them really gets me confused. But I guess that's OOP in a nutshell.
I have to say that's kind of confusing (not you but the theory) but I will keep studying it. Thanks for the help!
Always add access specifiers, in this case public. If you haven't used FindBugs yet it would be helpful. Rename the methods to sum, multiply, etc. "get" is a pseudo reserved (by convention) for getters in java, your methods are not getters. Don't need the parenthesis on the returns. There is no need to store the result in a variable before returning. Members should be lower case, and final, in the case of x and y. Look at the java source for examples of formatting. 
Create an AutoCalc object and use it's instance variables and methods. Also, break it up into two classes, AutoCalc to do the calculations and a runner class. This way you can create a junit class to test your AutoCalc class. See https://gist.github.com/3682476
For featured speakers do you mean the keynotes or the sessions? The keynotes are always boring long winded spoon feeding affairs for people who haven't been paying attention to the news for a year or more. Nothing truly surprising ever happens there. It's why James Gosling's keynote was always so fun--it was the only one with interesting new stuff in it. On the other hand, the keynotes are well attended and, if you are one of those people who hasn't been paying attention to what's going on in the Java community, probably informative. The good speakers will be at the sessions. It the same person is speaking at a keynote and a session, go to the session instead (unless you were unaware that Java 8 will have lambdas, JavaFX is now open source, Oracle now ships a MacOS X Java 7 runtime, etc.) The sessions are entirely a mixed bag. Some are introductory, some are "What's new with XYZ technology", some are sales pitches (to be honest). There are also always some excellent technical sessions. Crazy Bob Lee's [References](http://www.parleys.com/#st=5&amp;id=2657&amp;sl=0) talk last year was a standout for me but there were a number of other talks (David Holmes' Fork/Join talk, Zero Turnaround guy's two talks, Jan Lahoda's API evolution talk) and hallway/beer conversations that were really good. If you ware working on technologies deployed on the JVM, Java or otherwise, and you haven't been to JavaOne and have the chance you should probably go. You'll learn more than enough to make it not a wasted trip. Whether you go every year, unless you have a specific objective in attending, maybe not.
Add real composition. Interfaces are composition by contract, why not just give us actual implementations??? The vast majority of other maintained languages has this and it has not resulted in death and fire.
While perhaps the best book for more experienced Java programmers, I don't think it's that good book for someone struggling with the basics. Haven't been reading beginners' Java books for a while, but I've heard some good things about Head First Java. That might be a better choice.
You have public AutoCalc print() { .... } Shouldn't you return something? Or am I missing something?
As has been pointed out you can use jQuery directly with JSF. A similar argument would be to say there is better control using JavaScript directly instead of jQuery for more control. The problem is you cannot not be as productive as some one who uses jQuery with just JavaScript and you cannot be as productive using just jQuery when so much more is offered with JSF.
If you are actually good at it, you should be able find a job in NYC in the $100-150k range. The market is pretty strong so it wouldn't take more than a month or two. Our housing market is pretty insane though. Visit /r/NYC and check the sidebar to get an idea. If you live a little outside Manhattan a nice 2BR in a good neighborhood should be doable.
just saw this in the news - average rent in SF is $3,500. NYC is not far behind. Keep that in mind when negotiating a salary.
My goal is to get my foot in the door. So 90-150k doesn't sound bad. I would love a single person (1br) apartment, non roach motel. That is all I want in a decent area with no crime. 
Average? Hmm. Why would any human being want to live there? Oh yea, I want to.
Fair enough.
That's for a family, not a single person.
~ $2400 for a decent 1BR in Brooklyn
Average is not median. The Woolworth mansion was recently listed for $150,000/mo so that wrecked the curve. Either way we should take this to /r/nyc if want to get a better idea.
They were chosen to be deliberately confusing. Who can tell the difference between the Nexus iChing and the Maven iChing? No one. Just kidding. It was Jason van Zyl's call, he's into i-chings. Not sure why.
10 years java experience gets you that same salary in Denver with half the cost of living. Shit, I've got 6 years of java experience and I make well within that range. There is a huge shortage of good developers here right now. Many of the grey beards I work with have said it's the hottest market they've seen since the dot com bubble. We've got Lockheed, Northrop, Raytheon, Boeing, and other defense contractors. Google, Map Quest, IBM, Oracle, and other big name software companies too. Average rent for a decent 2 bedroom 1000 square foot apartment would be like 1k a month. I have a 2400 square foot house that I picked up for $200k. Crime rates in and around Denver are tiny (except Aurora, they're the ghetto of the Colorado). Good skiing is an hour drive and an early morning away. Good hiking / camping is like a 20 minute drive away (closer even than the airport). I really love my city. Also, Colorado is the fittest state in the nation so more hots chicks per capita the anywhere else in the country. Or, if you're into dudes, they're in shape too.
I would love that, I truly would. 
I'm up in Canada. You know if many employers are doing TN-Visa's to bring people in? I'd be looking for senior dev or architect role.
Atlanta is what you make of it. If you live in the Midtown area then you have weekly festivals in Piedmont park, decent enough street life on Peachtree and Piedmont, and you also have lots of venues. About a dozen places have interesting shows once a month and locally interesting things on their own. We have several good/long bike trails and plenty of local theater. Oh yeah we also have AUC, GSU, and GaTech bringing in interesting people all the time. Also, excellent food. Oh yeah and one of the largest GLBT populations in the country. Also also lots of movies are staring to film here. Triple also a lot of R&amp;B/Rap/Hiphop studios. Oh yeah, readily available flights in and out of the city for when you have to leave. We also have a fantastic Java Users Group, AJUG. 
I work in San Jose, I think there are probably more Java jobs down here than in SF - right now it looks like SF is full of startup jobs in the hot new languages (a few in Java). Jobs where you have to have the Cormen book memorized just to pass the interview. The good thing about San Jose is that the cost of living is a bit lower and the salaries are the same or higher (higher in the case of big company vs. startup). The bad thing about San Jose is that it's boring (to me that's a good thing, but YMMV).
The OCJA?
java.util.logging is configured at the JVM level. This makes it a pain to use in web/enterprise situations where you may have multiple apps running on a single server, or an app split across multiple servers in a cluster.
Sure is far on the other side of the planet. Just kidding.
Wat...please don't do that. Install it using your package manager.
Yea its dumb.. I was thinking about getting my cert but there is no way I am paying 600 dollars for both exams out of my pocket, when most employers in my area don't really seem to care. If you can get your employer to pay for it then go for it.
Same side of the country as San Francisco ;) 
&gt; What we are seeing is the effect of the processor trying to keep **it's** contract with the lock instruction, Must... not... Grammar... Nazi...
Why not? I use 6 different JRE's at once and need to switch between them
If OP were knowledgeable enough to do such a thing, he wouldn't be asking us for help, now would he?
I'm working on SCJP/OCJP right now. To my knowledge you don't have to do SCJA as a prerequisite. If anyone knows otherwise, I'd be interested to hear. I'm 10 years into my career, and have found decent success. I have primarily worked with PHP, and then doing front end stuff of course. Now I'm working as a senior front end developer for a corporate J2EE/ATG based company. I've really had to hustle to move up from one year to the next. At this point I want the certification not to open doors, but just to solidify where I am, so that when the time comes for me to look at other jobs, I'll hopefully have an easier time getting in front of hiring managers and I won't have to do as much to convince people that I'm qualified. I've got a good track record, but nothing in the way of credentials. I figure if I add credentials to my track record, I'll feel a lot more secure.
Why would you want to make x and y final? Just because you can doesn't mean you should - presumably extensions to this class would probably want x and y to mutable.
If you're at the "input two numbers and do some math" level, then it was pretty decent. I forked it and added some comments, though. [Here you go](https://gist.github.com/3687939).
Try San Antonio. The pay will be "lower" than NYC or San Fran but the cost of living is significantly lower too. 10 years of experience could get you somewhere between 75-100k depending on where you get hired on at. You can buy a house for 1-1.3k/month.
They are set once. If the class is actually storing dependent variables (mult, div, sum, diff) as written then the object would not be valid. x and y should not be mutable.
I make that in a fairly low cost of living area in PA...I guess I just fail to understand that people would do a job for so much less in an area that costs 50x more.
Language rules are only part of it (just like the Language spec is only a part of the Java SE platform). You need to be familiar with the APIs outlined in the objectives of the OCJA. You might want to take a look at JavaRanch. They have a lot of discussion about what you need to learn when studying for the exams.
I'll stick with BlueJ for schoolwork and meddle with IntelliJ whenever I'm just doing something for fun.
&gt; sudo update-alternatives --config java You may want to do the same thing for javac as well.
You use Enums where there are a fixed range of values that a variable can be. Your static variables do not enforce that it must be one of those values, whereas an Enum would. Try reading this and see if it makes sense. http://www.ajaxonomy.com/2007/java/making-the-most-of-java-50-enum-tricks
You can use final for more than just variables, Final classes cannot be overridden for example. The correct definition is an entity that cannot be changed, not really a constant because those are known at compile time, but final variables can only be initialized once which is good as it prevents accidents from happening. Can you not use them? Sure, you can also avoid using constants or even collections if you want, though I have had to spend the past few weeks cleaning up other peoples code because they wanted to save time and avoid using objects in favour of a collection of Strings and ints until finally they broke the application when invalid states crept in and were not enforced.
Wow thanks. That was actually really helpful. Seeing it coded with informative comments like that is very useful. I'm starting to get better at using objects simply by trying repeatedly and failing but it's getting better. 
I'm a bit hung up on the enum Toy class. I'm not sure exactly what he's doing with it, because he never demonstrates. Is he supposed to call Toy.execute() and it will run both the soldier and doll methods? 
I think the biggest advantage is conveying programmer intent, especially when used on instance fields. If you see a final instance field, you immediately know that it cannot be changed, and was intended to be so. If I see a non-final field that could be final, I consider that to be a programming mistake. This discipline forces the programmer to actually think whether a field will be changed in the code. However, I don't usually use final method parameters because they're a bit too much extra work and code noise unless actually needed (e.g. for inner-classes). When combined with the idea of maximizing immutability, we end up with a design where the mutable state of a class (i.e. the moving parts where most bugs are) is minimized, and it's easy to read in classes. Just search for those few non-final non-immutable fields. I like the way Scala does this: the difference in val and var is one character, so there is never a good excuse for not using vals if a variable/field is not changed.
In addition to other points mentioned. You can iterate through Enums. Also Enums have a nice switch statement syntax.
Rather than messing with Regex, just hit CTRL-SHIFT-F to format the code instead. It will remove spurious lines, merge two lines into one and space all variables and if statements etc. Plus the formatting rules are customisable. This way you can inherit anyone's code, hit one shortcut key and have the code looking exactly how you like it.
As far as I know, they also prevent security issues. For example, a person using your program can go and hack into your program and change all the variables around, however the variables that are final are going to be left unchanged, because thats it, after you run your program they are final.
I feel like, that most variables are only used in a read-only. When I would actually make everything that could be final, final (which would prevent me from accidentally overwriting a value), my code would be littered with hundreds of "finals".
Just a side note, remember than what is 'final' for variables is just the reference, the object here might still be very much mutable, for instance an ArrayList.
Off the top of my head a couple of different ways occur to me. You could look up the proxy pattern for java. Head First Design Patterns has good tutorial on this. The other is to use EJBs either with a server like JBoss or Glassfish. EJBs can be configured to use SSL connections and the servers like JBoss work on just about every platform there is. Then using EJBs you can simply pass POJOs between your application and the Application Server. There very well may be much better ways but those are my first thoughts.
We use EJBs at our company, and occasionally get JBoss going down (usually due to running out of Permgen space) although JVM tuning has helped massively with this. But the connection leak issue is one I've not seen. My understanding was due to the way JBoss handled connection pooling any connections which were dropped would eventually be reclaimed after the timeout had been reached. So provided your connection pool was large enough to handle some connections being dropped and unusable for 5 minutes then they should get reclaimed and be usable again.
I feel the same way as senft. Mutability is the enemy. Having final fields in an object fights it.
By closed over do you mean access outer class (or local) variables inside the inner class? 
Yes that's what "close over" means. I'm not sure, but I suspect you can close over nonfinal *fields* from the enclosing object no prob, but not over nonfinal local-vars -- doing so just wouldn't make good sense.
Where I work - all defined variables that can be declared final - must be declared final. It really makes code review a lot easier if you know what can be changed. Also final can be inlined at compile time for example: // Vesion.java class Version { static final String version = "v1.0"; } // Example.java class Example { public static void main(String... args) { System.out.println(Version.version); } Compile and run Example and you'll get "v1.0" then change Version.version and compile only Version.java, and Example will still return "v1.0" until you recompile it.
Maybe. Java is good language for beginners. It is a restrictive language with error tracking (for the simple cases), which will give you quick feedback, and allow you to pick up the syntax and general flow of a program with ease. However, Java is an OO first language. This is arguably more of an advanced abstraction than is needed to start. Decomposition is as much as an art as it is anything else, and it may be better to ignore it at first while focusing on some more fundamentals. Your motives for learning will drive the answer though. If you just want a quick start, and get things done, then Java is fine. It even has great [tutorials](http://docs.oracle.com/javase/tutorial/) to go through. If you want to take time and develop a deep understanding of what the code is, and what it's doing (not a necessity, but nice to have), then I'd recommend starting with a more procedural language; python maybe? It's not an easy thing to answer if a language is a good choice for a beginner. It depends entirely upon the beginner. Sometimes the best answer is to find a mentor, and use whatever s/he is using. Either way don't worry too much about it. After learning one language, it is always good to learn a second and third later anyways.
Java was the first language I learnt. Java is a good language, it teaches you the object oriented paradigm, it has type safety, it's friendly enough. However, although I do enjoy Java, when I was learning it some things drove me insane! You will have to do a lot of things in your program that will seem long winded at first, you will not be able to understand the reason behind this stuff for a while. Personally I couldn't stand not knowing the reason for having to do some things. I also don't really like the amount of code you have to write to do something as simple as print 'hello world' for example. My recommendation would be to look at some code examples for Java and maybe some other languages, I'd suggest looking at Python. See the style of a few simple programs, which language seems more appealing to you? Which clicks with you better? Try that one. The language itself really is not too important, you can't really make a bad choice. You could also check out great free online programming courses and just use the languages they do while learning: * [Academic Earth](http://www.academicearth.org/) * [Berkeley Courses] (http://inst.eecs.berkeley.edu/classes-eecs.html) * [Coursera](http://www.coursera.org/) * [edX](http://www.edx.org/) * [Harvard CS50](http://www.cs50.net/) * [Khan Academy](http://www.khanacademy.org/) * [MIT Open Courseware](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/) * [Open Learning](http://www.openlearning.com/) * [Stanford Courses](http://www.openculture.com/2008/09/free_stanford_computer_science_engineering_courses_now_online.html) * [Udacity](http://www.udacity.com/) 
Send this question to the java reddit and you'll get the answer yes. Send it to the python, ruby, C#, etc reddit and you'll get the answer no. Send it to the programming reddit and you'll get 1,000 completely different answers from 800 people. You can start learning programming with Java. It is a fine language to use and it is similar enough (syntax wise) to C, C++, C# that you could transition to those if you need to. 
&gt;8 downvotes without a single reply. sentence fragment, numbers that begin a sentence should be spelled out. &gt;And evidently 8 people who don't know the difference between "its" and "it's". beginning a sentence with a conjunction 
Java is a good language to learn first. Easy to get use to the flow of the code. Also if you plan on writing code for cross OS's later on, mac,windows,mobile. Java would be abit easier to learn. Most systems already have JVM on them making it easier to trouble shoot java compaired to having to trouble shoot a code for each OS
Just wanna thank you for posting. After your last comment I had another crack at the server leak I was facing (remoting write thread had a giant queue of writes to make, and it never cleaned up). Configured HEARTBEAT_INTERVAL on the server's connector, and voila - leak is gone. 10 heap dumps later - leak is still gone. You have no idea how long this has plagued me. 
I learned java before C. I get pointers, in fact it was kind of easier for me to understand them since I've been using them inherently through the JVM. Once I figured out what pointers were, it was a big revelation for me, one that came at the right time.
It depends. Where do you want programming to take you? What do you want to do with it? It is kind of like asking "Should I learn to use an arc-welder or laser cutter?" 
This is also a good overview of various languages in a convenient single book: http://pragprog.com/book/btlang/seven-languages-in-seven-weeks
Yes, sorry I should have clarified that nonfinal fields from the outer class can be accessed by `OuterClass.this.nonFinalField`. Local variables must be declared final in order to be in-scope in the inner class.
I personally used Java as my first real language (aka. not VB or HTML) . If you don't know if it's right for you, i recommend [Rosetta Code](http://rosettacode.org/wiki/Rosetta_Code). It has a lot of code "problems" and shows the solution in many different languages. Find a problem and look at each language's code and find what makes the most sense/looks more appealing to you.
http://www.oracle.com/technetwork/java/seccodeguide-139067.html Finalizing your classes, methods, parameters, and variables is a good habit to get into. Aside from the secure coding guideline mentioned in the above link, it also conveys to people coming in after you that you intended your classes not to be subclassed, your methods overridden, or your variable references changed.
NO ONE HAS EVER ASKED THIS QUESTION BEFORE
I agree. I've been trying to use final more often as a way to improve code quality. Basically, I like the compiler to be able to spot as many bugs as possible for me. Doing so, I've found that the majority of variables and parameters I define turn out to be final. OCaml has final variables by default and you must do something specific to make them, well, variable. I wish Java worked the same way.
I would say it's fine, but there are many better for that purpose. My personal bias: I'm not much of a fan of Java, but I have to use it primarily for my job, so I subscribe to this Reddit. My reasoning: a dynamic language like Python or Ruby will allow you to really focus on programming fundamentals and not get so caught up in the semantics and syntax of the language. There's value to starting on a low-level language, though, but I think that value is better captured by starting with C as you will have to learn about pointer manipulation and memory management. I started with C++ and I think that being familiar with these concepts has made me a better programmer especially in Java. If you're strictly going to be a web developer, it's less important, though. Bottom line: it doesn't matter. Pick a mainstream language so that there is a large enough community to help you when you struggle and stick with it. Don't switch halfway through and you'll be fine.
Hey excellent. Glad you got it sorted mate. Sometimes it just takes talking it out to get a fresh perspective or notice something you've missed.
Others have explained the major points, another one is that Enums provide a built-in static method 'valueOf', which lets you convert a string to an enum value. This is good for initializing values from a file or xml doc, for example. Really, though, enums are a convenience, not a necessity. They weren't a part of the original java spec. (introduced in java 5 maybe? I don't remember).
I'll agree with this. As a relatively young programmer (18), I dont have a firm grasp on pointers. I'm learning much more now though because we've started with linked lists in college. I'd also recommend that you start with C++ because Java programming is very lazy (auto initialization, auto super() when creating children classes etc...). Also, the most common compiler is Eclipse, which is very user friendly for debugging and completing lines of code. Overall, start with C++ because it will make you a better programmer in the future and will make java very easy for you when you move on. 
As someone coming from Java and no exposure to C, learning the idea of pointers was pretty hard. I'm starting to get it now, but I really had a rough time at first. I just started really getting it last night :P
Eclipse does, though, use its own Java Compiler. 
No. I'm a java guy and ... No... do not start with Java. The fundamentals of programming can be learned using a language that doesn't get in the way like Java does. You don't need a majority of the syntax java makes you use to express the fundamentals of programming. [Dive into Python](http://diveintopython.org/) is a great introduction to programming. Java isn't a bad language, but if you're just starting and you don't know the fundamentals of recursion, looping, branching, what patterns are or why algorithm choice is important, the syntax will get in the way and make learning those fundamentals take longer than it should. Once you know the fundamentals, putting them to use with a language is a largely mechanical pursuit.
I watched a lecture recorded from some college on YT. He asked a question: solve \*(\*(\*(\*(&amp;(&amp;(&amp;(&amp;(\*5))))))) or something along those lines. He eventually realised that not even he could answer the question :L That video actually really helped me, I like the idea of that setting where the professor is funny and answers questions often, I often even found myself talking along when he asked a question of his class :) Edit: Fixed my lulzy phone attempt at producing the question.
As good as any other OO language. Any of them will get you to think abstractly. You can learn about algorithms and data structures equally.
Thanks looks great! I'll get it but where did you learn java from?
Two things, first everything implicitly extends from the Object class. So, yes, String is an Object because of this. Second, the Enum class is the base class for all enum types. This is a generic class definition saying that the generic parameter K must extend from the Enum class. In other words, it must be an enum. There are a few things going on under the hood when you use the "enum" keyword. I would suggest you look at the Java Language specification to get the detailed explanation. I don't feel like copying 10 pages worth of explanation of enums :) 
Nick, just buy a book about learning Java and go through the whole book. It doesn't matter which one. You keep asking the same questions over and over and getting answers but you don't seem to be listening. Learning to program takes time and effort. You won't be able to do this over night. In fact, I'm guessing that learning to program Java to the point you have the ability to make a decent game will be much more difficult than any of your current high school classes. So buy a book about Java programming, any book, and start reading. If you have specific questions, we can answer them. Please, though, stop asking the same question over and over. 
He meant this: *(*(*(*(&amp;(&amp;(&amp;(&amp;(*5)))))))
Any language is good to start with pretty much. I usually recommend Haskell, because it's very math-oriented, thus solidifying concepts you've probably already learned, and extending them in certain ways, like using lists. There are different thoughts on the best language to start with and the best methods to teach with, but just starting with one is good enough to nail down basic concepts.
Because you said what your name was. 
When I'm dumb I must've forgot
Nothing to do with IQ. Your comment brings nothing worth discussing to the table, so people downvote it. Your post is technically correct, but completely pointless. And yes, I'm well aware that this post doesn't bring much to the conversation either.
Is that so? I guess people don't want free proof-reading. Good to know. Thanks for the information.
No ;P just wrote it as well as I could in short time on my phone. It probably has a wrong # of parentheses too lol
If you were doing that you'd have emailed the guy (his address is at the end of the article) rather than posting on here, where you've no idea whether or not the author will see your comment. As a side note the passive-aggressive tone of your posts doesn't help your cause either.
Not to be too pedantic but **lazy** is inaccurate here - Java is actually very **eager** as far as a language/platform in that it evaluates most stuff right away. *Lazy*, optionally (as in Haskell, some Lisps, Scala and others) means evaluation of something doesn't occur until the first time you use it. Scala vs Java requisite example: String example = "example"; //Java, eager, assigns right away lazy val example = "example" //Scala, evaluates the first time you reference it.
What's your point? Do you actually have an opinion, or is your point just that a question about the flaws of Python solicited answers, therefore it has flaws, and Java, the modern marvel of language design, has none? I know I'm delighted everytime I have to write something like this: HashMap&lt;String, Float&gt; myMap = new HashMap&lt;String, Float&gt;(); Or really use anything related to generics.
How old are you?
Thank you. Remembering things you watch at 1 am can be difficult, and trying to reiterate them through a phone is only more horrible XD
That's it. I was really deterred by the "u" and "2" in the title, but I'm glad I got bored and decided to check it out, it proved to be extremely helpful.
No, it's two separate issues. That stray instance was just useless, but what I mean is that in Menu.java line 14 there's an instance of Math called Math. So in Menu.java:28, does Math.doAddition() mean that you're calling a static method on the Math class, or is it a call to a method of the Math instance? Granted, there's only a static doAddition() method, but the exact rules for how this is handled aren't completely obvious.
&gt; If you were doing that you'd have emailed the guy (his address is at the end of the article) rather than posting on here, where you've no idea whether or not the author will see your comment. Believe it or not, I didn't even think of that. Probably I was distracted trying to understand why the particulars of the article. &gt; As a side note the passive-aggressive tone of your posts doesn't help your cause either. Any tone you may think you hear in my posts in your head, man. I am commenting the way I always comment. Check my comment history.
Java's probably OK for starting to learn OOP. But for procedural, you may want to look elsewhere. My first language was C, btw.
C?
It's a high-level language in that it's not assembly, but these are pretty subjective terms and "low-level" seem like an accurate description in that context. It might be more clear if I called C and Java "systems programming" languages and Ruby and Python "scripting" languages, but that's still ambiguous, as Java will match some of the qualifications of a scripting language.
I had a "Java Network programming class" and all it ended up being was a bunch of Swing GUI shit. Nothing more... and, oh my god... just a bunch of nested JPanels and other stuff that made me want to shoot myself.
"never" use doubles for money. you lose precision. it is impossible to represent "0.1" as a float type number with a finite number of bits. http://javarevisited.blogspot.com/2012/02/java-mistake-1-using-float-and-double.html that being said, you can use [DecimalFormat](http://docs.oracle.com/javase/1.4.2/docs/api/java/text/DecimalFormat.html) or the [printf family](http://www.homeandlearn.co.uk/java/java_formatted_strings.html) of functions introduced in Java 5. They should work with float-types and BigDecimal; but it's been a while since I looked at it so the details are left as an exercise.... yada yada.
I would actually argue that a strict type system is helpful for beginners because it gives them more feedback faster. The problem with java is the absence of type inference. Some CS schools teach OCaml (Cornell?) as an introduction to CS and the course looks pretty good.
Yeah, the problem with that line I posted is the lack of type inference. I can go either way on whether static or dynamic typing is better for learning. Being able to reason about, and keep track of, different types of data as you program helps you with the kind of reasoning that's important in programming, but I also think that when you're learning to program it might be more important for the language to get out of your way and let you have early victories in order to keep you going. There are likely people who wanted to learn to program and started on C or Java, then got seemingly obscure compiler errors and gave up after not quickly figuring it out.
We need a deep final.
Well I think what happened was I tried to call the Math class and the doAddition method but I believe NetBeans told me non-static method blah can't be called from a static context. So to fix that I can't remember if I just made the methods static or created an instance of Math named Math. It looks like I did both... Hmm...
I know both C++ and Java and I think Java is more friendly to beginners. C++ is fun because it lets you do what you want, but that's not a good thing when you're a programming beginner. You need a language that abstracts some of the trickier concepts and let you focus on getting things to work without having to learn how the things work first. It's kind of like learning to drive an automatic car vs a manual. You will need to learn how to drive the manual car eventually but for now you better off just learning how to drive
Start with whatever feels good to you, really. After learning one language the biggest difference will be the syntax, and that's pretty easy to pick up on, especially when a lot of it is extremely similar. It is good, however, to start with a strongly-typed language such as Java in order to practice good structure. (I started with batch files/vb)
Fairly typical "I don't like it so it will fail" rant from PG. In the same time his Arc language has slowly got nowhere. 
 import javax.swing.*; import java.awt.*; import java.awt.event.*; import java.util.ArrayList; import java.util.Calendar; public class GameBoard extends JPanel implements ActionListener { mainBlob character; double charX; double charY; backGround swirlyColored; public GameBoard() { addKeyListener(new keylisten()); setFocusable(true); character = new mainBlob(50,545); charX = 50; charY = 545; swirlyColored = new backGround(); } public void actionPerformed(ActionEvent e) { repaint(); } public void paint (Graphics g) { super.paint(g); Graphics g2d = (Graphics2D) g; g2d.drawImage(swirlyColored.getPic(), 0, 0, null); double[] locs = character.getCoordinates(); charX = locs[0]; charY = locs[1]; System.out.print("Current xLoc is: " + locs[0] + "\n"); System.out.print("Current yLoc is: " + locs[1] + "\n"); g2d.drawImage(character.getPic(), (int)charX, (int)charY, null); } public class keylisten extends KeyAdapter { public void keyPressed(KeyEvent e) { System.out.print("Key pressed\n"); character.keyPressed(e); character.move(); int key = e.getKeyCode(); if( key == KeyEvent.VK_LEFT) { System.out.print("Left press registered\n"); } if( key == KeyEvent.VK_RIGHT) { System.out.print("Right press registered\n"); } if( key == KeyEvent.VK_UP) { System.out.print("Up press registered\n"); } if( key == KeyEvent.VK_DOWN) { System.out.print("Down press registered\n"); } } public void keyReleased(KeyEvent e) { character.keyReleased(e); } public void keyTyped(KeyEvent e) { character.keyTyped(e); } } }
My point is that there's no language that's perfect really. You recommend Python, because Java is verbose. And verbosity is what should be avoided at all cost, right? So, people should use Python, since it's not verbose. But then with Python you get the GIL, and significant whitespace and mind boggling slowness. All kinds of problems that you didn't had in Java. Your beginner is just trading in one set of problems for the other. Hence, it wouldn't matter which programming was used to start learning programming. They ALL have problems, and all reasonably current and popular language would qualify. &gt;I know I'm delighted everytime I have to write something like this: &gt;HashMap&lt;String, Float&gt; myMap = new HashMap&lt;String, Float&gt;(); And I'm delighted to tell every time that you can write this in Java as: Map&lt;String, Float&gt; myMap = new HashMap&lt;&gt;(); 
Since no one has mentioned it yet.. go check out [joda money](http://joda-money.sourceforge.net/) Its a really neat little library that does all the hard work for you. My two favorite libraries are joda time and joda money.
While I like that book, I wouldn't recommend it to a beginner - it's aimed at programmers with a few languages under their belt, and want exposure to other programming paradigms. There are much better choices available for learning. 
Oh you beat me to it. ;)
I use the second one. It's more "Java" to use a class to do this stuff for you. 
&gt;Yeah, the problem with that line I posted is the lack of type inference To me it seems the problem with that line is more about your lack of Java knowledge.
It fails like Cobol. 
You never heard about Paul Graham? I'm certainly not that old.... but here have wikipedia link: [Paul Graham](http://en.wikipedia.org/wiki/Paul_Graham_%28computer_programmer%29)
He angel funded reddit, wrote hackernews and now runs ycombinator. He made his money selling his website generation site (viaweb) to yahoo. Also /u/paulgraham (no longer active).
Just a guess, but have you ensured that the GameBoard has focus. If not, I doubt the key events are getting fired to the keyListener there. From a standards and style point... Classes start with a Capital Letter.
If there's anything wrong in the essay, feel free to point it out, and we can discuss it. What you posted is the sort of name-calling fanboys resort to when they meet criticism they can't answer.
Then I agree with your point, except that Python's painful slowness matters at all to someone learning. And I didn't really advocate Python, I just said that any of Python/Ruby/C would be better as a learning language. If that line of code is actually true, that's good and I didn't know that, but I have to wonder if that's Java 7 or something. Maybe I'm just plain wrong. Either way, it's not the point. Java is a very verbose language. Verbosity is not a good thing. Maybe it's a cost of good or necessary things, but no one ever said "gee I wish my language was more verbose!" edit: Yes, as I suspected, that code gives a compiler error on Java 1.6 "'&lt;&gt;' operator is not allowed for source level below 1.7" I suppose it's fair to say it's a problem Java has solved, but it's also worth pointing out, that companies are slow to adopt Java 7. Most Java code out there is going to be &lt; 7.
Yeah that is understandable. Its funny how clear of a divide those two aspects can be. There are people I work with who have never even designed a popup dialog and would be perfectly happy never to have to. I personally like the software design/architecture aspect more than anything so I have a little bit of knowledge about a lot of things.
logic nazi says, "how can 800 people give 1000 different answers?"
"I think you should start with Java and C and Perl." I am 1 person, but I just gave you 3 answers. 
Not programming, I'm going for a network degree. This is a required course and I'm kind of drawing a blank on topics, especially on a paper on a programming language. I'm thinking about a comparison topic or maybe detailing how the JVM differs in various platforms (since I use Linux 95% of the time).
Yes, this was written in 2001 back when Java really was shitty -- no generics, no varargs, no autoboxing, only green threads, and HotSpot was brand new. I don't blame Paul Graham for expecting that language to wither. Edit: Holy crap, the fanboy circlejerk is terrible in this thread. /r/java usually isn't this awful. 
I don't want to be seen as defending my company's non adoption of Java 7, but sadly we're probably not alone. 
I remember PHP being the most hated one. Before Facebook showed up. 
The key to understanding pointers is not to over think it. They're just memory addresses. E.g. a variable is like what's inside a house, a pointer is just the house's address. That's it. I think what confused me most was what the benefit of using pointers is, which is a much larger discussion.
Yet for some reason, in 2001, people were able to write Java programs to solve real business needs. 
He doesn't mean *main* class, he's talking about the class with his main code elements in it. Not the main method.
I'd rather code provided as is rather than adapted. It messes up line numbering and other things.
People also write Visual Basic for Applications to solve real business needs, so your argument only shows that Java is at least as useful as VBA. 
Sorry, here's the class with the main method, I just meant this was the class that did most of the actual work. This is the class that actually runs it, and it does in fact compile. import javax.swing.*; import java.awt.*; import java.awt.event.*; public class GameDriver { public GameDriver() { JFrame frame = new JFrame(); JPanel panel = new JPanel(); frame.add(new GameBoard()); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setTitle("A Crappy Platformer"); panel.setBackground(Color.black); panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS)); frame.setSize(900,600); frame.setResizable(false); frame.setVisible(true); } public static void main(String args[]) { new GameDriver(); } } 
Well on the GameBoard constructor I did setFocusable(true) on line 16 which I assume takes care of this? If there is a mistake in how I did that though that would make my life easier trying to figure this out. And as for the standards and style point, I appreciate it, as I said it has been a while so I'm a bit sloppy
He made a final resolution based on rumour and here-say. That is not what an essay should do.
Swedish? public boolean DidEnjoy(){ return true; }
Sun was a hardware company with a long history, though, and not like most tech/Internet companies. Like I said, most people were not aware that Sun was in trouble back then. In fact, many people thought Sun was in great shape because Java.
It's fairly limited in terms of language features and expressiveness, which makes it very verbose, though it's better than the other 3 languages you mention. Of the languages I've used, F# &gt; Haskell &gt; Scala &gt; C++ &gt; C# &gt; Java &gt; VB.
Verbosity doesn't matter when you have IDEs that can auto complete 50% of your code. I'd choose java anytime over something like Haskell which will be unreadable when I come back to it 6 months later
Not really. Auto complete code doesn't mean auto generated. And even 6 months later, the java code will be completely clear to you, unlike the gibberish which haskell produces which will take 3-4 readings to understand what you were doing.
I wasn't aware that Haskell produces gibberish. If it takes you 3-4 readings to understand it, I'd say that's due more to not knowing it as well as you do Java. I find it much easier to express (and later read) what I want to do in Haskell. Consider: List&lt;Integer&gt; ints = Arrays.asList(1, 2, 3, 4); List&lt;Integer&gt; odds = new ArrayList&lt;&gt;(); for (Integer i : ints) { if (i % 2 == 1) { odds.add(i); } } and ints = [1, 2, 3, 4] odds = filter odd ints Which of those is clearer? Which is less error-prone? I realize this is a very simple example, but looping constructs like that are all over Java code and they can be expressed in much clearer ways.
Definitely, it's not something you can run as a purely private enterprise. Which probably makes it politically impossible in the US in this day and age. Either way, we're way way way off programming now, and although I'd be happy to debate the politics of public vs private investment, I don't think this is the place to be doing it :)
A method name starting with a capital letter? I smell a dotnet programmer!
&gt; First off you're using a List when an integar array would've easily sufficed. Replacing the Lists with arrays takes the exact same amount of code. &gt; Solution obtained in the same 2 lines. Except that later, when I need to filter the even numbers from a collection, the only change I need to make is the function I use to filter: filter even ints where with your solution I'd have to make a new filterEvens method that contains another for loop. Perhaps `filter` is a "wrapper function", but it's a wrapper function that you can't create/use in Java without a ton of overhead. For example, Guava [has some classes](http://code.google.com/p/guava-libraries/wiki/FunctionalExplained) to support this, but even they admit it "can lead to verbose, confusing, unreadable, and inefficient code", which means you're pretty much stuck writing the loops yourself.
syntax maybe?
Interesting interview. I know this is /r/java, but I really felt that Stroustrop and Ritchie came off as more knowledgeable, and informed, and perhaps more forward thinking? (this interveiw is 12 years old now) than Gosling.
I'm not exactly sure what the problem here is. I really do not wish to sound insensitive, but the problem right here is basic math. Assuming you're trying to get a String name from array names from location i which is equal to 2, 2*2 equals 4, and, as [Killobyte](http://www.reddit.com/user/Killobyte) mentioned, arrays start from 0, the result is "Julio". I don't think there's much more to it, maybe I'm really blind and missing something hugely obvious. In that case, sorry!
I have to conduct a survey and talk about the answers I've got for my analysis, i have many-a idea don't worry about that one ;d
Or, as those who live in the Northern Virginia part of the equation say, all the culture of the big city with none of the drive by's.
&gt; The idea is that both DAOs join the transaction, and that either the &gt; data from both DAOs ends up in the DB, or none at all. The DB has some &gt; contraints set for the data that we are persisting. and &gt; What we however really wanted to test was whether the data &gt; actually ended up in our DB and whether both DAOs joined the &gt; transaction to see if the effects of DAO1 are correctly undone &gt; (rollbacked) when DAO2 throws. This is not what mocks are for. This is why you do integration testing and functional testing. Mocks state the expections a class under test has for its collaborators, and verify behavior given those expectations. You use this to grow the interface for collaboration based on class under test's needs. Furthermore, the owner of the interface is the class under test, *not* the collaborator. If you change the interaction with the interface, you must verify the collaborator still meets the expecations of the class under test. This is in line with the principle of [Depedency Inversion](http://en.wikipedia.org/wiki/Dependency_inversion_principle). Thus, returning to your example, the *proper* question is what does the ServerFacade *need* from the DAOs? You grow the DAO to meet the needs of the ServerFacade. Then, integration tests should be written to verify that the DAO meets the expectations set by ServerFacade. And any time you change ServerFacade's expectations, you'd better make sure the DAO still meets those expectations by updating the integration test. Seriously, read the book [Growing Object Oriented Software Guided By Tests](http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627), written by the authors of the EasyMock framework. Before reading your own interpretation of what you think mocks are for, read how the authors of EasyMock intended it to be used.
&gt; where with your solution I'd have to make a new filterEvens method that contains another for loop. So what? Behind the scenes your filter even code contains the same loop and code. &gt; without a ton of overhead. Bullshit. One import statement and you're done. Eclipse will automatically import the package for you when you mention its code somewhere in a class if you click its solution.
I would never think less of someone for not writing a Java program.
You aren't ever actually setting the project scores, so they're all still -1, and getProjectScoreForId returns an empty string if the score is lower than 50.
how do I fix the if statements to display the scores?
I used 'else' but I'm still getting an empty console this is what I have the method: public String getProjectScoreForid(int id){ String grade = ""; if(id&lt;=this.projects.length-1){ if (projects[id] &gt;= 90) { grade = "A"; } else if (80 &lt;= projects[id] &amp;&amp; projects[id] &lt; 90) { grade = "B"; } else if (70 &lt;= projects[id] &amp;&amp; projects[id] &lt; 80) { grade = "C"; } else if (60 &lt;= projects[id] &amp;&amp; projects[id] &lt; 70) { grade = "D"; } else if (50 &lt;= projects[id] &amp;&amp; projects[id] &lt; 60) { grade = "F"; } } return grade; } 
That says: * If its above 90 set it to A. * If its equal to or above 80 and below 90 set it to B. * If its equal to or above 70 and below 80 set it to C. * If its equal to or above 60 and below 70 set it to D. * If its equal to or above 50 and below 60 set it to F. It's -1 right now. You haven't said what grade should be. It's still "" as in the first line.
What do you mean? What do you want to see when the value is -1?
Depends what you want to happen... What do you want to see printed to the console if all of the grades are -1? Do you want to do anything? You could just set all the grades to something above 50 and you will see output.
 well, I want to be able to have different grades since I need 15 project scores and 10 quiz scores. So a mixture of grades would be the best thing
 inside the getprojectscoreforid() method? 
Do that instead of setting them to -1... You could put it in the getProjectScoreForId method but then you would be setting the values every time that is called... when you only need to set them once, in the constructor.
They will display the grades if they are there, but they are all -1 right now.
You should be using the constructor to set up all the data, and the get methods to read them in the main class. What you have is OK just the data is not set up.
This made me laugh based purely on the list of languages.
Ah, trying to outsmart the compiler.
I wouldn't say it's more powerful, but I would definitely agree on "simpler to learn".
But if you are reviewing Java you should probably at least try it out. It'd be like a car review where they never drove the car.
You should be able to solve it by doing something like if(myObject instanceof Edge&lt;city&gt;) Edge&lt;city&gt; myEdgeCity = (Edge&lt;city&gt;) myObject; plus it is also just a warning, if you are absolutely 100% sure you would never have a type mismatch then you could just ignore the warning or place an annotation above it such as @SuppressWarnings("unchecked")
It's funny that verbosity is typically the only thing people can come up with when asked what's supposedly so bad about Java. Many languages have many other problems. The Reddit crowd seems to favor Python normally (since it's not verbose), but the recent thread about disadvantages in Python proved that Python has a lot of problems that Java doesn't even begin to have (like the GIL, abysmal performance, significant white space, etc). 
Its fahrenheit+" is "
so the syntax is "string" + var + "String" ?
Oh please, verbosity is pretty low on the list of Java problems. How about a few real ones off top of my head: * Unchecked mutable state everywhere, meaning that using any threading is highly error prone, and that you can't know if any of the libraries you're using will behave as expected in a threaded environment. * Terrible handling of nulls. * Completely broken concept of equality. * Shameful time and date handling. * Lack of functions, meaning that you have to jump through hoops to do something as simple as a callback. * Lack of immutable data structures, which allow easily scoping changes in the data, and tracking the context of the changes. Especially useful if you are working in a threaded environment. * Lack of pure functions, meaning that you can't safely reason about pieces of code in isolation. * Lack of higher order functions, meaning that you can't abstract things properly. This is why you have to write a for loop any time you need to iterate over something. * Utter lack of composability! Suppose any function that exists. I will suppose one that is made of parts A, B, C and D. I might denote this A ∘ B ∘ C ∘ D. Now suppose you desire a function that is made of parts A, B, C and E. Then the effort required for your function should be proportional to the effort required for E alone. The closer you are to achieving this objective for any function, the closer you are to the essence of (pure) functional programming. This exists independently of the programming language, though programming languages will vary significantly in the degree to which they accommodate this objective. Imperative programming — specifically the scope of a destructive update — is the anti-thesis of this objective. * Very poor meta-programming facilities. * Lack of expressiveness, meaning that the code often obscures its intent by mixing **what** is being done with **how** it's being done. * Objects are terrible at encapsulation and composition, because each object constitutes its own DSL with its own quirks. Objects contextualize data prematurely, if you have data in one context and you need to use it in a different context, you have to use crazy adapter patterns or wrappers. The list goes on and on, but you actually have to understand some CS fundamental to appreciate any of that.
Not sure, but you really seem to hate for loops. What's up with all the while loops?
 hahaha, it would seem like it but my project is only allowing do while and while loops :\ can't use any for loops
 That was the missing piece of the puzzle! Thanks for the help and the info! :D I will go back and change 'grade' to 'return' 
Not defending Java by any means, but aren't points 9 and 11 really more critiques of OO vs FP?
While FP does encourage writing composable code by design, the approach is not exclusive to it. I do believe that by emphasizing OO, Java encourages writing the style of code that lacks composability and can be difficult to reuse effectively. In OO world view data must be classified in order to work with it. For example if we're talking about a person, we might create a Person class and add some fields to it, such as age, name, etc. Then we'll create instances of this class and use them in our program. The problem with this approach is that the classification is only meaningful within a particular context. The classification is not inherent to the data itself, but rather it's a transient view of the data at a particular time in a particular domain. When we create a class we make assumptions about the context in which the data will be used. These assumptions are often incomplete, and even when they are, the nature of the problem can change over time. Your requirements may change, new requirements might come up, or we might have simply misunderstood the problem when we designed our classes. The way OO deals with this is by remapping the classes to a new domain. We might extend the class, write a wrapper, or use an adapter pattern to bridge the contexts. But this is solving a problem we ourselves have introduced by assigning a permanent classification to our data.
The predicate interface you wrote is horrible and will almost never be used in real production work. In real life, when you need to filter a list, its almost always on some criteria like, filter the employees who've used up all their off time, or filter all the users who haven't logged on to the site in X days, etc. For these things, something called the SQL language was invented which makes any filtering done in your application code inefficient and hard as well. Hence the interface you wrote will never get used, and SHOULD never get used, since you want to have your employee filtering code be put in your Employee model and user filtering in the User model rather than sprinkling Predicate classes throughout the code, as you seemed to think was a good idea. The times when you actually need to filter something that won't be better filtered via SQL, like an array of even or odd numbers or something that can be filtered via arithmetics alone, is rare, and can be easily overcome by writing methods for such simple filters and using them whenever you require them. No programmer past the 1st year of his comp sci course has ever worried about filtering even or odd numbers in an array in any modern language. Second, you need to explain to me what that loop is doing, because only you and a handful of other people on this planet can decipher what all those fucking brackets are doing as they're randomly thrown all across the code.
&gt; In real life you can't rely on writing SQL any time you need to iterate a collection and do something to its elements. And? &gt; Way to completely miss the point. You had no point because there's no need for that interface in any real life application. It was a strawman. &gt; I see you live a very sheltered life and have no concept of what people might or might not need to do outside your little domain, where apparently half the application logic can happily live in SQL. I've programmed things from games, to business apps, to websites / web apps. Never had any need for any filtering done purely on arithmetic rules more than 2-3 times for which I easily wrote a method and didn't have to worry about it again. &gt; If you can't read that loop, you really have no business writing code or calling yourself a programmer. Just because I don't read completely unintuitive languages which are written in a nest in a nest in a nest in a nest, doesn't mean I can't write anything better than what you can write. In fact you don't seem to have much of a concept of MVC
&gt;Before reading your own interpretation of what you think mocks are for I think the author interpreted what the "NoMock" movement has been saying... the list includes some pretty well known names. Do all of those just have their own interpretation? In theory your explanation sounds logic. In practice, and that's the problem, the big question where it all boils down to is: "Is this all really useful"? 
You do great work; Thanks for making this all available, very kind of you.
&gt;And? And if your language sucks so bad that you turn to SQL for simple things like filtering, there may be a problem with it. &gt;You had no point because there's no need for that interface in any real life application. It was a strawman. You clearly don't understand the difference between an example and a straw man. I suppose to you every example in a text book is also a straw man, since you can't extrapolate the implications of it. The point of that example is that passing logic as a parameter is difficult in Java. If you think that it's not useful then you simply have no experience writing code. Take a look at the Spring [JdbcTemplate](http://static.springsource.org/spring/docs/2.0.x/reference/jdbc.html) for a real world example of why passing logic as a parameter is a useful technique. &gt;I've programmed things from games, to business apps, to websites / web apps. Never had any need for any filtering done purely on arithmetic rules more than 2-3 times for which I easily wrote a method and didn't have to worry about it again. Nobody said you would be doing filtering purely based on arithmetic rules. Looks like you're the one making a straw man here actually. &gt;Just because I don't read completely unintuitive languages which are written in a nest in a nest in a nest in a nest, doesn't mean I can't write anything better than what you can write. Yup, if reading an AST is unintuitive to you, then you really don't have any business calling yourself a programmer. Any first year CS student could read that code just fine. &gt;In fact you don't seem to have much of a concept of MVC This word you're using, I don't think it means what you think it means. 
You've probably just mixed up the x and y axis?
Well, everything is turing complete, right? So in that sense, they are equivalent. When I say "more powerful", I am basically comparing how much can be accomplished succinctly and readably. In python, you've got list comprehensions, duck typing, lambdas, named arguments, etc ([many more here](http://stackoverflow.com/questions/101268/hidden-features-of-python)). In java, you can do all that stuff, but it just requires a lot more code.
Hah, good call. What you just said explains my reasons for hating "hybrid apps" and things like PhoneGap. There's nothing inherently wrong with tools like PhoneGap or the concept of a hybrid app, but people use them as an excuse to make crappy, half-assed apps just so they can jump on the mobile train. Pretty much the same thing as when a PS3/360 game gets a shitty Wii port. I swear, I half expect to see "Hosted by Yahoo! Geocities" at the bottom of some of these apps.
my cpu is!
But wouldn't that be more of a critique of any language that encourages OO or strays too far from "pure" FP? No biggie - just that I think the original points, without 9 &amp; 11 provide ample examples of Java's issues without making it an OO vs FP debate.
The thing is that some types of verbosity actually make the code MUCH, MUCH, MUCH more readable. We all know that Perl is so terse that it became a write only language. You can write the code, but simply not read it back. You could just as well code in whitespace. 
Misleading title (the page linked to only has a few "which is valid java code" questions, nothing about servlets, JSPs, javascript etc), terrible formatting for the code example makes it a nightmare to read, and the linked URL's got some additional crap on the end of it to track where you've come from. In short I wish could take back those few seconds of my life.
Let me guess, the only language that does all of that just happens to be Clojure, right?
Scala, F#, Haskell, OCaml, ML, Scheme, CL, Clojure, and Erlang, but a few languages which do all that and more. But hey when all you have is a hammer everything looks like a nail right.
&gt; And if your language sucks so bad that you turn to SQL for simple things like filtering, there may be a problem with it. Are you saying Haskel is a database in itself? Databases aren't used in haskel programs? &gt; The point of that example is that passing logic as a parameter is difficult in Java. The kind of logic YOU were trying to pass and the example which you created was a strawman. Make up an example that no one would write or need, and use it to show how bad Java coding is, yeah, that's the definition of a strawman. &gt; Nobody said you would be doing filtering purely based on arithmetic rules. Looks like you're the one making a straw man here actually. The only examples of a filter that you've given are even and odd numbers. &gt; Yup, if reading an AST is unintuitive to you, then you really don't have any business calling yourself a programmer. Any first year CS student could read that code just fine. And that's why Haskell is such a widely adopted language. Fact is, only you and a couple of other retards are able to comprehend or want to deal with it when there are much better alternatives. Since you're such a great programmer and apparently are able to deem and take away the certification of programming from other people who have been doing it for almost 10 years, why don't you show us some of the great feats of programming that you've accomplished? What software have you written which is being publically used? &gt; This word you're using, I don't think it means what you think it means. Its ok, I didn't think you would know what MVC is, it must be much harder to implement when everything is a nest in a nest in a nest.
I don't think that's necessarily the case. For example, some people say [Erlang is an OO language](http://www.kirit.com/Blog:/2007-08-09/Erlang%20as%20an%20OO%20language), and I think there's a good case to be made there if you think of OO as defined by Smalltalk. So, you don't necessarily have to have the FP mindset to deal with these problems. I think it's more productive to focus on the similarities between good OO and FP code than the differences. In my experience, the overall practices for writing good programs are strikingly similar.
I don't get it. How can you make a GUI unless you are designing an operating system or something like that? Are you saying that you want to know what the favourite things are that we do with a JPanel or JButton? Do you have to design a GUI to replace Swing or AWT? Makes no sense to me. Sorry.
I think computrical means he or she is writing an application with a GUI.
You have the rectangleWidth variable int the y2 slot, no biggie. =D
Thanks for clearing that up. Your comment, plus the fact that Google Guava's checkNotNull() method throws an NPE, leads me to believe that I'm correct in throwing NPEs for null arguments. I'm going to submit a patch to our internal Sonar caretakers so that they can get rid of this recommendation.
&gt; I'm saying that Haskell, and many other languages, provide good tools for manipulating collections. What are those tools? All you've shown so far is a simple even and odd filter which I've never needed so far, and which I could easily replicate in &lt; 5 mins if I needed it. &gt; That's why they're called examples. Since you can pass ANY piece of logic to filter on, the reader should be able to extrapolate the implications of that. Ok then give me some more examples of the other ANY types of logic that you can filter on in haskell in the same way as even-odd numbers. E.g you have a list of employees and you want to filter the employees who took more than 5 days off last month. Show me how you would filter that in Haskell and how it would be easier than doing an SQL query to get that. &gt; Sure, I have open source libraries that are used by companies in production, what have you got to show aside from your idiotic comments? It must not be getting used too much because there's 0 pull requests, 0 issues. I'm not surprised though since you wrote it in one of your fetish languages where everything is nested 5 levels deep, only about 100 people on this planet are able to comprehend that. I have a suggestion, why don't you just skip to assembly, or even binary language since anyone who wants to work in an intuitive language is not a programmer according to you? 
&gt;So again I fail to see why Haskel is superior to Java. Having a bunch of EASILY replicated functions built into the language isn't anywhere near a good enough reason for anyone to try to learn that syntax from the 1960s. That's pretty funny considering Haskell was designed around the same time as Java. And evidently you only understand the superficial differences between the languages. The difference is that these easily replicated functions work across all your data, and they're easily composable. In Java that's not the case, because objects bundle data and logic together prematurely. This is why you have adaptor and wrapper patterns incidentally. Not having functions makes trivial things like callbacks into an adventure. Furthermore, Haskell provides [persistent data structures](http://en.wikipedia.org/wiki/Persistent_data_structure), which ensure that all changes are inherently contextualized. You might have heard about this new fangled things called threading and multiprocessing, guess what it's becoming an important issue. With immutable data structures any time you make a change to the data, a delta is created. By contrast in Java, you either have to copy the whole data structure or mutate in place if you want to make a change on shared data. &gt;What's something that Haskell has which I can't write in &lt;10 mins in Java and then keep using it indefinitely and it'll be as easy as doing it in Haskell? Anything to deal with your domain specific logic of course. Write a a queue in Java which is thread safe and does not require locking it to read safely. &gt;You claim that you're unbiased and aren't trying to create strawmen, then yet again you go and insert reduntant if statements and lines within your java examples which could be done without, just to make the java program seem longer. ROFL yeah you shaved off all of 9 characters there, go get yourself a cookie. &gt;All you're doing is showing me really SIMPLE things which are built into Haskel, and which will require a programmer to write methods for them which will take them 4-5 mins to write and test. And then those methods will do the same thing forever and ever as the built in Haskel code. Ah yes that utter lack of imagination again. You can't possibly extrapolate how a SIMPLE example translates into a more complex one can you? &gt;Neither do you have to in Java once your method is written! Except every time you have to write a method in Java it takes 10 times as much code. But sounds like you don't write a lot of your own code, and probably just glue examples from stackoverflow together into some cargo cult spaghetti. &gt;Although I bet that the source code for this filtering in Haskell checks for nulls and blanks the same way as the java contact method does! Unlike Java, Haskell doesn't have allow unchecked nulls. It provides actual safety and guarantees about data integrity when writing code you see. &gt;If you wrote an employee management system, will you hardcode the 5000 employees of the company into an array / list within your source code? Stop attempting to cheat, tell me how you would filter from the 5000 employees stored in the database / csv file / xml file / whatever file that Haskell/your fetish languages use. Not from a 4 element array. You would filter items from a csv or an xml file in **EXACTLY** the same way, because filter is lazy and doesn't retain the whole sequence in memory. (with-open [rdr (reader "employees.csv")] (-&gt;&gt; rdr line-seq (map (fn [line] (.split line ";"))) (filter (fn [[name, vacation]] (&gt; (Integer/parseInt vacation) 5))) doall)) How much Java does that take again? &gt;How many downloads then? I don't see any download statistics on there. You're so pathetic, I showed you a project that's followed by 59 people and used in production by 2 compaines and you have the balls to ask me on statistics without having shown ANYTHING of your own? &gt;I've written several projects which are used by &gt; 10k users. I can't tell you what they are as it will identify me in RL. Identify you as being full of shit IRL you mean? &gt;But I don't have to prove anything either way, you are the one who thinks he's capable of deciding who is a real programmer and who isn't, therefore you're the one who needs to prove his credentials. Of course you do, you claim to be qualified to judge how languages compare to one in terms of expressiveness and productivity. It's crystal clear that you have no clue what you're talking about here. &gt;I'm quite good at learning complex things. Only when they offer a benefit though. Yeah kind of like a blind man scoffing at this whole seeing thing, after all being blind's been working out well so far, why change it. &gt;All you've shown me is an extremely ugly looking language, which makes me want to puke at my screen by seeing its code The horror, it's not familiar to you! Mommy, mommy bad man showed me something new and different and I'm scared! Oh and I guess [this guy](https://docs.google.com/viewer?a=v&amp;q=cache:wlTJdRbLmjoJ:www.st.cs.uni-saarland.de/edu/seminare/2005/advanced-fp/docs/sweeny.pdf+&amp;hl=en&amp;gl=ca&amp;pid=bl&amp;srcid=ADGEESitHzJBF6k9uvz8PIEFN8zzIiaW5NZRcUdJDLXFPm4Kox6neHCdi1hkRt2s335TdcRH246jx1aMG7SHIzubPMFpdRrI0yJ5eyUNchhqaOlbIS5owcbMP6tqupZDcKudgHboxCex&amp;sig=AHIEtbSv3SmFP55RS2UdPLAlabFeam42YA) probably doesn't know what he's talking about either. Good luck with your life buddy, I'm done talking to you, I think I'll have better luck with some apes at a zoo than here.
I haven't used Karel in years. All I can offer is my sympathies, I completely understand how terrible that system is. However gwevidence is right, without the code we can't even begin to derive what's going on.
I'm very new to Eclipse/Java, so I'm not sure what code to post. But I *can* show you what I see... http://i.imgur.com/PtyMr.png http://i.imgur.com/9BVVQ.png And here's a very low quality picture of what the professor sees when he runs one of the classes. Note: I shouldn't be seeing that exact map, but that's the layout that I'm supposed to see, and I don't see any of it. http://i.imgur.com/Bkzfv.png
I don't know if it's just my version of Eclipse, but pressing F5 is the Refresh keybind. But if by that you meant run the file CheckerboardKarel.java, it looks like this: http://i.imgur.com/uDyqt.png
Thank you very much for the assistance! :) Much appreciated
In the meanwhile, try this: http://stackoverflow.com/questions/8769576/how-to-run-stanford-karel
You should listen to this presentation from one of the masters, Josh Bloch: [Link](http://www.youtube.com/watch?v=heh4OeB9A-c) It covers a lot of great points that aren't easy to come up with on your own. Designing good API's is an extremely difficult art.
After reading [this](http://www.infoknol.com/stanford-karel-setup-guide/) page, I'm fairly sure my problem is that I am using the most up to date JRE, which is 7, but the Stanford Eclipse that I'm using is only compatible with JRE 6. Unfortunately for me, I ran into this error when attempting to install the JRE 6: http://i.imgur.com/FVDn1.png
Actually, in the run configuration setup the JRE version to be used can be set. Just select use project JRE. Don't install anything yet. Try the steps in the link I posted.
**Problem fixed!!** :D Conclusion: I'd missed the directions to install the JRE needed for this specific cause, which is located on their website. The link you posted reminded me of this, and also showed me how to set it to the default JRE to be used in Eclipse. Tyvm for your help! You rock! :D
Great! Also, remember, that some of the private methods (as shown in the video lectures) that you would write in the Karel programs, they are already present in SuperKarel. So change the 'extends SuperKarel' to 'extends Karel', and it would work. Just something I remember from my time of writing these karel programs.
For the future, ALWAYS post actual code, no a screenshot of it. Pastebin.com can be used for larger snippets.
Thank you, this is perfect. I'll start with this and any others folks have.
Niiiiiice 
Yea, JavaZone is getting a little less awesome, and I find myself wanting to hang out in overflow all the time because there I can skip the useless talks without having to get out of my seat... Perhaps I'll speak somewhere else instead next year now that I think about it...
I really liked it. Lots of NoSQL-related stuff, a bunch of languages that run on the JVM, interesting people and a nice break from the normal job. I'd rather go than not, that's for sure.
What's wrong with Java's multithreading support, exactly? Its intuitive and worked perfectly for me the times that I used it. &gt; Oh let's see here, you have a website with millions of clients, who need to see current prices of your products. You have one administrator who sets these prices. You should be able to update those atomically, but you only want to be able to lock the data when you're writing it. Ever heard of transactions? Almost every database has them. You haven't told me how you would filter to get the employees who took more than 5 days off in march 2012. Still waiting for that.
I don't think you can call it a new feature if it hasn't been released in a standard Java SE release yet. But maybe that's just me. There is still time for it to change, although I will admit that it looks decided at this point.
Thanks, I took a quick look. &gt;This particular syntax was chosen principally because something similar has been generally well-received in other Java-like languages (C# and Scala), and a clearly "better" alternative did not present itself. It has the advantage over alternate proposals of minimizing bracketing noise around simple lambda expressions. When some extra bracketing is needed to visually distinguish either the full lambda expression or its body expression, parentheses are naturally supported (just as in other cases in which operator precedence is unclear).
[My talk](http://vimeo.com/49299024), titled "Linking data without common identifiers". Unfortunately, everyone in the audience understood Norwegian, so the talk is in Norwegian. Slides in English.
Don't get me wrong, I like Java well enough, but it's always good to know a few other languages. NoSQL is very relevant for big data problems that a lot of us face, regardless of what language we use for application development.
Totally agree, was pretty disappointed this year. Respect to all the volunteers working to make this happen, but this year just wasn't awesome. I miss more speakers from relevant companies like Google, Oracle, Amazon etc. I miss talks around core java, java ee etc and Android. Really, they should spend more on good talkers and less on food, drink and concerts. I have been to almost every JavaZone conference since 2002 and every year the after party has been pretty dull. Instead of bands they should hire guys like the [Java Posse](http://javaposse.com/) to do a live show. And the stands.. ouch! Where are the tooling companies, appserver guys, heck even Atlassian was missing. Almost exclusively a bunch of consultancy companies showing off how "googlish" they are. As a colleague said: *"At least they have found a way to cope with the problem of the overcrowded sessions they had a few years ago. The solution: make every session rather boring"* We went to Devoxx last year and going back there next year. That was an awesome conference. I have always supported JavaZone and will continue to do so, but things need to change to keep attracting people, speakers and the big companies. Guess the best way to contribute to change is to contribute as a volunteer.. 
Hey, listen up mate, I'm just pointing out your usual way of replying to everything from a functional perspective. It's like someone asking what's wrong with Gazelle bikes, and some car guy jotting down a list like: * Doesn't have a trunk to store stuff * Only one extra passenger (sitting comfortably that is) * Can't really go faster than 30 km/h on a flat terrain (for most people 20 km/h is more realistic) * No build-in radio or navigation * Rarely have a windshield * For those rare models having a windshield, doesn't have windshield wipers * Not allowed on the motorway That's all fine and dandy, but there's nothing specific to Gazelle there and it's just about cars vs bikes.
&gt;When you choose to store your data in .csv files rather than a transactional database, I'm not surprised you'd have this issue. Techniques from 1970 don't work well with techniques from 2012 Because data only comes from relational databases right... In the real world, which you seem to be blissfully insulated from, data comes from all kinds of sources, such as other services and systems you might interface with. You don't always have a database as crutch, not to mention the performance and maintenance implications of having your application logic live in your db, not that truly is a technique from the 70s. &gt;Actually no you didn't. You only showed me how you would get someone who took 5 days off, but those days could've been taken off at any time. I asked to get people who took 5 days off in a specific month, e.g March 2012. Still waiting for that. Maybe next time you should provide a spec instead eh, but sure, assuming that's our csv: Bob;7;11092012 Jim;1;111052012 Jane;1;11072012 (let [format (new java.text.SimpleDateFormat "ddMMyyyy") august (.parse format "01082012")] (with-open [rdr (reader "employees.csv")] (-&gt;&gt; rdr line-seq (map #(.split % ";")) (filter (fn [[name, vacation, vacation-start]] (and (&gt; (Integer/parseInt vacation) 5) (.. format (parse vacation-start) (after august))))) doall))) have yet to see it in Java, probably cause you have no idea how. &gt;And I didn't tell you to use a csv, I said use whatever you would use for storing data on 5000 employees in Haskell. You chose .csv. You specified it as an option, so live with it, but anybody with half a brain would realize that aside from the parsing logic, everything else stays the same. If it's xml I'll just read the xml natively. If it's a service it might come in JSON, if it's a database then I'll probably just tailor the select query. Point is I can easily deal with any of those situations, while you apparently can only work with a database. &gt;And given that I asked you first, you should answer it completely first before I'll show how it'll be done in Java. Given that you're making up a problem you should demonstrate you can actually solve it and to give a reference implementation. Clearly you're not capable of that. Your ability to parse a csv in Java appears to be as mythical as your open source projects. You've demonstrated exactly zero ability so far. I guess now you can just clumsily copy might solution right :P 
&gt; In the real world, which you seem to be blissfully insulated from, data comes from all kinds of sources, such as other services and systems you might interface with. Ok, so give me an example of something where you would get data from other services or systems, and that data has to be simultaneously available to all 100 of your threads who'll want to make changes to it instantly? Because this sounds like one of the strawmen problems you come up with, which no one will actually ever need to solve. Much like all the other examples you've provided. &gt; assuming that's our csv: Can you explain to me the columns of that csv? First one is the name, what are the next 2 columns? Because it doesn't seem to me like you are logging all the days that each employee takes off. Say the user of your application wants to see all the days that Bob smith took off in june 2012, how will he see that with the .csv file schema that you've come up with? I wouldn't use a .csv to try to solve this problem in the first place. It would be trying to fit a peg in a square hole. Instead I would do this: SELECT COUNT(*) as daysOff FROM vacation_log WHERE employeeId = ? AND MONTH(timestamp) = ? AND YEAR(timestamp) = ? Only a 1000 times more readable.
projecteuler.net 
[projecteuler.net](http://projecteuler.net), for the lazy.
Best advice I have is, "use lots of them". There's a lot of APIs that you use that are clearly really nice to work with. And then there are those that aren't. For example, crack open php, then use mysql, mysqli, and pdo to solve some trivial problem. Then try JDBC in java to do the same task. Go out and try opengl, java3d, and directx. Then look at the SDL documentation. If you're comfortable with C, go try some differing APIs there. At risk of going with the database theme again, try sqlite3, then mysql, then postgres. See what you like. GUI APIs are great to compare, too. In C++, try out FLTK vs wx vs qt. Then try out gtk1 and MFC. For java, give swing then awt a good try. X11 vs XAW vs Motif, also an experience. What facets in each of them do you like? What do you dislike? You don't even have to try all of them. Look at the documentation, search online for tutorials. See what you naturally gravitate to and would choose to use. Some of these APIs I've listed are essentially crimes against humanity. Some of them are a pleasure to use, where the concepts you need to express are trivially expressable, leaving very readable and modifiable code. Until you've actually *used* a lot of APIs [and really sat down and thought hard about what you did], designing good APIs is hard. Someone else in this thread already linked as great video on the subject, that's worth a watch.
Project Euler isn't really for "projects" but more for puzzles which flexing programming muscle.
&gt;Ok, so give me an example of something where you would get data from other services or systems, and that data has to be simultaneously available to all 100 of your threads who'll want to make changes to it instantly? Because this sounds like one of the strawmen problems you come up with, which no one will actually ever need to solve. Much like all the other examples you've provided. You keep parroting that term, according to you anything that you haven't done is a straw man. Just because you're an inexperienced programmer who's never had to solve any real problems doesn't mean the problems don't exist. It just means that you have little experience doing things. And I already gave you an example of that go back and read it until you understand it. &gt;Can you explain to me the columns of that csv? First one is the name, what are the next 2 columns? Because it doesn't seem to me like you are logging all the days that each employee takes off. Why don't you provide a spec that you solve in Java if you don't like it. And why don't you provide a Java implementation of my code. Oh right you don't actually know how do you. &gt;Say the user of your application wants to see all the days that Bob smith took off in june 2012, how will he see that with the .csv file schema that you've come up with? Hey, you know how you like to use that term straw man, well here it is in action. You keep coming up with contrived examples, which you yourself don't know how to solve apparently. &gt;I wouldn't use a .csv to try to solve this problem in the first place. It would be trying to fit a peg in a square hole. Yes, because you always have the data coming from an SQL database. Why do you even need Java then? Just hook up your browser to a db while you're at it. Seems like SQL is the only thing you know. &gt;Only a 1000 times more readable. Yeah, because it's **DECLARATIVE** you stupid shit. Did you know that SQL is a functional language? Thank you for making my point for me, Java is a terrible language and you yourself admit that you would rather use a declarative functional language to solve problems. Now shut your stupid mouth and go flip burgers or whatever it is you REALLY do for a living. 
This is what I've been trying to do but I can't find anything I'm interested in. Or I just don't know where to look. 
Thank you much, I shall start consuming the APIs and documentation in masses!! 
We have 4 projects [here](http://xeiam.com/javalibraries.jsp). XChart needs pie and bar charts. Pm me for more details if interested. Each project is hosted on GitHub, and in the issues section, you can see what's in the pipeline. We're also working on a 3-d virtual environment for testing machine learning algorithms, but the project is at this point too new.
I second that! A pain point of Java is that it is so fast, that code will be done executing before you know it. Python on the other hand is comfortably slow. You can actually see it executing line by line, plowing through the field of code. This makes it much easier to understand for beginners. With Python you'll also have ample time to enjoy your coffee while your code slowly runs to completion. You'll have time to read the manuals, etc. All of this indeed makes Python better for beginners.
I think he wanted to use the compare() method in his contains() method, because he can't be sure whether objects in his collection implement the equals() method correctly. This will not be a problem anymore after he fixes the issue with the array. Another case would be if the argument passed into the contains() method is null, so I would add a null-check at the beginning of this method. ===== The clarify the problem with the array size: You normally have a variable containing the size of the collection. int size; everywhere where currently the array size is used, you now use the size variable. In your add() method you have to increment it by one and you have to check whether the array has enough space for so many objects before you add them. And in your remove() method you have to decrement it of course. Here's an example list: public class SimpleArrayList&lt;E&gt; { private static final int DEFAULT_SIZE = 2; private Object[] contents; private int size; public SimpleArrayList() { this(DEFAULT_SIZE); } public SimpleArrayList(int initialSize) { contents = new Object[initialSize]; size = 0; } public void add(E element) { if (contents.length == size) { // make sure there is enough space Object[] newContents = new Object[size * 2]; System.arraycopy(contents, 0, newContents, 0, size); contents = newContents; } contents[size] = element; size++; } public boolean contains(E element) { for (int i = 0; i &lt; size; i++) { if (contents[i] == element) { return true; } } return false; } public E get(int index) { if (index &lt; 0 || index &gt;= size) { throw new IllegalArgumentException("index &lt; 0 || index &gt;= size; index = " + index + "; size = " + size); } return (E) contents[index]; } } ===== &gt; E[] collection = new E[0]; I think it is not possible to create a generic array... Would be very useful if you could do this, because you wouldn't need all that casting.
&gt;You're like an English speaker screaming at how horrible Japanese is, because it's all squigly and it sounds funny. And then you are like a French speaker who refuses to speak anything else than French and has trouble with the mere idea that French is not the only language in the world, let alone the number 1 language.
&gt;In the real world, which you seem to be blissfully insulated from Says the person who thinks Clojure is the main programming language in this world... 'nuf said?
&gt;you stupid shit. I don't think there's any need for that, is there?
&gt; I think he wanted to use the compare() method in his contains() method Maybe, but I read it as a beginner who perhaps hasn't thought of using equals - rather than something more complex reasoning (hence why using Arrays to do what ArrayList already does &gt; &gt; E[] collection = new E[0]; &gt; I think it is not possible to create a generic array... Would be very useful if you could do this, because you wouldn't need all that casting. oops - you are right
&gt;This word you're using, I don't think it means what you think it means. Just wondering, but do you work in a team with other programmers and other people, or are you a loner working individually? In the first case, don't they think you are a rather tiresome person to work with? Do you ever get feedback about that? Or are you only like this online?
Open source software, bro
See the difference is I respect people I work with and I don't consider them to be full of shit. :)
&gt;Bullshit. I've been coding for 7 years full time. If you have any examples, why don't you just give them rather than spouting all these ad hominems? Yet you have nothing you can actually show code wise, and what you've said indicates a low level of skill and understanding of programming in general. &gt;I just showed you how I would do it in Java, retard. Did you not see the SQL query that I gave you? And you HAVEN'T solved it because you're not logging the vacation dates. You're only logging the count of vacation days. And you haven't told me what the other two columns in the csv are. Do you understand that Java and SQL are not the same language even? No, they you really are the retard here. Figure out what the other two columns in the csv are yourself. After all you have 7 years programming experience, or so you say. That claim doesn't seem very credible from somebody who can't read 6 lines of code and a csv. &gt;Apparently you don't know how to read because I provided an SQL query which will solve that exact problem. And you think that someone who uses an employee management system will never need to see what days that a particular employee took off? You are a retard if you think that. Ah, yes when asked to provide a solution in Java you provided a solution in SQL. Is that how you follow requirements at work too? You can't even understand the difference between examples and real life. If you have your employees in an sql database sure, why not use sql. But there are millions of situations where you need to work with data without having an sql database. An experienced programmer with 7 years experience would know that. You don't, and the fact that you can't even imagine a situation like that implies complete and utter lack of skill. Period! Here's a real world example for you. You're aggregating [HL7](http://www.hl7.org/) feeds from multiple hospitals and you have to process those in realtime. &gt;I use the right tools for the right job, moron. Why would I make life a 1000 times harder for me by storing data on 5000 people in a csv file when there are far better tools available? No, you only have 1 tool, and when all you've got is a hammer everything looks like a nail. See you're using a straw man again. I never said I would put 5000 people in a csv or that it's a good idea. You keep arguing against that. **THAT** is in fact a straw man. What I said, is that if I had data coming from a **NON SQL SOURCE** I can easily handle it. You on the other hand have no idea how. Being the idiot that you are, you keep talking about your 5000 employee csv. &gt;SQL is not a programming language at all, moron. All it is is a query language for querying a database. Ah, look you show your ignorance and stupidity once again. Maybe you should read up on [Turing comleteness](http://en.wikipedia.org/wiki/Turing_completeness). But again, you'd know all this if you were actually a programmer with any education or experience. 
Seeing as you've "never asked for coding help before" I'll give some pointers. However much is common sense. Note not all of these you have broken, but some. **Be specific**. It isn't often "I can't use English", it's "I don't know how to say 'Thanks' in English". "It threw a Null Pointer Exception with trace 'blah' when I ran it " is pretty good (especially with sample input data if any). **Say [what you have tried](http://whathaveyoutried.com)** or looked at to solve it and what succeeded as well as what failed. **Give an outline** of the problem you are solving (sometimes you are `doing it wrong`) however don't give us just the outline and expect people to write lots of code. **Posting code** is useful, but only posting sufficient code. 70 lines is probably the top end. You don't have to post the whole file - you can '...' out irrelevant bits - we can always ask. If I have to scroll, it's probably too much frankly. **Ensure it's a repeatable problem**. We're unlikely to be able to fix a problem if it only happens once or twice - find some logic to occasional bugs. **Remember to search**. Most problems aren't original. The context differs, but not the error generally. `Exception in thread "main" java.lang.NullPointerException` is enough to get a thousand results probably. **Accept and acknowledge a solution that works**. You'd be surprised how often people hit the same problem 6 months later, search it, find their own question with no indication of which one fixed it ;) Some good essays on asking for help solving programming problems: * http://www.chiark.greenend.org.uk/~sgtatham/bugs.html * http://whathaveyoutried.com
&gt;&gt;Yet you have nothing you can actually show code wise, and what you've said indicates a low level of skill and understanding of programming in general &gt;If you have any examples, why don't you just give them rather than spouting all these ad hominems? How about you show us some of your brilliant code there Batman. &gt;Why would I use a .csv file to store data on 5000 employees? I'm not a retard, unlike you. Also: I dunno, you're the one who started talking about csvs in the first place. And the fact that you can't separate examples from real world does make you quite a retard. &gt;And you HAVEN'T solved it because you're not logging the vacation dates. You're only logging the count of vacation days. And you haven't told me what the other two columns in the csv are. Yes, mr. programmer with 7 years experience can't divine what 2 out of 3 columns in the csv are given a sample csv along with source code to parse it. Yup, smells like we've got ourselves a retard! &gt;Yeah, like if you inherit a system from the 1970s, in which case you'd persuade the management to migrate their data to a database, unlike you who would be happy working with antiquated solutions. Oh that's funny, if you weren't a retard as you claim, you'd know that sql IS the technology from the 70s and it's not a hammer you can use for every problem. In fact, it's completley inappropriate in many modern environments, where data needs to reside in memory, and you might be running a cluster of machines sharing that data. Having a single bottleneck that's the database is just not going to cut it. &gt;However, in this situation, I said you were designing a system from scratch and you had your own freedom of choosing how to store the data. However, in this situation, mr. retard, we weren't focusing on the data store, but on whether your language has facilities to manipulate data. You implicitly admit that it doesn't by continuously referring to SQL. &gt;You chose a .csv file and are now whining like a girl because you can't actually solve the problem in a proper way (logging the actual vacation dates rather than just a count) in a .csv file. And you're angry at me because I chose the right tool for the job. Only whining is done by you here. Because the csv is completely tangential to the point being made. If you had any brains, you'd realize that, but being a moron you continue clinging to this idiotic argument of yours. &gt;You run one thread for each hospital and process them in parallel. How does that have anything to do with the problem at hand. You need real time aggregation and processing of large volumes of data. You can't be serializing it to a database and then running queries on it. You have to do processing in memory, and you mr. retard, don't have the tools to do that. &gt;What the fuck, you liar? I told you, you're designing a system for 5000 employees in Haskell, use whatever you'd use for storing this system, a database, a .csv, a .xml. You chose a .csv. Now you're saying you didn't choose a .csv file for the solution? LIAR! Just like when you inserted redundant statements in your java concat method to make it seem longer. Lying and deceiving is in you, man. What the fuck indeed, I'm not going to design a full blown system to show you how to parse some text. If you think that you're really fucked in the head. You're not a liar, you're just a fucking idiot. Let me refresh your memory on what the context here is: &gt;Stop attempting to cheat, tell me how you would filter from the 5000 employees stored in the database / csv file / xml file / whatever file that Haskell/your fetish languages use. Not from a 4 element array. Being minimally exceptional, you could not understand how a filter function that works on a list, could be applied to data coming from the database / csv file / xml file / whatever file. I showed you precisely what you were asking. Then being a slimy little scumbag, you started shifting the argument towards designing some employee system. Sorry, but you can go fuck yourself. I'll also point out once again, that you haven't shown any code of your own, and as far as I'm concerned you have no fucking clue how to write it. Hence why you keep arguing in a circle, you're all talk and no skill. If you claim that's an ad hominem, then show us the money instead of being a little bitch. 
This makes a bit more sense to me. I'm sorry if I'm being dense, but is the Direction example substantially different from say public static final int NORTH = 0; ?
Yeah, I think I see their value. I just have trouble with the examples because they are, frequently, silly. Would an acceptable use be for, say, game states? I'm working on a platformer, and I could see this being useful for keeping my code clean and readable, but I'm not sure if this is the point of enums: public enum State{ inGame(true, false) inMenu(false, true) public boolean running, drawMenu; State(boolean running, boolean drawMenu){ this.running = running; this.drawMenu = drawMenu; } }
&gt; How about you show us some of your brilliant code there Batman. I asked you to give me an example of when someone would actually need to access data from other services or systems, and then have that data be available instantly to dozens of threads. You've not given any, proving that its a strawman problem. &gt; Yes, mr. programmer with 7 years experience can't divine what 2 out of 3 columns in the csv are given a sample csv along with source code to parse it. Yup, smells like we've got ourselves a retard! How do you expect me to read your mind? If I had to guess I would say that the 2nd column is the count of days taken off, and the 3rd column is the timestamp of the month in which the time was taken off. However you're not logging the days when the vacations were actually taken, hence you won't be able to show any records of the days that an employee took off. Also, its a piss poor storage method because when you want to update the count of the days taken off, that would be hard as fuck with your .csv method. &gt; it's not a hammer you can use for every problem. It IS a hammer you should use for storing any amounts of large data especially when you need to be able to filter it in many ways. &gt; In fact, it's completley inappropriate in many modern environments, where data needs to reside in memory So if you were building a clone of facebook, you will store all the data in the memory. Fuckhead. &gt; Having a single bottleneck that's the database is just not going to cut it. Yeah, that's why google, facebook, reddit, yahoo, hotmail, etc all use .csv files for storing their data. Or even better, the memory. You don't have a clue what you're talking about. &gt; However, in this situation, mr. retard, we weren't focusing on the data store, but on whether your language has facilities to manipulate data. You implicitly admit that it doesn't by continuously referring to SQL. No we weren't. You were claiming that filtering capabilities within a programming language were all important. I was saying that in most cases SQL is the most appropriate tool for filtering any large dataset rather than trying to implement it in your language. To prove my point, I asked you how you would do a very common and real world example of storing and filtering the data of a 5000 employee company to find the employees that took more than 5 days off in a particular month. I was expecting that if you had any sense, you would say that you'd create a database for it and use SQL to filter them, and hence prove my point. But you proved yourself an even bigger moron than I expected by choosing to use a .csv file, and hence being incapable of solving the problem. If you only store a count of the vacation days, you show how limited your solution will be when you can't show the dates that someone took off, and how hard it would be to update the count of the vacation days, compared to using a database. &gt; How does that have anything to do with the problem at hand. You need real time aggregation and processing of large volumes of data. You can't be serializing it to a database and then running queries on it. You have to do processing in memory, and you mr. retard, don't have the tools to do that. Exactly how would you have to process them which can't be done in Java? Be more specific because I'm not seeing the issue. &gt; What the fuck indeed, I'm not going to design a full blown system to show you how to parse some text. Nobody was talking about parsing text. Only you would think about getting the employees who took off X days in Y month as parsing text. &gt; Let me refresh your memory on what the context here is: Yes, read that again: &gt; tell me how you would filter from the 5000 employees stored in the database / csv file / xml file / whatever file that Haskell/your fetish languages use. Hence, it was YOUR choice to determine how the data would be stored. I said use whatever your fetish languages use for storing that level of data. You responded by choosing a .csv file. You fucked up. If you'd choose a SQL db, then you prove my point that for filtering any kind of large dataset you'd use SQL, hence haskel having some built in filtering functions aren't good for anything in the real world. &gt; I'll also point out once again, that you haven't shown any code of your own, and as far as I'm concerned you have no fucking clue how to write it. Hence why you keep arguing in a circle, you're all talk and no skill. If you claim that's an ad hominem, then show us the money instead of being a little bitch. Because retard, we're talking about the capabilities of Haskell vs java here, not which of us is a better programmer.
&gt;People without any actual interest in CS and who refuse to learn or understand anything new and unfamiliar. There you go again. *That's* your problem. Accusing everyone of being either dumb, an idiot, incapable or unwilling to learn, or whatever, just because they don't like your precious Clojure.
I couldn't agree more. Mocks are for a specific form of testing - which only applies when you have clear inputs and output for the isolated case you are working with. In tests of complex systems, this can be ideal - you can test the behaviour of one piece of the system without affecting any other. However, this is *clearly* not the ideal for every component in a piece of software.
&gt;There you go again. That's your problem. Accusing everyone of being either dumb, an idiot, incapable or unwilling to learn, or whatever, just because they don't like your precious Clojure. Except that's not at all correct, it's got nothing to do with you liking or disliking Clojure or even FP in general. The reason I think you act like idiots is because you're asserting things about a style of programming which you haven't bothered to learn. If you want to debate something, you first have to understand it. If you debate something you don't actually know and haven't used, then that does make you an idiot.
&gt;Wrong. I looked at a couple of Haskell tutorials and found I hated the syntax and the overuse of brackets, using whitespace for defining functions, among many other things. Exactly **WHY** you are a moron. You skimmed over a tutorial and rejected the language on the most superficial of reasons. Just because the syntax is different from what you're used to. You haven't actually **learned** anything. Come back when learned how to build software in the functional style, understood the features and how they differ from what you currently know, and actually built software using it. Until then you're just an idiot shooting his mouth of, because it's easier than actually learning something. All your arguments boil down to two things: a) I'm not familiar with the syntax b) I don't understand the implications of the language features provided or how to use them You're like an idiot who looked at a Japanese wordbook once and declared Japanese to be a horrible language because it's not at all like English. &gt;You've been able to show nothing except your strawman scenario of when 100 threads need to be able to modify data stored in memory rather than a database, for which you've been unable to provide any examples of something which will actually need that function. Of course I've provided numerous examples which you didn't bother reading. One being that you're interfacing with external services, and a user makes a query the results of which are aggregated in memory. The user then needs to be able to filter, sort, and search the results. Only an idiot would think that it's appropriate to first dump all that data into an SQL store simply to be able to do that. &gt;Your other strawman examples included writing functions to filter even and odd numbers or concat a bunch of strings, which are ridiculously easy to write in Java. You keep using that word, but you don't actually understand what it means do you. You have to be pretty fucking stupid not to know the difference between straw man and an example. The examples show how you can **compose** higher order functions to achieve complex functionality. This is not possible in Java, because it doesn't have functions. &gt;If Haskell was dramatically better than Java, then yeah, I'd be willing to learn it. However you've failed to provide any convincing case for that, in fact you've put me off from learning it. Yeah, I'd probably fail to prove it to a chimp too, but the opinion of a chimp doesn't really matter for much does it. I don't give a flying fuck what you learn, I think you're a waste of skin and it's clear from your comments that you have no clue about programming. 
Ooooh, that character conversation tree one is an excellent way of jamming it into my brain. Thanks, it just clicked.
What does your stack look like now? Java version? App server? etc?
&gt;I didn't skim over it. I actually tried to read it. But when it started talking about how whitespace is used to define functions, i started to puke. When it mentioned there are no objects and its completely a functional language, I stopped reading. Oh you tried to read amazing, sorry the whole reading thing didn't pan out for you. &gt;I learnt PHP and VB before I learnt Java, and only did functional programming before I learnt about OO. PHP is not a functional language you stupid fuck. &gt;Read my last comment where I raped that example. I think only thing you rape is the sanity of people who have the misfortune of interacting with a low life such as yourself. &gt;Only an idiot would think its a good practice to retrieve thousands of records from a web service, and not store those records in a database to provide a good user experience, and load those data quickly the next time the user wants to view them since they're stored locally, rather than fetching them from the web service each time the user wants to see them. Only an idiot would assume that they have control over that. &gt;cry moar Is the monkey trying to communicate? 
Try something like this. public static void main(String[] args) { NumberFormat numberFormat = new DecimalFormat("#,###.00"); Scanner sc = new Scanner(System.in); System.out.println("Number:"); System.out.println(numberFormat.format(sc.nextDouble())); }
I feel like you are in my class... Cross? Anyways, I had to do this for a project so here's what I did: import java.text.NumberFormat; //This goes at the beginning import java.util.Locale; //This would be an example of it in use. public String toString() { String output = "Name: " + studentName + "\n"; output += "ID Number: " + studentNumber + "\n"; output += "Tuition &amp; Fees: " + n.format(tuitionFees) + "\n"; output += "Scholarships: " + n.format(scholarships) + "\n"; if (tuitionFees &gt;= scholarships) { output += "\nYou owe: " + n.format((tuitionFees - scholarships)); } else { output += "\nPlease pick up your check for: " + n.format((scholarships - tuitionFees)); } return output; } 
Alright thanks. It looks like I was able to find someone in my class (small world) so I'm going to give what they suggested a try. I'll keep yours in mind for future reference. Thanks for the help.
Ah right. Thanks! I just ran it and everything worked out great. Also, you were spot on. We definitely have that class together haha. Thanks again for the help.
The activity. I've only skimmed it but it looks intense. Luckily I know some older guys who've been through all the Javas. I'll end up getting them to help.
Yeah. Apparently Java 2 with Hendrix is a lot better. (one could only hope) But yep, I skip Cross half the time so I never understand what we're doing.
Just a warning: Storing dollar amounts in floating point types is a recipe for disaster. If you have any choice, don't do it. Floating point is unreliable, particularly around 0. Always use BigDecimal or an integer type for money.
When I have nothing to do I try to find a weakness in one on the programs which I use on a daily basis and improve it or write my own program. My current project is writing an irc client as netbeans platform application.
I see, be sure to mention it to the people that matter. There is a reason why people don't use BigDecimal and it probably has something to do with "not teaching about BigDecimal".
Great!
But it needs to be double so you can store the rounded penny fractions into your private account!
I love how sure you are of shit you clearly have no understanding of. Let's see what wikipedia has to say: &gt;[imperative, object-oriented, procedural, reflective](http://en.wikipedia.org/wiki/PHP) You sire are an idiot and a moron, every time you open your mouth you embarrass yourself. Functional languages are a family of languages rooted in Lambda Calulus, which emphasizes functional application and composition, side effects free programming and immutability. Get the fuck off reddit, get yourself a book and learn something you waste of skin.
You know what I realized that I've got better things to do than to keep talking to you. You win buddy, have some internet points or something.
I'm a huge fan of Spring but I don't think that its use would be appropriate here. OP wants to create a new endpoint layer, that is all. Implementation of the Spring framework (or any other application framework) would require that the entire app be refactored. If his application is designed properly, (that is, his servlets are merely adapters to a facade or service implementation layer), adding support for REST should be trivial.
I second this, pick the one that is the clearest and let the compiler worry about speed.
Definitely this! At minimum, the gain from readability is pretty significant. 
Jersey is also a good choice from a technology perspective. The licenses are different, though: Jersey is dual-licensed CDDL1 and GPL2, while RESTEasy is Apache 2.0. It is worth reviewing the terms of these licenses to see which one fits your needs the best.
You could definitely use Spring MVC as a REST facade for your existing services. You wouldn't need to re-implement anything in your service layer.
Then the teacher should stay away from monetary examples, until they get to the BigDecimal class. 
Okay, I'll look into it more in-depth, if it's possible to drop it into an existing project / build system. When I first poked into Spring it looked like yet another custom Eclipse distribution with more goddamn XML files inexplicably used for configuration. (I don't know how anyone could think that web.xml is a good idea and implement their own equivalent, but that's enterprise Java for you.)
It's nearly impossible to tell in the JVM as well unless you just benchmark it. The JVM cares about things like how many times its been executed and how recently. Static analysis is really better for more algorithmic problems like if a method is likely to be executed, and how often. Microanalysis like this in Java is mostly useless because you're also not guaranteed the garbage collector won't show up and completely destroy your run-time. I'd recommend using [Soot](http://www.sable.mcgill.ca/soot/) for this type of thing really, if you have to do it. There are a few real-life applications of it.
Here's a simple class using BigDecimal public class BigD { private String tuition; private String fees; private String tuitionPlusFees; private static DecimalFormat dfTpF = new DecimalFormat( "$#,###,##0.00" ); public void setTuition( String tuition ) { this.tuition = tuition; } public void setFees( String fees ) { this.fees = fees; } public void addTuitionPlusFees() { BigDecimal bdTuition; BigDecimal bdFees; bdTuition = new BigDecimal( tuition ); bdFees = new BigDecimal( fees ); BigDecimal bdTuitionPlusFees = bdTuition.add( bdFees ); //double dTpF = bdTuitionPlusFees.doubleValue(); //tuitionPlusFees = dfTpF.format( dTpF ); tuitionPlusFees = dfTpF.format( bdTuitionPlusFees ); } public String getTuitionPlusFees() { return tuitionPlusFees; } } 
funny how you realized that at the same time as you realized that i'm going to rape your multi threading example as well. Bye
You can use JSP like you would use PHP, and it'll work very much the same (except that Java is a way better language than PHP, IMHO), but mixing logic and HTML in JSPs is almost universially considered poor form in this day and age.
So why is JSP not used more or as much as PHP. Is it not as widely supported or just preference. Would I be ok to commit to learning JSP as my server language of choice? 
http://www.sitepoint.com/the-state-of-functional-programming-in-php/ 
I did provide those scenarios, you gave asinine solutions to them which you think to be great. At this point there's nothing I can really say to you. You don't understand why your solution makes no sense, and you don't want to listen to anything I say. Yet, you'd rather spend hours arguing about it than actually picking up a book and learning shit. It's kind of sad and pathetic. By the way not only did I give you real world examples of my own, I also provided a link to somebody with a fuck ton more experience than you'll ever have, who [says the same thing](https://docs.google.com/viewer?a=v&amp;q=cache:wlTJdRbLmjoJ:www.st.cs.uni-saarland.de/edu/seminare/2005/advanced-fp/docs/sweeny.pdf+&amp;hl=en&amp;gl=ca&amp;pid=bl&amp;srcid=ADGEESitHzJBF6k9uvz8PIEFN8zzIiaW5NZRcUdJDLXFPm4Kox6neHCdi1hkRt2s335TdcRH246jx1aMG7SHIzubPMFpdRrI0yJ5eyUNchhqaOlbIS5owcbMP6tqupZDcKudgHboxCex&amp;sig=AHIEtbSv3SmFP55RS2UdPLAlabFeam42YA) with a lot of examples of his own. You ignored that link like the ignorant twat you are. I love your impotent rage downvotes too, like you're going to take some of my meaningless internet points away is that it? Oh noes! You're so delightfully pathetic. 
PHP dominates a certain segment of the web application market, because the "application-per-page" model is very easy to get started with. You can put all your application code in one PHP file and drop it in the public_html folder and you get a dynamic web page. JSP can be used exactly like this. However, once you start building large web applications, the "application-per-page" model can turn ugly. That's why pretty much all other languages have abandoned this model model in favor of Model-View-Controller frameworks. So, with Ruby you have Rails, with Python you have Django, and in Java you have Struts/Spring MVC/JSF, etc. Even in PHP, frameworks like CakePHP and CodeIgniter have become popular. When it comes to choice, a lot of it is preference and a lot of it is working with what you've got. PHP works very well with cheap hosting services and is easy to set up in Apache with the mod_php plugin. The PHP standard library contains everything and the kitchen sink. This makes PHP very widely available and contributes to its popularity. I would say learn both, and also try out Rails or Django if you like. If you're just learning, don't limit yourself.
&gt; you gave asinine solutions to them What's wrong with the solutions? You've been unable to point that out, and now that you know I'm going to rape your example of multithread you're running away from that. 
Ok why the fuck not, let me as you put it, rape your solution. &gt;The first time the doctor looks up a patient, his data will be retrieved from all the hospitals and stored locally. All subsequent times, his data will be retrieved from the local db, hence eliminating the need to query the web service again. Your solution would require every hospital to duplicate and keep data in sync with every other hospital. This is opposed to everybody storing their own data and providing services for people to query it as needed. Next problem is that polling data periodically is **not** a real time solution. Now, assuming you went along with your scheme, you'd have to convince every other hospital to do this, and do the work on their systems to support this solution as opposed to simply exposing their existing data. Real world organizations have such things as budgets and project schedules. Again, something you'd know if you actually had any experience. Your solution adds a ton of unnecessary complexity, such as ensuring all the data is in sync, tracking what needs to be updated, and requires a ton of space. All because you're incapable of doing the right thing and processing results on demand in memory. It's rather amateur and shows that you have no experience working with large systems or trying to integrate with other organizations. &gt;This should be common sense to anyone who has actually ever programmed in a real environment. Yes indeed, it should be obvious to anybody who's programmed in a real environment that duplicating data everywhere makes little sense. &gt;I presume that rather than showing all 1000 records at once, you would instead show the most recent 10 records with pagination links at the bottom, or auto pagination when the user scrolls down? You don't show all the records at once, but the user needs to be able to change their selection in real time. For example I want to see all the CBC results in this date range, or I want to see every MRI that's completed or ones that are partial, etc. If you pull the data into a session on the initial query, then you can work with it in memory and provide instant feedback. If you had to do a database query for each change in filters your app would crawl, and if thousands of users were hammering your db any time they needed to do anything it would be a huge bottleneck for your application.
I will be learning java for the next to years and i think im going to go down the same path you are because i find my interest with web applications more than stand alone applications. I appreciate your reply.
Depending on which outdated blog you're reading, that might be true. However, Spring has supported annotations for years. The amount of XML required to bootstrap is no more than any other framework. As for the Eclipse distribution, that's there as a custom build of Eclipse for those who want it. It is not necessary to work with Spring. In fact, I would recommend against using it until you first learn how to implement the framework.
It just translates application logic to objective-c. You are still expected to build the user interface and the other bells and whistles from scratch. This is where most hybrid applications go wrong, Google isn't attempting to tackle that aspect and expects you to put the effort in.
&gt; Yes, in an environment where you have constant updates this is much easier than your crazy schemes. No it isn't. Simply store the date of the latest test you have on Patient Y from Hospital X, and on each subsequent view of Patient Y's records, query Hospital X's API for any new records on Patient Y since the date of the latest test on him, and if any new records are found, add them. Tons better than downloading thousands of records every single time. &gt; Right now we're able to offer the application as a simple web app, with your solution you'd need a local deployment for every user that wants to use it. Not to mention the red tape you'd have to go through to actually update the user templates. There'd be plenty of red tape to go through even to get a web app access to the data of all the patients. On top of that allowing a simple application to be installed on the user's computer won't be much harder. In any case, going through more red tape is far better than downloading thousands of records each time, resulting in tons of lag time for the doctors each time. And if the hospitals know what's good for them, they'd much rather you cache the data rather than query their servers a thousand times a day. Even if it has to run as a web app, the same solution can work if you keep the database on your own servers. &gt; Genius, so now if anybody was out of sync they'd never know and you have a patient safety issue, because you can't guarantee data integrity anymore! They will not be out of sync since each time they view a patient's records, you'd query all the hospitals for any new data on the patient since &lt;date of the latest test you have&gt; &gt; That's actually exactly what's happening, and this is the exact scenario where you have to do filtering and sorting in memory using your language instead of relying on SQL. All right, then why can't this be done in Java? If you remember I asked you, 4 days ago, for examples of anything which your fetish languages do which can't be done in &lt; 10 minutes in Java, and which will actually be used in a real world example. 4 days later your example comes around to saying, yeah well you can do it in java in &lt;10 minutes too 
I love TestNG with Mockito. A code coverage tool like Cobertura can help ensure you've considered all the appropriate tests.
netbeans highlights all methods that are overridden or overriding or implement an interface ... so just scroll thru the code and look for the "o" in the margin. you can click it to see a list of the overriding methods or use alt-f7 to search for them (this is what i do - i hate the mouse)
&gt;There'd be plenty of red tape to go through even to get a web app access to the data of all the patients. On top of that allowing a simple application to be installed on the user's computer won't be much harder. In any case, going through more red tape is far better than downloading thousands of records each time, resulting in tons of lag time for the doctors each time. Wow, you know a lot more about my job than I do, that's pretty amazing. Turns out that yes it is much harder, and then you also have the issue of storing patient data on every machine, which means it can be easily stolen and leaked. Every one of our apps has to go by the privacy officer and have a risk assessment done, and their preference is to keep as little data on the client as possible. &gt;In any case, going through more red tape is far better than downloading thousands of records each time, resulting in tons of lag time for the doctors each time. Except you're solving a problem we don't have. There isn't any lag time because we're on an intranet and we have fast connections with our partner sites. While people do lose machines and data does get stolen, which then becomes a news event. The web app approach guarantees that no data is stored on the machines, and it means that the users can access it from anywhere as opposed to specific machines installed with a particular application. &gt;Even if it has to run as a web app, the same solution can work if you keep the database on your own servers. One second you're concerned about efficiency, and the next you suggest going to the db every time user wants to view the data differently? &gt;All right, then why can't this be done in Java? If you remember I asked you, 4 days ago, for examples of anything which your fetish languages do which can't be done in &lt; 10 minutes in Java, and which will actually be used in a real world example. Ah, but isn't this going back full circle? I gave you a simple solution and asked you to provide a Java one. Instead you spent 4 days arguing how it must be done through SQL. &gt;4 days later your example comes around to saying, yeah well you can do it in java in &lt;10 minutes too It can, but you still haven't done it :) But all these 4 days of back and forth and you're still missing the original point, which wasn't all that complicated. The example wasn't about filtering, it's about being able to use simple generic functions to build up logic declaratively. Majority of the logic in a functional language is achieved by combining existing functions from the standard library. These functions are already written in an optimal way, and they already do all the error checking and work well with one another. That's the power of having actual code reuse. When you write code in Java you spend 10 minutes here, then 10 minutes there, and it all adds up in the end. The next time you have a similar problem you have to do it all over again, and once in a while you forget to do a null check or you have an off by one error. The larger the code base the more likely it is that you'll miss something. By being able to reuse and combine existing functions easily, you can focus on the logic specific to your application and abstract away the details.
TestNG+JMockit is the best. Trying to keep my code decoupled do as much Unit-testing as I can. I use a lot of Selenium too though. Code Quality checks with Sonar. 
I highly recommend Hamcrest. The matchers work really well with JUnit to create very expressive tests with high-level assertions that do a lot of the grunt work for you. DBUnit is awesome for writing integration tests that work the database. Selenium is pretty much the gold standard for writing functional tests that work the web browser. WindowLicker is great for testing Swing user interfaces. Spring WS Test is very useful for testing web services.
I'm going to go ahead and retract that. Thanks for the fact-check. I guess my perspective is skewed from having moved out of the PHP world myself and never looked back. Thanks!
JUnit seems by far the most popular. It works really well. Mockito is an *awesome* mocking framework, so use that when you need mocks. I think the more important (and harder part) is writing tests that are readable, maintainable, and test the right things. It takes a lot of practice and is far more important than the tools you use to accomplish that goal.
Thanks :) But does NetBeans add the annotation to the code too?
This is true, glad someone said it. Of course before one attains this level of wisdom, selection of tools and the communities of people around those tools will affect how learning progresses.
JUnit, Hamcrest, Mockito, DBUnit and Cucumber.
Have you tried resizing the window to look around? (this.setSize(1900,1000 or something) Grid layout is kinda funny sometimes, I'd say use a y-axis box layout for each "page" with a flow layout inside if there's a lot of stuff. 
I highly recommend you look into using a CardLayout (if you memory serves me correctly). Look up the tutorial by Oracle about it. Basically it's a layout meant to switch between panels/cards easily. I believe that is what you are looking for. However, to get your example to work, you will probably need to add/remove the panel from your JFrame container instead of setting visibility. I think you will also have to call a repaint/revalidate/invalidate on your container (this.getContainer()....) Make sure your specify the layout position in your container also when you add (this.add(firstPanel, BorderLayout.CENTER)
Hamcrest is neat, and if you don't mind using Scala [specs2](http://specs2.org/) is spectacular.
It really is. Most people divide programming into 3 categories with anything significantly lower than java being considered low level.
Hey esquilax! Long time no see!
Yes, ok, but, this technique was actually used in bank programming fraud heists by programmers working for banks. 
The fact that is Maven friendly is a plus.
Think the original Mario games.
I agree that it's simple but only if your project is already Spring-based, which doesn't seem to be the case with the OP. In addition to actually learning the Spring framework, he would have to "Spring-ify" his existing application (e.g. converting services and similar objects to Spring-aware beans) before getting to the actual requirement of implementing REST. That doesn't make a whole lot of sense when he just needs to add an another entry point into his application. As I said earlier, I'm a huge fan of Spring, but the old adage "the right tool for the right job" applies here.
Tetris, can't go wrong with that.
&gt;I think you act like idiots And I think you act like a big baboon. But really, is this getting us anywhere?
I doubt it ever will, seems like you'd rather spend your energy arguing on reddit about how learning sucks than picking up a book or a tutorial and learning something.
I disagree that the OP would need to make his existing services spring-aware beans in order to add spring mvc endpoints. He could use just spring mvc for his endpoints, and whatever current mechanism that he has for hooking those to his services. There's no requirement that the controllers be injected with spring service beans. The spring controllers he would create with spring mvc are POJOs. Whatever service registry or service factories already exist would work with those spring mvc controllers.
In my intro to programming class we had to build minesweeper. In our software design class we had to build the space invaders and the oregon trail. In our OO class we had to build a children's learning game/platform tutorials on different topics using animated avatars. Any of those could work.
&gt;Shut the fuck up. You are talking about a hospital software that generates records for medical tests. Its not a clerk sitting there entering dates, its the software that sets a date. So in this case as in every other case, you are a lying piece of shit, dates supplied by the API won't be null. Have you actually worked in a hospital, or in any company ever? That's a rhetorical question by the way, it's obvious that the answer is no. &gt;And as I mentioned earlier, there would be different threads for each category. A switch statement on some field or another of each test will determine which category it belongs to, it will then be sent to that category's thread, which will filter its objects by date. What does this have to do with threads? Each result has observations in it, each one is its own class, with tons of data in it. You have to be able to sort all your results, regardless of which thread they came on together. &gt;7 years ago he said some language was going to be the next mainstream gaming language, which has remained just as obscure 7 years later as it was then. 7 years ago he outlined serious problems with imperative languages, nothing changed except that a lot more people are using functional languages to solve these problems. The problems didn't magically go away you idiot. &gt;Also, I just realized that the presentation was from 2005, since then java has released a far more robust multithreading solution. So his criticisms of java actually applied to its older multithreading solution which has been fixed since then. So you were lying again, what a fucking surprise. Read it you fucking moron! What has Java fixed in multithreading you idiot, it's using EXACTLY the same model as C++. I'm not lying you're just an idiot! &gt;Shut the fuck up asshole and answer the fucking question I asked instead of trying to deflect it. WILL TESTS PRINTED BY PATIENTS SHOW NULL AS THEIR DATE OR ANY OTHER FIELD YOU PIECE OF LYING SHIT? I did answer your question repeatedly, the fact that you're a moron who can't understand the answer is not my problem. Hint it's got nothing to do with nulls, and if you weren't a total fuckhead you'd actually understand that. &gt;I skimmed it reading their history. It says that they were using C++ and then they moved to whatever they're using now. They never mentioned using Java. So fuck you. Wow what dimwit you are, just because they used C++, with exactly same threading model as Java, nothing applies to Java naturally. You are so fucking stupid it burns! Now go fuck yourself, I'm not going to reply to you anymore. You're the worst kind of an idiot, the one who doesn't realize just how much of an idiot he is. 
Unless you provide any concrete examples you've lost this debate you lying piece of shit. 
I did and if you're too much of a moron to understand it, it's not really my problem. I just love how much energy you have to fling feces like a monkey, but not to actually sit down and learn something. Enjoy the rest of your proudly ignorant existence.
Hmmm, some cursory reading seems to say that JavaFX is in the same vein as Apache Pivot (RIA that can also be used for desktop apps), so I think I'll drop swing from my shortlist and fill in JavaFX. Thanks for the input! I had looked at the java gtk bindings, but evidently they don't support windows, so I don't think I'll be going with that one to start.
I once did a Dopewars clone (called it StockRunner) for a linux class. If physics engines and whatnot are beyond your means then something like that may be a good alternative. Simple gameplay, could be wrapped in a nice gui, etc. You'd have to get creative about the HCI tie-in though. Related anecdote about said program: For the linux class our final was an open ended "Write a bash program." I spent a lot of time on mine and was very proud that I managed to finish it (I was a high school junior taking a concurrent college class at the time, so I was eager to impress). On the last day everyone was talking about there projects. One lady turned in a temperature converter, another gentleman turned in a simple calculator. I sort of shut down when I realized that almost everyone had turned in simple programs about 10-50 lines of code, whereas I wound up with a full fledged Dopewars clone (with ASCII art) in about 2000 lines... At least I got an A! Edited for clarity.
&gt; This alienness of Swing is what has put people off. I disagree. Plenty of applications have non-native look-and-feel (iTunes, some browsers) and they still are well-liked. The problem with Swing is that unless you understand the threading model and how to keep the EDT clear of bottlenecks, a Swing app feels dogshit slow. This is because lazy developers don't delegate long-running tasks to worker threads, etc.
PROVIDE EXAMPLES OR YOU'VE LOST THIS DEBATE YOU LYING PIECE OF SHIT
Then you've lost because you have no concrete examples to give. Every single example you've given, I've shown how Java can do the same thing in &lt;10 mins. 
AWT if you don't want to ship native binaries, ~~SET~~ SWT if you want it to look nice. Swing if you're a masochist.
I hadn't heard of SET. Do you have any links? It's got a very un-google friendly name.
Sorry, that's SWT. Ducking autocorrect...
he/she just spelled swt wrong...
Yeah I lose you win, go have yourself a cookie shithead. &gt;I've shown how Java can do the same thing in &lt;10 mins. especially that no lock multi-threaded queue, really nailed that one :P
Like the idea! Thanks
So tempted to make space invaders!
Maybe a bit too safe for some good marks :/ Thanks though!
Been here before, and looked at many times... and wasted many many many many hours.. with Java.. Ended up with Qt/c++/pyqt and that works.. trust me.. ;-)
I've done the same, developed quite a few UIs with Swing. JIDE has some nice extensions, but I still hate Swing. =D Though with Groovy and the SwingBuilder / JIDE Builder / MigLayout it's an amazing upgrade from Java and Swing.
Yep, I've goofed off with doing work with pygtk but I was interested in doing Java as much as doing desktop dev, so I thought this would be a good way to learn both. I didn't realize there would be so many mediocre frameworks to weed through, heh. Plus I have a goal of eventually learning to make android applications and this would be a good interim thing to work on. I definitely appreciate the sentiment, however.
Yep, SWT and AWT were pretty much off of my list from the get-go because they seem to be too abstract for someone new to both Java and desktop dev. I'll have to look into JFace however, I hadn't heard of that one yet.
&gt; especially that no lock multi-threaded queue, really nailed that one :P Give me a real world example where you would need that, and what data I have available, what threads there need to be, etc
JFace is an excellent suggestion. &gt;First, the SWT layout managers are terrible. True, but that's because all layout managers are terrible. I stopped using them and instead use manual WYSIWYG tools. Google has an excellent plugin for Eclipse that does this, for example. &gt;Fourth, you need to ship third-party native DLLs that don't come with the JVM. True, but that goes for JFace too. 
Maybe they should have called it NonJavaZone this year? :P
I find that swing is just fine, if you have a decent GUI editor. The one built into netbeans works great for me. I don't find windowbuilder [the eclipse one] a particular pleasure to use, but it gets the job done.
You should discuss this in the Java 8 mailing list: http://mail.openjdk.java.net/mailman/listinfo
Wow, thanks for that breaking news from 2009
Thinking of function literals as newly created objects is wrong in my opinion. Function literals should be seen like value literals (e.g. 1,2,3,"abc", ...).
Can I use fields from the surrounding class and final local variables from a surrounding method? That would make the functions non-literal. (Actual question, idk)
Gave you plenty you moron and you can't do it, so go fuck yourself now.
ROFL can't read the examples I gave you, but more importantly you don't believe there are real world uses for queues?!?? Yeah, skill level: total noob!
* Java EE is a collection of APIs (Servlet, JSP, JDBC, EJB, JMS, etc.). Each API addresses a particular technical problem typically found in enterprise applications (how to handle a web request while avoiding the pitfalls of threads, how to access the database in a vendor-independant way, how to send inter-application messages, etc.). Some of the API are not much "enterprise" anymore (everybody and their mom uses a database nowadays), others are not very much useful for simple webapps (e.g. JMS). This is why, by the way, a subset of Java EE has been defined in recent versions, so that people with simple webapp needs do not need to bother with the more advanced features, and can use simpler application servers. * Spring is for any use. It is widely used for web apps of course, and has many features specifically for that. But at its core (plugging application components together), it can be used in every kind of Java application. * What do you mean by front-end and back-end? And what did you see that was clunky and terrible? Most Java web applications follow a multi-layer architecture (an MVC presentation layer, a business layer, a data access layer). Apart from the view part of MVC (historically done with JSP, though other alternatives such as FTL are available), which can sometimes be unpretty (but are there really clean template languages?), the rest can and should be plain-old Java code, with annotations. (By the way, please use better thread titles. ;))
Spring is just a proprietary third party library of Java code with similar functionality to Java EE. Java web development can be greatly simplified with JavaServer Faces 2.0. 
Yes, autocomplete rules, and these features look fantastic. I think it really changes how you work with a language, and how you design APIs. I use a framework that's designed by a guy who codes in a text editor, and it's recently occurred to me that this has influenced his design choices. There's much reliance on convention over configuration. For example, the framework uses reflection to call event handlers based on the method name. As a consequence, there's no API to explore to help you know what method names would be meaningful, so you need to use documentation. Of course, if you're using a text editor, documentation is everything, so you don't notice when you make design choices that undermine automatic explorability.
Perhaps it's a generational thing: I personally can't stand these interfaces that are constantly popping up suggestions to what I'm typing. It gets in the way of my train of thought. You no longer need to learn the APIs you're using or understand how the parts fit together. A good three-pane browser (or even Eclipse's Outline and Type Hierarchy views) is perfect for me. Then again I've written non-trivial programs on a VT-100, so... get off my lawn. 
Spring doesn't really have a similar functionality to Java EE, and it's an apples to oranges comparison between the two. At least, that was the case before Java EE 6. Spring is just a Dependency Injection container which can be can be used to inject Java EE resources. It is comparable to one standard API that has recently been added to Java EE, which is CDI. What's nice about Spring is that it uses Java EE, but is not dependent on it (is that the case with CDI? I'm not sure). That means you can use it with non-Java EE technology as well, such as Akka. This is interesting because the real "fight" isn't between Spring and Java EE, it's between Java EE and frameworks like Akka and Hadoop when it comes to staking a claim in the cloud.
Spring and Java EE provide many of the same functions. I am not sure why you are not considering Java EE 6 since it is released and readily available. Spring is much more than just Dependency Injection. 
This is really interesting. I have a cluster of thoughts about this. Like any tool, if you come to rely on IDE-supported explorability, it weakens other faculties. There are often rules for API usage that aren't expressed in a single method. The need to initialize state and clean up afterwards, for example, and you won't learn this from auto-complete. Nor will you learn that certain calls aren't thread safe, while others are, etc., and you certainly don't want the IDE solving your I/O plumbing problem by going through a String, or some other content-munging operation. On the other hand, I think good API design is all about usability - making it easy for people to use it correctly. If you need a (say) file handle to perform certain operations, that's a nice way to make it syntactically impossible to abuse the API (in that particular way). An IDE that help you quickly figure out where to get one would speed people along to correct usage. I know it's not as simple as this. No doubt somebody bright spark has proven that there are important constraints that are fundamentally inexpressible in an API. Especially in this day and age, when an seemingly normal object reference could in fact be pointing to something quite strange, like a dynamic proxy that masks the fact that you're actually accessing a thread-local instance of what seems to be a shared field, but which is therefore not serializable. (Or whatever!) Nevertheless, I think it's a worthy goal to see if there are ways to leverage IDE facilities as much as possible. This isn't opposed to the goal of having good documentation, in fact it opens the possibility of making the remaining documentation much more concise, containing only the stuff that isn't handled by the IDE.
The really sad thing about you is that you assume that you're the only one who ever does any learning. Even sadder is that you assume that everyone who is not totally in love with your beloved Clojure doesn't do any learning. The arrogance of that is just mind boggling. But have it your way. Let us all acknowledge that Yogthos is the only one here who learns. Hope it makes you happy dude, really hope it for you.
A google result for thread safe queue in java returns tons of results asshole. I bet you haven't used java since 2005 and are unaware of the volatile keyward, java.util.concurrent.atomic, etc.
I used Eclipse for 2 years, pretty much learned how to program with it. After a week with IntelliJ, I never went back. 
&gt; I'm just pointing out that comparing Spring to Java EE makes no sense. In the sense that Spring and JavaEE both have entire ecosystems around them, they are comparable. Yes, I know Spring is "just" IoC, but that ignores the fact that Spring carries a lot of non-IoC baggage around with it so they're effectively alternatives to the other. &gt; Although, if you're stuck with a Java EE 5 container and can't migrate to an Java EE 6 container, Spring is nice to have around. And you've kinda proven the point there. Spring wouldn't really be nice to have around in that situation unless it and its ecosystem provided a viable alternative to Java EE 6. 
&gt; It seems as though most online front-end java stuff is clunky and terrible. Where did you get this from? There are many great frameworks for "frontend" development: http://wicket.apache.org/ (Component oriented with ajax support) https://developers.google.com/web-toolkit/ (Component oriented with ajax support) http://struts.apache.org/ http://static.springsource.org/spring/docs/current/spring-framework-reference/html/mvc.html Imho compared to other languages (like php, at least i have some experience there), java is pretty good for frontend stuff.
&gt;A google result for thread safe queue in java returns tons of results asshole. Doesn't do what I said dumbass. Java queue has to lock for both reading and writing. If you can't show me one that doesn't lock for reading then GTFO fuckface.
&gt;The really sad thing about you is that you assume that you're the only one who ever does any learning. I assume no such thing, you guys actively say you don't want to learn. If you actually learned FP and debated the merits of the coding styles that's one thing. What you're arguing about is whether you should have to learn in the first place. And I specifically said that Clojure is just one of many languages that you could learn. I even listed a bunch of them in this thread. This straw man of yours is really nice, but it has exactly zero to do with what I actually said. But hey, whatever makes you happy dude, if Java is the only thing you ever want to learn that's your problem not mine. Unlike some people, I don't define myself by one language that I know.
You should probably look into the String.split method.
Thanks TheRealSlartybardfas, i didn't need a nested, just over thought it. Here's what i came up with and it doesn't look the best but it works. http://pastebin.com/S5cbUi38
 String[] characters = new String[]{"_", "-", "^"}; int n = 0; String buffer = ""; String dashes = ""; for (n = 0; n &lt; 40; n++) { dashes += "-"; } buffer += dashes + "\n"; String chars = ""; for (n = 1; n &lt; 5; n++) { chars += characters[5 % n]; } while (buffer.length() &lt;= 80) { buffer += chars; } buffer += "\n"; for (n = 1; n &lt;= 20; n++) { buffer += n % 10; buffer += n % 10; } buffer += "\n" + dashes; System.out.println(buffer);
The reason you would use a nested for loop to create that output is the repetition 2 times. Even though it is inefficient, it is useful in learning the skill. To achieve the needed output you only need a very simple nested loop: for(int i=0; i &amp;lt; 2; i++){ for(int j=1; j &amp;lt; 11; j++){ System.out.print(j%10); System.out.print(j%10); } } EDIT: Btw, I only gave an example for the numbers part. 
I took that to mean applets, which would make it an understandable opinion.
...C? Int *, right?
Some of this makes sense to me but not all as i'm still learning but i will keep buffers and the other unknowns to me at the moment in mind. Thanks!
Well, there aren't technically any StringBuffers being used. Think of the buffer variable as a temporary string that you use to construct your desired output. I'm bad at explaining, so buffer = "" here could be thought of as a blank sheet of paper. Every "buffer +=" you see is like using a pen to write to the paper. What's on the right side of the "+=" is what you write. You keep adding stuff to the paper until the drawing/story looks how you want. In the end, the "System.out.println" just displays what's you've drawn on the paper. This is of course a very simple example, and without knowing more, you may be far beyond such a layman's example.
&gt; Biggest revelation for me was when I found out you could manipulate a malloc'd pointer as if it were an array. a[5] == *(a+5) == *(5+a) == 5[a] Check it out.
I'm not sure about the math, so I don't know what optimizers would be appropriate, but you can check out [Apache Commons' optimizers](http://commons.apache.org/math/userguide/optimization.html). If you're willing to go the route of libraries with java interfaces, you can check out [algencan](http://www.ime.usp.br/~egbirgin/tango/codes.php), which might be overkill.
The one thing that eclipse has going for it is that it's free.
Thanks - I have been looking into Apache Commons' optimizers, but it's hard to find a good example that I can understand!
I've used += a bit before and it's basically kinda like a i = i+2 or something similar, it just adds on right? I kinda understand what you're saying, your example is actually dead on.
Thanks, i know more practice will help.. I thought i had it but the more difficult problems shows me i don't fully understand it yet.
Look up on graph algorithms A* algorithm is good, dijkstra is commonly used in computer networking to compile the optimal Link state database for OSPF routers but cold also help you in this case. I think there is a typical example of this problem you have but i can't seem to remember it... i made this assignment in C++ some time back but unfortunately don't have the file anymore. But seriously, check up on constructing a graph and running through that graph, it's a fun assignment and will help you a lot later if you manage to do it on your own. It's probably a typical exam question so goodl uck!
&gt; Spring is an alternative to Java EE only in so far as that it enables you to use technologies other than Java EE. Spring is just as happy to let you leverage JDBC as it is to let you leverage JPA. The major selling point was that it allowed you to build components using pure Java instead of requiring EJB and JNDI. Spring will of course let you do things like JTA as well, but that gets so complicated you might as well use a real application server at that point (instead of Tomcat or Jetty). But if all you need is JDBC transactions, you have options! I totally disagree. IMHO these "things like JTA" is the **main reason** that many developers prefer using Spring than JavaEE. AOP transactions with annotations, JdbcDaoSupport, Hibernate/IBatisDaoSupport are real enhancements and make difference to plain JTA/JPA. Or even you want to use JEE, Spring helps you develop clean code without bugs - by using Spring callbacks (which make exception handling really easy) and support for JMS, JNDI, etc.
My pet-peeve about Eclipse is the workspace concept. What is so hard about using plain project files? As for InteliJ, still waiting for proper C++ support. Until then it is Eclipse CDT/QtCreator for me.
I'm a developer with 15 years experience, primarily Java but a number of other languages too. I have also written several internal Android apps. As above, PM if I can help. 
You will likely get a better response by creating an Amazon Seller Central account and listing each book individually. This is a pretty specific collection of books to sell bundled.
You can just [write your own](http://en.wikipedia.org/wiki/Gradient_descent). It seems you have constraints on your variables to be between 0 and 1 (you mention they are probabilities). You could transform them into other variables with a Gaussian function which will allow you to ignore the constraint, then just transform them back after you've arrived at a solution. Since you're only using polynomials, calculating the gradients will be a simple.
Nice code but If I wanted a Captcha I would just use JSF and PrimeFaces. I can have the whole thing including a great looking web front end that works cross browser in minutes. http://www.primefaces.org/showcase-labs/ui/captcha.jsf **Java Code** package org.primefaces.examples.view; import javax.faces.application.FacesMessage; import javax.faces.context.FacesContext; import javax.faces.event.ActionEvent; public class CaptchaBean { public void submit(ActionEvent event) { FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_INFO, "Correct", "Correct"); FacesContext.getCurrentInstance().addMessage(null, msg); } } **XHTML PAGE** &lt;h:form&gt; &lt;p:messages showDetail="true"/&gt; &lt;p:captcha label="Captcha"/&gt; &lt;p:commandButton value="Check" ajax="false" actionListener="#{captchaBean.submit}" /&gt; &lt;/h:form&gt;
I could indeed, but as you say, since I'm using polynomials I'm hoping that there will already be someone who has written part of a library for this. But it will be certainly worth the read, thanks.
If the point of this exercise is to demonstrate knowledge of nested for loops, you can kind of force your code to include one. First, some utility methods for readability and convenience: /** Prints out {@code seq} terminated by a new line (for convenience). */ private static void outln(String seq) { System.out.println(seq); } /** @return the specified {@code seq} repeated {@code n} times. */ private static String repeat(String seq, int n) { StringBuilder result = new StringBuilder(); for (int i = 0; i &lt; n; i++) { result.append(seq); } return result.toString() } Then each line is generated: outln(repeat("-", 40)); // first line outln(repeat("_-^-", 10)); // second line StringBuilder doubleDigits = new StringBuilder(); for (int i = 0; i &lt; 10; i++) { for (int j = 0; j &lt; 2; j++) { doubleDigits.append(String.valueOf(i)); } } outln(repeat(doubleDigits.toString(), 2)); // third line outln(repeat("-", 40); // fourth line The nested loop above breaks down as follows. The outer loop says to set i to each digit from 0 to 9. For each digit, append it to the sequence doubleDigits twice, so you get "00" then "11" then "22" etc. In real life, though, I wouldn't do this because it's not as readable and I'm not making best use of the utility functions I created above. Instead, I'd do this to generate the third line: StringBuilder doubleDigits = new StringBuilder(); for (int i = 0; i &lt; 10; i++) { doubleDigits.append(repeat(String.valueOf(i), 2)); } outln(repeat(doubleDigits.toString(), 2)); // third line Generally, I try to stay away from deeply nested conditionals/loops/etc. They're not readable, so it's much better to break down the logic into easily digestible chunks for whoever has to read your code in the future.
Hey readability before performance. If having a separate variable for each loop increases readability, good.
Dude, the horse is dead. We agree those things can be done. But in all the dozens of people I interview every year, I'm not seeing much of what you're talking about at all. Re: herding cats -definitely. But the path of least resistance is what most will follow and using EJBs with Spring, to name one arbitrary example, just isn't something most are going to bother with from what I've seen.
Just curious, how does have different variables increase readability? If someone doesn't know Java, the names of the variables don't matter. If they do know Java, they understand variable scope. To me, it is less readable because I assume if they are named different, there is a reason for it so I need to look out for it. 
Scanner.next() returns the next sequence of characters separated by spaces. Use .nextLine() to get the whole sequence in a line to print.
[Scanner.next()](http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Scanner.html) gets the next "token". In this example your String input (the sentence) is 'tokenised' by whitespaces. Each new word is a new token. When you're printing each token on line 10, you're using System.out.print*ln*, which prints output and begins the next line. If you use System.out.print, the next bit of output won't go onto the next line. You could use this on line 10 instead: System.out.print(aString + " "); This will not go on to a new line, however. 
keyboard.next() is only returning the next word in your input each time you call it, because its tokenizing the input on the space chars. So your while loop is executing one time for each word you type, not one time for the whole line like you are thinking, so the println statement is printing one line for each word it sees. You need to use "keyboard.nextLine()" to get the whole line at once, execute the loop only once per input line, and get your text printed back on one line like you're expecting.
You say that as if writing actually takes long. It barely takes a millisecond to change the value of a variable in Java. So take your lying and shove it up your ass.
There are 50 numbers you want to choose between (51 - 100) so we roll a 50 sided dice (0 - 49) and add 51 to it, so the result is a number from 51 to 100. 
Stop trying to weasel out of this fuck face. Of course it can take a long time to update a large data structure. You said you could do it in 10 minutes, you can't and that makes you a lying sack of shit. And on top of that when using AtomicReference you have to swap out the **WHOLE** data structure with a new one every time you make an update. You haven't shown me how you would keep a shared data structure in memory and update it and read it with different threads with locking. And unless you implement [one of these](http://en.wikipedia.org/wiki/Persistent_data_structure) you won't either. Your only choice when you mutate data in place is to lock or copy. Game over shithead. 
Use print() instead of println() -if you want it all on the same line- or just append all the input to one string and then print it all together instead .
b/c this is reddit and people are dicks for no reason.
Yes, if you have nested loops, each will need its own variable. For example, if you have a 2 dimensional array (a tic-tac-toe board in this example): String board[2][2]; you can print it like this: for(int row = 0; row &lt; 3; row++ ) { for(int column = 0; column &lt; 3; column++ ) { System.out.print(board[row][column]); } System.out.println(); } If both for loops used the same variable name, they would interfere with each other. 
[Math.random](http://docs.oracle.com/javase/1.4.2/docs/api/java/lang/Math.html#random(\)) does not return 1. gsg822 is correct. java.util.Random is still a better way to do it.
Don't do this. Just use Spring, which was made for this. You don't need more than spring-core, which is just the IoC container and will give you the minimal functionality required for this use case. Spring can still be configured with an XML file, which I'm not sure is the case with the other IoC frameworks (CDI, Guice, etc.).
Thanks guys, I am currently trying to work with Dijkstra's algorithm as it seems a bit simpler, however it seems less efficient than the A* algorithm, I am trying to get inspired by both algorithms to come up with my own, for the moment I've made a pseudocode for preparations Neighbor distance : 130 pixels function neighborfind(current) Array neighborArray; for each intersection i in roads: if (i.x &lt; current.x &amp;&amp; (current.x - i.x) &lt;= 130 &amp;&amp; i.y == current.y) { add i to neighborArray; } if (i.x &gt; current.x &amp;&amp; (i.x - current.x) &lt;= 130 &amp;&amp; i.y == current.y) { add i to neighborArray; } if (i.y &lt; current.y &amp;&amp; (current.y - i.y) &lt;= 130 &amp;&amp; i.x == current.x) { add i to neighborArray; } if (i.y &lt; current.y &amp;&amp; (i.y - current.y) &lt;= 130 &amp;&amp; i.x == current.x) { add i to neighborArray; } return neighborArray; 
So if you wanted to get a number between 0-2, it would be: Math.random()*3? 
I would suggest starting them with Processing (www.processing.org) a fun simple version wrapper for java
Yes, Processing is visually appealing and fun to quickly come up with neat ideas. The main problem, however, is the fact that Processing - with its simple code style - is far away from Java. I would even consider it a different language. I remember using it last year for a prototype and even used OpenGL calls in it to improve the performance - which, for a beginner, is far too complicated.
Yep. Math.random() will return between 0 and 1, not including the 1. You can think of it like 0 to 0.99. If you multiply that by 3, you get numbers between 0, and about 2.99. When you cast that to an integer, it doesn't round up, it simply truncates the fractional parts and you get 0, 1, or 2.
Nice editing there, here's the actual quote: &gt; **if** Java is the only thing you ever want to learn... If you want to learn other stuff as well good for you, but there's no indication of that is there. So why do you expect people to think otherwise? 
Between this and /u/AllowishusDevedander 's suggestion about the seed, this was incredibly insightful.
I feel that it's highly important to note that calling new Random() results in a seed that is itself essentially random. Seeding is only really necessary when you want to make your random number generation more predictable (ex: sharing world seeds in minecraft).
Unnecessary, as calling new Random() results in an unpredictable seed.
Since you are teaching a CS course I think you can assume that most of the students will be enthusiastic about programming, and they probably know what its good for. Of course you can give some cool examples, but I would not rely too heavily on it. The way to get them excited, I think, is by challenging them. When I studied CS the teacher would give us problems for which we had to write algorithms to solve them as quickly as possible. At the lectures (+/- 150 students) he would show the results in a graph, denoting the top 10 solutions. You might think this is too competitive, but I completely loved it. Good luck with the course!
One example I enjoyed when I first got into comp sci and learning objects was to make a simplistic mars rover. One would create a world class that had a 2d array of landmark objects the rover would go forward through. The main method would consist of initializing a new planet and a new rover. link them together and give commands to the robot. Rover.exploreAhead() and it would return something like pit ahead. And if they dont do rover.startJetpack() the next time they rover.exploreAhead() they would fall into the pit. This kind of example is very simplistic and the example that made objects really click for me the first time. The logic and methods required are very simplistic and easy to follow. Although simple and scripted, they give an idea of how objects interact. Sorry for lack of formatting. On my phone. Let me know if you want to hear more.
You haven't explained your issue. If you can tell us your issue, perhaps we could help. 
*still learning, so might be wrong* is the "right" being outputed to the console? if it is it then it could be a problem with your repainting. If it isn't then make sure you've set focus on the panel/frame where the listener is. Also remember you need to assign it (i didn't haha) frame.addKeyListener(new MyKeyListener()); 
You can break encapsulation of a class by making fields public. That will work out fine as long as no one else accidentally accesses them. My point: final exists so you don't have to depend on something a variable being overwritten accidentally. That's the reason all programming constructs exist.
Much better is... public class Adder { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.println("Input two numbers"); int x = scanner.nextInt(); int y = scanner.nextInt(); System.out.println("sum: " + (x + y)); } } You want to start out with simple programs by putting them in the main method, this makes clear that this is the entry point of all execution. Then, once you get used to doing simple things, you'll want to start encapsulating different functionality into different objects. In this example, I would have one object that manages interaction with the user (probably called it the UserInterface class) and one that does the math (Calculator). Then create an application class that configures everything, wires it together, and runs it. The point of all this is to separate responsibilities for different functionality required by your application into different pieces of code. You have one class that's responsible for calculating, one that's responsible for interacting with the user, and one that's responsible for wiring those two independent pieces together. So, the calculator: /** A simple RPN calculator. */ public class Calculator { private final Deque&lt;Integer&gt; stack; public Calculator() { stack = new ArrayDeque&lt;Integer&gt;(); } /** Pushes the specified {@code arg} on to the stack. */ public void push(int arg) { stack.push(Integer.valueOf(arg)); } /** Pushes the specified {@code args} on to the stack. */ public void push(int... args) { for (int arg : args) { push(arg); } } /** * Pops a value from the stack. * * @return the popped value */ public int pop() { return stack.pop().intValue(); } /** * Pops two values from the stack, adds them, and pushes the result. * * @return {@code this} (for convenience) */ public Calculator add() { stack.push(stack.pop() + stack.pop()); return this; } /** Clears the stack. */ public void clear() { stack.clear(); } } This is a very simple RPN type calculator. You push arguments onto its stack, you can pop them off or clear them, or you can apply operations to the arguments on the stack. Simple. Now, the user interface: /** * A simple text UI that performs all interaction with the user through a {@link Scanner} and * an {@link OutputStream}. */ public class TextUserInterface { private final Scanner in; private final OutputStream out; public TextUserInterface(Scanner in, OutputStream out) { this.in = in; this.out = out; } /** Outputs {@code message} to the user, leaving the cursor at the end of the output. */ public void out(String message) { out.print(message); } /** * Outputs {@code message} to the user, leaving the cursor at the beginning of a new * line. */ public void outln(String message) { out.println(message); } /** Outputs a new line to the user. */ public void outln() { out.println(); } /** * @return {@code n} integers input by the user * @throws RuntimeException if {@code n &lt; 1} */ public int[] readInts(int n) { if (n &lt; 1) { throw new RuntimeException("Must read at least one int: " + n); } int[] ints = new int[n]; for (int i = 0; i &lt; n; i++) { ints[i] = in.nextInt(); } return ints; } /** * Prompts the user with {@code message} to input {@code n} integers. * * @return an array of {@code n} ints input by the user */ public int[] promptForInts(String message, int n) { outln(message); return readInts(n); } } The user interface is responsible for all interactions with the user. To create an instance, you configure it with a scanner and an output stream, and whatever you give it, it will use to read input and post output to the user. In this case, you can output a message in a couple of different ways, or just a blank line if you want to. You can only read integers from the scanner, but you can see how easy it would be to add more methods that read different things. Note the readInts() method does a bit of error checking to make sure the user isn't asking for 0 or a negative number of ints to be read. Note that it is correct to use an unchecked exception here because this condition indicates the calling code is doing something wrong. In other words, this should never, ever happen; if it does, it's a code bug and can only be addressed by a programmer fixing the code of the caller. (If this were a situation where, for example, where the error was unavoidable but recoverable by the caller, and we cannot handle it here, we would throw a checked exception here and let the calling code handle it.) And finally, the application: /** * A calculator application with a simple text user interface based on a basic * RPN style calculator. */ public class CalcApp implements Runnable { private static final String PROMPT_ADD = "Input two numbers to add"; private static final String LABEL_SUM = "sum: "; private final Calculator calc; private final TextUserInterface ui; public CalcApp(Calculator calc, TextUserInterface ui) { this.calc = calc; this.ui = ui; } /** Prompt the user for two ints and display their sum. */ @Override public void run() { calc.push(ui.promptForInts(PROMPT_ADD, 2)); ui.outln(LABEL_SUM + calc.add().pop()); } /** Creates and runs an instance based on standard in and standard out. */ public static void main(String[] args) { new CalcApp( new Calculator(), new TextUserInterface(new Scanner(System.in), System.out)) .run(); } } Here you see the main method is responsible for creating all the objects and wiring them together, and then runs it. The run() method is very simple, too. It uses the UI to prompt the user for two integers, then pushes those onto the calculator's stack. Then it tells the calculator to add them, pops the result, and displays it. In this way, the instance of this application is responsible for handling all of the coordination between the UI and the calculator. It's a very good idea to have all your objects rely only on objects that can be passed in via the constructor. You'll note that all three of these objects are constructed with all of the parameters they use. The reason for this is crucial to writing quality code: it allows for testing. Because we've used this approach, it's extremely easy for me to set up any one of these objects for testing by creating an instance that relies on fakes or mocks, and then I can call all the methods and make sure it's interacting with the fakes/mocks in the way I expect. Instead of relying on standard in and standard out, I can write a test that creates a CalcApp instance that relies on some other input stream and output stream that it can pump a lot of data in one and check the output on the other. All three objects can be easily configured for testing in this way. (There is one problem with the code above–ideally, constructors should only take interfaces and not concrete classes, and it isn't too hard to figure out why now that you know we plan to pass in faked implementations for testing.) Of course, this is loads more code than we started with in the simple code section at the top. But if you go through it and understand it, you'll see that this code can be expanded to include significant functionality, whereas all the initial code section is going to do is add two numbers. (BTW, this is just written by inspection. There's probably a bug or two in it.)
Ever notice the java auto update feature does not auto install? Ever notice the java auto update feature does not remove old versions? An administrators nightmare JRE is... This will help, I made it.
Except with the number of security flaws updating is not always wise... As a Java programmer I still avoid updating for a week or two.
A* isn't much more complex than Djikstra's. The main difference is the inclusion of a heuristic in A*.
Your current method of Math.random() * 100 + 51 goes over 100 because the first part of your equation, rand() * 100 will return a value between 0 and 99, which you are then adding 51 to. So if the random value ends up being 99, you get 99 + 51 which is 150, so your total range is 0 + 51 to 99 + 51 which gives 51 -&gt; 150. By doing random()*50, the range becomes 0 + 51 -&gt; 49 + 51, which nets 51 -&gt; 100
This isn't actually automatic, it can be scheduled to run in the windows task scheduler. You could just run it manually. it's faster than manually uninstalling the old version and going to download and install the new version.
Bullshit, no matter how big the structure is it won't take more than a second to update it on any normal processor. All this really proves is you pick a strawman problem that no one will ever need to solve and claim Java can't do that. This issue will never even be noticable in real life. You can't give a real world example of when this will be an issue.
Yup, can't do it and now you start bullshitting like a little bitch. Fuck you, you lose go home.
This might not be practical, and might even be kind of crazy, but I came to programming from the arts, so bear with me. For me, the intriguing thing about programming has always been the philosophy and aesthetics behind a language. How they are organized and why. We often like to think of programming as some kind of super logical, mathematically pure endeavor, but it really isn't. The plethora of languages available and their consistent march into higher and higher levels of abstraction is enough to attest to that. Programming as applied philosophical models is to my mind an intriguing and exciting avenue. That said, if the students are undergrads, you might want to do some stuff with robots. Using the written word to physically manipulate objects in real space is pretty exciting stuff and helps drive home the point that your programs -- a mere collection of words, numbers, and symbols -- are actually manipulating the real world.
I really don't have anything. I've been trying to find a connection between the slope, current distance, etc to no avail.
I hace 2 questions: 1. Does it also update the jdk? 2. I have installed a 64-bit version and a 32-bit version of java. Which does it update?
&gt;there's no indication of that is there Why do you think there's no such indication?
I not sure if this is in line with what you want to show. But from a learning point of view, as someone who has been teaching himself Java, i have to say that seeing YouTube videos of people programming stuff has been the great!. The most interesting and learning part, was how to structure the program, especially as more classes are used. Otherwise your ideas as a beginner here, sounds really interesting.
&gt;That was the easy part. Post the code you used to do this, we will try to help you with the rest. When you say you want to scale by 3, you mean the original line between (1,1) and (2,3) length has to be extended x 3? so it becomes from (1, 1) to (4.01, 7.01)?
You want to use an http client to make a request to the api (like the apache one http://hc.apache.org/ . After that, you can parse the response using google's json deserializer http://code.google.com/p/google-gson/ . Either read the response in as a string, then parse it, or read it directly from the input stream by using a reader. Now it's just a matter of displaying their info on whatever stack you're using. Note, you'll need the right pojo classes to parse the json.
This is the most unreadable website for a mobile device I have ever seen.
People who post articles from years ago and try to mislead you into thinking they are current are definitely liars
What is not current in the article I posted, please point it out little liar. And yes, somebody tried to trick you into learning something, good thing you had your guard up! Now go play with your toys retard.
On some JVM's. The exact implementation in Java 7 is unspecified: http://docs.oracle.com/javase/7/docs/api/java/util/Random.html#Random() It turns out that seeding based on time is not that great. On older Windows system clock resolution is often below 10 ms. If you launched 10 threads at once all constructing a random, you could actually get some with the same seed. If you look at what the Oracle impl is doing now you'll see they're using nano time, and taking additional steps to ensure subsequent calls don't ever get the same seed anyway. Suffice to say people using the default implementation got upgraded to a safer way to find a good seed. So you're both right that it's unnecessary and even dangerous in some scenarios.
I don't see the difference in using this and Random unless you are wanting to use the same instance of Random in multiple threads. Good to know about this anyways, though.
the fact that the article itself said that thread contention becomes less and less of an issue with each jvm update that comes out, and he said that in 2001 whereas now its 11 years and hundreds of updates later.
whoosh
whatever helps you sleep at night loser
There are difficult conceptual problems, and there are difficult coding problems. For a beginning student, writing a system that draws windows and menus using ASCII characters on a text terminal and is navigable with keys is a difficult coding problem, but not difficult conceptually. Basic encapsulation and keeping clean dependencies is difficult conceptually but not difficult code-wise. Public key encryption or raytracing software is both. For an example of what I'm talking about with encapsulation, here's the example I like to use: public interface Ball { // should this interface have this method... double getMass(); // ...or this one? (or both? or neither?) double getWeight(); } This is obviously not a hard code question. It's easy to represent either one. But a ball can only supply its weight if it knows its current context (what is the gravitational constant? is there a force being applied to me? etc). There is no way a ball can supply this information to a caller without knowing a whole ton of info about stuff outside the ball, so it breaks encapsulation and proliferates dependencies across your codebase if you start writing objects that try to encapsulate extrinsic state. Make sure you feed both sides of the education. Too many teachers focus solely on one or the other (usually only difficult coding), and the beautiful aspects of design never become clear to them. It's just a sequence of statements.
You've lost, give up liar. 
See look this is where I look to Reddit to deal me a heavy smackdown. Thank you.
If by lost you mean called your bullshit then sure.
Plenty of web apps use random. Most webapp projects I've worked on have used a thread local random.
We use JMeter at work, so I'm interested in checking these out - in particular the graphs additions, as graphs always make it easier to sell things to managers.
&gt;A transaction isn't encapsulated within the method under test; it is the method that is encapsulated within the transaction. Actually, the transaction starts exactly when the method starts. The class is an EJB, a type of managed bean.