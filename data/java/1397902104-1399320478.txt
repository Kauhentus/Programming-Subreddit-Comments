I like NetBeans, which is available on windows and linux.
since this is university work you should attempt it first and show us the code for us to help. how do you expect to learn otherwise?
Now I just only have the task: The program can be used only by registered users. Users with no registration can see only the register and login menu. The registrations need a name, username, password (maybe it can be encrypted), birth data, phone number and email. The database stored in a file. User can acces their infomrations and can change it too. There are admins in the system who can delete the non-admin users from the database. The registered users can make new advertisements and browse them. The advertisements can be houses for sell, houses for rent, new cars and second-hand cars.
Yeah I quite like NetBeans too. It is very clean compared to Eclipse which has a very busy interface. IDEA reminds me most of Visual Studio which is what I have always used until now. So far they all seem pretty good though and are all multi platform which is great. 
There is a reason you see tonnnnns of Mac books at any java developer conference. os x is really good to develop on. You have all the command line utils you need from Linux but none of the pita updates. 
Once you get used to JetBrains way, there's no turning back. As other said, Java is one of the few cross platform languages that does not completely suck on Windows (oh ruby!).
&gt; You probably should get started instead of browsing reddit then. But he has until April 21, so OP's got **PLENTY** of time to browse reddit first. Besides he needs it ASAP. I'll never understand why people think that you need something answer immediately, let's go to a website that has users that can come and go as they please. AND not required to help you at all.
I've been at this website since 2008. I use/used it to build a sort of toolbox for utility functionality I can use at work. I give this website a huge thumbs up. They put out new questions once a week from September to June (following the schedule of school in America). Some problems you can solve without a program. Some you can solve with a brute force (and have to) program. I fully guarantee if you try these problems in Java you are definitely going to learn some ins/outs of the language.
10+ years of Java experience (college/enterprise) and all I've used us Windows &amp; OS X running Eclipse. :(
In my quite limited experience with Eclipse it seems alright. Ugly and not fantastically designed but it seems to work quite well. Not had it crash on me yet unlike Visual Studio which until the 2013 version would crash quite often. 
The best environment is the one that makes you the most productive. This is inherently subjective. Try out different IDEs, you'll find one you like. As for OS, most Java tools are available cross-platform.
This is so true. I had to store a very large amount of data that required fast key-&gt;value lookup in memory. Map is the obvious choice, right? HashMaps for 2.7GB of input data took ~6gb of memory. That's after I did everything I could think of to reduce it - it originally started at &gt;20gb. Intern'ing strings that would be repeated fairly often, object cannonicalisation, etc. The bulk of the 6gb was internal to Java's HashMap structure. I swapped HashMap for THashMap from Trove, and the in memory requirement dropped below 2gb and cut my parsing time of the input file by ~10%. If you're doing any serious amounts of work with collections, it's worth your while to look at other options.
As a developper, here's what you're looking for: - Complete configurability of input and window behavior; - Great terminals and shells; - Good package management; - File system that doesn't suck; - Stability and resource usage monitoring. Windows being completely horrible in all these categories, that would be linux (or OSX if you're rich). 
Deep in my soul I know you are right, but I can't get myself to give any money to Apple. Do you know of any alternative? I have had my eyes on [this baby](http://www.dell.com/uk/business/p/xps-13-linux/pd) for a while, thinking about pulling the trigger soon to replace my old Windows laptop.
I can't say much about the Os because I am a huge apple fanboy so I would be a bit bias :) As far as IDE goes, I have used all three. Personally I use eclipse and netbeans. IDEA just didn't do it for me. Probably because I was already used to eclipse. I only ever use netbeans for one thing, which is robotics programming, because netbeans has nice plugin for it. For everything else, I use eclipse. Eclipse is very easy to use and certainly gets the job done nicely. 
I think the location and industry can matter. It also depends on how much real world experience the candidate can document. For a fresh graduate, sure get certified; someone with 5+ years real world experience, not so much. I hope that any interview would contain some element of coding assessment anyway. All the cert does is check the Java box on an HR form. If you think it's anything more, feel free to state your case for the certificate. Particularly the quality of some of what the test is asking. 
sure emacs, ConEMU, chrome, cygwin are my primary tools I barely notice the windows environment, if it is clunky it doesn't seem to get in my way if I'm in a directory and i want to use windows explorer for something i typically just fire it up in the console "explorer ." then do what i need and close it. Most of my window management is managed within emacs and chrome with split windows and tmux in my ssh'd cygwin terminal. If i want to open a program i almost never even click on an icon from task bar... i Win+Q type two letters and it is typically the app i want then hit enter and it opens. I tend to use the SysInternals tools quite a bit too. Oh and I'm beginning to use a few chrome apps via the chrome app launcher. One of the primary reasons I use windows is when i have to do things outside of my workflow, use some proprietary tool or what not, it's not a pain in my ass and just about all the tools I'd use in linux or osx work in windows. Basically I want the path of least resistance :) Also another bonus if my wife needs to use my laptop she can at least navigate it, although it's typically taboo for her to do that :D And I can help family members as much as it may pain me to do so, by easily navigating them over the phone from knowing the UI via memory :) I have nothing against linux or osx, or windows, to me operating systems are one in the same as long as they have my primary tools (emacs, browser, terminal) I've used linux since 1996 I've used every kind of DE and tiling wm(i'm lookin at you xmonad and stump :) or wm you can imagine but in the end my workflow is always really the same...emacs, terminal, browser and some random other apps that always exist on every platform i use. I only used osx from snow leapoard to mountain lion, but when my macbook pro began to age I wasn't too enthused in spending so much $ for another one. And ended up using windows for the first time in my life at home (outside of work, always had to use it at work in some form or another). In the 2.2 2.3 2.4 2.5 kernel days I also did kernel development for awhile in the area of schedulers, but eventually lost interest, also lost interest in tuning my kernels, testing out other patches from people etc. User space programming just began to appeal far more in the fun factor of things. Lifes short :D I hope that was a decent explanation but maybe I didn't go into enough workflow detail and did more rambling :| 
As the question is extremely subjective, I was reluctant to answer. As an Android / Java guy the answer is something *nix based, if only for the command line tools. The windows command line, even Powershell simply don't provide enough flexibility to support my day to day activities. Another plus is that, at least where I am, my development environment closely matches the production environment. This reduces the number of surprises. As for the desktop, I prefer the Mate with ~4 workspaces, but that's just me. 
What am I missing? What does this have to do with /r/java? I see the title of te OP, but I have looked through that website and no mention of Java. /u/ForkJoin where did you get that this is written entirely in Java?
Besides dropping the explicit call to the methods using the Class name, what did you do [different](https://www.youtube.com/watch?v=zNCrMEOqHpc) that /u/Uncle_DirtNap did? 
No architecture or source provided. Let's have some relevance.
I have used an XPS 13 quite a bit (running Windows) and it is a nice machine but the trackpad is no where near as good as what you get on an Macbook Air/Pro sadly. It has quite a nice screen though. 
&gt; the trackpad is no where near as good as what you get on an Macbook Air/Pro sadly In what sense? I am not a big fan of trackpads in general and not particularly psyched about the MB's trackpads so I am probably willing to overlook it if it is not completely awful. What attracts me is that the XPS 13 comes with Ubuntu from the start, which means that I can have Linux-friendly hardware (like with Thinkpads) and a sexy laptop at the same time. 
Ubuntu + Zsh + Git + Vagrant + Docker + Chef + Eclipse + Maven
If you are just learning Java, it really does not matter. Every modern OS is reasonably stable. All the IDEs are more than capable of building simple projects. Anything you like about any of it as a beginner may very well be something you look at in disgust once you have a few hundred thousand lines of code under your belt. Just pick something and get to it. When you advance to the point where the differences in tools actually matters, you will probably have the insight to know why one is more suitable than the other for the task at hand. 
GWT is Java compiled to javascript. This is how the game is able to be played in-browser.
Multitouch is so much better on a Macbook Air/Pro. Scrolling also just *feels* better on a Macbook. I think this is down to the drivers on OS X more than anything as Windows running on a Macbook doesn't feel as good as OS X. 
I use Win 7, OS X, Ubuntu, and OpenBSD. When it comes to Java, I generally don't have a preference. 
Which class, what class, what errors? Show us your code and/or the complete error with stack traces.
I find windows gets in my way the least in terms of set up. Once everything is up and running though, I find that it doesn't particularly matter. You should use whatever you are most comfortable with in normal use. For me, that is Linux, but I might pick up a Mac for development.
I used eclipse for years, then used idea for a few days and that ended in buying a license. I just really like it. It feels much more centralized and organized to me. It isn't particularly fair though, because I have almost always hated eclipse, even while using it. I have never liked netbeans. We used c# in school and that had us using visual studio. Nothing on the java market compares to visual studio IMO, but idea have me the closest feeling.
I didn't even read his comment, I just saw OP's question and I posted. Posting that code wasn't some desperate post to get karma... I just wanted to help. Are you saying that each question is only aloud one response? Jesus. Why get mad at me for trying to help OP. Edit: typo
&gt; add support for first-class functions I am afraid that Java continues to lack of first class functions. Java lambda's are still objects. The syntax is similar to that of languages with first-class functions, but they are not. Java provides a "similar" functionality through first-class objects.
Shell out and call javac as a process
I'm not finding that information. Where are you getting that the game is in GWT? I'm not questioning the technology, I'm questioning how you know that the game is written in. 
How did you read my comment as getting mad at you? I asked what is different from /u/Uncle_DirtNap for informational purposes. I too have done the same thing as you. When I did it I thought I was adding to the discussion and someone called me out for writing the same thing. I calmly pointed out how my comment was different. I apologize if you thought I was "attacking" you. By the way, I completely agree with you about karma. Who cares. My karma comes when someone says thanks for the help. 
I haven't used it before, but this seems like a straight forward API. It was posted here a few months back https://github.com/OpenHFT/Java-Runtime-Compiler Edit: I found the [original link](http://www.reddit.com/r/java/comments/1xfsaz/javaruntimecompiler/) when it was posted. Maybe /u/based2 is involved with the project? 
While that seems a bit masochistic given how Java is designed, is there anything inherently wrong with using only static methods? After all, statelessness seems to be one of the pillars of functional programming.
In the program I am working on, I load a .java file by browsing for it, simple enough and need to extract some functions inside of a class in the .java file. The is read by the compiler but it can't find the class "myTest" in it, which is what I specified as the string name of the class. After doing some research online I discovered that I wasn't the only one having this problem. The exact error from Netbeans is "java.lang.RuntimeException: Uncompilable source code - cannot find symbol symbol: class myTest"
I'm not. Just going off the post title + complexity of the preview video...GWT enables far more powerful application development than traditional Javascript alone.
Could you provide some sample code? Maybe we can find what's wrong :)
I've used Jackson before and that was good. Why word you recommend gson over Jackson?
Sure. My first attempt using the Classloader: ClassLoader cl = new JavaSourceClassLoader(this.getClass().getClassLoader(), new File[]{new File(cipherFile.getPath())}, (String) null); myTest newObject= (myTest) cl.loadClass("myTest").newInstance(); newObject.doit(); Second attempt using SimpleCompiler: SimpleCompiler compiler = new SimpleCompiler(); compiler.cook(cipherCode); Class&lt;test&gt; myClass = (Class&lt;test&gt;) Class.forName("com.example.testc", true, compiler.getClassLoader()); test instance = myClass.newInstance(); instance.doit(); cipherCode is a string and cipherFile is a File object. I'm making an encryption program that needs to allow ciphers to be changed out on the fly and I plan to do that by writing them in external files and extracting the functions that encrypt/decrypt to use later. Thanks for the help. Edit: I'm pretty confident that I put the path of the file correctly because I printed it to console to make sure. What I think the problem is, is that i say look for this class and it can't find it or read it in the external file. :/
You are right. It's important to remember that you shouldn't see maliious intent when there's possibility of stupidity, but it's hard to always follow this testament. Anyway, programming mades you Schopenhauer's adept, not Rousseau's.
What do you like about developing on OS X compared to say Windows? I've used Windows almost exclusively, only dabbling in Linux a little bit.
Wouldn't Linux offer the benefits of Unix without the price tag of Apple?
Not saying you're wrong... but you aren't entirely right :) I'll state the case from my (non-hr) hiring manager experiences and 15 years as a software developer in several different companies. Interviews are expensive. The goal is to waste as little team time as possible while finding a qualified developer who will fit in with the team. Heck, even phone screening candidates is expensive... and by definition the team is shorthanded, I mean that's why they are hiring. Personally speaking, when I see a cert, I believe I know a few things: I know we won't have to train the candidate on basic language issues. I know the candidate invests in keeping current. I know the candidate can memorize language errata. It is of course correct that I don't know if s/he's any good at problem solving or design (the essence of being a good developer). But still... That's a lot more than I'd know from a resume that merely lists "5+ years real world experience". Having worked for many different companies and having observed awful coding practices, I am well aware that some can be employed for 5+ years and not know their finally from final from finalize... or more importantly what cohesion means. Professional "experience" on a resume doesn't actually tell me anything before I pick up the phone. To be clear, I'm certainly not suggesting OP has to cert. I'm saying, to me, it is worth the $250 to take the test in that it will give you modestly more options and modestly set you apart from other candidates in pursuing your $125k salary... I mean the cert plus a book is well less than 1 day of pay. I'm inclined to mention that old java devs can be worth less (and yet get paid more) than novices if they don't keep current. This industry is said to have an age bias, but unfortunately many "old" developers prove the bias all the time. I can't tell you how many people still code like it's 2005. Certs are one efficient way to communicate that you bothered to keep current with the language... not the only way. 
I've played around with this, it's not bad. It's not Unity for Java but it's not bad.
Okay I've worked on this some more and have the following... package knittinghelper; import java.util.Scanner; public class KnittingHelper { public static void main(String[] args) { //Define variables int rows; int counter = 0; Scanner s = new Scanner(System.in); System.out.println("Welcome to Knitting Helper! You can use this application to count the rows in your knitting project."); //Prompt user for the number of rows in their chosen pattern System.out.print("Please enter the number of rows in your selected pattern: "); //Obtain integer value using Scanner rows = s.nextInt(); while (counter &lt;= rows){ System.out.println("You are at row " + counter); counter++; //Await user hitting enter to show they have completed that row System.out.println("Please hit enter when you have completed this row"); Scanner keyIn = new Scanner(System.in); keyIn.nextLine(); //Congratulate user on completion of project System.out.println("Congratulations! You have completed your project!"); } } } So now the issues I have are; I still need to have something in place if invalid data is input. I only want the 'Congrations...' to come up after the while loop is complete, but at the moment it's coming up with every count. Thank you for any help!
This is what I'm using to make my game. Lot of fun and certainly a great way to start making java games if you don't want to learn OpenGL
Probably because some java developers are lame "no games just business" people. I never understood that perspective. Game development is a great way to challenge yourself and it's definitely more challenging than common business logic in several areas.
Totally agree. Manipulating data really doesn't change. "I have all this data make it usable for me" is kind of repetitive after a while. But game logic is ever changing. 
They spelled 'editing' wrong in the video. But it looks very cool, I plan to check it out.
It needs maven support
It could, I haven't tried it enough to know. 
Having access to a bash shell without resorting to cygwin is nice. We run on Linux servers, so little things like having our file seperators all be the same is nice. os x is really simple to maintain. You can install homebrew and "brew install" just about any Dev tools you might want. We have all our engineers use OS X. The only problems we have came after our it department stated to install a program called "centrify" on them so they could use active directory policy management on them - what a load of crap that is. If our IT people didn't have such a windows bias, they could have just learned the os x server way of doing things. Even after centrify they still work OK - I can generally go a month out two between restarts, but it hangs in odd ways occasionally. Macbook Pros are really nice. Ssds are standard and the "retina" display is very nice. 
Does anyone have any links to some good video tutorials? I've only seen 4 guys on youtube do a tutorial, and only one of them was good. I really want to use this engine, and I learn through videos.
Theres no really good video tutorials, i learned from the website:http://hub.jmonkeyengine.org/wiki/doku.php/jme3#tutorials_for_beginners
Love spring, and love what spring has done with these guides, I've used them countless times in enterprise apps to add new functionality and everything is clear and simple to understand. Keep up great work. 
I have only limited experience but I have to say, I always liked NetBeans better than Eclipse. The sole reason I am using Eclipse is that I read everywhere how slow NetBeans get as the projects grow, plus the fact that everyone is praising the # of plugins for Eclipse. I don't actually benefit from any of these aspects, but I think it's better to get used to a single IDE so that you don't even have to think about it's interface etc. and so that it doesn't hinder your workflow in any way. 
If you have a mac, you should type this into your terminal: telnet towel.blinkenlights.nl
In theory yes. If all you're doing is working on the command line, Linux is fine. If you are lucky enough to have the right combination of hardware that works with your distribution of choice (specifically the graphics card), Linux GUI can be acceptable. Personally I've found Linux's variety of GUIs all to be lacking and more importantly sluggish (and this is from 10+ years of using Linux, including Gnome, KDE, Unity, Xfce, and others). Mac just works. I'm also of the opinion that the higher price tag of Macbook laptops is generally worth it due to better build quality. 
please please please use [github](http://www.github.com). you'll love it i promise.
Perhaps I'm looking at this too low level, but why is it faster with ++i? In order for the comparison instruction to execute, i needs to be incremented. With i++, the CPU can start the for loop comparison immediately, then start the addition/assignment as there's no dependency. In C++, i++ is faster. Can the vm optimize better with ++i?
Oh my! Really nice!
How's Java on OpenBSD? I read that I can install OpenJDK on OpenBSD, how about deploying applications (console or web applications with Tomcat)? Any special things I need to take care of if I'm going to write or deploy Java-based applications on OpenBSD?
It's a bit of a bull story. Only WebSphere comes bundled with a JDK. JBoss, GlassFish, TomEE, Geronimo, Resin, Liberty, JEUS, ... all run on whatever JDK. Sure, some of them had issues running on JDK 8, but that was due to (dependency) bugs and not because of some bundled JDK. If the JDK 8 bug is in say Hibernate then Spring projects using that (which are a lot) will have the same problem.
We use Flyway in all our deployments. Great tool. Thanks for posting. 
Thank you for the nice feedback! Truly appreciated!
Good work, you're getting there. A few notes: - You switched from a for loop to a while loop. That's fine, but notice now if the user enters 5 they will actually see 6 rows (0,1,2,3,4,5). You should fix that. - Inside your while loop, you create a new Scanner called keyIn. You could (and probably should) just use the Scanner s that you already have, rather than creating another one. Regarding your questions: - If you only want the 'Congratulations' to come up after the while loop is complete, then you need to move that print statement to a place that is after the loop is complete :) - Guarding against invalid input can get a little tricky for a beginner. A simple approach you could do is a use a while loop in conjunction with the Scanner hasNext* methods. Basically you want to use s.hasNextInt() to check if the value is actually an integer before calling s.nextInt() because that method will thrown an error if the type is wrong. If it is not an integer (and in this case you might want it to be a positive integer) you need to loop, checking input until a valid value is entered. Why don't you give that a try for the entering of the rows first? Once you get that working, you could if you wanted go back to the row counter and tell the user to press 'C' instead of enter and then guard against invalid input there as well.
I never understood what oracle (sun?) was trying to accomplish when they "included the rhino engine" with their distribution of the jre/jdk, since it wasn't standardized (ie openjdk was sometimes distributed without it) I had to roll out my project with my own distribution of the rhino engine anyways.
Thanks, I'll have a go at that.
&gt; We're sticking with Java 6 for about as long as Java 6 is still available from Oracle. Doesn't the fact that Java 6 is EOL and has unpatched security holes give you pause? You're really not doing your users a favor by enabling them to run Java 6 and earlier.
I'm curious as to how people use Java-Javascript integration. I used rhino once when I was reimplementing a Javascript library into Java and I wanted to run my tests against both. I can think of a few other ways it could be used, but im curious to know what real world applications people put it to.
we use rhino as a scripting engine for Java. At work we deploy big enterprise sites with ye old helma.org and we are currently switching to ringojs.org
Congrats!
Looks like a maven setup? In that case, both src/main/java and src/main/resources are on the classpath. There's a bunch of ways to load resource but you can use the standard class loader: InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream("createTables.sql");
Thank you very much.
github is a great place to keep everything for a potential employer too 
As a user would you prefer it in the "Run" menu or in a settings menu?
&gt; Just wait when you learn how immutability is often applicable and desirable, and how you fuck up your codebase by inserting getters and setters everywhere needlessly. &gt; It's kind of rare when I have to generate getters and setters. The whole Javabeans convention is bad. Lol, wait until you get out into the regular world of java and web programming and discover that pretty much everything useful expects that your data classes have getters and setters, and that everyone decided making classes immutable by default was a bad idea for the last decade or two. 
Our product uses it in our build systems and we also integrate scripting language interfaces to our product. Personally I've used it to build personal web applications in js (a while ago at least before all this node crap), but I got bored of it since autocomplete is awesome for java and it sucks for js when developing.
Game engine, scripted entities, interfacing with the engine via scripts etc... There are a lot of items and a lot of entities with unique behavior. Best to delegate behavior to scripts rather than implementing hundreds of concrete classes all inheriting from the same base with minor differences.
Check the environment variables in the system settings. Whatever version is there is what will run by default.
There are two things that pop out to me from the docs... &gt; Disadvantages: ... When you first type AutoValue_Foo into your code, it will be red. So code completion probably won't be able to figure this out until after you compile, which is slightly ugly. On the upside this is just in the create function. &gt; Advantages: ... User writes plain old java code. As this is just an accessor it doesn't affect real time compiling. 
Cool! I have a similar project: https://github.com/zfogg/ascii-chat
Until Google ports the language and library features to Android (or just admits Larry Ellison outplayed them licenses/buys Java from Oracle), I can't justify moving off of Java 6.
Congrats, Axel. Keep up the good work! :-)
&gt; Doesn't the fact that Java 6 is EOL and has unpatched security holes give you pause? You're really not doing your users a favor by enabling them to run Java 6 and earlier. Our users will be able to acquire patched versions of Java 6 from Oracle for a long time. Specifically in the banking and insurance sector, people don't upgrade "quickly". 
I don't really know how to do it but I should take a look at the BouncyCastle libraries. I know they have support for RipeMD hashing. I should warn you, from my own experience BouncyCastle is not the most user friendly library out there, but it is the most complete... (Used BouncyCastle extensively for cryptography and non-repudiation use cases). Here is a quick google on how you should do it... Not sure if it is usable: http://www.massapi.com/class/org/bouncycastle/crypto/digests/RIPEMD160Digest.java.html 
It would make sense in a Settings menu, but the Run menu could have some default speeds.
Thanks, i have seen bouncy castle in my web searches, but you're right it is not user friendly at all lol 
I'd like to try building something with it -- any quick start tutorials or good documentation available?
Yeah but arent those dependencies tightly coupled with the app server? Out of those you listed which ones will support JDK 8 today out of the box?
&gt; There are people out there who want to build great, scalable solutions by not being lazy. Immutability is a necessary part of that. And clearly a huge portion of the java programming world feels that you're wrong. Hibernate, Spring MVC, J2EE (the latest stuff copied spring and looks pretty good), I cannot think of a single *major* framework that follows your own personal "immutability" philosophy. The idea of immutable objects has been around since the beginning of java - but again and again useful frameworks have avoided using it. If one writes their own code that way, they're going to find not just that other people use a different "style", but that their way of coding is completely incompatible with all the major java frameworks and tools.
Array != Arrays
cool stuff. 
Thank you so much.
Hey man, can you send me this as well? :) 
Sure, pm'ed you
tl;dw?
Listened to about half of this during my trip to work. They patched hotspot and [perf](https://perf.wiki.kernel.org/index.php/Main_Page) to allow you to see java stacks in perf. Also limited (still in development) support for gc/memory allocation/other profiling via the tracing support in perf. The code isn't open source yet and it's unclear if the hotspot changes will ever be accepted upstream, so currently you can't try this at home.
woooow thank you guys. I really appreciate your help
What's the advantage over Liquibase? Liquibase seems more general purpose and doesn't require writing all the DDL.
&gt;Yeah but arent those dependencies tightly coupled with the app server? I don't think so perse. Software is of course tested for one of more JDKs, but that's true for all software, not just the scary "application server" as Spring wants you to think.
The only "utility" here is the JSON parsing. And I'm sure the xjc people are hard at work on updating it to parse JSON files. If not there are a jillion IDE plugins to get the same thing done.
Actually they patched the hotspot, so it contains the profiler bits built in, but he mentions you can run it separately (as would normally be the case) from the non patched hotspot. I guess we'll have to wait for the code
Long article but very well written and great advice. 
No mention of the fact that Java 8 has [Optional](http://docs.oracle.com/javase/8/docs/api/java/util/Optional.html) built in? Also, the annotations are not specific to Jetbrains. The Eclipse compiler can also be configured to check for null annotations.
Thanks for the info; I've updated the article regarding Java 8.
I guess this works by why not just use CDI with simple @SessionScoped and @Inject. It is a lot less configuration and boiler plate code. You only need a singly Jar file to get the library.
I wish there was a way to specify non-nullability at a language level. Even when using `Optional` you can still pass a `null`.
Can I ask what this is used for? I downloaded it, set it up and ran it. It created the extra table in our database. Reading through the site I didn't understand what it could be used for.
I'm level 4. Never used optional but I'll take a look at it when I start using java8
Sure! Check this link out:http://hub.jmonkeyengine.org/wiki/doku.php/jme3#tutorials_for_beginners
You probably just want to wrap everything you want repeated in a ```while``` loop. In the future, see /r/javahelp.
I knew this was going to be the wrong place. Thanks anyways ;)
Old Runescape 
Minecraft
I can't mention much about certs, but here is a good book for when you are a little more experienced in java to use for some more advanced subjects. Also learn the difference between the environments. Host environments are different from how java environments work as well. some examples would be java runtime vs compile time compilation, and how there are somethings that get you into trouble more so than host would, etc. http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683
Portals, Portlets and Java are not dead
Look up on the internet how to write to and read from files. You don't need to create those separate CreateFile classes you got. After you create the file, then read it again. read in all the data into a String. Strings have a split method which splits the string into an array based on the delimiter. String [] parts = info.split(' '); then you can iterate over each entry in the array for (String s : parts) { //do things for s }
A good early project is a checkers or other board game AI. Make an AI that a human can play against. You will need to figure out how to represent boards and pieces, generate moves as well as a method to score moves. Then use a [negamax](http://en.wikipedia.org/wiki/Negamax) algorithm to have the AI choose the best move. Add in alpha beta pruning later to speed it up. It's a solid introduction to problem solving, algorithms and user input. You can even add a fancy gui if you feel like it.
This method should do one thing: find matching people. Right now it looks like you are trying to receive user input from the console *and* find matching people. But that won't really work because your method signature (findPerson(String searchFor)) is expecting search terms to already be provided. Instead, try something like this: private String getSearchTerm(){ //Do something here to return the String from the user } public ArrayList&lt;Person&gt; findPerson(String searchFor) { //REMOVE: Main.handleSearchPerson(keyboard, searchFor); ArrayList&lt;Person&gt; matches = new ArrayList&lt;&gt;(); //Rest of your existing code } public void getInputAndProcess(){ String searchTermsFromUser = getSearchTerm(); List&lt;Person&gt; matches = findPerson(searchTermsFromUser) //Do what you want with the matches }
I use this everywhere, all my interfaces have a canonical null object, makes it so much easier to root out NPEs when they do happen. I was surprised this wasn't mentioned. 
I dunno if a beginner could do that in only a week or two, that'd be a more long-term thing.
It doesn't mean anything. 
Restart r = new Restart()
Thanks! I checked the link. How do you equate neutral XML as vendor lock-in but specific vendor SQL as NOT lock-in?
Yeah, the author isn't solving the null problem but just masking it in another object (ie Optional). This in of itself is great, but the underlying null check idiom still exists. Instead of: if(varx == null) { // do xxx } else { // do yyy } It's now if(optionalX.isNull()) { // do xxx } else { // do yyy } Which is nice and all... But even nicer would be using the Null object pattern and writing the following without a null check: varX.doSomething() Of course, this isn't useful in all places, but it is a great pattern to have in your toolbelt
First some git conventions: Typically you want to put the root of your project in the root of your repo, that way someone can just clone it and go. (ie. you have your projects root in the TouchChart directory) Next you are going to want to remove IDE specific project files from your repo. (.classpath, .project, /.settings, etc). You can make git "ignore" files by added regular expressions to a .gitignore file in your root directory. A sample .gitignore might look like this: .project .classpath /.settings /gen You are also going to want to ignore binaries to keep your repo size down /bin /libs Once you add these to your .gitignore you can update your repo with git rm --cached . On to code: Generally you want to make your instance variables as private as possible. No access modifier == public modifier in Java. If you need to access instance variables from other classes add method accessors for them. It is also unnecessary to override a method if you are only going to call super on it. I didn't get too much further then the root package since I'm mobile but from what I've seen so far you're on the right track. Oracle's conventions can be found [here](http://www.oracle.com/technetwork/java/index-135089.html) and are more or less loosely followed across the industry. And yes, in the future it's probably more appropriate for these kinds of posts to go in /r/javahelp
Nah, figure out how to not need boilerplate. Not really a popular way to do things these days.
Thanks for the feedback. I cleaned up the repo and moved it up to the root directory. Eclipse forced me to call the constructor for some reason even though I was only calling super. I also made the view private (missed that for some reason). If you have more time to look over it I would appreciate any help. Cross posting to /r/javahelp too. Thanks again.
At a glance, here's a few pointers. * Consistent whitespace would make the code easier to read. Best fix is to set up the code formatting in your ide and either enable auto format on save. * Unit tests. Make some, they'll save you so much time later * You have comments, but no javadoc (that I saw). Javadoc comments show up in most ide's so you can see the comments when using instances of the class without visiting the code. For instance in Workspace.promptUserForFilename, you comment the method, but it would be better to do: /** * Prompts user for filename. If name is entered saves to that file. */ public void promptUserForFilename() { * Like most android and other gui apps, your code has a lot of anonymous inner classes. Some developers prefer it this way, but I prefer to create an actual class which implements the necessary interface or extends the necessary base class. This moves that logic into it's own class and cleans up the calling class imho. This isn't always the best option, but it doesn't hurt and can greatly enhance the readability of some code. 
* Do you mean my line breaks are inconsistent or the indentation? * I am not familiar with unit tests at all. Any recommended place to research them or just start googling? * Wow, thanks! I did not realize it was that easy to create a Javadoc. * Yeah, I was wondering if that was too messy. I decided to try to use anonymous classes in order to keep the other classes more general and reusable and to keep down the total number of classes. 
Ah I should have clarified. If no non-default constructors are available in the superclass a constructor from the superclass must be implemented. But I was more alluding to your overridden *methods* particularly in your MainActivity that only make a call to their super implementation. Those can be removed without consequence. 
&gt; I am more the kind of guy that I need to be shown the steps and the assembly of the program in order to do the project, and understand it. Basically, what I told my friend is that I need to see the whole program (or a basic bit of it) to understand it. Perhaps you should go out and learn the concepts instead of asking strangers on the internet to do it for you. I'm positive that if you can do 1D arrays, you can do 2D arrays. There's no such thing as "being the kind of guy" who needs to see the answer to understand how to solve it.
So... what is your specific problem? I (and most other people here, surely) aren't going to go over your code for you if you can't give a detailed explanation about where you're stuck. It is Arrays.method, by the way. 
OK, I actually got the array method to work once I imported it, currently I am having an issue it thinks that everything is a magic square 
&gt; Do you mean my line breaks are inconsistent or the indentation? I mean the whitspace around variables, operators, parenthesis and brackets. Java standard is to do: if (height &lt; width) { changeHeight(width / 2); } else { ... But you sometimes do that and sometimes you leave out the spaces before and after, or just the space before, or just after =) Using a formatter will fix this without you having to type your code differently. &gt; I am not familiar with unit tests at all. Any recommended place to research them or just start googling? Some topics you might want to keep in mind while googling are JUnit and Mockito. There are many tutorials on both, some general java and some android specific. &gt; Wow, thanks! I did not realize it was that easy to create a Javadoc. Yup, it's that easy. You can do so much with javadoc quite easily and most ide's will complete the layout for you (in Eclipse it's Alt+Shift+J, and other ide's have similar features). Also, you can generate the javadoc html just like Oracle does for the JRE if you want. &gt; and to keep down the total number of classes It's important to note that anonymous inner classes keep the number of source files down but the same or more classes loaded by the jvm. Each anonymous inner class also has a link to the instance of it's parent class which creates it (that's why you can do OuterClass.this.doSomething() ), which can prevent memory from being freed as you might expect. Many gui devs like to do things the way you did. I prefer to extract (nearly) all the classes into their own files. This allows them to be tested more easily, simplifies the code that would have created the anonymous inner class, often leads to better code reuse, and enhances readability. Many times it's a judgement call... there's really no perfect answer.
Just to add on here...Android development involves a lot of anonymous classes and callback interfaces primarily used for network code. I can't wait for the day Android get's Java 8 support which includes lambdas.
terrific, ok last part is getting it to out put when only a certain check fails
Any news on if Android is getting 7/8 some time soon?
I know of a bunch of portals going up. Big business especially finds them useful internally.
You can do something similar to your null object pattern with Optional: optionalX.or(defaultX).doSomething(); Slightly more verbose but also a bit more flexible as you can have different defaults for for different calls.
I am mostly cloud now, but I still maintain mainframe programs and am leaving cloud to get back in to what I really love doing, just programming. Best advice I can give in the switch is to just forget everything you think you know. Mainframe doesn't translate well to java. At all. You want to target the ocja and the ocjp. There isn't much out there for the ocja, but get a book with practice exams and study the website tutorials. There are plenty of resources for the ocjp, which is the harder of the two.
Like /u/Tcur said, I don't want to just give you the answer to this question, but think of it this way -- a 2D array is like a grid. If you can visualize a 1D array as a row of boxes filled with numbers (for the sake of simplicity), a 2D array is a grid, where each row in the array is it's own array. Sounds confusing. But take this example... public int[][] theArray = new int[3][5]; That is an array with three slots, where each of those slots is an array of 5 integers. Keep in mind that theArray[2] is not an int, but an **int[]** because the first bracket is the number of arrays. If you wanted to access one specific int, you'd have to say something like theArray[1][0]. If you really need help visualizing this, perhaps you can make an excel spreadsheet where each row is a student and each column contains their respective test scores.
The thing about optional is it nearly forces a null check. You don't deal with optional without at least thinking of the possibility that the value coming out may be null.
Thanks. great read that is.
No problem, I thought the link would explain it better than I could. :)
&gt; Why is this happening and how can I fix it? The problem is not that your `getOverallAverage` method is using a static variable - it's that you're calling `getOverallAverage` *from* inside of a static context (i.e. method). The last `println` snippet you posted shows this: you're accessing the method as if it were static. Won't work.
I took static out of getOverallAverage because I thought it was messing with the program. The private method can't be static because it would mess up the actual computations when the various averages are called.
So calling the method in the print line is using it in a static context? I don't understand why that is. Is it because it is being called in a static main method?
You need an instance of Student to access non static methods. Student student = new Student(); student.getOverallCount(); This probably makes no sense in your code and you should just add the static modifier to those two methods. relevant: http://www.reddit.com/r/learnjava http://stackoverflow.com/questions/2671496/java-when-to-use-static-methods Also, consider applying the [Single responsibility principle](http://en.wikipedia.org/wiki/Single_responsibility_principle) mentioned in the stack overflow comments. Edit: I see you use an [instance variable](http://en.wikipedia.org/wiki/Instance_variable) in the average method. I see no reason for this and would refactor your code to something like: private double average (int count, int total) { double average; if (count == 0) {average = 0;} else {average = (double)total/count;} return average; } or even: private double average (int count, int total) { if (count == 0) { return 0; } return (double)total/count; } 
It's a static context if you call it by using &lt;Class&gt;.&lt;method&gt;. Non-static context necessitates first instantiating a new Student and then using it to call the method, &lt;instance&gt;.&lt;method&gt; . But what you want to do is what asraniel said: make the methods static. To reiterate: Student.getOverallAverage();//this is a static call Student myStudent = new Student(); myStudent.getOverallAverage(); // this is a non-static call
Welp I found the problem... I switched the *total* and *count* variable places in the private method, and that's why I was getting the complete wrong output, and why I thought having the method static was causing the variable.
I work for the Spring team at Pivotal. Spring Boot 1.0.1 GA is here. Spring Boot is an easy way to focus attention when developing enterprise Java applications. It embraces convention-over-configuration, providing sensible defaults for the Spring platform. There is a video on the page linked demonstrating some particular integrations for Spring Tool Suite, an Eclipse distribution, though Spring Boot does not, by any stretch, require a particular IDE. Instead of using the demonstrated IDE wizard, simply get started with http://start.spring.io. There are many ways to get started, including the guides located at http://spring.io/guides. As always, I'm happy to help anybody taking their wayward first steps (twitter: @starbuxman)
Looks nice to use but seems like JRuby or Jython have this space pretty well covered 
A friend made a good starter project; a cookbook application which lets you define recepies and save them as files. Could be console-based, Swing, or even a web app, depending on what you want to learn. :) 
is source code available anywhere ?
Hi, why when using maven the project have to be child of spring-boot-starter-parent ? This stop me from using spring-boot.
I'm studying for the OCJP6 exam at the moment and have found doing as much mock exams I can get the best preparation. If I get an answer wrong I study it and figure out why the answer is what it is. I have read the book fully too which took me 3 months. As for resources look into test killer and whizlabs for mock exams, very helpful!
Spring boot is awesome, last 2 enterprise projects I made used boot and the actuator. Amazing work guys, spring was always robust, now it's as quick to set up as any of the new kids on the block. 
Excellent work! I've been using Spring Boot now for a few months and it has made a world of difference getting simple applications out the door. The docs keep getting better and better too, this is has become one of my new favorite projects. 
Spring boot isn't a framework but a way to very easily and quickly add spring to a project. You will still be using Spring Mvc and spring security etc but now you can get a project bootstrapped by creating as little as 1 config class and adding 1 dependency to gradle. Boot allows me to build restful backends in less time than it took me just to set up a project. Check out the guides on spring.io for lots of great examples 
Java 7 already has official support. No word on 8 as far as I can tell.
Is ocja mandatory, or can I skip directly to ocjp? Also, how much does each certification cost, and are the exams straightforward, or are there any uncertainties involved in them? Sorry for so many questions.
Why are you making the arraylist addressbook static? Also, why arent you using a hashmap?
Few things: Don't `ArrayList&lt;ArrayList&lt;[...]&gt;&gt;`. If you have to, use `List&lt;List&lt;[...]&gt;&gt;`. The convention of method names is to avoid underscores ("`_`"), so please consider using camelCase. The creation of the array list in the second snippet is redundant, as you are immediately throwing that instance away. The source above seems to be missing few crucial parts as it seems that you are using variables (like `c`) that aren't defined. If this is an address book, your list-of-lists should probably be a `List&lt;Contact&gt;` (or a `Map&lt;&gt;`, see below), where each instance of Contact has the names, lists of telephone numbers (as strings! numeric type like `long` won't retain special characters like plus or extension numbers), email addresses and whatever else you need. Finally, I don't get it why are you populating a list with nulls? Maybe what you are looking for is a `Multimap&lt;String, Contact&gt;` that would map people names to their contacts (I assume instances of your class `Contact` contain phone number).
because of this method(for some reason i can use this.addressbook) private static int search(Contact c){ ArrayList&lt;Contact&gt; node = new ArrayList&lt;Contact&gt;(); node = addressbook.get(firstLetter(c.get_name())); return Collections.binarySearch(node, c ,Contact.CompareContacts); } and i didnt used hashmap because i wasent of aware of this thing when i started the work 
Agree with everything here. Especially the fact that `List&lt;List&lt;&gt;&gt;` is the wrong data structure for this type of data.
Exactly my thoughts
Maybe nitpicking, but if you leave out the access modifier you will not get public accessibility, you'll get "package private".
Currently I've solved most of my webapps development productivity using Spring-boot + Gradle + Spring loaded. You simply run your main class in your IDE and you can change things accordingly. Deployment is also very easy -&gt; just deploy one fat jar.
It's weird syntax-wise, and it should have its own keyword, since it actually isn't like any other modifier. "Package private" means that it is accessible to any class in the same package, but not to any other class - not even subclasses (unless the subclass is in the same package). It's analogous to private, but instead of restricting access across classes, it restricts access across packages.
How does this work? what do I place in the brackets. 
Spring Boot is awesome. I'm using it in a project I'm working on right now. It's amazing how little code you have to write. (Shameless plug: http://github.com/joeattardi/tailstreamer)
As far as I know, Dropwizard (your link is broken btw) is used for building REST services. Spring Boot can be used to build a full-blown Spring MVC webapp. I use it for MVC and also WebSockets.
Is Spring Roo going to be deprecated?
switch to a different IDE sounds silly...you should standardize on build tool and let developers pick their own IDE. 
All i could find were the slides: http://www.slideshare.net/SpringCentral/rest-ful-apidesignwithspring
It's kinda usefull when you want to expose some methods/members to other classes inside the package but you don't want it to be part of the public API. If you think of packages as modules rather than namespaces, it actually makes a lot of sense (although the *syntax* doesn't). The module can set up access rules, just as classes can. That way, the module can have internal classes or public classes with module-internal methods/fields. Maybe you have a cache object in a class, and you want to restrict access to the cache to your module. No one outside your module should be able to mess with the cache, but you need to invalidate the cache from a number of different classes inside the module.
Why for the hell are you trying to persuade your bosses to switch to Intellij IDEA?! It's not a proper tool for bosses. Show them Power Point and they will be happy as kids! And while they'll be playing with Power Point, switch your builds to maven or gradle. As for the developers - they can use what they like then.
I don't know the answer but you could use a proxy fake your location for downloading. Try a google search for options: https://www.google.com/search?q=location+proxy
&gt; Does anyone know why I can't download the JDK from Guam? Because Oracle doesn't want it that way. It's a corporation, it can do what it wants. Also they might restrict this also to government regulations and/or treaties or such things.
I always thought intellij should publish a white paper detailing their advantages over eclipse. That said, I've sort of given up trying to convince my boss at every new company I work to buy me an IDE, I just pay for a personal copy at this point. Upgrades are $100 every few years.
After using Intellij ultimate, I'm too spoiled to use eclipse again... it's just awful.
Because it's not really another layer. It's more like a default configuration so you can worry about how your web app works instead of how spring works. I don't have to worry about whats in my WEB-INF or where my configuration files go or how to deploy it in tomcat (or any other container). At least I don't have to worry at the time of development (or production deployment if I don't want to) but I can worry later and simply remove the boot dependency and configure Spring the way I want.
Desktop applications: * RapidMiner (data mining) * JMeter (load testing) * CoreNLP (natural language processing) * Lucene (search) * Pentaho Data Integration (ETL) * DataCleaner (data quality) Server applications: * Solr (search) * Nutch (web crawler) * Hadoop (data storage and analysis) * Hive (big data OLAP server) * HBase (random-access data storage and analysis) * Cassandra (big data OLAP server) * Neo4J (graph storage) * Jasper Reports (BI server) * Pentaho (BI server) * Lots of stuff from Apache, Atlassian 
Certifications? What are those?
Colour me impressed. Also learned a world about GC, great talk!
JPC ? ThinkFree office suite? 
It's actually pretty funny because I work for a Telecom that provides high speed internet and assigns half of the IP addresses for the island. It doesn't matter what ISP I use as I've tried them all and it still gives me the same issue. They just don't recognize Guam. I'm fairly certain they allow every country to download JDK except for Cambodia, North and Korea and Guam. And again... Guam is part of the United States.
For the first part, you want public abstract BaseClass&lt;T extends BaseClass&lt;T&gt;&gt; { public abstract T refresh(); } public SubClass extends BaseClass&lt;SubClass&gt; { @Override public SubClass refresh() {... } } This gets rid of conversion warnings (because there's no longer any unchecked conversion). It also solves the "duplicate" method when generating more methods because the signature for refresh is now the only possible signature as opposed to any class which extends BaseClass. This also works if you change the return type of refresh to Option&lt;T&gt;. For the second part, you cannot require subclasses to provide a static method signature. Each class can provide that signature, but perhaps I'm not understanding what you're trying to accomplish. 
that is iterating through each data item that was in the array named parts.
Android is working on their own IDE, Android Studio, which is literally a fork of IntelliJ. This is by far the superior option. As far as which is best and which has more features, they all have more or less the same features and capabilities. Some are better with some technologies than others. You can make anything work in any IDE if you really want to, or you can switch if that's easier. There's no one answer here. 
In the Java world, there are three big IDEs: * [IntelliJ IDEA](http://www.jetbrains.com/idea/) * [Netbeans](https://netbeans.org/) * [Eclipse](https://www.eclipse.org/) No IDE is strictly 'best'. Personally, I've grown quite fond of IDEA. It looks fantastic (the new Darcula theme is fabulous) and handles things like VCS integration nicely. I also feel like it handles autocompletion more elegantly than other IDEs. All three of those IDEs are free and open-source. Honestly, it comes down to personal preference. Find one you're comfortable with and stick with it. It's worth trying all of them. 
You could make generics work, but I don't think you should. It's not a good fit for what you're doing. Double dispact using the visitor pattern might accomplish what you're doing much much better. Just for fun, here's how the example I posted works. Start with the simplest implementation of BaseClass: public abstract BaseClass&lt;T&gt; { public abstract T refresh(); } But, you only want T to be a sub class of BaseClass and that signature allows T to be any Object. Subclasses of BaseClass have the signature (excluding generics on BaseClass) X extends BaseClass. So we put that restriction on the generics of BaseClass (this isn't quite right yet): public abstract BaseClass&lt;T extends BaseClass&gt; But BaseClass has a generic, so even in the generic, you have to use it. Since we're trying to say that the T in BaseClass&lt;T&gt; extends BaseClass, we do: public abstract BaseClass&lt;T extends BaseClass&lt;T&gt;&gt; {...} The "extends BaseClass&lt;T&gt;" is just a restriction on T. The signature of BaseClass is effectively BaseClass&lt;T&gt; where T is required to extend BaseClass&lt;T&gt;. If you don't see why that is, ask and I'll be more through. If you want subclasses of SubClass to have their refresh method return the same way, you do the same thing for SubClass, so the signature of BaseClass doesn't change but the signature of SubClass becomes: public SubClass&lt;T extends SubClass&lt;T&gt;&gt; extends BaseClass&lt;SubClass&gt; { public SubClass&lt;T&gt; refresh() { ... } } 
Eclipse is good and free. IntelliJ is excellent and somewhat expensive. I have never tried net beans. 
Unless you're planning to call the static method via reflection, there is no purpose in requiring a static method to be implemented on a class. You should look into the [Factory Pattern](http://www.tutorialspoint.com/design_pattern/factory_pattern.htm) as it seems like a better fit for what you want to do.
Eclipse has way more features/plugins, and none of them are behind a paywall - indisputable.
The community edition is released under the Apache license, so it can be used however you wish. It simply doesn't have all of the features of the ultimate edition. The ultimate edition requires [special licensing](http://www.jetbrains.com/idea/buy/license-matrix.jsp); however, it's worth noting that JetBrains will grant free licenses to developers who are working on open-source software. 
&gt; Eclipse has way more features/plugins This is key for me. 
Just buy your own personal licence and use that 24/7
Unless I'm misunderstanding this, you don't need generics at all. I believe this is known as covariant return types and it allows you to narrow the scope of the return types on an overridden method: abstract class BaseClass { abstract BaseClass refresh(); } then you can create a subclass: class SubClass extends BaseClass { SubClass refresh() { return new SubClass(); } } And you can even sub class sub class: class SubSubClass extends SubClass { @Override SubSubClass refresh() { return this; } }
There's way too many self quotes in that piece. 
I've found it to be more stable.
With a solid community backing the open source project. Not just any open source project.
&gt; I think the main reason I want the signature is to make sure that all subclasses have this method. Of course, you'll find out if you try to use it, but I would like a greater reassurance than that, so that the missing method won't be discovered after the code is shipped. If your code compiles, you already have the guarantee, that there are no missing static methods. There is no dynamic binding with static methods, so compiler knows, which methods will actually be called, and you cannot accidentally leave out the implementation.
Right, that's because generics aren't covariant. Optional&lt;BaseClass&gt; is not covariant with Optional&lt;SubClass&gt;, it needs to be: abstract class BaseClass { abstract Optional&lt;? extends BaseClass&gt; refresh(); } then sub types can override it: class SubClass extends BaseClass { @Override Optional&lt;? extends SubClass&gt; refresh(); } and if you're sure you're at a leaf node in your inheritance hierarchy you can just do: class SubSubClass extends SubClass { @Override Optional&lt;SubSubClass&gt; refresh(); } 
But then you need to convince your boss to buy a license anyway. Otherwise you have to buy a license yourself.
Yes, but that is irrelevant if you do not actually need them, or if those which you need are bad. But there are things that everyone need and IntelliJ has while Eclipse does not, for example Sublime like multiple selections and better usability.
Some more direct links: Release notes: http://scala-lang.org/news/2014/04/21/release-notes-2.11.0.html Scala 2.11 intro: https://www.youtube.com/watch?v=ByDPifJMSvQ
IntelliJ Community edition is excellent and free.
did he really used comic sans for the slides? :(
I am one of those junior developers who likes to do it his own way. I've read and been told about the perils of NIH syndrome, and 'doing it myself' many times. I'm just not sure though if that's just vapidly repeated rhetoric or the sage advice of experienced developers.
What are multiple selections?
You paste your whole program code in there.
Multiple cursors allow you to edit multiple areas of a file simultaneously. Take a look at their blog update on the feature. There's an animated GIF that demonstrates it far better than I could explain it. http://blog.jetbrains.com/idea/2014/03/intellij-idea-13-1-rc-introduces-sublime-text-style-multiple-selections/
Did they fix the fundamental issues with this language? I assume these are breaking changes?
Have you tried using the HtmlUnit driver at all to run your tests? If so, did the results really mimic a real browser? 
Why is this better than some of the other XML DOM libraries for Java? Does it handle more complicated things, like using XPath to select namespaced nodes in the default document namespace?
Selenium should be an integral part of any development that involved web front-end. In addition to that, I recommend also some NodeJS headless browser library which can be very useful for quick automated testing. Use selenium for the through testing.
We use twist where I work which is basically a front end for selenium. We have over 500 tests that run in is,Firefox and chrome every night. Makes recession a snap.
You never think you do until that one time when you think "gee, I really wish i had that feature." source: had that feel a week ago.
I haven't heard of Twist, but I'll have to check that one out as well
Yeah but half of them don't work properly, have inconsistent interfaces and setting that take 30 minutes of Google searching to find. Not to mention that they sometimes break for no reason and you need to re download and configure them. Also you can't port an eclipse project directly to other IDEs without including parts of eclipse.
Afaik all three IDEs support incremental compilation (I'm sure of at least Eclipse and IDEA, not sure if Netbeans supports it directly, though it can be achieved indirectly via Maven at least).
&gt; I work for a start-up, we don't have a QA staff That's kinda lame. Selenium can only verify that pages are loading and certain page elements are present. That's really useful as a sanity test because it can spin through hundreds of scenarios (like form interactions) automatically, but it will never catch visual defects. Your startup is going to end up with a poor quality product if no one is dedicated to testing it.
I've never seen incremental compilation in IDEA, how do you enable it? As far as I can see, it can only uses javac or ecj for compilation. Neither of them support incremental compilation AFAIK. IDEA and NetBeans may recompile only projects with changes and projects depending on those but that's not really incremental compilation.
If you like an editor or IDE that much a license cost that you can take with you if you leave is worth it. To me I gauge cost on usage, if I use my laptop more than anything else in my life.. 2-3k$ is not a huge cost if I use my IDE 90% of the time on my laptop, a few hundred $ is not a huge cost. If you really can't handle the cost, then yes you'd have to convince your management why you specifically need that IDE, but maybe that wouldn't be a hard thing to do depending on how much they care about employee happiness. If they don't understand maybe explain to them, that productivity vs cost of what you're asking for is well worth the cost. But you can't use productivity as an argument for everyone, because maybe not everyone would be as productive in your tool of choice. 
What's wrong with the JAXB, JAXP SAX or JAXP DOM? All built into Java SE. Once I discovered JAXB I never turned back. I'd rath write two lines of code and a bit of custom boilerplate than include another library in my apps.
That's just a consequence of letting anyone implement and use plugins freely. It blows my mind that people still complain about project portability. This is java, there are tons of build systems you should be using, your source code is at least mostly portable. What's the problem here?
Not every organization out there has a proper build system. Unfortunately.
I do this stuff for my internship. HTMLunit is okay. It works for basic ui testing and is fast, but it's hard to develop on since you can't see what's happening and you can't take screenshots. For headless testing, check out PhantomJS. It uses a headless WebKit instance to do testing, is very fast and allows taking screenshots.
&gt; If you've used it for a while, how is the maintenance of these tests? Do they end up breaking often because of UI changes? It depends on the tests. In your case, it sounds like you want a simple smoke/acceptance test suite to ensure UI functionality didn't regress. Selenium will meet your demands in that regard. Keep your tests standalone, simple, and well organized. Then you should have no problems with things breaking due to changes. I recommend looking into Page Object pattern and emulating that.
recession? ... regression? 
I hope this short tutorial will help you http://thecrazyprogrammer.com/2014/04/java-virtual-machine-architecture.html
I use Selenium a lot, and it works well though as others have mentioned it can be a bit brittle. Using a 'page object' pattern for your tests will keep the maintenance chores to a minimum. Do yourself a favor and use this pattern, it'll keep you out of test maintenance hell
If you do decide to go with Selenium, [this](http://www.pushtotest.com/advanced-selenium-testing-screencast) is a solid intro that might help you out by the guy who wrote it.
Go to the source http://openjdk.java.net/ source code, documentation, specifications, and so much more. Every thing you need to understand anything about the Java JDK and its tools. Now I will also admit that the OpenJDK site does take a little exploring before you can really understand how to find what you want but then again I think it is time well spent if you really want to understand what is going on. 
Recess.
SAHI Pro.
I would not advise looking at OpenJDK. It is infested with GPL. 
You should do automated testing with selenium to test the functionality but also do some manual testing to verify designs. Make sure you use good naming conventions and it will be a lot easier to test the front end. I found selenium a little bit of a pain to use really. I much prefer Geb, http://www.gebish.org/ which is a selenium wrapper and uses Groovy. Really nice syntax and feels a lot cleaner to me. You might want to think about incorporating the web testing with BDD testing using Cucumber or one of the many other BDD frameworks. This way you can write scenarios for each of your user stories and have it as an executable test spec. You can then execute these in Jenkins/Hudson if you are using it to manage builds and deployments. 
Uhh.. that's what refactoring (Rename Variable) is for. That renames a given variable semantically, fixing every place where that variable is referenced, but no other variables that have similar names. Requires no selectiona and is completely automated. I will argue that for a language like Java, a refacotring which is code-aware is much better than dumb-variable-selection-and-renaming.
I've used Selenium a lot, and always found it cumbersome to write complex test. Since then, I've switched to **CasperJS**, which is a testing framework for PhantomJS, and is much more easy to use than Selenium: http://casperjs.org/ It allow you to write your front end test in javascript, and easily interact within the page with the dom and the JS. Where in Selenium you use Java to get and act on any DOM element, with casper you get a jQuery-like lib, and you can even get access to the real JS context of your page. The benefits are huge: setting up a test which trigger and load a couple of ajax elements displaying popins, and interacting with those popins after they're displayed is a really easy, for exemple.
I use it a lot. We have a file we've externalized which contains all our element identifiers. This way when the developer changes the UI we can usually just update this file instead of having to dig into the code. Overall I've been pretty happy with Selenium.
Selenium and PhantomJS (with CasperJS on top) are both good options. Selenium offers you the diverse browser/OS eco-system. PhantomJS offers you efficiency. It's headless, so it can run very quickly from the command line. CasperJS is a layer on top of PhantomJS that gives you some nice tools for writing tests. I have a startup called Ghost Inspector based on CasperJS that provides a Chrome recording extension, test editing GUI, and a cloud service for running automated browser tests. You could also give that a look. https://ghostinspector.com/
Thanks guys, I'll check it out. I also got this cool plugin for Eclipse that outlines the bytecode for your program. http://asm.ow2.org/eclipse/index.html
very cool, thank you
I use Selenium SauceLabs on a daily basis and it's fucking phenomenal. I absolutely love it. It's very easy to implement and the test monitoring can be linked to a PagerDuty account for rapid test failure response.
For key value pairs, a List of Tuples. Or maybe a lightweight database. Depends on what you're doing. 
While the HashMap in Java 8 may be faster, his benchmarks are completely invalid, to wit "even with one million entries in a HashMap a single lookup taken less than 10 nanoseconds, which means around 20 CPU cycles on my machine". Can you perform 1 million hash lookups with ~20 instructions? Unless he uses a framework like JMH to run micro benchmarks, the JVM's dead-code elimination (DCE) will continue to render his benchmarks unless.
We've had extensive experience with Selenium, and we've implemented with a large QA development team. Selenium is easily your best bet for browser based testing. They will be more brittle, but it is well worth it. Expect to take some time getting to learn some of the hiccups (ajax is a pain at times) Use the [PageObject pattern](https://code.google.com/p/selenium/wiki/PageObjects). Don't try and test every little thing you do, get the main functionality in place. Run them on a regular basis. We used to try and run it with every deploy. We get about 1% of our tests fail for no particular good reason. You might not have this issue, but we've had that. I'm not sure about other systems, but we've used the grid very successfully to run 1600+ tests in under an hour.
We use Selenium WebDriver with Cucumber to make english-like scripts for automation testing. http://cukes.info/
I use it quite a bit but mainly for pulling data from web interfaces. Kinda handy, but definitely prone to some glitches if you do not anticipate behavior on a site very well. 
Well he *did* run these using Caliper. Besides, you don't need to perform 1 million hash lookups to find a value in a HashMap with 1 million entries. There is an issue with his Key cache class however, it uses 10_000_000 keys which all have a different hashcode. This is sure to skew the HashMap behavior a lot, in fact they may all end up in different buckets which would make gets a simple array access and explain the speed.
Useless article
Why would you expect a database lookup to be faster than an in memory structure of hashed key value pairs? I am more familiar with using cacheing to specifically avoid a database lookup in many cases especially involving large groups of translations. 
I didn't downvote, but for large datasets, a hashed data set is more performant than a list for lookups. I am also skeptical of the database answer, but would need him to expand on it some to be sure I knew what he meant in that case.
Which fundamental issues are you referring to?
 the real issue is keeping too many records in memory. Actually a skip list wouldn't be so bad for lookups and solve the space complexity / collision problem of a hashtable.
It is less verbose, that's the main advantage. What other libraries do in 5 lines jcabi-xml does in one line. I'm intensively using XML in all of my projects and code compactness (and readability) is very important. That's why this jcabi-xml library
If you don't mind to write a few more lines instead of including a new library to classpath - go for Java SE native DOM manipulations. I prefer readability (and maintainability) above all :)
Yes - it's to avoid classloader leaks. There's a good discussion of the problems and potential solutions here: http://wiki.apache.org/commons/Logging/StaticLog
Yea... I think shinyquagsire23 needs to do his CS 101 over if he thinks database lookups are faster than in-memory lookups.
Another point is that when using the non-static logger, you can rewrite the line as public class Foo { private Logger logger = LoggerFactory.getLogger(getClass()); } in the case of inheritance logging will always be done with the leaf classes name, rather than some class in the type hierarchy. Not saying it is better or worse, just different.
I should have known this before I spent €200 on the Ultimate edition of IntelliJ last week :( The main takeaway here is a "cheap IDE" though. IntelliJ ulitimate can still be as fast as Community edition if you configure it properly.
This is interesting, and something I wasn't aware of. But this seems to be more an issue with the containers. This seems like really bad behavior. &gt; The real root cause of this problem is that SHARED data (static members on a class) is being shared across supposedly independent "applications". If no classes are "shared" between applications then the problem does not exist. However it appears that (to my personal frustration) container vendors continue to encourage the use of shared classes, and application developers continue to use it. This seems like it will be an issue with anything that is statically initialized and can differ between applications. Gross!
Try this: http://www.jensd.de/wordpress/?p=955 
No final or private and generally things discussed here: https://www.youtube.com/watch?v=uiJycy6dFSQ 
Eh, it can happen. It isn't always so easy to know ahead of time what the distribution of objects will look like in the map and if or how many collisions you'll have. I wouldn't blame "dumb developers". 
&gt; Really? You think the CPU will be the bottleneck in a DoS attack? I'd say there are hundreds of DoS attack vectors easier to target than the hashmap function of Java 7 and below on any given server. [Already happened](https://community.qualys.com/blogs/laws-of-vulnerabilities/2011/12/28/new-dos-attack-on-php-asp-java-disclosed-at-ccc-congress--updated), a single http post with carefully choosen parameters was enough.
Thanks, I have similar functionality working at the moment, but I specifically do not want to add an additional button to collapse the panel. I want to be able to click on the divider just like a JSplitPane. However, it seems impossible to gain access to the divider object of a SplitPane. It seems that I will have to write a new skin for the class, but this is a huge job, since almost all of the methods in SplitPaneSkin are private, so everything will have to be done from scratch.
Idd
SO with you there. One of the reasons the next system is going to be on a UNIX box; no stupid bundled junk.
Thanks for the info. Having a screenshot taken on a failure would be huge, so I'll definitely look into doing that as well.
[CPU cycle != CPU instruction](http://en.wikipedia.org/wiki/Instructions_per_cycle)
I guess it depends on how you define incremental compilation, see here for details: http://confluence.jetbrains.com/display/IntelliJIDEA/Compiler So IDEA doesn't compile as soon as you stop typing, it doesn't need to since it understands the code enough to tell you where the errors are without having to ask the compiler. Everything else it can do (including using Eclipse's Java compiler, as you already remarked) I'd say that from a feature perspective there is no difference here (unless one IDE's way is much faster than the other's, I haven't done any measuring)
Or AutoValue. https://github.com/google/auto/tree/master/value Anyway, very creative usage of the new interface features - at least from the Java point of view. Nice. Not gonna use :).
You could indeed use lombok. I'm personally not a big fan of annotation-processors that generate loads of magical code. Lombok also causes problems for various tools. 
"Im Down Dog" ??
It's Dumb Dude
./runInstaller -silent -responseFile $PWD/db.rsp
"Get Facebook status updates directly in your browser" - what an innovation! Facebook in my *browser*!
Always thought it was bizarre that a company as prestigious as Oracle bundles this crap in their installer like its 2004.
whats the difference between the installer and just export $JAVA_HOME=/usr/local/java_something export PATH=$PATH:$JAVA_HOME/bin im new to this java thing sorta. just wondering
Does anybody know of an email address that we can email Oracle about this? I did a preliminary search and l was asked to login to get to a support page. Here is a Cutomer support number I found though.. 1 (800) 223-1711 
Call the wahhhmbulance!
I've never had these screens...?
The installer... installs the stuff you need to run java programs (i.e. the files that would be under your /usr/local/java_something)
Yeah because as a developer you install the SDK which does not have any toolbar in it. usa123fuckyeah is apparently a user or something whining about the java.com installer.
"Indeed"
I dare disagree?
I think it's a deal done by Sun before Oracle bought sun. As a server side java developer this is very, very painful. It's not that I download java all the time but rather I am embarrassed to work with a technology that comes bundled with crapware. Also: http://www.computerworld.com/s/article/9236273/Oracle_will_continue_to_bundle_crapware_with_Java
They're [really deceptive about it too](http://www.zdnet.com/a-close-look-at-how-oracle-installs-deceptive-software-with-java-updates-7000010038/). It's an embarrassment.
Take another look at the screenshot, brohaim. That's Windows.
so you download the installer then run the installer to set path/java_home as opposed to just downloading a tar ball? im just wondering. no need to get butthurt and downvote. just tryin to learn ;)
They're not prestigious though. Sun was prestigious, Oracle is a soulless piece of shit.
too many records in memory seems to be a hardware allocation dependent statement, and the collision problems would depend on the hashing algorithm implementation. I just don't think saying to not use a hashmap for a large dataset is valid as a general statement. There are situations where it would be appropriate and situations where it would not be appropriate.
The installer also puts the Java launcher in C:\WINDOWS, and registers the Java install in the registry so that the Java launcher can select which version to run. It installs the Java plug-in in the various browsers installed on the machine, and registers the plug-in with them. It installs the Java control panel so that it is runnable from the Windows Control Panel. It installs the Java accessibility handlers (for Swing) and registers them with Windows. And possibly other things I don't know.
But Sun also bundled crapware didnt they?
Brain free as well it seems.
I just get the offline installer and run it silently via command line. Never had the sponsor offers install that way...
Ask are the ones being deceptive about how it installs.
Have they updated their documentation to be at least moderately relevant to the current version yet? Very hard to configure gatein because the documentation often applies to version 1 instead of version 3.8.
I work at a fortune 500 company. I hate them for an entirely different reason. 
You gotta make money somehow when you offer a free program to millions of people.
What an offer.
I don't get this. As a dev you download an archive that you extract into /opt and that's it! Why even run an installer at all? Aren't people doing it to themselves too?
http://investor.oracle.com/files/doc_news/earnings/q4fy13-1961623.pdf Including ASK toolbar is not needed to pad their bottom line.
Why would you want all that crap to happen? Unless you're developing applets perhaps, but I seriously hope you aren't.
Similarly, I am on the lookout for a product which prints facebook sponsored content directly on my toilet paper...
What necessary folders? There's only 1 folder needed and that's typically something like /opt or ~/myjavadir or something. Working with Java for some 12 years orso and never needed to use an installer. It's just an extract of the archive! Nothing more, nothing less...
I don't think anyone is arguing that, but it's still nice to know about.
Yes, but the average Joe sees this Ask.com toolbar spammy shit when they install Java in a browser. Then the average Joe associates Java with spammy toolbar malware bullshit they can't uninstall from their "computers that run so slow". Source: I hear about it all the time from average Joes. Its a fucking embarrassment. Orcle should be shamed and embarrassed. I agree with OP. 
ninite.com/java
It is good to see OpenJDK coming to Windows. That is one of the major road blocks of my organization in using it rather than Oracle JDK. 
That's basically what the installer package does.
Just install the [JDK](http://www.oracle.com/technetwork/java/javase/downloads/index.html) instead of only the JRE.
You have two options: 1. Running [Unchecky](http://unchecky.com/). 2. Downloading from [Oracle's JavaSE Downloads](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
True. It should be noted though that sun was dieing. It doesn't totally justify the crapware, but just saying, they were desperate. I wish someone besides oracle would have bought them, even microsoft.
Maybe, it's a weird thing indeed, but this reddit is aimed at Java developers, not at average joes. I guess 95% of java development is for the server or for mobile. In both cases the end user will not even see Java. 
I tend to forget that exists, since they only bundle it on windows, and I rarely install the jre by itself, or I use ninite.
It really depends on the data too. 1 million integers doesn't take up that much memory compared to what servers typically have.
Oh...I hate Oracle for a whole bunch of other reasons. Source: PeopleSoft customer currently dealing with their "support".
Yes, but who uses Java developer's resultant products? Most of the time, Average Joes... Thus, the OP is embarrassed because they create a great, stable application that then requires them to suggest installing JRE that comes paired with a spammy opt-**out** add-on.
I have two dozen better reasons to hate Oracle before I get to this one
We still sell quite a lot of desktop programs. And it sucks. Although most of the cases, corporation security policy has accepted only a specific version of java *and* requires programs to be self-contained, so we distribute along with pre-packaged JREs. Most of the cases. When we do not, and client wants a regular Java install to get updates... it really makes you lose your actual freaking reputation to require them to install such product. With the advent of the mass internet somehow I get the feeling we as a populace have evolved a healthy disdain for bullshit.
naw man you're thinking of a blogroll.
Adobe does the same thing with flash.
Oracle have got the NHS in the UK on their side now. All finance and payroll departments in the NHS moved from the EPIX system (which was god awful) to the Oracle system around 4 years ago, that alone would be enough to sustain the company. 
well its also annoying as dev since your users will see this crap
As of late, MS has become much more open (mostly out of necessity). Their next C# compiler, for example, is going to be open source (Roslyn).
Glad to be of help. Ping me if you have any implementation questions. In short, I created a wrapper class around ImageMagick and call methods of that object from a JUnit test rule (on a failure). I also have some screen comparison tests being run, that are driven by the same ImageMagick library I wrote. 
Yes. If you could download the files. But you can't, you download the installer and run it.
You also have people who see this shit as average Joey then grow up to be a developer, still unconsciously putting negative connotations on the language because of the crapware. That is probably the most detrimental thing to the language and the most unnoticed.
"I don't discuss"?
Apparently, only their 32-bit online installer does that. I don't know, I never had sponsor offers. :-) The release notes imply that starting with Java 8, they don't do that anymore, but I remember people complaining it was still present in Java 8. I don't care enough to investigate further.
I think it was a marketing strategy (due the hype) 
Install OpenJDK (the real open source version =) ) (unfortunately it is easier in linux to install, but some unoffical guys built it and make it available through github -&gt; https://github.com/alexkasko/openjdk-unofficial-builds#openjdk-unofficial-installers-for-windows-linux-and-mac-os-x
I get that "offer" when installing the 64bit JDK 7.
I installed the JDK last week and it has that toolbar crap in it. 64bit windows installer.
Oh... I have many, *many* other reasons to hate Oracle. Picking just one -- **JavaOne**. I used to travel internationally on my own time and my own dime to attend. The talks were interesting, the facilities were top-notch, the conversations were up, down, and across the spectrum. The show floor felt like a science fair; the exhibitors seemed genuinely *eager* to show off what they'd built... and at the end of the night the parties were geeky-sophisticated. I went home with a head full of *ideas*. Fast forward to the acquisition. JavaOne became a sideshow at OpenWorld. The events were all in the B-list facilities. The talks became sales pitches. The technology evangelists were gone. The conversations became cagey and defensive. The show floor suddenly felt like a gauntlet to be run, filled with sales predators desperate to make their quotas... and the party was an ego-stroking pagan sacrifice at the altar of Ellison's ego.
It's not as if Oracle doesn't already make enough profit on their products, they have to scheme with near-malware search bars to earn even more mighty dollars? Greedy bastards.
&gt; It's just an extract of the archive! &gt;The installer downloads/extracts the files hm
Not Microsoft. They would probably only be buying it to kill it off. Google or IBM would have been great for Java.
Oracle *gots* to get their motherfuckin' money right.
I guess this subreddit really isn't about java programming anymore :(
Why are you on this subreddit?
It's been 4 years since Oracle bought them. The only reasonable explanation is that the average Joe is actually clicking and using this "crapware", giving enough revenue to both Ask.com and Oracle to consider keeping this shit bundled.
Agreed, Even with a more complex object, it isn't that rare any more for a server to have enough ram to set something like this up. It doesn't seem to me to be all that outlandish of an implementation in a situation where search speed was a main concern.
Oracle JVM is just a copy of the OpenJDK =) (the history is longer might it is almost that)
Completely agreed. I know that I stayed away from the language as a developer specifically because of the couple of things that I felt Java didn't do right at the time.
Why's that? 
Thanks for taking the time to think about this. I solved the problem and I thought you might be interested in the solution. I posted a link to relevant stackexchange question. Let me know what you think.
No problem. I eventually solved the problem with a Python COM server. I posted the full solution to this question on StackExchange (link in the update). If you wouldn't mind, I would like your thoughts on this approach, as I have not seen it described elsewhere. Thanks again.
Dont forget that Microsoft is the company that auto-installs that Internet Explorer bloatware on every pc their operating system TOUCHES!
I was thinking the same thing, it seems kind of low of them to include such bloatware. But Oracle is all about making money, so it shouldn't be such a surprise. Have you seen the way they branded everything with Oracle logo after the acquisition? Never miss an opportunity for publicity. 
Holy shit, Microsoft is literally hitler.
Does Unchecky require to be running in background?
Save as java.reg, double click. -------------- Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\JavaSoft] "SPONSORS"="DISABLE" ----------------- 
You're getting a nullpointerexception because you never initialize your sonnet18[] array. On line 17 you have: public String[] sonnet18; then on line 55 you have: sonnetText = new JLabel (sonnet18[lineIndex++]); You're trying to read from an array that was never initialized (so a this point it's just NULL) Somewhere in between those you have to initialize the array: sonnet18 = new String [14]; After this it will be filled with 14 NULL Strings, so then you have to actually fill it with the lines of the sonnet by iterating through each (sonnet18[0], sonnet18[1], etc) and copying the lines into it. Then you'll be able to read the lines from it. You could also initialize it manually like: sonnet18 = {"Shall I compare thee to a summer's day?", "Thou art more lovely and more temperate:" "...etc"} Hope this helps
Google and IBM **are** great for Java. Getting deeper into the industry, I'm blown away by how much Java is really used. I think I grew up in a time when C++ was touted as the one true path, and it's fascinating to see how that is not true at all. People complain about the Windows JRE install having bloatware, but the JRE/BrowserPlugin is the smallest portion of Java use. It's used quietly in so many different sectors of industry, behind so many big-name applications like GMail, a bunch of the new Google Apps (Spreadsheets, etc...) are built in GWT, and there's a whole slew of IBM applications written in Java (including parts of Watson.)
Yet
It would be nice if you could remove it but honestly there are so many shit websites/internal apps/integrated apps that I need to access which require IE in order to function properly that removing it would be a bother.
*whoosh*
Java is free. How are they going to pay for it? If it's really a problem, get [Ninite](http://www.ninite.com "8=====D").
Or run this in command prompt jre-7u55-windows-i586-iftw.exe SPONSORS=0 The option to disable sponsors will persist across all future updates and re-installs of Java. Note that sponsor offers, and therefore this functionality, is only applicable to online 32bit JRE installers and Auto Update mechanisms for the Windows operating system.
&gt;Google and IBM are great for Java Indeed. Guava.
[shameless promo follows] plus there is Zulu, Azul's build of OpenJDK for Windows and Windows Server. Downloads are free, no registration required, and we comply with the Java SE 6, SE 7 and SE 8 standards. http://www.azulsystems.com/products/zulu 
/r/firstworldproblems
Oh, that interesting. I wish OpenJDK would officially distribute the binaries. It would garner it much more trust from end users.
I've done a few simple apps with JavaFX, IMO it's a superior choice to swing as it allows you to divide the UI components (in FXML files....think xml like syntax) and business logic for said display layer cleanly. Heard there's a port for Android as well.
OpenJDK, works pretty much flawlessly and it's Open Source.
Get your ftp on.
It is both and the two are related. If a DoS attacker can more easily calculate colliding keys for a dumb hashCode implementation.
&gt;Or you can apply directly here I don't think that means what you think it does.
Yes, and Oracle has enough money to pay Ask enough to let them off. Whereas Sun was trying to stay afloat so they tried this shit.
Damn, I still have flashbacks from installing 10g.
Interesting suggestion. I've used saxon before, I'll try to specify it.
They are soulless motherfuckers all lining up in Ellison's asscheeks, but [thanks to Sun, not everyone has to](http://hg.openjdk.java.net/jdk7/build/file/ee67ee3bd597/README).
Mostly because there is a lot of old code not using the proper APIs, and the Oracle JDK catered to them.
It's my impression that Oracle's still includes `Unsafe` (I do not use this), which to my best knowledge is used by the collections API for performance reasons. As far as I know, OpenJDK does not include this.
Not saying I would avoid it but it seems to not be practiced out in the real world as much as others. Isn't Swing old school?
It have it =) Also, in Java 8 some features were refactor from Unsafe (which is from sun, before the Oracle buy it) to the standard Java API
The overriding feeling when I see this during an install is not personal annoyance ; so much as painful, vicarious shame for ~~Oracle~~ Java. Cringeworthy, that's what it is, cringeworthy that they've lowered a world-class technology to this.
It is an old technology. That being said, if you're going the Java route, you need to know it. You'll run into it more then not.
that's good. 
I've often wondered why people make such a fuss about this. Uncheck it. Move on.
Wasn't a big feature of Chrome when it was released that toolbars couldn't be installed? Or am I just dreaming things?
I watched the video, and there was a special label added into the video via YouTube saying that in this example of boxes still being checked against the will of the users, Unchecky was NOT running. Which insinuates that it DOES need to be running in the background.
Which has the advantage that you can implement Java scripting features into your application because a compiler is available. I don't know how many files are necessary for the compiler to function, but I suspect it's only very few or even one, and I think that they should include it in the JRE, too. It's too good a feature.
Someone else in this thread recommended http://unchecky.com/
Man, I almost quit comodo because it pulled this and it's download paged linked to cnet. It took me quite a bit of digging to actually find their legitimate download page. I remember when cnet was good. :c
Yes, they are. But IMHO if one of them had bought Sun, it may have been even better.
JDK or JRE? Where did you download it? I certainly did not get it.
Does it support all the features in java8?
OpenJDK pretty much is the mainline Java - Oracle just bundles some secret sauce (and the aforementioned crapware) with it to make it the 'official' JDK.
:[|||]:
JavaFX is the way to go. It is great improvement over Swing and it has been included in JDK 7+. There can be a separate discussion regarding the future of desktop applications. For those working with Java there is little doubt. JavaFX is what Oracle is pushing and it is a great step forward from Swing. With Java 8 and Lambdas, writing events got much shorter (not to say easier or faster).
If you use Google APIs extensively, your code doesn't even look like idiomatic Java anymore. It's almost like a new language, though a lot of Java's pitfalls remain, especially around generics and reflection. In my opinion Google has done more for Java than Oracle ever has.
Swing is nothing to frown upon. It's an old, stable, proven standard technology that is commonly used. Getting the hang of Swing coding initially may be a bit intimidating, but it's definitely a "have to know" when going the Java route. It'll be a while before JavaFX is commonly used, even though it seems to be the future for Java GUI design. Generally, when programming GUIs, don't rely on the GUI designers of the IDEs. Even though they are improving, they still lack. Netbeans has a nice GUI designer, but it is programmed in such a way that it hides too much of the code behind the GUI. Eclipse's Window Builder may not look as polished and may not be as comfortable as Netbeans' Gui builder, but it at least shows the complete code and also it produces nice, standard code that can be changed at any time without breaking the GUI builder (with a few exceptions). Learning to hand-code GUIs is still the way to go. Even though the learning curve is steep at the beginning, once one understands the basic concepts, it is as easy as creating new classes and objects.
They didn't buy it when they had the chance.
Without the Ask toolbar, the Java division would not be profitable (source: former Sun employee). Without the Java division being profitable, it doesn't matter how much money the rest of Oracle is making, they're going to stop spending money on Java because they're not a charity. So, pick your poison: 1. Having to uncheck an annoying crapware install. 2. No more sponsored development and support of Java Believe me, we weren't happy about the stupid toolbar either. But we were pretty fond of the "having jobs and making money" bit.
Your ASS feed.
Oh my god. This is Amazing :D :D (y) 
from http://stackoverflow.com/questions/259140/scanning-java-annotations-at-runtime
Are they also going to open source the supporting libraries? That was always the issue with Mono, you could write in C# but not use things like the WinForms libary.
JDK from oracle's site. 
http://azagorneanu.blogspot.fr/2011/08/how-to-generate-equals-hashcode.html
They were dying because they had that idiot Jonathan Schwartz. He's the person people should be pissed at, not Oracle. At least Oracle has been putting a shit load of cash into Java lately. 
Nah I think Google would have left us with a dozen Java forks ala android and what do we think we wouldn't have a google toolbar in the JRE installer? And IBM would have dropped netbeans, swing and javafx for sure so we'd be stuck with lousy SWT. Also Sun and IBM hated each other so a large chunk of Sun engineers would probably have quit on the spot if IBM had bought them. Whether we like it or not Oracle was probably the least worse buyer of Sun.
Probably not. They only play lip service to open source.
ECJ is a command line front-end which does not expose all of the capabilities of Eclipse's compiler.
Very interesting. Thanks for the link. So it indeed looks like IDEA maintains the dependencies internally allowing it to do the incremental compilation. In IDEA, I usually feel like my "edit, check errors and warnings, run" cycle is not as seamless as in Eclipse. I thought that it was because of IDEA using external compilers and thus not being able to do incremental compilation. I guess I need to dig further!
I don't see any events on the divider itself. It's behaviour is internal. You could have a small button which does the resize instead. 
~~How does this compare with the standard Java ServiceLoader system. I implemented annotation processing for this years ago: https://github.com/Danny02/DarwinsBox/wiki/Serviceprovider (and many other have done so too)~~ I see, no need for all classes to implement the same class, and no instantiation.
http://projectlombok.org/features/delombok.html
Draaaaaaayum. I ralways misrunderstood intergers. Nrow I gret rit! Thranks, bror!
No problem brotha!
readFile() doesn't return anything if the condition of the while loop is false. That produces the error. Move the creation and return of the numbers array out of the loop and the error should be gone.
"ReflectASM is a very small Java library that provides high performance reflection by using code generation. An access class is generated to set/get fields, call methods, or create a new instance." No runtime reflection. No wonder that it's much faster than reflection. Usually you need reflection because you don't know the classes at compile time. Therefore I wonder about practical usecases for this library.
The bytecode generation happens at runtime.
So I need to take out: String [] numbers = line.split(","); and return numbers; ?
Think about it this way. If y.hasNext() returns false, then what will your readFile() method return?
Dang, no dalvik support.
From 2010 but still good. 
False as well?
I find it surprising that people are doing so much reflection that it needs to be optimized.
You can only return one type and you declared it to return String[], not boolean.
readFile can't return false. You've declared it to return a String array, and false is a boolean. If y.hasNext() returns false, then it will skip over the loop, and not return anything. That's why there's an error. It has to return something, no matter what.
So if I set it to return true, will it not skip over the line and run through at least once?
O'Reilly's Head First Java. It's a book made for teaching, so it's written very colloquially. It teaches java 1.5, so when you're done, you'll want to get up to speed with java 1.8 and familiarize yourself with it's new features. It gives a good foundation for continuing with java, so I recommend it for someone who's new/relatively new to programming.
/r/HomeworkHelp &lt;-- that way That being said, the vague answer I'd give is "A hashmap of hashmaps, where keys are always the current accumulated prefix"
I tried reading a few different textbooks in Java and my favorite was Absolute Java 5th Edition, by Walter Savitch. I think that it is a really great textbook. Just try to code along as you read it, and don't be afraid to try messing with the code to see what kind of results you get. That's how I learnt and I feel I have a pretty solid understanding of the language.
I was coming from the python world and Ivor Horton's Beginning Java followed by Effective Java worked best for me.
I think some variant of the composite pattern would work. Such as `class Node { char ch; Map&lt;Character, Node&gt; nextNodes; Data data; }`.
I've two recommendations for you, either: Introduction to Java Programming, Daniel Liang. Thich is an excellent resource and has really beneficial practise exercises at the end of each chapter. Or: Introduction to Java Programming, David Eck, which I haven't personally used but have heard recommended and also it's free! http://math.hws.edu/eck/ There's always professor Youtube also: https://www.youtube.com/watch?v=Hl-zzrqQoSE Best of luck!
Java lends it self to writing a class per thing you can identify; for example, you might want to start with writing a class for the board and a class for the user interface, kicked off by a top level application class. It is easy to go too far, for example I would not write a class for a cell on the board. You can eventually spot when a class is or might get too big or too small, requiring refactoring. Another approach is to think of data in the system, whhere it comes in and where it is held. The board state and input events would be your starting points. Try to name things well and you find that your code becomes self describing and the design can almost reveal itself to you. Well chosen methods help here, I think the [Law of Demeter](https://en.wikipedia.org/wiki/Law_of_Demeter) helps with writing this style of code.
I'd suggest looking up the trie data structure. Might be useful for what you want to do.
I agree. I'm going thru the Udemy Java for Complete Beginners and it is brilliant. I just don't get on with programming books and find it so much easier in a visual format following along.
I asses that 95% of average joes maybe more use Java via the server or android, and thus don't come into contact with installing the JDK.
Well, indeed I've almost never used Windows. Had an Amiga in the good old days. Then OS/2 when Amiga went south. Worked professionally on Solaris for a while and had a Mac at home. Then had a job where I used Debian and then Ubuntu. I 'touched' Windows briefly when I had to test Swing apps before most development went servers side and then to test on IE.
socket.isClosed(); ? Althought the Java docs dont make it clear if you must explictly close the stream for this to be true, or it its true if the stream disconnects.
I guess I'll just have to test it. Poor documentation is kind of what got me into the mess with isConnected(). Tell me this isn't wrong and horribly misleading: &gt;isConnected() &gt;Returns the connection state of the socket.
http://stackoverflow.com/questions/10240694/java-socket-api-how-to-tell-if-a-connection-has-been-closed What's wrong with sending data to see if the connection is still alive? 
http://docs.oracle.com/javase/7/docs/api/java/net/Socket.html#isConnected%28%29 &gt; Returns the connection state of the socket. &gt; Note: Closing a socket doesn't clear its connection state, which means this method will return true for a closed socket (see isClosed()) if it was successfuly connected prior to being closed. What documentation are you reading?
I admit, I didn't read the body of the docs or anything. I just threw together the code and for some reason got the impression that isConnected() would tell me if it's connected. Idk I've been working on this project for all of my waking hours and then some for the past few days trying to finish it before Monday. Forgive me if I can't read english anymore :P
&gt; I didn't read the body of the docs or anything. First mistake.
I was just hoping there would be an easier/one line way to check, especially if the connection was reset as was happening frequently earlier due to a bug.
Yeah I learned my lesson on this one
Haha, yup. :)
Posts the results please. In your paper be sure to clarify intelliJ is partially open-sourced.
Thanks!
Look over at the /r/Javahelp wiki. There are plenty of learning resources there.
I liked [Core Java](http://www.amazon.com/Core-Java-I--Fundamentals-9th/dp/0137081898/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1398595244&amp;sr=1-1&amp;keywords=core+java) vols. I and II, but it's a little expensive and only 12th in Amazon's list of java books. Head First is number one.
Here is the analytics page of the responses: https://docs.google.com/forms/d/1UeO-qL2YoWqRJF5nXqXgAlWvFg_7OC0aMwm2ZSfsUuQ/viewanalytics And I'll be sure to mention it! 
How is this even a thing? IntelliJ is so clearly better. The issue is if people want to pay for the license or not, not technical merit.
IntelliJ IDEA is light years ahead of the others for code. Its feature set, and level of polish is unmatched. However, the GUI form builder is quite poor compared to NetBeans', so I can see why people would use that. Regarding the license, IDEA community edition is released under an Apache license (meaning you can use it however you wish, even for commercial projects). Eclipse... well, I don't know why people use Eclipse. Portability? Some overly specific plugin? I find that a lot of developers just use whatever IDE they learned on. Which is a shame; it's like learning to ride a bike with training wheels and never trying another bike without them. 
I'll also recommend [CodingBat](http://codingbat.com/java), which has a ton of Java exercises for beginners and intermediate programmers. 
In the article there is no explanation on why and when would such approach be preferred.
/r/SampleSize? Should I also fill in the questionnaire if I never tried another than Eclipse, which we used at schooL?
I've been working in SWT/JFace for years, and it's great!
You can add it to the comments that you've never used anything different. That way I can discuss how most people stick to the IDE they've been taught in.
Took it last year and I got a 5. Know GridWorld. There's a whole section on it. You don't have to memorize all the methods, they have documentation in the packet. You just need the concepts and a good working knowledge of it. Know your strings. They ask all sorts of questions about strings. You will be asked to write (if I remember correctly) 2 programs from scratch, on paper. Be ready to think outside the box and think critically to achieve the goal they ask you to. It doesn't matter if it's pretty, it just needs to work. Other than that, just study. My teacher last year was almost obsessed with the AP exam, he gave us study books and practice exams. Both were invaluable to my class' success (3 of the 6 in my class got a 5 and the other 3 received 4s). Lastly, it's a test. That's all it is. Don't psych yourself out, it's just a test. Study, study, and study more. If you dont feel prepared, then take action and prepare yourself. Then go and get yourself a 5. PS, besides for the two programs you have to write at the end, it's all multiple choice. So if you get stumped, use process of elimination to find the answer.
These are the ones this account (my professional one) is subscribed to: /r/Algorithms /r/AskComputerScience /r/askscience /r/coding /r/Compilers /r/compsci /r/cscareerquestions /r/cseducation /r/dailyprogrammer /r/dataisbeautiful /r/datamining /r/ece /r/java /r/javatil /r/jobs /r/learnprogramming /r/linux /r/logic /r/math /r/matheducation /r/networking /r/programming /r/rstats /r/sas /r/softwaredevelopment /r/statistics /r/vim Then I'd also suggest your local area ones.
http://math.hws.edu/javanotes/contents-with-subsections.html ; http://thenewboston.org/list.php?cat=31 ; http://web.karabuk.edu.tr/hakankutucu/Discrete_Mathematics_and_Its_Applications_7th_Edition_Rosen.pdf ; These are the best resources that I have found. The newboston is more pragmatic, but it will let you start coding right away and seeing the structures that you can then read about and hang the information off of.
Swing is the "proper" way to create a GUI application in Java, although it looks like JavaFX is now being pushed to replace it. Swing is a lot more painless with [MiG Layout](http://www.miglayout.com/).
http://www.reddit.com/r/algorithms+artificial+AskComputerScience+aws+bigdata+C_Programming+CasualMath+codeprojects+codes+coding+CodingContests+commandline+Compilers+CompressiveSensing+compsci+computervision+Cplusplus+cpp+crypto+CS_Questions+csbooks+cscareerquestions+CSEducation+dailyprogrammer+Database+datamining+datascience+datasets+deeplearn+django+flask+functional+functionallang+git+golang+hadoop+hardware+haskell+ios+iOSProgramming+IPython+java+javascript+Julia+LanguageTechnology+learnmath+linux+lisp+MachineLearning+math+mathbooks+mathpics+mathpsych+nosql+opendata+optimization+PhilosophyofMath+plt+probabilitytheory+programingchallenges+ProgrammerHumor+programming+programmingchallenges+ProgrammingLanguages+puremathematics+pystats+Python+readablecode+robotics+scheme+semanticweb+simpleios+softwaredevelopment+statistics+sysor+systems+tinycode+types+vim+visualization+webdev+zsh
Well, you'd be correct because the JDK (Java Development Kit) and the JRE are two different software packages; however, just to even view a Java applet in a browser they need the JRE (which is actually where most end users come into contact with Java regardless of platform). Now that the market share for Android devices is becoming the majority, they're seeing it in different places; however, this is a newer development in the lifespan that is Java.
Here's a multireddit that's pretty comprehensive: [link](http://www.reddit.com/user/krispykrackers/m/programming)
[As a multi-reddit.](http://www.reddit.com/user/okiyama/m/programming)
I actually skipped that one intentionally (since it doesn't relate to what I do), but it's certainly not a bad one to mention. There are also several in there that only relate to my field, and many people can leave out: /r/sas, /r/statistics, /r/rstats, among others.
http://www.reddit.com/r/technology+24hoursupport+apple+cablefail+cableporn+Citrix+ccna+coding+computertechs+darknetplan+iiiiiiitttttttttttt+InternetIsBeautiful+ITdept+netsec+networking+p2p+ServerPorn+talesfromtechsupport+TechNewsToday+techsupport+techsupportanimals+techsupporthaikus+vim++homelab+linuxadmin+commandline+puppet+reverseengineering+geek+VXJunkies+programming+linux+netsec+web_design+webdesign+compsci+Python+software+coding+opensource+learnprogramming+gamedev+javascript+webdev+ruby+hackers+linux4noobs+haskell+java+vim+webdesign+emacs+commandline+C_Programming+dailywtf+tinycode+algorithms+softwaredevelopment+bash+git+scala+reviewmycode+css+codeprojects+unix+codeignite+php+perl
Most GUIs nowadays are distributed by a server and are HTML based. Desktop applications are becoming increasing rare. Swing is old and clunky. Java FX hasn't and won't be widely adopted. What Java offers are a number of options for server-side UI programming such as Java Server Faces (JSF) which is part of Java EE 7. Java Server Pages are a building block for JSF. JSF isn't very good but its better than the Desktop alternatives and has more marketability.
I'm sorry that I'm pretty new to this but would those pages be written in JavaScript rather than Java? 
I realize now I probably should have just made an array of the five choices that the computer can make, and assign compSelection to the index of the random integer selection, but that's minimal 
Big Java My school uses this and it has good portion of practice exercises in it. If you don't understand the book or if you don't want to pay the author has all of the source code available for free online.
Agreed. They should buy the JFormDesigner company and roll it into IntelliJ. I've been using that combo for years. I haven't started using JavaFX yet, but I hear the Oracle scene builder works well. 
&gt; Be ready to think outside the box and think critically to achieve the goal they ask you to. Now this bit is debatable. In my opinion, the AP CS test is a joke. Most of those at my high school took it as a sophomore, and most get 5s. In fact, as far as I know, everybody finished in half the time allotted. The AP test does a decent job of testing basic familiarity with Java and simple programming-related problem solving skills... But I don't think it comes close to seriously evaluating critical thinking.
Oh, if only /r/ was a valid subreddit. /r/R just doesn't have the same ring to it.
I already did a change similar to this. you might be looking at an older version. I've updated the OP
I guess the answer is that you're delusional like most snake-oil salesmen.
I disagree with almost everything this article says. It is also written in the "it's bad because I say so" style and offers no reasoning on why a design is bad. I won't waste too much time going trough everything here, but can you please let me know why/how the StringUtils class is an anti-pattern? How would you implement a system where you need a functionality such as the one implemented by "StringUtils.deleteWhitespace" in multiple places? Would you copy copy the code implementation around to every class that performs such operation? How do you suggest general purpose code like this should be exposed and reused? The article does not say a word about it other than "this is bad", for no apparent reason. The recommendation do use abbreviations is probably one of the worst pieces of advice one can give. Writing "rcpt" instead of "recipient"? How unclear is that? "rcpt" can also be read as "receipt". This introduces obscurity for no gain. At all! How can your code have "name collisions" on a setter if you can use "this" keyword? We don't need to reinvent parameter names so they don't "collide". This is a non-issue. Abbreviations are not going to help here either. TL;DR Do NOT waste your time. Please do not use this as a resource for learning.
Cool! I used to write these kinds of games way back when. The download link doesn't seem to work. Put it all up on github or sourceforge and ppl will try it out.
You are attempting to create a Domain Specific Language (DSL) using java. That is the technical term for what you are doing besides it being a game. You have a language of commands or actions which you can invoke on objects or parameters. Normally I would say use Groovy for this instead of Java because almost all Java code is also compatible with Groovy code, but also because Groovy makes it easy to design DSLs like the game you are making. Contains a git repository with source code to look at http://forty-two.co/release-candidate/?p=4 http://www.citytechinc.com/us/en/blog/2009/05/a_text_adventuredsl.html https://encrypted.google.com/search?hl=en&amp;q=java%20%22domain%20specific%20language%22%20%22text%20based%22%20game#hl=en&amp;q=java+%22domain+specific+language%22+%22text+based%22+game&amp;start=10
My school teaches with one by Lawrenceville press : A Guide To Programming in Java. (java 2 standard edition 5) if u want I can link you to the online version, it's totally free and has the whole book 
The compile error messages that you're getting should point you in the right direction. What are they?
For me the subreddits with the highest return on investment are /r/compsci, /r/haskell, /r/sysadmin and /r/machinelearning. Not necessarily because of their subjects,but because their communities are really good.
I had (and still have) the same doubt. Until recently I had almost all the variables and methods declared final. That created quite a lot of awkward situations where we ended up doing workarounds instead of simply removing those finals. Right now I am on the other side of the spectrum. Final or not, it does not matter. Unit tests are what is important.
Thanks for the update and the gold too! Glad you got sorted in the end.
I love that you put Vim there. I'm using WebStorm now for web developing, but 90% of the time I go back to Vim to edit files.
None of these articles mention HOW to solve the problem. We cannot modify the java API to include the extra methods provided by StringUtils in java.lang.String. Can you please explain HOW do you NOT use a StringUtils-look-alike while having to implement common string operations across different classes? Also if it was viable, merging these so called god-classes that provide lots and lots of methods in java.lang.String will result in... guess what: a String god class! Which will also have to be modified for every project because each one needs different string manipulation functions for its own purposes! So please, can you provide a solution on how to NOT depend on a StringUtils-style utility class? I realistically don't think that's viable. You can't just change every API out there to include your the particular methods you need (especially when we talk about the java API itself). edit: also thank you for replying with some articles.
The recommendation to not use the **get** prefix on data access methods runs the risk of making your code not usable with many 3rd party tools and frameworks. The Java bean standard defines **get...** and **set...** data access naming conventions and many tools look for those patterns via reflection to learn about the objects. 
Lambda syntax will get rid of that final final.
Care to elaborate how unit testing is related? The article vaguely refers to that as well, but I just don't see the connection. Personally in our codebases we seek to minimize mutable state, and enforce that with final. All instance variables and public methods are final by default, and if there has to be mutable state, it is kept to absolute minimum and documented precisely. We unit test as usual, and it seems an entirely orthogonal issue. When unit testing has been a problem, it has been due to architectural problems like too much coupling or incorrect abstractions. If you're having trouble with writing unit tests, that's where you should be looking at.
When writing APIs for use by external groups 'final' is useful. Leaving it off means that clients will extend classes, preventing future expansion without worrying about breaking others. Mutability in APIs should be a definite design decision, not the default. If your coding just for yourself or a limited code base in a team or product then it's a lot less important and sometimes counterproductive as the article states.
If you find a good way now to write that program, you will certainly find another good (and probably considerably different) way later. Experience is the only way to go. I don't have much Java experience, maybe one intense year. But I still keep discovering better ways to do things all the time. While it's right to strive for the right way to do things, you must also accept that any way you choose now will be inferior to a way that you choose later.
Finally!
/r/gamedev is cool. Even if you're not into game programming, the technical issues and problems examined are interesting. 
Thanks! I'm still only at like 8 months of experience because I was forced to do it in uni and I love it! That's why I'm practicing on my time off :)
Doing all of your code in a single method is not normally a good thing. What you actually have here is: * A collection of the valid moves. That could be an enum. * A collection of what moves beat what. That could actually be data encapsulated onto the enum as well. * A mechanism to accept player input. That should be a method that returns one of the Enum values, and encapsulates all of the looping around until a valid choice is entered * A mechanism to accept computer input. That could be done the same way you have, or as another method just to keep it working the same. That way you open yourself up to changing how the computer implementation works easier. You could even look into using Strategy classes for the Player/Computer selection, which means writing more classes but means that they are even easier to change. * The output reporting mechanism If it was me doing this, and I know full well that I tend to over-engineer things, then I would end up having: * MainGame class * Inputs enum * InputSelector interface * AIInputSelector class * PlayerInputSelector class * Reporter class Then the MainGame class has very little in it. All it needs to do is: Inputs playerInput = playerInputSelector.selectInput(); Inputs computerInput = aiInputSelector.selectInput(); reporter.report(playerInput, computerInput); And the Report class will be something like if (playerInput.beats(aiInput)) { System.out.println("You win!"); } else if (aiInput.beats(playerInput)) { System.out.println("You lose"); } else { System.out.println("Its a draw"); }
and it's Wikipedia for code (if only the search was better - then again, I'm a beginner)
Yeah I'm aware that one method is non-optimal, I was just trying to do it in as few lines as possible. I have never used enum values, I feel like they were never explained to me properly, and have never quite understood them. I'll look into it now though
What does doing well on this test get you?
How do you build a house? Or a car? Or a train? or anything complex? You start with the basics and build from there. Don't worry about classes/objects or methods for now, or what goes where. Get the functionality working, then refactor into organized, logical code. Edit: Break down big problems into smaller problems, and solve those smaller problems in isolation.
Immutability is a bit awkward and often unproductive in Java (8 got a bit better). Unit tests are far more complicated with final methods due to problems to override them. Something being immutable should not be tied to ability to extend that override it. Another example is recursion that started to look good only with Java 8. Without it, immutability is very painfull. I am not trying to say that there is no recursion in Java, just that it is not good enough.
My experience is very different. I find immutability to enhance the readability and make it much easier to reason about the code. For example, with final fields you just need to make sure the object is constructed correctly, after which you do not need to null check or worry about concurrent modification or any invariants that the field is a part of. Those are the things that are very awkward and hard to get right, and therefore the things that we seek to eliminate or at least minimize by using immutability. As for unit tests, our entire JUnit unit test suit does not override a single thing in the tested classes, and I'm not sure why or where I would want to. Perhaps that's a feature of the testing framework you use? And finally extending and overriding classes is something we explicitly avoid, preferring composition over inheritance. In the few parts of the architecture where we do use inheritance, the classes are explicitly designed for it by exposing protected methods to override while all public methods remain final.
What's this got to do with Java?
lol mangodb
Alright thanks!
If you do well you can get college credit. I took the AP CS exam four years ago, got a 5, and now I can graduate a semester early because I didn't have to take some of the intro classes. TLDR: Save several thousand dollars.
&gt; Something people tend to fail to practice for is "paper-coding:" writing code out by hand. Without the aid of an editor, paper-coding can be very different and sometimes very difficult. &gt; This. Coding on paper for the first time is surprisingly tricky. Make sure you've done it several times before you walk in the exam. 
We get it, you like Netbeans and don't want to switch. EDIT: I regret nothing!
&gt; [...] which allows for layout where you have more screen space because auxiliary controls like toolbars and windows are are hidden. Yet there is still an absolutely useless statusbar. Same GUI bloat as Eclipse.
Honestly for Java, I'm still using Eclipse. IDEA sucks me in when I'm programming in other languages: Python, Ruby, etc. I'm so used to using dumb text editors for those languages that suddenly having the full support and intelligence of an IDE is amazing.
You can hide it if you want.
The Key-value approach simplifies and accelerates the development of applications. Practical use is demonstrated in the Demo-Hotels project, the link is at the end of the article.
You can hide it. I personally have a setup with virtually everything hidden: no status bar, no tabs, just code. 
I was a long time eclipse user (also jboss developer studio and others) and I really enjoyed Idea. I'm using for about 2 months and got little problems but none to compare what I got using Eclipse and Netbeans (I used it sometime in my home to try sth different) (Netbeans got pretty crazy in the last project I worked, especially the debugger component)
I wish he would have put disclosure upfront that he works for "Product marketing for @IntelliJIDEA at @JetBrains."
If you're already using it for other languages, why not use it for Java too? Way less cruft to remember when you only have one massive IDE to learn.
No *tabs*? Meaning you edit one file at a time?
&gt; Written by Andrey Cheptsov Product marketing for @IntelliJIDEA at @JetBrains.
Long time IntelliJ IDEA user here, then I switched to Eclipse. It's free and is awesome. Does everything I need as a Java developer.
That really is rather underhand. I get arguing why it's a good product, but they should be upfront about that.
What makes me switch from Eclipse is the fact that when I want to create a new, say, ListenerAwareSingletonBuilderInstanceFactory (or any other ridiculous name), in Idea I do "new LASB" and then do tab, and that's it. Auto-completion is just awesome (auto-complete on partial names, on only the maj in the name). And that's a killer feature for me. Also, as a Spring dev, integration is better than in Eclipse. I found maven integration better as well (but other dev seems to have other stories). Actually I found that pretty much everything was better than in Eclipse (apart from the price, but my company is paying it so). Also, javascript is very well recognize and Idea gives very useful warning for a java dev who is not as experimented in js as in java (especially when there are some obvious scoping error due to java habits). That said, I don't know how it is in Netbeans. And I would not pay the license with my own money (I'd use vi with eclipse for stuff that needs some integration). Btw there's a vi plugin for Idea.
/r/Java should be renamed to /r/IntelliJTestimonies
Oh, there was no need. You could smell the marketing from a distance.
I used to code in Eclipse, but now use IntelliJ IDEA (both at work and at home). It's hard to describe why I'm an IDEA convert, but the best explanation I have is that I didn't have to learn how to use it. Eclipse has lots of Eclipse-specific concepts that aren't trivial, like Perspectives, working sets and its plugin manager - these can be very daunting for a beginner (it's still a bit daunting for me several years on!). With IDEA, it feels a lot easier to start a project and perform the "meta-development" (i.e. navigation, organising your codebase, installing plugins, etc.). When it comes to actual development, I think they are sort of equal as long as you are familiar with the shortcuts, but IDEA has the edge, as /u/UnspeakableEvil suggests. That's not to say that IDEA is perfect - there are times when IDEA basically looks like Eclipse (File &gt; Project Structure could really use reorganising and less layers of abstraction, for example - who cares what a "facet" is?). It also hogs memory compared with Eclipse, which is understandable, but no saving grace on my underpowered machines. There are times when I simply need to rebuild the project (not the code, but the "project workspace") when it messes up a single JAR dependency or when the caches go berserk. I've used Netbeans once or twice in the past (mostly because Oracle's tutorials are based on using it), but never fell in love with it. So the question is - is IDEA worth forking out the money for? Firstly, note that the free Community Edition might suffice for most basic users. But if you are dabbling with more Java EE stuff, or working on things around your Java codebase (i.e. SQL, GWT, WebLogic, etc.), it *might* be worth paying for. It's also worth noting that JetBrains occasionally has sales where you can get the Ultimate Edition for a lot cheaper, if price is a problem.
&gt; What makes me switch from Eclipse is the fact that when I want to create a new, say, ListenerAwareSingletonBuilderInstanceFactory (or any other ridiculous name), in Idea I do "new LASB" and then do tab, and that's it. Auto-completion is just awesome (auto-complete on partial names, on only the maj in the name). And that's a killer feature for me. Eclipse has done [camel case code completion since 3.6](http://help.eclipse.org/indigo/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Ftips%2Fjdt_tips.html) which was released 4 years ago. 
Again, if you need to remove a final to unit-test, your unit tests are probably meddling too much with the internals of your class. This will lead to brittle code in both class and test. Instead, use assert statements within your class to verify state (bonus: will be checked at runtime if started with -ea). Reduce your unit tests to exercising the public API. Oh, and put all dependencies in the constructor.
He probably means no tab bar. You can still switch between files with keyboard shortcuts or from the main menu. For example, Cmd-E for 'Recent files' (just tap it once to switch between two files) or Cmd-N for 'Find class'.
I interpreted that title as "The final decision about java code style".
Hmm. Disabling "Show multiple editors" from the Eclipse General/Editors preference page does the same.
or automatic object generation from say a database or other schema.
Try adding a difficulty factor that the player decides. It would increase the probability of the computer simply choosing the winning answer, maybe.
Nothing wrong with Eclipse, but if you are doing pure Java development then the IntelliJ IDEA Community Edition is also free.
Mainly because Eclipse is the standard where I work, and I'm happy enough with it. Besides which, maybe this is just me, but it seems like Java is the only language/ecosystem with enough cruft around it (e.g., enterprise web server, Maven, Spring) that the learning curve for the tools is steep.
Fair enough. I really enjoyed IDEA back when I had a license for it, though. For me, at least, Eclipse is buggy/crashy to the point of uselessness, and the vi plugin is pretty crappy compared to the one in IDEA (or was, back when I had both). I'd definitely say it was a combination of little things as opposed to one big killer feature, though. I *thought* structural search-and-replace would be that killer feature, but I never got to the point where I could use it effectively.
Meh... I own intellij ultimate edition but still go back to eclipse for large projects. Some of the things listed as benefits in this article are negatives IMHO. In particular, Perspectives are great ways to arrange related functionality. I find myself having to rearrange intellij components manually too often.
Java has had generics since version 1.5 which cuts down (but does not eliminate) the need for explicit casting. However, you need to be careful in some situations as generic types are erased at runtime. 
Sometimes I feel like /r/java should be called /r/intellij . It really seems like they're a paying a lot for marketing/shills.
1. x goes up to numbers.length. You ask for numbers[x]. You probably want to rethink that. 2. You try temp[x] too and temp has size of numbers.length. Remember arrays are indexed starting from 0 and not 1. A size n array will contain indexes from 0 up to (n-1). 3. You can not declare int last and just return this.getLast().... 4. What's compareToIgnoreCase? Must you use an array? There are many sorting algorithms that work much much faster than what you are trying to do here. A simple HeapSort might not be that much harder to implement and it may be useful. If you want you can just use a PriorityQueue and write a class implementing Comparator that will do the job for you.
Java's Iterator&lt;T&gt; returns objects of type T and there is no need for casting. I only see casting used for perhaps integers to double conversions for arithmetic? Also casting is useful to override the equals method.
I can't really comment on libraries pre-1.5 as I have never used versions of Java that old (Java 1.5 has been around since 2004) Type erasure was introduced in order to preserver backwards compatibility with versions of java before generics. Consider this code List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(); list.add(1); Integer i = list.get(0); Specifying generics allows you to prevent having to cast the retrieval from the list. The compiler can use generics to catch invalid code (e.g. if you tried to insert a string instead of an integer the compiler would flag an error). When the code is compiled however, the generics get erased and the compiler inserts the casting for you so the compiled code would look something like: List list = new ArrayList(); //Note the absence of type list.add(1); Integer i = (Integer) list.get(0); This works fine in many situations and is backwards compatible with old code that just expects a List. However, it also introduces problems. For example, you would be unable to write the following code: inteface MyClass{ void processList(List&lt;Integer&gt; integers); void processList(List&lt;String&gt; strings); } This does not compile due to type erasure, the compiled class would have two methods with the same signature and it would be impossible to determine which method to call. Another example of an issue caused by type erasure List&lt;Integer&gt; integers = new ArrayList&lt;Integer&gt;(); if(integers instanceof List&lt;String&gt;){ System.out.println("This is a list of strings"); } else{ System.out.println("This is not a list of strings"); } This would print "This is a list of strings". Due to type erasure, the runtime code would look like: List integers = new ArrayList(); if(integers instanceof List){ System.out.println("This is a list of strings"); } else{ System.out.println("This is not a list of strings"); } As you can see, type erasure can sometimes be problematic and it's when these situations occur that you often have to resolve to type checking and explicit casting. 
That SEEMS dumb. I believe there is a way around the problems but the java guys were too lazy to fix it. IIRC in C# `List&lt;int&gt;` becames a type called list_int (not literately) which inherits List thus the signatures don't overlap and you can tell the difference in the instanceof problem.
poor soul
Check out rosettacode.org it's a great resource for these things. It'll also break it down into different languages.
Whenever I possibly can, I use vim (MacVim, to be precise). For cases where I can't, I use Eclipse in between curse words… and restarts. Seriously, it's the most embarrassingly unstable piece of software I've had the displeasure of using in close to a decade.
eXo Platform is written in Java
So I've been looking at this and trying to understand it. Can you give me a line by line run down of exactly what the enumeration does in this case? I would really appreciate it
It's a high-quality program and people like it. No need for conspiracy theories.
android?
I don't know much about Lamdas honestly. I've noticed Netbeans will sometimes offer to convert my existing inner class to a lamda expression, which looks like it takes a whole lot less time to write, but as far as I'm concerned it makes it so much harder to read that I end up converting it back. Maybe it's just because I don't understand it, but honestly I'd rather have more verbose code that's easy to read than a simplified version when I have no idea what's going on.
The planet example here gives a good explanation of enums with values - http://docs.oracle.com/javase/tutorial/java/javaOO/enum.html I highly recommend reading that. import java.util.Random; import java.util.Scanner; public class Untitled { public enum Move { ROCK(0), PAPER(1), SCISSORS(2), LIZARD(3), SPOCK(4); This declares an enum type named 'Move' with 5 values, ROCK, PAPER, SCISSORS, LIZARD, SPOCK which are each initialised with an integer representing their index private final int index; static String[][] beatsTable = new String[][] { new String[] {null,null,"smashes","crushes",null}, new String[] {"covers",null,null,null,"disproves"}, new String[] {null,"cut","decapitate",null,null}, new String[] {null,"eats",null,null,"poisons"}, new String[] {"vaporizes",null,"smashes",null,null} }; This is effectively a 5x5 lookup table using the enums index value as the index. So the first row represents ROCK and the columns represent the other moves that it can beat. From left to right, null: rock doesn't beat rock, null: rock doesn't beat paper, "smashes": rock beats scissors by smashing, "crushes": rock beats lizard by crushing, null: rock doesn't beat spock. Move(int index) { this.index = index; } This is the enum constructor, which takes the value passed in where the enum constants are defined (e.g., ROCK(0)) and saves the values as the index. boolean beats(Move other) { return beatsTable[index][other.index]!=null; } This function checks the lookup table to see if it beats another move. If there is a non-null value, it beats it. We can call using the named enum like ROCK.beats(paper) and get false back. Or we could say Move playerMove = ROCK; Move compMove = PAPER; and call playerMove.beats(compMove) and get also get false. String winMessage(Move other) { return String.format("%s %s %s.",name(),beatsTable[index][other.index],other.name()); } } This returns a formatted string where the first token is the enum's name, the second is the winning action and the third is the other move. It gets the action using the lookup table the same as in beats(), but returns the string instead of checking if it exists. It doesn't check for invalid arguments, so if given non-winning pairs it might return "ROCK null PAPER", because rock doesn't do anything to paper. public static void main(String[] args) { Random r; Move compMove; Move playerMove; boolean playAgain; playAgain = true; Scanner input = new Scanner(System.in); while(playAgain) { This is basically the same as before // Computer Selection r = new Random(); compMove = Move.values()[r.nextInt(5)]; This sets the computers move as a random enum. Move.values() is a built in method that will return an array of all the enum values, so it would return [ROCK, PAPER, SCISSORS, LIZARD, SPOCK] and r.nextInt(5) selects one randomly. // Player Selection System.out.println("Choose rock, paper, scissors, lizard, spock: "); do { playerMove = null; Same loop as before // Assigns player's decision String playerInput = input.next().toUpperCase();; This takes the player's input and uppercases it. E.g., rock becomes ROCK. for(Move move : Move.values()) if(playerInput.startsWith(move.name())) { playerMove = move; break; } This loops through the enums and checks if the player input starts with the enum name. If it does, that move is selected and we don't look at the other enums. if (playerMove == null) { System.out.println("Invalid choice. Please try again: "); } } while (playerMove == null); If nothing was selected and the player's move is still null, try again. System.out.println("You have chosen " + playerMove + " and the computer has chosen " + compMove); /* Determine winner */ // Tie Case if (playerMove == compMove) { System.out.println("It's a tie! .__. ....cool"); } If the computer and player have the same move, it's a tie. else if(playerMove.beats(compMove)) { System.out.printf("%s You win =D\n", playerMove.winMessage(compMove)); } else { System.out.printf("%s You lose D:\n", compMove.winMessage(playerMove)); } /* End of determine winner */ Otherwise else the enum methods to decide who wins and print the result // Prompts user to play again or terminate game loop System.out.println("Play again?(Yes/No): "); if(!input.next().toLowerCase().startsWith("y")) { break; } } } } Prompt the player to try again. If they answer anything starting with 'y', it's taken as yes. It should set playAgain as true instead of breaking for clarity, but it's effectively the same thing.
Wow. Thanks for the detailed response. I will definitely check that link, but that rundown certainly helped a lot. After doing a bit of research on my own, I was able to understands bits of it, but I was thrown off by the implementation. It's a bit abstract to me even now, but from what I'm understanding, the enum in this case is functioning as an inner class, and sort of is just saying "here's a chunk of data, and here's a couple things you can do specifically to it and nothing else" right?
There are a lot of implications to changing the way an existing language is written. One of the reasons for erasure is to maintain compatibility with older versions of Java. http://stackoverflow.com/a/3545210/1821837
That's pretty much it. An enum is a class that has a set of pre-defined static final instances and you can't instantiate any more. For this example it's defined like an inner class of Untitled, but it would work exactly the same if it was defined in its own file. Instead of using an enum with an index, the same thing could be achieved using static final ints like ROCK = 0, PAPER = 1, etc. I much prefer using enums for the type safety and clarity though, unless I need to use bitwise operations.
haskell devs want to have a word with you guys.
I expected a flame war ("my IDE is THE best!") but reddit guys discuss about pros and cons and of course: experience. Nice! BTW: long time netbeans user here ;)
I have been using small lambdas in conjunction with streams. Having programmed in haskell and Prolog, the syntax in Java just seems a little weird at first but ultimately it works pretty well.
And LISP programmers were using lambda calculus 3 decades before Haskell was conceived.
Yeah, I use it a lot - 500+ " -&gt; " strings found...
Not so long i made a test using lambdas and anonymous classes. Lambdas took almost triple time to complete in a operation where i expected some performance. Now i'm afraid of them.
Please keep trolling out of this subreddit.
Android uses Java 6.
if you're using java 1.6+ and you cast a lot, you're doing it wrong
I am! I've different tools i use for my job and for my pet project, some of them i already switched to java8. very pleased with the results
Mostly when using asm - they don't use generics for some reason (probably backwards-compatibility). Or when I work with ints, longs and doubles.
Look at the official [oracle JavaSE tutorials page](http://docs.oracle.com/javase/tutorial/). It's surprisingly good.
I still can't get anyone to adequately explain what they are.
Same here, we recently upgraded to java 6... only as part of a WebSphere upgrade as 6.1 was reaching its end of life... So whenever 8.5 will die I might have a shot at a newer java version.
I did, dude.
My company won't for a while. Even when we do, I'm not so keen about it (despite being a C# programmer too), mostly due to: http://java.dzone.com/articles/why-theres-interface 
I can agree with this. I am just not very familiar at all with the concept so I can't read it :D
Here is some evidence from the field of Mathematics to back up your claim: 16 * 16 = 256 Sixteen times sixteen equals twohundredandfiftysix Which one's easiest to read?
noice
I really have no tabs, not even hidden ones. You're right about the keyboard shortcuts though, I found it to be much more efficient.
On a tangent, I would strongly recommend that you read [Beating the Averages](http://www.paulgraham.com/avg.html), it's a bit long but it presents a very compelling case on why one should know as many languages as possible: their concepts are almost transferable. Now that I've reread it, when I think about it it looks like I've re-created Lisp macros in Java by using reflection and dynamic bytecode generation... Back to the issue at hand: Do get familiar! The less code you have to read, the faster you will be in the long term...
Honestly, this is a bit more complex of a topic than I can seriously go over right now. Looking over your code there are a lot of issues that really should be fixed, and not just with the GUI. You should rethink your Sonnets class entirely. Storing them in arrays is fine, but all those extra functions to keep track of lines and sonnet numbers seems unnecessary. I would suggest passing the whole array to the controlling object (the button) and let that object worry about printing out each line one at a time, maybe by keeping a counter for what line number you're on. class SonnetWindow extends JFrame { int lineCounter = 0, sonnetNum = 1; String [] currentSonnet = Sonnets.getSonnet1(); // Other implementation here... btnNextLine.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if (lineCounter &gt; 13) { lineCounter = 1; textOutput.setText(null); // clear the box and start over } textOutput.append(currentSonnet[lineCounter]; lineCounter++; }); This is just a quick top of my head thing so sorry if it's not exact, but it should give you an idea. The same thing with the Next Sonnet button. Just increment the sonnetNum and import the next sonnet. Here are some [really good videos on the GUI stuff](https://www.youtube.com/watch?v=jUEOWVjnIR8&amp;list=PL3D7046DF2257751F). Hope this helps somewhat, and good luck.
Finalizers: NOPE NOPE NOPE I'm glad the author includes a very good explanation of the finalizer memory leak: &gt; JVM creates a personal watchdog for each and every one of the Finalizable instances. This watchdog is an instance of Finalizer. And all those instances in turn are referenced by the Finalizer class. So due to this reference chain, the whole gang stays alive
You can use free edition for professional purposes.
Is the Alt+Ctrl+U shortcut available only in professional edition? It doesn't seem to work for me in the free edition.
Don't work*
Our division just got a new boss and he wants us to Java 7. I am so excited!
http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html
:) I'm sure I can convince them to upgrade the java version right after we get upgraded from XP...
Judging by the comments, I see a few people don't know that 1.4 was codenamed Merlin :)
Actually you can code in java 7 if you only support the latest version now and you can use some Java 7 in older versions
Not if you're doing android. You have to cast every view
SQL doesn't lock you in a specific database migration tool.
Thank you for this brilliantly thoughtful and well researched reply.
It also didn't have generics...
== breaks type abstraction where equals() does not. In other words your implementation is now married to your interface and all of those =='s will break the moment you need to define a super interface. See: "Emulate extensible enums with interfaces" Effective Java 2nd Edition. Bloch. p 145.
CS student here - my professor still uses Java 6 and refuses to upgrade, so we can't do anything that wasn't in Java 6. 
&gt;I already tried going to Settings -&gt; GUI Designer and setting it to Java source code to get a better understanding of what it does, problem is: I don't get any source code. Does this option something else or is it just not working? I already did this and I get no code generated at all, except the default stuff you get anyways :(
IMHO it's not *quite* the definitive answer. It would be nicer to have something similar to Comparable&lt;T&gt; to have compile time checking.
The preferences for the auto completion are under Window &gt; Preferences &gt; Java &gt; Editor &gt; Content Assist There is auto-activation where you can set the trigger and activation delay. According to [this wiki](http://wiki.eclipse.org/JDT/FAQ#Can_I_enable_code_completion_to_be_activated_as_I_type_like_how_it_works_in_Visual_Studio.3F), you can set the trigger to "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz." to get it to activate on any of those letters. I also find it useful to define type filters (Preferences &gt; Java &gt; Appearance) to filter out packages you know you won't want in the auto-completion results. (java.awt.* is a good example since it is often sorted above java.util in the results). I can't speak to Maven itself, but "There's nothing to update" sounds like maybe you did "Help &gt; Check for Updates" instead of "Help &gt; Install New Software...". I think Eclipse out-of-the-box has many small things that people don't like, but at the same time a lot of those things are customizable. I've been using eclipse for a long time and people still tell me about preferences I didn't know existed.
Well, in general == is faster. For enums it does not make any difference (see comments below). In general, using == can make a hell of a difference if you are dealing with large pieces of data or doing frequent comparisons. Sometimes you can also experience bad performance on trivial code. Try to call equals and hashcode on a big arraylist to see what I am talking about (or put it in a map and it will do it for you without you realising it) My advice is to know when to use either operator. You are doomed if you think you must always use just one of them. Edit: a word Edit 2: should've made clear I was not talking about the equals for enums but in general.
The rest of the time, I feel like it should be called /r/javahomeworkhotline.
Java made a mistake, == should have been shorthand for a call to equals(). How nice and natural to write if (name == "Something").... The less common instance id comparison should have been the long form via a final method on Object. if (thisObject.instance(thatObject))... Alternatively a different dedicated operator like 'instance': if (thisObject instance thatObject)... The former would be nice as it would be accompanied by javadoc, although the latter could have better null handling.
Practicality usually prevents one from using the most powerful language available, especially when there's more than one developer.
Haha nice. I only got freed from XP because a very small group of took the liberty to use the license keys in the new laptops to install 7 and pretend we're still using XP and IE8. Code is compiled to JDK1.6 but run on JDK1.7 - no idea when JDK1.7 will be 100% allowed... 1.4 is dumb. its almost a different language.
Link is down. :( Looked interesting.
Java EE ;) More specifically the web profile, and ultra lightweight and free servers like TomEE seems to fit best. Although you may here otherwise sometimes, JSF (the MVC framework in Java EE) doesn't abstract the web away at all. You'll write your app in pages (no stuff like the website is an app with a single page design), use plain HTML on your page and link to other pages via plain GET requests. It uses Facelets as the template engine which is pretty okay. 
I like Play Framework. Templating is great (aside discussions whether server side templates are a good thing), it is very simple and straight forward and does not have many JEE nuances.
Take a look at Java EE 7 - it has everything you need out of the box. No need to pull in another framework.
Have you looked at the implementation of Enum.equals(...) ?
&gt;Who the fuck Josh Bloch. This is why I provided a source. When you're ready to refactor into a class you don't want to have to start looking for ==.
Or === for instance equality like javascript.
The visitor pattern is one of the most exaggerated patterns. I’d say that in 80% of the cases where it is applied, it is applied because of an architecture astronaut wanting to show off with his pattern skills. In a more formal context, I have concluded that the visitor pattern is only OK-ish, when you have lots and lots of visitors, but only very few component types in your tree structure, i.e. only very few cats and dogs. [Details here](http://blog.jooq.org/2012/04/10/the-visitor-pattern-re-visited/)
How useful is this pattern really? In the example in the book the client is still dealing almost exclusively with the super interface 'Operation' rather than the enum sub-types. This throws away most of the nice things about having enums in the first place. e.g. The ability to know the whole set of values, use in switches, test via ==. I guess it makes it a little easier for the client to define a subset of values, but that's about it.
What about getting into something like JRuby? Seems a little more oriented to some of the modern web stack that you see startups using.
It's a trade-off. API stability (what you list is an extreme case IMO) for compile-time type safety. I'd take the latter until there is a VERY compelling reason to optimize for the former.
That's what Scala does. `==` is `.equals()`, `eq` is reference equality.
Enum#equals is implemented with == so in this case there will be no performance difference (the call will be inlined in any hot spot).
Check out [Dropwizard](https://dropwizard.github.io/dropwizard/). It's not necessarily better/worse than JEE, just different.
I know that this doesn't really answer your question, but for Swing GUI development, I love JFormDesigner: http://www.formdev.com/ It has plugins for IDEA, Eclipse, and NetBeans and I think it's the easiest/nicest GUI builder to use, including Matisse.
The problem is that the JavaScript framework of the day approach is not really more modern or the mostly used approach. What it is is the most hyped approach. An approach about which a large group of hipster bloggers are blogging. But hipster bloggers are but a small group compared to the larger development community. It remains to be seen if JavaScript framework of the day is a lasting thing or just a passing fad. I already see companies moving back from it. They fall for the hype of their favourite hipster blogger, but then get bitten by big performance and memory issues; JavaScript firing way too many events, Dom trees being updated for every tiny change, large amounts of garbage eye. I've seen modern CPUs at 100% when displaying fairly simple web sites. It really ain't pretty. 
That it doesn't have many java EE things is quite a disadvantage if you asked me. Also play is primarily a Scala framework. It supports java since it runs on the JVM, but via that it supports every JVM language. But, to call the play APIs anything but Scala is a second class language.
Some people hate maven. I think it's fine. I think that learning a good build tool / project management tool while you learn a language is helpful. Here's the book: http://books.sonatype.com/mvnex-book/reference/public-book.html
Isn't JRuby just a language and not a web stack?
You're right. I was just suggesting that if OP looked that route he might find some resources or suggestions from that community since they seem to be geared that way if he's looking to build java web apps. Could look into Grails, as an actual full stack framework. Just offering up a couple things that might not otherwise get mentioned. Not sure how far he's looking to explore or learn new things.
Seems like you are looking for Ninja. It's a modern Java web framework. Friendly and helpful community and a lots of great and productive features. Check out http://www.ninjaframework.org.
My point is that the mistake was made when the language was designed. It can't be changed now. string == "something" is a classic Java gotcha, and could have been avoided. Subsequent Java based languages (not that I use them) have not repeated this mistake (see Benutzername's post)
Subtle bugs creep into code with = and == as they can be mistaken for one another quite easily. Adding a more distinct operator would be the best: 'is' or isinstance' might be a better route. Fun fact: The NSA tried to use this = == confusion to introduce a backdoor into the Linux kernel: https://freedom-to-tinker.com/blog/felten/the-linux-backdoor-attempt-of-2003/ 
You're describing Play 2. Play 1 is pure Java (no Scala at all, Groovy for the templates), and according to the Play developers, continues to be actively developed and supported.
I'm assuming you're looking for something like ASP.NET MVC as opposed to ASP.NET WebForms, but in the Java world? JSF is analagous to WebForms. This is the standard. There is no Java standard analogous ASP.NET MVC, which in the Java world is called a "front controller" framework. JAX-RS comes close, but doesn't deal with template engines. Jersey, an implementation of JAX-RS, provides an extension called Jersey MVC which includes support for using various different template engines, including FreeMarker. It's not quite as "out-of-the-box" as JSF, but it plays well with the rest of the Java EE world, which will minimize configuration. Outside the standard, there a lot of different options. Spring MVC and Struts are probably the most popular, but require configuration. There's also the Play framework (version 1 and version 2 - very different), which aim to be full stack (minimal configuration) and highly productive. Play version 1 is pure Java and looks like Rails, version 2 is a Java/Scala hybrid that looks something like Node.JS.
== is nice and concise, used extremely heavily in existing code, familiar to different languages, and used for non Object "primitive" types. There'd be a riot if its meaning was changed. 
&gt;a lot of the usefulness is abstracted away If you reach the point where something that was an enum must be refactored (into an extensible strategy or a data driven model) then values and case handling is the least of your problems.
exactly!
Python does it this way, using the "is" keyword rather than "instance".
If you're doing a lot of comparisons then an ArrayList probably isn't a suitable data structure to be using. 
&gt; JSF is analogous to WebForms. This is the standard. JSF started out as being close to WebForms, but along the way it evolved into a much more hybrid approach. There are now things like view parameters and view actions, as well as stateless views and pure HTML templating. The days that JSF tried to be a desktop like UI toolkit that abstracted from HTTP and its stateless protocol and were supposedly *) you only used components and no HTML are long gone. *) supposedly, since I don't think this was ever true and JSF always promoted a mixed html/component approach 
What's wrong with our industry that we collectively accept nonsense like this? What sick process has led us to believe that being 10 years behind should be the norm? Are there any other popular industries where this is also the case?
I recently just started my first Web app at work. It's using a framework called Vaadin. You write code in Java like a typical thick app, and it compiles down to GWT Javascript. I really like it as I used to program UI's in Swing and Qt. I'm sure it's not an optimal performance solution, but it is quick to get a functional Web Gui written in Java. 
In my opinion "do this because you might need it in some hypothetical future" is a pretty bad reason in general. It leads to over-engineering and needlessly complicates code. More specifically in this case enums are useful because they are exhaustive, and this allows you to do a few things like check at compile-time that you're handling all the cases of a switch. If you make them extensible you lose this safety. In fact in Bloch's example of extensible enums (p. 165 in my edition), he doesn't use the fact that this is an enum at all. It might as well have been a regular class.
I may have made a wrong decision but I decided to support java 8 in my open source project CommunicationsFramework (findable on GitHub) However I may revert this if it affects adoption of users. 
google "java Comparator"
Haha, sweet! I don't think that would fly here... It also sucks seeing the Windows 7 stickers on our laptops, so you know they intentionally downgraded.
Ahh Cheers, I'll call off the mental breakdown
We have about 40 services which share most of their objects. Note that all the common objects are defined in XSD files, referenced by the WSDL of the services. From a Maven point of view we have: * One project tasked with generating the common objects using maven-jaxb2-plugin (generate). * It took a lot of fiddling to get it right (several options, plugins to deal with boolean getters, some reasonable binding files to deal with XML references); part of it is due to the way the XSD are written (which we do not control directly, even though we have some input in the process). * We also had to use the maven-antrun-plugin to perform one ugly regexp-based correction of the generated code, hopefully more recent versions of JAXB2 have corrected the issue. * Overall, we end up with a nice big set of annotated Java files that go in a dedicated Jar. * One project per WSDL tasked with generating the client classes using cxf-codegen-plugin (wsdl2java). * There is a trick here, an important one. We use maven-antrun-plugin after the Java classes have been generated to remove the common classes generated by wsdl2java (using Ant's fileset/present and delete/fileset elements). It requires that the common classes generated by jaxb2-plugin have been created before any service is built, and it means we generate the source code for the common classes for every service, and then throw the result away... But it works. * Overall, we end up with a small Jar per service, which contains only service-specific classes. This is of course work-related, so I cannot give much more detail than that.
This my friend https://www.udemy.com/java-tutorial/?couponCode=FREE its free, really descriptive, aimed at new programmers, covers everything from beginning to advanced in chronological order. I took it last summer and it was valuable. 
Get a lead or very senior to do it and them everyone else does it too ;)
Well I agreed with you enough about the case for keeping enum semantics wherever possible when that's the initial design... but then &gt;It leads to over-engineering and needlessly complicates code. you wreck it with category error. In the case of equals vs == the equals method is idiomatic java and == is a special case for enum which actively resists refactoring because it is overloaded with object identity.
If you are storing millions of objects in sequential order then it is probably a reasonable data structure to be using. What is not reasonable is having its equals method called when you have such a big structure, and it being slow as fuck because the default implementation compares EACH element of 2 lists. You don't need to call the equals method directly. It can be called by some other API (such as adding it to map) and you realise that until it things get slow. Edit: same story for the hascode method
&gt; I need to have a form of X / Y values rather than the simple gridbaglayout type coding Can you explain better what you mean? Are you looking to use a Layout Manager (i.e. BorderLayout, FlowLayout, etc.) that is basically an Absolute Layout Manager? You give it the x and y and the UI puts the Component (JButton, JRadioButton, etc.) in that x/y position? If that is true, you will need to use a proprietary UI API. Netbeans has that type of Layout. I think the code is messy. I would recommend learning the layout managers and using them to you advantage. I believe a lot of engineers think that they can get away with using just one layout manager and that's it. You have to use multiple layouts to accomplish what you need. I'll give you a hand. Draw what you want the UI to look like, post it to [imgur](https://imgur.com/) and I will "outline" the different layouts you need to code that UI up.
What you listed above is almost a bubble sort. The main thing to remember is that you'll need a temp variable of the same object type as the one your list is made up of.
Java of course. 
I'm not quite sure what fixed gear bikes and PBR have to do with it, actually. Like everything else, it's easy to do bad if you don't know what you are doing, which I highly suspect is true if they are pegging a current generation CPU at 100% with dom manipulation. 
Maybe, but I don't think OP asked specifically for such nuance. Just that the framework is MVC and there's no abstracting away of the stateless protocol (which I take to mean HTTP). JSF exactly fits those requirements.
(what does Gnarly means ? :-) ) &gt; In Eclipse, try Ctrl-Space yep, found it, thanks! I'm sticking with Idea for now (on overall, it is more reliable imho), but I know that I would need to use Eclipse (which is good as well) again in the future, so all those tips are really welcome, thanks !
Thanks for the tips !!
im on mobile and cant see your code. In the panel that contains your button: setLayout to null In your button: setBounds or setLocation Done Im pretty sure that's all you need. I used to work with this a long time ago... around the time my grandmother was still hot.
It's easy to do bad stuff with a lot of tech, I'll give you that. But as it appears a lot of people that just blindly jumped on the bandwagon run into various issues with JavaScript frameworks and moved back. The point is that some people like to give the impression that JavaScript frameworks are the next step and what everyone is doing now, somehow implying that in a few years everything will be JavaScript and server side web frameworks will all be gone (like VHS was replaced by DVD). But this is not proven by far. JavaScript frameworks are currently a hype and lots of people shout about hypes. It's the very definition of a hype. Remember the hype created by the Ruby/RoR guys? In 2005 supposedly everyone was doing Ruby. Ridiculous claims were made about Ruby bring 40x more productive. If you were into modern computing, you were using Ruby. Only dinosaurs were using any other language. In a mere few years the entire industry would have migrated to Ruby since eventually nobody could afford to be 40x less productive. Fast forward 8 years. Ruby usage is at an estimated 1% of all development. Major advocates of Ruby/RoR have migrated away from it (Twitter being the most famous example). Do you see any parallels with the current JavaScript hype?
I don't know the reason, but maybe people get fed up with the pattern: Op: I want web app. Which framework for xyz behaviour? Reddit crowd; GWT! Spring MVC! Ninja! Play! Vaadin! JSF! Wicket! Angular! Ruby! Grails! followed by "it's great!" "It's super productive", "it's what I like", "it's what I use", ... Seriously, just take that same list of 10 frameworks, take a list of 10 of those responses, randomly create a few permutations of those and post each one as a comment here. Will be indistinguishable from the typical comments being posted here.
Wrong, you just set the layout to null. There's no need for a proprietary API to use absolute positioning
What i did was create a Maven project and just included the jersey, java.ws.rx thingy in that thing. 
Ok. I was wrong. Here is an example of using the [AbsoluteLayout Manager](http://docs.oracle.com/javase/tutorial/displayCode.html?code=http://docs.oracle.com/javase/tutorial/uiswing/examples/layout/AbsoluteLayoutDemoProject/src/layout/AbsoluteLayoutDemo.java).
So where do I find good resources for Java EE?
It's only in the paid version unfortunately.
Procrastinate here...procrastinate there.. What bug?
Oh awesome, thanks so much! This is exactly what I was looking for!
I think it's called "Java EE: RESTful Web Services (JAX-RS)" in version 13. That will give you the option to create a REST service when creating a new project. 
Not exactly sure why it wasn't working previously considering I had the panel setLayout to null but I've managed to figure it out. Thanks. Also I have an image as the background of the JFrame (commented out at the moment) when I use it, the becomes the foreground so the buttons can't be seen. Is there any way to 'send to back' (or something like that) in Java?
Dude I dont work with java swing since 2006, so this might not work. Try repaint or updateui methods and see if it does the trick. You can also override paintcomponent of I am not mistaken, but that might be a little too much just for displaying things as you expect.
Thanks for the help, I managed to get it working with the setLayout to null and setBounds .... somehow xD.
"You might need to make that special object behave like a normal java object" is over-engineering nothing.
Regardless of where you go with this. Watch this. I still reckon its one of the best videos on the net. Very relevant. http://m.youtube.com/watch?v=kPRA0W1kECg 
fair point
Yeah, had one of those. I think my theory is sound, just my execution that needs some more work. Thanks though
Considering how important data security has become, its nice to hear about strong random number generation. This is a nice article! Thanks for sharing! 
Those sound effects... Interesting though, had no idea there were so many different types of sorting algorithms
Cheers x
Yeah that's a great video, really makes me want to learn heap sort/radix sorts.
Optional values? Hell yeah.
Scala master race here. Optional values? Yeah, I've been using those since like 2010. They're pretty neat.
while i agree with your sentiment, why are we allowing concrete implementations in an interface? why isn't an abstract good enough for that?
The given rationale was that you could add methods to an interface without breaking existing implementations. More generally, this means you can inherit method implementations from multiple supertypes. This is immensely useful. Still, Java 8 doesn't go far enough. Classes should be able to extend multiple superclasses as well.
&gt;10 Features in Java 8 You Haven’t Heard Of - &gt;1\. Default Methods Maybe if I wasn't paying any fucking attention
It's *really* useful for convenience methods that build off specified methods in the interface.
Play 1 is in maintenance mode(bug and security fixes) 
Awkward rap about a programming language, submitted by /u/twowhiteguys... it checks out.
hi, programmer here. been paying attention, did not know about default methods. i appreciated the article.
&gt;URLs route to xhtml files This is *not* correct!!! In JSF all URLs route to the Faces controller (the FacesServlet provided by JSF). The controller then selects a view by consulting the view handler and the active VDL. The most frequent case is that URL foo.xhtml causes the page foo.xhtml to be loaded, giving the illusion that foo.xhtml is invoked directly, or control is routed directly to it. But this is thus not the case. The VDL can execute a method first, or "load" a class by convention and call a method on that, or consult a user provided class and use its outcome to do whatever, etc etc. It depends on the view handler and VDL that's used.
The same reason write (for bytes) takes an int, on the stack there is no difference and upcasting is automatic.
&gt; So why does it take an int? I guess it's a workaround for a lack of unsigned number types in Java. &gt; if I call DataInputStream.writeShort(64000) It will just write 64000 (can be later read by readUnsignedShort) Another flaw is writeUTF. One would expect that it can write text longer than 65535 chars... Nope :)
Are you sure? What if we wanted to write a signed short? And if we go higher, beyond what fits in a short? Do we just drop bits? 
I'm not sure what the OP was asking for, so I assumed when he used the words ASP and MVC together in the same sentence, he meant something like ASP.NET MVC, which uses a style of MVC more like JAX-RS than JSF. You wouldn't write ASP.NET MVC style applications with JSF, it wouldn't make any sense.
&gt; Yes yes, the usual tired complaint against **any powerful language feature** Fixed that for you 
Not only that, it serves as an executable specification to supplement the Javadoc, and it reduces duplication of code.
That's definitely not true. I use a lot of *Set&lt;MyEnum&gt;* fields in persistent entities, and I usually write custom persistence logic to save them as bit sets. To guarantee stable ordinals, my enums always implement some kind of *BitFlag* interface with a *getBit()* method. It's perfectly fine code imho.
Wait.. newbies knowing about the new stuff? How can that be? I thought they started teaching you COBOL!?
Don't know why you got down voted but you're absolutely right. For example the comparable interface could look like this: interface Comparator&lt;T&gt; { boolean lessThanOrEqual(T first, T second); default boolean equal(T first, T second) { return lessThanOrEqual(first, second) &amp;&amp; lessThanOrEqual(second, first); } default boolean lessThan(T first, T second) { return lessThanOrEqual(first, second) &amp;&amp; !equal(first, second); } // ... } 
Abstract classes cannot be multiply-inherited, and class inheritance means you get all the state and mutation of the superclass as well. Interfaces cannot have state, so implementing them doesn't complicate your class.
Same here. Sometimes I'm too busy actually working to pay attention.
&gt;I have seen it too many times in C++ and not once where it might have been a consequence of good design instead of just a quick hack of a lazy coder (similar to inheriting from too many interfaces in a single class) or the misguided thought of making something simple by reducing boilerplate - resulting in an unwieldy mess with behaving like three different things, exposing internal implementation details and all in all being an unmaintainable mess. You can do that in Java. Many bad programmers *have* done that in Java. Lack of multiple inheritance does nothing to prevent that. &gt;Inheriting multiple states from multiple parent classes is also the root cause of the diamond problem Scala traits provide stateful multiple inheritance, and solve the diamond problem head-on instead of cowardly avoiding it. The diamond problem is not insurmountable, and it certainly isn't an excuse for not even bothering to try. &gt;But try to convince me, what would Java gain from multiple inheritance? What has Java gained from interface default methods? Extensibility, simplicity, power, boilerplate elimination. Multiple class inheritance would give us more of that by removing the remaining limitations on interfaces. To give a couple of concrete examples: * Interfaces with a corresponding abstract class, like `java.util.AbstractCollection` for `java.util.Collection`, are an abomination. They exist only because lack of multiple inheritance denies us a better solution. Thankfully, interface default methods are enough to eliminate most of them; unfortunately, not all. * Take a look at Swing. `JComponent` extends `Container`, not because all Swing components are containers, but because *some* Swing components are containers. Similarly, `JFrame` extends `Frame`, but not `JWindow` or `JComponent`. Yuck. But because `JComponent` has to have state, it has to be a class, not an interface. &gt;To the argument about replacing the programmer I stand by it. To put it another way: taking away tools from good programmers just because they're abused by bad programmers will not stop the bad programmers from being bad programmers, but it *will* limit how good the good programmers can be. &gt;people What? I don't follow.
I got hired on as a professional Java developer last year, in a mid level position with no prior Java experience (but 15 years as a developer on other platforms). Here's what I would recommend: * **Be able to name and discuss intelligently the big three IDE's.** You don't need to be an expert on each of them, but I'd recommend doing at least a toy project using Eclipse, Netbeans, and IntelliJ just to see what they're like. * **Be proficient in at least one build system and have knowledge of the others.** I would recommend learning Maven. While its project comprehension system is verbose, to say the least, if you use the standard Maven project structure, you've got a leg up on organizing your code in a way that other people can understand. Try out gradle as well, just to see what might be coming down the road. * **Know your way around at least one source code control system on a command line level.** I'd recommend learning git, and if you have time, subversion. Knowing how your IDE of choice front ends the system is a good thing, but nothing beats having a deep understanding of what is keeping your code safe. * **Learn at least one automated testing library.** I recommend JUnit. Writing test driven code will encourage loosely coupled design. Once you have that under your belt... * **Learn what a servlet is, learn what JSP is, and what their responsibilities should be.** I'm a firm advocate of framework free learning, up front. JEE and Spring both build on base level servlet/jsp technologies. * **Pick a framework and familiarize yourself with it.** I'd pick Spring, personally. * **Familiarize yourself with an ORM.** Hibernate seems to be the popular choice here, and it plays nicely with Spring. Since you're a PHP dev, I would recommend rebuilding a web application you've already done using plain old Servlets and JSP's. Build it in Netbeans, using maven. Keep your code secure with git, and write JUnit test cases for all your core code. Once you've done that, investigate Spring and Hibernate to see where they can make your life easier. Good luck!
/u/ForceFactory and /u/jdmacguffin gave some great advice. However if you're coming from PHP, make sure you have a very strong grasp of Object Oriented Programming (OOP), Interfaces and Design Patterns. I've rarely found a PHP only programmer that grasps what those things are outside of having heard the terminology or rudimentary use of objects.
Could you, if it's not that much of a hassle, put some more line jumps there? Edit: Sorry for being spoiled and asking nicely for some line jumps to add visibility.
That's an excellent point. (And thank you for the shout out. *g*) If you want some book recommendations, the Head First books are actually pretty good. HF Java and HF Design Patterns (and their Object Oriented Analysis and Design book) are all solid tutorial material if you need some help ramping up. If you're solid on OO but want to read a good book on how to write good Java (not just good OO code), I'd read Clean Code by Robert Martin. I'd also, just on principal, recommend The Pragmatic Programmer, by Andrew Hunt and Dave Thomas.
For those who use JPA and do not know that "Java Persistence API" is an abstraction layer to a real database... I don't know what the hell you're doing.
If the application is web; then you must check the following stack: - Primefaces - http://primefaces.org/ (JSF) - Spring - http://projects.spring.io/spring-framework/ - Spring Data JPA - http://projects.spring.io/spring-data-jpa/ 
You could check out the official Java EE tutorial, which is at [version 7](http://docs.oracle.com/javaee/7/tutorial/doc/home.htm). Check out the case studies at the end to see implementation patterns.
&gt; why isn't an abstract good enough for that? Abstract classes can have mutable state. Default methods in an interface, while concrete, are guaranteed immutable and stateless. This allows the fundamental feature of interfaces to remain intact - you can still safely implement multiple interfaces. Without any language level protection, you cannot safely extend multiple abstract base classes.
"Industrial software" goes way beyond an academic assignment. A large scale system involves several teams; developers, testers, QA... Requirements change constantly due to political and management decisions. It's a living hell. If you wish develop something in a group of 4, 5 students, you will need to be very specific. For academic assignments, having a clear and specific scope is all you need. Something in the lines of "we will implement A, B, and C, but D, E, F will be left unfinished due to lack of time and resources". Basically, just keep it small enough so all team members can manage to finish their part in time. As for reference material, it really depends on what you need. There are several blogs and tutorials. But they are usually specific to some area. You will need to put the pieces together to create what you need in terms of GUI/architecture/persistence/etc.
Thank you very much, that makes a lot more sense now. And the code works.
Anytime :)
Guava has been out quite awhile dude... It's not like Java programmers haven't been able to use them either. 
How well are you doing with programming now?
What's wrong with Asp.NET MVC? I think you might be confusing it with web forms. You can do everything you want with .Net MVC. Unless you just really like Java. I personally prefer .Net to Java.
I've just been having abstract classes implement interfaces. kinda same effect.
&gt; this means you can inherit method implementations from multiple supertypes that's not a good thing, I don't like this anymore D:
You don't always want a ton of classes extending one superclass. Or in the more realistic case, a huge mess of abstract classes getting deeper and deeper eventually being implemented.
I was under the impression that the java 8 jit was capable of inlining some methodhandles, is this not true? 
Finally, someone talks about other features besides lambdas!
The following is presented under **fair use** and is Copyright Orace: default &lt;V&gt; Function&lt;T, V&gt; andThen(Function&lt;? super R, ? extends V&gt; after) { Objects.requireNonNull(after); return (T t) -&gt; after.apply(apply(t)); } The "after" reference escapes the lambda and becomes a parameter in the invokedynamic call. This results in a new allocation every time .andThen is called. EDIT: unless of course there were something in LambdaMetaclass which cached the result of its own (this,after,codeblock)-&gt;Function logic... looking... didn't find one.
Time to learn a new language before oracle totally trashes this one with bloated useless crap. What happened to a simple language
Oh I'm getting along okay I guess.
Why did you post an article that is almost 3 years old, and not relevant?
And then http://youtu.be/GKNX6dieVcc
Lots of good "common sense" advice, that isn't so common. Good article.
They really do carpet bomb hard here. =/
you could remove the items in your combo box before you add new items to it, like jcboCountry.removeAllItems() ?
Mind your scope. Gonna get hard scope creep, with something as broad as "industrial". Plan out what you want, put general time estimates for the individual components, multiply those estimates by 2-3. Look into a methodology like agile. 
yes that should work
Thank you very much that solved that problem but now something else is going wrong but I'm not sure what as something slightly different goes wrong every time I run the applet... The joys of java I suppose :) thanks again
Guten :moustache:
Well, I find streams per se pretty cool. I actually don't think their being optionally parallel adds the most value to this very expressive API
&gt; What i wonder about default methods is - if it is possible to create fallback implementation for new method, that uses old, already existing methods in upgraded interface - is there really a good reason to expand interface with that new method? Just have a look at [`Iterator.forEachRemaining()`](http://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html#forEachRemaining-java.util.function.Consumer-), for instance. Isn't that awfully useful in so many cases? And since it is, how to add it without a *default* implementation and without breaking all existing API?
Just have a look at [`Iterator.forEachRemaining()`](http://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html#forEachRemaining-java.util.function.Consumer-), for instance. Isn't that awfully useful in so many cases? And since it is, how to add it without a *default* implementation and without breaking all existing API? (I could post this a hundred times)
But then you're defining implementation instead of just a contract.
Great article. These thigns cannot be said often enough. Yet, the article still makes Java devs believe that 8ms is anything near fast on a decent RDBMS. In terms of actual SQL performance, it's still an *eternity* given the simplicity of the query.
&gt; Are you sure? What if we wanted to write a signed short? If you want a signed short just use readShort() instead of readUnsignedShort(). You can also convert it to unsigned using Short.toUnsignedInt(in.readShort()) &gt; And if we go higher, beyond what fits in a short? Do we just drop bits? Yes, and you should probably use writeInt or writeLong then :)
Android support would be cool. Move to a real build system instead of having IDE files in VCS. Publish in Maven Central. Don't host built jars in the repository itself: this will bloat the size considerably. You can attach binaries to git tags in GitHub and they'll host it for you.
Well as long as you understand that a URL is not directly mapped to a view, but only mapped to the Faces controller, which then loads a view (in Facelets by convention, but in any other VDL in whatever that VDL seems fit), then we'd clear. &gt;which is used to drive the first step of the JSF lifecycle In practice with all defaults this is mostly true. There are two remarks: * An action method's outcome on both a GET and POST request can still cause another view to be rendered than the one selected via the URL mapping convention. * The lifecycle itself is pluggable too, so it's not necessarily true. You can add additional phases or remove phases. This is what Mojarra does for their Action prototype, they add a user controller phase before restore view. ADF adds two other phases, and I wouldn't be surprised if XPages also did something there. So 99% of the time things are observed as you mentioned, but you have to beware that this is just observing the defaults and not the set in stone way that JSF works at the core level. 
Check back now.
Yeah I was on mobile. I hope it's better now. Thanks for the feedback.
Awesome, Ill look into that after im out of school
Are you kidding? That's an *awesome* thing! Now you can write an interface and give it all the methods it really should have, without having to worry about burdening implementors or making one of those ugly abstract base classes for it.
Tools that eliminate classes of mistakes do make solving your problems easier in the real world, that's the whole point. I don't need default implementations to solve any real world problems, besides rushing a hack into production. The net value of the feature is negative to me.
&gt;AbstractCollection is actually a bad example for your case, since it only provides default methods which now covered by interface default implementations. Yes, exactly. Interface default implementations are a step in the right direction, for this reason. &gt;I am not a Scala expert so I have to go with what I could find and from the look of things multiple super classes are still a complete no with traits following different rules compared to normal classes. Scala traits differ from classes in the following ways: * Traits have only a single constructor. It is not allowed to take parameters. * Traits are always abstract. * Every class that extends a trait will have a rather large `class` file, due to all the glue code the compiler has to generate. * Changing a trait is likely to render that glue code invalid, so different versions of the same trait are not binary-compatible. Any class that extends the trait must be recompiled if the trait is changed. * If you inherit two or more different methods with the same signature, you must override them (and, usually, call one or more of the overridden methods via `super`) in order to resolve the ambiguity. That's pretty much it. Other than that (unless I forgot anything), you can pretty much use a trait like you would a class. In particular: * Traits can extend classes. * Trait methods can override class methods. * Traits can have fields. * Traits can have initialization code (in the single constructor I mentioned above). * Traits can be extended at multiple points in the inheritance hierarchy without harm. The type parameters have to be compatible, but that's it. * Traits can have inner classes/objects/traits. * Traits can use the `this` reference. As horrifying as this may seem to you, the sky has not fallen. On the contrary, Scala programming is awesome. &gt;On the other hand the smells already start with Containers being able to contain other Containers unless said other Container is a Frame. Indeed. `Container` should have been an interface. But that's the problem: making it an interface would have imposed one hell of a burden on implementations. Just look at the source code for class `Container`. Even default interface methods wouldn't fully solve that, since every `Container` has to maintain a list of its contents. In Scala, you'd just make `Container` a trait, list of contents and all. Boom. Done. Problem solved, just like that, thanks to multiple inheritance.
I guess you have bigger problems than lack of multiple inheritance, then.
I have no problems, Java with our guidelines are working very well for us. But don't worry, you're not the first know-it-all programmer unwilling to learn from the extensive real world experiences of others while having absolute faith in your own convictions.
I don't think you understand. I've *suffered* from Java's lack of multiple inheritance. I spent a good *decade* wishing I could somehow have it. When Scala finally gave it to me, I was overjoyed! I've been using it to great effect ever since, and I've never looked back. Writing Java code is now an exercise in frustration, like a god that's stuck in a mortal body and forced to struggle against its meaty limitations. Yeah, I can still get things done, but it's going to take longer and it's going to hurt. I can't even begin to fathom why you'd feel differently. It's bizarre.
&gt;I can't even begin to fathom why you'd feel differently. I told you why, I don't need multiple inheritance to compose the systems that we're composing. Most of the time I don't need inheritance at all, preferring composition. I can't even begin to fathom why you're feeling such pain without multiple inheritance. Perhaps you're just fond of some particular patterns of design that require multiple inheritance. I'm not sure what they could be, or why you're insisting on using them though. What I can tell you is that your way is not the One True Way, and multiple inheritance is in no way required for composing high quality systems.
And now you're feeling it. There are two groups of people on reddit who are impossible to argue with: gun lovers and Java EE lovers. I wonder how much they overlap.
I assume btw that Hibernate has representatives in the JPA EG, so they can (and perhaps should?) test the TCK as well, fix existing tests and provide new ones. I spoke with someone at Oracle once and he told me part of the problem is that all participation in the TCK is extremely low (probably most of them being very closed has something to do with it, but still).
When I've worked with couple of Java game frameworks I've noticed they have nothing for UI. I've wanted to make tactical strategy so I didn't need muh graphics, but with that framework Minecraft is written on I had to spend plenty of time on obvious things: menus, buttons, click detection, popups, animation, cursor, all that. Every game probably has at least main menu and config, many have something even more complex so it'd be nice to see.
My opinion would be that if you're building something new now, it should be based on javaFX, and not on AWT/Swing.
I would rather use OpenGL, since I'm more familiar with it than JavaFX. However, if I were to use OpenGL, I'd need to find a graphics library that didn't require me to include loads of dll's and jar files. But I might do.
Liking this idea, I can think of a few things like Text Fields, Buttons and so on. Also cursor is pretty easy. Thanks for the suggestion :)
Yes, the reason is that default methods can be overridden. For an example of the usefulness of this, see [Map.computeIfAbsent](http://docs.oracle.com/javase/8/docs/api/). The default implementations in Map and ConcurrentMap are reasonable, but require multiple map lookups, and in multithreaded scenarios there is the possibility that two threads will call the method simultaneously and the (possibly expensive) compute operation will be called twice. [ConcurrentHashMap](http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#computeIfAbsent-K-java.util.function.Function-) overrides this function for improved performance and tightened semantics. Thus default methods allowed the library to be safely expanded, without breaking compatibility, restricting the implementation, or forcing developers to be tightly coupled to any particular implementation.
Wow, declaration-site variance for Java? That would be *very significant* to say the least.
Yeah. Like... Assembler?
Looks like it did well on this benchmark: http://www.techempower.com/benchmarks/#section=data-r9&amp;hw=peak&amp;test=json would like to try if for a development server.. 
&gt; But the modern Java developer uses Gradle Huh? 
I struggled to read that, and I couldn't correctly render the html, I guess maybe it isn't well-formed, so for your convenience here's a hopefully-more-readable paste: &gt; **Improved variance for generic classes and interfaces** &gt; &gt; Title: Improved variance for generic classes and interfaces &gt; Author: Daniel Smith &gt; Organization: Oracle &gt; Created: 2014/03/31 &gt; Type: Feature &gt; State: Draft &gt; Exposure: Open &gt; Component: core/lang &gt; Scope: SE &gt; JSR: TBD &gt; Discussion: compiler dash dev at openjdk dot java dot net &gt; Start: 2014/Q2 &gt; Effort: L &gt; Duration: L &gt; Template: 1.0 &gt; &gt; **Summary** &gt; &gt; Enhance the Java Programming Language so that generic class and interface declarations can indicate whether each type parameter is invariant, convariant, or contravariant. The type system then interprets this metadata by supporting more flexible and intuitive widening reference conversions between different parameterizations of the class or interface (e.g., an Iterator&lt;String&gt; can be assigned to the type Iterator&lt;CharSequence&gt;). &gt; &gt; **Goals** &gt; &gt; The new language feature encompasses the following: &gt; &gt; New syntax (such as a symbol, modifier, or annotation) to indicate when a class type parameter is covariant or contravariant. &gt; Checking of class declarations to ensure consistent use of each covariant or contravariant type parameter; parameterizations of the class are possibly also checked for consistent use of wildcards. &gt; Type checking that allows a type like C&lt;Foo&gt; to be widened to C&lt;Bar&gt; iff one of the following are true: i) the corresponding type parameter is invariant and Foo is equal to Bar; ii) the corresponding type parameter is covariant and Foo is a subtype of Bar; or iii) the corresponding type parameter is contravariant and Foo is a supertype of Bar. &gt; Encoding the variance of type parameters in the class file. &gt; &gt; (A note on terminology: for simplicity, throughout this JEP, the term class also refers to interfaces.) &gt; &gt; In a first phase, the following artifacts will be produced: &gt; &gt; An enhanced version of the javac compiler. &gt; Other OpenJDK tools and APIs with minor enhancements, as necessary (reflection, javadoc, pack200, etc.) &gt; Specification: proposed changes to the Java Language Specification, along with any necessary supporting changes to the Java Virtual Machine Specification and/or standardized reflection APIs. &gt; Documentation describing any source compatibility risks for changes to previously-published classes. &gt; &gt; After the first phase, we will reevaluate whether the proposed feature is in accordance with initial expectations, and if so, proceed to a second phase, formally changing the language via the Java Community Process. This will involve i) making adjustments to the behavior of the first milestone as proposed by the consensus of an Expert Group, and ii) producing compilance tests (for the JCK-compiler suite). &gt; &gt; **Non-Goals** &gt; &gt; Any changes to the standard libraries in order to take advantage of the language enhancement would be performed under a separate JEP. &gt; &gt; A language might be designed to infer the variance of type parameters, rather than requiring explicit syntax &lt;a href="#1"&gt;[1]&lt;/a&gt;. Such analysis is outside the scope of this JEP. &gt; &gt; Changes to the behavior of existing code—such as improvements to or simplifications of the behavior of existing wildcards—are outside the scope of this JEP. &gt; &gt; **Motivation** &gt; &gt; Certain class type parameters are used by the class declaration in such a way that they are inherently variant: for example, the type Iterator&lt;Number&gt; has no more functionality than the type Iterator&lt;? extends Number&gt;, both of which can be used to read Numbers; similarly, Predicate&lt;String&gt; has no more functionality than Predicate&lt;? super String&gt;, both of which can be used to test a String. Since invariant uses of these type arguments are less flexible than their wildcard equivalents, while providing no extra power, a reasonable practice is to always use a wildcard when mentioning the type. This strategy maximizes both flexibility and power. &gt; &gt; But there are problems: &gt; &gt; Everyone has to cooperate. If a library needlessly expects a Predicate&lt;String&gt;, and you've got a Predicate&lt;? super String&gt;, you have to do an unchecked cast or allocate a new object. &gt; The practice is mechanical and verbose. Computers are good at mechanical transformations; people are not. And programmers reasonably push back when the "right" way to use a type requires a lot more characters and obfuscates intent. (For example, Function&lt;Iterator&lt;S&gt;, Predicate&lt;T&gt;&gt; expands to Function&lt;? super Iterator&lt;? extends S&gt;, ? extends Predicate&lt;? super T&gt;&gt;.) &gt; Error messages are harder to decipher. Wildcards and capture variables add a significant degree of complexity to error messages. If a programmer doesn't absolutely need to support variance, she might prefer to live in an invariant world just so that she doesn't have to figure out the error messages. &gt; &gt; The solution is to shift this burden from programmers to compilers, allowing a class or interface type parameter to be declared covariant or contravariant. &gt; &gt; interface Predicate&lt;? super T&gt; { &gt; boolean test(T arg); &gt; } &gt; &gt; &gt; Then, the compiler can automatically treat every use of the type—e.g., Predicate&lt;String&gt;—as if it had wildcards—Predicate&lt;? super String&gt;. Clients get the benefit of more flexible types without having to do anything. &gt; &gt; A 2011 PLDI paper &lt;a href="#1"&gt;[1]&lt;/a&gt; performed an analysis of some open-source Java libraries that make use of generics, including the Java core libraries, Guava, and Apache Commons. Findings: &gt; &gt; At least 27% of generic classes and 53% of generic interfaces in the examined libraries have an inherently variant type parameter. &gt; Inherently contravariant type parameters are almost as common as inherently covariant type parameters. &gt; At least 39% of wildcard uses in these libraries could be made unnecessary with declaration-site variance. &gt; &gt; Presumably a large number of clients of these libraries would benefit from both a reduced need for wildcards and increased flexibility in their types (the paper does not examine library clients). contd...
&gt; **Description** &gt; &gt; Details of the four components of the feature, as listed in "Goals": &gt; &gt; Type parameter syntax. The strawman syntax is to use ? extends T in the declaration of T in order to indicate that it is covariant; ? super T indicates that T is contravariant. Thus, the Function interface might be declared as: &gt; &gt; &gt; interface Function&lt;? super T, ? extends R&gt; { &gt; R apply(T arg); &gt; } &gt; &gt; &gt; We may also consider some other syntax. Other languages use symbols (interface Function&lt;-T,+R&gt; { ... }) or keywords (interface Function&lt;in T, out R&gt; { ... }). &gt; &gt; Well-formedness checking. A variant type parameter should only be used in certain contexts that support its variance. For example, if the type of a method's parameter is a type variable T, then T should be invariant or contravariant—not covariant. For more complex types, the analysis recurs: if the type of a method's parameter is Predicate&lt;T&gt;, then T should be invariant or covariant. The rules governing appropriate usage of type variables must be developed and implemented for every context in which a type variable can appear. &gt; &gt; At the use site, a mismatch between the variance of a type parameter and the variance of a wildcard should also be avoided—Iterator&lt;? super String&gt;, for example, is nonsensical. (We must take some care here, however, because such types—though useless—may exist in the wild, raising migration compatibility concerns.) &gt; &gt; It is possible to define type-checking behavior without strictly enforcing these well-formedness rules, and there is some flexibility in their design. But being more permissive about well-formedness generally leads to unintuitive behavior at the use site. &gt; &gt; Type checking. Two strategies may be used to specify and implement widening of reference types, consistent with the declared variance of type parameters. &gt; &gt; &gt; Enhanced subtyping: When subtyping encounters two parameterizations of the same class type, it performs a pairwise comparison of the type arguments using type argument containment. The intuition is that a wildcard can "contain" a range of types, while a type can only "contain" itself. By enhancing this relation, we might allow one type to "contain" another if the corresponding type parameter is variant and an appropriate subtyping relationship holds between the two types. &gt; &gt; With this approach, it might also be useful to define type equality such that a wildcard-parameterized type is considered the same as that type with the wildcards removed. &gt; Implicit wildcards: Rather than making changes to subtyping, we preprocess the source code so that types like Function&lt;String, Number&gt; are implicitly expanded to Function&lt;? super String, ? extends Number&gt;. This expansion occurs at most use sites of a type (in a few contexts—like class instance creation—wildcards do not make sense, so the expansion does not occur there). &gt; &gt; &gt; There are advantages and disadvantages to each approach. Enhanced subtyping is more direct and more closely aligned with users' intuition, while implicit wildcards is more flexible, placing fewer constraints on the well-formedness rules. In principle, they are likely equivalent, and if desired it might be possible for the specification and implementation to use different approaches. &gt; &gt; Note that many other aspects of type checking are orthogonal to this feature. For example: raw types continue to behave as currently specified; "diamond" class instance creation expressions use the same inference algorithm as before; generic array creation is still prohibited. &gt; &gt; Class file changes. To allow separate compilation, variance of type parameters must be encoded in the class file. There are a variety of possible approaches, including modifying the Signature attribute, introducing a new attribute, or piggybacking on an existing mechanism (like RuntimeVisibleTypeAnnotations). &gt; &gt; Reflection APIs should probably understand this encoding and directly expose it to clients (e.g., a TypeParameter.getVariance method). &gt; &gt; **Alternatives** &gt; &gt; The existing alternative in the Java language is use-site variance (wildcards). This is a useful feature, but has its limitations, as noted in the "Motivation" section. &gt; &gt; There are good reasons for both use-site and declaration-site variance in a language; they are complementary &lt;a href="#1"&gt;[1]&lt;/a&gt; &lt;a href="#2"&gt;[2]&lt;/a&gt;. Use-site gives users flexibility to tailor a type (like List) to their particular needs, while declaration-site relieves users of a clerical burden when there is only one reasonable variant usage of a type (like Iterator). &gt; &gt; There are various ways in which the scope of the feature could be limited, although the problem is so general that these limited approaches seem inadequate: &gt; &gt; &gt; The language could give special treatment to certain known classes or interfaces in the standard library, thus avoiding a need for declaration-site syntax and checking. &gt; The feature could be allowed only in interfaces, or could otherwise be restricted to certain simple contexts, avoiding some extra work for well-formedness-checking—e.g., checking fields and method body declarations. &gt; &gt; &gt; **Testing** &gt; &gt; As a proposed language change, the enhancement should be accompanied by new JCK-compiler tests. &gt; &gt; Behavior of existing compiler tests will be unchanged. &gt; &gt; **Risks and Assumptions** &gt; &gt; &gt; Language enhancements are ultimately subject to the Java Community Process; this may influence the scope or design of the feature. &gt; To be successful, the feature must be designed to allow migration of existing classes, both in the Java Class Library and in users' code. While we have reasonable confidence that this will be possible with very little source incompatibility, there is a risk that this will turn out not to be the case. (Note that any change to method invocation compatibility is likely to cause subtle changes in overload resolution and type inference behavior, but these are typically harmless in real code.) &gt; The theoretical underpinnings of subtyping in the Java language are somewhat unstable; anything that perturbs this space carries a degree of risk that it will exacerbate the problem. Given that there is a straightforward mapping from a subtyping model with declaration-site variance to one with only use-site variance, however, this feature does not seem to introduce any new theoretical problems. &gt; If the implicit wildcards implementation strategy is used and a number of common classes are enhanced, we risk overwhelming users with error messages involving wildcards. It is possible that these messages could be simplified, but further exploration would be necessary. &gt; &gt; &gt; **Dependencies** &gt; &gt; It would be disappointing for users if this feature were delivered without accompanying changes to existing classes in the Java Class Library. These library changes will need to be handled in a subsequent JEP. &gt; &gt; **Impact** &gt; &gt; &gt; Other JDK components: Minor changes may be necessary for java.lang.reflect, javax.lang.model, javadoc, javap, pack200, and ASM. This is mostly to correctly process/expose the variance of type parameters, as encoded in class files. &gt; Compatibility: Fully compatible with existing sources and binaries—the feature is irrelevant to code that does not use it. &gt; Performance/scalability: We will experiment with javac compilation time, but it seems unlikely that there would be a significant impact. &gt; Documentation: Language documentation and tutorials should explain and encourage use of the new feature. &gt; Specification: Language changes will require proposing changes to JLS; minor class file format changes may also be proposed for JVMS. &gt; TCK: New JCK-compiler tests will be necessary. &gt; &gt; &gt; **References** &gt; &gt; [1] John Altidor, Shan Shan Huang, &amp; Yannis Smaragdakis. Taming the Wildcards: Combining Definition- and Use-Site Variance. &lt;a href="https://people.cs.umass.edu/~jaltidor/variance_pldi11.pdf"&gt;https://people.cs.umass.edu/~jaltidor/variance_pldi11.pdf&lt;/a&gt;. &gt; &gt; [2] Ross Tate. Mixed-Site Variance. &lt;a href="http://www.cs.cornell.edu/~ross/publications/mixedsite/mixedsite-tate-fool13.pdf"&gt;http://www.cs.cornell.edu/~ross/publications/mixedsite/mixedsite-tate-fool13.pdf&lt;/a&gt;.
What do you prefer?
Aw I see what you mean. Having used both I agree with the author that gradle is the future, but you are right it's definitely not here yet.
$^%$$#!@@# Why do people write webpages with dark grey on light grey? It is so hard to read. I really HATE it. I have to put this script into a bookmark and then click on it: javascript:(function(){var%20newSS,%20styles='*%20{%20background:%20black%20!%20important;%20color:%20yellow%20!important%20}%20:link,%20:link%20*%20{%20color:%20#00EEFF%20!important%20}%20:visited,%20:visited%20*%20{%20color:%20#66FF66%20!important%20}';%20if(document.createStyleSheet)%20{%20document.createStyleSheet(%22javascript:'%22+styles+%22'%22);%20}%20else%20{%20newSS=document.createElement('link');%20newSS.rel='stylesheet';%20newSS.href='data:text/css,'+escape(styles);%20document.getElementsByTagName(%22head%22)[0].appendChild(newSS);%20}%20})();
but this looks a bit too garish. Need to tweak the colours.
Well, the article does claim to be opinionated! FWIW, my preferred build mechanism is 'make', though when I use NetBeans I just use its default (ant, I believe).
&gt; Well, the article does claim to be opinionated! fair enough &gt; FWIW, my preferred build mechanism is 'make', though when I use NetBeans I just use its default (ant, I believe). ouch. well as long as it works... and you don't spend time maintaining it or fixing problems.... who cares, right? 
Yeah, it works well enough for me. Mostly it's just for side/personal or throwaway projects, I do very little 'real' Java development.
Link please?
I feel like the article lacked...content?
I'm surprised they didn't mention optimizing the pool size. This is a very significant optimization that has to be taken into account always.
https://github.com/qos-ch/logback
I agree that gradle presents a compelling alternative to maven but the fact is most of the open source community is still using maven. in my opinion the tooling for maven is more robust as well... at least from what ive seen
&gt; Not to say it's bad, just challenging the assertion that "the modern Java developer uses Gradle" Well in defense of the assertion both Spring and Hibernate have switched to using Gradle. 
I know that but it's hardly very widespread
Whenever they're both grey or not, the background and text grey have a high enough contrast between them. Not to mention that it looks pleasant. Compared to that, yellow on black feels disgusting.
I'm betting whoever downvoted you doesn't actually develop in Java, and certainly hasn't developed in JME.
What stops this being an optimisation that occurs at the jvm level?
You are totally right, but I wanted to go over the basics first and focus in the development and not the configuration. I might write another post to include these sort of things.
object identity &amp; monitors
Yes, but there must be places where it can be statically determined that an (appropriately structured) object's identity is never used and a value can be substituted instead.
I understand that Undertow is used in WildFly. Has anyone embedded it in a servlet spec app? Based on the footprint and performance seems like it would be a good option.
They wrote something along the lines of (I would quote but on mobile) 'finality of an object can't be guaranteed enough for this kind of optimization'. Edit, laziness lost this round: &gt; Despite significant attempts, JVMs are still poor at figuring out whether an object’s identity is significant to the program, and so must pessimistically support identity for many objects that don’t need it. Its near the top
For small temporary objects it works sometimes, if the compiler can trace all the paths of object creation to it's death. This optimization doesn't work across method boundaries so you often need to be lucky that the right methods are inlined. For arrays there is no solution.
This is the very first thing addressed in the proposal... &gt; Despite significant attempts, JVMs are still poor at figuring out whether an object’s identity is significant to the program, and so must pessimistically support identity for many objects that don’t need it. Read the section titled "Background."
This is probably the most important part for me. &gt; Generics over values. It is persistent irritant that generics do not work over primitive types today. With value types, this irritation will increase dramatically; not being able to describe List&lt;Point&gt; would be even worse. Still worse would be having it mean “today’s list, containing boxed points”. Supporting generics over primitives and values, through specialization, is the topic of a separate investigation. I love using the type system to enforce good code as much as possible. Part of this is the use of generics.
[Themable Widget Library](http://twl.l33tlabs.org/) [Nifty GUI](http://nifty-gui.lessvoid.com/) Either of these might be of use to you.
It may be relevant for someone. Why did you leave a rude comment?
Look at the up/downvote ratio: 2:7. This article is clearly disliked, and its not relevant. Who is looking up language features from java 7 now that 8 has been released? Its just useless
The whole point of the ratio is that it means what people think, and why would a beginner start at a bad article about an old version of the language?
I've used serialization before, but the goal here is strictly to save it to a text file. 
Can anyone ELI5? Is this basically an embedded JVM?
I've read that this is also affecting Struts 1.x, any idea how to reproduce the exploit? I am being asked to patch this up, and need to find a way to demonstrate the exploit for ourselves, if possible.
I think just to call it a groovy reimplementation of Ant is a bit unfair, but I find it hard to disagree with your points. Those of us who worked backed when Ant was the only real tool remember the pain. Time will tell. The great things about maven aren't its inherent power and flexibility, its the platform it brings to the table. Just like how the simplicity of the Java language is a strong point in some ways, and the JVM and the Java ecosystem is more important than the Java language itself.
Interesting - glad to see they've moved away from Tomcat ("jbossweb")
I'm on mobile, but these jump out of the screen to me: Line18: ArrayList does not have the put method. Line32: You will get ConcurrentModificationException there because calback can modiy the list (in line 18) while iterating Line38: runningAverages might contain elements from the previous run() execution. I don't think that's what you want. It will happen when values.size() == 0 (key won't be replaced) Edit: to reply your actual question: you'll need a better algorithm to avoid losing values in the list you store in this keys map. The easiest thing to do is synchronize your methods; second is to make the callback wait until your run() method calls notify to tell it's good to keep adding stuff there; third maybe is to have a new structure to hold these values produced by callback after each run() method and manage that with a queue of some sort; 
class Blah&lt;T&gt; { T instance = new T(); } Why can't we have that? Type erasure, I know, but... Why?
At a guess, "Because we don't know what T is in order to call its constructor." Also, there's a chance that T doesn't have a zero-arg constructor, which would be bad. 
Realistically, if you don't know Java yet, you very probably won't learn it until Monday. And there's no way you'll reach RIA/JavaEE levels until then. My advice: enjoy the weekend, clear your head, and wait until Monday and see what it will bring. If you absolutely want to try and get a head start in these few days, start with a basic Java tutorial. There's many sources for this in threads and the wikis in the "learning" subreddits, e.g. /r/learnjava, /r/learnprogramming or /r/javahelp.
"legacy platform"?
Also, there's a chance that T is not even a class but an interface.
That was true in the Sun days, but Oracle has actually been very active in development. It's progressing faster than it ever has before.
+1. There's absolutely nothing wrong with the modern Java EE stack, JSF, JPA, JAX-RS and CDI will get you extremely far. Want to make a boring business app, shopping cart, whatever? JSF+CDI+JPA is right there. Want to make a shiny Angular.js app? Maybe you want a mobile app too? Throw JAX-RS in and put a REST API up for your app. I really wish people would get rid of the notion that we still like in the Java EE 5 days, which were notably bad. The horrors of classic EJB and pre-CDI JSF are behind us.
get these 2 books and get through as much of it as you can in the first month, you won't regret it. http://www.headfirstlabs.com/books/hfjava/ http://www.headfirstlabs.com/books/hfsvlt/
Right. And for 4 of those years, Java was controlled by Sun. Which is exactly was I was saying. In the 3 years since Oracle has been steward, we have seen 2 major releases (7 and 8). Oracle is progressing Java faster than it has ever gone before. It takes a while to catch up when you're coming off a 10 year stagnation. But it's not the same as it used to be.
when i first started, i created a calculator that could add, subtract, multiply and divide and could use exponents. this helped me with math in java
Instead of using a ConcurrentHashMap to contain the collection of integers for each key, you could use a BlockingQueue instead. Store both the key and the integer in the queue then have your scheduled thread wake up, drain the queue and then run the aggregation and map population then. 
Yes, but that's why compilers are there for. C++ has it since, I guess, 30 years ago. It has never been a problem. It could be argued that a library with a class with such construct will not "compile" when you create an instance of T. But then again, people use reflection and make this happen anyway. The difference being it is messy, less type safe, and the end result is the same.
I'm a big fan of the [100 pushups challenge](http://hundredpushups.com/). It's basically just a set of guidelines and simple fitness regiment, but perhaps you could create an application to help people track their progress? 
Didn't you hear? Java is a dead language. No one has actively developed with it for generations. Some say on nights with a full moon you can still hear the baying of the wild JVM, prowling in the distance, but that's just an old dev's tale.
It is known. 
GUI-ize that shit. Now you got yourself a project that will make you learn Java.
I just don't understand the need for primitive types. Java's autoboxing causes many strange bugs. *: posing the question got me interested in why Java has primitives. It's for efficiency. Creating boxed objects is slower, so in large loops this can add up. https://stackoverflow.com/questions/5199359/why-do-people-still-use-primitive-types-in-java
I had 5 job interviews in the last two weeks due to my Java skills. Many of my friends cant get anything. 
I was helping this redditor the other day and they had a neat project that seems like it would help you learn. You have a 2 dimensional array. In the 1st and last row, 1st and last column is water, mark that with an 'X'. In the 2nd row to the second of last row, 2nd column to the second of last column is land. Mark that with a '-'. Now, randomly put 4 bridges (mark this with a '#') over the water. Then randomly put a mouse (mark this with a 'M') somewhere on land. Next, make the mouse move, up/down/left/right one "cell" at a time. Do this until 1 of 3 events happen: the mouse reaches 100 moves, the mouse falls into water, or the mouse reaches a bridge. Do this 10 times, 100 times, 1000 times, count how many deaths (falls into the water), starvation (100+ moves), freedom (reaches a bridge). Show all moves of the mouse at the end of each run. Example of 2d array: XXXXX#XXXXXX X-----------------X X-----------------# X-----------------X X-----------------X X-------M--------# X-----------------X X-----------------X XXXXXXXX#XXX **BONUS** Do this with Java 2D. Here is a [screen shot](http://i.imgur.com/zYw7dPC.png) of what the 2D would look like at the start.
I'd like to know more about why you love it. I'm a programming language geek, and I tend to be skeptical about Java jobs, but I'm curious about other perspectives. E: How cute, downvotes. I wouldn't usually mind but since my net total of votes on this sub is a negative number, my posting is being rate-limited. Please give me the chance to participate, I promise I'm not trolling.
Never seen a [meme](http://www.quickmeme.com/meme/3toryi) be so relevant. 
Java.util. Honestly one of the best libraries I've ever used, and in java you use it a lot.
I'm not as familiar with those libraries as I am with java.util. However one example was I had a list being edited from multiple threads. Having entirely ignored this fact, I was getting strange results. Looked in util.concurrent and found ConcurrentLinkedQueue, simply change my list to a ConcurrentLinkedQueue, and everything worked perfectly. Or if I want a random number in a range without skewing the randomness with modulus function. util.random, has a nextInt(). Do those languages you mention have a library that is such a swiss army knife? Having completed a few projects in python, I actually prefer python to java, however a lot of python code I've encountered is impossible to read. Lots of people with no functional experience becoming infatuated with it, and abusing it, also pythons list comprehensions look terrible compared to haskells. Haskell is a little bit too complicated for most devs to use in production.
How does modulus functions skew randomness? Also, .NET has concurrent data structures like Java, Haskell has software transactional memory, and Python's concurrency story is dismal. In general, I would say that .NET has feature-parity with Java (plus or minus a few small things), but the .NET interface is much more intuitive. Many non-JVM languages have wide and useful standard libraries, so I find `java.util` to be a weird thing to get excited about. &gt;Haskell is a little bit too complicated for most devs to use in production. I do agree. My main workhorse language is F#, which hits all the sweet spots for me. Haskell is interesting for many reasons, but it's not a widespread or easy to learn language.
Yes I agree with you. It would be a good idea to do some Java tutorials before Monday and make my way up to RIA level later on. Thanks for the subreddit links
I will definitely look into these books. Thanks
Guice does this with TypeLiteral: http://google-guice.googlecode.com/svn/trunk/javadoc/com/google/inject/TypeLiteral.html A little more verbose but at least it's possible to preserve type info in the runtime.
rand() % n doesn't always produce a uniform distribution, [more detail](https://stackoverflow.com/questions/2509679/how-to-generate-a-random-number-from-within-a-range). I've only done large projects on the .net side in vb. I found the libraries to be very scattered, always having many ways to do the same thing. Take type casting/conversions, in java its just (type) for a cast, and Type.toWhatever() to convert. In vb casting is some strange syntax like Cdbl, and Cint, and there's this Convert class that acts as some utility class for converting. It's much more object oriented to have the object know how to convert itself. Or the multiple ternary statements, IF vs Iff. And why is the default constructor New() instead of the name of the class... I found C# to be a very nice language coming from java, with LINQ (before java8), I could actually see myself going that direction. Except for the fact that it's a microsoft language, so there aren't any good IDEs other than visual studio (which is amazing), and as an hardcore linux user, I can't really see myself giving up Netbeans and intellij for Mono. F# also peaks my interest, but for the same reasons as c#, i doubt I'll have the opportunity to learn it. Haskell is great, it's my career goal to write something of substance in it. It's so easy to reason about your program in a purely functional language.
&gt; I would say that .NET has feature-parity with Java (plus or minus a few small things) I haven't done any serious .NET stuff in a while, but I wouldn't say that. I have a lot more options in Java SE for picking the right data structure for the job then I've found in .NET, or at the least- its much easier to find what I need. I've also found .NET itself to be very poor in a number of areas. Low overhead profiling was a pain, no hot swapping code while debugging was a pain, Porting one of my projects over to .NET incurred a 5x performance penalty, its just been a bad all around experience. There are a *lot* of C#features that I really want in Java (particularly the compiler as a service), but .NET as a whole just hasn't worked for me in past projects. 
Java is the language everybody complains about because we use it regularly. It sometimes implements features in backwards ways because of decisions made 15 years earlier. There's still a great love of XML amongst frameworks (though that's dying for all but some kinds of object serialization, server-to-server communication where validation is important, and other things of that nature), and a culture of overengineering. But a lot of what people trash Java for were problems in 1.4 and 1.5. 
Who isn't? That was a blown call, not just re-writing container classes from scratch in their own lib and deprecating the ones in java.util. 
a variation of what you're describing is one of my favorite interview questions :)
i still hate checked exceptions... but yeah. 
I hope this turns out to be awesome, I'll take a look. 
Interesting, but does it implement JAX-RS 1.0/ 1.1/ 2.0? If I remember correctly, RESTlet is another framework for developers to implement RESTful APIs, but it doesn't implement JAX-RS so I didn't use it (I'm now Jersey user).
Give me simple objects on the stack and I am all for removing primitives.
you mean C#? C# was just microsofts attempt at Java 2.0 when they couldnt write their own jvm.
Job searching around Minneapolis, tons of java positions.
"Legacy software is software that works" -- former SAP CEO (whatshisname?)
Hear hear. Java has a culture of mediocrity*. Don't blaze trails. Don't be clever until all other options are exhausted. Do what works. Don't obsess on things. Done beats perfect. Don't be the lone rockstar. Be the friendly team member. Get a good job. Do a good job. Go home happy. * in a good way
1.6?? What year is this?
Why would people choose Open JDK instead of the regular sun/oracle version? Genuinely curious about what circumstances would cause the selection. 
Probably mostly for irrational Oracle hate.
Easier to install? yum install openjdk apt-get install openjdk or whatever the package is. Compare this to going to oracle's site, agreeing to some "click me" license, then downloading 10s of megs to your local machine, then reuploading to a remote server. Quite the PITA. I know there are some workarounds, but they're sometimes hard to find, and ime don't always work. IIRC it was moderately straightforward to use lynx to grab it a few years back, but the last couple times I tried it it didn't work.
The older free versions of Oracle JDK 6 contain lots of known security vulnerabilities.
Is there a non-free oracle JDK?
Upgrading takes some level of investment commitment from the business. We'll get there soon. Meantime, we're hanging with the 15% of the market still on Java 6. http://blog.jelastic.com/2014/04/03/software-stacks-market-share-march-2014/
In our case, we built our business on Amazon EC2. Amazon provides OpenJDK out of the box in Amazon Linux and provides support for it. 
Yes, public updates for Oracle JDK 6 ended in February 2013 and [you now have to pay for updates](http://www.oracle.com/technetwork/java/eol-135779.html): &gt; Customers seeking longer standard support and maintenance periods for each major release are encouraged to migrate to the Oracle Java SE commercial offerings
Ah right... That makes sense. I remember that being announced and hoping they would not impose the commercial plan on newest versions
Which topics would you like to be covered? I can try to cover them in a next post. Thank you.
Thanks :) I've only added a button so far, thinking of other components to add, so this helps :)
&gt; rand() % n doesn't always produce a uniform distribution, more detail. A bit C/C++ centric however [rand considered harmful](http://channel9.msdn.com/Events/GoingNative/2013/rand-Considered-Harmful) is still quite informative on the problems with using random number generators correctly. 
I mean .NET, thank you very much. It's more than C# - F# also runs on it, as do Nemerle and a few others.
I think in terms of specific sizing it depends on the layout of the panel. Most do the layout for you. I would ask on the oracle forum as there's a lot more activity on there. https://community.oracle.com/community/developer/english/java/javafx/javafx_2.0_and_later
In terms of language features I'm loving lamdas and in particular the new stream API added to collections. What's been lacking I think in terms of news/blog coverage is new JVM features like compact profiles. Maybe a sign of things to come with project jigsaw.
Could just be preference toward using open source when available. OpenJDK and Oracle JDK share most of the same codebase anyway.
Maybe you could create a program that pulls tweets from the twitter API and extract the geologation data from them, so you can use the gmaps API and plot them.
http://scn.sap.com/community/java/blog/2009/12/04/performance-improvements-in-nw-java-applications-with-xml-processing
[Twitter4J](http://twitter4j.org/en/index.html) is the prevailing API. I used [this](http://www.winterwell.com/software/jtwitter.php) one a few years ago. It had its flaws, but it has been upgraded a lot. Daniel Winterstein &lt;daniel.winterstein@gmail.com&gt; is easy to email and talk to about an issue you have with the API. 
Do you have a link by chance?
If you could score an update and let us know what project type you chose, that would be great.
Yes, that post is linked from the JIRA issue as well
switching to javafx 8 (i was on 2.2) fixed this problem. The others remain!
I would agree with the Graph data stucture. Here is [one](http://introcs.cs.princeton.edu/java/45graph/) and [another](http://jgrapht.org/). The latter has been moved a few times, although it seems stable. The link I gave you should do you fine with a link to download the linux/windows version of the API.
&gt; The joys of java I suppose The joys of programming, don't just blame Java (of course it is the developer's fault, just doesn't want to admit to it).
Project Euler helps you with your logic skills (any language, really). I really suggest it because it helps you optimize code, code efficiently and think about what problems you're trying to solve. 
I suggest you look for more help in /r/learnprogramming rather than here, but I'll do my best while I'm here. Apple has said that they will not allow a Java VM running on their mobile devices, and has generally been against the whole idea of Java for a very long time. But wait, there has to be some way, right? Mono C# can run on iOS, why not java? Well Mono C# (done by Xamarin) has the entire VM built into each app, so you get huge file sizes and that can be a real drawback on both iOS and Android (smaller is better on mobile). "Is there a similar project for Java?" I suggest you look at LibGDX which uses an early build of RoboVM (or maybe now some Xamarin project) to compile Java down to native machine code rather than Java Bytecode. So yes, you CAN port your java game to iOS however controls are going to be the least of your issues. What are you using for graphics? If it's not OpenGL or LibGDX you're going to have to reimplement most of your graphics and probably deal with common hurdles such as texture loading, drawing text and getting proper transformations with matricies. It sounds like a lot because it probably will be, but it's a good learning experience. LibGDX can take care a lot for you, but you never know when it's base functions could be lacking. Maybe some of this won't be an issue if you're using LibGDX now, or maybe it's in LWJGL with OpenGL but I don't know so I can't say how much of a pain it will be to rework it for mobile. OH other big issue: you'll need a Mac. Very few ways around that one. https://code.google.com/p/libgdx/wiki/IOSWIP Turns out you may also need some sort of Xamarin license as well but you will need an apple computer to build for iPhone/iPad. You may be better off trying to build for Android instead because that won't cost you a dime and you can always test in an emulator. LibGDX can build for Android too. Again, x-post this (with more detail) over to /r/learnprogramming and they can probably give you some better help there. If there's anything I said that isn't clear just ask me to clarify. Best of luck!
oh my mistake
Would this be worth switching to over the JDBC driver's existing load balancing capability? (e.g jdbc:mysql:loadbalance://db01,db02/database)
And so begins the abuse of the abuse of the default keyword. Interfaces should define a contract, not implementation (e.g., default behavior). Doing this just mixes things that should not be mixed and will result in harder to read and maintain code.
Wow, you're just about the only person I've ever seen that WANTS the Ask toolbar to appear, usually people get rid of it by default :P You can [download it here](http://apnstatic.ask.com/static/toolbar/everest/download/index.html)
I had hoped my post smelled of thick sarcasm...
I laughed.
Same as why the `default` keyword is required: because most Java developers are still irrationally scared of multiple inheritance. If you don't like that, use Scala, which has far fewer restrictions on what traits can do.
I got the joke.
Damnit, I thought this was posted into /r/techsupport or something, you bastard! :P
You should post your question at ask.com
It's probably already installed. Check [your Internet Explorer](http://faildesk.net/wp-content/uploads/2011/05/Too_many_toolbars-1024x837.jpg)
&gt; If you don't like that, use Scala, which has far fewer restrictions on what traits can do. Even if I do not fully agree with the English language's punctuation rules, e.g. when it comes to setting (or not) a comma before "which", I don't just switch to Chinese which can largely do without punctuation. In other words, I suspect that from a broader perspective, seeing a bigger picture, people don't just switch languages, platforms and complete programming environments, setups, tool-chains, maintenance processes, operations implications, etc, just because we do or do not have a `default` keyword.
Scala is a JVM language with strong Java interoperability. You don't have to throw away everything else to use it.
And I thought, this was aimed at /r/ProgrammerHumor !
I spent way too much time on that subreddit just then and now I can't see the colour blue.
You could just wait a few minutes and Java will need to update again.
*^dude, ^that's ^the ^point*
Depends of the DB probably. No way would this beat Oracle. I'm dubious it would beat mysql.
/** * @sarcasm */
Something like "Java: The Good Parts"? I have NOT read it, but generally trust the O'Reilly brand.
It does use the 2D graphics libraries that come with java. And it uses swing listeners.
...asked nobody. ;D
 #IFDEF SARCASTIC ... #ENDIF 
Effective Java
This is like sleeping with her again because you didnt get an STD the first time...
"Final" means "cannot be overridden". " abstract" means "must be overridden". You can't therefore have an abstract final method. An interface is effectively a completely abstract base class. Its methods are automatically abstract. Therefore, by the same logic, none of them can be final. It's nothing to do with Java 8. If it's allowed in any version, I'd be surprised. If it's only in 8 it's because a meaningless construct loophole has been closed that should always have been closed.
but with the introduction of default interface methods, default methods cannot be marked abstract, so (by that argument) final is back in play. beltorak @ kryos [~/tmp/as] $ cat As.java | sed -e 's/\t/ /g' public interface As { default public void method() { } abstract public void abs(); default abstract public void bestOfBothWorlds() { } } beltorak @ kryos [~/tmp/as] $ javac -version javac 1.8.0 beltorak @ kryos [~/tmp/as] $ javac As.java As.java:9: error: illegal combination of modifiers: abstract and default default abstract public void bestOfBothWorlds() { ^ 1 error 
Ah, the good ol' @sarcasm. /** * @sarcasm */
The problem is that Java uses interface as a way around C++'s multiple inheritance problem. Because interface is guaranteed 100% abstract, the multiple inheritance problem goes away -- you can inherit from as many interfaces as you wish. Once an interface isn't 100% abstract (and default does exactly that), then multiple inheritance is back as a nightmare. So much so that you might argue that the whole reason for having "interface" separate from "class" is completely mitigated. &gt; default methods cannot be marked abstract This is exactly the problem -- what's an interface if not all abstract methods?
Provided you have RES.
Just a note to add: compiling example 3 in Java 8 will yield the following message: Testing.java:8: warning: Unsafe is internal proprietary API and may be removed in a future release Unsafe unsafe = (Unsafe) field.get(null); Here is compilable source code (under JDK 8) for that example: import java.lang.reflect.*; import sun.misc.Unsafe; public class Testing { public static void main (String[] args) throws Exception { Field field = Unsafe.class.getDeclaredField("theUnsafe"); field.setAccessible(true); Unsafe unsafe = (Unsafe) field.get(null); java.sql.Date date = (java.sql.Date) unsafe.allocateInstance(java.sql.Date.class); System.out.println(date); } } I think this is because of the planned modularization of the platform under [Project Jigsaw](http://openjdk.java.net/projects/jigsaw/). 
Actually, that turns out to be one of the worst O'Reilly books ever. I've read it, and - aside from being outdated - it was far from useful and accurate. I wish I had more concrete examples, but as a stranger on the internets, you should just trust me when I say this ;)
There is robovm as already mentioned. You can also convert java source to objective c via: https://github.com/google/j2objc which makes native usage a lot easier. Another cool idea would be to use JavaScript and use stuff like teavm, GWT or similar to make Java easily running in the browser: https://github.com/konsoletyper/teavm
Good answer! But I don't get what this question has to do with 'learnprogramming' :)
I should really delete the old wiki articles. The first thing on that wiki page is a link to the new wiki. LibGDX and RoboVM are in lockstep pretty much. So you always get the latest RoboVM version with libGDX. To date around 70 games have been released to iOS (we are a force on Android with thousands of games). You'll have to have a Mac and if you want to test on a device instead of just the simulator you have to pay 99$/year to Apple.
Effective Java for Java specifics. Head-first Design Patterns for general OO programming.
&gt; So much so that you might argue that the whole reason for having "interface" separate from "class" is completely mitigated. That is a valid argument, and it has surfaced lambda-dev time and again. But `default` methods were a necessary "evil" to provide API evolution in order to implement lambda expressions, the Streams API and other meaningful libraries enhancements. So your point is no longer valid. Java 8 is a game changer and the question is: Why was the game only changed to a certain extent? Is there a particular reason why `final` was not allowed (but `static` is)?
It's a much more active sub dedicated to helping people with programming questions which has a lot of smart people on it that are there solely to answer questions. There are smart helpful people everywhere, especially in /r/java, but /r/learnprogramming is where you can always find them.
I feel like you should broaden your search to language-agnostic OOP texts such as Head First Design Patterns and what not.
Why?
It's a good book, and a good reference guide.
I have gift for you OP :) [PDF] [Deitel P.J., Deitel H.M. - Java Programming 9th Edition](https://www.dropbox.com/s/ac5za5ccuu3j13l/Deitel%20P.J.%2C%20Deitel%20H.M.%20-%20Java%20How%20to%20Program%209th%20Edition.pdf) [ePub] [Prentice Hall Core Java Fundamentals I](https://www.dropbox.com/s/9zi6sxftt1mowlw/Prentice.Hall.Core.Java.Volume.I.Fundamentals.9th.Edition%5BA4%5D.epub) [ePub] [Prentice Hall Core Java Advanced II](https://www.dropbox.com/s/hagd9yc0mc9ymma/Prentice.Hall.Core.Java.Volume.II.Advanced.Features.9th.Edition%5BA4%5D.epub) 
Easier solution -- put a recording proxy between the machine running the browser and the web. Record what the applet actually does on the wire, and figure out how the calls are related to the parameters that are passed on the page. In all likelihood, there will be a simple relationship. That being said, please be responsible when scraping someone else's content.
No, the jarfile doesn't need to include the sources. Eclipse, and probably IntelliJ, can see the method signatures from the classfiles, you'd have to poke around at them yourself. If you're new to this, it'll be pretty difficult. Without documentation, you're essentially reverse-engineering this with only method signatures and trial-and-error to go by.
Have you tried contacting the website owners directly? It could be as simple as just asking for the original information before the lighting effects. 
From what I've noticed most people have a problem with Grid World. So make sure to know everything you can about those pesky animals and bugs. For me they weren't much of a problem. The test itself is pretty easy, so if your experienced in java you shouldn't have a problem with the questions. Source: Got a 5 on the test.
I must have a shit teacher if you could easily get a five on the test. Nobody in our school's history has gotten a 5 on that test.
The Art of Multiprocessor Programming is a great, highly praised book I'm reading for a class I'm taking now. It's a modern book that uses Java to teach concurrent programming, which is highly relevant in any large scale production software - if you want to get a job as a Java programmer, this will work wonders for you. This is the only course I've taken in Java and I got a job offer six weeks in, the recruiter was impressed when I name dropped the book. Even if you aren't in the job hunt, reading this book and tackling its concepts will greatly improve your understanding of the behavior and complexity of modern multi-core processors.
I took the test last year. My greatest issue was allotting my time during the test. If you cannot think of how to answer an open response, write down what you can, and give yourself some time to come back to it. Make sure you close all your parenthesis, etc. But yeah, I would say it wasn't hard.
Our schools comp sci teacher is very strict. I don't think she's had a single student not get a 5 on the AP test. Though things could change this year
Thinking in Java is fantastic, I read most of it straight through in leisure
Strict does not necessarily mean good. The score mostly reflects how much they prepared you for the test, i.e. how closely they taught to the test. Something like 50% of the students in my class got a 5, though this was also about a decade ago.
Yeah, last year it was a rather easy bug on Gridworld, and parsing a 2D array alternating which end of the row you start, nothing too hard I got a 5. Although make sure you know your Syntax, a lot of people I know are miserable at handwriting code as they rely on an IDE.
And very old. Way out of date. 
Some things really are just procedures - and should be written as such. The suggested OOP alternatives fail to improve clarity, readability or succinctness (if you take into account all required boilerplate, it's a resounding net loss). A utility method is compact (within one module), has no implicit state and is usually easy to test - just call it. The OOP version on the other hand has complex dependencies. Sure, IDEs can help, but it still requires the programmers to keep all this separate building blocks in their heads.
Learning Java 4/E which covers Java 7.
The third book of my "useful Java books trilogy" is "Java Concurrency in Practice". But read this one third. Concurrency is becoming a part of everyday programming, and this is THE book for it. 
Sometimes as part of my own Java editor code templates. 
don't worry about memorizing the code for sorting/searching algorithms, just know how they work, things like best case and all that Also look for different little trick questions like 10/3 being equal to 3, not a decimal value, because it is an int source: fellow AP taker :)
The world is not black and white. There is a good reason that major programming languages are a blend of OOP and FP. OOP is not the one-size-fits-all solution. Especially without traits or multiple inheritance the suggested pure OOP solution could be a pure pain.
http://www.jqno.nl/equalsverifier/
Unfortunately what it really depends on is whether users have it installed.
Try SAHI. http://sahi.co.in/compare-sahi-with-others/
What is #java?
It's [J#](http://en.wikipedia.org/wiki/J_Sharp) ;P
I second Core Java I &amp; II. Great books. They're the only books I could find that made a nice stepping stone from novice to "Effective Java". If you do "Head First", you can skip a lot of Volume I and some of Volume II... I wouldn't anyway, but you can. One small annoyance of Core Java is they seem to assume you are a C++ programmer in their 'notes', and a LOT of pages are taken up with "Well this is how you did it in C++, and this is why it's different in Java." It's interesting, and with some experience in C++ I read them anyway, but usually they're largely useless for me.
Yeah. Pure evil: public class NumberUtils { public static int max(int a, int b) { return a &gt; b ? a : b; } } Because with the above, you can do *evil* things like: NumberUtils::max And pass that to IntStream .of(1, 2, 3) .reduce(NumberUtils::max); Which is totally "evil", too ;-)
http://en.wikipedia.org/wiki/Java_package
And for the ?i http://www.vogella.com/tutorials/JavaRegularExpressions/article.html
Thanks! :D
Java is going into functional programming, instead of proper object-oriented, unfortunately. This is how your example would look if Java would be a perfectly designed OO language: Int max = new Max(new Ints(1, 2, 3));
If Java were a perfectly designed OO language, it would be more like Smalltalk or Ruby: Arrays.asList(1, 2, 3).max(); OO isn't about a whole bunch of extra classes. As Alan Kay said, OO is not about the objects, it is about the messages sent between them. The more pure OO languages have open classes so you can add methods based on additional messages you would like the class to respond to. Or in Scala, you an do the same thing with closed classes and implicits. In Java, you can simulate Scala's approach: new ComparableOps(Arrays.asList(1, 2, 3)).max(); Where ComparableOps contains a bunch of operations you wish that lists of comparable values had. Or just use a simple class with static functions, which is simpler to imlpement in Java than a pure OO approach.
Well, I think that instead of calling `max()` and then doing something with the data obtained, we should create an object that exposes the same behavior as Integer we're expecting. This is OOP: Integer max = new Max(...); Now it's a integer, that knows how to add/subtract/multiply/divide, etc. Implementation details are encapsulated. That's exactly what Alan Kay meant, I guess. We're sending messages (add/subtract/multiply/etc), but NOT data (integer/long/bytes/bits).
Except that you can't do that in Java. Integer is a final class. You can either work within Java's type system, and compose over Integers (the Scala approach), or you can create a parallel type system and lose all of the optimizations the JVM has for boxed types.
This article is wrong on most accounts. 1. The premise: utility classes are bad because they're not OO: they are bits of reusable code to avoid duplication, nothing to do with OO. This is like saying that `public static final int SOME_CONSTANT = 42;` is bad, not OO code. They are macros if you will, and they are put inside a class because there is nowhere else to put them in Java. 1. "Object-oriented" max: you misunderstand what object-oriented means, object are a way to encapsulate data and the means to act on this data, it does not mean you have to create many useless objects. Therefore the purist OO way to write a max would be to ask the object what is the max of his value and some other value : `1.max(2)`, or, since it is unfortunately not possible in Java, a `BetterInteger` class with more methods. Not this `Pair` class atrocity. 1. Procedural vs Object-oriented: these are two orthogonal concepts. Objects can, and mostly do, contain procedural code. 1. Single responsibility: utility classes are not object code so this is not really relevant. 1. O(1) vs O(n): the procedural code could be trivially rewritten to be O(1) in space by simply using a loop so this is not and intrinsic advantage of the OO code.
Isn't the whole concept of final in contradiction with interfaces? To me it seems that an interface defines a contract, but a final method says "well this is not all there is to it, there is some other stuff you better not know". (Which is why I guess I never really understood the point of final, except for immutability.)
Your proposed design is simple, and simple is good. That being said, security is a vast domain, and there is no magic bullet. You need to look at classes of attackers, classes of attacks, mitigation strategies, etc. etc. If the information is as valuable as you describe, don't cut corners. A motivated attacker will come at you with more resources and sophistication than you expect.