I only know from academics corner so not sure what is used in production. Matlab is _the_ tool because it can do anything you want and because it is easy in comparison to other programming/script languages. I can only imagine that they are translated to better scaling implementations. It could also depend if you require visualization.
Not a huge fan of using Longs just to distinguish foreign keys..
Yes, I know some departments which are moving to Julia on behalf of their professors.
&gt; I am moving over to Golang for this sort of stuff, as it is much more geared towards micro services architecture What does golang give you over something lightweight like [Spark](http://sparkjava.com/) for instance?
&gt; Spark Very little. The language itself I guess, easier to use (once learned). I like that everything is contained in one binary, they are typically small, very fast, and built with multi processor/threading in mind. But to be fair I dont have any real world data to back that up that the same small bit of code written in go or spark would be better in one or the other. Having been stuck in maven build hell and seeing the huge number of dependencies pulled in to a build though, makes me at least think the golang route will result in much smaller files and are more memory/thread/cpu resourceful than java. But you make a fine point, and one in which I would like to explore. Be very interesting to see the same sort of service written in both how well they stack against each other. 
My models are typically just data containers. For example: `public class User{` `public Long id;` `public final String email;` `public final String firstName;` `public final String lastName;` `}` &amp;#x200B; `//inside MyAbstractDB I'll have a reference to the singleton EZDB instance` `public class UserDB extends MyAbstractDB{` `public User getUserForEmail(String email){` `//query database, and construct a User object.` `}` `}` &amp;#x200B; `Then in each of my web controllers, which handle different HTTP routes, it will look something like this:` `public class ProfilePage extends Controller{` `public final UserDB userDB = new UserDB();` `public void init(){` `route("GET", "/profile").to(getProfile);` `}` `private final Handler getProfile = (request, response)-&gt;{` `User user = userDB.getByEmail(request.param("email"));` `//logic which uses that User object` `};` `}`
Free: https://search.maven.org/artifact/org.jooq/jooq/3.11.7/jar
How is it better? I mean, jOOQ doesn't *force* you to use the DSL. You can use plain SQL with jOOQ just the same. Or you write views. You never need to leave jOOQ land again...
Yes Apache is maintaining it right now.
I kinda wish Entry was a standalone class, to be fair. Iterating through keysets always feels so clunky to me.
I like to use raw JDBC when I can get away with it. I'm not sure what you mean by "examples on the strategy", so I'll show you a bit about how I handle things in code. I'll usually have some kind of Repository or DAO to hide the fact that these objects are stored in a database. Something like: PersonRepo { void add(Person person); void remove(Person person); List&lt;Person&gt; findLike(Person person); List&lt;Person&gt; findWithName(String name); } Inside those methods is where I'll do the JDBC work. The code structure of the methods look a little different depending on language level of the project. The below is common for the Java 6 projects I work on. On Java 7 and 8 projects, you can use things like try-with-resources and lambdas to simplify the code a bit, but it's generally the same. public List&lt;Person&gt; findWithName(String name) { final List&lt;Person&gt; people = new ArrayList&lt;Person&gt;(); final Connection connection; final PreparedStatement statement; final ResultSet results; final String sql; try { sql = "select * from people where name like ?"; connection = dataSource.getConnection(); final PreparedStatement statement = connection.prepareStatement(sql); statement.setString(1, name); results = statement.executeQuery(); while (results.next()) { // get results and populate list } } catch (SQLException e) { log.error("Unable to query database!", e); throw new IllegalStateException("Unable to query database!", e); } finally { try { results.close(); statement.close(); connection.close(); } catch (SQLException f) { log.debug("Unable to close connection. It may have already been closed, or was never opened.", f); } } return people; } The above was written from memory, but serves as a rough example of how I use JDBC directly. One thing that is missing in this example is how you get a database connection. In EE/Spring applications, you can inject one or more DataSource instances. Or you can just use dependency injection via a constructor or setter method. Or the static factory thing. Or something else I am not thinking of. That decision depends on how you need to handle database connections, and your preferred means of passing around dependencies.
Its totally personal, but I really like how JDBI decouples the DB model from any java class/object, and how it keeps the mapper separated in another class, and its easy just to plug a query to a mapper. That was really helpful on a project that almost all queries were projections from multiple tables and different static filters Having said that, I have never used JOOQ plain SQL api, I am gonna try it.
Well, Node is a package-scoped, HashMap specific implementation. There's no real need for it to be moved anywhere. My only gripe with Map.Entry&lt;T, U&gt; is that I find it semantically kinda gross. There's little reason that Entry couldn't have been a standalone class, with implementations declared as private nested classes.
Bittorrent is your easiest path. 
It's just useful. It helps me keep my DAO super clean and strictly methods. Meanwhile all the actual SQL statements are in XML.
JdbcTemplate and its cousins (SimpleJdbc/Named etc) are all you need.
Wrong reply perhaps? :)
actual facepalm. well at least we know we have similar interests.
We’re only using Jenkins to auto build a war file
I'm really glad you like it!
Or rsync. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/a1bzvv/implementation_array_help/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
look at gridftp
Not that I know of. mvnrepository.com can tell you reverse dependency information for all the jars in Maven Central and other repositories that they index, but this will often only tell you about library users, not applications, which I suspect you're more interested in.
This...but also, I like a culture where you merge as soon as the tests you pass, and the baseline culture is "write tests for your new code". Then do a code review after the merge, with the author providing a follow-up PR with stylistic/readability/maintainability changes requested in the code review.
Yes but there is no easy way to get to know about that. So atleast I can analyze how wide spread it is used in the library world 
Did you make sure the angle was in radians, not degrees? 
oh shit lol, thanks that was probably my problem. Thanks haha.
Next time: Programming help should go in /r/javahelp.
It is unfortunately not open source code.
Thank you for this sharing, I find it good because that's basically what it takes when you don't want an ORM. It's generic but still very understandable ! I like ORMs myself (used many of them from Python world in the past), but internal politics/my coworkers don't want to use them... So I'm looking for some generics like that, which can be compatible with their thinking but still making us productive. (Pardon my French... English is not my main language)
Checkout http://www.querydsl.com/ - its like Jooq but with a better licence.
I've worked with Kafka. Setting up Kafka is one thing. Setting a production ready Kafka is something completely different. It's an awesome tool but maintaining a cluster is quite a bit of work that requires people with a certain expertise. Doing that when all you need is a for-loop with some SQL queries is generally not that good a time investment. 
libraries.io has full dataset dumps. Load them into sqlite and off you go.
It looks like in your [submission](https://www.reddit.com/r/java/comments/a1g14z/how_to_change_white_space_to_new_line/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
**Distributed computing** Distributed computing is a field of computer science that studies distributed systems. A distributed system is a system whose components are located on different networked computers, which then communicate and coordinate their actions by passing messages to one another. The components interact with one another in order to achieve a common goal. Three significant characteristics of distributed systems are: concurrency of components, lack of a global clock, and independent failure of components. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
I just didn't want to write C++ details in the Java subreddit I was assuming that somewhere was defined `void print(int n);`. Also `std::function` takes a templated constructor argument the type of which is deduced at compile time. I guess to be pedantic there is no way to specify the type of a lambda, it can only be inferred.
The pattern works quite like a regular JPA implementation, minus the overhead of a Spring, Hibernate, or EclipseLink. But I call them half-DAOs because they only read. The end goal is the construction of immutable domain objects. Their class has 2 static inner classes: a builder and a generator. The builder builds immutable class instances. The generator generates mutable builder instances. The builder instance is unaware of how it got constructed. Where the builder can be used manually and in unit tests and mocks, the generator is intended to be used only as a proxy from the data source. The generator is the half-DAO. It adapts the contents of a data query resultset into 1 or more builders of the same type. The resultset is populated by a singleton DTO: the same generic DTO is used for multiple concrete DAOs (generators). The generator has instance methods that override interface methods. The interface is shared and is the reason that the DTO can construct multiple types of generator instances. The DTO is an interface with a default method that executes a passed-in data query on a predefined data source. It loads the results into a result set, which it then passes into a new instance of a specific generator. The DTO constructs generator instances via reflection. But instead of mirroring ever database field in the generator an using setters to populate them, the DTO passes the resultset to the new generator instance, and lets the generator figure out how to handle it. The DTO is unaware of the structure of the builders or the domain instances they build. A fair amount of trust is put into the generator's handling of the resultset it receives. The DTO trusts that the generator will read the current row, only, and will not mutate the contents. I'm looking for a way to enforce that, but because I'm both the DTO developer and user, I currently have no pressing need. And finally, to glue it all together: the DTO's interface is implemented by the target domain objects. They have a static method that sets the process in motion. I had wanted to make this a static interface method, but Java won't allow that. Does that help?
A complete overview of java multithreading.... Spends 30 mins talking about the Thread class. What is this 2006?
Not every YouTube video needs to be a business orientated video on how to write complex async threads. I guess the video creator forgot to add "beginner" to the title but still, people need to remember that not everyone on this sub works for some large corporate business and stop downvoting. 
The "config" is really a backdoor to ship things like this into production without the architect or ops intervention ;-) BEGIN FOR i IN 1 .. 10 LOOP .. END LOOP; END; Totally not code
What are you talking about "Business Orientated"? The Executor classes have been available since Java 6/7 and you should not be using the Thread class or Runnable interface if you had any sense.
Do we really need to be notified twice a month about this?
Thread safety and synchronization. One of my biggest pet peeves is when there is a piece of code intended to be handled by multiple threads, and someone just throws synchronized on one method and things that is good enough.
I've always struggled with writing tests before code, or at least before the API of the code is stubbed out. I'm OCD about my IDE telling me there are compiler errors, so every time it says "this method doesn't exist" or whatever, I just really don't like it. &amp;#x200B; That being said, I generally stub out my tests, at least getting a file with JUnit @Test methods that all describe the tests I want to do, then gradually implement the tests as I write the code.
What drugs are you on? There are no "Executor" classes, only a single interface with a few premade sub-interfaces. It offers no benefit when simply running a Runnable. By the by, even though you're probably using lambdas, you are still using the Runnable interfaces regardless. 
If you're able to consider commercial software, take a look at [Aspera](https://asperasoft.com/). It's much faster than TCP-based file transfer methods.
Which is another way of saying the library is a mature enough state that there are no new features are being added, but bugs are still being fixed. 
I'm not sure about the bugfixing part &gt;Netflix will no longer actively review issues, merge pull-requests, and release new versions of Hystrix.
Clojure is not functional because of lambdas, but because you can avoid using mutable data structures. Everything is a value. When you modify a data structure, you get a new value. You can use persistent data structures in Java too, but no one does it. Also, lazy sequences in Clojure are different to java streams. You can do things like recurrently defined sequences with it.
Netflix is moving away from using Hystrix several other of the original Netflix OSS projects; feign, ribbon, zuul. So that wouldn't be the correct take. Like /u/mrjoegreen shows netflix will no longer be supporting Hystrix, period. If there is enough interest in its continued use/development Netflix might move it over to the Apache or Eclipse foundation, but Netflix isn't going to be spending anymore development resources supporting Hystrix. 
The Graalvm is the only thing I've seen around this area.
yes, graphs are problematic with immutable data structures, not only because of big O. Also, you can't easily represent cycles. Many graph algorithms explicitly work with immutability.
You should read the Oracle support roadmap for clarification on usage of the Oracle JDK, [https://www.oracle.com/technetwork/java/java-se-support-roadmap.html](https://www.oracle.com/technetwork/java/java-se-support-roadmap.html) As others have stated, there are alternative distributions of the JDK available from other sources that can be used without charge. 
&gt;final int size = list.size(); I always do this (unless I'm using a for-each loop)
You've been able to run Python code from Java for years with Jython. The recent work is just research work around implementing Python using GraalVM.
You clearly don't have a clue what your talking about. Who mentioned anything about lambdas? You should be using the classes in the java.util.concurrent package and not Thread or Runnable directly. Any fool knows this so why is the OP submitting a video that's 30 mins of the Thread class and labelling it a "complete overview of multithreading in Java"? I recommed you read Java Concurrency in Practice by Brian Goetz if you seriously think the concurrency classes introduced in Java 6 offer "no benefit when simply running a Runnable".
https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html Nobody deals with raw Threads anymore. Runnable is of course still used everywhere, but just implicitly in that it reflects a void function which takes no args. No point in making a new one when there already was one.
I liked clojure, but I spent just a little too much time chasing after silly parameter/return type issues when I used it. I'm sure a little more unit test discipline when I used it could have prevented that. I only studied clojure because I needed a language right away that would make me ready for Haskell and I didn't have enough spare time to become fluent in Haskell directly.
Just look at the Github repos.
Ribbon also has a similar "in maintenance" status: https://github.com/Netflix/ribbon As for feign and zuul, I think I am just hearing about that from the community/recognizing a pattern. 
&gt;You clearly don't have a clue what your talking about. No, *you* don't have a clue. [Executor](https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executor.html) is an interface, not a class. There are *no* "executor" classes. You're on fucking drugs. [Executors](https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html) is a utility class containing static methods for working with Executors and other concurrency related interfaces. The documentations wrongly calls these interfaces classes: &gt;Factory and utility methods for Executor, ExecutorService, ScheduledExecutorService, ThreadFactory, and Callable classes defined in this package. All of which are entirely for high level thread management. Keyphrase there, in case you missed it, is *high level*. It is not, in anyway, required and you *could* create your own high level async library if you wanted or ignore it flat out(it's part of the standard library so it's worth learning ofc). For a beginner just wanted to learn they key concepts it isn't needed. By the by(again), one way or the other you're going to be working with Runnable and Threads. All roads lead to Rome. If you can't tell the difference between classes and interfaces you need to learn basic Java. &gt;You should be using the classes in the java.util.concurrent package and not Thread or Runnable directly. I guess Oracle is a bunch of fools because one of ExecutorService's methods takes a Runnable object. I don't necessarily disagree though, they added var and lambdas afterall but still... &gt;I recommed you read Java Concurrency in Practice by Brian Goetz if you seriously think the concurrency classes introduced in Java 6 offer "no benefit when simply running a Runnable". Have you ever considered that, maybe just maybe, all someone wants to do is quickly run some small background task that doesn't need anything fancy? 
Clearly you have problems understanding basic english. I was not referring to any "Executor class" or interface but the collection of classes in the java.util.concurrent package. Read the docs yourself at https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/package-summary.html Where they are referred to as "Executors" and have concrete implementations including https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html. I can see from your comment history you are a fucking tool who thinks they know stuff. Your article on medium was a fucking disgrace and rightly laughed at by everyone here. 
Look at the documentation for ExecutorService. It isn't a class. What you get from [Executors](https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html) is an implementation of ExecutorService based on a factory method. Executor and ExectorService "classes" *do not exist*. They never have existed. Nor does it offer any benefit if all you're going to do is just run a bunch of simple runnables. From the [Executor](https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executor.html) docs: &gt;An object that executes submitted Runnable tasks. This interface provides a &gt;way of decoupling task submission from the mechanics of how each task will &gt;be run, including details of thread use, scheduling, etc. An Executor is &gt;normally used instead of explicitly creating threads. For example, rather than &gt;invoking new Thread(new(RunnableTask())).start() for each of a set of tasks, &gt;you might use: &gt;Executor executor = anExecutor; &gt;executor.execute(new RunnableTask1()); &gt;executor.execute(new RunnableTask2()); &gt;... &gt;However, the Executor interface does not strictly require that execution be &gt;asynchronous. In the simplest case, an executor can run the submitted task &gt;immediately in the caller's thread: &gt;class DirectExecutor implements Executor { &gt; public void execute(Runnable r) { &gt; r.run(); &gt; } &gt; } It's a one method that accepts a Runnable. *That's it*. You can create a for loop that iterates over a list of Runnables and either run them or create new threads for each and start them. &gt; function You misspelled *method*. Let me guess, Java isn't you'r first language...
&gt; All Known Implementing Classes: AbstractExecutorService, ForkJoinPool, ScheduledThreadPoolExecutor, ThreadPoolExecutor Look like pretty real classes to me. &gt; It's a one method that accepts a Runnable. That's it. You seem to have no concept of thread management at all. &gt; You misspelled method. Let me guess, Java isn't you'r first language... I'm glad I don't work with you. Sounds a lot like you are stuck on Java 6 and have been/will be for years.
&gt;Clearly you have problems understanding basic english. I was not referring to any "Executor class" or interface but the collection of classes in the java.util.concurrent package. Read the docs yourself at Those are implementations of an interface, not classes. They are two completely different things. The fact that you can't tell the difference is telling. &gt;Where they are referred to as "Executors" and have concrete implementations including Executors doesn't implement any of the interfaces, it returns new objects that conforms to the interface being returned. There is no strictly Executor implementation. The actual implementing class is FinalizableDelegatedExecutorService or related if you actually looked at the source code... &gt;I can see from your comment history you are a fucking tool who thinks they know stuff. Your article on medium was a fucking disgrace and rightly laughed at by everyone here. But you have probably never seen JDK source code because you're just an idiot troll, probably from another language.
"Those are implementations of an interface, not classes" You are really fucking retarded. public **class** Executors extends Object Factory and utility methods for Executor, ExecutorService, ScheduledExecutorService, ThreadFactory, and Callable classes defined in this package. This class supports the following kinds of methods: Methods that create and return an ExecutorService set up with commonly useful configuration settings. Methods that create and return a ScheduledExecutorService set up with commonly useful configuration settings. Methods that create and return a "wrapped" ExecutorService, that disables reconfiguration by making implementation-specific methods inaccessible. Methods that create and return a ThreadFactory that sets newly created threads to a known state. Methods that create and return a Callable out of other closure-like forms, so they can be used in execution methods requiring Callable. How is that not a class you *moron*. 
&gt;Look like pretty real classes to me. Interfaces are not classes. They have never been classes. They will never be classes. I don't know who told you otherwise. Those are classes that implement Executor. They conform to the Executor interface. &gt;You seem to have no concept of thread management at all. No, the video looks to be for absolute beginners who don't know anything about Threads or management of them. &gt;I'm glad I don't work with you. Sounds a lot like you are stuck on Java 6 and have been/will be for years. Java didn't suddenly become a functional programming in 7+, you realize that right? If it isn't static then it's a method and always will be.
"You misspelled method. Let me guess, Java isn't you'r first language..." Anyone with half a brain knows exactly what he means. You are a tool.
You're kidding right? &gt;Factory and utility methods for Executor, ExecutorService, ScheduledExecutorService, ThreadFactory, and Callable classes defined in this package. Really? 
This knob end first says that Executor and ExectorService classes do not exist. Then he links to the Executor class in the docs! then argues that this isn't a real class. He is trying to redefine what a class is hahaha... what a retard
And how exactly is it not a class moron? You seem to have your own definition of what a class is.
It's just a class for providing static factory and utility methods for creating new object instances that conform to an executor. The class itself doesn't implement Executor or any sub interface. Like I said, the documentation is wrong, If you look at the source you'd see that.
"It's just a class" exactly way to go contradicting yourself. You seem to have your own private vocabulary. "Like I said, the documentation is wrong, If you look at the source you'd see that" The java docs are wrong but you are right! hahaha.
&gt;"It's just a class" exactly way to go contradicting yourself. You seem to have your own private vocabulary. I guess I should have clarified, it isn't a class you can create an object out of by doing: Executors ex = new Executors(); because the constructor is private. It only contains static methods(functions). &gt;"Like I said, the documentation is wrong, If you look at the source you'd see &gt;that" &gt;The java docs are wrong but you are right! hahaha. *sigh* [Here](https://github.com/openjdk-mirror/jdk7u-jdk/blob/master/src/share/classes/java/util/concurrent/Executors.java) is the source. Find public static ExecutorService newFixedThreadPool(int nThreads, ThreadFactory threadFactory): and read what it returns. It isn't an executor because executor does not exist. It is an *interface*. Oracle's docs are wrong. 
Exactly. What you get from Executors is *not* an instance of the Executor class, which doesn't exist, but the implementation of the Executor interface from one of those classes. Glad we got that cleared up. Was starting to think you were a goner.
Do you have any insights on what they have moved to?
Wake me when it can convert html to pdf.
&gt;Just because you can't instantiate it does not mean it's not a class. True. I wasn't being clear enough. It's a class that cannot be instantiated and does not contain any non static methods(functions). There is no concrete implementation of Executor(no s at the end) which is what I thought you were referring to earlier: &gt;The Executor classes &gt;The code you linked has no significance to this argument. You are reaching for straws because you're the worst kind of idiot... the one who thinks they know it all and can't admit you're wrong. Sure sure, whatever you say Mr. interfaces are classes.
Spring Cloud is also dropping Zulu in favour of their own Spring Cloud Gateway
No one said there was an "Executor" class. I said the "executor classes" which if you read the docs about half way down this page https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/package-summary.html refers to these classes which grouped together are called "Executors". First you misunderstood what was even being talked about even when it was made explicitly clear, then you tried to argue that these aren't "real classes" making a fool of yourself.
Please, refrain from further such announcements. The community has expressed their being fed up with them and thus they are spam. Should you fail to comply, there will be consequences.
I've never used Hystrix, but what alternatives do we have?
Nope, those are implementations of the Executor interface not *classes* of Executor. You should have said: &gt;The Executor implementations which is different.
It looks like in your [submission](https://www.reddit.com/r/java/comments/a1kfix/made_a_guessing_game_for_fun/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
No one would say the Executor implementations. Read the fucking docs yourself. The classes, amongst others, include: Implementations. Classes ThreadPoolExecutor and ScheduledThreadPoolExecutor provide tunable, flexible thread pools. The Executors class provides factory methods for the most common kinds and configurations of Executors, as well as a few utility methods for using them. Other utilities based on Executors include the concrete class FutureTask providing a common extensible implementation of Futures, and ExecutorCompletionService, that assists in coordinating the processing of groups of asynchronous tasks. Class ForkJoinPool provides an Executor primarily designed for processing instances of ForkJoinTask and its subclasses. These classes employ a work-stealing scheduler that attains high throughput for tasks conforming to restrictions that often hold in computation-intensive parallel processing. It is you who needs to learn to read English. 
https://github.com/resilience4j/resilience4j
&gt;No one would say the Executor implementations. Read the fucking docs yourself. The classes, amongst others, include: Technically correct people would. To say that those classes *are* Executor(s) would imply inheritance by the "is-a" relationship. By contrast an implementation(what those all are) implies a "conforms to" relationship. Those classes are more than just implementations of an Executor.
Interesting, I used those quite a bit three years ago, I need to read up on what Netflix OSS is up to these days.
The reason why it would be stupid to say Executor implementations is because it would mean norrowing it down to classes that implement Executor. Why would you want to describe it like that whenever most of the classes do not implement the Executor interface?
To be technically correct. Docs should be (you would think) be technically correct. Kind of like saying GNU/Linux instead of just "Linux", as annoying AF as that is. The problem isn't limited to interface implementations either, though. You could create a class called "A" which class "B" extends and then have class "C" extend class "B" without ever knowing that C indirectly inherits from "A". 
I was assuming he already had kafka topics, since he was implementing a stream. The stream pretty much works out of the box with good enough performance afaik. If he didn't have topics yet, then it's not the solution for sure. I did not configure the production cluster though, but my take on it is that for a good well tuned database, you probably also need a DBA with specific skills (:. 
Any viable alternatives to the netflix OSS stack (Eureka/feign/ribbon/zuul)?
glad we recently made a decision on adopting Istio instead hystrix/oss stuff. 👌
&gt; Those are implementations of an interface, not classes. They are two completely different things. The fact that you can't tell the difference is telling. You're beyond help. A class that implements an interface suddenly isn't a class anymore?
&gt; You are really fucking retarded. He just doubled down on being wrong and got other stuff even more wrong. It's pointless to argue. He'll find something else in your argument to be pedantic about. 
It's interesting to see how this thread derails here and instead of just admitting you're wrong (and you are, you simply can't discuss Java concurrent programming without discussing executors, they're used everywhere) you double down in a pedantic discussion on what is and isn't a class. I hope you learn from this. If you don't you're beyond help.
Except Hystrix other parts of Netflix OSS are maintained. If you're on Spring, the alternatives to Eureka are Consul and Zookeper, Feign has moved to OpenFeign project, the alternative to Zuul is Spring Cloud Gateway.
 Yes
It's compiled (using javac), to a lower level language which is called byte code (those are the .class files). When you "run" the compiled files, which might be Java containers (aka .jar files, containing .class files), using the Java interpreter (using java) then it interprets and run the byte code on machine language. TL;DR: It's compiled then interpreted.
This had the same effect on me as the cheap horror movies from the 80s. It is so bad that I keep watching wondering if it can get even worse and it does.
&gt; A library used by the whole company/OS? Keep what you are exposing as minimal as possible while still being useful. Because, in the end, it will be nearly impossible to change it without causing a bunch of mayhem. That's exactly why you should use explicit types. It allows you to add new methods later without breaking backwards compatibility. In the .NET Framework Design Guidelines, they even recommend returning strongly named collection classes such as CustomerCollection rather than a generic List&lt;Customer&gt;. *** And remember, because of the way encapsulation works, you can always change the implementation without changing the class name and public API.
And the machine language is in tern interpreted by the processor... Turtles all the way down really.
I have *written* such code :) - Set up a WLS server that can read some logic from a single table (needs architecture approval, done) - Let that WLS server read arbitrary Java code from that table - Use `javax.tools.JavaCompiler` to compile arbitrary Java code and produce byte code in a `byte[]` - Write a custom class loader to load classes from said `byte[]` - Create an Oracle AQ to send messages to that compile server whenever Java code has changed - Create version control integration to check out Java code from version control directly into Oracle table whenever said Java code changes - Auto fire a message to previously set up Oracle AQ Continuous delivery man!
As other people have mentioned, it's actually a complicated question, and the answer of "kind of both" isn't really useful in most situations. From just an everyday Java programmer perspective , I think the simplest answer is to just say: Java is a compiled language. This implies two main things: First, you have to recompile your source code to make any changes to your runtime code. Second, the compiler can and will catch certain bugs before your run it, e.g. syntax errors, accessing variables outside of scope, using classes not loaded on the class path, etc. Then, as an informed developer you should know how Java and the JVM works underneath like: what Java byte code is, how other languages like Scala and Groovy and compile down to Java byte code, how the JVM may actually compile parts of your Java byte code or may run it "interpretively", how the JVM can support hot swapping of code. Again, this stuff you won't use on a daily basis, but it's good to know in case you run into really tricky bugs, or just to help make an informed decision about your tech stack and tools.
Definitely explicit types, just not concrete types. For example, maybe `CustomerCollection` only exposes that the implementation has a `get(index)` since you might not want to expose all the remove methods or whatever on List. What you can't do (without breaking the API) is renaming or moving `CustomerCollection`. Whatever you expose, though, that interface should be minimal, especially to start with. Because things exposed can't be unexposed without a bunch of work and coordination. The benefit to doing this via interface is that it is a lot easier to play around with the implementation. You can have both implementations living side by side. You could enable one or the other using a feature flag. And importantly, it makes it a lot easier to reason about what you've exposed, so your implementation can have more public or protected methods if you like without worrying about what the end user of the library is accessing (they only get the interface). Another example of where this was gotten wrong is Java's collections. They are all mutable. The problem with that is that you can't make them visibly immutable. That "add" method will always be there. The better approach would have been to have a "List" and then a "MutableList". It would have made things so much easier to reason about. (For example, did you realize that a submap of a navigable map makes a mutable view of that map that can mutate beyond the bounds of that map? That wasn't a fun bug to track down.)
 &gt; The benefit to doing this via interface is that it is a lot easier to play around with the implementation. You can have both implementations living side by side. You can always do that anyways. All you have to do is wrap the actual implementation. &gt; Whatever you expose, though, that interface should be minimal, especially to start with. All the more reason to start with a concrete type. `CustomerCollection` can start with just `get(index)` and add methods later. An interface cannot because adding methods to an interface is a breaking change. (Not always with modern Java or the upcoming C# 8, but often enough to make it unsafe.)
Good points. I guess I don't generally expect my downstream consumer to implement my exposed interfaces, but that certainly isn't a safe assumption.
For how long? Hystrix was very popular and it's gone now.
Nice alt account, idiot. &gt;It's interesting to see how this thread derails here and instead of just admitting you're wrong (and you are, you simply can't discuss Java concurrent programming without discussing executors, they're used everywhere) you double down in a pedantic discussion on what is and isn't a class. "Beginner Java programmers have to use a **high level**, complex threading library to learn basic multithreading". Bitch fucking please.
I mean, I'm not the one creating/hopping alt counts to downvote shit now am I? &gt;A class that implements an interface suddenly isn't a class anymore? You are only referencing the implementation of Executor, not the whole class implementing class. **There is no Executor class to reference, only implementations**. Jesus fuck, I don't know what brain damaged functional language you people come from but *maybe* it's time to learn basic Java. 
I have a different interpretation than others. I would say that there are two different programming languages that people often mistakenly conflate into one. They are Java and Bytecode. Java is a one of many high-level languages that may be compiled to Bytecode. There are many others, such as Scala and Kotlin. But it is also possible (using Graal) to compile Java to native machine code. In either case, Java is always compiled. Bytecode is machine code that runs, usually, on a virtual machine. I say usually because it can run natively on hardware. See [here](https://en.wikipedia.org/wiki/Java_processor) for more info. When it runs on a VM, it could be said to be interpreted, although as others pointed out, some JVMs compile it on the fly into native code. I make these distinctions because we often speak sloppily about "running" Java. It is impossible to run a Java file. It must first be compiled into another language, Bytecode, and then we "run" that. (By the way, it is entirely possible to write a program directly in Bytecode without it ever being Java or any other language, just as it is possible to write a program in assembly).
At this point you're probably more concerned about the size of the turtle(memory) than its speed, no?
They've mentioned ( and mention on the Hystrix page ) that existing applications continue to use Hystrix, but new work is using Resiliance4j ( https://github.com/resilience4j/resilience4j ) which came out of the circuit-breaker stuff based on VAVR.
In fact, AOT compilers for Java existed before HotSpot.
I wouldn't recommend using JDBC directly. There's some excellent libraries that iron out the warts while still giving you direct control over the query. If Scala is an option for you, then `Doobie` is hands down the best JDBC abstraction I've used. It can type-check your SQL Strings at compile time against a real SQL database, and provide type-safe and mostly automatic marshalling and unmarshalling to your data types. There's also a number of really good "Query Builders" that let you build SQL Queries using a "Language Integrated" syntax. It's not raw SQL, but it's fairly thin abstraction. JOOQ is quite good for this in Java. There's also Quill and Slick for the Scala ecosystem. 
Thank you for the response; it is hard to parse this in paragraph form, is this an accurate representation? ``` interface Dto&lt;T&gt; { default List&lt;T&gt; getQuery(String sql, Class&lt;T&gt; cls) {... reflection choosing generator ...} } public class Person implements Dto&lt;Person&gt; { some static method that calls Dto::getQuery?? and Person is a singleton?? private int id; private int name; // getters, setters } public class PersonDao implements Dao&lt;Person&gt; { public static class PersonBuilder { Person build(ResultSet rs) } public static class PersonGenerator { List&lt;Person&gt; getPersons(ResultSet rs) } } ```
They probably have those capabilities built into Titus, their container framework. I’d be surprised if they didn’t.
Thanks for the confirmation (and all your awesome work on Zuul!)
Istio? Do they move to GCP stack now? 
You missed the native image compiler in graalvm 
I'm quite certain he means ExecutorService. You may be using Runnable under the hood still, but you combine it with CompletableFuture, and you shouldn't ever need to use Thread again except in very strange cases. If I saw the words "new Thread" in code I'm doing code review on it would absolutely have to go. That's just begging to turn the concurrency into a complete mess.
Executors is a general catch-all for the ExecutorService implementations available from the static methods of the Executors class. Every Java programmer who's not brand new has known this since like a month after Java 8 came out. You're being pedantic to be pedantic, and even more, you're completely wrong. &gt; Look at the documentation for ExecutorService. It isn't a class. You've heard of "referencing by interface"? You can do that in actual conversation to for convenience. For *exactly the same reasons you do it in your code*
Dude everyone is calling you wrong, because you're extremely wrong, and trying to twist the words to what you want them to be...unsuccessfully. All those implementations are called "Executors" IN THE FUCKING DOCUMENTATION. Idk you must be trolling.
&gt; You are only referencing the implementation of Executor, not the whole class implementing class. There is no Executor class to create new instance references, only implementations. Maybe read the javadocs in the concurrency package so you can actually understand terminology people are using instead of making up your own. 
Guys I've been using Eclipse for a really long time. It's my favorite IDE after a lot of setup. I know most of you like IntelliJ, but w/e I don't care. However, seeing Eclipse with literally the default sizing and setup is excruciating. Also what about Stream.parallel(), CompletableFuture, and ExecutorService? What about count down latches, semaphors, and mutex for external observation? You didn't even discuss synchronize or locking! If you're gonna teach Java 6 era stuff cool, but at least teach the rest of it. No offense OP, but maybe learn more before you try teaching people. 
They had locks and semaphors in 2006
Istio can run on any Kubernetes cluster.
You are welcome :)
I guess they have moved to service mesh ?
&gt; But it is also possible (using Graal) to compile Java to native machine code. AFAIK Graal compiles bytecode to native, not Java directly. 
Aside from what others have said; there are very few languages used in production that are actually purely interpreted. Languages like JavaScript and Python are generally also JIT compiled or use an intermediate step. Line-by-line interpretation like used in the good old QuickBasic days (or like in bash scripts) is just too slow. 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The Spring Cloud folks will support it further: [https://mobile.twitter.com/spencerbgibb/status/1064863160979591169?s=12](https://mobile.twitter.com/spencerbgibb/status/1064863160979591169?s=12)
Feign is not being developed by Netflix for a long time by now. Newer version has the openfeign group name. 
I wonder long will Spring Cloud support the Netflix OSS
That moment when configuring Spring Security even with the help of Spring Boot is so hard that community has to create its own extensions for ordinary use cases....
To be precise - JVM _used to_ be an interpreter of a non-existing processors assembly, but then HotSpot happened and added JIT to JVM (so the byte code is compiled to native code, just not AOT). Currently with GraalVM's native-image byte code can also be JIT. And the byte-code cannot be treated as code for non-existing processor as there are some hardwares [designed to use it](https://en.wikipedia.org/wiki/Java_processor).
**Java processor** A Java processor is the implementation of the Java virtual machine (JVM) in hardware. In other words, the Java bytecode that makes up the instruction set of the abstract machine becomes the instruction set of a concrete machine. These are today the most popular form of a high-level language computer architecture. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
And the x86 op codes are interpreted by microcode...
That doesn't seem to work in Intellij's finder. 
open ~/.jabba/jdk/zulu@1.8.181/Contents in regular finder, and you should be able to drag the Home folder to IntelliJs finder window - tada?
Does anyone even use graalvm?
Okay this makes me feel a little better. I always felt stupid for struggling to understand jwt authentication with Springboot. I’ve played with in in Laravel, Node and got it working with no issue. I can’t seem to get it working the way I want with springboot. 
Not yet... But it looks interesting 
Oh? I haven't had a chance to try it yet, so you may be right.
&gt; start with high level tests, at the UI level Could you give some examples of what these might be? Thanks! &amp;#x200B;
Wicket uses HTML for templating, not a Java DSL.
That did it! Thanks
https://www.oracle.com/technetwork/articles/java/jf14-nashorn-2126515.html Before Nashorn, there was something Rhino based. Now Nashorn is going away in favor of GraalVM. I'm not sure the GraalVM replacement is an interpreter though. As I understand it, all programs on GraalVM are compiled to an AST using Truffle sdk. Whatever the case for GraalVM, jshell gives java an [eval](https://docs.oracle.com/javase/9/docs/api/jdk/jshell/JShell.html#eval-java.lang.String-) now.
Likely what is happening is the difference in a build tool versus the compiler. The Java compiler knows that when a single file that it is processing references another class, it has to search to find that class. If the second class isn't found but the source file its, the javac will compile the second file. So only files/classes the object graph being compiled are considered. Tools like Maven and Ant, however, locate all *.java source files in the source subdirectory then determine if the compiled .class file exists or is older than the latest source file change and any that fall into that category are sent to be compiled. 
&gt; So it's an issue of the optimizer; as is often the case, it unrolls too aggressively and shoots itself in the foot, all the while missing out on various other opportunities. Feels like a good case for ML-optimized optimizers. This summer Jeff Dean (at Google) talked about was a database index that used machine learning to guess approximately which memory block to look for, and then search around what it found. He added that every place where we have heuristics could benefit from ML. This optimizer case seems a great opportunity to apply the same principle.
Was it this talk? https://www.youtube.com/watch?v=At4rhuKu84o
I didn't see this talk -which seems much richer-, but yeah that's what I was referencing when he talks starting from 1:07:30; paper here: "The Case for Learned Index Structures" - https://arxiv.org/abs/1712.01208
Tl;dr: Bug in JVM optimizer.
I'll do my best to describe the structure in a general way. I may devout a blog post to it. I'll be back.
I guess it's a JVM bug. I'm really surprised that no one mention which JVM he/she is using :\\
It is semi important pedantry. IIRC, auto lambda ends up being easier for the compiler to optimize than std::function because it doesn't involve the additional allocation. Additionally, the compiler can make assumptions about the lambda that make it easier to inline if you pass it around.
Thanks for trying to clear things out. I'm not on reddit so often so I didn't see the downvotes. Yes, people learning deep learning learn Python. They run a Jupyter notebook and Pytorch with... Python. So, while there obviously are libraries/projects related to ML in Java the momentum doesn't even compare to Python.
I don't think such a feature exists. A feature to allow broken code in the code tree doesn't sound like great software engineering to me, personally, and the Maven engineers may think the same way and so not want to enable that kind of thing. Can you just move the file out of the way until it's done? Or \`git stash\` it?
Command + Shift + G allows you to navigate to any path in Finder or a file selection dialog
Unfortunately it’s my boss who’s not really a programmer that wants it. I recommend against it, but that’s the way it goes :shrug:
There's a good walkthrough here: [https://www.infoq.com/articles/Graal-Java-JIT-Compiler](https://www.infoq.com/articles/Graal-Java-JIT-Compiler)
Yes and no. Python's "bytecode" (and the .pyc files) are not really the same as Java bytecode. Also CPython doesn't really JIT (although some other Python implementations do, and PyPy is based on the same ideas from compiler theory that Graal relies upon).
It looks like in your [submission](https://www.reddit.com/r/java/comments/a233o1/framework_agnostic_openapiswagger_libraries/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Why not add the WIP code in a Git feature branch?
I was thinking itd make sense for spring foundation to take it over
If you are looking for something very lightweight, I would suggest this awesome library - https://github.com/jhalterman/failsafe
Check this out if you have 50 mins! Christian Posta from RedHat lays it down in this video. [https://www.youtube.com/watch?v=rleCT47cqfY](https://www.youtube.com/watch?v=rleCT47cqfY)
Slow\_ghost is right! Check this out if you have 50 mins. Christian Posta from RedHat lays it down in this video. [https://www.youtube.com/watch?v=rleCT47cqfY](https://www.youtube.com/watch?v=rleCT47cqfY)
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
[But what is it?] (https://www.youtube.com/watch?v=3r5Ynz-a7Io)
It looks like in your [submission](https://www.reddit.com/r/java/comments/a27mou/i_need_help_with_queries_statements_please/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/a28nvm/java_78_fuzzy_distance_string_library/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This makes me feel better too. Spring security is the only spring module I consistently struggle with, even though I've got a pretty solid grasp of the underlying security concepts and can set them up manually pretty well with things like JAXRS filters.
Great idea, you rock.
I've used it on hobby projects. Nothing in production yet, but I've do run unit tests against it so that I can adopt fully once it reaches 1.0. 
Netty is non blocking, so doesn't need to hold a thread open for each concurrent request. If your code is IO bound this can have dramatic performance implications. Undertow and Jetty also both support non blocking code. Undertow in particular is ridiculously fast and lightweight, and quite well engineered. There's also Vert.x, which is an entire ecosystem of non blocking libraries and even includes non blocking database drivers. It's reliably at or near the top of Techempower benchmarks as a result. Even if you're not concerned about high concurrency, avoiding spooling up a large thread pool can dramatically reduce heap usage. For microservices, this can be a big deal. 
&gt;It's next to impossible for a normal programmer to develop their own http server over TCP Not that I'm proposing somebody actually do this in production, but writing an http server is pretty damned easy. I'd wager the average junior developer could bang a simple one out over a weekend. 
Your experience is really showing. If it's that simple, why do you have open source projects with multiple contributors, with multiple issues, developed over decades? Really? Yes you can write a shitty http server over a weekend. Good luck actually putting it to good use. Ta.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Could you provide full code of you application and version of GlassFish? 
Sure. The @Stateless bean: https://pastebin.com/y84jcTJq The @Remote Interface(I thought that would be needed to deploy a standalone EJB jar): https://pastebin.com/RE8WsEqs The @Singleton class: https://pastebin.com/5ZMc1VGn Below is a pom with Google Guava lib. It is another unrelated experiment I did regarding jar dependencies in a EJB jar, but any considerations are welcome. The EJB jar does not package any Google Guava jars, but it still would work on the @Stateless bean above. Which begs the question: where is it getting the Google Guava dependencies? https://pastebin.com/Farq3J8r
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programming] [Beware the Attach API \[x-post from r\/java\]](https://www.reddit.com/r/programming/comments/a2enc3/beware_the_attach_api_xpost_from_rjava/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Industrial control systems and SCADA. [Ignition by Inductive Automation](https://www.inductiveautomation.com)
In a former job as a new developer I wrote a calculator for physical fitness scores, think police/military minimum scores and minimums that change with age.. This is a good exercise because it covers a lot of things. First you have the CRUD aspect. Then you have the score calculation aspect. You could also add in some trending for an individual over time or statistics for a group of people.
Desktop GUI applications make up a very small percentage of the actual production use-cases for the Java language. In my company, Java is almost exclusively used for worker applications or webapps. Swing is sometimes used for convenience when we need a desktop app, because we don't have the infrastructure or knowledge to support development of native GUIs. More and more we're targeting internal GUI applications for the web browser, using Angular on the front-end and a Spring MVC back-end. This way we can run them on Unix/Linux. This is not to say a Swing-based UI can't be good. It's just difficult and time-consuming to do. IntelliJ and DbVisualizer are both outstanding even compared to native Windows applications. No doubt there are dozens of industry-specific examples. JavaFX is too immature and not likely to be developed to maturity, IMO. It brought some reactive features to GUI development (e.g. StringProperty, ObservableList) which are great. The XML-based layouts leave something to be desired. My one big foray into JavaFX was abandoned in favor of Swing because I couldn't get table columns to snap to the edge of the table and resize without an ugly hack, which was the last straw in a long list of similar issues. Anyway, I love Java for backend development (which is mostly my job) but for GUI development, you'll need to weigh it against your needs and the target platform. &amp;#x200B;
1. Native android apps (although lately Kotlin is getting popular, but most of android libs are still Java) 2. Various processing backends in financial systems 3. Storage backends (cassandra, elastic) 4. Search backends (elastic, solr) 5. ML backends (spark etc), although actual ml/ai interfaces are in python typically 6. API backends for rich UIs, especially in government and financial space 
I can support #6. Heavily used in financial sector. It is all purpose, and the dependency hell is not a hell anymore of companies have a good structure. And it will definitely live in for ages. And those devs are probably well paid. ;-) But it is just back end.
It looks like in your [submission](https://www.reddit.com/r/java/comments/a2fvy2/free_top_level_package_names/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Try learning scratch. https://scratch.mit.edu/ This will teach you the principles of programming without the errors that keep a lot of would-be programmers from learning it.
Tooling in industries we are heavily users of eclipsercp and netbeansrcp
Use Apache Camel. Check the FTP and the File component. Can't get easier than that.
&gt; The hack has two built-in limitations: &gt; The Attach API requires a PID. That implies the launcher must be run on the same machine. &gt; It seems the user trying to attach must be the same as the user having launched the target JVM. So once I have total control of a user and all of his processes I can use this to have total control of all of his processes? Someone needs to read [this old new thing entry](https://blogs.msdn.microsoft.com/oldnewthing/20060508-22/?p=31283)
Dobra robota! Topics and formula of videos are very nice! Really like it. Sub. 
Science, too. I've worked on Swing, FX, and back end code in Java for scientists. They do not care even a little if the apps look 'modern', they only have eyes for the data. And since the Java ecosystem is so mature, it's comparatively easy to compose a system to process the oceans of data that they have.
Can confirm #2 and #6, we have *tons* of those where I work (financial sector).
I guess because it's more targeted therefor it would be much less noticeable, reliable, and overall safe. Maybe the Java application does something godawful like storing root password in plain text memory and using a specific thread to execute root commands that can be hijacked using this(It is possible to do this, btw). 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It's a very, very, very, very, very popular backend language. &amp;#x200B; It's a very, very, very, very unpopular frontend language.
So many times I tried to abandon Java for other languages, C++, C#, D, Go, html+js, etc. But for small to medium Gui apps, Java + Swing + Netbeans is 1000x convinient. Nothing beats that convinience and productivity. I know of two instances of Java usage. As mentioned above to quickly develop small to medium size Gui apps. And the most popular one is as backend to many financial websites. 
Some less common, but interesting uses: GATK, biojava Graphhopper Jgrapht There might be a version of libsnark in java (zcash utility) 
Mostly for enterprise backends. I did see jsp (frontend) at a company, but they were moving to js. I have not seen java used for frontend outside of that in the places I have worked for. Spring boot java framework is popular for backends at least where I have worked. 
#1 is true, but irrelevant because Java interloops with Kotlin. All Java libs are 100% compatible with kotlin.
Just like your mother tongue, you will be most productive in the language that you already know. When you 'try' other languages you have already lost it.
Remove the @LocalBean annotation on the stateless bean. And if you aren’t doing cross JVM stuff, change the @Remote interface to @Local 
This is perfectly valid, you can have both a no interface view and a remote view.
Developer at Amazon here. It's well known that most of Amazon's stack including AWS is all written in Java. I may be biased but the JVM is a great platform to build any backend service on.
I use Java to develop API backends. I also do a lot of work with natural language in Java. 
Some practical use cases I have encountered: * Big data processing for national rail network maintenance (all new inputs from workers made on tablets and smartphones, and good old paper and pen binders being slowly digitized and put into the DB. At the time I left the company, there was about 20yrs worth of data) * Back end in financial system (#2) * Back end for national emergency poisoning call center (mostly #4 and #6) * Whole stack for semantic analysis software (for client satisfaction evaluation. Basically, two open questions did the job of 10\~15 closed ones) (AFAIK, doesn't fit any of the UC quoted above) * Server-side back end and and client-side UI for a legal documents redaction assisting software.
Twitter on production. 
&gt; And if you aren’t doing cross JVM stuff, change the @Remote interface to @Local &gt; Local interface allows to talk to EJB deployed in separate ejb-jar module, but only if it is part of the same EAR. If you want to talk to EJB deployed as totally separate ejb-jar module, it must have Remote interface.
A majority of AWS services are written in Java. 
Yes and no... The use case would be only to tighten the exports for consumers of the library. Or are there others?
Do they resolve against SANs?
It looks like in your [submission](https://www.reddit.com/r/java/comments/a2oftv/how_to_extract_the_methods_of_the_sub_objects/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; Due to issues with Java memory model if there are multiple threads then each thread will create instance simultaneously. In the double check locking initialization (+volatile), how is this possible?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I don't think it is.
I'm going to disagree with your second statement. True, Java is not \*popular\* on the desktop but that does not make it very, very, very, very, very unpopular. There is a significant number of people using Java for complex UI applications and you would be surprised by the amount of JavaFX usage out there. The reason this may not be apparent is that most of the companies doing this are not keen to publicise their projects (for a variety of reasons). Just ask Gluon, who provides JavaFX support (and free binaries).
"Design Patterns" and then they proved to demonstrate multiple ways to implement a singleton, the one pattern you almost always should never use.
Apparently they aren't using any hostname verification at all, even an implementation that resolves against subject alternate names.
Ok, very, very, very, very might be an exaggeration. I'd have used IntelliJ or Eclipse as counterpoints. Still, like 90% of Java development is probably server side.
A lot of software in the healthcare area is written in Java, at least for the European market. It's heavily used in the backend of course. Not sure about the American market.
May I ask, why singletons shouldn't be used ? What is the alternative ?
The issue with singletons are that they can't be substituted easily. You can't replace a singleton class with another for testing purposes without the support of the original class. You can't inherit from a singleton, because that would allow you to get around the singleton nature of the class. Additionally, singleton classes effectively become global variables, and we've had decades of avoiding global variables. 
The Java programming language requires the presence of a software platform in order for compiled programs to be executed. Oracle supplies the Java platform for use with Java. The Android SDK is an alternative software platform, used primarily for developing Android applications with its own GUI system. For example, Java is used for web-applications like Google docs, as well as for things like mobile games. Perhaps most notably, Java is widely used to build small application modules or applets for use as part of a web page. Basically, developers use it to create applications on your computer.
Java is a compiled programming language, but rather than compile straight to executable machine code, it compiles to an intermediate binary form called JVM byte code. The byte code is then compiled and/or interpreted to run the program.
Thanks for the explanation!
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks nice!
Yes
&gt; mature heyyaa, I used it in my master thesis to display data from sensors but I was really fast hitting the edges using the javaFX graphs. It started lagging as hell within seconds or minutes because the graphs provided extra data for every point. I may could have reduced this in another way, but in the end I did compensate this with programmatically generating a "moving frame based" graph and only display the latest xy data sets. I've found several stack overflow threads experiencing the same problems but I couldn't find a simple canvas based graph lib that only paints the graphs like you would do it with for example processing, maybe you did? 
&gt; So many times I tried to abandon Java for other languages, C++, C#, D, Go, html+js, etc. &gt; &gt; But for small to medium Gui apps, Java + Swing + Netbeans is 1000x convinient. Nothing beats that convinience and productivity. we used the google web toolkit for a long time and still do, but I guess you can say it is dead (?) so we probably move on with some "real" js based stuff like vuejs or react.. 
we used the google web toolkit for a long time to build our client and still do for this old project, but I guess you can say it is dead (?) so we probably move on with some "real" js based stuff like vuejs or react someday..
we used the google web toolkit for a long time to build our client and still do for this old project, but I guess you can say it is dead (?) so we probably move on with some "real" js based stuff like vuejs or react someday..
From the right sidebar of this page: r/java Rules \[...\] 6.No Job offers [/r/Java](https://www.reddit.com/r/Java) is not a job market. We do not allow job offers.
[Singletons are pathological liars](http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/).
Server and Android.
I need it for an embedded device that passes a config across multiple JavaFX screens, this device also never connects to the internet. Yes, it probably shouldn't be used often but there are use cases.
It looks like in your [submission](https://www.reddit.com/r/java/comments/a2tgpo/credits_onlinehackathon/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
same
Thanks :)
Thanks :)
well explained.https://blog.gceasy.io/2016/06/18/garbage-collection-log-analysis-api/
nternationalization (i18n) mechanism of Spring web MVC is based on the interface LocaleResolver. The implementations of this interface apply different strategies to resolve locale information of the HTTP request client. When DispatcherServlet (the front controller) receives an HTTP request, it looks for the configured LocalResolver, if it finds one it tries to use it to set the client's locale based on the request content.
this title is misleading and insinuating. the libraries don't negotiate end to end, they're used by applications. the libraries require the application developer to handle the verification if it's something that they care about the article is arguing that it should be enabled-by-default, instead of disabled-by-default. but instead of admitting that they're bike shedding, they're claiming the sky is falling note: it's possible that some of the packages are incompatible with verification all together, and if so that's news. but at least in a quick reading, the article fails to name a library that does this explicitly
So.. except #1, are Java used only on Web development today?
Most items in the list above have to do with development of backends (apis/processes) that may not necessarily involve web development (Java is not used much for developing any new web frontends anymore).
Been in the Java space since '98... some swing/frontend in the 90's but in the last decade or two it's almost *all* heavy-lifting / backend...
I did a project on ECG compression in college. Not losses, but I looked at compressing the data into a linear combination of the Hermite polynomials. Might be worth looking into.
Java may not be popular for consumer apps (then again, how many apps do people use on their desktop, outside of apps required for work? Probably web browser, file explorer, music &amp; video player, Office, Adobe software for designers, text editors &amp; IDEs for software developers). &amp;#x200B; But there are a lot of enterprise / business apps that use Java for creating desktop apps. For example, I know of a statistical process controll software that is used by many large semiconductor companies; car manufacturers that uses Java Swing for its GUI. Also NASA \[1\]. &amp;#x200B; But it's understandable people don't know about these things, because these industries don't advertise / rarely write about the tech stacks they use. &amp;#x200B; [https://jaxenter.com/netbeans/developing-nasas-mission-software-with-java](https://jaxenter.com/netbeans/developing-nasas-mission-software-with-java)
I've been programming in Java for about the past 8 years and will be starting Computer Science in college next year. I've used Java for anything from rendering engines to web servers; the latter of which more closely represents it's modern uses. Java is, as I have seen it, deployed in nearly every web backend environment, including my own. Java is, additionally, required to play BluRay media and runs a wealth of other embedded systems.
Oof, this is bad. For those who don't know, certificate validation is when you check that a certificate has been signed by a trusted CA, isn't expired, etc. Hostname verification is when you check that the certificate you're seeing is *for the website you're connecting to!* So if hostname verification isn't working, I could get a cheap certificate for "mycoolwebsite.com", present it when you try to connect to "google.com", and have you instead talk to me when you think you're talking to Google. Checking that a certificate is valid does nothing if you're not also checking that it's allowed to certify what it's claiming to certify (in my example, that it's Google's certificate).
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; I may be biased but the JVM is a great platform to build any backend service on. I may be biased too, but the JVM is a great platform to built *anything* on with very few exceptions (if you need exact control of the memory, for example). I mean, the JVM has proven that it is versatile and performant (except startup, maybe) and can deliver awesome performance paired with an ease of use that is hard to find. From backends to frontends, from 3D applications to high-frequency trading systems, this thing can do it all. It's a shame that Applets and Webstart have been killed, and now even the preinstalled JVMs should go away...and Oracle dropping everything that they don't need to sue Google doesn't make it any better, too.
Yes, sure. but in Java I can have a GUI up and running in ~10 lines of code, plus one `javac` call and the resulting application is not 100MB+ and works everywhere where a JVM is. So the setup requirements and time are quite hard to beat. Regarding prolonged development and maintenance, Swing could definitely be better.
 &gt; So what can I create with Java right now? What is popular, required etc.? Whatever you want is really the answer. You can also always join an existing project. The question "What do I do with it?" is very hard to answer, but start with the question "What do I need?" and then see if you find a niche which you can fill with a small application that you've written yourself.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
As Java developer that has to deal with Android, I am on the Oracle's side. Google has effectively been successful at pulling a J^++ move and now any Java library author has to keep themselves happy with either writing two versions or constraining themselves to the minimum common denominator, a situation getting increasingly worse as Java moves forward.
Can you point to some information about how this approach is implemented in the PostgreSQL? Is the Postgres server still use heavy process per connection approach? Isn't it a problem for scalability growth? Does Postgres multiplex multiple requests/responses in a single connection?
That might be, but getting APIs to be copyrightable is a quite bad idea as far as I can see. That would not only "punish" Google for that move, but also make sure that nobody will ever again write anything remotely compatible with something already existing. Also I'm not sure what could have become of the Android Java version if the lawsuit would not have happened. Maybe it would be in a better state right now.
How do you feel about running the JVM in containers? We’re doing this at my company, and there are some challenges.
It looks like in your [submission](https://www.reddit.com/r/java/comments/a30sx3/jstl_issue_when_tomcat_deployed_artifact_built/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
All these Java vendors manage to play by the rules, and having relatively up to date version support, Google happens to feel special. https://en.wikipedia.org/wiki/List_of_Java_virtual_machines#Active_2
You can get an ssl cert for free using lets encrypt? https://www.youtube.com/watch?v=lNcpLlZbBiw You should only need to use a self signed cert for code signing. 
Still baffles me how the entire Java ecosystem is still stuck using JKS and keytool. It's so inconvenient, e.g. to use one certificate, which everywhere else is given as PEM, you have to do like 3 conversions and secure it with two passwords and keep around a file which's contents are nowhere as easy to inspect. Hell, I've even managed to make keytool itself NPE, which is plain embarrassing.
Actually the newer versions of keytool print a warning message when you use them to generate JKS key stores and suggest using pkcs12.
Keystore Explorer (for Windows) has been a lifesaver for me. 
Same for other platforms actually.
i'm getting downvoted, but there's nothing "missing" in the libraries from the article: &gt; In our opinion the sensible thing to do for a library is to be secure by default, whilst allowing the user to turn off security features he deems unnecessary in his specific case. 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Do it! I haven't used kubernetes but I do have a side project using ECS and docker is great 
I agree. We’re running a customer facing Java service on Kubernetes in Production now. I was just curious how other enterprises were facing the challenge of Java in containers since the build and deployment times can be pretty slow.
What problems are you facing?
The way infrastructure ops set up the base image is problematic. It has gradle, maven, and the JDK installed on it so anyone can use it. That gets used at the build step to build the jar, then is pushed to the image repo with about 2GB size. Deploying that N times is rough. We need to dump the built jar to a slim image for deployment, but that has challenges, too. Also, there’s the issue with the JVM only respecting cgroups from 10+, meaning it could easily try to claim more resources than the container has and crash it. They fixed it in 10, but that’s limiting for libraries and frameworks that don’t work in 10 or 11.
What are you using to build it? And what image repo are you using? Just wondering
Let me DM you.
I would say *you can use singleton* but *you shouldn't implement one yourself*.
The answer to numerous of "how to contribute to open source" questions.
A few ideas. I'm not any compression guru, just have done these tricks before and one lossless image codec called PNG uses these ideas, and they definitely help. * Just plain delta encoding might help (subtract previous measurement from current value). Delta encoding is generally going to shift smoothly varying signal values closer to zero, and when entropy encoders see small signal varying around zero, they tend to do much better than when they see the full-range signal. * Autocorrelation might help. Heartbeat measurement repeats regularly. If you can subtract the previous heartbeat cycle from current one, then all you are left with are differences between cycles, which should be numbers close to zero. Challenge here is that as beat rate varies, so does the heart rate cycle's length, so it becomes a parameter you must periodically be able to update as well. This could be seen as an extremely high-order linear predictive coding, e.g. instead of predicting from last 6 samples or whatever, you predict with single sample but, say, 200 time steps ago.
Totally agree
Hi there, yes this sentence you picked is more of a generic one. But if you look at the article you see that 3 different CVEs have been assigned for libraries with missing hostname verification. For example if we pick the first one CVE-2018-11087: RabbitMQ (Spring-AMQP): [https://pivotal.io/de/security/cve-2018-11087](https://pivotal.io/de/security/cve-2018-11087) you'll see that it affects the Spring-AMQP library which is a wrapper around official RabbitMQ Java Client Library, this wrapper did **not** expose any API that allowed the user to setup hostname verification, so a fix had to be released. And by the way: nobody is saying that the sky is falling ;) (I hope) &amp;#x200B;
These are not really comparable to Google and what Google did with Android, though.
Developer from one of the top 5 silicon valley company. Java is helping to run the business of Google, LinkedIn, Facebook, Uber, Amazon, eBay and many more.
It looks like in your [submission](https://www.reddit.com/r/java/comments/a33lel/advice_java/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Self-signed certs are often used in (corporate-) internal networks. Letsencrypt requires your servers to be world-open in order to verify you are the one you're pretending to be.
Good point
I'll respond, since I know it sucks to get downvoted without an explanation. Certificate validation without hostname verification is borderline useless given how easy it is to get a valid certificate for a domain you control. I'd consider failure to verify the hostname when establishing a secure connection equivalent to failing to verify the certificate, in that you've lost any real authentication you might expect to have. In addition, there's a strong trend in both infosec AND in the Java programming language of avoiding footguns. Given how many recent security issues have been caused by bad or weak default settings (CRIME, that whole export ciphers debacle, etc.) and the tremendous complexity of writing secure software, there's an expectation that library developers aren't going to require you to do something to be secure. Instead, the default mode will be secure and you have to explicitly switch OFF security in a highly visible way. Given the number of CVEs that exist because someone though that security should be disabled-by-default, it's hard to argue with that conclusion. That you tried to is probably why you got downvoted - people who have been burned by that philosophy might not be very forgiving towards people who are spreading it. ;)
Well, my "mother tongue" is C++. I actually abandoned C++ and went to Java and loved it. I also did abandon Java for 5 years and used D exclusively. Mainly due to compiler stability. Then abandoned D and tried other languages for a while. Now I am back to Java. &amp;#x200B;
You don't need your servers to be open to the world, you can use the dns challenge from another server somewhere else and manage the obtained certificate in any way you want.
Why not use keytool? Import the key: `keytool -import -destkeystore clients-keystore.p12 -deststoretype PKCS12 -file jetty-api.key` Import the crt `keytool -import -file -destkeystore clients-keystore.p12 -file jetty-api.crt` Probably a good idea to check the flags as they are just from memory, just run keytool with no options. I've had issues with openssl on windows in the past
Like the try/error/fix/repeat sequence ! Best way to understand every parameters. Thx
Just use Apache HttpClient and dynamically add the self signed cert to the underlying keystore at runtime.
It looks like in your [submission](https://www.reddit.com/r/java/comments/a35jsi/javafx_sorting_option/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Exactly, they don't feel special to play by their own rules and screw everyone else on the eco-system.
Netifi recommends using ProjectReactor since this technology has more features and that all javafx properties could be easily replaced with \`Mono&lt;?&gt;\`. In addition, say this is this built on top of Java 8, so it will fit a little bit better than RxJava which is built on top of Java 6.
Great, now if only someone would contribute proper rich text support to javafx...
It is a pain compared to the other methods, especially given the 90 days expiry.
Absolutely no way that blindly trusting certificates could go wrong.
Save yourself some headache and just get a nice GUI tool: https://keystore-explorer.org/
This is gonna contaminate my already crappy Github.
Maybe I should have added that xd
Yep. I pray to C every night but I learnt Java when I was in middle school so I would like to think of myself as a baby Java lord.
Spring Boot brings an opinionated approach to the Spring ecosystem. First released in mid-2014. Spring Boot has been through a lot of development and improvement. Its version 2.0 is today getting ready for release at the beginning of 2018. There are different areas where this popular library tries to help us out: Dependency management. Through starters and various package manager integrations Autoconfiguration. Trying to minimize the amount of config a Spring app requires to get ready to go and favoring convention over configuration Production-ready features. Such as Actuator, better logging, monitoring, metrics or various PAAS integration Enhanced development experience. With multiple testing utilities or a better feedback loop using spring-boot-devtools In this article, we’ll explore some changes and features planned for Spring Boot 2.0. We’ll also describe how these changes might help us become more productive.
changeit
Spring WebFlux introduces reactive web development to the Spring ecosystem. This article will get you started with reactive systems and reactive programming with Spring. First you'll find out why reactive systems are important and how they're implemented in Spring framework 5, then you'll get a hands-on introduction to building reactive services using Spring WebFlux. We'll build our first reactive application using annotations. I'll also show you how to build a similar application using Spring's newer functional features.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Good problem to solve. 
You’re misunderstanding me. Load the certificate from a file on the class path or some other location. Certificate pinning in effect. This can be done dynamically.
Wow. Eclipse and JavaFx. Twin out of date activate.
Yeah this is a cool problem because when one door is eliminated, you would think it would be a 50/50 chance between the last two doors, but in fact if you switch doors to the one that the judge didn’t pick you have a 2/3 chance since it experienced validation by not being chosen.
Exactly. Some enterprises have their own root and intermediate certificates and use them to issue new X509 certificates. Your Java program should either add the root certificate or a specific certificate to its trust store in order to be able to send them HTTPS requests. 
If you are not automating your renewal process of certificates, then you are doing it wrong. Regardless if you are using lets encrypt or some other vendor, or signing them yourself.
Always switch!
Eclipse’s still going strong. Don’t get blinded by your own little ignorance bubble. 
Since this is help with Java *programming* it should go in /r/JavaHelp. **Removed**
why is it better then Postman?
The changelog of the last Eclipse IDE releases could fit on a stamp though. Downvote me to hell but i'm a daily Eclipse user and still have performance issues with big workspaces. And what bugs me the most: no **native** git support
More challenges and psuedo code pls! Thank you 
That wasn't what I meant, and you know it.
The first bullet point point seems interesting: &gt; Everest is written in Java. Thus, it is significantly lighter on resources and more responsive than its Electron-based alternatives like Postman. It aims to provide the same level of functionality in a lighter, native but equally slick package. So it has at least one pro over Postman: no electron/chromium baggage. Of course this depends on your opinion of electron.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This is my first Java library! It also is able to create data tables dynamically and create an insert statement for the rows and fields created.
Java is now the lightweight, responsive option? Everyday we stray further from God's light.
This is far far far from being close to what Postman is. Not knocking the idea.. but it tries to look like Postman but Postman is much more than just a "simple rest client". It may eventually capture some of the more capable features of Postman, but Postman does a whopping lot more than just a pretty UI. Not sure why the emphasis on Postman/Electron being so heavy? It is a ReactJS UI with an electron wrapper. It could just as easily run in a browser. The newman test runner is a huge deal.. automating API tests. Collections, team share, etc.. there is a whopping lot to do for Everest to come close to matching Postman, all the while Postman, the defacto standard rest client, will continue to move forward. Valiant attempt for sure, and competition is always good, but Postman has a very solid team behind the product and a lot of momentum with millions of users using it. Everest would really need to do something different and spectacular to put a dent in Postmans user base. 
You probably know, but Java 9 introduced a more modular lightweight runtime, and JRE 11 I believe is faster/lighter than 7/8/9... so Java is really pushing towards a faster leaner runtime than it has been known to have. It is embracing the idea of modular runtimes for specific/different uses. Micro-services for example, need minimal Java runtime lib. Though it is no where near as small/fast as Golang in this respect, they are trying to get there so as not to lose developers to Golang, Python, NodeJS, etc.
I'm blinded by the garbage reaction time and gui that looks like 1995 Java swing vomit
good project... very interesting open source code! But OAuth 2 is not support yet :-( 
Hi! Just a few tips: if you want others to be able to use your software you should include a permissive license. Since you don't provide one your code is not open source. Secondly; Java libraries are managed via Maven/Gradle so you'd have to public it in a Maven repo so people can use it. It's unlikely someone will use it if they have to manually add it. And last; it's not production ready without tests I'm afraid :)
Granted, but in this case it's the other side that managed to "catch up" even more so. I was often willing to pay the price of increased memory usage and ugly layouts, if it meant that I could actually run some developer, enterprise or niche application on my Linux or Mac systems. But Electron went a few steps too far in almost every direction (slow, huge, non-native to an annoying degree).
You forgot to say that the show's host will open one of the remaining doors after your initial pick, and _then_ you get to choose whether you switch doors or not.
&gt; I found this problem in an old school folder Is this old school folder the one with this week's homework?
What a great github repo ( [eclipse-efx](https://github.com/eclipse-efx)/[efxclipse-drift](https://github.com/eclipse-efx/efxclipse-drift) ) ! As per today: 1 commit ( added [README.md](https://github.com/eclipse-efx/efxclipse-drift/blob/master/README.md) ) but 4 forks and 11 stars ! &amp;#x200B;
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I love lombok especially the @Data annotation for POJOs. The only issue I run into all the time is the toString generation which sort of breaks with abstraction 
Same here. I find Lombok to reduce boilerplate by a ton
I've brushed by a few projects which use Lombok, nothing in-depth; it seems practical to use an annotation or two rather than having to constantly define getters and setters. I would've considered using it if I were to start a new Java project however with the rise of Kotlin and auto-generated gets/sets it's redundant for me at least.
Don't. Just don't. Java serialisation was and is a bad idea. Do not use it. No new code should be written that uses it. https://www.infoworld.com/article/3275924/java/oracle-plans-to-dump-risky-java-serialization.html If you need to serialise a Java object, use something like JSON or YAML or XML to do so.
True! 👍
Nice, but would be even nicer if APT would finally be updated to allow what Lombok does without it working “by accident”.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Sorry, I did not understand.
If they release a Graal version it should start up much faster.
Thanks man! 
 I hate Lombok with all my hearth, I even make it ban in my team on project
Immutable: I found it a little bit clumsy. I personally do not like libraries that generate sources which should be used throughout your codebase. Lombok: Lombok is great. It saves a lot of time and all Pojo classes or Hibernate entities, all classes are filling clean and tide. There are 2 main issues that I may highlight: 1. There are some conflicts when you are using aspectj and lombok dependencies in your project. I am sure there is a workaround and some libraries should be excluded, but it is not obvious and requires some time for googling. 2. As far as lombok modifies AST it has no precise error messaging. In case you misconfigured something you will not have clear error message pointing you to the place. I faced such errors when parent-child classes are using @Builder annotation. But facing these issues is still worth using Lombok. Lombok is very useful. Wish they support custom annotations. For example, I would like to have @MyEntity annotation which will add set of Lombok annotations automatically.
I don't like it, when software describes itself as beautiful. Beauty is subjective. I don't like how it looks. So to me it is not beautiful.
Why?
Because it’s another layer of obfuscation in already complex and abstract java ee world, it makes code less readable and is just a home project of someone who needed a portfolio. IntelliJ will care about your set/get and constructor by itself and if someone is using for java dev anything else then Lombok is just another crap on his shovel.
Well, that's a good point. Some times it is better to keep things simple.
I'm currently working on project with Spring WebFlux. Thanks for this ☺
I'm glad you find it useful! If you'll have any questions just drop me a comment under the movie.
In case of lombok - harder to read and Intellij/Eclipse can generate setters and getters in split second. 
Shhh
So how come you did not contribute your immeasurable wisdom to the Lombok project? 
Lombok. It works. There is support for it in IntelliJ. Using it on domain classes in combination with a POJO tester saves a lot of work. 
But you still have to look at that crap. 
Hi! The dev here. That's fair criticism. I'm a third-year university student and Everest is just a learning project more than anything. I started it out of fascination for REST APIs and Postman/Insomnia. I had absolutely zero expectations from it, but back in May, thanks to a couple of HN and Reddit posts, it blew in popularity and ended up #2 on GitHub Java Trending for a week. That gave me a huge confidence boost and that's the only reason I'm still pursuing this. I am still contemplating how far to take this especially given the rise of Electron apps. My primary goal is not to sell this as a major Postman competitor but rather to get some practical experience out of this. But I might take it far enough so as to achieve feature parity with at least Insomnia (plus mock servers). I am also planning to offer the option of cloud sync next year. Again, just to learn what goes into shipping a product proper. As far as my Electron bashing goes, I am not a fan of the tech. Is JavaFX the ideal solution? Far from it, but it is definitely lighter than Electron. I knew it well and that's why I chose to go with it. Thanks!
Because they're not criticizing Lombok per se, they're justifying the reasons not to use it in their team. Alternatively, because their criticism is in principle and cannot be fixed or overcome with code contributions.
Hi! The dev here. I'm glad you like it! I've been working on OAuth 2.0 for the past couple of months but I'm unable to find time thanks to my university finals. I hope to get the Authorization Code flow out within the next month. Stay tuned!
I'll definitely look into this. Thanks!
I have used Lombok in development, but when it comes down to actually doing a release of code, it's just as easy to use eclipse to generate my get/set/toString methods. It's a little less confusing if someone else is looking at the code.
I don’t like it because it’s asinine, not because beauty is subjective 
Sounds good. Postman has needed some competition for a while. 
And you forgot to add that the host has perfect knowledge and shows you a door that doesn't have the prize :D
I love Insomnia, but I don't like Electron. So Everest and Summit is a bless. I'm eager to check it out. Thanks.
How do you mean "native"? Either you mean that the eclipse core should care about git, or you mean that it should interoperate with the git installed on your OS. The first it absolutely should not do, there's a generic Teams support, and the eGit plugin works very well. The latter ... ok, maybe. What exactly are you missing in the git integration?
Thanks! Stay tuned, there's a lot coming soon! :-)
Moreover, IDE generated stuff is susceptible to errors on change. You need to pay attention to all getters, setters, to strings and hash codes. With said libraries there's no such problem. 
Ironically, IntelliJ is the one written in Swing while eclipse uses SWT which is as native as you can go with java guis AFAIK.
That’s why I don’t use @Data and instead I use @Getter @Setter combination. I would love @GetterSetter annotation though. 
Streams, lambdas and all the other beauties of Java8
Well, I'd move on to things that make you a better programmer. Clean Code, Clean Coder, Effective Java, any book on Design.Patterns, maybe throw in some Domain Driven Design.
Joshua Bloch's *Effective Java* is a must-read.
nice to see a slick consumer app written in javafx. Checking this out now.
Maybe try with some architecture asspect, try with good-coded projects, statups or something that will give You fun and money in java8 -9- 10 -11,
Stay tuned for [records](https://cr.openjdk.java.net/~briangoetz/amber/datum.html)!
Always uso a combination of @Getter @Slf4j and @RequiredArgsConstructor
How could I forget that most malice can be attributed to stupidity. If there is one thing I loath in programmers it is their principles. Because they lead to nothing practical at all. 
Such is the power of annotation and generation. 
Generated code is hard to beat. 
&gt; In case of lombok - harder to read How? What is harder to read: @Value public class Person { private String firstName; private String lastName; } Versus: public class Person { private final String firstName; private final String lastName; public Person(String firstName, String lastName) { this.firstName = firstName; this.lastName = lastName; } public String getFirstName() { return firstName; } public String getLastName() { return lastName; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Person person = (Person) o; return Objects.equals(firstName, person.firstName) &amp;&amp; Objects.equals(lastName, person.lastName); } @Override public int hashCode() { return Objects.hash(firstName, lastName); } @Override public String toString() { return "Person{" + "firstName='" + firstName + '\'' + ", lastName='" + lastName + '\'' + '}'; } } Because I sure as heck don't find the 'pure Java' one the be more readable. Not to mention the maintenance overhead; there is a whole class of bugs you get when adding fields to Pojo's and forgetting to add them to hashcode, equals or toString that you avoid when using Lombok. To me when people say "it's harder to read" I hear "I never bothered to understand an industry standard tool". 
This question comes up from time to time on this sub, here's what I answered last time: &gt;Here are some concepts you should try to understand AND apply: &gt; &gt;refactoring (helpful when adding new features to existing code) &gt; &gt;test driven design (helpful when starting with only business requirements) &gt; &gt;domain driven design (especially helpful when working on larger projects) &gt; &gt;design patterns (always helpful but often difficult to recognize the opportunities to introduce them) &gt; &gt;There a couple of good books: &gt; &gt;Effective Java: [https://www.amazon.com/Effective-Java-3rd-Joshua-Bloch/dp/0134685997](https://www.amazon.com/Effective-Java-3rd-Joshua-Bloch/dp/0134685997) &gt; &gt;Clean Code: [https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) &gt; &gt;Head First Design Patterns :[https://www.amazon.com/Head-First-Design-Patterns-Brain-Friendly/dp/0596007124](https://www.amazon.com/Head-First-Design-Patterns-Brain-Friendly/dp/0596007124) (the GoF book on Design Patterns is a bit too much for beginning programmers in my opinion, just make sure you get the updated version of the Head First book) &gt; &gt;Refactoring: [https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672](https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) &gt; &gt;Then there are a couple of frameworks/tools you could familiarize yourself with: &gt; &gt;Maven &gt; &gt;Spring &gt; &gt;Junit &gt; &gt;Hibernate (or another JPA framework) &gt; &gt;any UI framework but be aware that the Java world still doesn't have a single one that stands out for all purposes &amp;#x200B;
Exactly! It's not just readability (which IMHO is nonsense, I don't believe that is even an argument), Lombok classes are simply mch easier to maintain. It's pointless to even test getters/setters if you're letting Lombok handle them. 
What happens to information hidding principle? How can you assure a loosely coupled implementation if you expose all the class fields?
&gt; it makes code less readable and is just a home project of someone who needed a portfolio. [Yeah, I'm calling bullshit](https://old.reddit.com/r/java/comments/a3at1m/auto_generating_code_in_java_lombok_immutables/eb4y8kk/) The only people who complain about Lombok are the ones who can't be bothered to learn something new. And frankly if you can't 'understand' something as simple as the example I gave there I don't want to work with you.
There’s already some good advice here but I’ll add “Java Concurrency in Practice” too.
&gt; I guess you could call me an "Intermediate Programmer". Sincere question: what did you actually build?
cool, I want to work with people who follow solid and kiss only, you cant even imagine how much positions I rejected after I saw the code for first time. Stupid plugins instead of hard but readable code, spaghetti code using terrible IDEs and again stupid plugins. When you will reach medior status you will know how much these fads suck when some junior like you comes on his first day to work and starts demanding or loudly complaining about some hipster bullshit.
what defines an "intermediate programmer"?
&gt; cool, I want to work with people who follow solid and kiss only Good. So I can recommend Lombok; it creates code that is simpler with less of a maintenance burden. No need to test getters/setters anymore. &gt; some junior like you Sure... I have no problems with Lombok and *I'm the junior*...
Well, AWT is as native as you can go. AWT took the "lowest common denominator" approach with the controls and components it offered. SWT didn't want to have any of that and they implement a control natively if its supported by the target API or in Java if it's not. The advantage is that all UI targets have all the controls (you have tree available in Motif/CDE for example), the disadvantage is that some UI targets will be slower than others. While I personally like the design and development model of Swing more than SWT, the superiority and speed of SWT is undeniable. What people like the idiot you reply to see, however, is the behaviour of a super bloated IDE, with every plugin ever created installed. And that's true, a bloated IDE will be slow no matter how you look at it. Unsurprisingly, the much loved IntelliJ Idea IDE suffers from the same problem, and it has the same solution as eclipse: don't install every single little shit in your IDE. It is perfectly ok to have one instance/installation of Eclipse for Java, one for JEE, one for C++, one for Python, another one for ... whatever else you work on, just like IntelliJ has. 
From the article i do not understand how it works at all. "Integrating native rendering pipelines" .... doesn't tell me anything. What do I draw? How do I draw? In java? In C/C++ via openGL or some other library? How do I talk with the component? Maybe some documentation would help.
I didnt say it was or was not swing. I said it looked like 1995 Swing vomit. &amp;#x200B; Real men work in dark IDE's
**Subreddit rules** + **Do not post tutorials here!** **Removed**
System design for scale, availability, fault tolerance - different approaches to building larger systems using queues, different persistence mechanisms. Practice building a variety of distributed systems with a virtual cluster on your laptop. I have encountered the "design a link shortener service" question a few times. 
I use Lombok a lot and since jacoco 0.8.0 you can even ignore Lombok generated code.
The first one for the private key doesn't work. I was previously trying to use OpenSSL because all the documentation I've seen online says that is a required step.
How do I use this tool to accomplish what I am intending?
Now you got handle over the API, try and figure out how stuff works by reading the source code. Peel back the layers!! 
The alternative is [zxcvbn4j](https://github.com/nulab/zxcvbn4j). Not sure which is better.
I may be biased, but there has been a ton of work put into Nbvcxz. It is more than a direct port of zxcvbn, and has more powerful algorithms implemented and some foundational algorithm fixes, as well as being extremely configurable. If you have any questions feel free to ask.
Try: @Data @ToString(callSuper = true)
I used Lombok in many projects and I think it's important to not forget some points about it. * Lombok modifies the AST, which is afaik not covered by the language spec, because an annotation processor is not allowed to modify existing classes. This is a big hack that's not really supported somehow. But no judgement here. * This is also the reason (?) why you need special IDE plugins to work with Lombok. From my experience, occasionally there are subtle problems with the common IDEs, for example showing you red error messages even though the code compiles fine. There are many people out there that never had any of such problems, so many people will tell you there aren't any problems. * I experienced a hand full of cases where I used annotations like Builder, that resulted in compilation errors for the project. The error msg was cryptic and at the end I had to delombok (very nice feature!) the construct and generate the corresponding java source code. Again, there will be many people telling you there are no problems... which is true, until you know better. All in all, I always have to ask the question, if Java as a language is not enough, why not instead take a look at other languages, for example Kotlin or Scala, that really take everything to the next level and give you a ton of additional benefits on top, for example Null safety or coroutines, data classes in Kotlin? Or the ability to write builder-like constructs just like named parameter usage or function chaining in all other places of your code? If that's not really an option for you, I can recommend Lombok. Most of the time, it will work without any problems and it will probably solve what you think your problem is :)
I agree completely. lombok is, in effect, a dialect of Java and an odd one at that. For all its claims of removing boilerplate, etc. you end with a bigger moral hazard in that all the ceremony is moved to opaque bespoke annotations that don't give much indication of what they're implying. At our company, we end with model classes that look like this: `@AllArgsConstructor(access = AccessLevel.PRIVATE)` `@NoArgsConstructor` `@Builder` `@Data` `@FieldDefaults(level = AccessLevel.PRIVATE)` `public class FooEntity {` `int foo;` `String bar;` `... etc.` `}` This is a worse experience. Forget one little thing in one of those lombok specific annotations and suddenly you've lost encapsulation and immutability without realizing it. Further, try using your IDE to find the usages of the getters/setters that are auto-generated.
I'm curious ... How much time have you invested in it so far?
Change to a light theme for the 10's of millions of humans who have a hard time reading text in a dark theme and it might have a chance.
&gt; java is now the lightweight, responsive option? Yes it makes for a great cross-platform GUI solution. It is tons faster and less resource intensive than Electron which is running a browser as its runtime. There is simple is no way you can possibly think Electron is more lightweight than Java. 
Don't let the naysayer get you down. Some people just have no vision and like the status quo. (and keep fighting the good fight against the garbage that is Electron!)
Hi! I've been working on it since January. University takes up most of my time, though.
Hi! Yes, a light theme is definitely on the list. Feel free to contribute if you can (it needs just CSS). I've got a rudimentary theming guide in the repository. Planning on documenting it better in the future.
Thx for feedback ... First paragraph sounds like confirmation that my (chosen) approach is OK. As for the second paragraph &gt; ... since each of them has its own database anyways Well, in my case multiple WAR apps actually access same DB. That's why I'm sharing one JPA layer library (JAR). &gt; If your team can't handle the multi-war approach, this might also indicate that you should not use this approach, but should for look for other solutions There's no real problem using this approach (other than mentioned eclipse validator, which is no biggie). I'm just curious what other approach(es) you have in mind. I would add here that I'm not building microservices currently - for those, sharing data in DB would be, I assume, a bad approach.
If you're working alone or on a very small project, and you have an eagerness to learn, then every additional feature that a product like this has is more money in your hand, and any of its sharp corners only sting temporarily until you learn them. I believe that when working in a larger context, things are considerably different. Each rough edge and even each feature you didn't strictly need becomes a liability, just that much more burden for everyone on your team who is trying to understand and maintain code they didn't write. This is especially true of things like Lombok that use unusual extralinguistic mechanisms. This is why we felt that there should be a tool for generating plain-old value objects (the kind that in the future will become Java "records") that was as simple, straightforward, and unconfigurable as possible, and worked as naturally as possible together with the Java language as it is designed today. We put our ideas through many rounds of very strict review, and in the end out popped [AutoValue](https://github.com/google/auto/blob/master/value/userguide/index.md). The basic idea is that you provide an abstract class, and the generator just implements it. I believe it's the lowest-magic solution possible to this problem (without sacrificing performance). We are very happy with it inside our own company, where it has hundreds of thousands of usages. But yeah, this is a *very* different design center from Lombok, and even from Immutables, and may or may not be what you want! 
Thanks! :) Electron really is an abomination. JavaFX is a great choice: it's complete, cross platform, lighter. The only thing holding it back is Java's image and Oracle's lack of interest in it (though I'm looking forward to trying it out in more recent versions of Java). They have a fantastic platform on hand but they're simply unwilling to push it. Hopefully Kotlin/TornadoFX can solve the fashionable part and maybe then Oracle would show some love. Also excited to see Flutter on desktop. Just saw their demo from yesterday and it looks really promising.
Do you have a personal passion project that you're using all this wonderful knowledge to build? If you're between such projects, looking for your next is my #1 advice to you. There's no knowledge like the knowledge you gain in service of an ambitious goal.
My solution, probably not pretty, but it works. import java.util.List; import java.util.Scanner; import java.util.stream.Collectors; import java.util.stream.IntStream; public class Main { public static void main(String[] args) { Scanner s = new Scanner(System.in); System.out.print("How many rounds? (10-1000): "); while (!s.hasNextInt()) { System.out.println("invalid input"); System.out.print("How many rounds? (10-1000): "); } int rounds = s.nextInt(); s.nextLine(); if (rounds &gt; 1000 || rounds &lt; 10) { System.out.println("invalid input"); return; } System.out.printf("1) Switch%n2) Stay%nChoice: "); while (!s.hasNextInt()) { System.out.println("invalid input"); System.out.printf("1) Switch%n2) Stay%nChoice: "); } int ss = s.nextInt(); s.nextLine(); if (ss != 1 &amp;&amp; ss != 2) { System.out.println("invalid input"); return; } List&lt;Boolean&gt; results = IntStream.rangeClosed(1, rounds).parallel().mapToObj(i -&gt; { int door = (int)(Math.random() * 3 + 1); int choice = (int)(Math.random() * 3 + 1); if (ss == 2) { return door == choice; } choice = (int)(Math.random() * 3 + 1); return door == choice; }).filter(r -&gt; r).collect(Collectors.toList()); System.out.printf("Rounds:%nWon: %d%nLost: %d%n", results.size(), rounds-results.size()); System.out.printf("Percentage: %d%%%n", (int)(((double)results.size()/(double)rounds)*100)); } } 
Speed and worktree support
&gt;our IDE I just now tried finding usage of one of the getter generated by Lombok in Eclipse. From the outline view, I just clicked "Ctrl+Alt+H" on the getter Method. And it worked perfectly fine. 
&gt; Generated code is hard to beat What? Having it built into the language beats it in every way.
By "in-principle" I meant "a priori", not "in a principled way." IOW my observation is not of a moral nature.
JavaFX is fully open sourced so Oracle's lack of interest doesn't really matter. Are you providing a runtime with Everest? That way users don't have to have java pre-installed to run your app. Java's image problem is totally undeserved. 
I believe @Accessors basically does this
See then I don't get all the fields from the super class when I call toString though right? :(
&gt;@Slf4j Well that's something to look into 
It will find getters and setters and field level uses. The IDE can't differentiate.
No. Go find the neat little bugs in that implementation. Delombok your code and you see exactly what it does. 
A past team I was on relied heavily on Immutables, and we really liked the shift to immutable value objects and builder-style object creation. May not be everyone's cup of tea, but having Immutable objects just removes a whole class of mutation-based errors. &amp;#x200B; Lombok is great too, just a different approach. It can be a bit fiddly with Intellij &amp; the Lombok plugin, there are times where it just seems like it doesn't understand and won't navigate to the proper member. To be fair, it's been a while since I used it though, maybe it's better now.
&gt; JavaFX is fully open sourced so Oracle's lack of interest doesn't really matter. True, but are there any other parties contributing to it? &gt; Are you providing a runtime with Everest? That way users don't have to have java pre-installed to run your app. Not at the moment, but I'm planning to do that with the next alpha release, which should happen very soon. Will probably go with AdoptOpenJDK or Amazon's Coretto.
&gt; No. Go find the neat little bugs in that implementation. What about the "neat little bugs" in all the other language features that you pretty much have to trust blindly?
Sometimes, data is just data. Even in Java. See project Valhalla.
Hm, if this is like postman, why not make a we app where users can login and use this? Would make more sense since postman discontinued their web app stuff. 
This looks great, even though I won’t be able to use it until OAuth2 support lands. One question: Why did you decide to use node for Summit? One would think that server-side stuff is where Java really shines, having frameworks like spring, dropwizard and so on.
I had created that repo earlier but will be deleting that. I agree that Java would be a good choice, but I'm interested in trying out Golang which I've grown to be a fan of. &gt; Also: Only two tests? Dude... Unfortunately, I lack experience writing unit tests. Definitely something I need to get better at. For what it's worth, I do test it manually pretty hard. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/a3e1k6/simplifying_the_method/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
looks great, I admire you because whenever I try something with javafx it ends up looking like shit
&gt;Do you recommended certain books/ concepts that would allow me to become an "Advanced Java Programmer"? I suspect your DVs might be coming from here :) We've all seen a lot of "advanced" Java code that was enterprisified for no good reason. In an effort to prove themselves, intermediates try to find the most convoluted "clever" java patterns and then rush out to apply them everywhere. We all did it. I wager every person reading here who is a "senior" did it once before discovering what a bad idea it was. Instead of striving to be advanced, may I suggest you strive for excellence in programming instead. Install SpotBugs. Write unit tests. Document your code. Learn how to set up a really tight build pipeline and processes that prevent bad code from getting into a project to begin with. Learn how to build reusable classes and methods that never break, ever. The tedious, dull, methodical stuff. Every Java developer everywhere will love you if you do this. Including yourself. You can always be proud of your "good" code that wasn't rushed out under tight deadlines :)
I think OP is just surprised to see a landscape where java is the fast option.
By intermediate, I meant that I have more experience than a beginner, but less than a professional who does this for a living. I have come a long way I still have a long way to go :) As for what I have built using Java, I would say that my biggest personal project is using the JDA library to make a fully functioning Discord Bot.
Ah right, because you implied a 'medior' level experience when you're a beginner. Which is fine. But frankly if I were you I'd focus on building actual stuff with what you learned. Just reading books alone is really interesting, but you need to apply what you read in 'real' code , otherwise you'll just forget it. 
I've only used zxcvbn4j before (wasn't aware of your project) and it did work fine. I think I prefer the direct port more because then the results will be the same when I use the Javascript version in the Web. But otherwise I probably don't really care as long as it works. A comparisons of features and performance obviously would be interesting, because on github, both projects look very similar in terms of size and support. 
Aside from his butthurt, he's right. Lombok is a terrible experience, good luck debugging things that are not there or working without plugin. You can justify Kotlin usage because it is a whole brand new world, and not a lipstick on a pig, like Lombok.
Not a valid comparison. Add multiple annotations like NoArgsConstructor and others and it becomes a clusterfuck. Lombok never was and will never be an industry standard tool. 
&gt; Lombok is a terrible experience, good luck debugging things that are not there or working without plugin. I've literally never ran into problems with stuff Lombok generated. The biggest issue I had with it was that it blocked us from updating to Java 9 for much longer than it should have. &gt; You can justify Kotlin usage because it is a whole brand new world, and not a lipstick on a pig, like Lombok. I definitely agree that moving to Kotlin is a much better option, even if you only use it for DTO's. I managed to introduce it in my current project (probably my biggest achievement, I'm a big Kotlin fan) and people are generally enthusiastic about it. In the previous project the non-technical CTO (yes really) was 'against' it for the sole reason that it was hard to find Java developers and harder to find Kotlin devs. A few Android contractors quit because they weren't allowed to use Kotlin. The project before that was at a large bank with a lot of really conservative in-house devs who disliked even Java 8, Kotlin was an absolute no-go there. Here in holland we have a saying "you have to row with the oars you've got"; getting Lombok into such a project is generally easier than getting Kotlin in.
&gt; Not a valid comparison Yes they are? They are a 100% functional match. You can't add a @NoArgsConstructor on an immutable value class anyway. &gt; Lombok never was and will never be an industry standard tool. I'm a consultant and I've encountered it in most of the Java projects I've been on. It improves QoL greatly for devs. It's fine if you dislike it for some reason; you don't have to use it. But be prepared to be in a minority. 
&gt; No. Go find the neat little bugs in that implementation. Yeah. I always start with an `if(1 == 2) { System.exit(1); }` in my code to make sure I'm not working with a buggy JVM&gt; 
Well, I'm an Android developer, so we're on a bit different tracks. When I was getting started there was an Android project with Lombok and it left bad taste in my mouth, I've been hating in since then, haha. So yeah, it's mostly personal issue than objective one. I prefer more manageable black magic than Lombok.
&gt; At our company, we end up with model classes that look like this First of all; it's your teams' choice to work the way you do. You don't have to specify field defaults; that's a choice. You don't have to use a builder, that's a choice. But it's still better than creating / generating all the getters, setters, builder and constructors yourself: that's also code you then have to test and maintain. 
I might as well be one of those devs, that quit because they couldn't use Kotlin, lmao.
&gt; Well, I'm an Android developer, so we're on a bit different tracks. Yeah, definitely. I think it's great that in your space Google is pushing Kotlin so much. Even though I'm a "Java dev" according to LinkedIn I pretty much do everything with Kotlin nowadays. It's SO much nicer to write than Java. I'm actually giving a workshop on Kotlin this month for a group. 
I don't know why I clicked this, but I'm absolutely glad I did so I could see this gem: &gt; HashMap is one of the most talked about topics in Java, and it is a unique feature Java has. 
That is a fair reason to prefer zxcvbn4j over Nbvcxz. I do not attempt to maintain bug for bug compatibility with zxcvbn. &amp;#x200B; There are some cool features like being able to set a min entropy by specifying your password hashing algorithm, and a average time you want the attack to take. I'd say the biggest difference that really matters is implementing Levenshtein Distance calculations so the dictionary matcher is better able to catch misspellings of words, or words with letters flipped. For example the password: paxswxrd! With zxcvbn: [https://imgur.com/a/jlRSd09](https://imgur.com/a/jlRSd09) with Nbvcxz: [https://imgur.com/a/OR1uKeb](https://imgur.com/a/OR1uKeb) This has a huge impact on finding insecure passwords which are really just misspelled dictionary words, which turns out to be a huge proportion in general. &amp;#x200B; I am in the process of analyzing a few million leaked passwords and running them through Nbvcxz to see how appropriately they are scored, i'll probably write up a blog post with the results of that sometime soon. &amp;#x200B;
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/101c0pV.jpg** **https://i.imgur.com/jrud9RV.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20eb5h141) 
FYI, bulk of the cgroups support was backported and are available in 8u191 (released 1½ month ago): https://www.oracle.com/technetwork/java/javase/8u191-relnotes-5032181.html#JDK-8146115
Just like Java is the only language with `ArrayList`!^/s
When you leave your assignment until an hour before the deadline...
Because it makes more sense for a REST testing client to be a desktop app than a web app. Actually a web app would make a horrible REST test client (which is why Postman started life as a web app but was moved to a desktop app via Electron).
Thank you so much. Read more awesome contents on [https://www.freelancinggig.com/blog](https://www.freelancinggig.com/blog). Also use FreelancingGig to start your own freelance work.
&gt; True, but are there any other parties contributing to it? Yes, you can follow the mailing list. Pretty sure Gluon contributes heavily to it as well. Keep in mind that JavaFX was removed from Java 11 so you will need to include JavaFX as a dependency if you package Java 11 as your runtime. 
I use AutoValue with [AutoBuilder](https://github.com/h908714124/auto-builder). This is very concise, readable, and simple. This works perfectly for most value objects that are immutable, e.g. internal to a class or a response holder. I use [JsonSchema2Pojo](http://www.jsonschema2pojo.org) for APIs, where the object should be mutable and serializable. I use [jOOQ](https://www.jooq.org) for database access, which generates record classes. AutoValue serves my purpose well enough that I never had a reason to try Immutables. I'm sure once Java adds records then I'll switch to that; hopefully there will be a builder syntax. I've heard mixed reviews of Lombok due to its compiler hacks, but never tried it either.
Huh? They're pointing out that your article contains incorrect information.
Plus I want the requests I make to remain private, on my machine, and not captured by another company/entity who can then mine my data (or worse)
It was not a good start.
**Subreddit rules** + **Do not post tutorials here!** Also, we don't want low quality content here, which the article clearly is. It is filled with trivial statements that are even wrong (`HashMap` is not unique to Java, it just is named differently in other languages). The article offers absolutely zero value and is worse than the official documentation. Please, refrain from further posting here. **Removed**
Not a critism but just an obervation. Running in on Windows 10 with Java 8, the javaw process holding Everest takes 160 MB RAM just after launching the app and doing nothing. Not that RAM is scare on my 32 GB RAM PC but doesn't put it in Electron territory RAM wise ?
Pretty cool. I made an [Arch Linux package](https://aur.archlinux.org/packages/everest/) for it.
A server doesn't have to be involved in a web application. It can all run locally (like Postman).
Is it possible to use multiple partitions with JMS like in Kafka? Will it be possible in future? Will there ever be support for functional languages?
With callSuper=true you DO get those. Well, you get the output of the superclass's toString method injected into your class's toString method, and those should have all the fields listed. 
Sonofabitch you know THEY HAVE A WARNING for the @Data annotation that says some shit about EqualsAndHashcode but not that? Thank you kind stranger. I've probably used lombok like 3 years and I'm just now finding out toString has a callSuper field
No, the outline view. Literally the 'view' (as in, window menu, the 'view' option) named 'Outline' (pick the one named 'Outline'). In this view, the generated getter is shown as one of the members. You can invoke 'find callers' from there. For most lombok annotations, hitting the keyboard shortcut for 'find callers' on the annotation itself also works. For something like `@Data` which represents lots of generated methods you have to resort to the Outline view.
The amount of code generated by all those annotations _FAR_ exceeds doing it by hand. `@Builder` alone, if done by hand, implies north of a 100 lines.
&gt;Well, in my case multiple WAR apps actually access same DB That is actually a problem because each `war` should own its own domain model. Example: from one perspective it is a user, but from the other domain it is an employee. Even though they are the same in the real world, the domain language defines a different name for the user. &gt;I would add here that I'm not building microservices currently Even in a non-microservices environment, you can build a modular monolith. &gt;I'm just curious what other approach(es) you have in mind. There might be merit for quick prototyping or greenfield projects, but this will not scale later on. Decentralizing a database after the fact is quite difficult because it is so convenient. If the employee requires a new field like `employeeNumber` the user will also get it even though it is totally uninteresting for the user.
There are much better tools for this. Immutables for example, where you declare an interface and the annotation processor implements it for you. This produces much more natural results than lombok.
The JIT compiles it twice. Once a hotspot code is identified as using a disproportionate amount of cpu, it is immediately and quickly compiled by C1 into quick and dirty native code. It is also schedule to be compiled again by C2 momentarily. When C2 comes along and recompiles, it spends a lot of time to create very good and specific native code for your particular processor.
I use IntelliJ. What IDE are you referring to?
 So I have no vision because I disagree that this project is comparable to Postman? Down voted because I offer a different view on the project? So many people are afraid to be honest because of replies like this. I am not a naysayer, and per Rohits response, I now have a bit better understanding of why this project has come about.. something I didnt have at first, nor did I get the impression from reading the repo Readme. 
 Thank you for the details. I didnt grok that from the readme or otherwise, so my initial response is based on what comes across as this is a comparable and better API client than Postman. With your response, it gives me a better idea now and I say carry on. I actually had a very very similar idea years ago, but ended up not pursuing it as the Postman team was pretty responsive with fixes and feature requests. &amp;#x200B; I dont necessarily agree that Electron is a bad platform. That you can build a single UI in ReactJS and run it on the web, on mobile and in a desktop wrapper is fantastic. I dont know if there is a better way to wrap a desktop based application that gives native capabilities while still allowing you to build the UI in a single cross platform and cross device UI technology. I would say if Electron is truly becoming a slug, I hope they continue to fix it because it does offer a way to do what I just said, and as someone who enjoys working in React far more than other UI options, I like that there is an option for me to provide a more native desktop experience should I need or want to use it. JavaFX has felt like a step child project since its inception to me. It was basically a way to replace Swings failings, while trying to keep up with the web tech at the time it came out. I dont feel it is nearly as fast to work with as React, and with most mobile devices now able to display the full chrome/web kit experience in the browser, as well as native wrappers for ios and android, the ability to build nice UIs that work in every modern day device, quickly, seems like a win win to me vs using something like JavaFX. I know there will be those that would hang me for saying something like that.. I used to be that way back in my Swing days when people were telling me Swing is dead, switch to HTML 4.. etc.. and I couldnt understand why a cross platform mostly decent but somewhat sluggish UI option for desktop apps was considered failed. Still it lives on today, though far and few between use Swing for much anymore. &amp;#x200B; But for sure, you knew JavaFX.. I totally agree with your assessment. It may not match todays fancier modern web UI tech, but it works, you know it, and have contributors that are on board, so why not. Like I said, competition is good. I hope you stick with it after you graduate and build it into something great! Best of luck.
For those who may be unaware, Java is continuing to incorporate more features found in functional languages, such as [records](https://cr.openjdk.java.net/~briangoetz/amber/datum.html) (“product types”) and [pattern matching](https://openjdk.java.net/jeps/305).
Hey man, I wrote you before and gonna put it here again: The one thing I need is a VCS/git friendly file format. I don’t want the team license thing others sell and the custom server to sync the stuff. Just make sure I can commit all the config into git. This is how I share everything with my fellow devs. You can add them to projects, like you do with postman collections. This would be your selling point. Restlet client, Postman, Paw. They all want me to subscribe to their team thing and I just want to use our git server.
You have a much more complicated version. I am still working on my own, but i could say right now that mine is a bit more basic. 
Lol, was this ever a question?
No builder syntax for records, but we should be able to ship a version of AutoValue that lets you use only the builder generation part together with a record.
I really can't tell what point the author of that post was trying to make under all that tasty, tasty word salad. I think the point where I lost it was where he holds up Spring as an example of high quality code. Now, Spring is a very useful library but anyone who's even glanced at the internals of it knows that it is a creaking structure of layers upon layers of hacks - all very necessary to support all the special cases and functionality that Spring gives. But good code? Hell, no. All in all, it comes across as just a rant by one guy who hasn't really worked much outside the mainstream of mediocre consultant-driven development.
Can't speak to all tools, but AutoValue lets your accessors be non-public. Unfortunately they do have to be package-visible, but that's at least a lot better than public.
just give us tuples 
Oh really? That’s awesome. Thanks!
For as much as that blog avoids those scary fundamentals by Dijkstra, the author needs to pay attention to this one: &gt; Besides a mathematical inclination, an exceptionally good mastery of one's native tongue is the most vital asset of a competent programmer. Because holy balls, that rambling blog... It's like the Time Cube guy was asked his opinion on software.
And GADTs. And hygienic macros.
&gt; Now, Spring is a very useful library but anyone who's even glanced at the internals of it knows that it is a creaking structure of layers upon layers of hacks - all very necessary to support all the special cases and functionality that Spring gives. But good code? Hell, no. Oh, thank you! I've been trying to learn Spring by looking at the code and following things through in the debugger and the whole thing seems horrific. I'm sure it's super easy if you *know* it, but when I'm trying to debug it all code goes to Spring internals to die. I'm balls deep in a $Proxy class stepping through lines I can't see trying to figure out what the hell is going on or praying the code somehow returns to something familiar... 6 hours later I discover Session.flush() is breaking the app and I *know* that extends from some code or configuration issue but mainly I'm just wondering how hard it would be to rewrite an ERP application from scratch without Spring....
Haskell? "Stay relevant"? When was it ever apart from some niches?
wtf 400k
&gt; I really can't tell what point the author of that post was trying to make under all that tasty, tasty word salad This can be applied to 99% of Medium articles regarding software development.
Assuming delombok is totally bug-free to begin with...
Even JetBrains is refusing to add any sort of macro support to Kotlin, so I wouldn't hold your breath on that one.
@annotations !!! &amp;#x200B;
This doesn't really treat the "Switch" option properly. If you choose to switch after a "wrong" door is revealed, you'll only have one choice to switch to. This implementation just rerolls the choice from scratch, allowing both the known wrong door and the currently chosen door to be chosen again.
Thanks Kevin - Manes here. Would you consider incorporating something like `AutoBuilder` for convenience directly within AutoValue? I commonly don't need richly customized builders and when I do then I use AutoValue's syntax. Otherwise I almost always use an auto-generated builder as cleaner to read code, less boilerplate then writing it by hand, and clearer than factory methods. Its helped popularize `AutoValue` throughout our codebase.
Brian Goetz talks about tuples [here](https://www.youtube.com/watch?v=Tc9vs_HFHVo&amp;t=15m54s), and why they will provide less benefit than [value types](https://openjdk.java.net/jeps/169).
Brian Goetz discusses macros, and why they likely won’t be added to Java, [here](https://www.youtube.com/watch?v=oGll155-vuQ&amp;t=56m36s).
Even if Lombok turned out to be buggy, getters/setters generated by an IDE would still be available.
Eclipse
Could do: - Create a keystore and import the certificate and key - Convert existing keystore to correct format It has all the functionality that keytool and openssl have, but with a convenient interface instead of arcane commands that apparently don't work everywhere.
Learn to read other people's code and understand how it works an how it came to be. For example, you could pick a project on GitHub and figure out how it works and, if not explained, what its authors created it for. You will learn a ton because it exposes you to usages of the language constructs and libraries in practice, and the compromises and tradeoffs that are often required. This is the most important skill you can develop as a programmer because most software in the world is legacy software\*: software that you inherit and have to maintain, often in spite of lacking complete insight into how it was supposed to work in the first place. Because even if you'd want to rewrite it, you'd have to know what exactly it was doing in the first place. \* Even if it is written by yourself to your highest standards, it will often become legacy as soon as you're off the project for some months or if the requirements change. 
I think erlang is even more relevant today than it was when it was invented 30 years ago because of scalability needs. Java is a mainstream general purpose language, while erlang is only good at doing some things really well and not because it's FP language, but because of how it works and OTP. Elixir is getting a lot of traction recently for these reasons and I don't see how the JVM will ever replace it, even with amazing VMs like azul and frameworks like akka or vertx, it simply does it better and leaner. I love Java but it can't do everything better so there will always be use cases where you need specialized languages.
A build container of 2GB is crazily big. It sounds like the local Maven repository is baked in, isn't it? Usually, there is no need for that as long as you don't use `maven install`. Instead, it should be kept in a volume or in a bind mount to the host filesystem. Furthermore, none of the build tools are required in most deployment environments. Servlet containers are really the oddballs here because they require a JDK to compile JSP files.
It’s ridiculous, yeah. The issue that I had heard with multi-stage builds is the image is always pushed to the repository no matter what, so there’s no way to drop the one you’re handing off from.
This is why I love compile time dependency injection (like dagger2) . Yes, by definition it has limitations compared to runtime DI, but it generates actual visible code you don't go completely insane stepping through, and if you fuck up DI config you get compile errors instead of exceptions at runtime. It's been a learning curve, but I don't miss spring DI from XML. I get it's appeal though, from the usage perspective, especially when combined with other parts of it (like the persistence stuff).
Having used Spring and DropWizard, I much prefer DropWizard. DropWizard seems to me a more neutral collection of some of the best tools for each job, and it's both simple and easy. Spring is just Spring, Spring and more Spring, and while it's easy, it's not simple- there's a lot of magic.
Hint: it's easier to debug your code with Spring if you declare all the injected classes' public methods in an interface and inject the interface instead. It's ugly, but much cleaner than the mess Spring creates when you don't.
Erlang and Haskell were never really relevant on a large scale.
Spring is far more than an IoC container. Most of the issues that /u/Notorious4CHAN is seeing is not going to be in the IoC container. 
&gt; This can be applied to 99% of articles regarding software development. FTFY. Medium is just a blogging platform. There's lots of incomprehensible articles posted on other websites. You just notice Medium more because they're usually on the same domain.
&gt; I really can't tell what point the author of that post was trying to make under all that tasty, tasty word salad. Oh good, it wasn't just me. If I can't understand the author, I'm at fault. If lots of people can't understand the author, the author is at fault.
I can't remember if it was Brian or Mark, but one of them was discussing adding features and their first question regarding adding a specific feature is "why do you want it?" and then seeing if a more generic feature will resolve the problem better than that feature. For example, rather than adding properties, they're adding data classes/value types.
This post breaks r/Java's rules. It is better suited for r/JavaHelp.
Oh okay, thanks!
No problem!
I believe this is correct. I *think* the problem extends from AOP.
And they're adding them bit by bit, so we get the syntax that is ready, even if we don't get everything, so we're getting switch expressions as a preview in Java 12, and we should be getting obj instanceof Foo foo syntax or something very similar very soon (13 or 14). This will remove something like 90% of casts from existing code, because often the first thing you do after using `instanceof` is cast to the type you just checked for. 
With Java getting fibers and continuations in the next couple of years, Java may eat into some of that scalability space. 
Yep! We're also getting the [Raw String Literals Preview](https://openjdk.java.net/jeps/326).
&gt; Hey man, I wrote you before and gonna put it here again: I don't recall, must've missed it. Sorry about that. That is actually a novel idea. This should be pretty straightforward with Everest. Everything needed for maintaining state is present in `Everest/config/`. You could add that to your version control. Though, my experience with Django/SQLite/git says that the database file might not be very VCS-friendly, I'm afraid. Could you try this out and let me know over email (it's on my GitHub)? Thanks!
Maybe [this talk](https://youtu.be/A-mxj2vhVAA)? I do remember him talking about keeping features out, and choosing features carefully.
Thanks! :) Yes, I'm afraid JavaFX isn't the lightest thing around. Even a Hello World app with just a button on the window eats 70MB. However, it's still far away from Postman's 400/500MB start. Also, I've optimised the tab system very heavily and it re-uses a lot of memory. I've written a long, technical piece about it [here](https://dev.to/rohit/how-everest-orchestrates-pseudo-tab-switching-49gp) if you're interested.
Yeah, Spring internals are not a good way to learn Spring. They tend to be complicated because they need to be flexible, but provide an easy programming model for the developer. I'd add Spring to sausages and laws on the things you don't want to see how they're made. This wouldn't be an issue for the developer, until something goes wrong and you need to figure out how its gone wrong and why. Then you're waist deep in that crap. They do at least acknowledge that it can be an issue, and do things like the Spring Boot user friendly startup error messages. 
lmao! he is no stranger. @rzwitserloot is the creator of lombok.
Possibly. They've been doing a lot of good talks recently, and some of them have been similar or repeated talks at different conferences, so I've learnt a lot, but it's really hard to remember which specific talk a specific point was in. I was impressed that you managed to link to so many talks in this thread. :)
don't go in spring internals, there's nothing for you there. on the other hand, spring is wonderful amazing and i wanna have its babies. it does and can do a lot. and by that i mean A LOT.
Yeah, I was mostly ignoring that one because it's not really FP inspired. But it's still massively welcomed. 
They have had many great talks! I try my best to remember which talks mentioned what, but sometimes I have to do some searching to find the particular segment, haha.
Yeah, that is understandable.
Wow thanks! :) Would you be interested in making Debian and Fedora packages?
Thanks! :D
&gt; Yes, you can follow the mailing list. Pretty sure Gluon contributes heavily to it as well. Thanks! I'll definitely join that.
This one gets into some things you probably haven't seen yet: https://www.amazon.com/Covert-Java-Techniques-Decompiling-Engineering/dp/0672326388/ref=sr_1_1?ie=UTF8&amp;qid=1544061433&amp;sr=8-1&amp;keywords=covert+java
This is one of my biggest gripes with Java. I often wind up creating static inner classes that only enforce a design pattern by by convention when really what I want is a generic enum. 
Haskell and Erlang are relevant? 
Aren’t heaps of social media applications written in Erlang? I know WhatsApp is, I think Instagram is also. By applications, I mean the server side (not sure if you can push an iOS app in anything but swift/Objective C)
Anyone who I work with that tells me they use java with lombok, I kindly introduce them to Kotlin because it looks much more natural to read, (personally) feels much more natural to use, and does what lombok does without all the annotations mucking up the screen. Plus its 100% interop with java so theres really no downside to using Kotlin instead of java+lombok. &amp;#x200B; Java always felt a bit wrong to me, and thats probably because its stuck 25 years in the past with their backwards compatibility policies. It just feels old, and lombok does try to bring some modern features in to Java but it does it in the wrong way. It looks kinda wrong, and its hard to debug because it does hacky stuff not according to spec to achieve what it does.
Ill never understand people who reject Kotlin because "theres less demand". Ive written java code since 2009, and switching to kotlin in 2016 was the single greatest thing to happen to me. I could use all my old stuff (though I didnt because honestly I was garbage because I was like 13 at the time), but I could write something modern and beautiful with less lines of code. No more writing getters and setters for everything, no more typing \`new\` and using semicolons everwhere when theyre unnecessary. And using lambdas with receivers as well as using lambda notation outside of the parentheses for the last functional parameter looks SO good and feels so good. &amp;#x200B; Also from what I've gathered when talking to interviewers (I talk to them for the places I intern for just to kinda get an in on what they ask and why), and a lot of them ask how quick others are to adapt to a new language. And the team leads who I would so graciously buy coffee for would also note that the Java guys switched to writing effective kotlin code in around 2 weeks at worstt, a few days at the best. It just seems like a no brainer to at least allow some devs to use kotlin if they want to.
Are you trying to create a Spring Framework alternative? Or just use it? If latter, why are you trying to learn through the code and not the documentation?
The latter. And I have to actually work on a customization of an application built on top of Spring. And a lot of the time when something breaks, the exception is thrown from deep within Spring or a proxy class, and while I'm not *trying* to learn Spring as such, I do have to sort of defensively understand it enough to support our application.
Shot in the dark - what if you add the `-passout pass:[PASSWORD]` to the commandline? Generally doing so is considered insecure (shell commands stick around in history somewhere, etc.) but this might be a bug with openssl on windows terminals not handling password prompt?
Especially when the title doesn't say anything about what the library does and links to a changelog. 
[Interface Implementation Enums anyone?](https://pastebin.com/A2xyGMZw) 
Or an Either, or a Try
Oh....wow..that's kind of amazing 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I hope you're not suggesting to annotate interfaces with spring annotations? As this is bad practice. You have to **annotate concrete classes**. Anyhow, regarding interfaces and spring. Spring has two types of proxies: \- **JDK Proxy**: API is built into the JDK. For this proxy, the Java **interface is required** \- **CGLib Proxy:** This is NOT built into JDK. Is used when the interface is not available. &amp;#x200B; JDK proxy essentially creates a proxy class which implements the same interface of target class. Only methods declared in interface can be proxied. CGLib proxy extends target class and overrides methods. That is why with CGLib, classes cannot be final nor their methods. As a fun bonus tip: Classes annotated with @Configuration are CGLib proxies.
Hi, I have to migrate our application from JDK 6 to JDK 11. As you have done it can you please elaborate what was the major impact on application. What issues we need to take care of ? Your experience will be valuable for me.
I would strongly discourage against Lombok. As already stated it introduces a semi-Java language that brings in a lot of experimental stuff. All of these will have to be evaluated and agreed on by your team-mates (for the god of love do not allow all annotations, some are pretty hairy) creating a lot of bikeshedding and non-productive hours. The biggest drawback that I've found is the inability to coexist with Kotlin making migration almost a no-go for larger codebases. When you're eventually ready to try out Kotlin, you'll find yourself in a dead end and wish that you just used it from the beginning instead. Nowadays I personally see all frameworks / libs that uses annotations as some kind of magic evil as you can most often get the same benefits using language constructs. No one said that it is forbidden to create immutable objects with public final fields if you just want to get rid of getters for the cases where you want to expose your inner fields. It's perfectly fine and you'll probably end up liking it. Same goes for DI which you really don't need Spring for.
Most of springs complexity has nothing to do with DI. It also doesn't require xml at all. Dagger2 is also very limited in features compared to a full di container like guice.
If you wish to defend Java's future relevance, erlang and haskell are the wrong languages to compare it with.
Some people are here to stay up to date on what's happening, a lot of release posts have very good upvote ratios. I make these posts myself from time to time. Sometimes (if a release is small?) they get downvoted and disappear pretty fast, but if a release is interesting to the community they get upvoted and stick around. I think the current system works. 
You tend to find single components within a service is written in a particular language. Facebook has services written in pretty much every language under the sun.
There does seem to be a chance that the generic enum problems can be solved more elegantly with the [declaration site variance proposal](http://openjdk.java.net/jeps/300). Specifically, by declaring that `EnumSet` is contravariant in its type parameter we can achieve a similar result, with the added benefit that we then also get to treat `EnumSet`s as `EnumSet&lt;?&gt;` or `EnumSet&lt;? extends EnumType&lt;? extends Whatever&gt;&gt;` in more places where it makes sense rather than being forced to deal with erased types every time. I think this was alluded to at the end of [this email](http://mail.openjdk.java.net/pipermail/amber-spec-experts/2017-May/000041.html) (assuming the "Dan" in question is "Dan Smith".) So it appears this has been considered already. Personally I'd like to see an exploration of the feasibility of this also.
&gt; This is why I love compile time dependency injection You should try http://micronaut.io/ then 
Heh... I believe there is not silver bullet approach to this. It really depends on your application. But some advises: * If it's a big application, then I'd suggest to do 6 to 8, 8 to 11 migration, since 8 is broadly adopted and 11 is still new. * If you have application server like JBoss, Glassfish, etc., then you might need to split your applications and run them separately. Like some on old JBoss/Java 6 and some on newer version/Java 8. Because migrating the whole stack at once might be impossible. * Try to upgrade all your dependencies before upgrading java if/when possible. * Double test your comparators :) There was a change between 6 and 8 which we faced. We had comparators(wrongly written of course) where after sorting order was A, B, C, D. And (A&gt;B, B=C, B,C&gt;D). After migrating to java 8, order changed for some cases: A, C, B, D. * Migrating from 8 to 11 might be still impossible if you use some dependencies which does not work with 11.
[Debezium](https://debezium.io/) is n open-source project, developed by Red Hat, whose main goal is to extract change events from database logs (e.g. Oracle, SQL Server, PostgreSQL, MySQL and even MongoDB) so that: - you can push them to Kafka and consume the events in other systems (e.g. analytics, caches) - you can extract the events using the embedded mode, and update application-level caches like it's the case in this article
Yes, and they do it in a bad way, just take a look at Optional, which is not serializable... Like they are saying, here you have it, but try not to use it. And introducing Optional without also including some form of Result (Either...) is like they do not even understand what Optional is used for (error handling). 
&gt; Ill never understand people who reject Kotlin because "theres less demand". What I've seen so far is that there's basically two types of Java projects; the ones where there's a majority of conservative devs, and the ones where there's a majority of devs who are interested in new things. For me a great indication is the Java version they're on: I don't do pre-Java-8 projects anymore. Not just because I'd miss my streams and lambda's so much, but also because these are generally [dead sea projects](https://thesmartlocal.com/read/dead-sea-effect). I know I'm generalising here, but I've seen a strong correlation. 
&gt; Can we please remove these posts? They add no discussion value. If they don't add anything they'll be downvoted and will disappear from the first page in no time. 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The iterator will still be much faster, because you synchronize once on the complete list, while with `get` you will synchronize for each single get call.
One thing I don't see mentioned is support for MTLS - are you able to set client certificates/truststores and call MTLS services using this? If not, that would be a definite requirement for me. It would also be an advantage to be able to import from .jks files to do so (which Postman doesn't support).
Telecom and online gaming is usual suspects when it comes to using erlang.
True although fibers are not the same as the do not do preemptive scheduling.
Fair. I remember reading that a few years ago. I don't believe erlang can do 100% everything for web. &amp;#x200B; Actually, yeah there's PHP and lighttpd: &amp;#x200B; [https://www.quora.com/Is-WhatsApp-fully-written-in-Erlang](https://www.quora.com/Is-WhatsApp-fully-written-in-Erlang)
You're thinking of data types, not value types. Related but not quite the same thing. https://cr.openjdk.java.net/~briangoetz/amber/datum.html And even then data types should currently allow accessors to be overridden.
Oh, switch expressions are coming in Java 12?
Hmm not at the moment sorry... Should be straightforward to do though, and you can host it for free on https://build.opensuse.org
I used to work in telco. Erlang was designed for telephony, phone switches, now even cell data towers, etc. If you get it right, it'll run forever and quickly! 
I like Lombok but to a large extent I feel like if you're going to use that you might as well just go the whole hog and adopt Kotlin.
As a preview feature; you'll need to run both `javac` and `java` with the `--enable-preview` command line argument. This will be more common in the future as the six month release cycle doesn't give them as much time to get real world experience of features as the old release cycle did. But this does mean many more people will get involved in providing feedback.
So, in the game of chairs that is 'overcomplication', it is your opinion that lombok is the one that should take the axe, and not any of the others? Well, that sounds like a rather arbitrary choice to me. Also, from experience I'd say that most java programmers don't use JavaEE, so you might want to update your commentary to include the caveat that you're commenting on lombok use specifically in combination with JavaEE. As far as your second statement, now you're just being mean. Whether we are doing it 'for a portfolio' is, I guess, in the eye of the beholder, but perhaps with some context you'll understand why I feel rather insulted by this statement. We're about to announce professional support for lombok via tidelift (they approached us, because we're one of the most popular java libraries used by their clients), we've been working on lombok for 10 years, and in those 10 years, both Roel and I (the main authors and creators of lombok) have held the same day-job for all those 10 years. Yes, lombok did get us a few major speaking engagements (devoxx and JavaLand in particular); for all of those we got free full passes to the conference but no further compensation (so, those cost us money; we had to pay for the trip and sleeping accomodations ourselves, not to mention no compensation for the extensive time we put into making these presentations). Roel's employer probably did get some utility out of all of this; [TOPdesk](https://topdesk.com) employs many java programmers and also sells to business that employ java programmers. Mine, on the other hand? I doubt it. We are a small outfit that sells solely to dutch general practitioners. They'd be about as interested in java tooling as I'm interested in fly fishing. Because others asked _us_ to do it, we've introduced the possibility to donate to us (via patreon and business licenses). As you can see from our patreon page, this is most assuredly in no way or form adding up to anywhere near what we could have gotten, had we spent the time we spend on lombok on freelance projects. That's to say: Lombok is a labour of love. It is a hobby. It better be, because it sure isn't paying any bills, not directly, and not indirectly either. Other than your comments, the rest of this reddit thread is fortunately very motivating. 
Cool, thanks for the explanation.
So that means that Java 12 doesn't really have a big feature coming with it? At least a non-preview one?
Not language wise, no. Not unless you're feeling brave. :)
`Optional`’s JavaDoc states the following: &gt; This is a value-based class; use of identity-sensitive operations (including reference equality (==), identity hash code, or synchronization) on instances of Optional may have unpredictable results and should be avoided. The hope is to eventually turn `Optional` into a [value type](https://openjdk.java.net/jeps/169), which will not be serializable by default.
Damn, this was the hardest knowledge dropped on me in a while. 
Couldn't you just use the Typesafe enum pattern instead then?
I have seen the repository, and it's a very clean code. if I find some free time I will try to help you.
No problem! Thanks! :)
Eight Megabytes And Constantly Swapping used to be the bloated monster once too. I used to hate Java's heaviness, but now will gladly take it over the JS/HTML/CSS world.
Great video, keep going! Do you plan to do the same with spring cloud?
Extensible enums, please!
The article is about CDI, not JMS. It only mentions JMS because part of the process of replacing EJB with CDI is that a CDI-based alternative to the EJB MDB is needed. And in which context do you mean "support for functional languages"? I suppose any language that can be compiled to run on the JVM should be able to make use of CDI somehow. With Scala, I know you can though I've never tried it so I don't know how well it works.
"beauties" Sure, maybe if you poor bleach in your eyes. 
&gt; I've learnt most of java! ROFL LOL hah hah hah!!! No you haven't young padawan.
[Is there something on this list that strikes your fancy?](https://en.wikipedia.org/wiki/Category:Free_software_programmed_in_Java_(programming_language\)) Go and check out the source tree, hit their bug tracker up, and *do something*. 
&gt; then I discovered javaFx but after doing some surfing on forums realized that it is not a popular technology It should be. No technology starts out popular. It earns it. No one is even giving JavaFX a chance because people are somehow convinced that you can put a not-thin-at-all wrapper around html+css+js and make a good desktop app out of it e.g. Electron. Even though you can't. 
Let's see here: * [This post](https://www.reddit.com/r/java/comments/a3b2r0/payara_5184_released/) is about the Payara JavaEE (JakartaEE will be the next major version, whenever the spec is finalized) container. That's major software, and even a small point release is important. * [This post](https://www.reddit.com/r/java/comments/a324rs/advanced_password_strength_estimation_in_java/) tells us what it's about: a password strength library. Again, that has significant security ramifications, and users of that library should probably update it. * [This post](https://www.reddit.com/r/java/comments/9z4jx4/intellij_201803_released/) is about IntelliJ. If you work in Java professionally, you should be using IntelliJ for your development purposes. Only Eclipse (being free is a big deal) and the JDK itself have larger impacts on the lives of Java developers. Those are the release posts from the last two weeks: one library, one JavaEE container, and one *integrated development environment*. We're fine. 
But what's the point? All the synchronized list's `get()` and similar calls synchronize on an internal `mutex` object, while this iteration synchronizes on the list. The synchronization is bogus and doesn't work as expected. What are we even measuring here? Random things that do not make any sense?
The mutex is typically the same object as the synchronized List. Source code from Java: SynchronizedCollection(Collection&lt;E&gt; c) { this.c = Objects.requireNonNull(c); mutex = this; } The mutex is however a separate variable, so Lists returned for example from `subList` can synchronize on the same original List.
Application is not using any new features of JDK 7/8/9/10. We just want to analyze which libraries or frameworks will have impact. JBoss Spring are one of them that I know as of now. Will update once I get to see code.
Try visual studio code for those big workspaces, lol. Also Eclipse is just an osgi container with bundles. There's no such thing like 'native'.
They can of course be abused, but streams and lambdas let you substantially clean up a lot of code.
I work for a company that makes a desktop application used in healthcare.
We're generating our schema from SQL / JOOQ generated POJOS / other POJOS. https://github.com/quinscape/domainql
In that case my preferente would be to rely on generates code that uses standard features. 
No, I mean using @Inject private MyInterfaceName myBeanName; Instead of @Inject private MyClassName myBeanName; So that we don't need to rely on CGLIB proxies.
We use a couple of different things approaches. First, we give users the option of time-limiting their data so that there are a reasonable number of points in the graph. If that fails, we let people use unreasonable time ranges, bit smooth the data. If all else fails, we tell people to use the export function and plot the data using tools that they prefer. 9/10 times, they want to do the last option any way. If they're going to use MATLAB or Python or IDL to process data, they'd rather just look at the data there. Our graphs were only ever for quickly assessing whether you asked for the right data.
I've only ever seen one really good case where a stream actually cleans up anything and even then it's a nutty case to begin with. If you think lambdas or streams make code "cleaner" then my advice is to write better code to begin with.
If you prefer the giant pile of boiler plate for calling some method in an invokeLater to a simple inline lambda or method reference, I guess feel free to keep pursuing that ideal of beauty.
I like several ideas in this article. However, what I would like to see is more built in stereotype annotations. For example a @Singleton in ejb gives the concurrency and persistence features readily. If the idea is to phase out EJB, it should not force the user to use several annotations and make the code cluttered with annotations. 
The most import thing is to do a lot of projects, its the only way to really master this language
This is perfectly valid at least back to Java 8. enum Foo implements Bar { Foo1( 25 ) { public void method1() { } }, Foo2( 37 ), // note no method implementation for Foo2 Foo3( 30 ) { public void method1() { } }, ; semicolon actually ends the list of enums, not that comma on the line above // it is acceptable for the last enum item to have a comma // so that it is easy to interchange the order of enums. // enum constructor Foo( int arg ) { this.arg = arg; } public final int arg; // implementation for Foo instances that don't override, like Foo2. public void method1() { . . . } } interface Bar { public void method1(); } &amp;#x200B;
No, that isn't at all what I meant. With this, Enums are flexable enough to return interface implementations with different generic types.
Or, you know, you could just create concrete classes and create an instance of that class. It even takes up less lines in the class you use it in if you make it public! Anytime anyone complains about how much boilerplate there is doing things the imperative way they always do things like declaring an int inside a for loop(iterator int itself) or completely ignore private classes and then wonder why their code is so bloated. I wonder why... Pretty sure lambdas violates even the most liberal interpretation of the single responsibility principle too.
That's absurd.
I see what you want, but I don't know a way to make it work. For years I have thought enums that could have different generic types on each element would be useful. Your line: `this.clazz = clazz;` is assigning the same variable to itself. &amp;#x200B;
Interesting... Ours is JPA POJOs auto generated using Hibernate Tools and then graphql-jpa on top. Same result different route :-)
FUUUUUUUCK HIBERNATE.
Atomikos JTA for us.
Just to say thank you four your awesome product
The relationships are configurable because the basic is the JOOQ generated types and there's configuration not covered by JPA annotations as generated by JOOQ (I think) Ignoring relations, Generating both primary and embedded objects, renaming relations. 
[JEP 301](https://openjdk.java.net/jeps/301) &amp;#x200B; Generic Enums could be powerful. Especially since each enum could have a different generic that could be accessed at runtime.
&gt; supported JDK versions -that is 12, 11 The blog specifically mention about Oracle JDK, what about openjdk, is it already removed from the openjdk trusted CAs?
And it will update WHILE running. Pretty cool language. 
This is running smoothly on my machine consuming about 20mb of heap. A very nice change compared to the 800mb or so Postman is consuming on the same machine. Keep up the good work.
As far as I can tell from the JDK sources, they have not yet been removed. https://hg.openjdk.java.net/jdk/jdk/log/94b85ea16cf9/src/java.base/share/lib/security/cacerts (I'm surprised that they store the binary cacerts file in the repo and don't build it from a directory full of PEM files during the build process)
sadly the backend is the easy part, been having more issues with client side.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
sorry, can someone explain why?
From [Google blog](https://security.googleblog.com/2017/09/chromes-plan-to-distrust-symantec.html) linked in the first sentence: &gt; Symantec’s PKI business [...] had issued numerous certificates that did not comply with the industry-developed CA/Browser Forum Baseline Requirements. &gt; [...] it was revealed that Symantec had entrusted several organizations with the ability to issue certificates without the appropriate or necessary oversight, and had been aware of security deficiencies at these organizations for some time.
Also having getters and setters in model itself is probably not the best choice, regardless of the tools.
&gt; The biggest issue I had with it was that it blocked us from updating to Java 9 for much longer than it should have. I believe that's the issue. Lombok relies on JVM hacks, if Oracle decides to finally block them off, you're fucked.
I just use these tools for DTOs. The model remains object-oriented.
You're right, I didn't check the sources thoroughly enough
Except for language evolution and backwards compatibility ;)
Next step: learn java ee 7
Pretty easy to make your own. And the more items you add to a "built-in" stereotype, the less flexibility it has. "Oh I really wanted to use @Fancy but don't want one of the 7 annotations it covers!"
I really like seeing this kind of evidence based article, but the subject always makes me think how we’ve come full circle from JDBC to all those ORMs back to JDBC again.
This is a great read, thanks op. Some of the software at my job inserts data into mysql. If I had to guess, it does so at &lt; 500 records per second... Maybe it's time I fixed that
Did you update your PATH? There is a tutorial [here](https://www.java.com/en/download/help/path.xml).
Yes, my path is set to "C:\\Program Files\\Java\\jdk-11.0.1\\bin"
try-with-resources saved JDBC IMO. I used Spring jdbctemplate pretty heftily before switching up to Java 7. However, afterwords, I just can't see the point. The JdbcTemplate ceremony saves something like 2 lines over straight JDBC. As for other ORMs. They just don't buy a whole lot for all the promises they make. Switching Database providers almost never happens (How often have you switched from, say, postgres to MySql?). They are often, in the best case, nearly as fast as straight JDBC, however, more often than not, far worse. Doing them "right" requires knowledge of not only the ORM but also the DB you are targeting. It is crazy to need to be a Hibernate expert AND a Postgres expert. Why not just a Postgres expert? And ultimately, DB code done right is almost always write once and tweak.
What happens when you type `java —-version` in Command Prompt?
I get that same message 
The only disadvantage for me is the i need to support oracle, h2 and PostgreSQL. That's the only reason I stick to jpa for now.
Yes! Exactly this.Also my belief that orm frameworks as hibernate make it easy to do things wrong: don't care about transaction boundaries or how and when do you fetch the data. 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I really think that both ORMs and JDBC have their own place and the take away is that we've been relying on ORMs too much to do literally everything. There is something really nice about being able to use something like Spring Data Rest and getting full CRUD operations in your application by just writing a class and being able to manipulate a POJO within your application. However, every operation that's not just CRUD can and should probably done using JDBC.
No, it isn't, and I don't think you completely understand the new licensing situation for the JDK.
No.
oh oki
Lombok is bad mainly because it does things by tweaking the compiler. It breaks so frequently with new versions of java that it's bonkers. The other alternatives (AutoValue, Immutables) work with javac in a standards supported always compatible sort of way. Because, they just generate source code based on annotations. That means they'll be not only compatible with Java, but also things like Kotlin. I do agree that a simple class with public final fields isn't a bad thing. However, a little bit more complex data class with equals/hashcode/tostring becomes a little bit more annoying to maintain. That is where these libraries have value add. Java can't get "record" or "data class"s soon enough.
I did that once already. In 2012 I moved to a tropical jungle in the pacific, and only recently came out of the jungle to earn a little bit of money. Coming back to IT has been horrifying, and Oracle has become more evil than I ever imagined. So here I am on a 100% Oracle contract, dying to go back to the jungle and swat a different kind of bug. I'm a fucking dumbass.
I would recommend https://github.com/google/compile-testing since it offers the ability to assert on warning and errors (and the lines they occur on) as well as offering generated code AST diffing. Here's a bunch of examples: https://github.com/square/AssistedInject/blob/master/assisted-inject-processor/src/test/java/com/squareup/inject/assisted/processor/AssistedInjectProcessorTest.kt (scroll to the bottom for error testing)
I see, thanks for the reply! 
Agree for certain types of projects. ORMs for rich applications can be much faster, though, because of intelligent caching of business objects. Also, I still hate updating rows using straight JDBC, it's so clunky and error-prone. I'd much rather call setters on an object and persist it. 
No
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Rather than help ADBC, Pivotal has created a competing standard. Awesome. Now we have two incomplete and non-production ready implementations of asynchronous database drivers.
A bit ridiculous that they not even mention Swing... I know they only wanted to pronounce their JavaFX build, but when mentioning the past of Java, Swing is an important part. Especially when talking about graphical desktop applications. 
Another dimension that was not covered in the article (would be interesting to see the results) is the bulk size of an insert statement. For example, it is usually faster to write: INSERT INTO t (a, b, c, ...) VALUES (?, ?, ?, ...), (?, ?, ?, ...), (?, ?, ?, ...), ... rather than INSERT INTO t (a, b, c, ...) VALUES (?, ?, ?, ...) INSERT INTO t (a, b, c, ...) VALUES (?, ?, ?, ...) INSERT INTO t (a, b, c, ...) VALUES (?, ?, ?, ...) ... jOOQ offers this along with the batch size and commit size in the [import API](https://www.jooq.org/javadoc/latest/org/jooq/LoaderOptionsStep.html)
Imagine if these suggestions were implemented as well, JDBC would be quite cool for simple cases: http://mail.openjdk.java.net/pipermail/jdbc-spec-discuss/2018-July/000344.html
Yes. 90% use in Android is just not enough to keep it going. Its gonna be dead next year.
Really, that's kinda the killer feature of ORMs. 
An alternative to reactive-pg-client and pgadba is one I wrote, [PgNio](https://github.com/cretz/pgnio). Used heavily in production at my company (no recent updates because nothing broken yet :-)). It is has no dependencies and is built for use today.
IMO, it is much better a client to introduce the API and facilitate the standard's creation than having one of the vendors define it.
Swing may be old (eg mature) and it has its warts, but they are well known. But there is a lot of code written for Swing and it needs to be easy to add to a runtime. &amp;#x200B; I'm happy for Zulu's support of Java FX. I hope someone, maybe Adopt OpenJDK will produce Swing builds (and maybe also Java FX builds).
This is false. Excited about Java has continued to grow, especially because of the new six month release cadence.
Dumb question, I thought Swing was still included in the 11 release. Just not after?
I’ll ping Mark to add it to the list of existing libraries for completeness.
I believe you didn't understand his sarcasm
I have seen my fair share of trolls on here, haha.
///s
Thank you, haha!
Then again, if you don't go overboard with db-specific SQL, supporting another database in JDBC is as easy as changing the connection url. 
Any knowledgable and experienced developer would tell you to use JDBC batch when inserting large number of records into any DB. If you're using jpa/hibernate you can still access jdbc session via hibernate and execute batch inserts.
Yeah I've seen your suggestion before, and I love them! Those would be a real time/correctness savers! Some day, I dream about seeing a "not based on ODBC" Jdbc 2.0. Jdbc isn't horribly to work with, but it certainly has pain points that would be nice to move past. For starters, I'd love better tie-in with things like CompletableFutures to allow for things like NIO database drivers. How cool would it be to have 1 connection to the DB with Http2 style request/responses? You could pretty much completely eliminate the need for things like connection pools and all the headaches they bring. (Though, DB guys would have to figure out the protocols they want to talk. Still, better than where we are right now). Obvious changes like you've shown would also be great. It also wouldn't be bad to see just a little more "magic" around turning rows into objects and vice versa. For example, writing something like public class Record { @Column("foo") int foo; @Column("bar") int bar; } rs.loadRow(Record.class); Would be pretty awesome. (Probably something a library could do today anyways.. but would be nice if it was a result set method).
Oracle aren't implementing it in a vacuum. They are taking input from clients, because that's important. And the article says that there's a sample PostgreSQL driver for ADBC. But we need an asynchronous current API now, not having two competing standards.
Pretty standard tricks to get data into an SQL database. Everyone who deals with Java and SQL absolutely should know those. The next level up- if you need even faster writes- is sometimes using CSV &amp; database specific bulk import. What is the performance of PostgreSQL "copy" command compared to what the guy is doing in the article? Another alternative if copy inserts are fast might be parallelization. Insert into several tables in parallel using best tricks you can, and then use copy-insert to copy data to the actual destination table.
You mean JavaFX? No, they removed it in JDK11. You can still make your own builds though.
Bit confused as to why they don't do JDK11 builds out of the gate - it's really easy (at least for Linux).
Try jOOQ and do go overboard ;-)
OpenJFX releases are decoupled from OpenJDK releases, and are done on their own schedule. Using OpenJFX with JDK 11 is a matter of adding [a Maven dependency](https://search.maven.org/search?q=g:org.openjfx).
Hi - I think you might like R2DBC, which provides an SPI based on the Reactive Streams types and a few implementations where the underlying driver supports asynchronous IO, including postgresql, h2 and Microsoft sql server http://github.com/r2dbc Happy holidays! 
Look at the ADBA suggestions made on the same list. It includes the annotation based mapping suggestion you have there. But only for ADBA, not for JDBC - at least for now
Only if y'all want...more just letting readers here know.
I always try to adhere to the following principle “Real-world objects share two characteristics: They all have state and behavior.” from https://docs.oracle.com/javase/tutorial/java/concepts/object.html I try to design a class so that most of the state is hidden and is changed by behavior.
So do I, but when I receive a GRCP request or just a bunch of JSON. I usually pack this into a DTO and then have some sort of a layer which translates it into the model. This way the model is independent of the way the data is provided.
You don't by chance know if there has been progress on ADBA? Definitely sounds exciting, I've just not heard anything about it beyond the initial announcement.
Looks interesting, but how does it work? Is it just a jdbc wrapper right now? (I'm watching videos about it so that might answer the question for me)
Oh! i see, you use it in order to decouple layers (service to business). I guess that helps to cope with changes.
I assume [records](https://cr.openjdk.java.net/~briangoetz/amber/datum.html) are what you are looking for?
Or C#
Use Kotlin.
&gt; Oracle aren't implementing it Well, that part seems right, heh. From my perspective, watching the mailing list and adba spec repo, there's an absence of work or effort towards an official impl/spec/testsuite.
&gt; Look at the ADBA suggestions made on the same list
It looks like in your [submission](https://www.reddit.com/r/java/comments/a4529h/please_help_i_dont_want_to_fail_my_class/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Poe strikes again! https://en.wikipedia.org/wiki/Poe%27s_law
Interesting! Thanks for the link!
ADBA is not and won't be reactive: it doesn't give the results as a stream, respecting backpressure. See comments here: https://www.reddit.com/r/java/comments/9j4ai3/r2dbc_fully_reactive_api_for_relational_databases/ I'm pleased they note Fibers and Project Loom, it should allow simpler code and make it easier to convert existing code. I'm confused by that section a bit though as it suggests Fibers will be able to use JDBC but then says it will need a 'non blocking JDBC', which AFAIK will never exist?
Hope that, while looking into CDI, they look at keeping friendly with DI frameworks like Dagger. One of the annoying things about pretty much every DI framework (other than dagger) is that missing dependencies generate hard to track down runtime errors. I really want to keep my dagger compile time guarantees. Right now, they are more of a hack with Jersey, but still it works and has prevented numerous bugs (while being amazingly fast).
Offtopick, but **there are also some arguments against using getter and setters**. Take a look on (this article)[https://www.yegor256.com/2014/09/16/getters-and-setters-are-evil.html]
The article doesn't actually give good arguments to use fields over accessors, it just says that the arguments *for* accessors are insufficient. The biggest argument for accessors is that it's convention. That alone is sufficient to make them the default choice - public fields carry no real advantages.
If you're debating either adding code or not adding code, I think the onus is on the person who wants to add code to justify their beliefs. That being said, breakpoints in getters/setters can be helpful.
While I would abhor the idea of an *annotation* doing this, I could see something similar to the C# properties syntax making it's way into Java. I try to avoid writing accessors at all when I can get away with it, but not all software systems are actually very OOP, even if they are written with a language like Java. Sometimes you just need a custom data structure. In those cases, it would be nice to have a more succinct syntax to get the job done.
Use Lombok
You're right that fewer lines of code could be an argument for fields. I just don't think it's a very good one, even without lombok.
I wonder why you're getting downvoted. C# is basically Java minus a lot of the ceremony. You code a property and it's public and the private field to back it is created by the compiler for you. And it has all the benefits of Java, being open source and cross platform and all.
I don't think it's a big deal in terms of effort for the person writing the code, but it does add a lot of useless clutter to the code and especially to merge requests.
Brian Goetz, Java Language Architect, is asked about properties [here](https://www.youtube.com/watch?v=jDU-JALUDd0&amp;t=20m16s). Everyone agrees that they want properties, but no one can agree what “properties” mean.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
How do I earn enough points, which other subreddits can I post on for the points I have?
&gt;I wonder why you're getting downvoted. Simple: people from functional programming languages don't want to use a different language that already does what they want, they want to make Java like *their* functional language. 
&gt;Writing getters and setters is kind of dumb, like the compiler should do this for us. Have you ever considered that maybe, just maybe, a getter or setter might do more than get or set? That maybe the setter or getter sets a value in an ObjectProperty or something instead of a variable itself? No, probably not. &gt;not that I think encapsulation should happen at field level No, you're right. We should make every object's field completely public and readable because that's the way functional languages do it and everyone knows the functional way is the right way. Returning an interface implementation instead of a complete object while keeping the full object referenced in class? Nah, too object orientated, clean, flexible, and maintainable. Why are we even using interfaces? They can just get the full object anyway so whats the point! FFS. 
I prefer properties such as c# and or how it works on Kotlin. If you need access to a field wrap it in a property and you can use the property to manage the behavior of the field. Annotations would be just more clutter.
While other languages seem to be opinionated, I feel like Groovy makes it easy to write code the way people write code in Java. Right or wrong, it makes so many things easier to do. Because of this, interop with Java is super simple. For an example of this, check out the `Canonical` annotation in Groovy. You get a lot of stuff for free.
You’re still accessing a data item at the end of the day. 
&gt;not that I think encapsulation should happen at field level Except += operator on collections which is both syntactically fucked and misleading as all hell. Fun Fact: += creates a new collection, not adds to an existing one. JavaFX's source Groovy files had this and it caused a fail because the local variable was final which apparently was valid until recently. 
Check out Lombok. I basically consider it part of the language now.
If C# was available on JVM, yeah it could be a potential alternative. Why would anyone abandon the Java platform where Kotlin, Scala, and other languages all have concise property syntax?
OP asks in the question why does he need to have that dependency and why is it not part of the Java language already.
http://immutables.github.io 🔥
Why is this being downvoted? You have a JVM language that interops 100% with Java and gets what the OP wants.
Use your favorite IDE to generate as needed.
FP enthusiasts ran over his dog ^^
That's fair. If you're already familiar with the ecosystem and tools, choosing Kotlin over switching to .NET Core and C# is a more pragmatic option.
Yes they did. They left a note on his corpse saying: "Object orient that imperative fool! I've been trying to think of a way to refractor him back to life but no luck so far. 
Wow really? I had never tried this low. Thanks! I'll try this out.
The post doesn't advocate use of public fields at all.
Plenty of good reasons already posted about why and when java will figure it out. Lombok is available today and is really nice. Not everyone may know about it. 
Normally, the CSR/RSA private key pairs on Linux-based operating systems are generated using the OpenSSL cryptographic engine and saved as files with “.key” or “.pem” extensions on the server. Although, no specific extensions are mandatory for text files in Linux, so the key file may have any name and extension, or no extension at all. If you remember the whole name of the key file, or at least a part of it, you can use the following command in your console to try and find the file and its directory: sudo find / -name “filename.key”
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Someone literally replied with "Use Lombok" and got upvoted even though OP specifically spoke against it. 😂 I love Reddit.
While others are pointing you elsewhere, fully supported data classes with pattern matching, deconstruction, etc. are coming soon to the Java language. It will likely come in stages starting with Java 12's enhanced switch statement. Follow [Project Amber](https://openjdk.java.net/projects/amber/) for details and updates.
I disagree that it's really nice. It's useful and I think it's a net positive, but you have to install a plug in into your IDE, delombok the code for those who don't have a lombokd browser (say, if you want to write a library, etc) and it uses undocumented methods within the compiler to achieve some of its behavior. It wouldn't pass a code review at most companies that have any emphasis on clean and maintainable code. Don't get me wrong, I love lombok. But it could be done in a much saner way in an ideal world. 
&gt; Have you ever considered that maybe, just maybe, a getter or setter might do more than get or set? That maybe the setter or getter sets a value in an ObjectProperty or something instead of a variable itself? You're one angry petty person. Try to look a bit beyond your current favorite language and you'll probably understand better what the OP is talking about. C# has properties. Kotlin has properties. Scala has properties. You can set them up any way you want, including doing additional work on a value if you want to. It's just that by default they behave as default getters/setters to. Properties give the easy of using fields directly but without breaking encapsulation. And I agree with the OP that it's pretty annoying that Java doesn't have them yet. 
If you have plain setters and getters (that is, no business logic, property change listener notifications, no class invariant validation), you can make those fields public. Because they are de facto public fields. 
Properties are great, however they solve only the problem, that you don't need to break the API when you decide to hide public fields and have some logic in a setter or getter. 
They're autogenerated by the IDE...
That author of that article is stuck I'm an ancient view of oop where data objects are evil and 20 layer class hierarchies are king. Here's a better article http://loup-vaillant.fr/articles/deaths-of-oop
Kotlin-like properties are terrible when designing an api because you're not able to distinguish between public and private types easily. For example making a field of type ConcurrentHashMap and having the getter return a Map so you can change the implementation later is much more straightforward in Java.
But you can't add any logic with direct field access. Want to ensure that a field hasn't been set to null? Out of luck. Want to return a copy of a collection? You're out of luck. Want to change your internal representation without affecting your clients? Your out of luck. There's a reason why encapsulation is one of the pillars of OOP. Could Java have a less verbose syntax for the simple case? Yes, that's why we're getting records.
Damn it, you beat me to this quote and once again had the correct link too. :)
And when you want to change them from plain setters and getters? Then what?
&gt;I wonder why you're getting downvoted. Because the question was "When will **Java** ...", not "What should I use instead of Java".
Plain setters are useless. Use public fields. 
Setters and getters are not about today, but about making it easier to make changes in the future.
Because OP asked for a Java solution.
Use kotlin
If you don’t need getters and setters then use public modifier for your fields. There is no requirement to have default getters and setters unless you want to do something special in them. Anything magical which would generate invisible code is just incredibly bad and impossible to maintain on huge projects 
Lombok is blasphemy in its truest form. I wish I could delete it from the internet. It relies on your IDE being able to understand you’re using it and fake its results which can lead to code which works in your IDE but not when packaged. It also can be incredibly difficult to maintain as you see that there is a getter or setter but it’s nowhere to be found. If you really don’t want to write getters and setters then just don’t. Make fields public and that’s it. No need for boilerplate functions if they aren’t actually doing anything useful.
Changing the semantics of the setter is breaking the API in the semantic sense. Does not break the binary compatibility tough. 
but you can still do that in kotlin if you want to. That's the point
Yeah, I'd love to think this was possible. But sooner or later you'll find situations where db specific implementations will make a difference. At least in performance.
Or maybe their company used java and is not intending to change that.
Kotlin 
PLEASE NO! I switched to C# 3 years ago after spending 4 pleasant years working with Java. There's no reason to let Java get as bloated as C#. This language is an abomination. We don't need no damn properties in Java.
I got news for you: Swing is in Java 11. It's not deprecated at all.
JavaFX is good. Swing is, "ok". Frankly kindof a pain in the ass to use. If you want more options you may need to branch out to another language. C# WPF is very good and visual studio has a great builder for it. For desktop applications, Java kindof has limited options that aren't very modern.
Electron
I have no real opinion on JavaFX, having never used it, but regarding Swing: [https://www.youtube.com/watch?v=zkJR9lmjqQo](https://www.youtube.com/watch?v=zkJR9lmjqQo) &amp;#x200B;
This, either use javaFX or switch to C# wpf 
I think Java is like a big afterthought with small hacks all over the place making it a bit inconsistent and inconvenient. But if you wanna make a GUI with Java, the I'd use swing.
Then you refactor. YAGNI!
Yeah i was thinking about going with java. 
Thanks for the pointer. I updated our blog post. R2DBC SPI requires a single Reactive Streams dependency. Eventually moving to Java 9, R2DBC SPI is dependency-free if you do not consider Java libraries as a dependency. Regarding dependencies, there are various opinions and I don't really want to dig into that discussion. I'd like rather pick up on asynchronous database clients. Asynchronous/non-blocking are different guarantees than reactive/reactive streaming. While async APIs can be somewhat hidden behind RxJava and Reactive Streams, they can never achieve the full functionality of a reactive library. Let's discuss why this is (using `Row` as a substitute to single rows in a tabular result): * Numerous libraries return `CompletableFuture&lt;List&lt;Row&gt;&gt;`. The issue here is that a caller needs to await full result completion and processing of results can begin only once the future is completed. Also, no deferred execution and no notion of backpressure here. `List&lt;T&gt;` requires aggregation and results accumulate in memory instead of being emitted one by one for lower GC pressure. * Libraries accepting `Consumer&lt;Row&gt;` are somewhat closer to streaming. However, there is no general specification how to work with exceptions that might arise during processing. Such an API also does not allow asynchronous composition since a consumer returns `void`. Backpressure (do not overwhelm the consumer) is also not given. * The last category of libraries returns a `CompletableFuture&lt;ResultSetChunk&gt;` where the result allows `CompletableFuture&lt;ResultSetChunk&gt; ResultSetChunk#fetchNext()`. Closer to streaming but processing requires the chunk to be fully received.
seriously ? is it better in some aspects than fx
I love Java for everything BUT GUIs. Swing, SWT, Java FX 1&amp;2 are just all convoluted messes. They're all super gimmicky with tons of setup and seem to decay over time. Also, JAVAs image support is a joke. With all the different JAVA I/O packages that are out there that all do different things with different syntax and are not compatible it's infuriating!! For me i tend to write back ends in JAVA , wrap it in a webserver or microframework and have my visualization call it. Ive moved to a UNITY front end with JAVA backend and it's worked perfectly. 
You can't refactor if you don't control the code that uses yours.
And neither is JavaFX. It Just has it's own release schedule now.
You can do that by writing weird stuff like private val _map = ConcurrentHashMap&lt;String&gt;() public val map get() : Map&lt;String&gt; = _map But a simple Java getter that you can extend or change without major efforts sounds still easier to me. Like, Java forces you to explicitly think about internal and public type, which I like, in Kotlin you have to explicitly "duplicate" you vals.
Is it doing something else than merging left hand with right hand collection and assigning it to left hand? In short, is (a+=b) not equal (a=a+b) for collections? 
Setters are still evil :) more because of mutability than anything else. Getters are meh. But you are correct, inheritance based oop is awful to maintain. It makes for a system that is very hard to evolve and often super coupled.
Interesting read, thanks. Great refresher on terminology. Gave me some better understanding of the ECS approach too, which until now I thought was mostly a game-oriented optimization and not a system modeling paradigm. 
How you call JavaFX outdated but you call WPF modern? It's all the way around for me. 
I find myself using more and more "public final" (or often private final + a getter) in Java as an implementation of "immutable beans". Great tool to limit side effects, and to simplify reasoning in multithreading contexts.
&gt;I'm a C# programmer(very new/beginner but still) &gt; &gt;I'm thinking of transitioning from C# to Java &gt; &gt;and to be honest, it's a much better language than Java, no arguing about it So, to summarize, you're "very new" at C#, you're still considering a transition to Java, and you've managed to form definite opinions about them about which there is no arguing? Sure, that sounds about right.
There’s also http://immutables.github.io/
Of course there is no arguing in this subject, C# is much better than Java as a language no matter what you said, it's been said like million time. If you still don't understand that then there is probably something wrong in your chromosomes. Try to google first. Oh and "very new" was just an a way to say it with more humility. Have a nice day!
Swing is not deprecated afaik. Your other options other than JavaFX and Swing, are SWT and AWT (I don't know any other ones if any other exists, although you will probably find bindings for GTK and Qt, I haven't looked that up). I personally prefer to use JavaFX, the others look old school, however they are way more lightweight than JavaFX. JavaFX is flexible as hell and you can tweak and customize it however you want. Plus you should check out SceneBuilder if you plan on staying with JavaFX, And if you have already done web front-end, JavaFX is the most suitable for you.
I have no issues with Swing personally, find it meets the needs for most of what I've ever required in a desktop application so it is what I use when I need non-web GUI. Tried a bit with JavaFX but couldn't decide if it was trying to be an application GUI tool or a game engine GUI tool, idea of a "scene" doesn't feel right for an application. But that's just personal opinion. Never used WPF, never hear anyone recommend it to be honest.
I would prefer to be able to do 2 things with enums * a conversion to int * the possibility to have switch with enumSet Without that, enum or not really interesting
Not better, but you can achieve decent results with it, especially with some of the UI designer software that's around these days. 
Ah, see, I don't have an opinion on the difference between Java and C# because I haven't really used C# and it would be foolish to assert an opinion on a language with which I am unfamiliar. I could simply adopt someone else's opinion as my own but that would just be silly since I am capable of independent thought. That being said, I've used Java enough to know that it excels in some situations and struggles in others. Like any language, Java has pros and cons; it's useful but isn't always the right tool for the job. I know better than to claim that one language is objectively "better" than another. Except, of course, for Haskell. Functional programming is obviously the way that computers are meant to be understood and Haskell is clearly the language of the gods. Oh wait, no, I meant Rust. Or maybe it was Go? Dang, maybe there really is something wrong in my chromosomes.
A seamless installation process is very important for the success of a GUI application, especially if it is targeted at non-tech savvy people. Many of them will be deterred from using your app if they first need to take care of installing a JRE or JDK. So, it's probably not hate, but a question of which technology to use to attract more users. I hope things will improve in this area in the near future. There are already plans to revive the [javapackager](https://bugs.openjdk.java.net/browse/JDK-8200758). &amp;#x200B;
I like SWT a lot.
Netbeans gui builder for swing is very good
If you'd like to get into a more 'practical' exercise, i.e. with dependencies, third-party libraries etc. then check out [https://www.marcobehler.com/guides/java-intermediate-learning-path-1](https://www.marcobehler.com/guides/java-intermediate-learning-path-1) 
In /r/java? Come on.
That's because things like JDBC are tighly coupled to swing code
I enjoy TornadoFx which is a Kotlin builder facade for JavaFx. It's kinda like Flutter and React I guess. 
Lombok is an abomination.
Yup. All my fields in data-type classes start out as public final.... They change if they must later, no big deal.
He sounds young.. forming opnions based on google searchs. I used to be like this. Real world is a little bit different tho. I prefer java with the libraries and community support available. Also, in the past ive gone to c# subreddit, ask if worth going from java to c#. Most part of comments said no, stick with java if you have experience with it already, you'll face no great improvements with c#. Best advice ever.. you should consider the same. 
It always depends who you ask. The people I ask mostly don't even know WPF.
It looks like in your [submission](https://www.reddit.com/r/java/comments/a4bk0d/file_conversion_to_human_understandable_form/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The dependencies I was referring to are in the postgres project as opposed to just the abstraction. But, yes, to move on beyond that... I definitely don't consider an asynchronous DB client reactive on its own, but it's important that the async lib that backs it is written keeps reactive uses in mind. In the one I wrote, it's more like `Consumer&lt;Row&gt;` but rather it requires the caller to specifically ask for a row (granted there are helpers). The request goes all the way back to the socket channel, essentially providing backpressure, and of course has methods to, say, skip over the rest of the results. The synchronous nature of Postgres doesn't allow much more. Nothing more is read than absolutely has to be, nothing more is serialized/deserialized than absolutely has to be, and it's all on caller request. And it's all built around nio, avoiding Netty (not a big deal, but worth noting). Therefore as I mentioned, the library remains a great foundation to plug into a reactive framework because it's extremely caller controlled, bare bones, yet high level enough for use on its own. I have used it commercially plugged into both Monix and Kotlin coroutines due to needs, but would surely fit snugly in RxJava or the like. I made mention on the mailing list if it's worth continuing discussion there, but I understand if the low level DB part y'all feel must be developed alongside the abstraction. 
Bloated? Wat? C# features are amazing.
Yes and that is the problem. Until recently you could do += operator on a collection in Groovy with a final variable. People use the += operator to simply add an element to a collection but in actuality they are reassigning it and Groovy until recently allowed it with final. See [this](https://github.com/javafxports/openjdk-jfx/pull/313) pull request which fixes a build fail caused by using += in Groovy.
&gt;Maybe they inherited a Java project and can't comprehend basic OOP Same thing? To start demanding that Java become more functional just to appease people who don't like Java to begin with will only hurt the language in the long run.
&gt;You can set them up any way you want, including doing additional work on a value if you want to. It's just that by default they behave as default getters/setters to. Magic methods are bad. Period. 
Nice video! Would be interesting to learn more about the exceptional cases that can occur with a real database. I guess that’s handled by user defined logic in the transaction manager?
Then tough luck for the people that use your code. Maven allows you to specify which version of a library you want to use, just so people can make breaking changes.
Working for a major car manufacturer with a lot of custom build software (mostly web based). Almost all java applications I created, supported or know a little thing about (in the past 10 years or so) use it. For day to day work it helps us so quickly get something up and running, easily tested, ...
Sorry 😂
Yeah learning javafx for now
yeah learning java fx
Java 12 won’t be getting data classes or pattern matching, but it will get the preview of [switch expressions](https://openjdk.java.net/jeps/325).
You got 2 downvotes just by writing these words 😂😂 I have learned elctron but i think and read somewhere that javascript is slow and making a desktop application the point is to get it fast so ...... 
Where than ?
I love Java FXML. Check out scenebuilder.
Which one do you use. I downloaded the official i did not find any one using that and didn't knew how to use class controller their. switched to gluonhq scene builder .
Gluon is what you want. When you create a .fxml file you must link it to a java class. You can name that java class whatever you like, say “testController”. Make sure both the files are in the same directory. In scenebuilder you must link the controller to the .fxml file. The bottom left corner does that, but you provide a path: example “main.gui.testcontroller.java” (main.gui are folders). From there once things are linked you can begin designing your GUI and eventually declaring the components in your java class. If you create a button, then expect to declare it like this in the global scope: @FXML private Button testButton; Where testButtton is the FX Id. 
&gt; delombok the code for those who don't have a lombokd browser I don't understand this. Our team uses lombock, and everyone has zero issue installing the IDE plugin. The benefits far outweigh that small annoyance. &gt; It wouldn't pass a code review at most companies that have any emphasis on clean and maintainable code. I work in a counter-factual example. Large auto manufacturer where we are building systems to facilitate microtransit. I've rejected plenty of PRs because the code isn't understandable, but lombock has never been one if those reasons. 
I work in the financial services industry where most of our data and business logic is in really old tech. We use spring as a transformation layer to provide a Rest API over batch extracts from legacy systems. 
Spring simplifies a lot of the framework-y stuff you'd otherwise have to do manually. Inversion of control is dead simple with autowiring (Though this isn't exclusively a Spring this), components are singletons by default, and Spring has an abundance of modules/community support that make it easy to work with (Such as Spring Security and MVC). There are tons of frameworks out there like Spring of course, some with better performance, some with easier syntax, some with great new design patterns, but none of them have the standing of Spring and rarely do they have the support that Spring benefits from. It's always easy to find a solution for a Spring problem (even if the solution itself isn't easy), it's only ever a search away.
You're misinterpreting what I said. Yes, lombok is useful. Yes, your whole team has it and that's fine. But you can't vend code out to anyone or any team in the company without forcing them to install lombok (unless you delombok). Not the end of the world, but IMO you should never be using lombok in a library or a package which is shared widely. And yes, I don't reject CRs that use lombok, quite the opposite if it's a service that my team owns. But the actual lombok code itself (like, the internals) wouldn't pass a CR on my team. Im not arguing that lombok is bad or useless, just that it's more work than it should be to do something like generate a getter 
And you sound that you didn't even read my post. I said that C# is a much better language(a fact) but since the community and ecosystem feels clunky and awkward, it has lost the advantage over Java as being more popular. And no, I don't "form" my opinions only based on Google searchs, I used C# for a reasonable time and wanted to go to Java after that, and I totally refused learning it after learning that it had no string literals(I mean what the heck? No string literals in 2019?) and setters/getters are just normal methods which make it even awkward and much less native, not only that but streams feel more awkward compared to Linq too as if it's an afterthought that wasn't possible to insert, yet it's been forced so Java becomes less verbose and much more improvements. Java is even late to bring features while C# 8 is beyond all these improvements. The only advantage that Java had(whether you accept it or not) is that ecosystem/community and the more original opensource feel(.NET started this recently but it still has a little more time to go) In the past? You mean 2010? Also if they said that, it doesn't mean that C# is worse. It means that the community is much more honest and less optionated(better than this community, to be fair) And yeah, I'm young. 
Not only is this subreddit not for programming help, but also has this file nothing to do with Java. This is a file from *Unity3d* which, at best can be compiled C# or a resource. Completely wrong subreddit.
So getters / setters are magic? 
Hah, isn't that the truth. I remember seeing the same thing when Java modules were being designed. 
Yeah i am using gluon is there anything with more dynamic controls ? like animations and cool button inbuilt ? I can use css but it would be a lot of work
A very good point in favor of getters and setters (as pointed by /u/dpash) is adding logic to fields access. Another is feigning fields presence to another layer (say JSF) for stuff that don't need a field at all but could use mimicking as one. Typically: *getAverageValue()*.
do you mean like that [https://simpleflatmapper.org/0102-getting-started-jdbc.html#resultset-mapping](https://simpleflatmapper.org/0102-getting-started-jdbc.html#resultset-mapping) ? except with the actual need for @Column
Well used, OOP is a very powerful tool. The problem is how people think their architecture. They will go full head-on and abuse every little possibility the syntax offers. The exemple of Static/Moving/Loot objects in the article is just a clear misuse of OOP. The article has some good point, but it just also shows how something that is great can do horrible things when misused. 
Yep! Good times!
Also MySQL and Postgres jdbc driver have an option to rewrite batch statement to multi values insert. But obviously come with the cost of the rewrite. Another point to keep in mind is that MySQL has a statement size limit. The rewrite take deal with that for you.
That makes no sense. Java 11 has the new (since java 10) module system &amp; highly reworked API layout. How does JDBC, a data access layer API, depend on Swing, a presentation layer API? That goes against all best practice in java and oo design. 
So first of all, I dont know what Im talking about...
I said it's coming in stages. Switch expressions are part of the overall grand feature set.
Everytinh should be immutable anyway, right :D 
I agree so much with this. Even in a professional setting, the best developers aren’t necessarily “advanced java programmers”. It’s best to learn how to write clean, maintainable code. Learn how to write tests, design practices, and more general best practices. This will help you more than knowing every little fact about Java, and make you a much more flexible developer in the long term. It would be good at this point to start reading others code, and contributing to projects. Maybe consider going for an internship, or apply for jobs soon if you are old enough. 
I say this with a great disappointment, but do yourself a favor and learn React Native and Electron. This is the future. Some of the most popular desktop applications are Javascript + Electron now and same for mobile apps. Note: I'm not saying this is a positive development in the industry, it's merely the truth.
Spring is just a framework. You can use it for whatever you want. I use Spring Batch for picking up files, doing some basic transformation, and persisting the data to our database. We use Spring Integration for routing transactions to their proper controller. We use Spring Security to authenticate requests coming from our front-end app. We use Spring JMS Template for our JMS implementation. We use Spring Rest to handle a lot of our annotated REST endpoints. We use Spring Core for damn near everything else (Bean scoping, Auto-wiring, AOP etc...). 
We don't. We use Ratpack. Our devs love it. All our domain/business/repository/persistence logic is outside of any framework so can be tested easily. We can swap frameworks without writing any code. We develop full systems without regard for the UI/transport layer or persistence. Works really well.
Lol I like the very first argument that the author talks about, Tell, Don't Ask. Why even do OOP at that point, just put everything in the same object in the same class!
LOOOOL. Another kind of troll in this subreddit.
If you're dealing with a property bag / data object, most modern OO languages don't have the features yet to make them immutable and still easy to with with. That will most likely change soon - with java records and similar features coming to other languages.
Spring MVC is a part of every webapp I worked with. It's simple, but extendable for any purpose you can figure out. Spring Data Jpa is what makes DB layer in your app 90% declarative. You just create entities and repository interfaces without a line of SQL and it just works. And Spring Boot on top of this allows to cook full blown web application in a few days.
If you want to get into a flame war, let's have it then. I have multiple decades of experience programming. C# is a far superior language. Java has a superior ecosystem.
Can we use the const keyword (which I believe is reserved in Java but not used). We could then have immutable public fields. This would solve quite a few problems for us. Could then have something like: "const List&lt;String&gt; const myList" Which means a constant reference to a const (immutable) list. Or is this just too much like c++? ;) &amp;#x200B;
As soon as I saw Perl, my sarcasm meter blew a gasket! Well done sir :)
It looks like in your [submission](https://www.reddit.com/r/java/comments/a4dlgf/help_me_with_this_question/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
My previous job we had a series of microservices written in Spring and it was absolutely great to work with. Just a pleasure. At my current job some assholes decided that for political reasons that would completely bastardized spring into something unrecognizable and put it behind as many layers of our frameworks as possible for reasons unknown to mere mortals. 
Don't just lie to the boah
Kotlin v1.0 was released on February 15, 2016. When this language will be around for 10 years, and all its features will be backwards compatible, then I will consider spending my time learning it. Otherwise, it just another "java killer" like many before.
We don't. We are a JEE shop in what concerns Java Web projects.
Our lead basically created his own version of Spring, using some fundamental components of it to fit the specific usecase that the product required. Not sure if I agree with that, because it is a nightmare to train new hires on a system with very little documentation..
My point was that mutable data objects tend to create hard to find bugs. Immutable data objects are much easier to reason about. Example of bugs I've seen: Someone uses a data object for a set/map key, someone else adds a field to that object and mutates that field deep within the code. All the sudden, the set/map no longer contains the data object because the hash code changes. Particularly frustrating in one instance where the data object was the key of an LRU. It caused a non obvious memory leak. I've seen a couple instances where calling a function once with the data object threw an exception, calling the same function a second time did not. This is because deep within the code, the data object was subtly modified. A couple of projects I work with have script engines maintained by non-devs. The API given to them allowed a bunch of unintentional modifications because a bunch of data objects given to them for reading could be changed. And if course threading has been made nearly impossible in many circumstances because data objects were mutated instead of having methods return results. Mutability is a heavy cost that you don't often need. The default "I'm adding getters, might as well add setters" mindset leads to problems. Often times, if fields are small than it's easy to copy the object, otherwise a builder works really well. It is slightly more code to make builders instead of setters, but you get immutably out of the effort. Hence my "setters are evil" feelings.
&lt;alt&gt; &lt;insert&gt; getters / setters. How hard is that?
I wasn't disagreeing with you. I like immutability as well. My point is that Java is not well-equipped to deal with immutable data objects (yet).
upvote a million times. If you need help deleting it from existence, let me know.
Fair enough. Just figured a longer explanation was due since my other comment is being downvoted.
Right, that a case where you absolutely should/need to use a getter/setter. I think this topic is more about using getters and setters for typical access/modification.
No, injecting methods into code is magic and bad.
Did you even read the title?
- creating Restful endpoints to expose resources and communicnate with other services - Spring Oauth to secure the http-endpoints - Spring Data for quick and easy database connections - lately Spring Sleuth to trace calls over multiple service - Spring Retry to... retry stuff like db connections that sometimes fail for no good reason. - There is probably more. Its a really cool Framework that makes writing code fast (in terms of programming time required, not neccessarily fast in speed of transactions etc). Considering how wide spread it is (at least here) it is also easy to find other devs already knowledgeble in the framework, thus reducing the time needed for onboarding and them to get used to our software. 
I see your point, and was rather seduced by this approach at first. That is, until I saw the footprint of an "Hello world" (&gt;70Mo if I remember correctly?)...
Do you have any exceptional cases in mind? I.e. are we talking about ,say, a broken database connection because of networking issues or wrong SQL statements or timeouts/deadlocks or all of these together? :D
28 people did not read the full post: Lombok and IDE’s DO NOT COUNT.
Thanks for the intro to Spring Sleuth. I’m designing and implementing an energy platform using lots of Spring-based micro-services and was looking for a decent way to implement tracing across many services.
Haven't heard about *@EntityGraph* before. I'll keep it in mind as an useful tool. 
I’m so sorry.
Listen, there's only one "superior" language. It's called JoeCode and I invented it three days ago after taking a bunch of acid and talking to Alan Turing. It only has one user so far, but in the past three days it's been the fastest growing language on the planet. It's written on top of Emacs Lisp and combines the freedom and speed of C++ with the convenience and pretentiousness of every language since C++. It's hard to explain but after I finish my medium article it will all make sense. It doesn't matter that JoeCode will only run in Ubuntu 15.04 (I'll update when I'm ready ok, jeez), it doesn't matter that the compiler uses 12GB of RAM, and it doesn't matter that everyone is allowed to form their own unique opinion based on their own experiences. All that matters is how wonderful it is to write JoeCode. 100% of it's users agree that it's the best language that's ever touched a processor and that means something; after all, one of them has met Alan Turing!
It took me 15seconds to identify some issues/improvement ideas: 1. You don't use build tools. 2. You don't use packages. 3. You break all code conventions. 4. *e.printStacktrace()* and all that jazz. That's it. This was the moment when I closed the project. My advice is to keep learning. Ask your friends who are more experienced in Java to review your code. Don't worry about vars and Java 11, your code has many more areas to improve apart from these. 
yw! Im not that familiar with it myself since its a recent introduction and I havent gotten around to play with it but it sounds really interesting and helpful :)
Is there a particular reason why you prepended each field name with an underscore? The naming conventions state the following: &gt; A variable's name can be any legal identifier — an unlimited-length sequence of Unicode letters and digits, beginning with a letter, the dollar sign "$", or the underscore character "_". The convention, however, is to always begin your variable names with a letter, not "$" or "_".
I'm not an expert in GUI, but I know the company called JetBrains who use Swing to implement GUI of theirs IDEs. 
So basically you just changed every declaration to var? I think var is useless, I dont know why you needed to change it.
Generally no. But modern languages like Go, Kotlin, Ruby definately cut a part of Java's market. 
He said he made this in the summer of 2014, that was 4 years ago? I am positive that OP has definitely furthered his knowledge in programming standards. 
As an extremely lazy person I disagree
r/lostredditors r/ProgrammerHumor
If only it was useless. It outright hurts code readability unless you be explicit in your variable naming.
I believe this is a standard naming convention for member variables in c++ and I've seen people from C++ backgrounds do this before when first getting into Java. 
This is also a common convention in C# for private variables. Can't say I'm a fan of the convention
Yes, it is common in C++.
Also true, I really do not know why Java had to jump into the stupidity bandwagon train and add "var". 
Went right over me
Just curious, what is wrong with using `e.printStackTrace()` ? Or is it just that you should remove it from final versions?
Have you ever had issues with try catch blocks being in @Transactional methods? I had issues where it wouldn’t work if the method had try catch blocks. We found making the method throw the exceptions back instead of catching it worked fine. 
Do you know why? My only thought is that it may "stand out" as a field.
Do you also prefer lazy evaluation?^/s
I don't really think it has anything to do with being "modern" but rather people from other languages(C++, Python, etc) working on Java projects and can't understand the benefits in being explicit and verbose nor do they understand the basic concept of polymorphism. And Oracle is giving them ways to write bad code every other JDK release it seems like. 
People will write bad code no matter what they do. People have complained about boilerplate for years, and `var` addresses one of those complaints.
&gt;People will write bad code no matter what they do. There is a big difference between adding something that enables developers to do what they could not do before and abusing it and a feature like var that can only be used in extremely select situations. It's like giving everyone in the world a gun and then saying "People will always kill each other anyway". &gt;Users have complained about boilerplate for years Those "users" don't want to use Java and that's the *real* underlying issue. I'm not going to disagree that Java has a lot of boilerplate - it absolutely does - but just because it has boilerplate doesn't mean that boilerplate is without merit. I've seen lambas used in JavaFX's source code and holy hell do they make a mess of things: simple get methods turn into giant ugly methods because of lazy object creation. &gt;var addresses one of those complaints. Var doesn't make a gigantic chain of get methods any better(the big issue everyone brings up all the time). All it does is place more importance on the variable name which results in the variable itself being explicit rather than the declaration. And even that it doesn't work right because of similarly named classed like JavaFX's Button class and Swings JButton class: var paneYesButton = pane.getButton(); What does getButton() return? You simply don't know. Sure, you *could* add J to getButton so it's getJButton but even then it may be confusing. The real problem isn't being explicitly typed - it's the extremely long class names which may or may not be an indication that the class is doing too much. 
I think the point is, that you should use a proper logging tool to log your errors. If you just use e.printStackTrace you won't see any errors or even the stacktrace if you don't start the program from command line. You should use a logger and log the exception together with a message what went wrong and if the program is not designed to run only from command line maybe even configure the logger to write its output to a file.
It’s crazy. But it’s what everyone is doing. 
You do make some convincing arguments, but we are just two voices out of many. Part of the job of the architects is to survey the Java community, and a great majority of them have asked for this feature over the years. If you disagree with something, they have always requested that you make your voice heard at conference talks or mailing lists. They can't make everyone happy, so they try to do the least harm. I haven't used the feature a lot, but I can see places where it is helpful. Stuart Marks makes some great points in his talk [here](https://youtu.be/786iemaCJHU).
Often, I feel more like a Spring developer instead of a Java developer.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I've been working with spring the last three years. The modules a use the most are: mvc, security, batch, jdbc; in my opinion spring is the best framework to develop java enterprise applications, why? Because it makes you easy to work with things like ioc, transactions, security, patterns; it's a not intrusive framework; big community etc
Me too haha
What is the ratio of effort of rewriting the legacy systems to writing transformational services?
Woow, I didn't think there would be so much hate against 'var' in the java community. Using var is way nicer than having to do AudioInputStream audioInputStream = new AudioInputStream();
It's a habit I picked up from JavaScript es6. Using underscores makes it way nicer when skimming through code to know where your methods are coming from. 
We aren't really spending any effort rewriting the legacy systems since they're functional and don't require significant maintenance. At this point, the spring portion is used to modernize our front end/middleware for things like sso/third party integrations and to support building web front ends. The old code is tightly coupled to the persistence layer so most data is still persisted in legacy systems. I personally don't see that ever changing in this industry. If you bank with a major bank, I can almost guarantee your banking info is backed by a mainframe running COBOL :p 
Eh? Of course not. You could buy a vps. You could get a fixed ip and serve it from your home. 
Just host it on AWS or GCP. They both have a free tier, and the AWS free tier is pretty good. You could set the VPC to only accept incoming requests from a certain IP range if you’re worried about people accessing it.
Do note that this is only a subset of the Java community. `var` is great for a lot of things. I recommend watching Stuart Marks’ talk that I linked below.
Now you have to get into the Web application developing part! Start learning spring framework
 seriously? multiple decades (as do i) and you havent gotten past the this language is better than that crap yet? I used to fight the good fight about Java being better than Delphi, back when I loved Delphi but was using JAva more and more. It was my strong opinion it was just better. Period. Truth of the matter is no one language is better than others. They are tools. You use them as needed. Some fit better than others. Some cover just about all bases but are not best in all areas. Some are so new yet growing fast and very powerful (looking at you Golang!!), and so on. But seriously.. C# is not any better or worse than Java. It may do some things right..but its been around long enough that if it was that great it would have already garnered a huge following as well. Maybe it will still. But really.. lets get off the one language is better. I fight this all the time about how much better python is than java or golang for server side.. and yet I can write less code, faster and show a huge performance advantage every time... and still get told either is far inferior to python. Why? Maturity.. those that argue simply cant see past their hands typing the python bits... to realize other languages are good too. Better even than their favorite go to. For 20 years I have been using Java and only recently did I finally start to open my eyes to some new ones. Took me a while to finally learn that Java isnt the end all be all, even if it is a great language that has a huge following. &amp;#x200B; So really lets get off this stupid argument of one is better than the other. Someone of your supposed decades long experience and you cant figure that out? 
But is it webscale?
You want desktop applications, cross platform, which for me, does not leave all that many options. Personally, I'll skip all JavaScript/HTML stuff, been there, done that, didn't like it one bit. I think for cross-platform, that mostly leaves us with C++ and QT, JavaFX, and C# with some graphics toolkit. C++ and QT is an extremely powerful offering, most people might not consider C++ "easy to learn" though, and I find the UI on the Mac to be non-native to the point of unacceptable.
No. JoeCode isn't about features and it's not about people being able to use the things that you make. It's about the joy and privilege of writing in the optimal language. JoeCode is it's own reward. :-)
If you are using spring boot you should note that the server container you require is bundled with your app. It will be tomcat by default or you can configure another like jetty. With all that bundled you can run it anywhere you like. Are you confusing server container with other containers like docker? Even then you are not restricted. I am just trying to parse your question and there is almost zero relevant overlap between “servlet container” and ”public cloud hosting”
&gt;You don't use build tools. Using a build tool just adds more complexity. When your only job is to compile some Java code, it is fine not to use one. This is a fun hobby project, not an enterprise level application.
people use it for `int` now. `int`!
&gt;We shouldn’t have to depend on IDE’s Really? Who are all these IDE skeptics? If you're into some 1970s shit llike vi then write a script to insert getters and setters. Scripts get vi users hot
Ok, I see some people vote this down. Could you please elaborate? I guess I shouldn't suggest OP what to improve? Constructive criticism is not appreciated here. Should I have said "great code, thanks for posting"? 
It looks like in your [submission](https://www.reddit.com/r/java/comments/a4j9eu/what_does_this_execute/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
JavaFX looks stunning. Rohit built a beautiful application with it. Take a look https://github.com/RohitAwate/Everest 
you are rohit !!
How he made such a nice theme .?
And 4 years later the main improvement he want to introduce is changing type declarations to vars. What's the problem in suggesting OP what to improve? It is like if someone drives a car on the wrong side and nine tells them because "they started driving only 4 years ago".
Few years ago used a free tier instance and they billed me for the network traffic consumed. I wasn't aware till I got the bill. Just a friendly note.
no I am not Rohit. feel free to explore as it is open source project
Use Spring Boot; the servlet container will be embedded in the runnable .jar produced. Deploying .wars is very 2005. 
I'm a back-end dev (consultant). Current project and previous project both used Spring Boot in a microservices architecture. So the back-end. This is the most common use case for Spring by far (on the back-end that is); I haven't seen a single project where it's used for a desktop application. The main benefit of Spring is that there's a lot of stuff in services (logging, metrics, tracing, security, error handling, etc.) that doesn't directly add business value but still has to be handled. And not just handled, also maintained, extended, changed, etc. Spring handles a ton of that stuff and also makes sure it's all integrated between the different parts of the framework. So if you want to use open tracing for example, it will handle it all through the stack for you. In my experience many projects, especially micro-service architectures, have issues when they're using a hand-assembled framework instead, because all these non-functionals tend to be undervalued in the design. Spring has it's drawbacks; memory use and start-up time mainly. But the cost of those drawbacks tend to be a lot lower than the cost of having to handle all that stuff yourself.
&gt; That's probably because things like JDBC are tightly coupled to swing code. That's interesting. Can you show where JDBC depends on Swing stuff?
&gt; Using a build tool just adds more complexity. Using a build tool reduces maintenance complexity because another dev can just check out your project and run it. If you're doing stuff like adding libs to git and/or creating scripts to download libraries you're building your own build tool instead of using standard ones, which in itself adds complexity. 
Yeah, not re write the whole program. Hahahahaha. I’m just thinking if I posted my old programs I would be mortified, at my own decisions hahaha. 
We use it for internal tooling. I wouldn't trust Spring with anything that could ever need speed.
Coming from a corporate, I want to say that this is very, very accurate.
&gt; Using a build tool reduces maintenance complexity The build script is another thing to maintain, so I'd argue against this. &gt; because another dev can just check out your project and run it This is a single dev project. So until it remains so, this doesn't justify it. &gt; adding libs to git and/or creating scripts to download libraries If you're doing these, then you should use a build tool. But until you do this, not using one is just fine. I'm not saying you should not use build tools. I'm saying you shouldn't use them if you don't need them. But when you need them, you should definitely introduce them to your project.
Thx sexy 
&gt; The build script is another thing to maintain, so I'd argue against this. You always have a "build script". It's better to have it automated in your project than having a list of "how to build the project" set of manual steps on confluence. Or worse; a build script that only lives in your head. &gt; This is a single dev project. He's publishing it as open source so it's not. He's still a beginner and it's better for him to get started with a tool like Maven sooner than later, also because it impacts your project structure. It's the de facto standard in the Java space and there's no reason to not use it. A simple pom.xml is extremely simple so I don't see any reason to not simply include it.
Excuse me for having an opinion.
Yup, was it the infamous "unexpected rollback" exceptio?. I.e. say there's a constraint violation happening (duplicate key or whatever). Spring will take the raw exception,wrap it and mark the tx as rollback. But if that exception doesn't bubble through your @transactional method, because you catch it, spring will try to commit the transaction but then realize it has already been rolled back -&gt; unexpected rollback. (Even though it is not REALLY unexpected). I hope that explanation made sense...:)
This is one of the things that bothers me about Javascript after using Java streams. Their map/filter/etc operations are eagerly evaluated. Why? They made them unusable by making them inefficient.
I like var a lot, for a few simple reasons. Firstly, you can now reference methods you defined in an anonymous inner class, e.g. var foo = new Runnable() { public void run() {} public void someOtherMethod() {} }; In the past, you'd have to declare foo as Runnable, which prevents access to someOtherMethod(). Secondly, it is a way of subtly future-proofing your code. When you don't write the exact type down in your source file, you have greater freedom in changing the name or implementation of that type without having to touch quite so many places in code. This affords future flexibility that you can't get otherwise. In practice, I guess it's not hugely important because people rarely e.g. change from List to Set, but it has happened to me sometimes. Additionally, the full type's API is now available to you if you need it, so you can program to the interface if you don't need anything from the concrete type, or program to the implementation, without having to decide that at declaration time by writing e.g. `TreeMap&lt;K, V&gt; map = ...;` instead of `Map&lt;K, V&gt; map = ...;` it's all just `var` now. Similarly, dealing with collection types is now much better. I don't much care about the improvement of going from `Foo foo = new Foo()` to `var foo = new Foo()`, but when you have something like `List&lt;Map&lt;K, List&lt;V&gt;&gt;&gt; listOfMapOfListByKey` kind of variable to deal with, such as tends to happen with the streams API, it suddenly becomes nice to not have to write that collection type down. (If you actually need to know the type, you can still hover over the variable in your IDE and see it.) Steve Yegge once wrote a java-bashing post where he said that variable types are just comments for the compiler. var is about us not writing these comments to the compiler but just telling it to do the right thing. I think Java was hugely improved by addition of `var`, and I don't think it will be harmed in terms of readability. To the people who seem to really hate var, and deride the idea of replacing every possible place where type appears with "var", just hover over the name in IDE if you are confused about what a thing is. You only have to do it, like, once and then you can move on with your life. Let the rest of us enjoy not having to write quite so much, and the other benefits I tried to explain above.
Didn't realize it was so widespread. Well, maybe this will lead to some modularization/treeshaking tooling for the underlying chromium platform, similarly to what emerged in the js ecosystem... 
I assume it's to differentiate fields from variables. I'm working on a codebase that uses `m_` and `s_` prefixes for fields and static fields. I'm refactoring as I go. 
Javascript and Java have different coding standards. You should not deviate from the Java coding standards. 
I suspect it was for the way you said it rather than your suggested improvements. You've since edited your comment to remove the offending paragraph.
This information from Sonar's rule database might be interesting: https://rules.sonarsource.com/java/tag/error-handling/RSPEC-1148 &gt; Throwable.printStackTrace(...) prints a Throwable and its stack trace to some stream. By default that stream System.Err, which could inadvertently expose sensitive information. &gt; &gt; Loggers should be used instead to print Throwables, as they have many advantages: &gt; &gt; * Users are able to easily retrieve the logs. &gt; * The format of log messages is uniform and allow users to browse the logs easily. &gt; &gt;This rule raises an issue when printStackTrace is used without arguments, i.e. when the stack trace is printed to the default stream. (ErrorProne's description was &gt; Discarding an exception after calling printStackTrace should usually be avoided. which is less enlightening :) )
It's useful. I wouldn't go overboard with it. We're still trying to figure out, as a community, the best practices for using `var`. It took us several years to get consensus on `Optional` :) 
You say that like using better variable names is a bad thing.
I'd avoid running your whole program from a constructor. public static void main(String[] args) { new Main(); } You should create a `run()` method and use that for most of your logic: public static void main(String[] args) { var main = new Main(); main.run(); } (Java code conventions is to put the opening brace on the previous line) You should prefer the `java.nio.files.Files` API over `java.io.File`. The main reason is that they have better error handling. They throw an exception on an error rather than returning a boolean and no error message. You do have to handle an `IOException`, as that's a checked exception. You should probably log and quit in this situation var defaultDir = new File(Constants.DEFAULT_DIR); if (!defaultDir.exists()) { defaultDir.mkdir(); } vs try { Files.createDirectories(Path.of(Constants.DEFAULT_DIR)); } catch (IOException e) { throw new UncheckedIOException("Could not create the default directory. Please check your configuration", e); }
Your `Runnable` example is possibly a bad example. If you have a `Runnable` with more than just a `run()` method you should probably avoid using an anonymous inner class, and use a static private inner class instead.
WPF is awful compared to JavaFX.
Heh, I shouldn't have edited it. There was a phrase before the last paragraph saying that I closed the page after nitising the issues I described. I guess it didn't bring any value to the comment that's why I removed it. Pity reddit doesn't support comment change history. 
Yep, the comment didn't come across as constructive criticism before. It's better now.
Why would they need to mention Swing? It's already in there.
"better" is retarded. How about some specifics? C# has more language features than Java but many of them are garbage. 
JavaFX &gt; WPF in every single conceivable way. 
`@Transactional` is dependent on getting an exception to know it should rollback. If you catch a non-SQL exception and handle it yourself, returning from the method, Spring will commit the transaction.
You have a hierarchy of types, with `GeminiException` at the top and `EntityRecordException` as one of its presumably many children.. but then the hierarchy of errors goes off in a different direction and I have to check an enum; the `GeminiException` type itself has no idea about the existence of these. So, if I catch a generic `GeminiException` and I want to deep-dive programatically (vs. calling `.getMessage()` for loggging/user feedback purposes) as to why it was caused, I first need to do some instanceof checks, then cast, then do some enum checks. That's obviously not great. What is this enum stuff buying you? Why not just make more exception types?
FYI You seem to have a %5D too much in that link
The notion 'you should not use lombok (or delombok first) when you write a library' makes no sense unless you distribute your library solely in source form. Java libraries are not distributed in source form though. That's not how maven / gradle work, for example. In fact, maven/gradle/IDEs/other build systems make it fairly simple to ship a library as a jar with classes, _and_ to connect a zip with sources to it such that, say, if you want to debug and step through the code in the library, or just look up how it works (for example by ctrl/CMD clicking the name of a method in eclipse), that you do have the whole source. I therefore find your comment rather disingenuous. Or perhaps I just don't understand what you're driving at. DISCLAIMER: I'm a core contributor of Project Lombok. 
I don't see why, I actually prefer JEE to Spring.
100% aggre. I see no relation between "using servlet container" and "not being able to host the app in a cloud hosting".
I use enum to avoid Strings for errorCodes. I want to use getMessage probably only for development logs (or debugging logs). For other types of logs I'll use a specific Service, that is able to resolve the message given the code (this is my idea, it is not implemented yet). You are absolutely right about enum/instance checks. But it is acceptable for me. The following is for example the handler of the Exception ( throwed by the API handler). I can easily define the error handler for my Exception type (in this case EntityRecordException) and then decide what to do checking the error code. @ExceptionHandler(EntityRecordException.class) public ResponseEntity&lt;?&gt; handleEntityFoundException(EntityRecordException exception) { HttpStatus httpStatus = HttpStatus.INTERNAL_SERVER_ERROR; switch (exception.getErrorCode()) { case MULTIPLE_LK_FOUND: httpStatus = HttpStatus.CONFLICT; break; case LK_NOTFOUND: case INSERTED_RECORD_NOT_FOUND: httpStatus = HttpStatus.NOT_FOUND; break; } return new ResponseEntity&lt;&gt;(new ApiError(httpStatus, exception.getErrorCodeName(), exception.getMessage()), httpStatus); } 
That's not what I meant. Let me try again: **Why are you using enums _instead of_ more subtypes?** The first answer ('to avoid strings') makes no sense. The second answer, about being able to switch on them: Okay, but, that same argument can be used to say that you should have no hierarchy whatsoever; there's only `GeminiException` and nothing else, and to figure out what kind of error it is, switch on `geminiEx.getErrorCode()`.
&gt;Why are you using enums &gt; &gt;instead of &gt; &gt; more subtypes? I simply don't want a too fine hierarchy, but you are right I'll think about it. Thanks.
I always prefix private variables that should not be accessed directly (anywhere but from their accessors) with an underscore. It helps me not accidentally use them instead of the method and also conveniently removes them from autocomplete in the IDE.
As always, it's a hype. It may be something like the present, but it will not be the future. Sad enough how many people think a web application (using HTTP!) could replace a real desktop application. But that is the same. We had a time when people said thin clients would be the future. Then it were fat clients again. Then they invented the term rich clients. Now we are at web clients (from a usability perspective the worst of all hypes). There is no such thing as a stable and future proof technology. So don't think because everybody is using it there would be a need for you to do the same. 
It seems like, for no reason in particular, that you don’t like inheritance in Exceptions. Inheritance in this context is actually important. By limiting the variety of your exceptions, you force people who use your application (in this case, you) to not really be able to do anything meaningful with your exception handling (without a nasty switch statement in your catch block). Sometimes it pays to actually be OO.
My is an Example but you are right. Actually my code could be extended to provide also the finest hierarchy. Letting the ErrorService to know for Exceptions that has a single errorCode. Then in my controller advice I could catch the intermediate Exception node and check the instance (if I don't want to directly catch the leaf exception). I think I'll use both the strategies accordingly to the needs.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
🤔🤔🤔
Thank you very much! Actually, I'm kinda new to reddit.
and now they write even more bad code, until only bad code is written
I like the overall design, but I think going back to "error code/number" is a step back in design from what we have already ... just send the full error to stderr or logger. All of the exceptions should contain at least a "message" String as well as the original Exception, so you can print out the stack if needed/level matches.
Stuart Marks is the guy that holds "You are doing it wrong" [talks](https://www.youtube.com/watch?v=Ej0sss6cq14) at conferences years after the introduction of a feature or API. Atleast he wrote a [guideline](https://openjdk.java.net/projects/amber/LVTIstyle.html) for 'var' in timely fashion. (Eventhough he breaks his own rules in same guideline a few sections later).
There's no real consus on `Optional`. I still see it used in fields and method arguments for instance.
`var` is good in some cases and bad in others. You can't just blindly replace every variable declaration.
&gt; `List&lt;Map&lt;K, List&lt;V&gt;&gt;&gt; listOfMapOfListOfVByK` You should refactor the type. Streams do not produce those if you don't let them. If you use var now, you're just hiding the type. You or other developers still need to deal with it.
Nah, there's consensus and then there's bad code ;) The fact that you know that fields and arguments are wrong indicates that we're both in agreement with the best practice. 
You should quickly unlearn pretty much every habit you got from JavaScript. Not just for Java, but every other language.
It looks like in your [submission](https://www.reddit.com/r/java/comments/a4ky0z/array_of_ten/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'm not using Spring boot, I'm setting up the files myself (to better understand what Spring boot would be doing). I was under the impression that I would need a server that can run web apps, such as AWS' Elastic Beanstalk that asks if you need Tomcat and then I just need to upload my WAR package. That makes it seem like I would need a cloud host that can do this.
My first question has to be do you really need your application on the open internet? While it may have fallen out of fashion, the war inside an Application Server approach still has it's uses. Container managed transactions and datasources being one such case. Just because world + dog is talking about [Spring Boot | Insert new toy]; it doesn't make it the one solution to rule them all. That said; Spring boot is so common now, that it's useful to know. AWS/Google - SpringBoot create an alpine image with your Spingboot jar and a startup command. AWS/Google - Just deploy a tomcat docker container with your war in the same way you develop the application. 
And different projects define their own coding standards. The Sun/Oracle coding conventions aren't the end all be all.
&gt; My first question has to be do you really need your application on the open internet? I don't see how that's related to the question. Whether you are deploying inside an app server or are deploying it with an app server, you probably don't want to have it exposed directly to the internet. 
Well, I'm not sure if enough people got the message to say we reached "consensus".
I think you're overcomplicating things. Just throw a single simple exception specific to the problem you encountered and then use Spring's ControllerAdvice to turn it into an error response. I [wrote a blog post on how to do that](https://niels.nu/blog/2016/controller-advice-exception-handlers.html) a while ago.
Java has been around since before best practices.
No, I can't. It's just something I remember reading because it sounded so awful. 
So if you want to take the WAR approach you can still run Tomcat, Jetty, or another “servlet container” compatible java server anywhere you want and then deploy your war into that. While you can use tools in “public cloud providers” you are not required to. If performance is not a requirement you can run this stuff on a raspberry pi. I will often hang on to an old computer of mine and use that around my house. I also like getting a server from Digital Ocean or if your computer is beefy enough running isolated virtualized servers in Virtual Box to get a feel for how that all works. Good luck. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/a4ljv0/connecting_to_cloud_sql_database_with_java/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I made this! Bytestacks probably isn't widely applicable and quite narrow in scope (there might be better tools out there to diagnose higher level application startup issues), but it's been and continues to be a key tool in pinpointing JVM bootstrap inefficiencies and regressions.
Sure. Mine is another way to organize Exceptions without inheritance. 
Can't respond? To retarded I guess? To much C# programming for you I guess. 
Still doesn't prove there's a dependency between java.desktop and java.sql though. 
It isn't, it's just that in order to have "proper" variable names you need to include the type in the name anyway plus other descriptive words to make the variable name stand out. 
If your code is for outside consumption, your coding standards should be on top of Sun/Oracle/Elements Of Java Style/Google. 
That's not what a better name is. Descriptive, yes. Type in the name, absolutely not. Call a list of users, well, `users`. There's no need to call it `userList`. But you also shouldn't call it `list` or `tmp` or `usrs` either.
It's just something I read that was so bizarre that I remembered it. 
A lot of scala constructs can be converted into java directly. I say most, but I’m not actually sure. Features like implicits might not convert directly. However At the end of the day it’s all bytecode so you can make parts of the application that don’t transfer over cleanly into jars and access them as you would any other library in your java application. Where I’m working we’ve moved Apache spark jobs to and from java so I’m sure it can be done but, no I don’t think there is a direct migration guide. 
Have you tried compiling and seeing what JAD, Fernflower, Procyon etc spit out? I know nothing of scala but this is where I'd begin
&gt;That's not what a better name is. Descriptive, yes. Type in the name, absolutely not. OK. var users = db.getAllUsers(); What is users? A HashSet? A List? A Map? A standard array?
It doesn't conflict with it at all. Resources is only for resources. You can use "package by feature" in the source code and "package by feature" in resources using subfolders. &amp;#x200B; It is ok if a single feature has both resources and source code. &amp;#x200B;
Appreciate it. As for securing the application, do you mean in terms of someone being able to get information from a DB that the web app works with?
Just curious as to why you'd move from Scala to Java? We're trying to go the other way around for some systems! 
It’s really funny to hear the word “fact” in the same breath as words like “better”, “feels”, “awkward”, “popular”....all subjective terms. I’m not sure what you’re referring to when you say Java does not have string literals... String str = “abc”; Is a string literal that gives the compiler the opportunity to optimize its memory allocation. If you mean Java does not have RAW String literals, yes that’s true (for now - though see JEP 326), but....really, is that you’re not being able to HARDCODE raw Strings a major deal breaker? Annoying? Yes. Problem? Far from it. I’m a Java developer and frankly, aside from the learning curve in initially figuring out all of the Streams functionality, I don’t find it that awkward. But, when I first started digging into Scalia to figure out a colleague’s codebase I felt the exact same thing (ie awkward, ridiculous syntax like defaults, etc) so I can understand you’re not liking the syntax as it might be wildly different than what you’re used to. I find Scala’s syntax to be incomprehensible (despite the claims that it’s more efficient than Java), but I don’t use syntax as evidence of “better”. I don’t even make judgments of “better” or “worse” when it comes to languages. I’m also amused by your acknowledging that up until now you’d refused to pick up Java, and you’ve used C# for some “reasonable” amount of time but yet you still somehow or other KNEW that C# is “better” than Java. How were you able to know that if you’d never really tried to learn it? That’s like my 4 year old claiming he doesn’t like a new dish we’ve put in front of him before he’s even tried it. And....did you write this post in the future or have we already celebrated Christmas and New Years and it’s already 2019 and I missed it all? So, with all that said, it’s a fact that nothing you’ve said is representative of C# being factually “better” than Java. As was said before, it’s a pretty naive notion to begin with. Computer scientists and more traditional developers are taught to quantify their decisions. Nothing you’ve said here comes anywhere close to quantification of your assertion that C# is better than Java. 
Sorry if it read as if you are saying c# is a better language than java... oh wait.. you did say that. That didnt sound like an opinion.. it sounded like you were stating a fact that c# is better.
Wie/in was für Teile habt ihr das Projekt aufgeteil? Sieht auf deinem iPad Pro Foto doch schon fast fertig aus.
Seriously, how the heck you still no raw string literals in 2019(it's almost 2019, it's basically 21 day until it's 2019) not a problem? Python has already did it, C# has already did it long time ago, Scala and others already did it, heck, even Javascript did it already, and I'm sure that even C++ did it. It became an essential thing. I know that it's already preview, but it's been preview from like 2018 january from what I think, and Java 12 will only get released in 2019 March, and stuff like companies may not even be able to use it before 2020. Not only that, but they lack getters and setters, and other many syntax sugar/features. Now most of programming languages will care to modern themselves with new features while Java is still trying to implement very basic stuff. That alone proves that it's outdated. And please, no arguing about this and about the fact that C#/Kotlin are much better. If you want to know why?(as if I didn't provide enough info) go to Google, if you're really a programmer, you should know how to use it. Good luck and have a nice day!