Compact lambda syntax does not even almost enable any of the things I listed. FP is a lot more than map/filter/fold. And all of those things I listed can help greatly with code clarity, organization, and reuse. If you want to program as immutably as possible (which helps a lot with localizing what you need to keep in your head), things like monads really help keep your code DRY.
I've not tried it but it looks like assertj swing is superseding FEST. I've used the main assertj library for a couple of years in non ui unit tests, it's pretty sweet. http://joel-costigliola.github.io/assertj/assertj-swing.html
Code is code whether it's in anonymous function or not refactoring should not be affected
A quick `wc -l src/groovy/** grails-app/**` of my team's grails project gave me 72,000 lines of code. It's been around for about 6 years at this point. Grails aside, I've only had a couple of issues with Groovy. In the early stages of the project, we overused some of the more dynamic features of groovy and failed to properly test the code. As we tried making changes to the code, we found these parts to be very brittle and have since rewritten them to be less dynamic or more heavily tested. To date, we haven't had any groovy performance issues. All performance issues have been related to poorly written DB queries.
wow im kind of surprised this didn't already exist. nice!
Ok, didn't see that. Not sure how accurate all their categorizations are though. Regardless the decline of Groovy and the rise of Scala is seen in many other places as well. 
I thought that way for a while when I was learning groovy. Then I figured out there was a happy medium. If it is obvious based on context what the type is just use a def. If you are writing a method header you use explicit types. Use types where it makes it more readable and drop the types when the type is obvious.
g2one was formed after the projects were already under way - the principals felt there was enough community support to make a commercial venture of it, they did consulting and support work, then were acquired.
Manning has a bunch coming out soon, but none are quite published yet. Some like this one have [online early access](http://www.manning.com/kuhn/) though, and I think there are some java examples there. But most use Scala to take advantage of the akka library for concurrency. I'm more interested in scala so I will probably pick up [this one](http://www.manning.com/ghosh2/) when I finish the Function Programming in Scala book that I'm working through right now.
Great idea! Subbed and looking forward to some great posts.
It's still very early in its development. 
&gt; The reason people love monads is because they find it leads to better code. Who loves monads, other than pure functional programming snobs? How often do you see monads in actual widely used production code? Never in my experience, and I'm fortunate enough to work with some of the best software engineers on the planet. Most people that try to lecture others about monads are just trying to sound smart. Even using the term "monad" betrays this fact. Simon Peyton Jones, who clearly cares a lot more about educating people than simply sounding smarter than they are, actively discourages use of the term "monad", because it's an obscure reference to category theory that no programmer really needs to care about. If you really care about writing clear readable code, then you should read [Clean Code](http://amzn.com/0132350882) by Bob Martin. I'm fairly sure that he doesn't mention monads once.
Sounds like a top idea, subbed and waiting
Is/has there been any recent discounts for the Ultimate edition?
Good idea I would like some involvement to.
&gt; I worry that we're going to lose these in favor of language changes that I'm not sure actually help that much. Well, you can always trust Java when we talk about consistency with past versions :) Java 8 won't make Java go off-road. It's more like a language improvement and not "loss of personality". Java needed lambdas a long time ago and thankfully now we have it.
www.reddit.com/r/springsource/comments/2ut4ai/fyi_this_channel_is_not_supported_by_spring_team/
Does the JVM not optimise the code to use StringBuilder anyway?
The original idea might be quite nice - modularize the UI of your enterprise intranet. Unfortunately the execution is less then ideal: 1) It's not part of Java Enterprise edition. It's release cycle completely disconnected from EE. It would be much nicer if e.g. Java EE 6 servers had to support portlet 1.0, Java EE 7 server portlet 2.0 or something like that. Instead the support from various EE servers is rather random and unless you want to pay you are basically stuck with the monstrosity called Liferay. 2) Because of 1) using it with other EE stuff is not very smooth. The worst part is the integration with JSF. Yes, there are some "portlet-bridges" but *all* of them suck because they always work only with a particular version of a particular portlet container and a particular version of a particular version of JSF implementation (e.g. you must use Pluto X.Y.Z and Mojarra 2.2.0_123_svn4575 otherwise input fields are broken). And once your UI gets a bit more complex (= more than 2 text fields and a button) things get very ugly. AJAX, file upload etc. are all implemented using ugly hacks and never really work the way you want. The underlying problem is that the lifecycles of portlet request and JSF request are just too different and cannot be merged without breaking some stuff. 3) The standard itself is very weak. As consequence all portlet containers have to provide some proprietary extensions for stuff like authentication in order to be actually usable. This kills portability. Once you select a portlet container you're stuck with it forever. 
1. Java will do this for you in some scenarios. 2. Regex isn't necessarily the problem here. The problem is that many string methods, like split, recompile the regex on every single invocation. Before writing that nasty find logic yourself, you probably should just save the compiled pattern off and reuse it to see if it fixes your performance problems. 3. Ugh... There is so much wrong here. First, starting with Java 7, escape analysis was turned on by default. In this case, almost definately, any object allocated would be allocated on the stack, not the heap (practically free) and more than likely would completely live in the registers. Next, List.get() can be terribly slow, especially in the case of linked lists. You have to traverse the entire list to get to the "get" location. That means turning an O( n ) algorithm into an O( n^2 ) algorithm. And finally, There is a REALLY good chance that the compiler/optimiser is already producing the optimal index lookup code. This is a somewhat easy optimisation that can be picked up by the JVM. On top of that, the JVM can further optimize the scenario of ArrayList iterator by removing the bounds checking making the iterator version even faster than the indexing version. This one is terrible advice, you shouldn't do it at all. 4. Sure. 5. Again, the author doesn't realize that java does escape analysis. What goes on the heap and what goes on the stack is going to depend completely on the context of the code. Not only that, but the JVM does do some auto-unwrapping of Number type objects when it can which means there is a good chance that the value presented may actually end up just being the primitive int. 6. True today, might not be true tomorrow. Tail call optimizations are on the road map for Java, there is just some architectural changes that have to take place first. I wouldn't be surprised if they land by Java 10 or 11. Either way, this likely isn't the thing killing your performance. Write the algorithm that makes sense before worrying about whether or not recursion is going to screw you over. 7. You should always do this. 8. This one is good too. 9. I would say avoid doing this. hashcode and equals are REALLY easy to mess up. You should, instead, either rely on your IDE to auto-generate it (most will do that now-a-days). Or use something like Apache Commons Equals and Hashcode builder. Either way, this is something you probably should avoid handwriting and optimizing. 10. ehh.. sure... Though I have seen, more than I care to mention, the SQL engine totally messing up some query based on slowly polluted or incorrect statistics. The nice thing about writing something like by hand is that you get really consistent behavior and performance. The SQL method may give you faster performance, but it also may give you totally screwed up performance. Sometimes it may give you fast performance and then totally break down because some magic statistical tipping point is reached. There is a benefit to being able to strongly control how the algorithm is executed. VM and language writers optimize for idiomatic code. If you want your code to run fast, you are generally much better off in the long run writing it as idiomatically as possible, because if it isn't optimized today, there is a REALLY good chance it will be optimized in the future.
Portlet 3.0 is supposed to fix many of these issues but the JSR process doesn't seem very active: https://jcp.org/en/jsr/detail?id=362 - there hasn't been any activity for one year. I believe this is a dead end.
&gt; did a simple array instead of a map just to see what the optimal performance is using ordinal: How big is your enum? Java makes the mistake of using bitmasks for small enums (you should never use bitmasks. Yet people do it all the time thinking it is faster).
I think you didn't read the article in the right context. This article isn't about premature micro-optimisation of business logic. It's about specific optimisation of code that is executed in the context of an otherwise unoptimisale (= hard to optimise) O(n^3) algorithm, or so. &gt; The nice thing about writing something like by hand is that you get really consistent behavior and performance. [...] Doesn't that strictly contradict your arguments referring to escape analysis? Funny that you trust the JVM's optimisations, but not the SQL engine's :)
&gt; did a simple array instead of a map just to see what the optimal performance is using ordinal: &gt; How big is your enum? Java makes the mistake of using bitmasks for small enums (you should never use bitmasks. Yet people do it all the time thinking it is faster). Six items long, redid it with a much longer enum (30) and the results are a bit different: Array/EnumMap/HashMap put: 3.15/10.47/23.37 get: 1.58/2.19/13.43 I assume the hashmap gets worse the larger the enum. I can see how this might have an impact when you use larger enums but that's still far from real bottlenecks 
&gt; Put -&gt; 6 nanoseconds difference (single call) &gt; Get -&gt; 5 nanoseconds difference (single call) Run that under the premise made in the article. You might get a 6 vs 5 seconds difference &gt; Please read this article in the context of there being a problem at the leaf node of an inevitable O(N3) algorithm.
Perhaps the [JFxtras](http://jfxtras.org/) library - there you have the Agenda control - witch seems to me similar to what you are looking.
I will look into it, thank you
We could of course discuss how to solve problems in *general* and in the *long run*. But sometimes, you have a big lump of legacy code and you can't just call your friends at 1-800-SCALE-GOOGLE and ask how to improve complexity from O(n!) to O(1). You'll have to tweak the little things where you can get 2-3% wall clock time improvements per optimisation. That might just be enough to save your customer's day for the moment. Of course, if you want to discuss the big picture, then this argument is totally lost. But that article simply wasn't discussing the big picture.
&gt; It's about specific optimisation of code that is executed in the context of an otherwise unoptimisale (= hard to optimise) O(n3) algorithm, or so. Umm.. Ok, but if you are the author then you got some things wrong. #3 in particular is a deoptimization. &gt; Doesn't that strictly contradict your arguments referring to escape analysis? Funny that you trust the JVM's optimisations, but not the SQL engine's :) The JVM is very consistent in the way it optimizes things. WIth the JVM you are basically guaranteed that after running for a while your code will get faster, not slower. SQL (at least SQL server, but I imagine other SQL engines are doing similar things), on the other hand is totally manic in the way it optimizes things. Queries aren't consistently executed at all, rather SQL bases everything off of an ever growing list of statistics. This is fine in many cases, however, not all. The place it really falls over on itself is when one query can have vastly different results. For example. Lets say talk about this query `SELECT * FROM users WHERE employer=?` Now lets say that most employers on the system have 10 users on the system. However, 4 or 5 of them have 50000 users on the system. The queries planner wants to do completely different things when it is an employer of few users vs many users. The thing is, depending on how often this query is ran and what the results size is, you are going to end up with a query plan that optimizes for either the small amount of users scenario or the large amount of users scenario. That can have a drastic impact on performance. Of course, that example is somewhat contrived, and probably a bad one. IIRC, most sql engines look at query inputs and keep track of the stats on them.. so in this case it would probably do the right thing in either case. However, the more complex a query becomes, the more and more likely this nightmare scenario is going to happen. The worst part is that it is totally a ticking time bomb. This isn't a made up problem, this has struck our servers before killing our performance. The worst part? There is very little visibility into why things got slow. They just do. You might be able to say "Hey, this query is taking a long time" but actually figuring out that it was a statistics problem is going to be really hard to track down. Heck, it might not be a statistics problem, It could be that an Index was dropped, or maybe an index was added, or maybe an index was changed to include more data. It could be any of these things and without a lot of work you won't be able to figure it out. You just don't get that with Java. Most java profilers will point you to the exact method that is running slow. They will let you know "Hey stupid, you are spending a lot of time GCing". They will tell you exactly what is going wrong and why it is going wrong. With SQL servers, it is a lot of investigation. There is no one thing you can do to figure out what the performance issue is, and often it is a game of guess and check. So yes, it may sound contradictory, but it isn't. Java will always do exactly what you tell it to do. It may figure out how to do it faster, but it will never turn around and start doing things really slow just because some method parameter looks like it might be faster if used another way. SQL Server is a backstabbing bastard. It will murder your performance in the night for reasons that are really hard to deduce.
Also for #4 it is VERY likely that the wasNull check would simply be inlined and the only cost would be the extra boolean evaluation. Working for a very large company that writes Java code that deals with obscene amounts of traffic almost all of these points would be shot down as a premature optimization that sacrifices code readability for no quantifiable performance. If your profiler doesn't say it is a problem don't bother, the first time you hit I/O almost every one of these becomes even more pointless.
&gt; Umm.. Ok, but if you are the author then you got some things wrong. #3 in particular is a deoptimization. Well, the main conclusion was to shift towards using arrays rather than lists, if possible... Obviously, the List must not be a `LinkedList` &gt; The place it really falls over on itself is when one query can have vastly different results. I don't know SQL Server very well, but Oracle maintains several cursors and execution plans per query - at least since 11g. &gt; However, the more complex a query becomes, the more and more likely this nightmare scenario is going to happen That's true. But at least you can write dozens of complex queries with little effort and optimise those that really hurt. If you had to write down the execution plan manually (*and optimise it manually*), well you'd still be coding two years from now. &gt; Most java profilers will point you to the exact method that is running slow As a matter of fact, parts of this article arose from profiling, and replacing the `Iterator` by arrays heavily improved some parts of the profiled code, both in profiling and in benchmarks. Anyway. I agree with your conclusion.
What do you mean by "any object allocated would be allocated on the stack, not the heap" in point 3?
You're right, I almost forgot that most developers love playing with new toys more than anything else regardless of how important that anything else is relative to the toy.
Yes, but... The example: String x = "a" + args.length + "b"; if (args.length == 1) x = x + args[0]; gets translated by the compiler to: String x = new StringBuilder("a").append(args.length).append("b").toString(); if (args.length == 1) x = new StringBuilder(x).append(args[0]).toString(); You end up with two constructor calls to `StringBuilder` and two calls to `toString`, each of which copy the entire string. It's a good practice to share the `StringBuilder` if you are building a string beyond one statement and defer an explicit call to `toString` when you are done. If string construction is confined to one statement, go ahead and use `+`.
Do you have any advice on moving from Nexus to Artifactory? We've been thinking about it for a while now.
I'm trying but I'm a beginner and some thugs are different.
Well, I don't know what you want, so I'm just going to try and explain everything that is going on... So this might be a long post. The stack is a pretty simple stack in memory. It grows down (increasing memory addresses). In a function call, the function memorises exactly where the stack is. After doing that it starts pushing stuff onto the stack growing it downwards. When the function is about to exit, it moves the "end of stack" pointer to the location that it start at effectively freeing all of the memory allocated on the stack. Storing something on the stack is very fast, it is literally adding two numbers together. Freeing memory from the stack is also really fast, it is essentially taking a previously stored value and shoving it into the stack start location (a single move operation). Storing something on the heap is much more complicated. With the heap, there is a bit of work to say "Where is there available memory?" and "Where should this live in memory?". There is also the extra work the GC has to do every time it runs. It now has to go through and ask the question "Is this memory used anywhere else?" By storing something on the stack you pull a lot of pressure off of the GC. The GC doesn't have to check the objects on the stack nor does it have to explicitly free up those objects. Java 6 (5?) introduced escape analysis. Basically the JVM will look at objects allocated in a function and say "Can this object leak out of this function". Or in other words, is there a way to access this object after this method is run. If the answer to that question is no, the JVM will allocated the object on the stack instead of the heap. Since stack allocations and deallocations are stupidly fast, this results in a pretty significantly performance increase. Now, an assumption on my part, iterators are really simple functions. Simple enough that they are highly likely to be inlined. Because they are likely inlined it increases the probability that the variables that they would return which wouldn't be stack allocated are now going to be stack allocated. Further, because those variables are along the lines of simple ints, they are likely to not even touch the stack, but instead get stored off in the registers themselves.
Well, that settles any question I had about using jooq in my next project over hibernate.
Not to jump on a bandwagon, but JavaFX is great for doing UI development as it tends to play well, and lends to more readable frontend implementation than does SWING. Regardless of IDE, you should check it out. If you need a D&amp;D UI editor, SceneBuilder (the free JFX tool provided by oracle) does the job well enough. That being said, it's really only easy to target 1.7+ users without having to redistribute jfx.
&gt; The test here only breaks on refactor if you change the dependencies of a class or if you change your implementation. I don't want to break when I change the implementation. I want to break when I break *functionality*. That's what sociable tests provide and why I prefer them. &gt; If you change your implementation, then sociable testing becomes pretty cumbersome. I don't see how that's true in my code (though I see how it is in your example). Can you explain why it's cumbersome in my code? I have the exact opposite opinion.
Don't pay for a swing tutorial
The Ask toolbar is bundled with the JDK. If you failed to uncheck the "install Ask toolbar" thingy, it'll dutifully install it for you. This has been a thing for a while. Lots of people are very upset about it and Oracle refuses to talk about it. I think they're under contractual obligation or something. Just uninstall it.
&gt; Streams, surprising to me, were faster than indexing/iterating over an array list. The work that went into making streams/lambdas performant on the JVM means the JIT is incredibly aggressive about optimizing lambdas, especially when it comes int inlining calls. 
Yup - the JDK is bundled with the Ask toolbar for reasons that no-one is really sure about, and Oracle won't say. You can use [ninite.com](https://ninite.com/) to install the JDK without the crapware.
i rather download the official one and uncheck myself.
Use Spring Web and a suitable JSON library like Jackson with Spring HATEOAS and Spring Data. Even if you don't want to use Spring Data for persistence some of the classes in spring-data-commons like Pageable are very useful in conjunction with the above. At that point it's trivial to create REST services in Spring and build an AngularJS application utilizing them. Documentation can be provided through Swagger or another mechanism. I'm not a particularly big fan of Swagger but it's easy enough and our UI lead says it works for him.
How so?
IntelliJ GUI builder is also great.
Cool, but where do I start? Any recommendations?
It is better not to use GUI UI editor. Writing code gives you more control on your UI. But why have you decided to use Swing?
Ninite is actually pretty cool. I use it to bootstrap new installations all the time.
Okay... Well someone else already filed a bug report with JetBrains who then said they were fixing it. So it's all good.
This sounds good. This is a mature and well functioning framework. The improvements in aligning even more with CDI are nice. Having BaulusC on the team can only mean good things.
Not OP but I can't find a good tutorial for one of those either.
&gt;This is a mature and well functioning framework. True, of all the hundreds or even thousands of web frameworks out there JSF is one of the oldest and still going strong. Many of the newer frameworks have yet to show such longevity.
Managers love portlets. Developers don't. Like zrnkv said, portlets are a failed idea that's not allowed to die. That also means portlet specialists earn a lot of money. You'll need a lot of frustration tolerance, but if money is important to you, that's the way to go :).
Nice! I wrote something similar a few years ago after reading Phillip Wadler's paper on monadic parser combinators. It wasn't as complete or elegant, especially since lambdas weren't introduced to Java yet. I had a bunch of interfaces like Function1&lt;A, B&gt; { B apply(A x); }, Function2, ect. As well as Tuple1, Tuple2, ... It wasn't the most beautiful API, but I thought it was pretty cool.
We use it just for gathering CPU and memory usage for the whole machine for each node in our clustered server and graph the results in the dashboard. It just works :)
&gt; Second, the optional object itself could be null Then you have real problem with your code ;p edit: What about `Optional&lt;Optional&lt;Foo&gt;&gt;`?
This is not a job board. &gt; I am posting this only to share ... Head hunter, got it.
&gt; First, it's a really shitty thing to put in method arguments. Then don't. This is not the intended use of Optional. It should be used as the return value of methods that may or may not return a result. It should not be used for fields or parameters. &gt; the optional object itself could be null That's a MAJOR bug if a library returns a null Optional. If you want null pointer exceptions all over the place, write methods that return null. If you don't, write functions that return Optional. 
Mine is broken as well :C. Just wanted to update it so I could play runescape...
The 2 complex objects are of the same type. I just need to compare both of them and report if in case any field mismatch is there. I did try EqualsBuilder. Though it serves half of the problem, but i am still not able to figure out as to how to report the mismatched fields.
So say i have a complex class whose structure is like below :- So with just Hamcrest can you share any online resources which explains how to compare such complex objects without overriding equals method and even getting the list of fields which didnt match (*it should inform the exact attribute and not the nested class within which its present*) public class Person { Address homeAddress; Address officeAddress; //getters and setters methods follow } 
Without knowing more, perhaps consider an In-Memory Data (Processing) Grid to store your cached data and horizontally scale real-time processing. Many options - Hazelcast, Coherence, Gigaspaces, GridGain, Infinispan, etc. Create and implement to service boundaries, then deploy services on the grid.
CPU intensive as in pure computation or data processing? And can you get linear speedup with a parallel implementation ie, multiple cores or computers?
Serialize both to JSON with Gson and pretty printing turned on. Now just compare the strings and get a nice human-readable output.
As others have pointed out, there's a lot of information missing here to make a complete assessment. That being said, I did address a system with an architecture that sounds a lot like this about two years ago. First question: what does the cache hit pattern look like? If you're trying to precalculate everything on the off chance that someone *might* ask for it, there could be a lot of wasted cycles. Second: are your users authenticated? If not, there is always the potential that someone is going to a crawl &amp; scrape job on your site just to be a prick. At least throw up a robots.txt to ask Google and the like to be polite.
With easiness of asynchronous manipulating DOM structure (aka "component tree" aka "view"). Really, JSF is now awesome. As for me there are two approaches to build JSF pages: 1) Primefaces :) 2) Stateless views with "html5 friendly markup". No problem with using bootstrap, still allows to use this cool ajax content reloading, pages are lightweight.
Overriding the equals and hashcode methods is a good idea regardless.
Use a [StringBuilder.](http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html) To use it in this use-case, use it like the following: public static void main(String... args){ Scanner in = new Scanner(System.in); StringBuilder userInputResult = new StringBuilder(); while(in.hasNextLine()){ userInputResult.append(in.nextLine()); } System.out.println(userInputResult.toString()); } Given the input: **Hello how** **are** **you doing today?** Will output: **Hello how are you doing today?** Hope this helps.
From the sidebar: &gt; Please seek help with Java programming in /r/Javahelp! Be sure to read its sidebar &amp; posting guidelines, too.
You're not far. If you read the Scanner javadoc, it states: &gt; A Scanner breaks its input into tokens using a delimiter pattern, which **by default matches whitespace**. The scanner uses the whitespace as the default delimiter so you have to change it to the "new line" character (\n or \r\n depending on the system -- if you need to make it platform independent, you can read System.getProperty("line.separator")). Now, the problem that you'll have is to know when to stop. Because you'll always enter a carriage return to validate the input, the Scanner will always think there are more lines. One simple option is to check the length of the input; but it will depend on your needs. Here's a basic sample: Scanner in = new Scanner(System.in).useDelimiter("\n"); StringBuilder output = new StringBuilder(); while (in.hasNextLine()) { String line = in.nextLine(); if (line.length() == 0) { break; } output.append(line).append(" "); } System.out.println(output.toString()); You can then enhance further by removing the last space if you need, or changing the condition. A somewhat more concise but less readable version: String line; while (in.hasNextLine() &amp;&amp; (line = in.nextLine()).length() != 0) { output.append(line).append(" "); } 
I met him on some of the hackathons. His very kind with a good sense of humour. Didn't know about his skills!
https://www.reddit.com/r/java/comments/2su70s/jitpack_easy_to_use_package_repository_for_java/
BeanUtils is good for this: http://commons.apache.org/proper/commons-beanutils/apidocs/org/apache/commons/beanutils/BeanComparator.html 
What, you've not heard of google?
Spam
In my current project we use DDD/CQRS with Akka. Very interesting, but a high learning curve, a bit more low level than Apache Spark I'd say. Especially, the issues you get with an event-based architecture are interesting to debug but I can't go into detail.
Seems to be fixed today. I just found it very strange that my Java JRE on windows was refusing to update correctly, the Java.com web site directed me to a broken link, and I couldn't find anywhere to download the Java v7 update instead of force upgrading to Java 8
Akka is very interesting as it is based upon the actor pattern. This can allow you to design your system around small functions that can be encapsulated in an actor. Then the actors communicate via messages. Add in fault tolerance and remoting and out of the box it is a nice system. It does have that higher learning curve, but your problem space isn't exactly easy either. 
Yet another blog spammer... it gets worse and worse in here. 
It seems like it's what OP needs. He wants task oriented processing, Actors are made for that. (based on my understanding of his problem)
Unitils does do a deep comparison it seems but it just simply returns assertionfailederror when it finds any mismatch. Would have been great if it could have given a trace of which fields are not matching.
Ah, my apologies. I will make sure to do this in the future; thank you.
That has absolutely nothing to do with Java - the programming language, respectively the Java ecosystem. Kindly stop spamming the site.
Can't most IDE's generate this for you automatically? I think intellij lets me pick the fields to compare.
Some screenshots would be nice
Here you go: - http://ronsor.gq/games/screenshot-game-1.0.png (Version 1.0, multiplayer) - http://ronsor.gq/games/screenshot-game-2.0.png (Version 2.0, single player) 
Use W/A/S/D keys like arrow keys to move your character, which is a white block. Put an element on the screen by clicking an area.
Peter Lawrey posts many things about Java high performance processing (context: high frequency trading): http://vanillajava.blogspot.de/ http://openhft.net/ http://java.dzone.com/search/google/lawrey?query=lawrey If you have access to nodes with GPUs you might want to look at: https://code.google.com/p/aparapi/ or https://github.com/pcpratts/rootbeer1 A Java-only embedded solution for caching might improve performance. I really liked to use Infinispan for a university project: http://infinispan.org/
That code is absolutely unreadable. Maybe if you deleted those useless comment... And why did you name them Catcher/Thrower, on the first sight I thought your classes had something to do with exceptions...
This is pretty miserable. Have you tried playing it before you released it?
Just as I was getting into this podcast too! Anyone know of similar podcasts for Java?
Slick is nice, but LibGDX is really the "go-to" library for 2D games in Java these days. /r/libgdx OP, if you're making a serious effort at building a game, you should really use an existing library/engine.
I would argue that SBT is a pain itself. It's certainly no "Simple" Build Tool and one can abuse the syntax horribly after the high learning curve. No sir, I tried both and Gradle is by far the winner here.
But without being like C++. Seriously, the slides look at avenues for JVM evolution like it's a Civilization tech tree. A lot of cool ideas, many of which could arguably lead to Java becoming *less* C++-like, are thrown around. It is very probable that only a small subset of those ideas will see implementation in the foreseeable time. Those JVM implementations cost developer time, too.
what libraries have you used?
Not sure but I'd try increasing vm stack size (-Xss i think) or possibly it's opengl issue, that's where it claims it was.
Perhaps you should put up a link to your repo so we might be able to help? If it takes you 30 minutes to paint the 'world' you're doing something very wrong.
Oh I already found out what I was doing wrong. Also, it takes 30 minutes over multiplayer, its quite fast in single player. I need to paint what I need on the screen when I need it, not just have it painted and use a crude scrolling solution.
None actually, I built some easier functions from scratch.
Hehe, I think tht the conclusion is that all build tools suck. Seriously, you say that Gradle is "by far the winner" but just around the corner I hear shit about how it sucks big balls and Maven is completely superior to it. Then the Ant + Ivy guys will tell us how shitty Maven is...
so java2d using swing I presume
tip: you don't want to use Swing to produce games. it lacks lots of features including OpenGL support (unless you're using something like JOGL). I'd recommend using LIBGDX(really good library) or Slick2d(now pretty much dead, but pretty easy to learn).
Pretty cool! I noticed that clicking on a box will sometimes change the color in a neighboring box instead.
Strange timing. I have a Huffman code implementation due in a couple days that needs this algorithm too. I think both of our best bets would be to just use the swing graphics API.
First, let me just leave this here: [`BinaryTreeTraveser`](http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/BinaryTreeTraverser.html) Now, to the algorithm: You basically need to organize the tree in a depth-aware manner. Preferably from the leaves, not from the root. A hint on how to do this: The classic approach is to use an array. Let's define an array-based binary tree data structure: Root has an index of 0. If you want to get an index of a node's left child, multiply that node's index by 2 and add 1. Add 2 for right child. For example, the index of the left child of the right child of the root will be: (rootIndex*2 + 2) *2 + 1 = (2*0+2)*2+1 = 5. The array for your example above would look like this: [A, B, C, X, Y, , ] 0 1 2 3 4 5 6 You should be able to work it out yourself from this.
hmmm yes.
Yes, it rounds your position divided by 42, which is the size of the square in pixels (42 x 42), so it can be off.
Nice idea. Keep it up!
I did something similar for class once. I used a two dimensional array to store the data in a way the data would be visually represented. I then had a loop that printed off each piece of the array, putting spaces in between each value. Every location in the array that wasnt part of the information I want printed, I would put a 0. This is because I had a conditional statement in my loop that would put a space in place of the zero. Maybe there is a more simple way, but thats how I did it.
This is the way a [binary heap](http://en.wikipedia.org/wiki/Binary_heap#Heap_implementation) is stored in an array.
I have a project on github for [maps of regular tiles](https://github.com/bondolo/MapTiles) including Hexagons. Maybe it's useful to you. It covers only the abstract model part of the maps but none of the drawing. There's a separate tic-tac-toe sample project
Consider an outline form as a compromise. It's a bit harder to parse visually, but it represents the same information and is a lot easier to implement: A B X Y C 
Thanks I looked at it but i'm not sure i really understand it. I think i'm just going to scrap the project and if anyone wants to help or just play with my bad code it there. :P I might return to it in the future but right now i'm not skilled enough. 
There's also Swift and Objective-C; one of which is a very nice language.
Go ahead and use Netbeans. Netbeans has been around for so long, that there's tons of tutorials on how to do nearly anything java related with it. As you can see, Oracle itself stands behind Netbeans so you're bound to have an easier time using it. When you get the hang of the Swing GUI side of things - check out JavaFX. With JavaFX, you can make a GUI that is 100x better looking than anything that can be made with swing. FX is also much more flexible than Swing and, it uses things like CSS and XML for style and configuration.
Nice. There's nothing wrong with doing a game in pure java.
Not bad.
In all fairness the article relates to both Java and Scala.
Look at eSpatial.com
What benefits do you get from Scala specifically? I ask this because I've tried it out several times for exactly the reasons that you list on the post and I always love the idea and hate the implementation. Ever since I've tried Kotlin - which actually has all of the benefits listed too, but I find significantly less confusing - then I've not looked back. And actually Kotlin goes one step further with the reduction in bugs since it enforces null checks at the compiler level - if a variable is defined to be Nullable then you *must* do null checks, and if it's defined to be non-Nullable then you *cannot* assign Null to it...
OpenMap might be of value: https://code.google.com/p/openmap/ Good software but for some strange reason they doesn't publish to maven so it's a pain to depend on.
checkout the cedarsoftware java.util library which has a DeepEquals function. I use it in https://github.com/RuedigerMoeller/fast-serialization/blob/master/pom.xml for testing
I was solution architect of an exchange middleware platform (high traffic, realtime clients on low bandwidth). We built it like this http://java-is-the-new-c.blogspot.de/2013/12/dart-possible-solution-to.html . This way we process + dispatch 150k data changes per second to roughly 20k subscribtions in near realtime
Kotlin always interest me, it needs more publication though...
If someone had been in a coma for all of the last five years I would acknowledge this article as "somewhat correct". By any other measure it is really weak. In the Java section the author seems to not know whether Java 8 is out yet or not and is unaware of the massive uptake of Java 8 that has taken place. He did get the part about Jonathan Schwartz being an idiot right.
People who aren't looking for Haskell on the JVM will find 99% of what they want from Scala in Kotlin for about 5% of the complexity (plus more relevant stuff -- like nullable types -- that Scala doesn't have). Scala is a great choice, however, if you *are* looking for Haskell on the JVM, or exploring any kind of novel PL-research ideas.
"Java SE 7 came out in 2011 and Java SE 8 shipped in 2014"
"Oracle has two very ambitious projects ... Project Lambda, which seeks to add multicore support to Java 8." (Been there, done that)
Better then expected. But they hurt Solaris operating system, changing the license which limits its use by hobbyist and small developers. And they dropped x86 support, AND killed Opensolaris.
Total newbie question but what is this maven thing people keep talking about
Agreed. For this I'd also recommend libgdx, but I'd call it from within JavaFX.
I created my own consumer multithreaded library where I don't have to fuss with Executors and their subclasses. I implemented a generic toString-based execution method. 
Sounds like the Python marketing commitee is at it again. I did a search on dice for "python". 54 positions came back. I did a search on dice for "java". 293 positions came back. With 1/6ths the result, I guess the away Python wins is "tries the hardest to make you believe it's popular".
That is cool
Mostly various string utility methods that end up in a generic StringUtils class. Then I discovered Apache commons-lang. 
ITT: I can't even...
This should help http://stackoverflow.com/questions/2734313/google-search-results-how-to-find-the-minimum-window-that-contains-all-the-sear/2734606#2734606
You already answered your own question, you already know the minimum window for the given search term. How did you come to this solution? You compare the all the elements in the search term and maintain a lower and upper bound of the window.
Yeah, I think the guy can rework on his excel sheet for lua. http://i.imgur.com/CMQ5Zrx.png Also if you consider Python 2.x and Python 3.x as two independent&amp;different language, I wonder how the stat would are affected.
"How would I automatically do new HTTP request to the server when (and only when) the information changes in the url?" If you can, use websockets. Read also http://en.wikipedia.org/wiki/Push_technology and http://en.wikipedia.org/wiki/Comet_(programming) . "But how I can present those coordinates as an dot in web browser's map?" After receiving new coordinates, you just update (google) map marker(s) with JavaScript.
Nice work /u/julien_dubois. I like the idea of making modern Java development very accessible to programmers and this is a great way of doing so!
I had to laugh at this as well. Almost makes you think the author doesn't know that this is a correct spelling variation :)
I guessed that from your domain^^
&gt;JHipster, or “Java Hipster,” is a handy application generator that will create for you a Spring Boot (that’s the Java part) and AngularJS (that’s the hipster part) application. So now we need another framework to generate Spring Boot which generates a Spring project? Why choose AngularJS when it is being abandoned for AngularJS 2.0 which will share the same name but be radically different? Edit: I see the poster is the creator. I mean no disrespect and acknowledge your hard work but I think these are questions someone should ask before starting a non trivial project with these technologies.
why so?
Interesting. Thanks for the info :)
If you are running on Oracle's Java 7, apparently it might be a good idea to set [-XX:ReservedCodeCacheSize](https://bugs.eclipse.org/bugs/show_bug.cgi?id=459267). Also, the --launcher.XXMaxPermSize 256m tells the eclipse.exe to set the -XX:MaxPermSize vm option if it detects that the vm is Oracle. You shouldn't need both options in your eclipse.ini. You can confirm by removing your XX:MaxPermSize and checking the About &gt; Installation Details &gt; Configuration and looking for the "eclipse.vmargs" property. This option is also apparently [no longer needed on Java 8](https://bugs.eclipse.org/bugs/show_bug.cgi?id=449990).
This is how you get projects where no one knows what the code actually does and debugging becomes almost impossible. Stick with spring boot or grails or something. Hell, even Java EE doesn't need that much boiler plate any more.
That was my hesitation for using it for a long term project, it generates a *lot* of features, some which we didn't need, some which we knew we'd need to modify and understand code, and a lot to have to debug. But, like all code generation, it has a purpose, rapidly creating prototypes and simple webapps. Hands down, there's not a faster way to get a fully featured project running using these two technologies.
I kind of have to agree on the second point, less so because of angular 2.0 and more so because the project is called jhipster and the hip thing right now seems to be react + flux. 
&gt; Why choose AngularJS when it is being abandoned for AngularJS 2.0 Or React.js for that matter. Or really why depend on either? Both are geared towards specific use cases and aren't necessary for many if not most applications. They aren't general purpose like jQuery.
Yeah, it's been my understanding that good Angular design is going to mitigate a lot of the problems of updating to 2.0. I've been using the [John Papa style guide](https://github.com/johnpapa/angularjs-styleguide), although it's not focused specifically on prepping for 2.0.
Code style and readability is incredibly relevent *especially* when you're trying to teach a new concept to someone, such as on stack overflow.
I'll throw in my $0.02 here.. I'm by no means a veteran Java developer but I have been around the block. Needless to say, I have spent $30 on Design Patterns classes, Spring Classes and some Java refresher courses at Udemy.com. If you're a visual learner (I learn faster by watching others do it and then applying it) like I am, it's SO well worth it. You don't become an expert by all means but it gets you a running start and you can pick up the pieces from there. Highly recommend it. (Not a shill, I just bought into their New Year's eve specials and it's been great so far).
Even with Java 8, Groovy makes a great embedded language. What I'm saying is that Groovy (and some other languages) can be for Java what Lua is for C. But Groovy has the advantage of allowing you to use the same syntax you use in Java. For example, in JasperReports. While JasperReports can allow a variety of embedded languages in its reports, I like Groovy because I can use familiar Java syntax for expressions. I treat it as if it only supported Java expressions. 
I'm sorry, I don't understand. What am I supposed to be looking at?
Someone using Internet Explorer, yet posting to a tech subreddit.
The fact that the Java page OP was on needed Silverlight. Hence the warning IE threw at the bottom of the window.
Fame is only as important, as who you are famous to. If you can't read [Catcher.java](https://github.com/GlassGhost/EventTest/blob/master/src/EventTest/Catcher.java), [Test.java](https://github.com/GlassGhost/EventTest/blob/master/src/EventTest/Test.java), or [Thrower.java](https://github.com/GlassGhost/EventTest/blob/master/src/EventTest/Thrower.java); then I don't care about your opinion. 
I've been looking to change jobs for awhile, and many times people post JavaScript as "Java Script", so some of those java results could be incorrect.
Sure, but it's not like a 20% difference, it's a 600% difference. Likewise someone could use python for small scripting tasks and it would show up as well...
Lol, wanted: Java Developer with experience in Java Script and Html who would could also feed out pet Python while management is on business trips. :D
That burn was so harsh, OP's default browser automatically became Firefox.
&gt;http://www.daedtech.com/a-tale-of-two-web-stacks-java-vs-net Here's what I did: 1) Installed ubuntu 2) installed oracle java 7 3) installed postgres 4) downloaded wildfly, installed and added service 5) downloaded postgres jdbc, added to wildfly. 6) started all services. no configuration and I was able to get to it locally. 7) downloaded intellij 8) File -&gt; new project 8) selected Java Enterprise 9) checked web application 10) done. Built and deployed. It is curious how your comparison guy gleefully forgot to install the Microsoft .net web stack and visual studio in his Microsoft steps. Also curious that he didn't actually build anything, he just made a new project. I guess I can't fault him for his blindness and stupidity. Normally I'd use gradle, but since your dude was allowed to use woefully underpowered build tools, I took that route for the sake of fairness. Edit: postgres was unnecessary steps, but you need a database, so I included for posterity. Installing Ubuntu also unnecessary, but I like to keep my Dev environments and my desktop somewhat sandboxed..
Here's what I think: the company that you work for stinks. Get another job. I couldn't read all of that. Your tautologies just hurt too much. You've been using Java for 4 years and you've got it all figured out. Right. JavaEE isn't Java. Say it again, please, out loud: "JavaEE isn't Java." You don't have to use JavaEE. JavaEE is a solution looking for a problem. It's getting better than it used to be, but it was never necessary. I've been using Java for 13 years, for personal and professional purposes. I've never once *needed* JavaEE. I've found *pieces* of it useful, but I've never had to go full-stack.
You already have a textbook, go through it. What kind of code are you writing that you are confused about? When learning Java there are just some things you just have to type and turn a blind eye to until you advance a little bit. If you find public class foo or public static void main(String[] args) confusing, don't worry, you'll learn that stuff in a few chapters. Also, /r/javahelp, /r/learnprogramming. 
Dont get to much into java, just learn the basics. I'm always annoyed by people who say you need 'this' language to be your first one. In the end it doesn't matter all those languages on beginner lvl are the same. As for resources well you can always google thats how i did. 
Well, I am not sure if this is worth discussing, since it is a rant, but I think my point "Possibilities - so what?" covers your thoughts about not using Java EE.
But then again, I can find more Ruby jobs (those are extremely rare) than truly exciting Java projects in the market I am in. So the argument that you can choose good Java stuff does not always translate into real world. Not to mention the fact, that whichever nice Java configuration you choose, .NET seems to provide nicer alternatives to write code with added bonus that majority of .NET projects uses those nicer alternatives, so its easy to get job that uses nice stuff.
I don't see what any of this has to do with Java, the language. You're arguing that one of the most popular programming languages in the world has a lot of shitty jobs around it, and somehow it's the language's fault. I think that your anger is severely misplaced.
&gt; there still is something fundamentally wrong in how platform trends are going. I think you are sorely mistaken about this. There is tremendous, ground-breaking innovation on the JVM: G1 and JFR are recent changes; modules (with JIT caching) and fine-grained JIT controls are forthcoming in Java 9, with immutable value types to follow; next-gen VMs (Graal) are already in the works. OpenJDK is the second-largest open source project in the world (after the Linux kernel). As usual for Java and the JVM, most of these enhancements are hidden from your code. That's intentional. The idea behind Java was to expose a very simple -- almost primitive language -- that's backed by a state-of-the-art VM behind the scenes. &gt; I see no way that if you're in programming because of programming itself (e.g. you love to write code, solve algorithms...), Java is not the place to go probably. Well, this is a very general statement, that might be true in some cases. For example, I do advanced algorithms. I read lots and lots of academic papers, and then spend months trying to come up with a novel concurrent, distributed algorithm. Like I said, I have never done web or CRUD stuff. I believe that most of the pleasures in CS come from algorithms and data structures. Once I come up with the algorithm -- after months of work -- I could care less about what language I write it in (well, I care, but due to other concerns). Also, most of my work revolves around concurrency, and no programming environment in the world offers a better platform for concurrent programming than the JVM (much of it due to its superior GCs). So, for concurrency, Java is very much the place to go. As a team lead, my main concern was the general architecture of the project. I was concerned with the elegance of the general design -- not with that of a single function -- and often then more "primitive" the language, the better the various modules fit together to form a consistent whole. In short, I think your sentiment is not due to your intrinsic character, but mostly a result of still being in the stage where the function or compilation unit is where you find elegance. Algorithms are a mathematical construct that are elegant no matter how they're translated to code, and as your career progresses and you're responsible for ever-larger pieces of software, you'll find that the very things that can make a function elegant, might make a project very much the opposite of elegant. However, at the level of the single function/class/module, there are indeed nicer languages than Java. I very much doubt you'll find better platforms than the JVM, though. The JVM is the Ferrari of runtime environments. It might not be the easiest to handle (though It's quite easy) but when you want the most of your machine combined with the most insight you can get into your running program (as well as the ability to modify it) -- it's state-of-the-art. Some people prefer driving Toyota; I, too, sometimes want a little less mental maintenance. But when you need the best of the best, and you have a lot riding on your success, don't settle for anything less than the Ferrari.
Serendipitous or even coincidental, perhaps? Not unlike precipitation on the day of one's nuptials or gratis conveyance offered only after tendering payment. 
Most languages have a fair bit of boiler plate, which involves things you'll be learning more about later (example with java being the main function and arguments and return type). They usually start you off with simpler things that can only be demonstrated in the middle of an already-functional program (like the hello world program. the print statement is the easiest but all by itself it wouldn't mean anything). So I guess IMO, be aware of and thinking about what all the stuff you don't understand means, but don't worry about not knowing it. Just focus on what is being demonstrated in the section you're reading through. They'll get to the rest of it. Generally speaking, the people who go about writing text books are pretty smart, and I'd wager there's a fair bit of logic they put into the ordering of things. Also, another generalization. You're not going to learn any of this overnight. People on the internet will say you can learn on your own in x amount of time, and they were held back by the pace of their uni classes. But really, a firm grasp on programming in general (language is actually unimportant) will take some time and a lot of practice. It's really neat stuff!
How is Maven not the answer?
I am pretty comfortable with Angular/Spring and i found my self deleting most of the frameworks/libraries JHipster uses because it just added unneeded complexity to my app. It is an interesting project though, very modern approach to java development.
It's a very suspicious looking page at that.
Java is great. Java applets, however, need to die in a fire.
&gt;Is terrible as a hobby/learning Not really. The process you followed seemed to be overkill for a hello world app, it sounds more like you were attempting to learn EJB, which, agreed is a complicated specification not designed for hobbyists. &gt;Terrible for grasping the big picture Setting up a new project shouldn't be a difficult process, nor should it be a precursor to "not grasping the big picture". Gradle is good at this, I would also recommend Maven archetypes for speedy project setup. &gt;This library offers one class - ForLoopSimpleAbstractGeneratorFactory. Since I need my &gt;loop to be backwards, I read tons of documentation and can't seem to find if that is &gt;possible, only at the end of the day after debugging source code of library I find that I can &gt;extend ForLoopSimpleAbstractGeneratorFactoryCreator to provide this behavior Perfect Planning Prevents Piss Poor Performance. If you had have understood your requirements first you wouldn't have selected the "AlghorythmsOverengineered" framework in the first place. &gt;I rarely seen senior Java developers who would be experts in anything, because simply there are so many useless &gt;things and so many useless tasks in daily life that its simply impossible to know something very well. All I say that if you are spending your time performing useless tasks, you're definitely doing something wrong. 
I think your repository requirement is reasonable at least. You can use local repositories on the file system, but they're really not meant for what you're talking about. If your use case really is simple, Maven is a perfectly good choice despite its unfortunate use of XML. Gradle is very explicitly aimed at larger, more complex systems and it's wonderful for that use case. It's also worth noting that they're working on the speed issue, though the most thorough part of that solution (new model DSL) is a ways off yet. The wrapper script is so that you can run Gradle without having it installed on the system already, or use a specific version that might be different from what's on the system.
I'd say more specifically that the JVM and tooling around it is great. If the only JVM language was Java it'd be less appealing, especially with how slow it's been to adopt some modern language features.
Yes, well, I must agree. Java as a language and a concept is every bit as awesome as C++ and Fortran with a well aged whiskey. However this complete and utter crap about a certificate from Sun inside a java applet not being accepted? That is pure crap given that the cert expires late in this century. It took me almost a half hour of fiddling to get jdk 7.0.76 installed correctly on linux and then to fart some more with Java ControlPanel ( which tosses a ton of alerts and crap as it runs ) and then to be told .. nope .. can't run that. Pure utter trash on a stick. 
Microsoft Internet Explorer = Microsoft Silverlight usage. 
They told you it's because of the try - catch block, but didn't tell you why it's wrong?.. Weird. Maybe they wanted you to take input validation out of the controller thing. Like, first check that the args are in the correct format and the file exists, and only then proceed to controller. Might seem like a design flaw for some but it's not like it couldn't be fixed with a couple of lines and some clear guidelines. God knows, a friend of mine once got rejected by some startup because he drew a UML arrow pointing in the wrong direction. You never know what's going on inside other people's heads.
Fucking "Parking Meters"? They may as well brag that it causes herpes.
&gt; Maybe they wanted you to take input validation out of the controller thing Makes sense I guess. Thanks for the feedback.
There's no *obvious* mortal sin. There's any number of reasons why *they* might not like it in this specific example. Perhaps they'd prefer to see it logged, or re-thrown as a RuntimeException, or perhaps they're not keen on your code throwing IOException in the first place.
I'm not familiar with Stripes. Spring Security is not an MVC or web framework, it's a project that derived from Acegi. It does integrate very well with Spring MVC. All that being said the quality of your security is still going to depend on you. Spring security provides mechanisms for authentication and authorization, you're still going to need to make intelligent choices on your end. If you choose to generate insecure tokens or send HTTP basic headers in the clear it's going to be proportionately awful and insecure. That being said Spring MVC + Spring Security can do a lot of the leg work for you and help with CSRF attacks and the like when properly setup.
What? Why? Seems perfectly valid to me. Earlier in the method he's sanity checking that args has at least one value and that the first value isn't empty so I see no reason you couldn't pass args[0] into a method expecting a String.
- What is JAdventure - What is your question - Show us your code - Format your post properly it looks like gibberish
Some people on this planet are cursed. They have to develop functional webpages for IE, sometimes even for IE6. #100%truestory
It doesn't work. C:\robot-test-master\dist&gt;java -jar robot.jar commands.txt Executing commands commands.txt java.lang.IndexOutOfBoundsException: fromIndex = -1 at java.util.ArrayList.subListRangeCheck(Unknown Source) at java.util.ArrayList.subList(Unknown Source) at com.acme.robot.tabletop.TableTopRobotController.executeCommands(TableTopRobotController.java:50) at com.acme.robot.Main.main(Main.java:13) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader.main(JarRsrcLoader.java:58) Error occured: fromIndex = -1 Long story short, you gave them a build that doesn't fulfill one of the basic requirements of the exercise. It looks to me like the source doesn't match the jar file. My stacktrace is throwing from TableTopRobotController.java:50 which, in your source, is just a closed curly brace. I decompiled your jar file, and TableTopRobotController.java is much different here from the source: private void executeCommand(final String command) { if (command == null || command.length() == 0) { System.out.println("Missing or invalid command " + command); return; } String cmd; Optional&lt;String&gt; args; if (command.startsWith("PLACE")) { cmd = "PLACE"; // ERROR ON LINE BELOW args = Optional.of(command.substring("PLACE".length(), command.length())); } Your command line arg takes a file name as input. However, in executeCommand, it looks like you're expecting a command: "PLACE 0,0,NORTH" or "REPORT". Your line: args = Optional.of(command.substring("PLACE".length(), command.length())); "PLACE".length() always returns -1 since at this point, arg[0] is the filename, and the file hasn't been read. The -1 makes the rest of this line just fall apart. For what it's worth, when I recompile with the latest code from Github, everything seems to work ok. The problem is that you bundled a bad build. Happens to the best of us. 
Nice one. That will teach me for checking in a build!
Your programm uses quite small dictionary of words. It would be much better IMO to check every word against the dictionary and then try to execute them, or interrupt your programm (without exceptions) if something doesn't match. Yeah, your solution is quick and works just fine, but these entry-tests are not to test whether the programm will work or not, they are to see how you write them as if it would be a big project. If not said otherwise (like when you are given a project with a requirement to implement as much functions as you can from a list of 15 functions, but it's still better to strive for a good OO design).
It's not that Java is trash, Java is great. But applets are old. It's like saying that floppy disks are trash. They were great for their time, but now they are trash. The same applies to Java applets.
Here's some more for you! **See the entire type hierarchy.** You may have put the cursor in a class and hit ctrl-T so you could quickly see the type hierarchy. If you're looking for a class, congrats, you're done. If you're like me, though, you'll often be annoyed that the quick type hierarchy doesn't show interfaces too. Actually, it does! Just tap ctrl-T again to see the entire quick type hierarchy. **Full screen side-by-side code editors.** I have a wide screen monitor, so I usually have the code editing pane split with two side-by-side code editors. Much easier to code in one when you have other code you're using open in the pane next to it. Often, I'd double-click the tab to blow up the side-by-side code editors to full screen. Since upgrading to Kepler, I discovered that this no longer worked. The double-click would blow up the single code window to fill the entire screen. So, I had to choose between side-by-side shrunken view or full screen single view. :-( Then I discovered you can do both. If you drag and drop one of your editors on top of the other but a little to the side, it actually puts two panes in the same view. When you maximize that view, both panes stay side-by-side. If you drag that editor over to the extreme side of the other one, it puts that editor in its own view, so now you have two side-by-side views and when you maximize one, it takes over the entire screen. **Trigger a breakpoint only if another breakpoint is hit first.** Admittedly, this one doesn't get a whole lot of use, but when you need it, it's nice to have in the bank. The biggest use case for this is: You are running a unit test with lots of methods, and you've set a breakpoint somewhere deep in the code under test. The problem is, for each and every test in your unit test class, your breakpoint triggers, but you're only interested in it when it is run for a particular test in that class. You could comment out all the other methods or engage in other tomfoolery, or you can use this trick. For example: public void testFoo() { int x1 = foo(); // no, don't trigger breakpoint in foo() int x2 = foo(); // no int x3 = foo(); // no int x4 = foo(); // yes! suspend on the breakpoint in foo()! ... // don't trip breakpoint in foo on any more invocations } The solution is to set two breakpoints. Set one on the fourth invocation of `foo()`, and set the other where you want to break in `foo()`. Now right-click on the first breakpoint and set the condition: `System.setProperty("debug.foo4", "debug.foo4") == ""`. Right-click on the breakpoint in `foo()` and set the condition: `System.clearProperty("dbg.foo4") != null`. Now, on the first three invocations of `foo()`, the condition is false and the breakpoint doesn't trigger. When the breakpoint in the test is hit, the condition on that breakpoint returns false so the breakpoint isn't triggered, but with the side effect that the system property `debug.foo4` is set to an empty string (a non-null value). When the breakpoint in `foo()` is hit for the 4th time, the condition is true and the breakpoint triggers. The side effect of this triggering is to clear that property so subsequent invocations of `foo()` once again do not trigger. In this way, you can flag as many code paths as you want, giving each one a unique name, and trigger on them. Any time you want to see which code paths have been passed in the debugger wherever you currently are, you can just pull up the Expressions view in Eclipse, call `System.getProperties()` and look for all the keys that start with `"debug"`. You could put a `Debug` class in the classpath with a method that calls `System.getProperties()` and filters out all the properties that don't begin with the debug prefix, that way you can just put a single static method call in Expressions view to see the flagged code paths. **Step filters.** When debugging, maybe you've been annoyed when stepping through a line with a lot of nested calls. Say you want to step into `foo()`: foo(bar.getBar(bash.bashThing().toString()).blah().blah().blah()); To get into `foo()`, you've probably mastered the F5/F7 jig where you step into each previous call then step return back to the `foo()` statement, until an F5 finally gets you into `foo()`. Instead of doing this, you could: - set a breakpoint on `foo()` and run - ctrl-click on `foo()` to jump to that method in the editor, then put the cursor on the line you want to stop and hit ctrl-R (run to line) - step filtering Go to Preferences and set up step filtering so that some classes, packages, simple getters/setters are always ignored when you step. It's a good time saver. You can toggle whether these step filters are applied during a debug session with the step filter button in the Debug view. **Type filters.** Do you hit ctrl-shift-O and you're often prompted to choose the import you want when there are multiple classes with the same name in different packages? (If you use Guice, this is often the case with `com.google.inject.Inject` and `javax.inject.Inject`, for instance.) Usually, when this happens, you always want the same class and this is just annoying. So, go into Prefs and add the packages/classes you never want suggested to Type filters. Voila, Eclipse won't suggest them again. **Long package names.** Look at that Package Explorer. Just look at it. It could be a useful view, except when it's not eating half of the real estate on your screen, all it shows you is a long list where each entry begins: `com.blah.yackety.schmakety...` and then you've hit the edge of the pane. Lame. Don't make Package Explorer a horizontal view, that's the coward's way out. Besides, you need this to be a vertical view to be useful. Instead, go to Preferences &gt; Java &gt; Appearance and check "Abbreviate package names". Stick in your favorite abbreviations. For the above example: com.blah.yackety.schmakety=cbys Then, all packages that begin with this prefix will be abbreviated. Define as many as you want. You can also play around with the "Compress all package name segments" option, but I find the above gives me everything I want to make Package Explorer useful.
&gt; Not really. The process you followed seemed to be overkill for a hello world app, it sounds more like you were attempting to learn EJB, which, agreed is a complicated specification not designed for hobbyists. I wanted to learn EJB, which conceptually was not hard at all! (I want to emphasize this so much) What was hard - was irrelevant obstacles that thought me nothing conceptually - like jndi issues, server incompatibilities and so on. So I spent one day reading about EJB - good time investment and other 1-2 days dealing with irrelevant obstacles (waste of time). That is my problem, not that EJB is hard specification. &gt; Perfect Planning Prevents Piss Poor Performance. If you had have understood your requirements first you wouldn't have selected the "AlghorythmsOverengineered" framework in the first place. But if that's the only thing in town or alternatives do not seem to be better? This example is taken directly from configuring Spring security to do advanced tasks, but put in different context.
To me all of this sounds like trying to formally prove that something many people complain is not true formally, even though experience tells otherwise. As far as I know (maybe wrong), there is MSBuild in this default .net project where you could do advanced stuff and that will be run by Visual Studio's f5. But the bottom line is - in my real-life experience I have probably never seen Java project that would be set-up quickly without some issues. However almost all projects I had with .net, had no such concept as setting-up project and that was more than 4 years ago, now I hear things are even nicer.
The java 8 version could be: // Java 8 List&lt;String&gt; javaNew = words.stream() .filter(str -&gt; str.contains("t")) .collect(Collectors.toList()); I prefer this form to pre java 8 
In this case, I honestly don't know. Both options seem equal to me. Anyway, yes, you're right, using Java 8 features too much actually hurts readability and maintainability by a lot. The industry must yet define some sensible conventions for all this new stuff.
Note that the Silverlight requirement may come not from the content but from the embedded advertisements. Which sort of diminishes the irony a little bit.
i would argue that a huge amount of people would want a system like this. also, the repository on my machine doesnot fit the needs, I want to be able to check my project into git or svn, checkout on other random computers and have them download the dependency jars that I myself have made, not only those on central. I am also not opposed to loads of features, in fact i like it, but that doesnt mean you need to add 148 dependencies in case people dont use it. And i am more than willing to install software on a server that faces the internet to have my jar repository, but what software? artifactory is obscenely complex to get to do what I want. What prevents something simple like webdav from working? or atleast something a great deal simpler for simpler usecases
clouddrive/s3 will not do unless it can also encrypt. also, maven forces all their ideals on how a project should be onto you, gradle does not. thats why people have a million maven plugins to try and get rid of the mavenisms. the way i see it gradle is onto something conceptually, but its execution leaves much to be desired
... and, it might be a good idea to add a static import for `Collectors.toList()`, so it's only: List&lt;String&gt; javaNew = words.stream() .filter(str -&gt; str.contains("t")) .collect(toList());
The for-each loop is a fine approach. The lambda construction in this case gives no readability advantage and a small performance penalty. By the way, the ` = new ArrayList&lt;&gt;()` assignment in the second code does nothing, because you immediately re-assign the variable with the result of the collector.
I wish more stuff like this would be posted. Multiple examples of doing the same thing with new Java 8 features.
JMH is *the* benchmarking tool for the JVM, and it's [very easy to use](http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/). Don't write your own benchmarking tool. It's a very tricky subject, and if you're a big expert and willing to put in months of effort, you'll find yourself replicating JMH.
Is it supposed to be better ?
Good point. Stay tuned!
Quite good, but we could do so much better! :) (Disclaimer; I love J8, Xtend, Kotlin, and all the other fancy JVM languages we have) My primary language is Java, but I'm branching out to Xtend now. I love all the side development of languages on the JVM! They inspire Java to be more, and continue to make it grow. Scraping some of the features of other JVM languages into one suggestion: class X { String schema_name; boolean is_default; } val statement = select(X::schema_name, X::is_default) from "information_schema.schemata" orderBy X::schema_name prepare c; statement.?executeQuery { for([schema_name, is_default] row : it){ Sysout.println(new Schema(*row)); } }; * **X::** , easy Reflection syntax sugar which returns the Field (Class + name), to be used for both Type inference, and safe SQL statement lookup. * **select** , infers the types from the given Fields, used later on to infer the types adhoc tuple. *(Java, Ceylon, Kotlin, probably Xtend)* * **.?** , ensures that the statement is only executed if the prepare worked (not null). (Xtend, Kotlin, Ceylon, Groovy, etc) * **val** used to not have to describe the resulting query with types. *(Xtend, Kotlin, Ceylon, Groovy)* * **[schema_name, is_default]** , adhoc tuple creation, inferring types from the RHS argument. (Ceylon, Kotlin, others probably) * **\*row** , spreads out the contents of the tuple over the accepting method. (Assuming there is a constructor that accepts String, Boolean.) *(I think Kotlin, not sure)* * **Strange method calls without "()"** , when a method accepts a single parameter, the "()" can be omitted. *(Xtend, Kotlin, Ceylon, Groovy)* * **Strange "{}" , anonymous inner class call like query for executeQuery**, when a method accepts a lambda, it can be added after the "()". (Which may be omitted, see above). *(Xtend, Kotlin, Ceylon, Groovy)*
You'd be amazed at how many times I've see exceptions used to handle control flow in my career. I prefer "validate" to "ensureValid".
I use eclipse for development. It compiles very quickly. I never find myself waiting for it. I do not like to "produce" projects with an IDE. So I use maven to define my projects, and to do any release build ( including test releases ). I find that maven and eclipse play pretty well together. BTW for compilation if you're not using an SSD, then it will be plenty slower.
I kinda feel like working with this guy would be annoying. Not be because he's wrong just because he comes off as kind of a dick. 
What I think really matters is that this adds new *abstractions* to the libraries. Now, you can use those abstractions to 1. Talk about problems in less implementation detail and focus more on the actual problem 2. Write less code to solve the same problem because of these higher level abstractions. 2. Avoid repeating code Pretty much every concept in programming languages is an abstraction. Data types are an abstraction, classes are an abstraction. Now with Java 8 you have a whole new style of possible abstractions. Some of them may be better than others (and everyone will discover that through experience). In this case, through `filter` and `collect` you can express concepts in a more general way and (re)write less code when you need to modify things.
Sometimes I feel bad that I'm "still using JDBC". Then I see stuff like this, the feeling goes away.
Yes pretty much everything OP wants is covered in Maven. They basically want a custom build tool that conforms to how THEY want to setup thier project, rather than conforming to a layout that much of the Java community already uses. (Maven can handle both, but if you'll have a better time if you conform to the conventions). Gradle is fine too, I personally haven't had to get away from Maven though as it doesn't cause us problems and I haven't run into anything that I couldn't do. You want to share code with other java developers....most probably know how to build a maven project already. 
The comments lighten me up much more than the post itself, it's so abstract and doesn't really expicitly state anything. 
Glad you posted this - just in case that the other submission just [two hours previously](http://www.reddit.com/r/java/comments/2vjplv/better_application_events_in_spring_framework_42/) wasn't enough perhaps? Well I guess these things happen to a serial link spammer, eh? At least it wasn't one of the advertizements for your own website/blog like you usually do.
The link check didn't indicate the other post submission. So you call a 4000 karma Redditor, a link spammer?
If your list is *mutable* and can be safely modified you can do this: `words.removeIf(str -&gt; !str.contains("t"));`
It has free IDEs (Eclipse, Netbeans) and has been multiplatform for years. And it's a de facto standard so lot of support.
Don't conflate a "dedicated Maven repo" (which doesn't really mean anything) with a release version. There's no release version because it's not done. It's stable, usable, and very capable, it's just missing things to call it a 2.0 final. Versions are deployed from master to Sonatypes snapshots repo. They work, but as with all snapshot dependencies, are prone to break at any time. If you don't want your build to break at anytime, grab the latest jar and update explicitly.
No I call someone a spammer that submits 229 random links within his first 82 days. Particularly if they include 20 to your own website. And as this post here seems to show you even read the Subreddit that you submit to, but rely on the (notoriously bad) "link checker".
You have to covert the type. java.util.Date utilStartDate = jDateChooserStart.getDate(); java.sql.Date sqlStartDate = new java.sql.Date(utilStartDate.getTime()); From http://stackoverflow.com/questions/12131068/error-casting-java-util-date-into-java-sql-date
It's great on mobile (Android). It's great for web sites (Spring MVC). It's great for RESTful web servers (Spring Data Rest or Jersey). It's not bad for desktop (JavaFX). It runs on Windows and Linux and Mac. More free, high quality libraries than you'll ever count. It's as fast as C. It's reliable. You can use 20 year old code and it still compiles with Java 8. Fucking Python breaks with every release. Most of the good academic research gets implemented in Java first. Most of the good commercial research gets implemented in Java first (like Hadoop, Lucene). Need answers? It's the most popular Stack Overflow language. 
I did it, same error :/
229/20 follows the 9:1 rule, and the reddiquette doesn't prevent sending your own links, right? As for the "bad checker", yes I rely on it. And whenever I find a good article I submit it, even without checking all subreddits for duplicates, that's the checker job. So I read both subreddit posts and other sites in any order I wish, without any strict rule imposed by a "bad checker" shortcomings. 
It's not common to see them used in frameworks and open source libraries, because making use of Generics implies one of two things: 1. Collections of relatively arbitrary things. 2. Deep application knowledge. Java's polymorphism semantics are robust enough that most libraries can just rely on them to avoid relying on advanced type knowledge. Thus, you won't see many libraries using generics.
&gt; It's not common to see them used in frameworks and open source libraries They're all over the place in the Scala standard library and many Scala libraries I use. (I just want to check we're on the same page, I'm not talking about this: public class Foo&lt;T&gt; { public T bar() {} } I'm talking about this: public class Foo { public &lt;T&gt; T bar() {} } )
ha
Sure, I know what you were referring to. My point still stands, not much use outside of collections, or with highly specific application knowledge.
I know JPA/Hibernate likes to get shat on, but in this contrived example it pretty much dominates all their examples in terms of line count. String hql = "SELECT s FROM Schema s " + " ORDER BY s.schemaName"; List&lt;Schema&gt; schemas = entityManager .createQuery(hql, Schema.class) .getResultList(); schemas.forEach(System.out::println);
http://i.imgur.com/MbCZKEp.jpg also the tooling, libraries and community
I did not have any intention of doing better version of JMH (developer of JMH designed JIT how can I beat them with their own weapon), this is actually just a learning project, I learned tons of stuff about optimization done by JIT and how adaptive vm works under the hood. So what the bad side of putting it out?
I know, and I wasn't implying that you're in any way disrespecting it. It's just that benchmark frameworks that *aren't* JMH can report erroneous results, and JMH itself is very easy to use.
Let me start out with that no language is without warts. None of them. Java excels in the following: 1. Speed 1. Portability 1. Flexibility (code in numerous languages) 1. Libraries 1. Community 1. Adapting for the future without breaking the past (see Python/Go/JS) 1. Tooling (build tools, debugging) 1. Readability/Writability 1. Standards (if you're into that sort of thing) Most languages don't do this. Outside of C, few languages are better than Java in any of the above. I can say lots of nice things about Java, but the fact that it's Object Oriented wouldn't be on my list. Polymorphism is present in some form in most languages today. Who cares? If you really want to know what makes a language interesting, look at how it solves various problems. Threading (erlang/go), Complex logic (prolog)... Just looking at the basics of syntax also communicates a lot about the intent of the authors of the language and the problems they were trying to solve. Does it let you be sloppy? (JavaScript PHP are sloppy because they aren't looking for correctness, they want it to be accessible and easy to use) Is it strongly typed? (Correctness is probably important) What kind of programming interests you? There are no right or wrong answers. 
I've never once being asked for certification when applying for a developer job, however they always asked me about what I've created, about my github/bitbucket repos to show to the interviewer before the interview itself, and any demo of my hobby projects.
Agreed. I've heard from so coworkers that they view it negatively to have a cert because it shows a sense of needing to prove something, rather than showing something (e.g. GitHub)
Let me copy something I wrote a couple of days ago: A group of people work in a system from zero. Some of them barely know each other when they begin. Some of them are in the same room. Some of them in another continent. They have different design ideas, different skill levels. Some leave the project just when it starts, some in the middle, some once is finished. New people (again, with different skill level and design ideas) came to the project. Of course, the is no documentation, no guidelines. Maybe not even unit tests. At one point none of the original programmers are working in the project. Some of the original libraries were replaced, because newer/better things appear. Some of the oldest libraries somehow survive. The compiler itself has been updated a couple of times. Some parts of the program are not being used at all. New functionality (that has no relation at all with the original functionality) is added. Some parts of the program are even made in new languages. The system manages to work, without serious interruptions, year after year. Bugs are found and fixed, of course. Java programs (maybe because the lack of some advanced features) are incredible tolerant to human interaction, time, changes in other systems, changes in team composition, bad management, inflexible design, unplanned changes in scope, etc 
I don't know that I'd view it as a negative. I know it's not the same, but I see it as being a little similar to a college degree: would your time have been spent better doing neat projects, or getting the degree? Though I also agree... projects/code, especially with viewable source, are much more impressive. It's indicative of the type of coder who writes for fun (as opposed to only being interested in the money), which is almost always the best kind of coder.
It's not the only option to develop for Android. http://imgur.com/jNjrZUn
Consider who benefits from a certification. Is it the holder or the hiring manager? Oracle created a certification then it advertised this to hiring managers as a way to filter applicants. By inserting itself into the corporate hiring process it is effectively telling hiring manager from one side of its mouth an easy way to filter qualified applicants while telling developers from the other side of its mouth that the only way they'll get a decent job is to get certified. Only the test taker pays the costs of the certification (don't forget to buy all the training books!), the hiring manager pays nothing and in effect has a zero cost way to eliminate seemingly untrained candidates. You can imagine what it might be like to work at a company where managers exist that think this is a reliable criteria to base candidate qualifications. More people fell for this bullshit back in the 2000's than they do now. Microsoft does the same thing. Many colleges give random certs for Java and every other language and they are all worthless.
I got a raise for mine, but it's not the **only** thing you should bring to the table.
What could possibly go wrong... sigh. On a serious note... Your approach is quite naive and will _never_ work reliably. Some suggestions: - make the tx system use rslyslog instead of logfile and implement the rsyslog server protocol on your machine (netty-based impl on github) - write a daemon on the box that slurps the logfile and dumps it to a persistent message queue like Kafka... poll the file descriptor to know if you need to reopen the file post logrotate or add a postrotate hook in logrotate that notifies the sluper - the network is not reliable - if your connection dies you miss lines - a single old PC is not reliable - if your computer dies you miss lines - the tx logfiles may not be reliable - if the tx process dies it may not flush all the buffers so you miss lines - you likely messed up concurrent access to your data structures, a flood of events doesn't cause a process to skip events, it can only slow it down - hire a senior engineer ;-) 
Depends on the market. If they're hungry for programmers, they'll evaluate the projects you've worked on and what you know. If there is a glut of programmers, they'll enact arbitrary barriers to limit the number of applicants they have to consider. Where I'm at has a glut of talent and shortage of employers. I haven't worked for a local company in perhaps 15 years. Everything I do is remote. I have lots of experience, but didn't finish my college degree, and that automatically eliminates from consideration from local shops. Based on experience elsewhere, if the market got to the point where they started hiring non-college grads but still didn't want to talk to everyone, people with certifications would be at the front of that line. tl;dr Depends on what the market is like where you're at.
A good way to learn a new library is to write tests for it (or small sample projects). That way you'll quickly find out if the API is easy to understand and easy to use (and well documented). In your scenario with hibernate or spring or any other component you'll choose, you will also gain insight if they are easily testable.
Although a certificate doesn't show that you're able to write proper code, it is almost impossible to get around if you're participating in an invitation to tender. At least in government projects here in germany. It provides some formal proof that a developer has at least a certain level of knowledge. From my personal experience the preparation for a certificate exam is a common way to shape up your overall knowledge about a certain domain.
Really? Fast as C? I've always been under the impression that C is the fastest while Java chugs along quite slowly.
I'm doing something similar to this at the moment. I have a problem I need to solve, and decided to learn Angular.js while I was at it. So, I'm working through the tutorial and, after each step, implementing what I've learned in my app. In this way I'm applying what I've learned in a different context and am looking further into the docs to accomplish what I need.
Because jobs.
ORM perfomace is usually garbage when compared with fine tuned queries.
I honestly doubted whether certification really mattered. I thought it was just prestige. However, the SCJP (as it was called then) taught me a number of things that have saved me hours of debugging and made me look super smart in front of colleagues. It really pays to have a theoretical backing for all you decisions. The knowledge pays the hours of practice back many times over during your career. I guess it means you just need the training and not the exam.... but who's gonna take training seriously if there is no exam??
And how many of these do you need to write in a full-fledged project? 1? 2? Let's be generous and say 10? What about the other 3000 of them? You can write native queries just fine in an ORM when you need to, you can let it do its job for most of the time.
That might be the best situation where getting a cert is worth it... when you're already hired and your employer is paying for it and you get a raise from passing it. 
Well they have MsBuild (build tool) + Nuget (dependency management), so not sure what you are talking about.
I cant imagine you writing "insert into X (col1) values (5)" better/faster than an ORM. Or "select x.id, x.name from X x where x.id=15". Like the code I had to write (recently as well): float16x4_t t; __asm("VLD1.16 %0,[%1]":"=w"(t):"r"(ptr):); //load 4xf16 return vcvt_f32_f16(t); Write that in java if you can. What does that mean? It means that adding layers upon layers of abstraction allows one to write applications faster. Those applications will probably run slower than a hand crafted assembly (or just plain C), but usually the trade-off is worth it. Sometimes it's not worth it, so you have to get dirty. Does that mean that Java is shitty and useless and we should all write all our projects in assembly? Yes according to every jaqqqqqq blog post. No, according to common sense.
OK, so to show my view from other angle lets take random platform comparison from few years ago http://www.adam-bien.com/roller/abien/entry/java_ee_or_net_an Let me analyse Java pluses from my rant's point of view __Agree__ p2. Only somewhat agree - MSBuild + NUget fits most of use-cases, but I agree that maven/gradle is potentially more powerful. p10. Best practices. p12. Operating System - would prefer working on Mac, although I heard its coming in future. __Arguable or Irrelevant__ p1. ORM. Entity framework + Linq is very nice. p4. C# is top tier too. p11. Well I had so much "pleasure" integrating all kinds of frameworks in Java. p13. Open source - well now .net is OS, but again not sure if this is that important as everyone seems to make it to be. __Relevant if you are owner ("your app")__ In other words, I would care for those things if I was manager or planning startup, but irrelevant if planning to be an employee: p5. Free IDE - you won't have to buy IDE yourself anyways and as of now community edition is OK for 5 devs commercial usage. p6. Integration with all kinds of third party stuff - usually very ugly and frustrating in java. But in .net, where is no integration options - you simply won't have to do ugly, non-rewarding work! Yay! p7. Frameworks/Libraries - .NET provides core ones, what is missing is 3rd party specific use-case ones. p8. Vendor Neutrality. Also keep in mind that I rarely see truly vendor neutral enterprise application - usually configuration files for weblogic/websphere all over the place. p9. IMHO backyards compatibility is important for owners or developers who hate changes. Otherwise, for me wilingless to break things from time to time is an advantage - less garbage. __.NET__ While most of .NET advantages scream Productivity, Programmer-satisfaction, No-time-wasting evaluating/choosing from equally bad frameworks. __Disagreement__ I tend to believe that disagreement with my rant's point of view often comes from either valuing or discarding pluses from "Relevant if you are owner" part.
How long have you been coding for? Have you ever worked in a collaborative project with other developers?
it appears you are having a problem reliably watching a log file. Before we can solve that problem, we need to understand when and how that log file is created, written to, and rotated. Your description is not super complete. Please correct these assumption that I will make if they are incorrect: 1) There is a single log file where all the transaction log statements are written to. 2) This file is periodically rotated. Meaning the system stops writing to one file and start writing to another file. There are various was this can happen you MUST understand precisely how it works for your system. 3) Each transaction created by the system you watch is written as a single line into the log file. 4) The state of various connected branch's connection can be inferred by watching the stream of transactions. 5) you are attempting to maintain a watch over the connectedness by mirroring the state of the system within your program. Without knowing more, it appears that you are attempting to do something very much like what "logtail" does ( http://linux.die.net/man/8/logtail ). One option for you is to use a program called "logster" (https://github.com/etsy/logster ) It's not clear to me if the program you are running this on is running linux or windows.
Also in a realistic context, you always have to keep cluster-ability in mind. You can either hire more C++ people.... or one of the strong clustering frameworks in java and have ops throw 10% more metal at the problem. In the end, servers are cheaper than people. &gt; It's not perfect; do a lot of context switches (calls to native code?) and Java won't be able to necessarily optimize those calls well. Context Switches at OS level usually come from bad thread models, because the application forces a lot of synchronization between threads. This can occur due to excessive queue-use or terrible locking. That's however going to kill performance regardless of language since it's at OS level and not even C could cheat there. Well, C might be able to via kernel modules, but that's serious cheating. 
Jobs got rid of Java on the Mac
M
All the same advantages are available to other JVM languages as well however.
&gt;What was hard - was irrelevant obstacles that thought me nothing conceptually - like jndi issues, server incompatibilities and so on. I'm not going to defend EJB, it can be a nightmare and should be easier, but I will say there are much more elegant solutions out there that "just work". Java isn't perfect, but no language is, but it does sound to me like you are having unusual issues (perhaps your workplace polices restrict you?). &gt; But if that's the only thing in town or alternatives do not seem to be better? Then you roll your own. It's a fine line between extending an existing framework to meet your needs and developing your own. You have to weigh up the two - how much time it takes to extend and (constantly) learn, maintain libs/upgrades of an existing framework vs developing your own. 
Would it make sense to schedule a weekly Jenkins job running `versions:display-dependency-updates` on my projects?
Care to share more about your transition? I'd love to hear more
Awesome - thanks. 
Retrofit, and RxJava are some of my favorite libraries. I would highly recommend gradle and intellij as some tools to check out. Intellij is just like resharper. 
why is it i odn't see lombok being used? it seems so useful, but I don't think i've ever seen it being used in actual code.
Look into java 8 streams. Not as nice as LINQ (you have to do .stream() then .get() or .collect() afterwards) but it's not far off. Also, give Intellij a try if you haven't already. 
To be honest, something like project lombok is not really that matter in the grand scheme of things. I really enjoy using it for my own hobby projects, but I don't want to force other people who are already very familiar coding in normal Java to use something that seem hacky and non-standard like project lombok. 
I agree for Guava, but every time I see anything from the commons being used in a project I instantly assume something is written bad.
You could get a raspberry pi and control the GPIO pins with pi4j.
If you like Jetbrains R#, try Intellij IDEA.. 
After a decade of coding in .Net you think that learning new language/framework/platform/whatever will broaden your experience? Rly?
It isn't as streamlined as LINQ, but if you are an ORM skeptic like me, you should check out jOOQ.
From what my company has told me. A java cert is great because people here stopped learning after java 6. As long as your previous work shows your not useless the cert will help you land a job. 
You can also use JSF with any app server by including the JAR file. In my opinion is has a much shorter learning curve than Spring MVC.
Manually assembling JARs, including JARs for features more than just the web framework, is the problem being discussed here. Using JSF on an app server gives you JPA and CDI as well. Also, there is no learning curve if you are transitioning to Spring MVC from another framework exactly like it.
I guess if you just want to "be employed", focusing on one general purpose language and sticking to it is a good idea. That being said, this is not my definition of being "a professional". And I can tell you I don't want to hire such people. They inevitably become stubborn liabilities. Terrible habit if you ask me. 
Wish I could upvote your comment more. If OP has been doing .NET (so, presumably C#) for 10 years, they're not really going to *learn* much switching to Java (the language). Learning the JVM, however, will be particularly useful, so I think switching gears and focusing on something like Clojure makes a lot of sense. OP is exposed to a fairly different programming paradigm (so actually learns something new, programming-wise), while also becoming familiar with the JVM. Two birds, one stone and all that.
I agree, commons is full of useful bits.
That said, there are areas of Java (like high performance computing) that have no match in the C# world (or they hide very well), and are absolutely worth checking out. Read [vanilla java](http://vanillajava.blogspot.com), /u/shipilev 's [stuff](http://www.shipilev.net), [psy-lob-saw](http://psy-lob-saw.blogspot.com) and a few others I'm too lazy to add.
&gt; as lambda classes and passes them off to the stream to be executed via virtual method calls Lambda expressions aren't implemented with classes - [invokedynamic](http://blog.takipi.com/compiling-lambda-expressions-scala-vs-java-8/) is used and the overhead is negligible. Most of the overhead of the second form comes from use of the streams.
&gt;I cannot wrap my head around why Java devs are still using Eclipse. For large productions, Eclipse's incremental compilation can save a ridiculous amount of time. Yeah it can still *sort of* be used by other applications, but it's still not nearly as snappy as when its used in an already open copy of Eclipse.
The lovely [xtend transpiler](http://eclipse.org/xtend/) will help battle verbosity. No way around the type erasure though...
Nevertheless the overhead ist a constant thing and therefore negligible for arbirtrary problem size. But thank you for your explanation!
I feel like you just didn't read what I said at all, which is worrying considering you are in a position to hire someone.. If you are referring to me in anyway: I hop around languages as much as I can though being employed as a Java programmer for the last 2 years. All languages are beautiful in their own way, I wish I could learn them all. 
Some of the overhead is constant, some of it scales linearly with the data. Whether it is negligible or not depends on the total number of elements, and the percentage of the time that is spent actually processing the data (e.g., in the str.contains call) vs how much is just iteration overhead.
Lambda expressions are still turned into classes at runtime. The use of invokedynamic turns the classes into an implementation detail, but they are still there. http://cr.openjdk.java.net/~briangoetz/lambda/lambda-translation.html
Have you opened a feature request with Jetbrains? http://youtrack.jetbrains.net/issues/IDEA
I assume he is referring to inner types of generics being lost at runtime (i.e. type erasure).
I actually don't use generated getters/setters. I use Lombok for all the boilerplate like that. But Lombok does not support this format either in its @Getter, @Setter or @Data annotations. So IntelliJ code generation was my last resort...surprises that it's still not there. would have thought this would been any developer's main complaint on day one of working with JavaFX
If you have a POJO with 40 fields, you might need to rethink the class-hiearchy.
I can confirm this is fun.
forget 40, even 10-20 would be a pain with this much manual coding
No not really. JSF and CDI are simple enough that they do not need an additional project like Boot to configure them. You seem to think adding JSF and CDI requires the kind of configuration Spring does but this is not the case. I see nothing wrong with you original recommendation. I just offered another reasonable choice. 
Especially how well it pays all my bills. So, so sad.
In that case, just go for it. Some things will feel cumbersome or weird to you (e.g. type erasure, lack of properties). But the more you actually code in it, the more you notice that those things don't mean too much when it comes to productivity.
Cool, thanks! I appreciate the vote of confidence :)
I hate Reddit formatting.
Ah, OK. Good to hear. That way it is simple. I can just throw in a Lombok @Getter and the whole thing gets reduced to class Bill { @Getter private DoubleProperty amountDueProperty = new SimpleDoubleProperty(); } Not perfect, but I can live with that. Thank you Lombok!
Actually it's even better with the Lombok @Value for creating immutable classes. An entire Person POJO would look like: @Value class Person { private StringProperty firstNameProperty = new SimpleStringProperty(); private StringProperty lastNameProperty = new SimpleStringProperty(); private StringProperty emailAddressProperty = new SimpleStringProperty(); } Really, Lombok is the main reason I can code in Java without complaining. The fact that it is not baked into the JDK is criminal.
That is indeed ugly but I'm still kind of wary of properties as a concept. I guess I'm not in a position where I have to do the whole EJB thing, but to me, if a multiple classes end up having multiple getters and setters to me, that's an indication that something's Gone Wrong and I'd probably rather have bare public fields instead. On the other hand I can't even stand the *idea* of using naming convention based properties, and proper properties would at least get rid of that. If I really needed them and had to do something like this on my own, without interacting with any outside code I'd probably just chuck method references into a map or something,
you write this by hand!?
Never. Lombok all the way. But in this case it does now work. 
A fairly recent update on the current perspective at Oracle: http://blog.joda.org/2014/11/no-properties-in-java-language.html
all but community
You might give [auto-value](https://github.com/google/auto/tree/master/value) a look
&gt; No not really. I have configured JSF and CDI on Tomcat. JSF and CDI are not "so simple" to add-on to a non-compliant app server. For JSF, you will need the api JAR and the impl JAR (such as Mojarra). Depending on the app server, you will also likely need an implementation of a JSF version compatible EL api JAR and the impl JAR. Of course, you'll probably want to throw in the Primefaces JAR. For CDI, it is not as simple to set up. You will need several JAR files. There's the impl JAR, such as weld, then you will need to include various api, spi and code generator JARs. That's just to get started. The application has to be configured to boot up CDI. The JNDI implementation of the server, if it exists, may be incompatible with CDI. You will have to do some configuration to get the CDI BeanManager working. We haven't even gotten to JPA yet. You can do all of this to bootstrap a minimal enough JavaEE environment to run a JavaEE app on a non-compliant app server, or you could save yourself the hassle and just use a fully-compliant app server. There's even a fully-compliant version of Tomcat available, TomEE. If you want to use Jetty, you're probably SOL. Spring and JavaEE have to deal with the same problem, addressed from different angles.
Most IDEs can help you with that as well. In general I do agree that getters and setters are useless boilerplate code in 99% of the cases. There should be a syntactical solution for this.
What version of Idea are you using? Generating getters/setters for Java-FX-style properties has been added more than a year ago!
&gt; surprises that it's still not there. It is: https://confluence.jetbrains.com/display/IDEADEV/IntelliJ+IDEA+12.1+128.101+Release+Notes
Don't select anything. Just use generate code (generally alt+insert), select getter/setter and then you get asked for which fields you want to generate the getters and setters. In the list select your property (e.g. amountDue) and hit enter and you will get fx-style getter, setter and proporty methods.
cool thanks But I think I will just live with the Lombok approach of using @Value and exposing the Property object directly and bypassing the JavaBean setter/getter standard entirely. I hate all this generated code that litters every POJO class with hundreds of lines of cruft. Once you get used to Lombok, it's hard to go back to plain vanilla Java
That link was way better than I expected. I was expecting the usual *just make all your fields public* nonsense and was pleasantly surprised.
Properties are great for data binding, which is the use case here. The getter/setter convention comes from the fact that properties are not a first-class Java construct. Getters and setters are not evil, they a good idea in certain contexts, and probably not a good idea in others.
Uncle Bob calls this the "Data/Object anti-symmetry": &gt; Objects expose behavior and hide data. This makes it easy to &gt; add new kinds of objects without changing existing behaviors. It &gt; also makes it hard to add new behaviors to existing objects. &gt; Data structures expose data and have no significant behavior. &gt; This makes it easy to add new behaviors to existing data &gt; structures but makes it hard to add new data structures to &gt; existing functions. Pick your poison.
Ah, crap, this won't work. It generates getFirstNameProperty() instead of firstNameProperty() OK, back to IDE generated code I guess :-/
Stock Tomcat does not come with all of the API and implementation JARs for JSF or CDI. Where do you get those, and how did you make sure all of the versions matched? How do you deal with CDI working with Tomcat's read-only JNDI? There are whole articles devoted to getting CDI to work correctly in Tomcat (BalusC, as usual, provides [excellent guidance](http://balusc.blogspot.com/2013/10/how-to-install-cdi-in-tomcat.html)). I think you may not be remembering correctly. It's not *hard* to set up Tomcat, if you know what to do. Just like it's not *hard* to set up Spring, if you know what to do. The whole point of this entire thread is that the OP doesn't want to do all that, and I gave my advice accordingly.
Imagine actually caring this much about virtual Internet arguments.
llogiq suggested some nice languages to expand the OP's horizons, and you made a contrary point suggesting that we should assume he was targeting a specific professional application, i.e. getting a Java job. You then called some of those previously mentioned languages your "flights of fancy", and stated that they wont capture the minds of developers in any mainstream way. I think I read what you wrote fine. 
A lot of people using other JVM languages also use Java, so communities tend to overlap and you have access to a lot of the benefits that come out of the community such as libraries and tools.
JavaFX node has over 40 fields I think.
It actually needs a higher-level object model to provide standardized cross-thread and delay-able change notification and binding for properties, and probably just AOP. A C#-like property would solve nothing as it's too primitive to be useful. PS: They also need to move that part of JavaFX into Java core. The idea that one should make specific versions of POJOs for every UI frameworks is ridiculous.
All you need is Java, Python, C++, and C#. Javascript as well for web development. Python and Java can basically do anything from Windows apps, mobile apps, web apps, scripting, anything. But honestly, you probably won't have a situation where you'll need some unique language, unless you have a unique circumstance (e.g. doing some extensive math, maybe you need a math-oriented language).
Annotations + reflection invalidate all of those points, aside from the legacy library design. Look at a groovy bean. So clean, so simple. 
You Sir have made the most important contribution to this entire discussion! Thanks, tried it and it works like a charm. Lombok rules once again.
TomEE is still only Java EE 6 Web certified, whereas Wildfly is Java EE 7 Full certified (along with Glassfish). So if you are thinking about switching from Glassfish, the only real free alternative is Wildfly.
JASPIC and JACC? Wow, that means WLP will almost (or maybe entirely) become full profile? This is really good news! :) Lack of JASPIC prevented us to use WLP before, and for some scenarios WAS (which did have JASPIC) simply isn't option (way, way, way too big). 
&gt; the only real free alternative is Wildfly. Which is really the only real Java EE 7 alternative at all out there. But I just read here on /r/java that IBM's WLP (Liberty) is making great progress. Granted it's not free, but it IS lightweight, small and fast (oh, and I think WLP is free for development purposes, but check their page to be sure). 
To summarize the entire discussion this whole mess can be avoided by ditching JavaBeans getters/setters and using POJOs with nothing but properties exposed automatically via Lombok fluent accessors, i.e. @Accessors(fluent = true) @Value class Person { private final StringProperty firstNameProperty = new SimpleStringProperty(); private final StringProperty lastNameProperty = new SimpleStringProperty(); private final StringProperty emailAddressProperty = new SimpleStringProperty(); } Now that is nice and terse.
I'm glad the mods finally noticed :\^)
Sorry this is on 1/3 as stupid as already existing practices. I need at least 1/2 as much stupid for me to be concerned.
It is free for developers.
https://www.reddit.com/r/java/comments/2v2z65/project_which_populates_a_maven_repository_from/ Meta link :)
You mean [80 fields](https://docs.oracle.com/javase/8/javafx/api/javafx/scene/Node.html#property.summary) :)
well if you use it like that, you can throw away all the methods and make the field amountDue public and final, and you're done. Then you can simply do: myBill.amountDue.set(10); i = myBill.amountDue.get(); That's it. One of the reason JavaFx has the methods is becouse the property fields are initially null, and the getters check for null first and return a default value. The setter initialize the property when needed. This saves a huge amount of objects for properties that never change their default value. See for example in Labeled.java: public final StringProperty textProperty() { if (text == null) { text = new SimpleStringProperty(this, "text", ""); } return text; } private StringProperty text; public final void setText(String value) { textProperty().setValue(value); } public final String getText() { return text == null ? "" : text.getValue(); } 
It's not as elegant, but you can emulate the functionality in a slightly more verbose way (as is tradition, in Java...). public &lt;T&gt; T foo(Class&lt;T&gt; cls) { T obj = cls.newInstance(); } And call it like this: public void baz() { MyClass obj = foo(MyClass.class); } It'd be nice if you could just do it based off the type parameter, but since type erasure is a thing you will have to pass the class object around, but it's just syntatic sugar for 99% of the use cases.
In Delphi, that also has properties, the fields are initialized, (got initial or default values), in the constructors. The same idea can be applied to Java. public class CoffeeClass { // property data field // has a lower access modifier, // than the property protected String name; // property getter public getName() { return this.name; } // property setter public setName(String NewName) { this.name = NewName; } // a property, // syntax may be declared different, // but, the idea is the same // note that the accesor methods have // the same access modifiers than the property public property Name = { getter: getName; setter: setName; }; // some constructor CoffeeClass(String newname) { // assign initial value to properties, // no accesor method here this.name = newname; } // a default constructor CoffeeClass() { // assign initial value to properties, // no accesor method here this.name = "American"; } // an example public static void main(String args[]) { CoffeClass MyCapuchinoCoffee = new CoffeeClass("capuchino"); CoffeClass MyAmericanCoffee = new CoffeeClass(); CoffeClass MyMokaCoffee = new CoffeeClass(); MyMokaCoffee.Name = "Moka"; } } // class CoffeeClass Just my 2 cents...
Cause me "chills", and makes me remember when some famous Java developer said: "Java does not need enums, we can use static constants"
I'd just like to note that using Java EE doesn't mean you have to tie yourself to every component in the stack. I like having no-fuss usage of CDI, JPA, JTA, JMS, and JAX-RS without needing to spend forever configuring my web.xml and app server and adding a million dependencies. Personally, my normal setup is similar to the Java EE of yore when Struts was the king, I use VRaptor 4 as my MVC framework, CDI for DI, JPA for DB work (I cheat and do pull in spring-data-jpa to generate my repository implementations, although I spent the longest time with a generic Repository class I would inherit from), etc. This ends up being pretty convenient for me as everything "just works" when I deploy it to Wildfly, meanwhile I have not yet been able to get JPA+JTA to work correctly in a self-hosted spring boot application.
+1 Gradle is nice when you get to the point that maintaining a bunch of custom maven plugins for simple tasks is becoming a hassle, but 99% of Java developers will have maven installed, and running: mvn package is as natural to any java developer as ./configure &amp;&amp; make is to a C/C++ developer.
I mentioned the app server in the context of Spring Boot. Even if you don't use all the services, at least they are all configured correctly out of the box. You certainly don't have to depend on everything. Outside of "proper" JavaEE applications, I've never seen JTA used. My experience has been that the most common usage of JPA is with resource local transactions. If your needs are complex enough to require JTA and CMT, Spring Boot seems like the wrong choice.
Right, but this isn't just about erasure, but the fact that Java doesn't have structural constraints/virtual constructors, and creating a new instance of a class that's only known at runtime can only be done via reflection anyway, whether or not generics are involved. This kind of pattern shouldn't come up often because generic parameters are usually either interfaces (which can't be instantiated at all) or immutable types (like `String` or boxed primitives) that can't be instantiated with an empty constructor. Passing a `Class` around is certainly done, and it's also OK to use `clone()` once in a while as a sort of virtual constructor. In any case, it's good to remember that Java is quite a minimalist language (like Go, only a little less minimalistic), and it's best to code with that in mind. 
&gt; A runtime exception is an unchecked exception; meaning I'm not forced to wrap a try catch around it. It leaves the decision entirely up to the developer if and how they want to handle it. You should never, *ever*, **EVER** catch a runtime exception. If you have to do that, you're doing something incredibly wrong, be it that you could just use a null check (see NullPointerExceptions) or your program's design itself. Plus, every programming language sucks. Just in different ways. It's just Java has a website which should say something about its popularity.
For the lazy! [JitPack.io](https://jitpack.io/) [Reddit Comments](https://www.reddit.com/r/java/comments/2su70s/jitpack_easy_to_use_package_repository_for_java/)
I'm only providing the other side of the conversation here.....
Java 8 is a great step but its equivalent is writing LINQ as method chains
You're thinking of entity framework as LINQ? LINQ works on anything that is enumerable.
Just providing the other side of the conversation http://whyjavasucks.com/Blog/5/Java_By_Example
I am very familiar with Generics and Collections. Mildly familiar with synchronization and threading. The idea of design patterns has always interested me, but I do not know what resources to use to learn about them or what to "Google." I am also not very familiar with anything further than the "concept" of unit tests. Where would I go to learn about design patterns or unit testing? And where would I learn things similar to the topics contained in *Effective Java*, but online? I have not used many libraries, as I am not that fond of having to depend on other things, but I have used Swing, LibGDX, LWJGL, Box2D, OpenAL, and other similar libraries. Books are a bit cost prohibitive for me, since I am a highschool student, so I mostly use Internet resources.
For patterns, the generally accepted canonical source is the book "Design Patterns: Elements of Reusable Object-Oriented Software" by the Gang of Four as they're known: Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides. 
&gt; as I am not that fond of having to depend on other things You're going to want to get over this.
Yeah, I realize this is most likely a bad idea. I just don't want to over-extend myself and start learning various libraries when I still having basic programming-related things to learn.
I just want to learn about programming in general, specifically Java since it is my favorite language. I do intend to become a professional programmer or software developer, but I am fairly far away from that. I am a junior in HS, so right now I just need to learn and work on my own projects.
Something location based, in java, worthy of a PhD and an app? How about controlling a swarm of heterogeneous drones to maintain Wi-Fi coverage of a large area for like a month?
Design patterns are highly overrated. If you use common sense, you'll stumble into them anyway.
I'd say something different. Get rid of the XMLs and use java configurations. 
But it'd fail with SelectBinding (Bindings.select("a.b.c")), since the path resolving only recognizes getter and setter and it's not even customizable.
Yeah I guess I was thinking only about LINQ to SQL
Msbuild doesn't manage your dependencies, Visual Studio does (via nuget). If you need to produce your build without VS involved - eg on a continuous integration server - you will have to deal with additional complexity. Furthermore, even if you are using VS, it won't *publish* packages for you, just retrieve them. 
Cross-posted on r/groovy where the comments are not obtuse memes: http://www.reddit.com/r/groovy/comments/2vtgkq/hot_new_language/
Sweet! It is so exciting to see a change, however gradual, in Java's "boy who cried wolf" form of API deprications. I certainly appreciate the attention to backwards compatibility, but WRT many of the deprications, it's been taken to an unhealthy extreme.
I've been advocating Spring Boot at my company and we've adopted it into about 5 newer projects recently. I've really enjoyed it so far
I actually finished the coursera course and it's really good. However when I tried to follow the other course "reactive programming" I felt that there is a big knowledge gap between the two. With numerous reactive programming books coming out this spring I'll try find a gentler intro I guess.
"A simple REST application can start-up in as little as 3 seconds"... :-) 
I am running wildfly on a dual core with 8 gigs of ram and a pretty slow drive and my whole machine reboots in under a minute.
&gt; like nullable types -- that Scala doesn't have `Option[T]`? :)
Hmm, I'm not sure. How long were you waiting between the courses? I can't really compare it given the fact I was completely new to FP when I started the course so the first one seem pretty difficult to me. The second one is probably even harder, but for different reasons. Either way, both are great, yeah.
Definitely, and they've admitted the style and concept is similar. A key difference is that Roo was designed as a CLI tool that would generate code based on a project stereotype. Boot is more about auto-configuring a project's dependencies and getting the ground framework set up so you can just starting writing code for your app. For example, dont waste 30 min adding and configuring JUnit and HTML templating dependencies into your project - Boot will do it for you and you "just have it". Go back later and re-configure or adjust something later if you need to.
Maybe so, I certainly enjoyed this [interview] (http://www.artima.com/scalazine/articles/twitter_on_scala.html) with Twitter about there usage of Scala which started me getting excited about the language. As far as I remember from it (it's quite long and I read it fully a good few years back) Twitter uses Scala for their message bus, or part of it and were quite impressed with the code reduction and performance increase that got out of using the language. Here's hoping I am giving it less credit than is due, I'll have to start taking a look around (London, UK) for companies here that use Scala, it would be a lovely change.
`Option` is `Option` and nullable types are nullable types. `Option` is an explicit wrapper, and any `String` (or any reference type) can also be null. In Kotlin, however, `String` is never null, while `String?` is a type that is kinda like `Option` but supported at the language level.
Just out of curiosity, have you used Rails, Django, NodeJS or etc?
Can't tell if sarcasm
Since I've used python flask I haven't been the same. Every Spring MVC project seems excessively heavy, slow to iterate, and has dated templating.
You can modify PropertyReference from jfxrt.jar to change the rules. I'm doing it anyway since JavaFX is unusable without my patches....
TI 84's (and 83's I think) have z80 processors. So if you get your Java byte code translated to z80 instructions you may be in business. https://code.google.com/p/j2z80/
You can define your own templates for properties… with that your typing could be reduced to: prop&lt;tab&gt;name of property&lt;return&gt; – done.
No comparative, the tools and static typing of java bring a superior experience against those technologies.
Spring boot is great. Articles pretending that Java needs to prove its worth is lame. I don't care if the kiddos think it's cool or not.
There is a semicolon at the while-line (line 8) that should not be there so the while-loop goes into an infinite loop
lol true, didn't notice it was there. Thanks and sorry for posting 
Those aren't the problems. The problem is something like interfaces with default methods that you want to expose as part of your API for Java 8 code. Implementations could always be cleverly hidden, but Java 8 has added possibilities for better *APIs*. Also, this proposal doesn't add any language features at all. All of this extra functionality is available to your build tool alone. I don't see this adding complexity to build tools. On the contrary. I've found myself needing to use quite complex build scripts to mix-and-match classes into JARs so that I could have a Java 8 and a pre-Java 8 artifacts.
BTW: You managed to ignore multiple hints telling you to ask for code help in /r/Javahelp. + The big red box in the sidebar saying "PLEASE SEEK HELP WITH JAVA PROGRAMMING IN /R/JAVAHELP!" + The big red button directly below the "Submit Text" button saying "Seek Programming Help" + The question mark icon in the "Related Sub-Reddits" section next to "Java Help ← Seek help here" Next time, kindly post such questions in /r/Javahelp.
Nice collection, man!
Node, with something like angular, can give you something to build your UI, but you don't really want to be building an enterprise platform in JavaScript. Having a spring boot app as your backend would be much better for data mgmt and business logic
Yeah, all that boot automagical stuff can be opaque, but I've found if you run into a problem like that, you likely need to add, or change your spring annotations. The magic is all invoked through the annotations.
Thanks for doing this. 
I share the sentiment and expect this kind of embedded server to be offered by many JavaEE servers, and eventually become part of the Java EE standard. In the meantime there are [simple solutions](http://java.dzone.com/articles/apache-tomee-shrinkwrap-javaee). But just to be clear, even though I fully agree that standalone containers are passé and have no doubt that embedded servers will be supported, Java EE doesn't really need a "chance". There are more JavaEE applications out there than Node.js, Go, Rust, Ruby, and Python applications combined. If you're writing a large airport management software, none of the other options are even viable, so convenient or not, JavaEE is often the only option.
check out the free video series on android programming, focused on beginners, in youtube. Search for android. Things i found useful include series on android by users thenewboston and Derek Banas, among many others. 
http://mail-archives.apache.org/mod_mbox/www-announce/201502.mbox/%3C54D87A0F.7010400%40apache.org%3E CVE-2014-0227 Apache Tomcat Request Smuggling
will i be able to catch up with it since i know nothing about java?
both derek banas and thenewboston offer a series of small, short, introductory java courses for free. What's really required is patience and discipline on your side, a computer with some HDD space, adequate memory, a good internet connection. You really don't need anything else. Programming is a lot like writing with some simple school math occasionally thrown in. Once you get the hang of it, you would be able to look back and think, it's a hell of a lot simpler than i thought. Anybody can do this. :-)
No, I completely understand that the language isn't changing; but I also observed the very long list of tooling that would need to be adjusted -- in a way that is 100% compatible with one another -- in order to achieve this change. But that's secondary to the real question I have: Can you provide a specific example of something you would want to do where users on Java 8 get an awesome API and users of Java 6 and 7 get an equivalent but entirely different API *in the same class*? I shudder at the conversations on bug reports: "well, are you using the Java 8 `awesome.A` or the Java 6 `awesome.A`, because they're different but are named the same? Speaking of bug reports, is this magic multi-version spec going to enhance the stack traces, too, in order to know which of the possibly 5 (restricting our discussion to just Java 5 though 9) different class files was actually used in the call stack? Or am I going to have to do a *lot* of `jar tf` in order to learn which silently overridden class was swapped in because I upgraded `commons-httpcore` from `12` to `13`? I do realize that I am having a fight with this spec through a proxy reddit thread, but these are the kinds of questions I would want someone to consider when adding more magic to the classloader and more **complexity** to my IDE &amp; build system. So in that way, I want to raise these questions in everyone's mind so when they go to create a JEP, they don't draw it up on powerpoint but rather include some concrete use cases that it solves, along with some thought applied to the knock-on effects it will introduce.
Good luck, man. And feel free to post here in case you need any help along the way.
&gt;If blank stare: why can't you assign a collection with a generic type binding of &gt;a sub type to a reference to the same collection type binding of the super &gt;type? Can you please give a code for this? I didn't quite get the question. 
The two are very similar in their concepts. But Dropwizard's primary API is a Java standard (JAX-RS), while Spring Boot's is Spring based (although I think Boot has a JAX-RS API now, too).
&gt; Since Java isn't as low-level as c or c++ would such a program be possible. It's not about being low level, but about providing access to OS-specific functionality. Java is philosophically opposed to that kind of thing (more so than, say, Python), so you'll need something like [JNR](https://github.com/jnr/jnr-ffi) to get access to the required syscalls. 
Not a bad idea! and it's a Bachelors dissertation in Applied computing. 
Actually there is this old MMORPG that I used to play. It never used to have an API, but recently has produced some basically API functionality, to view character information, guild information etc. and there aren't any good implementations of it. I was thinking of making an app that lets players view their character information and information about the server. 
It seems that Kotlin automatically places assertions at the assignment location of Java API calls. So, in your example above, val x: String = foo() If `foo()` were to return `null`, then an assertion would fail at that place in the code, in order to prevent `null` propagation. However, they do say that: &gt; Overall, the compiler does its best to prevent nulls from propagating far through the program (although sometimes this is impossible to eliminate entirely, because of generics). I suppose that's a bit better than the approach that Scala takes, where any reference can be `null`, but as you see, it seems it is not 100% fool proof. So what the Kotlin compiler is basically doing is: val x: String = Option(foo()).get I was wondering if perhaps the most general, and safest approach, would be to always assume any Java API call would return a nullable type or `Option[T]`. It would make handling these calls be a bit more verbose though.
At least it's descriptive. We could have named it Sublime Soup, but then who the hell would know what it was for?
Even if `Option` in Scala (or Java, for that matter) were free, it wouldn't give you null-safety as all references in Scala and Java are nullable. Even the reference to the Option itself could be null. (In fact, Scala is not big on safety. It has `Option` without null-safety -- because all references are nullable; it's got a rich type system that isn't statically safe because casts are allowed everywhere; it can do pretty much anything Haskell can, but without thread safety, as mutability is just as easy as immutability. In terms of language design, Scala gives you pretty much all the features of all the programming languages in the world, but without any of the constraints each of them is usually accompanied by. It's great if you want to explore the interaction of various PL concepts, but pretty dangerous, too.)
Indeed, we've been bit a couple of times with data race conditions due to having a data structure be shared among multiple `Future`s, and the fact that there isn't a strict way of enforcing immutability in the type system. Then again, I don't know of a language that would have prevented these bugs, other than Rust (I'm not too familiar with Haskell -- though working on that). In the other languages, it is just a matter of convention to make sure not share mutable structures.
&gt; I much prefer languages with a static type system Me too, but Clojure is different from other dynamic languages, as it doesn't do dynamic method dispatch. But, if you still want static types, Clojure has a very powerful [optional type system](http://typedclojure.org/) (with inference, algebraic types etc.) Java 8's pluggable types can't be used with Scala or Kotlin, even though the way Kotlin embraces annotations opens the door to such a tool in the future. The reason is that while the type annotations can be added in any JVM language, the actual type-checking is done by a pluggable Java annotation processor, which works on the Java AST, so it won't work with any other language; type systems tend to be very language-specific. (Java annotation processors can be automatically triggered and are supported by all IDEs -- at least NetBeans and IntelliJ -- so you can get immediate error markings as you type).
That's a good project. Get comfortable with the basics of java, and then let us know. I shall then send you some links to get started developing something along the lines of a simple MMORPG and creating a set of APIs around it. A Project oriented focus is a really way to learn a language since it gives you a very clear view of what you are trying to accomplish.
Check here ..Difference between Interface and Abstract Class http://net-informations.com/faq/net/abstract.htm Watson 
Just curious why you don't just use hdparm to use the drive's built in secure erase command: https://tinyapps.org/docs/wipe_drives_hdparm.html
&lt;shameless_self_plug&gt; I did something similar - a single value container template meant for domain data: https://github.com/tguzik/valueclasses Granted, not everybody needs this, but if you work in a domain where it's not uncommon to have three or more String arguments in a row... &lt;/shameless_self_plug&gt;
Thanks I will take a look at Spring Boot. At the time I learned about Spring XML seemed the way to go, but I never liked it. After a three year break from Java I naturally started with the things I kinda know.
JavaFX as of Java 8 has 3d support.
It would be nice to see some other benefits of PowerMockito. The main one here was spying for a private method, right? It didn't seem very robust, i.e. someone changing a private method's name should worry about other code breaking. If the method were package private, then you could just use Mockito, right? 
Interesting... How does it compare to [bytebuddy](http://bytebuddy.net)?
Very cool, I was looking for something for like this! I just started Java after years in c# and was doing exactly this with value types. Another shameless plug: http://onoffswitch.net/creating-stronger-type-contracts/
Thanks for the reply! Yeah I think java3d is what my teacher used years ago, but I've seen that the project doesn't seem to be exactly thriving. Would jMonkeyEngine do the trick then? It seems quite nice, but what I'm trying to do is pretty simple (nodes conected by cilinders that can be rotated) so I don't know if it will be overkill to learn an Engine for that, or if it will be simpler.
This thread has been linked to from elsewhere on reddit. - [/r/CoderRadio] [I gathered all the Java 8 articles and presentations I was able to find on this one resources page](http://np.reddit.com/r/CoderRadio/comments/2w33y4/i_gathered_all_the_java_8_articles_and/) *^If ^you ^follow ^any ^of ^the ^above ^links, ^respect ^the ^rules ^of ^reddit ^and ^don't ^vote ^or ^comment. ^Questions? ^Abuse? [^Message ^me ^here.](http://www.reddit.com/message/compose?to=%2Fr%2Fmeta_bot_mailbag)* 
Or just use Java 8's pluggable [null-safe type system](http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html#nullness-checker).
If it is a java app just decompile it. Search google for decompilers.
No matter what you end up using, you'll have to learn a new API. For you needs you won't have to know every aspect of jME, just how to set up a simple application and how do add, remove and draw geometry. If you are going to use lwjgl however, you'll also have to look at how to create meshes, how to transfer them to the graphics card and how to write, compile and link shaders. I just remembered [libGDX](http://libgdx.badlogicgames.com/). It's a game development framework build on lwjgl that offers similar features to jME. So you can use libGDX' features but fall back on lwjgl if it doesn't offer what you need.
Yeah, well didn't Oracle go with reflection as a means to bind class properties to like Tables and stuff? I think it's a bit terrible in my opinion. 
I'll just leave that here: http://blog.8thlight.com/uncle-bob/2014/05/14/TheLittleMocker.html
No the decompilers will just give you code. You can then compile it with an update to make the method you need visible. If the app is being updated then you should request the method be made available during a future update.
I love Mockito and PowerMock. That being said, I cannot stress hard not to use PowerMock for normal mocking in your tests. Use Mickito by itself. PowerMock has a lot of overhead that slows down your test run. It is invaluable when you need to mock private, static, or new, but do not include it if you do not need it.
Thanks for the detailed response. I'll look up more on how Clojure and Kotlin approach these issues. :) Hopefully we'll see some pluggable type implementations for Scala soon as well!
&gt; Optional&lt;int&gt; will be exactly the same size as int. That won't be possible in Java, as fixnums are not supported and are not planned, but the overhead would indeed be less than that of an `Integer`.
http://openjdk.java.net/jeps/218 I would say it is on the roadmap. Though it looks like it has been moved off to Java 10 (I thought it was going to go in with Java 9).
yeah and people have blindly been saying this without ever being able to back it up. and they have been saying it for way more time than since 2008. edit: yes, downvote away, but what exactly does make VS this brilliant and so superior IDE that nothing is able to even begin to touch?
As the sidebar states: &gt; Please seek help with Java programming in /r/Javahelp! Please be sure to read the posting guidelines there.
How is this different to redhat open source monitoring solution?
Out of curiosity, what's the issue with synchornizing on an `Integer`?
Nothing, if we never want to have Integer, Double, etc be value types in future versions of java (which would be nice, but would break existing codebases.) Hence the reason he claims Optional&lt;numbertype&gt; is the new Integer, Double, etc from java 9/10 on out.
Primarily that you are either doing something very odd (and probably wrong), or you don't need to sync on it. For the odd thing, I could only imagine you would sync on integers in a case like this private void doThingsParallel(Collection&lt;Integer&gt; things) { for (thing : things) { synchronize(thing) { doTheThing(thing); } } } Now, for the simple case where all `things` are between the integer cache size (-128-&gt;128 by default I believe). This will work as expected. However, once your integers get to a size greater than the cache size then when you think you are saying `synchronize(4293) {}` you are actually saying `synchronize(new Integer(4293)) {}`. In which case you could easily get 2 blocks running `4293` at the same time. For the simple case where you have something like this class Thinger { private final Integer id = 27; private void doThing() { synchronize (id) { theThing(); } } } I would argue that there are much better alternatives. You could sync on `this`, you could sync at the method level (which syncs on this), or if you are desperate you could introduce a new mutex object for the sole purpose of synchronizing. All of these would probably be better than using id to sync. As an added bonus, you can make id a primitive now.
Write a program to decompile and recompile it after making an api (or if you only have to do it once, do it yourself). Processbuilder will give you access to input and output streams of another process so you could take advantage of that. But other than that there isn't much that 2 processes can share. You could also be hacky and use robot to click something if its that simple but for a method call above is your best bet. Reflection doesn't work across processes.
Stripes is a dead framework, please start migrating away from it.
For 1 hdparm is runnable on windows: http://disablehddapm.blogspot.com/p/1.html For 2, well that would be a good reason :)
I AM SO SORRY OK WAS REALLY DESPERATE.
I was burned last week while refactoring code and breaking unit tests I'm unfamiliar with that used Mockito. Example test (MUCH simpler example than the kind of unit test I had to debug): public interface MovieDao { String[] lookupMoviesByActor(String firstName, String lastName, int year); } private final MovieDao dao = mock(MovieDao.class); @Before public void setup() { when(dao.lookupMoviesByActor(anyString(), anyString(), anyInt())).then(new Answer&lt;String[]&gt;() { @Override public String[] answer(InvocationOnMock invocation) throws Throwable { Object[] args = invocation.getArguments(); String actor = args[0] + " " + args[1]; if ("Tyler Perry".equals(actor)) { return new String[] { actor + "'s A Madea Christmas", actor + "'s the Haves and the Have Nots" }; } else { return null; } } }); } @Test public void testTerribleMovieLookup() { String firstName = "Tyler"; String lastName = "Perry"; String[] expectedMovies = { "Tyler Perry's A Madea Christmas", "Tyler Perry's the Haves and the Have Nots" }; String[] actualMovies = dao.lookupMoviesByActor(firstName, lastName, 2013); assertArrayEquals(expectedMovies, actualMovies); } The above test passes. Now I want to refactor the lookupMoviesByActor method to just use one String for the actor name since this method does not support "Samuel L. Jackson". When I change the method signature, I get compilation errors in my unit test, which is expected. I fix that, and now I have: public interface MovieDao { String[] lookupMoviesByActor(String name, int year); } private final MovieDao dao = mock(MovieDao.class); @Before public void setup() { when(dao.lookupMoviesByActor(anyString(), anyInt())).then(new Answer&lt;String[]&gt;() { @Override public String[] answer(InvocationOnMock invocation) throws Throwable { Object[] args = invocation.getArguments(); String name = args[0] + " " + args[1]; if ("Tyler Perry".equals(name)) { return new String[] { name+ "'s A Madea Christmas", name+ "'s the Haves and the Have Nots" }; } else { return null; } } }); } @Test public void testTerribleMovieLookup() { String name = "Tyler Perry"; String[] expectedMovies = { "Tyler Perry's A Madea Christmas", "Tyler Perry's the Haves and the Have Nots" }; String[] actualMovies = dao.lookupMoviesByActor(name, 2013); assertArrayEquals(expectedMovies, actualMovies); } I run the test and it fails. The reason it fails is because: String actor = args[0] + " " + args[1]; // Now returns "Tyler Perry 2013" Again, I wasn't familiar with these tests since I didn't write them, however this way of accessing method parameters seems very error prone. I ended up taking out this Mockito code and replacing it with this: public class MockMovieDao implements MovieDao { @Override public String[] lookupMoviesByActor(String name, int year) { if ("Tyler Perry".equals(name)) { return new String[] { name + "'s A Madea Christmas", name + "'s the Haves and the Have Nots" }; } else { return null; } } } private final MovieDao dao = new MockMovieDao(); That way, when method signatures change again, I'm able to fix the tests faster since the mocked up implementation will force a compilation error.
Exactly. I've seen bejeweled bots that were written using Java / Robot, I'm not sure what exactly is wrong with it, besides maybe not having the most friendly API maybe?
Which tool, RHQ?
I won't speak to why Java doesn't do this or that, but there is a difference between Java lambdas and the example you gave. In your example, the variable doesn't have a declared type. But lambdas always have a declared type somewhere in the code such that all references can see explicitly what type it is. It could be in the current method's body, in the arguments of another method, etc. Runnable, Consumer, BinaryOperator, whatever, but it's always the case that any reference to the lambda knows its explicit type. In your example references to x elsewhere in the code don't know for sure that it's a String as the declaration is not explicit.
`x` is declared as a String, so references to it elsewhere in the code should know that it's a String. That's kinda the point of type inference.
Give an example that is either valid java code or your "other statically typed language" code.
The whole point of static type inference is that there is enough information in the source code to infer the type of the values without explicit annotations. String x = "1234"; // annotating x with the type String is redundant because the compiler has enough information to infer x is a String. Integer y = Integer.parseInt(x); // Same here. The return type of parseInt is Integer, so the type annotation is redundant. There are surprisingly few situations where type annotations provide information to the compiler that it doesn't already know. 
Let me put it another way then. In your example, the variable type is inferred. In Java lambdas, it is the value type that is inferred. Put yet another way, your example infers "the left side" and Java lambdas infer "the right side" of the equals sign. It's an important difference.
http://docs.scala-lang.org/tutorials/tour/local-type-inference.html
1. Sick username there, Lavender Gooms. 2. Here's some valid C#: var x = "123"; // compiler knows that x is a string. 3. Here's some valid Scala: var x = "123"; // compiler knows that x is a String val y = "abc"; // compiler knows that y is a String, and that y is a constant. 4. Here's some valid Haskell (which is about as strongly-typed as they come): x = "123" -- compiler knows x is a String (that is, a [Char]) 
Breaking changes aren't always about syntax. Sometimes they're about the mechanics of the compiler or what the generated bytecode looks like. For example, some of the talk around Java 9 has been around the possibility of allowing generics over primitives (that is, `List&lt;int&gt;`). The hard part of that is not syntax; we already *have* syntax for generics that would work just dandy here. The hard part is what JVM bytecode the compiler would generate, how the JVM would have to change to accommodate that, and how that change would affect existing JVM bytecode. Today, if you have a `List&lt;String&gt;` and a `List&lt;Integer&gt;`, the compiler might catch that they're not technically the same, but the actual class implementations of those *are* the same: they're both just nice syntax that generates JVM bytecode for `List`s of `Object`, because that's what existed prior to Java 1.5, and changing the compiler to generate distinct JVM bytecode would have meant that existing code was incompatible. So since primitives don't extend `Object`, you can't create a `List&lt;int&gt;`, only a `List&lt;Integer&gt;`. The compiler may do some "boxing" and "unboxing" for you to make writing code more convenient, but the bytecode-level instructions for dealing with primitives are different from the bytecode-level instructions for dealing with user data types (e.g. classes that extend Object). Similarly, when talking about reworking how the compiler analyzes code and determines what bytecode to generate so as to allow for better type inference, you're not only creating a larger surface for bugs that would generate incorrect bytecode, but you're also introducing *different* compilation rules for potentially the same code that could render existing compiled classes broken.
I've heard it both ways. What you have is not different from what OP had, there still is no usage context like a reassignment or an implied conversion like print 1 + x VS print x + 1. That is the only benefit of inferring types whether its statically compiled or not. Java lamdas are just generic types, which are just placeholders for a type that will be explicitly given at some point. It looks like inference but it's not really. OP has 'inferred' wrongly that this is what is happening to make the comparison in the first place. 
Here's a big caveat: If the application is regularly updated, offers an API, and is closed source... decompiling the app will almost certainly cause him to run afoul of his license. This thread would be enough to prove intent in a civil case.
I remember seeing some *fantastic* demos with these things at SunONE and JavaONE. It's all Java ME as I remember it. Might be a bit hard getting your hands on the APIs now.
This is absolutely true. If you find yourself needing to constantly mock objects or reflectively test private methods, you should really consider that something might be wrong
The reason is that there is no compelling enough reason to do it (at least not yet). Ever since its creation Java tried to be a minimalist language (it hasn't always panned out, but that's the goal). From the language's inception, its creator (Gosling et al.) said they will not adopt features -- even good ones; even really good ones -- unless they solve a very painful problem. At the very least, the size of the change should be roughly commensurate with the magnitude of the problem Lambdas solved a problem which has become painful in modern programming styles (several parallel processing solutions were rejected from Java 7 because they were too painful without lambdas), and lambdas without type inference would not serve their purpose of compactness. Some may consider local variable type inference a very neat feature, but it hardly solves a painful problem, certainly not one commensurate with the magnitude of this change. That many people don't even find it nice at all -- or even find it a little harmful -- does not help either.
Looks like a very nice project.
Groovy is mostly dynamically typed.
[Considering where we are in the solar cycle](http://www.astronomynorth.com/wp-content/uploads/2010/09/solar-cycle-sunspot-number.gif), I'll take all the sunspots we can get. Time to work the DX.
Thanks for the clarifications, that makes sense
Yes, the named entitiy graphs are one of the best features. But keep in mind, you can also define an entity graph via the EntityManager to define your loading strategy at runtime.
I've just heared about RHQ so I can only tell you about the differences I've seen so far and maybe I've overlooked some of RHQ's features. RHQ does not integrate into the html of your application like stagemonitor does with the in browser widget. The advantage of this widget is that you don't have to install any backend for it to work. So it's very easy to get started if you only want to use stagemonitor for development. Also, RHQ doesn't seem to collect call trees that show you which method calls where particularly slow nor request traces that you can further analyze (see http://www.stagemonitor.org/#analyze-requests). Stagemonitor integrates with well established dashboards like Kibana and Grafana for advanced metric graphing as well as timeseries databases like Graphite (InfluxDB is on the roadmap). RHQ does graphing and metrics storage in one project. Potentially it would be possible to integrate stagemonitor with RHQ for the metrics displaying part. Stagemonitor also offers more detailed metrics for request response times like percentiles, automatic grouping of requests (/items/{id}/detail -&gt; 'Item Detail'), error rates, ... I don't know if that is possible in RHQ as well, but due to stagemonitor's plugin architecture you can easily monitor custom metrics and write plugins for specific technologies. For example, there are already optional plugins for EhCache, logging and Spring MVC One thing that stagemonitor does not yet offer is alerting, but I'm currently working on it.
That's no excuse for ignoring 4 hints altogether.
&gt; installing a standalone container / app server with its myriad of XML config files The majority of servers, at least the ones that matter, are just an unzip and then it's fully ready. There is NO XML config that you are required to twiddle with or create. All XML config is optional. 
The problem was that the implementation in the Answer I had to deal with was more involved than what one line of code could have done. No way I could have used thenReturn(). I had trouble coming up with a better example in my post. The point I was trying to make was be careful when implementing Answer since it uses indexing on method arguments.
To be honest he acknowledges in the beginning that he will be harsh to prove a point. Besides that yes, you should always think twice before saying "my way is the best way" because you'll always be wrong in at least one case.
Nice I'll dig into it.
Apparently it's hard to do with overloading and OO-style subtyping, at least, that's Scala's excuse. Sure, you could have local type inference like in Scala or C# but that's not very useful and only saves you some writing.
Agreed, I don't really see what it buys you. Just because the compiler can deal with it doesn't mean I want to be reading code always having to trace out what type a `var` got. If it was to be added, it would need to be used sparingly. I've seen a few c# programs at my old work that relied on it much too heavily and reading the code often suffered as a result.
&gt; var x = "123" // compiler knows that x is a String` Infers it's a String is better. The full Scala equivalent of String x = "123"; is var x : String = "123" There are many cases when Scala can't infer type (for example if the initial value is null)
Quite possibly; in all cases though, the "right thing" to do is to reach out to the developer first, rather than decompile the code.
Creating a desktop application (from `main`) is fully explained in the official documentation with examples. See [here](http://docs.spring.io/spring/docs/4.2.0.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#beans-java). A Swing UI is built on top of Spring, but they are independent pieces. Refer to any example of how to build a Swing application, and then use the Spring `ApplicationContext` to retrieve instances of any service objects needed. There probably aren't that many examples of *exactly* how to do this because there is nothing to show.
Consultant job? Get the cert immediately. Consulting companies love putting Oracle certified on their proposals. 
Blogs that put a social bar on top of the text when zooming in on mobile is clearly made by people who don't care and don't deserve my time.
I haven't looked in the package in years, but I assume it has a disc with libraries on it, given it's age. I don't think 2007-2009 era had gone full-web for driver delivery (I hope). I'll have to check it out.
You're starting to piss me off with your spam. Don't worry, I'll report this accoutn of yours as well. Like the ones yesterday, and the one two hours ago.
Groovy is designed to target the javascript/ruby crowd. It has many things I strongly dislike. :(
have you tried thymeleaf support in springmvc?
Yeah it still seems lacking in power and flexibility compared to things like Jinja. I have found that StringTemplate is a good java alternative but its definitely not standard to use it in Spring MVC
http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#beans-factory-instantiation You instantiate the container and then you use the container, the above link has examples of both. There's really not much beyond that. You're not likely to find examples since it's so straightforward and not all that common. If I were doing it I'd likely create a Spring bean responsible for initializing the application. Then I'd create an entry point (main method) that simply creates the container, asks for the bean and starts the initialization. At that point everything can be injected by Spring and managed by Spring.
The Java game engines mentioned are very good but are probably overkill for your needs. JavaFX [3D](http://docs.oracle.com/javase/8/javafx/graphics-tutorial/javafx-3d-graphics.htm) probably has all you need (and more), has excellent performance, and is now included in the JDK itself, so it's the "standard" 3D Java library. See one demo [here](https://www.youtube.com/watch?v=AS26gZrYNy8). You can google for many more.
Here is my JavaFX main() used with Spring. I'm sure you can figure out the gist for Swing: import com.coolguys.cyborg.gui.MainStageAccessor; import com.coolguys.cyborg.gui.SplashScreen; import com.coolguys.cyborg.spring.ProductionConfig; import com.coolguys.cyborg.util.javafx.HostServicesProxy; import com.sun.javafx.runtime.VersionInfo; import javafx.application.Application; import javafx.application.Platform; import javafx.stage.Stage; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.context.annotation.AnnotationConfigApplicationContext; public class CyborgApplication extends Application { private static final Logger LOG = LoggerFactory.getLogger( CyborgApplication.class ); private final static AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(); public static void main( String[] args ) { LOG.info( "JavaFX Version: {}", VersionInfo.getRuntimeVersion() ); LOG.info( "Java Version: {}", System.getProperty( "java.version" ) ); try { launch( args ); } catch ( Exception e ) { LOG.debug( "", e ); LOG.error( "Application Error: {}", e.getMessage() ); System.exit( 99 ); } } @Override public void start( final Stage stage ) throws Exception { final SplashScreen splashScreen = new SplashScreen(); splashScreen.showSplash( stage ); new Thread( new Runnable() { @Override public void run() { try { // This class must be registered before the full Spring Context context.getBeanFactory().registerSingleton( "hostServices", new HostServicesProxy( getHostServices() ) ); context.register( ProductionConfig.class ); context.refresh(); context.registerShutdownHook(); } catch ( Exception e ) { LOG.debug( "", e ); LOG.error( "Error during startup: {}", e.getMessage() ); System.exit( 99 ); } Platform.runLater( new Runnable() { @Override public void run() { context.getBean( MainStageAccessor.class ).init(); splashScreen.hideSplash( stage ); } } ); } }, "Context Initialization Thread" ).start(); } } In reviewing my own code, the context should not be static I don't think. It's a long-dead proof of concept project I did trying out Java FX2. In this example, ProductionConfig.class is an @Conifguration annotated Spring configuration file.
if you are curious about what boot is doing, use the --debug flag as sh0rug0ru mentions, but also use this is concert with the live beans graph in spring tool suite (eclipse plugin) it will show positive and negative matches. Note live bean graph shows stuff at runtime...
You don't need to specify all of that. Java makes use of target typing: final Map&lt;String, Map&lt;String, List&lt;Integer&gt;&gt;&gt; cache = new HashMap&lt;&gt;(); Because the type is specified on the left-hand side (the target type), you don't need to repeat the information on the right-hand side. The `val` on the left-hand side doesn't specify the target type, which is a very different kind of type inference.
Though Java already does type inference of generics, so what the real comparison would be is something like: Map&lt;String, Map&lt;String, List&lt;Integer&gt;&gt;&gt; cache = new HashMap&lt;&gt;(); val cache = new HashMap&lt;String, Map&lt;String, List&lt;Integer&gt;&gt;&gt;(); Fairly similar, though I think I prefer the second for keeping all the type stuff together and leaving the naming alone on the other side. As it's now in Java the actual type is spread out all over and the name is lost in the middle. To be clear, I'm not saying it's a bad feature or that I don't want it. I'd use it if I had it, but some people bring it up as a major reason why C# is better than Java and I just don't see that. Same for Scala, if you want to show off Scala's advantages and *that's* one you choose to highlight?!
Upcasting is safe and automatic, so `var` should assign the variable to the concrete type on the right side of `=`. Type deduction *is* explicit declaration. There's nothing implicit about `var x = new ArrayList&lt;String&gt;();`. *And* it's optional, so if you want to type out the full typename twice, you can.
Look into reflection/bytecode manipulation.
Ya I can't think of a use case for this but it seems cool. For a giant company I guess it makes sense... But why not just totally different projects? The bigger companies I worked split most projects by team with a few central shares libraries... What's the pros of this?
Thanks for the thorough feedback! I'm guessing that desktop development is pretty much in a distant 3rd to mobile and web. Still for some cases it's handy to just have something that is running as a gui app. 
Not really, in groovy this doesn't work: import groovy.transform.CompileStatic @CompileStatic class Something { def s = "hello" String method() { s.substring(1,4) } public static void main(String[] args) { println new Something().method() } } $ groovy Something.groovy org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed: /tmp/Something.groovy: 9: [Static type checking] - Cannot find matching method java.lang.Object#substring(int, int). Please check if the declared type is right and if the method exists. @ line 9, column 9. s.substring(1,4) ^ 1 error If you'd said: &gt; something like Project Lombok (or Scala or Kotlin or Ceylon or Xtend, etc) already lets you do this you'd be right ;)
Quick deployment and quick bugfixing. I've used a similar method to interface with third party providers from my java app since I can quickly iterate and fix the issues caused by poor spec from the third party. Previous to creating this I had a one to two hour cycle as I built a jar and deployed to the remote client site. After using scripting I could change the script and retest in less than 2 minutes, my productivity went through the roof.
Fair enough
I mean I deploy my apps in under 5 mins w tests just using maven and some bash scripts..... Rolling deploying behind a load balancer and no one sees downtime. Guess this is a tad faster....meh
I would say that when you are first starting, you are more likely to be working with other people's code. But others have said, it really depends. My current job is probably split 50 / 50 between new code and bug fixes, some of which is my own code. Last place was almost all new as it was a from scratch project.
Yes, you really *do* need help if instead of copying the assignment (*your* assignment) somewhere you take a screenshot of it…
Most of the time adding my own contributions to already existing code. Pure greenfield projects are pretty rare in most corporations.
concept is similar only : rapid app dev. That's about the end of the similarity. Roo generates code, boot doesn't. Boot simply tries to remove boilerplate, RoR style, as bmrobin says quite well.
Why post this here and not to /r/javahelp? Why not Google for the answer? Why not post what you think rather than expecting people to do all your work for you?
Yes? I think so, at least. Car HAS-A Wheel; Car IS-A Vehicle
Congratulations for ignoring: + the **big red button** saying **"Seek Programming Help"** + the **big red banner** when **hovering** over the **"Submit Text"** Button, saying **"Please seek help with programming in /r/Javahelp"** + the **big red box** in the **sidebar** saying **"Please seek help with programming in /r/Javahelp"** + the **"?"** icon in the **blue "Related Sub-Reddits"** box in the **sidebar** with the text **"Java Help ← Seek help here"** **Plus** Screenshots of assignments only will get you nowhere. **You** have to actually do some work. **Post removed** - Programming help belongs in /r/Javahelp but make sure to read and follow the [Posting Guides](http://www.reddit.com/r/javahelp/wiki/posting_guides) there. 
&gt; You do not have to mock out every collaborator The above is the most interesting item from your list. If the collaborator has been unit-tested, you can trust it to work as intended, and there is no need to replace it with a mock. But, this is true only if the collaborator also does not do any of those things that should not be done in a unit test (talk to the database, for example). 
This is so bad that I didn't even realize it was something people did.
Yes, `equals` implements semantic equality. But take it one level higher. What does semantic equality even mean? The default implementation of `equals` is `==`, which is an okay default because in most cases we are not modelling value objects, in which case we have different identities even if the current state is the same. Most objects exist within the scope of one JVM, so the memory location is sufficient to distinguish identities. Otherwise, for persistent objects which can outlive one JVM for which we want to preserve identity, `equals` should compare a business key (the most sensible semantic equality). But that gets into consistency issues, in which case the JPA approach of a session which tracks changes to a memory bound object makes the most sense, and in that case, is it is advisable not override `equals`, and let the session manage consistency. For value objects, the concept of an identity doesn't make sense. One geometric `Area` is the same as another. In which case you really should provide an implementation of Object.equals. Semantic equality means different things for different types of objects. The book Domain Driven Design IMHO provides probably the most useful guidance on proper definition of semantic equality.
Yep. We're getting old
You *could* do this, but if you do, you need to override the regular `equals` with a `final` method that delegates to the overloaded one. If you have to go to that much trouble, though, what's the point?
&gt; like Properties extends Hashtable.... Oups! http://docs.oracle.com/javase/8/javafx/api/javafx/scene/input/ClipboardContent.html
fixing all the tests
I don't see the problem with that. `Properties extends Hashtable` however is unforgivable.
Clipboard seems to accept a Map&lt;DataFormat,Object&gt; when it talks about ClipboardContent, could it be that the ClipboardContent class just adds some helper functions? The Properties case is considered bad since it does not behave like a HashMap. 
More specifically if the total JVM heap size across all your production/test Liberty instances stays below 2GB.
Not knowing much about Enterprise Java, what is the benefit of this over tomcat?
&gt; Could you please point me in the right direction (eg. a place where I can find such code) The sidebar, including its search box. The question you're asking has been asked and answered a million times in this and other subreddits (of which the sidebar lists the three most related to your question).
Thanks. I do think spending time alone figuring it out will help me get up to par. Thanks for not making me feel hopeless
&gt; Identity is fundamental to the definition of an object and OOP I've never fully understood why that is. I personally prefer *types* as the basis of all design, not *objects*. Whenever identity is needed, I personally feel that it should be either - attached to an existing type (like `Comparable`) - attached to a collection for the contained type (like `Comparator`)
Oh come on! I've just barely gotten started! Imagine `@DisplayHint`s for `@ScreenSize`s and `@ThreeD`! `@I18N` and `@DefaultClass` and `@Security(Role.ADMIN)`! But seriously, it's a bit deceptive to state "my code in 2000" as private Collection employees; more like class SomeGroup { private Collection employees = Collections.EMPTY_LIST; public Collection getEmployees() { return employees; } public void setEmployees(Collection employees) { if (employees == null || employees.isEmpty()) { this.employees = Collections.EMPTY_LIST; } else { List actualEmployees = new ArrayList(); for (Iterator iter = employees.iterator(); iter.hasNext();) { actualEmployees.add((Employee)iter.next()); } this.employees = Collections.unmodifiableList(actualEmployees); } } } I mean seriously; let's have class SomeGroup { @BeanProperty( nullValue=Collections::emptyCollection, onSet=(col) -&gt; Collections.unmodifiableCollection(new ArrayList&lt;Employee&gt;(col)) ) public Collection&lt;Employee&gt; employees; } For every annotation in the last java snippet, he's omitting the *mountain* of code that it brings in; code which the humble `var employees` would have to have duplicated, by hand, in increasingly specialized and one-off ways, everywhere else in the code base. But you can still do it; just turn off compiler warnings and ditch your ORM.
You can also use TomEE, the Java EE app server version of Tomcat.
But that wouldn't be OOP. Java is an OOP language and `Object` defines objects, which have identity.
C# made the choice to require explicit overriding. Sometimes I miss this about Java, 'cause it allows you to override and mock whatever you want, but then there's stuff like this....
If you follow a pure REST architecture where your server only provides an API, you are probably looking at logically two different projects. The backend will be implemented in Java, with its own set of build tools. The front end will be implemented in Javascript, with its own set of build tools. For the Javascript part, you'll probably be using tools like grunt, bower and karma, which aren't integrated very well with the Java build ecosystem (JHipster provides this integration, if you don't mind the choice of Angular made for you). Also, the JS code would be static assets and it might make sense to host them separately anyways. So, it might make sense to have two separate builds. Which is basically two separate projects. A Javascript project and a Java project.
This is overloading, not overriding.
&lt;scribbles on napkin&gt; ...approx 6 years of my own (many moons ago) and the last 21 years on other people's code.
2GB org-wide is a really crappy limit though. When Wildfly is your primary competitor for the Liberty profile I really feel like you are shooting yourself in the foot here. 2GB per JVM seems like a somewhat reasonable limit, after all, once you hit that many companies will probably want to start paying for support anyway, but org-wide its just making the product DOA.
Ah that's true, this wouldn't catch that... I wonder if there's compiler warnings (in both languages) that can tell you when you're overloading a superclass method?
One thing that has helped me with professors (and with all sorts of people) is to realize that emotional resilience is a skill that can be built up and learned. Try to get from your professor what will help you and if your professor or anyone tells you something that could only discourage you, calmly ignore it rather than taking it to heart and despairing or getting worked up over it. Of course, there is a limit to what anyone can or should take, and you'll have to figure that out, too. Just realize that you can, gradually, become stronger. New things will always be a challenge, but you can get better at having the right mindset for learning and as your knowledge base grows, all of the stuff out there becomes more relatable. Check out this link for a study method for memorizing things that has helped me out substantially for memorizing in (and out of) school: http://www.jackkinsella.ie/2011/12/05/janki-method.html There is indeed more to programming than memorizing, BUT you have to become fluent with much English grammar, syntax, and vocabulary before you can write an eloquent and well-organized essay.
 import static org.apache.commons.lang.ObjectUtils.*; import static java.util.Arrays.*; java.util.Objects.*; OK, you wouldn't do it this way, of course. But why not call the method XXX.equal instead? It would be better from an English grammar perspective, too, because `equals` really makes sense only on an object, not on a static method, which reads "are the two argument objects *equals*?"
You can do better than that class SomeGroup { @EmptyOrNullableListSubstitionUnmodifiableArrayListCopyBeanProperty public Collection&lt;Employee&gt; employees; } That would be more like how it would turn out, and the best thing is: [You can (probably) already do that today](http://blog.jooq.org/2014/04/01/spring-api-bingo/)!
In addition to what /u/TheHorribleTruth stated, how were we supposed to help you with no code samples or more information? Try to provide more detail for /r/Javahelp. 
As /u/sh0rug0ru stated, it should be two different projects. One for the backend RESTful app and the other one for frontend Javascript project. I assume you are clear on this and your question is more about the auth &amp; auth mechanism. My suggestion would be something like this, Once the user authenticated, the server should send a session token (please note that this is not HTTP session id, it is application generated token) to the client. Further requests from the client should have this token either in the request header (eg. X-AUTH-TOKEN) or it should be passed as part of the request params. The server should validate this token against the authenticated user and proceed further. Pure REST architecture doesn't support sessions. So, store the token in a cache (redis) or in the DB (will be costly a operation to querying for every request).
Congratulations for ignoring: + the **big red button** saying **"Seek Programming Help"** + the **big red banner** when **hovering** over the **"Submit Text"** Button, saying **"Please seek help with programming in /r/Javahelp"** + the **big red box** in the **sidebar** saying **"Please seek help with programming in /r/Javahelp"** + the **"?"** icon in the **blue "Related Sub-Reddits"** box in the **sidebar** with the text **"Java Help ← Seek help here"** **Plus:** most likely you are confusing Java with JavaScript. They have as much in common as car and carpet. **Post removed** - Wrong subreddit, no proper info.
&gt; a stateless class which implements Comparator. That's a very good example. Specifically because it is a `@FunctionalInterface`, i.e. a type that really doesn't need identity
Probably this post is better suited in /r/Javahelp or in any of the Android related subreddits. /r/Java is for discussions about the Java Platform and language, but not about Java programming. There are various hints on this subreddit that you should have seen: + the **big red button** saying **"Seek Programming Help"** + the **big red banner** when **hovering** over the **"Submit Text"** Button, saying **"Please seek help with programming in /r/Javahelp"** + the **big red box** in the **sidebar** saying **"Please seek help with programming in /r/Javahelp"** + the **"?"** icon in the **blue "Related Sub-Reddits"** box in the **sidebar** with the text **"Java Help ← Seek help here"** All of these would have pointed you to /r/Javahelp.
Ok so you'r saying that if I implemented both the front- and backend in different projects and the server remains as a pure REST API I cannot use modules like Spring Security or SocialSecure or even PlayAuthenticate in combination with Deadbolt 2 to get the athentication and authorization working? Is such token authentication secure enough for an API? The access should only be allowed to users in the system and certain actions only to users with certain roles. You suggest to save a session for each user in e.g. redis and take each request to lookup the session token which got send within the request to check if the user is logged in, correct? Nevertheless I would like to use modules which provide this functionality out of the box if possible.
See my reply to [rajnp](http://www.reddit.com/user/rajnp)
Obviously, these things won't change in Java due to backwards-compatibility. But let's assume we *can* create things afresh. The base type for all collections is `Iterable` which can work on both "identity-ful" and "identity-less" types. A lot of common "collections features" are really sufficiently covered by `Iterable`. Then, we could have some `Iterable` subtypes that either take `Equalable` (similar to `Comparable`) types, or an `Equalator` (similar to a `Comparator`) ... (let's not discuss names). All these things would be much more consistent and transparent. For instance, you wouldn't have the "after-the-fact" nastiness of `SortedSet` subtly (but violently) violating the contract of `Set` w.r.t. `equals()`, `hashCode()`, and `compareTo()`. The essence here is that the only type enforcing collection semantics would be the collection itself, or optionally the component itself via a explicit trait. But there's no distributed, hacky, historic contract that "just is" because Java screwed it up in early days. From a type system consistency perspective, this would be much much better and easier to learn than what we have today.
&gt; Why not? Behavior, Identity and State. This is OOP. The `equals` method is necessary for Identity. &gt; I think that depends on how you use it. Yes, but that doesn't change that Java *itself* is an OOP programming language, so identity is very much a part of the language and API design. &gt; You keep saying this as though it were an argument in itself. I'm paraphrasing Grady Booch, an authority on OOP, because he explained OOP in the fewest amount of words. Identity is what allows the distinction of one object from another, as logical entities. Identity is what `this` is. The way Java does `equals` is how identity is modelled in pretty much every OOP programming language that has an `Object` class. I would say read a book about it (Grady Booch's Object Oriented Analysis and Design with Applications is a classic). Rich Hickey gives a great perspective on identity from an [FP perspective](http://clojure.org/state). Classes don't have state, objects do. That state can be mutable or immutable. Whether that state corresponds to an identity depends on the type of object. Following Domain Driven Design terminology (another book I highly recommend reading), objects can be logically divided into entities and values, with entity objects having identity (modelled by memory location or business key) and value objects not having identity (one value is logically interchangeable for another). `Comparator` is just a feature of an object, specifying a protocol that it responds to.
As far as I know, there is no official ARMv7 version of SWT available, which means no version of Eclipse. So unless you want to use eclipse the platform in headless mode, you are basically out of luck here.
Yes, something like that. James Ward has created a sample app for securing play rest endpoints. It will give you some idea for the implementation. https://github.com/jamesward/play-rest-security 
I have started these days developing something very similar and I agree on the fact that there 2 different projects. For the backend I'm using Java + Spring : - Spring Boot to build the REST structure - Spring Security to manage authentication and limit the APIs a user can call based on its roles. You should be able to interact with the request. Once the user is authenticated, I'm able to retrieve the user on subsequent requests. - Spring JDBC to access Oracle stored procedures On the frontend i choosed AngularJs too and I'm loving it. Bootstrap or similar for styling the app
Ok, I haven't done extensive tests, but I tried running one of Debian language benchmarks: http://benchmarksgame.alioth.debian.org/u32/program.php?test=spectralnorm&amp;lang=python3&amp;id=6#log * It ran on Python 2.7.3 in 5 minutes 25 seconds. * It ran on Jython v2.7b3 on JDK 8u25 in 13 minutes 23 seconds. * It ran on PyPy v2.3.1 in 32.3 seconds. * It ran on pure Java on JDK 8u25 in 6.3 seconds. Of course this will differ for different use cases, but in general Jyton is dog slow... EDIT: formatting, added pypy.
Dynamic languages have been somewhat at a disadvantage on the JVM. Java 7 added `invokedynamic`, which helps a lot, but is still somewhat a work in progress. See what the JRuby guys have to [say about it](https://github.com/jruby/jruby/wiki/PerformanceTuning).
So it's free now, but will cost money in the future? Okay, what's the catch? :)
Then how the hell do Scala guys do it? I just ran the same test in Scala. In interpreter, without precompiling it. It ran in ~7 seconds, similar to pure Java. 
Scala isn't a dynamic language. Scala knows exactly what methods are available to an object at the call site at compile time. The compiler will call you out if you try to do a nonsensical method call, and since everything is legit, in the compiled bytecode, Scala can tell the JVM exactly where the methods are. This is fast. Languages like Ruby and Python have duck typing. You can call random methods on random objects and it is up to the runtime (and not the compiler) to figure out if you are making sense. The JVM wasn't really designed to do duck typing, so JRuby and JPython have to manually do it. This is slow. Since Java 7, the JVM can do duck typing. This is fast?
Well, which Java libraries do you need available from Python? Are there Python equivalents already available that will let you avoid trying to cross over into a JVM from Python? That seems like an iffy proposition from a production reliability standpoint. 
[And yet...](https://today.java.net/pub/a/today/2008/07/31/return-type-based-method-overloading.html#implementing) *Java-the-language* considers covariant overriding to be overriding only. But the JVM itself doesn't have any of the restrictions you've mentioned. The JVM allows for overloading based on return types. I would imagine that Nashorn (or Scala) profit from this platform feature.
&gt; I just dislike the whole complexity [...] I avoid treating application servers like they are something a sysadmin should take of and that's gotten rid of 90% of the complexity involved for me. The idea behind a Java EE application being portable between application servers has been a non-starter for years, and acknowledging that has made my life easier since now my app server of choice (Wildfly) is just another dependency. With this train of thought, I've just gone and docker-ized wildfly, I inherit from the container, put my wars in the correct directory and have a small shell script to configure my JDBC connections (jboss-cli makes this really easy). Running my app is now as simple as `docker run --name instance myorg/myapp` and maybe passing in some ENV variables with jdbc urls. 
Yes, JVM bytecode lets you get away with a lot more. The compiler resolved the exact methods and specifies them to great precision in the generated bytecode. But bytecode isn't a real language and doesn't have real language problems. Meanwhile, in the world of real languages, return type overloading is generally not allowed because it is a very bad idea. It's a bad idea in Java and a terrible idea in Scala (think of the monkey wrench that would be thrown at local type inference, which already has to deal with subtype polymorphism). Haskell can get away with it because of its simple type system which is amenable to Hindley–Milner type inference.
fair enough. I'll discuss with the spring mvc lead, thanks for your feedback. 
&gt; I'd be somewhat careful with Jython. The project seems stalled or slow to progress. No reason to, really. I've used Jython for 10-15 years already and love it to bits. It doesn't really need to progress, unless you're desperate for the latest and greatest innovations in Python. But you don't really need those. The language is fantastic as it is. Totally agree with your performance assessment.
Well this is for small setups - if you need caching for performance reasons then your setup's requirements may exceed the average small businesses (if you try it and it doesn't work in 2GB feel free to contact us as WASdev and we can take that feedback on-board). When looking at our position against JBoss EAP and WebSphere Full profile you need to keep in mind only the free entitlement in Liberty is capped at 2GB - you can buy a production entitlement for it to have increased capacity (buying the Liberty profile only WAS offering of Liberty Core is cheaper than any of the licenses that come with full profile and Liberty profile, so when looking at other supported production offerings it's very well positioned already). The small size of the Liberty runtime, it's performance and the ease of use aspects make Liberty a very enticing option for users, as well as people after some of the Java EE 7 features we currently support in production.
The JVM could do duck typing via reflection already. It was slow, but it worked. By the way, Scala does support duck typing in the form of structural types. They are implemented with reflection currently, but because of the slowness, you have to explicitly enable them. The next version of Scala will presumably use indy for this instead.
Assembly is statically *linked,* though. There doesn't have to be a lookup for every single subroutine call; just prepare the stack and registers, then jump to the address.
No its alot slower then pure Java.
Indy is short for `invokedynamic`.
That's not really duck *typing*. That's using a type introspection API. If a language is duck *typed*, the type system defers method resolution to runtime. In Java, you could do something like: obj.getClass().getMethod("foo", String.class).invoke("bar"); But that's not duck typing. obj has a type, `Object`, which has a method `getClass()`, which has type `Class`, which has a method `getMethod()`, etc. The *effect* is similar to duck typing, but it isn't duck typing, because the entire time, we've been dealing with statically resolved methods. The JVM can be used to *implement* duck typing in a duck typed language using reflection (obviously, because JRuby and Jython exist), but that doesn't mean that the JVM *supports* duck typing, and it can only be said that the language implemented supports duck typing. Now the JVM does support duck typing, with `invokedynamic`.
no
Spring can be configured entirely with Java these days. There is no need for XML anymore.
&gt; One key thing Wildfly is missing is there is no paid support offering What I'm missing in these discussions is that WildFly is simply another name for JBoss EAP Alpha. Red Hat releases alphas and betas early, but it's fairly logical that it doesn't support them. Liberty Beta is therefor a competitor to WildFly, while the final version of Liberty will be a competitor to JBoss EAP. I don't think there's really any direct competition for WebSphere, other than that it also implements the Java EE specifications. WebSphere is just a different kind of product. Whatever it is that's in those 2.2GB that IBM thinks need to be installed are things that are surely not in JBoss, nor in Liberty. So if there are indeed people that use something (dare I say all?) of those 2.2GB, then it's clear JBoss is not an option to them. And full Java EE profile is now the practical difference between WebSphere and Liberty, but the difference between full profile and web profile in Java EE are a few small jars. For most of them you can easily calculate the size; it's a few dozen MB at most. Very few servers create their own implementations of Java EE spec components, but instead just choose from a number of open source implementations (the historical specs Servlet and EJB are an exception to this rule). So those extra ~2.1GB that WebSphere caries along is almost certainly not because it supports the full EE profile, but because of... something else. 
&gt; You do know that when looking at just the software (not the support contract), that the only difference is that WildFly is an alpha/beta version of JBoss EAP? The difference between the last WildFly version in a given branch and the first JBoss EAP version branched from that is 0.1% or so, and nearly completely consists out of bug fixes and the occasional removal of a feature that was deemed not stable enough. Wildfly tends to have a lot of "current" features that EAP doesn't, as a result the primary reason I'd switch to EAP is support. &gt; What you're actually saying is that you're fine running production on beta software. You could say this of most open source projects, I suppose. Really, the big difference continues to be commercial support, and 99% of the time I'm more than capable and comfortable with submitting a bug on the tracker with products that I use, maybe put out a bounty on the issue if I need a quicker resolution. &gt; Oh, and the license of WildFly and JBoss EAP is exactly the same. It's the GPL. Yes, I'm aware. And if I cared enough I could build EAP from source, but the whole point is commercial support which makes it rather silly for me to do so.
Utility classes are like a Java equivalent to modules in a functional programming language, using a class as a glorified namespace. Utility classes have nothing to do with being functional or imperative. Also, I can never be on board with the idea that all the awesome utilities provided by Apache Commons are an anti-pattern.
Not to mention he complains about Spring being XML based.. It has had Java based configuration for a while now.
I always find that when I change jobs, I have to plan for some failing interviews as "warm-up" and getting back into practice. Also, there's an old rule of thumb that you should plan for 1 month of jobsearch per $10k of yearly salary, which isn't quite that bad as a developer.
Can I cheat the rule job hunt for 2-4 months and make $100k?
As sad as it sounds, I'm going to have to agree here. With that type of discrepancy your company may see giving you a something like 25% raise as an amazing act of generosity on their part. From your perspective, that 25% bump, is still 25K under what you could be making. I honestly think you'd be better off negotiating a new salary at a new company, rather than try to get them to up you to the market average. 
When I have a chance, I will abandon JEE stack. Spring boot is The Chance. Why for the hell you need a Wildfly if you have spring boot?
Not too hard. You can start with the big city that is 2 hours away. Work 4 days from office initially, then bring it down to 2 days in a week from office, or even 1. As far as salary is concerned, your only way to get a big increase is to put in a resignation letter as part of your negotiations. Let them know you are open to negotiate, iff you don't mind working here. 
The video is definitely a good starting point. You can find [here](http://spring.io/blog/2015/01/12/spring-and-angular-js-a-secure-single-page-application) another tutorial that I used before starting my project. I hope it helps
All you have so far is a readme and it doesn't exactly explain the project. What is it?
That! http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-annotation-config
/r/cscareerquestions is probably a better place to ask that question.
That sounds crazy - there is a huge amount of demand for developers and I couldn't see anyone decent being on the market for 10 months or even 3-4. Personally, the 2 times I've looked (I'm usually self employed) I've had several competitive offers within a few days and the one time I decided to take a job held out to a month to find exactly what I wanted.
Its realistically possible, its called constructor injection and good design. Though it is much easier in a language like groovy where you have default arguments.
I've just finished migration of a huge legacy application stack from JBoss 4 to WildFly 8. And for new project I will never ever go to JEE side. Spring boot offers you a possibility to isolate different applications or services in small self-sufficient containers. So you can upgrade some parts of your application stack _gradually_. And only this is a huge advantage already. My _personal_ believe that in modern development you have so many nice alternatives to JEE, that it's just a sin to not use them: spring boot, netflix oss, hazelcast and etc. That's where you can do _magic_ in a couple of lines of code.
Glad to hear that MVC will be based on JAX-RS! I hope the standards committee looks closely into Jersey's MVC extension, which is solid. (yes, I know JSF is an MVC framework, too)
If you're implementing microservices, I agree. But, if you're fully leveraging core JavaEE APIs like JTA, configuring all the parts to work correctly might be more trouble than its worth. It's a trade off. And let's be clear here, you're not abandoning JavaEE even if you use Spring Boot. JPA, after all, is a part of the JavaEE spec, and Hibernate is heavily invested in JavaEE. It isn't us against them. We're all in this together.
i'd say you need to re-read the parent comment.
Just a note: It's a specification (JSR), not a framework.
&gt; The problem that I have with it is that, at least in Java, the main frameworks for doing it, being Guice and Spring, can sometimes be as bad as the problem DI tries to solve. *yawn* CDI
&gt; held out to a month to find exactly what I wanted I don't consider companies that work their employees over 40 hours a week competitive at all. It can take several months to find one locally that is looking and wants you because they tend to do a better job at retaining current employees.
&gt;Issued by: Untrusted Bitdefender CA
You must never have worked in a large corporation. Let me try to fill you in on how something like this works. Someone in charge of monitoring the site alerted his/her manager that they would need a new certificate. The manager asked that person to put together a plan to replace the cert. This very simple plan was then sent to a project manager. The PM then brought in additional resources to plan out what needed to be done. Weekly status calls were scheduled. After 3 weeks it was determined that the person who actually can purchase a new cert needed to be brought into the status calls. That person missed the first meeting due to a conflict. Finally after 5 weeks the person who first alerted everyone to the fact that a new cert was needed got to talk to the person who could purchase a new cert on the status call. They talked about what needed to be done on the phone and agreed that the requirements for the cert would be sent in an email. The original person sent the email to the purchaser, but unfortunately the purchaser doesn't know anything about TLS, so they ordered the cert incorrectly. The original person went home and drank heavily. This really isn't stretching it very much. I deal with this kind of thing all the time.
Totally agree. The only way to get an adjustment like that is to get a new job. Sometimes you can show an offer from another company and use it as leverage. If you're really valuable they won't want you to leave and will agree to your terms. You need to be ready to walk in that situation though. If they don't agree you can't stay there and need to take the new job.
Get a new job offer. Even if its in a different city. Always be willing to leave your job. If you have a new job offer, it is up to them to meet it.
If you were to use SWTSwing http://swtswing.sourceforge.net/main/index.html would it be possible to run Eclipse without any native binaries, and therefore anywhere that Java runs? But I think SWTSwing looks a bit dated, possibly unmaintained. See also: http://eos.sourceforge.net/ 
Look, these people are paying you on the cheap so self-teach yourself on the job: So you have five months. That is a lot of time to learn: If you want to stay in front end/web dev: - node.js and javascript skills - various single-page-web-app frameworks - Hibernate and services integration - Vert.x may be getting hot too. - Spring spring spring If you want to do backend: - more services through the wazoo (a SOAP framework, a REST framework) - Postgresql devops - Chef or similar devops - Docker and associated "cloud OS" stuff that manages docker grids - nosql dev and devops (cassandra / mongo / hbase) - more about spring - hadoop / spark / storm: one of the streaming or map reduce frameworks.
Thanks, I now know where to post my future need for help. 
[Whoosh](http://i.imgur.com/fMTvqDI.gif)
I was with you till the last sentence. Self imagery is something to argue about. When removing ego from the equation, many developers are good at looking at the mirror / their code and rate them among other coworkers. It's about maturity more then anything. What i'm saying is that you can argue that you're not as good looking, smart, handsome, rich, X, Y, Z as you think you are. That sentence is just wrong.
Exactly what I wanted was almost double market rate working with people I knew personally. Several of the earlier offers didn't expect 40 hours per week. You lose a lot of options by not wanting to work more (which is a good choice imo), but still 3-4 months sounds like a lot. In any area, there is also a ton of demand for remote developers if you're okay with working from home.
Might be better to get another offer first. Don't threaten to quit unless you are actually prepared to do so.
I had good luck just printing out a screenshot from salary.com, showing the bell curve of what engineers with my title, experience and education make in my zip code. Don't use judgemental language, like should or deserve or whatever, just state the facts, your pay is in the bottom 10th percentile. State your case and leave. Big companies are used to this and you'll soon find they have a procedure to follow, they'll probably say yes if you ask at the right time of the year. That said, they do have you by the balls if they're the only game in town. Engineers don't like to haggle, they'd much more likely change employers to get a pay bump. The good news for your employer is that you don't want to do that. Big companies also see developers as a cost center. The closer you get to the cash flow, the more you get paid, so the sales guys make all the big paychecks. But then the job is so boring and safe you look for stuff to get bent out of shape about, like your salary. Try to enjoy yourself and not take it too seriously.
Pardon my noob question, but what would be a scenario where I could need python in JVM? 
The worst that can happen.... That's a big issue. Failing a topic. A lot of consequences there.
What you're saying is that bad managers giving false titles makes the average developer feels more than average to which I can agree. But let's get real, if you aren't up to standard at your own company, they'll fire you, not give you a raise. So making the assumption you are a above average developer based on title's is wrong. You do however, can make those assumptions if &gt;50% of your team is approaching you for coding advice, asking you for help debugging bugs they did not found on their own and learning from the process. This does not mean you are top developer in the world, it just means you'r skills are good in respect of the team you're working with. Alas, saying you're not as smart is false argument. maybe you are a better developer in respect to your team maybe you're not. Easy to find out. My point is that many developers knows that, you say they don't. I disagree.
Downvoted this because it does not belong in /r/java, and as someone else mentioned, would be well suited in /r/cscarreerquestions. I'll have to agree with everyone else here - you are very underpaid. I am working my first job (in Chicago), and making $75k as a Java developer. Obviously it depends on the city you live in, but sounds like $55k is waaaay too low. I think $95k is a bit high unless you are talking about California, New York, or Seattle. Outside of those 3 places, $95k seems a bit unrealistic, and I would say $85k should be your goal (but you could get more).
http://i.imgur.com/a4uo7WF.gifv
I went to a school that I would say is no more than top 50 in the country for CS, and most of my classmates are getting $70k or more on their first job. OP can easily find a job that pays more. Everything else is irrelevant. 
&gt; All the new web development I see is using client-side JS frameworks such as Angular, Ember or React (served from a Node.js server)...with a REST backend (and that is where Java EE / JAX-RS come into play). All? You are definitely seeing different things than I am. While client-side MVC is the hot topic of the day, enterprise shops are still coding existing and new apps using more traditional techniques. I just worked with a group that rejected Angular due to the uncertainty about the next version's upward compatibility. I for one am glad to see this as an emerging JEE standard. I really like Spring, but having a standard stack is helpful, too.
I agree, but if this is what you are passionate about, if you want to complete this degree, come hell or high water, failing the class is a learning experience. I would equate this to getting fired as a life experience. It sucks. It's on the bottom of the list of what you want to happen in a career. But, should you be fired and give up? No, you just learned something. And wise men have said to me that if you aren't fired at least once in your life, you aren't doing a good enough job.
I assure you this is not the case. These flavor of the months are very popular from blogs but most web applications are not all Client side SPA applications.
All I took away from that site before I left it, was that I hate it. Who the fuck puts their actual content in a tiny frame that's as big as the "related tutorials" section.
Why is it stupid to overload `equals`?
It is very popular in blogs but most Jobs I see that pay well are looking for people who build web applications that are heavy into forms and database processing. I do not think many enterprise applications are using or plan to use the tech you are suggesting. It would be a non starter for any of the clients I have had.
Problem is that these are very slow to evolve. The client-side JS space is evolving incredibly rapidly, though. I hear from a lot of our UI guys that React.js is a true revolution in web development.
If I read the excel correctly, while Java remains second for at least 3 years, it's starting to lose popoularity. Wonder what that means for the next 3-5 years
I wasn't suggesting package up that code. I'm saying you need nothing to do DI except for plain jane java and constructors. Any dependencies needed for a service or dao can be passed through that constructor. You don't need spring or guice or pico or a home rolled one. It takes a little more brain power because things like god classes become unwieldy compared to spring autowiring it but then again god classes are bad.
The market is super strong for developers right now. I managed to double my salary in 4 years by switching employers twice. If they're not paying what your worth then get an offer and use it as leverage. Leave if they don't want to match it.
I guess it is ;) But is sure is a step up from the old: 1. There is no free 2. Everything is paid 3. And not just paid, there's an obligatory support contract 4. The support contract is a million per year, easily 5. You cannot even see the software before you have paid :P
Site is genuinely a crime against humanity.
If you need the JVM's deep monitoring capabilities (JMX, VisualVM), almost-no-overhead production profiling (with Java Flight Recorder), or if you need access to Java libraries.
I disagree. I think your point is based on the OP really *wanting* to stay in his current position and lamenting the fact he'd have to leave. Maybe I misread his post, but that is not the tone I took from that. I agree though, that if one really wants to stay, it would be wise to try and work the system from the inside. As far as anecdotes go, everyone single of my jumps in salary came from moving jobs. In at least two cases, the companies HR department knew the market value and offered me *more* than I was asking for. When you factor in the cost to replace an employee, a couple of extra grand to bump the person up to the market value can save you more than that down the road. As an exercise in thought though, here are some soft reasons that support him leaving. 1. It's his first programming job. I cannot emphasize how important it is to experience other development environments/cultures. Seeing the different approaches other groups take is invaluable..imho 2. 4-5 person team. The size isn't inherently bad, but I think everyone should work as part of a large team at least once. Those larger "enterprisey" jobs tend to have more established processes, and just the sheer number of other developers almost guarantees you'll be exposed to other viewpoints. Again, I feel it to be a good thing. 3. If he has to resort to the "i have another job offer" tactic.... I once had a manager that explained why he never counter offered. (paraphrased of course) "99% of the time, the money is not the actual reason they're leaving. The increased salary is just a balm that temporarily assuages whatever ever the underlying issue is". His HR group simply might not make a counter offer 4.It's best to look for a job, while you have a job. If OP is thinking about moving, looking now would be a time to do so. just my .02
imo you could ask for a raise to 70k without feeling guilty. Don't bother with comparisons to the senior dev it won't get u what you want. As a jr dev that sounds about right.
But TomEE doesn't support Java EE 7 yet, and also doesn't support JASPIC, which Liberty now does.
Came here to recommend codingbat. Also, check out /r/dailyprogrammer, /r/programmingprompts, [project euler](https://projecteuler.net/) If you have questions with Java code, address them to /r/javahelp 
No, there isn't. None at all. Also this question has never been answered before, at any point in time. Not here nor in any of the "learn programming" subreddits linked in the sidebar. Or in any FAQs. Sorry. ^ps: ^you ^created ^an ^account ^just ^to ^ask ^this?
Here's what you do to learn Java or any programming language: forget about the online websites or tutorials. The tried and true way to learn is to *write code*. Here's a better question to ask: what's a good project I can do (as a beginner/to learn an API/etc)? If you can't think of something yourself, ask! For example, if you asked me, what kind of project could I do to really improve my skills with network programming, I would suggest write an IRC client. There is very [good documentation](https://tools.ietf.org/html/rfc2812#section-2.3.1) describing how the IRC protocol works. Let writing the IRC client be your goal, not learning Java. Try to figure it out for yourself. Read the documentation, and if you're stumped, ask a question in /r/javahelp. But let me stress *try to figure it out for yourself* first. Share what you learned when you ask your question. In fact, learn how to [ask a question the smart way](http://www.catb.org/esr/faqs/smart-questions.html) before you ask a question in an online forum. Better for you, better for us. I learned how to code before there were any tutorials online, and I consider myself better for it.
&gt; See what the platform did to the idea of checked exceptions. That would have been very cool if they had stuck to the original philosophy. Now checked exceptions are one of the ugliest warts in the Java language. Could you elaborate on that?
Right on i wanted to say the same. His statement cries arrogance elitism. There are good pragmatic reasons to shun orms, and you never never modify generated code, it most likely not human readable anyway. It would be better to go back to tbe cobol. Sounds like the op better pay attention, he migbt learn some things from this senior. Also pay is relative, better consider cost of living as well.
&gt; It's about mastering your craft, not about mastering your pay scale. What drivel. I know my skills are valuable, and I make sure I get *paid*. 
I would never tell them what you were making, tell them what you'd expect to make in the position you're hiring for (hopefully it's a reasonable salary based on market comps). Honestly, when you think about it, your current salary is none of their business, and honestly, it's immaterial. It would be the same thing as you asking them the maximum they're willing to pay for that position and expecting an honest answer. It's expensive to replace people, if you want to keep someone and grow them as an employee, the first step to keeping them happy is to pay them a fair wage on par with the duties they're performing. 
It is not Java convention to prefix member variables with "_". Then again, neither is it in C#. Also, the convention in C# is putting the "{" on its on line.
For me specifically importing projects at all was difficult, but dependent projects were impossible. It's not that surprising because ADT has been around a lot longer. 
 public class ArmouryTransportMechanism extends TransportMechanism&lt;Armoury, Weapon&gt; { @Override public Armoury getFactoryRoom() { return new Armoury(); } } Note the capitals in class names. Lower case first characters are used for object instances and method names: public E offLoadRobotParts(List&lt;U&gt; robotParts) { if (factoryRoom == null) { enterRoom(); } factoryRoom.setRobotParts(new ArrayList&lt;U&gt;(robotParts)); robotParts.clear(); return factoryRoom; } edit: for more http://www.oracle.com/technetwork/java/javase/documentation/codeconventions-135099.html#367 even more: http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html
You never know who you're replying to. Keep that in mind. Some of us ignored our pay scale if we had a good opportunity to build, to write and to improve. When the mastery came, so did the money. 
Sure. The point is, don't choose mastery *over* money. Demand both. 
You should be able to set up your common REST client implementation as a separate maven project, pull it down as a submodule, add it as a subproject and use shadow to roll it in to the final jar. 
Note to self: this was posted by "lahrach_tdi" 
thanks, going through the documentation now, that looks about right.
Been doing this for 20 years, and couldn't be happier. 
Here's my checklist: * Is there a commit comment referencing a ticket? * Is the code covered by passing tests? * Does the code not suck? Let's not overengineer process. We're professionsals. A reviewer should know what good code looks like and if not, that's a training/experience issue that a checklist isn't going to help much.
Could you tell us some more about your REST service? Is it a true RESTful web service following the *uniform interface* constraint and HATEOAS, or just RPC-over-HTTP? Where on the [Richardson Maturity Model](http://martinfowler.com/articles/richardsonMaturityModel.html) does it sit? The RESTful API that I work on uses JSON-HAL as its data-type, which seems to be emerging as the de facto standard for hypermedia RESTful web services, and there are [plenty of libraries](https://github.com/mikekelly/hal_specification/wiki/Libraries) for working with JSON-HAL. Given that you mentioned XSD I'm assuming you're working with XML, and if you're not able or willing to switch to JSON-HAL (as I'm not even sure there is a formal spec for XML-HAL yet; I guess not many people want it), and therefore can't make use of the existing libraries, your best option is probably to roll your own library which can be shared amongst your other projects.
There was a really good [essay on the subject](http://www.oracle.com/technetwork/articles/entarch/effective-exceptions-092345.html) by Sun which unfortunately lost its comments when it was transferred to the Oracle blog. To paraphrase, contingencies (checked exceptions) are expected and natural consequences of using the API. They do not represent a failure of the software or of the execution environment. Contrast these with actual failures (unchecked exceptions) that could arise due to problems related to the internal implementation details of the (software component). Or, to put it another way, checked exceptions are for failure modes of your business process; unchecked exceptions are for problems with the environment, the plumbing, or the code. If Sun had stuck to that philosophy, checked exceptions could have been a beautiful thing. If you take a look at the JDK, one of the most egregarious violators of that philosophy is `IOException`. Almost always `IOException` is a fault, and therefore it should have been an unchecked exception. But so many of the JDK methods declare checked exceptions for fault conditions. The defacto philosophy became "if I think this error is serious enough, the caller should be forced to deal with it". Speaking of the JDK, or any plumbing-related library or framework, I can't think of a single reason to have that code throw checked exceptions. It is not up to the plumbing to decide what to classify as a failure in the business process. Spring attempted to code database transaction management around this philosophy; I think there is room for argument on whether or not they succeeded. When you declare a transaction around one of your business methods, the default configuration is to rollback the transaction if your business method throws an unchecked exception, but it commits if your business method throws a checked exception. That is the proper way to do it. It should be pointed out that this philosophy may be in opposition to the principle of not using exceptions for flow control. But if you look at Spring's treatment, it really could have been something beautiful.
I actually think that an approach down your link is much better than any dependency injection framework (even dagger) and I personally use it for a long time.
I'd say it sits in the middle somewhere between true rest and rpc-over-http. Reading over RMM docs, it falls (well 90% of the services) into level 2. The goal is decouple some of our applications from having to include a lot of app-serverframeworky jars everywhere we want to run the apps. I'm not working with XML specifically (other than to allow the app to consume both JSON and XML). I mentioned the XSD, not as an important requirement, just that I was familiar with creating java objects when creating the client stubs from a wsdl. My real goal with the question was to figure out how to end up with a small client jar that we could include in our apps, that would refer to the service provider and stay in sync with the services that are exposed without requiring each consuming app to create the (admittedly simple) client call. I'm googling JSON-HAL...and not seeing a lot about it. A lot of references to the git repo, but that's about it. Any more info on it or it's adoption?
I like the way that there is 80 lines of content spread over 8 pages as well edit: Ah no even better each page is a scrollable frame which shows 10 lines of content and no scroll bars
Spring Roo is more of a lousy Rails scaffolding implementation approach. Spring Boot is in closer to Play. Developers take care of developing and designing, while Boot takes care of configuration. No more wasting time in xml jungle. 
In c# private variables are noted by having their names start with the underscore. There are multiple conventions for brace position. http://en.wikipedia.org/wiki/Indent_style
Im open to learning for sure! The reason that I say I do more is that I am designing and writing more applications and am also on 4 projects as opposed to his one. He is a core java only/tsql person. No ORM, no Spring, no hibernate, no frameworks except JSF (and very common java ones ...commons, log4j etc). Will not do anything with js and creates stored procs for all calls to the db. I am hungry for advancement for sure! Thats the only reason I'm asking for help on what I should look at doing. I appreciate the response! 
You can try providing something like [Swagger](http://swagger.io/), WADL, or WSDL (yes, it can do REST). I prefer Swagger if I need to provide a machine readable definition. You don't provide much information about the internal applications. If there is a prevailing client platform (Java) then it is common for you to provide a client library JAR.
C# doesn't force any style. You can write C# code just like Java code, but it would look weird and might provoke violence. Vertical alignment of braces and Pascal casing are cultural differences between C# developers and Java developers. But I think both the Java and C# cultures are united in their opposition to leading underscores. The official documentation, as seen in the Oracle and Microsoft code samples, drop the underscores. When I see underscores, it's like a relic from 1990s C++ written in ancient text editors.
Tutorial covering the steps to create, configure and test a MySQL JDBCProvider in IBM Integration Bus (IIB) middleware platform
Why are you trying to install an older version of Java?
This seems weirdly specific
Im going for CET and im in the same boat as u actually. I prefer system admin and network security which is focused more on hardware and using software. From what ive been told and looked up you will never be coding unless you go into some sort of developing. Learning to code is a bitch in college cuz it consumes alot of time and i barely have time for other classes when i need to work on a project. 
Just enter the command mqsicreateconfigurableservice IB9NODE -c JDBCProviders -o mysql_local_root -n connectionUrlFormat,connectionUrlFormatAttr1,connectionUrlFormatAttr2,connectionUrlFormatAttr3,connectionUrlFormatAttr4,connectionUrlFormatAttr5,databaseName,databaseSchemaNames,databaseType,databaseVersion,description,environmentParms,jarsURL,jdbcProviderXASupport,maxConnectionPoolSize,portNumber,securityIdentity,serverName,type4DatasourceClassName,type4DriverClassName -v "jdbc:mysql://[serverName]:[portNumber]/[databaseName]?user=[user]&amp;password=[password]&amp;database=[databaseName]","","","","","","sandbox","useProvidedSchemaNames","MYSQL","default_Database_Version","default_Description","default_none","C:\lib\mysql","false","0","3306","mysqlLocalRoot","localhost","com.mysql.jdbc.jdbc2.optional.MysqlDataSource","com.mysql.jdbc.Driver" I mean.. It's obvious.. 
Ironic that this is posted today, when a JDBC connection error caused me a lot of worries at work on Friday. 
Ah, that works now. Thanks!
Just looked at it quickly on my phone but every time you add a person you don't add anything to the number of people variable. Did you get to arrays in your class yet? If so it might be a good idea to add each person to an array. To get the number if people use the get array size method. Then to return the person object you just return the person at whatever position in the array the run class wants. (return personArray[pos] where pos is a parameter passed in) 
You never use setNumberOfPeople silly willy. 
Would be hard to believe he has learned classes before arrays lol. Arrays was first semester and we didn't get to classes until second or third semester for me. 
The thing is idk how to use it, it has to count the number of people by itself somehow. The only way I can get a number is by doing this: livingroom.setNumberOfPeople(1); but that's not the right way to complete the assignment :/
I'm sorry, I will do that next time! I've only had a few hours of coding lessons so far :)
I have no idea how to do that tbh, I am a complete noob at coding :P This homework is meant to be made in class next friday, but I figured everything out but how to do the getNumberOfPeople, so I thought I'd ask here :)
That's surprising that your learned classes before arrays but I'm guessing it's due to learning java as your first language (it's an object-oriented language) so that would be why. We learned python first year of college so arrays were way before classes. Interesting how different courses are taught. 
I think you're over thinking it. One solution could be adding a line to directly update the member variable called numberOfPeople, like so: public void setPersonInChair(Person PersonInChair) { // This will increment the value of numberOfPeople directly, it's the same as writing: //numberOfPeople=numberOfPeople + 1; // numberOfPeople+=1; //++numberOfPeople; numberOfPeople++; //Your old code this.personInChair = PersonInChair; } Remember you need to increment EACH time a person is added(In every setPerson method). Alternatively you can use your setter method that you made like so: public void setPersonInChair(Person PersonInChair) { //Calls the setter method and updates the member variable in there. setNumberOfPeople(numberOfPeople + 1); // Hopefully you can see how this is going to work. this.personInChair = PersonInChair; } I would typically use the 2nd way because once you get into some really complex classes and start to debug, if your'e directly updating member variables all over the place then it can be hard(REALLY HARD) to find the error, if you're ONLY updating members inside your setter methods then you ONLY need to check there for changes to those variables and make sure you're calling the setter at the right times. Also, just for the record, this post should be on /r/javahelp or /r/learnjava I'm not sure which is actually better but either one is better than this sub. Good luck my friend, I'm very surprised you haven't talked about arrays before talking about classes and constructors..
Indentation don't just make the others understand your code but it makes it also well structured in your brain and you will be less likely to make mistakes. My professor once told me that a structured code counts for 80% of the work. I hope that you will follw my advice.
Yeah I will. I can see that justpaste.it kind of messed it up though.. Do you know any good websites to post code on?
I do know BitBucket where you can post .java files. I also found these on Google : http://codebeautify.org/javaviewer http://courses.cs.washington.edu/courses/cse341/10au/indent.html Or just here on reddit : public static void main(String[] args) { System.out.println("Hello World !"); } BitBucket is for professional coders but it is relatively easy to use and learing how to use can be a big plus for you.
Congratulations for ignoring: + the **big red button** saying **"Seek Programming Help"** + the **big red banner** when **hovering** over the **"Submit Text"** Button, saying **"Please seek help with programming in /r/Javahelp"** + the **big red box** in the **sidebar** saying **"Please seek help with programming in /r/Javahelp"** + the **"?"** icon in the **blue "Related Sub-Reddits"** box in the **sidebar** with the text **"Java Help ← Seek help here"** **Post removed** - Wrong subreddit.
Sorry for that folks. I've got the scroll-bar removed for better readability.
See last 2-3 pages that has got some pdf checklist 
The below listed shortcuts using the listed keys help to perform various delete operations in Eclipse IDE. Ctrl + D - Deletes line CTRL + SHIFT + DEL - Delete until end of line CTRL + DEL - Delete next element CTRL + BACKSPACE - Delete previous element - See more at: http://www.j2eebrain.com/java-J2ee-eclipse-shortcuts.html
&gt; I mean.. It's obvious.. It's enterprise!
Well ... libGDX? slick2D?
The main commiter to slick2D engine has gone to libGDX afaik
Report back how it went, compared to Monogame :)
&gt; Answer by Michael O Church, functional programmer and machine learning engineer on Quora. No agenda here! /s &gt; Answer by Costya Perepelitsa, Software Developer / Distributed Systems Engineer, on Quora Gives java code examples that emit warnings. Now that the snark is out of the way. This article isn't really worth your time. Java best practice has evolved to be an unambiguous expression of operational truth of a system. Please do explore your dynamic functional type inferring languages on the weekend. Don't blame your intellectual curiosity on the terseness of a language that gets the job done and can be maintained by 2.1 MM semi skilled fresh graduates.
As someone that uses JBoss at work, others have quite well covered what it is. It's a application container for Java Platform, Enterprise Edition applications made by a company of the same name. Said company is a wholly-owned subsidiary of Red Hat. As of version 8, they've changed the name from JBoss Application Server to WildFly. When it comes to learning about the Java Platform, Enterprise Edition, JBoss has one major thing to recommend it: it is free and open source software, unlike WebLogic, WebSphere, the full version of Glassfish, or a number of other competing products popular in actual production use. (I should note here that there *are* free/open source alternatives other than JBoss Application Server/WildFly\*, such as TomEE, Geronimo, and the open source version of Glassfish. You could pick one of those.) In turn, if you want to work in Java professionally, it would do very well to learn the Java Platform, Enterprise Edition API. It's 95% of professional Java work, including the bits that allow you to make web applications in Java. It's a beastly spec, including bits about dependency injection (pretty much everything about `javax.ejb.*`, and `javax.enterprise.*`), concurrent processing (`javax.enterprise.concurrent`), load issues (`javax.resource`), web programming (`javax.faces`, `javax.websocket`, `javax.servlet`, `javax.el`), database interactions (`javax.persistence`, which is an ORM, and `javax.batch`, which allows you to include your batch processing in your Java server environment), and `javax.jms`, which is a beastly thing best avoided if you can (says perhaps the one person here that could tell you all about it, especially HornetQ, which is JBoss's implementation of that part of the spec). \*WildFly is the name that JBoss Application Server will use in the future. They're trying to make it so that not all of their products are called JBoss, and thus reduce market confusion.
This is the biggest problem I've faced is the abysmal documentation. Some of the library has very odd implementations. 
I've played with slick2d and libgdx and libgdx is amazing
&gt;In an object-oriented paradigm, we should instantiate and compose objects, thus letting them manage data when and how they desire. Instead of calling supplementary static functions, we should create objects that are capable of exposing the behaviour we are seeking: public class Max implements Number { private final int a; private final int b; public Max(int x, int y) { this.a = x; this.b = y; } @Override public int intValue() { return this.a &gt; this.b ? this.a : this.b; } } &gt;This procedural call: &gt;`int max = NumberUtils.max(10, 5);` &gt;Will become object-oriented: &gt;`int max = new Max(10, 5).intValue();` Holy shit this is some terrible advice. Instantiate an object every time you want to find the max of two numbers?
That might take a while, I need to finish programming PacMan in Monogame before I switch to LibGDX. I'll try though!
I've been using Flyway since the 1.X days and it is frankly indispensable. The only other well known DB migration framework I know of is Liquibase, but we ruled that out because it didn't (still doesn't?) support code migrations and back then it was more boilerplate.
Sure * [Jazelle](http://hackspire.unsads.com/wiki/index.php/Jazelle) on hackSpire wiki * [Wikipedia article](http://en.wikipedia.org/wiki/Jazelle) about ARM's Jazelle 
Skip it. Look at Dropwizard, spring boot etc and the like, or just rolll your own on a spring stack. Unless you absolutely have to use formal JEE for everything I would avoid it. 
No problem.
+1 to that ! 15years in the industry, not once written an ejb, and very proud of it actually :-)
I never cared about Forbes at all, and the only two articles I have dealt with so far - this one and a [critique](http://www.forbes.com/sites/insertcoin/2013/08/22/what-gone-home-could-do-better/) of the game [Gone Home](http://store.steampowered.com/app/232430/) - are just plain bad. &gt; I believe my total playtime was about 100 minutes, and that was with me exploring every inch of the house I possibly could, even multiple times. That's just the most blatant example of how full of shit the article is. [HowLongToBeat](http://howlongtobeat.com/game.php?id=4010) and my own experiences, which put a thorough run at 3h and a normal one at 2h, completely contradict that claim. Maybe Forbes is relying more on the sound of its name than on proper content. 
In case you believe that there is no Java on your system yet, but a Java installer says there is, try https://singularlabs.com/software/javara/ to clean out the system. I think it also has download features for the JRE and maybe JDK. (I prefer the JDK, but it doesn't have the browser plugin, which to me is a feature. The absence, I mean.)
I don't know the answer but I would warn against making an applet for any sort of serious public-facing website. Java applets have such an atrocious history of vulnerabilities that browsers now either throw up big scary warnings or outright refuse to load them. The only defensible use for them these days is legacy business applications and/or internal intranet systems.
As just about every result from searching for "java applet signing" will tell you - self-signing hasn't worked for years unless you make the user lower the security settings. You must use a purchased cert from a trusted CA to sign.
I would suggest to read some tutorials at https://jsf.zeef.com They cover setting everything up from the IDE (Eclipse) to a working application. If you're more into NetBeans, look on their site for JSF tutorials, they are very good as well.
Thank you. The K&amp;R bracket style is a personal choice. Applying underscores to member variables allows more flexibility when defining similar variables within methods held by the class, in my opinion.
I'm also a big fan of Spring Boot, but I don't know if you can simply start with it if you have no knowledge of the Spring framework.
Hello friends. Need suggestions to what content you guys would expect on my new blog - http://www.javaenterprisearchitect.com/
I've worked on large enterprise stuff. It was a much nicer app when we ripped enterprise out. Not worth the hassle.
Hey, I recognized your name from a blog post you did about Boot and Angular. 
I'm going to echo Spring Boot as well. It's very easy to get started, and lots of room for modification, but there is a steep learning curve when it comes to modifying some of the default settings. 
Adding another vote for spring boot
Hi Bharath, Really applaud your efforts here. You are right in saying that there is no place where we can find consolidated information. Questions I would be looking at * Path towards becoming a practicing s/w architect (I know its based on experience but is there any resource). * List down best literature available for this path. (optionally describe what you learnt). * How to practice and improve this skill (this is tough one I think). I would keep giving inputs as and when I think of. All the best for your blog.
Hi, thanks a lot for letting me know your expectations. I will surely address the three points you have mentioned in my posts in the next few days. I'll start with a brief overview and then continue to expand. I'll try my best to not write - it comes with experience :-) Thanks again. Please do check the site for updated contents once in a while. You can also leave comments on the site itself.
This looks interesting, although usually things with so much "magic" struggle if you diverge too far from the framework's ideology. Does anyone have experience of trying this out?
I feel like I'm famous now :D
Check dropwizard
I agree with this guy. Go Java EE's JSF with CDI, Bean Validation, OmniFaces and PrimeFaces imo.
Check JSF with OmniFaces and PrimeFaces!
Spring stacks that expose REST services. Do your user-interface in AngularJS (or similar), completely decouple it. Forget traditional server-side fat MVC stacks, its 10 years ago.
I'd second this. As much hate as JSF sometimes gets, I found it pretty easy to work with and fun to develop on. 
&gt;how to get started with Web apps in java? Don't Java Web apps require a vps to host which is not cheap. So it's not as cheap to experiment with different projects as it would be if you choose a language that is supported by a lot of shared hosting services
&gt; Java Web apps require a vps to host which is not cheap. What? Java Web app hosting has been completely free for a long time now! See e.g. OpenShift. Gets you 3 nodes with 512MB and JBoss EAP or JBoss WildFly, which is great for experimenting and even permanently running small apps. 
In my experience there are always problems with these free vps's. There was either a catch, performance wasn't good or it lacked something. There is also very little choice of some feature missing or didn't work or you didn't like the service, you have little options. I ended up on Amazon for 1 year free vps with OK specs for playing around but after a year I will have to find something else. End of the day I wish I did the site in another language it would have made things easier
It's available for Java as well since they both run on the JVM..
Ok, well what would be the best way for me to put my program on the web? Learn javascript?
As far as I know, practically any Java IDE has a GUI builder for Swing. Netbeans is really good, though.
What do you hate about it if it's fun and easy?
If you want to go the old school way then check out jsp and servlets. If you want a framework try JSF + Primefaces.
Which would you recommend to a beginner? 
Java EE is really useful and quite lightweight these days. It's great to just have things like bean validation, interceptors, events etc available and can assume it's just there. And it can be used embedded as well, see https://www.voxxed.com/blog/2015/02/building-restful-java-ee-microservices-with-payara-embedded
Don't forget about the new Date/Time API in Java 8! Maybe 5th time is the charm?
Spark
My colleague uses VI (not even VIM or something else that can differentiate between Java and plain text), I use Eclipse, but I don't frown upon Netbeans.
Indeed only those who are experts in a particular language and actively employed on, working, deployed code should criticize a programming language. Only those closest to something can criticize it; mommy rules. 
I've been programming in Java for over a decade. I've spent many years with Eclipse, and many with NetBeans. From time to time I try IntelliJ for Java (I use it with Cursive for Clojure) but always come back to NetBeans. IntelliJ is arguably more powerful, but NetBeans is just so intuitive and pretty. You don't even have to learn how to use it -- you just use it. Also, its Gradle support is currently superior to IntelliJ's.
Watch or read lots of tutorials and try the presented code yourself. Then try variations starting from the code base you have. Try to understand everything, experiment. Also, don't think in terms of "how many variables I need" but in terms of what it is you want to accomplish. As in all activities, persistence is key. Nothing will go right from the first try but keep at it and you will have a lot of eureka moments as time passes by. Start with small, unambitious projects and go from there. As long as you don't give up you'll be fine.
In the first year for my CS Software Engineering course, we made a GUI by hand just so we'd have an idea of how swing works. After that It tended to be using a GUI builder. I tend to write GUIs with simple layouts by hand, and for more complex ones I use Eclipse because the the GUI builder is better than Netbeans. That said, you could try to learn JavaFX as well. I'm still pretty dependent on swing because my course never even touched JavaFX
NetBeans and IntelliJ are both excellent Java IDEs. No no one frowns upon NetBeans.
All you really need is a class with "public static void main(String[] args) {}" Anything beyond that is specific to the problem you want to solve.
If you're going to focus on basic stuff, I think having 'lessons learned' would be very useful. I also think that it would be useful to go into the history of the feature (eg. was it there from the beginning, was it added later, did it change...) But just a side note, 'basic' stuff can be misleading. For example, you can easily to a nice and neat little tutorial on the 'static' keyword, but it would be lacking if you didn't include at least a sidenote on how marking a variable with this changes its garbage collection or how it behaves in a synchronized block etc. Some 'basic' topics can go surprisingly deep in.
Ah thanks that cleared a few things up I never thought of looking at tutorials thanks :) 
If I was forced to use java, I would use dropwizard (http://dropwizard.io/). Thankfully I try to stay in Scala land as much as I can.. but even a lightweight JEE is not where I would put my career.. but hey, everyone has to choose their own path.
There are different schools of thought, so that's really difficult to answer. Some say, start with the low-level stuff, and work your way up. Others say, start with the high-level stuff and work your way down. Both can be easier and more difficult. The low-level stuff can be easier because it's smaller and easier to have an overview of what's there, but it's also more difficult to do anything substantial in. Compare it with languages. Some say you should start with programming using assembly, as it's a really small a simple thing. But in assembly it's hard to actually do anything more than just move some numbers along. Actually doing anything high-level, like say print a text on screen, can be difficult. Other say, start with Java, since you can easily achieve an effect like that text on a screen, or a web page etc (try doing that in assembly).
Almost without an exception those people have never used JSF or Java EE and are just parroting what they heard others saying, or they used JSF 1.1 in 2004 (which wasn't that good) and can't for the life of them imagine that software can be updated and get radically better.
&gt;a little less enterprisy you can go for Wicket, Wicket is nice, but surprisingly close to JSF. So if you think JSF is enterprisy and Wicket is not, you may want to think again. &gt;Vaadin Maybe interesting to remark that Vaadin is pretty much what haters of JSF accuse JSF of: a deep abstraction on top of more bare web technologies. I'm not saying here whether this is good or bad, but fact is that JSF (for better or worse) is rather close to the web with pages, explicit hyperlinks with GET requests and parameters, html pages, with an html tag, body tag, etc, while Vaadin much more tries to create the illusion of being a kind of Swing for the web. &gt;I would recommend Grails, because it is extremely simple and fun to work with. Maybe so, but Grails is also one of the slowest frameworks out there and it's future is a bit shakey after its main supporter Pivotal dropped it. 
Reading between the lines, one notices a lack of mention for Eclipse &gt;:D
Seconding Spark. [Really easy to get started](http://sparkjava.com/documentation.html). And you can use velocity/freemarker templates for rendering html.
Use whatever makes you happy. You should definitely try the big 3: Eclipse, Idea and Netbeans. But there are other alternatives as well. In the end it's not that important which one you use as long as you learn to use it properly. Modern IDEs are very powerful and will save you a lot of work if you know how to use them. And 99% of GUI-designers suck because they generate unmaintainable garbage code.
A long time ago netbeans(I think it was version 3) was terrible and I hated it with a passion. These days it is just fine... but you may find some residual dislike for it based on that.
Yes, have an HTML+CSS+JS frontend with a Java backend
Yes, spark! http://sparkjava.com/
Found this www.g00glen00b.be don't know if it is op
Probably the pre JSF 2 crowd. Ignore them.
Yeah, I just roundly ignore them, and get stuff done. Even JSF 1.2 wasn't all that bad. 2 is a huge improvement, but people will always love to talk out their ass. Especially about EJB and JSF. 
Because that's absolutely not what OP is asking about.
you're blowing it out of proportion. use what you like and stick with it. i've been a developer since the early 90's, and at no point in my career has any employer given two shits about what IDE tools you use, as long as you get the job done. NetBeans, eclipse, IntelliJ, emacs, or VIM. doesn't matter. they all have merit. try them all and go with the one you like best. 
I learned python first, then transitioned to java because I wanted to mod minecraft. I now have several years experience with java just programming on my own and for school. As for html, css, and javascript, I know it when I see it but am otherwise not terribly familiar. So I'd say high for Java and low for everything else.
The company I work for uses Netbeans. It's not my preferred IDE, I'll take IntelliJ at home any day and Android-Studio for Android development, but I'm pretty comfortable using Netbeans day to day. We use it because it integrates well with our build system (Maven) and our GUIs have been historically built with the Netbeans GUI builder (which can be a pain sometimes but beats coding them by hand any day). 
JSF + PrimeFaces + OmniFaces. No questions, the best ;)
Just like those that say bad things about Spring.
From the horse's mouth: * [Java SE 7 Features and Enhancements](http://www.oracle.com/technetwork/java/javase/jdk7-relnotes-418459.html) * [What's New in JDK 8](http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html) invokedynamic is worth some research too.
If you are trying to get ready for college, spend more time concerned about learning the language features as best you can, and only learn as much as the ide as you absolutely have to have. Personally, when learning, I like doing thing the hard way first, which means writing all the code yourself until you really know it. Then use the IDE features to block out the mundane parts later. The essessense is, make sure you understand all the code you are writing, and purposely do it wrong from time to time just to see what the error looks like.
&gt; Still better than coding GUIs by hand Definitely disagree there. Once I wired my brain to think in terms of GridBagLayout, I can far more easily build a GUI by hand than I can using a GUI builder. YMMV.
Netbeans is great. Count me in the list of developers who use it all day, everyday, professionally (ie not a school lad anymore). I have used them all; intellij, eclipse, and netbeans, I keep coming back to netbeans for one reason or another. You will find though that other languages (or frameworks) work better in different IDE's, some, like scala, are pretty much forcing you to one IDE (intellij) since there is no real working support from the other two for that (last I checked). I don't use the Netbeans GUI builder because I find it pales in comparison to JFormDesigner (which you need to pay for), but JFormDesigner can be downloaded as a plugin for netbeans which integrates just as seamlessly as the native GUI builder. Also; while it's true Swing probably won't get new features, it will be alive and useful for years to come yet. The replacement for Swing is on the way (javafx), but is horribly immature at this point. I won't touch javafx for a long while though I've been trying it out since 1.0 I wouldn't worry about only being able to create GUI code with a builder. I love swing, but I could never create a full application from scratch without a builder. Nor would I ever hire anyone who insisted on writing that code manually instead of using a builder, it's simply a waste of time. The builder saves so much time and frustration, and there is very little that can go wrong with a great builder like JFormDesigner (or even the native one in NB). You may need to dive down eventually into writing custom table cell renderers or custom components and the like, but if you need those kind of advanced features then gui builders won't help you much there anyway. In short; enjoy Netbeans, it's one of the three great IDEs available for java! 
Normally it doesn't matter. I love Netbeans and proudly use it for C/C++, PHP, Java, and HTML5/JS apps of all shapes and sizes. That being said, it was part of my interviewer anti-circle for a job I really wanted and an interview I otherwise nailed. I have since kept a copy of Eclipse around just so I could say I have an understanding of it. Edit: More to answer OP's question: As long as you're programming and constantly expanding upon your knowledge, Netbeans isn't going to hurt your ability to learn more and write great code
You just need to turn on the syntax highlighting in vi if that's what you mean. Both vi and vim kinda suck if you don't configure it. A lot of things suck if you don't spend the time to customize it to your liking.
I find Python better for smaller pet projects, using a web framework like Flask. If you are set on Java then you need to look up Java web frameworks, luckily there was a good thread about it today with heaps of different options and comments: http://www.reddit.com/r/java/comments/2wuqoq/how_to_get_started_with_webapps_in_java/ For HTML5+CSS+JS I would suggest somewhere like http://www.html5rocks.com or http://tutsplus.com and search for beginner's tutorials. HTML and CSS are very straightforward, JS is the difficult bit of the three but if you're confident with Java it shouldn't be too tough there are just some quirks to remember.
/r/ProgrammerHumor 
Very cool. I just wish I hadn't chosen ICEfaces 5 years ago when we started development for our main app!
Look at Sun\^HOracle's Java tutorial and think carefully what you can add. The Java Tutorial is too often overlooked. There's room for complementary material, though...
Looks like python with a weird column at the end.
There is a case for standardised IDEs in certain situations though. We work primarily using VMs, which are used as disposable (i.e. if you fuck it up just trash it and grab another from the shared drive) which comes with installs of the servers, tools etc. we need. Also working on SOA Suite kind or demands you use JDeveloper (yes I know there are plugins for Eclipse et al but that's what those on high have dictated). So from our point of view dictating an IDE makes sense, and I actually change IDE from project to project. Not saying you're wrong but there is a case for standardising.
That's an awful way to lay out C-like code. Did you do it just to highlight the number of brackets?
Hmm very handy book that, thanks 
My group has adopted Play a couple of months ago as we take on more web projects. We are using Java for the controllers and model, and everyone likes it a lot.
Totally gridbag : http://youtu.be/UuLaxbFKAcc
That was relevant to my interests.
The ones on line 3 and 4 aren't even necessary.
Yep. Just start with the maven Spring Boot archetype. Better to start with something that works and break it than start with something broken and no idea how to make it work.
They're called braces.
While Cliff Click is clearly the architect behind C2 (HotSpot's optimizing JIT compiler) and he probably touched most parts of HotSpot while working at Sun, making him *the* architect of HotSpot is a bit much. I think that if i was looking for the architects of HotSpot, i'd rather look in the direction of Lars Bak and Urs Hölzle (and probably some others i'm forgetting).
Fixed.
Psh, amateur. I cooked up the following in about 10 minutes from memory after not having done Swing development in almost 10 years. Still got GridBagLayout on the brain. JPanel p = new JPanel(); p.setLayout(new GridBagLayout()); GridBagContstraints c = new GridBagConstraints(); c.gridy = 0; c.gridx = 0; c.weightx = 0; c.anchor = GridBagContstraints.EAST; c.fill = GridBagConstraints.NONE; c.insets.right = 4; p.add(new JLabel("Name:"), c); c.insets.right = 0; c.gridx++; c.weightx = 1.0; c.fill = GridBagConstraints.HORIZONTAL; c.anchor = GridBagContstraints.WEST; p.add(new JTextField(), c); c.gridy++; c.gridx = 0; c.weightx = 0; c.anchor = GridBagContstraints.EAST; c.fill = GridBagConstraints.NONE; c.insets.right = 4; p.add(new JLabel("Age:"), c); c.insets.right = 0; c.gridx++; c.anchor = GridBagContstraints.WEST; p.add(new JTextField(4), c); c.gridy++; c.gridx = 0; c.weightx = 0; c.anchor = GridBagContstraints.EAST; c.fill = GridBagConstraints.NONE; c.insets.right = 4; p.add(new JLabel("Fav Color:"), c); c.insets.right = 0; c.gridx++; c.anchor = GridBagContstraints.WEST; p.add(new JComboBox(new String[] { "Red", "Green", "Blue" }), c); JPanel buttons = new JPanel(); c.gridy++; c.gridx = 0; c.weightx = 1.0; c.fill = GridBagConstraints.NONE; c.anchor = GridBagConstraints.EAST; c.insets.top = 7; c.gridwidth = 2; p.add(buttons, c); buttons.setLayout(new GridLayout(1, 0, 4, 0)); buttons.add(new JButton("OK")); buttons.add(new JButton("Cancel"));
braces (UK and US), flower brackets (India), French brackets, curly brackets, definite brackets, swirly brackets, curly braces, birdie brackets, Scottish brackets, squirrelly brackets, gullwings, seagulls, squiggly brackets, twirly brackets, Tuborg brackets (DK), accolades (NL), pointy brackets, or fancy brackets [Source](https://en.wikipedia.org/wiki/Bracket#Names_for_various_bracket_symbols)
+1 here as well. jee can pay the bills as a door into the Java space, but the most interesting jvm jobs tend to not use it.
Pro Tip: xor swap and save the variable. x ^= y; y ^=x; x ^= y; Boom! now everyone will complain / debate whether it's less legible rendering it not effective, but deep in your heart you'll know.......it was. 
Oops. Accidentally used spaces instead of tabs. Have fun.
I actually think that is pretty clever. It makes the actual code cleaner to read, and makes it easier to see where you missed a semi-colon of didn't close a block.
Yeah the original post (as far as I know) said that a Python programmer was trying out Java. http://www.reddit.com/r/ProgrammerHumor/comments/2wrxyt/a_python_programmer_attempting_java/
If you're seriously suggesting hosting your projects publicly on your own machine then I don't know what to reply to you to be honest 
I've never seen anyone use netbeans professionally. Everyone uses IntelliJ or eclipse or vim. That's just my experience though. I've only worked for two companies. 
Where would you find a machine with that many cores? A cluster?
They used to [make them](http://www.azulsystems.com/products/vega/specs).
 rekt
This is true. We had a developer who used Eclipse. Aside from his irritating evangelism about how much better Eclipse was than IntelliJ, nobody cared that he was using Eclipse (even though the rest of us all use IntelliJ). With that said, our code-style was distributed as an IntelliJ settings file that could be imported, so it is convenient to be on IntelliJ, as well as the support you get from various coworkers if you need help with something IDE-related.
Use Vaadin. Straightforward webapp construction with a java backend and autogenerated CSS and JS. As simple as initializing a maven repo and porting your project
/shakesfist I can't even...argh!
suddenly everything makes sense. 
I agree, though the same goal could be achieved by changing your syntax highlighter's color scheme to fade out the braces and semi-colons. [Screenshot of my IDE](http://i.imgur.com/DA9me0X.png)
No, don't! It is a terrible, confusing, slow and overhyped IDE. There, I said it...
We have a similar problem and it was solved by distributing the style file in eclipse format and installing the eclipse formatter plugin in intellij. But of course you're right that it makes things easier if everybody uses the same thing (whatever it is).
You can apply PEP08 to Java too
Autoindent is your best friend
No thanks!
Not disagreeing with your main point, I wouldn't do the xor swap here either. But let's be honest, his method would also be three ops, not 96. Almost all CPUs have dedicated hardware to do XORs on entire words. There's no way that each bit gets XOR'd individually with any reasonable compiler/JVM implementation. The reason that the XOR method is shower on most modern (read heavily pipelined) architecture is that the strategy creates dependencies which can cause some stalls in the pipeline, decreasing instruction level parallelism
I believe netbeans is superior to eclipse because it doesn't hide complexity from the user like intellij and eclipse do. We use it professionally at our company and simply eclipse feels like a toy when dealing with gradle.
NetBeans used to be very bad back in 2012. Pretry much all plugins were outdated and support was low. Now I guess with the aid of Oracle things aren't so bad at the moment. Though, you are definitly better to use better NetBeans than DrJava, no doubt about it.
Thanks. Something new to add to the absolutely do not do this section of my team coding guidelines.
I like Netbeans' profiler
In programming they're called braces, because it's important that we have unambiguous names ("You need brackets there." "Which kind?"). Non-English speakers might well argue with that, but seeing as OP was speaking English, I don't see how my giving him the correct UK &amp; US word, as well as the accepted term in programming, was in any way inappropriate. (Unless the other commenter is right and Brackets is the name of his text editor.)
I'm going to steal this so hard
It was posted there not long ago.
Well, my colleague doesn't use highlighting. I would find it pretty annoying to discover typos during compile time when I've already exited out of the file (you know, working in terminal), but my colleague assumes he gets everything right on the first try. This is usually not the case.
Not sure about now, but few years ago the generated parts of code in Netbeans were highly customizeable. Still it would require quite a bit of time to set it up the first time.
Yes, but if you don't know the powers of the Spring framework, you don't know how to start either. If you don't know beans/autowiring, how to set up repositories, what controllers are, ... then Spring Boot won't be useful either. A typical Spring user who is switching over to Spring Boot recognizes all these parts and knows what configuration he had to do and he now doesn't have to do anymore (component scanning, entity manager setup, view resolving, ...). You still need a basic understanding of these concepts as well to understand the magic.
That side is called "the right side".
I sort of like it. Just visually it looks interesting. I would never use it, but I find it appealing for some reason.
And there are plugins like syntastic for that. Not providing syntax checking is a bit different than saying it treats every language as plaintext.
&gt;The JVM optimizes the swap algorithm shown in the op's code to just swap the pointers That's neat. Do you have any documentation about this?
I decided to make an armory app. for a popular mmorpg. I noticed they had a decent API but developers had only implemented systems that allowed users to view their own character stats. So I will make a system that enables them to view and compare their characters with other characters. browse the in game merchants. View all guilds information etc. Ill also add the ability to mail, set guild events, apply to join guilds and some other non api features.
To properly hate it, you must first try to edit it
your military left
Steal using an IDE?
FYI, the same bug in the same sorting algorithm appears [on Android and Python too](http://envisage-project.eu/proving-android-java-and-python-sorting-algorithm-is-broken-and-how-to-fix-it/).
I thought it didn't look too bad until you mentioned that!
I think it would be doable with proper editor support, some sort of plugin that allows you to edit the left side and the right side separately without influencing each other, and/or which autocompletes the right side automatically. But at this stage you might just want to switch to another language altogether.
But i wanted to do so too :/ Not really nerd humor but visualizations for some stuff. eg. Its bad to make every variable public because you completely expose yourself as a result. Would be like running around completely exposed/naked all the time (in real life) :P
To be honest it's been over a year since my last look and I don't remember it all off the top of my head. Some problems I had (testing it under linux); graphic artifacts appearing in the menus (definitely were not being displayed correctly), graphic updates / painting were kind of slow, and the major turn off (full stop) for me was the inability to turn off font anti-aliasing (which is a user accesibility problem, not a preference). Another problem which may just be my ignorance here since I didn't investigate this very much, but I don't believe there is any effort made for integration with native controls / themes. Swing at least has made a great attempt here with look and feels for Windows, OS X, and Linux (GTK).
I developed my app in Red Hat and didn't have any issues with graphical stuff other than needing to install Compiz to support transparency. Not sure about the anti-aliasing. As far as native look and feel, are the Swing options really that mature? Every Swing app I've ever seen uses that default silvery look and feel like Netbeans. JavaFX does not support native widgets like SWT as you allude to. There are members of the community working on themes for Windows Aero look and the OSX look. The stock theme (Modena) looks pretty good and would work reasonably enough for all OSs, IMHO. I actually prefer having total control. We gave our app a completely custom dark/charcoal/dashboard kind of look and feel. That said..I agree that native look and feel is important to many. Thanks for the reply. I've been mostly a back end or web app guy, so JavaFX is my only real experience with a desktop app. I often wonder how it compares to Swing and C++/QT.
Sorry for the late reply but thanks for the tip! I used javaFX and it did the trick much better than what I was originally supposed to use.
And for some reason they won't fix it properly.
I would imagine the difference between n=3 versus n=4 for such an algorithm would be mathematically verifiable and resorting to test case analysis irrelevant. Could someone explain why increasing the check to the last 4 was all that was needed? In the future with larger memory spaces will we need to again increase it to 5?
Very interesting, does anyone know if its planned to be be patched?
What about if you're a beginner? I have been reading Head First and Core, and they use Eclipse. But I'm thinking about taking a community college class bc getting a bit tired of just reading, and it uses Netbeans and Murach's programming.
Here is the bug report: [JDK-8072909](https://bugs.openjdk.java.net/browse/JDK-8072909)
One of my teachers in college did everything on the left side. It annoyed the hell out of me. 
https://en.wikipedia.org/wiki/Java_version_history
Huh, some extremely old versions of Minecraft will randomly crash with that stack trace and it has always been assumed to be a bug in the game. It would be ironic if 5 years later it turned out to be a bug in Java...
good point, I didn't realize the problems that would cause. I take back what I said.
Yup; especially in a language like Java where braces and semicolons don't have any significance beyond separation of statements. I had to fine-tune the operator color so that it doesn't make the normal operators invisible. (This is in Eclipse, btw).
Have you looked at python?
Yes, but this bug simply causes a crash, not wrong results.
But the OP has not proven that the only behavior of the bug is a crash. We *don't know* if the fix alters the results or not.
Doesn't matter. The contract for a sorting algorithm is one of the simplest in computer science. If it doesn't return a sorted list, it needs to be fixed.
Your going to have to post the classes that are throwing the exceptions. Actually, you are probably iterating through an ArrayList by checking if the integer you are incrementing is less than or equal to the ArrayList's size, but Java starts counting at 0 so you need to check if the integer is less then the ArrayList's size. Not less than or equal to.
&gt; changing your syntax highlighter's color scheme to fade out the braces and semi-colons
So this! I was very surprised! Also that means that the sorting only used Java 1.4 features xD TU Darmstadt by any chance? 
The thing is, I dont know much or barely anything about Java. Do you want me to post my Server.java and NPCHandler.java?
Swing on windows is great. Very hard to tell the difference unless you're looking or some custom component is not tested that well. OS X from what I can remember was also quite good, had no issues back then when I tested there last. GTK is OK, but can use help yet. Selected tree nodes don't behave as they should when painting the selection, menus are missing borders (depending on GTK theme), panels are not stretching when contained in a JMenuBar etc. Lots of little things, but pretty much all can be worked around without affecting the appearance of other LAF's. Netbeans works great with GTK! Just execute this (or put it in a shell script etc): /path/to/netbeans --laf com.sun.java.swing.plaf.gtk.GTKLookAndFeel Edit: Also, I'm particularly fussy when it comes to LookAndFeel. I really dislike apps that stick out from the rest (adobe reader as an example on windows), and java apps with the metal / ocean theme, and now of course javafx don't fit in. A well designed app should not look out of place, it should be seamlessly integrated with the rest of the apps I use on my workstation. All my opinion of course...
Post them to http://www.pastebin.com, please
Readable version: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0 at java.util.ArrayList.rangeCheck(Unknown Source) at java.util.ArrayList.set(Unknown Source) at server.model.customgames.CashBag.AddItem(CashBag.java:18) at server.model.items.ItemHandler.createGroundItem(ItemHandler.java:163) at server.model.npcs.NPCHandler.dropItems(NPCHandler.java:2489) at server.model.npcs.NPCHandler.process(NPCHandler.java:2118)at server.Server.main(Server.java:163) You are trying to add an item to an ArrayList, but instead you're setting an item of a specific index. Instead, you should replace "set" with "add". Set is only used when you know there is an item at that index, add will expand the list and append the item at the bottom.
Yeah post them. I should be able to find the issue.
Yes. How small the world can be.
Server.java = http://pastebin.com/c1PJ8EQH[1] NPChandler.java = http://pastebin.com/v2iDgLFc
server.java = http://pastebin.com/077c3eTY 
In all seriousness, whitespace having meaning for the sake of 3 characters and 1 line difference is kind of stupid. I personally don't find this any cleaner than if they are included according to oracle guidelines. And some editors just take the liberty of transparently translating tabs to spaces for you.
Cashbag.java: http://pastebin.com/UTNcWzx5
All modern app servers are lightweight and modular and start up fast so there's really no difference with glassfish/payara and wildfly. From the article...maybe here's you're answer &gt;Payara Embedded is a small footprint, light-weight library, that requires no installation or configuration.
Reread the article. I'm questioning the use case of the article's proposal. Wildfly and Glassfish aren't embedded. You start the server using the start scripts, which deploys and runs the app, which is in the WAR file. Payara embedded is started from the main class to run the app, which is in the WAR file. The reason Dropwizard embeds Jetty is to bundle the app and the app server in the same JAR file. Payara embedded apparently doesn't do that. So, I ask again, what is the use case of Payara embedded that isn't solved by Glassfish or Wildfly already?
read up on how bittorrent and its dht network works, it has some great ideas
I'd treat each customer as a specific branch of the code in my source repository. It will take some effort to get a proper branching strategy configured and adhered to by your team, but it will let you drag code around within the different branches in a controlled manner. Git or Mercurial should be just fine.
I don't know how hard it would be to retroactively so this, but the best solution would be to find a way to make the customizations "standard". Rather than just implementing literally what the customer asked for, find a cleaner, more universal solution. The only non-horrific alternative that I see would be some kind of runtime plugin discovery, but you're still fucked in the database. At the end of the day.... Customized installs are just going to be a bane to developers; you're going to get hurt somewhere by offering that service.
Have one source, control access to feature through database configuration and/or property files, and then have your build process accept arguments for which property file to copy over and use. Don't do a subfolder for each customer unless it's for specialized images/copy/resources. If you're actually turning over the code or deployments to the customer then you should consider a sort of DRM / license key system to control access to feature. The idea is that you always deliver all features every time, but you have killswitches on everything.
We have split our code base into several sub-modules, that either provide services or implementations of those. Each customer gets its own sub-module(s) with configuration and custom code that is integrated via spring at runtime (using the defined services). This is built using gradle. The customer modules are dependent on specific artifact versions of the core modules, so that we can have stable versions in one git repo. Edit: regarding the extension of the core code: this should be possible using spring either by providing extension points or by overriding the default service implementations in the customer modules 
I know a lot of people are saying use git or mercurial, etc. But one option is to structure your code as a maven project, and then do overlay projects for customizations. An overlay will build the base project, then insert the overlay classes and configs replacing them in the base project. We use this at work a bit.
Build a couple of small GUI apps using ant and a text editor (I prefer vi). Once you've done that you'll have a better appreciation of what IDEs can do for you as well as have the confidence to switch among different ones. 
Mix one jsp with one servlet and a little tomcat and you have hello world. Go from there. 
I can see that. But if your customers are very different in terms of functionality, it still might make sense. I worked on a project where the initial pipeline from each customer was different (import) but the back end processing was the same. Need more data from the op to make a better guess.
Checked exception. It's called a checked exception. A checked exception is still thrown at run time. A compile time exception would be thrown at compile time. The only compile time exceptions that Java throws that I am aware of are syntax errors, unsound casts and unsound generics utilization. You'll get less "runtime exceptions" and more "compile time exceptions" the more you lean on stronger types (classes) than weaker types (maps, strings). Or, as Yaron Minsky [puts it](https://blogs.janestreet.com/effective-ml-revisited/), illegal states should not be representable by the type system. That's hardcore. Or, maybe I'm just being pedantic about what "time" means.
This may have just been a simple mistake, but Java != Javascript.
I got what you were trying to say, no worries. But, your slip of the tongue did raise a very interesting philosophical point unrelated to your actual point. The best kind of points!
[I pulled a homer](http://www.urbandictionary.com/define.php?term=pulling+a+homer)
I know, i hate those too. Those bookwriters, mostly coming from Csomething, with Hungarian Notation, sequential programming (god method/class stuffs) and brackets in a new line. ARGH, i really hate those... \^\^ Thanks for the feedback C:
I've never seen an article online with so many typos and errors. Damn.
I wanted to make absolutely clear that I am not a native speaker :) I am working on improving my English and probably I have still a long way in front of me. Can you point to me one or a few of those errors (not all, they would be too many) so that I can keep improving? Thanks!
I definitely agree: the way to avoid mocking is throwing in a lot of interfaces, but the problem is that introduced a lot of boilerplate code. Interfaces are in theory a good idea but when there is just one reasonable implementation (+ one for testing) it seems just a duplication on effort, each change has to be done both on the interface and on the class implementing it, which are very strongly connected. I think of interfaces as something more abstract, when they map 1-to-1 to one class I feel something is wrong..
Wow that's amazing but I'm actually new to java so it wouldn't help too mug, I just want a simple overview explanation of what I'd need to learn to programme that sort of thing and what they used to do it :) 
it is true that IDEA does and it helps most of the time, I just had problems when people develop parallel branches
I disagree. NetBeans is far easier to use than eclipse. Eclipse uses a weird system they call perspectives which takes time to get used to. NetBeans installs complete with two application servers with a simple .exe. Eclipse takes a lot of configuration to get going. People often hype all th plugins available for Eclipse. The thing is NetBeans is a complete IDE without the plugins. I have never seen basic Eclipse used professionally without a whole bunch of plugins that often cause trouble at some point.
Also having worked in legacy code bases with plenty of ugliness like this, I go about this in a very different way. I use the extract class refactoring to move the code in private static methods into a nicer, more isolated place. Then, I test that class in isolation. The problem with this approach, and in mocking private methods in general, is that it makes tests totally unmaintainable. What if any of the mocked methods change behavior? The test is invalidated, but will continue to pass. Mocks are useful for specifying API specifications through expectations, to guide the implementation of classes implementing the API. Taken beyond that, mocks can lead to very misleading tests. Mocking is a design tool, and I don't think should be used to force testability on difficult to test code.
We are indeed considering OSGI for cases when we want to add new features. I have done some OSGI during my studies a few years back, back then it was mostly suitable for rich clients. We also found some information about using this for enterprise web applications. Would you say it is ready for this? Which role would Service Mix play in here? If I remember correctly this was an ESB implementation right? Even though we could add modules easily with OSGI, I'm not sure if it helps with the issue when a customer wants have core functionalities customized. Or maybe even customization of a certain module. Wouldn't that just shift the issue to the modules? We would get different modules code versions for each customer's customization.
Magic.
Yeah and you won't have to worry about extra dependencies. ;)
From what I can tell by skimming [the source](https://github.com/thedaneeffect/RS194/tree/master/src/com/runescape) (as linked by /u/Subthehobo in another comment), they simply used [jawa.awt.Graphics2D](http://docs.oracle.com/javase/7/docs/api/java/awt/Graphics2D.html). The main entry-point seems to be [Game (line 6)](https://github.com/thedaneeffect/RS194/blob/master/src/com/runescape/Game.java#L6), which imports `java.awt.*`. Inside the code they reference the variable `graphics` multiple times. As far as I can tell, this comes from the `awt` import. So it really is pretty much bare-metal graphics drawing. It seems that the bulk of their engine is defined in [Graphics2D](https://github.com/thedaneeffect/RS194/blob/master/src/com/runescape/Graphics2D.java) and [Graphics3D](https://github.com/thedaneeffect/RS194/blob/master/src/com/runescape/Graphics3D.java).
His argument is stupid but Minecraft is the #7 best selling video game of all times. Nothing more to say here.
I think you're right, offering customization for every bit and byte of your application can't come without major disadvantages. I would also rather enjoy to implement certain standard options (or customizations). It is just sometimes difficult to explain the ppl above me the whole consequences of that :-D
You're right. Also Minecraft used LWJGL. Btw libGDX also uses LWJGL under the hood.
Sorry, I was excited to hear about his experiences, but instead got a bunch of rainbows flowing out of his ...
Can't really compare a one time fee game and a subscription based game. Runescape is F2P but most people pay for the subscription.
Yeah that's the kind of shitty humor I'm talking about.
Did you hoped it was all bad news, but was surprised Java EE actually works for startups?
Actually, no. I wanted to know about his actual experiences using the technology. Like, "this so and so made this task much easier" instead of "we use request, view and stateless beans" like uhhh, right?
Then judge it by the game's proliferation into pop/mainstream culture.. isn't that the definition of fame? **Fame** -the condition of being known or talked about by many people, especially on account of notable achievements.
Reiner Hähnle, is that you? :P
No. PM me if you want more info.
Well, it's Docker so I would imagine PaaS would be pretty simple to accomplish. Wildfly also has some inherent load-balancing and session portability along with Infinispan cluster support, so I'd say he's got scaling covered. Really, I would have preferred to hear more of the experience: specifically, what were the headaches, headscratchers, and where did you land on choices in the backend like databases (relational or no), and how hard was it to set up persistence given your choice.
Some meta info here: What usually works is creating a group of key users (one or more from each customer) and let them have meetings and discuss and propose changes as a whole. Something that's interesting for a specific customer could also be interesting for other customers. This way you can let your key users do the heavy lifting and have a single code base. Essentially you want to end up with just one product which can easily be tweaked with config settings. Customer A wants something? They all get it, but can choose to turn it on or off. Ideally you would work with some sort of subscription system. Customers can subscribe (pay a yearly fee) to be part of the key user group and add one or two key users to it. As long as they are subscribed, their representative can request and discuss proposed changes. Once every quarter or 6 months, all of the requested changes and features of the group are submitted and you have some time to build them and create a new release with all of those changes in it.
Not really what I was hoping for. There's a couple of big pain points when it comes to managing any Java EE application at scale that I was hoping to see some real-world solutions to. The big ones being sessions, JPA entity caching (and how it scales to multi-instance deployments), JSF ViewState if used and authentication / authorization (did you write a custom JSPIC module or use something like Picketlink, Spring-Security, etc?).
I think you're on the right track with your thinking. New features should go into the main branch of code. If you turn them off and on with licensing or configuration, no problem. Switchable core functionality is still a "configuration" thing in my book. You have two billing procedures (with a billing procedure factory, right?) that get selected in a configuration system somehow. The code that calls the billing procedure really doesn't care which one is used, only that it happens. Again, same code base. Your third point is where I see differing branches. If the customer modifications are so different between customers that a configuration item won't work, then yes, I'd do a branch per customer. Or as the gp said, one branch per unique feature set if it might get used by multiple customers. [Here's a blog post from a few years ago](http://nvie.com/posts/a-successful-git-branching-model/) that provides a good example of how branching can be done. It gets complicated quickly, so your whole team needs to be on the same page. To your last point, git and hg are decentralized, while svn is centralized. And honestly, you should just pick the right tool for the job. [Here's a good comparison article.](http://biz30.timedoctor.com/git-mecurial-and-cvs-comparison-of-svn-software/) FWIW, I've got an SVN system running for one older project, and all 25 or so of my current projects are in git. Git does seem to be faster than SVN in my book, but that's very anecdotal.
Well I unticked "use subreddit style" so I didn't see any of that. I'm very sorry, I won't be posting here again. 
You are right that the refactoring could be the best solution, but that choice is not always available. This is a legacy app that hopefully will not be changed much in the future (so the test will be probably not broken) and significant refactorings are discouraged unfortunately...
I got the impression that this was one of the chief features about default implementations. The classic OOP rule "favor composition over inheritance" always involves a bit of verbose code, but this does the exact same thing just with "implements SomeBehavior" The real question.... can/should this abused by providing interfaces with default behaviors and *no intention* of ever overriding? For example, would it be valid for have a MergeSortInterface, and a BubbleSortInterface, maybe they both extend SortInterface, and then have class implementation vary based on what sorting algorithm I want to employ? 
This is among the most exciting things to happen in the Java EE community. 
Ah, that clears it up. It kinda feels like it would be neat, albeit totally new and separate, language feature. Like a third form of inheritance. I think this begins to sway more into functional-programming land more than OOP, so I'll stop here. :)
After working with Visual Studio, Eclipse is just overwhelming. It packs too many features out of the box instead of letting me activate them as I get used to the IDE. It ends up being terribly confusing, especially when the whole IDE is a transformer that turns into something completely different when running your app. Too much.... just too much.
I haven't been using Java 8 for long, and not in anything involving other people yet, so keep that in mind before you take my advice. The most obvious problem: Don't use curly braced lambdas when normal parentheses or no parentheses at all will do. Unless you need to do some side effect thing taking multiple lines they will just space out your code with explicit returns and semicolons. It might be due to anonymization but the line .collect(Collectors.toList()).stream() seems entirely meaningless to me. I prefer to keep chained stream call aligned and as close together as possible, therefore I prefer a Lispy trail of parentheses and curly braces over giving them their own line. With those changes the code would look something like this: try (CloseableHttpAsyncClient httpClient = HttpAsyncClientBuilder.create().build()) { httpClient.start(); List&lt;Future&lt;HttpResponse&gt;&gt; futures = chunks .stream() .map(ids -&gt; httpClient.execute(new HttpGet(generateUrl(determineSomething(something), ids)), null)) .collect(Collectors.toList()); resultSomething = futures.stream() .map(SomethingService::getFutureValue) .map(Either&lt;&gt;::right) .map(result -&gt; result.flatMap(this::parseSomething))) .map(failureOrSomething -&gt; failureOrSomething.either( failure -&gt; { log.warn(failure.getMessage()); return emptySomething;}, something -&gt; something)) .reduce(emptySomething, Something::union); } catch (IOException e) { log.warn("Unable start HttpClient to contact ....", e); resultSomething = emptySomething; } } Further, I really prefer method references over lambdas with parameters and I have a bunch of static methods for partial applications and other functional-related utility function that lets me replace things like: .map(foo -&gt; foo) .map(foo -&gt; foo.bar(baz)) with something like: .map(Func.id) .map(Func.call(Foo::bar, baz)) But I don't know, that might be taking it too far. 
There's a couple of places here where the code collects stuff and then immediately streams it into the next transformation. Is that redundant?
Okay, those are good questions indeed. I agree; the article was a little light on those details. For what it's worth, Arun Gupta wrote a blog and did a presentation about the exact same site and 2 others. That one contained some more details. 
I would certainly have the result of any terminal operation on a stream (such as .collect(Collectors.toList())) assigned to a well named variable. Having collect(...).stream().map(...) is pretty unpleasant IMO. In a block of code like this, I'd probably refactor out that more complex lambda into a method with a descriptive name.
It looks like to me your coworker isn't really focusing on the problem and is instead focusing on the "looping" or `stream` in this case. Essentially he took the standard looping and just turned into fancy Java 8 stuff...which just looks like more spaghetti code. Watch Venkat Subramaniam's video on [Functional Programming with Java 8](https://www.youtube.com/watch?v=Ee5t_EGjv0A), it's an hour long, but well worth it.
Does it pass the unit tests?
By meaningless I mean it does nothing valuable.
Indeed, even Haskell would look and work terrible if you don't use let bindings to bind your lambdas.
well, in my opinion, there are two very strong points that make what you call "micro-frameworks" ideal: 1. Using "big-frameworks" will make your application very tied to it, meaning that you might not have enough flexibility to add other "micro-frameworks" in case your "big-framework" doesn't allow or isn't compatible. So you get really limited to what your framework allows you to do - from features to performance. 2. IMHO, micro frameworks tend to be better both in terms of simplicity and efficiency because they're more specific and not a monster that can provide you everything-but-not-always-in-the-best-way. I'm also using Spark along with Kafka and other Apache projects. It's really interesting :)
I'd be inclined to disagree, it adds more calls to stream and collect muddying up the code.
I don't really want to make an mmorpg, just the way the game looks and plays as a game is great. I'd love to able to make a single player game that is similar just for fun for myself, I think it would feel like a huge aheivement to do it in a real language like java rather than gamemaker. I also want to make a small lan game to playvwoth my mates too
This is a different Spark (I thought the same thing) On the downside with microframeworks you often have to cobble together build and test systems that are more likely to be unique. I don't think there is anything inherently less flexible about 'big' frameworks, personally.
Here's an example: public void setGPA(double myGPA) { this.GPA = myGPA; } It doesn't return a value, but it does something. They're often called "setters", since you use them to set a value, but don't return anything. public double getGPA() { return this.GPA; } This returns a double, GPA, to wherever you called it from. These are often called "getters", since you're retrieving a piece of data.
Two key concepts: "procedures" and "functions". A procedure is like a command. It allows you to tell the program to do something. A function is like a question. It allows you to ask the program about something. In some programming languages, like Pascal, a procedure and a function are different things: type TPoint = class private _x: Double; _y: Double; public procedure SetX(x: Double); function GetX: Double; procedure SetY(y: Double); function GetY: Double; end; procedure TPoint.SetX(x: Double); begin _x := x; end; function TPoint.GetX: Double; begin Result := _x; end; procedure TPoint.SetY(y: Double); begin _y := y; end; function TPoint.GetY: Double; begin Result := _y; end; In Java, everything is a function, including procedures. So, everything must return "something". But, if the function doesn't answer a question, and you must return "something", what do you return? That's where `void` comes in. It means I return "nothing". I don't answer any questions. This is a weird quirk that Java inherited from its grandfather, a programming language called C.
Honestly I have no idea- reading through some [developer blogs](http://services.runescape.com/m=rswiki/en/DevBlog:Coding_and_Writing) there's no real mentioning of this. John does mention that a content developer at Jagex doesn't have to know Java. (since the Core Developers are the ones who are responsible for the engine and RuneScript running on top of Java) They haven't really given much info of RuneScript either, [this is what Chris E said in an engine team Q&amp;A](http://www.webcitation.org/67dLb5cTa): &gt;- Hmm, syntax wise it's similar to any C-style language, except variable names are prefixed with their type (eg. %varname is an integer). We also lack full array support. Other than that, it'd do pretty much anything you could do in C or Java. RuneScript isn't Java dependent tho it seems - they got it to work under HTML5 and now are working on the NXT client.
Of course :P
In Java 'functions' are not like mathematical functions, or like functions in strong functional languages. A Java function from input type 'A' to output type 'B' isn't restricted to just simply transforming a value A into a value B. It can update global variables, perform IO and in general affect the state of the rest of the program. A Void type is therefore used for functions which produce no meaningful result which are executed only for their side-effects on the rest of the program. For example, consider: public void println(String input){ ... } Where you want to print a line to the console. We need a String as input, we need to change the state of the console (by writing a line to it) but there's no meaningful result. We could pick an arbitrary type like 'Bool' and return 'true' or 'false' but the value doesnt mean anything, so we use 'Void' the type which has only one value, and means nothing. 
Good question, my comment mostly applies to only large features. If the new form in a field is related to such a feature, use the same sort of config to control it's presence. It might sound like a lot, but it saves in the long run by not maintaining multiple repositories. If you're looking at it as small stylistic changes, that is a great time to maybe have different templates for panels and subpanels and such. You could have the property files define which template to use for different parts of the pages, and probably specify a variable stylesheet to use as well. So you'd have a template for Form1StyleA and Form1StyleB. Customer X wants style A, and customer Y wants B. Your properties would look something like: Form1.style=StyleA Technically, both styles of template would be deployed, but only one is used based on the properties defined.
Isn't that a bit restrictive considering you need to start with .stream() and end with a .collect() or similar?
Okay, I'll break it down: The 3D engine is written in compiled code - C/C++. Lots of other bits of core game code are also written in C/C++. The engine is custom built and runs on top of either DirectX or OpenGL. When HD was first launched they used [JOGL](http://jogamp.org/jogl/www/) but have since removed it (they no longer link to the open source license text). The DirectX integration is either a 3rd party library or all their own work. It's all on-top of AWT (there's no JavaFX to my knowledge). There's also no Swing - Swing wasn't invented when RSC was launched so they never used it and now have no need for Swing. Java can access this compiled code through the [JNI](http://en.wikipedia.org/wiki/Java_Native_Interface). If you run the game in the browser, it runs as an un-sandboxed Applet which means it can download the cache (including the compiled C to your computer). I believe it uses some JavaScript to dynamically resize the applet it's loaded in (Java can access the JavaScript the applet is running from in an un-sandboxed applet). The downloadable client is a copy of the OpenJDK with a tiny bit of open sourced client code that just runs the game which is downloaded like normal. In this mode you are running it as a Java Application in a JFrame. RuneScript as has been mentioned is a scripting language. The RuneScript code is compiled into Java (or directly into bytecode, it's not clear) and packaged with the game. There's no RuneScript in the compiled version. RuneScript has been around since the very early days. In fact, the original version of RuneScape was Andrew's dissertation at Cambridge for his degree (much like the Google search engine was Larry Page's) and it references RuneScript if I recall correctly. For RuneScape NXT they will rewrite the RuneScript compiler so it produces compiled C rather than compiled Java (I asked Mod Philip about this). The core tech team maintain RuneScript and the 'compiler' for RuneScript. The content team write RuneScript. Big updates like Dungeoneering will require updates to RuneScript. But stuff like adding new items or even potentially a simple skill (just using items on objects in the game that give XP like Divination) might not. The core tech team will also maintain the networking protocol, which is some kind of custom format (not much of a suprise here, everyone rolls their own) over TCP I believe. Finally you have the game server code, which is also written in Java (probably with some C/C++ components). Amusingly the original dissertation talks about re-writing the game and server in C/C++ to improve performance so I guess we're finally getting round to that. It's a bit difficult to know what the servers exactly are doing, although that code has been leaked at various stages too. Broadly speaking client requests are split into timed ticks of 600ms (although some stuff is now done faster) and each tick is processed as collection. Then the game world does any updates (e.g. monster respawns) and the next tick is processed. Sorting actions within a tick used to be done based on something that included a player's IP or the order they logged into the server - the PID - it was predictable. This is no longer the case. All of the compiled Java bytecode/source code is then run through an obfuscator. An obfuscator makes it harder to work out what the code is doing. On a simple level this might be changing variable names so they are not understandable. On a complex level it might be restructuring classes, breaking up methods, combining methods and so on. From reading around the subject and comments made by Jacmob prior to him joining Jagex, the bot nuke change was going from 1 obfuscated version for everyone to 1 per client. There was also more complex obfuscation added. This is why it forces you to reload the game if you're logged out too long. They want each obfuscated version to only be around for a short time. There's a long video of Jagex internal tools (with lots of MMG talking up Jagex in the foreground) here: https://www.youtube.com/watch?v=yrVUegwSKlY
You can assign uncollected Streams to variables too.
##[Java 7:](http://www.oracle.com/technetwork/java/javase/jdk7-relnotes-418459.html) switches with Strings. JAX-WS muticatch type inference try with resources ##[Java 8:](http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html) Lambdas streams Metaspace Heavily overhauled type inference default methods on interfaces java.time type annotations pluggable type systems repeating annotations
Don't forget about Java 8 streams :-) 
Java 7: compact `catch` clause.
god damn it, didn't check the link hehe. Thanks for pointing out.
edited
edited
That's why you shouldn't use this method my when using threads. Without knowing what kind of thread pool or service is created it gets tricky while streaming.
I always find an often overlooked feature of Java 8 is [Metaspace](https://blogs.oracle.com/poonam/entry/about_g1_garbage_collector_permanent). While not a language feature, I think it's definitely worthy of a mention. Basically, instead of PermGen, there is native heap for class metadata. This has positive performance implications for languages run on the JVM that dynamically generate classes (like Scala).
Any major security fixes/reason to update an old project in production?
I find that doing too much inside lambdas gets out of hand quickly and becomes unreadable. I prefer to split things up into multiple expressions. It's less functional but more java-ish and I think it's more readable: // Await all List&lt;Either&lt;Exception,HttpResponse&gt;&gt; results = futures.stream() .map(SomethingService::getFutureValue) .collect(toList()); // Handle Exceptions results.stream() .filter(Either::isLeft) .map(Either::left) .map(Throwable::getMessage) .forEach(log::warn); // Process responses resultSomething = results.stream() .filter(Either::isRight) .map(Either::right) .map(this::parseSomething) .reduce(Something::union) .orElseGet(Something::empty); 
What a great reply. It seems that if I wanted to make something even slightly similar I'd have to know many languages? That's quite disheartening.
Don't forget time 
There's a book: Java 8 for the impatient. It has a section on 7 too. It's probably exactly what you're looking for. 
If your mother tells you to clean the table, you don't bring anything back to her, you just execute a task where the result is noticeable, but not something you can or should hand over to her. That's like a function that returns nothing to the caller, it just should execute a task that has nothing you receive as a result. Public void cleanTable(); If your mother tells you to make her a sandwich, she expects that you return with a sandwich you can hand over to her. That sandwich is the result of a task the caller expects to become in return. Public Sandwich makeSandwich();
There's been 100s of people working on it for 10 years. So it's not a small undertaking. You can build something much much smaller and less graphically complex quite easily though - Andrew wrote the original RSC himself remember.
Agreed, my misunderstanding 
Java 8: Pluggable type systems
I think many developers overlook the tools that come with each JVM. Regarding Permgen, it was an issue only on the Sun JVM, other vendors didn't had it.
I'm new to Java, but am an experienced PHP developer, and I'm not sure about this yet. Should / would a setter not return the object you're settings things on so you can method chain. i.e: public Foo setBar(String bar) { this.bar = bar; return this; } I understand this is an example, but I have seen many setters not returning `this`.
That isn't a concrete convention in Java. I've seen developers do it, but I wouldn't want that in any of my projects. It has merit, but is overall messy. I have written methods that return the object being manipulated (a good example is Java's flip() method for Buffers), but only when absolutely needed. In my opinion, code shouldn't return/do things that it doesn't explicitly have to. Lines of code should have a specific use, or else it might get confusing in the future. Consider this: person.setHealth(5).setDog(new Dog()).setHealth(10); In this example, we have a Person class, which has a field containing a Dog object. Dog and Person both extend Animals, which have a health field. **setHealth(int)** returns *this*. The behavior is a bit wonky, as one can't be sure who's health is being set to what. The person's health is clearly being set to 5. The dog's health would theoretically be set to 10. At first glance, though, that behavior is a bit confusing -- one might expect the person's health to be set to 10 because they are still editing the same object. Instead, I'd rather set the dog's health via: person.getDog().setHealth(10); Is this a totally bad thing for a personal project? No. But if there's a chance of other people viewing the code, then I'd recommend not doing so. **EDIT**: For clarity, I don't think method chaining is inherently bad. It's just something that you have to be careful with, minding who else you're working with. The Java language is littered with method chaining (StringBuilder, Buffers, etc). To each their own.
Coming from PHP at least (I know that probably doesn't mean too much around here, haha) - your example would not mean what you say. Consider your example: public class Person { protected Dog dog; protected Integer health; public Dog getDog() { return this.dog; } public Person setDog(Dog dog) { this.dog = dog; return this; } public Integer getHealth() { return this.health; } public Person setHealth(Integer health) { this.health = health; return this; } } public class Dog { protected Integer health; public Integer getHealth() { return this.health; } public Person setHealth(Integer health) { this.health = health; return this; } } Would then mean your example (with a little extra): Dog dog = new Dog(); Person person = new Person(); dog.setHealth(3); person .setHealth(5) .setDog(dog) .setHealth(10) ; Would mean that you end up with: person: dog: Dog ( health: 3 ) health: 10 You are always editing the person object when following the setter chain. The `Dog` object is not returned by setDog, the `Person` is. For it to behave like you specify in your example, you'd have to do something the following (like you said is how you'd expect it to behave): Dog dog = new Dog(); Person person = new Person(); person .setHealth(5) .setDog(dog) .getDog() .setHealth(10) ; I can understand where you're coming from, that while reading the code it may not be immediately obvious, but I suppose it is to me because it is a convention in PHP, and this kind of behaviour is consistent in modern PHP applications. If there are no standards or conventions in Java for setters and what they do / do not return then it would bit a little more ambiguous.
It's okay, I'm an ex-PHP developer ;) The main problem with method chaining, IMO, is the ambiguity. I would expect a behavior of X, and in reality the behavior if Y. I think this is one of the things that made me a bit turned off from jQuery. To be fair, having void return the object being manipulated was proposed for Java 7. Luckily it didn't get implemented (void is void for a reason). As a side note, I don't tend to like getters/setters unless needed by the code (boilerplate code grosses me out).
Interesting. I started with Java 2 days ago, and have made a basic servlet. I'm still trying to get to grips with a lot of things like this, so, thanks for the insight :) What would you prefer instead of getters and setters? Just using public properties?
There's a *reason* why setters "should" return void, which is an old idea called [Command/Query Separation](http://en.wikipedia.org/wiki/Command%E2%80%93query_separation). A setter is a command (changes the state of the object) and a getter is a query (should not change the state of the object). The idea is, you can tell which is which from the return type. This convention exists because unlike other languages like Pascal, which let you define commands (procedures) and queries (functions) as separate things, in Java you can only specify commands as methods returning `void`. That's the reason for the pattern. Martin Fowler makes a [good case](http://martinfowler.com/bliki/CommandQuerySeparation.html) that while Command/Query Separation is a good idea, sometimes blindly adhering to it can make a class hard to use. Java is taking ideas from functional languages, such as the new Streams API. I'd like to see more of that.
Aha! That's good to know, thanks for the links. Under what circumstances do you think you would not use Command/Query Separation then?
When you need to write unit tests for legacy code that has absolutely no tests and is otherwise untestable or new code that integrates into the above legacy code, you pretty much have to use mocking. If you're writing a greenfield project where all the code is written with the unit tests, then you probably shouldn't need mocking.
I'll let Martin Fowler answer that. But the `pop` method of a stack is a good example. It's very likely that the user of a stack will want to something with the value they popped off, and overly adhering to a principle which forces them to `peek` before they `pop` just makes things inconvenient for a win in theory.
I've had luck importing self signed keys into my java cacert keystore. It's quite a pain though.
Does this apply to stuff signed by others? If so how would you go about that? I'm not really talking about my self-signed stuff (it'd be nice to be able to make applets and such, it is actually my favourite tech from the pov of a developer, but i think Oracle killed Java on the browser... sure Sun was the one that kicked it around mercilessly and then abandoned it, but at least it was still breathing). I'm interested in running programs made by others.
You are of course correct that there is more to the builder pattern than just named parameters - they can provide defaults values and may check state of the resulting object in the build method. This is non boilerplate logic that it would make sense to unit test - though personally I tend to seperate it from the builder. 
&gt; I tend to seperate it from the builder. Why separate the code? The two concepts form a cohesive whole. That sounds like the builder equivalent of the [Anemic Domain Model anti-pattern](http://www.martinfowler.com/bliki/AnemicDomainModel.html).
I think the author confuses mocking with stubbing. 
The DateTime API in Java 8 is very nice.
Desktop applications would likely be less open-source (or open code on Github) than other things like libraries and such. You're bound to have a skewed representation just cause Github requires this for free public repos. Using github's data to support your theory is fine. Using github's data to single handedly test your hypothesis is bad. I don't care what search terms you use. You might be better off looking at swing/javafx support libraries in maven central downloads. Of course, a swing/javafx app generally needs a lot LESS support libraries than something like a web application, so that would also skew your results. I think you're asking a fine question, but you should think more about how to answer it.
Jmonkey3D(http://jmonkeyengine.org/) and JOCL(http://www.jocl.org/) are two reasons I like java. You can do just about anything with it on any platform with any of a million free libraries... what's not to love?
A good mix of simplicity and power. And the JVM is great.
The responsibility of the DAO is to map columns from the database to fields in the custom object. If the logic in the DAO does more than that, you are very likely getting into SRP violation territory. The `JdbcWidgetRepository` would be specific to the JDBC data access strategy. You could also have something like `JpaWidgetRepository` which would be specific to the JPA data access strategy. But, whatever you do, do not call your implementation `WidgetRepositoryImpl`. If the collaborator can be unit tested, if it is not crossing a system boundary, then yes. A `ResultSet` crosses a system boundary. If you misspell a column name or get a data type wrong, your mock test will pass, but when you run your code for real, it will fail. An integration test will catch these kinds of errors. If you are writing a generic `ResultSet` to object mapper, I can see a use case for mocking a `ResultSet`. But if that's what you are doing, this is a solved problem, and I would advise you to use an existing solution (Apache DbUtils or Spring JdbcTemplate).
Completely agree with this. I would also recommend the book Model-Based Development even if only for the chapters on Object Technology. One important take-away from the book is to design applications according to flow of requirements instead of flow of communication. 
You could look at using hsqldb to test your daos
Thanks a lot. I have just one small question. So, regarding an actual implementation (ex. JdbcWidgetRepository) that is specific to a database, you would suggest *actually* connecting to a database during integration testing: in other words, taking a MySQL DB, for instance and doing the following? * DROP * CREATE * INSERT (data specific to a test) * Run an integration test * Repeat as necessary until all integration tests are done I was under the impression that you would mock out even a specific implementation's testing (hence the start of this whole chain), but that is *definitely* not the way to do it, right?
Congratulations for ignoring: + the **big red button** saying **"Seek Programming Help"** + the **big red banner** when **hovering** over the **"Submit Text"** Button, saying **"Please seek help with programming in /r/Javahelp"** + the **big red box** in the **sidebar** saying **"Please seek help with programming in /r/Javahelp"** + the **"?"** icon in the **blue "Related Sub-Reddits"** box in the **sidebar** with the text **"Java Help ← Seek help here"** Also, you didn't even bother to spend the effort to properly post your code. **Post removed** wrong subreddit.
This question is better suited for either /r/Javahelp, or /r/learnjava. There are plenty, not so subtle hints that should have pointed you to /r/Javahelp: + the **big red button** saying **"Seek Programming Help"** + the **big red banner** when **hovering** over the **"Submit Text"** Button, saying **"Please seek help with programming in /r/Javahelp"** + the **big red box** in the **sidebar** saying **"Please seek help with programming in /r/Javahelp"** + the **"?"** icon in the **blue "Related Sub-Reddits"** box in the **sidebar** with the text **"Java Help ← Seek help here"** **Post removed:** wrong subreddit.
thanks for sharing adamclmns..
I did not know about this. This is probably the best feature in Java 8.
nice. did not know about that
edited. didn't know about that one either
Be aware that since 6.0.0 JasperReports depends on iText 5+ in Maven which is under AGPL or commercial license when used directly (see http://community.jaspersoft.com/questions/847229/jasperreports-6-itext-5-affero-licensing-catch). So maybe it would be good to do something like this: compile ('net.sf.jasperreports:jasperreports:6.0.3') { exclude group: 'com.itextpdf' } runtime 'com.itextpdf:itextpdf:5.5.0' runtime 'com.itextpdf:itext-pdfa:5.5.0'
*lack of* fucking pointers
Hate it when a programming language pontificates on your sex life.
Okay, thanks. I think you've clarified a lot for me. I've been researching automated testing and experimenting with it; but you know how it is, the books and other examples all paint a rosy picture. It's hard to figure out what you actually do in more complicated situations. I think I get what you're saying, and I'm going to turn this over in my head (and in some sample code) a little bit. And I will definitely be checking out the Apache DbUtils that you linked to, and now DbUnit as well. Thanks, again.
Oh, it's [cooler than lambdas](http://blog.paralleluniverse.co/2014/05/01/modern-java/#advanced-topic-pluggable-types) (more [here](http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html)).
I noticed you skipped Eclipse on the "great IDEs" list. Was that intentional, and if so what is the reason behind that? I ask because I was taught to use Eclipse in school and I've stuck with it.
Glad I could help. If you're going to use mocks, you absolutely must read [Growing Object Oriented Software Guided by Tests](http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627). They throw in some complex scenarios like UI, networks and concurrency and show how to do automated testing in these scenarios.
Hundreds of great third party libraries, Java EE is top class, I love it's packaging mechanism for some reason, and I think it's the most intuitive OO language. Lots of work in Java too.
Yup. The ecosystem is really the key to why Java is great. The language is underwhelming in its capabilities. But the libraries, IDEs, Static analysis tools, etc are unmatched in any other language that I've used.
Hmm I figured the annotations would create new AST nodes by extending the type hierarchy. I'm not sure I understand exactly what you said, but it sounds like I figured wrong.
Just FYI, these sorts of "thankyou" comments add nothing to the discussion and are discouraged. They only add noise and make navigating actual discussion more difficult. [reddiquette](http://www.reddit.com/wiki/reddiquette) 
&gt; in Java you can only specify commands as methods returning void I completely disagree with this statement. 'Commands' in any sense can do a variety of different things. In instances where it makes sense to return the object edited in a "setter" or more specifically, a method that changes the object's state, `return this` is easily acceptable in Java standards. For example, say you are writing a game and have a monster class and you would like to change the state of the monster by hitting it with a sword. you may define the method `void hit(Sword sword)`, however you also notice that whenever you hit the monster with the sword, you are constantly checking the state of the monster afterwards to see if it is killed. This can be avoided by returning a Monster and having a corpse or rather a null-patterned monster be returned if the monsters health falls below zero. For example: `void upate() { this.monster = monster.hit(sword); }`
The annotations themselves are just like plain old annotations -- they don't do or mean anything to javac -- only they can appear not only in declaration sites but at use sites as well, i.e. wherever a Java type can be used (So you can have something like `List&lt;@Tainted String&gt;`, which you couldn't prior to Java 8). Then, an annotation processor (which automatically gets run by javac after the compilation, and is fed the Java AST, annotations included) can do whatever it wants with those annotations, including implement pluggable type systems, which is precisely what the checker framework does: it is a framework that lets you create pluggable type systems that make use of Java's annotations. So the only change in the language is that annotations can be used in more places; that's it. But that small change is what opens the door to pluggable types.