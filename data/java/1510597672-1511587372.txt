Calling it Java or implying that it was Java or Compatible with Java can only happen if you buy a license from Oracle and use the TCK. Otherwise don't tout compatibility etc. because you end up fragmenting the ecosystem and nuke the write once run anywhere philosophy.
&gt; t's good to realise that role-to-role mappings can be many-to-many, this is often missed by people. ANSI INCITS 359 spec allows many-to-many but doesn't require indeed most implementations don't support it although some do, e.g. apache fortress.
Open the Watches window in the debugger and add a watch like this: ``` Arrays.toString(ints) ``` (presuming that `ints` is your array). The watch will show a string representation of your array. It'll run out of space, but at the right you'll find the word **View**. Click it and it'll show a popup that shows the whole array.
Hard to blame Oracle for that. It's pretty much the status quo at all conferences now. They're mostly just marketing / sales pitches with decent parties. I go to and talk at several a year and they're all like this and the talks are starting to get more and more marketing / sales oriented to. It's very frustrating.
Considering that swing was the best thing around at the time, it's not that surprising that it still is based on swing. Although it also should be noted that they've had well over a decade to perfect their own UI components built on top of swing as well.
Because copyrighting the API's stifles competition and interoperability. Oracle's business is dependent on their database software for the most part. What if IBM came after Oracle for using their SQL API's? Since Oracle thinks API's should be copyrightable it stands to reason IBM is owed billions by Oracle.
I disagree because money was not the issue. Sun, especially Schwartz wanted to be the middleman between Google and the OEMs and by the articles at the time, he wanted to keep pushing JME as the underlying tech. Maybe Google did wrong by not getting a license on those terms, but it was their prerogative. Also Sun never made the TCK easily available to Apache and others difficulting the task to make a compatible JVM implementation, and somehow, making easier the decision to take the Harmony VM and fork the platform. 
100% not
Did IBM ever make a claim against Oracle? If not, why not?
https://i.giphy.com/media/wLXo0vTZSM7GU/giphy.mp4
I haven't been to a NFJS conference in a while. Have they succumbed?
are you kidding?
Sorry, I was super unclear in the original post and this does answer what I asked. My issue, however, was that our assignment had a few hundred objects with individual arrays of over a hundred elements. If I understand what you're suggesting correctly, I would still have to set a watch for each individual array. What I was hoping for was a setting that allowed me to change the default range of the array that is displayed in the debugger. As the other user pointed out though, that doesn't seem to exist. 
If money was not the issue, surely Google could have bought Sun. IBM, HP, Aicas, Aonix, Borland, and many other companies selling commercial JDKs never had any issue getting the TCK for their own implementations, only Apache.
Never seen this before. 
&gt;Still that's a valuable contribution as is. Yes, as I said. &gt;We should look for ways to help rather than criticize Criticism is a form of help. It's fine to pat each others' back and all, but somebody has to point the elephant in the room. If nobody criticizes your work, you cannot improve. &gt; why don't *you* proofread the article for him? Because it's his article, not mine. It's his responsibility to ask for a proofreader, or to leave the article like it is if he decides so.
&gt; Well IBM have more luck with making money [...] Oracle have zero experience or knowledge how to make money [Hold my beer.](https://finance.google.com/finance?chdnp=1&amp;chfdeh=0&amp;chdet=1510608924719&amp;chddm=502435&amp;cmpto=NYSE:IBM;NYSE:ORCL&amp;cmptdms=0;0&amp;q=NYSE:IBM, NYSE:ORCL&amp;ntsp=0&amp;ei=FxAKWsn2JIyEswHLsaG4Dg) And why should Open Source even matter to "making money"?
By trying to aggressively commercialize both. Hence the birth of LibreOffice and MariaDB.
You didn't answer my question about MySQL. Neither did you answer my question about why a database vendor like Oracle should worry the least bit about a second-class office suite like OpenOffice.
Thats was probably what Schmidt was thinking after Oracle started talking about the licensing. The issue with the TCK is simple, Sun didn't want to provide it and created an environment where forking the implementation was the only path. Also they kept digging their own grave hopping for the best.
I guess you are comming from ports&amp;adapters architecture (or some other one with layers), right? The fact that there is the pure domain/business/w/e in the middle and that every upper layer should have build time dependency on the layer below and not the other way around does not mean that there should be no such runtime dependency. Model can define it's own "ports", interfaces that it needs to work, which decouple it from the implementation details of the upper layers. Imagine if business demanded that you have to fetch/update data in some order, or that you have to add some audit trail whenever you do some operation on data, .... What changes? Operations concering data, driven by business. It's business rules that have changed, therefore the business "module" should be updated. Not the rest controller! The way data is delivered to outside world stays as before. 
check the credits where this is stated from. If this is from university slides, they need to quote them.
Why would someone use this over quartz scheduler?
is there any reason to use this if I'm already comfortable with spark? 
Did IBM ever make a claim against Oracle? If not, why not?
This was the question I wanted to ask.
my thoughts 100%
Have used envers for a few years and the history records have saved our team many times, invaluable resource to have something.
&gt; why should there be no Copyright for APIs? just imagine for a second that you can't have write a list class with size, length, etc because those are all "copyrighted".
[Didn’t you see when installing jdk?](https://zdnet1.cbsistatic.com/hub/i/r/2014/09/18/74618ade-3f0e-11e4-b6a0-d4ae52e95e57/thumbnail/770x578/50dc82bf9ef5ab14d42faeb95c98c035/three-billion-devices-run-java-yeah-but-do-they-like-it.png)
Ok ... so what does that have to do with what I've said? Nothing from what I've said changes, and nothing of what you need to test changes. 
Don't the ++ and -- cancel out?? jkjk
Since Oracle just set a precedent that API's are copyrightable they can start whenever they want.
Ah, I see. I found two other things that might help. One is that you can select an array and right click and choose "Adjust Range" and change the range that is shown in the expanded list. Unfortunately, not very sticky. The other is that you can right click and do "View As..." and "Create" and create a type renderer. This will make _all_ the values of that type display using whatever expression you want. For instance, you could select an `int[]` and set the "When rendering a node" to use `Arrays.toString(this)`, and _all_ of your int arrays would have that default representation. No watches required. You can make all kinds of type renderers and turn them on and off as necessary. 
&gt; Criticism is a form of help it's amazing, when i yell at people "you suck!" i'm actually making the world better!
you're going full grampa.
You wouldn’t need a special JVM for this. Use a java agent to modify the byte code. Volatile by default is probably not right, but a custom jvm is not required. 
I always found Quartz's API and abstractions harder to grasp than they should be. I'm open to something new.
I think that's the wrong attitude to take if you care at all about your scheduler's reliability. Quartz is reliable and battle hardened and subjectively, in my own personal opinion, not actually that obtuse to deal with. Any new API competing in the same space that doesn't even mention it in their docs is probably an amateur hour shit show and not to be depended on.
As an author, you can grant explicit permission overriding Copyright, but copyright should not *automatically* not apply for certain literary works such as an API. Fortunately, the court agreed with that.
I want to say Jetbrains rewrote swing absolutely, add in Intellij own JVM and provide different distributions for each platform (Windows, Linux and MacOS).
Good question. The short answer is that db-scheduler is meant to be very simple and require only a single table for coordination and persistence. The last time I checked, Quartz requires you to create 11 tables for its cluster-friendly persistent mode. So for small applications with simple scheduling needs, db-scheduler may be a better fit than Quartz. (it is not meant to replace Quartz, but rather fill a niche not so well covered)
Realistically only a small fraction of (Java) developers will Dockerize their build toolchains. The rest will do just as well without. Thinking in absolutes does not make you more right.
I've literally never heard anybody refer to Java like that.
Thanks for the input, I will add a section in the doc clarifying how it compares to Quartz. As to reliability, one advantage of db-scheduler is that it has fewer moving parts, so the surface for reliability-bugs is also smaller. It has been used in production for 2 years, powering a handful of applications without any reported issues. 
Specially Lotus Notes and RAD Studio.
Bro, a lifetime.
Exactly that. Programming is a domain where you never will stop learning. The amount of things a programmer doesn't know is always by far larger than the amount of things they do know.
Let's also have a look at the content. The author seems to choose a plain unsalted SHA-512 as a password hashing algorithm! Look I get it the author might just want to play around with this stuff, but other people might have a look at this blog post and use it as a base for their implementation! But it's almost 2018 and everyone should know that you should not use one round of an unsalted Hashing algorithm (be it SHA-2, SHA-3 or something else). What you should do instead: Either: Don't store any user passwords yourself (use secure third-party service providers for that). Or: If you must store user passwords use bcrypt (as Spring does), scrypt or use PBKDF2 as the JSR-375/Soteria Reference implementation does. If you for some reason insist on using SHA-* for hashing the user passwords, you should at least salt them. (Please don't insist on using plain SHA-*, any of the three options (bcrypt, scrypt, PBKDF2) provided is better than plain SHA-*) An unsalted password hashed with SHA-512 is almost as insecure as a password stored in plain text! Please forgive my harsh words but this stuff is important. 
the api as a "literary work" is comical. an api is basic communication. next you'll say someone should copyright 1+1.
observing that docker isn't a fundamental and indispensable part of development is trivially true, and doesn't establish much of anything.
10,000
Check the following link and see how to perform HTTP POST in SSIS using RESTful approach. https://zappysys.com/blog/http-post-in-ssis-send-data-to-web-api-url-json-xml/
You can't answer that without defining "competent". It all depends on lots of things. What kind of system said programmer is trying to build? Is it "hello, world"? Is it geographically distributed with no downtime ever? Is it a 3d game? Is it mission critical on a real-time OS for hospital hardware? Is it military with crazy security policies throughout the whole system? Asking what you did is like asking "how many ours of pratcise does it take to be a competent engineer?" without specifying whether you want to build a toilet cabin or a spaceship.
`0x7ff0000000000000L`
What happened to Netty 5?
This sounds really awesome. Has anybody experience how good it works in reality? 
Depends on how you define competent
There is a lot of boilerplate written on top of Apache Spark. Spark MLlib is just algorithms, you have to do a lot of other work. 
I use Failsafe too, and am pretty happy with it. The times I've thought "I wish failsafe could do this" I re-read the documentation and it turns out it could already.
Start the journey and find out. 
You don't measure that in hours, but in years.
V for valkyr. V for Valhalla.
Exact :) Just keep be up-to-date and check what you are doing is "correct way".
Assuming you mean poorly scalable backend development in Java without J2EE containers, using something like Tomcat + Spring + Hibernate + PostreSQL, I'd say 2-3 years depending on your environment. You can get lucky and have a good team and just by watching what decisions they take you'll get lots of good experience. Or, you can have a terrible team from the best articles at thedailywtf.com that will only give you negative experience. Or, you can learn stuff on your own, but then it's entirely up to your intellectual skills.
What "wrong" attitude did I show? I merely voiced an opinion. I didn't day Quartz was all bad, just that it could be improved upon. I remember using Quartz 12 years ago, maybe more. Java sure changed a lot since then, in style and libs and syntax. Quartz design is showing it's age, framework integration is not as simple as it could be and bare bones configuration is also more involved than required in a lot of cases. Also, scheduling is not rocket science if you stick to the basics, and not every library needs to be "enterprise grade". Sometimes good enough is all that is required. Keeping coding fun is important, lest we switch to COBOL legacy mode forever on.
It's deprecated before it even comes out
Keep crying.
Good API design is not trivial. While the JDK not flawless, it is obviously acceptable to Google
?
Pathetic. Trolls aren't even trying these days.
That's my point. There's a difference between constructive criticism and being mean. And why does someone have to point the elephant in the room? Can't we all see it? 
A fair point. My suggestion would be why would anyone reimplement a credential store in the first place? Credentials should be stored in something akin to an LDAP storage in production. Don't reimplement. Having said that, one could use his example and map it to a 3rd party security provider.
yeah, but I'm using spark ml in production atm, and I don't find it that inconvenient. what would I gain from using this? 
"Hello, yes, I'm ready to receive the first part of your joke" Oh, shit, wrong protocol
Oooh, I'm gonna write printer software in Java, that sounds like a delightfully enjoyable existence!
Dude, this looks amazing!!
Not every project is intended for battle hardened commercial production use and honestly your comment about this potentially being an amateur shit show is just rude and unproductive. I've used Quartz in the past several times and it's a giant headache especially for smaller projects that are internal only. Another option in the space is A Good Thing (tm).
Dead: https://github.com/netty/netty/issues/4466
7 
&gt; Limit the GC pause time to no more than 10 seconds. That can't be right.
The original mailing list post says 10 milliseconds, which seems far more reasonable. 
Wondering the same. Seems too good to be true, especially given the state of JetBrain's development on native Kotlin.
Open source but don't yous still have to pay to build the apps? 
We don't use "native kotlin". We rely on our Java implementation so Kotlin works through that pipeline. Check out this video for a more in depth look at the 10 year history of Codename One and how it works under the hood: https://www.youtube.com/watch?v=MrwbpdMALig
Sounds neat but I’m still more interested in the OpenJDK Mobile project.
I was just comparing the 2 separate parallel development efforts. Looks very promising given the history.
It takes a lot of time there are many things to learn. I can recommend you on learning how to detect bugs in the code as you program, Because unless you're using some program like checkmarx or any other it is going to be hard to detect those later. Good luck.
Doesn’t matter, guy asked what can be done with it, and that splash screen paints a pretty decent picture of what can be done. Your toaster is powered by java. The possibilities of employment and practical use are damn near endless 
Not exactly. It's open source so you can use the code for free. That's not as seamless and loses some of the appeal, not many people pick that. We also have a 100% free option to use the build servers which is a unique feature for us (there are some other companies which offer build servers but not as elaborate and none of them are free). This is free in the sense you have no commercial restrictions (you can use it commercially) and no nag screens etc. However, there is a quota since we literally have to pay to keep physical servers running. Notice that our paid tiers are priced fairly and don't have any of the gotchas such as your app or license expiring if you stop paying. So yes we charge for some things that just don't exist with other solutions...
Why? Right now it's an interpreter. Last I saw the desktop version was over 50mb in size for a simple hello world. On iOS that would translate to 100+mb before itunes which often doubles the size. Size is a huge deal in mobile. When an app is over 100mb it doesn't download updates over cellular and it's a huge pain to maintain with constant uploads. Oracle has bad history with desktop/mobile (as did Sun to some degree). If they can't do desktop right after years of trying what makes you think they will get anything working with mobile? Furthermore, the mobile project isn't even a product. It's a side project in OpenJDK so it's hardly comparable to a full stack production grade deployment. That will take another decade to do... I can see your point you want to "go with the standard". But that sort of thinking leads to a problematic future. We can't "wait for Oracle" or something like that. If Codename One gains a level of traction that's noticeable enough Oracle will notice. It will either buy us or compete with us both of which will be great for the Java community overall.
Take a look at [Azure](https://github.com/Azure/azure-sdk-for-java/blob/master/azure/src/main/java/com/microsoft/azure/management/Azure.java) class from Azure SDK. It is "final" itself and has plenty of static methods. And it is used as a parameter or return type in many methods in Azure SDK. How would you cover it with unit tests without mocking the static methods? A couple of years ago I tried to write a bunch of wrappers, to isolate classes with code from direct dependency on Azure SDK. I managed to do that, but I did not like the result. The isolation layer turned out to have a parallel hierarchy of many classes in that SDK. Just too fat and clumsy to have it for unittests only. That was C# version of Azure SDK and I decided throw those wrapper classes and to use Microsoft Fakes (mocking framework included into Enterprise Edition of Visual Studio) for unittests. Right now I need to do the same for Java version of Azure SDK. I have my classes to integrate our business logic with Azure and I need to cover that logic with unittests. I am thinking about PowerMock already..
At the same time, Java to native hasn’t worked out well at all until recently with aot in OpenJDK, and Java in a way is *meant* to be run in a VM (classloaders, etc.) so it just seems like the mobile project will work out better in the long run. One can dream of a time when Java on mobile works well :D
&gt; Assuming you mean poorly scalable backend development in Java without J2EE containers, using something like Tomcat + Spring + Hibernate + PostreSQL, I just started school for computer science and have no idea what any of this is. I guess I have a lot to learn.
You can get a perfectly good OpenJDK from here. AdoptOpenJDK https://adoptopenjdk.net/archive.html Zulu® - Azul Systems, Inc. https://www.azul.com/downloads/zulu/ Community builds using source code from OpenJDK project Open JDK Builds for Windows: https://github.com/ojdkbuild/ojdkbuild 
[Not Java but still applies](http://devhumor.com/content/uploads//images/February2016/javascript.png)
New book: Learn To Program In Only Ten Years!
&gt; Handle multi-terabyte heaps. Who is doing that?
It's funny that you do the same 😊 I'm always using this URL because I can not remember this ugly Oracle URL. 
there are no credits and no quotations...
You can't get proper classloaders in iOS since JITs are prohibited. We already have a very conservative open source VM with non-blocking GC that reaches efficiencies close to C in ideal circumstances. The tradeoff is that you don't get the full JVM... It's just not realistic to have your cake and eat it. Open JDK will never reach this point because it is saddled with Oracle/Sun policies about the things that "must" be in the VM and that will never come remotely close. As far as I understood their AOT uses a JIT when necessary so I'm not sure if it can be moved to mobile as is but I'm not sure about that. Normally, I would say that if their VM ever matures we would use it as our VM is just a VERY small part of a complete solution. But honestly I doubt this would ever be the case. 
Two things: - An Optional of List is kind of weird. When a person doesn't have favorite dishes, doesn't that mean the list of favorite dishes is just empty instead of not present at all? - Using third party libraries (Guava) just for the null-checks in a tutorial is unnecessary imo. Especially since Objects.requireNonNull in the standard library does pretty much the same.
Oracle I guess..
real link https://confluence.jetbrains.com/display/IDEADEV/IntelliJ+IDEA+2017.2.6+Release+Notes
You are right, I will update that. Guava is just what I’m used to using since in my projects I use it for many things but yes for just one check in a tutorial feels unnecessary, agree.
should not have opened that while taking a drink of water haha
Oh, agreed, and I don't mind java. Printers are just notorious for being difficult though, so you would be writing in a language a lot of people hate (for whatever reason) for devices people hate. Somebody's gotta do it, and I bet it pays decently, but its maybe one of the least 'glamorous' software jobs you can have probably.
JavaFX for desktop GUI apps and NetBeans for my IDE.
Mainly I use it for reading compilation errors and crying.
Activity recognition on Android devices. Android Studio for ide, weka for data comparison and classification. Projekt tango for more data (wooho no better data than more data) and rajawali renderer for a frontend
It tends to be that the less glamour involved, the more stable work is at. I’d never in a million years have dreamt of working for a company that exclusively handles programming java for medical equipment. But got-dang if that jobs salary and benefits wasn’t intensely appealing. And then I landed a job at an anti virus company writing front end web sites for customers new and old. As far as “sexy” jobs I had on my radar, an anti virus company wasn’t even on my list of prospects. But it ended up being the best job of my life, the most stable job of my life, and is putting food on the plate and a roof over the head of my entire family on a single income. Programming printers is definitely a dirty job tho, and the people doing it are the true unsung heroes of the office workplace. Side note: I fucking hate my printer :p lol
So it means that I can use everything, build etc without resorting to your servers? Do you have any documentation on that? 
Backend for web applications.
What a cool read. Did enjoy it. Gave some insights. May someone shed some light to reified types? Or a link? Yes I'm to tired to Google now. And if you have some link/explanation for me, I'll be glad to read it tomorrow
I work at Amazon. So everything. Something like 99% of Amazon runs off Java. It's pretty amazing how such a complex system with thousands of micro services and front end interfaces are all put together using a single language. Not many languages out there can boast this kind of flexibility and speed, especially at this kind of scale.
Make money at my dayjob.
I just copied the link off of their Twitter, haha
My calculator app could use this.
What about a 2D game
What do you think is better for desktop apps?
I write compilers and interpreters using Java.
For most of my general programming, I use Java, such as making programs with a GUI, programming challenges, etc. I also use it for Android.
That is very strange indeed.
This should be great for programming games for JVM.
Absolutely nothing
&lt;script src="https://pastebin.com/embed_js/vC5xjh16"&gt;&lt;/script&gt;
https://pastebin.com/vC5xjh16
good api design can be reduced to mathematics.
Say it again.
So you've worked with Paula Bean?
r/javahelp would be a better place for this. Checking your code, you don't actually check if there are upper case characters in the string -- you just check the boolean variable to false, and then check if it's false (and it always is, because it's never assigned a new value). You need to actually check the contents of the string, and set the boolean flags' value to true/false accordingly.
You are missing code that actually checks the Input. You never change your variables. They always stay false. Your are checking for length, that's it.
Fair enough. I hope Codename One is successful.
Assume ng your random function returns a number 0-1, yes
Is it necessary I put the parenthesis after the 12 as well as two before the Math.random part?
What language? Java?
Ya
All of your return statements return true. You should return false for the cases where the password validation fails
//import math class here Main{ int randomNumber = Math.random()*111 + 12; } //It's fine with or without the parentheses
Read the Javadocs for random. It will show you the way. Hint: `random() * 111` is not the way.
Hit me up on discord I'll give you a quick run through of what's going wrong if you can call before I go to sleep @THE LAW#1049 
Shoot idk why I put 111, meant to put 135, if I put 135 is it correct
Is it 110?
I won’t get marked for parentheses?
You don't need the parenthesis around `Math.random() * 111`, but otherwise everything else is right.
Also for 7.5 to 7.99999999 would Math.random() * .5 +7.5 be correct?
Marked? As in losing points?
Okay thanks
That's 7.5-8
Read the documentation for [Random](https://docs.oracle.com/javase/8/docs/api/java/util/Random.html). `Random.nexttInt` is a place to start.
So what would be 7.5 to 7.9(9 repeated)?
7.99999(...) == 8
Depends on how many digits he goes up too. And how Java handles doubles and ints. 
But is the formatting correct? The question is asking for a random number that is a double between 7.5 and 7.9 continued
same thing here, I think this is one of the most common uses these days.
Your code could return 8. If you really need to exclude 8 you need to specifically check for it. 
My teacher says this is fine cause I’m the notes for 0 to 3.99999 the answer is Math.random() * 4 
Hint: assuming you would have random generator from `0` to `n-1` (inclusive), how could you transform it into `m` to `m+n-1` generator?
Bullshit. Nobody in the industry uses JavaFX.
Wdym? Is my answer not right?
You came to the wrong sub 
I use it for collecting garbage 
Sounds interesting. Can you share more details on the projects you're working on? 
Since you want integer, multiplication is not the way to do it. I'd say rounding errors, floating point arithmetic and stuff would mess up the distribution. I didn't do any analysis but I would expect that e.g. 123 could never appear at all, maybe even 122 would appear appear less frequently and some numbers could have their probability off. It would kinda work for "continuous" random distribution, but `(int)` clearly suggest that you want discrete one.
Step on is re-write checkPassword() so that it only has one return. you wanted nested if statements so if it checks true in the first it goes on to check the next. quick lesson. if(a){ a is true }else if(b){ a is false, b is true } ----- if(a){ if(b){ a and b are true }}
I'd like to see how it performs against Azul's pauseless garbage collector. https://www.azul.com/products/zing/pgc/
Since Amazon is so dependent on Java, does the company use its own custom JVM or does Amazon use a third party?
Backend for mobile applications.
 ThreadLocalRandom.current().nextInt(12, 124) 
We don't have documentation on that on the website but you can look at the how codename one works video to understand the various VM's we use which is pretty easy. There is a 3rd party who built a plugin that does everything pretty seamlessly for Android (he claims) but I haven't tried it. The iOS portion uses ParparVM and there are some docs there, it's under our github project tree. The Windows UWP support uses a fork of iKVM which we fixed to support UWP it's also in that hierarchy. Most of the community didn't have the motivation not to use the servers. 
Server systems level, Web, CLI clients, platform UI clients.
No they use a default jvm. Amazon needs to use the most mainstream languages because they employ so many developers. They also make it easy to change teams by keeping the tools and environment the same everywhere. 
For those of us with little knowledge can you explain just a bit more?
Using a different JVM doesn't really affect developers though.
This, I'm considering learning backend and i'm interested
Since this is a *programming help* question, it should, as the *plenty hints* on the page indicate, be posted in **/r/javahelp**. Please be sure to read the [**Posting Guidelines**](https://redd.it/48eykt) there before posting. **Post removed**: programming help
Since this is a *programming help* question, it should, as the *plenty hints* on the page indicate, be posted in **/r/javahelp**. Please be sure to read the [**Posting Guidelines**](https://redd.it/48eykt) there before posting. **Post removed**: programming help
Backend meaning where the business logic happens and where your app communicates with a database, at least in my experience. Use a front end language like AngularJS or React, then use services to communicate between the front end and your Java backend. 
&gt; I think that's the wrong attitude to take if you care at all about your scheduler's reliability. Quartz is reliable and battle hardened and subjectively, in my own personal opinion, not actually that obtuse to deal with. you're confounding two issues - api quality and reliability. caring about one does not imply anything about one's view of the other. quartz may indeed work fine; heartbleed happened in "hardened" openssl, and the equifax breach went through the "battle tested" struts library. nothing is certain, software evolves, and it's generally unwise to presume the future will look just like the past. &gt; Any new API competing in the same space that doesn't even mention it in their docs is probably an amateur hour shit show and not to be depended on. are you a quartz contributor or something? you seem really emotional.
http://lmgtfy.com/?q=reified+generics
I'd go for a language with good qt bindings. C++ and Python would be my bet. Python+Kivy if you want to experiment a bit.
Sure it does
Is there an even more simple explanation on back end/front end?
Merci. 
You'll want to spend some time with databases. Every big web application backend I've worked on has literally been an api of business logic that wraps around a large and complex transactional datastore. Know SQL. Know data modeling /schema design.
I don't really believe IntelliJ on its own "broke" git - unless you yourself made some action I guess nothing happened, and if you opened up things in terminal nothing would change. Are all of your plugins up to date? If you upgrade immediately after release some plugins might be behind and as a result they might have some issues. Try to open plugins settings and check if there are some red entries: notices about errors, incompatibilities etc. If there are maybe disabling these plugins would help. You said fresh PC, but did that fresh PC had no IntelliJ files? Other than reinstalling maybe removal of config directory from you home and also removal of `.idea` dirs from your project and reimport would help? Of course, I might be wrong. There were weird cases where things broke for weird reasons.
Open Source is bussines model like everything else. At the end the compny wants to scale and succeed or at least to not fire people or close projects just because they cant efford them. If you ask about Free software yes then making money is not the focus, the focus is more about sharing but still you have some expences and you need some income even ElementaryOS or others have a way to make money from bounty program or others have a foundation and relay on donations and so on. Moneys are required to have a stable team, users and supporters
I use it for Big Data (HBase). I use IntelliJ as IDE, the build chain is Maven and sometimes I use YourKit for profiling.
Does Amazon use its own home grown microservices implementation and/or are they using some open source microservices framework like Spring Cloud?
Who said industry? I just used it to overclock my GPU in Linux.
Web Scraping and conversion to pdfs, GUI apps,converting online books.
/r/javahelp or really /r/databasehelp
Howso? 
Damnit! You made me spray soda over my work monitor! Well, I guess it's time to nag for an upgrade :D
Backend = server side, Frontend = user's browser. Once you've gone out of the browser through a network and hit some servers, the code that executes on those servers is all backend. 
Aayy wooah look at da freakin computah nerd ovah heya wit his apps
Since nobody mentiond it: Front End Web developement. 
Thats my way, btw im try to use it for web based apps :D
Try /r/relationships.
I’d appreciate serious replies lol
Since this is a *programming help* question, it should, as the *plenty hints* on the page indicate, be posted in **/r/javahelp**. Please be sure to read the [**Posting Guidelines**](https://redd.it/48eykt) there before posting. **Post removed**: programming help
I will check it out thanks
If I may ask you, eventually when you write a code with Java, and for example you write some system that updates a database every 2 minutes. Where is that code stored? Is it on some server in a .jar file? Help me comprehend how do you run Java code that's beyond my level. For all I know, I click Java and I run the program, after i close it its closed and does not run anymore. Hopefully it's not a stupid question.
Its run in a jar file, like you are used to. But, instead of double clicking it, from the command line you type 'java -jar {myjar.jar}' This is exactly the same regardless of what architecture you use, Spring / JavaEE / Tomcat based / Websphere based. It all starts with a running of a jar file. This might be done in a script that runs as part of server startup. What happens next is where it gets a little complex. Traditional java EE architecture , the jar that is run is the server. As the server starts up, it might scan other directories looking for .war or .ear files, which contain the actual application to be run, if found they are added to the class path and methods are called inside them according to the JavaEE specifications. There is a drive towards serverless applications now. Still have the runnable .jar file, except both server and application is combined into a single .jar file so no messing around with custom class loaders, or missmatches between version of server and .war file. 
You should ask him yourself. In my university students were allowed to ask questions or for clarifications.
My job: I work as a consultant so exactly what we build depends on the client. My current project is a micro-service architecture with Spring Boot based REST services deployed in a kubernetes cluster. 
&gt; Assuming you mean poorly scalable backend development in Java without J2EE containers, using something like Tomcat + Spring + Hibernate + PostreSQL, I'd say 2-3 years depending on your environment. How is that "poorly scalable"?
OpenJDK? Oracle?
So, it's a still simple file as I'm used seeing it. Alright I get it. Thank you for explaining to me. 
File -&gt; Invalidate Caches and restart If that doesn't help then probably the intellij files in your home folder are corrupted somehow. On windows that would be c:\users\you\.IdeaIC2017.2 (or similar) 
https://trends.google.com/trends/explore?date=all&amp;q=JavaFX,WPF Keep Crying. 
He trolls here all the time. 
We use spring and other open source libraries such as guava...etc. But there are also a host of internal home grown mixed with publicly available aws libraries.
Well... licensed proprietary parts can be a factor. It's why most vendors of JDK are written on-top of OpenJDK.
My bad. It is a good toy to use personal projects.
At work, I use it for writing machine learning algorithms and libraries inside of our entirely JVM-based (Java+Scala+CPP2Java) microservices architecture. At home, I started using it as the backend for my website's microservices architecture.
I would have definitely asked them as I think direct questions are the best way to go, but I'm not enrolled, I only have the learning materials. Thanks, that's the best suggestion: Ask the person about what they meant by what they had written. 
Isn't it better nowadays to use headless chrome for scraping? For example I needed to extract some data from youtube (one shot). Each page was 1MB. But with chrome, it would be easy to use the fast ajax page updates they're using.
The article is two years old, discussing what could be included in Java EE 8 -- which was already released almost two months ago.
Yeah. Both are toys the industry don't give a shit about.
I currently use it in academia, and side projects in my free time.
The front end is the web browser, running Javascript (inside an HTML page). It makes calls over HTTP to the backend, very often sending data encoded as JSON. The backend is written in Java. It receives the request, parses the JSON, very often does some database stuff using SQL, and sends a response encoded as JSON back to the web browser. The front end is not allowed to talk directly to the database.
OK so what's not crap to you?
This answer is tautological. 
Is it *really so difficult* to read the **sidebar**? **Do not post tutorials here!** These should go in **/r/learnjava**.
We'd appreciate you posting in the proper subreddit.
We (Azul) have several customers who are using heaps that are in the Terabytes. We recently increased the maximum heap size we support from 2Tb to 8Tb based on customer requirements. There are some situations where dividing data and clustering just does not work.
Honestly if the requirements of a project require desktop Java why would anyone choose Swing over FX? I would say Swing is dead and FX is picking up its place. Especially after FX8 was released and cleaned up the garbage of what it was before.
We (Azul) have several customers who are using heaps that are in the Terabytes. We recently increased the maximum heap size we support from 2Tb to 8Tb based on customer requirements. There are some situations where dividing data and clustering just does not work.
Perhaps in theory everything can be reduced to either mathematics or physics. In real-world cases this often not (yet) practical due to complexity. 
Remove project File -&gt; Invalidate Caches Remove .idea/ and *.iml files Reimport from gradle file Make sure Idea delegates the build to Gradle (it's in the settings) This usually fixes problems for me when Idea decides it doesn't like my project anymore. 
I mainly use Java all day, because the company I work 90% of services use Java. In general, in my personal projects I use it for micro services with spring framework 👌
Web services SOAP 🤓
Don't know if you're the one who made it, but please don't call it Java Play. "Play" is already a pretty big thing in Java. You might want to call it "Java Scratchpad" or "Java Fiddle" or something like that.
I work on a Ruby interpreter written in Java https://github.com/graalvm/truffleruby, and work with a JIT compiler written in Java as well https://github.com/graalvm/graal.
Awesome, thanks for sharing!
You sent this twice to demonstrate it, right? :)
I just spent the morning trying to get my SOAP web service to run. It was running yesterday. This morning I modified something in the WSDL which eclipse didn't like. So I reverted back to the old version. Should work right? Nope. Re-compiled, cleaned, restarted WebSphere app server, add-removed resources multiple times, restarted eclipse. Nothing. I got desperate and shut off my PC and restated. Bam it worked. WebSphere; I cannot describe in words how much I hate you.
Sounds like your problem is with Eclipse and WebSphere, not Java.
Spring Boot automatically embeds all those resources you mentioned. When used with Maven it'll always get the latest version off the web for you automatically. There's too much to mention but all you need is Eclipse to get started - you're doing things the old way otherwise.
Yeah WebSphere is pretty aweful. Go spring boot or at least tomcat or redhat. And use intellij not eclipse
Working in a large enterprise with existing large applications. Unfortunately, moving to Spring boot is not a choice. I wish it was though.
Ohh... Is this [0] what you meant? I named it after "Rust Playground." Despite titling this post "Java Play" (unbeknownst of [0]), the repo was titled "Java Playground." Isn't that good enough? [0]: https://www.playframework.com/
Everyone hates SOAP.
You'd get tighter integration with WAS by using Rational Application Developer as your IDE rather than vanilla Eclipse. WAS provides support for Jython scripts to automate tedious admin tasks. If you're comfortable with Python this may be your best bet. Otherwise maybe update your skill set so that you're not stuck in 2000 maintaining legacy SOA WS with Java EE et al. Modern Java development has moved on.
&gt; How do you guys deal with this part of your tasks? To be frank; by moving to a company that works on projects not stuck in 2000. I don't do pre java 8 projects anymore and I don't do projects where I'm building WAR deployments for application servers anymore. 
To code, mostly. Sometimes as a holiday destination...
 SOAP and WebSphere... I found your issue.
sounds interesting, any articles you would suggest that one should start with?
This isn't java's problem this is web sphere and soap 's problem, those are way outdated. 
Yeah. See you don't want to be overshadowed on Google Searches by this, do you? This is a great idea, something I myself would find very useful. However, this is not what will come up if I google Java Play, and I don't think you want that.
SOAP is legacy and so is deploying to bloated monolithic application servers for nee development . Spring Boot + Java 8 gets rup and running in seconds
But isn't those licensed parts tied to the JDK and not the JVM? Either way, the Java language does not really change because you use different APIs or a different JVM. Unless you use something that is outside of the Java standard 
You have a point! I didn't think about any of that when naming it, especially since it is not (meant to be) an online service. Just hacked up something to reduce friction in our school's computer lab. I'm open to alternate names, though I'm not sure whether renaming it now will help or hurt.
I wholeheatedly agree. Pre java 8 projects suuuck
:-) I suspect that's a succinct way of quoting Malcolm Gladwell from his "Outliers" book. Apparently, 10,000 hours is some sort of heuristic number to master any skill according to Malcolm Gladwell.
&gt; moving to Spring boot is not a choice You can do both, and the time to switch was yesterday.
Understandable, but that's not Java's fault. Technical debt is technical debt no matter the language.
Red Hat has a tool called Windup which will help migration to JBoss/Wildflower from WAS
Just to correct you, Gradle plugin supports BOM files as well and gets the correct version of a dependency as well. For both Maven and Gradle, it is not about getting the latest version of a dependency, it is getting the right one. The user specifies Spring Boot version she wants to use, this is a reference to BOM version, which is then used to figure out exact versions of spring-security and similar dependencies. And you do not even need Eclipse to get started. If you don't use IDE, I'd recommend using Gradle variant. The Gradle build files are way more human readable than Maven's XML.
Just cast the double straight to a long: overBudget.setBudget((long)budget); 
It's old school big iron application server by IBM. Outdated in style and rapidity, if nothing else.
So? Use Selenium WebDriver.
If you can build a docker container out of a Spring Boot service (which is pretty easy; they're runnable jars after all) you're 90% there. The last 10% is installing minikube on your system and experimenting with deploying those containers in it. 
It is a choice. It's all about the ROI. Is the the legacy product business critical? Are you spending a significant amount of man-hours supporting it? Then you're already paying one cost (several in fact if you consider how outdated that technology is mean expertise comes at a premium). On the otherside, you have the opportunity cost of a migration, which may not be insignificant. Also consider greenfielding features. I won't mention the m-word, but you can create a separate application for new features with minimal touching of the legacy app. They can be deployed on the same machine or communicate through REST or SOAP. You may not need a microservice architecture (aarrrgh I said it) but the strategies can be helpful regardless.
I'm glad they're shifting towards lightweight and speedy. WLP got it started and now they have Open Liberty https://openliberty.io. Its made Java "EE" coding a breeze.
Nice!
Nah, you just need to use the right stack. CXF for endpoints and Spring WebServiceTemplate for clients.
They could say whether it works with Java 9 and/or JEE 8... (somehow I do not manage to find such info on Payara's website)
What do people use? I've seen reddit say FX was the best
Payara 5 is the EE 8 version. Currently in alpha.
Java + Spring with auto configuration. Easy to build services, JPA objects etc. A good IDE can speed things up. I've really taken to IntelliJ over the years. 
SOAP, 100kb of XML for a 32 byte message. 
Haha this exactly what /r/webdev and /r/javascript talk about everyday.
Swap to either Spring Boot (if you're Springy ) or Dropwizard. It's simple and fast, and no XML.
Please, stop. Enough is enough. You had your more than fair share of self-promotion going through, but there is an end to everything. You really need to read: [**What constitutes spam? Am I a spammer?**](https://reddit.zendesk.com/hc/en-us/articles/204536499-What-constitutes-spam-Am-I-a-spammer-) Consider this your first and final warning. Another of these *Picoli* related posts or more *self-promotion* and you will be banned.
 C:\Users\Lukas&gt;jshell jshell&gt; System.out.println("Hello World"); What's the problem?
Is it *really so difficult* to read the **sidebar**? **Do not post tutorials here!** These should go in **/r/learnjava**.
Loads of enterprises run Spring and/or Spring Boot. I assume you're a dev and don't have a lot of authority, but give Spring Boot a try and put a bug in the ear of your team and your architect. Don't say "it's cool", say "it saves money" and business might actually take it seriously.
While spring boot might not be a choice, you could still switch build systems. That will save you and future devs a bunch of time trying to set things up. If the project uses ant or worse, something like make, you would be wise to switch in something like maven, gradle, or bazel.
People give maven shit for it's xml. But it really isn't that bad. I don't spend more than 1% of my time looking at pom files. It is mostly go in, slap in dependency X, and move on.
https://youtrack.jetbrains.com/issues/IDEA
Since this is a *programming help* question, it should, as the *plenty hints* on the page indicate, be posted in **/r/javahelp**. Please be sure to read the [**Posting Guidelines**](https://redd.it/48eykt) there before posting. **Post removed**: programming help
That's what I thought. You have nothing. Go troll somewhere else.
That's ... not really an improvement now, isn't it?
As many others here are saying - the problem is not Java. The problem is that you are stuck in a dead end job supporting a system that's designed some 15 years old misguided practices that were never really accepted as sane in mainstream java even those 15 years back, but got enormous amounts invested by people using drugs of dubious quality in multi-billion-behemoths like Oracle and IBM and Sun. You are now well and truly f*d for being stuck in the whole mess J(2)EE is/was/will ever be (which is why it has been on a gradual "take it out behind the barn and shoot it" slope for a decade now). You don't have a technical problem. You have a management problem (which you can't do anything about) and you have a payroll problem (since switching jobs will affect it). As to your question - it's moot. You shouldn't be thinking on how to improve the setup of dead beat technologies. You even seem to be using Eclipse, which is a special kind of sprawled evil in every orifice on its own. --- Here's what you need to do (at home. At office you'll be summarily shot for heresy if you do any of the following). 1) Choose a usable IDE. IntelliJ is a usable IDE. 2) Play around with Spring Boot (if looking for something to market your next move on CV) or Dropwizard (if you want to be awesome). 3) Spend some time writing a small java 8 project here and there (it'll be useful - effectively Java 8 is now the LTS release which means that for next 5 years it will remain relevant). I kinda expect that you are stuck on Java 6 or 7 codebase right now. Java 9 might be a bit too much of a culture shock for you at this stage. 4) Enjoy. You'll love it. 5) There's always a choice to proactively choose not to work with old/shitty tech. In case of J(2)EE it's not even the fact that it is old (which would imply that it was ever acceptable), it is the fact that it was _always_ a crap stupid pipedream for whiteboard architects. Start making decisions that will expose you to projects you'll enjoy. 6) Remember to raise ticket requesting access to dev JMS server port X from your development machine during business hours and hope it is granted in less than a month. Just after you have signed all appropriate non disclosures to be granted the privilege of logging into the issue tracking system (no rights to see the actual issues yet though).
You can currently run both Payara 5 and Payara 4 on 8, 9 support is planned for 5 in the future https://github.com/payara/Payara/issues/2030
Payara 4 works on JDK 7 &amp; 8 and EE 7 and earlier apps run on it.
Yup. Java recently voted most boilerplate of all currently-dying langs
Eclipse is more than OK... For a Free product. 
Time to try out Spring Boot my friend
Is it possible to use REST in place of SOAP within your organisation or is the rest of your infrastructure already there?
I did 2 small projects with Spring Framework, Hibernate and EE about 2012. I heard that things improved since, but it was so traumatizing that I decided to never again do an application with anything related to Java EE. Now I am doing apps targeting JVM and I am almost happy person. Just not using the whole Java EE ecosystem.
Where I work, we never use hibernate. I'm in heaven :)
I'm stuck at version &lt; 8 and not really up to date on what the big improvements are in 8/9. What is the cool way to deploy nowadays?
The best time was yesterday. The second best time is today.
I did all of this, and even tried completing using a new machine without IntelliJ ever installed on it. Did not work :(
Tried all of this, seems like the IDE git rm'd some of my files... luckily didn't lose many. And the fresh PC never had IntelliJ installed on it.
Tried both suggestions neither work :(
Going to submit a report here.
Intellij is better for a free product. (I haven't actually used the community version of IntelliJ, so it really depends on what java development you're doing. I personally think Ultimate is worth the cost if you're a professional developer.)
Programming can be so much better than this!
Worth the watch. Thanks.
Where I work we use three frameworks for our code, depending on who is team lead and the use case. * Spring Boot - I like this one. It's very simple to get going with, and you get access to the whole Spring ecosystem. * Play! Framework - I feel less good about this one. It's fast to get going, sure, but there is a lot of static methods, and it reinvents the wheel quite a bit. * Java EE 7 - This one surprised me by how easy it is to get going. We run this on WebSphere Liberty Profile to provide REST microservices through JAX-RS. Apps are very small at a few hundred kilobytes each and deploy in seconds. Definitely an excellent step forward since I last touched Java EE ten years ago. And Java 8 is a great language to work with. I especially like the new functional add-ons and concurrency extensions (oh, and the java.time API. I can't recommend it enough). The big WebSphere ND server is quite a different beast. It sucks that you have to maintain legacy code, and I hope you get to be free soon!
Come on, while Eclipse isn't the greatest, it does have a good set of tools &amp; navigation for most dev purposes. Def not a "sprawled evil in every orifice", and if it is no one's forcing you to use it
I've done some quite complex stuff with both Maven and Gradle. Maven XML is not bad at all, once you spent a few hours with it, you do not notice it anymore. I was referring to an imaginary person who is just starting with Java and have never seen any of the build systems.
You're welcome! I, too, thought it was worth the watch.
Seems like it's not 2017.2.6 that's the issue, but rather the new Kotlin 1.1.60 plugin that's the issue. Reverted to 1.1.51 and all works great now!
I use community edition even though I could ask IT for a license. There aren't any features that I can't live without...
Wildfly is another option with significant improvements (vs say WebSphere Liberty). Wildfly Swarm is a fuzzy cloud between choices at the moment. That said, Wildfly startup time is sub-3s for JavaEE Full profile. Configuration is totally scriptable, including JMS, JDBC, SSL, etc. Not knowing WHAT about the laundry list above is your pain point, it's harder to say where to best suggest things.
I don't know WHY you think that... writing JDBC by hand makes me want to annotate lots of fields. xD
LMAO. Why do you hate so much the fact that the industry doesn't give a fuck about JavaFX?
Second this on JEE. Despite what everyone else is bitching about with JavaEE, 7+ with JavaSE 8+ is a MASSIVE improvement over the past, especially with a sane IDE and build system. Lots of Spring concepts and patterns were pulled in, and lots of old crap deprecated.
Answer my question.
What? A GUI framework that the industry cares about? Qt is one. Answer my question.
I find it's a good way to make custom applications for people. It runs on anything and there's so much information about Java that literally anything is possible if you're good at researching.
docker containers, and lot of spring boot running around. also even if you are still doing wars, you should not need to write any xml anymore if you're in an ee7 environment.
I wouldn't say it's legacy, all this hoopla about documenting rest services and auto generating clients with things like swagger are basically people reinventing soap. 
Fuck rad, that shit's cancer. Just add the stupid ibm certificate to you normal jvm's keystore and run a regular ide with an ibm plugin.
My apologies. Thought this doesn't seem that applicable to /r/learnjava
I've seen enough web sphere to answer emphatically with no doubt that it is.
na you make the jpa objects then use spring data on top of it, takes a bit to get used to the method signature syntax, but it's magic.
Ah, the spring boot hammer
we python now :p
What you're thinking of is called batch processing. Either the jvm is up 24/7 or an external scheduler for instance a cron server will kick it off at the proper times.
not 100% there's library jars and runnable jars, runnable jars will have a class with a main method somewhere, and a meta-inf entry. 
I don't hate any facts. Facts are just facts and the fact is is that JavaFX is the best GUI framework around today. So keep crying. 
What about the N+1 problem?
Not sure anyone else mentioned this, but, IMHO, Eclipse can be a mess with complicated frameworks. I've found IntelliJ much more stable in this regard.
I read that I would really miss all the Spring niceties that Ultimate comes with. Sure, each of them is only little, but together they make life so much easier. It's one of the few pieces of software I pay for. The 90 GBP a year cost more than pays for itself.
I don't use spring :)
Ouch. You’re right. I did read those a while back but figured that being open source, non-commercial, and interesting to the Java community, posting would be acceptable. But then I got carried away, posting for each new release or new blog post, and looking back I agree it has become too much and I need to slow things down. A lot. Can I ask your advice on what would be an acceptable posting frequency on this topic? No more than once every 3 months, 6 months, 1 year?
As a recent java beginner I would be interested in hearing more about this if you don't mind mind. 
Maybe you should be looking at liberty???
It's not strictly for working with traditional sql relational databases as it's datasource so it needs a jpa provider for a compatibility layer. I also strongly suspect it mostly exists to show case a different cool trick; you only write interfaces and it uses reflection to fill in implementation at run time. 
Right, and I rarely even need to slap in dependency X, because IDEA can usually find it and put it in for me. The main think I spend time on in the poms is plugin configuration. 
Okay, that's good to know, but... you didn't actually answer my specific question. In my experience, dealing with several tables in a query sooner or later ends up in a situation where JPA or hibernate makes one query for the basic data, and then makes one additional query per row returned. Unless you use lazy data loading, which increases your code's complexity up to the point of tears and lost hair. Using a traditional SQL-based approach avoids this conundrum, and it's particularly useful when you need to extract data from several among 100+ (yes, setiously) tables.
thanks for your input all! i got it working 
IntelliJ IDEA new project wizard handles 90% of the setup. In your scenario, with such a high demand for java developers, I would switch to a company that is good about staying current, mostly for your own benefit, working for a company stuck in the past makes you less marketable when you do consider a move. Web Sphere and SOAP is about 12 years behind the times.
I absolutely hate anything that smacks of what I call "systems administrator work." I either get completely disgusted, or else my whole mind suffers a brownout and I get sleepy. "XML Hell" is actually kind of legacy. You can find easier ways of doing things. Stay away from SOAP and the others whenever you can.
I interviewed a guy a couple of weeks ago that said he hadn’t really looked into Java 8 since he wasn’t aware of any companies who had moved to it yet. I felt bad for that dude. I had forgotten there were companies that wouldn’t already be on Java 8 by this point, but hearing that reminded me of my first job. I bet they’re still on Java 7, too.
oo thought you where talking about the additional layer of abstraction issue. not really, how the query is generated is decided by hibernate even with this library. It does mildly encourage you to follow good practice structureing your jpa which may help you avoid that, but no direct fix. Well other than letting you also just directly use sql/jql whatever you want to call it, if you really want to anyway still with an annotation, but that's not really better either.
Ever take a look at jOOQ? Feels like raw SQL but it's typesafe. Not a huge learning curve.
I read a few paragraphs, thought "Oh, this must be Yegor Bugayenko." ... *looks at the author* ... "Yup." I mean - the guy *is* brilliant. In a way. In a world where he could rule all the conventions and add/remove some language features, he'd be king. Right now he's just a misunderstood prophet, and I disagree with over half of what he says.
It’s all about the money. See if you can’t put together a quick meeting that outlines how moving to a new system/technology would benefit the company and how they would save money (try to be tangible with estimates). No one is going to switch just because someone wants to do the “new” thing.
Maybe I'm missing something but I'm failing to see how using constructors is better than static factory methods. A static method is so simple. Why replace it with multiple classes and a more complex class heiarchy? Also, I don't see why you can't do caching when static methods are involved.
I only like coding with Java when it's related to Android or Spring Boot. Even with those I'd like to transition into Kotlin.
Right - people forget that there are some algorithms that we just do not know how to efficiently distribute. People say 'just run multiple processes' and I say 'fine, but you'll need to do the research first to find a new algorithm that works tractably with that'.
C# is probably it's biggest competitor. It's been called Microsoft's Java at times. 
Even without docker containers, building fat jars with embedded Jetty (things like Spring Boot and Dropwizard support this out of the box) so that all you need is a JVM to run your app
&gt; Unless you use lazy data loading, which increases your code's complexity up to the point of tears and lost hair. Can you elaborate a bit more on that? You're eagerly fetching your data all the time? That sounds like a recipe for disaster... &gt; Using a traditional SQL-based approach avoids this conundrum, and it's particularly useful when you need to extract data from several among 100+ (yes, seriously) tables. Hibernate is good for persisting the object graph - not so much for fetching it. We went from criteria queries to spring data specifications (not much better, just looked nicer...) to our current use of [querydsl](http://www.querydsl.com/) for fetching anything outside of the simplest queries (findOne on repository methods, etc.). As you mentioned, it is more like regular sql that allows you to specify exactly what you need (mostly) but type safe. Since we still use JPA it is limited by that (no window functions, etc.) but outside of the infrequent native query we found it serves us quite well! An alternative is [jooq](https://www.jooq.org/) but it isn't free unfortunately :( Looks great though, much more powerful than querydsl. 
It does look great. Unfortunately we skipped over it in favour of querydsl due to its cost. We've been pretty happy with it though - it provides a similar approach minus the more complete features jooq offers (window functions, keyset pagination, etc). 
&gt; Why replace it with multiple classes and a more complex class heiarchy? Yeah, this part of the article is what got me. Maybe it was the article example being too simplistic but to me it just screams as finding the first OO "solution" just to refute the point Bloch made in his book. Of course it's perfectly fine to disagree and have your own preferences, both approaches work, but yeah... not exactly a great argument against static factory methods.
Sigh... my current company just moved to ee7 about 6 months ago...
There are a lot more features than just spring, although spring is one of the biggest ones. Personally I'm a fan of the database tools integrated into the IDE - all my environments are set up and one click away from viewing the schema/running any statement. Pretty useful. If you can get a license from your company I'd say why not go for it? You might find something useful :P 
Creating AI solvers for board games (well, that plus the actual playable board for the games made from Swing - still have yet to make the plunge to JavaFX fully). I find that Java really lends itself well to this kind of projects.
It's free if you use an open source database.
If you only learn new tech because your company is using it, you're a garbage developer.
I tried Datagrip (the standalone version of the integrated database tools) and while it was pretty good I kept going back to SQLWorkbenchJ, mostly out of habit. I guess I should ask. But again, I don't feel like my IDE is slowing me down.
I feel you. I spent the better part of two days trying to get it working locally before giving up lol. It is amazing just how much you have to set up to get it working properly. Not to mention for whatever reason the admin console would error 500 randomly from time to time and lose my configuration settings I was making?! It made absolutely no sense. You would click "application servers" or whatever and instead of listing them it would fail. Then you would click it again... and boom, it worked. Like... what? 
&gt; WebSphere Application Well there's your first problem. Websphere was part of the first wave of enterprise app servers. This is stuff from before 2000. And yes it sucks a bunch.
My company has plenty of Java 8 in our new products but some of our legacy contracts still use Java 1.4 and we have to support it until the end of the contract. It predates fucking *generics*. 
Oh yeah for sure, whatever keeps you productive at the end of the day is what is important of course. What encouraged me personally was just how slow SQL Developer was. It also had this fun quirk of stating "connection busy" whenever you tried to do literally anything in the UI (expand list of tables, view definition, etc.). So annoying. It has gotten better though with newer versions, but at this point I'm sort of the opposite of your situation - use the database tools by force of habit instead of using SQL Developer :) 
Oracle :( 
Can vouch for Eclipse being evil, when I worked in J2EE/WebSphere (for an internship in 2013 on a Struts 1 app mind you), we had to use a delightful version of Eclipse called Rational Application Developer (RAD). RAD, for those who don't know, dates back to the dark days where people weren't sure whether we'd survive Y2K and Eclipse was a closed-source commercial IDE. Eclipse was to blame for 50% of my daily development woes. The whole "I had to restart my computer to get the build working again" comment above sounds about right for RAD. I can only assume the pure open source versions of Eclipse have _fewer_ issues, but after seeing the nightmare caused by Ecilpse's weird hangups on caching, pathological obsession with Ctrl+S'ing all day and night while hoping the cache wasn't corrupted, and other delightful quirks while waiting two hours to attach a debugger to a development WebSphere server, I swore off Eclipse. Then, when I tried IntelliJ and realized what an IDE _could be like_. I've never looked back.
I like SOAP, don't understand the hate. I find it far easier to work with than REST.
&gt; "Giving birth to an object through its constructor is the most "sacred" moment in any object-oriented software, don't miss the beauty of it." What exactly was that article about?
I made a promise to myself to never work for a company that uses websphere.
It's a new religion, called instantialism.
Sure Thing! I'd be glad. Since you asked quite openly, I will just tell you something. If you still have questions, just ask. I work at a big company not huge but enough for there to be several IT teams. We use the company git to store the code in and download it. Inside the branches is a huge Java maven project. Inside this project are more maven projects that each handle their own task (e.g. one starts a WLS Server, one handles EJBs...). I normally don't have to change anything there. The technology I daily use are oc my IDE IntelliJ^best one there is An Oracle Database, Java Beans, JPA for persisting objects, jsps for the HTML files and Stripes, a Java Framework. Also quite useful is JRebel, it detects changes in the code and updates the server. Without it, you'd have to redeploy everytime you make a change and depending on the project, it takes up to 5min+
"And then he saw light" (well, Netbeans were a nice IDE for a while too)
Ah, the lesser of ancient evils argument. Fair enough. One requires hourly sacrifice of a white, non-willing, virgin, the other is content with fortnightly sacrifices of a black goat.
How long did you complete the bootcamp? 
thanks, but what is Payara "5"? the OP mentions version "174", and he download [page](https://www.payara.fish/downloads) refers only to 174 as well. Is 5 a very old version? Or rather it is some weird numbering scheme? I wouldn't mind trying Payara instead of Wildfly, but the quite limited info on its webpage doesn't look like a good sign... :( 
Current project is a bunch of Spring Boot microservices deployed as docker containers in a kubernetes cluster. We automated the hell out of it so anything I push automatically goes through our CI/CD pipeline and can be deployed manually or automatically. Our Dev (integration) and master branches get deployed to our Dev and Test clusters respectively. 
&lt;3 JOOQ.
I'm realizing that I don't hate Java like I thought I did. I hate the Android development tool chain. So much BS with Android studio and emulated devices and actual devices just to get to the coding part... Meanwhile I can spin up a Rails CRUD app in no time.
Well I never took a 'bootcamp'. I started an education at my current company, they thought me everything about java. Before I knew about PHP, JavaScript. Anyway, it takes two years to complete the education.
Pretty much out setup, minus the kubernetes clusters (it's on the horizon though). There's absolutely not reason to deploy a WAR to some container anymore - maybe for really REALLY old projects stuck with JSPs (Embedded Tomcat has an issue with its JSP cache).
Sorry, I'm in Morocco at the moment and the internet connection in the hotel is not great. I thought it had only gone once :-).
You - and probably everyone else - on your team should probably script that (usually one-time) configuration and just be done with running the scripts with wsadmin. If you don’t know where to start, then clone [wsadminlib](https://github.com/wsadminlib/wsadminlib)
This is the reason I tell younger devs that they \*must\* have some kinda hobby project(s) at home otherwise they'll get bitter &amp; twisted from constantly slaving over prehistoric frameworks/tools/platforms/code that they use during the day.
This is more of a problem with developers not understanding contract-first WSDL development than anything else. You end up with that kind of stuff if you generate your WSDL from your Java code. 
You forgot all the --add-opens you had to add to all your applications though ;)
http://blog.payara.fish/topic/payara-server-5
Since this is a *programming help* question, it should, as the *plenty hints* on the page indicate, be posted in **/r/javahelp**. Please be sure to read the [**Posting Guidelines**](https://redd.it/48eykt) there before posting. **Post removed**: programming help
I won't say I enjoy Java, but I don't mind it. The overly complicated frameworks though, yea I could do without them.
Wait? You modified a WSDL? As in actually touched the XML instead of having the WSDL be generated from your Java code? Well that's your problem. When I was using Axis2 I never ran into problems like that.
SOAP is easy. WebSphere... well I used to get paid to crash it.
Bullshit. There's no reason why generating WSDL from Java should cause that.
Swagger fixes a lot of the problems with REST. We're pretty close to the point we were at 2 decades ago where we just auto-generates the client and not think about the plumbing.
I don't. I've got no problem using SOAP with Axis2 or WCF. Most of the time I don't even think about the fact that SOAP is being used as the wire format. 
Lucky
Bring me up to date please (I'm still building war's): what's the modern way to deploy?
who IBM or soap / web sphere ?
Learning outside the job is one thing, actually becoming proficient is another entirely.
...and in turn, the Android Development toolchain is a *dream* compared to iOS. For the simple vanilla App path, sure, is 'shiny Apple easy', but encounter any project that demands different build configurations, multi-module development etc. and the pain begins and never ends. The worst bit is so much can only be defined in the UI/xcodeproj file. I don't even want to think about the code signing process that keeps 'improving' (read: breaking your CI configuration) and command line tools with undocumented arguments and no error messages. If it wasn't for Apples dominance, their Dev toolchain would be laughed off the scene.
It neither is applicable here because it violates the *"no tutorials"* rule. Probably it fits best in either a general subreddit such as /r/learnprogramming or in a Python specific subreddit such as /r/learnpython. 
Nobody likes SOAP
Funny, I deal with some projects where we were moving out of java 6 a couple months ago... 😖
What you described isn't Java. By the looks of it, you're referring to an undisclosed product that implements a J2EE specification. Is J2EE horrible? Yes. Don't use it, there is plenty of other work for backend JVM programming.
I work on a project that hasn't long moved from Java 6. The code base is such as mess (and there are no unit tests) it's unlikely there will be much refactoring to add Java 8 or 9 features. Sigh.
I don't think it's good to advice anyone to learn Grails today. It's really outdated and outshined by other frameworks, and Groovy is not used many places, only for legacy. Mind you, I've worked with Groovy and really like it, but really it's not worth it to learn over many other things due to employability . Plus if you google issues there will be next to no help
So you never seen a WSDL generated from a POJO that had a byte array end up something like this: &lt;array&gt; &lt;byte&gt;1&lt;/byte&gt; &lt;byte&gt;234&lt;/byte&gt; ... &lt;/array&gt; Good for you. Because I have. And that's just one single problem. Most of the tools generating WSDLs were dumb as heck adn typically would end up with really messy client stubs. The proper way of handling it is creating the WSDL by hand and using it to generate both the server and client stubs. Not generating it from your classes. 
It's hard to take an author seriously if you start out with absolutes like "I believe that static methods are pure evil". Static factory methods can do something constructors can't; return something other than a new instance. If you want to return a cached value, a subtype or a null value, you can't do this in a constructor. This is why the "valueOf" factory methods have been around since the beginning. But this bit: "However, the right solution would be to use polymorphism and encapsulation, to decompose the problem into a few semantically rich classes" That's just moronic. You're creating code that uses inheritance for no other purpose than avoiding the use of factory methods. 
&gt; I mean - the guy is brilliant. Brilliant software engineers create simple solutions for complex problems. He's doing the opposite. 
5 is the newest version of Payara, which is currently in an open Alpha. You can download the latest Alpha here: https://www.payara.fish/upstream_builds Payara 4.x is based on GlassFish 4.1.2, and so is a little older. The numbering scheme is a little weird as it comes from the GlassFish numbering scheme, in order to make it clear which version of GlassFish it is derived from. 
noob here . . how do you tune up embedded server?
I think people are misunderstanding the **factory method pattern**. Just to quote wikipedia: * How can an object be created so that subclasses can redefine which class to instantiate? * How can a class defer instantiation to subclasses? I fairly agree with the article telling us not to solve everything via static factory methods if we are not required to but sometimes it is easier on the human brain to offer only one solution.
I don't have any of those problems. 
yaml files. 
It's Yegor, if you have time, look his other posts, according to him, anything that is not "pure OO" is evil for no reason.
Agree, instead of moving forward and embracing some FP, he just labels it as "bad", with nonsense arguments
walla walla washington
As long as it: * has EE in the name * uses XML or annotations * make people use Hibernate * promotes WAR approach * is considered by people to be old, over-complicated way of achieving even the simplest goals where one would have to use project/code generators because minimal setup is outrageously big I don't think it will matter how they name it.
&gt; As long as it: has EE in the name ... I don't think it will matter how they name it. Considering your first point, wouldn't changing the name then at least be a move in the right direction? ;) Of course, in reality "EE" seems to be pretty strongly rooted with people involved, so it's likely not going anywhere from the name...
Just a joke ;) I mean, for people who use and like J2EE it shouldn't matter, for those that hate it (for whatever reasons) anything that reminds them if EE hell is a minus. So IMHO, a lot of things would have to change. And probably for no good reason - if you want something else there are plenty of options. Meanwhile J2EE authors probably don't think that their solutions is bad, after all it's proven, it worked for years, why should they make more than cosmetic changes? And both groups are right, so...
Is the 18.3 and 18.9 versioning scheme officially dead?
It was only ever a proposal. Now there's a new proposal. But yes.
ultimate eclipse enterprise java turbo edition for servers 40,000
With Hibernate, it's hard to optimize SQL unless you're just using it for writing and read into entities using native SQL. Also, Hibernate uses JDBC, which means blocking DB drivers. PostgreSQL, along with ACID in general, are extremely difficult to scale horizontally effectively. Tomcat, which means Servlets, are really not designed for non-blocking programming, so you're stuck with the thread pool capacity. Spring is a bloated beast with lots of overhead. I'm talking 5000 - 20000 requests per second on a regular developer's box depending on the amount of business logic.
I disagree with literally all your points.
Java Money Sink Edition.
 Java McEnterpriseFace
Unfortunately "we’re not going to choose Boaty McBoatface or the like" :(
Needs more buzzwords. &gt; ultimate eclipse enterprise java turbo-AR edition for deep-IoT blockchain webscale servers 40,000
That is simple. They are: Basic4Android (B4A), Retrofit 2, Android Data Binding, Dagger 2, Stripe, and that is why: https://www.cleveroad.com/blog/android-application-development-framework-see-all-benefits-frameworks-have 
Java Developers Aren’t Handling Unicode Properly from the Clipboard, Report Finds
Link please?
I thought it was a fantasy location.
[OpenPDF](https://github.com/LibrePDF/OpenPDF) 1.0.5 released today. OpenPDF is a Java library for creating and editing PDF files with a LGPL and MPL open source license. OpenPDF is based on a fork of iText 4. 
No, the proper way is to: 1. Encode it as a Base64 string in your DTO 2. File a bug report against the broken library that didn't do step 1 for you in violation of the standard.
We are on Java 7. Sigh.
Bingo 
As someone stuck in WAR/XML past, why do new Java projects no longer require XML?
Sure - I know it doesn't apply here. I was just stating it doesn't apply there either. Thanks for the links.
Look into Spring-Boot, including Spring-Cloud. Spring-Cloud wraps a lot of great REST libraries (like the entire Netflix OSS stack). A lot of Spring Boot auto-config "magic" works very similar to Jigsaw in Java 9.
Here's where you actually get the report: https://info.veracode.com/report-state-of-software-security.html But they want you to give them info first...
More than likely wouldn't that be reddit's "suggested title" messing up?
don't need web.xml anymore, https://docs.oracle.com/javaee/6/api/javax/servlet/annotation/WebServlet.html don't need context.xml for spring anymore, https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Configurable.html those were the two big holdouts, if you have something more specific you think you still need xml configuration for I can probably find a way to do it in pure java classes.
Eespresso. It gets: 1. The inherent coffee pun 2. The necessary “EE” bit 3. It has the benefit of being pronouncable
It honestly depends on what you think it's more important to you. The language itself hasn't changed too, too much. (Lambdas, streams, new date and file packages) are easy to learn if you knowledge of Java is solid. The surrounding areas of Java has been changing a lot. I would suggest keeping up and learning git, Maven/Gradle, Rest/JSON, AWS and other cloud providers, Docker/Vagrant development/Deployment. The tools surrounding java has improved a lot, but are also a lot more complicated. 
I'm not sure I understand what is going on. Oracle no long wants to call Java Enterprise Edition ( Servlets,emai, rmi , jdbc APIs ) JEE? Is that right? Where does Eclipse come into this?
I thought that some portion of Amber would be in 10
&gt; Of course, in reality "EE" seems to be pretty strongly rooted with people involved, HR people still advertise for "J2EE" though that hasn't been around for 17 years. :-). I never understood why there has to be a Java Standard Edition and a Java Enterprise Edition. Challenge my ignorance. Does *anyone* , aside from students learning Java, use just the compiler and runtime? The moment use use anything else you are using one of the "enterprise" APIs ( JDBC, Severlet API, RMI, etc ). Why not just call it "Java". ?
I think the change from J2EE to just Java EE was "only" 11 years ago.
TL;DR - Basically type inference and nothing else interesting.
How do you figure? Java 3 came out in 2000, supplanting Java 2 ( 1.2 ), so *that* was "J3EE". Did Sun just use the outdated "J2EE" name for 6 years before coining "JEE" ?
&gt; nothing else interesting I'm kind of OK with this. Its a relatively old, stable language. I want faster and cleaner more than I want new.
Since this is a *programming help* question, it should, as the *plenty hints* on the page indicate, be posted in **/r/javahelp**. Please be sure to read the [**Posting Guidelines**](https://redd.it/48eykt) there before posting. **Post removed**: programming help
I haven't used iText for a while but if I remember its history, it was built by a european developer while in school. His home country then unfairly taxed him a large amount. So he decided to make the subsequent versions of iText into a commercial version. Is OpenPDF based off the last open source version of iText?
Local variable type inference is part of Amber!
&gt; Does anyone , aside from students learning Java, use just the compiler and runtime? Up until about a year ago, I did. Well, and JDBC but that's included in Java SE. 
Static factory methods can also have more useful names if there are several variations.
Some GC changes that I don't tend to mess around with.
Pretty sure there's a 30 day evaluation version for the ultimate edition, maybe have a look at that and see if it seems worth it to you!
Yes, it was J2EE 1.2, 1.3, 1.4, and then it became Java EE 5. Nonsensical versioning was a Sun tradition and they were good at it.
I would fucking love to finally see properties in java! But fuck me. Instead i will have local variable type inference, which can be great for some long generic class names, but still i would prefer to write the type anyway for better error checking. Also, isn't it a little too small a change to be a major part of the new jdk??
You can’t make me speak Spanish. I didn’t press 2.
It was almost like [Doom versioning](https://doomwiki.org/wiki/Versions_of_Doom_and_Doom_II#v1.666) - Doom 2 v1.666
Oh right sorry. I'm really lusting for case classes and pattern matching. I thought some of that would make it to 10
Sounds good, at least this should be a quick update. Hopefully jdk 11 will be as light as this one. 
Given that we now have time based releases, there's no such thing as "too big" or "too small" features. Only "done" features.
Close, it's a lil messy. Oracle have recently announced that they are offloading the entirety of Java EE to Eclipse, to be completed November next year. https://blogs.oracle.com/theaquarium/opening-up-java-ee First rebranded EE4J, they are now seeking for a display name for the entirety of Java EE, given that they will likely not be allowed to use Java.
I don't think you should have to pay oracle to make your own java, but if you do you should have to implement the whole thing or you have to constantly make it clear it is not java.
it's making a shitty copy then not making it very clear it is not the same thing. It's like if I took an authors book changed a few places to make it shit published it without a title, copied the cover art and put it next to the original book on the shelf. Maybe not illegal but kind of a dick move. they need a real name for what they've created, it's not even fully compliant with java6.
Is it *really so difficult* to read the **sidebar**? **Do not post tutorials here!** These should go in **/r/learnjava**.
do they even have a name for this other thing they've created, because I've never heard someone say let's write some dalvik.
Goetz said they looked into adding properties in the past. Everyone agreed they wanted properties, but no one could agree what "properties" meant.
)))
The nice thing about the time-base release cycle is that pattern matching will be able to released in parts. Type test patters will likely be the first part released, and will get deeper from their.
Nice point
So Oracle will still offer Java SE, but they will do no more work on the APIs for the EE, and they are giving it the organization that develops Eclipse? That is insane.
Java.net That should not confuse anyone
&gt; Why replace it with multiple classes and a more complex class heiarchy? To be fair, one of his examples does make sense - calling lighten() on a PanteneColour vs RGBColour would do different things.
What, haha? Goetz talks about it [here](https://youtu.be/jDU-JALUDd0). [Data classes](http://cr.openjdk.java.net/~briangoetz/amber/datum.html) are an upcoming feature that might be what you are looking for.
Ya if you want type inference and a bunch of new shit go play with Kotlin, its glorious.
I'm a bit sad that [`val` didn't make it](http://mail.openjdk.java.net/pipermail/platform-jep-discuss/2016-December/000066.html) into Java. I like in Scala in Kotlin, though I have to admit that Java is not nearly engineered towards immutability (but that could have been a starting point).
They are very clear about it. The Android VM was called Dalvik (now ART), the bytecode comes in a .dex file rather than .class. It's only using the Java language to target their own VM. It's like using C# to write Android or iOS apps, just because you are using C# or MS owns the languages does not mean that you are using the whole .Net stack on mobile or your code can run without modifications on a regular PC.
https://spring.io/guides/gs/serving-web-content/
That code being able to run without modification as long as it has a jvm thing is a core promise of java. A third party breaking that promise is a dick move. Think about this, if it's not java does the language they've made even have a proper name, who has ever said "let's write some dalvik". People in this thread even keep calling it dalvik, but that's just the vm, and that vm is not even in use anymore they have a different engine now.
Spring Boot is advocated because it's both open source and free. Its licensing model allows you to sell whatever you build with it, but then sky is the limit for corporate/in-house apps. [If you follow instructions like these](https://debugnotes.wordpress.com/2015/02/02/setting-up-a-spring-development-environment-for-web-development-in-ubuntu-14-04) you can get started pretty quick, and it will not cost you anything other than time and effort. Download their starter projects and run them, and you'll understand pretty quick what it can do for you.
At lease we can type `final var`, haha!
&gt;That code being able to run without modification as long as it has a jvm thing is a core promise of java. Java as a whole, the code, the platform/libs and the JVM . Android is not Java. Google is just using the language. They could have choose JS o C# and I guess some people would be mad just because the same code does not run on a browser with Ecmascript 6 compatibility or on Windows machine with .Net.
blockchain? i would like to invest in your startup. will 10 million be enough for the next 6 months?
it's been a core language thing since the early 90's it'd be more like if they wrote it in python with brackets.
it's been a core language thing since the early 90's it'd be more like if they wrote it in python with brackets.
They could have choose Fortran or Basic if you like, the language was selected for the popularity, convenience and it's ties with the original idea of using the JVM.
Another voice for spring from me. Sounds like you are experienced enough to appreciate it when you see what spring does for you out of the box. At first it might seem like magic, but it is nothing more than some fancy reflection, factory factories and code generation. I'm like you, I like programming, I hate the configuration part. Spring does a lot of that for you, 'magically', and you can focus on the important business logic. &lt;--- and this right here is the statement how you sell new tech to old bosses.
Not another boring Shenandoah video, this one has much more juice in it. And charts, details, and pitfalls. What a talk! https://wiki.openjdk.java.net/display/shenandoah/Main for general Shenandoah info Has anyone tried it with a _small_ heap? Let's say I have a 200 MB heap (!!), latency intensive application that does not care about throughput in general, and allocates sometimes, in mad spikes. Right now we're using Parallel as it's nice and fast with such a small heap. I wonder if Shenandoah can get anywhere near.
Copied verbatim from the Shenandoah wiki: &gt; Shenandoah performance, like the performance of almost all other GCs, depends on heap size. We expect it to perform better in cases when there is enough heap space to accommodate allocations while concurrent phases are running. The time for concurrent phases correlates with the live data set size (LDS) -- the space taken by live data. Therefore, the reasonable heap size is dependent on LDS and allocation pressure in the workload: for a given allocation rate, larger LDS-es require proportionally larger heap sizes; for a given LDS, larger allocation rates require larger heap sizes. For some workloads with minuscule live data sets and moderate allocation pressure, 1...2 GB heaps performs well. We routinely test on 4...128 GB heaps on various workloads with up to 80% LDS size. Don't be shy to try different heap sizes to see what fits your workload. I am running shenandoah/jdk8u and shenandoah/jdk10 builds for my IntelliJ IDEA and CLion, respectively, with modest -Xmx4g heaps, and it seems to perform better than the default config, which runs CMS. (Admittedly, I am running these as dogfooding looking for weird GC anomalies like crashes, lockups, hiccups, etc, not for performance).
&gt; Java 3 There was no such thing. J2SE continued until 5.0, and the 2 was only dropped with Java SE 6 -- for EE one version earlier, as already mentioned.
&gt; ... but they will do no more work on the APIs for the EE ... They are a member of Eclipse, and (at least on paper) will continue contributing to EE (along with IBM, Red Hat, and others). The difference being that they won't be the de-facto spec leader for the umbrella EE spec anymore, but Eclipse will take that role. &gt; That is insane. Considering how much effort and resources Oracle has put to EE in recent years, I feel this can only improve things. It will be interesting to see how things turn out, though.
EE.js? Enterprise Edition - daught of Java Solutions 
So Oracle let the EE part of Java go stale?
I would doubt it. Shenandoah, from the sounds of it, wants to grow your heap in response to high allocation rates, because if your app out allocates the collector it would have to do stop the world collections to compensate. Which for these concurrent collectors are almost always expensive. You likely won't get much faster than the parallel collector an making your 90% of your 200mb heap new gen. The parallel collector is just really fast. In our applications, sub 2gb heaps are all parallel collectors because they can do a major collection in under 10ms on our boxes.
Ah, a reply from the performance ~~csar~~ tsar himself! Thank you for your work. Unfortunately I cannot test Shenandoah for the workload I mentioned above anymore because that was my previous job. I'll wait for some other pioneer to try it out. &gt; I am running shenandoah/jdk8u and shenandoah/jdk10 builds for my IntelliJ IDEA and CLion Sounds dangerous! Will try. If the wiki is telling the truth, Shenandoah wants to be in JDK 10. Yet, I did not see it in the list of targeted JEPs :(.
if you want to test shenandoah it's available on fedora by default (since fedora 24) with the flag: ```-XX:+UseShenandoahGC```. There's also nightly JDK builds you can use here: https://builds.shipilev.net/openjdk-shenandoah-jdk8-release/
i just tried intellij with 200MB heap and shenandoah. on a semi-large file, it was gcing constantly, but the UI was still responsive.
I found a shenandoah visualizer jar on here. How is it supposed to be used?
Oooo.. I like this one!
So, I used a benchmark i've been doing comparing a couple of bufferedoutputstreams (the standard one and one I made) with Shenandoah/g1gc/cms. Not really a good way to highlight the differences since i'm just copying to and from pre-allocated arrays right? Well, it turns out shenandoah actually adds a decent amount of overhead in these benches, compared to the g1gc and cms runs. it adds around .03-0.04microseconds per array write to these bufferedoutputstreams, with the typical runtime in g1gc and cms being .02-.04 microseconds on their own. so doubling/nearly doubling the cost of copying arrays. I would guess this has to do with the read and write barriers he was discussing in the video... 
Winter.
Yes. They did exactly that: Java 2, Enterprise Edition version 4 was very, very much a thing that Sun called it. Sanity didn't come until JavaEE 5. That's the first version of it that was not officially called "J2EE".
Okay, so, the idea was: 1. You'd have J2ME for phones and embedded devices. This ran a stripped down Java profile. It was an abomination unto the Lord and was killed when Steve Jobs decided not to let it on the iPhone and then Google decided to make an incompatible version of Java, not sall it Java, and make it the basis of all Android development. 2. You had the J2SE. This was the normal compiler and runtime, and it was envisioned that it would get used for desktop applications and browser applets. For a time, it was. Then things happened: Microsoft made their JVM and JDK incompatible with the rest of the world and lost their license. Apple decided to focus more on Objective C (though they shipped their own Java for quite some time). And not only was desktop Linux a wet dream of ours that never came to pass, but the licensing terms for Java on Linux were unacceptable to most distributors for far too long. And then Flash sucked less than the Java browser plugin. And then we started using our phones online, and even as Android ran Flash, it sucked so much that people stopped using it. And then the desktop stopped being the primary interaction people have with computers. While there are some Java desktop apps still, they aren't what they used to be. For the most part, the closest thing to Java SE that is truly relevant today is the Android environment, which isn't strictly Java. 3. JavaEE was for servers. At the time, large companies were the only ones with that many servers, as that kind of hardware was still incredibly expensive. We weren't in the world of running JavaEE on a cluster of Raspberry Pis and a remaindered hard drive in your basement for side projects. Today, the server is the one place Java remains popular. As a result, JavaEE, the Java spec that deals with server applications, remains relevant. And JDBC is core Java, not JavaEE. Same with RMI, that's a part of SE (see [here](https://docs.oracle.com/javase/9/docs/api/java/rmi/package-summary.html) and note the URL). The servlet API, however, is definitely the heart of JavaEE.
Fall?
It took a long time to get Java EE 8 out, and it really isn't anywhere near as big an updated as 7 was. You could say that (at least a vocal part of) the community hasn't been thrilled with Oracle's handling of EE before, leading to stuff like the [Java EE Guardians](https://javaee-guardians.io)...
I wonder what Shenandoah's prospects are now that Oracle is planning it's own new garbage collector, ZGC with seemingly similar goals? Are both at a similar level of maturity? Does anyone know how the two projects compare to each other?
Autumn
The answer to your question is in the read me &gt;Beginning with version 5.0 of iText, the developers have moved to the AGPL to improve their ability to sell commercial licenses. The OpenPDF project is a fork of iText 4, with a LGPL and MPL open source license
I was kinda trying to refer to the other meaning, with many believing that EE is in sunset mode anyway...
You can make some quick and cool projects with a micro framework to learn, gain experience, and even put on your resume. I would recommend using sparkjava, its similar to Python Flask if you are familiar with that. http://sparkjava.com/documentation#getting-started You should also look into kotlin if you are feeling adventurous, android recently starting fully supporting it. I find it to be a lot like python and my code ends up a lot cleaner. I've been slowly migrating from java to kotlin.
Maven and Gradle are pretty cool build systems. I've had a lot of success with both of them. Gradle seemed to have more flexibility due to the fact that the configuration files are actually Groovy scripts. t Java 8 introduced some interesting things to the language. The things that I use often are the [Optional](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html) class which can potentially eliminate any null based logic, [lambda expressions](https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html) which have been around for a while in other forms, the [CompletableFuture](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html) class which can asynchronously chain lambdas together in interesting ways, the [new functional interfaces](https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html) which are supported by lambdas and [streams](https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html). Java 7 also introduced [try with resources](https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html). That's pretty nice to have, but it means that you need to be using the [AutoCloseable](https://docs.oracle.com/javase/7/docs/api/java/lang/AutoCloseable.html) and [Closeable](https://docs.oracle.com/javase/7/docs/api/java/io/Closeable.html) interfaces throughout your code base (try with resources works with objects that implement one of those interfaces.)
I'd try spring boot and heroku (for some free web deploying) 
I'm going to be pretty blunt, but the problem is you. You've been completely passive in your career for the last 10 years. Most of us have kids, jobs, etc. and manage to stay up to date just fine. If you keep blaming external factors instead of improving yourself you won't make any real progress. It shows in your post; there is pretty much no effort at all from your side but you are still expecting us to explain what you should be studying and why. Most 'modern' large scale Java projects will be some kind of microservice architecture. So get Josh Long's Cloud Native Spring book and build a simple REST service that you, together with a simple front-end application using for example Anguler 4, package as a docker container and then deploy in for example a Kubernetes cluster on Google Compute Engine. All these steps have tons of documentation and are things you should be able to figure out yourself. It will just take time. 
Why would you ever want that for local variabls?
Hey, this looks like a neat project. Some things to be improved: 1. separate your documentation from the readme (bonus points because you have doc in this early stage though!) 2. Interfaces for the caller/callbackscript would be better than leaving the type as object. If someone doesnt want to perform any action on an event they can leave the implementation empty. Its just the standard way of doing things in Java and it would help people to pick up your library
I don’t, but some are upset about `val` not being added, too.
I use java for hobby projects (mainly because I'm still on high school). I'm currently working on a custom web server that I started working on in sophomore year, mostly to learn move about the HTTP protocol. I then continued working on it until now (first term of my senior year), and the project turned out to not be complete crap. It's obviously not the best thing out there, but it has some potential. It's currently mature enough to actually be used in proper web applications, although there are still some performance enhancements needed. 
See here: http://icedtea.classpath.org/hg/shenandoah-visualizer/file/2c648af636f3/README. You need to start VM with special flags, and attach the Visualizer to local JVM pid.
Yes, barriers overhead can be very pronunciated on targeted benchmarks, especially those dealing the heap operations only, without doing much else. It would still be interesting to see the benchmarks, looking for obvious omissions that might drive overheads higher. On Shenandoah wiki page, there is a performance diagnostics section, that allows you to dissect barriers costs for your particular workload.
Thanks for your recommendations!!
Seeing how my IDEA instance having around 500 MB of live data, it is not surprising to see that 200 MB is too tight. In fact, it is not even supposed to work if live data does not fit into the heap :) In any case, concurrent GC has this nice property that having a GC does steal CPU cycles from the application, but it still does not stop it excessively. Or, in other words, you pay with diminished throughput, not increased pause times.
oh I love people here on reddit who have no idea what java ee is and they are discussing about it
Those observations are correct: if you have enough time to collect the heap under STW, and it does not blow the pause requirements, use STW GC. You will get more throughput of that configuration. Parallel *is* really fast, and most people are fine running STW GC, and this is excellent! The usual caveat is this. The pause time (actually, latency) requirements are naturally expressed in human units, e.g. milliseconds of wall clock time. GC overheads, otoh, are naturally expressed in machine units, e.g. cycles/insns per MB of objects, because machines have to do their work in CPU cycles, not by wall clock. There are three corollaries from this: a) if you have a large heap, wall-clock GC time, because there are lots of objects; b) if you have a slow machine, wall-clock GC overhead is high, because the same number of instructions at higher clocks-per-insn rate; c) if the machine runs something else and deprives GC of cycles, then wall-clock GC overhead is high, because the effective clock rate for JVM in question is lower. Most people intuitively understand (a) and claim concurrent GCs are for large heaps. If you run Shenandoah on some SBC like Raspberry Pi 3, you can certainly feel (b). When I am running my IDEs with Shenandoah when other Java tests are running I certainly feel (c), and I'm pretty sure that happens in dense virtualized environments too.
&gt; If the wiki is telling the truth, Shenandoah wants to be in JDK 10. Yet, I did not see it in the list of targeted JEPs :(. Faster Java release cadence kinda messed up that schedule :) We still maintain the backports to the released JDKs, and you are welcome to try and use them. JDK 10 would probably be another backport like this, and we are hoping for next LTS release for upstream.
If you want people to use your stuff please publish a project with an industry standard maven layout, make sure it can be built with either maven or gradle (preferrably both) and publish the artifact on a maven repo. Without it no one will use it. 
For Spring data repository interfaces, just annotate your metods with @Query(value="SELECT * FROM yourTable", nativeQuery=true) and you have full control on the SQL beeing used. No surprises.
It was addressed at Devoxx, in "Ask the architects". https://www.youtube.com/watch?v=FdkPHShh628 Nothing is set in stone, they might merge, exist in parallel, or just contribute to improve the whole OpenJDK infrastructure. 
Well, it's a fact that it's not widely used, and that the community is very, very small. So in terms of help, there just isn't much compared to other bigger frameworks - even just "classic" spring boot if you wanna stick to JVM languages. As a beginner, finding resources on stackoverflow etc. is a big thing to keep you going.. So. You can't really disagree with that tbh :) 
https://stackoverflow.com/questions/35003620/java-8-update-71-is-trying-to-install-a-new-helper-tool-on-mac Install Java from [OpenJDK](http://jdk.java.net/8/) or from trusted sources other than Oracle.
ok here's an error I'm getting from the shenandoah-visualizer-2017-11-16.jar: Exception in thread "main" java.util.concurrent.ExecutionException: java.lang.IllegalStateException: Unhandled ordinal: 8 at java.util.concurrent.FutureTask.report(FutureTask.java:122) at java.util.concurrent.FutureTask.get(FutureTask.java:192) at org.openjdk.shenandoah.ShenandoahVisualizer.main(ShenandoahVisualizer.java:157) Caused by: java.lang.IllegalStateException: Unhandled ordinal: 8 at org.openjdk.shenandoah.RegionState.fromOrdinal(RegionState.java:32) at org.openjdk.shenandoah.RegionStat.&lt;init&gt;(RegionStat.java:49) at org.openjdk.shenandoah.DataProvider.snapshot(DataProvider.java:49) at org.openjdk.shenandoah.ShenandoahVisualizer$Render.run(ShenandoahVisualizer.java:181) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) 
here's a rough layout of the bench: https://scastie.scala-lang.org/Kc2tfaPiT26NWlkbzhsvgw it's pretty simple, and the ringbuffer class i wrote is mainly copying into and out of an array using ```System.arrayCopy```
Yakov Faint is a known Java Champion (check his bio here: https://community.oracle.com/docs/DOC-925803). A couple years ago he designed a "Modern Web Application Development for Java Programmers" course. You can find the course description and libraries / frameworks used here: https://github.com/yfain/WebDevForJavaProgrammers. I think it is a good starting point to get a grasp of what you should be familiar with.
Ah. That's a recently added region state, and Visualizer did not know about it yet. [Fixed](http://icedtea.classpath.org/hg/shenandoah-visualizer/rev/f05d0f344f65), the [latest Visualizer build](https://builds.shipilev.net/shenandoah-visualizer/shenandoah-visualizer-2017-11-17.jar) should be fine.
Hello, I used static methods and variables so the developer can access them directly without creating an Object of a Server class for example. The method "Server.initialize(...)" isn't a utility method? Do you recommended instead of having static methods on the Server class, creating a Server object? 
&gt; the quite limited info on its webpage doesn't look like a good sign... :( Would [the amount of activity on our GitHub repositories](https://github.com/payara/Payara) be more reassuring? :) 
ok, it's working great now, and like I thought, the 200M heapsize for intellij was making it gc constantly. It's still nice how responsive it is despite that. Also, at the default ~700M heap, it runs perfectly fine and without any hiccups so far.
Neither. The Builder pattern is better than either of those. It lets you have optional parameters with default values without running into the combinatorial explosion you do with constructors, while still letting you construct immutable objects. ``` public final class Foo { private final int myInt; private final String myString; public static Builder builder() { return new Builder(); } private Foo(Builder builder) { // You would validate the parameters here. this.myInt = builder.myInt; this.myString = builder.myString; } public static class Builder { public static final int DEFAULT_INT = 1; public static final String DEFAULT_STRING = "foo"; private int myInt = DEFAULT_INT; private String myString = DEFAULT_STRING; public Builder myInt(int intVal) { this.myInt = intVal; return this; } public Builder myString(String stringVal) { this.myString = stringVal; return this; } public Foo build() { return new Foo(this); } } } ``` You would then construct `Foo` instances like so: ``` Foo foo = Foo.builder().build(); Foo foo2 = Foo.builder() .myInt(5) .build(); Foo foo3 = Foo.builder() .myString("bar") .build(); Foo foo4 = Foo.builder() .myInt(5) .myString("bar") .build(); ```
XML was often used to describe meta data and deployment information. This has often been moved to annotations, so this is not located next to the relevant code and made a huge impact with JPA for example.
Neither. The Builder pattern is better than either of those. It lets you have optional parameters with default values without running into the combinatorial explosion you do with constructors, while still letting you construct immutable objects. public final class Foo { private final int myInt; private final String myString; public static Builder builder() { return new Builder(); } private Foo(Builder builder) { // You would validate the parameters here. this.myInt = builder.myInt; this.myString = builder.myString; } public static class Builder { public static final int DEFAULT_INT = 1; public static final String DEFAULT_STRING = "foo"; private int myInt = DEFAULT_INT; private String myString = DEFAULT_STRING; public Builder myInt(int intVal) { this.myInt = intVal; return this; } public Builder myString(String stringVal) { this.myString = stringVal; return this; } public Foo build() { return new Foo(this); } } } You would then construct `Foo` instances like so: Foo foo = Foo.builder().build(); Foo foo2 = Foo.builder() .myInt(5) .build(); Foo foo3 = Foo.builder() .myString("bar") .build(); Foo foo4 = Foo.builder() .myInt(5) .myString("bar") .build();
Thanks! Nothing overly surprising here on shenandoah/jdk10: Benchmark Mode Cnt Score Error Units # Parallel writeByteBench avgt 5 0.037 ± 0.001 us/op writeByteBufferedOutputStreamBench avgt 5 0.016 ± 0.001 us/op # G1 writeByteBench avgt 5 0.037 ± 0.001 us/op writeByteBufferedOutputStreamBench avgt 5 0.023 ± 0.001 us/op # Shenandoah writeByteBench avgt 5 0.046 ± 0.001 us/op writeByteBufferedOutputStreamBench avgt 5 0.025 ± 0.001 us/op # Shenandoah, passive writeByteBench avgt 5 0.046 ± 0.001 us/op writeByteBufferedOutputStreamBench avgt 5 0.026 ± 0.001 us/op # Shenandoah, passive, -XX:-ShenandoahReadBarrier writeByteBench avgt 5 0.039 ± 0.001 us/op writeByteBufferedOutputStreamBench avgt 5 0.025 ± 0.001 us/op # Shenandoah, passive, -XX:-ShenandoahReadBarrier -XX:-ShenandoahWriteBarrier writeByteBench avgt 5 0.038 ± 0.001 us/op writeByteBufferedOutputStreamBench avgt 5 0.025 ± 0.001 us/op # Shenandoah, passive, -XX:-ShenandoahReadBarrier -XX:-ShenandoahWriteBarrier -XX:+UseBiasedLocking writeByteBench avgt 5 0.037 ± 0.001 us/op writeByteBufferedOutputStreamBench avgt 5 0.017 ± 0.001 us/op So the most overhead is indeed barriers. Biased locking is disabled by default with Shenandoah (because it provides enough hiccups on its own that masks Shenandoah improvements), enabling it back gets throughput back.
Excellent talk, btw, I'm sharing it with all my colleges. When you legal team arrives, why do you think that g1 had such of behavior in that allocation test? Could it be that the concurrent collector wasn't being triggered until you got the higher utilization use case?
**Sidebar** **NO programming help, NO learning Java related questions!** Programming help should go in **/r/javahelp** as the really many hints on the page indicate.
Is it *really so difficult* to read the **sidebar**? **Do not post tutorials here!** These should go in **/r/learnjava**.
I think two things happen there. First, you need to copy lots of objects out of significantly non-garbage regions, and that takes pause time. Shenandoah and CMS handle that part well. Second, when concurrent phase fails, G1 falls into Full GCs, and those Full GCs are, unfortunately, serial. It is fixed in JDK 10 with [JEP 307](http://openjdk.java.net/jeps/307), and the hope is that G1 would be as efficient as Parallel when that happens.
Like the sidebar and others have said, this is a question that is better posted in /r/javahelp. However, to help your googling, the thing you're looking for is a "fat jar".
Thanks a lot! And sorry for the violation. I'm new to reddit and unfamiliar with the culture. I'll keep this in mind from the future. 
I usually use it to download chapters from sites like wuxiaworld and lmntl, not sure headless chrome would of much use to me in this situation.
[removed]
Nice project! It solves a problem in a concise way and it allows you to play around with several languages. I also found the code nice!
This looks very interesting.
Just ignore it, I've never heard anyone refer to Java that way and I don't even think the stated reasoning works. The dude who has created the slides might be the "some people".
We are pedantic if it comes to rules but not generally bad people. Welcome to reddit :D
Could you please post kotlin related stuff in the /r/kotlin subreddit?
He doesnt read. He is a writer. Duh! 
It should follow modern standards. Something like Java.js.
That's not a fact, I have personally used grails in production applications in several large corporations and found the community and use case pretty large. do you actually check stack overflow I've never not found a grails question I've had in my literal years of using it on it. it's maintained and updated and full of modern features so yeah to be honest I can and to disagree with again literally all your points. seriously, since 2011 until now, I've literally deployed grails applications for extremely large healthcare, financial, and government installations, each of them having to do market research and justification to layers of cooperate goons for tech stacks. none of your points are true. 
This is gold. Thank you.
I always looked at Spring boot as a something that wasn't for me since I already knew what was going on in the background. But at this point, I'm so far behind that I probably don't really know anymore what is going in the background. So Spring Boot will be my first tool to look into. Thanks
A WSDL is not realistically human writable.
Here is a different viewpoint: there is actually quite a bit of work for developers who know old technologies. Lots of legacy code out there and not many developers that want to work on it.
You're absolutely right. I would even say that old Java code is the majority of jobs available. Don't have any statistics to back that up but I'm just going from personal experience. But for me personally, I just feel that it's the right time for me to update my skills. 
This looks great. I have played around with GraphQL earlier but never with vert.x Thanks for sharing. this will probably help me in getting started on vert.x
Well, a few years ago i was stuck in java 6, jboss 4, etc. I tried out Play Framework at home. It's like ruby -- no setup, you can create, build, test, and deploy (to heroku) simply. Play has moved on and is not like that anymore. Spring Boot, though, pretty much fills that role now.
xD
What is preventing you from doing this with static factory methods? Here is some simple pseudo code. enum ColorType { HEX(HexColors::lighten), PANTONE(PantoneColors::lighten) final Function&lt;Color, Color&gt; lightenFunc; final Predicate&lt;String&gt; validHexPredicate; ColorType(Function&lt;Color, Color&gt; lightenFunc, Predicate&lt;String&gt; validHexPredicate) { this.lightenFunc = lightenFunc; this.validHexPredicate = validHexPredicate; } } public class Color { private final ColorType type; private final String hex; private Color(ColorType type, String hex) { ... } public String getHex() { return hex; } public Color lighten() { return this.type.lighten.apply(this); } public boolean canConvertTo(ColorType type) { return type.validHexPredicate.test(hex); } public Color convertTo(ColorType type) { Preconditions.checkCondition(type.validHexPredicate.test(hex)); return Color.color(type, hex); } public static Color hex(String hex) { return color(ColorType.HEX, hex); } public static Color pantone(String hex) { return color(ColorType.PANTONE, hex); } private static Color color(ColorType type, String hex) { Preconditions.checkCondition(type.validHexPredicate.test(hex)); return new Color(type, hex); } } Now we have only a single `Color` class. We can easily test if one color can be converted to another type. Each color knows how to lighten itself. Say we decide to add 100 color types we just need to define the methods externally and not make 100 classes.
Spring /s
Good that you have a license. Some projects don't. A project that doesn't have any license (not yours obviously) is a ticking legal time bomb. Extra good that you make a point of saying in bold to READ THE LICENSE, since it is GPL 3. In my case, the license is always the first thing I look at for any project or library that I look at. If I can't use it because of the license, then no point looking any further. You are, of course, free to license your code any way you wish. I won't persuade you to do it differently. And thanks for creating an open source project that is available for study. But I will point out something. A lot of Java users work at corporations that won't touch anything that is GPL. In some cases, they can't even touch LGPL code. Just sayin', in case you were not aware of that. 
I did not know that, and thanks for informing me. What license do you suggest for such a project?
Any interesting use-cases for that new `HttpFilter`?
You have no idea what you're on about. Just shut up. 
I mean it seems the same as good old servlet Filter :), ideas that come to mind: * XSS protection (search/replace dangerous text in every submitted parameter on all requests) * protect parts of your application that you need to be authenticated for * I built a Filter years ago that turned images b/w if they're requested in a specific way so you wouldn't need to duplicate the files to have a b/w version available.
sounds to me like the [Filter](https://javaee.github.io/javaee-spec/javadocs/javax/servlet/Filter.html); you can also see all the usual applications of the standard `Filter` interface; the only real difference I see is the `FilterConfig` interface. Apparently, you can edit the live cycle of the filter.
Oh, now I see you were asking for use-cases differing from the standard `Filter`? Nothing really, it's just a convenience class that * makes sure it's called with HttpServletRequest/-Response * extends GenericFilter which gives easy acces to the FilterConfig that is passed in init(FilterConfig) to every Filter
Care to elaborate?
AbstractManagedJobSecurityFullProfileFrameworkFactoryBase
Gladly. &gt;With Hibernate, it's hard to optimize SQL unless you're just using it for writing and read into entities using native SQL. Also, Hibernate uses JDBC, which means blocking DB drivers. The first part of this is fair. Do not understand what you mean by native (and by extension, non-native ) SQL, but I'm sure you had a reason for using those terms. The part about hibernate using jdbc is fucking stupid though. What exactly were you expecting hibernate to use? It's literally the Java DB connector. Unless you're running some kind of in memory DB you'll almost definitely have to use jdbc at some level. &gt;PostgreSQL, along with ACID in general, are extremely difficult to scale horizontally effectively. Plain fucking wrong and a misconception I see pop up every once in a while here. Unless you're in the millions of reads and hundreds of thousands of writes a second, you're putting the chariot before the horses thinking an RDB wouldn't scale. In 99.7% of cases, an RDB will work perfectly fine. There's a reason scaling while sticking to ACID is difficult: it's a set of constraints. It'll always be more difficult to do with than without but it comes with a ton of advantages which I wouldn't bother listing as I'm sure you're already aware of. &gt;Tomcat, which means Servlets, are really not designed for non-blocking programming, so you're stuck with the thread pool capacity. There's loads of alternatives to Tomcat. Also, with frameworks being as mature as they are today, I'll be damned if any but the smallest minority of devs have to deal with this. Also, thread pool capacity is perfectly manageable; I honestly don't think it's that difficult. It's thought in intro to Java courses is it not? &gt;Spring is a bloated beast with lots of overhead. So is Java EE. Also, Spring Boot. Again, no one cares about an application taking up 700mb anymore. We're in 2017 so stop judging younger devs by your late 20th century deployment woes. I know for a fact most companies would rather pay for a bloated piece of shit that could be put together in 3 weeks than your smaller, more efficient application that took a bit too long to make. In 2017, it doesn't matter anymore. Even legacy applications are being redeployed in environments with much more computing power. &gt;I'm talking 5000 - 20000 requests per second on a regular developer's box depending on the amount of business logic. A multi module Spring Boot application with generally boots up in less than a minute. Might be quite a bit compared to other technologies (like GWT) I've used in the past but again, it doesn't make the developer bad. Stop gstekeeping. 
Java 8 is at u152. I've had no problem with it on a MacBook Pro. ( Never had this problem either ) http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html
You probably know more about HTTP than a large portion of engineers then. Great job
Might be worth a read. http://blog.paralleluniverse.co/2014/05/01/modern-java/
The new name of JavaEE should be short, unique and easy to remember. Eclipse means eclipse in most of the languages but Eclipse means Kasuf in Arabic, I am suggesting this name(Kasuf) because it is unique and Kasuf.org domain name is available.
I guess it would make sense if you add other classes for other common protocols like SFTP. Though still thank you for your responses :-)
tldr?
&gt; Q. What's so bad about mocks &amp; stubs? &gt; &gt; A. The problem they solve is "how to test poorly designed code". FWIW, I agree, however I'm not watching a 57min video to have my views confirmed...
His examples: 1) PotatoService: unpack input - so you don't have to stub/mock it -&gt; fewer things get tested 2) VendingMachine: initialize everything instead of mocking 3) Emails: do not create and send an email, only create an email -&gt; but what happened to the sending?
I'm in the exact same boat. Our project just moved from Java 6 to Java 8. Code base is a mess and I've only started adding unit tests to the project in the past year. (I was on a different team prior). Also no refactoring in sight to add Java 8 features. Yay!
Hey this video adds value. If this is the best argument they can come up with for not using mocks and stubs, I'm gonna keep using mocks and stubs.
You have my deepest sympathy. I tried adding some unit tests to the software I work on but it's such a tangled mess it's pretty much immune to regular unit tests. There are a couple of massive core classes that hold references to essentially everything else in the system (and each other). If you want to test one tiny aspect you have to create these huge behemoths first. Without tests refactoring is just too risky.
Somebody explain like i'm actually 5 years old and the only expierence I have with mocking is mocking my sister for wearing something weird. What is wrong with unit testing? I thought the entired thing behind unit testing was to be able to test code without depending on an external system by mocking those external systems? e.g. you need a 404 from an web api but instead of making sure that you have an entire setup that doesn't have that key and return 404, you can just use when(api.request(anyInt)).doReturn(404)?
Maybe that was the idea, but the reality is that you initialize your class under test, and mock everything else. And that's called Unit Testing - because people think that Unit = single class. 
For sending emails, you can find fake email servers like [Dumpster](https://github.com/kirviq/dumbster) that allow you to send real emails and verify that they were sent. I realise email is just a limited example, but it's representative of the kind of fakes you should be using in integration testing rather than mocks for external services, or just not testing that functionality. Spring has a [`MockRestServiceServer`](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/web/client/MockRestServiceServer.html) that allows you to fake external rest services (provided you use `RestTemplate`). I'm sure you can find plenty of other examples. 
1. This is a good point. Don't give a method an object that contains stuff that it doesn't need. Keep it simple. Only provide what's needed. That'll make it easier to test as well. If you prefer `public PotatoService(Config config)` over `public PotatoService(int valueItNeeds, boolean otherThingItNeeds)` because it looks prettier, sure, if that's what's important to you. But having code that only minds its own business should be more important to you, because that code will be easier to test, have fewer ways of failing, and can be reasoned about on its own without having to consider some global config object. 2. It doesn't matter what you call it. You're interested in confirming that the state after your computation is what you expect. Why insist on separating the customer and the vendingmachine, when they both matter for the result of the computation? The integration test makes sense, and he makes a good point. 3. The original code didn't test that the email got sent. To do that you would have to have an actual email account somewhere and see that it actually got an email. The original code just checks that `sendEmail()` got called with the right parameters. We are in no way confirming that the actual email got sent here. We are just confirming that the method got called with the correct arguments. And that's just a test of our intent. I think he could've made that point clearer. The difference between the original code and his improved code is that you clearly separate what your code is doing. Your code is just composing an email, not sending it. `sendEmail()`, or some lower method called within `sendEmail()`, is the code that actually sends the email. And to actually test that side-effect you'd have to write an end-to-end-test.
That's all fine, but that was not his point. His point was "cut the code to pieces", without actually showing what happens with the sending, because then he would have to show a new test which uses the mock anyway. At that point, it does not really matter if you replace the mock with a fake, because you could have done it in the first place anyway.
So the problem isn't unit testing but just writing bad tests?
These days I tend to do much more integration testing. Because I want to know about any weird interactions between classes. And given that Spring can cache application contexts between tests, running 50 tests isn't much slower than running one. The only place where mocks become useful is with external services that you can't fake somehow. Database? In-memory DB. Email? Fake email server. REST service? MockRestServiceServer. Testing with real external services is where QA/staging platforms come in. 
Right, so the guy in the video is doing testing worse someone that uses a mock, when there's a better way to replace a mock.
Yes, I like to test it end-to-end, initialize Spring context with in-memory DB, fake adapters + fake Servlet. So I can make sure everything works, and use plain request/responses from the real world - both inbound and outbound. That way it is really easy to simulate and debug something and actually have confidence that it works.
But that would then be a failing sorting algorithm if the comparator is returning the correct results. The sorting algorithm should also have tests. That's how, when there is a bug, you find out immediately if it's the sorting algorithm or the comparator implementation. An integration tests just shows you what went wrong, not where it went wrong. It's not granular enough. Aside from that; the amount of input/output states of integration tests tend to be much too large to be able to test all permutations. This is why unit tests in general make it easier to get good coverage. 
&gt; So the problem isn't unit testing but just writing bad tests? Most of these cases against unit testing are from people seeing a problem but not seeing the source of the problem. They choose to shoot the messenger instead. 
The sorting algorithm is in the JDK, you don't test such things. This is both integration problem and a bad test - where you don't simply "look and see" what it does. Integration test does everything better unless you have no logging and eat exceptions.
`MockMvc` is a really nice framework. It's a shame that it doesn't cover the view, but I guess that's what selenium is for. :) Plus it's becoming less of an issue when people move to REST backends, which MockMvc can test, and JS frontends, which needs something like selenium anyway.
Yep, this is the one, I have customized it for use with CXF servlet and to be able to use Filters (maybe it is already fixed).
http://mail-archives.apache.org/mod_mbox/www-announce/201711.mbox/%3CCABtC0%2Bg2rxsySbTwRPWNgSa-qOntsmDNezS-taj2Op6wChudsg%40mail.gmail.com%3E
Short answer: as usual, it depends. :)
That's just the Spring-fanatics in this sub. You learn to ignore them.
So much code. I feel patterns like this are why some people hate Java.
My eyes must have gotten bad... oh no its the blurry font. What the heck.
&gt; extract parameters - so you don't have to stub/mock the whole parameter object Haven't watched the video yet, but unless a parameter object was fetching things from some backend it wouldn't need to be mocked/stubbed it anyway. Don't mock value objects in general, just use them. Isolation is cool and all, but one doesn't need to go crazy with it to make a useful test.
All his points are good, but also a little dishonest. Both 1. and 3. are really basic refactorings, all it does is moving the code somewhere else to make the test nicer. But what was taken must end up somewhere else - which he does not show. 1. How do you check if PotatoService was initialized with the right parameters? It was tested before, now it isn't, but sure - the test is nicer. Also if it is initialized in multiple places, then you just multiplicated points of failure. 2. If you can just use the real dependency then why the hell are you using a mock in the first place? I am all for integration tests, but in reality, dependencies have more dependencies. So either cut it somewhere and use mocks or not - and you may have entirely different kind of test. 3. Where is the "SpecialOffersService" which now have to call "EmailBuilder" and "EmailSender"? Its test would have the same mock he removed from the SpecialOffersTest. He created more complex code so that he can have more of nicer tests instead of one ugly test - fair enough, that's how it works. 
&gt; The sorting algorithm is in the JDK, you don't test such things. Then the comparator was broken en it wasn't a good test. 
You don't have to mock if you don't test it. :-) You are completely right. The only mocks he eliminated was those he did not need in the first place. 
Exactly my point, it was a proper unit test. 
And why would that not be able to test a comparator? 
I don't think it's dishonest. His claim is that your code will be better (or simpler) if you try to avoid mocks. Not simpler as in less code on the screen, but simpler in that it will be eaiser to test and easier to reason about because you only have to consider the code you're looking at and not some global state. I agree with that claim. 1. You run `makePotatoSalad()` and it see what the result is. It only depends on `PotateService`'s parameters, so it's deterministic. And you only care about the result. 2. His point is to not use mocks in the first place. That you can test what's interesting to test without mocks. And yes, that's by using the dependency. 3. The point I think is that you don't need that test, unless it's an end-to-end test. Look at the initial test: Does that test anything other than the intent? No, it just checks that a method was called. If that's what you want, then alright. Add that test to the code that accept the `SendEmailIntent`.
But I'm writing an EIP implementation...
Maybe it's just me, when I open a test and see 20 test methods, each with one line which asserts the right number, I am just not sure how the sorted result would look like...
But you don't need to? It's a comparator? It should return negative if A is less than B, positive for the reverse and zero if they're equal. How would that require 20 test methods? That's the contract and that is what you'd test. 
Yes, but if you are integrating too many things together in a test, then you’ll end up having too large parameter space to cover effectively. You’ll either sacrifice test coverage (meaning you’ll eventually miss some very important test cases). Or your test setup and verification code becomes so complex that nobody but you will be able to verify if the test is even testing the right thing. And even that only until you leave for a next coffee break. Test code (setup and verification) must be so simple that you don’t need a compiler to tell you that it works and you should not need a debugger to understand what’s wrong of the test fails. 
I've really not found this to be an issue with Spring Boot. The main issue I've found is faking a JMS end point. I've not found a way to send a JMS message and have it be processed in the same thread, so I can test the complete process. I don't have any complicated test setups. My `@TestConfiguration` creates a few beans that override the real beans in the main configuration and I'm good to go.
Test induced design damage is real. Easier reasoning about the test does not necessarily translate to easier reasoning about the business code, it could be just the opposite. 1. I also care about the correctness of PotateService's parameters. Nicer tests by testing less™. 3. Well, then he could have just tested it end-to-end and don't bother with the refactoring.
A few things: 1. A Comparator isn't necessarily comparing just one field. 2. It should return negative if A should be sorted before B, etc... which would be if A is greater than B is this is a descending Comparator.
/r/node had a similarly pretentious article recently too. Mocks aren't bad by default. Use them as you'd write any other code. SRP, modularity, etc. 
1. After the obvious refactoring you are passing in primitives so you're basically just testing your language at that point. 2. Sure he could test it end to end but there's also a unit test that fits somewhere before to check the logic as close as possible to the point where the email is sent.
I don't think it's worse than a mock, and I'd like unit tests to be as complete and as fast as possible, without invoking any networking level stuff.
I don't know what is up with Apache some times, they really need to make all their projects have some sort of style and content policy.
You can do that with a fake too. The email service that I mentioned earlier is a perfect example. You don't require an external service, as your test starts a temporary SMTP server, and you can assert that an email was actually sent. There are other methods you can use to replace low level components in your framework, so instead of mocking your FooService so it doesn't do a http request, you can use `LocalTestServer` with Commons httpclient.
I didn't say that the test was going to be easier to reason about. I said that the business code would be easier to reason about, because you only have to consider the code at hand - not the global state. 1. The method is deterministic, so the result of the function is a result of the input parameters. If the output is wrong according to your expectations, then the input is wrong. 2. The refactoring makes the code better, and it makes the test of the intent better. The original test was also just a test of the intent, so he refactored that test of intent.
You can get the best of both worlds too - creating a PotatoServiceConfig interface implemented by Config, you end up with a single configuration class that can be more easily created in a test environment.
I can’t speak for any of your tests. Integration testing might work for you. But the test suite I am currently dealing with that chose to follow the integration testing route is a horrible mess of spaghetti code and bad testing practices. Big chunk of tests fail on a regular basis and running the entire test suite before each commit is simply unrealistic - nobody wants to wait for four hours to make a commit. So broken tests are a regular occurrence. And nobody gives a damn. 
What does an ESB have to do with any of this? 
The first example with the potatoservice is astoundingly contrived. It's just going from an unnecessary config object to a constructor with discreet config values. This is good but has nothing to do with mocking. The whole thing is a strawman. The example with the vending machine has some weird implications. What happens to other consumers of that vending machine? How does the application distribute the new vending machine instance to all the other collaborators of it? The email thing is problematic for me too. Decoupling the email send from the special offer is good (I typically do this stuff via eventing anyways), but then he says not to test the email sender. Sending an email can have multiple scenarios that need to be handled (smtp auth failure, network outage, missing config values, etc) and I'd want tests for those scenarios. He starts with a plausible premise (mocks are bad because you're brittlely coupling to internals), but then uses contrived examples and tries to handwave away all the reasons we got to mocks and stubs. If he'd followed through a more real world example like the getuser thing he first talked about, it may have carried more weight. However, I suspect the contortions required to achieve this in the style he advocates would undermine his point. 
I think some people's obsession with defining unit tests as only testing one method or only testing one class is the real problem, and over-mocking is just a symptom. But I do agree with the presenter on that you can definitely design around mocks, and that "testable code" is not the same thing as "code testable if you litter your tests with mocks". Possibly not opposites, but definitely not the same things. If I can test something and knowing it will have no side-effects (calling a database or network or any other I/O) I will not need any mocks, I have a testable unit. Not much into functional programming, but playing around a bit with Clojure I think really was good for learning how to think about immutability and boundaries around your code, trying to isolate all I/O in the fringes where it will not ruin your test-cases etc. It is a nice side-effect that that also results in code that can be tested without mocks.
That's a complete disaster by the sounds of things. My complete build takes eight minutes to build and I should be able to knock several minutes off that shortly. Most tests involve either using mockmvc to take a request to a URL and requires nothing more than an automatically injected mockmvc object, which Spring Boot configured for me. Or it involves injecting a repository bean and the service I'm testing and the test checks the state, runs the function under test and then asserts things via the repository bean. Thanks to Spring caching the context, once Spring is up and running, every year in the suite takes a fraction of a second to run. I'd also recommend using a feature branch/pull request workflow, with CI builds being a requirement for merging. It doesn't prevent broken builds on master, but it drastically reduces the chances.
Well. I’m an external consultant and I really can not afford to break existing functionality. Our team works by building up suite of unit tests - every time we touch some piece of code, we write a unit test, verify that everything still works after refactoring and then add new use/test cases for the new stuff. It has been working out great for us. Our pace is slower than we’d like (not just because of TDD approach) but we just released new addition to the core product with only two issues found in UAT testing and no production bugs so far. 
Seems is inspired by omnifaces httpFilter 😜
I'm guessing this isn't Spring Boot your working with, so code examples ain't gonna help anyone.
Oh, it’s Spring Boot. 
To be honest most of the “integration tests” are out in a completely wrong place and test way too many things at a time. Average “integration test” basically Wales though some scenarios, testing application state along the way and then finally testing actually the thing that was mentioned in the test name. On average any given test method is about 20-100 LOC long and touches anywhere between four to ten different concepts. It is not Framework that is at fault. It is the testing methodology and wrong granularity of tests. 
Oh, well then you're screwed without some serious change in practice. One thing that drastically improved my test runtime was making sure that all tests that used a full context ran together and with the same configuration so each test didn't start a new context. At 30 seconds to start Spring each time that's quite a lot of wasted time. It was time consuming to get right the first time, but it's paid dividends over the years.
1. The original test tested where exactly the parameters came from, now it can be initialized by any garbage. If the refactoring were honest, there would be a new factory class/method and its test like: @Test public void testCreatePotatoService() throws Exception { Config config = mock(Config.class); expect(config.getParam1()).andReturn("1"); expect(config.getParam2()).andReturn("2"); PotatoService potatoService = PotatoServiceFactory.createPotatoService(config); verify(config); } 3. Maybe the code is better, I am not arguing with that. But there is certainly more of the code and less testing of the behavior. Removing mocks by testing less behaviour is the real advice he gave.
Those symbols are a result of some bugs in the code that you have to detect. There are many ways of doing that such as using external programs as checkamarx. But I always recommend on programming slowly and detecting those kind of vulnerabilities in the code. Good luck.
1. No, why is that test needed? You just need a test that tests that (toungetwister) `makePotatoSalad()` returns what you expect. 2. What behaviour is not tested now as opposed to before his refactoring?
Yeah. Lucky for me, I have a way out. In the sense that at some point I have simply a choice of moving away from that project if I lose all hope of improving their code or processes (slow and unreliable tests are among the least of their troubles). I still don’t like integration tests as main driver of software development. They’ve never worked out in any project that has been around for more than a handful of years and that have seen more than one set of developers. They have their place but not as a main driver of development effort. 
You just don't get it. 
As much as I prefer copyleft(GPL) for idealistic reasons, companies would rather use the MIT or bsd or similar permissive licenses
Also, this might be useful: Building a Simple Neural Network With Eclipse Deeplearning4j https://www.javacodegeeks.com/2017/11/building-simple-neural-network-eclipse-deeplearning4j.html
I'm not one to point this stuff out, but you have a typo/mistake in your very first line. "Building a Fatjar (or Uberjar) that contains everything you need to run you application" the second you should be your.
Using a servlet filter without the hassle of having to do casts and collecting the filter config ;)
There's a reason IBM started completely from scratch with Liberty ;)
Backend services for the gambling industry. Now starting to use Ratpack for services as it's so damned fast.
&gt; java -jar myapp.jar [You can make Spring Boot apps that are self executing.](https://docs.spring.io/spring-boot/docs/current/reference/html/deployment-install.html) So just: myapp.jar
Guy Steele is awesome. He has contributed so much to the software community. And this talk is great!
Payara, TomEE, etc support this too, but the article mentions that ;)
Definitely! I tried looking to see if anyone has posted this talk recently, and didn’t find anything.
This is a copy-paste of the actual Intel blog post: https://software.intel.com/en-us/blogs/2017/10/02/java-and-intel-technology-building-the-future
You do know that the binaries available on the OpenJDK website are built by Oracle, right? :-)
Thanks! &gt; and it allows you to play around with several languages. Not yet... But it should be very straightforward to extend it to support more languages.
Why on earth would you post code fragments as [barely legible images](https://cdn-images-1.medium.com/max/1600/0*WL1u0ie9cmujvvDv.)?
I do like the Microprofile stuff. Personally, my runtime of choice in that space is Wildfly Swarm but it’s great that we’re getting so much choice now. Win-win for everyone.
and it's just an advertisement. 
yes, but atleast on OpenJDK they don't wrap it with funky installers.
I swear, they're slowly turning Java into JavaScript. :)
I'm not advanced in Java but doesn't var make 
I'm not advanced in Java but doesn't var make the code hard to read? i like how reading java code instantly know what that instance is.
Also that's xml (not json)
Makes it secure. No one can copy/paste it. Or read it.
Security through obscurity...
Nice work! I used your later jlink post and created a multistage docker build for alpine linux with jlink and class data sharing, and put a trivial http webserver in there. https://github.com/StevenACoffman/java9-jlink-web I ran into some trouble dockerizing your aot and cds version though.
https://i.imgur.com/DYeIT4t.gifv
I’m currently learning Hadoop, Spark, Hanse, etc. Is relearning Java (learned in college but forgot it) worthwhile? Or does Python/R + their APIs suffice for most jobs? 
Yup. C# was born after the Sun v Microsoft scuffle of the early web 
&gt; the Docker container that runs JShell I may be missing something, and I suppose it's not central to the article, but what's the benefit of using a container here?
Try a new lighter stack. For eg: Dropwizard. Way more lighter/easy with loads of features to interface with other modules
It's great. I only had 1 course in c# when I was a senior in HS. I ended up continuing to teach myself that on the side and now I work with it.
Ive been looking into Java 9 and Java EE 8 support recently and its pretty much Payara and Glassfish at the moment. Wildfly 11 is JEE7 but the test suite passes Java 9. The biggest problem is finding an IDE that lets you develop using J9 and JEE8. Eclipse doesnt support Glassfish 5 yet, and from what I can see netbeans 8,2 only supports this if you run an EA build I can share my blog post on this if any one is interested
I go further and ask, why "JSON manipulation in Java 9 JShell"?
The whole article leaks over-engineering. 
Well, I see Python and JavaScript in there, and half counted Java too. :) But I get what you mean, that it could support more languages fairly easily. 
Just chiming in 4 days late to say how much I feel you. Websphere is a fucking disgrace. Fuck IBM. In a world where stupid executives do NOT get to decide on the tech the trench uses, IBM would be gone a long time. Look into Wildfly. JEE done right.
If you did it on a Macbook , pinch to zoom in/out on the trackpad. If you're on Windows: CTRL and minus / CTRL and plus If you're on Mac: Cmd and minus / Cmd and plus
I am on a Macbook, however the pinch only works to make the window were i wrote code go bigger. It doesn't work on the console window!
Nevermind, cmd + worked!! Thank you for quick help. 
Hmm, maybe try to: 1. Go to Eclipse menu -&gt; preferences -&gt; General -&gt; Appearance -&gt; Colors and Fonts 2. Then in the right panel under "Debug" select "Console Font" and click "Edit" to pick the font size. I tested this and it seemed to affect the console font size.
Cool. Glad it got resovled!
The problem with patterns is when people don't understand their use case. The builder pattern resolves a specific problem and in that case is really useful. Use it improperly and people get annoyed, use it well and people will be grateful your api is so easy to use.
I kept looking for the “this is bad, don’t do this” disclaimer.
Oh yeah this is a classic. He really goes on a while before the "reveal", so when I first saw it I was like half listening to the talk and half trying to figure out what he was doing.
What about auto properties? This is truly ridiculous. Java is like 5 years behind c# 
Once I asked a friend for his code and he sent me basically all the effects in Paint.net... All blurred pictures of his code 
Java 7 has been around for years and I've still barely ever seen Try with resource being used. I've tried to use it several times myself, but it never simplified things and ended up creating more problems than it saved. Using *IOUtils.closeQuietly* is good enough for me. 
Just try coding Spring Boot applications, you'll see then that WebSphere is not "Java" and its specific problems have nothing to do with Java itself. Java coding can be fun, no less than, let's say, Python+Flask coding. You just have to choose proper tools for that.
God the articles posted to /r/java aren't just bad, they're usually devoid of purpose
It depends on how deep you want to integrate with these tools. For example I write HBase Coprocessor code and I don't know if any bindings are available.
Thanks :) Fixed.
Does Payara support Microprofile and fatjars on the full distribution ? If so, that will be great ! (Please let me know how) I could not find any way to do it with Payara or Wildfly. That is what I think OpenLiberty got right. 
Good read, thanks! You could have mentioned SWIG, though.
I use java mainly to write verbose bugs.
Sure. Future post :)
This is a great moment to mention [JavaCPP](https://github.com/bytedeco/javacpp) and [Bytedeco](http://bytedeco.org/) - both maintained by Samuel Audet in Tokyo.
Why not even LGPL? I see no problem with it at all.
And for anyone interested, if you are doing something more common you might find it already implemented here: https://github.com/java-native-access/jna 
Nice one. What kind of trouble on the AOT?
Just asked a question at /r/learnjava; https://www.reddit.com/r/learnjava/comments/7e83le/whats_the_current_recommendation_for_interop_with/ For a large commercial C++ lib without source available: JavaCPP, JNA, SWIG, ... ? I'm lost. Can JNA create instances and access instance members (straight forward)? What would you guys recommend?
ohh, right.. the cast :D thanks :)
Wow, so you *can* post without trolling us. Good to know.
Let me start of by saying that it's been a long while since I manually bound two different languages together. I hope to at least point you in the right direction. All you need are the header files and the patience to create a facade (a piece of code that will be the interface) in C++, C, or whatever the native language for the library may be. You would then use JNI or SWIG to make the bindings from Java to the the facade that you created. 
Can you build an OpenLiberty app with Gradle or do you have to use Maven? 
I don't see any legal problem with LGPL. But some corporate lawyers do. I will point out technical compliance issues. LGPL is more difficult to comply with. You need to inform the end user that you include an LGPL library, and that they have the right to re-link the product with a newer version of the LGPL library. You need to publish modified LGPL source code for some years after you cease using the LGPL library. IIRC. In Java, the way I suppose that re-link would be interpreted is that you could drop a newer version of the LGPL JAR library into the product. Ah, but such a configuration does not have to be *supported* by the vendor, even if you have the right to make such a change. That way the vendor can say that your configuration is not supported and they need to see that the problem you are experiencing actually exists in a supported configuration. As for notices, I handle this much the way Android and Tivo do. I'm sure other products handle it this way as well. Somewhere from the "About" page, there is a link to license information. This is a nauseatingly long page with a notice of every single open source library in use in the product, along with the license text of that open source libarry. That way, it DOES appear in the product, in a place where users would normally expect to find it. Nobody can accuse vendor of not including certain notices if you include the LICENSE text in full -- because the required notices stated in the license are actually present in the license text. That way all disclaimer of warranty notices are included. And that way I am acknowledging the use of libraries (like Apache 2, etc) even if the license does not require acknowledgement. 
Apache 2 license is used for A LOT of Java libraries. Another common option is dual licensing. Such as This Widget is licensed under your choice of the MIT / BSD and/or LGPL license. That way LGPL is legally compatible with GPL or LGPL licensed code. And MIT is compatible with other open source licenses. 
Yes. GPL protects the developer and the software. But GPL makes it pretty much impossible to use in the classic commercial software -- unless the vendor wants to use a business model that allows their product to be licensed under the GPL. More commonly a commercial developer is working on a closed source product that cannot be made open source. The developer does not own the product and has no say in how it is licensed or what business model their employer has. The sad fact is that if you want your library to be more widely used, it has to be compatible with being swallowed up into a commercial proprietary product that is not open source. Some of those commercial developers do contribute back patches and improvements they might make. The other sad fact is that with a license like BSD, MIT, Apache 2, etc, the proprietary developer can take your library, make all kinds of changes to it, and never share those improvements with anyone.
Am I protected with the MIT license as the owner of the repository?
Okay.
I guess I will never be a Java expert. I don't use any of those technologies :(.
There is special tool to generate these headers, so you can create IntelliJ task to generate it
I'd call a mix of required and optional parameters for object instantiation a pretty common problem.
looks like css drop shadow on the text 
Just like your trolling then...
What is this nonsense?
Please, leave and don't come back here ever again. (Should you still decide to do so, you will receive a permanent ban.) We do not allow **spam**, nor **job offers**, nor **job requirement** talks that actually say nothing but **buzzwords**.
currently third year in university. School decided to change the programming language from C++ to Java after i left beginner Programming class to Intermediate. That being said, how reliable is 1 dollar offer?
&gt; Can JNA create instances and access instance members (straight &gt; forward)? Not exactly. The problem is that C++ mangles symbol names in compiler specific ways. C++ code compiled by one compiler may not be usable in another C++ compiler, forget Java or other languages. You'd need to write a stub in C++ and [define an extern C interface](https://isocpp.org/wiki/faq/mixing-c-and-cpp#call-cpp) which exposes a C-compatible (i.e. non-mangled) symbols that can be used as a JNI interface.
The "In a Nutshell" books are supposedly very good.
or you could clean your own monitor
Just curious of everyone's feedback on these. Most classes I took in college used C++, but most jobs for new grads are for Java Devs, so I thought I might give this a go. I know that it shouldn't be hard to go Java, but I'd like to have a more practice with it before I start applying to Java specific jobs. 
I'd definitely recommend trying Java in a Nutshell at $1.
or jnr
Also really curious for the quality of these books. If any veteran can chime in it would be greatly appreciated.
you're welcome ;)
You can use Gradle, but who uses Gradle regardless of Liberty?
The Payara Micro distribution is almost the full one, but technically it's no. I'm not 100% sure but fatjars are only supported in micro. The Microprofile is supported in the full distribution.
The O'Reilly books are all generally good. 
Definitely looking to pick these up, i've heard generally good things about some of the books included and 15 books for less than a pound a book is fantastic value.
Nice talk
I read the Java Performance: The Definitive Guide, and while some things (mostly JVM arguments, gc logging) changed in Java 9, it still was a very informative piece. Not much code, but a lot of obscure JVM flags, debugging tips, gc log analysis etc. 7.5/10
&gt; And why we sometimes don't have a say on how large corporations with thousands of employees and hundreds of millions in profit are reluctant to change what isn't broken. So we'll leave that discussion for another day. this is called _alienation from one's own work_.
You assume that we all in the same living conditions as you are.
You might need to consider that there simply is no other option. You might be able to somehow automate setups and configurations using tech like docker, or simply making a better UI to lessen repetitive. You might not. Not sure about websphere and what exactly is you see that gets boring.. but I remember in glassfish, I tried editing the web admin UI and fixed quirks and modify it to make it easier for me.
i just bought them, mostly for the one on java threads as i have a concurrency assignment coming up. Hopefully its not out of date!
If Oracle didn't want `extends Thread` to be a thing, they would've made `Thread` a final class.
If it covers java 8 then you're fine. Java 9 didn't add anything revolutionary, like fork-join was in 8. Oh, it's java 5. Yeah, that's out of date. I mean it should be applicable, but it misses lots of the concurrency improvements over the last 13 years.
The Java 8 Lambdas book talks about streams. That's a nice concurrency tool. But probably no futures for async programming
[removed]
[removed]
[removed]
[removed]
There seems to be quite the mix of ages here. Some Java 8, some Java 5 and quite a few don't mention which version of Java, like the Java Web Services except that it quotes: &gt; Code samples include an Apache Ant script that compiles, packages, and deploys web services Ant is probably not something you want to start picking up at this point.
A book dedicated to Jenkins on the top tier? Did a little research, it is from 2011. In the meantime, Jenkins 2.0 happened and nothing is really like 2011 anymore. 
Do places actually hire people to write code without finished college degrees? I have written code in java for about 15 years now, have multiple projects on GitHub, have (what I consider) a decent understanding of most computer science concepts, solved 250+ problems on leetcode, every problem (except 5) on codefights, and I'm working my way through hackerrank now. Yet in every application, I have sent out so far I have not even received a single interview. I heard many of these code 'boot camps' had to shut down, and personally, I consider any place with asks you to pay money for some experience/certificate with a vague promise of jobs to be a complete scam.
What the hell is a Jenkins? Can you ELI5 please?
CI (Continous Integration) for Java (amd other languages) or for a five year old: A server which builds your Java project to a package (JAR) and runs the test on it.
It's continuous integration software. It allows you to build your program and execute tests each time you modify it on your source control system automatically. And for example, if every test pass, it can be used to package a release for others to use.
Is it *really so difficult* to read the **sidebar**? **Do not post tutorials here!** These should go in **/r/learnjava**. New account - first post is advertisement: **spammer**
[Jenkins](www.jenkins.io) is the most used CI/CD tool ever, for better or worse. Also for non-Java projects by the way. It is used to automate all the steps that lead from your code commit to the packaging of the application, up to deployment into production servers, if your workflow foresees that.
I paid full price for the Kindle copy of the Java Pocket Guide on Friday. Timing! 
Thanks for the explanation!
That does sound pretty useful. Thanks for explaining the concept!
It doesn't take a veteran to tell you that O'Reilly books are good resources.
CompletableFuture is the future (pun intended). However, reactive programming is the knees bees IMNSHO.
Looks cool, but it doesn't seem to work with my multi-project maven project. I run "infer run -- mvn package" and get: &gt; Nothing to compile. Try cleaning the build first. &gt; There was nothing to analyze.
How is that any better than findbugs (now https://spotbugs.github.io/), which has been able to detect tons of those for ages now?
There seems to be a maven plugin, but I haven't checked it out yet: https://github.com/anthemengineering/infer-maven-plugin
Learn Angular 2+. The front end has moved on from JSPs. The View in MVC is now a JavaScript framework with a REST back end where Java is still a good choice. Angular 2+ is the easiest JavaScript framework to learn for Java programmers
It's... interesting the animal in the thumbnail: [Saiga Antelope](https://en.wikipedia.org/wiki/Saiga_antelope)
**Saiga antelope** The saiga antelope (, Saiga tatarica) is a critically endangered antelope that originally inhabited a vast area of the Eurasian steppe zone from the foothills of the Carpathian Mountains and Caucasus into Dzungaria and Mongolia. They also lived in Beringian North America during the Pleistocene. Today, the dominant subspecies (S. t. tatarica) is only found in one location in Russia (in The Republic of Kalmykia) and three areas in Kazakhstan (the Ural, Ustiurt and Betpak-Dala populations). *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
No thanks.
I'm curious about feedback, but related to people who has been working with java for some years already. For what I've seen, there's a lot of "beginners" stuff and super specific books, and I'm wondering about its usefulness and, above all, if its worth not only the price, but also the time spent reading them. Specially given how tech works nowadays, as in the time you've completed reading "Whatever Tech V2", the V4 of "Whatever tech" is already out (And in your company, they are using "Whatever Tech V1"
Here's what I found so far: **$1 option** Book | Year | Technologies ---------|----------|---------- Think Java | 2016 | - Java Generics and Collections | 2009 | Java 5 and 6 Java in a Nutshell, 6th Edition | 2014 | Java 8 Java Pocket Guide, 4th Edition | 2017 | Java 9 Java Message Service, 2nd Edition | 2009 | JMS 1.1 **$8 option** Book | Year | Technologies ---------|----------|---------- Learning Java, 4th Edition | 2010 | Java 6 and 7 Java Threads, 3rd Edition | 2009 | Java 5 Java 8 Lambdas | 2014 | Java 8 RESTful Java with JAX-RS 2.0, 2nd Edition | 2013 | JavaEE 7 Minecraft Modding with Forge | 2015 | - **$15 option** Book | Year | Technologies ---------|----------|---------- Java Network Programming, 4th Edition | 2013 | - Java Web Services: Up and Running, 2nd Edition | 2013 | - Java Cookbook, 3rd Edition | 2014 | Java 8 Java Performance: The Definitive Guide | 2014 | Java 7 and 8 Jenkins: The Definitive Guide | 2011 | - --- &amp;nbsp; My questions: * is book about JMS 1.1 relevant in a world with JMS 2.0? (other than maintaining legacy code) * is book about Jenkins 1.x relevant for Jenkins 2.x ?
Findbugs is deprecated and no longer maintained, but [PMD](https://pmd.github.io/) has integrated all of it's features and covers a lot more languages.
Buy these. O'Reilly resources are great. Best $1 you will spend today. 
Thanks for the reply. Hopefully it's not too out of date. The assignment seems to be a simple implementation (not that I know how to do it yet). I think it's just showing we know how to stop race conditions.
Findbugs may be deprecated, but Spotbugs is its successor.
What if you need a debugger? 
Say it with me now, "a text editor is not an IDE..... a text editor is not an IDE".
lol. good luck with that.
I love vim combined with a certain set of plugins, but certainly not for Java.
"System.out.println()" - is the only debugging tool you need, especially on enterprise level 
&gt; is book about JMS 1.1 relevant in a world with JMS 2.0? (other than maintaining legacy code) Yes, it is. JMS 2.0 adds a lot but doesn't change enough to make learning JMS 1.1 fruitless. JMS 2.0 introduced a new API without deprecating the old (classic) API. &gt; is book about Jenkins 1.x relevant for Jenkins 2.x Jenkins 2 claims to be fully backwards compatible. However, so much new stuff has been introduced over the past couple years that I'd recommend finding a more recent resource to learn from. The book should still be good enough to get your feet wet.
Umm, lots of people, are you living in a cave?
can anyone give me thier opinion on which tier is worth buying
[Or give your IDE some VIM]([https://plugins.jetbrains.com/plugin/164-ideavim)
&gt; Spotbugs is its successor. "SpotBugs is the **spiritual** successor of FindBugs"
in spacevim we use https://github.com/idanarye/vim-vebugger for debug java and many other language. it supports: GDB - doesn't need introduction... LLDB - debugger based on LLVM for C-family languages JDB - a Java debugger Mdbg - a .NET debugger(Windows only) PDB - a Python module for debugging Python scripts RDebug - a Ruby command line option for debugging Ruby scripts 
The latest version of neovim and vim support job-control, we can run extra command asynchronously and add call_back_func for the stdout and stderr.
Just use IntelliJ with the IdeaVIM plugin and forget all that nonsense.
IntelliJ is a nice tools, but I still prefer CLI.
Not sure if you're being sarcastic but this isn't far from the truth (though I like to use a level configurable logger). Sometimes you can't find issues using a step through debugger because they only surface in a real working environment and properly placed printlns (or logger messages) definitely help track them down.
Moreover, it's not the hours you spent programming but also the experience you gather from users feedback, implementation in various environments... everything related to the environment your software will be interacting with. At some point, you realize that there are never enough inputs sanity checks :) In addition to that, taking time off/vacation where you will have some free time to think about how you have done things and ways to potentially improve parts is just as important in being good as having the necessary skills to implement it.
I don't understand how anyone can get through even the nutshell book. I've been struggling because it's so bland and doesn't click very often. Does anyone have any tips for learning by yourself from these books? 
Logger sure. Writing straight to system out in production env? Doubt it
Also see https://github.com/google/error-prone
Is it just vim-like movements or can it deal with plugins as well?
I have never seen any mention of plugin support. What VIM plugins are you interested in? I suspect the IDE probably already supports whatever functionality you are trying to get with a VIM plugin.
The real answer is to read the license. It probably protects you from: 1. someone clown claiming credit for your code 2. warranty claims. Be sure it states that there is no warranty on your code. You might want to be sure it has a clause that absolves you of any damages. It's the user's responsibility to ensure the code is adequate for their intended purposes. But alas, someone *could* put a copy of your code into their proprietary program, never tell you, even make modifications and improvements and never tell you. That's the down side. But most people won't. Like I said, I won't try to persuade you to use any particular license. But using GPL or even LGPL in some cases pretty much means your code won't be used in a proprietary closed source program. And that might be what you want. Or not. 
No idea, but IntelliJ provides on the fly null checking, using both inferred nullity and explicitly declared `@Nullable'/`@NotNull`.
Yikes
How about what if you need to do some complex refactoring? In my IDE I can do something like extract an interface from an existing class. Sure, I could write a regex to do that in vim, but it is definitely faster to right click on my class and select extract interface.
It's easier to manage multiple multiple war files that will each be mapped to different endpoints i.e. /companyA or /companyB because then you can have seperate code bases for each/any customisation you need to make for said subsidiaries. That being said, if you are sure that they will all use the same webapp, and no customisations will be needed, then it is better to use a multi-tenant approach and have them all log into the same web app. You have two options here: 1. You can have a different database for each company, see: https://www.ricston.com/blog/multitenancy-jpa-spring-hibernate-part-1/ 2. Which I would suggest, is to have a 'high' level (domain) object which will be inherent to every piece of data specific to that subsidiary. this way you. This way you don't need to manage multiple databases, and can limit what users can do/see based on which domain object they belong to.
The only problem that was brought up with the second option is that if one of your tenants get sued, they lock down the whole database. 
Excellent reply, thanks most appreciated. 
As an aside, Jenkins used to named Hudson before a legal kerfluffle with Oracle over the name. *Technically* Jenkins is a fork of Hudson, but is it really a fork when the original developers are the one who forked it?
You have to spend the Tier 3 amount to get all 15, friend. The £1 will only get you the first 5 books!
You're welcome. Check out entity filters if you're using JPA and decode to go with nr2 😊
Sweet! Bought the top tier. Such great value for the money.
So you're breaking the rules by posting a tutorial **AND** it's not even Java.
How is this better than Sonarqube?
&gt; especially on enterprise level What is this nonsense?
Nope. Those are 7 not-java tutorials
What is this exactly? Is jshell creating new anonymous classes for these objects? 
I had just recommended this video to a college that recently joined my team. 
http://openjdk.java.net/jeps/286
Isnt type interference and your post two different things? Im not too deep into the matter
1. **No Tutorials** here - see the **sidebar** 2. Kotlin =! Java - this subreddit is about **Java**, not about JVM languages **Post removed**
Seems interesting, will look into it a bit more. What I generally lack in all graph libraries is algorithms for spacial layout of the graphs, reducing crossing number, edge angles, etc. Would you you be interested in adding such functionality?
try kotlin.
It's both. An anonymous class is being created and then the type of the variable is inferred to be that anonymous class. This is something that isn't possible express without `var` afaik. It's basically something like this (since the class names generated by Jshell aren't useful I've replaced them with `Foo`): class Foo { public void foo() { class Foo$1 { void m() { System.out.println("m"); } } Foo$1 o = new Foo$1(); o.m(); } } 
so close
https://media.giphy.com/media/1M9fmo1WAFVK0/giphy.gif
Fuck Kotlin
ok
It's even smart enough to recognize that `record` means `rec` in the second example :) No, I can't wait to get me some of that jshell action...
Why would the DB get locked down? Image the machine or take a backup of the backup and store it, you don't need to lock down the db wtf.
How bout no, Scott
As an addition, the Minecraft Modding is Minecraft version 1.8, using forge version 11.14.1.1337 &amp; eclipse version 4.4.1. If you make a mod following this book, but want to make a mod for a more recent version(I believe 1.10 is the most recent and popular choice for modded), you'd have to update it.
Why do you want to torture yourself?
How often do you do that? 
It's nothing to be ashamed of really. Enterprise software comes with long term support and that means keeping things alive as long as requirements are met. A good analogy would be home and car ownership.
Upvoted because a) you thought to look into this, b) you put it all in tables and c) this much effort to justify a spend of $1-$15 should not go unrewarded. 
Doesn't C# have a massive advantage in desktop application space over Java? 
I might not be extracting interfaces too often, but refactoring in general is an area where IDEs shine.
Yes, I find myself using the IDE when navigating unfamiliar code, developing a new module, etc. Grepping code and looking up information quickly is where terminal+vi shines for me. Ex match a remote log entry in code, etc.
It's definitely much easier to make desktop applications with c#. I have yet to find anything comparable in Java to the designer in visual studio. Java you have to code it all vs drag and drop. If you're looking for something that will run on Linux and Mac right away most people would say to use Java. 
ABIS was founded in Shenzhen China,in 1996,adjacent to Hong Kong,has its own factory of 12,000 square meters. With the advanced facilities from Germany, Swiss and Japan, and a highly experienced design and engineering team. http://www.abismould.com
Looks cool. Can we have properties now please 
This almost feels like the scala repl
I use both and have found plenty of cases findbugs catches something PMD did not. The contractors hate them both, but we have to pass security scans to get to production and I've found a lot of overlap between the security scanner and findbugs/PMD. I had not seen spotbugs, I'll have to look into an upgrade I guess
I see. Thanks for the explanation 
a 19" 5x4 at 1280x1024? I'd rather just get a new one :)
try Clojure.
Well, in regards to value definitely all tiers. You'll have to decide yourself what's important to you. I paid $25 for the 3rd tier, because that's what it's worth to *me*. If you just want to pay $1 for the first tier, that's fine, too.
Can you give some kind of review for each. This will help me decide which book i should aim at
Yeah, d'oh. Fixed, thanks
- Me getting excited about a new Java feature - All the kewl kids out there suggesting all the other languages that no one will talk about in 20 years.
Creating an anonymous class with methods and attributes was always possible, but it was never possible to actually reference more than one of those methods and attributes. With `var`, this is now possible for the scope of the variable declared using `var`. Previously, you could do: (new Object() { void m() { System.out.println("m"); } void n() { System.out.println("n"); } }).m(); But now you've lost the reference to the anonymous class type, so you can no longer call e.g. `n()` on it.
You use [eclim](http://eclim.org/vim/java/debug.html)
it's more about being able to easily plug to rest of your pc/environment. Like dealing with multiple type of auto-completion: &lt;C-x&gt;f will autocomplete with filename of the current directory. Easily switching from buffers without having to entirely remap my shortcuts.
I thought I was just tired....
You can actually reference more than one method or attribute in Java 8. You can exploit the type inference in lambda functions. &lt;T, R&gt; R let(T t, Function&lt;T, R&gt; f) { return f.apply(t); } let(new Object() { void m() { System.out.println("m"); } void n() { System.out.println("n"); } }, ref -&gt; { ref.m(); ref.n(); return null; });
Am i the only one who realy dosen't like this? I mean anonymous classes are nice and all, but beeing able to call methods defined in them from the outside just seems plane wrong to me, or am i missing anything here? Are you able to do this outside of the scope they have been defined in as well?
Yes, that's cool, I hadn't thought of that. It works by the same type inference mechanism. Of course, `var` will be more powerful, as it will make it much easier to profit from this functionality, even in a classic, imperative style.
The methods are package private and thus visible to the caller (which is in the same package). It wouldn't work, had the methods been declared `private`: jshell&gt; var o = new Object() { ...&gt; private void m() { ...&gt; System.out.println("m"); ...&gt; } ...&gt; private void n() { ...&gt; System.out.println("n"); ...&gt; } ...&gt; }; o ==&gt; $1@57baeedf jshell&gt; o.m(); | Error: | m() has private access in $1 | o.m(); | ^-^
Excuse me, do you have time to talk about our lord and savior, vim?
Dzone is so good, its the only mail-newsletter i havent unsubscribed and actually read.
I find it annoying that you have to dig through piles of over-pedantic rules with questionable urgency rating and spend half a day blacklisting rules before you can use it to actually find any serious bugs and not drown in false-positives or style-warning noise. For example, an underscore in a method name or a lowercase static final are both 'show stoppers'. The highest urgency there is. A style rule with absolutely no relevance to the security or functionality of a program triggers a red alert in PMD. There is no way (I know of) to disable style rules in the Eclipse Plugin. 
Sounds like 'Murica
/r/learnjava
[removed]
I have another question, I was wondering if anybody has a real usecase for this. The only thing i could come up with was a Situation where i generate a lot of different local variables which i want to group in some way, other than just naming them with a prefix, so I'd create an object with these variables named after the group. 
I sort of thought it would be Spring rather than Eclipse.
Why? Eclipse is a non-profit setup to handle open source projects, while Pivotal, who owns Spring, is a for-profit corporation.
Just that Spring is the stack everybody is most interested in and garners the most attention. I've been interviewing the past few months, and every interview is full of Spring questions. Every job ad is a laundry list of Spring projects. It already seems like you can't separate the two. I'm sure Eclipse will be fine, though. Better than Oracle at least.
Yeah that's true. Would really like to see more love for Dropwizard for instance.
I was wondering the same. AFAICT, there are a lot of limitations: - there can only be one instance of `o`'s type visible from any given block of code (I think?) - you can't pass around `o`s and retain useful type information - you can't have a reference to a generic type that uses `o`s type as a type argument. That is, this fails in JShell: `var maybeO = Optional.of(o)` Regarding the last one, it *does* work to do `Optional.of(o).get().n()`, but that's less useful.
Remember Eclipse EE isn't the Eclipse IDE, kids
That depends very much where one is located. I have never used Spring in production, all our server side projects in Java are based on JEE.
Very nice!
Like Apache Hadoop is not Apache httpd
This might make sense in odd cases where you have only ssh access to a development box (and no GUI). But in general I prefer the convenient armchair-feeling Intellij. :)
Let's hope not. 
I don't think that's the way it works. Haven't been through the process myself, but that's the first thing one of the new senior Devs said about our system when he joined. 
The type info is local too, thats the Problem i guess
&gt; lord yeah, if I am in gui, I still prefer to use IDE.
JEE is dead, long live node.js (or whatever flavor of the month technology)!
I was going to try this, but it didn't work. Will research. Looks like a bug: jshell&gt; var list = Stream.of(1, 2, 3).map(i -&gt; new Object() { int n = i; String s = "" + ('A' + i); }).collect(Collectors.toList()); list ==&gt; [1@56ef9176, 1@4566e5bd, 1@1ed4004b] jshell&gt; for (var elem : list) ...&gt; System.out.println(elem.i); | Error: | cannot find symbol | symbol: variable i | System.out.println(elem.i); | ^----^
I think it's called Eclipse2EE
That would be I interesting. The class declaration is not in scope for the for loop.
Don't say the stuff like this here!!! JEE is alive!!!
It was dead to many in 1998
Have you tried Jooby?
Does anyone actually call Hadoop *Apache* Hadoop? And when anyone says Apache, how often do they mean anything other than the Apache web server? But there already is an Eclipse for JavaEE, which is used for JavaEE development, and now there's a JavaEE which is also Eclipse?
Dang, that looks pretty cool. Thanks!
I hadn't even heard of it until just then, it does look fairly impressive - particularly given that it supports both Sinatra-like and MVC style programming which might be very attractive to organisations that think they might grow out of the former and into the latter. I'll have to have a play with it at some point.
The guy who leads it is a machine for completion too. 
- Yes. `o` is a singleton, if you wish :) - No, you can only use it locally (thus JEP 286: *local* variable type inference) - I'd consider that a bug. The type information should be retained through generic type inference. At least, my intuition tells me so. There might be a caveat. JEP 101 also isn't always as intuitive as it seems.
Yeah, similar to what you discovered with your `Optional` example. Could be a bug, too, though.
It makes sense if the class definition is bound to the scope only. But it is definitly interesting that you are allowed to have objects whose class is not available anymore
I think for the optional example the “o” class is at least in scope, depending on how scopes work for = in Java (I’m assuming everything to the right of = is in the same scope as the variable declaration’s containing block.)
How was it decided that the EF is taking over?
You don't have a clue about you are saying.
Recommended by the author of said article no less!
Will read after my followup lobotomy 
man I legit wanna see someone record themselves using this. Im intrigued.
The bigger thing to focus on is the use of microservices, restful web services and service oriented architectures in general in large enterprises instead of large monolithic systems. That's why spring boot is so popular - people are composing applications out of many smaller spring boot codebase running in many separate, independent servers instead of one large Java EE application server. Spring boot makes it really easy. 
It was Oracle's decision, there a blog post [here](https://blogs.oracle.com/theaquarium/opening-up-ee-update) about it.
Brian Goetz should definitely be added to the list!
This isn't a "Replacement" for EE, it's talking about several "reference implementations" (e.g. Glassfish and friends are being reworked can since Glassfish was Oracle.) Misleading headline IMHO...
Another one? Thought you already had about 100.
How does this differ from curl/wget? 
EclipseJ2EE
After taking a look at the (less than optimal) code: it's a toy project from someone trying to learn programming (or Java). 
Most of the code can be replaced with apache commons
Thought so too, but the readme talks about 'we' and some website that has to be maintained. 
Thanks for the feedback! I usually use criticism to make my projects better after I make them private.
If you want people to review your code you can always ask for it on /r/javahelp. :)
 /** * @author OnlineBuilder * Copyright (c) &lt;2017&gt; &lt;OnlineBuilder&gt; * No rights or licenses from any copyright holder or contributor is granted, * whether expressly, by implication, estoppel or otherwise. * */ Uuhhhh...am I reading this wrong is it this stupid? Let's look at a few other things: * If you don't intent to document your code, don't add Javadoc blocks. * Why is the `bin` directory added in the repository? * Why is there no build script? * Why is `scanner` in `WebDown` a `static` member? * Why is the target path hardcoded? * Why is there a `println()` function in the main class? * Why is a class called `Database` handling *everything*, including user input? I haven't looked at anything except `WebDown` by now...you want to read stuff like "Effective Java" from Joshua Bloch and similar. Wait a moment...was I even allowed to read the source?!
Whoa wow I didn't know it was that bad. I'll order that book from Amazon ASAP. The reason why I coded it the way I did was because of my script knowledge. It affected my program as a whole. That's why I need that book really bad. Thanks!
*Spring
Learnt this one the hard way...
Wouldn't recommend this and it's deffo something somebody wrote as a learning practice. 
Thanks for the link!
As someone experienced in computers and who understands the basics of programming but is new to java, which order should you read these books in?
And not confusing at all , why are there two rest api frameworks ? Eclipse Jersey, a REST framework. This project provides a reference implementation of JAX-RS. and Eclipse RESTful Web Services API for Java, with an API and test kit for Java API for RESTful Web Services (JAX-RS). And also two webservice frameworks Eclipse Tyrus, providing a reference implementation of Java API for WebSocket and enabling development of WebSocket applications for bidirectional communication between a server and a remote host. Eclipse WebSocket API for Java, for integrating WebSocket into client and server applications. Its free and open source and thats great, just so poorly executed imo. 
&gt; Jooby &gt; We diverge from the default resources structure to adopt the Jooby standard: There is an xkvd for that I think
&gt; 296: Consolidate the JDK Forest into a Single Repository I'm curious what they're gonna do. As someone who has written and published quite a few libraries, publishing it in a repository was the **worst** experience for Java and it was a major deterrent for me doing it again... 
By the same Author: "How to change Wheels on Cars and Trains"
Maybe a silly questions...but are those books good to start learning java for beginner? I was thinking about learning it a bit, but since I dont now who to ask (I may need some javascripting for my hobby at home - makeing some rpg games) So I just need some "basics" for the start :) Was thinking to get the first bundle only. Any suggestions or should I go for something different?
Followed by "How to change the engine in your truck and in the space shuttle"
More like "How to change the engine in your Space Shuttle (Java) and your Bobbycar (JavaScript)"
Ahrm, just to make sure, that "is it this stupid" part was meant for the license header. 
Ah theserverside. Haven't been there in ages. Now I'm reminded why.
Don't forget about java swing. If you have experience with swing there isn't much reason to go with javafx, swing seems to be much more mature. It doesn't look as hot though. But as long big IDE's like intellij and android studio use it it should be save to use it.
I believe this is mainly about organizing their source repositories in a more straightforward manner so it's easier for the developers working on Java and the JDK itself to maintain their code.
There's a book called "Learning Java", you probably want to start there.
Looks like java 8 is going to be popular for a long time.
Why?
none of these are killer features.
For me I'll make the move once there is Wildfly release that supports it. Unfortunately the just released Wildfly 11 is incompatible due to the javaassist and Hibernate versions used.
The Lambda book is excellent.
This was also explained by John Oliver in Last Week Tonight: https://www.reddit.com/r/itsaunixsystem/comments/76orz9/last_week_tonight_with_john_oliver_from_tonights/ ;)
Local variable type inference will be nice, but not enough for most people to switch.
Java 9 is just the foundation to create rapid change in Java. It will take some time for the long-term benefits to manifest.
But only if it consents
Beg to disagree: modules are a killer feature for library developers. But is a PITA for most users :-)
Coming from the C++ world and then start programming in Java this obsession with calling passing of an Object argument as "by value" is totally confusing and, in my opinion, misleading. If you _pass a a reference_ to a mutable object to a method, any modification to that object through that reference will be reflected in the object outside, and for all intents and purposes, that is "call-by-reference" (hint: we pass a reference). Of course the actual reference is passed by value. That is true also for C++. I do not know why this is so important for Java developers to say that all arguments are "call by value" in Java. For me, the argument is the object, not the reference (which is a technicality). I would be happy if someone could explain why this is of such an importance to the Java community. While I am at it, I wish Java would have the opportunity to protect mutable arguments from being modified by using something similar to `const` in C++. To make the argument `final` will only protect the reference, not the object it refers to.
I like the that you can build your custom runtime, down to 15 mb. That's pretty cool. But modularization of the JDK would have been sufficient for that.
When I saw that example my first thought was: Wow, you can write some _really bad code_ like that. On the other hand, if you have any sort of quality control this will never be used.
It also has potential for embedded development
I use docker, but I have no desire to use this feature. I have a common base image with the JRE and some common tools that I then build another image for my specific jar. By having a common base image with the full JRE, it is actually less space since my multiple images all share the same base image. Having a custom JRE per application would reduce the amount of shared space
If you are going for an immutable object, you could try setting the fields to private and adding only getters or setting them as final. Then initialize them using a contructor. 
But if you're coming from the C++ world that should be exactly what you'd call it, I'm pretty sure... It's been a long time but "passing by reference" in C++ specifically refers to the &amp; syntax on a parameter right? Passing an object in Java really is exactly the same as passing a pointer by value in C++. Passing a pointer by value means that the value of the pointer is copied onto the stack when entering the method and so lost on termination. Passing a pointer by reference would mean that assignments within the method would change the value of the pointer *at the invocation site*. That is not what happens in Java, ever.
The fact that the argument is essentially the object (but in fact, only the pointer) is important because 1. it's only the pointer and is therefore faster than an object copy and 2. It is not a pointer to a pointer. Callers will under no circumstances have their stack state mutated by functions they call.
Does anyone have an example when you would need multiterrabyte heaps? What kind of workload is using that much memory? 
The Learning Java should be good as a starting point, as would Think Java, with Think Java being more basic it seems.
Google translation for jeesite: &gt; ## Why MyBatis &gt; * Learning Cost: Hibernate really masters a lot more difficult than Mybatis. Mybatis framework is relatively simple and easy to use, but also more flexible. For those who have studied Hibernate, learning MyBatis is also easier to use. &gt; * Development costs: We all say that Hibernate development efficiency, MyBatis personally think that the development efficiency is not lower than Hibernate, through the code generator and package development efficiency is not a problem, and MyBatis controllability is relatively high, and easier to maintain. &gt; * Performance: As Hibernate more difficult to grasp, the performance has become a bottleneck in Hibernate problems, of course, if you are very familiar with Hibernate, Hibernate performance is not a problem. However, for the most part, there are very few people who really have Hibernate, but the risk to the project is even greater. &gt; * Multi-database support: Some people say that MyBatis is difficult to support for multiple databases. I think this is not a problem. Although JeeSite only provides support for MySql or Oracle database at present, it is not troublesome to support other database changes. SQL is specially written In XML, for most SQL are common, for different databases by dbName to distinguish and modify the individual SQL fragments can be.
Your last sentence is a major differentiator. This is definitely the case in C++ where you can pass references to stack allocated primitives and objects to a function/method. It still doesn't explain why the Java community insists in calling passing a reference to an object as "call-by-value".
[removed]
Right -- if you're versioning your Docker images correctly, the delta between each image should be pretty small. I haven't done this yet, but I want to try to split our fat jar into application code and dependencies so that we can cache dependencies more efficiently. Even still, unless you're running at massive scale, disk space is cheap and slightly inefficient images aren't that big a deal. Slim JVM for desktop apps is still pretty cool though. I wish I liked UI programming in Java more.
Too bad the net doesnt support java
I do machine learning work with multi-terabyte heaps on a regular basis 
That was kind of what I assumed the answer would be. How much benefit do you think ZGC would bring to your workload? Do you regularly run into GC related issues? This seems like a very exciting engineering challenge.
MyBartis is a good choice. Much lightweight, much more control over SQLs. Don't know if it's a chinese thing, we have lots of projects here based on MyBatis. It's just pragmatism.
might as well be a jshell only issue. I've reported a few issues in the recent days, including: https://bugs.openjdk.java.net/browse/JDK-8191842, https://bugs.openjdk.java.net/browse/JDK-8191834
But this is the exact same semantics as in C++. It's not only important to the Java community, it's what everyone calls it. And of course it's "a technicality"! We're specifying the behaviour of addressing and allocating memory during the execution of a computer program, it pays to be technical. That you would ask why it's important to the community to use careful language to describe that is baffling to me. I think the central problem is in recognising that there is a difference between passing *a* reference to something, and passing something *by* reference. The former is what happens with objects in Java. Both cases would mean pushing a pointer to the thing onto the stack when we enter a method, the difference is that in the latter case, operations on that variable in the method would be desugared to work directly upon the dereferenced memory location of the thing that was passed, right? Of course it wouldn't actually make sense to want to pass an object by reference in Java, though the concept passing a reference by reference is still a meaningful distinction ... but when stack allocated value types arrive the difference will only become more important to recognise.
But it's *exactly* the same semantics as in C++, why on earth would that be confusing or misleading? How is it any more an "obsession" than when C++ people use identical language to describe identical behaviour? &gt; If you pass a a reference to a mutable object to a method, any modification to that object through that reference will be reflected in the object outside, and for all intents and purposes, that is "call-by-reference" (hint: we pass a reference). Of course the actual reference is passed by value. That is true also for C++. No, absolutely not. Passing *a* reference and passing *by* reference are two completely different things. What happens in Java is equivalent to passing an existing reference *by value*. Passing *by reference* always creates a new pointer to an existing location on stack. What we are doing is copying an existing pointer from the stack onto the top of the stack. When we pass by reference we then desugar all operations on the newly created pointer such that they act directly on the original memory location further down the stack. This is already an important distinction, and will only become more important when Java gains value types and stack allocated memory becomes more richly populated than by just primitives and pointers. &gt; For me, the argument is the object, not the reference (which is a technicality). I would be happy if someone could explain why this is of such an importance to the Java community. Of course it's "a technicality"! We are specifying the behaviour of copying and allocating memory on the stack when making a method invocation, it pays to be technical. That you would question why it's important to use careful and consistent language to describe this is baffling to me.
It seems Eclipse RESTful Web Services API for Java provides Specifications and APIs for JAX-RS. Jersey is an implementation of those specifications. Same thing for Eclipse WebSocket API for Java and Tyrus. It's like comparing JPA and Hibernate.
Nah, that analogy would be comparing JAX-RS to Jersey.
OFC it does ...
**No surveys, no job offers!** Such content will be removed without warning
Kotlin != Java This subreddit is for **Java**, not for **JVM languages**.
The real question here is, how you discovered this projects?
It came to https://github.com/trending/java from time to time when I was monitoring.
Also you can check from https://gitee.com/ (aka. chinese github).
I love mybatis! We started using it at my job 4 years ago over hibernate because our legacy DB structure was so bad that we need that flexibility that it brought over hibernate. It takes more effort up front, but I've always found it to be super easy in the long run. We use strictly annotation configuration over the xml, using the script tag if we need to do anything fancy :)
Mother of Perl!
Ah so. Looking at it now...this is funny - (s)AINT is a Spyware Generator for Windows systems written in Java.
&gt; Passing a reference and passing by reference are two completely &gt; different things. What happens in Java is equivalent to passing an &gt; existing reference by value. Passing by reference always creates a &gt; new pointer to an existing location on stack. What we are doing is &gt; copying an existing pointer from the stack onto the top of the stack. This does not make entirely sense to me. In C++, when you write `foo(&amp;bar)` you pass `bar`by reference to `foo`, right. The actual reference to `bar` will be put on the stack, of course, irrespective of where bar is actually stored, the stack or on the heap. Exactly the same happens in Java (assuming `bar` is not of primitive type and not immutable). Why don't you say that this is "pass by reference"? You seem to imply that pass by reference only can happen to items on the stack. Why is that? Whether or not it is a new pointer (or reference) you pass to the method/function is irrelevant here. In C++ the compiler can choose for a caller to allocate a pointer/reference on the stack frame of the calleee so that there is no need for a new copy. Why would this be a pre-requisite for being called pass by value? I am not trying to be difficult here, I just trying to understand why something is called "passed by reference" in one language (in this case C++) is called "passed by value" in another (Java) when it means exactly the same thing. Your arguments have not convinced me here. I have been told earlier that a litmus test for being passed by reference is if you can do a swap-function. Here is a swap function for a mutable object, and it works just as I would expect from pass by reference. public static void swap(mutableInt a, mutableInt b) { mutableInt t = new mutableInt(b); b.set(a.get()); a.set(t.get()); } In my world, when you pass an argument by value, the function/method cannot modify this argument. The argument is the object being passed (not the reference), so since you can modify objects whose references are passed into a method in Java, it's pass by reference in my book. 
[Direct link to the repo](https://github.com/OpenGenus/cosmos) The project looks great with implementations for so many algorithms/datastructures! But IMHO choosing GPLv3 as the license makes it harder to use it in big companies. In my experience code under Apache 2.0 and MIT license is easier to get approved/on-boarded. At least it can serve as inspiration.
While it's no lambdas, I really want to move to Java 9 for collection factory methods. And I'll imagine I'll want to move to 10 for local variable type inference.
&gt; collection of every algorithm and data structure one will ever encounter and use in a lifetime Many data structures are domain-specific...
Yeah this sounds like it was mostly put together by college students and others seeking to put some open source contributions up on GitHub, even if it's just solving toy problems. 
&gt; The project is complitely community-driven and has 300 active contributors at *GiHub*. Didn't know that **GiHub* was a thing /S 
There are many great new features, some are more complex and some less. Viewing those can help you a lot, there are a few concurrency issues that might be too complex, thus create bugs and errors that are hidden in the code and hard to be detected. Unless you're using programs as checkmarx, you are facing some work regarding vulnerability detecting. I'd suggest working on that. Good luck!
I think the point is that, at a fundamental level, there's only a limited number of *abstract* data structures. 
&gt; Exactly the same happens in Java (assuming bar is not of primitive type and not immutable). Well that seems like an unnecessary and confusing assumption. Why not just create a model which is consistent across the board? &gt; Why don't you say that this is "pass by reference"? Because the parameter is a pointer, not an object. I know that this is the case because when I assign to it the original object is not modified. The pointer is modified to point to a different object. I am assigning to the pointer, not to the thing which the pointer references. &gt; You seem to imply that pass by reference only can happen to items on the stack. Why is that? Weeell okay that's just looking at it from a Java perspective ... Because Java doesn't really have any operators which apply directly to objects, it only has operators which apply to primitives and pointers (e.g. the dot operator is equivalent to `-&gt;`). So it doesn't really make much sense to have a general mechanism to reference things on the heap, though I suppose you could reference fields of objects on the heap or array elements. &gt; I have been told earlier that a litmus test for being passed by reference is if you can do a swap-function. Here is a swap function for a mutable object, and it works just as I would expect from pass by reference. &gt; public static void swap(mutableInt a, mutableInt b) { mutableInt t = new mutableInt(b); b.set(a.get()); a.set(t.get()); } Okay, and what if the object is immutable? You must realise that isn't what people mean by a swap function in this context; they mean one implemented **by assignment**. By your logic passing a pointer by value in C++ should also be called passing by reference (please excuse any simple mistakes it's been a while): void swap(mutableInt* a, mutableInt* b) { mutableInt* t = new mutableInt(b); b-&gt;set(a-&gt;get()); a-&gt;set(t-&gt;get()); } &gt; In my world, when you pass an argument by value, the function/method cannot modify this argument. The argument is the object being passed (not the reference), so since you can modify objects whose references are passed into a method in Java, it's pass by reference in my book. No the argument is not the object, it is a pointer to the object. And you cannot modify that pointer, you can only modify the copy of it which is created (and possibly the object it points to).
You can argue there are two (in Java) - objects with fields and arrays. It is pretty arbitrary to call some structures abstract. Either way, I'm not sure what this project is supposed to achieve. It is not lower quality than existing implementations of data structures, and many data structures are difficult to use as a library anyway. It is also not a great learning resource since it doesn't actually help learning the point of these structures. Maybe it'll help you pass an interview but I don't see the real world application.
http://www.baeldung.com/mybatis No thanks. I’m not using an ORM. I’m using straight jdbc and writing my own sql and mappers. It’s easy. I do t have to learn some other framework and work around its quirks. 
There are some downsides to this approach too... No safety around using incorrect column or tables names in your queries. If your database never changes this might not be a big deal, but if and when it does, tracking down all the spots in your SQL that need to be updated can be a pain. Also no safety around using the wrong type for a column in your mappers. Personally, since trying out jOOQ I haven't looked back. I wouldn't call it a full ORM, but it generates classes for you based on your database schema, it has a query DSL that feels very similar and natural coming from SQL, and most importantly it gives you **safety at compile time** for these two issues.
If you are not already using java 9, I doubt that you "really want to" migrate to it.
Oh good, I really didn't know what I was thinking. I'm glad you let me know.
There’s is safety. They are called unit tests. 
They say it is meant to make it possible to program offline. In that sense it is pretty helpful if you know what you would need for your project, but dont know the exact implementation details. You can look up an implementation in at least one language and reimplement it the way you need it. Kinda a niche case because most people have access to the Internet when they code but that doesnt make it bad
TBF English may not be some people's first language and I know with myself, I'm dyslexic, I could reread something 40 times and not see a letter missing in a post. Accept the offer of free learning and leave op alone. They're just trying to share something helpful
I'm just saying you are hardly the poster child for the "upgrade from java 8" movement; which doesn't exist, due to lack of killer features...
Ever considered that I don't get to make the decision as to what production platforms run and therefore have no control over whether I can use Java 8 or Java 9?
I suppose the use-case for this is programming competitions.
&gt; collection of every algorithm and data structure We can finally prove that P !=NP
And generally learning to program stuff
The Java snippets are not idiomatic. They should stick to C++ instead of "translating" it over to Java
It’s just a great, no-nonsense ORM
get back to me when you are on java 9
The commentor's point was that they disagree that this solves every data structure you'll ever use. Granted, most of the domain specific structures are made up of known data structures, the permutations are infinite, and I doubt you could condense a reasonable portion of them into an equivalency. Image an object that holds a map of a list of a map of a set of priority queues, as an example.
I haven't looked at ZGC in particular, but there is definitely room for improvement in the GC for massive heaps. I've had to re-write code to be more "GC Friendly" on a few occasions. Situations where the program would crash due to a GC overhead exception, or I would get a false out-of-memory exception. The rewriting didn't change the amount of live objects, just the amount of garbage objects created (or the patterns by which they are created). If ZGC can help me avoid doing that, and allow me to better use the last 100-500GB of my heap, that would be awesome. 
"The Cosmos is all there ever is or will be" -Carl Sagan
&gt;It still doesn't explain why the Java community insists in calling passing a reference to an object as "call-by-value". Because it's Java and not C++. Is that reason enough? A hand-held device for creating directional illumination is called a torch in Britain. In the USA, a torch is a burning bit of wood. It would be stupid to argue over it, right?
Thank you for sharing, just picked up tier 2 bundle.
There are a very, very large number of algebras.
Can I please have the closed form solution for a 100 body system?
If you're a hipster, use js and whatever popular js framework of the week. If you wear at least business casual, go with pure java. 
I've never called Matlab from Java, but the reverse works great and the objects that are returned have all the fields. Could you invoke your Java from inside Matlab ?