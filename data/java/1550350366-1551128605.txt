Write a list of functions (on user level), which should be provided by system. It is called "use cases" or also "user stories". Every term used in this functional specification is a candidate for a class or an attribute. For example in library: * Borrow a book from library * Find a book by title * Find a book by author So, the "book", "library", "title" and "author" can be a class or an attribute. However, not every term will be a class ...
1. Learn Java better (Effective Java, Java puzlles, ...) 2. Learn OOAD better (Domain-driven design, SOLID, UML) 3. Learn an architecture (Microservices, CQRS, Event-sourcing ...) I think, you will be more valuable as a better Java developer than a next beginner in Python.
Where's episode 0?
There's none, my episodes are 1, not 0 based ;)
Hah, creepy grin, that's a first! :)
This is an episode not an array :))
The video is online: https://fosdem.org/2019/schedule/event/kubernetesclusterfuck/ So you can watch it if you still care. CC: /u/sievebrain /u/DefiantNewt2 /u/jpl75 /u/cogman10 /u/ReadFoo /u/lurker_in_spirit
Try writing it multiple ways and pick which one seems the best. There are no hard and fast rules
Error3 is declared inside the loop scope. Declare it outside.
Also, you do not need to do new String(Choice) because Choice is already a string. You also do not need to do == true either.
Thank you for your answer, my error is solved :) 
Thank you for your answer, my error is solved :) 
I can't recall seeing Duration used in concurrent contexts. I don't think it improves readability or safety or either user or implementation side, compared to time + unit approach, and it also bounds users to allocate some garbage.
I'm going to make the quick critique that this isn't a Java thing so much as it's a Spring Framework thing. 
Thanks for your contribution! I've added item 5.2 about Monitor class. &amp;#x200B; I didn't mention spurious wakeups because it is generally covered by the statement "explicit lock waits are error-prone". Item 5.1 refers to Effective Java, Item 81 that mentions spurious wakeups.
videoList.charAt(0); Err
Also on the topic of cloud, picking up technologies like message queues and pub/sub doesn't harm.
Well I guess "fake" is a better description - or at least it feels that way ;). Having you visible in the bottom right also does nothing really but distract... I know thats what lots of streamers etc do but.. they aim to entertain, you aim to educate (I hope). At least I could do without it :)
I just started learning java at UMUC and was just starting to look for a good video course to augment the class. Thanks for uploading this. 
What software did you use for the screen capture video/audio? Do you have a special microphone? I’ve always wanted to do videos like this but never felt like I wasn’t just regurgitating a bunch of already existing content. 
Or heck just run with it and be the [Devil Boner](https://www.youtube.com/watch?v=1ETh4b1JvrU) of Java. :B
tbf, anyone using spring is more than likely employed as java dev
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Do it you wont
Has anyone told the Eclipse developers? They always seem to be surprised when a new release comes out.
I'm using a mix of OBS (recording) and Camtasia (mainly for editing), though I have been experimenting with this over the years. Yes, it's a pretty special setup (camera and audio-wise). Again, here I started out with a plain old webcam etc. but now it's a Rode Procaster (Audio). I see your point, but it is \*incredibly\* rare to find really good, simple educational content, where complex concepts are shown with pure code and simple explanations. And where it's not only theoretical "you could do this or that", but actual code from real-world projects. So why not give it a go :)
My courses are probably not suited for Java beginners, but in any case, feel free to let me know whenever you have any questions/topics are unclear/you'd like to see specific topics covered. I'll try my best to incorporate suggestions etc. in future videos.
I think it's a topic that divides people. All my old videos are 'without me' in the bottom right, then some people wanted to see a face, while e.g. code compiled etc. So I guess I'll try this for a couple of vids and see what the general consensus is. (and less of a fake smile...;) )
He does look somewhat ..similar ;)
We're still on Java 8.
We are aiming to have everything on Java 11 and then it’s up to each team decide if they want to upgrade continuously or not
We are still on Java 8 in production but actively studying java 11 and modules sith openJDK11. As of today migration is not on the agenda.
True 😔
Eclipse is open source and community driven, feel free to help out. :)
So people are actually using java fx?? Never have i seen a job offer where they asked for a java fx developer
Are your tools ready for Java 11? I can't go to production without visualvm for example.
Isn't it List&lt;Episode&gt; ? 
And here I am with Java 8
We're (happily) at Java 8, it does everything we need for now. Not sure when we'd make the jump and if so to what version? 
Also known as Java 11 SP1
To be fair the java releases got a bit out of hands lately. 
Upvote if you're sick of hearing and reading about SOLID.
Don’t worry about it, you’re not the only one, most companies haven’t even started looking at moving off Java 8. 
I just can not get enough, IMHO it's an evergreen 
I’d stay on Java 8 for now. If you really want to move, Java 11 has long term support so that would be the recommended next step. My team just got done writing some tooling to help with the move and it’s more disruptive than previous versions. So, I’d definitely say stay on Java 8 for now unless you really want to use some of the new features.
Really love this. It’s so hard getting people to appreciate some of these values. 
They recently switched to a more regular release cycle with some of the releases having long term support and some having short term support so you’ll be seeing more regular announcements like this in the future. It’s definitely different than the three years you used to wait between versions but now you get to experiment with intermittent versions if you’re interested.
Tried it, yes it does in a real browser. Most likely because the "robot check" exists for browserless web access. Anything that runs an actual browser and behaves similar to human, using a mouse, can bypass it.
What version is the android community using?
We rely on Redhat images, thus still waiting for 11. But they have JIRA ticket related that and it should be any day now. But I feel we'll move only to LTS versions.
We're still on Java 8, but have plans to upgrade to 11 later this year (this time using a non-Oracle JDK).
I feel like this is more of an r/programming post, rather than for a specific language. 
SOLID principles are generic to every OO language, this is more a quick cheat sheet that you can pull over during everyday java programming 
True. Just thought I should mention it. They're great principles to follow though. It made my life easier.
Slow down! I can't keep up!
What visualvm has to do with running java 11 in production?! Is it a part of your application?
We're currently using Corretto 8, but will be upgrading to Corretto 11 once it goes GA.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
private final by default for fields, public by default for methods would be my choice. (lombok can help a little bit)
For language features we tend to use Java 20-ish via Kotlin. For VM features like indy, condy, valhalla, loom, panama, and all the other things which would benefit disconnected, constrained devices they're a pipe dream likely never to come.
OpenJDK 8
&gt; if it looks like a duck, quacks like a duck but needs batteries for that purpose - it’s probably a violation of LSP I'm stealing this.
Please, steal everything 
Dependency injection is such a meme. It's called parameterization
"A rose by any other name would smell as sweet"
Annotation and code generation frameworks are about as sweet as a pile of shit. If you ever catch me using that stuff, shoot me
https://visualvm.github.io/ VisualVM now works with Java 11.
I don't like `@Inject` annotation here. It's better to use vanilla constructor injection that doesn't require any framework/container/cdi-impldmentation in example like this.
Accurately, no. That's why they're irrational. For a given decimal places, sure, that is the purpose of BigDecimal.
I've updated it according to you suggestion, thanks!
The goal is a better code, the way you prefer to get it is not relevant
How so? He specifically mentions you can turn on logging in any SQL library and lists a few other examples such as plain JDBC or jOOQ. Both of which also have SQL logging.
Nope, too bad.
&gt; I doubt that many people will upgrade. Nobody will. We all cried for years that we want faster, faster, faster releases. And now we're getting them, and everybody ignores the intermediate releases and only looks at the LTS ones, which effectively means Java is at the same update speed again as it was before. Be careful what you ask for, huh?
It looks like in your [submission](https://www.reddit.com/r/java/comments/arpjmj/matching_strings/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
'The ends justify the means'
To expand upon that the only way to store an irrational number is symbolically. You can store literally "sqrt(2)" but you can't store the numeric value of the square root of 2 exactly because it can't be represented by a fraction or finite decimal. (Floating point numbers are always fractions, decimals are integers with an offset for the decimal point's location.) There are programming languages that work with symbolic numbers such as Mathematica, but I haven't used them since college. 
OpenJDK, still using Java 8 but there's no reason we can't go to Java 11 or more. Just haven't done it yet because there's nothing in the backlog for it yet.
RemindMe! 5 days "Gotta check it!" 
God having access to lambdas and stuff in Java 6 is so good
https://www.linkedin.com/jobs/view/972212998/?eBP=NotAvailableFromVoyagerAPI&amp;refId=76017bdb-23b0-4c82-8837-cd5b39b23163&amp;trk=d_flagship3_search_srp_jobs
No. In fact, it can't even store all rational numbers. It can only store numbers that can be represented as *n*×10_^(a)_, where _n_ and _a_ are integers from certain ranges.
Testing compatibility started after Java 10 came out, there were few minor issues that were resolved quickly. For a while, the testing cluster was a mix of Java 8 and Java 10. Since last autumn, it's just `apt-get install openjdk-11-jdk` and everything continues as usual.
While I understand you point, the question isn't unreasonable, actually, I really dislike these types of responses when it comes to open source software. The amount of OSS and the complexity of it that we all use daily makes your suggestion nearly impossible for most people. There's often a dedicated person or group of people who maintain OSS packages and they are often specialized in some way. The barrier of entry is often pretty high for a random person to jump in and offer some help, they'd need to dedicate lots of time to just "feeling free to help out".
You should learn Go. As a Java developer I hate to say that, but Go has the momentum at this point. Lots of new projects and libraries are all written in Go to the point that I believe it will (or already is), impact Java's growth.
Dependency injection and inversion of control become incredibly useful as your system grows in size and complexity. I can’t imagine working on anything of substance without it anymore. Also, I don’t think you know what “meme” means. 
Clearly, 'meme' here means 'cliché' or 'joke', as in ["people thinking speedrunning is cool..."](https://youtu.be/08Ju7nel5cQ?t=148) &gt;can’t imagine working on anything of substance without it Do you mean capital-letters Dependency Injection (as in @Autowired etc) or do you mean common-sense parameterization? Because TDD-inspired code generation is a complete cancer. It offers nothing of value that can't be gotten from parameterization and it inflicts untold pains such as byte code with no corresponding source code and straight-up fragility (oops it won't compile again because the shit-ass xml file didn't tell it the right location to scan for beans! *LOL*)
&gt; shit ass-xml file *** ^(Bleep-bloop, I'm a bot. This comment was inspired by )^[xkcd#37](https://xkcd.com/37)
I don’t mean either of those things. I don’t use any code generation, and I’m unfamiliar with the concept of “TDD-inspired code generation.” My typical approach these days: using recent versions of Spring and Spring Boot, I annotate classes with @Component and give them constructors which take their static dependencies as parameters and preserve them as final member variables. In my startup class (the one that invokes `run()` on the SpringApplication, I annotate with @Configuration and @PackageScan (specifying the top-level package unique to my application, i.e. `com.mycompany.thisapp.*`), provide some @PropertySources, annotate some methods with @Bean, and to get things started. In general, I don’t pass dependencies to _methods_ as parameters; I rely on Spring to make them available to the class in advance. Unless the class is a short-lived instance (e.g. a value object) and requires a short-lived dependency, in which case that’s really the only good option. 
Oh, and “meme” doesn’t mean “joke” or “cliché.” That was my point. 
Remarkably well. We were expecting to not have everything up to 11 until mid-2019, but my team has really stepped up. The effective death of JNLP was an expensive PITA to replace, but we're there now, with per-platform distribution packages and jlink runtimes. Automated signing of Windows distributables was one of the nastiest parts of the process. OSX was a close second. Now that we're past the breaking changes, I'm looking forward to seeing if there are any features that can actually *help* us.
[Your point is wrong](https://en.wikipedia.org/wiki/Meme)
**Meme** A meme ( MEEM) is an idea, behavior, or style that spreads from person to person within a culture—often with the aim of conveying a particular phenomenon, theme, or meaning represented by the meme. A meme acts as a unit for carrying cultural ideas, symbols, or practices, that can be transmitted from one mind to another through writing, speech, gestures, rituals, or other imitable phenomena with a mimicked theme. Supporters of the concept regard memes as cultural analogues to genes in that they self-replicate, mutate, and respond to selective pressures.Proponents theorize that memes are a viral phenomenon that may evolve by natural selection in a manner analogous to that of biological evolution. Memes do this through the processes of variation, mutation, competition, and inheritance, each of which influences a meme's reproductive success. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
How is it not code generation when you have @LolAnnotation Database db; void someMethod() { db.doAThing(); } And you don't get an NPE? Byte code is being generated to assign that reference -- with no corresponding Java source code in your project. If you run Find Usages in your IDE it will turn up nothing. So you have to start digging through the documentation of whatever nonsense is doing the injection. It'll tell you to start dicking around with xml files or something equally terrible. You'll likely be unable to even compile, let alone run your code without clearing up whatever discrepancies it's complaining about (ususally with absurdly useless error messages).
Sorry, you’re going to have to explain how that correlates with joke/cliché. A meme is an idea that spreads through popular culture. Sometimes the ideas are jokes, and they can become cliché, but I’m not seeing how either of those scenarios is consistent with the usage I called out. 
Spring’s dependency injection uses reflection, not code generation. If you import the source, you can step through every line of the bootstrap process. And if you use a good IDE (I use IntelliJ Ultimate, because work pays for it), Find Usages does, in fact, find the usages. 🙂
Thank you for sharing something so awesome. When can I find more stuff like this, that combines practicality and good software practices 
Oh, and also, that’s not what my code looks like. @Component public class MyClass { private final Database db; public MyClass(Database db) { this.db = db; } void someMethod() { db.doAThing(); } } 
Dependency injection is a meme. It's a viral phenomenon. A trend. To the extent I'm using 'meme' in a derogatory way I'm calling it a joke. As in "what a joke". Meme is a very broad concept
You'll need to keep track of the smallest and largest as you go along. ``` for each number: if (number &lt; smallest) smallest = number if (number &gt; biggest) biggest = number ```
DI and IoC may have spread to some parts of the dev community in a meme-like way, but in my neck of the woods, that is decidedly not the case. It’s recommended in books, has widespread acceptance, justification, and documentation that go far beyond the “this is what ____ uses, so I will too.” On the projects I work on, we’re making a conscious decision to use DI on its merits. There’s nothing meme-like about that. I share your general distaste for bytecode generation, but as I have shown, there are ways to use DI without generating code. Seems to me like you’re conflating the two. 
Without using methods, you can always use if else statements but it’s very lengthy. You can also use the Math.min() and Math.max() methods along with an of statement. You can also store all 5 ints into an int array and construct a for loop that will check if the array[i] greater than the current max value or less than the current min value and then reassigning said variable
I guess IntelliJ has been getting more and more integrated with Spring via plugins. Processing third-party annotations to do reflection is so far from how Java is supposed to work it's insane. Java is Turing-complete. It doesn't need any of that heavyweight insanity. QE teams push it because I guess it makes their job easier at the expense of everyone else. So it actually does reflection at runtime in production? That's very sketchy.
So why not call the constructor using your own code
Only at startup time, but yeah. I’ve been running production apps in more or less this way for more than a decade. These apps have had issues, but I can’t think of a single time that a production issue stemmed from this use of reflection. There are ways to use reflection that are sketchy, but this isn’t one IMO. FWIW: The Spring plugin I use is developed by Jetbrains (the same company that makes IntelliJ) and bundled with Ultimate. At this point it’s only a plugin so that it can be disabled when not needed. You call it heavyweight insanity, but the alternative is worse. I’ll explain in reply to your other comment. 
I could, and in unit tests, I do. (That’s part of the benefit of developing this way; the class is happy to be instantiated normally or via Spring.) The reason to let Spring do it is less about the constructor and more about keeping track of the constructed object and having it available and readily accessible any time I need to construct another object that depends on this one. I develop complex enterprise web applications. In a typical application I work on, there are over a million lines of code and thousands of Spring-constructed classes. (We have some newer stuff using a “microservice” paradigm where the numbers are smaller on a per-JVM basis, but we still use this mechanism and for the same reasons — just spread over dozens of JVMs instead of one big one.) With a relatively small number of exceptions, each of those thousands of classes has some dependencies it needs in order to be instantiated. Many of the dependencies are needed in dozens to hundreds of places. Others are needed just once. With dependency injection, I don’t have to keep track of all that. I just declare what I need as constructor parameters, and Spring knows where to get them, including determining an order of instantiation so that each object is constructed only after all of its dependencies are available, and providing circular reference detection and diagnosis. Sure, I could write all of that code myself, without any reflection. But it would be heavier and more cumbersome that Spring’s implementation, and I’d have to maintain and debug it. Instead, I can lean on Spring to handle all of that, and I get to focus on the code that is unique to my application. I also use Apache HttpClient instead of rolling my own socket-based implementation. I use Freemarker and/or Velocity for templating. I use Jackson or GSON to (de)serialize JSON. I use Jersey to define my REST endpoints, and Jetty to serve them over HTTP. Where well supported and widely used libraries exist that accomplish what I need, it’s often preferable to rely on a third party to maintain and debug an implementation than to take that burden on myself. The fact that Java is Turing complete has no bearing on this decsion. Machine code is Turing complete, as are assembly, C/C++, etc. Should that be justification not to develop higher-level languages that allow us to be ever more expressive? Because arguing that I shouldn’t use a library to accomplish a complex task because I could get the job done without it is pretty silly, unless you’re in a memory-constrained environment or have some other outside limitation discouraging it. If your app has &lt;10 classes, there’s absolutely a judgement call to be made here. As you increase beyond that, the DI approach becomes more and more compelling. Our smaller microservices have 15-20 classes, and I still feel like Spring is the right choice. (Note: I work in an organization with hundreds of developers; I’ve been saying I/me here, but it’s absolutely a group effort. I just went with simpler phrasing.)
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I can wrap Gson in my own class and swap it out for a completely different library and no one calling me to get something parsed would know the difference. When I use Gson, I know exactly what I'm going to get when I give it a String and ask for an bean or vice versa. Dependency injection completely takes over a project and makes everyone deal with it. I would much rather assign one engineer to handle dependency management and make sure he's not burdening the other developers. How much work would it be to switch dependency management systems? Wouldn't it break your entire codebase? That goes against every principle of software development I've ever heard of. *The best design is the one that's easiest to change.*
With the way we use Spring, I think it would be pretty easy to swap out. I’m not familiar enough with other Java dependency injection frameworks to say for sure, but aside from the @Component annotation on each class that needs to be instantiated, most of our Spring-specific code is localized to one class per application. The monolithic legacy apps are a little worse off in that regard, largely because they’ve been using Spring since 1.x, before annotation-based configuration and automatic type-inference-based injection was a thing. But also: how often do you find yourself removing one library and replacing it with an alternative? And, when you do, how often does your wrapper work with the new thing without modification? I used to put a lot more value on that sort of thing than I do now. If the library in question (and your usage of it) is complex enough, then your layer of abstraction almost invariably becomes leaky, and at that point it isn’t really an abstraction anymore — just an extra layer of code. In my experience, that happens pretty much every time. 
With the way we use Spring, I think it would be pretty easy to swap out. I’m not familiar enough with other Java dependency injection frameworks to say for sure, but aside from the @Component annotation on each class that needs to be instantiated, most of our Spring-specific code is localized to one class per application. The monolithic legacy apps are a little worse off in that regard, largely because they’ve been using Spring since 1.x, before annotation-based configuration and automatic type-inference-based injection was a thing. But also: how often do you find yourself removing one library and replacing it with an alternative? And, when you do, how often does your wrapper work with the new thing without modification? I used to put a lot more value on that sort of thing than I do now. If the library in question (and your usage of it) is complex enough, then your layer of abstraction almost invariably becomes leaky, and at that point it isn’t really an abstraction anymore — just an extra layer of code. In my experience, that happens pretty much every time.
It looks like in your [submission](https://www.reddit.com/r/java/comments/art7g6/request_for_help_flava_simple_fluent_layer_for/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; I can't go to production without visualvm Why? What? How? that's insane.
Thanks. This helped me solve my problem. I appreciate it. 
This dude completely misses the fact that companies like Netflix are doubling down on Spring Boot lol. He probably knows better than the engineers clearing 300k and are the best of the best ;)
[consider using plain java ee instead of spring ](https://www.quora.com/Why-should-I-prefer-Java-EE-over-Spring-Boot) 
Shoot you because you decided you wanted to write less of the same old code to get the gold? Why?
Ok there is 1, but the job description sounds horrible tbh. Either way its good to know that there is demand for java fx. 
I will be messaging you on [**2019-02-23 05:43:36 UTC**](http://www.wolframalpha.com/input/?i=2019-02-23 05:43:36 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/java/comments/arjrt8/solid_java/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/java/comments/arjrt8/solid_java/]%0A%0ARemindMe! 5 days ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
With this and Alibaba JDK, somebody (who is an expert in this matter) needs to do a comparsion between Corretto, AlibabaJDK, IBM J9, AdoptOpenJDK and their performance, bug fixes etc.
I see a lot of broken eggs, but no omelette yet.
Everything in this post is wrong. Spring uses reflection, not byte code generation, to accomplish that task. Any modern Java IDE will be able to find references on that without any trouble or need to "dick around with XML files". You're digging yourself into a deeper and deeper hole.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
And because you understand all of that, you don’t have silly expectations regarding the adoption of new JDK releases in complex open source products. That was exactly my point and I’m happy we agree.
It looks like in your [submission](https://www.reddit.com/r/java/comments/arukuj/what_am_i_doing_wrong/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Next time, please ask *programming questions* in /r/javahelp. 
Because you want to have your debugging tools ready in case shit hits the fan.
Javalin is also worth a look. 
Java EE version numbers and Java SE version numbers are not tied to each other. 
amazing ref
Previous company most services were on 11 (few on 8 that were using some legacy shit that was not compatible). Current client is mostly on 8, but is also making a shift towards Kotlin.
Download and install a JDK, get a text editor, code a program, and run it from a command terminal. You will need to learn how to do those things to learn Java.
angular
Thank you and I am a computer science student I am already doing these stuff but I have an exam on Wednesday which will include indicating the output if a given code hence why I requested this to practice.
iview
I may be reading this incorrectly, but are you asking for a method of showing the final output of your code, on run? If so, why not use an IDE like Eclipse, IntelliJ, or Netbeans etc? A good website to do it as well, is [Browxy](http://www.browxy.com/) 
Modules are still optional. For the most part you can just run code on Java 11.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Most of the niceities in post Java 8 are small things, but collectively they make the language much nicer. 
No, Java 11.0.1 was released 2018-10-16. Java 11.0.2 was 2019-01-15.
Just jump on the train when you're ready. 
so you want code that you can trace? ex. public void addOneToOne() { return 1 + 1; } answer is 2
I'm not being sarcastic, but what is wrong with just making a "HelloWorld" class with a main() method to paste code snippets into, try out, and read the results on the command line?
We use gwt, it's great. But I don't think anyone else still does.
Anyone.. Picking one is based on personal preferences rather than backend architecture.
Well, the class Database has 2 responsibility here: open and find... This code could probably be improved. 
Any of the big 3: React, Angular or Vue. Personally I recommend Vue.
Ok, so you mean that back-end architecture does not really matter when you are picking front-end architecture?
It's not Java
Front-end for which platform? Web, Desktop, Mobile, other, cross-plaform?
I think he is looking for programming puzzles, not a way to run code. Something like: "what is the output of the following snippet"
Definitely not a huge and growing field. But there are jobs in finance, military, medical... industries where the need for desktop applications are still present. But no it doesn't compare to web/mobile...
Codegym.cc is helpful for this, have a look at it
It looks like in your [submission](https://www.reddit.com/r/java/comments/arwp1m/make_the_annotation_of_a_field_inherited_from_an/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
.,-+*&lt;[Q]&gt;*+-,.
We serve the legacy apps I mentioned on Weblogic, and rely on the appserver to provide numerous capabilities: database connection pools, JMS queues, etc. — plus JNDI to address those resources from our apps. So I’m quite familiar with EE. As Spring has grown in capability, it has also become more and more modularized. You only import the modules you need, so I don’t worry much about excessive complexity. As I mentioned earlier, our modern apps use Jetty, which is a servlet container, not an application server. That means it can’t provide any of those EE capabilities. After 10+ years of working on the legacy apps and now about four years on the microservices, I strongly prefer the new approach. Our legacy apps use Struts+JSP, and the new apps just serve JSON payloads to a single-page JavaScript/Angular app. I’ve had brief interactions with JSF, Spring MVC, Spring Web Flow, and others, and never found anything I really liked. The Spring frameworks integrate nicely with the overall Spring architecture, but that was about the only aspect I enjoyed. These days, I find that entire class of frameworks outmoded by JSON+REST backing a SPA. We have a Kafka cluster now, and the microservices use that for all messaging. Some of our legacy apps have begun to transition their usages of JMS to Kafka as well. Over time, we’re decreasing our dependence on all aspects of EE. The abstractions are very leaky, and the bits we still use are rampant with Weblogic implementation specific code and config. I look forward to the day we no longer rely on it at all. It holds back the versions of Java we can adopt, hinders configuration-as-code efforts, and costs us ridiculous amounts of money.
you could use Guava Ratelimiter as well
Not really. Just make sure that you have a well defined contract between both ends. Just pick one that makes sense for your business needs and one that has a learning curve that is worth climbing for your team
Hasn't Oracle pulled the plug on JavaFX? 
They have separated it from main distribution :) But the technique described here can be used for others also :)
How does Benchmark compared to Gatling? I've been writing a bunch of Gatling tests recently and have enjoyed it.
It's a [separate artifcat now](https://openjfx.io/) that you can use like any other dependency.
The class has the responsibility to control the database, single responsibilities like connection and searching are already delegated to single low level interfaces
Shoot me because I can't even *compile my Java code* until a third-party framework *scans for beans*, doesn't find what it's looking for, then spits out a generic error message and I have to dick around with *xml* files to get Java to compile
Your first example with the UserSettings, you show a bad example, but someone could also claim his class is just "controlling" the UserSettings. Furthermore, even if the implementation is actually downward, you may still have to put some try/catch. Lastly, you should also add some unit test in there, so at least you see how you would call your classes. 
It doesn't matter what a specific framework uses (I've used like four of them) -- the result is the same: invisible code. *You run Find Usages and global string search and get nothing*. Gee, I guess that means the reference is never set! (wrong). Reflective access is a filthy hack and should be treated as such. If you haven't had to deal with xml files like I have then you got off lucky.
Will be interesting to see the long-term support initiatives for Java 11 play out once Oracle stops supporting it for free.
Did you go with vanilla OpenJDK or some other offering?
RSP is kind subjective, while sometimes is really easy to see when a class has more than 1 context, others its so subtle that it may be worse to break into 2 classes. I would argue to leave as on his current implementation and break it later if it makes sense to do so.
If he can write a reddit post asking if eclipise know java 12 is out, then he could have instead sent a message to eclipse telling them. &amp;#x200B; We're not talking about code here.
&gt;how often do you find yourself removing one library and replacing it with an alternative With first-party libraries or microservices, all the time. Maybe the masses of non-Java config files are gone and IDEs have somehow learned to find the initialization code for every annotated declaration, but I kind of doubt it. And it's such a hack. As soon as you get annotations modifying program behavior (or even just compilation) you've completely left the realm of Java and gotten into some horrible aspect-oriented programming or something
Is there any OpenJDK distribution support javaFX?
If this is the case maybe take a look at "Leet code " 
Eclipse or IntelliJ? 
[ZuluFX](https://www.azul.com/downloads/zulu/zulufx/) does.
The AdoptOpenJDK builds work well, so do Azul's.
&gt; Static analyzer will never be able to detect all the cases of, for example, «null pointer exception» bug in languages without the void safety. A sound static analyser would, but it might also report cases that will never happen at runtime. 
IntelliJ
A really nice alternative is [Siege](https://www.joedog.org/siege-home/).
Yeah, no giant applicationContext.xml files in our microservice apps. They’re still in the legacy apps AFAIK; I haven’t worked on those in a while, but last I knew the teams that own those apps were slowly transitioning things into the new paradigm and chipping away at the mountain of XML. Likewise, there’s no AOP or bytecode generation going on. Seriously, the thing you don’t like is not the thing I’m defending. Give Spring a try again sometime. If you find some feature that does use AOP or BCG, skip it. Some people like that stuff, or use it because they inherited someone else’s codebase. But none of it is core to Spring, and there are cleaner alternatives that Spring presents as the default/preferred behavior. Even without IDE integration, if you stick to constructor injection, it’s easy to wrap your head around what’s happening. 
I would say with Gatling you get more „advanced “ performance tests. For quick and simple tests, Apache Benchmark is easy to use and setup
I'm happy to use annotations like @Post, @Get, @PathParam etc, because they can't bring the project crashing down. I've used ButterKnife, Dagger 1, Dagger 2, Spring, Spring Boot, Lombok and who knows what else. I've hated them all. For the same reason I hate reflective access and automatic source code generation: they're hacks and technical debt. Using hacks to circumvent the limitations of a language is so short-sighted. Every time I see a hacky library made utterly obselete by new APIs in the JDK or Android SDK I get extremely happy. Of course almost no one will bother to untangle the hacks from their project and they will live on for many years.
Also using PIT here!
I completely agree that capabilities like this are better as native language features, but if you’re unwilling to adopt a library that expedites the development process potentially years in advance of comparable features becoming available natively in the language... well, I guess I just don’t agree with your priorities. For example, I used Joda and Guava for ~2 years before Java 8 fixed the native date/time implementation and added the Lambdas and the Streams API. During those two years, my teammates and I wrote better, more readable code, exhibiting fewer bugs and requiring less maintenance than comparable code we would have written without them. Now, we have a mixture of Joda and Java DateTime code, as well as a mixture of Guava and Lambda/Streams code. When the opportunity arises, we usually convert to native. It’s easy. Is that legacy code technical debt? Sure, but it’s the low-interest kind (we incur essentially zero pain due to its presence), and when we “borrowed,” it was unclear when or whether Java would ever gain those features. Are you also the type that recommends people pay cash for a house or a car rather than getting a loan? 
If a home loan costs 6% a year and you can only 4% a year your money, then it would be dumb to take out a loan. By buying the house with someone else's money you're losing 2% a year. Just keep saving and investing until that calculation changes. But if you're yoloing on bitcoin and expect to make 20% a year then a 6% APR loan is totally worth it. And I would never rely on tax perks or anything like that in my calculations. Locked retirement accounts are so dumb. I'll use any library modular and effective, but not anything not modular and more trouble than it's worth. Of course I would wrap the DateTime or unsigned arithmetic library in my own api before letting people call it.
When will Java catch Chrome's number ?
visualvm works with java 11
By looking only at the interest rates, you’re ignoring the value of actually having the house. I feel like you’re making the same mistake with non-language-native dependency injection. 
Javafx is still alive. Check openjfx.io
Confused for a second then lol'd
All of them do.
If they don't have the cash but they desperately need to blow all their money on a house then the question is moot. There is no other option but to take the loan. If you have to have everything now and are willing to pay any price then go for it
My goto for simple load-testing is [vegeta](https://github.com/tsenart/vegeta).
It's a "Java and Kotlin framework," with all the docs and numerous examples written in Java and again in Kotlin. It interoperates perfectly with Java. 
Beware of bugs in the above code; I have only proved it correct, not tried it. — Donald Knuth 
nice :D have you faced any significant problems so far? trying to make PIT intro my company stack
I think unchecked exceptions are great precisely because you don't have to catch them. I loathe checked exceptions.
Sometimes pit messed up with mocking frameworks, also I make sure that tests run on a fork of the jvm running the maven process in isolation.. But in the overall benefits overcome some minor costs 
You know that @Post, etc, are also implemented with reflection, right? Using more or less the same pattern Spring uses. Why are those different? What do you mean, “bring the project down”?
This is a functional way that leverage the type system and avoid the "goto style" exception handling that is usual in imperative programming. It is possible to have both using Try and Either, so you can get the best results. Also, if you like functional composition I suggest you to have a look at Railway Oriented Prpgramming
@Autowired makes a project uncompileable on an almost daily basis. @Post has never done that nor have I heard of it ever doing that. And @Post is actually useful. But I would be thrilled to see it obviated by pure Java
I don’t use @Autowired. Did you even look at my code example?
I would be thrilled to see @Post obviated by pure Java. Maybe the new Spring DI is less cancerous but if you burn someone once you can't expect them to come back. TDD and hipsterism has ruined a lot of software
Regarding @Post, I would like that too, to an extent. One advantage of keeping advanced capabilities third-party is that they move faster. And when there are multiple third parties in the market, competition keeps them at their best. Java is iterating faster these days, but the JSR process is still a big boat that’s slow to turn. BTW, Spring has supported constructor injection for at least a decade. The only part that’s new is annotation-based configuration. What does any of this have to do with TDD or hipsterism? I’m not a huge proponent of TDD, but it has its place. And I don’t think anyone who knows me would call me a hipster, but you seem to be assigning that label to my point of view. 
The people who gush over lambdas and pure functional style and shit on anonymous classes and imperative style for aesthetic reasons are insufferable hipsters. I'm just so sick of the new acronyms and buzzwords same as the old acronyms and buzzwords, the endless third-party framework dick measuring contests. Sick of people pretending that you can't have mock objects without dependency injection or dumb libraries with effeminate names like Mockito that burden the application developers. Development should not be driven by tests. It's just another meme that will die out in five years. All of this stuff is invented by marketing people trying to make a buck selling an ideology. It sucks the creativity out of everything.
That’s a very broad brush you’re painting with. Are you sure you’re not assigning that label (“insufferable hipsters”) too broadly? 
What’s wrong with effeminate names?
I don’t know the origin of the name Mockito, but it seems hispanic to me. And if it is hispanic, then it’s masculine diminutive, as you might address a little boy named John as Johnny. Even if it were somehow effeminate, why is that bad? Our industry more than most needs more women, more femininity, and fewer people who use that word as a derogatory. 
No, it's really just a vocal minority.
Cutesy names just seem so nihilistic. You don't see skyscrapers named after mixed drinks.
Calling a library Mockito is like calling it Juanito. Unless it's done ironically it's banal
PIT = Writing tests that test your tests. It's like regular testing, but it takes exponentially longer to compile.
Not sure if I would return an `Either` for a failed precondition.
&gt;What visualvm has to do with running java 11 in production?! Cheap troubleshooting instrument if you bind JXM port. Zero security configuration if you bind to localhost, later you can forward port via ssh. What do you use on PROD to not be blind in case of troubles? Besides logs...
&gt;Why? What? How? that's insane. Insane is unable to answer WTF with a PROD server when customer asked. In my world we analyze failures and only then reboot ))
In my world we reproduce failures in QA , fix them, and then we redeploy/reboot. You're debugging in production. Live. Jesus.
Isn't Konlin itself a risk as Java 11/12? What does make Java 8 disreputable in your eyes?
Would you mind sharing a bit about your background as a developer? How long have you been at it? What languages have you worked in? What size teams have you been on, and what has your role been? I’m hoping this info might help me empathize with your point of view and maybe help me understand why you have such strong negative feelings about all of this. 
I think you’re the only one that finds it embarrassing. Thanks for shari g your own opinion about the name you chose for your own library. 🙄 
Are you using “nihilistic” to mean “meaningless”? That’s my best guess. And it’s not what it means. So, don’t do anything cutesy unless it’s done ironically? And you’re accusing others of being hipsters? 🤔
I see you abandoned “effeminate” for “cutesy.” Life tip: stop conflating those concepts. 
You might be hanging around the wrong communities. Your apparent distaste for that minority is my first exposure to that minority. 
Who said anything about blowing all their money? It’s quite possible to borrow responsibly, without stretching yourself to your financial limits, in order to avail yourself sooner of a benefit that would otherwise have to wait much longer (or that you might _never_ afford otherwise). 
Still on java 7 :(
Worked at a place whose leadership just followed the crowd. Brought in speakers from all the hottest new tech giants, went full Agile by-the-book, microservices, dependency injection everywhere, githooks, Jenkins, docker, NodeJS, you name it. Some of it worked, some of it was an incessant thorn in the side. Dependency injection and mocking were by far the worst. My anecdotal evidence means nothing but just from a political or philosophical view I don't appreciate breathless marketing hype for things that seem to have no measurable benefit. Where are the statistics? If it improves performance by 10% then I'll have to give it its due no matter how ugly. But where are the numbers?
How big are the apps you’re building without DI? Developer performance is pretty much impossible to measure scientifically, so I don’t think you’re ever going to see those numbers. 
I think it was meant an OpenJDK with JavaFX support built-in. Not everyone uses Maven either.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'm using nihilistic in the postmodern deconstructionist or dadaist sense. If Mockito was made by women, then I guess it makes sense. If it was made and named by men then I guess I question their life choices. I don't know how you think my throwaway adjective would indicate that I'm acting like I'm in the cool in crowd and everyone else is behind the times. Quite the opposite. If anything I'm old fashioned in this case.
Okay, link me a video of a person being masculine and cutesy at the same time.
Your attitude towards women is certainly old fashioned. I don’t know how old you are, but it is WAAAAY past time to change that mindset. 
Weird, because I mostly find it in this subreddit. You must not come here often
I worked for a company that used certs for internal hires, but that was solely because HR needed some kind of ledger for where all the professional development money was going. If I see a new hire listing certs on their resume then I just laugh.
And as soon as you debug, you land in Kotlin code. It's not Java. Docs and examples don't change that.
Kinda new to Reddit as a whole, actually. Very new to this sub. Given the upvotes I’ve been getting, and the downvotes you’ve been getting, I have a suspicion you’ve been misreading the crowd. 
Okay, I should have said 'desperately need to blow their money' not *all* their money.
Buying a house is blowing your money now? Ooookay. 
Aweful. Better create a real result type and return that.
I worked on a monolithic Java server at another place that was maybe 200,000 lines (just a wild guess). One of four full-time engineers working on the backend. No dependency injection that I recall. Just very normal Java EE. Was on Java 6 then moved to 7 I think.
My attitude towards men and women is the same. Both should *be all that they can be* (in the army?) and the most effective way to do that is to appreciate and embrace sex differences
I don’t have a video handy, but imagine a father playing peekaboo with his infant daughter. Cutesy for sure, and what’s more masculine than fatherhood? I think the issue here is that you’re using “masculine” and “feminine” (or “effeminate”) to characterize _behavior_. In general, don’t do that. It’s bad for everyone.
I'm not playing to the crowd. My getting downvoted here is not inconsistent with my assertion that it's very Java hipstery here. One would not expect them to appreciate biting criticism
It *has* been ten years since the mortgage collapse already. Guess people forgot
And yet you think men shouldn’t be cutesy. 
I was saying that my exposure to YOUR viewpoint was new, not theirs. 
I tried some small examples on side projects with mocks and didn't get any problem. 
It takes more than normal UT for sure, but it has some benefits. if even after tuning PIT the build is slow, you can always take other approaches: run scheduled builds for PIT instead of running for every PR
I’ve been looking around for a bit, and I find lots of support for my viewpoint: experience-backed support for practices that improve developer efficiency. I haven’t found anything that adheres to your “viral,” “meme”-like portrayal.
The mortgage collapse was due to subprime lending, mortgage-backed securities, and other predatory and irresponsible bullshit put on by the big banks. It sheds no light on the wisdom of borrowing money to buy a house in general; just on being responsible about selecting your lender and understanding the terms of your loan when you do as a borrower, and on not approving absolutely everyone with no money down as a lender. 
That's a pretty tortured example. Not everything a masculine man does is masculine just by virtue of him being a masculine person. In that moment he is acting cutesy, not masculine, towards masculine ends. Wait, so it's okay to characterize *people* but not *behavior* as masculine/feminine? So it's bad to say cagefighting is either masculine or feminine but it's fine to say the women fighting are masculine because of their profession? I've never heard anyone take this position before. Very weird.
Not unironically in the workplace.
Yeah, that’s pretty much what I’m saying. That attitude is toxic. And if you haven’t heard it before, you haven’t been paying attention. Are there any women on your team of four? You only think it’s tortured because you still think of masculine/feminine in behavioral terms. 
Good luck with that. Especially if something a as benign as a testing library named Mockito sets you off. It’s a good library, BTW. Who cares what it’s called?
Buying a house on credit is inherently risky. I'm a risk-taker but only when I judge the return on investment to be high. Seems to me that buying a house on credit is not the number one best long-term investment. But some people *really* love houses so I won't discount that
How do you just a person? On their looks (e.g. color of their skin) or on their behavior (i.e. the content of their character)
Okay, then name your next feature branch `feature-priest-fucker`
You continue to miss the point that buying a house (for the purpose of living in it) is not purely about ROI. There is value in simply having a house to live in. Unless you’re buying the house with the intention of flipping it or some other pure-investment purpose, then sure, but that’s the minority scenario. Most people buying houses do so with the intent to live in it, because they place inherent value in that. Depending on where you live, the situation changes. If you’re in San Francisco or Manhattan, sure — buying a house rarely makes sense. Here in the midwest, it makes sense for tons of people. I’m not sure what context you’re coming from or what your housing situation is. This whole analogy was to expand on the idea that the use of a library before equivalent functionality is available as a a native language feature constitutes technical debt. My point was that, as with buying a house, taking on that debt also comes with value, and you don’t seem to account for the value. You’re not doing a cost-benefit analysis; you’re just doing a cost analysis. With that approach, you’ll ALWAYS say no (which seems consistent with what you’ve said here), and you’ll never get any of the benefit. 
That’s a nice straw man you’ve got there. 
I try not to judge people. I mostly don’t use the words feminine and masculine; instead I choose something more specific.
You are providing nothing than opinions.. You have the burden to prove your assertions
I see what you're saying, but with some things like applicationContext and the holocaust you have to say Never Again. Pure Java is maximally portable and I know that's valuable, so a bird in the hand is worth two in the bush. You seem very willing to entertain people's non-standard life choices with respect to gender sterotypes but much less willing to entertain the idea that maybe some people are happier and more productive without dependency injection. [Hmmmm?](https://i.ytimg.com/vi/-TyCp5v0jgc/maxresdefault.jpg)
It’s a good branch, BTW. Who cares what it’s called?
So you're basically saying that those words might not make it into the next edition of the newspeak dictionary
You always return an Either, that is the point. A right with the return type or a left everywhere else.
I don’t have a problem with you having your preference. I have a problem with how you characterize people whose choices you disagree with as hipsters, effeminate, etc. I also don’t find your reasoning, as you have described it here, to be particularly logical or well informed. “Non standard life choices with respect to [...] home buying”? Wat?
No. They’re still words. I just don’t find them useful. Two straw men in one night! Shall we go for three? 😜
Datatypes like Try, Either etc are ubiquitous in Functional Programming and should have made their way into Java and other languages a long time ago. Thanks for trying to raise awareness!
You are welcome! Thanks!
I'm a lot more informed on the hipsters on this subreddit since I've been here longer than you. I'm pretty up-to-date on all the latest buzzwords, wouldn't you say? And I don't think you've pointed out any flaws in my logic. I believe I said the name Mockito was effeminate. And hipsters come in two broad categories: sufferable and insufferable. I like to think I'm a sufferable hipster -- you've certainly suffered me this long. I think we're about to make a full circle and that is a very boring prospect
Don't get cutesy. And this whole tangent has been one long exercise in virtue signalling. "I don't eat meat, but you can."
I wish there was ANY hype around javafx, and that it wasn't basically dead. Same feelings I have for NetBeans.
Nah, I’m trying to convince you that you shouldn’t “eat meat,” or in this case, demean behaviors that you view as intrinsically female. Seriously, don’t do that.
Nah mutation testing is great. I find it gives us much better confidence in the tests we write while also not taking developer time writing the tests. Highly recommend it. Plus it warms up your room when you run it a lot!
Well it is the best toolkit for doing desktop apps. Unfortunately, desktop is not sexy anymore. 
Everyone loathes checked exceptions, but are RuntimeExceptions much better? They're hidden, so it becomes impossible to tell what the outcome of any method call can be. With Either, Try and similar datatypes, each method at every layer accurately indicates what it returns, the compiler prevents entire classes of bugs, and you get features like map, filter, flatMap etc for free.
This is a great article, because all too often static analysis is treated with some magic bullet type properties. But I think it is also a little disengenous because static analysis is not the only code quality tool that should be used. Dynamic code analysis, Mutation testing, chaos testing, and static and dynamic vulnerability scanning should all be done at some point in a complete pipeline. I'd out a lot more faith in mutation testing or dynamic code analysis to find actual bugs rather than static analysis. On the other hand setting all of that up requires a mature pipeline and process for quality Gates and PRs.
I didn't demean 'female behaviors'. Now you're just strawmanning. I demeaned the word 'Mockito' and *mock*ed the people who came up with it. You're so sensitive. If this is our constitution in the West, China's going to be hegemon in no time at all. Basically all I said was that Mockito is the gayest name I've ever heard and somehow that opinion is harmful to society. If *that* is harmful to society then society is gayer than I thought
Returning real result types can be useful but Either, Try etc are common abstractions and are not just wrappers- they come with features like map, filter, flatMap etc for free.
Another functional library that has Either. https://github.com/palatable/lambda
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I like JavaFx a lot but for a production desktop app, I'd still prefer Qt to be honest. 
Yeah, QT. If you want your apps to look bad on all the platforms.
not sure if you've used qt recently but for quite a while they're shipping material and universal themes out of the box, and the fusion default theme isn't bad looking either, at least not compared to javafx
I shared this project early last year, but it's since been updated significantly. Please feel free to inquire more about it if you're interested and, if you like the project, feel free to *star* the repository on GitHub. Thanks!
Looks interesting; why haven't you accepted [https://github.com/jhg023/SimpleNet/pull/1](https://github.com/jhg023/SimpleNet/pull/1) yet though?
sounds like vert.x
In most cases you shouldn't pass a checked exception up the call stack. It shouldn't escape the layer above where is thrown. You should catch it in the method/class above the method that throws it and do one of: * Handle it appropriately * Log it and do nothing * Wrap it in a domain specific unchecked exception and rethrow it If you find yourself repeatedly adding exceptions to the throws section of public method signatures because you're calling a method that throws it, you're probably using them incorrectly. The biggest issue with checked exceptions these days is lambdas, which requires you to refactor the lambda body as a method reference to hide the try/catch block.
Now you’re calling things gay as a derogatory, too? Probably just to try to set me off. Pretty transparent. You described the name “Mockito” as effeminate. Then you said that would be okay if it had been named by women, but not if it had been named by men, unless they did so ironically. That is absolutely derogatory. You clearly don’t see it that way, but it is. I’m trying to show you that it is. Trying to explain back to me how it isn’t doesn’t get you out of anything. I’ve enjoyed our debate today, but I’m done now. Enjoy the rest of your day. Maybe we can argue again some other time. 🙂
Annotating your methods with nullable/non-nullable annotations can help the static analysis detect issues. It's much more verbose than having non nullable types, but it's worth it to avoid NPEs.
FWIW, I think the comments on the PR kind of address why it hasn't been merged.
As everyone's been saying - any modern IDE will find references on injected stuff. This is not an issue at all for modern Java development. It sounds like you are using very old tools - maybe step off the curmudgeon pedestal and try something new.
I hope he distributes that GitHub profile with his resume, for the employer's sake.
Good point, I assume you are talking about the fact it isn't updated?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Page is removed by forbes!
I'll have a look, thanks! P.s. VAVR' Try and Either can be transformed into each other
Also works with gradle. 
How would mutation testing find actual bugs in your software? It's introducing errors in your code base to see if your tests can catch them. So if anything is say mutation testing will find problems or "gaps" in your test suite, not your production code.
 Logging inside IcedTea-Web tests (both **unit** and **reproducers**) is handled by ServerAccess' static methods **logNoReprint, logOutputReprint, logErrorReprint and logException** (subject to changes from possible refactoring). Everything logged by these methods is sorted into an XML file shared by all tests which have invoked these methods. The default XML file is **ServerAccess-logs.xml** inside working directory. Other than XML, plaintext files are also kept as **stderr.log, stdout.log** and the combined **all.log**. These files record **id** of **class and method (and browser)** as XML do. When testsuite is launched from commandline Makefile, an HTML file is also generated from the XML. This HTML serves as fully capable navigated log file easily accessible (directly to test method) from test results. When using this file online, be patient as it may be several megabytes in size. &amp;#x200B;
Maybe because the PR is a troll? In fact, PRs that try to reformat an entire repo, unless to bring consistency to the maintainer's own style guide, should pretty much always get rejected.
I meant Ant which is the default build system for Netbeans projects.
Why would that be merged? The formatting is atrocious and goes completely against the current (fairly standard) project formatting. For anyone interested, here's an example of the formatting: https://github.com/RubbaBoy/SimpleNet/blob/master/src/main/java/simplenet/Client.java
Making functional programming in Java so prominent was such a big mistake. Seriously, what is this?
Qt Quick, if you want your programs to look like mobile apps on all the platforms.
&gt; Isn't Konlin itself a risk as Java 11/12? Why would Kotlin be a risk? I'm happy to answer questions I just don't get what you're asking. &gt; What does make Java 8 disreputable in your eyes? I didn't say anything about Java 8 being 'disreputable'? Java 8 has issues when running in containers, that's the primary reason to move to later versions.
I'm glad everyone rushed into mobile and web.
Why not? Why you won't add value to something already valuable? Troll comment?
You can kill all the JavaFX contributors today, and it would still be usable for the next 10 years. GUI toolkits don't need to evolve rapidly if they're done well in the first place.
Are you referring to the good, Qt Widgets, or the bad, Qt Quick? Qt Widgets is great, IMHO. I just suck at C++.
I don't get the affection everybody is having for exceptions.. They are a glorified goto statement, they are heavy to build (stack trace) and they are generally wrong handled.. 
This is exactly the meaning of my articles! 👏
Yes! Unfortunately this kind of added value is unknown to most java developers
Almas, what you do is truly great. Thank you for contributing such a nice project to the community. More people should know about this.
Because it's literally a variation of Optional only more complicated and idiotic. Why have Left and Right when you can just do the exact same thing as Optional but also provide a reasoning field with proper getters/setters. It's trying to make something complicated and fancy for something that isn't.
/r/lostredditors
Not all gotos are bad. In fact all control structures in languages are glorified gotos. They're heavy, but they're to be used in exceptional circumstances. If things have gone wrong, you're already off the hot path. And if you're not handling them well that's kinda on you; every feature can be misused.
[Episode 2](https://www.marcobehler.com/episodes/183-professional-java-programmer-tips-tricks-episode-002) is out, let me know what you think of the grin ;)
More like /r/spammitors
The thing that bothers me the most is the way in which you'd pass the Either object past multiple calls if you'd want to handle the problem higher up the hierarchy. Also the instanceOfs are not so nice looking :-\
You also can download the dependencies and put them into a folder to use them with Ant.
Probably you first have to study some FP before defining something you don't understand "complicated and idiotic"
&gt; every feature can be misused You have wise words!
Obviously instanceOf is an example, you can use whatever matching you like or other methods that are available (folding, get or else etc)
Why to use it instead of Netty?
Please, note the [comment](https://blog.tlinkowski.pl/2019/accumulative-custom-java-collectors-made-easy/#comment-24) where I assembled the feedback up to now. &gt; Following the [Twitter discussion](https://twitter.com/t_linkowski/status/1096836690478596101), I assembled the summary below. &gt; &gt; --- &gt; &gt; 1-arg `Collector.of`: &gt; &gt; * is *syntax sugar* for **some** 4-arg `Collector.of` calls (but **not all**) &gt; * takes 3 params less at the cost of introducing an extra interface (`Accumulative`) &gt; * moves complexity to `Accumulative` implementation &gt; &gt; --- &gt; &gt; `Accumulative` interface: &gt; &gt; * is a *supplement* to `Collector` (**not** a *replacement* for it) &gt; * is a bound for `A` in `Collector&lt;T, A, R&gt;` &gt; * should only be implemented by **dedicated private** classes (otherwise use 4-arg `Collector.of`) &gt; * provides implementation structure for **free** (through IDE code generation) &gt; * is meant for *end-users* of JDK (**not** for JDK internals) &gt; * is **not** composable (like `Collectors.filtering/mapping/teeing`) &gt; &gt; --- &gt; &gt; **Key concerns**: &gt; &gt; 1. Are custom `Collector`s popular enough to justify this addition? (by [Richard Warburton](https://twitter.com/RichardWarburto/status/1097423691019939840)) &gt; 2. Wouldn’t it draw people too much from a high-level abstraction (FP-like `Collector` composition) to a low-level one (OOP-like `Accumulative` implementation)?
I'm aware. Having them in the JDK itself is much easier though.
[https://youtu.be/8GWZE2Y2O9E](https://youtu.be/8GWZE2Y2O9E) 
I was joking lmao, I made that PR
Your comment had to be on top, instead of the dumb references to the terrible Spring documentation, written most often without a context or specific purpose. It is great for indian developers, but if you're a thinking person it is an absolute crap.
Wow, there is a real developer with some meaningful comment.
&gt;JavaBrain's tutorial series for a quick start to Spring Boot That is a bad advice. Docs lack context and good theoretical structure.
I don't agree. 5 years of exp. is quite enough for a single skill. It's better to spread out more and have more skills in your resume. Flexibility is a good thing in today's world.
Interesting, but I don't think something like this belongs in the JDK. This looks like something that belongs in a library like Guava.
I was expecting this question! I've designed this *framework* to be more simple to use than Netty (in my opinion) but, as a result, it obviously has fewer features. Nevertheless, I believe that SimpleNet will suffice for many projects (chat servers, multiplayer game servers, etc.)
It looks like in your [submission](https://www.reddit.com/r/java/comments/asa44d/the_problem_with_java_8_streams/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Well, the main reason would be this Eldritch Abomination: ``` Either&lt;Error, Alcoholic&gt; alcoholicEither = //... Match(alcoholicEither).of( Case($Right($()), c -&gt; "drinked " + c), Case($Left($(instanceOf(UnderageError.class))), t -&gt; "troubles"), Case($Left($(instanceOf(ImpossibleError.class))), t -&gt; "wizard") ); ```
Thanks for your comment :) Well, it could be in a library (it's just an interface + a static method). However, most developers (especially those I had in mind: inexperienced with `Collector`s) wouldn't find out about it. And I hoped for the following scenario: 1. An inexperienced developer needs a custom `Collector`. 2. They check out the `Collector` interface (maybe for the first time). 3. They notice this 1-arg `Collector.of` method, which they can easily use by implementing `Accumulative`.
What for some is garbage for someone else is beauty... For me is far more readable and safe than a series of if else switch etc because this leverage the type system and is practically natural language. Also: http://openjdk.java.net/jeps/305 http://openjdk.java.net/jeps/325
What about Apache NetBeans?
Don't know. maybe if there'll be enough requests for it.
These JEPs are completely different - code snippets there use language constructs (once they are released). The pasted snippet uses fairly complex API of an external library. Yes, I understand what it means. No, I cannot tell if it's correct without diving into the documentation. For this reason it is not simpler than a sequence of ifs. I would much prefer to see something like this: if(alcoholicEither.valid()) { return "drinking " + c; } else if(alcoholicEither.isUnderage()) { return "troubles"; } else { return "wizard"; } I consider this to have the Hoare property and the previous one - not.
Is my math totally rusty or should it be `$(( $(cat /sys/fs/cgroup/memory/memory.limit_in_bytes) * 70 / 100 ))` instead of `* 100 / 70` at the end where it is described how to set the memory to 70% of cgroups limit? 
I tried Codota on IntelliJ and it never gave me a single suggestion. They did momentarily totally break code completion (to their credit they fixed it within a day), so after that I just deleted it since wasn't doing anything and it was breaking core IDE functionality.
anyone cares to give out his opinion? used it some time ago (more than a year) but wasn't that interesting. getting mails from time to time from codota and just waiting to dive in again as I think the potential is huge.
most of the time, yup
 I’m not familiar with JavaBrains nor the quality of their services. I can’t agree or deny that the services are better than the online document that have been provided on the Spring.io site. The docs can be used as a starting point, if OP feels the docs are lacking then they can continue with their search for better resources or mentors. What I provided is not bad advice, it’s a recommendation and OP can choose to use it. 
a lot has changed in that time
I guess I was not clear enough. I would like some opinion about the state of codota now. How others feel using it.
No, it will never detect \*all\* cases of NPEs. Only a few very obvious ones are detectable. But all programs are affected by side effects, and run code depending on what comes in from the outside world. Just things like how many iterations a loop will run won't always be possible to detect in the static analysis step.
It really depends IMO. If you're an advanced user then you'll probably find it annoying at first. it takes and you'll probably need time to get used to it or uninstall because it annoys you. if you're a beginner then it could just be the best thing to happen to you all year but in any case you need to really write java on a daily basis for you to really like it.
&gt; Validable This isn't a real word, that makes it a horrible name. 
don't get me wrong but I get ad vibes of your post, which is okay, tho, I understand it, and would do the same. But your opinion is, with that assumption of mine.. well.. opinionated. But thanks for your answer!
Np. I'll let other users answer instead :)
I agree, but javafx is only half way complete. There's so much functionality that should be built in, and that it's impossible to add later on without forking it and adding it yourself. Lack of selection support with TextFlow and Text (just in general, doing rich text in java without webkit is hell, and in that case I might as well use electron), lack of extensibility for the media framework. The Image API is awfully broken (the types don't make any sense). You can get a GraphicsContext for a canvas, but not for a WritableImage, no straight forward way to get the dimensions of text, you have to resort to "hacks". The 3d pipeline is cute but only a toy. I still use NetBeans to this day precisely for the reason you said, it works, despite being dead, but for javafx it's not the same, since it's only halfway there.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; You are providing nothing than opinions So is the use of Either or Try
They are not common in the JDK. Exceptions are common. They also provide the complete stacktrace. Invaluable to debugging. Much more important than map or filter etc.
Yeah, it sounds like it's slightly derogatory towards men who don't behave as such. Why would I take issue with women being feminine?
I thought it doesn't need explanations. "left" and "right" are generic names without any meaning. They are interchangable and misleading. Generic wrapping are nestings and make the return type complicated. It also binds the return type to the error type. Two things that shouldn't be bound together. I hopefully don't need to explain why instanceof and casts are bad.
No, I'm using Java 13 and the beta version of IntelliJ Ultimate with switch expressions and I write Pure Java instead of clowning around with laughable annotation processing.
Yeah except the idea was to remove it so it can be updated more often. 
On opinions, here you are: https://en.wikipedia.org/wiki/Monad_(functional_programming) https://medium.com/@naveenkumarmuguda/railway-oriented-programming-a-powerful-functional-programming-pattern-ab454e467f31 On left and right: it's a matter of conventions, `T method(...) throws E` or `Either&lt;T, E&gt; method(...)`
You're missing the exact thing I'm saying: there is a class of static analysers which are _sound_. Sound static analysers report _all_ the cases where an NPE could happen, not where one necessarily happens, and that's the difference from an unsound static analyser. Sound static analysis exists for the exact reason that when the analyser doesn't report an NPE at a specific location, it has (mathematically) proven that an NPE can never happen there. If something comes from the outside world and that may cause an NPE, such analyser will report it as a possibility. The whole point is that it will never miss possible bugs. It's just that most static analysers are not necessarily sound and thus don't give any guarantees.
&gt; it's a matter of conventions, T method(...) throws E or Either&lt;T, E&gt; method(...) It could also be `Either&lt;E, T&gt; method(...)`. `E` doesn't even need to be an error. It could be anything. left and right doesn't tell you anything about it. You need to look it up. Everyone in the team needs to follow the convention.
Agreed, no need to be an error, can be a "message" or whatever your abstraction want to be. We have used ROP and Either in a enterprise grade project and it works like a charm! It's perfectly testable and readable! Also is low coupled and high in cohesion.
&gt; Oracle OpenJDK 11.0.2, also released last month is the last update for JDK 11. To continue to get the latest updates, users will need to update their entire JDK every six months. Why does upgrading 11.0.2 -&gt; 12 means updating the "entire JDK" while upgrading 11.0.1 -&gt; 11.0.2 does not? It is certainly a different kind of change but 1. both mean upgrading the "entire JDK", and 2. neither is a major release upgrade (like 7-&gt;8 or 8-&gt;9, because, as of JDK 10, there are no more major releases). The question comes down to how harder it is to upgrade 11.0.2 -&gt; 12 than to upgrade 11.0.1 -&gt; 11.0.2, and how harder it is to upgrade 11-&gt;12-&gt;13-&gt;...-&gt;17 than 11-&gt;17. I think no one knows the answer to these two questions with any actionable certainty, but luckily, no one needs to decide now. People can try upgrading to 12, 13 etc., and if it turns out to be inconvenient, revert to a version with LTS support.
A very similar construct to [Go lang's error handling](https://blog.golang.org/error-handling-and-go). As far as I understood they are going to introduce something similar to checked exceptions in Go 2.
But that makes it too simple and our powerful brains aren't being utilized. We only want to hire rockstar developers on our teams so we write code that only a few people can understand to keep the level of engineers higher. Who would ever want junior engineers to actually be able to understand the application logic and workflows without learning the same pain and misery we had to ourselves?
Sorry but the LSP example is bad one. In the example the *good* code implements the **Set** interface and takes a **set** object in the constructor. The **Set** interface has upwards of 20 methods which must be defined in the **DataHashSet** class or it is not a usable class.
Generally where I've worked we use tools like AppDynamics for that purpose.
does anyone here use eclipse as their main IDE for java? care to comment on their experience and why they use it over something like IntelliJ?
So when is Mysql driver due?
There is community development happening in [this repo](https://github.com/mirromutth/r2dbc-mysql). I guess any kind of support is appreciated by the maintainers.
I use it and love it. It's fast and powerful and the built-in compiler keeps everything instantly up to date. I also love being able to keep all of the projects in my java universe active and open at the same time. It makes working with and moving between multiple projects effortless.
Hehe sorry, I feel its pretty much the same :D https://imgur.com/a/Bo4GPUq Still, good informative topic, although I think that was more an intellij tip rather than a java tip? I would be interested in how to best debug when something within spring goes wrong as I usually find myself with little knowledge to where in all the nested classes and abstract flows the actual point of error is. Keep it up :). I will post it to this sub since it has been rather popular and I think you cant post it due to self promotion stuff, hope you dont mind!
Hey, since his previous post was rather popular here I figured I post episode two of his tips and tricks for java for /u/marbehl so more people can see it :) [Link to Episode 1](https://www.reddit.com/r/java/comments/arbxon/professional_java_programmer_tips_tricks_episode/)
It's completely open source. It's developed by the community, and not a single corporate entity.
Use it with redhat plug-ins, for java ee development is far better than the others
This. My company uses a micro-service architecture with over 100 projects that I need to navigate. I tried to use IntelliJ, but it requires each project to open in a separate window. That's a dealbreaker. 
I do not know the answer, but I would recommend also having a look at codegym.cc (it is free) as well as Tim Buchalka's Java masterclass on udemy (it is not free but very cheap) if you are new to Java. Each one of these resources is excellent.
In my opinion, it strikes a good balance between assisting and getting the hell out of the way without becoming a crutch. I've tried IntelliJ as I'm sure most people have by now, the Jetbrains group think is strong in the Java world, I just can't seem to gel with it. Also I can read the code if the need arises, it barely does, that helps. 
I use Eclipse and IntelliJ alike (a little less IntelliJ, so maybe just not entirely used to IntelliJ here). Some things that Eclipse does better imo: * HotReload and things like dropping frames, while debugging * Evaluating expressions on the fly and copying values (variable values, JavaDoc, ...) * Custom positioning of views and perspectives * Navigation in the editor and menus with the keyboard alone * Class lookup, navigation, structure, usage, implementations, ... * Otb Bracket matching and selections, even in Strings * Save actions (needs a plugin in IntelliJ) Ofc. there are many things that IntelliJ does better
You can create an empty project, where you can add all those 100 projects, as modules. You have all the code in the same window, navigation, usages, refactoring all together.
I use it for home projects due to the fact that it is free. With that said, it is a great IDE and I have yet to run into major issues with it. My biggest gripe about current stable builds is that dark mode makes the menus hard to read and also causes Spring Boot to hang. No issues with Light though, so I use that and have been very happy.
Thanks! Sometimes I waste time when ide doesn't suggest me some import. I blame gradle that it doesn't refresh dependencies but I add some packages in exclusions in the past. The advice from video can lead to the same when you will debug later. If you sure that execution will reach some line of code it could be better to use force step to the line. 
I use it because it because of the Red Hat plugins and that it feels much more native in Linux.
I use Eclipse as my main IDE and like it, especially the WildFly and Payara plug-ins.
 Thanks! codegym seems awesome!
If we had something like generic this arguments the interface would be way cleaner: public interface Accumulative&lt;T, R&gt; { void accumulate(T t); // target for Collector.accumulator() A combine&lt;A&gt;(A this, A other); // target for Collector.combiner() R finish(); // target for Collector.finisher() }
I've attempted to use IntelliJ on several occasions, and I tried that as well. It just doesn't work as well as Eclipse. It really wants to work on one project at a time, probably because that's exactly what it was designed to do, while the workspace concept is central to Eclipse.
The mouseover info, the intellitype when I hit dot on a method saying where each method comes from, and the package manager that is infinitely superior. Also I don't want a program that dark as an IDE. Eclipse Workspaces and incremental autobuilding vs gimped just awful concurrent multiproject support . I have 8-10 projects open at once. Uh the docking behaves oddly Eclipse seems to have way more free form docking which is better for multimonitor. Intellij more behaves like VS which I absolutely hate. I would never use most of the extra features IDEA has the only major thing I use in Eclipse is templating. Lastly I learned on Eclipse and IDEA offers nothing that'd make me switched. Using it makes me feel like an arm is missing. Ultimately I don't like the workflow of intellij products. 
What’s the difference between: Either&lt;CustomErrorType, ResultType&gt; method(); and: ResultType method() throws CustomErrorType; ??? IT becomes more and more fashion oriented. Now it is “functional programming”. There are people like Ron Pressler that question the value of FP. See for example this: https://m.youtube.com/watch?v=449j7oKQVkc.
Can't you store any rational number, *in principle*, if you have enough memory. If you simply added enough memory, and that amount would be some finite amount of memory for any given rational. Even if by 'enough memory' I mean more than the current address space, more than the current global manufacturing output, etc but yet finite and addressable with some absurdly wide machine word size (eg pointer size). However an irrational would require an infinite amount of memory, of which you cannot add. Not to mention an infinitely wide machine word size for the pointer.
TLDR : "Performance is thankfully not an issue. Java is great at making things faster if we follow common coding practices. Often without changing a line of code, we can see a 10-15% performance increase by moving to a new Java version."
I don't have money T\_T
Just use `@Nullable` and assume non-nullable. You'll end up with very little noise.
TL;DR: there is probably some impact, but I don’t have numbers since I’m experienced. P.S. We want $525 for Java design patterns course.
RemindMe! 10 hours
I will be messaging you on [**2019-02-20 07:17:57 UTC**](http://www.wolframalpha.com/input/?i=2019-02-20 07:17:57 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/java/comments/arbxon/professional_java_programmer_tips_tricks_episode/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/java/comments/arbxon/professional_java_programmer_tips_tricks_episode/]%0A%0ARemindMe! 10 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
You should use whatever makes you more productive, including low-to-none tech debit, high testability and maintainability. I think FP can help to achieve that, but if you don't get it you are not forced to use it (nor it's advisable)
Just FYI: Maven will be the new default build system in the upcoming Netbeans 11: https://blogs.apache.org/netbeans/entry/restructuring-of-project-templates-in
If that’s true then you should learn what your tools are capable of before spouting off misinformation.
Intellj is free. 
But the PC you need to have it run smoothly is expensive.
Me too. Every time I try IntelliJ I give up. I don't see why I should make the effort to switch- I rarely see people explaining *specific* things that it does better. When I discovered Eclipse, I think I was using JBuilder. I switched in like 10 minutes. ... Nowadays, $WORK is Python, and I even use PyDev even it's nothing in comparison to JDT (to be fair, I don't think you can have a Python IDE that comes near JDT or any good Java IDE), but I know the shortcuts and I'm comfortable with it- although I do maybe 20-30% of my Python editing from JOE. 
Free version doesn't satisfy my needs.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I don't understand when this would be useful. What's a good use case for having asynchronous access to the DB?
Rather than needing 1000 threads to handle 1000 concurrently operating queries/transactions with each of those threads wasting computing time doing absolutely nothing you have 1 or a few threads managing everything, distributing the results when they are done. All the threads in the system equally busy doing other tasks as they "wait" for the results. This is only useful if you have an application that can actually utilize it. But with a reactive system you can accomplish far more with significantly less resources.
Oh, that's interesting. Would be nice if they provided a way to convert old Ant projects to Gradle or Maven.
Just a few * Exceptions are expensive. * Either is just another type, and doesn't rely on language features. * Either is abstract and gives you features like map, filter, flatMap for free. I agree a lot of the fashions in the programming world can be annoying, but I don't think Functional Programming is a pointless fad. These constructs are ubiquitous and have been around for a long time.
Sorry, but I'm not going to waste my life checking the status of every tool every release to see if one of them has been updated to slightly unfuck cancerous annotation-based code style that I'm not going to use anyway because it's a hack by definition
I had to look up what vert.x is, and it does look similar! SimpleNet only works with TCP at the moment (I delegate any HTTP requests to Java's `HttpClient`), but that's cool project as well.
The intro movie of codota shows how it works in the first 10 seconds by showing how it 'helpfully' suggests Class.forName("com.mysql.jdbc.Driver"). What an own goal. If the codota team is in here, good golly. Showing the usefulness of your tool by starting out with an anti-pattern that hasn't been needed for 10+ years, whilst showing the problems with going with majority-rule (mysql is not a great DB choice and not particularly popular with pros. It is however popular with the masses)? In 10 seconds you eloquently show why codota is a bad idea. 
You can treat IntelliJ Projects like Eclipse Workspaces where an IntelliJ Module represents the Eclipse Project - the terms can be misleading. It takes a while to get used to and you have to look up how to properly create/register modules in IntelliJ. I've switched from Eclipse to IntelliJ a couple of years ago and handle projects with multiple microservices in one windows with ease - not going back to Eclipse, personally, but still like that Eclipse progresses well.
I'd rather use a type safe completion than some "AI" with unpredictable output.
Nah you’re just going to waste your life trolling programming subreddits instead
One day they'll pay me
You can store a useful subset of algebraic irrational numbers, there are libraries for that (I don't know if there's one for Java though). They have a weakness that the equality is no longer total (testing sin(π)==1 would take forever), but they let you have arbitrary precision of the final result.
&gt; an anti-pattern that hasn't been needed for 10+ years huh?
Some things don't work as expected. E.g. test resources with the same path in multiple projects (modules in intelliJ) will get mixed up when running unit tests from the IDE. E.g. Module A has tests that load a file from `/src/test/resurces/input.txt` and Module B has tests that load a file from it's own `/src/test/resurces/input.txt` IntelliJ may pick up the wrong one and your unit tests will fail. Interestingly, it may use the wrong file if you run the test method but not if you run an entire test class. That and not handling with errors efficiently is a pain. If one of the projects is refactored externally (say that packages were modified to enable modularization), you will have to open EVERY single file of the dependent projects and update their imports using ALT+ENTER (auto-import works after you open the file, and it doesn't always work either). Once you get rid of a set of errors, intelliJ will give you more errors. So you have this looong cycle of fixing stuff, building, getting more errors, and so on. With eclipse a single "organize imports" in all projects will take care of it.
Yes, but I do programming as a hobby. I tried programming Java on my own in middle school, but it didn't work out. When I first encountered Eclipse pre-college, learning it was too big a bite to chew for high school me and I ended up learning more Java using the Processing IDE. I was re-introduced to Eclipse in college for use with Python via PyDev. And, while it was infinitely preferable to IDLE, after those classes I stuck to using it with Java. And after Eclipse I wouldn't have bothered with inferior tools like BlueJ or DrJava. They have their own merits but don't hold a candle. Most of the time Eclipse suits me just fine and the interface is good enough and fast enough. It does &gt;80-90% of what I want out of an IDE. Ant does the job for simple task automation. I tried to work out Maven a few times but I can't decide if it's actually a confusing pile of junk or Eclipse is just complicating the matter somehow I have tried using it with git, but these days I only use the git integration for dealing with adding new files and ignoring stuff. I do any commits, pushes, or pulls via the command line. Less of a mess that way and I know it worked right. I have noticed that occasionally it stumbles over auto-complete and seems to get confused when you try to abort an undesired attempt at autocomplete. And changing certain preferences especially related to UI themes cab require restarting the IDE to fix some kind of instability. I've heard a lot of people like IntelliJ and I'm sure it's perfectly suitable, but I tried PyCharm and while it was fine the aesthetics, workflow, and general interface just weren't my cup of tea. As is Eclipse is the tool I know best and I rarely have issues. Maybe in a daily work environment the foibles I am aware of would push me elsewhere, but it's good enough and using a different one would be starting over on a new steep learning curve.
I've been using IntelliJ for a few months. I still miss Eclipse on some days. Eclipse shows all warnings and all errors all the time, it is very proactive by default in analyzing your code. Also it has more Java refactoring options than IntelliJ, like turning an inner class into a first tier class, if IntelliJ can do that I couldnt find it. Of course it also looks like crap on Linux and the marketplace sucks, which is why I've stuck with IDEA... for now.
Well, the author doesn't implement clean architecture, so I can't blame Clean Architecture. The Use Case should look something like the below. Notice that the Use Case doesn't leak any detail about the implementation of the use case. It asks for what's necessary. It invokes the Presenter with the result. Also notice that the implementation of the use case needs to trap exceptions. An exception can change what the presenter does. Finally, notice the lack of a return value for anything. The Use Case partners with the presenter to control flow. &amp;#x200B; In Java, this is a bit odd. Spring MVC and JEE both return values from handlers. CA doesn't want that. Rather CA wants to flow through the Use Case into the presenter. So I personally extends all my implementations from a class that stores the result of the execute and makes it available later. &amp;#x200B; &amp;#x200B; public interface CreateAccount { public class NewAccountInput { private String firstName; // rest of the DTO level information necessary to create an account, like maybe an address. } public class CreationResult { private UUID id; // DTO level fields that might mirror the input. } void execute(NewAccountInput, Presenter&lt;CreationResult&gt;) } public interface Presenter&lt;T&gt; { void Present(UseCaseResult&lt;T&gt;) } public class UseCaseResult&lt;T&gt; { private T answer; private List&lt;ValidationError&gt; validationErrors; private Exception ex; public boolean success() { return (validationErrors == null || validationErrors.isEmpty()) &amp;&amp; ex == null; } } 
Not trying to sound like a condescending prick or anything, but appears the tl;dr of this article is "continuous integration but with profiling included too"?
Their documentations are not that long, showcases different scenarios, introduces to concepts like mocks, spies etc. My advice is to start from there.
I started with this tutorial :) [Spring Boot, H2, ext API, tests for all levels and some test theory](https://martinfowler.com/articles/practical-test-pyramid.html) 
Would this be similar to what MapStruct does?
[Testing Spring Boot by John Thompson](https://www.udemy.com/testing-spring-boot-beginner-to-guru/) is my favorite, quick acurate and thorough. But they’re not especially hard, so the official docs and trying on your own is kinda easy.
 Either&lt;Error, Result&gt; foo () is arguably simpler than Result foo () { ...actually throws exceptions without declaring them or forcing the caller to handle them } or Optional&lt;Result&gt; foo () { ...actually throws exceptions without declaring them or forcing the caller to handle them } It's not about making things complicated and fancy. Option, Either, Try etc datatypes have been around for a long time, are ubiquitous in many languages, and were invented to make things simpler, not harder. Just because Java hasn't historically adopted them doesn't mean they're not a great idea and they will be increasingly adopted in Java as well.
I second that. Recently started a smaller project at work and just started using it. Search for examples, try stuff and see your tests run. Best way to learn in my opinion. You have to read a lot though, especially when you get stuck somewhere ;)
&gt; common I didn't mean common as in frequently used, I mean they common as in constitute common abstractions, enabling them to be used generically to wrap anything rather than having to create specific wrapping "real result types" over and over again that really just do the same thing. Exceptions, nulls, setters etc are all common as in frequently used in Java, and none of them are great as far as I'm concerned.
Interesting observation! BTW. I recently had a [discussion about a similar concept](https://twitter.com/t_linkowski/status/1092754548635127809) with Sergei Egorov &amp; Brian Goetz :) Your proposed syntax is more powerful, though (my proposal only lets one return `this`). Still, instead of using generics and an [explicit receiver type](https://blog.joda.org/2015/12/explicit-receiver-parameters.html), I'd probably prefer sth along: public interface Accumulative&lt;T, R&gt; { void accumulate(T t); // target for Collector.accumulator() self-class combine(self-class other); // target for Collector.combiner() R finish(); // target for Collector.finisher() } It'd be similar to [Manifold's `@Self` annotation](http://manifold.systems/docs.html#the-self-type). But implementing this at the JVM level would probably be very hard.
Check out javabrains.io He just put up JUnit 5 videos. And it's free. I learned JAX-RX there and it's by far the best resource I've found.
Practical Unit Testing - very good intro book
Yes the usual way of writing fast code is to write idiomatic Java, because the JIT optimises common code patterns. Trying to prematurely optimise Java is going to penalise you more than in other lower level languages. 
&gt; They are a glorified goto statement So are if-statements, loops and switches. An exception is a return value that automatically walks up the stack for you. For it's intended purpose, stuff going wrong, it generally works well. Exceptions can only travel up the stack and can't do random jumps, so calling it a 'glorified goto' is kinda insincere. 
And you should study some basic communication skills if you want to educate people on something.
I use it because it works well for me and nobody can give me an actual, real reason to move to IDEA. Even if i wanted, i develop Eclipse plugins, so i sort of locked into tooling, but that's not the main reason i use Eclipse.
Check out this article first [Martin Fowler - The Practical Test Pyramid](https://martinfowler.com/articles/practical-test-pyramid.html). As it says in intro: &gt; *This article revisits the original concept of the Test Pyramid and shows how you can put this into practice. It shows which kinds of tests you should be looking for in the different levels of the pyramid and gives practical examples on how these can be implemented.* &amp;#x200B;
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yes and no. Sfm specialised on mapping to and from flat structure csv, result set, record. It does not generate code at compile time. Also I don’t believe mapstruct can do the one to many mapping to a recordN projection due to the fact it map record not resultset. Also Sfm can do inheritance via discriminator. It is pluggable as mapper in jooq or can be used directly on the resultset, for one to many mapping.
Just a small heads up: Don't rely on Mockito too much. If you can't think of a somewhat convenient way to test your code without Mockito, your code isn't designed for testability which is pretty much the biggest code smell there is. Mockito is a great tool, but as I said, intensive usage of it is, at least in my experience, a code smell. 
This!
Hi, &amp;#x200B; I recommend this one: [https://www.yegor256.com/rss.xml](https://www.yegor256.com/rss.xml) . Yegor is quite extremist when it comes to OOP, but if you manage to get past the shock and maybe anger, some ideas are really good. He also wrote 2 books on OOP. &amp;#x200B; I also write my own blog technical blog (on OOP and other topics), if you're curious: [https://www.amihaiemil.com/feed.xml](https://www.amihaiemil.com/feed.xml) . See [https://www.amihaiemil.com/aboutme/about.html](https://www.amihaiemil.com/aboutme/about.html), for the most interesting to read. I try to write an article one a month. &amp;#x200B; Cheers, Mihai
1. In what sense exceptions are expensive? If not thrown they don’t cost anything. Whereas you always pay the price of wrapping your result in Either. It is even worse in case of primitive result types since you have to pay the price of boxing/unboxing. 2. From the point of view of application programmer it does not matter if a certain feature is built into the language or it is a library. 3. Abstractness of Either is its drawback as it does not carry any semantic information. 4. I would question ubiquitousness of these concepts. They are ubiquitous in FP community. But FP is a pretty small niche. As Ron Pressler points out: Haskell is around for 30 years and it’s still not being widely used. On the other hand most real world software is written in imperative languages and using imperative paradigms. Maybe FP is not so useful after all...
It's hard because @Self is arguably too strong. Suppose a class hierarchy `C extends B extends A implement Accumulative`. If only A and B implement the combine operation, then I won't be able to call the method on an object of type C with @Self. The troubles don't stop there because how am I ever going to get a guarantee that any object has the correct type? Static type deduction isn't going to help here. Suppose I have an `object` that I know is `B` but is secretly `C` - the correct static type would thus be `? extends B`. Then the interface says "you have to call this with a `? extends B`" but ? is unknown to me. Surely you could do something like `object.getClass().cast(..)` or call another function that establishes that the returned value actually is of the type `?` but that isn't ergonomic at all!
It looks like in your [submission](https://www.reddit.com/r/java/comments/asm4jq/q_conventions_regarding_custom_exceptions/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/asm7h3/q_conventions_regarding_custom_exceptions/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Check out: https://blog.codefx.org Not sure where RSS feed is. Nicolai Parlog wrote a book on Java modules and does some YouTube videos on various topics. This post should have more upvotes... Love to see more.
Hmm, just browsing the site, but couldn't find any JUnit info. Am I missing something?
\&gt; Yegor is quite extremist when it comes to OOP Not just OOP.... [https://twitter.com/delawen/status/880517810400759808](https://twitter.com/delawen/status/880517810400759808)
As to only `A` and `B` implementing `combine`, it would have to be illegal (in other words, every subclass would have to reimplement such a method). &amp;#x200B; However, there's a far greater problem that I didn't spot initially - `self-class` as a parameter type would effectively introduce *parameter type covariance* (= a really bad thing). For example, having: A a = new B(); 1. If `self-class` were inferred as you suggest (`? extends A`), there would be no way to pass a valid argument to `combine`. 2. If `self-class` were inferred without a wildcard (`A`), then `a.combine(new A())` would be legal at compile time but would fail at runtime.
Similar situation but with psedio-monolithic webservice. We have many projects, and we need edit nearly all of them.
I tried the big 3, Angular, React and Vue. Vue is my choice with a spring backend because it’s light and clean, the syntax is very pleasent.
I don't mean to hold his defense, I don't particularly agree with his point of view on the subject either. &amp;#x200B; But, on the other hand, nobody seems to notice that his company is the only one in the world where there are no interviews, meetings, skype chats, video calls, emails etc. See [zerocracy.com](https://zerocracy.com). All you need is a Github (+ StackOverflow) active profile, which might as well be anonymous. Once you are aboard you are paid based on closed tickets and all the communication stays inside each ticket. I would say it is literally the most inclusive model to date -- since everything is handled by a bot (including task assignments and payments), there is 0 bias.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Sure thing, keep posting them. I'm trying to publish a tip every Monday (German time). Regarding Spring debugging: Can you elaborate a bit more? I get the general point, but wonder how you end up in Spring code in the first place? 
Your scala version is a bit more verbose than it needs to be: val fileNames = List( "rows1.csv", "rows2.csv" ) val connection = DriverManager.getConnection("jdbc:mysql://localhost:33306/booksdb") val insertBookStmt = connection.prepareStatement("insert into books(book_name, author_name) values(?, ?)") try { fileNames .flatMap(name =&gt; Source.fromFile(name).getLines()) .filter(!_.isEmpty) .map(_.split(",")) .foreach{cols =&gt; insertBookStmt.setString(1, cols(0)) insertBookStmt.setString(2, cols(1)) println(s"insertion count ${insertBookStmt.executeUpdate()}") } } catch { case e: Exception =&gt; e.printStackTrace() }
I've tried once and again to handle errors using this functional approach (although not using vavr), and failed. I have some minor problems, like the Convention Error=Left ok=Right being really annoying to remember (sometimes I create my own Either type with Fail and Ok instead of Left and Right), but the main issue is chaining calls. While in theory you should be able to chain the output from one method to the input of the other, this only work if you have methods with just one parameter, and I can not get it to work in a elegant way when method one returns an Integer, and method two requires that integer, a String from another method, and a BigDecimal from a configuration file. How is that supposed to be handle? &amp;#x200B; Thanks for your article, and your blog looks great by the way
For... A long long time now (Java 1.7? Probably earlier) there is no need to ping the driver class. SPI discovery takes care of it.
BTW: You can make your scala code more concise and more like the Kotlin code by using \_ instead of explicit arguments and =&gt;
yup there is RSS https://blog.codefx.org/feed/
That is light years from being "anti-pattern". Do you even know what anti-pattern is? 
Thanks I will check your blog too :) one comment from my side however PLEASE man, PLEASE use twitter :) everyone is in twitter at least from the Java space you miss a lot without a twitter handle.
Try it. Remove the line. It does nothing.
Reactive access to DB is usefull when you have reactive web stack. Well, it's not usefull, it's required.
I know, I tried twitter for some time. &amp;#x200B; I removed it because my initial understanding of Twitter was that it's a platform where users follow each other, share ideas and learn new things. It turned out that no matter who I followed, my wall was always filled with politics and wrath -- so, I'm out....
&gt; I would say it is literally the most inclusive model to date -- since everything is handled by a bot (including task assignments and payments), there is 0 bias. Yet according to the owner women should not be programmers. Inclusive my ass. The culture of a company is set by upper management. The site times out by the way.
&gt; impossible to add later on without forking it and adding it yourself Have you tried contributing?
&gt; Regarding Marketing, developers are notoriously a very hard audience, Not really. Developer advocates who are in fact developers themselves generally have no problems. Marketeers who aren't on the other hand...
You're probably going to get a lot of snarky responses posting here about marketing, and you already have one. I thought I'd counter that by coming and giving you some real answers to your questions, but then this made me want to be snarky as well! &gt;Personally, I call it fascinatingly boring. Please don't describe my passion and profession as 'boring'. It's just going to wind me up and make me not want to talk to you. But I can still answer these &gt;9. If you were working in Marketing, how would you target yourself? &gt; &gt;10. What do you think would be the most effective way to communicate a message to you? Give me easy, attractively formatted access to as much information as you can. You're not going to manage to trick me by withholding information, or if you do you'll make me angry later, so you might as well put your efforts into make everything I want as accessible as possible.
I stumbled upon this thread because I am looking into maybe implementing Microservices at my work. I am most struggling with deciding which framework to use. Eg. MQTT, AMQP or maybe even ROS (my product is mostly contained within one computer but will likely interface to something remotely going forward). Any thoughts on this would be greatly appreciated. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/aso2m8/help_me_learn_about_you/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt;The site times out by the way. This is a good chance to see how it works.If you are curious, open an Issue about it here: [http://github.com/zerocracy/farm](http://github.com/zerocracy/farm) The bot will beg for cash, don't mind that :) 
&gt; If you are curious Not really, sorry.
I would totally agree that my job is that much harder for that reason, and I admit that much. &amp;#x200B; But I would also argue that being an advocate is only a part of the whole initiative, and there's other things to take under consideration. Not all marketing is about getting you to use X product. :) &amp;#x200B; Since you're on here, would you like to answer some other questions? :)
well I think you have followed someone that you should not :D Mine have no political stuff and almost everyone who I follow is a Java developer, android developer or a news page for java development https://twitter.com/gochev
I don't understand this bot. Not only is it almost always wrong, it's also rude by jumping on new posters to the sub like this one, and finally it says it's removed the post when it actually hasn't. What's the point?
&gt; You're probably going to get a lot of snarky responses posting here about marketing, and you already have one. It wasn't intended as snarky, I'm just expressing my experience with how companies try to market their software. The only people I've had up-front discussions with were developers. Anyone who doesn't dogfood is just spreading the lies the companies tell them to spread. If there's no dogfooding I'm going to assume you're just doing sales.
&gt; Please don't describe my passion and profession as 'boring'. It's just going to wind me up and make me not want to talk to you. I apologise if you took it the wrong way. Obviously, in no way am I criticizing DevOps. If anything, I'm criticizing myself for not having the ability to learn it myself. If there's any skill I'd like to have it is definitely coding. And I have been trying since I was a kid, but between my short attention span, my difficulty in grasping the concepts, and my lack of logical background, I have been unable to learn a language successfully. So when I said 'boring', I meant confusing and overwhelming. So even though I'm unable to fully understand it, I am still drawn to it. But I will take what you said to heart and consider if that's the appropriate wording I should use. &gt; Give me easy, attractively formatted access to as much information as you can. You're not going to manage to trick me by withholding information, or if you do you'll make me angry later, so you might as well put your efforts into make everything I want as accessible as possible. And do you want to find the information yourself, or do you want the content delivered to you? &amp;#x200B; Regarding snarky comments, it wouldn't be reddit if there weren't any. :) But all information is valuable to me, even the negative one. Plus, acting like an admitted noob like I am doing now, makes me an easy target. I get that. But getting to understand Devs is more important :)
Sorry, I can't, the post was removed. I didn't really have much to add really. I want to discuss technology with peers, not with sales people. Sales people tend to lie, even if they don't know they are.
You could also write: var fileNames = List.of( "rows1.csv", "rows2.csv" ); var connection = DriverManager.getConnection("jdbc:mysql://localhost:33306/booksdb"); var insertBookStmt = connection .prepareStatement("insert into books(book_name, author_name) values(?, ?)"); try { fileNames.stream() .flatMap(name -&gt; uncheckedIO(() -&gt; Files.readAllLines(Paths.get(name)).stream())) .filter(line -&gt; !line.isEmpty()) .map(line -&gt; line.split(",")) .forEach(cols -&gt; uncheckedSQL(() -&gt; { insertBookStmt.setString(1, cols[0]); insertBookStmt.setString(2, cols[1]); var count = insertBookStmt.executeUpdate(); System.out.println(count); })); } catch (RuntimeException e) { e.printStackTrace(); } } with the help of a few types and methods you only need to define once: public interface IOSupplier&lt;T&gt; { T get() throws IOException; } public interface SQLOp { void run() throws SQLException; } public static &lt;T&gt; T uncheckedIO(IOSupplier&lt;T&gt; op) { try { return op.get(); } catch(IOException e) { throw new UncheckedIOException(e); } } public static void uncheckedSQL(SQLOp op) { try { op.run(); } catch(SQLException e) { throw new RuntimeException(e); } } 
I think what I mean is as soon as I say 'yeah can you tell me a bit more about that' have somewhere where I can go and read for myself as much as I want about your product and how you sell it. 'Call us for more information' or 'call us for pricing' etc are a massive turn-off. Yeah I'll need to get in touch at some point, but don't force me to do that just to get facts you could have written down.
&gt; ry, I can't, the post was removed. I didn't really have much to add really. I want to discuss technology with peers, not with sales people. Sales people tend to lie, even if they don't know they are. That's too bad. In the end, I'm just a guy to who loves technology too, even though I wasn't able to pursue it as a career. As for the questions (which aren't really about technology), I just got a new job and wanted to make sure I was doing it right. But I'm not a salesperson. I'm a communications person. My objective is not to sell. That's someone else's department. I just want to get to know developers, and making sure all the information out there (provided by us) is to your liking. All I want is for you to like our brand and consider it a useful resource or tool. Whether you use it or not, is up to you, but it isn't my concern. I'm just worried if you're happy with the information you're getting from us, and that you see our company as a positive, and possibly even get you to engage in our forums and such. But that's as far as I go, in terms of my job description. :) Anyway, I hope you don't immediately discard everyone that is in sales or marketing. There are idiots that act like used car salesmen, for sure, but there are also people (more on marketing than sales) who are "human" in the sense, they understand your point of view and just want to hear and discuss it, not necessarily debate it. That's not necessarily bad, it's just the way it is. :)
I get it, I hate when I have to click through to see the info I want, and more often than not, they have to contact me with the info.
The title is misleading, the original title is a much better description: Cucumber is a BDD framework for automation testing with Selenium. Run your first Cucumber script &amp; leverage TestNG capabilities to perform parallel testing. 
Thanks, I'll definitely check that out. Looking for a quick path to get up and running. Hopefully the official docs have something to get someone up and running quickly, on top of being a reference.
Looking at this now, seems pretty solid to get some quick info from to start with, thanks!
Awesome, thanks for this. :)
Good advice, I'll try and rely on JUnit as much as possible where I do testing. It's a relatively small CRUD type app, so no real need to go crazy with tests. My biggest decision actually, will be to decide how to interact with the db. I'm used to straight JDBC calls, and very little experience using MyBatis (just a couple of SQL statements). So not sure if using JPA, Hibernate or JDBC Templates is the way to go. Once I nail that down, I'll be in better shape.
Textbook best practice is to create a Data Access Object (DAO) interface that declares the CRUD operations and test against that interface. That way you can write mocks without Mockito. Mockito can be really convenient for exactly this, but the point is that you don't have to.
Ah I see. So it's similar to the event loop web servers then. Thanks for the explanation!
Patience is a virtue. Resist pressure. And if you have access to Pluralsight, they have a course on JUnit 5 too: https://www.pluralsight.com/courses/junit-5-fundamentals. However that won’t be enough for testing Spring Boot components. For that, watch https://www.pluralsight.com/courses/effective-testing-with-spring.
If you are using JSON-P a lot, you might find this Feature Request useful: [https://github.com/eclipse-ee4j/jsonp/issues/153](https://github.com/eclipse-ee4j/jsonp/issues/153) &amp;#x200B; It was opened by me a few weeks ago and it has no attention so far. Please upvote if you like the idea, or start a discussion right there in the ticket. :)
instead of learning yet another framework or language consider trying one of the following: * solve a problem that interests you in pure java - something for processing/generating sound, or images, or something that solves mathematical or other problems * learn about unsafe - what it does, what tools rely on it these are the things that are on my list, i’ve done something along these lines myself
Hi, Codota CEO here. Thanks for the feedback. Indeed there were cases where we broke the IntelliJ autocomplete, but that was a few months ago. The product got WAY better since then, so I encourage you to give it another shot - happy to hear feedback.
Thanks for the advice, I really appreciate it! I don't suppose you would know off hand, of an article .. or even better, a code sample on GitHub that demonstrates this? I've been away from coding for almost 2 years (JavaScript and some limited .net stuff, but nothing even close to regular dev work) and though I have almost 2.5 months to write this crud app, I'm panicking that I won't have all the pieces in place in time.
Thank you, I'll check that out on Amazon.
Happy to help! You generally really don‘t need to pay for basic knowledge like this in SD. YouTube has a lot of great tutorials as does the documentation and of course StackOverflow ;) My best approach is to learn as I go with my use cases. It sticks better than a long course with very niche examples. But that’s just my way of learning. BTW, I strongly recommend AssertJ for (fluent) assertions. 
Heh, he even has a list of conferences that has cancelled his talks because of his views, along with this: &gt;I will not hide their names. Just like Nazi criminals these guys should be known, visible, and prosecuted, as soon as possible. Guy's a nut
Always glad to help! [This article ](https://www.baeldung.com/java-dao-pattern) is not bad. I wouldn't necessarily use the code as is, but it demonstrates the pattern quite well. It doesn't explicitly say so for some reason, but the UserDao class in section 2.3 is what you would see in many applications as a plain-Java mock/test implementation. 
He might not have updated the site yet. [Here is the direct link to the videos on his channel.](https://www.youtube.com/user/koushks)
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The Java version can be a tiny bit shorter by using static imports: ``` var fileNames = asList( "rows1.csv", "rows2.csv" ); ```
Nice job dude!
Great list! It's always nice to dream... *_types `new Function`...`
&gt; `Map&lt;String, Integer&gt; myMap = Map.of("one", 1, "two", 2);` Me: huh, I didn't realize you could do varargs like that. I wonder what the Javadoc looks like... | | | | | --- | --- | --- | | static &lt;K,V&gt; Map&lt;K,V&gt; | of() | Returns an immutable map containing zero mappings. | | static &lt;K,V&gt; Map&lt;K,V&gt; | of(K k1, V v1) | Returns an immutable map containing a single mapping. | | static &lt;K,V&gt; Map&lt;K,V&gt; | of(K k1, V v1, K k2, V v2) | Returns an immutable map containing two mappings. | | static &lt;K,V&gt; Map&lt;K,V&gt; | of(K k1, V v1, K k2, V v2, K k3, V v3) | Returns an immutable map containing three mappings. | | static &lt;K,V&gt; Map&lt;K,V&gt; | of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4) | Returns an immutable map containing four mappings. | | static &lt;K,V&gt; Map&lt;K,V&gt; | of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5) | Returns an immutable map containing five mappings. | | static &lt;K,V&gt; Map&lt;K,V&gt; | of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6) | Returns an immutable map containing six mappings. | | static &lt;K,V&gt; Map&lt;K,V&gt; | of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6, K k7, V v7) | Returns an immutable map containing seven mappings. | | static &lt;K,V&gt; Map&lt;K,V&gt; | of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6, K k7, V v7, K k8, V v8) | Returns an immutable map containing eight mappings. | | static &lt;K,V&gt; Map&lt;K,V&gt; | of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6, K k7, V v7, K k8, V v8, K k9, V v9) | Returns an immutable map containing nine mappings. | | static &lt;K,V&gt; Map&lt;K,V&gt; | of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6, K k7, V v7, K k8, V v8, K k9, V v9, K k10, V v10) | Returns an immutable map containing ten mappings. | ...seriously? And List and Set have the same thing. Why?
... because it's convenient?
https://stackoverflow.com/a/41918976/3000387
&gt; Coming in JDK 12: String enhancements: align String.align was [removed](https://bugs.openjdk.java.net/browse/JDK-8215489)
Stuart Marks, who is in charge of core libraries, said they included multiple overloads in order to avoid using varargs all of the time, which involves additional boxing overhead.
Isn’t that bizarre, it’s been around for a few years, surprised they haven’t fixed it yet. Last I checked it maxed out at 16 pairs. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/ass1zh/java_programming_help/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; HotReload and things like dropping frames, while debugging Dropping frames works just fine, there is a button for it in the debug view (if you like you can even assign a shortcut) - not sure how it could be better. Also don't understand the problem with Hot Reloading... it's there, it works. &gt; Evaluating expressions on the fly and copying values from dialogs (variable values, JavaDoc, ...) All work perfectly fine in IDEA... &gt; Custom positioning of views and perspectives Fair enough, though I'd argue that you don't need this. Once you are familiar with IDEA's keyboard shortcuts, you really should spend most of your time using only the Editor and the Recent Files dialog (which also gives access to all the other views). &gt; Navigation in the editor and menus with the keyboard alone In my experience keyboard navigation is actually far superior in IDEA, compared to Eclipse. Can you explain what does not work for you? &gt; Class lookup, navigation, structure, usage, implementations, ... Class lockup is almost infinitely faster in IDEA, just a shortcut away and also way smarter than the Eclipse class lookup: For a class named "AbstractTreeViewer" all of the following bring it up (not need for any wildcards either): "viewer", "Abstract", "View", "AbstView", "Tree", ... For file based navigation there are default shortcuts for "Open file...", "Open class...", "Last file", "Last edit location", "Recently used files"... not sure what you are missing. If you need it, the structure view is there, open it with ALT+7. Usages are also way faster than in Eclipse, allow to filter by module, package, directory, scope (production/test), etc. It also finds usages that Eclipse will not catch, like in JavaDoc or just random text files. Overrides and Implementations are easily spotted by the (O) and (I) icons displayed next to the class name - also there is the type hierarchie (same as in Eclipse). Again not sure how Eclipse is any better in this regard. &gt; Otb Bracket matching and selections, even in Strings Not sure what you mean by "Otb Bracket matching". You can actually inject a language into any String in IDEA, which makes it language aware, meaning that you get syntax highlighting, code completion and structural validation inside the respective String. Examples for languages that can be injected: JSON, HTML, SQL (links with configured datasources and validates against the DB schema), RegEx (can also be executed directly with ALT+ENTER) and many more... &gt; Save actions (needs a plugin in IntelliJ) Yes, they are not available by default. I personally don't miss them and there are pre-commit actions, which can do most of the same thing Eclipse does in its Save Actions - only once per commit, instead of once per save (which by default is automatic in IDEA). &gt; Switching projects and workspaces, closing projects This one also took me a while to understand, but the short version is: Eclipse Workspace = IDEA Project Eclipse Project = IDEA Module Never saw the need to close a project, to be honest. If you don't need it all the time, open another IDEA instance, which holds it? &gt; Setting JDK of project (needs like 3 or so settings in IntelliJ) There are three kinds of settings related to JDKs: Platform Settings for configuring the available SDKs, Project Settings for configuring the Project (think Eclipse workspace) default, Module specific settings (by default modules use the project default tough, so in many cases this never needs to be touched). &gt; Maven integration sometimes, can't really point the finger at what makes the difference The abysmal maven integration and inability to display the actual maven project structure in its original form (nested modules), was actually one of the main reasons why I switched from Eclipse to IDEA in 2013. In my more recent adventures with Eclipse, I found that the Maven support has improved, but is still worse than what IDEA offers. 
I would be more exited about JDK11 support than JEE8 TCK passing, but maybe that's just me.
TLDR; No primitive generics
&gt; ...seriously? And List and Set have the same thing. Why? Because it's the only way it works (in case of maps), it's convenient and using varargs (in case of lists of sets) has worse performance because of the temporary array creation. [Guava does the same for example.](https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java#L93)
Eclipse shows you all warnings and errors all the time, because it auto-compiles your code all the time, which in big projects is incredibly slow. But if you want that, you can enable it in IDEA as well. I attribute the statement "[Eclipse] has more Java refactoring options than IntelliJ" to the fact, that you don't know IDEA, and what it can do, that well (yet?). Making an Inner Class top-level: F6 &gt; "Move Inner to Upper Level"
[They’re coming.](http://openjdk.java.net/jeps/218)
There is a varargs implementation if you need additional pairs.
I'm surprised to see that stuff is still happening in java.awt
Thanks! :)
Good catch, thanks! I'll update the post.
&gt; though I'd argue that you don't need this. Can i move out all auxiliary views to my other monitor? &gt;Class lockup is almost infinitely faster in IDEA, just a shortcut away Ctrl-Shift-T in Eclipse, works fast. &gt; and also way smarter than the Eclipse class Considering that for these common names the list is often too large, i'll use wildcards when i need them, thanks. &gt; Usages are also way faster than in Eclipse, allow to filter by module, package, directory, scope (production/test), etc. It also finds usages that Eclipse will not catch, like in JavaDoc or just random text files. Ctrl-Shift-G gives you a standard search view with hierarchy of found references from which you can collapse/delete unnecessary items. Or you can Ctrl-H to specify search location. References in javadocs are found by this.
Thanks. Also, I know you mean well, but I couldn't help but detect in your comment the same condescending tone towards Eclipse that some of my previous coworkers had. I'm allergic to zealotry and this has kept from using IntelliJ before. The reason I'm using it now is because the Rust plugin is unequalled, and I dont want to jump between IDEs. To make this straight, I still strongly believe Eclipse to be a superior IDE in many ways. Amongst other things, I've met the "big project, slow eclipse" conundrum before, and it was always a matter of shitty project structure and build system, unrelated to the IDE. In general, I still find that Eclipse most accurately reflects a project's state, making better use of UI cues and proactively managing the code. You are entitled to your opinion, but to look upon any Eclipse users as yet-to-be-converted heathens does not help you point.
&gt; which in big projects is incredibly slow. I've yet to encounter this. And i have a workspace with hundreds of original Eclipse plugin projects that i open sometimes. After initial full build consequent builds are incremental and fast (obviously).
Stuck on 6/7?
10 should usually be enough, these static factories are mainly meant for small collections.
It's just you ;)
They keep saying Java is today’s COBOL. Nope, Java hasn’t stopped and still getting better.
Well my experience might just be project specific (Spring Boot, dev tools activated), but its completely different than yours: &gt; Dropping frames works just fine, there is a button for it in the debug view Especially while Unit testing. In Eclipse I can choose any frame I want to drop to and it unwinds it without fail. In IntelliJ it drops the last frame as far as I figured so far and often it just says somethings along the lines "Couldn't not drop frame here". &gt; Also don't understand the problem with Hot Reloading... it's there, it works. It just doesn't work in my project. All kinds of relevant settings are ticked. Even in the Save Actions Plugin. It just doesn't reload and update the code while debugging. Eclipse even drops the frames if necessary (ofc it doesn't update cached values, thats not possible anyway) &gt; All work perfectly fine in IDEA... [regarding copying values etc.] I'm used to select and copy any text and values from hover menus and dialogs. In IntelliJ either the dialog immediately disappears when you try to focus it (another nitpick, the hover sometimes just doesn't appear!) or you need to select "Copy Value" from the context menu while inspecting. I figured I could just select the line and Ctrl+C, so I just need to change my workflow in those cases. But feels little restricted. &gt; Fair enough, though I'd argue that you don't need this. [regarding custom positioning of views] I want the freedom to work in a way I like to &gt; In my experience keyboard navigation is actually far superior in IDEA, compared to Eclipse. Can you explain what does not work for you? These are many little things that add up. Maybe it's just my muscle memory that gets in the way or there's some setting burried somewhere. However some examples: * "Evaluating expression" needs another Enter press. * Can't move to the value section with arrow down. * Can't duplicate lines upwards in editor. * Typing letters in project manager starts a search instead of jumping to relevant files in order. * After "Collapsing all" in project manager it doesn't expand to the class when focusing the editor again (needs explicit "Scroll from source"). * Jump to main toolbar from editor. * Detaching views. &gt; Class lockup is almost infinitely faster in IDEA, just a shortcut away and also way smarter than the Eclipse class lookup: For a class named "AbstractTreeViewer" all of the following bring it up (not need for any wildcards either): "viewer", "Abstract", "View", "AbstView", "Tree", ... My experience is completely different with this. Often I also don't want it to be "smart" because it isn't. The project is huge, it finds too many unrelated things. I use "Find in Path" a lot. I have not figured out how to pre-set multiple file masks. How to search file names with "Find in Path"?, no I need to "Find resources" for that, but that doesn't offer all nifty "Find in Path" filters. Same with classes and packages and methods etc. Those are not aligned neatly. &gt; Overrides and Implementations It occurred many times now that it said "No implementation found" eventhough there clearly are. Maybe it has something to do with synchronization. &gt; Not sure what you mean by "Otb Bracket matching" Examples: * [Eclipse](https://pbs.twimg.com/media/DcVhU8TU8AAZUN5.jpg) * [Eclipse](https://video.twimg.com/tweet_video/DgDAcDDX4AAoJA2.mp4) vs. [IntelliJ](https://video.twimg.com/tweet_video/DgDAmT-WsAAOB97.mp4) &gt; Save actions I need them for formatting, organizing imports, set static, etc. I save a lot. E.g. after every statement :) and I like to see what I get immediately. Pre-commit actions are just not the same in that regard. The "Save actions" plugin does a good job though. &gt; There are three kinds of settings related to JDKs I always jumble that up. IntelliJ sometimes just falls back to like JDK 7 after switching projects. &gt; Maven integration Actually IntelliJ also has build issues. I can refactor some code, save the file and it just doesn't build all relevant pieces. I think everything is fine, I commit and Jenkins reports build errors. The other way around sometimes red squiggly remain indicating build errors eventhough the class is fine. Also "Maven reimport" in IntelliJ is not the same as "Maven Update" in Eclipse. To be fair Eclipse infuriates me with odd builds and builds and builds ... (like indexing in IntelliJ) 
i just had a quick look and it looks very similiar to event sourcing. Gonna save this for later :)
You're right 👍 I'll work on that 
&gt; Thanks for your article, and your blog looks great by the way Thank you very much! I'm looking for a (hopefully) complete response to your questions.. Although I can offer some advices only, I urge you to look at FP articles @ https://github.com/vavr-io/resources/blob/master/README.md
You seem to have been grinding this axe for [some time](https://www.reddit.com/r/java/comments/9xeyvh/fp_vs_oop_choose_two_by_brian_goetz/e9svgxp/). As /u/pron98 points out there are perfectly acceptable workarounds. If you want to persist in finding Java lambdas and streams so objectionable then have you considering simply not using them?
&gt; in what sense exceptions are expensive? Constructing an exception object is a [very expensive operation](http://java-performance.info/throwing-an-exception-in-java-is-very-slow/), specifically traversing and collecting the entire call stack. &gt; Abstractness of Either is its drawback as it does not carry any semantic information. Nor does it need to - the type parameters convey the semantic information. Do you apply the same criticism to List, Map, Queue, Set and every other generic type ?
\&gt; It was opened by me a few weeks ago and it has no attention so far. Maybe because this is really easy to roll yourself. And if you start going down this way you open up the Pandoras box of people wanting XYZ utility classes. And why only JsonObject and JsonArray. What about JsonGenerator or JsonParser or some of the other interfaces in the library. &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
Thanks for finding it, didn't have to do that earlier.
There are very few github stars for both glassfish and the tck. We need more hype!
Thanks again, good article. I've turned to that site quite a few times for some solid info. :)
Seconded.
It looks like in your [submission](https://www.reddit.com/r/java/comments/asvifb/project_swingx/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt;Patience is a virtue. Resist pressure. Couldn't have said better myself honestly :) &gt;And if you have access to Pluralsight, they have a course on JUnit 5 too: https://www.pluralsight.com/courses/junit-5-fundamentals. &gt; &gt;However that won’t be enough for testing Spring Boot components. For that, watch https://www.pluralsight.com/courses/effective-testing-with-spring. Great suggestions, I have an account but need to renew it for this month. I'll check both those courses out.
Zzz
Got immediately put off by the archaic tools still in place. Coding in my free time is something I do for fun, when the entry barrier is that high then I just look somewhere else. You can say that since I'm this lazy you are probably better off without me, I don't mind.
Although with `List`, only zero and one entries is specialised. Beyond that, it uses an array-backed list. I believe the implementation is slightly different to `Arrays.asList` though due to slightly differing semantics. 
Using an array-backed list still requires copying the vararg array, so it's better to avoid it if possible.
Awesome, thanks for the clarification :)
Seems like it would be a good course, but the course description and contents don't seem to match. Nothing yet on learning Spring or Spring Boot unfortunately.
The `List` returned by `Arrays.asList` avoids the copy by using the vararg array as it's backing array, but the downside is that it's not immutable.
There is a testing part on the spring boot course by the same author involving junit5 and mockito. https://www.udemy.com/spring-framework-5-beginner-to-guru/
Ah yes, if you don't care much about guarantees, you can reuse the array. But the `.of` methods guarantee immutability, so a defensive varargs copy is a must.
Android may be moving towards Kotlin
But wouldn't old programs still be written in Java and thus need to be maintained in said language? I mean I'm open to learn anything 
Yes. Android programming is very asynchronous and UI-focused. I've never liked doing UI because it's arbitrary and endless work. Businesses want to re-skin their entire app every two years so people won't think it's outdated
Just write the code iteratively. Multi-line lambdas are dumb
wait I can use #! with java?
eclipse user since 2001. I currently use it with Scala. I find that most of the early complainers of eclipse (pre Mars never learned how to tune it (unfortunately the default settings are heavy). Early on I learned to configure eclipse (disable "build automatically", launch from an sh script (setting data, vmargs etc) so this was never a problem for me. Launching eclipse from a script also allows you to open multiple eclipse IDEs concurrently. I haven't done that much anymore, but I used to have separate IDE launchers for dev, qa, prod, and hackday codebases. some other reason I like eclipse: * better class viewing, better plugins - All the other developers on my team use intelij. One of the reasons I find I write better code then they do is simply because eclipse provides better views into the class (outline view) and better plugins to ensure quality (fndbugs, scalatest, code formatting, code coverage tools like scoverage, clover, eclEmma, etc). The outline view allows you to understand the class at a higher level and drop into methods you want to explore. The integrated formatting / testing / code coverage allows easy iterations of ensuring standards and quality. * versioning tools - these integrate well in eclipse. The 'Team sync' perspective, history, local history, eclipse merge, etc are great features. * UI perspectives / UI customization: I like how in eclipse I can just pop in views to my perspectives and move the layout around. I move my outline view and test views to the left panel, add console and git staging view to the bottom-right panel in my java or scala perspectives. Its intuitive and it just works * project generation: using commands like 'mvn eclipse:eclipse' and 'sbt eclipse with-source=true' get you up and developing fast. * code references - I also see my colleagues struggle to link to code references when its as simple as F3 in eclipse. * multi-project development - I have 18 concurrent projects in eclipse (some with dependencies of each other). You can't have more than one project in Intellij. * Ctrl-shift-R, Ctrl-shift-T, Ctrl-shift-B, Ctrl-shift-S, F3 - taking those shortcuts away from me is like kryptonite to superman * the marketplace of plugins: its large and usually multiple options available for any type of editor, validator, formatter, etc. so those are the reasons why I use eclipse over Intelij
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
But UI isnt programmed with CSS right? I just can't stand CSS Lol
No, instead of CSS there are xml layout files
So ... how's that an anti-pattern? You meant to say "unneeded"? 
I think I've done XML, would you say its easier than CSS? Or should I say less annoying. Ive studied CSS for over a year now and just when I feel like I get it I go and make websites and styles break other styles and then I get frustrated lmao. I'm not sure if this is how everyone feels though.
Never done CSS
You have been saved my child. Also doesn't android studio have like an interactive interface where you add buttons and drag them to position etc. and then I assume XML is just to get more control over styling.
Vue is definitely my personal favorite right now. Combine with Spring Boot as well :)
Yes, but I personally never use the visual layout editing tools. My experience has been that it over-complicates layouts by adding useless attributes I don't want like `"android:layout_marginBottom="-2dp"` and doesn't use round numbers so you end up with arbitrary values like 73 instead of 70. It's imprecise and I'll just have to fix it by hand anyway. Seems like double the work.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'd like to point out that the examples aren't closing connection or statement, and terminating on the first exception. Here's the example using my library, [trylambda](https://github.com/nullterminated/trylambda): import static com.github.nullterminated.trylambda.Try.either; import static com.github.nullterminated.trylambda.Try.trys; import java.nio.file.Files; import java.nio.file.Paths; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.util.Arrays; import java.util.List; public class Hello { public static void main(final String[] args) { final String url = "jdbc:mysql://localhost:33306/booksdb"; final String sql = "insert into books(book_name, author_name) values(?, ?)"; final List&lt;String&gt; fileNames = Arrays.asList("rows1.csv", "rows2.csv"); either(trys(() -&gt; DriverManager.getConnection(url), connection -&gt; trys(() -&gt; connection.prepareStatement(sql), insertBookStmt -&gt; () -&gt; insertRows(insertBookStmt, fileNames)))) .use( Exception::printStackTrace, rowCount -&gt; System.out.println("Inserted " + rowCount + " rows.")); } /** * @param stmt * the insert prepared statement * @return number of inserted rows */ public static Integer insertRows(final PreparedStatement stmt, final List&lt;String&gt; fileNames) { return fileNames.stream() .map(name -&gt; either(() -&gt; Files.readAllLines(Paths.get(name)))) .mapToInt(either -&gt; either.reduce( ioErr -&gt; { // Error opening file ioErr.printStackTrace(); return 0; }, lines -&gt; lines.stream() .filter(line -&gt; !line.isEmpty()) .map(line -&gt; line.split(",")) .map(cols -&gt; either(() -&gt; { stmt.setString(1, cols[0]); stmt.setString(2, cols[1]); return stmt.executeUpdate(); })) .mapToInt(eith -&gt; eith.reduce( sqlErr -&gt; { // Error inserting row sqlErr.printStackTrace(); return 0; }, Integer::intValue)) // Sum of inserts by line .sum())) // Sum of inserts by file .sum(); } } The difference is stream processing can continue even when exceptions are encountered due to the use of Eithers. All resources are autoclosed cleanly by the trys() method.
&gt;Rather than needing 1000 threads to handle 1000 concurrently operating queries/transactions with each of those threads wasting computing time doing absolutely nothing This is one reason I am eagerly waiting for project loom (Fibers and continuations) so that we can write the same old blocking code.
They must never have heard of Spring Boot / Framework
A common misconception: Cucumber is not a framework specifically for UI testing with Selenium, it’s a testing framework allowing you to write tests in a format non-programmers can easily understand to encourage discussion around the requirements. You can use it for unit tests too.
Depending on your definition we've had primitive generics since 1.5!
My 2 cents. Depending what industry you end up in, it's likely you won't be able to avoid it completely, at least at the start of your career. Given that, I'd recommend you become minimally proficient/comfortable with it, to the point where if you were asked to complete a task requiring the knowledge, you'd feel confident you could do it -- You may not have the BEST solution, you may have to use reference materials, but you could complete the task. Beyond that, you should follow your interests/passions skill wise. There are tons of back-end only jobs out there where you'd never have to see HTML/CSS/Javascript. Typically for new graduates entering the job market, most companies are looking for someone with a wide (but shallow) knowledge base, with the potential and passion to quickly learn new things. Typically side projects or contributing to opensource wins huge bonus points here.
I can do CSS pretty well. I can find solutions by refferencing the doc but I can't do flashy things with it. I mean I can make a nice looking simple website. But that's really it. I guess that's all you really need as a beginner though? I mean I see people post portfolios they used to get jobs and I feel like my creations are just as good or even better but I just never apply for jobs because I feel like I just don't actually understand anything. 
And the things coming in the future only makes it better. * Records/data classes * Value types * `instanceof` declarations * Pattern matching * Concise method bodies * GraalVM/Panama * Loom (fibers/continuations)
They're not going to fix it because there's nothing to fix. It's ugly in the docs, but it allows for efficient usage.
Yep with very recent JDKs. The utility is a little limited because you still need to write a full Java class and main method.
Stopped reading at: **Cons of Java** 1. Java is not a modern programming language. &amp;#x200B;
What I find remarkable in communities like Kotlin is how they attack the platform without which their beloved language wouldn't exist to start with.
And then it goes on to claim that Kotlin language is less error prone because it's more "compact". What.
The main thing I haven't seen on the Java roadmap that Kotlin has is nullability baked into the type system.
Grab an upvote for bringing attention towards Kotlin, but there are so many elements in this article which trouble me. As /u/nikanjX points out, presenting vague statements like these give the impression that they are only there, because there had to be some cons related to using Java. Posting it on /r/java with a provocative and potentially misleading title doesn't add to your cause. The article is generally superficial and lack concrete examples. It would take a minor effort to flip the arguments, and make Java the hero of the article. I'm happy for Kotlin that some of the larger players have embraced it, but I don't feel like this article contributes with anything new, if anything at all.
Please don't tar everyone with the same brush. Inexperienced developers getting all tribalistic about their favourite language is something you see everywhere. I'm a Java dev, Kotlin fan, and most of us are normal rational people who don't need to shit on others to feel better.
I'm a huge Kotlin fan but this article is just complete trash.
&gt;Maybe because this is really easy to roll yourself Yes, it's easy, but painful (theoretically you would have to write tests for all those methods of JsonObject and JsonArray)... furthermore, even if it's easy, I don't think many people think of it: the majority will just parse the JsonObject into a get/set model and that's it, they'll modify that model everytime there's a change in the Json. &amp;#x200B; I guess it would be more elegant if the API encouraged polymorphism. And yes, JsonGenerator and JsonParser could also have such classes, why not? I mentioned JsonObject and JsonArray only because that's what I work with the most. 
1. This is a **Java** subreddit, not a **Kotlin** 2. Go and **spam** somewhere else. Next violation will earn you a permanent ban.
It looks like in your [submission](https://www.reddit.com/r/java/comments/at0tql/can_i_ask_something_about_ifelse_codes/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
oh no ;-;
The reactive model is like the GPL. If you introduce it in your application, it will infect your entire system, and everything needs to be reactive.
I just recently got a job in London using all of those, some of which I didn't know till I had training like Spring and Angular. But I have to say the competition is fierce so it maybe less of a case of you aren't good enough but there has always been someone better :/ . That was my experience and feedback from interviews
Just watch Kotlin and Android talks to see the extent of it.
Can you link your github? It's hard to get into development as a first job but it gets easier once you are in. It seems that you are familiar with different things but did you put up a project? I think that this needs to be your first priority. What are you aiming for? A full stack web development position? Or a more backend one? Either way, you should put a simple MVC web app and a Web Api together with Angular (since you know a little bit) in the front. Continue to practice your algorithm skills, you will need those in your interviews. As a guide, you can check FreeCodeCamp JS algorithm part and do them in Java. Another tip i can give is to learn SOLID, i have been in interviews that they ask a little about it so it can't hurt that you keep as eye in them and it will help you becoming a better developer. &amp;#x200B; I'm by no means a experienced developer, i'm a junior one, less than 2 years in the business and not a Java developer (trying to get into) but a .netcore/C# developer, but if you want some help with something or you have question about it, PM me. I was in the same position as you, not a brilliant developer nor a brilliant mathematician, but i follow what my seniors say and practice at home a lot.
I don't do anything with Android so I don't watch those. When it comes to Java back-end devs what I've seen sofar is just balanced opinions on these topics.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
\&gt; And yes, JsonGenerator and JsonParser could also have such classes, why not? Maybe because of the same reason you will never see a delegator class for every collection interface in java.util. The downsides of significantly increasing the surface area of the API clearly overweights what little benefits easy-to-produce delegator/forwarding classes bring to the table. 
They usually talk about how it is going to be "Kotlin über alles", and how Kotlin/Native will eventually make the JVM irrelevant.
The link used for new JDK12 String methods https://download.java.net/java/early_access/jdk12/docs/api/java.base/java/lang/String.html doesn't work :(
Your skills are quite nice, you would get a job instantly anywhere in Central and Eastern Europe -- the requirement for devs and especially Java devs is so high they can't affort to ask for much experience. They'll maybe give you a smaller salary, but they'll train you on the job. &amp;#x200B; You can start your own projects on Github, for a change. Gain experience and build up a portofolio. The most important thing in the Java world is to understand the theory (so to speak) behind things. Java is an ecosystem based on specifications and interfaces, so it's a very big plus for you if you understand what exactly Spring is, what specs does it implement and which are proprietary functionalities etc. &amp;#x200B; Understanding theory is a big plus because most devs do not. So when you see a Spring app deployed on a JBoss server you will understand why they get MehtodNotFoundException every Tuesday at 4AM while others won't. It sounds like a lot of stuff but believe me, it is quite simple :) 
The problem is less what you can do, more where you are and where you are willing to move to. Assuming you actually can do all those things, recruiters at my place would have you dragged from the streets. So consider, where you are willing to go. Most IT companies will be willing to have a first talk with video chat; so nothing stopping you from contacting people some distance away.
As a senior Java developer I've probably seen over a hundred applicants. When faced with a fresh graduate the single most important thing I look for is personality! Your honesty and willingness to learn will always far outweigh the (lack of) technical expertise. Don't overdo your CV, don't be afraid to admit you don't know the answer to a technical question I might ask you: I'd rather hire someone like that instead of someone who makes up answers (believe me, after all these years I can tell when you're lying...). This is of course my experience in Belgium and since I don't know where you are located things may be different.
Fair comment. Using the word 'entire' suggests that an upgrade from 11.0.1 to 11.0.2 does not require a complete reinstallation of the JDK, which it does. My point is that moving 11 -&gt; 12 -&gt; 13, etc. has greater potential for changes that will break compatibility. In theory, moving from 11.0.1 to 11.0.2 should not introduce any compatibility issues but that is not guaranteed.
FYI, here's the talk's Abstract The Spring Framework originated from a book in 2002, becoming the most widely used application framework in the entire Java ecosystem within a few years... and holding that position to this day. This talk illustrates Spring's evolution over 15 years, adapting not only to five new JDK generations but also to ever-changing requirements in modern enterprise architectures.
It sounds like your best bet would be to work on your communication skills, if you think they're a weak point. I'm sure there are some tutorial videos that can help you. I don't think you can compensate with technical skills - you need a base level of both, even if one is stronger than the other.
 Demonstrate that you can understand change management. Use gitlab for a small project. Create issues and released for your project. You can demonsttate both your project and your gitlab at your interview. 
As a junior developer I'd expect you to show good communication, good problem solving skills, and a willingness to admit that you don't know something if you don't know it! A lot of developers tend to ramble, theorise, blag, or just outright lie when faced with a question they can't answer. It's better for everyone if you get across exactly where you are as concisely as possible, that way companies can evaluate where you might fit in. You won't be expected to do much technically, but communication is key. If your skills in that area suck then that's what you should focus on!
There’s a lot of useful information over at r/cscareerquestions
First question- "I've been looking for job..." Does this mean you only looked at job offers or contacted somebody? :) I started my first Java development job 1,5 years ago after 180° career change (previous 7 years I worked as sports coach). At that time I was studying in college and had some random stuff in Github I didn't show to anyone. I totally agree that where you're searching for job makes a lot of difference. I live in Eastern/Northen Europe where IT people count is not keeping up with job market needs. My IN was thru large company bootcamp and internship where I gained needed experience on how to develop applications in team, not only do coding. And got job there after few months. After a year I decided that it was time to move on and went to various interviews. The development experience made me more confident about my skills and it helped a lot. The first interview was failure :D But I learned from that one and gained experience and got a lot better in interviews until found real nice job. So one of the things I could suggest you to do is look around is there are any bigger or smaller companies offering internships. Apply to them. The other one - try to arrange job interviews and ask for feedback after them. Learn how to be better at interviews and what is it that employer in your country is expecting from you. And another one :D Communication skills are important (together with knowledge,of course). Because if you want to develop not only code you'll need to talk with a lot of people- business side, other developers, maybe testers and support people etc., depending from company. You can learn everything. Good luck!
More examples of testing. Creating integration tests with JOOQ, MySQL 8 and Flyway it’s super annoying. The biggest advantage of hibernate is that hibernate will create database for you. With JOOQ I need to handle additional step like database migrations and Flyway configuration, Creating test suites is not as much obvious as I could be.
How is the job market for non-native software engineers in Belgium?
I've not seen quite that many applicants but definitely my fair share. Totally agree with what you're saying. It's really the "softer" skills that helps differentiate applicants.
It sounds like you should branch out to other "higher tech" areas. There's always someone willing to hire the lowest skilled/experience programmers. If you're looking for "any job" and not "good job" there shouldn't be a problem getting hired unless you display absolutely no aptitude in the interview. &amp;#x200B; With a CS degree I expect you to be able to write basic methods to do things in a reasonable big-o way. You say you haven't implemented a search/sort algorithm (and while you should never actually have to implement one in your career as a run of the mill developer), you probably have implemented one in your data structures class. Binary search tree ring a bell? Linked list + merge sort ring a bell? Those are common interview subjects and you should be able to "re-do" those things on the spot. I personally don't ask people to implement merge sort in an interview, I sometimes ask entry level folks to design a linked list. They're short and sweet and it gives you a really quick idea if they slept through CS200 or not (which can be a strong indicator if they'll surf reddit or code all day). &amp;#x200B; Aside from that business, you'll do better if you can show that you've COMPLETED projects. I don't personally care if it's a WoW addon, a command line MP3 sorting program, or an android app for rating the size of your nose. COMPLETING a project is super sexy for a company who's hiring someone.
Where in Eastern Europe would be best?. Thanks in advance. 
This. I run dev for a small product company. New grads need to know java absics, what an ide is, etc... but the real thing is attitude. Friendly humble honest keeners. 
Cluj-Napoca is the biggest IT hub in Romania. Also Bucharest goes pretty well. If you happen to speak german they'll beg you to work for them :) &amp;#x200B; Elsewhere in Europe you have Germany that has a big demand for devs (Munich and Berlin, apparenlty) and The Netherlands (Amsterdam is a big IT hub as well, as I understand). 
It will vary by market, but for a straight-out-of-college hire, I want proof that they can code their way out of a paper bag in some language and are willing to learn the language and tools needed at my shop. And for all levels of hires, I don't want to feel like it's going to suck working with you. You will want to work on your communication and personal skills. I don't know you, so I don't know how bad they truly are, but practice the basics. Look people in the eye and be able to make small talk or order a meal without tripping over your tongue. Be able to tell me about a project you've done. Soft skills can be important as technical skills at the interview stage. Expand your search area if you haven't already. Job markets vary wildly. Don't be afraid to move (far) away for a job if that's what it takes, assuming you don't have a Gilbert Grape type situation rooting you to the area.
You seem to know more than I did when I first landed my current job 4 years ago. I just had finished my associates degree and my college helped me find interviews through a program they had. I Didn’t do too well on the fist interview, but the second I did much better. I showed my github page, some websites that I made in php, showed that I have good learning and research (google) skills. First month at the job they asked me to develop a dashboard in php which they would never use because they do not work with php, they just wanted to see my skills. Long story short, I got that done in 2 weeks, they hired me full time, promoted me 3 times since to Senior Software Engineer and now I am looking at your post and realizing that I had basically no knowledge of their ecosystem and I had to learn everything from 0, and even then they hired me. My opinion is, you do have what it takes, you just have to show your are willing to learn, adapt and evolve. Good luck.
There is certainly room for improvement in the future, but this isn't about documentation or writing tutorials. jOOQ historically assumes you have a pre-existing schema and that you like DDL. In fact, you love DDL and you want to write it manually because you'd never trust an ORM to get it right (I certainly wouldn't). So, given that you already have all that DDL, you probably also already thought about how to migrate things. So, jOOQ is just something you use on top of your pre-existing infrastructure. I am aware that this may be overkill for extremely simple databases with 2-3 quick and dirty tables.
If looking for a position in a larger company (mostly located in Brussels or Antwerp) the IT job market is good because there's always high demand, even for non-native people. In the more remote parts (like the one I'm working now) they tend to be a bit more hesitant, not because of colleagues but the HR department tends to be not so open-minded :-(
Hey i know a lil more than just what an ide is! I cant get an internship for the life of me though :/
What's your degree if you don't mind my asking?
I think the whole DACH region craves developers.
It looks like in your [submission](https://www.reddit.com/r/java/comments/at3xjo/someone_please_explain_the_output_of_this_java/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/at430r/java_program_inquiry/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Concise method bodies? Link to that? 
[Here](https://openjdk.java.net/jeps/8209434) is the JEP draft.
Jesus, you're quick :) thanks.
No problem, haha! I just happened to be looking at the discussion.
[Here](https://www.youtube.com/watch?v=tzsbjloUdf4&amp;t=4m51s) is where he mentions it in his talk *Collections Refueled*.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thank you bitte.
Hi, I believe as fresh graduate, you should apply everywhere and accept what anyone give you which will most likely a entry level job as Junior Developer. From there, just start building experience by learning on the job. After 2-3 years, you will be able to land another quicker....do the same thing (unless you found your dream job!) On a side note, I am from Montréal City and most of our University Programs (undergraduate and graduate) has mandatory internship. Most of the time, the company will hire their interns.
stupid question: why is static "bad"? from some stackoverflow answers, it says it's more efficient to have static variables since there's only one copy of it(or is the "efficiency" negligible?)
stupid question: isn't _everything_ "State pattern"? since every object has some sort of "state" right? like a `Car` object has `color`, `make`, `model`. those all count as "state"
It looks like in your [submission](https://www.reddit.com/r/java/comments/at8bex/is_it_ok_to_use_docker_container_on_openjdk_64bit/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Make sure you have read Joshua Bloch's Effective Java (3rd ed) &amp; know it back to front.
@TestMethodOrder . . . Oh yes, I think I'll find use for this one... (while it looks like a step into the past, it could definitely help to reduce some test redundancies, thus runtime, thus...) 
With great power comes great responsibility!
You mean: 💤
I just realized that JEP 325 adds a new syntax for `break` that allows for an argument to be passed in. I was quite surprised they didn't just use a `return` since the switch expression syntax kind of looks like they're lambdas. But I guess this makes more sense since they're actually expressions
&gt; Well my experience might just be project specific (Spring Boot, dev tools activated), but its completely different than yours: I have used various technologies in various projects over the last couple of years with IDEA - mostly Spring Boot and JavaEE, though. Our experience should not be too disimilar, but it certainly seems to be the case. &gt; [regarding Dropping frames] Especially while Unit testing. In Eclipse I can choose any frame I want to drop to and it unwinds it without fail. In IntelliJ it drops the last frame as far as I figured so far and often it just says somethings along the lines "Couldn't not drop frame here". Never experiences this. It has always worked exactly in the way that you described for Eclipse for me. &gt; [Hot Reloading] It just doesn't work in my project. All kinds of relevant settings are ticked. Even in the Save Actions Plugin. It just doesn't reload and update the code while debugging. Eclipse even drops the frames if necessary (ofc it doesn't update cached values, thats not possible anyway) I don't use the Save Actions Plugin, so I sadly can't really comment on it and the better Hot Reloading beahviour, when using it. I use IDEA with mostly default settings und never had any issues with Hot Reloading. Of course not everything can be hot reloaded, but that is the case in Eclipse and IDEA alike. I worked on an Eclipse RCP app the last couple of days and most of the time Hot Reloading would not work properly, except for trivial changes. &gt; [regarding copying values etc.] I'm used to select and copy any text and values from hover menus and dialogs. In IntelliJ either the dialog immediately disappears when you try to focus it (another nitpick, the hover sometimes just doesn't appear!) or you need to select "Copy Value" from the context menu while inspecting. I figured I could just select the line and Ctrl+C, so I just need to change my workflow in those cases. But feels little restricted. Again, I've never experienced this. I do admit however, that I seldomly copy things from Tooltips or Dialogs, but in the instances that I did (also did a few quick tests just now), it worked consistently in all Tooltips and Dialogs that I tried. Not a single one did not appear or close prematurely on me. &gt; [regarding custom positioning of views] I want the freedom to work in a way I like to I don't want to convince you. People can be productive with different tools - that's fine. IDEA kinda expects you to mostly work with the editor and keyboard shortcuts. If that is not your thing, it might actually not be the a good fit. &gt; [keyboard navigation] These are many little things that add up. Maybe it's just my muscle memory that gets in the way or there's some setting burried somewhere. However some examples: &gt; "Evaluating expression" needs another Enter press. Indeed. Never noticed it personally. But pressing Enter to do something feels naturally to me. Probably just personal preference, like Save Actions vs Pre-Commit Actions / Automatic Recompilation vs explicitly triggering a (Re-)Build. &gt; Can't move to the value section with arrow down. Are you talking about the debugging view? ALT+RIGHT, ALT-LEFT lets you step through the different tabs, once inside a variables tab, arrow down and arrow up works just fine to navigate between the variables (I'm currently on windows, can't remember if it is the same on my Mac). &gt; Can't duplicate lines upwards in editor. Interesting. Can't think of a situation where I'd want that, though... :) &gt; Typing letters in project manager starts a search instead of jumping to relevant files in order. Correct. Don't like that as well. One of the reasons I don't use the project explorer that much. The navigation toolbar, CTRL+N for finding classes, CTRL+SHIFT+N for finding (non-Java) files and CTRL+E for recently used files, is what I mostly use to navigate between files. &gt; After "Collapsing all" in project manager it doesn't expand to the class when focusing the editor again (needs explicit "Scroll from source"). Again personal preference, I guess. I like the IDEA default of not scrolling to source automatically better, because I tend to switch between editors a lot (via recently used files). However, the behaviour is configurable (in both IDEs), as you mentioned... &gt; Jump to main toolbar from editor. Do you mean the toolbar with the Run, Debug, RUn Configurations, etc? I also have not found a way to get there with the keyboard. If you are talking about the navigtion bar, it is ALT+HOME (on Windows). Also all the actions in the main toolbar (along with every other action the IDE has to offer is available by pressing ALT+SHIFT+A (type "Run" afterwards for an example). &gt; Detaching views. This is just by default view mode (docked). There are also alternative modes like "Windowed" and "Floating". You find them under the gear icon in the respective views. &gt; [regarding file lookup] My experience is completely different with this. Often I also §don't want it to be "smart" because it isn't. The project is huge, it finds too many unrelated things. &gt; I use "Find in Path" a lot. I have not figured out how to pre-set multiple file masks. Comma-separated. &gt; How to search file names with "Find in Path"?, no I need to "Find resources" for that, but that doesn't offer all nifty "Find in Path" filters. You can use the file mask for that as well - you can even use wildcards in there ;) Example: Type Outer* into the file mask to find Outer.java, combine with any filter you like. &gt; Same with classes and packages and methods etc. Those are not aligned neatly. Not sure what you mean by that. &gt; [Overrides and Implementations] It occurred many times now that it said "No implementation found" eventhough there clearly are. Maybe it has something to do with synchronization. I have only experienced something vagly similar in one of my projects so far. Never between interfaces and their implementations - it always find's those just fine - but between an interface marked with @Inject and a "missing" CDI-Bean. That was due to an incorrect/incomplete Maven project setup, however, and easily fixed by providing the correct runtime dependencies. &gt; Examples: &gt; Eclipse :) Nice one. Although I am not sure I would want that for all of my Strings, in some brackets really don't have to match. Is this configurable? &gt; Eclipse vs. IntelliJ You can achieve something very similar by using the "Extend Selection" keyboard shortcut CTRL+W (CTRL+SHIFT+W to reduce selection) - notice a pattern her (keyboard vs mouse). It is also context aware and arguably works better because of it: In your example, it would first select "Arrays", then "Arrays.asList", then the whole thing. &gt; I need it for those that build slowly or are just not building at all in the IDE (odd case I know). I want to drop in and out really quick. Also how do you organize projects artifcially in IntelliJ similar to WorkingSets in Eclipse. Without the wacky "modules" setup. Thats really something I'm missing. Depends on the other tooling you are using. I mostly use Maven and if I feel the need to group them, I will create Maven submodules or just plain directories. IDEA can work with any given directory as the project root. If there are multiple Maven module trees inside, you can import all of them recursively in one go. They will retain the directory structure that they are in. I think this is a way more natural way to group projects compared to working sets. If I need even more flexibilty I combine that with Git submodules... I usually do not, however. &gt; I need them for formatting, organizing imports, set static, etc. I save a lot. E.g. after every statement :) and I like to see what I get immediately. Pre-commit actions are just not the same in that regard. The "Save actions" plugin does a good job though. Ok, I guess. I personally don't feel the need to organize imports or reformat the code after every change, but it is doable... IDEA saves automatically, by default, so you don't need CTRL+S to do that. Do CTRL+SHIFT+ALT+L once to configure what you want to do, then CTRL+AlT+L to reformat/reorganize/restructure later on. &gt; There are three kinds of settings related to JDKs &gt; I always jumble that up. IntelliJ sometimes just falls back to like JDK 7 after switching projects. Interesting. Never had that happening to me. &gt; [Maven integration] Actually IntelliJ also has build issues. I can refactor some code, save the file and it just doesn't build all relevant pieces. I think everything is fine, I commit and Jenkins reports build errors. The other way around sometimes red squiggly remain indicating build errors eventhough the class is fine. Also "Maven reimport" in IntelliJ is not the same as "Maven Update" in Eclipse. To be fair Eclipse infuriates me with odd builds and builds and builds ... (like indexing in IntelliJ) I agree that neither is perfect. My experience with IDEA has been miles better though. However, when it comes to Maven, really nothing beats NetBeans - because you know, it just uses Maven for building Maven projects, instead of trying to produce the same output with it's own build system, like the other two do. I still wonder how your experience can be so vastly different from my own and basically everybody else I worked with over the course of the last 5 years. They all switched to IDEA by now and (except for some die hard Eclipse RCP advocates) nobody has really looked back since.
&gt;Can i move out all auxiliary views to my other monitor? If you want to. Select the gear icon of the view and switch from Docked to Windowed or Floating mode. &gt;Ctrl-Shift-T in Eclipse, works fast. It does, in smallish code bases, with very limited library use. IDEA's CTRL+N might not be much faster in theses scenarios, but its performance stays more consistent when the code base grows. &gt;Considering that for these common names the list is often too large, i'll use wildcards when i need them, thanks. To each their own. I prefer finding stuff, when I only vagly remember the name of it. Is it "ListViewComposite" or "ListviewComposite"? I don't care I don't want to use a wildcard for such cases I just type "ListCompo" and 99% of the time IDEA gives me what I want in the first 5 search results. &gt;Ctrl-Shift-G gives you a standard search view with hierarchy of found references from which you can collapse/delete unnecessary items. Or you can Ctrl-H to specify search location. References in javadocs are found by this. Since what version? Maybe if you use {@link ClassName} in the JavaDoc? In the last couple of days I had to work with Eclipse (Eclipse RCP development) and it definitely did not find text references in JavaDoc.
Using `return` could cause issues if someone wanted to exit a method, and not a `switch` statement. The extended `break` syntax is like a local "return", though.
I just hope you are using it on tests that you don't consider to be unit tests 🙃 
You are welcome. To rest of what you wrote: Do what you want. You don't even know how to move things in IDEA, yet you state that Eclipse is the superior IDE and has better refactorings... come on.
&gt; I've yet to encounter this. And i have a workspace with hundreds of original Eclipse plugin projects that i open sometimes. &gt; After initial full build consequent builds are incremental and fast (obviously). Maybe it works well for Eclipse-specific things, I have been using Maven as a build tool for almost 10 years now. With a single maven module, it works fine. Anything more than 10 modules it falls apart. Especially, if you use non-standard Maven plugins, the write your own adapter architecture of the Eclipse Maven integration is a joke.
repost and still no primitive generics
key points from the book?
In java 13 can you just copy past groovy plz
From what I've seen on the mailing list, they're also considering to use a hyphenated keyword (such as `break-with`). The use of `break` may change in Java 13, as the switch expression is a preview feature.
For those who may not have seen, generics over primitives are coming. See [here](http://openjdk.java.net/jeps/218).
I just want my JavaFX packager back. 
People would be upvoting you if you had said Kotlin. But don't say Kotlin in 5 years, when there's an even newer fad! 
Much like you'd `break` from a loop.
No, a state is sogar to change during the runtime of your program. And state Plätzen is something very specific (and not the State class I described above). Your car object probably won't change its make or model after it has been created. 
...or a classic `switch` :)
Awesome attitude! Listen to this guy folks! And remember to give due credits.
They are always there, they never went away
It looks like in your [submission](https://www.reddit.com/r/java/comments/atf5js/intellij_for_java/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Well it got removed from the JDK to have its own release schedule.
&gt; However, it was removed from Oracle’s JDK 11 in connection with the removal of JavaFX. From the [JEP 343](http://openjdk.java.net/jeps/343) for the new packaging tool.
try to run with 11, then try to compile with 11 and run. you see what errors you get.
First check if all dependencies have been made compliant with Java 11. Run jdeps to check no internal APIs are being accessed. If you are using the CORBA or EE subset shipped with Java SE, they are now gone. You need Java EE for them. If you are using JavaFX, it is now available as OpenFX. Everything else, just compile and see how it goes.
Haven't used IMDG personally, but like your question very much and would love to hear others share their experience with IMDG-s. A few times I wanted to use Hazelcast for distributed locks, but ended up using the database for that. Actually, there are so many times where I ended up using database for what could have been the case for IMDG or other tech that requires your apps to be cluster-aware. Nevetheless, I read about use cases of IMDGs like GridGain (aka Apache Ignite) in telecom and banking. As I understood, one serious advantage they bring is that they can be integrated on top of existing applications to speed up the whole system, with write-behind to the RDBMS. Also, note the latest versions of Apache Ignite support transactions (which may semantically differ from DB transactions in detail) and persistence. I think we don't hear much about these technologies because they are only useful at certain scale, which your average system might not have/need. Moreover, I think that there are easier solutions to some of the problems that IMDGs may solve. Here are some examples. Distributed HTTP session - would you use Redis or Apache Geode? Messaging - RabbitMQ or Hazelcast? Then there was time I wanted to use Hazecast for distributed scheduled tasks, but I found its solution a bit limited at the time and ended up with Quartz. This all makes IMDG quite a specific piece of tech.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I had an interesting bug due to differences in the jaxb implementations. 
you don't need to add the entire EE stack. pick only the necessary dependencies and add them to your pom.xml/build.gradle. the removed modules are listed here http://openjdk.java.net/jeps/320 
In fact, as long as the canonical storage of an entity is in an external database, I'd go as far as saying you never have entities in Java, you only have snapshot in a past moment in time as a data object.
Well, one category I was tempted to use it on was what I'd call function/conformance tests (I'd consider google collection test suites to fall into this category, for example), where I define a test suite that any implementation of an interface\* should meet (and usually extends with cases or end-of-test operations that only apply to a specific (subclass of) implementations\*\*). As actual implementations often implies some form of database/external component, it's not really unit test, even though in the project it is defined, it is usually used, pure UT style, to validate some dummy implementation used for other tests. \*: actually not necessarily an interface... we have such test suite to validate business level components based on their functional scope too. \*\* e.g. if backed per a persistence, validate state after closing/reopening it.
When do you think that will be released? 
Missed opportunity to use `goto` reserved keyword ;)
Contributors to this open source Java project is welcome!
Well I had this experience in past. Not with Apache Geode but with Gridgain's product (a.k.a Apache Ignite). We successfully put our service into production. It was based upon Lightbend's Akka and Ignite. It's quite good in questions of distributed caching because of it's simplicity. You just need to add some dependencies to your project, start cache and deploy your service on multiple nodes - and voila, you have a production-ready cluster. But when it comes to work with affinity distributing, serializing and so on - it becomes very easy to get an unexpected exception. For example, in the past Ignite has problem: slow client could crush your entirely cluster (with all your server nodes). Also there are lot of problems under heavy loads. So I can say this framework is quite good but is not mature yet. And it's certainly not a replace to traditional relational databases as Postgres etc. (at least at this moment). I also would not recommend use Ignite just to get cluster of services (just because it's too complex and it has many other components). So as @Infelligo mentioned: &gt;IMDG quite a specific piece of tech
Mmm as of right now, you will find split packages, you can migrate, but don't follow that advise of using the modules.java most surely you wont be able to untill all your dependencies have also been migrated
Ryan's dad
I wonder how more recent versions of Graal compare with V8. Last I heard, it was twice as [slow](http://blog.nidi.guru/tech/javascript/2018/04/02/javascript-benchmarks/)
This just feels like a solution to a problem you wouldn't have if you stopped trying to map classes to database tables :) If you use JDO/JPA, be *well aware* of the pros and cons. 
&gt;In general you want to decrease the cognitive load as much as possible, so you want something simple enough to make it easy to think and reason about. That is a valid point. :) So my dilemma becomes, which is the lesser evil (cognitive load) here. Learning Hibernate in full for this project (and future of course) and hoping I have the initial foundations grasped at least for this project. Or spend possibly more/same/less time going the JDBC route. Kinda a balancing act.
Static is bad in various aspects. One example is, static is often variable (the others in this thread had suggested that static should be final), then how about a static is modified by two independent modules? And even worse, how about it's modified from different threads? &gt;&gt; it's more efficient to have static variables since there's only one copy of it It's wrong. For any non-static variables, you can always have only one copy but you can have many references to it. 
Does anyone with experience with both have a comparison between this and [lanterna](https://github.com/mabe02/lanterna) ?
That sounds like an appropriate use case. In my experience both at places I have worked, and in discussions I have had in this subreddit, there is a lot of confusion around automated testing practices. In the user docs the [junit team also call out](https://junit.org/junit5/docs/snapshot/user-guide/index.html#writing-tests-test-execution-order) that unit tests shouldn't rely upon execution order, but functional tests and integration test might depend upon it. Mostly just trying to emphasize for anyone who might be reading, that if you are ordering tests you consider to be unit tests, you are doing something wrong. 
I'd love to try, but I cannot figure out how to find or run those graphviz benchmarks. 
&gt; In theory, moving from 11.0.1 to 11.0.2 should not introduce any compatibility issues but that is not guaranteed. A security patch in 8u202/11.0.2 [just "broke" Clojure](https://cl4es.github.io/2019/02/21/Cljinit-Woes.html). I think people greatly overestimate the difference between update releases and the new feature releases, but time will tell. I also think much of the reason is psychological, and due to feature releases getting a new version number, like the old major releases (there's also the matter of class file versions, but how much of an issue it is in practice is also too soon to say).
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
 &gt; . E.g. test resources with the same path in multiple projects (modules in intelliJ) will get mixed up when running unit tests from the IDE. &gt; &gt; E.g. Module A has tests that load a file from \`/src/test/resurces/input.txt\` and Module B has tests that load a file from it's own \`/src/test/resurces/input.txt\` &gt; &gt; IntelliJ may pick up the wrong one and your unit tests will fail. Interestingly, it may use the wrong file if you run the test method but not if you run an entire test class. This only happens when the module configuration is incorrect. I've had this happen to me when I had IntelliJ import Eclipse projects. The importer would explicitly configure all modules to use the same compiler output paths, thereby causing the issue you described. Changing the module's output paths to use a different one per module (I. E. Just use the default without any explicit setting) fixes that. I don't know about the second thing you mentioned as I've never run into that situation, but the first one is just a misconfigruation.
\&gt; Which is obtained and downloaded from:[https://www.java.com/en/download/](https://www.java.com/en/download/) &amp;#x200B; No. &amp;#x200B; Where to download Java from . . . &amp;#x200B; &amp;#x200B; Adopt Open JDK [https://adoptopenjdk.net/](https://adoptopenjdk.net/) [https://github.com/AdoptOpenJDK](https://github.com/AdoptOpenJDK) &amp;#x200B; [https://github.com/ojdkbuild/ojdkbuild](https://github.com/ojdkbuild/ojdkbuild) &amp;#x200B; Open JDK [http://openjdk.java.net/](http://openjdk.java.net/) &amp;#x200B; Azul Systems Zulu [http://www.azul.com/downloads/zulu/](http://www.azul.com/downloads/zulu/) &amp;#x200B; Amazon [https://aws.amazon.com/fr/corretto/](https://aws.amazon.com/fr/corretto/) [https://github.com/corretto](https://github.com/corretto) &amp;#x200B; Red Hat [https://developers.redhat.com/products/openjdk/download/](https://developers.redhat.com/products/openjdk/download/) [https://access.redhat.com/articles/1299013](https://access.redhat.com/articles/1299013) &amp;#x200B; SAP [https://github.com/SAP/SapMachine](https://github.com/SAP/SapMachine) &amp;#x200B; BellSoft [https://bell-sw.com/java.html](https://bell-sw.com/java.html) &amp;#x200B; &amp;#x200B; Oracle JDK [https://jdk.java.net/11/](https://jdk.java.net/11/) Oracle Binary License Agreement - DANGER Will Robinson! [http://java.oracle.com/](http://java.oracle.com/) &amp;#x200B; &amp;#x200B;
Brian Goetz promises to start shipping them in [next year/year and a half](https://youtu.be/xc6eKUB-dzk?t=2730). 
The current plan is for specialized generics to come in L-World 100. We are currently in [L-World 1](https://wiki.openjdk.java.net/display/valhalla/L-World+Value+Types).
As for evaluating expressions, just use alt-mouse hover, and click when the underline matches what you want, that's often the quickest way to evaluate a random expression. Not that I need it often, since the debugger shows most things inline which AFAIK Eclipse doesn't do yet. I've never experienced the many issues you described above and I've reported over a hundred issues in IntelliJ's bug tracker :) As for hot reload: do you actually recompile the code in IntelliJ?
What kind of refactoring have you been missing in IntelliJ so far? One cool thing that you can do in IntelliJ to transform your code is structural search and replace, you can even use them as custom quick fixes. It can often help you to do many menial code changes across an entire code base when it's not just "add parameter" or help you spot bugs when code may compile but you know that kind of call will never succeed/have problems.
The formatting control looks rather powerful and fine grained. Cool!
&gt; Generics just for no reason. Can you make an example for this?
I didn't say **the** superior IDE, but **a** superior IDE (in many ways. There's no absolute. And I do not need to know every feature of both IDEs to form an idea about their governing philosophies. They are different; IntelliJ is pragmatic while Eclipse is ambitious. IntelliJ's quality of execution is better because it is a paid product. Had the same resources been thrown at Eclipse, who knows where we'd be now?
My team has got you covered. We use a a wrapper around a plain Map instead with cool accessory functions like getString or getDate instead. Everywhere. Oh, and it's a four letter class name, so it's quicker to type than Map&lt;String,? &gt;, too. And to make passing state between methods easier, many objects have one of these as a member, now you can just setString in one method and do getString somewhere completely different, no matter the code path. How's that for convenient?
So we are looking at 2020/2021. 
Well, you need to be using synchronized (LockSingleton.INSTANCE) obviously.
I believe the deployment story could be improved a bit: Right now it's necessary for application developers to alter their build and deployment processes so that the \`--upgrade-module-path\` is set up correctly to reap the performance benefits. I think that most developers would just go the route of least resistance and add the graal.js jars to their \`pom.xml\`, eating the performance penalty for running it in interpreted mode. It would be really awesome if the Graal compiler could be added to the module path as a regular Maven dependency and then be used by the platform automatically (if \`-XX:+UnlockExperimentalVMOptions\` and \`-XX:+EnableJVMCI\` are set). For such a fundamental component, that's probably harder than just using \`ServiceLoader\` though. Are there any plans to make this easier to set up?
The easy way would be to use the GraalVM binaries where Graal compiler is enabled by default. This would not require any changes to the application code. But I understand that sometimes this might not be an option. OpenJDK JDK includes a version of the Graal compiler, it's just not the latest and greatest and doesn't have the necessary things yet for the JavaScript engine. However, when a newer version of OpenJDK JDK will include the newer version of the Graal compiler, which includes necessary things already, then I believe you would only need to set `-XX:+UnlockExperimentalVMOptions` and `-XX:+EnableJVMCI`. 
Awesome, that's exactly what I wanted to know! :)
The famous Garbage Collection versus Malloc / Free topic came up. And he addressed it well. And the GC topic has been debated to death. But there is one thing I have observed that I have not seen anyone ever talk about is this. In an environment where you don't have GC, you end up with different libraries having different memory management disciplines. And sometimes even their own allocation / deallocation routines. With GC, you have one and only one memory management discipline across all libraries, written by all authors. Because of interfaces, it may be the case that objects (obeying an interface) might be created by one library, but used by other libraries -- because there is only one memory management discipline, specifically GC. &amp;#x200B;
I can highly recommend checking out owasp. [Transactions/Authorization](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Transaction_Authorization_Cheat_Sheet.md)
&gt; Also it has more Java refactoring options than IntelliJ, ... That's literally what you wrote in your initial post. That's a statement of fact, that in my opinion you are not qualified to make. You provided the proof in your first post: Moving stuff is not equatable to knowing every feature an IDE has to offer, it is one of the most basic things you can do in any IDE. That is the only reason why I responded in the first place. Not because I want to convert people to IDEA, I don't gain anything from that. Not to get into the whole resources thing, too much. IBM was behind Eclipse for the early years and as far as I know they still partially are, along with other huge companies like RedHat, Oracle, SAP, Bosch, etc. Compare that with who is behind IDEA... you won't find a lot outside of JetBrains, a relatively small company from the Czech Republic. Just because one thing is free (as in beer) and open source and another is closed source and paid for, does not necessarily mean that the later has more resources to work with.
Here's a reasonable checklist: http://karols.github.io/blog/2018/09/20/getting-java-8-app-run-java-11/
&gt;twice as slow V8 is [twice as slow](https://dev.to/pmlopes/javascript-on-graalvm-120f), yes?
thanks, as someone who works a lot with SOAP I appreciate your contribution! :)
this interview (and others from james gosling) was great. He doesn't even shy away from the oracle / google debate and addresses it as would most engineers I suppose. &amp;#x200B;
I would be happily surprised if anyone is able to answer. Jexer's userbase is quite tiny, its first Maven release was yesterday. (Though I certainly appreciate those who have checked it out and reported bugs.) I can answer some of the design differences that prompted me to continue working on Jexer even after I saw Lanterna: * Lanterna appears to want to be a lot like AWT/Swing, with text equivalents to GridBagLayout, JPanel, BorderLayout, and so on. I OTOH wanted something that was as simple to get running as possible: spin me up TApplication, add menus and windows, and away I go. So TApplication is an unapologetic god class that knows all of the corner cases needed to handle menus, windows, switching threads for modal message boxes, etc. * I wanted Jexer from the get-go to be able to [run inside itself.](https://gitlab.com/klamonte/jexer/raw/master/screenshots/yodawg.png?raw=true) So now I have a terminal multiplexer that could evolve into a dvtm, tmux, or screen. This came in quite handy when I want to add [external text editor support](https://gitlab.com/klamonte/tjide/blob/master/java/src/tjide/ui/ExternalEditorWindow.java) to another project I am working on. * I wanted the full Turbo Vision experience right out of the box: moving mouse cursor, animated buttons, draggable windows, menu bar, clickable status bar buttons, common theme support, all of it. Jexer demands a lot from its terminal when not running the Swing backend (I develop it against xterm), but it is really cool to see. I haven't been advertising Jexer for the last couple years because I needed to work on a [real application](https://tjide.sourceforge.io) that could shake out its bugs. But now that project is going forward OK, and it has helped me get Jexer to the point that I feel it worth mentioning to others. 
There's not much in the way of upgrade issues. Moved 5 code bases to J11 runtime with no issues, only had to bring in JAXB reference and impls. for one all tests still passed. IntelliJ highlighted some chances to use new/cleaner APIs but there won't ever be anything as big bang as moving from J5/6 to 8.
Well that was awfully specific and inscrutable to the unfamiliar. Also we have ISBN #s precisely because of a need for unique identifiers.
Yes, he doesn’t BS and is very honest about his thoughts.
Right now I'm struggling with this issue: [https://github.com/spotbugs/spotbugs/issues/259](https://github.com/spotbugs/spotbugs/issues/259) Not sure how to go about it though. 
Thanks for this, will be useful :)
It caught my attention that you mentioned a browser. That means that you require applet support, which is discontinued. My understanding is that you will not be getting easy support for applets except from Oracle. Still, it seems to me that you are not developing anything with java, so you should be fine just downloading a JRE from Oracle. Please someone correct me if I am wrong, but my understanding is that the licensing changes are a problem if you are using the jdk. There was a project called icedtea that tried to deal with applets support, not sure of it is still active.
Welcome to 2003
Applets are definitely the bigger problem in this situation. All modern browsers have killed it so you're already holding back security updates. If you don't care about your browser security then you should not care about Java updates either tbh. You need to hit your vendors with this question. How are they going to provide you service without relying on outdated and insecure software? (spoilers: they won't, unless they have good competition) 
Why the terrible implementation of `Equals(..)` and `HashCode(..)` when you can use `@EqualsAndHashCode(onlyExplicitlyIncluded = true)` and then `@EqualsAndHashCode.Include` on the `ID` field? This will confuse a lot of people. Same goes with `ToString(..)` why recommend to Exclude the fields instead of Include the ones you want to display? Excluding is dangerous if the Entity is later modified.
ORMs do work well when they are correctly used. The issue is many developers do not use them correctly.
@ /u/kevinlamonte can you fix the example? Your main method has this: } catch (Throwable t) { t.printStackTrace(); } This is exceedingly crappy handling. Just have main declared as 'throws Exception'. By just printing the stack trace, you're omitting the class, the message, the causal chain, and supporessed exceptions. The code is also longer, and far less readable. Lose-lose. 
We can't all be writing microservices in node.js running in Docker.
Hi guys, I know that JavaFX package was not bundled in JDK11 and on. I am just joking that even though it was removed from JDK, but it was still "there" or somewhere, you can always get it if you want - and still very easy.
I'm talking about a specific part of JavaFX. The JavaFX packaging tool is what lets me easily create native packages of my applications for Windows, Linux, etc and it was removed from OpenJfx 11.
If many developers don't use them correctly, maybe the issue is with ORMs and not with the developers ;)
&gt; can you fix the example? Done. &gt; By just printing the stack trace, you're omitting the class, the message, the causal chain, and supporessed exceptions. The code is also longer, and far less readable. Lose-lose. That was a vestige from my dinosaur days in Java 1.2 - 1.3, where failing to catch an exception or error in a thread resulted in the exception's getMessage() to be printed to stderr but no stack trace. (This also pre-dates exceptions having chained causes.) There are 37 other instances in the codebase of printStackTrace(). 3 of them are used by TExceptionDialog to provide an error report. The remaining ones are scenarios where I do not have the ability to surface TExceptionDialog or have a good deterministic response to. Any recommendations? 
For simple applications ORMs are overkill. 
I think its a good idea on some microservice apps with simple data models. I think its less about size and more about the complexity of your model. You might have hundreds of tables, but if they don't mingle much then ORM is fine. If every table has a ton of FKs then good luck.
 I can see JPA for poeple who have no clue of SQL being good, thats why I think in simple applications. In Big applications you need to know at the very list basic queries... So what would be for you a good use case? &amp;#x200B;
Exactly what I thought! &amp;#x200B; To me the problem is more than the FK is more "let's make a left join that tomorrow may not be needed anymore". The boilerplate needed to be done/removed seems unfisable to me &amp;#x200B; I'm just talking about 2 tables and it already has soo many implications that I can not understand how poeple use it on "let's join 20 tables using an ORM tool" &amp;#x200B; Now since spring boot, everyone uses JPA or something around those lines, is that reliable ?
For more complicated applications, ORMs are inadequate at best, and hobbling at worst.
If you have no clue about SQL, then you have no business using a relational database. Go learn SQL.
If you need to abstract your data layer and it that need outweighs the cost, then yes.
I'm more than well on SQL (PL/SQL that is...), what i'm trying to say is: IF not for poeple that know 0 of SQL/ simple CRUD operations ,why the hell major applications use it? For sure the managers have a brain in major coorporations (right ? ). There must be a good reason for "UML based programming" being used
I didn't understand his point about the missing unsigned types. Isn't signed arithmetic less defined than unsigned arithmetic in C, not the other way around?
OAuth 2.0 might be an option, they have plenty of auth types and flows detailed and standartaized. https://tools.ietf.org/html/rfc6749 You can check here if any type of authentication proposed will work for you. There are also implementations of both server and client sides available. 
Well that's what I would like to understand, why would I/ anyone need an abstract data layer? Sure you can have 2/3/4 diferent databases (and I don't see why use diferent dbs other than sql/no-sql) but when you start a project you should have 0 and external db's can be consumed as JSONs or whatever...
Batching queries, caching, no boilerplate, database-independent, transaction handled internally, less often catching sql exceptions in code, annotation based field validation, connection pooling, versioning and some more I believe. This is a framework you know, it should help you develop faster and let you focus on business logic more than persisting info to db. As always there are pros and cons but even for little apps, it is a relief from some boilerplate, like crud implementation. 
With the rise of micro services and SOAs in general I don’t see them as useful as they once were. Everything’s a trade off so ultimately you’d just have to weigh the pros and cons. 
I'll start with JPA and if I hit a performance problem I'll look into using jdbc. Haven't really had to use jdbc yet, jpa typically works for my use case . With spring jpa I barely have to write anything. Why would I want to write all the SQL for so many simple tasks?
It's pretty simple to use an ORM though.
https://martinfowler.com/bliki/OrmHate.html
Over engineering something, thinking it's a library/framework level idea
There's certainly a reason, but why do you think it needs to be a good one? There is a lot of cargo culture in professional software development. Many people do things because others told them it's the right way to do them. 
Second best reason: Great for building a quick Minimal Viable Product. Don't have to switch context and think of SQL when typing code as fast as you can to build your MVP. The best reason that I can think of and experience at my job is that you don't have to use ORM all of the time. We use Spring Data, so we use Spring Data JPA with Hibernate as the implementation. We also use Spring Data using native queries. We also use jOOQ. Our database has over 500 tables with hundreds of FKs so to us it's okay to take advantage of the best parts of all of these great technologies. Need a complex SQL query with lots of joins that brings back fields from different tables? Spring Data can return a Map or a List&lt;Map&gt; of results instead of making multiple database calls just to return different entities. Need to do a simple look up to get one field back? JPQL to the rescue, or native query. We use IntelliJ, so it provides formatting for both. Does your entity only have a few fields with no foreign keys? Use JPA methods for fetching and saving. Need SQL that's more dynamic (varying fields, tables) and framework-y? jOOQ is perfect for this! Who says you have to use just one thing?
The only real reason to use an ORM is if you were selling a product that needed to be installed on the clients servers and use whatever database they were running. If your need your app to run on oracle, or mysql, or postgres, or whatever they might be using, that's the problem an orm would solve.
Most of these are a problem more often than they're a feature. "Caching" for example, in most ORMs, is realized in a way that either is inconsistent with the database, or uses optimistic locking for updates, which perform terribly if you have a decent volume of writes (as in, more than once in a blue moon).
&gt; For simple applications ORMs are overkill. And for complex applications ORMs are underkill.
It's pretty simple to use it, if you don't mind data corruption and bad performance. If you do mind them, it becomes very complicated.
Especially when so much big industry and healthcare run on things like HL7. This is the kind of project that isn't glamourous enough to attract that kind of hipster development and that's a good thing. If I end up using this for work then I may be able to sneak in a few bug fixes or features and submit a pr though. 
Just so you are all aware: surefire cannot display the test names if you're using @DisplayName &amp; co. There is a ticket which appears to be fixed and targeted for 3.0.0-M4 but I don't know when it will be released. 3.0.0-M3 is the latest atm. Since Jenkins and other tools rely on surefire report, you won't be seeing pretty test names for now.
It sure lets you be lazy. I find general lack of discipline turns this against organizations. with the DB so abstracted away people stop making good decisions about code structure. if you are working alone in a code base it is not a big deal. &amp;#x200B; i must say, troubleshooting ORM in production really sucks. I will trade DAYS writing boilerplate JDBC to avoid hours of troubleshooting hibernate in prod.
Hah. Thinking ISBNs are unique. :D
You know you can run native queries with JPA? You don't have to pick one or the other.
I struggled getting [jaxb2-maven-plugin](https://github.com/mojohaus/jaxb2-maven-plugin) running correctly on Java 11 (because of an upstream error), but the alternative [maven-jaxb2-plugin](https://github.com/highsource/maven-jaxb2-plugin) had addressed those hiccups and worked fine. Finding the right JAXB dependencies and Maven coordinates was a bit of a pain because of some well-meaning but ultimately incorrect Internet advice. Unfortunately I don't have access to the precise setup now, but from memory, [Eclipse's new JEE coordinates](https://wiki.eclipse.org/New_Maven_Coordinates) is not _entirely_ sufficient.
**Subreddit rules!** No programming help questions here! These should be posted in /r/javahelp
It looks like in your [submission](https://www.reddit.com/r/java/comments/attr5u/are_lworld_value_types_from_project_valhalla/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
All right, thanks, I will check both of those out.
Yes, it seems to be removed. :( Unfortunately, for now I can't find Java 12 Javadoc anywhere...
I wrote a post about the changes since Java 8, based on the JEP's that happened since then. Here is the section about deprecation and removal: [https://advancedweb.hu/2019/02/19/post\_java\_8/#deprecation-and-removal](https://advancedweb.hu/2019/02/19/post_java_8/#deprecation-and-removal)
Never
For something truly light-weight and worthy of quick prototypes: https://github.com/javalite/activejdbc I've been maintaining software for close to 19 years that uses JDO and it is very painful. Don't ever go that way. Decide if you want to embrace SQL or not. Then decide if you want to embrace a certain database (like PostgreSQL). Then use that database to its full potential. 
It all depends on your configuration, as always you can't just let the default dogs out, problems with ORM features just mean you need to practice it more. Yes we don't need hibernate for cp but it provides nice and easy interface to configure that must have thing. Going your logic we don't need anything, we can reinvent the wheel everytime, we can step back to cave times. It is good to have knowledge and skills to solve problems on your own without the help of frameworks, but if you already know how to do it, you know this is replicable problem in every app, that is why hibernate is built on top of JPA and provides abstraction layer which simplifies problem.
I was working on a 'micro'-service that had its own weird self-implemented oauth authorization scheme from a previous developer that was just ugly (while still using @RestController for the API... idk why), so when writing a new ReST Controller I wanted to instead use @PreAuthorization for this single API. For this I configured (or thought I did) Spring Security to only authenticate this one controller and leave the others unsecured (since they were secured by the self implemented stuff). This for some reason didnt work and I received back 401 status codes when trying to access the APIs that were supposed to be unprotected by Spring Security (with spring security disabled those worked as expected). I spend a 1-2 hours trying to see what I configured wrongly bug debugging through this was a nightmare.. didnt even find the solution in the end. Another time a Bean didnt get initialised correctly without the stacktracing helping much in the bug search. It doesnt happen often but on occation something goes wrong (due to ones own fault most likely), but the exceptions fly somewhere deep in spring code.
It all depends on your configuration, as always you can't just let the default dogs out, problems with ORM features just mean you need to practice it more. Yes we don't need hibernate for cp but it provides nice and easy interface to configure that must have thing. Going your logic we don't need anything, we can reinvent the wheel everytime, we can step back to cave times. It is good to have knowledge and skills to solve problems on your own without the help of frameworks, but if you already know how to do it, you know this is replicable problem in every app, that is why hibernate is built on top of JPA and provides abstraction layer which simplifies problem.
&gt; Going your logic we don't need anything That wasn't my logic at all. ORM as implemented by Hibernate is more trouble than it's worth. There's a fundamental issue with how they chose to address the issue, namely the choice to pretend as if the entities you work with are in Java and not in a remote DB. The "data mapper" concept makes no such assumption, which is why most ORMs that call themselves data mappers are nothing but. A data mapper simply transforms outgoing data commands and incoming data reads without making assumption they're holding the canonical state. It lets the remote write model resolve those issues.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Since you are asking on this subreddit, ORM is pretty much synonymous with Hibernate, which is not necessarily the best possible implementation of the idea of ORM. Nonetheless, it has many good features, most of which can be misused: &amp;nbsp; 1. It's in the name, duh: you put some annotations on a Java class and the ORM will handle writing/reading instances of it to DB tables. You don't have to write that mapping code. &amp;nbsp; 2. Lazy-loading is great when you need different properties/associations of an entity in different contexts. This way you don't have to write code fetching a different representations of it and you only fetch them when needed. However, there are many ways to misuse it: &amp;nbsp; The application has a call that retrieves a large amount of instances of this entity and in the process lazy-loads a collection association and then lazy-loads more for each element of each collection. Instead of a single DB query, tens of thousands are executed, resulting in horrible performance. Good solution: you write a use case specific repository method where you do fetch joins to retrieve everything in one query. Bad solution: blame the performance problem on some intrinsic property of ORM. &amp;nbsp; In combination with entity polymorphism (by that I mean an @Entity B extending an @Entity A and not a @MappedSuperclass) lazy-loading an A association that is actually a B will result in an instance a runtime-generated subclass of A that is not a B. If you do instanceof checks you are going to have a bad time. &amp;nbsp; If you (fetch) join a 1:n association in a query, you will get the same entity instance n times in your query result, just like you would with plain SQL without DISTINCT. You need to be aware of this, especially when adding the join to an exiting query and/or using pagination. &amp;nbsp; 3. The Session/PersistenceContext cache + dirty-checking ensures there is only one instance of an entity during a transaction. If you fetch the entity by id multiple times in a TX, you won't unnecessarily hit query DB. You also won't execute an SQL UPDATE unless you really change the entity's state. I think this has its greatest utility in tests: @Before public void setup() { employee = new EmployeeHbm( //... employee.setSalary(100_000, "EUR"); } @Test public void shouldChangeSalary() { // given regular employee // when employeeService.changeSalary(employee.getId(), 50_000, "EUR"); // then // the instance we created in the setup is the only one, it will get updated assertThat(employee.getSalary().getAmount(), is(50_000)); } @Test public void shouldNotAllowLowSalaryForManagement() { // given employee.setManager(true); // when try{ employeeService.changeSalary(employee.getId(), 50_000, "EUR"); } // then catch (ValidationException e){ assertThat(e.getMessage(), is("Manager salaries must be at least one million dollars")); assertThat(employee.getSalary().getAmount(), is(50_000)); } } It is important to understand this, the state transitions an entity can have and what the various EntityManager/Session methods do. I have seen code littered with clear() and flush() calls introduced as acts of desperation by developers who didn't fully understand what the ORM was doing. &amp;nbsp; It can also be dangerous use ORM entity classes outside your transaction (e.g. in the view/ web service layer) as you will get exceptions when attempting to lazy-load or write outdated entity states to your DB. Beware the OpenSessionInViewFilter antipattern. You can ensure that your enties are always fully initialized but I would recommend not using entity classes outside transaction borders. Map between EmployeeHbm &lt;-&gt; Employee (or some use case specific POJO) &lt;-&gt; various REST/SOAP/UI representations of the entity. &amp;nbsp; 4. Hibernate can also generate and execute table creation scripts for you. You e.g. only execute them when bootstrapping Hibernate while running on an in-memory DB in tests, allowing you develop new entities/properties in your trunk without them landing in any durable DB. &amp;nbsp; In conclusion, my opinion is that Hibernate has a steep learning curve and there are few ways to learn how to handle difficult situations beyond learning from your mistakes. A better ORM could have fewer pitfalls. I would not recommend using it without having someone experienced in your team, but it definitively can increase your productivity. 
&gt;Who says you have to use just one thing? Sometimes it's people or groups higher up on the corporate food chain unfortunately. &amp;#x200B;
So if you don’t have that problem what would you recommend to use? Pure JDBC? 
We cut cost on reproduction of issue by working with original failure. &amp;#x200B; As long it isn't visible for users it is fine. Close ports, make VM/container snapshot, etc &amp;#x200B; Why do you spend engineer time on reproduction? Why do you pay for writing breaking test? For purity of engineering?
&gt;AppDynamics What about FlightRecorder? Oracle open-sourced it in Java 11. Along with Java Mission Control. Now they are free forever )) AppDynamics official site is blocked by backed Amazon servers for my country, I can only wonder what it is... ((
&gt; Who says you have to use just one thing? The hibernate session cache.
Oof, that is rough. Are you mandated to just use Hibernate or native queries?
Yeah, we do have to flush changes, refresh entities, and clear the entityManager at times, but then we're good.
&gt; Good solution: you write a use case specific repository method where you do fetch joins to retrieve everything in one query. Hibernate has no support for supporting both lazy loading and eager loading of n:1 relations. If you use bytecode instrumentation, then there is no support for eager loading. Otherwise there is no support for lazy loading. The bytecode instrumentation behavior might be a bug (or not) but it's certainly the behavior as of 5.1.2. Imagine not having correct support for n:1 at version 5.1.2. This is the kind of quality you opt into when you choose hibernate.
Sure sounds inefficient. If you don't care about efficiency then there are probably few reasons to perform non-hibernate writes. Stored procedures being one of them. In any case, having to remember to flush hibernate before performing non-hibernate writes is a nice source of subtle bugs.
I'd specifically use Spring Jdbc Template, or Jdbi. They're both like what jdbc should be, just put in your sql and go.
We mostly do flushing/refreshing/clearing when we have to stand up entities for our integration tests. &gt; Sure sounds inefficient. If you don't care about efficiency... We have not encountered performance issues in production with this approach. There are a few places we do flush after performing non-Hibernate writes in production code. Integration tests catch forgetting to flush after a non-Hibernate write, and if they don't, the code reviews do!
&gt; object-relational mapping is the Vietnam of Computer Science. Lol. Excellent article, thanks for sharing.
You can both eager and lazy fetch manyToOne relationships at least in hibernate 4. You can not force an eager relationship to be lazy, but you can force a lazy relationship to be eager. A big problem with hibernate performance comes from the default behavior of eager fetching manyToOne relationships as that pulls in way too many joins in a highly normalized database. Making the rarely used relationships lazy can speed up performance considerably.
SQL is simple too. If you can go through the effort of learning an ORM, you can spend the same time learning SQL and not add the ORM bloat to your application.
Good use cases: “None”.
Non-intersecting Venn diagram....
&gt; There are a few places we do flush after performing non-Hibernate writes in production code. Do your code reviews also make sure that no code modified the affected hibernate entities? If so, how? Do you simply remove the setters of those entities? If so then that cripples the case where modifying the entity is already the most efficient operation. If you don't make sure, then clearly what you wrote is wrong because you have to flush *before* performing the non-hibernate write. How do you deal with constraints? What if the cache is not in a flushable state at the point at which you perform the non-hibernate write because some database constraints are not yet satisfied?
&gt; You can both eager and lazy fetch manyToOne relationships at least in hibernate 4. This is not the case without bytecode instrumentation so I assume you're talking about using bytecode instrumentation. &gt;but you can force a lazy relationship to be eager. This is not the case if you're using bytecode instrumentation at least in 5.1.2. If you tell hibernate to fetch the field eagerly, it will perform a second select.
 Because hibernate generates absolutely horrible SQL that doesn’t perform well. Also, for read-only queries you don’t want to let hibernate query entities, you want to write HQL/JPQL for those anyway and return the columns you need.
A SQL helper library, this lists some options: https://stackoverflow.com/questions/7137929/lightweight-jdbc-helper-library-alternative-to-apache-commons-dbutils
If you are talking about an ORM and java you are pretty much talking about Hibernate. The problem with hibernate is it is more than an ORM. It also wants to be a SQL generator. It is great at ORM (converting a resultset to an object), but is absolutely awful at SQL generation for queries.
Can you not just do native queries through Spring Data JPA?
You can tell hibernate to eagerly fetch mappings using JPQL. That way you can lazy load by default and be eager when you need to.
ORMs require more SQL knowledge, not less. :) Sadly many people don't realise this and that's why they have a bad reputation.
If hibernate is generating bad SQL that is your fault. Fix your mappings, write JPQL or write SQL. Hibernate is only as good as the input you give it.
Hibernate does not support lazy loading of 1:1 without bytecode enhancement. Hibernate with bytecode enhancement does not allow eager fetching of lazy 1:1 without a second select.
I use hibernate with an in-depth memory DB (hsqldb) For performing automated tests before deploying builds to a full test environment. Could there be incompatibilities between engines? Sure, but we haven't come across one yet and allows for tests to be run without external services.
I am talking about basic proxy relationships with hibernate. You can override the fetch strategy with specific queries to load the entity into the session. I tried bytecode enhancements before and it was too confusing and restrictive. It is better to work around the problems they try to solve.
But CQRS is, more often than not, a poor fit due to the added complexity... So you can either accept the complexity of "bi-directional" mapping between database and entities or you accept the complexity of CQRS. Your choice of ORM shouldn't be the reason to choose one over the other. However, having decided against CQRS, and ORM makes sense, more often than not.
They have a bad reputation because there's a distinct mismatch in concepts between object-oriented principles and relational database principles. You have to cripple one of those paradigms to make the other work. If you care about maintainability, you cripple the relational model. If you care about performance, you cripple the object-oriented model. You're better off keeping the two ideas in two separate spaces.
I could not reproduce your issue: @Entity class Department { @Id String id; String name; } @Entity class Employee { @Id String id; String name; @ManyToOne Department department; } @Test public void test(){ final Department department = new Department(); department.id = "departmentId"; department.name = "department"; em.persist(department); final Employee employee = new Employee(); employee.id = "employeeId"; employee.name = "employee"; employee.department = department; em.persist(employee); em.flush(); em.clear(); System.out.println("loading employee"); final Employee reloadedEmployee = em.find(Employee.class, "employeeId"); Assert.assertThat(reloadedEmployee.department.name, Matchers.is("department")); } And here is the output. It is the same whether I run it with or without bytecode enhancement: $ mvn clean test [INFO] Scanning for projects... [INFO] [INFO] ------------------------------------------------------------------------ [INFO] Building reddit-eager-loading 1.0.0-SNAPSHOT [INFO] ------------------------------------------------------------------------ [WARNING] The POM for com.sun.xml.bind:jaxb-impl:jar:2.2.11 is invalid, transitive dependencies (if any) will not be available, enable debug logging for more details [INFO] [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ reddit-eager-loading --- [INFO] Deleting C:\Users\bernd\workspaces\own\reddit-eager-loading\target [INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ reddit-eager-loading --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory C:\Users\bernd\workspaces\own\reddit-eager-loading\src\main\resources [INFO] [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ reddit-eager-loading --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 3 source files to C:\Users\bernd\workspaces\own\reddit-eager-loading\target\classes [INFO] [INFO] &gt;&gt;&gt; hibernate-enhance-maven-plugin:5.1.2.Final:enhance (hibernate-bytecode-enhancement) &gt; compile @ reddit-eager-loading &gt;&gt;&gt; [INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ reddit-eager-loading --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory C:\Users\bernd\workspaces\own\reddit-eager-loading\src\main\resources [INFO] [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ reddit-eager-loading --- [INFO] Nothing to compile - all classes are up to date [INFO] [INFO] &lt;&lt;&lt; hibernate-enhance-maven-plugin:5.1.2.Final:enhance (hibernate-bytecode-enhancement) &lt; compile @ reddit-eager-loading &lt;&lt;&lt; [INFO] [INFO] --- hibernate-enhance-maven-plugin:5.1.2.Final:enhance (hibernate-bytecode-enhancement) @ reddit-eager-loading --- [INFO] Starting Hibernate enhancement for classes on C:\Users\bernd\workspaces\own\reddit-eager-loading\target\classes Feb 23, 2019 6:03:18 PM org.hibernate.bytecode.enhance.spi.Enhancer enhance INFO: Enhancing [reddit.Department] as Entity [INFO] Successfully enhanced class [reddit.Department] Feb 23, 2019 6:03:18 PM org.hibernate.bytecode.enhance.spi.Enhancer enhance INFO: Enhancing [reddit.Employee] as Entity [INFO] Successfully enhanced class [reddit.Employee] [INFO] Successfully enhanced class [reddit.HibernatePersistenceUnitInfo] [INFO] [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ reddit-eager-loading --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory C:\Users\bernd\workspaces\own\reddit-eager-loading\src\test\resources [INFO] [INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ reddit-eager-loading --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 2 source files to C:\Users\bernd\workspaces\own\reddit-eager-loading\target\test-classes [INFO] [INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ reddit-eager-loading --- [INFO] Surefire report directory: C:\Users\bernd\workspaces\own\reddit-eager-loading\target\surefire-reports ------------------------------------------------------- T E S T S ------------------------------------------------------- Running reddit.RedditEagerLoadingTest Feb 23, 2019 6:03:20 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation INFO: HHH000204: Processing PersistenceUnitInfo [ name: persistenceUnit ...] Feb 23, 2019 6:03:20 PM org.hibernate.Version logVersion INFO: HHH000412: Hibernate Core {5.1.2.Final} Feb 23, 2019 6:03:20 PM org.hibernate.cfg.Environment &lt;clinit&gt; INFO: HHH000206: hibernate.properties not found Feb 23, 2019 6:03:20 PM org.hibernate.cfg.Environment buildBytecodeProvider INFO: HHH000021: Bytecode provider name : javassist Feb 23, 2019 6:03:20 PM org.hibernate.annotations.common.reflection.java.JavaReflectionManager &lt;clinit&gt; INFO: HCANN000001: Hibernate Commons Annotations {5.0.1.Final} Feb 23, 2019 6:03:20 PM org.hibernate.dialect.Dialect &lt;init&gt; INFO: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect Hibernate: drop table Department if exists Hibernate: drop table Employee if exists Hibernate: create table Department (id varchar(255) not null, name varchar(255), primary key (id)) Hibernate: create table Employee (id varchar(255) not null, name varchar(255), department_id varchar(255), primary key (id)) Hibernate: alter table Employee add constraint FK14tijxqry9ml17nk86sqfp561 foreign key (department_id) references Department Feb 23, 2019 6:03:21 PM org.hibernate.tool.schema.internal.SchemaCreatorImpl applyImportSources INFO: HHH000476: Executing import script 'org.hibernate.tool.schema.internal.exec.ScriptSourceInputNonExistentImpl@61d01788' Hibernate: insert into Department (name, id) values (?, ?) Hibernate: insert into Employee (department_id, name, id) values (?, ?, ?) loading employee Hibernate: select employee0_.id as id1_1_0_, employee0_.department_id as departme3_1_0_, employee0_.name as name2_1_0_, department1_.id as id1_0_1_, department1_.name as name2_0_1_ from Employee employee0_ left outer join Department department1_ on employee0_.department_id=department1_.id where employee0_.id=? Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.266 sec As you can see, the department was loaded eagerly when using bytecode enhancement
&gt; But CQRS is, more often than not, a poor fit due to the added complexity... From my PoV it's simplicity. Especially as you don't need to stick to the async nature of read/write unless you need the properties it allows (eventual consistency etc.).
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I could not reproduce your issue: @Entity class Department { @Id String id; String name; } @Entity class Employee { @Id String id; String name; @ManyToOne Department department; } @Test public void test(){ final Department department = new Department(); department.id = "departmentId"; department.name = "department"; em.persist(department); final Employee employee = new Employee(); employee.id = "employeeId"; employee.name = "employee"; employee.department = department; em.persist(employee); em.flush(); em.clear(); System.out.println("loading employee"); final Employee reloadedEmployee = em.find(Employee.class, "employeeId"); Assert.assertThat(reloadedEmployee.department.name, Matchers.is("department")); } And here is the output. It is the same whether I run it with or without bytecode enhancement: $ mvn clean test [INFO] Scanning for projects... [INFO] [INFO] ------------------------------------------------------------------------ [INFO] Building reddit-eager-loading 1.0.0-SNAPSHOT [INFO] ------------------------------------------------------------------------ [WARNING] The POM for com.sun.xml.bind:jaxb-impl:jar:2.2.11 is invalid, transitive dependencies (if any) will not be available, enable debug logging for more details [INFO] [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ reddit-eager-loading --- [INFO] Deleting C:\Users\bernd\workspaces\own\reddit-eager-loading\target [INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ reddit-eager-loading --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory C:\Users\bernd\workspaces\own\reddit-eager-loading\src\main\resources [INFO] [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ reddit-eager-loading --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 3 source files to C:\Users\bernd\workspaces\own\reddit-eager-loading\target\classes [INFO] [INFO] &gt;&gt;&gt; hibernate-enhance-maven-plugin:5.1.2.Final:enhance (hibernate-bytecode-enhancement) &gt; compile @ reddit-eager-loading &gt;&gt;&gt; [INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ reddit-eager-loading --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory C:\Users\bernd\workspaces\own\reddit-eager-loading\src\main\resources [INFO] [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ reddit-eager-loading --- [INFO] Nothing to compile - all classes are up to date [INFO] [INFO] &lt;&lt;&lt; hibernate-enhance-maven-plugin:5.1.2.Final:enhance (hibernate-bytecode-enhancement) &lt; compile @ reddit-eager-loading &lt;&lt;&lt; [INFO] [INFO] --- hibernate-enhance-maven-plugin:5.1.2.Final:enhance (hibernate-bytecode-enhancement) @ reddit-eager-loading --- [INFO] Starting Hibernate enhancement for classes on C:\Users\bernd\workspaces\own\reddit-eager-loading\target\classes Feb 23, 2019 6:03:18 PM org.hibernate.bytecode.enhance.spi.Enhancer enhance INFO: Enhancing [reddit.Department] as Entity [INFO] Successfully enhanced class [reddit.Department] Feb 23, 2019 6:03:18 PM org.hibernate.bytecode.enhance.spi.Enhancer enhance INFO: Enhancing [reddit.Employee] as Entity [INFO] Successfully enhanced class [reddit.Employee] [INFO] Successfully enhanced class [reddit.HibernatePersistenceUnitInfo] [INFO] [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ reddit-eager-loading --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory C:\Users\bernd\workspaces\own\reddit-eager-loading\src\test\resources [INFO] [INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ reddit-eager-loading --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 2 source files to C:\Users\bernd\workspaces\own\reddit-eager-loading\target\test-classes [INFO] [INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ reddit-eager-loading --- [INFO] Surefire report directory: C:\Users\bernd\workspaces\own\reddit-eager-loading\target\surefire-reports ------------------------------------------------------- T E S T S ------------------------------------------------------- Running reddit.RedditEagerLoadingTest Feb 23, 2019 6:03:20 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation INFO: HHH000204: Processing PersistenceUnitInfo [ name: persistenceUnit ...] Feb 23, 2019 6:03:20 PM org.hibernate.Version logVersion INFO: HHH000412: Hibernate Core {5.1.2.Final} Feb 23, 2019 6:03:20 PM org.hibernate.cfg.Environment &lt;clinit&gt; INFO: HHH000206: hibernate.properties not found Feb 23, 2019 6:03:20 PM org.hibernate.cfg.Environment buildBytecodeProvider INFO: HHH000021: Bytecode provider name : javassist Feb 23, 2019 6:03:20 PM org.hibernate.annotations.common.reflection.java.JavaReflectionManager &lt;clinit&gt; INFO: HCANN000001: Hibernate Commons Annotations {5.0.1.Final} Feb 23, 2019 6:03:20 PM org.hibernate.dialect.Dialect &lt;init&gt; INFO: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect Hibernate: drop table Department if exists Hibernate: drop table Employee if exists Hibernate: create table Department (id varchar(255) not null, name varchar(255), primary key (id)) Hibernate: create table Employee (id varchar(255) not null, name varchar(255), department_id varchar(255), primary key (id)) Hibernate: alter table Employee add constraint FK14tijxqry9ml17nk86sqfp561 foreign key (department_id) references Department Feb 23, 2019 6:03:21 PM org.hibernate.tool.schema.internal.SchemaCreatorImpl applyImportSources INFO: HHH000476: Executing import script 'org.hibernate.tool.schema.internal.exec.ScriptSourceInputNonExistentImpl@61d01788' Hibernate: insert into Department (name, id) values (?, ?) Hibernate: insert into Employee (department_id, name, id) values (?, ?, ?) loading employee Hibernate: select employee0_.id as id1_1_0_, employee0_.department_id as departme3_1_0_, employee0_.name as name2_1_0_, department1_.id as id1_0_1_, department1_.name as name2_0_1_ from Employee employee0_ left outer join Department department1_ on employee0_.department_id=department1_.id where employee0_.id=? Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.266 sec As you can see, the department was loaded eagerly when using bytecode enhancement
More like mandated to use JPA/Hibernate, with the overall philosophy of "if you need something else, you're doing it wrong"
Red Hat provide the [Application Migration Toolkit](https://developers.redhat.com/products/rhamt/overview/) for use cases such as these. It's a freebie that you can use to scan a codbase for incompatibilities between runtimes and jdk versions. I believe in this instance, if you simply set the target to *openjdk* it should detect deprecated APIs between 8 and 11. There's also an Oracle tool called [jdepscan](https://docs.oracle.com/javase/9/tools/jdeprscan.htm#JSWOR-GUID-2B7588B0-92DB-4A88-88D4-24D183660A62) that may help. 
Laziness
I'm not sure what you mean by subset. According to my understanding, with CQRS, you have multiple representations of data. Managing the relationship between them adds complexity (regardless of it's nature or consistency type). Where it's justified, it works very well. Where it's not, you're better off with an ORM.
You can still join columns without a foreign key. It’s just inefficient because it has to scan all the values rather than using an index-based joining strategy.
That's what I don't understand. I rarely have bad SQL from JPA. It can be a bit excessive sometimes, but it's never slowing anything down *too* bad.
I know SQL. It's easier to use an ORM. The ORM isn't bloated and it already has defined standards. Why would I introduce the complexity of having to write all my own SQL? For certain things, sure, but when I'm mostly querying by primary keys and doing simple joins I'll just go with the ORM.
Having a single representation is absolutely unrealistic. You can see that because every ORM has features like reading "partial" entities, and has SQL dialects like HQL for reading aggregate / processed data. So the multiple representations "problem" (which isn't a problem, but anyway) is always there, ORM or not. In fact, in a way, it's the ORM approach that *makes* multiple representations problematic. No ORM, no problem.
Sure, I've gone that route before. I don't understand the ORM hate. Feels like it started 3-5 years ago, where as before you would be chastised for *not* using an ORM it seems the pendulum has swung the other way.
Lol, how are you getting data corruption? Jesus guys, RTFM. It's not as complicated as everyone on here makes it seem.
I dislike hibernate explicitly including every column and remapping names, but I can live with it (and I assume is a setting to change that behaviour). But the rest is down to me. If it's doing something stupid, I can fix it by changing what I'm doing.
There's still a lot of SOAP out there in the world. Great job putting this together. 
Optimistic locking is extremely limited in its integrity guarantees. Any time one row depends on another row, you can end up with read/write skew that your ORM doesn't account for unless you manually implement this (say advisory locks) in your business logic. Reading the manual doesn't help. The fact you just blindly trust the ORM to fix this magically for you is precisely how you get corrupted data. Also yeah, maintaining the integrity of highly distributed data is quite complicated, actually. But Dunning-Kruger may cause you to think otherwise.
I've used [Infinispan](http://infinispan.org/) for a number of different use cases: * HTTP Session Replication across multiple datacentres / failure zones. * In-line caching for large volumes of frequently read, infrequently written reference data types across multiple datacentres for trading applications. This prevents expensive database read operations. * Storing data for analytical purposes - there's a [hypothetical use case for the ingestion of IoT data](https://access.redhat.com/documentation/en-us/reference_architectures/2017/html/red_hat_jboss_data_grid_7_and_apache_spark/) from a multitude of sensors for analytical purposes which is very interesting, and has a lot of applications. I used part of this (basically without the Spark elements) as part of a PoC to ingest data from roadside IoT devices to monitor their health. A couple of my colleagues used its product version (Red Hat Data Grid) as part of the [Highly Available Complex Event Processing reference architecture](https://www.redhat.com/cms/managed-files/mi-highly-available-complex-event-processing-brms-reference-architecture-201610-en.pdf) they built for a client in the gaming industry. Not something I've done, but cool nonetheless - [Lufthansa use Data Grid](https://www.redhat.com/cms/managed-files/rh-lufthansa-case-study-f10926cw-201808-en.pdf) as part of an analytical platform around how they perform maintainence, repair, and overhaul on aircraft. So whilst the use cases for IMDGs can be perceived as niche, there really are a lot of ways you can make use of them - especially when you're building data driven applications that require large volumes of data to be delivered in a very short space of time. &amp;#x200B; &amp;#x200B;
You didn't set the fetch mode to lazy so I'd expect it to be loaded eagerly. The case at hand is with fetch mode set to lazy. However even then it would work because you're joining via the primary key. Consider the following: @Entity @Table(name = "e1") @Data public class E1 implements Serializable { @Id @Column(name = "id") private int id; @Column(name = "value") private String value; @ManyToOne(fetch = FetchType.LAZY) @JoinColumn(name = "v", referencedColumnName = "v") private E2 e2; } @Entity @Table(name = "e2") @Data public class E2 implements Serializable { @Id @Column(name = "id") private int id; @Column(name = "value") private String value; @Column(name = "v") private int v; }
&gt;You can see that because every ORM has features like reading "partial" entities, and has SQL dialects like HQL for reading aggregate / processed data. If your need for different representations is served by ORM features, then the added complexity of CQRS is likely not worth it. &gt;Those commands are not necessary "save this data I'm sending", it can be something more intelligent and domain-oriented like "move money from user X's account to user Y's account" It looks like you're describing event sourcing. Which, again, makes sense in some cases, but adds even more complexity. &gt;this takes the full expressiveness and capabilities of the remote database in mind, not just CRUD. ORMs don't have such expressiveness. You load fake entities, tweak them and "flush" them... It's such a primordial approach to business logic. I might be misunderstanding what you're saying here but, an ORM does not determine the nature of your entities. You can have a rich, expressive domain model that is synchronized with a database using an ORM. 
No one. Learn SQL well and stick with it!
&gt; If your need for different representations is served by ORM features, then the added complexity of CQRS is likely not worth it. This has become a very odd argument: 1. CQRS has added complexity because of multiple representations. 2. ORM offers multiple representations so you can avoid CQRS' added complexity. I mean... what... ? &gt; It looks like you're describing event sourcing. I wasn't. A sent command directs a remote agent to do something. An sent event describes something that already happened locally. 
 @Test public void testWithOhuNo7egEntities(){ final E2 e2 = new E2(); e2.id = 2; e2.value = "e2"; e2.v = 1; em.persist(e2); final E1 e1 = new E1(); e1.id = 1; e1.value = "e1"; e1.e2 = e2; em.persist(e1); em.flush(); em.clear(); System.out.println("loading e1, join fetching e1.e2"); final E1 reloadedE1 = em.createQuery("select e1 from E1 e1 left join fetch e1.e2 where e1.id = :id", E1.class) .setParameter("id", 1) .getSingleResult(); Assert.assertThat(reloadedE1.e2.value, Matchers.is("e2")); } E1.e2 is still loaded eagerly: [INFO] --- hibernate-enhance-maven-plugin:5.1.2.Final:enhance (hibernate-bytecode-enhancement) @ reddit-eager-loading --- [INFO] Starting Hibernate enhancement for classes on C:\Users\bernd\workspaces\own\reddit-eager-loading\target\classes [INFO] Successfully enhanced class [reddit.Department] Feb 23, 2019 8:35:25 PM org.hibernate.bytecode.enhance.spi.Enhancer enhance INFO: Enhancing [reddit.E1] as Entity [INFO] Successfully enhanced class [reddit.E1] Feb 23, 2019 8:35:25 PM org.hibernate.bytecode.enhance.spi.Enhancer enhance INFO: Enhancing [reddit.E2] as Entity [INFO] Successfully enhanced class [reddit.E2] [INFO] Successfully enhanced class [reddit.Employee] [INFO] Successfully enhanced class [reddit.HibernatePersistenceUnitInfo] [INFO] [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ reddit-eager-loading --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory C:\Users\bernd\workspaces\own\reddit-eager-loading\src\test\resources [INFO] [INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ reddit-eager-loading --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 2 source files to C:\Users\bernd\workspaces\own\reddit-eager-loading\target\test-classes [INFO] [INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ reddit-eager-loading --- [INFO] Surefire report directory: C:\Users\bernd\workspaces\own\reddit-eager-loading\target\surefire-reports ------------------------------------------------------- T E S T S ------------------------------------------------------- Running reddit.RedditEagerLoadingTest Feb 23, 2019 8:35:27 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation INFO: HHH000204: Processing PersistenceUnitInfo [ name: persistenceUnit ...] Feb 23, 2019 8:35:27 PM org.hibernate.Version logVersion INFO: HHH000412: Hibernate Core {5.1.2.Final} Feb 23, 2019 8:35:27 PM org.hibernate.cfg.Environment &lt;clinit&gt; INFO: HHH000206: hibernate.properties not found Feb 23, 2019 8:35:27 PM org.hibernate.cfg.Environment buildBytecodeProvider INFO: HHH000021: Bytecode provider name : javassist Feb 23, 2019 8:35:27 PM org.hibernate.annotations.common.reflection.java.JavaReflectionManager &lt;clinit&gt; INFO: HCANN000001: Hibernate Commons Annotations {5.0.1.Final} Feb 23, 2019 8:35:27 PM org.hibernate.dialect.Dialect &lt;init&gt; INFO: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect Hibernate: drop table e1 if exists Hibernate: drop table e2 if exists Hibernate: create table e1 (id integer not null, value varchar(255), v integer, primary key (id)) Hibernate: create table e2 (id integer not null, v integer, value varchar(255), primary key (id)) Hibernate: alter table e2 add constraint UK_k5ddt6v5okrk41g8nj46ehjv3 unique (v) Hibernate: alter table e1 add constraint FKqhs3rntxb09mn06d2k6w2atfh foreign key (v) references e2 (v) Feb 23, 2019 8:35:28 PM org.hibernate.tool.schema.internal.SchemaCreatorImpl applyImportSources INFO: HHH000476: Executing import script 'org.hibernate.tool.schema.internal.exec.ScriptSourceInputNonExistentImpl@2d6aca33' Hibernate: insert into e2 (v, value, id) values (?, ?, ?) Hibernate: insert into e1 (v, value, id) values (?, ?, ?) loading e1, join fetching e1.e2 Feb 23, 2019 8:35:28 PM org.hibernate.hql.internal.QueryTranslatorFactoryInitiator initiateService INFO: HHH000397: Using ASTQueryTranslatorFactory Hibernate: select e1x0_.id as id1_0_0_, e2x1_.id as id1_1_1_, e1x0_.v as v3_0_0_, e1x0_.value as value2_0_0_, e2x1_.v as v2_1_1_, e2x1_.value as value3_1_1_ from e1 e1x0_ left outer join e2 e2x1_ on e1x0_.v=e2x1_.v where e1x0_.id=? Tests run: 2, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 1.467 sec 
**Managing the relationship** between the models in CQRS adds complexity. Obviously if you're implementing CQRS with ORM where there is separation between what you're reading and writing, you might as well get rid of ORM. But if the majority of your application uses a single representation (for reads and writes) with a few things reading partials... I think you get it. &gt;A sent command directs a remote agent to do something A command can cause changes to a rich, expressive domain that is then persisted using an ORM. ORM does not (and should not) determine how rich/expressive your domain is.
&gt; Managing the relationship between the models in CQRS adds complexity. What's there to manage? &gt; A command can cause changes to a rich, expressive domain that is then persisted using an ORM. Why add ORM in the solution when you can skip it?
If you have an object domain where the state is persisted to a relational database and you have to handle bi-directional mapping, you can't "skip" ORM... You can either roll your own or you can use something like hibernate. If you choose to roll your own, you're almost guaranteed to come up with something worse than hibernate.
ORMs are great if your developers are "Java programmers" who know Java and only Java and lack either the interest or the ability to also become proficient in SQL. If you are fluent in both Java and SQL, the context switching overhead from mixing the two is just about zero. You don't even think about it. Especially if you're using something like jOOQ that bridges the gap without sacrificing any of SQL's expressive power.
Yes, you can absolutely skip the ORM. It's not the only approach to mapping, it's a very specific approach that has gained mindshare, and now exists on network effects, people like you who have heard of just about Jesus, and everyone else's religion or belief is therefore automatically invalid. Life without ORM is very simple: 1. There are no "entity" objects. They exist only conceptually in the DB. 2. You have command models, query models and response models. The same exact way you'd use a JSON API, for ex. 3. You send a command, you get back status or errors. 4. You send query, you get back data. See? Simple. And no ORM. And it maps not just to SQL, but to basically any API in existence. I can use SQL, I can use noSQL, I can use file-system, I can store in RAM, I can use a third party API, I can do anything. Mapping is fun, but ORM isn't mapping commands, queries and results, it's lying to you that remote data exists in your RAM. And that's where the N+1 problems come from, performance problems, consistency problems, complexity problems, all of it.
We seem to be talking past each other... In your "Life without ORM", where is the domain logic implemented?
My bad dude, a bad joke I've made... 
Scale is the most important indicator. I was using Gemfire/Geode as reference data store for real-time systems. Up to 200k msg/s. Few reads from IMDG per event. Read-through and write-through are also nice features. With Gemfire your apps becomes something more than a client, you can cache data in your app JVM. From Geode vs Ignite perspective. Go with Ignite. Gemfire was open-sourced to prevent it from dying. It works very nice other Pivotal stuff, including Spring, but still. 
In the larger picture, it's all a series of services mapping from one to another, and pushing the domain from one direction (backend implementation) to another direction (the user's final use case). In the most basic case we have three tiers: UI, backend service, infrastructure layer. But in practice, especially in recent years, the chain is much longer and involves third party APIs and cloud services, data providers etc. I hesitate to say "domain logic is at point X" because it's simply a set of transformative stages and the stages depend on plenty of circumstances. But ORM doesn't fit regardless. It's a tried and failed model from a past time, and it can't adapt to modern requirements, even if I have to ignore all other shortcomings I just mentioned. Systems have interacted in the same way for centuries now (I mean systems in general, not just computers). Commands, queries, responses. This will never change. The pretend game Hibernate tries just results in an explosion of complexity.
That's why I not prefer Hibernate at all. If you have to write complex queries, the fun begins with lots of magic in the background. I prefer instead MyBatis, you write SQL and can dynamicly map to any object.
Yea... we're definitely talking past each other. I've read over this last comment a few times and I still have no idea what you're trying to say. Given a domain model that is made up of objects that implement "domain logic", a sql database where the state of the objects should be persisted, and a need for bi-directional mapping between objects and database, you will be using an ORM one way or another. You can trade the need for bi-directional mapping for additional complexity of something like CQRS, but this trade of is rarely justified. 
&gt; I rarely have bad SQL from JPA JPA is just a specification. You need an implementation of that specification. Most common Hibernate. So what you should be saying is "i rarely have bad SQL from Hibernate" (if that is the implementation you are using).
&gt; write JPQL or write SQL Isn't that what I said?
It's great for prototyping and rapid development. And unless you're hitting massive numbers, speed/bloat probably aren't a huge deal. I could imagine, for example, ORM being used to get a program up and running, and then later (if needed) all the ORM code can be replaced with native SQL/JDBC code. Also, this isn't necessarily a good reason, but if you don't know SQL and need to work with a database, ORM can help bridge that gap without you having to go off an learn a new (incredibly useful) skill. 
SQL and ORM both have learning curves. If you already know Java but don't know SQL, learning a new library is probably easier (at least getting started) than learning a new language. Or, to put it another way, if you already know basic Java, you probably already know how to approach learning a new Java library/framework, maybe even just by looking at nothing but the javadoc. 
I feel your pain. It looks like it's coming in JDK 13 based on https://bugs.openjdk.java.net/browse/JDK-8212780
Most answers here are incredibly over-engineered. Most ORM-frameworks allow you to use a DB with as little configuration and code as possible, yet it performs good enough for a lot of use-cases. You can still change it later on. &gt; but as far as I know it sucks HARD on a big applications Sucking HARD isn't exactly a technical term. It's executes slower by some constant. It also takes less time to implement.
&gt; If you care about maintainability, you cripple the relational model. Then you may get maintainability of the Application, but the DB's fucked without the application. Databases tend to live longer than applications, I'd rather have a clean DB if I have to choose. 
I'm in this with you and can't figure it out. I think they really just want to run remote SQL queries and forward the direct response. But ignoring the fact that the ORM facilitates that. IDK, I'm invested now though, I hope they respond.
Very true.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I use ORM to execute SQL Store Procedures and Functions and map result set to my POJOs.
&gt; I know for simple apps that only do CRUD operations it's good but in my opinion for such an easy application java is not the language to go ... Can you elaborate on this, because I'd like to learn about new things. If you had a new CRUD application to build, what would you use to build it?
that's unfortunate :(
You work for a bank you say? Sounds like you didn't get the message about applets in the browser....like 15 years ago. Not only are you reliant on third party applet which is reliant upon the customer maintaining their own JRE install, but you're adamant its not your fault despite this being possibly the ultimate worst case scenario. You need to hire a consultant that will deep dive into the problem specifics. You need to have a serious talk with these third party software people you rely on. Unless your clients have their own IT dept, current conventional wisdom says no mere user can maintain their own JRE install. Whatever this software is, it's likely it can be bought and ported as a web app under your control so you'll never be beholden to this type of idiocy in the future. 
A foreign key constraint does not imply an index and the absence of such a constraint does not imply the absence of an index. 
IM MR MEESEEKS LOOK AT ME
isn't groovy a dynamic language
Wrong groovy has dynamic types
free climbing is perfectly safe if you never make mistakes
What I would really like to see is someone taking Swing, and make the lower level UI classes easier to override, so I don't have to make my own UI just to change an Icon.
The type of ORM we're discussing is Hibernate / JPA. The key distinction of this type of ORM is the existence of a "persistable entity" object that you fetch, update, and flush. From that perspective "you will be using ORM one way or another" is absolutely wrong and I gave the alternative. If we're using ORM to mean just about *any* way of presenting a query or a resultset as an object, then... we're basically having no conversation here. I said from the very start it's not about whether we map or not, it's how we do it.
https://www.reddit.com/r/java/comments/atpc0j/question_what_are_exactly_the_good_cases_for/eh5ul66/
I suppose that you meant Java Persistence API, not ORM in general. We are using MyBatis for ORM for the reasons you named. Our problem is pre-existing database schema that we have to use. And we are making complex queries to it (lots of joins, Oracle "start with ... connect by"). JPA is not suirable, but MyBatis excels with this scenario. But we use JPA to save model at the end of session. It has many nested and interconnected classes and we just need to keep it "around" for few weeks in case of ex-post analysis. Keeping the history in database is good since you can use SQL to dig into it. And if the customer needs (and is willing to pay for it 😀) we can add GUI to it. Then the JPA would come handy since it is good to create/implement ad hoc Query By Example.
nice post!
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The key "distinction" of ORM is *bi-directional mapping between objects and a relational database*.
I work in IT. I don't work for a bank, the example was our payroll department used an obscure "send file" feature hosted by a bank via their web portal. Applets in the web browser is the only scenario I know of where users need the JRE. I only know of one other service our users access that requires it, so it's rather rare. But it's still a bit confusing what we should be telling our users that access these web portals that require JRE installed. But it sounds like I have to speak with the vendor and pretty much go "HEY! Stop relying on java applets in the browser!". The only other situation is applications that come bundled with their own JRE. However I don't really give a rats ass about those JRE's not being updated since it's only used internally and does not interact with traffic on the internet.
Well if the key distinction is bi-directional mapping, then yeah, you don't need ORM, because you don't need bi-directional mapping.
ORMs are a solution to a problem you shouldn't have. If you move the abstraction layer (meta design) higher up, you can optimize all your load/save routines to those generic objects instead of writing a separate class for each entity your solution requires.
I once thought about taking JComponent and implementing my own GUI-Framework on top of it. Sadly, job-life got in the way and I don't know if it makes sense anyway when everything is built with browser frontends nowadays
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Make an infinite spiral in the output
This would help at work. As the new guy I get to work on the Swing app nobody else wants to touch. I'm getting it done but after decades of web dev my mind is blown how complex it is to make basic changes.
The standard approach, among *every* tech platform is **Model-View-Controller** That means, to make *good*, easy to maintain, easy to read, east to write, resilient code you separate the code, as much as possible * for the interface ( GUI ) * for the business logic ( the crunching your program does, the producing of the final result ) * for the code coordiantes the different chunks of code with each other ( messaging, decision routing, etc ) Your professor was being sloppy. I can tell you through experience that MVC makes a big difference is saving time,money, and stress. Oh yes, a better place to ask this question is **/rl/JavaHelp**
Just out of curiosity, what do you think of guys like Martin Fowler who seem to have at least some clout with the community disagreeing with you? (https://martinfowler.com/bliki/OrmHate.html) Just because his name is out there doesn't mean he's right about everything, but I'd be curious to hear if you think the above post is just straight wrong. I'm at least happy to say that my team is actually writing microservices that are pure REST and JPA is a godsend so far. We've had no real issues. Some of the legacy projects have issues with ibatis or JPA, but what's the alternative? It has to be literal SQL statements correct? In your Amazon example, HTTP is the normalizer there. Request response always, and you load objects into the request and pull them out of the response so to speak. It seems like raw SQL queries is the only valid alternative... Maybe I'm missing something?
He indeed is very sloppy. Thank you for the tips and I will check out JavaHelp!
&gt; Just out of curiosity, what do you think of guys like Martin Fowler who seem to have at least some clout with the community disagreeing with you? This article doesn't disagree with me. Martin Fowler is like a Rorschach test. He has every possible opinion on every topic. He also says this: &gt; Listening to some critics, you'd think that the best thing for a modern software developer to do is roll their own ORM. That's not even close to anything I said. He also says this: &gt; ORMs are complex because they have to handle a bi-directional mapping. A uni-directional problem is much easier to work with, particularly if your needs aren't too complex and you are comfortable with SQL. This is one of the arguments for CQRS. ... which is also what I said. So much for him disagreeing with me.
It's not a fear of SQL, it's the fact that eventually, I'm going to write an abstraction for writing SQL. I'm pretty sure that's what everyone is referring to the they talk about rolling your own ORM. Maybe that's what the missing piece is for you. You're obviously knowledgeable about th subject, but that's what the other guy said when he stated: "you don't ever need anything". If you happily stick with raw SQL, why not write an abstraction? Makes sense to map entities to objects, etc. Etc. This week I deployed 15 databases in 3 environments each, and supplied a starter to a team building as many services. They are configuring those databases with JPA. If the better solution is to tell them to start writing all of the database and table CREATES before they start developing the CRUD-like components, you bet I'll be looking for an abstraction later. I can easily imagine a ton of SQL queries that miss an update because someone updated an insert somewhere else. The whole point is you're laying out ORM as objectively bad and idk, I'm not really convinced. You don't have to convince me, but I'd actually like to know if that's the case. As an example, do you disagree with the notion in this page? https://blog.jooq.org/2015/03/24/jooq-vs-hibernate-when-to-choose-which/ Hibernate for the easy CRUD ops as default, and jOOQ when you need complicated queries? Or is ORM always objectively bad. I'm not joking above, we're starting a huge project with JPA required through and through, this is relevant information for me.
&gt; It's not a fear of SQL, it's the fact that eventually, I'm going to write an abstraction for writing SQL. I'm pretty sure that's what everyone is referring to the they talk about rolling your own ORM. No, the problem doesn't end in reinventing an ORM at all. This implies you will want to fetch "objects" from the DB and then "save/flush" them back. This would indeed end up as an ORM sooner or later. I believe we should forget about entities as objects, and think about data objects representing: - Commands (changes something in the app state) - Queries (request some kind of info from app state) - Responses (what you get after you send a query) So, those are objects, not SQL. The fact some of these may trivially map to SQL commands/queries/resultsets is incidental. It'll happen on a fresh project, but as you evolve it, SQL won't be the sole thing executing a command, and the response won't be just a result set (it may be a few resultsets, or it may combine information from multiple sources etc.) &gt; If you happily stick with raw SQL, why not write an abstraction? Makes sense to map entities to objects, etc. Etc. Abstractions for mapping do make sense, we desperately need better tools for type algebra, for example, the ability to express "I want class Foo which is class Bar, except property [id]". And then we could use annotations and reflections to generate mapping code. But you know, one directional. &gt; Hibernate for the easy CRUD ops as default, and jOOQ when you need complicated queries? Or is ORM always objectively bad. I don't know what to tell you. If you start ORM you'll keep going this way. Obviously in the basic case it's easier to spin up an ORM, than bother with CQS/CQRS-like architecture. But I just see what happens in time when I don't invest some thought into sticking to what always works. Maybe if you're launching so many projects using JPA, then it works for you. It also heavily depends on what type of projects you're using this for. CQS style can be used in virtually any scenario. In a way, SQL is an implementation of CQS, so is every remote API you use and so on. Even within your computer this is hardware parts communicate. I don't want to get so abstract, but it's the nature of system communication.
I see me what you mean, I think my lack of experience with anything besides ORMs and straight SQL is my issue here. With a pure REST implementation of an API, I think you could easily design an ORM of sorts to an API. Maybe since databases are more freeform with formats and operations than REST is, it wasn't as much of an issue. If I think about the repository and entity interfaces compared to req/response format of HTTP and object marshalling results... It does seem nearly identical at a high level. Considering REST is supposed to be access/mutate type operations that are sent asynchronously and review results identified at runtime just like SQL. Idk, I'm gonna dedicate an afternoon this week to look into jOOQ and Hibernate caching again to make sure I'm doing my due diligence for my projects.
Where are the *objects* that change the app state? What do the commands operate on? If you are not modeling your problem domain with objects, then it's not an object oriented system. If it's not object oriented, then you obviously don't need an *object*/relational mapping tool. You wouldn't turn to OO because of ORM. You would, however, turn to ORM in a lot of cases where your system is OO.
So you are relying on this bank regardless, that really does suck. So that vendor will push back most likely but here's the real reason users can't be trusted to manage their own JRE. Invariably they will install some other program that also relies on having a JRE and one of them will modify that JRE install or add extension libraries. Soon you have a non-working software from the original vendor but asking a user to debug why its not working is impossible. You end up asking them to reinstall the JRE, then of course the other software doesn't work and the circle of finger pointing starts. These are gotchas that make people lose customers because they simply give up and think its their fault and you never hear about it. 
Also if you are not sooo tied up to Java, try Unity instead. I'm a Java architect professionally but if I would be writing a game I would definitely switch to Unity.
The remote service that accepts the commands is typically an object in Java (because... everything is). The command itself is an object. The command contains the necessary data, it'd a DTO. Think about it as a JSON API. How do you send commands to update username? `{action: updateUserName, userId: 123, name: John Don}` Pardon the butchered syntax.
Try [Presenter First (atomicobject.com)](https://atomicobject.com/resources/presenter-first). It is a variation of Model View Presenter, which is a test driven design pattern. It allows you to test almost all of your GUI code.
I write and manage a largest (100+ table) Java EE8 application that started its life around 10 years ago as a JBoss Seam application. It has been migrated from Seam 2 -&gt; Seam 3 -&gt; Java EE6 -&gt; EE7 and now EE8. Here is what I've learned. For context this is an actively developed and evolving application. At its core the app is CDI, JPA and JSF deployed on Wildfly 14. Since this application has been around for over 10 years one of the most important things to me is maintainability and how it handles refactoring. In order to keep it going for another 10+ years I have to spend time every few years updating its core to the latest spec. From an ORM perspective this means JPA (implemented via Hibernate, but no hibernate specific features). All queries are written as JPA Criteria Queries using the generated metamodel. In the cases where I need to build reports I generally use JPA Criteria Tuple queries. This allows me to limit the data which is fetched to exactly what I need and keeps the queries type safe. A couple things I've learned. 1. Is this the absolute fastest and memory efficient way to do things? Nope, but the performance has never been an issue at all. Frankly it just keeps improving over time as CPU resources and memory become more abundant every year. I can provide more value to the application and users by rapidly developing new or improving existing features rather than shaving 5-10 ms off a query. 2. Refactoring for me is extremely simple and obvious due to the Criteria API. The queries do take longer to write, but the pay off over the long term is worth it. Many of these queries will live through 10-20 refactoring over years and years. An extra 2-3 minutes to write it is not slowing down my development. 3. Utilizing JPA or any ORM does not allow you to skip learning SQL and understanding how databases work. That is the reason that most people struggle with ORMs. If anything you have to learn more since you need to understand SQL + how the ORM handles fetching and caching. If you take the time however, ORMs such as JPA can save you time in the long run.
For the GUI code, I'd recommend the WindowBuilder plugin for Eclipse. It allows you to make your GUI in an interactive drag-and-drop way. As for your `main` problem, all best coding practices tell that you should never put core login in the main method, instead delegating it to several sub-methods.
And just a note, many professors have no clue what they are doing when it comes to code organization and design. The type of stuff you study in a CS degree is orthogonal to the things you need to learn in order to create intuitive and easily modifiable software. Check out "Code Complete" and "Clean Architecture" for a great introduction to this stuff.
If you are only gonna do simple CRUD operations ( and you are sure it will always be around that), I would go with Node, python,( anything lightwieght) for the simple fact it's faster to develop... In my opinion Java is only good when you think the application will scale . Python and node aren't really that good compared to java in terms of scaling... 
As I recall this is only an issue with nullable 1:1 associations.
If his goal is to learn rather than to make an amazing game, he's better off avoiding an engine.
Ok, so this name change has some rules associated with it? Some sort of an audit trail needs to be generated maybe? Notifications sent out? Where is that logic captured? In the command? In the "remote service" the command is sent to? That's the object model i'm talking about. 
Yeah yeah, that's what I've meant with my post. If you wanna learn Java then go on. If the game is your thing then go full on Unity. And you can learn some c# there quite nicely ;-)
check out r/learnjava
https://en.wikipedia.org/wiki/Liskov_substitution_principle very important in regards to inheritance. 
1. Read the book "Head First Design Patterns" 2. Take on projects where you write your own libraries and applications from scratch. What you learn painting yourself into a corner is much more, and *quicker* than you will learn with just reading theory but not applying the theory.
Make some children...
it has nested loops: `&lt;#list parent as p&gt;` `&lt;#list p.childs as c&gt;` `${c}` `&lt;/#list&gt;` `&lt;/#list&gt;` works totally fine for me
**Removed**: wrong subreddit. /r/learnjava and /r/javahelp are for such questions.
**Removed**: wrong subreddit. /r/learnjava and /r/javahelp are for such questions.
Yes, for Java Codota actually generates type safe completions based on your context. Give it a go and see.
Shortly speaking - to create app you need 3 basic files in your project: \- fxml file which defines app apperance (ex. how many buttons are in window, where are they placed, which methods are called after pressing them etc.), \- Controller class which controlls behaviour of app (what happens after pressing the button) \- Main class which launches the app If you are using IntelliJ these files are created automatically after creating new JavaFX project. Also I recommend using Scene Builder for editing fxml file - it's tool for creating UI by dragging and dropping components. Here is simple example that explains general idea of creating clean app [https://github.com/gluonhq/scenebuilder/wiki/Basic-JavaFX-project-with-Scene-Builder](https://github.com/gluonhq/scenebuilder/wiki/Basic-JavaFX-project-with-Scene-Builder)
Yes. We're moving up to Corretto soon, because we're also looking to move to AWS. They are supporting Java 8 until 2023 apparently, and Java 11 until at least 2024.
Corretto is where I'm planning to go as well. Side note, does anyone know what Ubuntu is doing? 18.04 LTS released on Java 10 named java 11 because they planned to update it to 11 once it was released. [https://packages.ubuntu.com/bionic/java/openjdk-11-jdk](https://packages.ubuntu.com/bionic/java/openjdk-11-jdk) Now Java 12 is almost released and they are still shipping Java 10 bits which appear to have java 11 security patches back-ported? [http://changelogs.ubuntu.com/changelogs/pool/main/o/openjdk-lts/openjdk-lts\_10.0.2+13-1ubuntu0.18.04.4/changelog](http://changelogs.ubuntu.com/changelogs/pool/main/o/openjdk-lts/openjdk-lts_10.0.2+13-1ubuntu0.18.04.4/changelog)
This is just wrong. Jdk 11 is an LTS release. It will receive support, even by Oracle for three years. 
I wouldn't use the Ubuntu open jdk builds in production because I don't know who compiled it or if it meets certification. I had issues in openJDK 7 with their builds and it caused some serious setbacks. I'm a fan of adoptopenJDK but I've also found their builds don't work in archlinux properly.
Oracle is the one who produces the OpenJDK builds at [https://jdk.java.net/11/](https://jdk.java.net/11/) and I believe that ceases after Java 12 is released. See: [https://blog.joda.org/2018/09/time-to-look-beyond-oracles-jdk.html?m=1](https://blog.joda.org/2018/09/time-to-look-beyond-oracles-jdk.html?m=1)
Wrong. Oracle's "free" support for JDK 11 will end in March. You can still download it under an OSS license from [http://jdk.java.net/](http://jdk.java.net/) but this download will not be patched after March. Oracle will continue to offer paid support for another 7 1/2 years. You can download patched versions from [https://www.oracle.com/technetwork/java/index.html](https://www.oracle.com/technetwork/java/index.html) after March but you may NOT use this "version" in production workloads without a paid Java subscription. Free public updates will continue from channels such as [adoptopenjdk.net](https://adoptopenjdk.net) and several others for another 3 1/2 years (at least). &amp;#x200B; Bottom line: if you want to get JDK patched from Oracle after March, you need to pay them. If you want to use JDK11 (patched) after March, you need to get it from a second source other than Oracle.
Found this document summarizing the satus: [https://docs.google.com/document/d/1nFGazvrCvHMZJgFstlbzoHjpAVwv5DEdnaBr\_5pKuHo/edit?usp=sharing](https://docs.google.com/document/d/1nFGazvrCvHMZJgFstlbzoHjpAVwv5DEdnaBr_5pKuHo/edit?usp=sharing) I think the relevant part is: &gt;Starting with OpenJDK 9 / Oracle JDK 9, the new six-monthly release cycle came into effect and updates now occur ***between*** *"feature releases"*, i.e. Similar to 8u91 -&gt; 8u111, once 12 is released, **you will not get updates to 11 by Oracle (However, other OpenJDK committers, lead by Red Hat, will provide these)**. (Oracle will update its own JDK though) &amp;#x200B;
That is my understanding as well. Key point being patched versions of OpenJDK 11 will NOT be available at [https://jdk.java.net/11/](https://jdk.java.net/11/)
You're confused, perhaps. OpenJDK means 2 different things. OpenJDK, the binary distribution that is free and provided by oracle _ALSO_ doesn't 'do' LTS. OpenJDK, the source repository, doesn't call it that but they sort of kind of do in the sense that it is more likely for a security or high-impact bug to receive a backport in the source repo, but that would likely never lead to oracle releasing an update to an OpenJDK (the binary distro) unless that is still the current version. Most other offerings of binary packagings of the openjdk source repo DO follow the LTS train. OracleJDK (the commercial offering does), as does adoptopenjdk, as does azul, coretto, yadayada. In fact, coretto isn't even going to bother releasing non-LTS versions. Your understanding is somewhat flawed. This is opinion, but, I'll fix it for you: your options are: 1. commit to very aggressively moving all your code along the upgrade path every 6 months and know that delaying an update is a pricey maneuvre that requires big changes to your rollouts.. in which case you can go with Oracle's OpenJDK offering. 2. Or don't do that, and pick any JDK offering except openjdk. I suggest AdoptOpenJDK. The key difference being, _DO NOT_ start with oracle openjdk at first and then 'transition' to adoptopenjdk. If you have no real intention to sticking with the upgrade train, they never start with oracle openjdk: Go with coretto, adoptopenjdk, azul, oraclejdk, etc – from day 1.
It's worse than that. If you use the Oracle JDK - as opposed to OpenJDK - in production then you would be liable for paying for support. As far as I understand it - and I might be mistaken here - this is the case from day 1, not only from the release of JDK12...
As /u/myleftkneehurts said, this is __misleading__. What do you mean when you say 'Jdk 11'? If you meant: "OpenJDK11, the binary packaging of java, as released by oracle and downloadable at `https://jdk.java.net/11/` what you said is __incorrect__: ALL such releases are supported for the same 6 months. If you meant: "No, not that binary, more the hg repo of openjdk itself", well, you're not entirely wrong, but oracle basically makes no guarantees about backports and such. It is clearly not what OP is talking about, hence, then your statement is not wrong, but misleading. Either way. 
Actually I think we have the same understanding. My point was phrased as &gt;If you are currently running OpenJDK 11 If you are planning on staying on an LTS release and have already chosen something like Corretto or AdoptOpenJDK then you are ahead of the game. My assumption is that there are a lot of people on OpenJDK who believe they will receive patched updates for years from [https://openjdk.java.net/](https://openjdk.java.net/) 
Bingo. My post is about the JDK distribution.
&gt; this download will not be patched after March Will not be patched by Oracle, but OpenJDK 11 will continue to be maintained. The likely maintainer of OpenJDK 11 has said they plan to offer builds. AdoptOpenJDK have said they will not backport patches themselves, but will rely on OpenJDK to do it for them.
Andrew Haley has said he plans to offer OpenJDK builds after Oracle moves on to OpenJDK 12. https://developers.redhat.com/blog/2018/09/24/the-future-of-java-and-openjdk-updates-without-oracle-support/
\&gt; Andrew Haley has said he plans to offer OpenJDK builds after Oracle moves on to OpenJDK 12. Any idea where those will be made available?
He's said he believes OpenJDK should provide them, so expect them on the OpenJDK website.
indeed, my understanding too... we'll need to go to some other source/distributor for binaries. Many apparently promise to provide some free&amp;free openJDK based build, so should not be an issue (not immediately at least). Yet, as there might be slight variations, wonder if it might warrant consideration for testing when not controlling deployment environment (sounds overkill, even too me, yet I kinda remember an issue which turned-out to be a pre-release bug fix not being reported on some VM implementation until late (updating solved it) - and "slight variations" could have similar results) 
&gt;He's said he believes OpenJDK should provide them, so expect them on the OpenJDK website. Reading though that I think he is saying RedHat will provide releases on the RedHat website for Win and Mac and Linux, but more commonly Linux users should be getting OpenJDK updates updates from their distribution. So the main point is they are saying RedHat is taking responsibility for maintaining the OpenJDK LTS repo after Oracle moves on to the next Java release, and the Linux distributions should be building and distributing from the OpenJDK repo.
This is the part that I think a lot of people are missing. There are two parts. 1. Back-porting fixes and maintaining the OpenJDK 11 repo. It appears RedHat via Andrew Haley will be stepping up and providing this service. 2. Creating actual complied and tested releases for download. AdoptOpenJDK, Corretto and others will be providing this. Apparently RedHat is doing this as well and even under the OpenJDK name. Apparently Oracles involvement stops after Java 12 is released, although that doesn't make a ton of sense unless they are going private with a fork of OpenJDK for supporting their own Oracle JDK LTS releases.
There's a sentence a paragraph higher saying OpenJDK should provide them. Time will tell what happens though.
Agreed. This will make a lot more sense after a few months and the first OpenJDK 11 maintenance releases happen.
The Oracle page is the official documentation. OpenJFX doesn't have any. I think the best way would be to muddle through with the JavaDoc and 3rd party tutorials. This [one](https://code.makery.ch/library/javafx-tutorial/) 's pretty nice.
Unless you're applying to one of the giant tech companies in US. I would also say honesty is the most important thing. Don't pretend you know something and try to BS every questions you don't know the answers. Instead clearly state that you don't know the answers but you will make guesses based on what you learned from college. It will leave much better impression about you than just BSing. &amp;#x200B; If you're aiming to be hired by the tech giants in US, practice algorithm questions everyday. Especially hard ones. There is no other easy way. To be honest I would rather work with a junior dev with good attitude and self learning ability than an egoist from one of the tech giants. Me and my coworkers had some horrible experiences with former Google employees in the past. Apparently there are a lot of former tech giant company devs with ego problems after they join less popular companies.
Try not to sound like a smartass. They're supposed to be unique, but ultimately that uniqueness isn't one number per book based on content/author. https://www.quora.com/Why-are-there-different-ISBN-numbers-for-the-same-book
Wow. I guess that's Ubuntu for your. Try a Linux distribution that takes OpenJDK seriously, like Fedora.
openjfx has the official docs: https://openjfx.io/javadoc/11/
Oracles antics have made me think about switching to [Amazon Coretto 11. ](https://aws.amazon.com/about-aws/whats-new/2019/02/amazon-corretto-11-is-now-in-preview/) You don't really get any of this confusing bullshit and it's maintained for a long time. Downside its Amazon but upside is that isn't not Oracle. 
Not a smartass. Just spent a lot of time writing ILS and data utilities in the library industry. Publishers can and have re-used ISBNs, and not necessarily for the same work. They aren't supposed to, but that's just the way it is. It gets especially annoying when dealing with the eBook industry where some publishers will re-use book ISBNs (and again not necessarily the same work as the eBook). Luckily most publishers will buy their ISBNs from an agency (like Bowker who administers ISBNs in the US), but there's no guarantee. I couldn't count the number of times that a "bug" report for content where images, summaries, reviews, etc. came up being from completely different works through the ISBN API because an ISBN was re-used. &amp;#x200B;
Thanks! Question: I'm getting a "Cannot retrieve module name from module-info.java" error when attempting to build a jLink build. Any idea why?
Well I'm sorry for your suffering.
The official site for openjfx is openjfx.io
Nope. No idea. Best you can do is file an issue so I can look later.
I cant even put our spring boot project on java 9
Nor should you. Java 9 is unsupported everywhere. 
Yeah oh well just hate how much they changed after sprong boot 1.4. I inherited this pile of shit and cant do much about it
It looks like in your [submission](https://www.reddit.com/r/java/comments/auhoqk/question_reading_spss_file_in_java/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
What about a downloadable file? So Eclipse can use it.
IDE just uses the javadoc.
my impression was that he was talking about various platforms that didn't have good support for unsigned, not so much about the c spec 
I know, I linked it above. It has minimal documentation though.
AdoptOpenJDK is another LTS option - https://adoptopenjdk.net/support.html#roadmap.
&gt; Downside its Amazon but upside is that isn't not Oracle. 😂
Are you looking for anything specific? 
Vlad Milhalcea goes quite in depth about database locking. And as far as I can see, there are use cases where reading the manual does help. For example, there is the @Version annotation you can use to implement pessimistic locking (https://vladmihalcea.com/a-beginners-guide-to-database-locking-and-the-lost-update-phenomena/)
How does it use the online javadoc?
It doesn't. It uses the javadoc comments. The online javadoc is just a rendition of those as well.
It's good to read the [mailing list entries](https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-February/000388.html), so get information directly from the source. Andrew Haley has taken over the lead for maintenance of OpenJDK 11 updates. At this point there will be the Oracle OpenJDK and the regular OpenJDK. You have to pay to use the Oracle OpenJDK, however not the OpenJDK. Something I'd like to know is whether Oracle's source patches for Oracle OpenJDK 11 are open source.
JavaFX architecture, a guide to building non-trivial applications, etc.
I am sorry but you will have to be more specifoc as there are different people exploring different topics. For example, if you are looking for a custom control you can check Dirk Lemmermann work, etc... 
Did you read my original comment?
Add javafx to your project with maven/gradle and your ide will pick up the java doc as it does with any dependency
I don't use maven or gradle, I just want a downloadable file so I can point eclipse at it.
I can't be any more specific, and I'm not sure why I need to be. Is it too much to expect reasonably comprehensive documentation for a non-trivial piece of software such as this? The openjfx.io has nothing beyond hello world and the javadocs.
Well now is a great time to learn. You're only hurting yourself by not using maven/gradle as a dependency manager. But if you insist on doing it that way, you can download the jar directly from [mvnrepository](https://mvnrepository.com/artifact/org.openjfx) Click the artifact you want, click the version you want. And click the link where it says "Files". Though I really really really would not recommend doing this. [Learn maven.](https://maven.apache.org/guides/getting-started/)
The security fixes in 12 and beyond will have to be open source, and those are what will get back ported. 
What does this have to do with documentation?
Try getting to the latest spring boot before upgrading the Java version. Right now I would recommend jumping to 11 right away. It's almost the same amount of work as going to 9. Check the spring boot migration guides. They are actually really good. 
You are correct, but the word "migrate" is perhaps too strong. There are no more major Java releases, and 12 is no exception. It may well be the case that updating 11.0.2-&gt;12 will be as easy as updating 11.0.2-&gt;11.0.3. Thing is, you don't need to make a commitment now. You can download 12 *today*, see if the upgrade is smooth, and if it is you've got another 6 months to decide.
This is a dumb question, sorry. I'm not really a Java developer but I want the JDK installed on my Mac (rather than just the JRE). You know, just to fuck around with if I want. I knew about OpenJDK. I know about Oracle's controversies. Still, I went to Oracle's website and downloaded JDK 11.x something that's LTS. Is that okay? Nothing commercial will ever come of this unless I think of a billion $ startup idea that somehow relates to Java. Should I have gone OpenJDK? Is that even offered on Mac or just Linux? I use Homebrew. 
[https://search.maven.org/artifact/org.openjfx/javafx-web/11.0.2/jar](https://search.maven.org/artifact/org.openjfx/javafx-web/11.0.2/jar) Click on Downloads and select javadoc.jar. It contains the javdosc for all the JavaFX modules, not just javafx.web.
&gt; Nor should you. Java 9 is unsupported everywhere. It's going to be a while until people realise this. I've had quite a number of customers who wanted to update to JDK 9 or JDK 10 in some case first, just because "JDK 11 is still too new", and they "felt saver going to 9 first". 
The license for the Oracle JDK, which you downloaded, provides for free use in development and testing so you are fine. If you wanted to deploy it into a production environment, you would need a Java SE subscription from Oracle (that costs money). There are several alternative distributions available for free (Zulu from Azul, AdoptOpenJDK, Corretto from Amazon, etc.) that do not have this restriction.
Cool thanks! EZPZ then. 
That is a good point. I wonder what would happen in the scenario where, for example, there is a big refactor in OpenJDK 12 which means it is not affected by a security problem in 11. Oracle could, in this case, only contribute the fix to their branch of Oracle OpenJDK 11.
"The OTN License allows you download Oracle JDK 11, without paying a fee, for developing, testing, prototyping and demonstrating your Java SE applications. Use of Oracle JDK in production requires a commercial license." quoted from [Oracle](https://www.oracle.com/technetwork/java/javase/overview/faqs-jsp-136696.html) 
The 6 months update is nightmarish for big companies, most still have stuff in java 6, 7 and are slowly going to 8. Now with the frirefox-like updates it's getting confusing for most people...
It looks like in your [submission](https://www.reddit.com/r/java/comments/aukvzm/advance_java_training_in_bangalore/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Then download the javadoc or sources jar instead.
Great interview
[https://dzone.com/articles/exception-handling-in-java-streams](https://dzone.com/articles/exception-handling-in-java-streams)
They don't have to upgrade in a 6 month cadence. They can either 1. pay for LTS support from Oracle, Azul, RedHat, Bellsoft etc. (which they should be able to afford as a big company). 2. Use one of the community builds, e.g. Corretto, Azul, Bellsoft and accept whatever bugs are fixed.
That looks cool. Is the IDE available yet for download? Does this work on Mac/Linux? 
&gt;Get access to the huge ecosystem of JS libraries, Smells like a cancer. In general idea is great, but JS and NPM is a huge pile of horseshit. 
Why are you using the lame Pascal convention? Are you a refugee from C#? 
Yup. Java has a fairly large ecosystem at this point as well.
A lot of people aren't very happy with Ubuntu's treatment of JDK updates. You can view the bug report https://bugs.launchpad.net/ubuntu/+source/openjdk-lts/+bug/1796027 It is a shame as I like Ubuntu, however I think they've really undermined their credibility with their handling of the JDK update.
It's packaged by Amazon, but the code is developed mostly by Oracle. [Here's a chart showing how much different companies contribute to OpenJDK](https://blogs.oracle.com/java-platform-group/building-jdk-11-together).
Are there any feature differences between Oracle and Open JDK?
So I can finally properly leftpad from the JVM. Thanks.
Like a lot of projects, and libraries in the Java ecosystem they have been caught a bit flat footed. I'm hopeful that they get a Java 11 release out in the next month or so. For Ubuntu installing outside of an APT repository is a bad idea for most deployments as they just won't keep it updated if they have to download and extract.
The only thing is with Try, you only have the exception. Say you want to preserve the original value (for redo or whatever) with the Either type you can fill it at your own convenience. For instance maybe a pair containing both the exception and the original value. With Try you are bound to "just" the exception and that may swallow some of the information.
It looks like in your [submission](https://www.reddit.com/r/java/comments/aumnuc/why_is_my_code_not_adding_the_odd_and_even/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt;Get access to the huge ecosystem of JS libraries I'm jaded, but I don't consider this a plus. However - the technology is really cool.
I actually think that most projects in the Java ecosystem were well prepared. You can see a good slide in this [talk by Mark Reinhold](https://blogs.oracle.com/java-platform-group/fast-forward-to-11) showing how many big projects were already tested and running under JDK 9 let alone 11. Considering the delta between Java 10 and 11 is _much_ smaller than between 8 and 10, I don't understand the reason for Ubuntu dropping the ball. All the big bugs should have already showed up with the transition to Java 10. Azul provides an [APT repository](https://docs.azul.com/zulu/zuludocs/Content/ZuluUserGuide/PrepareZuluPlatform/AttachAPTRepositoryUbuntuOrDebianSys.htm) for their community JDK releases. The last release 11.0.2 was released a few days after the OpenJDK release. 
I can only speak to my own personal experience but I'm currently on Java 8 still due to issues in Eclipse, Wildfly and EE8. EE users had a bit of a double punch with the removals in 9 and then the removals of JAX-B, JAX-WS, etc in Java 11. I'm optimistic that once we are stable on 11 the moves to 12 and onward should be trivial. I've since moved to Intelli and I'm planning to move to Wildfly 16 with Java 11 in the next few weeks.
(not the OP) But these small gotchas really add up. You really need to check the generated SQL all the time otherwise it will make n+1 queries where you least expect.
Making a database-oriented app without any knowlege or interest in SQL shouldn't even be an option. I see that not every programmer will be proficient in SQL, but none should ever say: "I won't ever learn SQL, ORMs are cool and they will do everything I need".
OP mentions the JavaDoc, so he must mean other documentation such as guides or architecture. There's no such documentation.
The IDE code is at [gitlab](https://gitlab.com/klamonte/tjide) . It is very pre-pre-alpha. If you grab git head, look for "TEST" comments and change those. (I currently have Project saving to a ".project_test" rather than ".project" file so that changes do not blow up my test project case.) I am developing on Linux, using both Swing and Xterm backends. It should work on Mac and Windows too, but those are untested. 
Some of JS and NPM are made from bovine digestive product, with a small percentage from other species. The exact formulation is a closely held secret and is stored in a bank vault in Atlanta GA next to the Coke formula.
You mean you have both a correct value and an exception at the same time? I don't think that was ever available to me in any project. Also then the name "Either" would be very misleading. Better return a tuple or a dedicated result type that could contain an exception.
/r/programmingcirclejerk is leaking?
You cannot make a browser do asynchronous page or component reloads without explicitly talking to the browser ie in JavaScript. Now if you are looking for a boilerplate generating framework which does this then I am not sure but it sounds doable and there will surely be some takes on this. One pattern that I enjoy using a lot is to make a tree of jsp or some other template as my components which require asynchronous (re)loading and then simply xhr to update components. This sometimes even gives my application that ’angular feel' while leaving it lightweight. Back end templating always feels very lightweight unless you use multicore with GPUs and whatnot on the client. Then everything seems lightweight. 
I think you should take a look at JSF.
Vaadin
It's a bit sad that JPA == ORM for Java devs. Apple's WebObjects included its own ORM called Enterprise Objects Framework (EOF) which was ported to Java in early 2000's. Using EOF had a lot of the typical ORM features/pitfalls, but also allowed you to exploit the full power of the framework. WebObjects could go from nothing but an existing database to an admin CRUD web app with form validation and full language localization in just a few minutes. It could read the schema into an EOModel, which then could then be introspected with Direct to Web (D2W) rule system to generate the server rendered front end. Add a column to the EOModel, and it automatically propagated all the way to the interface. Just tweaking the D2W rule model allowed for full customization of the web app without touching any Java code. If you can imagine something like an ORM for UI, that was the D2W rule system. There was also Direct to Java Client (D2JC) which did the same thing, but generated Java Swing apps served up with JNLP instead of web apps... as well as D2WS for SOAP based web services. I guess that my point is, ORM shouldn't be seen as the end unto itself, but another stepping stone to greater abstractions on top of the data store.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I think applications that are well served by tools that are able to generate UIs from the database don't suffer from the kind of "impedance mismatch" ORM tools try to address. If there is no object model to "hydrate", there is no need to bother with ORM. While I'm not familiar with current options, I'm sure there are plenty of rapid development frameworks out there and it cases where it they are a good fit, I don't think it matters what specific approach they take to persistence.
That depends on where you want to use it. If want to use a function that throws an exception inside a higer order function of the stream API it is probably a good way to do. I dont want to wrap into a runtime exception because that cancels my stream. From a more functional perspective, if it is stream I want to consider a failure as much as data as a success. In the case I want my stream to continue but the Either (or Try) is a perfect tool for this. Try is basically a more specific implementation of the Either principle anyway. But when a stream of data that evolves to a stream of Try, I do not know have my original entry anymore (it can only hold an Exception as a failure). With the Either I have all the freedom to tailor it to my needs, so even put the exception and the value in the Left, or just the value, or a message, or whatever I need. The fact that it is a Left tells me that something did go as expected. Either is a generic type where by convenience the Left is used failure and the Right is used success. It can be used for more than that. But if you only what to use it for exception handling maybe implement your own version with more specific names :)
Why wouldn't you have the original entry anymore. You can split up a stream. Get an intermediate result before entering the critical functions. This all sounds like a make-do workaround to abide to some artifical idea of functional programming.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The University of Helsinki MOOC is quite good: http://moocfi.github.io/courses/2013/programming-part-1/ Free, based on practice exercises, I found it useful.
BOM in this link refers to "Bill of Materials" method of Maven dependency management. It is not a reference to the ["byte order mark" \(BOM\)](https://en.wikipedia.org/wiki/Byte_order_mark) used with certain types of character encoding.
Read the entire side bar at /r/learnjava 
thymeleaf has ajax partial template rendering for this purpose. may not be the best solution for everything that component based frameworks give.
yes. vaadin.