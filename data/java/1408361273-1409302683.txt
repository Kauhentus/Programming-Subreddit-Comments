That second link looks good. But nowhere is said how I can communicate with the daemon besides start|stop|restart. Let me get a little more specific. My program will take periodic screenshots and send the average color to the arduino, where it gets displayed on leds. Most of that code I already have. But I want to issue commands like "mydaemon --brightness=0.75" or something similar. I could write this configuration stuff into a file and restart the daemon to refresh the configuration, but I'd like to avoid that.
I can't think of many good reasons to do this. Certainly, using it for "as a key for a Map" is not a good reason, since you can just write a bean that stores three ints, correctly implements equals and hashcode and then use that. The only reasons I can think of for this are: 1) When you need to for some outside protocol you need to be compatible with. 2) As a learning exercise 3) When memory is a real pressure, but we're talking about storing 12 bytes of data in 8 bytes of memory, so you'd need to be doing this an awful lot to actually be worthwhile They are in the order that I would consider them acceptable. 
1. Opened link 2. Had the worst scrolling experience of my life 3. Went back to check for comments about horrible scrolling 4. One comment, absolutely spot on. Thank you Sir.
umm............... ?Delete?
Steps to reproduce: 1. Move two fingers up to scroll. 2. Stop moving fingers, without lifting Expected Result: The page should stop scrolling. Actual Result: The page continues to scroll. It almost feels like... slippery.
Does anybody have a decent introduction to JUnit on a page WITHOUT a horrible scrolling experience?
What kind of company? Don't know if they'll be asking stuff related to a specific domain (web or concurrency or whatever). I'd imagine for entry level it's going to be some CS 101 type questions. Reverse a string or something.
I'm opening it on mobile, scrolling is fine. What's the deal? 
Thanks for sharing the steps to reproduce. Seems that there is a problem with scrolling on some os/browser combinations. Unfortunately my theme provider isn't able to reproduce it yet. So could you please share this info also? Thanks again 
?
Why don't you check if it's a null first and put an if statement in, or do a try/catch?
`String field = ( rs.getString(i) == null ? "" : rs.getString(i).trim() )` In short: You can use [the ? operator](http://www.cafeaulait.org/course/week2/43.html) to test for null instead of doing something weird that works whether the value is null or not.
(Though a try/catch would be an awful waste of processing time. Creating exceptions/stacktraces costs a lot of time. Better means are at hand, so ...)
I would assume OP has a lot of examples like yours in his teachers code so he probably knows what the print calls look like. Like yours, these examples are for the sake of simplicity console programs that have text input/ouput. On the other hand, the other examples he talks about are probably some code snippets implementing a class/method that is probably just passing/returning variables instead of printing everything to System.out. What I think is really being asked is why are the teachers example programs all just outputting data to the console when on the other hand many code examples in the internet are not (and if this is not the case, then he is basically asking for logging best practices). So I think the correct answer (in short) would be to explain that a console program would use System.out to interact with the world around it while a program with a GUI or a web server etc. would probably use System.out (or some logging library) just for logging messages. For a more complete answer maybe also explain why console programs are sometimes useful even in the real world too and maybe explain some basic logging best practices too.
It's a company in the betting industry. While mathematics and statistics are my thing, I'm still unsure about my programming skill.
Yeah, I've been really humble at the interviews, which is perfectly honest, because I've only JUST finished my degree, and have no professional experience. They picked up on that as well, but still wanted me to come back, so good sign I guess. Then again, my résumé is, if I dare say so myself, pretty impressive.
Thanks for your effort.
try / catch? Seriously? You should never, ever be using exception handling just to avoid actually checking for a null.
Even just using Page Up/Down (Win7+Chrome) doesn't quite work right. It scrolls more than one screen's worth, which means after paging down you have to arrow up a couple times to go back to what the page-down blew past. (It appears to be the height of the 'stuck' banner)
Anonymous classes can only be instantiated once because of how you online the declaration and implementation. This means if you want to reuse this class with different parameters, you'll have to create another different anonymous class. Instead, you should just subclass it and create multiple instances. The additional methods part just implies type safety. Say I want to add a method called boolean isFinished() to a Runnable. I can't really do anything unless I define a new class that has the method defined in something called StatefulRunnable. If I know I have a StatefulRunnable, then I know I can query using the method isFinished. Anonymous classes are just less bulky and might have some performance gains since they can't really be recycled.
I like using Apache Commons StringUtils.trimToEmpty() http://commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/apache/commons/lang/StringUtils.html#trimToEmpty(java.lang.String)
I haven’t noticed any slowdowns so you must be doing something funny.
[Read this thread](http://www.reddit.com/r/programming/comments/2dqrmo/the_imposter_syndrome_in_software_development/) to feel better about yourself.
What build tool do you use? Or just plain old javac.exe
* Mac 10.9.4 * Chrome Version 36.0.1985.143 It's also hijacked the two-fingered 'back' functionality that comes standard on mac.
It would be so nice if Java could get some of the same helpers that Groovy and other languages have, such as the Safe Navigation Operator: http://groovy.codehaus.org/Operators#Operators-SafeNavigationOperator(?.) Java seems to be getting some help, but it also seems a bit burdensome compared to Groovy's methodology: http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html
openjdk is not the same as oracle jdk? the official oracle java isn't available through the normal ubuntu repos
No slowdown with 8 here, sorry.
Commons-Lang is great but it's hard to justify pulling in a whole JAR just for a convenience method. However, sometimes I think all the little convenience methods in Commons-Lang were meant to have their source copy-pasted wherever and Apache just collects them together.
Looks like there was [a slowdown bug](https://bugs.openjdk.java.net/browse/JDK-8043253) that's fixed for 8u20. [There's a test release](https://jdk8.java.net/download.html) if you're brave, but otherwise it should be out [this month](http://openjdk.java.net/projects/jdk8u/releases/8u20.html).
That article is one of the most reassuring things I've ever read. Thank you!
For any future Googling OP may need to do, the ?: expression is called a ternary operator.
Indeed, it is a good sign. I wish you luck!
If memory serves me right, log4j came before j.u.l, but don't quote me on that. A few months ago, we had three logging frameworks logback &gt; log4j &gt; j.u.l. and two facades slf4j &gt; commons.logging. Now that log4j2 is out, all other frameworks have some catching up to do.
Apart from the scrolling issues I really like the format of the article. Just long enough and not going overboard with details. While being an introduction the hints for good style are really nice :)
I am using ant with the normal javac task. If maven or gradle are faster I would do the switch immediately, I have already thinking about it for a while.
**Null Checks** ========= A null check is probably a compare followed by a conditional branch, and if you're passing the null check 99.9% of the time branch prediction will make the conditional branch about as cheap as a `NOP`. **Total cost:** two cycles. &amp;nbsp; **Exceptions** ======== Throwing a NPE means generating a processor exception due to the faulty memory access, followed by the VM having to examine the location of the segmentation violation and determine if it was in Java code, followed by the creation of a `NullPointerException` object, initialization of the object header, call to the `NullPointerException` constructor, call to the `RuntimeException` constructor, call to the `Throwable` constructor, and call to the `Object` constructor. The `Throwable` constructor calls `fillInStackTrace()`, which has to walk the stack, determine which method each of the stack frames are in, parse the debug information in memory and figure out which line of code the instruction pointer refers to (which is more complicated than it sounds due to method inlining and such), create a `StackTraceElement` object for it, and create an array for all of the `StackTraceElement`s to live in. And it has to do this for every stack frame, and it's not at all uncommon for there to be fifty or more. And that's just to *generate the exception object*. We still haven't talked about throwing and catching it yet! To do this, it has to walk the stack *again*, and this time it has to check each method for a special block of debug data which represents the exception table. Even just *finding* this table entails a non-trivial number of instructions. Once you've found the table, you need to walk its entries. For each entry, you need to determine if the instruction we trapped at is in the range of instructions the entry covers. Then, if you find a match, you need to check what types of exceptions it handles, and then you need to compare the exception being processed to those exception types. And, of course, you can't just check for equality because of inheritance -- so each of these checks involves a loop of checking the exception and each of its superclasses against the class encoded in the exception table. And, of course, as we're moving down the stack we've also got to unwind it, frame by frame. But wait, we forgot about `finally`! Each frame we unwind could potentially have a `finally` block getting run, which could do arbitrary amounts of work (and even if it doesn't, you've still got to consider the effort involved in checking to see whether each frame has a `finally` block in the first place -- which, just like our `catch` blocks, is a special entry in the exception handling table requiring us to check instruction ranges and such). Now, we're finally done! At this point we *just* have to initialize the local variable holding the caught exception and set the instruction pointer to the beginning of the catch block. **Total cost:** I honestly don't know. I'd guess *at least* tens of thousands of cycles. You also can't ignore the extra load placed on the allocator and garbage collector -- an exception can contain hundreds of subobjects! &amp;nbsp; **Conclusion** ========= If you are unnecessarily throwing exceptions in order to try to make things *faster*, you're going to have a bad time. And that's completely ignoring the fact that it's ugly and bad form.
http://openjdk.java.net/projects/jdk9/ * [102: Process API Updates](http://openjdk.java.net/jeps/102) * [143: Improve Contended Locking](http://openjdk.java.net/jeps/143) * [197: Segmented Code Cache](http://openjdk.java.net/jeps/197) * [198: Light-Weight JSON API](http://openjdk.java.net/jeps/198) * [199: Smart Java Compilation, Phase Two](http://openjdk.java.net/jeps/199) * [201: Modular Source Code](http://openjdk.java.net/jeps/201)
lapalissiano provides the solution: you will need to loop and wait for a connection (server: jmx, tcp) or a file update -- http://akuma.kohsuke.org/ (Unix daemonization with jna. By taking advantages of POSIX API, this library lets you fork your process into background with proper daemonization steps) http://docs.oracle.com/javase/tutorial/essential/io/notification.html http://systembash.com/content/a-simple-java-tcp-server-and-tcp-client/` http://stackoverflow.com/questions/18933195/daemon-thread-use-case/18933327#18933327 http://stackoverflow.com/questions/11589433/how-to-signal-daemon-process-to-change-behaviour/11589602#11589602 http://stackoverflow.com/questions/2007831/java-daemon-design-practices
Thanks! These are some really good points. If it is Fizzbuzz level (I had to google that...), then I'll be absolutely fine. And also, if they intend to toss me into the deep end, then I might not want the job at all. I guess this is a way for me to assess them as well.
I see you solved it, but for people who want to know, geany doesn't install any compilers. You need to install the packages manually. On Linux, we usually install openjdk
nice answer, thanks!
That bug report makes a lot of sense. I am using a lot of overloading in some generated files. That is probably causing the slow compiles. I tried the test release, but compiles are still slow (8 minutes with the test release). Probably the fix is not yet included, at least the bug is not listed in the [changelog](http://download.java.net/jdk8u20/changes/jdk8u20-b23.html?q=download/jdk8u20/changes/jdk8u20-b23.html).
It leads to a larger final package unless you're using Proguard, which can be a problem on more constrained systems like Android. A large project where you expect a lot of usage? It's perfectly justified. A small project where you only need one or two methods out of a hundred? Copy that shit. I usually have a common `Util` class for methods that don't fit in another class.
I like this answer, the ternary operator is one I still don't use enough
1. What is your operating system? 2. Do you have the 32-bit or 64-bit installation of Eclipse? Where have you installed/unzipped it to? 3. Which Java JRE or JDK have you installed (version? 32-bit? 64-bit?), and to which location? 4. What error are you getting? Is it the exact same error from the SO post you linked? &gt; A java Runtime Environment (JRE) or Java Development kit (JDK) must be available in order to run Eclipse Eclipse will look on your PATH for the first `java.exe` it can find. If Eclipse isn't starting, chances are you haven't added your Java install's `bin` directory to your PATH environment variable.
It's not as bad as that in all situations, the JVM will optimise out creating a stack trace if an exception is created in the same place repeatedly, unless you set the "-XX:-OmitStackTraceInFastThrow" parameter. Also, this only applies for exceptions not explicitly instantiated. So `(null).toString()` will be optimised, but `new NullPointerException()` will not. This is no excuse to use exceptions for control flow, but if you're stuck using a bad library that forces you to do this it probably won't be too terrible.
Simplest thing would be to add a vm option to your eclipse.ini file. Just add, for example (your actual second line will of course need to be the real path to java or javaw.exe on your system): -vm /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.11.x86_64/bin/java Make certain the lines are *before* vmargs! [edit: formatting. HT to /r/king_of_the_universe]
No the openjdk and oracle jdk are two different pieces of software. The Oracle jdk (http://en.wikipedia.org/wiki/Java_Development_Kit) is developed by oracle and is released under the Sun License. Openjdk (http://en.wikipedia.org/wiki/OpenJDK) on the other hand is an FOSS implementation of Orancles jdk. The Ubuntu repos by default do not include Oracle's jdk, instead they include the open source copy, openjdk. If you would like to install the JDK from Oracle you need to add the repos. Check this out (https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get). But in my experience the openJDK has been just as good as it's closed source counterpart 
Since sindisil didn't edit for actual line-breaks, here's my *excerpt* from the eclipse.ini: -vm C:/Program Files/Java/jdk1.8.0_05/bin/javaw.exe (Path needs to be different, of course.)
Last I checked, beginning with Java 7, the only difference between the two is that the Oracle version included some sort of proprietary font system. They're otherwise identical.
/u/ilikeorangutans covered it very well but here's a few specifics. If you're working by yourself, you can open a terminal or command prompt, `cd` to the project directory (the one with the pom.xml file in it) and execute `mvn package` to create your JAR file. If you instead use `mvn install` then it will create the JAR and also put it into your local repository so other projects can use it. Once you set up your own central repository you will use `mvn deploy` to deploy the JAR to your central repo. As for terminology, a work-in-progress build is referred to as a snapshot and your JAR files will have the naming convention `project1-lexer-1.0-SNAPSHOP.jar` while you're developing.
Thanks for doing this. As a side note - how has your experience been with famo.us so far? 
mvn clean install 
Try JavaRa to remove everything Java, maybe it works afterwards: http://singularlabs.com/software/javara/
Indeed, it is configurable: http://aspects.jcabi.com/apidocs-0.17.2/com/jcabi/aspects/RetryOnFailure.html#types() You can specify exception types you want to retry on. By default, it retries on Throwable
&gt; Nothing smells worse than a package completely littered with defensive checks. Disagreed. Buggy code that doesn't work smells worse.
Did not work :(
Google's first hit https://sg.answers.yahoo.com/question/index?qid=20140817161207AAZaXJj says: &gt; im having the same problem but dont worry its not just java. everytime i install something i get the error message object already exist and apparetly that one isnt rare so kick back get on google and let the answers flow Maybe that guy is right. Good luck.
All your programs will be artifacts in your local repo. You can install a "finished program" into your repo by using "mvn install". Once its in your repo you can create another project and put the project you just installed as a dependency into your .pom How do you create those "packages" ? Simply chose a name. Though im not sure about naming conventions. Try to use it via your IDE, it will ease working with it by a ton. http://maven.apache.org/ Their documentation is very good. Have fun and good luck.
I was about to write the exact same message on my side but you already did ;) Same for me. I use Maven on a daily basis. It's quite ok for small / simple projects, becomes painful for bigger ones. Gradle is definitely the way to go nowadays. Moreover Gradle perfectly fits in the "maven ecosystem" (maven repositories for publishing artifacts or retrieving dependencies).
Gradle is *more powerful* but I don't know if it's necessarily *better*. Maven uses a standardized lifecycle approach; a project build should follow a set of prescribed phases, in certain orders. Gradle reflects much of the same idea, but provides more control over a build; it provides the standard lifecycle as a plugin, but there's nothing preventing you from going straight back to the old (and bad, and ugly) days of Ant, except in Groovy. If you need the extra power or capability, yes, by all means, use Gradle; there's nothing wrong with that. But I'd say that most projects don't need anything other than Maven's defaults, and Maven's easy to use. 
I've grown to dislike, maybe even hate Maven for a number of reasons. But I am still grateful for the fact that it set a widely supported industry standard for packaging artifacts/modules/libraries and how to specify dependencies between then. 
Maven's standardized lifecycle is good for small simple projects but it is just too brittle and restrictive for larger projects. Small simple projects tend to grow up into large complex projects which need build systems that can made to do exactly what is required. Maven just doesn't scale up in complexity. 
As someone who has used Maven, Gradle, Ant, and SBT (and even Make) on multiple occasions, I always end up going back to Maven in the end. In the case of Gradle, I like the idea but there are always things that I want to do, that I can do easily in Maven, and that I can not work out how to do in Gradle, or that the plugins that make it possible are outdated and broken, or the documentation just is wrong... The project I work on for work exists in a single Multi-module maven configuration, with 79 pom files throughout the entire structure (22 of those are smaller aggregate projects though, rather than actual code projects) that builds a total of 11 WAR files as output. And it works. It works really well and easily in fact. And in that build we have: * JaxB compilation of XSD files to Java code * Compilation of LESS stylesheets into CSS * Automatic minification of Javascript files * Automatic signing of a Java Applet when the build runs * Verification tests that can be run if desired, but not on every build * Javascript unit tests run as part of the build, failing the build if they fail * All of the WAR projects can be started up from the command line against any of our internal environments * Quality checks of all of our code that breaks the build, including FindBugs, Checkstyle, PMD and Clover And in other projects I've played with, I've had Maven compiling Scala, Kotlin, Coffeescript and Sass really easily. I'm sure all of that is achievable in Gradle, and it might even be easy, but I know when I've tried in the past it's turned out to be a complete pain finding out how to do things... (I actually remember when I first tried Gradle out, it didn't support the "provided" scope for things like the Servlets API)
First, quick answers to your questions. * "mvn install" will install packages to your local repository, i.e. directory ~/.m2/repository by default. Maven will fetch dependencies from maven central repository by default and cache them in local repo. You can run your own shared maven repository if you need it using Nexus or some other software if you need to share artifacts with a team of developers. * You create a maven project, and do "mvn package"- this will create package files (so called artifacts) in project/target directory. mvn install will put these artifacts in local repository. mvn deploy will put those artifacts into a shared remote repository. Other technical details, how to run a build, how to see the dependency tree, how to run the tests and things like that you can probably find on-line. Things from my experience: Maven has a "standard Maven way" of doing things. For example standard directory structure, standard build steps, etc. You can deviate from that somewhat, but if your build process is completely different from maven standard build process, and there is a good reason for it- then you'll be fighting maven all the way and you'll hate every minute of it. If this is the case you are probably better off using a different build system, maybe gradle. However, if you can embrace and use "the Maven way", and structure your work around that, you will benefit hugely and you will enjoy it. You will benefit because "the Maven way" is built around good development practices, and if you do things differently, most of the time you are wrong and should do things in a better way. 
I first thought, isn't there a Resources utility class for this? A quick search and no, Guava is not part of the standard library.
Guava isn't part of the standard library, nor is it presumed to be by the post (which includes a "plain java version" and a "guava-enabled version.")
This seems to correlate with my compilation problems last week. It finally returned to normal after reinstalling my IDE.
I personnally don't like Maven, because **every single time** I try to use it, it just **fails**. My rendition of using Maven: "Hey this is an open source project! Want to contribute? Easy! Just type 'mvn install' in a cmd line!" C:\CoolProject&gt;mvn install ... ...Start downloading half the entire Internet.... \**************** \* BUILD FAILED LOL * \**************** ERROR: Good luck understanding what follows! Use 23 switches to completely debug everything and get even more confusing output! Seriously. EVERY. GODDAMN. TIME. Then at my place, there are a couple of Maven projects. We work with Eclipse. I did not participate in the project until recently when I had to take it over from someone who left the company. It took me 3 days to understand the dependencies. And I still can't get a workspace that's consistently error-free. At moments, all of a sudden, some projects get in error because a dependency can't be found...Yet it used to work the day before. When I launch commands from inside Eclipse, and there's an error, it tells me to use command line switch to debug... Fuck Maven. I want to like it, but there's just no way it's "simple" if you've not been involved from the start. Now, I'll admit I never took the time to actually get deep inside Maven. Maybe I was really unlucky with the projects I tried. But I spent quite a lot of time to acquire what I consider the minimum knowledge in order to use it, and it's simply not enough. Do not tell me it's intuitive, because it's fucking not. 
Compilation speeds in my IDE (eclipse) are fine, just the external builds take longer.
Careful there, don't let this turn into spam. The content seems proper, but you must be aware what it looks like if the same guy submits pages of the same domain at high frequency.
Meh, I would rate this as very low quality content. This is a beginners mistake, not a gotcha you would find in 'effective java'. Btw in java 8 you can do the initialization in 1 line use Arrays.setAll
" the Java specification states that the class loader of certain classes can be null. " Never seen that before. Using class loader is better if your resource is in say a different jar file. Also there is the thread context class loader.
See [getClassLoader()](http://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getClassLoader--): &gt; Returns the class loader for the class. Some implementations may use null to represent the bootstrap class loader. This method will return null in such implementations if this class was loaded by the bootstrap class loader. 
["JDK 9's source code is now modular"](http://mail.openjdk.java.net/pipermail/jdk9-dev/2014-August/001220.html) The first version of modules was merged into the java 9 forest today! I've been waiting for this since it was first announced in 2008.
Thanks. Yeah I meant "haven't been caught by my assumption it might be null yet" ... ;). Good to know Before, The thing I'd always get tripped up on was te leading slash that's required if using Class.getResource, although it makes perfect sense.
I highly recommend *Maven By Example* that's linked in the free books section. It will explain maven to you. I went from 0 knowledge about maven to 50% knowledge of maven in like a day.
That gradle is better
I feel terrible for you and your build process - and what's really sad is that that sort of situation was exactly what Maven was designed to avoid. Usually - not always, but *usually* - things like this occur because someone decided they knew better than Maven did, so they did things out of band for the build, instead of either conforming to a known (working) lifecycle, or using a different tool altogether. You don't complain about the hammer when some moron uses it to lock a bolt into place; you tell the moron to stop building things. Now, I realize that MY data is anecdata just like yours is - and the fact that I have a number of projects (and have experienced a TON of projects) that build properly out of the box with Maven doesn't actually affect your experience in the slightest, other than to serve as a counterpoint that says "Yes, it's possible to do it right," and possibly "Perhaps the way your co-workers are trying to use it is wrong." I have *one* brittle build via Maven, and that's definitely because of the specific space the project is in.
as far as I know, you can only get the certifications from "oracle". There are many places that run the exams, but they ultimately are just running the exam on behalf of Oracle. You can challenge the exams. You don't have to do a course.
I just noticed that this blog uses Reddit as a comment section with that pretty widget. Clever! But also, don't go overboard with the blogspam.
I think that there's an important misunderstanding that underlies your questions: there is no single "NoSQL" language or API; whereas the defining feature of SQL is the (relatively) standard language shared by the different implementations. Row stores, column stores, graph dbs, key-value stores, xml stores... each of them has a different reason to exist, and a different interface. That being said, I'm seeing SQL being used for solutions where a the future state of an application is unknown, and NoSQL solutions being used for the cases where SQL falls down.
Don't fight it. If you try to do stuff that is outside of what your maven module does, then you are probably better off doing something else. If you have a regular J2EE application, then maven can be your best friend. If you try to do strange stuff, it can become your worst enemy. 
Martin Fowler has written extensively about databases and has an [excellent YouTube video](https://www.youtube.com/watch?v=qI_g07C_Q5I) about NoSQL which may answer some of your questions. 
By Java EE development you mean "please just allow me to use JPA annotations and be ignorant of the underlying database concerns", then you probably won't have a good time. If you think SQL databases are so hard that you'd rather just do Java EE and hide from them, then NoSQL will be even harder.
I didn't have much time to look into all of this, but so far I think the easiest solution would be the one with "Watching a Directory", where I simply have the daemon monitor a file and have another application modify that file.
Because *every* person that writes a Java EE app has the need for hand-tuned SQL and wants to go through the manual process of filling objects from ResultSets and all that entails just for a little proof of concept or god forbid an app that isn't as big as Facebook/Twitter.
I've been spending most of my time fixing big project's maven build. I haven't found a problem yet that hasn't been addressed and for which i had to do crazy, crazy things to go around maven's standards.
i... like you. seriously. Thanks.
Yes, I'm aware that since it's so widespread etc, there must be something wrong with those particular projects. Maybe it's just bad luck, I don't know. It's not just about how my ex-colleague used it. As I said, it happened with complete projects that are supposed to work, where I wanted to contribute, and the instructions were "download this, then run mvn blahblah". After it happened with a few projects, I kinda gave up. The most terrible thing is that I still have no clu why it failed. But frankly, a tool pretending to be super powerful, but at the same time cannot be used outside of very specific scenarios does not sound nice to me. Anyway, I might give it another shot, maybe I'll find out why those projects failed. I just don't have time for that at the moment.
It looks like you can take Oracle Java certification tests through [Pearson Vue](https://www7.pearsonvue.com/testtaker/registration/SelectExamPage/ORACLE/245281). But you're going to want to find out what courses/reading you should do first. Edit: oops, I skimmed through your post too quickly and missed the point. Maybe this info will be helpful to someone though.
still just spamming you blog, eh?
Did you try with something else than Windows? Anecdotal: On Linux and MacOSX it usually works fine for the projects I maintain or download from somewhere. Do you have an example of a project that fails for you, that I could try to download/clone and build? And Eclipses Maven support is known to be suboptimal. If you can, try IntelliJ IDEA, it has excellent Maven support.
The beginning of the article warns to always close the input streams, but then proceeds to leave every one of them open...
Java EE fans 4 hours ago: Spring MVC is crap. JSF lets you concentrate on business logic and you don't have to deal with thousands of lines written in JS/HTML5/CSS. Java EE fans now: the JCP is standarizing a mature, proven, useful technology. Not every project benefits from a component-based web framework. Java EE fans in a few years: component-based web frameworks don't let you control the HTML/CSS/JS output, making customization harder. Yeah, JSF is part of the standard, but just like JSP that's also part of it, you should avoid it if you can. MVC is the way to go since a lot time ago. BTW, don't use Spring. It's proprietary crap that once you use it you will burn in XML hell.
Assuming you're on Windows and you got the standard JDK 8 offline installer from the Oracle website then try using [JavaRA](http://singularlabs.com/software/javara/) to completely remove any trace of Java and installing again. Make sure you're installing as an administrator user and it might be worth turning off any realtime virus protection during the install.
yes, sorry, i am on windows 8.1, attempting javara right now
Alright.. so JavaRa did not work, however, even though i was trying on an admin account it did work when i switched to my no primary admin account... thank you for the help
No worries. Next step is to put the Java bin directory on your PATH so that when you open a command prompt or powershell the java binaries are right at your fingertips. Also make sure you installed the Java JDK, not the Java JRE. JDK is for developing Java applications, JRE is just for running them.
Can you give some examples about this "advanced fundamental Java knowledge" they assume?
Has your professor explicitly mentioned that you will need to break up the parser and lexer into different projects that depend on each other? A single maven project can have many different java packages; a 'package' is a namespace for classes that is usually mirrored in the file system as a separate folder. For example, * package 'com.example.foo.parser' goes to the folder 'src/main/java/com/example/foo/parser'. * package 'com.example.foo.lexer' corresponds to the folder 'src/main/java/com/example/foo/parser'. Source files that you place there need to start with the appropriate 'package' statement. You do not need to specify dependencies between packages, just the imports in each source file. 
And this time it lets you install it on windows XP
I wonder how many people hit this "[edge case](http://bugs.java.com/view_bug.do?bug_id=8030848)" (possible StackOverflowError in custom Lists)
&gt;Java EE fans now: the JCP is standarizing a mature, proven, useful technology. Not every project benefits from a component-based web framework. omg, what have you done Oracle, what have you done??? We'll now have to hear this kind of talk from Spring zealots for years to come :/ Why do we need 2 things to do the same thing but in a different way??? How's this making EE simpler? Shall we bring back the EJB entity beans? That's a different way too to do the same thing that JPA does.
Can someone give me an idea of what the code modules would entail? 
I think it's nice ;) so thanks for posting!
The only issue with things like JSON support is that, great as it would be now, what if some other technology comes along and replaces it? The JDK is then stuck with it, just like all the CORBA stuff from 2000 is still in there, maintained, and almost totally unused. Jigsaw will help a bit, but these technologies still have to be implemented and supported until the JDK spec drops them (which hasn't happened so far)
Sounds interesting. Unfortunately, I'm pretty sure that reddit has a weird rule (which applies to all subreddits) that if a certain percentage of your posts all link to the same site then you are classified as a spammer and will be banned. This is not automatic, but assuming you are reported, there are supposed to be no exceptions. This caused a lot of controversy on /r/gamedeals 
Spring security is nice if you have a project already built on Spring framework. It is not modular so it is not a very good option otherwise.
Hopefully project Jigsaw will mitigate this. I think it will matter much less to have loads of obsolete crap in there because they just won't get used as part of most people's builds, and they won't need to be deployed as part of a minimal JRE.
Although in his defense, all of the streams go out of scope, so Java will close them automatically when a garbage collection runs. Good catch, though - he's used to @Cleanup. :)
Yep, that's the sweet spot for Gradle: when you have requirements for which Maven doesn't have an appropriate build phase, or if you have something specific to your build.
Sorry to self-reply, but apparently the verifier is still very aggressive. Unchanged. (I would say "unfixed" but I'm not sure the behavior is *broken*, it's just inconvenient.)
&gt; Why do we need 2 things to do the same thing but in a different way??? Your JPA analogy was one point, although you went off the rails with EJB entity beans. To improve the analogy, there are already two ways of doing persistence: JPA and JDBC. Some people prefer JDBC, because they would rather write SQL directly than use an ORM. But JDBC is very bare bones. So people use additional libraries like JdbcTemplate or DbUtils on the light side or MyBatis on the heavier side. The MVC proposal is analogous to making one of these an official spec alongside JPA. Java EE already has an alternative to JSF that does 90% of the same thing: JAX-RS. But JAX-RS, like JDBC, by the official spec is really bare bones, so both popular implementations already have unofficial MVC(-pull) support: Jersey MVC and HTMLEasy. But they are incompatible with each other. Why not just make it official and have one standard?
Yeah, it'll keep it off client installs, but unless something else changes if someone wants to write a JVM for a new platform then the JDK must be implemented in is entirety. Including legacy bits. Perhaps after jigsaw in JDK 10 we'll start seeing bits like CORBA optional.
&gt; What can this framework do that JSF can't or can't be made to do? To put it schematically, can JSF be made to do this: URL -&gt; request to bean binding/validation -&gt; controller method -&gt; template selection/rendering instead of this: URL -&gt; template selection -&gt; component tree -&gt; request to component binding -&gt; component validation -&gt; component to bean binding -&gt; application events -&gt; template rendering Except for template selection/rendering, the first flow looks exactly like JAX-RS. The MVC JSR adds the missing pieces to make JAX-RS a viable controller for a web framework (templates and validation). JSF could be made to look like JAX-RS, but could JSF be made to work like JAX-RS? Can we get rid of the component tree, events and phases? Can we use JSP, Freemarker or Thymeleaf instead of Facelets?
It's good news because I still need XP to test things. OT: funny installer messages: &lt;http://imgur.com/Eq2PM07,opSuY16#1&gt;
OK, you are right of course the entity beans remarks was sarcastic, but that's the point; two different things to do same thing! I don't agree with JPA and JDBC being different. JPA builds on JDBC. I would be happy if this new MVC spec would be build on top of JSF, so the JPA -&gt; jdbc analogy would hold. 
In case someone is interested in a solution: I now changed the build to use the eclipse compiler, which is even faster than the old build (takes about 20 seconds).
You're missing the point. JSF and MVC are different and the differences have implications. For example, in JSF you *must* use `h:inputText` and cannot use an simple HTML INPUT tag. This is because `h:inputText` is used to create a `UIInput` object, which is essential for both validation and bean binding. There's also `h:form` which includes hidden parameters which must be included on the next request, or component tree restoration doesn't work correctly and certain events don't get fired at all. Bad things will happen if you try to use a simple HTML FORM tag. On the other hand, MVC (Spring or otherwise) could care less. The Spring taglib is there only as a convenience. If you need to have additional attributes not supported by `h:inputText`, they will not get rendered to HTML. This is where the flexibility of having a framework that doesn't care about what the template does is kind of nice. There are solutions to these kinds of problems in JSF. For example, older versions of the HTML namespace did not support HTML5 attributes (such as placeholder). Omnifaces filled the gap until official support was available in a newer version of the HTML namespace. Another issue was with file uploads (I don't think there is an Omnifaces fix for this, and you really have to upgrade to Servlet 3.0 for official support from JSF). Of course, you can use the Primefaces component. But why is all of this necessary? So, these differences matter to people (maybe it is just a matter of taste), and such differences turn people off to JSF. JAX-RS almost does everything that Spring MVC does in almost exactly the same way. Why not fill the gap? &gt; Today it's MVC, maybe tomorrow it's the bean model or who knows &gt; what. This is called the slippery slope fallacy. Just because something is being included that you don't personally like doesn't mean the world is ending and nothing is safe anymore.
&gt;Nope. This was 5 months ago. I've already completed several Spring MVC and Spring Boot projects since then. So? I'm asking for the advanced knowledge of Java the official guides require. It doesn't matter if you have it right now or not. &gt;Why are you replying to a 5month old thread? Because I can? There's no restriction on that. Furthermore the question and the answer don't depend on the date.
Of course it's not. I'm making an analogy. The world doesn't end if there are two different access patterns to the same underlying technology (JDBC or Servlets).
You do not have to use h:inputText or h:form. Usually you would because it is very clean and provides great functionality. You can use an standard html input tag if you prefer. https://weblogs.java.net/blog/edburns/archive/2012/11/01/html5-friendly-markup-jsf-22 &lt; !DOCTYPE html&gt; &lt; html xmlns="http://www.w3.org/1999/xhtml" xmlns:jsf="http://java.sun.com/jsf" xmlns:f="http://java.sun.com/jsf/core"&gt; &lt; head jsf:id="head"&gt; &lt; title&gt;Putting it all together &lt; /title&gt; &lt; script jsf:target="body" jsf:name="js.js"/&gt; &lt; link jsf:name="css.css" rel="stylesheet" type="text/css" /&gt; &lt; /head&gt; &lt; body jsf:id="body"&gt; &lt; form jsf:id="form" jsf:prependId="false"&gt; &lt; label jsf:for="name"&gt;Name &lt; /label&gt; &lt; input jsf:id="name" type="text" jsf:value="#{complex.name}"&gt; &lt; f:ajax execute="@this" render="progress"/&gt; &lt; /input&gt; &lt; label jsf:for="tel"&gt;Tel &lt; /label&gt; &lt; input jsf:id="tel" type="tel" jsf:value="#{complex.tel}"&gt; &lt; f:ajax execute="@this" render="progress"/&gt; &lt; /input&gt; &lt; label jsf:for="email"&gt;Email &lt; /label&gt; &lt; input jsf:id="email" type="email" jsf:value="#{complex.email}"&gt; &lt; f:ajax execute="@this" render="progress"/&gt; &lt; /input&gt; &lt; label for="progress"&gt;Progress &lt; /label&gt; &lt; progress jsf:id="progress" max="3"&gt;#{complex.progress} of 3 &lt; /progress&gt; &lt; /form&gt; &lt; /body&gt; &lt; /html&gt; 
&gt; You can use an standard html input tag if you prefer. &lt; input **jsf:id="email"** type="email" **jsf:value="#{complex.email}"**&gt; That is not a standard HTML input tag and the syntax is not the argument, but rather the implication. What would happen if you tried to do this? &lt; input type="email" value="#{complex.email}"&gt; What if you don't want to use Facelets at all, but rather JSP or Freemarker?
I got the same strange message. But the java gods know best.
Running on both mac and linux, never had it create a directory called `~/` in the project path - are you sure you didn't do something to make it do this? Custom configuration in your settings.xml, alternate settings.xml file, etc?
Maybe you can't see all of the console output
I ran your program in Eclipse and it seemed fine. My guess is that your console output is scrolling out console and you can't see the beginning? I don't know though, I haven't used BlueJ. EDIT: Actually - I just googled it and I'm pretty sure that's what's happening. Check this [stackoverflow post](https://stackoverflow.com/questions/16493057/is-there-a-limit-on-the-maximum-of-number-of-lines-which-can-be-printed-to-conso) for an answer.
&gt;What would happen if you tried to do this? JSF woud see a request with that value, which you can bind to a view param, inject via OmniFaces (should be in JSF core in 2.3), or just manually grab from the request parameters in a backing bean (possible using a view action). &gt;What if you don't want to use Facelets at all, but rather JSP or Freemarker? 1. Just do so 2. Write a FreeMarker based VDL 
Having multiple alternatives for everything makes for one confusing (meta) framework. There are FAR too many alternatives and choices in Java for everything already. Must a single framework (Java EE) now also provides alternatives for everything internally? If other frameworks start doing that too, will we have a 4d choice matrix? What will it mean to be a "java EE developer" if there are hundreds of permutations within java EE itself? Before long, companies can't look for a java EE dev, but have look for a "JSF, JPA, CDI, ..." One, since a "Spring MVC, Jooq, Guice" developer is also a Java EE developer? But hey mate, grab a beer, celebrate your victory. You won, we (java ee fans) lost today. Cheers!
Thanks mate!! Really appreciate it man!! 
I have to admit that I had no idea what is vuforia or qualcomm and never heard about the term "augmented reality". I see that non of these things belongs to the trendy Java topics, but I have no idea why this got downvoted. I'm interested in what you're working on.
Thanks for your help. This question isn't specifically java related but I figure that if you've been doing pki for so long, you may have come across this. When Windows imports a certificate into it's keystore, namely the "Windows-MY" keystore or the "Personal" keystore, does it do path validation and revocation checking? It's frustrating how little information there is about this stuff.
Whooo JSON!
What i think? that i would already be happy if i could reliably use java 7 without worrying if the users have it installed.... i can only dream of 8, so 9.. not really happening in the next 5 years
The Spring Integration Java DSL, which is in development, is actually pretty interesting. Also, Spring Integration 4 allows for annotation-based wiring, which is basically the XML config, just in Java. I'm not the world's biggest Spring fan, but the Integration project is definitely moving in the right direction.
Eclipse has a browserfication project for eclipse, and CQ5 has an integrated IDE. But as a service/website, don't know.
So...what does this have to do with Java? Sounds more like something for /r/javascript than here. Still, as a hint look into document.querySelectorAll, and CSS selectors - in Chrome's dev tools you can use advanced identifiers, so something like this might work for getting all buttons with data.id of 23: document.querySelectorAll("button[data.id='23']") If jQuery (or another js library) is on the page that may give an easier way of fetching and looping over the matches.
There are two great JSON libraries now, not seeing this as better than Jackson or GSON.
Meh, nothing earth shattering, Jigsaw is going to be a mess.
I'm a Java EE user and I'm not really happy with this move either. I don't mind Oracle developing a new separate UI framework or defining new endpoints in the Java EE spec for alternative UI frameworks to be built on top of, but I do have a problem with defining two different UI specs within the Java EE spec. When there are multiple official standards, there are essentially no official standards. Oracle runs the risk of scaring off new users who are just trying to learn Java EE, but are unsure which UI spec to learn. I see questions about wether to use JavaFX or Swing by new users relatively often in this subreddit(and JavaFX is essentially meant to replace Swing in the long term as the main UI framework in Java SE, not co-exist with it). When you include two UI frameworks in the official spec, what's to stop anyone from adding a third or maybe even a fourth? GWT uses a different model from both JSF and Spring MVC, maybe it should be added to the spec too? And who says it has to stop with just the UI spec? Why not add a second or third ORM, dependency injection or Restful spec?
Java is not Javascript is not Java. Try /r/javascript.
it sounds like you are looking for a jQuery solution which would be something like: $('button').click(); This clicks every button on the page. If you want to click buttons in a specific &lt;div class="cakelist"&gt; you just prepend ".cakelist" to the CSS selector. 
Whether it's interesting or not doesn't have anything to do with it. Please read [Reddit's rules](http://www.reddit.com/rules/) and its [definition of spam](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F). What it boils down to is that you're not trying to be part of the Reddit community, you're using Reddit to promote your website. &gt; If your contribution to reddit consists mostly of submitting links to a site(s) that you own or otherwise benefit from in some way, and additionally if you do not participate in discussion, or reply to peoples questions, regardless of how many upvotes your submissions get, you are a spammer. If over 10% of your submissions are your own site/content/affiliate links, you're almost certainly a spammer. 
&gt;1, we create a parallel set of &lt;f:viewParam ..&gt; bindings to the HTML tags Right, just like you create a "parallel set" of annotations in your Spring controller. &gt;2, because validations are automatically done through components, since we are now bypassing the ordinary component binding and validation phases, you have to manually add messages to the FacesContext in an preRenderView event handler. This is completely false. View params are essentially components (albeit a special kind that live in the meta section of a view which can be build and processed independent from the full view). As such converters and validators can be attached to a view param, and so there's no need to set a message manually in any event handler. &gt;Why would I want to do this? I don't know, *you* were the one asking about FreeMarker, weren't you? &gt;The nice thing about MVC is that there are no component trees and no VDLs. -sigh- JSF is MVC too! Lots of MVC implementations have components (eg desktop ones like Swing). And VDL is largely just another term for templating language or templating engine, which action oriented frameworks use as well. And having a component tree around is very often a good thing as it gives you important context when a request comes in. This makes it possible to only accept data from input fields that were also rendered, which in turn prevents attacks such as made possible by Rails' mass assignment vulnerability. If the component tree is cheap or essentially free to construct than having this around is only a benefit. JSF 2.3 should make sure this is even cheaper then it currently is.
Having two different web UI frameworks does not seem to be a problem in the Microsoft world. There are two standard web UIs, ASP.NET Webforms and ASP.NET MVC. ASP.NET MVC became a standard because that style of MVC is incredibly popular, justifying Microsoft making it official. It is no different in the Java world. &gt; When there are multiple official standards, there are essentially no &gt; official standards. That's not what "official standards" means. What it means is that on any conforming application server, you can expect that the standard will be implemented. For example, you can't expect Spring MVC to be installed everywhere. &gt; When you include two UI frameworks in the official spec, what's to &gt; stop anyone from adding a third or maybe even a fourth? The community. This is a JSR. Its inclusion is proposed and voted on. &gt; GWT uses a different model from both JSF and Spring MVC, maybe it &gt; should be added to the spec too? Create a JSR. See if there is community support. &gt; Why not add a second or third ORM There are many ORMs already. Hibernate, EclipseLink, OpenJPA. That's why the JPA spec was created, to create a unified interface for ORMs. &gt; dependency injection There are several implementations of DI. Weld, OpenWebBeans. That's why the CDI spec was created, to create a unified interface for dependency injection. &gt; Restful spec There are several implementations of RESTful service providers. Jersey, RESTEasy. That's why the JAX-RS specification was created. The JAX-RS spec already provides enough to create web applications. It is only missing a few pieces for validation and templates, which both Jersey and RESTEasy provide, but are incompatible and unofficial extensions. This JSR will bridge that gap.
I am intrested
We have built a very powerful front end 'desktop' environment for our enterprise application. It was very important to us. We went with GWT because for the main reasons that Google created it in the first place, which I believe was the strength of the Java tooling (eclipse, strongly typed, debugging, unit testing, compilation, etc, etc), and the ability to reuse code on the server and client. Errai's approach to Dependency Injection and server &lt;-&gt; client events using CDI is spectacular, as is the rpc mechanism (which is so much more elegant than native GWT rpc). We built our UI using a lot of reusable widgets, and have a lot of hot-keys that exist throughout the app environment. As for why it isn't more widely used, I think that is changing. I think there are a couple of reasons, one (which I can't remember if I mentioned in my post) is that it suffers from the opposite problem of most frameworks. The 5 minute tryout is good, but the farther you go into a large project, the better it really becomes. The other problem, as far as I can tell, is that jboss (the company behind it) has never really wanted to push it as a project. It is the foundation a few big projects within jboss, but they haven't marketed it the way Sencha/Vaadin have done theirs. That said, the support I've gotten from the community and the people at jboss has been fantastic, and I would recommend going on their IRC channer (#errai on freenode). Cheers 
&gt; Right, just like you create a "parallel set" of annotations in your Spring &gt; controller. The input fields names are mapped to properties on the backing bean specified the @ModelAttribute. There is no additional parallel set of mappings. &gt; As such converters and validators can be attached to a view param, &gt; and so there's no need to set a message manually in any event &gt; handler. Hmm. I did not know this. Well, it's besides the point anyways. &gt; I don't know, you were the one asking about FreeMarker, weren't &gt; you? No, I mean why would I want to go through the trouble. I don't have to use JSF, after all. &gt; JSF is MVC too! I mean action-oriented MVC. I never said that JSF isn't MVC. I just got tired of constantly typing the full thing out. I'm pretty sure you know what I mean. &gt; And VDL is largely just another term for templating language or &gt; templating engine, which action oriented frameworks use as well. You're missing the point. The templating engine for action-oriented frameworks isn't the input for anything. They merely output text to the response given a model. The controller is done by the time the template engine is running. The templating engine for JSF is the input for something. It produces a component tree that is used for the rest of the request-processing lifecycle. &gt; And having a component tree around is very often a good thing as it &gt; gives you important context when a request comes in. That's fine. This is the JSF and component-oriented MVC model. I never said I am *against* component-oriented MVC. I have been trying to hammer the point that component-oriented MVC is *different* than action-oriented MVC (which should be obvious), to argue the case for inclusion of a *separate* action-oriented MVC spec.
I'm sorry, but you're confusing specifications and implementations. Your examples are mostly competing implementations of *the same specification*, not two separate specifications that compete directly with each other, as is the case with JSF and this new MVC spec.
&gt; Your examples are mostly competing implementations of the same &gt; specification This was a reply to your examples. &gt; two separate specifications that compete directly with each other, &gt; as is the case with JSF and this new MVC spec I think that they should be two separate and competing specs, because they serve different needs. I mean, there's already JAX-RS and JAX-WS, both separate and competing specs for two different types of web services.
&gt; Oh, believe me, this IS a major problem in the MS world. Really? Can you provide some citations regarding specifically the availability of both ASP.NET Webforms and MVC being a problem? Because both of these products are very successful, supported and heavily used. I'm not talking about Microsoft's other products. &gt; Yeah right! Democracy is great until the other guy is voted in. &gt; Dude, really? That was fluff I shouldn't have included in the argument. 
I'm interested but have no time nor hardware to work with, so I'll just lurk here
But java.com still suggest java 7 !
The list of fixes is massive: http://www.oracle.com/technetwork/java/javase/2col/8u20-bugfixes-2257730.html
Students can use [REPL](http://www.javarepl.com/console.html). There is [CodeEnvy](https://codenvy.com/) which I, personally, never used before. Couple of cloud-based editors support Java syntax (but not the rest of the expected IDE featureset).
Why do you think Jigsaw is going to be a mess?
I'll definitely have to check this out. Thanks for the post. 
This is great, thanks a ton for this list. Ended up getting 'Practical API Design: Confessions of a Java Framework Architect' to start off with. I had a Drupal book that was made by the same author. 
Anyone know why the size of the offline installer tripled in size ? jre-8u11-windows-x64.exe 32.5 MB (34,176,936 bytes) jre-8u20-windows-x64.exe 91.6 MB (96,138,664 bytes) !!!
http://projects.eclipse.org/projects/technology.flux
&gt;I have been trying to hammer the point that component-oriented MVC is different than action-oriented MVC And this is all it is! Different! Read back the first comments of everyone, this is what they all say. Action-oriented MVC is not better, not simpler, not faster and not more performant. The only thing it does well is being different. This is a shitty reason for being added to Java EE!!!
At this point I'm even doubting whether the votes are correct. How can we check this??? Oracle for some reason nobody but they know wanted to have Spring MVC in Java EE long before the survey. They just needed to fabricate some farce justification to go ahead. The entire jsr and eg for MVC is a big farce too. The EG should decide on how to proceed via discussions. But the end result is already know; spring MVC will be standardised in Java EE. Why still have a nonsense jcp process? Nothing anyone says and no community supplied issues make sense if the end result is already fixed. Save us all some trouble and just copy the spring api now, rename the packages to javax.mvc and call it a day. Stop asking the community for their opinion if nothing can be changed anyway.
I think the main reason why it's a major release is that the whole JDK will be refactored for modularity using the new Jigsaw modules functionality, or at least that was the plan a while ago. So if plan holds the whole JDK will be based on modules that might or not be included in potentially different profiles (for example a Java ME equivalent?). The whole new modularity mechanism is not just a different packaging, but at runtime something along the lines of OSGI, so it's a huge change that has already been under development since several years. It might be done on two parts, first deliver the module system and then refactor the JDK for modularity in Java 10, or that part might be eventually dropped altogether if proven too complex. I think it's a good decision from Oracle to not include much more (compared to Jigsaw) in Java 9, given the huge scope of the Jigsaw change, which might probably be the change with the largest internal code impact so far ever done in Java, or at least one of the largest. 
Look into jwrapper to solve that problem.
which can do imports?
&gt; Oh, believe me, this IS a major problem in the MS world. It's not just ASP, but MS competes with many of its own projects. MFC, WinForms, WPF, WindowsRT. Very hard to use some MS tech, since you never really know when MS will abondon it (which is almost always: soon). There is a problem with desktop GUI frameworks. He was talking about web frameworks, however, and it is not a problem in the MS world.
Honestly I find it lacking. I am still waiting for the removal of type erasure, addition of unsigned integer primitives, value types and coroutines. 
We aren't here to do your homework for you.
The improved Process API is long overdue if you ask me, though nobody else seems to care. Jigsaw will probably be cool for some people, I'm hoping some other JDK languages take advantage of it to improve start up time, so my quick little groovy script runs like a quick little shell script. Anyone expecting big things from a Java release is probably kind of out of luck. As nice as some big changes would be, I'll be really surprised if there are ever significant changes. Things like Properties and reified generics just aren't going to happen in Java. Fortunately, we have a top notch virtual machine in the JVM and some really great languages that run on it providing features that will never make it into Java.
I read people complain about type erasure all the time, but don't really see what's so bad about it. The way I see it, reified generics would make some really nasty code that is rarely needed slightly easier, but have little to no impact on what most people write most of the time. Does anyone have an example of how reified generics would make their life significantly better?
http://runnable.com/ I'm surprised nobody has mentioned it yet. I think [Cloud9](https://c9.io/) also supports Java, but I'm not entirely sure. 
It's been in progress for a decade+. JSR277 pretty much ignored OSGI. Several leads have come and gone, with incoherent technical direction. OSGI solves many of the same issues, and even though it is mature, it can still be a bit of a pain to use. But much of it is gut instinct that Oracle won't be able to provide the elegance needed for it to be a usable technology.
The removal of type erasure will never happen IMHO. They screwed that up and spend too much energy defending the decision instead of breaking with the past and fixing the issue.
In practice it does suck and can lead to subtle and annoying bugs, several libraries and JVM languages fix the issue.
Isn't GWT largely abandoned? Google handed it off to apache no? EDIT: Am I wrong? Feel free to set me straight instead of downvoting.
Actually, estimating **development hours** is easy. What's actually hard is estimating how long it's going to take to finish something. Calendar time inevitably exceeds development effort by a factor of 2-3x minimum. Add to that the fact that most folks have more than one project on their plate at a time plus support plus mentoring plus etc. etc. and it becomes impossible to be accurate. If you want correct estimates, then you have to engineer your environment to ensure that everything that takes place in your organization is actually accounted for in the estimates. Anything else is just guesswork to varying levels of inaccuracy.
There's (Koding)[www.koding.com]. No code completion unfortunately. It has hot key, awesome collab features, built-in apps, api to build your own apps, a built in social feed to discuss or ask for help with all the other koding users, your on vm running on some linux distro, you can host files and easy to test scripts. I really like it, but I don't use it all that often, maybe to test a quick go script, nodejs, or to temporarily host a site for testing. Most of the time I skip IDEs altogether and just use Sublime Text or Textwrangler or something. Side by side with my trusty Dash docs
Oh wow, runnable is really nice. Thanks for sharing!
Not having to pass in actual Class variables when you're going to be instantiating the generics objects.
I just finished 16 months as an intern working on Errai. Is there anything you'd like to know about the project from a former contributor? I had a great time working on Errai and would be happy to discuss!
Or bundle a jre in your distribution! 
* You do a GET request (download the data from the URL) to get the data. * You parse the data using a JSON parser Hey presto! You have weather data in your application.
Usually you look for the documentation about their API at: https://developer.weathersource.com/
Hello, I see a mention to Errai UI which seems to be a widget library built on top of Errai. Do you recommend any showcase project online so we can see how the widgets look visually? I see mentions to several projects in github but they don't seem to be official showcases. Thanks
Storing datetime with timezones as string a shitty solution. Depending on implicit string to datetime conversion in database queries is just horrible. Java really needs to upgrade JDBC to support the "timestamp with time zone" which was added in SQL-2008.
Very good point, mind giving me a couple examples of languages that run really well on the JVM?
This really shouldn't be an issue: * If you are writing server applications then your organization should be in control of the environment. * If you are writing a desktop application then you should bundle your own JRE - it's just a few MB. Relying on the users to have the most recent JRE installed will only lead to support nightmares.
Desktop, web, backend, it's a pattern that MS can't stick with a technology and switches to something else all the time. This pattern certainly is a big problem. Besides, ASP.NET while having similarities to JSF is by far not as good. Their "JSF 2.0" never happened if I'm not mistaken, and they don't have a neat VDL like Facelets, or a powerful expression language. Correct me if I'm wrong but I don't think they've got essential stuff like the view scope either. Last but not least, ASP.NET doesn't seem to have the vibrant third party community that JSF has. There's no PrimeFaces or OmniFaces for ASP.NET, is there? (PrimeFaces tried btw, but gave up before an actual release was done). So ASP.NET was/is in a pretty bad shape and MS fixed it by introducing something else (which they always do, that's kind of their thing). But JSF is in a really good shape, but apparently forces within Oracle have been hyper sensitive to FUD spread by characters like this 15 year old Spring MVC fan here who clearly doesn't know the first thing about JSF. Very sad. I would expect the HN hipsters to be sensitive to this, but that Oracle internally falls for this cheap talk and hipster crap? Again... it's just sad!
I wonder why I'm even responding to this, but c'mon man. JAX-RS and JAX-WS address different things for the end user (restful web service and a soap web service). JSF and Spring MVC both render a web UI that looks and feels identical to the end user. It's a completely different thing. If you don't see that then there's little point in dragging this discussion on.
Wonder when Oracle will bring this framework too to Java EE. 
ASP.NET IS Web Forms, MVC and Web API. "Web Forms 2.0" didn't happen because clients wanted an action-oriented framework. We can debate all day how amazing component-oriented frameworks are and expose JSF 2.0 as the best example but MS delivered what its clients asked for. So if you have to talk about the web space in the MS stack you have to be fair about it. Just like Java EE developers generally don't use JSF 1.0 + JSP for new projects, ASP.NET developers generally don't use Web Forms for new projects. They use MVC and/or Web API and things have been pretty stable with those two.
Clojure, Groovy, Scala, JRuby, Jython, Javascript (Nashorn/Rhino), Ceylon, Kotlin, Xtend
Hi. I am interested. I have experience with java, but not with unity, so I will learn.
I think the effective method signature for getClass() demonstrates the problem rather succinctly. It's not even expressible in the language, not by a long shot.
I can't help you with your actual problem - I think you should explain a bit more about what you want to do and mainly what your problem is in achieving this, plus we might need to see more code. But another thing: Instead of using elaborate split-acrobatics, I suggest you use a bafflingly simple different file format that I "came up" with (it's really laughably simple). Instead of putting several things into one line while using some separator hierarchy, it's better to just use several lines - and then you use one (or more, doesn't matter) empty line(s) to express "That's it for this item. Now on to the next." (Almost) no matter how complex the data is you're trying to store, I bet that I can come up with a way to use this file format to make it happen. I have had nothing but a good ride with this approach, and I could even abstract the saving/loading: Two methods that just take / return an `ArrayList&lt;ArrayList&lt;String&gt;&gt;`, the outer ArrayList holding one block of lines per entry. Parsing the file once you have the data in this format is a joke, especially if the individual line's complexity does not exceed "key=value". You just parse one complete block, then you make use of the variable values that have accumulated, then you reset the variables (or rather declare them inside the loop right away, that's cleaner) and fill them by parsing the next block. Also, you can use java.nio.Files.readAllLines to load the complete file with one command (plus try-catch block) and write it back with java.nio.Files.write. Doesn't get any simpler than that, especially once you have wrapped this into the two methods I mentioned.
 class Foo &lt;T&gt; { T[] data; } That simple construct isn't possible because of type Erasure. You must always use Object[] and cast to T. This introduces potential for bugs because if any thing that adds to data is broken then you can insert non T items. This will cause a ClassCastException at runtime. Something not easily catchable at compile time. Without Type erasure it would simply be a semantic error caught by the compiler.
Also, at work we are working on some code right now and require this monstrosity. public abstract class Foo&lt;E&gt; { public E instance; public Foo() throws Exception { instance = ((Class)((ParameterizedType)this.getClass().getGenericSuperclass()).getActualTypeArguments()[0]).newInstance(); ... } }
The points that interest me most from http://openjdk.java.net/jeps/102 are: * The ability to get the pid, * The ability to enumerate Java virtual machines and processes on the system, * The ability to deal with hundreds of sub-processes, perhaps multiplexing the output or error streams to avoid creating a thread per sub-process. What I would really like, but isn't covered by this enhancement, is a clean API for creating new JVMs from Java, without having to build a huge list of platform dependant command line arguments.
My fisrt choice for a real Java replacement would be Scala, though I also like Groovy for certain use cases.
&gt; I see a mention to Errai UI which seems to be a widget library built on top of Errai. The way I would describe Errai UI is that it's a way to define your own widgets with HTML5 and CSS. [Errai Tutorial](https://github.com/errai/errai-tutorial) is the current showcase app, which uses most Errai features including Errai UI. (There are also some smaller, feature-specific demos [here](https://github.com/errai/errai/tree/master/errai-demos). If you check out Errai Tutorial, you'll be interested in looking at the [ComplainForm.java](https://github.com/errai/errai-tutorial/blob/master/src/main/java/org/jboss/errai/demo/client/local/ComplaintForm.java) and it's HTML template, [ComplainForm.html](https://github.com/errai/errai-tutorial/blob/master/src/main/java/org/jboss/errai/demo/client/local/ComplaintForm.html). Because the HTML file has all the relevant CSS files linked in its head, you can open it in a web browser and it will render exactly as when it is used in the fully compiled app.
Errai UI is NOT a widget library, but rather an HTML 5 Templating library. The idea behind Errai-UI is that you (or a non-programmer) can create valid html 5 templates, style them using standard css,etc, and then without making any modifications to the template, 'bind' them within the Errai framework to GWT widgets (either standard, GXT, or your own). So, just to reiterate, it is NOT a widget library. The description here is pretty good: https://docs.jboss.org/author/display/ERRAI/Errai+UI
Tootie, GWT is *not* largely abandoned. Google truly 'open sourced' the project, much in the way Eclipse started as an IBM project and was handed off to the community. That said, it is still actively worked on by google staff (https://gwt.googlesource.com/gwt/), and a big new release is expected in the fall. Because of its value to large projects, GWT has been adopted by a number of large banks/telcos, as well as other open source projects such as Bonita, Activiti, and jBPM. Last year, the GWT.create conference had over 700 attendees over two locations (SF and Germany), and Vaadin seems to be doing quite well with a GWT-based development environment that it sells. I would say that it is as healthy as it has ever been.
&gt; because the code is crap :D Yes it is. :) Please post your entire code. You basically should have a main method who kicks off a bunch of threads, those threads take in any Runnable interface, so you'll have to implement that. So post all of your code (in a gist for example) and please explain what your problem is.
&gt; But another thing: Instead of using elaborate split-acrobatics, There really is nothing elaborate about just splitting a line on a separator. Formats like CSV, which are readable by any spreadsheet program and even have ODBC drivers, have existed for ages because it's that simple. Your answer is also completely off-topic. Last but not least: using readAllLines() is an incredible waste of memory when you just want to read records into a data structure; you really don't need to load everything into data at once and it doesn't scale at all with large datasets.
Huh. I took you as one who gives the best answers here, and now this? &gt; There really is nothing elaborate about just splitting a line on a separator. From looking at OP's code, I got the impression that OP was splitting in a hierarchy, meaning that the file structure require splitting, then the text acquired would itself have to be split again for the next hierarchy level, and maybe again. This is what my text was about - and it did contain itself a split, so your objection was not really reacting to my text. Next time please try to be a little more understanding. &gt; Your answer is also completely off-topic. Just because you have not understood? &gt; Last but not least: using readAllLines() is an incredible waste of memory Have you even looked at OP's code? We're talking about *very tiny* stuff here. 
You could just do this: public abstract class Foo&lt;E&gt; { public E instance; public Foo(Class&lt;E&gt; clazz) throws Exception { instance = clazz.newInstance(); } }
Put in jvisualvm and drop jjs. (After all, who doesn't have a browser?)
Is this a problem with generics or primitive arrays? Because an array actually is a separate class instance. For example, `int[]` has class `[I` and `Object[]` has class `[Object` and `Foo[]` has class `[Foo`. If the generic type were reified, the runtime would have to figure out which array class type to return at runtime, because it is not as simple as a Collection class (of which there is one over all component types). Collections don't have this problem: class Foo&lt;T&gt; { Collection&lt;T&gt; data; } Is perfectly fine.
I stopped using jhat when I learned of MAT (http://www.eclipse.org/mat/). It does what jhat does, but uses far less memory, indexes your heap for faster queries, and performs some moderately intelligent analysis to guess where your leaks are.
give us more information. what u gave us is not enough. 
jdk1.7.0_67.jdk on OS X doesn't appear to have jjs. Anyone else confirm?
I was a little surprised not to see `jdb` in the list.
nashorn (jjs) is available in jdk8. With jdk7 you can use [jrunscript](http://docs.oracle.com/javase/7/docs/technotes/tools/share/jrunscript.html)
Java Native Packager.
True you can but now you have simply pushed the problem down a level of abstraction. Implementations of collection tend to implement as Object[] and do the casting for you. So as long as the default collections do what you need then it's fine, the JDK is well tested. If you need different semantics or not an existing implementation type then you are forced to implement it. 
Thanks
Right, but isn't this a pre-existing problem? The Java collections API long predates generics, and the `Object[]` problem existed then too. That's why the `T[] toArray(T[] a)` signature exists in the `Collection` interface. This is actually the same thing as the pre-generics `Object[] toArray(Object[] a)` (because of type-erasure). And actually, this: class Foo&lt;T&gt; { T[] data; } is perfectly legal. The problem is this: data = new T[1234]; To which the compiler tell you that you can't create an array of generic type. But, this problem can also be overcome: class Foo&lt;T&gt; { T[] data; @SuppressWarnings("unchecked") Foo(Class&lt;T&gt; clazz) { data = (T[]) Array.newInstance(clazz, 1234); } }
Except for the unsafe cast, which is required for the array issue, where is static analysis lost? `Class&lt;T&gt;` is parameterized the same as `T[]`, so the result isn't even unsafe.
You only tell truth that suits you!! Why suddenly forget that there was a third part of survey??? This was about prioritisation and MVC only got 7% there! And when we could prioritise, it was **CLEARY** said that extra action support in JSF was a major option! 
&gt;but your opinion doesn't decide what goes into Java EE. Of course my opinion counts! Every vote counts remember? &gt;Enough people prefer action oriented MVC that it is being included alongside JSF No, this is a false conclusion since the survey never asked this! Remember how part 3 said MVC would be about JSF!?
Pretty sure it does neither and just imports it into the store. Java keytool/keystore is the same way.
Was asp.net not done by this one engineer who scribbled something together while in an airplane? It wasn't because of customer demand. It's used now since all innovation happens there it seems! If ms improved win forms to be as good as JSF and there was a balusc for win forms and a PrimeFaces, do you really think people would choose only asp.net MVC for new projects??? I think not!
Because since Java 6, a ECMAScript engine (first Mozilla's Rhino, which has been replaced with Oracle's own Nashorn in Java 8) has been shipped with Java SE, which is useful for – well, scripting Java applications. Those scripts run on the JVM and can access Java classes as well, so you can't simply test them against a standalone interpreter of e.g. V8 or *Monkey.
&gt;Was asp.net not done by this one engineer who scribbled something together while in an airplane? &gt;It wasn't because of customer demand. I guess you're talking about MVC. ScottGu wrote a prototype while he was on a plane. That code was and is not part of any production code. And he started to write it because MS ASP.NET developers didn't like Web Forms. &gt;If ms improved win forms to be as good as JSF and there was a balusc for win forms and a PrimeFaces, do you really think people would choose only asp.net MVC for new projects??? I think not! They had that option but they went the MVC route. I don't see the problem with that. It is not a better route, just a different one. And I don't know why I'm getting downvoted. It seems a lot of people here not only don't know anything about how the ASP.NET world works right now but they actually don't want to even hear about it.
&gt;but MS delivered what its clients asked for Was thinking that everything should be programmed in JavaScript also what its clients asked for? Was the horrible metro UI on the desktop what its clients asked for? Was the removal of the start button what its clients asked for? Did any client ever ask for Zune? I don't think Microsoft has such a good track record of delivering what clients ask for.
This one is better: [Everything you need to know about java](http://whyjavasucks.com/)
It won't give you all of that, but you should check out VisualVM, if you've not already. Comes in the JDK, and gives you most of what the NetBeans profiler provides. There's an Eclipse plugin to launch it, but really, just as easy to create a shortcut, or execute as a command.
Why is that one better?
JAR is (almost) exactly the same as ZIP, which has a lot of limitations that tar doesn't have.
I think most of these tools could be replaced with visualvm. (is jvisualvm different from visualvm?). Maybe not the bytecode analysis, but I've not ever found a need to do any peaking at the bytecode.
JDBC 4.1 does in fact already support [timestamp with time zone](http://docs.oracle.com/javase/8/docs/api/java/sql/Types.html#TIMESTAMP_WITH_TIMEZONE). It was added in order to be compatible with the new date/time API in JDK8.
jmc anyone?
TL;DR: http://akka.io
Some of the plugins are useful too. There's an [OQL](http://visualvm.java.net/oqlhelp.html) plugin for heap analysis that's fairly useful for large/complicated java apps.
This is a really weird place to ask this question but: parseInt has a form that takes two arguments. 
Yeah that and jvisualvm.
I just checked it out. My biggest comment: I'd much rather learn through print than through AV. I can more easily control the pace of information through reading. Layout is pleasing enough. I'd be very interested in this if I could read the material.
When doing the check for car size it's just a string so use equalsIgnoreCase to compare strings also make sure the string that was entered is a valid input, so like the user can't input like "super super small" Ect. Edit: I wish I was on my computer... I'd rewrite this and see if I could get it working for you. I'll check back later and if you still don't have it fixed I'll rewrite it.
So... whats the question? Any chance you use git? A github repo is always nice when sharing code.
My question is how do I get the main method to accept and send the String inputs to the constructors for their individual display methods?
Hi, This is my first post on Reddit and actually made an account just to answer this :). I'm a university student learning Java and although I find myself good, I apologize if the way I do things offend anyone if they're incorrect. First I will correct your error and later I can post to help improve your code. Your problem is you're misusing JOptionPane. It requires a JFrame which you set to null. Typically when you want to use GUI's, you build an entire one including a JFrame, JButtons, etc. From the Java docs found here http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html "Every dialog is dependent on a Frame component.". To solve this issue, remove the Swing components in your display function. I included the code to fix it. Go down to the display function and you will see what I mean. http://pastebin.com/PhvfQt6q The same thing needs to be done to your other display method as I recall it also uses JOptionPane.
You already are, your code just isn't consistent. After "Enter your name" you have input.next(); String rentalName = input.nextLine(); input.next() doesn't do what you think it does, delete it. Same with when you request car size. Look at what your CarRental class does. You create a new CarRental with: CarRental firstRental = new CarRental(rentalName, rentalZipCode, rentalLength, rentalCarSize); Which performs: public CarRental(String name, int zipCode, int days, String carSize) { this.rentalName = name; this.rentalZipCode = zipCode; this.rentalCarSize = carSize; this.rentalLength = days; } Then you're calling: firstRental.display(); Which performs: public void display() { JOptionPane.showMessageDialog(null, "Customer Details" + "\nName = " + getRentalName() + "\nZip Code = " + rentalZipCode + "\nCar Size = " + getRentalCarSize() + "\nRental Fee = " + rentalFeeDaily + "/daily" + "\nRental Length = " + rentalLength + "\nTotal Fee = " + rentalFeeTotal, "Simmons Car Rental", JOptionPane.INFORMATION_MESSAGE); } But you're pulling from the default fields for rentalFeeDaily and rentalFeeTotal Do you see the problem?
The code compiles and run as is.
No, not at all, didn't even look at it. I'm saying OP's code compiles... even though he misuses JOptionPane.
Ah okay I understand. Yes, his does compile the problem is after typing in what type of vehicle (e.g. Economy), it stops there and the problem (as we both mentioned) is because of the misuse of JOptionPane. Thanks for clarifying :).
JOptionPane is being used correctly. The problem is elsewhere.
&gt; nPane is being used correctly. The problem is elsewhere. I don't think so. If you run his current code and after you enter the type of vehicle you want, nothing happens. By removing the JOptionPane and using System.out.println, his display method works. From his original post: "I cannot get the output to finish and do not know why. " By compiling the code in my pastebin, it will now display the output. 
Strange, lol. Maybe I am wrong then. Well we will see for his reply and if it solves his issue or not. Cool community here too.
that's great! so have you taken a look at all the links and any of the api
Thanks for all the comments and help. I am still trying to sort through them to figure out exactly what I have done wrong. I appreciate the help.
Yes I do and that makes a lot more sense now. I am still confused on how to get it to pull the input value and not the default. 
If you are interested in FreeMind, you should also (and first) have a look at [Freeplane](http://www.freeplane.org/wiki/index.php/Main_Page), the friendly community fork that was started a few years ago and that has progressed significantly more than FreeMind since then.
If adding your own class imports is your thing then well i guess this one really floats !
 Read the [IO tutorial](http://docs.oracle.com/javase/tutorial/essential/io/) and you'll have your answer rather quickly. You should get used to referring to Oracle's tutorials and the [API Documentation.](http://docs.oracle.com/javase/8/docs/api/) 
He's not using a JFrame, but Java will create a JOptionPane with a default Frame nevertheless.
Thanks for the info. Sure will checkout.
yes I have. Also, I have the leap motion controller if there are plans to develop for it.
Read the docs, learn REST, check out this http://www.mkyong.com/webservices/jax-rs/restfull-java-client-with-java-net-url/ for a similar example
Although I have a faster computer (2009 MacBook Pro, 8gb memory, SSD), I do notice a distinct difference between eclipse and IntelliJ. A simple build and run on eclipse may be less than 1 second, but IntelliJ could take 3 or 4 seconds
Intellij has a laptop mode or low power mode. Did you enable that?
I played around JavaFx in last three months for my own (toy applications to some with little complexity). Honestly I don't get why it is so snubbed by developers. The night I developed (and unit-tested) RIA in plain old java. The day I woke up into the nightmare of HTML5+CSS+JS(+browser) at work. Edit: ye, I know of the huge security problems of the Java plugin last year. Hope they will fix it. 
Join the Embedded Industry that builds point of sales machines, kiosks, ATMs, and several other things, and soon you will realize that there's a huge market for JavaFX. :-)
What does the mode do? 
Because it's a very popular (popular != good) scripting language ;p
You have mentioned three technologies which are essentially independent. I would read about all three on wikipedia, but here are brief summaries. And as always, google will take it further. 1) Servlet. This is actually an interface specification which is now probably close to 15 years old and has undergone many revisions. The two sides of the interface are a) Application Server and b) Servlet implementations. The interface of the servlet provides an easy way to handle HTTP requests. The Application server contains the "main()" method and does all the threading and session management. Most people write to the callee side of the interface. 2) In your particular case "Tomcat7" is an application server that does the caller side of the servlet interface and listens on your HTTP port. Tomcat is the old standby for this, and aside from the servlet API implement some other stuff as well. 3) ActiveMQ broker is pretty much unrelated to #1 and #2. You could run this separately from the others if need be. Activemq is a messaging system. programs can push messages into a "queue" or "bus" and receiving systems will receive those messages. IT can be configured in various ways to provide transaction and/or persistent behavior. The broker is the part of the activeMQ which is sort of like the traffic director. http://tomcat.apache.org/tomcat-7.0-doc/servletapi/ http://en.wikipedia.org/wiki/Java_Servlet and http://en.wikipedia.org/wiki/Activemq 
http://stackoverflow.com/questions/11725605/what-is-power-save-mode-in-intellij-idea-and-other-jetbrains-ides
Servlets extend HttpServlet, which is a superclass that defines a number of methods that the container looks for. The configuration for a servlet, web.xml, says "Hey this class over here: It maps to /blah, use its methods to answer various types of calls", so the container goes ahead an instantiates instance(s) of your servlet class as instances of HttpServlet, and will invoke the appropriate method based on the request type, e.g. GET, POST, PUT. The main method actually lives in Tomcat, along with a webserver, some other code that finds the appropriate servlet for a request, and invokes the appropriate method. Basically what's going on is: 1. Hey I just got a request on a particular path 2. What servlet maps to this path 3. Create an instance of this servlet, if it doesn't already exist in the pool 4. servlet.doGet()
For federal jobs, the market for Swing has a lot of inertia behind it. So you would only see it in greenfield projects. However web based delivery is currently the fashionable way to get government funding, so government contracts rarely get a desktop pass unless there are some extreme interface requirements like 10K node interactive graphs or complex orbital mechanics. Also note that Federal contacting rarely does embedded development that isn't attached to SCI codewords, and those fiefdoms have their own embedded stacks that heavily favor the Not Invented Here mentality.
Everytime i read about case classes in Scala, I sigh. This would save much time and code that can go wrong. and it's SO simple. And yes, I've used them a bit, so it's not purely dreaming.
A post saying something is useless without any detail as to why with empirical evidence or what to use instead and why with empirical evidence. How surprising.
Pretty reasonable. But /r/java is the wrong place for such thoughts :)
Forget about microprocessors. Since the 4004 was released back in 1971, microprocessors have been misused too much.
ArrayDeque for pushing/polling to/from the tails, ArrayList for almost everything else. Using LinkedList without calling listIterator() and then add() or remove() on this iterator is always a mistake. I thought it is obvious.
Yes
The JVM itself is different, is it not? The Java API is basically the same though. If op is using OpenJDK, then it isn't the Oracle JVM.
&gt; You have mentioned three technologies which are essentially independent. I would read about all three on wikipedia, but here are brief summaries. And as always, google will take it further. Thanks for the explanations. Your description of what servlets are and what they do is what I had assumed, but then being able to run additional services (in this case, the broker) from a servlet seems quite different from this simple concept. If I were to use something more CGI-ish like Python, then I'd have to start up the broker and the webserver as separate services. Perhaps the problem here is that I've confused servlets with something entirely different? Maybe it's better to say that I've configured the application server, via my WAR file, to launch additional services, and that the servlet is solely the web facing part to execute logic?
Post the program...
There is already a roadmap in place to add some degree of reification through [Project Valhalla](http://openjdk.java.net/projects/valhalla/). The Java Language Architect (Brian Goetz) is very keen on it. 
I was in the exact same situation as you. I took an hour to read a few chapters of "Head First - Servlets and JSP" (see [here](http://www.headfirstlabs.com/books/hfsvlt/)) and it helped **ALOT**. The book was written a while ago but still, it's a good introduction.
It's your thread. And you're relying on these facts to support your argument. Why should I have to look up stuff? You're trying to convince *me*. Back up your arguments.
~~No I did not.~~ edit. I made fresh install. Rebooted the PC [so cache is clean] and enabled the laptop mode. Compilation time in IntelliJ IDEA rised to... **2 minutes and 58 seconds.**
http://www.pastebin.ca/2834711
That's intresting!
Ok. I will try. I created the account there. What details I should post? Maybe there is some buildin verbose logger in IDEA?
sorry. not native english speaker :)
http://youtrack.jetbrains.com/issue/IDEA-122367 maybe or https://bugs.openjdk.java.net/browse/JDK-8043253?page=com.atlassian.streams.streams-jira-plugin:activity-stream-issue-tab otherwise i am all out of defending intellij
sweet as do I!! so have you messed around with any of the api? now I kind of have a game plan for what might be interesting to work on. I'm not sure if you're at all familiar with the game advanced wars? well it may be fun to make a game that works with vufora and leap motion that has a game mechanic like that. what also might be neat to do is make a small magazine we print out that uses each page as a test so you open it up and the first page is a virtual desktop, second page becomes a playable game, third page demonstrates how you can teach others with this form of interaction. and so on. What do you guys think? now I have tons of 3d experience and can create models and know how to work in unity. I can set up scenes and do some programming. My skill set in programming is a bit weak but I'm learning so what would you like to focus in? 
I've encountered exactly the same problem with IntelliJ IDEA. Extremely slow compile times when compared to Eclipse.
I agree that the walled garden of Swing or JavaFX is a great environment for developers. I wish it had a future. But there is no market for JavaFX. There are only 11 JavaFX jobs across the entire nation right now on Dice.com. 
Mostly I use jconsole for monitoring VMs on several remote servers. It might just be that I'm more familiar with jconsole, but these are a few things I prefer about jconsole, jvisualvm might let me do some of them, but I don't know how: * I can pass one or more remote JMX addresses on the command line, * More traditional child windows and the Window -&gt; Tile option so I can easily see the status of several servers at once. * Full access to all of the MBeans. jvisualvm has some great features that jconsole doesn't, and when I need them, I'm glad to have jvisualvm, but jconsole is usually my first choice.
My lack of knowledge would make me assume that maybe JavaFX still has time to pick up, become more stable and over the course of time, take over Swing?
A servlet is just a class that's designed to handle HTTP requests. Servlets can bring in other classes, and can talk to other services as well, like EJBs; but their invocation and use centers around handling HTTP requests. I'm of the opinion that design-wise you should out-source complex business logic to other components like EJBs, and just use servlets for transforming those results; although ideally I'd use JSF where possible instead of just servlets.
Where did you manage to find a system with such low specs? And running windows 8.1??? On 1GB ram?????????
Really? Maven Hello World project in Netbeans compiles instantly.
The JavaFX of today is much different from the previous 2 screwups. Today it is starting to look more and more like WPF. If Oracle continue to develop it on their stated roadmap (and they have hit every milestone so far), it will quietly become the most reasonably sane cross platform desktop development environment out there. *I know!* Oh, the bitter irony, AMIRIGHT? In short, I think you will see more than 11 job listings in the future, but probably not until the Java 9 time frame. Now, I must immediately qualify this post by pointing out the following: I said "reasonably sane", not totally sane, and it won't even be the best thing out there. No, if they don't screw it up (again), it will fall somewhere between the over-engineered undocumentable clusterfuck that is WPF, and the absolute pinnacle of lunacy, which would be C++/Qt. The latter combination of doom being one of humanity's premier achievements in the complicated futility of ignorance. 
Control Panel -&gt; Java -&gt; Security (tab) -&gt; Edit Site List (button) Add the URL of the site where you're running the applet from.
&gt; I've tried Googling it too, and that didn't give me any solutions. No you did not. The [very first hit](http://www.dslreports.com/forum/r29220345-how-to-override-browser-security) when [actually using Google](https://www.google.com/search?q=%22Your+security+settings+have+blocked+an+application+signed+with+an+expired+or+not-yet-valid+certificate.%22) already gives you the answer: &gt; ava was indeed the culprit. Once I amended setting via configure Java/Security/Edit Site List and added the address, FF and IE work. Lots of popups and questions "do you really want to override" but the applet finally loaded. ([direct link](http://www.dslreports.com/forum/r29222129-))
&gt;No you did not. Well, yeah, I kinda did. I researched using .co.uk rather than .com, and the results were different from the one you linked me.
I did that, both http and https, and it didn't work. The same message appears :/. I tried \*.website.com/* as the site, and the direct link to the actual page I'm loading the applet from, neither worked.
oh, let's not worry about specifics, just concepts. You can replace ActiveMQ with pretty any other service for the sake of this discussion. It's simply the concept of having a WAR file start that service that I'm curious about, and if this suggests that what I thought was a servlet (your original description) was too limited or misunderstood. From what you, and others here have written, a servlet is specifically the web-facing HttpServlet instance itself. Since you referred to Tomcat as an application server rather than a servlet container (which I was always using), this helps. The two are not the same and not necessarily (though commonly) related and it makes a bit more sense that I can run additional services through something like a WAR file when taken in that context.
How would I do that?
I believe its listed as the "location" when java first starts in the browser.
... And possibly reified generics
Sorry for the late reply, but, I don't understand what you mean?
totally depends on the use case. I do agree ArrayDeque is often over looked, but there is still plenty of use cases where LinkedList makes more sense than ArrayList.
Name that cases
Very interesting. I'd love to hear a response from JetBrains on this.
To "fix" this in Netbeans you might want to try this: http://luislandgrave.wordpress.com/2011/02/16/use-eclipse-compiler-in-netbeans/ When using Maven in Netbeans you can try this: http://www.gabiaxel.com/2011/10/replacing-javac-with-eclipse-compiler.html
Not that I've tried this, but how is it better than an executable jar-with-dependencies generated with maven? 
Fucking JRebel salespeople... I got a phone call from one who had music going in the background and kept trying to use "hip" phrases throughout the call. I told him I had to go Do the Dew to close our completely annoying conversation/interruption to what the fuck I was working on. Don't cold call me you motherfuckers! Sincerely, Richard Nixon
[Suck it!](http://i.imgur.com/2IkTNIK.png)
It takes more memory in total if the array inside the ArrayList is properly sized. But ArrayList may do a lot of allocations then copies if it's size is changing a lot. And of course if ArrayList allocates a lot, but just over half is used, then it is wasting a lot of space.
I've always noticed this. Thought ppl didnt care.
ArrayList growth factor is 1.5, then max memory overuse is 50%, expected 25%, even if you don't never specify it's capacity. When LinkedList takes 2-3 times more mem anyway.
Huh? I've read the article. It just relies a lot on the reader's experience with the (presumed) pains of packaging and deploying with Shade (in particular) for its pitch. I work on a couple of server-side projects which run exclusively on our internal servers, and we don't depend on god-jars. Aside from that, I've done internal tools, personal projects, uni assignments, etc. where jar-with-dependenices has done the job. The only pain I've had with signed jars was at compile-time when splitting a project in two, I've never touched ServiceLoader, packaging is running on a continuous integration server so I don't care how fast it is, and I'm not entirely sure why consistent experience across build tools would be a particularly exciting selling point since I imagine that most developers (teams, companies) pick one, learn it and stick with it. From this perspective, maybe you can understand my question a little better. I'm honestly curious as to what I'm *actually* missing out on.
Once you've packaged your app, how do you deploy it? How do you set up JVM arguments, system properties and Java agents? You probably do that with shell scripts. Well, Capsule saves you those shell scripts. Your app becomes one executable. All the information on which JVM to choose and how to set it up is declared in the capsule's manifest. Capsule combines ideas from NPM and Docker to give a truly lightweight and powerful JVM-app deployment solution: any JVM app, no matter how complicated, is packaged as one executable with everything but the JVM.
The problem I run in to with jar-with-dependencies, and I think shade shares this problem, is that resources with the same path clobber each other. That probably doesn't matter for classes, but its kind of critical for the [ServiceLoader](http://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html) and related. If you have to deliver more than one database driver, you're kind of hooped with jar-with-dependencies. It looks like capsule solves that by keeping all the component JARs as individual JARs.
I wonder what the results would be if you configured IntelliJ IDEA to use the Eclipse compiler. Not sure if it's in the free edition, but the option is in Settings -&gt; Compiler -&gt; Java Compiler -&gt; Use Compiler
Per https://blogs.oracle.com/henrik/entry/java_7_questions_answers, I was slightly off, but mostly correct: &gt; Q: What is the difference between the source code found in the OpenJDK repository, and the code you use to build the Oracle JDK? &gt; A: It is very close - our build process for Oracle JDK releases builds on OpenJDK 7 by adding just a couple of pieces, like the deployment code, which includes Oracle's implementation of the Java Plugin and Java WebStart, as well as some closed source third party components like a graphics rasterizer, some open source third party components, like Rhino, and a few bits and pieces here and there, like additional documentation or third party fonts. Moving forward, our intent is to open source all pieces of the Oracle JDK except those that we consider commercial features such as JRockit Mission Control (not yet available in Oracle JDK), and replace encumbered third party components with open source alternatives to achieve closer parity between the code bases. 
The basic notion of a servlet doesn't allow anything but serving requests. However if you look at the API more closely there is an init() method and a destroy() method. So this can be used to start and stop long running services in their own thread(s). So you can actually launch and shutdown things like an activemq broker embedded in a servlet. Or you could just spin up a thread to periodically do another job. Lots of flexibility here. If you choose to set something running in init(), make sure to then turn it "off" in destroy. Otherwise your overall app won't shutdown and you will be doing kills or even kill -9's on it ( YUCK! ) The init() destroy() combination is a common pattern that has been replicated with different explicit interfaces many times. For a more modern java example, checkout the "Managed" interface in dropwizard: https://dropwizard.github.io/dropwizard/manual/core.html#managed-objects the methods are called "start()" and "stop()" in this case.
This thing starts a *whole new JVM process?!* That's crazy! Crazy slow, to be specific. Not impressed. Get back to me when the developers of this "Capsule" thing figure out what a class loader is.
https://github.com/reines/dropwizard-debpkg-maven-plugin Definitely not as general as Capsule, but for a subset of deployments, such an approach is very handy.
When I was new to programming, I too looked for these types of websites. My search was very limited in results and when I did find something, it was way too slow paced and easy. It's much, much better that you pick up a book and just read it. Because I'm a University student, I am also friend's with many Professors and am able to get PowerPoint slides off them for courses I am about to take in the upcoming semester. If you can do that with your teachers, that's another way to go. That way, you can coordinate between a book and Power Points; Power Points can mostly get the point across to you but if you need additional information, you would want to use the book.
The brilliancy of jps -l ! It's a real time-saver. No more ps aux | grep ... | cut .... kludges, yay!
Have you ever tried [CodingBat](http://codingbat.com)? It has a ton of samples and a built in compiler that tests for a ton of different cases for each problem. It really help me out as a beginner and was actually reccommended by two of my teachers. It's not fancy, but it works quite well. As a side, they also have problems for Python, so you can check that out as well!
http://ideone.com/ It has a nice interface.
Yeah, me too. I do not understand why they do not pool those compiler processes, from what I measured, just an initialization of loggers take 150ms and before IntelliJ even tells to the process what to compile 500 ms is wasted, and then people complain that TDD on IJ sucks because every little change takes too long to compile.... edit: I hacked IJ to not spawn processes and then it took just 100ms :-(
I think I located the problem: I completely disabled firewall on my system [despite previous permission for IDEA to use localhost] and also I disabled some stack-bashing protection tools that I have used (despite no alerts from IDEA). **Compilation time went down to ~10.5 seconds.** So it's seems that there is some architecture problem in IDEA that uses local-host sockets in strange way.
&gt; Crazy slow, to be specific. 100ms, to be exact. If an extra 100ms at startup is too long for you -- don't use it. That's precisely how long it takes for the first JVM process to boot up, set everything up for the app process and get out of the way. &gt; Get back to me when the developers of this "Capsule" thing figure out what a class loader is. Custom class loaders don't help with native libraries. They don't let you set JVM arguments either; or choose a JVM installation, for that matter.
In many ways: * Supports native libraries * Sets up JVM arguments, system properties, environment variables, Java agents and more * Picks a JVM installation (according to the required version) at runtime * No need to merge services * Doesn't break reflection * Optionally downloads (and shares) dependencies at launch time Like I explain [here](http://www.reddit.com/r/programming/comments/2e9zie/capsule_one_jar_to_rule_them_all/cjxj4f4), in some ways Capsule is a lot more like Docker than it is like a fat jar. 
What you recommend to folks already using dropwizard, which basically does the same single jar stuff plus gives you an easy use to use glue code for jersey, jdbi, etc. Why should we chose Capsule?
I use Dropwizard, too, and I package it with capsule. You can combine the two! Capsule chooses the correct JVM version for you, lets you set up JVM arguments (heap size etc) -- all by declaring values in the jar manifest, and supports native libs and Java agents. Plus, Capsule lets you (optionally) declare dependencies that will be download at first launch (and shared with other capsules), and doesn't cause subtle fat-jar problems (like clashing services).
Same here, eclipse always builds faster, especially on big projects, even on fairly powerful computer with plenty of resources.
One jar does a similar thing. Doesn't likely have the same feature set, but works great for me. I'll check this one out and see what it's got, thanks!
What are your feelings on everything, what type of things would you be interested in focusing in with some of these mechanics? 
Learn how to compile the code (javac) and create jar from command line, same with running java applications from command line ("java -jar" etc). It's actually super easy. After you know this - you can start using the IDE of your choice :) It would be pathetic to not know how to use javac by hand hihi. 
Why spam? It's useful imo. 
Check their history - it's all links to the same site, which is what the rules on spamming say is not ok.
Ugh. These are the worst types of interview questions. The vast majority are just searchable. 
I wouldn't call it a crutch. It's more like, and this is a strange analogy, the difference between pilgrims who crawl hundreds of miles to their place of worship and those who take the plane. Sure, everybody knows how to crawl and you can feel superior if you do it, but it's highly inefficient and in the Java world efficiency is what counts in the end.
ok. sorry then :)
What IDE are you using, some have plugins to do it or come with that functionality out of the box. Also do you still want to use swing or are you going to use javafx?
Yes
Yes. I'd personally recommend IntelliJ Community to start with. You really do save so much time with the IDE refactorings - whether you only use things like automatically adding imports or you go all the way with auto-generating methods, automatically extracting interfaces and everything else you can do.
I use an IDE for a grails application and vim for my nodejs projects. The bigger the project, the more helpful an IDE is
I've been using Eclipse so it would be good to have a plugin for that, but I could change if there is anything interesting out there. As for Swing I don't really mind, it's something that I'm quite familiar with, but I'm more than happy to try out javafx.
Check out Scene Builder and JavaFX8. It's pretty decent for a WYSIWYG tool as long as you don't make a comparison to the MS RAD tooling. JavaFX is very loose and the documentation is paltry so watch out for that. Likely your application is going to be fairly small..so you should be fine.
I like capsule but the extra process bugs me. I can no longer send SIGHUP to my process to reload it, because systemd sees capsule as the service's main process. Not that it's particularly easy to handle signals in the JVM in the first place mind you. I was thinking about this the other day... if capsule made the pid of the process it launched available via jcmd then ExecReload= could use it to send a reload command to the right java process.
So basically when you are not doing real work? I have never in my life been 'not pressed for time'.
An IDE with Java is more often than not the best tool for the job. There are just so many things you can do much more quickly and easily with an IDE. Code completion, indexing, inline documentation, refactoring, boilerplate code gen, inline errors and warnings, integrated debugger, and the list goes on. However, you still need to know **what** you want to do and an IDE cannot help you with that. That is where you need to understand the low-level tools like javac. Make sure you can create a *simple* application with nothing more than a basic text editor and the command line. Once you are comfortable with that you can pick and IDE and go nuts. Just make sure you pick the right IDE, of course. My preferred IDE, &lt;insert flame bait here&gt;, is probably the best bet.
I've started an intro programming course for Uni and they wanted us to use BlueJ - I used it for about 2 days but couldn't handle the simplicity of it. I've since moved on to Eclipse and I feel far more comfortable with learning what the code is doing as i'm not trying to fight against the IDE. However, one caveat - Eclipse can be a little too good sometimes; it can automatically fix some errors if you want it to but I avoid this, and actually take the time to do the fixes myself. I suppose you really need to figure out what direction you're heading; if it's possible that you wouldn't be able to use an IDE for whatever reason, then it's probably wise to go down that path so that you're prepared for when that happens. Or, alternatively always have your laptop with a couple of VMs for the different platforms you could be working on.
That is a waste of time as it is not something fundamental which will actually help him in any way.
That is some atrocious conventions in terms of method and variable names.
I would be more worried that you will not know what to do with it. Eclipse is the most counterintuitive software I have ever seen.
So you are saying that ability to use the compiler is not fundamental for programmer?
&gt; w what to do with it. Eclipse is the most counterintuitive software I have ever seen. have you ever used Emacs? :)
I'd say having a good understanding of the basics is critically important for any software engineer. I'd be a bit embarrassed if one of my coworkers didn't know how to do basic tasks from a command line.
At first any IDE is going to look weird. Eclipse is quite nice and good for beginners as well. All you have to do is keep learning, trust me it isn't hard at all. I know use IntelIJ Ultimate but most people avoid it due to long compilation time
by command line, yes.
The JVM takes tens of milliseconds to start up. That is a fact which you might deny (or "don't believe") like those who deny evolution, or you can simply measure (time a Java "hello world; even packed in a Jar, the full execution will only be about 100ms). From that time on, it's all up to the application itself. Often applications load thousands of classes, and even then, performance might not stabilize until the hot methods are JIT-compiled. Capsule loads exactly 1 application class, plus a few dozen JDK classes. You can call bullshit from here to eternity but capsule really does load and launch your process in 100ms. 
There's a very real difference between developers that know the fundamentals and use an IDE as a tool to work more efficiently and those that use an IDE as a crutch. You would be surprised how many "professional" developers fall in the later category. I've been a professional developer for nearly 25 years (and a developer generally for right around 35) and I've seen both many times over the years. I've been a team lead for a long time now and the biggest challenge I face is having developers under me (and hiring new developers, which I do a lot of these days) who actually know what they're doing and CAN work without an IDE, even if they don't. My suggestion would be to spend at least SOME time working without an IDE... get a feel for working on the command line, on looking at code without the benefit of auto-completion and jump-to-references and automated refactoring and all that generally good stuff... really understand how those things work and how to do them manually... GET IN GOOD CODING HABITS with regard to things like code formatting and the little things that make for better code that an IDE would flag for you... get it all into your head FIRST... when it's there, THEN start using an IDE and become a more efficient developer as a result. Let me give you a more concrete example of why I think this is important... I have a lot of off-shore resources these days that I'm in charge of... they're not the best developers unfortunately as a generality, so I've been trying to change their bad habits... one of the things they're terrible at is code formatting... it's just not something they even think about... they write sloppy code, code that is difficult to read and find problems with... they're line is always "but I can just click a button and have the IDE format it for me"... well, firstly, those tools NEVER get it QUITE right... but that's really a minor point... the bigger point is that there's been more than a few times where they had a problem with their code, and I as team lead step in to help debug it, I spot the problem pretty quickly (just because I've been at this game a lot longer then them) and I realize that at least part of the reason they didn't find the problem themselves is sloppy coding... so, instead of pointing out the problem, I make a relatively minor formatting change and then ask them to look at the code again... and guess what? Nearly every time the spot it almost immediately! If they had good habits and were working neatly all along they probably would have found that issue on their own which means they ultimately would have been a more efficient and effective developer. Instead, because they were counting on an IDE to do their job for them, they failed. It's not just code formatting of course, but that's an easy example. So yeah, I say spend some time without an IDE first and make sure you have good habits. When you finally graduate to an IDE you'll not only understand what they're doing for you (something that is very important when they inevitably fail every now and again) but you'll also find that they'll be an extension of good habits, not spackling over bad ones. A good developer is a good developer with or without an IDE at the end of the day- make sure that describes you and the IDE will only make you better.
Early in its evolution, Capsule captured signals and forwarded them to the child process (see [here](https://github.com/puniverse/capsule/blob/f1bb33cc14e4c9159da3bb890f08d58d51b7e446/src/main/java/Capsule.java#L996)), but that code has been taken out because the use-case wasn't clear and it only worked on POSIX. I'll be happy to discuss this point on the [mailing list](https://groups.google.com/forum/#!forum/capsule-user). What would be really cool is that if there were a way for Capsule to *exec* (in the POSIX sense) the new process without forking, and do it in an OS-neutral way.
yes, totally. changing the method signature of a highly used interface becomes a 5 second endeavor vs. potentially hours.
yeah, he's basically saying "I do things inefficiently when i don't have a deadline to help pass the time". Quite literally, he's making an argument for using an IDE all of the time.
For me, it is enough to know that they exist, along with jmap, jstack - which are actually useful. Understanding of the basics != knowing how to use some commands.
Fair. Normally in school projects when I felt I had the ability to take my time and personal projects I would use text editors. But yeah, professionally you will almost always be using an IDE. That being said you'll still be writing short programs to test an idea or perform a task and its a lot quick to just open up a text editor and compile/run it on your own. I used an IDE when I first learned to program, then didn't use one again for 2 years. Now that I have started professional work its very useful to be back on an IDE but I'm very confident in my abilities without one. I would say if you can write some simple IO without looking anything up you're fine to use an IDE. I just voice caution ever since I saw my friend struggle to write a quick program because he could not remember the specific keywords for a java class and main method because an IDE had made it for him for so long
I don't "do things inefficiently to pass time". I just like refreshing my knowledge of some basic things an IDE does for you. You're 100% right, it is inefficient in comparison, but it does serve a purpose other than wasting time
I bet that most IDE-addicted developers don't know how to write a simple hello world application without using autocompletion ;p
And why should we?
You pretty much will be more productive for anything but the simplest java. There's also idea from jetbrains if eclipse doesn't float your boat.
If you dont want to use an advanced IDE use dr Java. Our teacher didn't want use to use eclipse because she thought it mad beginners not learn why they typed what they type. I grew to like dr Java.
Let's say you're a mechanic and you turn screws for a living. After your 8 hour shift you're inserted and removed a total of 500 screws. The one day some new guy starts on the assembly line next to you and he has a power screwdriver. He turns 2500 screws in 8 hours...is it a crutch? No, he knows how to use a manual screwdriver but he recognizes that the power screwdriver boosts his productivity. I started in a time before IDEs (get off my lawn!), they're a good thing. Another thing to think about, many beginners struggle with keeping code well formatted which makes it very hard for others to help them debug it. IDEs do that for you. And IDEs aren't just front-end displayers of code completion, they make deubgging so much faster. And refactoring...oh man, talk about making life simpler. Learn to use the simple tools, vi, notepad, whatever and learn your command line compiler. Then you'll understand when the IDE actually fails you someday.
Wrong on all counts. There comes a time when your IDE will do it wrong. And you get to choose then between wasting significant amounts of time ripping it all out so you can get the hopefully-working-default-settings back, or you can get in there and get your hands dirty and identify and make the necessary adjustment. 
&gt; The best part though was when even my skilled development coworkers were blown away by features they didn't know existed. Our office had John from egghead.io in for some angular training, and you could hear the jaws drop when he started to work his magic. If I recall correctly, he used to work for JetBrains, so its not exactly surprising that he knew some tricks :) Ooh... like what exactly? Any links? Much appreciated! 
Any of the better editors have a dark theme background now and I've done this in Vim, emacs, Eclipse, IntelliJ, Notepad++, and many others. Netbeans is fine, but your post would lead me to believe that you could benefit from some time using/learning Java without an IDE. 
Exactly! And that's why you should know what the IDE is automating for you, so you don't go "amplifying" with the wrong techniques. Example: global search / replace vs. interface refactoring. Both would work, but one of them is likely to be about 10x faster for an interface change. 
A common view when you're not having to automate a build process in a CI environment. It's always good to have a peak under-the-hood so to speak so you can have maybe even a vague understanding of how things work. CLI invocation of build tools is (or at least should be) a common knowledge amongst all developers as it divorces you from potential 'vendor lock in' associated with being a netbeans master or an Intelli J Jedi.
Come back to this comment when you start doing real work, you'll have a good laugh, I promise.
I can't recall if jar-with-dependencies is an "uberjar" (unpack all deps then repack as a single jar) or jars-within-a-jar. If the former, the problems are indeed those listed (which granted can be either ignored or worked around). Capsule is more like the latter, but it also provides its own glue code which (this is why i assumed you didn't read, cause it's all in there) is used as the Main-Class of the jar (replacing yours); that Capsule main class will unpack the deps and fork a process that starts _your_ main class with the appropriate classpath. Not something you couldn't write yourself over and over for each app where you need it, it's just nice to get it with less effort. That said I also don't believe it's a silver bullet either, cfr the rest of my comment (of which i'm gonna go and read other replies now:D)
The problem with tutorials is they try to explain too much. Create the class and try passing different stuff in and see what happens. Without getting in to the discussion of Java Generics weaknesses just take it that the class needs to know what thing is going in to it. Imagine you want to pass in a Map or a List or a String. By telling the method what type of a .class you want to pass it will know which type to return. It's easier to just run this up and pass in Map.class and String.class to see it 'work'. No idea what em.find does in this example though. edit: the explanation 'can't just pass E.class to arg0 because of type erasure' is misleading though. The issue is that there is no E.class. Generics are a bit of a logical stretch, let me know if you could do with a better example
And [NetBeans](http://netbeans.org), too.
Yes but keep in mind that there are some things they don't handle that well and sometimes you might want to go ahead and learn to do it manually instead. Compiling jars with third party dependencies comes to mind.
[JFormDesigner](http://formdev.com) is pretty good, at least 4 out of 5 stars. It also integrates with the major IDE's fairly well. I still think there's a better way to make GUI's that's more in line with traditional development. If I could just get some time to dig into ANTLR and make it happen...
It's not a crutch, it's a tool. Knowing how to work with java without using an IDE is an important skill for a java programmer, but that can be learned once you're already comfortable with and IDE. Personally, I use vim for basically everything except java, but I find that the IDE tooling for java is too good to justify not using one. Make sure to experiment with the IDE options available to you. Eclipse is a great IDE, but so are Intellij IDEA and Netbeans. Make an informed choice of IDE. If you're an avid vim user, you should try eclim, which lets you integrate eclipse's and vim's functionality in various ways. I'm sure there's a similarly powerful emacs alternative.
Meh, "superior" is debatable. I use both almost daily and they each have their strengths and warts. Both are really amazing today compared to the tools we had just a few years ago, so I'm not complaining about either one heh.
You should definitely be using an IDE. Not using an IDE because you fear it would become a crutch would be equivalent to not using any libraries in your code fearing *they* would become a crutch, therefore opting to code everything from scratch (which in most cases would be insane). You should have knowledge of how the Java compilation and invocation process works, how Ant works, what a manifest file is. But having to manage those details by hand for every project just becomes a nuisance, and removes focus from the actual code. Productivity is very important when it comes to coding, and the ability to effectively use an IDE plays a huge part in that. Especially when it comes to a verbose language like Java. Also, I would recommend that you try Intellij.
This will help http://code.activestate.com/lists/python-list/672295/
grep/sed?
Well, the one to blame is me trying to follow a tutorial about Java Persistence API, when i lack decent Java knowledge/experience:) The find method is from the EntityManager's interface, i didn't specify it because i didn't think it was a relevant detail. I am actually only watching the video and taking notes (not following along with the actual coding), and i honestly wouldn't know how to create a simpler example..... This is not even a key point in the tutorial, but it kinda struck me because i thought "what the hell is going on here??" Basically what i'm wondering is: what is the difference between E.class and the Class&lt;E&gt; field? Why does it compile only with the latter? If for example i look at http://docs.oracle.com/javase/7/docs/api/ and i read the sentence: &gt; For example, the type of String.class is Class&lt;String&gt;. i would be tempted to think: "well, then the type of E.class is Class&lt;E&gt;", but i'm clearly wrong because String is not a generic class. 
Oh thanks, i had just replied to case_ when i saw your post. Well, I definitely need to learn more about generics and type erasure in general (I realize i am pretty weak about the subject). And about the video, he did mention there are other ways to do that. Thanks for the link, i was having having a hard time even googling for an explanation...
&gt; what is the difference between E.class and the Class&lt;E&gt; field? Why does it compile only with the latter? Yeah, this is a bit odd but consider the following will all compile. Class.class Class&lt;?&gt;.class Class&lt;String&gt;.class E is just a placeholder for the class you want to use. Therefore Repository&lt;E&gt; Repository&lt;?&gt; Repository&lt;Object&gt; Repository&lt;String&gt; Repository&lt;Map&gt; etc.. Does this answer your question? Also by convention, T = Type, E = Entity, K = Key, V = Value etc
I didn't say the number of companies in the industry for embedded is huge, or that there are millions of jobs for it. I said the *market* for it is huge. There aren't many aircraft companies (Airbus, Boing, Embraer, to name a few), but the market is huge. Yet if you search on Dice for "aircraft mechanic" there are 5 job posts. JavaFX plays an important role for building devices that require a UI. It is in the core of Java SE now, has optimizations for embedded hardware, native touch support, and heck, even supports HTML5/JS. Remember those panels to display the flight table arrival/departure at airports? Heck, why people still deploy a regular Windows OS (for general purpose), when all they really need is one visual application to be displayed? JavaFX is the solution. Costs less to build, and to maintain. EDIT: and please... don't cite one site only to make your argument
Nice! I was looking for something like this a while ago, but I gave up on the project I was thinking about.
No, you should use an IDE as an IDE. 
I get what you are saying but this is pretty shaky logic. By that rationale you shouldn't even use a text editor unless you've memorized the entire ASCII table and understand the system calls for displaying to the screen and writing to disk. You also probably shouldn't use the Java compiler until you understand how to generate bytecode by hand. Tools exist precisely so we don't have to know every detail. If you don't know Java (or anything) that fact is going to be true whether you use an IDE or not.
no worries, I'm happy to answer PM's or whatever. The JavaDoc isn't terrible at explaining Generic methods -http://docs.oracle.com/javase/tutorial/extra/generics/methods.html 
Understanding does not have an intrinsic value, the value comes from benefiting from that understanding/knowledge, knowing some commands which you can look up in seconds and which you will rarely use only in some obscure situations does not seem to me to be worth the time. I witness developers who do not know how to use an IDE all the time, that is something in which people should invest. I do not care whether you can compile or debug from command line, the IDE is right there and you are wasting everyones time by not knowing how to use it properly and be productive. The same goes for writing code in notepad, it will not help you being productive. I would not write code in notepad, I do not remember in which packages some basic classes are, precise names of classes or methods, and I do not need to nor want to. Human memory is limited and it is better to not fill it with junk. 
And I do get that. I see that my preference on when to use an IDE probably isn't 100% logical, its partly preferential. I'm just a firm believer in being confident in most basic of ways before using shortcuts. My first lesson in life was learning to use paper maps before I was allowed near a GPS. Regardless, you make a fine point and maybe my advice is a little too personal. 
You could try doing some of the early problems on https://projecteuler.net/problems
thanks, I'll try it out
How often is this updated because IP allocation can change regularly
You'll wonder why you ever asked that question once you've used a good one. I hate Eclipse, use IDEA 
Not sure why you're downvoted, Eclipse's UI is definitely one of the worst things about it. That's partly because it's an IDE platform tailored to be a Java IDE, in my theory. However Eclipse would be better than nothing, it's functionally quite powerful once you get it working. Just way slower to get work done than in IDEA IMO
compared to smart, code-aware refactoring? that automatically integrates with a version control client?
Why would you EVER try to program in java (beginning or otherwise) without an IDE?
Any smart code aware refactoring needs babysitting if you're refactoring more than what you can write up a simple AST based regex for. 
"smart" means it doesn't "need babysitting"... what refactoring tools do you use that need babysitting, do you have an example? 
&gt; He also says he can't just pass E.class to arg0 because of type erasure. `E.class` doesn't make sense because E is gone at runtime. Erased from existence. The trick is to provide the class of type E at compile time, so at runtime you will have the right class even though E has disappeared in a puff of smoke. Thus, you provide the real E at compile time: new Repository&lt;Foo&gt;(Foo.class) at runtime, when `Class&lt;E&gt; entityClass` is reduced to `Class entityClass`, you really have `String.class` for `arg0`.
&gt; AST based regex These two words should never go together. ASTs are parse artifacts, created by a real parser like Antlr or bison. regex is for pattern matching, not parsing.
Try [TopCoder](http://www.topcoder.com). In addition to algorithm/math problems like project Euler; there are development and design contests as well. 
you could try [r/dailyprogrammer](http://us.reddit.com/r/dailyprogrammer/)
you could also try www.codeeval.com.
You're looking for patterns that resemble Java syntax, but such pattern matching can be extremely fragile. For example, the above pattern won't match cases where the modifiers come before public (legal syntax) or combinations of modifiers, matching multiple arguments, etc., etc.. There's a reason why you should never use regexes to parse HTML (and use a real parser for serious work), because there is enough variety in real source that regexes have to be constantly maintained and tweaked in almost write-only form because they don't actually understand syntax. I would never trust a regex in a complex refactoring, and would rather use tools that actually understand syntax.
You should use it as a crutch until programming comes more naturally. Then you should investigate Java build tools such as ant, maven, gradle, ant+ivy and write your own build scripts. I use an IDE because I get *really* tired of trying to remember every freaking package classes are in. I know the class, or something in the name of what I want, but adding an import statement all the time is just tedious. That's what I use IDEs for. Also to generate getters/setters.
&gt; I would never trust a regex in a complex refactoring, and would rather use tools that actually understand syntax. Yeah like I said I use ANTLR for complex refactoring. I use regex for lazy and quick things. &gt; You're looking for patterns that resemble Java syntax, but such pattern matching can be extremely fragile. For example, the above pattern won't match cases where the modifiers come before public (legal syntax) or combinations of modifiers, matching multiple arguments, etc., etc.. If you're not using style checking rules or uncrustify on check-in or have a strict style guide you have way more problems then regex based refactoring. 
If you're programming at work and what to get shit done, then by all means, use an IDE. If you're planning to interview at Google or Facebook and you want to be able to write whiteboard code during a technical interview, and don't want the autocomplete to have dulled your senses, then use a text editor.
You are correct: That was a strange analogy.
If it's fundamental to being a programmer you should have no trouble explaining the huge difference between the work products of someone who remembers the syntax for javac and someone who would have to google it. Because you could damn sure explain that for someone who didn't understand other fundamentals of being a programmer like memory management, inheritance, or big-O of different data structure's access patterns.
Please repost on /r/javahelp
A brief skim of the code suggests that it's using [this data source]( http://dev.maxmind.com/geoip/legacy/geolite/) which is (apparently) updated monthly.
Not only that, by using an IDE you're preventing avoidable mistakes. Forgot to rename that other constant? The IDE refactoring does it for you. Externalize strings? The IDE even creates your classes and puts your strings in nicely placed properties files. Moving or renaming variables, classes or objects? The IDE checks that all references are taken care of. Trying not to use an IDE is wasting a precious resource: Your time. EVERYONE in Java uses IDEs now. It's the new standard, so you shouldn't waste time and effort trying to do things in a "manly" way.
Check out [practice challenges](https://www.learneroo.com/modules/20) on my site [Learneroo.com](http://www.learneroo.com).
k
Here's a few REAL basic-intermediate Java Challenges https://github.com/frostwire/frostwire-desktop/issues https://github.com/frostwire/frostwire-android/issues 
How come it doesn't contain the git or hg repo and rebuild itself on launch?
Or, a intelligence amplification device.
Netbeans has a great integrated Swing GUI designer.
its like building something with wood and nails and saying using the hammer is a crutch and you don't know what you would do without a hammer.
Try these: http://uva.onlinejudge.org/ There's loads of problems at a range of difficulties, plus it executes and checks your answers for you
You can also take a look at the java project [libgdx](http://libgdx.badlogicgames.com/), not because it's a library you may want to use, but because they provide a very helpful way to develop a single java application on multiple platforms. "Write it once run it on all the things" kind of sort of like that.
Yes. It uses that source. I use the library in a project with a scheduler (quartz). And every month updates a db table with the data ^^
Im working on a game right now. Try designing a small game with 2D Graphics, sound, Mouse and Keyboard implementation. It's a good challenge just to start it and then if you get into it you can expand it as much as you want.
RSS aggregator?
All your user interface code will have to be rewritten. Your non-UI code will in most likelihood transfer over without changes, except in cases where it uses unsupported JRE classes/methods.
I realize you're joking, but downloading Maven dependencies at runtime is quite useful. First -- just to clarify -- the dependencies are only downloaded once, during the first launch; second, they're shared among different capsules with the same dependencies. Let me give you an example. If you have, say, have a Clojure or Groovy capsule, you might want to embed all dependencies except for the language runtime, simply because it's too big for your taste. If you just declare them as dependencies, all Clojure/Groovy capsules will share the same runtime jars. Similarly, you can have a capsule that is actually a WAR. If someone uses it as a WAR nothing special happens. But if someone executes it directly, it downloads Tomcat and launches itself, and the Tomcat installation is then shared among all such "executable WAR" capsules. Another use for declared dependencies is automatic upgrades. With declared dependencies, you can configure the capsule to download new versions of specific components -- or the entire application -- when they become available. Yet another example is downloading different dependencies based on the environment (in fact, it's easy to program Capsule to look for installed components, and download only those that aren't found). But because we realize this feature isn't required by many capsules, Capsule was built in such a modular way that if you *don't* need declared dependencies, you wan't even even include that piece of Capsule in the JAR. The Capsule class alone is all that's required for everything but declared dependencies, and that's the only class you need to add to your JAR if you're not using this feature. If you are, then you include the classes in the capsule package. All of Capsule's features are solutions to actual, real-life requirements and problems we were facing, and later, other Capsule users. 
Object recognition or path prediction
You want tough? Then you'll most likely fail. Do something easy and expand until it looks very hard. A few ideas to guide you: * Whatever you do, create a finished product. Not an engine, not a framework, something that you can run. Document it, create a neat runnable package (e.g. for Windows, Linux, Mac OS X, Android? J2ME?). Even better, create a community around it. *This* is the hard part. * Don't look for a tough project. Look for a simple idea that interests you and where you can whip up a quick prototype in the matter of a few days. Going from there to *done* will be the hard part. * Create something that you'd want to use. E.g. if I had the time, I'd want to build a MIDI-based scream tracker clone that actually reads and writes MIDI files - with live output, GUI-based editing (maybe using libgdx), the works. At my last attempt, I had a program that matched keys to MIDI output on my J2ME phone, but then I had too little time. * Don't suffer from NIH. Look for existing libraries that can get you some percent further to your goal.
Whilst correcting him you accidentally a letter as well.
I feel Euler is probably a better site when you know the solution, or can figure it out easy enough, but don't know the language. Largest palindromic numbers, is a problem which will get you looking at "toString" type functions which are always a bit different in every language. It sounds stupid, because they're all similar: Java would use Integer(someInt).toString(); C++ has std::to_string(); Ruby has someInt.to_s(); But until I wrote this reply I had no idea to_string existed in C++ - it was just something I never used. Some combinations of languages and problems you have to worry about precision when you're using massive numbers. It's nice to brush up against the limitations every now and again to figure out ways around them. Java for example has BigInt etc. for these types of numbers, but C++ you need another library like GMP, or to figure out your own way. I never actually got my own method to work, but it's an adventure trying! I actually looked up Ruby, and it also needs BigInt/Float etc classes for this sort of problem, but I didn't expect it. Haskell, on the other hand is just a change in type, and it's fairly comfortable to avoid primitive types altogether. 
No offense, but I worked with guys facing customers who a) had no interest nor experience with IT b) needed to sell IT services to clients, because it was their job. Speaking from an engineer's perspective, I would do everything to not get candidates like this hired. As the fun part of your question goes, I don't think anything is really fun, unless you make it fun. So if you're picking a company for your training, I would recommend going there and see how people are, do they care for their job, how they talk to each other, how informal are the conversations, even the office plan. But most importantly see that they need you. Good luck.
"I'm scared that if I take this job I'll end up being a developer forever." Only if you stay doing that forever. You have to control your life, don't be controlled by external forces. Some of the best devs I know also have huge external passions (music is a common one) and came from many backgrounds before getting in to software. I will say that if you've never had a corporate dev job, you probably wouldn't make a good PM, because you won't have seen things from the other side yet. Doesn't mean every PM gig is 9-5 corporate and stilted and such, but... I'm not sure I'd trust a PM or consultant who'd never been exposed to corp development, if only so they know how to recognize bad practices for what they are.
"nobody will hire me for that" I dunno... maybe the netherlands is not as entrepreneurial as the USA, but that statement is weird to me. Why won't they hire you? Is every single job you've ever applied for simply looking for "number of hours sat in a seat"? If so, maybe you should really be looking to move some place with a greater respect for passion/interest/drive/motivation? But... is hours really why you're not being hired? Dig deeper. Maybe they're just not seeing the aptitude in you for the position, and you'd be a round peg in a square hole. Java *web* development can be fun - between grails, play! and some other frameworks, I find it really fun *at times* - other times it's just work, but that's also life. Nothing is 100% fun all the time. But you can find the fun in it if programming is really an interest at all. 
The language is not that important. It' won't be fun just because you use Java instead of C#. It's always about the project and the people you're working with. (You should have probably posted this in /r/programming) Do you like solving technical problems? You should give it a try (but keep looking for other job options). Having some programming experience will help you later when managing software projects. It's much easier to manage developers if you actually understand what they're doing. Also working in the field might help you to get connections which might help you to get a PM job.
They are really looking for experienced people with 3+ years. There were a few junior positions/traineeships for those kind of jobs but It was very hard to get into and I got rejected twice because there are so much people who apply for these kind of jobs and I guess other people were just better qualified than I am.
You probably have a point there. I think I'm going to set up some interviews and ask what I can expect from the job they offer and what kind of projects they do and what culture there is on the workfloor. Should I still post the same question to /r/programming?
Can I make a suggestion for an alternative career path... **Performance Engineering** You get to work with Java, .NET and SQL, and surprisingly a fair amount of C. You tend to be assigned to projects for short periods 2-6 months (not the 18-24+ months that developers get assigned for)...so you get to see lots of different projects. What makes me suggest it, is because you will work closely with the business, project management as well as the technical people. Plus you get to work by yourself on +60% of projects (rather than in a performance engineering team). The key to being a good Performance Engineer is being really good at problem solving, and being able to work closely with both technical and business folk. Plus it's super fun! You get to break stuff all the time, solve interesting problems and look like a hero. It's also a job that is in hot demand...there should be a few consulting companies in your area that are willing to train you up.
I have been trying to build a string de-duplicator (so that HUGE amounts of strings can be stored in the heap), as well as a log analyzer. The project has been going slower and more difficult than I expected, haha.
[Why so slow?](http://imgur.com/BIZ42TS)
Saw this 4 years back still up voting. Java Lover ForeEver
Not Rx specifically but I do tend to apply a functional style in my approach and that often means using anonymous classes. Yes you introduce a lot more boilerplate potentially but it can at least remain readable by careful design.
I have over 5 years performance engineering experience and I'm trying to switch to Java development. Depends what you like, but I would at least try that development internship. Solid development understanding is good base to have in IT industry. 
Don't 'guess'. Ask. If you want that, ask specifically what qualifications - paper and otherwise - they want to see. Then do that. And do more. And keep pressing. If you really want that position, figure out the top qualities they're looking for, then exceed those.
http://i.imgur.com/60BI10A.png
Almost my whole office is like that. It absolutely astounds me that those guys make more money than I do.
Run away. It won't get better.
Ye, big shortage. I posted my resume on one of our biggest jobhunting websites and gotten around 50 calls over 2 weeks offering different kind of traineeships for either .net/java. 
Learning how to use an IDE _really well_ also takes reinforcement and lots and lots of practice. I've seen a lot of developers who use a Eclipse every day, but use a tiny fraction of its potential.
I don't want to be one of 'those' guys. I have done 2k+ hours of internships in those positions and I really have passion for it. I have passion and knowledge of IT, I also have a degree for SysAdministrator, basic knowledge of programming languages, good social- and ananalytical skills. I 'd really like to fill up that missing 'link' between business and IT in a corporation.
&gt; Our teacher didn't want use to use eclipse because she thought it mad beginners not learn why they typed what they type. And did she offer any evidence for that belief? Because it's not remotely obvious that it's true. I have learned at least three different programming languages using an IDE (Pascal, Smalltalk, and Java). And I've never felt like I didn't know why I was typing what I was typing. On the contrary, if you really don't know the syntax of semantics of the programming language, I don't think the IDE is going to help you write working code. What it _does_ do is help you explore unfamiliar APIs and understand and change large codebases. It also helps you spot trivial errors like spelling mistakes, etc, as you type. I don't see how that could possibly be harmful to beginners.
In much more than a decade of developing Java, I don't recall that I've _ever_ needed to run `javac` directly from the command line. I've always used either: 1. a build "script" (Ant, or Maven, or whatever), or 2. an IDE. From this point of view, running `javac` directly from the CLI is the _worst possible_ way to compile Java code, and I don't understand why it would be "pathetic" to not know how to use it.
"ability to use the compiler" != run the compiler directly from the command line. In a professional environment, the compiler is _always_ called indirectly, either via the build script, or by the IDE.
Hey, it's new to me. That was an awesome post. I love that the woman's name was Scala
You can have the best of both worlds if you use [retrolambda](https://github.com/orfjackal/retrolambda).
Lord is this true. I'm one of them because I have yet to find all of its secrets. Everyday I see someone next to me do something cool and get them to teach it to me. It reminds me of excel, anyone can get up and running with it pretty quick, but if you learn to use it fully you become a god
This was a trailer for Javazone 2010 (i believe). Here are some more: [JavaZone 2011 : The Streaming](https://www.youtube.com/watch?v=5U1_KW6ww7Y) [JavaZone 2012: The Java Heist](https://www.youtube.com/watch?v=HXvm76e2X1Q) [JavaZone 2013: Javapocalypse](https://www.youtube.com/watch?v=E3418SeWZfQ) [JavaZone 2014: Writing Bad](https://www.youtube.com/watch?v=DGa6MAibjzA) [JavaZone 2014: Game of Codes](https://www.youtube.com/watch?v=UvyTf5xvaXM)
yes
As a .NET developer, I also had to laugh out loud.
http://misko.hevery.com/2008/08/25/root-cause-of-singletons/ For projects of any size, consider not using the Singleton design pattern. Application singletons are fine, but the Singleton design pattern (with a capital "S") has many drawbacks for testing. Also see this excellent guide from the same site: http://misko.hevery.com/code-reviewers-guide/
When I graduated college in 2008, I thought that being a programmer would be lackluster job because like you said "coding behind a desk 40 hours/week" sounded boring. But, I was better at coding than most of my friends in our Management Information Systems college program and I ended up interviewing for a job at a life insurance company. I was offered what I would consider a very good salary for a recent grad. I ended up taking the job because I was a broke college kid and even if coding was going to be lame, they were going to pay me well. It turned out to be a great decision. My experience is this: the first year or so is just time spent learning the technologies and business skills you need to do your job. Once you can handle the basics, someone who "wants to work between the layers" is someone who is very much in demand and someone who is viewed as a key player on any team. As I became a more senior developer in my company, I spent less time coding and more time doing architecture and other types of technical design that other developers would turn into code. A lot of this time was spent interfacing with the business (Project Managers and Business Analysts) to help achieve the perfect balance of features/cost/complexity. It's actually quite surprising (at least in my experience) how much of software development is a social endeavor. Be wary of a company that does lots of offshore development. Face to face conversations get shit done. If you are worried about a coding job being boring, try and find some cool companies to work for - perhaps a company that is a bit newer but well past the startup phase. I never set out to be a developer, I thought I would be a systems admin, database admin or some kind of IT generalist. But coding is fun, and it pays well. There's also something to be said for working in a job that is highly in demand. I'm leaving my company in two weeks and accepting a job that boosted my current salary by 25%. Plus, coding is cool. You get to speak languages that only computers and fellow geeks understand. tl/dr; Being a java dev is fun and rewarding work. Sometimes you have to take a chance and see what happens.
See http://json.org/java/ :)
Thanks for that.
I had a problem installing Java 8 update. Got two different messages: Error 1603 and Key not valid for use in specified state. I had checked for malware and viruses beforehand and found nothing. I renamed User/Appdata/roaming/Microsoft/crypto/RSA to RSAcorrupt and tried installing again. It worked successfully. 
*have [...] and ananalytical skills* The thing is that in software this is not something you have, but something you mostly acquire through experience. You have to translate problems into code a zillion times, and see others with more experience do it, to actually get good at it. The best managers I have seen are ones who grew from the hands-on software development to a management role. So, it doesn't hurt to be a programmer for a few years, get experience and well-paid, and move to a higher position later.
Best Programming tutorials for begginer
We use [WindowBuilder](http://www.eclipse.org/windowbuilder/) at work. It's awesome!
I am a senior manager in an I.T. company and I can tell you that the best people who do what you call 'functional management' or 'application manager' (we call them "business analysts" or "functional architects") are those that have a software development background. They understand the business requirements and very importantly, they understand how to describe the requirements to the developers because they were developers once upon a time. So my suggestion is to go for the Java traineeship. Become a Java developer and work at it for a couple of years. During that time, study how the business analysts work, how they write the system requirements, what the methodology is that they use to analyse the user requirements. Pretty soon you can start moving over and do more and more analysis yourself. It's not and either or situation. Start as a developer and grow into business analysis. The skills sets are similar: both need logical thinking, an understanding of how systems fit together, attention to detail, careful documentation, working in a team and so on. Best of luck either way.
Of course you should use and IDE. It helps a lot even when just learning Java. 
&gt; certain config files OOTB. like what?
No, that's a technical subreddit, /r/cscareerquestions would be a better fit for this question.
Yes, and this is the appropiate subreddit to talk about scala.
Your link for 'game of codes' has only the trailer, this is the full video: https://www.youtube.com/watch?v=3vI_7os2V_o
Will this http://argo.sourceforge.net/ be of any use? Licensed under http://www.apache.org/licenses/LICENSE-2.0
http://docs.oracle.com/javase/tutorial/networking/urls/readingURL.html Get a Reader Object directly from a URL using this, and pass it into the JDOMParser.parse(reader) method.
Well done, great voice acting and very professional. I would definitely pay a dollar or two to watch the full film. 
You can make your own Optional very easily it's not a complicated class
Google has a similar library I think.
Very clever
I think that in the current climate, it's important for web developers to be well rounded, and that might even mean going past two or three language. Obviously Javascript is a big one, but HTML/CSS, Ruby, Python, and PHP are all important to learn as well. Feel free to check out this post I wrote looking at the reasons why each of these are valuable. http://blog.cartika.com/five-languages-every-web-developer-should-know/
IntelliJ is highly educational as it shows warnings about bad practices, threading problems, inheritance issues etc... Study their code warnings and you learn a ton.
[Google Guava](https://code.google.com/p/guava-libraries/)'s Optional is pretty close.
Nice video, but I think it's trying to make fun of .NET users in general. I've always been OpenSource, putting the majority of my projects up on GitHub and making sure they were cross-compatible with the latest MONO so most people could use it. Yes, it frustrates me a bit that they think .NET is so proprietary, because it's a very good framework. I love java aswell! Thanks for sharing!
That was incredible Haha, that's my first time seeing it and I loved it. I also recognize the dad from Lillehammer! 
Best tutorials on the net
Project Euler SOlution
I'm not a developer (professionally) so I couldn't really give a good picture of what the rest of the team was blown away with. Personally, for simple things like starting up a new page and creating the CSS file, being able to just type the file (that doesn't yet exist), and then hit alt+enter to create the file. Additionally, I just started playing with bower, and its nice to be able to type "angular.min.js" and then press ctrl+space once (to search the current directory) or twice (to search the whole project) which then inserts the full path. I'm sure the things I was impressed with were amateur stuff, or JetBrains Shortcuts 101, but it felt like wizardry to me. I know one of the shortcuts that the teams seemed impressed with was "ss" and then ctrl+space to insert a &lt;script src=""&gt;&lt;/script&gt;. That, coupled with the above shortcuts, really was impressive to see. It, interestingly enough, also made it difficult to follow the tutorial series at times - but John was great, and filled in when it was obvious people were lost in the magic of shortcuts.
you could go over to /r/androiddev, they're probably a more relevant sub to post to
http://stackoverflow.com/a/24430155
Your best be would be the exact same Optional you will find in the JDK, at least the one that shares the exact same API. This way, when you upgrade the codebase to Java 8 (if you do), you only need to change the imports. [Here](http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8-b132/java/util/Optional.java) is a good example from the OpenJDK.
I prefer this one over the recent Game of Thrones parody. 
Have you ever used Java before? If not, well... I don't recommend jumping to android just like that. Its not really easy to learn Android and it may confuse/intimidate you since you really have to understand the ecosystem of Android architecture itself. 
I understand a lot about android since I'm obsessed with it (and java) and I'm learning java right now. I'm currently looking at video tutorials and then taking notes once in an while because my PC got fried a while back. I plan on learning more by doing java work in my school libraries computer via eclipse on a flash drive when I go back to school in about 1 week tomorrow. 
Clone of [ClamAV](http://www.clamav.net/). You can start simple (single file scan only using signatures) all the way up to a full AV product. The usefulness would be for server-side scanning, like scanning file attachments.
alright
so, what are the other technologies you employ 
Well, that is nice stuff and though I haven't played with Angular much in the context of of IntelliJ (or much at all), I do appreciate the impact those little touches that a tool can have on your experience. Sometime when you're wondering what else IDEA can do for you, look up the refactoring features. 
Head First Design Patterns and start poking around Swing or Android API as practice. You'll find yourself knee deep in that shizzle faster than you can say "factory method" :] seriously though, check out the book at least, O'Reilly series on Java are pretty awesome.
They all serve different purposes. They're separated into different modules so that instead of pulling in the entirety of spring as a framework (which is huge) you only depend on the artifacts (and their dependencies) that you actually need.
Quite evidently, they serve different purposes. * The framework primarily provides dependency injection, but actually provides a lot more functionality, such as friendly wrappers for many JEE concepts (transactions, JMX, messaging, JDBC, validation, data binding, e-mail...). It also makes heavy use of reflection, aspects, and dynamically generated proxies to achieve a lot of its magic. * Spring MVC provides a way of composing your web application using the Model/View/Controller paradigm. * Spring Boot is a way of fast-tracking development of a Java application by providing sane, opinionated defaults, favouring convention over configuration, and inspecting the available dependencies on the classpath at runtime to automatically turn features on or off. * Spring Security allows fine-grained access control over parts of your application, and integrates with external systems such as LDAP. You can find out all this from their official documentation, though it could be bewildering trying to absorb it all at once. If you have the cash and opportunity, I recommend going to a Spring training course. Otherwise, try their Getting Started guides online, look at some example apps out there and see how they make use of it.
I'm the lead developer of JHipster, and I confirm it's a real project, as shown by our graphs and activity!
Check out [Java Design Patterns and Architecture](https://www.udemy.com/java-design-patterns-tutorial) free on Udemy.com
Just FYI, [Head First Design Patterns](http://www.amazon.com/Head-First-Design-Patterns-Freeman/dp/0596007124/ref=sr_1_1?ie=UTF8&amp;qid=1408975293&amp;sr=8-1&amp;keywords=Head+First+Design+Patterns) is a really fun way to learn design patterns and programming -- each chapter is kind of like reading a comic book where programmers are using a design pattern and Java to build an application.
read this http://wwwswt.informatik.uni-rostock.de/deutsch/Lehre/Uebung/Beispiele/PatternExamples/patexamples.htm
&gt;Now Java EE has caught up and surpassed Spring Could you please elaborate more and please provide data/fact
The end goal is that it will analyze logs from server's, and tell you about trends, and let you proactively know if those trends change.
By accepting the conditions I grant them the right to my name for marketing purposes? WTF?
Some people found Head First series to be great. However, in my opinion, it seems that the series was made for people who had attention deficit disorder (ADHD). :)
Hi Andrey, I have also seen this issue with various setups. It's annoying that compilation can take some time, but downright infuriating when it takes more than a second (sometimes closer to 10secs) to start the compiler up, even with SSD. Modern development dictates that compilation should be as quick as possible, so this alone prevents me from being 100% Intellij Evangelist.
It is entirely possible to code much of an Android application in other languages, e.g. C or C++. Apart from a few entry points which have to be in java, there's a lot of freedom.
I kind of disagree with you. While I understand where you're coming from with the idea of over engineering code, having a basic idea of some of the more common patters, like factory and strategy, and looking at your problem with then in mind is going to save you a lot if headaches and a whole lot of refactoring pain.
As a relatively new Java developer, I've gained some excellent advice from some of you in this thread. Many thanks! 
For Eclipse (SWT/SWING), it's [WindowBuilder Pro](http://www.eclipse.org/windowbuilder/) (don't let the pro in the name mislead you, it's free!) Found it very decent to work with, yet I still prefer to make the final touches by hand. Netbeans has a GUI builder, too, but I'd stay clear of it because it obfuscates too much code and makes changes to the underlying code unnecessarily difficult.
Name will be used only when sending emails to the winners. What we're going to use is the data actually - your responses - we're going to read them ;-)
Java Developer in the NL here (Dordrecht). It's more about solving problems, challenging yourself, and having cool colleagueas. It's a good way to atleast get a foothold in the industry and later branch out to management. Easier in small companies.
Thats just standard recruiter spam fyi. Don't get your hopes up. Ive gone through dozens that ended up putting me in a database. Got my actual job through a company that was sick of recruitment agencies themselves and reached out directly.
Agreed. I may have worded this a bit too strongly. I've seen too many AdapterFactories in my days as an 'enterprise java' consultant to be keen on design patterns. That is not to say they serve no useful purpose besides job security: Decoupling modules, reducing duplication and improving maintainability are worthy goals. Creating complex object structures from simple building blocks per the Composite pattern has to be one of the most elegant parts of my application design. And lastly, the pattern language also serves as a shorthand in inter-programmer communication. Thus, if you want to learn patterns, skim the book at a high level, pay close attention to the use cases (and the non-use cases!) so you know what to look up when you need a (insert pattern here). The rest is best learned through practise.
&gt;and have a tiny chance to possibly win a license for a product you likely already have FTFY
i dont know but it still flags with 0,3. I believe i was just testing my possible problems :P
Unless you just bought one, the upgrade license is better than nothing.
You should have asked that 3+ years ago when [Eclipse Code Formatter plugin](http://plugins.jetbrains.com/plugin/6546?pr=idea) did not exist :)
How long have you been doing it and what do you make? Just because I'm curious about the salaries. You don't have to tell me though!
Citing [this pdf](https://jcp.org/aboutJava/communityprocess/ec-public/materials/2013-01-1516/JSR-354_Java_Money_and_Currency_API.pdf) to answer your last question &gt; Why is this needed ? &gt; &gt; * Monetary values are a key feature of many applications &gt; * The existing java.util.Currency class is strictly a structure used for representing ISO-4217 standard currencies &gt; * No standard value type to represent a monetary amount &gt; * No support for currency arithmetic [edit] I have no affiliation. I was just curious so I googled this and the first thing I found gave an answer to your question.
Object pooling - it should be noted that on modern gcs (generational with copy collector used for young generation) object pooling is useless and can significantly degrade performance unless it is an expensive resource youre initialize (textures, meshes [basically anything that requires heavy io] database connection or threads] It doesn't have dependency injection but does list a service locator? IMO he should go over di, and some di frameworks.
yey. finally we get linq to java. only 10 years late 
Is it possible that code like this database.customerStream().where( customer -&gt; customer.getCity().getName().equals("New York") ); will translate into this SQL: SELECT * FROM Customers where city_id = (SELECT id from Cities where name = "New York") ?
I wrote Jinq2XML a few years ago. This takes me back. https://github.com/jjnguy/Jinq2XML
http://www.querydsl.com/ for your dsl needs
This looks far more featureful than Currency. And your main objection seems to be that the exchange rates change. Assuming one of the default exchange providers providers weren't accurate enough for your needs, couldn't you implement your own? Also, why would it model exchange fees, exchanges that take place over several days, etc? That's your business process there, so why would that be generically applicable? Exchanges in an API like this are at a given point in time and that is generic to everyone. I think extensions like this are great! I don't need it right now, but when I do, it will be a great starting point.
&gt; For us, this thing would be next to worthless. The exchange rate part of it, sure. It actually seems kind of an odd service to have in a JSR. Having standardized units/operations for money has the potential to solve a whole mess of problems, though. 
While this does seem interesting, coming from someone who writes a lot of financial applications, it will certainly not be used by me in my lifetime. First, Java 9 is probably a couple years off at best, and longer for a "stable" release anyone will trust. Secondly, most financial institutions are still on 1.4 (a few on 1.5). Still, nice to see that future generations may have the benefit of the API.
See [possible fix here](https://groups.google.com/forum/#!topic/capsule-user/eIe0qzmqvYE) that makes the second process disappear.
Read up Adam Bien's blog. He is a Spring basher and Java EE advocate.
The work seems to come mainly from Credit Suisse, so it might not be that bad. They handle a bit of money as well. 
I'd ask if you wanna join me outside to discuss it like men, but you are on linq, so you can't. Besides that, for the most common usage of linq, streams are mostly superior. 
Meh, Currency + BigDecimal is all you really need, the regional nuances probably shouldn't be part of a language but a third party library, it's not like tax law is simple.
If one needs only the dependency injection (e.g. put together a thick application with e.g. Java Swing and Hibernate), one needs only the core. If one is going to put together a webapp instead, one will use the webmvc (which includes the core). If one needs security for one's webapp, one will add the spring security. If one wants no tricky configuration and might live with one that others put together and/or needs an easy plug-in plug-off feature, one might use the spring boot for simplicity. In other words, no need for a large, complex, amphibious army when one single soldier with a handgun will do. 
I don't know how many of you have experienced how fragile an XML-based configuration might be. I just wonder whether is it possible nowadays to have an XML-less configuration of the EE server and application. With spring it is straightforward and possible, that much I know for sure (I've just recently put together the skeleton of a complete webapp and will start to add all of the functionalities, one by one, soon).
I still feel like java is the better language to code it in abdbi already started working with it. Also I love the multiplatform feel 
&gt; No support for non standard Currencies (e.g. cows or camels) [Page 13](http://www.slideshare.net/rajmahendra/jsr-354-money-and-currency-api) ;)
Because I really dont want to allocate for millions of records when I'm trying to select one specifically. Jooq seems superior and returns lists anyway which can be trivially turned into streams.
It kind of seems like you just took a glance at the API and said "oh, doesn't have that class!" Streams are not effectively jack hammering sql into java methods like linq does in c#. Ultimately, I just don't really see why you came here just to troll. LOL, yet another arbitrary change happened in .net that means you have to waste time adapting your code. See, I can troll c# shortcomings too.
I usually just hard code it at 3 cows to 1 camel.
The job I just finished integrated with a COBOL program written in 1985
This looks like homework. It kind of seems like you didn't pay attention. You generally don't get a very big pity party helping out with assignments here. I mean, this isn't even moderately close. What is that if statement all about? Where is your array declaration? Why are you returning your counter? Where is you random generation?
Spring Data JPA and its QueryDSL support makes so many things dead simple.
I think there are few problems with this comment, especially around Spring Boot. Just as a full disclaimer I am one of the authors of Spring Boot and I'm paid full-time by Pivotal to work on Spring. &gt; When people say Spring they usually mean Spring MVC. Spring Boot is meant to make Spring easier to start up. Spring Roo was the last attempt at this but it seems to be being replaced. Spring Boot and Spring Roo have quite different goals and Spring Boot is not meant to replace Spring Roo. Spring Boot is also not just about "making Spring easier to start up", it offers a complete set of features that allow you to move away from application servers entirely if you wish to. This style of development is becoming increasingly popular, not just with Spring users (see Dropwizard, Ratpack etc). With Spring Boot you generally create a complete application then just start it using `java -jar` or push it to a cloud based PaaS such as Heroku. &gt; Java EE is the standard framework that has competing functionality. I've seen this kind of statement made before, but it really doesn't do service to either technologies. Firstly Spring supports and makes use of many Java EE standards (Servlets, JDBC, JTA, JPA etc). Secondly Spring runs very well inside applications deployed to a Java EE Application Server. There are certainly some areas of overlap but it really doesn't need to be an either/or debate. You can pick Java EE libraries to use with a stand-alone Spring Boot application, or you can run Spring with a Java EE WAR or EAR deployment. &gt; It is much simpler to use since it has sensible defaults built in. The Spring Framework is incredibly flexible and as such offers many way that can be used. For convention over configuration start with Spring Boot. Take a look at the ["Building a RESTful Web Service" getting started guide](https://spring.io/guides/gs/rest-service/) and you'll see there really isn't much to configure. &gt; Spring framework was created because at the time Java EE was not very good. Now Java EE has caught up and surpassed Spring. There is some effort to bring Spring into the Java EE fold similar to what was done with Hibernate. We do not really need Spring anymore but there are still a lot of projects out there that use it. The technologies and frameworks that you choose as a developer need to based on the problems that you are trying to solve and the requirements that have. You need to asses if a particular technology choice meets your current and future needs and pick appropriately. Here are just some of the reasons that you might want to consider Spring: - You want maximum deployment flexibility to run you application stand-alone, in a PaaS or in an Java EE Application Server. - You are following "Domain Driven Design" patterns and you want to write Repository interfaces where the JPA queries are generated automatically from the method names. - You need to talk to MongoDB, Redis, Neo4J, Solr, Couchbase, ElasticSearch, GemFire or Cassandra and you want a consistent programming model. - You want to expose a JPA Repository as a REST service, and follow HAL conventions. - You need to work with a Hadoop database, possibly writing an application run via YARN. - You follow "Enterprise Integration Patterns" and you need to process files arriving on FTP and send results to RabbitMQ. - You need to batch process incoming items from a flat file. - You need comprehensive and portable security with protection against attacks like session fixation, clickjacking, cross site request forgery. - You need to detect mobile device types to render different web pages. - You are developing a multi-step web page (e.g. booking a flight), you can't use JavaScript and you need the browser back button to work. - You need to integrate with Facebook, Twitter, GitHub, LinkedIn or TripIt. - You want to use WebSockets but you need transparent fallback to long-polling. To say "We do not really need Spring anymore" really depends on who *we* is what *needs* they have. 
It does sound like homework. So I am not going to write the code for you, but help you think about it. Multiple things wrong so far. * You need to return an array, so returning count is wrong, as that is an int not an int array * if(count[i] == true) what count[i] equals is an int, and an int and true are not compatible for == comparision * think about what you need to return, you need to create an array of size n, which is passed in. So you need to create that array of that size. * creating a variable count that is also the name of the param is going to cause problems, Ill let you figure out why. * As for getting a random number in the range 0-1,000,000. There are random number generators out there inbuilt to java. Have a look at the [Random class](http://docs.oracle.com/javase/7/docs/api/java/util/Random.html) * As for testing it, think how you can call the method, get back the array, print out the array and check its size.
Thank you for your advice. My teacher gave us this problem to think about and get some ideas before he taught how to do it. 
Richard Warburton is a respected guy in the Java performance community, so without having tried this software, I'd be inclined to believe it does what it says on the tin. I'd suggest joining and asking this question on the [Mechanical Sympathy list](https://groups.google.com/forum/#!forum/mechanical-sympathy). I think Richard reads it, too.
For ideal cases that can work, but with sufficiently complex systems you need to utilize floating-point cowrithemetic or you'll end up with code that leads to that one Superman movie with the guy who stole millions of goats from all around the world.
The JDK.
It is the lesser evil.
The JVM.
cross platform. 
EDI and everything? Oh man!
I like that it's fairly easy to read most java code, even for someone new to the language, unlike some languages where I've been stuck trying to Google seemingly random strings of symbols that I have no names for. Groovy, for example, is not as good in this aspect, while Perl is absolutely terrible. Also I love the fact that javadoc is nearly universal. That combined with a good ide really helps with learning a new library.
$$$$
I don't, but the money is good. Sorry to be blunt.
Just a few tips without giving away the solution: - to declare an array, use something like: int[] array = new int[100]; // declares an array of size 100. - look at the Math.random() function for generating random values in a range. Multiplying the output by some value and then casting it to an integer should do the trick. - the first line in your function is re-declaring count, causing you to lose the passed in parameter.
* cross platform * no pointers * clean syntax (unlike c++) * maturity and stability (not designed by some hipsters)
For 99% of android applications, java is the obvious solution. You only go native when you a) absolutely need the performance, b) already have a C/C++ codebase that is easier to port to ARM than to rewrite in Java, c) don't care and want to write native code for the heck of it.
I prefer java because a) I have an existing codebase in it which is already highly optimized (so far that when I've ported a portion of it to C for benchmarking, the performance was equal up to &lt;5%), b) I know my way around the APIs and libraries I use, c) IDE tooling is world-class and d) the JVM is a really great environment when it comes to managing an application.
If it leads to people not using floats/doubles to represent money, I'm all for it.
Don't forget verbosity which is also hated by hipsters. I'd rather develop/maintain long, well understood and clean code than guessing data types and having to inference other things.
Sorry, can't explicitly answer your question, but one of the things relevant to this is the "Model-View-Design pattern". Some links: http://www.roseindia.net/tutorial/java/jdbc/javamvcdesignpattern.html http://www.oracle.com/technetwork/articles/javase/index-142890.html
This plugin is half complete, at best, and certainly not production ready.
There's a semantic difference between preferring the language for development versus preferring the paychecks for the language. That said, Java isn't without merit. People keep rediscovering duck typing (in the form of monkey patching -- extending classes at runtime, or "wrapping" methods at run time) in dynamic languages, and then taking it to its logical conclusion of unmaintainable chaos: https://blog.abevoelker.com/sick-of-ruby-dynamic-typing-side-effects-object-oriented-programming/ 
I'm just going to put this out there. Maybe you aren't the target audience. This will be more than good enough for most people. 
Does anyone have a link to the Javadoc API documentation?
Great ecosystem of tools, middleware, drivers, documentation. Very rich supply of Apache licensed libraries. Choice of fine IDE's. I'm not thrilled about the language itself. I think the aim was having the power of a compiled language and the convenience of a scripting language, but I sometimes feel it's the other way around. 
Why?
In the context of Java, I'm referring to the container that runs your application or glues parts of it together. Tomcat, Websphere, etc. 
Hi, I've spoken to a couple of people who have been using it. I've also used it for execution profiling some projects myself. It certainly works! The thing with honest profiler, and the reason that I've not done a full release yet, is that its not a complete product at the moment. There are a few UI bugs and places where things need to be tidied up and improved. Hopefully I'll have time over the next few months to add the polish that it currently lacks. best of luck, Richard
&gt; You need to batch process incoming items from a flat file. Maybe interesting to mention at this point that Spring Batch implements the jsr-352 standard, making it technically a part of Java EE (just as Hibernate via JPA is technically a part of Java EE). On a related matter, Oracle in its infinite wisdom has recently decided that Java EE needs Spring MVC. How is Pivotal involed there? Will Spring MVC become the reference implementation for the Java EE (Spring) MVC 1.0 JSR? 
Money and ecosystem, especially the many open source enterprise-grade software such as Apache projects.
&gt; the Java EE alternative is that I have a huge server with JMS Yeah, right. TomEE is some 25 MB... these days Notepad is almost bigger. &gt;and a lot more all in place, even if all I want is three REST services with two web forms. Then why do you run an OS that probably takes a few GB on your HDD and contains lots of stuff, when all you want is to run Eclipse and a web browser? Do you spend days on end trimming a Linux distro or building Linux from scratch so that each and every library, application and commandline util that you may not use is gone? Do you trim your JDK to remove each and every class that you may not use? Do you trim each and every library and remove each and every class and method from it that your application doesn't use? In case of Java EE, the current crop of servers is very lean. Everything starts up in a few seconds at most (JBoss starts up in 1 second at modern hardware). What you don't use is not loaded and doesn't take up any memory. You're trying to beat Java EE with an old stick, but didn't noticed that stick broke long ago.
Probably that mess called Scala.
That is not accurate. You can you java EE with a full server or you can include the jar files you want in your application. CDI and JSf run on standard Tomcat with a single jar file each.
Crashes often on big classes, leaving them sometimes broken. Does not hook on pre-commit actions, meaning you have to activate it manually.
Groovy?
Jesus... that's horrible and it just keeps going. I'm getting flashbacks!
It works for me just fine without these issues.
I'm not an enterprise developer (hobbyist) so this is what does it for me: * The inhuman size of the standard library * The fair syntax * The maturity of the language itself and the community * The JVM * The updates. An update is released every couple of years which adds a cool new set of features (like lambdas in Java 8) which strings me along * It was the first language I learned, so I stuck with it and mastered it
http://www.functionaljava.org/examples-java8.html#optionBind
Thanks! :D
The latest spring io guides is based on Java configuration combined with Gradle / Maven, for example: https://spring.io/guides/gs/spring-boot/
Yay! Better hot reloading, bye-bye scripting language. I wonder how it will impact JRebel's business ...
Negatively :) But yes, this is good news. I almost never do the live reloading just because any semi significant change won't be reloadable.
Not the exact code, but yes, that is what they are claiming
Could you provide example code?
Right, and those guides give one tiny example of how to use the framework in an isolated environment. Same with the GitHub examples. Also, there isn't a guide for each module. Once you get into to real enterprise like scenarios, you retreat to the docs, which are hundreds of pages long yet surprisingly unhelpful. Many are outdated and unspecific, usually telling you to check out the JavaDocs.... which itself is a whole other problem.
It's OK
&gt; Err. How is that going to work? Most existing applications have no error handling for a JVM throwing an "nah, not going to execute that code" error. Many java.* API calls declare checked exceptions which the javac compiler requires be caught by a catch clause. Example: java.io.FileInputStream.&lt;init&gt;(String) throws IOException if it can't open the file for any reason. When a java container blocks access to a file, it does so by throwing an IOException for this API call. The exact exception thrown depends on what checked exceptions are declared for the blocked method. An SQL statement with an unsanitised parameter passed to the java.sql.Statement.execute(String) method will throw an SQLException (which is a checked exception declared by this method). So unless an application is compiled without javac, then javac will fail to compile if you haven't declared a try{}catch clause around any java.* method which throws a non-java.lang.RuntimeException or non-java.lang.Error throwable type (of course it doesn't guarantee what the programmer does after he catches the exception) &gt;'Web firewalls' examine 'partial SQL statements'? The heck? Yes that's right: a WAF can only see the URL of a HTTP request and not the complete SQL statement actually sent to the database. HTTP parameters rarely have an entire SQL statement encoded in them (e.g. "/page.jsp?complete_sql_statement=SELECT * FROM users WHERE username=bob"). HTTP parameters are usually used as a substring within an SQL statement (eg a username), so the WAF will only see the username parameter and will not see the full concatenated SQL statement that includes the username substring. &gt;All the blog talks about is how their custom VM will suddenly solve all your security issues without you having to do anything for it. It also ONLY gives examples of SQL injection attacks. SQLI is one of the first protections available right now. XSS protection is being released shortly. CSRF, direct-traversal protection, and reflection-injection protection are coming soon as well. &gt; My objections are: &gt; How big is the issue of SQL injection in Java really? Pretty big: http://www.javacodegeeks.com/2012/11/sql-injection-in-java-application.html &gt; I hope most Java devs know damn well that you need to sanitize user input, that you use prepared statements and that you need to make sure a user is authorized to perform the action before you do it. So do i, but they're still making these mistakes because SQL injection is the Number 1 vulnerability (still) in the OWASP Top 10 https://www.owasp.org/index.php/Top_10_2013-Top_10 &gt; How is this custom VM going to know that user X isn't allowed to modify record Y? I don't believe it magically knows this; you'll probably have to configure it somehow. So now you have to write some kind of plugin for it to access the database to see if a certain SQL statement can be performed in the user's context? there is no plugin. Data-tainting follows data through memory to detect SQL (and other) injection attempts - tainting is not new http://en.wikipedia.org/wiki/Taint_checking &gt; It doesn't explain at all how they're going to solve bugs originating in 'buggy' open source. Are they going to prevent me calling functionX() in libraryY? But what if that function is only buggy in very specific instances? The rule engine allows you set conditions on JIT compilation. &gt; To me it sounds like "a virus scanner for your JVM". I think we all know virus scanners tend to lag hopelessly behind the current exploits while having a pretty big performance impact. I agree: virus scanners don't work. Java containers do not have anything to do with virus scanners. &gt; I can't imaging such a layer on top of your VM having to assess every function call based on a large set of 'rules' being very efficient. I can imagine it having a rather large performance impact though. I agree: it wouldn't be very efficient if it did that, so it doesn't. It builds on the JIT to compile in intrinsic hooks to guard certain actions
We moved to 6 to 7 during the middle of a release. And once 8 is approved and working in Weblogic, we'll move to that then too. I also work on financial applications.
(1) no tricky or messy stuff in building on different OS, different machines, especially compared with C++. You download JDK and that's it. (2) It includes a standard library for almost everything. Anybody, if you try to convince me something else can do these two things better, I would appreciate
I'm not sure your question makes sense. Either you're looking to fill a position that you belive is best staffed by someone with specific skills (i.e., you need someone well versed in Spring MVC), or you need a moderately experienced generalist. In the first case, ostensibly you already know the skills you think you need. In the latter, case the specific technologies aren't as important as a pattern of learning and applying new things, and well developed thought prossesses relating to design, development, debugging, optimization, and maintenance. And above all, decent communication skills. 
many people including myself believe that learning java as the first language and sticking to it is harmful for a programmer
The tools can't be beat. The IDEs and profilers and build tools all work so well. The community is huge. And the one killer feature that doesn't get enough love is JavaDoc. The fact that you can run a command and generate a documentation site is the most valuable feature for interop.
They were on 1.5, but the new CTO wasn't pleased when he was handed a laptop with XP., so he broke out the check book and everything is being upgraded, woohoo! Not pleased about getting Win8.1, I said we should have moved to 7 and waited for 9 to be released and upgrade to that. But what do I know, I'm just a low level developer. Edit: a word
sad
Interesting stuff. Still, storing dollar/euro cents in longs does it for me.
Let's capitalize this: CROSS PLATFORM! And some midgets say: "If you program in Java very soon you will realize it's not THAT cross platform." I would say: If you program in Java even more, you will realize it IS cross platform!
- Money - It's statically typed - It's extremely mature - I have multiple options! Which means, I can choose between web applications, android applications, desktop applications etc. 
That makes sense since the author of this article has probably never been in an interview in his life. Source: his bio.
&gt; first it was Django, then Rails If I remember correctly, it was first Rails, then Django (in terms of mainstream awareness / hype).
Quite agree with you on that, Spring definitely need some improvement on their documentation.
Java also have its own [hipster](http://jhipster.github.io/) side :)
This guy's this.
"Money" isn't a real reason people. You can make plenty of "money" in consulting in almost any language.
This could be huge.
Honestly, if you love programming, then why not code in the language you will get paid well in. Sure you have to type a few more lines to do something you can do in one line in another language. But these subtleties between languages just aren't worth taking a lesser paying job.
Amen, brother.
I don't prefer Java for programming, I'd rather use .NET languages, but Java is the *lingua franca* at university.
What is "a Java telephonic"?
Actually JavaEE can't compete with Spring at all. If anything I would venture and say that the age of JavaEE application servers is dead. Those monstrosities should die a quick death, and we should accept that the developers are the only ones that should choose which libraries and which version they would like to use. The standardization that comes from JSRs is exercise in futility but many people think that it brings some portability - which in the end is still wishful thinking. In many cases the JSRs are not complete (JPA/Inject) and in the end you will end up using implementation classes/details to fulfill your task. Also switching providers doesn't happen. Like ever. Have you seen the MVC JSR that would supposedly copy staff already present in SpringMVC? Yeah, Spring is not just not dead - but pleasure to work with.
Very nice list, though I would add systems knowledge (e.g.., memory systems, caching, CPU behavior, relative latencies of access time). Also, I wouldn't sweat the "should be able to develop on [main java packages] with only very rare reference to the docs. The should certainly have a strong knowlege of what classes are there, and basic operations on same, but even after 15+ years I refer to the API docs. How often is actually more context dependent than related in any way to the actual API calls -- if I've been ass deep in a large preexisting system and I move to starting fresh on something else, I might even look up somewhat basic calls, either because I haven't fully context switched yet, or simply because I want to make sure I'm not forgetting useful, but less used, methods. IMHO, it's more important to know how things work, and where to look for API specifics, than it is to simply have memorized the APIs. Having a habit of looking things up also makes it more likely that one might use existing internal APIs, rather than reimplimenting things over and over. That's my experience, anyway. 
&gt; I'm still grasping some fundamentals of the language If you're not a rock solid Java guru I highly recommend against writing your own IoC container and looking for another, simpler project to practice and gain experience.
As said you might want to tackle some easier to grasp concepts than building a DI container. Learn Spring for example, that would be time well spent.
And what do you mean by "design twitter".
What about PicoContainer?
As a non-web developer, I have seen no evidence that Spring is dead or dying. Maybe that's different on the web side.
Personally I am against all of the IoC frameworks, I'm sure this is a less popular opinion. However, I don't find it very hard to manage my own objects at all. Singletons - use static or enums, Instances use "factories" no not a FactoryFactoryProviderFactory something simpler and more reasonable. Personally I think IoC frameworks add way more overhead with very little benefit for smaller to medium sized projects. I have spent countless hours digging through ridiculous stack traces at run time trying to figure out why my singleton object was not being instantiated. Of the DI frameworks I have touched Guice was ok the modular approach seemed pretty clean. I still had tons of ugly stack traces at runtime to deal with. The better one was http://square.github.io/dagger/ Google has also mentioned they tend to prefer Dagger over Guice for many projects. It allows compile time checking which is much nicer than runtime exceptions when your app starts. Guice generally recommends injecting dependencies via constructors. Instead of making the framework do it for you, just construct and pass them yourself its still technically dependency injection. If you have very large trees and tend to pass the same object to tons of classes it is most likely a design flaw. Using DI for that purpose is just a bandaid.
Besides the upgrade option you could also donate the price to your head of development thus getting him hooked and having the company pay for upgrades :P
In r/java the anti-Spring sentiment generally seems to come from the same 4-5 accounts that post in this sub pretty regularly. Some seem to just be people that just really legitimately like JSF / JEE, some seem to be astroturfers whose entire post history is recommending JEE / JSF / &lt;specific JSF framework&gt; for everything and bashing Spring whenever it is mentioned.
Here is an great talk with examples of what goes into a IoC framework, with a nice comparison between old XML based approach, and more modern annotation based and also what's coming in the following months. https://www.youtube.com/watch?v=oK_XtfXPkqw&amp;utm_source=Android+Weekly&amp;utm_campaign=a97f04efe2-Android_Weekly_116&amp;utm_medium=email&amp;utm_term=0_4eb677ad19-a97f04efe2-337867969 Essentially - use Dagger. If you use IntelliJ you can also get the plugin for it which will make tracking injections/providers and resolving issues way easier. 
It may be just me, but I feel that's a bit light for 8+ years of experience. I'd put this perhaps at the 2 year level.
I'm highly suspicious of astroturfing. There are definitely a few accounts that jump on every thread to extol JSF and JEE to the high heavens. I haven't seen a Java project not consider Spring as the first option in the last 10 years.
I pull up docs for core classes a few times a week. However, at this point you should be able to code smoothly without needing to double check how to manage basic collections or string handling.
What kind of requirements would indicate to you that Spring would be a good choice?
Certainly. That doesn't mean that it isn't occasionally worthwhile to read even something as trivial as the String JavaDoc, looking for less used methods that might be interesting, IMHO.
Having used spring since the pre 1.0 days, the biggest issue is that it isn't light anymore. Running mvn verify in a new Dev image for mid size spring app that used jpa, guava, all the newest unit test stiff and it downloads the whole internet. Or close to it. 
There are already 3 web frameworks in Java EE: Servlets, JSP and JSF. You could use each to build functional web applications (even though you probably don't want to). 
I can only speak for myself. I do not think Spring is terrible or anything and it is certainly not dead. In fact I think it was a big leap forward when it was created. It claims to be modular but the interdependency are so complicated that do not even provide the Jar files without Maven. I like to use the framework that makes me the most productive. As of today that is Java EE. It used to be Spring and if things change it may be Spring again in the future. I do think it takes a lot more work to build most web apps with it instead of Java EE. JSF 2.0 and PrimeFaces made programming fun for me again. CDI is simple and works great. There is so much misinformation about Java EE on this forum. I can guarantee this thread will have people talk about having to use heavy weight application servers to use Java EE. That is completely false. You can run Java EE on Tomcat by including Open JDK in your application or just the individual Jar files for the pieces you want.
This is what confuses me about EE development. I see a lot of people say they are developing X in Y. Is there somewhere I can read upon the differences between the three? Pros/Cons? Which is the newest way etc?
Static type system. Sometimes it's verbose but also I think its strength. Refactoring is a piece of cake with a decent IDE.
The basics of Java EE are JPA, JSF, and CDI. (Dependency Injection). There of course is a lot more but knowing these is a great start. JPA (Java Persistence Architecture) - This is the data model. Hibernate is the most often used implementation. JSF (Java Server Faces) - This is the MVC framework. PrimeFaces is a very popular Component library based on JSF. They have a Demo on thier website that shows all the code. CDI (Context and Dependency Injection) - This is tough to summarize. I will give you a link instead. http://docs.oracle.com/javaee/6/tutorial/doc/giwhl.html
Is it realistic to try to learn both? Or is there really a need to?
Try www.symbolhound.com, it's a search engine for all those random characters you find when programming. Helped me so much with learning perl
You are right yes, but Servlets have shifted from being used for the general UI to being a special purpose tool on the one hand, and a foundation on the other hand. Nobody would build an entire UI with input fields, dropdowns etc from Servlets. JSP and JSF both build on top of Servlets. Each in their own way: JSP compiles into a Servlet (which is actually quite a unique thing in Java EE when you think about it) while JSF provides an MVC framework on top of Servlets. JSF can use JSP for its view, but that has been deprecated (new features introduced since half a decade ago are only available for Facelets). JSP although indeed a different way to build a web UI (a way that's extremely similar to plain PHP) is in practice not often qualified as "web framework" though technically it may well be. Plain PHP is not qualified as web framework either I think, but thinks that build on it like Symfony are.
I think the problem is that there's still a group of developers who because of FUD, ignorance or just not keeping up with the times think things about JSF that just aren't true, and that they need Spring MVC because of that. Just recently someone claimed that JSF could only use CDI and EJB as the model, and that only Facelets could be its view. Before that people who thought JSF was POST only and that Spring MVC was needed if you wanted GET. Also famous is that JSF requires state and that it would be slower and require more memory. All of that is not true.
Sorry, but you are one of the accounts I recognise on always hating everything Java EE and loving Spring.
Yeah, but it's not all I ever do.
Holy shit man. This is big. Why didn't you tell me about this years ago?
Java is free to develop in, Eclipse is a good enough IDE, and the language is fairly straightforward. You can build desktop applications, servers, and web sites with Java.
That's what the "deep knowledge" bullets are for. At eight years, I should (generally) not expect to know more about their areas of expertise than they. Also, each person has different strengths.
Write once run anywhere
My favorite book is [Growing Object Oriented Software Guided By Tests](http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627). I also enjoyed [Agile Software Development, Principles, Patterns, and Practices](http://www.amazon.com/Software-Development-Principles-Patterns-Practices/dp/0135974445). The older version of the book is in Java, the newer version in C#. But, it's more about the OO principles than the specifics of the language, so I'd recommend the C# version. Here's a [really good chapter](http://www.objectmentor.com/resources/articles/CoffeeMaker.pdf) from the book, containing a good study of both bad OO and better OO. 
I personally never learned a programming language by consecutively reading chapters of a book or completing excercises. For me it was always more like "first I come up with an interesting task, then I ask google whenever I don't know how to do something". I absolutely can't understand why isn't this the widely preferred approach rather than reading structured materials. It is painful to imagine someone reading a chapter on exceptions in java (one of the first in any decent book) before simply trying out some neat libraries. I think that you should find yourself a project instead of doing excercises and trying to remember what's the default initial capacity for an ArrayList.
Thanks for the info, good to know. As I said above, I'm rather a frontend developer.
Java EE application servers are very popular. There is now even TOMEE (Tomcat's Java EE server). Not only that but you can use Java EE on Tomcat by including the Jar files in the same manner as Spring.
I'd put EJB in there, too, as it's rather integrated with CDI as well.
Any unneeded feature is just one more weakness a hacker may attack. With spring, if I'll need a feature, I just have to add the module. Regarding the OS, do I have any lightweight option? But in case of Spring vs EE, I do have... IMHO, the reqs will tell whether one needs an EE server or just some modules. If the specs say that load balance, secure communication channels, complex lifecycle management of beans and all that is needed, then one should use the EE. If most of the features are just dead weight, then one is better to use the Spring modules. I'm not trying to beat Java EE - I just don't think that one size fits all, especially not if that size is rather huge...
Just to add to the conversation, one of the drawbacks of using an annotation based IoC framework is that it is very very easy for an object to end up having a gazillion dependencies, just because it's very easy to declare a whole bunch of fields annotated with @Inject. Manually injecting everything via constructors kinda discourage this practice in my opinion.
Brainfuck too?
Is Python's standard library big? I'm not familiar with it.
Yes, it's very large.
Agreed. It devours resources like a crazy hog. Even for huge applications it's too heavy weight. In this day and age I like to avoid anything that abuses reflection, comes with lots of crap that I don't use, etc.
Nothing wrong with Effective Java for any experienced programmer coming to Java. Honestly, OOP/OOD has way to much ceremony and religion built up around it. Good design is good design, whether primarily OO, procedural, or functional. Most well done real systems are a combination of all three, regardless of the language or languages used. Still and all, given the culture and specifics of Java, some reasonable exposure to OO terminology and practice is obvously vital. If they're reasonably experienced and skillful, the practical exposure they'll get in Effective Java, combined with perhaps pointing them at a few classic web resources, is probably a good start. A few good reads: * ["Why Extends is Evil"](http://www.javaworld.com/article/2073649/core-java/why-extends-is-evil.html) * ["Why getter and setter methods are evil](http://www.javaworld.com/article/2073723/core-java/why-getter-and-setter-methods-are-evil.html) * ["The Bank of Allen"](http://www.holub.com/publications/other/bankofallen.html) Heh - just realized those are all by Allen Holub. Not intending to set him up as the ultimate authority, but obviously I think he is a good source of information! For other books: * I haven't read it yet, but I've heard good things about "Clean Code". * I read through Head First Object Oriented Analysis and Design to evaluate it as an option to recommend for those who ask questions just like this one -- it's OK, but doesn't knock my socks off. * A good book or two on patterns would be useful. "Head First Design Patterns" actually doesn't suck, IMHO. I've got "Holub on Patterns" on my reading short list -- I've heard good things about it, and other writings by the author (e.g., links above) give me hope it'll at least worth a read.
Not a terrible idea to get more into the mechanics of reflection and how class loading works and honestly sometimes people do have legit reasons to roll their own simple factory or other pattern for smaller apps that don't need all of one framework or another. Personally I would do some serialization work first to become more familiar with instance meta-data and how to manipulate it before trying to create a loader of some type.
Have a look at the [Opinionated Developer's Guide to Modern Java](http://blog.paralleluniverse.co/2014/05/01/modern-java/). There are a lot of problems with it, particularly when it comes to existing projects and legacy code, but it does raise some good points about frameworks like Spring as opposed to more recent tools. You've learned Spring, and that's good; most shops I've been in use it a great deal. In my experience, though, you won't get to use that knowledge and work on the shiny new hotness. The big complaint is that you don't frequently need all of Spring and/or JavaEE. You can frequently do better, both in terms of operation and development, by using something smaller that integrates into your code, as opposed to forcing you (and your colleagues) to learn and operate Tomcat, or worse, Glassfish.
I could be wrong but I don't think they abuse reflection for a long time and have moved to cglib to transform bytecode 
Then why not include the Java EE stuff as Jar files in your project instead of with the server? The Java EE servers can be nice in the right environment. They keep your project smaller. I use CDI, JSF and Hiberate (Java EE JPA) with a standard Tomcat install. Just include the Jar files with some very simple configuration. 
Servlets and JSP I wouldn't consider frameworks. Frameworks are like spring mvc, JSF , and encompass more than a single technology to render a view. 
I disagree, Spring for the most part has been anti standards and aren't actual RI compliant the same way Hibernate is to JPA. The last example I remember is Jax-rs and how they don't want to follow the standard.
Because since java 1.1.3, my first date with Java, and since 1.1.7b, which is the version I put together my first Java application with, I've gathered a considerable experience with the language, and I know it the best of all others. Because it allows me to develop applications for most any platform, not just for the .net or i world. Because it's not that verbose, but it's verbose enough to provide me the way of clean coding. Because a huge community backs it. Because there are many out of the box alternatives out there for most anything one might need as an infrastructure/feature. There might be more...
Currently you can make certain code changes, recompile your code, and test the changes on a running VM without restarting. For projects on an application server (as an example) which might take a long time to restart this is a huge time savings. One big caveat to this functionality is that the code change cannot include class redefinitions. So adding a method, changing a method signature, adding class fields, etc, are not supported and currently requires a restart. This feature would add support for these scenarios.
Spring is modular to some degree, so the "I dont need all of spring"-complaint shouldnt hold up.
Head First Design Patterns is my recommendation to anyone looking to figure out good OOP practice. It's not Java-specific (that's what Effective Java is for), but helped me improve my Java programming after uni.
Well, that's what we do - we use some Java EE APIs (like JPA) and deploy them on Tomcat. Maybe I wasn't specific enough - I don't mind Java EE APIs (some of them are quite good), I don't like the idea that we should run the apps on app servers which already contain built-in libraries bundled with app server ...
Ah, OK, that makes sense. I can see why that would be valuable. I think I ran into that limitation when I was debugging a program recently. 
Upvoted for username/context accuracy.
I'm just a hobbyist, so my opinion doesn't hold much. But I like that it's cross-platform.
I'm curious. Who is using ActiveMQ around here ? What do you do with it ?
Correct me if I'm wrong, but when I look at the [index of package](https://pypi.python.org/pypi?%3Aaction=index), there's about 52k packages(enough to fit on one page), while on [mavencentral](http://search.maven.org/#stats), there's about 85k. Thought, it seem there's some package that may only run on python 3, while other may only run on python 2 and vice versa. I believe there aren't that many python package when you consider that you are limited by the python version that you choose.
I'd like to know the answer to this also. 
Maybe, although you could also say that .NET and C# actually has more in common with the Java way of thinking than say Python. Perhaps Python is the "true" enemy, or is it Angular? Sorry, I lost track ;)
Me. We use it to ship a bunch of messages between services that do different things with them (saving to DB, reporting, etc.).
Java the language. Java the platform (JVM). Java the community. Java the ecosystem (Android, Spring, Websphere, thousands of of other frameworks). 
Amazon services use Amazon's own, somewhat lightweight, home grown web service framework. It uses Spring for DI by default though but none of the Spring web service stuff. It can run on a modified version of Tomcat. They *definitely* don't use Java EE. 
&gt;Although EJB itself is a great tech since 3.0, it IS being phased out slowly in favor of services that mainly build on CDI. Really? Does CDI provide declarative transactions and security, instance pooling and remoting? 
There are governments and corporate entities that prefer it over the heavy weight Oracle Weblogic and IBM Websphere primarily because of the license. License costs are huge when you have thousands of servers. My customer was paying more for licenses than the servers that hosted the products when we used Websphere. Personally I think ActiveMQ is great. It way out performs the IBM product we were using, and development was much faster (as was training new engineers). Integration with Apache Camel has literally saved us millions in development costs. 
Where I work 90+% of new hires are new graduates with a 4 year degree. Interns that we get also generally get an offer when they graduate. When I interview people, I am looking mostly for people with personality, and will get along well with the team. If you can write code is nearly secondary. Clearly I want smart people, but I also want people willing to do what I tell them even if they disagree, because many times in my company there are long standing reasons for doing things particular ways. Sometimes it is just requirements from the customer. But the number one thing is a good personality and not someone who will destabilize the team. Maintaining productivity is key, and a bad apple can kill that. 
For a fresh-grad knowledge and skills mean nothing. I don't care what you've learned how to do because it's all wrong. The less you know the better. The main question is how fast you will learn. If you can demonstrate that and have a good attitude you are in good shape.
Standard library means the library that comes with the core language and maintained by the core language not the additional libraries you can download. Also mavencentral contains libraries other than Java such as scala and groovy. As someone who uses both Java and Python the amount of third party libraries are pretty comparable. 
That's a good question, and, honestly, I didn't ask myself that when I wrote: &gt; I wouldn't hesitate to use Spring in a new project, if the requirements pointed to it as a good option I guess I see Spring as a very large set of tools. Each of the things that Spring does can probably be done better by a smaller, more focused tool. If a project is doing enough of the things that Spring does, it might benefit from the consistency provided by using spring. If a project is only doing one or two of the things Spring would help with, it might be a better idea to use one or two of the smaller more focused tools. I think the reality of me and the teams I work with is that I would tend to lean away from Spring and others I work with would tend towards it. At the end of the day though, I wouldn't object all that strongly if others were in favour of using Spring.
This is. Quite a lot of bullshit! I will focus on one point. If you can not explain to your team member the reason for doing something in a satisfactory manor, and need to resort to a "My way or the highway" type attitude. Then there are some real issues at your workplace. Let alone the fact that I am sure you prioritize coding skills, or at least analytical thinking above personality. Otherwise you would be hiring a lot of shit engineers.
Piggy backing your comment, anyone using RabbitMQ?
Yeah, is his company just training everyone from scratch? In my experience most fresh college grads are next to worthless and very few are halfway decent developers or will ever make halfway decent developers. I agree it sounds like bullshit.
Yup, glad some others mentioned it. I'll code in whatever language you want, but if I have choices I'm just going to pick the one that pays the most. I'm not a fanatic about one language over another, one OS over another, etc. So it really doesn't matter to me.
If anything it's scala. In the proverbial "better is the enemy of good" way.
You should be able to write a command line hello world without help, from scratch. This is the main thing that tells me whether or not you actually know Java. You should be familiar with collections and be able to tell me the difference between a list and a map. You should at least understand what a servlet is (assuming the job is web related), and hopefully be able to write a hello world servlet. Though it wouldn't bother me if you needed help with the deployment and all that overhead stuff like web.xml. You should understand how imports work, how the classpath works, how to use basic control constructs like for, while and if. You should be comfortable with throw, throws, and catch. You should be able to read a stack trace. You should be able to write methods and understand fundamental OOA principles (extend, implement) and I'd be impressed if you were comfortable with abstract classes and methods. I'm not a hiring manager, I'm the guy you'll be working with who is going to ask the manager wtf is going on if the noob doesn't know the basics. This is what your coworkers will probably expect of you. Also, at least in my office, it is assumed that you know basic SQL (define and populate a table, foreign keys, modify and update), you do not fear Linux, and you can read log files, and read and write HTML and css. I don't expect you to be autonomous, but I also don't want to have to explain what select * from customers means.
Definitely confusing as shit. I tried to fake my way through a simple rails app once a few years ago. I just needed a really simple server to go with a mobile app I was writing for a class, and it ended up taking far too long.
Honestly, while internships are awesome, I'm more interested in what I can find in a GitHub pull. That will show me that you're competent, you're actually interested in doing the job (though I don't expect that you're going to keep contributing to open source in your spare time--I stopped because of the legal issues surrounding who owns code I develop), and gives me a clue as to your workflow. Within that realm, the Java Platform, Enterprise Edition (and yes, you need some Spring/Spring MVC in there, too) and the Android SDK are the two most interesting things. Yes, there are open source systems that run on these things. You could also theoretically make your own. Roll your own blogging platform, for example! I'd note that for Java Platform, Enterprise Edition stuff, your likely best bet will be to use either JBoss's products or Apache's stuff. Neither system is half bad, and they're both fairly common. Don't worry about things like Weblogic--that costs money and lots of it. And God help you if you ever have to do something with, say, OC4J, which was depreciated back when it was called J2EE, and the API was a piece of crap. Also, I'll need a degree (at least bachelors) from a regionally accredited university or your nation's equivalent.
There are a few things you'll need to know, Java-wise, too. Know about thread safety. Know about finalized classes and why you might use them. Know about catch blocks and their intricacies. Be prepared to tell me about type erasure and why it's important to keep in mind (and why it might bite you in the ass). Know your basic design patterns and when to use them--and just as importantly when NOT to use them (MVC, singletons, factories, beans). Know when a finally block *won't* execute (because it's *not* guaranteed to execute). Be able to tell me the difference between == and .equals(Object o). Be able to talk to me about the distinction between primitives and objects and why this matters, including the default values of primitives and objects. Know when to use XML and when to use annotations. Tool-wise, make sure you know your way around Subversion and Git, and be prepared to use the two together. Yes, it's possible, and has kept me sane, actually. Pick a build system (Ant, Maven, or Gradle) and know it. While not strictly necessary, the Bourne Again shell is nice to have. If you've never run Linux, now's a good time to get yourself a virtual machine and do so. Learn your way around that sucker. 
Thank you. I get frustrated with the questions saying "I'm about to graduate, what libraries will my future overlords expect me to know?" And then people throw out suggestions like it's a valid premise.
internships are always a huge plus, as it gives companies a way to try you out, and you to try them out. Outside of that, honestly, I expect you to know the basics of java as CaptainFeebheart explained. If you know/knew Java EE, that'd be a huge plus as most new hires I have seen don't know it. Other than that, come in with a good attitude, willing to learn, struggle a little, and grow, and you'd do just fine.
So the freshman year coursework basically? 
Yes, basically.
Jesus. Good thing the projects that I've worked on has a concise and straightforward structure. Individual packages for models, repositories, services, advices and controllers. Not like that one. 
I've been hiring for a long time, and the past decade or so it's been at some of the larger companies in the US. For entry level people I will hire anyone that can show me something real that they've built and can talk about the implementation details intelligently. I want to see that the clearly understand how it works, and can articulate the design decisions they faced when building it. They won't have made good design decisions that that level :), but they will be able to talk about their thought process in solving it. When they don't have that I rely on the interview questions. Can they write really simple code, with loops and conditions, think fizz buzz (http://en.wikipedia.org/wiki/Fizz_buzz). After that do they know other technologies like databases, web dev, native mobile dev, etc. If an entry level person can write code on the spot, and knows some basic tech, there is a good chance I'll hire them. I know that standard may seem low, but the one piece of advice I'd give people starting their career in software is that demand for good programmers is far higher than the supply. If you're actually good you will never have a problem finding a job after you get your foot in the door for the first time. 
This is a little extreme to me for a year-1 dev. I had never used a vcs in college, and it only took about 3 days to learn it on the job. And there are epic threads on stack overflow with professionals arguing about erasure. I wouldn't expect a noob to have that much down pat. If I met a fresh grad or first year guy with all of your requirements, I'd be very impressed. I mean, where should he/she have learned all of this? If I see a noob doing something like not closing a resource, it doesn't bother me. I'm more concerned about a guy who is like "What does throws IOException mean?" Or "what is protected void?" That's when I know he can't do even simple tasks without hand holding. Not being argumentative, I just see more room to grow for a junior. You would have been my nightmare interview right after college. :)
Linux server use is integrated into the UGA curriculum for CS majors so I guess there's a start. After I finish the non-introductory coursework, any ideas for side projects? Anybody feel free to shoot ideas out. 
Thanks for the input! Do you require coding in your interviews or do you go by resume mostly?
EDIT: thanks for all the feedback! Any ideas for side projects?
Yes, FizzBuzzEnterpriseEdition is meant to be a joke. Clarification added.
Huge learning curve. Not only do they not know the technology, or the language, they also don't know how the company works or the code base. It took me 6 months to feel comfortable with the code base I'm in right now and that is with previous knowledge of Android.
Still just spam. Didn't you read the rules in the meantime? http://www.reddit.com/r/java/comments/2ec99f/core_java_interview_questions_and_answers/cjy7vxl
Thanks for this. Was wondering how much time to allow myself before I felt like I was a complete failure for not being totally up to speed at my new job.
I was going to say Clojure.
Manual injection encourages no injection at all. 
It always surprises me how I went for so long using Java 7 thinking multicatch exceptions and switching on strings were the only cool new things...
How is this spam?
I started with PHP as well and once you sort of understand all the OOP stuff and how you work with classes, loops, objects, variables and all the fancy stuff like that... Every programming language(with the same paradigm) is pretty much the same thing and is mostly just syntactically different. I am able to understand java code regardless of if I have ever actually spent more than a few hours writing it myself. 
Why?
I'd like to add to this. You should know your ide. You should know how to setup paths and other settings on your PC. Know to debug. And touch type at least a little bit. 
I don't know about any anti-Spring sentiment, but I surely know about J2eeBasedPreInformedWebSupplierAntiSentimentDetailsSource and related ProviderFactoryDiscoverers. [More information here](http://blog.jooq.org/2014/04/01/spring-api-bingo/)
&gt;Really? Does CDI provide declarative transactions and security, instance pooling and remoting? No, CDI does not provide that. In Java EE 7, declarative transactions actually have been re-implemented as a CDI interceptor. It's the @Transactional annotation contributed to the platform by JTA. It's a close copy of the way EJB works with a small enhancement. See this zeef block for more info about that: https://javaee7.zeef.com/arjan.tijms#block_7579 Instance pooling and (binary) remoting still have to be implemented. I wonder where instance pooling will be done, maybe that will be CDI itself. Remoting is a bit troublesome. I'm a big fan of EJB's @Remote, but I think the EG (specially the lead, Bill Shanon) wants to get rid of it in favor of JAX-RS. There are of course more things in EJB, like @Asyncronous, @RolesAllowed (technically not an EJB annotation, but still), and the timer service which would need to be re-implemented as CDI interceptors and/or extensions.
"What have you coded for fun or as a free-lance job? Show me the code, or at least explain it in detail." That's what I would start with, and go from there. 
Ruby for example. 
[ZeroTurnaround](http://zeroturnaround.com/) is a company that makes much of its revenue with JRebel, a product that emulates JEP 159 (among many other features). This helps increase productivity for a lot of Java developers by turning Java into "almost-PHP" in terms of code reloading in live apps. If the JVM had better native support for these things, IDEs like Eclipse could implement such reloading much more easily, bringing productivity to everyone.
Checkout out buildr, it's young but good.
Much appreciated. The idea of the project is to give me insight into the topics you actually mentioned.
Java is pretty simple and well designed IMO. PHP is actually harder to deal with because its behavior is far more unpredictable.
sbt implements similar functionality, right? I use Play at work, and I can change code, recompile, and reload the app without restarting. 
In UK you need to very proficient. In England you need actually **fight** for internship. It's like 100 people per seat, and recruitment process is about half year long... After that you can get... minimum or slightly above (lets say 18k ) wage programming job (in Engalnd, unlike the USA - programmers, cooks and cleaner make the same minimum wage), because all economy outside London is still dead. It's not like USA or Holland - where you sometimes can get internship with zero skills.
No, its not because of PHP. JAVA is just designed by professionals, so syntax is clean, predictable and consistent (unlike PHP). It's like C without pointers and with classes.
for someone who is familiar with the syntax I guess java is quite straight forward. But the real monster is not the language, it is what came after. :) But keep it up. Btw Generics can be tricky as f***.
Yup kind of the same thing for us. Basically anything slow, or any change on the data ( a line is deleted, every client is notified )
As a 32 year old studying through the Open University, this makes me sad.
I don't know anything about the UK but after a quick Google search it's highly likely /u/NotCohen doesn't know what he's talking about. &gt; UK's GDP is ~$2.5 trillion (USD) &gt; According to the Boston Consulting Group, the figures for 2010 (the latest we have) showed that the internet economy in the UK accounted for 8.3% of GDP. &gt; The internet economy in the UK is growing at 10% a year and will account for 10% of GDP by 2016. Go to class, study, and pass those exams. Talk to people as much as you can (e.g. network). I wrote [this](http://www.reddit.com/r/Concordia/comments/2e3s6f/too_old_for_engineering/cjvzjxu) comment to a another student. Good luck!
I love clojure, but I think it has too little appeal to OO crowd. It's really hard to get out of the 'everything is an object' mindset, especially in enterprise.
Any link to confirm that?
&gt; In Engalnd, unlike the USA - programmers, cooks and cleaner make the same minimum wage) Bullshit. Anyone worth their salt will be on 50k+ http://www.itjobswatch.co.uk/jobs/uk/java.do 
This is nice and well for local directories, but what about NFS/NAS? As far as I can tell, notifications over NFS don't work- not supported by the protocol. Can CIFS do notifications? Also, does underlying implementation register a proper FS event listener on Linux, or poll like theMoriarty says it does on MacOS? EDIT: Apparently CIFS on Linux doesn't do notifications either. OpenAFS can do inotify notifications. Other than that, there is File Alteration Monitor, FAM, which is network aware. Not sure if these are supported by Java directory monitoring.
That's a good thing, right? The less dependencies, the better.
I meant "sticking to one language is harmful". More so if it is Java. Although I like java in general
Instead of "attitude", a better word might be "aptitude". For someone that is green, their aptitude toward programming is quite important. I strongly prefer a self-starter who has exceptional aptitude for programming. Those two characteristics have never let me down.
From all that replied, none have stayed. Please someone contact me back I'm still desperately trying to find people to work together with this project.
I take that back. I guess I was thinking of the fact that there are more unfortunate "Java only" programmers than people who know only one other language. I understand you probably meant you stuck to Java as main language, not as the only language so you are fine :)
For new hires with previous experience, yes, there's a learning curve. For new hires fresh out of school, there's a HUGE learning curve. Like markerz said, they don't know the language, technologies, or how the company's code base is built. I think the biggest issue is not knowing the technologies. It doesn't seem like schools teach anything about popular frameworks typically in use in the real world, so fresh grads are basically learning from scratch.
Yeah, I've started learning others (I'm interested in D but C++ is the one I have working at the moment). I guess I can see your point as to how it's harmful for programmers to learn and stick with only one language, but I disagree that Java is the worst with that especially because of the syntax similarities between it and C# (among others).
I found most people doing interviews don't know shit either. Just a few once in a while are true Java developers 
Why JAVA is not Object Oriented language? :) ps. Too late for learning now heh, but at least you care read that one. 
I've heard from friends that they've gone to interviews and they weren't asked and programming questions at all, but you never know right?
Remeber: Java as a language only has pass-by-value semantics in function calls.
Is it because java has primitive data types such as int, double, etc? edit: also why doesn't java design primitave data types the object way?
1. Yes. That is one of the answer. In total I think there are 5 answers more. 2. That's good question. I think reason is because Java is influenced by C family languages, and programmers like them.
I'm curious, how does this compare to [kafka](http://kafka.apache.org/)?
I started reading up on why, and what I found was that when java was created, they decided to forego objects in favor of speed
Interesting. Thanks for the detailed reply.
&gt; edit: also why doesn't java design primitave data types the object way? Before I continue, I'd like to point out that there isn't any reason that Java couldn't have gone without primitive types. The technology to do this was well understood at the time, and Sun's own Sparc chips had hardware optimizations for this explicit purpose. Here's an 1991-era USENET post describing the use of Sparc tagged and and subtract instructions to implement fixnum math in a Lisp system. This could have worked for Java, too. https://groups.google.com/forum/#!topic/comp.arch/CElwU78HuwQ Having said that, there are a number of reasons Sun might have gone the other way with this choice. The first is that tagged data representations imply that you lose a few bits (to the type tag) from the size of your machine word when you're representing numbers. In the post above, this means a 32-bit machine would have efficient math for 30-bit tagged integers, and would have to revert to a much slower code path to work with anything beyond 30-bits. This becomes more of an issue when you consider that many performance-critical algorithms are built to work with native machine-size ints. For this reason, having access to efficient machine-sized ints can be very useful. Beyond that concern, there is another performance argument that could have been made at the time for the unboxed ints. Early JVM's were all purely interpreted. They ran through bytecodes with a while loop and a switch statement to dispatch between one instruction and another. Because of this design, and the fact that they lacked any kind of run/load-time type inferencing, many of the JVM opcodes explicitly encode the type of their operands. JVM bytecodes are full of type-specific numeric operations and explicit coercion opcodes. These were easier to make run quickly on simple interpreters running on small hardware. (Java was originally built to run on set-top boxes.) 
&gt;With spring, if I'll need a feature, I just have to add the module. But you do get all features of that module, and all features of every dependency of that module. In case of Spring this is in a lot of cases even more code than Java EE servers like TomEE or Resin. &gt;Regarding the OS, do I have any lightweight option? Sure, Linux from Scratch. Add only the stuff you need. The OS has FAR MORE services and code than the difference between your custom Spring stack and a bare Java EE stack. &gt; load balance, secure communication channels Those things are not even in the Java EE spec... &gt;I just don't think that one size fits all, Of course you're right, and there's plenty of room in the world for Spring which is IMHO still a great framework. It's just that the old mantry of Java EE being so huge and big and complex and only warranted when really needed blah blah doesn't hold anymore. 
&gt;I disagree, Spring for the most part has been anti standards and aren't actual RI compliant the same way Hibernate is to JPA. The last example I remember is Jax-rs and how they don't want to follow the standard. Why should they care about following the Java EE standard?
Was just posted in this reddit last week. See http://www.reddit.com/r/java/comments/2e0v81/jsr_posted_for_mvc_10_a_spring_mvc_clone_in_java
What's the difference between an object and a class? What is an interface, and why would you use it? What is an abstract class? How is it different from an interface? Why would you use it? What is "dependency injection" and "inversion of control"? Why would someone use it? What is the hardest bug you have fixed, and why was it difficult? What did you learn while finding and fixing this bug? Have you ever used a database to store data? What are the advantages of storing information this way? What are the 4 main SQL commands? What frameworks, tools or libraries do you have experience with? What do you like about them? What do you dislike about them? Have you ever used any form of version control? If so, what did you like or dislike about it? Have you developed or contributed to any programming projects in your spare time? Why or why not?
Huh. I'll have to go back and give it a read. I first read it back when it was new, and I don't remember what he implies about Java's future. 
&gt; Each model has its purpose, its use case. I agree it can be benificial to support multiple use cases. The question is, what's exactly the technical need for Spring MVC? Nobody can answer that. Everything that Spring MVC does can just as easily be done with JSF, or JSF can be extended easily so that this is just as easy. If there was a true technical reason for Spring MVC it would have been given from the outset. But for months (years?) it was more like: we need Spring MVC, because we need Spring MVC. It's like the French claiming that Europe should have French as the de facto language instead of English, because... well just because! And then after some time they make up some far fetched argument that French is supposedly more precise than English. Really???
I thought this list was fairly good for recap, though more than the average interview: http://www.javacodegeeks.com/2014/04/java-interview-questions-and-answers.html
Don't forget IoC is just a concept, it doesn't actually require any framework. The frameworks were designed to simplify IoC of very large projects with multiple teams working on them. Like any other concept in programming IoC is easy to abuse. Just because you use an IoC framework doesn't mean you are using IoC correctly. You should not have to touch reflection, dynamic proxies or bytecode generation at all. IoC frameworks are just a fancy way to call constructors of objects. Either the framework will handle it for you, or you can use your own IoC practices. That does not mean roll your own IoC framework because that is difficult. Creating a good object model in itself can be IoC and you may not need any framework at all.
Thought of some more that are a little more java-specific: What is the difference between a List, Set, Stack, Queue and Map? Why would you use each one? What are a couple of ways that you could sort a collection? How would you determine if two strings are the same? What's the difference between "a == b" and "a.equals(b)"? What is a.hashCode() used for? How is it related to a.equals(b)? What is an Enum? Why would you use it? What does the "Iterable" interface do? Why would you use it?
Because when we have standards it is easier to pick up on someone else work. Lack of standards is a sign of an industry that is not very mature. When things are fractured and everyone is doing their own thing it is unproductive. This is not to say we should never stray from the standard. The standard was a mess when Spring was developed and there was good reason to use Spring. Now Java EE is very good. Hibernate had it right. They made a great framework and then worked with the Java community. Now Hibernate follows the JPA standard. 
I went through this on a smaller scale with someone we added to the team. He insisted we had to use Spring on a project that was already well underway with JSF. I said okay but you have to show something. Put together some examples on how Spring can improve our development and we will meet to discuss. I offered he could talk to me about it before hand and that if he had something good I would support him in the meeting. We had the meeting and all he said was we should use Spring. I said great show us the reasoning. The response was I know Spring better. 
Then I'm probably outdated regarding Spring. I used it back in 2006 IIRC, and I remember experiencing poor performance, relatively high memory consumption, cryptic stack traces, serialization issues, etc, for a relatively small project on an average machine. Besides Spring, similarly bad experiences with Hibernate added to my growing feeling of repulse against reflection and enhanced code. Even with CGLIB and ASM being faster than reflection I still don't like the idea of having my code enhanced in whatever way. Performance penalties, cryptic stack traces, dirty tricks to work around serialization issues, they are just not worth the arguable 'productivity' benefits promised by those frameworks. I want my objects to be just plain vanilla objects.
Ah, is that's what's going on here? Or is this topic an honest reflection of said shilling?
He talks about annotations and 1.5 and how they're going to get rid of explicit getter/setters. Unfortunately, the majority of people design using the (IMO overly wordy/boilerplate-y but ultimately useful enough) JavaBeans pattern these days.
&gt; Because when we have standards it is easier to pick up on someone else work. Maybe that someone else work was also a work from them (Spring MVC)? Seems to me that they wanted to allow developers to add RESTful support to their controllers as easy as possible. &gt; Lack of standards is a sign of an industry that is not very mature. When things are fractured and everyone is doing their own thing it is unproductive. Other languages have been doing great without a Java EE equivalent. I wouldn't call their market "not very mature". &gt; Hibernate had it right. They made a great framework and then worked with the Java community. Now Hibernate follows the JPA standard. That's fine. But I have to admit that sometimes I think, what would have happened if JPA had not been standarized? I mean, just before JPA everyone was using Hibernate anyway. Was it really that important?
What Java tutorials are you using? I would like to start learning Java to supplement my Python, JavaScript, HTML knowledge.
So currently what frameworks do you use to build your application?
Right, my answer (and expected answer as an interview) is that Java is pass-by-value *of the reference*.
What are the two main kinds of Exceptions and what are the implications of dealing each?
&gt; wildcard generics what is hard about those?
Yeah, that's a big question. There are many dimensions to being a good programmer and good coworker. One thing that is easy to throw out there is that a good programmer can create good abstractions which are necessary for writing clean maintainable code. The soft skills are also really important with communication and empathy at the top of my list. 
For entry level people we'll do something like fizz buzz on a white board during the interview. http://en.wikipedia.org/wiki/Fizz_buzz
I build my own frameworks. They are small and make absolutely no use of reflection/cglib/etc at all. Some of the benefits I have experienced with this approach: - Instantaneous startup times, - Extremely low memory consumption, - Clear stack traces, - No issues with serialization. I don't use any dependency injection framework at all. Everything is injected manually. I don't use any ORM framework at all. Just plain old JDBC plus common sense best practices like isolating query strings, etc. Call me crazy but this approach has been proving itself good enough for me for years.
I'm in the south, technically. Moved to Cornwall for wife's job at the start of this year.
When I interviewed people for entry level positions, I was really only concerned with their fundamental understanding of concepts and how they applied and why they were important. So I might ask about what makes an object oriented language object oriented and to talk about those things. I might also ask about how the person approached problems. I haven't been involved in hiring people at my current company, but seven or eight years ago I was lucky to get people who could even explain what things like encapsulation were. (And it's not like I was looking for key words or anything, just basic understanding of the concepts).
Remember one important thing. The most important thing you can learn. Do not, and I repeat, do not pull answers from your ass. If you don't know it say so. They don't expect you to know everything. They are just gauging your thought process, honesty, and level of noobness (which if entry it means that they understand you are green). Good luck!
If these comments are leaving anybody confused this is what they mean: public class PassByReferenceDemo { public static class VerySimpleClass{ private VerySimpleClass(String initial){ this.justANormalString = initial; } private String justANormalString = ""; public String getJustANormalString() { return justANormalString; } public void setJustANormalString(String justANormalString) { this.justANormalString = justANormalString; } } public static void changesSomethingInsideTheClass(VerySimpleClass copy){ copy.setJustANormalString("after"); } public static void main(String[] args) { VerySimpleClass verySimpleClass = new VerySimpleClass("before"); System.out.println(verySimpleClass.getJustANormalString()); //should print out before to the console. changesSomethingInsideTheClass(verySimpleClass); System.out.println(verySimpleClass.getJustANormalString()); //should now print out after to the console. } }
I'm kind of opposed to Spring on principle. I see it as a fix for Java having gotten so large and complex. Nothing wrong with a framework but now the framework has gotten large and complex. FWIW, I'm not a terribly large fan of Java EE either.
For the last one, my answer is no because my company owns all code/computer related ideas I produce whether I am on the clock or not. I find it absolutely insane that such a practice is standard in the IT industry, but I also understand the reasons.
Agreed. I haven't played too much with Spring (just a little Spring Security), but people often forget EE is just a standard, and not an implementation. All it does is guarantee when you move from one implementation to another (say EclipseLink JPA to Hibernate) everything (mostly) coded to the standard will not break. Same deal with the 30,000 JSF component frameworks.
To me that's the most correct answer.
At my company this is only true if you are using their equipment to create it. On your own computer what you make is your own.
Ah, thanks. Yeah, I remember that now. I have to admit, I really haven't dug into using annotations myself. I keep meaning to, as the one's I *use* are very helpful -- just haven't had the time. I think I'll still go back an re-read some of Holub's old articles on JavaWorld. I really miss the days when JW had useful, interesting technical content. They've gotten a bit better in the last year or so, but still have way too much JavaScript and buzz word of the week articles.
I think what's difficult is that it doesn't mean "this might be anything", but rather, it means "this might be any *specific* thing". The difference is subtle, but very important.
The other thing about Java on the web side at least over PHP is the convention over configuration. In PHP, any sane programmer may have put any kind of automagic class loader literally anywhere or structured the app in any way. In Java, rules and expectations are pretty clear, you can plan to find views in one place, classes in another and in a package structure. 
&gt; Have you ever tried to understand the memory model or GC tuning? Have you ever needed to? 95% of us won't. Sure, you need to understand aspects of memory management so you can avoid memory leaks and bloated data structures, but the finer details of the GC aren't an important topic for the vast majority of Java programmers.
I recently read Josh Bloch's *Effective Java* book. In addition to learning a ton (most of which was applicable to other languages as well as Java), I came away in awe of the designers of the language and JCL. Every API, language feature, etc. was designed to be predictable, backwards-compatible, portable, etc. Occasionally they failed in some regard (he points out a few JCL flaws in the book), but it's clear the language was designed by thoughtful, extremely intelligent people. Many languages have had similar attention to detail. PHP is not one of them.
You can try Udemy, it was helpful for me. There are some free courses as well as some paid. https://www.udemy.com/
Try making a text adventure! Or perhaps a small text based RPG, I was making one when I was learning Java.
Really? Were they the standard intro to CS courses for your university or were they the easier alternatives for people who have never programmed before? Because everything CaptainFeebheart mentioned is stuff we covered in a one semester course called Intro to Programming which was the first course required for the CS major. The only exception is linux, which was in a separate CEG course called intro to operating systems or something like that and required the previous course as a prereq.
Well, I would counter that as an information worker, your ideas are what you're getting paid for. And if it's on company time, on company equipment, related to your company in any way (this is the real trigger point in many intellectual property contract clauses), you're sacrificing the intellectual property in return for getting paid.
JavaScript is hardly a buzzword these days. It's a proven language for web development at this point, and very nearly the lingua-franca of the web. As programmers, these last 4-5 years have seen exponential changes in technology stacks and language shifts as we move from the SaaS era to the PaaS era. Java is still important, but Silicon Valley now values proving an idea valuable over proving a solutions correct, and Java and its tools are showing their age more than ever. (Hell, even Ruby and Python are showing their age when dealing with cloud/parallel development.) I guess what I'm trying to say is that since 2003, the tech landscape has changed so much as to be unrecognizable. AWS didnt exist until 2006, the iPhone didn't exist until 2007 (no 3G until 2008), github didn't exist unit 2008, the iPad didn't exist until 2010.
Compile-time and run-time? And run-time you have to handle gracefully or bring down the process/thread? (I've been in Python-land for awhile and sanity-checking myself.)
It's never a bad idea to ask for clarification on any question in an interview :D When dealing with primitive types (int, long, double, etc) "a == b" is the only way you can test them for quality. In this when both a and b have the same value, then they are equal. int a = 1000; int b = 1000; boolean result = i == j; // result is true You cannot write a.equals(b) with primitive types. It won't even compile because they are not objects and do not have any methods. ------------------- This doesn't work the same way with Objects. When dealing with objects, a == b checks to see if both a and b are the exact same object. Integer a = 1000; Integer b = 1000; a == b; // result is false; Integer c = a; // c and a are now the same object a == c; // evaluates to true; If you want to see if two objects share the same value, you would use a.equals(b). This will only work if the object has implemented it's own .equals() method the compares the two values. The String class has done this "text" == "text" // evaluates to false "text".equals("text") // evaluates to true -------------- I didn't intend to write a wall of text here, hopefully I didn't make things more confusing.
Yeah. Whatever coding I do on my PC is my own. That rule applies for work done using company resources and is intended towards protecting the client's interests (and, in turn, the company's interests).
Oh okay, well I was specifically talking about the first year CS courses and not courses designed for students in other departments. 
Yeah true. In the last interview I gave, the interviewer hardly asked any tough questions. Although, OOP was his main concern. In the later half, it was only casual chit chat.
Yeah, it's a pretty bad idea. Not only is it years and years after Spring MVC was the cool thing, but it will also take at least 3 to 4 years until people actually get to use this. If people want Spring MVC they can use it today, why on earth does Java EE need a Spring MVC clone? With the info available it just doesn't make sense. I have a strong feeling there's more to it than what we've heard thus far. It's so mind boggling silly, there simply must be something else. Maybe oracle has bought Spring and bringing Spring MVC into Java EE was one of the demands. Who knows?
Scala doesn't have primitive datatypes. Its time we moved on from imperative programming.
Dude, try thenewboston on YouTube. http://m.youtube.com/user/thenewboston Its great for beginners. [update] It seems the general consensus on Reddit is that you should avoid thenewboston. My bad. [/update]
I would consider understanding the reasoning behind PECS (Producer Extends Consumer Super) to be nontrivial. That is, knowing and understanding why instead of this public &lt;T extends Comparable&lt;T&gt;&gt; void mySort(List&lt;T&gt; list) you need this public &lt;T extends Comparable&lt;? super T&gt;&gt; T max(List&lt;? extends T&gt; list) I pulled the example from Effective Java, the explanation is that the first method would not work with something like List&lt;ScheduledFuture&lt;?&gt;&gt; scheduledFutures = ... because ScheduledFuture is a subinterface of Delayed which impelements Comparable&lt;Delayed&gt;.
Just remembered. This same problem was on my 1st year practicals.
Also, I'd like to add that Java caches the Integer objects for values from -128 to 127: http://www.owasp.org/index.php/Java_gotchas#Immutable_Objects_.2F_Wrapper_Class_Caching
&gt; Injection is the passing of dependencies in through the constructor or setter/getters. Manual injection is the passing of dependencies in through the constructor or setter/getters **without the help of a stupid IoC framework**. &gt; it means people get lazy and instantiate classes by name directly in the class itself That's arguable. In fact I can speak for myself that I have been doing manual injection for years and I never committed this kind of sin. And I would regard as unprofessional anyone who is lazy enough to let him/herself write bad code.
More like C with only void* pointers. 
At my company, what you make on your own time is yours, provided it doesn't have something to do with the business they're in or of some related field they could conceivably branch into. We support financial companies running their operations on Windows and Linux. If I want to make an iPhone game, on my own time, for instance, it's mine.
You may want to darken the font. Light gray on white is just too low contrast. I can barely read that at all.
&gt; And I would regard as unprofessional anyone who is lazy enough to let him/herself write bad code. I would argue the same about people who don't respect automatic injection and inject everything willy nilly.
Try [coding bat](http://codingbat.com/java).
You can think the value in 'pass-by-value' like a copy of the reference, and the copy is not connected to the original reference.
Why?
I used http://www.learnjavaonline.org/ for a bit, the site is basic but covers the core concepts needed for Java programming. 
See [my other answer](http://www.reddit.com/r/java/comments/2epuoy/im_going_in_for_an_entry_level_java_development/ck1wdnp). Short story: pass-by-value means that the function can't modify the value of the pointer, but it can modify the stuff that's pointed *to*.
&gt; a == b checks to see if both a and b are the exact same object. Same object on the heap. Equal reference values, right? Is this complicated by the string pool? a=new String("boop"); b=new String("boop"); Looks like two different objects, but the string pooler may have other ideas?
Ops should not claim ownership of the Java EE installation. I don't know why some of them do, since they don't know the first thing about it. I've seen ops supposedly administrating WebSphere, supposedly guarding over resources like JMS queues and even EJB pooling and setup (really? Which bloody op knows anything about that without negotiating with engineers?). The engineering team completely by-passed WebSphere, and indeed deployed a Spring app. So there was absolutely nothing these ops guys had to tune or administer. WebSphere was reduced to a fairly dumb http connector, while Spring embedded in the AS did the real work. Given this scenario, why was ops claiming ownership of WebSphere anyway? If there is nothing to do, why still claim the installation? Wouldn't ops be unmasked as a kind of fraud here, claiming to administer something that isn't even used?
The app server only becomes bad when fools who don't know anything about it claim ownership. If your deployment can consist of either the AS itself or a war/ear you'll love it.
So you're saying that when I pass an Object into a function, I am indeed passing a copy of its value &amp; not the original Object? If I have: Ball ball = new Ball(); ball.speedX = 0; moveBall(ball); System.out.print(ball.speedX); void moveBall(Ball b) { b.speedX++; } are you saying that it would print out 0 because the object *b* is only a copy of the object *ball* and does not have the same pointer, and therefore moveBall() is only modifying the value? I must be misunderstanding something, because I'm fairly sure it would print out 1.
I guess I don't understand the difference between, as you call it, the 'value of the pointer', and the 'stuff that's pointed to'. If I instantiate an object... Ball ball = new Ball(); ...there's now a pointer in RAM referring to the Object *ball*. So the 'value of the pointer' is the Object *ball* and all of its instance variables. Does that mean the 'stuff that's pointed to' is like the combined *activation record* of the all the Object's methods? What is it exactly that you're manipulating if you're not manipulating the Object?
This is the 1st I've heard about the String pool! Makes sense that it exists though. I wrote some tests and It looks like you can actually compare strings using == and they will match as long as they're in the cache. The only case I couldn't get to work was the specific one you mentioned (new String("...")). It looks like that forces a new, separate, instance of the object. I'm not sure if there are limits to what goes in the cache or how long it lives there. Something for me to look up after work!
Easy integration with external systems (via Spring Integration), use of amqp protocol (eg rabbitmq), out of the box control and monitoring via jmx - these are the main points why we decided to use spring in our project.
/u/arvindraivns01 doesn't anything else on Reddit than submit links to the same webpage. No commenting, no explanations, no links to elsewhere, nothing. In the comment that I linked to is the link to the [Reddit rules](http://www.reddit.com/rules/) and their defintion of [spamming](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F), which define this kind of behaviour as spamming.
Why *"bye-bye scripting language"*? You still have to compile the source, which requires you a java compiler. It is not as convenient as a scripting lang.
Thanks for the tips from me as well. I need to start learning Java for university and really have no idea what I'm doing/how difficult it is going to be. I'm very excited but terrified as well at the same time, me being a coding newbie. I've found this: http://docs.oracle.com/javase/tutorial/
That would be nice, but unfortunately the people I work for are IP and patent hoarders. If I want to work on anything, I have to apply for the right to own that. What they are afraid of is me using code from work at home, or using code at home for work solutions. They can't regulate where ideas come from, so they just claim all of them unless you apply for ownership and get approval. Of course, the application for working on your own idea provides them with ideas of their own.
In general, this is the case for us so long as we apply for and get approval to do it. If I don't get approval to work on my own, anything I do that might be successful could land me a big lawsuit. That would be all well and good, but the approval process is a lot of red tape and documentation. It is a massive hassle that can take months. Unfortunately, being international ip trolls, we kind of have major hiccups with regard to process in that it is often long and expensive.
Yeah, I got the idea from a job interview question I had a few years ago. I think it's a fairly standard exercise, but it's a good one!
Yes, you are on the right track! However, ball1 has a value - it is null! Let's see a definition of doSomething: public void doSomething(Ball target, Ball source) { ... } Here, 'target' and 'source' are parameters to the function, initialized with the **value** of the variables _ball1_ and _ball2_. The value of _ball1_ is null, so the value of _target_ is null; _source_ however points to the same object as _ball2_ **because that is _ball2_'s value** - a reference to an Object. Within doSomething, you can reference _source_ and change its fields, and these changes will be visible outside the method because _ball2_ points to that exact same object (remember, an object isn't identified by the values of its fields). You can change the values of the parameters (they're plain variables within the method body), but you can't change what object _ball1_ and _ball2_ point to (but you can change its fields). (sorry to repeat the same thing again and again...)
Any time I see the words "build my own" used in the same sentence as "framework" it sets off air red sirens and red flashing lights in my brain. I've had to clean up way too many projects where the decision to build an in-house solution for managing resources/content/stuff resulted in horrible inefficiencies or security vulnerabilities that can literally make or break a company. Not a single refactor has taken less than a year. The amount of technical debt introduced by these kinds of projects is one of the staggering hidden facts in our industry. I think it's a really great exercise to develop your own framework, open source it and maybe it could even generate a community of contributors. Those contributors become the reason the decision to use tried and true technology is so important in all but a very small number of edge cases where you need to establish a new technology stack. I think it's irresponsible to advocate the "roll your own" mentality for most projects outside of hobbies and personal applications; I'm not saying you're advocating for that but it's important to recognize the strengths of open source technology. Literally billions of users have used a number of frameworks out there and thousands of developers have had to debug, triage, and in some cases modify an existing code base. There's not enough money, time, or resources to get the equivalent hardening of some older projects. You should always ask yourself if you're willing to release your projects side by side with one built on these existing tools and place a bet on which one will stand the onslaught of abuse sure to come your way. Doing anything to protect against layer 7 attacks, even if just using well tested software can save a project from disaster. I'm not saying we should just use what's available and never try to innovate, on the contrary, the economics of our industry and open source dictate that any technology that satisfies a need will get the attention it needs to get to the point if being well tested and broken in, that's why releasing personal projects is important, it's the fist step down that road. But for anything that goes beyond a personal application, for the love of all that is sacred especially anything that touches user data, please use something that has been exposed to the rigors of the world and lived to tell a tale. 
The point that OP makes is that "Java is easy to learn". Which comes as no surprise, because Java is easy to learn. Just like your example: html is *easy to learn*, but there are magic nerds out there who can write code that only the gods could better. Nowhere does OP say "programming is easy", because as OP will soon start discovering, and as we all know, programming can become stupendously intricate, no matter the language. There are also many novelty languages which clearly show that "programming language" can become arbitrarily complex (and difficult/impossible* to learn). \* Some languages are written for computers by computers and is very dynamic, and no person would ever be able to learn these simple, super-efficient languages.
https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)
It finally makes sense!! Thanks :)
I'm tempted to interview for random positions in the hopes that they'll ask for FizzBuzz and I can start in on whiteboarding this: https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition
http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/corelib/components/Select.html
One of the first small things I wrote while learning Java was a directory monitor. Worked fine for my local drive. But as soon as I applied it to our shared drive at work, it didn't work. After a look around on the internet, I found out it simply isn't supported and is thus impossible. I guess it makes sense, you wouldn't want a program monitoring the contents of a shared drive, because it could lead to all sorts of security issues.
Not sure why you're being down voted for that.
I can recommend a good course. I posted it here a while ago. It's a 12 week course with automatic answer checking, like codecademy, a good online chat board for help with problems, google group etc. I couldn't recommend it enough. I've made multiple little programs after taking it and really really enjoyed it. The course along with codingbat and Project Euler to keep me refreshed has worked well for me. http://mooc.cs.helsinki.fi/programming-part1 Sorry for the shit link I'm on my phone.
i dont think intellij comes with a jdK installed. A jdk is whats needed to actually compile java code. You may already have a java runtime installed on your computer, but that just allows you to execute, not compile. you can download it from sun. You can probably download other ides that have the jdk included. It would probably be under c:\program files\sun\java\*jdk* if its installed (or some path like that if ur on windows). Once you install the jdk, you might have to set the path in your ide in order to find the jdk .. hope that helps
1. Difference between an abstract class and an interface. When would you use one over the other? 1. Difference between implements and extends 3. How does java handle memory allocation for making new strings and copying old strings?
You need to download and install Java SDK. Try watching some tutorial... https://www.youtube.com/watch?v=DDHEYPzXm94
Well, for Android, start here: http://developer.android.com/training/index.html But first, see the videos on Java: https://www.youtube.com/watch?v=Hl-zzrqQoSE&amp;list=PLFE2CE09D83EE3E28 And on Android: https://www.youtube.com/watch?v=SUOWNXGRc6g&amp;list=PL2F07DBCDCC01493A
When you have to manage you will understand. Its not a my way or the highway, but sometimes, when a task is given to do a task a particular way, it must be done that way. There are times that explanning ten years of history is not appropriate. There are times when it is. The underlying problem is when a task is given to an engineer, and they thing that they know more than the lead and choose to do it a different way. It might work at first, but invariably it causes problems down the road. Software development is like a big jig saw puzzle. I can jam a piece in to the slot, but if it is not the right piece when I get done there will be wholes and the picture will not be complete. That is what the experienced people try to do, they try to see the big picture. When you are working on a ten million LOC base, it can take years of tasks before you can see the big picture. Engineers, who understand this advance, and someday they lead projects. So yes, I'll take someone who will work with the team any day over someone who is a loose cannon. It can take years to recover from a loose cannon. 
That is JavaScript, not Java. Consider posting to /r/javascript instead, as java has about as much to do with JavaScript as car to carpet.
Once you've got the general knowledge of programming down, picking up new languages is much easier than learning the first one. 
&gt; The amount of technical debt introduced by these kinds of projects is one of the staggering hidden facts in our industry. Amen to that! Not saying that the Ninja Sloth framework is necessarily bad (can't say that since we don't know it), but that in itself is a very true statement. The wasted time, oh, the many many wasted man years to get that stuff build and then later on the many man years to expunge it from the code again. I could probably write a small book about the experiences I had with this, but let's keep it short for now and say that I personally wasted many years because of this. 
&gt;Spring you could have switched to a different application server more easily. But you could not have moved away your code to a different Spring, since there really is only one Spring, isn't there? Application Servers themselves are fully portable too since you can move your AS to a different JDK, but in most cases this is not what most people mean with switching providers. In your Spring example, you're not actually moving providers, you're just moving together with your existing provider.
Can you give the answer anyway to your questions? 
General consensus about TheNewBoston Java course is that its great to use as a resource to clarify things you dont understand but not to use as a standalone to learn Java. 
Can someone please explain the versioning of Java. Is Java EE 8 basically JDK8 with other libraries? If so, does Java EE8 get released as soon as jdk8 is released or are they two separate release schedules? 
I would be impressed if a companies claim that their employees ideas were their property could hold up in court though.
Java EE is Java SE plus a collection of other standards (JSP, EJB, JSF, etc...) It's released after the SE edition, and comes in a few different profiles targeting different use cases. It's worth noting this isn't the release of JEE8, just the announcement that they're kicking off the JCP.
This sub is for programming java, please go to an IT related sub.
&gt; cryptic stack traces I have a running joke at work about a mythical SpringAbstractRedHerringFactory which exists only to make it harder to trace a problem to the root cause.
Oh this looks aweosome! Thank you!!
Java compile very fast, unlike C++ (with templates) and Scala. Compile time in Java rarely cause productivity issue, rebooting your container is.
\*crickets\*
Man... Should have seen that earlier... The outrage is mostly over C++, I guess...
Assuming your game is a 2D block based game, check the corners or sides of an object to see if it's touching something that will stop movement. I don't have much experience with 3D or LWJGL, but I can only guess it would be pretty similar. E: If you don't already have blocks set up, it's really just an array map with values stating each block's type. You'll want to make a map editor which is a pretty big amount of code, but you can possibly make maps with a text editor. I can walk you through what needs to be done if this isn't enough; I'm not sure if you're starting from scratch or not. PM or reply will work.
Easiest way I've found to just get right into it is to use www.ninite.com to install. Go to the site, mark the checkboxes for Eclipse and JDK. Download the installer and run it. Both of the checkboxes are under "Developer Tools". As long as you're okay with them going to the default directory, it's simple, easy, and no fuss.
&gt; Its like people who watch a web design tutorial and learn &lt;a href="#"&gt; hello world &lt;\a&gt;, Looks like you haven't done that tutorial either.
Yeah, that's... wait what?
The comments in [this thread](http://www.reddit.com/r/learnprogramming/comments/15le2j/are_these_any_good_thenewboston/) have a few back and forths about it. The biggest complaint is that he only really teaches the syntax, without explaining why you use it, or how it works.
Yeah. He uses bad practices sometimes like using public fields or bad naming conventions but if you're looking for some hands-on walk throughs to get a feel for things he's alright I guess. There are better channels though: Oracle learning: https://www.youtube.com/channel/UCpcndhe5IebWrJrdLRGRsvw TheChernoProject: https://www.youtube.com/channel/UCQ-W1KE9EYfdxhL6S4twUNw Java: https://www.youtube.com/channel/UCmRtPmgnQ04CMUpSUqPfhxQ Cave of programming: https://www.youtube.com/channel/UCnAdXkr17iQS8YcYl0LhPdw Manning Publications: https://www.youtube.com/channel/UCDia_lkNYKLJVLRLQl_-pFw Anyone have any others? 
And for that matter, how does it compare to HornetQ (currently JBoss, but moving to Apache to compete internally with ActiveMQ).
I've never heard of processing.org, but I looked into it a bit. It's not Java. It's an entirely different language, but it gets converted into Java. The syntax might be different and what you learn in Processing might not translate to Java. I wouldn't do it unless your goal is to learn the Processing Language. Try, https://buckysroom.org/videos.php?cat=31 too. This went right along with my intro to java course at school. He goes over how to install eclipse(which the android dev kit uses), JDK(Java Development Kit, required), and covers the basics and intermediate java stuff. After you get the basics down, check out https://developer.android.com/training/index.html. I think google does a decent job of introducing you to android programming.
&gt; Any competent developer can write in a few days a very simple web framework with URL routing, basic template processing with Velocity or Freemarker, etc, on top of the Servlet API Any competent developer knows that reinventing the wheel is a waste of time too ;)
Can you add some screen captures?
Thanks for the tip, worked for me.
Oh yeah, that's a hell of an insightful argument.
I started using him because people told me that he was good, and I really didn't know Java (I still don't). He would always go real fast, and when he would write stuff, he'd say, "Don't worry guys, you'll know what this means later" or "I'll get to that later". When you're learning something brand new and as difficult as Java is, you can't glance over things. He never goes into detail about why things are the way they are and why it makes sense. Even though it's supposed to be for beginners, he doesn't treat you like one.
Once you add some jar(s) that are not part of the Java EE application server, your provider becomes the author of those jar(s).
Neat! Also, if you like an annotation driven performance measuring library: checkout [dropwizard metrics](http://metrics.codahale.com). 
What, exactly, are you trying to do here? Some more information would be nice.
Ouch ... GNU License.
Is just sad that i always see post about Java performance monitoring, is Java that slow or is easy for it get like that?
Read lots of code and read books to get multiple viewpoints. This is a deep topic which will require more than superficial online reading. Check [this](http://www.objectmentor.com/resources/articles/CoffeeMaker.pdf) out. Books I have found useful: * [Effective Java](http://www.amazon.com/Effective-Java-2nd-Joshua-Bloch/dp/0321356683/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1409241862&amp;sr=1-1&amp;keywords=effective+java) * [Code Complete](http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670/ref=sr_1_1?ie=UTF8&amp;qid=1409241898&amp;sr=8-1&amp;keywords=code+complete) * [The Pragmatic Programmer](http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X/ref=sr_1_3?ie=UTF8&amp;qid=1409241898&amp;sr=8-3&amp;keywords=code+complete) * [Clean Code](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?ie=UTF8&amp;qid=1409241945&amp;sr=8-1&amp;keywords=clean+code) * [Growing Object Oriented Software Guided by Tests](http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?ie=UTF8&amp;qid=1409241969&amp;sr=8-1&amp;keywords=growing+object-oriented+software+guided+by+tests) * [Agile Patterns, Principles and Practices](http://www.amazon.com/Agile-Principles-Patterns-Practices-C/dp/0131857258/ref=sr_1_1?ie=UTF8&amp;qid=1409242002&amp;sr=8-1&amp;keywords=agile+patterns+practices+principles) * [Domain Driven Design](http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;qid=1409242057&amp;sr=8-1&amp;keywords=domain+driven+design) * [Design Patterns](http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612) (a good read, but be careful how you use it) 
All of the versions of Java EE are related to specifications. The specifications lead to implementations - like APIs. The APIs resulting from implementing the specifications look something like this: http://docs.oracle.com/javaee/7/api/
Wait till you check out the concurrency API. It's pretty crazy for non-trivial stuff. You have to be really careful with OOP and state in multithreaded applications. I wish it was simpler.
That must've been a nightmare to track down...
Why?
The answer to any of these can be looked up fairly quickly, none of them are very complicated. You would benefit more from doing a little research on something you can't answer than just reading a little quip I could put here. I can answer any specific questions you have though, or at least point you in the right direction for the answer.
There's an error in the second code example. Thread-2 never sets the value, it compares it with 'value'. Currently: // Thread-2 lock.lock(); try { response == value; noResponse.signal(); } finally { lock.unlock(); } Should be: // Thread-2 lock.lock(); try { response = value; noResponse.signal(); } finally { lock.unlock(); }
I used Derby in a small scale school project. I always wonder if there are companies using Derby in production environment? Are there any benchmarks of Derby comparing to other RDBMS like PostgreSQL or MySQL?
I'm a huge fan of Derek Banas, his videos on design patterns is great.
My first question would have to be, how does this comepare to JRuby(even though I haven't used JRuby myself)?
JRuby is much more robust and mature. Mirah is more Java-oriented and feeling. Also, it has seen to be a big mobile app development tool where JRuby is still primarily web-based.
Oh very nice. Next rather off-topic question would be, how do you pronounce it? Mee-rah/My-rah?
Well spotted! The blog is hosted in GitHub, so I just sent a PR to Mehmet (author). https://github.com/mdogan/mdogan.github.io/pull/1
I already have my block system figured out, but I may change it up a bit later. Anyways, I get what you're saying, but that's where I run into problems. So say I have the ySpeed variable and the y variable. Every tick, y gets ySpeed added to it. If y is only 2 pixels or something from a block and a ySpeed of -4 gets added to it, the character ends up inside of the block a few pixels, even when you stop the movement on the next tick. If this is unclear, I can post a gif of what I mean when I get back to my laptop. 
/r/dailyprogrammer has some very fun challenges that have different difficulty levels. There seems to have been a lot of string manipulation challenges. 
Anything released into production needs monitoring. 
This is where physics gets interesting because of the large discrete time step. So there are a few ways to handle this, but if your velocity is low enough just teleport the moving object outside the other. Also order of operations is important, you may want to check if the movement causes objects to intersect before moving them.
Do you think it would work to do some kind of check before it runs into the block? Like before I set the ySpeed, check to see if the resulting y would collide, and if so, change the velocity accordingly?
Right, true. When I use (say) PrimeFaces, OmniFaces and Guave, I've got to move those along. If PrimeFaces ever throws in the towel I'll be in a world of hurt. Yet, nobody claimed being able to move to another PrimeFaces when using PrimeFaces. The claim is being able to move to another Java EE implementation, which is true. The fact that Spring fans then in response claim that Spring is also able to do that since you can run Spring on multiple containers is completely absurd. With the Java EE base platform now covering many things, this means a large portion of your core dependencies are safe for lock-in. Of course the platform as mentioned doesn't contain everything (and neither should it). Portions are thus still "vulnerable", but I'd rather have some portions vulnerable then everything. And yes, I'm EXTREMELY happy with those multiple implementations. We once used Orion (a J2EE 1.3 and 1.4 implementation) and at some point they just stopped releasing new versions. If it had been a proprietary server technology, we would have to port a massive amount of code to something else. As it was, we were able to move our app to JBoss with only two weeks of work, which included a fair amount of testing. As you see, I don't claim it's -no- work at all, since everyone knows that (perhaps unfortunately) that isn't true either, but it's a little work.
What about Groovy? 
The most common setup is that there is a SQL database server somewhere. That server may be on the same computer you are running your project from, or it may be elsewhere. Using JDBC you establish a connection to the database server. Then you do transactions to the server, where you send it some SQL, it queries or modifies the database, and then sends you back the result. When you are finished, you close the connection to the server. The database server typically stores files on the database server's hard drive. Many database servers store the databases into files, but there are database systems that use specialized partitions on the drive which they manage themselves, and there are no 'files' you can access. Exactly how and where the database server stores the databases and the tables in the databases is not of concern from the point of view of using the JDBC connection. When you open the JDBC connection you use a URL that names which database server machine to connect to, what database on that server, and some authentication credentials which are often a username and password. The JDBC driver then makes a network connection to the database server and communicates with the database as you perform SQL operations through calls to JDBC. That does not answer all of your questions, but I hope that is helpful. 
Very good points, does clarify quite a few things! So when handling an average non-programmer client who requests a database, are you meant to setup the SQL database for the client separately on their computer/server? This seems like alot of extra hassle for anything other than a company. Would it be better to opt for something such as SQL Lite?
Not interested, too many languages already, this is so unnecessary
AFIK JRuby is a port of Ruby to the JVM, so it IS Ruby in the sense that it's the exact same syntax and it's dynamically typed like Groovy. I think that the main difference towards Mirah is that Mirah is statically typed and has some syntactic differences towards Ruby.
&gt; It's not absurd. Maybe ridiculous is a better word, or maybe insane starts to cover it. One way or the other, it's not possible to move your code to another Spring implementation, since there is no other Spring implementation. It IS possible to move your code to another Java EE implementation, since there are multiple ones to choose from. You can of course move your Spring application to another Java EE server and you can move that combination to another JDK, etc, but this was NOT what was meant with being able to move Spring code. &gt;I see Oracle telling people that they should abandon Spring They are not exactly saying that. Of course every vendor wishes people to abandon the competition. Spring became famous party because of their (Rod's) tirades against J2EE. I sometimes wonder how Spring would have done without that 1984-like enemy. Also, the recent crop of Java EE people seems to more in love with Spring than anything else. They've just pledged to bring Spring MVC into Java EE. Spring Batch already made it into Java EE last release. With Rod gone, and the entire Pivotal thing, the situation may have changed somewhat. &gt;are ignoring GWT and other guys Well, Google is increasingly GWT as well, so why should Oracle not do that? And Oracle (or at least some people there) are very sensitive to what HN says these days, or what they think they say (naturally they are somewhat behind). They started a Node.js clone (project Avatar), they're now bringing Spring MVC to Java EE, and undoubtedly they're working on an AngularJS clone as we speak. I predict Java EE to become a meta framework of frameworks, including everything that HN ever thought was cool at some point. Probably it will include a GWT clone or who knows even GWT itself too eventually. 
Program a simple version of Conway's Game of Life. http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life
that looks super difficult lol and i don't really know how to do any graphic things. The closest thing I've ever done to that was stuff with graphics using the expo class. 
&gt;One way or the other, it's not possible to move your code to another Spring implementation, since there is no other Spring implementation. &gt;It IS possible to move your code to another Java EE implementation, since there are multiple ones to choose from. Nobody argued the former. And yeah, you can move your code, that uses Spring/GWT/PrimeFaces, to another Java EE implementation. &gt;You can of course move your Spring application to another Java EE server and you can move that combination to another JDK, etc, but this was NOT what was meant with being able to move Spring code. That's what I meant at least. I don't know who said a different thing about that here. &gt;They are not exactly saying that. Ok. Then I'm going to be fair and said that some of their consultants are saying that. &gt;Spring became famous party because of their (Rod's) tirades against J2EE. I sometimes wonder how Spring would have done without that 1984-like enemy. Yeah. All vendors talk a lot of bullshit just to sell their products/services. &gt;Well, Google is increasingly GWT as well, so why should Oracle not do that? Why should they not ignore them? Because there are a lot of projects out there using GWT. Both old and new. And Google uses it too, the most recent project being the new spreadsheet. If what they want is people using Java EE, or more specificallly Weblogic, they should talk a lot of bullshit about GWT and Vaadin too. &gt;I predict Java EE to become a meta framework of frameworks... Oh no man. Get your vocabulary straight. Java EE will be a *specificacion* about a meta-framework of frameworks. :)
Write a text based adventure game.
Thanks! 
Yeah this seems a bit odd. &gt; We (at Hazelcast) struggled/wrestled with an operation timeout bug for hours, days and weeks. This is like day one condition variable stuff. You don't learn how to use them without learning this. I would think that anyone familiar with multithreading would stare pretty hard at a wait that wasn't surrounded by the proper loop. In fact I wouldn't be surprised if static analysis tools exist that would catch this... EDIT: Yep, here it is [http://findbugs.sourceforge.net/bugDescriptions.html#WA_NOT_IN_LOOP](http://findbugs.sourceforge.net/bugDescriptions.html#WA_NOT_IN_LOOP)
&gt; This is a little extreme to me for a year-1 dev. Everything that he wrote seems to be aimed at one outcome: to scare the living hell out of anyone close to graduation. Many, if not most, of the tools and technologies he mentions are not widely taught in college CS departments. To suggest that a recent grad should be conversant and capable in *all of these* is utter and complete bullshit. I can't imagine how he profits by this. Perhaps he's the kind of guy who feels good about making others feel bad. An alternate explanation is that he's an out of touch idiot who knows some nomenclature.
Generally, when you set up a database inside a real-world job the database would be on some server somewhere, probably on the cloud. Us, as developers, would connect to that database inside our applications via the URL provided using the server name, host, port, username, password and anything else that's required depending on the environment that is being used. This means the client using our application won't need a database set up on their server/hosts but will be using ours.
It shouldn't be that difficult. Maybe the Wikipedia page makes it look a bit more complex than it is. All you really need to understand are the 4 listed rules of the 'game'. Of course there's some work to manage the 2d array containing the state of the cells etc. But that's exactly the kind of basic programming stuff you'll want to learn. You could just use text instead of graphics too. If you want to keep it really simple just make it so that the if you push any button the next step of the game is printed to the console. Just print some symbol or letter for each alive cell and space for dead cells. It wouldn't really serve any purpose but learning though. 
The way I'd do it is: if user input is left if (TileMap.getType(charX-TILESIZE)/TILESIZE, charY/TILESIZE) == a block type with collision) movespeed = 0 else movespeed = baseMovespeed where getType is: public int getType(int row, int col) { int rc = map[row][col]; int r = rc / numTilesAcross; int c = rc % numTilesAcross; return tiles[r][c].getType(); } and tiles.getType is a Tile object that just returns its type, which should be a number designating whether it's a wall or bg or whatever that every block has. The most complicated part is the first part which I simplified a little but you should get it. E: You may have to change your blocks code a bit if you want this to work, but if that's too much you can just teleport the character to where it should be if it collides with a block.
Using public fields is sorta forgivable, because in a video tutorial you want to keep the code example as short as possible, and filling the whole slide with get set boilerplate is just counter-productive.
You do have a point. But, the thing is that, beginners themselves have problems following his tutorials (as per the discussion yesterday). So, it kinda doesn't satisfy its purpose. The tutorial is good for people who are reasonable java programmers and have a good hold at convention.
If you don't have three killer app feature bullets demonstrating why your language exists, then go away. I don't care if you wrote JRuby and are a god of JVM/bytecode programming. "slightly more performant ruby" is not a killer app. "optional typing" is not a killer app. "no runtime" is most definitely NOT a killer app. 
char based pole position http://en.wikipedia.org/wiki/Pole_Position_(video_game)
Check /r/learnprogramming /r/learnjava /r/javahelp and *search* before asking, because that question has a lot of answers, at least in the first subreddit of this list.
You can't decompile Java to show the code it was built from. Compiling breaks it all down into Java byte code. If you want to see full Java projects, look at open source stuff. Eclipse is all written in Java, so you can see some heavy stuff there. I don't know of one offhand, but you should also look for web-facing open source Java projects (using spring and hibernate). That's the big thing in Java these days and what most Java developers will be doing sooner or later.
Java is a compiled language. You can't view the source unless the programmers have released it.
Incorrect. Java is easily decompiled back to (more or less) the original source code.
Work your way through this and you are good: https://github.com/Doctooaa/Projects
&gt; Get your vocabulary straight. Java EE will be a specificacion about a meta-framework of frameworks. :) You almost got me right there. Luckily I can retaliate by saying that you need to get your vocabulary straight as well, as Java EE will be a specification (not specificacion) about said meta things :P In actuality, it will even be a specification about a meta-framework of specifications of frameworks (or something).
Unless one is writing an interpreter for your own language in java, this is the worst case of translating ideas from one language into another language where they don't fit. Just because you can support arbitrary types doesn't mean you can then do something useful with them. The correct solution would be to create a `Person` object with `String name` and `int age`, no map lookup required. If you want to allow optional parameters, it's easy enough to allow that for a certain range of types without the brain damage of an Any-Map.
...not really.
Thank the gods for osgi! As they say, will be nice when we can get some similar behaviour in vanilla java through jigsaw. Good thing to post about, this.
Adding to the existing reply, I think you'll be fine using DriverManager.getConnection(). A real world system would probably use a connection pool to manage the life time of the Connection objects, but that's likely not needed in your case. Word of advice: Be careful with closing JDBC resources, even when exceptions are thrown. Use try-with-resources to make this easy. try (PreparedStatment stmt = conn.prepareStatement(sql)) { // .... } It's easy to cause resource leaks by being sloppy, which will come back to haunt you in the long run. Finally: If you're doing a GUI app, be careful about thread safety. The easiest way to manage that might be to establish a new db connection on each thread.
Oh alright, finally cleared that up aswell!
Indeed - whoever downvoted you should look into JAD, cavaj, etc. The results aren't necessarily great if you compare it to the original source file (compiler optimisations will change things, and from what I remember inner classes were problematic too), but for understanding what's going on it does the job it's meant to. Biggest problem then is if the code's owner obfuscated it prior to compiling it. Of course there's also the legal side of things to consider, but from a technical stance decompiling is possible.
I did not know that. I just skimmed the website.
Nice one! Does it work just like JSF / OmniFaces where it can concert any object type back by means of simply keeping the original objects around?
Complex search criteria with say....10+ filters. If you do that using POST it's no longer REST. 
Some automated testing, if it's going to be used as a example for others it will help them if you provide a pattern on how to write tests for the service.
In theory this should work on shared drives using OpenAFS protocol. I have yet to try it though.
Uhm. Yes really. The bytecode loses stuff like comments, private inner classes and member var names but aside from that everything is there. I had to decompile a bunch of classes because someone lost the source once and it's very easy to restore the source to it's original state.