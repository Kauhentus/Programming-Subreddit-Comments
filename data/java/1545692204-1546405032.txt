I'd be in favour of making it 'someone else larger than you's problem as much as possible, so if you can configure a caching CDN (Cloudfront?) to do the same throttling as nginx or apache then do that. If some responses will be the same for all users then cache them and take one hit say every 5 mins, others will have to hit an origin but can hopefully be throttled. Cloudfront will re-use its connections to origins, effectively a connection pool managed for you. Spring 5's webflux is reactive and doesn't block threads, it provides greater throughput but not infinitely so is still DDOSable. The current sticking point is SQL, a few async/reactive solutions are in progress but I don't know if any are production ready yet.
Google mooc finland java
Or more generally r/learnprogramming.
You don't, programming languages aren't really used for rendering out of the box. When you hear a game is written in C++ or Java it's referring to the game logic, not the rendering itself. While theoretically, you could write your own rendering engine, you'd need to be pretty good at linear algebra and geometry, but it'd be really inefficient. Games instead run on engines, this simplifies the process and saves you from having to spend 5 years writing a renderer every time. Also it'd be foolish to try and compete by making your own 3D engine, take the Unreal Engine, which has at least 40 expert software engineers working on it at all times. The Unreal Engine is what Fortnite uses, so [https://docs.unrealengine.com/en-us/Engine/Rendering/PostProcessEffects/Bloom](https://docs.unrealengine.com/en-us/Engine/Rendering/PostProcessEffects/Bloom) is probably where you want to start. Although Unreal uses C#/C++ not Java. If you want to stick with Java then you'll need to look at some kind of Java wrapper library for OpenGL such as [LightWeightJavaGameLibrary (LWJGL)](https://www.lwjgl.org/)
&gt; Using an ORM goes a long way towards avoiding verbatim SQL. I was with you, then you lost me at this point, I see nothing but drawbacks in verbatim annotations rather than verbatim sql. &gt; There's also nothing wrong with loading your queries from a text file. If IDE's had let you click through to the exact line maybe. You still have the issue of needing to add patams onto the string depending on what the user puts in though. 
/r/learnprogramming
My advice to you is to get your foot in doing some front end work like HTML JavaScript CSS or some framework relating to that like JQuery. I started with front-end work 20 years ago and moved to backend programming. I think, it's easier to get in that way and move up as you gain experience with web technologies. To be blunt, I would probably not hire anyone without a degree or any real world experience to do backend work.
Ah this kind of sounds like it's the way to go. What do you think of just parking cloudflare in front of it since you mention a CDN? Is there some kind of distinction between cloudflare and cloudfront that makes one more desirable? I'm usually just the guy to deploy the code, and I know a bit about that stuff, but not much. 
 How to write... 
go fuckrurself smartass, when you will know 4 languages FLUENTLY and gramatics then we can talk...
That's awesome! I wish you the best of luck friend. In my experience textbooks and code academy websites never worked for me. The only way I was able to pay attention enough to learn was learning through experience. I'd recommend trying some cool projects, something you enjoy. Or maybe attended fun events like hackathons. Bitcamp 2019 is coming up. Its one of the biggest hackathons on the east coast of the US. You would love it it you went, I promise. Good luck! Not a bitcamp sponsor i just like the event :) 
well i never considered to visit events like that. But im gonna try to find some. im from EU so for US visit ihave not enough deep pockets. &amp;#x200B; But well, yes, everyone learns in diffenrent way. &amp;#x200B; &amp;#x200B; Thanks for answear and sorry for my english grammar thats like 4th langugage for me :)
If you dropped out after 5 semesters, you might want to go back to school. Sure you can learn on your own, but if you couldn't keep up with the work when there were deadlines, how do you expect to keep up with it when there aren't? Not only is it unlikely you'll follow through without a structured environment, not many places will hire you (at least in the US) if you don't have a degree. Not sure if that applies to you, since I assume you aren't currently in the US based on your English. You'll have to brush up a little more if you do want to come to the US. Engineering is a hard concept to communicate if you grew up speaking English, it's even harder to get your ideas across if there is a speech barrier (trust me, I've worked with a lot of students in my undergrad and graduate degrees that moved to the US).
well at start ive decided to do 1hr of day for pure leating process. next year i will prolly cont. studies since ive changed job and im not working like 60+ hr in a week. Also what ive learned at school they teach like 1 % of whats reallys is programmin. A ton of stuff you have to do yourself. Prolly as one person mentioned here - do project of interest. &amp;#x200B; also sorry for my eng, thats my 4th lng. Grammar is not the very best. &amp;#x200B; thanks for advice.
&gt; teach like 1 % of whats reallys is programmin That 1% is 100% of the skills you need to learn the other 99%. Most of my career has been working with languages that I had never seen before, and the ones that I had seen were being used in completely different ways than I had ever imagined. I had to work and learn, but I could not have done it without the foundation that my degree taught me. I would have never gotten the concepts or have been able to complete the tasks that were handed to me. I've been in the field for 6 years, and have gone back to school for my masters, and I still use concepts I learned in my undergrad degree. You could prove me wrong, there are a lot of examples contradicting this, but in reality, not having that degree means you're going to go nowhere in Software Engineering.
im not trying to prove you wrong, Im just seeking for a advice where to start/cont. the whole process. And thanks for valauable advice :) 
Cloudflare should be fine, I just default to AWS' solution because we use many of their services. Check out how Cloudflare do limiting. They're old hands at DDOS protection.
A university degree will provide about 500 hours of lecture material and 1000 hours of practice under the direction of an expert in the field. To get to a similar place at one hour per day, you're looking at on the order of five years. I would suggest giving [Teach Yourself Programming in Ten Years](http://norvig.com/21-days.html) by [Peter Norvig](https://en.wikipedia.org/wiki/Peter_Norvig) a read.
Peter Norvig (born December 14, 1956) is an American computer scientist. He is a director of research at Google Inc., and used to be its director of search quality.
You could at least use spell check. 
Yeah that's why I brought them up. I remember their talk at DEFCON a few years back, and it was awesome
Agreed! These tools exist for a reason. Learning to communicate effectively is the best advice we can give you. 
Yup a lot of the info out there is garbage. Its about getting to the point where you do a search and you get back 5 stackoverflow answers explaining the same thing, but you can ignore the bs ones quickly and find one that explains things in a way you can understand. GL
It seems that finding a good book is near impossible.
Cool. Next step is deciding what the limits are... Maybe Cloudflare can auto-limit based on response time or dropped connections...but by then it might be too late! Maybe match the max number of connections set in your servlet container? By default that is tomcat, defaulting to max 10,000 connections shared over 200 Tbreads. You could use a load testing tool (e.g. Apache JMeter) to see if your intended hardware can actually handle all those connections at once. JMeter has a ramp-up mode so you can see how much it can take before it fails.
Is that javafx?
&gt; John purcels free course on udemy Hey! I'm fairly new to programming, I have the basics down but want to deepen my understanding of both Java and best practices for design and use. I know the common data structures, how to make a project, classes, methods, etc. Do you know this class would help me learn deeper or is it more intro?
The class go far beyond the basics, and you can skip over any tutorials that you already have an understanding of, that way you can start off right where you need to
there's not no, I've given up looking 
It looks like in your [submission](https://www.reddit.com/r/java/comments/a9bmei/javalangoutofmemoryerror/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I often use JEE for developing web services but never used JSF so far...
Thanks a lot everyone. I’m gonna try all the suggestions and see what fits well for long run into my workflow, and let you guys know what I went for.
This looks like it. Let me try this. Thanks a lot :)
have a look at : https://www.tutorialspoint.com/java/java_encapsulation.htm https://stackify.com/oop-concept-for-beginners-what-is-encapsulation
It’s needed at development time, for production it shouldn’t be available as part of the war because it’ll be provided to tomcat before the webapp context is loaded 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
getS()
Next time, please ask *programming help* questions in /r/javahelp, *learning* related questions in /r/learnjava.
&gt; I would suggest using a simple monolith first with a good design and split off the services if needed. This is good advice. Start with a well defined interface and implementation in the main bundle of the application. If at such time there is evidence that the functionality is needed elsewhere by other apps or needs to scale independently from the main app then refactoring to an independent microservice might be the right choice.
Well, java does have a couple of Deep Learning framework such as deeplearning4j and it would be nice to see an implementation on a notebook. Yet, not sure if we got any support like matplotlib to display graph or an access to a pom.xml to get the dependencies, etc. 
Why do you need a ready docker image with Java? You can add curl/wget and gunzip an you have a Java version you want in the docker. And you are not being holden back by a turtle slow distros release cycle. 
You cannot access a POM (at least, I didn't check) but you can get dependencies anyway with the `%maven` instruction. In the referenced notebook, I'm using AssertJ.
I imported the project via Intellij. When it runs, it shows : java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke([NativeMethodAccessorImpl.java:62](https://NativeMethodAccessorImpl.java:62)) at sun.reflect.DelegatingMethodAccessorImpl.invoke([DelegatingMethodAccessorImpl.java:43](https://DelegatingMethodAccessorImpl.java:43)) at java.lang.reflect.Method.invoke([Method.java:498](https://Method.java:498)) at com.sun.javafx.application.LauncherImpl.launchApplicationWithArgs([LauncherImpl.java:389](https://LauncherImpl.java:389)) at com.sun.javafx.application.LauncherImpl.launchApplication([LauncherImpl.java:328](https://LauncherImpl.java:328)) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke([NativeMethodAccessorImpl.java:62](https://NativeMethodAccessorImpl.java:62)) at sun.reflect.DelegatingMethodAccessorImpl.invoke([DelegatingMethodAccessorImpl.java:43](https://DelegatingMethodAccessorImpl.java:43)) at java.lang.reflect.Method.invoke([Method.java:498](https://Method.java:498)) at sun.launcher.LauncherHelper$FXHelper.main([LauncherHelper.java:767](https://LauncherHelper.java:767)) Caused by: java.lang.UnsatisfiedLinkError: no javafxblur in java.library.path at java.lang.ClassLoader.loadLibrary([ClassLoader.java:1867](https://ClassLoader.java:1867)) at java.lang.Runtime.loadLibrary0([Runtime.java:870](https://Runtime.java:870)) at java.lang.System.loadLibrary([System.java:1122](https://System.java:1122)) at com.kieferlam.javafxblur.Blur.loadBlurLibrary([Blur.java:21](https://Blur.java:21)) at PrimaryStageBlurTest.main([PrimaryStageBlurTest.java:30](https://PrimaryStageBlurTest.java:30)) ... 11 more Exception running application PrimaryStageBlurTest &amp;#x200B; Process finished with exit code 1 &amp;#x200B; &amp;#x200B; I don't know what happened. Pls help, thanks
My guess is you didn't [add the library to your classpath](https://javarevisited.blogspot.com/2012/10/5-ways-to-add-multiple-jar-to-classpath-java.html). This is the line of code throwing the exception: &amp;#x200B; /** * Loads the required blur library. * This should be called at the very start of your main function. * The "javafxblur" library file should be added to your library path. */ public static void loadBlurLibrary(){ System.loadLibrary("javafxblur"); } &amp;#x200B;
You need to include the DLL file (jar and dll in the release section) in your library path! From intellij, goto Module Settings -&gt; Dependencies -&gt; Click the + icon -&gt; JARs or directories -&gt; Select both jar and dll files 
Nope here i use swing 
I haven’t met anyone who ever cared, to tell you the truth. The knowledge you’ll acquire in the process is what will be measured in technical interviews, though.
As an interviewer, I do not look highly upon software dev certifications
The answer is it depends on who reads your resume. I have worked for two fortune 500 companies and know two people that ever Java certified. Both certified after getting a job. I get that it's anecdotal. On the interviews I sat on I was more worried about thought processes and how someone plays with a team. Who knows, you may learn something they ask on an interview while studying. You might pick up some points on a resume screening by HR or a head hunter... Those basics you talk about are important.
I tend to agree with others that certifications are not much regarded when hiring. But, if you don't have a degree, then a certification could be helpful to get past the HR screening. To then interest a manager or hiring team, your resume should show off interesting projects (even personal ones) rather than rely on the certification. One exception to me are security certifications. Having someone with good security credentials can save a small company a lot of expense by doing many audits and risk assessments internally. 
As an interviewer if I see that certification I tread very carefully when I ask about it. If somebody found tons of value in it and thinks the cert is valuable I will likely not hire them. that is not the kind of programming we do. If they come in planning on really leveraging that type of knowledge they will be likely be disappointed. Some people when I asked them about it they expressed that they like puzzles and they like programming and the very test is basically a giant puzzle in a field they enjoy and their last employer paid for it. I will frequently hire that person who recognizes where there is no value but still be able to enjoy the problem solving aspect of it. So long as I feel that person has the real skills and experience we want. I wish there was a cert that was more based on the Effective Java book. What do I want to see in a new hire? I want to see somebody who loves the idea of coding and is shows in all the little half started projects in their GitHub repo. And when I talk to them I find one of those is particularly interesting and it’s their passion project. And I can ask them about software design problems or challenges they had with it and they just light up when they explain some weird bug and how they found it and what they had to do to resolve it. Then I take our needs for the position and relate it to things they have done i their little projects and see if they click and get excited about the work. In my experience I have never met somebody who fit that experience there and was also certified. 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Cobol supports modular programming, OOP, Java and .NET as deployment targets in addition to traditional mainframes. Even Cobol programmers need to update themselves.
That change was originally designed by Sun and IBM, which incidentally also charge(d) for support of legacy versions.
Two months ago I attended the first meeting about WebStart replacements on an ongoing project, the first point I made was how long this was a known fact for a future Java release. Naturally management kept ignoring the warnings from the dev team, until they couldn't avoid it anymore.
For context, I know a little HTML but that’s pretty much the extent of what I know, coding-wise
Not OP but making the switch from chem engineer to software engineer 3 yrs post-grad, applying for jobs mid-2019. Besides projects and pure ability during interviews, is there anything in particular I could have to show you/interviewers I know my stuff? 
I did get the OCP certification and have to say it does give a pretty thorough overview over the low level Java features ; even I learned some new details after having worked with Java for twelve years professionally. So, it's good to learn the language. But, like the others said, it only teaches the foundation and few of the things you need to be a good programmer. So I'd say do it for yourself if you think you need to get up to speed, but not as a central selling point in your application. 
/r/learnjava
Pure Java or Java-based programming language (For example Processing)? 
Knowledge of testing code. Major bonus points if your projects you have are well tested. If you are someone who has little or no experience I am going to focus more on if I think you are someone I could work with and if you seem eager and capable of learning.
I have very few projects, but have done quite a few Advent of Code problems which are more complex and some of them project-like than typical leetcode problems. I have some good testing for them (just learned mocking yesterday for it!) Do you think it'd be good, since I don't have many projects, to put these on GitHub? I think I'm learning more doing these than creating my own project. Of course maybe I need to be finding more challenging projects then, but coming up with ideas is part of the challenge haha. My first project was TicTacToe, which honestly I did not learn much from besides how to post onto GitHub
I would definitely put it up there. Anything you can put up to show you are actively coding and to show your progress which helps to show your ability to learn. 
Perfect, will do. Thanks! Would you recommend putting short algorithms like leetcode on GitHub? I usually just do them in the browser
That it works fine for you doesn’t make it universally acceptable. It makes things more complicated than they should. You can disagree and that’s fine but imo it makes it really annoying to get anything done quickly and bug free.
I would put everything you do on there personally. Just make sure that you are able to explain anything you put on there
ok so you lecture on insulting and then do the same to Firefox. Have you even used Firefox lately?
Very much this, the certification shows you know a lot about the language and it's mechanics, but says nothing about whether you can wield it properly to produce good software.
You say this but is there a concrete line of reasoning behind it or is it just your feeling? What are the use cases for reified generic instances?
cool!
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
so, certification is a bad thing to have when applying for a job where you work?
There’s talent, and there’s skill. Software development requires solving unique problems on a daily basis. To do so successfully you need a talent for it. There are people who focus on learning specific skills, but as soon as they run into an unfamiliar problem (which will inevitably happen, probably on the first week), they’re at a loss for how to solve it. They end up needing someone to teach them how to solve every single problem. The problem with certifications is that people who focus on skills rather than talent tend to value them. Especially since you’re coming from a different career field, I would focus on things that demonstrate a talent and a passion for software development. Being able to solve different kinds of problems on your own is a much better sale in an interview than having memorized a bunch of facts for a certification. 
If I am the interviewer and ask you about it __and you think it’s the coolest accomplishment you have ever achieved__ ... then yes that is going to hurt your chances. It shows that even though you are certified you lack the judgment to realize that the cert not a very indicative of very much that is worthwhile. Many of my peers feel the same way but not the entire workforce over here, it’s not a policy
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
My friend says when he interviews a guy with certification they go extra hard on him. I think a certification gives a wrong message. 
As a long time programmer, i recognize that certifications are just one more way that people use to stand out from the crowd, especially when they have no experience under their belt. A bit like a collage degree, though not quite as structured
&gt; All of these vendors will provide compatible versions. Almost. AFAIK, IBM does not support OpenJDK, only a JDK based on J9. I don't know whether they have a JDK that passes the TCK, but the OpenJ9-based JDK provided by AdoptOpenJDK does not. Only distributions that are [built from the OpenJDK project with no significant changes are OpenJDK JDKs](http://openjdk.java.net/legal/openjdk-trademark-notice.html), and [only those distributions may freely use the TCK](http://openjdk.java.net/legal/OCTLA-JDK9+.pdf), although others may license it. Also, [Java Flight Recorder was contributed to OpenJDK only in JDK 11](https://openjdk.java.net/projects/jdk/11/). Prior to 11, only the (then) proprietary Oracle JDK contained JFR.
For me it wouldn't count against you but it certainly wouldn't go in the pro column. Don't think it would go in any column to be honest.
I wouldn't even say it teaches the language mechanics well, the only time we had someone with one of the oracle certs he failed miserably when it came to basics of concurrency. Our expectations were already low when we read that "Develop code that uses the final keyword" was in the "Advanced Java Class Design" section.
&gt; Knew a lot about the language at one point in time. FTFY.
I leearned so much from the 1.4 Sun certification test I took back in 2002, but I always hear that employers don't think much of it.
There are two certifications, one focusses mostly on the language concepts while the other focusses on the standard libraries, threading features more in that second one.
No offense but you probably shouldn’t be doing interviews.
If your saying because you value the oracle certification then I’m glad we disagree. 
I'm going to be the unpopular one, and say that I would look for OCP in my candidates. I've worked with juniors who lacked basic foundation, and certs would cover at least basic stuff like interfaces, default methods, polymorphism and lambdas. I've also worked with seniors who worked with old java versions and never invested time into new syntax, so no streams, always forget try with resources etc. Even tho, OCP doesn't say about whether he can code and if I could I would look at github repos of a candidate, but if I have two no repo developers I would favor the one who at least knows the syntax. 
No, I don't value the Oracle certification, and I actually do agree with mostly everyone here, you included, that most IT certs in general do not serve as a good indicator of someone's problem solving and programming abilities. Having said this, I do not think that having a certification is a bad thing in itself and it should not be used as a reason for treating a candidate differently.
I've met plenty of fantastic devs with no certifications, and plenty of not so fantastic devs with certifications. As an interviewer of senior java devs I MUCH prefer seeing github projects with code than certifications.
Sorry if I was unclear. I tried to state that having the cert was not a problem, just valuing the cert was the problem. When I see the cert I follow up with asking how they liked it and if they felt it was useful and why they got it remaining as neutral in my words and tone as I can. I feel that valuing the cert shows poor reasoning skills. I have the cert. many of my coworkers do. Some of us got it because we like puzzles. Some of us got it because we thought it would be good. But once we got it I realized a strong reverse correlation between the type of engineer I wanted to work with and those that valued the cert. all of my interviews are done with a strict score card where I ask all engineers the same core questions and follow up with additional needed questions. Our interview process is, admittedly, unconventional and contains more real world coding than any other I have ever seen but it’s been selecting some of the best engineers and friends I have had the privilege of ever working with. 
As an interviewer I do value certifications even more than a degree. This in no way means that if you don't have certifications or a degree I wouldn't consider you. It depends on many factors. But if you got certified in OCP it doesn't really tell me that you know how to code. It only tells me that you used to know a lot about Java at the time of the test, because most certified people forget everything two weeks after the exam. But the exam is pretty difficult for the average programmer and that tells me a lot about your commitment, discipline and self-learning capacity. Those are very important things for me. And it saves me work, because somebody else already tested you. I work in a company where we encourage employees to pursue these certifications and pay for them. I've been there for 10+ years so I've seen a lot of programmers taking the tests. I've never seen a very good programmer failing on the OCP, and I've seen a lot of mediocre programmers failing even the OCA. It does say something.
So this!! It's so hard for seniors programmers to evolve sometimes. Never using try-with-resources, or still using iterators instead a for-each like loop. Not knowing about the new Date/Time API. Not using Streams with lambda functions. Not even know what is the Streams API. I can go on and on forever. Still coding like it was JDK 1.4. That's why in our company we encourage all programmers to pursue the certs. And if they got the OCP7 then take the OCP8 exam and things like that. We do value certifications as well.
What does "Command Dispatcher Framework" mean for you? In my eyes it can rang from a simple ExecutorService to a fully distributed Quartz installation to a BPML executor with complex workflows. More importantly, what problem do you need to solve?
Hey no worries, thanks for the clarification. I agree with your reasoning and your interview technique sounds quite interesting to say the least. Sorry for coming strong at you it was uncalled for. Merry Christmas.
+1, especially for certs that are multiple-choice answers, so technically, you never have to write a line of code to get the exam. 
I have sonar lint installed in my IDE and push most other developers to use it too. We also use Coverity. PMD and spotbug are also usefil.
Thanks! do you use them all on your dev machine, or some of them are used during a periodic build? If so, which build / jobs engine do you recommend to use for that task?
FindBugs extension for IntelliJ. Before that, the standalone FindBugs jar
We use sonarqube and then each dev will use the analysis built into IntelliJ on their machines. In sonarqube we are sure to enable the most strict rules though we don’t require the teams to conform to those rules. We just like to see what those rules flag to see if they are valid. 
Having interviewed many java devs, I could care less about certifications of any kind. Anything beyond bachelors in comp sci or equivalent is a waste of time for everyday work. Masters could be useful for advanced topics such as machine learning, but those jobs are rare.
Sonarqube both in the IDE and server based, plus tslint. We use the leak period and quality gates to police devs before moving on to the next sprint.
I have requested sonar quebe in the budget for next year. Have you found it to be worth it?
FXGL is pretty nice for 2d.
CI is a goal of mine for our java code for 2019. For now it's up to developers to run whatever. We do have a Coverity look in teamcity that is run perodicly.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It is open source and free. Why in the budget?
Branch analysis, pull request analysis. As far as I know you can't use those features without the developer edition. We maintain 4+ branches for releases.
I use it on every build i make :)
Cool question, i am also interested in the other answers. FindbugsIDEA and CheckstyleIDEA here
We use PMD, Checkstyle and Findbugs. The house style is set to the Google standard, and we have a commit hook that runs the unit test suite. UTs are run during the normal build pipeline but this commit hook picks up failures before the code gets pushed. We find this makes for clearer, less buggy code that's written in a way anyone can understand no matter who wrote it. We have a selenium test suite that runs overnight I think (it takes ages, so can't be run on commit), and we have coverage metrics on display in JIRA and in GitLab so that we can see if code is going in without unit tests - we maintain a coverage of about 80%. 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Upvoting this - software developers and I recruit software developers at my company through technical interviews. I thinking being a good software developer, purely from the technical perspective, is a mixture of "I-can-get-things-done" and "I-understand-what-I'm-doing". If you lack foundational basics you can still manage to crank out lots of working code in production - but it probably wont be as maintainable and for a lot of projects this can really hurt. If you lack the ability to get things done but you have strong foundational basics (like you will get through the OCP) you are still kind of not ideal, most developers actually need to produce. But the best developers can do both - if you are a beginner developer people like look at a newbie with an OCP a little quizzically and wonder if they are just book smart but kind of implementation useless. I you are committed to getting your OCP having foundation knowledge is definitely better than not having it, but I would balance your portfolio with a few strong projects. 
axonframework
Go for it - it’s worth having them on your resume. Maybe also get some other certs too - AWS associate ones are useful too, and pretty easy to get. Although getting a developer job purely based on certs might not be something that will be easy, but I could see how some employers might prefer certifications in certain industries (government consulting and similar).
I set up SonarQube CE + Jenkins + GitHub to do pull request analysis at work.
[removed]
FindBugs, PMD and Checkstyle along with SonaQube rulesets. We always broke the build when predefined thresholds were exceeded and then required a code review to mark as false positive. I found cyclomatic complexity had the closest correlation to how maintainable the code is. Not perfect, but pretty close. 
It’s good to note that FindBugs, while good, hasn’t been updated for quite a while, active development is now on the fork SpotBugs. So use that instead, and it’s generally compatible with FindBugs plugins.
One that's not been mentioned is Google's Errorprone that's a compiler extension. It does slow down compilation, but it's quicker than a standalone tool as a separate stage.
We don’t pay for any features. I have found it to be worth the time of setting up, integrating it with our build pipeline, managing it and training on it 
Thanks, I will take a look at this.
I use Sonarqube and prefer to hook it up to the build process so it fails PRs if anyone breaks one listed issue. Every one of the developers I've worked with, no matter how senior, has learned from this and gotten better.
We recommend to our teams that they flag and then review controversial rules during team retrospectives. As a team, they then evolve their rule sets, quality gates, etc... 
Ya that sounds great. We should do more of that 
We have a slightly less restrictive set Checkstyle rules than the Google standard. If you violate these rules then your Maven build will fail. We also use Sonar and Jacoco to inform on additional issues and test coverage but nothing out of them of strictly enforced.
Be careful when engaging with their sales org. There were... persistent... with our shop.
SpotBugs &amp; PMD/CPD are available to devs and run before unit and integration tests on CI; jacoco for coverage, and a monstrous end-to-end suite that runs overnight that exercises our installers, uninstallers, and upgrade paths on all of our supported OSes. The most important change I made to the tools is to add our static analysis and coverage metrics to a timeline graph that's on an information radiator. We see velocity, quality, coverage, time remaining, failures, holiday schedules, release schedules, all on one big 1080p display that anyone in the company can see. Our non-development teams have expressed admiration of this level of transparency, but seem worried about being held to the same standard. Their domains are significantly riskier, so I understand the reticence. 
Thanks for the heads up.
+1 to ErrorProne (well I work at Google so am biased) but the plugin system is super useful. We're able to come up with custom checks for things that aren't company wide. I hadn't worked with such extensive style, and static analysis checks pre-Google and now I don't think I could ever go back. I'll give up all my opinions on style/formatting/etc if it means consistent code and tools that flag TONS of common errors.
Rust is Mozilla's language. It's not an insult to point out their penchant for rewrites is why they lost the browser wars. Why don't you rust fans take it to r/rust and leave r/java out of this? There's a subreddit for you already. Are you guys really so insecure you have to come here to tell us how bad java is without understanding how java even works?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Well "make classes final" is also one of the items in Effective Java, and that section of the certification is about immutability which is a relevant concept, so it's not like that's wasted reading. Also, I'd argue that concurrent programming is a skill that is mostly separate from the language concepts supporting it. Also, in our projects, the parallelism problems occur on a higher level (eg multiple instance database access) than what we can do with the Java constructs. 
Added this to my project at work recently, plus set a bunch of its warnings to errors, and it catches so many stupid little errors and even some style / bad practice stuff. I don't really notice a slow-down, but my compile only takes a couple minutes. Definitely faster than waiting for compile then checkstyle, pmd, and spotbugs, but it is still worth using those too.
Paradigm, autocorrect etc.. sorry
Yep good point. I'm only concerning myself with memory now so it's coming.
SCJP myself. I'd been a Java programmer for 3 years already when I got it. To me, a Java certification is a way of forcing ourselves to dust the basics, to flex our Java muscles and to refresh our knowledge; a self-given "Test of Worthiness", in a way. And we get a nice card that says that we are Java Programmers, which is what we do and love :) But I know that certs are in no way equivalent to the Real World ™ experience that we get when solving the problems we face in our day to day job as programmers. For companies and interviewers, Java certifications are usually just a filter. No one ever would hire you _just_ because you are OCPJP certified, but it shows that you really know the language so it already puts you on top of a lot of just-out-of-college, zero-experience candidates. However you'd still need to prove that you know how to put that knowledge to good use, i.e. that you can code. For some, it _may_ be a deciding factor between two very similar candidates, e.g. if both candidates have 10 years professional experience with Java, both have good references from their previous employers, both have passed our technical screening... but one of them is Java 8 certified and the other is not, some employers might see that as a sign that the certified candidate is more interested in keeping their knowledge up to date. Though, for others (that don't really know how difficult those tests are, I'd say) it may be a sign that the certified candidate would rather waste their time and money pursuing "stupid badges" than doing "actual programming", so YMMV.
&gt; I heard one of them mention that they’re happy that you don’t need an accompanying JRE download anymore. See, this is another interesting topic for discussion: people are happy that they don't have to setup a JRE (i.e. execution environment) but at the same time I see the SpringBoot + Docker stack quite often, which is an irony: nobody wants to take care of the execution environment, but they will still use Docker (only in a shallow manner, just for providing the OS).
"taking a look at the release notes every 3 months" does not give you the right to say "I know Java 10 or 11". You have to actually work with it before being able to say that, I think. And working with it is what's hard, since most companies are not being able to migrate so often, that's my feeling.
&gt;The introduction of collection streams in 8 was great, but jigsaw modules? I’m having a hard time finding justification to upgrade past 8. Yeah, me too. The modularisation part and exclusion of the JRE seems to go against everything that Java was so far. So far, Java was seen as a Platform... now, somehow, it is encouraging monoliths. 
Had not heard about this one. Thanks. Will test it.
Sonarqube, jacoco and hp fortify. 
First thing I do when starting a new Java project is configure it to use ErrorProne. 
Nice try, Microsoft
Nice timelaps keep at it ! 
Spotbugs (formely Findbugs), pmd and errorprone. First two being on the `verify` step of a maven build. Errorprone is a compiler plugin so it's always active.
From what I remember looking into it, the main advantage C# has is that you can use value objects (or whatever its called there) which allow you to control the memory layout of your objects, whereas with Java its harder to predict that. Maybe with SubstrateVM it got easier though, I don't know...I imagine its dependent on the JVM you use.
PMD, checkstyle, findbugs and fortify, plus whatever developers choose to use in their IDE. All but fortify get run at every stage, devs run them, build system runs them etc. We have strict checks in place so devs can't land code that is failing static analysis. Due to licensing reasons, fortify is only run by the build system, as a mandatory step before deployment. We use them because they work. I've spent the last several years working with exceptionally good engineers, on some major platforms. Regardless of how brilliant and capable any of them are, they still make mistakes, and the tools do help to catch them. This becomes increasingly critical as the size of the code base expands. It's strongly advised that you use them from day one of writing new code. Dragging already established code in to compliance is a pain in the arse, albeit a valuable one. Having it in place from the start saves a lot of time and hassles later on. 
I don't know why this link is downvoted...
This is oddly satisfying to watch (also good music to watch) What is your experience with programming/gamedev?
Witch tools are you using? 
and... what's the point?
I know you aren't asking for a code review but here are a few things that I noticed that I hope you'll find useful. * I would recommend you use some formatter, you have quite long lines (so long that you're scrolling just to read them). Shortening those lines will let you read your code faster (at least wrap the lines if you don't want to do that). * You could use a map for your images instead of declaring a variable for each individual resource you need to load. I'd also recommend not declaring multiple variables on the same line. Avoid `private String firstname, lastname;` Prefer private String firstname; private String lastname; * Avoid magic numbers. You use the number `3` and `2` a lot in drawing your graphics but what if you need to change those values, or any other value you use? Store them as a constant instead. * At 2:23 you have a series of if statements where the conditional is incredibly long and hard to read. It might be possible for you to abstract it out into a method and call that method. If it's not possible, at least add some comments for your own sanity. Code that is hard to read is hard to maintain. * instead of `if (boolVar == true)` use `if (boolVar)`, likewise instead of `if (boolVar == false)` use `if (!boolVar)` * You have quite a bit of repeated code that has only a few small tweaks. You could try to extract this code into its own method it and generalise it. Keep in mind KISS, DRY and YAGNI principles.
Can someone explain why the Substrate VM tests might have taken so much longer than whatever the java one they tested against was?
Thank you! I like these kinds of comments :) 
Well I'm pretty much all self taught, and my experience comes mostly from just trying things, I enjoy doing it so I thought I'd give a bigger project a try :) 
Any feedback is always welcome! I'm going to be doing a bunch of unrecorded work over the next week while I'm traveling and the plan for that time was to clean things up as much as I can. I do really appreciate the feedback I never went to school for this kind of stuff it's really helpful to learn things like this :) Thank you! 
It's written in netbeans, the artwork is all coming from https://opengameart.org and any art I've had to make is done with in photoshop 
Python 2 to 3 was way more disruptive. Python 2 code has to be carefully ported and tested. The boring parts can be automated, but maintaining a polyglot codebase is way harder. Compared to that, with Java &gt;= 9 one would just have to upgrade libraries and add `opens`/`uses` flags until it works again, or put everything on the classpath. Nobody forces developers to use the new language features. Conservative projects might restrict themselves to Java 8 |features. And that's fine, although some of them are pretty nice, like the new smart constructors for `Map`s and `Set`s. If upgrading libraries is not an option, one'd be stuck anyways at some point. As you point out, upstream developers cannot be expected to maintain an unlimited number of versions and configurations. I would not be angry if refactoring or new features are only made for Java &gt;= 9.
One thing to consider is that Jigsaw is about the heaviest change that came with the new Java versions. It really forced a cleanup of the ecosystem, but in return we get a much slimmer, customizeable runtime environment. This also extends to the frameworks that were fiddling with JRE internals: everybody knew that in the long run it was probably not a good idea to use reflection on `com.sun` and friends. Everything else seems pretty optional to me, and can be regulated with coding standards.
Lambdas and Stream code that are hard to read have to be refactored. Lambdas and streams were neither intended to replace loops altogether, nor are they an excuse to write unreadable code. They have a purpose: get rid of `new Runnable(){ ... }` and friends, and remove loops that perform /simple/ map\/filter\/collect operations. Agreeing on coding standard for projects is crucial. Apart from that, the module system was good for the ecosystem because it forced a cleanup of the JRE and explicit interfaces for frameworks and tools that mess with the JRE's internals. Internal library code can now be protected against unintended access. Also, reflection can be precisely restricted without inhibiting it altogether via security managers.
Potato vs Potato oh :D downvote earned.
Out of curiosity, what makes Apache better than nginx?
I think Java should be able to catch up once it gets value types sometime down the line.
Although Java lost the majority of those benchmarks, the difference would not be noticeable at all in regular, everyday use. If anything, it shows that the JVM is still able to keep up with all of Microsoft's latest advancements with .NET core. Now let's compare the ecosystems (libraries, tools, etc) between Java and .NET core...
It's just not very interesting to most people. 
Also try a vim plug-in it could change your life! :)
I'll look into it for sure! Thanks for the suggestion :) 
&gt; Lambdas and streams were neither intended to replace loops altogether, nor are they an excuse to write unreadable code. They have a purpose: get rid of new Runnable(){ ... } and friends, and remove loops that perform /simple/ map/filter/collect operations. None of this provides a benefit, it's just adding more complexity in yet another way to do the same thing &gt; Apart from that, the module system was good for the ecosystem because it forced a cleanup of the JRE and explicit interfaces for frameworks and tools that mess with the JRE's internals. Internal library code can now be protected against unintended access. Also, reflection can be precisely restricted without inhibiting it altogether via security managers. I didn't being this up at all but "It's a good thing!" seems like it's become a phrase that always used to cover up decisions that have had bad consequences.
I was also surprised C# was more memory hungry than Java in most of those. I thought that would be Java’s real weakness. 
The comparison with SubstrateVM is right there too: https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/java-substratevm.html
So these are benchmarks performing the same algorithm, but not necessarily implemented in the same way? This isn't a comparison of runtimes it's a programming competition.
Would like to see GraalVM results as well
Because it's a programming competition masquerading as a benchmark comparison. Dumb.
It looks like in your [submission](https://www.reddit.com/r/java/comments/a9q0sw/array_list_not_adding_object/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
And the implementations for the benchmarks for each are completely bloody different haha! The results are an order of magnitude off in some cases for a runtime that's almost identical. If this doesn't make it clear to you that these comparisons are idiotic and below useless then nothing will.
😂😂 
Java is getting value types at some point in the future, so it'll be interesting to rerun the benchmarks then.
Hey guys i just went to the job interview and wanted to share this website which helped me the most.. Many of the question were here except for the weird ones like "what are you".. Damn hate these nonsense questions.. 
For me it comes down to logic. Apache being process driven is deterministic, predictable, calculable, controllable. nginx is event driven, a complexity headache, which describes any event driven system, in my opinion.
I think that's GraalCE. GraalEE (not free) native-image with profile guided optimization can yield almost the same performance as java.
Because it is not how you do serious benchmarks. https://dzone.com/articles/jmh-great-java-benchmarking Btw, is there something similar for c# ?
\&gt; Now let's compare the ecosystems (libraries, tools, etc) between Java and .NET core... Agreed. The ship sailed years ago on .NET with respect to getting any real community around it. Even if the technology is slight better now, .NET long ago missed any chance at a network effect.
&gt;Why don't you use jlink to create your custom and smallest posible images deriving from the base you want (alpine, debian, etc)? As for jlink, that's not something I seriously considered. So I researched it today to see what that would entail. Unfortunately: - Gradle does not natively support jlink - Third party Gradle plugins don't particularly look promising so I'd be looking at using exec - To use jlink to cross compile (to Linux for Docker) we'd have to download an additional JDK of the appropriate target, complicating our build process - Alternatively, I suppose I could build the JAR natively and then use jlink within Docker as a part of a multistage build... But at that point, I'm not really sure what I would be accomplishing here &gt;can be easily solve by creating you own corporate image We actually use a corporate, polyglot, image based off of Alpine which we are supposed to use for everything unless we have a good reason not to. Changing the image to be based off of Debian unstable or Oracle or something would be less than ideal for the basis of our corporate image. And we're not really interested in doing a lot of work to maintain it from scratch. It might seem that a lot of my complaints sound like I'm bitching about little things, but we have a polyglot environment and Java is not a first class citizen. That means that it's pretty important for me to keep the Java build process as simple and fast as possible and not degrade the builds for the other languages. &gt;I don't know why there is no openjdk image for 11-alpine The reason is because OpenJDK did not provide a build for JDK9 to JDK11 specifically for Alpine. And the reason that Alpine cannot just use the standard Linux builds is because they use glibc, which Alpine does not use. &gt;Even if you don't want to, that is not a reason to blame the 6 month release cycle I don't blame the 6 month release cycle. I blame breaking changes which came both technically and otherwise. API breaking changes that prevented upgrading the local JDK regardless of source/build targets, using glibc which broke Alpine, and license changes that fragmented where people "should" get the JDK especially for Docker images. I've no doubt that Java will be fine down the road, but you cannot deny that this has been a shitty period for Java. &gt;but they are several to choose from and they are very, very simple I looked at it again and, you know what, you're right; I'll accept that there are better images now. JDK11 Debian is not even based off of Sid anymore. But mind you, this is a recent development made as little as [5 days ago](https://github.com/docker-library/openjdk/commit/c3023e4da10d10e9c9775eabe2d7baac146e7ae1) and it's apparently got a [pretty serious bug in it currently](https://github.com/docker-library/openjdk/issues/261). And I didn't know there was an an Alpine image for JDK12; I think that will be sufficient for us to upgrade straight to JDK12 now.
We use lots at work. * Checkstyle * FindBugs (need to update to SpotBugs in the new year) * PMD We also use Sonar, using a ruleset that mirrors the above. This gives us trends and allows issues to be assigned for fixing, and eventually we hope to only use Sonar. The problem with it is that errors don't break the build so they can sneak in unfixed if you're not careful. Additionally we use Fortify for security scanning. This has found some issues that we needed fixing, but has a *lot* of false positives...
I think graalce is used in the benchmark, which doesn't have profile guilded optimization (pgo) in native binary. Check this talk - https://youtu.be/lQNXwb66eQ8?t=1381 , which shows pgo native-image is 6x faster than regular java.
Triple quotes is what Groovy uses, I would be really happy if Java String literals would use the same syntax.
In the rare cases where I need a microservice or two, I go serverless! No devops needed. 
Look at [Badass Jlink Plugin](https://www.elmundo.es/economia/2018/12/26/5c226bedfdddff232a8b45c7.html), which seems to be ok and open to PRs to improve it if needed.
I see that Java runs regex-redux 1.41 times faster, and .NET runs k-nucleotide 1.59 time faster, while the other tests exhibit only minor differences. .NET Core has improved substantially in a short time. For Java, it is becoming important that Valhalla comes to fruition. 
With Valhalla, Java should be able to outperform .NET. 
any multi thread benchmarks? Java threading model and inter thread communication is stellar
I think Graal was still bootstrapping/compiling itself during the benchmark. These benchmarks are really very poor quality.
Are you looking to have an API, like a Rest API that then follows this pattern? Not sure what you are truly trying to solve here, or where in your stack you expect to have this C/D implemented.
Unit testing is about testing small functions or methods. So the size of the project doesn't really matters, since you are just testing small things... So Mockito, AssertJ, JUnit,.. are all suitable for both large and small projects. What other libraries and frameworks are used in that project? Because it's possible that the codebase itself might be a bit difficult to test. Does it use Spring or some form of depency injection?
[https://github.com/nadavc/groovykoans](https://github.com/nadavc/groovykoans) I use Groovy + Spock for unit and integration testing at my job and I love it
I wouldn't count it out just yet; remember that .NET was Windows only (mono notwithstanding) for a very long time, and the move to core and FOSS will change the landscape moving forward.
I doubt much is going to change through value types alone. The implementations mostly use primitives and arrays.
Hm I’m sure there are many others but H2 has a pretty nice test suite https://github.com/h2database/h2database
Just for anybody else looking at this thread, the latter 2 methods were added in Java 9.
How do people feel about: Optional&lt;String&gt; convert(String s) { return Optional.ofNullable(s) .map(StringUtils::convert); } Would that be an abuse of `Optional`?
Not that I disagree, but what does Java + Valhalla have to give it an advantage over .NET? Is it that the JVM has better GC algorithms?
Because the implementations are completely different, because it's a programming competition where people pick a side not a real benchmark.
Better JIT mainly.
My only advice is that if you're using more than the standard libraries, you're probably over complexifying things. JUnit and Mockito should do 95% of what you need. I also always recommend to do anything you can to not use PowerMock. It's a pile of shit and a crutch that bad developers use so that they don't have to write testable code.
With regard to Java + Valhalla, my thinking is mostly speculative: Currently, Java and .NET Core are about of equal performance. I expect that value types will significantly speed up Java. But for .NET a performance leap of such magnitude is less likely, because, if I am not mistaken, it has already value types. 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
[removed]
I use sonarqube, checkstyle, pmd and findbugs(previously, now it has been migrated to spotbugs). &amp;#x200B; At very first I use findbugs and it helps a lot. After that I use IDEA and integrate plugins to save a lot of time. They helped in many aspects and I highly recommend you to pick up at least one of them.
It looks like in your [submission](https://www.reddit.com/r/java/comments/a9u3u7/need_help_with_java_projects/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I was trying to get at how might the Substrate VM differ. But I did notice when looking at the source code for at least the pidigit methods that they did implement the method in different ways that seemed different enough to where it might cause a significant difference in processing time. So I'm not sure if this site can tell you anything about anything, really. 
Not an oss project, but https://www.cyber-dojo.org has some great exercises for tdd and it supports many languages and test technologies, incl. Java.
I agree, testing should be easy. If it’s not that means the code is pile of shit :)
Given when then.
If you want to see tests written by JUnit experts, go to the [test code](https://github.com/junit-team/junit5/tree/master/platform-tests/src/test/java/org/junit) for JUnit itself. You'll find all kinds of interesting features that are rarely exercised in most projects.
Legacy code may not have been written to be unit testable. Be prepared to do some localized refactoring to enable easier testing.
Spock is great. - given/when/then semantics are builtin which greatly reduces boilerplate - “where” clause for “looping” over sets of data inputs and their expected outputs Those are the parts i value most. Since Groovy is required with Spock (afaik) what purely Java source-code based testing framework - if any - is most similar to Spock or at least most recomended? i would love any tips here. 
I'd suggest saving Mockito until later, so you get into writing tests before dealing with magic that lets you continue testing when your dependencies are hard to use in tests.
Yes, its too old. Internet is full of pdfs of books covering newer Java versions. 
The Oracle docs are pretty good for learning the language basics and are up to date. Then I recommend getting a copy of *Effective Java*, which is a highly regarded collection of Java best practices.
While it will be missing some information about modern features, the features and practices it does cover will still be relevant. One of the nice things about Java is that it is backwards compatible. Code written in 2005 (the year generics came out) will still run today, as long as you aren’t using improper things like internal APIs.
Google Truth is a great library for writing clearer assertions with more helpful error messages. `assertThat(myList).containsExactly(2, 3, 4);` is so much clearer than what you'd write with just JUnit's `assertEquals()`.
Java 5.0 was great at the time!! :-)
I all ready know Java I'm a student it's just he gave it to me to perfect my coding
Search for "Big java, early objects" on libgen.io it's quite decent and java 8. Java 8 contain some nifty features, my favurite being Lambdas.
There could still be valuable info in the book if it teaches concepts about java. Also Java 11 is the current version everyone should migrate to because on 1.1.19 Java 8 is officially deprecated (from Oracle)...
[removed]
HAHAHA, &amp;#x200B; Java 12 is almost here, you better get at least a Java 9 book, as we are already moving away from Java 8. Just trahs it! &amp;#x200B; Good books totally worth to buy: Java A Beginners Guide Core Java Volume I--Fundamentals
That will worse your coding...
~~Yes~~Kinda and no. Java 5 is the absolute bare minimum for learning the language. Anything before that has far too many bad habits in it. Java 5 introduced several big items like generics and annotations. 6 was boring language-wise. 7 has several small but important additions, like the diamond operator, try-with-resources, varargs, and multiple exception catches. Try-with-resources is probably the most important as it removes many subtle bugs in code that was hard to get right. But Java 8 introduced lambdas and that changes the way you write Java code. Stream operations became more important. You almost have to learn a whole new programming paradigm to get the most benefit from it. This makes Java 8 the effective minimum version. Java 9, 10 and 11 have nothing must have in them language wise. (10 had local variable type inference aka `var` but that's completely optional). But I've only discussed the language. What tips it from kinda firmly into the no column is the changes in the standard library. For example, you should prefer `java.time` over `java.util.Date`, `java.nio.files` over `java.io.File`, `java.net.http` over `java.net.UrlConnection`. You should be very familiar with `Optional` and `Stream`. There are hundreds of other API improvements that make life better in modern JVMs.
Is the codebase simply a vanilla Java project? Depending on which frameworks are used you may need different approaches. The most important thing about testing is trying to think that if someone were to change your code or move it around or reorder it you would want the tests to fail if something in the app functionality were to break. If you learn what the stack is then you can look for examples and practice a bit before hand.
All these are technical stuff. If you want to understand, why to use microservices and how it should work, read a book about it. Building Microservices from Sam Newman is pretty fine.
The basics and concepts haven't really changed. 5 was the key release, since then it's mostly been syntax sugar. If you pick a modern IDE (intellij community or similar), you can work all the examples in the book, then let the IDE guide you to refactor the examples into a modern standard. This is a good exercise in itself, as you'll likely end up having to do that unless you go work for a start up or me company.
I wouldn't spend a lot of time on vue. React is in much more demand and is the js framework that will get you the most job opportunities. You may want to look at graph ql, serverless architectures using lambda, and at least be familiar with kubernetes.
That depends on where you want your career to go. On the technical side you could look at React and mobile frameworks. Then build up domain knowledge of whatever industry you're in as domain knowledge if often one thing that distinguishes developers. Then add some more skills that are less programmer focussed like UX Design and domain driven design Then softer skills like presentation skills, team management etc
And to be fair, there is nothing wrong with owning a pile of shit. I've owned more than one, that's for sure. Hell, in many cases, launching something a little bit nicer than a pile of shit is the *correct* thing to do. But all code becomes legacy code. Some ages better than others, but it all ages. But it's our job to evolve that piece of shit. Even if it means creating simple facades around static calls to make unit testing easier, it is our duty to improve it over time. JUnit 5 is great. It was annoying to have to move away from rules, but JUnit 5 is quite powerful and offers some slick features these days (I LOVE PARAMATERIZED TESTS)
a lot of react developers I know are currently eye-balling vuejs. if being full stack is what OP wants, I would keep it on the radar!
Euler project can be useful, I thinks it's particularly relevant to TDD. The tests exist and you need to write the code to make them pass.
8 years is quite some time already. Our industry is still growing, and to my experience, allrounders are less in demand than like 10 years ago (when I started as one). That’s why I’d say that You might want to think about specializing in something. Before you do (there is no rush) you can read up about T and Pi shaped developers, if you haven’t already. Check what those work theories mean for you, if they’re applicable and in which fields you want to grow horizontally and vertically. With your experience, think about leadership roles. If you like individual contributor roles, see how you can deepen experience in some fields while staying curious for others. In almost all situations, talking to your boss (or his boss, ideally both of them) and asking them how they can help you growing your career is something that I would strongly advise to do. 
I have nothing to add in regards to what framework to use, as most of the frameworks have already been mentioned. When I need to write unit tests afterwards for (legacy) code, I find that the difficult part of it is that production code cannot easily be refactored if it doesn't have backing tests. *As a last resort*, I use a custom logging Appender and append it to the root logger.
It depends how deep are you going to learn these things. It is good to know them, but if you are working for some company that is not specified in these... learning them deeply would be a waste of time. I recently discovered that technologies are quite similar to each other, what you need to actually learn are bigger concepts like microservices you mentioned - how to maintain them etc. - and WHY even they are getting so popular these days (which is not trivial). Learning concepts like TDD (quite old one but still important IMO), DDD (oh that's helpful) or CQRS helps you with career and isn't necessary tided up with a fragile techy stuff. I would also invest some time in learning the domain you are working with rather than technology. You probably learnt already programming, it's a time for making your craft sharper.
Oh geez, adding testing to an existing code base with no tests isn't as easy of a task as adding tests while adding features or fixing bugs. There are multiple different kinds of testing, depending on what the project is. Eg, frontend web dev extends itself best to A/B testing, I believe. I worked on a project that was proxy software for ISPs. We had unit tests, integration tests, and systems tests. I can tell you, without a doubt, the systems tests caught 90% of the bugs and the unit tests and integration tests were both harder to write and were far less helpful. The proxy software was in C++, but the systems tests were in groovy. If you're working on networking software or similar, I highly recommend systems tests. What kind of project is it? "Unit test" is somewhat ambiguous. When someone says unit tests they can mean multiple things. What the most ideal kind of testing is depends on the kind of project.
Hmm, aren't you mixing up things? I see you are asking about unit testing in the title however "automated testing" seems like integration/WebDriver/etc. thing.
[removed]
8 years is good, but still fresh from my point of view. As someone mentioned already: You may run after new technology's, which is definitely helpful when applying for a new job, but I would always recommend to spend more time in the basics of your craftsmanship, which is coding. shaping your code style (read code from others), enhance your way to achieve high quality code, work on your way to work with others, embrace pair programming and help others to achieve high quality code. In the end of the day those skills help a project way more to reach its goal. If you are able to use someone's ability instead of doing it by yourself, you are doing the first step to take a lead role.
take a look at all those apache libraries. apache.commons, apache.math, etc. They have usually a very high code coverage.
Apart from automated tools like mentioned SpotBugs, I classify code reviews as static code analysis as well, I think this should be also included in software engineering process.
Some early day coding techniques have been compiler-optimized by now. You might pick up bad habits from ten years ago. I‘d not read that stuff and concentrate on newer literature. 
It's good for you to learn the scope of certification - not necessarily to pass the exam at all. I did many interviews. My observation is people with OCPJP certifications has as the same variance of knowledge as non-certified ones.
If anything move from lts to lts. 
&gt; (..) a toaster could take down a boot server with layer 7 attacks. Does anyone has any details on that? Application layer can be as vulnerable as the application code is, not pretty sure there are many vulnerabilities related to the Spring Boot itself. 
I will go with a "No" for this one. I am reading the "Refactoring: Improving the Design of Existing Code" from the Year 2002 and i see how much the JAva Language has evolved. I see the examples from the Book and have the wich to refactor their best practices, because they are so clumpy today. The best practices simply changed with new tech. Insted of iterator we are using Stream, insted of Abstract Classes we often use simply lambdas or functional interfaces e.t.c. The worst thing is = your chanses on market. With java5 you are very limited to legacy stuff moustly in banks and insurances. Java8 is kinda the minimum Version for moust companies in my area. To break the version down for you, Java8 had big change in API. Java 9 had modules as biggest change, API did not changed so much. Java 10-11 are imho Java9 with a few patches :) But ! Java11 is the LTS, you do not need this for good jobs, but if you have the chanse to learn 11 then learn 11 ! As a developer you allways have to develop yourself ! I highly recomend you https://www.oreilly.com/library/view/effective-java-3rd/9780134686097/ It is rewritten for Java 8, it does not cover the Java 9 Module system, but it kinda opened my eyes. I was using Java very bad before that book, now im using it less bad :D 
AFAIK vue and react are pretty similar no? If so, I'd choose any other company over a Facebook technology.
RemindMe! 6 hour "jlink"
I will be messaging you on [**2018-12-27 17:32:28 UTC**](http://www.wolframalpha.com/input/?i=2018-12-27 17:32:28 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/java/comments/a9y7lk/understanding_jlink_java_11/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/java/comments/a9y7lk/understanding_jlink_java_11/]%0A%0ARemindMe! 6 hour ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ecnf2ud) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
It looks like in your [submission](https://www.reddit.com/r/java/comments/a9yj4g/dbunit_and_junit_5/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You don't need a JDK to run a Java app but a JRE. Every JDK comes with a JRE, that's why you can run your java application after installing a JDK. &amp;#x200B; Jlink, from what I know, is just a tool to create custom JRE, JRE that only contains classes that your application needs to have a smaller JRE. I think that is very useful for container and maybe IoT. But it doesn't turn your java application into a standalone application. There is tool for that like Launch4j (Windows only). Usually, java desktop application require the user to have java installed or comes with a bundled JRE (like IntelliJ).
Java hamcrest make your complex unit to assert as simple as possible : http://hamcrest.org/JavaHamcrest/
I know about jre, but there is not just jre 11, and I want to know how to use jlink. I don't find a good tutorial about it.
Check out [this article](https://medium.com/@adam_carroll/java-packager-with-jdk11-31b3d620f4a8).
There are huge improvements made on Java 9 over Java 8. One can ignore it for now, but not for too long...
You could call this BDD, Behavior Driven Development. 
That's why one uses the next lts. Which is 11. Why would I use 9 now? 
Ok so there is a new tool for that (Java Packager) but it is not yet included in JDK11. Not ready for production ?
It would be upvoted if Java won
I think they actually [removed javapackager from JDK11](https://bugs.openjdk.java.net/browse/JDK-8203379) and are thinking about [replacing it](https://bugs.openjdk.java.net/browse/JDK-8200758). I'm not sure about their reasons for doing that, but I'd imagine the tool is production ready. Internally Java Packager uses Jlink to create the small JRE image for you. The Santulator article links to [another article](https://medium.com/azulsystems/using-jlink-to-build-java-runtimes-for-non-modular-applications-9568c5e70ef4) about using Jlink if you care only about bundling the JRE with your application. Java Packager takes the process one step further and gives you installers for different platforms.
JRE is not a thing post-Java 11. There's no JRE on [Oracle's](https://www.oracle.com/technetwork/java/javase/downloads/index.html) or [OpenJDK](https://jdk.java.net/java-se-ri/11) sites. I guess consumer apps need to migrate to jlink (and provide different builds for different archs?) and i'd like to learn more about this.
Can you expand on java.net.http vs java.net.UrlConnection?
Except react is used WAY more than Vue in the industry. Except for your knee jerk Facebook tech is bad reaction, the overwhelming majority of the industry has adopted react. If you're working on a new enterprise frontend app, you're using react. So if the goal is to learn the skills for a job, then react is what should be learned.
Consider spending sometime studying technology that enables decentralized databases - merkle trees, a distributed comsensus algorithm - to get a flavor for them.
You know one you can quickly learn the other.
I'm a full Stack Java Devolper myself. I started learning react last year. I like it alot because it is so close to js. It does not feal like learning a Framework but just the Js langauage with a little bit syntactic sugar on top. 
Not an employer, but I'm a Java engineer who got OCPJP7 when I was getting started because I was doing the same thing you are. No employer I interviewed with even knew that cert was a thing. Having it didn't open any more doors for me. HOWEVER, the skills I had to master to get that cert were invaluable. Getting it made me a better programmer by far, and that was what ultimately got me a job. So go get it, it's still worth it.
Unless they already have a plan in what needs testing most, I'd run the codebase through some dependency analyizer and identifiy the often used hotspots. Start from there outwards.
JUnit 5 is pretty cool [https://junit.org/junit5/docs/current/user-guide/](https://junit.org/junit5/docs/current/user-guide/) I've used JUnit 5 in other projects and I didn't mind. I just like Spock now :)
**YES** Java has changed a LOT over the last 13 years. Thank your uncle, get yourself a new Java book, and never mention it to him again.
Can someone explain why there is no runtime environment for 11? Haven't kept up with this. I'm not quite sure how/why there is no jre.. 
The way i understand it, modularity (Java 9) allows developers to build lightweight "JREs" including only the modules they need + runtime and ship them with their apps.
Folks are downvoting you, but your answer is closest to the truth among those people have posted. Jlink produces java runtime environments that are trimmed to what a particular application needs. Those runtimes are platform-specific, and can include some nice invocation points that "feel" more native than pre-Java 8. Where we have to mince words is that even though jlink produces a Java Runtime Environment, it does not produce **the** JRE. If your app does any dynamic invocation, jlink may need some extra help to figure out what additional modules your app needs bundled into the runtime.
My company is moving to using nothing but vuejs for the front end. We are decent size 10bil a year revenue company and have giant it department.
After jdk11 https://jdk.java.net/jpackage/
Oh, so the jdk still ships with the jre in it, then, yeah? Guess I'll just need to read more about it.. haven't kept up lately since my work is stuck on 1.6 for now..
Explain that to recruiters.
The text is very hard to read but it basically just says * Memory leaks * Ignored exceptions Skip this one.
I'd focus more on the craft, less on technologies. TDD, CI/CD techniques, etc... That is of course unless you already know those.
`java.net.UrlConnection` is a very old API and makes working with HTTP harder than it needs to be. This is why Apache HTTP Client and OKHTTP are so popular. `java.net.http` was added in recent versions of Java (first as a staging API and then as a stable API) and provides a much more modern API design. OkHTTP is still a nice API too. (I'd avoid Apache HTTP Client because it still doesn't support `AutoCloseable` on its objects, making it much harder to use than it needs to be)
Nice. I'm a huge Vue fan, so I like to hear this. Overall, though, React is still the dominant player in the industry. If you're talking about the job market right now, especially in the USA (where I am), it's far more likely to find a react job than a Vue job.
Java was my very first programming language, so yeah I felt overwhelmed and at times hopeless when I started learning it. I still remember spending an entire day just trying to understand what the static keyword meant, at a time when my understanding of OOP principles was minimal. All I can say is keep at it. If you figure out something new, no matter how small, every time you sit down to code, then it's a victory. Sooner or later, if you do it enough, it'll make more sense to you. At least, that's how it went for me.
I like some of the points you made, especially about programming without frameworks to understand their value. My first job in the industry was at a shop that absolutely hated frameworks. I learned how to do everything a framework does for me by hand through that job. Now I work at a more traditional shop that uses spring and hibernate, and I can appreciate their strengths and weaknesses more now. It also means I understand what is happening behind the scenes better.
I think OP asked for unit test examples instead of libraries
If you don't want to move into front end, the whole CI/CD devops world is pretty awesome, plus the pay is outrageous 
Did you encounter any DDoS? Or is it something you think which "would" happen? I would say if you just start building something, focus on your feature first.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Both python and Java are good as first language. Stay on what you know first. There are tons of things you need to learn instead of the syntax itself.
that is why they hired gosling then
Tip 0: Try to avoid hibernate if you can. It's a bad idea. 
Removed as plain **blogspam**. Please, refrain from further spamming here.
It looks like in your [submission](https://www.reddit.com/r/java/comments/aa0bl5/why_is_javautillocale_implemented_the_way_it_is/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thank you!
Didn't learn much from the last time you ~~spammed~~ posted this, eh? https://www.reddit.com/r/java/comments/a7zl4a/help_is_java_no_longer_free_under_the_new/
[Java is now at a place where you can ship self-contained, zero-dependency applications that are comparable in size to other compiled languages](https://steveperkins.com/using-java-9-modularization-to-ship-zero-dependency-native-apps/) [Repo here](https://github.com/steve-perkins/jlink-demo)
We saw similar benefits deploying Error Prone + custom checks at Uber. And (shameless plug; I'm the author) if you want Kotlin-like null checking for your Java code and you're willing to add `@Nullable` annotations check out [NullAway](https://github.com/uber/NullAway).
Because there is no book on Java 11? Well, there is one just be released november/2018... Go for it: Java: A Beginner's Guide, Eighth Edition It covers Java 8 too! 
As a Hibernate developer, I think you're wrong.
You'll get more help from /r/javahelp, but this is highly specific to your setup. You'd need to post your entities for people to be able to help you.
 return em.createQuery("SELECT b FROM UserGroup b left join UserGroupMembership c where c.user:=id and c.usergroup=b.id ", UserGroup.class).setParameter("id", id).getResultList(); Returns unexpected token error @Entity public class UserGroup { @Id @GeneratedValue(strategy = GenerationType.AUTO) private long id; private String name; private String description; @Entity public class UserGroupMembership { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; @OneToOne(cascade = CascadeType.ALL) private UserGroup usergroup; @OneToOne(cascade = CascadeType.ALL) private User use @Id @GeneratedValue(strategy = GenerationType.AUTO) private long id; 
Can you give a reason for your statement?
It higly depends on your goals. Do you want to become an architect? Do you want to earn more? Or do you want to enjoy programming? The strategies will be different. Anyway **I believe there is no wrong path. Whatever you choose it will definatelly make your better**. Regarding frontend frameworks you might want to read [this article](http://sashashpota.com/2018/12/04/why-would-a-java-engineer-love-fronted-development.html).
At least you eat your own dog food (and I do mean dog food)
Do they really earn more than Java developers? What country are you talking about and how big is the difference on average? 
http://www.reddit.com/r/javahelp/comments/aa1500/-/eco9gks
If you're doing frontend, everywhere wants REACT.
[This](https://www.reddit.com/r/java/comments/5nz5nq/reasons_jpa_and_hibernate_should_be_phased_out/dcfikxn) and [this](https://www.reddit.com/r/java/comments/5nz5nq/reasons_jpa_and_hibernate_should_be_phased_out/dcfo2f5) comments summarize my main complaints with hibernate. 
To be fair: I haven't used hibernate for years. Maybe things got better in the mean time.
Something I am amazed is not done more often is API first design. So many companies want Rest APIs, yet..they code them up first, then try to use half baked solutions like Swagger to pull documentation from them. Then they write tests usually in code. API First, using RAML to design the API and the payload/models allows you to generate client, server, docs, tests, mocks, and more all from the same one document, and any changes to the API automatically build all the other pieces. You can typically model the payloads to back end CRUD tables if desired. I would look into that a bit more, as Rest APIs are growing exponentially in need and yet I still find developers who claim they know Rest only to grasp the basic concepts but miss a lot of it. Nothing worse than coming in to a project with a half baked Rest design, crap or no documentation, and no strategy on how to migrate towards microservices, so typically you see SOA based deployments claiming microservices. &amp;#x200B;
Like others.. it will help a little, but a lot has changed. I would say today you should start with Java 8. Also, pick up a copy of Effective Java (latest edition), its like the bible for java developers. Always have it handy to refer to. 
Oddly, I find it better to use a docker wrapper with a two phase build that uses jlink to produce a tiny docker image, then just run the docker container. That obviously is not ideal if you just want to run a single jar app on your machine, and you still have to install docker to run it, so that is not ideal. But you can run it anywhere, cloud, local, etc if there is a need for that. 
&gt;this article (about Santulator) I would love to see a way to bundle a java app with a React JS UI. Not sure if that is possible, but would prefer to use that over JavaFX
Check this medium [post](https://medium.com/javascript-scene/mocking-is-a-code-smell-944a70c90a6a) out.
There s also no book on 9. You don't need the Java 9-11 features as a beginner anyways. 
It was. You can start with the [new User Guide](http://docs.jboss.org/hibernate/orm/5.3/userguide/html_single/Hibernate_User_Guide.html) to get a felling of what's changed since you last used it.
&gt; Hibernate also causes an unnatural coupling between two classes. If I pass a hibernate entity from one class to another, I have to worry about how the entity is hydrated. My second class has no guarantee as to whether collections were eagerly/lazily loaded, leading to fun &amp; exciting performance problems. My second class either has to grab all transitive properties itself or the calling class has to be familiar with the implementation of the class it is calling. No, it does not. You don't have to worry how the entity is hydrated at all. Just make sure you use LAZY associations by default and you override the strategy on a per query basis. &gt; Hibernate is a layer that often gets in the way, with no transferable domain knowledge. When I write raw-SQL, I'm using my SQL expertise to write performant queries. I can't say the same when it's Hibernate. I'm only learning Hibernate and it's interpretation about how to DAO. At least when I'm writing bare SQL it's going to be similar across any language set. Same with interfacing with a reasonably well done cacheing solution like Guava cache. The knowledge transfers and it's apparent what's going on in code. You can still run native SQL with Hibernate. Hibernate is not a substitute for SQL, it's a substitute for plain-old JDBC. And if you use JDBC alone or some other thing wrapper on top of it, you still have to deal with the zillions of Driver issues that Hibernate insulate you from.
Thank you. I understand the individual(me) really dictates the answer to this, but your answer is great without getting too specific. Thanks again!
Definitely, in Toronto a good dev ops engineer can fetch 150k easy, java defs top out ~120k-130k
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'm interested in their decision to make JUnit 5 the default JUnit version. While v. 5 has been out for a while, most projects I'm familiar with are still using 4.x. Do most greenfield projects use JUnit 5, or is this NB trying to move the community that way?
In my area(Boston) 120k is about market value. How much more do devops engineers make?
Inb4: Idea rulez the univarse!!! Is there anything about netbean that makes it worth checking out? How does it compare to idea or eclipse. I only remember the name from prehistoric time.
easily upwards of 150k, the issue i've seen is just a lack of good talent, where decent java devs are a dime a dozen
I find it a lot easier to use than Eclipse. All of the switching perspectives and crap is just garbage. And when I switched years ago Eclipse was a major resource hog in comparison (I don't know how it is today because I haven't had a reason to switch back). Also when I switched Eclipse didn't come with a default SVN implementation, so there was always bullshit with whether someone had installed subversive or subclipse. I've never really used Idea, so I can't really speak to how good or not it is. 
I use Netbeans all the time, and no there isn't anything worth checking out. Support for my area of interest (game design) is very lacking. I just use it because I'm used to it. 
While I primarily use IntelliJ IDEA for big projects, for smaller projects where IDEA is overkill, I pull out NB b/c it's a fast, light solution. I have several colleagues who use it for all their work--including large projects. In the past, they have expressed preferences for it WRT Eclipse--mostly that it's faster than Eclipse and requires less ceremony. 
it only means that a new netbeans project would have junit 5 as testing dependency by default. Of course you can use whatever version you prefer, or keep whatever you have in your old project. don't think they want to "push" anything they just changed the default to a newer version which makes sense.
I see Vue popping up a lot lately. I haven’t used React but did a pretty big project with Vue at my last job. I was thrown into the fire with no prior knowledge and it was fun to learn and adapt to a new technology.
Whoa. I interviewed with a company that was devOps but willing to take Java devs, and I didn’t continue on because I didn’t think it was for me. Maybe I should revisit! Haha
&gt; All of the switching perspectives and crap is just a garbage UX It is a powerful UX, it beats all other IDE's in existence today, still.
(Full disclosure: 10+ year user, most of those with Maven as a primary build system) It's got dead-simple (in a good way) support for Maven: it just reads your POM and _knows_ what to do; the other IDEs make you essentially reinvent/duplicate your project (it seems to me). It also has straightforward J2EE support (IDEA's costs $$, which is fine if it's worth it to you). Before IDEA, when Eclipse and Netbeans were really the only two IDEs worth talking about, Netbeans was everything that Eclipse wasn't -- that is to say, it was the Maven to Eclipse's Ant.
How? What does changing the perspective provide that other IDEs don't in a more intuitive and consistent way?
For v8, it had lots of great features that no one else has. Unfortunately oracle hasn't donated everything yet so it'll be another 6 months or so until it's 100%. Works well for large projects IMO. Can't beat the price
I use Intellij at work and Netbeans at home. Both are far superior to Eclipse from a UX standpoint. I actually prefer Netbeans to Intellij by a marginal amount.
Yeah I forgot how painful Maven was in Eclipse back in the day... That's a good point as well. I don't know if this has improved at all either. But Net Beans Maven support hasn't changed much and it's always been super easy point and click to do things, and I rarely end up manually editing POM files in Netbeans. 
I could come up with a ton of examples, but the one that jumps out at me is how eclipse has dedicated "source repository" perspectives. This allows you to focus on just that activity while that's what you're doing. In IntelliJ, it's like slitting your own wrists to try and pull up menus that are not quite menus, which then pop up other menus that aren't quite menus to get to the final boss which allows you to have a window to do what you want, but god forbid you want to pause what you're doing with git and switch back to Java perspective to double check something, and then switch back to GIT to complete what you were doing. Eclipse lets you do all that effortlessly. Now, imagine you do Java/Angular/Database/Git/Spring, all at the same time, and don't want to have every possible view mixed together at all times, plus conflating editors and views, oh jesus christ I could go on. I tried switching to IntelliJ when I got a job that paid for licenses at work so I thought sweet! I tried for 6 months, and nearly ended my own life because of it.
When Junit 4 came out, most projects were still using Junit 3. There is no reason not to move from 4 to 5. In particular, 5 offers quite a bit of backwards compatibility with 4. While you should consider rewriting in the 5 way, you don't have to to adopt it.
I hope they pull back in EE support soonish. I know it takes time, but it is a really big missing feature.
You say build up domain knowledge, I have worked on a wall street app, an insurance app, and a tax calculation app... do you think I should just stick with these types of apps and learn the business better to separate me? I am not great with these businesses, but I enjoy the math and logic that comes with them and the jobs always pay well. As you know, it’s possible to be a successful dev without intricate business knowledge, but I have always found it helps immensely to know that side of things. Thanks!
Well, if you're trying to do perspective switching in Idea/Netbeans it's obviously not going to work. &gt; This allows you to focus on just that activity while that's what you're doing. &gt; &gt;... but god forbid you want to pause what you're doing with git and switch back to Java perspective to double check something, and then switch back to GIT to complete what you were doing. So are you focussing or multitasking? What are you doing in GIT that you would want to pause? All I can think of is conflict resolution. &amp;#x200B; &gt; Now, imagine you do Java/Angular/Database/Git/Spring, all at the same time, and don't want to have every possible view mixed together at all times, plus conflating editors and views I don't get what you're saying here. Of all the things you've mentioned, the only things that will be present all the time would be a little indicator next to the injection point of a Spring bean and the db icon if you enable data integration. The languages will just have their syntax hilighted (which is a good thing), and intellisense available. I really feel like you're trying to fault the IDE but none of these criticisms are valid. There's a reason no other mainstream IDE has copied perspectives.
While I agree that a book on Java 8 would be better, there's a lot of material from JDK5 that's relevant today. Enhanced for loop (I know streams are all the rage, but they aren't always neccessary or practical) Generics (I know we have diamond notation now, but creating generically typed classes are still as they were in 5) Case/Switch (which has String support since 7) &amp;#x200B; \+1 on Effective Java. One of my favorites
I don’t really see myself as a leader yet. I have mentored younger and even older devs, but as far as a manager, I don’t see myself as that yet. I find too many managers never get to code anymore. At my last position, my manager was a brilliant guy from MIT, and he was just always in meetings. He built the system years ago and would occasionally look at code and knew exactly where to find the code that applied to any business rule, but he was just always in meetings. I don’t want that. I know the money is great, but I always wanna develop!
Thank you! I will take a look at that article! Much appreciated!
Which is cool! I‘m one of those guys and yes, it sucks sometimes to not have the time anymore to craft. I just wanted to point out, that it‘s always of value to take conscious decisions for one or the other thing - or to know that you cannot decide yet. You seem pretty decided and that‘s usually something good, especially if you want to build a career on this decision. Individual contributor it is :)
Abandoned side projects, mostly web apps or solutions to exercises found around the web.
Does it have to be original code? Like I said, I follow along with instructors and end up with “their” code, essentially.
Spring5 comes with junit5
It has to be original code. If you haven't written any code by your own, you have [a bigger problem](https://i.imgur.com/mE8mpqV.jpg) than showcase your abilities on GitHub. &amp;#x200B;
What I really miss from IDEA is Gradle and Kotlin support.
Haha ya I have some original code. But I wasn’t sure. Thank you!
If you are already pretty java focused, I would take a go at spring boot and maybe try get spring certified. Or dabble with something like kotlin so you can spun up a microservice quickly, maybe look at deploying on Cloud Foundry, AWS or Google apps. Then also playing with something to listen for commits, automate testing and deployments. Then you should be able to spin up a microservice and deploy in a few minutes. Pair up with a UI person who can do some quick UI mockups and you get a really powerful combo for a Enterprise environment. 
[https://stackoverflow.com/a/28635465/241899](https://stackoverflow.com/a/28635465/241899)
IDEA is super well integrated with Gradle now, to the point that outside of personal preferences, a Gradle file is enough to bootstrap an entire project, and you can make the IDE delegate all build and run operations to Gradle, so that Gradle is always the only runner and source of truth. I don't know how it was before.
Mixed mode debugging between Java and C++, while JetBrains will gladly sell you two licenses and a cumbersome workflow between InteliJ and Clion. Ant and Maven as project files. One of the best GUI designer experiences for both web and desktop projects. The integrated profiling tools.
&gt;Just make sure you use LAZY associations by default and you override the strategy on a per query basis. But there's the problem. The calling class has to know that this is not just any old object, this is an Hibernate object and it has to be treated differently. This causes differences between unit tests (where you've initialised JPA annotated classes as traditional objects) and the real world where classes are lazy initialised. This is really more of a problem with ORMs in general, and isn't something unique to Hibernate as an implementation of an ORM. Hibernate, and other ORM tools, really can have their place. But it's best suited to domains where the model isn't complex (e.g. mostly CRUD operations) and where you're playing to Hibernate's strengths (e.g. you need to support multiple database servers without code changes).
You might want to check sdkman.
The only repos of mine that I like are https://github.com/jhg023/SimpleNet and https://github.com/jhg023/BitBuffer - The rest are just projects that I became too lazy to complete.
Do you know what is the source for the binaries that brew installs ? Brew is a kind of package manager, not a super-trustable repository. 
Exactly, the legacy runtime ensures that your Junit 4 tests will run happily alongside Junit 5. There's no need to force an upgrade on your tests. 
So you created both those from scratch? I guess I just am not creative enough to come up with ideas that are original. 
It is super nifty. Particularly because other out of band bug reporting solutions have a nasty tendency to be completely ignored. I'm all for "break at build time" type linting. Makes it much harder to just ignore problems.
There is probably some uses for it but in the 8+ years I have seen it used in projects it's been a disaster every time. But we primarily deal with large / complex data models which hibernate / SQL DB's are terrible at handling. But then anything hibernate can do, spring repositories can do simplier and faster, except complex data models which relation DB's don't handle well anyways. 
Perspectives contain Views which offers an unlimited combination of organization styles depending on the Workspace/Project structure, langauge(s) in use, personal preferences. Eclipse has had it right for many years, which is why NetBeans, Visual Studio and IntelliJ (among others), have borrowed heavily from it (and continue to do so). 
mostly admin scripts and some forks i had to customize.
NetBeans and chill
Yes.
At least they announced it in such way. I am looking forward to try, v9 was bad,
What on JDK9 is bad?
There are two great books on JDK9: A Beginner's Guide, Eighth Edition and Core Fundamentals
I believe they mean Java 11 support in Netbeans 9. Very few Java &gt; 8 suggestions or refactorings were available. I have only been using Netbeans 10 for about an hour but it doesn't seem to have changed much. 
Nothing. Long term private Java Developer, just now I am getting to know it all! Loving so far! I have been just mostly collaborating in some cool projects on GitHub/GitLab! 
Netbeans, not jdk 
Sad! 
Show me perspectives in any of those IDEs. It's fine to prefer an IDE, but to state so boldly that it's the best thing for any task in any language is BS
Brings back the memories of supporting Java 3.
Oh, I see! My bad! 
Brew is basically just curling for you from the openjdk (or whatever your installing) repos. You can check GitHub for the specific commands each script is going to run. I think there's a dry run command for Brew to show you what it's going to run. You can also check out https://sdkman.io. I use that with http://www.jenv.be to manage several Java versions and swapping between them. I wish sdkman had jenvs support for setting a Java version for a directory. Alas, maybe one day ( I could also just be missing something. Maybe I can ditch jenv?) 
I've been using openjdk 11 with Apache netbeans 10. So, yes?
Idea uses mixed views for certain actions/things, in your example where you're editing swing, the source is put in a panel next to an editable preview, if you have ever used Android studio (also idea) it does something similar when editing Android uis
The problem is with what I do I often want to see both the code and outputs of various IDE features. Perfect example: The web service browsing perspective. It's often useful to be able to see both your code and the output of a webservice call at the same time. Can't do that with eclipse because they're separate perspectives. Another great example: The enterprise perspective. If you're doing a JEE project that gets in the way. Third, I work on mixed codebases where we have one application written in another language that accesses a java application via webservices. Looking at both in eclipse can be painful. And it's not very intuitive to pick up either... 
That sounds like a lot of effort to set up for something everyone else gets right just right out of the box... That doesn't sound at all intuitive. But to each their own. I don't have a problem with you liking eclipse, but that's exactly why I don't like it... It seems way to fiddly. 
In the latest stable release of IDEA Ultimate there are still 2 minor issues with gradle integration that annoy me. Unsure if it's because I use the kotlin DSL or not (haven't tried the groovy DSL in a very long time) and they are: 1) Java source- and target compatibility is not automatically set to the correct version for each module (and despite having set JDK 11.0.1 as my default, it insists on JDK 8 unless I change it during import) 2) When using lombok (or other annotation processors) IDEA won't automatically enable them for those modules even when using the new-ish `annotationProcessor` type (ie `annotationProcessor("org.projectlombok", "lombok", version)`) And one thing that I suppose is more of a feature suggestion: I wish it would automatically add run configurations for `application` type modules!
Intellij IDEA has great Maven support now -- just open a directory containing a pom.xml and everything just works.
Eclipse switches perspectives for debugging. Suddenly your workspace is organised different. How is that better than having a window/panel show up and keeping everyrging else in place ? 
When you test a data access layer, unit tests don't provide a lot of value. You need integration tests against the same DB engine you use in production. Thanks to Docker and tmpfs, this approach can be just as fast as any in-memory DB.
Yup, having the compiler complain about all that dumb lint sure gets it fixed faster.
You have to enjoy it though. But operations these days is less about tinkering on linux servers and more about writing code to automate everything. All the decent ci/cd pipeline (gitlab, circleci, even jenkins pipeline you can work with groovy) you are writing code to automate the building and deployment of applications. Throw in there some containerization (docker, k8s, openshift, gcp) and the whole operations workflow revolves around code, not a super smart sys admin playing with IP tables. I've written plenty of java code in my career and i'm finding this new devops world pretty freakin awesome. 
Interesting. I love creating anything and enjoy the automation, so I am going to look at this world intently. Thanks!
You can arrange whatever Views, in whatever Perspectives you desire. You're not limited.
Pretty easy now. File &gt; Import &gt; Maven Project &gt; Browse to the folder containing your pom(s) [ They can be in a subfolder ], hit OK, select the POMs you want, hit OK. Eclipse imports them, automatically links open dependencies, and everything pretty much just works.
Agreed. I like to switch back and forth between IntelliJ and Netbeans just to stay fresh in both. It's been a decade or more since I deliberately installed Eclipse anywhere, and I could happily retire at the end of a long career without ever having touched it again. Some people used to use WordStar as an editor too, once upon a time. That doesn't mean it (or Eclipse) were good tools for the task.
This is not a proper answer, link shows how to install java not openjdk.
Son
Google how to switch to openjdk. It’s various implementations are well supported by reputable companies e.g. redhat, amazon, ibm, etc.
You have two good options: 1. https://www.azul.com/downloads/zulu/ : zulu is a build of openjdk made by azul for all platforms 2. adoptopenjdk - they are in fact legit. they are a new distributor of openjdk builds, but they make good ones and also openj9 builds.
&gt; There is probably some uses for it but in the 8+ years I have seen it used in projects it's been a disaster every time. It would have been a success story if they had read my [High-Performance Java Persistence book](https://courses.vladmihalcea.com/p/high-performance-java-persistence-ebook?coupon_code=XMAS18). &gt; But we primarily deal with large / complex data models which hibernate / SQL DB's are terrible at handling. Any large/complex data model can be mapped via client-side `@ManyToOne` and `@OneToOne` associations just like you have FKs on the DB side. Those are the only annotations that you need for complex relationships. &gt; But then anything hibernate can do, spring repositories can do simplier and faster, except complex data models which relation DB's don't handle well anyways. Spring Data JPA uses Hibernate as well. It's just another abstraction layer on top of Hibernate.
Spring jpa does but not the jdbc interface based repositories. I know hibernate can handle large data models, but it is a pain to do so historically, they may have improved it from a annotation standpoint, but performance wise it can't compete with nosql DB's just by the nature of relation databases. I know it can be used in some instances effectively, but in a old school Enterprise environment it's seen as a defacto when if really should be a exception to be used. (Sorry for formatting, mobile &gt;&lt;)
I would expand to say, it's not partically hibernates failure performance wise but more relational databases are not suited to most of our teams tools. ETL style where we extract large datasets that are usually persisted to be retrieved entirely for generating reports. The main place I see hibernate being of use is in data models which retrieval patterns match relation DB's better, but historically that is not where I see it getting used
Home brew is open source so you literally can look at the formulae that your installing and see the link in the ruby script. You can go with Oracle JDK which is on the official home brew casks repo or OpenJDK is at https://github.com/AdoptOpenJDK/homebrew-openjdk/blob/master/Casks/adoptopenjdk8.rb Reliable source is for you to determine since OpenJDK is not Oracle builds.
Openjdk will never have a long term support version, so moving to it will mean having to be in the last version forever. the main jdk on the other side, will mean paying to Oracle for using the long term support versions. Java 8 is LTS and one of the most patched and secure versions at the moment, but for sure vulnerabilities will be found after it looses support. 
In my opinion maven support is still more smooth than gradle in intellij though.
 &gt; I’ve also realised that Java 8 will be losing support in about the next year, so I was wondering, how safe will Java 8 be to use after the end of support date? The answer is one of my favorites: It depends. The question is always whether or not there is a bug in the JDK which allows an attacker to execute arbitrary code. For example: If your server is facing the internet, can a request be forged which allows the cracker to execute arbitrary code on your end? If the answer is "yes", you have a problem. If the answer is "maybe" you have a problem. If the answer is "most likely not", you are fine (because that is the same as running on a supported version). Using an unsupported version does not automatically elevate the security risk for you, but it makes it more likely that you'll have a problem down the road. Java 8 will be out of updates in a year, if there isn't an attack available against it, you ain't got a problem. If there is one, you better have a good emergency plan. There is nothing inherently wrong with not running the latest version of something (no matter the reason). However, there is something inherently wrong with running a vulnerable version, and despite what everyone on the internet wants to make you thing, stuff that does not receive updates anymore is no inherently vulnerable.
Two very good points. Bothered me as well, a handful of times. I don't think it has sth to do with the kotlin dsl, because i experience these problems in groovy projects as well. Besides that, everything worked for me so far.
&gt; is that the Java EE modules were removed in JDK 11. AFIK all the modules removed from JDK11 are available as external dependencies via Maven, Gradle (or Ant if you are inclined so).
I don't know really, it's kinda nice to be able to define different perspective for different task. It's not like filetree + source code is always the best for everything.
I'm curious, what does Dynamic Class-File Constants support means in the IDE?
I think the point he's trying to convey is that the whole idea of perspectives is fiddly and doesn't really add much value from my experiences. But I would love to see how it benefits your workflow - and I'm not being condescending/sarcastic, I'm genuinely curious.
I'm eager to use something like Jupyter in my classes for Java for same reasons pointed by Frenkel but I foresee high number of people that would end to think that Java "runs in browser" or "you need browser to run Java" or, God bless me, "Java is Javascript".
CORBA and RMI-IIOP were removed with no replacement. Admittedly, if you're using either of those in 2018 you have bigger problems than running Java 8 unsupported.
It is just downloading from same place as "[https://adoptopenjdk.net/](https://adoptopenjdk.net/)", and do some more stuff. Are these really necessary ? What I did is , just download the binary and run below commands: 1. tar xopf OpenJDK8U-jdk\_x64\_mac\_hotspot\_8u181b13.tar.gz 2. sudo mv jdk8u181-b13/ /Library/Java/JavaVirtualMachines/ But if you check homebrew's script, it is doing hard to understand operations. Is there anyone who understand what it does ?
It looks like in your [submission](https://www.reddit.com/r/java/comments/aa8ypu/java_command_line_app/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Agreed, runtime images created with jlink are a great fit for running Java apps in compact Docker images. The ModiTect Maven plu-gin can help with creating such layered images (see [https://github.com/moditect/moditect/wiki/Creating-dependency-images](https://github.com/moditect/moditect/wiki/Creating-dependency-images) for an example around Vert.x). Disclaimer: I'm the author of ModiTect.
I wouldnt put up a straight tutorial. Aren't you thinking as you do the tutorials though? Watch a couple on a specific topic, after following along for a few you will hav enough knowledge to build something original.
I missed that two. &gt; if you're using either of those in 2018 you have bigger problems than running Java 8 unsupported. +1
Personally I haven't found myself in a situation when during debugging I didn't want to see package tree with current class marked or the source code of that class. 
Oh sure but Eclipse is a kitchen sink of functionalities. I haven't used it in years but I remember that when I did I had a very customized perspectives for a bunch of things. I was always more confused with the "mounting" of the file system though.
&gt; but performance wise it can't compete with nosql DB's just by the nature of relation databases. Facebook uses MySQL, and so does Twitter, Instagram and Netflix. Pinterest uses PostgreSQL, like Reddit. [StackOverflow uses just 2 SQL Server nodes](https://stackexchange.com/performance). Netflix uses If the top-50 website do fine with relational databases, I suppose any enterprise application having thousand times less traffic can do well with a relational database. 
Hibernate is useful for OLTP applications. You can use CDC tools like Debezium to extract change events and push them to Kafka. From Kafka, you can update the business analytics apps, caches, etc.
Nah
Perspective is a UI preset. You need different UI layouts for different tasks, e.g. developing and debugging. What more is there to it?
Visual Studio changes layout when it hits a debugging breakpoint. The same thing happens in Eclipse, only it explicitly switches to debugging perspective, which you can set up however you like.
You don't have to switch perspectives to access views/editors associated with it.
&gt; Suddenly your workspace is organised different Because you need a different layout for debugging? You need more space for current stack, watchlist, variables, breakpoints etc. And you can always set the perspective up to mimic your main one only with additional UI, say, in a window on another monitor (i use something like this for debugging).
I tried a couple a while ago and found a liking to https://openclover.org/ and https://www.owasp.org/index.php/OWASP_Dependency_Check.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Because you need different views open and ready to use during debugging. Like your watch view, your breakpoints view, etc. You truly do not those open and visible all the time, and you certainly don't want to have to re-position and re-open all of those when going from coding or running to debugging. What you want is an easy way to say "toggle all the views I use during debugging, and put them exactly where I personally like them to be." Eclipse shines on this point.
Also note that Eclipse is kind enough that if you don't like this (auto toggling of perspectives) behavior you can turn it off easily. 
&gt; I’ve also realised that Java 8 will be losing support in about the next year This only applies to the Oracle version. AdoptOpenJdk will continue supporting it. Amazon’s OpenJDK distribution, Corretto is yet another option: https://aws.amazon.com/corretto/.
I host a personal blog on GitHub that contains all stuff I learned so far...and some shell scripts for production deployment 
Yeah, having yi manually enable annotation processing for each imported project that has annotationProcessor is quite annoying.
I preferred Eclipse than NetBeans and now I prefer IntelliJ. Sorry NetBeans :)
Sure you can rearrange things. But the default isn't very intuitive. And I don't really feel the need to have a separate layout when I'm diffing or debugging or accessing webservices, or doing something related to an application server (Enterprise Perspective). 
**it will also be** **essential** **that you can demonstrate** [**soft skills**](https://www.tapresume.co.in/recent-jobs) **like:** * excellent written communication * excellent verbal communication * the ability to take design concepts and run with them * teamwork * flexibility * agility and * creative problem-solving skills.
OpenJDK 8 will be supported by Red Hat until mid 2023. If you’re running your applications on RHEL or any Red Hat platform, you’re set. 
Have you confirmed that your software doesn’t work under Java 11? So far I have had some problems with modules made in groovy, but all of our Java/Spring applications either worked without change or worked after changing some library versions. If it doesn’t work, have you looked up how much extended support from Oracle costs, and whether that’s cheaper or more expensive than doing the work to move to Java 11?
That's the thing, in both Netbeans and IDEA I don't need all that because large part of it gets incorporated into editor. I don't even remember last time I had to use a watchlist because I see the values in the editor. It's way easier to follow it in editor than get confusing logs about variable not existing because of the watch. To me Eclipse default UI is everything but ergonomic. I understand that some people may prefer it, especially if they like tweaking it to the max, but I like not to bother too much with configuration.
[https://www.eclipse.org/eclipse/news/4.10/jdt.php#jdt-codemining](https://www.eclipse.org/eclipse/news/4.10/jdt.php#jdt-codemining)
I get this in other IDEs without repositioning everything. One of the reasons I don't like Eclipse is because I would have to spend a lot of time to make it ergonomic, while the others come with reasonable defaults.
I think it's just personal preference, like musical taste. I despise the way intellij works for these scenarios. It feels like I'm drowning when I use it. With eclipse I can get a clean perspective that behaves exactly like I want, and that is simply impossible in intellij.
Have you tried simply adding relevant Java EE libraries to your dependencies? After that, the chances that your code will work are pretty high. You might need update some other dependencies and fix some other small random things. I wrote about my experiences with Java upgrade process here: https://karols.github.io/blog/2018/09/20/getting-java-8-app-run-java-11/
Pretty much. The only thing I hate is when the project forces me to use a specific IDE. As long as everyone can pick whatever works for them I'm happy.
I use the big three most every day. Here are some of the differences I've noticed. It's incomplete and probably wrong in some cases. Please offer corrections. ||Eclipse|Netbeans|IntelliJ| :--|:--|:--|:--| |Remembers previous test results||Separate tabs|Clock icon| |Remembers previous search results| |Yes|No?| |Remembers previous console output|Yes|No|| |Remembers previous find uses/references results| |Yes|| |Save current console output to file|No|Yes|| |Cleaner display of collection variable while debugging|No|Yes|| |Go to implementation of an interface|Ctrl+Click "Open Implementation"|Click gutter icon| | |Debug visual step into|No|YES|| |Graph of maven dependencies|No|Not very helpful| | |Maven dependency conflict checker|Yes|No|| |Command to just remove whitespace|No|Yes|| |Remove whitespace on modified lines only|No|Yes|| |pom.xml intellisense|No|Yes|| |Open recent files|Sometimes|Yes|| |Gutters allow for multiple annotations|No|Yes|| |Auto semicolon|No|Yes|Yes| |Multiple instances|Yes|No|Yes| |Built-in maven type search|No|Yes|| |Show only trailing whitespace|Yes|No|| |Git log display|Eh|Bad|Good| |List all open files|Ctrl+Shift+E|Corner dropdown or Window &amp;gt; Documents View &amp;gt; Recent Files, but lists closed files too| | |Git diff display|Bad|Better|Better| |Quick navigation to/from tests|Plugin|Yes|| |Sane project view|Yes|Yes|No| |Collapse all|Yes|No|Yes| |Code coverage|Plugin|No|Yes| |Identifier spell check|Plugin|No|YES| |Multi-monitor support|Poor|Very poor|Yes| |Show errors in project view|Yes|Yes|No| |Color packages based on changed files|Yes|Yes|No| |Auto-complete priorities matching types|No|Yes|Yes| |Colorize console output|Plugin|No|| |Able to see full test run stdout|Yes|Yes|No| |Able to see stdout for just a single test| |No|Yes| |Unique static code checks|?|Yes|Yes| |Sane row of tabs||Yes|No| |Highlight code that throws an exception by simply clicking it|Yes|Yes|Can click the throws/catch and find usages to see| |Ctrl+C copies entire line if nothing is selected can can't be turned off| |Yes|Yes| |Rename local variable to anything|No|Yes|No| |Only remove unused imports, not rearrange| |Yes|No| 
The brew script: * Gets the data at the AdoptOpenJDK binaries * moves some files around within the local directory * makes a directory for the install * Links the shared library to the proper spot (see `man ln`) * Updates the Plist for running Java (see `man PListBuddy`) The advantage of running brew is that it keeps it up to date with new builds and makes it easy to uninstall if/when you want to do that. Before using homebrew, I would occasionally be doing the "oh, I want program X" and having to download and compile all the library dependencies for it... and then updating those when I needed a new version. ~ $ brew upgrade ==&gt; Upgrading 30 outdated packages: activemq 5.15.7 -&gt; 5.15.8, php@7.1 7.1.24_2 -&gt; 7.1.25, jansson 2.11 -&gt; 2.12, nghttp2 1.35.0_1 -&gt; 1.35.1, libpng 1.6.35 -&gt; 1.6.36, nettle 3.4 -&gt; 3.4.1, pixman 0.34.0_1 -&gt; 0.36.0, tomcat 9.0.13 -&gt; 9.0.14, curl-openssl 7.62.0 -&gt; 7.63.0, clojure 1.9.0.397 -&gt; 1.10.0.403, perl 5.28.0 -&gt; 5.28.1, harfbuzz 2.2.0 -&gt; 2.3.0, glib 2.58.1 -&gt; 2.58.2, netpbm 10.73.22 -&gt; 10.73.24, erlang 21.1.4 -&gt; 21.2.1, r 3.5.1 -&gt; 3.5.2, graphite2 1.3.12 -&gt; 1.3.13, sqlite 3.25.3 -&gt; 3.26.0, webpack 4.26.1 -&gt; 4.28.1, leiningen 2.8.1 -&gt; 2.8.3, curl 7.62.0 -&gt; 7.63.0, emscripten 1.38.20 -&gt; 1.38.21, freetds 1.00.104 -&gt; 1.00.109, scala 2.12.7 -&gt; 2.12.8, swiftformat 0.35.9 -&gt; 0.37.1, mono 5.14.0.177 -&gt; 5.16.0.220, node 11.3.0_1 -&gt; 11.6.0, openldap 2.4.46 -&gt; 2.4.47, imagemagick 7.0.8-14 -&gt; 7.0.8-21, gnutls 3.5.19 -&gt; 3.6.5 Doing that by hand is very much in the 'not fun' category.
You can also see values in editor tooltips but it's more convenient to see the whole scope in the Variables view.
Yup, did it with our webapp. Had to add about 4 jars in. It took a couple of days with testing but fairly painless.
????????
Sure any large corporation will and probably should use all kinds of databases. It's entirely down to the access patterns required. Flatter data models that don't require a large amount of table joins will work great, but in those cases jdbc works great. Hibernate is useful when it's complex data models where you need to store it in a relational DB, but in this case a nosql DB will probably be a better choice.
[Amazon Corretto 8](https://aws.amazon.com/corretto/) is Java 8 and will be supported at least until 2023. It's worth mentioning that Amazon hired James Gosling.
It's also worth mentioning that Amazon hired James Gosling.
Now add Visual Studio and see a long row of "No"
Which OS are you running on in production. Good OpenJDK 8 options are available for Amazon Linux (Amazon), RHEL (Red Hat), Debian / Ubuntu (AdoptOpenJDK or Azul Zulu), Windows (Red Hat or AdoptOpenJDK) and Mac (AdoptOpenJDK). You will need to make the switch to OpenJDK, and I would do that sooner rather than later. Note that if you switch to JDK 11 you will also be moving to an OpenJDK binary, anyway. OpenJDK is your future, whichever way you go.
Java in a Nutshell 7th edition just came out, and it covers Java 11.
It was literally the main release point of NB 10
Java is an horrible language and games are platform specific, mostly. Thats mean it depends on platform, you wanna develop for.
I would look at it a bit differently. How easy it is to transition from any language to any other language is a drop in the bucket, learning wise, compared to the amount of stuff you will have to learn to do what you want to do. Learning languages is a tiny part of programming in general, so focus more on the other parts. That being said, both languages have common origins, so you will be able to apply some of what you have learned to C++. 
If you want to switch on any language without a problem, you should learn the fundamental things like data structures, algorithms, design patterns. If you do not know them, you are not became a good programmer. As for java and c++, I think you may select any object oriented language and then switch to c++ if you want
Woa.. so this is basically a better spotify maven docker plugin? It looks at all dependencies of an app from maven build, and builds that image, and then I assume each build it only builds that image if any dependencies changed? 
Oh I agree..but I assume a book on JDK 8 would cover that too.. I would hope they dont require you to buy Java 1,2,3,4,5,6 and 7, and just add 8 features in that book? Most books I get, when updated, expand the book. So a JDK 8 would still have Java 2 (lets forget 1) through 7 in it, plus be a bigger book to go in to details on 8. Thus, I tend to think a Java 8 book would cover all the goodies from 1.2 on up. 
There are similarities, both in terms of concepts and syntax, between the two languages, so knowing Java should make it easier to pick up C++. C++ is a more complex language and platform to develop for though, so it won't be all plain sailing. I find that Java is generally better for picking up new concepts and expermenting with them, as it's easier to get something up and running quickly. With C++, if you're not careful you can easily get bogged down with having to deal with memory management, platform-specifics (e.g. linker issues) etc, and consequently having to debug tricky application crashes. Java provides a level of abstrtaction from the underlying OS &amp; hardware, which allows you to spend more time on the "code that does the stuff", but typically this comes at the cost of a performance hit. Java GC pauses also aren't ideal for real-time stuff, though there are now GC implementations that can run concurrently (i.e. in the background). Most games are written in C++, though there are a few that are written in Java - Minecraft being a notable example (though I understand it now comes in a C++ flavour as well).
 Please show those measurements. ---- "*What is the typical performance profile on the SVM?* Right now peak performance is [a bit worse than HotSpot](https://www.graalvm.org/docs/reference-manual/aot-compilation/), but we don’t want to advertise that (and we want to fix it of course)." 
yes, idea and netbeans give those by default when debugging AFAIR. 
If you want to be serious about the topics you listed, C++ will be least of your worries.
https://benchmarksgame-team.pages.debian.net/benchmarksgame/sometimes-people-just-make-up-stuff.html#jvm-startup-time
Pleased you asked, here's the standard response — - To show working programs written in *less familiar* programming languages - To show *the least* we should expect from performance comparisons - To show how difficult it can be to make *meaningful* comparisons
Well, if you're doing your own thing, no problem, but there'll be a lot of Java shops not upgrading for a bit at least, so YMMV if you want to get a job doing Java.
Not a bad idea. You can think of Java versions the same way you think about browser versions. That is, you probably don't care if you are using Chrome 60 vs Chrome 70. It is mostly the same experience. (not a Python 2 vs 3 or Perl 5 vs 6 sort of scenario).
*"If you're interested in something not shown on the benchmarks game website then [please take the program source code and the measurement scripts](https://salsa.debian.org/benchmarksgame-team/benchmarksgame/blob/master/README.md) and publish your own measurements."*
As of now it will be my stuff as by trade I’m a system engineering lead :)
Look at the `cpu load ` column — 71% 73% 93% 74% — 4 busy cores.
Cool answer, I like it 
you can explain? the master I want to do is c ++
The website is low volume — "April 2017 through March 2018, Google Analytics saw 477,419 users."
It's easier to transition from C++ to Java because it's largely a matter then of, "oh, here's something I \*don't\* have to do". I think it would be harder to go the other way, but this is just a gut feeling, as I have done it only from C++ -&gt; Java. One of the biggest issues you would find, I think, is memory management, which is implicit (to a degree) in Java and explicit in C++. There is also the huge body of existing and easy-to-incorporate public FOSS in Java land. It takes a bit more effort to find and incorporate 3rd party work into C++ apps.
Wouldn't say that being familiar with Java gonna make it easier to pick up C++, especially when most Java developers don't really know how their memory is managed by gc in jvm. The only thing that may come easier is calling by reference. 
Thanks!!!!! What about java for vfx?
That's actually the most correct answer here.
Not my field, so no idea.
Why do you think that? [The logs](https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/nbody-substratevm-4.html#log) show 2 separate activities: the first builds the program and the second runs the program — MAKE: mv nbody.substratevm-4.substratevm nbody.java /opt/src/graalvm-ce-1.0.0-rc10-linux-amd64/graalvm-ce-1.0.0-rc10/bin/javac -d . nbody.java /opt/src/graalvm-ce-1.0.0-rc10-linux-amd64/graalvm-ce-1.0.0-rc10/bin/native-image --no-server nbody [nbody:18424] classlist: 5,808.89 ms [nbody:18424] (cap): 5,506.22 ms [nbody:18424] setup: 8,100.61 ms [nbody:18424] (typeflow): 7,364.66 ms [nbody:18424] (objects): 2,275.99 ms [nbody:18424] (features): 227.69 ms [nbody:18424] analysis: 10,024.58 ms [nbody:18424] universe: 364.68 ms [nbody:18424] (parse): 2,308.53 ms [nbody:18424] (inline): 2,172.05 ms [nbody:18424] (compile): 12,069.05 ms [nbody:18424] compile: 17,196.75 ms [nbody:18424] image: 1,102.30 ms [nbody:18424] write: 272.44 ms [nbody:18424] [total]: 43,062.79 ms mv nbody nbody.substratevm-4.substratevm_run 50.18s to complete and log all make actions COMMAND LINE: ./nbody.substratevm-4.substratevm_run 50000000 PROGRAM OUTPUT: -0.169075164 -0.169059907
If you're starting new project with Java 11 it's quite fine. But if it's upgrading old project to Java 11 it's painful since more than few most used modules back then where removed from the standard. 
If u want become video effects or game developer the only thing that will hit you harder than c++ is algebra and memory management. Since in C++ you can override memory allocation operators to allocate memory depending on its type it can be challenging. 
I guess the intent of my reply was that the book can add value to his learning without him having to spend any money on a new book. I figure you could study JDK5 and put together the rest with focused tutorials on the added features of later versions
Java has a lib called javaFX.. lots of stuff going on there for gaming and such..
It simply pops up the debug toolbar. That's hardly equivalent to perspectives and is something it did since I first used VisualStudio back in 2003.
You will have to learn a new language to do vfx, games or simulations. Do not use Java for these tasks. Not only will it be more difficult working in Java compared to using a framework like Unity or HaxeFlixel, people will have to download/install a JRE to play what you made. JREs are cumbersome to install and are bundled with toolbars and adware. Your customers will resent you for it. With that said, if you want to learn to make games I strongly learning a framework for HaxeFlixel, Unity or Unreal Engine. There are step-by-step tutorials which take you through making a simple game, such as [this dungeon crawler tutorial](https://haxeflixel.com/documentation/tutorial/). These are not time-consuming, you should be able to complete one in a matter of hours, and if you like making games, it will be fun. From there it is easy to start making your own game with the same techniques. Good luck!
&gt; Because the implementations for each are completely different 7 of the 10 are **identical**. - pidigits — The **identical** Java program fails with SVM, so a working program is shown. - binarytrees — The **identical** Java program is slower with SVM, so a faster program is shown. - reversecomplement — The **identical** Java program is slower with SVM, so a faster program is shown. 
My biggest Gradle annoyance is that the gradle toolbar isn't always present, so if you don't import the project from the build file, the IDE is completely oblivous to the fact that you're using Gradle. If you do the same with a Maven project, you just click the Maven toolbar and add the pom
The identical Java program [fails with SVM](https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/pidigits-substratevm-2.html#log), perhaps you know how to build it successfully? 
Idea shows the variable values on the current line as a comment. You'll only need to open the variables view if there's a value in a complex variable you'd want to check. &amp;#x200B;
Seems like Eclipse is definitely the choice for power users. Personally I find the consistent menus, positioning, context options, shortcut keys more valuable than tweaking the view. 
&gt; the implementations for the benchmarks for each are completely bloody different 7 of the 10 are **identical** for OpenJDK and Substrate VM. - pidigits — The *identical* Java program fails with SVM, so a working program is shown. - binarytrees — The *identical* Java program is slower with SVM, so a faster program is shown. - reversecomplement — The *identical* Java program is slower with SVM, so a faster program is shown. 
Th idea doesn‘t have to be creative, it just has to be your implementation. Besides, you don‘t have to work on your own repo, you can contribute to the thousands of projects on github.
I would argue that the biggest event is the announcement of the new six month release cadence. This will allow smaller enhancements to be released, and not be held back by the larger enhancements. Next year I am excited to see the introduction of [switch expressions](https://openjdk.java.net/jeps/325) in [Java 12](https://openjdk.java.net/projects/jdk/12/) and the features that Java 13 brings.
We use this: [https://nvie.com/posts/a-successful-git-branching-model/](https://nvie.com/posts/a-successful-git-branching-model/) Some people don't like it because it makes a little more complex than it needs to be, but for me and my team it has worked great and we have had no issues.
libGDX and JavaFX are fine. Note however that Minecraft was not built with libGDX. Minecraft has its own engine, I think based on OpenGL. The most famous libGDX game is probably [Ingress](https://en.wikipedia.org/wiki/Ingress_\(video_game\)). The same company that later made Pokemon Go.
**Ingress (video game)** Ingress is a location-based, augmented-reality mobile game developed by Niantic. The game was released for Android devices on December 14, 2013 and for iOS devices on July 14, 2014. The game is free to play, uses a freemium business model, and supports in-app purchases for additional in-game items. The mobile app has been downloaded more than 20 million times worldwide as of November 2018.Ingress uses the mobile device GPS to locate and interact with "portals" which are in proximity to the player's real-world location. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Ingress may refer to:
After switch expressions, I want the `instanceof` declarations.
Me too! For those that do not know, he is referring to [JEP 305](https://openjdk.java.net/jeps/305).
Truth be told, you could find all that info for free on the net too. There are 1000s of examples, tutorials, etc that you could learn from. Just a matter of if you can learn that way, finding the right info, in the right order, etc. So with that in mind, you could learn a good deal from the old book, then find out more info on the net and learn jdk 8, 11, etc that way.
You can use Amazon Corretto: [https://docs.aws.amazon.com/corretto/latest/corretto-8-ug/downloads-list.html](https://docs.aws.amazon.com/corretto/latest/corretto-8-ug/downloads-list.html)
Source code for my personal and work projects - everything basically.
&gt; …not necessarily implemented in the same way? You have not actually suggested any alternative approach, so we are left to guess — presumably you think the programs should all be implemented in the same way that a C program would be implemented, even when they are written in Haskell. &gt; This isn't a comparison of runtimes it's a programming competition … case in point… You seem surprised that the same algorithm can be implemented in different ways and programs can be profiled/optimized. 
You have not actually suggested any alternative approach, so we are left to guess — presumably you think the programs should all be implemented in the same way that a C program would be implemented, even when they are written in Haskell. You seem surprised that the same algorithm can be implemented in different ways and programs can be profiled/optimized. 
\+ 100... though I will admit RMI.. though that was still a thing in a multi tiered setup where ejb works across servers. Didnt realize they removed that completely. What is the replacement in terms of how you do that? I know REST covers the front end API bit, but API code communicating to back end ejb servers (that run separately from the front end).. other than a message bus and JMS, how do you pass objects back and forth between the API layer and back end layer? Or is it just assumed all of that runs in the same JVM now?
So basically an attacker has to find its way in to your system, first.. then once end has to figure out you are running JDK 8 on a server, then use a JDK8 attack that you have not got a patch for? It absolutely mind boggles me there are kids out there, or foreign country cybercrime units I guess, that spend the time to figure this sort of shit out. It would be beyond boring to me to spend hours, days, weeks maybe trying to come up with some way to bypass JDK8... to then run some code that might let me have access to your system, or not. I dont understand who wants to spend their time doing that, over trying to find ways to write a game or some other app that could make them pretty good money (or maybe not..but still). 
&gt; You have not actually suggested any alternative approach, so we are left to guess — presumably you think the programs should all be implemented in the same way that a C program would be implemented, even when they are written in Haskell. I don't need to suggest an alternative to be right that these results aren't very useful. &gt; You seem surprised that the same algorithm can be implemented in different ways and programs can be profiled/optimized. Not surprised at all, and said nothing to suggest I was. Just pointing out that this makes the comparison useless. As I said.
 &gt; So basically an attacker has to find its way in to your system, first. If the Java server isn't internet facing, yes. If the server is internal only, I wouldn't spend a lot of thoughts about it, because if somebody is snooping around in my network already, I have a different problem. &gt; then once end has to figure out you are running JDK 8 on a server, then use a JDK8 attack that you have not got a patch for? That's one step, actually. You throw the attack against the server and see if it works. Also, you could do some fingerprinting beforehand, that is also easy as far as I know. &gt; It absolutely mind boggles me there are kids out there, or foreign country cybercrime units I guess, that spend the time to figure this sort of shit out. It would be beyond boring to me to spend hours, days, weeks maybe trying to come up with some way to bypass JDK8... to then run some code that might let me have access to your system, or not. I dont understand who wants to spend their time doing that, over trying to find ways to write a game or some other app that could make them pretty good money (or maybe not..but still). Dude! You are quite clueless and naive here. Imagine what you could with an exploit in the current Java 8 which allows arbitrary code execution. Every Java 8 server is at your mercy, attached databases, fileservers and company networks are basically yours to enter. This is huge! Staff information, company internal documents, private files, client information, databases full of creditcards, abuse of the machines as bots, interrupting the whole company, eavesdropping on internal and secret communication, manipulating customer facing services...there is no limit to what you could do with access like that. Also, wanting to enter a network in the first place has two main reasons: 1. You want to ruin somebodies day. 2. You get paid for it, one way or the other. The motivation is there, for a lot of people. And a lot of people are actively trying to enter a lot of other peoples networks, for various reasons. [If you consider such stuff, start small. You could run a Hello World application on your test machine. You could run an annoying application on the company server to annoy the admin. You could access the whole company server. You could access the whole company network. You could access the networks of other companies. You could manipulate their data. You could ruin them...with the right access, you could ruin a company. An important one, a bank maybe. Or one that does stock market trades...you could interrupt a stock market. You could interrupt the whole global trade system.](https://www.youtube.com/watch?v=09LJJB7dVTU) 
You never write VFX/Games from scratch (can not speak for simulation). Usually you use an engine of sorts. The engine by itself is MUCH more complex and difficult to learn than a language. On top of that there's ton of language-agnostic 3d algebra that you need to understand, shaders, lighting, etc etc. At the end you are not writing the game in C++, but you are writing your game using C++ as one of hundreds of different tools. To give you an analogy, your question is similar to "If I practice using automatic screwdrivers, will I be able to build a house using a regular screwdriver later?". And the answer would be the same - type of screwdriver will be least of your worries.
&gt; I don't need to suggest an alternative to be right that these results aren't very useful. If you have no alternative, then these results are the most useful you have. &gt; … this makes the comparison useless… Nonsense, all you've pointed out is that someone contributed better C# programs than had been contributed previously. (That happened with Java too).
Maybe this comment was intended for someone else?
If you're looking for something a bit more high-level than libGDX you should look at [mini2Dx](https://mini2dx.org/) \- plus it's built on top of libGDX so you can those features too. Disclaimer: I'm the developer of mini2Dx :P
No, it's intended to be a little more informative than speculation about "most people".
Wow... this is hilarious. Oracle JDK ends up having less features than OpenJDK. Such a strange reversal.
Valhalla is the feature is need/want the most
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; As you have no alternative, these results are the most useful you have. Sure, maybe. But "best we have" != "good". &gt; Nonsense, all you've pointed out is that someone contributed better C# programs than had been contributed previously. (That happened with Java too). Okay, well there are a couple of extra steps of reasoning which I thought were implied, but I don't mind following through on it. If these results are supposed to compare the *best* performance these languages/runtimes can achieve, the contribution history demonstrates quite clearly that the results at least *used to be* hugely inaccurate. So then how can you claim with any confidence that they're accurate now? Sure, given enough sustained attention and work from enough people of talent the results *might* converge towards something of value ... But we also need a reliable metric for judging *how close* we are to convergence to the ideal, and we don't have that! The more similar the results from two languages are, the more sure we have to be. (Also note that the work put in needs to sufficiently outpace any changes to the languages and platforms which could facilitate improvements.)
You mind me asking what kind of work you'll be doing daily(applying for my first programming job soon )
Once you're genuinely good with one [C-family language](https://en.wikipedia.org/wiki/List_of_C-family_programming_languages), you're pretty much good to go with most of them - you will not really need to take dedicated time to study the other ones, you'll be able to just pick them up and learn as you go while still being productive with just a bit more Googling than normal. Languages from other families however (erlang, assembly, etc.) will still feel like they were invented by an alien race until you're more familiar with them. But honestly that's not really a big deal - you'll be in high demand and build valuable skills just by continuing down the path you're on and learning Java.
Hi OP. C++ dev here, and despite my love for C have you considered C#? It's kind of like Java++. The transition is easier. C++ is like hard mode. It's fun! But it helps to be the type that likes a challenge.
Interesting tool, its name not that much, tho! :D
https://www.youtube.com/watch?v=MGX-JfMl9-Y this is legit cool :O
I'm glad you pointed this out.. I was actually looking at the source they put in the java vs svm part which is here https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/pidigits-substratevm-1.html However, if you go to pidigits method and scroll to the rankings you can find the failed one you linked. The more I look at this site the more I wonder what the hell is even going on here. I don't think any of this is of much use. 
Just to add some weight to what others have already said, PLEASE largely ignore the languages used; instead pay attention to the tools used in your job, what's required for your goals, and GOOD design patterns and practices. That will help you more than simply learning a language. Case in point: I referred a friend of mine (C++ dev for 13 years) for a position on a game dev team. He wrote his own game engine from scratch, using nothing but C++ and assembly. He didn't get even a second interview because he's never used Unreal. It's certainly cool if you can write your own physicw and lighting engines, but that's already been done, tried, tested, proven; why would you reinvent the wheel?
What is the feild of mathematics involved for graphics? Its algebra but is there a more specific name? I was trying to make a 3d engine(very simple) and i got stuck in camera rotation. When i rotated the camera with mouse far points in z axis moved across screen same speed as close points. So it made the object look 2D. I just cant understand the math side. Where to learn? Please and Thanks! Francesco
c++ is a very powerful and quite a bit complex language, with a lot of "gotcha's". However, picking up a book (scott meyer's Effective Modern C++ for example) will help you wade trough them with relative ease. the "games", "simulation", VR, "effects" part is gonna be the bitch, where there is no one book to cover everything, is a fantastically large problem space. you can do everything in java too, especially for research purposes, if you're familiar with the language. but for real applications, for production, go C++. for the math libraries, however, for the science, I'd look at python too, it has very powerful libraries to help with that.
It has those too. Look at the [SubstrateVM results](https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/java-substratevm.html).
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Ehhh learning C++ was kind of awful coming from java for me. Everything takes so many fucking steps it's insane
1) You will see that the source code is identical: there's one set of Java programs which are measured twice — once with Open JDK and once with Substrate VM. Here are [all the measurements with Open JDK](https://benchmarksgame-team.pages.debian.net/benchmarksgame/measurements/java.html). Here are [all the measurements with Substrate VM](https://benchmarksgame-team.pages.debian.net/benchmarksgame/measurements/substratevm.html). 2) There can be multiple implementations for any of the tasks. For example, there are [5 C++ programs](https://benchmarksgame-team.pages.debian.net/benchmarksgame/performance/spectralnorm.html) for spectral-norm. One program has the lowest wall-clock secs, but a different C++ program has the lowest cpu secs, and a different C++ program has the lowest source code size.
Thanks for making this more clear. When going to the java vs svm page, their pidigit links to java #2 vs svm #1. Hopefully that's just a typo for the link or something. The two links you just gave make things a lot more clear to me now, so thanks. I thought they were arbitrarily comparing different implementations to each other which would be pretty meaningless. 
&gt; I thought they were arbitrarily comparing different implementations to each other which would be pretty meaningless. Some comparisons between language implementation do become difficult, when one language implementation has functionality which the other does not. The [fannkuch-redux Ruby #2 program](https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/fannkuchredux-yarv-2.html) forks threads with JRuby but spawns processes with CRuby! Those different Ruby implementations require different approaches to multicore.
Look up linear algebra. This is where you will learn about matrices and vectors, which will be extremely important for programming 3d applications.
It's doomed. We will have more JVM bugs in the future. There's no more real maintainer, only numerous build providers.
Same applies to Java 11.
Start from C++, then you will find it's easy to transit to other tech.
Majority of the time it will just be dropping in reference APIs and Impls. If you've used java a while I think most people would have hit this at some point.
Oh cool, didn't realise that there was a JEP yet
&gt; But "best we have" != "good". "Good" according to what criteria? "Good" compared to what? &gt; …the best performance these languages/runtimes can achieve… Is that claim made on the website or is it just your strawman? 
But im not struggling with matrix manipulations and vectors much. Its more like i dont grasp the concept of how this transformation rotates the camera. I know the camera is a made up thing. All we are doing is we are changing every point on the screen a certain way that simulates rotation of camera. I dont understand why X = X * cos(rad) - Y * sin(rad) and Y = Y * cos(rad) + X * sin(rad) Rotates the camera by "rad" value. I cant relate math with whats happening physically. 
Thats pure nonesense. C is much much closer to assembly than it is to Java or JavaScript. C++ has its own domain with template meta programming. Manual memory/resource management is almost non-existent in Java and JavaScript. Skimming over the list, i got no idea what the common identifier for those languages is supposed to be, nor is one specified. Most of it seems to be syntax which is a bad criterion as evidenced by putting C and JavaScript into the same category.
Swing + Netbeans GUI builder is perfect for several small personal projects and that's my go to combination for making personal helper tools. They are so useful that my colleagues also wanted them and now 600 people in my company are using them. 
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Wanted to concat a file during a maven phase. Found a plugin that I forked, over engineered, struggled with Maven's dependencies (I honestly still don't have a clue about them, generally look at releases of modern plugins), and released. https://github.com/DarrenForsythe/concat-maven-plugin
I use java 1.8 . I haven't felt the need to upgrade.
Yes, but I took the inspiration from Netty and how complex I found it.
I'm definitely looking forward to more updates regarding Project Loom, as it'll really give my networking framework a boost!
Did a web app for my in-laws' business, finances and project tracker. Built with Spring Boot and MVC (very minimal ajax), jquery, bootstrap. Hosted on AWS so they can access anytime anywhere
I am building an electron app with Java backend https://github.com/wuruoyun/electron-vue-spring/
Would care to share the source? I’d love to check them out. Thanks!
You're gonna be in for a treat. Java has come a ludicrously long way since then. You'll find it much easier to use. I'd recommend basically relearning it though. Even basic things have changed dramatically
Made all my failed wanna be entrepreneur side projects with Java. Mostly SaaS projects on top of angular/spring ( later angular2/spring boot ). I had shitty ideas but the stack is amazing.
A gaming convention I help run wants reports of games people signed up to run and who is playing them. The website we use to do registration has poor support for reporting and restful services. So I wrote a java app that signs on to the site, screen scrapes the data off of the pages and produces the report needed. I use HttpClient, XPATH for parsing the html and apache poi for the spreadsheet. Springboot to host the pages and Pivotal Web Services to host the app. 
What about it made you a better programmer? It's on my to-read list too. Do you have your OCA/OCP certifications? Maybe that is something to work towards if you really want to be a Java guru. 
It’s like drinking from a fire hose of best practices and anti-patterns. It made concrete a lot of things that I had intuited but never formalized. It shows you how best to use all of the capabilities Java provides, instead of simply detailing what the capabilities are (many other programming books do the latter). Highly recommend it. I’ll have to look into the certifications, thanks for that suggestion!
*Java Concurrency in Practice* After 2-3 chapters, you'll be amazed that any concurrent code works at all.
Then you'll think "I should consider acyclic dependencies and all communication happening via buffered message-passing" and concurrency will become much more feasible again. Seriously, if we were redesigning the language from scratch I'd probably want a change like making all mutable objects thread-local. It would drive you to use safe practices and make things so much simpler to reason about. 
So true! 
Until you have to wake up every day with sore wrists and have to keep on using the manual screw driver all day 
I once tried to write a RPG game based on libgdx but not have enough time to contine: [https://github.com/ny83427/yycsj](https://github.com/ny83427/yycsj) but I am always interested in game programming, even though it's very low level and basic
Made a plugin for intellij idea https://plugins.jetbrains.com/plugin/10580-laconic-pom . It folds Maven's boilerplate so POM file takes much less screen space.
Meanwhile, recently I am also trying to contribute to jsoup the open source project and I've reported two issues accepted, one PR accepted and one PR in review process. &amp;#x200B; [https://github.com/ny83427/jsoup](https://github.com/ny83427/jsoup)
Optional semicolons.
Hey dude! Let's shake hands! Netbeans GUI builder doing swing stuff is super good, though I usually use IDEA, but I still use NetBeans for Swing UI stuff - its GUI builder is much easier to use and convenient.
I'd like to opne source some of my swing ui projects for your reference. Will update here once I finished.
Do you know if there are major differences from the 2nd edition? I’ve just started reading the 2nd ed and wondering if I need to buy the 3rd ed instead.
Updated for Java 7, 8 and 9 - so unlike the 2nd edition, goes over Lambdas and streams plus more 
Java Design Pattern Essentials has been helpful for me.
I am creating my own microframework: https://julianjupiter.github.io/summer-fun
I am a passionate pen and paper player (the game is called das schwarze Auge which is german) and i wrote a Website to manage and watch the heroes online using Spring Boot and angular
I made a sales managment using spring, thymeleaf and MySQL as a database for my mom's store. I ended up abandoning the idea, but it's perfectly functional and beautiful. It's almost a son Haha. What made me give it up was the lack of reactivity
Are you talking about trigonometry?
lack of front-end reactivity shouldn't be a deterrent. the management app i made (see my reply to this post) is the same, i only have jquery autocomplete and datatables for client-side triggered processing
OCA/OCP are irrelevant for actual development. There is no value in memorizing the exact semantics of nested braceless if statements (just let your ide auto-indent or add braces) or arcane java syntax (you will never encounter `int method() @A []` in the wild). These certs do not make you a better Java programmer. Don't get them. If your goal is employment: I've actually heard from some people that they will be *less likely* to accept a candidate with oca/ocp on their resume. This is anything but the norm, but it shows that they aren't the best thing to spend time on.
All of the backend API projects I’m working on for fun are java 8 with spring boot 2 and Postgres. The front end is all react (web or react native.)
Growing OO code Guided By Tests
I dont know man :(. I just know how to code... 
I'm making a GUI based game in JavaFX. It's called TOHSLLUB (Bullshot backwards). It is essentially online version of Mastermind/Bull and Cows/Crack the Code but on steroids. All the little things you can think of can be tweaked in the game. It's really amazing how just simple changes can drastically change how the game is played. I also will have different modes (currently there are two, CLASSIC/ONE\_KNOWN, but I plan to have four). One of the modes, ONE\_KNOWN, is where everyone guesses against the same sequence and each know one position of the sequence. It is really fun with multiple people. Right now I'm refactoring all of the GUI to better take advantage of MVVM (before I was using MVP without taking advantage of properties outside of the View). It won't be as drastic from when I switched from Swing to JavaFX but it will be pretty close. Here are some screen shots of just the Game Screen evolution (I have a lot more pictures I don't want to post them all) [https://imgur.com/a/tlWD6oG](https://imgur.com/a/tlWD6oG). My favorite part of the Game Screen would be the Note Pad. There is so much information cramped in one spot that it really is marvelous. It also is a really awesome tool when playing the game. At first you don't really know what you can mark off on the Note Pad but as you play and start seeing patterns it starts to become super useful. There's a picture towards the end where the game looks worse. That was when I moved from Swing to JavaFX. I had to scrap all Swing code and redo it for JavaFX, which sucked at the time but I don't regret it one bit now. I have like I think 15 Screens total. I have been taking pictures of the progress of each screen and have made a way to view them in the credits. Pretty cool to see the evolution of the screen.
Head First Design Patterns and Clean Code are both good.
I agree with you, In fact ... I did not use any kind of interaction with the page besides showing values (at the time of offering discount, for example). Other than that, no filtering was applied ... Which always bothered me. I fully understand that it was my mistake. Another problem I had was generating reactive forms, for example, adding multiple items with various attributes (color, size, quantity, etc all from the database relating to that item) chosen by the user in a sales object. The logic to implement that using the spring session and the http verbs was killing me... So I preferred to use the study time to study js frameworks. I still use a lot of spring, but as Rest API.
My biggest one would be this : https://lamarios.github.io/Homedash2/ It’s a dashboard for my home server that interacts with pretty much everything I run (radarr, sonarr, transmission, unifi controller, dynamic DNS, basic file management etc…). My second best would be this : https://github.com/lamarios/SpendSpentSpent Which is an expense tracker that I shamelessly copied from the next expense tracker for iOS. I use it on a daily basis with a demo instance here : https://sss.ftpix.com/ Other than that I built few MMA related websites: https://mmathbro.science with is a website to calculate MMA math and this other one which is still on going development: https://www.mmahypetrain.com which is a website to follow a fighter and jump on board hype trains. Those two website also have their own reddit bots on /r/mma but I never advertised it so nobody uses it. source code is here : https://github.com/lamarios/mmath
Part of the reason I moved to Golang.
Reactive forms is definitely a problem. I plan to study vue/react in the future to address that. But i am studying mule 4 certification for my work so I've had to postpone that in the meantime.
When you say GUI builder, you mean you are using their tool to lay out Swing forms, buttons, etc, then generate the class that does it for you? I vaguely recall the very old NetBeans GUI builder when it first came out many a moon ago. Back then I used TableLayout and didnt look back. TableLayout was so awesome, worked great, made it super easy to lay out any UI. Wish GridLayout and such in CSS worked like that today! So much faster to work with! &amp;#x200B;
Update it with ReactJS, and replace Spring with Golang, running in Docker.. so much nicer!
Got it. Good luck with that ! You'll be amazed at all the tools available with these frameworks. Everything is so dynamic and relatively simple ! It is indeed a great investment!
Yes sir. Meanwhile I found your name contains 'dude' \^\_\^ so I don't start with "Hey Dude". Just find that Netbeans went to Apache and now v10 released, just had a try and the feeling is still same as 8.2, it's really good that Apache foundation will take over this project and maintain it actively.
Does it have to be Java specific? If not, [_The Pragmatic Programmer_](https://en.wikipedia.org/wiki/The_Pragmatic_Programmer) is a great book. Also, learning some other languages that work in completely different ways can make you a better programmer, as they can make you think about Java differently. Try a functional language like Scala or Clojure (these both run on the JVM like Java) or Elm (compiles to JS).
**The Pragmatic Programmer** The Pragmatic Programmer: From Journeyman to Master is a book about software engineering by Andrew Hunt and David Thomas, published in October 1999, first in a series of books under the label The Pragmatic Bookshelf. It is an influential book in software engineering, and it is used as a textbook in related university courses.The book does not present a systematic theory, but rather a collection of tips to improve the development process in a pragmatic way. The main qualities of what the authors refer to as a pragmatic programmer are being an early adopter, to have fast adaptation, inquisitiveness and critical thinking, realism, and being a jack-of-all-trades.The book uses analogies and short stories to present development methodologies and caveats, for example the broken windows theory, the story of the stone soup, or the boiling frog. Some concepts were named or popularised in the book, such as code katas, small exercises to practice programming skills, and rubber duck debugging, a method of debugging whose name is a reference to a story in the book. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Agreed. Head First Design Patterns is the very one book about design patterns you need to have actually. Clean code is also good, but I think Refactoring is more useful.
Awesome definitely am checking this out
I built a framework on top of vert.x which I use for my other projects to boost productivity. Makes it easy to change storage and transport layer as the APIs are not coupled to HTTP for example. It has support for Hazelcast, Elasticsearch, MongoDB, non indexed in memory, indexed in memory and indexed + persisted with CQEngine (lucene). All through the same query API. For transports there is HTTP/S, TCP, UDP, websocket and a clustered event bus. An API can be consumed through either transport, handlers are deployed with the desired listeners. There is also features for configuration, security and logging. Using the framework I've made a clustered build server with Polymer, a flashcards webapp with Polymer, a tool to import Ethereum blockchain data into supported storages with JavaFX and currently working on a 2D browser multiplayer RPG. Projects are on my GitHub, https://github.com/codingchili
&gt; "Good" according to what criteria? Good as in an accurate comparison of the performance of the two language runtimes. As that appears the intent with which OP opened the discussion, check the title. I proposed some criteria... &gt; or is it just your strawman? It's not a "straw man", it's an attempt to characterise a criterion by which we *could* make a useful comparison of runtimes. Because, again, OP *had* attempted to make such a comparison, and since they hadn't themselves attempted to define or justify what makes the comparison "good" we were left to feel around for our own definition. I'm sure it's not the only one, if you think you have alternative criteria for what makes a "good" comparison of languages then there's no need to be so shy about it, go ahead and share. Then we can see if this website meets those criteria, and if the criteria themselves stand up to criticism. If you want to claim that something *is* good, then it's your responsibility to define what good is for that purpose. Pretty easy to defend a position if you refuse to properly define it. &gt; Is that claim made on the website [It is most decidedly *not* a claim made by the website, as the website simply explains that it shouldn't be used to try to define relative language performance and leaves it at that.](https://benchmarksgame-team.pages.debian.net/benchmarksgame/why-measure-toy-benchmark-programs.html) Do you disagree with them(and me)? Or do you maintain that OP's comparison is interesting?
Oh - thank you for your work! The first Intellij plugin I install :)
Framework to control Canon camera from PC: [https://github.com/Blackdread/canon-sdk-java](https://github.com/Blackdread/canon-sdk-java) &amp;#x200B;
i have some, probably the nicest one is a small pure java web server, [kitteh2](https://bitbucket.org/msx80/kitteh2). I have used in some projects of mine and works flawlessly. I also made a kind of retro game engine/fantasy console called [omicron](https://github.com/msx80/Omicron) And a prevalence system based database, [Jouram](https://bitbucket.org/msx80/jouram). And like thousands of others :P
Great, for some ungodly reason I love little utility apps. Much appreciated. 
Clean code by Robert "uncle Bob" Martin and Pragmatic programmer that has already been mentioned are good books about programming in general. 
making a javafx time scheduling app based on the pomodoro time management method. i'm gonna have it recommend me issues on my lab's personal gitlab based on who in the lab i've worked for during the week and who hasn't had any work done for them. also gonna have it record time worked on issues onto gitlab automatically
[removed]
Read the Java Language Specification. It will give you insights into how things are supposed to work. https://docs.oracle.com/javase/specs/jls/se11/html/index.html 
Thanks for the interest, unfortunately my work place is not big into open source and most of my tools are very specialized domain specific tools (not SW related) so, I don't think it would happen, sorry. But I can explain what some do, one plots data, analysis and conversions for specific internal data format, one for remote communications with 'servers', and data extraction. Etc. 
Indeed. Nowadays I find myself using netbeans' gridbag layout visual tool, very handy and I don't have to add layers and layers of panels. The gui builder also made lot of improvements over the years and I like it very much. 
Thanks :-). I tried Intellij few times but I didn't like the fact that the ui part of the code is kind of hidden from the user and instead its bytecode is directly generated. Some people might prefer this, but I dont. Interestingly, this technique seems to be not working for instrumenting their kotlin classes, pity as I like to use kotlin but cannot bind a kotlin class to the ui directly without going via a java class in between. I very much like that I can see the java ui code in netbeans and most of the time learn from it if I want to dynamically generate ui. 
Almost all my pet projects are in Java. I put all my code on bitbucket, so you can browse that if you are interested. Some of it is from school, and some of it is ancient. https://bitbucket.org/jevring/
Indeed. Nowadays I find myself using netbeans' gridbag layout visual tool, very handy and I don't have to add layers and layers of panels. The gui builder also made lot of improvements over the years and I like it very much. 
One thing that I think has made me a better Java programmer is learning another language. Even if your never going to get a job in it. Scala/JavaScript/Closure can be really fun as hobby languages. Even something like groovy really whatever grabs your interest. I learned to solve problems in different ways. And if you like you can consider contributing to the open source community :D
parse byte code (jars, wars) * who is calling this method ? * who is declaring this class ? * who is using this artefact ? * do I have conflicting/duplicated classes in my web-inf/lib ? * what's the difference between these 2 wars ? * what's the difference in term of artifact's dependencies between my production and acceptance environments ? [https://github.com/mestachs/archeo4j](https://github.com/mestachs/archeo4j)
Erlang does that.
Looking forward to: Project amber with data classes (autogenerate getters/setters/equals/hashcode/etc) + Project Valhalla 
Aren't Android game written by Java? (I am not familiar with Android)
Looks a bit like [Laterna](https://github.com/mabe02/lanterna).
I wrote a REST API implementation of a board game. I wrote it because I wanted to write a UI for the game, and needed a game server to build on top of. Finished the API and never wrote the UI. But hey, maybe one of you guys... http://deduce-api.ws
I made a full mp3 player with JavaFx. JavaFx is very powerful tool to make desktop applications.
It looks like in your [submission](https://www.reddit.com/r/java/comments/aalgaa/java_tile_map_generator_2d_world_generator_with/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
That's not a coincidence. Zircon started out as a port of Lanterna to Kotlin!
* A "One Password" program that stores all your passwords (encrypted), unlocked by one master password. * A little program that hides text in an image by adding one or two bits of the text to each pixel of the image. * A drawing program that mirrors what is draw in the left/right. 
Implementation Patterns - Kent Beck IIRC, it is mostly language agnostic, but all examples are in Java (Kent Beck is the JUnit guy, among other things)
I released version 1.1 of the framework which brings a CameraManager to simplify a lot cable (dis)connections
&gt;garbage UX One man's trash is another man's treasure. I like perspectives. Why would I need a breakpoints tab any time except for debugging? What am i supposed to do? Have every tab I ever use open in a single perspective? Toolbars with rows and rows of buttons I only use occasionally? Now *that* would be garbage UX to me. Eclipse is neat and organized. 
Read other people's code on GitHub or GitLab
Next up is Effective**r** Java.
Yeah this is definitely a known opinion of the OCA and OCP. And I agree, it doesn’t require coding so to achieve so the value in making someone a better coder could be questioned. However I have already personally benefited iby troubleshooting issues faster, doing better code reviews, and improving some design. Sure, there are books in these topics specifically but the OCA and the OCP give a great walkthrough on the fundamentals of these topics. Each their own I guess. 
Elegant Objects. Highly opinionated (but most things are these days) and fun read. To get an idea of the content search for yegor256 blog. 
I noticed this was referenced throughout Effective Java 
I definitely recommend "Working Effectively with Legacy Code"
I would recommend Code Complete: A Practical Handbook of Software Construction, Second Edition 2nd Edition (https://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670) 
Can someone please explain the difference between the "normal" Netbeans (latest version is 8.2) and Apache Netbeans? Are they both being developed or is the Apache one a direct successor with 8.2 being the last version for the other one?
Yes, totally recommend! Might not be suitable for junior programmers, though. Before learning how to practice those pieces of advice properly, you need to understand what they are trying to solve (i.e. spend some time in a messy legacy, semi-oo, codebase).
My Aunt and Uncle have a solar panel system set up that consists of a few devices. The device that controls everything has a nice serial port that spits out data of each device connected every second. My uncle had the idea to read data from the serial port, put it in a database, then access it in a website or android application. The application to read the data is written in Java and the web app is in JavaScript (it's all client side) and the Android app is in Kotlin. I recently wrote the Android app and decided to use Kotlin, otherwise I might have written the Java program in Kotlin instead. Of course when we had to come up with a name, what better name than "solarthing"? [https://github.com/eidolon1138/solarthing](https://github.com/eidolon1138/solarthing) [https://github.com/retrodaredevil/solarthing-android](https://github.com/retrodaredevil/solarthing-android) I've also created a game that's on the Play Store. It's a unique arcade shooter like game inspired by Galaga. [https://github.com/retrodaredevil/track-shooter](https://github.com/retrodaredevil/track-shooter)
And "Clean architecture" from the same author.
* A Philosophy of Software Design by John Ousterhout * [Java Concurrency in Practice](http://jcip.net/) 
Hey dude, may I know what's your project requirement? If possible you may send me a private message so that maybe I can share with you something much faster.
Great! Me don't dive deep into Netbeans Gui builder actually but this time will have a thorough tour.
ignore .idea
Thank you, i fixed that. ;)
Client for Fortnite's undocumented API using Apache HTTP Client, JSON-P, and JSON-B: [https://github.com/RobertoGraham/fortnite-2](https://github.com/RobertoGraham/fortnite-2)
Counterpoint: why learn from something that might not be done right?
Which language from the above you chose?
I ported a 2048 game (from Javascript) to JavaFX: github.com/brunoborges/fx2048
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
*jshell* is nice!
Looks nice. Maybe add a JavaFX example? http://fxexperience.com/about/ may want to mention it in their blog.
These aren't java specific, but hopefully they'll help with someone starting out. * Listen to your lead. Don't ask unrelated questions during a meeting, you can always go to them after work and do follow up. Ideas are good, questions about the task are good. A theoretical discussion of Spring vs. dropwizard is not. * Don't be defensive when receiving feedback. Good feedback is the most essential learning tool IMHO. * Don't go down a rabbit hole when facing a problem, google is your friend and worst enemy. * Don't just copy-n-paste code from anywhere, especially StackOverflow. If you can't defend your code, then you shouldn't be using it. Be prepared on what the code does and doesn't do. Especially if you assume facts. * Don't be quick to add yet another library to something simple. * NEVER upgrade/downgrade a library unless you can do a full regression test the entire app or have been told to do so. * Write good descriptive comments (but not a paragraph) for your commits. * One commit per change.
Thank you. I'm not thinking of adding it now. I've just prepared the basic logic. Also, all of pull-requests are welcomed. ;)
All web based? Looking for a web based platform which engine is java on backend. Preferred AWS hosted as well.
See if you're employer is using Spring Framework. Most Java shops do use it and you'll want to start reading up on it, along with Maven as that will be your biggest obstacles getting started the first week. 
 &gt;After 2-3 chapters, you'll be amazed that any concurrent code works at all. This describes my feeling after reading JCIP so perfectly. This book taught me so much.
&gt; One commit per change. This is outstanding advice, and the best -- as well as very pragmatic -- way to think of this is: if I were to use `git revert`, would doing so wipe out something _else_ that I perhaps _would_ want to keep? I use `git revert` as a talking point, but this actually also applies to `git cherry-pick`, substituting "wipe out" for "bring with it" --- Much like aram535's overall good suggestions, I would also add that good use of interfaces can go a very long way toward separating out the contract that a component has with the outside world from the manner in which that functionality is fulfilled. In Java specifically, interfaces are also super convenient for composition as well as mocking/stubbing/general test ninjary. Good use of interfaces is not only related to new components that you create, it also affects method signatures added or updated on existing components. It will hopefully one day set off alarm bells in your head if you see a method `public ArrayList&lt;T&gt; doSomething` because it is **very unlikely** that the results of `doSomething` _really need_ to be an `ArrayList`. You want the least specific type that expresses what a caller would need to do with the results. `Collection&lt;T&gt;` can be a perfectly fine signature if all the caller is going to do is iterate over the result. And in 99.999% of the cases, returning a concrete class where an interface will do is going to add rigidity to the system. --- I'll go ahead and get the war started by saying that you should immediately download and learn the concepts and keybindings for [IntelliJ IDEA](https://www.jetbrains.com/idea/) (you'll often see it referred to as "IJ"). Their community edition is both free and open source, and is _indescribably_ smart. You will want the "ultimate" edition if your new role is going to deal with JavaEE, Spring, databases, docker, or some other more enterprise-y stuff, and I swear to you it's worth the time and money.
Clean Code, Clean Coder, Clean Architecture
I checked out the first link. Great job! Looks amazing. I have a question, how did you learn to structure your whole project like that? It was organized with like UI folder and then a folder for web communications etc. Is there a guide to organizing projects like this? My github is just a src folder with like 5 java files in it lol.
This is jdk supported from Amazon as far as I understand ? Are we sure it will not end up like Oracle one ? Payment for support etc ?
Good or bad, reading code is vital to getting better. 
Although a bit dated, there's still some salient points to consider in "Better, Faster, Lighter Java". It's ISBN is 9-780596-00676-1 
&gt;Don't be defensive when receiving feedback. Good feedback is the most essential learning tool IMHO. This. Feedback is a gift. As a cocky, junior developer, it was sometimes frustrating for a senior engineer to send my code back repeatedly for what I thought were nitpicky details. But, wow did it make me better, and I kept sending code his way for review. In retrospect, it was probably more annoying for him, and I appreciate the investment. Thanks, Dr Andrew, wherever you are. 
ask senior devs to review your code next to you and tell them you look for constructive criticism pair program read and keep reading (there are several book list on Reddit if you can't find one PM me)
1. Worked on a port of Super Mario Bros that also had a built-in level editor. Not the original creator, mind you - i just added themes (like Mario Maker) and the ability to change sprites and textures. It had a website set up by the creator for sharing levels, but unfortunately the whole thing was shut down by the dreaded Nintendo Cease-and-Desist. 2. Currently working on a calculator/programming language thing designed to help with arithmetic, linear algebra, and physics. It supports complex numbers, vectors, matrices, arrays, strings, custom function definitions, and more. The GUI editor supports history, has buttons and keyboard shortcuts for special characters (e.g. the pi symbol, the vector-cross-product symbol, etc.) and has syntax coloring, auto-replace (when you type the word "pi" it replaces it with "π", etc.) and loading scripts from files, and also supports units and automatic unit conversion. Was inspired to make this because TI-84 calculators dont do units and also because I have to do a lot of Matlab for school and it's a terrible language imo.
Looks awesome! Why the power of 2 restriction?
Also very curious about this! I'm guessing the 128 min on dimensions is because the noise algorithm doesn't do well for maps smaller than that.
best Swing GUI builder? it was cool in 2010...
&gt; OP said it right in the title, they characterised it as a contest between the languages' "fastest programs". OP simply copied *"Java versus C# .NET Core fastest programs"* from that webpage. You have chosen to ignore the context. In context — `said "fastest programs` — are `the languages' "fastest programs"` from a given collection of programs.
Please add a NFSW tag to your post, children might see that you are doing curly braces on the next line.
This book is the only Java textbook I've ever read cover to cover. Since then I've found myself one of the only developers I've worked with who really understood how to write thread safe code. Although that was mostly at my last job, which wasn't a great shop. We will see how the new job goes. Tl;Dr this book is amazing.
Yeah dude, IMHO even today, if you want to do some Swing UI stuff I would say Netbeans is still easiest to use and also powerful. However, Swing is just not hot today.
Public updates end in a few weeks for production apps (more support is possible with a paid support plan) so you may feel the need to upgrade then.
My advice from over a decade in industry is just go with the flow and don't stress about it. We all make mistakes and learn from them so don't fret when you make them.
Does the builder generate directly code? And is it code you must manually extend in order to connect events to your business code? Every Swing builder I have come across behaved in such a bad way! 
Me personally not rely on GUI builder that much actually, but I began from GUI builder. For me I separate UI and event listeners via reflection mechanism, that is, every menu item, button was mapped to a code and a method correspondingly, then the listener will do that centrally, this had reduced tons of boilerplate code and I found it's useful at least to me.
If the builder generates only a description of the GUI and the code is generated at runtime or at design time in a *robust* way, then a builder is a great tool for shortening the development process and the maintenance. Qt has a great approach since over 20 years now - in the Java world JavaFX adapted this approach. In the .NET world the same is true for WPF. Even WindowsForms has a better approach with its *partial* classes approach than all those crappy builders from the swing or awt world. 
Oh man...you have provided so much information. Thanks! Previously I played a little with Windows Forms but didn't get hands dirty with QT, these days I am learning Python and would use QT for an example.
So what's the best Swing GUI builder in 2018, in your opinion?
I've been using this for a while, it's great! Thank you!
Some moron who wrote one of our crucial dependencies used reflection to validate XML using one of the sun libraries. Needless to say the functionality provided by this library got separated into its own service and is currently being rewritten (there were many more idiotic things we found).
NetBeans, Intellij, and Oracle SQLDeveloper are written in Swing.
NetBeans. Now under Apache umbrella. Getting some love.
any easy demo app to play with?
Netbeans generates java code for ui creation and initialization at design time in the source code itself that one can save. For events you can provide your own handlers or it creates one with empty methods in which you have to enter code to call your business logic. I dont think I understand what bad behaviour you are referring to, since the gui builder does not know about your business logic, you have to manually call you business logic code from the event handlers. This is true for any gui builders including intellij or visual studio. 
The interesting aspect is, *how* the connection between the generated GUI code and your custom code is realized! And if you have to manually edit a automatic generated source file, then this is a very poor solution! There are ways to overcome this approach, but as I said, no swing GUI designer ever did it I know of. 
With the PyQt or PySide binding it was also possible to load the GUI at runtime from ui description files. Imho a very elegant way to enforce a strict separation between ui design and behavior. 
As far as “one commit per change” how do you define a change?
I built a motion detector alarm system using a Raspberry Pi. It strobes a light, takes a picture, sounds an audible alarm, and emails the photo to a configurable distribution. I built a Management UI using Spring MVC. 
Practical Object Oriented Design in Ruby. Ignore the anti-static language bias. Focus on how she builds up the design. It's one of the best OO books out there and everything transfers over to Java except the language syntax and duck typing. 
Read Effective Java and Clean Code
You are the most 2018 person of the year. Congratulation!
Yes all hosted on AWS, the java app itself (elastic beanstalk) and the database (amazon RDS). I also used a load balancer to easily set up https.
Very interesting, thank you for the info!
Or... don't try and use a graphical interface that will generate garbage quality code and lock you into a specific IDE. It isn't like developers are creating the program, developers whose job it is to... write code...
GUI builder are your servant, not your master, so the key point is to use your servant well. For me, in the past projects, for certain complex UI actually I wrote code manually, rather than generated, as the UI is dynamically determined based on configurations or other parameters, but without GUI builder's initial help it would waste sometime also. For some easy UI, I simply drag and drop in netbeans and it's done very quickly. &amp;#x200B; I also reuse swing components I wrote myself, which made development faster and faster then.
Read the Guava source code. It's exceptionally good and well-documented, and contains a lot of useful tools.
Who cares about hot? Mature software that's widely used is a good thing. The "hot" thing now is the flaming dumpster of Electron...that certainly doesn't make it good. And you can get the Swing theme IntelliJ uses on GitHub if you want to repurpose it.
I'd do JavaScript and focus on learning the higher order array functions like map reduce and and filter and getting used to manipulating collections with lambdas if you don't already do that.
In the times I have used the GUI builder (as one of the applications I work on makes heavy use of it, sadly) I've found that: 1. Adding and using custom-components is a total pain in the ass. Half the time it just quits working randomly 2. Unless you use a layout that isn't "easy" to use with the GUI Builder (IE Grid Bag Layout), the UI that it generates tends to break as soon as you change the L&amp;F or fonts. This is extremely true for the "Free design" layout. 3. It locks you into Netbeans, unless you plan to throw out the .form file and maintain the code by hand. This forces everyone else to use Netbeans as well, which is bad. I prefer Eclipse, some of my coworkers prefer IntelliJ, but we are all forced to use Netbeans on some applications. 4. It breaks randomly with version upgrades. After upgrading to a newer Neatbeans release (8.1 to 8.2 IIRC) a bunch of the .form files quit working and the GUI builder wouldn't work until you manually fixed the file. 5. Using complex components is difficult. As far as I can find, anything that requires populating or context within an application (Tables, custom components, anything that reads from a file/database/any external source) won't render correctly, so half the time you have to keep fucking with it to make it lay out correctly. 6. It locks the code that it generates so you can't modify it. Anything that needs generics is a total pain in the ass. Really anything more than just throwing basic components in a panel is a pain in the ass. If you don't have a good grasp on GridBagLayout and/or templates set up for GridBagConstraints, it is a decent way to prototype a design. As soon as you go beyond prototyping a design with simple components, I've found it makes everything more difficult. Since I usually use GBL and have templates for the necessary lines for GBC, I find I can more quickly program a UI in GBL than most people can prototype the same thing in the GUI builder. Not to mention that the one done in GBL will usually handle resizing and different L&amp;Fs better.
Still Netbeans, man.
haha, my hero Kelsey! 
Dude you are a Swing GURU! 
Netbeans always had the best swing GUI editor. For sure. I have mostly moved to web and a little fx for fun. I really like the FX editor and patterns over there with the annotation hi binding and fxml I sure hope netbeans bounces back from being neglected when java 9 hit. We need another alternative to eclipse. I love how netbeans is trying to not have its own project settings or config and just rely strictly on the maven or gradle config. 
A couple of these are actually great lmao
Flaming dumpster of electron? What are you on about
When you spend multiple years fixing and creating Swing GUIs in multiple pieces of multi-million dollar software, you tend to pick up a few things. I've yet to find any WYSIWYG UI designer that is actually good for anything beyond very simple interfaces or very specific uses. Every single one I've encountered is usually bad for anything beyond prototyping. I'm not saying you can't make a good one; just that I haven't found a good one. Almost all of them fall short as soon as you try to build a complex layout. I've found the same thing with most of the Swing layouts. They have a specific niche, but they usually aren't a good generalist layout unless you want to spend time nesting a LOT of panels. GridBagLayout tends to "just work" for almost every situation; and it handles different L&amp;Fs, font sizes, etc just fine if you use it correctly. Just one example, but at one point I challenged a colleague to build [this](https://imgur.com/a/FyzkeQO) UI (just some random UI I grabbed off a google image search and recreated) with the NB GUI builder and without using GridBagLayout (since they hate GBL and advocate for literally anything else). I would do it with GBL. I was able to do it in under 400 LoC and using only 3 panels. They never finished, but after a few hours and 13 panels, they admitted defeat. Not to mention, the UI looks fine with every L&amp;F I've thrown at it, even when resizing. So again, I'm not saying that Netbeans GUI builder is bad specifically. I'm just saying that it makes using GBL (the best generalist layout in the JRE) hard and every WYSIWYG GUI builder I've come across is terrible at any stage beyond simple prototyping.
Well, it depends what you want to get. Maybe some functional programming?
Are you implying that Electron is quality software?
Is this a thing?
Why is this on /r/java?
Your fingers and a keyboard. Please don’t use GUI builders for swing.
Latest burn for me was their use of pre-built binaries https://github.com/electron/electron/pull/13988
Ah ok, I understand now, your definition of 'poor solution' is that you having to modify the auto generated file, because you are afraid that next time it auto generates the file you will lose your edits? Fear not, netbeans does not (and never did) overwrite user edits. Netbeans only overwrites few section in the file typically commented well as such. User added code to the event handlers always stays. I hope this answers your concerns. 
View &lt;&gt; Controller &lt;&gt; Model
&gt; If by life you were deceived, don’t be dismal, don’t be wild! Access these GitHub repositories, they will make your day definitely! wat
There's like 10,000 explanations on the internet. Use Google and try page two or three.
If your job is to code full time in java, working with teams, especially on large projects, what you said is 100% true. But there are lot of situations where we want to 1. Create a quick gui tool and we dont have time to code by hand, in such case netbeans makes it 10x more productive. 2. We dont care about IDE locking, especially as you mentioned we can always throw the form file and maintain manually. 3. Quickly learn how to code a certain gui, do it in netbeans and look at that resulting code. Probably I can think of few more cases where netbeans gui builder is perfect. 
NetBeans has had a fantastic Swing builder for many years. The problem is that Swing is a complete piece of garbage.
We do have another alternative to eclipse. IntelliJ Community Edition.
&gt; 1. Create a quick gui tool and we dont have time to code by hand, in such case netbeans makes it 10x more productive. That comes down to the individual. I personally find that the GUI builder is slower to use than just doing it by hand unless I'm really just slapping something together fast, in which case I'll just hard code everything and there is no need for a GUI. &gt; 3. Quickly learn how to code a certain gui, do it in netbeans and look at that resulting code. Except NB usually generates really bad code from what I've seen. Sure, you'll see how to do it, but not necessarily the best, most efficient, nor the proper way.
The best? Really? Since 2004 ---&gt; [https://www.formdev.com/jformdesigner/](https://www.formdev.com/jformdesigner/)
Thanks ! I never followed guide for organisation. It’s more out of experience and try and error. 
Hey dude, Java programmers also need to laugh for a while at weekend, right? :) Just relax for a little while.
Thanks dude. I didn't use this stuff in the past. It looks very like netbeans but as it described much enhancements are there. Would have a try in the future.
 Used it for 6 years as main IDE (not for swing, switched to golang). Eclipse is a piece of crap.
Electron and web development should be the future now... 
I think you just have to code up your own example. Sometimes no matter how much you watch or read about it, the concept isn’t going to click until you write it yourself and with Java it’s really quick to mock a simple example. 
It's the unit of work like I described: something that moves the codebase from state-A to state-B, without carrying unrelated changes along with it. While I do recognize that is a malspecified answer, since by definition all changes move the codebase from one state to another, I meant in terms of what the system _does_ after applying that commit. For example: &gt; Introduce migration for the new api token table might not contain JPA objects for it, or might if they are "stable" enough that I suspect even another branch or backport would want those exact classes. But it is unlikely to contain code that wires up the new service classes, controllers, tests, or any such business related to how those api tokens are going to be consumed. And it _for sure_ will not contain some random `pom.xml` change that's also needed for that feature. Another heuristic I use is that if the commit summary contains "and", then it's too big.
EE just extends SE with a bunch of extra enterprise specifications. See the wiki page: https://en.wikipedia.org/wiki/Java_Platform,_Enterprise_Edition I'd probably be spending time learning about Spring (Boot) instead though.
And STS, the better version of eclipse 
I still prefer to write my code myself
I work on a Java EE product everyday and honestly 99% of the time its "normal" Java with entities to talk to the database and "special" queries to retrieve them. Just read into the Java Persistence API (JPA) and JPQL and you should be ready to go. Sometimes there is a little something to do with a servlet or a bean but its not that complicated and can be looked up on the spot. In about 10 years I spent perhaps 10 days using the other Enterprise APIs, so I'd say don't worry too much about them.
I'm wondering that why they don't change NetBeans UI. Even they have best Swing UI Builder...
That isn't saying all that much. 
Lots of ee is used in spring. Servlets are the foundation of most Java web frameworks, jpa is very common in spring, and so on.
I read the entire thing. What is the bad thing?
Another option is Liberica JDK, [https://bell-sw.com/java-8u192.html](https://bell-sw.com/java-8u192.html), which is from BellSoft. They contribute to OpenJDK too. 
I don't suggest adoptopenjdk's hotspot openjdk. The built of hotspot version didn't pass jck/tck. Here is the current situation: \&gt; At this stage the London Jamocha Community (LJC) has not been able to reach an agreement with Oracle to use the Java SE Technology Compatibility Kit (TCK) under the terms of the OpenJDK Community TCK License Agreement (OCTLA). [https://adoptopenjdk.net/support.html#jck](https://adoptopenjdk.net/support.html#jck) 
One minor detail: MVC (at least in Java world) in past had two variants: MVC 1 &amp; MVC 2. Just make sure that you use MVC 2 (for example Spring Web MVC is based on MVC 2, well mostly everyone works with MVC 2, but when you google MVC, you may also get to tutorials which may be based on MVC 1). 
**Removed**; programming help &amp; easily googleable.
Why? Honestly interested.
Unfortunately I don't have, but you can compile the source code.
&gt; I love how netbeans is trying to not have its own project settings or config and just rely strictly on the maven or gradle config. This was always a big selling point for me, and the main reason I switched from Eclipse.
Java EE (Oracle has since transferred the stewardship of JEE to the Eclipse foundation and it has been renamed to Jakarta EE) is a collection of Java APIs used in server-side programming. These are implemented by an application server such as Wildfly, Glassfish, or TomEE, into which you deploy your application. Most projects only use a small subset of JEE, commonly JPA for persistence, JTA for transaction management, CDI/EJB for dependency injection, Servlets for serving HTTP requests, JAX-RS for REST. Many JEE libraries can be used in SE projects. Often, applications use Spring instead of some JEE specs, especially for dependency injection, transaction management and serving REST. The official JEE [tutorial](https://javaee.github.io/tutorial/) is a decent introduction.
Exactly yes. When the Width or Height lower than 128 or not POT, noise map generator is freaking out. Because the algorithm works pretty fast in variables that are only POT. Also it optimized for least RAM usage and CPU effective. [https://gamedev.stackexchange.com/questions/7927/should-i-use-textures-not-sized-to-a-power-of-2](https://gamedev.stackexchange.com/questions/7927/should-i-use-textures-not-sized-to-a-power-of-2)
Are there any resources you'd recommend for thoroughly learning GBL? It has a fearsome reputation, and most people seem to either avoid it like the plague or [use it reluctantly and awkwardly](https://youtu.be/UuLaxbFKAcc) without ever feeling that they properly "get" it. (I am in the second category.)
Lol glad i'm not the only one, Around 7 years exp. I have used both. Never found anything remarkably different or useful with Java EE. I think that's why they are dropping it. &amp;#x200B; I think you can say its for enterprise development and enterprise companies will pay boat loads of money because they are stupid.
Then you have a NetBeans only solution - not a good approach to me. And yes I stay biased there: Java code is not a good base for saving a GUI design. And there are very approved approaches to solve those issues.
In Java EE (Jakarta EE, wtf) you have a container. That's a piece of software running on the server, and then you compile your Java code and give it to the container, and it will run it. "Java EE" is basically the specification / api of what the container does, and in practice, it's a bunch of libraries that you use in your code to interact with this api. The Java EE tutorials are vast. The first part I think was mostly about front end stuff, skip forward to CDI and things like that, and JPA to get a feel for what it's all about. 
The way Electron apps distribute precomputed binaries to work rather then relying on a central system installed Electron runtime
JavaEE is a set of APIs. Together with reference implementations of it, it's a bunch of libraries. Depending on your use case you may happen to benefit from one or more of them, or you don't. That's it. You've used it and thus know what JavaEE is – and yet you see nothing "useful" about it? So you think that any library is useless or how are we to understand that sentence of yours? And why would you think that you need to "pay boat loads of money" for it? You realize that there are free JavaEE implementations, right? 
Cuz open source does it better! LOL
This. There is no single framework or standard. Most modern java applications use a mix of different Java SE/EE standards and other FOSS frameworks and libraries.
&gt; Cuz open source does it better! LOL Here is the source code for (arguably) the four largest implementations: * Glassfish: https://github.com/javaee/glassfish * Wildfly: https://github.com/wildfly/wildfly * OpenLiberty (Subset of WebSphere): https://github.com/OpenLiberty * TomEE: https://github.com/apache/tomee 
Because /u/ny83427 is self-promoting oldyoungboys.club. They've repeated spammed that domain over the last few days.
So... this comment is misleading and inaccurate... It frightens me so many people answering without having a clue.
They are changing it now cuz Enterprise potato devs caught on. 
&gt; `Iterable&lt;T&gt;` can be a perfectly fine signature if all the caller is going to do is iterate over the result. ftfy
I don't really see the inaccuracy ? I answered with what I am seeing in my company. The EE spec is composed of so many parts and there are some that I never used. Message Service ? Developped once then never touched again. Validation ? Used also once and the developpers now use (or more precisely use without knowing) internal APIs that hide that. Beans ? Same, for everyday work they are hidden away. Servlet ? Our product has 5 servlets if memory serves, the everyday dev work is done way behind them after the queries are parsed, validated, checked ... In our product at least, a new developper only need to modify some methods on specific classes and the only part he has to know is the entities stuff to interact with the database. A senior dev will need more but an intern could work without touching anything else.
Nothing worth paying money for! Compaines pay boat loads for Java everyday! LOL Disclaimer:. I actually don't know how much Java cost to license. But I want to make you angry because you disagreed with me.
Wow? Really? IntelliJ is implemented in Swing? 
Yeah, [jooq.org](https://jooq.org) started as a pet project 10 years ago. Turned into a full time business 5 years ago, my first full time employee starting in April 2019
&gt;except complex data models which relation DB's don't handle well anyways. Meh, just rigorously normalise things and you're fine
Removed as **off-topic spam**.
You are **mostly self promoting** which is against the [reddit rules for spam and self promotion](https://www.reddit.com/wiki/selfpromotion). Reddit roughly allows a 10% self-promotion ratio which you gravely exceed with a close to 99% self-promotion ratio. What you are doing is **spamming** according to the reddit rules and is not tolerable. Next self-promotional spam will earn you a permanent ban. **Removed**
https://gitlab.com/whacks/daily-reddit Really simple open source project. It sends out emails everyday with the top posts from your favorite subreddits.
recently https://github.com/esaulpaugh/headlong/
The distinction Java SE and Java EE does not exist any longer (Java 11+). Formerly Java EE was jettisoned into the Eclipse graveyard. You do not want to have to deal with it anyway. Either you work with very legacy, aweful stuff or vendor lock in. The EE specs with value are adapted by others like Spring.
You pick that up while doing Spring. I also recommend not to work for a company that uses a Java EE stack.
Don't feed the trolls.
There's not really a thing called "the JEE stack". You can mix basically whatever you want. You could conceivably run a purely JEE stack comprised of a bit of jax-rs and jpa for example. JEE with CDI and app servers and such has also improved a lot over the years. It's much more bearable now.
I mean with a stack that runs on a JEE application server like JBoss or Websphere.
Well, this got odd real quick. I understood that the question was the difference between Java SE and Java EE, and not if one intern could survive while babyseated by a senior. *I also think you should not take your case as representative of all world.* Still, even from that perspective *your initial answer was misleading for a junior*, if you had given your point of view like in this answer I would not assume you wouldn’t have a clue (although I still not agree completely). Sorry if I offended you in some way. There are also **other answers in the thread in the same tone, which are a bit frightening indeed**, at least for me that have spent the last 10 years forming java EE **engineers**. Although it is all Java, I believe a starter needs to understand many different things, I will try to mention just a few. - Your application structure change a lot, and you have to be concerned with an App. Server. In my experience with people learning, the server is a concept not so easy to mescle with the other things. - You will have a container, which manages parts your application for your. - You have a complete deployment model. Now you will not execute your jar, something will happen that at the beginning seems like black magic. - your application now have many entry points. Now you cannot just think about your main and your threads. - Concurrency is the norm, and you should not start a little thread when you want to do some task concurrently... - Wtf, objects are being created for you, and you never instantiated them anywhere (you think) Well... I will not go into JPA because it is not central to the changes I was thinking nor CDI because I am on mobile. But no, I do not agree that all is the same, mainly for a person that is learning for the first time.
Many people consider Java EE stack not only as additional technologies such as Enterprise JavaBeans, JSPs and connectors but also frameworks which enhance the work of these technologies or implement some specifications (f.e JAX-RS) such as Spring Framework, Jersey and others. The best idea to start with EE stack is to have a look over requirements for an open position at the company you’d like to apply. It will give you a list of skills which you have to improve.
Does anyone know when the J2EE stuff will added? I really want to go to the new version, but can't without good 'ol Tomcat and JSP support! I have tried all the IDEs and I still think that Netbeans beats them all so I hope it doesn't languish at Apache.
Just to add that **maven/gradle is something that you should learn for all Java apps:** EE, Spring but also for your java SE applications. 
Yes. Build tools are the best thing they didn’t teach me in college.
Associate degree here, which is supposed to be more practical and less theoretical, but man, there were so many things they didn't teach me... Imagine being hired and discovering the existence of a thing called Maven. And other thing called JUnit. And all that Swing/GUI stuff you painstakinglly learned? It has ZERO application in the real world, nobody uses it. All of this while sitting at your desk, being paid for not knowing jack shit about how a real Java application works after two painful years. That day my impostor syndrome could've kicked Hulk's ass.
&gt;Well, this got odd real quick. I understood that the question was the difference between Java SE and Java EE, and not if one intern could survive while babyseated by a senior. I read "I know I’ll be using java but I didn’t know if I should be learning anything specific to the EE version." and decided to answer this part because explaining everything JEE-related would be too tedious. I thought about what my interns needed to know and answered. &gt;I also think you should not take your case as representative of all world. I don't think that my case is that special : An intern won't need every bit of JEE apis on his first day and in most cases not even in his internship. I know a lot of companies that won't let an intern alone outside of "starting areas" in the code until they can assess what/how he is learning (even with code review). I know when I started on my previous jobs it was "this is the documentation, here is a ticket, here are the classes you need to know for now, go break things". Perhaps it's special but speaking with friends it seems that a lot of companies play around that theme. &gt;Still, even from that perspective your initial answer was misleading for a junior, if you had given your point of view like in this answer I would not assume you wouldn’t have a clue (although I still not agree completely). Sorry if I offended you in some way. There are also other answers in the thread in the same tone, which are a bit frightening indeed, at least for me that have spent the last 10 years forming java EE engineers. And if you would have typed this comment directly instead of answering harshly, your message would have been read by many more people. Just for the sake of arguing :-p &gt;Although it is all Java, I believe a starter needs to understand many different things, I will try to mention just a few. &gt; &gt;Your application structure change a lot, and you have to be concerned with an App. Server. In my experience with people learning, the server is a concept not so easy to mescle with the other things. &gt; &gt;You will have a container, which manages parts your application for your. Yes you will have an application server, multiple projects, some deployed stuff, resources that are configured left and right. It can become a mess but so can a "normal" java application. An intern will not need to know everything, it should be documented (or a senior will need to babysit him but in this case, it's their fault for not documenting). JEE or not, an "Enterprise" software will always be complicated, strange and convoluted for a newcomer. &gt;You have a complete deployment model. Now you will not execute your jar, something will happen that at the beginning seems like black magic. At the end of the day, for a first glance into the JEE during an internship, I would say that running a jar file or deploying an ear (or a war) in some application server is not really different. And there are methods to build a single executable jar embedding an AS and whole ear/war projects. &gt;your application now have many entry points. Now you cannot just think about your main and your threads. &gt; &gt;Concurrency is the norm, and you should not start a little thread when you want to do some task concurrently... Yes, this is a difference that could be important and should be pointed out, I did not think of that. Concurrency can bite you if you don't expect it and manually creating a thread, even though it can be done, is a crime because, well, you are not alone anymore. &gt;Wtf, objects are being created for you, and you never instantiated them anywhere (you think) And more problematic is the "but this instance is used here ? Why is it still here ?". &gt;Well... I will not go into JPA because it is not central to the changes I was thinking nor CDI because I am on mobile. &gt; &gt;But no, I do not agree that all is the same, mainly for a person that is learning for the first time. Yes there are differences, but without knowing the project more in details, I thought that the most used portion of JEE to get to know was the database part. &amp;#x200B; 10/10, would argue again ;-)
My first job, our source control system was a floppy disk. No lie. I didn’t even know better. Eventually someone introduced CVS and it was mind boggling. So young, so naive.
All Swing GUI builders are code generators and generated code is very hard to maintain. Also, it locks all developers that want to work on the code to Netbeans. The situation with JavaFX is vastly different since there is a standard intermediate format i.e. fxml.
People definitely use Swing in the real world, especially for legacy applications. The (ancient) company I work for is gradually transitioning to a web app, but our current UI is built with Swing.
Yes IntelliJ is written with Swing. Please don’t believe the FUD about Swing, it is a perfectly good GUI toolkit.
Please no. Web apps make for shitty rich client apps.
Actually Swing is a great GUI toolkit. Care to share why you think Swing is garbage?
Rule 2 of the sub. Go read it. 
Don’t get me wrong. I implemented a lot of things in Swing. IntelliJ though really is an excellent and very responsive tool and I am quite amazed of their build quality. Compared to what comes out of the box with Swing, IntelliJ is amazingly well crafted.
I'm writing a highly opinionated and unconventional Java blog. I decided to write the blog instead of using a blog system to show how I use everything. All the code is on github (examples, blog source, ansible scripts, terraform) https://www.stubbornjava.com/
I'm writing my own Java blog partially for fun but also to build a foundation for other side projects I want to work on. https://www.stubbornjava.com/
"Java’s latest major release is the Platform Standard Edition 8."
Well that's not a good start.
It's really hot right now to hate on Electron.
I have seriously trust in jetbrains when it comes to coding since I started using Kotlin, so I am not wondering they are able to figure shit out. But to be honest, that IntelliJ is built on Swing wonders me as well.
I used eclipse's derivatives for years and was considering as a recomendation to my team for python development (with debbugger). I follow some of the press about it as well. Can you please care to ellaborate on it's suckiness? Are there deal breakers or is it dead by thousand cuts? Are derivatives like spring suite also bad? Best regards
Eclipse is bad because you only get down votes for saying anything good about it. 
I am really like the udemy course by Tim Buchalka. He is an excellent teacher and this class gave me a far better understanding of OOP in general (I was previously familiar with PowerShell scripting). One thing about udemy, you can always get the courses on sale, just search for discount links through Google. You can also return course for a full refund before 30 days if I remember correctly https://www.udemy.com/java-the-complete-java-developer-course/
So to become a great Java developer on 2019 learn Kotlin or other JVM languages 
The sidebar has great resources. And like most of beginner's here I'm doing the mooc of Helsinki university which is a great introduction to the Java language imo. Other than that I also like to learn with codegym.cc and am working through the book "headfirst java" Udemy is also a great place to find some decent tutorials. I like the way 'Imtiaz Ahmad' explain the stuff. Hope it helps.
I learned so much from this comment. Thanks
In my high school we used codingbat and PracticeIt for practice problems and I thought they were pretty good sites and had good practice problems. 
can i get a link for "mooc of Helsinki university" i wasn't able to find it,and i also registered to codegym and it looks great thanks for your comment :).
Try HeadFirst Java
There you go... http://moocfi.github.io/courses/2013/programming-part-1/
As a person who works with JBoss daily, MicroProfile is very much compatible with a typical JEE server (and working on JBoss, moving to Microprofile was a fairly straightforward thing). The marketing that Spring has is insane; I personally really enjoy JEE (and now with Jakarta being open source, the development is going to speed up quite a bit). While I understand why Spring gained its place a few years ago, JEE is very much alive and a lot more simplified than it used to be. This subreddit seems to believe JEE is a long-dead technology, and that it's basically the 'Cobol of Java', but my experience is exactly the opposite. It's a technology that not many people know, and that companies really want (especially larger banks; I mean, Visa is using JEE for christs' sake!) The "Spring or die!" of Spring fanboys, though, is super annoying. Saying "I wouldn't work for a company that uses the JEE stack" is saying "I wouldn't work for practically any Fortune 500 company", or something like "I'd work for Silicon Valley startups only".
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt;all that Swing/GUI stuff you painstakinglly learned? It has ZERO application in the real world, nobody uses it. I've been saying that over and over again, yet no one listens to me. I have no idea why colleges teach this stuff. One is then hired to design a REST API without even knowing what curl is, and what's the difference between unit and integration tests, and you don't even know how to build the company's SW. But at least they know how to place a button on the screen, and create an event handler... *Eye roll* To be fair, the idea is that once you learn programming, you can learn anything else that you'll need, and that's true. It'd just be nice to tailor the education to real needs, so that you have to learn less during the crucial first couple of months.
True; the question is, how many people are hired to write desktop apps nowadays...
Starting from Java 1.5 it’s not a bad idea to have a look at it. Wish you good luck and patience with discovering its features!
No, Tim Buchalka is overrated. He types code but does not explain concepts at all. Select for 1 star reviews and you will read some well-funded critics that I agree with how bad his courses are. 
Write? Not many. Maintain? *Loads.* 
Go to /r/learnjava and check the sidebar there (old reddit only for now). **Removed**
In my experience, not saying everybody's the same, hey teach that stuff because education in computer science is at least 10 years behind the industry. Teachers are so disconnected from private sector they don't even know the most basic aspects of professional software development. They teach like we're still in 2007 and applets are a thing people actually use.
The basic principles of how GUIs work hasn't changed though. However knowing the specifics of a particular library won't matter if you don't need to use it.
That's not what college is for. The idea of a vocational school for programmers though...
Desktop applications are almost always universally better imho. And honeslty most people aren't going to be hired to do exactly one kind of thing for the duration of their employment.
which course would you suggest instead of tim's ?
Hi, thanks for your remind and the administration work. Yes I am self promoting posts written in my personal blogger. However, at the same time, I only promote those I think will be useful to Java programmers in /r/java, you have seen the articles I posted here: Serious: Series of code review against jsoup, Java Dev Env setup using chocaletry Funny: Such as 5 github repositories that will make your day Updates: Netbeans 10 Among them I didn't expect Netbeans 10 was so popular, while the most serious code review parts are really untouched. While I respect your administration and am willing to follow the rules, I just want to let you know my motivation and please check out those posts to see if they are really making non sense and is totally useless. If so I am also glad to improve myself and building better contents in the future. 
Don't forget learning JVM internals.... Apparently.
Books. Video courses are not going deep enough for me. 
To each their own. I am an interactive learner so videos and typing the code is effective for me. OP may be different, but from my experience the Java course I linked is a good starting point and helped greatly in explaining abstract concepts
Java SE is the actual JDK you get from RedHat/OpenJDK or Oracle. Java EE is just a specification, and it generally requires some heinous pile of shit like Tomcat or Glassfish running underneath to actually implement. When most places say "Java EE" they just mean Java with an HTTP server. If a job posting actually mentions JSP, JMS, Struts, or EJBs, you're walking into a Bad Time. &amp;#x200B; Nobody coming out of school has any useful knowledge about real application development at all, and the people running your internship aren't going to expect you to have any. Just relax and be willing to learn, that's 1000x more important than what little knowledge you can teach yourself out of the gate. 
Then get a degree in software development. Computer science is not just software development. 
Heh, yup, you caught me there :-)
\#1. switch to Go
IntelliJ ultimate isn’t cutting it for you???? Yikes. I use it and love it. It does everything 
Man, the amount by which we disagree really exceeds any benefit in taking the time to debate with you here. The only thing I have to say is that I think you need to spend a bit more time using these languages professionally, the way they are being used in the industry, and then maybe we'll be able to work out an understanding. Maybe you need some experience with more languages in general? As far as it stands now, you're just _really_ wrong dude.
I know it’s not for Java but I really prefer Visual Studio IDE over IntelliJ. It never seems to have issues with memory over use or other issues I frequently encounter while using IntelliJ. 
There’s an Emacs key settings on all jetbrains IDEs, that will give you the same Emacs feel that you’re looking for. 
&gt;Then get a degree in software development That's exactly what I did.
I love it for the advanced IDE features, I hate it for actual text editing.
Yeah, I am using those, but editing text in IntelliJ feels very clunky compared to Emacs. At one point I had a hotkey to open up Emacs with the cursor at the same point as it was in IntelliJ, that was actually a pretty nice "best of both worlds" scenario.
.this! 
Try out : eglot or lsp-mode. Still are leging behind IDE and VSCode but someday there will not be any big differences... I mean, you can do most of what is important, but refactor and advanced features are still lacking...
Ah, thanks! These seem to be exactly what I'm looking for. If I understand correctly, both these modes do nearly the same thing, namely communicate with an external language server, correct? If you have experience with both, any reason to chose one over the other?
I am using Java and JavaScript professionally and C++ privately. In the end you're the on making the claim they are similiar, so it's on you to proove it. So far you've made 0 arguments and instead of refuting any of mine you just became kinda condescending and reiterated that you are right and i am wrong. As long as you aren't even willing to back any of your claims, you are objectively wrong.
Yep. lsp-mode is a more mature project so you are safe going that way for now... But Eglot will go into Emacs Core in the future so we expect it will be glorious! :D
Have you tried using one the emacs emulators inside intellij? https://plugins.jetbrains.com/plugin/10045-emacs-patched The Vim plugin is really good too
Thanks! Much appreciated.
In addition to some of the good comments on here, I'd also add: * Unit test your way through everything you do. If you're unsure about how something works (obviously, after googling) open up a sandbox project and write some tests. * Pay attention to the dynamic of the team. Some teams are very talkative and like to bounce ideas off each other, other teams like to put their headphones on and crank it out. Your job is to assimilate in their culture, not to change it. * Spend \~30-45 minutes in the morning reading through documentation or a book about the tools that you're using without any specific troubleshooting goal in mind, just objective learning. If it's Spring, there are a ton of resources, and knowing the details and features of the framework becomes quite important to delivering.
At my current place of employment, it appears that they won't be progressing past jdk 1.8 and will likely pickup .NET going forward...
Serious question here, from a long time IDE user and ocasional VIM user: what text editing functionality you have on emacs you cannot reproduce on Intellij IDEA?
Long time emacs user. In the past I consider using the emacs java environments, but after reflecting further, I really felt like java was made for IDEs. I would seriously consider more concise languages rather than try to fit java into emacs. I know changing languages is a huge deal on a project... There was an interesting article a while back on developers who lean on IDEs vs languages for power
Extreme lack of components. Massive RAM usage. Native-immitating L&amp;F that isn’t quite right (especially font rendering). It doesn’t have basic components such as * picture box * data grid * web browser * masked text box * date/time picker Images can be displayed using a JLabel with no text, but the memory usage is obscene. There hasn’t been any major development of Swing in about 15 years. It really needs to be deprecated. I haven’t tried JavaFX recently and I’m slightly curious. However, I gave up a few years ago and moved to the web for anything front-end. Java is still great on the back-end, though. That’s where it really shines.
Java SE is the Oracle version of the Java developer kit and runtimes. Java EE is basically a server-side Web application framework -- sort of. JEE is a laundry list of specifications pulled from a can of alphabet soup, and multiple vendors (IBM, Oracle, Red Hat, Apache) have all come up with their own implementations and servers that run their versions of the software spec.
Why? What about its editing do you find so bad that Emacs provides? I used VI back in the day, for basic crap but no way in hell I could come close to the speed I can code with IntelliJ in VI, emacs, etc. Just way too many convenient fast features that save me WAY more time than any of those old style editors provided.
If your goal is to learn those concepts, then do not waste your time doing it by learning JavaScript! Learn ML, Haskell or something which will teach you that as well as other valuable, mind expanding concepts. For instance, learning a true FP language will teach you how to abstract those functions beyond "array functions", which is a very powerful concept to learn.
Counter-Counterpoint: **no one** knows how to do it "right", because we haven't figured out what "right" is.
"malspecific" isn't a word bro
😅 This make my day
I admire you courage to promote go here😅 So you have enjoyed programming with Go nowadays? Would you share a little bit on what you are doing using Go? (Seriously asking, not joking, please do not misunderstand)
In the first company I was told we are building products of J2EE platform and only found I am doing Spring stuff.
Good job dude!
Your humor impressed me, dude.🤝
Hey dude, I understand you feeling, similar with my first Java job. I just want to answer briefly - **HAVE PATIENCE**, stick to the goal and possibly you need spent more time in a fresh new area, everyone needs more time to be familiar with new stuff. Don't worry about problems like 'am I not good enough' - no one here would know this exactly, and even if we know, it only represent your current status, and you have infinite possibilities in the future. Who knows how good you will be in the future? Long in short: Java is not difficult. You can be better everyday than yesterday. Keep going and JUST DO IT.
HOLY SHIT! I wish I could see this post earlier.
I heard about jhipster just now. Does it provide a template for creating web application?
I'm using vscode
Correction: the have not been able to *obtain* the TCK. This is just a political issue. While this is complex software and things can always glitch, there are few technical reason why their builds should not pass the TCK.
If you are running a Linux distribution, there ought to be a JDK in the repos.
Actually after i thought about your question again for that particular project there's a reason of why it is like this. My original idea was to make it easy for anybody to develop plugins for the dashboard so each plugin is in its own jar file. My original build would actually separate the plugins in their own folders so it would make plugin installation by simply copy and pasting jars in that said folder and restart the application. &amp;#x200B; Doing that led to the way my whole structure is. The plugins jars should not have access to any classes of the "web" or "updater" sub-modules; it should only have access to the "models" because the class that needs to be implemented as a plugin is there and the "notification" module because well plugins need to be able to send notifications. &amp;#x200B; That was particularly tricky to set up overall because each plugin has its own front end (pug templates, less css, javascript) and everything needs to be compiled and minified and moved into appropriate folders during maven build so plugins needs to be a child of the parent plugin pom that will set all that for them. &amp;#x200B; I said it was my original plan because the structure is still the same and the way it's built as well but I reverted to a simpler distribution method where everything is packed in one jar and run as is or within a docker container.
I have multiple IDEs on my system and the ranking goes as follows: IntelliJ &gt; eclipse &gt; atom &gt; notepad++ &gt; visual studio Jokes aside, I recently started working with C# and the whole .NET-system and use visual studio now. As bad as eclipse is, it's godlike compared to visual studio. Nothing in this piece of shit tool works. It's a very common thing that I restart my IDE and rebuild the project to FIX ACTUAL BUGS IN THE SOFTWARE I am writing. It's inconsistent, it's slow, it's way too bulky and it's simply shit. If it wasn't for my company I wouldn't even pirate visual studio. 
You can use Maven for project build and Yasnippet for code pieces. In Emacs you can run terminal commands by ```M-x shell.``` . But this is very struggling, I recommending use an IDE for Java language.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
When I'm unit testing I just pass in the mocks/test doubles into the class-under-test's constructor. No injection for testing.
It's because isAlive is private. I think protected should do the trick, accessible by sub classes.
Absolutely. You may have a situation though, where you don't want to make a private variable protected.
What other reasons? This is what the protected keyword is for. It should be chosen over an upcast every time.
To elaborate on why it's a good idea that this does not compile: What if Opponent had a public member called isAlive?
I use Emacs with JDEE - Java Development Environment for Emacs - and have done so for many years. I have it configured to work either with Ant or Maven based projects and it works fine. It is showing some signs of age though, as an example I wasn't able to get it to recognize any Java version over 9 recently because the elisp code was looking for a single digit in the version 1.x versus 1.xy so it has some problems with Java 11. Main reason I've kept with it so long is I also write code in C using CMake and being able to use the same editor whether doing C or Java is easier and Emacs has great support for C.
Nice trick. An interesting language oddity. A design smell if you need to do this, for sure, but it's an interesting piece of trivia.
I disagree 100%. Private variables are much easier to reason about than protected. As soon as you make a variable (or method) protected, you need to consider all possibilities that inheritance opens up for. If an upcast can save you, it's a much safer solution. See Effective Java: Design and document for inheritance or else prohibit it.
Precisely! Though variables can't be overridden, so maybe the example in the article would be more interesting if isAlive was a method?
Don't extend classes.
For the same reasons you should not care about your descendants. The method should be `public void kill(Player player)`. Accepting a child as a method parameter stinks a lot, and is the reason why you need a language trick in the first place.
Well if the method/field is private the subclass can't exactly override it.
Agree! Hard to come up with a sensible example that illustrates the oddity though :-( Generally speaking though, composition is the way to go, whenever possible.
I don't think it is a design smell. If it's private, it's not inherited. Instead of upcasting you should change the visibility or create setters and getters that are visible to the son.
In this dummy snippet, yes, obviously. But it's easy to imagine that the actual method contains more logic, requiring access to `Opponent` specific members, and accepting a `Player` and then downcast it to an Opponent is worse imo.
Ugh.. you're right. :palmface:
What I thought by "design smell" is the design that lead to having to use a trick like this. The actual mistake I see is that a class has a method which acts on its own child. A parent class should not know about its children.
Good point.
It's rare because not many do access a subclass in a superclass.
In this example I would find it strange when the Opponent contains a Player member, you also would still need an accessor to isAlive.
I've read Effective Java... it specifically warns against inheritance because it is a common pattern people use that has non-obvious drawbacks. This on the other hand is coupled with obvious design flaws
It was always buggy and slow. Plugins crash. SWT and osgi were never good. Also the look is so bad I wanted to pull my eyes of the sockets. Huge projects is also a big problem (memory and speed). I doubt it changed over time. Obviously you could have googled that.
In that case `kill` contains a lot of subclass logic. Make it abstract in `Player` or override it in subclass or move the method into an interface. Let polymorphism handle it. No need to cast.
Favor composition over inheritance 
Are you saying that the upcast itself is coupled with obvious design flaws? (If so, could you elaborate?) Or the fact that the Player class mentions a subclass of itself? I agree that the example is contrived. It was hard to come up with something "real world" that illustrated the oddity.
You are not alone, I've used IDEs for a long time, then when the whole VSC/Atom/Vim/Emacs and briefly came back to IntelliJ, but went running back to text editors. The issue is languages such as Java need heavy IDEs, so I switched languages. I know this is a Java sub, but there are other languages out there and there is a world where you can be free from IDEs ;)
I meant the latter. Basically what I'm saying is that this "tip" is applicable only in situations that should be avoided entirely in the first place.
Ah, yes. Agree.
You seem to think that the snippet in the article is intended to illustrate a good design. :-) It's carefully crafted to illustrate an oddity in the language. Nothing more, nothing less. That being said, I still claim that an upcast is a smaller price to pay, complexity wise, than turning a private variable into a protected one, as suggested in the root comment.
Well, that's one thing that developers are surprised upon in Java (and also C#!). I wouldn't really call that something that saves the day - never saw anything useful come out of it. Here's also some debate about that: https://stackoverflow.com/questions/17027139/access-private-field-of-another-object-in-same-class 
That Stack Overflow question discusses something slightly different though. An upcast (as discussed in the article posted here) has nothing to do with "other objects" really.
That's true, it has nothing to do with it - but that's because it's not really about the upcast at all - it's because you need to access it with the same type as the current class to access the private member. The reason why it seems so strange to so many is that it's not the current instance, but another one. It's a design-choice like mentioned in the answer on stack-overflow, that states: "The private modifier enforces Encapsulation principle. The idea is that 'outer world' should not make changes to Person internal processes because Person implementation may change over time (and you would have to change the whole outer world to fix the differences in implementation - which is nearly to impossible). When instance of Person accesses internals of other Person instance - you can be sure that both instances always know the details of implementation of Person. If the logic of internal to Person processes is changed - all you have to do is change the code of Person."
Data classes. Having to implement getters and setters is a real pain. Adds significantly to the Java bloat problem.
We use Go for high availability, low latency streaming applications. It’s faster to develop with, less code = easier maintenance, channels and goroutines are bomb diggity, structs should have been in Java 10 years ago, and the containers are a fraction of the size of JEE containers. Dependency resolution still really sucks though. 
&gt;The reason why it seems so strange to so many is that it's not the current instance, but another one. Well, I've been programming Java for about 20 years, and I've written hundreds of equals and copy constructors, so I'm well aware of the "I can read private variables of other instances" thing. This snippet still surprised me though, because I couldn't for my life imagine that casting a `Dog` to an `Animal` would ever make any difference, so, I kind of disagree. Talking for myself obviously.
&gt; That being said, I still claim that an upcast is a smaller price to pay, complexity wise, than turning a private variable into a protected one, as suggested in the root comment. I don't think many will agree
I'm coming to this late, but quick question: is JMH itself going to be bundled with the JDK, or is this just the inclusion of the benchmarking suite to validate the performance of the JDK?
Why would a parent class use the type of one of its subclasses?
Well, suppose `Opponent` has some methods (not inherited from `Player`) that the `kill` method needs to call. The example is contrived for sure. It's just used to illustrate how an upcast can make a difference.
No, the problem is artificial.
Using class names like `MyClass` and `MySubclass` is probably be better. Thanks for the suggestion. Surprised you prefer changing to protected instead of an upcast. Changing from private to protected opens up for lots of potential issues, especially in an open ended code base like a library. Who knows how and when a future developer will subclass `Player` and change `isAlive`? All class invariants basically go out of the window. An upcast on the other hand is a completely harmless local operation that solely nudges the compiler in the right direction, without any unintended side effects or sacrifices of encapsulation.
Yes. The problem is artificial :-) Just a language curiosity.
I wanted your opinion, so unless you have a blog... Thank you for answering :)
That is awful code though. Please never do this!
I think even going that low level should only be done if you really need to. Most developers can get by with immutable objects and reactive programming (preferably with future, potentially with reactive streams if you really need them).
Records with pattern matching. The ability to define something like: sealed interface Response&lt;T&gt; data class Success extends Response&lt;T&gt; { String metadata; T data; } data class Failure extend Response&lt;T&gt; { int statusCode; String errorDetails; } Will be a gamechanger for me. There's definitely some projects I want to go back and refactor once we have that capability.
Thank you very much for the further explanation. I am trying to learn organization and modularity and I feel that your project was a good example of this!
This is just poor class design. Making the language more flexible to accommodate poor practice is a bad idea &amp;#x200B;
The solution? make isAlive() a public method, then there's no need to redefine the languages to cater for poor design. Why would a parent class ever need to know about any of it's descendants? That's defeating the point of polymorphism.
Java method dispatch rules can be very odd at times. It gets weirder than this when you deal with package-private methods for example.
Upvote for the lack of accessor here. Also, why does opponent need to be its own class ? Why can't it be of class Player ??!?
All of this is just inaccurate FUD against Swing. &gt; Massive RAM usage Have any benchmarks or any kind of evidence to support this? Components: &gt; picture box Using a JLabel is not the correct way to do this. A JPanel with an overridden paintComponent() to draw an image would be the correct way to do this. It takes a handful of lines of code and you can reuse this class in all your projects. Why do you need a custom component for this when it only takes a tiny bit of code to accomplish? &gt; data grid Surely you know about JTable? https://docs.oracle.com/javase/tutorial/uiswing/components/table.html &gt; web browser Legit. However, why do you need a web browser in a desktop app? Help documentation is about the only thing I can think of. &gt; masked text box Have you never heard of JPasswordField? https://docs.oracle.com/javase/tutorial/uiswing/components/passwordfield.html &gt; date/time picker JSpinner does have a SpinnerDateModel that can be used. However, you are better off using a 3rd party library here, there are several. This is no different than web apps though. Most people use a javascript library for this as well. HTML5 does include a date/time picker but browser support isn't universal (http://caniuse.com shows 72% of users are currently using a browser that supports it). &gt; Native-immitating L&amp;F that isn’t quite right (especially font rendering). You complain about native L&amp;F not being quite right but then go on to say you prefer web apps for front-end. What is native about web apps? Every browser renders components differently, even on the same platform! Swing's native look and feels are FAR more native looking than any web app. There is nothing remotely native looking about a web application. There only reason web apps have mostly beat out desktop apps is the zero deployment on the client side. There is no getting around the fact that web apps do have an advantage here and the inferior technology is winning out on the desktop because of this. One area Swing is totally superior to web apps is layout because web apps just have nothing for layout. The fact it is 2018 and web apps don't have good layout managers is just embarrassing. CSS Grid and Flexbox will hopefully bring some sanity to the situation but they don't appear to be in widespread use. For an example of how bad layout is in web apps just use Github's wiki and be totally annoyed that wiki text is in a fixed width layout so no matter how wide I make my browser I still have to read wiki content like I am reading a newspaper article. Compare this to content in Swing's JScrollPane and tell me which is better? 
Definitely write faster with intellij it autocompletes everything.
One of us is getting downvoted here man. I'm not here to prove you wrong, it just doesn't matter enough because you're arguing something that is commonly accepted knowledge. Try a programming language that *isn't* in the C-family and I think you'll see what I'm trying to get at. Languages are far more than just pointers and garbage collectors.
Wow I have always assumed that it is object based
It's really death by a thousand papercuts. So many tiny things add up. It isn't even just about text editing. A couple completely random examples: * Keyboard macros are extremely slow, making them pretty much unusable. These are lightning fast and very usable in Emacs. * I have my Emacs set up to autodetect tabs / spaces in surrounding code and choose which to use accordingly. I can't figure out how to get that set up in IntelliJ and it drives me insane. * `C-l` only centers the current line in IDEA. In Emacs, it toggles between centered, top of screen, bottom of screen. * No magit in IntelliJ. This one really bites. Magit is so much better than IDEA's VCS control. * Can't customize everything. With Emacs, I can easily change anything I want in the entire editor. * Can't create arbitrary window configurations. Sometimes I want six shell windows all open and visible at the same time. Can't do that in IDEA. * Shell integration in IDEA is terrible. The Emacs key configuration is completely broken, preventing you from even copy / pasting inside the terminal and using `C-x o` to move back to an editor window. Really, I just love Emacs and have many thousands of hours invested in it.
You're linking to a wikipedia article that explicitly tells us it's unverified and disputed and claim the contents of this page are common knowledge. Anyone could edit this page and add almost any language that vaguely matches what already is within the list.
I actually hadn't tried this. It does look pretty promising. I'll give it a shot, thanks!
There are other cases as well where an upcast is required. For example, where the code style (for whatever of a variety of reasons this has been decided) is split into an interface and an implementation class, generally speaking people type variables. For example, class ThingManager { // gets instance of the implementation class from configuration ThingManager getInstance() {...}; ... } class ThingManagerImpl extends ThingManager implements WorldManager, PersonManager, AtomManager {...} // somewhere in another class ThingManager tm = ThingManager.getInstance(); // runtime polymorphic is ThingManagerImpl SmallManagerRegistry.register((AtomManager) tm); // only takes type AtomManager, tm compile time polymorphic as Class&lt;? extends ThingManager&gt; 
Well, the restrictions I mentioned (I forgot to say immutability, but that's definitely part of it) are part of the base on which such abstractions lie. Yes, it should be handled for you, but it should use these things rather than detailed coordination and synchronization around shared mutable objects. That last style really appears to be what Java was designed for originally (the early collections like Vector synchronized for all uses!), but it's largely moved on.
The disagreement on that discussion page dropped off several years ago, you're really grasping here huh? You seem to have misunderstood my first post and then strawmanned it into something else entirely. My claim is not that _C is closer to Java than it is assembler_; although I would agree with that sentiment, it's entirely subjective. The *C-family* of languages is absolutely a real concept, and knowing Java will help you learn C++ far more than knowing a "non-C-family" language. This is not subjective. You misconstruing my words for sake of programming ego does not change this.
I think `Player` should be an interface with the `isAlive` attribute and `kill` method; and `Opponent` should implement it. At that point, `kill` should have this interface: `void kill(Player player);` At that point, no cast is required.
The discussion may have dropped off, but nowhere did the conclusion arise "The list is fine as it is". And nope there is no C language family, especially not if there is no definition for what constitutes a member of the family. There are several ways to categorize programming languages, they all result in different classifications. * syntax (the list includes languages with wildly different syntax) * closeness to the metal (the list includes anything from low-level to high-level) * imperative vs functional (again the list includes both) * static vs dynamic typing (again the list includes both) * language types (AMPL is a modelling languages, as far as i see the rest are programming languages) * compilation target (Some compile to machine code, some to bytecode, Nim compiles to C, EcmaScript sometimes is a compilation target itself) This alleged "C Language Family" includes just about everything thats is connected to C in some way which is clearly a mess. Why did Java make the list but not Kotlin? What makes EcmaScript related but not TypeScript? Why is Cg on the list but not GLSL? Why is Rust not on that list? &amp;#x200B; You have yet to define what makes a language a member of the alleged "C Language Family" your only source is a wikipedia page that does not provide any reasoning itself.
Kill probably doesn't need to take in the player, but I could see a use case for it (maybe the player has an active effect that prevents resurrection or something)
I don't see how composition would benefit here. The inheritance hierarchy is all fucky that's for sure there should probably be a base class for both like "Character" and then two subclasses "NPC" and "PC". Composition over inheritance is a good rule of thumb but it's not the end all be all.
Yes, I use Emacs with a mildly personalized cc-mode for Java source files. I have Emacs open as editor, an xterm to run 'ant jar' and 'java -cp path/to/jar my.class.Name', and a browser open on another desktop for API docs. Linux of course, with KDE usually but sometimes XFCE. Before release I load it up in eclipse, check for warnings in the code, and ensure it will build and run. Works OK for me. 
Interesting you bring this up, because for game development they (game developers) generally take it to a whole new level. See: https://en.wikipedia.org/wiki/Entity%E2%80%93component%E2%80%93system Almost nothing is done through inheritance. Instead of having a "player" object, you would have an entity with the player component and it would be interacted with through a player system. In a modern game system you wouldn't generally see a "Character" class with "NPC" and "PC" subclasses.
Bringing ancient text-mode to life on modern systems: [jermit serial file transfer protocols](https://gitlab.com/klamonte/jermit), [Jexer text user interface](https://github.com/klamonte/jexer). Other things are in private repos waiting to be good enough to share someday. 
I deal with code like this... please, for the love of god, don't write code like this. First, a base class should NEVER know anything about a subclass. That introduces all sorts of horrible dependency coupling. Not only that, but if you are going to inherent that base class elsewhere (which you probably would) then all the subclasses now also must know about a subclass of the base class. That really ends up sucking. It makes it hard to move things. It makes it hard to refactor things. It makes it hard to test things. There is no benefit and a ton of downsides. The reason you don't see people upcasting to solve problems like this is because only exceptionally poorly architected code runs into this sort of an issue.
You're up against common industry knowledge here buddy. Like I said before, it's not worth it for me to argue something that is well known to a complete stranger - it just doesn't matter that much to me.
This isn't an oddity but by design. This is just really bad code.
Hey dude, thanks for your sharing!
Without sources your claim of it being common knowledge is just as worthless as if i'd claim its common knowledge that the exact opposite is true. At this point you're either a troll or arguing in bad faith. If you truly cared as little as you keep iterating you'd have stopped replying.
`isAlive` being private means subclasses should not access it. If they actually *should* access it, don't use `private`. Violating a class' design constraints is a bad idea in all but the most esoteric cases. Sometimes it may be *necessary* (e.g. you can't make changes to the parent class) but it's still a bad idea.
Seconded, along with pattern matching.
This is something I’ve wanted to learn about for a long time, and am definitely interesting in contributing to. Shoot me a pm if you’d like to team up!
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
building desktop apps using React Native (with HTML and JavaScript) is the most recent trend over JavaFX which is replaced Swing.
The latter, more or less. JMH itself is a separate OpenJDK project, and this benchmark suite won't even be bundled with the JDK: rather it's merely included in the sources - much like functional regression tests. 
How can you say its spam? Its just information about Java.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
But this is not an upcast. Upcast is when you cast upwards in the hierarchy. A `ThingManager` is not a subtype of `AtomManager`.
Great article. Anyone using Python2 &gt; Python3 to the table to compare Java 8 &gt; Java 11 is not even worthy discussing with... &amp;#x200B;
Right, but `tm` isn't a ThingManager, it is a ThingManagerImpl, implicitly upcast to ThingManager for compile time type checking but it retains ThingManagerImpl as its class at runtime. Casting to AtomManager, which is a superclass via implementation of ThingManagerImpl, is an upcast.
When talking about upcasts and downcasts you look at compile time types. Runtime types are pretty much irrelevant. Consider for instance: Object o = "hello"; Object o2 = o; You wouldn't say that the second line involves a cast from String to Object, right? In your particular snippet, the cast has source type `ThingManager`, and the target type is `AtomManager`, and since `AtomManager` is not a supertype of `ThingManager` it's not an upcast.
&gt; When talking about upcasts and downcasts you look at compile time types (class hierarchy is fixed in compile time). Not how I learned Java, but okay if that's your/the correct definition, sure. &gt; You wouldn't say that the second line involves a cast from `String` to `Object`, right? I wouldn't call them an explicit upcast, but probably for a different reason than you're thinking. First line is an implicit upcast, second is an implicit cast (not up nor down nor whatever). If that's truly incorrect then my apologies, but I've been going by this for years and never been told otherwise before.
My prediction is that the microservice revolution continues with stuff like Micronaut and Istio. On one hand applications are minimized and optimized for fast start and stop and all of the maintenance is pushed out of the application to the environment.
I'm similar, but I typically run my shells inside emacs as well (it makes cut and paste easier if nothing else), and we have a couple static analysis tools integrated into the build process so there's no need to fire up an IDE just to find warnings. I've sometimes used the Eclipse formatter and JDT compiler/analyzer as standalone components in a maven build, without using the IDE itself except to create the configuration file for the formatter.
I predict: Java 17 announced
Reason: As of openJDK 11, openJFX is a standalone package and any tool inside openJDK using it was removed! &amp;#x200B;
Your answer did not fully provide what OP was after. Yes, jlink+ tools will generate a small executable that runs java packages with no JDK, JRE installed by users! A true standalone java package!
We actually had to develop a small project trying out jooq in school :D
Whereever an upcast is used, many base principles are violated: * High Cohesion * Low Coupling * Open-Closed * Liskov substitution Also you might aswell just not use subclasses if you're upcasting. They became meaningless. The whole thing falls apart as soon as you add another subclass too. protected variables / methods are not so bad. You're not responsible what someone else does. Atleast your classes are clean. 
Tl;dr &gt;Value types does not ship as preview in Java 13 
There are many good decompilers (e.g. [Fernflower](https://github.com/fesh0r/fernflower)). You could use them and build the deobfuscation part on top.
What makes the transition from 8 to 11 harder than that from 7 to 8 (assuming you aren't doing Jigsaw stuff)?
Excuse my ignorance but can anyone chime in as to why "microservices and containerized applications are *significantly easier* with Java 11 than Java 8" ?
Not necessarily. Consider case classes that only serve as static type tokens with the entire implementation in the abstract base class.
8. Grind leetcode?
We're talking past each other, and this is getting off topic... I'm not defending the design that led up to the point where an upcast was needed. (I even updated the article to clarify this.) I agree with all the principles you list. However, assuming the situation is already as bad as shown in the snippet in the article, and assuming refactoring the whole thing is not an option, I'd much rather go with an upcast than sacrificing encapsulation. In a sense you *are* responsible for opening up access to object state.
I get it. You much rather write shit code yourself instead of taking the risk that others write shit code.
GUI builders are a great way to get exposed to new ui elements especially when you are new to a language like java. BUT, I found I quickly outgrow builders once I'm familiar with the ui elements.
TLDR before java 11 if java is set to max memory of 8gb, but your container should only be allowed 4gb java will still grab as much memory as the os has available. It doesn't respect container limits. This leads to OOM errors instantly. Google can probably give a more thorough list but that's the biggest pain people complained about. 
Hi Andreas, happy new year! Amazing what people want to argue about, isn’t it? Thanks for providing an interesting example where an explicit upcast is significant. I would never have guessed that there is such a case. On `protected` I would have thought it self-evident that it increases the API surface area of the class, whereas `private` does not, but apparently it isn’t self-evident.
Yeah, I was planning on using fernflower. I tried writing the decompilation part (mostly for Scala support, as Kotlin would likely work) but realized it was not worth the effort. I'll likely add a dsl of some sort so people can add custom languages and plugins (with GUI support).
Hasn't the VM flag to fix this been backported to 8?
Hey! Nice to hear from you! And happy new year to you too! :) Still at Oracle I assume?! Send my regards to the langtools team if you get a chance! :-)
I was not aware of this but I'll take your word for it. Do you mind attaching a source to settle the facts? Nevermind I was too curious and found one that confirms what you said: https://royvanrijn.com/blog/2018/05/java-and-docker-memory-limits/. The above source also confirmed what I suspected, that this is default behavior now which is better than asking every developer in your company to remember to set a flag. But good to know there's an alternative if you can't upgrade. 
To confirm, from [https://bugs.openjdk.java.net/browse/JDK-8146115](https://bugs.openjdk.java.net/browse/JDK-8146115): &gt;A new option -XX:-UseContainerSupport will be added to allow the container support to be disabled. The default for this flag will be true. Container support will be enabled by default. &amp;#x200B;
Yes. Will do!
I _believe_ the backport to Java 8 is either less robust or less comprehensive. But honouring the cgroup memory limit, while a welcome quality-of-life improvement, doesn't warrant the statement &gt; microservices and containerized applications, both of which are significantly easier with Java 11 than Java 8
Honouring the cgroup memory limit, while a welcome quality-of-life improvement, doesn't warrant the statement &gt; microservices and containerized applications, both of which are significantly easier with Java 11 than Java 8
&gt; Great article. The predictions basically amount to tautologies and inertia. There is very little content.
Very cool. :) What school was that?
Hope?
It's kinda like a highschool with a technical focus in Austria. 
Good luck! I recon it won’t be an easy task. Just the fact, that source code is no way near the original after decompilation...
Java 7 code generally worked fine on Java 8. Our entire codebase worked on Java 8 pretty much as is without any changes. Java 8 to 11 on the other hand - for a start various packages have been removed from the core libraries (mostly java EE stuff). Also, some classes and methods that were previously deprecated have gone. Finally, any libraries that touch byte code will need upgrading.
Sounds like a really cool project. I'd be down to join. Also you should hit up /r/ReverseEngineering for some feedback / recruitment.
Actually most up-to-date Java decompilers make exceptionally accurate decompilations. The only case where this may be hard to accomplish _(assuming the code isn't obfuscated)_ is when synthetic members are generated by the compiler to accomplish the effects of syntactic sugar. The author of [CFR](http://benf.org/other/cfr/) has a few blog posts on some of these quirks.
Hmm...I have limited experience with decompilation and bytecode modification (sometimes, I need to replace stuff in 3rd party libs), but I always found decompiled code to be mangled. Also, decompilers produce different(semantically) output even for very simple classfiles. I will read the link, thanks.
My company has been using Spring MVC for years (actually every company I have worked for has used Spring in some fashion, initially for IOC) and more-recently is using spring-boot 2.x for our backend API services. We've also begun using Spring-Data more often and have explored use of Spring Cloud Config with some challenges. Recently I did some work to use spring-data-elasticsearch (actually a mod of it for AWS managed elasticsearch) for making some of our data quickly search-able. The hope would be to use more of the spring cloud components (AND/OR their Netflix predecessors) as we seek to rely more heavily on microservices and eventually move most of them to kubernetes. The 3 industries I've worked in that were utilizing Spring (MVC primarily) are: * The US Department of Defense (tooling used by combatant commands) * The hospitality industry (we built web-based software on spring for managing hotel reservations, front desk tasks, etc) * The utility industry (for managing communication between utilities and their customers)
You're proving nothing but your own ignorance and lack of experience.
Both Intellij and Eclipse can generate a raw `module-infort.java` for you. The generated files have to be proofread though since this process has to use heuristics to handle automatic modules that are not as reliable as generating getters and setters. I'd be more worried about the `opens` declarations since missing declarations might only become apparent during integration tests.
+10 points for netbeans
Well, what are you looking to do with these API's? You can do a lot of different things with this combination. 
I have never heard of these and will look them up
*glares at synchronous JDBC driver*
I am not really a novice, but I am a hobbyist. I do know about the operand stack and bytecode but I haven't read up on linking, loading, and etc.
I want to track all my function calls using instrumentation
That is not a simple task. What reason would you like to do this over using an existing tool like [JVisualVM](https://visualvm.github.io/)?
I find that `requires transitive` helps a lot when creating a hierarchical structure of modules, and helps to reduce the boilerplate as well (as you don't have to require every parent module directly).
Well o was hoping to learn how to use it for more in depth taks by making this
..that might be because little utility apps always end up being more useful than the business behemoths that they were designed to assist. &amp;#x200B; Dev: "We'll write this small util that will do the special thing. No need for it to be fancy. It'll only ever be run once" &amp;#x200B; \[years later, small util is run almost daily...\]
:) netbeans is the best!
Sorry what I meant are that these are highly esoteric APIs where dragons be. If that helps. Such advanced rarely used APIs are not well documented in any language and you have to fend for yourself. Part of being a programmer is being able to experiment and create a solution, from reading the documentation, screaming, and trial and error, but mostly screaming.
Well looks like I'm partly there haha. 
Professional tip. When making a Boolean expression, you don't need to add "== true" .if you have a variable named foo and foo = true. if(foo) is much cleaner than if(foo == true). - Random guy on the internet. Completely biased tip. Use Jetbrains products. Like Idea.. blows netbeans out of the water. 
I appreciate the advice! Always looking to learn more :) I really like netbeans I've played with a few other ides but I always wind up back in netbeans :) 