I love this language so much but it should be forbidden by law to create GUI apps in Java. 
https://news.ycombinator.com/item?id=10323103
Yay, yet another spam account! domain submitted from|count|% :-|-:|-: [iotenthu.com](/search?q=%28and+site%3A%27iotenthu.com%27+author%3A%27redgansai%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|13|72% [gansaiwritesat.wordpress.com](/search?q=%28and+site%3A%27gansaiwritesat.wordpress.com%27+author%3A%27redgansai%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|5|28% subreddit submitted to|count|% :-|-:|-: [programming](/r/programming/search?q=author%3A%27redgansai%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|4|22% [Entrepreneurs](/r/Entrepreneurs/search?q=author%3A%27redgansai%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|3|17% [java](/r/java/search?q=author%3A%27redgansai%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|11% [devblogs](/r/devblogs/search?q=author%3A%27redgansai%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|11% [datascience](/r/datascience/search?q=author%3A%27redgansai%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|6% [algorithms](/r/algorithms/search?q=author%3A%27redgansai%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|6% [virtualreality](/r/virtualreality/search?q=author%3A%27redgansai%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|6% [interesting](/r/interesting/search?q=author%3A%27redgansai%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|6% [ecommerces](/r/ecommerces/search?q=author%3A%27redgansai%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|6% [Internet](/r/Internet/search?q=author%3A%27redgansai%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|6% [MachineLearning](/r/MachineLearning/search?q=author%3A%27redgansai%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|6%
November 6-7 will be held in Kiev JavaDay [1] - the only one of its kind in Kiev conference of this magnitude. For the participants trained more than 45 technical presentations from over 40 speakers world-wide. This is an excellent opportunity to learn about the latest trends, get insight into the practical environment and make new useful contacts. Among the speakers, whose names were lit at JavaOne, JPoint, JEEConf and other international conferences, such as the stars Venkat Subramaniam, Marcus Lagergren, Arun Gupta, Maurice Naftalin, Robert Field, and many others. At present this conference will be unforgettable also because in the online mode will make himself James Gosling - the author of the programming language Java! Each visitor JavaDay unique, but they all share a passion for new knowledge and desire to learn new things and improve their level of professionalism. Therefore, we have prepared a very interesting and rich program. We will talk about: • Core JVM platform and Java SE (Java 8) • Languages ​​JVM and new programming paradigms • Web development and Java Enterprise technologies • Software engineering practices • Architecture &amp; Cloud • BigData &amp; NoSQL As the experience of the previous JavaDay the event, the event promises to be a bright and all conference attendees expect the sea of ​​surprises, positive charge and, of course, valuable knowledge, exchange of experience and pumping skills! Also, be sure to view the video from Lviv JavaDay [2]
JavaFX is pretty awesome. The only disadvantage so far is, that I can't use Lombok for the data model if I want to use the bindings framework.
All software I've used so far which was written in Java, was slow as fuck.
I stopped using Lombok a long time ago. JavaFX isn't the only library it has trouble with.
I've used JavaFX and like it a lot. I write more webapps now but whenever I have something that needs to go on the desktop it does the job. I write a lot of basic commandline/jar programs for myself but whenever a co-worker is interested in it I'll write up a basic GUI that interfaces with the program for them to use. I really like the .CSS styling it uses as well, very customizable. edit: There are other people recommending Swing, JavaFX is the more modern GUI builder. 
Tbh, I'm not down with HATEOAS
[removed]
The IntelliJ IDEA community edition code is now available at Codota, where you can search and navigate it like in your IDE with queries such as "Find Usages", "Go to definition". [Have a look!](http://www.codota.com/xref/#/intellij/findUsages?query=com.intellij.openapi.actionSystem.AnAction)
You are weak as troll. Have an old fish: &lt;°(((((&gt;&lt;
Been using POI quite alot at work over the last years. Awesome library that has always worked flawlessly, keep up the great work!
None of the GUI builders are immune to this. If you're not using the native code editor (that prevents you from editing generated code), then you're going to run into trouble. ... Unless you use JavaFX with FXML...
and FXML (ui xml descriptor) being basically the same thing, but standardised, thus uniform across all IDEs. Right?
No. FXML is not used for code generation. The framework generates the GUI directly from the document, and performs late bindings to your code after everything is loaded. This means that you can technically make changes to the GUI without having access to the source code. Assuming, of course, that you require no additional functionality.
Route files because I can see the entire API at a glance.
I prefer inline routes. I think of the routes as properties of resources - I can't have a resource without a route or vice versa. When I'm trying to figure out what a given resource does, it's useful to have all the information right there in front of me. However, the route-file view is really nice for getting an overall picture of the application. One cool feature of Dropwizard is that it prints all routes on startup. The output is very similar to your Play example. When we (my coworkers and I) switched from Dropwizard to plain Jersey on one project, we missed the print-all-routes feature enough that we had to re-implement it ourselves. I highly recommend the same to anyone using inline routes now, if you don't have it already.
I'm not talking about the language, I'm talking about the GUI libs, all of them suck balls in hell.
As a security guy, I want to know your entire attack surface at a glance, preferably mapped straight to the relevant controllers. I'd rather not have to search for a combination of paths in XML files, multiple interfaces, and decorators, thank you very much SpringMVC. And heaven help us if you just have magic routing by convention. 
Use javadoc then
You're getting a lot of hate, but that comes with the territory. In my shop, we treat security as a consumer of our API design (among other things). Our developers bitch and moan, but so do our security guys, which tells me that we've found a reasonable compromise.
I would love to learn how to use javadoc to get all the routes from Spring MVC in one place!
You've got a good security team if they even care about your API design. 
That makes me happy. 
Ironically, the code is written in Java but the post is hanging around other programming reddit :-)
How dare you hardcode that space? And is that LTR or RTL? /conniption
I prefer inline routes. I like being able to have a 'module' (for example /user) define a root route and the methods in that class define the sub-routes. This makes it very easy to create librararies that can be reused across projects.
Insert the list as a model attribute, then iterate [using a for each loop](http://www.tutorialspoint.com/jsp/jstl_core_foreach_tag.htm) within your list tag.
thanks this worked for me and was very simple.
I don't actually need them all to be in one file, I just want to be able to list them all somehow. In rails, I can ask my client for "rake routes" output and I'm fine. If I read the source I would be struggling with an awkward mix of magical convention-based routing and declarative, but there's a tool that always shows me every entry point, so I'm good. If your framework just uses annotations, I can easily grep them all and find them. The challenge comes with things like SpringMVC where I have to know how to track down all the routes created by the following handlers: BeanNameUrlHandlerMapping, ControllerBeanNameHandlerMapping, ControllerClassNameHandlerMapping, DefaultAnnotationHandlerMapping, RequestMappingHandlerMapping, RequestMappingInfoHandlerMapping, SimpleUrlHandlerMapping, WebSocketHandlerMapping If there were a single tool that could enumerate all those entry points and let me find all the mapped URLs, I'd be happy. And in fact there might be, but I just don't know about it. So for now, when looking at SpringMVC apps, I spend a lot of time making sure I understand how every URL is mapped. So I do agree with your code smell analysis. Large apps shouldn't all be coupled to a single file. But there should be a quick way to find all the entry points.
A nice site showing how to use many JDK classes.
I'm the only one who really hate the interface of this library ? 
&gt; why Java is considered to be the superior language that it is. It isn't really, once you've worked with a lot of programming languages you start to care less about each specific language. Going from ruby to java is a huge jump fyi, they are basically opposites. &gt; It takes 10,000 years to do something in Java that would take a couple of minutes in Ruby. That would also be due to you just learning Java. Java is fast and reliable, and has a large standard library. It isn't cool and exciting like Ruby is. It is mainly taught in schools because of its wide use, that doesn't really mean its better or worse than X language for whatever project you are using. Java has been around for a long time too, so "modern" java vs "enterprise" java vs "university" java is very different. For the record I use and like both languages.
The verbosity doesn't do much for the compiler. More elegant syntax constructs could be developed that the compiler front end could translate to identical byte code. However, the committee which guides the language has zero interest in providing what they see as meaningless syntactic sugar that doesn't target the lowest common denominator. I don't think you'll find many who believe it's a superior language, but it's currently hands down the superior platform. You aren't driving a horse drawn carriage, your new Ferrari just has reigns instead of a steering wheel and your gear selector looks like [this](https://upload.wikimedia.org/wikipedia/commons/8/86/Cash_register,_built_1904_in_Ohio.jpg).
Java was created at a time when C++ was causing a lot of headaches. One of the main design goals of Java was to avoid the hardships of C++. And I believe they're very successful at that. I think I read this on this book: http://www.amazon.com/Seven-Languages-Weeks-Programming-Programmers/dp/193435659X Maybe someone who worked with C++ can give us some feel on how was it back in the days? I can imagine not having stacktraces be a real hair puller. But yeah, there's a lot of things too verbose in Java. But now that I'm working with Scala, I appreciate Java a lot more.
- Easy to learn - Easy to read - Easy to modify - Vast library ecosystem - Great performance Ruby on the other hand is easy to write, difficult to modify other people's code, and has very poor performance for scripting languages, let alone relative to Java.
Code in Java may be a little longer, and initial setup for a project may take a while, but once you dive into development it's much easier and faster to write in Java than in any other language I've used (except maybe C#, but it's strapped to Microsoft, so it's a no-go). All the initial setup is a small price to pay for the flexibility that you'll find useful later on. Some of the design decisions that lead to longer code are actually very logical. For example, there's no operator overloading in Java because of the fears that adding it will start a fire of operator overloading abuse like in Scala.
Java is statically typed. Ruby is not. Which means every variable is given a type, and the compiler checks what you are doing to a variable, is allowed. It also gives the IDE hints on what to autocomplete, and how to find source immediately for a particular method. To be honest, I hated java and thought the same as you when coding it using textpad or equivalent. However, give me a modern IDE like Eclipse / netbeans, intellej, and I will run rings around any dynamically typed language in terms of productivity. Yes, the code will be longer, and more wordy, but I have my IDE on my side. 
[removed]
Ahhh - Thanks. I edited my post to change it to statically...
&gt; I do realize that it is fast and scalable but this has got to be the most painful and unnecessarily verbose language I've ever encountered. You're doing it wrong. I use both Java and Ruby and in many instances Java is less painful than Ruby. Java is all about the editor. Use the editor to write your code. Constructors, getters &amp; setters, should all be created by the editor. If you're typing the same boilerplate stuff over and over you're not using your editor properly. Java without a good editor would be hell. Eclipse and Intellij are the two popular choices. One huge difference is working with other peoples code. As a statically typed language it's easy for the IDE to show you all the methods available to you along with documentation. When programming with Ruby I'll often have several web pages open reading through docs of varying quality. When programming in Java I rarely have to leave the IDE. Embrace the Java way of doing things and it'll be much less painful. Don't try and use it like Ruby. They're two different languages. Both have their advantages, both have their pain points. You should check out some of notch's lundum dare videos to see what Java programming should feel like. He's using Eclipse. https://www.youtube.com/watch?v=rhN35bGvM8c 
Did Mutation testing with PIT 6 Months ago. Made writing Unit tests sooo much more fun/rewarding! Would recommend it to everyone.
Just curious, what do you appreciate about Java now that you moved to Scala? Usually I hear the opposite stated.
Interestingly, unless I missed it, the author doesn't mention one pitfall of mutation testing that academics are often very concerned with - equivalent mutants. These cannot be killed by any possible test case, because they don't change the externally observable behaviour of the program. So, the tester is left with a mutant they waste time trying to create a test to kill. I haven't looked in depth into the operators of PIT but I find it highly likely such mutants could be produced by them under certain circumstances.
The experience of all the people using mutation testing in the field that I've spoken to is that equivalent mutants aren't actually a big problem in practice. The mutation operators in PIT are designed to try to make them rare. Although it can't guarantee not to generate them they are infrequent enough in many codebases (and I think their frequency is tied to coding style and domain) for people to break the build on less than 100% mutation coverage. When you do encounter equivalent mutants a subset of them can actually be helpful - often (but not always) the code can be re-expressed in a way that does not generate an equivalent mutant, but is cleaner. If you have a large number of surviving mutants this still leaves you with the effort of assessing surviving mutants to see if they're equivalent. This would be a problem if mutation testing were applied as an after the fact quality step (as much of the literature assumes), however the teams using it successfully don't do this. Instead it's used by the development team as they grow the code to catch their mistakes. This way the amount of code that needs to be mutated at any one time is small and mutants are examined in small batches by someone that understands the code. 
Following code will result in: int a = 9/0; Answer: No Error: a is NaN. Yeah. Totally.
Based on MOO 1 or 2 ? I really loved MOO 2, and I only know two good successor games on this style : Imperium Galactica 2 and Sword of Stars (with all expansions) . I saw a few images and looks promising.
bytecode is easier to read than assembler Java is 1000 times simpler than C++14. 
So, do you really programmed on assembly code to say that ? Plus that Java is more simple is a fallacy. Throw examples, please...
While I won't dispute that this is a hellishly interesting way to make code and tests mutually "kick their tires", another part of me wonders: who on earth is funded well enough to be able to afford this level of effort? Most corporate accounts I see these days are still railing against the idea of test suites as part of paid deliverables - stupidity, of course, but they see the 20% or so time spent on writing tests as waste. One client actually trotted out: "If your developers would just code it right the first time, you wouldn't need to test it over and over again!"
I sometimes have a look at the assembly code. Java is simpler two examples. * What does x=f(y); means? In Java this is simple no problem with the y parameter, no problem with the assignment. In C++ what does it means ? What are the ctor that are called ? That's very difficult to say without knowing the class of x we can have ctor, copy ctor, move ctor, operator=, operator=(&amp;&amp;) so it is very hard to read. We can also have only pointer assignment. In addition you can have automatic type conversion. * ways to define an array ? in Java: int[] or ArrayList whereas in C++: int*, int [], vector, array, array_view So you can read a Java code faster. Reducing the number of lines usually degrades the readability and increase the maintenance time. 
[**CLICK HERE TO WATCH!**](https://plus.google.com/101610166474347948929/posts/hwz19p66Qtn) full movie, watch, watch for free, watch online free,free watch movie,how can i watch online for free,how to watch free,how to watch online,how to watch online for free,how to watch online free,how to watch online full,watch ,watch 2015,watch 2015 for free,watch 2015 for free online,watch 2015 free,watch 2015 free online,watch 2015 free online streaming,watch 2015 full,watch 2015 full movie,watch 2015 full movie for free,watch 2015 full movie free,watch 2015 full movie online,watch 2015 full movie online free,watch 2015 movie,watch 2015 movie online,watch 2015 online,watch 2015 online for free,watch 2015 online free,watch 2015 online free full movie,watch 2015 online free no download,watch 2015 online free no sign up,watch 2015 online free without download,watch 2015 streaming,watch (2015) full movie,watch for free,watch for free 2015,watch for free in hd,watch for free online,watch for free online 2015,watch for free online in hd,watch free,watch free download,watch free full movie,watch free hd,watch free in hd,watch free movie,watch free no download,watch free on line,watch free online,watch free online 2015,watch free online full movie,watch free online no download,watch free online no sign up,watch free online streaming,watch free stream,watch free streaming,watch full,watch full movie,watch full movie 2015,watch full movie 2015 free,watch full movie free,watch full movie free online,watch full movie hd,watch full movie online,watch full movie online free,watch full movie streaming,watch full movie streaming online,watch full video,watch movie,watch movie 2015,watch movie 2015 online free,watch movie for free,watch movie free,watch movie free online,watch movie online,watch movie online for free,watch movie online free,watch online,watch online 2015,watch online 2015 free,watch online 2015 free streaming,watch online for free,watch online for free 2015,watch online for free full movie,watch online for free no download,watch online free,watch online free 2015,watch online free full,watch online free full movie,watch online free hd,watch online free no download,watch online free now,watch online free stream,watch online free streaming,watch online full movie,watch online movie,watch online now,watch online streaming,watch streaming,watch streaming movie,watch streaming video,watch free ,watch online 
In Java you don't need to look at the declaration of x and f() and y to understand. In C++ you need to look at all the constructor int* can point to an array and in a HUGE number of code int* refers to an array. Do not forget the new array_view too! So, there are a lot of ways to express the same thing. This complexifies for nothing. Try to explain to people the difference between a C++ Reference and a pointer. There are both implemented as pointers! The abstractSingleton bla bla is not usual in Java. It is not the standard library. You could write the same in C++. In C++ there are a lot of question you should ask that you don't care in Java. When you have f(x) there are two possibilities either x is a basic type and it cannot be modified by the function, or it is a reference and it can. I do not need to look at the signature of the function. In C++ I need to look at it (because it can be int&amp; or MyClass (without &amp; or pointer)). Thus, it is quite less readable. 
[**CLICK HERE TO WATCH!**](https://plus.google.com/101610166474347948929/posts/hwz19p66Qtn) Ant-Man full movie,Ant-Man watch,Ant-Man watch for free,Ant-Man watch online free,free watch Ant-Man movie,how can i watch Ant-Man online for free,how to watch Ant-Man free,how to watch Ant-Man online,how to watch Ant-Man online for free,how to watch Ant-Man online free,how to watch Ant-Man online full,watch Ant-Man,watch Ant-Man 2015,watch Ant-Man 2015 for free,watch Ant-Man 2015 for free online,watch Ant-Man 2015 free,watch Ant-Man 2015 free online,watch Ant-Man 2015 free online streaming,watch Ant-Man 2015 full,watch Ant-Man 2015 full movie,watch Ant-Man 2015 full movie for free,watch Ant-Man 2015 full movie free,watch Ant-Man 2015 full movie online,watch Ant-Man 2015 full movie online free,watch Ant-Man 2015 movie,watch Ant-Man 2015 movie online,watch Ant-Man 2015 online,watch Ant-Man 2015 online for free,watch Ant-Man 2015 online free,watch Ant-Man 2015 online free full movie,watch Ant-Man 2015 online free no download,watch Ant-Man 2015 online free no sign up,watch Ant-Man 2015 online free without download,watch Ant-Man 2015 streaming,watch Ant-Man (2015) full movie,watch Ant-Man for free,watch Ant-Man for free 2015,watch Ant-Man for free in hd,watch Ant-Man for free online,watch Ant-Man for free online 2015,watch Ant-Man for free online in hd,watch Ant-Man free,watch Ant-Man free download,watch Ant-Man free full movie,watch Ant-Man free hd,watch Ant-Man free in hd,watch Ant-Man free movie,watch Ant-Man free no download,watch Ant-Man free on line,watch Ant-Man free online,watch Ant-Man free online 2015,watch Ant-Man free online full movie,watch Ant-Man free online no download,watch Ant-Man free online no sign up,watch Ant-Man free online streaming,watch Ant-Man free stream,watch Ant-Man free streaming,watch Ant-Man full,watch Ant-Man full movie,watch Ant-Man full movie 2015,watch Ant-Man full movie 2015 free,watch Ant-Man full movie free,watch Ant-Man full movie free online,watch Ant-Man full movie hd,watch Ant-Man full movie online,watch Ant-Man full movie online free,watch Ant-Man full movie streaming,watch Ant-Man full movie streaming online,watch Ant-Man full video,watch Ant-Man movie,watch Ant-Man movie 2015,watch Ant-Man movie 2015 online free,watch Ant-Man movie for free,watch Ant-Man movie free,watch Ant-Man movie free online,watch Ant-Man movie online,watch Ant-Man movie online for free,watch Ant-Man movie online free,watch Ant-Man online,watch Ant-Man online 2015,watch Ant-Man online 2015 free,watch Ant-Man online 2015 free streaming,watch Ant-Man online for free,watch Ant-Man online for free 2015,watch Ant-Man online for free full movie,watch Ant-Man online for free no download,watch Ant-Man online free,watch Ant-Man online free 2015,watch Ant-Man online free full,watch Ant-Man online free full movie,watch Ant-Man online free hd,watch Ant-Man online free no download,watch Ant-Man online free now,watch Ant-Man online free stream,watch Ant-Man online free streaming,watch Ant-Man online full movie,watch Ant-Man online movie,watch Ant-Man online now,watch Ant-Man online streaming,watch Ant-Man streaming,watch Ant-Man streaming movie,watch Ant-Man streaming video,watch free Ant-Man,watch online Ant-Man
MOO1. Everyone and their indie dev grandma is making a MOO2 clone. I happen to prefer MOO1.
Now for why I don't like spring. http://docs.spring.io/spring-integration/reference/html/twitter.html
&gt; Verbosity makes reading code easier. Absolutely not true IMO! I find static typed groovy code much more readable than Java code. It's more to the point, more functional (true closures), it has properties (so no need for getters setter, they're there automagically). I'd very much like it to become way more popular. What makes Java great is the following: #language/runtime: - Open source / not tied to one vendor (as opposed to c#) - Portable (write once, run everywhere) - Object oriented - Garbage collection - The concept of the classpath - As of recently (java 8): decent support for functional programming - Artifacts for deployment (jar / war / ear ), very important imo in an enterprise setting #ecosystem: - Dependency management (gradle, maven, ivy: take your pick) - Servlets (and containers like tomcat) - Lots of open source libraries - Decent frameworks (like grails / jsf+primefaces, play, ..) and last but not least: - Fast
Java IDEs will do everything for you. As long as you don't have a sense of craftsmanship, that's fine. If you dislike Java's syntax and idioms, though, I recommend Kotlin. It's another JVM language that sits between Scala and Java, and it's produced by JetBrains, the people behind the IDEA IDE. It has the things you expect of a modern language (if, case/switch, etc are all expressions) while at the same time easily interoping with regular Java code.
 String text = "bla"; The word "text" here is a variable name. The variable is not a primitive like int or double, it is instead of an object type. Therefore, the word "text" here is an object reference. If you give it to any method, you don't give the object to the method, you only give the reference to it to the method. Btw., you're in the wrong subreddit, try /r/javahelp or /r/learnjava or /r/learnprogramming. Also, these questions https://www.reddit.com/r/java/comments/3nl4sr/what_is_the_difference_between_an_object_object/ are extremely basic fundamental stuff. And you should certainly not bombard people with posts.
Duplicate from [What is the difference between an object, object reference, and an object variable?](https://redd.it/3nl4sr) Why do you feel the need to start a new thread? Also, it's the wrong subreddit. This question should go in /r/javahelp as is outlined in *plenty* places in the sidebar, the big red banner when hovering over the "submit text" button, in the "submit text" text entry box.
so does this operating system have a package manager too?
What's the extra cost involved? I'm in they process of getting mutation testing integrated into our workflow at my work and it's just supplementing how we write unit tests, making us write better ones.
I guess I should have been more verbose.
I use java spark, Its stupid simple to set up and use. https://github.com/perwendel/spark 
One of the big keys is the right IDE and libraries/frameworks. The IDEs make it wasy to type a few characters and then ctrl-space away, or use [templates](https://dzone.com/articles/effective-eclipse-custom-templ) to accomplish what you need. Java is typically at a lower level than most languages are (as a result it has more flexibility and performance), and when you want the convenience that the scripting languages offer, you have to know the right library to grab. So things like Lombok, Spring Boot and Guava give you huge benefits.
It's hard to find good benchmark about performance these day. Thought, my personal preference go to jersey since I can make my own architect choice about stuff like adding optional, using a .war or an another package, etc. But if you work with a new team, Dropwizard will probably get you on the right track.
&gt; The term you think of is "statically typed", not "strongly typed". Ruby is in fact strongly typed, though dynamically – you cannot call a method on a value whose type does not have that method. You're talking at a primitive level, Actually ruby is duck typed. and you lose safeguards associated with that. comment.create( Post post, User user) could easily mean the arguments are swapped if for example, both of them implemented getId() and that's what the method is actually using. Duck typing is stupid for serious work, great for one off shell scripts.
It really depends on what your application will be doing. Is it a game? Is it an enterprise application with many forms? How much data will it show and how often does it update? Where do you want to deploy it? Maybe you shouldn't worry too much about performance and scaling at the beginning (again depends on your situation). First make it work and then make it fast - the opposite order usually doesn't work so well.
Even in Java, there is nothing to keep you from writing a `create(String post, String user)` method. Or a `create(int postId, int userId)` method. Of course in this particular example, we'll usually use domain objects in Java, but there *are* methods which suffer from this even in the standard library. We should keep our terminology straight.
You are worried about the wrong things here. Speed of the framework isn't going to be a big deal for a LONG time. Your software and system architecture will be a much bigger deal for scaling. Design your app to scale out and use the easiest framework that you and other developers working on the app will be familiar with. Those benchmarks don't mean anything. It's a "Hello World" app that is ran and does a DB query. 
I *hate* object initialization.
Scaling with any framework shouldn't be a problem, you just have to make sure all your session or cookie related data is replicated. I pay attention to those benchmarks, but be aware that humongous websites have been run on ruby on rails, yet they hold up fine. Hell, reddit I think uses web2py, and I'm not sure what back end, but its probably not even within the top 25. If you need performance that good, which 99/100 times you don't, I'd use cpoll. Other than that, any of them should work just fine. I'd care more about the speed of your database and caching, than worry about whether spark is fast enough. Enough of us here have used it without problems. 
This is an interesting enhancement. The article is slightly wrong, or at least vague enough to warrant clarification. The implementation of *Comparable* is only used when two unequal objects return the same hash code. If there are collisions between different hash codes, the tree is ordered by the actual hash code. From a comment at the top of HashCode.java: &gt; Tree bins (i.e., bins whose elements are all TreeNodes) are &gt; ordered primarily by hashCode, but in the case of ties, if two &gt; elements are of the same "class C implements Comparable&lt;C&gt;", &gt; type then their compareTo method is used for ordering. 
&gt; We should keep our terminology straight. I agree. So Ruby is not strong or statically typed. It is duck typed which means weak and dynamic typing.
I've said it before, and I'll say it again - make sure to check out https://playframework.com
what? what kind of a question is that?
Writing code is the easy part. Reading, understanding, extending, maintaining and fixing code is the hard part. It's much easier to write slow, buggy, inscrutable code in Ruby than it is in Java, and all that increases the time spent doing the worst programming task: debugging. In other words, yeah maybe you can do something in Ruby in 10 minutes, but you'll spend 10 hours fixing it later. In Java it might take you 20 minutes, but the odds you'll have a crazy bug or performance problems are much lower, and even if you have to go back to the code later, you'll spend much less time because of all the additional structure.
I wonder what the reason is for converting back to linked list if the bucket shrinks? The conversion is probably relatively expensive, so the rare case where the bucket keeps growing and shrinking around the transition point could be pretty slow.
Of course. That's the very reason for LinkedHashMap's existence. It maintains an additional data structure on top of a HashMap that maintains the order. So the performance improvements may apply to LinkedHashMap as well.
I know it's a joke but it's still a bit disingenuous considering even vim has at least four plug-in managers.
Yes, I can acknowledge that. I guess I was referring more to a dedicated blog post and a submission here. It feels "slow news day"-ish to me.
I think [this talk](https://www.youtube.com/watch?v=Dq2WQuWVrgQ) by Brian Goetz (current Java language architect) explains it best. You must also understand that Java was never designed for the kind of projects Ruby is best for. Even in 1992 those projects were done in Visual Basic and other "RAD" tools (that's what we called them then). Java is designed for large, "serious" projects, that are meant to last for many years, and be maintained by many people. It's intentional verbosity is a cornerstone of [its design](http://www.win.tue.nl/~evink/education/avp/pdf/feel-of-java.pdf) (a seminal document), which was a reaction to more expressive "serious" languages like C++, that seemed very appealing at first, but proved too hard to read and maintain after a few years (when the staff had changed).
cool project.
Yeah very cool!
LOL. So wrong.
Very nice, I'm a big fan of material design. Is it likely to hit the maven central repository anytime soon?
hopefully soon.
&gt; Easy to learn &gt; Easy to read &gt; Easy to modify All subjective. 
The frameworks you are looking at are really not suitable for your typical enterprise application. They do not have the longevity or community to know that they will be around for the life of the application. I thought you were working on a personal project. For an Enterprise application go with Java EE or even Spring.
Wouldn't /r/programming be more suitable for this as it is not specific to Java?
I would guess memory. a map of a bunch of 2 element maps could be a lot more memory.
so good hash codes are still o (1). bad hash codes improved o (n) to o ( LG n). aka keep fast case fast but help the edge case.
 1) Release proprietary extension to open platform. 2) Wait for suckers to get caught -spread hype -relabel "fixing the most glaring deficiency" to something akin to "providing wondrous, price-less value"). 3) Milk said suckers dry !!!
Easy to read = easier for someone who didn't write the code to maintain it. Zero value for personal projects, tremendous value for business.
&gt;Deirdre Saoirse Moen is a science fiction and fantasy writer, photographer, and graphic designer from Menlo Park, California. &gt;thirty eight years I think they just call that retirement. &gt;http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags &gt;parsing xhtml with regex You've made a terrible terrible mistake.
I suggest you use quotation marks next time.
- An object is the actual state+type for an instance of a class on the heap. - A reference is an abstraction for the address on the heap where that object is. - A variable is a named symbol that you can assign a reference (or a primitive value) to.
In what way did Oracle screw up? Java EE 7 and Java SE 7 + 8 were pretty solid releases.
Go for JSF, it's the fastest full featured one out there (only plain Servlets and JSP will beat it), comes with Java EE, has plenty of external libraries (PrimeFaces, OmniFaces, PrettyFaces, you name it) and is a joy to work with.
[removed]
&gt; The return type encodes that the value might not exist, so you are forced to use ifPresent and orElse to obtain the value. Otherwise, you can expect that the return value must exist. Well... &gt; Of course, this helps if the type system forbids null references, but at least an API with Optional offers a clue. It offers a clue, but not a guarantee. The problem is in a big project it's nearly impossible to use just components that strictly use Optional and never use null. So you should still expect null to show up out of nowhere in your references. &gt; Are they? I'd expect that the JVM would help out quite a bit, if this is a common abstraction. Right now I don't know of the JVM doing absolutely anything about it. It's a normal class.
&gt; It offers a clue, but not a guarantee. Which is better than nothing. &gt; The problem is in a big project it's nearly impossible to use just &gt; components that strictly use Optional and never use null. Hopefully a big project is divided into components. And hopefully the components that use `Optional` use it sensibly and never use null. And thus, when you interact with those particular components, you can trust common sense. &gt; So you should still expect null to show up out of nowhere in your &gt; references. Again, better than nothing. &gt; Right now I don't know of the JVM doing absolutely anything &gt; about it. It's a normal class. The JVM already does a lot of optimizations to normal classes. Such as skipping allocation entirely and directly hoisting fields into registers. If `Optional` is designed the right way, it would already benefit. Since Brian Goetz was involved, I am fairly certain performance concerns were not overlooked.
@Nullable is another way of capturing nullability in the type system. Combined with null safe traversal (elvis operator), you can get the same effect as `Optional`. The nice thing about `Optional` is that it already works with streams without requiring a syntax change to the language.
&gt; Which is better than nothing. JavaDoc saying "Returns Foo or null" or the various assortments of @NotNull annotations are just the same amount of better than nothing, but without the forced pseudo-functional abstractions.
+1 for maven support. Awesome library OP keep the work!
&gt; Without having a corresponding NonOptional Your point doesn't make sense. `NonOptional` is the default. Common sense *should* indicate that when you're given a value, that the value actually exists. The existence of `null` breaks common sense. `Optional` is a box that says there might be something in here or there might not be. The only way you'll find out is to open the box. &gt; Not everything is stream semantics, or ifPresent() and orElse() &gt; wouldn't exist. Which is fine. These follow another convention of Java's type system. That is, methods on strongly defined types. `@Nullable` breaks that convention, leaving it to the compiler to implement the hint in non-obvious ways. In fact, `null` is a bizarre value in Java. Unlike every other value in Java, it has no type!
Awesome awesome awesome! Looking forward to maven support :)
That's really cool, thanks
&gt; O(1) for appending to end of linked list You can't just append to the end, you first have to check that the item doesn't exist. This is O(n) in the pathological case where every hash collides. So the idea is that instead in high collision conditions (i.e., approaching the pathological case) you swap to a balanced tree and get O(log n) insertion.
A lot of things *may* happen. Microsoft *may* drop C# next month, who knows? Rumblings? An unnamed source not verified by anyone claimed Oracle lost interest. And that's already enough for you to say they've already screwed up? So if I claim I worked at MS, then claim MS lost faith in C#, then they've already screwed up? :X 
I love it! Thanks
It does look nice. Where is JavaFX used nowdays? I used it when the 2.0 or whatever came out and I definitely liked it more than Swing, but I'm not sure who is using it these times..
&gt; Maybe someone who worked with C++ can give us some feel on how was it back in the days? I can imagine not having stacktraces be a real hair puller. Yeah, that was one of the worst. Program just crashes - where? why? Good luck. With Java it can be confusing what led up to it, but you always at least have a stack trace that tells you where it happened to start from. Another good one was memory management. Your program has a memory leak and has to be restarted or it runs out of ram. Where is it happening? Well, it could be any of your objects on the heap - any objects that you have a pointer to rather than it just being a local reference. You didn't have reflection at runtime either - java lets you build a lot of tools that can figure out object names and object properties. C++ did not, and thus there were entire categories of tools you could not build. Stupid stuff to, like lets say you get an array in C++. You have no idea how big the array is, you have to pass it as a second parameter. In Java that's a property you always have (I don't remember if using the C++ standard library made that less of a problem or if they stuck with that pain for performance reasons). In C++ you had 2 files for every class - a header file and source file. In one file you'd declare method signatures, in the other file you'd actually implement them. Just a pain the !@#@!. In Java they're just in 1 file and that's it. The biggest source of headaches in C++ was anything related to memory addresses. So you get an array but it doesn't automatically come with a size. So let's say you have the size passed in as an extra variable, but something is screwed up. In Java, you try to access memory location that's outside the size of the array, you can an exception. You know right away. In C++, it just works fine giving you crap data from who knows where back once you're outside the array size. There were a whole bunch of things way, way worse than writing getters and setters to deal with when programming C++.
ad?
Pay close attention to who is teaching the class, if they work for oracle you might actually learn something about java. If the person works for some other company, you will most likely be sold some library or tool that works with java.
As Bruce Schneier said "Security is a process, not a product." Whatever language you pick will have security strong points and probably some flaws.
My perspective as a framework maintainer (http://3wks.github.io/thundr/) is that application discoverability and testability is vastly improved by having routes in a small set of discoverable locations, preferably in code. The experiences that led me to design like this is several fold: * Discoverability makes a large difference in the time it takes to ramp team members onboard and * the time it takes for a BAU or maintenance team to find and fix issues down the road * Fragmented route definitions (such as an annotation at class and method level) makes even full text search an infeasible solution on a project * Routes defined outside of code are not testable without jumping through far too many hoops * Relationships between resources and entities are not obvious when routes are spread across multiple locations * Relationships between resources/entities and cross-cutting concerns like request filters and security rules are not clear * Understanding application conventions (such as /static/**, /admin/** being secured, /api/v1/** etc) may not be obvious, developers tend to follow the convention of the controller/endpoint they copy/paste as a starting point. * Tooling support in IDEs is essential for productivity - ctrl-click is king. This requires a 'drill-down' approach and a one-stop shop for this a great fit. 
It would be awesome, but that ship has sailed. There is way too much friction, even with an app store, to install a desktop app for the average user. Webapps are all about lube.
The project LICENSE file says GPL 3
It's great question, as a lot of the other people coming from other languages dont see the power of things like Maven. pip does one aspect of maven, and it does it poorly. Pip normal use case: * pull in the newest version * of some platform specific dependency (lots of them are python wrappers around c libs) * into a central local repository * from a central remote repository * where most of the libraries are in various states of disrepair, abandonment and redundancy (notable exceptions exist like numpy, scipy, etc...) Maven supports the above use case as well as: * Forces explicit version statements or forces one to identify it as a development version * most dependencies are truly cross platform and don't care what version of the std library or other binary libs you have loaded * has a powerful plugin architecture to force code by convention for everything from database change management, static code analysis, code gen, exploit analysis, project site generation, etc... * has the ability to create template projects ready for modification * can either create a fat redistributable with the strict versions of all the dependencies or create a lightweight version ready to rely on the dependencies from the runtime * has high quality libraries that are primarily in good working order * provides the ability to source libs from other remote repositories * has dependency proxies to assure various levels of compliance * has popularity (this one feature is only in a commercial version AFIK), recency, security and OSS license managers * has commercial support * has a powerful implicit and explicit profile system so you can do things like put Scala code in the right directory and automatically invoke the Scala compiler and import the Scala dependencies or do heavy analysis only via automated continuous deployment so the developers have rapid turnaround and still get extensive quali ty reports. Hopefully this answers you question 
functional programming is more difficult to modify. The equivalence of the introduction of a test in a loop is not so easy for instance. It is also difficult to read an old functional code written by others.
LGPL 3
IF (W AND r&gt;=7) OR (r&gt;8) THEN you understand, and d = ((w &amp;&amp; r &gt;= 7) || (r &gt;= 8)); you don't. So &amp;&amp; and || confuse you?
http://jfoenix.com/documentation.html it will help you to get started 
I agree with maven being able to do stuff. But what I was asking was something like Graple: http://docs.groovy-lang.org/latest/html/documentation/grape.html where getting what you need is just one step ahead: &gt; @Grab('org.springframework:spring-orm:3.2.5.RELEASE') &gt; import org.springframework.jdbc.core.JdbcTemplate Just compile and no need to worry about maven and poms. would be nice if Java had this built in. Wonder what's the downsides of this? Given that groovy/grapes have this already. Edit: just wanna mention this as well, this maven plugin has a great website that helps you write the XML config for the plugin: http://javafx-maven-plugin.github.io/ Otherwise, using maven, you'll have to understand a lot of stuff, goals, mojos, fries, burgers
It is prominent, this is the 5th JavaDay held in Kyiv already, and we had JavaDay in Lviv and Kharkiv this year. We do upload the videos to Youtube, you can check the videos from previous events here https://www.youtube.com/channel/UCJryiYxGliHc8-bpknoLLcw/feed 
I'm a developer for a medical software company, so the CipherDB product seems interesting to me. The site says that any secure properties are encrypted before sending to the database; presumably this would mean that they can no longer be filtered and sorted in the db tier? That would be a data scalability killer for us and is the main reason we don't use such a solution.
Thanks, that is very useful. It would be nice to have proper javadoc style documentation for, at least, every exposed method and class found in the project. Looks nice btw, is this your work?
Perfect thanks! 
Same here! Glad the guys are around.
One wonders if Java EE MVC is a little bit too late, as most are moving away from server side templating, in favour of client side.
Or why there are now 2 MVC web frameworks in Java EE...
The existing JSF framework is Component based MVC, where the new one mirrors Springs action based. It seems fair to be honest.... However, I really dont see that much of a need for a MVC action based framework over and above what Servlets can give you by default. 
&gt; Or why there are now 2 MVC web frameworks in Java EE... MVC (Action based) was most requested Java EE 8 feature, so that means many other people (myself included) sees a huge need for it. Besides, competition (.NET) also provides two web frameworks, so it at least says something about industry needs. 
Same here. I made a little ExcelWorkbookBuilder class but it is far from perfect and just works for the project it was designed for. What annoys me the most is all the whole formatting with CellStyles. I just figure if their is an easier way to do things, Apache POI would probably already have it. 
The disadvantage and the advantage are the same: that are all on the same jvm. gc pauses make the entire set of services unresponsive at the same time time. If one service needs to be redeployed and has a memory leak, you have to restart the whole stack of them to get it back up. Memory is super cheap these days. Putting all your eggs in one basket to save $10 worth of RAM doesn't seem like a good tradeoff. Plus, with independent processes its easier to adjust heap sizes and monitor the performance of an app
Woh hold on - many of the named Frameworks are not part of the Java EE stack. Just for starters, Spring is an independent competing technology stack and not part of Java EE. Let alone Play, Wicket, GWT, Active Record, Dagger, etc... some of which can be used in conjunction with Java EE. But still doesn't make them part of the Java EE stack.
I agree with you on the point that bog standard servlets, maybe in conjuction with JAX-RS are sufficient. However I don't see a problem in a good idea (in this case Spring MVC) being ported to Java EE. 
Which two, the Java EE spec hasn't included one up until now, unless you consider Servlets or JAX-RS to be sufficent?
The [question in the third part](https://blogs.oracle.com/ldemichiel/entry/results_from_the_java_ee) is worded "An additional web MVC framework". I read that as another MVC framework, just as Microsoft added another MVC framework to their lineup. The third survey seems to me to strengthen the case that the Java 8 community survey was asking, does the Java community want another, different MVC framework. I have no desire to use JSF (although I have used it on occasion, and remain not a fan) and my preference is for Spring MVC, which is pretty much what keeps me on the Spring Framework. Standardizing on an action oriented framework would go a long way towards getting me to consider "full stack" Java EE as a first choice. So perhaps I read into the question my biases and am very excited by Ozark. I know I'm not the only one. Also, ASP.NET MVC does not supercede WebForms, and both are under active development. [WebForms is not dead](http://weblogs.asp.net/psheriff/web-forms-is-not-dead). Even as Microsoft moves to ASP.NET 5.0, WebForms is still being updated. Just as there are those who prefer JSF in the Java world, there are those who prefer WebForms in the Microsoft world. The problem with WebForms is that it is heavily tied to `System.Web`. Can you imagine what would happen to JSF if Oracle decided one day to abandon the Java EE Web Profile and embrace Maven and lightweight HTTP frameworks like Spark or Vert.x? That's exactly what's happening in [ASP.NET 5.0](http://docs.asp.net/en/latest/conceptual-overview/aspnet.html).
&gt; The question in the third part is worded "An additional web MVC framework". There were 3 examples given, one of them listed a prototype for JSF by the JSF co-spec lead that added additional action support to JSF. Those examples are not listed in the screen shot. &gt;if Oracle decided one day to abandon the Java EE Web Profile That would mean they'd abandon MVC 1.0 again, since it's in the Web Profile.
&gt; does this mean we'll see 4 totally different but highly similar MVC web &gt; frameworks in Java EE 9? Let's put it to the vote! But, at the very least, component-oriented and action-oriented are the two major camps in the server-side web framework world. I don't think it is unnatural at all to see both represented in the standard. &gt; Will we also see 2 different ORM frameworks in Java EE 8 Actually... This is an interesting idea! In the ORM space, if you're not using raw JDBC, there are two approaches: lightweight ORMs like DbUtils/JdbcTemplate/jOOQ/MyBatis and heavyweight ORMs standardized on JPA. Looking back to the Microsoft world, they have standardized these two ORM strategies: LINQ to SQL and LINQ to Entities, with LINQ to Entities based on Microsoft's JPA equivalent, Entity Framework. Now that you mention it, it would be nice the JavaEE standard followed suit and provided a better option than raw JDBC for those who prefer to write raw SQL but would still like to map result sets to objects. Shall we create a JSR and put it to the vote? &gt; If Java EE becomes an all encompassing meta framework That's a slippery slope argument. JavaEE doesn't just add stuff at random. There is a JSR process, and features are voted on that the JavaEE stakeholders deem worthy of inclusion in a standard. &gt; Then what does it mean to hire a "Java EE developer"? I would hope it means a developer who is familiar with JavaEE, but it seems silly to me to call oneself a "JavaEE Developer", just as it would seem silly to call oneself a "Spring Developer" or a "Microsoft Developer". I call myself a "Software Developer" who happens to be familiar with all of the above and can comfortably develop in any of those environments (well, not as comfortably as a Microsoft developer, but for other reasons). I prefer to be versatile, and I keep myself up to date with all of these. I look at JavaEE as a standardization platform, not as a personal identification. &gt; The permutations are nearly endless and the entire concept of standard &gt; well understood stack falls away. Slippery slope, slippery slope.
Not entirely I'm afraid. MVC 1.0 is based on JAX-RS, and by itself is totally distinct from JSF. There's this one connection, and that one of the default supported template engines is Facelets, which we of course know from JSF.
&gt; Yes, a clone, integrated into the Java EE stack, i.e. CDI, EJB etc... Indeed, so if a clone of Spring MVC can be added to Java EE as is happening now, what's preventing them to add a clone of Sping DI too? And a clone of Play, and a clone of GWT and a clone off ... ? 
If the goal is a seamless UI, client-side is the way to go. Yes, the concept was hyped, but i feel like adoption on large products has more to do with how mature the tech is more than anything; people are atill trying to figure out what works. Plus, rewriting large projects takes many years if people even decide to do it. That being said, mvc will still be used, but will have little to do with the ui. The concept of "view" changes.
This just means that the folks serious about UI dev have moved to client-side frameworks and the enterprise-y infestation of JavaLobby is complete :P
What do you mean with the following? &gt; Relationships between resources and entities I think of entities as the things that are processed inside resources. But what relationship to entities do you want to express via routes? From my point of view the relation would be as follows: route -&gt; resource -&gt; entity. And only route -&gt; resource can be seen in a routes file. 
Not the best title as it never actually tells the reader where to start. It's probably docker and (elastic beanstalk or heroku) if you're wondering.
&gt;What "should" be in JavaEE is decided by votes on JSRs, such as Ozark. And now that the door is open for 1 additional framework, it's more realistic than ever to fear there will be more. So yes, if the JSR decides that GWT also needs to be in Java EE, there's now a higher risk than ever that this indeed happens. The big step is from 1 to 2 or in other words from 1 to multiple, and that step has now been taken. From 2 to 3, or from 3 to 4 or whatever is far less of a problem. &gt;You're not incorporating web frameworks within web frameworks Never said that. JSF should not incorporate Spring MVC, but the full stack framework Java EE has incorporated a clone of the web framework Spring MVC. &gt; Sure, why not? The Spring Framework has implementations of the JSF APIs, such as the EL resolver :X That's not the full fledged JSF framework. That's a few integration classes. Spring has only 1 MVC framework, called Spring MVC. It doesn't have a component based MVC framework like JSF period. It's not about integration. The Spring MVC that's now in Java EE 8 is not actually Spring MVC, nor are it a few integration classes to bridge to the real Spring MVC. No, it's loosely a clean room implementation of Spring MVC and its most important concepts. 
&gt; And now that the door is open for 1 additional framework, it's &gt; more realistic than ever to fear there will be more. So? If the *community* decides this is the way to go, isn't that the choice of the *community*? All you are doing is spreading FUD. &gt; If the JSR decides that GWT also needs to be in Java EE, &gt; there's now a higher risk than ever that this indeed happens. I highly doubt that this could possibly happen, especially considering the standardization of Javascript in the Java platform with Nashorn with first class integration, rendering obsolete the clunky transpilation process like GWT. But let's even grant the proposition that GWT might somehow become a JSR, and the majority of the stakeholders find it compelling enough to actually include in the standard, so what? The platform will not only include those features that *you* want, but that furthers the community's interests through standardization. The JavaEE platform does not only serve *you*, but all of its stakeholders. Who, by the way, I don't think are stupid and shortsighted enough to cram every shiny thing into the platform that shows up on the horizon. &gt; Never said that. That's literally what you said. JSF has no need to incorporate Spring MVC, but the full stack Spring *Framework* might find it profitable. The same way the JavaEE *platform* has found it profitable to incorporate MVC. And by the way, MVC isn't a SpringMVC clone, unless you think JAX-RS is a SpringMVC clone. MVC is standardizing the MVC on top of JAX-RS that is already there. &gt; It doesn't have a component based MVC framework like JSF &gt; period. Why would there be? Spring can leverage JSF. Spring doesn't implement ORM either, but leverages JPA. Spring takes what it needs from JavaEE, and provides alternatives for the rest, such as action-oriented MVC. &gt; No, it's loosely a clean room implementation of Spring MVC &gt; and its most important concepts. Clearly, you do not understand what Ozark is. Ozark is an integration layer on top of *existing* JAX-RS, implementing the integration between server-side view templates and HTTP web services. In fact, Ozark and Spring MVC are actually opposites of each other. Ozark adds MVC on to a HTTP web service provider, while Spring MVC adds web services to a MVC web framework. 
No it's not. It's click bait visitor bait horseshit. And you know it. 
Perhaps! The only thing this survey says to me is that developers are evenly split between component-oriented MVC and action-oriented MVC.
Are you for real? Clone of Spring DI for the Java EE stack? You really don't have a clue about Java EE...
Kool-Aid mostly, I think.
Cool Library. Excellent Job Waiting to see real apps built using it
I want non-Kool-Aid reasons :)
I have used a single tomcat instance with several separate WARs on it for years.... Yes, I have had memory leaks..... But, nothing that wasn't fixable with use of a profiler.... So, now it appears the only advantage is that if one of the webapp screws up, it might still take the others down..... I guess this is a good reason if you need high availablity, though I havent yet hit this problem...
As the very old saying goes, "No one got ever fired for choosing IBM."
If you do it right, with a component based architecture it's actually the best I've seen.
Red Hatter here. I work with quite a few of clients who start doing work using community projects such as Wildfly or Tomcat and end up doing a community to enterprise migration along the road (we have a supported version of Tomcat in EWS. People like that). Main reasons? Support, enablement, and assurance. Got a product issue? Raise a ticket. Got a question on how to deliver some functionality using a framework supplied in a middleware product? Raise a ticket. Want to know that your middleware vendor will support your entire stack from top to bottom because our engineering teams have tested and certified many different combinations of product, jvm, OS and data source ? We've got your back. In my experience a lot of people end up making bad technology choices because that's what they're used to working with - whether it's JBoss, WAS, Spring, whatever. Or what's 'cool' (see, Spring Boot. Vagrant. Docker). Personally, I don't mind what you use - just answer these two questions: 1 - Does your technology choice provide the features you need to effectively build your applications cleanly and efficiently? 2 - Do you get the support you need from the community or vendor? If you answered yes to both those questions, you're good to go. 
ad
You're in the wrong subreddit. This question should go in /r/javahelp as is outlined in *plenty* places in the sidebar, the big red banner when hovering over the "submit text" button, in the "submit text" text entry box. **Post removed:** should be posted in /r/javahelp
Because nobody ever got fired for picking IBM
Which makes the IBM support process all the more infuriating (or at least that's how it was a couple of years ago) - repeating the same information when dealing with the first three levels of support is daft when all of the details are already in the PMR history. Once you get to speak to someone technically competent though the support is worth it, but jumping through the hoops to get to that point is/was a pain.
&gt; Are you for real? Clone of Spring DI for the Java EE stack? Two years ago I would have agreed with you. Crazy! Now that a clone of Spring MVC is being put in the Java EE stack I'm not so sure if this is so crazy. I remember people have been told they were clueless when predicting that Sonic would appear on a Nintendo console. Crazy! Clueless banter! Fast forward a few years and what happened... Sonic appeared on a Nintendo console.
IBM themselves are pushing their new server called Liberty. It's very light and easy to develop with. Tomcat and Jetty while great products in their own right are different things. They only implement Servlet, JSP, and WebSockets. Nobody developers an application with just that. So you add tons of libraries and at some point you could just as well have installed Liberty (or TomEE or JBoss). The question is; do you normally build your own Linux system totally from scratch, or do you start with Ubuntu/RHEL/Debian/Mint/... and tune from there? 
There are three ways to configure Wildfly 1. The web interface 2. Command line interface (jboss-cli.sh) 3. Configuration files So if you decided to use Wildfly, you have many options. Plus, if you like Spring and don't want a full EE container. You can just use the Wildfly's servlet-only distribution. Although, I don't dislike Tomcat. I see Wildfly really taking the mantle of being the best in class EE and servlet-only server with its innovations.
6 months ago we switched to ELK/Docker/spring-boot. We ran into logging issues with Docker logging to syslog with an app-name of `docker-${instance_id}` instead of `docker-${instance_tag}`. (Docker 1.6.1) Logging to ELK directly was unwise because it was both synchronous and left nowhere to log errors reaching the ELK cluster. We ended up dropping docker temporarily (switched to the spring-boot jars directly running as "unix services" and logging to syslog) until they fix the bug. (which kept getting pushed until it finally landed in docker 1.8) Now we have little reason to switch to docker again. Our setup works.
It's all about brand perception: * Developers - prefer Node/Springboot/Wildfly/Liberty, etc because they are more productive in it, they are lighter weight and super fast to start. * Management - prefer IBM because of the brand name. Non-liberty websphere has the whole kitchen sink , which 99% you'll probably never use for your use case, but it gives management warm and fuzzy feeling, because they are thinking supportability many years down the track. They know they could throw money at IBM consultants for websphere support when things go belly up a few years down the road. NOBODY GETS FIRED FOR CHOOSING IBM.
I'm actually getting ready to work with Redhat's JBoss group. Aside from this conversation, things are looking pretty good: Me: "Do you recommend deployment using the rpm, zip or compile?" Them: "Well I usually use the zip but that's because I'm not much of a linux guy" Me: "And....you work for Redhat?"
&gt; This Controller resolves a product id (passed as id request parameter) to a product using a ProductService. The obtained product is added to the model and a path to a view is returned. The view is then rendered with the information stored in the model. It's *quite refreshing* to see a MVC implementation that gets the MVC terminology *correctly*. I'm used to rolling my eyes at web frameworks calling the service "a model" and then saying the model is just "view data".
This. A million times this. I work in a large enterprise and these are all valid "enterprise" reasons for going with WAS or Weblogic.
The thing I can't stand about WildFly is when I'm developing, I have to keep updating the resources on the server after I make changes. This is especially aggravating when I'm working in JavaScript, which I tend to do in other editors. I just want to save and hit refresh in the browser. For JSPs I can add a development flag to the jsp-config, and technically I can map my resource URLs back to my workspace, but it's all manual work. With WebSphere through RAD or Eclipse, it deploys the application by referencing it back to the workspace projects. By doing that, any file I change is already updated (since it's the live file), and similarly, HotSwap works great for the most part. Combine that with WebSphere's administrative console and you've got something nice to work with (assuming you can deal with everything else about WebSphere...)
&gt; I know some people use it out of inertia. This. Last 20 years my java work has landed me at big weblogic sites. These companies pay obscene amounts just for licences, but would never consider changing even when they factor in the savings by switching to other platforms. These businesses are happy to lounge around in their expensive 'comfort zones'... 
Mostly because of brand recognition, the saying is always go with "big blue". However, it seems that trend is dying. Outside of large financial/insurance companies, Websphere/Weblogic usage is very rare. Honestly, i am starting to see many banks deploy their new services using an embedded jetty/tomcat container and just servlets to keep it as simple as possible. I think at this point it's basically been shown by many tech companies that large enterprise app servers aren't really needed. IBM is already investing heavily in Liberty which is a lighter server and IBM Bluemix which is basically a cloud service with lots of java/python/node libraries for things like Machine Learning &amp; Big Data. I suspect this trend is also the same reason rumours about Oracle losing interest in Java have come out. They see a clear trend of companies choosing open source over things like Oracle DB, Web Logic. On top of all that, something like WebLogic just doesn't work very well on the Cloud, which is obviously the standard now a days. 
&gt; Sixth, stability. We tried jboss and even in developers hands, one thing worked for one user but not another. Not a fragile environment. We would see jboss go wonky for no reason. This despite getting redhat on site to look to see what we did wrong. Out of curiosity, what version of JBoss did you test with? If it was JBoss EAP 5 then I completely agree. It was "flaky". However, EAP 6 is when Red Hat finally hit its stride. Our EAP 6.4 + RHEL stack is the most stable environment at my organization.
I am assuming you used JBoss Tools when you had this issue. I can't stand that lack of out of box reloading of resources as well. I sometimes use the LiveReload tooling when dealing with HTML, CSS, and Javascript content. I am curious as to how IntelliJ idea would handle it. I wouldn't be surprised if they did it right.
Seriously? That person needs to get fired :)))
Things work on Liberty then they blow up in flames on WAS and I need to start debugging. I don't need more then Servlet, JSP and WebSockets. Spring will never die, good free software projects don't die (for example MySQL turned into MariaDb, but did not dissapear). People depend on Spring and Hibernate and they will outlast a nuclear war and even the cockroaches that will survive it.
&gt; There is nothing we have had to configure via a file. Everything is through the admin console. I consider this a disadvantage. It's easy to end up with 10 different dev envs for 10 different developers. Config files are easier, provisionable.
That is the definitive answer to OP's question. WebSphere (and WebLogic) are designed to be enterprise systems: Utterly reliable and with deep support if something goes wrong. Companies that can't run the risk of running on a potentially flaky platform have every reason to spend lots for their platform and to stay on it (what others in this thread call 'inertia'). 
&gt;Things work on Liberty then they blow up in flames on WAS and I need to start debugging Liberty itself can be deployed to WAS ;) And alternatively you can user Liberty everywhere. &gt;I don't need more then Servlet, JSP and WebSockets. Spring will never die, You contradict yourself here. If you only need Servlet, JSP and WebSockets, then what's the Spring and Hibernate reference for? Ergo, Servlet, JSP and WebSockets are NOT enough, and you add sa dozen of jars for Spring and Hibernate. 
&gt; Yeah, apart from the fact that a DI framework has already been implement in Java EE (C-DI). And the fact that an MVC framework was already implemented in Java EE (JSF) didn't stop them either to add MVC 1.0.
What do you mean I can deploy liberty on was.
How does the saying by Winston Churchill go? &gt; The only statistics you can trust are those you falsified yourself Where's JSP? In "I build web apps without a framework"? Also, given that DZone (who now runs on Angular) ran the survey, I'm wondering where are all the JavaScript frameworks that use Java on the server side merely as a service implementation platform, not a UI platform. [Let's extrapolate](https://www.google.com/trends/explore#q=angularjs%2C%20jsf)
I am sure you can appreciate the difference between a large component framework and a massive life-cycle, as apposed to a simple MVC templating framework. As apposed to Spring DI and CDI, which you will find cover pretty much the same functionality. If anything one will pick up minor features from the other, but there is not going to be a second DI framework in the Java EE stack. 
Liberty is from IBM as well...
99% of current websphere on-prem installs are not on liberty, but WAS Classic. Lots of legacy J2EE apps and deploy scripts out there dating 3yrs back will not be supported by Liberty, but WAS Classic, so management choose Classic over Liberty.
Just guessing people have to. Many decisions are not ours to make.
This looks very interesting. The screenshots a bit low resolution and there's no demo to check out. I wonder how well it works (read: the UI) for system that produce a lot of log data (&gt;1GiB a day).
but, you could use Spring boot!
How this can be compared to logstash/kibana for example? Or are they completely different by nature?
ErRabbit has visual exception view to make trace error easy.
Las Vegas parties.
&gt;I am sure you can appreciate the difference between a large component framework and a massive life-cycle, as apposed to a simple MVC templating framework. The JSF spec is about as large as the CDI spec, and Spring MVC uses approximately the same lines of code as the Spring DI container. And it doesn't have to be about Spring DI, maybe someone wants Guice or Dagger, which are both MUCH smaller. So if size is your criteria, then you just opened the door even wider for two additional DI solutions: Guice and Dagger. And JOOQ is not that big either, so let's add it right away? It's only a simple JDBC abstraction and not as massive as a large MVC framework such as Spring MVC. &gt; As apposed to Spring DI and CDI, which you will find cover pretty much the same functionality. Someone will find a difference. The difference between action based and component based MVC frameworks is smaller than you think, especially given the fact that JSF was already moving to a hybrid component/action-oriented framework. 
&gt; I need to develop on Liberty then test of WAS. Liberty is a trick to sell you WAS. They both suck. But you don't ACTUALLY develop on Liberty do you? Your lack of knowledge is really showing in this thread. 
Have you never heard of QA/Testing, Technical Writers, Developers, Infrastructure, etc? Not **everyone** with a @redhat.com email address is a Linux kernel developer. 
Ultimately we have config files that are modified. We have a repository which stores all changes and manages them. We can still do diffs etc. So I see it as a benefit that we have the console, and able to manage the files manually. 
It was 5. And our developers and ultimately our management put jboss to rest. 
But in the end devs have different WAS configs, with security or without.
I get that you are trying to be rude but have no idea what you are trying to say. What does Javascript have to do with it? The top two frameworks both heavily use Javascript in thier implementations.
We have created templates of the server config and can load those on demand. Everyone has a standardized configuration. 
I *think* op meant there are no details in what has changed in this release. Just "updates". oracle are so shit - nto for for this in particualr, jus tin general - even the website is lame
The release notes are available on the download page. If you bothered to look it is easy to see. https://glassfish.java.net/docs/4.1/release-notes.pdf 
That blog post gives a summary of what changed in 4.1.1, but yea they didn't update the link to the release notes. From the blog linked above: &gt;In this 4.1.1 release, most the underlying GlassFish components have been updated. The list below contains some of the updated components. &gt; * Jersey 2.21 (JAX-RS 2.0.1 aka JAX-RS 2.0 rev A) &gt; * Weld 2.2.13.Final (CDI 1.2) &gt; * MQ 5.1.1-b02 (JMS 2.0.1) &gt; * Tyrus 1.11 (WebSocket 1.1 ) &gt; * Mojarra 2.2.12 &gt; * EclipseLink 2.6.1-RC1 &gt; * Grizzly 2.3.23 &gt; * HK2 2.4.0-b31 &gt; * JBatch Runtime 1.0.1-b09 &gt; * JSON-P RI 1.0.4 &gt; * etc. &gt;Finally, it should also be mentioned that and in addition to various bug fixes, GlassFish 4.1.1 also includes several security related fixes. 
If that is so, then my environment is pretty broken. I have JBoss Developer Studio across multiple different Linux desktops and they don't behave that way.
Nice
You win this round NimChimspky but I will be back!
I could tell as soon as I started reading that blog post that they had a bias and were probably trying to sell something. That proved to be right. All their reasons for not using Docker for java apps make absolutely no sense whatsoever. EDIT: I think that blog post also shows a misunderstanding of another reason Docker is useful, instead of giving your Operations team a set of instructions on how to install an application you just provide a Docker container that is all ready to go.
An operations team isn't going to want multiple container technologies to handle. They will want one. So it doesn't really matter if Docker is the best fit for the JVM or not. If Docker makes the most sense for all the apps they want in a container then they are going to use Docker.
&gt; One wonders if Java EE MVC is a little bit too late, as most are moving away from server side templating, in favour of client side. A few years ago "most are moving away from java to ruby on rails". Then the hype machine ran out of steam, and most of those who had gone with Ruby On Rails actually converted their apps back to Java. Now the hype machine is trying to push client side templating. I imagine in a few years it will mostly quietly and someone will be pushing some new thing. It's just reinventing the same wheel we already have. It doesn't do anything substantially different than server-side rendering, except it's a little slower and usually requires more requests to do the same thing.
A fair point, but consider the following: 1) Capsule Shield will be `runC` compatible, and therefore the same "technology" as Docker (neither Docker nor Shield are actual container technologies anyway. They are both packaging and deployment solutions). 2) It is not uncommon for many organizations to have all their processes running on the JVM *except* for the database. More generally, it is quite common for organizations to have 95% of their processes on the JVM. More importantly, 100% of the processes the organization updates and deploys frequently (because those are the programs they produce) are on the JVM. In those cases it certainly pays to use a much more convenient and suitable deployment solution for the JVM processes.
You could write a caplet similar to `capsule-desktop` that bundles the JRE, but it is intentionally not the main use case for Capsule. Capsule is mostly intended for deployment of server-side services. For those, it is best to have the JRE installed separately (for security reasons). This, BTW, is recommended for the client-side, too. Java 9 might change things as it would make distributions of customized JREs standard practice. If you can customize a small JRE, then it makes a lot of sense to ship it with the capsule. 
The JVM is the same as we copied the JVM binaries directly from Machine 1 to Machine 2.
well if you want to get good on standard Java i have a recommendation. back when ocpjp was scjp it was the scjp study guide by sierra and bates that java-d me up the most. i'd look for a ocpjp study guide. see here's the deal, you know most of the keywords and now it's time to know the edge conditions of how they really work. if you're going to be in a Java job interview, once you've done the exercises in the book there is no question about the details of standard java that will stump you. it will get you up on concurrency, serialization, collections. i feel it advanced my java skills a good deal. you could take the test for the cert too, but the knowledge you get from those crazy hard practice questions is worth more than the cert. there's wayyyy more out there than standard java though! it will be all about what frameworks you're up on if you interview for Java jobs 
The selling points listed really aren't doing it for me. Footprint: we already have pretty minimal JVM Docker containers. And images don't take a long time to build; if I already have a my_org/java or jetty image in my repo, then a docker build that just layers my jar/war on top of it and commits that is faster than most other steps in my build chain. Security: Docker containers are also unprivileged by default, and no one should think of containers (yet) as more secure than OS virtualization; they're just more secure than running sixty webapps/services in the same fat JVM, or in a few JVMs running as the same user on the same OS VM. Linking: Ok, so I don't need an /etc/hosts. Uh. Win? Logging: Already have logback -&gt; logstash, don't really care what Docker does with stdout. Monitoring: -p container_jmx_port:host_jmx_port, or am I missing something here?
It's not "unsupported BETA", it's "community driven"! ;)
That's not the experience I've had. And it definitely doesn't help the cast of using an external editor. The problem is that resources have to be pushed to it. On the other hand, when I deploy an application to WebSphere through Eclipse/RAD, it "deploys" by pointing the application server back to my workspace. If I change an image, javascript file, etc., nothing needs pushed.
&gt; But JVM applications are already portable, and a JAR file makes for much a smaller and convenient package than an image. Docker images for JVM applications require that the JVM itself be included in the image, even though JVMs are completely standard... Really guys? Do you honestly believe any of this?
Thinking in Java is really, really old. The language and the libraries have changed a lot since then. Oracle's Java Tutorial is up-to-date, as far as I can tell. 
There might be savings, then again they would have to pay someone to make the switch then pay someone to support / maintain it.
&gt; Why not just contribute to the open container project[1] and develop tooling around that? We are! As the post says, Shield will be 100% open-container compatible.
spring i'm sure you can learn all of it in a few hours though... /s
Maven is important. You dont ship jars around anymore.
I've worked 3 projects with Maven now, lots of people use Maven, and it is a giant pain that is far far more work and time consuming and drama than the older and far far simpler path that worked well of simply downloading the jar files and putting them in source control.
Generics are a thing now. Also lambdas. Also, remember to use StringBuilder, not StringBuffer. If you are doing Java EE development, it's not called J2EE anymore. And it's definitely worth investigating CDI and JPA. Also, don't use JSF. Please.
Blue Pelican Java is really great if you're looking for a really concise, no nonsense book. 
&gt; Also, don't use JSF. Please. JSF 2.x is good (especially with Primefaces and Omnifaces), what's your reasoning for saying not to use it?
They should be though. (I say from my experience at my last job). Mostly it's political - the people making the decision are at the top and have no idea whatsoever what's good and what sucks. So they go with a big name - IBM. Thing is, when they do that for something like Oracle database, it's overly expensive but otherwise not a big deal. It works fine. With IBM, they somehow manage to take decent products and make them worse. For management IBM is a big name, for every programmer I know who's worked with their products (I did for 7 years) it means "don't use this". 
Annotations everywhere, for configuration and runtime code generation. 
Nowadays the way forward is JavaFX.
&gt; it is a giant pain that is far far more work and time consuming and drama Honestly, it sounds like you're using it completely wrong in that case. There should be no extra work or drama. Simply put the dependencies in your pom.xml, and then any developer can easily checkout and build the project from scratch. What exactly was causing you problems on the three projects? Perhaps I could suggest some things to make future projects go a bit smoother.
If you're publishing StringBuilders to multiple threads you are probably doing it wrong.
Dependency injection with the spring framework is a big one. 
Latest release of Java in a Nutshell is very good for solid Java background
funny that you have got so many downvotes. my experience is the same. (I still use maven, but keep pom.xml as simple as possible, any non-trivial customization is a pain)
no, but you dont pack them yourselve anymore. like in downloading the jar manually and putting it somewhere. you let the tools do that now + dependency management.
and what does those tools use in background + as repo? well. maven. those tools are just different syntax.
You also should mind that the JVM is nowerdays not for Java only. But it is a plattform for programming languages like Scala, Clojure, JRuby, Jython(?).
Does this even work with java? The article sounds like it operates on dex files. 
welcome back. lol
Java in a Nutshell is a good all rounder for the basics. Another book that you could read after that is Rich Client Programming On the NetBeans platform. That will also introduce you to IDE's and some of their helpful functionality
sure sure, but there is more than that? eg. https://gradle.org/maven_vs_gradle/ If you want to do something complicated with maven xml is shit and also it is quite time consuming to create new plugins for it. or course if you have just simple projects with some dependencies maven is ok. but if you do something more complex with that.. you get the idea.
It might seem an heresy but just plain JSP, taglets and servlets with JEE or any Java framework that builds on this model, coupled with a nice JavaScript libraries. Personally I prefer native over web, but when doing webdev I try to use something that doesn't hide how it all works, if given the opportunity to do so.
I think he was being sarcastic....It'd take years to learn all about Spring.... CDI is the standard (JSR346), implemented by many servers, and supported by many companies. Probably best if you learnt the standards first, and then choose if Spring has anything more to add (in addition to the 10's of additional jars added into your webapp, slowing down deployments etc). 
Totally objective comparison there. Not like it's a comparison page on the tool's own website or anything. Not biased at all. And funnily enough, I was unable to recreate my Maven build within Gradle - the plugin support wasn't anywhere near good enough to do everything I needed. That may have changed in the year or so since I tried, but it's not worth the effort when there's the risk of it being a complete waste of time again.
My question is: are implementations of CDI as mature as Spring is? For example, WebLogic gives a lot of problems with CDI.
Use Gradle only if you don't mind waiting for builds to switch from seconds to minutes.
&gt; Also, don't use JSF. Please. Do use JSF, please. Don't believe the haters. Just before you left it wasn't that great, now it is :) Welcome to 2015! ;)
&gt; Mixing JSF frameworks is never a good idea That would be a terrible idea! But there's absolutely no reason to mix the only two JSF framework implementations Mojarra and MyFaces. Technically, I'm pretty sure you can't even do that since everything would clash with duplicate class exceptions and duplicate Servlet registrations etc. Of course component libraries (like PrimeFaces) and utility libraries (like OmniFaces) can be freely mixed.
There's a semi-dated book called Effective Java by Joshua Bloch. It is widely considered one of the best resources for core Java programming (Java SE 6.) It didn't get into the EE stuff at all, but really helps cover avoiding a lot of the bad habits that started in the 90s.
Auto boxing is now in Java. Primitives now can be wrapped automagically in their corresponding classes. 
Horses for courses. If you're developing an business webapp to run a function of a business, then by all means.... however, if you're developing a website that is used by millions, then....be wary about using these type of component frameworks.., as server side state can bite you in the ass. 
System.out.println and main method declaration are still the same. All the other things changed. :) Other things: - Collections can be typed now. You don't need a lot of casting anymore. - You can iterate collections using 'for each' or using stream() (Java 8) 
I have seen code use together Tomahawk, RichFaces and ICEFaces back when I was into JSF development due to specific components, it was not pretty.
At the language/syntax level, these are the most important changes: Java 5 (2004): * [Enums](https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html) * [Generics](https://docs.oracle.com/javase/tutorial/java/generics/index.html) * [Autoboxing](https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html) * [Annotations](https://docs.oracle.com/javase/tutorial/java/annotations/index.html) * [For-each loops](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html) (mostly obsolete again because of the Java 8 Streams API) * [Varargs](https://docs.oracle.com/javase/tutorial/java/javaOO/arguments.html) Java 7 (2011): * [Try-with-resources](https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html) * [Multi-catch](https://docs.oracle.com/javase/tutorial/essential/exceptions/catch.html) * [Strings in switch statements](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html) * [Binary integer literals, underscores in numeric literals](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html) * [Diamond operator](https://docs.oracle.com/javase/tutorial/java/generics/types.html) Java 8 (2014): * [Lambda expressions, functional interfaces, method references](https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html) * [Streams API](https://docs.oracle.com/javase/tutorial/collections/streams/) * [Default and static methods on interfaces](https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html)
In my experience, the source of most pain is not submitting to Maven's opinionated build pattern. If you give in and drink the kool aid, maven becomes so much easier.
An obvious auto correct for util.
I'm much more into Maven but Gradle has some nice touches especially for build orchestration. The newer versions introduce Gradle Daemon which largely fixes the speed issue.
&gt; Really guys? Do you honestly believe any of this? Not entirely sure what you mean by that, but to whatever extent Docker (or VM) images help, so does Capsule (even w/o Shield), with zero additional tools (just your favorite build tool), with less overhead, less hassle, and it works on all OSes. And yes, you can pin a capsule to a specific JVM version (what I meant was that for a given JDK version, all distributions are the same -- or at least as much the same as different kernels are, and you can't pick a kernel version with Capsule just as you can't w/ Docker) Shield is only necessary if you want to launch a capsule in a container for isolation/security/resource-restriction reasons.
About a year ago I wrote a blog post series that I think would help: [An Opinionated Guide to Modern Java](http://blog.paralleluniverse.co/2014/05/01/modern-java/).
Some other useful methods would be: Map&lt;K, V&gt; toMap(Mapper&lt;E,K&gt; keySelector, Mapper&lt;E,V&gt; valueSelector) Stream&lt;G&gt; join (Stream&lt;F&gt; otherStream, Mapper&lt;E,K&gt; keySelector1, Mapper&lt;F,K&gt; keySelector2, Mapper2&lt;E,F,G&gt; valueMapper) 
I should really try out some more of java 8. I played around with lambda's a little bit when it first released, but my work was all in java 6/7. The streams api especially seems interesting.
You don't even need to write getters, setters and constructors anymore with [@Data](https://projectlombok.org/). 
He doesn't know...he just memorized the interview answer. 
I have not really found this to be true. Simpler compared to what exactly? Spring is so complicated they had to create another framework (Spring Boot) just so you could use it. They did not even get it right the first time. Remember last year when Spring Roo was the answer? Boot is in its infancy so who knows if it will even be a thing in the next few years.
On my PC (dual core with 8 GB and 7200 RPM disk) it takes around 2 to three minutes to build and sync Android Studio projects. With the old Eclipse setup it was a matter of seconds with Ant or Maven.
Now backend and frontend of a webapp can be easily isolated into two separated projects / teams. For example: - Backend REST API: Spring Boot is the easiest framework to get a rest api up and running in minutes. - Frontend (javascript framework): Angularjs and React.js are probably the most popular frontend frameworks at the moment, but there are a ton of them and they all do different things. Also, jsp's are dying. Thymeleaf is the best option for server-side templating in most cases. 
So how is this different than Java's Streams? http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html
There are still some big swing apps out there. For example the Java IDE Intellij is written with swing. I use that IDE all day long and it is a joy to work in.
Nothing really surprising here. Streams are a concept of functional programming which (strictly speaking) does not allow side-effects. Using streams with operations that have side-effects is a stupid idea. Unfortunatelly Java cannot prevent this on language-level.
1. Those are not "JSF frameworks", but component libraries 2. "back then I was ..." sounds a long time ago. Before 2.0 the AJAX functionality of RichFaces and IceFaces did not mix well. 2.0 standardized this, and 2.0 component libraries generally work well together. That said, mixing components from multiple so called "rich/visual" component libraries is not a best practice and you'd normally stick to one. OmniFaces is not a compoment library, neither is something like PrettyFaces and you'd normally use them together with one rich/visual component library.
The spring luddites are out voting us down! Gotta feel sorry for them in this evolve or die profession ;-) 
&gt; if you're developing a website that is used by millions, then....be wary about using these type of component frameworks. You mean like ebay or BMW?
&gt; Thymeleaf is the best option for server-side templating in most cases. I'd say Facelets. Thymeleaf is more heavyweight and requires more memory + generated more garbage.
&gt; Hibernate is the reference implementation of JPA and is very popular. Actually it's officially EclipseLink ;) But since everyone thinks it's Hibernate, it's defacto indeed Hibernate. But according to the JCP rules it's EclipseLink that has to implement a RI at the same time the JPA spec is released. Everyone else of course ignores EclipseLink and uses Hibernate.
&gt; Backend REST API: Spring Boot is the easiest framework to get a rest api up and running in minutes. ...So long as you have gradle already installed, to pull in the heaps of JAR's required to get it off the ground. &gt;Also, jsp's are dying. You say this because it is really hard to get them up and running in spring boot. JSP's arnt dying at all. And why would I want to convert my JSP's to Thymeleaf when they are over twice as slow http://image.slidesharecdn.com/comparing-template-engines-jvm-131107023934-phpapp01/95/shootout-template-engines-for-the-jvm-41-638.jpg?cb=1432717139 
Well, I know people on here think that all code just runs in the JVM, but I don't see that as true. My org has quite a bit of native code, shell scripts, and other infrastructure components like LDAP, web servers, etc that we are looking to containerize. I work at a fairly large place and some of this stuff is 15 years old and we need to keep it running. I don't think this is uncommon for most large enterprises. So in my case while it would be neat to have a really slick container for the JVM I don't see it as realistic because it would be too much work to to develop monitoring, deployment, and build tooling around multiple container solutions.
Java also has checked array indexes. This is perhaps the biggest thing that makes the language more secure. This is the reason you don't get buffer overflows. Stack or Heap overwrites. Java may or may not help cultivate secure coding practices. (I think it does.) But what is more important is that it goes much further than C to simply make a lot of mistakes impossible. Not all mistakes. But a lot of basic ones that have been made millions of times. It's the same reason we have strong typing. It catches a lot of errors at compile time instead of runtime. 
Swing went in, then out. JavaFX is the new hotness in GUIs (it's really good IMO!).
You can use Ant + Ivy to avoid the nightmare that is Maven but still get dependency management. 
This is what we have moved to. Not looking back.
http://www.annotatiomania.com/
If you're going to be involving direct networking (or local file) communication, java.nio is important, and tied along with that is discrete parts of java.util.concurrent. NIO is a complicated subject that I won't even get into. The concurrent package simply provides mechanisms for handling multi threaded applications without wanting to die.
Cleaning up some boilerplate and not having to write DAO layer is nice. Can you use Spring Data standalone or is it like other parts of Spring where you have another 11 dependencies you have to import. Does it make a mess of you stack trace like other parts of Spring do? CDI is easier to work with for DI so I would want to keep that. 
The reasons I created this are: - Android does not run Java 8. Even with Retrolambda, which introduces the nice arrow syntax, you still don't get the Streams because those are only included in the actual JDK 8. - Existing libraries that attempt this sort of thing, such as lambdaJ, I found a bit bloated or not well documented. I actually explicitly called my library JStreams to accentuate how it's mostly the same thing. If you can use JDK 8, you probably should not use this.
I used JSF 2 years ago and it was a nightmare. What changes has JSF gone through in these 2 years that will change my mind?
I wouldn't mind pairing up and helping. I've been trying to find a project to start on but most things are way over my head in terms of trying to do it alone.
Fixed
You should create a github repo and push a simple project. In the read-me specify roughly what the road map will look like and encourage people to do pull-requests. If you have an interesting idea, I might contribute! 
I really like to toMap method! Good idea. I've added this to the issues on Github. Not too sure yet about the join, the signature alone is a mouthful and I think the use for it would be very rare. In my experience at least I haven't needed it yet. There's also some subtle complexity in the inner workings, such as : - What if the other stream has no elements matching a key from the left (left join problem) - Similar for the right join problem - What if the other stream has multiple elements matching a key from the left
Good. This was missing in the post's description. Thanks for sharing the library! 
&gt; Default and static methods on interfaces Newbie question here. Doesn't this blur the line a bit between abstract classes and interfaces?
&gt; I also have a side interest in p2p networks and would like to integrate one into my robotics framework. That plan just screams robot takeover. :O
Interfaces still cannot have instance variables, this is the big difference now. There are not many reasons left to use abstract classes, though. 
You're welcome! You're right that this is lacking on the Github page, I've updated the README with this information.
Your timing is off. Spring Boot 1.0 is only a bit more than a year old. I never thought Spring Roo was the answer but last year on this forum a lot of those praising Spring Boot were praising Roo. In another year or so it will probably be something different.
If you were using up to date stuff two years ago than probably not a lot. There have been improvements for sure but nothing drastic. It might be you just do not like it and that is okay. Hard for me to imagine it being a nightmare as in my view it is the single biggest improvement in Java web development in the last 15 years. I absolutely love working with it.
If i was doing it in maven i'd make it one maven build with three poms, one for the parent and two for the child modules. You can control the packaging of each module there. Our project has this, modules that make jars and one that makes a war. That way you can build it all with one command, or separately for each module as you wish. this is pretty much the way mvn likes it done and this task could potentially be rather easy for you i agree with everything /u/frugalmail /u/brenoinojosa and /u/element8 say
Uh...if you say so. I don't really care about the internals, point is they let you add a class type to things like Lists, Sets, etc. So rather than everything being List&lt;Object&gt; basically, it's List&lt;String&gt;.
http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.create-instances.standalone
Lombok does nothing at runtime. It's all compile-time injection with an annotation processor. If you decompile a lomboked class, it'll look like a normal class file.
It's always good to keep things separate if they generate two different outputs. The best thing to do would be: 1. Identify what part of the code is common to both 2. Make that common piece a new project and make it work as a library for them 3. Create new projects for both pieces using that library. 
So maybe? I will have to take a look at it. Based on what you sent me it looks like it can work with CDI. The downside is it looks like it is going to have a bunch of dependencies and make a mess of my logs. I wish Spring was a more modular framework so you could use some of their utilities. I was considering using Spring security which I kind of like but I had to include half the internet in my project to use it so I passed.
Just clear up all the clutter and make you code more readable.
can you post the github link?
On the upside though, if you later decide to write a native mobile application you already have a full REST API for it to use.
They also don't use IIS. Same why not question applies.
You seem very angry about a survey on Java frameworks. Yes they are very close. I think that is big news since Spring has been around a long time and used to have a much bigger share.
I hated big WAS, but Liberty is kinda cool really.
&gt; `return fetchTrackBy(device).orElse(trackRepository.saveTrackWith(metadata));` &gt; &gt; fetchTrackBy returns an Optional so that code could be thought as syntactic sugar. It would unroll to this: &gt; Track track = fetchTrackBy(device); if (track.isPresent()) { return track.get(); } return trackRepository.saveTrackWith(metadata); Aside from the incorrect type on the first line, if that were the case then there wouldn't be an issue. I think it actually unrolls to this: Optional&lt;Track&gt; track = fetchTrackBy(device); Track track2 = trackRepository.saveTrackWith(metadata); if (track.isPresent()) { return track.get(); } else { return track2; } which illustrates the issue - `saveTrackWith` is called regardless of whether `fetchTrackBy` returns a non-empty value.
Check coursers, udacity and in general moocs
I don't know if Android Facebook application these days is better than the crap it was years ago, but if it didn't improve, their last problem is optimizing byte code...
Gradle.
My goto for passing data around from my applets over RMI.
Thank you for the insight! I will put that one off for a while. 
Thank you! I plan on reading this book first.
Thank you for the insight on OCJP and the importance of frameworks! For now I think I will read Java in a Nutshell, and pick up the OCJP 8 book by Kathy Sierra when it is released! 
I would like to learn Enterprise Java eventually, but I'm gonna hold off on that for now! Thank you.
Good move. You're going to be so friggin good at streams. 
I plan on reading Java in a Nutshell first :) thank you for the recommendation!
Which frameworks are in fashion, and language features are covered by a lot of the comments here. But to get at some of the style changes, you'll find Google Guava has taken over a lot of use cases from things you (maybe?) reached for Apache commons back in the day (although since your time away from Java is longer than my professional career at this point, I don't know if that comparison is helpful). In any case, I'd take a look at the Guava API for some ideas. Broadly: - Strong preference for immutable classes - "fluent" style builders in a lot of cases where factories were used in the past - Static initializers preferred to the new keyword and constructor overloading 
Would you give up your current job to work at Oracle and implement C#-style properties? Because I want them too.
[Party on, Wayne.](https://www.youtube.com/watch?v=oe30habM0ls) 
3 months for $7K? No degree? That's more than most university tuitions...
Grade does. 
I agree that plain imperative loops still have their uses. But I find that maybe 4 times out of 5, I'm better off using streams. Hence why I wrote *mostly* obsolete.
I've found Gradle needs fed -Xms 1 gb -Xmx 2 gb. You can set these with an environment variable as GRADLE_OPTS
Thanks, will try it.
Only on condition of full refund if no job, or they promise to hire you, and don't pay up front.
https://boisecodeworks.com/ Is the place. The local newspaper did a writeup on them. I was thinking of taking the day class and trying my very hardest. I guess it all hinges on whether or not the math part of the job will slow me down so much that I would not make for a good coder. Also, allegedly there is a shortage of tech workers in Boise, Idaho. So I got that in my favor as well.
If I were you, I'd be very careful. Take the syllabus and compare it to postings on your job board of choice. Imagine applying to those jobs with the skills your supposed to learn at the bootcamp, and be really careful that what you're getting is worth it.
&gt; I would assume they have contacts with local businesses I would **not** assume that.
But it's STILL a list of `Object`, under the cover. This becomes important if you get sloppy with your casting. The non-reified generics make things tricky near the edges. But when it's just sugar (eliminating a cast), then it works beautifully.
I know this is a really snarky comment but their website breaks my browser's ability to use the "back" gesture and this puts a bad taste in my mouth. "Thou shalt not break basic browser functionality" is one of the basic commandments of web development. The fact that they screw that up does not bode well. Get stats on the number of people who completed the program last year -- not an average since they started -- relative to those who signed up AND the number of people placed in jobs. That said, it could be argued that one of the biggest perks of a program like this is the networking opportunity. You'll meet people who have similar experiences, you'll learn alongside them, and you'll be able to keep each other motivated, help each other learn, and eventually help each other get jobs. I think that a huge part of success is being cool and knowing the right people. It's hard to do that when you're a self-taught, solo dev. (You can also get a similar experience by just going to meetups, though.)
I'm currently doing a bootcamp program in Java. Overall Im happy with it. There are some things Im unhappy about though. In hindsight I would think it over because it isnt cheap. My program cost 10k plus I had to move to a different state for 3 months so theres also the rent. Here's what it boiled down to for me though: I'm not a self motivated guy. My bootcamp forced me to learn and that worked best for me. I learned a lot more here than I learned on my own in 2 years or so -- although those 2 years really helped me ask the right questions in this program. However, if I was self motivated, I would have wasted my money coming here because anyone can learn this stuff on their own. All the information is out there on the web. All you need is a good syllabus to follow and the motivation to just do it. In fact, the one thing I'm kind of unhappy about is that we tend to briefly cover some important topics and I learned more about those important topics watching Youtube videos and stuff. I did my research before joining here and this place has met *many* of my expectations. I suggest you do your research too. Bootcamps are popping up everywhere and the quality isnt always great. Dont learn PHP though, lol. ;)
There are all kinds of code bootcamps. Galvanize in Denver, Flatiron in New York, Software Guild in Akron. A lot of bootcamps. And, actually, a lot of people are hired out of them. Here's an NYT article on Galvanize: http://www.nytimes.com/2015/07/29/technology/code-academy-as-career-game-changer.html?_r=0 As with anything, there are good ones and bad ones. There are a lot of code bootcamps that are just horseshit factories. They've sprung up after the success of the good ones. The good ones will get you a job. The bad ones will get you a shorter bank account. I know people who have graduated from Galvanize and Software Guild who got ground-floor developer jobs afterward. You're going to want to make absolutely sure that people are graduating from your chosen school and getting jobs. If not, don't do it. 
True, there are now somewhat fewer reasons to use abstract classes. As you note, abstract classes can have state (fields, instance variables) but interfaces cannot. In addition, abstract classes can have protected methods, for communicating with subclasses separately from callers. Abstract classes can also have private constructors, allowing restrictions to be placed on who can create instances.
 How can I tell good from bad?
totally agree. I use streams most of the time, but yeah it's not for every use case.
Static type checking solves the halting problem for you? TIL
Just the kind of thing I was looking for. Thanks ron_krugman.
That wasn't me (OP), but that's great information regardless. Thanks.
It's typed!! 
Make a site. Set up a Heroku or an AMI and create a site that does some task that combines big data and user centric design. you could have something like this up - bare bones in 3 months. IT will teach you so much more about building web applications than some class where you have to go at the speed of the guy that failed welding class. Good luck 
It should be borne in mind that JavaFX is not yet part of Java SE.
Annotations and Lambdas are probably the biggest. Lambdas are probably at the top since a lot of backend stuff is handling and manipulating multiple objects. JSF is basically useless, so if you have to do any UX/UI stuff get ready to learn a JS Framework, begrudgingly like every other Java Dev. But a lot of good core stuff overall. Yet managing Dates still eludes them... Culturally on the negative side, at least from my perspective, Oracle sued Google. Netbeans is probably the worse of the 3 main IDEs (IntelliJ, Eclipse and Netbeans). Positives would be open-source development for Java is still going strong things like Spring* and all the big data stuff. 
I use Spring and I will say Spring Boot is not optimal for developing Enterprise apps. That is why you handle your dependencies yourself. Spring Boot is great for personal projects rapid development etc. Spring MVC &amp; Spring DI + JavaScript Framework &gt; traditional J2EE. I don't know about Thymeleaf but I see server-side templating as kind of counterproductive, since speed is critically to the UX. If you are in the Spring MVC crowd JSPs are basically useless. 
Yea I know you _can_ do it, I'm asking is it improving your code? It's not improving readability*, debuggability or performance, so why do it? This topic has been [discussed to death](http://stackoverflow.com/a/101313/507339) already in the C#-world, and there is no definite answer. [Some](http://blogs.msdn.com/b/ericwhite/archive/2009/04/08/why-i-don-t-use-the-foreach-extension-method.aspx) hate it, other find it useful. It's _not_ included in the language by default though, and Lisa Feigenbaum, senior PM at Microsoft has said this about it: &gt;However, ForEach doesn't return any values, so it would only be used to produce side effects. This conflicts with the functional design principles for sequence operators, and is one of the key reasons why it was not introduced. *) If your argument was that having the code on one line made it more readable, here's another version of my example (I'm sure you knew that, I just don't buy the argument): for (Item item : list) item.doStuff();
From what I've seen and heard of these bootcamps, you will get out what you put in. Go through the course completing the assignments but just expecting a job at the end of it, you won't get anywhere. Do all of that plus self study on the side, making your own projects and spending any spare time networking at meet ups, you might get some employment at the end. I've just completed a one year fast track course at a university and have a good job at the end of it but that was a full time 9-12 hours a day course for four times as long as your bootcamp. My course missed out a few things that would normally be covered in a standard CS degree but we still studied essential areas such as databases, data structures, search algorithms, etc. My worry with a bootcamp is that you will learn the how without the why. For example, it's all well and good learning SQL commands but I doubt they'll have time to teach you and relational database theory, which means you will be a liability if you ever need to make your own database. Similarly, you'll be taught how to use different data structures like sets, maps, etc. but without knowing some of the theory behind them (which I very much doubt they will have time to teach properly), you won't know what to use outside of the examples they give you. All of this can be learnt later and I expect you will learn more in three months than you will have ever learnt before. My reservation is that every entry level interview will ask you about data structures, search algorithms and your coding challenge will often be implementing one. If you only know they how and not the why, it is difficult to approach problems you have not seen before. 
If you are looking for free Java books, Thinking in Java and Java Application Development on Linux are two of my favorite. You can take a look at my list [here](http://java67.blogspot.com/2013/11/10-free-java-programing-books-download-PDF-HTML.html) for few more options.
I started on version 2 and it is the only book I have bought every new edition.
5 years ago maybe. Now Spring market share is shrinking and being replaced with Java EE.
Spring Boot hardly registers in the job market. It is possible it will become wildy popular as its still pretty new. 
Hey man, I am actually in the middle of my Software Guild cohort, the first in louisville ky. I still don't know if I'll get a job, but what I can tell you is they've done an incredible job so far. You are paying for the instructor to be there, and in my case I really couldn't ask for better. Any time of day, or any time during class I can reach out and get individualised help or feedback. The course is **insanely** paced. We just finished the 4th week. We have come from being walked through hello world to building inventory systems that read and write to file, have configuration files and error handling all on our own. We start Spring framework and databases Monday. I've gone from thinking I'm the most stupid person in the room to being on top of the world and back again several times in 4 weeks. It is breakneck speed, the homework and projects pile up. Most weeks I've spent at least a day, if not two in the classroom over the weekend working. I am scared shit less I am doing this for nothing and will not get a job afterwards but I am just focusing on internalizing and practicing the concepts. One thing that did help put my mind at a little ease was comparing job listings and the technologies they want a junior developer to be familiar with to the software guild's curriculum. They basically match 100%, at least for the jobs I've seen. Tl:dr, I can't tell you if any particular program is worth it, because I'm in the storm as we speak. Good luck. 
There are 2 things to consider: find out the good and the bad. For the good: ask the school. They'll give you all the good you need...alumni reviews, success stories, etc. For the bad: Find people currently in the programs and graduates who have a different take on things. 
https://dzone.com/articles/apache-camel-integration
That's good. I unfortunately spent the first part of my career without learning new things and really started to feel it later on, especially when switching jobs. I agree with you on Java. Only thing that makes it a somewhat enjoyable read is Oracle's Java 8 Complete Reference book. 
Look on the web. Look at their website for graduates names or emails. Email those people. There are all kinds of "Ten Best Coding Bootcamps" etc online.
&gt;Why are you so worried about math? Very simple. I have an fairly high IQ and I operate at high speed with most things. Math forces me to slow down a lot... eg: I'm almost always the last person in class to finish the math exam when I was in high school. With English I can whip out a 500 word masterpiece in a matter of minutes, off the top of my head. Math was just so bland and dry that I had a hard time concentrating. I'm concerned that if I get a job, the boss is going to come to me with a problem that I need to solve, and that problem will require algebra, of which I have not taken in over 15 years. I MIGHT be able to do very very very basic algebra if push came to shove.
Good luck to you too....if you remember....can you message me on here with regards to when you get a job after graduating? Genuinely interested in "what happens next" after you graduate.
RemindMe! 3 Months Sure can. Another thing that impressed me about TSG is their 95% placement rate for people that finished the program. That qualifier, did however, stick out to me. There are only 7 of us in this first cohort and no one has washed out yet. I know I have felt like I wanted to on more than one occasion, and I know there have been people quit the Akron camp. 
Sounds like you need a new teacher 
You are going to want to brush up on algebra, not because you are going to necessarily write super intense formulas but because programming is a lot like algebra. Store data in variables/methods and then write those variables and methods out so that they do something with the data. 
This is the first one of these that I actually knew. But website describes it best: "Apache Camel ™ is a versatile open-source integration framework based on known Enterprise Integration Patterns."
&gt; female tech teachers Please explain why you think gender has to do with it. 
I can't think of any reason why Java wouldn't be considered a real language. 
Your teacher needs to step foot out of the world of academia and step foot into the real world. It sounds like her head is so far up her ass, she can't tell what constitutes a programming language anymore...
I think your Java teacher knows that Java is a programming language and probably has some issues with it. Advice: Don't push her too much about the literal statement she made. Just try to learn Java :)
&gt;non file operational purposes What does that even mean? That it's not proper because you can write programs that do things without reading/writing a file somewhere? Because if that's the case, I guess C isn't a language either.
clearly she's out of her comfort zone. I'm assuming you're in a Middle school enviornment in which case I would suggest take another elective that has a better instructor and learn from the many quality online tutorials or Massive Online Courses. Or even better think of a small project you want to do and work through it. Then repeat with even bigger projects.
It can't be nearly as annoying as a youtube video to describe a technical thing.
You expressed yourself fine, it's just you said some ignorant fucking shit. 
Look up! Space is cool! :)
&gt; +600 fixes Since I have been looking at camel 3+ years ago this is the issue I find most worrying, the release feature over 50+ items in the release. Makes me a bit leery of using such a stack
https://analysis.apache.org/dashboard/index/org.apache.camel:camel
The changelog is not really the place where the project introduces itself. However in Apache Camel's case I don't get what the project is about from it's description either.
if you ever have data that needs to move between machines, or across a wan, or to some bizzare endpoint, camel is the way to go. I fell in love with the capabilities about 5 years ago, and every data moving project I do has camel at the core. 
You can execute javascript code from java with the standard jdk. Look up nashorn
TeaVM can transpile from Java to JS. I haven't used it myself; but was planning to use it for a project soon.
might be easier for you to answer this than me setting this all up just to test (and... I did give it a go last year, but it was rather cumbersome to set it all up) Taking data from that queue and putting it in a file... when there's new data, does it overwrite the previous file state? Or does it continually append? EDIT: nm that page explains... &gt; The File FileComponent will take messages off the Queue, and save them to a directory named test. Every message will be saved in a file that corresponds to its destination and message id. That doesn't look at all intuitive, but glad it's explained. 
it's a low effort post but it's nice that i can get notified about major releases for shit i possibly use. if we wanted to break that out into a separate subreddit of just that i'd be game.
Do you already know how to program? Or are you looking to start programming with Java?
Interesting that there has been no updates since version 2.14. Thanks for the link, was not aware apache was running sonar 
Do you really need java, or you just need serveur side calculation ? Cause you could use nodeJS 
[Ten days ago](https://www.reddit.com/r/java/comments/3mymgy/insider_oracle_has_lost_interest_in_java_xpost/).
JSP is not deprecated. JSP is one of the fastest backend templating languages. Do use it....if it fits your needs.
http://www.adam-bien.com/roller/abien/entry/the_return_of_jsps_in JSP's are awesome. Just dont put any business logic in them. If you do any tutorial which suggests lines of code with &lt;% and %&gt; (this is called scriptlets, see below as an example), just go find another tutorial as this advice is well out of date. An example of this is here: http://beginnersbook.com/2013/05/jsp-tutorial-scriptlets/ Avoid scriptlets, and you'll be ok.
so is that a clear no-go to java backend? Or would you suggest something else?
Structure, Sequence &amp; Organization.
"Java backend" and "JSP" are not equivalent. You can have a java backend, with whatever view template engine you choose. Popular options include (but not limited to) Thymeleaf, FreeMarker, and Velocity.
That might work. I don't think we need to ban posts about new versions being released. But require them to have some information about what the library is and what is interesting about this release.
&gt; JSP is not deprecated. [Yes it is](http://docs.oracle.com/javaee/6/tutorial/doc/giepx.html): &gt; JSP technology is considered to be a deprecated presentation technology for JavaServer Faces. And that with JavaEE 6, that is since 2009. Edit: Apparently lots of people never heard about JSF or know the difference to JSP? Downvoted into the negatives for quoting the official source. This sub gets more ridiculous every day. 
As a full stack Java developer, I can say there is no reason to learn JSP unless you are supporting legacy code. If you are looking for a Java solution to web development, then JSF with facelets is the way to go.
If you're starting fresh, try to learn some client side technology that is more dynamic. JSP were the craze a few years ago(can I say a decade?), but of late, everyone's been moving to newer technologies.
It is a deprecated presentation technology for Java Server Faces.... What about if you are not using JSF? 
Bad example, don't ever use exceptions for control flow unless you absolutely have to.
It is now deprecated, but if you travel back in time to the last official supported JEE version (JEE 5), you can get some nice information on the official JEE tutorial. http://docs.oracle.com/javaee/5/tutorial/doc/bnagx.html 
What about Spring MVC? 
That sucks for large projects, server side templating is still the way to go. 
For server side rendering: Play framework or Wicket. 
jsf - jsp - servlet. jsf more modern than jsp.(html5 etc.) If you choose java ecosystem you can check spring or jsf+primefaces. Check out mkyong.com it's really simple and elegant.
I recently started messing around with jsp in my free time. I got some stuff working, and am now writing a tutorial (in Eclipse EE) which I'll present to work colleagues. It's not finished yet, but if you're interested pm me and I'll get it to you.
I'm surprised that they don't at least recommend the use of * @tainted * @secured etc...
I agree. I would prefer something like this: public class InfiniteFizzBuzz { public interface FizzBuzzMatcher extends Function&lt;BigInteger, Optional&lt;String&gt;&gt; { default Function&lt;BigInteger, String&gt; otherwise(Function&lt;BigInteger, String&gt; next) { return i -&gt; apply(i).orElseGet(() -&gt; next.apply(i)); } } static FizzBuzzMatcher matching(Predicate&lt;BigInteger&gt; matcher, String outputIfMatching) { return i -&gt; matcher.test(i) ? Optional.of(outputIfMatching) : Optional.empty(); } private static Predicate&lt;BigInteger&gt; dividesBy(int divisor) { return i -&gt; i.remainder(BigInteger.valueOf(divisor)).equals(BigInteger.ZERO); } private static final Predicate&lt;BigInteger&gt; shouldFizz = dividesBy(3); private static final Predicate&lt;BigInteger&gt; shouldBuzz = dividesBy(5); private static final Predicate&lt;BigInteger&gt; shouldFizzBuzz = shouldFizz.and(shouldBuzz); public static Stream&lt;String&gt; fizzbuzzes() { return Stream.iterate(BigInteger.ONE, i -&gt; i.add(BigInteger.ONE)) .map(matching(shouldFizzBuzz, "FizzBuzz") .otherwise(matching(shouldFizz, "Fizz") .otherwise(matching(shouldBuzz, "Buzz") .otherwise(BigInteger::toString)))); } public static void main(String[] args) { fizzbuzzes().limit(100).forEach(System.out::println); } }
 $ 500.000
He never said anything about full stack development. He asked specifically about using his Java experience. Learning html and css is obvious for web development. Edit: and JSF absolutely does not abstract all of that away. HTML and CSS are as important in JSF as they are anywhere else. 
Yeah, but the big problem with that is that Oracle likes money. And if they can't get any money from something they own like Java, they really don't want anybody else using it for free.
I use modules for different aspects of the same project. This makes it easier for my applications to share code. So for instance I have a core module with utils stuff, a webapp module with generic war-specific stuff and finally my applications which could be both a simple command line tool and a full blown webapp.
Go somewhere else to advertise.
Checkout sightly, and java back end is definitely still relevant, not going out of style anytime soon so don't worry about that. 
&gt; I seriously think Oracle should just get out of managing Java and let the open source community handle all aspects of the Java releases. Oh great, like Apache perhaps? Where projects go to die? Whether it's sad or not, but pretty much only successful bigger projects that are open source managed are able to do so because big companies sponsor them. When that doesn't happen, you get stuff like Geronimo, that "they" (that benevolent always friendly open source community) let die in such a painful and slow way that even sending a small announcement out of the door that Geronimo was discontinued was already too much for them to ask. Don't get me wrong, I love open source, and having the source is essential for me. But even developers can not live from air and water alone while living under a bridge. Eventually money needs to come in if only to buy the bare essentials (don't even think about anything beyond the bare essentials, a programmer should live only to work 18 hours per day to provide YOU with free software). Since YOU are not paying a single penny for all that wonderful open source, the money HAS to come from elsewhere. And that's where Oracle and friends come in. Like it or not, but that's how stuff works. As an alternative, please sponsor your favourite open source project by sending them some money. But of course you're not going to do that, are you? You *may* consider it if only they implemented feature X or Y, and when surprise surprise they implemented that you are surely going to pay when they do feature Z. And years later, you never payed a penny to any project, but Oracle, IBM, Red Hat and others who do pay are the bad guys? :X
&gt;The point of Java is that most developers should not need to know how things work under the hood. Within a team of 6, it should be sufficient if one guy knows Java under the hood, the other 5 can focus on programming using Java as a black box. Your team must think you suck! 
OP if you found anything useful, please share. I am here for the exactly the same question as you were... :) 
&gt;My personal ideal is java on the back, JavaScript on the front Ahh... The reverse mullet approach. 
&gt; jsf more modern than jsp.(html5 etc.) Oh my, the ignorance of this. If anything, JSP is more akin to html5, as you can put anything you want in it. JSF has part client, part server, component based stuff to consider. JSP you just throw in HTML5 and it'll work no probs.
Be careful what you wish for. Big and painful, but very necessary updates like project Jigsaw would be nearly impossible to carry out without the focused efforts of a "corporate overlord" sponsoring the effort morally, in terms of workforce and financially. It doesn't have to be Oracle, but it should be someone that the community clearly recognizes as the "project owner" to some degree.
I think you replied to the wrong comment lol
I've done Spring with JSP many times. Spring is view agnostic.
I'd like to avoid using javascript. I realize it's pretty common to use spring (or dropwizard, et al) to build a rest api via jax-rs and have a front end framework, but I'm not comfortable with angular yet and I'll only have eight weeks. Plus I have no idea what skills a potential group member will have. 
I think it depends what you want to get out of it. Do you want to explore another language and/or framework to see what it's like &amp; maybe pick up some new ideas you can use, or use something you're already familiar with (spring boot/mvc/etc) and dig a little deeper into the framework than you could in your day job or explore a bit more of stuff you have less time/don't get involved in. If you don't have a preference &amp; you'll have to work with another dev you could discuss it with them and see which they prefer. What you consider good for job prospects might not match up with whoever you work with if they're planning on staying in academia or working in an environment with different priorities than what normally drives decisions on what stack to use in traditional businesses. I'd suggest trying something different that's easy to get started in (good docs, easy to get up and running) &amp; then focus on the things you want (security, performance, usability, etc) since it's more likely to give you exposure to tools &amp; ideas you might not see or use, but both options are pretty good.
I bet you'll end up using javascript to some degree. I.e jquery. I found css to be more time consuming then angular to learn. Take a look at the source for the sping.io site on github. 'sagan'. It doesn't use a js mvc frontend.
Grails is a good choice. A RAD framework built on Spring-Hibernate. I recommend using latest Grails 2 version as most of the plugins are still 2.x. If you want the latest and the greatest underneath(Spring Boot), then Grails 3 is a good to go :)
Upvoting you and you alone because you are the only person here who seems to have read the OP's question and not gotten distracted with your own headspace in answering. /me checks to see if I can afford the downvotes this will get Nope. Meh w/e
If you're open to non-Java languages, almost all my programming experience was Java until this week when I dove straight into Ruby on Rails and it's been a blast to learn.
it is, and it can be used sucessfully. However, that doesn't mean that it is liked.... For example....this blog: http://spring.io/blog/2012/10/30/spring-mvc-from-jsp-and-tiles-to-thymeleaf/ And the fact that JSPs dont work in Spring boot. 
First you have to figure out how to get this live data. I don't know whether there are public APIs available that you can use to get this data? (e.g. is there a way that you can send a simple request to Amazon and get the data that you want back?) If there are no API available then you have to figure out how to get the data. Parsing/scraping could be an option, in this case you load the HTML website in your server and extract all the elements that you want. Only once you have this data you can save it into a database (using Hibernate) and build a site around it to display it (using Spring).
I second Vaadin when I saw that OP want to avoid JavaScript. Vaadin uses GWT, a frontend framework that convert Java code to JavaScript.
Can I use java with grails (I realize groovy is a jvm language and similar to java)?
(please note that I'm the main JHipster author) Here is the website for JHipster: https://jhipster.github.io/ The back-end looks a lot to what you are looking for, but please note that the normal front-end is built with AngularJS (it's very easy to use, but as you say you want to avoid JavaScript, you might prefer to go with Thymeleaf, which also works out-of-the-box with JHipster, but is not the preferred solution). JHipster is often used in hackathons and startup projects, as its main goal is to bootstrap your project, and make you productive immediately.
What?
It depends on what you are trying to create. If you just need a STATIC webapp, i.e. one which shows static pages with some forms or links, you will get by with a simple web framework/templates. If you want a DYNAMIC app, you will need Javascript. How much depends on how dynamic you want your webapp to be. Things like Vaadin/GWT are good if you want to write a very dynamic one-page webapp (https://en.wikipedia.org/wiki/Single-page_application) without writing any Javascript. It will translate Java =&gt; JavaScript for you. Sites like that are quite good for intranets where latency is low and high level of interactivity is often required. But programming it feels more like writing a desktop Swing app than a web-app. If I had to write something that is supposed to face the world and have millions of users on mobiles/slow connections, I would probably go with hand-written javascript with one of JS frameworks out there. Given lack of JS scripting knowledge in your team and 8 week deadline, I'd either write a static webapp, or seriously consider Vaadin if you need an interactive/dynamic one. But Vaadin has its own learning curve, and 8 weeks isn't much...
FOUND THE TERMINATOR. QUICK TAKE 'EM OUT BEFORE SKYNET!
Yup. There are also pretty good practical reasons for wanting JS rendering on the client side. With the newer frameworks you can still do all the same templating that you would have done server side. Javascript and the tools around it have significantly evolved since the jquery days, clean modern javascript isn't that bad to work with (So long as you have the tools around it). The claim that Javasript is bad for large projects is something that I think needs to be re-evaluated. In the last few years javascript has really blossomed into a "real" language. It still has a lot of warts, but the tooling around it have started to smooth those out.
What does this have to do with Java? :)
Exactly. -1 to the thread
I am not sure what you are using a build tool but Maven helps. Also this is mostly a Spring problem because everything is non standard and the dependencies are almost impossible to get straight. Using a Java EE server like TomEE and everything will work together.
There is no solution. Maven enforcer with upperBoundsDeps=true helps though. Also, check out Gradle and it's newset conflict resolver. Maven dependency:tree -Dverbose=true is another aid. Rarely are things truly incompatible - most likely you have an older version winning out over a newer one. But in the rare event that two libraries really do have a transitive dependency conflict, you have to use maven shade to rename all the namespaces. Finally, checkout the graphing capabilities of Maven dependency tree. (I think the option is -DoutputType=dot)
Don't listen to Spring-haters. They don't use it, so they don't know sh**. I use Spring for over a decade now and I ran into this problem twice. Once with slf4j and the other time I forgot. Anyway: use Spring BOM &amp; Maven / Gradle (Maven is much more mature), don't use obscure dependencies and for 99,999% you'll be just fine. 
It does JSP, EL and WebSocket as well, so it's not just a servlet container. Arguably, JSP is very close to Servlet, but it's still a different tech. EL is by itself quite different from Servlet, especially now that it's a standalone language as well, but it's somewhat required by JSP so there you go. WebSocket, I don't know. It's a different thing too, but very close to an "http engine" still. Jetty does WebSocket too. JASPIC is about functionality Tomcat already does in a way, just using its own API. So I guess the argument goes both way. It's not 100% a Servlet container, but all the additional things it does are very close to Servlet. 
You're right. As you say it is not just a servlet container but the extras are pretty close to it. But the Web Profile is a different beast compared to that. And seriously, if you want an applicaiton server just use Payara. I (and I guess they) don't see a reason to implement the whole Web Profile when you have Payara (or TomEE, but I have not used it) as an option.
Sounds like YOU want to avoid JavaScript, but does your partner? You might consider a REST api with one person doing front end and one doing back. I've come to like play framework for java (which also does MVC) for REST projects.
There is also Tomcat JDBC pool, Injection of JNDI resources, JAAS Security. It is quite a capable server. Why would adding JSF to the mix be bad.... it is certainly in the same area as servlets / JSP. If tomcat has injection of JNDI resources, then its only a small leap to include injection of beans (CDI). 
Yep, I can't even remember the last time I had a spring dependency issue that wasn't easily handled by just upgrading the versions of the dependencies to the latest. If you are required to use some old version of a dependency because of pre-existing code then you may run into an issue, but if you are in control of the code, most of the time it can be updated to be compatible with the latest versions of dependent libraries.
Yeah, that was my thinking, and the tool would be Spring (by way of Spring Boot). I don't think it would be unfair to my potential group members either because there are a billion of Spring jobs (the school is UMUC, which is online, but most people either live near DC or are in the military -- in other words, Spring will be a boon to resumes).
I don't have a team yet, but I'm anticipating no JS knowledge, no Spring/DropWizard/Vaadin knowledge. And yeah, I guess I should have stressed it more, but you seem to understand: we have 8 weeks. I've googled the class and in previous semesters I've seen people create not-too-complex swing apps. I don't think the bar is set too high. 
I think creating a static application is feasible. Although I'm not sure yet as the class begins next week. I could, as a part of the class, pick up ember or angular and be the person to implement that. Or I (or the group as a whole) could use something like JSF or Vaadin. I honestly don't have much interest in creating a desktop application. Especially since all my experience is with Swing and ideally I would use JavaFX, so I would have to pick that up anyway. 
I did a search for "Java Spring" on resumes and found quite a few. Compared that to java + other frameworks and the number of search results are usually quite lower. Not 0, but lower.
Experience with any of the frameworks mentioned here will be helpful. There are important similarities between all of them. That said there are also distinctions as well. Starting about 4-5 years ago there was a push away from the huge monolithic frameworks toward simple systems. So for example, Spring was out while Dropwizard was in. I would say really that it's a split of sorts, not everyone and all companies took the new tack. For yourself and your co-project-folks, you might want to think about where you want to take your careers. On average it's the larger more established companies which are using the larger frameworks, and the hipsters which are using things like Spark or JHipster. Another things to consider is because the smaller frameworks are actually smaller, you will be able to become closer to an expert on these in a shorter period of time. The full Spring suite of project is huge ( though modular ). Finally, I don't know much about what you are building, but from a distance it seems like the majority of the complexity will actually be on the front-end. I highly doubt you will be able to build this without digging into javascript. So I would starting looking for the best framework to do what you need to do ON THE FRONT END. and then worry about a backend after you work that out. On either the front or backend, I would take people's word for the best thing to use. You will find that everyone is ( sadly ) very Jingoistic and basically hype what they know. Instead pick 3-4 frameworks and spent 2-3 hours trying to build your project in each. THis is like breadth first search. Once you've done that you'll know which one works best for your use case. WRT the breadth first search. One thing I've found is that there is an inverse correlation between how easy it is to get started using a framework vs how far it will carry you in the long run as the complexity increases. So something like Roo or JHipster or Ruby on Rails, seems really straight forward for the first month or so. But 2 years in you might be wishing for something which is complex to start, but which has more long term depth. 
Yeah, after reading some of the comments here, I may try to buckle down this week (class starts next week) and pick up a javascript framework pretty quickly.
exactly....!
&gt; I am not sure what you are using a build tool but Maven helps. Yes! Have an upvote! &gt; Also this is mostly a Spring problem because everything is non standard and the dependencies are almost impossible to get straight. Have a downvote :(
Anyone who frequents this subreddit knows who posts this crap, and with whom they are affiliated. Too bad it's targeted to the ignorant, those with no personal experience in the subject matter. A few years back an app servr product manager actually came here to claim that Spring adds hundreds of megs of dependencies. At least he did it under his own name, respect for that, unlike these anonymous guys.
I think there are legitimate reasons to hate on Spring but dependency management isn't one of them. It's exactly as you say use the Spring BOM and Maven/Gradle/Ivy and you should be good to go. (Personal preference is Maven.)
use maven for dependancy management...from there, you can write a file that invokes maven and checks the POM for consistent versions. manual dependency management is madness. 
That actually looks neat. I tried importing it to Eclipse, but you need to publish it under some licence. It only says "SD" for me.
slf4j is the biggest and probably only offender. Everything else is usually because you fucked it up yourself.
While this is cool, I never had a problem with the Paxos implementation in JGroups. Used it successfully many times to hand-roll some shared state across nodes. I suppose raft is the new hotness, and that's what people might be searching for specifically, so... that's cool. 
This world desperately needs more blogs reiterating the same shit documented in 10000 other blogs and in the Spring reference docs. Wait no... no it doesn't...
Can you point an example? I throught slf4j-api has a very stable interface.
&gt; We covered Spring and will cover Hibernate soon. But I dont feel very comfortable with those technologies. Yeah that's no surprise at all. Learning Spring and then especially learning Hibernate sounds like a miserable way to learn Java.
Can you forward the info to me? Thanks 
Spring's documentation is terrrrrrible .... unless it is their new fav toy Spring Boot. Friend of mine made a "ready to go" repo with everything needed to get a Struts 2, Spring, Hibernate, DWR Ajax, jQuery, and MySQL application going. https://github.com/AnnuletConsulting/BlankStruts2HibernateWebApp
Sounds like solid advice
&gt; It does JSP, EL and WebSocket as well, so it's not just a servlet container. I find the terminology confusing as hell. If we want to be ultra pedantic, we have to say Catalina is the servlet container. Tomcat simply combines Catalina, Coyote (HTTP), Jasper (JSP) and other features without cool names. Just like an application server does with many more.
Thanks! I'm not experienced with licences and public code. Can you please let me know what exactly should I do? 
As others have said WAS classic has a lot of functionality built into it, so when we update it we do a good job on updating everything. Liberty is one of the first Java EE app servers to support the EE 7 full platform spec, which adds WebSockets. Liberty is also one of the only Java EE 7 runtimes supported in production (WildFly &amp; Glassfish are not supported by their vendors in production btw). We could have held the Liberty support for EE 7 back to wait for WAS Classic, then we'd be on the same timetable as many of the other runtimes out there. That would have been bad for our users, so we released it when it was ready. If you want WebSocket support then deploy to WAS Liberty - it's supported and used in production today, and if you have a WAS 8.5 license then you can use that for Liberty or Classic servers, so we aren't charging extra for that. I'll repeat that if you are seeing issues moving applications between Liberty &amp; Classic then I would like to know what they are so we can investigate. If you don't want to post them here feel free to email me and I'll be happy to help :-) (tom.banks@uk.ibm.com).
I'm not sure that I love the syntax, maybe I just need to get used to it. I was skimming a little, but if you are using spring data jpa then it's a very small leap to spring data rest which will give you a lovely cruddy rest service out of the box with a lot less work than this.
Probably not the best name for a new project considering there is a [much older one with the same name](https://x-stream.github.io/).
I was aware of this, I hesitated between UStream (for Unix Stream) and XStream (uniX Stream) and finally decided to go for XStream..
What makes you say that? We did cover core Java as well. 
So you consciously tread on the feet of a relatively well known project's name? Why? UStream would've been fine I think. (Incidentally both UStream and Xstream are names of streaming product providers. That's hardly surprising though.)
because you aren't using it correctly?
It doesn't quite work like that in this ecosystem. People rarely build specific use case tools like form builders in java. What you will see are people building forms with angularjs (or some other js framework) and using a java rest backend to process the form data usually sent in JSON.
Neat project, but I think it would be better (and simpler) to just provide Unix utils. That way your work can be composed and used in other contexts. Stream.of("foo", "bar", "bar", "bad") .filter(XStream.grep("a")) // just a predicate .sort() .distinct() .map(XStream::nl) // just a function .forEach(System.out::println);
Please consider renaming your project. [XStream](https://en.wikipedia.org/wiki/XStream) has been around for over 11 years.
Good point, but the idea is to have a minimal syntax that mimic unix commands (so that unix/linux CLI fans feel at home :-) ): XStream.from("foo", "bar", "bar", "bad") .grep("a") .sort() .uniq() .nl() .to(stdOut()) is more concise and "unix-like" than: Stream.of("foo", "bar", "bar", "bad") .filter(XStream::grep("a")) .sorted() .distinct() .map(XStream::nl()) .forEach(System.out::println); All components use predicates and map functions behind the scene. &gt; That way your work can be composed and used in other contexts. The API is compatible with the standard Stream API, you can do this: XStream.from("a", "b") .filter() .map() . // any method in the standard Stream API Just wrap any Java 8 Stream in an XStream with `XStream.unixify` to get access to unix commands like operations and unwrap it with `XStream.get` to get the original Stream if you need it
&gt; As the very old saying goes, "No one got ever fired for choosing IBM." They should get fired for choosing WAS over open source. Which has support options available.
&gt;Survey Confirms JSF and Spring MVC are Most Popular Java Web Frameworks FTFY Really? .3%? Come on people. I'm not taking sides but this is just BS. That has to be within a margin of error. This was also [already discussed here](https://www.reddit.com/r/java/comments/3nuadi/survey_confirms_jsf_remains_leading_web_framework/) 6 days ago.
 XStream::grep("a") This is not valid Java.
Sorry, you can do `XStream.grep("a")` and return a predicate instead.
PipeStream?
What is it? I clicked several places on the web site and still couldn't tell. Please put your "CUBA Platform is..." elevator pitch upfront and in my face. There is a good first sentence on the main page (which isn't where I went first) but this needs to be expanded to a paragraph either below or on the "About" page. If all I see is buzzwords I am probably going to wander away quickly (I did...). Providing answers to my likely questions #4-#10 (does it support Java 8? Eclipse? etc.) doesn't help if I can't quickly find the answers to questions #1-#3 (What?,Proof?,Price?)
I like pipestream. BUT BUT 1) class in .NET with this name and 2) library on codeproject with this name. 
&gt; All components use predicates and map functions behind the scene. You might consider exposing these as XStream.grep, nl, etc then. That way developers could use either style.
There are already [two styles of syntaxes](https://github.com/benas/ustream#how-to-use-it) you can choose from, and if I understand well, you suggest to expose predicates and transformation functions used behind the scene with static methods so we can use them with the standard Stream API like this: Stream.of("a", "b") .filter(grep("a")) .map(nl()) right? There is already a [utility class](https://github.com/benas/ustream/blob/master/src/main/java/io/github/benas/ustream/Predicates.java) exposing commons predicates and I think we can add them there. I can also create a similar class for common transformations which would return Functions to use with the map operation. What do you think?
Good idea, this will be added in [this class](https://github.com/benas/ustream/blob/master/src/main/java/io/github/benas/ustream/Predicates.java) that returns commons predicates. A similar class will be created for commons functions to use with the map operation ;-)
I don't recommands NetBeans, but yes PrimeFace is really awesome for business.
I guess you look for component-based web frameworks for java. You might want to look at JSF2 implementations, or frameworks like http://wicket.apache.org/ or http://tapestry.apache.org/ (see http://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/BeanEditForm.html). But those things do much more than just creating forms... I also recommend to look at https://vaadin.com/ and http://erraiframework.org/.
Yes very true!! About the fuckup, can't comment on slf4j.
Is JavaFX dead?
There are only two hard things in Computer Science: cache invalidation and naming things. -- Phil Karlton 
No
Counter isn't the problem, as you're not using it as an index value. I suspect that j is exceeding the length of words. If you enabled line numbers, you'd know where the error was occurring.
that's correct. therefore, be careful with what plugins you install, remove those unneeded and you should be a happy camper. should you install this plugin? no idea, up to you. if you need it, go ahead, im sure there are worse offenders out there.
http://mrhaki.blogspot.com/2008/05/enable-line-numbers-in-netbeans.html
has nothing to do with javafx. nobody in their right mind would write a javafx-based applet. go to java-web-start or just provide downloads to your application (with installer and all) or just do everything html if possible.
Are you sure that you changed ALL the i references?
Well, the entire method is in the picture. I dont see any I missed.
&gt; Mozilla intends to remove support for most NPAPI plugins in Firefox by the end of 2016. Firefox began this process several years ago with manual plugin activation, allowing users to activate plugins only when they were necessary. This decision mirrors actions by other modern browsers, such as Google Chrome and Microsoft Edge, which have already removed support for legacy plugins. Moreover, since new Firefox platforms do not have to support an existing ecosystem of users and plugins, new platforms such as 64-bit Firefox for Windows will launch without plugin support. I wonder if this will put pressure on oracle or a 3rd party to come up with an alternative to NPAPI applets. Consider features like the GeForce driver detector at nvidia.com. That is currently implemented as an applet. Is this a thing that could be implemented in Flash or similar?
Okay, so I outputted it vertically and [this is what is shows](http://i.imgur.com/KHR3VAE.jpg)
Also take a look at: - https://github.com/jhalterman/sarge - https://github.com/jhalterman/recurrent ---- *Sarge* is for simple object supervision (for when stuff goes wrong) Sarge creates supervised objects which automatically handle failures when they occur by performing retries, state resets, and failure escalation, allowing for easy and robust fault tolerance with little effort. ---- *Recurrent* is a simple, zero-dependency library for performing retries. It features: - Flexible retry policies - Synchronous and asynchronous retries - Asynchronous API integration - CompletableFuture and Java 8 functional interface integration - Invocation Tracking - Event Listeners - Supports Java 6+ though the documentation uses lambdas for simplicity.
It's appealing, but I really hate the lock-in.
&gt; That sounds like a liability. Nobody knows where Jetbrains will go with Kotlin, Gradle was written in Groovy eight years ago and at the time, Groovy's status was even more uncertain: written by a couple of guys, one of whom was about to move on to something else. Today, it's pretty well accepted that the only reason why Groovy is still alive is because of Gradle. 
Looks good! Nice functionality. You might want to randomize the sleep amount on the exponential backoff, so that multiple tasks doing retrying won't end up at the same interval. 
I know most if not all of the "batch" programming language (aka the windows command prompt) then I decided to try out c++ to see what I could do. It was very difficult so I decided to try java to make simple games and here I am today
It doesn't hurt to learn both. The key is to familiarize yourself with good Object Oriented Programming habits, learn the syntax, and learn how to turn an idea into a program. Learn the software dev lifecycle, learn how to use numbers to control things. There's a lot to learn. It takes time. Keep that goal of making an Android game in mind, and set little goals on the way to it. 
For the most part, Java is Java. You'll be making progress quickly enough that it makes sense to start with what you actually want to be working on, so I say start with Droid. However the deploy-test steps on Droid are very slow, so you will also want to be familiar with the desktop side of things. That'll allow you to learn and try non-Droid-specific things, more quickly.
There are some extremely good and free *Java* tutorials around: + [Java for Complete Beginners](https://www.udemy.com/java-tutorial) by John Purcell, free on Udemy.com and on John's site [CaveOfProgramming](http://caveofprogramming.com) + MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html) from the University of Helsinki (in English, of course) - which is hands down one of the best courses for Java in existence. They should help you getting up to speed relatively quickly. It's really better to use the IDE that is used with the tutorial and then move on to Android.
Thanks, sorry for the duplicate
It definitely helps if you enjoy what your building. I started with games too, I think games demonstrate the need of oo design and good design overall. 
It's definitely possible to make a simple 2D game in Java! There are a good few frameworks out there that can help you as well, such as [libGDX](https://libgdx.badlogicgames.com/). You could also go even more lightweight with [LWJGL](http://www.lwjgl.org/), which is what MineCraft uses. There are also a few discontinued libraries that are still perfectly usable, like [Slick2D](http://slick.ninjacave.com/). I'd probably recommend libGDX to get you started. Work through a few of the tutorials, and then aim to make something *very* simple - Tetris, Pong, etc. are all good choices. Also, you should check out /r/gamedev.
I am not sure whether you agree or disagree with me.
Probably better to look at HTML5 rather than Flash as a solution
Java is easier than C++. Maybe that has changed with recent C++ releases, but an extensive standard class library &amp; memory management make Java significantly easier. I like C++ as a language, but it requires much more experience to be productive than Java does. I'd trust a Java developer with 3 years of experience to do some things that I would not trust a C++ developer with 6 years of experience...
https://unity3d.com/ is the correct link. ~~Not sure if unity.com is official or not.~~ EDIT: It is official, but it is the showcase website vs where you'd actually learn about or download the engine.
Thanks for the correction!
I'll look for something more in depth later but basically it's like EAP's domain mode but for Fuse. It allows you to create sort of a configuration management system for your Fuse systems whereby you can have various profiles and then assign those profiles to members of the fabric. The profile can be configuration related or manage the jars/bundles/etc of each instance that has joined the fabric. It's actually very neat and from what I understand future versions of the JBoss Management (like JON) tools and maybe even Wildfly/EAP in the future will make use of Fabric.
Whether it is the right language for you depends on what programming languages you know, what kind of 2d games you want to create, what plattform you target. You can expect there to be more helpful resources around where many other people program 2d games, such as flash games, or games for android/iOS.
I don't see how using lambda like this is different from Google app engine. It's been around for years and is more flexible.
If it's published on Maven Central, yes. The information you need is in the Maven metadata file there. For example, take a look at [the metadata for `javax.mail:javax.mail-api`](https://repo1.maven.org/maven2/javax/mail/javax.mail-api/maven-metadata.xml). The current release version is listed in the `&lt;release&gt;` element. If it's different from the current version, then fetch the jar for that version. That said, I'd suggest fetching an *installer* and running that. Otherwise, you won't be able to update the JRE or change any JVM settings (like max heap size) in future versions of your program. Not sure how you'd go about publishing such a thing on GitHub, though, and I doubt Maven Central will publish installers.
Why don't you use the tools that are already part of Java? https://docs.oracle.com/javase/8/docs/technotes/guides/deploy/packaging.html#BABFECGG https://docs.oracle.com/javase/8/docs/technotes/guides/deploy/self-contained-packaging.html 
How is this supposed to perform well? JIT compilation is specifically, strictly forbidden on iOS, and HotSpot relies heavily on JIT compilation for performance. AOT compilation is basically mandatory on that platform.
I don't have much experience with Java, but it's possible. Don't listen to the people saying anything about Garbage Collection, for simple 2D games this is pretty much never an issue. But can I convince you to use C# with Monogame, it's a very mature game engine and very easy to learn.
&gt;do everything html if possible. Ugh. Please don't do this.
it beats having an applet by miles.
I thought Oracle was losing interest in Java. /s
From TFA: &gt; The resulting environment could produce static Java runtimes and modifications to the Zero interpreter needed for iOS devices.
Add [progamming by doing](https://programmingbydoing.com/) to what you said. Best way to start
Eap/standalone/deployments There are several ways to start it. You can add a marker file "warname.dodeploy" and then run eap/bin/standalone.bat (or.sh if linux)
I do use Maven. Will that **prevent** me from using v2.1 of A with v4.7 of B, even though there are answers on SO saying they're not compatible? Seems to me that Maven will let me do what the hell I want.
If you use libGDX it creates a HTML5 version of your game for you and it creates binaries for other platforms as well. 
There are already some tools for creating java applications with bundled JRE. If you want to implement auto-update then you should take care of updating the JRE as well. There are some relevant differences when it comes to behaviour even between minor versions in JavaFX (e.g. 8u40 vs 8u60).
Absolutely Web things! Say it again!
Also, make sure you're standalone configuration enables auto deployment. In standalone\configurationstandalone.xml, make sure you see something like: * &lt;subsystem xmlns="urn:jboss:domain:deployment-scanner:1.1"&gt; &lt;deployment-scanner path="deployments" relative-to="jboss.server.base.dir" scan-interval="1000" auto-deploy-exploded="true"/&gt; &lt;/subsystem&gt;* As long as scan-interval isn't 0, it should auto-deploy in that amount of milliseconds.
Take a look at: + [Java for Complete Beginners](https://www.udemy.com/java-tutorial) by John Purcell, free on Udemy.com and on John's site [CaveOfProgramming](http://caveofprogramming.com) + MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html) from the University of Helsinki (in English, of course) - which is hands down one of the best courses for Java in existence. as supplements to your course. They can help you to understand concepts better. ---- The following are additional resources that you should make frequent use of, especially the Java Documentation: + [Oracle Java Tutorials](http://docs.oracle.com/javase/tutorial/) + [Oracle Java SE Documentation](http://www.oracle.com/technetwork/java/javase/documentation/index.html) Use the Java Documentation heavily and always when you're in doubt about a class or method. It is really helpful. Here is a simple trick to quickly get what you are looking for: google *"oracle java &lt;classname or method name&gt;"* to get the link to the Oracle documentation in the top results. ---- Last, the style guides: + from [Oracle](http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html) + from [Google](https://google-styleguide.googlecode.com/svn/trunk/javaguide.html) Read them and follow them when you do program. They are made to enhance the readability of the code and also to make troubleshooting easier. Since these are standards, it's good to learn them as early as possible in order not to form any bad habits. ---- Taken from /u/desrtfx's recommendations in many other threads.
Good to know, I hadn't looked into how the javascript version was made.
Yeah, and because JIT compilation is specifically prohibited on iOS, it won't even use Shark. It'll be purely-interpreted Zero. This is going to be slow as molasses.
Three methods, all of which will effect a "hot-deploy" (app starts automatically) 1. Copy to the deployments folder. Can be done with server running. 2. Via admin console (http://localhost:9990) &gt; Manage Deployments &gt; Add 3. Via CLI: connect deploy /path/to/your/war See https://docs.jboss.org/author/display/AS71/CLI+Recipes for more info on CLI (EAP 6 is roughly same as AS 7.1)
Okay I will have a look, thanks a lot!
As far as I know it is the vanilla JRE. Trimming will come in Java 9 though, via the new Java linker tool.
Don't forget games have to do lots of things that regular programs do. Read files, images off disk. Parse json. Update database of scores online, etc. Java is great for that stuff.
Naah. Minecraft is already done.
this is super cool, hope spring boot integrates it
my bad then (also, you used /r instead of /u)
Paul Krill from JavaWorld... Yesterday: [Insider: Oracle has lost interest in Java](http://www.javaworld.com/article/2988180/core-java/insider-oracle-has-lost-interest-in-java.html). Today: [Oracle considers a new effort to develop mobile Java apps](http://www.javaworld.com/article/2990440/mobile-java/oracle-considers-a-new-effort-to-develop-mobile-java-apps.html). Tomorrow: Insider reveals: Oracle will Open Source their database
No, this is just about applets as deployment method. Everybody is very happy that applets are dead now.
The problem is actually trying to put an application inside a browser window. The web was intended as document-oriented system and the browser is just a fancy document viewer. Then we started to put interactive elements inside the documents and now everybody wants to have a full application inside the browser. And it sucks because the browser was not intended to be an application platform. It might suck slightly less depending on the technology you're using (HTML5/Flash/Applet). Modern browsers are getting better at this by implementing more and more services which are normally provided by the OS. But in the end the user experience still isn't perfect. The only reason why everybody is doing this is the easy deployment process of webapps.
There are couple of open-source games written in Java, which you can use as inspirations. The largest one I know is /r/terasology but it should be easy to find more with a quick search on github.
I'm thinking of having a run at the JIRA that got opened to track it as a result of the article. But yes - I definitely agree that it would be great to get this into Spring itself. 
Looks interesting - any support for the JSON-API spec?
Sure, but that doesn't mean it's easy. What I mean is - is there any first-class support specifically for the JSON-API spec - making it easy to return JSON in this specific format? If there's not - getting the Resource/DTO in that exact format, adhering to the constraints that this spec puts forward is going to be a very manual, quite complex process. Hope that clears things up. Cheers, Eugen. 
tks...fixed!
Also, there are some great annotations in this area: http://stackoverflow.com/questions/19131094/annotation-called-threadsafe
I agree - the servlet is an all-or-nothing approach, so not very flexible. That's why Spring integration would be better - because that would indeed mean going with Jackson (for example) for the marshalling / unmarshalling of the Resources. As for the persistence aspect - sure - that can be anything (since it's not really relevant for the API part). 
Why do you think they wouldn't do AOT compilation to native code?! Specially when so many third parties already do it.
Is it free? 
Because Zero isn't that. It's an interpreter.
So what? We don't know what they will actually use. Even Oracle is now implementing an AOT compiler for the reference JDK, planned for after Java 9 as presented at this year's Java Language Summit. Also they had the RoboVM guys do a few presentations at Java ONE.
IntelliJ IDEA 15's Debugger introduces support for lambda breakpoints: https://www.jetbrains.com/idea/nextversion/#debugger
Neat. I only skimmed it, but it sounds like I could use this in the future. I haven't done as much as I would like to with JSON, this looks like the best way to get back into it.
That is WONDERFUL thank you! 
&gt; Head First Java I can second this, This is what my teacher used when I basically had no experience, and now i'm a full Software Engineer and have been for 4 years. Also discover Stackoverflow.com, it will save your life. Just make sure you are getting help/asking questions and not cheating and having others do your work for you. Good luck. PM me if you have any questions. 
r/libgdx/
Merging Hypermedia with JSON is quite nice. I've only started exploring JSON-API myself, but I'm definitely planning on going more in-depth going forward. 
Head First Java all the way. I would recommend it even if you had a great teacher as its explanation of Object Oriented Programming is the best I have seen anywhere. However, assuming this is your first class of a CS degree, don't start panicking yet! Bring your concerns to your professor as it is unlikely you are the only one struggling. 
I'm genuinely curious how you came to that specific number.
and http://mvnrepository.com/artifact/org.eclipse.jetty/jetty-server/8.1.18.v20150929 http://mvnrepository.com/artifact/org.eclipse.jetty/jetty-server/7.6.18.v20150929
Assume 2000 work hours in a year, divide by 3, and subtract a week or two. 
This is Stanfords Intro to programming course in Java. https://www.youtube.com/playlist?list=PLFE2A69D0EA1C22B3 It's long but it's an awesome course and the teacher is amazing.
I always buy the Head First titles when I want to learn something technical... They don't teach you everything but they're not nearly as dry and hard to read as everything else out there
I just want to say thank you to anyone who develops Apache software professionally or recreationally. I use your apps and utility libraries everyday, and they make our code much easier to read and debug. Edit: a word
It's a fun project to work on because you can't rely on frameworks and have to learn how to do things the hard way. Similar idea with things like Spring, Commons, etc.
It makes my job immensely easier and my code immensely cleaner. 
I learned basic java from this [book](http://www.amazon.com/gp/product/0071809252?keywords=java%20beginner&amp;qid=1444876724&amp;ref_=sr_1_1&amp;sr=8-1) . Highly recommend it.
This sub is for news, technical discussions, research papers and assorted things of interest related to the Java programming language. Read the side-bar. It is not for hiring developers. Try [Freelancer](https://www.freelancer.com/dashboard/) instead. 
awesome, looks like exactly what I need. I think I've seen this guy talk about how small/fast Java EE is (in jar size/startup time)
The only problem is, he says it is a huge part of this class, and we will be doing more work with it. I am assuming he won't be going into depth on how to use it though(based on what he has shown us so far)
Thank you for this info, I did not know of that subreddit. I will post there as well, and thank you not only for the sample code you provided, your time and for the subreddit suggestion. I have not looked much into other subreddits just s few here and there. 
this is a homework assignment, isn't it. Tell the truth! 
Very nice. Do you know of any material that covers Java 8 MVC in complete detail?
Obviously it's hard to give an exact figure or even an approximation. These depends to a large degree on your level of dedication and use of the language. One piece of advice I will suggest though, is to get the basics of the subject down cold. In the case of Java this would be understanding the fundamentals of Object Oriented Programming. This does not mean you have to now sit down and read tomes of theory, but simply clear these basic terms which underpin OOP: Class, Object, Abstraction, Inheritance, Polymorphism, Encapsulation and the like. Understanding these well should ease the understanding of the broader subject.
&gt; Thank you for this info, I did not know of that subreddit. So, you did not see the big red button "Seek Programming Help", or the big red banner that pops up when you hover over the "Submit Text" button that says "Please seek help with programming in /r/Javahelp", or the big red box in the sidebar that says the same as the banner, or the "?" icon in the blue "Related Subreddits" box saying "**Java Help** ← *Seek help here*"?
Try /r/forhire. But, as /u/tonywestonuk said, it smells like homework, so maybe /r/DoMyHomework 
Give the guy a break!! - He said he'll go over there! I find people in this reddit really hostile to anything that isn't 'acceptable'. Its not good, not nice, and, (as this is Reddit, the biggest forum of the planet), could actually be hurting Java if our attitude to nubee's java devs turns them away. Just be excellent to each other! Just my 2c! 
You don't see that on mobile. That is, you probably can see it but at least in Baconreader you really have to go out of your way to see the sidebar.
&gt; That's equivalent to finishing a computer science paper in university? Of course not. CS is not about learning a language. It's about learning CS. You can still know everything about Java and be a crappy developer because you don't understand stuff like data structures at all. 
This is a completely pointless question. There is no way to answer this for us at all, and you should also not ask yourself these demotivating questions and just go and do it. 2D pong is pretty easy and you sould just go and work towards it. Also, please visit /r/javahelp and /r/learnprogramming for questions regarding learning programming. That's not what this sub is for, as is explained in the sidebar. 
Sorry sir, I do most of my reddit via mobile, there are no big flashy buttons or anything of that nature here. I almost never check the side bars either. All I see are titles and sometimes pictures.
It's a community college. This guys methods seem very outdated compared to all my other classes I have taken. Only writes on white boards(with many errors even though he has his lecture all types out), no examples ever, but it's a course I need, and he is the only one who teaches it.
That is true, e.g. for the following reasons: - things break easily during refactorings, since statical types, method and field names are replaced by strings that typically don't participate in refactorings - reflection can be used to break encapsulation, e.g. to access private fields; will break when internals change - often hard to read &amp; not straight forward to comprehend None the less, there are situations where usage of reflection is required and justified, e.g.: - writing code analyzers/annotation processors - writing a plugin framework Know your tools and use them right. Edit: formatting
Also, permGen is an artifact of the Oracle JVM, it's not mandated by a standard such as the JLS. Will your JVM on the raspberry Pi be the Oracle JVM?
&gt; I'm not saying he's a hack because he teaches reflections. I expected this but I just wanted to make it explicit :) I agree that it looks like it's a pretty bad teacher. Any teacher should be willing to explain more and also teach you when you do and when you don't want to do something. 
For what it's worth, I'll second the notion to use reflection sparingly. With good design, you rarely if ever need it. Most of the time you make a class A implement interface B, and use that interface to access certain methods. You do NOT usually inspect methods on class A and call them via reflection. Having to use reflection usually means some bad design. On the other hand, certain frameworks which try to generalize things will use reflection. I think most of Dependency Injection frameworks like Spring will use reflection. Other frameworks will use reflection to discover annotations and change their behaviour based on those annotations. You can also use reflection to access private/protected methods or fields you would not be able to access otherwise. But this is a major hack and should be done only if there no other way. So reflection has its uses, but most of the time it's used for frameworks or for hacks. Frameworks most of the time you won't have to write yourself as there are plenty of them already available. And hacks are best avoided. *EDIT* From what I've read in your comments, your professor does sound like a strange guy...
Use the text they gave you, find another one or find an online tutorial. Talk to the teacher during visitor hours and unload all your questions. Maybe start a study group with others in your class. Asking questions is an easier way of learning than googling everything but both work. Programming is tough at the beginning because you are in a cloud of confusion. I hated not knowing much at the start but it's normal. Everything seems foreign and nothing works like you'd expect it to. Just grasp what you can and it'll start to make sense over time. If you are ambitious then you can download android studio and make an android app using Java. 
&gt; What should I do? Talk to whoever is in charge and explain this. Pretty much all you can do.
You took computer science and are now at a boot camp? I thought they were meant for people looking for a shortcut to a job. I thought they were supposed to skip the theory and just go to the "how". Otherwise they couldn't possibly fit everything in such a short period of time. 
Damn, I just updated to 2.4. :( 
First talk to the teacher. Explain that many can't follow (provide a list of people). If he waives that aside. THEN you talk with his superior, not before! Maybe even tell this teacher that you're planning just that (it's never nice to go behind someones back) If the superior doesn't listen: make an arrangement with the group following that specific class to fail collectively. This only works if everyone participates. If they have a 'student-fail' percentage that's above 60%, alarms will surely go of.. Some advice on the side: concentrate on the basics. If you don't grasp OO programming / don't see how code executes on the computer, there's no point in learning rest/ajax/.. Buy a java book and read it until you understand those basics. The rest comes later.
Yes, it's the Oracle JVM for ARM.
great thanks guys, I will look into these methods.
[removed]
[removed]
Cs classes, taught in Java. 
That's sort of the problem. The "how" part is missing. 
IDE plugins with this functionality would be awesome
/r/java/ is not okay?
So much this. You're paying the thing. If they yell at you, tell that your instructor sucks and it's either that or they refund you.
What I meant by "how" was "how to do". Not "how it works". Are they not teaching you how to do it?
I'm still confused. What CS classes have you taken?
Sidebar and stickied threads are also nonexistent for me on the baconit app, that guy should not be so quick to judge!
Is this an implementation of the jcache standard or something else? Why would I use this as opposed to, say, ehcache? 
Do NOT purposefully fail a class as someone else suggested. Remember that his boss/coworkers have known him a lot longer than you, and will likely watch you burn before roiling the internal politics. Write down all your questions. Be explicit as possible. Try to answer as many as you can on your own. Decompose what remains into more granular question. Determine which ones you need answered, and which you just want answered. Determine which ones are within the scope of the class. Once you have those questions, submit them to your professor. I would advise sending them via email. Many reasons, but a major one is that it creates a paper trail if you need to escalate. You should also keep in mind that as a new dev, you are going to be confronted with new tech every other week, especially in an AGILE shop. You should get comfortable with abstraction and not understanding everything. You can always investigate in your free time, but you can't spend a month reading white papers before you start writing code. Over time, you'll recognize patterns in new tech and be able to intuit the underlying mechanics without looking at every line of code. The first step, though is, diving in. No matter how much you prepare, it's never going to click until you get thrown in the fire.
Intro to programming (in Java), Intro to databases Intro to compilers and operating systems Algorithms I Algorithms II Data structures 
Learning to code can be hard. Is this your first programming experience?
No. Im here mainly to learn frameworks. 
tCache outperforms the Guava Cache typically by factor 2 - 5. There is a benchmark in the article that compares tCache to several caches like Guava and ehcache. Guava also does not support data-aware evictions and automatic load-spreading by eviction intervals. Data-aware evictions can help a lot: It is very easy (often only one line of code) to implement policies like "Premium customer data gets evicted last" or "Metadata for users with more items in shopping bag are evicted later". Guava Caches generally work well, but tCache can do the same or better. if you want data-aware evictions or have high concurrent access, then tCache should be your choice.
I'm really good at finding bad blogs, good ones on the other hand I am not.
&gt; Only writes on white boards I hate when people only write on white boards. Why can't they use a chalk board?!
not allowed to, sorry for ambiguity
Copy-pasted, thx
Yea I know, it just wouldn't be nearly as bad if he wouldn't mark us down for using methods he has not shown us. Which is why I'm trying to learn more about it so I can figure out wtf he tried to show us.
Cool! I wrote a few caching libraries ([Caffeine](https://github.com/ben-manes/caffeine), Guava's co-author, [ConcurrentLinkedHashMap](https://code.google.com/p/concurrentlinkedhashmap/)) so I like playing with what others put together. I plugged yours into my benchmarks and simulator. Guava's performance is subpar due to a long standing bug that I could never get fixed. The [last time](https://github.com/google/guava/issues/2063#issuecomment-107169736) I tried I had data and a patch to back up my assertions, which shows a significant boost. Also Guava amortizes the work on user-threads because many environments didn't allow background threads (JEE, AppEngine, etc) so that has a slightly higher penalty. Ehcache's performance is poor because it thrashes on getting the current time. That's a slow native call and performance varies by OS. In Ehcache 3 the hit rate is very low because they take an MRU sample and then select the LRU/LFU/Custom entry. This is by naively iterating on the cache up to a limit, which doesn't provide a good distribution in their ConcurrentHashMapV8 fork. Plugging in TCache, I think the background cleaner thread makes obtaining the hit rate skewed in the cache's favor because it can grow beyond capacity during the simulation. I need to play with it more to see if I can isolate the exact behavior and get a fair report of the hit rate. The throughput seems to be about 40M read ops/s (laptop), which matches Guava when configured for performance (vs saving memory). Guava's default setting is poor since we had planned on fixing the before mentioned problem, which favors fewer segments. Caffeine gets around 150M ops/s (laptop) in v1 with LRU, doesn't use a dedicated background thread, and scales linearly at 33% CHM performance (Azure 32-core). v2 is code complete but I'm only now starting to performance tune. Its at 180M ops/s (laptop) and uses a near optimal eviction policy, [Window TinyLfu](https://github.com/ben-manes/caffeine/wiki/Efficiency). The trick is that the usage history is estimated using a CountMinSketch, combined with LRU for recency ordering. You can see my v1 [benchmark results](https://github.com/ben-manes/caffeine/wiki/Benchmarks), which links to the source code. I use a Zipf distribution with 100% hit rate create contention for hot entries and avoid misses which give an inaccurate picture. The [commit](https://github.com/ben-manes/caffeine/commit/f4539eb3e2ae7b747f1bf1327767c64435fb5554) that added TCache might be useful if you'd like to experiment using my tooling. Btw, I didn't see TCache on Maven Central so I grabbed head using jitpack.
I find myself on baeldung.com a lot after doing a google search for something spring related. 
CodeAcademy just added a Java course. * [CodeAcademy Java](https://www.codecademy.com/courses/learn-java) The general tutorials are a good place to start. * [Oracle Java Tutorial](http://docs.oracle.com/javase/tutorial/java/) After you have the basics down I always thought that [Complete Reference](http://www.amazon.com/Java-Complete-Reference-Ninth-Edition/dp/0071808558) books were good to have on hand.
&gt; He literally does not explain the theory / the pros / cons / history / future of a technology. At the risk of sounding like a troll, you get what you pay for. Boot camp is no replacement for a degree or experience. I'm not saying you're wrong for wanting answers, but I am saying that you're barking up the wrong tree. Those people are there to make you "minimally effective", not to provide comprehensive insight.
That is a nice list. Awesome! I will check them. Thank you.
Now that you mention highscalability I remember that someone told me about this 2-3 weeks ago but I forgot about it. Thank you!
The videos on Pluralsight are pretty good.
Looks nice. Thanks! 
Dude, gold. This sounds like the kind of company you want to work for.
last time I romanced a garbage collector it took me two weeks to scrape off all the ducktape residue...damn city workers, all pervs.
&gt; You understand the love/hate relationship developers have for Maven and can argue both perspectives equally well. Ahh, Maven, how I love, er hate, um, adore, ehhh, loathe thee.... I've cobbled together some horrible abuses of that particular build tool....
Life becomes so much easier when you realize that some rules actually don't have consequences.
It's a bit like controlling the weather with a rain ritual. Works sometimes. I think. We don't know because who'd dare to stop and risk drought?
I just completed a job search, and I would say Spring Mvc. Most job positions have used jsp not thymeleaf. I breifly used thymeleaf at one gig, but found it kind of confusing and annoying. Jsp can be verbose but it's straightforward and easy to tell what you're getting whereas thymeleaf tries to pretend really hard that it's viewable html and I found it annoying. I don't don't find any of these frameworks interesting, they're just constantly reinventing the same wheel that Spring Mvc already does. If I wanted to invest in learning new stuff, javascript component libraries and styling libraries are far more interesting to me, as they do something useful faster rather than finding the 4th new way to do exactly the same thing you were doing before.
That looks interesting, thanks!
I definitely fail. How to properly romance the garbage collector?
For what it's worth, keep learning Java. It's a decent language with a very good ecosystem of 3rd party libraries &amp; frameworks and support in general. Java developers are very much in demand. And then there is Android... And having a successful business takes more business knowledge, management, connections &amp; luck than technical skill. These are good things to know and having a successful business is commendable, but it doesn't mean your technical skills are brilliant. And for what it's worth, these are good things to have, so if you have a chance to learn more about business side of things- don't pass it up.
Thanks NovaX for your comments. Your observation of the hit rate in EHCache is very intersting. I was already very suspicious as there is a claim that in 99% of the cases a "good" element is selected, even though only a few (15?) samples are taken. About skewing the hit rate in the tCache's favor by "growing beyond capacity": Yes, it can happen as it is part of the design. This extra memory is to be considered as part of the overhead, that every cache has: Some caches have large entries/holders, some use extra data structures for implementing the eviction strategy, some use CHM, others different Maps. So, for a fair comparison, you need to look how much overall memory a cache implementation takes. In general, the 3 most important factors for me are speed, hit-rate and memory. You can sacrifice one for the other. tCache optimizes for a good throughput in mixed read/write scenarios. Writing is often harder, as it creates more locking in the backing map. Experiments with your benchmark will be intersting. I am planning to take your benchmark to see why tCache peaks at 40M read ops/s while Caffeine can do 150M read ops/s. Read overhead in tCache should be very small, so the reason may lie in the CHM, which is tCaches's default backing map. Window TinyLfu sounds interesting, and I will definitely looking into something like this in the future.
There are way more cache implementations, widely used or specialized ones: Guava caches, Apache JCS, cache2k, imcache to name only a few. So I would still stick to the point that few caches do support it. But you made a point: Some important caches have support: While Ehcache does not natively support it, there is a wrapper for it. Infinispan supports it, for less than a year. It is well possible that there will be jsr107 support in tCache, as core concepts like CacheManager, Cache, Entry, CacheLoader, ExpiryPolicy and many access methods are already available. Its focus will remain on high throughput though, and the other caches I benchmarked (Ehcache, Infinispan) are not playing in that league. 
Anybody still using Netbeans? I am because at work we use mostly Java EE with Glassfish and ZK frontend and it works well for that ... I am looking into modern web stack and I wonder if any of you are using it for HTML5 heavy development, like Angular and also maybe NodeJs instead of Java? I know Netbeans has some support for Html5 projects but it takes a some manual folder structuring to really get it working ... 
Anyone has an idea who that company is? EDIT: The "Deven, CO" customer, not the recruiting company. I am not a recruiter, I am a coder and I am practically a 100% match on this job description.
Sorry i forgot to mention we are using, maven. Well maybe there is something better/newer then spring / hibernate. For example we switched part of Hibernate (Hiberante Criteria API for JPA Criteria API). Also considering the JS frameworks appearing like React, witch will be integrate to a degree in AngularJs. Basically I want to hear peoples opionions on what they are using how it worked out for them, because we don't want to think that there is nothing better out there then what we are using.
Java EE? You can get everything you need in TomEE
I have a colleague that is using Java EE. The main problem he has with it is that it doesn't have a proper Transaction Manager, meaning that when using a persistence ORM (like Hibernate and or Eclipse Link) entities tend to get detached from the session and managing them is hell. 
Hard to say without more detailed requirements, as I use different frameworks for different kind of jobs. But more general, have you looked at these (maybe not always cutting edge)? [Awesome Java frameworks](https://github.com/akullpp/awesome-java) and/or [Opinionated Guide to Modern Java](http://blog.paralleluniverse.co/2014/05/01/modern-java/)
I've been using it for 7-8 years now and like it (Used Borland JDeveloper(I mean JBuilder, thanks /ramsees79) at first (2004) then Eclipse after that). So much better with maven than Eclipse and the Java EE integration is great.
&gt;New NetBeans Release Candidate FTFY
This looks interesting. I will have a look.
It's a possible one, but imo you should just go with C# and Unity.
I do not know exactly what he is doing but I have never heard of this issue.
Almost every IT student in our uni uses and/or must use Netbeans. So yeah, anybody still uses Netbeans.
So someone pointed out to me that this is one of the students at the Guild, so I guess I'll address it here. First, as your instructor has pointed out, the very first time you see a full rest endpoint it is going to be fuzzy, the reason you are given variation code to start with is to get your hands dirty so that you can start exploring the pattern. It doesn't really matter what type of application you are creating, a POST is a POST and by doing progressive exercises you will come to grasp this. You sound like someone who is trying to learn the piano complaining that after seeing someone play a song they can't immediately play it. That being said re: instructors. I believe you are at the Akron site. Including myself and Eric Ward, the Java founder, there are *8 instructors* on site. Additionally there are 5 more instructors at our other sites. Additionally there are about 2 dozen active alumni of our program on our Slack instance which you have access to since you started the pre-work. At a cursory glance at the public Java and JavaScript channels on Slack and our TA logs it is clear that you are not using the multitude of extra resources that we have made available. &gt; What should I do? * You should start booking time *every day* with a TA or other instructors. You should come prepared with questions and sample code that you are struggling to understand. Especially in the case of JavaScript/AJAX because it literally doesn't matter if you ask a .NET or Java specialist, they all know front end. * In the off hours you should get on Slack and ask questions of the multitude of instructors and alumni that are available pretty much 24/7. You should also note that we have a free repeat policy. What we do not allow is jumping to another class that is already in session and is already full. If you take advantage of the resources we provide and you pay attention in class and do the work we give you it will become clear, or if you do all that and still don't get it you can keep going for free. TLDR; Use the resources available to you in an effective way. You aren't communicating with your instructor well and you aren't utilizing the resources available to you. If you have any additional issues book time with Ward, since he runs Java, and he will be happy to sit down with you and craft a specific action plan to get you back on track... but again you have to ask.
I agree 100% with what Wise said - leverage the resources - TAs, other instructors, Slack, alums. Feel free to book time with me directly - let me know and we'll set something up and create a plan to address your specific questions.
Just use React, Angular is very popular but has a huge learning curve, is going to 2.0 soon, which has huge changes.
In fact this is the weak link in reference counters: they cannot handle cyclic references. Garbage collectors like Java's do not fall into this issue so cyclic references are not a problem.
I also have better experience on linux (Debian in my case), than on windows, but it works nonetheless...
I do straight Java on netbeans. I started on eclipse but netbeans had way better git and maven support and i'm not fond of eclipse's project files. Not that I love netbeans, the thing gets slow as shit even on my fucking i7 gaming computer with SSDs in raid 0. 
That would be great. How can I book time with you? I need basically everything from Week 6 covered again.
Shoot me an email.
It just requires that you know how entities are managed/detached. There are many strategies (TransactionScoped, RequestScoped, ConversationScoped) but keep in mind the longer you keep the entities "attached" the more complicated things get. Personally I started with ConversationScoped but have converted everything to TransactionScoped. This means I do a lot of merging, but I would rather merge the 1% of entities I actually need to modify rather than keep 99% managed in memory. Bottom line, you will need to understand how all the magic of JPA works if you need to know to scale, but it can be a fantastic way to go.
&gt; **You do not fucking use SHA1. Ever.** There should be a way to make this extra bold. 
This is only for simple transactions managing a single resource. If you need to manage multiple resources within a transaction distributed across multiple services, you have to use the `JtaTransactionManager`. If you're using Spring Boot, you can configure [distributed transactions](http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-jta.html) with an external transaction manger like Atomikos or Bitronix.
Like I said, book time with Ward or I to discuss as has been covered throughout your time here including pre-work. We have also extensively covered Slack and the availability of *ALL* staff to be booked available on request. It's in your apprenticeship agreement, it was covered verbally during orientation, and I personally stopped into each class midway through the cohort and spoke about it. If you want an overview on a topic all you have to do is ask. In fact in your point 3 you say that a student asked and the instructor spent a special session going over something in more detail. Again, I assert that if you simply ask, help will be provided as you saw. Also, having run many special topic or review sessions just because a lot of people attend doesn't mean none of them get it, it means they are taking advantage of the extra resources to further solidify understanding of a topic. It sounds like you have some good questions lined up in your response, it's unfortunate you didn't actually post them in Slack because you would have gotten in depth answers weeks ago. Even during a lecture, you know it's perfectly fine to raise your hand and say "hey, I don't understand what REST really means, can we go over that again?". Frankly, a different instructor isn't going to solve the issues I see you having. Fortunately we have a solid refund policy, so meet with Ward and if you find yourself unwilling or unable to follow his recommendations take advantage of the refund policy. 
Ok, I will meet with Ward. Regarding the students that were sitting there -- at least 4 of them didnt get it. How do I know? Because 1) The instruction was during lunch break. I know I usually like to take my lunch break. 2) The students that hung back after the session discussed about how we feel. The others, unlike me are just happy that they will be placed into a job through your hiring network. I dont share those feelings. Im here to learn from someone whose teaching style meshes with my learning I get your point about the Slack chat being available. But that's not the best resource to get a conceptual overview of a topic. Would you rather go to a chatroom to learn about Generics or get that from an instructor or a TA? I would rather get that information from a TA. And when that doesnt work, then I go to Google and Youtube. The chatroom is a good place to ask specific questions: "Im getting this error message, anyone know about this?" and share cat videos. A good instructor, whether Youtube, or in person is where I would like to learn about things like Interfaces. As I mentioned before, Youtube.com bandwidth is limited for us for some reason. It basically doesn't work so thats out of the question. Put yourself in my shoes: you move out of state, put your life on hold, spend $10k to learn coding from a good teacher while putting in a lot of time and effort in. And and at the end of the day you are not allowed to go to a teacher whose teaching style fits yours because you are supposed leverage the chat room... I do ask the instructor to repeat himself. I do seek help from TAs, and I do put in work. In fact, I am very happy with how much I have learned and done. The problem is I really did it on my own and the hard way. If you gave me a syllabus I may as well have done this on my own. Your response seems to ignore some important things: 1) The quality of instruction needs to be improved -- not the teacher. But his delivery needs to be more engaging. He needs to be the center of attention. Drawing people in to listen and ask questions. Not sit there and type as people race to follow along and then explain things to people as they come up one by one. 2) The fact is I paid for a certain quality and I feel like I'm not getting that at the end. As I said, in the beginning things were good. We were doing a lot of core Java exercises from PBD, but things fell off sharply when we got into the Spring Framework, Aspect Oriented Programming, etc. To be clear, I am not a whiny student who is behind and just complaining because Im that F student. I have something like a 95% in the class. My quiz averages are in the 90s. I dont have outstanding work to turn in. Im pleased with the quality of my work. But the problem is Ive been learning from Google and Youtube at home, and wasting time in class. Now that we are getting into advanced Spring topics, the resources available online are limited. Its not like before when tutorials for the earlier topics were all over the web. 
Hopefully you never need to learn. I've only hit the surface, but there's all kinds of GC algorithms you can use (within the Oracle JVM and on other non-hotspot JVMs). I'd imagine they're looking for someone who knows when a problem should fixed via a GC tweak and (hopefully) more importantly, when a problem shouldn't be fixed by man-handling the GC.
bromancing the code
Grails is pretty awesome, worth checking out at least.
I would also look at 1) Dropwizard and 2) JHipster Also if you are seriously thinking about writing javascript, don't. Make the leap now to typescript. 
Grails grails grails a million times grails if you want me to go into more detail i'd be happy to.
AWS Lambda is the future.
Borland JDeveloper? I think you mean JBuilder. 
Genuine question; what is this and what does it have to do with /r/java?
yea, i still wait for the reason to use jqqq instead of jdbc. there doesn't seem to be any reason. for nice to use abstractions i got ORMs (plenty), for down to the "metal" i got jdbc. jqqq .... really seems useless.
&gt; JBuilder Yup...eh...was a long time ago.
Well, how satisfied are you between very satisfied and very satisfied?
&gt; You also need the JCE Unlimited Strength Policy Files, because if you don’t have the Unlimited Strength Policy files, you’ll see errors like “java.security.InvalidKeyException: Illegal key size” when you try to run 256-bit AES. I've been dealing with this at work. It's so silly. I understand that there are legal reasons behind it, but the end result is that we make it more difficult for people to use strong encryption. Why is this something that we (as people) have decided to do? If anything, shouldn't we endeavor to make it difficult to use *weak* encryption?
Java 8 + Jersey + Jetty + jOOQ is a nice setup. Embed Jetty in your app and you get one jar for deployment.
It surprises me that Spring Data JPA is faster than named query.
/r/javahelp exists for questions like this, but as /u/Seventh_Heaven says you'll need to show what you've tried.
Bindings and properties are great but they have some pitfalls you have to be carefull about.
Forman and Forman: "Java Reflection in Action" is quite good.
Sorry, I do not think I will have enough time. Behind this quicky, I'm currently reviewing alternative to Hibernate. Mybatis is not on my top list.
It was considered and discarded twice. This link provides the reason it was dropped first time round: http://bugs.java.com/bugdatabase/view_bug.do?bug_id=4459053 This comment by Gilad Bracha sums it up: &gt; The submitter's claim is that the type information in a standard Java variable declaration is redundant. This may be true from the compiler's perspective, but often it will not be true from the programmer's perspective. Consider: &gt; &gt; Map m = getMap(); &gt; &gt; Humans benefit from the redundancy of the type declaration in two ways. First, the redundant type serves as valuable documentation - readers do not have to search for the declaration of getMap() to find out what type it returns. Second, the redundancy allows the programmer to declare the intended type, and thereby benefit from a cross check performed by the compiler. &gt; &gt; While I personally find the use of let attractive, the drawbacks above are enough to reject it. Add the "un-java-like" feel of this and the complications of adding a keyword, and it's clearly a non-starter. It also wouldn't work with the "diamond" syntax: var hm = new HashMap&lt;&gt;(); though I imagine that could be fixed by simply making it an error.
 HashMap&lt;string, int&gt; hashMap = new HashMap&lt;string, int&gt;() This is not valid java. This is: HashMap&lt;String, Integer&gt; hashMap = new HashMap&lt;String, Integer&gt;(); You can shorten it with the diamon operator: HashMap&lt;String, Integer&gt; hashMap = new HashMap&lt;&gt;(); Or even better use the interface instead: Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;(); But to answer the more general question - Java uses explicit variable types because it gives the compiler more information (at the cost of increased verbosity). It is a design decision and it has its tradeoffs. It is important to note that generics: List&lt;String&gt; list = new ArrayList&lt;&gt;(); instead of just List list = new ArrayList(); have been added to the language later on and have their own problem. The integration into the language is not perfect because the authors wanted to preserve backswards compatibility at all costs. I should also note that Java 8 does allow implicit types in lambas: List&lt;Integer&gt; listOfInts = new ArrayList&lt;&gt;(); listOfInts.forEach(x -&gt; System.out.println(x*2)); The type of x is not explicitly defined but implied from the type of listOfInts. C# does solve some language problems in a better way than Java. It was simply created later and had the advantage to be able to learn from Java's mistakes, some of which cannot be fixed for sake of backwards compatibility. 
JavaFX, of course. Native always wins in terms of performance and integration with the user system.
Does JavaFX integrate with user interface?
Not sure this is relevant - type inference for variables only makes sense for local variables. The C# implicit var type can only be used for variables at method scope.
That's not strictly true. It only makes sense when the declaration and definition is combined - which you can do at any scope - and then the inferred type can only be the most specific type possible...
JavaScript has its oddities but it is required everywhere unlike Java so its not dying anytime soon, if ever.
Good point. it certainly doesn't "feel" right when used for class members.
Yep!
Thanks for some actual rationale.
Thanks for linking to that same site once more. domain submitted from|count|% :-|-:|-: [pixelstech.net](/search?q=%28and+site%3A%27pixelstech.net%27+author%3A%27stackoverflooooooow%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|22|34% [importstatic.com](/search?q=%28and+site%3A%27importstatic.com%27+author%3A%27stackoverflooooooow%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|4|6% [pinganew.com](/search?q=%28and+site%3A%27pinganew.com%27+author%3A%27stackoverflooooooow%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|3|5% [pixelstech.us](/search?q=%28and+site%3A%27pixelstech.us%27+author%3A%27stackoverflooooooow%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|3|5% [pingtech.xyz](/search?q=%28and+site%3A%27pingtech.xyz%27+author%3A%27stackoverflooooooow%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|3|5% [techcrunch.com](/search?q=%28and+site%3A%27techcrunch.com%27+author%3A%27stackoverflooooooow%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|3% [wsj.com](/search?q=%28and+site%3A%27wsj.com%27+author%3A%27stackoverflooooooow%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|3% [bloomberg.com](/search?q=%28and+site%3A%27bloomberg.com%27+author%3A%27stackoverflooooooow%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|3% [techinasia.com](/search?q=%28and+site%3A%27techinasia.com%27+author%3A%27stackoverflooooooow%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|3% [frontendmasters.gitbooks.io](/search?q=%28and+site%3A%27frontendmasters.gitbooks.io%27+author%3A%27stackoverflooooooow%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [blog.christianperone.com](/search?q=%28and+site%3A%27blog.christianperone.com%27+author%3A%27stackoverflooooooow%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [29a.ch](/search?q=%28and+site%3A%2729a.ch%27+author%3A%27stackoverflooooooow%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [googleblog.blogspot.sg](/search?q=%28and+site%3A%27googleblog.blogspot.sg%27+author%3A%27stackoverflooooooow%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [leanprover.github.io](/search?q=%28and+site%3A%27leanprover.github.io%27+author%3A%27stackoverflooooooow%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [theguardian.com](/search?q=%28and+site%3A%27theguardian.com%27+author%3A%27stackoverflooooooow%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [franklinta.com](/search?q=%28and+site%3A%27franklinta.com%27+author%3A%27stackoverflooooooow%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [rexegg.com](/search?q=%28and+site%3A%27rexegg.com%27+author%3A%27stackoverflooooooow%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [9to5mac.com](/search?q=%28and+site%3A%279to5mac.com%27+author%3A%27stackoverflooooooow%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [petitions.whitehouse.gov](/search?q=%28and+site%3A%27petitions.whitehouse.gov%27+author%3A%27stackoverflooooooow%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% [andrisatteka.blogspot.sg](/search?q=%28and+site%3A%27andrisatteka.blogspot.sg%27+author%3A%27stackoverflooooooow%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|2% _^...and ^10 ^more_ subreddit submitted to|count|% :-|-:|-: [technology](/r/technology/search?q=author%3A%27stackoverflooooooow%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|7|11% [google](/r/google/search?q=author%3A%27stackoverflooooooow%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|6|9% [geekfun](/r/geekfun/search?q=author%3A%27stackoverflooooooow%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|5|8% [programming](/r/programming/search?q=author%3A%27stackoverflooooooow%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|5|8% [facebook](/r/facebook/search?q=author%3A%27stackoverflooooooow%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|4|6% [apple](/r/apple/search?q=author%3A%27stackoverflooooooow%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|4|6% [learnjava](/r/learnjava/search?q=author%3A%27stackoverflooooooow%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|4|6% [java](/r/java/search?q=author%3A%27stackoverflooooooow%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|3|5% [microsoft](/r/microsoft/search?q=author%3A%27stackoverflooooooow%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|3|5% [javascript](/r/javascript/search?q=author%3A%27stackoverflooooooow%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|3% [PHP](/r/PHP/search?q=author%3A%27stackoverflooooooow%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|3% [css](/r/css/search?q=author%3A%27stackoverflooooooow%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|3% [business](/r/business/search?q=author%3A%27stackoverflooooooow%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|3% [funny](/r/funny/search?q=author%3A%27stackoverflooooooow%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|3% [technews](/r/technews/search?q=author%3A%27stackoverflooooooow%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|3% [Frontend](/r/Frontend/search?q=author%3A%27stackoverflooooooow%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [alibabagroup](/r/alibabagroup/search?q=author%3A%27stackoverflooooooow%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [MachineLearning](/r/MachineLearning/search?q=author%3A%27stackoverflooooooow%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [science](/r/science/search?q=author%3A%27stackoverflooooooow%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [singapore](/r/singapore/search?q=author%3A%27stackoverflooooooow%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% _^...and ^6 ^more_
And that right there is a problem some people - historically myself included - have with it. It's often considered better if the same feature - variable declaration here - works the same in all situations, but variables with implicit types only work in some situations...
&gt; If you can count on your users having Java installed This is not true for JavaFX, you can build an app which is packaged with the java runtime: https://docs.oracle.com/javafx/2/deployment/self-contained-packaging.htm
JS is required in browser-based applications, but browser-based applications are garbage anyway.
You will not be hired as an intermediate programmer without prior experience, regardless of your skills. Most people get hired through co-op, or some graduate program and become juniors. Companies generally do annual performance reviews during which you have the opportunity to impress them that you should be promoted. Companies are very unlikely to promote, even if you're a rock star, so you're best chance of getting promoted is to switch companies after you have enough skills and experience under your belt. 
yes it is closer to sql. so close in fact that any advantages it may have seem to vanish. at that point one is better to just do it in jdbc than employing jqqq. 
 I don't do front end but that's what I would do too. 
I see your point. But nevertheless - it would be cool to have something like that in Java for MVC frameworks.
One feature that Groovy added over Java was optional implicit type declaration. You may prefer it's syntax. You can happily mix and match Groovy and Java in the same code base too.
&gt; If you can count on your users having Java installed Don't. Just bundle the JRE with your application, there are tools for it. It will save you a lot of trouble.
I've written a JavaFX app fairly recently. I've also written web apps. I have not written anything using NW.JS The web platform was not designed for the development of apps. I find building apps with it is a constant exercise in frustration, with that stones-in-shoes feeling being pervasive. JFX is actually designed for writing desktop apps (and is also being used on mobile and tablets these days). It has basic features that the web lacks, features like: * Ability to create menu bars and context menus * Easily interact with the clipboard and drag/drop * Arbitrary read/write access to the file system * Many useful layout managers: I find layout in JFX to be easier than in other toolkits * High performance controls, meaning able to do things like bind a list with a million items to a listview, then scroll through it without lag. You don't need weird hacks to avoid touching the JFX equivalent of the DOM (called the scene graph) because scene graph mutation is very fast. * Bind any keystrokes you like. * Create windows whenever you like, without popup blockers getting in your way. I've found that power users often like the ability to use the full window management in their OS, with apps that use floating windows well. * Integrated functional data binding framework. You can also check out ReactFX to smoothly integrate reactive programming techniques. * Easily do work on background threads without suffering from the arbitrary constraints of Javascript engines, e.g. a background calculation can pass full objects back into the UI thread without needing any stringification or JSON hackery. * Really good animations framework. * Scene Builder * Use any JVM language: I like Kotlin the best, but you can easily find others. I could go on. There are some things the web platform does do better. However, bear in mind that you can embed WebKit into a JFX app and do pretty tight integration between the web and the hosting app. So you can always use webkit to do the tasks that JFX isn't so good at, whilst keeping the rest of the app in Java (or Kotlin, Scala, etc). Some things the web does better: * If you want to embed web widgets like YouTube videos, you'd need WebKit for that. JFX *does* have an embedded media player framework that can do HTTP streaming, but you'd need the raw video URL for that. * If you will need Facebook/G+/Twitter/etc login, then you'd need to embed WebKit to do that. * The JFX rich text editor widget is in fact an embedded WebKit that generates HTML. There's no native rich text widget, though the RichTextFX project is building one that works OK (you can use it for a code editor, for instance) And there are some aspects of the web that JFX has borrowed and you can use in both. JFX has a dialect of CSS for styling UI. The default theme (Modena) is easily tweaked with a little bit of CSS to look like a Twitter bootstrap app. And JFX can use web fonts, if you want to. A few things to bear in mind: * JavaFX has a bundler tool that lets you make self contained EXEs/MSI/DMG/DEBs etc, done well these are indistinguishable to the user from any other app they download. The tool handles signing, etc. However it generates very large files. In Java 9 this tool will also handle some stripping of the JRE, making smaller downloads. But for now it can be worth stripping the JRE yourself. It seems like NWJS doesn't have any official tool, just a bunch of competing third party tools. The javapackager tool is pretty good, it only takes a single command to spit out an installer. * There is no official online update system in either JFX or NWJS. I wrote one called UpdateFX that might prove useful, but it can't update the JRE. Only the pure Java parts. However, it can provide a modern (i.e. silent/background) update experience for the bits it can do. * JFX does not use native widgets in some places where WebKit does. So if you absolutely require e.g. a Mac native text edit box, then JFX can't help you much. SWT could though: it may be worth looking into that (it's another desktop java widget toolkit). 
Cool but they don't cover one of the coolest new things: 3D support.
Ah so this is /r/java - down voting anything JS related since 1995. On a more serious note, ES6 is a great language from a design standpoint. More importantly, I don't see how you can disqualify a language as an option for GUI dev or otherwise because it's allegedly poorly designed.
You may not care, but you can't even buy support for node on Windows. There will be no one for you to call if you get above your head.
I understand the topic mate. My issue is with disqualifying JS as an option "by default", and downvoting any comment that even slightly praises JS in general. Even if in /r/trees, PL discussion should be civilized. Yes, I would be happier there if these kinds of things are OK.
You should ask this question in /r/programming. Judging by the responses in this thread, /r/java seems a bit too biased to actually provide a well-rounded opinion on the matter. I wouldn't be surprised if most of these guys have never even worked with NW.js. Also, it wouldn't hurt to ask /r/javascript. Perhaps they're less biased than these folks. I've worked with both before, and I think both are good options but it depends on your use-case. JavaFX is a proper desktop GUI toolkit, so it's a better option when designing complex applications. It is however quite the memory hog. I built a really simple app but it ended up consuming 100 MB even while idle. Of course, NW.js is similar in this regard, but it's important to note that the difference isn't large in this area. It's also a better option if you're starting from scratch and/or have experience with Java more than JavaScript. NW.js on the is more well-suited for less complex applications. It allows you to run native Node.js code in a browser, meaning you can access the file system and similar. It's definitely a better option if you already have a web app as it's quite straightforward to port the HTML and JS of your site to NW.js.
I'm referring to your comment: &gt; Ah so this is /r/java - down voting anything JS related since 1995. I agree that the following adds little to conversation, but that comment was not made by me: &gt; One of them involves JavaScript, which is a horrible language that should die in a fire. 
It's useful for generating DTOs directly. You can also generate a simple list of maps by selecting "new map(field, field,field)" instead of a dedicated object. That SQL is weird and looks like a bug.
No problem. I'm well aware of the "dangers" of internet forums ;) For the record, I see nothing wrong with talking about mixing JS with Java in general especially in web based applications. However I see little benefit in using JS for a desktop application when JavaFX is more than adequate.
Just because you can't hack it doesn't make it a bad language. More money for us who can. Thanks.
"JavaFX and AngularJS are not so far away as one would think." Not at all surprising, to me at least, since Angular was quite literally designed for use by Java developers.
Do you render the html inside Java GUI (say Swing)? If so, how do you call Java functions from your html? 
True. Wet mitigate that in house by generating pdf reports and sending zpl directly to networked label printers. It's not quite as tight as local printers, but it's close enough.
You should check out Electron.js by Atom. It's pretty neat.
Ya that makes sense, thanks bro.
Buy and read this: http://www.amazon.com/Programmer-Study-1Z0-803-1Z0-804-Certification/dp/0071772006 . It's excellent. Caty Sierra is on the team that develops the tests, she knows all about it. If you don't have any practical Java experience, I'd also encourage you to work on a project. It will help, even though, IMHO as a professional Java SW engineer, the exams won't help you to become a good programmer.
It is possible to hack Javascript just fine and still think it is a horrible language. At least for me, contempt for Javascript is bred from extreme familiarity.
In this lab, we will display information about a triangle made up of 3 given points. For each side, we will display the length, the slope, and the opposite angle. After determining each angle, we can determine if the triangle is obtuse, right, or acute. 1. Write a method to compute the distance between 2 given points. Your method should accept four doubles: x1, y1, x2, and y2 and should return a double. Recall the distance formula between 2 points is: 2. Write a method to compute the slope between 2 given points. Your method should accept four doubles: x1, y1, x2, and y2 and should return a double. Recall the slope of a line is: 3. Write a method to compute the opposite angle given the 3 side lengths of the triangle. The formula for the opposite angle is: angle A = arccos((a2 – b2 – c2) / (-2bc)) angle B = arccos((b2 – a2 – c2) / (-2ac)) angle C = arccos((c2 – b2 – a2) / (-2ab)) Use the Math.acos() method which returns the angle in radians. Convert radians to degrees with the Math.toDegrees() method. Look up the methods in the API (search Java API SE 7). 4. Write a method to compute area of the triangle. Use the logic/code specified in exercise 2.15. s = (side1 + side2 + side3) / 2 area = 5. Write a method, displayTriangle(), to display all the information for a given triangle. This method should accept 3 points (x1, y1, x2, y2, x3, y3) and should format the display to look like the sample shown below. To get the information to display, call the methods described above. Note, you’ll determine the perimeter by summing up the side lengths. To determine the type of triangle (right, obtuse, or acute), use the following logic: • if one angle is 90o, then the triangle is right (due to rounding issues: use 89.99 &lt; angle &lt; 90.01) • if one angle is greater than 90o, then the triangle is obtuse. • else the triangle is acute (all angles are less than 90o). Run your program with several different points public static void main(String[] args) { displayTriangle(1.0, 1.0, -4.0, 4.0, 4.75, 4.5); displayTriangle(0, 8, 0, 0, 8, 0); displayTriangle(0, 0, 0, 3, 6, 0); } Your output should be similar to the following: (note: Formatting is important, use prin 
Please use /r/javahelp 
If I ever see someone I work with use this in a project I will punch them.
Learning the java syntax isnt the challenge. Thats easy. Learning object oriented principles is the toughest and most important. Classes, objects, inheritance etc Theres a book called head first java 2nd ed. it is by far the best material imo and ive tried sooo many. Its recommended by quite a few ppl as well as the go to book. Once i went through this, i can now just look up Java documentation and stack overflow for any further help. Pm if you want a pdf version
Update: just tried 8.1 out and it node.js support is pretty good, created project from existing sources (simple express/ejs app I created) and it works well. 
This is an EXCELLENT answer. People confuse the job of an IDE and the job of a compiler. Programmer should be lazy, but not at the point of ignoring the types.
It is more that angular and JavaFX are copies of wpf. 
1.) You are in the wrong subreddit. There are plenty hints on the site that should have directed you to /r/Javahelp. 2.) Neither /r/Java, nor /r/Javahelp tolerate "Do my homework" style posts. You will need to ask **specific** questions and show that you have spent **considerable** effort trying to solve your homework. Your post as it is implies that you don't want to spend even the slightest effort, even not so much as to prepare a proper post. If you want your homework done for you, you're better off in /r/doMyHomework.
QUESTION HERE: what are those java exams he's talking about? I learned Java in my CS classes in university, but what do those exams give you? Should i do them? I know i could just google them but i really gotta poop now, thanks to whoever explains it to me. Bye bye folks. OP as others said you have to program while you study to learn better. Studying books is ALWAYS good, study every book you can find but you HAVE to program too or you will just slowly forget what you read.
Try disabling all plugins that you're not using (probably almost all of them) in settings.
But why not leave the desicion to the programmer? In C# the advice is to only use it when the type is either not important (result from Linq queries) or completly obvious. At least that's the guidline. Once getting used to it, it's a really nice feature to have. And it doesn't change it's meaning depending on the context. You are either allowed to use it or you don't. No worries about sematics nessecary
I did, there are maybe 5 left. Not sure if it helped much.
I would be very interested to know where exactly you got lost and why, so that I can improve it.
care to explicit what is worth a punch in your opinion?
I have no idea where this `Requests` class suddenly comes from and more importantly what its methods do. The matching below makes more sense to me. I think smaller examples that highlight different features would work better.
the practice questions in the kathy sierra book are where i learned the most for the exam 
When I wrote a JFX app I put in place a hotkey to do instant reloads of the FXML and CSS. It gave my app a faster version of the refresh button in browsers. I also ran the app in the debugger so hot code patching worked. Scene Builder does have a CSS analyzer built in, but it's invisible by default for some reason. You have to enable it in the View menu. Then you can do node selection and it'll show you CSS selectors and properties for whatever you click.
You're welcome. I hope it helps.
Is that a thing? Yeah I think so. What do you have in mind?
RDP to your desktop, LogMeIn, there are all sorts of options for it. 
&gt; starting fresh, try to learn some client side technology that is mor Sorry, I was still working on it. Ran the workshop on Friday and it went pretty well. slides are here: https://www.dropbox.com/s/2otwdags5wl3aep/Eclipse%20EE%20Workshop.pptx?dl=0 Whole thing (including libraries, tools &amp; demo project) is here: https://www.dropbox.com/s/nazlqittm5glaws/Eclipse%20EE%20Workshop.zip?dl=0 Oops I forgot to add. The archive password is " " (a single space char).
Not necessarily. It's an external device so all they need is a way to communicate with the hardware, which might be as easy in Java as in C, if not easier.
Thanks for the feedback. I now have substantially improved the readme with your suggestions. I would be very geateful if you could have a second look at it and tell me if there is still something that is not comprehensible?
http://spring.io/blog/2015/10/15/spring-framework-4-2-2-4-1-8-and-3-2-15-available-now
This is a thousand times better! My best guess for the low upvote rate is in fact that the documentation was not up to snuff when submitted. Maybe you could resubmit a newer version when you have implemented more of the planned features. A little while ago I did a small toy prototype for an application and basically went with the visitor pattern that is improved upon here. It's very tedious indeed and I recognized the points where Derive4J could be potentially useful. I guess the biggest problem with a library like this is that you still bolt on four wooden legs onto a dog and call it octopus. It's not idiomatic and you're probably better off using something like Scala for that.
[**@puffnfresh**](https://twitter.com/puffnfresh/) &gt; [2013-06-30 01:06 UTC](https://twitter.com/puffnfresh/status/351144746254745602) &gt; Problem: correctness and reasoning are almost never considered when talking about "idiomatic" - way more important things than precedence. ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
How much RAM you got ? Because on my desktop, I created a RAMDisk and put the cache of IntelliJ on it, and it is blazing fast now...
So the article recommends "eZ Platform", based on Symfony. What a coincidence. domain submitted from|count|% :-|-:|-: [symfony.fi](/search?q=%28and+site%3A%27symfony.fi%27+author%3A%27velmu3k%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|46|39% [metropolitan.fi](/search?q=%28and+site%3A%27metropolitan.fi%27+author%3A%27velmu3k%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|18|15% [drupal.ovh](/search?q=%28and+site%3A%27drupal.ovh%27+author%3A%27velmu3k%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|10|8% [hhvm.ovh](/search?q=%28and+site%3A%27hhvm.ovh%27+author%3A%27velmu3k%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|10|8% [janit.iki.fi](/search?q=%28and+site%3A%27janit.iki.fi%27+author%3A%27velmu3k%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|5|4% [medium.com](/search?q=%28and+site%3A%27medium.com%27+author%3A%27velmu3k%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|2% [ezplatform.com](/search?q=%28and+site%3A%27ezplatform.com%27+author%3A%27velmu3k%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|2% [self.LatvianJokes](/r/LatvianJokes/search?q=%28and+author%3A%27velmu3k%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|2% [surveymonkey.com](/search?q=%28and+site%3A%27surveymonkey.com%27+author%3A%27velmu3k%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|2% [facebook.com](/search?q=%28and+site%3A%27facebook.com%27+author%3A%27velmu3k%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|2% [imgur.com](/search?q=%28and+site%3A%27imgur.com%27+author%3A%27velmu3k%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|2% [youtube.com](/search?q=%28and+site%3A%27youtube.com%27+author%3A%27velmu3k%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|2% [self.webdev](/r/webdev/search?q=%28and+author%3A%27velmu3k%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% [isdrupal8released.com](/search?q=%28and+site%3A%27isdrupal8released.com%27+author%3A%27velmu3k%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% [frzr.js.org](/search?q=%28and+site%3A%27frzr.js.org%27+author%3A%27velmu3k%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% [twitter.com](/search?q=%28and+site%3A%27twitter.com%27+author%3A%27velmu3k%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% [richie.fi](/search?q=%28and+site%3A%27richie.fi%27+author%3A%27velmu3k%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% [teropa.info](/search?q=%28and+site%3A%27teropa.info%27+author%3A%27velmu3k%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% [janit.wordpress.com](/search?q=%28and+site%3A%27janit.wordpress.com%27+author%3A%27velmu3k%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% [exove.com](/search?q=%28and+site%3A%27exove.com%27+author%3A%27velmu3k%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% _^...and ^8 ^more_ subreddit submitted to|count|% :-|-:|-: [PHP](/r/PHP/search?q=author%3A%27velmu3k%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|30|25% [webdev](/r/webdev/search?q=author%3A%27velmu3k%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|11|9% [Finland](/r/Finland/search?q=author%3A%27velmu3k%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|10|8% [drupal](/r/drupal/search?q=author%3A%27velmu3k%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|8|7% [symfony](/r/symfony/search?q=author%3A%27velmu3k%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|8|7% [javascript](/r/javascript/search?q=author%3A%27velmu3k%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|6|5% [formula1](/r/formula1/search?q=author%3A%27velmu3k%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|5|4% [Wordpress](/r/Wordpress/search?q=author%3A%27velmu3k%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|5|4% [SEO](/r/SEO/search?q=author%3A%27velmu3k%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|4|3% [funny](/r/funny/search?q=author%3A%27velmu3k%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|4|3% [technology](/r/technology/search?q=author%3A%27velmu3k%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|3|3% [opensource](/r/opensource/search?q=author%3A%27velmu3k%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|3|3% [cms](/r/cms/search?q=author%3A%27velmu3k%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|2% [Health](/r/Health/search?q=author%3A%27velmu3k%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|2% [hacklang](/r/hacklang/search?q=author%3A%27velmu3k%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|2% [LatvianJokes](/r/LatvianJokes/search?q=author%3A%27velmu3k%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|2% [java](/r/java/search?q=author%3A%27velmu3k%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% [IOT](/r/IOT/search?q=author%3A%27velmu3k%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% [software](/r/software/search?q=author%3A%27velmu3k%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% [windows](/r/windows/search?q=author%3A%27velmu3k%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% _^...and ^10 ^more_
Not in the settings, but in the file idea.properties that is located in the bin folder of your installation
and more RAM!
Also try chrome Remote Desktop if logmein doesn't work/is too expensive 
http://farenda.com is a blog with many examples from Java and related technologies
look at JMX
You've got a pretty fundamental model mismatch in your requirements. Put another way: "I want to initiate a stateful process, and then monitor it using a stateless protocol." If you're willing to step away from REST, you can use WebSocket.
you are a 100% right. I wasn't planning on using REST for this except as a last resort. Will look at Websockets. Thanks
I tried to understand the differences between the MVP, MVC and MVVM paradigms. However, I was surprised to see the differences are subtle. So I can't help but wonder: did I miss an important point? I'd appreciate your feedback. Either here or directly as a comment to my article. Thanks in advance! Stephan
[Java Messaging Service](https://en.wikipedia.org/wiki/Java_Message_Service) will give you publish/subscribe messages and take care of the reconnection logic for you. I've used [ActiveMQ](http://activemq.apache.org/) in the past, which is a JMS implementation.
Here is what I did : First, creation of the RAM disk : I downloaded [this soft](https://www.softperfect.com/products/ramdisk/). I dont know if it is the best, but I took the first result in Google. Once the software is downloaded and installed, the creation is pretty straightforward. Just click on the big plus green button, choose a size, a letter, and a file system. Once this is done, a new hard drive will appear in you Windows explorer. Then, close IntelliJ, edit as an admin the config file (mine is located in C:\Program Files (x86)\JetBrains\IntelliJ IDEA 14.0.3\bin\idea.properties), and uncomment this line (line 13 for me), and change it for the good value (idea.system.path=B:\.IntelliJIdea14/system for me). The, start your IntelliJ, that will create the file. That's pretty much all. Don't hesitate to ask if you have a problem, Ill be happy to help !
MVP and MVVM are highly specialized instances of MVC, which by itself is pretty generic. MVC is a generic division of implementation responsibility between a data model (M), the visual representation of the data model (V) and the glue that binds them together (C). The MVC ideal is that the data model can focus on pure business rules, the view can focus entirely on presenting the data in a specific context, and the controller can focus entirely on selecting the appropriate view and coordination between the data model and the view. MVC is great for keeping responsibilities focused. However, what if the view itself has significant state and behavior? How to you manage that or test it? Ordinary MVC doesn't have an answer for that, except maybe more functional testing, because that view logic is locked away in UI code that can only really be tested using tools like Selenium or WindowLicker, which run tests in the UI directly. MVP and MVVM are specific adaptations to MVC to address this concern. MVP moves the view state and logic into the Controller in abstract form, presenting a model of the UI through an interface. The different representations of the UI provide trivial implementation stubs of the interface. The view logic can thus be tested without need of the actual UI. Thus, the View takes on a passive role and the Controller takes on a more direct supervisory role over the View (Presenter is synonymous with Supervising Controller). MVVM specifies a separate ViewModel class to encapsulate view state and logic. But the ViewModel is usually implemented according to the rules of an underlying data binding framework. Thus, instead of directly telling a view component to disable itself as in MVP, you instead bind the disabled property of the UI component to a property in the view model, and it is the data binding library's responsibility to proprogate changes between the ViewModel and the UI. Thus, the role of Controller is subsumed by the ViewModel and data binding library. Thus MVP and MVVM are special cases of MVC the goal of which is to specify a relationship between V and C that makes it possible to specify the view state and logic in abstract terms to facilitate testing without the need to directly execute tests in the UI toolkit.
Yup I found that link too, still unacceptable performance. I'm a massive IntelliJ fan so trust me I worked hard to get this working.
&gt; you still bolt on four wooden legs onto a dog and call it octopus That made my day :)
Websockets or a JMS solution are designed for this purpose either will fit your needs, Jetty has excellent support for websockets I found it very easy to get up and running.
Not necessarily a framework, but I've been taking a look at Netflix's open source stuff lately particularly related to microservices. I really like Apache Camel's rest dsl. You can do some interesting stuff with Camel and messaging using a broker like ActiveMQ.
What kind of files? Or is this some kind of online hex editor?
I want it to host text files, and java files, and C++, and c. 
Does someone know the differences between WAS v9.x and WAS v8.5.5.x (Liberty Profile)? I get that WAS v9.0 is a continuation of the older platform (I use WAS v8.0 at work), but both 9.0 and WLP seem to offer the same features: Java EE 7, Java 7 &amp; 8, etc.
The books by cathy sierra and bates are perfect to understand.. Head first java is very simple and the language is also easy
Do you want to edit them in a browser? I'd try for a restful api that way you can at least read and edit them following restful conventions. Directories can serve as collections. Use a javascript library to render based upon the extension in the URI. 
Yes i do! That's my goal. I want to be able to edit the files within the browser. Would Milton, or Apache Oak be the best way to start? My first question i guess would be is that the server i'm trying to create is a WebDav server or an FTP Server?
Principle of least surprise, I think. Consider String a = new String("a"); String b = new String("a"); a==b; // true (Object)a == (Object)b; // false, wtf?
Both WAS (WebSphere) and Liberty implement the full Java EE 7 API, or rather WAS -will- implement it, since they just released the first beta. The difference is that WAS is simply the old server. For reasons that not even IBM can fully understand even more it needs 2GB of code to implement Java EE, and an additional 200 to 300MB for each "server" that's created within the uhhh server. Since you always needs one WebSphere takes a minimal of 2.3GB. Now everyone who knows a little bit about code knows that 2GB of compiled code amounts to billions upon billions of source code lines. No single human can possibly comprehend what's in there. So it's not that strange that IBM themselves can't explain what on earth is IN that 2GB. To protect their own sanity (I guess) and that of their users they started afresh. Liberty is a brand new server that was started from scratch, and has been gradually incorporating more Java EE 7 APIs. The version 1 just contained some random APIs, version 2 contained all Web Profile APIs (plus some extra), while version 3 will contain all Java EE 7 APIs. As an interesting twist, they backported all Java EE 7 APIs recently to version 2 of Liberty. Instead of 2GB, Liberty just needs ~100MB for the Java EE 7 API. IBM remains IBM, so they can't help but throw in some enterprise confusions again. It's not simply Liberty 1, Liberty 2 and Liberty 3, but WAS WLP v8.0.0 for version 1 and WAS WLP v8.5.5.x for version 2, etc. Also, the *implementation* components (e.g. the JSF component/jar, or the CDI one, etc) are taken from WebSphere, but it must be realized that most of these are not developed by IBM from scratch anyway. E.g. JSF is Apache's MyFaces. For now Liberty is really fast, small and agile. IBM has to be careful now that they don't let it grow into WebSphere again. Huge enterprises have a tendency of having EXTREME problems with keeping something small and agile. Already there are some small cracks in Liberty. Instead of just downloading the thing and running, they keep coming back to wanting you to create a "server" first. It's weird, since Liberty is already a server, why do I need to create a server within a server? If I download Tomcat, I just run it, and there's no need to create a "server" first. if IBM are not careful then the simple task of creating a server will be accompanied by an another task where you need to configure the server, and then this small configuration will be accompanied by another, and another, and then a "helpful" installer will be provided to guide you through all these tasks and then it's really WebSphere again. But again, that's not reality ;) Hopefully IBM can constrain themselves not to do this. 
Sure, no problem. I would also add that the advantage that the specialization that MVP and MVVM confer in testing comes at the price of losing generality in the Controller. One of the central promises of MVC is pluggabilty of views, and the more detailed knowledge that the Controller has of the View, the less flexible you can be with different types of views. For example, if you have a requirement to support HTML (interactive) and Excel (reporting) view types. There's very little in common between these types of views, so you would be very hard pressed to come up with a common supervisory strategy (MVP) or a common ViewModel (MVVM). So you can either have multiple view specific Controllers or one generic Controller. Or, you might have MVC on the server (which allows more flexibility with clients) and MVVM/MVP on the client (where more flexiblity doesn't offer clear advantage). 
The differences do look subtle but the implications can be huge. I'm still not sure why these are called design patterns by some when they actually fall under architectural patterns.
It doesn't really make sense for functional interfaces to have checked exceptions in their type signatures. A checked exception represents a recoverable failure. The caller can take steps to correct the situation and try again. This is makes sense when you are in complete control of the program logic, the way things work in the imperative paradigm. When you are working in the functional paradigm, you're letting go of direct control of the program logic and instead sticking functions in a pipeline and letting the pipeline do the work. There's no place in the pipeline to deal with a checked exception - the pipeline completes or it aborts. Thus, functional interfaces should never have checked exceptions in their signatures because the pipeline can't do anything about it. Instead, you should handle the checked exception inside the functional interface or convert to a runtime exception if there is nothing you can do within the pipeline stage to recover. 
The stuff in the exams that is Java 7 specific is mostly syntactic sugar. If you are comfortable with the bulk of the content in Head First, it won't take you long to pick up the new stuff that is 7 specific
This is one of the best explanations of the differences I've seen, thanks sh0rug0ru. Although I'm still not sure I fully understanding the differences between the MVP and MVVM. Based on your explanation, are MVP frameworks more of an API to update the view, while in a MVVM, you would update the properties of the VM, and the view would 'automatically' be updated by the specific framework/implementation?
They are the Oracle Java professional certifications.
My company offered to pay me to do it, and I got a significant pay rise for doing them. I have it down on my CV along with my degree and other qualifications, but I was all about the pay rise for doing it
This is a genius idea.
"Deployment Toolkit" is also NPAPI, isn't it?
A functional pipeline is a chain of functions which takes an input value and returns an output value, and we can chain functions based on input types and output types. These are monadic types because the type bound only needs to match a single type per input type and output type. Thus, they combine in predictable and well-understood ways. On the other hand, checked exceptions are encoded in the type system in a parallel way to the ordinary input/output type specification to satisfy the uniquely Java catch and throw requirement. But checked exceptions are variadic, because you can define a method to throw zero exceptions, one exception or multiple exceptions of unrelated types, and you can chain methods which are checked but each throws exceptions of unrelated types. Thus, checked exceptions don't add up well, and functional programming is all about adding. Thus, there's a very good reason why your lambda should catch `SQLException` if the enclosing method throws `SQLException`, because there's no feasible way to get from your lambda to the enclosing throws block. Because checked exceptions, by their nature, don't play well with generics and I would argue with functional programming in general. On the other hand, unchecked exceptions are easy since they don't interfere with the type system.
I feel you're putting very contrived restrictions on what functions should do in Java. Exceptions are a core part of the language. There's no reason to just decide "Well I guess they don't belong anymore". Yes, they tarnish the purity of functional programming, but Java isn't a functional language. Most importantly, Java isn't a pure language. Exceptions are an important part of working with Java, and there's no good reason to throw them out for this context specifically. What you're suggesting is that throwing should be avoided at all costs. This is an idealistic approach. If Java weren't an exception-ful language, it'd be fine. But seeing as countless libraries and the even the language itself has so much baked into the exception system, it simply isn't practical to throw the system out. Going back to the `SQLException`, what am I expected to do with that exception? The rest of the method just propagates it back. And I could even stop using `ifPresent` and instead just use an if statement with a `get()` call inside, which would propagate correctly. But it doesn't make sense that that should be necessary. So I'm supposed to catch it within the lambda? And do what with it? Wrap it in a `RuntimeException`? Well then I'm just doing the same thing as propagating the `SQLException`, except now my try blocks that are further up the stack aren't properly catching it, and my whole program will likely crash incorrectly.
Thanks! Yes, with MVP, you specify an API that P uses to command V (and V uses to call back into P). With MVVM, you specify the wiring between VM and V, and the framework/implementation takes care of the rest.
It's not about "contrived restrictions". It is literally type arithmetic. Within Java's implementation of generics, monadic types add well, variadic types don't. Exceptions don't tarnish the "purity" of functional programming. If they did, then no functional program could do division (division by zero is an exception). An exception is an indication that the function cannot be evaluated for the input values. The issue is particularly with the interaction between *checked* exceptions and generics. Go ahead and throw, but throw an unchecked exception. On a side note, Scala completely ignores checked exceptions altogether and allows code with uncaught exceptions to compile. This is fine because checked exceptions are purely a Java language thing, and the JVM could care less. &gt; Going back to the SQLException, what am I expected to do with &gt; that exception? Forget lambdas, what are you expected to do with that exception in the first place? In this case, if you really need to keep that exception around, you could just wrap it in an unchecked exception. Then back at top-level, rethrow as `SQLException`.
Very nice framework, but you're still violating the site rules. domain submitted from|count|% :-|-:|-: [blog.primefaces.org](/search?q=%28and+site%3A%27blog.primefaces.org%27+author%3A%27cagataycivici%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|17|65% [primefaces.org](/search?q=%28and+site%3A%27primefaces.org%27+author%3A%27cagataycivici%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|6|23% [youtube.com](/search?q=%28and+site%3A%27youtube.com%27+author%3A%27cagataycivici%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|4% [parleys.com](/search?q=%28and+site%3A%27parleys.com%27+author%3A%27cagataycivici%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|4% [vimeo.com](/search?q=%28and+site%3A%27vimeo.com%27+author%3A%27cagataycivici%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|4% subreddit submitted to|count|% :-|-:|-: [java](/r/java/search?q=author%3A%27cagataycivici%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|22|85% [javascript](/r/javascript/search?q=author%3A%27cagataycivici%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|8% [JavaServerFaces](/r/JavaServerFaces/search?q=author%3A%27cagataycivici%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|4% [technology](/r/technology/search?q=author%3A%27cagataycivici%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|4%
This is a pretty good solution I hadn't thought of. This is definitely the simplest solution, although I'd say it's debatable which is better. I think the problem is that you have to check for `Try` objects which you would need to re-throw. It's just more verbose and cumbersome. EDIT: Yea actually there is a pretty glaring issue with this. Back to the `ifPresent` example, there's no way to actually throw the exception. public class Try&lt;X extends Throwable, T&gt; { private final boolean thrw; private final X exception; private final T value; private Try(X exception) { this.exception = exception; this.value = null; thrw = true; } private Try(T value) { this.exception = null; this.value = value; thrw = false; } public T get() throws X { if (thrw) { throw exception; } return value; } public static &lt;X extends Throwable, T&gt; Try&lt;X, T&gt; of(SupplierX&lt;X, T&gt; sup) { try { T t = sup.get(); return new Try&lt;X, T&gt;(t); } catch (Throwable x) { @SuppressWarnings("unchecked") Try&lt;X, T&gt; xtTry = new Try&lt;&gt;((X) x); return xtTry; } } } That's a pretty simple implementation, assuming the existence of some `SupplierX` type, which is easy to make. Then this code fragment demonstrates the issue. opt.ifPresent(obj -&gt; Try.of(() -&gt; throw new Exception())) The `ifPresent` call won't call `get()`, so the exception will never be properly thrown. So essentially, the issue is that you have to be able to regain access to the Try instance, which isn't always possible.
 // PBKDF2 with SHA-1 as the hashing algorithm. Note that the NIST // specifically names SHA-1 as an acceptable hashing algorithm for PBKDF2 Is this still current? There has been a lot of talk about SHA-1 not being very secure anymore and companies migrating away from it.
PBKDF2 is a recommendation for generating a cryptographic key for a password. Not hashing a password. #***DO NOT USE SHA-1 FOR PASSWORD HASHING AND SECURE STORAGE***
IntelliJ
IntelliJ IDEA Ultimate 14. It's great and fast and expensive! Sucks for Android oddly though, so I use Android Studio for Android development.
PBKDF2 is a perfectly acceptable password hashing function, though many consider bcrypt or scrypt to be better options. [OWASP recommends PBKDF2](https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet) "when FIPS certification or enterprise support on many platforms is required". It also has the advantage of being included with Java SE. And while SHA-1 itself is no longer considered safe for purposes like cryptographic certificates, when used in PBKDF2, it is perfectly fine. [Here's a good discussion on why.](http://stackoverflow.com/questions/4938906/is-sha1-still-secure-for-use-as-hash-function-in-pbkdf2)
Android studio is IntelliJ. 
There's no turning back. 
Thanks! For now, I've simply added your text to my article (including the kudos you've earned, of course). I intend to update my own text according to what I've learned from you during the next days. If you want to change something, just tell me.
Thanks! I haven't heard about IntelliJ till now. Ill check it out
Not really. Try taking a project from AS to IDEA or vice versa. It has issues. I'll stick with AS for android projects and IDEA for everything else. Yes, it is the same underlying engine.
This is about programming help and as such should go in /r/javahelp as is outlined in many places in this subreddit. /r/Java is about: **News, Technical discussions, research papers and assorted things of interest related to the Java programming language** but not about help with Java programming.
C code for the microprocessor is located here if anyone is interested! http://pastebin.com/5MsYEmD9
NetBeans does work really well for me.
I learned a while ago to never couple my source control with my IDE. It seems like the two always behavior better when decoupled. let each focus on their strong suit.
&gt; That's like saying just because square pegs are important, you should hammer them into round holes. What? That's a strawman that's nothing like what I said. &gt; The APIs in the post upcast all checked exceptions to Throwable, and thus take away information from the compiler Again, What? The code in the post propagates the correct exception types. Generics work in throws signatures. try { optional.ifPresent(obj -&gt; { throw new CheckedException(); }); } catch (CheckedException e) { // handle e } That compiles and works correctly.
Sidenote: This code from the article public static void main(String[] args) { store(new String[1], "abc"); //ok store(new String[1], new Integer(10)); //?? } Works because of array coercion, which is a deficiency in the language on its own. It's not an issue with generics. Anyway, yes, you can break the system like that. But I can't think of a way that you would do that on accident. You would have to be trying to break it for that to be a problem. This isn't new to Java. Basically anything with generics falls prey to the same issue if you make it.
It costs money for the good stuff, but if you develop Java professionally, it's money well spent.
MyEclipse
I guess using readAllLines wouldn't be bad, however for our projects that has two main drawbacks: 1. Have to use a separate data structure to store the lines. (i.e. we're not allowed to use LinkedLists in our projects) 2. Not ideal for large input sizes. However, I after your comment, I will definitely be adding character set support into the reader. It currently defaults to UTF-8. Thanks for your feedback! 
I use Eclipse (and surprisingly vim on a couple bug slips for an environment I didn't have set up) at work and hate every second of it. IntelliJ for everywhere else. I might just give in and buy a license (I work for a smallish company, so having them foot the bill is out of question). 
Netbeans since Jmonkey SDK is based of it
at first, I admit I thought the idea was trivial. But then you reminded me of larger files and memory management. However, this one file solution may warrant a code snippet solution.
that sounds horrific.
$499 Not crazy expensive but more than nb or eclipse 
People get all sorts of offended when you use familiar terms to express slightly different concepts. I watched Java 8's development pretty closely and noticed that "closure" disappeared from mailing lists and spec docs as if the word became an obscenity. I imagine that was done on purpose, to avoid endless complaints from people saying Java's "closures" weren't their "closures" (as defined by their pet language). Oracle failed to avoid this problem with `Optional` and the resulting volume of debate (which led nowhere) was absurd.
Intellij idea and Eclipse. It depends on the project. One thing I've found, if Eclipse starts running slow and crashing. Try switching/replacing the workspace. I have a different workspace for different repositories and start them up from the commandline with the -data switch. Intellij is good, but not perfect. It doesn't play so well with OSGi. Also, what is up with jetbrains robot.txt?
`java.nio.file.Files.readAllLines(Path pathToFile)` version (added in Java 8) is better because it _always_ uses UTF-8. Older Java APIs (e.g. `InputStreamReader(InputStream in)` &lt;- this should be deprecated!) uses default-undefined-platform charset which only causes bugs. &gt; You should always consider the encoding when reading/writing I assume everything is UTF-8 (unless handling some historical data) ;)
What do you hate about it?
NetBeans whenever I can, and the latest RAD (at this point, v9.5 aka Luna) for projects destined for WebSphere.
My head just exploded. I did not know you could have more than one workspace. http://help.eclipse.org/mars/index.jsp?topic=%2Forg.eclipse.platform.doc.user%2Freference%2Fref-workspaceswitch.htm
Sublime text and eclipse. As someone who has a ton of projects open, and doesn't want them in separate windows...IntelliJ doesn't fit my needs.
Am I missing something with the title - this isn't a free profiler, the page linked to is what it'll cost. Anyway, the product sounds interesting, but nothing in there convinced me it's better than having properly set up environments and using profilers which are actually free.
More than costs of living where I live.
You're spouting random buzzwords now and lack any detailed information on what you want to do. 
&gt; makes it just unusable It's not perfect, but in a long term it makes it future proof.
Apache Sling.
To be honest their failed pricing/marketing gimmick made me look elsewhere and what I found is good enough to save on next release. I know I am single customer, and they could probably careless for me but as far as I am concerned they gave me opportunity to look for alternative which I found and don't need them anymore. 
For Maven based project : Netbeans. You will love the fact that the project descriptor is Maven and the project explorer will show you only files needed and separated by realms (Source/Test, resource and so on). You will not have .iml files or .classpath crap pollute you project. For anything else : Intellij. Netbeans is the king of Maven but Intellij is the Emperor of Autocomplete. You will love this feature which no IDE is able to compete. Your coworker can't excuse themself for their shitty two character based variable names with Intellij. Sidenote: if you do Maven, forget Eclipse. Eclipse was good when it has been released using SWT but now, it's became a frankenstein trying to offer everything in a non-coherante way. When you will try to do some Maven with it, you will end up by editing you POM file : the IDE is so bad that it will sweat it bad handling into your project descriptor. 
That's a ~~good~~ start. I still cant' get over the fact that full blown JSON support is still unavailable from within the JDK. Edit: gosh the difference a word makes
An appropriate choice of a data structure makes 99% of a program's performance. This includes designing data structures for efficient invalidation. In a server I worked on in the past, sessions were kept in a custom data structure (there were a few good reasons for not using the session engine provided by the applications server, including the use of a proprietary protocol). We had several data structures (HashMaps and TreeMaps mainly) pointing to the same session objects. One of the session properties was the last activity timestamp, and one of the TreeMaps was indexing this field. Every 30 minutes a "SessionInvalidator" timer task would run, traversing the structure in order and invalidating every old session, then feed a pointer to the object in the queue of a lower priority thread that would remove it from every structure. The invalidator task would stop when the first valid session was found, assuming they are ordered so the rest of them are known to be valid. In more general terms I'd: * Make sure data structures are efficient for finding cache entries to be invalidated * Make sure data structures are efficient for removing such objects without major impact on CPU usage * If the previous point is not feasible, add a "valid" boolean to every cache entry and use a lower priority thread to remove them. 
&gt; Do you think it's a good idea Of course not. See my comment above about "historical data". Your use case is probably different and I don't want to discuss about obvious things :) Stuff should not be stored as ISO-8859-1 in the first place. For example, imdb.com used ISO to encode all movie titles and it was disaster...
[removed]
Agreed, I'm using it for a green field project. I'm writing out custom TypeAdapters for everything - it's rough and it feels like boilerplate, but it's ultimately necessary to preserve immutability and security against malformed JSON.
I'd suggest looking in to an even more powerful profiler which also comes with the JDK; Java Flight Recorder. There's actually a really good post on /r/java at the moment https://blogs.oracle.com/buck/entry/a_great_example_of_the
I agree. I meant that at least there's something on the JDK that provides some support to JSON. Not ideal by any means, and very limited. What do you expect from map-only support?
I hate the CTRL + F4 shortcut for closing tabs. And what I hate the most is, CTRL + Y which is supposed to be *undo*, but no! It's delete line! After a while I accepted the fact that I need to switch the shortcuts, bad experience. There are some minor good features like auto-save. But otherwise, I'd choose Eclipse.
&gt; straight forward API, just save my Pojo, serialize it json, 1st normal form. If your fields are not atomic then searching the database will be complicated and not very performant as you'll have to read the whole thing back to the app, extract the field, and check for a match. If you use a relational database instead and store each field separately, you'll be able to express your queries in SQL, letting the DBMS handle the search filter and returning only what you actually need. &gt; Data should be stored in the local disk. Okay, then transferring more data than needed is probably not a problem as the network won't be a performance bottleneck. Then the simplest approach is using a dedicated folder, use the UUID as filename and json as the file content. Otherwise NoSQL will be an easier setup when compared to SQL. Another possibility is using DBF files - there are several libraries to read them easily from java. SQL might have the advantage of making it easier to implement more advanced features in the future. 
What is a "nightly" build?
Given the problems you've raised with readAllLines, try this: Files.lines(Paths.get("mypath"), StandardCharsets.UTF_8).forEach(str -&gt; doWork(str)); The stream is "lazy" so should work fine with arbitrary file sizes. No list is created.
You can embed H2 and have it write to a file in your home directory. http://www.h2database.com/html/quickstart.html Then use some lightweight entity library to do the mapping. You can use DeltaSpike to start CDI.
"Let's reinvent the wheel and disregard any quality attributes" ~ Every new wheel every couple of days
What is a "glass" fish?
You mind if I ask how old you are? When I was younger and in school I was a very strong idealist about FOSS and would use nothing but it. Now that I have been working for over a decade I have a more pragmatic approach. I am not going to use a low quality tool that shows no hope of ever improving if there is something radically better that exists. I can say with complete honesty though that IntelliJ is one of just a handful of applications on my machine that are not FOSS.
I don't like to deter and I'm sure there are applications for the product out there, but I see them being quite niche. Flight Recorder already lets you profile production systems with very low overhead, due to its being written in to Java, and they have triggers for triggering profiling, etc. I like the idea of smart breakpoints, but the idea that you can inspect the heap with **no** overhead, is idealistic. Again, this may depend on the size of the system you're writing, and I imagine there's some kind of memory copying or disk writes done to accomplish this, but there's always an overhead when inspecting the heap, otherwise you lose consistency, or incur memory 'leaks'. Finally, I didn't get any of what you mentioned from the frontpage of your site, though admittedly I cannot see the video as I am behind a corporate firewall. I'd also suggest having a proof read of the site, there are a number of glaring issues which made me very weary of the site and the legitimacy of the product. 
Why are you in the /r/java subreddit? It's not a subreddit about coffee, you know.
Can we use this for resources/files located inside a jar? If not, what's the modern way of doing it?
I'm not even on JavaEE 7 yet. Now I am sad.
Hi! I've answered that question in this [FAQ entry](https://github.com/Jorl17/jar2app#does-jar2app-bundle-its-own-jrejdk-can-i-bundle-my-own). You can indeed bundle your JDK/JRE, but it is also included in OS X by default. However, you can't bundle "just any" JDK. Currently you can only use the ones that follow the official Oracle JDK format/directory structure. You can even pass it in Zip format. Oh, and I don't minify the JDK, but I list some other projects that do (see Packr). For instance, I've bundled applications with 1.8 and 1.6, because I have both. It's a matter of passing the folder as a command line argument. I'm pretty sure there are things like this for Windows, probably even better. Last time I checked, there was something proprietary called jar2exe and I think it did most of this.
Is it really a nightly when it was created at 8 in the morning ;)? It looks like they've been making these since October 9th.
Eclipse, and I love it.
That has to be the stupidest mentality I have ever heard. Are you RMS? You better not own a single piece of property with any proprietary code or I am going to say you are logically inconsistent. 
Autocloseable means... That they can be used in try with resources, not that they will be auto closed...
Please say when you double-post. Redundant discussion/work can be prevented. https://www.reddit.com/r/javahelp/comments/3pieha/programming_practice/
A few different ways: 1) MapDB gives you a simple Java Map (amongst other things) that you can store serializable objects to. This takes just a few lines of code to set up and can be fine for prototyping. http://www.mapdb.org/ 2) Use a serialization API like Kryo (avoid Java serialization, it sucks) and just save the files to disk with the file name as the key. Again, very small amounts of code. Be aware that file names have awkward restrictions. 3) Use Hibernate+a local db like H2. You can then define some JavaBeans and mark them with the right annotations. Database tables will be created and you can then read/write the beans as you wish. This is a bit more work up front but because you're using a real database you won't find yourself painted into a corner later. Of course for a little hobby game project you can just start simple and migrate data to a more complex setup later if you need it.
Java 8 comes with a tool called javapackager that creates EXEs, DMGs, MSIs, DEBs and tarballs. They contain a bundled JRE.
I see everyone is recommending H2. I whole heartedly agree if you wish to use traditional SQL. We use and abuse H2 at work in ways that would scare many people (I mean, who runs H2 in production, like really? On servers!? Thats crazy talk). It is very good. But if you want to go down a NoSQL sort of option, more key-value, checkout LevelDB. There is a JNI wrapper for it and a Java implementation (though I have no experience with this). 
upvote for Mount and Blade. Bless you for any and all Mod work. You are doing God's work.
Clean your workspace (close/delete projects no longer in use). Uninstall plugins you don't use anymore, or prevent them from starting up (Preferences-&gt;General-&gt;Startup and Shutdown). Run the IDE with JDK 8, give it at least 2G ram (edit the eclipse.ini). Makes it really smooth, responsive and about 10x faster than IntelliJ when running unit tests.
haven't played with that one, but I'm a fan of the commercial one YourKit... I've found it to be invaluable. 
It's not a planned release, it's just a build dump of whatever state the code was in at the end of the working day (so the only quality guarantee is that it compiled - everything else may be broken!).
&gt; Implicit type declaration will make static type languages attractive even to programmers who are used to dynamic languages. At least, this is my 2 cents. If that's true, I want my explicit type declarations kept in Java just for that reason. I'm only half kidding. A lot of it seems to come down to (and no offense to OP) cry-babies whining about typing a few extra characters. I just don't get it. Those few characters are so far out of the realm of what I care about when I'm writing code. The IDE can generate most of it for you if you care that much. If, for some reason, typing those few extra characters is what really grinds your gears, I feel like you're just too unskilled as a programmer. Some offense intended. Instead of worrying about clean abstractions, good object design, solid API concerns, testability, immutability tradeoffs, SRP, LSP, CC, etc., you're worried about a few extra strokes on the keyboard. The thing you're concerned about is of no concern except to those that don't have higher-level concerns. Once you get over the hump and are actually building software to do something, instead of ... whatever you're doing now... you'll find that these things just fade away. 
or, it's the most interesting project ever. every time i've had to get deep with the GC, it's been to amazing results. 
maven: the worst build tool for java, except for all the others. 
Regarding the heap walk with no overhead this is how: when you create an smartbreakpoint javosize includes the method objects in a static accesible map, just a reference. Then from the GUI the objects are dynamically inspected on demand, and the values sent back. This is the way you virtually incur in no overhead, but at the same time you can inspect or modify any live object in memory. 
Probably our communication skills are very poor, but this tool has nothing to do with a conventional profiler. Here is how we differ: With jvisualvm you were able to identify your slow method. But then you need to compile that method,stop your application start it again and get the problem fixed. With JAVOSIZE you would have found your slow method, probably in a quicker way, but you would have fixed it without compiling anything or restarting because you can edit the classes there. I feel this is, disregarding and subjective valuation, an important different that creates a new set of tools.
I would do it with OrientDB and their object API.
I've pretty much conceded that I'm the biggest weak point in the productivity chain, rather than the technology stack or the dev environment. I'm also used to NP++ for HTML and php work. NP++ has a function list, file explorer, auto complete, syntax and bracket highlighting, and workspaces; for my needs I'm fine. Serious debugging or refactoring, you need a proper IDE. I have high hopes for NP++ down the road. ~~Rome~~ Emacs wasnt built in a day either
For most of my work NetBeans is the sweet spot in terms of features, speed and ease of use 
We use WebLogic for our production app server. Java EE 6 as of 12.1.3 with no information about a release date for Java EE 7 support. What is going on with Oracle and their WebLogic product?
github, gitlab, dropbox. these are things you can use to share your work together (by keeping a remote "master" that you can push changes to) also, as others hae said, read /r/git and a litte about version control, and you're on your way. also, git, github and gitlab are enterprise software and look great on a future resume. 
I thought GlassFish was discontinued.
Tested it and it works: byte[] allBytes = Files.readAllBytes(Paths.get(Main.class.getResource("/log4j.properties").toURI())); String text = new String(allBytes, "utf-8"); System.out.println(text); Thanks! I'll also keep in mind that the scanner style should be used if you don't wanna load a large file into memory.
which would make the startup slower. lot's of jars too, and would make my download-n-install app significantly bigger.
&gt; What is going on with Oracle and their WebLogic product? Nobody knows. Might be there next week (JavaOne), may be there after 2 months... who knows?
[removed]
I have a bit of experience with MongoDB. and in my experience you can't do joins without clever javascripting. Is this true for other NoSQL databases? What's the middle ground between Commons JDBC and Hibernate? I've looked into: 1. http://www.jooq.org 1. http://www.sql2o.org/ jooq is ~1.5mb while sql2o is ~150kb. jooq's documentation is starting to look like Spring's documentation. the only complaint I have with sql2o is on the [insert statements](http://www.sql2o.org/docs/updates-and-inserts/) where I have to repeat myself in writing the column names; I can probably use reflection to help me on this. 
If they are only asking for years of experience less than the age of the framework, I can see the problem being your math skills. Most of the time they want more years than the framework has been around.
Wow, this is the type of reply I was expecting, thanks so much.
Thanks a ton for your help! And ya I know we are pretty beginner. We just took a computer science class last year and are in an independent studies class for it. Hoping to become more skilled as I get more than a year of experience under my belt :)
Can't wait for them to release 9 so I can start using 8
There is a very small git course on CodeAcademy it just became available like two days ago. It will take about 15 minutes but it will get you through the basics right quick. I did it myself just last night. https://www.codecademy.com/en/courses/learn-git Looks like it is going to expand in the future as well.
I actually like that you posted your military experience. It says something about you and gives me a non-technical topic to talk about. The other suggestions are good. If you lived in Chicago I'd bring you in for an interview for sure. Good luck with your search. 
This is the only way some companies get to upgrade :( Falling 2 major versions behind is scary sounding
Are they proposing this as an alternative to maven/gradle?
That's one thing I like about Amazon. We upgraded everything to 8 months ago. Using 7 in production is a pageable high-severity offense at this point. They take patching seriously.
depending on the framework, wouldn't be completely acceptable to just add throws InterruptedException to the signature, so that it bubbles up to the caller (ex spring MVC's internal method calling) 
Man, something about the english on the website and in this title, doesn't inspire much confidence that the product does anything useful. Further, I don't think I would actually want to "repair" the problem in prod; I'd rather push to source control &amp; let automated tests verify I didn't just make the problem much worse.
Are you Yegor's alt account? domain submitted from|count|% :-|-:|-: [yegor256.com](/search?q=%28and+site%3A%27yegor256.com%27+author%3A%27bibonix%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|20|87% [blog.muhuk.com](/search?q=%28and+site%3A%27blog.muhuk.com%27+author%3A%27bibonix%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|4% [medium.com](/search?q=%28and+site%3A%27medium.com%27+author%3A%27bibonix%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|4% [jeremymorgan.com](/search?q=%28and+site%3A%27jeremymorgan.com%27+author%3A%27bibonix%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|4% subreddit submitted to|count|% :-|-:|-: [programming](/r/programming/search?q=author%3A%27bibonix%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|13|57% [java](/r/java/search?q=author%3A%27bibonix%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|7|30% [phantomjs](/r/phantomjs/search?q=author%3A%27bibonix%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|4% [aws](/r/aws/search?q=author%3A%27bibonix%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|4% [devops](/r/devops/search?q=author%3A%27bibonix%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|4%
Or never if coding for Android. 
New source directory layout? `project/src/main/java/com.example.module/com/example/foo/bar/actualcode`
Maybe the site communicates these facts properly, I don't know. I generally don't follow links that have been posted by people who show a lack of regard for the truth (see OP's title).
Not unless your company uses IBM JDK...then you're stuck with whatever old version until they finally drop support (such as JDK 6 for WAS v8.0).
I know you try to do good but could you compact these tables a bit? It's not so bad here but [others](https://www.reddit.com/r/java/comments/3p8x2h/best_php_cms_for_java_developers/cw459sm) are quite long. Maybe top 5 instead of top 20. Maybe the table could be side by side like domain submitted from | count | % | subreddit submitted to | count | % :-- | :-- | --: | :-- | :-- | --: yegor256.com | 20 | 87 | programming | 13 | 57 GitHubs gists support markdown (with tables). The expanded version could go there.
Yes, I think you are right, there's no support in early access, and I based my idea on this quickstart post that is now marked as obsolete. http://openjdk.java.net/projects/jigsaw/doc/quickstart.html So Reinholds post is the most recent source and if he says no versions, there will be no versions. It makes sense.
For that "secure" login page!
I've used Thread.interrupt() to ensure a proper shutdown sequence in programs whose threads sleep a lot, or get blocked in Selectors. Results were good, it's a good technique. However, throwing a RuntimeException doesn't look good. A thread is not interrupted "just because" and it's not necessarily a bug in your code. It merely means you told your thread to stop doing whatever it was supposed to do, so you should just cleanup and exit normally. 
and Android is still stuck with Java 7...
Ugh. We just "upgraded" to WAS 8.5...so we can use java 7 now!
You have two huge gaps in your employment from 2008 to 2012 and from 2013 to 2015. How come? If you want help you really should give a bit more back-ground information. What are you failing on? Are you getting interviews and if you do; what happens? You really should post this in /r/cscareerquestions.
Several that I know of...
You mean beanshell wasn't enough for you???
Actually 6 and a half, since Java 7 (the language) is only fully available as of Android 4.4.
I don't have anything against someone posting relevant articles to this sub or others, as long as it is not pure advertising with nothing useful for its users. This article in particular was decent and way more useful than many other submissions in the past days. I don't care if this is coming from the same blog or person or company every few days, as long as the content is useful.
This type of modules are also quite common in other languages, Ada and .NET for example. The idea is that you want to have packages are are only meant as private packages for what is the actual public API, but provide some kind of common code anyway. With the current situation nothing prevents a developer to just link to that jar, even though it isn't supposed to be visible. Then when it changes, everything breaks. With modules, only the module sees the jar with the private APIs. No chance of a random developer seeing it.
It looks like it will be easy to keep jpa session open for rendering with this feature.
I just finished migrating to 8, half because of time API
Well, then the title of this post is even *more* stupid than I thought so far. &gt; The Free Next Generation JAVA Profiler, "User will benefit a 15 days trial." so don't waste your time just visit our site . So far, I assumed that it means: * free Java profiler * except it's not free, it's only free for 15 trial days * so visit our site where you can test the software that we want you to pay for From what you just said, it seems to instead mean: * free Java profiler * also, the with-everyting version can be tested for free for 15 days The title is *specifically designed* to cause misunderstandings. The author of the title is an idiot.
Yeah, and there is also this ominous jpage thing in eclipse. No thanks.
There's probably two stages to this: 1. Get leaner JRE out so smaller devices don't need to run the full 15-or-whatnot-megabyte stack of unneeded stuff from the 90's 2. Build on the module system. My bet is Maven/Gradle can extend on this new metadata and packaging information pretty nicely. I don't know OSGI that well so hard to say what will happen there.
Have you read it before? I'm looking forward to getting stuck in.
I've read it. It's a very good book for learning Java and OOP, but keep in mind that it's a little bit old now. All of the fundamentals that you'll learn will be the same, but there are newer features in Java 7 and 8 that aren't covered in the book. Just supplement TIJ with some online references for later features.
As far as I understand there is nothing like that. However, without using any library, you can try Collections.nCopies(5, null).forEach((a)-&gt;{ System.out.println("Hello world");}); It will create an unused collection of 5 nulls, however. Maybe this IntStream.rangeClosed(1, 5).forEach((i)-&gt;{System.out.println("Hello world " + i);}); is cheaper? 
Yeah, I do understand that. I've been doing Java for about two years now, so I know a bit of the newer functionality anyway. Just want to drive the fundamentals home and have a good reference guide. Thanks.
We were Weblogic, but are moving to Jboss EAP. Even EAP is still JavaEE 6 though. You running any of the Fusion Middleware products by any chance? I have persistent flashbacks about those still, especially about Oracle SOA suite.
&gt; Not FOSS, so no-go! IntelliJ Community is open source with an Apache License: https://github.com/JetBrains/intellij-community I was a long time user of Eclipse that switched to IntelliJ Ultimate a few years ago. It is so much better than Eclipse, that I'd rather switch to a combination of using IntelliJ Community for Java (and PyCharm Community for Python), and Emacs for everything else, then go back to using Eclipse. &gt; If only 10% of all these great programmers that use IntelliJ and complain about eclipse (which imo is a great tool) would contribute some code to the eclipse project, it would become the greatest IDE in no time. Why not do that instead? I'm not familiar enough with the Eclipse codebase or plugin development to judge it, but I have made modifications to IntelliJ Community and its quite easy to get into. I was able to quickly understand the codebase and make the modifications I wanted with minimum effort. I haven't submitted a pull request yet, because it's still a work in progress, but I plan to. Anyone familiar with the Eclipse codebase able to weigh in on how easy it is to work in? From my point of view, I think IntelliJ Community is the better open source project for developers to contribute to, despite it not having the huge open source plugin ecosystem Eclipse has. I'm judging this from my experience studying the IntelliJ Community codebase and being a user, and from the quality of Eclipse 4.x as a user (4.x was a buggy nightmare that interfered with my productivity; I stuck with 3.x as long as I could and even with that I experienced annoying bugs on a daily basis).
When you're ready for the next level, Java Concurrency in Practice. 
I was a long time Eclipse user before switching to IntelliJ IDEA. A good rule of thumb with Eclipse is that as soon as you have a version of Eclipse + plugins that works well, you stick with those versions for as long as you can without upgrading anything (and if you do attempt an upgrade, always preserve your old copy of Eclipse/plugins and old workspace in case you need to rollback; make a new copy of everything including your workspace when you start using a newer version). Unfortunately, I could never get 4.x to a usable state due to the bugginess of the versions I tried (4.2-4.4). I stuck with the last 3.x version as long as I could, but eventually lack of Java 8 support in 3.x forced my hand and I switched to IntelliJ IDEA instead.
Hope to use it in 2020 :P
Aand it's the next 0-day-old account that immediately spams its domain within a few hours. Business as usual. domain submitted from|count|% :-|-:|-: [4dev.tech](/search?q=%28and+site%3A%274dev.tech%27+author%3A%27leonardohjines%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|3|100% subreddit submitted to|count|% :-|-:|-: [java](/r/java/search?q=author%3A%27leonardohjines%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|33% [devops](/r/devops/search?q=author%3A%27leonardohjines%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|33% [reactjs](/r/reactjs/search?q=author%3A%27leonardohjines%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|33%
I do this in most of my angular applications. I have a node 'server' application that can serve all the stuff I'm currently developing and also forward certain routes to a back-end (like a REST API for example) if needed. For front-end dev this is more or less standard. Having to redeploy stuff all the time is just too time-consuming. You just want to be able to F5 (of even better: Live-reload) whenever something changes.
Direct link minus blog-spam: https://www.youtube.com/watch?v=ckzZd3tIrho
Just one author Timothy Budd, google his book understanding object oriented programming with java. 
I have TIJ open now in PDF form, and I think for every section I've dipped into, it wouldn't be as good if that were left out. Java as a language is probably easily defined in less than 100 pages, but how terse do you really want a book to be when you want to **really** learn about a subject; e.g. annotations and learn how it got that way, it's weaknesses and strengths, etc. You can't read a chapter of TIJ without learning about new corners in Java. Gosling himself could probably pick up a few things from this book. Bruce's only mistake here is in pandering to beginners and making it a lot easier to build up a Java knowledge foundation from scratch. I'm just thankful he doesn't listen to criticisms about the size of the book. Maybe the book's scope implied by the title has been exceeded, but I feel it's a bit churlish to insist that he keep the length down merely because "no, it's too much good stuff!" If you would care to counter with specific examples of where you think the book goes overboard, I'd be happy to debate those, but you can probably tell already that I'm biased towards comprehensiveness.
&gt; A JavaEE book is of course going to ridiculously long winded because it's a stupidly complicated framework, even Oracle have essentially abandoned it. Java EE is far from abandoned. https://blogs.oracle.com/java/entry/introducing_java_ee_7 https://blogs.oracle.com/theaquarium/entry/java_ee_8_roadmap_update 
.ifPresent() and .orElse() are functions the author is looking for. Learn your API before you complain. 
Excellent book! I still have my 1st edition from 1998
Thinking In Java is how I learned to program in Java... about 15 years ago? It's a good book, especially you have a grasp of programming basics (I came from a C/Pascal background). My personal favourite of all time is Effective Java.
Having read a lot of Java books, what worked for me was: * Going through the Java trail (Oracle site) * Reading Effective Java every few months and internalizing everything The former just teaches you essentials of the language, the latter tells you how to use it effectively. A lot of good tips in there including how to code defensively. Oh, also, make use of the great ecosystem of static code analysis tools out there: FindBugs in particular.
Is it like "Effective Java" or it's more like a tutorial book?
Thinking in Java will certainly do the trick.
One way would be to step through the array starting from the end and going toward the beginning; as soon as you find something\*, stop. *Note that in Java, arrays of `int`s are initialized to all zero, so you won't be able to distinguish between "no value was entered here" and "a zero was entered here". If you use an array of `Integer`s instead, or a `List&lt;Integer&gt;`, you won't have that problem.
Probably more of a /r/javahelp question. 
in Kotlin, an alternative JVM language, you can do: for (n in 1..4) { println("Hello world") }
Better say thanks. 
I learnt C++ from his TIC++ book, and I think I had his TIJ too. Definitely good books to learn the languages from. Much better than those Java in 24 hours and Java for Dummies style books.
Nicely done! Why not try something more complex next. I know -- How about a nice game of chess?
Effective Java is more of your second Java book than your first. :) And it really should be your second Java book.
TIJ is your first Java book. Effective Java is your second Java book. Basically Effective Java won't make sense for beginners without reading TIJ first. And TIJ is a very good first book on Java 5. Perhaps a little old, but good enough for most beginners. A fifth edition would be nice though.
The latest edition covers Java 5, so does cover annotations and generics. You don't get lambdas, but that's the only major feature to the language missing. For beginners, that's not a huge omission, and easy to learn once you understand the basics.
I work in a company delivering software all around the globe and from the debug logs I have pretty good view of what libraries are being used. Turns out Java world does not really move forward that fast and especially large companies are stuck with older technologies. 5-7 year old tech is still actively used in so you don't have that much obligatory catching up to do. For example it's really common to see Hibernate 3(Hibernate 5 is out) and Spring 3.x (Spring 4.2 is out). Java 8 user base is of course growing and lambdas are the new hot thing, although when you look around in library sources like I do daily, you rarely see any, because most frameworks have not yet dropped java 6-7 support. Java 7 nio is also supposed to be everywhere but you rarely see that too for the same, legacy reason. Spring has released Spring Boot, which is really easy to set up and is gaining popularity. Most of the frameworks have moved to annotation based configuration, but there's probably some debate about it, whether it's any better than XML. I guess it's really dependent on the context used. From the server side, not that much has changed, JBoss series got renamed to WildFly, and its internally not using Catalina anymore, but Undertow. It supports Java EE7 spec. IBM WebSphere has released something called Liberty Profile, which is also Java EE7 compatible and very lightweight compared to WebSphere itself. I personally prefer WildFly over everything else. From IDE side, I've personally tried all big three, but stayed with Intellij. I don't like Eclipse, because it's grown really massive and I like the IntelliJ's concept of "workspace" much more than Eclipse's. I used to learn Java on Eclipse and used it for years, in the end it's really a personal preference. From the build tools, you rarely see Ant. Maven is still very common. You can speed up you development cycle with JRebel, which allows you to skip the redeployment and building phase, when making changes to the project. I really haven't touched JS for years, so I don't know any latest trends in it. 
You are supposed to use a logging framework. These can add a lot of important information and timestamp is always a default one. Look at log4j2, logback, jul. Also consider using slf4j. 
Yep, you're right. Both topics should have been in the first list, where you're going to have to learn a whole lot of new stuff. Thx for catching that. 
Not necessarily. They could have added time stamps to exceptions without violating SoC. But when Java was released they didn't and there's not been an unavoidable need to add them so they haven't added them to exceptions so far. Granted, all languages that I've used don't timestamp exceptions either.
Thanks for the explanation. :) I still think it'll come in handy to see where the language has evolved from. The best developers are the ones that have been doing it for 20 years. I'm still really new to the industry.
Well it is, text wise. I wanted to learn some more java as a hobby and every time i open the book i feel intimidated by the number of pages left in it.
To find out which libraries are used the most use this: http://javalibs.com/charts I see you used EasyMock, let's compare it to Mockito: http://javalibs.com/compare/mockito-vs-easymock Hope this helps at least a little bit.
Let's [compare EasyMock, Mockito, and jMockit](http://jmockit.org/MockingToolkitComparisonMatrix.html).
That's unfortunate, versioning was one of the things I was hoping for to resolve a myriad of issues I have managing (userland) modules. Back to OSGi I guess. Still very excited about Java 9, but, bummer.
There are many ways how to compare something, none is perfect. Javalibs compares only how much it's used in other libraries in Maven Central, nothing more, nothing less. JMockit may be "the next big thing". Javalibs shows "current big thing". 
Annotations don't have any effect. They are metadata, tags you stick on fields and classes that provide information that a library or framework uses to carry out its functions. The JPA annotations provide a JPA implementation like Hibernate the information needed to generate SQL, among other things. When you ask Hibernate to load an entity into the session, it will look for the annotations on the entity class and its fields and use the information it finds there to determine which table to SELECT from, which columns to include in the SELECT, etc.
I think OSGi should be mentioned in here somewhere 
Taking a timestamp can be a relatively expensive operation. Plus, which timestamp? CPU local clock / system UTC / system monotonic one? Exceptions are a core part of the language - as such paying the cost of something that you don't use 99% of the time is excessive. As others mention, use a logger. 
I realize how broadly-scoped my question was, and I probably should have narrowed it a bit like you said. Yes, webapp development would be my priority. Thank you for the suggestions! They're exactly the kind of thing I was looking for.
Were you providing quality content, you wouldn't constantly be flagged as spam. Also (see the sidebar): /r/Java is about: **News, Technical discussions, research papers and assorted things of interest related to the Java programming language** **NOT** about learning to program in Java. It is even **less a beginner** subreddit. Spam your tutorials in the proper subreddits, but be wary of the reddit spamming rules. Reddit allows **one** self-promotion post for **eight** contributions. So, instead of constantly spamming, you could actually **help** people with their problems.
[This helped me](http://web.engr.oregonstate.edu/~budd/Books/oopintro3e/info/ReadMe.html)
Things have not changed all that much and the stack you listed is still popular. Hibernate changed to use Standard JPA and is phasing out the Hibernate specific ways of doing things. The biggest change is JSF is now very popular.
You can use JMS in a desktop client. The JEE spec requires a JMS implementation, so server-side is where most people encounter it, but there's nothing stopping you from dropping ActiveMQ into your desktop app.
As mentioned by others already, ifPresent(...) orElse(...) flatMap(...) in combination with Optional make it very powerful and safe* toolkit. By convention rather than by type system, it is implied that if your function returns `Optional`, it is never null itself - and why would it when it is so simple to return `Optional.empty()`.
The video fails to explicitly mention you need the C++ and Java plugins for Netbeans. It looks like it requires Netbeans 8.1 Release Candidate 2 and for me it required changing permissions for ptrace sudo su - echo 0 &gt; /proc/sys/kernel/yama/ptrace_scope 
 for(int i = 0; i &lt; 4; i++) { System.out.println("Hello world"); } One of the philosophies of Java is to be easily readable and not have multiple overlapping ways to do something. 
Your first doesn't actually create an unused collection of 5 nulls, it just pretends to. All the returned list has is a reference to the object and the int passed in.
https://news.ycombinator.com/item?id=10432735
Swing is still around... I think
http://vigilance.fr/vulnerabilite/Bouncy-Castle-Oracle-Java-obtention-de-cle-privee-de-courbes-elliptiques-18168 
Same here, first AWT then several big apps in Swing. JavaFX looks cool and very capable - it seems to solve a lot of the problems with the X11/AWT/Swing UI philosophies, but personally, I never never needed into it. Over the years I have worked many different desktop projects and my observation is that Swing usage sort of petered out and from then on it was all web based. First Adobe Flex, and now HTML5 (at least for me). I see small desktop apps still in Swing every now and again - but nothing that would justify the need for the JavaFX stack .
You won't hear a huge amount about it, and there isn't exactly a thriving community, but that is because not many people make rich clients in Java, as you speculate. However, that doesn't mean JavaFX is a bad choice for a cross platform rich client. JavaFX is licensed as [GPL+ce](https://en.wikipedia.org/wiki/GPL_linking_exception#The_classpath_exception), which only differs from the GPL in removing the ambiguity around it being distributed with other software which may not be GPL. The issues that Swing has are well known. Specifically, the layout managers are a bit of a nightmare, and the way components have to be pieced together in a constructor, or initialisation method is very ugly IMO. I would therefore advocate making the switch just for the sake of FXML to define views, and CSS to define styling. They've taken a leaf out of C# / WPF's book, in which the XML-based approach and separable styling is extraordinarily powerful. It is considerably less powerful, and thus less complicated in JavaFX, which is a good thing. On the flip side, JavaFX is backwards compatible with Swing, and you can include existing Swing components in JavaFX. All in all, I'd say it's worth the jump for you.