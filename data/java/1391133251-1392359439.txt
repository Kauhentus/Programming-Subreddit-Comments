&gt; Microsoft does not bind or encourage any brace placement guidelines on their code Nobody "binds" brace placement. I guarantee that in-house Microsoft C# developers have a standard and stick with it. &gt; because the standard was made in an era where vertical line space is no longer an issue It's 1996, not 1986, we had large displays in the later 90's. The vertical line argument is bullshit. &gt; The community tended to what is simply the only reasonable and rational choice The C# community voted toward the MS standard/examples for C#. There was no great usability social experiment here, just more bullshit. &gt; you avoid the issue of accidentally adding a statement beneath a single statement if (since the code block is more clearly defined and much harder to miss.) If you don't put the braces in the risk for that one type of bug exists. You can debate the severity of the risk, but not the risk itself. &gt; assume it is human nature ... Bullshit. &gt; I have yet to actually see an argument from you... You're responding directly to points I've made so you figure it out.
&gt; Give it a rest, if you're using something other than vim, emacs, eclipse, intellij, Netbeans, or any other reasonable editor/line printer made in the last 3 DECADES then don't code. That has nothing to do with what I said. Listen, what happens is if you permit tabs, then people will mix tabs and spaces. It's inevitable. This results in things never lining up when someone loads it into their own IDE with a different tab width setting. It results in checkin wars that are nothing but cleaning up and back-and-forthing someone's "improper" whitespacing. It results in documentation and specs and howtos being messed up when code snippets are placed in them. Consider the Google code standards under discussion; 80 or 100 character line widths, 2 spaces for indent. Code bases that are contributed to and reviewed using various tools by many people. In those situations, tabs just confuse the hell out of things. Line widths are different on different people's IDEs. Code layout goes crazy when you drop a snippet into a Word document. This has nothing to do with an IDE or the fact that you can set tabs to whatever pleases you. It has to do with keeping the code as clean as possible such that it looks identical on everyone's system, removing the entire tab width variable. &gt;Set them how you like, not as easy with spaces. They could have done this equally by requiring tabs (and never spaces) for indenting and had all tools they use fixed at 2 spaces for tabs when comparing code visually, sure. But then you will always be getting someone using spaces instead of tabs accidentally. It is much easier to have a code review tool reject a checkin quickly when it has tab characters in it, or to reformat the tabs into the prescribed number of space characters. This isn't about one person coding for themselves. In those cases, go wild, tabs, spaces, or a mix. It's your own code. When you see standards requiring spaces and fixed indent sizes, it's almost always for working with a large shared and highly peer reviewed code base, because spaces-only is cleaner, simpler, and easier. Yes, it also means that people often have to work with layouts in the code they'd prefer not to, but that's sort of the side effect of a standard like this. A lot of it is compromises or decisions based on choices in support of one specific goal to the detriment of another, not because they are "better", but rather that they are simpler or easier to enforce in order to get clean, consistent code. 
Thanks for checking it out! I've fixed the install button bug now, feel free to let me know if you find any more. I went with Swing becuase there is a lot of tutorials and documentation for it as this is my first GUI app. I found it ok to work with but it doesn't create the most attractive interfaces unfourtunately. I also had a look at JavaFX, the documentation veiwer is actuially a JavaFX WebView, but ended up going with Swing in the end even though JavaFX looks like it makes nicer interfaces. Thanks again for trying it out!
&gt; It's 1996, not 1986, we had large displays in the later 90's. The vertical line argument is bullshit. C# began developing in 1999... It definitely wasnt standardized then. Calling an argument bullshit with a completely irrelevant point and zero counter argument isn't all that convincing. Finally our points don't collide at all. When did people start using ~~java~~ c++ (most of Javas initial audience by a large majority, not a bunch of four year old kids an students that graduated with a degree in a language that had existed for 2 years.) Java was standardized strictly by 30-50 year old programmers, c# wasn't strictly standardized by anyone. &gt;Nobody "binds" brace placement. I guarantee that in-house Microsoft C# developers have a standard and stick with it. Ofcouse they do -- those guidelines aren't projected outwards as "adviced guidelines" as java does it. Anyway, that aside do you realize that you've quite explicitly just contradicted yourself? &gt;You're responding directly to points I've made so you figure it out. Ugh... No I'm not. I'm restating my initial point because it went straight over your head. &gt;The C# community voted toward the MS standard/examples for C#. There was no great usability social experiment here, just more bullshit. Your first statement explains an abstract and broken analogy of the process, the second uses the first to argue something almost entirely irrelavent.
I'm pretty sure that's apples fault, not oracles. Apple has been ~~maintaining~~ "maintaining" their own jre for a while.
Doesn't look very random...
How strange it picked all the same color for each picture. What are the chances!?!?!!!
First off, whenever you're doing a lot of String concatenation, keep in mind that the JVM is storing *every* permutation of your string and this is slower and much more resource intensive (especially on a stream of characters!). So, it's better to use a StringBuffer: StringBuffer b=new StringBuffer(); ... char encryptedChar=... b.append(encryptedChar); ... String result=b.toString(); I don't know enough about your algorithm and skill level, but you want to also get in the habit of creating class members and using non-static calls.
Not enough comments my friend... But its a nice project bro
&gt; And yes, id rather have a formatter format my comments than doing it by hand. In general, I feel formatters should not format comments, because comments can contain, e.g., ASCII art diagrams or tables. &gt; Also, tabs usually align following text on the next vertical position thats divisible without remainder by the width of a tab character. Well, you shouldn't use it for that if you're following my guidance above. Again: Tab for indentation, space for alignment. Note, though, that you can align by using 0 spaces. &gt; In your example, the points indented within the comment would not be indented by the full width of the tab character as one might expect (well, unless your chosen width happens to be 3, but delete one character in front of it and you get significant changes to how the following text is formatted). Let's say my chosen indent happens to be, arbitrarily, 5. I'll represent a single tab with '\T', '\TT', '\TTT' and '\TTTT' to emulate taking up 2 to 5 spaces (depending on which would lead to n mod 5 == 0), and let's see what happens if I use exactly the above text: | | | | 01234012340123401234 \TTTTpublic void myFunction( \TTTT\TTTTint anIntVariable, \TTTT\TTTTString aStringVariable \TTTT) { \TTTT\TTTT/* \TTTT\TTTT * Note that a space was used before each \TTTT\TTTT * of these asterisks. That is because we \TTTT\TTTT * want those asterisks to be aligned with \TTTT\TTTT * each other. However, if we wanted to \TTTT\TTTT * indent, we would: \TTTT\TTTT * \T1. use a tab, even if spaces were \TTTT\TTTT * \T previously used within the line, \TTTT\TTTT * \T2. again use spaces after that tab if \TTTT\TTTT * \T we needed subsequent alignment after \TTTT\TTTT * \T that. \TTTT\TTTT */ \TTTT} Looks like it still works to me.
Just a few more and you'll have Hamlet.
Should i get Core Java Volume I or Head First Java?
If I really applied myself, how much time do you think I'll need? I know, I know. Stupid question, but I'd hate to get involved with it only to realize I'm gonna need like 3 years of absolutely serious hardcore work to even begin to be eligible. Can you tell me about certifications, as well? Do many Java jobs require certs, or just Java know-how? How do you prove you know what you're doing in Java? Is the job market flooded with "entry level java programmer, requires 2+ years java experience" catch-22 nonsense like a lot of computer jobs are?
Did you already do college? 
I'm technically a java programmer, got the job a week before my 23rd birthday having never used java before. I'm only a few weeks in so they haven't actually let me loose on any code yet... 
This obviously depends on many factors. Do you have any experience with any other languges? With CompSci in general? Do you already have a degree? Look up the Java certification. That will be the standard for showing you know your stuff well enough to at least start at an entry-level position. My father was able to learn it all within a few months, with his career, but he has many years of experience behind him.
Only an Associate's in CIS. I've taken an introductory course to Java programming and have some of the basics down.
Yes. I have a degree in CIS, but it's only an Associate's. I did an introductory course to Java there and have learned the basics. I'm interested in coding, I think it's one of the few things computer-related I can actually get behind as fairly interesting. The story of your father is motivating. I don't have whatever experience he had behind me, but the fact that that's possible at all tells me that a year of hard work with Java could really be enough. EDIT: holy shit, dude. I actually looked into the Programmer I certification and I know 75% of what it's asking for through the introduction class I had alone. I'm confident that if I brushed up, I'd be able to ace that in 3~4 months tops. That's really good news. I was expecting it to be much, much more difficult.
How on earth did you pull that off? What's the job title?
It depends on whether you have programming experience before. Java is a big ecosystem, but not hard for beginers. Just read some short tutorials online and write some program. Try it yourself and you will find out answers.
I appreciate this, but my biggest concern, to be honest, is the job market. I'm actually finding out now that getting the hang of Java shouldn't be too hard, especially because I know a little bit of it already (apparently 3/4 of the Programmer I exam for a Java cert, in fact). Now my focus is shifting to being employable. Is it a very competitive field?
Software engineer. While my coding experience is only really in matlab and python, I got a great science degree from a top university (although it was biology, not one of the more mathematical ones...) and my masters project was based in machine learning; a lot of the time the ability to think algorithmically and solve problems like that is more what companies look for than familiarity with a particular syntax. That said, I do think I got pretty lucky. 
You know, I wanted to write this off as an article that wouldn't be useful to me, but the comment he makes about how everyone can sometimes feel a bit overwhelmed with their knowledge and lack thereof and kind of be on a "do I even know enough for the job I have?" speal was very enlightening. That makes it much more hopeful.
I have never tried it myself, but I believe you can disable the Java plug-in in your browser. So you could install Java 6 alongside Java 7, visit the bank website, and after you're done, disable the Java 6 plug-in, only to re-enable it when you need to visit again. Of course, you should very strongly complain to your bank, and spread the news if you can.
You need to get your foot in the door. Once you've done this you will learn a lot on your first job. The key isn't if you have or don't have a degree it's that you have something to show you are enthusiastic and capable. Start by creating a public github and then start coding and uploading your work. find some projects on r/dailyprogrammer do some web apps. Whatever you can think of. Send this out with your CV. Read some books on spring hibernate, clean code etc.. there was a post about books just recently. Start looking at Tdd. Never give up. People are usually happy to give you a chance but not if you havent put the effort in. Secondly be a person others will want to work with. I'd rather hirer someone who's keen and has a good personality that fits the team than a good programmer that won't fit in. You can always learn the skills your missing on the job. So far I've worked with some fantastic devs who range from no degrees at all to chemistry, biology, economics and obviously comp sci. The best people are the passionate ones. They spend their free time coding for fun. Good luck. 
Excuse me if I am incorrect, but I believe that you intended to reference **/r/dailyprogrammer**. ***** ^(/u/DeliveryNinja: Reply *+remove* to have this comment deleted.)
*Is it a very competitive field?* Depends on how you look at it. The market seems to have been in a state the last few years where the demand for programmers is higher than the supply. However, despite this, many interesting companies (from Google to the better startups) have high standards. So, to get in such positions, you need to have a solid CS background at the very least. Also, if you only know Java and do not have a good background in CS or related fields (machine learning, physics, Bioinformatics, etc.), you will be relatively disposable. It's easy to replace somebody who is only a programmer, it is hard to replace somebody who is a good programmer and has extensive knowledge of say, scalability. People will tell you 'programming is easy, everyone can learn Java and get a job', but keep in mind that we are currently in a market where there is more demand than supply. This can and will change, and programmers with a thin background will have a hard time finding jobs. I don't want to scare you, but it's something to keep in mind, it's not just a matter of picking up Java, you'll have to invest some years in improving your CS background if you want to stay valuable. You mentioned certification a few times. There are some companies who ask for certifications. There are two reasons: (1) companies can get benefits from having staff with certification (e.g. Microsoft gives all kinds of discounts if you have certified developers), (2) some companies believe that certification is an indicative of the quality of a programmer. However, a gazillion other companies don't look at certifications. Having worked with many Java programmers, I haven't found strong correlation between the quality of a programmer and the certifications they have. I have seen brilliant programmers who 'only' had a CS degree without any certifications, I have seen miserable programmers who had various Java certifications. If I'd hire someone, I'd look at their education (e.g. which CS program), experience in previous jobs, experience or education in related fields, work they did in open source projects, and how they solve some actual problems.
Yes but they stopped doing that 2 years ago
I learned to program Java when I was 32 years old. Now I make my living with it. So about your questions: 1. No 2. Good. Yes
The most polite bot I've ever seen..
Don't go for the certificate, no one cares for that. Programming is about problem solving not just knowing the syntax and common parts of the standard api. Do some at home personal projects and finish them. It will look way better. It you were like a c# or c++ developer and wanted to take on a java programming position with your current experience, then the certificates will help you. 
Thank you very much for the compliment, /u/javapocalypse! 
There are no 18 year-olds who are "masterful" at Java, because mastery means knowing a bunch of libraries inside out and understanding the process of developing, releasing and maintaining production code in a commercial environment, and you just don't get that at 18.
Well. He starts with "call it in a loop until..." and then adds that calling it twice should suffice. So crazy thing makes less crazy thing look sane. ;)
https://www.google.com/#q=site%3Acode.google.com+inurl%3Ajava+%22System.gc()%3B+System.gc()%3B%22 
Programming is a "never stop learning" job. You get the fundamentals. You get the training. You learn best practices. Then you throw all that away and customize yourself to the business needs on the job. I look at stuff I wrote a couple years ago and often ask myself what I was thinking because of how bad it was. That comes with more and more experience. Hour long does it take? Depends on what the position you are applying for demands.
I think the most important question is whether you enjoy programming as an activity. If not you shouldn't work as programmer. If so, just keep practicing and you will get better, and the main question is when you will be able to convince someone to pay you for it.
Go back to school. Durning the summer of your 3rd to 4th year do an internship. Many internships pay 20 an hour and you can work full time. Who ever you intern for will most likely hire you at 65k a year. Unless you suck. Then your looking at 45 k a year. Everycompany needs a programmer. Even the most incompetent ones. 
Haha, wonderful. For example, this beauty: https://code.google.com/p/newnes/source/browse/trunk/NesEmulatorNew/src/newnes/tests/MemoryUsage.java?spec=svn15&amp;r=15 Check out the wonderful method: public static long calculateMemoryUsage(Memory[] hooks) { hooks = null; long mem0 = Runtime.getRuntime().totalMemory(); Runtime.getRuntime().freeMemory(); long mem1 = Runtime.getRuntime().totalMemory(); Runtime.getRuntime().freeMemory(); hooks = null; System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); mem0 = Runtime.getRuntime().totalMemory(); Runtime.getRuntime().freeMemory(); hooks = new Memory[16384]; hooks[0] = new Rom(0x1000); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); System.gc(); mem1 = Runtime.getRuntime().totalMemory(); Runtime.getRuntime().freeMemory(); return mem1 - mem0; } 
How long did you study up on Java to pick it up? I did a quick search for jobs and I kept finding "requires 2 years experience in Java programming" and it seemed like the classic Catch-22 all over again. How did you do it?
&gt;Depends on how you look at it. The market seems to have been in a state the last few years where the demand for programmers is higher than the supply. However, despite this, many interesting companies (from Google to the better startups) have high standards. So, to get in such positions, you need to have a solid CS background at the very least. The issue is having a solid CS background to begin with. It seems everyone has high standards and wants you to have a solid CS background, so how do you even start at that point? &gt;Also, if you only know Java and do not have a good background in CS or related fields (machine learning, physics, Bioinformatics, etc.), you will be relatively disposable. It's easy to replace somebody who is only a programmer, it is hard to replace somebody who is a good programmer and has extensive knowledge of say, scalability. I don't get this. If I have the job and am doing the job to satisfactory standards, why would they even want to dispose of me? &gt;People will tell you 'programming is easy, everyone can learn Java and get a job', but keep in mind that we are currently in a market where there is more demand than supply. This can and will change, and programmers with a thin background will have a hard time finding jobs. I don't want to scare you, but it's something to keep in mind, it's not just a matter of picking up Java, you'll have to invest some years in improving your CS background if you want to stay valuable. You keep talking about a CS background. I know you mean Computer Science, but I don't know the finer details of what you're trying to convey here. How can I improve it? Where can I even start? I have no issues taking entry-level jobs in IT to get experience, but if nobody will hire me because I have no experience, what then? What do you recommend? It almost sounds like you're saying I absolutely must get a Bachelor's degree, but what would that change, because you keep saying I need to have some kind of extensive CS background. Is there really no entry-level jobs for this kind of thing? How can it be an industry where there's more demand than supply and yet all the jobs, from what you're telling me, require only the best of the best?
I understand. It all is simply starting to sound very overwhelming, though. From what I've gathering from these replies, knowing Java isn't good enough, I also need to have.... * A lot of experience. * Know more programming languages than just Java. * Manage to stand out, despite not having a Bachelor's degree. I think that's the scariest part. How can I stand out if I don't have a Bachelor's? I can't get a Bachelor's because I can't afford it.
I started with Java as a necessity. I was doing on PhD back then, and needed to do some tests for a research paper. The best framework I found for my purposes was in Java ([Repast](http://repast.sourceforge.net/), if anyone is curious), so I forced myself to learn it. I had previous experience with C++, and moving into Java was really quick... it took me a couple of days to have something decent running. I guess that after 6 months of heavy Java usage, I would have considered myself good enough for calling myself as a Java developer. After a couple of years it became my primary programming language. I think that programming is not about knowing a specific language, but understanding a bunch of concepts. Then learning new programming languages is not complicated (and mastering them takes way less than most people think). It really sucks when companies post as a requirement 2 years experience, but I understand they want to go for the safer route. But you can *bypass* that by creating stuff, having things to show (is like a carpenter, you will not hire one until you see what he is capable to do). **In my opinion, the most important thing a programmer needs in its resume, is a list of projects to show**. It is more important than the years you have been programming in that specific language, and I can tell that by my own experience. So your best bet is to do stuff, or show what you have done so far: open a GitHub or Bitbucket account and create some open source projects, no matter if they are simple or trivial, they can be your own helper libraries. Open a StackOverflow account and go to ask and answer some questions. The last call for a job interview I got, they asked me if I had a GitHub and a StackOverflow accounts even before asking me how long I have been programming.
Run with -XX:+DisableExplicitGC and watch it go insane
and StringBuilder is preferred over StringBuffer if synchronization is not required.
&gt; The issue is having a solid CS background to begin with. It seems everyone has high standards and wants you to have a solid CS background, so how do you even start at that point? network, network, network. talk to recruiters. they'll likely place you in something even if you're lacking in some areas. The "strong CS background" thing, to me, is BS. Of the developers I've worked with over the last 17 years, less than half had a CS or related degree. Of those that did, it was not at all indicative of how good a developer they were. That's not to say it's worthless, but I think it's far more academic than pragmatic. The majority of problems you'll encounter in regular programming work will be cleaning up someone else's mess (or not knowing it's a mess and continuing to keep it a mess). Whether you understand algorithms X, Y and Z generally doesn't mean you have the permission/ability/time/budget to make necessary improvements anyway. This isn't to say "don't study" - of course - keep learning and studying, but understand that having any sort of work experience will usually end up meaning more than a CS degree after the first 2 years of your work. Getting in to the workforce seems to be your concern. For Java, I'd contact recruiters and ask what jr-level positions they could place you in so you can get some experience, then work up from there.
re: knowing more languages than just Java - you've got a lot on the JVM. Yes, they're all JVM-based, but they're different enough to be different languages. Groovy might be the easiest. Scala, Clojure, Jython, JRuby would all let you keep your current JVM knowledge base while growing in understanding about other languages. But... your bigger issue is just getting in somewhere - don't focus too much on the language stuff. Stand out by being comfortable with yourself when you interview (whether via recruiter or with a company). Be ready to talk about your passions (programming and others) without sounding stilted or rehearsed. I have a family member who was applying for a programming gig. Another manager besides the interviewer dropped in on the interview, and they got talking. My brother had 3d-printing on his resume and was asked about it. He chatted for about 5 minutes about what he was doing with it (built a reprap, etc) and why it was fun and exciting. He got the job, and later learned that *that* was part of what tipped the balance - he was comfortable talking about something which wasn't on the agenda with someone who wasn't scheduled to be in the meeting.
Insanely in demand, I week doesn't go by that I am not contacted about new roles. Plus we just hired a forty Year old intern who hasn't coded java prior and it's working out great 
For learning resources, look at the /r/javahelp wiki, there are plenty of good resources.
I'm 24 and just got hired so no it's not too late. And depending on where you are there is a market for it. I saw something on the net a week ago or so (don't have the link) that the job market for programming in general is going to skyrocket very soon. So if you don't get in right away don't get discouraged
Certifications are nice but dont work toward them. Learning common technolgies and libraries and methodolgies will go a lot further. Certs just look good but someone who has a solid foundation in the language and the ecosystem will win every time.
If you want to market yourself, have a blog and public accessible repository, such as github or bitbucket. and add the URLs just below your contact info on the resume. Do some investigations into language quirks and so why this works this way, but this and that are acceptable but come with potential downsides. Back up the blog with testable code. For example, Project Euler has some pretty good problems to solve, but in many cases, recursion will work better and faster than the iterative version. You could explain why that is so. I have about 4 years of CS school, but am a few credits short of graduating. Despite that, I've gotten a few jobs at places whose ads said "degree required" on the basis of a blog of my projects and quality code.
Do you feel you have a pretty good grasp on Java? The Core Java books by Horstmann are thorough to fill in a lot of the core information. From there J2EE is one good way to go.
No - Yes - A word of advice however. Small markets may not have a lot of Java jobs, if you are in a small or medium sized city and you want to stay there I would look at the jobs listings before you pull the trigger. The sleepy Southern city I'm from has almost no Java jobs, so I'm forced to stay in bigger markets - at least if I want to get paid well. 
For writing text files: http://docs.oracle.com/javase/tutorial/essential/io/file.html As for online resources, the official Java tutorials are pretty good and cover a wide range of subjects: http://docs.oracle.com/javase/tutorial/index.html 
We were hiring a junior developer dude showed up said he has take a 1 java course and wanted a career change, he did some simple Web design but was very green. We offered him an internship at half pay for a few weeks and started getting him up to speed. 9 months in he is now a full time employee and everyone couldn't be happier. 
As everyone has stated you just need to get your foot in the door and start. Read up on java programming, maybe take a class or two. Learn simple design patterns, the basics of java, and practice, practice, practice. Read up on interviewing for entry level positions and start applying. I know when I am looking to hire a new junior engineer I am not going to find a java god. Instead I look for basic knowledge of java, OOP and a drive to learn and become better. 
You certainly do not need to know more languages than Java or have a lot of experience. A degree really helps but if that is not possible I would get Java certified. Most Java Devs do not do this but in your case it would show you have some initiative and know at least a little.
You need to read Design Patterns, known as the Gang of Four book. And The Practice of Programming by Kernighan and Pike.
Great question! I'm in the same boat at 24 years old and finally decided to pursue this sort of thing. Looking forward to the answers
If it's checking free memory each time, it'll stop increasing eventually.
Xstream
1) never too late to learn a new language 2) depends on the location; but here in SW Germany, there is a very large demand. 
http://opensource-uml.org
Is going to school recommended? Or is this something I can teach myself?
To be fair, most of those are in test suites.
Thanks for posting this, I need this for my next class. 
I became a Java developer at age 25. I studied it in school, but got a job in the field doing non-programming work. Two years later, I'm now working as an iOS developer. There will always be a demand for programmers. I suggest taking whatever developer job you can get (I had to lose my former title) and find someone who can mentor you. Learn as much as you can about good coding practices and really hone your skills. From there, it's just a limitation of knowing the language necessary for the job you want. Good luck, brother!
After reading through most of the comments: Finish your degree, a bachelors will get you past the HR firewall and the snobbish people firewall. But remember having a degree means nothing to the actual work you will do. Practice. Programming well requires mastery which requires practice practice practice. The rule of thumb is 10,000 hours for mastery which takes years and years. And it never stops really. You have to continue learning if you want to keep up. If you are looking for a career where you get the job and coast, programming is not for you. Note that you do not have to have mastery to get a job. Being merely adequate will get you in the door. Mastery means you get to pick and choose what job you want to do. After java comes the many Java frameworks, HTML, CSS, Javascript, database theory and practice, etc. Although there are people out there that manage to brand themselves as a 'Java EE' developer, they are the least flexible and most disposable. Don't be that guy. Have a portfolio. A portfolio will prove you know what you can do which is all getting a programming job will take. Make a website, create an android app, anything you can post to github and put on your resume. Many employers wont even look closely at it so dont worry too much about having perfect code in it. After you can talk the talk and walk the walk, expect your inbox to explode and you can make really good money at this. And lastly, avoid recruiters if you can. They are parasites and any company worth its salt will do their own HR responsibilities. Avoiding recruiters may result in you talking to less people but the ones you do talk to will be of higher quality. 
I'd say reading the right books is way more useful than getting certs done. Design Patterns by the gang of four, and Effective Java by Joshua Bloch are a few big ones.
You're looking for a scripted installer, not a programming language.
Don't think this is possible with Java. It would definitely be possible with AutoIT (or maybe even with AutoHotkey)
Just in case: [what-is-the-most-efficient-java-collections-library](http://stackoverflow.com/questions/629804/what-is-the-most-efficient-java-collections-library)
+1 for Trove
I'd hesitate to recommend the GoF book nowadays. It is dated and quite dry. I never personally was able to get through the whole thing. IMHO, Head First Design Patterns is much more accessible.
Possible? I believe so (Check out java.awt.Robot) A good idea? Almost certainly not. Autoit/Autohotkey are slightly better options, but I'd go with /u/asking_science's suggestion of a scripted installer.
Don't get too excited. These are just formal OpenJDK binaries, with none of the stuff Oracle would put in by themselves (such as licensed font code or encryption subject to export control). It's the same things you could build yourself off of the open source repositories. These are published so that Oracle can be in conformance with the Java Community Process. They don't expect anyone to use these in production, in fact they ask you not to.
Came here to say this.
Bookmarked. Very useful, thanks :D
That's piss poor indeed! Give 'm hell for that!
Colt hasn't been maintained in years. Last release was in 2004. If you want to see a list of actively maintained matrix libraries check out https://code.google.com/p/java-matrix-benchmark/ . The statement about being 90% as fast as optimized native BLAS is a bit dubious... Look at the results for native MTJ and see how much faster it is than Colt or any other library.
I'm currently learning Java and I found [this website](http://www.compileonline.com/compile_java_online.php) very helpful to do some coding online while I'm not on a computer with [eclipse](https://www.eclipse.org/downloads/packages/eclipse-standard-431/keplersr1). BTW, if you don't have eclipse installed on your home computer, do it, it's awesome for coding Java.
dude I'm 27 (nearly 28) and In pretty much the same boat... Except I have no prior experience with computer science like you mention in the other comments.... I am good at sitting in front of a computer on my own for hours on end though, so I've got that going for me....
wow just 1 course nothing else? was he the only one who applied ..I want a career change and have been studying 40 hours a week for 4 months, barely just got a interview, still waiting on a schedule if it goes through but they sounded desperate 
 public static boolean isEven(myInteger value) { if(value == true) return true; else return false; } Can not work because you can not compare a myInteger datatype to a boolean datatype. To check whether a myInteger is even, you should use the % function (hint % 2 can be used to determine if a number is even or odd) Also, for your isPrime, you got the if() condition the wrong way round - should be (value % i)
If MyInteger is a object that you create then it won't be a boolean but it will be your object. you will need to get the value using the getter that you created and then test that value. ie. value.getValue(). although it will return an int which is still not a boolean so you will need to test the value within your methods to see if it is even, odd or prime.
&gt;To check whether a myInteger is even, you should use the % function (hint % 2 can be used to determine if a number is even or odd) But myInteger would have an incompatible data type. myInteger is a class if(value%2 == 0)
Guess then you need your method that returns the integer value as is listed in your assignment + A get method that returns the int value. How about using that value % 2?
You can control how many threads you spawn, but you're not going to be able to control how the OS schedules them. A tutorial on concurrency: http://docs.oracle.com/javase/tutorial/essential/concurrency/ 
Genius. You take a number of libraries that say they are high performance, then mention them all in a single blog post. What could possibly be wrong about that?
ok i'll try that! thanks!
Another recommendation - right now, it looks like your build is tied to IntelliJ. If you want people to contribute to the open-source project (and you may not), I'd consider switching to a build system like Maven or Gradle. That way, also, you don't have to have your dependencies checked in to the git repo.
Interviewed about ten, he and one other got the position, we were going to not hire him but he offered to work for free. At that point we have him a low (15 an hour) wage. We strongly believe in pair programming and he was paired with a senior engineer to make a modified CRUD application using bootstrap, jquery ajax, spring Mvc and a little sql server. Senior developer walked him through setting up controllers, accessing data, doing light Java script and he was able to fill in most of the detail of the methods. Someone else wrote queries for him for a few months, and I'm still doing his build scripts but honestly once someone takes you through every step of building a Java web application using all the tools that are at your disposal (way more shortcuts and automation than you can imagine) you'll be able to do most of what a junior developer is required by most smaller companies. He is now on his third project and very rarely had to be shown something twice. Stick with it, you are on a track that is not only very doable but insanely rewarding. I graduated in 2009 and can't think of one other profession or career track that I'd rather be on. The amount of resources available to you to learn is greater than any other profession. Even if If takes you 5 years to get a deep knowledge base,you should be able to find someone to take a chance on you way sooner. Attend meetups, think about doing some like the big nerd ranch, and just keep at it. If you ever get discouraged remember that there are plenty of android developers that wouldn't take a project for less than 100 an hour at this point. I'm always happy to help, PM me If you ever have any questions. 
Alright! BTW a great tool for such calculations is the modulo operator (%, division with remainder). Specifically taking a difference of days % 7 will give you the weekday as offset from your reference day. See this Wikipedia article for a full explanation: http://en.wikipedia.org/wiki/Determination_of_the_day_of_the_week 
cheers dude :)
How big of a list do you think I should try? Generate a few million random numbers?
Add ``-inurl:test`` to the effect of: https://www.google.com/#q=site%3Acode.google.com+inurl%3Ajava+-inurl%3Atest+%22System.gc()%3B+System.gc()%3B%22
have no doubt this list is outdated. a much better index would be, for example, r/java sorted differently than you usually read it.
On which JVM have you gotten the G1 collector to ``sbrk(2)``?
Did you make sure that the JVM profiled your code and JITted it well before you started measuring for your data?
&gt;And lastly, avoid recruiters if you can. They are parasites and any company worth its salt will do their own HR responsibilities. Avoiding recruiters may result in you talking to less people but the ones you do talk to will be of higher quality. It sounds like at the beginning I should be embracing recruiters - not avoiding them. After-all, getting that first job and that first bit of on-the-job experience seems to be the hardest part. I don't see why going through a recruiter would be a bad thing.
Hey, guys. I love the responses I've gotten. Nearly every reply I've gotten has been hopeful and insightful, and the honesty is good. I'm surprised at how little "no it's easy" replies I've gotten. All I keep seeing is real replies with people not trying to sugarcoat the situation or bullshit me just for sake of getting my hopes up. The future still looks good, either way. Here's what I can take away from what I've heard so far: * A Bachelor's is good for getting your foot in the door, however having some personal projects and finished concepts through Java on a Github will make me stand out even more. A Bachelor's degree is not 100% required, which is good, as I cannot afford it. * Consider having a website. Although it isn't necessarily required, it will make me look a bit more versatile and eager to learn. Expanding out to learn some HTML/CSS and what-not is never a bad thing and looks great on a resume, but is arguably optional. * Be confident, and start small. Employers will appreciate prioritizing learning over money at the beginning of the career track and this kind of thing should be emphasized. It's all about the experience and learning is never a bad thing, so even if I only get like $9/hr at the first job, if I can stick it out for a year or so, that experience will open a mind-blowing amount of doors. * Apparently a lot of people started learning Java around this age, so if anything I'm right on time - not too late. * It is totally possible to get a starter-job after handling Java for about a year, although one should never stop learning, never stop practicing. Thanks for the help. This is very good information.
I haven't. Nobody has. I also never said I did. That being said, this is not the forum for this. You can showboat knowledge of low-level UNIX system calls all you like... but it won't contribute to the discussion. Incidentally, malloc() and free() are the proper and portable way to do this.
This isn't terribly surprising. It takes a lot of data with expensive operations before parallelism is worth the cost involved in managing the threads.
Gradle is awesome and easy to use. I'm using it on my project now. I actually forked your repo - might hack around on it a bit and send you a pull request or two. If you don't mind, that is.
Unrelated to your problems, but please rename myInteger to MyInteger. Classes should *always* have its first letter capitalized, while instances should always have it be lower case(except for special instances like constants). This makes it much easier to read the code as you will always be able to easily know when you are referring to a type or an instance.
These guys are usually "masters" at writing huge piles of unmaintainable, untestable code that does not solve the business problem. Usually it ends up being tossed out. It takes 5 to 8 or more years of really working hard to master the craft of software development.
From my limited perspective it seems like you're doing everything right. Take my words with a grain of salt, since I'm only about 6 months into learning Java, but if you: - Define a class Vehicle with the getNewVehicle method; - Define a class Bus (extending Vehicle) with the corresponding methods and such; - Construct the Bus object as you did in line 5 of the first code snippet; I can't see where there would be an error. Implementing the two classes in Eclipse gives me the ability to compile your line 5 without error; I cannot vouch for the line's integrity in an actual runtime environment (which is perhaps where your problem arises), but upon Eclipse's autocompilation no error arises. Do you have a more specific example of your problem? I would love to help in any way possible, as the solution might enlighten me as much as it will you!
Editing for formatting reasons.
You can't. When an object is created, its type is set. Casting it changes how you refer to it, but not what it actually is. You might be able to get some of what you want by having a constructor that takes an instance of the superclass and copies the common fields over. Basically though, it sounds like you're heading in the wrong direction and you're going to be fighting Java instead of working with it. Either you're pushing too much logic into your object tree, or you're mixing your factory and business logic too intimately. 
What are you actually trying to accomplish? What's the end goal here?
Yup. The OP did the right thing by measuring. Setting aside how you actually do the measurement, I think the default assumption should be that plain sequential operations will outperform parallel ones. When you notice it performs badly, then think about parallelism. Besides the size of the data set and the cost of the operations, another factor to consider is how busy your other cores are. Say the context is a web server, and you figure out that handling one request of some kind will benefit from parallelism. If the server is under extreme load, handling many requests like that at once, then the per-request parallelism may make things worse. One case where it becomes worthwhile quickly is network I/O, e.g. doing multiple database queries. That's a good place to look if you're searching for places to use .parallelStream().
I'd be surprised if the course expects you to know any java at all; the point is to teach you java, so I wouldn't worry. With that said, programming is a skill that takes a lot of practice ; if I were you, I'd practice more C, or use something like codingbat, which has simple practice problems which you can do in the browser.
I have NetBeans and Eclipse 
Since their visual tester is borked here is a little one I did a while back. https://github.com/edalquist/RegexCoach It's a little swing app in the form of a groovy script that lets you quickly and easily build Java RegEx with visual feedback.
That guy sure is [impatient](http://www.amazon.com/Scala-Impatient-Cay-S-Horstmann/dp/0321774094/).
http://mooc.cs.helsinki.fi/programming-part1 After you are finished, go to more advanced: http://mooc.cs.helsinki.fi/programming-part2
Seriously? You should want people MORE experienced than you around you. The blind leading the blind all fall into the same hole.
It is of course completely *possible*, but it's a bit like going to your local drive-thru in a helicopter.
You can't. A bus is a vehicle, but a vehicle is not generally a bus. Typically Vehicle would be an abstract class so you wouldn't be able to create instances of it directly. Why are you trying to avoid the second code example - this at least works?
that's funny but 'I'm guessing OP don't expect experienced developers wanting to work with an inexperienced one. Which might be true. edit: Also, 2 people working together *will* learn faster than working alone
For real. What a shitty, shitty blog post. The author has essentially stolen from [this article](http://java.dzone.com/articles/high-performance-libraries). Who is upvoting this garbage? 
means low quality to get a book out there first for all the java8 noobs to buy up; 
https://groups.google.com/forum/#!topic/rio-users/odJpsVdQg3Y
Cay Horstmann (the author) is very well respected. I haven't read the book but I'm sure it will be high quality.
Do people really buy Java books? Thought it was a collectors thing. 
You've got several correct answers here, but I have to ask where the requirement that Bus, etc. are subclasses of Vehicle comes from? AFAIK, the OOP way to deal with this situation would be to use compositing. Which is to say that Bus, Car, and Truck would, instead of extending Vehicle, extend a different class called VehicleType or something. VehicleType would have a private that contains a reference to a Vehicle object; this would either be passed into VehicleType somewhere or instantiated in VehicleType's constructor. At the same time, VehicleType would implement Vehicle's interface by forwarding Vehicle method calls to the internal Vehicle object. This is usually called the Delegate pattern. Your calling code would end up looking like this: public static Vehicle getNewVehicle() { return new Vehicle(); } Bus b = new Bus( Vehicle.getNewVehicle() ); Or some such. Also, FWIW, "Factory" methods like getNewVehicle() that just return a new instance of an object are typically implemented as static class methods, unless there's a reason why you need to call them on an instance of your object. Which reminds me that an Abstract Factory or Builder pattern could probably also be used in this case, instead of compositing or delegation. tl;dr: Gang of Four is still a pretty good book.
I thought so too, but you'd be surprised; It's kind of like new c++11 books, people buy them up like crazy that's why even people who have moved on from c++ come back to author c++ books, le copy paste some stuff on some pages and ship that thing. easy $
Wait. THEY BUY C++ BOOKS? 
&gt; what if the Vehicle was actually a Car? How would you turn that into a bus? In my case, the "getNewVehicle" kind of methods would never return a subclass, only "Vehicle" so trying to transform a car into a bus wouldn't be an issue in the code. But the potential for that problem (since returning a Vehicle doesn't prevent returning a subclass), helps me realize why I can't do it this way though...
It's an interface to another program that's very volatile, and this would be part of a supporting framework.
Thanks. Yeah this is at least better than the switch statement.
Hah yes this what I thought I could do, but it turned out I couldn't cast it.
Nope.
But why is it mingled with the xUnit-framework? I'd prefer a standalone XML comparison library (which could also be used with vanilla xUnit). 
I suppose it depends on where you are at and what your goals are. I've worked with recruiters in major tech hubs and that was fine, gave me experience and exposure. And I've worked with recruiters in less in demand places that were worthless and only put me in jobs that I didn't want to be. Overall I found them to be not worth it. Networking at local programming meetings and the like were much more worth wile. But I can see their value when you are starting out. They are a low effort way to talk shop, just keep in mind that their incentive is to put a butt in the seat, not to care about your career.
Java is not Javascript. Also you're posting CSS rules.. I suggest you seek help in JavaScript or CSS related subreddits.
except it has the same author. Peter Lawrey is a guy behind the vanillajava blog :)
You don't need inheritance, what you need is Composition.
What kind of projects were you thinking of? 
Title should read "Java 8 Eclipse Support working hard on solving bugs" so it's a bit clearer
Man, Java 8 is looking better and better! Coming from a Python background where lazy generators are the norm, this is a very welcome feature. 
What's more troubling is that OP doesn't know that java and javascript are two completely different things. 
It should belong to the test folder. Everything that is test related should be placed there, not just pure tests.
Thank you. Will test folders not be included in built JAR files?
Great to know. Thanks!
Just Jetbrain spin doctoring, so we IntelliJ users are content with our choice ;)
broken link
If you want to have an API with just interfaces, so you can publish the interfaces and implementation separately, they should be in separate modules, if you want to make things easy for yourself. As suggested by others, if you're just talking about test implementations, they go in the test folder. 
Sauce?
It looks like you're using maven with a standard folder structure. When you build a war or ear, the dependencies are packaged by default. Any test classes are excluded automatically, test dependencies are excluded by marking them as "test" scope in the POM. To get the same behavior with a jar, you'll need the [assembly plugin](http://stackoverflow.com/questions/574594/how-can-i-create-an-executable-jar-with-dependencies-using-maven).
take a look at https://en.wikipedia.org/wiki/OpenCV ?
does the article page work for Chrome browser?
Yes, on Chrome linux. Maybe this version is friendlier to mobile: http://vanillajava.blogspot.co.uk/?view=classic
you beat me to it.
Wow autowikibot is pretty cool. I am going to post links from now on
This is gonna cause some funky bugs, I'm sure. Cool tech. I'm looking forward to this happening.
Traversing a linked list is slow, and that's what you're doing by having a separate map and list. The class LinkedHashMap is made exactly for this situation, and even explains on the documentation how to use it as an LRU cache.
Your get method removes and adds to the list. This is an o(n) operation and you are doing 3x of them in a row. I don't know about you, but o(n) is _not_ what I want from a cache for the get operation. One way to make it better would be to change the get operation around. If something is in the map, it is also in the list. On a hash map the map.containsKey should be order (1) (unless there are collisions). So change it to first check map.containsKey and then do a remove / add to the list. The way you are mutating the list is one of the only places the linked list in java would make sense to use - use the linked list and do the remove / add - but store it as an actual linked list instead of just a list so you can use the addLast method to put it at the end in O(1) Getting three O(n) out and changing them for O(1),O(n),O(1) will be faster - you still have an O(n) get method though. 
Thanks for the response. Yes, I considered using LinkedHashMap but I have to support a special method. public V peek ( K key ); // returns the value keyed by K but does not count as a "use" when it comes to eviction by LRU. This means I can't just use LinkedHashMap because it would count any access to the key as a use.
This is one of the many reasons I switched to Java. You can gain huge performance increases literally as technology advances for free because you're telling your machine more explicitly what you're trying to do rather than what in particular to do.
yea, we kept the original one 
It's a fresh content, I'm not sure how you people simply post a comment and leave and not appreciate the effort one goes through in creating such an exhaustive list for developers. Post may not be perfect but it is something that without a doubt imparts value to developers.
Think single responsibility principal. Everything has a single purpose. The data should have a model to represnt it. Simple pojos with getters and setters. The classes that act on this data should be separated so that each serves a single purpose. Then you store just the data objects. 
Wanted to say thank you again. I took your advice and built a Map containing my own linked node values and cut my running time in-half! Edit to include my final work: https://gist.github.com/anonymous/714b6f283c916370163e
It has become an accepted standard to make struct-like Value Objects to represent your model. Many OOP (Object Oriented Programming) proponents vigorously oppose this as a huge antipattern. I myself lean towards this camp, but I must admit that it can be easy to get yourself into a mess if you start to give model classes too much logic. The OO approach is to give your classes usecase-like methods (for example, Account.receiveAccountTransfer(TransferItem) ), but it is important to stick to the responsibility of the class, which is the model. The model should only know about other model classes. Persistence, datamapping and UI views should be kept well separate. Of course, nowadays quite a few frameworks expect getters/setters, and many programmers certainly expect them, so they will probably struggle to follow your coding style if you choose something different. I like to take a middle-ground approach, where decision-making methods are kept on the model class, even though they don't have a boolean property. E.g. class Account: public boolean isOverdrawn(){return getBalance().getValue() &lt;0;} Also null-checks and other queries of the internal state of a model object I like to make methods of the model class. It makes the code that uses the class much cleaner and more obvious.
Slf4j is an api. Log4j (And log4j2) is an implementation.
It is not proper to say that Log4j is an implementation of SLF4j; it predates SLF4j by many years. A bit of history: * Log4j was created a long time ago, and became very popular * One of the main authors of Log4j left the project, created SLF4j and its reference implementation, Logback. Logback offers more modern features, and better performance. * Since Log4j is very popular, the SLF4j/Logback project also maintains an SLF4j implementation based on Log4j; that implementation does not cover all features of SLF4j, only Logback does. * SLF4j/Logback grow in popularity, Log4j remains dormant. * Recently, Log4j2 is launched, trying to claim back the users who have gone to Logback. Log4j2 makes strong claims of performance improvement in some areas.
The point about not tying a library to a specific logging implementation is good, but I don't see how format strings are a compelling argument. If you're that concerned about the heap used by constant string fragments, you could just use String.format. In fact this is pretty much stated in the article. Also, I'm 99% certain that all string constants are created at class load regardless of if they're ever used. So in the example (ignoring the slightly different format between the two) you've saved one String pointer and consumed an extra 4 characters in the String table. Those 4 characters were probably already allocated, so you probably do save a bit of memory each time you do this. Of course, as I mentioned, you already get the same benefit (and more flexibility) out of using String.format, so don't go to slf4j just for this, instead base it on if you're writing a library or an application.
Very clean, nice work!
To complete the thought: Log4j(1 and 2) is an implementation *with* an API. Slf4j purports to add a generic API on top of existing logging facilities so that one can swap out or in whatever logging system they want. This indirection however comes with a cost: You pay a (small) fraction of runtime to adapt the slf4j calls to whatever logging API you have below, and you can only use the lowest-common-denominator functionality which has been encoded into Slf4j. Depending on your appilcation, that cost may well be worth it. YMMV.
This is a very nice way to put what is the saddest clusterfuck of java's ecosystem. I don't know how many man-days have been lost because of the library hell it generated.
Another thing is that with Log4j2 asynchronous loggers, the string ormatting takes place in a different thread, which can improve performance considerably if you log a lot.
Just because SLF4J is misused a lot, doesn't mean it is without benefit. Library authors that want to allow logging what their library does but not to impose their choice of logging framework onto their users can use SLF4J and have their users swap in the logging framework they use. However, in true cargo cult fashion, the use of SLF4J has spread beyond libraries, into applications that do not benefit from the freedom of choice, but pay the cost in complexity of configuration and dependencies.
Newer versions of log4j may do this too, but I'm a huge fan of the fact that slf4j can defer `toString` calls until after the logging framework has determined that the logger is enabled: log.debug("This is my object: {}", expensiveToToString);
I stuck with log4j and I have zero headaches. I can't really understand why anyone would entertain using slf4j ... the little bit I have had to deal with it has been a nightmare of dependencies and then, of course, people ranting at me about how slf4j isn't really that hard and how I should try this and try that. I just sort of smiled, nodded a lot and backed out of the room. Stick with log4j.
Slf4j only defers the concatenation, the format String and it's parameters are still evaluated passed to the log method. The log method just returns if the level is insufficient. If you're being really pedantic about the number of Strings being created, enclose the logging statement with a check to see if the level is enabled.
&gt; Slf4j only defers the concatenation, the format String and it's parameters are still evaluated passed to the log method. slf4j also defers the call to `toString`. http://www.slf4j.org/faq.html#string_contents Personally, I like to include a lot of state in my `toString` messages... it tends to make it easy to produce more useful debug logs, if they're needed. Because of this, Havingh the ability to avoid calling `toString` if the logger is disabled can be quite beneficial to performance. &gt; enclose the logging statement with a check to see if the level is enabled. This has the following negative impacts: * It requires that the author of a log statement guess whether or not the log statement is likely to have enough of a negative impact on performance to warrant a guard clause. * It doubles the number of lines of code necessary for the log message. (And Java's already quite verbose.) * By duplicating the log level in both the guard clause and in the call to the logger, it introduces an opportunity for a bug. (If one is updated, but not the other.) 
Isolate and unit test your components until you got the ConcurrentModificationException figured out. For real advice you need to show some code samples. Edit: Ofcource you need tests with multiple threads.
Might depend on your system, but you should be able to do the following In Eclipse: 1. Right click your project, select Build Path &gt; Configure Build Path... 2. Tab over to Libraries 3. Add external JARs... &gt; Find the JAR you're looking for Should be good to go. You might require a refresh or something similar
Really? It's better because of placeholders? Another crap post from JavaRevisited.
Thanks for the response. I also read that you can do 1. Run &gt; Run configurations 2. Select java application you are using 3. Classpath &gt; Add External JARs What is the difference and what does this do? edit: I am using Windows 7, 64 bit
I'm not 100% sure, but I think configuring the way you described will only make the JARs available during the time you build your project. Basically when you run the code, it will fetch the libraries at that time and compile, but not before Adding it the way I describe should make all classes you are trying to access available immediately. So when you are writing code you won't run into any ClassNotFound exceptions or syntax errors
Ahhh, I see. Awesome, thank you mucho. And just to make sure, is the java project the entire folder? Or just the .java file?
Oh, is it time for the biweekly release-spam again? I almost missed it.
Thanks for the link and explanation, that cleared things up for me. Last question, if my projects have paths to another project, can I just add the jar files to that project? For clarification, I have projects A,B,C,D. Projects B,C,D all have paths to project A. Then can I just add the jar files to project A? Or do I have to add to all A,B,C,D? edit: I know the path will let packages to be read across projects. Can I assume this is the same for jar files?
&gt; However, in true cargo cult fashion, the use of SLF4J has spread beyond libraries, into applications that do not benefit from the freedom of choice, but pay the cost in complexity of configuration and dependencies. How it ends up happening for me is my application uses libraries that use SLF4J. So since I have to deal with the configuration anyway, I just use SLF4J in my application as well.
I don't know your application. SLF4J may well be the right choice for your requirements.
I fail to understand what's so complicated about having one more dependency. You can continue to keep and use your log4j configuration, and the API is very similar. Slf4j is a facade, not a replacement for log4j. 
Because while you control which logging library you use in your in-house developed code, you might have 3rd party libraries that use Log4j, 3rd party libraries that use JCL (Jakarta Commons Logging) and 3rd party libraries that use JUL (Java Util Logging). Some (shitty) libraries will even "log" to System.out/err. So, how do you do centralize/unify log handling when each library is using its own logging library of choice, with its own configuration, output format, output files, levels, etc?: with SLF4j. "Just" replace the actual libraries by the SLF4j bridge implementations, and now every logging call, no matter what the original logging library is, goes to SLF4j, where you can write the logging config only once. (System.out/err is a special, more complex case that involves replacing the standard PrintWriters, but it DOES work). This is not to say that SLF4j is a silver bullet. It can be tricky to configure on app servers depending on the ClassLoaders configuration, and I found it particularly tricky on OSGi environments. But I can say that making it work is worth the effort 1000x.
Where does log4j2 call toString, if it's passed an object as a log parameter? (ie: does it call toString on the thread that calls the logger or on the separte logging thread?) The reason I ask is that if the toString call is on a separate thread, then there's the possibility that asynchronous formatting introduces extra thread synchronization issues.
All the heartache over something so stupid as logging. I just use what Java includes.
Why do you disagree?
Thank you, thank you, thank you. I appreciate you taking the time to answer my questions
The CMEs were actually coming from Hibernate itself.
AFAIK, the asynchronous logger methods just put LogMessage objects on the disruptor ring buffer. The AsyncLoggerThread will stringify those and give them to the appender.
Weird, in my experience everyone is for slf4j and against log4j but the comments here suggest the opposite. I personally find log4j configuration much more difficult to understand compared to logback. 
Not a problem feel free to PM me with any questions down the road I'm happy to help.
Thanks... At least for the systems I build, async logging would have to fall in the category of last resort. I can see that causing all sorts of problems, ranging from "I can't understand these non-sensical log messages' to '#!$#, a race condition in my logging is corrupting my state'.
&gt; Because you can just use String.format. You lose at least one useful log-specific capability when you switch from placeholders to String.format: Placeholders let you defer many of the steps involved in producing a log message string until after the log framework has decided that the log message will actually get written somewhere. (ie: the logger is enabled.) String.format can't do this unless you add a guard clause to each log statement, which has its own downsides. (http://www.reddit.com/r/java/comments/1ww3j4/why_using_slf4j_is_better_than_log4j/cf5zkgr) 
http://www.techempower.com/benchmarks/ Some frameworks are good at some things, some others. Personally, I enjoy leveraging the huge amount of tools and libraries java offers-- my personal reason for sticking with java web frameworks. When benchmarking node.js against a plain javaee servlet stack, yeah-- it might be a bit faster. Throw it against netty or a framework that takes full advantage of java's nio api, it will be destroyed. 
The only reason Node.js is faster is because of skewed benchmarks. Java code is itself many times faster than JavaScript, and Java web apps use both non-blocking calls (e.g. via @Asynchronous or async Servlets in Servlet 3.0 and 3.1) and multi-threading (including pooling). See this SO answer: http://stackoverflow.com/questions/10065553/i-dont-understand-async-support-in-servlets-3-0-api Java also makes efficiently use of multiple cores where in Node.js everything runs on a single core. Java also has a very efficient join/fork framework in its core library that makes processing recursive data problems very high performance (due to among others very lightweight thread pooling and work stealing).
I use slf4j to future proof my applications and to have my logger interact with 3rd party libs. Right now, I generally pick slf4j with a log4j implementation. When log4j2 becomes more stable and mature, I can just update my pom (already have log4j2.xml's in the /src/resources folder) and take full advantage of the performance enhancements without any code changes.
Of course nothing keeps you from stringifying the log message parameters within your thread. Using async appenders, while not as fast as async loggers, may represent a viable alternative for your use case.
C# - 5%? What?!
So much for all of those "Java is dying" articles.
Too high or too low? Personally python being no1 is the most ridiculous thing.
What happened Objective-C? It's so sad when you can't even break a quarter of a million percent increase anymore. I guess Objective-C is dying.
Python is a de facto standard scripting language for IT.
I agree. And it looks like the remaining Haskell devs have not had any medical problems. 
...by java programmers.
You mean other than excel macros?
This is excellent, thank you!
I definitely mean Selections because that is what my Java book says.
What book is that? I've been writing java for about 4 years now and have never heard of selections. What country are you in?
ORLY?
Java isn't dying, it's just not cool.
Async in Node.js is not the same as async in Java. Async in Java hands over control to a thread pool for eventual execution. Thus, the request doesn't block, but the code executing in thread pool pool can block, which can delay other code waiting in the thread pool from executing. Async in Node.js is completely different. Everything is non-blocking, from file reads to database access (JDBC is very blocking). Control winds its way through callbacks which are executed when otherwise blocking calls would complete. Node.js basically operates in a polling loop, selecting on file descriptors and executing when data is available without needing to spawn additional threads or wait to have async code executed in thread pools. I can see under some circumstances that the Node.js approach would be faster than Java's traditional thread based approach. Several Java frameworks attempt to implement the Node.js approach, such as [Spring's Reactor Framework](http://spring.io/blog/2013/05/13/reactor-a-foundation-for-asynchronous-applications-on-the-jvm), [JBoss Netty](http://netty.io/) and [Apache MINA](http://mina.apache.org/). Although, Java still has downsides compared to Node.js in that many core Java libraries are not non-blocking friendly (such as JDBC). In fact, the Play Framework leverages these servlet alternatives to implement certain applications which (they claim) would not be possible with the current servlet model (even at 3.x).
Not going to trust a programming site that can't get their blog to look nice on a mobile screen. Oh the user is zooming in? I bet they want the social networking sidebar to zoom and be centered on top of all the text. 
Success kid: I know the top two.
C# is still very young. It is doing really great, and growing very quickly, but it isn't as wide-spread as Java or C\C++ which have been around for a long while and have crammed themselves as primary programming languages for computer science students.
Much much lower than I expected. I would have said it was on par with Java in terms of popularity and penetration.
I'm still skeptical, I've been down the callback road. It's a useful technique, but it makes ordered tasks harder to write and maintain. I'll try to keep an open mind as I look closer at Node. If anyone's interested, there's a virtual meetup coming up titled "Comparing JVM Web Frameworks". http://www.meetup.com/virtualJUG/events/153096902/ 
It's so cute how Python devs are so delusional.
Dude Objective-C is just C. It's C with some pre-processor directives and an API. Not so much a distinct language IMO.
Www.codeeval.com is also a great source of challenges 
Umm... C# has been around for &gt; 12 years. Java... 18 years. Java's got a head start, obviously, but to call C# "very young" is naive at best. 
Java isn't dying, it's just missing modern programming features like type inference, lambdas (yeah yeah java 8), first class functions/events, non typed erased generics, asynchronous workflows, etc. The only reason it's so popular is because it's the bottom barrel of languages, every monkey knows it.
I live in the US the book is "Introduction to Java Programming" by Y. Daniel Liang
What do you mean by delusional?
Terrible measure: http://www.tiobe.com/index.php/content/paperinfo/tpci/tpci_definition.htm Look how they are calculating popularity. I'd rather take popularity based off of places like GitHub (for open source) and CodeEval (for professionals) rather than random internet searches from (some) sketchy sites.
This is false. A software developer costs a lot more than a windows license. 
True but if the choice is between free Linux and developers or licensed Windows and developers most companies are gonna take the Linux option. I've interviewed probably around 100 people for one of the big tech companies and I've never heard anyone worth hiring say essentially "Windows or Bust!". From a business perspective if you're not losing dev's why pay for something that isn't necessary? Start-ups are even more into this mind set.
are you reading this http://www.techempower.com/benchmarks/#section=data-r8&amp;hw=i7&amp;test=db&amp;l=ao&amp;p=4zsqx-2&amp;w=ei&amp;f=zg24n3-zijxtr-zik0zj right? the JVM is destroying nodejs there.
Hell it looks like shit on desktop too.
As a person who is trying to learn Java, there are very few learning opportunities made available to the public. At every turn I could find free Python, Javascript, and other courses. But it has been difficult to find free courses or programs online regarding java. Maybe I'm looking in the wrong places, but codecademy, corsera, and other outlets I've looked at simply don't offer resources. Most of these courses that do have items that touch on Java require previous knowledge or training in Java. Courses such as Android programming and others ask for Java experience. If you could point me to a some resources it would be greatly appreciated.
I found the official tutorials nice http://docs.oracle.com/javase/tutorial/ .
Maybe in the Web development world but windows with active directory, exchange, office + the familiarity and generally cheaper IT staff, I can't see how Linux can compare. Plus enterprise support for Linux generally costs more than windows anyways. Eg red hat &amp; suse. 
Read a book. There are many out there
I know you will find python on every Linux installation but is it actually used on windows?
In what sense do you mean? For scripting on Windows I personally tend to pick Python but I am more familiar with that then, say, the standard Windows shell. I doubt many people are developing large applications on Windows using primarily Python. But there are large companies that use quite a bit of Python for production stuff.
C# only diverged from and became its own language (and subsequently began becoming popular) around C# 2.0. It was also only up until that four or five years where it has grown dramatically in popularity and getting taught as a language in schools. it really bugs me how people take the date the language was "thought up" and literally interpret that as its age. IMO, there are lot of other factors that come in when you age a language.
Well, it seems to be declining at least according to the article.
I think that the book uses uncommon terminology here. What they call "Selections" is commonly known as "Conditionals". Did you already learn about "if..then..else" and "switch...case"? 
Every year we release data on the "Most Popular Programming Languages" based on thousands of data points we've collected by processing over 100,000+ coding tests and challenges by over 2,000+ employers.
&gt; But there are large companies that use quite a bit of Python for production stuff. On a Windows Machine??? Ah. Nope. &gt; In what sense do you mean? For scripting on Windows I personally tend to pick Python but I am more familiar with that then, say, the standard Windows shell. Ever worked with Powershell?? its a disaster to use Win32 API in python!!
Every year we release data on the "Most Popular Programming Languages" based on thousands of data points we've collected by processing over 100,000+ coding tests and challenges by over 2,000+ employers. C# is mostly used to write apps for business. Java/Python is widely used in programming competitions :) Edit: java too is used for writing business app + coding contests + academia + etc . C# is mostly just business apps.
Just remember, it's not the number of languages you know, it's how you use them. At least that's what my Dad always said.
&gt; Much much lower than I expected. I would have said it was on par with Java in terms of popularity and penetration Its a better language than Java. Popularity &lt;-- Well its runs *only* on Windows Machines [no-mono] Penetration &lt;-- Well, the Oldest ones wins. (See php for web programming 80% of the web [front] runs on php) C# is a better language than Java. its the ecosystem which makes its existence worse.
Note that they measure the popularity of programming languages as used by the coding tests employers put on their site. Which biases the measurement for languages that the people putting up tests on their sites deem worth testing in. So perhaps the title is a bit misleading - they ranked the languages most popular to their patrons.
I used project lombok back in the time that gives nice basic type inference. worked like a charm. i can't understand why something like that hasn't been already integrated in the jdk.
True :-)
mad props for your analogy
5 million is more than 4 million, so clearly 9 million is affordable.
The Java designers are against type inference everywhere. They are the opinion it hinders code readability in large scale applications. This was mentioned by Mark Reinhold at Java ONE 2013. I can search it if anyone wants the proof.
 Popular with whom?
Start with Apache Solr and if you need deep customization dive into Apache Lucene. Solr is built on top of Lucene.
these "surveys" are so full of crap; this one even more as they don't mention anything about a methodology. Mine is simple, type the language name in an IT jobsite and see how many results you get. Java is still much more likely to get you a job than Python!!
I have yet to see a benchmark where Node beats java servlets for any serious load. The moment node starts executing javascript as opposed to it's C back end performance goes down drastically. 
This is more what I expected. Thanks for the link.
I happened to see a lot of uptake and activity in C# in 2002-2003 in my circles, so in my own view that's how old it is. It was 'thought up' even before that, but MS felt it was good enough to release when it did, and it went in to many production systems far before you happened to think it 'grew dramatically'. Looking at Java as being 'out' in 1995, which I think I did, actually makes the comparison worse - there was far less % uptake of Java in 1995/96 than there was of C# in 2000/1, as MS already had an installed based of developers to push C# out to - Java/Sun didn't at the time. Not to say there wasn't a lot of Java uptake in, say, 1996, but the landscape changed a lot in those 5 years. 
&gt; Was Objective-C ever used for anything other than OSx and iOS programming? Yep. However Apple recently reported an active customer base of 500 million users.
The important factor here is that there is more than one objC specification and to get the most out of it, you kinda have to make heavy use of Apple's stack. Which means that it isn't worth learning it unless you target Apple products exclusively and there are lots of cross-compiling frameworks available nowadays that let you target all major plattforms at once while using a language you know already.
This is the right answer, listen to this man right here.
Actually, it was a 399900% percent increase, which is where my "quarter of a million" percent increase comment came from.
Yea, apologies. Apparently I can't read. 
A few questions: * How familiar are you with programming? * Are there any constraints on what you can use? (Can you use anything, like Lucene? Or do you have to write all from scratch?) * What is the scale of what you want to apply it to, ballpark estimate?
This is one of my biggest gripes with Java. It's downright ugly. Even using "Windows" as the default look and feel, feels odd. Not to mention designing ~~forms~~ frames in Java (using NetBeans) is a right PITA. It's so frustrating. Edit* I don't mind the down votes, but tell me why exactly. I think Java is great, but it's UI stuff is just not up to scratch.
These numbers are clearly meaningless. PHP did not experience a 55% decline. 
Is there really any reason to still use mod_jk or even mod_proxy_ajp anymore? I've switched all my load balancers to use mod_proxy_http.
This post makes no sense. The person is asking why it's hard to get SWT to look native and SWT *is* native. 
I highly recommend that you get familiar with a project management tool like [Maven](http://maven.apache.org/) or [Gradle](http://www.gradle.org/), as they take care of the tedium of dependency management for you. For example, in maven, you add the dependencies to your POM (Project Object Model) file and it handles adding the appropriate things to the classpath at the appropriate times. These tools work with most development tools as well, so a Maven project created in Eclipse is also usable in NetBeans and IDEA as well.
Clinging to a reality that does not exist? 
Java puts the ewwwy in GUI unfortunately.
The Gang of Four Book (Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley. ISBN 0-201-63361-2) though not specific to Java, is an obvious choice.
Someone made a [comment](http://programmers.stackexchange.com/questions/226521/why-is-it-hard-to-make-a-java-program-appear-native#comment451391_226522) that actually explains why an SWT app still could look off: &gt; Placement of buttons, exact sizes, and preferred GUI styles vary by platform and getting Java to mimic them takes work. Swing can give you the native button but if it's 10 pixels to tall the user will still think something is off. Apple has the Human Interface Guidelines and Microsoft has the User Interface Guidelines to help you get the correct native look. You will need to change UI somewhat between platforms.
&gt; It's downright ugly Then you obviously haven't seen JavaFX.
Not a book, but also recommendable: https://www.udemy.com/java-design-patterns-tutorial free video course on design patterns in Java.
Yeah except at least on Windows and Linux there really is no "native". Have you ever seen a QT app on Windows? Doesn't look and feel native. Heck even Office violates Microsofts own guidelines - and don't get me started on Metro or the mess that is the Linux UI. The fact is that it's easy to achieve 98% of what you want with Swing with one line of code so I don't get the difficulty here. 
also note that its a bit premature to call something the most popular of 2014 in Feb. Well, it isn't, but it might look pretty silly come December. 
I'll echo the HF book. GOF is an excellent one for when you've finished that one. I would also recommend looking at Domain Driven Design, by Eric Evans, for a broader view of application design. For me, that book helped solidify the pattern concepts by giving me a better understanding of the why's, over the how's.
This is the appropriate answer, and exactly why slf4j works. You'd think java developers would be more supportive of programming against an API instead of an implementation, but sadly I've seen the latter used far too often. 
Linux UI seems much more intuitive to me than windows despite the fact that I am a windows user mostly. But this probably due to the fact that first os I used was DOS 5.0
They were also against lambdas until they figured out how to implement it. I guess after lambdas are in, they could start talking about benefits of type inference and its inclusion.
I actually looked into that last night. It's on my to do list.
Not to mention, SLF4J and Logback actually had useable documentation, when log4j didn't.
Do you need to **write a List class** (like you seem to be doing in your current code), or do you need to **use an existing List class**? In the first case, you could write either a [linked list](http://opendatastructures.org/ods-java/3_Linked_Lists.html) or a [dynamic array](http://opendatastructures.org/ods-java/2_Array_Based_Lists.html). In the second case, use any of the great [existing](http://www.tutorialspoint.com/java/java_arraylist_class.htm) [tutorials](http://docs.oracle.com/javase/tutorial/collections/index.html).
Hey there! So, /u/armornick was on the right track for this one. From what I can see, it looks like you have to write your own `List` class for this assignment. In my opinion, a single linked list will be okay for what you need. Check out the links he's posted [here](http://www.reddit.com/r/java/comments/1wzy70/using_a_list/cf6vihr), specifically the linked list one. If you have trouble understanding the concept of it, how I like to explain it is to imagine a room of people. You pick one person, and you give them a piece of paper with a number written on it. You also give them a piece of paper with the name of another person in the room. So lets say the first person you pick is named "Timmy", and you give him the number 37. You also give him a piece of paper with the name "Lucas" written on it. Next, you move on to "Lucas", and you repeat the same process. Give him a number, and the name of another person in the room. Repeating this, you end up with a chain of people, each with a number, and a name of the next person (Except the last person!) The above is a simplified version of a linked list, and it's really cool. You know how arrays have a limited size that you can't change? If you think about it, a linked list has no fixed size, because you can continue the chain until you run out of memory, which is what makes it so neat. To put it in code terms, this is what "querying" the linked list would look like, in our example of the room with people: * Talk to Timmy, ask him for his number (He says "37") * Ask Timmy "Who's next?" (Timmy points at Lucas) * Talk to Lucas, ask him for his number (He says "23") * Ask Lucas, "Who's next?" (Lucas points at ...) And so on. As usual, let me know if you have any questions!
This is about a week late, but make sure to check http://stackoverflow.com/questions/tagged/java many things have already been asked, and during work hours its a great place to get assistance. 
I'll just say outright that I don't use java to build desktop GUI apps. If there's a gui, it's web-based. I am sure others have different requirements, but that's the way I approach things. 
I may be incorrect, but it looks like the thread you created is the problem. Its while loop appears to update infinitely with no regard for other programs(which is why it eats up so many cycles.) If you add a Thread.sleep() or Thread.wait() to allow the thread to stop executing for however many milliseconds you decide, it should solve your problem. 
1. If you're using NetBeans to design your UI, it will be horrible. No way around this. 1. People still use frame based java applications outside of a classroom context?
I believe there is only one way to go with this. To make it easy, go with the "if" statements. The first thing you need to ask yourself is, what do you want to do (like, how would you instruct your 6 year old little sister to do it). I think the best way to go here is to use the integer division and modulo to get the different parts that the input arabic numeral is. For example, 123 consists of (100+20+3). Then you want to store these numbers (int hundreds=100;int tens=20;int simpleIntegers=3;). Following you will want to append the right letter to a string by testing these variables. Begin with the greatest integer, and in this case it's a 100 so I append "C" to the roman numeral. Then I continue and see that I have a 20. That means I append "XX" to the String. Now I find I have a 3, and I append "III" to the string. Now the roman system is a little bit more complicated than that, and you will have to make cases like "if (tens==4) { String=String+"IV"} I tried to make this simple but english is not my primary language and I don't know if I made my point clear, ask otherwise! :)
* I'm open to suggestions * Classroom coder here, what happens in the real world then?
Thank you "apathetic_youth" and "guidedlight" so much. That worked perfectly, and it now registers as using 00 CPU, which is what I would expect from a simple program like that. I assume that anything with threads is going to need a sleep function like this yes?
Anything with a loop that is going to continuously run, will run continually as fast as it possibly can, i.e. max out the CPU. You need to either have sleeps, or some other mechanism that will reduce how often it will iterate through the loop (e.g. perhaps only when some other data changes)
Also for future reference java.util.Calendar is not thread safe, so use extra care when implementing it in multi-threaded applications.
A very relevant post about Node.js's approach vs. Java's, and how Java can beat Node while keeping code much simpler: http://blog.paralleluniverse.co/2014/02/04/littles-law/
Yes, there was a problem with my earlier post. You are absolutely correct!
Okay, I see the model is different despite both being called async. But as you mention, it's not Java vs Node perse, as nothing in the Java language makes this way of working not possible (indeed, as indicated by Netty among others). Of course the big disadvantage is that the "threads-are-evil" mindset may have gone to far in Node, as to effectively make Node only able to use a single core, right?
How about Eclipse RCP?
You might want to check out Quasar[1] (which gives you true lightweight threads on the JVM) and Comsat[2] (which integrates standard Java web APIs with Quasar fibers). You keep your simple threaded model and gain all the advantages of async: http://blog.paralleluniverse.co/2014/02/04/littles-law/ [1]: https://github.com/puniverse/quasar [2]: https://github.com/puniverse/comsat 
that's what we're learning about, but not the switch case part
this made a lot of sense actually. I'll try it out! 
Not even close to Java in any meaningful (as in anything non MS exclusive) measure I have seen.
Yes, but when you take tiobe + langpop + github + stack overflow java and c are still up there back and forth.
Depends on the version of the servlet api. Full "new I/O" async is changing pretty rapidly between servlet point-specs for async processing. The servlet api does still have some crufty blocking I/O, but a full non-blocking I/O path is coming. Then the vast advantage java VMs have against javascript VMs won't be surmountable. Now, a node framework in a more optimal LLVM-targettable language... that will probably be faster than java. 
At some point you'll be using other frameworks which may or may not be using slf4j. They could be using JDK logging, commons-logging, log4j, logback, and others. This will vary by jar, application server, etc. With SLF4J, you can use the API facades for those and centralize the logging flow and configuration again. Then you can select the actual logging framework as appropriate to your needs (logback, log4j2, etc). I believe SLF4j has several advantages over JCL for logging facades at the classpath and application server level. I don't recall specifics, but they were significant... 
Of course it doesn't, why would you pay 800 dollars if it came with the same support.
&gt; This is false. A software developer costs a lot more than a windows license. Except the developer time working around disparate technologies, poorly confined closed source toolsets. The difficulty automating deployment and Having to explain reboot based downtime of unstable patches despite whatever testing you think you've done. https://m.facebook.com/dsobeski/posts/10153683440480008
&gt; It costs $800 a year to run red hat enterprise Linux! * The community is generally bigger and more collaborative than MS solutions * the technology generally drives people to build systems that are not as dependent on specialized raid controllers or graphics drivers. * There are lots of other varients of the system. If Ubuntu doesn't work, try debian, if that fails use CentOS. Or even easier, make sure you tie to specific versions of your packages that do work
The handleSave function should be in your 'Display' class, and then attached to the saveButton during initilization like: saveButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { handleSave(); } }); From the sounds of it, you have too much cohesion so you need to call the handleSave method from your main class. Quick and dirty solution would be to have a get method in your 'Display' class return just your save button component, then you can add the action listener in your main class after you create the 'Display' class, such as: Display display = new Display(); display.getSaveButton().addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { handleSave(); } }); In the long run look into MVC (Model-View-Controller) design schemes for your GUI work.
&gt; C# is still very young. As /u/mgkimsal said, no. &gt; It is doing really great, and growing very quickly, Stop taking cues from MSDN magazine: http://www.google.com/trends/explore#q=C%23 
A search engine for what?
Damnit, I want an answer to the real world part!
so is AWT/Swing, actually. AWT peers are native just like SWT's.
JGoodies stuff is good. Since then they've put one in the JDK that's decent. 
Yes: Profile. 
I actually was, I finally figured it out. I stopped using a Criteria search and instead retrieved an item by ID. Plus switching away from thread to managed session context. The CMEs were solved by replacing my Maps and Lists with ConcurrentHashMaps and Vectors in my data objects. Still bizarre that hibernate itself throws a CME with them.
So I've wanted to write this for a while. The debate over "blocking" vs "async" performance is really not a good debate. The debate should be about which programming model makes the most sense for the people writing the code. First a bit about context swithces. If you abstract away ALL the software from a system, what you are left with is hardware. From the perspective of the software, all the actions in the hardware are run separate from and in parallel to the software. So you are always faced with the question of how does the software know the hardware is finished with a task? You can either poll a register in a tight loop, or less often via some sort of OS timer. Or you can have the hardware throw an interrupt. Any decent hardware is using the interrupt technique. Interrupts cause context switches at the OS level. So these types of OS level context switches are happening regardless of the higher level programming model. When an language or a framework present either a "blocking" thread based model or "callback" based model, really what you are choosing between is do you have the OS do the context switching to the code to run ( the blocking/thread model) or do you do the context switch with the language/framework. But the context switch will be happening either way. In theory there is no performance distinction. In practice there are tradeoffs. The knowledge that a packet has arrived from the network or a sector has showed up off the disk will necessarily always be within the OS. The question is does the OS inform the application which then decides how to use it ( a sync/callback) or does the app tell the os "if you get Y wake up Z "(blocking thread approach ). take your pick. One potential disadvantage of the thread model is that each thread has it's own stack, and so more threads means more stacks means more memory used. And more cache lines to invalidate. A plus side of the thread/model is that the programming is much easier. ANyone who has had to decipher deep layers of callbacks understands this. Interestingly, the original async work with JVM languages seemed to be much faster than blocking. But then work on the blocking model sped that up. as expected. Please, have the debate about the programming model and which is easier, has fewer bugs, etc. But the performance debate is a distraction. 
Make it clear, I only disagreed that companies choose Linux over windows because the windows license cost is too expensive. I completely agree with everything else said.
SWT uses the OS widget set, AWT does not.
First thought: "Check your threads, yo. You might have some loops or checks infinitely running without pauses or breaks." Then I read the rest of the post and comments. Check your threads, yo. Hehe.
Embedded jetty is pretty awesome. I use it with an application for a stupid simple web admin panel attached to a distributed Netty task scheduler. The Netty app is so lite, it doesn't need an application server, and uses a db for the real configuration anyway. Great "shut it down via web" tool. I endorse all its uses. And ExecutorService.
Eh, it's subjective. I've almost always found KDE more user friendly to how I use GUIs than whatever version of windows was current at the time. And I'll still take dolphin over finder. Doesn't mean any of them are bad, just means that they offer different things. Linux devs often target a niche style of use the others won't. 
Hah, I meant *why* do you think that they are delusional?
No. Swing uses a native frame and that's it. Everything else is drawn by the Swing graphics object.
Sure, there are exceptions, and i agree qt makes great ui look pretty easy. Also, dolphin is the best file manager ever.
Yeah that's right. Except no one uses AWT any more. Swing replaced AWT in the late 90's. AWT exists for backward compatibility. Swing uses the AWT event model but not the graphics. 
The original assertion was "Python is a de facto standard scripting language for IT." This is plainly delusional. 
Swing is built on top of AWT though, but yes, Swing is plenty fast when the app is designed right ... No need for heavyweight peers (which you could still use if you wrote pure AWT - but why would you?)
 TimeUnit.SECONDS.sleep(1);
Yes, I'm supposed to write a list class. You're saying this tutorial should cover how to do that?
http://www.reddit.com/r/redditdev/comments/14cxx2/am_i_mistaken_or_is_there_a_java_api/
I'd take a look at what /u/StillAnAss linked. You can also use one of the many JSON libraries (Gson is one of my favorites..) and parse the responses from the Reddit web API itself.
No, the real question should be, "is programming using async faster than sync?" Let's Compare C with Haskell with C# with ERLANG !!!!
Reddit's API is a language agnostic web API, which has documentation [here](http://www.reddit.com/dev/api). To use it, you just need to point to the api URL (reddit.com/api/) and parse the returned json (or send some json data, for POSTs). You can find a bunch of wrapper libraries (including one for Java) [here](https://github.com/reddit/reddit/wiki/API-Wrappers).
Just for words. Like google but obv a lot smaller version. 
You probably want just under a second, as it isn't guaranteed to be run by the CPU exactly on time.
look at [Apache Nutch](https://nutch.apache.org/): &gt;Apache Nutch is a highly extensible and scalable open source web crawler software project
You are correct, a more accurate statement on my part would have been SWT makes a much more complete set of native OS widgets available, one must use swing and AWT to get as complete a set, and the swing widgets are non native. I know of very few (none actually) applications that only use AWT. Niagara based their shit widgets on AWT, but have moved on to HTML/velocity/jquery.
It's not really surprising, since the documentation of addShutdownHook() discusses this explicitly: *Shutdown hooks run at a delicate time in the life cycle of a virtual machine and should therefore be coded defensively. They should, in particular, be written to be thread-safe and to avoid deadlocks insofar as possible. [...] Shutdown hooks should also finish their work quickly. When a program invokes exit the expectation is that the virtual machine will promptly shut down and exit.* http://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html#addShutdownHook(java.lang.Thread) *But what if you want to try and exit nicely first, and only halt if that fails? Well that seems like its a missing JDK method. However, a delay timer can be used to get a reasonable approximation:* I think this is a bad idea, since the 'administrator' of a service should decide when you want to enforce what is essentially a SIGKILL (don't run shutdown hooks or finalizers). E.g. for long running services, systemd allows you to specify after what time after requesting a service to shutdown a SIGTERM and then a SIGKILL should be sent (ExecStop).
What kind of witchcraft... Oh wow this is amazing! I am definitely bookmarking this, thank you!
Intellij has been displaying anonymous classes as lambdas for a while now. Check out [example 2](http://confluence.jetbrains.com/display/IntelliJIDEA/Folding).
Why is there no native bindings for Java? I meen like Win32 bindings or GTK+ bindings. I've seen GTK+ bindings but they seems to be outdated and not used... 
Yeah, that makes me want to switch again. Yet I'm always returning to Eclipse. Must be because of muscle memory or somesuch, but I feel like tumbling through my code in netbeans or IDEA.
Your blocks should look similar to this: if (num1 &lt; num2 &amp;&amp; num1 &lt; num3) { num1 = smallest; if (num2 &lt; num3) { num2 = largest; num3 = middle; } else { num2 = middle; num3 = largest; } else { if (num2 &lt; num1 &amp;&amp; num2 &lt; num3) { num2 = smallest; if (num1 &lt; num3) { num1 = middle; num3 = largest; } else num3 = smallest;
You seem to be confusing the Set with the thing containing the (Item) objects in the Set. Point 2 on the exercise might be more helpfully written "You should use an array of Item". "Set[] s" declares an array of Sets, so is not what you want.
It's pretty simple if you have deep experience of using C# on your resume. They are so similar that if you have good understanding of one you **will** have above-average understanding of another.
My problem with these is there's no qualifier context. What are the most popular languages for production apps with huge traffic? What are the most popular languages for mobile apps? Seeing what languages are being chosen for the most stringent environments and NEW apps is much more interesting than seeing what the status quo is.
Square (the card reader based person-to-person payment people) released a very nice little Java library for working with http APIs. [Retrofit](http://square.github.io/retrofit/) It's very straight forward to use and works great.
&gt; they are using a "Concrete" type in the angled brackets "&lt; &gt;" I guess what you are getting at is that it **looks like** "concrete" types. But they aren't really using "concrete" types, just a wonky naming convention. You could use "Items" as your generics name, but you shouldn't. 
I don't know why nobody will give you a clear cut answer. Yes, Reddit is a JSON/HTTP based API, however, there are a bunch of wrappers. Here is a list: https://github.com/reddit/reddit/wiki/API-Wrappers It mentions raw4j: https://github.com/corydissinger/raw4j Have fun.
Year 2014. A hacking game is developed in Java, has no build automation or dependency management. ".idea" and "bin" folders are included in the source repository. "python" folder has commit message "Commit". Internally IP address is represented as String. Guess what would server do if you try to open 40001st conection to it: do { i = (int) (Math.random() * 25536 + 40000); // 2^16 = 65536, 65536 - 40000 = 25536 } while (ports.containsKey(i)); Sigh... I love this world.
OP is promoting his own mediocre blog. Color me shocked.
Try going down to the [LaIR](https://cs198.stanford.edu/cs106/LairHelp/HelperSchedule.aspx) on the second floor of [Tresidder Union](http://campus-map.stanford.edu/index.cfm?ID=02-300), and asking them for help. They don't bite, I promise. /r/java doesn't like homework questions. Too many ways to accidentally violate academic standards.
/r/gamedev is for game developers, there are better subreddits for showing players.
If the dimensions, types, etc don't change use a 2 dimensional array. Hashmap would be much to inefficient unless you absolutely require its flexibility. If the data is sparse you can also look for a sparse matrix implementation... there were a few links to those and other high-performance libraries posted in /r/java recently.
The argumentation is that you should read the material you were assigned, and then do your own homework.
This ain't homework... Edit: I'm making a android application and wondered what would be best to use.
Yeah exactly! I just messed up. &gt;_&lt; 
Preach it, brother! And not to forget automated testing.
Just from looking at the JMusic Javadocs I can see that there are several methods that let one paint on their own canvas as opposed to the separate frame of the View class.
Oracle java tutorials. They are not easy if you dont know programming, but are quite helpful if you do.
Already started reading them, explanations are excellent so far. Are they a substitute?
Isn't leaving the .idea folders kind of like a breadcrumb for anyone using IntelliJ? 
O'Reilly head start for java is good. Read it as a refresher before a job interview after having taken a class on java 3 years ago but worked with it in school on and off since then. Got the job. Easy to understand concepts and makes conceptualizing oop and java very straight forward. 
Although people use `kill -9` they really shouldn't: Here's a imperfectly reconstructed quote from Randal Schwartz: (Quote abomination) No no no. Don't use kill -9. It doesn't give the process a chance to cleanly: 1) shut down socket connections 2) clean up temp files 3) inform its children that it is going away 4) reset its terminal characteristics and so on and so on and so on. Generally, send 15, and wait a second or two, and if that doesn't work, send 2, and if that doesn't work, send 1. If that doesn't, REMOVE THE BINARY because the program is badly behaved! Don't use kill -9. Don't bring out the combine harvester just to tidy up the flower pot.
I thought he was a game developer, because that's why he posted here in the first place. But to show your game you can go to /r/playmygame like /u/TheBros35 proposed. I think both are good, one for criticism, and one for showing off. :)
Just noticed this may of been the wrong subreddit sorry!
Well the other way round, but yes that's exactly what I'm talking about. The client connects to the server and sends the data encrypted with some unique hashing or function. The server handles the actual connection to the database. To be precise, the server doesn't even need to be a Java application, it can be a relatively simple PHP/JavaScript/Ajax whatever solution that is capable of receiving the data in a certain format (maybe JSON), then process (decrypt and verify) the data, then store the data in the database. And - you're in quite the right subreddit. Here anything related to Java can be discussed.
Check the /r/Javahelp wiki - plenty of resources there.
Ah thank you I actually have some old PHP scripts I think that I used to push data to a MySQL server from another project that used application. But I didn't think about encrypting it.
In my opinion the article is kind of lame. Not a word about how to actually *use* annotations at compile- or runtime, so here are a few examples: * @Override is used at compile time to verify that the method is indeed overriding a parent class' method. * @SuppressWarnings is also used at compile time, giving a rationale for allowing risky language constructs that would normally be flagged by the compiler (at least with -Xlint), static checker or an IDE * @Data from [Lombok](http://projectlombok.org) has a Java agent (or a delombok pre-compiler) generate getters, setters, hashCode, equals and toString for you * @Entity from JPA2 marks classes as entities so that Object-relational mappers know what to do with them. * @Test of [junit](http://junit.org) marks a test * You can create your own annotations and fetch them via reflection to do meta-programming, e.g. create a default configuration from your code.
If you use Java on the server (e.g. via tomcat), you may want to look into container managed connections.
This isn't a very good tutorial. * It assumes the reader is using Windows. * Recommends a very old IDE. * Has nothing to do with Java! 
I like the part "We aim for the revised model to be **mechanically checkable**, as well as more readily humanly understandable."
I would say, that before a job interview, Effective Java would be more suitable.
I hear you. But as a coder who tries to make robust systems, kill -9 is one of the things I think about.
Not a substitute at all. They **are** the real Java tutorials. Oracle (former Sun) is the maker of Java. Same applies for the Java documentation and Coding Guidelines - both from Oracle, both excellent.
Print the model on a wooden table? Then use a physical comb to inspect it?
As I understand it, this means that static analysis tools should be able to model the memory behavior with sufficient precision to find a wide range of possible error conditions in the JVM and perhaps in running programs. Can someone confirm or correct my understanding?
LOL. I assume you know that it means formalising the memory model in a theorem prover like Isabelle/HOL like in [Making the Java Memory Model Safe](http://pp.info.uni-karlsruhe.de/uploads/publikationen/lochbihler14toplas.pdf).
?Python is #1? On Tiobe it is what, #8?
yay, the next spam-account of this blog!
Talented programmer? Effective Java. Averaget talent? Head Start or the standard java trails 
How do forwarding pointers work with Hotspot optimizations? Would you track the optimized calls and invalidate the optimizations when the pointer is being "proxied"?
This helped a lot thanks! What I'm still a little stuck on is what to put in this spot public Set() {} I can declare a variable type T before the method like private T set, what do I set that equal to? I can't do public Set() { set = 10; } because of incompatible types still. 
Such as?
+ [jm.gui.cpm package](http://explodingart.com/jmusic/jmDocumentation/jm/gui/cpn/package-frame.html) + [jm.gui.sketch package](http://explodingart.com/jmusic/jmDocumentation/jm/gui/sketch/package-frame.html) + [jm.gui.show package](http://explodingart.com/jmusic/jmDocumentation/jm/gui/show/package-frame.html)
I haven't been able to get any of those to work in a Swing frame. I thought ShowPanel would be what I wanted but I couldn't get it to work with a frame, and even if it did, I wouldn't know how to get it to just be one panel of a much larger frame. (If it helps, I'll post the code an a couple hours when I have access to it).
Does this mean it will fix double-checked locking?
You are sure right that Java doesn't let you create a generic array directly. It kinda surprised me. Very annoying. There is a way around it. You can use Array.newInstance by importing java.lang.reflect.Array. It won't let you make an array without an actual object of the items you want to add to the array, but that isn't such a big problem. You can do a late instantiation of the backing array. That is, in stead of creating the array in the constructor you can make it at the first moment you need it. Here is an example usage. public T[] putTheseGenericlyTypedObjectsInAnArray(T item1, T item2){ int sizeOfArray = 2; T[] items = (T[]) Array.newInstance(item1.getClass(), sizeOfArray); items[0] = item1; items[1] = item2; return items; } This isn't something you will be using verbatim (that comes later, I find your homework relaxing to solve ... it's like Sudoku), but it gives you an idea of how to solve the problem. You could simply create the array as soon as you have an item you want to add. This requires some extra code that makes sure you don't do operations on the nulled out array. So, here's your assignment using an array as the backing collection. import java.lang.reflect.Array; public class Set&lt;T&gt; implements Setable&lt;T&gt; { private T[] _items = null; private int _index; public Set(){ } public Set(T [] items) { _items = items; _index = 0; } @Override @SuppressWarnings("unchecked") public void insert(T item) { if(_items == null){ _items = (T[]) Array.newInstance(item.getClass(), 1); _items[0] = item; } else { for(int i = 0; i &lt; _items.length; i++){ if(_items[i].equals(item)){ return; } } T[] items = (T[]) Array.newInstance(item.getClass(), _items.length + 1); for(int i = 0; i &lt; _items.length; i++){ items[i] = _items[i]; } items[items.length-1] = item; _items = items; } } @Override @SuppressWarnings("unchecked") public void delete(T item) { if(_items != null){ int size = 0; for(int i = 0; i &lt; _items.length; i++){ if(!_items[i].equals(item)){ size++; } } T[] items = (T[]) Array.newInstance(item.getClass(), size); for(int i = 0; i &lt; _items.length; i++){ if(!_items[i].equals(item)){ items[i] = _items[i]; } } _items = items; } } @Override public boolean member(T item) { for(int i = 0; i &lt; _items.length; i++){ if(_items[i].equals(item)){ return true; } } return false; } @Override public boolean isEmpty() { return _items == null || _items.length == 0; } @Override public int size() { return _items == null ? 0 : _items.length; } @Override public Setable&lt;T&gt; union(Setable&lt;T&gt; items) { Setable&lt;T&gt; unionResult = new Set&lt;T&gt;(_items); items.reset(); while(items.hasNext()){ unionResult.insert(items.next()); } items.reset(); return unionResult; } @Override public Setable&lt;T&gt; intersection(Setable&lt;T&gt; items) { Setable&lt;T&gt; intersectionResult = new Set&lt;T&gt;(); items.reset(); while(items.hasNext()){ T item = items.next(); if(this.member(item)){ intersectionResult.insert(item); } } items.reset(); return intersectionResult; } @Override public Setable&lt;T&gt; difference(Setable&lt;T&gt; items) { Setable&lt;T&gt; differenceResult = new Set&lt;T&gt;(_items); items.reset(); while(items.hasNext()){ differenceResult.delete(items.next()); } items.reset(); return differenceResult; } @Override public boolean equals(Setable&lt;T&gt; items) { for (int i = 0; i &lt; _items.length; i++) { if(!items.member(_items[i])){ return false; } } items.reset(); while(items.hasNext()){ if(!this.member(items.next())){ return false; } } items.reset(); return true; } @Override public void reset() { _index = 0; } @Override public boolean hasNext() { return _index &lt; this.size(); } @Override public T next() { T result = null; if(_items != null &amp;&amp; _index &lt; _items.length){ result = _items[_index]; } _index++; return result; } } You should pass using this, but I didn't really use the suggested methods expand and shrink directly. These are part of the insert and remove methods - you might want to extract them. In a real implementation you might double the size of the backing array (_items) every time you needed to expand it, instead of increment it like I am. My implementation has some extra cost when it comes to runtime, but it saves space. A trade off really. If you're instructor gives you trouble then tell him that the assignment didn't specify what sort of optimization he wanted. You have optimized with regard to memory. Anyway. An end note: I use a C# (might be C++ too) notation for fields. This means that I have an underscore _ in front of it. Nothing magic about it, simply a character which indicates that it is a "global" variable in the object, i.e. its scope goes across all methods.
Double-checked locking was already fixed in Java 5.
With an array list you simply need to have an index (int) to track the current location in the array list. You can use get(int) to get the item. And .size() to see if you are at the end of the list.
I'm not quite sure about what the problem is. But one way to isolate tests is to use mock objects. So instead of initiating a lot of dependencies you just create fake objects with simulated behavior. [Mockito](https://code.google.com/p/mockito/) is a framework for creating mock objects. http://en.wikipedia.org/wiki/Mock_object If your problem is about pure GUI testing, I have no clue about how you would do that well.
For "public Set(){ ... }" You can put anything you want in there. When thinking about what to put in there, think of two questions: 1. How am I going to store the data in this "set". Array? ArrayList? Some other Data Structure? 2. what should a "default" behaviour be if I didn't provide a bunch of data? Question 1 is something you can figure out. Question 2 is about thinking beyond the answer for question 1. Once you figure out the data storage, if , for example I don't provide an Array into the constructor (as found in the other constructor), then what should I do? A sensible answer would be to just initialise the data structure you will be storing the data in, so if they call something like "set.add(...)" then the internal data storage is already ready for them. :) Hope this helps.
At least to me I couldn't see the clock, until I changed "setResizeable(true)" instead of false. Is this something that's relevant or not? I'm new to java and I am happy I found a personal bug ^^
I thought so, but it doesn't help people who use other IDEs
Why do you think it is a hack? http://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java This says it is a perfectly valid fix
I have only made a few test builds in the past, but I will take a look at that.
No. `volatile` creates a memory barrier, like `synchronized`: operations are not allowed to be reordered around accesses to a `volatile` field, and you are guaranteed never to see a stale value in a `volatile` field. Unlike `synchronized`, however, reading from a `volatile` field is less expensive. This means double-checked locking with a `volatile` field is now a perfectly viable and widely-used optimization. Please see [the relevant section of the JSR-133 FAQ](http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html#dcl) for more information.
It depends. How often does its size change? Is it sparse? Which operations do you particularly need to be fast? What kind of values do you need it to hold? Do you need thread safety? You simply haven't told us enough for a recommendation.
I remember reading this before or something like this, when it said the disclaimer, which is now redacted.
It was more of a general question but I'm trying to make a SeaBattle game right now, and I'm not sure what I should use to create the field with.
I think it works the other way around. All those libraries would have to use SLF4J and then I would be free to swap out whatever logging system I wanted beneath. The problem is that so many libraries use different logging systems. Save for one or two libraries in the past, everyone seems to be using something that likes to use log4j, so I haven't had any issues. The only time I've had problems is with libraries that used SLF4J and wouldn't play well with other libraries not using it.
The unit testing books I've read have recommended using the [Builder pattern](http://www.javacodegeeks.com/2013/01/the-builder-pattern-in-practice.html) for complex test data. The alternative is to use an [Object Mother](http://martinfowler.com/bliki/ObjectMother.html) pattern, and that's honestly something I've done in the past a lot. But nowadays I try to follow the builder pattern instead.
Actually, you can. You can provide your own [ServerEndpointConfig.Configurator] (http://docs.oracle.com/javaee/7/api/javax/websocket/server/ServerEndpointConfig.Configurator.html) and set it up with [ServerEndpointConfig.Builder.configurator()] (http://docs.oracle.com/javaee/7/api/javax/websocket/server/ServerEndpointConfig.Builder.html#configurator%28javax.websocket.server.ServerEndpointConfig.Configurator%29). You can then pass your objects through the ServerEndpointConfig object by overriding the modifyHandshake method of the configurator as shown in this great example: http://stackoverflow.com/a/17994303. Alternativly you can override getEndpointInstance if you want to be responsible for the instantiation of your endpoints. You can then pass your objects directly via the constructor or setter. See also: [websocket tutorial] (http://docs.oracle.com/javaee/7/tutorial/doc/websocket.htm) and [JSR-356 final websocket spec] (http://download.oracle.com/otndocs/jcp/websocket-1_0-fr-eval-spec/index.html) However, the best way to achieve your goal is probably to utilize dependency injection.
I am really happy to hear it. Having desire to grow is the single most important trait too many young developer lack. I decided that the best way to teach would be to do the initial setup for you. So here is the pull request: https://github.com/Rsgm/Hakd/pull/4 That adds build automation via gradle. I even added helper scripts gradlew (works on all major OSes). What does that allow you to do? Well, you can type "gradlew idea" and it will generate Idea project for you. If you decide to try Eclipse, just type "gradlew eclipse" and you are all set to go. You may package it for distribution with "gradlew build". If you had any tests, you would be able to ran them with "gradlew test". And of course there is "gradlew run" to execute it. I stopped at some point once I saw the initial game intro. I either did not include some crucial dependency, or my Linux workstation is not set up for games, but the game crushed after that. Anyways, what are the benefits? Anybody would be able to run your game and contribute to it. Does not matter which IDE she uses (or no IDE at all) or which OS he runs. Also, there are no custom and undocumented build scripts anymore (like that one to pull libgdx you had). Pretty much any java developer would know how to build it. For more benefits I would send you to the build automation tool's site: http://www.gradle.org/ Actually, you don't have to use gradle. Ant, Maven, SBT... They all solve the same problem in a similar way. Regarding your project, there are still steps to take. I did not delete bin folder, resources are in the same folder as the sources (it is better to separate them). libnoise dependency could be better set up as a subproject. Sorry, I only spent 15 minutes or so writing the build definition file for you. One other point. The code I pasted earlier would spin indefinitely if all 40K ports are used. That is called deadspin and is a bad situation. I see you said that you do not expect your game to be able to support such scale. But scale is not something one could add later on. You should spend just a bit more time designing the code. It will save you a lot of debugging time later on. One last note. I am sorry if my criticism came out too strong. I love working with young developers and yet still sometimes I do not restrain myself enough. I am glad you welcomed that message. Once again, I believe that this single trait will make you an excellent developer
Thank you so much. I have known about the game crash that happens in the intro. It usually happens right as the intro timer ends and should switch to the menu. I have tried fixing it a few times, but it is not a big priority since clicking the mouse skips the intro, and the bug. It might be due to openJDK on linux, which I use, I am unsure though. How should I handle the resource paths? I have resources in the source path because I can't build it(just using the java compiler) without it under the source path. I was having a problem earlier trying to build it(again, just the plain javac) where the python path could not be found. How do I solve that? Will gradle solve both of these?
Yes, you probably did. This article was cited pretty widely. Thing is, even if the redacted part were true, double-checked locking would still make sense. The article said `volatile` was *approaching* the cost of `synchronized`, but as long as it's *less* costly than `synchronized`, then it's still better, because the vast majority of accesses to the `volatile` field will be after the lazy initialization has already happened. Of course, the alternative pattern (a static inner class with initializer) might be cheaper if `volatile` was that expensive, but fortunately it's not, so we don't have to waste tons of memory on an extra class for every single lazily-initialized field.
I've been using the "Object Mother" pattern for years now and never realized its name. Also, using the builder pattern for this is very interesting! I make use of the builder all the time for exposing APIs (mainly so I can return immutable objects), so it has become one of my favorite patterns to depend on. I'm flabbergasted that I've never really considered using it for testing though, that's such a wonderful idea. Would probably also provide a benefit of readability since then I can make the entire builder fluent.... Can't believe I'm just now learning this!
well we were always told to use the holder pattern since volatile wasn't good enough at the time
why would you guys upvote a page that has modal popup ads on it
I think I'm misunderstanding the question, but you could just add everything to an internal ArrayList and delegate to its iterator (I reserve the right for this to not even compile since I just coded it blind in a text editor): public class ListIterator&lt;Item&gt; implements Iterator&lt;Item&gt; { private ArrayList&lt;Item&gt; list; private Iterator&lt;Item&gt; iterator; public ListIterator(Node&lt;Item&gt; first) { list = new ArrayList&lt;&gt;(); Item curr = first; while (curr != null) { list.add(curr); curr = curr.next; } this.iterator = list.iterator(); } public boolean hasNext() { return iterator.hasNext(); } public void remove() { throw new UnsupportedOperationException(); } public Item next() { return iterator.next(); } }
For simple usages - think single threaded, no JNI, no IO, no off-heap memory and let's say GC doesn't exist - you're right. However, in the real world, things aren't always so simple. Concurrent access presents some edge cases that are underspecified by the current model. JNI and Unsafe ops go straight into undefinedland from a JVM spec POV.
Spend 20 minutes for the change. 10 minutes for refactoring (i.e. splitting class, methods, etc) and 10 minutes for the change. Then write the test. The test now will be easy to do because will cover only a part of the whole. The change will also add more value to your application because it will be covered by test. If you do this every day, every week in a couple of month you application will be far better than now. &gt; Is there a strategy for dealing with this situation beyond simply not writing JUnit tests for code in complex objects that take in a large amount of input, including other complex classes? If you meant that you need to pass forged input to test the behavior of part of your application you need to learn to create integration tests more than unit tests. 
You could just return Collections.unmodifiableList(myArrayList).listIterator(); - why do you intend to write one yourself?
If a class is too big to unit test properly, the class should probably be refactored to something smaller :P
The best working systems are lenient in what the accept and strict in what they provide. So both of you are right, you are just focusing on different sides of the same coin.
I really love this library. Combining Jooq with its [gradle plugin](https://github.com/ben-manes/gradle-jooq-plugin) and [Liquibase](http://www.liquibase.org/) could make any Java &lt;-&gt; RDBMS project better! 
I totally agree, it was about time for having such framework!
Probably neither.
book marked, thanks.
This is very welcome, glad to see the good attitude of the Guava developer's. Nice work.
Library seems great but the licence model was a disappointment. Even if current employer would pay it the next might not and I would be sad. 
Your argument reminds me of this post: http://readwrite.com/2013/11/26/are-open-source-developers-too-demanding
Believe it or not I would be fine with developing on open source except I would pay for Intellij from my own pocket ;) Also office space, computer, phone tends to be one purse and budget for the project another. But yes I agree with your point that it's dumb cheapness I don't like when I think about it.
Don't understand why people downvote you... Anyway, thank you for creating JOOQ!
Didn't get it either. I think Petri is really doing a great job!
We've grown so much used to all that free software, we've stopped caring where it came from. I guess, nowadays, no one is thankful to Gavin King et al. for Hibernate anymore. It's just "there". Same with the JDK...
Haven't had any problems with 16.0 under 7u51; I guess you had to use that stuff to have a problem ?
With everything I meant the features in the software. Btw would you care to comment on this API / Module for JPA Data in relationship to JOOQ? http://www.reddit.com/r/java/comments/1xa9gw/apache_deltaspike_data_module_jpa/ 
Big and complex are often interchangeable in programming. You can solve a lot of the issues you mention with mock objects (a popular mock library is Mockito). Also as mentioned above, you can simplify constructors in many ways, like the Builder pattern. If you haven't already, you could try getting hold of Effective Java by Joshua Bloch, and Design Patterns by the Gang of Four, for some inspiration on reducing complexity and in that way increasing testability. 
The reason why JOOQ is so actively developed and maintained is because of its dual licensing. I am mostly using PostgreSQL and HSQLDB so I can use the open license for most of my projects, and for the MSSQL and Oracle it would be up to the client to agree on adopting it. There are many great open source projects, never backed by any major company (e.g. Google, Spring, Apache foundation, JBoss) that end up being abandoned, as their developers have to concentrate on their daily jobs to support their families. I try to contribute to my favorite frameworks anyway I can: issues reports, bug fixes, articles, code improvements. So sometimes we pay with our time rather than money, which is still better than not paying at all.
It's good to hear there's still hope for DeltaSpike. Our team had a reasonably mature Seam 2 project and had expected to migrate to Seam 3... until it got abandoned/rebranded to DeltaSpike... which then took *years* to even produce an alpha. I can see why they did what they did, but it did leave no migration path for Seam 2 users. 
Nice post
Why the down votes? Some of it obvious but beginners read this too.
&gt; /u/rants_about_things Appropriate username &gt; What if you decide it's not good for you to use those? You're screwed. Then Java provides the low level functionality to do it all yourself. But one of the benefits of Java is that there are things like JSR330 that have been identified as consensus implementations and anybody going from one project to another knows what the hell is going on. You'll see others have implemented alternatives when they had a different approach (such as Sping vs. EJBs)
Just in time for the blooming of embedded platforms.
Specifically you had to use TypeToken (or any class depending on it) to trigger the problem.
Ach, too bad. That would've been nice for shipping traditional desktop apps, which don't generally need shit like JDBC, RMI, CORBA, or the applet API.
I'm having the same problem 
Ugly, but we have to get used to it.
Oh for gods sake, I've been shitting my pants for the last hour trying to figure it out, hoping it wasn't that new mac java virus. Then I had the bright idea. WHY NOT REBOOT. Its all fixed now.
... I guess we'll wait for another few Java versions to finally get collection literals
For anyone interested behind the reasoning of ZeroMQ: http://zeromq.org/whitepapers:multithreading-magic ZeroMQ guide with additional Java sample: http://zguide.zeromq.org/page:all
Then please delete the post.
So... turning it off and on solved it? An Apple device? Wow... mind blown!
What this guy asked, I'd be interested. I'm in for programming at school and would like to explore Java.
I am reading about ZeroMQ for the first time, here are some general thoughts: &gt;"to connect any code to any code, anywhere". Two, to wrap that up in the simplest possible building blocks that people could understand and use easily" -great! how do I start! &gt;"Test what you make as you make it. When your program doesn't work, you should know what five lines are to blame. This is especially true when you do ØMQ magic, which just won't work the first few times you try it." -oh shit.. I knew this sounded to good to be true. -reads a bunch of TCP examples -Oh shit, client/server pattern Anyone who uses zeroMQ, how reliable is it? Does it tend to make development easier or cause its own set of problems? I find client server patterns tend to feel heavy handed in a lot of situations , and especially if i want framework for managing in-process worker threads (I don't need much TCP, in fact a lot of my ideas where to use UDP down the road) . I am trying to fine that middle ground between writing my own threading algorithm based on count down latch etc, vs using a robust and tested framework that will solve problems down the road. Any thoughts appreciated. I guess my question is, in what situations is zeroMQ going to be a BAD choice for managing worker threads? 
Haven't used it in production yet but have been reading about it quite a bit. It can do peer to peer and other patterns too. Nice thing is that either endpoint can go down and come up independently and all the hookup is automatic. Plus it's supposed to be extremely fast. Downside is that it is a C lib that is a separate install, which I suppose Jero would solve. Might lose a bit of performance but gain having it all in the JVM Node.js users have used it for inter-process communication since node only runs on one core (like early JVM you start an instance for every core if you want to take advantage of multi-core processors)
Try over at /r/Minecraft.
http://tomcat.apache.org/tomcat-7.0-doc/setup.html http://enoshtechdiary.blogspot.fr/2012/09/tomcats-architecture-and-main.html http://docs.codehaus.org/display/TYNAMO/Developing+with+Tomcat+and+Eclipse http://tapestry.apache.org/ /r/javahelp http://code.google.com/p/unix4j/ 
I am after googling a little, and I found this: http://ostermiller.org/utils/CSV.html There is apparantelly 2 different CSV formats, and this supposedly understands both. 
Hardware? Antivirus? Minecraft Mods? Any other system modification that could impact other programs?
No Antivirus, but it's a pretty recent clean Win7 install. No mods for Minecraft. Other than switching to a DVI cable from HDMI, no change to hardware. AMD Phenom II X4 3.20Ghz 4GB Ram HD7870 G-card SSD storage
It could be that your settings are ramped up too high. Have you tried changing to Fast, No Smooth Lighting, and a lower Chunk Render Distance?
I'll look into it, thanks. Is this for complete beginners? 
I am mostly looking for pointers, thanks for the post! I am used to programming web servers and unix stuff so I needed the java help for an undergrad
Great job, thanks for the help. I have to work on a project and I need the refresher in java. Thanks for taking the time to do this. I really do appreciate it. Any sites for pointers on learning this?
Vid card drivers?
Using 95% CPU is not unusual for Minecraft, I think. Your computer is probably just overheating and underclocking itself to prevent damage, which causes your FPS to drop. There isn't much you can do other than maybe cleaning dust out of your computer.
We have a great section on this in the /r/javahelp wiki: http://www.reddit.com/r/javahelp/wiki/tutorial_list
Im fairly new also but i've found some nice starting tutorials on "thenewboston" channel on YT .. Try with them a bit .. Goes from installing the jdk compiler and eclipse to a whole lot of complicated stuff later on. Plus if you're interested there is a lot of other tutorials there, like C , C++ and so on .. Hope i helped a bit ;)
Thanks, I added it to the book list on our /r/javahelp wiki: http://www.reddit.com/r/javahelp/wiki/books 
I think that everybody that is programming Java new or old should read "Effective Java' by Joshua Bloch. It will make you a better programmer. http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683
 * Do you have the data already in CSV? If so, what database are you trying to load it into? Many DBMSes today will load from a CSV file since it's a common format -- no need to build a new application. * If you have it loaded into a database, you can perform those exact queries with a SQL statement (assuming you are using a RDBMS). If this doesn't really have to be an application, you can also take a look [at this](https://github.com/dinedal/textql). 
My interest in zeromq is to implement something like actor pattern because I don't want to use AKKA/Scala for various consideration. Message-passing / Actor model is way easier to reason about compared to shared-memory/threading technique. It's also easier to test and debug. In my opinion, for local message passing concurrency/multi-core programming/some peer-to-peer project for fun, ZeroMQ is great! But if you plan to do something like serious distributed computing infrastructure across different node and where consistency is important, I recommend something more secure and robust like RabbitMQ. 
Honestly, it sounds like a fuckup on Mojang's part. Are you using the latest released client or a beta version?
I'm using Minecraft for the Oculus Rift, 1.6.2. It's just the visuals that are distorted the engine is still 1.6.2. I think it's the launcher. If I track what javaw.exe is open when I open the launcher and close that right away, it doesn't exit Minecraft, and my CPU is fine. Manual solution, but it's aggravating not knowing why.
My temps are fine, 95% is not normal for a 4 core. 
Yea gonna try updating them next.
&gt;95% is not normal for a 4 core. And why not? &gt;My temps are fine, That is because your CPU is underclocking itself to prevent overheating. If you have a competently-designed computer your CPU temps will always be "fine". Your symptoms are classic "CPU is overheating; too much dust" symptoms. But fine, go ahead and believe what you want to believe. What do I know? I only have a Masters in computer science, with an emphasis in networking and architecture (i.e. CPU design), and I only use Java on a daily basis. Obviously I don't know anything, so go find someone else to ask for help.
It's best to try that before generally blaming the programming language the program is built on.
* go to en.bookfi.org * type in Absolute Java 5 * download the pdf for that book. BAM, now you have a textbook for a college introductory course on Java.
/r/learnprogramming is actually not a big fan of his for reasons that I can't remember, but I'm pretty sure it's even in the unrecommended learning sources for the subreddit
I'd recommend you start by reading through the tutorials on Oracle's website. It is worth spending time reading through the "Trails Covering the Basics" section to get an understanding what the Java platform is, what it offers, and how it's commonly used. These lessons will cover concepts like classes, objects, and inheritance which are very important to understand if you are going to build programs in Java. As you're working through examples, spend some time to look up the Java API Docs and read the class documentation to get a better understanding the fields and methods you're using. Wikipedia is also a great resource for researching OO and related concepts. [The Java Tutorials](http://docs.oracle.com/javase/tutorial/) [Java API Docs](http://docs.oracle.com/javase/7/docs/api/) If you haven't already, you'll want to download the Java JDK so that you can begin creating programs. Start with a simple HelloWorld and build up from there. For early projects I'd recommend implementing different data structures and algorithms to familiarize yourself with both the Java programming language and fundamental programming concepts. For example, data structures: List, Set, Map, Tree -- algorithms: Quick Sort, Insertion Sort, Binary Search, Hash Functions. See Wikipedia and other online resources for implementation references. You can use an IDE like Eclipse, IntelliJ, or Netbeans for editing and executing your code which can make development much easier (I prefer IntelliJ). Familiarize yourself with the IDE's debugger and use breakpoints to step through your code and examine your program states during execution. A debugger allows you to pause and step through your code execution line-by-line and better understand what's happening -- once you get the hang of it writing programs becomes much easier. Becoming fluent in a language like Java takes quite a bit of practice and it isn't something you should expect to pick up right away. After you think you have the basic concepts down, try to find a project to work on that you find interesting and will keep you engaged. In the market, Java is most widely used for server side J2EE web application development, but if you aren't interested in web development I'd maybe look at developing on the Android platform -- if you're familiar with Java and own an Android device it's pretty easy to get started. When looking for example projects, I'd recommend GitHub. GitHub has thousands of different open source projects written in Java that you can collaborate on or use as a starting point for your own project. [GitHub.com](https://github.com) Good Luck!
It's a relatively new processor, and the program I am using has never clocked it out before, just now. I didn't know about the underclocking to maintain heat, makes sense. But actually, the problem is that the javaw client that runs when the launcher is started stays running while a new javaw client opens to run the game. For some reason, the launcher javaw eats up about 60% of my CPU. I wasn't trying to be rude, but I'm getting the impression that I've come to the wrong place.
Using a laptop aren't you? What you're describing is a textbook overheat situation. it runs fine for 10 minutes because that's how long it takes for the heatsink and surrounding area to get completely heat soaked to the point where it can't take anything else from the CPU. The only thing after that point is to reduce power and consequently your performance goes to shit. Get a laptop cooler stand or something.... this isn't a Java problem, its just poor design on behalf of whichever moron got an engineering job creating laptops. 
I only see the functions for changing the height and width at the documentation, not the max number of lines displayed at the TextArea(because you can scroll). http://docs.oracle.com/javafx/2/api/javafx/scene/control/TextArea.html Maybe it's there and I don't notice it. setPrefRowCount value doesnt make a difference. 20 lines or so fit into my Textarea without scrolling. And by scrolling only 15.000 or so. So if I add 50k lines it only displays the last 15k. 
This tutorial covers all the details required to quickly start with Spring MVC using the latest Spring 4. Hope this is useful 
Splitting by "," might cause problems. What if actual data contains a comma?
Yeah never thought about this, I like your answer better then mine lol
If you don't like Akka and/or Scala, you might want to look into Quasar, which provides a pure-Java implementation of lightweight threads, Go-like channels, and actors: http://docs.paralleluniverse.co/quasar/
this sounds like a job for regular expressions, but I have no experience with that :(
What are some of those drawbacks?
Look at apache commons RandonStringUtils. There is a static method, I belive, randomNumeric that demonstrates how to do what you've described.
I like CSVReader but there are a lot of data transformation libraries out there. Check out Snooks as well.
Your dependencies aren't easily visible to static analysis tools if they are all declared in XML. If you run the maven dependency analyzer tool, for instance, you will have lots of unused dependencies that are actually used at runtime - so you can mark them as runtime scope and that helps a bit... But given how less verbose java configuration is, and you get added niceties like the project will not compile if a bean you are creating isn't available. If you are creating things intended to be used in spring, a common thing libraries do is create custom namespace handlers to simplify things. That work is largely wasted effort with how simple it is to create an annotation driven config
http://mvnrepository.com/search.html?query=csv
if only it used Spring 4 (or even Spring 3) conventions instead of Spring 2.5
Now you've got two problems.
I don't get it, was my comment that stupid?
It's more that Regular Expressions usually cause more problems than they solve.
Not exactly new, but quite complete writeup of this feature. The only thing I miss is a description of what happens when you try-with without catch our finally blocks - this construct will discard any thrown exceptions.
I guess I should mention that I will be asking the user, "What would you like?" and they are to respond with the #1-#5, with each number being a different item.
and each item having a price assigned already. 
Make an item class with the fields id, price, name etc. Make an object for every item and work with those.
Please elaborate. I'm all for learning new things.
&gt; Does the random package also guarantee that each time the method is invoked a different number will be generated than the one previous. No. In fact, very explicitly, no. If you can't get the same thing twice in a row, it won't be what's commonly considered random. I would suggest a few different things. * As others have said, leading zeros should be done in your presentation layer. * Sampling-with-rejection is likely your best bet for the problem exactly as described. ie, Integer newRandom; do { newRandom = gen.nextInt(9999); } while(newRandom == oldRandom); * I suspect what you *really* want is a permutation of the numbers 0 through 9999. I'd do it thus: List arr = new ArrayList&lt;String&gt;(10000); for(int i = 0; i &lt; 10000; i++) { arr.add(String.format("%04d", i)); } Collections.shuffle(arr); // Now keep popping items off the end of the list with: String nextStr = arr.remove(0); // And when the array gets empty, populate a new one. It's worth adding that you still have a nontrivial probability of two numbers being produced back to back when you generate a fresh array
It's a [famous quote](http://regex.info/blog/2006-09-15/247)
Thanks, uhm I installed the Java Development kit, but now I can't compile? Its installed in the right spot C:\Program Files\Java\jdk1.7.0_51\bin , but when I open command prompt to compile my program (Saved on Desktop) it says "javac is not recognized as an internal or external command."
I don't really understand what they mean, I found the path in my System Environments, but I added that above text to it, and still doesn't work....could the fix be as simple as restarting my computer? EDIT: I figured it out, but more help on the above would be great
Could you elaborate on this if you wouldn't mind?
Do you know what objects are? Also do you have a book or something you're learning from? EDIT: I see you have a book, look at the Objects section or find something about objects online. Then you'll want to use that. Put them in a List of items (List&lt;Item&gt;). For input a Scanner can be used. I'm going now but googling the things I mentioned should get you started.
I do have a book I am reading from, but I'm just looking for a real explanation rather then heavy tech stuff. I don't exactly know what an object is off my head :/
/r/learnjava has tutorials in the sidebar
Here is an easy question probably, but how do I recognize user input as letters. For instance my code: int name; System.out.println("What is your name?"); Scanner keyboard = new Scanner (System.in); name = keyboard.nextInt(); System.out.println("Welcome" + name); If I run this and input a number, it works, obviously because of nextInt, but I can't recognize letters or find out what to do to recognize letters :/ Thanks so much Vent btw, and any others who help
keyboard.next(); 
my problem was I had int name, not string name;
Which should be changed to what? 
Ok thank you for the help, I am really struggling, I guess I now know I need to put more time towards this, but, can you help me with this part now :/ What would you like? 1.Hamburger $6.00 2. Cheeseburger $7.00 3. Milkshake $8.00 4. French Frys $4.00 5. Soda $2.00 And the user is supposed to give me a number 1-5 which corresponds which each item. This I am very lost on, checking through the book for stuff now though. I recognize I can make Cheeseburger = $7.00 but how does 2 = Cheeseburger/$7.00? 
Ok, as of now, I'm just printing out the menu, think I'll make a new scanner object, that is user inputs 1, Cost = 6.00.
two java books which are good for the non-beginner are: 1. Effective Java and 2. Better, Lighter, Faster Java
OK I'm doing if/ if else statements, and I get an error for possible loss of precision. Says required int, found double. Lost on this. int product_Num; int product; System.out.println("Please enter the number you want."); Scanner item = new Scanner (System.in); product_Number = item.nextInt(); if(product_Num == 1){ product = 1.50; } if(product_Number == 2){ product = 3.50; } if(product_Num == 3){ product = 3.25; } if(product_Num== 4){ product = 2.00; } else if(product_Num &gt; 4){ product = 0.00; } Help would be appreciated as always.
Sounds more like a OS problem than anything. Are you printing from within NetBeans or exporting the code to something else first? Also, what kind of archaic class are you taking that requires printed submissions? :\
Straight from netbeans. Tried printing it through Notepad and it printed perfectly! But its a hassal lol. And my high school...yes I know but its the only course they offer for people who want to learn code. 
Intellij will not identify for you when you overdeclare dependencies in your pom file. Anything beyond trivial config is done far more easily in the java configuration than in XML. It is a preference thing, sure, but spring source themselves are advocating using java config instead of xml config. 
http://www.bluej.org/objects-first/ Objects First is an absolutely fantastic introduction to OO and Java, especially with the IDE it's taught in, BlueJ (though you'll want to graduate from this eventually).
 import java.util.ArrayList; public class SimpleShop { public static void main(String[] args) { ArrayList&lt;String&gt; menuItems = new ArrayList&lt;String&gt;(); menuItems.add("hot dog"); menuItems.add("Burritos"); menuItems.add("Cheeseburger"); ArrayList&lt;String&gt; priceOfItems = new ArrayList&lt;String&gt;(); priceOfItems.add("5.00");//price of hot dog priceOfItems.add("8.00");//price of Burritos priceOfItems.add("9.03");//price of cheeseburger for (int i=0; i &lt; menuItems.size(); i++) { String foodItemAtIndexI = menuItems.get(i); String priceOfThis = priceOfItems.get(i); System.out.println(foodItemAtIndexI + "costs $" + priceOfThis); } } }
Java config. Replaces the servlet-context.xml and web.xml
To get the number of items in your array, try int size = items.length;
That worked. Thank you
Not sure where you got that impression -- the Spring team (now part of Pivotal) has always given you many options to choose which is appropriate for your team/project. For example Java configuration might be preferred for developers but infrastructure teams might prefer XML configuration. They have even introduced a Groovy DSL for component configuration in Spring Framework 4 if less verbosity is something important to you.
A handy way to initialise your array is to use Arrays.asList("First", "Second", "Third", "Fourth", "Fifth");
&gt;Does the random package also guarantee that each time the method is invoked a different number will be generated than the one previous. No, because that wouldn't be random anymore...
I think the issue is that it wasn't clear what problem you were trying to solve with regular expressions.
I would try copy+pasting the code into wordpad and printing from there. Netbeans/java/whatever may not like your printer drivers.
While that works of course, you're doing nothing with arrList after adding those strings. int size = arrList.size(); will work too..
dual boot linux.
To give a bit more context to GodsDeceiver's correct answer, Java native arrays (i.e. `Type[]`) have a length attribute but no size() method while the Java library containers (`ArrayList&lt;&gt;`, `Vector&lt;&gt;`, etc.) all have a size method(). 
if you're just doing basic stuff, just use http://ideone.com/ (that's what I use)
This is the wrong sub. It's possible you want /r/javahelp but most likely you want google. This sub is for Java developers.
Effective Java and Java Concurrency in Practice
I work in investment banking. We use Java for server side applications that don't even necessarily have front-end interfaces. Just apps that do processing for data then pass to another server for more processing. 
Android.
Hadoop
First result is "Java is dead". I didn't read the rest. 
I believe a majority of Runescape used to be programmed in Java.
Server side financial applications and webapps. Desktop java and applets is pretty dead. Due in large part to all the security issues with applet sandboxing. Also oracle bundling crapware.
What more do you think it should be doing? If it's using 6 full cores, it's obviously trying hard to compile everything? What extra resources do you want it to hog? you could set your Xmx higher, but it sounds like you're CPU bound anyway? My first suggestion is to turn off all eclipse validators (Preferences -&gt; Validation), that'll reduce the load of what eclipse is doing while it compiles
https://www.google.com/about/jobs/search/#t=sq&amp;q=j&amp;d=java&amp;li=10&amp;j=java
Mostly serverside applications. There are a ton of frameworks and technology for webapps like * JSF * JSP * Servlets * [Frameworks](http://en.wikipedia.org/wiki/Comparison_of_web_application_frameworks#Java) But there are also desktop applications written in it: * Eclipse and IntelliJ IDE * Minecraft But due to the Ask toolbar deployed with the oracle Java installer, and the frequency of security issues in java, the language became an unpopular choice for desktop apps.
Along with a ton of other "big data" technologies. 
&gt; what you use Java for? Most of the server applications in most of the corporations in the developed world.
Enterprise server software and Android apps. 
I am using Java to make an indie game with the JMonkey engine. I absolutely love it as a gamedev platform. 
The fourth best selling PC game ever is written in Java.
Are you on a 1. 64-bit OS, have a 2. 64-bit JVM that is being used by 3. 64-bit Eclipse? If any of these are false, your compiler can only use a max of 4GB. Also, try increasing Xmx to 12G.
I work in banking and finance, Java is crazy big.
Install OpenJDK and copy it into the same folder as the Apple-provided JDK (`/Library/Java/JavaVirtualMachines/` I believe). Then you can add it as a JDK in Eclipse. [Maybe this will help](http://jksha.blogspot.se/2013/09/java-7-and-snow-leopard-osx-106.html?m=1)
Nowadays Java (and Scala) also often a default choice for scientific applications, including natural language processing. The reason for this is because Java is more safe, portable, maintainable and - with better high-level concurrency tools available - more scalable than C++. The performance is less, but you can compromise safety, portability and maintainability for more speed and it only takes one inexperienced C++ programmer to make an application slow and unreliable. Java is large in the embedded space. It shows how capable the platform is, you only need 130 KB to be able to use Java technology (on a smart card or sensor). Originally Java was designed for embedded devices. &lt;http://www.oracle.com/technetwork/java/embedded/overview/getstarted/index.html&gt; 
NASA nowadays uses Java (along with Ada) for mission-critical systems both on the ground and in space. J2ME, besides being in a sizable percentage of low-end cellphones, is implemented in every blu-ray player on the market. I use it for market research data analysis on the job, as a part of the operating system on my android phone, in my blu-ray player whenever I insert a blu-ray disk containing J2ME bytecode, and in a lot of software I don't even get to see whenever I use google (or any other site that uses Java).
Java applets are quite common as administration tools for industrial grade managed network switches, routers, access points (e.g. Hirschmann network equipment)
In OS X 600% CPU usage means that 6 out of 8 logical CPUs are being used to 100%. 
Creating pure rest api's with a JavaScript mvc framework seems to be the way to go. My last project used ember js and I loved the way I could mock all my front-end functionality before having to do any back end work. 
I doubt it's got anything to do with ask toolbar lol 
Might be an off-topic, though here's the advice: forget Netbeans and use the most intelligent, powerful and user-friendly (imho) IDE: Intellij IDEA.
I work for a small software company that ships a desktop Java app. They do exist!
I use java for minecraft mods &amp; command line utilities. I think java is really relevant when building applications that dynamically load modules/plugins at runtime, though you can achieve the same results in most languages.
Really? Neat. How's the garbage collector treating you?
Note that this has no effect on desktop apps that bundle their own JRE. Those still work fine, bundled JREs don't have crapware, and the sandbox vulnerabilities don't matter because desktop apps aren't sandboxed anyway.
Minecraft?
You will want to look at the String.split() method to split the name into last &amp; first names. Also, you want to check the length() method of a String. [Oracle Documentation here](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)
I have heard of Spring boot though I have not used it. After reading the article you linked I'm not sure how it was so much simpler. It appears it took away some of the configuration classes. I'm going to a conference later this month and one of the talks is on Spring Boot. Your comment makes me want to check it out. Thanks for sharing.
Thanks man, very helpful!
Over the last many years, I've used Java almost exclusively to build many industrial/engineering suites. Some components handle machine-to-machine communications, others used to gather data from sensors, analyse the data, and send commands to PLCs in response to changing conditions. Using OpenGL 3D libraries, I've built visualization tools for underwater sonar exploration which builds up the virtual terrain as the sonar scans the surface, and then compile a complete analytical PDF report at the end of the survey. I've written software for a giant industrial cleaning robot which does image analysis on the data streaming in through the cameras and (as a bonus to the owners) I made it so that it *can* be controlled with a Playstation-style controller, or a bluetooth-enabled J2ME phone, which was awesome. I was also part of a team who developed training and simulation software for military weapons systems. To name a few. Java is incredibly powerful, inspiringly multifaceted and robust enough for the dirtiest of jobs. 
Yup, and it's recently moved on to the third best selling. Only two games have sold more: The Sims 2 and The Sims. https://en.wikipedia.org/wiki/List_of_best-selling_video_games#PC
First i would like to say thank you, i finally figured out how to use the split method from what appears to be correct but i am confused on how to work with the string under one string name (using "str1"). This is my current executable. System.out.printf("Enter name in the for lastName, firstName: "); String str1 = sc.nextLine(); str1 = str1.toUpperCase(); str1.split(","); System.out.printf("%s%n",str1); If i type in Doe, John I still receive a run result of DOE, JOHN when I need JOHN DOE. I have only ever worked with strings or int as separate, but not together split before and the documentation is not explaining how it works with split in a way i can understand
And don't forget this: http://phet.colorado.edu/en/simulation/electric-hockey A fun way to waste time and learn about electric fields.
While you can stick with mavan the way people stuck with ant/ivy, but gradle is where a lot of large projects (Spring, Android) are going. After working with gradle for a few weeks I became a huge fan of it. If you ever move to mobile development, it will behoove you to still with gradle as all new examples and IDE integration works much simpler with gradle.
You're misunderstanding the split function, and what it does. Calling 'split' on a string in no way alters the original String object. Instead, the output from the function is a new object, which is an array of multiple String objects (see the documentation for the String.split() function at http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#split(java.lang.String) ). Currently you're calling str1.split() and not assigning the returned object to a variable, so it's just getting binned (This is perfectly valid. Some functions don't return anything [void functions], or sometimes you don't care about the return value for whatever reason). So you need to have a new string array variable which the result of str1.split() is assigned to, and then it's that new variable you need to access the parts of when printing. Then you can look at more advanced features like checking if either of the forename/surname you get after the split is blank (because the user has entered incorrect input) and printing out an error or similar, rather than exploding with an exception because you've tried to print a null object.
From what I can see, you use the string.split() method wrongly. String.split() returns an Array of Strings, not a single string. So, the code would be: //Declarations String s; //executable System.out.printf("Enter name in the for lastName, firstName: "); s = sc.nextLine(); s = s.toUpperCase(); String[] splitNames = s.split(","); // After the split, splitNames contains 2 elements // splitNames[0] contains the last name // splitNames[1] contains the first name // The following statement prints these names in reverse order System.out.printf(splitNames[1] + " " + splitNames[0]); // Now you need to find the individual lengths
Well, also there is this little game called Minecraft that it's coded in Java.
Thank you with this and some google-fu I was able to figure out how the string function works properly and set it to two parts = part1[0] part2[1] and was able to complete my functions and get a better understanding working with strings. As for determining length and other more basic functions I had a much simpler time.
It's probably easier to list what Java isn't used for. As I type, I can't think of anything. OS Kernels? Yup, actually there was that java chip thing. Embedded software? yep. Games? Yep. Can anyone think of anything? haha.
Wish i had seen this before the fact I figured out how the splitnames work, while mine doesnt look exactly like this because i assigned a different name for each of the splitnames 0 1 I appreciate knowing that i didnt need to take that extra step and could have used them as their split originals. 
That's what arrays are for. Holding several objects of the same type under a single variable name. Arrays (and their advanced versions) are standard building blocks in most (if not all) programming languages. Elements of Arrays (accessed by index) can be used in exactly the same way as individual variables can.
What if putting the worker into some Class that implements Runnable/Callable then pass it to Executors.newFixedThreadPool(n)? Will it be more scalable since the thread is fixed? The class that extends Runnable/Callable will be passed a zeromq context during initialization + other things so they themselves can create socket object and message to each other using *PAIR* or to the main thread using something like *proxy(router, dealer, null)*?
Some lecturers are just plain pains in the butt. http://www.reddit.com/r/java/comments/1fktad/this_is_my_last_assignment_for_my_java_unit_ready/
What other people do is not meaningful to me by itself. If they're doing it for a good reason, great, but I'm not going to follow the crowd off a cliff. (This is also why I avoid JavaScript like the purple plague, despite how trendy it is these days. Trendy it may be, but it still sucks donkey dicks.) Gradle has serious problems, like the one I mentioned. Some of them will be solved eventually, I imagine, but there is one that will never be solved, because it is a fundamental flaw in Gradle's design: build files are written in a programming language. This is really bad. Besides the temptation this creates to put code in the build file (which should be purely declarative—scripting goes in plugins or external scripts, not the main build file), it also creates syntactic "gotchas" in those build files. For instance, this means certain elements have to appear in certain orders, and the details of what has to go where is often less than obvious. In Gradle, you must list the plugins you use before most anything else in the build file. In Maven, by contrast, you can put the plugins section (and all of the other sections) wherever you please. This also often means you have to be mindful of whitespace. It's not necessarily intuitive whether a line break is permitted at any given point in the build file, because that depends on the syntax of the host language. Maven, on the other hand, doesn't care where you put a line break, as long as it isn't in the middle of an identifier. Maven has its own share of serious problems, of course. Its build files are way too verbose, most notably. But those problems are at least fixable by improving the XML schema for Maven POMs. The problems stemming from the build file being code, however, will never be fixed. And that is why I'm staying with Maven. Show me a build system that's genuinely better, and I'll switch in a heartbeat, but I have yet to encounter one. Maybe, some day, I'll make one myself…
You could also combine Spring MVC with [Thymeleaf](http://www.thymeleaf.org/) which will just render the page nicely during mock / design phase, unlike JSP. This is useful for traditional website (non-rest backend) and corporate website that require some kind of transaction/full-session where you can't really go full detached with the client. I don't know with you, but for the core front-end, I always go back to GWT because it is really maintainable from the Java developer's perspective (which is majority of my team). Plus the latest version is very enjoyable to work with (eg. superdevmode in latest 2.6). GWT compiler/optimization is also very good which did help a lot for cross-platform mobile app.
This is what I was afraid of. Javahelp didnt look like it was the right sub either. Regardless, any ideas that I could try before I bring it to a shop and lose my dignity by having the nice man install java for me?
This thread has been linked to from elsewhere on reddit. - [/r/programming] [What has Java been useful for?](http://np.reddit.com/r/programming/comments/1xin5n/what_has_java_been_useful_for/) *^I ^am ^a ^bot. ^Comments? ^Complaints? [^Send ^them ^to ^my ^inbox!](http://www.reddit.com/message/compose/?to=totes_meta_bot)* 
You can tweak it, maybe using -XX:+UseConcMarkSweepGC or -XX:+UseG1GC and other settings depending on your games 
I said the name of the *project,* as in the `artifactId` in the POM that's generated for it. Changing the name of an artifact that the project builds does not change the name of the project itself.
I feel that Java is very underrated for modern desktop application development due to its bad history. Modern Java, especially Java 8, and its ecosystem are actually pretty good for desktop application: * [Very performant VM](http://benchmarksgame.alioth.debian.org/u64q/benchmark.php?test=all&amp;lang=java&amp;lang2=python3&amp;data=u64q) * [JEP 149: Reduce Core-Library Memory Usage]( http://openjdk.java.net/jeps/149) * [JEP 148: Small VM ](http://openjdk.java.net/jeps/148) * [JEP 139: Improve Build Speed](http://openjdk.java.net/jeps/139) * [JavaFX 2](http://docs.oracle.com/javafx/) * [Trove collection](http://trove.starlight-systems.com/) which is very fast and can save you lots of memory. * Rich and cross-platform libraries, even richer and more cross-platform than Python (which is often touted as *Battery Included* and is used to build quite a number of sucessful desktop app in Linux platform). * Rich, high-level, built-in threading frameworks inside *java.util.Concurrent* package such as Executor and Fork-Join which can help you utilize multiple cores available on a client computer. If that's not good enough you still have cool third party library such as Akka, or implement yourself using [JeroMQ](https://github.com/zeromq/jeromq) * Other improvement: http://openjdk.java.net/projects/jdk8/features * Great build tool with rich ecosystem: Gradle, Maven * Unlike previous version, modern Java is equipped with powerful io library (java.nio). You can either go one liner using Path and Files just like scripting languages, go full abstraction with various Channels, or totally low level with ByteBuffer. For games: * [LWJGL](http://lwjgl.org/) -- fixed (thanks to Taylee) * [JMonkeyEngine](http://jmonkeyengine.org/) 
This may be a bit over kill, but I've been messing around with enums lately. I generally use code like this for well know and relatively unchanging things: public enum MenuTypes { HAMBURGER("hamburger", 6.34), HOTDOG("hotdog", 2.57); private final String name; private final double price; private MenuTypes(final String name, final double price) { this.price = price; this.name = name; } public static boolean isMember(final String member) { final MenuTypes[] types = MenuTypes.values(); boolean isMember = false; for (final MenuTypes type : types) { if (type.toString().equalsIgnoreCase(member)) { isMember = true; break; } } return isMember; } public double getPrice() { return price; } @Override public String toString() { return name; } } public class Menu { private static final String THIS_SIMULATES_INPUT = "hamburger"; public static void main(String[] ARGS) { String menuSelection = THIS_SIMULATES_INPUT; if (MenuTypes.isMember(menuSelection)) { MenuTypes type = MenuTypes.valueOf(menuSelection.toUpperCase()); System.out.println("You Ordered a " + type.toString() + " and it cost $" + type.getPrice()); } } } As an enum, each type also has an integer value that you can get by using the static: MenuTypes.HAMBURGER.ordinal(); Which in the case of hamburger, would be 1 since hamburger is the first to be declared in the enum.
Like most cross-platform languages, it's good for pretty much anything except making user interfaces that feel native to any given platform.
I really wish the syntax of Java lent itself to a more clean and obvious way of handling lambdas. Yes, this is the one place where S-expressions are so much more clear than Java/C syntax.
does oracle not provide a release for snow leopard? edit: it does. http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html edit, the install should make java 7 the default. if it does not, send me a message, I have the commands to do so.
The problem with JSP's are that they are very static. Data is loaded when the page is served. This doesn't really lend itself to being reactive. Websockets and asynchronous frontends are the way forward! Saying that my day to day work is all in JSP's so Thymeleaf will be worth a look. 
Games using libgdx, Casandra and Hadoop for storing and processing large amounts of data, Grails for an MVC webserver, processing for quick visualizations. I don't often use it for desktop apps or applets, as you would need to make sure the user has java, which seems beyond some users. Depending on your target audience you mileage may vary. What do desktop developers do for this? Do they include a separate install, or a program to check that it is set up correctly?
That would depend on *how* you made your first €0.25 profit for code you wrote. No - strike that - you can *demand* all you want. But you probably won't get any salary in that ballpark. Heck, most of us "professional programmers" don't get that much.
One of the issues you are having is that your ifs are all separate and then you connect the last else if to the final if. int product_Num; double product; //this should be a double System.out.println("Please enter the number you want."); Scanner item = new Scanner (System.in); product_Number = item.nextInt(); if(product_Num == 1){ product = 1.50; }else if(product_Number == 2){ product = 3.50; }else if(product_Num == 3){ product = 3.25; }else if(product_Num == 4){ product = 2.00; }else { //You don't need the else if and a condition here you can just say else //However you may want to output some kind of message stating that their //selection was invalid. product = 0.00; } You can set up some Constants above your main function like this: public static final HAMBURGER = 1; public static final HAMBURGER_PRICE = 1.50; public static final SOMETHING_ELSE = 2; public static final SOMETHING_ELSE_PRICE = 3.50; Then you can refer to the Constants rather than just numbers: if(product_Num == HAMBURGER ){ product = HAMBURGER_PRICE; }else if(product_Number == SOMETHING_ELSE){ product = SOMETHING_ELSE_PRICE; } it makes your code more readable and self-documenting. 
When using eclipse, read the little pop up descriptions you get when you hover your mouse on a method or when it suggests an autocompletion. Those are JavaDocs and it's a good idea to get used to reading them early on.
Concurrency is for responsiveness, not performance. For example you use concurrency to keep a gui responsive while the program does something else. There are some dedicated libraries like Hadoop at Apache that are for doing things like what you are trying to accomplish. Also you can find their source code and directly read how they coded their implementation to do what you are trying to do. Threading generates some overhead so anywhere you can pick up performance would be a good thing. Maybe you could use AtomicInteger for startIndex and stopIndex? I think you can get away from local buffering for false sharing by using volatile and/or atomicInteger. Edit: Also, Check out guava from Google. http://hadoop.apache.org/ http://code.google.com/p/guava-libraries/ Edit yet again: I think you may get a lot of value from reading up on Map Reduce http://en.wikipedia.org/wiki/MapReduce
WOW, that's really a **pro** looking library! Thank you for sharing!
It suggests incompetent design. Being able to set the project's name is basic stuff that no modern build system should be incapable of. And no, this isn't my only grievance with Gradle. [Please see another comment of mine in this thread.](http://www.reddit.com/r/java/comments/1xhjo9/my_modern_take_on_spring_4_mvc_hello_world/cfbnnhx)
You can improve this bit: ArrayList&lt;String&gt; arrList = new ArrayList&lt;String&gt;(); String[] items = {"First", "Second", "Third", "Forth", "Fifth"}; arrList.addAll(Arrays.asList(items)); Using: List&lt;String&gt; arrList = Arrays.asList(items); 
&gt;Concurrency is for responsiveness, not performance. Who told you that? Concurrency is fantastic for performance; it's why people bother building clusters in the first place. Do you think Dell will sell you a 24-core server so that you can have 23 super-snappy GUI threads? That seems like a very questionable statement. Also, this problem is *way* too low level to involve Hadoop, and it's a moot point anyway since KD Trees beat the code examples I posted. I'm really just asking a question about the behavior of the JVM under specific circumstances, not asking how best to solve kNN. 
Check out the section "this is all about speed right". http://www.javaworld.com/article/2078605/java-concurrency/modern-threading--a-java-concurrency-primer.html 
I have updated the tutorial with JavaConfig also. I have outlined both approaches in this update. The tutorial now has WebInitializer and @Configuration approach as well. 
Yes, the bumper sticker version of the section is very compelling, but the author does elaborate a bit on why multithreading is useful: &gt;A computationally-intense application could make better use of multicore hosts. This might be the case for someone rendering complex graphics or simulating an involved scientific model. I was just about to email the CUDA and OpenCL developers and tell them that they could all go home because concurrency is only for responsiveness, but maybe I won't now. Making a statement like that without all the caveats that the author of that article gives is borderline misinformation; I've been employing concurrency to speed up computational models for years. 
Why are you creating your own threads? Pass a Runnable/Callable to an Executor. I'm sure the mystery will clear itself up once you clean up that mess of code into digestable chunks. A function call is not going to kill your performance and might even speed it up.
You need to consider "Concurrency" in the context in which Java defines it. Simply farming things out to multiple threads/cores will not give you a performance boost. You will see a decrease in performance. You have to consider what resources are being concurrently worked on and how to manage thread access to those. When one thread is working on a resource, all other threads are effectively blocked while that resource is in use. You should stop down voting me, I'm trying to help you.
Agreed. If OP wants an example of this style, I wrote a multi-threaded webserver in Java back in 2007 that uses it. http://www.gully.org/~mackys/jws/ (JWS.java)
You're right. My last post was harshly worded and I do appreciate you taking the time to type out a response. 
Ok, then hatchet buried. I copied your code into my environment and I'm going to take a look at what your are trying to do. I have some ideas but I want to see their affect before I start saying things. 
I've used ThreadPoolExecutors in the past when I thought that work for threads would arrive asynchronously or have varying difficulty. Do they have some sort of fundamental advantage over the approach I used in the example? 
Unfortunately it doesn't seem to be linked anymore :( It's just gone, even though the direct link still works.
Whoever developed this bot can go fuck off
Ahem... the Javadocs were already linked in the very first comment by me. **Edit** only that I used the proper reddit linkstyle. (The comment was one hour before /u/Carr0t mentioned the same thing) Totally agree to the rest of your post.
It qualifies you for +10 on irony that nobody seemed to get here...
JSP is a view technology. It should be very static, as the horrors of scriptlets proved. JSP doesn't have anything to do with when the data is loaded. That is up to the backend, in how the controller is implemented. If the backend delivers all the data in a JSP when the page is first loaded, that's fine. But a JSP can host Javascript which makes an AJAX call to load data asynchronously, and taking the results of another JSP and replacing parts of the original. I'm really not a fan of Thymeleaf. I liked the idea of "designer-friendly" templates and drank the kool-aid, but I find JSTL a lot more convenient. This is also why I hated Facelets at first and was attracted to the Wicket approach, but again, I found the Facelet tags a lot more convenient. To each their own, of course.
Yes, should be: generator.nextInt(10000) To get a number 0 &lt;= n &lt;= 9999 generator.nextInt(9998)+1 gives you 0 &lt; n &lt; 9999 
Wow! Please some examples?
So far I'm seeing some Java's concurrency overhead. Try implementing a custom Threadpool executor like this guy is doing: http://www.javacodegeeks.com/2013/03/my-custom-thread-pool-executor-in-java.html You mentioned Graphics so I looked up some of the threading in JOGL https://github.com/sgothel/jogl/blob/master/src/jogl/classes/jogamp/opengl/GLWorkerThread.java Also try using volatile instead of statics. I've been refactoring a lot of old legacy concurrent code but I haven't seen exactly your situation. I think you can get some performance by using a custom threadpool executor and using the volatile keyword for some of your values. Threading generates some overhead so anywhere you can pick up performance would be a good thing. Maybe you could use AtomicInteger for startIndex and stopIndex? I think you can get away from local buffering for false sharing by using volatile and/or atomicInteger.
I had the same problem. I don't have a CS degree and I was able to do it with a couple tutorials I Googled. Something using a program called pacifist for opening packages and moving files around. Pretty easy. 
Check over at the /r/Javahelp wiki - plenty of resources there.
This very complicated. I am going to say it is unnecessarily complicated. You have stuck a bunch of static references and then used multiple instances of an object, your NNWorker, that is referencing the static objects. If there is static data you are working with, put it somewhere, not in instance objects. From the sounds of your problem, you are blocking on synchronization/waiting. I have an example Ill add in a last paragraph. There is no way for me to figure out where you are blocking because of the way you have written the program. The way you are using a CyclicBarrier in this nested static fashion is very confusing. Consider using a ExecutorCompletionService...similar to an ExecutorService but it will let you grab jobs in the order they finish. My example is, I was using Math.random and it appeared all of my cores were working overtime, but I was not seeing a performance increase. It turns out Math.random creates a synchronized version of java.util.Random. So while the threads appeared to be working they were all waiting to get random numbers.
I enivitably figured it out, about the else if statements, but thank you so much
How many (good) websites do you see using it? :)
Hehe, good point. Although, I will say that the excellent weight-loss site Lose It uses GWT, and I believe Amazon Web Services uses GWT for their administrative console.
I love recursions, anything even simple as counting down to zero is awesome to me with recursions
I'm currently preparing for the OCA as well. Getting that book was a good call :) it should get you where you need to be. Maybe lay hands off eclipse for now, try to do your exercises manually. If you want to practice examns, which I would recommend for any examn ever, lookup enthuware.com. Good luck!
I don't really have much of interesting examples (and I'm not allowed to divulge much either), but I can tell you that Java ties in to several back end and core systems around the world. Also, many enterprise applications (used for internal stuff) are Java-based as well. Another example that is more specific: I used to work for a company that built IT infrastructure for air traffic control towers (you know, the big tower you see at airports), and their entire integrated infrastructure was Java-based. I know of several international airports that run safely and securely thanks to those Java systems. So it has absolutely been useful to a lot of people. :)
I'll try some of this out, thanks. 
My example was to show that even if you are blocking it might appear to be working, even with a profiler. My issue with using the CyclicBarrier is that you have nested blocking calls to it. I understand if the tasks take a similar amount of time they shouldn't be blocking long to finish, but that can change when threads start to lag because the os is doing other things. Also hyperthreaded looks like 8 but is actually only four logical cores. 
3.5x is about what I saw too. I didn't try `time`, but the calculations in the process itself reported 0.22s/query with threads=1, and 0.06s/s with threads=8 (4 cores w/ hyperthreading)
Java Weight Game Library? What :p
I certainly think GWT is viable, and actively used. It is also now a fully open-sourced project controlled by a community, rather than strictly by Google. Community participation has gone up hugely since this was done. I went to the GWT Create conference this past December, and attendence was good. One thing that was very very clear about GWT as a technology is that Google themselves depends on it for a very large number of applications, both internal and external. Couple examples - Adwords is GWT. And the recent new version of their "spreadsheet" app is a GWT app which features a calculation engine that can run as either client-side or server-side code, so when you run the spreadsheet in offline mode, even on a phone, it's using the exact same calculation engine code as it would use when calculating server-side. Anyway, Google themselves is highly dependent on this technology, so it isn't going away any time soon. As for marketability, I don't see GWT as a hinderance. It's not like you use GWT to the exclusion of any/other marketable technologies; quite the contrary: * you still need to be a Java developer, and Java is arguably THE most marketable technical skill of all. * since you're still making web apps, you still need to be well versed in things like css and html * if your app needs to talk to a database, you still need skills like JDBC or JPA or Hibernate or JOOQ or any of a gazillion frameworks that talk to databases. * if your server-side code needs to scale, you're probably using a variety of enterprise-y technologies like Spring or JMS or EJB or god only knows what. So although I do use GWT for my client-side application technology, I'd hardly portray myself as a purely "GWT developer". I don't think there is such a thing. GWT is just a clever compiler that translates my Java client GUI to JavaScript. It's just one tool in the toolchest. **edit** also, there is a [forum for GWT jobs](https://groups.google.com/forum/#!forum/google-web-toolkit-employment). Enjoy. 
Thinking in java is also a very good book which covers in depth of all the topics of core java.
Insightful reply. Thanks!
Google Groups, the new Google docs Sheets app, Google Flights, both Blogger and Play admin, of course AdWords... But aside from those, many GWT apps are designed for internal use, and aren't publicly available. They also tend to be large, complex apps, so not something you just generally just stumble into - and if you do, it isn't always obvious at a glance (except something like the AWS admin, using some default GWT styling). My recent favorite non-obviously made with GWT app: http://bombermine.clay.io/ (I'm biased of course, as a mod for /r/gwt and member of the GWT steering committee)
Why would you do this instead of objects?
You could possibly use Double.parseDouble(String) which throws a NumberFormatException if the String can not be parsed to a Double. You could catch the Exception and react accordingly. http://docs.oracle.com/javase/7/docs/api/java/lang/Double.html#parseDouble(java.lang.String)
This question is how flamewars in /r/java start. The most popular options today are the following: * JSF + Primefaces - JSF is the standard, and Primefaces provides lots of components making web application development a lot easier * Spring Web MVC - the one you read about, use this if you want a Rails-like experience * Play! Framework (version 2) - the one a lot of people talk about, use this if you want a more Node.js-like experience Which is the "best" will depend on your particular preferences.
Enthuware is good as has already been mentioned, just don't over practice on them as you will be learning the answers rather than the topic. The exam is pretty tough if you have not done anything like that before. You really have to think like the compiler and you will get caught out of lots of little syntax mistakes that, in the real world, you would notice either via your IDE or when you run javac. So read, practice and study a lot, go over the practice exam with a fine comb, then read, practice, and study some more
One other thing to add for the JSF pile is [Omnifaces](https://code.google.com/p/omnifaces/) - it cuts down on the amount of boilerplate code required. And make sure you use a modern version of JSF (if that's the route you choose to go down), as the older version were hideous.
I am a python engineer, and but have programming java/j2ee for 10 years. I can honestly say that python makes web development(django, twistd, flask) a lot easier. I would be reluctant to use JAVA again for web (other than application server/layer). That being said, I used spring mvc and thought it was pretty decent to develop apps. Grails, Play are good for CRUD apps, too. 
Thought about the Regex first, but then decided against it because parseDouble is more flexible.
If your business app uses double to hold money values, try this: public class Go { public static void main(String[] args) { double total = 0.0; for (int i = 0; i &lt; 1000; i++) { total += 0.01; } System.out.println(total); } } See if it prints out the value you expect. You will want to use BigDecimal instead. 
If you're restricting yourself to two decimal places, you're better off holding the data in cents instead. You'll only need `BigDecimal` if you really need to handle fractions of a cent, e.g. in financial applications (and even there it's common to use integer values scaled to a predefined "resolution").
Not sure why you're being downvoted. OP is coming across as a complete tool with that last post.
Formally known as JBoss AS ;)
My favorite is definitely main() - kinda hard to have a functioning program without it.
JBoss 7.1.1 was the newest freeware version, right? 
JSF being "the standard" has only served to further spur more web frameworks and fragmentation. It has been a disaster for Java Web. Oh sure, maybe the 12th iteration is barely tolerable, but do you REALLY think this clunker will keep up: - Websockets - local storage - single-page js apps - HTML5 You know, maybe in about five years.
Big in the insurance industry too.
No, I'm using 7.1.3.Final.
No, ALL JBoss releases are free. ALL JBoss releases are LGPL and this license is *very* specific about the freedom granted. JBoss 7.1.1 was an early beta release. In the 7.x line JBoss EAP 6.2 is the latest FREE release. In the 8.x line WildFly cr1 is the latest FREE release.
Depends what you're doing with the prices. If you're just holding them, or accumulating them, etc, then you can scale to a fixed precision (which can like be assumed for a specific app). But, if you're calculating what a price should be (not what it is), then you use double. Example: given that the last trade on a stock happened a X, calculate the optimal price of 2000 options contracts given a certain pricing model.
Is the company you worked for heavily invested in Java technology? And do they have a staff of largely (or solely) Java developers? If the company is moving away from GWT, are they also then moving away from a heavy Java investment (or did they not have one in the first place)? Because this is where the big value of GWT lies. I work in a shop with dozens of Java programmers, all of whom were initially well versed in either Swing or JSF UI development, both of which are all Java based. But Swing technology doesn't work in a browser, and JSF... well it just sucked. We create large applications with very large UI's, consisting of dozens or hundreds of screens, containing complicated forms, tables, and crazy widgets, drag-and-drop stuff, complicated validation rules, etc. Thesse UI's are very much like desktop-PC applications, not simple web-1.0 "page turners". Being able to develop apps like this, in Java, using Java tools like Eclipse and its interactive debugger, this is the perfect fit for an organization like ours, and it's really where GWT thrives. Our productivity with GWT webapps is at least 5-fold over JSF. While a lot of these new web frameworks like Angular and Node and Bootstrap might be trendy and cool and let you write slick sexy webapps, they are not based on the Java language, they do not employ the Java toolset, and they do not readily make use of Java developer talent. JavaScript is a different language, it's a different world; the moment you start trying to write large GUI applications in JavaScript, no matter what framework you choose -- and this is just my opinion, for what it's worth -- good luck buddy. So maybe GWT hype is over, maybe the value of one codebase running well on all browsers is not as big of a problem as it once was (as it was back when IE6 ruled the world... *shudder*). But there is still absolutley a very important place for GWT technology, and it's not going away any time soon.
Yes, absolutely. There's still great benefits to using it, and not just because you get to use Java end to end. One of the main benefits is the GWT compiler itself, which will generate very optimized and fast javascript, almost certainly faster than anything you would end writing yourself (that's not to say you couldn't, but you probably won't). GWT has probably drop in popularity, for sure, but for a SPA, it's my go to choice and after writing several SPAs of various size, I've yet to be disappointed. 
Fortunately, we have long, and so the FED can continue some years printing billions of dollars a month, and we can still hold dollars up to 1/10000 cent precision.
PrimeFaces is pretty hot, at least in the Java community ;) Outside Java, e.g. in /r/programming everything that even smells like Java (including GWT, Wicket, you name it) is bad and evil and ...
JSF is a way bloated framework. I agree with you. 
Don't write your own CSV parser. Just use SuperCSV. http://supercsv.sourceforge.net/
Not going to miss PermGen at all
Until Oracle gets its head out of its ass regarding installation and updates (especially on Windows), it's a pretty tough sell (especially given how many people associate Java on the desktop with Java applets, regardless of the inaccuracy). It's almost unreal how badly they've handled it, to the point that most of our clients would immediately dismiss us if we suggested using it (at least, not with Oracle's JVM - we can get away with using an embeddable JVM, but it's not as feature rich or performant).
This is the primary use that I've seen (well, and Android). All the problems with Java applets and Oracle installer bullshit is irrelevant when we're talking about server applications. And beyond Java itself, there are other JVM languages with their own set of uses, such as Clojure, Groovy, and Scala. 
Java on a web app server is very powerful. Java on a desktop GUI app, not so much IMO.
You could try using a server web framework that generates HTML/CSS/js, but I think a more future thinking approach is to use a JS framework to handle the web stuff, and use java to create a RESTful services layer for business logic. I like Mule ESB as a way to expose java backed web services in enterprise production systems. 
For those of you who have moved to Gradle, jacoco is available as a built-in plugin - just apply the plug in, and the coverage report will be generated when you run the jacoco task.
In addition to Mockito, there's also PowerMock, which allows you to go even further with mock objects. I'd normally recommend only using regular Mockito to avoid bad habits, but for legacy code bases you aren't allowed to refractor it's a valid option.
Every Applet programmer out there just died a little inside.
I think your results may become somewhat interesting if you ask for the current value (or sum). I would like to have seen other hardware counters captured by the perf tool, showing store buffers being flushed, cache lines ping ponging, ...
I'm learning Java... yay! 
One quick way to speed up your multithreaded impl would be to use thread local randoms variables (if you are using java 7 of course). A quick google of thread local variable should show you what I'm talking about.
We're abondoning it in favor of straight jquery/bootstrap/JavaScript/HTML 
We use GWT at work for a middle sized business application and personally I think it's the right toolkit if you're developing a standalone application because as a Java guy I like to have my Fancy Java architecture with patterns and shit :p But generally speaking, If I want to know if a technology is dying or not, I checkout the release frequency. http://www.gwtproject.org/versions.html
&gt;Every Applet programmer out there just died a little inside. Good.
I thought google cut a bunch of the gwt devs loose?
I thought about this too, but his or her benchmark does not include the random number generation part of the algorithm.
Any idea how GWT generated javascript compares to closure generated javascript? Performance wise.
http://www.jboss.org/jbossas/downloads/ JBoss AS 7.1.1.Final is the last release online over there, where did you geht 7.1.3?
Ok thx. I downloaded the newest Eclipse (Luna) with the newest JBOSS Tools, under the server panel I still only get JBOSS 7.1 (and WildFly 8.0!) can I use JBoss tools with the EAP Release?
Try [this](http://stackoverflow.com/questions/13536667/how-to-install-java-jdk-7-on-snow-leopard)
Yeah i didn't get that either. He probably means it is nuclear-level hot, so you should stay away from it for a couple decades more until it cools off and becomes useable :)
7.1.3 is really old as well. The latest is 7.3.0! Note on the top of the list it says next to EAP 6.2: *EAP built from AS 7.3* Those releases have to be build from source though.
ah ok, never build one myself. Is it hard or complicated? I think you have to update hibernate libs etc. still by yourself
I haven't tried Luna, but with Kepler the answer is yes. The EAP servers are listed under "JBoss Enterprise Middleware" when you add a new server. Note that the separation is artificial. EAP is the exact same thing bit for bit as the corresponding AS release. The rename is pure for branding and marketing reasons.
You don't *have* to update anything yourself just to get the thing build, but you can if you want of course. The source on github builds automatically, you don't have to change or configure anything there. But they stopped publishing the source on Github after some version. The newer source is available from their FTP site at ftp://ftp.redhat.com/redhat/jbeap and from their download page. Note that when you download the source from their download page at http://www.jboss.org/jbossas/downloads/ it says you need to enter into a subscription and that the source is restricted, but this is incorrect. I reported this a long time ago and they acknowledged it's by mistake. The LGPL is VERY, VERY, VERY explicit about not allowing any such restrictions. Of course Red Hat 'conveniently' keeps forgetting to correct this mistake. The problem with the source from the FTP site is that it's slightly obfuscated. You need to de-obfuscate it in order to get it build. If you know what you're doing it's not difficult and a few places have ready to use build scripts for the thing. Also see the following for some addition details: http://henk53.wordpress.com/2013/01/09/the-curious-case-of-jboss-as-7-1-2-and-7-1-3 
I like the Math-nextUp(). Although I rarely use it, it shows how differently machine numbers are spaced in different parts of the number line.
You are in the wrong subreddit. What you need help with is **JavaScript** not **Java**. These are two completely different languages that only share a similar name and similar syntax. Better post on /r/javascript 
Tips 1 and 4 are really useful. Something I've had to put up with many a time, but didin't know a good solution to.
&gt; Our productivity with GWT webapps is at least 5-fold over JSF. Funny, we had the reverse experience. Changed from GWT to a modern Java EE 7 stack with JSF 2.2, PrimeFaces 4 and OmniFaces 1.7. Now are productivity is over 5 times as big. Last Sprint we were already done with all the UI work in the midst of a sprint. This never happened before with GWT!
Do NOT do this at home. Applets accessing databases is a really bad idea. Anything at all accessing databases except for the business layer backend of your application is a bad idea. If you have an applet that needs data from the database, write an HTTP layer that the applet can talk through. What's more, make sure the HTTP layer is running on the same server that served up the applet otherwise you'll get into a whole world of security pain with the applet loader in browsers. On top of that - I don't see any comments, I do see some badly names variables - both the ones with single letter names, and the ones using hungarian notation, you're using wildcard imports - which makes it difficult to find where particular imports are used, and you appear to be switching on the label of the buttons to work out what to do, which will fall apart the instant you consider i18n.
&gt;JSF/Primefaces? hot? A big yes to that! Look at devrates.com and many other places that have surveys about Java frameworks. Or check stackoverflow, indeed.com etc. JSF/PrimeFaces/OmniFaces is pretty popular everywhere. Depending on your shop Spring MVC is used a lot as well, but all other Java frameworks have a much lower number of users.
I'm not saying it's not used, i'm just saying it's not that used at least in the internetzzz. Of course Google had to use it, right? :) That being said, i have developed an internal GWT application while working for a big GPS company. It has its merits, but i don't think it will ever compete with other (faster to prototype) frameworks out there :)
Like everything, i'm sure they could replace it with a small Perl script :)
7.1.3.Final, despite its name, isn't the final :X It's merely a tag on Github that was never an actual release. The actual release is 7.1.3-redhat-4, but that one didn't appear on Github.
&gt; and JSF... well it just sucked. What version did you use? 1.1 or 1.2? Try 2.2 or even 2.1/2.0 and you'll notice a SIGNIFICANT difference! ;)
I read this a year ago or so. Thank you for that text, it really helped us to understand the relation between eap and the open source variant. When we updated from 5.1 to first 7.1 and then 7.2 (before production). I don't remember everything exactly but we finally settled on 7.2 and deployed on that. We had a discussion yesterday when we were trying to figure out the deal with wildfly. We also saw that the source was gone from github. We basically decided to wait and see what happens. We got this https://github.com/jbossas/jboss-as/archive/7.2.0.Final.zip built and deployed it. It is now gone af course So, in advance, sorry for being slow: &gt; JBoss EAP 6.2 is the latest FREE release. Are you saying that ftp://ftp.redhat.com/redhat/jbeap/6.2.0/en/source/ is 7.3 and can be deployed for free? &gt; it says you need to enter into a subscription and that the source is restricted, but this is incorrect. I reported this a long time ago and they acknowledged it's by mistake. ~~Do you have some link where Red Hat acknowledge this, it is not that I don't believe you, I just want to stop any further discussions mainly with the in-house IT department.~~ I guess that this covers it: &gt; However Rich Sharples remarks: &gt; Right now we do not have a way of making EAP easily buildable for the general public (nor does the L-GPL or GPL require us to) For building 7.2, I found, at least, 2 descriptions: * https://github.com/jboss-developer/jboss-eap-boms * https://github.com/hasalex/eap-build Anyone you recommend? Finally, have you upgraded anything from 7.x to wildfly? I couldn't find much written about it? Many thanks in advance for any answers! 
Sadly, I wish I could say 7.1.3 is considered "REALLY old" in our organization! I have noticed that there are new tagged versions in Github, but haven't thought much about them. We are looking to jump from JBoss 7.1.3 to Wildfly 8.0.0 on JDK 8 as soon as they are both released.
I really love their latest new features such as [superdevmode](https://www.youtube.com/watch?v=huIouTIJ_5k) which is very productive. I actually was converted back to GWT after wandering in JavaScript world because of bad experience with old version of GWT. Now it's waaaay better, it's not just a toolkit anymore, it's a full fledge and productive framework. Based on my experience, project build with it is very maintenable compared to any complex JavaScript project I've seen so far. Building a mobile app is also a snap, and you can actually produce very performant JavaScript code with the compiler(necessary for mobile webapp). GWT committee also put mobile support as one of the main key point on their development roadmap, which I think is very good decision consider this is the only field that GWT can gain better recognition than other JS Framework. This slides may interest you: http://www.slideshare.net/kebernet/gwt-is-smarter-than-you/ GWT is also very scalable: http://blog.websitesframeworks.com/2013/03/web-frameworks-benchmarks-192/ 
It's actually depends on the application design. If you're building something transactional or enterprise stuff that require a lot of server side session, JSF 2 + Omnifaces or Spring WebFlow + Thymeleaf is more productive than GWT. However, nothing beats GWT If you're building something like detached single page RIA, games (Angry Bird Chrome is made with GWT), Cross platform HTML 5 mobile app (not mobile web), or high traffic public web application (see Evernote web). Couldn't imagine building these kind of apps using something with too much abstraction like JSF2/Omnifaces because it will bite you in the end. Just my highly subjective 0.02 worth of opinion... :)
If I'm not mistaken, Spring MVC still remain the most popular framework in Java community. They're also improving a lot with Spring 4, Spring boot, Thymeleaf, Spring loaded, etc... Grails is also very popular, although it is basically just Spring MVC wrapped in Groovy. 
I've done similar things like you last time and my team regret it especially during maintenance phase.... complex JavaScript app is just complex... and very hard to maintain. Now with the new iteration of GWT, we try to convert back some of our module slowly, luckily now they have something like [superdevmode](https://www.youtube.com/watch?v=huIouTIJ_5k) which make the process very productive.
I agree with you about Spring. It was on top for a very long time. I do not think it is the most popular choice for new development though. Grails is talked about a lot on tech forums but in the real world it is not very widely used.
I have worked on converting one of our applications to Wildfly 8.0.0.CR1 on Java 8 from JBoss 7.1.3. It was fairly painless to make the conversion. As per usual, things continue to get more strict with each new version. As long as you still aren't on EJB2, it shouldn't be too hard.
 JSF has dramatically cut my development time and allowed me to develop a rich front end with little work. I am not really sure what you are trying to say with your list. I can tell you JSF is compatible with HTML5. 
It would be nice if you could implement this: https://github.com/krasa/krasa-jaxb-tools/issues/17 
Mockito is a nice framework and I use it in some of our legacy JUnits if we need mocking, but Groovy and Spock are much better for new tests IMO https://code.google.com/p/spock/wiki/GettingStarted
Ok, We were just discussing if we should go from 7.2 -&gt; 7.3 or 7.2 -&gt; wildfly. We did the (painful) EJB3 upgrade last year. I'll probably give both a shot and see.
You mean the Oracle website is a bit sluggish? wikis.oracle.com itself? Which one is "that website" otherwise?
Okay, maybe it depends on the company. The support is not just for actually being able to ask questions, but about responsibilities and coverage as well. Many somewhat bigger companies have policies about this. In short it's a "cover your ass" policy. The fact that you can actually ask a question and get it answered is a nice bonus then. But it depends, some companies may really ask a lot of questions so for them that part is really important too. And sometimes you may need to have a patch specifically developed for you. Depending on your knowledge you can often do that yourself too (we often patch JBoss ourselves), but if you don't have the knowledge it can be a live saver to have them do it for you. It's kind of an insurancy policy then. Maybe nothing happens for 10 years, so does anyone of us need any insurance? Can you afford the risk that IF something goes wrong you may not have the means or knowledge to fix it? Many companies calculate the risk vs cost and to lower the risk just buy support. Maybe they'll never need it, but again that's what insurance is about ;) Finally, we're all developers here and all need to have an income. If you're making good money based on JBoss it's good karma to give something back, isn't it? 
It was 1.2. The JSF ship has sailed though, at my company, we're all-in with GWT and pretty happy with it. I am curious though what they did to JSF to make it so much better. We tried to use RichFaces to get AJAX-y UI widgets, but it was just a nightmare, hardly anything worked, and the bits that did work were sluggish as hell. Browser incompatibility problems abounded too.
&gt;It was 1.2. Thought so ;) But seriously, this is where all the confusion comes from. Some people are very enthousiastic about JSF and then other people just don't understand that since they hate it. But in nearly all cases, the first group started working with 2.0 at least, and the latter group didn't ever looked passed 1.2. What did they do... a lot really. For 2.0 it's said that the team just assembled all "I hate JSF blogs" that were floating around and addressed almost everything. Big things are that JSF used to have its kind of own model were everything was a post and there weren't really URLs in the app (you had to maintain navigation rules such that the actual URLs were invisible to your code). This completely changed in 2.0. You just use URLs there and there is full support for GET next to POST. You don't ever have to touch the navigation rules again. The well known web pattern PRG (Post Redirect Get) is now a best practice and has perfect support at all stages. Another big critism was the heavy use of session state. JSF 1.x was incredibly dumb here and stored hundreds if not thousands of constants in there. JSF 2.0 uses so called partial state saving, which means it only stores the differences. On top of that JSF 2.1 (Mojarra) and JSF 2.2 (all versions) have a stateless mode as wel. With partial state saving the session size is reduced from maybe a MB to several K or less for the majority of cases. There's much more, but one other major thing was the adopting the Facelets templating language (which was externally created by an open source developer). This works so much better than JSP for jSF, which was a very ill conceived match. Oh, and Facelets also enabled a very easy creation of custom components, which was a pain in JSF 1.x as well. Then almost at the same time the now immensely popular PrimeFaces came about, which greatly popularized JSF as well. PrimeFaces had an easier job though, since it started on a more modern foundation where e.g. AJAX support was build in (RichFaces had a ton of legacy in it for having to work on the shitty 1.1 version of JSF). Then a bit after that the popular OmniFaces library came about, which is to JSF what Guave is to Java. So these things together; a strong foundation with the idiotic limitations removed, a world class component library and a very handy utility library where sort of the tipping point that made JSF (IMHO) from total failure to winner.
Actually, starting back in GWT 2.5, they introduced an [option to actually use the Google Closure compiler on GWT-created JavaScript](http://www.sencha.com/blog/using-the-gwt-compiler-for-better-builds). It's one of the interesting properties of these "trans-piler" languages like GWT (converts Java-&gt;JavaScript) or ClojureScript (converts Clojure-&gt;JavaScript), where the compiler can be made to generate JavaScript code that fully conforms to Closure's needs, which then can be used to super-optimise the application. Simply by having that high-level language transformation, you often end up with apps that are faster and smaller than hand-coded JavaScript. Even without using Closure, GWT's generated javascript performance is quite outstanding. The "business apps" we create with it all feel very snappy and responsive. But the performance of it is even good enough to legitimately use for videogames. Some years ago, the [Java-port of Quake](http://code.google.com/p/quake2-gwt-port/) was compiled with GWT, and with a little hackery they got it talking to WebGL, and you could play full-blown 3D quake in a browser, and it ran plenty fast.
JSF 1.2 was not good to put it nicely. JSF 2.0 is fantastic. I really wish they had changed the name because there are a lot of people like yourself who had a bad experience. It is almost funny that anytime you find someone who does not like JSF they were using version 1. 
&gt; other websites might not have the capability to scale like oracle in term of money or skills or both But those websites aren't run by Oracle! It's only a wiki on the Oracle site that lists them. It's a diverse range of sites. Big companies, small startups, government sites... &gt;http://blog.websitesframeworks.com/2013/03/web-frameworks-benchmarks-192/ Well, check this one; http://www.jsfcentral.com/articles/understanding_jsf_performance_3.html JSF is one of the best performing Java frameworks and consumes less memory. &gt;but the trend for public website is to move those component to client side, According to who is that a trend? It's "popular" when you only frequent the blogosphere and then specifically /r/programming and hackernews. It's far less popular in the real world. &gt;This might not be the case for the Enterprise App Small startups run on Java EE just as well. There are plenty of free servers, that are open source, lightweight and which strartup in a second or less. 
What is your timeframe for upgrading? If it is imminent, I'd go with 7.3. If you can wait a couple of months, I'd go with Wildfly 8. We still have a few applications to upgrade to EJB3… I can only hope for the day that I don't have to look at or think about XDoclet.
&gt; Well, we aren't making any money. I see. You're probably better off without the support contract then. You have to have money before you can give some of it away.
I have updated my original post with the annotations based configuration. http://javahash.com/spring-4-mvc-hello-world-tutorial-full-example/
I really like Spring and have been using it for a few years now. The changes from 2.5 to where it is now (4.0) are incredible. Spring has done a good job adopting web sockets, removing extraneous xml, and playing nicely with gradle (build system). Check out the guides on spring.io, it should give you a few sample projects to poke around in to see if it is right for you, since starting on Spring 3 years ago, I haven't seen any valid reason to switch to anything else.
Check the wiki over at /r/javahelp there are plenty of resources listed.
I do not know if there is a best for every scenario. Personally I find JSF with PrimeFaces to work well. Check out the demo to get an idea of how easy it is to work with. It has code samples for everything. There is great support in terms of forum and books. The User guide is also great. http://primefaces.org/ 
No problem, actually, I wish that they had Java ;)
Sure. I'll try it
What are "Stripped Implementations"? I didn't quite understand from the article what they are.
~~Part f the effort in the new JVM is to modularize the core so only the essential, selected parts actually get loaded into memory.~~ Stripped here probably means "selected ~~modules~~ parts of the JVM/JDK" as opposed to the whole JDK as one big piece, which is the only option today EDIT - modularization is a separate effort as pointed out by /u/AnAirMagic below
Build tools are all capable. Maven is great if you like it and usable if you dont.
I was a little bit disappointed that an article named “Effective Mockito” turned out to be “Configuring Eclipse for Beginners.” :(
If only you asked for c++
Its possible to modify the 10.7 .pkg (with a tool such as Package Maker) to allow installation on 10.6.8
So like a JDK lite that didn't have all functionality of the full Java SE spec?
In that case, you're doing it wrong. What you did was basically freelancing for a pittance. I assume it took you 10 minutes writing the code in question. This means you made an hourly wage of 1.50€ - not exactly six figures. And while freelancing may be your best bet to gain such an income, it's also fraught with monetary uncertainty and risk. Plus, you need to be good at finding and keeping customers, next to the job you're doing. TL;DR: You've got a long way, grasshopper.
Yea, that's what I imagine is what they mean. Why have an XML parser, a web server, etc, if your app does not use them? Or a better example: Swing. If your app does not use it, why have all those megabytes in the package? see also: http://openjdk.java.net/projects/jigsaw/doc/jdk-modularization.html 
You should not kill a process on OOM, especially not with SIGKILL. Processes will take care of themselves when encountering OOM. Drop the kill -9 and you get the heap dumps.
This is great news - I was just writing some code that can now make use of streaming with the new version. :-) Thanks to all POI developers out there.
You could try to get a full heap dump (may take some time) and go through that with JVisualVM. -XX:+HeapDumpOnOutOfMemoryError is your friend.
&gt; I think I will go straight to EAP 6.2 from 7.1.1 because compiling sources is to much work. Do note that if you download the binary for EAP 6.2 from JBoss (e.g. at jboss.org/jbossas/downloads) then you can only do so by entering into a subscription. Even though the subscription is free, when you enter into this *you* promise not to use it in production. If you don't want to enter into this subscription and don't want to make a promise to Red Hat, then you really have to compile the sources yourself.
&gt;I have noticed that there are new tagged versions in Github, but haven't thought much about them. Remember that JBoss only puts ALPHA and BETA versions on Github! For some reason they have yet to disclose they don't put any of the code that comes after the last BETA on Github. Or maybe it is on Github, but in a private repository. Once they have made a release, the source is made available as a zipped archive only. You can put this into your local git repo and then you see can see the diffs against the last version they did put up on Github publicly, but you thus can't get the source of the FINAL/stable versions from Github.
http://oreilly.com/catalog/javanut/excerpt/index.html http://en.wikipedia.org/wiki/Comparison_of_Java_and_C%2B%2B 
ah ok, thank you again for your help. This stuff gets kind of confusing for me. I found this: https://github.com/jbossas/jboss-as/releases What would you recommend? Compiling EAP 6.2 from source for replacing our old 7.1.1 server? I really have to ask the management to get the enterprise version of jboss because this licensing stuff shouldn't really be "my" thing. ftp://ftp.redhat.com/redhat/jbeap/6.2.0/en/source/ this would be the newest JBoss version right "before" wildfly, right? 
Yeah, I got the heap dump via that mechanism. Couldn't get it working at first (fucking oracle docs have a -, not a + in front). Was hoping for a way to get a jstack though.
&gt; Anyone you recommend? I would recommend https://github.com/hasalex/eap-build &gt;Finally, have you upgraded anything from 7.x to wildfly? I couldn't find much written about it? It's a bit early days, but I'm sure JBoss and many bloggers will come with such migration guides soon. I think I even saw a few already, mainly about the change from Tomcat in 7.x to Undertow (a totally new Servlet container/Http server) in 8.x, and the fact that Tomcat Valves are only partially supported. Remember that going from AS 7.x to WildFly 8.x is not only about updating between Jboss versions, but also about updating from Java EE 6 to Java EE 7. There are major changes spec wise as well. 
Vaadin is awesome, plain and simple. I've even written some extremely interactive client side modules and compiled them with vaadin. It's so easy it's unbelievable. And the best part is you don't to deal with ridiculous GWT compile times. You compile your client-side module once and you're done unless you have to edit that particular bit of code.
Also keep in mind if you want to be able to use a mock library (like Mockito): * Never make a class final, unless it has only static methods and a private constructor. * Never use final on public methods, with the exception of those which are implementations of interface methods.
I don't get it. How could you build a tool to prevent security exploits without being yourself able to write such faulty code?
My body is ready
Thanks a bunch!
I worked on GWT pre-superdev mode. That, honestly, sucked. It compiles slow and often changes would persist out. The browser plugins were often out of date and inconsistent (chrome didn't always work and the firefox plugin was always for a version or two behind the current version). Couple that with the fact that we used SmartGWT (stay AWAY!) and it was a poor experience all together. That said, I still follow the work on GWT. It looks like google giving up the reins has actually result in some faster development (it had stagnated a bit.) As a result, GWT today may be much better than what I worked with (2.4 and down). A promising alternative to GWT is Dart. It has a java like syntax, very quick "write-&gt;refresh-&gt;observe" cycles (which is very nice) and some pretty good tooling already. The major downside to Dart over GWT is that GWT supports IE7+ whereas Dart only supports IE9+. If that is an issue then Dart may not be good for you. Another promising alternative is Typescript, however, Typescript is a superset of Javascript so all of the code messes possible in Javascript are possible in Typescript.
Wouldn't the rule be "Use interfaces liberally" instead of "don't make classes final". If all your classes take interfaces then mocking becomes breeze and you get the added bonus that inheritance is limited (which is usually a good thing).
Your classes should have more getters than setters (though I agree, don't make them for the heck of it). Also, avoid mutability. State change on fields should be seen as an inherently bug prone and dangerous thing.
Wait, isn't default methods for interfaces making them basically the same as abstract classes all over again?
Sorry, but jigsaw (or modularization) is not Stripped Implementation. Jigsaw is targetted at Java 9 (as in it's all theoretical at this point), but Stripped Implementations are pretty much concerete at this point.
No, generally speaking, you should make sure that your JVM process restarts when encountering an OOM, if you want to keep the correctness guarantees you probably assume for the JDK classes.
I didn't mean to imply that stripped impl = jigsaw. Looks like you are right and they are separate, which I did not realize. However, I did not mean to imply that... Linking to Jigsaw's page was just to demonstrate the breadth of components in the JDK. it looks like stripped impls analyze the codebase and remove things that aren't used, and thus doesn't rely on a module system (Jigsaw) at all. source: http://cr.openjdk.java.net/~mr/se/8/java-se-8-edr-spec.html#s9 (PS - cant wait for jigsaw.. if its done right, it'll be awesome)
Your first time reading offshore outsourced code?
A class can implement multiple interfaces but can only extend one subclass, so no.
Method references AKA first-class functions. Finally no more of this anonymous inner class bullshit.
So they're basically circumventing the restriction on multiple inheritance that has been in the language since its inception.
Okay, but this is an artificial restriction to avoid situation where we inherit more than one implementation of the same method. Don't default methods introduce the exact same problem?
They do. That's what irks me about this. [According to Wikipedia,][1] Java 8 will throw a compile error if both inherited classes have the same method definition and the subclass doesn't override the method. But then it goes back to the same problem if you have to call a superclass implementation. Which class does `super` represent? Can you pick/cast? Since they're copying Scala, they should have copied the ambiguity resolution too. Scala just picks one. [1]: http://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem
POI is great. Use it a lot for automated xl parsing 
Is it a good idea to start using Java 8 in large projects? When will IDEs like Eclipse support it? These are probably stupid questions, but I haven't been keeping up.
 x -&gt; !.isEmpty() 
&gt; Is it a good idea to start using Java 8 in large projects? Probably not - not yet at least. Java 8 hasn't even been released yet. When it does get released, since it involves several significant changes to the language, it's likely that bugs will be discovered which may take time to be patched. I'd advise waiting until it gets released and seeing how other projects fare with it first.
There's a lot of people whining and complaining about Maven lately. Maven's great. NetBeans + Maven is a dream. Unless you end up having to deal with WebSphere or craziness involving the maven-shade-plugin for a Java SE project, keep enjoying it. There's a reason you're loving it.
Awesome!
Well I had it working. I believe I installed OpenJDK in place of Oracles. 
The heap dump should already tell you a lot about the reason for your OOM error. In the best case, you'll find the problem even without thread stack dumps. Don't forget that with OOM, the source of the error is often not where the error occurred.
What actual List types will be in the last example? Also on the first example, what's r.run() for? Does this construction replace new Thread(runnable).start() ? 
+1, if you want to mock something you own, create an interface for it, use the interface, make the class final unless you intend to inherit from it. This also remove the need to keep all public methods non-final.
No, it's just calling the run() method directly. Not starting a thread.
Then title "Run a Runnable" is misinforming. Because it doesn't run anything. It simply calls method run.
I understand. I mean "Run Runnable" is a confusing title, because it emplies that something will run in a thread. But it simply calls run method. That's all what I'm saying.
I understand, though I'd like to point out, that every Runnable is run in a thread. Even if it runs in the main thread.
This question is far from being answerable. Are you using swing? JavaFX? JOGL? A game engine such as JMonkey? As /u/pizzarox2 mentioned a KeyListener should work if you are using swing. 
Eclipse support is still shaky but manageable. Some more extreme cases of lambda type inference can currently cause stack overflow -- but only when it wouldn't have compiled anyway, from what I've seen. Also, it doesn't seem to currently support generic type inference on method references. When it's feeling civil it simply elicits unnecessary warnings, but half the time it simply won't compile. E.g. You have a list of lists and want to count the elements and you try something like: lists.stream().mapToInt(List::size).sum(); and currently eclipse will simply be annoyed about a raw type. But if you have a stream and want to convert it to an array you might try: stream.toArray(Foo[]::new) which is perfect legal Java 8 code; but, eclipse won't compile it, saying something cryptic like "constructed array Foo[] cannot be assigned to A[] as required in the interface descriptor." It'll compile if you write it like this: stream.toArray(size -&gt; new Foo[size]); So, overall, it's a mixed bag at the moment.
I wouldn't say circumventing. They were basically introduced so you could add new functionality to existing interfaces without breaking binary compatibility. In other words, it allowed them to add lambda-friendly methods like forEach() to Java's Comparable interface without breaking existing impl classes I don't think "default" should be used much by regular programmers although it is a convenience for people who deliver APIs to others. More important for regular programmers is being able to add static methods to interfaces, which gives us Mixins in Java. 
Good advice for projects that are going into production this spring. We'll probably migrate projects to JDK8 this summer assuming it is still going to be released in March. 
I know, that's why I asked the question.
skillxpert's core java basic programming with advanced topics is a basic programming with all concepts.
No, Scala will also give you a compile error if you inherit two methods with the same name and signature, unless one of them already overrides the other. This will work: class CA { def aMethod = "hello" } trait TB extends CA { override def aMethod = "Hello, world!" } class CC extends CA with TB This, however, will not: class CA { def aMethod = "hello" } trait TB { def aMethod = "Hello, world!" } class CC extends CA with TB Where linearization comes into play (i.e. Scala "picks one") is if you inherit multiple overrides, like this: class CA { def aMethod = "hello" } trait TB extends CA { override def aMethod = "Hello, world!" } trait TC extends CA { override def aMethod = "Goodbye, cruel world!" } class CD extends CA with TB with TC In this case, `CD#aMethod` is inherited from `TC` because that one comes last in the `extends` list. If `TB` and `TC` switch places, then `CD#aMethod` will instead be inherited from `TB`.
It comes with native Arquillian connectors ;)
I'd say partially removing. And thank God for that. Lack of full multiple inheritance has been one of the worst limitations of the language over the years.
And? We already see plenty of horrible code without this feature. If you design a language that is idiot-proof, only idiots will want to use it.
I look forward to seeing the Scala compiler take advantage of the new bytecode being introduced to support these features. Having a synthetic `class` file for every single lambda expression kind of sucks for memory usage and `jar` size, and VM-level support for multiple inheritance of method implementations should improve Scala binary compatibility.
Maven is the way to go. I'm pretty sure the Maven complainers are a loud minority.
Well, I think it still generates something akin to an anonymous inner class under the covers, but now we don't have to write the overriding code and boilerplate anymore!
Can't press "Done" button on Firefox 26. "Nästa" button worked though. Dunno what's going on.
True, but it is a risk. Mutability is unavoidable in many case, but it is also avoidable a lot of the time. Developers should choose to go the immutable route whenever possible and realize that the mutable type can be potentially dangerous.
&gt;I think your results may become somewhat interesting if you ask for the current value (or sum). I definitely agree with this – from a brief look at the implementation, it seems like getting the 'sum' for LongAdder could be a tad expensive.
Just think about various constructors. As long as the method signatures differ, it shouldn't be a problem. Most standard Java functions are built to handle different types of parameters, just look in JavaDocs
&gt; Mutability is unavoidable in many case Tell that to a haskell programmer :-) Not that I would go that far, but I think it's not a matter of it being unavoidable. But sometimes it is very hard to figure out a solution using no mutable state and such a solution will be a lot more complex than a solution involving mutable state (Also it will mostly be inferior performance-wise). So its more of a conflict between immutability and simplicity. Whenever this conflict arises, in my opinion the developer should be free to choose simplicity.
So you propose adding a possibly infinite number of functions for every possible type/combination of types? Note that my question was not how to do it so that it compiles (I gave an example of that with call(Object...) already) - I wanted to know if it can be done without warnings.
Warnings are to let you know of potential problems, errors won't let you compile. Casting from an unknown type to a type is always potentially problematic. Your example will compile and run, but you can run into problems at runtime if your casting code receives incompatible types or isn't set up to handle a type it receives. This is precisely why these warnings exist, and why overloaded methods are the right answer here. 
Who knows with Eclipse but IntelliJ already supports it.
Arraylist.get(i) get a you an element at the its index, like array[i] would. You use Arraylist.set(i, e) to set the ith element to e, like array[i] = e, and use ArrayList.add(e) to add element e to the end http://docs.oracle.com/javase/6/docs/api/java/util/ArrayList.html
new Thread( () -&gt; System.out.println("Hello") ).start(); 
For the other methods you could use [grepcode](http://grepcode.com). A merge sort and binary search on lists are part of the JDK java.util.Collections classes. For a bubble sort I would create a swap method, the algorithm itself is so simple that I presume you won't even need to google it.
If it's a method that does nothing? Then it doesn't matter, and this is an exercise in "I don't know how to disable or suppress warnings in my IDE that is trying to help me but can't perform 100% accurate analysis forever all the time". And overloaded methods *will* make the warnings disappear, as what you're wanting (a general works-on-everything) is precisely the problem. You're working in a strongly-typed language, this is the drawback, but you gain safety and performance.
Thanks. :) Anyway, I think the best thing for you would be to contribute to a project which you are actually using, and even better do things that benefits you. That way I created a [bunch of plugins for IntelliJ](http://plugins.jetbrains.com/space/index?pr=idea&amp;lg=meo) and contributed a little bit of code into IntelliJ to support my plugins, and to make my experience more enjoyable.
The "do nothing" method was just an example for the sake of the argument. If you want an example that actually does something, imagine a countObjects method that will count every argument as 1, every array or Collection&lt;?&gt; as the number of its contents plus the contents' sizes (with the same count). Or a method that will append the identity hash of all arguments (and some arbitrary hash for primitives) to an appendable. This method can be implemented without problem in Java, so I'd say it's safe enough. I disagree with the premise that this is a pointless exercise. I know how to suppress warnings in my IDE (though not this specific one). I know that static analysis is here to help me, heck I've even written some static analysis code myself. I also disagree that this is a drawback of strongly typed languages. There are enough languages on the market, even a few on the JVM that have superior type systems compared to Java. But well, you're probably right that there won't be a solution. Because it's a non-problem to most.
Meh, I think Haskell "cheats". They use hand waves and complex notions to delude themselves into "yes everything is immutable, see!", when, in my humble opinion, monads and the like add at least limited mutability without calling it such. Heck the "state monad" practically admits to it in its name. But that is beside the point :) What I've found is that often an immutable construct doesn't add much if any complexity to the system. However, if you have a mutable structure and suddenly decide to throw it into a multi-threaded environment, all hell breaks loose and complexity out of necessity goes through the roof. I get that mutability makes things nice, and I'm ok with that. But I propose that you try to at least limit the scope of mutability unless you have a good reason for it and prefer immutability if it is easy to do. In other words, static variables should be immutable. Class fields should prefer to be immutable. Function parameters should generally not be mutated if you can avoid it, and function variables, meh, it might be nice for them to be immutable in some circumstances but I certainly don't try to do it.
Well considering that it doesn't impact performance or usability in any way, I really didn't see it addressed as a "problem" so much as a "how do I?" question.
Maven's great compared to Ant, yes. It's just that a lot of us think Gradle is even better.
The important difference is that interfaces don't have a state: they don't have fields, they can have only methods. This removes most of the problems with multiple inheritance (ie handling different states). Instead abstract classes can have fields and so you can only derive from one. 
wow cool. 
What if I want declaration of type interface, not actual list?
100% agreed, if you want rapid prototypes, you can get it going faster with plain JS. But if you want a project that is maintainable long term and can actually be readable and understandable 10k-10mlocs, then I would wish you the very best of luck, and the run in the other direction. It can be done - I've been involved in projects with JS experts with ~70klocs (not counting whitespace, comments), but was only just barely maintainable. I've also seen messes of only a few thousand lines written by teams that were not quite as interested in keeping everything perfect, and the bitrot rate was amazing if you weren't actually keeping the whole project in your brain at once.
From https://blogs.oracle.com/javatraining/entry/java_ee_7_survey - &gt;Greetings Java Developers, We have created a short survey that will help us better understand which APIs and Java versions are the most important to you as a Java EE developer. This information will enable us to update our training material and certifications for Java EE 7 to better suit the Java community. If you can, please take the survey located at: https://www.surveymonkey.com/s/JavaEE2014UsageSurvey. &gt;Your answers will remain anonymous, and you won't be contacted by Oracle as a result of answering this survey.
Yes?
/r/androiddev 
I'm not surprised that this exists, but I'm surprised that I didn't know it existed. I had planned to post this on /r/android as well, but this seems much more suited to my needs. Thanks!
Wow.. that's just.. yeah. Don't do that. That is a horrible practice even if you ensure that none of those methods can ever return a null value. This is what they call a "code smell". You can take one look at it, have no clue what it actually does, but you can be sure that it is an indication that the solution in question has not been designed well. 
List&lt;Item&gt; items = .... is a declaration of a parameterized interface type. It can be given any actual list with matching parameters.
 String foo = new StringBuffer() .append("&lt;html&gt;&lt;head&gt;&lt;title&gt;") .append(title) .append("&lt;/title&gt;&lt;/head&gt;") .... .toString() (But that's cheating...)
So what would be the best way to handle something like that? Find one that didn't call so many methods to implement the solution? Or just break the method down into multiple lines? To re-iterate, I'm still relatively new to good coding practices, so please don't kill me :)
Is there a limit to the amount of method chaining that you should do as a best practice? 
probably method decomposition. Consider the following (fake) example: getCustomers(criteria).iterator().next().getName().getFirstName().get(0); Alright, the point of the above is to get the first initial of a particular customer using a given criteria. But this looks like a mess. Time for some refactoring: public Customer getCustomer(Criteria criteria) { return getCustomers(criteria).iterator().next(); } public String getFirstName(Customer customer) { return customer.getName().getFirstName(); } Now you can do: Customer c = getCustomer(criteria); String firstName = getFirstName(c); String firstInitial = firstName.get(0); Much easier to read and debug. Of course, some of those methods probably need rewriting anyway, but that's a good first step.
thank you for posting the solution to this too! Maybe update the title to express that the issue was solved. Cheers!
Take a look at [the Law of Demeter](http://en.wikipedia.org/wiki/Law_of_Demeter) 
Some things are designed to be chained - like StringBuilder.append(), or builders, etc. If methods return `this` then you can do some nice things but you're still working on the same object; no harm, no foul. But class1.getClass2().getClass3().getClass4().doSomething() is an indicator that the caller needs to have "class4" available to it. It shows that the structure is wrong and needs to be redesigned. So it depends - who is actually responsible for doSomething()? Is it legitimately a responsibility of class2? If so, then class2 should internally make the call to the right guy. (Recursively apply this rule of course.) If the methods are only being called to ultimately get to the guy who has the responsibility - the more common case - then it indicates you need to restructure your code so that you can get to class4 (in my above example) directly. 
Sorry, just realized there was a "Java Help". Think we have a lot more really specific reddits than you would think.
In clean code it's called train wreck code. To see why, image smoke coming out of the furthest right parenthesis. I'll just reiterate what has already been stated, don't do it unless there's a very good reason.
Reddit doesn't let me change the title D:
Check out [Android Programming: The Big Nerd Ranch Guide](http://www.bignerdranch.com/book/android_the_big_nerd_ranch_guide). I'm working my way through the book and it targets existing Java developers really well.
If you put too many chained methods your javac may crash with the following error ;) The system is out of resources. Consult the following stack trace for details. java.lang.StackOverflowError at com.sun.tools.javac.comp.Attr.visitApply(Attr.java:1417) at com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1321) 
He speaks slow, I'm watching almost all the videos at 2X.
Nope, no title editing on reddit. I would recommend adding a bold edit note at the top of the post for anyone new coming to the thread. 
I hope Wildfly 8 will stem the decline of the Java EE platform. Unfortunately, Java web development is still no where near as good as other platforms, especially .NET
I am using the serial port access through rxtx with great success, I am not aware of any weird bugs. The code is somewhat obtuse and not as clean as I would like, but other than that very stable and useful 
Did a quick search. Looks like JAX-RS completely hijacks the request pipeline. The string given to application path is a regex. Perhaps try and create a regex that actively denies the .html, .js, .cs, and various image extensions if used in the path. Not sure if that would work but it might be worth a shot. 
That works, thanks for the suggestion
What's the Maven plugin groupId/artifactId?
Not my code, but I [made a post](http://letstalkdata.com/2013/12/method-chaining-gone-wrong/) about a particularly nefarious method chaining I came across in some production code. I usually try to chain only a few obvious methods, something like this: myMap.get("key").doSomething() What's really annoying is when you get a NullPointerException on a chained method.
Jetbrains itself is enough reason java has been useful in our life
I wonder what's the behavior if you run the program from the program launcher if this java game is installed or deployed your laptop is not plugged in. Would Windows shows a warning? Or the app will turn on the needed service manually. 
Also consider messaging a mod to add a "resolved" note. They can't change the title, but they can add a little note.
1. Java 7 is backwards compatible. You will be able to run anything designed for Java 6. (Of course, in a few exceptional cases, incompatibilities may be found. But this is extremely rare, Java is very focused on compatibility.) 2. You get all previous compiler versions with JDK 7. There is a command-line switch to choose the version. (Well, maybe you do not get JDK 1. But you can compile Java 6 with JDK 7 for sure, and Java 5 also.) 3. I don't know Stanford's CS106a. I don't know what errors you get, so I cannot help you. 4. You should be able to use only JDK 7.
I haven't been keeping up, is Jboss = WildFly? Why the different name?
It must be about 10 years ago that I used Java's Serial-Comm/serial port I/O in general. Things might have changed but Serial-Comm was very buggy back then. It doubt this has changed much. There were no other open source (aka free) implementation back then, so I tried [Serialio.com](https://serialio.com/products/applications/custom-prior-software-versions/java-serial-port) and it worked without a breeze. Not bugs/no problems at all. It's commercial though. I suggest try some other free implementations that are around now. Given other people's feedback there seems to be a lot more available now. If none work right for you and you/your company have the money, give serialio a try. Please note I am not affiliated with that company.
To the UPDATE: It's been years since I played with Karel the Robot (I used to teach first-semesters at my university after graduating), and though Java generally aims to be backwards-compatible, some things deprecate over time. Therefore you may get some compiler errors for really old constructs that are no longer part of the language. Try to dial down the Java source version until it compiles leaving the target at 1.7. Or go into the code and fix things that no longer work.
Yeah. JBoss/RedHat has many products now and WildFly is the community version of their application server. The name change was meant to reduce confusion - but it may have the opposite effect. 
Ah was beaten to it. One persons code smell is another's simple to read.
I was going to comment about JOOQ, but was beaten to it by /u/CryptAck From the JOOQ website (http://www.jooq.org/doc/3.2/manual-single-page/#jooq-as-a-standalone-sql-builder): create.select(fieldByName("BOOK","TITLE"), fieldByName("AUTHOR","FIRST_NAME"), fieldByName("AUTHOR","LAST_NAME")) .from(tableByName("BOOK")) .join(tableByName("AUTHOR")) .on(fieldByName("BOOK", "AUTHOR_ID").equal(fieldByName("AUTHOR", "ID"))) .where(fieldByName("BOOK", "PUBLISHED_IN").equal(1948)) .getSQL(); Suggestions on how you would do it if chaining is so evil, because I can read that and understand exactly what it is attempting to accomplish?
Right. As I said, it's not a problem. Thank you for joining the discussion. To sum up. A function taking arbitrary arguments (though will introduce *unchecked* warnings on call with non-object arrays): void call(Object... args); A function taking arbitrary arguments (though will introduce warnings on call with arguments of different types): &lt;T&gt; void call(T... args); If the number of possible array types the function is called with is known, the Object... version can be overloaded adding all the other types. There is no warning-free solution for the general case.
I come across this so often. Great example of a reason to employ the [Null Object pattern](https://en.wikipedia.org/wiki/Null_Object_pattern)!
Thank you again, you have been very helpful! WildyFly 8 is out right now, woooahhuu :)
You should be good just reading through the [Android developers guide](https://developer.android.com/training/index.html). I had never developed anything on a mobile platform before, but was able to get something decent together just with that. I think you're Java knowledge will take you 80% of the way. The rest is understanding the application flow and Android libraries.
It's declaration plus assignment. So I'm curious, what's on the right side of the equals sign? Oh I guess, I understood, it's not the actual syntaxis, right? I mean they just omitted what's on the right side. =) 
Yeah, I'd recommend Android Studio, or IntelliJ 13 (community edition). It tends to do better than Eclipse w/ importing projects. The first import method I'd try w/ IntelliJ is to create a new Project, and then point to where your source actually is. It'll try to write stuff into your AndroidManifest quite likely, although maybe they fixed this. The other approach is to just try the import functionality, that might actually work much better for your use case. Sorry you're stuck w/ what sounds like a pretty awful VCS ;) Would sill be curious to know if you got it working.
Yes. Handling state is the [Kobayashi Maru](http://en.wikipedia.org/wiki/Kobayashi_Maru) test of all functional languages, and haskell just cheats with monads. :-) &gt;I get that mutability makes things nice, and I'm ok with that. Some people [disagree](http://prog21.dadgum.com/189.html). I wholeheartedly support your proposal to prefer immutability if it is easy to do. I just brought up the other side of the coin because I feel that some folks tend to cargo-cult immutability. Therefore I will restate my sentiment: Immutability is a means to an end: It is often helpful in achieving simplicity. But in some rare cases, immutability can be at odds with simplicity. If and only if that is the case, choose the ends, not the means. (Edit: Formatting)
Wrong. This is not the result of method chaining. Note that if you call this.that().andMore().methods() first this.that() is evaluated at which point the stack is rewound to your calling frame, then the andMore() method is called on the *result* of your this.that() call, after which the stack is rewound once more to call the methods() method on the result of your previous call. You will get a StackOverflowError if you have a method calling itself without returning too often, and if you have a method A calling a method B calling ... (insert huge number of methods here) ... calling a method ZZ, at which point the call stack overflows.
I have to second you on this. I've used rxtx extensively in a number of large-scale industrial projects, and I've had no problems that would change my opinion of rxtx.
Enlighten me in this regard please. Why is J2EE 6 that much better than J2EE 5? I've been out of the EE loop for a while, and just recently picked it up again.
While the Arquillian (maven) connectors are really cool, there's also a more traditional maven plugin available. See https://github.com/wildfly/wildfly-maven-plugin
I'm currently using Java Simple Serial Connector (https://github.com/scream3r/java-simple-serial-connector/) for a project of mine to interact with up to 3 RS232 devices at the same time and so far I didn't have any big troubles. I tried using RXTX but quickly ran into deadlocks and unexpected errors with it that jssc doesn't have (using the same functionality). You also don't have to worry about handling different architectures, jssc has that built-in.
I see what you did there.
I'm very much a software noob, and teaching it to myself as a hobby, and I've only just started seeing method chains longer than two or three methods. I saw some extremely long ones once 20+) and couldn't understand what was even happening when i saw the code. Out of pure curiosity, I was curious what the longest method chain you'd seen was.
By far, the best "book" about how to use spring is the reference doc on Spring's website: http://docs.spring.io/spring/docs/4.0.1.RELEASE/spring-framework-reference/htmlsingle/ I wish every library/framework was as well-documented. 
Yes, you can use JBoss Tools with EAP - they are under JBoss Enterprise Middleware" category. 
It is not correct they are the exact same thing. EAP has layered products and patching enabled - that is not in WildFly thus the tools does have to dot things slightly different. But yes, technically they are based on the same things - just not the *exact* same thing.
direct link to his post: http://www.html5gamedevs.com/topic/2734-creating-a-mulitplayer-game-using-html-5-javascript-and-websockets/?p=18370 pretty solid game! i like it.
Yeah exactly, the dots could be replaced by "new ArrayList&lt;&gt;();", or "getItems();", or something else that provides the actual list. It's not important to the example. Personally I can't wait until we upgrade to jdk8 at work and can start using all of this. It's such a big change.
EJBs are more capable and easier to use, JPA2 is easier to use and has a more complete mapping, the inclusion of JAX-WS, JAX-RS, and Servlet 3 makes it easier to create endpoints. Things like Async EJBs and Timers mean less hacks for recurring jobs. Adding interceptors is easy as well. Which brings me to CDI which is the biggest single improvement to my quality of life. Using injection magic has made wiring up web apps (and swapping out components during testing) dead simple. It really has stepped up to be easy to use and configure. I won't say it 100% is better than Spring because of the wealth of code written on Spring. It's getting closer and closer though.
Stepping in; I haven't used the maven plugin referenced above, but with the Arquillian plug-in it pretty much works like that for Arquillian based unit tests. You reference the connector's Maven coordinates in your pom and start your test. Maven will download WildFly if it's not already there, starts it as an embedded server and then deploys the test as a web archive (default) or optionally as an ear. You can also deploy regular wars in the integration testing of Arquillian (see arjan-tijms.blogspot.com/2013/08/testing-jaspic-implementations-using.html) If the Arquillian connector can do this then the other one should as well...
Is this a solution looking for a problem? We are moving a dozen or more JBoss clusters into our enterprise cloud and we have yet to find an insurmountable problem.
There is a vast difference between a well designed fluent interface and just chaining a bunch of methods together. The first is almost its own grammar, the second is a maintenance nightmare. 
logged in as guest. black screen. 
For Android development you can use JDK 7, because it is capable to produce compatible bytecode, but you can't use try-with-resources (because it requires JDK 7 classes), unless you set the minimum Android API level to 19. The JVM is backward compatible, you can run any bytecode generated by previous compilers. There are some exceptions though: &lt;https://gist.github.com/Vorzard/8977780&gt;. The compiler is not backward compatible, unless you use the -target and -source flags with the compiler to produce compatible bytecode for previous JVM versions. That's only the bytecode compatibility. There is also the API compatibility. You can't use a deprecated API with a newer JVM, and you can't use a newer API with a previous JVM, although in many cases you can supply the missing API to remain compatible. 
To be clear, have you extracted the zip file to a new directory and run the eclipse executable from that directory?
Well, I admire your boldness, but no, no one's going to do your homework for fun.
Eh figured id try
That 90's look.
No, I was wondering if it being overwritten would cause it. But I extracted it to my desktop and it didn't work (after the first error occurred) 
Download the **checksums** (MD5, SHA1) of the file you downloaded, and compare them to the actual zip. You can find the checksum files on the download page of Eclipse. A Google query will help you on how to use them.
Here's a hint. Create one data class that holds all the DUI fields and performs the DUI calculations. Create another class that accepts the input values from the user and constructs an instance of the data class to store the input values and generate the output values. This is an example of the model / view / controller architecture, although there's not much of a controller in this assignment. Separating the model and view code makes coding both a lot easier.
Thanks, I will give it a try
I was getring at the look of Swing UI. Your site looks fine.
Head over to java.com or even google java jre and JDK and make sure you have both installed. 
Create an Abstract Engine class with concrete implementations, flavored to taste. And then of course the AbstractEngineFactory which will decide which concrete class to instantiate. That should also be abstract because you might want to use different factory implentations depending on some other factors. Those decisions should of course be made in the concrete implementations of AbstractEngineFactory. Those will, as you can well guess, be instantiated by the AbstractEngineFactoryFactory class. Everything should also implement the iterable interface just in case you ever want to iterate over things. Once you have that all set up, you pretty much just need to XOR the bits and you're golden. If you run out of 1's or 0's, you can just torrent extras. 
You're trying to do everything in one method. Create a data class with fields and methods (notice the plurals). Create another class, completely separate from the data class. Let's call it a view class. Completely separate code. The view class would communicate with the user and the data class would hold the values and do the calculations. Separate your concerns and concentrate on each concern in turn. Divide and conquer. Most importantly, your code shold have many, many, tiny methods. Not one huge main method.
I dont think we`ve covered that type of stuff yet. I extremely new to java and if i do anything out of doubles, floats, if statements, and basic functions then it will look a little odd on my side of things.
It has a different md5 number. It seems whenever I re-download it the md5 changes
JS != Java ... You mean the backend is written in java.
That shouldn't be the case. Md5/checksums stand for file integrity. In short, it tells you if the file is same or not. So if I take a guess, there's something wrong with your Internet connection or the file is not downloading properly. 
http://prntscr.com/2s55vd Why is it giving me this error code?
You should try to describe what parts you're having trouble with. 
http://prntscr.com/2s55vd
from the course number I thought maybe you were at Georgia Tech, but not with that username! :p
Yeaaaa not from tech haha
[Let me Google that for you](https://www.google.com/search?q=java+error+cannot+find+symbol). As you can see from the search results, it means you didn't declare that variable. You did try to declare it, but if you look carefully and compare the name of the variable you declared and the name of the one you're trying to use, you'll see the problem.
Thank you for pointing that out. AS English is not my mother tongue, I may have overlooked some of the finer nuances.
This is not /r/DoMyHomework
So what should I do? 
Could you help me with this: http://prntscr.com/2s5nju
You have a typo in the variable declaration : AlcoholAbosrbedF
Then you should probably compare them some more.
Try to Download the offline installer for the Java version that you want and install from there. If you had a previous Java version installed, uninstall (and also use JavaRA to remove Java completely)
Torrenting is better because it has file-integrity/checksum built in. Try: http://thepiratebay.se/search/eclipse%20java/0/99/0 use utorrent but it's full of adware these days. 
Ok I have it working, just create the BAC_Calculator class and Person class and you're set. Person person = new Person("female", 125, 20, 4, 1); System.out.println(person.getBAC()); System.out.println(person.AmIDrunk()); I didn't implement the user input stuff, but that should be fairly trivial. Oh and the main class is DrunkStuff.java. If you need some example code here you go: package drunkstuff;/** * * @author jensb */public class Person { private final String FEMALE = "FEMALE"; private final String MALE = "MALE"; private final double MINIMUM_AGE = 12; private double numberOfDrinks; private double weight; private double hours; // likely moved private String gender; private double age; private Legality legality; private double legalBAC; private double BAC; private BAC_Calculator calc; public Person(String gender, double weight, double age, double drinks, double hours) { setGender(gender); setWeight(weight); setAge(age); setNumberOfDrinks(drinks); setHoursSinceLastDrink(hours); calc = new BAC_Calculator(this); setBAC(); } private void setGender(String gender) { switch(gender.toUpperCase()) { case FEMALE: this.gender = FEMALE; break; case MALE: this.gender = MALE; break; } } private void setNumberOfDrinks(double drinks) { if (drinks &lt; 0) { drinks = 0; } this.numberOfDrinks = drinks; } private void setHoursSinceLastDrink(double hours) { if (hours &lt; 0) { hours = 0; } this.hours = hours; } private void setWeight(double weight) { if (weight &lt; 0) { weight = 0; } this.weight = weight; } private void setAge(double age) { if (age &lt; MINIMUM_AGE) { age = MINIMUM_AGE; } this.age = age; if (age &lt;= Legality.MINOR.AGE) { this.legality = Legality.MINOR; } else { this.legality = Legality.ADULT; } } public String AmIDrunk() { if (BAC &gt;= legality.getLegalBAC()) { return "yes"; } else { return "no"; } } private void setBAC() { this.BAC = calc.getBAC(); } public double getNumberOfDrinks() { return numberOfDrinks; } public double getBAC() { return BAC; } public double getWeight() { return weight; } public String getGender() { return gender; } public double getAge() { return age; } public double getLegalBAC() { return legalBAC; } public double getHoursSinceFirstDrink() { return hours; } private enum Legality { MINOR (20, 0.02), ADULT (21, 0.08); private final double AGE; private final double LEGAL_BAC; Legality(double AGE, double LEGAL_BAC) { this.AGE = AGE; this.LEGAL_BAC = LEGAL_BAC; } public double getLegalBAC() { return LEGAL_BAC; } }}package drunkstuff;/** * * @author jensb */public class BAC_Calculator { private Person person; private double BAC; private DistributionRatio ratio; BAC_Calculator(Person person) { this.person = person; this.BAC = (alcoholAbsorbed() - alcoholMetabolized()); } public double getBAC() { return BAC; } private double alcoholAbsorbed() { double numberOfDrinks = person.getNumberOfDrinks(); double weight = person.getWeight(); if (person.getGender().equals(DistributionRatio.MALE.getGender())) { ratio = DistributionRatio.MALE; } else { ratio = DistributionRatio.FEMALE; } return (3.701 * numberOfDrinks) / (weight * ratio.getRatio()); } private double alcoholMetabolized() { return 0.015 * person.getHoursSinceFirstDrink(); } private enum DistributionRatio { MALE ("MALE", 0.73), FEMALE ("FEMALE", 0.66); String gender; double ratio; DistributionRatio(String gender, double ratio) { this.gender = gender; this.ratio = ratio; } String getGender() { return gender; } double getRatio() { return ratio; } }}
If it was written in GWT, then indeed it is java which is then compiled to javascript. 
the important point is **written** in Java. https://en.wikipedia.org/wiki/Google_Web_Toolkit &gt; Google Web Toolkit (GWT /ˈɡwɪt/) is an open source set of tools that allows web developers to create and maintain complex JavaScript front-end applications in Java. Other than a few native libraries, everything is Java source that can be built on any supported platform with the included GWT Ant build files. It is licensed under the Apache License version 2.0.[1] 
Since when does that mean he can't get some decent help though? 
I agree, it is the implementation of the chaining that makes it good or bad. Simply saying chaining is bad, is itself bad, which is what the parent said. Without context, and with a junior developer raising this question, how do I know that they just simply don't understand SQL?
&gt; just not the exact same thing. True, there's the 0.01% difference. A part of that consists of bug fixes, a part of that is some added features. The patching system is a good example, but that one just got included upstream. The other way around happens too. Features that are in the unstable (AS/WildFly) branch are removed for the EAP releases. So yes, indeed you are right there is *some* difference and it should have been a little bit more clear, but the similarities are much, much bigger than everyone typically thinks. 
I've often impressed with how well netbeans works out of the box. For maven built projects my experience is that netbeans integrates with maven far better than ecplise. The m2e plugin seems to be at times at odds with ecplises background compiling. 
I kind of posted that as a joke because writing your own code and understanding it is essential to doing well in a class, but since I'm getting downvoted anyways here you go https://github.com/jensbodal/DrunkStuff. I'm learning too and I didn't have any homework to work on so gave this a go. I don't know how useful this will be though if you're in an entry level class and this is your second assignment, but good luck.
If you can't do your comp sci homework maybe go into another profession more suited to your intellect - like toilet cleaner or something.
I find that unnecessary intermediary variables make code less legible.
Well all technologies should be measured by current capacity when discussed this way, Otherwise everything new would suck since nobody is running it? I actually don't understand why you mentioned that at all. Whatever point you were trying to make this is probably the wrong place... We don't use JSF to abstract away all html, css, and javascript anymore. When you use a js widget for a rich input (say calendar) we use one from a JSF library (please look at his provided example again). 
Just check if N mod 100 is less than 50, N-(N mod 100) if yes, same thing plus 100 if not. Decide what you wanna do with numbers that end with 50
I agree. The issue is that Eclipse keeps using its own native project structure (which I heard somewhere is based on something *extremely* old), and somehow overlays the Maven structure on top of it, or next to it or some other unholy combination. Eclipse (m2e) also doesn't run Maven, but in interprets the pom.xml file like Maven would (or rather, like it thinks Maven would). This works to some degree as the project structure is pretty well documented, but fails when using any number of Maven plug-ins that Eclipse doesn't have a.. uhm plug-in for. Netbeans however doesn't have such a structure of its own and doesn't interpret the pom.xml itself, but just uses Maven directly. 
Thanks, I will download it 
Round 12.34567 to 3 significant digits with: new BigDecimal(12.34567).round(new MathContext(3)) This yields 12.3, the initial value rounded to 3 significant digits. If you wanted to round only the fractional part then split 12.34567 into its whole and fractional parts (12 and .34567), apply the above to the fractional part only (to get .345) and add back the whole.
&gt; JSF has been around for 10 years, if it was a bad framework, it will easily get lost in the jungle of web frameworks of Java. Just like Windows has demonstrated its perfection through its worldwide adoption, right?
He's a friend and we're both working on the same project. We don't need help so much with the conversion itself, but with getting the number that is produced (which changes based on user input) to be applied to every outcome. Does that make sense? http://pastebin.com/DtHJiAvT
JSF has been around for 10 years and the plethora of Java web frameworks is evidence of its failure. The fact that it's been around 10 years is due to the fact that it was created by Sun and has been maintained and hyped by Oracle. The most recent version may be fantastic but most developers got a nasty taste in their mouths from previous versions and have never bothered to go back. 
Introduce an unnecessary vendor and vendor lock to fix a non-problem? Move from an open JDK to a closed one with no track record? This proposal is best put to people who don't understand the solution area or market.
I LOVE elasticsearch. It freed me from the hell that is Solr's clunky config (no offense solr devs!)
That makes sense, really. Though I am surprised that code does not already exist for orbital formulas in a runtime environment. Ok...well I'm not talking about java Java. I'm talking about java applet stuff. Visual. Same thing?
Ok, here's the awesome bit: If you write your game using LibGDX, it automagically makes desktop, android, and HTML5 (using GWT) versions of your game for deployment. Pretty awesome stuff. It can do iOS too, but you need a Mac, so it'll cost you.
Interesting article...but these names. Wow. 
This is pretty much what I edned up doing. I built a quick method to rearrange the String to the format that java.sql.Date needs. public String sqlDate(String javaDate) { String[] date= new String[3]; date = javaDate.split("-"); return date[2] + "-" + date[0] + "-" + date[1]; }
You'll still have to write Java backend code, no matter what your front end looks like. Also, do people still write/use applets these days?
Dunno. You would probably be a better person to ask than I.
This game is so awesome I can't even see it. no scroll bar for me to see half the screen.
https://www.google.com/search?q=java+tutorial&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official
It seems over and over JSF's biggest critics have only tried a very old version or not tried it at all. Meanwhile the vast majority who try modern JSF love it. I have saved an enormous amount of time by using it. I would hate to go back to debugging and writing tons of JavaScript like the old days. I used to spend the vast majority of my time on the front end and mainting state. Now I spend most on my time on business logic as I should be. Thankfully the job market is showing more and more JSF projects despite some loud protesters on the internet.
you are thinking of Percentage as a character sequence you can directly modify, by adding extra characters at the beginning. That would be a String. But Percentage is not a String, its a double. You could convert it to a String, and then modify the result. Or, if you want to use math, you could divide by 100 (e.g. 20/100 =&gt; .2) and then convert the result to a String.
That's interesting. Although one reason to use a Lambda is for in-built parallel execution. If it only looks like a lambda, but is really in old form then this benefit is lost. I'll have to check it out. Perhaps it indicates it in some way.
Can't your SQL server accept strings for dates? The ones I've used can, so I just do something like: String sqlDate = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("dd-MM-yyyy").parse(startDate)); ... and pass sqlDate to the parametrized query. Like konrad mentioned, lowercase 'mm' is for minutes, and uppercase 'MM' is for month, so I think that's where your problem was. 
This worked. Thanks for the help! 
Having to use double quotes and only double quotes for declaring Strings which means the double quotes within the string have to be escaped with backslash(\) which makes them look really ugly.
after just finishing my first week of java, it seems importing libraries from c++ is difficult
I use Java all the time. I like using it, but I do have a laundry list of annoyances: - No easy way to instantiate new ArrayList/HashMaps (I do know about Arrays.asList, which does help) - SO MUCH FILE IO. - Requiring a constructor to be explicitly defined in a subclass. - @SuppressWarnings("unchecked") - Lack of a string joiner. AKA one of the most needed functions in any program. 
What browser are you using? 
what's your browser?
No lambdas or higher order functions
True. Now is the era of powerful client written in powerful JS Framework (Angular, Backbone, Ember, etc...) or something that compile to JS (GWT, TypeScript, Dart, Objective-J, etc...). The project will be more scalable and manageable that way. http://blog.websitesframeworks.com/2013/03/web-frameworks-benchmarks-192/ However, JSF may still have its advantages when you're dealing with enterprise app which required heavy transaction/flow mechanism and server-side session. I especially like combining JSF 2 + Spring Webflow for this kind of app. JSF 2 may also be good for kind of website that display tons of data and form on several pages (typical enterprise app). For other thing, I normally wouldn't want to touch JSF.
Just a guess, are you using OS X? Applications need to be signed with a special certificate to run on Lion and above and Eclipse isn't. You can get around this by going into System Preferences &gt; Security and allowing all apps temporarily.
NIO 2 + Automatic Resource Management in Java 7 is pretty good actually!
I'm surprised no one has mentioned checked exceptions. I find it absolutely terrible when you have duplicate try catch blocks just to get past interface methods not throwing exceptions. (I mean seriously Thread.sleep, I don't care what you throw just sleep!)
Having to write getters and setters all the time. Drives me nuts, especially after switching to and from the C# .NET runtime.