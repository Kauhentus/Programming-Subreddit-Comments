Yeah the usual vote down with no reply. You microsofties are so pathetic.
Yup! I've made a few game engines with AWT, it's perfectly fast enough for tons and tons of sprites, and has awesome things like antialiasing and offscreen buffers and alpha and different image formats and junk. (I remember making games in Visual Basic 5/6... at least it had BitBlt...)
I would second this- if I wanted to do as you do, Slick would be my goto.
I teach with this book and I cannot recommend it highly enough! It has a broad range of topics and great depth. It is kind of expensive though.
So are a lot of other programming books that aren't worth the paper they are printed on. Dietal and Dietal actually make books that are good as text books, not just good as programming books.
I mentioned the price because OP wants free resources. 
While Effective Java is a standard (I've got a copy right here), it assumes a working knowledge of Java. Not really a book for a beginner. 
When you start wanting to practice, try http://codingbat.com/java It has coding exercises that begin very easy and get progressively harder. Also has explanations about basic syntax and language use. It won't teach you anything about architecture or software design, but it's good for practicing syntax and basics. 
It can be done, but it isn't the best tool for the purpose (unless you like reinventing the wheel)
I tried using Swing to make a shoot em up. It worked fine in Linux but lagged in Windows... I suggest Slick2D too, I'm using it right now and it's super easy to use.
datatables plugin for jquery http://www.datatables.net/
Nice! I figured this would be the most common response. It is a shame jQuery does not have a nice demo library with code samples set up but I guess it is not hard to find examples. The site you linked seems to be more PHP based but here are some simple tutorials with Java back end. (Note I have not had a chance to run these but they are at least good to get an idea on what needs to be done.) http://www.programming-free.com/2013/02/gridview-in-java-using-jquery-datatable.html#.UXlOXErq2VE http://www.codeproject.com/Articles/359750/jQuery-DataTables-in-Java-Web-Applications
Java2D (the Graphics2D class) would suffice for small 2d games. I recommend LibGDX and learning OpenGL
I'm not attached to it in any way. I know it's possible to make games in there and I wasn't sure of any other ways. But now I'm going to look into JavaFX and slick.
You may be interested in the Youtube channel [TheCherno](http://www.youtube.com/user/TheChernoProject) which has a series where the guy is making a game from scratch and walking through it line by line only using the standard library. It's definitely possible and it can definitely be a good learning experience if you're into learning how to make the wheel before you use it but others have suggested other alternatives.
While you can certainly make games with Swing/AWT, I think you're going to be fighting an uphill battle most of the time. I'd recommend checking out the Lightweight Java Game Library (lwjgl). Minecraft uses the lwjgl, so it is definitely powerful, and from my experience it seems fairly easy and straightforward. [Link to lwjgl](http://www.lwjgl.org/)
[Dojo dgrid](http://dojofoundation.org/packages/dgrid/).
This is a daft question, by far the slowest parts of this code are the calls to random, the string creation and call to system.out. 
yes they still do
Minecraft is done with LWJGL - a game-orientated Java binding of OpenGL.
I second JavaFX. I've found it to be very nice, so far. WAY better than Java2D/AWT
I have a quick question about JavaFX. Say I were to make something in there, would I be able to run it on any computer?
Not much reason to use something like Tomcat when there is Jetty, JBoss7, Glassfish....
Mocks are such a waste of time...
For a servlet container ... Why not?
From the first line of [the wikipedia page of JavaFX](https://en.wikipedia.org/wiki/JavaFX): &gt;The current release has support for desktop computers and web browsers on Windows, Linux, and Mac OS X.
Just curious, what would be the point? How often are you recompiling code to make it an actual bottleneck for your workflow?
Android development.
I'm curious what are the use cases nowadays for Application Servers. (Do people really use EJB3.0 and all the whiz-bang GlassFish offers, for example?)
I've used Swing for some testing of 2D games before, and the performance is not great honestly. JavaFX is much better, being that it seems to use the GPU better. But for a real game engine, you'll want to look into Slick and LWJGL OpenGL. If I were to make a game, and believe me after finals I will be, I would use LWJGL. Keep in mind though, the learning curve is pretty high for OpenGL. BUT it's cool to use OpenGL, because the Java methods are direct translations of the C methods. That means that you can learn basic C++ and start creating games in that right away with the same syntax. **EDIT:** When I created games with Swing, I was not doing it in a good way at all. I had learned from a Mexican guy on YouTube who really did not know what he was doing. I was taught that creating JPanels with sprites in them was the way to go (which it obviously is not). Overriding the paint methods should get you just fine performance, but definitely look into JavaFX still instead. And by the way, rule of thumb is not to use AWT. AWT is very much platform dependent. 
Good luck! 
Well why use Jetty when there is Tomcat? There are arguments for and against both. In many cases it really doesn't matter which one is selected.
Thanks!
You're making an MMO-Style game in a language you're a newbie in?
My thoughts exactly. May I ask what languages you know? If you know any C/C#/C++ I'd suggest that, I don't get why anyone develops games in Java. However I am excited to see the release, the game sounds very interesting and you have it well planned out. I hope it works out for you. Keep us updated! 
I appreciate the criticism. I should have stated that I will progress through Java in stages. Alpha will be single player, beta will be Co-op, and the release will be MMO-Style. Hopefully by release time I will be more skilled in Java. Edit: Came off to harsh.
I looked at C#, did not really like it. I really only know Java, and am only looking at java for now. I might move on the C/C#/C++ after this release. The reason I am using Java is that I am not looking for the graphics side of things, I am looking for the game play, and Java seems to be what I want to use for that. I do not really know why, but it just is. I can not wait for the release either, and I will keep you up to date as we progress through the development stages.
&gt;I don't get why anyone develops games in Java. As somebody who made a game in java for a class, I feel this way too. The only good thing was I rewrote it in C++ over a summer and Learned a lot about C++ optimization. I also mastered the art of Java optimization - Use something else.
Yeah fair call. 
The [Oracle Java EE 6 documentation of JPA](http://docs.oracle.com/javaee/6/tutorial/doc/bnbpy.html) does the job for me, even if it is a little dry. &gt; What I am looking for is how to configure JDBC without the persistence.xml. I would like to configure JDBC for various databases programtically. The closest I can thing of for this would be having different persistence units in your persistence.xml - you can then specify which unit a PersistenceContext is pointing to via the [unitName argument on the @PersistenceContext annotation](http://docs.oracle.com/javaee/6/api/javax/persistence/PersistenceContext.html). If that's not suitable is looks like it is possible to [create your own EntityManager](http://stackoverflow.com/questions/7646361/openjpa-creating-entitymanager-in-code-without-persistence-xml-with-properties) ([including the openjpa.MetaDataFactory parameter](http://stackoverflow.com/questions/7646361/openjpa-creating-entitymanager-in-code-without-persistence-xml-with-properties#answer-7646924)), but going down that route doesn't strike me as a particularly pleasant solution. 
you've read bad Perl then. I agree, its biggest shortcoming is TMTOWTDI, but this can be worked around by enforcing strict code standards (forced perlcritic and perltidy, for example). I don't think Perl is well suited to enterprise apps but well written MODERN Perl is great for smaller tasks. Don't blanket dismiss it because you've only dealt with bad programmers.
I actually have a folder with Swing and LWJGL link saved so I don't forget them. After doing some research last night I think I'm settled on these for now. I've got a good few months off after my exam and a friend who also wants to make a game so it's going to be a project between us. I would learn c++ but since I'm using Java right through uni I figured I'd put the majority of my coding time into it so I could make my life easier. I do fully intend to learn c++ likely during my year in industry. Thank you for the advice!
I think I have settled on lwjgl and slick at the moment. 
I see EJB 3.1 (not 3.0) and CDI being used a lot and nary a Spring Bean in sight.
But how many people use a pure Servlet container and nothing else? There are still people who think all they need is a Servlet container and then stuff their WEB-INF/lib with 200MB of hundreds of jar files.
Java lack of structs (amongst other things) makes it a bad choice for making games compared to C#, and C# and Java's speed are (as you probably know) inferior to C/C++. May I ask why you didn't like C#? It's pretty much just Java but more modern...
I've both Spring and EJB (3.0). Thanks IBM.
I can and have tested it I just thought that other people's opinions would be good to see what can be improved and bugs I did not think of
Thanks for this. I was not aware of this feature but I think I can use it.
What is wrong with that? The alternative is that another folder has 200mb of jar files. Is there something in the servlet spec that should limit the size of WEB-INF/lib?
You're doing scanning of annotations for every jar again, and they scan each other as well. If they other folder (the AS) has them, they're part of the system class loaders, and they won't try to scan each other. In TomEE and friends, everything integrates better too. CDI annotations can be applied to EJB beans, with Bean Validation annotations and the result can be injected into a Servlet. If size of deployed apps wouldn't matter, we would only deploy OS images to bare virtual machines (like XEN), which included everything (OS, JVM, etc)... 
Whoah, Java is NOT slower than C or C++ unless you are a horrible coder and never catch resource leaks or anything else. The same code (Well, ported over obviously) in C++ and Java ran with less than a 0.1% difference in speed when I tested it, and that was likely just statistical error. True, Java used to be extremely slow, but now it is a lot faster because they updated it and improved it vastly. Check out *Killer Game Programming in Java*'s intro chapter which basically uproots every myth against Java game development. Also, with C++, C#, etc. you would have to make changes to the code so that it works on different OSes than the one you built it on (NOTE: Not sure WHAT changes, but I know that you do for high-level programs) but with well-written Java it's all one program that runs on any system with Java installed. Oh, and before you go fighting against java on r/java, please do us all a favor and make a throwaway account so that people don't hate on you. If you want to see a great, hugely popular game written in Java, look at Miencraft. Clearly, Java does work for making games. Perhaps its low resolution helps it run well, but the same is true for any game in any language. One last thing, I am not saying that C++, C, C#, etc. are bad for making games. I am just saying that Java is not necessarily worse than those languages. By the way, I can't say anything about "structs" because I don't know what they are. Mind telling me?
People develop games in Java for a couple of reasons, not the least of which being its cross-platform portability. If you write the code well, you can just take the same .jar file and instantly use it on any platform you want. Also, despite what people seem to believe, Java is just about as fast as C and its family. It was indeed slower in the beginning, but they keep updating Java to make it faster and better.
Have you tried emailing the author of the plugin, Sing Li? His email address is in the article that you linked to. You might also be interested in [Battlefield Java](http://battlefieldjava.sourceforge.net/) which is based on CodeRuler.
There are so many free and *legal* resources for learning both Java and Python that there's really no good reason to pirate books about them. Side note: you're kind of an ass if you pirate computer books anyway. Most computer book authors make very little money from them as it is.
Oh i know I'm an ass for it. I have a friend that wrote a Python book and one that wrote a very popular rails book. I don't do it anymore as I am not a student anymore and can afford them. That was long ago when times were tough.
&gt;Can you explain about the annotation scanning? Isn't that a CDI feature? Yes, so your CDI implementation in WEB-INF lib scans your application and the 200MB of other jars in WEB-INF/lib. Then you may also use JPA, or just Hibernate natively, and it too will scan your application and the same 200MB of other jars in WEB-INF/lib. Then you may use JSF, and it too will scan your application and the same 200MB of other jars in WEB-INF/lib. Etc etc. There will be a lot of redundant annotation scanning. &gt;People who don't use CDI and friends can put jars in the application server but we choose not to because of the flexibility it gives. Then either your process or office politics is wrong, or your architecture. If your organization has a grumpy old operations guy who doesn't let you touch The Server (meaning the AS here), then you have another problem. &gt;It is possible to use different versions of dependencies in different applications if necessary. Maybe you shouldn't run completely different applications on a single JVM/AS? &gt;We deploy OS images in virtual machines all the time. So do 90% of IT departments out there. I have no clue what your last paragraph means. Do you package each individual application (say a single 500k CRUD app) as an OS image?
Well, firstly, let me preface this by saying that I'm talking strictly about the languages in the context of game development. Another caveat is that for an indie (non triple-AAA) game, Java is fine. So's C#. Also, one of the great things about Java/C# is that they're so easy to use. A game engine built in C++ with a high level C# or Java wrapper would be the way I would go, to make the actual game logic programming fun and easy. :) Anyway... When I say that Java and C#'s speed are inferior, I'm talking not about processing speed or so. I'm certain that all three languages (and more) can calculate arithmetic, allocate memory, and other stuff at the same speed. The biggest advantage C++ has (in this context) is its lack of garbage collection. No matter how hard you try, GC is always gonna get you at some point with Java/C#. I do accept that a well-designed engine with as little memory allocation as possible (using re-usable buffers etc.) can help, but all the stuff in the background (deep in the Java/C# core) is gonna catch up with you eventually. (Also, if you're going to circumvent the garbage collector, is Java/C# the right language to use anyway?) A second reason would be the JIT compilation in either language, but that only occurs the first time you hit a function, so that's not too bad. A third reason is that any native boundary crossing in Java (and C#, but not as drastically) requires a flip from a managed to an unmanaged environment- and this hurts the JRE. Times when you do this are numerous, e.g. sending vertex buffers to the graphics card, getting direct input from the OS... Finally (and maybe most important after all) is that Java lacks some language features that are well suited for games programming... One example that I mentioned before was the C# structs... These are basically user defined primitives that are allocated on the stack. This is important because not only is stack allocation and deallocation faster than heap allocation; they also require no garbage collection, AND, they are value types, so assigning one Vector2 to another copies the value, rather than the reference. Compare this with allocating everything on the heap, and you get a large performance advantage. Otherwise, the lack of things like unions and (non-type-erased) generics/templates make C# and C++ faster on a language level (especially template metaprogramming). Both C# and Java also give every class a virtual method table, which slows down function calling. Callbacks in Java are also slow when compared to method pointers/delegates. Just on the side, I also find C#'s better support for reflection and expression trees/delegates are very helpful in network comms and serializing data. P.S. I'm not hating on Java. I use it every day at work. It's the only OO language that's cross platform, and the new defender methods that are coming in #8 look awesome. I'm just saying that C# is a more modern language, and C++ allows a programmer to make faster, albeit less safe, routines.
I haven't been on reddit the past week because I've been studying for finals. Also, I only code in Java, so I was just curious why you said C# was inferior because I know very little about it. Calm down guy, I didn't downvote you.
Heh, I'll have to talk with the other dev, but if you want to help, I'm sure you can!
Does it support embedding in Jetty 9?
&gt; But how many people use a pure Servlet container and nothing else? Every new JVM development project I'm currently involved with, auditing, or otherwise aware through contacts. And that's the correct architectural choice in the 2013-2015 time frame.
We have none of the problems you mention. We don't use CDI so we don't have annotation problems. We don't have process or office politics that cause us any problems. We are very happy with our development process. The only grumpy old guy is you. We run lots of apps on a single JVM and have no problems with it. No, we don't write 500k CRUD apps. We don't deploy them as an OS image. I am just pointing out your FUD. It is perfectly fine to put jars in the WEB-INF/lib folder instead of in the application server. The servlet spec says it is OK so we are completely within the standard by doing so. 
Really? You are programming with pure Servlets only? With embedding HTML in `out.write` statements? Really?
&gt; The servlet spec says it is OK so we are completely within the standard by doing so. It's okay, but please let it be your own utility libs. And just because a spec allows something doesn't necessarily mean you have to go overboard with it.
Good thinking. One thing I would suggest: try inputting each of the three types of data: normal data (expected data), extreme data (expected, but at the limits, i.e. if expected is 0-100, extremes are 0 and 100), and abnormal data (String when int is expected, etc.).
It is my own utility libs. Spring happens to be one of them, which again is completely within the servlet spec. 
Spring is an AS of its own :| Operator overloading is completely within the C++ spec, but that doesn't mean you should overload every possible operator and only use operators instead of functions.
I don't know what you are saying. Please let me know what rules Spring is breaking. Spring extends classes that ship with the JDK. Every Java application extends classes that ship with the JDK. No one can explain to me what the problem with it is other than they like their way of development better. That isn't a problem with Spring. 
never heard of it
Of course not. Sorry, I thought I was talking with a professional, or at least an adult.
You can start with Slick to get the basics but you should know that Slick isn't developed anymore and lacks many features. It is suggested by the developers of Slick that you use [libGDX](http://libgdx.badlogicgames.com/) instead.
&gt;Of course not. But then I do wonder, he specifically said: "But how many people use a pure Servlet container **and nothing else?**" If you use *nothing else*, so not a single extra library, just the Servlet container, how do you maintain your pages? The only other alternative is JSP with embedded scriptlets. Do you use that then? 
Spring is just an alternative application server. It's been called that before. It's not about what's legal, but about what's sane. Java EE is a complete application server as well. The packaging model is slightly different, but not exclusively. Springsource with Tc Server does promote a model as well where all the libraries that make up Spring are already installed outside of the .war, while you can pretty much include every Java EE library (even EJB, and especially CDI, JPA, JSF, etc) inside WEB-INF/lib of a .war and deploy that on Tomcat. In both cases we have something that's effectively an AS. In another thread someone else said: "I'm curious what are the use cases nowadays for Application Servers.". THIS is a stupid question if Spring is presented as the alternative, since Spring is an application server as well, just as it's foolish for Spring fans to think they should be against the concept of "the container", because Spring Core is a container just as well.
http://docs.oracle.com/javase/7/docs/api/java/lang/Class.html
"but about what's sane". Hmm. So now the argument isn't that it isn't following the JSR specs, it is not sane to run Spring. Not going to argue with that one. Just more FUD. 
It's a little unclear what you're asking. It sounds like you're looking for the factory pattern: Given an interface : public interface SmokeBender { public abstract void bend(Smoke smoke); } And some concrete implementations: public class LeftHandedSmokeBender { public void bend(Smoke smoke) { // bend it left } } public class RightHandedSmokeBender { public void bend(Smoke smoke) { // bend it Right } } I think you're asking if you can do something like this: SmokeBender bender = SmokeBenderFactory.createSmokeBender(); where `createSmokeBender` looks something like public SmokeBender createSmokeBender(){ boolean leftHanded = Boolean.getBoolean("user.leftHanded"); if(leftHanded) return new LeftHandedSmokeBender(); else return new RightHandedSmokeBender(); } Sure. There's also more appropriate subreddits for this kind of question. Either /r/javahelp or /r/learnprogramming.
Just to clarify, the key method to use from this class is the newInstance method. Note that if you know all the possible implementing classes at compile time this could be combined into an enum, with the Class as a field for the enum type. Edit: In fact, there's not necessarily any need to use newInstance with the enum approach, seeing as you can (probably, I don't know your exact set up) just return a new instance of the class that implements the interface.
Surprises me that no-one mentioned **GWT**. GWT has support for [Canvas](http://google-web-toolkit.googlecode.com/svn/javadoc/latest/com/google/gwt/canvas/client/Canvas.html) now, which is pretty much all you need. I made Battleships a few years ago in GWT (also had a Swing frontend though, because it was mandated), multi-player support was really easy to implement with GWT's IPC mechanism.
It's about different models. Obviously not everyone likes to stuff an AS into their war, hence the popularity of Java EE. Other people seemingly do like it, so I guess there's a market for both schools. I do object to the practice that stuffing an AS inside a war is done for the sole reason of sneaking AS updates passed operations, management etc. Now management mostly should not forbid those things in the first place and operations should not claim ownership over Java libraries, but if this does happen then it needs to be sorted out instead of "worked around". So if you prefer the Spring model: fine. If you for some reason or the other prefer to put it all in WEB-INF/lib: fine. It wouldn't both be my choice, but who am I? ;) But using Spring as a tool to fool management and operations into thinking they are running "stable" on WebSphere 6 (yuck!) while YOU are running on a totally different AS and by-pass 99% of WebSphere and update that AS weekly by sneaking it into said WEB-INF/lib: not so fine.
From the context, the only reasonable interpretation was "nothing else in the JEE standard." No reasonable adult would have asked, in this discussion, how many develop with ``out.println()``.
http://docs.oracle.com/javase/6/docs/technotes/guides/net/proxies.html http://cntlm.sourceforge.net/ http://www.obdev.at/products/littlesnitch/index.html 
There are some - much more advanced! - tricks you can do with classloaders and reflection to dynamically find classes at runtime. That's how some ides work for their "Find usages of" stuff, and is how spring works for component scanning... (which is also evil and to be avoided without good cause)
https://www.dropbox.com/s/2xfts5isrj4c90i/monitor.jar I'm "TheDoctor", and I'll be coming back on the server in about half an hour.
You keep changing things on me. ~~Not following the Specs~~ ~~Not sane~~ Now, Spring is an application server and I am sneaking updates past operations and management. 1: Spring is not an application server. As I said before, Spring overrides classes that ship with Java just like every one else does. Spring implements the same listener interface and provides servlets, just like everyone else does (yes JSF is a servlet under the cover). If that makes code an application server, then you write application servers also. An Applet must be an application server. Command line app? - must be an application server. 2: I don't know where the hell you decided I was using it to sneak updates past operations and management or where you determined I'm running WebSphere. I'm not. Management is very happy with our technical direction because we meet their needs on time and on budget. Why do you keep posting in thread after thread (when I say you, it is you and others) that Spring should die? Is JEE a cult? Is that why you tell people who you disagree with that they should drink the kool aid? I personally could not care less about your and thesystemx and Akanaka's opinion of my projects. I just still wonder why you feel the need to tell people they are wrong when they disagree with you. You post articles to push your agenda (like the one we are commenting on). That's fine, but then why tell people they are not sane because they choose to do something different? 
Depending on the context, I felt it was almost a trick question really. Someone always feels the need to brag about how a plain servlet container is all they need, but invariably there's a "minor detail" left out, and that's that of course you don't program on just a Servlet container. You stuff 150MB of jars on top of it, making the entire "but we have to be lightweight, and oh dear, GlassFish is so heavy" completely nonsense. Some people even fool themselves, by saying there's no 150MB worth of jars in their project because they use Maven, so there's no 150MB of jars at all :X Now this model may work for you and as said that's fine. But there's something very hypocrite about boasting how a lightweight 8MB Tomcat is all you need, and that GlassFish is so big and evil because it's a whopping 65MB and contains all that stuff that you supposedly don't need, while all the time not running on just that 8MB Tomcat at all, but running on a 158MB thing that probably contains much more unused stuff than your average lightweight Java EE Web Profile server.
No, not really. In Python, you'd do like this: class A: ... class B: ... ... var = random.choice([A, B, C, ...]) # randomly choose one class obj = var() Now obj holds an instance of one of the classes. In Java you have to either use reflection (not really that hard), or suffer through all sorts of indignities with factories and stuff.
&gt;Spring is not an application server. The combined whole of all Spring libs is definitely something that equals an application server. It's just like the old discussion where the container was supposedly evil, until people realized that what Spring does is exactly what a container does. Now even the Spring documentation doesn't hide away from this fact anymore and openly "admits" they are a container. &gt;(yes JSF is a servlet under the cover) No, JSF *is* not a Servlet. There is a Faces Servlet for use in a Servlet Container that kicks off the life-cycle. However, JSF is not tied to Servlet, and is also specified for use in a Portlet Container, and technically in other kinds of containers. One way of the other, depending on what you belief, in Java EE JSF is not put in WEB-INF/lib but is a part of the installed libraries, which was what the entire argument was about wasn't it? It's not that system level functionality can't bootstrap it self via Servlet technology (like e.g. WebSockets does), or in most practical circumstances depend on Servlet (like JSF and to some degree JAX-RS). &gt;I don't know where the hell you decided I was using it to sneak updates past operations and management or where you determined I'm running WebSphere. I didn't. I mentioned that I don't think this would be a good reason to use Spring. From practice I know this often happens, and I guess Springsource has mainly promoted this model not because they thought it was the better model, but because it could be used at the time to undermine the then dominant J2EE servers. I wasn't saying at all that *you* were using Spring for this. &gt;Is JEE a cult? What is JEE??? Is it something Rod Johnson made you believe exists, while in reality there is no such thing as JEE? &gt;I just still wonder why you feel the need to tell people they are wrong when they disagree with you. I think I just said it was fine if you liked Spring for its model? Don't forget that half of the time these kinds of discussions start because someone feels the need to make a snarky remark of what the usage is of EJB or Application Servers. I don't have an "agenda", other than promoting the tech I really like, which is Java in general and Java EE. In this discussion we can both agree on Java I guess, but we differ in opinion on Java EE. That's fine (again). I'm just pointing out some of the fallacies in the arguments Spring fans traditionally use, it's basically a comment such as the one in that other thread: &gt;I'm curious what are the use cases nowadays for Application Servers. (Do people really use EJB3.0 and all the whiz-bang GlassFish offers, for example?) This is the traditional Spring stick. Implicitly the concept of an Application Server is ridiculed (who's using it, what's the need, what are the use cases, ...). Take specifically note of the wording "nowadays", as-if the concept of an AS is something from the past. "Do people *really* use EJB?" (implicitly saying: who's crazy enough to use it), and "whiz-bang" (implicitly saying; there's so much stuff you don't need). Then we come back to the pretense in this thread that supposedly a plain Servlet Container is all you need, and then (as mentioned) it invariably always appears that a plain Servlet Container is NOT all you need, since people are adding those 150MB or whatever amount of jars. And thus we come back to the entire topic of the link I posted; the review of Tomcat and TomEE and the fact that TomEE recognized the common practice: people adding tons of libs to Tomcat. 
&gt;In Java you have to either use reflection (not really that hard), or suffer through all sorts of indignities with factories and stuff. Or you could use an Enum to implement the factory pattern. Simple and clean. 
Without looking into it very closely, this is probably a floating point math precision issue. Multiplying by another factor of 10 fixed it because you increased the precision by a digit. If you wanted to be emo about it, you could take in the input as a string and parse the digits directly and work only in integers. Your "solution" works; however, even if a little hacky. Personally, if this were a real world issue, you'd probably parse in the input as a string and give more precise error messages on user input instead of relying on Scanner to reject non-double values.
kb.nextDouble() *100 = 57.999~ When you cast that value to an int, it turns into 57
Usual retarded tripe from the Python peanut gallery.
After tinkering around with your code, I suspect the problem is with this line: double k = kb.nextDouble()*100; Calculations involving double values can sometimes be somewhat unpredictable. In this case, what is happening is that when 0.58 is multiplied by 100, the result is not 58 - it is 57.99999999999999. When that value is cast into a integer, it is truncated to 57. You should be able to see this in a debugger if you step through your code. If you need to do math involving decimals, it might be better to use java's BigDecimal class. There is a decent write-up on the subject here: [StackExchange - How to resolve a Java Rounding Double issue](http://stackoverflow.com/questions/179427/how-to-resolve-a-java-rounding-double-issue) Alternatively, you could kludge a solution by using math.round to round up prior to casting your double as an integer by changing: int i = (int)k; to int i = (int) Math.round(k);
Never use floating point for variables representing monetary values. http://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency
Pretty awesome actually. So, what does it do?
Surprisingly mediafire handled this pretty well.
Its stable and proven. Also since it has been around there is a lot of support for it. But like I said, there are cases for both. There shouldn't be hate because its good to have choices in the field.
it's not about hate, it's about science.. dispassionately evaluating each product and what scenarios they are best suited for. tomcat is indeed stable and ubiquitous, these are pros, still doesn't rate anywhere near the top of my choices for most scenarios
It is important to point out that this is not a *Java* issue, per se, but an issue with any system that represents floating point decimals in a binary format.
LOL. Stop wasting your time with desktop apps in Java. People hate that.
Your losing! EDIT: Your simulation isn't evil enough. Do a check to see if someone else is going to a place, and if you can beat them, steal that dude. EDIT2: Holy crap the networking in the monitor is weird. Why would you reset the socket so many times? Just keep the connection alive, your already using TCP. All this registering and stuff is weird. EDIT3: Looks like channel is doing most of the parsing work, sigh. messageRecieved returning a message is super odd. Oh well, all I wanted was a console client but [I guess not](http://www.reactiongifs.com/wp-content/uploads/2013/04/obamacry_slow.gif)
http://logging.apache.org/log4j/2.x/manual/async.html#Performance
&gt; Is Java just being dumb? No, it's you. edit: I dodn't want to be mean, but it's kinda true, that the one who is "dumb" here is the one who used floating points for monetary values. ;)
This is for my first CS class in college, so everything is really simple and confined to strict option. Unfortunately, you can only move from location to location, so you can't change directions when you're moving. You also can't see anything that anyone else is doing. One of the main problems people seem to be having with this code is handling escort rejected messages, like when they go to someone's location, only to discover that the person they were wanting isn't there anymore. It's always really sad to see a programmer try for hours to get theirs to work and they are doing fine until someone steals the person they were trying to get, so they just stay at that location, and pout I guess. This program was reset every hour so that people could start fresh or join in later and still have the possibility of winning a prize.
Hi Purdue freshman! Saw this on the video wall earlier today
If that wasn't a joke, please leave that kind of negative bullshit out of here.
If you manage to find an actual error in what I wrote, feel free to point it out.
No, that's not simple. Passing in a class as a parameter, then doing parameter() to instantiate it, now that *is* simple.
I.... WIN! :D http://www.youtube.com/watch?v=nbK-bnMg1Ks
What you probably want is called Dependency Injection. https://code.google.com/p/google-guice/
Pretty cool feat!
What do you recommend I do with Java? I'd like to improve to make my uni life easier and I'm interested in making a game.
It's not a trivial effort to ensure that everyone on your team always locks every statement they should lock - that is, any read used for making decisions about what to write within a transaction. SERIALIZABLE mode simply locks in share mode on every read to be on the safe side, so you don't need it if you're locking correctly.
This has been answered already (floats not for money), otherwise I'd start with my thoughts on what the answer is. But yeah, first year programming student has a error in the output of a program they wrote so it must be the technology that has a problem.... wrong attitude.
The error was using Python.
Just pointing it out.
No it doesn't. It works the same as RAII *on the stack*. And even then it's not exactly the same, but very close. (Thanks to the new Move semantics in C++11). What you can't do with it is the equivalent of allocating an object on the heap, sharing that same object between many different users (via a std::shared_ptr or similar) and having the resources free'd when the last user has gone. I guess it would be possible to re-write std::shared_ptr in Java to achieve the same idea, but it seems like something that could possibly already exist and I just don't know of...
I'm sorry, I'm definitely a newbie about all of this. This is my first cs class after all. What do you mean by source? Do you mean the guidelines we were given? Do you mean my specific algorithm? Or something else? Sorry...
Ok, I don't think this quite as convenient as you might like, but perhaps it does what you need. Consider [Phantom References](http://docs.oracle.com/javase/6/docs/api/java/lang/ref/PhantomReference.html). These will be queued on the ReferenceQueue you specify only when the object they point have *already been garbage collected*. So, the idea is that instead of handing out references to your object that needs to release resources, you instead hand a "handle" that points to your object. You then set up a ReferenceQueue to tell you when no one is referring to the handle any more. Once you know that, you can release the resources and free the real object. 
Because it's a resource other than memory. GC runs when you run out of memory. If you run out of e.g. file descriptors, opening a file throws an exception instead of triggering GC. The JVM has no idea there's there's garbage file descriptors it can close. You can also have this problem with things that invoke native code. If they allocate memory on the system heap, now you have tiny java objects that are using lots of system memory, and the JVM doesn't know that freeing them would free lots of memory.
an alternative is to have an object responsible for the base resources and has the necessary cleanup methods. your object that the rest of the app uses can be used as normal. the regular object is referenced in the queue via a phantom reference. the phantom reference is mapped to the resources object. when the phantom reference is dequeued, you can look up the resources object in the map and use it to free the base resources. that way you don't have to recode the rest of the app to deal with the API change. just curious, i haven't dealt with the reference classes much, but wouldn't it be better for this case to use weak reference instead of a phantom reference?
you're talking about reference counting here, right? There's nothing in java like that, but it would be trivial to create. there's also some generic pool avaiable around such as on [apache commons](http://commons.apache.org/proper/commons-pool/api-1.6/org/apache/commons/pool/impl/GenericObjectPool.html). anyway i don't think you'd need this.
&gt;Passing in a class as a parameter, then doing parameter() to instantiate it, now that is simple. public Object simple(Class&lt;?&gt; clazz) throws Exception { return clazz.newInstance(); }
Your answer: &gt;No, not really. is patently wrong.
Because in this specific case, I'm talking about OpenGL resources. These are a finite resource, can potentially be large and the JVM doesn't understand them for GC purposes. Imagine if you have some large textures stored in your finite video memory, and they don't get cleared until the JVM decides to do a GC - that could be quite a long time if you're not nearing JVM memory limits...
This is probably what will end up being used. I was basically curious if there was some other alternative that made some of this more automatic...
If there existed such a thing as `javax-full.jar`, but it doesn't. Don't confuse this with a couple of libraries with names like that which you might have seen: those contain the interfaces (API) only, not the actual implementation. To be fully Java EE compatible, you would need the JNDI resources as well, so any theoretical `javax-full.jar` would implement that as well. Actually, Jetty already supports JNDI (as does Tomcat). What's exactly the "hussle" with GlassFish then?
This is why I dislike GC languages, despite them often having awesome features. Now that Ive found clReflect Ill probably drift back into C++. 
No, sorry, it was for a class, and it's over now
&gt;The very phrasing of your question makes me think you do not understand class loading well. What makes you think that? I know you can pass the option `-cp`. &gt;Mostly, don't meddle with it. The fact is that a lot of people (including authors teaching Java) set the CLASSPATH. So its existence and usefulness can be debated.
I'm talking about the CLASSPATH variable. Not the system class loader.
Since apparently no one gave you an answer based on enums, OP, here's a suggestion: public interface Whatever { [...] } public enum EnumForWhatever { VALUE_1 { public Whatever instantiate() { return new WhateverImplementation1(); } }, VALUE_2 { public Whatever instantiate() { return new WhateverImplementation2(); } }, [...] VALUE_N { public Whatever instantiate() { return new WhateverImplementationN(); } }; public abstract Whatever instantiate(); Once you have that, you can call the instantiate method from any EnumForWhatever reference, like this: Whatever instance = VALUE_1.instantiate(); Keep in mind that this only makes sense if you are already dealing with enums, or if you want to avoid the performance overhead and unnecessary additional checked exceptions of the [newInstance](http://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#newInstance(\)) method.
It is reliable, easy, flexible and still exists because it's extremely useful. I like it, 99% of the time you don't need to set it (maybe in a script, manifest or whatever) but just like I need the ability to install programs into specific folders and drives, sometimes I need to split my app up in slightly unconventional ways. Short of having it scan all my drives or requiring everything to be on the system path ( or creating some other unique list with similar functionality) I don't think there is a better solution out there. Unless I have completely misinterpreted your question, I think the classpath is an excellent feature of Java.
They want to gauge how much you know you don't know. They want to see whether you are an overconfident newbie that thinks he knows everything. 
I noticed you defend Java pretty vocally in this subreddit, I saw you bashing a Python guy in another submisson's comments. I just wanted to ask if is there any way you could see Java improve, or take notes from other languages? I agree with you that a language shouldn't be measured by its number of features (like you pointed out, C# supports operator overloading but operator overloading can get messy) but aren't generics implemented better in C#? There being no type erasure and all? I don't want you to just focus on or argue that example though, I'd like to hear other ways you think Java could be better.
Either that or it was just a shitty interview question. I agree with you, OP. How can you know what you don't know. To form that ambiguous question a little better, he probably should have asked you to tell him what you know about Java... which is still kind of a shitty question. You should be expected to know about OOP. So, Explain polymorphism, abstraction, encapsulation, and bonus points for high cohesion and loose coupling. Be able to explain data structures like arrays and linked lists. Also, be able to express your knowledge of some of the awesome Java Collections that are basically replacing the "normal" arrays, lists, etc... Honestly, What helped me out was buying a OCJP book and studying the shit outta that. It will give you more of a technical understanding at how Java works and equip you to answer a lot of technical interview questions. Good luck
You are ready to graduate with a computer science degree, and you have taken one java class? Java has been in the top 3 of the most popular programming languages for decades. It's basically c/c++, java/c#, and scripting languages. What language did you solve all your exercises in? You are talking about university, right? 
https://www.youtube.com/watch?v=_w5JqQLqqTc
I went to a pretty prestigious university and I only had two classes where I used java. Of those classes, only one was required. That being said I worked part time as an intern throughout the school years so I worked with java almost every day through that, but if I didn't have that opportunity I would have been in the same boat as OP. 
It's a pain compared to Jetty, and it's the most enterprisey J2EE application server I know of (not that I went looking).
You should know 1-3 languages well. Depends on what school, but you should have done some pretty big projects in your 3rd &amp; 4rth years. Point is, you should be able to code in a language on the whiteboard (no IDE), and the code you write should be valid (if transcribed, it would compile). Means you have to know syntax, arrays, maybe system IO, by heart. This should not be hard. For most places, this doesn't really matter if this is C++, Java, Ruby, Python, Lisp, or whatever. Then you should know your CS stuff -- algorithms and data-structures. Hopefully you've done some work with databases. That's basically it. Nowhere I know of expects a new grad to bring any specific language or framework experience with them. New grads are all about hiring smart people. Companies list stuff just cause that's what they use. Sometimes it's also important for legal reasons (labor department), but more often it's to give you an idea of what you'd be using and give the HR recruiter some keywords to use when looking for resumes. At this point, the only part of interviews that really matter are culture and coding. Are you a Jerk? Does the team want to work with you? and can you code some solutions (traverse a tree, sort numbers)? and do you know what a hashset is? can you use one? Some places are going to ask you stuff you may not know, e.g. Java trivia. Places that use that as their hiring criteria are going to looking for that specifically. You may not get those jobs. Don't sweat it. In my experience, places that interview like that are not great places to work anyway. Plenty of other places are looking for raw smarts and an understanding of programming. 
Odds are that if a company hires you, you're going to be maintaining an existing JEE (possibly J2EE) Java application. Look up those 12 different languages and frameworks so you at least know what they are. Stress what you learned on your own.
I suggest reading up on various design patterns in a generic sense and then understanding how they can be used in Java. This puts all the rote knowledge about abstract classes, interfaces, etc into useful systems. That's what they most likely would be impressed to see you understand. 
Many languages doesn't need to have classpath. Like in Python, you juste do import mypackage in your code and your package is imported without setting the classpath in the python command.
I personally do think that it's an option. One needs it, will use it. One likes it that way, will use it. One doesn't like it, simply not uses it. Optional ways of doing something just increases the freedom. I do believe in freedom.
You used some language right? What language did you solve all your exercises in? 
Required classes with programming: 1. Structures 1: MIT-Scheme / Python 2. Structures 2: Java 3. Computer Architecture: C 4. Software Design and Development: C++ 5. Intro to operating systems: C All other required classes did not involve programming. My Electives: 1. Software Engineering: Java 2. Computer Security: C, BASH, your favorite scripting language (ruby for me) 3. Internet Programming: PHP, Perl, Javascript, 1 small java assignment 4. User Interfaces: Android SDK (I forgot about this one in first reply, it counts as java too, but in my group of 4 I was the only one who coded.) 5. Cryptology: No programming 6. Advanced Operating Systems: C 7: Advanced Database Design: No Programming So yeah, MOST of my java experience in school comes from electives, and I am fairly sure those are the only electives my school offers that use java. 
I did a java game, bejeweled, using awt and swing, after you realize the tools you can use, and how to work up with the panels, frames, and components, it's quite easy tbh. Also, first develop your game independently of the GUI.
Did you by chance skip the console step? If so, http://chortle.ccsu.edu/java5/Notes/chap05/ch05_1.html
How far basically means do you just know syntax (if/when/strings/integers) or do you know how to create a web page, know what a servlet, JSP, or deployment descriptor is? Do you know what XML messaging is? Could you send an email from java? Are you going to be able to pick up those frameworks you don't know on your end or are they going to have to pay for someone to teach you?
&gt; I have taken one java class. Why are you looking for "Java" jobs? What was your degree specialization in?
Yes a 4-year University. We dipped into a few languages. Java, C++, C#/.net I still have a few data structure classes and advanced database classes to take but im basically done.
I have done the most "research" on Java. Java is very popular, hence, more demand. I'm really just searching any Entry Level Software Development position...but that question kind of through me off. : /
Thanks for the advise. It just caught me off guard, I was hoping for something more specific. I really appreciate this.
Yeah I'm a pretty normal guy that just wants to learn hence starting a thread haha. Thanks I appreciate the reply.
I go to a prestigious university in Georgia, and the state mandates java, so if someone would ask me about c# if you toggle c# with java and answer "I don't necessarily have all the keywords and semantics of java memorized, but I have an excellent handle on object oriented programming which is transferable to any object oriented language." I feel that is an excellent interview reply. 
I wasn't bashing Python per se - just someone who doesn't know java but is willing to comment on it. It's arguable that C# did a 'better' generic implementation. Java did not break any compatibility which is a *good* thing and although run time type erasure is bandied about frequently, it's not so important for most developers. When was the last time you had to stop and work-around type erasure? If you're like 98% of developers out there the answer is never. On the other hand C# was developed 5 years after Java and they should have had Generics from the beginning (first mistake). Then they implemented it in such a way where it breaks compatibility AND retains the old incompatible non-generic collections. So C# has 2 incompatible collection frameworks to maintain forever and developers need to maintain the incompatible one for long-lived APIs (like com or web service based APIs). I think as of Java 7 and 8 there's not much to complain about any more. IMO.
You still have many things to learn. Python has a module search path just like Java has a class path. The search path is stored in the `sys.path` variable. You can use the `PYTHONPATH` environment variable to insert directories at the beginning of the search path.
I lead a team of developers and fully agree with you. When hiring someone one of the most important things for me is to see that some doesn't need a babysitter. Of course knowledge is important. But it's easier to learn some framework than working efficiently by yourself and as part of a team.
What have you tried?
Nothing yet because i have no idea where to start, i know how to read a file in using java and sets it contents as a string, but i need some way of adding the text in the .txt file to the webpage.
Sounds like you are in dire need of a database and jee...
Hmm a database just seems OTT just to display a few sentences, think ive found something using PHP, which im gona try http://www.w3schools.com/php/php_file.asp
This comment has earned you the nomination for Oracle community outreach MVP of the year.
What?
Look at the last 2 lines of my answer. The constructors along with getters and setters are generated by the IDE. 
&gt; /r/javahelp 1 http://en.wikipedia.org/wiki/Web_template 1.2 with Javascript Template (Simplier solution, but maybe incomplete): http://engineering.linkedin.com/frontend/client-side-templating-throwdown-mustache-handlebars-dustjs-and-more http://stackoverflow.com/questions/7788611/what-javascript-template-engines-you-recommend =&gt; /r/javascript (http://www.htmlgoodies.com/beyond/javascript/read-text-files-using-the-javascript-filereader.html) 1.3 with Java: http://java-source.net/open-source/template-engines 1.4 with Scala http://www.playframework.com/documentation/2.0/ScalaTemplates http://scalate.fusesource.org/ 2 New Problems Who is responsible for the txt data? User - ok ==&gt; What are the formats/specifications for your .txt files? How do you control/validate that? Who is responsible for text file conversion to HTML/CSS/IMG/JS? You - hmm? ==&gt; * Low level - http://en.wikipedia.org/wiki/Web_template * Medium level - http://en.wikipedia.org/wiki/Comparison_of_web_application_frameworks * High level - http://en.wikipedia.org/wiki/Content_management_system ... 
I think you completely missed the point of the thread here. 
I've interviewed a few guys. Programming moves so quickly I'm not usually all that interested in their current skill set, but more they are able to fit into the work place and be enthusiastic and eager to upskill on site. These kinds of qualities you can't teach people, and for me have been far more important than the current level of technical skill. That being said, if you get to the interview stage, you have probably passed all the technical requirements. (That Usually there are at least a few technical questions to make sure you aren't lying... but I've never asked anything overly tough.) 
What's a JEE Java application???
Sarcasm, I gave a bad/incomplete comment. I accept the nomination :)
PHP will always be easier if you don't know java. 
No, you're most likely not. I personally am not "concerning" myself, just trying to gain insights from more experienced folks here. Maybe my questions are lame, but .. well, it shows that I'm not really into the topic; or that it's not as straightforward and accessible as it could be.
Paste in your code please
I will say, that error occurs when you are trying to grab something from an array, but its empty. 
okay 
im honestly pretty new at this so im real trouble grasping what the error codes mean but it would most likely be a real simple mistake
i realise that this code isnt the one i was talking about, i tried editing it to try different things and did not change back, ill get the original copy 
Firstly, /r/javahelp will probably be a better bet for you for questions like this in the future. That said... Think of an array as a number list of items, the size being the number of entries the list contains (although you can have "empty" items in the list), and an item's index being its position in the list (not that the first element in the array has an index of zero, the second item's index is 1, and so on, so the highest index for an array is equal to its size minus one). So, onto your error: java.lang.indexOutOfBounds: Index:1, size:0 Let's look at this backwards: 1. size:0 tells us that your array's size is zero. 2. Index:1 tells us that you're trying to access the item at index 1, i.e. the second item in the list. 3. java.lang.indexOutOfBounds is the result of 1 and 2, as the index you're trying to access is greater than the highest index available in your array.
thanks for the heads up on the correct subreddit. I believe that ive created entries by filling it up with the crashResponses.add("example") like i did with another of my arraylists, is there a certain condition that im missing?
cross post to /r/trees? Those guys can help you find your hash, map or no!
&gt;The 4th addition of that book was published in 2006. Java has undergone a lot of changes in the last 7 years. It doesn't really matter. If someone is planning to learn he/she'll have to learn from various resources and reread all of it several times. I personally think that Thinking in Java 4th Edition is the best book on subject, but I wouldn't recommend it to beginners. To beginners I recommend Oracle's tutorials or Introduction to Java Programming.
I've read the first 2 editions of Bruce Eckel's book. I've also been forced to read Oracles documentation. I think Oracle's documentation is so bad that it almost seems deliberate.
[Java EE at a Glance](http://www.oracle.com/technetwork/java/javaee/overview/index.html)
You read all of the documentation? I found it pretty good actually. Why were you forced to read it?
The Java documentation of theirs that is passable is the documentation rebranded from Sun. I am "forced" to read their other documentation because I am Java programmer, my shop runs its sites on WebLogic and our database is Oracle 11G. LOL. They have me in every direction.
You should always post a stack trace of the crash, after analyzing it yourself, of course. Anyway, your problem is almost certainly on line 78, where you attempt to get a value out of `crashResponses`. Right before the call to the `fillResponseMap` method from the `Responder` constructor, `crashReponses` is initialized as an empty list. Then, the very next thing the program does is try to get a value out of that list by indexing. This of course generates your index error. You could have easily determined all that just by looking at the stack trace. Here is a simple example that any java developer should be familiar with: try { foo(); } catch (Exception e) { e.printStackTrace(); }
Ah, you meant *Java EE*? Why did you call it *JEE Java* then before?
Right, well all I can tell you then is that nobody in his rightful mind uses J2EE anymore. That died in 2006 when Java EE came out. Today most everyone is using Java EE and its very cool and lightweight. If you had a bad experience with J2EE back in 2004 then I can relate with that, but in 2013 a Java EE application server is very small (between 25MB and ~100MB), and starts up in a few seconds. JBoss EAP 6.0.1 on my system starts in 1.5 seconds. Yes, Jetty starts faster even (400ms orso), but the difference is nearly impossible to notice.
thanks for that. like i said, i only very recently started and am very new to java, so im still trying to figure everything out, but ill google how to do that and learn it for next time
thanks so much 
As if that would happen. Put away your irrational Oracle hate. For years Java has been underfunded. At least Oracle has shit loads of cash that they've been pumping into Java. "So if Microsoft announced that they weren't gonna develop .NET anymore after .NET 4.5 and that it would be the final version...." "So if Apple announced that they weren't gonna develop the IPhone anymore after the IPhone 6 and that it would be the final version...." See how that sounds?
On a side note, it's common practice to do the following: Map&lt;String,String&gt; testMap = new HashMap&lt;String,String&gt;(); instead of: HashMap&lt;String,String&gt; testMap = new HashMap&lt;String,String&gt;();
It depends whether or not you mind losing the functionality specific to the HashMap class or not. Also, you can do: Map&lt;String, String&gt; testMap = new HashMap&lt;&gt;(); It behaves the same way but is shorter to type. You can see [examples of this](http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/lang/ClassLoader.java#268) being used throughout the standard library.
Losing functionality? HashMap doesn't implement any additional member functions. Compare [Map](http://docs.oracle.com/javase/6/docs/api/java/util/Map.html) to [HashMap](http://docs.oracle.com/javase/6/docs/api/java/util/HashMap.html). And even if it did, wouldn't you still be able to access them?
What is Mashups? Is http://www.youtube.com/user/waxaudio !
If this is your website, I'd like to point out that the code is not indenting well enough. On my android phone it looks like an indent of one space on the code with actual content. Also, I usually indent inner classes because it makes sense to me to do that. 
Fixed the indentation, you may have a look.
Refer to http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html in the very beginning, and lead your readers to see the spec themselves. You might want to mention the specific challenges in instantiating inner classes through reflection.
Thanks for the positive feedback. Can you elaborate about the specific challanges one can face wile instantiating inner classes through reflection?
Lack of a zero-argument constructor, even if there seems to be one?
Because one can have a non-Java application on a JEE stack. Granted, most developers that can do it don't see the reason to do it on a JEE stack :-)
You can do ridiculous stuff with nested classes: public class Temp { public static void main(String[] args) { new Temp().new A().new D(new Temp().new A(), new Temp().new A().new B(new Temp().new A())); } public class A extends Temp { public A() { } public class B extends A { public B(A a) { a.super(); } public class C extends B { public C(A a) { a.super(a); } } } public class D extends B.C { public D(A a, B b) { b.super(a); } } } } a.super() doesn't look nice, does it? Remove it and look at what the compiler says. You don't get that any other way.
@galaktos Do you allow me to use your code example and create another blog entry after understanding this weirdest example?
feel free to.
AFAIK Netbeans automatically builds the jar (into the dist folder) but you do not have control over what exactly is in that jar. If you want to do it yourself, use the command line OR something like fatjar/jarsplice (there are many such programms).
it builds the jar, but requires I also send people the lib and src folders, otherwise I'm without art assets, and necessary libraries. I want just one jar :(
As i said, look at some programms like jarsplice, or learn to use the terminal to create your jar - it really is not that hard. google is your friend 
Let me write a blog post about this mysterious example today or tomorrow and may be you can understand .. at the moment I'm totally overwhelmed myself 
I had the same question a couple years ago. You may find this [Stackoverflow](http://stackoverflow.com/a/2218201/1916939) answer useful. I have been using the target provided without any issues.
Use the jar command line tool
Your library jars should be packaged into your jar unless you've changed the project properties. For the graphics and audio just create folders under the Source Packages node of the project for them. Source Packages is not just for .java files, it is for all your project's assets. Files that NetBeans can not compile from Source Packages will be copied as-is into your jar. This is a very common requirement, for example several tasks require some type of file in a META-INF folder in your jar. You just create a META-INF folder in the Source Packages tree with the needed file.
Head first java
I started programming with Java when it came out in the 90s and was all about applets. Despite the popularity of the language spreading to all corners of the IT sector I rarely read anything about it in a tech forum that isn't about butthurt. Thanks for the positive article.
Temp has no constructor so how can you call a.super(a)? 
Java receives lots of complaints for the simple fact that is so popular. There are only two kinds of languages: the ones people complain about and the ones nobody uses. - Bjarne Stroustrup 
Simple solution on the nb forum. Something you add to your existing ant build script: http://forums.netbeans.org/viewtopic.php?t=31059
My opinion is that if you intended this to be used by a lot of users, including mobile users, then you should have developed the Java-based controller architecture first and worked on a web-based GUI for invoking the controller instead of a standalone PC-based GUI. If you want to use thick clients you can of course but you'd have to develop a different client for each target system (PC, Android, iOS, etc) since they can't all run Java apps. Even then, they'd have to talk to some RESTful API or something since you can't put the wireless devices everywhere. So I'd do something like option C and your view controller can present a customized interface for the type of device (desktop or mobile) accessing it.
This sounds so complicated and convoluted. I'm struggling to follow the reasoning behind it. So you have a machine that you use to remotely configure another via a com port and antenna. My first question is why a com port and antenna and not just send messages over standard means of communication such as REST or tcp/ip assuming the machines are on the same network. I would sanatise the protocol. Start by creating a web application on the box you want to be configured. Then think about exposing an appropriate RESTful interface. This can then be public facing and you can interface to it using HTTPClient from virtually anywhere the public IP can be reached. Secondly you can go down standard routes for securing this (Spring-Security HTTPS etc..) and use it from any device. 
a.super(a) is in the C constructor, and C extends B, so it calls public B(A a).
Excellent quote. It makes sense. Many people complain about Java, because many people use Java and many people use Java because enough other people thought well enough of it to make it popular. If nobody was using it, there wouldn't be as many people noticing the shortcomings. 
Some of my interviews I went through I was asked to do this, but it was more of a demonstration of the thought process behind the code (does the code make sense / is the structure readable), not if the code itself would compile. Also, mind you they were very simple (reverse a string, pick the 3rd object out of an array, etc..)
[But I didn't even include anonymous classes!](http://scois0n.files.wordpress.com/2012/09/but-wait-theres-more.jpg) [Since you asked for it](http://i.imgur.com/wtsEvNW.png) (well you didn't, but is that my fault?!) (also includes a goodie about generics.) Fun aside, I'm also only a first year CS student. I *kinda* understand part of what's going on there (it gets easier when you can hover over the constructor calls in eclipse and see which one is referenced, and when you see the errors it generates), but basically this is one of these things that you will never encounter in sane code. (But it's fun to poke around it.) I encourage you to try and fuck up this code even more - throw in some more static and anonymous classes and see what you can still get to compile. The error that you get is &gt;No enclosing instance of type Temp is available due to some intermediate constructor invocation Basically, since the class is not static, you need an instance of the enclosing type (which will internally be visible as A.this) to invoke any constructor on it, but there is no instance of the enclosing type available in the scope, so you have to "manually" provide it.
Have a look at the Adapter Pattern. You should wrap all the code that is required to communicate over the ASCII protocol in a nice REST API and deliver something like JSON to clients. Run this server component on the machine itself (the ascii machine) if possible, otherwise have everyone connect through the client machine. This way you can protect everyone from having to connect in a non standard way. It will give you options to then open up connectivity using WSDL, AMQP, XMPP whatever it is you need. Especially useful when it comes to trying to write the mobile app parts.
That didn't entirely make sense when you said it, but it was the a.super() that didn't click for me. I had to copy and paste this into eclipse and see the error message you referred to and then it all made sense. I think you would very much enjoy java puzzlers. There's a couple of videos online that were made and a book was written too with some extremely unexpected results when you do tricky stuff with java. Google it if you haven't heard of it.
My software engineering I professor actually starts each lecture with a Java Puzzlers puzzle :)
Fun fact: You can nest interfaces and abstract classes too :)
Thanks! 
No, Java EE has been a complete refocus on ease-of-use and lightweight programming models. Individual servers have focussed on free and lightweight implementations. The ability to scale down and have sensible defaults (convention over configuration) has been applied throughout the platform. Commonly used components are CDI, EJB, JPA, Bean Validation, JSF and JAX-RS. EJB for instance was once an impossible to use technology, wildly underspecified (every implementation was different), yet tons of needless stuff that was specified. You needed to inherit from heavyweight container classes, implement multiple interfaces, provide silly implementations for needless lifecycle methods, run some weird tools over your classes (to create skeletons and stubs) and run other weird tools over compiled classes to create "enhanced" classes. If you were still able to keep up with that, you had to add hundreds upon hundreds of lines to verbose XML deployment descriptors. Then finally, you had to package those EJBs in a jar and package that in an .ear. Fast forward today. You put the '@Stateless` annotation on a bean. That's it. There are no tools needed, no xml, no interfaces, no required inheritance, no separate EJB jar inside an ear. Just put that single class in a .war like any other class and you're done. There are also hardly any servers left that cost thousands of dollars, have required support contracts, are closed source, are gigabytes to download take gigabytes of memory to run and takes hours to start. Today you download TomEE, which is between 25 and 35mb, is completely free and open source, and starts up in a few seconds at most.
Just want to update that I found AjaxSwing and it may just do exactly what I need. I would have the application with AjaxSwing on the computer (server) within range of the machine. When I run the application in the browser on any other device, it will use the comm ports of the server and communicate with the machine.
I agree that Java doesn't get a fair shake in *some* regards. Number 9 to me is fairly relevant even to this day. It just seems like whenever I setup a project using Python, PHP or any of the other scripted language, there are a ton of system environment variables I need to make sure I have right (and a set of dependencies as well that don't pull automatically) The thing not on this list is strong typing. Most of the newer "hot" languages tend to be more difficult to manage for large projects over a long period of time. I like being able to jump on a project and get immediate feedback of whether or not what I'm doing it right. If it doesn't compile, it's not going to work. :)
I downvoted, not because of the topic, but because of the terrible quality of the article and site.
uhm, no, I don't think so. What's exactly bothering you with GlassFish? Which version did you last try?
&gt; this is one of these things that you will never encounter in sane code This is the key.
I can't think of any.
3.1.2.2
http://www.youtube.com/watch?v=hcY8cYfAEwU
Can you give a concrete example of the problem you're trying to solve? I have no idea what you're trying to actually accomplish...
this. in addition, netbeans uses ant to build so you can just edit build.xml and add in a task (or use the pre or post-jar hooks to make it happen automatically) if you need to do something mechanical
I can't speak for how the interviewer meant this question, but if I was asking it I wouldn't really care about what you had actually done, it's how you answer it that I'm looking for. Some interview questions look for specific answers (what's your experience with x), but (I like to think at least) this kind of question is giving you a chance to say what ever you want. Working on a project at the moment, great, talk about that. Enjoyed a previous project quite a bit, tell them why. Screwed something up horribly, but learnt a valuable lesson from it, tell a story (highlighting what you learnt). I'd still keep the stories java related. As other people have said, they want to know if you can work with them, and learn what you need as you go. If you can't handle a vague open ended question, what are you going to contribute? These days Google can answer any direct question, they want you there to think!
Sometimes one runs into insane code. In my last job I saw something almost identical to the example, the developer didn't seem to think it was a problem.
Awesome. He must know his stuff very well. 
There are quite a few static analysis tools that one might want to be familiar with. PMD finds the bug immediately. 
There is a fourth edition, covers java6
ExtJS has the best grid. Let the down-votes begin! It does: * multi-sort * multi-group by * row editing * infinite scrolling * paging * cell editing * filtering * dragable headers * hide headers * hover, select highlighting * single, simple, multi select (w mouse, checkboxes, or keyboard) * row number * row expansion * grouped header cells * column locking * can build from markup * also see tree-grid and property-grid http://docs.sencha.com/extjs/4.1.3/#!/example/grid/paging.html
True, good points. Thanks a lot much obliged.
System.arrayCopy could be useful here. 
What have you tried? 
OK, we can collaborate with your lecturer with this, if they don't have time. Start by posting a link to your course's home page, so we can discuss this with them.
But why ModBus-ascii protocol? Do you really have to use it? To me, a simple site with good front/back end would do the trick here. Every device that has a browser can process html, and you'd have a server that runs some java framework, and database which will store all that info you need. Try play framework.
In a nutshell it makes it easy to expand your system. For example you might have a class responsible for gathering CPU data (subject). This data may be delivered to a class that outputs it to the console. So CPUData (subject) would contain a list of observers. ConsoleOutput class would be an observer. 1 week later you might want to log cpu data to a .log file. Simple create a class that logs and have it implement the observer interface. Then add that object (CPULogger) to the list in CPUData. You might want to remove logging. If so you remove it from the list. You won't appreciate stuff like this until you work on bigger projects. 
The device doesn't have a browser lol. I don't think you read my post. Or maybe I should make it more clear? It's a machine with ONLY Modbus a commport for outside communication which i want to connect locally to a server with a commport and this server interacts with the phones, laptops and tablets directly where any actions affect the machine.
Thanks cyanocobalamin, that's the whole purpose of article. Glad to know your experience.
I appreciate your openness mike, downvoting with a reason is completely justified, but same time I would love to know specifics so that I can improve my articles.
Thanks dtfinch, I really hope that reddit is lying on number of downvotes :) 
Did someone just go through and downvote every comment here? For some reason Travmax's reply - which isn't harmful or useless - got downvoted.
I think you didn't realize what I suggested. You create a website and a web app within it so your users (of devices: phones, laptops and tablets,...) can access it with their browser. Your server is in java and he's the one that renders html for users and gets users input. So within it, you can link it with your device, based on what user sent. Do you understand now? I think it's achievable this way. If that's what you need, try learning play framework, you can learn it faster than other web frameworks I think.
Yes, but Java is **FREE**? Don't you read the news where Oracle tried to patent the "min" and "max" methods? The company's leader even said he's not sure if the language is free. They're not a non-profit, they are a for-profit company, and they'll do everything they can to charge companies for using the Java JDK or Java code.
Hey, sorry, we moved to C#, seems a bit more useful for game development, if you still want to help, we could use some testers. Thanks for wanting to help though!
3D games in Java? Good joke.
C# is even better joke for games. If you want to make a decent game, go with C++, it has something that other languages lack a lot - tons of libraries for game development.
That doesn't pack the dependencies, though. And that's what OP was talking about.
boolean logic
or something else
It does. Run `mvn package` and do a `jar -tvf` on the generated JAR in the target folder. The .class files generated from src/main/java will be packed together with the files in src/main/resources in the same JAR. No additional configuration required.
You don't have to apologize, it IS your game. Mind if I ask why you switched?
Quick! Noone use it!
Two questions: 1. You mention you've never done anything web related in Java - have you done any other kind of web development? Do you know how to make a plain HTML web page? How HTTP works? If not, I'd suggest you start there. 2. Do you know how/where this application is going to be hosted yet? If it's a computer you pretty much have full control over, and you can install and run all the things you need for a Java web app, then that's good (and yet more things to learn). If it's cheap web hosting it may not be able to run Java on the server. If Java's pre-installed, you'll want to know what version and what libraries or frameworks are available.
Please read the top.
Ah, I was just repeating what I read from the API. &gt;class whose instances are intended to be executed by a thread I thought callbacks dealt with threads (such as asynchronized and synchronized)?
Unless you're serious about getting into web development, then you're probably biting off more than you want to chew here. What you're talking about will require very good database modelling and design, user interface design, and construction of all all the ideas you come up with using HTML, CSS, JavaScript, JSP or anther web framework, perhaps Hibernate, Java, and maybe mysql. It will easily be a full time job for someone who is completely new to development to figure all of that out on your own. I know Java gets bandied about a lot as a programmer lingua franca and seems all warm, fuzzy, and beginner friendly, but there is nothing easy about it TBH, so unless you're committed, this isn't likely to go well for you. You might want to try out an online product instead that will let you build something you can use to collect the data and then either analyze it online or just download it and working with it in Excel, etc. A quick look around brought [this](http://www.wufoo.com/examples/) up as an option. I haven't tried that, but they let you put together 3 online collection forms for free, so that might be reasonable. You'll have to take into account the privacy concerns that might be relevant on your own. If you're determined to pursue this using Java and by doing it yourself, then I would encourage you to start with the answers that others have gotten when they've asked this question, such as here: http://stackoverflow.com/questions/11961793/java-web-application-tutorial-for-complete-beginner 
Well. I don't think my IDE is working properly. I have images that are referenced exactly the same way as each other using the class.getResource() method that are not loading. Perhaps you could explain to me how jars are put together without reference to an IDE. Is there are way to construct them so you yourself no exactly what is going into them?
True
Firstly, are you packaging your assets in the jar at build time? If not, that's your issue, the program is trying to load something in the classpath but it wasn't included in the jar at compile time. 
You use the jar command, from the command line. For most real-world applications, using jar directly is confusing, repetitive, and error prone, so you end up using a build tool, like apache ant. If this is for a class, I would ask what the preferred approach is, or see if the IDE can do it directly (I'm not familiar with net beans).
I don't know. I assume not as my exported jar is a lot smaller than the size of the assets folder. But, how do I check if this stuff is getting packaged and if not force it to be packaged?
You know what you've been studying the last 6/7 months? All of that.
Well, that was absolutely terrible article mentioning points that can be applied to almost any language. The main reason why Java is so popular is the number and quality of development frameworks for enterprise applications. 
Sounds like it should work - http://stackoverflow.com/questions/2746289/converting-webpage-into-jpeg-image-using-java suggests the method is correct.
Firstly, use a zip manager (like winzip in windows) and open the jar file (since all a jar file is just a zip file). And for packing the assets, I have no idea how to do that in netbeans (I use Eclipse), but it's easy with Maven. I will write up a tutorial when I get home from work today. 
This seems like rather trivial task, just google it, but honestly I would not show this to any potentional employer. 
Oh whoops, I didn't notice that. Yes, you can add a bit of configuration: &lt;plugin&gt; &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;descriptorRefs&gt; &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt; &lt;/descriptorRefs&gt; &lt;/configuration&gt; &lt;/plugin&gt; And then do `mvn package assembly:single` and get a single JAR with the dependent JARs exploded and bundled up in the same JAR.
Why?
Yes, it's in the JSF 2.2 link in the article (3rd link from below in the list). Direct link: http://jdevelopment.nl/jsf-22/#1087
If it's a joke, I don't get it. Care to explain?
https://github.com/ariya/phantomjs/wiki/Screen-Capture
In Eclipse you can use Export-&gt; Create (runnable) Jar. In IDEA you can generate an artifact, ie. the jar.
For an Entry Level Programmer? Any suggestions?
Just looked at your posts. You are a very negative person. Why do you hate life!?
Try stackoverflow.com 
Thanks. I should've gone straight to it, but for some reason my preference for reddit won. I put it up on SO.
They would just laugh at you and you would kill all your chances to get a job. Learn basics of major development frameworks, try to build app upon them, thats the way, harder way, to go.
Here's a simplified version of what I'm doing: Main class (ShowImageDemo.java): package showimagedemo; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import javax.swing.*; public class ShowImageDemo extends JFrame { Session session = new Session(); public ShowImageDemo() { initUI(); } public final void initUI() { JMenuBar menuBar = new JMenuBar(); JMenu file = new JMenu("File"); JMenuItem openImageMenuItem = new JMenuItem("Open Image"); openImageMenuItem.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent event) { FileChooserDialog fcd = new FileChooserDialog(); // Supposedly sets the image to the one selected by the user session.refImg = new Image(fcd.fileName); } }); file.add(openImageMenuItem); menuBar.add(file); setJMenuBar(menuBar); setTitle("ShowImageDemo"); setSize(200,200); setDefaultCloseOperation(EXIT_ON_CLOSE); session.refImg = new Image(1,1); this.getContentPane().add(session.refImg.getJLabel()); } public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { @Override public void run() { ShowImageDemo demo = new ShowImageDemo(); demo.setVisible(true); } }); } } My file chooser class (FileChooserDialog.java): package showimagedemo; import java.awt.BorderLayout; import javax.swing.JFileChooser; import javax.swing.JFrame; import javax.swing.JPanel; public class FileChooserDialog extends JFrame { private JPanel panel; public String fileName; public FileChooserDialog() { panel = new JPanel(); panel.setLayout(new BorderLayout()); JFileChooser fileopen = new JFileChooser(); int ret = fileopen.showDialog(panel, "Open file"); if (ret == JFileChooser.APPROVE_OPTION) { fileName = fileopen.getSelectedFile().getPath(); } } } My Image wrapper class (there are reasons for this not included) (Image.java): package showimagedemo; import java.awt.image.BufferedImage; import java.io.File; import java.io.IOException; import java.util.logging.Level; import java.util.logging.Logger; import javax.imageio.ImageIO; import javax.swing.ImageIcon; import javax.swing.JLabel; public class Image { public BufferedImage image; private int width, height; public Image(String fileName) { // Attempt to read the the file File file = new File(fileName); if (file.canRead()) { try { image = ImageIO.read(file); this.height = image.getHeight(); this.width = image.getWidth(); } catch (IOException ex) { Logger.getLogger(Image.class.getName()).log(Level.SEVERE, null, ex); } } } public Image(int width, int height) { this.width = width; this.height = height; image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB); } public JLabel getJLabel() { ImageIcon icon = new ImageIcon(image); return new JLabel(icon); } } And my session class (Session.java): package showimagedemo; public class Session { public Image refImg; } So the problem is the chosen image doesn't get displayed.
huh?! Looks like we got a keeper here.
Now thats advise! Minus the laughing part....thats not true...but thanks!
Your post sounded like an insult.
Is this for a school project or something? 'Cause in the real world, "pure" JEE stack ain't gonna cut it.
Let's cut the crap here: where's your resume / CV? Where did you do your internships and what did you accomplish while doing them? These aren't rhetorical questions and I'm not just being a crank.
If you only want the library to be available to your netbeans project, the easiest way is to just add it to your project as a library. Try following this: https://www.youtube.com/watch?v=vqhQY7U9Rlc
&gt; There are no web services implemented currently. Time to get implementing.
Internship was not software development related as I switched majors 2 years ago. Graduating from DeVry with a Bachelors. Only programming I have done is through classes and SOME on my own time. I have no time with work/school.
No. I am a java developer with 10+ years of experience, mainly using Spring. Just wondering from those in the JEE space how they create new stacks. Don't want to reinvent the wheel. 
I see.. well, better go ahead and add spring-core now. hehe. :)
The answer is somewhat dependent on the tooling you are using. Strictly speaking you specify your classpath in java and javac via the -classpath or -cp argument. The is a list of jars and pathetic to class file package roots. (Just like you remembered.) However the is rarely done by hand. It will be managed by your IDE (eclipse, IDEA, netbeans), build tool (gradle, maven, ant), container (glassfish, tomcat), or a script you write for a stand alone project. Give me more info and I will be happy to help more. 
Well, I wish you luck then. Most employers are looking for some proven experience. Normally this takes place in the context of a a senior project / internship. Successfully completing this tells them that you can deliver outside the classroom as well. Without it, you will be at a significant disadvantage and may not even find employment. You might want to think about reframing the experiences you had as an intern. Even if that took place outside of your current program, if you can point to accomplishments and how it helped you grow, that would be a big help. I doubt very much that constructing a little desktop app is going to do it for you. It won't push you nearly as hard as you might hope.
I highly recommend looking into Maven. It manages dependencies and has a common structure, and most IDEs (eclipse, netbeans, intellij) recognize maven projects and sort of automagically append those to the classpath when you run the app. 
This is late and I'm on my phone so I can't help very well but this way comes to mind: You need to keep the dimensions of the area stored (possibly in an array) and them implement a mouselistener which checks to see if the mouse is within the confines of that array. If it's not you use robot to set it where you want it. I have used the robot class before (to try and cheat at Roulette) and I'm sure this will work if implemented correctly. 
I actually have an array that has the dimensions. My main problem is implementing the Robot class into the code.
Damn wish I could help you now but it's late and I have an exam tomorrow. PM if you still need help tomorrow!
Frankly, I have been using such apps for ex. - elance's ios app. I think its built upon phonegap and it sucks. The UI elements don't look familiar. There's noticeable lag when you touch the UI elements. It just feels like an unknown place when you are in the app. This is one of the motivations for making a native app.
Sure thing. 
Well that's depressing.
What you are looking for is SWT. Take a look: http://www.vogella.com/articles/SWT/article.html 
Thank you, I have seen a little on this Subreddit and the internet regarding Maven, if everyone is ranting and raving about it then I will most definitely look into it.
Moved to gradle. Never looked back again.
I don't know the answer (am curious now too), but I'd hazard it's way way down the list of reasons people are moving to gradle/sbt/lein/buildr. Hell I briefly considered moving back to ant.
I am working on a similar project, and my approach to a similar problem could be used here. -Make an interface Updateable (or whatever) with at least one method like update(Object o) //can be whatever parameter. In this case Image i would make sense and have your main viewing window implement this interface. Then have your FileChooser class accept an Updateable parameter in its constructor, and call its update method whenever a new image is chosen. Sorry if I've made this hard to follow. The gist of it is that you pass the main window to your subordinate windows in their constructors so that they can pass information back up the chain. You can modify this all as you see fit (I modified it quite a bit in mine) but this is the basic set-up
I would vote for the Java REST service that kerrz mentions below. Its simple, will be easy to integrate with your existing code controlling the JVM, and if you can make the web service calls from iOS then it seems to be just about all you need.
that's one way, another is to set a CLASSPATH environment variable (At at least this works on linux), I assume something similar works on Windows. something like: CLASSPATH=$CLASSPATH:/path/to/jar/one.jar CLASSPATH=$CLASSPATH:/path/to/jar/two.jar export CLASSPATH This is slightly better than using -cp imo, because you don't have to type it every time. However as JacobTomaw stated, usually you don't have to worry about this too much but it's still good to know.
I have been pushing to get my team to use Maven and I'm starting to think that I'm pushing the wrong technology. I don't particularly like Gradle, but I dislike Ant more. I'm sticking with Maven simply because of the plugins that work well with it, but once I either (A) begin to like Gradle or (B) find another suitable replacement, I think I'll stick with Maven.
I'm just trying to help. If I mentally put you through a process similar to my own company's, I don't know if your chances of even getting past the recruiter are that good. But... I could be wrong. So, try some things out and get out there and apply, especially now before you graduate. But have a Plan B to get some experience. What I do know is that once you've broken through and proven yourself, there's a lot of opportunity there, but organizations don't like to entrust their tender little systems to the ministrations of resources that might make their lives difficult. You can probably imagine how nervous that idea would make them. Additionally, when they bring on a resource, it's an investment. They have to spend time with you to help you be successful. It takes energy and patience. It's not always fun. So, they try to hedge their bets by sticking to resources they know have been around the block a bit. You also have to know how you're going to make their lives easier by being there. If you can articulate the value you'll bring to the table in an interview, you'll likely do just fine. Don't let all this depress you either. Really, software development is quite easy to get into compared to many other professions. It's cake compared becoming an attorney that can make any money at the legal profession. It's cake compared to becoming a surgeon. It's probably cake compared to becoming a firefighter; not to mention the fact that it pays better and would normally not get you killed. Anyway, don't let some random crank dissuade you from your chosen career. Be committed or this won't work for you. There are easier ways to make a living, but if you've got the programming bug, then you'll do whatever it takes to be successful at it and to be good at it.
Is it as bad is the mysterious Gimp 2.9 incident `The Vanishing Of The Gimp`?
Thanks for the reply. Yes, originally this is what I was wanting to know about. Although it seems as though my issue may be ok for the time being. Cheers for the input!
Well, what you do is **not** be intimidated, make sure those technologies are in your future happy place, and then apply anyway. Then study your butt off on the technology behind those keywords. What can those technologies do? How is it like what you did in school or for an internship? How are you working on becoming proficient with them? Yadda yadda... Things like your little desktop app are a good place to start, but you'll need a few of those at least to cover the bases and know what you're talking about. When you have a working knowledge of something, put that on your resume as something you've been exposed to on your own time. You don't have to lie or claim to be an expert, but do take credit for what you do know. I've hopefully left you in a more informed position and more likely to succeed than you were, so I'll leave it that. Good luck!
B l e h
Yeah, Gradle still isn't doing it for me. It has the same problem as Ant, that you can create snowflake builds. Maven makes it very hard to do bad things. So it's still a fine tool, and I'll keep using it, but I fear that it's becoming a dead project. 
Irrelevant. Downvoted. Loljk :P
interesting. Hope this goes well! keep us updated over here!
I saw your earlier post, and this looks like you're making steady progress. This is really impressive work, as I recently went looking for decompilers and most were very dated (limited to 1.4 support on a few), ugly output, or just awful to use. The best I had found was Fern Flower (which somewhat disappeared); not sure if you've tried comparing with it, but in my opinion, it's a great baseline. I saw your comparison and it looks like your output is usually very clean and correct, so I'll definitely look to give this a shot (but I don't decompile a lot usually, so probably won't have much feedback). Thanks for everything you've done, especially open sourcing it!
Try SBT. It's awesome.
What makes it so awesome? If I'm on a Java only project, is it worth it to use SBT? Can I? Should I?
I'm looking through the source right now, and I was just wondering: what is your main class? Your `MANIFEST.MF` file said it was located at `com.strobel.decompiler.Decompiler`, but I can't find that on your repo. Also, I'm not that good at Java, so I may be missing something completely obvious.
Tell me about your Gradle dislike, I'm curious because Gradle fits nicely in my small brain.
If I understand right: You believe Gradle will let you create builds which cannot be recreated at some future time?
That's the correct class, and [it's in there](https://bitbucket.org/mstrobel/com.strobel/src/cb224e2fe7cbbf7cd7fd5169fb119fd3f994a342/Assembler/src/com/strobel/decompiler/Decompiler.java?at=default) :).
Ah. Thanks!
I found Apache Ivy with ant to be simple enough that IT and management are fine with it and it uses maven repos so dev people are happy. 
SBT syntax is *hideous.* Arbitrary blank lines, programming-language keywords like `class` and `import` that have no business being in a configuration file, … Maven's strength is that its POMs are (supposed to be) highly declarative. SBT shits all over that ideal and takes us back to the imperative-build-tool hell of Ant and Make. Show me another build system that uses declarative project descriptors like Maven and I'll switch in a heartbeat. SBT, however, is not the answer. SBT is awful. A good build system is one whose configuration file describes what my project *is,* not how to build it. "This is `com.example:my-awesome-project:1.0`. It has Scala code so you need the plugin for that, it needs such-and-such libraries, and I want the build to generate a distribution tree (which I will describe in `src/dist/assembly.whateverml`). Oh, and load such-and-such plugin to run my handful of custom build scripts that I need. Thanks!" Customization belongs in plugins and scripts, not the main project descriptor.
Depends how advanced you want to get -- jquery and ExtJS are both good choices. However, I use the dojo EnhancedGrid because it has so many useful features that I've needed out of the box, and it's easy to extend that functionality because dojo is extensible. Out of the gate, you have things like context menus, drag-and-drop capabilities, and advanced row/column formatting with this grid, with more advanced things fairly easy to do once you understand how it works. If all you need is a grid widget for a small project, it might not be the best choice. But if you're looking to build a web application, you want to start learning dojo and everything you can do with it. http://dojotoolkit.org/documentation/
I'm sure as hell not moving to Gradle or SBT. SBT syntax is *hideous.* Arbitrary blank lines, programming-language keywords like `class` and `import` that have no business being in a configuration file, etc. Gradle, Buildr, and the rest all have the same problem. Maven's strength is that its POMs are (supposed to be) highly declarative. SBT/Gradle/whatnot shit all over that ideal and take us back to the imperative-build-tool hell of Ant and Make. Show me another build system that uses declarative project descriptors like Maven and I'll switch in a heartbeat. But not Gradle or SBT. They suck. A good build system is one whose configuration file describes what my project *is,* not how to build it. "This is `com.example:my-awesome-project:1.0`. It has Scala code so you need the plugin for that, it needs such-and-such libraries, and I want the build to generate a distribution tree (which I will describe in `src/dist/assembly.whateverml`). Oh, and load such-and-such plugin to run my handful of custom build scripts that I need. Thanks!" Customization belongs in plugins and scripts, not the main project descriptor. Honestly, I've been tempted for a long time to write a build tool myself, similar to Maven but without the horrid, dependency-injected, everything-is-an-interface mess that is Maven's internals, and without the extremely poorly designed XML schema it uses for POMs ("lol, what's an attribute?"). If only I had infinite time…
Sane configuration? Gradle's "configuration" is written in a programming language. There is nothing sane about that. Configuration should be written in a data language like XML or JSON, not a programming language. Having it be in a programming language is an invitation for imperative build scripts, and that way lies the madness of Ant and Make.
lol wut? You can take a Maven POM, extract the dependencies to Gradle format, and have it build the same artifact every time just like the very basic Maven POM. Dependency resolution (the initial goal of Maven) is identical to Maven: Specify a version of an artifact you depend on and it will be pulled in to a build the same way every time. If you choose to shoot yourself in the foot in Gradle by effing up your build script, you can use the Ant plugin in Maven to do the same. Or you can write your own Maven plugin to do the shooting for you. Hell, there are countless Maven plugins to get around limitations of Maven itself. If you are an absolutist then surely you have banned any Maven plugins from being used, because there are a number of Maven plugins which let you tweak the Maven configuration at will. The ability to use Groovy to deploy this artifact to Amazon in-line is a nice to have. Build Success? Ship it.
I never thought I'd miss ant.
It seems that you have made up your mind already and I won't try to change it, however I find SBT relatively easy to use and read, considering what a build system actually *is*. Also, I prefer having it in the same language my project is as well. And I mean, seriously, XML in 2013? :)
oh, sorry, got so busy working on this crap, forgot to ask my question, lol
this is a part of a larger program im working on. isolated by itself, this loop doesnt have that glitch. any ideas what might be causing the problem?
&gt;I prefer having it in the same language my project is as well. Odd that you prefer this. I consider it an abomination. &gt;And I mean, seriously, XML in 2013? :) XML is a tool. It can be used well, or it can be horribly misused. Maven does the latter. The blame for this lies with Maven, not with XML itself. Besides, I haven't seen many data languages that are generally better. Most of them, in particular, lack namespaces and/or schemas. If you're going to make what is essentially XML with more compact syntax, fine, but don't also drop everything that makes XML good!
Have you tried [jd-gui](http://java.decompiler.free.fr/)? It seems to me it's mostly up-to-date, with acceptable output, and rather easy to use. It's not open-source though.
It can by all means, I assumed it's purpose(s) incorrectly. My apologies.
See [my original comment](http://www.reddit.com/r/java/comments/1dg4np/wtf_is_up_with_maven_31/c9q4k3y). For instance, SBT requires arbitrary blank lines in various places. Why? Because its configuration file isn't *just* an SBT configuration file; it also happens to actually be Scala code, and the syntax it tries to make you use doesn't play nicely with Scala's semicolon inference. That is garbage. The syntax of a configuration file should be simple, and that is not simple. Maven POMs, by contrast, are simply XML. No syntactic surprises, no syntactic noise (I am writing a project description, not a fucking Scala `object`), no ability or temptation to insert imperative code where it doesn't belong. The POM has its own problems, but that bizarre, multi-layered syntax isn't one of them. I'm unfond of embedded DSLs (including ones in Scala) for the same reason: they are basically exploiting the specifics of a general-purpose programming language's syntax to make it look like something it isn't. Scala tries to accommodate this sort of thing, but doesn't really accomplish it, and SBT is an example of how this goes horribly wrong.
Yeah, I've been looking into both Gradle and SBT. I am immediately hesitant of any build system where you execute code. I'm not sure why so many people want to do that. I've only seen maybe 1 example in 6 years of doing maven where there truly was a need for custom code during the build process. The rest of the time was a fundamental misunderstanding of how maven works, or trying to force maven to work the way they want it to work.
as long as the .gradle file is checked in with everything, not necessarily. But as a developer, if they didn't do a crazy fucked up job, I know exactly how to build a maven project, exactly where the tests will be, and exactly how to make it all work. Gradle throws all that out the window. Whenever you can have custom code and, say, talk to a database or call some rest services, it's creating the potential for non-repeatable or non-portable builds. It's really no better than Ant. I guess I just don't have the desire to force my build tool to build it the way I want it built. I am happy with the way maven works in terms of the lifecycle and dependency management. Every time I see someone having a big problem with Maven, it's because they want it to not be a build tool. 
https://maven.apache.org/what-is-maven.html &gt; Making the build process easy Sort of, dependencies are managed by Maven (and Gradle) &gt; Providing a uniform build system If you don't use any plugins (same with Gradle) &gt; Providing quality project information mvn dependency:report is nice, Gradle does the same &gt; Providing guidelines for best practices development Everyone can grok POM files with no effort, I'm sure. &gt; Allowing transparent migration to new features No comment. Anyway, smarter people than me can make better arguments for Gradle over Maven. XML is as bad of an idea for a make file as makefiles themselves. Clearly we have very different goals.
Looking at the javadoc of Graphics.drawImage(...) and [ImageObserver](http://docs.oracle.com/javase/6/docs/api/java/awt/image/ImageObserver.html) it seems to be that the ImageObserver would be in this case mostlikely *this*. Also note, that the first parameter is not a String, but an actual Image object(BufferedImage for example).
As long as the POM file is checked in with everything... Why would you call a DB from your build? Nice straw man. Maven is fine, you are right. Gradle brings a lot more to the table. http://www.gradleware.com/news/blog/fighting-common-misconception-gradle-isnt-imperative
Clearly we do. Mine is basically Maven minus the cruft and poorly designed POM schema.
http://www.gradleware.com/news/blog/fighting-common-misconception-gradle-isnt-imperative
All information in the pom is given as element data. There are no attributes. I like that. There is no ambiguity. You don't have to think "is this an element or an attribute". Sure it's more slightly more verbose, but with auto complete there's no more typing. 
The blank line issue is only relevant for basic SBT project files. If you're using a real, "advanced" project file layout, you just write standard code, like so: https://github.com/spray/spray/blob/master/project/Build.scala Note how beautiful the dependency build file is: https://github.com/spray/spray/blob/master/project/Dependencies.scala
It's a DSL in an imperative language. Ergo, it is imperative, and merely pretending otherwise. The fact that you *can* write imperative code in what should be a purely declarative project description, without explicitly invoking some sort of escape hatch (e.g. requiring imperative scripting to occur inside a block like `runCustomGroovyCode { … }`), is irksome. (Maven only lets you place imperative code in the POM by using a plugin that executes it, like the `maven-antrun-plugin`. This is almost never a good idea. Even when it is, Maven forces you to make eminently clear that you really want to do that, by using the plugin. This also delimits imperative code, setting it apart from the rest of the POM.) Gradle does appear to keep up the pseudo-declarative masquerade a hell of a lot better than SBT does, at least. That's good, but not good enough.
Auto complete isn't going to make it any easier to read. A rule like "if it's a simple string, like `groupId`, it's an attribute" is not difficult.
[ok](https://lh3.ggpht.com/-I22dNLv98ss/T9L23PWKFKI/AAAAAAAAKVU/UNuXfyKFl58/s1600/yeah+okay.gif) Far too tired to argue with a dinosaur. 
My company just introduced Maven as the default. (But for myself and my current client, we use Gradle though.) The reason is simple: currently, more people have some knowledge of Maven. So it is a sane decision of your boss at this time, if Maven just does its job. You have to wait a little bit more for people to adopt Gradle/SBT. I did not fight the decision of my company, because I know that such things need time to prove themselves. The best tactics in the adopters' game: Convince your boss that you are loosing money by using Maven and that the introduction of a new tool costs your company less in the long run (hard to prove). Or just get your team interested as well (side projects, trainings and seminars). If your employer does not invest in you in terms of trainings and seminars (even if you do them on your own), search for a saner place to work. BTW. I call Maven dead. The rate of commits and new tags in their git repo is quite alarming for a tool which is so important for many projects.
And why don't you use Google to find out? Seriously, why should anyone do your homework? Go and check yout the collections framework and see if array is in it. Or find out what destructive means and then go check the method signature of reverse() and you have your answers...
Thanks for the kind words! This has been a really fun project, and I'm looking forward to spending more time with it. I hadn't heard of Fernflower until my original post, but I did check it out and have added it to my suite of decompilers to compare against. It's a pity the author obfuscated it. I know what you mean about the ugly output. I never understood why someone would put so much blood, sweat, and tears into writing a tool and then skimp on output formatting.
This has been my go-to as well, though I've often had to fall back to JAD for code that JD-GUI can't handle. It seems to have a difficult time on code that isn't emitted by the mainstream compilers. Still, it seems to be the best choice out there at the moment, which is why I use it as the baseline when comparing my own decompiler's output :).
Thanks! I certainly will. It continues to be a fun project, and it's been really exciting to see it take shape.
I had a horrible experience with Grails about 4 years ago. It worked great for small experimental sandbox projects, but then when we decided to start a "real project" with it, we discovered bizarre bugs like [forcing use of JUnit 3](http://jira.grails.org/browse/GRAILS-3237) and [ignoring unit tests named like DatabaseDaoTest.java](http://jira.grails.org/browse/GRAILS-4099). Now our company has about 120-150 reliable, maintainable maven projects, and one clumsy Grails project with shoe-horned fixes and in-house patches which we hope we never have to touch again. If Gradle is still around in 2 years, maybe I'll give it a shot, but in the meantime I'd listen to your boss. Gradle 1.0 was only released a year ago. Give it time to mature. You have no idea how frustrating it is to have to maintain 12 projects which use 12 different buggy unmaintained flavor-of-the-month frameworks.
Focus events aren't really a good fit here - they're used more inside your app to handle moving between separate form fields. Even if you get something working based off focus, it might interfere with popups or dialogs if you wanted to use them. You could use the [MouseInfo](http://docs.oracle.com/javase/7/docs/api/java/awt/MouseInfo.html) class to get the position and the [Robot](http://docs.oracle.com/javase/7/docs/api/java/awt/Robot.html) class to move it back - but in a windowed environment, this is going to be annoying. And it kinda breaks the windows/desktop convention. A better choice is to use [Full-Screen Exclusive Mode](http://docs.oracle.com/javase/tutorial/extra/fullscreen/).
I used Ivy at my last job - hated it because it was tied to Ant. If I have to stick with ant Ivy, at least, can take the worst part of the pain away (checked in jars).
And Java has them too. Plus, they are first-party libs, so you don't need to worry about some people having built on a different library than you are using.
How is it a joke? It seems very easy and possible to me.
Isn't XNA for 2D? I remember working with it at camp, and it was a 2D platformer. I know you can make 3D games in C#, but I thought XNA was 2D. Incidentally, if you want to release it for XBox, then that will be easier if you use C#. Knowing RPGs, though, you probably don't want to. Also, I know a bit of C#, so if you want I can (try to) port over the encryption, once it's done in Java. I can also send over the Java itself if you want to port it yourself.
Just saw your second paragraph.. I didn't know you could wrap one language in another. How is that done?
a) this is unrelated to java, it just shows how to set variables and execute shell commands from php. it happens that a java process is started (among other things), but it could be something else. b) this only works on systems where `bash` is installed.
and c) a blog-spam / commercial-spam account (?)
I was a bit disappointed as well reading this. I've heard some rumors that the Maven team has stopped development of Maven, and hoped to find some insight here. But there's only talk about Gradle and stuff :( From what we know, there was a staging of 3.1 in November. Then a vote in December: http://maven.40175.n5.nabble.com/VOTE-Maven-3-1-0-td5735536.html And then almost nothing... Last month there is has been only a tiny commit done: https://git-wip-us.apache.org/repos/asf?p=maven.git;a=blobdiff;f=pom.xml;h=b4ebafb2d2b4e030c93dcd0f2ca280f4e7798395;hp=7f1e6a3c10346ed7124894a934d667568436ac1c;hb=d6f02bb40689cdd7e57e519341d4084e31566723;hpb=fa47f650cbfec7a07135cfc380a9cee0d2faa144 Overall the Maven git repo and everything is scarily silent.
Very nice write up of what looks like a clean API - in particular for me the change to JMSContext in an EE environment plus the getBody method look like ones which will be frequent time savers.
http://www.gradleware.com/news/blog/fighting-common-misconception-gradle-isnt-imperative Gradle isn't imperative and it brings along many benefits.
I don't know what you're doing, but I know you're doing it wrong.
Well we definitely disagree, then. I've liked working with Gradle, there is no mess to set up the build tool (there is a very nice bootstrapping mechanism that doesn't require you to install anything). I think my boss is short sighted.
http://www.gradleware.com/news/blog/fighting-common-misconception-gradle-isnt-imperative 
Gradle can use exactly Maven conventions, there is no change to any of your project structure. So it throws nothing away.
That's the main reason we use it, so that people stop checking in jars into git, which makes repos huge (unnecessarily). ant out of the box can be a pain to use with the odd conditionals but antcontrib tasks (http://ant-contrib.sourceforge.net/) fix that problem. I used to not like ant because it is often a result of someone writing a build without understanding how ant works and over time it becomes worse and worse. Once I wrote my own build steps from scratch (which is really easy) I stopped hating ant. And it is way better than 'make' and maven, which are over-engineered. I would rather use ant over having to weed through all the crazy maven configs to get something simple done.
You definitely have. Thank you kind sir.
We reverted back to ant. It always does what we tell it to and we don't have to spend hours trying to figure out why something didn't work.
But how can I pass the main JFrame to my file chooser if my file chooser is called through an ActionListener and thus the main JFrame isn't in its scope? See ShowImageDemo.java:19-27 edit: I should say, my debugger reveals that my reference image IS actually changed after the file chooser is finished, but it isn't getting re-drawn.
Wooooow. I just made updateRefImage a final method allowing it to be used within my actionlistener and it works great. I must admit that I am quite new to building applications with java (mostly been doing heavy math-oriented stuff, so not very much OOP), and it escaped me that final would be used like this. Thank you for your help though!
The funny thing is, he's completely lying. You have access to the entire groovy stack in any build step. I've used it. I used it to combine multiple javascript files into an uber-javascript file, then minimized it, then uploaded it via REST calls to a remote server, then kicked off a job. Sorry, that's not a build system. And there were no "extra" plugins there. It's an imperative programming language that everybody is just agreeing to not abuse with a wink and a nod. The people who struggle with maven struggle against the fact that it's not imperative. 
I agree that it's starting to trend towards a dead project, but I don't think Gradle is the answer. Gradle is just ant but using groovy instead of XML, and all of the stuff groovy can do. Maven makes it very difficult, on purpose, to start doing crazy stuff with the build, and Gradle embraces it. 
Just want to say: I love that train of edits. First "I don't know why I dislike C#" means that you don't like it, then at the end "Welp, decided to move to C#".... Kinda hilarious.
I replied to you earlier, but in short: he's lying. It's groovy code. You can do any damn thing you want in there. I know, because I've used it. While you can install the maven plugin in gradle and get maven-esque layouts, you can still inject code to do all kinds of crazy stuff. And the way the depends stuff works is literally no different from Ant. It's ant, but replace a declarative language (xml) with an imperative language (groovy). There's a reason everybody is comparing gradle to gant. Until it gets a lot harder for people to do stupid shit like that inside gradle, it's always going to be a potential minefield. I feel like it's the perl vs C argument. Perl lets you do things any damn way you please, and given enough time and enough developers, every damn thing will be done every damn way, and nobody will want to work on it. C is more strict, there's only a couple correct ways to do things, but if you "know C," you can pretty much figure it out. Perl, not so much. 
[He can say it's not all he wants. The fact is, people are using it like Ant and like that they can do programming in the steps](http://stackoverflow.com/questions/1163173/why-use-gradle-instead-of-ant-or-maven). This is THE reason people are switching: they never wanted to use maven in the first place. They want to program their build. Stack Overflow lets you see things for how they are, not how their designers may have intended. And all the people answering "it's the sweet spot between ant and maven, it's like maven but more flexibility" etc. You're telling me this kind of comment from SO means you WON'T encounter snowflake builds?!?! &gt; Gradle you can have the flexibility of Ant and build by convention of Maven. For example, it is trivial to extend the conventional build lifecycle with your own task. And you aren't forced to use a convention if you don't want to. Groovy is much nicer to code than XML. In Gradle, you can define dependencies between projects on the local file system without the need to publish artifacts for each to a repository Sorry, the tool may not have been designed for it, but the way it's being used by most people is to abuse the imperative nature of the underlying language, and to get around some best practices that maven forces on you (even if it's rather heavy-handed about it). 
That's *sneaky*.
Meh. To lazy to decide what I want.
&gt;It's also all in C++, which was the other reason it didn't make sense to propose a joint venture. Depending on his exact code style it might be rather straightforward to translate to Java. But it depends. Template meta-programming code doesn't translate as well, but several other styles typically do.
cout and #import are C++. But they're not really 'weird', I think, just different to what you're used to. &gt; cout &lt;&lt; "Hello"; is the same as: &gt; System.out.println("Hello"); And #import is just the same as imports in Java. .. The stuff like heap/stack etc. is on the internet and better explained than I could do :) So if you're curious, google. The built in API in Java is equivalent in C# (and, imo, more practical in places). For every API and library in Java, there's one in .NET, and the other way around. Btw I'm not angry at all. Happy to explain. You should perhaps go on a language adventure and learn some of the stuff I was talking about. C# is really actually very similar to Java. For example: &gt; public void sayHello() { &gt; System.out.println("Hello"); &gt; } in C# is... &gt; public void SayHello() { &gt; Console.WriteLine("Hello"); &gt;} ..And C++ will teach you a lot about what's going on behind the scenes when you write programs. P.S. As for the wrapping one language in another; it's more like sending data between two programs, via maybe interop (http://codemesh.com/products/junction/doc/best_practices.html , http://msdn.microsoft.com/en-us/library/ms235281%28v=vs.80%29.aspx).
Just a warning buddy, XNA is discontinued in favour of raw DirectX. You won't be able to go past DirectX 9. XNA /does/ support 3D development, though.
I'm a Maven fan and I like it the way it is. In fact, I'm hard-pressed to think of a valid reason to ever use attributes in XML. All they do is limit flexibility.
There's a fine line between mature and dead. They aren't piling on new features nor should they be at this point. It has a huge array of third-party plugins to extend functionality without polluting the core product.
Lord, that's awful. Utterly cryptic syntax. Same problem I have with Scala in general. libraryDependencies ++= Seq( "com.github.siasia" %% "xsbt-web-plugin" % "0.12.0-0.2.11.1", "com.decodified" % "scala-ssh" % "0.6.2", "org.bouncycastle" % "bcprov-jdk16" % "1.46", "com.jcraft" % "jzlib" % "1.1.1" ) I gather those are group IDs, artifact IDs and versions only because I'm already familiar with Maven. What's the difference between % and %%? And what are the chances of confusing them constantly? Scala and SBT have some nifty features, but I would never use them voluntarily. Concise is better than verbose, but explicit is better than cryptic.
It just isn't Java if they don't utilize Factories, iterators and Readers. Gson ftw
You're not missing something. SWT is designed to make desktop Java applications look native. So for example, if I build an app and port it to OS X, Linux and Windows, it will look at home for each of those systems. This requires you to be running a Java app on a device for a given OS. Because of the ridiculous walled-garden mobile ecosystems, you can't really run a Java app natively on most phones, and the few you can don't have a standard windowing system supported by the SWT. Long story short: Sounds like the guy was trying to help, but didn't understand the problem.
Over engineering or good design? I second that! Gson! 
It's cognitive dissonance. It's things that go into my brain that are unnecessary. Verbose is only bad when it's redundant, not when it's descriptive. If I wanted powerful and cryptic I would have stuck with Perl.
Well, if you want powerful and *concise*, you should go with Scala. :) The more you learn about it, the more you find out that it's all *simpler* than you thought. My advice is only that learning it will more than pay off in the long run.
Nope.
Project Lombok has this for final variables. Google it.
The way you're describing won't work: this sort of instantiation is language oriented. However, if you'd want to divert from that and create something like `Var temp = new Var(obj);`, you could let this class take an `object` as parameter. After this you could check the type of this parameter and create a string representation while overwriting `toString()`. Since `System.out.println` uses the `toString()` method of objects, this would essentially solve your problem. It's a lot of hassle for useless gain though: you'll have to define this wrapper class, you'll lose overview and you'll lose type-specific functions.
Yeah I've thought of most of what you said. Great to see someone who's on the same wavelength as me! (I should come here more often :D) Right after I submitted the question I started fiddling with a bit of code and the `toString()` is exactly what I did. Regarding the instantiation, I had a feeling it was locked in but had a sliver of hope I could make my own classes work with it (I just didn't know where to look for answers regarding this question so I came here).
The generics often appear correctly for variable and parameter declarations because the full generic signatures are included in the .class file if you compile with debug info. I haven't even started to work on inferring type arguments to method/constructor calls yet. I would imagine most of the exceptions you cited are due to by buggy handling of `try/catch/finally` blocks. Since Java 5, the contents of `finally` blocks have been inlined into the adjacent `try` and `catch` blocks (and you only enter the `finally` handler if an exception actually occurs). Reliably removing that inlined code has proven tricky (at least for me). There are cases where I end up removing too many or too few instructions, which can completely break the stack analysis. If you see any exceptions for methods which **do not** have `finally` blocks, post a reply and I'll look into it. &gt; Static imports are gone (I static import some constants). I guess you cannot help that. Bytecode has no concept of imports, so no, there is no way for me to know that you ever had them. &gt; The final static constants are also gone. That's also due the compiler's way of generating the byte code I'm afraid. True compile-time constants should be in the declarations. Others will be in the static initializer block. I haven't written a transform to inline field initializers yet, except in very specific cases (e.g., variables captured by a local class). &gt; The new try(AutoCloseable) is decompiled as nested try. Yes, this is a language-level feature that I have not yet written a transform for. Thanks for providing that example, though--it demonstrates some interesting `finally` behavior that I had not seen before. I may ping you back if I can't reproduce it. &gt; Sometimes the for (x : Iterable) works, sometimes doesn't. Yes, the same is true for `for (x : array)`. The pattern matching I do for these loops is rather simplistic at the moment. I'll be fleshing it out in the future. Basically, if the local variable where the current item is stored gets optimized away (inlined) during an earlier stage of decompilation, the pattern matching will fail, and you'll end up with a more primitive loop. Can you double-check the output you cited above? It looks like that `if` statement should have been a `while` statement, but it's hard to be sure without seeing the whole output. &gt; Many of the local variables are marked final (they aren't in the source), and none of the method params are marked so (although they are final in the source). There are no `final` flags for locals in bytecode. I do some primitive analysis to mark variables as `final` if they are only assigned once. It's not perfect because it doesn't do full definite assignment analysis, but that's a low priority for now. I am aware that it doesn't work on parameters. &gt; for (int i = _pluginOrderedList.size(); --i &gt;= 0; ) My `for` loop construction pattern requires some sort of iteration logic at the end of the `while` loop (all decompiled loops start out as `while` loops). Since your loop doesn't follow the typical `for` pattern (it has no post-iteration statements), the decompiler just leaves it as a `while` loop. Thanks for the feedback! I'll look over it more closely when I get home from the office.
Indeed, I will definitely look into writing an Eclipse plugin. I already have a proof-of-concept IntelliJ plugin, but it's way too flaky to release into the wild just yet.
**EDIT:** I just realized you probably meant that *references to* final static constants were missing, and not their declarations. In which case, yes, this is because they are emitted inline as constant values. I did experiment a bit with trying to restore constant references in some cases, but I decided to shelve the idea indefinitely. It would have only worked in certain cases, e.g., in common flag-testing patterns like `(x &amp; y) == x`, `(x &amp; y) [==|!=] 0`, `x |= y`, `x &amp;= ~y`, where *x* and *y* are primitive literals, and there are final static constants in scope with matching values.
Readability and less typing. Or do you mean to say that you find the POM easy to read? 'Cause I sure don't.
Why don’t you tell us where exactly you’re facing problems? Do you understand what the code your teacher provided does, and what you are supposed to fill in? What steps have you taken to solve it? I’m sorry you are stressed, really. But just asking us to complete your homework isn’t really the way to go, is it?
Care to elaborate (or provide a link)?
I'll bite. **TL;DR - This project is specifically designed for list manipulation, with an emphasis on using loops to traverse the list.** For the purposes of a learning assignment, I'll restate the problem. Assumptions: You have a String array of "dates", formatted "mm/dd/yyyy", where mm is a one or two digit month, dd is a one or two digit day, and yyyy is a four digit year. You have helper methods to get the year, month, and date from a string that contains a date. Problem: You need to find: * The earliest date * The latest date * The average year So, for the earliest and latest date, you will need to loop through the String array and compare the dates using the helper functions. For the average year, you will need to loop through the String array and get all of the years, again, using the helper functions, so that you can get their average. You should have a book or notes that tell you how to write loops, but if you don't: [Java Loops - for, while and do...while](http://www.tutorialspoint.com/java/java_loop_control.htm) In addition, your teacher has already used a loop in the program; you should study that one. Well, this is as far as I can take you. Some will say I've taken you too far, but this is where I usually stop for classmates, so I'll show you the same courtesy.
You can also just use Maven to run particular tests or test suites from the command line as well (if you have created your Tests in Java with JUnit that is). Use -Dtest=nz.co.mytest.TestName, where TestName is the name of the class to run
HN? 
[Hacker News](http://news.ycombinator.com). It's hipster central of the programming world.
If you can answer djnattyp's questions, then there's hope. vplatt is correct. Java EE 6 or the upcoming Java EE 7 (or Spring, Wicket, Tapestry, Play, or Vaadin) can be easy...if you know how to use them. Otherwise, you're in for a world of hurt, especially if this project of yours is being overseen by managment. I encourage you to take on this project, but be wary that you'll be delving deep into a wide range of subjects. I tend to favor the Java EE stack over the other framework that I previously mentioned (not saying that they're bad). For starters, pick an app server. I'd suggest TomEE, GlassFish, JBoss's WildFly, or Resin in that order. Learn JSF 2.1 (or preferably 2.2) and Bean Validation. Pick a database (in-memory or relational?). Learn JPA 2 (this interfaces with a database). Learn how to use CDI and EJB 3.1 along with JSF 2. Java Security, imho, tends to be a confusing subject for newbies. Your simplest, best bet would probably be storing encrypted, salted passwords in a database. If you can get a handle on all of that stuff, then you'll need to worry about infrastructure if you will be the admin of this web app. You'll want to consider using a web server as a front end to your application server. And of course, there's graphic design and client-side scripting such as jQuery or other similar javascript frameworks.
What you are describing is called a "preprocessor", which aren't really used - for good reasons - in the Java ecosystem, with the exception /u/haakon mentioned, Lombok. The way to implement a preprocessor would be called "AST transformation" which involves writing a parser for your enhanced language, plus a transformer to plain Java. There isn't really a standard place to stick your preprocessor, so you'd need to write a Maven code generator plugin.
One of the methods indeed have a try-catch-finally block inside. The other hasn't. However, that method throws a RuntimeException (and this method has no throws clause). Another method throwing a RuntimeException has a throws IOException clause too, and that one is decompiled well. Dunno if that's the main cause or not. I made my [original source, the decompiled file, and the bytecodes available](http://wiki.javaforum.hu/display/~ivanhu/Decompiler) on my JUG docspace (at the same time, promoted your decompiler there, but I'll remove the page if you don't want me to do that) as attachments. Please note further, there's no license text available for your decompiler (at least I was unable to find any).
That's the current version, thanks! So about the other part of the question; what's bothering you with it?
For better or worse, Maven is the only universal build system that's supported well by IDEs. Gradle support still sucks major suc in Eclipse.
Omg! Dude! For real?? :X
preprocessors have nothing to do with this problems. These kind of declaration is solved either at runtime for interpreted languages or at compile time for typed language with type inference (ie go). preprocessor would be able to solve only the most basic examples as the one reported, but not more involved cases with variables etc.
I'm not a Java developer, so nothing per se, I just have some experience trying to get Java apps run on/in GF. And it's not a pretty sight looking back. Asadmin, though works, but works nothing like a Unix CLI. (The secure admin requirement in the newest version seems like a good idea, until you want to create domains without touching a filthy terminal at all. It turns out there is a bug while it tries to accept a certificate into the user's keystore, you won't even see without strace.) It uses some IIOP-voodoo-ORB for intercepting calls to the admin port to deploy the admin panel app, so you can't just disable IIOP via the domain.xml. And so on, and so on. And it's fragile, upgading from 3.0.1 requires cleaning the osgi-cache and the generated directory, though this is indicated .. nowhere.
that's the correct answer. just to add: there are two different meaning for your question: 1 is to have a "universal" typet that can contain any value, 2 is to have the compiler put the type there for you. The first one can be implemented somehow as you suggested. Btw, the same would be valid even without a specific type: Object v = "test"; Object v2 = 5; etc Indeed Object is the type that can contain any value. The only problem would be operators like +, - etc, that cannot be overloaded. The second meaning is called type inference, for example Go has exacly that syntax, and the compiler infer the type from the argument. Java has quite a good type inference engine, expecially java 7 and 8, and could be perfecly able to do a "var x = 5", inferring Integer type. It's just not supported by the syntax.
He wanted something that he could practically implement. A preprocessor for local type inference might be doable. A compiler, not so much.
Ant is supported well too, many major IDEs will read the build.xml file and create a menu of targets for you to invoke.
Why TF would you want that? Just use groovy, ruby or javascript or if you want to make your life miserable you could use Object for everything.
I've just now heard about JSONP and I don't really know what is going on there in the standardization push and how it will affect existing libraries like GSON and Jackson. I was reflecting on what *did* happen with XML. There used to be a number of different XML parser implementations (Xerces, Crimson, Saxon, etc.), and they have been [unified](http://www.edankert.com/jaxpimplementations.html) to conform to the JAXP set of APIs. There is a reason for the factories and the builders and it is not merely the work of architecture astronauts.
When I said that the "cout" syntax is "weird" I meant that, instead of being wrapped in a pretty method and making tings more standardized, you have to directly output it. I agree that, in some places, the API is probably better. The Java API hasn't seen a complete overhaul since... Well, since ever, so that means that there is a lot of legacy code still there. They are slowly fixing all of these as they update Java and notice the older bugs, but they still haven't fixed them all, so some things are weird. Thanks for not getting mad, a lot of people don't realize that opinions are normally unique to people and are not equivalent - or, for that matter, immutable - all the time. I am sorry for getting C++ and C# confused, but, like I said, I haven't programmed in either for about a year, or more. C# does seem a lot more like java, so... I think I may start learning C# as soon as I find a decent IDE. Any recommendations? I think there is an Eclipse for C#, should I use that?
Oh, and before you dis everything but C++ for 3D games, check out Minecraft. Or Runescape. Java has the built-in libraries, and C# has .NET. Both work fine for 3D games, and you don't need to worry about ridiculous things like not calling a method three times when you can call it once, because the Java compiler fixes those for you so that you can worry about more important things. EDIT: TBH Runescape isn't true 3D, just rendered as such. Still, it counts.
Ooh, DirectX is Windows-only though. That's gonna be a tough one to port over. Aren't there other libraries in C# though? I know there are many in Java. ^*wink* But if you do want to stay with C#, Wii, then that's your choice.
You can already do this: Object v = "test"; Object v2 = 5; Object v3 = Arrays.asList("a", "b", "c"); and System.out.println(v + v2 + v3); will print out test5[a, b, c] But Java has types for a reason. You really don't want to do this, because types make large programs far more maintainable with greater guarantees that you won't break things when refactoring. Have you ever had to deal with random ClassCastExceptions taking a value from a HashMap which has mixed type values because somebody decided that was easier than creating a full fledged class? Not fun.
http://ss64.com/bash/
Does it do multithreading? Scheduling? Any of the [unix/linux commands] (http://oreilly.com/openbook/debian/book/appe_01.html)?
ffi support? 
I know that only checked exceptions must be declared, but that was one of the differences between the two methods - one has caused NPE, the other hasn't. So I mentioned it only in the hope that it might help you to find the root cause. I'm not very experienced with the bytecode, so I don't know how it is different on that level. Thanks for the license text, I'll add the reference to my page.
autocompletition of commands and parameters ?
Ooh, great idea! EDIT: When you say this, I take it you mean that I should do something like what Minecraft's command box has (When you press TAB it fills in the rest of the parameter or command that it thinks you were typing)
No, it is not posted on Github, but I will do that once I get home. I will also be posting the link once I put it up there.
Why would it need multithreading? I was more looking for things that I could implement as user commands. If you mean put the thing that executes the command on a separate thread, then good idea, and that will be put in. EDIT: I will go through the commands at the link you gave once I am home, but for now are there any you feel that I should put in?
Awesome list, thanks.
I am not looking for one, only looking for suggestions of things to add in mine.
At my current employer we are moving from Swing to JavaFX for one of our applications. The main things we gain are modern UI features like multitouch and gestures. Think swipe, pinch to zoom, and tap to scroll. These are not coming to Swing. Swing is done evolving and has gained all of the features it will ever gain, so in a sense it is an evolutionary dead end. JavaFX also provides an evolutaionary way out of that dead end, rather than a revolutionary way. With FXPanel you can write parts of the app in FX, and migrate it piecemeal. As opposed to the big bang re-write of an app in a new toolset. Big bang rewrites go bad, which is why WordPerfect for Windows lost so much ground to Microsoft Word, Word did it piecemeal and WordPerfect did a ground up rewrite [Citation Needed].
The official line is that JavaFX is the replacement for Swing, but that Swing will be a part of Java for a long time. See http://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html
I recently had the (dis)pleasure of working with JavaFX on a brand new desktop application. There are many things that are absolutely fantastic. fxml views are comparable in practice to the xml files used to generate Android views (if you've done android development), but has the added benefit of being injectable into your controllers directly instead of having to look it up by the ID (which is really syntactical sugar because the @FXML annotation requires your class member name to match the fx:id, so it's really a lookup, not a true DI style injection) Anyway, I digress... my biggest complaint is around the lack of "full-featured" details. For example, you need to use AWT/Swing to have a Taskbar Icon in windows. There's just no JavaFX equivalent. It's not impossible to do, but it's annoying to say "Hey, I'm going to do Java FX!" and then end up writing swing code again because you have to. Another complaint: Mac support sucks! Well, not really, but yea. The "taskbar" in the mac (upper right) is not supported either, but I don't know of a good workaround there so my JavaFX app on a Mac needs a whole new paradigm :/ And the WORST thing of all: your mac application has the name "java." Yep, the applicaton name in the upper left hand corner? ***"java"*** lower case, and no good way to change it. There is a JIRA - [RT-22988 ](https://javafx-jira.kenai.com/browse/RT-22988)- out there for this to be fixed, but damned if I can release this F-ing app to our customers before I find a workaround. I may have to resort to putting a Swing wrapper around everything (which is the workaround most use IIRC). I'm considering just rewriting in Swing &amp; MVP, but I don't really want to do that either. Anyway, JavaFX shows promise, but it's not prime time yet.
The ability to SSH into your "OS" with Apache MINA SSHD.
Maybe I will be flamed by this, but on our projects we went back to C++/Qt for multi-platform projects and WPF for Windows only projects. I do like JavaFX though and hope it gets a better treatment than Swing.
JavaFX is out-of-the-box in Java 7 - so it's a standard part of the JVM just like swing is. Pretty mainstream to me. 
What is SSHing? 
I already knew this, but the thing is if JavaFX is not adopted by the community there is no way it will fly. It will end up dead, full of bugs never found that cripple any adopters specific needs. 
Oh boy...
As per some of the other comments, it seems that JavaFX is more useful when paired with Swing currently. This is definitely what we would be doing. We have a company specific application frame work that we have been implementing in Swing. And from what you are saying is that it is still in its almost infantile state. Do you know of other adopters of the library? 
Agreed, and that is why we are considering it at this juncture. If we start writing components for it now then we have them down the line rather than having to fully switch over. But the concern is still there that javafx might die off and not fully catch on if you will. 
To me that is Oracle trying to push a technology. I am more concerned about the users of the technology than the distributor. If no one uses it, then it will die sooner rather than later. 
I don't think you will be flamed. Using java is not directly my call. What to use within java is more flexible.
&gt; Are you tired of null pointer exceptions Shit, this would have been helpful during CSE 143 with Linked Lists.
XNA is a managed DirectX wrapper, so he won't be able to port it anyway. OpenGL is the only option if he wants cross-platform compatibility (as far as I know).
The '&lt;&lt;' is an overloaded operator. You might think that that's not a good idea but you have one for Strings in Java: Instead of: &gt; "hi".concatenate(" there"); you can do: &gt; "hi" + "there" The '&lt;&lt;' is the same idea. It's just like the + for Java's Strings. .... Anyway, finally, c# only has one IDE (well, not really, but...), and it's made by Microsoft. It's called Visual Studio. If you like Eclipse though you'll hate VS probably; they're pretty much polar opposites. The most similar Java IDE is IntelliJ's IDEA. I wouldn't recommend using the Eclipse plugin. It's for quick changes when you're primarily working with Java. To really learn and use C# you'd need VS, really. Good luck.
But it is questionable if it is worth it.
Very good info. I'll check it out. Just to be clear, this takes care of the top right menubar or the top left application name issue? EDIT: As it turns out, I've used the maven plugin to assist with PATH issues when launching the jar via java -jar APP.jar.
This is not 100% true. There are some PATH issues that have to be dealt with which are fixed by using some of the oracle packagers (I have no experience with this). I've used a maven plugin to fix the JavaFX 2 path issues. Also, JavaFX is included in all versions past 7u9 for Mac IIRC.
Top left menu bar. And launcher/doc icon. The only way I am aware of to get a top right notification icon is to use JNI.
I've been using JavaFX in a big project at work and I have to say I'm very pleased. The library in itself is quite good (I've also used Swing, GTK and Qt a lot) and has all you need from a modern GUI toolkit. I've been an early adopter of JavaFX 2 and I can assure you it will be the best Java GUI toolkit out there when Java 8 will be released. You should also check efxclipse out, which includes FXgraph: a JSON-like DSL for FXML with instant preview. This will make your life much easier. I think the community is adopting JavaFX at a nice pace, it's very easy to find code examples on the web these days and while there is still some bugs, I never failed to find an easy to maintain workaround. 
Mind explaining it though? There are quite a few things that I don't know about programming, and SSH is obviously one. I know the term but I hve no idea what it means. EDIT: Googled it, and apparently it means being able to run the commands from another computer. If I can figure out how to do that, then I will. Until then, it won't be put in, and it will be fairly low priority. EDIT 2: Honestly, if I keep this a shell instead of an OS, I probably won't even add SSH or have it on the list.
I agree with this. IMO, thick client and standalone application development in Java is going to live or die with JavaFX. As touch and HiDPI screens become more prevalent, Swing is going to become less and less practical as an option. It's too bad Oracle dropped mobile support as a goal for JavaFX. Right now, everyone that's doing desktop development is being forced to choose a new technology for mobile development. I think JavaFX would have been the logical choice for almost everyone because it would have provided a really easy, self-paced transition. If we get a JRE on the major mobile platforms then I think JavaFX will do very well. If not, I share everyone's concerns. Really though, what are the options?
Having to annotate every object makes this pretty useless. It's as likely that I forget the annotation as that I forgot a null check frankly. Maybe it should assume everything is @NotNull unless you annotated it as @Nullable. That would be more sensible. Code properly annotated to actually be fully tested would likely be 25% annotations. Moreover it discusses adding annotation to libraries. Seriously?? I wonder how much work a Spring app is to annotate properly... It's worth pointing out that there is some good tools. Turning on all the IDE checking and running static code analysis like FindBugs (and to a much lesser extent, CheckStyle) will find a whole bunch of problems. No, it's not bullet proof. That's why we have unit tests (and coverage) and standard testing.
Yeah, jfxrt.jar isn't going to be on the bootclasspath until Java 8 IIRC.
Incidentally, Mr. Spammer, this is a Java IDE. Nowhere near what I am making, nor is it what I was asking for.
Can't you annotate package-info classes?
Right. I assume people are using the newer Java. In Java 6 you need a separate download.
Probably the best part is the comments, with some Play developers discussing the problems with the author.
Eh... There was also a pretty big marketing campaign by sun to get it into the public eye. It would have died an early death had it not been for how hard sun pushed it. That said, some of the lessons we learned from java have benefited a whole host of new languages.
Go read up on GPL licencing and then get back to me. The only way oracle could charge over keywords is if they were Trademarked or patented. Since they cannot fit in either category (Trademarks because their keywords are in the common vernacular and patents because the GPL prohibits charges based on patents on derivative software). What they could do is develop new non-free apis and try to get developers to use them. However, I doubt that would go over so well.
3) Java has Rich API Yup... as a result it has some nice areas and some crusty areas. A rich API can be a doubly ended sword. One of the nice things about languages like C and C++ is that the standard libraries are pretty small. You don't like the API for the Json parser you are using? Well trade it out for one that is better. You could do the same thing with java, but it is less common to use something that does the same thing as a built in API. 7) Java is FREE That is just grabbing at straws. I can name very few non-free languages (Matlab?) And they certainly aren't wildly popular... Heck, even with Matlab there is a free alternative in a similar syntax (Ocative). 9) Java is Platform Independent Ehh... I really don't see this as such a huge benefit. I guess it is of some benefit in the android arena, however, beyond that there aren't a whole lot of places where changing platforms causes a whole lot of headaches. Maybe... MAYBE with libraries you could see issues there, however, most libraries in languages like C and C++ are pretty platform independent with a few that focus on fixing inter-platform problems (Boost for example). 10 ) Java is Everywhere Again, a weak reason for java being the best language out there. IE7 is everywhere, does that mean it is the best browser ever? Windows is everywhere, does that make it the best OS ever? C is in more places than java (especially given that most java JVMs are written in C/C++) does that mean that C is better than java? There are good things about java (mentioned in the article) but I wouldn't call it the best language ever. It has its rough edges just like any language. In fact, from a pure language standpoint I would say that scala or C# do a better job and have fewer rough edges. Even a lot of the newer languages like Rust, Dart, or Go do a good job of learning from some of the burdens of java. Most of the reasons for "Best language ever" are pretty weak as there are many other languages that have most of them listed. Probably the only places where Java trounces most all other languages is library support and tool support. Java is a good middle of the road language. I don't feel disgusted working with it, but I know there are greener pastures out there.
Yes.
Nilanjan's comments are solid. I've got a large/complex Play 2 Java app in production. We've been very happy with the framework. 
I'm working on an online course and it's chapter 38 on the course. Unfortunately the examples they use are run through web pages and look slightly different than mine because I am trying to run mine in BlueJ.
If its publicly available do you have a link?
No Problem, glad you got it figured out. If you have any other questions feel free to pm me, I work as a tutor at my college for the first 4 java classes.
Awesome thank you! I really appreciate it.
If I ever implement something like this into a program it'll be for a very specific reason (and I doubt it'll be laziness). At any rate I think it would be pretty fun to play around with something like this. 
To be honest it was just a thought but all these comments are great.
Yeah, well, not really... Sure they'll happily execute build.xml for you, but that doesn't help with the IDE knowing the project structure, so it can present navigate-into, call-references, type hierarchies to the user.
Yes, like Bash.
The Play developers were good to respond, but none of their comments helped my client. And then when I replied to their questions they never answered, even though I notified them via twitter. Nilanjan was especially wrong when he said &gt;You know you can always override the application.conf setting by passing -D command line arguments.This should be good for dev ops to provision Play applications. Yes, we thought of that, but if you put sensitive information in args like that, all someone need to is type "ps -ef | grep play" to see it. So if storing sensitive info in a file is not acceptable to my client, why would this? I do still like the framework and I am still using it. It's just frustrating when a framework is so opinionated that it actually impedes a developer from doing something, even though the framework developers thinks it's "wrong." On the other hand, I'm sure this "short rope" is what helps make development so fast.
There are a couple good plugins for Maven, if you can find them, they are documented and you can figure out how to use them. Besides being obtuse in its operation, Maven is one of the most poorly documented projects Ive ever seen. I think taking the documentation down entirely might be better documentation.
There are two types of developers. Those who have read [Better Builds with Maven](http://www.maestrodev.com/wp-content/uploads/2012/03/betterbuildswithmaven-2008.pdf) and those who haven't. 
The latest release should eliminate your exceptions, but the try/catch/finally handling in at least one of your methods comes out totally wrong. I guess that's progress? Anyway, the code you posted did help me track down at least one unknown bug, so thanks!
actually it's a shell(full of commands, wizard Tasks, autocompeletion... ) to automating some programming tasks I thought if you take a look at it's behavior maybe you find some idea. BTW I'm not spammer 
Any plans to provide a basic GUI for it (similar to JD-GUI)? 
From what I understand from following the maven-developers list for over a year or two now is that the transition of Aether into the Eclipse foundation took much longer than expected and put a damper on development. Maven decided to use aether as the core for dependency management -and that's a major win for everyone (including gradle users) because it lets other projects tie into dependency resolution without having to rely upon maven. The downside is that the eclipse foundation takes FOREVER to complete their legal review of new code. Maven hasn't been able to do a major release because they've been waiting on the Aether stuff to get unblocked. Around 3.1 there was some bickering on if they should release it or just move forward because the 3.1 release was really just internal refactoring (switching to use slf4j - and then a long debate about whether to use slf4j-simple or logback - I think it eventually settled upon using a version of slf4j-simple that Ceki himself patched to take care of some of the edge cases that were keeping it from working as the logging framework) As far as I understand, the 3.1 release will still not be that big of a deal to end users - it's mostly internal refactoring. 
Well, looking at the link you gave me originally, it appears to be an IDE. I didn't realize that it wasn't at the time, so I commented what I did. I looked it up though and you are right, it IS more of a shell that helps you make Java files. I was still looking for things like suggestions, though. I have seen spam bots posting what are essentially ads before, and though you might be one. Sorry if I offended you. 
Despite what the Play folks say, Java is definitely a second class citizen in Play. In their defense, it is a second class citizen because of inherent limitations in Java compared to Scala. They might spend the same amount of time on the Java and Scala sides, but to make things as nice for Java as it is for Scala, they'd probably have to spend about 4 times (&lt;-- figure directly from my nether regions, like all of my estimates) the time on the Java side of the house.
I have yet to see a compelling reason to leave Spring for any other platform. It's been remarkably durable and flexible for us. I think of upstarts have great ideas, but just don't appreciate how hard it is replicate the magic of Spring.
So, if I understand correctly, you want it so the user has to enter database password in the web app before doing anything useful?
Mind my asking why all the downvotes on the question? I was looking for ideas.
Most IDEs I've used do their own project management, they don't rely on the build tool to do it for them. For example, I've never seen an IDE I used with a C++ project use the makefile it generates to know the project structure, the IDE knows the project structure and creates the makefile from that. Just because Eclipse might decide to interrogate a Maven POM file to learn about the project structure doesn't mean Maven as a build tool is more supported, just that the Eclipse IDE chooses to use it differently. Too me, the build tool should be a build tool, the IDE should manage the project structure.
Now on Github, see above.
Googled FFI and looks cool, but that's not high-priority. If I do it, it will be either Python or Lua that can be run through this.
Unfortunately it doesn't quite work like that in practice. When you point an IDE to a directory,which has arbitrary sub-directories to several levels deep, which contain many different files, etc..how should it know which of those are part of the "main product"? For instance there may be a directory with jar files. Should the IDE put every jar file it finds on the class path and link against it? What if some of those are test dependencies? Same thing for a web project regarding the web root. There may be several directories that contain (say) .xhtml files for a JSF/Facelets project. Some of these may be designated as top-level views for the web root, some may be includes or separate resources. Some may not even be intended for the final artifact at all. How can the IDE know? Without knowing the structure, the IDE can't really provide services like the ability to control-click into an EL binding on an Facelet that brings up the editor for the bean behind that binding. Without knowing that structure you can't control-click on the outcome attribute of an h:link in order to bring up the editor for the view that outcome resolves to. Every IDE has its own project structure for this. Maven is the only common structure that's supported by e.g. Eclipse, Netbeans and IntelliJ (although there are some conversion tools available, e.g. from Eclipse to IntelliJ).
Not to mention the fact that if you want to stay with Java and not move to Scala, that it's just a flat out better choice. Oh, and you will have much more luck using it for work because it's just what everybody is using. One thing I've noticed about Java frameworks too, is that prescriptive/opinionated frameworks tend to have a much lower adoption rate over the long term. If a framework starts to be perceived as lacking flexibility or keeping Java programmers from working in an idiomatic way, then it's ultimately going to get pushed to the side in favor of something that goes with the grain better. That seems to be why Spring took over so much of the market back when JEE 5 was the leading contender; developers just "got it" faster. If Play 2 and beyond can be the natural choice for Java 8, which is going to obviate most of the need for Scala anyway from what I have understood so far, then I see great things ahead for them. Otherwise, they're just going to be another niche mostly used by SMB and maybe start-ups.
I agree with what you say, only one comment: &gt;That seems to be why Spring took over so much of the market back when JEE 5 was the leading contender; developers just "got it" faster. There's no such thing as JEE 5, it's Java EE 5 ;) But Spring took over much of the market when J2EE 1.4 was the leading contender really. Java EE 5 was Sun's 180 turn to focus on easy-of-use. It took a while for Java EE to be rediscovered, not in the least because Rod Johnson was pretending in his talks that Java EE was never released and that J2EE 1.4 was still the current version that had never advanced. Another reason was that the most popular AS, JBoss AS, was very late with their Java EE implementation.
Having used Play with Scala for the last year or so I decided to try out the Java side of things. I lasted about a day before I decided never to try that again. As much as they like to try and maintain the Java side Play is a Scala framework designed for use from Scala first and foremost and anything else is just a pure substitute. 
&gt; There's no such thing as JEE 5, it's Java EE 5 ;) :P &gt; But Spring took over much of the market when J2EE 1.4 was the leading contender really. Java EE 5 was Sun's 180 turn to focus on easy-of-use. True. I wasn't quite correct there. JEE ( &lt;- see what I did there) 5 didn't really penetrate very far. I know v6 and beyond have probably corrected well enough to make up the difference, but I don't see them taking up much of Spring's market share. I see them getting the migration stragglers from J2EE and some new market entrants that want to go with a safe long term choice. 
Great idea. But if the encryption is non-reversible, then how would I check if it is correct? Would I reencrypt it the same way and see if its the same? I plan to use a modified Python or Lua as a "scripting" language, though better ideas are welcome. Is there any way I can set the STDOUT for programs? Because if so, then I will definitely have programs able to output to it, though only when running the programs through the shell because otherwise it could interfere with other settings. TBH I think I am leaning towards utility programs with a few shell things implemented, like scripting and displaying program output on the screen. What would the passwords do, if I put in the storage? Would they just be a list, or would I have some sort of admin password which (when entered) allows you to do more stuff which isn't normally accessible? If so, what should not be allowed without admin access? Yeah, its a lot of questions, but I want to make sure that I understand what you mean and, for that matter, get the best ideas.
Well I think the big thing that we've all been waiting for in 3.1 is the version-less parent pom references, and the pom snippets (that is, include-like syntax for common pom elements)
In test configuration? Absolutely not. In test execution, for integration tests, yes. I'm talking about someone who is deciding, for example, which tests to run based on a call to a mysql database. 
I think the difference is that once you learn maven, you're not guessing. You can go into any dev shop that uses maven, and know how to be immediately productive. If you go into a shop that has a very customized ant build or very customized gradle build, you don't know how long it's going to take to learn all the "gotchas" of the process. 
Those aren't even on the list of features for 3.1 though, are they??
lovely thumbnail
Thanks for the help! 
That's good to know. Because basically Oracle tried to patent the current APIs for Java, like patenting the language's keywords. The only question is what they might also file for regarding licencing, in order to profit from Android, and eventually something they could use to profit from any company that uses the current Java APIs from Open JDK.
Those methods listed I assume to come from Applet/JApplet? In that case... * init(): called by the browser so that the applet can initialize itself. This usually takes care of getting everything ready for execution such as setting up the display, initializing fields, finding and loading resources, etc. * start(): called by the browser to actually start the applet/game. Here is where the actual game logic starts to happen (reading user input and responding to it). * paint(Graphics g): This is where you put the code that draws on the applet's screen. * update(Graphics g): As the applet runs, the state of the game constantly changes (e.g. the background, player position, etc.). You would call this method to cause the applet display to show the changes. I would prefer a call to repaint(), since it handles the creation of the Graphics instead of the task falling to you. The best way that I would conceptualize the Graphics object is as a combination drawing pad and pen. The object itself acts as the drawing pad, while the methods like drawLine and setColor acts as or modifies the behavior of the pen that is used to draw. Hope this helps. EDIT: formatting
The easiest way to find the mod of a number is to perform division with remainders. The remainder you find is the solution to the mod of the number. 16 / 6 = 2 remainder 4 Therefore: 16 % 6 = 4 That's the best I can explain it. Hope that helps.
Yeah I think I worded my question poorly. I understand that its the remainder and I know how to use it when programming, but I don't know how to do it in my head quickly enough to take an exam where I will have to keep using it for loops and whatnot. 
I don't know the answer, but you can also do this: for(itemType item : myList){ item.use; }
2 is faster but you may never notice the difference. 
Internally this way I believe uses an iterator, which, depending on the internal data structure (linked list for example) could really speed up your program for large number of items in the list. Without this approach, you would need to call myList.get(i) for every item, which would take a really long time because it has to traverse the linked list to get to the ith element. With an iterator, it keeps track of the last item it gave you so you only need to iterate through the entire list once (for each item). 
bloated. JSON is about simplicity. 
I'm the same way. Multiplication just seems to come a lot more naturally than division.
Seems like [method 1](http://stackoverflow.com/questions/1923795/java-method-invocation-vs-using-a-variable) is the way to go. &gt;In modern versions of the VM, simple getters that return a private field are inlined, meaning the performance overhead of a method call doesn't exist. Method 1 reads much more clearly, and you are also (negligibly) saving on memory by having one less variable.
I think of it as multiplication, if you are doing 85 % 6 to use your example, I know that 6 10's are 60, which leaves me 25, I know that 6 4's are 24, which leaves me with 1. Since 1 &lt; 6 that is the modulus. To put it another way, 85 = 6 * 14 + 1. This seems trivial but it really helped me think about it in a non-division based way, I grasp multiplication much better and the rest is addition and subtraction.
good luck man, i have it the same day, I think these guys already explained it to you but I just wanted to say good luck 
In your case it doesn't really matter, since .size() is an O(1) in most cases because the size of the lists are stored as a field inside the object. HOWEVER, you may be interested in reading [this article](http://www.joelonsoftware.com/articles/fog0000000319.html) on Strings in C. This is relevant because you can see Strings as a list of chars, and in C they are null-terminated (as in the size of the list is not stored anywhere so you have to iterate through the list counting each element). This causes completely terrible runtimes. Tl;dr - Use #2 if the result of the condition is constant for the duration of the loop or if calculating the condition takes longer than O(1)
Hey thanks! Same to you!
think of it as clock calculus. 5 hours after midnight (our zero or our 12 in this example) is 5, so 5 % 12 is 5. but when you get to twelve you start again so 12 % 12 is 0, 13 % 12 is 1 etc etc
The advantage of this approach is that the code (and any subsequent reader of the code) doesn't need to care about what type of item myList is, just that it implements iterable - so if for example the code needs to be modified to switch from a list to an array, then the loop's doesn't need to be modified. As a standardized way of iterating through a list of items, the "for each" loop that you've put is the way to go. As a side note there is a third way of writing the OP's code, which reduces the scope of the myListSize variable: for(int i=0, myListSize = myList.size(); i&lt;myListSize; i++) Still inferior to the for each loop though.
Maven is a project only its mother could love. And she hates it! But for better or worse, Maven is pretty much the only way that lets me publish a project that can be imported by Eclipse, Netbeans and IntelliJ. It's pathetic I know, but there barely is anything better :(
My university has switched all their Java UI programming courses from Swing to JavaFX2.0 this year - and so far I (as a student) don't have much complaints. Sure, there's still a few quirks here and there - but all the necessary things are in place and offer a very good replacement for Swing, while including a vast set of extra features and gestures that Swing won't support (like /u/shemnon said; things like swiping, pinch to zoom, etc). Working with the FXMLs in combination with the standard Scene Builder is a breeze to me, and really allows a proper separation of design and implementation. Personally, I expect (and hope) that JavaFX will become mainstream; probably not today but soon enough - it looks good, codes well and supports the latest technologies. But then again, adoption of new technology/languages/design patterns is hard to predict in the IT sector , and generally the whole process takes longer than anyone expects because of companies/programmers sticking to technologies they know work. That's why things like COBOL still exist, no?
It's a great way to introduce Java developers to Scala, though. ;) 
My client is the one who wants this, not me. They have very high security standards and, apparently, only allow a small group of people to have the production passwords. After their current (non-Play) app is deployed, one of those people runs a script which prompts them for a password and uses curl to POST the password to an unpublished endpoint on the app which updates it and recreates Hibernate SessionFactory. I recommended just leaving encrypted passwords in the settings file. Then we should be able to intercept the Play start-up routine and decrypt them before the EntityManger is created. I say, "should" because I'm not sure if this is possible with Play yet. 
I would love to see Groovy take the place of Java in Play, but I doubt that will happen given its dynamic typing (I'm aware of play-groovy). Also, the Play Scala templates are just awesome. If I have a choice between JSP and Scala templates, the latter would be my choice every time. I'd love to see them moved out of Play into a separate project with integration for JEE and Grails.
Look at: http://mvnrepository.com/artifact/org.springframework/spring-core/3.2.2.RELEASE Maven needs 5 lines for single dependency while everything else needs just one. 
My impression of Play is that it's not meant to replace Spring. If that is its intent, it has a long way to go. Our team did a spike on several platforms, including Spring and just plain JEE. The compelling thing about Play was its incredible development velocity. Using it is like an exercise in the 80/20 principle. Things within the sweet spot are very fast and easy to accomplish, but the other 20% is what will gobble up your time. So, it has been a trade-off. So far our app has been very well received. I'm just hoping we don't hit any insurmountable Play roadblocks. 
Thanks a lot! I appreciate this concise explanation
It's half way between declarative and programatic, but struggles to excel in either. It starts off with declarative dependencies. But they are very limited. You can say running tests depends on compiling tests. Or you can say project A depends on project B. But not both types of dependency can be represented. You often end up needing to use properties. But these can only be set once. Even if you are in a function. So you either have to rely on macro args defaults, or spawning a new ant call, which is slow. I guess if you try hard enough you can do anything in ant, but just not in a performant or coherent way. I've seen hundreds if lines of macrodefs. And I've seen projects that build the ant scripts via XSLT and a base script and module definitions. All horrible cludges. I thin the main problem with any is that is lacks a coherent and powerful model from the start. All the tasksdefs, macros and ant calls in the world can't fix that. 
Is groupId represented as a String in code or by a model object? Sure it's more verbose. But formatting is easier as it's one element per line. But with attributes normally they are multiple per line in an undefined order and start to wrap at some point. Even if you don't complete like the result you've got to admire the intent of simplicity at work here. 
&gt;Is groupId represented as a String in code or by a model object? String. More importantly, it's represented as a string in the XML. It cannot have attributes or child elements. Therefore, it belongs in an attribute. &gt;formatting is easier as it's one element per line. But with attributes normally they are multiple per line in an undefined order and start to wrap at some point. * Nobody's stopping you from wrapping attributes onto multiple lines. * The end-tags are still worse. * `org="com.example.whatever" prj="awesome-library" ver="1.0"` does not need to be wrapped. &gt;Even if you don't complete like the result you've got to admire the intent of simplicity at work here. Fair enough, but it seems to cause an even worse problem. But anyway, not using attributes is not the only thing wrong with the POM. Do you care to hear my other opinions on the subject?
Most everyone recommends Kryonet, and Netty is pretty good, too. I've looked at both and they aren't bad. I'm working on my own at the moment, though.
If you don't want to re invent the wheel, there are several dev libraries that already include networking anyway, addressing your question: Apache MINA and JBoss Netty are todays best
I use Netty, and like the level of customisation you have with integrating it into your application. Performance of Netty is very good, have been able to support thousands of connections, gigs of throughput and hundreds of thousands of transactions/second using Netty with very good CPU utilisation. Kryonet is also good... You can't really go wrong with either one.
I much more ofter read pom than write it. I have never seen pom.xml with dependencies fitting on single screen. Maven dependency syntax is not only more verbose but less readable compared to other solutions.
So basically he wants Java to copy Objective-C?
Note: this is a 6-years old article.
True, but I think it's still largely valid as "something" for properties beyond the Javabeans convention is still welcome.
The parts that are getting open sourced will be 100% useless to the average developer. The original [is here](http://fxexperience.com/2013/02/february-open-source-update/).
I didn't say there's anything wrong with that. I was just pointing out that what he's describing is what Objective-C does, and is a really longwinded way to say "lets just copy this from ObjC".
Yes, the community around JavaFX need to get their hands dirty and make the iOS and Andriod sources usefull to the average developer. But this does not mean Oracle is dropping mobile support. So, just as sproket, I'd like to see some citation (and I'll happily concede the point if you provide one).
Please do elaborate. I may well agree with you. Maven is far from perfect. 
Actually, the very first example has a pretty insidious side effect when he changes implementation: Your code could set points with double precision before. Now it *looks* like it sets them at double precision, but is actually single-precision. Your code could have been using the point class as a way to store points and had reasonable expectations about behaviour, but suddenly things have changed. Obviously this is just an example, but I always start getting twitchy when I see "examples" that are bad, in an article proposing major language changes.
Well, my take on it is that we (and you) have 2 choices. Stay with Java and hence adopt JavaFX, or find some other platform (Qt, Browser, what have you). The reason is that I see no path for Oracle picking up Swing again, and therefore I see no reason why the community would chose Swing. If the community wants to do Java on the desktop, I see JavaFX taking that place. Sure, JavaFX can die off, but the only reason would be that Java Desktop died off so Oracle sees no point in investing money there. It seems unlikely that they will go back to swing after having failed with JavaFX. In short, if JavaFX fails, you're pretty much "doomed" either way, so why not stick with JavaFX to help make it *not* fail.
Welcome! Did it work after the change?
I don't think it would be easy to refactor the type if it's being used everywhere already anyway. If he'd done it with the property syntax he proposed, he just had to change 4 less variable / return types from double to float, but still all the other occurencies of this in the project. Type refactorings are always tedious, IntelliJ can help you with it but if you go from one more complex type to another, this will always lead to issues such as some methods not having the same name in the new class type and such. I think the real motivation behind this is still not having to type out so many getters and setters, thus making java less verbose. On the other hand, you can just use your favorite IDE's "Generate Getters and Setters" tool and poof - done.
Netty is the way to go. Sometimes it's harder to use compare to others because it's designed to be the backbone implementations for so many high perform servers out there.
There are a lot of frameworks in Java (like JavaBeans) that do this at least in JSF.
Okay, here goes! --- # Flatter tree Currently, the POM is rather deeply nested. All `&lt;dependency&gt;` elements go under a `&lt;dependencies&gt;` element, for instance, and a whole bunch of unrelated stuff goes under `&lt;build&gt;` for `$DEITY`-knows-why. The reason Maven has repeated elements like `&lt;dependency&gt;` under containers like `&lt;dependencies&gt;` is because of restrictions imposed by XML Schema 1.0: you can't say that a `&lt;project&gt;` *must* have an `&lt;artifactId&gt;` and may have any number of `&lt;dependency&gt;`s in the same element without restricting which order they may appear in, which is silly. XML Schema 1.1 removes this restriction, though, so this issue no longer exists. --- # Plugin configuration should be top-level Currently, plugins are configured with a `&lt;configuration&gt;` element inside the `&lt;plugin&gt;` that brings them in. Instead, plugins to load should be defined at the top level and configuration for them should be on the top level with a plugin-specific namespace: &lt;project xmlns="http://maven.apache.org/POM/over9000" xmlns:toolchains="maven:org.apache.maven.plugins:maven-toolchains-plugin" xmlns:ap="maven:com.example.whatever:awesome-maven-plugin" &gt; … &lt;plugin prj="maven-toolchains-plugin" ver="42"/&gt; &lt;plugin org="com.example.whatever" prj="awesome-maven-plugin" ver="1.0"/&gt; &lt;ap:some-setting&gt;…&lt;/ap:some-setting&gt; &lt;ap:some-other-setting/&gt; &lt;toolchains:use-jdk version="1.6"/&gt; … &lt;/project&gt; This way, the POM is more declarative and descriptive. Plugin configuration should be all about describing what the project *is,* rather than how to build it, and allowing top-level, plugin-defined elements will help with that. It's also more concise, and there's no need to remember what has to go under `build/plugins/plugin/configuration` or `build/resources` or whatever… --- # Separation of non-metadata into other files The POM should be purely declarative. Matters like what phase to run a plugin goal in should be in another file. From now on, I'll call it `mvnbuild.xml`. Reporting should also be configured in a file of its own. Much of it already is, but an uncomfortable amount is still configured in the POM, which clutters it up. --- # Mixins, `&lt;parent&gt;`, and `&lt;packaging&gt;` There should be a way to bring in multiple chunks of POM information from external sources. For instance, if your project uses Scala and your organization has some specific settings for the Scala compiler that all projects are to use, you'd mix that in to your POM (and/or `mvnbuild.xml`, depending on the nature of the settings). Currently, the `&lt;parent&gt;` allows most POM settings to be inherited from one other POM, and the `&lt;packaging&gt;` binds plugin executions to lifecycle phases. This isn't flexible enough. The correct solution, I think, is to allow plugins to contribute to the POM and lifecycle. So, for instance, just by bringing in your favorite Scala plugin, it will configure Maven to run the Scala compiler at the appropriate time. Similarly, an organization can put its policies (copyright notices, licenses, whatever) in a "settings-only" plugin that all of its projects bring in. --- # Fewer phases, more granular order of execution Currently, each build lifecycle has a bunch of different phases, and which order build steps get run in depends on which phase they are bound to. There are two problems with this scheme: it's messy, and it's not granular enough. It's messy in that we have a whole lot of phases that start with `pre-`, `post-`, or similar. Rather than just an `integration-test` phase, there is that *and* a `pre-integration-test` and a `post-integration-test` phase. It's not granular enough in that it doesn't provide decent support for polyglot development. If you have a project with both Scala and Java code, you need to schedule the Scala compiler to run first, and the only way to do that is to bind it to `process-resources` instead of `compile`. To remedy both problems, I recommend that each lifecycle binding have a "priority" associated with it. Tasks with a lower priority get executed first. The default priority for manually configured plugin executions (hereafter "tasks") is 20+*n* (where *n* is the number of other tasks manually configured to run on that phase but given no priority, up to 30), and the priority for default lifecycle bindings (provided by `&lt;packaging&gt;` and/or mixins) is 0. Tasks with the same phase and priority may execute concurrently. By convention, tasks with a priority of -100 or below are preparation tasks (like what currently goes in `pre-integration-test`), and tasks with a priority of 100 or above are cleanup tasks (like what currently goes in `post-integration-test`). --- # Repositories should not have IDs Currently, every repository Maven can search for artifacts in has an identifier. There's `central` for [Maven Central](http://maven.org/), but other than that, exactly how a repository ID is to be formed is left unspecified. This is unnecessary. URLs are enough. When configuring a mirror for a repository, just give the base URL of the repository being mirrored (`http://repo1.maven.org/maven2/` for Central) in `settings.xml`. Example: &lt;settings …&gt; … &lt;mirror of="http://repo1.maven.org/maven2/" at="http://mvn.example.com/mirrors/central/"/&gt; &lt;/settings&gt; Why use the URL like this, instead of an abstract identifier? Because builds are already dependent on it. Every Maven project that depends on something in a repository other than Central must declare the URL of said repository in the POM. If the repository moves, and requests to the old location aren't redirected, those builds will all break anyway. In general, this should never happen anyway, in which case there's little harm in using URLs in `settings.xml` as well. Note that this is the approach (substitute one base URL for another) used by XML Catalogs. I see no reason why it can't work equally well for Maven. --- # Repositories as namespaces? A wild idea I just had was to use repository URLs as XML namespaces in the POM, and using the namespace prefix as another attribute on dependencies. That way, you can declare that a dependency should be fetched only from a specific repository. Like so: &lt;project xmlns="…" xmlns:my-repo="http://mvn.example.com/repo/" &gt; … &lt;dependency repo="my-repo" org="com.example" prj="…" ver="…"/&gt; &lt;/project&gt; There is the potential problem of a Maven repository having the same URL as an unrelated XML namespace and so colliding with it, but it seems to me that this is highly unlikely to ever happen. I mean, why would you use the URL of a Maven repository as a namespace, if not for something like this? --- # Anonymous projects Let's face it: not every line of code ever written is some big, important thing that needs to be put in a repository and published to the wide world. Sometimes you just want to hack something together, and while you'd love for Maven to take care of fetching libraries for you, you have no intention of uploading it anywhere. Projects, therefore, should be allowed to be anonymous: have no `groupId`, `artifactId`, `version`, etc. The `maven-install-plugin` and `maven-deploy-plugin` would, naturally, do nothing when invoked on an anonymous project. --- # Command-line interface This isn't strictly related to the POM, but it bears mentioning anyway. Maven's current command-line syntax has some problems. The only way to pass settings to plugins invoked from the command line is indirectly via defining properties. This should be remedied: mvn someplugin:do-stuff outputFile=target/stuff-that-got-done.txt Here, a command-line parameter containing an equal sign, if it comes after a direct invocation of a plugin goal, is interpreted as a parameter value for said plugin goal. Anything else you have Maven do in the same run (run a lifecycle, etc) is not affected. Another problem is that there is usually no such thing as a `run` lifecycle. I should be able to do this: mvn run …and have it run my project. This, however, can already be accomplished with a plugin; Maven itself does not have to be changed to support this. (Maybe I should write such a plugin myself…) --- Phew! So there you have it. Let me know what you think of all these ideas!
He mentions Eiffel in the article. Eiffel has had this feature since 1986, so neither Objective-C nor C# was first.
So these are all reasons why Java is a "great" language to *develop* in, but there is not a single reason that indicates why Java, the language, is the "one of the best programming languages". When you use words like "best" and "programming language" without throwing in something like "to develop for" in the title, you're leading me to believe you're going to talk about actual language features and how they compare to other programming languages. None of which occurred in this. Incredibly disappointing read. You can literally replace every instance of "Java" with "Python" and it would read exactly the same, while still being true.
You can create a single dimensional array of `int`s (32-bit) or `long`s (64-bit). Then, if you had an index `i` into the bit-array, the index into the `int` array would be i/32 and the index into the `long` array would be i/64, and the index of the bit would be i%32 or i%64, respectively, which you could use to construct a bitmask to determine if the bit is 1 or 0.
so... If I were to set the 4th bit to 1(true) would it look like this: int[] graph_array = new int[2]; //64 bits total graph_array[0][3%32] = 1;
Not exactly. Because each value is an int, you have to construct a bitmask, to a bitwise AND between the value in the array and the bitmask. If the result of the AND is 0, the value is zero, otherwise the value is 1. So, you'd be doing something like this to set: int bitmask = 1 &lt;&lt; i % 32; graph_array[i / 32] |= bitmask; this to unset: int bitmask = 1 &lt;&lt; i % 32; graph_array[i / 32] &amp;= ~bitmask; and this to get: int bitmask = 1 &lt;&lt; i % 32; boolean isBitSet = (graph_array[i / 32] &amp; bitmask) != 0; See [here](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/op3.html) for more information about bitwise operations in Java. EDIT: to set, you'd want to use bitwise OR, not AND.
You might check out a C [tutorial](http://www.cprogramming.com/tutorial/bitwise_operators.html) on this. Bitwise operators are commonly used in C for low-level stuff, so you'll find more information about it there. Same deal, but not as well documented in Java.
Very good introduction.
Please learn when to use "programme" and whentyo use "program". The two words have different meanings and you really do not mean programme.
&gt; given how easy it is to write your own TCP server/client using NIO Writing a *correct* TCP client/server implementation is far from easy. Just go with a library.
You ask how the IDE should know which of those are part of the main product, but I'll ask you, how does the build tool know? Either you tell it or the tools have to assume a given structure. Maven effectively forces a structure on projects, and because of that Eclipse can assume a given project structure. But change that structure to one that isn't proscribed by Maven, what happens? You'll end up going into Eclipse and manually setting classpaths and source directories as well as fighting Maven to get it to handle your builds. All of my projects follow a common pattern too, and all of my ant scripts match that pattern. For example, my project 'lib' directory (for jar files) is split between runtime (will be provided at runtime) and provided (needs to be with the generated artifact). My classpath setting picks up both to allow proper compilation, but my deployment target only includes jars from the provided directory when building the deployment artifact. Very simple. I can also have different source directories if I want, or have a single one with classes split by package and filter classes going into the final build jars based on package names. I do this for example when writing Webstart applications where I have client, server and shared code each requiring different build options (client jars and shared jars must be signed, server jars don't need to be). I can (and do) easily incorporate other steps into my build processes that will for example perform code generation and drop the generated source or compiled files into the proper targets. But if I need to or want to change my project in any way, my code editor doesn't care (actually use Emacs, not Ecplise) and Ant doesn't fight me. My environment doesn't care because when I'm coding, I use the IDE to write code, but I use the build tool to do the compiles and builds. The IDE (Emacs for me, Ecplise for you) simply delegates to the build tool that knows the project structure. I trigger the build command and can provide a target name and ant will run firing that target and doing what I want it to do. And my editor's local project file (prj.el for Emacs, .project/.classpath for Eclipse) is generated by the ant script so it is always up to date with the latest classpath and source path settings so the editor does know where everything is located. The only reason Maven may *appear* to work better with Eclipse is precisely because Maven doesn't really want to work with **arbitrary sub-directories to several levels deep, which contain many different files** and actually fights you doing that and Eclipse has some built in knowledge of the Maven preferred structures. So don't read this as "ant good, maven bad", it is meant to show that I disagree with your initial premise where you stated &gt;but that doesn't help with the IDE knowing the project structure, that it isn't the build tool itself (maven or ant) that allows your Eclipse IDE to know the project structure, it is the fact that your IDE is able to make assumptions about the project because the build tool pushes your structure into a common model and the IDE is aware of the common model. 
I figured out the first one. I still have no idea what to do on the second one. This is how you sort and reverse right? (sort) static void bubbleSort(int lenght) { Node n; boolean isSorted=false; for(int i=lenght-1; i&gt;1 &amp;&amp; isSorted==false; i--) { for(int j=0; j&lt;i; j++) { n=L.head; isSorted=true; for(int k=0; k n.next.data) { isSorted=false; swap(n, n.next); } } } } //fungsi penukaran static void swap(Node N1, Node N2) { int temp=N1.data; N1.data=N2.data; N2.data=temp; } REVERSE public ListNode Reverse(ListNode list) { if (list == null) return null; // first question if (list.next == null) return list; // second question // third question - in Lisp this is easy, but we don't have cons // so we grab the second element (which will be the last after we reverse it) ListNode secondElem = list.next; // bug fix - need to unlink list from the rest or you will get a cycle list.next = null; // then we reverse everything from the second element on ListNode reverseRest = Reverse(secondElem); // then we join the two lists secondElem.Next = list; return reverseRest; }
just out of curiosity, what kind of game are you developing?
Hi! I work at browxy and It would be a pleasure to help you run your code at browxy What kind of errors you were receiving? Any information would be really appreciated and thanks :) 
I think we all know what he means. The article content is what's important not the use of the word "programme"
Java is cross-platform too.
If this is for your own personal purposes, the best answer is probably to get IPv6 working on your network and avoid the problem entirely. Especially since the last IPv4 addresses are going to be handed out this year.
Surely you mean outside of the IDE. You need to use the JRE to run a java app.
http://docs.oracle.com/javase/tutorial/getStarted/index.html
Indeed. Sorry; typing fast on my phone.
Double click an icon and my GUI program runs. I've got several that work, but I can only get them to run via the 'Run' command within the IDE. 
For that, you'll want to create an [executable JAR](http://introcs.cs.princeton.edu/java/85application/jar/jar.html). Double click on the JAR and it will launch the program.
Thank you for your help *and* your patience!
No problem!
Thank you for your reply. Where would I find good exercises? I have the ones in HeadFirst, but they are very heard, some of them ask you to do the job of a compiler, and calculate through loops with pen and paper. I was thinking of following the Stanford tutorials (http://www.youtube.com/view_play_list?p=84A56BC7F4A1F852) but I am not sure if that's what you meant?
For a good crash course in Java, try the tutorial videos and exercises at www.codingbat.com. They also have a similar section for Python.
Thank you, I actually already graduated from University but not in software engineering :-( so I have to do it the hard way now. But I'll try to find some good exercises and will see where they get me. In HeadFirst Java I am currently developing a game that is command line based where the goal is to sink ships (they call them DotComs), which are on a grid, it kinda makes sense to do these exercises. What baffles me usually are the exercises that do not use the editor, but you have to do them with pen and paper. And they usually ask for example which code goes into which line. I usually don't understand them until I see the solutions and work backwards.
Try "javac -cp /home/../tomcat/lib/* com/web/store/*.java
Make the rover, hook it up to a computer with GPIO or make the rover usb compatible :D
ActionListeners, my friend. repaint(); during the actionPerformed method :)
Why discuss this at all? Properties at the language level are a bad idea. See C# for an example of that. Let's not follow our kitchen sink cousin on bad ideas. 
Thanks!
If you read the mailing lists you'll see the JavaFX guys are limited to contributing to the mobile effort on there own time. It's not like Oracle's going to do a press release announcing they *won't* support it. They're not preventing JavaFX on mobile, but they're not supporting it. What are they doing besides dumping a half working prototype on the community? Can I buy a support contract for JavaFX on mobile? 
http://thenewboston.com One of my favorite sites
I agree it's a tab that automatically loads when I start chrome.
HeadFirst Java is an excellent book in my option. I had some good programming knowledge before I picked up that book but after I was very confident with OOP and Java in general. Stick with it! Use the video lectures, other books, Google etc.
I would say that it's probably better for someone who has written a few programs first rather than diving strait into it an expecting big results. They do a few other books in particular Head First Programming which, although it uses Python, tries to teach programming from the ground up. A good beginners approach. I had to learn Visual Basic on the first year of my degree. Not that I'm saying it wasn't a good first language for teaching it's just it isn't especially useful job prospect wise. Couple that the rest of my time at university was spending using open source languages/technologies (Java and Python) I have no idea why they chose to do that. Also HTML is not a programming language. Not saying that to sound snooty or arrogant or anything but just saying so you don't get a markup language confused with a programming language.
Exactly. Programming is something you learn by doing. I wouldn't even consider getting any of those books until you have wrapped your head around Object Oriented Programming. And I wouldn't even consider getting a "For Dummies" book! :-) Here have a look at some of my first programming lab work [here](http://dropcanvas.com/#h8P8Gu3046uRxR) See if you can understand what the programs do. Better yet see if you can compile them yourself and run them. Maybe even alter then a little.
No worries. Feel free to message me if you have any queries I'm happy to help. Like most people I check this site daily so should get back to you quickly!
Thank you very much again. I am on here often too, usually more for entertainment and reading, this is the first thread I started.
ah thank you. This is what I was looking for, really appreciate the help
The piece you are missing is inversion of control (IoC). The idea is that you don't want your classes to go and get their dependencies, but rather have them injected to decouple one class from another. Sometimes you need this abstraction as part of the system design, but it is always useful for unit testing. If you try to unit test a class that internally goes and fetches its dependencies using static getInstance, you will have a hell of a time trying to isolate that class for test. Constructor injection, on the other hand, makes it trivial to wire in some mock objects as part of your test setup. You probably won't even need guice in your tests, save it for the more complex wiring of the integrated system. 
The idea is to explicitly declare your dependencies at construction time. This makes it easier to swap out implementations, e.g. to allow replacing with mock objects for unit testing. Singletons and other instances of the locator pattern are really not much different than static code in most cases. This makes changing the implementation more difficult. 
DI and the singleton pattern aren't anything alike. DI is for making sure that a class relies on a particular contract(the interface) rather than a particular implementation. Rather then having to write configuration code into the internals of the class, you can instead write a DI'ed class that relies on the DI framework to configure which implementation it will be using. It provides a separation between configuration and implementation, making code more maintainable. The singleton pattern is a way to make an object encapsulate a global variable without multiple instances. It's a terrible pattern however. It is subject to many issues, such as causing a race condition, and even not truly guaranteeing uniqueness for the instance (multiple classloaders = multiple non-shared instances). Don't use singletons except when: you actually only need one instance of an object, you use a proper implementation(not double locking, try enum or inner class), and that you are sure, beyond all doubt, that your code will never ever be hot-loaded into a server (multiple classloaders).
Thanks. So if I inject some object in a constructor and then I want to do some unit testing involving invoking that constructor, does that mean I must have two injectors/modules where one deals with the actual case implementation and the other deals with the unit testing implementation? How does that differ from just mocking with Mockito?
Typically your tests will call the constructor explicitly, not using a module there, but your real code will use the automatic injection.
Ah, in the test is where I mock the dependency and pass it in as an argument to the constructor that has its dependencies injected.
So in a test the point is to mock the dependency and pass it in to the constructor that we are using Guice on?
Because it's easier to test classes that are designed around DI (specifically classes that have I/O). It is useful to inject a mock dependency and isolate tests from the network and any storage media. Test isolation increases reproducibility.
Is this your homework..?
Practice questions to help me study for a final.
You should ask some specific questions you have about it so we can help you and not just do the work for you, it wont help you if we just give you code.
So what's the question?
that will work
Not when they're done correctly, a la Objective-C.
It's not enough to code to an interface. You also need a way to get an instance of a class without specifying the implementation. Singletons put the name of that implementation into the getInstance method, which is then used all over the place. Guice moves it out of code that anyone is going to depend on.
Maybe this might help: http://stackoverflow.com/questions/3333553/how-can-i-change-the-java-runtime-version-on-windows-7 
Singletons are pretty evil, actually. The worst about them is that it makes it neigh impossible to unit test your code.
"Any advice"? That's really, really general. I don't think you'll get any useful responses with a request like that. You should come back when you have questions.
The build tool knows because it's either scripted, like Ant, or because it's specifically configured (where the "configuration" can have defaults, so it starts of with a convention). Eclipse's native build system (.project, .classpath, many but not all files in .settings) describe this structure. From this description the IDE can build its internal (meta) model, as well build the actual (binary) artifacts. I'm not saying Eclipse's native build system is really good or anything, but if all IDEs used it, AND if there was a command line tool that could build Eclipse projects, there would be one less reason for Maven. With Emacs, I think, you are just editing source. Which may be fine, but I personally need a little more. With Emacs, can you navigate into an EL expression on a Facelet (like #{fooBean.bar}) so it takes you to "com.example.mycompany.view.FooBean#getBar()" in your editor?
Realy? A language from the 80's without private methods? We should use that as an example?
We've drifted away from the original point I was commenting on where you said: &gt;For better or worse, Maven is the only universal build system that's supported well by IDEs. Gradle support still sucks major suc in Eclipse. And I was replying that I didn't consider Maven as **the only universal build system...** that was supported, Ant is just as well supported. The build system is not what gives Eclipse the ability to navigate into an EL expression, that comes from Eclipse. Eclipse might be using the Maven structure to *know* what the paths are it should search, but that is where that ends. Because my Ant scripts can generate Eclipse settings files, using Ant I can give Eclipse the same information it needs. And as for whether Emacs can do that or not, Emacs has numerous capabilities should you want to use them, extensions like CEDET (intellisense), ECB (Emacs Code Browser), Semantic (Code anayzer) , Speedbar (Explorer like navigator), as well as standard grep tooling built in. So if someone wanted that specific capability in their Emacs world, that would be implementable. In fact it would probably be easier to add it to Emacs then it is to enhance Eclipse because Emacs extensions are eLisp scripts, whereas Eclipse requires you to write plugins.
good
I don't know if it helps you, but take a look into the [Robot](http://docs.oracle.com/javase/7/docs/api/java/awt/Robot.html) class of Java. The methods *keyPress(int code)* and *keyRelease(int code)* should fit some of your purpose.
I'm mainly hoping for a solution to entering text into a window other than the application (Being able to select another window (eg. Chrome) and enter say Slavic characters into it but using the original english keyboard with the application changing the characters from english to corresponding slavic characters)
Thanks for the help. I'll make sure i look into this.
That sounds like the exact thing you're trying to do. You're not going to learn if we tell you how. Break it into parts and Google it: &gt;Java capture keyboard input &gt;Java get keyboard focus 
* What elements are you hoping to accomplish on the front-end? Just basic browser elements? Properly used, JSP isn't really much more powerful than HTML aside from the fact that it allows us to dynamically (i.e. "conditionally") decide which content to include on the page. Any "fancy" behaviors are going to be provided via JavaScript (either your own or imported widgets such as jQuery UI ...both options will include the use of libraries such as jQuery). * What are you hoping to get out of the experience? A full-stack challenge to learn how applications come together through every layer? Are you hoping to expose yourself to framework implementation? Or are you simply trying to render a Java webpage (game) with as little architecture as possible?
"Enterprise" isn't a buzzword. I'm kind of surprised that you say you work on the backend of "a huge system" without coming across Java EE. But that's beside the point. If you're not looking to make an applet or a stand-alone application, you're probably not going to do it in Java. There are web frameworks, but to my knowledge they extend to the front-end through template languages that front-end developers can apply their HTML/Javascript to. If I'm right, you'll need to make your game in Javascript; there are some good game frameworks for Javascript and for HTML5 if you search around.
I'm hoping to further my skills as a professional developer, so a stack project would be preferrable. An idea for a browser game I had was an emergency dispatch type game, with a few graphical type elements thrown in. I suppose the core of what I want to know is how do I get a webpage, to communicate with Java classes? The way a lot of Web App frameworks seem to tailored seems to be far to advanced for my uses at this stage. I looked at spring and generated a project on Springfuse, but I found myself lost in this as I didn't really understand what any of the classes were doing, and I'd prefer to build the application from the ground up in the first place as I feel I'd learn better that way.
Buzzword was probably the wrong word for it, but what I mean is, for instance Spring allows you to build an enterprise application. This seems like it's far too advanced for me, when in laymans terms, I want to get a webpage to interact with Java classes, then return the results of said interaction back to the page.
Is it just me, or are screencast tutorials like this infuriating? I can understand sites like NewBoston which is geared towards beginner demonstrations, but for something like this, would it be so hard as to just *write the information out*?
Seriously. The official Oracle [Java tutorial](http://docs.oracle.com/javase/tutorial/) is far superior, better designed and more comprehensive.
I think your best bet still is HTML5 or Javascript for the game. If you wanted to add in user authentication or store data about players, then you'll want to add in a framework like Spring Roo or something else.
The HTML5/JS option! Web services eh? I have some limited experience with these, what would you reccomend I do to pursue this option? It also makes me laugh you shuddered at applets. I sugegsted dabbling with applets when I first started out (precisely 1 year and 8 months ago) all my colleagues who are senior devs (i'm an apprentice) laughed and said for me not to bother.
As always, the Java tutorials are [the best place to start](http://docs.oracle.com/javaee/6/tutorial/doc/bnayk.html). The NetBeans site has some really good [step-by-step tutorials](https://netbeans.org/kb/docs/websvc/rest.html), which can still be useful even if you are not using NetBeans.
You are on the right track. It is very easy to get lost in the enterprise alphabet soup. In the beginning, folks created servlets in Java to produce HTML. This caused much weeping and gnashing of teeth when creating markup. JSPs came about to let the compiler turn a blend of Java code and HTML into a servlet. So with JSP, you can call your logic java code directly in the JSP page. You can call functions on classes, etc. &lt;% boolean hasCoffee = com.foo.CoffeeTime(); if(hasCoffee.equals(true)){ out.println(“hello world”); } %&gt; or even &lt;% String sayHello = “ there”; %&gt; ... &lt;p&gt;Hello&lt;%=sayHello%&gt;&lt;/p&gt; Classically, this was called scriptlet code. There are some limitations as to what you can put in a scriptlet - can’t define methods for example. Folks discovered this sort of coding could create a real mess, so most places frown on scriptlet code. Things evolved somewhat, where *everything* ended up being some sort of JSP tag, so you did not have scriptlet code embedded in your JSP. You see classic JavaBeans (not EJBs) using the useBean (example: http://docs.oracle.com/javaee/1.3/tutorial/doc/JSPIntro11.html) syntax as well as JSTL (Java Standard Template Library) for tags that handed loops and other common things you might use scriptlet code. You can go Chuck Norris mode and not allow any, you can use scriptlet code where it is more readable than doing it with tags. All this is good enough to execute Java code inside your view. However... folks discovered their code was still a mess. One of the design patterns that came out was the idea of using a MVC (model view controller) pattern with JSP. http://en.wikipedia.org/wiki/Model_2 for example. The idea is that you hit a controller servlet that would invoke your business logic, get back some data, then pass that data to a view. That idea really worked well, and you see it everywhere. Struts was one of the original frameworks that gave a lot of this MVC plumbing. Today you see a fair bit of Spring. Take a look at a bare bones MVC implementation example before jumping into using a framework. http://www.datadisk.co.uk/html_docs/jsp/jsp_mvc_tutorial.htm and http://www.jansipke.nl/model-view-controller-mvc-with-jsp-and-jstl/ nicely show one person using scriptlet code and another using JSTL.
Yup, look at the username. This is just spam. 
I think what you're looking for is a pure servlet application. That said, such an implementation leaves you to your own devices for architecture... I've never personally seen servlet project that I would call "maintainable" but I suppose it's possible. IMHO in situations like this (where documentation and tutorials are ample) I find it preferable to go "head first" into something like Struts rather than to "dip a toe into" servlets.
It is well worth your time to pick up the Head First JSP and Servlets book. It does a fantastic job of covering the basics and best practices for the core stuff. One of the common things I see in my code is the controller servlet calls my business logic and then sets that data as an attribute in request scope. When the controller dispatches to the JSP view (could be a servlet too) the view will read the attribute and then do only formatting logic to render the returning HTML. Getting a good grasp of setting/getting attributes from request/session/application scope in both JSP and servlets will pay off in spades. Just to toss a bit more alphabet soup your way... when you see JSF, it is sort of the next evolution of JSP. JSF builds on the JSP and provides the Sun ^h^h Oracle ‘standardized’ framework. I’d personally avoid it till you have a good grasp of what the core Java webapp is doing. When you jump to it, or one of the other frameworks, you will see many of the things you did with JSP/Servlet based webapps. 
A picture says more than a thousand words, and so does a code snippet. Maybe take a look at this: http://jdevelopment.nl/minimal-3tier-java-ee-app-xml-config Try to get it to run (should be easy), then make some modifications, and slowly go from there.
Great comment ;)
This is brilliant for my uses! One quetion though, what exactly is a bean?
Hey, I will add this website, to my website...as soon as i get off work. Can you guys look at what I created and tell me what you think? www.2ESoftware.com
It's just a plain old java object with some annotations. "Bean" is just one of those fad words in Java that obfustigates code and annoys developers.
I did actualy get these tools installed for another project which never took off. How easy is it to get started on GAE? 
Bloody thought so. Some of these terms and words that are literally marketing quirks and Fads confuse the hell out of me, what with the insane level of Abbreviations too!
If you want to get into browser game development, I would recommend learning javascript and HTML5 first, then get a feel for how you want your front end to interact with the server. At that point, you can decide whether you want to use JSPs, or a RESTful API, or whatever.
They can be called by any object. They are all public.
Different people respond to different teaching techniques. Sure I could have just read my texts in college, but the classroom component was invaluable in helping me learn. I liked listening to and watching the professor's explanation.
I understand, which is why I mentioned NewBoston, which has excellent screencasts for *teaching* various programming-related concepts. But, for a *tutorial*, I would vastly prefer something like [this](http://www.jairrillo.com/blog/2010/02/23/getting-started-with-jpa-2-and-netbeans-part-1/).
My past experience has been to use some sort of DI container (Guice or Spring) and I L-O-V-E it. At my current job, adding a DI container is not agreed to with the other developers so I'm stuck using Singletons instead. The way I get around the "you can't unit test singletons" is to manage the dependencies inside of the getInstance() method and to "inject" mock dependencies inside of the unit test while calling new Object() instead of Object.getInstance() Sure, it stinks compared to true DI, but it works. All-in-all, I'd kill for a DI container right now.
But... But... If you'd use Ant to generate Eclipse files, then you'd also have to do that for Netbeans, IntelliJ and who knows what other crazy IDE people have out there. I can't believe I'm defending Maven here as I hate it with a vengeance, but I stand by my original point that it's the only project structure/build system whatever you want to call it that's supported by pretty much every IDE and will most likely be supported by new ones. I'm also not really sure what's the deal with Emacs being easer to add to. You might as well say: it's easier to add it to Eclipse because Eclipse's extensions are Java code, whereas Emacs requires you to write eLisp scripts.
It is used in Udacity CS235 (intro to web development taught by spez). I can't speak for the Java environment, but the python stuff was incredibly easy to set up and get started -- I think that's the main reason it was chosen for a MOOC
Interesting. Never heard of jDosBox before. 
Well, there are strict rules for what constitutes a JavaBean and what is managed bean. It's not exactly a fad. A class is any "anything", while a bean is something that adheres to conventions (as in the case of JavaBeans), or for which instructions have been provided (as for managed beans), so that the runtime can do "something" with them. For instance, in a bean you can annotate a method with @Named, which instructs the runtime to instantiate it whenever it encounters a reference to it using its simple name in EL. For this it can't just be any arbitrary class, since the runtime wouldn't know how to create an instance (e.g. which constructor to call).
You may want to look into [GWT](https://developers.google.com/web-toolkit/) to help with a lot of the APIs of dealing with browsers. GWT hides a lot of the JavaScript nastiness from you. Though, honestly, I've never done anything that requires the responsiveness of a game in GWT. For the basics though, it does a great job. There are also plenty of add ons like [GXT](https://developers.google.com/web-toolkit/tools/gwtdesigner/features/gwt/gxt) that have more UI widgets and other things that can build on things to make it easier to have more complicated UIs.
I would recommend to start on OpenShift. It's much easier and it has direct support for JSF and such, which are a bit painful to add to GAE projects.
I was just speaking from experience, where developers will tag random pojos with the word "bean" because they just hold simple data. Managed beans are a whole other beast.
By any object *within the class*.
Honestly with the description you have given I'm surprised you don't know how to do it. If it's a simple thing all you need is for Java to handle some HTTP calls and write HTML/Javascript to make calls to the server that is hosting the Java stuff which is listening for HTTP requests and responds with appropriate data. Lookup Tomcat and Servlets for starting points. (e.g. "java tomcat hello world") 
Keep apologizing.
http://api.ning.com/files/PaAZIB51Ew02ygiCgRDQ2fj6LkJuIj*1UYjnW-XlMO*EiFbi0BuEctVxHtowM-U7hcDCYuQ3mDddDrEGU3rvPpGcRH2C9hCK/uh_wtf_gif.gif
ahaha thanks, I feel i confused my a little. With Java being so widely used there are so many libraries and such for it, I just confused myself. Thankfully a lot of the guys here have suggested some ways I could achieve what I want :)
Abstract Singleton and Abstract Factory can do the same as DI but you have to write and maintain the 'boilerplate' code.
Are there other things like that? I've heard of things that help with rendering but what are they? I'm just trying to understand ways of using the graphics card for...well, graphics.
Yo dawg, I heard you like virtual machines.
Also check out its GWT port [jsDOSBox](http://sf.net/p/jsdosbox/code/HEAD/tree/src), it runs a lot slower though. Which is interesting because compared to Emscripten, the Java→JavaScript translation doesn't have an intermediate low-level language. I guess the reason is that there is a lot more manpower being invested into Emscripten compared to GWT and jsDOSBox. The GWT port of the Java port of Quake 2 was really well-made, which shows it can be done, I guess. It was using hardware rendering though, that probably makes a huge difference. But I'm not too sad, Dart is pretty nice and NaCl is even better, IMHO. But a cross browser PNaCl is probably unrealistic. I just wish Oracle would eradicate all the security bugs once and for all and start pushing applets again. But I guess that's not their business model anymore.
Compared to Emscripten, I actually don't think it's that bad. I only see two virtual machines here, and two source languages and platforms. An equivalent emulator made with Emscripten would use one platform extra (doesn't make sense not to count Emscripten as a platform). So for example, if [jsbochs](https://github.com/codinguncut/jsbochs) actually worked, you'd have * The vanilla Bochs platform * Tomb raider machine code but you also need to consider * Bochs compiled to JavaScript (you can't ignore this one since it is so common to have build issues with Emscripten that you don't get when building with gcc) Using jDosBox, you have only the first two, since the applet tech is so close to vanilla Java apps, it is a lot easier to "port it to the web". Of course, using GWT also has the extra layer, but at least with GWT, you get a lot more build errors in comparison (which is good, because runtime errors are so much harder to debug).
Hey, I didn't say multiple layers of virtualization was necessarily bad. I just find it amusing, for some reason.
I did, but I don't really remember the test very well. My teacher was pretty good. He was a little full of crap but he was a nice guy. He seemed to know what he was talking about, unlike my college instructor, who couldn't keep terminology straight to save his life and insisted that local vars were initialized to a default value even if you didn't specify (like C). I'm rambling. If you've got prior programming experience, C or otherwise, the class shouldn't be very hard for you.
I just took the AP test this morning. I learned the whole thing on my own since my school doesn't offer it. After a few days of hardcore studying, that and my previous knowledge of basic logic and programming theory, I probably scored at least a 3. What do you want to know? 
I took the AP Comp Sci class this year, and just took the test today in fact. Our teacher was more independent and created a variety of projects on his own for us to work through, however, you can still learn the language yourself. Also, at least at my school, the AP class is an intro level class for java, because at the beginning of the year I had no programming experience at all. Sure, it's a good amount of work but if you enjoy programming then it really isn't that bad. If you're looking to get into anything with computers later on in your life, I would take it now. As for the test, I was told I couldn't disclose any questions but in general, as long as you can maintain a good grade throughout the year, you should be fine on the test. (It was quite easy imo) Formatting fail.
I didn't actually take the course, but scored a 5 from studying a bit on my own and previous java experience (a lot of it). Biggest things I'd say is identifying basic syntax mistakes, reading and mentally running code, and a very solid grasp of GridWorld. The java skill actually required for the course is minimal, and is more about testing the thinking behind it, through java. 
We would be doing basically the entire thing on our own. How many hours did you put in? I did AP Psychology in around 30 hours Sat/Sunday and tested Monday, so I'm not opposed to cramming last minute. 
Awesome. My friends actually plan to persue it as a career, I just goof around a bit and want the credits for cheap. 
Okay. I like the logic behind programming, so that would be fun. 
I'm glad to hear you had success with the online class. What provider did you use? I wanted to learn Art History. 
That's what we're figuring. It can't hurt. 
Well, thanks anyway. 
If you know how to program, it shouldn't be that bad. Just get familiar with Java (and some of its quirks), and you're also expected to know their "GridWorld" fairly well. I took the AP test last year and got a 5.
I used Georgia Virtual Schools, but that is kind of specific to Georgia.
I took the AP test like 8 years ago and got a 5. Back then it was a basic introduction to programming, object-oriented programming, and data structures class. It's pretty basic stuff. I remember the test itself relying heavily on a blackbox API that that was available to use and a bunch of code tracing. It should be fairly simple to learn if you already have experience in programming.
I, like others, took the AP test today. I thought it was easy. I am taking the class offered by my high school, but honestly, I mostly just learn from the textbook. I would recommend taking the practice tests from previous years. Once I scored 97% on one, I knew I would be fine. The biggest skill they test is understanding and identifying syntactical errors in code. 
Took the test today. Was very easy, probably got a 5. I had a lot of Java experience before I took the course, so I'm probably not the best indicator. Send me a message if you need to talk to someone about your options.
The Singleton pattern with the `getInstance()` method is used by *all* clients, and if you ever decide to change the access strategy, you'll have to change all the clients that use it, which may or may not be possible, thus the `getInstance()` method "forever dominates your destiny". That is not to say that a single instance of a heavyweight class is not a bad thing, and DI doesn't prevent it. In fact, Guice has a singleton scope which guarantees that only one instance will ever be created. But that instance is given to the class needing it, rather than the class directly asking for it, so the access pattern isn't set in stone.
My friend and I took it a few years back (Him: 4 years, Me: 3 years). It was definitely an enjoyable class, and the test itself wasn't all that difficult. After using C++ in the intro class, we found that a lot of the principles and concepts carried over into Java. After that realization, things became much easier. The class actually got me out of Programming 1 at my college since I got a 5 on the exam. It's definitely worth going into if you're looking to major in a field that utilizes programming languages (since many college Comp Sci programs start with Java). If you have any more in-depth questions, please feel free to shoot me a PM, and I'll answer what I can for you.
Just use the liferay eclipse plugins to generate your project structure, and dump in your src folder from your old project. Find what other pieces of the structure changed (config values, etc.) and place them in their new loc. I work on a professional project that just upgraded to liferay 6.1+, but there wasn't heavy integration with pre liferay 6.1 APIs, mostly stand alone functionality, so can't help you much there.
I know it varies from school to school, but the credits that come from the AP Comp Sci exam can only be used to cover a required Computer Science class (Like my Programming 1 course). If programming courses aren't required for your degree, the credits may end up being largely useless for you.
i just took the AP test this morning (like some others in this thread) you learn a little about java syntax, then Object oriented programming, then some other things. the test was composed 90% of the following: what does this for loop do? and just gave a snippet of code, and you say what it outputs. if you are a good programmer, its boring, dont do it. If you are a beginner, totally, but remember to study outside the classroom, becasue it gets boring (at least for me). but i suggest learning java, it has an extremely healthy ecosystem, and is fun sometimes, when you get past the carpal tunnel. :D all in all, do what you want! if you have a good teacher, who's really chill, go for it, and ask if you can do some other stuff on the side to learn more!
i believe he was trying to say this test is more 'test taking skills' than 'java knowledge'
I suggest using http://codingbat.com/ For your first programming class, if you go through all of those problems, you will be light years beyond your peers. In short, you'll be able to write tiny little algorithms that get you solid java practice. You will need to study more to get classes, interfaces, etc down. Another great resource are the 'Head First' series of books. There is a java book, and if you like it enough try out their Design Patterns book too.
I just took my AP exam this morning. The class is good for anyone from no programming experience(I had a freshman in my class that had never done any programming) to people with more skill. Mine was taught in Java. It taught a lot of the concepts that are needed in all programming(search/sorting, classes and objects, algorithms, everything really. It was a nice class for me even though I had done some programming in C#/C++/Java before.
It's not a class to teach you Java, but instead to teach you CS. If you want to learn graphics and do other interesting things, you'll have to do it on your own. This is similar to any other field where you want to become good at something. 
Honestly, you don't really even need to be familiar with GridWorld to take the exam. There is a HUGE reference section in the back of the book, and you should be able to figure out just about everything related to GridWorld just from that. I took the test this morning, I think I did pretty well.
Really? We used Wiley Plus for Physics this year. Are they free to access, or do I need an Enrollment Key?
When I took it we carved binary into large rocks after which the bits were taken to the spirit world.
Which book? I wasn't thinking that I would need one for computer programming. 
You rarely talk to the sub-systems directly anymore and that's especially true for Java. What kind of game are you thinking about? If it's graphics intensive Java is not the right choice. With JavaFX you can do simple games like Brickbreaker or Asteroids. Half-life 3 however will not be coded in Java.
Well, that's ambitious for a first project. You should be able to do all that, but don't expect Skyrim-like graphics.
You should take it. I learned more in APCS than my first 3 years of college combined.
If you want to build an MVC-patterned web app in Java, I'd suggest going with Spring MVC. It's clean, highly configurable and there are tons of great tutorials to be found online. Another pro is the huge amount of people using it, so finding a solution to a problem usually isn't that hard. You can use a nice templating engine like Freemarker (the Java equivalent of Razor) and use something like MyBatis (SQL framework) or Hibernate (ORM framework) for your data layer. If you are going to write multiple scrapers that are similar in use, use the Adapter design pattern to make sure you have a clean API. 
http://tapestry.apache.org/implementing-the-hi-lo-guessing-game.html
Top Dog, this is another good link for my uses. Thanks.
Oh it's it really? Wish I had waited until next year then xP
Yes. I used this myself and it was the easiest way to learn the basics. 
Just curious - why not just use [java.util.BitSet] (http://docs.oracle.com/javase/7/docs/api/java/util/BitSet.html)? This effectively does the same thing, but it's just already written for you. 
The easiest thing to do would be to use JavaServer Faces. This is the standard MVC framework in Java. Hibernate is the most popular ORM. If you want to make it really pretty add PrimeFaces libraries. To get started download Netbeans and do the tutorials. https://netbeans.org/ https://netbeans.org/kb/docs/web/jsf20-intro.html 
GRAILS FTW!!!! http://www.grails.org/ I never looked back, it's fantastic!
Every portlet we have is heavily integrated with their API, so there is the difference. If you are using their existing portlets, and not adding any real functionality to the site, I can see this being "easier", but at this stage, I am sure a Liferay upgrade is a cost effective, worthwhile project due to the time and hassle of their upgrade process. 
Seconded. Grails is awesome, but is easier to understand if you have some experience with J2E.
The best thing you can do is try to migrate the portlets and see what's changed. We went from like 5.8 to 6.1.2 and the portlet structures themselves had changed, but it didn't take longer than a few days for each dev to switch over. We use things like user roles and permissions from liferay and their portlet structure, and I'm not for certain, but I don't think much needed to be done in that respect. Might try to find any docs that might give you hints of what changed or what APIs are no longer supported.
Oh no! I was initially going for 2d or 2.5d. I want smooth combat and movement around the world but the graphics won't have to be pristine. 
If you run Windows on this, and then install a JVM inside that, you could run any normal Java app in a browser without any Applet restrictions (confined to the virtual Windows environment of course). This is especially "nice" if you'd be running your browser in VirtualBox for security or whatever reasons in the first place :P
Any particular reason for linking to an article which is over a decade old and about outdated standards?
The easiest way to do this may be a binary tree. Each question is a node and the yes or no answer goes to a different branch. Eventually you will get to nodes in the tree which have only one branch which goes to an animal.
You are having issues because you are trying to solve two goals in a single method. One method should answer the question? 1. Do I have enough magic points to cast a spell that costs n magic points? boolean isMagicSpellCastable(int costOfSpell) or even better isMagicSpellCastable(Spell spell) 2. Use magic points to cast a spell that costs n magic points. void castSpell(int costOfSpell) / void castSpell(Spell spell) Using magic points can composite the method that determines if the spell is even castable as a precondition. You can raise a checked exception if the precondition fails or return a boolean which gives the states of whether the spell was successfully cast or not. If you have to throw more than 1 exception case, it's still not crystal clear because you could alternatively return an enum stating why the spell casting failed or if it succeeded. Adding checked exceptions would force the caller to update their code appropriately and notify them as such (since it's checked). The downside is that once you add runtime exceptions or if that code has the ability to throw one in an exceptional case, they lose that ability. This is why some developers hate the Java design for exceptions. Using an enum would give no implicit IDE notification to the caller if a new enumerated return value case is added. However, the contract is preserved without breaking code which is also a plus. 
Return a boolean. My rule of thumb is that I don't throw exceptions unless the thing that I'm asking a function to do isn't possible given the input. So for example, let's say you have a function that determines if a certain "person" object is male or female and returns true if the person is male and false if the person is female. It's a simple yes or no question you're asking the function. But if you pass it a null object instead of a "person" object, then it can't possible answer the question. I'll throw an exception here because the function can't possibly do it's job. Exceptions are not control mechanisms. They're "exceptional" cases. 
Throwing exceptions for "workflow" is generally a bad idea. I like seppyk's suggestion of separating into either multiple methods or renaming the purpose of the method. There are some technical (that I can't explain well) reasons why using exceptions like this is a bad idea. Something to do with the JIT compiler reordering your bytecode for efficiency, but when the exception is thrown it's forced to figure out your method stack and it goes from being more efficient to less efficient because you're throwing exceptions in non-exceptional cases. Do some googling if you want a better explanation on that one. Aside from the technical reasons why this is a bad idea, you're effectively using a GOTO statement in the form of an exception. I've done this before when adding to old code and I didn't have the luxury of being able to refactor everything, but it's a hack and should be treated as such.
Besides what the other users said: &gt; InsufficientMagicException Exceptions with such names sound like a big no-no to me. You need to ask yourself, is insufficient mana an *exception*al situation, particularly in relation to program code? Such a situation should be a part of the program's flow, not an exceptional state. 
I suggest the following: 1. Add the requirement that `this.magicPoints` should already be large enough for the call to `useMagicPoints` to be valid when it's called. Perhaps you can add a getter so that you can use the class like this: if(magicWallet.getMagicPoints &gt; n) { magicWallet.useMagicPoints(n) } 2. Use an `IllegalStateException` with a descriptive message to guard against programming error. That should make your code look like this: public void useMagicPoints(int mp) { if(mp &lt;= 0) throw new IllegalArgumentException("mp must be greater than or equal to 0."); if(this.magicPoints &lt;= mp) { throw new IllegalStateException("Not enough magic.") } this.magicPoints -= mp; } public int getMagicPoints() { return this.magicPoints; }
I don't think I would use a separate routine for what is effectively just a decrementer. What I would do is have the magic usage routine take place in the Spell casting or other routine; the castSpell() routine would then decrement the magic accordingingly. That castSpell routine; (or other routines for calculating magic armour or something, for example) would then return a boolean; true would mean the spell was successful, and false would mean it wasn't. Or, perhaps even better, the routine could return a "SpellResult" enumeration, indicating whether it suceeded, whether it had insufficient magic, or some other requirement wasn't met (for example, perhaps a fire spell doesn't work underwater, or a water spell doesn't work in a hot environment, etc). Since decrementing the player or entity's magic power isn't complicated, you can do the checks fairly easily. You might still want another routine if there is more logic to deal with; for example, perhaps equipment on the character or other active spells (I'm just spitballing here) in the future that will reduce or possibly increase the cost of spells. Then you can use a boolean return and that method can be used by the appropriate casting routine. My take on Exceptions is that they should tend to be Exceptional circumstances and not part of your typical control flow. A player not having magic power isn't really a Exceptional condition and is something you can reasonably expect to happen.
Your method *should* throw an exception if mp &lt; 0, like in your first example in your post, but you should also always check the mp in a separate function first. In this way, it really IS an exception - it should never get into that method while mp is less than zero; the only way is if you've forgotten to call the first checker function. Remember that good practice isn't to never throw an exception, but to throw an exception when something is *actually* wrong. Anything the user inputs should be, in general, assumed to be valid and should not throw an exception. An exception should be in place if something should exist but doesn't, or the flow of the program dictates that logically, you shouldn't be able to get into a state, but somehow you are - at this point, exceptions should be thrown, and higher level methods should decide whether or not they can continue from this broken state. Then if you want, you can create a method that checks mp &lt; 0; if it's not, call the spell; if it is, do whatever you would do in the case where your user tried casting the spell illegally, maybe put a message prompt up. Just call this method and you won't have to worry about forgetting to call it first, but it assumes that you handle this the same way every time. And as a style note, while it's generally frowned upon to have a single line if statement not have curly braces, it's really up to you; what you definitely should not do, though, is have it inconsistent. In your first if statement, you have one line and no braces, then in the second one, it has one line with braces. Try to be as consistent as possible with these things.
Checked exceptions are still when something is out of your control but when you see the possibility exists. For example if you were trying to open a file. You KNOW that the possibility exists that the file can't be found, and you'd have to deal with it so you'd write it (like the Java API has) to throw a fileNotFoundException. It goes back to my earlier statement of not using exceptions as logic crutches. Exceptions, in my view, should only be used to deal with exceptional conditions in the call stack at a centralized place in your code. As other posters have pointed out, it would be much better for you to write more code to determine if you've got the magic points to use magic before calling the use magic points method. 
Use exceptions for *language* issues, not logic ones. Insufficient mana is a gameplay consideration. Exceptions are typically meant for more language level stuff.
You can always attempt to guard against any number of checked exceptions. The problem occurs is when you have unchecked exceptions in your code. There's no compiler warning for these types of exceptions. If you have very simple code, you can avoid these most of the time. What if your code is using some 3rd-party code that is also dependent on some other 3rd-party code? Are you sure you could know exactly which unchecked exceptions will come your way? One could perhaps code based on the Javadoc? What if the documentation is out of date or just plain wrong? In the first case, what if you are trying to read a file, but the file is a directory? file.exists() doesn't necessarily give you all the information. My point is two-fold. It is very easy to create bugs. It is very difficult to accommodate every condition or even automate testing for every condition that could happen. If you use an checked exception for every error, you might need to create a whole lot of exception classes. If it's 2 types of errors - 2 exception classes. What if there are 400 different types of errors? This is why programming is part-art and part-science. There are many different ways to tackle a problem depending on the context and what goals you are trying to achieve. If I were to tackle the problem above, I would do something like the following: 1. Throw a runtime exception if the spell doesn't have a valid number of magic points (negative magic points). The caller has broken the contract and by throwing an exception you are telling them their call is bullshit and out of scope with the API. This is a valid precondition. 2. If the spell has a valid number of magic points, but the player doesn't have enough magic points stored up to cast it, return false or an enum value (CastResultType - FAILURE_NOT_ENOUGH_SPELL_POINTS). 3. If the spell has a valid number of magic points and the player has enough magic points stored up to cast it, return true or an enum value (CastResultType - SUCCESS). You alternatively could add even more return information to help the caller if needed. Wrap the result in an object which composites whether or not the spell cast succeeded, how many spell points they originally had, how many spell points they now have following the cast). This all depends on the needs of the API caller. This exercise shows, at a simple level, why it also is so damn hard to write an API. 
I think the idea is you would never call castSpell(Spell spell); unless you had enough magic points to use it in the first place. Consider the UI where a spell is grayed out and can't be clicked until you have enough magic points. In this case, it would truly be exceptional if you ran that method and didn't have enough magic points. Ex/ If someone had 2 windows open: a spellbook and their hotbar, they click their spellbook to cast a spell and the game allows it (it was not grayed out, etc). They then click their hotbar and it was also allowed, but you throw an exception because they didn't have enough MPs. In this case, you've just found a bug in your program through the thrown exception. You need to make sure your UI talks to itself and doesn't allow that to happen.
/r/learnprogramming will help you out.
[Relevant link](https://www.cs.washington.edu/education/courses/143/12sp/handouts/28.html) Do Binary Trees fit in the scope of AP Comp Sci?
The first form is fine, you're making sure your arguments are valid and throwing a runtime exception if they're not. If you're passing invalid arguments around your program will crash, but it *should* crash since something has obviously gone very wrong. In the second form, you're relying on an exception for business logic, which is extremely bad form. Just return *false* instead. Don't even think about catching *IllegalArgumentException* and using it to implement business logic... that's basically admitting you have no clue what you're doing and should probably find another career path.
File reading is a good example where checked exception is exactly the right tool for the job. You can check that file exists and take all the precautions in the world, yet you can never be sure that read actually succeeds. File could for example get removed just between the check and read operation. In your original example, you can however be sure that there are enough magic points to perform the operation, assuming you have some means to check the available points before spending them. Failing that would mean there is an error in the code, not just some environmental issue such as file being deleted by some other process. This is where unchecked exceptions (such as IllegalArgumentException) play well, because you don't want to force the client (i.e. the code that calls useMagicPoints) to do redundant exception handling, as the exception is never thrown if the client code works properly. If you want to program the client defensively, you can still catch the unchecked exception and e.g. report the internal error to user, but compiler does not enforce this. So, the rule of thumb here is: if it's possible for a client to know beforehand if the operation is going to succeed, reveal that in the interface to avoid using exceptions for the control flow. Use unchecked exceptions to signal unpredicted errors (e.g. precondition violations) and checked exceptions for uncontrollable environmental failures such as filesystem, database or network issues. Going by these guidelines, you should have very little headache with Java's checked exceptions, as most (if not all) Java exception related problems stem from misunderstaning the role of checked and unchecked exceptions or using exceptions in place of normal control flow.
Yes. They are a very basic data structure.
Let me hear your suggestion. :)
Perfect. Then OP should check out my link for help and ideas.
Maybe make the IndexedPair class extend Pair so you don't have to create any copies?
One reasonable exception is that in a concurrent environment using `boolean tryCastSpell(int costOfSpell)` could make sense, as it allows the API to hide any locking/atomics/magic that it's doing. With two methods you would need to synchronize yourself.
Okay, so I switched to extracting the libraries to a location on the file system, but now I get this error: java.lang.UnsatisfiedLinkError: Unable to load library 'libgio-2.0-0': JNA native support (win32-amd64/libgio-2.0-0.dll) not found in resource path I extract the native to libDir, then run NativeLibrary.addSearchPath(s, libDir); But I am getting that error. I have no idea what is wrong.
Everyone is suggesting frameworks to do this. But all of this can be done using JSPs and a servlet, without learning a framework. I get that you asked about frameworks, learn a framework if you want, but like I said anything can be done using a jsp and a servlet and done fairly easily.
Thanks for the link
thanks for the explanation
Nevermind, I was missing a dependency apparently. Once I pre-extracted all the libraries, it works like a charm.
Lots of options: - Split into several methods - Use an enum for the return value - Use events Check bounds for this.magicPoints. And while you're at it, consider using the same method for both adding and using magicPoints. Avoid using exceptions. When you're okay that the game crashes, like if files are mising, use runtime exceptions. 
You should only throw exceptions in exceptional conditions. :-) This means if there is a programming bug somewhere, you can throw a `RuntimeException` of some subtype, e.g., `NullPointerException`. If there is a recoverable exceptional condition, e.g., the network is down temporarily, or the database transaction timed out, or the database connection closed, etc, and the caller can proceed some other way, you can throw a checked exception. (Sometimes this means the way that the caller is "proceeding" is to display an error message to the user saying, "You can't do that right now. Fix the issue and try again." This counts as a valid program path because the program didn't terminate and melt down or blue screen or something.) If you have preconditions on methods that trigger exceptions, you should make it convenient for your callers to respect those preconditions. For example, in your case, you have a class that keeps something called magic points, and the caller can spend them if there are enough available. In this case it's simple enough for the caller to check that they're passing in positive magic points, so your first `IllegalArgumentException` is completely fine. However, your second exception specifying insufficient points is not fine at all, it's bad design. Instead, you should do the following... public class Example { private static final String INVALID_MAGIC_POINTS_TO_SPEND_MESSAGE = "Invalid number of magic points: %s (currently have: %s)"; private int numMagicPoints; public int getNumMagicPoints() { return numMagicPoints; } /** * Reduces number of magic points by specified {@code numMagicPointsToSpend} * and returns the new number of magic points (for convenience). * * @throws IllegalArgumentException if &lt;code&gt;{@link #isValidNumMagicPointsToSpend(int) * isValidNumMagicPointsToSpend}(numMagicPointsToSpend)&lt;/code&gt; is {@code false} */ public int spendMagicPoints(int numMagicPointsToSpend) { validateNumMagicPointsToSpend(numMagicPointsToSpend); this.numMagicPoints -= numMagicPointsToSpend; return getNumMagicPoints(); } /** * Validates if specified {@code numMagicPoints} is spendable, throwing an {@code * IllegalArgumentException} if not. */ public void validateNumMagicPointsToSpend(int numMagicPoints) { if (!isValidNumMagicPointsToSpend(numMagicPoints) { throw new IllegalArgumentException( String.format(INVALID_MAGIC_POINTS_MESSAGE, numMagicPoints, getNumMagicPoints())); } } /** Returns {@code true} if {@code numMagicPoints} is spendable. */ public boolean isValidNumMagicPointsToSpend(int numMagicPoints) { return numMagicPoints &gt; 0 &amp;&amp; numMagicPoints &lt;= getNumMagicPoints(); } } This approach has several advantages. It encapsulates the validation logic in a single place, and makes it easy to specify the behavior of the `spendMagicPoints()` method as well as for the caller to check to ensure they comply with the precondition specified by that method. It provides an easy way for the caller to forward the validation logic if need be (either the true/false result or propagate the validation exception). It separates responsibilities of the methods, freeing up the return value of the `spendMagicPoints()` method to do something more convenient for the caller. For more complex validation, check out my full post here - http://severoon.livejournal.com/347150.html
System.exit(0)
-1 would be more of a "crash" wouldn't it? 
Check for current position to be at start/end of row/column.
Depends on what you mean by "crash". If I were the teacher, this would be worth extra credit: Field f = Unsafe.class.getDeclaredField("theUnsafe"); f.setAccessible(true); Unsafe us = (Unsafe)f.get(null); for(long addr = 0; ; addr++) { // You asked for a "loop that will crash [your] program" us.putAddress(addr, 42); } [[Reference for the first half](http://highlyscalable.wordpress.com/2012/02/02/direct-memory-access-in-java/)] EDIT: I should note that this is egregiously bad, and you should never, ever, *ever* do this. This interpretation of "crash" is "destroy the JVM", and is also almost certainly not what you're imagining by "crash".
Easiest way I can think of is trying to access an element in an array that doesn't exist (like index -1). There are obviously many many other ways to do this (calling a method recursively without a base case is the next to come to mind or a NullPointerException). System.exit() isn't really a "crash" to me. 
What libraries would I need for that?
I get an error saying: cannot find symbol - class Field 
Get your IDE to bring that in, too. It'll probably be java.lang.reflect.Field
Had to try it. import sun.misc.Unsafe; import java.lang.reflect.Field; class Test { public static void main(String[] args) { try { Field f = Unsafe.class.getDeclaredField("theUnsafe"); f.setAccessible(true); Unsafe us = (Unsafe)f.get(null); for(long addr = 0; ; addr++) { us.putAddress(addr, 42); } } catch (Exception ex) { System.out.println("Can't claim I didn't try"); ex.printStackTrace(); } } } Victory! chunky@mills:~/unsafetest$ java -cp . Test # # A fatal error has been detected by the Java Runtime Environment: # # SIGSEGV (0xb) at pc=0x00007f73d3e92b1e, pid=3979, tid=140135470618368 # # JRE version: 7.0_11-b21 # Java VM: Java HotSpot(TM) 64-Bit Server VM (23.6-b04 mixed mode linux-amd64 compressed oops) # Problematic frame: # V [libjvm.so+0x882b1e] Unsafe_SetNativeAddress+0x5e # # Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again # # An error report file with more information is saved as: # /home/chunky/unsafetest/hs_err_pid3979.log # # If you would like to submit a bug report, please visit: # http://bugreport.sun.com/bugreport/crash.jsp # Aborted (core dumped) chunky@mills:~/unsafetest$ Just for reference, if you ever use that code in an application I'm working on you with, I would kill you, and a jury of my peers *would never convict.*
If you really want a proper crash, I wrote a terrible example [in my comment](http://www.reddit.com/r/java/comments/1dzb1t/i_need_a_loop_that_will_crash_my_program/c9vb9cl)
I thought it is still the current standard. So what is the new standards in this space?
i'd do this: if you plan to call the method without checking mp before, i'll return a boolean, becouse that's normal workflow. If you plan on calling this method only if you have enought mp, then i'd throw an exception, becouse something clearly went wrong. Btw, can you share some details on the game you're making? i love small RPG :)
Thank you very much, that made a lot more sense than what I've read elsewhere.
First, will this keyboard appear only on a specific Java application, all Java applications, or all the programs of the system? The first should be doable with major event loop trickery, the second will need extensions to the JVM, and the third is a major undertaking for OS wizards. Anything to do with Android, by the way?
This numbering scheme appears to have been created by BASIC programmers.
Gosh, that thar Java 7 just became much more mature! Overnight! Golly gee! Guess it has been [17 days](http://java-0day.com/)
[EE 6](http://docs.oracle.com/javaee/6/tutorial/doc/), which looks like it corresponds to [JSR 316](http://jcp.org/en/jsr/detail?id=316) - that's not to say that there aren't still J2EE projects out there, but anyone who has to work with that has my sympathies. EE 7 isn't too far off now - from what I remember the JSR's been signed off now, so there should be implementations appearing in the not too distant future.
I thought the point of a builder was to control the state of an object's fields when it's constructed, by providing the initial values; if that's the case, then the method names seem unnecessarily verbose to me - since we're using a builder, couldn't this rely on some developer knowledge on what they're doing, and ditch the "set" part of the method names? i.e. instead of: final Calendar calendar = new Calendar.Builder() .setDate(2013, APRIL, 6) .setTimeOfDay(15, 45, 22) .setTimeZone(TimeZone.getTimeZone(timeZoneId)) .setLocale(ENGLISH).build(); Couldn't this just be the following instead? final Calendar calendar = new Calendar.Builder() .date(2013, APRIL, 6) .timeOfDay(15, 45, 22) .timeZone(TimeZone.getTimeZone(timeZoneId)) .locale(ENGLISH).build(); Sure it's not a huge difference, but it'll simplify the autocomplete process when writing the code if nothing else.
26-Apr-2013 - Oracle informs that it plans to close Issue 56 by May 10, 2013. src: http://www.security-explorations.com/en/SE-2012-01-status.html
&gt;And the JVM would be ancient since I believe they dropped Win95 support quite a while ago. That's an excellent point I didn't think of. In that case having a severely stripped down but otherwise modern Linux distro might stand a better chance eventually. With Windows there's the additional issue that you need a license per user, which is pretty much impossible for a website with an unknown amount of public users. 
I agree 100% with you. The "set" is totally unnecessary here, although I sometimes also see the alternative "with", which is even longer.
Awesome, I had written a utility class for this "computeIfAbsent" functionality which is reused in a lot of projects at my company. It'll feel good to finally do away with it.
You're following the principle of fail-fast but doing it incorrectly. In order for the caller to use the useMagicPoints method, you're requiring them to wrap the method call in a try-catch but the method signature does not inform the caller that they need to do this. Unchecked exceptions should be used in exceptional cases. If a lot of your methods throw runtime exceptions in normal scenarios, you'll find yourself wrapping every method call in a try-catch because the caller isn't sure what the method will do. You're making your code overly complicated and unable to scale. trumpetx and seppyk have good suggetions
&gt;* Limited Update releases will be numbered in multiples of 20. * We intend for Critical Patch Updates to continue to use odd numbers. The numbers will be calculated by adding multiples of five to the prior Limited Update and when needed adding one to keep the resulting number odd. Except on the 3rd Thursday of months containing a B, in which case we'll add multiples of Pi and then add 17 to keep the resulting number really fucking confusing.
Excellent question. They apparently haven't jumped on the Maven bandwagon yet. 
http://tomcat.apache.org/tomcat-6.0-doc/changelog.html
Builders allow the class they instantiate to be made up entirely of final fields, which allows the class to be immutable (handy for making things thread safe etc). In this case, and assuming we're aiming for an immutable class (an alteration to a field's value returns a new instance of a different immutable object), the builder vs constructor with argument comes down to usability. Let's look at a range of the fields which can be set: * date * time * timezone * locale For the constructor argument approach, to provide a complete range of options to the user each combination of these needs to be catered for - i.e. no arguments, date, date and time, date and timezone, date and locale, date and time and timezone, etc. This creates a large class, and a confusing range of autocomplete suggestions in an IDE; furthermore not providing a complete range will annoy users that have a legitimate reason to want to use the argument combination which hasn't been supplied, and the addition of any fields to the class in the future means that even more constructors need to be added. The builder approach simplifies this, at the expense of a slightly more verbose class file (due to the Builder anonymous class); the developer only needs to add setter methods in the Builder class, and users can set which ever fields they want via the builder, then instantiate the immutable object via the build() call. Adding new fields is a simple case of adding a new setter to the builder.
Ah right that explains why I couldn't find a set explanation online for it. Thanks
I did the same migration and had pretty much the same experience as you. Plus, just because my dev team hates life so much, we migrated from the original Ant build system to Maven at the same time. Most of our problems came from changes in the portal.properties file and how certain (very useful) properties were simply gone, and new, undocumented properties popped up. Add to that the native Tomcat changes, and we spent a good few weeks just chasing jsp errors. We ended up slugging through the migration, but as a team, we've pretty much decided to never upgrade again. Unless LR7.0 has an amazing feature set and finally fixes Service Builder, we'll probably be on 6.1 forever. Oh, I should also add that we had around a dozen custom portlets, most with their own database structures and tables, a handful of themes, and another handful of custom layouts. Total migration time, including the Mavening was probably around a month and a half with a dev team of 4 - 6. 
Seriously. This is absolutely ridiculous. So the first is +5 giving room for 4 updates between, then +11, giving room for 5 more updates, and finally +15, giving room for just 3 more updates. I'm not seeing any real huge Benfit here, but a lot of confusion. As mentioned above, why not use major version for the JDK version, minor for the functional updates, and point releases for everything between. That's kind of what it was designed for.
ridiculously confusing
Maven bandwagon? I'm afraid I don't follow.
I just meant they would use the standard major.minor.patch versioning system. Nevermind. 
&gt; As mentioned above, why not use major version for the JDK version, minor for the functional updates, and point releases for everything between. That's kind of what it was designed for. I think they intend(ed) to keep the major version until they make backwards incompatible changes.
How badly did it screw up java?
Java itself is actually fine, but that'll crash the running JVM every time. Did you really mean "crash", in the end? Or did you just mean "exit"?
crash
Well, that crashes the JVM. Your install is safe, but the running JVM will die an unpleasant death.
What I took from the article was that changing the format of the version string (for example, by adding sub-version like 7u14.0.1 instead of 7u14) would break current parsers of such string; and that although changing the format of the string is probably a better option, it's a change that has a greater impact and has to be planned more carefully and it's implementation would be longer than the current short-term solution.
In my app I just extended GregorianCalendar and added bunch of methods such as setMonth(int), getYear(), ...
I think so they can release more than one release between CPUs.
I don't think the shorthand conditional is that rare. I see it and use it frequently enough. I think it only suited for small expressions if-else blocks are definitely more suitable most of the time. For the above example I prefer whatIWantToSubtractFrom = max(0, whatIWantToSubtractFrom - whatToSubtract)
How is this different from a simple if(booleanExpr||evaluateIfTrue||!evaluatIfFalse)actionToTake()? Is it just a different syntax tracing back to C or is there a functional difference? I'm not bad at java but I tend to use it to solve specific biotech problems and don't get as much time as I want to simply improve my coding style. 
Exactly - firstly use of the ternary operator isn't that rare, and secondly the example the OP's posted is smelly code, both from the stance of ignoring the presence of the Math.max method, and for including operations in the ternary statement. As you said ternary expressions are fine for short expressions (ryebrye's example of null checks is a good example); to me the OP's code screams of someone that's learnt about a language feature, and is now keen to (ab)use it wherever possible.
No, you're not supposed to wrap the calls with try-catch. Unchecked exceptions do not require that. You just let it fail (or perhaps catch unexpected exceptions at some higher level for error reporting), because you weren't supposed to give illegal arguments anyway, so it's a sign of programming error - not an expected exceptional situation.
 [chris@archie ~]$ javac Test.java Test.java:11: error: not a statement asdf ? foo() : bar(); ^ 1 error Because what you have doesn't even compile in Java, as it's an expression, not a statement. You need to assign the value of the expression to something else. It would be like putting: int foo; foo; The second line does nothing and doesn't compile in Java. You need something like this: int dummyVariable = asdf ? foo() : bar(); for it to work. Also, Java is quite verbose, so variable names are probably too long for this to be effective. &gt;*booleanExpr*? *evaluateIfTrueExpr* : *evaluateIfFalseExpr* And that's another thing--they have to be expressions. They can't be statements. The operator doesn't just cause the latter 2 bits of code to run conditionally--they need to be expressions, and they need to be of the same type. All in all, I'd say that if you're hiring "expert" programmers who apparently don't understand this operator, you need to 1. double-check you have the correct definition of "expert", and 2. double-check that you know how to use the operator yourself. &gt;is your best friend in ANY language that traces its history to C. It is not. It is a good friend in ANY language that traces its history to C--_except PHP_.
Your sample if statement's expression is all kinds of wrong. You are grossly misinterpreting the ternary operator. int a = foo ? bar : bat; is equivalent to: int a; if (foo) { a = bar; } else { a = bat; } It is always possible to transform use of `?:` to if-then-else-whatever, but it is not always possible to go from if-then to `?:`. For one thing, the result of the `?:` expression must always be used in Java, so OP's example doesn't even work. In general, most complicated if-then stuff cannot be put into something like this, and with long variable names (also like in OP's example), you probably don't want to use `?:`.
First, it's not a pattern, it's an operator. Second, the reason you don't see it often is because it detracts from code readability. Every time someone looks at your arcane mash of symbols, it's going to take them a few seconds or more to decipher it. And god help you if you run into some multi-line, nested ternary, "clever" code - it can take hours to unravel one of these Gordian logic knots just to make a small change to whatever it's doing. Anyone reading your code is going to have to mentally translate it into "if...then...else" format anyway, so why not just write that format in your code? 
https://en.wikipedia.org/wiki/%3F:
 for(int i = 0; i &lt; data.length()/cols;i++) { for(int j = 0; j &lt; cols; j++) { if (i%2 = 0) view[i][j] = data[i*cols + j]; else view[i][cols-j-1] = data[i*cols + j]; } } 
I totally agree! I use the ternary operator regularly myself but my personal rules are: **If the ternary statement doesn't fit in a single line, use if-else blocks!** and, of course, **No side effects in ternary statements!**
You can try: Rectangle r = table.getCellRect(row, 0, true); if (r != null) table.scrollRectToVisible(r); This will scroll to "row", but may hit other simillar bug in JTable...
I just tried attempting this, but I keep getting a null pointer exception when it executes getCellRect(). Even if I do table.getCellRect(0,0,true), I get the null pointer exception. 0,0 is already populated when the program starts. Same issue when I execute the command: table.getVisibleRect(). # Is it the way I'm using the JTable as to cause why all the JTable functions have a null pointer exception?
Good. There are very few situations where the ternary conditional operator is appropriate. In most, it's just obfuscation. Readability of code is paramount, and the ternary should only be used when it improves that. The times I think it helps: - deferenced null protection `result = (operation == null) ? null : operation-&gt;result` - output (c++ example for brevity) `cerr &lt;&lt; "enumeration = " &lt;&lt; (enumumeration == ENUM_1 ? "ENUM_1" : "") &lt;&lt; endl;` I'm struggling to come up with others. 
Okay, Still can't figure out why the gui.table variable keeps throwing null exception, but I changed my code around to make it work as intended. public static void add_row(String upc, String title, String status) { model.addRow(new Object[] {upc, title, status}); int rowCount = gui.model.getRowCount()-1; JTable sTable = (JTable)gui.scrollPane.getViewport().getView(); // get JTable inside of scrollPane Rectangle sAngle = sTable.getCellRect(rowCount, 0, true); // get position of last row sTable.scrollRectToVisible(sAngle); // scroll to last row } Instead of referring to the table variable from the gui class, I get the Table nested inside the scroll pane through the scrollPane variable in gui class.
It is somewhat useful for semi-constant initialization. For example, you could have something like void complexFunction(SomeEnum enum) { double tolerance = (enum.equals(BOB)) ? 5.0 : 4.0; } Just because that saves you from writing void complexFunction(SomeEnum enum) { double tolerance if (enum.equals(BOB)) tolerance = 5.0; else tolerance = 4.0; } While being pretty readable... Though, you really should look into putting the tolerance as a part of the enum you are passing in (Or even pass in a tolerance enum)... It just depends on what makes the code look better. I rarely use ternary operators myself, but there are a few occasions where it can make the code a little cleaner without making things overly hard to understand.
Good one. &gt; I rarely use ternary operators myself, but there are a few occasions where it can make the code a little cleaner without making things overly hard to understand. Agreed. I'm not arguing for their removal -- they are perfect at times. But "something I don't see often enough" is not how I'd describe the ternary operator.
This is what I have done in the past to get a scroll pane to always scroll to the bottom: scrollPane.getVerticalScrollBar().setValue(scrollPane.getVerticalScrollBar().getMaximum());
That's what I attempted to do, but it still hid the last row.
Most style guides I've seen say to avoid ternary operators and code metrics tools like checkstyle will usually mark them as issues. That being said, I do *rarely* use them for simple assignments. For example: String output = (msg != null) : msg ? "Default Message"; I think these are rare cases where the ternary operator is actually more readable than an equivalent if-else block. However, I agree with most here that it should be avoided because it quickly become more difficult to read and most programmers abuse it.
The problem is that I see a ton of places where a simple *if.. else* wasn't done because someone was too lazy and "it will never happen anyway." This is where the ternary operator is perfect: assertion ? do_if_ok : clamp But I forgot this is Reddit, where everyone is 100x the programmer you are because they took Comp Sci 101 and read an article on the Internet once.
&gt; But I forgot this is Reddit, where everyone is 100x the programmer you are because they took Comp Sci 101 and read an article on the Internet once. I don't know if that was directed at me, but let me assure you that that is not the case. I am well experienced, have 20 years of coding experience, and review code professionally. I'm not sure I see what your example has over an `if..else`; "laziness" is certainly not a justification. Code is write-once-read-many, the correct construct is always the most readable, the most clear, not the one with the smallest number of key presses. I also worried that your example seems to imply you think it's okay to have a ternary with side-effects ("do_if_ok") -- it's really not.
Oh. I actually don't agree with Maven in that regard. Debian is better: you may have any number of alphanumeric fields in a version string, which `dpkg` semi-intelligently parses.
Not directed at you, just Reddit in general. The thing about writing code is that it's a matter of style, and most programmers (especially less experienced ones) don't understand that. They think there are RULES you MUST ALWAYS FOLLOW and if you don't follow them you've written *bad code*. My shop uses the ?: operator as shorthand for *if / else* all the time, nobody ever experiences any problems with it and there's never been a moment where anyone has thought "gee, all this pain could have been avoided if only we'd used *if/then* instead." Anyway, I suppose my real complaint is simply the idea that we must write all code for the least common denominator and anything that violates this is *wrong*... like I said, around here we use ?: (*with* side effects) all the time without a problem. It's a useful construct to know and it encourages us to do checks we might otherwise blow off to save a few keystrokes. Are we lazy, bastards unworthy of our keyboards? Probably, but we manage to get a lot of shit done, and it works.
yeah, same with maven. tho, you have to keep on top of it, as the deployer.
http://en.wikipedia.org/wiki/Java_Module_System http://en.wikipedia.org/wiki/Module_%28programming%29
Probably Scala, especially if you like defining operators.
scala makes groovy obsolete edit - why the downvotes? what's wrong about this statement? groovy's only real advantage isn't really one, AFAIK, which is java compatibility... why not use scala for anything you'd want to use groovy for?
In Scala each library has its own unique meaning for "/", "~", etc. Groovy has definite limits in what operators you can define.
Yes, I do like defining/using operators. I also have recently started passing methods as variables through using interfaces, which seems like a bit of a hack to me, but also made my life 10x easier. I noticed Scala seems to support "out of the box".
Thank you for the detailed response. **Groovy** Your response reflects my intuitive sense that Groovy is a great tool, but lacks the staying power of Scala. **Clojure &amp; Scala** I watched [this presentation by Venkat Subramaniam](http://www.youtube.com/watch?v=LH75sJAR0hc) on Scala which helped explain some of the things you mentioned, including Actors. I have yet to investigate Clojure in detail, and was curious how it compares/contrasts. The user-base seems to be a very similar size across both platforms (from my superficial research), so I would guess it's not a matter of "which is better" but rather a matter of 'style preference.'
I'd probably run into those limits very quickly then and ask myself "why did I bother." Which reminds me of my use of Lombok, with it's annotations. It was great for 5 minutes, until I wanted to customize it. I ended up deciding against Lombok because if I am going to "hack it" I'd prefer to just hack it all the way (not half way).
Groovy is a lot like Java, except with some neat new features and syntax sugar. Scala is a whole 'nother language. You might also want to look into Clojure or another Lisp. Very different from other languages, but they've got unmatched power. The syntax suffers a little from unintuitiveness, but once you get used to it it's actually better and more uniform. ;In pseudo-lisp, a function named filter taking arguments ;"list" and "predicate". (define (filter list predicate?) (if (= list '()) ;Is list empty? list ;then return list, otherwise: (if (predicate? (first list)) ;call the function passed in (append (first list) (filter (rest list) predicate?) ;recursive call of filter ; If the first element passes the filter rule, then filter the rest of the list and append it. ;else (filter (rest list) predicate?) ; otherwise just filter the rest of the list and return that ) ) Something worth noting is that there are very few reserved words, and very few reserved symbols in the language. In the variable named `predicate?` the `?` isn't any special character, you can use question marks in identifiers. By convention, functions returning a boolean end in `?`.
I'd say it's more like, do you think strong typing is a good idea? Do you think OOP is a good idea? Scala is a very strongly typed language, more than even Java. Your code becomes very rigid, but the Scala compiler gives you a lot of help in maintaining invariants. Scala also embraces OOP, also probably better than Java. Clojure is a Lisp-dialect. Your code is very flexible, and Clojure's macro system allows the Clojure compiler to manipulate and generate code as it compiles. The line between code and data is very flexible. Clojure is most definitely not OOP.
There is a free coursera course called functional programming with Scala that is good
All syntax is a bit foreign at first; I don't particularly mind as long as 1-month later it makes sense. Perhaps to provide a counter example, I tried Adobe flex at one point, and found it to be vastly un-intuitive and was starting to get discouraged until I switched over to Java. I'm sure it's good for some things, but it didn't mesh well with my mathematical mindset. Admittedly I couldn't write that syntax right now, but I can trace my way through it and have some idea what is happening.
I'm not quite sure what you mean by "Staying Power" with Groovy. If you mean to suggest that it's a fly-by-night project, then I am inclined to disagree with you. Groovy is definitely not the toy you're looking for. It's designed for a very different kind of programming than you've described. It fills a different niche. For Java compatibility, it's hard to beat, and its dynamic features take a lot of the edge off prototyping for Java frameworks and platforms. Between Scala and Clojure, I'm inclined to believe that Scala is going to be the more popular of the two. I found Scala refreshing. I found Clojure difficult to adapt to.
https://www.coursera.org/course/progfun Is this what you're referring to?
Well, look into it. I prefer the Scheme or Racket languages to Clojure myself, but if you're set on using a JVM language, you'll want Clojure. Racket has a very good IDE and great tutorials for learning Lisp (The language actually started out as a tool to help people learn Lisp).
Have you considered investigating [Xtend](http://www.eclipse.org/xtend/)? It offers a lot of features that Scala does but (IMHO) it is much easier to learn, especially if you already know Java. As a long-time Java developer, I find the Xtend syntax much easier to read than Scala. But if the Scala syntax doesn't scare you, then I say go with Scala.
If you're talking about *design*, I fully agree with you... we put a lot of thought into design. What I run into a lot is this attitude that simply typing things in "the right way" will guarantee good design (ha!) and that typing things in the "the wrong way" or just an *unusual* way means that nobody else will be able to understand it, and that's what really gets me - if you can't figure out that we use ?: as convenient shorthand for ***if (condition) trueExpr : falseExpr*** and also happily make use of **common and well known** side effects of expression evaluation (i.e. short-circuit boolean evaluation, assignments in conditionals) then there's no way in hell you're going to be able to track down a deadlocked thread somewhere or figure out how we need to tweak the VM or (god forbid) bust out JNI to staple some C library we need to use to the rest of our code... instead you're going to insist that we're crappy programmers because we didn't follow some "best practices" that were invented by some academic somewhere. I'm not advocating for folks to write obfuscated code (and I've seen plenty of stuff that made my eyes bleed) but it's not about making sure *everyone* can read your code, it's about knowing your audience and writing it so the next guy who works on it can wrap his head around it without too much hassle... and for good programmers, purposely staying away from nice, tight idioms can actually make it harder to read.
Slight correction: started out as an intro to programming language, no intention on lisp as the destination. My professor is/was one of the leaders of the project. Felleisen was probably the finest teacher I've ever had. 
Yeah, but it (the rhetoric) ties together nicer if it's for lisp expressly.
Scala for sure. Great power. Awesome type system.
I didn't mean to intend that it was something likely to disappear tomorrow. I'm not really sure how to express what I was trying to say. Perhaps *"less influential in the long-term?"* &gt; Groovy is definitely not the toy you're looking for. t's designed for a very different kind of programming than you've described. Thank you. &gt; *"I found Scala refreshing. I found Clojure difficult to adapt to."* My "seat of the pants" research seems to reflect that, especially the concept that Scala is very liberating.
Yep 
Maven actually requires a much more specific format for version strings. If you deviate from it, Maven considers your version just an opaque string. In practice, the distinction doesn't mean much, but I don't think the distinction should exist at all.
meeeh... not really. ultimately, it's an arbitrary string, except when it comes to dependency resolution. i tell my people, if you fix a bug without changing the API, then make it a PATCH version number. but if you DO change the API (e.g., you changed a method signature), then make it a minor version change. I'm pretty sure Maven adheres to that same idea. Works for us, anyway.
I love Doug Lea. He has that calm knowing demeanor and is always so delightfully contemplative without seeming egotistical AT ALL. ^_^ Awesome
Java Concurrency in Practice is really good, if you want to learn about parallel programming.
Overall, the decompiler looks great. Here are the problems I noticed with a quick test Strictfp flags on classes are lost. Varargs are lost. Narrow primitive types aren't casted properly, even when necessary. Strictfp classes can be recognized by the presence of a strictfp flag on a constructor. Varargs can be recognized with the varargs method flag. Primative casting is obviously a lot tougher. Original source public strictfp abstract class BoneJTest { public static synchronized final void main(String... args) { for (char c=32; c&lt;100; ++c){ System.out.println(c + " " + (int)c); } } } Decompiled public abstract class BoneJTest { public BoneJTest() { super(); } public static final synchronized strictfp void main(String[] array) { for (int i = 32; i &lt; 100; i = (char)(i + 1)) { System.out.println(i + " " + i); } } } 
Hm, Groovy brings a lot of Ruby-style stuff to the JVM so I'm not so sure it's less influential. Monkey-patching dynamic languages have a lot of power (and shoot yourself in the foot). I haven't done Scala, but I really enjoy Clojure.
http://stackoverflow.com/questions/4609068/is-there-a-way-to-get-keyboard-events-without-jframe
In particular, it is about Object-Oriented Design concepts, which apply very well to Java, given that it is an Object-Oriented Programming language. In fact, all of the syntax in the book is written IN Java.
What? Why did you link to an old article about Java?
I don't know if I can answer those questions right now, but this is useful information. Seems I have a little bit more research to do.
Well, the existing simplify method looks inefficient to me. You're multiplying count by itself three times each pass through the loop. I wouldn't count on java optimizing these away for you. There's a number of small issues with the code you might want to clean up first. Keeping a list of prime factors will require quite a large list of primes if you are really interested in large numbers-- there's lots and lots of primes. If you did that for 'smallish large numbers', though, you might as well just simplify the list each time you multiply. Multiplication will just be a merge and if during the merge you encounter a pair you just update the multiplier. Are you ever going to divide these? if so then you might as well keep the multiplier as a list of primes too. Adding and comparing numbers stored as factors would be really impractical, so I guess you're not trying to do that.
I used [this](http://code.google.com/p/jnativehook/) without any problems.
Didn't downvote but I'm guessing people don't like the unsubstantiated value judgement. They're different languages. good for different things. Scala doesn't make Groovy obsolete any more than it makes Java obsolete... Both are interoperable with Java, but Groovy is almost like a superset of Java... A java developer could start writing Groovy and introduce advanced features gradually. Scala is a wholly different language under a different paradigm, definitely more expressive than Java but also more difficult to learn.
If you have finished head first Java and understand it you can pretty much begin making a specific program and pick up a book that's relative to the nature of it. Be that Swing, JavaEE etc.
Why won't you use the GCD algorithm? From what I see it does fit your needs.
Core Java: Volumes 1 and 2, 9th Edition.
I'm taking it now. It's really good.
Java for dummies. 
I have a number (say 122316544) and I am attempting to simplify the square root of that number. Instead of trying to divide it by 4, 9, 16.... I am going to represent it as a list (or map) as 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 199 and I can easily traverse this list in order to "simplify" the square root.
I'm no expert, but have you seen how long applets take to load at launch? I feel like the new web-app direction needs quicker access times. [Check out this Javascript's Canvas example.](http://arcade.lostdecadegames.com/onslaught_arena/) (Notice the lack of loading)
This is not about client-side but server-side web applications.
I agree about the 'smaller companies' statement. I've worked for 3 large companies that all have a Java back-end. The biggest and oldest on my list still uses JSP for the front end. The more recent companies both use a Java back-end for web-servers and connected services (no EJB) with AngularJS or a Backbone front. For my current employer there are just so many compelling tools for the "operations folks" to stick to a Java back end. But there is a trend in our company to use NodeJS/Mongo or other scaffolded-NoSql approaches to do "lean testing" with customers or prototypes. 
In my experience, Java _is_ used for modern web applications. I have a [pet project webapp written in Java](https://github.com/mschn/wissl), and it was pretty easy to setup very fast. I use the maven/jetty plugin, and any file I edit in eclipse is compiled and deployed within ~5seconds. In my opinion, it all depends on what framework you actually use, and what is the scale of the project. 
I guess so. Groovy is almost like syntactic sugar for Java, when compared with Scala, which is more of a language built from the ground up. Those who down voted should see what the creator of groovy said about scala: http://macstrac.blogspot.com/2009/04/scala-as-long-term-replacement-for.html?m=1 Personally I have written groovy but never scala, though this was not by choice. However I am familiar with the differences 
....... do android apps count as web apps?
I'm sorry but how is GWT a minor improvement in struts? I don't know all the web frameworks but those are very different ones that do very different things. 
I would say it's worth reading even if you don't plan on writing concurrent code, because it has a lot to say about writing solid code that will execute well in a concurrent world.
I think the proper term is 'factorize' for the process you want to do - instead of keeping the factors in a list, keep a cache of prime numbers, and the equivalent of a SortedMap&lt;Integer,Integer&gt; (I'd suggest writing your own implementation, probably using two int[]'s) that keeps a prime number and its corresponding power. Still, I'm not quite sure why you need to know this number... Edit: it will probably be faster if you cache the various squares in the simplify method.
Off-topic: If you're interested in RESTful API, you may interested in JAX-RS. JAX-RS is a standard for implementing RESTful APIs in Java. There are a number of implementations, such as Sun Jerey, JBoss RESTEasy and Apache CXF. I'm using [Sun Jersey](https://jersey.java.net/) for most of my projects and find it pretty easy to use, just define some classes and methods, add a few annotations and you're ready to deploy it.
&gt; Just not in smaller companies I'm not even so sure on that. In the last five years I've worked for two different employers with less than ten employees and they were 100% java. Current company has three full time staff &amp; two contractors, with effectively 2.5 people working on coding. IMHO the problem is learning curve. Core Java is easy to learn but learning the entire ecosystem &amp; what fits where is entirely different. Once you become aware of the major third party libraries you can be vastly more productive than in any "toy" language. Ruby on Rails might get you a CRUD application in minutes but once you actually start to build on it you end up going around in circles trying to hack things into the framework. 
I read this book last year when I was doing a bit of multi-threaded work. Really scary stuff, made me think all my code was gunna explode without warning. Great read!
The way I see it, if you are putting multiple things that conform to the type named by the package, you should make the package name plural. For instance, I wrote a (really crappy) game once (just to get credit for an AI project in grad school) and I had a package called "entities" where I kept things like MovableObjectBlocks, HeroCharacters, that sort of thing. I'm no pro but I've been around for awhile and the way I see it, you should think of packages like folders or directories and give them meaningful names (like you keep your documents in "Documents," not "Document," and you keep your pictures in "Pictures," not "Picture"). That said, in your example, if you're writing a program that only supports one kind of dog, naming the package "dog" seems entirely reasonable, but if you're going to have an abstract class "Dog" from which "Dachshund, Poodle, Lab, Husky, etc" all extend, you should probably call the package "Dogs." Similarly, if you have one GUI to support your program and all of your GUI code is in a single package, probably call that package "GUI" and not "GUIs." Just my opinion. Open to disagreement.
What is the difference between a SortedMap and HashMap?
There are two views, one is its part of the type itself (com.x.animal.Cat), the other is to look at "animals/" as a directory containing multiple classes. I tend to prefer the first way, treating the package name as part of each individual type, rather than a directory full of classes. Good question ...
Most comments in this thread are accurate, so I'm just lending my voice to those and adding a couple other points. Java, as a platform, IS still a popular choice for modern web app development. Java has even been inspired by other frameworks from other platforms (JBoss Seam was inspired by Ruby on Rails). Spring Roo seems very similar to Python's Django. These frameworks let you build a functional web app with many basic features (including user management) in about 15 minutes. Class hot swapping has been around for a LONG time (since hotspot I believe) so the ability to make a change and instantly see it in your application has existed since at least 2001ish which is when I first remember encountering it when I noticed that it kept fighting with tomcat's auto-reloading feature so I had to disable that feature in tomcat. I am biased though. I have been doing Java professionally since 1997 when it WAS the new hotness and it was the thing that everybody wanted to be doing. That being said, I think all the new languages can be made to scale, but I think Java is easier to scale and provides a more robust environment out of the box. And I'm fully resigned to the fact that in a few more years I will probably be the old codger talking about java when all the young whipper snappers coming out of school are wanting to do the latest and greatest dynamic languages... to which I say, "java can do those too (jython, jruby, clojure, groovy, etc) " .. :D 
Bikeshedding. Package names are namespaces. Namespaces are for uniqueness. Navel gazing about convention misses the point and asking "should" implies a correct answer. There is no answer for "should or should not" here. Naming is one of the hard problems. In java most IDEs literally lets you work without needing to know about the package name spelling (introspection + autocomplete).
I think ExtJS is GWT, is it not? I thought ExtJS was like Sencha, Vaadin, etc.. in that they are toolsets/framework extensions that sit on top of GWT.
&gt; MyProject.pkg isn't good myproject.pkg.* is fine to start, but it gets difficult to differentiate later if you start with what looks like no general organization of the namespace. This is based on personal preference. See: import Vector.Mosquito; // what is in here? &gt; I'm looking for good (or even best) practice. There isn't one. There's no specification other than http://docs.oracle.com/javase/specs/jls/se7/html/jls-7.html#jls-7.5 (through 7.7?) http://en.wikipedia.org/wiki/Java_package - this is all there is.
No.
I know, but both are cross-platform.
Meh, I still thing Java is better. Mostly because I really wanna work on something more than a command shell in Java. And even helping a bit on a game owuld be awesome.
This is why I love Clojure. You have the great platform that Java is, with the most elegant language in the world (Lisp). Concurrency is so easy in Clojure; I can make a highly concurrent app with none of the concurrent bugs that I would have in a Java app. Also if I ever need raw speed without multithreading, it's easy for me to write a web app in Chicken Scheme or something.
This is not my experience at all. At different companies both large and small I've seen a lot of stacks being completely Java based. JSF/PrimeFaces is seen a lot these days, especially for smaller and modern apps, but also for larger things. Then there's the assortment of GWT, Spring MVC and Wicket apps, all pretty modern stuff. If anything, the trend I'm noticing is that of the vocal minority shouting louder. A couple of years ago they shouted how great and productive RoR was (granted, it had many very interesting ideas), and all this shouting and especially the fact that the hottest site of the time (Twitter) was using it, gave one the feeling that *everyone* was on RoR. In reality though, RoR may have peaked at 3% or something, with Java based websites at one time maybe approaching the 30%. Currently it IS down, but a conservative guess is that it's around 20% now, more if you include the hybrid stacks that have Java in the backend for search and such. Job trends, questions on SO, available books, number of open-source projects, etc for the Java web application space are all strongly indicative that Java really is used a lot for "modern web application development".
Take a look at JSF and Java EE 6. It's a powerful yet easy way to get started. Simple example to get started: http://jdevelopment.nl/minimal-3tier-java-ee-app-xml-config and from the same site a more complete web application: http://jdevelopment.nl/open-source/java-ee-kickoff-app
Thanks for your suggestion. I probably should have mentioned in my post, I am looking for a MVC framework that supports AOP and spring like dependency injection. For service, at the very least I want a framework which would allow me to set a message handler chain and add interceptors if I need it
I am considering struts and springMVC. Is there any other option that would be worth looking into? I haven't been able to spend a lot of time investigating struts ( this is a side project) but it sounded like it might be too heavy weight. Is that a correct assumption?
Go with SpringMVC + Apache Camel as integration framework. EDIT: downvotes? why? :o
Struts 2 and Spring Web MVC 3 are the most popular options for Rails-like MVC in Java. Both Struts 2 and Spring Web MVC use dependency injection and interceptor stacks. Both are fairly lightweight. Struts 2 requires less configuration out of the box than Spring Web MVC 3, but Spring Web MVC is more versatile. The Struts 2 interceptor model is more powerful and easier to configure. Struts 1 is obsolete.
When you're a 6 months old company trying really hard to get your "big idea" out before someone else does something similar, it makes sense to go with a lightweight framework and a language easy to code in. When you scale up you really need to think about the framework you're using. Add to that testability (unit, integration and possibly penetration as well), streamlining your deployment process, reducing QA overhead, ability to experiment with your features. I'm no expert on what startup use and why but not being maintain speed while scaling up could be a big reason why a lot of start ups crash under their own weight. Also I've found that if you're using a framework/language that is not widely adopted, it becomes really hard to get good technical talent let alone domain experts. On boarding time can be really high and can slow down rest of the team.
That's helpful. I'm getting more and more inclined to struts2. Any suggestions for service? Other than interceptors and dependency injection. Out of the box REST ability or a plugin would be nice to have.
 if(arrList.get(i) == arrList.get(i-1)){ I'm pretty sure this will fail due to boxing; use `equals`.
Spring Web MVC 3 comes with REST capability out of the box while Struts 2 requires a REST plugin. But overall, the REST mapping is far superior in Spring Web MVC 3 than Struts.
Does struts2 or springMVC support (or has a widely adopted plugin) that would allow me to monitor standard metrics like GC time, thread pool, FD wait time etc.. and custom metrics like unrecoverable exception from upstream services etc
If you are writing a RESTful *web application* with Rails-style MVC, then you can't wrong with Spring Web MVC. However, if you are writing REST *web services*, then you might want to look into [JAX-RS](http://docs.oracle.com/javaee/6/tutorial/doc/gilik.html#gilqb), which is the Java EE standard. Here is a [good comparision](http://sleeplessinslc.blogspot.com/2012/02/jersey-jax-rs-mvc-killed-spring-mvc.html) between JAX RS and Spring Web MVC.
The error is on the line that's marked. Your braces are mismatched so it thinks the method declaration is part of the previous method declaration. Go back through and match your braces.
Missing the close curly brace after character.x += 5; Might also want to consider using else clauses since the 2 if checks are mutually exclusive.
Please use /r/learnprogramming for these questions OP.
That's not something you would enable at the web application framework level, but at the application server level. JMX is the standard, and you can hook up [JConsole](http://docs.oracle.com/javase/6/docs/technotes/guides/management/jconsole.html) to JBoss, Glassfish or Tomcat to monitor standard metrics. You can enable application events over JMX by writing your own MBeans or you can monitor logs using a custom appender for Log4J.
Thanks a lot. That's about all I need.
Eclipse? Get in the habit of pressing ctrl-shift-f. This will auto format your code and make mismatched braces jump right out at you. Consistent brace usage will make everything more understandable. 
Or better yet, /r/javahelp.
I was just about to say that, you can also set it to automatically format the code as well as tell it how to format it.
Mismatched braces. Wrong subreddit. Use Eclipse and ctrl+shift+f 
I don't think it formats the code if theres an error in it.... But I might be wrong.
Are you saying that 'spi' is an example of a "singular" noun? Given it's an acronym, I think that's a bit of a reach. More likely IMHO is that due to the lowercasing of the name, "spis" isn't recognisable as the plural of SPI.
That being said, if you write your code with the "{" right after the method, you have to either not use Eclipse's formatting or dig through the settings to change it. I need my curly braces to have their own lines (damn Java 1 and 2 where I got into the habit of doing that). 
Another tip that solves these issues really well is either let Eclipse set up the curly braces for you. That is how I usually do it. Also, you can put the cursor to the right of either an open or closed curly brace and Eclipse will tell you where it thinks the opposite curly brace is. REALLY helpful for this exact error, especially with anonymous inner classes like you are doing there. 
So, if you aren't using a window, what are you trying to close? You could always do the big no no and just catch the esc key then call System.exit(). Just an FYI, don't use this unless you want to fully exit your program as it kills the JVM, so it probably isn't the best idea, but other than closing windows in GUIs, that is the only way I know without just shooting back up the call stack and hitting the main()'s return. 
As other people have posted, exceptions are for when things are happening that shouldn't happen that are beyond what is expected to happen. A good example of when to throw an exception is when you have a method that reverses strings. An exception should be thrown if a string pointer points to a null value as this should never happen as that WILL crash your program if it doesn't get stopped and the person who called that method should know that this happens. In your case, you are just checking if the player's mp has ran out, which shouldn't crash your program if a spell is cast and there is no mp left, it just breaks the game's rules. So instead of having to do all of this ugly try/catch blocks everywhere you just check what the Boolean value is. From a semantics standpoint, exceptions should only be thrown to stop an action that will crash a program, not to check bounds for rules of the program. 
Like others have said, the reason why you can't run it is because it is going to the command prompt/terminal. Use this command, java -jar &lt;jar-file-name&gt;.jar and it should work from there. I am going to frank with ya, .jar files can be nasty. They will work sometimes, but not others. 
&gt; I am looking for a MVC framework that supports AOP and spring like dependency injection. Uhm, but JSF is a MVC framework and Java EE definitely supports injection. The example even uses it: @ManagedBean public class BackingBean { String name; String hello; @EJB BusinessBean businessBean; } Or do you mean with "sprint like dependency injection", injection via XML? That too is possible with JSF and Java EE, although few people would recommend it.
&gt; OP's code screams of someone that's learnt about a language feature No, my code screams of someone who used C for a long time before switching to Java a few years ago.
For REST JSON services and a few web pages, the DropWizard stack http://dropwizard.codahale.com/ from Yammer. Alternatively, Spring Framework, like so: https://github.com/mikaelhg/springmvc-example/
The problem I have with his work is that people misinterpret the meaning of his work on very general libraries, as if they applied to applications, where you can make all kinds of assumptions of how the code will be used.
And here's the original article: http://marxsoftware.blogspot.com/2013/05/jdk-8-calendar-builder.html
&gt; If the ternary statement doesn't fit in a single line, use if-else blocks! I split mine into multiple lines for a reason: is this assertion true? if so, evaluate this: otherwise, evaluate that I actually find that a lot more elegant than *if (expr) ... else ...* for short conditionals because it maps cleanly onto the way we as humans think about problems. It signifies that we're asking the computer a question. "Is X null?" "Is the argument out of bounds?" &gt; No side effects in ternary statements! TIL assignment is a side effect.
Even if fully expanded into *if...else* it's still WTF code: if (a&lt;b) { if (b&lt;c) return b; else if (a&lt;c) { return c; } else return a; } else if (a&lt;c) return c; else if (b&lt;c) return c; else return b; I honestly don't see how that's any better than using the ternary operator and throwing in some proper indentation.
&gt; The second line does nothing and doesn't compile in Java True. It's valid C but not valid Java. I wear the cone of shame for that one. I should have picked a different example. &gt; double-check you have the correct definition of "expert" I did say "self-proclaimed expert." I've interviewed a bunch of "expert" programmers who look at me blankly when I ask them what the keyword **static** means. &gt; except PHP Pretty sure you can add this to any statement about programming languages and it will be true. "2+2==4 in any language, except PHP, where it drops all the tables in your database and deletes your backups instead."
I actually don't see evidence for the supposition offered. Java is popular. It's popular for unfashionable, big projects. The vertical stuff that's done in the enterprise that never makes it into the public. Being a C++ guy, I like Java-the-language. Strongly typed at compile time... nice. If you understand OO, then picking up Java is pretty trivial. The JVM, while technically excellent, is a lot of weight to carry though. It's memory and resource hungry. Then there's the packages and frameworks... Java (web) programmers are framework obsessed. It's not even like they stick to _a_ framework for a project, there are loads of them all used simulataneously, with a dependency-hell's worth of supporting libraries thrown about like confetti. From the last project I was involved in: struts, spring.this, spring.that, spring.theother, jetty.this, jetty.that, jetty.theother, glassfish, javax.servlet, javax.transaction, javax.annotation, javax.amillionotherthings, jackson, castor, xmlbeans, velocity, hamcrest, log4j, slf4j, hibernate, etc, etc. It's all too much, it would take months for me to read the documentation for that quantity of libraries. These represent "the java way". It's not a surprise to me that startups would pick python/ruby in the face of the above "java-way". You can pull in a web framework, templating engine and ORM with a three packages for python. Don't get me wrong, I'm not saying the Java way is bad -- they are good once you know what you're doing. I'm saying that there is a lot of learning to do before you can return a single web page. 
You can enable escape analysis but it is not enabled by default afaik. http://stackoverflow.com/questions/771430/escape-analysis-in-java http://blog.juma.me.uk/2008/12/17/objects-with-no-allocation-overhead/ 
Looks great! I'll try it out and see if it improves performance. Thank you!
[Escape analysis is enabled by default starting with 6u23.](http://docs.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html#escapeAnalysis) [The performance benefits it brings are, to put it simply, *massive.*](http://stackoverflow.com/questions/771430/escape-analysis-in-java/1212015#1212015)
Yes. [Starting with 6u23, the JVM does escape analysis by default.](http://docs.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html#escapeAnalysis) This will intelligently allocate objects on the stack, or in some cases, optimize away the allocations entirely. The JVM will also try to optimize away unnecessary copy operations and `synchronized` blocks. Don't worry too much about allocating lots of short-lived objects. The modern JVM is *really* good at making such code fast.
If you're using a modern (&amp;ge; 6u23) JVM, it won't, because escape analysis is now enabled by default.
Additionally have a look at the [Metrics](http://metrics.codahale.com/) library. It has plugins for simple instrumentation of, e.g., Jetty and the JVM, and integrates quite well with JMX and other reporting/analysis tools. Regarding frameworks for web app development I'd suggest taking a look at [Apache Wicket](http://wicket.apache.org/). It is a bit different from the Struts or Spring MVC direction but it might suit your needs depending on your use case (that, and it also integrates rather well with Spring, Guice or CDI). For a (JSON) REST service Jersey should suit your needs. It was also [mentioned by mikaelhg earlier](http://www.reddit.com/r/java/comments/1e5joh/web_app_framework/c9x6o66) as it is a part of the DropWizard stack. Jersey also integrates quite nice with Guice, there's even a nice [article](http://blog.palominolabs.com/2011/08/15/a-simple-java-web-stack-with-guice-jetty-jersey-and-jackson/) about that.
Look at Java EE 6 or the soon to be released Java EE 7. It has a first class component based MVC framework called JSF, and very elaborate support for typesafe injections, interceptors and message handling via CDI, EJB and JMS. For pure ReST services there's JAX-RS that integrates rather well with CDI and EJB.
There are more and more startups discovering lightweight Java EE 6 almost every day. Java was once known for heavyweight J2EE and that image has stuck in people's heads. But J2ee is long gone and the future is looking bright for Java web development; it's the power and maturity that costed thousands of dollars only half a decade ago, but now for free, open source and with a lightweight programming model.
The class name itself was not plural. I meant I would have multiple instances of the HeroCharacter class. **EDIT:** Meant to say multiple subclasses of the HeroCharacter abstract class, hence, via polymorphism and the "is-a" relationship, the package contained multiple "HeroCharacters."
Not off topic at all, thanks. I'll have to check into these.
Jax-rs back end serving angular.js frontend for consumer sites. Otherwise Google gwt for a workflow bus miss app. Spring Too is a great way to kick off a project too
JSF is a Swing-like MVC framework, while Spring Web MVC is a Rails-like MVC framework. JSF is view-centric, with URLs mapping to views defined by Facelets which direct interactions with managed beans, while Spring Web MVC is controller-centric, with URLs mapping to controller methods which forward to views. They are the opposite of one another. Some people have a strong preference for the controller-centric approach, and in that case JSF would not be a good fit. The controller-centric approach has some advantages in that interceptors can easily be added to the call chain to perform various transformations to the request, because the URL mapping is merely a method call. The view-centric approach, because JSF transforms an HTTP request into a component tree and dispatches to event handlers, requires more complex hacking of the JSF request life cycle phases to achieve something similar to the same use case, in any case requiring much deeper understanding of JSF. JAX-RS can serve as a controller-centric web framework. However, it is important to note that JAX-RS is a web services framework first which can be used as a web framework (but it was not designed for this), while Spring Web MVC is a web application framework first which can be used as a web services framework (this is a supported use case).
Escape analysis can be very helpful, but is only helpful for objects that don't escape.
I used to love watching talks on InfoQ, but the new redesign broke the slide display. Does it still work for anyone else? I've tested in Chrome and Firefox on both Linux and Windows. No luck.
It tries it's best but the useful thing is that it usually stops the format some place near to where the error lies. 
It's a program that simulates repeated mouse clicks and I want to be able to press the escape key to make it stop clicking. 
whataya mean?? at my company, i do the version numbers for projects this way: if it's a patch, meaning you changed some code, say, in a method, but the API itself does not change (e.g., method signature), then it's a PATCH number upgrade. so, x.x.1 becomes x.x.2. if the API changes in any way (i.e., is no longer backward compatible), then we increment the minor number. so, x.1.x becomes x.2.x. major numbers will go up whenever the hell i feel like it.. not often. once every five years, maybe, if something VERY significant has changed. am i doing it right?
Just to check my understanding is correct, in 11. Decorators the page shows: public class CoderImpl { ... } Should this be the following instead? public class CoderImpl implements Coder { ... }
+1 for dropwizard. Simple, easy, and "batteries included".
There's probably a couple method modifiers I'm not printing--I've been meaning to go give that a second look. I capture all the flags, but my Java writer is probably leaving some out. Thanks! The narrow integral types are a known issue. I will be improving type inference as time goes on.
If you ONLY install TomEE(25~30mb) and nothing else, you also have a MVC framework, ORM, injection, etc, I think that is the future of Java. All those dozens of Spring libraries just aren't needed anymore. The exist solely to wrap things that don't need wrapping, and to introduce an abstraction layer for things that don't need to be abstracted.
Topic title's missing a key bit of information, which is that this is specifically for ShepHertz's App42 (cloud-based) platform, rather than a generic app server. That said at least they do offer a [zero-fee service](http://api.shephertz.com/pricing.php) by the looks of it, so it's not all bad.
I'm glad to hear you say that. Sounds like exactly what I'd like.
&gt;TIL assignment is a side effect. Assignment **is** a side effect when used inside an rvalue expression. 
I didn't specify because my intension was also to get some new ideas for little projects. thx for your links, I'll have a look
Why don't you just add a constructor to class action and pass the string there? Also: Why does the class action need to extend Main?
You could try declaring a public mutator method in your main that returns the string, and call it from class action when needed. 
It's "Java" not "JAVA".
Instead of creating a new class that implements ActionListener, you could make an anonymous implementation in which you call a method to perform your logic. enter.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e){ enterButtonClicked(); } }); private void enterButtonClicked() { String str = input.getText(); // Your logic here } This of course only works if you have a reference to your input available. So I suggest extending JFrame adding all the required Components and in your main() you only create an instance of your custom JFrame.
Persism: http://persism.sourceforge.net
I'm not sure about all-time favorite, but for most of my projects that use Swing, I use [MiG Layout](http://www.miglayout.com/) for the more complex GUI layouts. It simplifies the process quite a bit.
If I had to pick only one, it would definitely be [Apache Commons Lang](http://commons.apache.org/proper/commons-lang/javadocs/api-release/index.html).
upvote for JodaTime
HtmlUnit. Besides using the library for unit testing websites, it's great for crawling websites because of how easy it is to use.
The IO helpers are incredibly helpful in this one. 
* Apache Commons * SLF4J * JodaTime
Since no one mentioned it yet: [Lombok](http://projectlombok.org/). Helps deal with Java's verbosity. 
Faster iteration with slower insertion. Lookup remains the same. (unless the underlying structure is a tree of some sort) 
If you like log4j, I'd check out [logback](http://logback.qos.ch/).
Can you explain what "lightweight Java EE 6" is? I'm trying to pick up Java EE but am lost in the alphabet soup. (I've only written some simple servlets w/ jsps).
Maybe you mean the JVM. My understanding is that twitter is using Scala.
Interesting. Seems really nice and simple. I wonder why people have down voted you. If there is any reason I shouldn't use this can someone let me know. 
I would recommend Vaadin. It's completely different from everything you appear to be considering, however. It's purely an MVC web framework built on top of GWT, but without so many of the pain points of GWT. You can even write your code in Scala, if you like (which I'd recommend). It has no built-in dependency injection, but you could easily use guice with it, I would guess, though I'm not into that sort of thing. 
As a longtime slf4j/logback fan you have my upvote, buy log4j2 is looking pretty impressive
Guava, hands down.
Wow, all that looks so familiar :) Gson is great isn't it? I'm currently working on a fairly big rest based project (using restlet, which is also my goto web-y thing these days) but tonnes of stuff gets passed around as json (including some server-server chit chat) so transparently transmogrifying that into objects and vice versa has been a lifesaver. I know there's other stuff around that does this, but all the custom exlclusion strategies and whatnot make using gson awesomest (disclaimer: that I found, when I looked, a while back now)
&gt; Having a favourite library strikes me as missing the point No point needed here. The guy is just asking what's your favorite library, if you have one then simply spell it out. *Q: What's your favorite color?* *A: You're missing the point here, give me a context so that I can...* FUCK THE CONTEXT, just answer the question. You don't even need to explain why pink is your favorite color. Don't waste our time.