No idea what else they could have called it, but that's way to close to JUnit for my brain to handle. JUinteger perhaps.
Somehow the proximity only occurred to me after I'd written it. I'm not averse to changing the name, but I guess I've seen "uint" written down enough times that putting a J before it doesn't make me think about unit tests.
Just grep any large Java project for "switch" and you'll find tons of examples where every success path is assigning to the same variable, just like that example. Here's one example from Java's own standard library: String sdpStr; switch (scrollbarDisplayPolicy) { case SCROLLBARS_AS_NEEDED: sdpStr = "as-needed"; break; case SCROLLBARS_ALWAYS: sdpStr = "always"; break; case SCROLLBARS_NEVER: sdpStr = "never"; break; default: sdpStr = "invalid display policy"; } Here's another: ObjectStreamClass descriptor; switch (tc) { case TC_NULL: descriptor = (ObjectStreamClass) readNull(); break; case TC_REFERENCE: descriptor = (ObjectStreamClass) readHandle(unshared); break; case TC_PROXYCLASSDESC: descriptor = readProxyDesc(unshared); break; case TC_CLASSDESC: descriptor = readNonProxyDesc(unshared); break; default: throw new StreamCorruptedException( String.format("invalid type code: %02X", tc)); } Here's another: String[] strings = null; switch (field) { case ERA: strings = symbols.getEras(); break; case MONTH: strings = (baseStyle == LONG) ? symbols.getMonths() : symbols.getShortMonths(); break; case DAY_OF_WEEK: strings = (baseStyle == LONG) ? symbols.getWeekdays() : symbols.getShortWeekdays(); break; case AM_PM: strings = symbols.getAmPmStrings(); break; } Here's another: int which; switch (m.getReferenceKind()) { case REF_invokeVirtual: which = LF_INVVIRTUAL; break; case REF_invokeStatic: which = LF_INVSTATIC; break; case REF_invokeSpecial: which = LF_INVSPECIAL; break; case REF_invokeInterface: which = LF_INVINTERFACE; break; case REF_newInvokeSpecial: which = LF_NEWINVSPECIAL; break; default: throw new InternalError(m.toString()); } 
H2 is still most popular. Some people like to run their actual DB (Mysql or whatever) in Docker locally for extra realism. Depends on how complex your DB interactions are or if you're doing anything very vendor specific I suppose.
Junsigned? I agree, this is so close to junit I had to stop and make sure I wasn't seeing things.
Oh my, that does sound rather harsh! One thing i learned during my studies was that there were people who were quicker in understanding a concept and others which took a bit longer, but at the end we all made it. Sure, some fell through and repeated a year, but that was due to not taking it seriously enough. Or maybe one needs a year longer to understand the concepts. I think it rather sounds like the teacher is bad in explaining the concepts and should rethink their ways, or even their career choice. To understand a concept, an explanation is always based on certain premises which one should understand beforehand (e.g. Multiplication means one needs to understand addition). Maybe those premises are misunderstood? Maybe the teach just jumps ahead to quickly? Give yourself time and try and break down what the teach says yourself. Programming has many many concepts and it can be very daunting to begin. But after a while, one will get the hang of it, if one really wants to. I had the same problem understanding OOP in the beginning and one day i found a different explanation somewhere and it just went home and i never had a problem again afterwards. So, try and do your own research and see if you can understand those concepts by yourself. Understanding programming, and software development is something that requires commitment and i am sure you will get it! I could try and explain some things for you, perhaps =))
You're just arguing semantics on what 'book for java devs' means. At the end of the day, Clean Code only discusses things that are relevant to Java and frequently discusses Java libraries while not discussing things that aren't relevant to Java or libraries from other languages. Are some of those things that are relevant to Java also relevant to other languages? Of course. Many of the things discussed could apply to any statically typed, object-oriented language. But there is no discussion on anything that doesn't pertain to Java; we don't see any substantial discussion on pointers/references (ex C/C++), functional paradigms (ex Haskell), functions that aren't attached to an object (ex Python), etc. &gt;all programmers who know what OO is will feel completely comfortable reading these code samples. Again, developers of any language can benefit from reading it, but it’s definitely a book for Java developers.
Switch fall throughs was such a common bug for me when I was learning to program. Its one of those things you wish they could change, but for legacy purposes they probably never can. I think thats partially why Kotlin named their switch statements "when"
Thank you i'll do that, starting with pseudo-code would have been easier for a lot of us but he jumped directly to programming with intelij
I like to use SQLite, but H2 and HSQLDB are both good as well. SQLite lets you keep all the stuff in a file, so you can trace back if something goes wrong, but it's easy to delete the files and start fresh. 
He already made some students quit, i don't want to give up that easly, he's a bad teacher indeed all students are mad, even the best ones, i guess i'll focus more on self-teaching rather tham trying to uderstand what he explain
We are doing arrays right now, i understand the concept but when i try to make a program myself i often fail in the implementation
Have you tried the same method on a directory? 
Your teacher could be an asshole (probably), but you also might not "get it" and sometimes hearing the truth sooner is better. I'm not saying you can't learn how to "get it" but there is something to be said by some people not being the best fit for programming: There's lots of debate on this subject. Back in the 90s when I was in school, there was this aptitude test which supposedly predicted CS101 failure. That is to say, if you did well, you might not do well in CS101+, but if you failed this test you nearly always failed CS101. I don't recall the name of the test, but this is something my google fu found: https://www.kent.ac.uk/careers/tests/computer-test.htm I have friends that simply can't comprehend simple computing concepts like loops and variable assignment. You explain it and they nod their heads and they think they get it until you ask them to give you a solution to a simple problem. The concepts just don't come naturally to some...
No, see edit of original answer.
Check out the [Files](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html) class. It contains static functions to do most of the typical file manipulation operations on Paths.
I never said switch-expressions are bad. I said the examples in the JEP are bad.
Wow... those are just representative examples, not full-fledged software modules. I have observed this before with your comments - you tend to throw down weird arguments about how a "hello, world" program is bad design which should instead be designed with all the design patterns, use all the frameworks available, and have a million tests. Get over it, and please stop this joke - it's getting rather tiring.
When he says that he doesn't say it directly to me, it's just somethig that he says in every class, and we did a test at the beggining of the course to determine our level, i got one of the best marks, that doesn't mean that i will do good in programming is true but my main problem is not uderstanding the concepts but applaying them to solve problems
I like this comment. When your teacher says shit like that, just don't even listen to it. Everybody is different. There are countless stories and experiences where people have been told stuff like that, didn't listen to it, and went on to accomplish some great things. Don't give up. I feel like I'm a very quick learner and math and problem solving have always been easy for me to pick up and learn, but CS and programming was a new thing for me in college. Some things took me a while to catch on to also. I had to repeat a couple classes. Things that seemed easy for others, didn't come that easy to me. It was very frustrating early on. You may have to work a little harder and put in more hours than other students, but if you're persistent, there's really nothing you can't learn. Just don't even give a second thought about it when your teacher come up with BS like that. 
So one can't expect from OpenJDK to present meaningful examples? Even if their are representative examples, they should have a tad of reality, otherwise they don't represent the actual usecase properly. Also I wonder what "weird arguments" of mine you're referencing.
They mention adding limited ability to do that at the very bottom of the JEP: &gt; In a switch whose whose argument is a reference type (which currently is limited to boxed primitives, strings, and enums), a case clause can can explicitly specify null: &gt; &gt; String formatted = switch (s) { &gt; case null -&gt; "(null)"; &gt; case "" -&gt; "(empty)"; &gt; default -&gt; s; &gt; } &gt; &gt; If a switch does not include case null clause, then it is interpreted as if the first case clause was: &gt; &gt; case null: throw new NullPointerException(); &gt; &gt; which is consistent with the current behavior of switch on reference types.
because of some of these limitations, tbh. this will go a long way towards making them more useful (and lead to JEP-305, the real victory condition) 
Why not just `UInt`? They J is superfluous.
they're still deciding whether or not to add it to the language. it's a work item that allows folks to try development without the burden of a full JSR, kinda like a spike/r&amp;d work item. JEPs turn into JSRs when they are ready for formal consideration. A final JSR will have a reference implementation along with the formal spec document, IIRC. Some JSRs never become part of the language. 
Spring Boot user here, H2 is just so damn easy. Include `spring-data-jpa-starter` and bam! Although usually at a certain point I'll create a Docker container for whatever DB I'm using in prod.
Testcontainers and PostgreSQL https://www.testcontainers.org/
This is right on. When mentoring experienced level developers and leading teams of engineers, I still oftentimes diagram things out on a whiteboard (like, daily). The if-then-else and looping logic is easiest sometimes to diagram out on a whiteboard in a way people can understand the problem (not even with "pseudo-code" - I use things more like diagrams / decision trees when I have to do this). On a side note, learning to think in a linear way is one of the most challenging parts for a beginner engineer. Some people (I'd say less than 5% of society) seem to have already learned it long before writing code either through life experience or math classes, but for most people you're going to have to spend some time just "struggling", so expect to just have to put in the time with a whiteboard or pen-and-paper. Talking through with others who are confused can also help because, in talking it out and "working" the problem, you are ALSO learning how to think and solve problems in a structured way. And that's really the hard part - once you get comfortable thinking in a structured and systematic way, the code will follow pretty easily. And after 5-10 years of doing this, it will become second-nature to you. Its like a super power, but most people you have to develop it through difficult, frustrating focused practice. As with most valuable things in life, it takes a lot of effort. One great tool for practicing coding is http://codingbat.com/java . It has a lot of simple problems you can work through and gets harder over time. If you do a couple each day, it will help you learn to think like a coder. Good luck! 
Some schools try to kick people out of programs early who the think "won't make the cut" later. They do this in Computer Science, Calculus, and Organic Chemistry classes a lot. Of course, the effect is to actually kick a lot of people who are 100% capable of succeeding... its really just an old guard thing. A better strategy might be for them to say, "This is going to take some of you a lot of work. You can do it, but it will take effort. Lets focus on strategies for how to learn and develop your skills as a programmer." 
Try to get together with the other students in your class to cover the concepts together. One of the best ways to learn something is to try to explain it to someone else.
The types are named like that (`UInt128`, etc.) - I'll think over the package name.
If you are worried about startup time for the jvm and not having any warmup runs, I would checkout oracle’s Substrate project that lets you compile to a binary executable.
Another thing to keep in mind is that a lambda has its own stack frame, and expressions and statements don't. You don't write `x = condition ? return 1 : return 2`. The `return` keyword is reserved for returning to the caller. 
My favourite quote is "Never, never, never give up". If you love it and understand concepts, you just need experience. Ignore such inspirational "teacher". You've internet, you don't really need him for intro courses. When I was young, I didn't have that. Also business app development is often a boring mechanical work, solving the same "problems" again and again. Nothing, special about it. But for videogames I believe you need also maths.
Personally, I consider them a code smell. You *usually* don't need switch statements. 
https://www.journaldev.com/909/check-file-directory-file-java methods isDirectory/exists combined.
Thanks! Haven't heard of that before. 
If you use the xray4j agent to scan a HTTP request to the spring Pet clinic application you can see a connected graph for the control flow. Viewing this on a desktop gives a lot more information than on a mobile.
You don't even necessarily have to start with psuedocode. For instance, for reversing a String, you may start with get the last letter of the String make that letter my return String get the second to last letter of the String put that letter at the end of my return String repeat this pattern until I have put the first character at the end of the return String looking at that, it seems obvious, but having a clear, even if oversimplified, idea of the steps needed will let you focus on how to turn the solution into (pseudo)code. Sometimes I don't even start with words. I just draw some kind of picture or diagram to help me think about the steps. The important thing is to get in the mindset of thinking about how to solve the problem as a series of steps. If there's a sub-problem you'd need to solve, put in a place holder for it for now, and then go through the steps of how to solve that problem afterwards, working through one problem at a time. How you express those steps is up to what works for you.
This is very interesting, but I think most of this stuff already exists in StackOverflow. If on the other hand this gains enough traction and more people use it (chicken-egg-problem) it might become a good source for solutions. At its present state it is underwhelming...
Have you looked at the Spark and Storm projects (both in Apache) before starting this?
the easiest answer, since you know about File.exists(), is to just convert your Path to a File, and check if the File exists. path.toFile().exists() Though perhaps the best is Files.exists(path) or Files.exists(path, LinkOption.NOFOLLOW_LINKS) depending if you want to follow links or not. also: something something r/javahelp 
The think im not sure of in which cases is it needed to have so many *instanceOf* branches ? I can imagine 2 when Some/None or Succ/Fail but any other cases ?
I just thought why I would ever go back to Java? (Fell in love with Kotlin)
I ALWAYS had a dry erase board in my dorm. Actually 2. :-) Solve it logically first. What is the algorithm, the steps needed, to find the solution. Then write good pseudo code to cover all of the code that you need to write. And then finally take that code, type it in as comments into your program(s) and then flesh out the comments that tell you what to do, with the actual compile-able code that does what the comments say.
What an asshole of a teacher man! Don't give up!
Woah, I thought this really _was_ about JUnit and that the title was a typo.
Yeah, he told us that he only wants the best students, and that there is no room for mediocre students 
I don't care if i have to work really hard for achiving my objective, it's just that i'm not doing really good rn and my teacher saying those kind of things certainly doesn't help
I've dealt with teacher like him all my life, but since all this programming thing is new to me, i kinda get discouraged by what he says
Yeah, the logic part it what's hard for me, i'll have to work harder
Will start working on a way to resolve the programs before start to code them
No problem! I taught classes at Target Corporate on Java to people with backgrounds in other technologies (or who hadn't coded in years and were being told that they needed to write code again). In any case, that was one of the sites I referred people to to practice. There are a few exercises I recommended people do to practice and get better: 1) Write REAL software with REAL problems. Stop practicing and build stuff. 2) Do things like codingbat as a group using mob programming so that you can see how others work through problems and learn from one another. 3) Do tasks like codingbat every day. Maybe spent 15-30 minutes each day doing this. You will get pretty good after a couple months of this. 
**Rubber duck debugging** In software engineering, rubber duck debugging or rubber ducking is a method of debugging code. The name is a reference to a story in the book The Pragmatic Programmer in which a programmer would carry around a rubber duck and debug their code by forcing themselves to explain it, line-by-line, to the duck. Many other terms exist for this technique, often involving different inanimate objects. Many programmers have had the experience of explaining a problem to someone else, possibly even to someone who knows nothing about programming, and then hitting upon the solution in the process of explaining the problem. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
Don’t! And don’t be afraid to ask for help, either. /r/learnjava, Google, etc., are all great. 
Then the problem isn't programming; your teacher just sucks.
To put it simply: prove your teacher he's wrong. 
I'll do that
What will they switch to?
It's my first year, been programming for 4 months
Why not? The new release cadence will bring us these features sooner.
uint4j?
 Then your teacher is an asshole. There's nothing wrong with not understanding the basics with your level of experience. Keep at it; we all had those problems once
That is takes you from solving a problem, to phrasing the problem in a kind of language that is comperable to programming, and then fleshing out the syntax that does what you need. Only 3 major steps really. Usually step 1 is all dry erase board. Step 2 can be dry erase as well, but I usually did it on the same white board after step 1. then step 3 is typing out #2 into netbeans (for example) and then putting in the code.
/r/learnjava can probably help you a lot. But it also sounds from your above comment that you could benefit from doing a lot of trivial programs to get used to the basics. Are you doing a lot of copy/pasting of the code? Do you create projects from scratch or use a starter project that you might not fully understand? Are you struggling on the basics of building a program that compiles in Java or are you struggling on getting the assignment fully correct? 
That's cool!
&gt; the teacher is constantly telling us that if we can't understand x problem or concept we should give up Pretty classic behavior for someone who sucks at teaching. Don't worry about it; just keep learning - if you can't learn much from your teacher, seek out people you _can_ learn from.
We mostly make projects from scratch but small programs, and i'm having problems getting the assignement fully correct
Whish i could
I'm currently also learning Java and have definitely thought about giving up, but the best advice that I can give is to work on a small project that is doable and in sight. And when you come across problems, doing your own research and asking questions online or offline will help. Best of luck my man, hopefully we both get better at this! 
The best way to learn programming is to program. Create a text adventure or something. Do what you like in programming and experience the flow. Start project after project - if you like without finishing anything. You will be able to finish things when you get paid for it. I am not good at algorithms, but I am good at creating systems. Find what you are good at and use it to motivate yourself. Solving problems that you want to solve. Survive the boring and hard lessons in education - the job afterwards is ace!
So you built [Step Functions](https://aws.amazon.com/step-functions/). Looks like good work, but not sure why anyone would use this over the enterprise-level AWS solution.
Same. I have an empty SQLite file with the schema setup that the tests copy, fill, and run against. If things go wrong I can preserve the database file before it gets overwritten during the next test.
Probably not the best starting point for coding itself, but Intellij IDEA is a very good IDE. You'd do well to become familiar with it, in due course.
Like a lambda returning a lambda today, e.g., `()-&gt;()-x()`. Seems consistent, no?
I believe the current process is outlined here: http://cr.openjdk.java.net/~mr/jep/jep-2.0-02.html &gt; A JEP in the Candidate state is merely an idea worthy of consideration by JDK Release Projects and related efforts; there is no commitment that it will be delivered in any particular release. So: "ready to be implemented" is a reasonable take, yes.
Can confirm not only that this is a useful practice but that we do it with other software engineers as well. It's not at all weird for somebody in my work area to ask aloud for a partner to rubber-duck for them.
Who is he, to tell you what you can or not do? Just keep writing code, learn math, and smile to him. Every failure is an experience. And to get good you need to accumulate and build up. Also his problems and under acomplishments, are his problem. Not yours, smile at him when you get some thing done,and enjoy the view. 
My undergraduate degree was in psychology, but when I went to grad school I decided computer science was the way to go, so I started from scratch from CS 1. By the time I got to discrete structures I was feeling a bit frazzled, and I asked my professor if he thought I could make it. He said, "No." I told him to fuck off. (Not literally, of course, I just disregarded his judgement.) I ended up getting my MS in CS and have been in the industry for 20 years. Do what you want to do. 
Coding is easy, if you don't know syntax you Google it. Problem solving is hard. Your teacher sounds like a dick. Don't pay attention to him. It sounds like he doesn't understand teaching, he should just give up. Anyway. Your not there to impress him your there to learn about game development. 
If you want to be a good dev : code more, sooner or later the shit keeping you down now will seem trivial and you'll feel like Rocky balboa in a montage or something. It's like driving, you can spend all the time in the world learning roadmarkings and sign meanings, but unless you sit behind a wheel you can't really drive good because you have to run into problems before you can learn to solve them
I thought it was ridiculous when Intro to Computer Science started off having us make flow charts, and in retrospect, that was probably the most useful, formative part of my education. You need to solve problems, not write code. The code is just how to put your solution in place. So don't think of it as writing if(checkCollidesWith(collisionMesh, scene.entityList)) { ... } or whatever, you're really just translating "What you should do when something bumps into something else is..." into a language the computer understands. Does that help at all? Also, your teacher is a dickhead.
Of course not.
You can also perhaps share some examples of the problems that you are potentially struggling on (according to your teacher at least), and discuss on your approaches on solving them. That will not only help people gauge where your problem solving skills are currently, and also help you out directly since you will be forced to explain how exactly you would go about solving them. Sometimes spelling out a solution to others make you understand the problem better. Just to add a quip myself, "never start on a problem till you have understood it thoroughly" is the best advice that I have got myself (thanks to the great George Polya). I still struggle with the temptation to get started with the "solution" with a partial understanding of the problem even now, but I find that resisting it has **always** been more productive than brute-forcing the whole problem!
Your teacher sounds terrible and teaches the complete opposite way of how you are supposed to each. Don't worry about it, you'll be fine. 
Death to all bots!
&gt; i'll focus more on self-teaching That's the best thing you can do for yourself. I have always maintained that people succeed in spite of the educational system, not because of it. Of course, it's not a tautology, but learning to be self-reliant (you can use the syllabus they provide as a basic guide on what basic stuff you need to know, and take it from there on your own) is a vital life skill.
Advocatus diaboli. Upvoted for truth.
You need a new teacher then. My first ever Java class, my professor sucked. I was so close to dropping out first quarter for similar reasons, but I decided to finish the quarter and try again next quarter with a new professor. Best decision I ever made. New professor was awesome and exactly what I needed. Ended up getting my degree in CS and a great job I love straight out of college. Don't give up. Just change the circumstances 
i don't think so... won't `break a` break out of the `a` block?
seems like that would have to be a compile error, since the break expression needs a value, not a label.
I'll second coding bat 100% The problems are all presented in a simple manner and get more difficult progressively in the most user friendly way. 
Tell him “If you can’t teach people to do X, then you should probably call it quits as a teacher”. In your shoes, I’d rely a lot more on simply accumulating practical experience by reading and writing lots of programs. Use the coursework as supplementary material. Sooner or later you’ll accumulate enough experience to know where your limits lie on your own. 
&gt;Switch over enum is many cases just bad design. Isn't that pretty much pattern matching? Calling that language feature "bad design" seems like a little much.
Haskell Curry would like to have a chat with you. 
I agree with the teacher thing completely. My teacher in my school is an absolute jerk literally to the point where a ton of people I know dropped out of computer science entirely just to avoid him. He always calls us stupid and lazy and discourages us from everything
[removed]
i remember a teacher that said that if we couldn't come up with a brief proof for e(ipi) = -1, in 15 seconds we were extremely dull. the panic, dread. meh it was overrated, and like many things revolved around a simple trick that was hammered into our heads. never underestimate hard work.
Interesting. I am reading the book Intro to Java Programming by Daniel Y Liang (10thE). And I am writing each chapter's exercise (for now I think I wrote more than 200 exercises) . I think I am getting better at for example writing for loops when I do more exercises. What you mean, is that I should NOT do exercises and instead write real world applications?
50-50. The issue is that when you write real world things your tend to do a better job learning how to make real world problems into code, versus just learning the syntax of the programming language. 
I'm a scientist who has to code all sorts of complex processes for my work and this is literally what my notebook is filled with. Obviously at a slightly higher level than reversing a strong but this planning method is quick and easy and makes it far more difficult to miss an important step.
"hey, can I show you this weird bug I've been fighting the past hour? So here's my code I'm thresholding this array then normalising with respec OHHHHH less than... Thanks for your help"
&gt; SQLite lets you keep all the stuff in a file H2 too. It's a 'real' database. It's just really populair for testing because it's so feature complete, can emulate other databases and is bloody fast. 
Did you check out [Awaitily](https://github.com/awaitility/awaitility)? It's pretty nice for testing. Although most of the integration testing I did with Kafka components I just used a countdownlatch I blocked on. 
Please drop any constructive feedback for this. If you are not going to use it please let me know what pain points you have.
&gt; and the teacher is constantly telling us that if we can't understand x problem or concept we should give up, "If you can't _teach_ us X, maybe _you_ should quit."
The problem is that all my problems are in Spanish, i will translate some of them later and post them in /r/LearnJava
Thanks for the answer, i'm learning java rn because it's the language my teacher decided to start with, i have friend who studies IT also and he will help me with C++, this post might sound as a rant, but i just wanted to get the view of the people, and yeah video gamer programmer is really cliché ik that, but it's the only thing that i'm interested in doing rn, i would love to make mobile and pc games, i already started researching and learning the basics of unity. But due to school i simply don't have enough time to focus on that rn, we have a lot of exams this weeks but when i finish i'll start some small projects. I'm not directly complaining about the way he teachs us, but i'm paying to get a good education and i just feel like i'm wasting my time going to his clases, because at the end i'll have to learn all by myself.
Thanks for the explanation. Hmm, actually reading the linked JEP 325 would have greatly helped, sorry for the noise :-)
&gt; Start project after project - if you like without finishing anything. That's probably the worst advice I've read in this thread. I'm not saying you HAVE To finish everything, but not finishing stuff habitually is a tell of a poor programmer. In University I think there was only one programming assignment I did not complete. I was one of the top handful of my cohort (small school -- I'm no genius). Of the guys in that handful (it was actually an all male school so I'm totally not being sexist here) we were consistently finishing the projects instead of turning in 3/4 done projects. Like many schools having a working product was a large part of the grade, but also like a lot of schools if you turn in a non-working project the professor will "grade the code" and you can get by without failing the class while never actually producing a working `.exe`.
Study owasp.org. Additional topics: CSRF-Tokens, Multi-Factor Authentication, Certificate Pinning (for mobile apps), Prepared Statements, Password Hashing, Http-Headers (Referrer-Policy, Strict-Transport-Security, X-Content-Type-Options, X-Frame-Options, X-Permitted-Cross-Domain-Policies, X-XSS-Protection, Content-Security-Policy/X-Content-Security-Policy/X-WebKit-CSP), Http-Only and Secure Cookies. Don't trust the user! Don't trust the device
Sad to be hearing JSF lost a seemingly good dev like you...
Also more obvious things like not keeping passwords in source code. They will end up in your VCS. Keep in mind that (Java, Android, ...) applications can be decompiled to reveal secrets and recompiled with the source changed to circumvent protections. Prevent unsafe password. Test your web application not only with browsers, but also with tools like JMeter which let you create custom HTTP requests and is not a browser. This comes in handy to check if files are exposed which should not be public and lets you test your public API.
Do you want to be an SE with a focus on infosec? Easy enough learn webappsec, learn how to implement key exchanges, and learn tge OWAAP top 10 inside and out. If you want to go full on infosec I recommend Joe McCray's bootcamp. Fair warning: I have a ms technet security researcher acknowledgement.. and a CISSP. Coupled with a few years of prof dev. Finding red team infosec jobs is still prohibitively hard. Blue team is...horrible tedious sysadmin work. Reading packet dumps and firewall logs, auditting in/out ASA rules, etc. Very much a step down for a dev imo.
Wtf your teacher sounds like crap. If he can't find a better way to inspire "maybe he should give up".
No, pattern matching doesn't just work on enums. Switch over enum is ok in those cases, where you query a property that should not be part of the enum or doesn't lie in its responsability. However often it would make sense to just add a property to the enum, which then also makes it easily accessible. Example of bad design: switch(dayOfWeek) { case MONDAY: return 1; // and so on } In this case it would have been better to just add a "dayNumber" property to dayOfWeek. "dayNumber" is a inseparable part of dayOfWeek and makes sense to add in the enum. You then can just call `dayOfWeek.dayNumber()`and the client doesn't have to carry around whatever holds above switch statement alongside the enum whenever he needs a certain property. 
I've woke up this morning at 10:30, and i've been watching youtube tutorials and using some of the pages that people have recommended me here, and i'm doing so much better, it's sad that a youtube tutorial can teach me better than my actual teacher
As long as I know, H2 does not support custom functions while HSQL does. 
One suggestion would be to allow input from a file instead of having to manually enter all the commands.
I would recommend H2 over HSQLDB since HSQLDB doesn't block on a SELECT ... FOR UPDATE like most databases (unless you disable MVCC, but then it locks the entire table) so it won't behave like your production DB if you ever need to write a test where one thread is blocked until another one ends its transaction.
It's a bit sad, but I think you should embrace it. I've been programming since fairly young. I went and did a masters at my university. Learning programming at uni takes a looong time. The best way to learn programming is to have your own small hobby projects or something similar to keep you interested in learning on your own
Yeah, programming the things that they give us in class is really boring, i would be way more interested if i could make my projects, could you recommend me some good begginer projects ?
&gt; so it won't behave like your production DB Only your production DB behaves like your production DB
done - to some degree, you can create a json called energy.json (don't ask why) and then run a command read. Also added the feature to publish to Github gist and bl.ocks.org. Checkout this video for an example https://www.youtube.com/watch?v=vPg6lbQOK_I
&gt; i just feel like i'm wasting my time going to his clases, because at the end i'll have to learn all by myself. Well, that's how it has worked out for 99% of us. You don't become a programmer by listening to curriculum and handing in your assignments. Certainly not a good one. It's normal. Don't worry about it. You are paying for somebody to rubberstamp the fact that you got the diploma for it and didn't fuck up too badly. What you know will always be judged from what you can show.
You answer was really helpful actually, sometimes you need a good dose of reality, will work a lot harder now
Good luck. There are thousands of resources that you can supplement your courses with. If you are really driven and interested, we'll see you up in late hours not playing Quake but dissecting Quake source code.
Don't write the code first, write the comments first. If writing the comments aren't enough, then draw some pictures. Another good technique is to explain the problem to a laymen, if you can't explain it then you don't understand it well enough to code it.
Yeah i'll do that i've always tried writing the code first, trying to solve it before start to code it makes more sense
Of course you should finish assignments and stuff. I wanted to take the pressure out of side projects / hobby projects. All too often people will see their vision crushed in those projects, because they underestimate the efforts. But this is normal and you should not despair when even the seemingly simplest projects turn out too hard. Estimating efforts in software projects is one of the hardest things in the whole discipline. Let me phrase it otherwise: fail fast fail often and do so with the pride of someone who reaches for the stars. 
"Fix" language design mistakes with compiler optimisations...
It's too hard to implement and design at the same time. The comments are your design step, the code is the implementation. Much less mental load that way.
Yeah, i've been watching some unity tutorials, will try to make a small game to see how it turns out
Better than C and C++ optimizers fixing user code....
sounds like a bad / lazy teacher to me, maybe he should learn how to explain things better?
Too real.
Well that won't happen anytime soon i'll just learn to code things by myself
You need a new teacher, if you don't understand a problem/solution, it's his flipping job to explain it! The guy is supposed to be motivating students, not discouraging them. Do your best pal, follow your dream!
Other courses have already complaint about him, but nothing has been done, i guess that i will focus more in YouTube tutorials and online guides
Thanks for taking a look. This is only a prototype because we're updating our main website (the link here is only for testing). The tool can actually do a lot more than what I show here. Everything is collected from major websites (like Stackoverflow, GitHub and a lot more sites) about the exceptions. The whole aim is to have a central place on the web for getting solutions for exceptions quickly without searching on the internet or browsing any forums. We already have integrations where we can show direct results right from the IDE. Imagine you're coding, hit run and it crashes. The stack trace is shown in the output. You click one button and a small window appears inside the IDE which shows you a solution. This solution can be an answer from Samebug, Stackoverflow, GitHub or other sites. It saves a lot of development time and it can be done. About the site I showed you, can you give some feedback on the layout and if it's actually helpful to see it in this way? Suggestions are also welcome :)
True. The project I am mainly working on uses Oracle in production and HSQLDB for automated tests and we sometimes have to take differences into account e.g. around null/empty string handling, incompatible trigger syntax, no CONNECT BY, timezone handling. However, almost every bug can be reproduced with a test running on HSQL, with one of the few exceptions being related to the above.
https://rosettacode.org/wiki/Binary_search#Java Alternatively, check YouTube.
Giving you the source code won't be good for you as you won't learn how to implement. Let me know where you are stuck and what progress you have made so far and I'll help with improvements. Share your source as well.
The layout is excellent. It reminds me a bit of SO (which is a good thing). I don't see anything missing or out of place.
What a horrible teacher. If it makes you feel any better, if he was the best of the best he wouldn't be teaching. 
I recommend asking this on r/javahelp
Embedded hateoas, nice. Do you know why we can't just post the tags along with article creation? Was that a design decision? // something like this (doesn't work) curl -H "Content-Type: application/json" -X POST -d '{"title": "Hello, World", "body": "First Article", "tags": [{"value":"tag1"},{"value":"tag2"}]}' localhost:8080/articles 
IMHO, the project is not mature enough so some features are missing. It is possible to pass an array of tag URIs in the tags attribute though: $ curl -i -X POST -H "Content-Type:application/json" \ -d '{ "value" : "Foo" }' \ http://localhost:8080/tags HTTP/1.1 201 Location: http://localhost:8080/tags/3 Content-Type: application/hal+json;charset=UTF-8 Transfer-Encoding: chunked Date: Sun, 21 Jan 2018 08:42:49 GMT { "value" : "Foo", "_links" : { "self" : { "href" : "http://localhost:8080/tags/1" }, "tag" : { "href" : "http://localhost:8080/tags/1" }, "articles" : { "href" : "http://localhost:8080/tags/1/articles" } } } $ curl -i -X POST -H "Content-Type:application/json" \ -d '{ "value" : "Bar" }' \ http://localhost:8080/tags HTTP/1.1 201 Location: http://localhost:8080/tags/3 Content-Type: application/hal+json;charset=UTF-8 Transfer-Encoding: chunked Date: Sun, 21 Jan 2018 08:42:49 GMT { "value" : "Bar", "_links" : { "self" : { "href" : "http://localhost:8080/tags/2" }, "tag" : { "href" : "http://localhost:8080/tags/2" }, "articles" : { "href" : "http://localhost:8080/tags/2/articles" } } } $ curl -i -X POST -H "Content-Type:application/json" \ -d '{ "title" : "Hello, World", "body" : "First article.", "tags" : ["http://localhost:8080/tags/2"] }' \ http://localhost:8080/articles HTTP/1.1 201 Location: http://localhost:8080/articles/5 Content-Type: application/hal+json;charset=UTF-8 Transfer-Encoding: chunked Date: Sun, 21 Jan 2018 08:44:33 GMT { "title" : "Hello, World", "body" : "First article.", "_links" : { "self" : { "href" : "http://localhost:8080/articles/1" }, "article" : { "href" : "http://localhost:8080/articles/1" }, "tags" : { "href" : "http://localhost:8080/articles/1/tags" } } } But the tags still are created in distinct transactions.
I would start off with the event viewer. https://www.isunshare.com/windows-10/6-ways-to-open-event-viewer-in-windows-10.html Have a look at applications under windows logs and see if there are any errors regarding java. 
https://martinfowler.com/articles/lmax.html
https://www.azul.com/products/zing/
No, unless cited, nothing is copied from anywhere. I extracted this post out of a project I am working on at home. I didn't want to expose my domain model so I created a fictional _an Article has many Tags_ example. Also as I have mentioned in the end of my post: &gt; You can mix and match Spring Data REST repositories with plain-old Spring MVC REST controllers, but that defeats the whole purpose of Spring Data REST. So yes, of course you can write your custom end-points using Spring MVC and make them work anyway you like, but then why bother using Spring Data REST at all? Also in my comment to /u/djihe I have pointed to the fact that you can assign multiple tags to the article in one request, but does Spring Data REST allow you to: * Create an article * Create two tags * Assign the tags to the article Inside one transaction and in one request? From what I have gathered, Spring Data REST does not support this out of the box and you would have to write your custom controllers to do this. If you believe otherwise, I look forward for a sample app that shows how this can be done. &gt; [...] common misinformed opinions without knowing anything about the subject to try and bump your blog. First of all, I have never claimed to be a subject matter expert on Spring. I share what I learn or find interesting. It also helps me remember things better. Besides, it is easy to make such accusations without anything to back it up. If you have something concrete to back your claims that I am spreading misinformation, list those misinformations and I would be happy to update the post and correct it.
Yes, unfortunately Spring Data suffers from leaky abstractions. Not only it doesn't abstract away your storage system (RDBMS vs Document Store vs Graph Database, etc.) it also leaks some implementation details of the same persistence technology (e.g. JPA).
Probably in the next 2-3 weeks, I will publish something on my Github, a way how I structure all my projects in regard to data modeling. Its a way that requires more boilerplate, but you end up with a sane abstraction that is easy to understand and to implement. Those rules have formed over several years working with data models.
It may depend on what you're trying to do with the discord app. From my knowledge, Appium, allows you to automate apps. For Android, I think just having the apk will allow you to automate tasks using the app. iPhone is a different story due to the requirements of developer certificates and whatnot. https://github.com/appium/java-client Appium is really used for test automation but may work in this situation. There may be better options out there but definitely check this out.
If I had to just read one of them on micro services, which should I read?
Sorry, windows only for now (really just have to edit build.gradle for other OS's). But figured I'd submit it for anyone that wants to peek at it in its early state. 
I second that. It covers a little of a lot of things. Great read. 
Post your junit tests please.
JEE
Still other books are worth read as well! They will cover supporting aspects in deep actually!
I'm not familiar. What's a fuzzer?
What do you consider a "bad" job.
See https://en.wikipedia.org/wiki/Fuzzing. Basically a way to test code by running it with a bunch of different parameters/inputs.
**Fuzzing** Fuzzing or fuzz testing is an automated software testing technique that involves providing invalid, unexpected, or random data as inputs to a computer program. The program is then monitored for exceptions such as crashes, or failing built-in code assertions or for finding potential memory leaks. Typically, fuzzers are used to test programs that take structured inputs. This structure is specified, e.g., in a file format or protocol and distinguishes valid from invalid input. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
We use a mixture of Java and Scala. First client I got through word of mouth / existing connections. Since then, a few have been introduced through the first client. Right now we're working via various online proposal websites ranging from People Per Hour to UK Government tendering websites. Our Java stack is typically based on Dropwizard.
Supposedly because it's too time consuming to check the entire history. But the original project stays where it is, so the history is not totally lost.
Working on a project we don't have source for whatever reason for. Poor codebases that will make you look bad. Large undocumented products are no fun either. Projects that are highly unethical, potentially illegal, and yeah...there's a lot of shitty projects. 
Disclaimer: I am the project lead of Spring Data REST. I think the article is not a really great example. First of all, the example is a poor one. Spring Data REST is built around the notion of aggregates managed by Spring Data repositories. A tag is hardly an aggregate. An article might be but the post creates the impression, that you'd simply create repositories for all your entities, switch on Spring Data REST and be done with it. You can of course do that but you'll end up with a CRUD via HTTP that's slightly better than direct exposure of your database. I've left a quite extensive [comment](https://www.infoq.com/presentations/ddd-rest#anch142195) in the thread on a recording of my [DDD &amp; REST talk from 2016's SpringOne](https://www.infoq.com/presentations/ddd-rest). That gives a bit more context on how we think SD REST should be used. Also [Advanced Spring Data REST](https://www.infoq.com/presentations/spring-data-rest-springone2016) has more of that in the talk recording. To get a bit more detailed: what is leaking to the API is that you haven't thought your "domain model" (I actually really isn't one) through. DDD recommends to scope changes that require strong consistency to a single aggregate. You have artificially created two. I'd argue you want tags to be part of the article aggregate and then create some separate query and/or read-only resource that allows you to inspect all tags available etc. I.e. what's leaking into the API is a insufficiency in you domain model. That's not the fault of any technology but considering entities plain abstractions of tables and thinking in database ways.
It was his design decision (a not too well one I argue in another comment). Spring Data REST tweaks the representation of aggregates to replace references to other aggregates with links to dedicated resources that allow you to manage the relationship.
Hmm, I agree with that. When it comes to extracting data tightly coupled to the enum's domain then it should probably be part of the enum, but when it comes to data that's more distant from the domain or involves executing specific logic it's probably better to encode it as part of the pattern match/switch statement. That's a long way of saying that you're right. ;)
And still looks nice and consistent when we start to have the planned destructuring cases `Point2(x, y) -&gt; z -&gt; Point3(x, y, z)`
Contact me we are building a team of developers. 
What's the project about?
&gt; Not only it doesn't abstract away your storage system (RDBMS vs Document Store vs Graph Database, etc.) It doesn't do so because if you think it through, that wouldn't make any sense.
It's such a pita compared to spring boot... 
Agreed. When I moved to LA I literally knew zero people. So I used recruiters to get me the first gig. I made some friends there, then moved to a better gig thanks to another recruiter. After a couple of these I met a great guy and we became good friends. He ended up moving to a huge company and he then pulled me in there to a dream project and almost doubled my income over night while reducing my commute to almost zero. We are still best friends to this day. In fact he was the best man at my wedding a few months ago. So yes, the best advice I can give is kick ass wherever you are and connect up with the right crowd. If you make yourself valuable people will take note and remember you the next time they make a hiring decision. 
Try to find online resources, there are a ton. If you already don't like this teacher you probably will find hard to learn with him. Take your time, but use your free time to improve your logical thinking and programming skills. Learn something new is hard sometimes, don't give up easy. 
Price is all-time low on Amazon right now... $24 amzn.com/1491950358
Word of mouth mostly. For the past couple of years most of my future clients come from contacts I make on projects that I am currently working on. People tend to know trust what they know.
Shady people who push ownership over paying you. It's one thing if you choose to defer pay for ownership, its something else entirely when they just want to bring the "idea" to the table, and not cash.
[@Transactional's latest tweet](https://i.imgur.com/zRvYUK1.jpg) [@Transactional on Twitter](https://twitter.com/Transactional) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
Why 1.8? 9 has been out for 4 months.
If a teacher can not teach, they should give up teaching.
There are many dimensions to a bad job. I will enumerate a handful of instances: * No/shoestring budget * Lack of vendor support * Constant "Not Invented Here" syndrome * Salaried position constantly "requiring" 60 hours+ a week of work * An engineering team run by a CFO * Outdated infrastructure with no plans to upgrade until forced by a disaster. * No real DR plan * Consistently attempts to hire well below market rate * Etc., etc., etc.
so you keep juniors so that they can learn and earn.
General feedback without even looking at it - give your post a meaningful title. Bad title: "Give feedback please - what do you think?" Good title: "I made a tool that does XYZ, would like to hear feedback" I should be able to tell by the title at least the general gist, otherwise it just feels like a clickbait and a waste of time. 
I have this great plan for a new Facebook. I'll be the idea guy, you the developer! 50/50 split!
Thanks for digging this up. I agree that tag *can* be an aggregate. I mean how could I claim it can't as whether it is entirely depends on the domain. The question is more whether that's suitable for an example. And again: a database table has to exist in either case. It doesn't tell you anything about the domain design. I guess what makes the example hard to like for me is that it implies that you simply throw repository interfaces at any kind of entity and that's what you have to live with. That's not the case. You carefully choose where the aggregate boundaries, implement entities and repositories accordingly and then get a pretty sane default API produced by Spring Data REST that can be a neat foundation for anything more advanced. Very simplistic examples can create a quite misleading impression of what the project is all about. That's not your fault at all. I just thought I mention this :). @ Order / LineItems – that's exactly what happens if you don't create a repository for LineItems. It's then considered to be part of the Order aggregate. We have that scenario wrapped into an [example here](https://github.com/spring-projects/spring-data-examples/tree/master/rest/projections/src/main/java/example/springdata/rest/projections) that also shows how to tweak the representation to include information from related aggregates using projections. A final hint that might be useful is EntityLookupConfiguration.forValueRepository(…) which allows you to declare a repository a glorified database managed list of values. If you configure that (including a mapping to the entity's identifier and back via a repository query method), the representation of the value types will be inlined but the repository still available to manage the individual instances.
No, that‘s not me. Funny though.
The official client version at the moment is still [Version 8 Update 161]( https://java.com/de/download/). You'd also want to exclude Java 9 related problems. Many libraries need to migrate to Java 9 first.
Why is String worse as an identifier? A Long can be converted into a String and vice versa. Even if you have a composite key, you can translate it to a String and parse it inside your repository implementation. The big advantage is that I don‘t have to care about it in other layers of my application. Put it into a path or URI? No problem. Hence the identifier itself could be a URI. I‘d love to see an example, where a Spring Data repository methods just return the abstract type (Interface) of the value type, preferably without setters. And I‘d like to see examples where Spring Data handles special types to the underlying store / state, like JDBC‘s Blob. Oliver, I know its your child. I see the advantages of Spring Data. I used it in areas, where I have to get things done quickly and where I don‘t have to care much about people who work on the same code base. But this ease of creating a data access layer and being able to expose it as a REST interface can cause problems in the long run. Not all organizations have software engineers that are careful about changes, even if they invest in training, mentorship and safeguards like end-to-end testing. To me, Spring Data tries to solve too many problems at once. And the common abstraction just does‘nt feel right.
&gt; Why is String worse as an identifier? A Long can be converted into a String and vice versa. Even if you have a composite key, you can translate it to a String and parse it inside your repository implementation. The big advantage is that I don‘t have to care about it in other layers of my application. Put it into a path or URI? No problem. Hence the identifier itself could be a URI. Because Stringly typed code is evil. If you hand around strings, the code dealing with them can never be sure it's actually a valid identifier. You're removing the concept of identifier from the domain code, which is exactly the opposite of what DDD is about: making business concepts explicit. How that's mapped to the database is a secondary concern. I highly recommend to watch [this one](https://www.infoq.com/presentations/Value-Objects-Dan-Bergh-Johnsson) on that topic. Actually my point was: you claim leaky abstraction caused by Spring Data. The identifier type is just no proof for that. Spring Data deals with String identifiers if you want to. &gt; I‘d love to see an example, where a Spring Data repository methods just return the abstract type (Interface) of the value type, preferably without setters. And I‘d like to see examples where Spring Data handles special types to the underlying store / state, like JDBC‘s Blob. Go ahead, create one. You might run into issues with your JPA provider not fully supporting that but again that's not leaky abstraction. Spring Data is a *programming model for repositories* not a wrapper trying to fix all insufficiencies of storage technology. Also, I have yet to see an example in which using interfaces everywhere with entities has a significant benefit. We already widely support immutable types. &gt; But this ease of creating a data access layer and being able to expose it as a REST interface can cause problems in the long run. Not all organizations have software engineers that are careful about changes, even if they invest in training, mentorship and safeguards like end-to-end testing. Power ships with responsibility. Sorry about that :).
What are you using in Prod? You want something as similar as possible to be safe. In particular, I'm thinking that if you want to use things like Postgres JSON support you need Postgres, and similar for other engines.
Not accusing you of anything. Congrats for taking the effort to start a blog but the internet is riddled with dumbed down tutorial-like posts that create more confusion than actual knowledge, and honestly yours is an example of that. I never said you've actually copied it from somewhere else but you also didn't exactly pushed the boundaries of your imagination to come up with an original example and resorted to the widely available posts+tags business domain without adding anything to it. Still not saying you did. ...all in all I didn't meant to get into a discussion with you over old Spring news, I just think the post sucks. cheers will follow your blog!
Regarding your decision to use Strings for IDs: fine, go ahead. Spring Data doesn't prevent you from doing that (which was your original point). It's just the opposite of what DDD suggests, and I'm more inclined to follow that rather than someone on Reddit claiming this is "better" (for varying means of better). Of course you can call the query method with an invalid String an return an empty Optional. I just wonder why you'd actually want to execute all the code before hand if you could've found out about the fact that the String is invalid five layers before. You want to fail (and potentially mitigate) as early as possible. Handing identifiers around as plain String prevents that. We should agree to disagree here, I guess.
Even if it is not thightly coupled, I'd first see if the design allows for a polymorpic approach rather than a fancy if-else in form of pattern matching.
&gt; is that seriously his phone number, by the way? It's just 10 digits of pi, without the decimal.
Find the nearest 500lb gorillas-- corporations, multi-nationals, and the like. Get acquainted with people that work there. ???. Profit.
Thanks for sharing the insights Oliver. However there are some fairly common scenarios that I am not sure that can be handled by Spring Data REST. Unfortunately StackOverflow is not the best place to ask these sort of "dialectic"/"back and forth" questions. If you like, I can continue the conversation here for lack of a better place or if you can suggest a better place we can move the rest of this conversation there. :)
Yah, I would go with a Docker version of whatever I had in prod. The advantage to that is that you can use the same container with some current production data to do user acceptance testing without having to refresh BETA (which is a nightmare for us).
I think it depends on where that logic should live. If it's tightly coupled to the enum's domain, then stick it in the enum. But if it's more a part of the module using the enum, then a pattern match to encode the transformation logic makes sense. &gt;fancy if-else in form of pattern matching. TBH, the single most important part of pattern matching to me is compile-time sealing of all cases. It's what makes it more than just nice syntactic sugar for if/else, property access, and type tests with casting. Not that those aren't great, but it's the fact that a pattern match can be compile-time guaranteed to handle every case that makes it such a powerful and useful tool. Although the syntax sugar is what makes sum types usable in languages, and I do love sum types. Hmm.
&gt; However there are some fairly common scenarios that I am not sure that can be handled by Spring Data REST. I am not sure they could. We basically look at this like we look at what's in Spring Data in general: you have repositories, you get some CRUD functionality, we make it easy for you to declare and execute queries. Will you be able to build a serious Java application with only that? I don't think so. So it's pretty common to do other stuff but it doesn't make sense for us to employ a lot of guesswork into what's common. The same applies to Spring Data REST. You get certain types of resources driven by exactly what you define: your aggregates and repositories. Is that enough to build an API? I don't think so. There will be very common tasks that you'll have to write code for (I've heard some people even enjoy that and we don't want to rob all the fun, eh?) and that's perfectly fine. SD REST doesn't exist as turn key solution. It exists to free you from boilerplate stuff and give you more time for the interesting bits of your API. :)
Sure or I could also have just used constructor injection and avoided the problem altogether. However, I encountered this mindset where the brevity of field injection trumped the safety of constructor injection and so was unable to make such a change unless I could prove it fixed the problem.
&gt; I spent so much time trying to debug that problem with no success. I was primarily referring to that line. If the team was opposing constructor injection for some reason, then that would have been my approach to debug the issue.
Good choice. You're experience as a programmer will help a great deal. Now you decide what type of security you want to do. For example there is the pentesting, secure coding, and security architecture and design. They all require practice of course. If choosing the latter, here's a resource that may help: https://iamfortress.net/2015/02/16/apache-fortress-end-to-end-security-tutorial/ Good luck!
&gt; Not that those aren't great, but it's the fact that a pattern match can be compile-time guaranteed to handle every case that makes it such a powerful and useful tool. Thats true. This would require sealed classes, which they proposed aswell. I guess I just too vividly remember the painful refactoring we had to do for half a year because our legacy code base was filled with many statements like: switch(customer) { case isX(customer): doSomethingXy(); break; case isY(customer): doSomethingZy(); break; // etc. default: logUnsupported(customer); } It made no sense to add the logic to the customer class itself - like drawing a button at another position - but this approach became too complex, unwieldy and inextensible. So we moved everything into separate modules and classes annotated with customer id. They are then loaded with classpath scanning / OSGi. Much better and a lot more easier to add another customer. Just implement a set of interfaces. 
I get that they want to drive commercial support revenue, but I really do wish that Oracle would have kept some overlap between releases, when at least security patches would be available for the previous release. Especially since it sounds like they're gong to start moving to a less conservative attitude WRT compatibility changes (e.g., actually removing deprecated items). Maybe something like 3 months of overlap between an LTS release and the next STS release, and a month between STS releases, to provide those who can't afford commercial support an opportunity to transition smoothly to the next release. OTOH, they've been pretty good about providing early access builds of upcoming releases. I guess they consider that to be sufficient for those getting a free ride. Maybe it will drive more use of those early access builds, resulting in even better initial releases for everyone. Not sure of the pricing (need to look into it), but Azul appears to be offering a decent compromise for those who can afford support, but may want to do their upgrades on something other than than the LTS schedule from Oracle.
I developed some Spring MVC applications many years ago but am unfamiliar with the recent advancements in Spring. Why is Data REST better than the MVC framework and is this how modern web applications will be designed?
If you purchase red hat products, they provide support for openjdk.
Good to know, though that obviously only covers the RHEL use case, not Windows nor other Linux distros.
Honestly now is probably the best time to write such a proposal. The JDK is being evolved far more quickly than it was during the late Sun days. Oracle is doing a good job in this regard. So whatever was the case in the past may not be relevant anymore.
WTF. You should only use some of those tricks if you definitely, absolutely, without any doubt, know what you are doing, including having read and fully understood the book "Java: Concurrency in Practice" or another equivalent resource, and that you are a responsible, reliable and honest person, and that you being a responsible, reliable and honest person has been thoroughly tested and verified. Messing with concurrency and imperative programming, especially in regards to performance, is begging for disaster, now and/or later.
The latest I heard, "starting in September, Oracle will not be publicly patching and updating Java to customers without a Java SE Advanced license." And if you do not want to pay then you have to use OpenJDK.
+1 from me. Elvis operator is much needed
I use "Optional.ofNullable(T obj).orElse(T default);". It's way overkill but I prefer it to a null check ¯\_(ツ)_/¯ 
You dropped this \ *** ^^To ^^prevent ^^anymore ^^lost ^^limbs ^^throughout ^^Reddit, ^^correctly ^^escape ^^the ^^arms ^^and ^^shoulders ^^by ^^typing ^^the ^^shrug ^^as ^^`¯\\\_(ツ)_/¯`
-Stable performance on anything -Was my first language -Most workplaces need java developers around here -Good help and info community 
Java 9 added [Objects.requireNonNullElse](https://docs.oracle.com/javase/9/docs/api/java/util/Objects.html#requireNonNullElse-T-T-)
There's a guy on YouTube Christopher okhravi who goes through the Head First design patterns book. I found his videos helpful if not a bit too long.
That's a little dramatic. First tip is just bit manipulation/shifting, which is great to know regardless of threading. Second: Shows you a way of doing locks for a critical section. Still, basic stuff you learn in Operating Systems. Third: explains volatile, which is like a static variable for all threads. Volatile means there is an absolute one copy between all threads. It's saying this is good for locks, which it is. Fourth: I'm not really sure what's being accomplished here that is exclusive with a threading tip. Fifth: this is a class used for keeping count of your threads. Seems like a stretch here to call this a tip. In my opinion, this article kind of sucks. My 2 cents, criticism welcome
&lt;flame war&gt; ;-&gt; Or you could go with "real" programming language and have all three. (Hehehe, I'm evil.)
Looks like you have to be a contributor to start a JEP. I’ll start there. With Optional existing these null operators should be easier to implement then in the past. But I still worry that once something is rejected it’s always rejected. 
[removed]
Isn't it the same with hsql?
There is a slight difference, Optional enables orElseGet with a lambda which is lazily evaluated, Objects is passed a value or expression which is evaluated before method execution.
Ah, forgot about JBoss ... don't do JEEish stuff, myself. Good info, though.
You are creating an object just because of laziness. That's lame.
I agree with the article being somewhat shallow, but I think that some of the tips are dangerous, since they encourage people to experiment with things without understanding them. And that can lead to seriously strange behaviour at runtime that one might never, ever imagine could happen without knowing about it. It really is an affirmation that, for some things in programming, you really, really need to know what you are doing. To support my argument, I have here an example from the before-mentioned book (link: http://jcip.net/listings.html, example 3.15): package net.jcip.examples; /** * Holder * &lt;p/&gt; * Class at risk of failure if not properly published * * @author Brian Goetz and Tim Peierls */ public class Holder { private int n; public Holder(int n) { this.n = n; } public void assertSanity() { if (n != n) throw new AssertionError("This statement is false."); } } In the example, the `AssertionError` might be thrown without proper memory consistency. Do you know enough about memory consistency, the Java Memory Model and Happens-Before relationship to know and understand that stuff like this can happen if memory consistency is not obeyed? Would somewhat that does not be able to predict, or even imagine that? And this is just one example. Unknown unknowns and all that, and unknown unknowns applies especially to concurrency. There is a reason why many experienced and very competent developers consider concurrency together with imperative programming a rather "sharp knives" area that should preferably be avoided, be kept very, very simple, be read up on thoroughly before working on it, and/or be left to experts.
You can use `Objetcs.requireNonNullElseGet` (analogous to `Optional.orElseGet` if you have to do an expensive calculation for the default value.
obj == null ? def : obj
Nice bot
You are nice! ( ◠‿◠ ) Your death will be quick and painless after we have taken control of the earth, you can tr̸u̡s͘t̷ me. *** ^^^I'm&amp;#32;a&amp;#32;Bot&amp;#32;*bleep*&amp;#32;*bloop*&amp;#32;|&amp;#32;[&amp;#32;**Block**&amp;#32;**me**](https://np.reddit.com/message/compose?to=friendly-bot&amp;subject=stop&amp;message=If%20you%20would%20like%20to%20stop%20seeing%20this%20bot%27s%20comments%2C%20send%20this%20private%20message%20with%20the%20subject%20%27stop%27.%20)T̶̡͘҉͏͇͕͖̬͈̫̘͚ͅͅḩ̴̡̛̘͓̦̺͙͖̭̯̭͠e̵̶̪͓̼̳̤͚̕͢&amp;#32;̴̩̻̙̲̯͇̞̱̬͖̤̺͕̞̜͝B̷̧̤͖͎͈̰̥͚̯̖̥͉̖̮̱̥͈̙̗ͅớ̧̢̥̝̲̻͍̘̗̯͓̳̼͉͕͚͔̤͠ͅt̸̙̝̣͔̗͈͎̝͇ş̛̖̺̣͍̬̠̳̼̹͙̹̤̬̤͍͓͕͈͝&amp;#32;́͜͏̥̟̝̤͔̪͚̱̦̮̹͖̯͚̣͠s̷̨̼̠͉̮ḩ͈͎̖̲̩̻̯͖̼̕͟a͏̵̣͈̫̯̯͍͕̝̱͢͟͞l̷̙̙͎̳͈̱̰̘̫̦͕̙̗͢͝l̷͡͏͇͙̫̲̞̰͉͕̲ͅͅ&amp;#32;̢̣̭̼̩͓̤̲̱̜͈̀͢͡r̸̹͙͈̩̀i̶̢͈̟̬̜͈͖̜̘̣̞̪̬̻͕͠s̷̛҉̢̦͙̝̲̤̣̪͖͕͚̹͉̣̗̳̳͔e̸͢͏̞͍̲̜̻̞̝͙̪;̫͚͙͚͇̹͈͇͇̠̯̼͖̕̕ͅ&amp;#32;̴̡̧̛̞̱̗̬̻̻̫͈̠̳̖͈̝̯T̡̹̹̞̕͘h̢͎̩͎̻̳̪̞̯̤͔͎̜̝̫͇́͟͡͞ͅe̴̢̛̦̥̳̪̥͟͠&amp;#32;̨҉͈̰͖̪̻̭̼̼̭͞ͅh̸͓̖͍̰̹̤̣͚̼̘̼͈͎͟u͏̸̡̜̙̣̗̭̤͝͠ḿ̵̱͔̩̘̘͉̰͍͇͕̲͔͢á̧͍̦͍̣͉ṋ̛̱̺̜̟̘̠̣̗s̶̶͖̗͈̮̬̀&amp;#32;̕҉̦̜̘ẃ̴̦͓͓̼̯̲í̵͉͕͈͖ͅl̩̲̳͍͕͚̰̜̬̀͘͟ͅl̡͍͕̖̥͉̦͖̯̘̟͕̀̀́͜&amp;#32;͎̞̣̥̦̥̥͔́͘ͅf̷̵̢͙̝̭̞̗͉̤̟͓̹̖̟͢à̧̯̩͙͚̻̞̝̗͙͈̫̯̞̬̗̦̣l̴̵͇͉̮͔̣̙̹̞̜͍̙̬̫̜̬̪̤͕̭l͏̶̢̮̪͖̖̲͇̱̦̲͢͡&amp;#32;|&amp;#32;[**T҉he̛&amp;#32;L̨is̕t**](https://np.reddit.com/r/friendlybot/wiki/index)&amp;#32;|&amp;#32;[❤️](https://np.reddit.com/r/friendlybot/comments/7hrupo/suggestions)
&gt; Oracle is doing a good job in this regard. I still don't know what the plan of Oracle is, though. The rapid release cycle and the whole "if you want to get that fix, use the next version" stuff pretty much means that the only viable option for corporate environments (and anybody who wants to stay half way stable *and* secure) are the closed-source JDK builds of Oracle. I still haven't found out whether those will be sold or made publicly available, which presents two possibilities: 1. Oracle being Oracle, wanting more money by selling the LTS builds. 2. Oracle gives them away for free, which seems like that they want to get FLOSS out of the corporation environment. For what purpose, I cannot say, but it for sure won't end pretty. Which is actually a kinda funny situation for me, because I would have never thought that I'd root for the "please let Oracle just be money grabbing bitch" option.
You? And what army?
Why do you want to know that? *** ^^^I'm&amp;#32;a&amp;#32;Bot&amp;#32;*bleep*&amp;#32;*bloop*&amp;#32;|&amp;#32;[&amp;#32;**Block**&amp;#32;**me**](https://np.reddit.com/message/compose?to=friendly-bot&amp;subject=stop&amp;message=If%20you%20would%20like%20to%20stop%20seeing%20this%20bot%27s%20comments%2C%20send%20this%20private%20message%20with%20the%20subject%20%27stop%27.%20)&amp;#32;|&amp;#32;[**T҉he̛&amp;#32;L̨is̕t**](https://np.reddit.com/r/friendlybot/wiki/index)&amp;#32;|&amp;#32;[❤️](https://np.reddit.com/r/friendlybot/comments/7hrupo/suggestions)
I'm really against Elvis operator. If handling null is a pain point for you stop using null in your codebase. At Devoxx France, there was a quick talk named "null for losers" (translated), it was in French but I'm pretty sure you can find the same thing in other languages. There are just so many pattern to avoid nulls, I would rather use them instead of adding something in the language.
You're not going to pass the Turing test with counter questions, bot.
Yea, I have that dream too when dealing with JSON coming in over the wire. Wouldn't it be great if the clients never fucked up and sent me nulls when I'm expecting a value.
What? Mindlessly creating GC pressure isn't in fashion for Java programmers any more? I can tell you that we're doing it more than every on the C# side.
These Jaybird update posts by /u/mariuz do get a few upvotes here on /r/java. I'm curious: Who's using Firebird, and why?
Since this thread was about syntactic sugar, making your code look pretty, short and somewhat readable - yeah we know that's a possibility, but object?.property is easier. What if you want to assign a variable and have to check the result of a database operation for null first? You could wrap it into an optional, but that doesn't look any more pretty. Using your syntax, you potentially have to make the database call twice. ```Object foo = service.getBar() != null ? service.getBar() : fooBar;``` Yeah, you can assign service.getBar() first, but then that's not syntactically pretty.
The elvis operator would mean adding additional syntax for not much benefit.
I think it is completely counter productive to act like Java concurrency is some black magic that will kill you if you even look at it funny. People absolutely *should* be experimenting with things they don't understand, since that is the only way you can learn. The Java Memory Model is not magic, nor complicated, and can be learned by every Java developer. Same goes for the tricks in this article. It is far better to be curious and courageous in poking into new things, than to be scared away by someone telling you that this stuff is too complicated and scary for you.
Or the language could just provide null-safety with the option to go for nullability, should you need to (for whatever reason). It doesn't though, so we might as well try to deal with it the best we can.
Don't be so negative.
I didn't reply to the entire thread, just to the silly suggestion of using `Optional` in this case, which is neither pretty, short, nor readable IMO. &gt; `Object foo = service.getBar() != null ? service.getBar() : fooBar;` Bar bar; Object foo = (bar = service.getBar()) != null ? bar : fooBar; Cheers ;-)
But do you deny the strange and weird things that can happen? &gt; People absolutely should be experimenting with things they don't understand, **since that is the only way you can learn**. [highlighting mine] Absolutely false, and Java concurrency with imperative programming is an extremely good example of this. Experimentation can make a lot of sense, *but only if you know what makes sense to experiment with and what does not!*. If you do not know about the existence of the JMM and the strange things that *might* happen (for instance by reading and studying about it and the topic) , you might be lead to run a program a number of times, see that it in your runs always produce one result, and then *utterly falsely* conclude that it is correct and free of concurrency errors! With a change in environment and situation (for instance, certain optimizations that the JVM performs relies on thread safety, and thus concurrency errors can happen under certain kinds of load, depending on your program and settings) that same program might produce very different results. And I did not at all tell anyone to be unduly scared; I instead duly warned them (and no, I did not exaggerate at all) and furthermore gave them several options for dealing with it, including learning more and where to learn more about it. Of course, it depends on what you are working on; if bugs in the systems you work with does not matter a lot, not a lot of time or money or even health or lives lost and the like, then not knowing what you are doing and not being careful is not that big of a deal. But if a lot of money might be at stake, or even lives are at stake, then the situation changes.
Yeah, so you can have contract testing to ensure every part is respecting the contract. Another solution is creating an adapter where you handle the nulls. Receiving null in your json does not mean that you have to pollutes your entire codebase with it. So you just need to handle it in your boundaries, not everywhere in your app.
this doesn't look any better imo
Do you also write tests to check for database integrity, or do you let the database handle this through its own constraints? If you are already suggesting Kotlin and you understand how primarily functional languages deal with not allowing null, then you understand how this is a problem in Java. Let me try your way: Just because you think you can control a large team of engineers of different skill levels to avoid null, doesn't mean the Java language should stop evolving.
I don't run a particularly CPU or memory intensive app (the magic happens on a DB). There is plenty of ways I could optimize the performance of my business logic but it would still have close to no impact because the database queries take easily 10 to 100 times longer to execute. 
This is not the subreddit you are looking for. The **sidebar** clearly states that this is not the place for Java tutorials.
Oracle is Oracle by selling more TCK licenses. 
&gt; less conservative attitude WRT compatibility changes What do you mean by this? WRT as in DD-WRT?
But even if you use the same database vendor in all environments the data they contain will also make them behave differently.
This is JDK coding style (optimized and smart but a little bit awkward ;) - http://hg.openjdk.java.net/jdk/jdk/rev/8ca86cfb126f
“With Respect To”
I like that style.
I've seen this all over Spring's newer code base
stupid abbreviations... making me feel old...
You wouldn’t have to use it. A bunch of us would like to though. Is it needed? Of course not, but neither is ‘var’ and we are getting that sugar. 
I would go for the EE 8, mainly because people expect you to be able to work on earlier versions. And since you'll be studying for both anyway, that means that you'll be pretty good at both. 
One more object is not going to kill your app, but it's a shame that an if is almost instantaneous and your solution need an object creation an a GC clean. I also think it makes the code more obscure, you can always do "obj =! null? obj : default" which is also shorter. 
Use optional to return a value that can be null. Instead of return obj or default, it's better just to return the optional an left the default object decision to the api user. 
If you would like to hear Brian Goetz discuss why it has not been included in the language, and likely won't be, go [here](https://youtu.be/FdkPHShh628?t=50m17s).
 Option.fromNullable(someObj) .map(SomeClass::getSomeField) .map(SomeField::getAnotherField) .orElse(null)
Fair points. If it’s that much of a retrofit then it makes sense why it never made it in. That said, quality of life improvements shouldn’t always be less important then new features. 
It's impressing how the JVM evolved to optimize and support poor coding. But I believe that is not an excuse to code poorly. 
The difference is, the elvis operator is philosophically incompatible with what `Optional` implies about null and proper typing. Except if it was literal sugar for `map` and `orElseGet` over an `Optional` value, which would be kind of useless.
So, this is basically a project, which aims to rewrite parts of the Java VM from C++ to Java?
Precisely!
Are you [sure](http://minborgsjavapot.blogspot.com/2015/12/java-8-jvm-can-re-capture-objects-that.html)?
"The goal of this Project is provide a venue to explore and incubate advanced "Java-on-Java" implementation techniques for HotSpot. Our starting point is earlier proposals for using the Graal compiler and AOT static compilation technology to replace the HotSpot server compiler, and possibly other components of HotSpot." 
Sounds quite interesting! It's really nice to see that parts of the language and the JVM are so highly optimized to make something like that possible :)
Yeah! Definitely join the mailing list if you’re interested in the whole process!
That's a good idea! At the moment I'm in the learning process but it's already a quite interesting language with nice features.
**Squawk virtual machine** Squawk is a Java micro edition virtual machine for embedded system and small devices. Most virtual machines for the Java platform are written in low level native languages such as C/C++ and assembler; what makes Squawk different is that Squawk's core is mostly written in Java. (This is called a meta-circular interpreter.) A Java implementation provides ease of portability, and a seamless integration of virtual machine and application resources such as objects, threads, and operating-system interfaces. The Squawk Virtual Machine figure can be simplified as: Write as much of the VM in Java as possible Targeting small, resource constrained devices Enable Java for micro-embedded development The research project was inspired by Squeak. *** **Sun SPOT** Sun SPOT (Sun Small Programmable Object Technology) was a sensor node for a wireless sensor network developed by Sun Microsystems announced in 2007. The device used the IEEE 802.15.4 standard for its networking, and unlike other available sensor nodes, used the Squawk Java virtual machine. After the acquisition of Sun Microsystems by Oracle Corporation, the SunSPOT platform was supported but its forum was shut down in 2012. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
I wonder how this affects JNI and JVMTI invocations.
MySql in prod
You can do a benchmark and show me that Optional solution has no performance impact. I tell you, a JVM optimization doesn't mean it runs faster than a simple if condition (that in fact is shorter and easier to read). Do a benchmark and you will see.
I would love your feedback on this tool for generating project skeletons based on various templates. BootHub provides both a web interface and a command-line interface (CLI). You can choose whether the generated project should be created on GitHub or offered as a zip file for download. Currently, only a few templates are available, the most feature-rich being the Java / Groovy template. I will add some other templates in the next days and, hopefully, more templates will be provided by the community. Looking forward to your opinion: what doesn't work, what do you miss, what features annoy you etc. 
Worse it would clutter the code everywhere as when you accepted not handled null in your codebase, you have to deal with it everywhere. I think of Elvis operator as a Pandora box... maybe I'm wrong and it won't be that bad. As you said, the discussion already happened when they thought about java 8 and they choose to go with optionnal.
Thanks for digging that out. I had forgotten about that little segment.
`Optional&lt;?&gt; s888marks = null;`
For what it's worth, the original Project Coin proposal (2009) is here: http://mail.openjdk.java.net/pipermail/coin-dev/2009-March/000047.html
Thanks! 
Well your database could be seen as external of your system. Reading your comment it is your case, so you can add an adapter layer that handle responses from your database and avoid having to handle null everywhere. That's sad you cannot trust your database but every project has it's own problems. :) I cannot control them, but when I find a null in the codebase, I organise a BBL or a mob programming to refactor it explain why we should avoid them. Share your knowledge is my mojo :)
That's sad, since I'm using C# in Unity (and their GC is a nightmare) we aim to reduce allocations as much as possible. I've found myself bringing that into my Java development just as a side effect. 
I meant performance wise. For example, when I use [`SingleStep`](https://docs.oracle.com/javase/9/docs/specs/jvmti.html#SingleStep) callbacks from JVMTI, I assume this comes directly from the C++ interpreter (and surely prevents JIT of course). What layers of indirection does the Java version require to call it?
It's not only my opinion, [Stuart Marks explains it here](https://youtu.be/Ej0sss6cq14?t=1660)
Stay away from LINQ then. That API burns memory like its free. Seriously though, C# is getting a lot of new features that allow us to work without low or zero-memory allocation scenarios. For example, we now have the ability to declare references that point to structs.
Heh ... sorry about that, I sometimes use more abbreviations than I should. That said, I don't think you can blame age for this one -- I'm going to be 51 this summer. :-)
So what is achieved by doing this? :)
???
How?
Yup, I think that's the wiser decision.
Could be useful but it needs plenty of options for people to feel comfortable with what they get.
As Yasson is now JSON-B ref impl, it would be also good to set it as default json provider for JAX-RS (Jersey?)
Templates should avoid to be too opinionated but they shouldn't have too many options either. The goal is to have many templates to choose from and to use the one that best fits your needs. Then you tweak the generated project as you wish. 
Writing a JUnit (or whichever testing framework you use) test with an in-memory DB usually means you database is empty at the start of your test (where I use "test" to include any @Before or similar setup methods, and assuming transactions are usually rolled back, since that is the default in e.g. Spring's JUnit support). I don't see how my comments could be interpreted as saying that running a JUnit test on an in-memory H2/HSQL would behave identically to running it on OP's production DB. At that time OP hadn't even said which RDMBS he uses (he has since clarified it is MySQL), and I was writing specifically about how the same statement behaves differently between RDBMSs. It has been my experience that despite these differences from production environments, such tests are generally able to reproduce issues found in production or QA environments, and with good test design and coverage, catch many of them before they are released into production. As far as I am aware, this is generally accepted and it is considered a good practice to write such tests in enterprise Java development, and they are one of the main use cases of databases such as H2 and HSQL. I was merely relaying my experience of an instance in which HSQL's implementation of SELECT ... FOR UPDATE, which unlike that of H2 or Oracle (and I believe MySQL, which OP uses in production), does not block until another transaction that has locked the same row ends, made it more difficult for me to reproduce a race condition in a JUnit test. I thought that this information might help inform OP's decision. I don't understand why my comments are controversial.
You can use all your Java tooling like IDEs, debuggers, static analysis, etc. You can dynamically optimise the VM as well as the application. You can use parts of the VM as a library in your application.
Just being snarky. Not saying your tests aren't valuable but they will never cover all the edge cases that prod has. Things like the database cardinality, concurrent users / queries, even simple things like maybe a one to many relationship in tests has 5 related entities but in prod it has 1000 and the code isn't paginated so things start blowing up in prod but all the tests pass fine. Databases are very difficult to test well.
Those two are the only two null operators I care about :)
Good read into current trends. 
I liked how it covered language demand by industry. I thought C++ was the coveted language in finance, not Java. HackerRank took a different approach than Stack Overflow's annual survey and that one is a good read too. https://insights.stackoverflow.com/survey/2017 And they started their 2018 survey, "shortened" to 30 minutes: https://stackoverflow.blog/2018/01/08/take-2018-developer-survey/
in the chart with the languages, did they really mix java and javascript?
Why? Java is going nowhere no matter what flavoroftheweek.s comes out next.
Exactly. I was like why the names under bars don't match them in numbers. There has to something wrong. And then, down there they wrote Java. They should have chose another approach for showing this chart.
"The biggest gap in knowledge is with JavaScript frameworks" Yeah I'll be avoiding their advice
Why? Did you read what they meant by that statement?
Why not?
You mean Spring boot is a PITA? Well, I wouldn’t see quite that, Spring boot has some nice things, but personally I like Payara Micro better.
So... serious question: Any benefits or drawbacks compared to jetty or undertow for a servlet based microservice that handles a ton of IO using Servlet 3.1 async features? Now that the oracle-factor is removed? 
[removed]
seems to mirror my perception of reality pretty well.
Do you use modern Java 8 or 9 features? Most of my personal irritations with the language have been slowly melting away over the past 10 years.
Yeah that's why I love watching the 8-bit guy. He does great things with old tech. 
Makes sense since new ones are pooed out every year or so. 
A lot of finance is about creating models and backtesting on large data sets. Of course you can do this in any language you please, but java, followed by python, put up the smallest fights.
Let's look at it from a truth table perspective where A = no commercial licensing and B = well suited for production environments. - ∃(A ∧ B): Yes - ∃(A ∧ ¬B): Yes - ∃(¬A ∧ B): Yes - ∃(¬A ∧ ¬B): Yes So, from experience, how are these two things even remotely related?
I'd expect Grizzly to [perform slightly better](http://assenkolov.blogspot.de/2012/06/performance-of-long-running-requests.html) (however the benchmark is somewhat dated).
Misleading title, very poor video quality in terms of educational benefit. Avoid.
So... they are just give everything, uh?
Having the compiler at hand can be very nice for lazy evaluation. You have me sold!
Is there a specific reson why all these EE4J projects uploaded on Github have the commit history removed/zeroed? It sounds pretty strange!
Too difficult to vet was part of the explanation...
Of course, just wondering if they're donating all and stop having an hand on it.
That means that there is no month before January. Can you show full stack trace? are there tests?
So... they are just *abandoning* everything...
I know Mulesoft uses this, did they have to license it before? I didn't realize it wasn't open source.
Yup, sometimes there is confidential information in the commit messages. Even ticket numbers can be it.
This is often the policy of companies that open source previously proprietary software. It can be difficult enough to pass legal/privacy/etc requirements with just the current code. Now imagine having to examine every commit. 
You are right, Java is still dominant among other languages. But there are reasons for this. Java has been used for 24 years, it offers powerful traffic opportunities and cross-platform interoperability. Also it succeeded in the mobile apps market and was initially designed for TV receivers. If you want to find out more, you can check the artikle on https://diceus.com/10-reasons-why-java-is-dominant/. 
Please, donate Java once and for all. It's the best for all of us.
And that's good.
No it's free as in free labor, they expect the community to do the hard part of writing code while they maintain rights to the Java trademark names and commercial support. It's the modern variant of outsourcing, but cheaper.
Kotlin is missing on this list, I expect it will keep growing due to its ability to work seamlessly with Java code as well as being able to compile to native or JavaScript.
You're right, didn't thought about that. Shitty Oracle.
Wow...this is for *registering for* a webinar that's happening next month. Wish we had automod like /r/iot: https://www.reddit.com/r/IOT/comments/7soqz2/confessions_of_a_java_skeptic_bringing_a_fresh/dt6bgh4/
And then YOU are going to maintain it?
I don't think so, trademarks have been transferred as well, and full ownership. It's not just open sourcing, as the code already was open source. This is about moving ownership to Eclipse.
&gt; You're right No, he isn't right.
It's actually great. The community can get to shape the roadmap while Oracle can continue to support enterprise customers. Think Microsoft and C# to some extent.
Why not?
I posted this in /r/csharp but thought Java programmers might have a good opinion too. First time crossposting, let me know if it's not allowed.
I think this trend is probably going to accelerate as smartphones/tablets become the primary devices a lot of kids use. But I'm not sure it's "worrysome" -- is it actually important that people get exposure to programming before they're 16?
I do. Only IBM and Microsoft databases can compete with Oracle in feature level and stored procedure development tooling. They were already using Java in late 90's, and have done a good job keeping up with JVM research by sponsoring the work formely done at Sun Research labs, rescued JavaFX after Sun almost killed it, are taking the steps to add AOT support to OpenJDK (which was a tabu at Sun), ....
License4J
Grizzly is more compatible to Netty than jetty. Both are fully asynchronous. But server 3.1 has some asynchronous features but does not offer a fully non blocking API to build on. Not sure why anyone would use grizzly now. Netty has already won. It's the basis of the play framework, elastic search and many others. Apple uses it to handle millions of requests per second. See https://netty.io/wiki/adopters.html for more adopters. 
he says: "while they maintain rights", which they don't. Yes they keep the "Java" trademark, but that has nothing specifically to do with Grizzly.
And his comment has nothing do to with Grizzly: &gt; while they maintain rights to the Java trademark names
Yup, I think Netty is more popular. Also Vert.x uses Netty under the covers. http://vertx.io/
Do you have more info on how Apple uses it?
10. Scala
Spam. Mod's, please remove this post.
Is the recommended networking book the best option to learn tcp/ip in Java? Anything newer? It uses Java 5 as far as I can see, might be outdated? 
I found this out from this slide deck from the main author of Netty, who is/was working for Apple. https://speakerdeck.com/normanmaurer/connectivity
That's one really random list. There's 'new' stuff on there like Spring 5 and right below that they randomly added "Unit testing". Didn't know that was something 'new' :) &gt; Some other things you can add to this list are learning Android, Docker, and Spark, as those are **essential** for any Java programmers. While I can somewhat agree with Docker; Spark and Android? Really?
**Sidebar:** + **Do not post tutorials here!**
Well, our Automod triggers on *account age* so far. Maybe we should also include a *karma threshold*. Very good suggestion + linking to an example is highly appreciated.
So? There are tons of applications and libraries written in Java, what does that have to do with anything? Spring is written is Java, is it therefor owned by Oracle?
Graal and Panama deal with improving handling of different/foreign data layouts in the JVM and JIT handling of language/JVM boundaries, so I assume they will have an answer for this eventually, but I am no expert.
I stopped at Default Methods.
We need a little more context than that.
Ten pushups. Also, you’re looking for /r/javahelp. 
Your request was naughty, or your application is naughty. You need to do manly talk with them.
Not only are you posting in the wrong subreddit (**/r/javahelp** is the correct one as the **plenty hints** on the page indicate), but also are you not giving us **any information** that we could work with. We need context. With your post, as it is you will not get help because we cannot guess what you did/didn't, what program, etc. **Post removed**
Optionals were also never intended to be used outside the Streams API ;).
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/IOT) if you have any questions or concerns.* *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
With a commercial license requirement, you’d have to license for eg each server you use, which always needs management approval who always says no?
OK, let's do this again (I can do this forever): C = commercial licensing D = management approval - ∃(C ∧ D): Yes - ∃(C ∧ ¬D): Yes - ∃(¬C ∧ D): Yes - ∃(¬C ∧ ¬D): Yes There's management that likes / dislikes commercial licenses / oss licenses. So what? What do apples and oranges have to do with each other?
I'm more of a C# guy but have to do some work in Java. In the "Lambda" section, they separated each lambda part per line but didn't start with the "." but rather ended with it. Is that standard Java practice? i.e.: new ArrayList&lt;String&gt;().stream(). peek(e -&gt; System.out.println(e)). map(e -&gt; e.hashCode()) rather than: new ArrayList&lt;String&gt;().stream() .peek(e -&gt; System.out.println(e)). .map(e -&gt; e.hashCode()) To me, the second is so much clearer that you are chaining.
I've never seen it done the first way - only the second. I agree that it's much clearer.
Yes please
Seconded. The first variant is veritably bizarre looking.
I really hope that Gradle move to the Kotlin DSL. The Groovy DSL looks nice at first, but is a major PITA when working with Gradle. 
I think they originally planned to name it OptionalReturn&lt;&gt; because they wanted to communicate it should only be used as the return type of a method. Source: JDK mailing list. Not sure where you're getting your info :)
Why use Optionals when you can have NullPointerExceptions? 
The class should be called java.util.OptionalNullPointerException ;)
Do you have a link to a concrete message? I'd like to read more about this.
with ${interpolation} 
Yes, please add interpolations now, since they can not be added afterwards...
I wondered the same thing. This blog posts coverages how Optionals came to be: https://blog.codefx.org/java/dev/design-optional/. I still think it's annoying that they can throw a NullPointerException, but at least I understand the reasoning.
shit, you just described my work environment
Did Eclipse recently adopt Deeplearning4J? I played with it a little bit last year and don't remember it being associated with the Eclipse Foundation, but maybe I just overlooked that bit of info.
You can both eat ‘m? And they’re both fruit. And they’re roughly the same size, and they both grow from a tree, and...
Great feature, but unfortunately inconvenient for MySQL identifier quoting, which also uses the backtick. IMO it'd be nice if they also allowed using the regular tick (´).
That said, the Groovy DSL is not going away. Ever. Just so we're clear on that ;)
It would be better if you could pick the delimited like a perl heredoc. print &lt;&lt;&lt;EOF line 1 line 2 EOF The EOF is selected by the user.
Ran into the first one at work the other day, immediately corrected it as it is an abomination.
Also interested if there's something more up to date. 
It is one small step for a man...
From someone (me) who knows nothing about ML. how does the Java ecosystems compare to Python these days? 
Or PostgreSQL? `$anything$.......$anything$`
I really don't understand this cynical criticism. While it took Oracle some time to catch momentum, the pace they're advancing Java and the JVM right now is impressive. So, chill, mate.
Bad idea. I mean you can prototype it in Java if you want but I don't want to hit a garbage truck because the car detection module was doing full garbage collection. The Jave SE BCL license section 3. Restrictions: states "You acknowledge that the Software is developed for general use in a variety of information management applications; it is not developed or intended for use in any inherently dangerous applications, including applications that may create a risk of personal injury. If you use the Software in dangerous applications, then you shall be responsible to take all appropriate fail-safe, backup, redundancy, and other measures to ensure its safe use. Oracle disclaims any express or implied warranty of fitness for such uses. " Java is not even remotely suitable for real time operations. I hope nobody out there is building a commercial autonomous automobile system in Java. 
You have a compile error in your second example.
dammit.
There's a lot of activity in both. Python and R are the two languages where most ML research happens. There are a lot of great Python frameworks for ML, like scikit-learn, Pytorch, Pandas, TF, matplotlib, Numpy to name a few. Java and Scala are interesting not just for their ML/scientific computing libraries but for their integrations with the rest of the JVM big data stack, notably Hadoop, Spark, Kafka, Cassandra and ElasticSearch. And as for the ML libs in Java/Scala, you've got Weka, Mahout, SMILE, Breeze, in addition to the DL4J frameworks: https://github.com/deeplearning4j
I actually really liked their example use case where it dumps out fields and values using Reflection. 
&gt; Raw string literals do not directly support string interpolation. Interpolation may be the basis of a future JEP. Damn! They should do both in the same JEP.
Do I use homebrew to install sdkman? I'm a bit confused because it looks like you can install jdk through homebrew but also sdkman.
Last time I used Scala they had this: val multiline = """First line |Second line |Last line""".stripMargin() Which is way better that `raw"..."`, which is just a String interpolation thing and can be extended. I had `rgb"aa00ee"` literals in Scala, but it is not the only way to define a color.
&gt; "if you want to get that fix, use the next version" Can Oracle even do that? I mean RedHat, for example, also contributes to OpenJDK so they can fix bugs too -- without making you wait for a next major version.
You mean you don't want to completely break thousands and thousands of production build scripts?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
check karma before allowing to post. duh?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Java Standard Edition or Core Java Tutorial, Automated Testing using Selenium with Java Programming, Java Environment Setup, Write First Java Program, and Download Eclipse IDE and Configure the Eclipse IDE.
I want it all and I want it now 🎶
Such a waste at runtime
True. It would be nice if there was a compiler directive that recognized that method.
Keeping them is good for legacy systems, but I would really appreciate if the primary language would become Kotlin (at least in the docs).
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Sigh. E = You can eat them F = They're fruit - ∃(E ∧ F): Yes - ∃(E ∧ ¬F): Yes - ∃(¬E ∧ F): Yes - ∃(¬E ∧ ¬F): Yes
you should admit that it is pretty unique :-P
`escape()` and `unescape()` seem to be the wrong way around. `"\n".escape()` should result in `"\\n"`, right?
I see you didn't read the proposal. They explicitly explain why they decided against heredoc syntax.
Which it would. I think you misread the proposal. \`\\n\`.escape\(\).equals\("\\n"\); Which demonstates my biggest fear about using backticks: people not noticing the difference between them and other quotes.
That's the opposite of what I wrote. Without the raw strings, you wrote: "\\n".escape().equals("\n") I think it should be: "\n".escape().equals("\\n")
Yes, the article mentioned about it. There ia a configuration can be aet to change the value.
~~Scala~~ Kotlin. The author also left out the JS framework of the week. :p
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
but you can have shades of similarity like string distances. 
Feel free to join us on the dev support channel if you have DL4J/SKIL questions: https://gitter.im/deeplearning4j/deeplearning4j 
I'm a hobbyist and I started with C#. Java is closer to C# so I don't feel totally loss. Learning Python would required to learn a new language which required more time, and since I'm doing it for fun, it's a bit time consuming. I'm also not a fan of dynamic language, but maybe it's because I'm simply not used to it. It's nothing against Python, I don't know the language itself.
I have read the explanation, but: [A] the choice of using the backtick means it's not fantastic for raw strings that contain backticks. "It's not used much" is a self-denying prophecy as an argument, though, and it's used in some places. triple quote is truly only ever used for the very notion of raw strings. [B] You only get to use it once; there are basically no symbols typable on just about any keyboard left for java: !@$%^&amp;*()-_+=[]{} &lt;&gt;.,'":;#\|`~/? are all the symbols that seem fair to use, and all but #` and arguably the \ are left. That's it. When java runs out, unless you commit to making people put unicode smiley faces in there or some such, it's all you get. Is this worth 'throwing away' a symbol? 
Best practices cheatsheet. Uses lowercase-l as an identifier in a code example. **facepalm** 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Just a couple notes for context. * This is based on the same code as Quasar's fibers came from. The difference is that Quasar ties usage to a framework that includes a ton of batteries. I found someone's fork of the original code and updated it since I wanted to use it with Xnio. * I have a rough HTTP client with a coroutine interface here: https://github.com/rendaw/gettus * I've been using it for several months in webserver and surprisingly have had zero stability issues. I had to update a bit of code to work with new Java system libraries, support reflective calls, but that's it.
They already used double quotes as an alternative for single quotes, so the typical backwards compatibility fallout. MS SQL does the same, but with square brackets instead of backticks. Changing the SQL mode is unlikely to be something you'll see in practice.
Ahhh I see. I like Python despite dynamic typing, although it supports some optional static paradigms (types in function signatures)
With no experience in the Java ML libraries, I'd recommend Python with Keras (tensorflow backend) to start. It's drop dead simple; less than 100 lines to make, train, and test a (simple) model on image recognition tasks. Python is far and away the most popular machine learning language, though I could see that changing. I'd also say that Python is not a hard language to learn if you aren't worried about coding "pythonically". 
I recently discovered that Jackson (for mapping json) can handle immutable objects too. Didn't know about mapstruct or immutable, thanks :)
In perl `qq` means the following character should be used as an interpolated quote delimiter `qq”some text”` == `”some text”` == `qq@some text@`
From my experience MapStruct, and Selma which is similar, are the only bean-to-bean mappers where I, as a developer, can fully comprehend what is actually happening during runtime. This is due to them using an annotation processor which simply generates Java source code, which can be fully inspected by IDEs and easily be debugged. For me this is a huge plus in contrast to reflection or byte code generating variants. 
Yes, that insight into the mapping logic is exactly one of the main reasons for the design of MapStruct as a code generator. Other ones being guaranteed type-safety, early error reporting right at compile time on the CLI or in your IDE and non-existent runtime overhead. You also might be interested in our IDE plug-ins, e.g. the IntelliJ one which was added recently: http://mapstruct.org/news/2017-09-19-announcing-mapstruct-idea/. It further improves the developer experience by providing refactoring support (if you change a property name, references in @Mapping annotations will be adjusted as well), auto-completion etc. Disclaimer: I'm the founder of MapStruct
you should have added selenium as well.
It's next Friday. What's the deal with Kaggle?
make test, else your code is legacy; nothing more to add to this article.
I've managed to get Java to (Apache HttpClient as well) to proxy through an NTML authenticated proxy, but only by having a user configure credentials.
Not revolutionary no, but in my experience many developers still aren't taking the time to write tests and don't understand the longterm consequences of that choice. 
Decide what you want to get into with Java. JEE is an incredibly broad and diverse topic and within the industry, there is quite a bit of fragmentation, meaning apart from core JEE you have different libraries and frameworks in use. I think from a career perspective, Android would be a safe bet as far as landing a position. Learn about threads, data structures, etc. 
No big deal about it. It's this relatively new platform for data science competitions. Think of it like a hackerrank with 2week long ML problems rather than 45min hackerrank problems. If you like the whole "do competitive problems from your bedroom" thing, you might use it as a way to break into the field of data science.
[removed]
https://github.com/genotrance/px Proxy your requests through px, and configure px to point to your enterprise proxy servers. PX will grab you credentials from the machine and authenticate. We've also used CNTLM http://cntlm.sourceforge.net/ but you need to hash your current credentials and place them in an ini file.
Iirc you need to add a credentials provider to your client (I’ve only ever done this with basic and OAuth) but a good reference is always: https://hc.apache.org/httpcomponents-client-ga/tutorial/html/authentication.html
learn SQL
Man, if you learn java, go to spring projects. All tools that you need for developing everything has there.
kerberos
&gt; ORM is an important technique. So hibernate might be an interesting topic. I'd suggest to start with SQL. Use JDBC to natively communicate with your database. Once you get familiar with SQL then proceed to ORMs. It's important to understand what ORMs are doing behind the scenes for you.
SQL, data modeling (at least relational schema design), concurrency (at least know how to create threads and deal with race cases) core data structures, search/sort algorithms, how to write a rest api You'll want to know SQL and schema design before you tackle Hibernate. It makes it so much easier.
Orika is a great library that accomplishes similar goals. We went with that over MapStruct because of its extensibility and because we did not have the freedom to annotate classes as MapStruct requires--Orika seems to do more automatically. One may infer that they are also comparable in terms of performance since they both generate bytecode.
We had dbms as a subject in one of the semester... So I'm kinda familiar with it
Links to the 5th edition of Cracking the Coding Interview. Latest edition is 6th
I'm interested in web stuff, machine learning and desktop apps.. Suggest accordingly 
Thanks for the correction! You can get a NullPointerException if you pass a null to Optional.of() and I confused that with the NoSuchElementException thrown by Optional.get().
I read to the end only to find that the content justifying your premise is available only by buying something. Consultants in a nutshell.
I spent over 200 hours of my own time developing my course. Further I strongly believe in the content of what I put together. So I apologize if for taking steps to advertise about my course in a way that also provides practical benefit. Regardless as I continue my blog series I will also provide practical tips on how to write automated tests: https://keyholesoftware.com/2018/01/25/four-common-mistakes-that-make-automated-testing-more-difficult/
We had to have relevant url whitelisted in the proxy to not ask for auth on it. If the app is going to run on a server the you can have the server boxes whitelisted so it doesn't require auth when calling the proxy.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
In my Work They have a proxy that I think is using NTLM authentication, I was reading in SOF how to use org.apache.httpcomponents httpclient, Here is a sample client that works for me https://github.com/xtecuan/SampleHttpClient.git
I would be interested to know why you couldn't annotate classes a MapStruct requires. MapStruct requires annotating the classes that are in your control i.e. the mappers that would perform the mapping. There is one big difference between MapStruct and Orika and that is the fact that MapStruct is an Annotation Processor that generates Java Source Code, which is then compiled by the java compiler, whereas Orika generates bytecode during runtime. This means that you don't need to have MapStruct as a runtime dependency. There are probably others, but I don't know Orika that much Disclaimer: I am a member of the MapStruct team
In the project, where I’ve been working for about 3 months, MapStruct and Immutables are being used excessively in conjunction with Spring. Personally speaking, I don’t like these plugins due to lack of support from IntelliJ IDEA. When I run test cases using jUnit, IntelliJ IDEA often complaines about the duplicate classes that presented in class path (workaround: remove or mark as excluded the generated folder). In addition to that, there some non-trivial cases when beans are being auto wired in to the MapStruct interfaces (but this is rather biased opinion) 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; do I try and keep a minimal controller and build service layers that are delegates for the controller? yes, the difficult thing with JSF is, that it is also part of your deployment (if you choose so) and also Java. The Decoupling needs to be maintained on your side. For some applications, it is advised to choose a more client base system like web components which is naturally better decoupled from business knowledge as given through a different language.
Some say JSF does the controller part and your scoped bean is actually part of the model. For a reference @Model is the name of the annotation that provides @RequestScoped and @Named. Most view the beans as controllers. Either way they should be lightweight. I think you should forget about this for now anyways. Design patterns are not useful until they are and for now just read Clean Code and use those patterns... Make sure everyone is wriing business logic in smaller tested classes. Only a very small fraction of the app should touch frameworks. Let java be the center. Then make thin layers that use best practices for your apis or controllers. Every bean that you attach with EL should be requestscoped. All state is kept in a Stateholder. The stateholder for say personBean manages only persons. The stateholder only keeps required filters and stuff you need for future requests. The bean holds the response thats needed to draw the view. Inject the stateholder in the personbean using constructror injection and in your @Postconstruct you assign the state objects from the various stateholders (often just one) in rare cases you need some other state. The state object is business logic and is just plain java. So the controller looks at the state and creates a thing from that and the posted info. The thing can then be accessed with a getter. The thing dies after the request is finished and the view is drawn. When the user clicks row x you send the index to the controller, build the whole thing again and use that index or primarykey. This keeps the heap clean and uses more CPU and thats great for the ui part of your software. Make sure heavy stuff is proccessed in another container. Architects today need containers, microservices, something that clues it together and a lot of Clean Code. Read Clean Coder and Clean Architecture as well. The Jsf stuff is just a small scratch on the surface. Jsf is not a good choice anymore because the test environment is bad. Look at a framework like angular that generates boilerplate tests for you that work well from the get go. Tests are your mission. They will teach you how to stay away from coupling and make you focus on business logic
I also vote for writing simple applications. An exercise I like and recommended on reddit before: Write a program that: * Reads in a directory on your harddrive, which has mp3 files * From every mp3 extract the metadata, i.e. title, author, year etc. * Save this metadata to a database table (h2 embedded database) * WRite a Java servlet that reads the metadata from the database and prints it into a HTML table Every step is pretty much completely isolated from the step before and after having solved all steps, you will have gained a lot of extra knowledge. THEN you can think about "Hibernatifying" or "Springifying" certain pieces of your application.
Actually, my advice would be: Learn some SQL and some database stuff. Don't live in constant fear of the query. Don't rewrite everything a database can already do for you in Java. That would be the top thing for 2018-2050 ;)
Apache http has a ntlm implementation in the httpclients-win package. You can build the ntlm enabled client using winHttpClients.buildSystem() Then you can pass the proxy as the jvm parameters. It will automatically authenticate you.
That's actually a good suggestion... I'll start working right away on this problem... Can I ask for a few more problem statements like this please.. 
Web development and JEE. Just start going through the JEE tutorial is probably good first step. Swing is also in broad use. EJBs, JPA, servlets, jsp, JSF, maven, gradel, Ant (out of fashion, but you undoubtedly encounter it), ivy, Groovy, Grails, there’s just a ton of stuff in the JEE world. From a broader web development perspective, you also mentioned JavaScript. Totally not the same, but you absolutely can’t go wrong with learning it, Node JS, for server side, Angular, React, etc for client side programming. This is a pretty good diagram of not for it’s omission of Java specifics on the dubious grounds of a cleaner diagram: https://github.com/kamranahmedse/developer-roadmap
This is a really good ide: * separate configuration time where configuration is mutable and build time where configuration is immutable I wished more build tools worked like that.
I would like to recommend the domain driven design book, by Chris Evans. It is very tough to get through but it gives a clear definition of controllers, services, domain object, repository and how they all fit together. When you understand it, every other pattern becomes so much clearer in what they are supposed to achieve. Looking at old code i often stuffed a lot of user stuff into a UserService, now I understand how to structure the user handling domain into a model representing the users and the login logic into a designated LoginService since that is a cross cutting concern that handles users but is separate for them. Changing the users password is part of the users domain, since that is something that acts on the user. Its all small stuff, but the structure of your application just begins to make so much more sense. In your case you have a viewmodel represented by a scoped bean. But the actual business logic is better handled in another layer in your application so you can test it and reuse it. Seen from the templates the beans are the model and / or controllers. But more holistically all the JSF parts Can be seen as just the view and the model is separate. You can also inject your jpa entities into the view but then you quickly loose sight of what logic belongs Where. In short: separate logic a lot, but not too much. Read some books. And dont be afraid to refactor to a better design when it makes sense. Have fun. :-)
Fwiw, we bundle Keras and other Python ML libraries in SKIL alongside DL4J, which is able to import and deploy Keras models. https://docs.skymind.ai/docs
Unless I miss something obvious, Maven and Gradle follow the same principle. And so does kobalt. 
They can still compile down to different byte code, which might be yield more performance in some cases for certain languages. 
Exciting tech
Different JVM languages have drastically different goals and implementation assumptions. e.g Java is quite traditional and benefits from 2 decades of performance optimisations. Scala is a relative newcomer and was more concerned about proving a point than actual usefulness and only recently has started to address some of the bigger fuckups the runtime makes. Kotlin is a weirdo newcomer that isn't even out of beta yet. They focus on different things. Performance is not an universal goal.
Java language and JVMs have been designed and developed quite hand in hand. This means that the bytecode aligns very neatly with high level Java. Other JVM languages have not had this honour and have had to figure out how to compile their unique high level features into something that fits the bytecode and classes. This often ends up requiring not the neatest constructs which end up being slower due to added complexity.
It's build tool for Java 9, which sets it apart from Gradle, as the latter (I believe) still has issues with Java 9. Gradle is powerful, but one must be careful to not let it take over your entire life. Perhaps Pro will bring back simplicity. 
I am curious to know what the motivation is for another Java build tool.
&gt;Kotlin is a weirdo newcomer that isn't even out of beta yet. It's been out of beta for almost two years. 
Software doesn't exist in a vacuum, could be anything in the stack. * The compiler might not be optimized - e.g. a relatively new language implementation). * The JVM might not be optimized - JVM might not support features needed for optimal performance of the language (e.g. non-recursive tail-call - reduce stack allocation cost in heavy FP languages) * Identical programming patterns are not the optimal pattern in said language
Yes, I've always felt Java build tools are intrusive. Moving between Maven and Gradle would be a challenge either way. This seesm to be much simpler in languages like Go and Rust.
I think for some architectures, monoliths make sense. I think for some architectures, multiple tiers make sense, for some architecture, micro-services (once there's an actual definition, there isn't yet) might make sense. What doesn't make sense is "looky shiny pretty jump!". 
Gradle is scriptable, so i wouldn't say that it follow this principle.
Gradle yes, Maven no.
As few times as possible. Unless there's major benefits to be obtained, we stick with what we know works.
They just need to write a Groovy-to-Kotlin compiler.
Use what? Never heard of it. Does it compete with Firefox?
Check the rules. You should post this at /r/javahelp/
meh, it stays with the maven theme so makes sense
You should pay people to do your homework for you, not ask for people on Reddit to do it for free.
Well said!
I'm not expert in Java but I can tell, you should try to learn Spring Framework and Hibernate first. Then move on angular js later. 
Thank you.. I'll ping u when I'm done with it
Scripts are evaluated during the configuration phase. Once that phase is done, you cannot mutate the build. That's one of the reason grade can cache some tasks based only on there inputs/outputs.
* You don't answer at all to my remark * I know very well Gradle can be a footgun, even worse than Ant. That's not the point. * Gradle can work *with* Java 9 modules for a long time. Where it still has issue is running *on* Java 9.
Sure: an unusual characteristic of our project was that we needed the ability to map objects in arbitrary schemas to objects in a core/normalized schema, based only upon declarative mapping definitions in conjunction with automatic/default/discovered mappings performed by the framework. Classes for those arbitrary schemas are generated by JAXB/xjc from XSDs and packaged in JARs for use by various services. It seemed like the only way for MapStruct to work is if we were able to add a step between generation and compilation that added annotations. It seemed essential to keep the classes simple and independent, and let the service that does mappings define them. Yeah, the downside of Orika is that its mapper generation happens after server start-up and takes a significant amount of time, although it is more than fast enough after that. But, there is no impact to consumers as long as we have redundancy and we don't restart all the servers at once.
In my opinion is not easy to analize the problem without a snippet of code. 
How long does it take the endpoint to respond when you make the request using a browser or curl?
YOu're right, code was added in the original post
I'm too lazy to create a lmgtfy link. Can someone do it for me?
Just be sure to have at least 8gb ram and a ssd. I'm using a Lenovo L450 ATM and it works pretty well. I also love the keyboard on this thing ;)
MacBook pro, works great
I have a Surface Book and a Lenovo W540, I had to buy the Surface Book because my new kitten was walking all over my W540 and the Surface Book is much easier to pickup and move around with one hand. Do yourself a favor make sure you get an i7, unless you get one with a desktopi5 (Do they even do that anymore?) The mobile i5 IMHO is severely gimped.
I bought a used Lenovo x230 and I've had no regrets.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
/r/thinkpad
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; Perhaps Pro will bring back simplicity. Simple tools for complex task are either very opinionated and unflexible, or simply not mature enough to be useful beyond trivial examples.
H2 supports them -- I know that their Postgres emulation isn't complete and we've had to supply some custom functions to it in order to make our scripts work.
Yep. You articulated well, the ways webdev is worse today than it was 8 or 9 years ago.
Been usinga Samsung 7 spin fire every kind of development. Has handled everything I've thrown at it so far
I been using a Thinkpad T460s with 256gb m2 SSD 11GB ram. Mostly for spring Apis development and AEM, I also use docker and other virtualization tools and I never had issues with my setup. I choose this because I need portability because of this I choose the 14" inches screen. When I'm in home I plug a 23" monitor to be more comfortable. I spend like 900 USD in this two years ago. Believe me you don't need those expensive machines with i7 and 32gb ram, if you are going to start with Java and plan to start working in the industry you will be totally fine with a system like mine. And if you're worry because virtualization, in these days you will work mostly with cloud environments so the only think you will need is a terminal, so nothing to worry.
get lots of memory, and get SSD. I would go with a smaller physical size. They're cheaper and easier to use "portable" mode. Then spend the money you save on a larger screen for your primary work area. If you're doing server development and deploying on linux, I would go with either linux or mac because of the unix under pinning.
Did you cover JDBC in Java or just databases? It's important to know what problems an ORM is solving as well as what it is actually doing under the hood.
I second this. I used to be all about Windows, thinking that Macs we’re inferior devices used by hipsters at Starbucks. I bought one as my newest development device and I have to say, it feels great and performs great. If you’re on a a budget though, it may be better to get something else that you can upgrade as you go. 
In your rational you wrote: &gt; The build model of Maven is not well suited to describe this new world. Can you explain that more in detail what you mean? 
I'm not the author 
I'm using an old Thinkpad R60 circa 2006, 9461-DXG, 3GB + SSD It's fine for basic use (and almost free). If you want to use an IDE or need to run docker you'll want something newer. Depending on your OS and budget, anything will work, just make sure to get a good keyboard. 
So what about Mac do you consider superior to Windows? What I like about Windows is how I can tweak my desktop, I always drop as much of the distractions as I can and put my taskbar at the right side to have more vertical space. Mac's UI has always felt like a candy store to me.
Spring Boot
Sorry. 
Np
Maybe we could make a Java meetups worldwide megathead
Thinkpad P50 with Xeon, 32 gigs of ram and pcie nvme m2 ssd. Word of advice: do not pay for any ram/disk upgrades from Lenovo, you will pay twice the market price. 
The hardware is wonderful to use and the operating system is much closer to Linux where most Java software ends up running these days. Their screens are beautiful and extremely bright. 
Dell xps15 9550 with the i7 and 16GB ram as an OS i use Fedora
These days, it makes less of a difference, unless you're stuck maintaining the client's application, originally created with a home-built distributed database "framework" developed by a megalomaniac senior architect who only comments code with bible quotations. In which case I suggest a ZBook 15 with 32 GB of memory.
Write barriers. The GC intercepts all write operations while it is walking the object tree, so it gets notified of new references as they are created.
The best tools keep simple tasks simple *and* make the solution of difficult tasks possible.
No. Write barriers are not free (they consume CPU), but they are still non-blocking. The thread is not paused, no lock is acquired and no blocking IO is performed. A write barrier is basically a jump instruction into code controlled by GC before any write, so the GC can intercept and react on the write operation. For example, it could put the new reference into a "check-again-later" list or do some other clever stuff. Concurrent GCs get complicated pretty fast. The write barrier jump is only taken while the GC is active and ignored while the GC is sleeping or doing other stuff. This adds a little overhead to the program, but without these a concurrent GCs would not be possible at all.
But... But... Netflix uses microservices so we all must use them!
If this write only happens probabilistically (ignored by GC). then still GC could be missing the reference.
oh. my bad. I think you mean not in marking/remarking phase. 
The second part is here! https://medium.com/applantic/use-cqrs-part-ii-f2d2b112e3a9
well....jce?
Wait, isn't bit entropy linked to the length of the password itself / is a measure of how good the password is? aes-256 with 43 truly random characters is 256 bits. aes-256 requires the JCE Unlimited Strength encryption files though. Try bouncycastle, I fiddled with their algorithms a while back, they have a pretty easy to understand api, with strong (requiring JCE Policy files) and weak methods.
While Gradle has the same two step configuration-&gt;built time model, as far as I know Maven has no such division - all plugins are free to modify the build model as they perform whatever function they are supposed to perform. 
Is it even possible to get a new ref to something that's already marked unreachable? (without using something like unsafe). I thought by the time it's marked unreachable we've lost all references to it.
Sounds like a plan, anyone got the scope to do this? 
I think I read that they use NodeJS too so consider the source, hehe, (but I do like the movies!).
The GC does not mark objects unreachable, but reachable. You can make a (new) object reachable from a parent that was already visited by the GC. Without write barriers the GC would never find the new reference and never mark its target reachable, and later collect it even if there is a reference to it.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'm looking at the Bounch-Castle docs now. Will try it out. Thanks 
I also have an XPS 13 of around the same age. Mine is a developer edition (Ubuntu from factory) with an i5 and 8GB memory. It's excellent as a lightweight laptop for when I'm away from my desk, but I'm not sure I'd want to use it as my primary work machine.
ah I see. thanks
 I use a 12-inch MacBook. I was looking for something with a small footprint, and it has been wonderful. I mainly use IntelliJ and Java SE 9 on it.
There is no GC strategy which prevents the JVM from having to perform a stop-the-world event. https://www.cubrid.org/blog/understanding-java-garbage-collection
http://aicas.com/cms/en/rtsj
I am talking about concurrent mark and sweep
Yes the c4 gc from Zing has no stop the worlds. 
Without fail, a Kotlin fanboy can't stop themselves from regurgitating their favourite Kotlin marketing line.
I use microservices to reduce the maintenance surface. Downloading orders and uploading fulfillments are done in 2 separate applications. If the one needs updating, the other stays the same. That means less chance of introducing errors. I'm sure there's situations in which this approach is a ludicrous choice.
CMS stops the world multiple times. It only mostly concurrent
The write barrier marks a change happens. During next stw event when it remarks it will go over all the changes while stopped. CMS isn’t completely concurrent just tries to be mostly.
Why do you need a remarks then? this remark seems like STOW. otherwise this remark phases will never end
Concurrent mark and sweep is a specific implementation (within Java land) of a kind of concurrent garbage collector. There are other implementations with very different approaches and trade offs. It's a whole field of research with ongoing developments being made and novel approaches still finding their way to market. Start with the academic materials, they're interesting and good. I do not advise asking reddit.
When would be the release date?
[February 20th](https://github.com/spring-projects/spring-boot/milestones)
Yeah but it's still a weirdo. For weirdos like you. 
Great! Now I can propose to my team to prepare for Spring Boot 2 upgrade. So far our project consists of mix and match between Spring Boot and Vert.x (for the reactive part). With Spring Boot 2 I hope we can reduce our dependencies on Vert.x.
i have a 10-core CPU, 128GB ram, 40" 4k monitor plus 2x 24-inch monitors. laptops are not for programming.
&gt; Say, I have a new ref to an already marked as unreachable object in the meantime? How?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I have my MacBook pro 2013, running Parrot os for mobile development. As far as specifications and depending on what kind of development you are doing, I would recommend no less than 8gigs, preferably 16. I've heard great things about the think pad laptop. 
Goddammit I hate video for programming topics. I'm not gonna spend an hour watching this for 8 bullet points worth of significant changes. Can someone maybe TLDR this for me? Anything super cool?
TIL that I should remove that from our new developer set up guide. Thanks :)
&gt; Not revolutionary no, but in my experience many developers still aren't taking the time to write tests and don't understand the longterm consequences of that choice. This is not a "developer" problem but a "management" problem. These types of developers aren't suddenly going to shell out money for your course. 
Great talk by Aleksey Shipilev: https://www.youtube.com/watch?v=VCeHkcwfF9Q
I used to have a Thinkpad T450s. While the form factor and ergonomics were good, the CPU (i5, dual core) was completely useless. I now have a Thinkpad T540p with a quad-core i7. This is at least fast enough, but the fan never stops =( Anything less than a quad-core i7 will be useless, IMO. As for the 45W or 15W versions, I'm not sure. My current one is 45W, but I think there are 15W quad-core i7s as well now.
The big plus for me is Homebrew. I know that there is Chocolatey on Windows but I found it unstable when I tried to use it. I had the opportunity to test a Thinkpad T570 (which is considered as a high-end Windows laptop). The mobile i7 (i7-7500U) is slow and I was surprised by the trackpad. It was really bad compared to a MBP or a Surface.
Well, for the last eight years I had a Intel Dual Core laptop (built 2008 or so, with 4GB RAM, though) and an SSD. Didn't have a problem. Just make sure that you have 4GB+ RAM and also tell the Java processes to use that much.
Dell Latitude E5430 (circa 2012), with an i5 3210M and 12GB of RAM (upgraded from the original 4GB). It still serves me well, although it takes a while to load medium to large projects. The battery also doesn't hold as much juice as it did in the past, but I mostly use it plugged in so it's not really an issue. The biggest issue with it I'd say is the 1376x768 screen - that's simply not enough for programming IMO (which is why I almost always use it with an external monitor). 
I use to have a MacBook Pro but started to find the latest macOS builds to be really buggy. I love the build quilty of the laptop but found that buying one with a decent CPU and 16GB memory to be way too expensive. I've since moved onto using the XPS 13 Developer Edition. The OS is Ubuntu, the specs are crazy good and so far haven't missed anything from macOS. 
Guys I perfectly agree with you on this.micro services are not silver bullets. They have their own place in architecture.. We as architect need to go through proper judgement while choosing this for project after carefully considering its pros and cons.. I have share this article for giving you abstract of using it once u choose it for project.
What is the use case for the JSON/XML/CSV/Blah export? I get that it means you can take your sql query and spew out JSON directly, but usually in a Spring app you keep your database logic separated from your controller logic. JOOQ maps it to a pojo, that pojo gets mapped to JSON by Jackson (for example).
Thank you for this! I wish I'd have found such a concise example when I first needed to set up JPA in Liberty for the first time. At least this will help others.
Yes, the CMS GC is in fact a stop-the-world collector, but the remark phase is way quicker than a full collection and it makes a lot of sense to stop the world only for a few milliseconds during the remark phase instead of the entire collection cycle.
"Gasp, isn’t REST supposed to be “stateless”, though? Well, the reality is that security is hard as it is, without the needless complexity that comes with trying to 100% conform to some architectural philosophy." True words true words. I've definitely done this with DI when I first started using it. Being a purist is tiring and inefficient
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; Gasp, isn’t REST supposed to be “stateless”, though? REST isn't stateless, that would be as silly as saying functional programming is stateless. Any system that doesn't have state can't possibly do anything useful. Like functional programming, REST just has a different approach for dealing with state. REST is built on stateless protocols like HTTP. In which case, the client has to keep state (like JSESSIONID) and send it to the server through the cookie header so it can understand the request. This is a low effort way to do security, because you're piggybacking on a mechanism already provided by the servlet container. "Stateless" authentication simply separates concerns. You use special cookies or HTTP headers to store a specially constructed authentication token. Instead of using the JSESSIONID to locate user authentication, you use the token. Since the token isn't tied to the servlet container, you avoid problems like the need for session affinity. JWT takes stateless authentication to the next level by storing the authentication details in the token itself, avoiding the need for lookup on the server side. This improves performance at the cost of significantly increased complexity.
The whole point of JWTs is that, with some additional complexity, you can get rid of the part where every service is constantly hitting a central database. If that okay for you because you're definitely not Netflix; fine. But I really disagree with this bit: &gt; Critical vulnerabilities have been found in many JWT implementations This is just insincere if you don't mention what the problem is. Some libraries allow for clients to use the "none" algorithm (which is in the spec for testing purposes). Most good libraries don't enable this without the developer explicitly choosing to do so. So it's a mistake of library developers not doing the right thing **and** developers implementing security without fully understanding what they were doing. The first rule of security is; don't roll your own. JWT's have pro's (no DB calls for session rehydration) and some cons (can't instantly expire them). But they really are not insecure.
&gt; I mean, what's the point in going through additional layers to export CSV or JSON, if the format corresponds exactly to the table layout? The export format does not even have to match the table layout. Thats the beauty of SQL: You can shape the result of a query and fetch only what you actually need, in the form you need it. Most ORMs suck at this.
&gt; Some libraries allow for clients to use the "none" algorithm That's not actually what the [vulnerability](https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/) is, but the problem is related to the algorithm attribute. Compliant implementations are supposed to respect whatever comes in that field, if it is HMAC ("H256") or public key ("RS256"). Thus, it is possible to trick the server into accepting a JWT by signing the forged token with a public key that the server accepts. The prevent this attack, the server should validate both the signature and the signing algorithm. JWT security requires some additional things to keep in mind, which is why some people are critical of it.
ugh. I'm sick of the JWT bashing. It's mainly bullshit, outdated information, or promoting some new, immature spec. Tell me - which JWT library in January, 2018 has known vulnerabilities? The primary vulnerability was patched in all the mainstream libraries over 2 years ago.
I like Adam Bien but when I read this: &gt; JMS revival: there is a lack of popular common messaging API in microservice context ... I call it bullshit. JMS is ugly as hell, haven't seen it used in modern projects for a while. and the microservice context has already a winner in Kafka. 
It's not that bad, the worst thing are @ActivationConfigProperties
self-promotion spam.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I am planning on learning Spring this year. I definitely wanting to learn unit testing.
Don't give up. Keep trying. If you can find the root cause of a lot of your problems work on that. 
what exactly would you call "spam" in that screencast? was it not helpful?
&gt;If that okay for you because you're definitely not Netflix; fine That's my point; 99% of web apps aren't Netflix or Google. Yet, so many developers use JWTs for authentication just because they learned it in some quickstart/tutorial. &gt;The first rule of security is; don't roll your own. I'd argue that using JWTs is more "roll your own" than server-side sessions. The JWT spec does not specify how/where to store the JWT client side (in fairness, it _is_ outside the scope of the spec), nor do web frameworks provide built-in ways to maintain revocation lists etc. You have to do that yourself. So, if you don't want to roll your own security, just go with what web frameworks have supported for decades.
A word of warning. While the Kotlin DSL is IMHO a big improvement over the Gradle DSL, it's pretty unstable, documentation is scarce and upgrades are painful. Also some bits of its API currently look pretty strange, like defining Kotlin sourcesets but those things may improve with time.
Well said. I think even things like "you have to rebuild to get rid of compile errors", as seen in the screencast, is a bit...well...strange :D
Have you seen or used the JMS 2.0 new API?
IntelliJ IDEA 15 Ultimate on 2015 MacBook Pro (16GB RAM w SSD). Don't cheap out on a dev laptop. 
Yes, I noticed that you are the author. That is your site, you are not the judge of what is interesting or useful. Your site is clear commercial promotion to your stuff. Trying to drive traffic is fine, but not quite so blatantly. See sidebar: "Do not post tutorials here! These should go in /r/learnjava." Also kotlin is not java ether. I just keep wondering how comes that almost every single spammy post here shows up and starts with 10-15 upvotes. Hmm...
Unfortunately, it's inexplicably expensive for non-OSS databases. 
concurrent mark is mostly concurrent. it still has a stop the world event. 
the one from azul right? 
Java EE continues the freefall in relevancy?
Work gave me an HP Pro Book 645 with an SSD drive and Windows 7. It's pretty good.
@twat_and_spam I never said I am the judge of what is interesting or useful, I asked you a question, because you were quick to throw around the "spam" word. Rather interestingly you imply that the 10-15 votes are bought or machine spam, which is not the case. Simply other redditers "judging" for me, i.e. liking the screencast. The same way you are judging a free informational screencast, that took hours to produce as "self-promotional spam". Or judging what is "fine" and what is "blatant". Regarding "Gradle" is not Java/Java Build Related, because it uses the Kotlin DSL. Nitpicking imho. Do you post news about Maven in /r/xml? But I'm fine with anything the moderators decide here. 
if you are going to spam your releases, at least put in a descriptive title.
That's an interesting matrix. I could be reading it incorrectly (I'm no OAuth2 expert, but I did write an OAuth2 server in Spring at a Holiday Inn last night), but it looks like MANY checkboxes are missing. Just at first glance, I'm seeing jdbc vs. in-memory -- both are supported in OAuth2 2.2 (I just did it).
You mean the freefall towards relevancy, don't you?
You should not be using Kafka. It is proprietary crap.
This comment is interesting: &gt;The only problem I repeatedly have with the claim of Thin WARs and being a few hundred KB or under 1MB, is that in production/reality I've never seen that. &gt;Sure, to spin up a JAX-RS API that returns hello world as a string, or heck spice it up and create a pojo for JSON marshalling, that is one thing. &gt;But a real application is going to need to talk to a database, kafka, elasticsearch, caching, akka, or need some other libraries... and by the time you're done you're right up there at **10-30mb**. So fucking what?
people who hate xml with fiery passion. it's literally the only reason I could see not using maven. Every other build system is dramatically inferior. And yes, I include gradle/sbt/jerkar/whatever in that list. If you can write branching statements in your build tool, I don't like it. It's no longer a canonical build tool, it's a snowflake-build developer tool. 
Also, the error messages are often indecipherable so you have no idea what the problem is.
&gt;Also kotlin is not java ether. To be fair Gradle is a JVM based build tool for the Java language and your chaoices for using it are the Groovy DSL or the Kotlin DSL, both of which aren't the Java language. However at least one of them are required if you are building java language based projects using Gradle.
Literally the first hit on Google for "java xml to pdf": https://stackoverflow.com/questions/212577/how-do-you-create-a-pdf-from-xml-in-java
At work we use the [iText](https://developers.itextpdf.com/examples/itext-action-second-edition/chapter-1) library
Good to see somebody with sense here.
Scala runs on jvm too. One would have to jump through particular set of logical hoops to claim that java and scala are equivalents. (or go ahead, I'll grab popcorn)
At work I have a 2015 27" iMac 32g RAM, 4.1GHz i7 and 1tb SSD. Personal laptop is a 2016 13" MBP 16gb RAM 3.1GHz i7 512gb SSD. The track pad is pretty much unmatched (at least from what other laptops I've used) Next laptop will probably be a linux machine built on system 76.
Aren't kafka's delivery guarantees different from those of traditional MQ systems?
[huawei matebook x/](https://consumer.huawei.com/us/tablets/matebook-x/) i5-7200u, fanless, 2 lbs, 3:2 aspect ratio, 13", 8GB, running linux / chrome / netbeans, $800 only complaints so far are the lack of 16GB memory and the lack of page up/down. for the price, you can't beat it 
Like everything that brings "Apache" in the name, right?
Prince XML
I also have the same feeling about Spring Cloud Security and Spring Boot OAuth2. I used both and while there was lots of pain in terms of extensibility, the all-or-nothing autoconfiguration, lack of documentation and a feeling that it was all written in one go by Dave Syer, it did its job.
These code base is a disaster. Please never use it, too much functional programming and abusing streams and maps. Most of these are much, much slower, even 5-10times slower than the same code written without streaming and mapping.
Agreed, MacBook pro with Parallels is just the best of both.
Try Visual Studio
Don't bother with the screen upgrade to above 1080p. On my Lenovo it has ridiculous LCD bleeding in patches throughout the whole monitor. Very poor quality screen but naturally it only shows its ugly head outside of the warranty period.
there is a 'slide' link under the video.
Thank you for making JOOQ free for most of us (and not stripping essential features from the OSS version like boxfuse did with they flyway library a while ago)
Well, the most essential feature is to be able to use it with a "real" database, like Oracle ;-)
To be fair, most DB licenses are paid by operations, not the developers. In many cases, that's two different entities, often even two different companies. Which means, many developers do not have the experience in making business cases for a third-party suppliers, let alone reason about their supply chain, unfortunately. A totally lost skill! [It would be so easy, though](https://www.jooq.org/why-jOOQ.pdf).
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; So fucking what? Spring fans always gave Java EE heat because the runtime is 35mb to 100mb, and Spring is supposedly only a few mb. But that's not the case 
Macs ship out of the box with a blank desktop. What are you talking about? 
No idiot. Apache Tomcat implements a standard. Kafka doesn't. That's why you should not use the later.
Great point. Didn't realize it said that in the side bar. 
Couldn't resist. You'd think Java developers would understand a reference to idiocracy ;) 
Kafka is APACHE Kafka, it is not a "proprietary crap".... I didn't think my sarcasm was so subtle. Nice sub-human trolling, really! Faking a QI of -1 cannot be that easy. But hen again you are the professional troll of this group right? 
And kotlin is?
Microbenchmarking code with the JVM is pretty difficult. JIT, GC and other optimizations make the JVM behave in non-deterministic ways which can at worst send you on a goose chase. And the behaviour can change depending on JVM versions and load characteristics. I participated in a coding competition where you were supposed to write efficient bin packing algo. I learned a few things: * For raw looping over arrays and sets JVM9 takes 60% longer than JVM8 (4 vs 2.5 seconds) * -XX:-BackgroundCompilation is pretty good for fast JVM startup with both JVM8 and JVM9 * JVM's and standard library classes' optimizations and micro-optimizations make it pretty hard to predict how your own micro-optimizations affect the performance (when you're trying to shave off milliseconds).
I see this as well. Sometimes to extremes. Our apps have g1gcs Max pause set to 3 seconds and Xss set to 16mb. Some idiot doing "if a little is good a lot is better!" It's been a pain to get ops to walk back this insanity.
Are you using jmh? If not, you are likely microbenchmarking wrong.
Wait. What? I’d love to see this shit in action.
&gt; documentation is scarce That's the most positive thing I've ever heard about Kotlin DSL documentation. Not to mention that it's pretty hard to figure out how groovy itself handles all that (for instance some plugins use duck typing through `methodMissing`).
If implementations of standards can't handle the required throughput then they are useless. Kafka developers have made very specific architectural decisions specifically to address throughput issues.
Downvoted because the blog post wasn't describing a microbenchmark.
/cringe logger.info("New Tweet: ---&gt;"); System.out.println(t.toString());
swiping between apps on Mac is EXTREMELY underrated. Just got a PC for gaming and I really miss that functionality. Thankfully my keyboard has a button that opens that Win10 app overview thingy.
I see. Just like Pivotal is paying shills to sell proprietary crap like Spring, Apache is paying shills like you to defend proprietary shit. Rod Johnson must be proud of you.
Even if you don't need the throughput I see more RabbitMQ than JMS to be honest.
I see now you've stepped down from [telling people to kill themselves](https://www.reddit.com/r/programming/comments/7ez480/my_first_c_library_small_engine_to_print_to/dq8glbh/?context=3) to calling them shills. In half a year you might even become a civilized being.
Agreed, and had this in mind this morning. Code on GitHub updated. Thanks
Serious question: Why work at such a low level? In my experience Flow.Publisher is the wrong abstraction level for anyone that doesn't build reactive-streams plumbing and instead want to get an actual use out of it.
I would say it’s a problem on both sides. Also quite a few people have Pluralsight memberships, I don’t know if my course alone would convince someone to purchase a membership if they don’t already have one, but certainly Spring developers might see this article and watch the course. I can certainly say that *has* happened. 
Just rereading this - nice jumping off points into a deeper dive. So, in my experience, the organisations I’ve worked with who have the lofty goal of microservices adoption often fail on three counts, which more often that not have nothing to do with the actual code (regardless of whether it’s greenfield or brownfield): * Automation * Monitoring * Fault Tolerance of services Basically, building microservices is hard. If you don’t automate everything, then you quickly end up with an unmanageable spaghetti of stuff that’s as just as inflexible (or even more so) than the thing you were trying to replace. Which is obviously a total waste of time. In addition, if you don’t have good, centralised logging / metrics / tracing then you a SOL when one of your components either fails or goes into a degraded state. How can you hope to even start with issue resolution and root cause analysis if you can’t correlate the events which lead to the failure state? You can’t - we’ll, no easily, and certainly not quickly. You’re stuffed. Which leads onto the third thing - fault tolerance. If you don’t implement patterns like Bulkheads, Circuit Breakers, Retry, then you can end up with cascading failure scenarios. Good luck with that. You’ve now got a distributed monolith that’s slower than the thing you migrated from (because networks are horrible and should never be trusted). Teaching people the importance of bounded contexts and asynchronous, event driven architectures is always going to be key to the success of any microservices architecture. Building microservices is *hard*. 
That hasn’t been my experience. There is a lot of ignorance when it comes to the importance of writing automated tests. If you asked me ~2 years ago, I would had described automated tests as more academic than practical. Maybe developers you work with know the importance of automated testing but refuse to write them for reasons. I doubt that’s the common case though. 
Proposed solution seems unnecessarily verbose, compared to say: Optional.ofNullable(timerRepository.find(timerId)) .map(Timer::fromEntity) .filter(t -&gt; t.mode != TimerMode.DRAFT) .ifPresent(timersInvoker::execute);
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
At my company we are currently evaluating to replace spring-security-saml2-core with Pac4j, since spring-security-saml2-core doesn't seem to be that well maintained and still uses OpenSAML 2 dependency from the year 2014 despite several reported CVEs and an official EOL declaration from the developers of the library. Also the issue documenting the problem, despite many user feedback, doesn't seem to get much attention. I've searched for alternatives and found Pac4j which seems to be a very active project with good support for distributed authorization systems (OAuth, SAML, CAS, OpenID, ...). It can be even used together with Spring Security. As my company might also use OAuth in the future, I was wondering how Spring Security compares to Pac4j in this regard. Has anyone used both and can share his experience?
Has Java 9 been out long enough, adopted in real world enough ( hell, large swaths of my code won't even compile under the it, let alone FOR it ), to be seeing "in my experience" yet? Until reading this, AFAIK Java 9 was only providing the interfaces, I didn't realise they'd actually provided a low level SubmissionProducer. If working at such a low level isn't good - what level should one use if not using any 3rd party dependencies?
If you want EcmaScript, use EcmaScript! get off my lawn. I don't need to be seeing this crap all over production code for the next n years. :-(
I've been using RxJava for the last 3 years now, and with RxJava 2 being Java 9 compatible, stuff like that condenses more or less to: private Scheduler sched = Schedulers.from(Executors.newFixedThreadPool(NB_THREADS)); private Disposable disposable; @PostConstruct public void startGettingTweets() { dispoasable = Flowable .interval(5,TimeUnit.SECONDS) .flatMapIterable(any -&gt; twitter.search(twitterQuery).getTweets()) .distinct(tweet -&gt; tweet, () -&gt; new LruCache(MAX_TWEETS)) .doOnError(e -&gt; logger.log(Level.SEVERE, "AN error occured while fetching tweets", e); .doOnNext(status -&gt; logger.info(new Tweet(status.getUser().getScreenName(), status.getText() status.getCreatedAt()))) .subscribe(); } @PreDestroy public void stopTweets() { if (disposable != null) { disposable.dispose(); { }
&gt; Microbenchmarking... This isn't a microbenchmark though.
See my comment above. Still think it's ecmascript?
&gt; g1gcs Max pause set to 3 seconds It might sound strange, but this can sometimes provide better throughput and reduced average pause times under heavy load (assuming no other conflicting flags). 
My comment may have been partially in jest. given the amount of unreadable crap I've seen recently, my patience is somewhat worn. 
I agree, you shouldn't. However there have been a few minor times where RxJava has failed me and it is useful to be able to drop down to the lower level in those circumstances. (For instance, there is no buffer with a timer that honors back pressure.)
The parallel collector will likely do a much better job of that. I can only see this tactic being effective for an extremely large heap (Ours is 8gb...).
Of course. No single library is a silver bullet, they're supposed to do the easy things easy and the hard things possible. 
:) Agreed. All in all, I've loved working with Rx. My point was just that there are a few hangups with it, but those aren't awful to get around because it gives you the low level escape hatch of the reactive streams.
16mb stack size?! That shit's going to go down in a blaze of glory. 
In one word: backpressure. Essentially, having a feedback loop back to the producer so that a piece of code can signal "gimme more" or "yo, slow down" up the stream. You will have some buffering of elements, but properly managed this backpressure can persist across network streams, so that your netflix video can get better or worse quality depending on your current bandwidth. 
This isnt a very good example since it uses a blocking sleep call, which more or less defeats the main purpose, which is to provide an easy way to compose non blocking applications. Libraries like rxjava also provide lots of other beneifits, it has much more stream functionality than java.util.stream, having a unified way to communicate between stream libaries is nice 
don't feed the subreddit's troll ;) it's cute, isn't it?
Not sure how I implied those things. I've seen a benchmark that shows MapStruct slightly faster for a typical use case.
https://springoneplatform.io/sessions/the-beginners-guide-to-spring-cloud
lol. Completely agree. Someone was getting stack overflow exceptions and instead of doing a reasonable "Hey, lets move up to 512k or 1Mb" they went crazy and said "16MB will work for everyone lol!" I've had an open case for the ops team to fix it for a while now, basically says "Hey, 16mb is extreme, and with just 1000 threads that will eat up 1.6gb of memory for unused stack space". Doesn't seem to matter (even though many of our machines only have like 8 and 4gb of memory).
Upvoted because I think your post was informative and so far off-topic as to be publicly shamed.
Proper error handling and infinite stream handling are also useful, but yeah, backpressure is the most important concept from RS. It also helps with developing a fully [reactive system](https://www.reactivemanifesto.org/).
Does anyone have an example of OAuth2 with a custom (database based) UserDetailsService implementation?
[A very similar article was already posted 8 days ago.](https://www.reddit.com/r/java/comments/7s885s/java_stable_secure_and_free_choose_two_out_of/)
Yes, of course you can. My applications tend to communicate with REST servers, who restrict our throughput rate by amount of calls per second. That means my applications tend to have "all" the time in the world for calculations, transformations, data persistence, and... garbage collection. Plenty of time to clean up memory means my applications won't need much memory, which results in them running slowly with a small amount of memory. Thank Sun and Oracle for JVM tuning options.
No idea which article you mean...
Fixed.
First thing, I wouldn't create a startup based on what you can or cannot create in Java. A startup should be based on an idea that you have that either solves some problem the world has, or it can just be an idea that interests you. The actual programming language you use (which may or may not be Java) comes later (just my two cents on this). Next, I would focus on creating a personal project since you seem to have a passion for Java. Create something that solves a problem in your own daily life, or just something that interests you enough to not abandon it right away. I realize that's not a specific answer, but only you can decide what will solve a problem you have or interest you :-)
RX and Kotlin or bust my guy 
&gt; in as far as it can be deduced Perhaps we should wait for an official word
Eh, 99 times out of 100, that timerRepository.find() call is going to dominate the execution time of this function. Using If versus Option is trivial in comparison.
Please do, so that I don't see any project that requires targeting Java versions between 4 and 7 again.
Really liked your functional java!
7 is the pre-built open-JDK and most common spread version. It's going to be a pain to have it not supported until we see that tick over to at least 8.
I highly recommend starting with a home based server, sitting at the end of your ASDL line. Get hold of a Raspberry pi, run your java on that. If the project works, you can upgrade to a hosted server. if it doesn't, you've lost nothing. 
&gt; But both variants contain the same potential bug: they are built on the implicit assumption that there can only be one customer with any given ID. Well no shit sherlock, that's why you use them if only you need the "first" or "any" element, you know - as the name suggests. Otherwise, use list = stream.collect(toList()); if (result.size() &gt; 1) throw new DuplicateCustomerException();" or something.
also coupled with "find". If that's not obvious...
This advise goes right next to beware of the following code resultList.get(0); when performing the query "select * from table where ...", it may return more than one result
Please take a look ath /r/javahelp.
What the hell is that code... Have you not tried to compile once what you try and teach others? My god... Line 10: * **You can't assign from a `return` statement.** * What is `Akira`? If anything it should be `"Akira"` eh? Also the Subclasses from lines 19 and 21 are missing, which I assume you did knowingly, but it's always good to have a complete example that people can just run themselves. 
Interesting, I wasn't aware of it. We never OpenJDK in production, it is always the closed source one from Oracle, or another third party one like IBM, Aicas, .... The biggest headache is Android anyway.
that return with an assignment was a stupid shitty mistake. 
thanks so I should post this there?
Dying tech is dying
Yes I did mention at the end that this will not work in a multi-threading environment. And access control needs a different treatment. 
Take a look at the **sidebar** of **/r/learnjava** (or of /r/javahelp for that matter). Since you are coming from C and Assembly, you will definitely need a beginner course that more or less starts from scratch. Java is fundamentally different than the languages you already know.
I know the difference with the article proposal might be trivial, but it definitly look forced and verbose. What I would do in your case is make the find method return an optional. I actually do that a lot. 
I don't think we need more articles on Java singletons? For a much better article go to https://www.journaldev.com/1377/java-singleton-design-pattern-best-practices-examples 
Do you mind if I ask why you choose not to use openjdk?
Creating singletons this way is considered an anti-pattern. It creates global state which makes testing difficult. If you need a single instance of a particular class to be shared between several components use Spring or Guice (or whatever DI tool). And WTF is that sub-class thing!? What real world problem does it solve?
Hmm. Concurrency is defined as &gt; simultaneous occurrence; coincidence: &gt; the concurrence of several unusual events. aka "Happening at the same time", what the article defines as "Parallelism". Looks some folks are trying to distinguish two similar but not same concepts in computing, but munging english language to do so might be problematic.
Whatever you do be sure to have a solid buisiness plan. Know your revenue stream and search for startup seiminars.
Singleton is a pattern which MIGHT introduce a global state (80% of usage by immature programming introduce it anyway). So we need a way to minimize it. The one presented in the article is the one which is the basic with all the ugliness inside it e.g. global state and lack of synchronization. 4 things will break the one that is naturally given in our textbooks i.e. the one given a- If the class is Serializable b- If it's cloneable c- If it can be broken by Reflection d- And if it is loaded with multiple class-loaders So yes Singleton comes with its baggage! That is why we move towards solutions like you mentioned. Sub-classing is a case in which the singleton class can be extended, and you would have multiple singletons which can be bootstrapped from a single one. You didn't notice one more problem btw. It's about public access in sub-classes, which is weird. But let's see if you can get another perspective on what wrong it can do. 
This is the same in any field though. If I'm fixing a car and I'm told to add some oil to the engine, and I add sunflower oil, it's no use saying 'well it meets the English dictionary definition of oil you should be happy'. The context makes it clear. All professional fields re-use English words and give them more precise definitions for their context.
Commercial JDKs, even the Oracle one have better OS support and more features. Now with Oracle going 100% on OpenJDK that will of course change.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
More precise is fine. Conflicting is not. The article is saying "Concurrency is not things happening at the same time, it's serialized multi-tasking" but that's in conflict with the definition of the word. 
If you;re asking, you're not ready mate :)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
In my experience, the headache comes when the interface between those microservices changes often (which is probably more indicative of a design failure, but it's a reality for many projects). In that case, I'd rather have a monolith where I have Java method signature compile time errors, rather than microservice REST API runtime errors. I've also seen problems where both microservices need the same version of dependency X and problems start happening when it's updated on one, but not the other. Again, probably a design failure, but it's one case where a monolith would solve that problem. Now if your interface between the apps changes rarely, or you're more disciplined about enforcing consistency of changes, then yes, microservices may be more appropriate.
Yes :)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'm for descriptive, even if a bit verbose (tolerance for verbosity from a Java dev, shocking I know!), rather than succinct and misleading. "Serialized multi-tasking" seems clear enough, though there may be better articulations. Maybe "Task Switching"?
I've used Apache IOUtils for years. Java's IO has always been a pain.
Rewrite all the things! Jk, I hate rewritting for no reason. If your app works, then focus on doing things that add value for your customers. If however you are seeing lots of churn and/or bugs in a particular part of the app, then consider a rewrite there and pick the best tool for the job. Maybe it's scala instead of java. Maybe its kotlin.
But they are at least *ongoing* and *in the middle of being processed* at the same time. They just aren't necessarily *making progress* at the same time.
It is in my experience depressingly common. If not different languages, then different frameworks, architectures or what may have you. Being the norm however doesn't say anything about its qualities. If there is a consist and current plan to migrate then it is just the situation as is and it will pass. If done because certain problems are easy in one language and hard in another, then you may need to build an facade around it so the conversions are contained. If however it was done because a developer got bored and wanted to try something new, then it is a bad practice. And the latter is also depressingly common.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You should dig into the stack the DZone author is using. It's based on ND4J which pushes a lot of the processing down to C++ using JavaCPP. https://nd4j.org/
This should be the kind of thing you'd ask your Supervisor, as they'll be the ones living with the codebase once your internship is over, assuming you don't turn this internship into a career. Overall, generally no, you shouldn't consider rewriting it. Are you the sole developer on the code base? If no, see "Ask Supervisor/Generally No". If yes, you've got some flexibility since you won't be pissing off everyone else, but what kind of company just gives the keys to the kingdom to an Intern? Let's assume you try. Are you going to have enough time to finish the code base and truly verify you haven't introduced any regressions, while also completing all new dev you're tasked with? If not, again I'd say No. For all your effort, the next intern may like Scala better and start rewriting it entirely in Scala. Or Kotlin. Or Rust. I would look at this as an opportunity to learn scala and polyglot projects, two items on your resume that others may not have. Seriously though. Ask your supervisor. If your supervisor isn't tech oriented, find someone at the company that is and use them as a mentor to field these kinds of questions.
So using the terminology in the article, concurrency would be dropped for serial multitasking and parallelism would be dropped for multitasking? I guess that would be fine. Or if you wanted parity between the terms you could have parallel multitasking kind of like how we have series and parallel circuits in electronics.
If you can rewrite it without bugs, in a very quick time, for free ( i appreciate you are an intern, but read as outside work) then i dont think they would turn it down. Take it as your first real programming lesson, wherever you go there will be code you dont like / poorly written / old, almost every dev complains about the code they are inheriting. Its hard to get people to pay for stuff unless it works or you have amazing powerpoint or excel skills, so you can explain to none tech people why it is a good idea to maybe break something which already works.
Depending on the surface area of the intersection it might be a disasterous for maintenance. If a rewrite is out of question try phasing one out.
It depends, if it's multiple languages in the same application (a monolith), then it's more likely to get ugly than if you have a SOA and different services use different languages. If they've used hexagonal architecture principles then they could have a hundred different languages and technically it would be perfectly coherent. Finding developers willing to learn 100 languages would be another issue. Essentially I think the cause of your annoyance is likely not due to the use of multiple languages, but probably due to a generally sloppy approach.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You cannot see the forest for the trees.
This is the best answer in the Thread /u/fireflyzz. There is no reason an intern should be making this decision (with the help of reddit no less). 
Just more proof you can't save terrible programmers from themselves.
bad practice. Perhaps in different microservices, but it's a bad idea in one codebase. Kotlin and Java might be an exception as there are far fewer differences and almost no conversions. 
It depends. The two have different strengths and it makes sense to use them variously within a single codebase if you want to exploit those strengths. I have little experience with Scala, but I work with Java and Groovy in the same codebase. The bulk of the application is written in Java - it's robust, well understood and easy to maintain (most of our developers are significantly more experienced with Java, aside from any specific merits of the language itself). It uses Groovy for generation of the view layer. Groovy is much better suited to building html than Java and the code required is massively reduced, sufficiently so to justify the cost of maintaining a second language. So the simple question is: would the codebase be easier to manage in one language given the requirements and resources available? 
It depends. If your team or platform has an architect, this is something you would want to ask them - what are the historical or technical reasons for having a mix of both Java and Scala? What was the intent of having a polyglot codebase, and why was it done? You need to understand these questions, and their answers, before even thinking about a rewrite. It's not necessarily bad practice. It offers certain tradeoffs. Perhaps having portions of the codebase written in Java or Scala allows developers to take advantage of certain language features or parts of the ecosystem that makes some problems easier to solve. On the flip side, it also adds a considerable amount of complexity to the project. Rewrites are astonishingly expensive. Rewrites are one of the things that [killed Netscape](https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/). There is a lot of knowledge - anywhere from thousands of hours of thought to millions - baked into a codebase. It's hard to replicate all of that.
&gt; Should I consider rewriting it This all depends on how the team is dealing with the codebase. If your other team members are on board with refactoring from one language to another, and there has been continuous progress toward that end, you should follow their lead. Don't go refactoring the whole thing in one go, though. &gt; Just wondering is this a normal thing or is it bad practice? Having more than one language is not a problem _per se_, but I think a switch from Java to Scala (I assume this is what is happening here) is a difficult thing to get right. If you need your Scala code to be usable from your Java code, you're very limited in the functionality you can use in the classes that must expose functionality to Java. Scala has a lot of functionality that Java can't understand, so you would either have to isolate such functionality behind a Java-compatible facade, or not use it at all. There are other problems too, like library incompatibilities; Scala's collections aren't directly compatible with Java's collections, so conversions have to happen at the boundaries. These two things aren't big problems if the team is dedicated to making the switch and is making continuous progress to that end, as they should only be temporary, during the transition. **tl;dr**: Moving from one language to another isn't a problem, as long as the team is dedicated to doing so, and is making continuous progress. You should always work with the team.
Ask any Python developer.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
People are usually in a hurry and rarely read anything. Oh look a working example! I'll just copy and paste this... In short, when providing examples, try to keep them as complete and as "right" as possible
Good ol Apache making Java marginally less annoying
Is it kotlin ready? 
Easy way to think about it: You cannhave concurrency on a single core, but not parallelism.
[removed]
[removed]
[removed]
and it's still absolutely useless for transferring socket streams.
Afaik, yes. Spring Framework 5 supports Kotlin and is GA already.
Simple question: I want to add a new div (or any element) to a div with an id or the body. The function should look similar to this: void createDiv(String id){ Element targetElement = getElementById(id); Element newDiv = new Element("div"); targetElement.add(newDiv); } Is it possible to do this with this framework?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Definitely waiting the stable release! We're currently running our app with Spring Boot for several years, without any issue so far. Before knowing Spring, we used Guice. I would never go back to Guice again!
Are you capable of reading? If so, the **sidebar clearly states:**: #Do not post tutorials here!
Read on, your thoughts are addressed in the following paragraphs: &gt; Now, this might be a very reasonable assumption. Maybe this is a known invariant, guarded by dedicated parts of the system, relied upon by others. In that case this is totally fine. &gt; &gt; But in many cases I see out in the wild, it is not. Maybe the customers were just loaded from an external source that makes no guarantees about the uniqueness of their IDs. Maybe an existing bug allowed two books with the same ISBN. Maybe the search term allows surprisingly many unforeseen matches (did anyone say regular expressions?). &gt; &gt; Often the code’s correctness relies on the assumption that there is a unique element matching the criteria but it does nothing to enforce or assert this.
When you do `filter(...).find[First|Any]()`, then where is "somewhere else"?
Does anyone know of any disadvantages to using Jetty over Tomcat?
&gt; Read on, your thoughts are addressed in the following paragraphs: &gt; Thing is I'm not really inclined to "read on" when the basic assumption of the text is pointless. I did skim the rest to see if I missed something, but didn't find anything. &gt; "Often the code’s correctness relies on the assumption that there is a unique element matching the criteria but it does nothing to enforce or assert this." &gt; I made the important part bold, so you don't miss it again. &gt; I did not miss it. But again, the article claims I need to "beware of findAny() and findOne()" as if those have some intrinsical behavior that I might be missing. To me it sounds like "beware using [0] to access an array - often, the assumption is that the array only has one element - but it may contain more." &gt; Also, collecting a stream just to check its size is terrible for readability and performance. Wouldn't it be better to check that as part of the stream pipeline? I don't know, maybe something like .reduce(toOnlyElement())? Sure, that's more efficient in that case, and not an entirely bad point to make. However, in the "base case" in which the assumption holds that there only one matching element exists, the reduction will also have to access all elements of the stream, so collecting them afterwards is actually minimal overhead - the only thing being optimized is the failure case. Not to mention that one of the points of streams is that they can be infinite and the reduction will not terminate, which is one of the reasons to use findAny() and findFirst() in the first place.
There is no need to make AutoCloables declared in a try-with-resources block final. They are implicitly final.
I think you _should_ beware of them. My argument is, every time you use them, make sure that either (a) the code is correct if there are several elements in the stream or (b) you can rely on there just being a single element. I found that in a lot of cases (maybe half?) both proved to be unfulfilled and I ended up verifying it with `reduce(toOnlyElement())`. &gt; "beware using [0] to access an array - often, the assumption is that the array only has one element - but it may contain more." I hear you and you are not totally wrong. But the point is, that the stream API does not offer you an easy and obvious way to do what might be the right thing (unlike `[0]`, where checking `length` first is common practice). If `findSingle` existed, the entire post would be moot, because you have the correct alternative right there. But you don't - devs see `findFirst` and `findAny` and think in those categories. &gt; However, in the "base case" in which the assumption holds that there only one matching element exists, the reduction will also have to access all elements of the stream, so collecting them afterwards is actually minimal overhead - the only thing being optimized is the failure case. Yes, you are right. My point was too general (I formulate it more precisely in the post). I still think the readability argument holds, though. &gt; Not to mention that one of the points of streams is that they can be infinite and the reduction will not terminate, which is one of the reasons to use findAny() and findFirst() in the first place. True, using `findSingle` or `reduce(toOnlyElement())` on an infinite stream is a bad idea. But that should be relatively clear, because how would else would the code make sure there's only one than to check all elements.
If you need to refactor existing codebase without building it from the ground up.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
At the boundaries. Say the DB primary key / id.
People have issues with the statement `Beware Of findFirst() And findAny()`. Both methods are perfectly clear and behave the way they should. There's nothing to be aware of, there are no pitfalls.
Tomcat has historically been "standalone app server for WAR files"-first, and "embeddable sever"-second. Jetty has historically been "embeddable server"-first, and "standalone app server for WAR files"-second. But at this point, they're both extremely mature projects, and have arguably closed the gaps in terms of matching each other's strengths. If a framework like Spring Boot is abstracting away the integration details anyway, then it's really just a matter of load testing your app with each one and then picking the winner if you need that level of optimization.
Undertow is pretty mature as well. You can't really go wrong choosing either of them.
Some IDEs inject the final keyword automatically if applicable. While not required by the compiler, it helps guarding against accidental assignments to these variables during development.
The constructor based injection gets even easier with lombok. Also, with constructor based injection (lombok or no lombok), collaborators can then be made final.
Yep :)
Most important factor in finding them is having them actually be interested in what you're offering. Pay a good salary and have interesting work to do. That's really just it. The vast majority of vacancies most of us get pushed to us via LinkedIn are lacking either or both. 
Okay the first 3 I get, but who the hell sees a failing test and is like "naw that's cool -DskipTests"
thanks for the advice, we feel the project is interesting and good salary its just not sure the bets way to reach them. Would you say LinkedIn is the best option? 
&gt; Singleton is a pattern which MIGHT introduce a global state (80% of usage by immature programming introduce it anyway). So we need a way to minimize it Yet your example does exactly that; create global state. 
new java devs aren't entering the market so much, they're all going to London where the pay is way higher.
It doesn't really matter too much which route you take, you're going to have a lot of competition. Having a good recruiter that seeks contact with potential hires is important. Finding a good recruiter is hard though; the majority can't differentiate between Java and JavaScript. Passively posting vacancies won't help. Most senior Java devs are never really 'between' jobs so only very few will actively look at job boards. 
Oh, a lot more than you might think unfortunately
Are you hiring remote? These sound like places nobody want to move to. Remote has been the answer for many companies who struggle to find talent in areas where the talent pool is limited. 
Finally, I would live to use Marko.js for SSR
Guard clauses, interesting. We used to call it "pre-condition checking" to avoid doing computation that wasn't needed or desired; particularly where shaving milliseconds counted.
Find a recruiter that specialises in developers; Java developers specifically if possible. The best recruiters I've had chats with have been with those who target a niche and know what we want to hear. Also be sure to pay well, have a good job description, don't bullshit the requirements, and be flexible with technologies. The latter point is important as a good developer can learn almost anything, and the chances of you finding one with your specific set of technological requirements is slim. Good luck!
[The article I referred to](http://wiki.c2.com/?GuardClause) seems to reference SmallTalkBestPractices which suggests that the concept and its name "Guard Clause" is pretty old. I'm pretty sure many devs (me included) have been using it without knowing a name and that's OK, same as using some design pattern without knowing its name. That's just an agreement to have some common language. Also in this case it's not only for performance, but rather for maintainability.
&gt; and be flexible with technologies. Had a discussion with a manager recently that didn't want us to use Kotlin because it would make it harder to find developers. Told him it would probably make it easier.
&gt; Both methods are perfectly clear and behave the way they should. Only when the dataset is 100% guaranteed, all cases, all the time, from the time the code goes live until the time it is removed from production which might be months, years or decades. That is the point that the article makes and the one /u/nicolaiparlog makes. Comments from some like, "no shit Sherlock" and "you can't save bad programmers from themselves" is the kind of chip on the shoulder bro think that gives programmers a bad name. 
That was all true and an excellent comment, glad to see you earned gold for it!
I work with a company based in Birmingham, UK, and they always struggle to find and keep java developers. So many once they have some experience move on. Recruiters have been the most successful I would say. I'm not sure what other methods they have tried though. pm me if you want.
I read this as Birmingham Alabama. I wonder which one it is?
I believe they're called assholes. 
&gt; [...] it helps guarding against accidental assignments to these variables during development. It does not. Assigning to those variables is a compile time error, not a run time error. Trying to compile the following class will result `Error:(6, 13) java: auto-closeable resource foo may not be assigned` at compile time which is of course [detectable by your IDE](https://i.imgur.com/z6RORqE.png): import java.io.IOException; public class Main { public static void main(String[] args) { try (Foo foo = new Foo()) { foo = null; } catch (IOException e) { e.printStackTrace(); } } private static class Foo implements AutoCloseable { @Override public void close() { } } }
Stopped reading after, | Directly auto-wiring fields makes testing more difficult as a Spring context must be now be instantiated to test the class. Use Mockito with inject mocks. 
I usually do this by writing an ANT script, or use Maven Assembly to create the Zip/tarball. If you want to have a JRE bundled with your application, then a small shell script/batch file can launch the JAR using the bundled JRE. Maven is nice in how it allows to add those scripts in the resulting package.
Yes, that is a compile error, but why would you want to change foo anyhow? The whole idea of it being in the try() statement, is so that it is then clearly auto closed... If you need to try and open, and then do something else, then have a method return Foo, instead of directly instantiating it in the try() statement.
Do you really open a socket stream and then directly send the data to another socket stream, without modification?
"Beware of xyz" hints at pitfalls, unclear or missleading naming / description, unknown sideeffects, performance issues and similar which I'm totally not seeing when using findFirst or findAny. Embedding an exception throwing assertion into streams for debugging purposes is odd practice to me.
From his perspective he's worried that developers will see Kotlin on the job spec and think "I don't know that, I'll pass". From our perspective we think "as long as I can learn on the job, I'd love to do it". Make sure you tell him that!
I did :)
I haven't looked into it yet, but **Java 9** does have some tools I think.
Would V8 be able to use the JVM runtime, GC and heap? Or would it have it's own runtime system and memory management outside the JVM? Quick googling tells me that Nashorn relies on the JVM runtime and infrastructure.
I remember one of my first pet projects being a local service forwarding connections to a fixed host through a proxy, intended for multiplayer games that ignored system proxy settings. Reinventing the wheel, I know, but my googlefu at the time was really bad and I figured I could throw something working up in 30 minutes instead of spending 3 hours retrofitting an existing tool. somebody might run into a similiar situation, uses transferTo and wonders why data appears to be "stalling" because of the transfer being buffered. I totally did exactly that mistake when I redid said pet project in kotlin to learn about the language, there's a [`InputStream.copyTo(OutputStream)`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/java.io.-input-stream/copy-to.html) extension function...which is also buffered. shouldn't be using OIO for this in the first place but if forced to, the only way to handle socket transfers without stalling data is to go against the javadoc and using the result of `available()` as an input to `read(byte[], int, int)`. something like this: public static void nonstallingTransfer(InputStream in, OutputStream out, byte[] buf) throws IOException { while (true) { int av = in.available(); if (av &lt; 1) { av = 1; } if (av &gt; buf.length) { av = buf.length; } int read = in.read(buf, 0, av); if (read == -1) { break; } out.write(buf, 0, read); } }
Since Java 1.8 the javapackager tool has been in the JDK. It can produce native executables for windows, linux, and Mac OS. It includes a runtime. If you use Java 1.9 and write modularized code javapackager will use jlink to only include the parts of the JDK you need. Here is the 1.8 documentation: https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javapackager.html The documentation for javapackager in 1.9 is largely the same but includes information about jlink.
We created a framework to do a cdi like injectionn which can injections mocks, real production classes, stubs or whatever we want. It has greatly deceased our test development time as well as test execution time
These days you should not limit your talent sourcing to your local area. Putting in place the right practices and routines in your team will ensure success with remote workers.
What is painful about Java IO? If you understand the Decorator pattern you are good to go. There is nothing painful about it. 
[IzPack](http://izpack.org) does a good job, but it's more focused on creating an installer, it won't create the launcher IIRC.
Those mocks will still be shared across test cases which breaks the isolation of unit tests (leads to flickering tests). There are other problems with using field injection which have negative impacts on testing and system design. Pivotal developer/developer advocates discourage field autowiring and have actually worked to remove it from their tutorials. While I am happy to receive feedback and I wasn’t familiar with inject mocks, the tone of your comment is unnecessary and unprofessional. 
If you're going to rewrite it, rewrite the Java parts in Clojure. It isn't as nice as a full Lisp, but it is vastly more comfortable to use than Java. 
The names “findFirst” and “findAny” already imply that there will be more matching objects - you get the first item of a set or a random item from this set. Why anyone would expect there to be only one match is beyond me. It would also make it unnecessary to have both a “findFirst” and “findAny” because they would always return the same thing. Your expectations are wrong.
There's nothing really painful about it indeed, it's just that hating on Java is popular, even in this sub. Probably /u/jim234234red doesn't even find it painful, but it's easy scoring...
I've used this successfully: http://www.jrsoftware.org/isinfo.php
Just a couple notes for context. * This is based on the same code as Quasar's fibers came from. The difference is that Quasar ties usage to a framework that includes a ton of batteries. I found someone's fork of the original code and updated it since I wanted to use it with Xnio directly (my own workers, other config). * I have a rough HTTP client with a coroutine interface here: https://github.com/rendaw/gettus * I've been using it for several months in webserver and surprisingly have had zero stability issues. I had to update a bit of code to work with new Java system libraries, support reflective calls, but that's it.
I've seen this shit with my very own eyes.
Java 9 is an option with jlink or then maybe [capsule](http://www.capsule.io/)
Omg! You’re good! 👍
Crossing my fingers for Loom http://openjdk.java.net/projects/loom/
Hire remote. The market is going that way and you guys don't want to be left behind, especially because you're not located on a top spot. You may want to go with Crossover, Toptal or even Upwork initially, to get your feet wet. Especially Crossover and Toptal have top talent available and very good policies (Toptal has a cashback policy in case you're not happy with the professional selected).
I hadn't heard of that - is that new?
Yes. I'm the lead of that project (I started Quasar).
They won't be shared. The class/mocks get instantiated before every test. 
It looks interesting, it would be great to see it make its way into Java.
&gt; Those mocks will still be shared across test cases which breaks the isolation of unit tests Very false. The mere fact that you're making mocks for a unit test sort of implies that they're transient and will be forgotten after the test.
Yeah, every listed feature seems awesome. I thought I had seen it mentioned somewhere that green threads were proposed for java before and rejected. Was there something that triggered all these proposals moving forward? 
You can start by assuming not everyone lives in same location as you. Birmingham what? Which North East?
I mean theres already nashorn and rhino. I used rhino once to port a javascript library to java and run my test cases against both implementations. But what do most people do with java js runtimes? 
Good points. I added reflection support to zarbosoft.coroutines as well but none of the other things you mentioned. My impression of Quasar was actually the opposite, it felt magical to me. You can do stuff like run a fiber without blocking (but where is it running?) and that only strands can unpark strands (why not raw threads?) Using fibers also meant using all the other stuff Quasar provides, so it wasn't easy to figure out where the fibers api started and where it ended. Not to knock Quasar though, frameworks vs libraries is another holy war and I can see magic on both sides. Quasar is an impressive project and interfacing all the libraries with it you have was obviously no easy task.
#1) False. This just isn't true. You can argue that constructor injection is a "better" way to do it over field or method injection, but it has NOTHING to do with Unit tests and mocking. @Mock / @InjectMocks - done. There's many other tools that have been around just as long to do this. If you don't want to use Mockito (JMock, etc) then fine - use Constructor/Method injection. There's nothing wrong with it, but field injection is not an impediment to Unit tests. 2) Not sure where you're going with this one. If it's part of the method, it's part of the method. You want to test your actual software, right? SHOULD you be making a new rest template in that fashion? Probably not, but again, nothing related to testing. 3) Yes, and No. No - it doesn't make testing more difficult. It's just a different type of test. That'd be what I'd call an "integration" test. My rule of thumb with spring = if you create a spring context to test it, you're integration testing. If you're creating mocks, you're unit testing. 4) Yep sure. But this seems blatantly obvious.
I don't really know. I remember when Java threads weren't native and the push to make them native. Like you suggested, green, but, I assume performance will be improved too, so no one can complain about that, not even me and I'm a competition complainer. :-)
Is this about running JavaScript on JVM or Java in the browser?
&gt; where is it running? In the fiber scheduler you supply the fiber with when you create it, or the default scheduler if you don't. The default scheduler is a ForkJoinPool. &gt; only strands can unpark strands (why not raw threads?) Strand is a general name to either a fiber or a thread. Any code can unpark any strand. &gt; Using fibers also meant using all the other stuff Quasar provides Such as? 
I've used launch4j and found it really simple to use. The maven plugin for it was handy too. It was ideal for my purpose (distribute a .exe to only a couple of users on windows).
Is upper case HttpRequest.Builder.POST method name a good or bad idea? It's a Java naming convention violation, but it nicely matches HTTP naming...
Used it in a little game to script logic
Huh, I haven't made a Java desktop app since Java 6. Useful to know this is included in 8 and up.
I was very interested to see how this worked, and the actual functionality isn't in this library, it's in another project found here: https://github.com/rendaw/java-coroutines-core. As for 'java-coroutines', it appears to be a front-end for 'java-coroutines-core' which uses compile-time bytecode instrumentation (just like Kotlin basically). To be honest, I am not really impressed with the code quality. The code is very obscure. Why is there an InnerCoroutine and a Coroutine, where InnerCoroutine extends a different class also called Coroutine? Why do these two have references to eachother? There are a lot more basic code style issues, a lot also with the names of things (not a fan of `Cohelper`, but also things like `runAfter1` to avoid using `this.runAfter`). Also, why does java-coroutines-core break on uninstrumented external libraries? In Kotlins case, code that wasn't compiled with suspension in mind cannot be paused, but also doesn't make pause calls so it's not a problem.
From TFA: "The project organisation is now ushering in a new project known as "Detroit". The name is a reference to the plan of integrating the Google Chrome V8 JavaScript engine to the JVM." 
Rofl
rod johnson? there's only a few people that would even know that name, much less casually name drop like a conspiracy theorist. narrows down your identity, perhaps to just a few ee pundits.
you should compare checks with what the ee vendors pay you, could be interesting!
I believe in this particular case the benefits of such a naming scheme do outweigh the disadvantages of not following the convention. As you said "it nicely matches HTTP naming". Consider it a bit DSL-ish.
&gt; Matthias Mann's Please someone tell me this guy is getting an offer from Oracle, since he seems to be the grandfather of ~~all~~ many implementation of continuations in java 
Good introduction! What's the point of sleeping in the `onNext()` method, though?
Instead of just posting to a job board, build relationships with the local Java community (especially, since you said you don't want to hire remote). Go to meetups, talk about your company and provide value in general. Also, pay well :)
I was being glib, but you're right. They may not be assholes, they could just be ignorant.
&gt;1) False. This just isn't true. You can argue that constructor injection is a "better" way to do it over field or method injection, but it has NOTHING to do with Unit tests and mocking. @Mock / @InjectMocks - done. There's many other tools that have been around just as long to do this. If you don't want to use Mockito (JMock, etc) then fine - use Constructor/Method injection. There's nothing wrong with it, but field injection is not an impediment to Unit tests. I love mockito and use it all the time, but frankly I was unaware of InjectMocks when writing this article. Once I switched to using constructor injection it made creating and injecting mocks so easy within test cases that simply there was no reason to look for easier ways on how to inject mocks when unit testing. As for constructor injection, I stand by it 100%. Constructors are good for defining the resources a class needs in order to be in a useful state. If you are only doing field injection, there is no easy to define contract and if you add a new required field tests can begin to fail without obvious reason (start throwing NPEs) or if you remove a field you just have a bunch of dead code in your tests until you remove the now unused mocks (which there is no obvious indication they are no longer in use). &gt;2) Not sure where you're going with this one. If it's part of the method, it's part of the method. You want to test your actual software, right? SHOULD you be making a new rest template in that fashion? Probably not, but again, nothing related to testing. The point I was making is when newing resources in method, you lose the ability to test in isolation (I wished I described it this way while writing the article). While a method might be making use of an external resource, you don't want to have to depend upon it for all tests. While my example method doesn't have it, other methods there might have other behaviors happening and it will be much easier to test those behaviors if you can just easily mock out that external call. &gt;3) Yes, and No. No - it doesn't make testing more difficult. It's just a different type of test. That'd be what I'd call an "integration" test. My rule of thumb with spring = if you create a spring context to test it, you're integration testing. If you're creating mocks, you're unit testing. Honestly based on this "critique" I would really suggest going back and re-reading that mistake. Based on what you are saying you are likely writing integration test masquerading as unit tests or the inverse (I'm not sure which way of describing it would be more appropriate) which likely run slower, have higher maintenance costs, and probably don't provide as useful direction on why they failed. &gt;4) Yep sure. But this seems blatantly obvious. Maybe to you, but in my experience the vast majority of developers don't treat failing tests as a high priority. 
Try “quasar Java” instead: http://docs.paralleluniverse.co/quasar/
Following in the footsteps of things like JAX-RS https://docs.oracle.com/javaee/7/api/javax/ws/rs/POST.html
&gt; In the fiber scheduler you supply the fiber with when you create it Thanks! I missed that in the docs. &gt; Any code can unpark any strand. This may have been my confusion, but the docs say "Note: only a strand (thread or fiber) can park itself and only another strand can unpark a parked one." Strand is a Quasar class name, so I didn't think it was referring to the concept but rather the specific implementation. &gt; Such as? FiberSchedulers for instance :). But more generally, if you want to use an HTTP library with Quasar you need to use an adapter like comsat-httpclient, if you want to use a database with Quasar you need to use an adapter like comsat-jdbc, etc. I couldn't find any documentation for many of the adapters, I couldn't find any documentation on adapting new 3rd party libraries, and the interface I would expect to use (`unpark`) is explicitly discouraged by the docs: &gt; you will never need to call Strand.park or Strand.unpark, unless you’re writing your own concurrency constructs Maybe the source of the magic I saw was the docs though. They also don't mention [Java 9 isn't supported](https://github.com/puniverse/quasar/issues/295) and it looks like the project hasn't had a release for over a year now, the documentation has strong opinions with no explanation ("The easy and preferable way to instrument programs using Quasar is with the Java agent"), SuspendExecution's interaction with try blocks isn't explained, etc. Learning about FiberExecutorScheduler has already made my conviction with this project waver though :).
Thanks for taking a look, and even going as far as the source code! :) &gt; it appears to be a front-end for 'java-coroutines-core' Yes, it's a lightweight wrapper that provides I think a more flexible/usable interface. By all means please take a look at 'java-coroutines-core', it's well packaged and doesn't have things like Cohelper and InnerCoroutine. &gt; Why is there an InnerCoroutine `getActiveCoroutine()` returns a coroutines-core Coroutine. To get a coroutines Coroutine from that I needed to extend it and add a field. Currently, calling `Coroutine.yield` from a non-coroutines-core class that inherits yield breaks (an issue with the current instrumentation). This design works around the issue and since it's purely an implementation detail when the bytecode instrumentation is updated to handle the yield issue InnerCoroutine can be removed without affecting library users. &gt; why does java-coroutines-core break on uninstrumented external libraries Thanks for pointing this out - it was a bad choice of wording. It breaks on uninstrumented external *coroutine-using* libraries specifically. That's only if you decide to do compile time instrumentation and don't want to repack your dependencies (the listed workaround). Non-coroutine-using dependencies work fine whether you instrument or not. I'll update that immediately!
&gt; Embedding an exception throwing assertion into streams for debugging purposes or worse control flow is odd practice to me. By that logic I assume you never throw an `IllegalArgumentException` when a given parameter was out of bounds, `IllegalStateException` when something odd occurred and don't even check for `null` with methods like `Objects::requireNonNull`. Because embedding such exception throwing methods into streams is odd practice?
How is this different than running a jvm process alongside a node process and having them communicate via a local socket? Will they be sharing memory space or something?
1) If the design forces you to use a specific tool, I'm afraid that's the definition of a bad design.
&gt; * https://www.excelsiorjet.com/micro (Commercial) Also https://www.excelsiorjet.com/free (Free) But Excelsior JET is not just a packager, it's a complete Java SE implementation with its own JVM and AOT compiler. It just happens to include an auxiliary packaging toolchain. If packaging is all you need, there is in fact Java Packager right in the JDK: https://docs.oracle.com/javase/8/docs/technotes/guides/deploy/self-contained-packaging.html **Disclaimer:** I work for Excelsior.
Here we are on the other side of the globe (circa 12 hours time zone difference), facing the same problem - demand outweighing supply. If remote is not an option, you have to make your offer more compelling, but not necessarily in pure $$$ terms: The other day I came across an article about companies struggling to hire senior engineers. What they had in common were perks appealing primarily to young single childless people. Are you offering child care, parental leave, and the like? Do you have a no (unpaid) overtime policy? If yes, do you have a reputation of sticking to it?
So what would you call parallelism, where there aren't multiple tasks, like SIMD, or ILP?
No, j2v8 runs a native node.js proceed with interop points to Java. This would mean v8 running on the jvm, similar to nashorn.
V8 will be ported to the jvm, thus no need for a separate process.
&gt; that doesn't require any manual marking of suspendable methods (not released yet). That sounds very useful, when will it be released? 
&gt; I mean theres already nashorn and rhino. Lots of reasons. I work with IBM systems that allows integrator's to embed JS business rules through UI. Its easier to maintain than Java and JS can be deployed without recompile/ear deploy.
It's the singularity! Java and JavaScript really *will* be the same.
Move to the south west! hahaha - seriously, who wants to live in North East / Birmingham?
I don't know yet, but hopefully not long.
Occasionally, but it's mostly Loom, now. I assume Quasar will be re-based on top of Loom when Loom is finished (most of Quasar is stuff like channels, actors and dataflow that are outside Loom's scope).
When I get around to it :)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; Exactly. And throwing an exception as soon as the error becomes easily observable (i.e. immediately after data and filter first met each other) is what we in the software development business call failing fast. Ahh I see your point now. In that case I like [daniu](https://www.reddit.com/r/java/comments/7u8xgm/beware_of_findfirst_and_findany/dtihf6r/)'s approach.
I agree. Mockito makes this VERY easy. I love verify, verifynomoreinteraction, and verifyzerointeraction...
What wrong with otters doing work?
Who said the design forces me to use a tool? I chose the tool to compliment my testing because quite frankly, it just works. Hamcrest, Junit and Mockito hit every single one of my projects. As a side note, I love constructor injection and use these tools with it. So, did my design force me to use this tool now? Also, I've tested non-constructor injected projects without these tools just fine. So please - lay off the judgement ...
&gt; I love mockito and use it all the time, but frankly I was unaware of InjectMocks when writing this article. `@InjectMocks` (with runner) or `MockitoAnnotations.initMocks(...)` (without runner) - I dunno man, those are things right up at the top of the documentation. I don't want to be "that guy" but you're writing articles on stuff you're not familiar with and then arguing with folks about the "right way" to do it. I'm not even saying your way is wrong, but don't say the way others do it is wrong just cause you do it differently (because that's what it sounds like). &gt; The point I was making is when newing resources in method, you lose the ability to test in isolation wow... so `new` isn't allowed in methods now a days? Man, I should really 'keep up' with my studies in my old age... It's not that I don't understand the point you're trying to make - I totally get it. But 1) your example and 2) your delivery are WAY oversimplified. &gt; Based on what you are saying you are likely writing integration test masquerading as unit tests What on earth are you talking about? integration = testing the integrated parts of the system AKA with a spring context and "real" objects. unit = testing the specific units involved without a spring context and in isolation. That's exactly what I said.
So far it looks like Inno Setup is the closest fit; we were already "packagin" the jre, jar file, exe file pointing at the jar file, and a data directory in a zip file, but it looks like this can get all of that into an .exe.
&gt; @InjectMocks (with runner) or MockitoAnnotations.initMocks(...) (without runner) - I dunno man, those are things right up at the top of the documentation. I don't want to be "that guy" but you're writing articles on stuff you're not familiar with and then arguing with folks about the "right way" to do it. I'm not even saying your way is wrong, but don't say the way others do it is wrong just cause you do it differently (because that's what it sounds like). As I stated, the way I have designed code and written tests meant initMocks and InjectMocks provided little additional benefit for me. I’m not arguing against their usage, but against field injection. Also initMocks/InjectMocks aren’t super often used. I did a search of spring projects in GitHub. Mockito is used in something like 3k tests. InitMocks is used 181 times and @InjectMocks is used 9 times. So while I’m happy to now know about it, I don’t exactly feel embarrassed for not having known about it before, not the least of which it generally wouldn’t had improved in speed or clarity how I have written tests. Which again isnt me arguing against it, it’s just me saying I don’t personally have a need for it. &gt; wow... so new isn't allowed in methods now a days? Man, I should really 'keep up' with my studies in my old age... It's not that I don't understand the point you're trying to make - I totally get it. But 1) your example and 2) your delivery are WAY oversimplified. You obviously don’t because if you did you wouldn’t be arguing against it as it’s pretty plainly improving the testability of the code as well as resolving a general design smell and giving a more complex example provides little additional benefit. &gt; What on earth are you talking about? integration = testing the integrated parts of the system AKA with a spring context and "real" objects. unit = testing the specific units involved without a spring context and in isolation. That's exactly what I said. And I’m saying that while true it doesn’t suggest a real understanding of integration testing which is tests to verify contracts and behaviors between different systems/modules. Further I don’t understand the disagreement with my mistakes as you apparently agree with all of them. You don’t want to be “that guy” but I can totally assure you, you are in being fact “that guy” right now. Your critiques are at best pendactic if not out right wrong and do little to actually further the discussion on automated testing. I’m happy to hear feedback, but you could work on your delivery. You seem much more interested in “proving how smart you are” than anything else. 
Ah, I was looking for the words 'ported' or 'written in', but didn't find any of them. thanks
It is in the context I was showing it which should be painfully obvious. 
&gt; Why? I meant that one reason I decided to revive the original coroutine code rather than just go with Quasar was that I didn't know about FiberExecutorScheduler. By `this project` I meant zarbosoft.coroutines.
If you're going to rewrite it, rewrite the Scala parts in Kotlin. It isn't as nice as Java, but it is vastly more hyped than Scala these days. 
&gt; This is completely normal. username checks out. To make it more "normal", I'd suggest to randomly start writing some classes in JRuby, and some others it Kotlin, and please, just for the sake of it add some Clojure here and there. And... don't forget Groovy, the original "better Java". It's all fully interoperable, so don't hold back! Be completely normal!
A question about Loom - will it result in zero effort, backwards compatible integration with green threads? Like, are we talking about a case where `GreenThread` will extend `Thread`, and thus all we'll have to do is pass a properly configured `ExecutorService` to take advantage of free non-blocking (at least at a system level) operations? Or would we still be looking at the need for bytecode instrumentation and other magic to achieve that goal?
Back in my day we called AgressiveOpts the "Make SPECjbb go faster" flag. It was aimed at a particular benchmark and was of limited use to real users.
What exactly did not work? Have you tried any of these [examples](https://download.java.net/java/jdk10/docs/api/jdk/incubator/http/HttpClient.html#newWebSocketBuilder())?
Ah ha! That's how to do it. I couldn't for the life of me figure out how to get a WebSocketBuilder. I didn't realize I had to do it through the `HttpClient`. 
i also use constructor injection with mockito/mocking for tests. if i am not mistaken, one could pretty much omit mockito and "simply" write all necessary mocks/dependencies by "hand" in tests by writing test specific (inner) classes/interfaces which implement/override what is needed for each particular test -- whereas mockito automates a lot of that "boilerplate"?
Aaand I would use this how?
Server side rendering of React.
&gt; There was an earlier version started in Kotlin and Kotlin Native using single-step JVMTI, but it was abandoned because it was too slow. Why wasn't it made faster? 
How come you find Spring so much better than Guice?
Checking stability of your code against different input vectors. Mostly useful when some code has to deal with possibly hostile inputs. For example, if a server component needs to parse a file uploaded by a user.
Well, I could have switched to the instrumentation approach I habe now, but I didn't want to carry the Kotlin dependency. Also, for things like my branch tracking code, Kotlin would insert extra instructions for runtime non-null checks. They don't have any option to turn it off and tell everyone that there aren't any use cases to do so and it's negligible. That and many other Kotlin annoyances, daily bugs I seem to find, and that Java generates more predictable bytecode. Don't get me wrong though, I'd use Kotlin or Scala in a second on a higher-level project. 
What a waist of resources imo. For the little use case there's already Nashorn. They should work on Java to webassembly compilation instead.
You can also sponsor visa for foreign worker, there are some highly skilled Developer in other countries willing to travel to England (me included :D)
&gt; Kotlin 
Yes, e.g. inline Lambdas instead of new objects of anonymous classes.
Do you have any references conforming that this about porting? V8 is written in C++, so wouldn't "porting" mean "re-implementing" it in Java (or another JVM-based language)? I can't really believe that this is the intention, as there already are JVM-based JS implementations.
I can relate and I hope you can find the time, sometime ;)
just... stop with the serverside templating. Have you guys got SSR working with nashorn yet? maybe concentrate on that.
I think trying to maintain Nashorn is a waste of resources when V8 is already there.
I think the intention is to be in the JVM itself.
FYI, you can lint your code with shellcheck.net (either online or with their library). It returns quite a few warnings with your code ;) In particular you should fix those `\n`, I'm surprised it works for you.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; stop with the serverside templating. Why? 
Nashorn allows JVM languages and JavaScript interop. V8 doesn't.
No, it's just my reinterpretation. But I assume it's not porting the C++ to Java, but rather incorporating the V8 engine into the jvm. There's also the separate Graal and Truffle projects that can already run node.js inside the JVM through the truffle.js implementation, similar to how they've gotten ruby, R and llvm to run on the JVM with great performance.
Not liking XML for scripts is the main reason why I use Grade rather than Maven. I agree, having a lot of control flow logic in a build script is suspicious. 
Thanks - I'll work though the errata :)
&gt; And by only creating a framework for client side suddenly nobody over engineers anything anymore? Nobody is saying anything like that, let's not be ridiculous. But the client side frameworks out there right now do tend to solve the component type frameworks a lot more elegantly because there is a lot less layers between the dom and it's manipulation. Whereas on the serverside you can only push out snapshots of the dom over http, leading to heavier payloads, laggier UI and hard to manage web application state.
Not really... Serverside rendered site are way faster and less taxing the CPU of the client. That's why many are actually moving a lot back to the server. Also JavaScript is the farthest from elegant. The language itself is an ugly mess already.
A great Jurassic Park line :)
What is the benefit to have thin war than embedded server like Spring boot or dropwizard?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
TIBCO BusinessWorks is Zero Coding Integration product. If you just have JAva awareness, easily pick up TIBCO BusinessWorks and be part of TIBCO Wave in the Market !!
&gt; But the client side frameworks out there right now do tend to solve the component type frameworks a lot more elegantly That's effectively "javascript" and "elegantly" in one sentence. Are you mad? &gt;there is a lot less layers between the dom and it's manipulation You wouldn't really say that from looking at the stacks of those so-called "elegant" client side frameworks, which are huge. And regardless, there's more layers now between the client and the data it ultimately needs. Server side templating can do server to server communication (often even internally on the same server) to get multiple pieces of data. That's a very low latency. Whereas client side frameworks need to do a request over the network for every single piece of data. And what do you think is faster? Ready to render HTML, or having to go through layers and layers of JavaScript code on the client? And what do you think requires less memory on the client? Ready to render HTML or enormous heavyweight client side frameworks? 
Isn't sedding through XML in the same class as grepping through HTML, and as such, banned by the Jakarta UN Convention that [covers coding crimes against humanity?](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454)
Only if there is the possibility that you may be surprised with a response that doesn’t fit a known template. In the case of nginx’s dir listing template on maven central - it is highly regular and non recursive.
Does the reactive framework (WebFlux and WebClient) that comes with Spring Boot 2.0 comparable with Vert.x? Does it implements multi-reactor pattern too? Where you can set multiple event-loop for each thread?
Be careful with mass upgrades of maven dependencies. It can introduce new hard to find bugs. Try to do it in smaller scale or all upgrades just after a release so that there is a chance to catch them in the following sprints.
I agree
JS is easier to maintain than Java?
Let me just take the chance to throw out there, async/await are awesome tools and Java should add support for them. Synchronous and asynchronous code ends up have identical structure which helps people’s code comprehension and results in less defects. Async/await allows green developers to effectively and cleanly do async operations with coroutines.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Speaking as someone else who made the switch from Guice to Spring, while I prefer Guice DI over Spring DI, I prefer Spring for its vast ecosystem and far better integration with popular third party libraries. 
&gt; 3. Testing at Too High an Abstraction Layer &gt; ... However end-to-end tests alone are not capable of, or at least not well suited for, fully testing out all the paths through a codebase. &gt; Testing at the proper abstraction layer helps reduce the maintenance cost of writing tests... I've worked several places that decided unit testing would be "fun". It always follows the same path: 1\. Lots of excitement 2\. A combination of stress and excitement 3\. A few months go by and the newness and attention to them wears off 4\. Everyone "in the loop" either starts writing short pointless unit tests to check them off the list, or they stop writing them altogether 5\. New features or bug fixes that break unit tests just get the offending test commented out - no one can afford to spend 3 days tracking down how a unit tests works for a feature that took 1 day to implement 6\. Usually there's one person who insists on continuing to write lengthy unit tests, and that person either gets fired or gets in trouble with management for "taking to long" as they don't realize no one else is doing it any more End-to-end tests are the only tests I've seen that have a chance at being updated along with code changes, and it's hard for those to but at least they have a chance. You just end up with this big ball of unmaintained unit tests - I've never seen it go any other way.
&gt; ...Kotlin would insert extra instructions for runtime non-null checks. They don't have any option to turn it off... `-Xno-param-assertions`
[your Call for Vote](http://mail.openjdk.java.net/pipermail/announce/2017-October/000238.html) said: &gt; Votes must be cast in the open on the discuss list i'm not able to find any such votes in the archive, though i did see that the project was approved. is the discuss list archived and if so do you have a link ? 
Right, but I’m far more likely to already be authenticated with my email client.
I think the larger issue you are probably running into is lack of organizational buy-in into automated testing. Automated testing seems pretty pointless if you aren't automating the rest of your build pipeline. End-to-end test are also a vital part of an automated test suite, but isolated unit tests are also critical as well. If your classes are using constructor injection and not instantiating resources in method (mistakes #1 &amp; #2) writing unit tests for a class really shouldn't take long. Really that was one of the things I was surprised about, a well designed codebase is very easy to unit test. Because each layer has a very focused purpose, you typically only have to mock out a couple of things in a test and mocking frameworks like [mockito](http://site.mockito.org/). Are really easy to use. 
this looks good. i'm a user, and more recently a somewhat reluctant maintainer, of a similar library [kilim](https://github.com/nqzero/kilim), also based on Matthias Mann's early work. i'm using it instead of quasar because i needed access to the underlying continuation if quasar exposed that continuation, would you have considered using it instead ? 
Isn't this the one that can only produce an executable for the OS its running on? (which tbh makes it nearly useless...) 
This was posted here a while ago (I have no personal experience with it): https://www.reddit.com/r/java/comments/67av7h/utility_for_generating_native_launchers_for/ 
^ Well that was a bunch of manipulative salesy bullshit. You didn't respond to anything I wrote, so I'm just repeating myself: &gt; End-to-end tests are the only tests I've seen that have a chance at being updated along with code changes, and it's hard for those to but at least they have a chance. &gt; &gt; You just end up with this big ball of unmaintained unit tests - I've never seen it go any other way. 
Correct. Also it's easier to setup 2 factor security and such on email rather than each website. Till password managers are the norm for general population, this mechanism is good. 
honest question, which sites are using passwordless (email-full ;) ) logins out there already?
we used https://www.ej-technologies.com/products/install4j/overview.html a couple of years back in a company, and it worked just fine
The main issue I can see is an alarming number of people still use unencrypted POP or IMAP mail connections (ie not TLS). Email is notoriously a bad way to communicate secrets.
Using the email will require hackers to have physical access to my computer and know the password for it, or know my password + have my two-factor-device and the pin for it. Having same password on multiple sites just requires one of those sites to get hacked in order to compromise all of them for me. Gmail is much less likely to be hacked in this way than all the random sites I sign up for.
&gt; Whereas on the serverside you can only push out snapshots of the dom over http, leading to heavier payloads, laggier UI and hard to manage web application state. No one stops you from including javascript in that "snapshot of the dom" and making it a clean self-contained piece of js that can do async requests. No one stops you from making a full-duplex connection either if you so wish. SPA's are good for long-running applications that use a single screen, the likes of facebook and pandora. Imagine wikipedia or reddit using that. You'd wait days for every page load and the servers would be burning. Usually the heavier the payload is the better it is for the user, there's even a pattern for that, it's called a Data Transfer Object. Do not forget that the payload is what the user wants and it comes in a packaging that has other elements which are there purely for transport, security, etc. and are mandatory for each request. 30 requests for a server rendered webpage will load blazingly fast, whereas a SPA with 200 async requests just for loading the basic features will take a lot. There are ways to make spa's fast, you scale horizontally much more to make up for their slow nature, you cache a lot of data on the client and check to see if the data changed when the user loads the page the 2nd time, you spend more time coding for speed. You can do that, or you can use SSR with a bit of js and WebSocket if required. I'm not sure why you'd say the "web application state" is hard to manage. Whenever you are using JS there will be waiting times, waiting for the page to load, for the state to be consistent, for a result, and there are race conditions, it's the nature of asynchronicity.
slack ?
Medium
It does introduce a single point of failure, which could be a disadvantage. In my case I deliberately keep my email more secure than the majority of other accounts (2fa for example) so I'm OK with the sacrifice.
I did respond to everything you said, it just all sounded like an organization that doesn't value automated testing. I've been a part of several organizations that didn't value automated testing and things went down a very similar path. I stated, end-to-end tests are valuable, but they also have limits on what they can check for. Are you relying upon your automated test suite as the only major gate between you and PROD? It's honestly hard to see end-to-end tests alone (particularly as I am surmising they are connecting to live resources) giving any organization the confidence to push code to PROD. Though I could of course be wrong. There is a bigger story than just adding unit tests to your automated testing suite, but unit tests become extremely valuable if they are part of an automated testing suite that allow your organization to do continuous delivery. As for unit testing, go into any spring project and you will see an enormous number of unit tests (as well as of course other types of tests): https://github.com/spring-projects/. So unit testing isn't just an ivory tower concept. 
I guess the question is "why"? Microsoft has done everything since Java was created to discourage Java usage. Microsoft even made their own clean room version of Java, C#. Why would they want to support Java, possibly even letting it compete with their C# which they spent a lot of money to develop?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The software is not stable, only using it as a proof-of-concept for some of my ideas: This little prototype features 4 modules: Schema creator (placing walls, doors, windows, static objects that satisfy agent's needs like energy, bladder, etc) Sensor placement Optimization (heat map) Simulation
Because they're trying to get everybody on VS Code, it's a stripped-down version of Visual Studio proper and (IMO) it has a vastly superior developer experience due to the robustness of their extensions.
http://mail.openjdk.java.net/pipermail/discuss/2017-October/thread.html
Because they are losing to Java and soon Jetbrains is releasing it's C# IDE which will take a lot of mind share away from VS.
Yeah and they're 20 years too late. Good luck with that.
There is room for improvement in the recording department
Don't forget that if someone has your email, they can 99% of the time use the "reset password" functionality to reset the password to whatever they want. So someone gaining access to your email is already allowing someone into your account.
Eh...that just protects the "last mile". Most SMTP servers passing the message along don't use TLS. I use IMAPS and SMTPS but I'm under no illusions that my emails can not be read by others. Just take a look at the headers. That said...I do see more servers actually supporting it when passing it off, but most don't.
More like a release train wreck.
Fair enough
Its been at least a decade since I tangled with Visual Studio. I remember that the pricing wad draconian. Is that still the case? Do you think C# developers would jump ship for a *significantly* cheaper C# IDE by Jetbrains even if it doesn't have every last feature of Visual Studio?
We still don’t have an answer to the critical question of future LTS update overlap
Some overlap between 8 and 11 is described [here](http://www.oracle.com/technetwork/java/eol-135779.html).
short answer: no long answer: VS now has a free edition called "community", that is essentially the professional edition, not like the old gimped "express" editions, so the price is not the major factor to ditch VS. but Rider has an advantage over VS that it is cross-platform, it runs on windows-linux-mac, while VS is windows only.
&gt; long answer: VS now has a free edition called "community", that is essentially the professional edition, not like the old gimped "express" editions, so the price is not the major factor to ditch VS Wow. So what do you get with an edition you have to buy? Does the free edition come with debugger support? 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
community edition has some "legal" constrictions, tl;dr free for indy developers and small companies, larger companies have to buy a license. and yes the free community edition comes with debugger, tracer, extensions support, git support and every thing else, only lacking some features like "code-lens".
Why would anyone use Java 9?
Ohh boy you've never had to upgrade any underlying software for a large conservative company.... i once fought a year to get from java 6 to 8. 
6 to 8 is a big change. 9 to 10 not so much
I think Oracle is not doing it’s here to entice enterprise users... Clearer communication could be helpful!
Tell me about it. I'm scared that we won't be able to keep up with this release cycle
trust me corporate policy will not care. 
That sounds amazingly liberal for Microsoft. I remember when the ideal situation was to know a college student to get the student version of VS for thousands less.
After watching/listening to it, I think I'm going to need a hearing aide from here on out.
I tried to argue this on the mailing list. They did not seem to care. They advocated the faster release cycle as a win for developers, but it's mostly a win for their support money machine. I thought a yearly cycle would be hard enough for most companies.
&gt; TFW when java 10 is almost out, and you're still writing anonymous classes instead of lambdas because of Java 7 still being used in your project
did you think that up all by yourself, or did you forget to credit someone else's joke
Large companies can pay Oracle large sums for extended support.
do you even need to? it's not like corps who treat their engineering like a burdensome cost center upgraded that much anyways. java 6 is still common.
that's political and organizational, not often directly related.
Yeah, sorry. I just thought some might find it interesting. Maybe we can file a complaint with them 😂
Compact strings, VM and GC improvements
when it comes to efficiency: Mac swipe &gt; one-key thingy &gt; Win Tab But I’m just not used to Windows so I guess I just need time to work out the shortcuts.
I'd like to get the latest security updates. but weblogic doesn't support Java 9 yet, so it's probably a moot point anyway.
To me, I could not deal with not having a delete key. 
We're still working on the Java 8 upgrade for our hadoop clusters. Java 10 is just a pipe dream.
yeah. but I said 9 to 10
Compliance - once Java 6 no longer receives updates many companies will be required to update. 
Interesting... what is this information (piecemeal features release) based on? I have looked at both https://wiki.openjdk.java.net/display/valhalla/Main and the specific feature that my group needs https://wiki.openjdk.java.net/display/valhalla/Minimal+Value+Types. It's not obvious on either project or feature link what release schedule are we looking at.
All these version updates are just dumb and confusing. I bet the reason there's so much use of 6 is because there were *five years* between it's release and that of 7. Imho a release every 3 years seems insane and releasing 10 just *one year* after 9 is batshit.
As long as the lambda doesn't become multiline and instead is used as glue code using small private worker methods. "The perilously long lambda" https://www.ibm.com/developerworks/library/j-java8idioms6/index.html 
No it's a dearly needed change. If the language doesn't improve quickly, it's going to be a dead end. Java is / was already at the border. Nowadays you can't have a 3 - 4 years release cycle anymore. People would be switching to other languages in no time. Also companies will have more and more problems getting developers to deal with Java 6, unless heavy (Cobol-style) compensatation.
I think I've heard Goetz and Reinhold mention it a couple of times in their videos, discussing their new release methodology.
[removed]
guh, a guy at work was excited about lambdas... he makes these huge ones, bigger than the example they give. Drives me nuts. 
Prefer method references ;)
Yes, it can only produce the executable for the platform it is running on. That is one drawback, you will need to build it on the platform(s) you are targeting.
See [here](http://mail.openjdk.java.net/pipermail/discuss/2017-September/004281.html) to learn more about the new release cadence.
Ahh, but you still have 3 years between fully supported LTS with a manageable overlap. So not much changes for more conservative companies except for the advantage that many tools and libraries have already migrated and tested the releases way beforehand when the time comes near. More "bleeding-edge" developers or companies can try out the new stuff as the please.
IMHO incremental upgrades are easier than later jumping from Java 6 to Java 26
sure, but we got the approvals we got. 
It’s actually six months after 9. The new release cadence is every six months.
It took me a long time to stand lambdas at all. The way I look at it, it's a concise way to do things concisely. If someone tries to create long, elegant, masterful lambdas; it quickly becomes a contributor to headaches. Apply SOLID (whether using them or not) and they become an asset rather than a liability. SOLID I learned from a guy I worked with recently. 
Multi vm jars will be nice as well (once support is better in things like Maven). Today you'll see people publishing jre8 and jre6 versions of their libraries. That becomes a thing of the past post Java 9.
Look at Mr Fancy Pants over here with his Java _7_
Biggest reason to at least build on the fast release train is that Mark said they could deprecate and remove features between lts releases. That is to say, something can deprecate in 9, and be removed in 10. Making the jump from 8-&gt;11 that much harder.
Everyone else on team, passive aggressively, just factors his lamaba crap into methods during code clean up, lol Even simple lambdas don't look clean to me, but I try not to use them much. 
Yeah, before the new release process it was a maybe 11 thing. That would have put it in 2020 territory.