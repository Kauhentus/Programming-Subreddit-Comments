You could try [UCDetector](http://www.ucdetector.org/) on Eclipse. It works for me. But sometimes want to change visibility of classes and it is not perfect.
That's certainly possible if someone wanted to write it but as far as I'm aware no one has. There are different implementations of the swt interfaces for win32, cocoa, etc but they are all intended to have Java code calling native components and still keeping your Java code cross-platform. Swing does that at a high level already but doesn't use or expose as many native components from my understanding. Having swt use swing in the background would be a little silly since it would be better to just use swing in the first place from your Java code.
Difficult to say. JavaFX was supposed to, in a sense, succeed Swing, but it never really caught on. To be honest, it's pretty much down to preference. Oracle have hinted that they want JavaFX to be the norm, but then they exclude it from the JRE releases. Sends mixed signals.
I'd say learn Python. While you can accomplish the same with Java, Python was pretty much designed with what you're aiming for in mind. Besides, that's another language under your belt, and Python will always be useful.
What you're looking for is a dependency graph of classes, i.e. given a class show all classes reachable from/to that class. I found [http://dependency-analyzer.org/](http://dependency-analyzer.org/) which might help; haven't tried it so I have no opinion of it. Another option would be to print a list of all classes loaded into the JVM using the Java instrumentation API. See [https://stackoverflow.com/questions/2681459/how-can-i-list-all-classes-loaded-in-a-specific-class-loader](https://stackoverflow.com/questions/2681459/how-can-i-list-all-classes-loaded-in-a-specific-class-loader) for an example. Note, you'd want to run this code only after exercising the application enough to ensure that the classes for all "reachable" features are loaded. I haven't tried this code either, so this is also a bit hypothetical. And it doesn't directly tell you which classes are unused; you'd have to generate a list of all classes in the code and then compare it to the list printed out by the instrumentation. Not terribly difficult, but it'll take time.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
https://blog.jetbrains.com/kotlin/2019/04/kotlin-1-3-30-released/ &gt; . Specifying JVM bytecode targets 9 – 12 If you run the code under JVM versions 9, 10, 11, or 12, you can now set the corresponding jvmTarget. This setting will affect the version of the generated classfiles, and the resulting bytecode won’t run on any lower version of JVM. Note that so far newer versions don’t add any bytecode optimizations or features beyond the ones that exist in lower versions, but that is going to change in the future.
Any and every production UI I know of in the last 5 years is JS (Angular) based
Even if I needed desktop, I'd still be looking at using web technologies unless the project had specific constraints that made it inappropriate. I've done lots of Swing programming, 7+ years on both small and very large GUI projects. I enjoyed it at the time and for years considered it my default choice for new projects that needed a rich-client/desktop UI. But the modern browser is a superior client-side platform. There's not much difference between embedding Electron or embedding a JVM in your project. And if you can't/won't embed your platform, you're more likely to be able to rely on an up-to-date browser platform environment than an up-to-date JVM platform environment. &amp;#x200B; Typescript + React, is more than good enough to compete with Java + Swing/JavaFX. In fact, I've starting to prefer it strongly. On the UI side, the NPM/Javascript ecosystem is way ahead of anything in the Java space. Debugging presentation issues in a browser with Chrome/Firefox is light-years ahead of debugging Swing/JavaFX. If you aren't already familiar with Swing/JavaFX programming model, learning HTML/CSS is going to be roughly the same amount of effort. Not to mention browser engines embody decades more person-years worth of effort in presentation/layout technology. If you're building a complicated / good-looking UI, you're going to have to climb down into the nuts and bolts of your presentation technology. Advancing your understanding of HTML/CSS tech will likely be way more useful to you in the future than learning the ins and outs of Swing or JavaFX. &amp;#x200B; I still personally prefer Java for traditional server environments (though Typescript makes a pretty strong case in the Serverless area). I don't regret choosing to work with non-web client-side for the last decade or so, if I could go back in time I'd make the same choice. But I wouldn't choose to learn Swing/JavaFX tech now. I certainly don't plan on taking any more client-side Java work, I'd just be painting myself further into a corner.
Depends what you need really. Swing is great if it suits your project. If you want visual flare and don't mind picking up a new skill, JavaFX is pretty ideal.
https://vaadin.com
&gt;But the modern browser is a superior client-side platform. It would be if the removed JavaScript and replaced it with Java.
That's a hard argument to make, I think. Typescript is extremely good.
I don't really see that as a plus. JavaFX was booted out of the JDK was because they weren't keeping up on platforms [like ARM](https://jaxenter.com/jdk-arm-without-javafx-end-javafx-embedded-114212.html). Chasing mobile makes it look like they may abandon desktop altogether. Otherwise, they are now fighting a war on two fronts, which will strain their stretched resources further.
[Ignition](https://inductiveautomation.com) by Inductive Automation still uses Swing for its designer one one of its clients. It's a pretty mature product. They are moving to a web clients but the designer will stay swing for some time
Netbeans is dead, long live netbeans! Muh fav ide.
What is the latest performance of JavaFX? Is it applicable to build a high speed trading platform UI?
Apologies for plugging my own project, but I've been working on a Kotlin web framework called \[Kweb\]([https://docs.kweb.io/](https://docs.kweb.io/)) which makes it very easy to create web interfaces, which can then be used locally or remotely.
Agreed, TypeScript is lovely. I've been a Java guy for 20+ years, but I'm really enjoying writing Angular and Node in TS. OTOH, GWT is ruining my day.
Ah. Good info. Looks like going native makes a lot of sense once you are on 8/9+
They are not talking about web.
This past winter I made a season countdown for a Raspberry pi and used JavaFx. I found it to be really nice and powerful. It allowed me to easily do some cool graphics. But I found that it seems a little sluggish on the pi.
&gt; GWT is ruining my day. &amp;#x200B; I was keen to find out what the "Singular" framework would end up looking like, but it disappeared. Was supposed to be "re-imagining Angular in Java", but it dropped off the map ([http://gwtcreate.com/videos/index.html#singular](http://gwtcreate.com/videos/index.html#singular)). Maybe it got eaten by the whole Dart/Flutter thing or some other big fish in Google. &amp;#x200B; If you like static typing, component-oriented UI frameworks and maybe have reservations about using templating for your UI - do yourself a favour and check out Typescript + React + Material-UI.
C# actually has Roslyn ([https://github.com/dotnet/roslyn](https://github.com/dotnet/roslyn)) provided. It might be straightforward to do C#. I'll keep this in mind :)
I've been inching toward migrating a large Swing app to Vaadin. Care to share what you don't like about it?
[This is how the author retorted](https://twitter.com/netbeans/status/766136304543358976?lang=en) when someone said the same thing on twitter! The author stills seems to be active and [(re)tweeting about netbeans 11 features](https://twitter.com/OpenJDK/status/1140555669021569024). What I personally think is that they's still maintained the same UI and theme looks which is putting off some people but the underlying product is still quite good.
Is there any reason you couldn’t contribute to Buddy to make it faster?
Typescript has been a huge improvement, but still falls well short from an overall dev experience (relative to Java). When dealing with pure typescript and not needing complex toolchains it's really nice. But with any project of substantial size at some point you start fighting weird webpack issues, 3rd party type annotations that change/break on a whim with patch version updates, need to compile to es5 or whatever for compatibility, etc. Overall I think the maintainers are doing a pretty good job with the core language, but they suck at dealing with the community. Last I checked they were still being completely unsupportive of Yarn PlugNPlay, despite lots of help/work from the yarn team and supporting devs. That all said, I do agree TS is great, but the ecosystem still feels immature relative to Java. The language itself I like a lot. Would be better if there were dom bindings for web assembly and typescript could bypass javascript.
Their demo video didn't show any form-centric desktop applications
Really? IntelliJ IDEA has one of the best searches I know.
Agree 100% about the build pipeline, it's truly horrific. Disagree on the Yarn thing though. Yarn, Webpack, etc. are transitory technology - they only exist because better options haven't arrived yet. I don't blame the TS maintainers for wanting to minimise wasted effort in this area. I think they're taking the right approach by just working with the numerically popular tool, trying to remain open for the other tools and waiting for the ecosystem to produce better options.
Thanks for the inputs..
Thanks for the inputs..
Thanks for the inputs..
Thanks for the inputs..
Thanks for the inputs..
Thanks for the inputs..
Thanks for the inputs..
Thanks for the inputs.. Will read about Groovy
Thanks for the inputs..
Thanks for the inputs.. Yes. Starting from that link.
Thanks for the inputs.. Will read about Kotlin
What do you mean with customised functions? What do you want to do?
Definitely check out pandas. It’s a DataFrame library that has become the industry standard for data analysis and machine learning.
Customised functions meaning I have several use case like eg include what’s App or Facebook chat functions or I want the system to stores all the conversations in my what’s App between 2 or more parties, transactions records etc
Sure. Java is programming language. It lends itself to programming.
Oh I remember you. Pardon me but can you take a look at the last message you replied to my last post? That suggestion was not valid. Only interfaces can be extended to more than 1 class.
If you are looking for example how to start with JavaFx and integrate with Spring Boot, please have a look here: [https://github.com/MarcinLachowicz/spring-boot-javafx-scaffolding](https://github.com/MarcinLachowicz/spring-boot-javafx-scaffolding)
CommonsCrypto is probably slower because the benchmark code also contains initialization code to get the cipher, which isn't trivial at all and the result is not cached.
The term *customized functions* isn't really a good one. I think you mean *functionality* instead? Spring brings *components* for lots of 3rd party applications or libraries. Then there are lots of 3rd party wrappers for better spring integration for 3rd party applications or libraries too. So a lot of common things can easily get integrated into a spring application. Last but not least you can implement missing integration by yourself. So spring is imho *extremely* good designed in order to support almost any use case one can think of. So you should probably learn more about spring yourself in order to get a better feeling and judgment about it.
How is the subclass model of Java related to your original question? This is extremely low level - your question is not!?
Thanks for correcting my English. But, java also support lots of 3rd part libraries which offers more flexibility as one need not have to spend time to learn how the framework works. What is your opinion on this?
I wondered that "EE4J" is still a thing, because I thought that "Jakarta EE" would be the new name. I had to google these [terms](https://dzone.com/articles/the-relationship-between-jakarta-ee-ee4j-and-java](https://dzone.com/articles/the-relationship-between-jakarta-ee-ee4j-and-java). Maybe "Jakarta EE" would have been enought for the top-level Eclipse project and the platform.
I see what you are thinking, but your example is really not 'painful'. JDBC has a simple API and the given example is very basic, very simple. By your definition, almost everything about programming is painful. Every IO related operation is going to need exception handling and unlike the case with relational databases those IO operations are not going to be ACID. &amp;#x200B; My definition of pain is an API or framework that is inconsistent, hard to set up and the ROI is very small if nonexistent.
Sorry I don't understand your post I assume! Please try to explain your opinion or question more accurate.
You mentioned that Spring has a lot of libraries but I think Java has a lot of libraries that can be used with Java EE technologies - Eg Apache Kafka, Apache Camel, and many other open sources. So how is this kind of combinations compare with Spring?
There are platforms that don't have x86 processors and AES-NI where BC's pure Java implementation can be the best way, especially considering it's compatibility.
It might make sense to do non-x86 and non-AES-NI benchmarks too because they're not everything.
Correct, I was implicitly talking about Spring. I'm very excited about Quarkus and GraalVM to provide a similar experience with a very low startup time. The JVM was originally designed for long running applications, which in a cloud environment might not be ideal anymore.
They are always preferable
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
SWT is really good. I totally don’t get why it’s not getting the love it deserves. If you want your app feel like a native app, use this. It’s a surprisingly well designed extremely thin layer on top of the native window toolkit. Basically every method you call is just handing over the call to the appropriate system function. However, although actively used in eclipse, it has some really annoying subtle bugs or stalled features that feel like it didn’t get any true care from an open source community for a decade.
You are comparing different things! Java is a language and has of course lots of 3rd party libraries. Spring is a framework written in Java and has also libraries that extends its core functionality. By nature all spring libraries are also Java libraries. So yes, Java as the root of everything in the Java universe wins this poor counting of libs contest. But what's the value of this result? If you start developing an application you always seek for production ready libs for special tasks you wanna solve. And if you strive for a web application you probably even choose a *framework* in order to support you with lots of standard tasks like routing, authentication, authorization, validation of input, database access, logging, monitoring your app and lots of more stuff. Spring is just one of those. It is a really big one with lots of integrated stuff (often the core isn't by spring itself, but allready an established 3rd party lib), but it does not differ in a fundamental way from other frameworks. So you can choose whatever you prefer. JavaEE (nowadays Jakarta EE) does differ from spring by its intention primarily. It defines a *standard* for handling enterprise applications. It offers reference implementations too for its specifications. But of course there are sometimes other external solutions that fit the specifications and can be used as a drop in replacement. Those specs cover topics like dependency injection and life cycle of objects, soap based web services, rest based web services, and so on. So basically it covers the big topics. But in order to integrate other stuff into your EE application you will also look for a fitting binding or implement it by yourself - there is no much difference compared to the actions you need to perform on the spring side. Imho spring feels much more homogeneous as a whole. So you find much support for lots of stuff by the official framework but also lots of 3rd party stuff too.
While I do agree, that we need a fast /low overhead jvm startup and I'm also excited about the possibilities graalvm is promising, I'm having a hard time relying on tools like these to fix problems of the frameworks. I'm working on service with a rather large code base compared to other MicroServices(1000 classes and 50000 lines of code). And the web service starts in 1 second. But that is still way too long for aws lambda and where I hope Graalvm will help. And maybe, graalvm will make my Java 12 application actually run in aws lambda, which currently only supports JDK 8
You do not remember correctly
You're making all kinds of assumptions that for example Kafka can't be used. Which is, to most experienced developers, really *really* weird. So if you want some *actual* feedback you have to put in a lot more effort to explain what you think is happening, why you think it happens that way, and what you want to happen. Because the notion that Spring can't work with Kafka for example is just rediculous.
&gt; I am new in Spring frameworks. And: &gt; Just wonder why people want to use Spring since it can’t incorporate customised functions. First thing you should learn is to not jump to conclusions if you're new to something. All the things you mentioned in this thread are possible with Spring.
For questions like these you really should post on /r/kotlin, not here.
If the project has a decent amount of integration tests, you can use code coverage of only these and only classes without coverage are suspect to beeing unused. May I ask why you are trying to get rid of that code?
A decent implementation would dispatch the right instructions, whenever available. Failing that, “only runs on x86” is probably slightly better than “painfully slow on ARM and x86”
UCDetector is just an inferior version of what IntelliJ already has. It only detects unused methods and parameters, which isn't what I'm looking for.
There's a fairly in-depth discussion about method handles in native images on [this bug report](https://github.com/oracle/graal/issues/955). Long story short, it is possible. I suspect they will come eventually, it may just be a matter of the right customer providing the right motivation to get the work done.
It doesn't have enough features and some are pay walled.
Will Jakarta NoSQL be similar to MongoDB in terms of functionalities?
I didn’t say Spring our work with Kafka. I am asking why Spring when you can also just add Kafka to pure java EE framework
May I know using Spring will it be more costly in terms of hosting as compared to Java EE which can still use Tomcat; note: not TomcatEE.
&gt; I didn’t say Spring can’t our work with Kafka. You said Spring can't do Custom Functions and the only concrete examples you gave were Kafka or Camel. So you can't really blame me for coming to that conclusion. So what custom functions do you thing Spring can't do? &gt; I am asking why Spring when you can also just add Kafka to pure java EE framework I recon you don't actually have experience with Java EE do you? Why are you getting the impression that Java EE is somehow 'easier' than Spring? It's basically two frameworks that solve more or less the same problems in more or less the same way.
No Spring is not more costly than Java EE hosting. Hosting costs don't depend on what framework / library you use, it mostly depends on CPU and memory requirements of the actual application.
What if the libraries are exhausted in Spring and you have to create a functionality which is not in any library? Can you just add in pure java code and write your own small module and integrate with Spring? I mean I know Java EE can certainly do that but I have doubts about Spring. Hope someone can clarify.
&gt; What if the libraries are exhausted in Spring and you have to create a functionality which is not in any library? Then you create it. But how is that different from Java EE? I think you have some weird notion that you can't use libraries in Spring while you can in Java EE, which is complete nonsense. &gt; Can you just add in pure java code and write your own small module and integrate with Spring? Jezus. Of course.
Ok. Thanks for all the replies. I just wonder if it is worthwhile to switch to Spring...and if the learning curve is it too steep and if your site can generate money is still a big question mark...Oyeah, before I forgot, how does Spring compare to using Microservices?
Regardless, it can do UIs very well. It has a [2D scene graph](https://github.com/libgdx/libgdx/wiki/Scene2d) with [UI widgets](https://github.com/libgdx/libgdx/wiki/Scene2d.ui) built on top. It has [sane layout](https://github.com/libgdx/libgdx/wiki/Table), something lacking from pretty much all other UI toolkits. [This](http://esotericsoftware.com/) is a UI built with it. Here is a complex form in a desktop app: http://n4te.com/x/6742-sTJ1.png
but there must be an entry point unless you have some point of cyclic dependency I assume, though can be detected as well. You should provide some form of an example. This sounds very synthetic.
Spring is often used in microservice architectures yes.
We've got a swing desktop app at work that looks pretty decent. Swing has some weaknesses and could definitely use some updates, but it's definitely usable. IDEA is open source as well, so looking at that can give you some insights into making swing look passable.
You are again mixing different categories! Spring is a *framework* - a microservice is a (vague) *concept*. So you cannot compare both. You can of cource create a microservice using Spring!
It depends on the functionality, but in general it's exactly like this, yes!
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
For the mobile part: there is the Java ME specification but that's very old. I think it's safe to say that nowadays, when it comes to mobile, Java is used only for Android development and not in any other context. &amp;#x200B; In general: it depends what you want. You should maybe consider learning Java since it's one of the top languages out there and there will always be employment opportunities. The biggest PRO is that Java evolves quickly nowadays so there is always a lot to learn. There is also a huge ecosystem of frameworks and tools to choose from, together with a lot of documentation and learning material. &amp;#x200B; The CON, however, is that Java is mostly used in Enterprise enviornments, meaning that your employer won't always need the "state of the art" Java, or the latest cool toys -- there are many companies with old Java systems in place and so you may have to play with Java 6 or so (it is very expensive and risky to upgrade such systems).
Jakarta NoSQL is an API, not an implementation. It will probably support MongoDB being the most popular NoSQL db.
JavaFX with Scene Builder is nice, but if you like JavaScript you can use a framework like Electron.
For people and enterprises that love OOP abstractions and having their thinking patterns easily match what they can put in code, Java is probably one of the best options. Another is C#, but the Java ecosystem is much larger. &amp;#x200B; You don't have to learn anything you don't feel like however. It depends on your particular professional goals. &amp;#x200B; I find old Java code easy to read, and really new Java code easy to read and maintain. It's stable and it is easy to debug. It has awesome tool support. Huge ecosystem. Lots of documentation on the web. And Java code usually has the benefit where you can say "I don't understand this code" which immediately means "the code is probably badly designed". If it's well-designed, it is probably easy to read and understand. Very few languages have this property.
There's no *fundamental* reason for you to learn Java rather than any other popular language. In particular, if you already have strong experience in C, C++, Javascript, Python, and Lua, then I think you'd do better to continue honing your skills in those languages: life is short, language ecosystems are huge, and it's not wise to spread yourself too thin. It's useful to have basic familiarity with a wide range of popular languages and technologies, including Java. That doesn't mean you should devote years to becoming a serious Java developer, but rather that you should spend a couple of weekends playing with it so that it's not a completely alien world to you. You're likely to encounter Java at some point during your career even if you never use it seriously, so it's good to have at least a rough idea of how the platform works.
Okay thank you for this help I wouldn’t mind experimenting with android devices so thank you for your advice would you java is a “easy” language to get started with I already know a few languages so I’ll be fine myself. But my friend is interested in mobile development and learning how to code so do you think learning java as a first language is a good idea?
This is one of the highest-value changes for everyday development work that's come out of the pipeline for several years. Did the person who's been blocking this simple no-brainer change finally quit?
Java 6 is still very good compared to, let's say, PHP of the same generation.
So it's a specification, like the JPA?
Yes, exactly.
Java is good for building complex application - things like dynamic websites, servers (networking+database+multithreading). You can use java to squeeze out more performance out of your machine. Python is an awesome language, but it starts to choke, if your application grows bigger in terms of lines of code and complexity. For light/medium apps, it is awesome, for something as complex as a payment system, not so much. &amp;#x200B; You likely won't waste time learning java, because things like object oriented programming, is still ok. It is easy to learn and you can build all types of applications from small/medium to large even huge (like an app that runs on multiple machines). &amp;#x200B; Java makes it easier to program big complex application because: * byte compiler - makes your program run as close to machine language as possible, getting as much performance from your machine as it can * garbage collection - simplifies memory management so you focus on what your program does, not how to create/clean up variables * extensive libraries - java has a lot of libraries you can just grab and use from networking, to hosting a website, to reading/writing to database, lots of "lego-like" blocks to build your project out of * resources - you can find tutorials/guides/free tools which makes it easier to build your projects and learn the language. Don't need a phD to develop awesome stuff. * quality - java is good enough to build enterprise applications, serious people use it to build serious stuff. People use it, and it works.
I see, thanks
You are right. Indeed in future releases I'll add a lot of feature such as callbacks to the developer to add custom logic. Moreover the framework use spring and you can also add your custom rest api by using gemini services to retrieve data (entity manager and so on..). It is not a simple abstraction to the DB. An API developer can use Gemini without handle persistence at all.
I did consider the option, even if its just for the byte array handling. but looking at the project on git (prs issues) I decided not to. I would hate to put in the effort just to have the pr hang :( also to bring this on-par with vanilla java perf bc would need to be swapped out, which would become close to a rewrite.
Part of Java being so mobile is the JavaCard. Most SmartCards (not all, ofc) arent able to change their software, once it's on there, it stay's there. JavaCards have the benefit that you can load in your own JavaCard Applet as often as you want - make changes, make new one, ...
I read through the comments here and some of your other posts and I honestly think you have no clue anymore what's going on, and you're trying to do things way over your head. You need to take a step back, learn some basics/concepts first, and then break down whatever things you want to do. &amp;#x200B; \- I think you already know java syntax itself. So that's already a good start \- Then you need to learn some basic concepts. MVC, REST architecture, Dependency injections, inversion of control, integration patterns,... Start with the theory and make sure you understand the concepts before you actually try to do anything with it. \- Then you can move on to learn some frameworks. Decide which build tool you want to use: Maven, gradle,.. Then research some frameworks you might want to use: Spring, Hibernate. But again: First research and figure out why/how they are used. Then start with something simple. Eg Write a basic CRUD app with spring where you use REST, DI and Hibernate/JPA \- Once you are comfortable with these kind of things, you can move to more complex use cases. Like integration with external API's.
SWT is basically dead. It's intimately associated with Eclipse RCP, which is also dead. It was a good effort, but it failed in its stated goal: to make a Java desktop app feel native.
I have done all that except on Spring framework cos I am afraid if I were to focus all on trying out Spring framework then it is not going to bring in the $$$ them it will not be practical. I am posting question here so that I can know for sure that I am not missing out things...All those things you mentioned can actually accomplished using Java EE including Dependency injection, u just need the right dependencies like weld to make it work. Of course there are other ways to do things beside weld which is beyond this topic.
Yeah for sure. The state of Java on the desktop has been on life support for some time now.
Do Swing people still use the awful GridBagLayout manager or is anyone else using MigLayout ?
Never used GridBagLayout again when I found FormLayout. Still using FormLayout or MigLayout for everything.
You can actually write cross platform mobile apps with Java, JavaFX and gluon these days as well.
If your SWT/JFace app doesn't use CSS skinning on top of the widgets, like e.g. Eclipse's tabs do, the result is almost indistingushable from, say, wxWidgets app.
&gt; The first big thing you lose when using an ORM instead of a query generator like JOOQ is statically typed SQL queries checked at compile time by the Java compiler. I don't quite see this as being a problem: List&lt;Foo&gt; foos = foosRepository.listAll(); I lose what? Fine fine, let's write the ORM query language: TypedQuery&lt;Foo&gt; query = em.createQuery("SELECT f FROM Foo f", Foo.class); List&lt;Foo&gt; foos = query.getResultList(); The ORM query language (HQL, JPQL, whatever) is one thing, with its features and bugs and issues, and SQL is another. There is absolutely nobody stopping the ORM from using the most advanced SQL features of the database is running on. And hey, if you're lucky and for some reason you don't need to use native SQL, you can trivially use multiple databases: - development: H2 on the disk - unit tests: H2 in memory - qa: Postgresql - production: Postgresql do that with jooq.
Money. Java is the language requested the most for professional software decelopment.
Netbeans was given top tier status when it was maintained by Sun, after Oracle took over it went to the sidelines. Now that it's Apache incubation, it's like a poor orphaned child, one that doesn't even have an installer. I loved Netbeans, but moved from Java now, which Oracle killed too.
Just tried Webswing and it blows my mind that they've actually manage to make something like this work as smooth as it does :O Really impressive
This is so wrong on so many levels ... jesus. &gt; But the modern browser is a superior client-side platform No it isn't. There is nothing that the "modern browser" gives you that you don't get from any of the billion desktop technologies. Oh, yes, that huge footprint, the 1GB RAM todo list application. The advantage of the web over desktop is the fact that everyone is running the latest version, there are no update worries. You're running the browser and you're limited on what you can do, but that's fine because the upsides are that much better than the downsides. But now you're throwing that away and you're left with the worst part of the web: limitation on what you can do, running an entire browser for a shitty app and no automatic update mechanism like on the web. All pain, no gain.
It looks like in your [submission](https://www.reddit.com/r/java/comments/c2224x/amateur_java_swing_the_windows_10_high_dpi/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; The advantage of the web over desktop is the fact that everyone is running the latest version, there are no update worries. And this advantage was available with Java WebStart too! Which was unfortunately killed by Oracle without providing an alternative, but instead pointing to "self-contained executables" that have to be installed on each client…
Just used it a coupe of weeks ago to make my course work... yeah, it's still being used nowadays
Sadly, so far the track record is pretty bad on both fronts. We get features way after other languages like C++, AND they are often half-baked in comparison. So I think some process changes might be a good idea.
Using a framework that is only five years old and still receives regular security updates? *OH NOOOOO*.
Modern C++ is a dumpster fire of a language, so thank you for your input but you're wrong.
We are stuck on it until Jetbrains fixes their github indexer. On JDK8 it takes about 20 seconds to index a 2GB repo, on JDK11 it times out after 20 minutes. There is an open issue for it and when it's resolved we can move to JDK11 systemwide, for now we just use JDK11 to compile and JDK8 systemwide so IntelliJ is not slow.
Totally agreed on the Con part: people in next room are planning as I type this a new project in the quite tried and true ( :P ) JavaServerFaces 1.2 while at least two of the corporate projects I sometimes help with are built Java 6.
the init code here is getting and instantiating the Cipher instance. All the other libraries have to do the same, because you cannot static init and share the same cipher. I would be surprised also if this was the reason for the bad perf tbh.
I'm not clear on who this sarcasm is directed at? I read the link, and it's literally just survey results with no commentary or analysis, which doesn't seem to justify this kind of response.
The commentary is in every other thread on this sub that's ever been posted on the subject. People get all bent out of shape if we're not all using the latest and greatest everything.
And I will never not blame Google for forcing everyone into this "hey! new major version every 2 weeks! yay!"
Yeah I checked out their repo(s) after I made this comment and it definitely seems like activity there is... slow
Short answer: yes, definitely. Source: am supporting such an application that is actually mission critical and has been working diligently since 2013 or so.
What do you mean? Don't you hardcode paths like "\\\\&lt;your computer name&gt;\\dev\\pocs\\demo38\\config.properties" in your programs? :P
Do you have a link to the issue? I'm curious if I've been experiencing that.
I don't think it's possible due to code offuscating
I do, but i do it to specifically annoy people ;)
&gt; Many classes refer to completely nonexistent interfaces ... Some file refers to nonexisting classes and/or methods. So you're missing dependencies then? Have you google'd them? If they're common they should be on maven central. &gt; or interfaces with the name but completely different signature Not sure what this means, can you provide an example? &gt; Question: Which decompiler can output valid code? All of them, but each has its own strengths and weaknesses. Try out https://github.com/Konloch/bytecode-viewer/ It contains multiple decompliers and packages them together in an easy to use way.
&gt;what about java and node.js, I am a java developer with 8 years of experience, and I want to create some moving system, however I have been using last 2 years node.js with react, but in a big scale system I know java works just well, however what about node.js with react, will node js behave properly if I build a big system with it?
It's a dumpster-fire for sure, but for historical reasons, not for recent reasons. The features they've been adding since C++11 have been mostly well thought-out and high-impact. Of course there's other, more contemporary languages that are faring better. Both java and C++ are languages that have a long legacy of badness.
Btw.. that tweet was from 2016. All the devs I know who worked in Netbeans at Sun, moved on😭
Unsurprising: the packages reorganization did a damn fine job of breaking backwards compatibility.
I'd love to upgrade to a newer version of Java, but I'm still waiting for a supported, production version of Oracle Weblogic that supports anything newer than Java 8.
Swing was continuously improved the last years and is pretty solid these days and is used in thousands and thousands of in-house applications, and also many commercial desktop applications, commonly for specialized cross platform apps where web apps cannot be used or are very impractical. Swing is even ported to the new Metal graphics API of Macs these days underscoring its relevance. If you need to write a larger application use the Netbeans application framework, this will save you a lot of work and better structure your app. JavaFX has never been really widely adopted as a desktop API but is very good for graphics intensive work. If you need auto-updating use FXLauncher. JavaFX can also be used at small devices, such as Raspberry
Android SDK rins well only on JDK8, so it’s no choice for mobile devs.
Nah, then you haven't trained your corporate overlords properly: "But you see mr manager sir, this way, we can upsell them the machine I use since the program can't run without it and I can get an upgraded one! Win-win, right?"
right, but that is old news now. oh well.
Can you release a userscript version of Lilit? This looks amazing but I don't use Chrome. I use Qutebrowser instead which supports greasemonkey userscripts natively.
Just saying, the title kinda feels like mashing a whole bunch of buzzwords together :)
Then this is not the code which was used during the test: [https://github.com/gerritjvv/crypto/blob/5f5fc1f62885823ba448ff0d396a80510aa26b9d/crypto-perf/src/main/java/sencrypt/AesCommons.java#L47](https://github.com/gerritjvv/crypto/blob/5f5fc1f62885823ba448ff0d396a80510aa26b9d/crypto-perf/src/main/java/sencrypt/AesCommons.java#L47) ? &amp;#x200B; The Utils.getCryptoCipher does not cache it results: [https://github.com/apache/commons-crypto/blob/02e6f9efccae6ee4d57336bfb5d08271737b4e29/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java#L146](https://github.com/apache/commons-crypto/blob/02e6f9efccae6ee4d57336bfb5d08271737b4e29/src/main/java/org/apache/commons/crypto/cipher/CryptoCipherFactory.java#L146)
it is, but this the way the library suggest you get the cipher for each encryption you do, and how users will use it. Also you can only cache which provider class but not the cipher itself i.e each encryption iteration should get a new cipher instance.
Yes, yes I am. I just don't see a need to "upgrade".
But intellij has its own bundled custom version of java 8 that should be independent of whatever the system jdk is...
What ... you're kidding??? ^**/s**
I don't know about nodejs, i haven't seen anyone use it in enterprise setting yet. One benefit for java, is that you have application containers, that can share resources. I.e if you want database connection, you can have multiple instances sharing one connection. If you have node.js for every instance, that is a new connection. Scaling becomes a big concern when developing large systems. The question to "What happens if I need to accommodate more users". If you need to grow from 1000 users to 10000000, is it going to be just as easy as adding more VM/nodes into the mix. You can probably get away with using node.js if you stick a load balancer before your node.js instances. Then you can spread the load among the various node.js servers. I haven't seen people use nodejs in production for large servers though. Most of the time it is java within a container like jboss/weblogic/websphere and similar.
Please read the sidebar.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
In the same boat as you ive literally just started learning today ive been following this tutorial series [https://www.youtube.com/watch?v=P8FmdbRxX34](https://www.youtube.com/watch?v=P8FmdbRxX34)
Sorry but sidebar doesn’t state we weren’t allowed to ask others for opinions on resources on Java.
Thanks for the help I’ll watch his videos and it’s hard to learn coding when most of books/videos don’t hit on every main detail
Still? It came out like 5 years ago...
\*Arthur voice\* &amp;#x200B; I'm afraid
The sidebar says: # NO programming help, NO learning Java related questions! Your question says: &gt; I want to start *learning* coding and I decided that I want to *learn java*. Is there any books/videos/online camps that can help a beginner? Are you seriously trying to argue that this is not a "learning Java related question"? And why would you even want to ask it were when there are subs explicitly set up to answer questions like yours?
no shit.
Your forgetting that I said “I want to start learning” and “I want to learn java” I never said I needed programming help or learning questions to that matter. My question was “Is there any books/videos/online camps that can help a beginner?” So ultimately I was only asking book, video, online camp recommendations. This is the first sub that I found and I was just asking a question. If you don’t like my question then don’t answer it since the sub will delete it if there is anything wrong with my post so have a good day.
Fortunatly I am still a Student that is yet to be claimed by one of the mighty corporation
RottenCheese calm down you sound like a mom lol
As an open source developer, I’m mostly waiting for my own users to upgrade before we can start requiring anything newer than 8.
&gt; Your forgetting that I said “I want to start learning” and “I want to learn java” No, how could I forget that? That's precisely what makes your question off-topic here. "NO learning Java related questions", remember? &gt; This is the first sub that I found and I was just asking a question. In general, it's useful not to just post your questions to the first sub you find, but to check first whether the sub is actually appropriate for your question. &gt; If you don’t like my question then don’t answer it I don't really have any strong feelings on your question. It's simply that it's off-topic here. I did answer your question by pointing you politely to the sidebar, which links you to subs that will be only too happy to shower you in Java learning resources. &gt; so have a good day. And the same to you.
I'm pretty sure they were asking which JDK you're using to develop your applications, not which one you're using to "host" IntelliJ. I'd say Java 8 is currently what anyone should use to run IntelliJ, or better yet, just use the version with the pre-packaged JDK as that's what it's going to run best with anyway.
I like how you’re avoiding my real question which was just asking book recommendations. Like I said if you think this is a big problem the sub will delete the post like it states in the side bar. Have a good day once again.
lol you need some flair up in here :)
Don't know why are you down-voted, because it's true. It's [possible to change it](https://intellij-support.jetbrains.com/hc/en-us/articles/206544879-Selecting-the-JDK-version-the-IDE-will-run-under) though, but usually nobody cares.
&gt; you sound like a mom lol Thank you for the compliment, but it's undeserved. Most mothers I know have better things to do than arguing on reddit, and I'm *definitely* not selfless enough to change OP's diapers.
I've written 3 throwaway prototypes with Vaadin. Final product was something else for various reasons (in-house knowledge, job market, scaleability, etc) I found it pleasant to work with as long as you didn't try fight it. For example, I did tried to fight the styling once, and then gave up on trying to make it exactly like I wanted and went with good enough. However, since I've never gone to production or had to deal with actual users' feedback, you have more cred than I do.
RottenCheese I am going to ask you to log off and come back tomorrow because you sound like a fool and was that supposed to be funny or an insult because you accomplished neither of them. Talking about mom's I think I'm about to meet up with y.... never mind
Haha, good one! Mostly working with 7 and some 6 here!
But I did upgrade one project from 8 to 11 today. (And in the morning I worked on a Java 6 App running on JBoss AS 5.1...)
&gt; So you're missing dependencies then? Have you google'd them? If they're common they should be on maven central. Definetely no, as the names are from aa to az. So let's say the class `gX` implements the interface `oN&lt;fN&gt;` but in the decompiled code, `oN&lt;fN&gt;` doesn't exists. There is an `on` interface (which is indeed an interface) but it has a totally different signature. Some forum mentions this code incomplete as the decompiler doesnt know the newer Java features. Obsfucation should only change the names, not completely rewire the code into a state that is not compilable.
Today I waster few hours on a xml parsing bug in JRE 11, good old 8.
Well, from what I have seen there's a few overloaded functions with defaults that telescope and one "main" function that actually does the job. I'm not sure how much more "scaling" you would want, it would be nice if defaults could be similar to how they are in Kotlin/Groovy/etc. but yeah, it is possible and I think it is better to have it in one place, where the function is defined, rather than N places in call sites. I'm not sure how `Optional` parameters solves that problem, but overloading should solve the problem of having `Optional` parameters, which is imo a problem, especially without overloading. I fail to see what value an Optional parameter would add.
&gt; Like I said if you think this is a big problem the sub will delete the post It's people like you and attitudes like this that led to this rule. You're asking the same thing that has been asked and answered **a thousand times** before, so much in fact that a dedicated subreddit was made. Both /r/learnjava and /r/javahelp contain aaaaalll the resources you need. Read its Sidebars, FAQ, and perform a search for "book" or "video". Hell, you could even [search this very sub for the same thing](/r/java/search?q=books+videos&amp;restrict_sr=on&amp;sort=relevance&amp;t=all), too.
money
Several things wrong here: + wrong subreddit. /r/learnjava is for such questions and the **sidebar** there contains a wealth of free trusted and tested learning resources + your attitude: you are no special snowflake that's entitled to anything. You, like everybody else here, have to follow our rules. You are wrong and your arguing only makes you look like an immature entitled teenager who is used to get everything handed on a silver platter and fed by a golden spoon **Removed**
IDEA-205272 Our repo is over 2GB in size and IntelliJ log reports that github plugin timed out while indexing after 20 mins. I am not sure why the plugin is not using the internal JRE.
Programming help goes in /r/javahelp. **Removed**
/r/androiddev **Removed**
The plugin for some reason is using whatever is configured as the JRE to be used by project. So when I confugre the project to use JDK8 it takes like 20 seconds, when I configure project to use JDK11 it times out after 20 minutes. Hence why there is an open issue for it.
Of course, I mean JS web layer with Java backend. Or keep fighting the inevitable
I'm not sure what the userscript is exactly. I roughly remember it's a javascript code that user writes in order to modify the webpage. This would be interesting to support. Our browser extension is written in Scala.js and open-sourced here: [https://github.com/tanin47/lilit-browser-extension/tree/master](https://github.com/tanin47/lilit-browser-extension/tree/master/dist). The generated JS code is in the dist folder here: [https://github.com/tanin47/lilit-browser-extension/tree/master/dist/lilit-browser-extension](https://github.com/tanin47/lilit-browser-extension/tree/master/dist/lilit-browser-extension) I'll research more about it. Qutebrowser is an interesting browser for me as I use vim heavily. If you have any tutorial to share around userscript, please feel free to do so.
Thanks, will have a look
Can confirm, perfectly happy using 8.
My condolences to those still on Java 7 or 6. You're the real heroes, keeping your business afloat.
I can't even get above Java 8 for Aws + Tomcat.
This is 1; Not Android dev, because it's not Development, and not Android. 2; The APK is only the container, since I extract the DEX file and turn it into a JAR, it is now Java "development". I decompile that JAR itself, not the APK (which still holds Java executables). &amp;#x200B; Since the question doesn't involve anything with the Android OS or Android Framework, but decompiling Java classes (which happens to be stored in an APK, but again: it doesn't change anything), IMO it's Java related topic. If I would name the post "Decompiling JAR" it would be the same. The process has nothing to do with the container (JAR or APK) and it is directly asked decompiling java classes.
It's good practice, keep doing it. You'll learn a lot faster.
No. Though there is an obsession with whiteboard questions among large companies.
Glad to hear that. Thanks!
This is why I was asking. Wasn’t sure if I am supposed to be able to write code without any help haha.
Stop it right now. Right all your code on a piece of paper; OCR it then compile it. Print out a hard copy of the Java API specification an memorise it! How else will you be a good coder! Don't use productivity tools. &amp;#x200B; Sarcasm aside; using your tools well is always good. IDE etc. I find that really large code bases are hard to navigate without tools such as IntelliJ. Not impossible, but hard. I'd only worry if you're relying on it for classes you use over and over again. As you should generally hold a working set in your head as your programming.
😂
They're there for a reason. you will never get anything done if you don't use them
I'm not fighting it. But there is certainly use cases for non-web apps like utilities.
I have a diff point of view. If you use the IDE to navigate through classes, I think its fine. If you're doing 'ctrl+space drive development' and trying to make it work by brute force, I'd say drop it and use the good old days of text editor + javac + online javadoc if you need info on some specific classes (and try not to resort on StackOverflow too quickly or too much). But that is just me and the advice I'd give to my son (if he wasn't a 8 months old baby)
If this was supposed to be funny...it's not.
You're a niggеr
There are some fields that Java is pretty big in: * Server backend, e.g. Spring framework, Jakarta, application servers, ... * Business applications, e.g. Health, Government, Finance, B2B, ... * Clustered computing, e.g. [Hadoop ecosystem](https://hadoopecosystemtable.github.io/), machine learning, ... * Embedded systems, e.g. IoT, ATMs, public transport displays, set-top boxes, ... * Mobile, e.g. Android * Development Tooling, infrastructure / system tools, e.g. Jenkins, SonarQube, application servers, ... * Science applications Some less common areas but viable: Desktop applications and Games Some links: [Akullpp](https://github.com/akullpp/awesome-java)
It depends on what you are 'relying' on it for. If you are relying on autocomplete to think for you and help you figure out what method to call, then I would call that bad practice. If you know what you are doing and simply use autocomplete as a convenience to let you easily pick what you already knew you were going to type, then I would call that efficiency.
We tend to use only the ones which are useful to us. For example, 16 added better support for JDK 12 but 17 did not add anything interesting for us. While using that delivery model (like Java every half year) there is no chance to manually do the whole process each iteration. A best practice is imo to migrate everything to a container solution like Docker and just increase a variable somewhere like WILDFLY_VERSION = 16.0.0.Final to WILDFLY_VERSION = 17.0.0.Final in a `Dockerfile`. It also simplifies their Ops Job by only requiring to install `Docker`. You said, that they need to buy a change from you, but this should not affect your internal delivery pipeline. You should always compile your project against all major required platforms like JDK 11/12/13. Maybe they added some breaking changes for your project which you should adopt sooner or later. If your projects require different dependencies you can opt for Maven Profiles to switch them out for the "future" branches.
Good not-so-ol java 8. Gotta say that backend is not a good place place to so often version migration and sticking to LTS only is my strategy to 'keep up' with changes. The other side of problem is that there is still misunderstanding of how new licences work.
We upgraded from java 6 to java 8 only 2 years ago... We ran into an issue in production recently using the experimental G1GC in Java 8 causing VM failures when trying to deserialize things. Took me like 3 days to debug. In the end I am still not totally sure what the issue was but I assume the G1GC would GC objects that should not have been collected yet when deserializing. I was able to reliably reproduce the problem with java 8. Switched to 11 which has G1GC as the default and no more issue. So we should totally upgrade right? Only issue, our department is given leeway in still using Java 8, but if we move to java &gt;8 we would need to totally redo our entire legacy build pipeline so that's not happening anytime soon :'( I wish we would, but there is no way we will get the time allocated to upgrade until someone way higher up than me starts making a fuss about it.
It is extremely good practise to utilize your weapon of choice to the fullest extent of its capabilities.
Still??? Already!!!
And I'm on that 0% stating "other" because I'm the poor soul still maintaining legacy 5 systems.
Java 5 on Websphere 6 here
RIP
Don't worry, autocomplete is your friend, and with the most commons classes/methods you will have things memorized without even noticing.
I tried upgrading to 11 once. Ran into some module issues with a couple of pre-Java-9 libraries we use extensively in our application, then set it aside to work on later when I have ample free time to fuss with the runtime environment instead of solving business problems. Yeah, I know you can turn off parts of the module system for backward compatibility, but if my understanding is correct, that option will disappear in a future Java version. So we're going to have to do the work at some point. The other thing is that we've mostly switched to writing new code in Kotlin, which makes some of the changes in 9+ less interesting to us. The biggest specific thing we'd probably take advantage of is the new HTTP client. Project Loom will probably be compelling, though; we'd definitely take advantage of that. I'm genuinely happy for people building apps with bundled JREs who can now easily distribute much smaller binaries. The module system is clearly a major win for them. But for those of us on big-metal servers where changes to the size of the JRE are barely even measurable noise, Jigsaw seems to be, "Hey! Do a bunch of extra work migrating your legacy applications for absolutely no benefit whatsoever."
yeah that is what I've seen to in large enterprise environments.
I’m all for competition. The winningest ui framework emerges from the field of pseudo-declarative markup languages though. I’ve been tracking the field for 15 years - https://paulhammant.com/ui-markup-nirvana/ - Flutter is currently winning (compiled) having taken the leader position from QML (interpreted). There’s ways that Swing could be made that’s like that, but it never happened - Sun then Oracle put the spotlight on javafx, and I never really counted that.
\&gt; can lead to Thread Starvation whereas Reentrant Locks lead to better interleaving Are you referring to fairness, ergo that the native synchronization does not provide any guarantees regarding thread ordering, while various \`Lock\` implementations provide optional fairness (first come, first serve) for threads? If yes, don't bother. Lock fairness is a rather obscure feature that has a very high throughput cost when contended, and if you do not \_need\_ exact fairness all the time because of semantic reasons, you probably should not care about it too much. Should you think about it? Yes. Think about it and then use a non-fair lock if possible. Instead, your choice should be based on semantics. Citing Java Concurrency in Practice, 13.4, "Choosing Between Synchronized and ReentrantLock": \&gt; \`ReentrantLock\` is an advanced tool for situations where intrinsic locking is not practical. Use it if you need its advanced features: timed, polled, or interruptible lock acquisition, fair queuing, or non-block-structured locking. Otherwise, prefer \`synchronized\`.
I am not talking about how many times a bootstrap method is called, obviously. You do realize that what linking does is to waive a call site to an anonymous lambda factory method of an anonymous class. Tha lambda factory (not LambdaMetaFactory) can either return a cached instance of a lambda or must always create a new instance of the lambda depending on what scope is accessed on the lambda body... You certainly don't want new lambda on every factory method invocation. I do not think scalarization in C2 can handle that scenario well, otherwise there wouldn't be such a performance drop...
We're using JBoss EAP (built by us from open sources) which is \~\~ Wildfly until sometime later this year where we'll migrate to SpringBoot + Jetty
Thank you. Another offshoot question, if you could please weigh on: &amp;#x200B; What are a couple of scenarios where one would favor Interleaving?
Sorry, I am talking about the stage after your analysis. That is way after LambdaMetafactory does its job, obviously. I will repeat just for brevity, you ac check my answer to pron98. Lambdas with an access to some variables from the outside scope (like method body or instance fields) cannot be cached, for that very reason. You have to allocate them anew every time for that very reason. Just to be sure, I am talking about the stage after anonymous lambda factory was created and the factory method was linked to the call site....
Use it as your wish, it's there for it. Just keep in mind that if your are about to do a paper assessment, job interview or certification assessment you are supposed to know stuff that most IDEs takes care for you. In this case my suggestion is to use Notepad++, compile and run your code using console (you will learn a new point of view about how things happen in IDE background and why)
Yes, but that's still at least as efficient as anonymous classes (usually more because of caching of non-capturing lambdas), and so better than what you could do in Java 7 (that was your claim, which I think you have since edited). Scalarization depends more on streams than lambdas (i.e., it's not that C2 can't scalarize lambdas well, but that there are issues with inlining in streams in general; Graal does a better job on streams than C2).
Wrong issue number or something.
Because time is running out on support: [https://dzone.com/articles/when-will-java-11-replace-java-8-as-the-default-ja](https://dzone.com/articles/when-will-java-11-replace-java-8-as-the-default-ja) &amp;#x200B; &gt; At the moment, **Java 8** and **Java** 11 are the **LTS** (long-term support) versions. The end of public updates for **Java 8** is scheduled for January of 2019 for commercial use. For non-commercial use, the same is scheduled at an unspecified date in December of 2020.
Learn then young padawan, the trick is not quality of coding: it's how to manage your manager :)
IMHO, the usefulness of a DSL/markup for UI is limited. Very often with a complex UI, portions of it are dynamic. Eg, sections A, B, or C are optionally shown based on some state, or you have a table or other container that has items added by code. The DSL can describe the main structure and then code can fill in the rest, but this ends up being awkward. You either mix DSL with UI created by code or fragment your UI into many small bits of DSL. When a large portion of the UI is built by code, the DSL no longer makes sense for the minimal remaining structure. At this point you are back to a code API and would have saved time if you had started there. Also refactoring is more difficult when using a DSL. The downside to constructing a UI using code is that code is flat while UI layout is a graph. This is mitigated by good APIs and code organization. Some languages can make UI code look almost like a DSL, but even for those that can't, a good layout API is possible. DSL vs code aside, the most important part of building a UI is how layout is done. There are a number of other ways to mess up a UI toolkit API, but layout is what nearly all UI toolkits get wrong. With a bad approach for layout validation works and poor APIs for creating the actual layouts, using the UI toolkit is terrible. I haven't used Flutter, or even looked at it until just now. It's a code based UI and Dart let's it [look like a DSL](https://github.com/flutter/website/blob/master/examples/layout/lakes/step6/lib/main.dart), which is interesting. That indentation is brutal though. Mixing creation with layout obfuscates the layout. I greatly prefer separating UI into 3 sections: creation, layout, and event handling. It looks like doing this would be possible with Flutter, so that is good, but not doing so in examples isn't good. It's hard to evaluate Flutter's layout containers without doing more digging than looking at that one file, but it doesn't look terribly intuitive at first glance. Layout constraints need to be simple enough that how it will behave can be visualized by reading the code, which is why I'm a fan of tables. I can barely read this layout code, but that may be from the mess of mixing creation with layout.
First off, I haven't edited anything in regard to my comment about Java 7. In regard to Java 7, I said the ground work for lambdas was already there, namely invokedynamic. Please do not reword my statements. Thank you. Scalarization is affected by the type of escape analysis this and that compiler can do. I am saying that dynamic lambdas in combination with Stream API are the worst case scenario for C2. Please read my initial post in this thread. Under normal conditions, I admire your work a lot but have to say, I am a bit surprised by your argumentation here.
One of the projects I help out on still has some old websphere with JDK 1.6
Depends. If you're in a class and they are going to quiz you on that material, it is best not to autocomplete because you probably won't remember it. If it is something that'd come up on a job interview, then maybe that as well. At the very least understand what it is doing for you. Otherwise, I don't see an issue with it.
one thing I cannot seem to find is an Action to introduce a local variable from a highlighted piece of Code. eg for "new ArrayList()" the Action should produce something like "List&lt;?&gt; list = new ArrayList()"
You need to change it to their jdk11 if you want to have plots in jupyter notebooks shown in IntelliJ.
Your explanation, besides the direct quote from JCIP, does not make much sense. It appears to be an opinion not substantiated via a rational background.
CMP EJB FTW!
Wildfly in production. Upgrade quarterly.
Your thread is downvoted because you’re the dumbass. Read the subreddit sidebar. This subreddit isn’t for programming help
&gt; So let's say the class `gX` implements the interface `oN&lt;fN&gt;` but in the decompiled code, `oN&lt;fN&gt;` doesn't exists. Is it possible that there are multiple `oN` classes that are spread across multiple packages? Typically you would do fully quantified references in the source code, like `com.whatever.oN` vs `org.other.oN`. The decompiler could have failed to differentiate the uses in this case. &gt; There is an `on` interface Different capitalization is intended here right? What are the fully quantified names? _(see above)_ &gt; Some forum mentions this code incomplete as the decompiler doesnt know the newer Java features. Which decompiler did you use?
Go fuck yourself if you don't understand what the Java sub is for. This was a Java question and I am sure you wouldn't know one if it leapt off the floor and grabbed your vagina.
OP's post is deleted so i'm not exactly sure what he said, but surveys like this are inherently flawed as they don't document any sort of procedure, discuss correlations, etc they attempt to absolve themselves of the flaws by avoiding commentary, but the numbers themselves are worse than nothing
I disagree. Using autocomplete makes the libraries you use discoverable. You will see methods that you may not have known exist! Use it to learn! Use it to be productive! Not using the IDE doesn't make you smarter. It does the opposite. You spend more time to learn the APIS you use, and you never discover new features you can use unless you take the time and effort to go look it up (which you won't do as often as you will see autocomplete). Autocomplete isn't a crutch, it's a productivity booster.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The comment wasn't about the survey itself, it was just some snarky nonsense implying that somebody -- JetBrains? the person who posted this? -- was somehow mad about the result or something.
r/Kotlin is the way to go. &gt; on JDK11 it times out after 20 minutes Hmm, why am I *not surprised* that JetBrains is slacking off on fixing this....
Just be thankful you have type safety. **cries in php5 using kohana v2, which hasn't been supported in a decade**
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; The other side of problem is that there is still misunderstanding of how new licences work. This topic has been beaten to death for months now. Anyone who is still confused or has a misunderstanding is willfully living under a rock. TL;DR: If you get your OpenJDK binaries from Oracle, you owe Oracle money. If you get it from someone else, you don't. The end.
This survey is very useful. I am starting to publish [Open Lowcode](https://openlowcode.com/), an open-source low-code framework, and I am wondering if I should drop java 8. It looks like I should continue with java 8, right ? &amp;#x200B; By the way, if you need a library to generate PDF in java, have a look at the [Open Lowcode PDF on github](https://github.com/openlowcode/Open-Lowcode).
Lambdas are actually very useful to write compact code, and I have found the functional programming paradigm to be very helpful to write modular code. I think I took less time to get my brain rewired to think functional 5 years ago than the transition to understand object when I moved from C to java 20 years ago. To be clear, it is not systematic, but I think that I use lambda a few times every 1000 line of code, and it proves to be very helpful in those situations.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
How do you guys deal with (optimistic) locking ? (assuming you have update calls you can't get rid of) I see the following options: * no optimistic locking: lost updates not prevented or noticed. Since you can read stale data and won't notice your validation logic will fail to prevent some invalid modifications like canceling an order twice. Unacceptable for these kinds of entities. * optimistic locking without exposing the version field to the client: you fail when concurrent transactions update the same entity, but you don't prevent lost updates from the client's view if the state they worked with has become stale since another transaction updated the entity in the meantime. However, you fail when your validation logic works with stale data. * optimistic locking exposing the version field to the client. Like above, but you also fail when the client's state of the entity is stale. * pessimistic NOWAIT locking: you fail faster than with only optimistic locking. Easier to provide better error messages than handling a StateObjectState exception you get on commit. Needs extra code to lock and handle the locking acquisition failure. If combined with optimistic locking with exposed version field you can also fail on client working with stale data. * pessimistic locking allowing longer wait times: by waiting until the other TX finishes you can prevent optimistic locking failures. You need to make sure you refresh stale entities in memory once you acquire the lock. Long transactions are horrible for performance. Am I missing any options? Do you use the same strategy for all entities?
&gt; Is it possible that there are multiple ... Maybe, but I tried to look for the oN&lt;fN&gt; interface, but haven't found it. Neither could the IntelliJ &amp;#x200B; &gt; Different capitalization is intended here right? What are the fully quantified names? *(see above)* Yes it is intended. The given `gX` class and the `on` interface was in the root folder with no package defined. &gt; Which decompiler did you use? Procyon decompiler. I tried JADX too, but it leaves out and emits a lot of empty files. Procyon could emit much more, but as it looks like even this has it's limitations.
If the check is a single comparison, do the check. Otherwise, try-catch. For example, I will check for a zero divisor before division. The more complicated the check, the more likely it is that you will make a mistake, and it’s better to rely on try-catch.
&gt; optimistic locking exposing the version field to the client. That's the way to go. About stale data on the client, that can always happen. Right after you load an entity, some other transaction can update it, so you are always simply viewing a snapshot of data as it was when you loaded it. However, when you come back writing data back to the DB&lt; it's then that you can detect the lost update and fail your write. The only way to address this issue is to retry your flow.
In this case, the JDK performs already a check by trying to parse the string into a number. Generally, it's better to not reinvent the wheel. You should check accordingly the function contract (eg. Object in parameter must not be null). So I'd say error handling. But it's common (if it is not always the case) that an error (exception) is thrown for prevention. That was my opinion. I'm not an expert.
The general guideline is to prevent the user from creating mistakes as much as possible. This may come in various ways, one of which could be in the form of input validation. In your example, you could opt to check the input whether it matches your expectations. This allows you to ensure that you only have the “happy path” going through your method(s). But in more complex applications, these expectations or rules may not always be clear at the start of development. Hence, it is always a good practice to do validation AND make sure your app can handle exceptions/errors as things could sometimes still pass the validation stage. However, do not, I repeat DO NOT ever use the try-catch as a form of logic/flow control. If a scenario is truly invalid or error-causing, let it fail (stop that particular piece of code from executing) but fail gracefully (do not let the app crash and lose important data).
Thanks.
Thanks for this good answer.
"Most of us" I hate being this kind of guy on internet, but such survey has zero statistical value and doesn't represent "us" very well. When people decide to make part of a sample voluntarily, the bias of the sample is huge and therefore it cannot be used to infer anything about the population.
I mean, duh. IntUnaryOperator a = getAdder(3); IntUnaryOperator b = getAdder(4); Here, `a != b`, obviously. `IntUnaryOperator` is an interface, so those are objects that need to be specifically allocated. You end up with a single allocation, which is the best you can do. In case you haven't noticed, `getAdder` in my previous example actually is capturing a variable. `a` isn't a lambda parameter. As for optimizations, lambdas are essentially interfaces, so all [optimizations for virtual calls do apply](https://shipilev.net/blog/2015/black-magic-method-dispatch/).
There is no simply answer here. In general in whatever user interface you present you want to only allow users to input valid information. So if a field requires an integer it doesn't make much sense to even let them type non-integer characters there. On the other hand; when you're building an API you have a developer on the other end that is your user. You will still have to validate the input there, but since generally you can expect them to be pretty tech-savvy you should expect bad input to be an exception. So there it's more common to have some kind of validation library check input that just throws exceptions, and then present these exceptions in a JSON format with a BAD_REQUEST status to the user of the API. So this depends on the user and the type of user interface.
Catch the NumberFormatException. If you try to check the input first, you’re effectively duplicating the code in the number parser and might get it wrong. So just go ahead and convert the string to an integer and let the converter tell you if the input was wrong.
As a dev you're paid to add value, not to type. So use whatever tool that lets you be more efficient. I haven't seen a single Java dev who disabled the autocomplete. And yes you can totally write a complete application without an IDE: it will just take a lot longer because you'd be constantly looking up method signatures in API documentation.
Thanks. Yes I am creating an API. I will try it with JSON
Just judging by your comments - seems like you have problem with `github plugin` not with Intellij IDEA. If so, I would not say that some 3rd party plugin is that important. Just don't use it. Problem solved.
Well, you are right, I haven't noticed, I've overlooked that one. But I don't see how your argument about optimizations of virtual calls invalidates my argument of lambda allocations. My argument against lambdas is based around the allocations of new instances. You still have to allocate. Yes you could cache the lambda by hand as you did. But that is not how people usually use Stream API and lambdas. Or you could create an anonymous class, create an instance of it and cache that by hand too. What is the difference?
What framework are you going to use?
I reworded my answer a bit for clarity, and added a second JCIP quote related to fairness. Does that answer your question now?
Oh right, I was going to mention that, but I forgot. Essentially, with [escape analysis](https://en.wikipedia.org/wiki/Escape_analysis) optimization.
Really? Are you so sure? If that is so, there probably would not be such a speed improvement for the very same bytecode on Graal compiler vs C2, wouldn't it? You know, even that Shipilov that you so often link, called out the Graal team for creating reneissance benchmark to show off this opto in Graal. &amp;#x200B; You can read it here for your self [https://twitter.com/shipilev/status/1126551356985237504](https://twitter.com/shipilev/status/1126551356985237504)
When validating inputs, is it like a form if anti-pattern if I utilize custom exceptions instead of returning Integer based ot sting based error code?
Well, not really. The more boring answer is “it depends”. Error codes (or numbers) used to be the norm back then (e.g. DOS errors, BSOD errors, HTTP error codes). But as enterprise applications become more and more complex, devs probably* realized that’s it’s becoming hard to debug and maintain. It’s always preferred that you (a) designate a name or code for you error and (b) make it understandable by itself except of course if you shouldn’t for security reasons. So far in my experience, I’ve seen custom exceptions used more often instead of error codes. Most if not all OOP languages support that anyways. Bottomline, you would like your exceptions to bubble up, but do not let your user to see the ugly error information/code (see how Windows and Chrome throw user-friendly error pages). But if this is just a console app or anything simple(r), might as well just stick to anything that works for you. You don’t have to over-engineer it. Follow the “YAGNI” (You Ain’t Gonna Need It) principle whenever in doubt. * I said “probably” because I have no source for this. But to me it seems that that’s the logical reason. Another possible reason is that we’re no longer that worried about the memory we’re consuming. Back then, you have to conserve every last byte your program uses. Though, I’ve seen a few embedded applications that still use integers and error codes in the past couple of years.
I wanted to highlight that dealing with SQL strings is cumbersome. And there also Spring JDBC will not help. QueryDSL is currently not maintained.
Using Wildfly in production, and trying to keep up with updates. If you update all the time it’s small increments, and less work per update. If you’re able to fix the occasional glitch this works well. If you need more stability, obviously use EAP. As someone else mentioned, it’s still OSS, so you can self build it. But being too cheap to get the support is, I dunno, perhaps penny wise pound foolish.
I'm the author of the blog post and I'm not affiliated in any way with jOOQ.
It looks like in your [submission](https://www.reddit.com/r/java/comments/c2eupb/standard_pattern_for_authentication_in/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I upgraded my first product from 8 to 11 just 2 weeks ago but I know many of our systems will be stuck on 8 for the foreseeable future. The only reason I made the leap to 11 for a couple of things is because they are fairly new products and it looks like the community is sort of settling on 11 as being a version that will get support for a long while.
 Java applications can be remotely debugged by following these two simple steps: 1. Pass remote debugging arguments to JVM 2. Configure IDE [https://blog.fastthread.io/2018/10/17/remote-debugging-java-applications/](https://blog.fastthread.io/2018/10/17/remote-debugging-java-applications/)
Still not entirely correct. If you use Oracle's OpenJDK build, you owe them nothing. If you use the Oracle JDK in production, you owe them money.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
If building an API and using a framework like spring web/webflux you can just throw exceptions and handle it in an exception handler, returning a preferable response to the client. On another note, those frameworks normally also provide some sort of input validation (@Validated annotation for example) which throws some sort of ConstraintViolation. We generally just throw exceptions, makes our code simpler and as others have mentioned not reinventing the wheel. The only time we prematurely catch an exception is if we know we can recover from it, for instance some of our services have multiple data sources, so if an exception is thrown from one, we catch and try the other.
At first, I'd analyze a website for CMS it is. If I were you, I'd check a website that I am working on at [https://sitechecker.pro/what-is-cms/](https://sitechecker.pro/what-is-cms/). CMS identification is very important for content optimization. If we talk about Magnolia CMS, it is that I always use to manage my website. I mostly test it with blogging or news websites. The first tool is used for other types.
 It depends. In your specific case, there is no point in writing your own parser (which is what you would have to do to properly validate the input as a number) so you might as well rely on the Java string parser to figure out if the string is valid by catching the NumberFormatException.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Wrong thread?
Try [https://blog.gceasy.io/](https://blog.gceasy.io/) . I found it very much helpfull.
Why should you not use exceptions as flow control? Skip the performance reason, as this is simply a peculiarity of Java (it generates stack traces by default). This can be easily mitigated by pre-constructing the exception.
Add this dependency: &amp;#x200B; `&lt;dependency&gt;` `&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;` `&lt;artifactId&gt;commons-text&lt;/artifactId&gt;` `&lt;version&gt;1.6&lt;/version&gt;` `&lt;/dependency&gt;`
Semantic and readability reasons. Try-catch blocks are meant to catch exceptions (hence “catch”). They are not if’s. They’re meant to jump out of the normal call stack because they are “exceptions” - what you’ve caught shouldn’t even happen in the first place. (If I recall correctly, try-catch is very similar to GOTO under the hood but that’s not really my point here). When you use try-catch, you add a lot of noise in your code. You mix business logic with error handling. Your method or class does a lot of things (ever heard of SRP?). Soon, it would be hard to follow as you’d also probably have other control structures in these (if-else, loops, etc). Of course, it may not be daunting at first. But believe me, when it gets sufficiently large, leave it for a few months and come back to it. Code should be written as succinctly as possible and as easy to read as a normal English sentence. If you have ever read “Clean Code” by Robert “Uncle Bob” Martin, you’d probably find the same advice. He explains it a lot better than I could. You’d also find a lot of other articles and books that says we should try to use try-catch sparingly. But of course, as with anything in software development, [nothing is a silver bullet](https://en.wikipedia.org/wiki/No_Silver_Bullet).
I guess it depends on how it's used. Back when I was in college, I was fed up with other grad students just hitting ctrl + space over and over until something that resembles something that might be useful appears and them running and smashing face on the wall. Basically trial and error with little reasoning, whereas I think it would be more useful to stop, read the API's (or at least glance the short descriptions) and reason from there. &amp;#x200B; But that is just my personal experience with it all at the learning stages
Yeah, I’m fairly familiar with all the standard advice, but I think this particular point is not usually justified well. I don’t necessarily disagree but I’m trying to construct better rationale. As to your point about GOTO, I think they are actually quite different. Essentially Java checked exceptions are a weird form of sum types and pattern matching, which is a common pattern in functional types. When you declare a checked exception, you are essentially saying that a particular method can return at least two types. And the languages
See AdoptOpenJDK.net for your long term support needs 🙂
&gt; try-catch is very similar to GOTO Exactly, with the added benefit of being controllably non-local. Using exceptions for flow control is as much a stylistic decision as using `goto` is. Ocaml, for instance, uses exceptions for flow control as a matter of course, and because of this they're really low overhead. &gt; “Clean Code” by Robert “Uncle Bob” Martin The finest example of cargo-cult programming ever committed to ink. We can do better than appeal to authority.
About the cargo-cult, yeah I’ve been worried about that too. The book is old and a lot of things have changed, but I think one could still pickup few useful bits here and there. Doesn’t have to follow it like a law though. PS: can’t use quote; on mobile. Anyone knows a better reddit app than the vanilla one?
&gt;When you declare a checked exception, you are essentially saying that a particular method can return at least two types. And the languages I've never thought of it this way, but you're right. I'm now \_sure\_ there's someone super clever somewhere who discovered this and decided it would be a really "cool trick" to use, and has built a huge system around where exceptions are used for normal return types in the application...
Although the title suggests that this is a comparison between languages, it is more like an ad for Kotlin.
A userscript is essentially a lighter version of a chrome extemsion. It is just javascript which is injected into the page by the UserScript manager (which is usually a browser extension, such as GreaseMonkey). If all your chrome extension does is inject javascript into the page (which it appears to do), it can likely be effortlessly ported to a userscript with just a few API changes. Look up GreaseMonkey to find out more about userscripts.
Let's make a few things clear to you: + your conduct and inappropriate language are absolutely unacceptable + despite you claiming that you wanted to raise a discussion, what you are asking is about *Java programming* and hence **off topic** here Consider this a warning. Next misbehavior or misguided post will earn you a permanent and irrevocable ban from here without further ado. **Removed**
Suck on my dick.
Like all other similar posts. Are people paid by JetBrains or something to spam reddit with kotlin?
&gt; I'm now _sure_ there's someone super clever somewhere who discovered this and decided it would be a really "cool trick" to use, and has built a huge system around where exceptions are used for normal return types in the application... ML! In Standard ML, all exceptions are *values* of an open *type* that gets extended every time you declare a new exception. In Ocaml they went a step further and added open sum types as a first-class construction, so that they and exceptions are interexpressible (or at least, interencodable.) The dual to exceptions as an open *sum* type are classes as an open *product* (i.e. record) type; again in Ocaml this duality is baked in.
You can use JBoss EAP if you build it yourself. Code is open sources. Commercial license is for JBoss EAP binaries. https://github.com/hasalex/eap-build
Always prevent over handling. But sometimes there are cases you cannot controlled like user input, 3rd party service or and external library.
Yes I know it's better to force a number input but if somebody is using it as an api and is calling it from his script you can not control his input. That's the problem
I recommend some kind of regex pattern for validating that the input consists of only numbers, and probably a check that it doesn't have 0 as its first character unless it is actually just 0. It's in general better to validate the characters of the kind of format you had in mind, than it is to allow whatever Integer.parseInt lets through, because what it allows may surprise you. Eventually you need to pass the String to that method as well, but by this point you've already validated most of your assumptions.
Yeah - I'm with you - I don't want to hear about Kotlin. I can go to that forum if I need to.
I haven't thought of that but I definitely will try this. Thanks.
Bit of a shame the Add() function is O(N) in the worst case. Otherwise it’s a nice double linked list with insert at a used point in the list.
It looks like in your [submission](https://www.reddit.com/r/java/comments/c2i58l/is_anybody_familiar_with_velocity_macro_and_java/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
In college we did a project involving adding features to a really bare-bones web browser. This is very similar(if not identical) to the logic needed to do the Back and Forward navigation buttons. I did it using 2 Stacks which meant I didn't really need to worry about linked lists, but I think this solution might be better.
I actually like it. With the pace that Java is evolving. When I go back to those versions, everything just seems... Familiar.. lol
I think it is better to use an example, especially the example that Josh Bloch used in Effective Java when he gave this advice: int[] vals; int sum = 0; int = 0; try { while (true) { sum += vals[i++]; } } catch (ArrayOutOfBoundsException ex) { return sum; } In this case, the exception caused by the index going out of bounds is used as the termination condition of the loop, thus the exception is being used for flow control, essentially as a goto statement to exit the loop. Using exceptions for flow control, instead of proper control variables with high level flow control structures (like loops), makes analyzing the program flow much more difficult.
Basically it's a question of "fail fast". If at all possible, you want to stop doomed operations as soon as possible. Error prevention is essentially realizing the operation is doomed and to fail immediately. Error handling is finding out that the operation is doomed (you couldn't write to a file) and then getting yourself out of the situation as soon as possible. In your case, there's pretty much no difference, if you are parsing the integer values before you do anything.
I'm messing around a lot with the words in the readem. Would this be a data structure or an algortihm?
Thanks! Yes since its a double linked list I guess its always would be O(N)
No; insertion at a known point can be: O(1) As long as your not searching for the spot (which your not) that is.
You will be expected to know the basics.
Oh fuck off with this ad spam. # Null safe by default Sure, that's nice. Backwards compatibility probably hugely limits what Java could ever do here. Point to Kotlin. # Extension functions Eh, sugar for statics, not that exciting. # Data classes Probably quicker and cheaper for most (both personally and businesses) to just wait for records to land in Java, which they are about to. Plus the Java approach seems to be much more principled. (Mutable side-fields? really?) # Functional Programming support No real attempt appears to be made to actually justify the claim that it has "better support". Surely the author understands that Java *also* supports higher-order functions? Only the type of the function must be named in Java (via a functional interface). It's debatable whether unnamed types are "better" than named types. Also unsure as to what connection the author thinks inlining has to functional programming. Besides, I'd prefer to trust the JIT to do this rather than well-meaning coders with limited information. The JIT knows more about the target platform and is able to actually profile code to decide what to inline. # Support for Coroutines - An alternative to Java multi-threading Async and coloured functions are dogshit compared to proper continuations. I'd prefer wait for Loom than pollute my code with that rubbish. # Smart casts Poor-man's pattern matching. Again, prefer to wait for Java as they're doing a better job of it, looking at the early designs. Sure, Kotlin has all this stuff today, and for Java I have to wait for some of them ... but apparently sometimes it pays to take the time to design more carefully.
&gt;Exceptions impose no more cognitive load to reading code than tracking function calls. Can you explain this further? I can read a method implementation top to bottom and (assuming the author is part of the cargo-cult) some understanding of the flow. The branching and looping is explicit. However there are no explicit markers in the code that identify which particular line could throw the exception. Maybe this is explained by the "block-structured" nature of exceptions, but I'm not familiar with that term in this context.
Ok, I think it’s perfectly reasonable to say don’t use *unchecked* exceptions as flow control, that’s just insane. However, I stand by my point that checked exceptions can be a good form of flow control.
You could add an int attribute to keep track of the current pointer index, so that you don't have to recalculate the list size if you add a new element between existing ones.
* Try Java instead of JAVA. * A [subreddit search for "certification"](/r/java/search?q=certification&amp;restrict_sr=on&amp;sort=relevance&amp;t=all) will tell you the pretty unanimous stance of this sub against Java certifications.
Thank you the more info. It seems I can install GreaseMonkey on Chrome and iterate on it. Maybe you know the answer to this question: Lilit sends an Ajax request to [lilit.dev](https://lilit.dev). That maybe the tricky part of it (e.g. because of CORS) I'd like to know more about your situation. What public repo would you like to use Lilit with? Or if it's a private repo, could you send me a message through [lilit.dev](https://lilit.dev)? and we'll talk more. Thank you.
How is a checked exception different than a goto with a label? The reason why modern programming languages prefer control structures is that they have well defined semantics that lets you reason about control flow. An exception takes you out of the normal control flow. Exceptions are awesome for better organizing a program structure at a high level, separating the normal control flow from error handling. I don't see how sticking an exception in the middle of normal control flow isn't anything but confusing.
&gt; I can read a method implementation top to bottom and [...] have some understanding of the flow You don't in the presence of virtual method calls. In contrast, exception safety (or exception freeness) is statically decidable: a function is exception safe if it never `throw`s and if every function call is exception safe.
The plugin is by Jetbrains not a third party, pretty sure it's part of the default install and is part of the VCS support for git inside IntelliJ.
2 stacks is essentially the zipper for a stack solution iirc. it can be quite nice as everything is a persistent data structure
Associate -&gt; Professional -&gt; Master You cannot skip to professional or master directly but you have to go step by step.
I think more emphasis should be placed on error prevention. Especially when it comes to APIs. You should always whitelist your input as this is a OWASP consideration to prevent security vulnerabilities. But always make sure to have good error handling as well to cover anything unexpected.
Java is not an acronym. It is named after an island in the Indonesian archipelago. The only way to skip the associate level is if you have a prior certification at the master level for an older version (for example, I was never an associate because the tier did not exist back when I sat the Java Certified Professional exam the first time). That said, while the material is actually very good at teaching you the vagaries and edge cases of the language, the reality is that programming certifications are not as good as system administration certifications. Knowing a language doesn't mean you know how to write quality code--which is a language agnostic skill.
If your development time is limited by the speed of your compiler, I'm sorry for the person who is assigned to maintenance...
&gt;targets denote dynamically on the value of the receiver I'm going to guess this means as I'm reading code for a method, I don't know the details of what each line is doing... But I don't need to know the details of the implementation behind each line of the method I'm reading to follow the flow. "line 1 invokes some method and stores the result into a variable, line 2 branches based on the value of variable from line 1, etc." on the other hand: "line 3, starts a try/catch block, line 20 catches some exception." Which line threw the exception?
heck i am still using 6!!!
:O No way!?
In medicine, prevention is always better than treatment. The same is true for development.
[I would expect no less](https://www.youtube.com/watch?v=hkDD03yeLnU)
I was curious about the performance of your pointer-based approach versus just a naive java.util.Collections approach so I wrote a silly implementation and ran some performance tests: public class UndoRedoList&lt;E&gt; { private ArrayList&lt;E&gt; list = new ArrayList&lt;E&gt;(); private int size = 0; public static void main(String[] args) { long start = System.currentTimeMillis(); UndoRedoList b = new UndoRedoList(); int executionCount = 0; while (System.currentTimeMillis() &lt; start + 1000) { for (int i = 0; i &lt; 20; i++) { b.add(i); } while (b.canUndo()) { b.undo(); b.redo(); b.undo(); } while (b.canRedo()) { b.redo(); b.undo(); b.redo(); } b.clear(); executionCount += 200; } System.out.printf("%s executions/sec", executionCount); } public void add(E element) { while (list.size() &gt; size) { list.remove(list.size() - 1); } list.add(element); size++; } public E getCurrent() { return size &gt;= 1 ? list.get(size - 1) : null; } public E redo() { size++; return getCurrent(); } public E undo() { size--; return getCurrent(); } public boolean canRedo() { return size &lt; list.size(); } public boolean canUndo() { return size &gt; 0; } public int size() { return size; } public boolean isEmpty() { return size == 0; } public void clear() { size = 0; list.clear(); } public String toString() { return list.subList(0, size).toString(); } } Surprisingly this naive ArrayList implementation runs about 5x faster than the pointer-based implementation. I tried swapping in a LinkedList instead and it was 2x slower than the pointer-based approach. (It passes all the unit tests too, thanks for writing those!)
Sry what do you mean with OSAP consideration?
Question: Would this lead to memory leaks? I'm unaware if the Garbage Collector is smart enough to detect this, still fairly new to that stuff. You're clearing the structure's references to the relevant Nodes, but every Node still references its neighbors. As such, the Nodes would just be lost in space but still referencing each other. So when you clear the lists, you're really just losing track of the I know in something like C this would absolutely cause leaks.
If you are thinking about validation of numbers, that offer a parse method, you should also think about the validation of strings, since they are not backed by a safe representation like a number. Also keep in mind, that not every number is valid for your use case / domain model. A amount of books in a shopping cart is very different from an amount of books in a yearly report. That topic is known under the name Domain Driven Security. It's been talked and written about a lot of times, if you are interested in expending your expertise in that topic, Google for Domain Driven Security or start here: https://github.com/envimate/mapmate/blob/master/docs/articles/DomainDrivenSecurity.md
Because it’s type checked. A checked exception is actually easier to reason about than other control flow. I agree that the example you posted is garbage and you should never do that. However with a checked exception you are declaring that this function returns two (or more) different types and the compiler enforces that you have code to handle all of those types. In other words, sum types. I think my objection to this “rule” is that it’s hard to define the difference between error handling and flow control. If a given function has two or more possible return types that are encountered during normal operation, I don’t see any fundamental reason not to model this with an exception. I agree this case isn’t super common but it does come up.
The GC will detect and remove circular references.
Awesome, thanks.
Good question! I will try to investigate it with the debugger to give you a clear answer.
Thanks. Looks very interesting
There is actually some level of Undo-Redo supported in Swing (https://docs.oracle.com/javase/7/docs/api/javax/swing/undo/package-summary.html) It is originally meant for text fields or similar but can be used for arbitrary data. Here (https://docs.oracle.com/javase/tutorial/uiswing/components/generaltext.html#undo) is one tutorial about implementing it the Swing way. Of course this being Swing might scare some users away.
Type checking tells you what errors you can expect. That makes it a nicer form of error handling (or worse, depending on your opinion of checked exceptions). But, we're talking about mixing up an error checking mechanism with control flow. In fact, that is one of the reasons *why* exceptions are nice. Consider error handling in Go. The Go pattern is to return a tuple with a value and an error code, so you have if statements both for business logic and error handling logic, mixed together. That is different than an `Either` type. An either type also returns two values. But an `Either` type is monadic. You can chain actions together as if all actions return a `Right` value. If all actions complete normally, you have a `Right` value *at the end*. If any of the actions fail, the chain of actions is short-circuited and you get a `Left` value *at the end*. At the end, you can pattern match on the `Left` value, as you would with `catch` blocks.
Thanks for the test! I'm not surprised about the performance result and knew from start that an Arraylist based approach would be faster, but I choose the current approach more so to execute an abstract idea in the head into code from scratch as a learning process. Was the LinkedList from the Collections API 2x slower than my approach?
https://blog.sucuri.net/2018/10/owasp-top-10-security-risks-part-i.html This falls under the injection section.
Specifically the GC looks for paths to an object root - a circular reference with no path to the object root indicates nothing can get to it and it is garbage, so it will collect it.
I recently had to program an doubly linked list as homework, nice to see its use in practice
That's right -- I tested it with the java.util.LinkedList implementation from Java 11, and it was twice as slow as your code. LinkedList was actually the first implementation I tried, since intuitively I thought pruning items from the end of a list seemed like something java.util.LinkedList would be performant at. But it's not like java.util.ArrayList allocates a new array every time its size changes, so it's fast either way -- plus ArrayList avoids the overhead of creating all those objects.
Thanks.
Perhaps we have different terminology but I would argue that if a) your type system is sound and complete and b) your program type checks, then it means you can’t have errors. I guess you are arguing that exceptions obviate the need for control flow, which I guess I agree with. My main point is that there are situations that can be modeled by control flow (I.e the check-error-code-and-branch pattern) that are better modeled by exceptions. So I think the blanket statement “don’t use exceptions for control flow” doesn’t make a lot of sense.
&gt;&gt; targets denote dynamically on the value of the receiver &gt; I'm going to guess this means as I'm reading code for a method, I don't know the details of what each line is doing No, I mean that you don't know *which* method will execute. But if you don't care to read what the methods do, just what their return types are, then all you need to know is which method throws a (checked) exception. In Java, the checked exception declaration is very much a part of the return type.
Data Structure
I don't get the 2 comments I got on my post... This has absolutely nothing to do with compiler speed, this is just nonsense.
What do you think about [Micronaut](micronaut.io)? It's supposed to do all the work that Spring does at compile time (DI and so on), so as to improve startup times.
Are you aware of this: [https://www.baeldung.com/java-conflict-free-replicated-data-types](https://www.baeldung.com/java-conflict-free-replicated-data-types) How does your solution compare to this?
&gt;all you need to know is which method throws a (checked) exception, from its declaration. In Java, the checked exception declaration is very much a part of the return type. It's easier to work out the parameters/return types of invocations from context than what exceptions can be thrown. SomeParameter someParameter = createSomeParameter(); int someInt = convertToInt(someParameter); Don't you consider having to look up the declaration to understand this line additional cognitive load?
Yes, Wildfly releases at a good, solid clip. However, you'll find that major versioning is not nearly as drastic as it is in other EE containers: most EE containers have a major version for each JavaEE (as of EE 9, it'll be JakartaEE) spec release. However, Wildfly has been using the latest JavaEE spec (version 8) for the last four regular releases. If you need a change, then use it. If you don't need something in the release, skip it.
When it makes sense. But those times come up less often than I initially thought they would (I thought they'd come up multiple times every day, but as it turns out, not so much).
&gt;your program type checks, then it means you can’t have errors. I think /user/pron98 would strongly disagree with you, as if it were possible for a type system to fully allow the compiler to deduce logic errors. But I think errors be encoded in the type system, representing conditions which prevent the method from returning a value, which can't be deduced at compile time. &gt;My main point is that there are situations that can be modeled by control flow (I.e the check-error-code-and-branch pattern) that are better modeled by exceptions. That's not control flow, at least the way Josh Bloch meant it. Manual error handling (check error code and branch) is control flow, mixed in with business logic control flow. Exceptions (and monads!) abstract out that particular kind of control flow, so you are only left with business logic control flow. Monads are way cooler than exceptions because they let you abstract out other kinds of control flow, like combinatorial search, which requires manually nested a bunch of for loops in ordinary Java (not so with streams!) Josh Bloch's example obscures the business logic control flow, by abusing an error condition, which loop termination should not be. In fact, I believe functional programming aims to eliminate control flow altogether, using composition of functions for a declarative style of programming that lets the runtime figure out the correct control flow.
If you thought this is such an important update that needs to be shared, you could at least summarize the important changes in this post..
This upgrade is out of date. There is a newer better version of eclipse here: [https://www.jetbrains.com/idea/download](https://www.jetbrains.com/idea/download) :P
It's a direct link to "New and noteworthy". Extracting "most noteworthy" from "noteworthy" would be an overkill
No, since local declarations are not as informative as the function declaration itself in the presence of variance.
A second that. It's a really solid library. I'm honestly surprised it's not used more.
&gt; Show method parameter names on code as code minings finally!
Keep It Simple and Stupid. 2 ArrayList makes it easy to read and produce less code. The speed ain't really a key with undo/redo.
tl;dr: java 12, and still no proper support for dark mode
No, that is what it is for.
Don't you bundle the runtime with your app?
Has anybody else experienced buggy refactors since 4.11? Since I upgraded some months ago the inline variable refactor started to fail often and just delete the variable leaving broken code where it should have replaced the value. Also renaming started to rename other variables outside of the scope with equal names, making a complete mess. I could not find any opened issues about it. I'm not sure if it's my setup but I hope this update fixes it or I'll have to try a fresh installation.
Libraries on JDK8, applications on JDK11.
A lot of what I work on are either libraries or plugins. We do distribute Docker images that come with a JDK, though, but so do like hundreds of other users (Jenkins).
I recall taking the Scala course at Coursera. Prof. Odersky was talking about "Persistent data structures". Simpy, elements can be added, but the initial structure is retained. The "new" structure will subsume a subset of the "old"
Aside from a technical perspective. How would one implement a optimal UI/UX considering stale data? When two people edit a form and one can't save his work (which he might have required a long time to input) because his data was stale, he will certainly hate the developer of the application.
Sure, it's not as informative. The point is it is usually informative enough for code that doesn't use exceptions for flow control.
The dark mode is actually pretty decent (at least for Java). I use it as my daily driver
When I conduct interviews, I don't care if you know exact method names. You can pseudocode it for all I care. I care more about your reasoning and thinking process. I've literally had candidates who seemed like they literally memorized the Javadoc and answered my questions like a robot. When I'd ask them questions like *why*, they'd give me a blank stare.
are the scrollbars still white?
A higher-level New an Noteworthy (with other eclipse projects, too) here: [https://www.eclipse.org/eclipseide/2019-06/noteworthy/](https://www.eclipse.org/eclipseide/2019-06/noteworthy/)
I haven't had that problem at all, and I've been using 4.11 since it came out. The one time I think I had a problem like that I had something on my keyboard, and was getting random key presses based on how the wind from a fan was bumping something on my extended keyboard. Do you use a specific distribution, or install some special plugins?
Yes! An undo-redo use case is perfect to demonstrate how and what DoublyLinkedList can be used for
Yes, very annoying. This update fixed at least the renamings.
No I'm not aware of the solutions in the two linkes and neither how my solutions compare to them. My solution is build to behave like how undo-redo behaves in Microsoft Word and photoshop and the solution is quite simple and works perfectly for the use case.
I totally agree with KISS. In this case I just wanted to try to build my own data structure from scratch for the challange. Yeah the speed is certainty not important in use case of undo redo
its cancer, on Windows
I like eclipse, but themes in general need a major overhaul
Might be, I'm linux =P
Not on linux at least
Have a [taste](https://i.imgur.com/FXx0Bxl.png).
Ew
Definitely not the best, but I can live with it, it's not THAT bad, especially outside of preference pages.
"Howdy" isn't being displayed on the console even though I already asked for the input.
One thing I wish I could do on Eclipse was to have it use `var myvariable` instead of the actual Object&lt;Parameter&gt; myvariable` every time I create a variable. The second form looks more complete and correct, sure, but it's also much less versatile and maintenance-heavy as I write and rewrite the code, so I usually just immediately change it to `var`anyways and it's a bit of a pain. Any ideas if that is at all possible or where I'd write a feature request for it?
Have you tried DevStyle?
Is the lit up area for each torch consistent cause it doesn’t look like it is, unless you meant to do that. Looks pretty cool tho’
Clean Sheet fixes them on Windows: http://fappel.github.io/xiliary/clean-sheet.html
Without looking at the code, don't you just need to stacks? One for actions that can be undone and one for for action that have been previously undone and can be redone :\\
yes, rely on it heavily, you'll get a lot done quickly one important thing is however, make sure you can adapt to a different IDE easily. Most IDEs have similar autocomplete features, so be able to easily find them when switching if you ever need to
They all move a bit and they all do it on their own timing so they arent synchronized :)
Serious question. Why do people still use Eclipse when Intellij Community Edition is free?
IntelliJ Community Edition is quite limited in what it supports outside of .java files.
Absolutely yes. We don't even use the old 'for each' anymore.
Yeah I guess I have had a license for so many years I'm not sure what the free version was missing. I used Eclipse.for years and it wasn't too bad. But I have a feeling if I switched back to Eclipse now I'd really miss some of the refactoring tools that make Intellij so awesome. I've noticed Intellij becoming bloated and buggy in the last two releases so maybe it has seen its peak pass by.
Josh Bloch would probably disagree with you. Here's a snippet from Effective Java: second edition. [http://thefinestartist.com/effective-java/57](http://thefinestartist.com/effective-java/57)
Not sure why my comment is down voted, I feel that is fact over opinion. Anyway, in my personal experience, IntelliJ still doesn't feel as bloated and buggy as I remember eclipse being. I'm using the latest version of intellij and it runs great, but I'm also running it on the latest MacBook pro.
In my opinion, that syntax highlighting is twice the cancer the user interface is.
Dark themes can go into the trash bin of history. Dark themes are hard to read, create headaches, eye strain and in my opinion, are just plain ugly.
Trolling and making light of a serious, deadly human disease that has destroyed the lives of billions of people.
With one Eclipse instance, one can run and debug a C++ program serving a Python client also being debugged and supplying data to a Java client also being debugged, etc. IntelliJ, good as it is, not even Ultimate, can do that.
It is actually named after coffee. There is an article about its naming [here](https://www.javaworld.com/article/2077265/so-why-did-they-decide-to-call-it-java-.html).
Who uses Eclipse anymore?
It looks like in your [submission](https://www.reddit.com/r/java/comments/c2ql1b/what_is_the_proper_way_to_implement_property/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Firemaking lvl?
Theres no levels for things like that as of yet considering theres no stats or anything right now
Java certification is absolutely excellent to learn and gain confidence and mastery of the language vs. resume padding. You can always bring it up in an interview as bonus points.
Are you aware of the cmmand pattern ? Because thats what you are trying to do.
The GC will handle it, eventually. But you should clear references on nodes that are about to be removed, if you don't it can lead to ["GC nepotism"](https://psy-lob-saw.blogspot.com/2016/03/gc-nepotism-and-linked-queues.html) where long chains are being promoted to OldGen and can only be cleared by a major GC.
What IDE did you use to create this game?
For the challenge, I understand that. The thing is when I started coding we had no choice but to code our own linked list (many found it advanced programming). So it's so cool to just use existing things.
Netbeans :)
Aren't these giant switch statements, like, bad design ? Asking for a friend who does that too...
Allows the user to apply the changes as quickly as possible, instead of letting the user editing the form for minutes without applying the changes. Another option is to use in-place editors which update a single field at a time. For those, you can use the [versionless optimistic locking mechanism offered by Hibernate](https://vladmihalcea.com/how-to-prevent-optimisticlockexception-using-hibernate-versionless-optimistic-locking/). Another option is to break entities/tables having lots of columns into multiple entities/tables that are linked via one-to-one relationships. This way, you decrease the chance of version conflicts. For more details, check out my [High-Performance Java Persistence book](https://vladmihalcea.com/books/high-performance-java-persistence/).
Swing is cancer to program with because everything revolves around the Graphics and Graphics2D objects. It's the worst designed library I've ever used.
You can find it [here](https://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase9-3934878.html).
Can someone tell me how to update eclipse, I’m using MacOS. I still have the 2017 version and I was worried to update it encase I lose my projects.
Ah the archive. That makes sense. That page is quite hard to find in search engines. Appreciate it.
You’re welcome!
Did you use javafx?
Help - Check for updates
If your application is serving 30 clients, do fibers help?
Array iteration is used as an example here, I agree you should know the size of the array, an ArrayIndexOutOfBoundsException is hardly “exceptional”. But I agreed with the above, use the language to help validate your input, why handle all forms &amp; future forms yourself.
I'm sorry but if I'm interviewing you and you bring up a Java certification you're going to score 'points' allright, but they won't be bonus points.
Basically, in Update Sites preferences, you need to change all sites to point to the version you want to update to. Usually, these two: http://download.eclipse.org/releases/&lt;RELEASE_NAME&gt; http://download.eclipse.org/eclipse/updates/4.xx For release name, you can use `latest` now. For the updates site i think only explicit version URLs are available. Then, check for updates.
Might want to discuss this with your employer. Often employers are quite willing to pay for them. I'm personally of the opinion it's not worth paying for them yourself. You'll probably learn something from doing them, but nothing you can't learn by yourself.
You'll need to rethink your tests. Right now, they depend on the order of execution. That is, the state you need for test B depends on the execution of a preceding test. That's a serious code smell. Create the state you need in the test that depends on that state. If you end up writing the same code over and over to set up your state, use JUnit's setup facility, which is designed for that specific purpose.
Sorry, I don't have enough experience with CORS, so I can't help with that. However, if you are controlling the server lilit.dev, can't you disable CORS protection server-side? Or maybe you could use callbacks to bypass this (instead of your API endpoint returning just `{"json": "value"}`, make it return `callback({"json":"value"})`, define a `callback()` method to handle the response, and inject a script element with the API url). I've never actually used callbacks before, only heard of them, so your mileage may vary. In terms of how I will use Lilit, I don't exactly have a single repo I want to use it with. It seems like a cool tool to be able to use on any repo. But here are some of my most common repos: https://github.com/arjvik/ftc_app_rr2 - android app using gradle https://github.com/arjmart/api - jaxrs app not using any build tool, eclipse standard directory layout (i.e. java file in `src/` instead of `src/main/java/`) https://github.com/arjmart/arjmartwev - jaxrs app using similar layout as above I would love if Lilit could be used on every single repo, instead of a fixed set of repos. Thank you very much for this great tool!
Yes, a major search issue, which effected a lot of functionality, was fixed in 4.12M1.
Pretty close. In addition, the "legacy collection" classes (primarily `Vector`, `Hashtable`, and `Enumeration`) appear in rather a lot of APIs, making them even harder to get rid of. Same problem with `Date`.
Awesome, good to know. Thanks
I run on Linux and use the GTK default, my GTK theme is already dark. I only had to fix the tabs colors, but everything else looked nice. For the syntax colors I use eclipsecolorthemes.org Dark modes in general are broken, all applications should respect the OS settings.
Its Swing, as you can see. The imports use Jpanel and the like.
DevStyle goes a long way to have a good dark mode. [Here's](https://i.redd.it/lgi2oeafdj431.png) how it looks on my setup.
So I should traverse all nodes which shall be deleted and set them null?
Eclipse is a foundation. Eclipse platform is a project hosted by the Eclipse foundation. Eclipse JDT, EGit, JGit are some of many projects hosted by the Eclipse foundation. Comparing Eclipse and IntelliJ is like comparing a supermarket and an apple. You should know that thanks to the open nature of the Eclipse Public License, IntelliJ can use projects hosted by the Eclipse foundation: https://github.com/JetBrains/intellij-community/tree/master/plugins/settings-repository/lib
That's also one way to do it.
You should at least put a blue/orange filter on your screen. Staring at a white screen all day long, every single day is just not good for anyone: https://justgetflux.com/research.html
&gt; Eclipse 4.7 introduced a new experimental Java index which was disabled by default. Due to lack of resources to properly support all Java 9+ language changes, this index is not available anymore starting with Eclipse 4.12. :(
Since the content is not related to actual Java *programming* it's not on-topic in this sub I'm afraid.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I've been told they are and the further this game goes the less of them there is. It's one of the many things I'm in the process of changing
Yes it is swing
Swing is nice. I’m also using it for my game
Sorry :( Thought this was all-encompassing java!
There a link to it anywhere that I could go check it out? :)
https://ehwhoami.itch.io/conquer-space It’s not open source, but I can give you the source though. It’s strategy 4x.
IntelliJ CE has a lot of limitations, expecially if you are using Java Enterprise.
I would definatly love to check out the source if that's alright with you :)
I would like to improve the tests, but I'm not understanding completely what you mean. Could you point at specifically what should be improved?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
fyi: I updated [https://github.com/gerritjvv/crypto/tree/master/crypto-perf](https://github.com/gerritjvv/crypto/tree/master/crypto-perf) to include aes-ni vs non aes. I haven't dont non-x86 though.
fyi: I did some major cleanup on the benchmark code and reran everything you can see the results on [https://github.com/gerritjvv/crypto/tree/master/crypto-perf](https://github.com/gerritjvv/crypto/tree/master/crypto-perf). On some runs the commons crypto does look better so +1 for commons :), but its still lacking on some of the benchmarks wrt just vanilla java. For myself going forward for encryption in java I'm sticking with vanilla java. Hope this is informative :).
The JWT link there is particularly useful: https://wiki.eclipse.org/JWT_NewNoteworthy_1_6 &gt; JWT has been upgraded to, and is provided along, the Eclipse 4.6 (Neon) yearly release. It especially now runs on Java 8. :O
If you are looking for a junior developer position how can this hurt you? It's something that he or she has done that I can work with as an interviewer.
IIRC, it is, but it may not be super well received because many are subbed in order to learn. If it was OS, many would be more receptive. I think it's cool, though!
I meant it in the sense that you're 'bragging' about having a Java certification. If it's on your resume; fine. Bringing it up in conversation is kinda cringey.
Glad you enjoyed it! Do you think I will be safe to post these as they come out each Thursday?
I never realized how much I wanted this feature until just now
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4734149/ "Previous epidemiological studies have indicated that chronic exposure to visible and blue light may be a cofactor in the development of AMD [115-117]. However, Darzin et al. [118] found no significant relationships between blue light and the development of AMD. Okuno et al. [119] evaluated the blue-light hazards from many different light sources and reported that the exposure (even for less than a minute) to blue light from the sun, arc-welding lamps, and the arc of discharge lamps is hazardous to the retina, whereas the exposure to blue light from fluorescent lamps or LEDs does not pose a significant hazard. Thus, it is clear that many different factors are involved in the pathogenesis of AMD. This observation, together with the limited data in terms of number of subjects or length of treatment, makes it difficult to predict the association between blue light exposure and the development of AMD."
If you're a senior developer, sure. Otherwise, who cares?
I used it in IntelliJ for a long time, but I am glad, that Eclipse adapted it. Competition is always good
Glad to know that eclipse still exists in the mindshare of so many java devs. Otherwise there was non-stop chanting of the glorious songs of only jetbrains and idea since last few months!
The coffee is named for its place of origin.
I wonder why....
It's perfectly fine two ways! &amp;#x200B; 1. If you use autocomplete to remind you of what method you should use, then you will eventually remember it without the trouble of looking at a javadoc. 2. If you use autocomplete to save yourself a lot of typing, then you'll save your fingers and wrists.
It's pretty sure that already works as long as you use Java 10.
Do you have a moment to talk about our lord and saviour IntelliJ?
Eclipse was my first IDE for Java, and I'm glad it's getting some updates. But I have not used Eclipse in years.
Which tests depend on the order of execution? If you're suggesting that, for example, testAddOnFirstElement() will fail if you move it to the end of the test suite then you're incorrect. Each of these test methods is independent and will run regardless of the order.
Only for in-house projects were development teams have control over the technologies used
The sole reason to avoid exceptions for control flow is that they are costly, and this is mostly because they capture a stack trace on creation. So if the performance along the code path involving an exception matters a great deal, then I would certainly recommend trying to avoid the exception being thrown, even if it means duplicating logic. If the performance in the case that an exception is thrown isn't critical (eg you're just catching the exception and printing "invalid integer" and exiting) then it's usually fine. But it's up to the programmer to weigh up the runtime cost of the exception and the maintenance cost of duplicated logic for their particular situation. Avoiding both is ideal, and that is what some APIs/languages do by default (eg Haskell Either for errors).
Typically each test will create its own state, and draw a single assertion about the result. Here's an example of a test with some issues: @Test void testRedo() { undoRedo.undo(); undoRedo.undo(); assertEquals((Object) 4, undoRedo.redo()); assertEquals((Object) 5, undoRedo.redo()); } These "undo" operations only make sense if you go up to the setup method, and realize the test prepopulates an UndoRedoList with five objects. Additionally since this setup data is shared, you'd have to jump through some strange hoops to write some otherwise trivial tests -- such as a test where you undo/redo from a newly created list with 0 items. @Test void testRedoOneAdd() { prepopulateList(1, 2, 3); undoRedo.undo(); undoRedo.undo(); assertEquals((Object) 2, undoRedo.redo()); } @Test void testRedoTwoAdds() { prepopulateList(1, 2, 3, 4); undoRedo.undo(); undoRedo.undo(); undoRedo.redo(); assertEquals((Object) 4, undoRedo.redo()); } These tests are more conventional; each test populates its own test data. It's trivial to see how you'd write a test with different items in it. Additionally the assertions have been split up so that each test only asserts one thing; the two assertions are no longer codependent.
It would be a shame to make `add` O(n), but at least it could be worth adding a line with `pointer.next.prev = null;` before this line: [https://github.com/Muddz/Undo-Redo-Algorithm/blob/2bf4cefdff419a5b171fd2d0737b531ad1885ec3/src/main/java/UndoRedoList.java#L49](https://github.com/Muddz/Undo-Redo-Algorithm/blob/2bf4cefdff419a5b171fd2d0737b531ad1885ec3/src/main/java/UndoRedoList.java#L49)
I dunno why. Maybe because one is an open source community project whereas the other is backed by large capitalist corporations who have resources to spend on marketing and PR?
\&gt; I would love if Lilit could be used on every single repo, instead of a fixed set of repos This is on my roadmap, but it's a little further out. I'm not expert in CORS as well. But there should be a way to figure out. Thank you!
Not sure what your point is. Your IDE is a tool, not an anti-establishment protest platform.
Thank you for the link, but it doesn't exactly tell me what I'd like to know: How usable is the Python implementation?
I do enterprise consulting and the large majority of customers still provide IT images to externals with Eclipse on them. Thankfully so, as I could only use InteliJ properly on gaming laptops.
You'll be needing the AWS SDK (I believe there is a DynamoDB-specific dependency on Maven Central), you can pass credentials through the Configuration mechanism, and then you can write your Repository abstraction using the SDK. On a phone so can't type out examples but that's the general gist. Then you can wire up that Repository wherever you need it and utilize the version you wrote using Dynamo APIs. Hopefully that makes sense
I really liked eclipse. I wish they had added more features and improved the UI. I switched to Intellij long time ago and now going back to eclipse feels like a huge downgrade.
Eclipse has gotten regular updates for years. *Permgen was replaced by metaspace, not meatspace.*
Eclipse, NetBean now all feels like old childhood cartoon to me. They were awesome back then. But now? Nah, I will pass.
Yeah, I was referring to the legacy collections. I’m sure there is code containing them that will never be rewritten.
How is that cancer?
IntelliJ does not require marketing and PR
I wouldn't give up on Spring just yet. Spring has been moving towards less (or no) use of reflection with the functional interfaces, and also according to the intro at recent Spring IO conference, release 5.3 will have support for GraalVM and should have much faster startup. I guess they are feeling the pressure from the recent competition, which is a good thing!
I think NetBeans has this feature as well, not sure if it's recent there.
I'm actually not sure which is which.
And if it is a protest, why isn't he putting a bunch of effort into making Eclipse as good or better than Intellij? I would love to not pay for an IDE, but I find Jetbrains products to be better for my needs and thus I use it.
As I said, I have not used Eclipses in years. Once I used IntelliJ, I have never gone back.
The IDE is your friend and is there to help you. Just like Google and Stack OverFlow is there to help you.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
thats a bit extreme... it may not be the most pleasant UI library but I like it better than, say, old QT
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Sure that's not because of it being a java lib vs. a C/C++ lib? Haha
That's why you use openjdk or corretto and not Oracle...
Websphere... Good god
What do you use now?
What do you use now?
For backend work, you should just assume by default that the job uses Spring in some capacity. There's a fair amount of other things, but I think at this point Spring/Spring Boot is at least half the jobs
Very. Yes. Thank you for attending my TED talk, sloth edition.
It looks like in your [submission](https://www.reddit.com/r/java/comments/c2zfje/pegasys_protocol_engineering_permissioning_in/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I learnt a large majority of my java using development software like android studio (free) as well as eclipse (also free). I say this especially since you are interested in building your own apps. I got through projects using YouTube tutorials and especially online forums like stackoverflow. After a couple projects fully completed I felt I learnt a lot about Java and all of it's details. Specifically I learned a lot about multi-threading and the importance of having good program structure from the start.
Thank you very much for all the advice. Really appreciate it.
You'll probably get better advice at /r/learnjava .
Jet Brains does a survey every year. [2018 Results](https://www.jetbrains.com/research/devecosystem-2018/java/)
Will give it a try thanks.
What do you use now?
Will give it a try thanks.
Will give it a try thanks again for the help.
You do realize that all of those "large capitalist corporations" create most of the jobs right?
Agreed. I have been freelancing for more than a decade now. Exclusively Java. I'd say that the rate of Spring based projects for me has been &gt; 95%.
The best way is to make something. So your games and apps for photography are the exact path I was going to tell you to follow. Your understanding of the language (and programming in general) will only get better by doing.
That's a good idea will try something simple first and then build from there.
There are a few moving parts here: 1 - AWS credentials - there are lots of ways to get these into your app, but the safest ones keep the keys out of your config files and therefore out of your repository. A good solution is to use AWS credentials/config files in your local environment for development, and rely on IAM/EC2 roles in AWS-deployed environments. The AWS SDK will pick up the credentials automatically that way. 2 - For settings which need to be passed in – DB names/tables etc. – you'll want to create a custom configuration class you can include in the Dropwizard config. See [the Dropwizard manual](https://www.dropwizard.io/1.3.12/docs/manual/core.html#configuration) for details on this. 3 - consider using [dropwizard-guicey](https://github.com/xvik/dropwizard-guicey) for dependency injection rather than having to instantiate your own AWS client everywhere. Your choice of directories/packages is actually pretty arbitrary, it's not defined by Dropwizard per se. One pattern is to put all resources (API endpoint classes) in one folder, DAO in another, entities in another, etc. Regardless of directory structure, you'll want to have an API class (resource) with the various `@Produces`/`@Consumes`/`@Path` annotations and a separate class entirely to handle AWS DynamoDB interactions.
What do you use now?
Depends on what spring library you mean. &amp;#x200B; Check this site out: [https://start.spring.io/](https://start.spring.io/) and check what you can select under dependencies (you have to open the detail view) &amp;#x200B; I think spring boot and the spring IoC container you should look at. Spring boot is quite simple, IoC is a bit more complicated, but still simple to learn and creating something is relatively straightforward. And then there's a lot of other frameworks, for web, for restful services, cloud computing, jms,... Which one to learn depends on what jobs you want to apply. But to be honest, all of the libraries of spring I've used were quite easy to learn (but reading the documentation is still important).
yup. don't forget other languages/technologies, the more you know the better you are. but spring is pretty much up there in terms of usage.
If you are starting a new job and you know your basic java its not to hard to learn but i would say Spring is most commonly used in one way or the other
Thank you! I’ll do it later
What they give in the name of wages is a measly sum compared to what the proletariat truly deserve. This world is a very unfair place.
I've tried them all. Eclipse is still my preferred IDE. But I don't get why intellij users come to this sub and behaving like children?
Upgraded this morning actually and couldn't open any files without getting a dozen pop up with an "NPE". Had to revert to an older version.
It's ubiquitous.
What I like about eclipse is that there is such a massive open source tool support for so many specific tasks. It's really a great community and the eclipse foundation is really pushing technology and research forward. Also it's so easy to build plug-ins or your own IDE based on Eclipse. Eclipse for me is more if you want to do something very specific like working with domain specific languages. As for your standard enterprise Java programmer I agree IDEA is more efficient and simple.
Great to see that Eclipse getting more and more code transformations and pushing their code minings forward. Also, seeing the steady flow of change notes how they made this line or that icon black as well now will always cheer me up.
Because after they got the IDE they wanted, they realized their jobs still sucked.
IntelliJ all day
I laughed too hard at this
His/Her point is that Idea is not a better Java IDE, it is a Java IDE with better marketing behind it. If you compare the actual IDE features, Idea is way behind. Yet here we are...
I guess it’s all a subjective matter of opinion, ultimately. Many people find IntelliJ to provide more out-of-the-box (or accessibly interested) convenience, other people prefer their familiarity with Eclipse.
Then your interviewing is rather skewed. Interviewing is very situational and in the moment, based not just on the position, but the person you're speaking to then and there. Depends how it's brought up. If it's done as a way of bragging or somehow shoehorned into the convo, then yeah, it's kinda cringy. But it depends. I've interviewed plenty of people. In the first 60 seconds you'll have a very solid imprint of that person. But I've been surprised plenty of times to fight the pigeonhole mindset.
But I don't see how they are codependent. The setup-method initlizes a new instance of `UndoRedoList` and populates the list with five integers for every test method. So no test-method is actually using the same instance. I avoid a lot of repetable code by doing it this way
Back when I was searching for which Linux distro to use the best advice that helped me: &gt; Get the same distro as the nearest to you Linux guru uses. This could also be true about IDEs. People should choose the IDE they would be the most productive in. Not the one with the largest hype.
i'm an american in ohio. been working on a java startup for the last several years but guessing it's not going to take off and want to freelance for a while before i commit to a full-time job. found one java gig locally, but the vast majority of the freelance that i see is devops, node, ruby, python, etc. java is widely used here, but mainly by large companies that don't seem open to freelance. from your reddit history i'm guessing that you're in germany, so the environment there might be quite different &amp;#x200B; any suggestions on how to pursue java freelance ?
Even for browsing Reddit?
It really sucks. On every post about eclipse 90% of the comments will be about intellij.
True, because every damn user of theirs do the marketing for them whenever there is a post about eclipse anywhere.
Eclipse is fine for Java. The UI just blows and the themes have never worked if you use a lot of different languages. If you don't care about those things it gets stuff done.
And what is the problem with that? I don't think that is the point. I think the point is related with quality of the product.
If you're saying that Eclipse is a better IDE than IntelliJ, please tell us all what you're inhaling
Agreed. Their dark theme is the best one I've used for Eclipse.
I got a little triggered when she indented the switch cases, but if it's in a switch expression I guess it's okay.
I'm not getting what `pointer.next.prev = null;` is doing good for?
/r/javahelp
oh sorry, thanks for letting me know. I'll delete this.
The link you were given was for Oracle. I honestly can't keep track of which versions are free and which aren't. If you're not doing dev for a big company it probably doesn't matter. Otherwise, most people are moving to [OpenJDK](https://adoptopenjdk.net/releases.html).
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'm not sure if this sarcastic trolling. JetBrains is a small indie company. Their IntelliJ is based on an Apache-licensed open source edition, which is perfectly adequate for most Java developers. Eclipse was built by IBM, the original sinister tech titan, who continues to be the primary sponsor funding its development.
They don’t call it Java/Spring for nothing. Almost every job posting has Spring in it somewhere.
I do not code Java recently much, mostly just view backend code using Sublime Text. Otherwise, IDEA. And is there something I said is wrong? Why there are multiple comments of the same content like this?
You’re crazy. Swing is a powerful GUI toolkit that isn’t hard to learn, and it performs well. JTable and JTree have a learning curve to them but everything else is quite easy.
Let me know when web technologies have a sane way to layout your page. CSS Grid, FlexBox, and subgrid might finally bring sane layout to the web...it is only 20+ yrs behind Swing. Also let me know when web technologies have a standard component library. The text based dom was not designed for rich client apps. Manipulating the dom is a dirty hack at best.
I really wish Java had the equivalent of .NET's `TryParse`, which unlike `Parse` doesn't throw an exception. While Java couldn't support it exactly how it works in .NET since it relies on pass by reference, the Java equivalent could return an `Optional` of the correct type instead... i.e. `Integer.tryParseInt` could return an `OptionalInt`. The problem would be with `byte`, `short`, and `float` which have no `Optional` versions.
Thanks but we get these posts daily and it's not at all topical
As per the Jetbrain's dev ecosystem 2019 survey, 61% of users are using springboot as an alternative to an application server - https://www.jetbrains.com/lp/devecosystem-2019/java/
Nothing about SWT looks native at all. SWT apps looks like shit. I never understood why people say SWT looks native. Eclipse looks native to you?
It could return an `Optional&lt;Byte&gt;`, `Optional&lt;Short&gt;` etc. It just wouldn’t be as efficient as the unpacked primitives.
Barely anyone uses gridbaglayout. It was meant for GUI builders not humans. I use BorderLayout and BoxLayout for nearly everything.
I use intellij to support antidisestablishmentarianism. Long live the official church of jetbrains.
I work on about a hundred projects, each time on a different set of them, depending on the story. Without a "Working Set" feature I'd be way less productive. Which IDE has it and which does not? Also, there is eclim. Idea does not have anything even in the same ballpark. Then there are Eclipse-based projects: MemoryAnalyzer, RapidMiner, STS, etc... I get it that Idea may be a great tool for a school or a university project. But it is limited in functionality. If your projects are fine within the limits - go ahead, use it. I know Java developers who use Emacs, I know people using VSCode. They are even more limited. I am not judging. As I said in another comment, use whatever makes you the most productive. If you do not need the most powerful tool, nothing wrong with it. But I think it is useful to be aware that a more powerful IDE exists, so when you do hit the limits of Idea, you know there are options to move forward.
Marketing might explain fresh grads picking intellij over eclipse, but it doesn't explain the massive number of devs who switched. No one throws away years of experience and expertise with a tool without good reason.
Yeah, they're not codependent. You don't avoid much repeatable code; you can have a single utility method like I did (prepopulateList) and just have each method call it. The benefits of having tests which are more readable and more flexible is worth the cost of a single line of code.
Stop with the Kotlin faboy-ism
try intellij?
And their Russian bases parent company...
I never said it wasn't powerful or runs well. Though on that topic, it not having support for CSS is asinine. That library is annoying to work with. The design of JavaFX makes much more sense. Having to learn what is a `Graphics` object and what can it do and why everything has to `extend JFrame` `JPanel` etc etc etc. JavaFX's structure is far more simplistic and organized.
After reading this article I don't ever want to jump in. Like, *optional* main input arguments? *optional* semi colon? Declaring a variable as final using an easily to be confused keyword with a non final declaration keyword? &gt;Like variables, you do not need to specify what the data type of the members will be. This is a good thing? &gt;If you’ve used Python before, Kotlin has a similar range function: That looks like crap TBH. &gt;There’s a lot of cool boiler-plate code saving things you can do in Kotlin. Again, this is a good thing?
You actually shouldn’t be extending JFrame or JPanel or any other swing component unless you are actually creating a new type of that component. Has-a vs is-a still applies when writing swing code. You generally don’t have to give the Graphics object a 2nd thought. Not sure why you think you do.
&gt; Working Set You mean like Scopes? Same thing, different name.
My personal experience with this whole pointless discussion is that corporate rules and/or senior engineers force the new hires to use an archaic version of Eclipse for no good reason, which makes the new hires automatically create a resistance against it. &amp;#x200B; Eclipse gets better every new version, but I couldn't possibly careless. Eclipse, IntelliJ, VSCode. I just want to get my code done.
*Knocks on r/java* Excuse me, Sir, did you hear about our lord and saviour Kotlin?
No, not at all. Working Set is a set of projects. Like a collections of Idea windows. The same project can be in more than one Working Set. The "Scopes" in Idea are equivalent to "Resource Sets" in Eclipse. Working Sets allow me to switch from a set of projects "A, B, C" to a set "B, D, E" in a couple of clicks. In Idea that woul've been "Close windows for A and C, open for D and E". Gets really ugly with dozens of projects.
&gt; If it's done as a way of bragging or somehow shoehorned into the convo, then yeah, it's kinda cringy. That's what I meant. If it comes up naturally; fine. But you said "you can *always* bring it up".
The tests could be improved as /u/Poobslag points out below. However, I misread the tests on my first pass through and thought I saw a dependence. There is none. Apologies for the confusion.
This code could use a little cleanup: } else { pointer.next = null; newNode.prev = pointer; pointer.next = newNode; shouldRefreshSize = true; }
&gt;Declaring a variable as final using an easily to be confused keyword with a non final declaration keyword? ``val`` is perfectly fine and distinguishable from ``var``. I would have loved if they chose this in Java too. Often those sceptical opinion about terser syntax relies in knowing just one language and the fear of being unable to adopt to new things. Those keywords are working good in Scala for years btw. That said I dont do Kotlin 😉 As Kotlin has a static type system of course you *specify* the type of a variable - often you do it *implicitly* so the compiler can infer the type. Nothing new, nothing bad and Java supports it too for local variables. I know there are lots of sceptical people who prefer explicit types everywhere: before a variable declaration, after, in between and in a comment too. Imho this is a kind of obsession for devs that prefer code to look technical and for those who think in bits and bytes. On the other hand devs that consider their code more to look like prosa and want to tell a story embraces type inference, as it lowers the boilerplate, freeing the code from noise or details, put the emphasize on the meaning of the code, not its technical nature. Imho it's kinda funny that the "explicit types everywhere" group are so focused on a feature that enables the compiler to check for the correct use of types, but on the other side don't want him or trust him to do the boring work... I don't wanna say everything in Kotlin is good - I simply don't know it. But devs should be more open minded for new concepts and possibilities in languages. I definitely don't want to go back to the Java 7 times!
[2019 results](https://www.jetbrains.com/lp/devecosystem-2019/java/), too.
I never got around to testing it. Was it faster or something?
"Please come in, let me pour you a nice cup of java while you tell me all about it!" "I'm sorry sir, but our religion forbids us to partake of that beverage."
... And yet compared to IntelliJ, Eclipse is appalling with Application Servers, Maven, code formatting, code validation, version control, database integration, (the list goes on).... &gt; I get it that Idea may be a great tool for a school or a university project You'll probably find the absolute opposite. My workplace has become exponentially more productive since it dumped Eclipse, partially due to the lack of features and support for JEE, but mostly due to the fact that it's unpredictable, unstable and inconsistent.
I don't know, if any of this applies to the US, so your mileage may vary. 1. I mostly work on larger corporate projects in large teams. And the corporations are very open to compose these teams of internals and freelance workers. Some might prefer to fill vacant positions with internals, but the job market situation is so that it's hard to fill internal positions. Sometimes that might take a year or longer. For the companies, recruiting is a major undertaking. And freelancers are just easier to get. 2. This does not apply to the US. In Germany it's not easy to let go (fire) internal workers. You will need a good reason to do so, otherwise the sacking won't hold up in court. And "business is slow" or "our major project has been completed" is not a viable reason to fire an employee. Freelancers on the other hand you can hire and fire here any day without prior notice. So whenever the demand is temporary in nature, corporations will prefer freelance work here. 3. In Europe most freelance and internal jobs in IT are arranged by job agencies. This agencies are a complete industry for itself here. That makes it very easy to find new gigs. In general it does not take longer than a few days (2 - 5) to find a new position. However, the positions I am offered are always "ASAP". If never had an inquiry for a job that would start in two or three months. 4. The region where I live is not an economic powerhouse. So I have to be flexible about location. I am not familiar with the economic situation in Ohio, so maybe that flexibility won't be necessary for you. Luckily for me Germany is so small, that when you travel 200 km, then the situation can be quite different. And remote jobs - at least partial remote - are on the rise. So, if you want to give it a shot, just try it. If it is not for you, then you can be out again quickly. Look out for agencies that help you find projects and clients. At least here in Europe, these agencies are irreplaceable to to find gigs. One last piece of advice: don't undersell. Asking to few will raise suspicion on the other side of the table and diminish your chances. Be self-confident about the things you know and open about the things you don't.
https://www.jetbrains.com/lp/devecosystem-2019/java/ It's Java. The ecosystem is mature.
&gt; If you compare the actual IDE features, Idea is way behind. Yet here we are... Yeah totally. I am an IntelliJ user who switched from Eclipse. If only I could use Eclipse instead of being forced to use IntelliJ...
&gt; I get it that Idea may be a great tool for a school or a university project. Try not to insult professional developers when you're trying to get your point across.
&gt; Maven, code formatting, code validation, version control Everything from the list works fine.
You might have stopped in Java 8? We're gonna get Java 13 soon. No one uses Oracle JDK &gt; 8 anymore because it requires a license. Not too much else has changed. The world still actually runs Java 8, even though there have been a lot of versions since then. Oh, GraalVM is a thing.
Well, it is not JS, things tend to change slowly. I still see vacancies where "cutting edge technologies" and "Java 8" are combined in the same sentence :) Based on my experience, the following major things happened within the last 2 years: - Companies stated adopting Java 11 (though, the new modular system is completely ignored). - Spring Boot 2 has been released with support of Java 11-12. - JUnit 5 gets slowly adopted There has been quite a lot of changes in Docker, Kubernates, cloud infrastructures, but that has almost no relation to Java.
Noted. Did not mean to insult anyone. Sorry.
Thanks for the pointer to GraalVM! I hadn't seen that yet.
Thanks for the pointers! In particular that the modular system is completely ignored. I mentioned Docker+Kuberneters+etc as some frameworks (if my memory serves me right) had integration with them to do autodiscovery... or maybe not integrations, but gotchas.
Thanks for the link. I agree that is mature, but there are improvements, such as ~5 years ago people dropping Spring in favour of thinks like DropWizzard or Spark Java because Spring was becoming as complex, cumbersome, slow and voodoolike as JavaEE. (Mandatory reference to AbstractSingletonProxyFactoryBean :D). Maybe this has been reverted with the latest versions.
Not many shops have moved beyond Java 8. You'll be fine.
Spring Boot is king right now, I believe.
But it is still overly complex to use now. Lot of hidden things you gotta learn.. and know to learn them to really tap in to a lot of it.
Maven is not integrated into Eclipse, it is external. So not fine. Pretty much like the rest of the list. "Usable" is no where near the level IntelliJ sets.
Indeed; Spring Boot is a layer of magic on top of Spring, and as soon as you want to do something differently than Spring Boot wants you to, you need to be well-versed in both.
Docker+Kubernetes are on the ops side; if you do devops you will see them, but they're in no way java-specific.
That's still happening, but Spring Boot stemmed the bleeding. Spring is so entrenched anyway... I just meant that you don't have to fret about this sort of thing, anything as recent as 2 years in the java world is still "pretty new" and unlikely to be must-know for jobs.
I don't know... in my team there's IntelliJ and Eclipse users, and the IDE is never the bottleneck. In my case, I have \~300 projects in eclipse and it's still running along quite nicely, and I can do cross-module refactorings easily. Is Eclipse slow sometimes? Absolutely. Can I do my with it? Absolutely. Have I fallen victim to the Blub Paradox? Unknown.
&gt; JEE Found your issue (J/K). Honestly, I prefer DBeaver (either stand-alone or as a separate application); maven support I feel is better in 19.03, and even tho I've bee working in xterm since '96 I prefer eclipse git plugins to CLI git (which might not say that much give the ... idiosyncrasies of git).
&gt; I don't know... in my team there's IntelliJ and Eclipse users, and the IDE is never the bottleneck. It's not so much a bottleneck as it is just convenient. If you work on API's a lot like me the in-IDE REST client is very awesome for example.
&gt; Maven is not integrated into Eclipse, it is external ... and I don't want it to be (unless your edit-compile-test cycle needs 10+ maven plugins, in which case maven isn't the issue); eclipse incremental compile works great. &amp;#x200B; Could you elaborate on maven integration? A cursory search only shows "import maven project" / "run maven goal" as examples of integration.
We use Postman, because we have a huge library of requests, and that library is shared across the team; and for quickies \`curl\` does fill the job quite nicely.
I will take a look at it today. Thanks for the tip
IntelliJ has Maven fully integrated, so you can define custom commands with arguments and profiles. This is absolutely essential for compiling projects that have many individual customers, each with specific modules that are defined (as one would expect) within Maven. As with Application Servers in Eclipse, it shouldn't be manual process to switch configurations and workstreams. My workplace used Eclipse painfully for many, many years. IntelliJ has been a revelation.
&gt; We use Postman, because we have a huge library of requests, and that library is shared across the team You can do the same with IntelliJ: the requires are stored as .http files, can have assertions, etc. But that's not the point. You want to know why IntelliJ is popular. It is because it has tons and tons of convenient features like these.
Kotlin seems to be picking up steam. I've seen few Spring Boot + Kotlin projects (especially since it's officially supported since Spring Boot v2)
There are always a lot of things to learn. It's called software development. Nothing is easy - neither storage nor network operations. If you think that you can just pick some magic framework and it will solve everything then you are going to be disappointed.
not much
The node referenced by `pointer.next` is about to become garbage, but it has a reference back to live objects (its `previous`). But thinking about it more, just setting `pointer.next.prev = null` doesn't help much. To really avoid GC nepotism you would have to iterate the whole chain that is about to become garbage and break the links between them. With the links broken, any removed nodes still in YoungGen can be collected during the next Minor GC. If the links are there and if any of the removed nodes have been promoted to OldGen, then the whole chain is kept alive until the next Major GC.
What is this then? https://i.imgur.com/GMIZUpp.png This https://i.imgur.com/FLIDKkd.png This https://i.imgur.com/hDioTQa.png Idk what exactly you mean by validation, but this works fine: https://www.sonarlint.org
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Bare SWT is as native as you can get and it’s as thin as it can get without sacrificing modern UI API principles. However, SWT (like AWT) kind of represents the common ground of Windows / macOS / GTK on Linux and some platform specifics are missing. And that’s where widget libraries like JFace used by Eclipse (and Swing used by IntelliJ) step in. They deliver more complex widgets implemented in a platform independent way on top of SWT (or AWT in case of Swing). They do a terrible job in trying to maintain a native look and feel (it’s subtle but terrible!). Even if they come close there s always a gap, from non-native coloring, odd element distances and arrangements, icon schemes, to slow rendering, lagging reactive layout, you name it. However, unlike AWT where everything is abstracted away or implemented obscurely, in SWT all the missing native stuff is just one call to a HWND or NSWindow away. It’s less a dead end than AWT or JavaFX. Translucent, Custom-shaped windows, that blur the background or obey dark mode in macOS? just one line of code away on SWT macOS. Native browser integration, vulkan/opengl surfaces without flickering or syncing issues? easy!! So if you are willing to build your application in SWT you get access to all of this, and none of the other UI Toolkits have this feature.
Tea, i'm experiencing some annoying performance with IntelliJ 2019. It's Just too heavy (or my computer os just too slow?). Either way, i didn't remember having the same problem with the 2018 version, even thou my laptop is the same
- Java is moving faster. Google for "Devoxx Mark Reinhold Java" he has some great talks on it - Java moves to a 6 month release cadence - Oracle JDK is no longer free for commercial use starting with 11 - OpenJDK is though - New language features are in the works to bring Java closer to C#. But still C# is way ahead. local var type inference, project loom and green threads, case Expressions, etc. - Kubernetes and Docker have nothing to do with Java. - Most Apache stack is still on Java 8 - Spring Boot != Java. I wish people stopped using it. It's annotation based programming is easy but super complex under the hood. Try debugging through it when you need to do something off the worn track.
Music is just for the video theres currently no sound in the game, and I'm quite happy with netbeans :)
So grateful it is not JS
Dropwizard seems to have kind of come and gone really
I used JavaFX for my game and while it's working well there are some issues that needed a workaround (mostly regarding cross platform compatibility). You definitely did the safer choice with swing!
How else would you check it? Use a regex to check if it's matching an integer pattern?
If you don't like it, move to your utopia North Korea.
people are finally mostly adapting java 8, welcome to the future!
Spring Boot is an amazing productivity booster at the cost of sweeping everything under the rug and making it very hard to debug stuff if it somehow doesn't automagically work
Right now to be frank, that's the only thing industry uses. almost 90% of the projects are based on that. So java is almost equal to Spring. (with some small libraries here and there). That's the standard. Plus large companies use Java a lot and they will keep on using it.
GraalVM has come along.
[Quarkus](https://quarkus.io/) and [Vert.x](http://vertx.io/), [GraalVM](https://www.graalvm.org/) and it's associated language runtimes using [Truffle](https://www.graalvm.org/docs/graalvm-as-a-platform/implement-language/)... Native-image using Graal and SubstrateVM make Java one of the fastest and lowest resource options for Microservices and FaaS these days.
Oh! And using GraalJS has made for the Fastest JavaScript runtime in the world: [es4x](https://reactiverse.io/es4x/)... Picture that, JavaScript is faster on the JVM!
The more layers that are stacked up on top of each other the worse it will get.
Thanks for the pointers! I've updated the question slightly. About Docker/K8s, I meant more as a way to actually run the application. A beautiful crafted app that is hell to deploy is not good in my eyes. CI/CD is kind of a must in my eyes nowadays. So maybe that's the question: are there any new technologies that simplifies CD? (rolling deploys, blue/green, etc?)
Scala and Kotlin allow `var` and `val` to be used with fields, while Java does not. The architects decided that adding `val` would be a lot less valuable. More is discussed [here](https://openjdk.java.net/projects/amber/LVTIFAQ.html).
Lol, I remember the good old times of organisations struggle to move to java6 and the jump to java7 was almost eternal. Oracle will definitely milk a lot of money from big orgs that cannot change fast **and** need support. Any suggestions about what openJDK flavour to use for J11?
Thanks!! I didn't know about Quarkus and GraalVM. That looks very cool. I really like the (promised) memory efficiency... in some organisations that might mean reducing considerably the number of servers.
The Spring framework got so complex they designed Spring Boot as a framework for the framework. That seemed to reverse people moving to other frameworks. Also, JavaEE is now called JakartaEE.
 **No programming help questions here!** These should be posted in [**/r/javahelp**](https://www.reddit.com/r/javahelp)
http://www.adam-bien.com/roller/abien/
Yep! GraalVM native image, and by extension Quarkus, are pretty close to Go in memory/startup time. Sometimes Graal is faster, sometimes Go is faster.
Reactive programming is also getting popular, spring also released reactive support in spring 5 -Spring Webflux. Also reactivate db access is being developed. Refer below links https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html https://github.com/r2dbc
*&lt;slow clap of approval&gt;
Why can’t java 8 be involved in cutting edge? Language version doesn’t really dictate the product.
I had an interview with a company a few months ago that said they're working on upgrading to java 6. What even is life?
I think last I checked, Eclipse is planning on spending about $7m this year. That, to me, indicates some level of corporate backing
Reactive programming is back and a new hot thing in my world, although nothing new, just a new term. But a few new frameworks and libs habe picked it up and that helps with it. Also thinking in these terms helps a lot designing new software imho.
peppermint butler looks evil even on beads!
Actually Docker with TestContainers is really useful for integration testing.
The lack of documentation makes it hard to figure out what exactly this library is for. From the examples on the GitHub page I can't tell why I would use this over a simple regex.
However you probably don't need it [https://www.youtube.com/watch?v=5TJiTSWktLU](https://www.youtube.com/watch?v=5TJiTSWktLU)
Kotlin != Java This subreddit is about **Java**, not about *JVM languages*. **Removed**
I picked up Dropwizard a couple of years ago after having been with Spring for \~8 years, never looked back. Spring-experienced devs join our team and..., it's contagious I guess :)
Thanks for mentioning spring-webflux... I've been ignoring it as I thought it was somehow related to **spring-webflow**... which is a different beast.
Everyone and their mothers use NoSQL now, big data or not. It's just convenient. Java 11 is the new LTS version, a lot of projects started migrating, but those staying on 8 are looking into Oracle JDK alternatives (Coretto, Zulu, etc). On the non-Java front, I see more and more Golang positions.
Thanks I will take all your suggestions into account. I'm already working on improving a few things
If you want the same level of productivity with much smaller memory footprint (along with native image support), try https://micronaut.io/
It looks like in your [submission](https://www.reddit.com/r/java/comments/c3cnhs/problem_with_constructor/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You're doing something wrong if UI is the bottleneck in a HST platform.
It's used in over 95% of the back end Java code in production.
I mean maybe new products and even then that's pushing it. There are still a huge number of JEE backends out there and even older with struts and velocity and more.
That still adds up to less than 5% and nearly all new products choose spring Boot.
Right. I believe you.
can you close editor tabs quickly? As soon as a few tabs 50+, it takes minutes to close and Eclipse freezes. If i can choose i use Eclipse for Perspectives, fast incremental compilation, workspace setup and problems view. With Eclipse plug ins you can get postfix completion and auto complete I do wish Eclipse had some IDEA features such as -coloring of variable based on variable textual value in the editor -TAB key for selecting auto complete options -automatic choices when doing a rename refactoring (quite handy in IDEA) -renaming of i8n properties keys in the code. -better get/setter creator
Sdkman.io
&gt; Any suggestions about what openJDK flavour to use https://adoptopenjdk.net or https://www.azul.com/downloads/zulu
No. Because most of compelling reasons why I would switch, like coroutines, data classes, pattern matching are coming to Java. Maybe I am missing something? And no, nullability is not concern of mine.
No, because I'm paid to use Java and not Kotlin.
Personal projects: yes, work: sadly no, there is a large group of Java veterans so it's hard to switch, even in my own team. Businesses are really resilient to change and this rubs off on its people. I always try to shake things up and this often leads to a small following of people who've been waiting for someone like me to come along, but actually changing things is hard. Heck, I've only just managed to create a Java 11 service by effectively forcing it a bit and showing that it just works.
Yes! GraalVM is significant. Also the Module changes (9+) can have a big effect (both positive and negative) on code using internal (unsafe) packages, and can involve significant effort to accommodate. That is a reason many have not moved off 8.
Kotlin for mobile development is good fit, but for backend I would pick Java
Golang is a good adjunct to Java-based applications, in that it can manage Java-based environments and maintain a large degree of the same platform portability. For example, we have a command-line utility in go that manages several different types of Java-based systems in a "command/shell friendly" way.
Yes, me too :) i still like java and there might be situations where it's reasonable to stay with java (in business), which is okay for me, but i would not go back ever again if i don't absolutely have to, which is pretty much the opinion of everyone i talked to as well. There are some fundamental things you need in every second code line that are just so much easier to read and write in kotlin and make your code and design so much better. One really only realizes this after using kotlin (or other languages, Scala, Groovy, typescript, c#) for a while. Sadly, from my experience, most people lacking this experience always argue against... I don't know, even against obviously very nice things, like property syntax, sealed classes, extension functions, or data classes. From my experience, these features lead to objectively better code in all projects i worked. And all my colleagues who overcame the "why is the type on the right" phase are now better and more satisfied developers. And are even enthusiastic again while coding, because it is fun again. Best choice a java developer has nowadays :)
Not that im arguing, but what would be your reasoning for not using it for backend specifically (besides normal cases like existing code base and stubborn devs/business)?
I see zero reasons to use kotlin when you can use any java version you want
For those who may not know, data classes and sealed types are [in the works](https://cr.openjdk.java.net/~briangoetz/amber/datum.html) for Java.
why?
These are good reasons in general. My counters to this are that most of the new features that have been implemented in java lately always feel tacked on and not exactly comfortable. And to a lesser degree, most people are locked into older versions of java and cant adopt the new features quickly (but hey, we're talking hypothetical new projects here so this is probably less of a concern) The new java features get the job done, and by all means if they're good enough, and if you otherwise have no reason to switch languages theres no reason to force it. I love Kotlin but theres a bit too much "you should ditch java and go kotlin now!" which is odd. Not everyone needs to or has a desire to change languages just because. Especially since for the most part (native and mpp aside) it performs the exact same duties as the language you're already using. That being said... It really is a joy to use in comparison. its definitely something i think java devs should play with given the time and inclination to do so. The benefits (to me) are mostly small qol improvements that are hard to grasp until you've experienced them.
But thats not a reason. Thats an opinion (which is a perfectly fine opinion). With that logic the same could be said for mobile though. I was just curious if you had specific reasons why you wouldn't use it on the backend specifically.
Java on Android stuck on Java 7 plus some 8 features if you target API &gt;= 21. On backend you can use any Java version
Java is much more popular for backend than Kotlin. Kotlin isn't that popular for creating enterprise grade applications
Well of course its more popular, there wouldn't be a post asking if people had made the switch from the vastly more popular language to the newcomer if not. But kotlin can be used in the same places and with the same libraries and frameworks you already know in java land. Its even an output target for the springboot initializer. Keep in mind im not necessarily arguing for or against or saying that you are wrong in wanting to use Java on the backend. Just that you made it seem like there were particular drawbacks to kotlin on the backened and so I was curious what those might be. If the answer is simply i and everyone i know already knows and is comfortable with java and it gets the job done thats quite fine.
Vert.x is amazing. Used it in two projects so far with basically no issues whatsoever. Terrific performance, Kotlin support, futures (promises), multi threading/workers, event bus communication, even HTTP Client functionality!
https://www.javatpoint.com/example-to-connect-to-the-mysql-database ?
I still get some error like main class not found ~
Nothing is permanent in IT... Doing Kotlin at the moment, will probably change back to Java soon enough as clients require it...or TypeScript, JavaScript, Go or something else entirely...
https://stackoverflow.com/questions/18093928/what-does-could-not-find-or-load-main-class-mean
Do you have a source for that?
I feel that the way pattern matching is implemented in Kotlin, vs what is being proposed for Java, is quite lacking. It's quite underpowered in Kotlin (compared to for example Scala or what's proposed for C#), and it seems that Java is going with the more powerful option as well. For coroutines, we have offerings like Vertx and Akka, and while not exactly the same, the underlying principle is exposed in a usable manner (events vs green threads), so again not much to miss there as far as I'm concerned. Nullability can be enforced using `@NonNull/@Null`, and can be checked at compile time as well. Kotlin has some nice features like extension methods, but I'm not sure that alone is worth adding yet another dependency into the system (a whole compiler), let alone how it's going to interact with whatever frameworks you're using.
Java has died at least 13 times... and is still going strong.
That's what I was hoping to avoid! Swing comes with it's own drawbacks but I'm liking it :)
It looks like in your [submission](https://www.reddit.com/r/java/comments/c3ff9q/would_this_translate_well_to_pdf_sierra_bates_oca/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
yeah it's a full-fledged web app, so if things don't work you really have to understand the internals of a huge complex framework to understand why (or find a quick workaround)
No, because kotlin is unstable, undocumented and complicated compared to java. Compatibility with standard java api isn't great (interface default methods for example or companion objects), a lot of essential documentation is missing (for example how to implement hashcode for a custom List), the compiler is buggy and generally all the third party tools for documentation, code analysis, building and so on aren't in the same level. Also the future of kotlin is very questionable, for example if our when it will get value classes, as they already have inferior inline classes and it's unclear how kotlin will progress.
JVisualVM - bundled with jdk Java flight recorder - IIRC bundled with Oracle jdk 7+ and with open jdk 11+
Much needed. The current set of JDK classes for pseudo-randon number generation are somewhat *random*: &gt; *adjective* &gt; proceeding, made, or occurring without definite aim, reason, or pattern
As an addendum to this, a `java.util.random` package was [suggested](https://mail.openjdk.java.net/pipermail/core-libs-dev/2019-June/060995.html) for the increasing number of random-related types. Personally, I don't know how this could be done with the existing classes already in `java.util`. Any ideas?
Finally! The sooner Java gets fibers and continuations the better. You can do very cool tricks with them.
Java has a huge advantage over all other boutique languages - it can change the VM. When the Java teams adds something like co-routines it's not just sugar. It's a deeply integrated feature down to the JVM. The rate that they've been adding features should be encouraging to everyone. In a few years, Java will be way ahead of Scala, Kotlin, etc.
 I'd imagine that they would leave the existing Random classes in their current location, and have them implement the new interfaces that would be located in the `java.util.random` package.
&gt;JVisualVM - bundled with jdk Doesn't work with JDK 13 currently nor does it seem to provide a whole lot more than whats already provided by an IDE.
&gt;Doesn't work with JDK 13 currently JDK 13 won't be released for another three months.
It's compiled from source.
I agree that they must leave the existing classes where they are. I just think it might be a little awkward for \`Random\` to not live in \`random\`.
I find it quite funny how one could write long lists about what (already right now) is better in kotlin, while comparing to features java MIGHT somewhen in a distant future get in a better form (or not, look at var.. ) and than it's always "don't know if one nice feature is worth a change". That's ridiculous :D
What Java 8 features are it that make the difference for you, lambdas?
You can get the EAB [here](http://jdk.java.net/13/). You can even get one for [14](http://jdk.java.net/14/).
Why would you wanna continue using Java I don’t understand? When there’s kotlin available with great interop
Fibers sound veeeery interesting. It's going to be used in APIs massively.
Fibers are a JVM feature that kotlin's continuations will benefit from.
One of the biggest game changing features coming. There are so many cases where I'd want to just fire off 10000 fibers without being concerned about memory and OS impact. CompletableFutures and the fork join pool get close, but often aren't quite good enough.
As others have said, yes - and spring boot in particular. Server side Java is basically \*always\* Spring nowadays - and client side Java isn't a thing anymore. There's a heck of a lot of other spring projects around too, some of which are worth knowing about but tend to be used much more sporadically.
Ah i see. Thought it was a Java specific feature
Yeah, I know. What I'm saying is that if x doesn't work with an unreleased version of the JDK, you should at least wait until the release.
Yeah, I get what you mean.
This sounds like yet another reinvention of threading by bored people? I recently worked on a project that used every different kind of thread implementation one could use with java it seemed like, and frankly, I think the original Runnable/Thread model was the easiest to use and read later.
java's got continuations right now (i'm a maintainer): [https://github.com/kilim/kilim](https://github.com/kilim/kilim) &amp;#x200B; works with all current versions of java and it's very lightweight
you can do that right now: [https://github.com/kilim/kilim](https://github.com/kilim/kilim) &amp;#x200B; low end boxes can handle 100k concurrent connections
Try rxjava.
They've been delivering so far, and you can read about the proposals about upcoming features online, and in some cases even download the JDK with said features to test them out. I'm not sure what you mean about `var`, I'm assuming you mean there's no `val` counterpart. Sure, things aren't perfect, but so isn't Kotlin. When working on large projects, you have to evaluate things holistically. I'm not dissing Kotlin by any means, it's a commendable effort, but from what I'm seeing in production environments, a few nice syntactic features here and there are outweighed by stability, maintainability, and reliance on fewer dependencies.
continuations have been available in java since at least 2006 &amp;#x200B; here's a comparison of current fiber implementations for the JVM. i know the author looked into using loom but i don't believe it was usable at that point (not sure of the current status) [https://github.com/vy/fiber-test](https://github.com/vy/fiber-test) &amp;#x200B; i'm the maintainer of kilim, which does well in that test [https://github.com/kilim/kilim](https://github.com/kilim/kilim) &amp;#x200B; kilim is lightweight and efficient, but at the expense of only running methods that throw a \`Pausable\` "exception". last time i looked, Loom aspired to be able to run most java code without blocking at the expense of being significantly slower (at stack depths less than 100). quasar is a project by the same author that aspired to a middle ground in both regards &amp;#x200B; i'm psyched for the arrival of Loom, but in the meantime, there's no reason to be blocking - try kilim today ! it works with all current versions of java and i expect to release \`2.0.2\` next week which will support java 13-ea (ie, using ASM 7.1)
fibers are much lighter weight than threads - low end boxes can handle 100k concurrent connections. and they enable a much simpler approach to concurrency
Disable as many plugins as you can, especially ones not included by Idea themselves. Some of the user contributed ones break with new versions and mess things up. But I’m still having a problem where IntelliJ doesn’t rebuild automatically when I make changes. It’s really frustrating - can’t even remember if Eclipse had that.
Please post this in /r/javahelp and give your post a more descriptive title next time.
Hey are you the author of a framework that has provided this for years? Wow!
I think posting this 2 or 3 more times would be a good idea
half of kotlin is experimental and the other half is slower than Java
half of kotlin is experimental and the other half is slower than Java
If I were to switch languages it would be to something with higher performance than Java
I think you're just making my point.
Yet a 7th option or something? No thanks.
I am a huge fan of Java Mission Control ("JMC"), which is now open source - [https://github.com/JDKMissionControl/jmc](https://github.com/JDKMissionControl/jmc) One of the main reasons I prefer this is because it's been apart of Java for a long time and is now OSS. Plus, you can now add things like a flame-graph stack traces. Link here: [https://github.com/thegreystone/jmc-flame-view](https://github.com/thegreystone/jmc-flame-view) . If you don't feel like building it since Oracle doesn't always release binaries, then you can grab them from Azul here: [https://www.azul.com/products/zulu-mission-control/](https://www.azul.com/products/zulu-mission-control/)
yesss
wat, java is much more conservative than those 2, when is it gonna get higher kinded types? Probably never.
Why wouldn’t you want checked exceptions for thing that could very well be expected to fail?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I don't know why you're getting down voted. How is kilim different that quasar? A cursory look at the link looks interesting. Right now, not something I'd hop straight into bed with, but worth fooling around with.
&gt; Why would you wanna ... This question really grinds my gears. Here's the biggest reason, I have a job and I get paid to write Java. There more solid language features I get, the more interesting my day to day grind is. Get a job and you'll understand. The worst part is that I'm a JVM fanboy. I love writing Clojure, Scala, Java, Kotlin, and even Groovy. But every time I see the question asked, I feel like the person asking it is not stupid than the last person that asked it. **Rant done***
I dunno man, try googling "why did languages stop having checked exceptions".
I agree having more options would be better, but I also appreciate the simplicity of the current classes if all you need is a uniform random generator. I don't use C++ much, but I remember playing around with C++11 RNGs and felt like I had to make a lot of decision that didn't matter. I like having a sensible default available for when I don't know or care about specifics.
They could do something really messy, like change `java.util.Random` to `extends java.util.random.Random` and move the current class to the new package.
Then it would be Rust (or C++?) or what is in your mind?
Pity the proposal doesn't include an implementation or Rngesus.
I've switched to Kotlin as my general purpose language last year (tools for shuffeling files around, Excel reading/writing, code generation, xml transforming, ...) and from this year on I'm using it at my job (enterprise) with Spring. In a side project with Vert.x. No pitfalls or horror stories. I'm very exited about Kotlin. Too me, the difference is quite big and I'll stay with Kotlin. But I don't want to preach about it. Of course you get the job done with Java. For all curious: Kotlin is worth a try (and very easy to pick up for a Java dev). You won't waste your time trying it out.
Java has been the *new* Cobol/C++ for a long time :D.
Going in a slight tangent, could you expand on how you found NoSQL to be convenient? Just before I started this break I was in a few projects using NoSQL. In some, NoSQL was a great fit and in some it was a horrible fit, but imposed from the organisation (AKA: all new projects must use XXXX)
Definitely not C++. Rust or assembly might be fun
Not sure why they even consider putting everything into the `java.util` package. Why not just use `java.random`
I read "why coroutines are coming to java" :(
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
No this is a waste of time. The garbage collector will clean them up.
What parts of kotlin are slower than Java?
Yeah I guess if you don’t understand what you’re talking about you might think they are the same.
&gt; I think you're just making my point. &gt; This sounds like yet another reinvention of threading by bored people?
The classes can be more modular and more flexible without making them unduly complex. All a PRNG needs to do is generate random ints (or longs), there then should be default adapters that can turn them into a source of random doubles, floats etc.
bit twiddling
&gt; bit dwindling &gt; other half ok
base64, byte manipulation. the basics
Why do you believe this would be slower in kotlin? Do you have benchmarks?
I have done testing personally. It's not surprising considering that kotlin is a higher-level language
Threads are managed by the OS, they are expensive to create, kill off and switch to and from. Fibers are managed by Java itself, making them more lightweight, cheaper to create, kill off and switch. Fibers essentially do run on threads, but they just use them more effectively. If a thread has to wait, it can't do something else and no one else can use the thread. If a fiber has to wait, something else can use the resources it was using in the meantime.
Tf? Runnables and Futures are totally different things. They solve different problems. You can use Futures with Runnables because they're orthogonal to each other. Futures are a way to pass around results. Runnables are a way to encapsulate an algorithm.
I have two questions: 1. Do Loom people cooperate with OpenJ9 people so that at least two separate VMs get the implementation at the same time? 2. What was wrong with the original continuation implementation in Da Vinci Machine from Stadler. Did you reuse some parts of it in Loom?
Can you share your tests? A quick and dirty test of the java 8 Base64 implementation vs a version compared to kotlin: ``` Benchmark (length) Mode Cnt Score Error Units Base64Java.base64Java 0 avgt 10 22.694 ± 0.620 ns/op Base64Java.base64Java 100 avgt 10 112.868 ± 0.893 ns/op Base64Java.base64Java 1000 avgt 10 938.298 ± 13.480 ns/op Base64Java.base64Java 10000 avgt 10 9211.319 ± 65.165 ns/op Base64Java.base64Kotlin 0 avgt 10 21.526 ± 0.215 ns/op Base64Java.base64Kotlin 100 avgt 10 113.145 ± 0.858 ns/op Base64Java.base64Kotlin 1000 avgt 10 945.152 ± 5.182 ns/op Base64Java.base64Kotlin 10000 avgt 10 9249.511 ± 211.441 ns/op ``` Performance is pretty much the same for both, which makes sense since the generated bytecode will be very similar.
Eh; it brings some new ideas on the table; unfortunately every tutorial is obsessed with the low-level mechanics while missing the higher-level operations....
That was at least the intention
It was faster in some cases, and slower in some others; and making it faster in all cases seems to hard to be worth it, so the legacy indexer is still preferred.
Maybe you can contribute improvements or at least report bug?
Maybe you can contribute improvements or at least report bug?
The Linux themes are quite nice. Even on Windows, you can now select the Linux theme, however I don't know if it looks the same.
A quick-fix to convert to `var` is available since 4 versions ago: https://www.eclipse.org/eclipse/news/4.8/jdt.php#java-10 About using `var` for "extract variable" refactoring, I'm not sure whether it's available. You can open an enhancement request to https://bugs.eclipse.org/bugs/enter_bug.cgi?product=JDT&amp;component=Text .
The presentation did cover existing solutions. But the idea was to avoid reinvention of basic language features like control flow etc. and use code that fits in nicely. I bet Kilim would be able to take awesome advantage of native continutations in Java and build on top of it. But the really exciting thing would be native support. BTW, does Kilim support "continuation serialization" which was mentioned briefly in the talk? That is a killer feature to have IMHO.
It's a reinvention of threading that multiplies the number of "threads" by a factor of like 100. If you're writing a server, this lets you keep the simple "spawn one thread per connection &amp; blocking I/O" programming model *and* handle 100K concurrent connections. Like pretty much everyone else, bored people like being able to do things they previously couldn't.
Here is an example where performance is the same: https://pastebin.com/GfVg0t0P https://pastebin.com/U57PqUk6 https://pastebin.com/ssrgw9Y3 https://pastebin.com/kVcW8wmh But here is where Kotlin freaks the fuck out: https://pastebin.com/rPAmNr2c https://pastebin.com/YjtSfFj2 https://pastebin.com/HWnqyumj
Have you looked at Revo uninstaller? It will guide you through a process of doing that.
I'm a professional developer as well and i can tell you out of experience that those instabilities people talk about won't appear. It's a theoretical thing. From my experience, kotlin usage is as stable as java usage. I think people telling otherwise ran into edge cases or read Bug tickets on youtrack. I also wonder when people start telling me things i don't know yet, i KNOW there are working prototypes, i used some of them because i am totally interested in all this jvm stuff, nur that's largely irrelevant for NOW because all those things will take another few ages until they get delivered. If you use kotlin for a time you will see that those "few syntactic features" exactly make the whole difference for maintainable code.
I don't see much of a difference in performance? ``` Benchmark (dataLength) (length) (offset) Mode Cnt Score Error Units ExJava.exJava 10000 1 1000 avgt 10 3.279 ± 0.309 ns/op ExJava.exJava 10000 2 1000 avgt 10 3.956 ± 0.093 ns/op ExJava.exJava 10000 3 1000 avgt 10 4.669 ± 0.188 ns/op ExJava.exJava 10000 4 1000 avgt 10 5.097 ± 0.111 ns/op ExJava.exKt 10000 1 1000 avgt 10 4.593 ± 0.316 ns/op ExJava.exKt 10000 2 1000 avgt 10 4.427 ± 0.189 ns/op ExJava.exKt 10000 3 1000 avgt 10 4.723 ± 0.206 ns/op ExJava.exKt 10000 4 1000 avgt 10 4.960 ± 0.365 ns/op ExJava.exKtUnsigned 10000 1 1000 avgt 10 4.196 ± 0.625 ns/op ExJava.exKtUnsigned 10000 2 1000 avgt 10 4.559 ± 0.422 ns/op ExJava.exKtUnsigned 10000 3 1000 avgt 10 4.483 ± 0.443 ns/op ExJava.exKtUnsigned 10000 4 1000 avgt 10 4.639 ± 0.243 ns/op ExJava.munch 10000 1 1000 avgt 10 2.624 ± 0.012 ns/op ExJava.munch 10000 2 1000 avgt 10 4.358 ± 0.016 ns/op ExJava.munch 10000 3 1000 avgt 10 6.778 ± 0.031 ns/op ExJava.munch 10000 4 1000 avgt 10 8.381 ± 0.021 ns/op ExJava.nothing N/A N/A N/A avgt 10 1.767 ± 0.007 ns/op ```
Java is not an anti-virus, it's not trying to be not uninstallable by viruses.
use Throughput @Benchmark @Fork(value = 1, warmups = 1) @BenchmarkMode(Mode.Throughput) @Warmup(iterations = 1)
Still no difference? ``` Benchmark (dataLength) (length) (offset) Mode Cnt Score Error Units ExJava.exJava 10000 1 1000 thrpt 20 283006924.184 ± 17765022.085 ops/s ExJava.exJava 10000 2 1000 thrpt 20 234230770.248 ± 10748358.926 ops/s ExJava.exJava 10000 3 1000 thrpt 20 201657514.023 ± 5615164.830 ops/s ExJava.exJava 10000 4 1000 thrpt 20 183212851.337 ± 6640352.097 ops/s ExJava.exKt 10000 1 1000 thrpt 20 221409228.698 ± 16467815.866 ops/s ExJava.exKt 10000 2 1000 thrpt 20 211480541.297 ± 6274714.336 ops/s ExJava.exKt 10000 3 1000 thrpt 20 213613494.144 ± 7671602.813 ops/s ExJava.exKt 10000 4 1000 thrpt 20 200520904.145 ± 5860907.381 ops/s ExJava.exKtUnsigned 10000 1 1000 thrpt 20 217752425.459 ± 21534344.044 ops/s ExJava.exKtUnsigned 10000 2 1000 thrpt 20 204203326.635 ± 15344903.492 ops/s ExJava.exKtUnsigned 10000 3 1000 thrpt 20 204642777.897 ± 18138559.856 ops/s ExJava.exKtUnsigned 10000 4 1000 thrpt 20 198722892.390 ± 12528735.844 ops/s ExJava.munch 10000 1 1000 thrpt 20 377291180.109 ± 7839558.579 ops/s ExJava.munch 10000 2 1000 thrpt 20 227427889.316 ± 5827648.916 ops/s ExJava.munch 10000 3 1000 thrpt 20 147313208.214 ± 898751.782 ops/s ExJava.munch 10000 4 1000 thrpt 20 118594996.411 ± 1173385.421 ops/s ExJava.nothing N/A N/A N/A thrpt 20 559707792.175 ± 18909001.988 ops/s ```
Have you tried it with len set to 3? My results show kotlin has 13% of the throughput that Java does
Yes, it's part of that test run. Throughput is within error ranges.
1. Every public-facing API becomes part of the Java specification so that all JDKs must implement it. As soon as IBM is ready to start implementing continuations they can reach out to us for clarification. 2. We're not using that code because it doesn't do what we need. It's very fast, but it's not flexible enough for our needs.
I don't know what to tell you. package com; import org.openjdk.jmh.annotations.*; @State(Scope.Benchmark) public class JMH { private byte[] rlp; @Setup(Level.Trial) public void setUp() { rlp = new byte[] { (byte) 0xf8, (byte) 148, (byte) 0xca, (byte) 0xc9, (byte) 0x80, 0x00, (byte) 0x81, (byte) 0xFF, (byte) 0x81, (byte) 0x90, (byte) 0x81, (byte) 0xb6, (byte) '\u230A', (byte) 0xb8, 56, 0x09,(byte)0x80,-1,0,0,0,0,0,0,0,36,74,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, -3, -2, 0, 0, (byte) 0xf8, 0x38, 0,0,0,0,0,0,0,0,0,0,36,74,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 36, 74, 0, 0, (byte) 0x84, 'c', 'a', 't', 's', (byte) 0x84, 'd', 'o', 'g', 's', (byte) 0xca, (byte) 0x84, 92, '\r', '\n', '\f', (byte) 0x84, '\u0009', 'o', 'g', 's', }; } @Benchmark @Fork(value = 1, warmups = 1) @BenchmarkMode(Mode.Throughput) @Warmup(iterations = 1) public void headlong_encode_java() { Original.getInt(rlp, 0, 3); } @Benchmark @Fork(value = 1, warmups = 1) @BenchmarkMode(Mode.Throughput) @Warmup(iterations = 1) public void headlong_encode_kotlin() { // Handwritten.Companion.getInt(rlp, 0, 3); Converted.INSTANCE.getInt(rlp, 0, 3); } }
no. Kotlin is like MS J# a wedge to split the community. Kotlin has ::::: everywhere. Kotlin is harder to read. Too concise. No type variable declaration. Verbosity is good for reading.
 Benchmark Mode Cnt Score Error Units JMH.headlong_encode_java thrpt 5 1392132622.154 ± 16552611.708 ops/s JMH.headlong_encode_kotlin thrpt 5 242488978.497 ± 23699291.569 ops/s JMHScratch.headlong_encode_kotlin thrpt 5 217793272.003 ± 18983891.311 ops/s
There are several alternatives, but they all have different trade offs. JFR will give slightly less biased profile samples than most profilers, but won’t record time spent in native calls. Perf agents on Linux and dtfuss on macOS can provide excellent results for compiled code, but won’t provide any help with allocations. The eclipse Memory Analyser is my usual tool of choice for understanding heap dumps. It has a good query system, and helpful quick reports for finding common issues. Tools like the flame graph scripts are very good at providing insights from profiling data, and I’ve spent a lot of time with those. I also find a simple benchmark combined with gc logging is often helpful when trying to understand strange performance characteristics. The thing you need to do first is characterize your problem and then start thinking about which tools are most likely to help in that.
Your testing methodology is broken. The biggest factor is that you don't use the result of getInt, which means that if the JIT is lucky it can eliminate the entire method call. If you fix that you get most of the performance difference back You should also use a random array at least per-iteration
I've tested it both ways and the result is the same. The call is not being eliminated. Some of the reasons I know are because I get an exception when len is 0, and running an empty benchmark results in much more ops/s. &gt;i + 1 instead of 1 + 1 Oh. Thanks.
I'm not really familiar with either continuations or fibers (although I read a little bit about them online veggie posting). What problems do they solve? Genuine question.
Kotlin != Java This subreddit is about **Java**, not about *JVM languages*. **Removed**
That's not the same though. All changes the jit does will be transparent except in timing. If you don't use the call result you will still see the exception but that might just be the sad path the jit inserts. The happy path will still have the dead code eliminated. You can see this very easily if you just blackhole the result of the call. Performance of the java version goes down considerably because now jit can't eliminate the code
JMH version: 1.21 isn't doing that. I've tested it about 50 different ways
A common one is blocking code e.g. querying a database or making a network call. Right now each one of those takes one Thread; Threads go down to the OS level and are relatively resource-expensive (RAM and context switching) so don't scale well. Fibers are much more lightweight, a Java abstraction. I'm hoping that over time they will get support in low level libraries (okio, okhttp, jdbc drivers, spring) so as a library user I don't have to do anything but get more throughput on my servers.
Thanks. Will need to improve documentation. It works with InputStream without loading the whole target into memory. Also regex in many cases is not so fast.
On the docker &lt;-&gt; java land, there is actually one neat tool that Google released last year, called Jib, it's basically a tool for Java/JVM that would build your project into a docker image, with some nice benefits: 1. Doesn't need Docker -- they implemented it all in Java, so it can produce the image fast and without any external dependencies 2. The resulting image is quite efficient because they layer dependencies, classes and resources separately 3. Plugins for Maven and Gradle 4. You don't even need to write a Dockerfile The announcement: [https://cloudplatform.googleblog.com/2018/07/introducing-jib-build-java-docker-images-better.html](https://cloudplatform.googleblog.com/2018/07/introducing-jib-build-java-docker-images-better.html)
As far as JDBC drivers and HTTP clients I'd rather have them support non-blocking IO in the first place. It's been available for a while now, but only dedicated DB drivers support it.
I really can't reproduce that with blackhole. I also don't see *why* there would be a difference - the generated bytecode is remarkably similar. Paraphrasing Shipilev: You should never consider JMH results as final - you also need to look at the codegen to see *why* there are performance differences.
Yes, and we should equally distrust JMH when it says the performance is the same.
The downside of the current db solutions is having to rewrite the calling code to be reactive, all the way up your call stack. That's a big job for many projects and many developers aren't used to the reactive way of coding. Also I don't think any of them are actually 'JDBC' as it's a non-reactive API. With fibers it could be used as is.
Streams. From Java 7 which available only from API24 is CompletableFuture
But I can't verify your results when I can't reproduce them.
&gt; JavaEE is now called JakartaEE. I don't care still calling it JavaEE.
We're discussing Kotlin in the context of Java - why would you remove it?
Ironically, back in the day, Java didn't use OS threads and instead implemented user-level "green threads". I find it interesting that we're moving back to a hybrid model.
I guess Kotlin is just broken on skylake then # JMH version: 1.21 # VM version: JDK 1.8.0_202, Java HotSpot(TM) 64-Bit Server VM, 25.202-b08 Benchmark Mode Cnt Score Error Units JMH.consume avgt 5 1.783 ± 0.796 ns/op JMH.java avgt 5 2.988 ± 0.209 ns/op JMH.kotlin avgt 5 5.969 ± 0.347 ns/op package com; import org.openjdk.jmh.annotations.*; import org.openjdk.jmh.infra.Blackhole; import java.util.concurrent.TimeUnit; @State(Scope.Benchmark) public class JMH { private byte[] rlp = new byte[] { (byte) 0xf8, (byte) 148, (byte) 0xca, (byte) 0xc9, (byte) 0x80, 0x00, (byte) 0x81, (byte) 0xFF, (byte) 0x81, (byte) 0x90, (byte) 0x81, (byte) 0xb6, (byte) '\u230A', (byte) 0xb8, 56, 0x09,(byte)0x80,-1,0,0,0,0,0,0,0,36,74,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, -3, -2, 0, 0, (byte) 0xf8, 0x38, 0,0,0,0,0,0,0,0,0,0,36,74,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 36, 74, 0, 0, (byte) 0x84, 'c', 'a', 't', 's', (byte) 0x84, 'd', 'o', 'g', 's', (byte) 0xca, (byte) 0x84, 92, '\r', '\n', '\f', (byte) 0x84, '\u0009', 'o', 'g', 's', }; @Benchmark @Fork(value = 1, warmups = 1) @BenchmarkMode(Mode.AverageTime) @OutputTimeUnit(TimeUnit.NANOSECONDS) @Warmup(iterations = 1) public void consume(Blackhole blackhole) { blackhole.consume(Integer.MAX_VALUE); } @Benchmark @Fork(value = 1, warmups = 1) @BenchmarkMode(Mode.AverageTime) @OutputTimeUnit(TimeUnit.NANOSECONDS) @Warmup(iterations = 1) public void java(Blackhole blackhole) { int x = Original.getInt(rlp, 0, 3); blackhole.consume(x); } @Benchmark @Fork(value = 1, warmups = 1) @BenchmarkMode(Mode.AverageTime) @OutputTimeUnit(TimeUnit.NANOSECONDS) @Warmup(iterations = 1) public void kotlin(Blackhole blackhole) { // int x = Handwritten.Companion.getInt(rlp, 0, 3); int x = Converted.INSTANCE.getInt(rlp, 0, 3); blackhole.consume(x); } }
For running in containers I think the goals are to keep your container as small as possible and to maybe improve startup times in some cases. For size, the JDK module system with jlink can help cut size by creating a JDK with only those modules you need. Also avoid pulling in entire libraries when you only use one or two functions in it. It is sometimes better to roll your own rather than pull in a ton of dependencies because of DRY. For speed you ca check out GraalVM/SubstrateVM to produce native binaries and avoid the JIT interpreter startup cost. But note you'll lose out on any tiered compilation optimizations in this case....which is one of the sexiest parts of the JVM in my opinion. Alternatives to Spring...not sure other than to pick libraries that can achieve the same without the all or nothing approach that Spring takes. I think this is the main reason I dont like it. You need to bend your architecture hard to fit into the Spring design. If that works for your requirements great. But for me I much rather simple code that I can understand than the magic spring offers.
I doubt that would fly in a production JDK.
That's not 20%, but I think I see the issue: The exception string concatenation is indyfied on java 8+, but remains as stringbuilder with kotlin. So it isn't the bit operations after all, they're just collateral damage from the additional jit load.
I'm not testing the exception case
Yes? I don't know what programs (other than anti-virus/anti-malware software) you've encountered that are hard to uninstall but if there's a lot of them then you're being careless. The JRE is not an AV. It's a platform for Java programs. That's it. No decent program makes itself hard to uninstall.
I don't normally push my opinions on other people but you gotta at least try IntelliJ for one of your projects. It's godly. If you have tried it and still stick with NetBeans I can respect that though.
&gt; Quick Assist to convert from type to var is provided This is great already, thanks for the tip, I haven't noticed it. Probably will save me a lot of Tabbing and typing var plus all the dumb mistakes doing it manually entails! I'll also make a bug report, thank you very much friend!
Most of the projects I did so far handled data as jsons, so MongoDB, Cassandra and Elasticsearch popped up in one form or another. I work for a contractor company, so I get to see lots of clients and their setups.
It doesn't matter, jit is still affected just by the exception being present
Not having seperation of concerns is exactly what made code written with it so difficult to parse later and so hard for people new to the project to understand. You can greatly increase readability by separating things out better - putting your executing code in methods (not crammed into inline lambda's in the same code that you're chaining together), formatting your lambda's better (1 call per line), etc. But then you basically end up back where you where with runnable/thread to begin with, which actually worked perfectly fine.
Sounds like the JIT is brain-dead, at least when Kotlin is at the wheel.
No, jit is just super finicky and easy to confuse. Kotlin and Java code produce similar bytecode, so they will jit to similar performance. It's just the super tight cases where jit can do unpredictable things
&gt;You can do very cool tricks with them. Cool tricks are not conducive to long term maintainability, security or reliability.
How is Kilim different than Loom? Is Kilim a drop in replacement for Threads? I'm surprised I've never heard of it. I did a quick look at the Kilim repo and it seems to work differently than Loom. If Kilim is drop-in replacement for Threads I wonder what Oracle is getting at. Did the take the guy that wrote it for Loom (like they did with Joda time)?
Java is not a program, it's a programming languaje.
Oh god, I worked with Eclipse RCP long enough. I don't want to touch it ever again. I remember that one time I had to create a custom event listener on text fields for background color changes. The platform of course didn't support those kind of events so no way around subclassing `Text`. My implementation did only add and remove a listener yet it threw an exception. I found this method in a super class: [checkSubclass\(\)](https://help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.platform.doc.isv%2Freference%2Fapi%2Forg%2Feclipse%2Fswt%2Fwidgets%2Fpackage-summary.html) &gt; Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden. &gt; IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion. &gt; The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy. Looks like you need to "sign a contract" that I know what I'm doing and override this method. Thats the kind of code you write in Eclipse RCP.
Check out [https://github.com/jvm-profiling-tools/async-profiler](https://github.com/jvm-profiling-tools/async-profiler). Due to its architecture it's much better at finding true hotspots and you can easily read the output on a flame graph.
I use sparkjava, but the market is on Spring and there is little sign of this changing in the short term. Which I hate, because I just can’t get to like it myself.
You can simply uninstall it through the control panel.
I wonder, aren't Continuations pretty much the same concept such as Green Threads? So, why did the JVM change to native threads?
The downvotes suggest otherwise.
On reddit I've found numerous upvotes or downvotes mean you're making an accurate point.
Thank you. May I have two more questions - just out of curiosity, you do not need to comment. 1. Did Oracle hire you before you submitted the proposal for Loom or afterwards and the timing just clicked? 2. Wasn't Loom 'manifesto' directed against reactive streams 'manifesto'? It feels like so to me. Was there some threat that other major Java players could hijack next stage of scalability on the JVM by introducing functional paradigms further into mainstream Java?
Minor nit in their choice of names, in that I feel an RNG type should be called `RNG` not `Rng`. But that's just my opinion. I'm looking forward to playing with this implementation!
It depends. You can have frameworks that do batching under the hood with continuations or fibers, without having to explicitly write batching logic in your processing code. Get 10000 blocked fibers, do a batch IO request that writes/reads 10000 items in one go, then resume the fibers. Code running each fiber would just do performIO(), and block, and would not be more complicated than that. IMO simpler business logic code = better long term maintainability. Having to write batching logic once is more reliable than having it mixed up with business logic all over the place.
1. Before. Changes like this are usually discussed for a *long* time before a proposal is put forward. 2. We make the JDK and try to keep the included functionality as minimal as possible. As the saying goes, "perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away." The current trend is to shed as much *existing* functionality from the JDK to external modules as possible, and certainly not to add more baggage. The things we want included in the JDK are 1. things that can only be implemented in the JDK (require VM changes or must be in internal modules), 2. things that are so basic that you cannot program without (some batteries included), or 3. things that are tricky/critical and we want to offer what we think is a good default. Continuations fall in 1 and fibers (once you have continuations) in 2 and or 3. The rise of reactive frameworks only showed that there is a need for some functionality, and the grumbles about them showed that they're not the right approach. And let me be clear about the last point: to say that most people find reactive frameworks problematic is a *huuuuge* understatement. When one of the leading experts in reactive essentially said [don't use them unless you absolutely have to](https://youtu.be/5TJiTSWktLU), that was just telling us what we already knew: those who like the style are welcome to use it, but it's just not a solution for most situations, and a good solution can only be done in the JDK.
Nice to see some acvitity going on in 356. Last time I checked there has been no activity since 2017. If any of you guys want to keep at the dev comments: https://bugs.openjdk.java.net/secure/Dashboard.jspa?selectPageId=18216
&gt; The downside […] is […] to be reactive FTFY. Here's why: https://www.youtube.com/watch?v=5TJiTSWktLU TLDW: You're not Netflix and Reactive is complicated as hell. I love my stack trace.
It's the definition of bikeshedding, but I couldn't help myself. Here is why I think acronyms shouldn't be all caps (even though it's technically correct): - Sometimes the next camel case letter forms a new acronym, which is confusing: `HTTPServer` - Chained acronyms make it hard to find the concept boundary (bonus points if you are not familiar with the acronyms): `MQTTHTTPAdapter` - Leads to inconsistent naming rules: By convention, if no better name is available, variable names are the class name with the first letter in lowercase. But not so for `rNG`. For what it's worth, [Stack Overflow seems to agree](https://stackoverflow.com/questions/15526107).
Did COMSAT also show up when continuations were pitched within Oracle while they were still in the talks with you? I think the year 2013 was critical - lots of compeeting solutions for Java scalability issues were unveiled like Netflix's RxJava, your Quasar, Pivotal soon followed the suite with project reactor. After RxJava and reactor won the critical mind share, leaving Quasar behind, did you subjectively feel the resposibility to save the platform's sanity? Was it like a duty call to you to participate on Loom?
I'm pretty sceptical about non-blocking IO. Operating system schedulers have so much optimizations behind them that I doubt a library or language level implementation can schedule things more efficiently. With IO there's always going to be blocking somewhere. The lightweight threads aka fibers on the other hand can be faster when you're running many applications on a same server, thus consuming a bit less memory, but I don't expect a huge increase even then. I'm hoping to be proven very wrong tho...
Does your second paragraph rebutt the first? :-) I hear that switching Thread context at the OS level is quite expensive, maybe the JVM doesn't need all the features that provides so can do a much more lightweight implementation. The blocking problem is I think the JVM's choice to block an entre Thread where at the OS level that isn't actually required. Fibers fix that. And RAM plays a big part. I think Tomcat defaults to 1MB per Thread and it opens a lot of those to serve requests.
&gt; he platform of course didn't support those kind of events so no way around subclassing Text Have you tried to contribute this to Platform back then? &gt; Looks like you need to "sign a contract" that I know what I'm doing and override this method. The documentation basically says that while the code may allow it, subclassing is not considered as a feature of SWT itself at the moment, and isn't to be considered as a SWT feature. I don't get what's wrong with a project stating that some behavior is not supported and adding support to it needs to be negociated by the project. All APIs have limitations in term of features and in term of current support, but that scope is moveable and the documentation explains it clearly..
It seems desirable to let the platform choose the algorithm, so the average developer can benefit from the wisdom of the JDK engineers (most developers probably don't keep up with the PRNG / CSPRNG literature, but maybe that's just me). But if there is a convenience factory method like `var rng = Rng.secure(seed);`, it's important that the same seed will lead to the same sequence of random numbers, for reproducibility / testing purposes. So the algorithm can never be changed and any future advantage is gone. So it seems like factory methods make sense only for unseeded RNGs, or am I missing something?
Heh. I take software seriously, but not *that* seriously. I was just happy to work on one of the most talented top-tier teams in the entire software industry. Sure, I was happy that the Java architects thought fibers were the right approach, but I wasn't too surprised that they'd want some solution in the JDK. After all, pretty much every other leading platform has tried to tackle this in the language/runtime. Whatever approach you take, to be first-class it must at least work well with debuggers/profilers and similar tools, and the best way to do that is in the JDK.
Well I did some digging and it seems my intuition was right... This doesn't sound good at all: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1364r0.pdf
Oh dear, no that doesn't sound good :-(
&gt; Have you tried to contribute this to Platform back then? No, and it is a very special case. I have no problem if a platform doesn't support it as long as it is extendable enough to achieve a solution which is the case in SWT. &gt; The documentation basically says that while the code may allow it, subclassing is not considered as a feature of SWT itself at the moment, and isn't to be considered as a SWT feature. I don't get what's wrong with a project stating that some behavior is not supported and adding support to it needs to be negociated by the project. All APIs have limitations in term of features and in term of current support, but that scope is moveable and the documentation explains it clearly.. I'm fine if the documentation states what is a supported API and what is not. I've a problem with this grotesque method that needs to be overriden in addition.
thanks for the reply &amp;#x200B; kilim and quasar both use bytecode weaving to access the stack. to store the stack, kilim adds an argument to all woven methods and quasar uses a thread local, which means that: * quasar can weave methods that kilim can't * kilim's performance is slightly better * kilim can detect when woven code is called from unwoven code &amp;#x200B; there's also a big difference in schedulers - kilim uses a very thin wrapper around the fibers and allows explicitly invoking fibers and yielding from within them, and exposes the continuation directly. quasar hides the continuation and discourages explicit invokes and yields (park/unpark in quasar) &amp;#x200B; with very tight loops, i've had trouble (and the ring benchmark author did too) getting quasar to be reliable. i'd like to add a kilim/quasar integration, but until i understand that reliability issue, i'm reluctant to do so &amp;#x200B; one less-talked-about killer feature for fibers is that they allow very simple concurrency - instead of running a synchronized portion of the code, instead pass a message (or with kilim you can just switch to a single threaded scheduler) to an actor running on a single fiber and do a async wait for the reply
all programming is series (or parallel) of cool tricks - some are problematic, others are elegant abstractions &amp;#x200B; i've ported several fiber-less libraries to fibers, and the reduction in complexity (at the library level) is world-changing. bug-fixes (for a networking layer) that were taking me weeks to track down in the fiber-less version turned into trivial fixes with fibers
no. i'm just the current maintainer. the original author of the code that both kilim and quasar is based on is Matthias Mann. and then Sriram (in 2006 i think) wrote kilim, and pron98 wrote quasar in 2014-ish. i took over maintaining kilim a couple years ago
not everyone that comments is going to come back and check the thread. so i tried to reply to anyone that expressed interest in using fibers. there are other approaches, eg tagging, but in many ways individual replies works the best and results in the most positive interaction
kilim and quasar use bytecode weaving to access the stack. Loom is in the jvm, so it has direct access to the stack. at least the early implementations of Loom also used extensive copying of the stack (kilim is careful to avoid unneeded copies) &amp;#x200B; kilim is not at all a drop-in replacement for threads - you need to add an exception (\`Pausable\`) to all methods that you want to allow to yield. the upside of this is that kilim is very fast (i just added a todo to see if Loom performance has improved since last i looked) &amp;#x200B; i expect to integrate (or outright replace, if the performance is comperable) kilim with Loom when Loom is ready
you want both - threads for computational performance, fibers for concurrency
Contrary to performance issues stemming from hibernate black magic fuckery.
Not if you fall in love...
Apollo if you are iOS.
Thank you!!
&gt;s pretty OK, but you can make Swing look decent if you try. They excluded it because it was not in the java spec in the first place. JavaFX is still a better choice if you go Desktop application route.
You don't need to download Java for Minecraft anymore since it usually comes with an internal JRE (version 1.8) packed into the game files. You can see and select which Java version you want Minecraft to use in the individual profile settings at the Minecraft launcher.
It looks like in your [submission](https://www.reddit.com/r/java/comments/c404e6/if_statement_in_java_programing/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Would really love a tutorial on defining your own scopes. That is something that seems simple on the surface, but the interaction that arises can be quite complex.
Where is it defined in UML?
Shout out to https://maths.uncommons.org/ which provides a lot of different random number generators, and a really interesting series of articles on the generation of random numbers: [Part 1: Beyond java.util.Random](http://blog.uncommons.org/2008/04/03/a-java-programmers-guide-to-random-numbers-part-1-beyond-javautilrandom/) [Part 2: Not just coins and dice](http://blog.uncommons.org/2008/04/06/a-java-programmers-guide-to-random-numbers-part-2-not-just-coins-and-dice/) [Part 3: Seeding](http://blog.uncommons.org/2008/04/10/a-java-programmers-guide-to-random-numbers-part-3-seeding/)
Now that's a midatlantic accent.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I have used intellij in the past (although just for javascript) I'll definitely take another look at it though as per your recommendation :)
Nishanov is a big proponent of syntactic coroutines (he's the one behind MS's C++ implementation and maybe LLVM) and while his opinion about the superiority of that approach to fibers is valid, that's exactly what it is: an opinion, and this article is meant to sell you on that opinion. The reason for the different opinions is that his goal is not to find the best tradeoff that would let people easily write scalable applications, but how to make writing nonblocking IO as convenient as possible without incurring virtually *any* runtime performance cost (compared to hand-written non-blocking IO code). Those are very different goals because while you can make writing nonblocking code more convenient without runtime performance cost, the result is not really convenient -- it's just more convenient than the alternative of hand written nonblocking code.
1. Operating system schedulers are optimized *for their requirements*, and their requirements are quite general. An OS has to run transaction-serving threads (web servers) that block very often, as well as video codec threads that rarely block at all. Those have very different optimal scheduling strategies. So kernels must pick one that compromises the scheduling of *all* threads so that scheduling any is not too bad, and under that severe requirement, the schedulers are well optimized. Fiber schedulers don't have that restriction. 2. I don't understand what you mean by "some blocking somewhere". Blocking of what? Of kernel threads? No, there does not need to be blocking of kernel threads, certainly not of every thread that wants to perform IO.
`java` is most certainly a program, check the `bin` folder of your JDK installation :\^)
Oracle has two "official" JDKs. The [Oracle JDK](https://www.oracle.com/technetwork/java/javase/downloads/index.html), under the OTN license, which is for Oracle's support subscribers, and Oracle's [OpenJDK builds](http://jdk.java.net/), under the free GPL+CPE license, for anyone who's not a support customer. Previously, Oracle JDK was mixed, containing both free and paid features, and whether it required you to buy a license or not depended on how you used it. Now the entire JDK is free, and you pay or not based on whether you choose to buy support.
Batching in a relational database, I'm all for, it's been engineered for that for decades. Batching 10K requests (potentially transactions), in a single instance, sounds like a recipe for disaster. In this day and age of containers, I believe we want the app to be singly responsible not taxed with a responsibility level where one instance goes bad and 10K things, transactions, etc. go poof.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Your scepticism is correct. The obsession with non blocking IO is mostly relevant to network IO. Consider that you have a nice linear tape drive with a single head which can do exactly one thing at a time - that is to read, write or rewind. Yes, modern tape storages/file system like LTFS can cheat by precacheing metadata partitions on some non linear auxuliary storage but once you start to write that 1TB binary blob onto a tape, it works exactly the same as some 40 years ago. There is absolutely no point in writing to a tape in a non blocking way. If anything, it would make the tape drive very unhappy and maybe result in worse scheduling performance on the OS side. Now, lets consider a seekable media like HDDs. Did you ever had an assignment where you had 10 thousand concurrent threads reading/writing to random spots on rotating plates of the same HDD at the very same time? Of course not. OS caches a lot and tries to abstract HDD away from you as much as possible, firmware does some dirty tricks too, but it can only scale that much (on a single drive). Therefore, whenever somebody pulls that 'we have to do non blocking IO because OS does not scale' rabbit at you, you can be 99 percent sure, they are worried about network IO, certainly not tape drives. By the way, Oracle is doing very well with their tape based SAM QFS storages, they do scale to insane number of petabytes.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Useful ! thanks for sharing !
java ≠ jdk
Yeah, but OP didn't ask about the JDK now, did he?
Is there a reason that you actually need it?
Sucks, but gotta happen.
He didn't write jdk in his question and since this is not 'guess what is the question' I aswered based on what op asked. That being said, maybe he is asking about jre (which is deprecated btw), and the answer would depende on the os. But we are ansuming too many things here. As a programmer, I cannot asume things that are not on paper.
Always interesting in Jetty news, my fav servlet.
It's also reasonably easy to write plugins for IntelliJ. We have a couple dozen of insertions and more complex templates in our current project, and it was not done by force, people just saw how to write one and wrote another. Touching the UI is another matter (I haven't done much of that), but it's just Swing so there's plenty of resources.
Option 3 (Core Jetty) sounds like the most future proof option. It's already possible to use `undertow-core` without depending on Servlets, and the "native" API is quite nice compared to Servlets.
&gt; Oracle can't sue me. their lawyers would disagree
I have been wondering this as well. I haven’t seen/heard anything, but that doesn’t mean updates won’t take place. For now, I would just direct people to [this](https://docs.oracle.com/en/java/javase/) documentation page.
I agree 100%
That’s basically the only good part about it!
In case 10k things go poof, they can be retried. And containers or no containers, speed of light is finite, latency matters, and a batch of 10k things is faster than 10k separate transactions, by orders of magnitude.
For the JDK you don't even need to 'install' it. You can just unpack it to a folder and reference the folder - this is the default for most OpenJDK distributions now I think. This is useful as I have several JDK versions on my dev system, including the latest early-access build of upcoming versions to experiment with. In some cases, I need to set the PATH and in others I need to set JAVA_HOME but I can limit this to the current environment. This all means that removing Java is no more complicated that deleting a directory.
Lots of webby stuff based on Jetty including a bunch of the newer style microframeworks, even if you don't realise you're using it.
I came to Java a bit later and Jakarta was a relict acronym for some early 2000's project, like Jakarta Commons Logging. As [https://en.wikipedia.org/wiki/Jakarta\_Project](https://en.wikipedia.org/wiki/Jakarta_Project) says *As of December 21, 2011 the Jakarta project was retired because no subprojects were remaining*. And now they get that skeleton from the wardrobe ))
Designing an API is one of those things that's very easy to do, but surprisingly hard to do *well*. I'd suggest that you start by reading this sub's favourite book, Joshua Bloch's *Effective Java* (3rd edition); it doesn't deal exclusively with API design, but it's a dominant theme throughout, and there is a great deal of very wise advice on the subject.
&gt;After all, pretty much every other leading platform has tried to tackle this in the language/runtime. That is the cause of my concern. Why is it different this time? I do like the fact that progress is attempted and I hope that you / team / anyone will succeed, but why now? Is it because IO and bandwidth have increased so much that there are enough available channels to take advantage of? Previously something would eventually have to block somewhere so piling hundreds or thousands of threads / fibers in front of it wouldn't do much good in the end. I get that computational tasks that operate mostly on cached data do benefit greatly on massive parallelism and the processor cores are increasing, so for short lived parallel tasks the classic thread solution can be too heavy, at least initialization wise, but for other tasks?
It's got nothing to do with multi-core or parallelism (that's what parallel streams are for), but with a current imbalance in software/hardware of IO vs CPU. Current servers can handle hundreds of thousands, or even millions, of concurrent connections, but to do that they have to use inconvenient asynchronous programming styles, or use simple blocking code but then, because the kernel can't handle hundreds of thousands of threads, the servers end up underutilized. So people must choose between wasting resources on expensive programming or wasting them on underutilized hardware. Fibers are meant to help restore the balance and make writing programs that utilize hardware well easier and cheaper to write.
A nice benchmark on sync / async http server loads. Not much difference there, for me it seems that thread and/or fiber based synchronous (blocking) ones perform very well and most importantly the code is simpler to write and maintain than is the case with asynchronous ones. [http://blog.paralleluniverse.co/2016/03/30/http-server-benchmark/#fn:ViralAsync](http://blog.paralleluniverse.co/2016/03/30/http-server-benchmark/#fn:ViralAsync)
Thanks for the post, but why not link to the original articles, rather than a redirect? [Part 1: Beyond java.uti.Random](https://blog.dandyer.co.uk/2008/04/03/a-java-programmers-guide-to-random-numbers-part-1-beyond-javautilrandom/) [Part 2: Not just coins and dice](https://blog.dandyer.co.uk/2008/04/06/a-java-programmers-guide-to-random-numbers-part-2-not-just-coins-and-dice/) [Part 3: Seeding](https://blog.dandyer.co.uk/2008/04/10/a-java-programmers-guide-to-random-numbers-part-3-seeding/)
`equals()` implementations are type safe as long as they use `instanceof`. You may be referring to the fact that the parameters of those methods are of type `Object`. If that wasn’t the case, code like this would not compile: Object object = "Hello"; String string = "Hello"; System.out.println(string.equals(object));
int will always autobox if you pass it to a method expecting an Object
So if you're not contributing (even reporting bugs or chatting on the project mailing-list) when you have a not-supported-yet use-case, don't be surprised to feel some frustration. Trying to patch SWT might have been more successful and cheaper than attempting to build workarounds with an API that's described as not being really ready for this. Overall, here it's not a project issue, but a usage/expectation issue when choosing a technology and its support model. If SWT is still here, it might also be because it's not as bad as you pretend: multi-platform, native-backed, highly accessible, web-able... GUI are actually not so frequent, especially in the Java world, and SWT is one of them. About the specific issue with the tree or whatever, the right place to complain is bugs.eclipse.org.
Scala had a proposal that basically allows you to opt out from universal equality. [https://www.scala-lang.org/blog/2016/05/06/multiversal-equality.html](https://www.scala-lang.org/blog/2016/05/06/multiversal-equality.html) I'm not sure what the current state of that proposal is.
Thanks for the advice. I read what is an API, I’m still confused on how it’s supposed to look like and what it does? Will it be an output menu on a console or will it be on the browser? Any advice will be helpful.
Yes, well, both fibers and heavy threads are just abstractions. In fact, one can view threads as single shot delimited continuations - that is how the OS scheduling infrastructure treats them. The problem is the cost. Fibers cost less because they are implicitely bound to a specific language semantics. Also, you can take any sync code and turn it into async via CPS transform. By turning code into async I mean to reify the state of the fiber by suspending it and then later on mounting it on when some async event occurres - just like OS would do with a context switch when an async resource is not ready or becomes ready. The cost difference will only show on very busy servers with great many concurrent instances of threads/fibers.
TBH question is a bit unclear - what ‘contains’ have anything to do with ‘equals’ in your question? Type safety of equals? What do you mean by typesafety here? It would also be nice if you would answer the question on fundamental meaning of equality and how it relates to the semantics of ‘equal’. Contains? Do you mean ‘String#contains’? It is already typesafe.
https://docs.oracle.com/javase/7/docs/api/java/util/Collection.html#contains(java.lang.Object)
It relates to wildcards, I think
“Jakarta” was once the umbrella that all Apache Java projects were under.
This here is the documentation for a weather API - there are many, if you don't like it Google for another: https://openweathermap.org/current The documentation shows you how to call it using a web browser or a command-line tool like curl. It gives you machine-readable results in a format called JSON, not pretty pictures and animations. Are you supposed to be creating/hosting/serving an API or calling one that already exists? To create an API using Java start here: https://spring.io/guides/gs/rest-service/ It can be auto-documented for you using a standard called Swagger - which includes a basic but handy test interface - if you pull in a library called SpringFox. Get something working first though or it won't have anything to document.
`boolean equals(Object)` is too generic and can't catch problems with types. It was OK for '96 when Collections was designed. I'd like to see type enforcement that `obj` in `equals(obj)` will be a subclass of `this`. For `contains(obj)` a subclass of T for collection `&lt;? extends T&gt;`. I don't get that each `equals()` should have `instanceof`. It isn't cheap operation but yet it is used often, burning CPU power for nothing ((
This should be avoided with a good code inspection configuration in your IDE. I've just checked your code with my config and I got a warning.
Using generics would break the code above, since the compile-time type of the variable is `Object`. The performance of `instanceof` has also continued to improve, as discussed [here](https://stackoverflow.com/questions/103564/the-performance-impact-of-using-instanceof-in-java). If you don't use `instanceof`, then users may have to deal with `ClassCastException`s.
Dude omg, you are a lifesaver. Thank you so much for the resources. Long story short, I have to create an api that you enter a city and pulls out the weather for a week or day which ever I would like.
Create a website which makes a REST request to your Java backend which then makes a query to an SQL database and returns/inserts the requested data. If you manage to do that you will answer all of your questions.
Learning how to write an api can take time and I think it's not possible to teach you in a single comment, but this are, in my opinion, features of a well written api: 1. Has a single class/interface to call. 2. Has a single method to call per action. 3. Throes a single unchecked exception for all business errors with descriptive error messages. 4. Hides as many implementation details as possible. 5. Has a minimum of 90% of code coverage in unit tests. 6. It's possible to use and test as a black box.
Oracle contributed its IP. I don't think it's very gracious to take the gift and then spit them in the face. Jakarta is free to change the javax... namespace in the same way Oracle did -- the same way anyone can change any javax namespace -- through the JCP. It certainly makes sense for projects to choose not to standardize through the JCP, but even without the grant of an exceptional privilege of controlling a Java-standards namespace without the ordinary process of Java standardization, Jakarta appreciates Oracle's contribution.
1. Because those websites want to run Java on the client side. 2. Write a TODO app to start with. Everyone understands and can use an app with that concept. 3. Java doesn't have any opinion on your frontend - you can use anything you want. 4. You don't need to use databases - I never do. 5. Just worry about your Java for the moment - maybe don't make a long-term plan until you're ready for the next steps.
Jetty isn't a servlet - it's a container for servlets.
&gt;Jakarta was a relict acronym It's never been an acronym. It's just named after a room at Sun, which is named after the country.
I’m at the end of an online BS Comp Sci program. The entire programming curriculum was just links to the docs.oracle.com threads. Pure garbage. Without Tim Buchalka’s Udemy courses, I’d be nowhere. If it weren’t for the residency requirements, I’d have transferred months ago. Hopefully I did a good enough job of teaching myself this stuff...
What you want is someone to help you with your project because you don't want/have time to learn properly. I think r/javahelp sould be a better place to post.
1. Old sites required this to execute java in your web explorer, this is bad practice, and is not allowed by modern web explorers, the problem was/is that it could potentially execute malware in the client computer. 2. Most modern backed development is coded usen more secure or robust languages like c, c++, cobol, java is more on the Middleware, understand SOA and Microservices, I use Spring boot, and JSF for Work 3. Spring boot or other MVC frameworks are your friends, they help you to build reliable, robust web applications, as for fontend technologies, angular, Vue, electron, basically the current JavaScript/Typescript frameworks, focus on one, whatever you like, and working on others will be a matter of days to start understanding the framework 4. For SQL that's a more or less standardized language, most jobs I have been use Oracle or SQL server, learning any NoSQL databes will prove to be helpful as some parts of modern applications use this type of databases to speed, mitigate some performance issues. 5. Again Spring boot, spring cloud, spring security and spring data.
1. Most likely because they still use Java applets which shouldn't really still be used 2. Create some Spring Boot application that with a REST API that stores some data in a database (use Spring Data) 3. You can use whatever you like. For simple sites Thymeleaf and Spring work great together with simple HTML, CSS, JavaScript. 4. [https://www.w3schools.com/sql/](https://www.w3schools.com/sql/) 5. What do you mean? I don't understand your question exactly
I believe he meant "what more should I focus on", that is, what else should he learn besides Java and Spring. Is that it u/Armauer?
3. Just like you should learn Java before Spring, I believe you should learn javascript, HTML and CSS before worrying about a frontend framework. Good luck and welcome!
I need a restful API, i tried to google it. Since I have never created an API, I am not even sure what resources are good to look at or where to start. If you have any links that teaches the equivalent of “hello world” in an API. It would be highly appreciated. Thank you for advice.
In that case, you can't really be a web developer these days without at least some JavaScript, HTML, CSS and SQL knowledge. Learn about design patterns, SOLID principles, possibly TDD. Programming books I recommend: Head First Design Patterns, Clean Code, Clean Coder, Refactoring, Effective Java
export WSLENV=JAVA\_HOME/p &amp;#x200B; this translates to &amp;#x200B; JAVA\_HOME=\\\\wsl$\\Ubuntu-18.04\\home\\{user}\\.sdkman\\candidates\\java\\current
What is a RESTful API? Well an API is an application programming interface. Which looks like nonsense, but if you look at each word individually it makes sense. Application or in other words a program. Programming, as in for writing code. Interface, a set of agreed upon rules for accessing that application. Put it together and you have: A set of agreed upon rules for accessing the program via written code. REST stands for Representational State Transfer. That's stupidly complicated to explain and also not that important. Basically it's stateless and generally uses http verbs and the most typical media type is json. Also the urls of the api are based on the resource being accessed. For example: I have a database full of books and I wanna share that data so it can be consumed. If somebody wants all the books they go to https://mydomain.com/api/books using a GET variable. If somebody wants to create a book, they hit same endpoint with a HTTP POST variable and a json body full of data about said book. If you don't know what json is, it stands for JavaScript Object Notation and it looks like: { "title": "Effective Java", "isbn": "978-0134685991", "author": "Joshua Bloch" } A good way to mess around with APIs is to use the Postman app and hit an open api with it. https://openweathermap.org/appid Probably a good one to start with. If you're making the API in Java, I would suggest using Spring Boot with web. From start.spring.io https://www.javadevjournal.com/spring-boot/spring-boot-application-intellij/
Wrong in so many levels :-(
Such as?
*capital
Omg thank you so much, you saved my butt! You are a lifesaver. One million upvotes!!
It was implemented in Dotty (Scala 3 beta - https://dotty.epfl.ch/docs/reference/contextual/multiversal-equality.html). Scala 2 has libraries with Equals type class providing === operator (e.g. in Cats library) - these type classes can be written/derived to not use asInstanceOf (e.g. by Kittens library).
I was curious how the regex list matching worked and it apparently works by running a sliding window across the text, possibly some preconfigured window length. Noticed this, though: `while (window != Optional.&lt;String&gt;empty()) {` You should almost certainly be doing `while (window.isPresent()) {` instead. The whole thing about optionals is to improve the handling of null conditions, and perhaps to even wrap a control flow within `map` and `ifPresent` type calls. I don't think optionals have any usable abstraction for while loops, so I something like that is acceptable, I judge.
I don’t think I have asked anything regarding my project. Please point out which part of this post I have asked for help regarding my project. Kindly state it upfront.
You don't. I assumed that part when you talked about money, that means you have a project. But that was not my point. My point is you need to learn about the java ecosystem and this subreddit is not the place. In addition, I strongly recommend you to read any spring framework book that covers the basics. If you started the same day you posted you should have finished by now.
I believe fibers would be for APIs
&gt; "Asynchronous programming, sometimes also referred to as reactive programming" Hmm, no those are related but not the same thing.
Spam post by /u/suryarose reported.
Spam post by /u/suryarose reported.
Previous poster spams daily like this.
Don't think this will work. Supposedly what is installed by WSL is a Linux native executable, which can not just be run from Windows.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Right, so who is stepping up to keep developing JEPs and integrating them into OpenJDK?
 * **No programming help questions here!**These should be posted in [**/r/javahelp**](https://www.reddit.com/r/javahelp)
 * **No programming help questions here!**These should be posted in [**/r/javahelp**](https://www.reddit.com/r/javahelp)
Thanks! I was hoping you'd see this and respond.
Red Hat have already taken over as the steward for OpenJDK 11. I've always felt they and IBM are ethnically preferable companies to run Java.
See the response in this thread.
Yes, this is possible. Here's the routine so you grok how it works: &amp;#x200B; 1. 'mark' the relevant parameter as being rather useless if the object passed in is not of some type. Normally done via an annotation (so, declare the equals method as: \`boolean equals(@ProbableType("java.util.List") Object other)\`. 2. There where this is not possible (because you can't change the source of that particular API), use one of the many systems out there to track what APIs should have been annotated with. The big 2 IDEs have some of this already built in for various core library classes (for nullity and IDE functionality to do static null checking in a much better way than the ugly Optional construct). 3. Then.. choose what warnings/errors to emit. There are 3 possible scenarios for any given invoke: Either \[1\] the passed expression is definitely of the probable type, in which case, great. \[2\] The passed expression cannot possibly be of the probable type (example: probable type is Integer, you pass in a Double – then you know its impossible), and \[3\] The passed expression may or may not be of the probable type: For example, the probably type is Integer, and you pass in a Number. Generally, the notion is \[1\] fine \[2\] error \[3\] warning &amp;#x200B; Various IDE plugins and such exist to give you this. The keyword here is 'linter', probably: There's the checker framework, findbugs can probably do this, and more.
1. Because those websites are using java \_\_client\_\_ side, with applets. Those'd be 10 year old+ websites not being maintained any more, as applets are looong obsolete. Don't visit these sites anymore. 2. a really simple game that is online multiplayer. Think tic-tac-toe, 4-player bomberman, etc. It's fun, the scope is limited, and making a bunch of users behind webbrowsers all see each others events on-demand is good to learn. This kind of project demos great if you're asking in for an interview and are asked to bring something. Another option is solvers for puzzle games like sudoku or scrabble. 3. There are TONS of frameworks/libraries out there to serve up web stuff using java. I suggest \[dropwizard\]([https://www.dropwizard.io/1.3.12/docs/](https://www.dropwizard.io/1.3.12/docs/)). 4. Focus on relational DBs, particularly postgres. It's excellent, the IRC channel gives great support for it, it supports just about every exotic SQL construct imaginable, it's popular, and it's open source. JPA/Hibernate is very complicated, and tries to 'hide' the SQL a bit. I suggest you keep it simple and use a light wrapper around the java core db support (the \`java.sql\` package, which is known as JDBC), such as \[JDBI\]([http://jdbi.org/](http://jdbi.org/)). So: Install postgres, add jdbi and the postgres JDBC driver as a dependency to your project, and have fun making DB queries!
Red Hat's leadership over update projects is a regular process that has now happened for the fourth time in the past six years (Red Hat assumed leadership of OpenJDK 6 [in 2013](https://www.redhat.com/en/about/press-releases/red-hat-reinforces-java-commitment-and-assumes-leadership-openjdk-6-community) and of 7 [in 2015](https://www.redhat.com/en/about/press-releases/stewardship-openjdk-7-project-shifts-red-hat)). We at Oracle work hand-in-hand with Red Hat and appreciate their contribution to the update projects, as well as others, but you need to understand that what they do in the updates project is backport fixes that are usually contributed by Oracle employees, and that their OpenJDK contributions, constitutes a small portion of the contributions to OpenJDK, while Oracle contributes ~90%; IBM hardly contributes at all (here are stats for JDK [11](https://blogs.oracle.com/java-platform-group/building-jdk-11-together) and [12](https://blogs.oracle.com/java-platform-group/the-arrival-of-java-12)).
Thanks for the heads up!
Good that that code wouldn't compile, because it shouldn't. In the vast majority of cases, it's a simple mistake, e.g. after a refactoring. You should have to add a cast to compile it.
I agree that there's a void to fill. Have you seen this blog: https://blog.codefx.org/cat/java/ ? It has a lot of good Java content on these new releases. Myself, I've tried to fill this void by creating "What's New in Java &lt;n&gt;" courses for Pluralsight: https://app.pluralsight.com/profile/author/sander-mak You need a subscription though, but if you want to check it out DM me for a one month trial code.
A few things here: * What I expect a framework is to be extensible. With the current core architecture of Eclipse it is not possible. I'm not going to contribute / file issues to change the core architecture * I've filed an Eclipse bug way back and there was no real progress until now * The "internal" repository / mailing-list style is adverse to open contribution in my opinion * I view the platform as dead. Hardly any progress. Its still E4. New patterns for GUI development have emerged and SWT is stuck with GridBag. Also I doubt many new projects are created using SWT as the platform nowadays.
 NO programming help, NO learning Java related questions in /r/java
&gt; What I expect a framework is to be extensible. That's not the general definition of a framework. As mentioned in the documentation, SWT is not 1st meant to be extensible, but to be multi-platform, backed by native, backward compatible, performant... Anyone wants to make it extensible as to get involved in the core architecture. &gt; I've filed an Eclipse bug way back and there was no real progress until now That unfortunately can happen. You can ping on the bugs or still open new bugs, maybe some new people passing by will be more able to answer. &gt; The "internal" repository / mailing-list style is adverse to open contribution in my opinion Yes, Eclipse IDE is one of the most successful OSS project in term of longevity ;) Sure, the mailing-list are less hype than Gerrit issues or whatever hype thing people use now, but they're proven on multiple OSS projects to just scale well with time. &gt; I view the platform as dead. Hardly any progress. That's your view, but code changes, noteworthy and so on show there is still major incremental progress. &gt; Also I doubt many new projects are created using SWT as the platform nowadays. I agree, but the reason behind that isn't much SWT itself, but more the fact that most bew applications are now served through a web browser and accessed through a smartphone or a table, making the HTML stack outperform any other GUI framework that has a more restrictions in term of target environments.
It looks like in your [submission](https://www.reddit.com/r/java/comments/c4naa1/openjdk_bundling_license/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
"1MB per Java thread" is a reporting bug in Java's NMT reporting. And I've seen it being quoted all over the place. A thread takes only about 40KB. Conversely, 25 threads may not take a full 1MB of memory. &amp;#x200B; Java keeps shooting itself in the foot with misleading metrics, but this is plain wrong! &amp;#x200B; See: The update section on top of this article: [https://dzone.com/articles/how-much-memory-does-a-java-thread-take](https://dzone.com/articles/how-much-memory-does-a-java-thread-take) This bug report: [https://bugs.openjdk.java.net/browse/JDK-8191369](https://bugs.openjdk.java.net/browse/JDK-8191369)
Thanks for clearing that up, it is indeed quoted all over the place! So given that, what are the advantages of Loom's fibers? What makes them more lightweight?
It should compile. Have you heard of polymorphism?
Batch of 10K transactions in an database, yep, agree. It's moving that to the app layer that concerns me. That's my point.
Putting code into methods doesn't solve the original issue. Fundamentally a Runnable cannot return a result based on its contract. It can only return a result through side effects, which (1) can be hard to coordinate synchronization in a generic way and (2) makes Runnable reusability difficult.
Ok, sorry. I won’t do it again.
I’m not advocating that all parameter types be changed to `Object` — equality is a special case. I doubt the majority of developers would want to cast just to test objects.
I get a 404 for the Project Site
Odd... Try [here](https://github.com/openjdk/skara).
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
these is a . at the end of the url
Given the extent those languages are used across the industry and the salaries that come with it, it isn't a bad thing.
Hope it's big bang for the packages. Rather short pain but consistency afterwards than long, dragged on suffering and confusion with the mix: The nightmare of debugging ClassNotFound and hunting maven repositories is already clear before my eyes.
meh gradle
Maybe you should show us the API so we could give you pointers. General pointers are: * ease of use: technical users are your "customers", If your product is too difficult to use the adoption rate is significantly lower. * standards: do not use your own style. You want to share something with the community and not enforce it. Examples are `ICollection` or \`var PascalCase ...´ * error handling: APIs need to handle errors differently than consumers. Are your error messages clear? * stability: will a simple change in your main application crash your API. * security: if data is transferred, how is it done * discoverability: can a developer find easily what he is seeking? * documentation: is your documentation aligned with your API? Do you use some specification tool? For Lambda/Streams I think this video \[1\] is one of the best talks I have seen about functional programming patterns. \-- \[1\] Victor Rantea - Functional Programming Patterns with Java 8 :: [https://www.youtube.com/watch?v=YnzisJh-ZNI](https://www.youtube.com/watch?v=YnzisJh-ZNI)
my thoughts exactly (although with a very good reason)
I'm using Kotlin with Spring Boot at my Blockchain company and gotta say it's amazing. The abstraction, though some don't like it, really makes coding complex applications much easier.
It's just because the URL is at the end of a sentence, so pipermail's automatic URL recognition interprets the full stop as being part of it.
Probably not, because restricting `equals` and `contains` would break the Collections API. You're only considering the generic type `E`, for example `Set&lt;E&gt;`, for which a "generic" `equals` and `contains` would have the type `equals(E)` and `contains(E)`. But, what if you were given a collection of `Set&lt;? extends E&gt;`? Then then generic type of `equals` and `contains` would be `equals(? extends E)` and `contains(? extends E)`, which would make those methods unusable. Because you don't know the exact contained type, no equality or containment would ever be type safe. Kotlin has type-safe `contains`, but it achieves this by [opening a hole](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/contains.html) in type system: abstract fun contains(element: @UnsafeVariance E): Boolean
Simple RPC. URL is method, body is arguments, response body is return result. Avoid positional arguments, hard to evolve. Use named arguments. Allow optional arguments (when it makes sense). The serialization format... I don't know what to tell you. Pick something off the shelf, binary if it works for you, because why not. If you don't want to go binary, JSON is an easy chocie.
Yeah, I saw that.
This example explains how to implement SFTP(Secured File Transfer Protocol) in Java when an application is sending a file to upstream server by adding a private key as an identity.
You could just build the simplest Java web application with one 'hello world' servlet. And when you do a GET to your servlet with a parameter, return JSON formatted data. For example ... doing a GET to "http://localhost:8080/myservlet?city=Ottawa" ... would return ... { city:"Ottawa", temp:"23 degrees celsius", description:"sunny" } Change the name of your servlet from "myservlet" to "weather" would look better. And to make it truly a "RESTful" web service the parameter "Ottawa" should be part of the URL rather than a parameter, like this ... http://localhost:8080/weather/ottawa ... but you may need something like Spring web services components to get the URL formatted like that. I would get it working as a simple "hello world" servlet first. Good luck!
It should be very rare to test against raw Objects, though. Meanwhile the compiler is fine with asking a List&lt;Account&gt; whether it contains what is known to be a String at compile time, without a peep. Which is almost certainly a programming error, and very commonly caused by refactorings.
This belongs in /r/javahelp (as is *clearly visible in the sidebar*) and even there you won't get much love since you don't show even the slightest bit of effort. **Removed**
[I delivered a talk about this, recently](https://www.youtube.com/watch?v=CYniPcoiI5g)
Thanks for looking into it. I got used to using Options from Scala, which is good practice with explicit no null behavior. I'm familiar with "unwrapped" Optional prints but I think it still has a lot of benefits. Pairing it with `@NotNull` makes sense, will add it.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
i don't get it. it doesn't want git? it wants to be git? it wants to do something else?
You seem to be in need some some learning resources surrounding what spring is and what you can do with it (which is literally everything you can do with JavaEE). [Baeldung](https://www.baeldung.com/) - Highly recognized blog with lots of tutorials ranging from basic hello-world type stuff to more advanced topics (including extending Spring functionality with custom behavior). Usually at the top of any "how to do &lt;task&gt; in Spring" Google searches. [Learn Microservices with Spring Boot: A Practical Approach to RESTful Services using RabbitMQ, Eureka, Ribbon, Zuul and Cucumber](https://www.amazon.com/Learn-Microservices-Spring-Boot-Practical-ebook/dp/B0782L1GDR/) - Excellent book that covers a ground up approach to learning about microservices with Spring Boot. Being an actual book, it's slightly out of date (uses Spring Boot 1.5.X which is now EOL'd) but it's a good introduction to Spring Boot, TDD/BDD, and Microservices. Also includes a few other useful Java libraries like Lombok that make already trivial tasks (building model classes) even more trivial. Also, remember Spring *is* a Java Framework (suite of Java libraries). You keep talking about Spring and Java like they're separate things, and they're not. If Spring doesn't have a pre-built wrapper for some library you want to use, you *can* build your own quite easily.
That's a networking issue, not a java issue.
This is absolutely not what this subreddit is for and neither has your problem to do with Java. *Connection refused* is a *networking problem*. Your question belongs in /r/techsupport and nowhere else. **Removed**
They just made some git aliases I think which help them with their workflow.
I suggest looking into arrays and the [split()](https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/String.html#split(java.lang.String)) method.
https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/String.html#split(java.lang.String)