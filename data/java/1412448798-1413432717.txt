I've always thought about it as a mid-level developer should know the 'how' and a senior developer should know the 'why' (and be able to work out the 'how' as a consequence of that). 
I should mention that there are jurisdictions where you cannot legally be called an engineer without an engineering degree and where merely being a programmer does not qualify you for the title. I kind of like that, it's like not calling yourself a doctor without a doctorate. So first, you would need that degree. Once you can legally be called a software engineer in these places, being called "senior" at your company would be up to management's discretion, from meaning nothing significant to a whole slew of meaningful requirements. I would expect the "rules" (such as they are) to be even more arbitrary in jurisdictions where anyone can call themselves an engineer without the equivalent degree.
Honestly I always found the title of "Engineer" to be annoying anyway. Most enterprise shops use "Programmer/Analyst" or some derivative which I find more fitting to the work I actually perform.
&gt;where merely being a programmer does not qualify you for the title Most job applications in my area look for candidates with a Computer Science, Engineering or a degree in another related field. Yet, it is usually the least important aspect of the qualifications section even on a job title such as Software Engineer. It is no surprise since 4 years of school is hardly what makes an individual qualified to be called a senior anything. 
As a beginner, I have to say that it is actually annoying that Eclipse tries to auto-complete everything for you.
I always look for people who: - have their own projects (passion) - worked on legacy systems' maintenance and support (can still work when the condition of the software is less than ideal) - can explain their decisions without rambling (assertive) - is able to create simple solutions (over-engineering kills) - worked with performance improvement (tends to write efficient code naturally) - can create code that is easy to unit-test - is able to develop good algorithms - is capable of creating a decent code structure that is easy to reuse and extend - can think for himself and is not dependent on a different framework for every minimal thing - and my personal gripe: knows SQL and knows hibernate/JPA is not meant to replace it
Where I am, there is a "P.E." Professional Engineer title. This is usually used for bridge design type situations. I can't say that I've ever heard someone using the PE thing in software. 
And then again, you are failing to see what the point of the PSR's are. They are guidelines, or suggestions, that can be followed for greater interop. You don't need to follow them, but it is suggested.
&gt;I know a PhD in electrical engineering who can't or don't know how to hold a soldering iron. I was under the impression that engineers spend most of their time designing things with computers. Would it really be necessary for an electrical engineer to know how to hold a soldering iron if that's not a part of his job? 
&gt; Understanding technology for the busy HR Professional I sent you a Private Message with information on how to get a copy of this book. 
How does it compare to http://swagger.io
No, boolean arrays use one byte per boolean. http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-2.html#jvms-2.3.4 How large? Unless your are talking about something massive the memory savings you get from using bitmasking to combine boolean bits isn't worth the processing overhead.
You may try http://docs.oracle.com/javase/7/docs/api/java/util/BitSet.html. In general there's no such thing as a bit array in Java. The smallest possible chunk of memory is (as far as I remember) 16 bits. That in turn is due to efficiency considerations. Nonetheless you can write a class implementing a bit array, using the arrow operators (&gt;&gt; and &lt;&lt;) to shift bits as needed. As far as I can see, the BitSet class does just that.
&gt; People usually stick to the code style of the CMS/framework they use Do you have statistics for this? I've been seeing more people follow the PSR standards than i've seen following any other standard. Don't forget, the standards for their respective CMS/Frameworks only apply if they are contributing code to the core. &gt; with new projects pushing new standards I don't see how you can make the assumption that these guys are not pushing the standards... The spend hours of their time getting this stuff ironed out, and made public... If thats not pushing it, I don't know what is. **THAT BEING SAID**, I think there are some people, who take no part in creating proposals, or voting in them, that should be removed. I'd actually like to hear what /u/philsturgeon's thoughts on this would be
I'd actually like that guy removed. I don't doubt his programming skills, but those aren't that rare. He totally sucks as a people person, and solves conflicts by attacking opponents personally instead of their arguments. I don\t see a community person in that one.
It's good but I'm not allowed to write or use classes for this.
It could be very massive.
How do I do bitmasking in Java (without taking 2 ^ 31 and other big operations)?
More seniority in any organization is fundamentally about accountability. A senior developer is someone that can take a task and execute without someone looking over their shoulder. They know when the requirements are ambiguous and go ask the right person. They know to ask for help when they're stuck. Basically they are people that the architect doesn't have to worry about.
Then include the array of shorts/ints as a field and write set/get methods in your main class that convert a direct index with the shifts? It's sort of hard to write Java without using at least one class.
A recurring theme in JSF is that one group of people love it, while another group hates it. The lovers mostly started using JSF with JSF 2.x, the haters either never used it and are parroting others, or have at one point used JSF 1.x and never looked at it again. Haters think nonsense like that JSF has its own abstraction language for CSS (it hasn't, and actually advocates using CSS), only supports POST (simply not true), necessarily has state (again not true, there's a stateless mode), is architecturally tied to Facelets and can never ever use another template engine (nonsense, Facelets itself was once a third party template engine) and the "best" one of all that JSF is slow and consumes much memory (real world tests show that JSF is faster, uses less memory and generates less garbage than almost any other web framework). Still, it would be interesting to hear about REAL issues that can be improved in e.g. JSF 2.3. p.s. Another silly but pervasively cited weakness of JSF is that it's not like Spring MVC. Until now NOBODY has been able to explain why that's bad exactly. Nothing in Spring MVC is inherently better or worse, it's just different. Of course, this is not just a "weakness" of JSF. There are tons of frameworks that are not like Spring MVC. 
JSF is more automated/prescriptive. It's easier to build a functional UI, but harder to build a very custom heavily designed one. Using Spring MVC or really any JSP-based approach gives FE devs direct and total control over the UI.
The cpu only operates on 32/64bits at a time so you are easily limited by that. Use an int/long array, index into the parts you want to mask off then do your work. 
I can't assume that they are, for now.
Does java optimize division by / calculation of powers of 2?
&gt; it needs a lot more work than a web app. Can you share what makes Swing more work than a web app? 
&gt; This API visualizing framework supports all JAXRS base java REST frameworks and some of none JAXRS java base REST frameworks that are currently available in the industry. I am confused does it support all of the JAXRS frameworks, only some of them or does it not support any of them?
I think the main problem with JSF is it's an idea who's time has quite possibly passed. Most devs today seem to be going the thick-client/thin-server route, by which I mean JS/CSS-heavy in the browser backed by a relatively simple remotable API on the server (be it accessed by REST or something similar), stateless more times than not (or as thin a state on the server as possible). Single-page RIAs are the norm now and JSF doesn't bring significant benefit to that type of development. I think JSF started becoming decent (after a horrendous start) around the same time development started shifting models, largely obviating the need for it. It's a question of timing more than anything else: if JSF had become good 2-3 years sooner it might see a lot more use today. As it stands though, it's in a sense the most evolved version of a architectural model that just isn't as prevalent today. I think that's its single biggest weakness at this point. It missed its chance. 
You can calculate a power of two by calling "Math.pow(someVal,2)" or "someVal * someVal". But what do you need that for? Also java's compiler does not optimize anything, it just generates bytecode that matches the source code as closely as possible. The JIT compiler, which is what you may be thinking of, optimizes entirely based on runtime conditions and platform. Also there is no way to optimize math, unless you mean pre-calculated values, but you have to add those yourself.
No, that's square. A power of two is 2, 4, 8, 16, etc.
I forgot other things, like producing readable code, being competent in multiple programming languages, and using the appropriate language for each task at hand.
You can also run BlueJ on much lower spec hardware. The latest release (naturally it is 3.14) runs on the RapsberryPi
I developed on JSF 2.2 a few years ago. I have since switched to using a client side MVC framework with a loosely coupled REST backend. Maybe my issues are out of date with modern JSF. Also, I haven't looked at your AngularFaces project to see what it improves so my response is limited to basic JSF 2.2. I feel the major problems with JSF are: 1) Tight coupling between the front end and the back end. You cannot reuse the backend for other use cases in your organization or for other front ends ( for example native mobile apps). 2) State stored on the server side. This means that you either have to have your load balancer use sticky sessions, in which case a failover loses the user sessions, or you have to setup session replication which is a surprisingly heavy and error prone process. 3) Maybe this has been addressed but I cannot tell you the number of times that I had to go back to our designers and tell them that they had to change their css because JSF gave me no way to insert styles on the elements that they wanted. 4) Maybe this is solved by your work, but my personal experience has been that JSF attempts to isolate the developer from having to work in javascript. Particularly this leads to work being done server side that should be done client side making your page less responsive to usage.
He is one of the biggest proponents for PHPFIG, and one of the biggest contributors. Not to mention, IIRC, a lot of his code actually follows PSR standards, including 2. &gt; and solves conflicts by attacking opponents personally instead of their arguments You are attacking him now, semi-behind his back, how is that any better?
**This is not homework and I am aware of how Math.pow works.** I asked because I wanted to know if there was a way to optimize it. Anyway, I have already found solution and I don't need any more help. Also, asking questions is how people learn.
Of course, I did not mean that you don't learn by asking questions, of course that is one of the best ways to learn programming. It is just there are too many people who get on reddit and just ask "how do I calculate the remainder of 5 divided by 3?" and expect people to reply with complete code they can copy-paste, rather than a better response like "you use the modulus operator &lt;insert link to modulus documentation&gt; for that". If you do want to know more about optimizing boolean arrays or power of two calculations, there are some ways to do that if you are interested. I assumed from the odd requirements of your original question (no classes) that this was some kind of homework or assignment.
Not really attacking, criticising social skills.
Bitbucket provides free private repos.
Netbeans isn't officially supported for Android. Eclipse used to be the main Android IDE, but Google recently came out with Android Studio, which is a version of IntelliJ IDEA. 
What I'm saying is being a prominent member of the community requires some measure of patience with people. Phils arguing, blocking reddit etc has been talked about many times. He himself admitted to it in one of the PHPTownhall episodes. So its not my bias.
No. A really long time ago x86 used to be faster at bit shifting so you could optimize div/mul by powers of 2 by bit shifting but those days are long gone. The only Java optimization you'd want is a JIT that uses native div/mul instructions.
i never disagreed with your point regarding his social friendliness. He simply doesn't have the patience to argue with people who don't listen
and that makes him a pretty lousy community foreman
and that is your opinion. Also, again, attacking him behind his back, isn't doing anything to improve the situation.
We've been quarelling with him so many times that he kind of already knows my opinion. So no behind the back going on here.
I love every one of these bullet points!
You are not talking directly too him, and chatting on a subreddit that he doesn't actively go on. Thats pretty much the definition of going behind the back.
I was talking to him at some point. Also being talked in places you don't visit is the price to pay for having any sort of publicity. We see Justin Bieber posts every day all over the news. Is that also behind the back? If you become a public person be prepared someone is going to not like you
Yes, it is still behind the back.
I did tell him this at many occasions directly
You didn't even review these, so i'm betting you didn't even read them.
I think it can use for any java base REST framework with XML base configurations.
I think swagger has lot of feature than this but in the near future we can compare both these.
A senior engineer should know "why" and not just "how" things are designed
Which jurisdictions? I call bullshit.
A single boolean will operate with a 32-bit data type. In an array of booleans, each boolean will operate each with a 8-bit data-type. This is as specified by section 2.3.4 of the JVMS. You can read the JVMS here: http://docs.oracle.com/javase/specs/jvms/se7/jvms7.pdf
you arent getting it.
&gt;and my personal gripe: knows SQL and knows hibernate/JPA is not meant to replace it Could you elaborate on this? I was under the impression that ORM systems were all about abstracting away the database. (I've never used ORM myself.)
My favorite writing on this topic is "On Being a Senior Engineer", available here: http://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/ To summarize: A senior engineer is a **mature** engineer. * Mature engineers seek out constructive criticism of their designs. * Mature engineers understand the non-technical areas of how they are perceived. * Mature engineers do not shy away from making estimates, and are always trying to get better at it. * Mature engineers have an innate sense of anticipation, even if they don’t know they do. * Mature engineers understand that not all of their projects are filled with rockstar-on-stage work. * Mature engineers lift the skills and expertise of those around them * Mature engineers make their trade-offs explicit when making judgements and decisions. * Mature engineers don’t practice CYAE (“Cover Your Ass Engineering”) * Mature engineers are empathetic. * Mature engineers don't make empty complaints. * Mature engineers are aware of cognitive biases Definitely worth a read!
Good to know, thanks! 
Ah ok cool, thanks!
Not exactly what you're looking for, but you might check out /r/dailyprogrammer. It's language agnostic. Also [Project Euler](https://projecteuler.net/), but that's more for algorithms training.
Use Hibernate when it fits. Use JDBCTemplate when it doesn't.
They want to see the code? I guarantee they don't give two shits about it. If they ask to see it then it means what they really care about is your ability to communicate and explain things in a code review sense. They're not looking for DaVinci masterpiece-level MVC architecture from an intern. It's probably more fucked up than you even realize so just let it be what it is but *take pride in it*. Don't talk about it like it's a piece of shit or anything, you'll just look like an asshole. If they grill you about it it doesn't mean they care about your code, it means they care about how you behave under scrutiny and pressure. It means they want to see if you can give a level-headed self-assessment. Say you're "aware it's full of holes but ran out of time to work on it, that more important things required your attention and you hope to someday pick it back up and improve it" or some bullshit. Just be honest. I'm sure you hear it a lot (and you won't really understand why until you've fucked up an interview) but you really need to calm down and not be so nervous. It's a co-op, they don't expect much from you in the way of expertise. What they really care about is you as a person: if you are an effective speaker, if you're an effective listener, if you're likable, if you explain yourself properly, if you defend your decisions properly, if you can illustrate your ideas on a whiteboard, if you can **SLOW DOWN** and demonstrate that you have some fundamental problem-solving capabilities. As far as Java goes they probably just want to make sure you're not absolutely retarded, that you understand the different between an ArrayList and a HashMap, that you understand the difference between == and .equals(), that you understand scope. Basically, that you've actually used Java before and that you aren't just lying about your experience. A lot of people lie to get interviews and then try to throw around enough buzz-words to get hired on (hoping that it's a member of HR who's doing the interview). You're an intern, you're their blank canvas. The best thing you can do is show up and prove to them that you're capable. Scratch that, the best thing you can do is get plenty of sleep the night before and keep a level head when they turn the heat up on you. If you *do* get nervous about a question then never -- under any circumstances whatsoever -- say "I don't know." If you say "I don't know" then just pick your shit up and walk out. Instead say "hmm... well let's walk through it and find out" and take it step by step, demonstrating that you understand the fundamentals of problem solving and/or analysis. These are simple freshman-year things that you've probably forgotten about. They're very important in the real world. Code is #2, communication is #1.
[This a great list of programming challenges](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F). /r/dailyprogrammer is a fantastic weekly challenge that you could try out as well.
Awesome :D Thanks so much! And you actually answered a third question about if I don't know the answer to a question. Prior to this I read something very similar - that code is #2 and communication is #1. I'll keep these tips in mind and very close, thanks again! Cheers, 
Thanks, will do - that's a good approach to start with. Cheers 
Best of luck! You really will do great if you take it easy on yourself.
A senior engineer should not be afraid to evolve or improve the code base. There have been so many instances where my mid-level engineers refuse to make changes because of the fear of breaking something. 
Assuming you're using the default values, Checkstyle is suggesting that you make the fields static. See the patterns for "ConstantName" and "MemberName": http://checkstyle.sourceforge.net/config_naming.html
I figured that, but I get this error then: Illegal modifier for parameter **; only final is permitted
Did you make them all both static and final?
You can probably find answers to questions like this easily using Google &amp; StackOverflow. Here's a possible reason (and one of the top search results): http://stackoverflow.com/questions/23012022/illegal-modifier-for-parameter-count-only-final-is-permitted Good luck!
Interesting! Many other discussions I read also left me with the impression it's a fashion thing: JSF isn't en vogue, so it has to be bad. The reasons why it repelled many developers may have fixed a long time ago, but nobody cares...
Did you try naming them in camelCase?
Does it? Maybe they've just lost enough market share to PrimeFaces to cut down development?
Camelcase works, but it's my understanding that constants should be in all caps.
Sure, static constants are typically all caps, but you have constant instance variables so the checker thinks they're instance vars rather than constants. So either: final int myConstant = 1; or public static final int MY_CONSTANT = 1;
You should be able to work independently without immediate supervision and have the responsibility to ask others when required.
\^m[A-Z][a-zA-Z0-9]\*$ - "must start with a lowercase letter "m" followed by an uppercase letter followed by either lowercase or uppercase letters or numbers". Looks like it's enforcing strict camelCase for instance (non-static) variables: `mVariable` ("m" is a common convention to mark instance members) If you want constants try making them `static final`. On a related note, ouch. Does your teacher also employ corporal punishment? :] 
You could have just created a method that creates a normal array list filled with n percent of the elements of the original list. You could have customized that using different selection strategies as a second parameter. If you want to create your own collection types you should have a look at AbstractList/Set and stuff. Or in this case just subclass ArrayList. That would have made things easier again. 
&gt; This article is about tweaking… What article? All I see is a single IDE screenshot followed by many cryptic bulletpoints - without any explanation whatsoever what they do. Why is e.g. &gt; Editor &gt; Colors &amp; Fonts &gt; Android Logcat &gt; Warning &gt; [#FF6C0C] a "must know" and a "todo"? Seems to be some setting for Android, but how does it related to "migrating to IntelliJ from Eclipse"? Am I missing something here?
Others have already tipped the problem here, which is that these final variables are not constants, as Checkstyle likes them. You should use keyword 'static' for actual constants. But even bigger problem here, which Checkstyle unfortunately cannot diagnose, is the naming of constants. Using FIVE as a constant name for value 5, while avoids Checkstyle complaints, is of no use at all. It does not in any way communicate the purpose and meaning of the value, just the value itself. Your post gives no indication on how these values are used, but if in the code you for example have 5 attempts to give a password before locking the account, you should name the constant MAXIMUM_AMOUNT_OF_LOGIN_ATTEMPTS instead of FIVE.
What I see in senior adds is a laundry list of technologies, with minimal requirements for anything else. So if we take that as the work of the labour market on what a senior is: it's someone with a wide technical knowledge capable of designing and implementing solutions independently, while at same time helping out other less experienced developers. As you said the title means nothing anymore, because developers are becoming seniors with two to three years of experience. I believe a senior should have a wide variety of experience in different projects:frontend, backend, batch web services, integration. It should be in my view a full stack developer. The senior developer should be able to tackle the most advanced technical tasks at hand in your team with a minimum of handholding, for example know how to troubleshoot deployment and performance problems, also security knowledge is important. He should have good notions of design and be generally aware of the technologies that are currently out there. I don't believe domain or business knowledge is important to be considered a senior developer, that is more for a business analyst, or developer analyst. If you manage to find a candidate that has both the domain and the technical knowledge than go for it, but otherwise it's like chasing an unicorn. There are too many business domains: telco, baking, etc. for the definition of senior to work, and a senior developer it one domain should still be a senior in another domain. That is why I believe the technical knowledge is really the key. For example I never saw a job add saying:'senior telco java engineer' or 'senior banking java engineer'. They say in the end of the add frequently: 'manufacturing sector experience desirable but not mandatory' or something like that. In most job adds the domain knowledge is not a requirement for senior positions. 
Well, Gavin King himself (the creator of Hibernate) posted the following on a [reddit thread](http://www.reddit.com/r/programming/comments/2cnw8x/what_orms_have_taught_me_just_learn_sql/) some time ago. I'll quote him instead of trying to come up with more arguments: &gt; Well in fairness, we used to say it over and over again until we were blue in the face back when I was working on Hibernate. I even remember a number of times getting called into a client site where basically my only role was to give the team permission to use SQL for a problem that was clearly unsuited to ORM. To me it's just a no-brainer that if ORM isn't helping for some problem, then use something else. &gt; &gt; Indeed, systems like Hibernate are intentionally designed as "leaky abstractions" so that it's possible to easily mix in native SQL where necessary. The leakiness of the ORM abstraction is a feature, not a bug! It's meant to be that way, because both the object model and the relational model are valid ways of looking at the data, and both are useful! I speculate that the problem is not that ORM gets in the way of using SQL, it's rather that so many Java/C#/Ruby/Python/JavaScript developers don't have a strong enough knowledge of, or aren't sufficiently comfortable with, relational databases and the relational model. That is emphatically not the fault of ORM! &gt; &gt; Moreover, ORM is for OLTP applications. It's not usually appropriate for: &gt; &gt; batch processing, or &gt; analysis. &gt; &gt; Finally, when I read stuff where someone talks about how he has "a single object" with 600 attributes and 14 joins (wtf!) I just know that there's something extra going on here that has nothing to do with ORM or SQL. What this guy needs is a professional data modeller who knows how to efficiently design and normalize a relational data model. But our industry today sneers at such traditional expertise, as we throw away decades of knowledge and collectively plummet down into the world of pain and suffering that "schema-less" data is going to result in, in about 5-10 years. (That's another story.) &gt; &gt; I'm inclined to blame development teams who use a relational database, but decide they don't need to hire an experienced DBA, or an expert data modeler. But then I also realize that there is fault on both sides of this divide: relational database experts have traditionally been extremely insensitive to the needs of the application side, and have shown little interest in familiarizing themselves with ORM technology. Which leaves them unable to really provide useful advice to the application programmers. Sad. 
Four thoughts come to mind. These may help frame the challenges you wish to pursue. 1. First, a lot depends on what you want to do. Not knowing what you want to do, you might wish to try going to some Java user group meetings and hear what other people are doing with Java. Once you have seen this, it may give you a clearer picture of what you might want to do. 2. Objects Objects Objects. Java is largely an object oriented language and lends itself to object modeling. Generally an application has a set of domain objects that we call a domain model. So obviously constructing object models, and exploring the relationships between objects are useful skills to have. 3. Books. You can find challenges in books. There are some good books about how to write effectively and solve problems effectively with Java (e.g. Joshua Bloch, "Effective Java", Eric Roberts tiny "Thinking Recursively in Java", Robert Sedgwick's "Algorithms in Java," "Headfirst Design Patterns" ), as well as numerous books on modeling (Craig Larman, Peter Coad) that you might want to look at. I was fortunate enough to start at a time when Bruce Eckles Java book "Thinking in Java" had just come out and I found it helpful at the time in thinking about applications in terms of objects. 4. Libraries and Platforms. Typically applications run on some set of platforms (platform = phone, tablet, personal computer, robot, server, messaging system, database) and typically there is some kind of software library (Java has MANY of these library things..) involved in using platforms and communicating with platforms. So a fourth approach is: learn the libraries. Which is the best one to use for a robot? How do you call it, what data do you send, what format, and what data do you expect back. HTH. 
This is a many to many relationship, you should make a third table.
I feel like i'm missing something from your explanation. What kind of mapping do you need if you store the object natively in a map? ...Or do you mean you're storing the object **properties** in a map, in an exploded fashion?
&gt; 1) Tight coupling between the front end and the back end. You cannot reuse the backend for other use cases in your organization or for other front ends ( for example native mobile apps). This is not true. In JSF your backing bean is supposed to call out to a business service, which is the exact same service any other client would also call. I.e. the JSF layer is a client just as the mobile app is. &gt;2) State stored on the server side. Not necessarily. Storing state on client or using no state at all are both alternative options. &gt;setup session replication which is a surprisingly heavy and error prone process. IFF you want to do this, then you'd of course not replicate to an entire cluster but just to a buddy (aptly called "buddy replication"). This gives you the option of fail over for only a fraction of the costs. &gt; my personal experience has been that JSF attempts to isolate the developer from having to work in javascript This too is not entirely the case. You can put your own JavaScript on a page and/or easily group a bunch of scripts into either tags or components and then re-use these. PrimeFaces is especially friendly to this approach as it exposes a special javascript var for each component that you use. It's of course the case that JSF is a serverside templating framework, so if you approach it with the idea that everything has to be client side since HN says that's the current way to do things, then you wouldn't like it. But don't forget client side frameworks have lots of issues too, not the least being eating away cycles on the client that the client doesn't want you to consume (think battery live, think fans). 
&gt; Most devs today seem to be going the thick-client/thin-server route, by which I mean JS/CSS-heavy in the browser backed by a relatively simple remotable API on the server And a lot of devs went back, first and foremost Twitter. Client side is not a silver bullet and it's far too early to say whether it's just a hype or a staying trend. The paradigm has switched a couple of times before, see e.g. http://johnwaterwood.wordpress.com/2011/08/13/the-remote-local-computing-cycle 
No this didn't make any sense to me either.
Public methods can be used anywhere inside or outside the class. Protected methods can be used inside the class, in any classes that inherit from it, and any classes in the same package. Private methods can only be used inside the defining class. Generally, public methods are what you expect other programmers (including yourself) to use when interacting with the class. You define private methods to function as helpers for the public methods. You might be defining a Dog class, for example, that has a public bark() method that plays a sound file of a dog barking. Inside that bark() method you might call a bunch of private methods like loadSoundFile(), setupSoundBuffers() and playSound(), but programmers interacting with your class don't really care about these --- they just want the dog to bark. That probably isn't a great example because you should really abstract sound playing to some other service, but I think it demonstrates the point! :D EDIT: Forgot that protected methods can be accessed by classes in the same package. Thanks /u/nerdwaller.
Just an SQL tip, try to avoid implicit joins (multiple tables in the from), and instead learn proper join syntax as it is both more powerful, and in many DBMS's implicit joins are deprecated.
There is, PersonItem which I assume is two columns of person and item ids. Its hard to see because of the implicit join
Indeed, and what's en vogue changes every few years, sometimes yearly or even faster. A while ago people were sure that Java would be dead since PHP was so easy that no education and training was needed anymore, while in order to code in Java you needed to go to school and read books. We all know how that turned out. Then it was Ruby on Rails, that was said to be SO productive that no company would be able to effort not to use it. Claims were made that something that would take a year to build with any other tech would consistently take only 3 days in RoR (a factor 100+ productivity). We all know how that turned out (RoR ultra hipster nest Twitter largely abandoned RoR for Java and Scala). After that it was Wicket, then GWT, then Play! and now AngularJs that all claimed to be game changers. A lot of people simply lack the vision to look ahead and don't look back either. It's like youngsters being asked about the best song ever, the ultimate all time best song, and it's almost always the song that's at the top of the charts that very week. 
There is a schema linked in OP's first sentence which tells it's one-to-many relationship.
You need to use a ResultSetExtractor and something like this; class ZenTaxClassResultExtractor implements ResultSetExtractor&lt;Map&lt;Integer, TaxClass&gt;&gt; { @Override public Map&lt;Integer, TaxClass&gt; extractData(ResultSet rs) throws SQLException, DataAccessException { // TaxClassID, ZenTaxClass Map&lt;Integer, TaxClass&gt; taxClasses = new HashMap&lt;&gt;(); while (rs.next()) { int taxClassId = rs.getInt("tax_class_id"); // This would be your Person object TaxClass taxClass = taxClasses.get(taxClassId); if (taxClass == null) { String name = rs.getString("tax_class_title"); String description = rs.getString("tax_class_description"); taxClass = new ZenTaxClass(taxClassId, name, description); taxClasses.put(taxClassId, taxClass); } int taxRateId = rs.getInt("tax_rates_id"); int zoneId = rs.getInt("tax_zone_id"); int order = rs.getInt("tax_priority"); BigDecimal taxRate = rs.getBigDecimal("tax_rate"); // This would be your "Item" object. ZenTaxRate rate = new ZenTaxRate(taxRateId, zoneId, order, taxRate); taxClass.addTaxRate(rate.getZoneId(), rate); } return taxClasses; } } I modified this in-browser, so there might be a few errors and oversights. But it should give you an idea. The example is based on a TaxClass table and it's related TaxRate (which is tax class and it's given rates based on geographical position). Hope it helps, if not. go to stackoverflow.
Probably because the whole concept of changing from IntelliJ to Eclipse is outrageous.
Ah sorry, yes! I forgot about packages. I'll add an edit.
I use it when I'm doing anything that has to do with bytecode.
It was pbly meant to say "and some non-jaxrs" Edit: huu odd, "some of" has been removed from the page. 
The title says "To IntelliJ from Eclipse", is the article the reverse of that without me realizing it?
Try e.g. [this](http://stackoverflow.com/questions/13536667/how-to-install-java-jdk-7-on-snow-leopard)?
You need to download that directly form Apple, until 10.6 they made their own Java releases. You won't get the latest Java version though.
You should also know of PTSD treatment options in your local area. 
The Java-On-OSX thing is a prominent dispute: Apple had some beef with Oracle about Java, and made it deliberately hard for people to install it. But as I pointed out, there's many resources that deal with this problem, you just have to try a few things. &gt; well they never answered the question sooooooo [This](http://stackoverflow.com/a/14024322) post is marked as the answer?! I don't have OSX 10.6, so I can't confirm that. There's also lots of other solutions in that thread ([this one](http://stackoverflow.com/a/18788474) that links to [here](http://jksha.blogspot.se/2013/09/java-7-and-snow-leopard-osx-106.html) looks promising, too. Here one only has to (temporarily) modify a single file), and Google has many more suggestions. &gt; that is WAY above my abilities right now Welcome to programming. Googling for solutions is a large part of it. PS: thanks to the person who thought my answer above was worthy of a downvote.
What I'm doing now is a bidirectional mapping between a bean's properties and an underlying map. That is, the value changes for both the map and the entity read operations if either of them is changed. It also needs to be very efficient, so no full reconstruction on each call. This is so that I can give a bean-based approach to an asynchronous, low latency framework I'm working on. I need to be able to carry the business object changes, so that I can merge back these changes later into a central entity storage. I'm doing this to have something close to transaction support in my framework. 
&gt; Be on guard for candidates who can talk without actually saying anything meaningful. That's exactly how I see the architects i've worked with. They can talk, but it never makes any sense. 
Good link :P
study for the OCA and take some practice exams 
Consider grabbing one of the main books like Effective Java or Thinking in Java, and do a medium-sized home project. Try searching for help for concrete problems in stackoverflow.com. If you are planning on working professionally in it then learning frameworks is important: Spring and Hibernate (JPA implementation) are probably the good place to start. Also the Maven build tool seems to be essential these days. 
Huh? It's not hard to verify... [http://en.wikipedia.org/wiki/Engineer#Regulation](http://en.wikipedia.org/wiki/Engineer#Regulation) I got my computing science degree in British Columbia. One of my teachers (who happened to be an engineer) mentioned an interesting exception to the restrictions: the guy who drives the train is allowed to be called an engineer as a grandfathered clause due to naming tradition.
I have the impression that from a pure technical point of view, JSF in 2014 is simply not justifiable anymore. Yes it's still used, but due to none-technical reasons like this is what was already being used, it's standard, etc. I believe the new Java EE MVC framework currently in the making that is basically the standardization of Spring MVC will eventually completely replace JSF. The reason being that JSF simply does not take advantage of the capabilities of modern browsers: no need to send everything all the time to the server for no good reason. I used JSF 2, for me one of the main problems I have with it is that it almost always requires client server interaction for nearly anything. LEt's say a combobox in a table row City depends on another combobox Country. In JSF you need to send a request to the server to send the new Country value, and a response comes back with a new City combobox that replaces the HML of the existing city combobox. If you open the chrome network tab in the dev tools on a JSF application, you sill see literally tens of requests going back and forth to the server. This level of network activity quickly makes JSG unusable for many types applications. Make a table with a row and 3 comboboxes that depend on each other: expect the user to add a new line and be able to start tabbing around: eveything starts freezing. There is no need for so many networks roundtrips. It's a design where the browser is seen as a simple rendering terminal and not a full fledged GUI platform. This was true 10 years ago but not anymore. In JSF there is a component tree on the server that basically doubles the DOM structure on the client, and gets continually converted back and forth to HTML. This is not necessary to overcome browser quircks and save client memory anymore , the DOM on the client side is all we need, desktops have 8GB. But it's true that Primefaces uses jQuery for implemeting the client part of the framework, so we could imagine a new JSF framework that uses AngularJs for implementing the client part instead of jQuery. Check also the opinion of the Tech Radar guys -&gt; http://www.thoughtworks.com/radar/languages-and-frameworks/jsf 
Agreed. I've been in the field professionally for nearly 25 years and I've seen (and written about) the cycling we see that you're talking about. This time does feel a little different, but it's very likely we haven't landed on a final answer... this cycle may stick a bit longer than most though, that's my guess. 
That makes sense, because they have also a whole GWT-based framework named Errai http://erraiframework.org/ that they don't promote much due to unknown reasons. I believe that JBoss / Red Hat should come in the near future with a full dependency injection/ persistence layer/ web framework development stack based on their new Ceylon programming language, which is being made by Gavin King (creator of Hibernate). That is the reason why they are abandoning/not actively promoting some of their other frameworks. Disclaimer: this is just complete speculation on my part. 
It can be. Depends on what you are designing. If you are designing something with a practical use, then yes, having some knowledge of how someone would actually use, maintain, and repair what you are designing is immeasurably valuable. If you're just nerding out and doing purely theoretical shit, then no, knowing how to hold a soldering iron is probably as necessary as talking to members of the opposite sex for you.
"Code Style &gt; Java &gt; Tabs and Indents &gt; Use tab character [v]" Who is this monster?!? 
This is a classic Java/ DB problem called a JOIN. First let's lay out your tables: CREATE TABLE PERSON ( NUMBER PERSON_ID, VARCHAR FIRST_NAME, VARCHAR LAST_NAME ) CREATE TABLE ITEM ( NUMBER ITEM_ID, NUMBER PERSON_ID, VARCHAR ITEM_NAME ) Now, if the tables PERSON and ITEM have a 1:M (one-to-many) relationship, then you could get all the items for a single person by doing a database JOIN like this: SELECT P.PERSON_ID, P.FIRST_NAME, P.LAST_NAME I.ITEM_ID, I.ITEM_NAME FROM PERSON P INNER JOIN ITEM IT ON P.PERSON_ID = I.PERSON_ID In this example, in the ITEM table, PERSON_ID is a foreign key back to the PERSON table. This is, further, a "Natural Join". There are three types of JOIN: * Natural Join -- which means the is a legitimate repeat of the primary key of one table [PERSON] in the second table [ITEM]. A Natural Join always uses the ON keyword and the connection is done right after the FROM keyword. * Equijoin--which means the JOIN happens in the WHERE clause and it's possible that no formal foreign key relationship exists between the two tables. It may be just an informal relationship that is known to be valid but that isn't formalized with a foreign key relationship. * Thetajoin--which means the JOIN, again, happens in the where clause but it does not use the equality operator (=). Instead it compares using a less than or greater than operator. Now, if you don't have a 1:M relationship between your tables--and instead--have a M:M (meaning many to many, there are many people who have relationships to many items), then you need a THIRD tables between them called an ASSOCIATION table. So, in that case you would have: PERSON 1:M PERSON_ITEM M:1 ITEM PERSON has a 1:M relationship with PERSON_ITEM ITEM has a 1:M relationship with PERSON_ITEM That allows you to get through the M:M relationship. The middle ASSOCIATION table has what we call a *composite primary key* which means each row in PERSON_ITEM is uniquely identified only by BOTH values: CREATE TABLE PERSON_ITEM ( NUMBER PERSON_ID, NUMBER ITEM_ID ) Both of those values are needed to uniquely identify any row in PERSON_ITEM. So, our JOIN would be another Natural Join and it looks like this: SELECT P.PERSON_ID, P.FIRST_NAME, P.LAST_NAME, PI.PERSON_ID, P.ITEM_ID, I.ITEM_ID, I.ITEM_NAME FROM PERSON P INNER JOIN PERSON_ITEM PI ON P.PERSON_ID = PI.PERSON_ID INNER JOIN ITEM I ON PI.ITEM_ID = I.ITEM_ID So, we're just joining the first tables then going right on to join the combined-first-two tables to the third table. (Including the values from the association table is really not necessary but I included them to explain) To finally answer your original question: you can write a join query in the jdbcTemplate and run the SQL just like you would from a regular DB query. But honestly, I would just open a tool and perfect the query right against the DB in straight SQL before you then add in the complexity of a Spring JdbcTemplate. Hope that helps. 
About JSF 2: The biggest weakness for me is poor performance due to an outdated programming model: server round-trips all the time for no good reason other than to keep the server side component tree up-to-date - this creates performance problems in a lot of applications that require a high level of interactivity. Its a design from the early 2000s aimed at dealing with qwircky browsers, something like: "lets just do everything on the server side and use the browser only as a rendering engine". This does not apply anymore, the new Java EE MVC based standard will slowly replace JSF. Besides performance, I think lack of productivity is another JSF weakness: Using XML instead of direct HTML/CSS is much less productive and powerful than using those technologies directly. With XML we end up sooner or later hitting a wall where we simply can't to what we need to do. I know we can use HTML/CSS directly, but the widget libraries all come in XML tag libraries.
About the not like Spring MVC reason: I think what they really meant is that because there is state kept in the server side between requests, that gives rise to some very hard to track down bugs, that otherwise don't occur in stateless architectures, where not state is kept on the server between requests. There are ways around it in JSF 2.2 tough, there are stateless views and a mode where the state is kept in the client in I believe a hidden field. I think the fundamental problem with JSF is the base programming model: server-roundtrips for everything and assuming the browser is only good for use as a rendering platform - this is not true anymore. 
perhaps, but outside of the companies in which they are used, titles are meaningless there is no requirement established by a 3rd party nor is there any measuring process in place to see if an individual meets this requirement 
Mind inboxing it to me as well? I've some friends in HR who are always looking to gain more knowledge like this. 
Try it and find out...
What exactly don't you understand? Also, there's /r/javahelp for this type of stuff, even then they'll expect you to have shown some effort.
the idea of a senior is cross domain, a senior developer in banking should still be a senior in telecommunications. It's rare to find job adds that ask for a Senior Banking Java Developer or equivalent. domain knowledge is usually mentioned as a nice to have in the end. The beginning is the usual laundry list of technical requirements, at least is what I see in job adds. From what I see, the most important for being considered a senior is advanced technical knowledge coupled with the ability to be able to help out others.
Your post makes me optimistic I'm on the right track with AngularFaces: it adresses many of the problems you mentioned: AngularFaces fixes the round-trip problem (either completely or partially - that's up to you, the programmers). Future versions will also address the duplicate component trees by moving widgets to the client. As for the Thoughtwork tech radar: I always read their papers. Usually it's great, but the JSF bit disappointed me. You know, they just say "don't use JSF", but they don't say why. So it wasn't really convincing.
Valid points, but maybe you should look at the new HTML5 friendly mark-up. JSF's strength are components, but if you insist, you can now do without. Or use a mix that suits your needs.
&gt; Am I missing something here? Good questions. What I saw that I found amusing was he shows a picture of the IntelliJ screen and then comments "TL;DR.." Since your first looks at Intellij idea are somewhat like looking at a Leica camera or an ARP 2500 from the inside out, I thought that was great. Are there things missing from the list? I'm sure. But I only found this page because 1. I wanted to turn line numbers on permanently. 2. I wanted to do so with IntelliJ 13. Which is different from IntelliJ 12. Which is different from IntelliJ 11 and so on. And different if you're using a Mac. So I limited the scope of search for "turn line numbers on permanently" to 12 months and the search came up with this page. Thought people here might find his list of adaptations useful. I suspect everyone has their own. That might be more useful to talk about than whether he left out an article or whether he was just being funny. 
I agree. Hideous. Especially when you can type in an if (cond) { in front of a line of code and a close } after, and IntelliJ automatically reformats the code. 
&gt;About the not like Spring MVC reason: I think what they really meant is that because there is state kept in the server side between requests, that gives rise to some very hard to track down bugs I'd probed people for that, but that's not it. Every possible reason that people can come up with can be proven wrong or can changed/added to JSF. At the end of the day there's not a single thing left and then they say: but I still want Spring MVC, for no other reason than that it has to be Spring MVC. It's not state, it's not performance, it's not easy of use, it's not less lines of code. There really is no reason other than it needs to be Spring MVC because it needs to be Spring MVC. An impossible to argue against reason. Although you wouldn't believe it, the strongest voice of this are some people within Oracle, who want Spring MVC in Java EE for no other reason than Spring MVC has to be in Java EE. It's weird, but it is what it is. &gt;There are ways around it in JSF 2.2 tough, there are stateless views and a mode where the state is kept in the client in I believe a hidden field. True &gt;server-roundtrips for everything and assuming the browser is only good for use as a rendering platform - this is not true anymore. But that's also not the assumption JSF makes (anymore). 
&gt; I believe the new Java EE MVC framework currently in the making that is basically the standardization of Spring MVC will eventually completely replace JSF. &gt; The reason being that JSF simply does not take advantage of the capabilities of modern browsers: no need to send everything all the time to the server for no good reason. Well, that's simply not true. Most modern JSF components or just custom code does things locally (at the client) when needed, and post back or call the server when needed. Besides, if client side is what it's all about then you don't need Spring MVC. You'd only need JAX-RS where you do service calls and get JSON in return. &gt; This is not necessary to overcome browser quircks and save client memory anymore , the DOM on the client side is all we need, desktops have 8GB. But desktops have tens of tabs open in tens of windows. Mobile devices are still memory limited. People still expect web sites to take up virtually NO memory locally, i.e. they consider them just views on the server side app. Yet, because of the thought that clients have 8GB web app builders start to use insane amounts of memories. These days web sites should start stating minimal system requirements. For some relatively simple sites you now need at least 1GB per tab and something like 2.5Ghz CPU. &gt;Check also the opinion of the Tech Radar guys -&gt; http://www.thoughtworks.com/radar/languages-and-frameworks/jsf Sorry, but those guys are wrong. They made so many mistakes in that "recommendation" that it's very clear they don't know what they're talking about and are parroting a supposedly popular opinion that isn't true. I mean, "J2EE", c'mon. For real??? Even half-assed clueless recruiters stopped using that term years ago. And "abstracting CSS"? Afterwards they quickly adjusted it (among others after the PrimeFaces lead publicly replied) and edited their glaring mistakes, but it's clear that the original was thus a bunch of nonsense and thus the entire conclusion is very debatable. 
If you want people to test it out, don't upload a jar. That is the biggest nono because unless you have a credential behind you, noone will want to test possibly malicious code. This isn't an attack on you as much as it is a suggestion in mannerisms. At the very least, post your source on http://gist.github.com
&gt; Usually it's great, but the JSF bit disappointed me. Me too. See my reply elsewhere. The original contained many, many errors. After a storm of community feedback they edited their text, but kept the conclusion. This is weird. If the data on which you based your conclusion appeared to be wrong, how can you stick to that conclusion? It would have looked better if they retracted it completely and posted some accuses, something along the lines that the person writing that text didn't had a clue and that they will redo the research using someone who does know JSF. 
Ok ,thanks for the advice. I will get onto that later on.
&gt; this is just complete speculation on my part. I understand. But without a shadow of doubt there's more going on than the press releases and official communication lets on. As for Oracle, Spring MVC for the sake of Spring MVC just doesn't make sense. Maybe there's a deal in the works to acquire Pivotal, maybe a humongous client of Oracle has demanded this since they just happen to be using Spring MVC and don't want to migrate their code base. And likewise with JBoss. Maybe it's because of wanting to own all code, maybe it's because of Ceylon. Maybe the Ceylon guys are secretly working on what they think will be the killer framework for Ceylon. After all, a language is only a language. It needs a RoR or Play/Spray/Akka to become really popular. 
&gt; About JSF 2: The biggest weakness for me is poor performance due to an outdated programming model Poor performance? Right, why does JSF perform better than Spring MVC then? And MUCH better than Grails, Play and RoR??? &gt;but the widget libraries all come in XML tag libraries The XML tag is only a declarative way to put a component on a view layout. Components in libraries are without exception based on Java based components, which can be assembled into a UI using plain Java if needed. But it's NOT the idea to only use components. A modern JSF page uses a few components with a lot of HTML, CSS and javascript mixed in.
&gt; Poor performance? Right, why does JSF perform better than Spring MVC then? And MUCH better than Grails, Play and RoR??? It's the continuous server roundtrips. open a JSF application and open the chrome dev tools network tab, start going around the screen: you will see 10s of ajax requests start piling up. Nearly everything requires a network roundtrip in order to update the server model and re-render part of the tree. &gt; But it's NOT the idea to only use components. A modern JSF page uses a few components with a lot of HTML, CSS and javascript mixed in. We can use HTML and CSS directly in the JSF view that's true. But the components themselves are opaque XML tag, we have limited control over the HTML /CSS inside of them. I just find it much more productive to use HTML/CSS directly alongside some client side framework like AngularJs, instead of having to go through a large number of Java classes in order to find which one to override. This is how I usually approach JSF debugging http://blog.jhades.org/how-jsf-works-and-how-to-debug-jsf-applications-effectivelly-is-polyglot-an-alternative/, i find it somewhat painful because I find that there is this layer of indirection that complexity wise no longer pulls its weight. 
&gt; Although you wouldn't believe it, the strongest voice of this are some people within Oracle, who want Spring MVC in Java EE for no other reason than Spring MVC has to be in Java EE. It's weird, but it is what it is. Well that's no good, to make decisions like that. But if we dig further, I think the advantages are really there. A stateless server makes things easier by eliminating a whole category of problems related to keeping state in the server between requests. I had to deal with some pretty horrible bugs that would never had occured if the server was stateless. There is also the scalability benefit, which might not be applicable for less than say 100 - 200 users or so. Another thing that is interesting about MVC is that the same exact technology can be used to also build web services. Actually the GUI backend becomes nothing more than a GUI specific web service. Some of those web services could eventually be consumed by other applications other than the frontend, which is something to consider. &gt; But that's also not the assumption JSF makes (anymore). AFIK there is still the notion of process attribute for the parts of the page that need to be submitted to the server, and the render or update attribute that defines which parts of the screen are repainted. So the notion that if one part of the page needs to be modified, then we need a network roundtrip is still there. For me that is the one piece of technical design that is fundamentally outdated with JSF, and that cannot be fixed with further revisions: the notion of the browser being just for rendering and everything needs to go though the server.
I would actually like to see this type of certification become used. My thoughts. 1) it would only apply to certain types of software. e.g. Is a life at stake ? Is there a significant financial risk ? I don't want a self driving car running on a goofy ruby script using an 80% code coverage TDD. sorry, that corner case WILL happen, so someone is likely to be killed. The decisions around this should not be done like some of the car recall decisions where it's cheaper to pay out damages than to fix. That is unethical. 2) The certification should not be based on a particular technology. So the Java certs or MS certs would not be appropriate since those are about how to use a particular technology stack more effectively. And we can debate if they really make things better or are just reinforce a commercial interest. Technology decisions SHOULD be part of the training. E.g. in what circumstances would a hard real-time system be used ? Should a strongly type system be in use ? Should multiple independent implementations be used ? 3) It should be an industry wide standards body or a governmental thing ( P.E. in my jurisdiction is governmental ) so as to avoid the commercial interest factor. 4) requirements for licensing should include both theoretical background, practical knowledge, and experience. The first two could be tested for and the last could be apprenticeship style. There should be an ethical component with the option to strip certification in the case of unethical behavior. And no, I don't expect MOST software to need this. Certainly a social network, blog software, video streaming, and gobs of other systems need only "work" on the basis of the pareto principle. Roughly speaking there is "ethical" software and "market" software. 
&gt; And he uses Java in them. Exactly. &gt; It also worth to have the classic book Design Patterns: Elements of Reusable Object-Oriented Software. I agree. You know what I would love to see? An good write up about pattern issues that deal with implementing server-side solutions. That is, what are the ways for code deep in the application to obtain configuration information? This particular issue explains why we have design patterns like template method and strategy and eventually inversion of control. 
I agree about the dominance of domain knowledge for sure. I also think that a well designed SOA is the best thing going. Now, if a single shop had applications that used all of those different messaging technologies at the same time, I would grind my teeth and stare in disgust at the architect behind such a hodge-podge of differing technologies. I truly think it's foolish to have an architect who is not also able to roll up his or her sleeves and code alongside the other developers--in the same language. By domain, I was using it in its larger sense of the concerns of the business and in your example I would expect a bank's architect to understand all aspects of that bank's business domain. In the case of a health-care IT architect, I would expect an architect to understand everything from HIPAA to HL7 to clinical issues. 
&gt;Well that's no good, to make decisions like that. This is a big issue that Oracle doesn't seem to entirely get. A few people among which me have repeatedly ask what the reason was for wanting a new MVC framework in Java EE, but it just wasn't given. A select few tried to give some reasons, but they were wrong (like JSF can not have other view templates than Facelets). &gt;I think the advantages are really there. &gt;A stateless server makes things easier by eliminating a whole category of problems But then why not dedicate resources into making JSF stateless? Ignoring for a moment that JSF can already run in stateless mode. Why create an entirely new framework for a benefit that you can also try to achieve in your existent framework? It looks like they did not even try to research that, since if they would have done it, they would quickly found out that there already is the stateless mode. &gt;Another thing that is interesting about MVC is that the same exact technology can be used to also build web services. I would say that decoupling the URL routing annotations from JAX-RS and making them available to Servlet, JAX-RS and JSF would give you about the same benefits. In fact, some JAX-RS guy suggested on the JAX-RS mailing list to replace Servlets by JAX-RS too. &gt;Actually the GUI backend becomes nothing more than a GUI specific web service. There's a little bit more to it than just that. Spring MVC is not just JAX-RS that can forward to a template, but there's also the handling of postbacks and binding and validation of input fields. I personally like to have a pure Restful webservice API and not confuse that with an MVC framework. It's like a posh car dealership also selling potions of the owner's wife, since hey, a store is a store and can be re-used for multiple things right? JAX-RS legend Bill Burke is btw of the same opinion. &gt;Some of those web services could eventually be consumed by other applications other than the frontend, which is something to consider. Uhm, I don't follow this. JAX-RS web services can already be consumed by both JSF backing beans and external clients. 
&gt; Well, that's simply not true. Most modern JSF components or just custom code does things locally (at the client) when needed, and post back or call the server when needed. Check for example this example of a editable table with editable cells, each cell edited makes a network roundtrip -&gt; http://www.primefaces.org/showcase/ui/data/datatable/edit.xhtml Most components behave this way: comboboxes, calendars, etc. Take a JSF application and open the chrome dev tools network tab, start clicking around: you will see a flood of network requests. &gt; These days web sites should start stating minimal system requirements. For some relatively simple sites you now need at least 1GB per tab and something like 2.5Ghz CPU. Its all true but I don't believe JSF is a good choice for mobile either. the network roundtrips would kill also any attempt to do a mobile app due the constrained bandwidth. I know of Primefaces mobile, that provides a jQuery Mobile renderkit on top of JSF. That would probably work, but I believe it would be much more productive to use jQuery Mobile directly. &gt; Afterwards they quickly adjusted it (among others after the PrimeFaces lead publicly replied) and edited their glaring mistakes, I re-read their review, I had not noticed it was edited. it seems more or less what I remembered though. I think that their main conclusion is "we recommend teams use simple frameworks and work closely with web technologies including HTTP, HTML and CSS" instead of using for example JSF. With this main conclusion I do agree, I believe building frontends can be made in a much more productive way by really taking heads-on web technologies, instead of trying to wrap them in server-side frameworks of any language not just Java. I would go as far as saying: enterprise frontend could be developed almost an order of magnitude faster by going polyglot. 
&gt; I re-read their review, I had not noticed it was edited. it seems more or less what I remembered though. From the top of my head they changed J2EE into Java EE (which proved they weren't up to date with current Java standards at all) and they removed the claim that JSF had invented its own abstraction language for CSS. They also initially said that JSF 2.0 was the latest version, which they changed into 2.2. There were a bunch of other small edits just like those. Basically as said, it looks plausible now as they edited in all community feedback, but you -know- the original advice was based upon J2EE/JSF 1.2 and someone who knew little about JSF. No one who actually knows even a tiny bit about JSF would claim that JSF had invented its own abstraction for CSS. &gt;I believe building frontends can be made in a much more productive way by really taking heads-on web technologies, instead of trying to wrap them in server-side frameworks of any language not just Java. Maybe that works better for you, but I've been involved too long in IT to know that people always yell and scream they don't need frameworks and want to be lite and use tech head on, and then end up building frameworks anyway. This was true in the early 80-ties with assembly and C, it was true in the mid 90-ties with the various C++ environments and it still holds today. If you really want to use web technology head on you should probably not use jQuery and AngularJs either, but only use bare javascript, the DOM and plain HTML, don't you think? 
The biggest weakness with JSF is how poorly many components are written. Not the standard ones but third party ones. Yes I use and like Richfaces and Primefaces for my apps but I still think they focus to much on being almost like drag and drop. Many components look like or function like shit on touch. I like components such as http://deltaspike.apache.org/documentation/jsf.html#_double_submit_prevention or: http://showcase.omnifaces.org/components/tree or: http://showcase.omnifaces.org/components/commandScript Really happy to have Omnifaces guys in the EG because they know what's up. Second biggest weakness is that it's slightly hard to learn. Newbies at work all end up falling down the same traps :-p But if you have senior JSF presence in a project and you know html, javascript, css, jquery, el then it's great :-) I am always fascinated by these threads because the things people bring up as being weakness is almost never true...
I also see that, you need at least one senior JSF developer that also knows html, javascript, css, jquery and http in order to unblock the junior developers that stay mostly in the Java/XML world and hit their head on the wall because the framework does not allow them to do what they need to do. But if you know those technologies (HTML, CSS, Javascript, jQuery and HTTP), don't you think live would be much simpler to just use them directly, in combination with a client-side MVC framework like angular? I mean you are forced to have those skills in the project anyway in order to use JSF effectively, if i did not misinterpreted your comment. 
I suppose much of this depends on your requirements and needs. What kind of language processing do you need? Tokenization, sentence detection, constituent parsing, dependency parsing, semantic role labeling, named entity recognition, co-reference resolution? How much do you plan to implement yourself? How likely are you going to need to train your own models? Nothing about UIMA precludes you from using OpenNLP or Stanford CoreNLP. If you find that you are developing a lot of your own components, UIMA provides a decent framework for managing pipelines and deployment. Also if you do go the UIMA path, I much prefer to use it in conjunction with [UIMAFit](https://uima.apache.org/uimafit.html) (now part of standard UIMA) and [ClearTK](https://code.google.com/p/cleartk/). Warning: I am one of the developers on ClearTK, so I have my own biases. The nice thing about ClearTK is that it has wrappers for many of the popular NLP and ML packages including OpenNLP, Stanford, [ClearNLP](http://www.clearnlp.com/), Mallet, SVMLight, Liblinear, etc... This allows you to kind of mix and match the best components for your needs. For example if you were building a sentiment analysis engine, you could see if you got better results using POS tags produced by Stanford or ClearNLP. If you were using machine learning you could also easily swap between learning algorithms. The tradeoff in all this is that you need to buy into a pretty heavy framework that requires an understanding of UIMA typesystems and analysis engines. I should also mention [DKPro](https://www.ukp.tu-darmstadt.de/research/current-projects/dkpro/), which is another library based on UIMAFit. They too have wrapped many other libraries and have also released some of their own tools. For absolute speed, I would go with standalone ClearNLP. Jinho Choi put a lot of work into tuning his dependency parser to get a very fast sentence per second processing rate while still having state of the art accuracy. He has also released it with a very permissive license. The downside is that you are writing specifically to his APIs and can not mix and match in the same way as if you had wrapped it in a framework like UIMA or Gate. You might also look into [ScalaNLP](http://www.scalanlp.org/). Since it is JVM, it can be used with other Java code. Feel free to ask more specific questions, and I will do my best to address them.
OK so those mistakes from Thoughtworks where glaring. &gt; If you really want to use web technology head on you should probably not use jQuery and AngularJs either, but only use bare javascript, the DOM and plain HTML, don't you think? No, that would be too much, like the coding in assembler directly analogy. A cross browser JS MVC framework would be essential for productivity. Just by moving the component tree to the client only, and building the components directly in HTML and CSS, keeping the server just stateless JSON services. Eventually use something like bootstrap or Yahoo pure CSS, not CSS from scratch either. Take advantage of some HTML5 features that are there for years like storage for for example ref.data. I mean starting the application using a widget framework that is itself built using angular and a CSS framework, and take it from there. The same way I would not advise buiding a JSF app with baseline JSF directly, we really need to start with a widget library like Primefaces/Omifaces just built in a different way. Unlike assembler, I think HTML, CSS, JS and HTTP are technologies that don't need to be abstracted and can be used directly (with a cross browser JS library). An HTML document is already a good abstraction of a page, wrapping it an OO model only adds complexity with no real modern benefit.
Use eclipse, not notepad. Diving straight in is better.
&gt; But let's go with the case where it indeed does happen. What you see is that calls are done to re-render parts of the screen, but JS client centric apps do just as much calls to retrieve trivial amounts of data all the time. There is a difference that in client JS app we have full control on when the requests are done to the server. We are not forced by frameworks to do roundtrips just to repaint a section of the page if we have all the data needed. &gt; With a pure client centric architecture, people all too often do exactly the same thing; several calls to services (which are thus remote calls), then join them at the calling site (which is thus in slow javascript). The server can still be made of JSON services that are GUI specific - get grid rows for example, and that do themselves the aggregation of multiple calls. The aggregation of multiple backend calls can still be made on the server when using a fat JS client, its interily up to the implementer to choose/implement where the aggregation gets made. &gt; Not exactly. All well defined components (hint PrimeFaces) have well defined points where you can use CSS to control their appearance Yes, but sometimes those functions are private, and its also not a super simple thing to do. You usually have to be a JSF/Primefaces experienced developer to develop your own custom components. Its not that its not possible, but it's harder and seems less productive that to have your component written in HTML and CSS and just edit an HTML file. Finding your way through what can sometimes be a large number of Java classes to do something relativelly simple to add a CSS class somewhere is a very complicated way to do something that should be relativelly simple. Its not that it doesn't work, but that its not a very productive way of getting frontends out the door. You have to juggle constantly between the Java/XML and the HTML/CSS/Javascript world. Yes it can be made to work, but its not very productive, it has some fundamental design limitations that I don't see how future revisions can overcome. 
Thank you for this excellent response. You have asked a lot of questions that I need to evaluate against the requirement I am targeting. Fortunately, absolute speed is not one of them. I could try now to reply to your questions but I think it's more prudent of me to spend some time doing that as I don't think I could give an intelligent reply off the cuff. Your comments for now represent a road map for going forward. Thank you!!!
&gt; Its not that its not possible, but it's harder and seems less productive that to have your component written in HTML and CSS and just edit an HTML file. Before long client programmers will use components, too. Just think of AngularJS, Polymer and the widget libraries people build upon them. Or think of Kendo UI and Telerik. Don't get me wrong, I think that's a good thing. Actually, one of the goals of AngularFaces is to move component rendering from the server to the client. But there's a catch. Once client programmers start to use third-party components, these components are every bit as opaque as JSF components. Today JSF libraries drive web designers nuts. Tomorrow they're going to hate JS widget libraries :).
I do use them directly. I use best of breed. See this: http://www.reddit.com/r/java/comments/2fzzmh/what_is_the_best_component_library_to_start_off/ckef38m
&gt; This is a big issue that Oracle doesn't seem to entirely get. A few people among which me have repeatedly ask what the reason was for wanting a new MVC framework in Java EE, but it just wasn't given. That should be a good subject for some blog posts, do you remember where was it discussed? If you have some some JCP threads where those discussions popped up, I will look them up also but you might have an idea where to find them. &gt; But then why not dedicate resources into making JSF stateless? Ignoring for a moment that JSF can already run in stateless mode. Indeed it can run in server stateless mode, stateless view and there was already before client side state saving that allowed the server to be stateless. I don't see any reason why JAX-RS with some enhacements would not provide the same benefits of MVC. Indeed by adding validation and forwarding to a template it would basically become the same thing. The only reason i can imagine is that they decided to just standardize Spring MVC as the route of less friction. My guess is: modifying JAX-RS would give the same or more work than creating an MVC standard from scratch, and it would pose a risk of no adoption. So they took the safer route and left JAX-RS as it is. I am also suspecting non-technical reasons in this case are behind that decision, which is not unheard of in these matters and not a very good sign Im afraid. &gt; I personally like to have a pure Restful webservice API and not confuse that with an MVC framework Well I believe its not a matter of confusing, they are really one and the same thing. A web service receives an HTTP request, executes some logic and renders a response in either HTML, JSON, XML, etc. And so does a web layer MVC controller, it renders a partial response usually in HTML but it can also render in JSON for example. A web layer controller is really just a special type of web service, nothing more and nothing less so it seems appropriate than one framework solves both - technically its the exact same problem. 
I really believe Red Hat has a huge ace up their sleave. My guess: they are working on it now in parallel with the latest Ceylon changes that will freeze the language SDK for no more backward incompatible changes. The time for launch is late 2015 at Devoxx, maybe 2016. Expect a rewritten from scratch dependency injection container taking advantage of reified generics, a polyglot persistence layer (heck its already out there its Hibernate OGM) and a web framework. Warning: complete and totally making everything up right now on reddit, just guessing 
JSP tag files and the JSTL standard lib are about as powerful as any other templating language and both are around 10 years old. And in your metaphor assembler is html which is what 97% of the industry does. We have dedicated FE devs who need that level of control.
You learn "programming" in general and learn how to learn a new language within a very short time. At some degree all languages are the same and the rest is just syntax. If you have a lot of experience in how to program "correctly" you can apply it almost everywhere.
The link is not about software engineering, it's about the legality of using the title "engineer", which is the topic I broached. You called bullshit when I posted that some jurisdictions forbid the use of that title without the relevant degree and you asked which jurisdictions these were. The post lists some of them. For example, in British Columbia among other places you are forbidden to call yourself a software engineer unless you have an engineering degree recognized by the professional association of that particular jurisdiction.
Yes I know its always like that, specially when the memory fades of how it was before it. But if the third part libraries adhere to some guidelines, it should still be OK: prefer attribute based directives to elements to allow natural templating as much as possible (designers just open HTML files in their usual tools), avoiding breaking some the angular conventions: allow to pass in an ng-model, accept the validation tags etc, then it should be more manageable. Specially if the component is mainly just an HTML file and a few lines on JS, its easier to just copy paste it and modify it. I think if components are made in the same technologies as the ones used for buiding the web application it would automatically make them easier to understand and modify if needed. 
Well first if you've done anything with JavaScript then you already know JavaScript. It's a small simple language that you can pick up fairly easily, except maybe the comparison operators which are retarded and will drive you insane but we're all stuck with it so.... Employers are probably more interested in your knowledge of JavaScript frameworks like JQuery or AngularJS etc.. It's a good idea to spend some time tinkering with other languages. I'd spend some weekends tinkering with Ruby, Groovy, Go, C# etc just so you get an idea of what they are and what they could be good for. Come up with a simple project idea like a contact book or knowledge base app to futz around with other languages. Can't hurt. ;)
Thanks for your advice
Ultimately, you are the only person who can answer this question. I still have a long way to go with Java (I still have a lot to learn about JDBC, XML, Spring, and various services) but I've hit a strong level of expertise with concurrency, generics, and collections. I was, unfortunately, thrown a complex project at work that involved Python so as I've completed the project over the past 2 weeks I've had to learn Python as I went along. Of course, I came face-to-face with a few of the functional programming idioms that Python supports so it has piqued my interest in Scala, Haskell, and Clojure (at least to the extent that I'm merely *aware* that Clojure exists). The thing about learning another language is that you never end up learning just one. As a result of my Python project I ended up having to also pick up some NoSQL, JSON, and some JavaScript (in addition to learning how mock frameworks work). I used to consider these three things "languages" but now I don't. They're just tools that various languages use. At this point I've started to drift into Scala as a functional programming language, which I hope to use as a platform for entering into the world of Haskell. These are long-term goals but I'm actively pursuing the building block steps in my free time. The key to knowing when you're ready is, I think... all while I'm learning about FP, learning about Scala, learning about Activator and the Play framework, I'm constantly thinking "how does this help make me a better Java developer? How does this make me a better developer overall? Can I relate this to any experience I might have, or may have in the future, in the context Java?" The answer must always be "yes." If the answer is "no" then I put it down and move along. Once I'm ready to move beyond Java into the FP paradigm itself, then the question will probably turn into "object-oriented developer" instead of "Java developer." Then just "developer," then "architect," and so on. You get the picture. If these things **do** make me a better developer is not a question, that answer is universally "yes." The important question is **how** this new knowledge can be applied across multiple languages, paradigms, and domains. That's the important thing to keep in mind when tackling new territory. Do not strive to learn anything "new." Strive to use new ways to gain better knowledge of your existing skill sets.
The title should be 'Empty List of Must-Knows and Cryptic List of ToDos which has nothing at all to do with migrating from Eclipse'
&gt; So if a person has 4 items the query result is 4 lines This is a result of the join. You have a one-to-many relationship between the Person table and the PersonItem table, so you'll get multiple rows back per Person, one for each PersonItem. You can use a RowMapper to merge the many rows per Person into one row per Person. Since you're already searching by Person.ID, this will be easy. Just create it once on the first iteration through the ResultSet and add the first PersonItem in the first iteration. Then, in each succeeding iteration, add a PersonItem to the already created Person. Like this: Person p = null; while(rs.next()) { if(p == null) { p = new Person(); // populate person from row } PersonItem item = new PersonItem(); // populate person item from row p.addItem(item); }
I would suggest you go through a tutorial first, so you have a higher-level understanding, which your question suggests that you lack. Here's a [JSP/Servlet tutorial](https://netbeans.org/kb/docs/javaee/ecommerce/page-views-controller.html). This is old school. Here's a [JSF tutorial](https://netbeans.org/kb/docs/web/jsf20-intro.html). This is the more modern way of doing things.
Except if you need to know how to turn line numbers on permanently. I guess it's just not important to some people and they can magically deduce where a line is in an 800+ line module that someone else wrote. But, that was what I needed it for. 
&gt; It's a small simple language that you can pick up fairly easily An afternoon to learn and a lifetime to master, as is the case with a lot of programming languages. There is so much depth and complexity in that language, and it can be put under a huge amount of abuse. It pretends to be small and simple, but I think that's it's demented little mind daring you to take a go at it. I still can't figure out if it's genius or or insanity.
The libraries and ecosystem take longer to learn than the syntax I've found.
sorry bud, but there's nothing exceptional happening there. If you can't get your compiler working... it sounds like this simple test is working.
This was inspiring, thank you! 
Netbeans is not the problem. These errors mean that you are not giving the compiler valid Java code. The code in the link looks fine at first glance, so I am assuming you have accidentally pasted in part of the instructions above the import statements and/or accidentally messed up the Bar constructor declaration.
A pencil should be all that is needed and maybe three fingers.
I'm confused. The instructions imply that Bat.java has bugs, so it's not really a surprise that Netbeans is giving you errors, is it? The goal here is to try to figure out what Netbeans is trying to tell you. For instance, unless you understand what the keyword static means, you'll have problems figuring out what the issue with getAtPosition is.
Sigh. This is going to sound harsh. The fact you are asking for help on an assignment where you have essentially 3 more days to complete tells me you should not have even applied for this job, or embellished your resume. Most applicants wouldn't even get that amount of time to complete a Java assessment. Also, part of being a developer is knowing how to configure your environment, and understanding why you are setting it up a certain way. Why are you using Netbeans? Is Netbeans really causing the error, or is the error in your code? Are there plugins you need? Take the steps to figure it out. There are plenty of resources on the Internet. Google your errors, learn what they mean, and if anything use this as a learning experience for your career. This is why the assessment is in place, to filter out applicants. If you are already asking for people to do your work for you I can't imagine you'd last very long. No one here is going to do your assessment for you. 
Bar.java Line 25, this statement: System.out.println(bar.getAtPosition(x,y)); It's throwing an ArrayIndexOutOfBoundsException The problem exists with the inner 'y' for loop. Both loops terminate at: pos.length You're ending both loops at the x dimension. You're not ever looking at the 'y' dimension. So, you need to make the inner loop look at the other dimension and since in an array they are all the same length you can just arbitrarily examine the length of the first one, as follows: public static void main(String[] args) { System.out.println( "pos.length=" + pos.length ); System.out.println( "pos[0].length=" + pos[0].length ); Bar bar = new Bar(); try { for (int x = 0; x &lt; pos.length; x++) { for (int y = 0; y &lt; pos[0].length; y++) { System.out.println(bar.getAtPosition(x,y)); } } } catch (Exception e) { e.printStackTrace(); } } Next, in class Foo.java, it has an error with this line: System.out.println(Foo.FOONAME); In Java there is a thing called a static variable. That means that every single instance of the Foo.java class shares a single, common copy of a variable. No class gets their own copy--everybody shares the same one. The ways such a type of 'static' variable is customarily referred to is by having it come right off the name of the class, such as: Foo.FOONAME. But if look up at the top of the class at the 'declaration' for the variable 'FOONAME', we see it is *not* declared like a static variable. Instead it's declared like an 'instance' variable--the kind where every instance of the class gets their own unique copy of that variable. Also, making it all upper case is another convention that is reserved only for 'static variables. So, to fix this problem: public String FOONAME = "foobar"; We simply change the declaration to this: public static String FOONAME = "foobar"; The next problem in the Foo.java class is this line: int w = foo.getWeight(); The compiler is whining here that we don't have any method called 'getWeight()' in the class Foo.java. And if you look, well hell, the compiler is right! So, the easy way to fix that is to just create the missing method by adding to Foo.java the following line: public int getWeight() { return fooWeight; } But honestly, that's kind of goofy. You always want to have the getter be named to match the instance variable. So to make it correct you should change two things here. public int getFooWeight(){ return fooWeight; } and then also make the corresponding change: int w = foo.getFooWeight(); Next, this line is broken: List&lt;String&gt; names = new ArrayList&lt;&gt;(); This line is correct in that it has the declaration use an Interface 'List' and the instantiation use a concrete class ArrayList. That's correct. But it also has the modern 'generic' description &lt;String&gt; that announces at compile time what sort of object this List and ArrayList are expected to hold. Notice on the right the ArrayList is mssing its &lt;String&gt;. So, to fix this line, it becomes: List&lt;String&gt; names = new ArrayList&lt;String&gt;(); That makes the type checking happen at compile time and also it makes it so you don't have to "cast" the objects coming out of the ArrayList into Strings. It already knows they're Strings and so you don't have to say that. Also, the imports were missing for both List and ArrayList, so these lines need to go under the package declaration at the top: import java.util.ArrayList; import java.util.List; Also, now that we have informed the List/ArrayList that we are going to be inserting only String types into the array, the compiler now does its compile-time checking and whines at us that: "Hey, you're putting an 'int' in an ArrayList that you told me should only hold Strings. 'young' is an int. What gives?" names.add(young); So, this line above needs to be deleted or commented out because it does not fit in the List/ArrayList, giving us: //names.add(young); Next, I notice there is no closing curly bracket at the end of the class. Need to add that at the very end. } Next problem is this line: switch(a) { case young: The 'switch(a)' is fine. You are supposed to 'switch' on a variable such as 'a'. Also, the variable 'a' is correct in being an int. But the problem is 'young'. Right after the word 'case' you need to have a constant, not a variable. That line is broken because 'young' is not a constant. So it needs to become: switch(a) { case 20: The next error is in the Constructor: fooAge = age; fooWeight = weight; These assignments are a problem because when we declared the two variable 'fooAge' and 'fooWeight' we used the 'final' keyword. private final int fooAge = 23; private static final int fooWeight = 150; Whenever you use the keywords 'final', it means that--all at once--you need to give them values and *you can't ever change a final variable again*. So, to fix that, you need to remove the 'final' keyword from those two variables, leaving them like this: private static int fooWeight = 150; private double fooHeight; Now, the class has no more defects but I will comment on one more thing. Notice that 'fooWeight' is declared as 'static'. Remember that means every copy of the class will share the one copy of this variable. That doesn't seem very sensible. If you made 1,000 instances of this class, every one would share a single copy of the 'fooWeight' class. If you changed it for one instance, you changed it for everybody. Probably not a good idea having this variable declared as a 'static'. Now, there are no more 'errors' left in this class but there is one problem. Notice this line: public void main(String args) { That sure looks *close* to a Java 'main' method but actually it's not. It is missing the required 'static' keyword. Why would a Java class's 'main' method need the static keyword? Well, because it has to be the 'first domino'. The 'main' method allows us to 'instantiate' a copy of this class so we can run it. Without it being 'static', there would be noplace to start. This is a regular method that happens to be called 'main' but it's not really an official Java first-domino 'main' method. For that reason, as it stands now this class cannot be run by itself. Also, the 'signature' of the method's parameters are not right. The broken one is expecting a String called args. To be an official 'main' method it needs to accept a String[] array. To enable that, we need to change the fake 'main' method from: public void main(String args) { //WRONG to public static void main(String[] args) { // CORRECT And once we do that we can actually run the class. The output is: foobar Old Now, I have helped you and the purists will eat me alive. Go forth and study your ass off or you will crash and burn in this job. You earn this help I'm giving you by studying your ass off before your interview and for the next year. Buy yourself a cheap early edition of the Deitel&amp;Deitel book: "Java: How To Program" on Amazon and read that bastard. The latest edition costs $100 but if you get an older edition, you can get it for 1 cent plus postage. Do it and earn this help. 
Are you able to create a "hello world" type class in that project? public class Hello { public static void main(String[] args) { System.out.println("Hello"); } }
Hey I feel for you man, when I finished college and started looking for a career in Java development I went through the same thing the first time. But seriously, Three days ago!? So you had 6 days to compete it? You still have 3 days? Just google the errors, if you haven't gone through this process before they are going to ask you why you did what you did. They are going to ask you about your code. You have to write it. We would do you a disservice. My first assessment I copied code, I was interviewed about it, and was embarrassed that I couldn't answer 90% of what they asked me about what was supposedly my own code. Fight the urge man. You could probably finish this after a few hours of going online and doing some research. No there is no book, there is no shortcut. Spend some time with the problem. Edit: spelling
I worked on a NLP project 3 years ago, at this time Open NLP was very promising, with a lot of interesting features, but not mature enough. I needed a robust dictionary implementation, Open NLP's one was incomplete (e.g. not possible to add meta information on the dictionary entries) and had a few bugs, so I've chosen GATE. Note : Be careful if you go with GATE, it's not really designed for performance/high scalabilitily so you may need to use some tricks/workarounds to have decent performance
First off your idea that JSF performs requests all the time is laughable. As a developer you are in full control of such things. It is true that many components are bad though. That analysis from Thoughtworks was a joke, especially before they edited it. For me JSF does not abstract away HTML at all. I know exactly what HTML I get from each component because to many of them are shit so you need to look. p:calendar is no more abstracted for me than it would have been if I got it from a random js framework. In fact I use many JS components (for example datatables.net) and I perceive them to be no different. They are not integrated as nice with EL but that's obviously solvable. Tell me one thing that would change if I use angular instead of JSF? The JSF component tree is optional but as it turns out in the myfaces project that algorithm is so sturdy now that it does not really matter if you have it or not. 
Check for an export of JAVA_HOME in their .bash_profile (assuming bash, maybe just .profile as well). Also check if they have added path/to/java/bin to their path
Most of those components being soldered like capacitors, transistors, micro controllers where thought by Phds just geeking around on pure theoretical shit. Circuit boards are usually completelly replaced and manual repairing is avoided. You put in a bunch of components in a CAD program that helps define how the circuit will be printed. After that assembling is just monkey work that anyone can do, it requires very little qualifications. Most assemblers have no clue what they are assembling, they just read a schematic and a bill of materials. Assembling circuit boards is not engineering. Phds assembling circuit boards does not make any sense. I have no problem that a highly specialized worker like a PhD does not know how to do it or want to do it, because in the concrete case of circuit boards there is nothing to be gained in terms of design value by doing it yourself. Undoutebly for other things? But certainly not for circuit boards. 
I cant for the life of remember exactly, but the installation path is different for 1.6 and 1.7 i think. One is in Library the other in Applications? Sorry its pretty useless. 
Nothing good will come of this. Take this as an initiative to begin your own serious personal study. If you're serious about software development then this isn't the final opportunity you'll see. In fact, with a degree, it doesn't sound like you've been looking very hard for a job in development at all have you? I compiled your code and the output said "don't wait for something to fall into your lap before you pursue it."
Make a TreeMap&lt;Integer,Integer&gt;. The Key values are thresholds, and the Values are indexes in the array. Use .floorEntry() with a random value in the range you've used to set up the relative probabilities of each index. Very tweakable, and easy to wrap your head around.
Thank you for your suggestion - this is probably the maximum in tweakability, at an acceptable cost in memory. Note that it would not even have to be a TreeMap - a simple int[] array of thresholds can be used with `Arrays.binarySearch(…)` being also in O(log n) and wasting less space. Edit: One downside is the limited expressiveness of 32-bit integers. E.g. if I wanted to select the first element with double the probability of the second (and so on), I will run out of bits soon.
Thank you! Combined with /u/LemonSyrupEngine's suggestion this could be a possible easy to calculate way of filling his threshold map (or removing the need for a threshold array completely, as it is easy enough to recreate the Fibonacci sequence in log(n) time. The downside is that there are only so many fibonacci numbers that fit into 31 bits (my napkin calculation shows that they run out at about #45).
Hm, for that matter, I'm not sure why I didn't have the map just map to the values in the array directly.
If one would use the map, that could be a solution (unless one wants to get data from more than one array [edit] or have the array contents change in between selections), but as I said, it's not necessary to store the indices, just the thresholds.
I also found Errai a bit weird in where it fits in with the overall JBoss product strategy. I think they really tried to be on top of things when it looked like GWT was going to be The Next Big Thing. But unfortunately for them GWT went down screaming and then got stabbed in the back by its own creator Google in favour of Angular. So now they're left with something that doesn't serve much purpose and doesn't really fit into any strategy. 
Same weakness Java EE has. Developer perception caused by j2ee 1.4.
&gt;There is a difference that in client JS app we have full control on when the requests are done to the server. In JSF requests also don't happen whenever the framework feels like. You as the developer specify on which action things should be repainted. Now existing components may do Ajax requests as part of their build in functionality, but js components may also do calls for data by themselves which causes a call to the server. Simple drags or moves may cause an excessive amount of events to be thrown and generate a ton of garbage (which is some browsers then leaks, nice!) And nothing really stops you from rendering part of the screen yourself, either with your own code or by using a component that does that. Or, use a combination where you use custom jQuery to fetch HTML from the server. See http://showcase.omnifaces.org/components/componentIdParam Look at the jQuery list example at the bottom. Also try switching the tabs for the source code. Is there an Ajax call for each switch, or is there not? 
Don't forget that in JSF components can also be just an HTML file with some js. These are called composite components.
Honest question: where is a problem in c# naming convention? I come from a c# background and never noticed such thing (maybe just overlooked it)
A little nitpicking: [`Random.nextDouble()`](http://docs.oracle.com/javase/8/docs/api/java/util/Random.html#nextDouble--) will never return `1.0`.
True. Thank you for pointing that out.
I noticed that the index 0 is chosen with reduced probability – approximately half the probability of index 1.
You know what, Im being stubborn. In Canada it is certainly something you need to worry about. Sorry.
&gt; Next, this line is broken: &gt; &gt; &gt; &gt; List&lt;String&gt; names = new ArrayList&lt;&gt;(); &gt; &gt; &gt; &gt; This line is correct in that it has the declaration use an Interface 'List' and the instantiation use a concrete class ArrayList. That's correct. But it also has the modern 'generic' description &lt;String&gt; that announces at compile time what sort of object this List and ArrayList are expected to hold. Notice on the right the ArrayList is mssing its &lt;String&gt;. &gt; &gt; &gt; &gt; So, to fix this line, it becomes: &gt; &gt; &gt; &gt; List&lt;String&gt; names = new ArrayList&lt;String&gt;(); Just a note, he mentioned he was using Java 8 so the format **new ArrayList&lt;&gt;()** is actually valid. Java 8 will intuit the data type from the left side variable declaration. 
It's nice that you're helping him, but keep in mind that he's going to be *somebody's* co-worker/responsibility. If he can't figure this relatively simple assignment out, there's no way he's going to be ready for the real working environment. The reasons for these tests is to ascertain whether somebody has the programming knowledge - and for something this simple, the critical thinking skills - in order to learn on the job. By holding his hand through it, you're dropping him in a situation where he'll either get fired, or be a massive burden on his co-workers and hope he goes unnoticed until he figures things out.
Thx again for your thoughts! I think this whole concepts stands and falls with the capability of the used language to statically determine the exponents, i. e.: Let Length = &lt;Distance&lt;P1&gt;, Time&lt;P0&gt;&gt;. So Length * Length --&gt; Distance&lt;P2 = P1 + P1&gt;, Time&lt;P0&gt;, (Length * Length) * Length -&gt; Distance&lt;P3 = P2 + P1&gt;, Time&lt;P0&gt;. But java can't perform statitic computations. I think maybe one workaround would be to use chaining. UnitExponent&lt;U extends UnitExponent&gt;. P0 implements UnitExponent&lt;P0&gt; P1 implements UnitExponent&lt;P0&gt; P2 implements UnitExponent&lt;P1&gt; P3 implements UnitExponent&lt;P2&gt; But that would only work to retrieve the direct predecessor (+ successor if it is extended). Stuff like m^2 * m^2 = m^4 would be impossible. I also took a look at church numerals, which provide a way of displaying numbers as lambda expression (http://en.wikipedia.org/wiki/Church_encoding#Church_numerals), but that won't work on java either. Another option would also be to limit the dimensions. Let's say to 5 from [-2, 2], then we could create 2 * 5^7 versions of the function (since there are 7 fundamental units), one for each possible combination of two units, but since java doesn't allow overloading with generics, this is not an option - let alone the task of implementing resp. writing 2 * 5^7 function declarations would be very time consuming^^
I had a very, very narrow NLP requirement for which I evaluated OpenNLP and Stanford. Both proved unsuitable because of the somewhat astounding processing requirements of both. My requirement had to parse several hundred pages of text per thread per second; we ended up rolling our own optimized parser targeting the specific features were needed.
I agree with your sentiment and that's why my admonishing final paragraph. I assessed that this must be an entry-level role given the basics under test and thought that he would be safe as long as he actually showed some desire to learn. Had this been anything but an entry-level position, I would have sat on my hands. But an entry-level programmer is supposed to learn everything.
That's my one great fortune. I have no time sensitivity in my processing. That said, I will be curious to see how these two alternatives perform. 
JSF is not suited for small scale projects nor is it ideal for a beginner. I would not recommend this approach at the start. Think of JSP as "petrol engine and manual transmission" and JSF as "diesel engine and automatic transmission" from a mechanic's point of view.
&gt; p:calendar is no more abstracted for me than it would have been if I got it from a random js framework. Our web designer (a guy from an external company) hated p:calendar, p:selectBooleanCheckbox and p:selectOneMenu. We in turn hated him because it was really difficult to translate CSS optimized for native HTML to PrimeFaces. The lesson I learned is: projects employing a web designer better stick to the new HMTL5 friendly markup of JSF. Projects using a JS framework like Kendo, PrimeUI, Telerik and so on have a similar problem, of course, so it's not a problem that's automatically solved by moving code to the client. 
Try passing it the 31st of February 
Yeah that would be parsing a string to a date object. There is no way to have a date object for 02/31st is there? It would automatically convert it to 03/03 (03/02 if a leap year) and so formatting that date object to a string would output 03/03 (03/02) regardless of how the date object was instantiated. Am I wrong/missing something?
I covered all the bases (why I posted two links) without bringing in things like Spring because I have no idea where this guy is coming from and I did not want to confuse him further. This person needs context more than specifics. Besides, how is JSF not ideal for a beginner? It's a component oriented framework so it is a lot easier to get started. JSF only starts to get complicated when your requirements start to get complicated. Your own analogy contradicts your point. An automatic transmission is easier for a beginner to driving for learning, but beginners aren't going to be racing on a track, to where the differences between an automatic and a manual transmission would even begin to matter.
Following your recipe I need a good grasp of HTML, a few simple JSF components, a lot of CSS knowledge and no Javascript at all. Neither do I have to know much about HTTP. Sounds good. Keep things simple. Personally I like the "big" JSF components - such as the prime:dataTable and the picklist. Both components don't require HTML or JS. They don't even require CSS until you want to modify the layout. But of course we've got client side frameworks that are every bit as powerful. Just think of [ngtable](http://bazalt-cms.com/ng-table/). 
that's pretty much the reason i stopped pursuing java certification i started twice (2000 and 2011) and both times i came to the same conclusion. it would be better to go USE the language to BUILD stuff than to get a certification i think i made the right decision although, there have been interviews where being able to quote the java spec down to the page number may have impressed the interviewer but then it comes down to, do i want to work for someone who is more interested in my knowing that page 5, paragraph 4, line 3 of the the java spec says "blah blah blah" than what i can make? no. i don't want to work WITH someone like that, let alone work FOR them.
My bad. Yes, you are correct that it only affects parsing. "Specify whether or not date/time parsing is to be lenient. With lenient parsing, the parser may use heuristics to interpret inputs that do not precisely match this object's format. With strict parsing, inputs must match this object's format."
Add commons-math in your dep tree and do something like this: BetaDistribution betaDistribution = new BetaDistribution(1.0, 5.0); double d = betaDistribution.inverseCumulativeProbability(random.nextDouble()); int next = (int) (d * (double) n); // The method inverseCumulativeProbability() might return 1.0 if (next &gt;= n) { next = n - 1; } I am using it in the vehicle routing problem, to select nearby entities: https://issues.jboss.org/browse/PLANNER-202
Ok, thanks. I couldn't think of any way that lenient vs strict would effect formatting but I wanted to be sure.
Yeah it's a weird code snippet!
I'm a 26 year old developer and have a BA in CS and have worked for about 4 years since graduating college. I did not know any JavaScript at all upon graduating and picked it up throughout the years on the job basically. I'd say concentrate mainly on Java but you definitely want to be familiar with JS too. I think it is a must to understand the basics. I'd guess for most of these tech companies especially if it's a Java based role will be more impressed with your Java knowledge unless the role is utilizing some particular JS framework as others have mentioned such as angular, node, etc.
What do you mean with native HTML for a calendar? Such a thing does not exist. JSF produces HTML and styling it is easy. Why would it be easier to style a pure js widget when the browser end result is exactly the same? You can have html javascript and css and that's it. Also if you use primefaces then use themeroller.
I feel that way too, tried many times to take mock exams but they are so intentionally misleading and they ask you questions that any ide or compiler would signal immediately. Just a bunch of crap.
I use Primefaces, Richfaces, Richfaces 3.3 I was referring to the stateless feature
Actually I never meant to say you don't need javascript knowledge. I use a lot of jquery and javascript and feel this is a must at least for me. However our apps are SAS and we must optimize perf. For instance we cache in javascript arrays and cancel out ajax requests. Then the cache is cleared using websockets when needed. We do this for searches and view details etc. We save the latest 15 searches at any time because our uses often search for the same thing. for example: apple ---&gt; Search 1 because slow typing caused onkeyup delay ran out applejuice ---&gt; Real search apple juice ---&gt; User not satisfied with result, tries another query apple ---&gt; Stops here and thinks for awhile applejuice ---&gt; Gives up and uses original query This means 3 queries for us. Also means faster response for user. Even though solr is really fast a client cache is faster. We use javascript and jquery here and there. Just a few lines that's usually enough. Picklist is a good example of something I would be very suspicious against using because it's basically two divs and one ajax call and one or two functions. The datatable from primefaces is used by us but only to get a h:datatable that is preintegrated with themeroller. Everything extending is forbidden ground so to speak. For example many features require that you implement a backing Model from primefaces. This is not acceptable for us because we use several different tables and they must look the same in the backing bean connection. We shy away from implementation details like that consistently. When we click a row we want a get request to the details page in many, many cases. This is not possible with p:datatable. All though our component can be injected into any table or row thingy and it handles row click - &gt; get request very gracefully. Old generation uses a lot of onmouseover and this is implemented with an extra html element in the datatable. Not acceptable because we have very many rows. Also the text in the hover is often duplicated and we need to use references then to avoid extra html. (again javascript is used) columngroup and header and footer have limited support for columns. We use a lot of dynamic column type of tables in old generation.
now you need to use some logical operations. if card() == 10 and card() == 11 then: print "black jack". else: "bust!" Ans so on for draw and splits etc.
How about you learn two frameworks at once. develop an app using dropwizard (java ) and angularjs (javascript ). learn the languages as you need to do understand and develop the app. Start with something simple, like the classic ToDo list. Don't be afraid to STEAL code as long as you understand it well enough to fix bugs within it ( there will be a few ). 
First: this question is better posted in /r/Javahelp, but without a clear question you would not get much help there either. Think about how Black Jack is played: 1. There is a shoe of (x) decks of cards, each deck consisting of 52 cards. 2. Each player gets dealt a single card 3. Each player gets dealt another card 4. Each player can decide to: + get another card + stay + split (under certain conditions) 5. Once all players stay, the scores are compared to determine the winner. --- With the rules out of the way, let's think about how to implement them: 1. First, you should split your game in different classes: + a class for a single card (suit, value) - probably using enums + a class for a deck of cards (holding 52 cards as per standard poker rules, ability to shuffle) + a class for a shoe (consisting of x decks, ability to shuffle through all x decks, can deal single cards that are removed from the shoe and passed as return value from dealing) + a player class that can hold up to 2 hands (because of splitting) - conatins methods to check and return the score + a game class that ties all the above together - here would be the main method that runs the game loop. 2. Now think about a way how to join all of the above with the rules that are defined. You will need some arrays, loops, conditionals. 
I don't think we even look for Java certifications when recruiting. No-one seriously develops with EMACS or Notepad++, so you're never going to be without syntax checking or documentation. I suggest you focus on more valuable things!
Yeah...95% of the situations in the Java cert test you will never see in the real world. But some of those one offs are useful (how Strings are handled by the VM, for example). The test isn't terribly expensive or difficult and some of those little things are worth knowing. It may be worth it just to study aspects of Java that you will never run into just to get a better feel for how it behaves overall. And some employers will take a serious look at certs. It will also be listed on the Oracle site with your name so that if someone does a Google search when hiring you and you've said you have 'x' years of experience in Java, there will be some evidence of that being true. That said...publicly hosted projects get you most of that with the added bonus of being useful and a better measure of how good your code is. If it was between getting certs or showing off projects I'd pick projects.
My own datamodel &lt;-&gt; TreeAdapter(datamodel) &lt;-&gt; JTreeTable
&gt; What do you mean with native HTML for a calendar? Such a thing does not exist. Yes, it was a wrong example. As far as I remember our design agency forget date pickers completely. We had to style it ourselves. However, there's a nice HTML5 date picker, at least in Chrome (see http://www.w3schools.com/html/tryit.asp?filename=tryhtml5_input_type_date). I hope the other browsers will implement it, too. &gt; Why would it be easier to style a pure js widget when the browser end result is exactly the same? No, I didn't want to say that. Quite the contrary. I wanted to express it's simpler to style a native HTML checkbox than it's PrimeFaces or PrimeUI counterpart. &gt; Also if you use primefaces then use themeroller. We told our web designer the same. But he wouldn't listen. We even gave him the generated HTML code, and he ignored it. He just gave us a bunch of very basic HTML and CSS files and told us "that's the way to do it". There was no PrimeFaces inputText field, just HTML input fields. I think it was an exceptional strange situation, made worse by many non-technical issues. It's difficult to draw conclusions from that. The one conclusion I can draw is web designers tend to think different than JSF developers. They (or many of them) prefer simple HTML over sophisticated, generated HTML code consisting of several lines of HTML, CSS and JS code. I hear this from many projects, and it's one of the reasons why the new HTML5 friendly markup was introduced to JSF. Why use a PrimeFaces panel if a simple div + CSS does the trick, too?
I wouldn't think many people do Java with a text editor such as Notepad++, Vim or Emacs. Some languages are fine but Java is one of those languages that really benefits from a good IDE.
In our case we have a designer who creates the look of elements using drawing tools, which we then translate to CSS that's applied to PrimeFaces components. Works like a charm!
Yes that's true, the problem is that that means writing your components from scratch. I do sometimes write an angular based component and wrap it in a XML tag, but that means not using the components of the widget library in the first place. I have the impression that if we are going to do pure HTML, CSS and Javascript inside a JSF component, might as well go all the way and to the whole application in those technologies directly, instead of adding a level of indirection that adds complexity without providing a good abstraction for the underlying technologies. 
Certified dev here. Real tests are nicely formatted and usually don't ask you questions that you can easily google. If it helps, I started the same way as you, absolutely not convinced by idiotic free mocks asking idiotic questions. Couldn't see the point besides a line in a CV. The fact is, if you get perfect or close to perfect score is enormously boosts your confidence with the code.
&gt;In JSF requests also don't happen whenever the framework feels like. You as the developer specify on which action things should be repainted. Most of the JSF library components that I have found so far do Ajax request basically all the time. This is needed in order to maintain the server-side document tree in sync with the client side. Its true that we could write components that don't do that, but thats not how most of the widget libraries out there work. They do send really a lot of Ajax requests. &gt; And nothing really stops you from rendering part of the screen yourself It's true, but that means not using the components of the widget library and building our own, by creating jQuery plugins or Angular directives. For that I would personally rather do the whole thing in those technologies directly, using some Angular-based widget library for example. Im not saying that it cannot be done in JSF, but that its not very practical or productive. In JSF in order to build custom components, we have to know the underlying web technologies anyway. Why not use that knowledge to build the whole thing? We can't escape those technologies might as well fully embrace them.
It's true, but still it seems a great alternative to the standard GWT libraries built on top of the compiler. Basically they threw everything except the compiler away and reimplemented everything with a new philosophy, embracing HTML and CSS and not putting an OO abstraction layer on top of the document. I really like the approach and find it too bad that they don't promote it more. There are still a lot of pure GWT and GXT projects out there that could consider this alternative, but its hardly gets any press.
B
I confirm the need to know jQuery when doing Primefaces too, there is just no way around it. JSF takes you for maybe 90% of the way but for the last 10% there is the need for going web. The problem is that it's a completely different world once we look inside the JSF components, completely different technologies with a different learning curve. Usually there are a few seniors are in the team that can build components and wrap them in XML tags, otherwise it's impossible to get frontends shipped doing the required functionality. I had a similar case with the data tables, because they where doing ajax requests basically all the time they where not usable for our use case: a group of excel-like grids with a lot of keyboard interaction, custom tabbing around and multiple comboboxes that depended on each other on the same row. Also in environments with constrained network. We ended up making the whole thing in angular on client side only. Our best JSF experts pounded on it for weeks and there was no way. With a lot of customization on the jQuery part of the part there was something sort of working, but it was a huge mess. We gave it a shot in Angular, it was done in 3 days. It's not that different from doing a whole bunch of jQuery plugins, same technology just less code and more maintainable.
The problem is that unless the business analysts designing the UI base themselves on a library showcase to know what is simple to do from what is not, they always end up asking for stuff that the widget library is not made to do. 
LingPipe is probably off the table but my app *would* work under GPL terms. Thank you!
It definitely is full of gotchas - although I took it a couple of years ago (Java 1.5), I can't say whether it would be worth it for others. I'm a career changer (taught middle school for 13 years), and certifications were necessary for me since I don't have a CS degree. While studying for it definitely taught me Java, I don't remember all of the small syntax stuff that I did when I took the exam.
sounds very interesting. I also don't recommend mixing Angular and JSF, but it can be done reliably. I too for similar reasons had to add Angular in a JSF project. For curiosity I will leave here how this was implemented: One portion of the page is an Angular app, the rest is just a plain JSF2 page. The angular part of the page works in its own backing bean model, serialized back and forth to the JSF tree using a hidden field containing JSON. The hidden field gets filled in with the updated model just before sending an ajax request. This is done by applying the equivalent of a before aspect to the Primefaces.ab ajax request function. Again i don't recommend this, but it's a way to cope in a JSF project with requirements that involve very interactive parts of the page where server roundtrips aren't acceptable for user experience due to the lags introduced, constant refreshes of related parts of the page, lots of custom keyboard interaction and custom cursor focus logic (jump between grids in a non standard way etc.) Some of the most experienced JSF developers tried to pull this one off for weeks, there was no way even with a bunch of customized jQuery plugins. In angular with two guys it was done in 3 days. &gt; I didn't invent AngularFaces for green field development (although I think it can be a useful tool in green fields, too). Just for curiosity, if you where given the choice in a greenfield project, on pure technical merits alone would you do the frontend directly in Angular, or would you take a combined approach? In JSF shops you would take AngularFaces, but without JSF being imposed due to political/ non-technical constraints, would you still use it?
I think that it depends a great deal on where you are in your career. If you're straight out of collage or high school, seeing a Java certification on a resume would be pretty impressive to some people. If you've been in the industry for 10 years and have a handful of solid references, that says a lot more than a certification or two.
&gt; You would be surprised that still today most people cannot properly answer the question "Is Java pass by value or pass by reference?". That seems to be one of those intentionally misleading questions. IMHO Java is pass by reference (or reference-copy), except for primitive types where the value is encoded in the reference itself. When such a questions comes from someone who knows the answer, I would assume that it's either ... or ... and not somethings in between. Even though everybody coming from a CS background should know that the one correct answer to all CS related questions is: it depends.
People do that regardless, like asking to remove the close button from a browser's window :X (yes, someone actually put this into requirements once for a web app)
Or pass by value of reference. 
Doesn't seem to be active any longer. Didn't work for me on JBoss.
inorite? You could just as easily say that nothing important is written in Java. It's not used in TCP stacks, DNS servers, operating system kernels, or compilers except for its own language, so, clearly, no one uses it!
This was very helpful post. That's easy to maintain and it's fast readable. Now when I look your snippet I think I should figured that out myself, but it is what it is. Thanks. :)
I went for a certification because I've used a lot of technologies over the years. Even though I used Java on and off since Java 1.1, people never take me seriously as a candidate (this is reflexive... I'm not taken seriously for Java jobs or jobs in other technologies I've used forever). Certifications are always annoying. I didn't take any MCSE stuff but browsed certification guides at the library out of morbid curiosity, and most of the questions are designed to get people to memorize what features Microsoft products have. The Java cert has a lot of that same thing plus lots of questions which are basically language spec details. There's very little if any effort made to make sure that you can program, only to make sure you know what features the language offers and to understand those features. They don't want you writing Java using only the features that exist in VBA, for example. That's my take on it. The job market in Tempe also blows. One job I applied for wanted Apache experience and nothing else. Great! I've attached gdb to it and fixed crashers in it, and used it since before it was even called "apache", often in very large productive environments. Didn't even get an interview. I would hope people would look at my resume and say, wow, this guy raises to the occasion and works hard, but instead, it seems like they say, oh, he's a traitor to our pureist Java/Ruby/nginx/C/Linux/whatever camp and bin me. And no, I'm not currently looking at relocating to New York or California, but thank you anyway. Java is burning hot there, but so is every single other technology. So, I'm hoping that this Java cert helps me get taken seriously when I apply for Java gigs, even if it's only a small subset of companies who look at a mostly silly thing.
While I haven't yet taken the test, I found studying for it has helped a lot. As a recovering C developer, I learned a lot about Java I wish I had known sooner. In my day to day job though, I can't tell you how many times I've seen someone as high as a senior developer not understand equals and hashCode contracts, implement them poorly (or not at all), and blame Java for being buggy when their HashSet doesn't work properly. Most of the gems you might learn from the certification are better spelled out in some great Java books, such as Thinking in Java by Bruce Eckel.
ITT it's 1989 and Vim and Emacs don't have syntax checking plugins, etc. Work in Java full time, using Vim full time.
It depends. They make for nice MBO fodder, if you can use them for bonuses (and get the company to pay for it). The way I would look at it is the associates will show someone has a basic grasp of the language and platform. The professional will show you know the language inside and out, including WTF code that one would never hope to see in the real world. The developer (master now? I'm old) was more about showing you can write beautiful code. Former shop, we would take fresh University students and expect they could pass the associates cert after a few months on the job pushing Java code. The professional was a good bit harder - usually took a couple years, and some study was required as any reasonable code review would filter out the sort of code you would see in it. The assignment in the developer one was sort of cool - the one and only time I've ever build a thick client Java application with Swing. Nothing in the last one seemed harder then the second test. For what it is worth - on the interviewer side of the fence - if you have the professional certification, I'll skip the language questions and go directly to more interesting bits. 
Well there had to be a few of you ;)
I've done many certifications over the years, and if you're just trying to get into the market and "prove yourself" and need some guidance on what to know that you'll need day to day, then certifications are a great place to start. They certainly are "worth it" in that you'll get out of them what you put into them. Learning time is almost never wasted time. That said, that's all they are. Having them doesn't mean you're automatically employable. They don't mean you're a great programmer. They don't necessarily mean you'll make more money. Their real value is in building your skills and confidence to do all of that though.
Depending on the company, HR highly values dumb certificates like this. In reality, these tests ensure that you can reliably check your code for 'red squigglies' without an IDE. Given that 0% of Java Devs forgo an IDE, it's safe to assume these certs are BS. I've gotten my SCJP 5 a while back. Immediately my managers and HR staff considered me a senior developer for having it. Consequently, I don't work there anymore.
In this case there is no "it depends". Java is pass by value, always. This is one example of the many topics the certification exam tests you on and forces you to understand. For what it is worth, that is typically our first technical question on a level one interview. Answering it incorrectly is an immediate "no hire".
Seeing as this is the java sub, and I've recently evaluated both. NR is nowehere close to as comprehensive as App dynamics is. This is fundamentally due to their implementations. NR is nicer to look at and overall easier to use, but far from getting close to the same insights. NR has a lot of work to do overall.
Good luck, all too familiar experience. But. You know everybody lies in their CV? I even stopped worrying if the candidate's lie isn't too outrageous.
Java is 100% pass-by-value, but for non-primitive types the values are references. If it were pass-by-reference, you could do this void f(Integer y) { y = 2; } ... Integer x = 1; f(x); and it would result in `x` being set to 2, but since Java is pass-by-value, `f` only sets its local variable.
&gt; driving I specifically said "from a mechanic's point of view" so as not to extend the reach of my analogy to that of *using* the vehicle.
&gt; For curiosity I will leave here how this was implemented Interesting indeed. If I understand you correctly, my (still unfinished) demo [filter.xhtml](https://github.com/stephanrauh/AngularFaces/blob/master/AngularFaces_2.0/AngularFaces-2.0-examples/src/main/webapp/carshop/filter.xhtml) and [filter.js](https://github.com/stephanrauh/AngularFaces/blob/master/AngularFaces_2.0/AngularFaces-2.0-examples/src/main/webapp/carshop/index.js) try to do something similar. I'm not happy with my approach yet - I want it to be simple and easy-to-use - but it works. &gt; Just for curiosity, if you where given the choice in a greenfield project, on pure technical merits alone would you do the frontend directly in Angular, or would you take a combined approach? It depends. My current project doesn't really use Java. Business logic is implemented in SAP. So, yes, I'd love to get rid of the Java backend. We use Liferay, which makes JS a pain because you can't rely on ids, but I think we could master this challenge. In general? I love the built-in security of JSF, the validation engine, the templating mechanism, the internationalization support (especially the improved version of AngularFaces). Server state has never been a problem to us (yet?). Anyways, AngularFaces reduces server load considerably. Probably I'd implement an application that implements a lot of business logic and / or SQL database accesses in AngularFaces + Java 8 (or Scala, or Groovy, or Ceylon, depending on my team's preferences and skills). Web shops are a different story. That's a strong focus on the GUI. No complex database queries, little business logic. Let's use a client language! Probably AngularDart, but again, it depends on the team (and the maturity of the tool chain). BTW I don't like Javascript, but then, we could use Dart. I stopped using AngularDart at the moment, but it's just great. I hope I can resume work on AngularDart soon. GWT, Vaadin and Grails look interesting too, but I think they've missed their chance. But if I were really free to chose: Most of the time I'm writing desktop applications, so I'd chose a Windows API, such as JavaFX. Maybe I'd even return back to my roots (sort of). I understand C# is a fine language to implement GUIs. The eye-opener was when our client ordered drag-and-drop from Excel to our web application, and from the web application to the calendar of Outlook. This kind of stuff requires a native integration to the operating system. On the other hand that was one of the reasons why web applications became popular: it's easy to talk a customer out of a feature if it's impossible to implement.
But, in your analogy, the mechanic would be like a programmer who has to work on the internals of the web framework (not analogous to the person asking the question). Using the framework would be like someone using the vehicle (analogous to the person asking the question). A driver of a car should know something of its internals, but not the beginner, which is analogous to a user of JSF. From the mechanic's point of view, your analogy is not applicable to the situation under discussion.
I got my cert in 2005. I used it as a toilet paper. 
You might look at [openCV](http://opencv.org/)
This is what I meant with reference-copy. You would usually assume that a value is value and not a reference. For instance when I initialize a List with the value 1, 2, and 3 I would assume that this very list is the value. So calling a method (call-by-value) would create a local copy of that list. But in fact the method is called with copy of the reference, such that adding 4 to the list results in adding 4 not only within the method but also everywhere else. So basically call-by-reference but your example shows where Java is special. In the end it's just semantics.
I hire Java devs. Here's my take: If you have no real-world experience, certification at least presents you as someone who can learn at least enough to pass a test. If you have real-world experience, then I don't care about your certs. In fact, if you have a lot of certifications, it makes me nervous (my experience is that people with a lot of certs are generally not very good at doing real-world development).
&gt; In the end it's just semantics. Yes, it is just semantics. If you use the semantics that everyone else uses, then Java is pass-by-value. If you make up your own semantics, then it can be pass-by-reference.
wrong place.
You are limited to what drivers/libraries you can find for something like that. I say limited because not using these libraries will just be a waste of time for a first major project and will leave you disappointed for trying to implement something like that from scratch. If you can find a way to control the camera via usb or other remotes, then look for a Java library for whatever product you are using. A webcam would probably be the best bet, and I'm sure you could find a library for that. The infrared sensor could probably be hooked up via usb or serial connection. The sensor would write to your java program over an InputStream object. So when inputstream.read actually gets a value that is acceptable (probably a range of integers that reflect the infrared sensor values), then trigger the camera library to snap a pic. I know this is long winded and not formatted well, but I hope it helps. It sounds interesting and if you have questions pm me. Good luck.
Well. Without more of a spec. [libGDX](http://libgdx.badlogicgames.com/index.html) [artemis-odb](https://github.com/junkdog/artemis-odb)
Without some crazy levels of external fuckery, it's not possible to dynamically create variable names in java. If you have to, its normally a better idea to use a hashtable or array. In your case, it may be a good idea to define a method for the "random.nextInt( end - start + 1) + start;" part, and call it for each variable.
For the love of pete, [learn to use arrays](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html)!
Java 1.6 is the /System/Library/Java while 1.7 and above are in /Library/Java
You can use either a primitive integer array or a List&lt;Integer&gt; to store the values.
Programming is crafting. It is combination of education, knowhow, passion, indomitable will, curios mind and artist skills. It is engineering, science, hard mathematics and art messed up to somekind N dimensional object floating in some imaginary space that doesn't have laws of physics. And that is only part of art. You still need to interface this introvert mind of programmer with external sources like stupid customers, stupid bosses and absolutely stupid project plans such way that it is able to communicate with them more or less civilized ways without dropping to some [compulsive behaviour pattern](https://www.youtube.com/watch?v=I25UeVXrEHQ). Once you have found certification that covers all those aspect, please congratulate yourself and post certificate here to reddit so that we all know that such thing exists. Otherwise - forget certificates (they only cover small part).
What would you say the shortcomings are of using vim in java development?
With VIM/plugins itself: * Eclim is the fastest/easiest extensible way to get completion project support which leads to multiple compilation directories etc. * Eclim is noticibly slow sometimes, eclipse needs to be set up properly. * Vim/Eclim are terrible on Windows native and Cygwin, fs support is lacking cause of locking making everything from compilation to syntax checking slow. Linux works best. * Templating plugins don't support the way Java templating is supposed to work. Most templating systems in vim are interactive, and there is no way to pre-load those templates by selecting the text. Thus I use 3 templating systems for different situations. Ultisnips for interactive, Eclim's Java code gen for getters/setters, and self-written Jinja2 templates for certain code snippets. * Setting up Javacomplete / all the other java omni complete systems is a pain and a bore. Command-line environment: * Much custom code for glue scripts (deployment etc) because beyond the core java tools it seems that both the vim/unix camp and the ide camp want nothing to do with each other. (This is also a pro because you can tailor your own stuff, very situation dependent) * Not very many cli-enabled/optimized tool sets. Jswat-Cli, jdb, jps are basically all you get. There aren't very many console based static analyzers. The ones that are are garbage for sensible output and modern readable design. * No good reusable prebuild AST/grammar engine that you can use like regex in order to do refactoring. (This is something I have thought about tackling myself). Interacting with other devs: * You instantly become the black magic go-to person. You interact with the VCS directly you now solve VCS problems. Same with build and deployment. This becomes a time suck as you babysit small problems in connectivity etc. Help-desk syndrome. * You can't use your full potential. Example: You have a Spring XML based configuration, too bad you can use xmlstarlet (because you need to tinker with the format) to automatically fill out the 95% of beans it's your job to make that have the same structure but different names which can save you even more time than templating/snippets can. * You become the go to person for refactoring, especially if you have strong regex skills. For some complex refactorings even IntelliJ isn't going to cut it.
Very detailed, thanks! I don't think I quite understood your second to last bullet. Did you choose vim/linux as your java dev environment because you thought it would be ideal, or was it more because you were already used to vim and linux so it made a lot of sense to stay put? I've done some Java development using an IDE and am now using linux +sublime to write C code. I suppose that's a little background as to why I am interested. 
If you were allowed to use Java 8, it's like these two methods were designed to solve your homework problem: http://docs.oracle.com/javase/8/docs/api/java/util/SplittableRandom.html#ints-long-int-int- http://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html#summaryStatistics--
Array.fill takes whatever genNumber() returns and fills arr with it. It is only called once, so the same random number is used over and over. Check out the [for loop](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html).
LWJGL
You probably haven't initialized your `list` instance variable. By default, Java assigns `null`s to uninitialized instance vars. So you're trying to access null[num++] = x which throws a NullPointerException. What you should do is initialize `list` before you access it. You can do it in a constructor: class MyClass { private Date[] list; public MyClass(int initialCapacity) { //a constructor that takes one argument list = new Date[initialCapacity]; } //...other methods..// 
Follow-up question: how do you pass an object to a method? 
-_- I did not. Thank you! 
I did, and I was previously able to generate 8 random int's but I couldn't assign those to a variable generated inside the for loop.
Yeah wrong place. Since you're here though: "Javascript - the good parts" by Douglas Crockford is quite good - highly recommended. He also has loads of very good lectures on YouTube - make sure you give them a watch too.
I am, time to update my jdk and give this a try
The jvm only initializes null to non final fields, and 0 to numbers. It does not initialize other variables, like variables inside a method. 
Neither. Java is Call By Sharing. 
&gt; Any value in pursuing this... at all? No, not at all. For many IT jobs certs are useful. If you're an Oracle DBA there's stuff you need to have memorized. If you're a Windows admin there's stuff you need to have memorized. For developers, which is much more a creative job (you're basically writing a book that's readable for both humans and computers), certs are borderline worthless.
Why is anyone down voting this. Is there a reason not to check for null?
Slapping "if (list != null)" around a block should only be used if the value is acceptably null and null means something. If not (like in this example), you're just hiding a problem and getting unexpected behavior that's harder to understand / debug. The NPE is probably the fastest way to show you that an assumption you made is not valid.
Keep it short and to the point with a clean layout, consistent formatting and no spelling errors. If you can't spell correctly or use proper grammar on your resume -- something we assume you've proofread -- you're unlikely to be a good communicator. One thing I *hate* seeing when reviewing resumes is for the candidate to produce a laundry list of every framework of which they have some working knowledge. Unfortunately in enterprise Java, I see this a lot. Like /u/jvallet says, projects and your roles in them are more interesting, even if it's just a self-assigned project. You should also try to personalize your CV for the position for which you're applying as well. This improves the signal-to-noise ratio by eliminating listings of technologies that the interviewers don't care about. Also keep in mind that your interviewer will most likely ask you about everything on your resume, so keep the fluff to a minimum. You don't look any better when we ask you about your use of a technology and you fumble through its basic features. Personally, I use latex to compose my resume and I have a series of flags that I use to control which sections of my resume are displayed in the final PDF.
A large collection was posted recently in /r/programming, it was this link: https://game-development.zeef.com
Interesting. The most important thing is not the CV or skills profile part (though these are important, too), but the cover letter. A good cover letter will get you through the door and a good CV and skillset will keep you there. Now what constitutes a good cover letter? * Be brief. If you cannot fit it into 10 lines, you'll lose them before the regards. * Spelling, grammar and style should be impeccable. Ask someone to proofread. * If you have an advert to work with, look for what they want to read and cut out everything else. Optimally your cover letter should be the answer to their question. * The cover letter should include: Why you want to work there, what you can do for them, why they want to hire you, and *only if asked for* your starting salary and earliest availability.
Thanks for the advice. I think cover letters very often get overlooked. What I find *very* frustrating is when you go through a recruitment agency (And again, here in South Africa that's pretty much the norm), and they re-write and completely bastardize your resume before sending it to the employer. And all this editing on your resume is done by non-technically inclined people with very little to no knowledge of the industry. This then ultimately makes you look incompetent and sometimes just down-right cheesy. I wish there was a way to 'skip the middle man'.
They literally have someone retype your resume in Word format taking some keywords from your very carefully constructed PDF you sent them (I worked at an agency before my current career as a developer) :( . I do wonder what the success rate might be for someone that doesn't wait for job postings but rather get in contact with companies you'd just like to work for regardless of them having positions posted or not... 
I'm from europe and most recruiters want a Word doc so they can remove your contact information (some companies 'hire' a recruiter and then go around them to the people they suggested directly stating that they already knew this person). What I normally do is print out a few copies of my CV and hand them to the people I interview with. This way they can see what the recruiter did to my CV. Most good recruiters don't do much more than add their company logo and remove your e-mail and phone number though. Bad ones completely murder any layout or even embellish your experience. If I see a recruiter do the latter it immediately disqualifies them.
Very helpful, thanks :)
Well, mine isn't 'pretty' perse (not ugly either ;)), it just has a lot of information. I list my experience on a per-project basis so this way I end up with a CV about 7 pages long IIRC. What matters most is how experienced you are. If you are interviewing for a Java position it helps if it shows them you have experience with the frameworks they're requesting in the vacancy. The better the fit the more they'll be impressed.
You can do the same with http://resume.linkedinlabs.com I just keep by LinkedIn profile to date and generate the sections I want when I need a copy
http://algs4.cs.princeton.edu/home/
Very cool!
Oh, thank you for th explanation!
There is. Send your resume to the employer directly (find the HQ adress, add "c/o HR" and off you go).
I need to return to college and will look into what products would fit the description. Thank you for the heads up on the matter and I will surely poke you as I progress. Thank you so much!
Awesome! I will take a detailed look. Thanks!
I second libGDX! It's open source and the community is really helpful to all levels of game developers, from beginners to people who develop for a living.
1. Become intimately familiar with a low-level media library/libraries. OpenGL/OpenAL if you care about non-windows devices, DirectX if you do not. 2. Low-level "media" frameworks (a-la SFML, SDL, GLFW) are quite useful, and should become a regular tool to get your project spring-boarded if you're planning on deploying to multiple platforms. 3. Become astonishingly familiar with your programming language's standard library. I can't tell you how many times I've wandered into a codebase where the developer implemented (poorly) functionality that was already present in the standard library of their language. That's it. Once you have these, the rest is fluff. Now the hard part: write some games, and stop worrying about your tools.
Everybody on the .NET side wants to sell you something. So of course they are nicer.
Hehehehehehe =D I didn't think of that.
there is a course on Coursera taught by Robert Sedgewick that accompanies the book, it's pretty awesome
Optimized? Depends on what you are optimizing for. Java boolean array is optimized for speed by storing booleans as bytes. Java BigInteger is a way to access bits optimized for space. You can set or get the status of any individual bit in a BigInteger.
And you can enlist right now, I discovered that yesterday and started it to refresh my memory. I have to say it's really well done, tho it has quite a pace. 
Ya its working on JBOSS for me !!. I used quick start sample (http://apivisualizer.cuubez.com/quick-start.html) &amp; work for me.
I'd hope by the time his CV got to 7 pages long, he was a senior by then. If not, yes that would be embarrassing. Having had to go over resumes for a mid level position for a contractor, all of them were at least 3 pages long. Problem is, most of them lie through their teeth on these. You are probably thinking of a resume, which is more of a snapshot of a person's skills, job and education history.
Not here. I'm Dutch and it's very normal to provide a full CV here.
Yep. If you subscribe to the "pass by value, always" philosophy, then it is impossible to pass an object to a method. You can only pass a reference to the object. 
Skip arrays, go right to using a collection like a List.
Please don't give the name "list" to an *array*.
Why use Jersey 1.9 instead of Jersey 2.x ?
This also depends on where you live. I think for starting a career in development, Java and Javascript are the main ones, they seem to include a large portion of the jobs available in most parts of the world, alongside with C#. Then its the frameworks and tools, that take longer than the language: Spring, Hibernate, Java EE, Maven, Eclipse/IntelliJ and some web frameworks. In Javascript: probably Angular, jQuery and NodeJs You would need to check the job postings in your area and see what is the most frequently needed, and take it from there. 
I think [Java Performance](http://www.amazon.com/Java-Performance-Charlie-Hunt/dp/0137142528/ref=sr_1_2?ie=UTF8&amp;qid=1412702301&amp;sr=8-2&amp;keywords=java+performance) and [Java Concurrency In Practice](http://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601/ref=sr_1_1?ie=UTF8&amp;qid=1412702361&amp;sr=8-1&amp;keywords=java+concurrency+in+practice) are two of the main ones. Especially JCIP is the reference for concurrent programming.
I did a couple a long time ago, I thought that despite the flawed format, they are useful for someone starting in the language. It creates a short time goal and gives extra motivation for doing a deep dive in the language. You cannot pass the exam without buying a book that allows you to study for the exam, tacking mock exams etc. I would wait for the Java 8 cert.
Having to fit your resume on one page is some old school bullshit.
I agree, it was very difficult to keep up with the exercises, but even then, watching him explain in the videos gave me insight into the material that I wasn't getting in my uni lectures 
The "bible" also known as "Effective Java" by Joshua Bloch. And don't worry about performance too much: "We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil" (Knuth) 
For now, use what you know if you don't know the ide it won't serve you. do the task, then bust your ass learning the ide before they figure out you don't know it. Sounds like your problems are wresting with the ide, make sure the java standard libraries are on the projects classpath in the ide. You probably copied them over to local files so make sure the class names and packages line up. Oh and it'll be an arrayIndexOutOfBoundsException because of that inner for loops y, and second will print old. Didn't compile that's eyeballing, human margin of error ect. And it won't compile as is there's bugs. And oracles online java documentation is your friend more than the textbook for this, specifically the java api.
I am not sure whether this is a viable solution for you. Python's NLTK is pretty much the best solution we have (correct me if I am wrong). You can create a Python service and query it from your Java code. 
umm, what's a cv? is that just a resume?
I think it depends on what you mean by "laundry list". Three or four, just enough to fit on one line, doesn't seem bad. Six or more *would* seem like a laundry list though. You only have so many hours in the day. So the more you "list" the more watered-down your knowledge looks. Also, if you just list everything you know about Java it can also be perceived as, "I don't know what you're looking for." This is why you tailor your CV to the position.
All I see is a login page. Does Jersey make REST login pages?
Thanks for the artemis-odb mention :) Also +1 for libgdx; great library, very flexible and never (rarely) gets in the way.
Well I only followed the first lesson last night, since someone linked it here on reddit (was considering that course for a while anyway). This is the link to the course: https://www.coursera.org/course/algs4partI /u/langfod linked the book that you should read while doing the course anyway. Regarding the pace, my gripe is, that I would have liked to implement the intermediate steps myself before they would have showed the solution already. Then again I guess that's a bit too much to ask for such a short course. I haven't tried yet, but it seems you can still hand in your solutions to the exercises, just won't get graded?
Wow...doesn't even work if I log in. "Access Denied You are not authorized to access this page."
Yea, I basically just used the course as extra material for my Algorithm and Data structure course at university, and regarding the assignments, I think it is still possible to turn them in, however I don't know if they have all the solutions. But it was almost impossible for me to do both courses at the same time, so I basically just watched the videos and half-assed the exercises 
This thread is yet another reason I use Netbeans and not Eclipse. Maven is fully integrated right out of the box with no plug-ins. Don't need a netbeans project folder or anything. It's awesome.
The anonymous inner class approach is idiomatic. Although, if you're using Java 8, you can now do something like this: button.addActionListener(e -&gt; label.setText("New text")); But: &gt; either have the main window implement ActionListener This is a common pattern, and the actionPerformed method becomes a switchboard. For example, if you lift button and label into an instance variables: public void actionPerformed(ActionEvent e) { if(e.getSource() == button) { doButton(); } else if(e.getSource() == ...) { ... } ... } private void doButton() { label.setText("New Text"); } You could also use the action command approach: button.setActionCommand("changeLabel"); public void actionPerformed(ActionEvent e) { if("changeLabel".equals(e.getActionCommand()) { doButton(); } } &gt; The problem with this method is that I can't think of a way to then &gt; change things in the main window If the ActionListener is an inner class that is not static, then you have access to all of the parent classes instance variables (just like the anonymous inner class).
Okay, good to hear the anonymous inner class is acceptable. I'll have to look more into lambdas, that first example looks interesting. I think the actionCommand method looks the most promising out of all of them. Thanks for the info!
SFML, SDL etc aren't really java frameworks though, though I agree that learning a lower level framework is a good investment in the long run. LWJGL would be the SDL of java; if x-platform support (android, ios, desktop, web) is an issue, rather go with libgdx or [PlayN](https://code.google.com/p/playn/). &gt; Become astonishingly familiar with your programming language's standard library. Java collection classes generate quite a bit of garbage; better go with the ones that most frameworks bundle - they are likely to be much more constrained in regards to allocating temporary objects.
The only downside I see to Eclipse is that it can be very ram intensive depending on the number of plugins and files you have open. Otherwise it does just about everything with the right plugin. On that note I use Eclipse for home projects and work projects.
If it were up to me, everybody would learn java with a text editor and a command prompt. This is how I learned it "back in my day". It makes the day you start using an IDE that much more memorable. You'll have to wipe a tear of joy from your eye. IMHO, don't take the IDE plunge until you know how to write, compile, and run java at the command line. Then work your way up from there. When learning, you don't want to see an IDE ad some magical java-creating tool. You'll be more marketable knowing the underlying workings.
If you want an exact answer, I suppose you need to find a library that represents functions symbolically and supports differentiation. Or you can just try to calculate (f(x+e)-f(x))/e for some very small e... but the problem is, while the slope should get more accurate the smaller e gets, on the other hand floating-point imprecision would probably just hurt you more and more.
If you're wanting to add real calculus to your program I suggest not doing it in Java. Edit: I'm not saying Java isn't a good language, it's just not a language that's particularly conducive to manipulating mathematical functions. 
If you want to work on projects, then you could either work on your own ideas, or from the list of idea generators on the faq I mentioned earlier, or [Martyr's project ideas](http://www.dreamincode.net/forums/topic/78802-martyr2s-mega-project-ideas-list/). There's also tons of free courses involving Java such as Stanford's [Java Methodology](http://see.stanford.edu/see/courseinfo.aspx?coll=824a47e1-135f-4508-a5aa-866adcae1111) which may include some projects to work on as well. In my humble opinion, unless you're superb in writing methods in the most efficient way, don't overlook these small problems. They're important for building a solid foundation on algorithmic thinking. If these problems are too easy for you, then by all means, go for the big projects. 
I learnt to drive a car 25 years ago. The steering wheel and pedals are my interfaces to the car. To this day, I never took the time to learn how to change a flat tire or change the oil. I have never been curious at opening the hood. If car breaks down, I just call Roadside Assist and get secret giggles from the mechanic who thinks I'm as dumb as a granny for not knowing how to fix simple things in the car. Neither have I peeked into the byte code. I really should learn assembly and low level hardware programming and CS abstract theories in order to feel superior to my colleagues who only know how to use high level productivity tools that help churn out code that give our customers business value and competitive advantage. 
What do you suggest? I'm using it as an implementation of a feature to a piece of hardware that is coded in java. I *could* use another language to get the slope and export it to a file, then read the file, but i wouldn't know what language to use or where to start.
We're able to use LabVIEW, C++, or Java, but no one on the team knows c++ and we aren't going to use LabVIEW. Perhaps we could calculate it using mathematica and export it to a file to read from there, but idk. I will try out the apache api.
You could always code a method to find the derivative of the type of function entered, then enter the value you're trying to calculate for into the derivative, and calculate the slope.
yeah, that's part of the process :\
Need some assistance doing so?
yeah. it is.
The parameter passed to file needs to be a String. See the JavaDocs: http://docs.oracle.com/javase/7/docs/api/java/io/File.html#File(java.lang.String)
 String variable = string.split(" ")[0] 
PM me and I'll see what we can do.
so File samMc = new File(String "SamMcGee.txt"); would be appropriate? is it literally just searching the local directory for a string that matches it? I assumed it was doing something smarter than that.
I would suggest you [read the tutorial](http://docs.oracle.com/javase/tutorial/essential/io/scanning.html) on the Scanner. 
I appreciate that. Unfortunately our prof has a weird way of teaching (AKA not teaching) the course where he doesn't really teach us about objects at all. Additionally, we've never used the BufferedReader class. Is there some other subreddit where student questions are treated with less scorn?
This is a single use case. Does this work for ANY variable type? (I'll omit Objeccts, at least out-of-the-box, as I assume I'd have to manually implement the methods, but for the primitives and their Autoboxed Object variants, does this work?)
the `String` is unneeded. Just use double quotes so it is seen as a string literal.
If you have a reference to an array at any time, you can index into it. Whether or not a function exists that converts some input into an array is a different question. More often than not, functions will return a Collection of some kind, rather than a raw array.
Pick what you like. I like dependency management of Eclipse a lot, but I like the way that I work in Intellij IDEA, so I use both back and forth. Pick a tool, make it work for you. That's the only way to do it, really. 
Hmm...this is an interesting note to take into consideration. Thanks for the heads-up about the Collections being returned instead of arrays.
I am pretty new to the ECS approach, and had a hard time choosing between artemis and ashley, but artemis seemed more featureful at the moment, and also actively worked on! I am really enjoying the ECS idea. It seems to let me share logic across projects a lot more easily, which is really nice since my interests skip around a lot. It also makes testing much more straightforward, as I can test systems independently, which is great! Projects like [artemis-odb-contrib](https://github.com/DaanVanYperen/artemis-odb-contrib) are pretty interesting to me as well, the idea that I don't have to recreate basic game mechanics each time I start a new project is extremely appealing. :)
You could try to implement this in java: http://www.codeproject.com/Articles/13731/Symbolic-Differentiation
Apache has some math libs, [~~Un~~common Math](http://commons.apache.org/proper/commons-math/), or something like that. I can look it up tomorrow.
What is the point of creating a non reusable string array which you only need one value from? If you just want an "a", you could do String s = "a";
Apache Commons Math might have what you're looking for. http://commons.apache.org/proper/commons-math/userguide/analysis.html
 Arrays.asList(object0, object1, object2).get(1) == object1; Edit: Arrays.asList(object0, object1, object2).toArrray() will give you an actual array of Objects. Either of these things are probably a bad idea to do repeatedly if you care about performance.
It's a curriculum vitae. It's used a lot in academia in much the same way that a resume is used in industry. CVs are generally going to include much more info (courses taken, courses taught, teaching experience, research experience, ect.) and be longer than your typical one page resume. They are rarely if ever used in industry. That being said, OP says the two terms are used interchangeably in his country so he basically means what Americans would call a resume if I'm not mistaken.
What do you mean by varying between x**2 and sinx? If there are a fixed few number of functions it's probably easiest to differentiate them by hand. In either case make an interface (eg Differentiable) that provides the ability to calculate slope at a certain value. This would also make it possible to use an algebraic expression for some of the functions (those that are easy to differentiate) and to use numerical methods for others. The interface makes it possible to make a class of each function and make each function responsible for its own differentiation. At the same time it's possible to make a general class that handles numerical or symbolical differentiation where appropriate. 
Since everyone has already posted all the solutions that I would have, let me pull the Jeff Goldblum jurassic park card...(assuming this is not just some private code...) I would take the side that if you're having a hard time trying to figure out how to condense the number of lines in your code, inevitably, you're going to confuse someone (and often yourself) down the line when trying to understand what your intention was. Give me maintainability over succinctness any day.
Just for another viewpoint... I almost exclusively see Lists being passed around (more common than even Collections)
You state it requires 'Universal Tween Engine' but the dependency is not declared in the pom.xml; push jar in maven central ASAP you have choose a final name for your project (imho 'alertify4j' is good enough).
Apart from symbolic differentiation, you could also get an approximate answer. Probably the easiest way to represent the functions would be beanshell or groovy (you can easily embed an interpreter in your program).
Was their meant to be a comment here? ;)
Why Swing and not JavaFX?
I'll look into that. Thank you.
I'll look into this. Thank you.
Not homework. I could do that. We recalculate the tangent line every 0.01 units (encoder values, meters, whichever we decide to use, it doesnt matter much in the end since it can be adjusted), so if we get that small enough it won't stutter and will be more accurate. Thank you.
This might actually do the trick. Thank you very much. I never thought about Taylor series.
Correct, there is little to no reason to prefer Swing over JavaFX for new projects.
Eclipse is popular, but you get what you pay for. Note that Eclipse is free.
&gt; but you get what you pay for I wouldn't exactly say so, since the Community Edition of IntelliJ IDEA is free, too :)
Another downside is that you need to configure a bunch of plugins for it to be useful. 
what don't you understand?
run this in terminal: /usr/libexec/java_home -V to set a different jvm, run: export JAVA_HOME=$(/usr/libexec/java_home -v 1.6) change 1.6 for what version you want. This will only last as long as you have that terminal window open. It does not apply to apps that use java.
use matlab lol
Check out the Java [tutorial] (http://docs.oracle.com/javase/tutorial/java/nutsandbolts/flow.html) on control flow statements, and specifically read the sections on for loops and while loops 
&gt;JCreator Oh wow, I used that when I took AP Comp Sci back in......wow, 2007. &gt;_&gt;;
I have to ask, are lambda expressions really that useful? What can I do with them now (in Java) that I couldn't have done before? Any good examples? I'm not being cynical or anything, I just don't get why they are so important.
Is this a TurtleGraphics project? I have seen several of these over they years. What are you expected to do? What are you stuck on? You should consult with your classmates. You might be surprised that they are willing to help. Why not ask the teacher? Doesn't he have an office hour before or after school?
This is what your professor is for. Tell him what you are not understanding.
You haven't given enough information to even ask a Java question. You should go to your TA's office hours, or at least e-mail them. As a former CompSci TA, I can tell you that they are going to be a lot more help than reddit for this specific assignment.
Well, OP has no professor, they have a high school teacher, which means limited time on the school campus, no real office hours, students spending the entire day in SOME class, etc. Plus, OP already said that the teacher has told the students that they're on their own, so there's probably already an implied discouragement to get the teacher's help. OP, if you can, try and talk to your teacher, but if your teacher is telling you that they're not making themselves available, then please, fix the link that you have in your post (it leads to a 404 error) and tell us, in greater detail, what you don't understand. It will help us help you. You may also have a better time at /r/javahelp. That subreddit is specifically geared toward what you need.
Interesting, never seen this one before. (Honestly, I thought you were taking the piss ;-).)
IF you need to change jersey version. It is very simple just change maven dependency version. 
main purpose of this article is to show how cuubez api visualizer working with jersey so no need to worry about jersey version.
If the teacher specifically told them he would *not* help and didn't give them the proper instruction, then he should be reported to the principal / department head. That's *clearly* his job.
That PolyTurtle Docx is behind a firewall ( you need to log in to access it). download it, upload it into Google doc, make it share-able to everyone and then share it, people here will be able to help you. 
- What is an 'anonymous array'...? - Your example 'single line' of code is two statements separated by a semicolon. Please don't do that, in Perl or Java or any other language. Please just write one statement per line. It is a lot easier to read. - Don't concern yourself with 'how much' you can do with a single line of code. The best code is simple code. KISS That said, as others have indicated, you can use indexing on any expression that would result in an array. The only language I know is where that is not possible is PHP.
TIL: There are waaaay more [TLDs](http://en.wikipedia.org/wiki/List_of_Internet_top-level_domains) than I thought today.
You can diff anything. It wouldn't be human readable. But you could.
Please keep this kind of post on /r/javahelp. This is not the place.
Thanks for the reply. &gt; filtering with java8 streams Funny thing that. Every time I've looked for lambda examples they seem to be something like filtering lists. 
I mean, you kinda can. just save it as a .csv and diff it with another.
Exactly. Also it wouldn't need that tween library because JavaFX already includes something very similar.
Honestly, I can say that I don't want any features of IDEs in a text processor. Word especially is already annoying enough with it's "smart" features. When writing normal, everyday correspondence, they may be useful (even though I still find them rather distracting) whereas when writing technical documentation, all "smart" and "Auto" features are just never-ending annoyances. In technical texts, one has to maintain a certain style, certain capitalization, and more, Word in particular constantly tries to change that style. So without major changes to the Auto-features (basically turning all of them off), it is pretty useless.
They have XML in them now. You can diff that.
&gt; I am specifically referring to the feature where when you type a quotation mark it automatically enters the last quotation mark. I *really* **really** hate that, and resent IDEs that have it by default — because it is often difficult to dig into the settings to turn it off. I love autocompletion of functions, but everything else, just let me type it out.
Now would be a good time. Its much easier to learn how to use an IDE while the assignments are still easy. If you grok the assignments without too much effort you'll have time to learn Eclipse. I've assisted and taught a few introductions to Java and most students switched to use Eclipse three weeks into the course. The auto-complete takes of a big cognitive load. The syntax check avoids the slow and tedious compile-fix-compile cycle. It makes your life easier. edit: As an alternative you may wanna look into Netbeans, but I think Eclipse looks better. Functionality wise they're comparable.
In a fully-fledged production environment maybe. But this isn't really applicable to the OP.
Eclipse has a lot of high profile contributors, including IBM. I'd hardly say it is a part of " you get what you pay for". It is a great ide that suffers a few shortcomings compared to others, but it nowhere near awful.
Why do you hate it?
I started programming in the late eighties, and have *always* typed stuff and predicted what needed to be typed in. When IDEs magically insert things, what does it changes the state of the editor from what I know is there — it slows me down. Sometimes editors will mitigate this by automatically overwriting the inserted closing character (a quote or a bracket). But overall it is still quite annoying.
I get the feeling you're talking about Word in this post
Well one thing I noticed is that showing a new window or popup in JavaFX causes the urgent window hint to be sent. This can be annoying for notifications because it will cause the task bar to flash (on Windows), full screen applications to be minimized, the main stage to be brought to the front, workspaces to be switched (Linux) and in general other unwanted behaviour when showing a notification.
I have tried it with JavaFX and plan on rewriting it some time later, unfortunately most people use Java 7 now, and Java 6 is still used by a few (I had a request to make it work on Java 7, then Java 6) The whole theme support could be redone to use JavaFX CSS and I would be so much happier, but support for old versions is required to allow some to use it.
That's because the tween engine was edited slightly in an attempt to make alerts not show up randomly on your right screen when fading in, it's far from perfect but it works okay. To declare it as a dependency I'd need to make it search a local repository or (like I was planning) my own repository containing certain edited lbiraries.
Easy. Convert one car into pure antimatter, then superimpose them on top of each other. After dissipating the extra energy, you'll have the diff of the cars. Note: I'm not liable for any planetary annihilation that may result from following the procedure.
This book completely changed the way I write code. 
Not at all, actually. There are substantial non-passive changes between the two. They implement two different versions of the JAX-RS specification.
If you're writing many technical documents, it's probably worth it to take a few days to learn LaTeX.
Poor you 
Oh, most definitely; I agree. 
There's a [tutorial] (http://docs.oracle.com/javase/tutorial/2d/) for 2D graphics.
So.... * What I meant by an 'anonymous array' is an array that is never explicitly declared (e.g. see my example). * Reddit's formatting system is something I'm *still* getting used to. I typed it with a CRLF after the first semicolon, but Reddit decided to ignore it because there was only *one* CRLF and not two. I figured it was a moot point as it was *solely an example to illustrate what I was asking about*. * I don't concern myself initially. However, I *THEN* attempt to compress the code base in order to keep files small. Especially at work (where I do *most* of my Perl coding), every byte is a precious commodity, and this should be the case everywhere, even at home and where you have terabytes of storage capacity. We've lost our care for storage space as capacities have exponentially grown over the years, and I'm sad to see that. Also, trying to do the same thing (or more) in as little code as possible is a very good code challenge as it challenges you to think of new (and more efficient) ways of doing the same thing. A programmer who always does something the same way will eventually stagnate in their skills and capacities. Our industry changes too rapidly. * Oh, and yeah, I know I can probably do this with anything that returns an array. The thing is with Java, that's hard to figure out, especially if it returns a "Collection" as I don't know if that's an "array" or not.
When I need a "vector" in Java, I generally resort to an ArrayList. I assume a List is analogous to a statically-sized array?
To an extent, yeah, helping my future self is a better idea. However, *sometimes* there's an easy way to more efficiently code the exact same block of code with exactly the same amount of readability with fewer characters of text. (This happens a lot in Perl due to where you can put if and for conditionals, for example.)
I have nipples, can you diff me?
Oooh! I hadn't seen this one... the license looks sane, and it says it builds to OpenCL. Does it bridge NVidia, AMD and Intel's implementations?
Can you upload the error again? Or paste the text? I can not open that picture.
i tested this sample with &lt;dependency&gt; &lt;groupId&gt;org.glassfish.jersey.containers&lt;/groupId&gt; &lt;artifactId&gt;jersey-container-servlet&lt;/artifactId&gt; &lt;version&gt;2.5.1&lt;/version&gt; &lt;/dependency&gt; it work fine for me. 
Try changing the if statement to this: if (sum &gt; 100) { System.out.println("Amount discounted:" + (sum * k)); System.out.println("Amount after discount:" + (sum - discount1)); } else { System.out.println("Amount discounted:" + (sum * j)); System.out.println("Amount after discount:" + (sum - discount2)); }
That's just the servlet adapter to run a Jersey 2.x application in a servlet container, though, isn't it? Does it include any of the working parts, such as the server components, the annotations, and other components?
Thanks alot!
6? People are still on 6?! You poor soul. :( And here I am migrating my company's flagship product to 8…
What editor are you using to view the map file? I ran the program and viewed it in np++ and it showed fine, however when I viewed it in the default notepad it showed the example output.
Yeah I may stick with what we are using in class until I'm comfortable enough to jump ship and find something that has what I'm looking for, which I'll be able to tell at that point. Thanks for the insight!!
How do you figure?
Oracle and AMD are working together to make GPGPU a Java 9 feature. It will use the Graal JIT compiler. EDIT: Adding the links for more information http://openjdk.java.net/projects/sumatra/ Search for GPU related talks on the links below, http://www.oracle.com/technetwork/java/javase/community/jvmls2013-2013900.html http://www.oracle.com/technetwork/java/javase/community/jlssessions-2255337.html 
&gt; Reddit's formatting system is something I'm still getting used to. In general, just indent your code by four spaces. Whenever I post code to Reddit I just use an external editor like Vim, type the code I want like normal, then indent the whole thing when I'm done and paste it in the Reddit text box. Text written after four spaces Comes out like this Similar to what you'd get out of a &lt;pre&gt;&lt;/pre&gt; tag in HTML. &gt; The thing is with Java, that's hard to figure out, especially if it returns a "Collection" as I don't know if that's an "array" or not. [Collection](http://docs.oracle.com/javase/7/docs/api/java/util/Collection.html) is an interface. A Collection instance will behave like any other interface or class instance; you can call methods on it. So if a method returns an array, you can do something like `myMethod()[1]`, whereas if it turns a Collection (say specifically a List) you can do `myMethod().get(1)`. It isn't an array. Java has a pretty tiny set of "primitive" types: * byte * short * int * long * float * double * boolean * char And then the only other "type-like" things that I can think of: * arrays * generic types * annotations * enums * I guess lambdas? As of the brand-new Java 8 *Everything* else is some variety of class or interface. As for what a given method returns, Java has that information baked into the code, unlike dynamic languages like Perl. Hopefully you're using a full-featured IDE like IntelliJ or Eclipse; these tools will just tell you the type of data returned by a method if you e.g. hover over the method name. If you're using a more bare editor like Emacs or Vim or Sublime, then you can try Javadocs or seeing if there's a good Java plugin. But I'd really recommend just using IntelliJ, it's beyond awesome. &gt; However, I THEN attempt to compress the code base in order to keep files small. Especially at work (where I do most of my Perl coding), every byte is a precious commodity, and this should be the case everywhere, even at home and where you have terabytes of storage capacity. I couldn't disagree more. I imagine you're a one-man coding machine so you're free to do whatever fits your preference and meets your needs, but in my experience on a big project or long-lived program, simplicity and readability will trump the number of bytes on a text file. It's hard for me to imagine a scenario where both you're *that* strapped for space that making your Perl script short is a matter of necessity, but yet you're not that strapped for CPU power where Perl is an acceptable language to use in the first place. Usually C++ or some other systems-level language is called for in these low-resource environments and then the code that you write goes through a compiler before it touches the target device. This is true of Java, too. The final JAR will be optimized by the compiler and it's doubtful a specific line arrangement will make any impact if the underlying program flow is identical. In this situation, the *only* place you'd be saving space would be on your personal/development computer, and even then it'd be an extremely trivial amount of space. Even if your computer only has a 40GB hard drive which is tiny by today's standards, you're never going to hit that limit because of the size of your source code files. Something else will eat that space way before your code does. And when that happens... just buy a 160GB drive for $25. &gt; Also, trying to do the same thing (or more) in as little code as possible is a very good code challenge as it challenges you to think of new (and more efficient) ways of doing the same thing. A programmer who always does something the same way will eventually stagnate in their skills and capacities. Our industry changes too rapidly. Lines of code will not impact the performance of a program. By far, the biggest optimizations will come from choosing the correct algorithms and data structures. That said, I won't pretend like doing code golf isn't fun or rewarding in its own way, but any time I've come up with a clever trick in production code I've either regretted it when I found a bug in it 12 months later or regretted it when my coworkers ask me why the heck I wrote my code in such a roundabout way when the underlying task is so simple. It's my overwhelming experience that clever syntax tricks really are a net negative in the long run. (Except for cases like e.g. Mockito where the clever tricks are necessary to create a very straightforward toolkit. And in this case the complexity is buried in a well-commented 3rd-party lib.)
Just for fun, try replacing: FileWriter fw = new FileWriter("output.txt"); PrintWriter outFile = new PrintWriter(fw); with: FileOutputStream fs = new FileOutputStream("output.txt"); Writer fw = new OutputStreamWriter(fs, "UTF-8"); PrintWriter outFile = new PrintWriter(fw); This makes it painfully explicit to Java exactly how you want the text to be represented in the output file.
Or, you know: new Object[]{object0, object1, object2}
http://i.imgur.com/8Cy6O1J.gif
No, I apparently misread the title. :P
A list is just an abstract form of a list. An ArrayList is a concrete form of that list type. ArrayLists are definitely not statically sized, not many Java collections are. ArrayList is widely used as the default list implementation, due to its fast insert, remove and get. ArrayLists are backed by an array wich gets resized when the backing array is too small. 
Next time, please post requests like this to /r/javahelp.
Seems sweet.
Please avoid posting screenshots. In particular, don't post screenshots of code. It makes it extremely difficult to help. Better use pastebin.com or gist.github.com Also, please post questions like this one to /r/Javahelp
Same here but Microsoft never improves Word (just look at their spell and grammar checkers). They only change file formats every few years to break things.
TheChernoProject is one of many youtube channels covering various Java programming techniques. This one covers games from scratch including using the core Graphics api. https://www.youtube.com/watch?v=GFYT7Lqt1h8&amp;list=PLlrATfBNZ98eOOCk2fOFg7Qg5yoQfFAdf
The page looks empty, even when I use a Webproxy. (I'm behind company proxy, so your mileage may vary.) EDIT: There's a lot of source, so something is loaded. But Firefox and Chrome show a white page here.
Why?
Wrong: Currently ~13 members online (at time of this writing), of which a arguably greater percentage is willing to help. I recently held a call for comments on the topic of help posts and both /r/java and /r/javahelp folks want them on the latter (though there are some dissenting opinions).
It's not a language particularly designed to manipulate mathematical functions in a way that's conducive to calculus. It's a fine language, that's just not what it's particularly good for. 
sorry, he uploaded the assignment through a school site called blackboard so I guess that's why it's not coming up. What we need to do is use loops and turtles to draw a polygon, then draw another with 1 more side
I wish but since this is work I SHOULD know he isn't wanting to help
I'm in high school... no office hours and he doesn't want to help...
We are supposed to draw shapes starting with a triangle using a turtle, and then add one more side each time untill the shape exceeds the window.
Thank you very much !
Yes I think so. We have to use a loop to draw a polygon, increase the side number by one, then draw another, rinse and repeat until it exceeds the window.
Okay will do
sorry I'm new to this
i see the conversation has gotten bigger than you and me. have you gotten an answer to your question? if not, the let me know the specific problem you're having and i can try to help.
I don't know how to use loops. Period. I can make a turtle. I can make it paint things, and set integers to letters like side length and angle though.
This is absolutely a question for your teacher. "Loops" is a fairly basic (in the grand scheme of Java and programming) concept that he *absolutely* should have covered before giving you an assignment that required them.
a loop executes the same code a certain number of times (see for loop) or until a certain condition is met (see while and do while) in a for loop the check to see if you have run enough times is done at the beginning. same with the while loop it is possible for a for loop and while loop to not execute at all if the conditions are screwed up. in a do while loop, the body of the loop is executed first and the check is done AFTER the body of the loop is executed. does that help at all?
Ok, long story short, loops are used to repeat same job over and over again several times, with different parameters. If you need to write code to draw a polygon, imagine how you would draw a polygon. You would draw side 1, then side 2, then side 3, rinse and repeat until the last side, side N. So drawing one side of polygon, let's call it side number i, is the piece of work that is repeated. Then your code will look like: // let N be the number of sides // we use "for" loop. First part, "int i = 0" // gets executed at the start // second part, "i &lt; N" is checked to determine if // loop should repeat or stop repeating before each iteration // third part, "i++" gets executed after each iteration // to change the value of variable i for (int i = 0; i &lt; N; i++) { // this block of code gets repeated N times, // each time value of i is a different number, // starting from 0 and ending at N-1 // so here you write your code to draw polygon side number i drawPolygonSide(i); } I hope this clears things up a bit. Other than that, you should read some tutorial or go through your textbook- this is really basic stuff. Keep at it. Programming can be fun and very rewarding when you know it better, and the things you can achieve with programming are only limited by your time and skill and creativity and desire to learn. Good luck!
Does the side length change? How is it going by the way? Any progress?
That's literally the exact opposite of a teachers job. Ask him for help with what you don't understand. Come to him with what you are thinking he wants you to do and get a better explanation.
You could use Apache [commons-lang](http://commons.apache.org/proper/commons-lang/) (which has an impressive collection of handy [string utilities](https://commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/apache/commons/lang/StringUtils.html)): StringUtils.repeat(3, "abc") If you're using Java 8: Collections.nCopies(3, "abc").collect(Collectors.joining(""));
ya it has all other dependencies 
Good examples (except one) how not to repeat strings :)
Thank you!
Bwahahaha: flamefest: By using spring?
 repeated = new String(new char[n]).replace("\0", s); I just threw up in my mouth a little.
List *isa* Collection.
I think not seeking out "how can I apply this pattern" is how it best sunk for me. I was just writing code and quickly noticed ways I was violating (or had violated) some good ideas from the book. Over time, you start to recognize when things are appropriate and when they aren't without seeking it out. Another nice thing is finding the "good libs" people use frequently and reading the code to see how things actually work in production. Just my uneducated .02
Fair enough, but Thing o = someFunctionThatReturnsASet(input).toArray()[0]; is not a pattern I really wanted to encourage.
If you keep it in version control like SVN, [tortoise can](http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-dug-diff.html) I don't know what it does for excel, but with word it enables change tracking then plumbs in the differences as changes. So... it's actually better to use SVN than it is to use sharepoint.
Only to Java? What about the numerous other popular languages?
Exactly. Read each issue, let it sink in. You'll find places where it applies soon enough.
agreed :)
ib4libgdx: Java2D is hardware accelerated and perfectly fine for 2D games. It is strictly an abstraction layer, if you need to tailor a custom pipeline that is totally do-able. There is no need to throw Java2D out of the equation.
&gt; print an error message (in the DOS window) MFW
Thank you this is helpful.
This is very helpful. I just found the textbook on the teacher's website and it seems like we aren't even following what it says. What you explained is probably the most ELI5 answer I could need. Thank you again.
I think the side length stays the same, the only reason you can see all the shapes is because they are almost on top of each other. I have had some progress thanks to /u/coder111
error message? EDIT: re-read the .docx, this is only for 0, 1, and 2 sides.
my pleasure. PM me any questions you want.
Use IntelliJ or Netbeans, they're much better IDEs IMHO anyway.
I find leaving the book in my laundry basket and every day I do laundry, I sit back and read up on a few issues at random. A year or two of doing this and I've started to see more areas of my code that can benefit from the patterns introduced. 
There are three basic concepts that fuel most concepts and provides the strong basis for them. 1) Minimize scope and really encapsulate. Everything that can be private should be, in fact, the majority of fields you create anywhere should be private. And I don't mean leak them out through getters and setters, keep them truly private. Then provide functions that do what you want with the data, as opposed to having other objects grab the data and do something with it. 2) Strive for immutability. Variables ideally shouldn't change. Everything that can be marked final, should be. Set your data in the constructor than do not change it. Immutability solves a lot of challenges and potential problems, as well as making the logic far more clearer. 3) Favor composition over inheritance. Don't just make subclasses willy-nilly. It's very easy to abuse inheritance, but you should only use it when necessary. Composition is almost always the better choice. If you don't have an abstract method or your subclass doesn't override a method, there is probably no reason for it to be a subclass of the parent. ... If you simply follow these three concepts a lot of the rest will simply fall in line. The problem often with a lot of patterns in the book is that it doesn't go over when to NOT use them. I'll give an example, the builder pattern (which you use when you have too many parameters for your constructor). The problem with the builder pattern often is that it skips the real problem, which is that the object is likely trying to store or do too much. The big constructor is just the symptom, solving that just hides the problem. If you've fully encapsulated everything (all those parameters aren't being written to public fields) then you'll likely be able to notice a pattern in how the fields are used. Thus, you can create different objects containing each set of data that is relevant to each other and pass those, thus reducing the number of parameters naturally. And that's why I state these three basic concepts are the ones you want to stick to. Not only are they things you can apply to all the code you write and are easy to remember, but they resolve a lot of issues that patterns attempt to solve naturally with better design.
I think the real purpose of the builder pattern is not to replace a complex constructor but to allow gradual construction of an immutable object (like StringBuilder does).
&gt; Consider a builder when faced with many constructor parameters From the man himself. You're not saying anything different, you're using gradual construction because the object has a lot to construct. But if you break up that object in logical ways, it often will not have a lot to construct anymore.
I wouldn't take all the items in there as necessarily being good ideas anymore. In example, item 38 suggests using single value enumerations to provide instance control (create singletons), but what he shows there is untestable, and has cost me many hours of refactoring to get rid of. A more effective approach would be to use dependency injection with scopes. Also many of the solutions in there would be better solved with Java 8 features that didn't exist when that book was last revised. 
Try without your Adblock/NoScript addons. This is one of these annoying sites made entirely in JavaScript. This is only a request to fill in their little survey anyway, nothing interesting to see.
Why did you truncate the title ? This is actually a request to fill a survey.
I may be using gradual construction because I don't have all the information at once (e.g. I have to read characters from an input stream). I could of course use a mutable collection to collect the characters and then construct a String from that, but it would be essentially the same as using a StringBuilder, just terribly inefficient.
The sort comparison is not really fair though, is it? They are comparing a comparison based search algorithm on the CPU with a linear one. Of course a parallel algorithm will look different, but they should at least compare equal algorithm *types*.
We're not talking about using a StringBuilder. Or even using a builder. Which, by the way, there are stream readers that will provide reading multiple characters into strings... We're talking about designing a builder for an object. Why would you make a builder, not why would you use one already made. And not having information at once is not a valid argument for one, because you can create intermediate variables before you pass those variables to the constructor. That's outside of the scope of the object itself.
I agree with you. I got my first job interview after getting my SCJP back in 2004. Then I switched couple of times but never got asked about my certs. Only real life experience took me further.
The most straightforward way I know how to solve problems like this is interfaces and mocks. Basically, you're trying to cross a service boundary. Using an interface makes that service boundary concrete. You might already have interfaces (if the service is provided through an EJB). Otherwise, you would have to draw a line in the sand between what is yours and what is theirs and define that line in the sand in the interface, preferably defining the interface based on how you use the service rather than how the service is provided (see [Anticorruption Layer](http://programmers.stackexchange.com/questions/184464/what-is-an-anti-corruption-layer-and-how-is-it-used)). There are also tools like [Arquillian](http://arquillian.org/) that do real container testing rather than mocks, which is something else to consider.
I find it works very well when arguing with other programmers on good practice. Having such a great reference for Java helps far more than "just trust me on this"
What edition has this as item 38? * Edition 1: Adhere to generally accepted naming conventions * Edition 2: Check parameters for validity 
If you mean specifically using a builder to collect arguments of a non-vararg constructor, then I agree. Another valid use of the builder pattern is to disambiguate between same-type constructor arguments: Point p = new Point(x, y); // or is it Point(y, x)? Point p = new PointBuilder().setX(x).setY(y).toPoint(); Keyword arguments would be much better but Java doesn't have them.
&gt; using single value enumerations to provide instance control (create singletons) A good rule of thumb is that any elaborate rule of this type is probably a terrible idea. The same goes for Hungarian notation. Or the "never return null, instead always create a special null object instance with special implementations of all methods that make sense in the null case (for every class)". And so on.
No worries on the homework thing, it just sounds like a homework problem. :) To clarify what I was talking about earlier, you should use some sensible limits to narrow down the delta that you're using in a procedural matter, not just pick a "small enough" value. For example, if plotting from 0 to 10 on the x axis and trying to find the slope at x=5, I might do something like this: epsilon = 0.0010 lastSlope = 9999999 for (delta = 1; delta &gt; 0; delta = delta * 0.5) { left = x - delta right = x + delta slope = abs(f(left) - f(right)) if (abs(lastSlope - slope) &lt; epsilon) break lastSlope = slope } This will allow you to get the slope down to 10-thousandths with a few loop iterations narrowing your window at each loop iteration. For relatively high values of slope, this will converge *very* quickly. For lower slopes, this will get a more accurate result. I use this technique in a few different ways when measuring rate of change for altitude and cabin pressure indicators. It gives accurate results at time of measurement without going crazy trying to get several decimal precision when you only need a simple number. 
Except the community version has no appServer/container ability.
Im no expert, but intuitively I feel that writing a great API should earn you something when others use it (it being exactly what you created) for their own success. However, don't expect your accomplishment to last forever. Others will emulate and make improvements on it, such as Android has. That is how technology evolves. The wheel can't be patented, nor should an excellent API structure. 
I totally disagree. The API is as they describe, a foundation, a building block for others. I am not trying to say that there is no thought, or effort in developing a good API, but I don't think you should be able to protect it. If I implement my own "List", or even my own implementation of an "ArrayList". I should not be violating a copyright just because I have the same public signature as another implementation. Nothing was stolen from that original implementation. The only thing that was done is I made an implementation to match a publically known interface.
Interesting approach. Sounds similar to the way a Ant-Virus real-time protection works. I would be interested in knowing which JVM's it is compatible in and how effective it is. Since itself is running in the VM is it vulnerable or introduce vulnerabilities?
You could argue the *design* of the API is stolen. An elegant API does take effort and expertise. Should you have a financial obligation to the designer? I don't think so, but I disagree with a lot of the copyright laws in the United States.
I have thoughts. I constantly see opportunities to apply the principles from *Effective Java* in my weekly programming. What's interesting to me, though, is that the stuff in there doesn't really help you get anything done. If you are setting out to build a new SaaS website you don't **start** with *Effective Java* but you can certainly use the principles to make your code better. A lot of times I hear people debating the right way to implement something and I like to ask them WWJBD? What would Josh Bloch do? Some recent examples that I remember: * Sped up a reflective un-marshalling program by adding checks that prevented exceptions instead of catching the exception. Item 57 * I use items 8-10 constantly. Today I created 5 data classes and implemented equals, hashCode, * Item 15 seems almost too common sense to repeat these days as everyone is trying to be immutable. * Fixed a bug last week due to a confusing overridden method. Item 41 
I must confess that discovered just today about IntelliJ and was wondering how it is for a person who learned develop Java on Netbeans. What is the main difference?
I believe /u/Digitalneo was saying that the designer of the API should be able to protect their implementation of the API (copyright laws already protect this) but not the API design itself.
Ah, if so I misunderstood. I thought he was saying it should be protected, but for a limited time.
I've actually (sort of) figured out the problem, it can be located on [github here.](https://github.com/jtervay97/Auton-Improved-v1) I used BigDecimal for better precision since the robot will only be moving a max of 15 feet in the x direction and probably a max of 10 feet in the y direction. currently the code only goes from x=[0,1] but i will be changing it. any angle prints you see are simulated results from a gyroscope that is used on the bot to measure turns. I will try to incorporate your method into the code and see how it compares to my results. BigDecimal may be big and clunky but it seems to work great so far.
Absolutely not. An API is an interface, a purely utilitarian thing, but the key bit here is that it is part of the design that delimits the edge of a body of work. So, for example, there is a well-designed interface I. The original implementation, A, has some problems, so people work to create implementation B. Implementation B works pretty well, but someone has a different vision of how to do it and comes out with implementation C. All conform to interface I, which is what is needed for interaction. This is pretty much what happened with Unix, for example. Original AT&amp;T Unix had an interface and an implementation. BSD made their own reimplementation. Linus made his own, that is now Linux. There have been many others as well. They all conform to the same interfaces. The interface is needed for compatibility and should not be protected by copyright. Yes, a specific EXPRESSION of the interface should be protected by copyright, but that is not what is being discussed in this case.
Your question doesn't make a lot of sense. You could extend LinkedList or you could import it. The IDE you use doesn't affect the features of the Java language. Copy and paste your friends code.
You have some weirdness for sure. You have a substring which is always taking two characters, but yet you have cases for single character strings (ie "1" "2", etc). Will it have a perpending zero, or not? If you need to handle both inputs, your not doing it correctly, I would do a "startsWith" check to see how many characters you need to get in your substring call.
Wow, you ain't kidding... I found this gem of a TLD: &gt; Name: .blue &gt; Entity: Those who like blue.
My point was that the set of functions which return Lists is a subset of those that return Collections. Since List is a Collection it's not possible to be more commonly seen than a Collection.
What the hell is Oracle doing.... This has to be the dumbest idea a tech company has ever had. &gt;Specifically, Oracle says Google copied the structure and organization of the Java APIs (application programming interfaces), in part so that developers already familiar with Java would find it easier to write programs for Android. Yes! That's the point and it's good for Java that other companies invest in building on the capabilities of The Java programming language. I don't see a difference between Android and Spring. Both are built with Java to offer a platform for building specific applications (mobile or enterprise/web). Oracle is effectively alienating the biggest tech company from ever helping grow the Java language. Google has helped produce countless technologies like AngularJs, Google Guava, Android, Google App Engine, Dart, Go, GWT and countless public APIs. Why would you discourage a company like Google from helping your platform for free!? Now Google will second guess what programming language they use for their next "Big Project", which could've been Java and benefited Oracle(and Java Devs) significantly. 
You can create an interface, which any good IDE will then import every method from (you need to override/use every method in an interface). For linkedlists, you only need two classes: LinkedList.java and Node.java. They aren't ridiculously hard to create, and you shouldn't need an interface. Theoretically. 
&gt; Now Google will second guess what programming language they use for their next "Big Project", which could've been Java and benefited Oracle(and Java Devs) significantly. Android's use of java is basically the only reason I consider putting effort in learning java.
Copy+paste of code is such a bad idea for so many reasons. - a) One person's implementation is not the same as another's. - b) By copying and pasting an entire codeset, OP probably won't understand anything he just pasted into his IDE. Also, judging by the post, OP is creating a LinkedList implementation, not extending Java's inbuilt one, a common assignment in CompSci classes. 
Next .. Oracle sues Microsoft for copying API into .Net
James Gosling said that the only reason Sun has put a pretty face was because their were out of money and thus forced to make juice with lemons. Oracle on the other hand has money. Google was the one trying to dodge the license agreement everyone else pays for.
I'm not sure of what you're asking, but your question reminds me of two things. 1) Static imports. You can import all static methods of a concrete class into another, unrelated class. This idiom is commonly used in JUnit 4 test cases: // imports all static methods for unqualified use in this class import static org.junit.Assert.*; 2) Auto-generation of method stubs. This is used when implementing an interface or extending an abstract class. In Eclipse (while in the concrete class) you can select **Source &gt; Override/Implement Methods**. I don't know, but I suspect IntelliJ and NetBeans have similar functionality.
What I would do is to call `String.indexOf('/')` to find where the first instance of / is and then get a substring up to (but not including) the /. I would then parse that substring into an integer `Integer.parse()` and run a switch-case on that. Example: String date = "10/09/2014"; int idx = date.indexOf('/'); // idx = 2 String monthStr = date.substring(0, idx); // monthStr ="10" int monthInt = Integer.parseInt(monthStr); // monthInt = 10 switch (monthInt) { . . . }
No, Java‘s switch-case is fall-through, so OP's case statements will catch "01," "3," "07," &amp;c. And, yeah, a default case is always a good idea.
Isn't the JDK covered by GPLv2? IANAL, but I'd assume that Google providing Android sources would make it compliant. Also they are not using the TCK (which would imply its own licensing). So what exactly are they trying to dodge?
&gt; Isn't the JDK covered by GPLv2? Just for desktop and server development. Deployment to embedded devices, like mobiles, requires licensing.
Microsoft pays licensing fees for it. It's been speculated that it was one of the reasons why Oracle bought Sun. They saw the money Microsoft was paying Sun for C#/.Net, and then looked at Google and Android and thought "KA-CHING!"
They guess different encoding for the file. In order to display text, the program needs to know what encoding is used. If you don't explicitly tell the application the encoding, it will guess. Here notepad guesses wrong and np++ right.
&gt; Just for desktop and server development. What restriction are you referring to? I find no mention of this on either the OpenJDK site or the copyright notice supplied with OpenJDK itself. The OpenJDK license lists the CLASSPATH and ASSEMBLY exceptions, where both apply to *linking* third party code against the given libraries and allow anyone to do so without GPLing their code. Notably, those exceptions do *not* apply to distribution or modification of the work, so I'd argue that those are licensed, provided the other provisions of the GPLv2 are followed.
For Google to comply with the license Dalvik had to be fully OpenJDK compatible, otherwise the license does not apply.
Did you try to print your extracted **monthRate** variable? The way you extract is is not safe. You should use the way that /u/Cyndaquazy suggested (finding "/" and taking all before that). Also, I'd convert the string to an int and switch with the int rather than the string as it avoids having to check for "08", "8" and so on. 
To ensure the "best practices" sink in, I usually begin with following the tutorials provided *by the framework's authors*. That way, you learn the Right Way™ — they way the developers intended it to be used. You mentioned Spring. You can find a step-by-step tutorial for it here: http://docs.spring.io/docs/Spring-MVC-step-by-step/
Yes, I agree and have spent quite some time with the Spring tutorial :) There seem to be quite a few areas of overlapping functionality where I have the problem of too many nice tutorials. Is Spring safely assumed to be the Right Way for small java MVC? Or at least an acceptable one? 
Another restriction that is neither part of the GPLv2 nor of the supplied license text. Where do you have it from? Certainly they could not get a TCK license, but the fact remains that they didn't need one to create Dalvik.
If that precedent stands, then abandoning Java will not save you.
http://www.oracle.com/us/corporate/pricing/price-lists/java-embedded-price-list-1977272.pdf
We are so very screwed. SCOTUS will not hear this case, so if that's the only thing limiting Oracle's ability (and apparent desire) to destroy the entire software industry, then we are fucking screwed.
* That still does not apply to OpenJDK. It only applies to binaries for Java ME and SE supplied through Oracle. Google ships its own VM, that option isn't even in the list. * Even if that price list somehow applied, it does not remove the GPL license supplied with [Edit: not the GPL, but OpenJDK]. Just because someone asks for money to access a software does not in any way reduce the license that comes with it.
Spring is an acceptable way but not the easiest. It requires a lot of setup and there is a steep learning curve. A simple JSF project requires very little configuration. There are additional frameworks built on top of Spring to try and make it easier to work with if you want to go that way.
Do you see any Java SE **Embedded** listed here? http://openjdk.java.net/legal/ I will finish with what Java's creator says about the whole subject. http://nighthacks.com/roller/jag/entry/my_attitude_on_oracle_v &gt; Just because Sun didn't have patent suits in our genetic code doesn't mean we didn't feel wronged. While I have differences with Oracle, in this case they are in the right. Google totally slimed Sun. We were all really disturbed, even Jonathan: he just decided to put on a happy face and tried to turn lemons into lemonade, which annoyed a lot of folks at Sun. 
I disagree with Mr. Gosling on that one, as do both the District and Appellate Court. The patent parts of the suit were summarily dropped. Oracle's patents apparently have either no bearing on that case or no leg to stand on. Just because they feel wronged doesn't make it illegal. &gt; Do you see any Java SE Embedded listed here? No. And it does not make a difference, as long as the APIs in question are the same. Note that while Google apparently copied a few implementation details verbatim, those acts of copying were deemed insubstantial and have long since been eliminated from the source tree. What's left are the APIs – which are AFAIK exactly the same that the OpenJDK project supplies under GPLv2. If you disagree please show me the API that differs between SE and SE embedded where Android uses the latter.
Spring is pretty much required if you want to run JSF in a servlet container (Tomcat). If you use an application server there's no need for Spring, just use CDI.
Thanks! I'm not tied to eclipse, I've used netbeans in the past so no issue there. I will give it a shot, much appreciated.
Yeah, I have been finding Spring pretty complex and seemingly overkill for this. I looked at a couple of the Spring manager addons and quickly became even more lost. Thanks for the insight regarding jsf.
IMNSHO this is all Silicon Valley lawsuit bullshit. Oracle wants a share of what Google's got. Failing that, Oracle wants to be paid. 
Youre right, i must be high: it was 77 in edition 2. Sorry.
ninja and play are fairly strait forward.
Well, what components in a framework are you looking for? A simple router to map controllers? ORM? You can always use individual components from a framework or a component developed specifically for that task.
If you like Eclipse better it is fine. It is more popular than Netbeans. It is worth installing NetBeans just for the tutorials. Towards the bottom of the link below is a web frameworks section. They have a quick JSF and Spring tutorial as well. https://netbeans.org/kb/trails/java-ee.html 
Spring does have a steep learning curve and takes alot of time to setup and get working. Once it's up and running, it's got quite a bit in the way of nice features and tons of add-ons that play nicely together. 
I've also also found the [Play! Framework](https://www.playframework.com/) pretty easy to use. It's my go-to java web app framework. You'll need to learn a little scala for it, but you can get by without not knowing a lot of it. I'd say a down side is that it's a pretty "fast moving" framework; by the time you finish your project, they may already be on a new version, and it may be a pain to upgrade the whole thing... I've also heard good things about [Dropwizard](http://dropwizard.io/index.html), but haven't had a chance to play around with it yet. 
Even if that is the case, interoperability presents a reasonable grounds for fair use. Otherwise the company that copyrights a often-used API would get a much bigger market monopoly than the founding fathers would have allowed. As a creative work, an API is but a (hopefully fairly repetitive) list of names. Surely if I made a list of baby names, most of which were identical, and you made an unlicensed copy, I'd be laughed out of any US court when suing you for violating my copyright. That the names have specific reasons to be what they are is irrelevant as far as copyrightable expression goes.
Android supports Java 7, and if Oracle hadn't sued, Google might have been working on Java 8 support for the upcoming Android L. Dalvik is indeed a crappy VM though.
Spring MVC, and download the free reference manual.
Haha I've never read anything about the the founding fathers' views on monopolies before, so I'll let that be. I understand the negatives associated with any ruling in favor of Oracle, but there's also a flip side. Imagine a big company cloning an open-source project (copying the API for a new implementation) and then selling their clone regardless of the project's license. As a developer, I know how difficult it is to create and evolve APIs over time, and something like this would seem like theft to me. An API is more than a list of names, too. There's some interesting stuff by David Parnas where he describes everything we call "code" as "documentation" instead. Java is documentation for the computer (and is copyrightable), so why shouldn't the method headers and documentation in comments be treated the same way. If you independently recreate the entire Java library having never seen the original, feel free to use it, that's how reverse engineering laws work. But if you're explicitly copying every detail of someone else's interface (and profiting from it), I think you owe them appropriate royalties. [Here](http://caselaw.findlaw.com/us-7th-circuit/1233610.html)'s a recent case on an analogous issue, if you want a more nuanced expression of my opinion.
If you're not afraid to write some Javascript, the thin server approach might suit you. Dropwizard is an example of such a framework; you can create some JSON web services which will be consumed on the client's side by AngularJS, jQuery or your own custom JS code. This provides a nice separation of front-end and back-end (people who saw javascript wrapped in jsp scriptlets will know what kind of hell I'm talking about), at a cost of more development to be done.
Can you use WebSockets for this? Chat server is the example I see people using all the time when they demo the technology. https://blogs.oracle.com/arungupta/entry/chat_sever_using_websocket_totd
I built one based on this tutorial: [Multi-threaded Client/Server Applications](http://www.ase.md/~aursu/ClientServerThreads.html)
Ahhh..then using WebSocket would be sort of cheating for you. You can use the same concept as the example though where when a client connects you record a reference to their socket so when someone sends a message you can iterate through the list and send the same message to all connected clients.
Oracle have never done anything to convince me they're anything but a cancer. I suppose, when you;re big enough to do everything in-house, it's in your favour to shit all over the very concept of interoperability.
As I have suggested elsewhere, please read [The Public Domain](http://thepublicdomain.org) by James Boyle. He cites Jefferson (as well as others) and has a very well-rounded argument in favor of a more nuanced view on copyright than "copying is theft". &gt; having never seen the original […] that's how reverse engineering laws work No. Reverse engineering explicitly assumes having access to the original. And the decision to let fair use cover concerns of interoperability has been made fairly recently [Edit: Well, compared to the introduction of copyright in the US], in reaction to some excesses where copyright was illicitly used to stifle competition. &gt; But if you're explicitly copying every detail of someone else's interface (and profiting from it), I think you owe them appropriate royalties. Not necessarily. This is a matter for the courts to decide. Unfortunately this is an area where there has been a lot of bad case law, so the result is somewhat unpredictable. Google argues that there is already a lot of Java code by third parties (the ecosystem built around Java positively dwarfs the standard library) which requires the standard library APIs be implemented. So to lawfully compete with Oracle on implementing a VM and not being burdened by having to recreate replacements for all the work third parties have done, it must recreate the APIs. Had the courts outlawed this, it would be Oracle, not Google who'd get a free ride - namely on the work of those third parties (myself included) that makes up the java ecosystem. This is why the fair use doctrine was extended to cover interoperability. Otherwise network effects would distort the market even more than they already do.
That looks great, thanks!
Cool, this is good thinking. Cheers man.
I think you may have had the wrong abstraction to replace null. The functional programming guys are known for producing terse code, and they owe it the use of such abstractions. You can certainly still capture the exception using the non-null style by returning i.e. an algebraic "Try" type that is either Success(content) or Failure(exception). The UI not responding properly to the error-type seems more like a bit of a logic/requirements problem to me.
Keep in mind this won't usually work because everyone is behind a NAT and they would need to have the port forwarded so they could be contacted from the outside (over the internet). In a local network works. 
If you'd like an example of a chat server using sockets, I have one running, [here](http://drewmcarthur.ddns.net/chat.html). All of the code is on Github, [here](https://github.com/DrewMcArthur/node-express-server). I'm using node, express and socket.io, so I don't know how relevant this is to your example using java, but you're welcome to check out the code. 
I'm not sure I understand.
Cheers friend, will look that up. Probably way beyond me though! Just trying to do something interesting with Java IO, Networking and Threads.
Oracle bought Java because Google has money and Oracle saw an opportunity to try to get some of it. Sun had no problem with what Google had done. Google did not use any Sun code but used Apache Harmony code not written by Sun.
i believe this is Ellison's personal pissing contest with Page/Brin and that it has managed to make it to the Supreme Court is ridiculous. 
With modern Spring boot, Spring is very easy to setup.
Spring MVC through Spring Boot. 
Two of the common networking communication styles are peer-to-peer and client-server. In peer-to-peer the clients talk directly to each other. In client-server (which is what you have) the clients ONLY talk directly to the server. The server needs to act as a router of messages. Usually when the client makes a connection to the server the first message it sends is a "Hey I'm GrayDonkey" type message. The server will have a centralized map of names-&gt;sockets. Now a client can send a chat message to the server and the server will parse the message enough to figure out who it is meant for. Once the server knows the client name then it looks through its map of names-&gt;sockets, finds the socket used by the client the message is meant for and then writes the message out to that client. The other option which isn't secure and doesn't scale is just to have the server maintain a list of all socket connections and any incoming message would get copied and written out to all established sockets.
&gt; If I implement my own "List", or even my own implementation of an "ArrayList". I should not be violating a copyright just because I have the same public signature as another implementation. You wouldn't be, and the appeal court ruling doesn't even come close to saying something like this is copyright infringement. The appellate court ruled that a group of declarations (an api) can be copyrighted as a whole. Fair-use still protects interoperability, which in your case is why you're implementing the list. The reason the appellate decision screws google is because android barely pretends to be interoperable with java.
Yea, I see your point...but I still don't like the concept. It just forces java to be bound to oracle, it makes it impossible for other JVM's to exist.
Not really, there are plenty of other JVMs like IBM's J9, Oracle's JRockit (competed with sun's JVM, now they're merging into openjdk). There are opensource alternative vms too like avian. None of these are in danger because while they implement the APIs, they either stick to the open source terms, or license from oracle. Google wanted java on their platform, they just didn't want to let software coded for their platform to be used on other java platforms and they didn't want to pay oracle for a liscence that would allow them to do just that.
&gt; Google providing Android sources would make it compliant No. The GPL requires release under the GPL and not another license.
&gt; I don't see a difference between Android and Spring. One is fully compatible with Java. The other is an incompatible fork. &gt; Oracle is effectively alienating the biggest tech company from ever helping grow the Java language. Java is already the most popular programming language in the world, and by a pretty big margin (other than C, maybe, but C isn't really competing with Java) &gt; Why would you discourage a company like Google from helping your platform for free!? Because Google doesn't help the Java platform, but their own, non-compliant fork. The negotiations between Google and Sun to license Java for Android fell through (I have no idea who's to blame, but probably both sides), so Google decided to fork. &gt; Now Google will second guess what programming language they use for their next "Big Project" First of all, Google already uses Java a lot, and that's probably not going to change any time soon. Second, you're overestimating Google's importance to the industry: it has a huge consumer presence, but little influence over the software industry at large (the number of developers using Oracle technologies as core components of their software dwarfs the number of those using Google technologies by orders of magnitude). Oracle has a much stronger presence and influence than Google in the industry.
No problem. You were correct, just had wrong item. Bloch says the same in this article. It's even in **bold**. &gt;Making a class a singleton can make it difficult to test its clients http://www.informit.com/articles/article.aspx?p=1216151&amp;seqNum=3 
Apache. I think I read somewhere Google thought phone manufacturers wouldn't adopt Android if it were under the GPL, so they tried licensing from Sun, but negotiations failed, so they forked.
Better have the clients always talking to the server. Then have the server pass the message around to the proper client. 
Because it does nothing good to Oracle in return, and unfortunately Android is far bigger user of Java than anything Oracle or official Java has in the past 20 years. Sun's and now Oracle's Java is an utter failure to themselves. They invested countless resource into the platform, only for it to benefit 3rd-party companies such as IBM and Google. Even before Android, Sun already lost control and markets on development tools and all server-side stacks, where the biggest money come from. With Google's huge contribution into Android and its market success, it effectively killed Oracle's chance on influencing the future of mobile devices. Sun/Oracle's Java was, and still is, ready for mobile - it has much faster VM, low-latency GC, and the new UI framework JavaFX, which though immature is more suitable for general-purpose and more sophisticated than Android's. Such sophistication and capabilities would be invaluable if not necessary for building more complex softwares, says a fully-featured tablet version of Photoshop or Visual Studio, instead of fancy toys we have now on smartphones.
&gt; and people should pay to use math formulas ! They did and they still do. Ex: GIF (LZW, one of the most primitive and dumbest compression concepts).
Cool, trying to implement that now.
It's only something that I just learned to do, and I've tried to comment heavily so hopefully some of it makes sense. If you want to ask me any questions about it, feel free! 
&gt; The server will have a centralized map of names-&gt;sockets This is what I'm working on now. How do I differentiate each socket(client) that connects to the server, in the server? I can't find anything unique about the socket objects that I can store.
It was really interesting to hear the theory behind some of the design decisions in Java8 and discussion going on, especially with Object values. Java developers will no longer have to choose between doing it right and doing it fast.... 
Well dammit - I would know that if he had just written the 3rd edition. Now I have to go and delete a hundred thousand lines of hashCode... Thanks for the link.
as i wanted to begin with the really basics, i wrote it in notepad. 2 hours of work for me, reading a book to understand java but still no premades.
Hummm, I must have been confused then. I thought the issue was they were compliant with the JVM api/interfaces.
Yep you can do that, you could also compile from the command line and call git from the command line but that starts to negate the point of having a full IDE like this.
After clicking the link I knew Id not be told what this stuff does. I had been right :(
I wouldn't use a switch statement here since you are dealing with intervals of numbers (months) but your assignment probably requires it so we'll do it that way. First thing is the parse the timestamp using String's split() with the regex of "/". This will give you an array of String. First index in the array is the month, second date, third year. I wouldn't use substring because the month might be just listed as 9 and not 09, then you'll have an issue with the substring indexes. Now convert the month to an integer with Integer.valueOf() (so you don't have to deal with 0s before the number like the month 09) and switch on that value.
Oh man, I am definitely looking forward to the future of java. After watching that explanation of Optional, I now understand how it is much more useful. I was under the impression it was literally just an object with the member methods isPresent and get (which IMO is useless.) However looking at the javadoc of Optional after watching this presentation makes me appreciate it much more, I can definitely see how this would help me significantly. I am definitely looking forwards to lambdas and appreciate their purpose (other than reducing verbosity) much more. The value class type also sounds awesome. People have been asking for this for years. It is a must in performance intensive code. I can appreciate why it may have been acceptable to ignore this type a couple years ago (relative cost of a cache miss) but now it is definitely a must if Java is to move towards the future. What they're doing with generics in Java is also really great. Looking forward to not using List&lt;Integer&gt;s
Just wanted to say thanks again, the net beans tutorials have been very helpful.
Yeah, the next few years should be an exciting time for Java development. I remember when the .NET community went through this a few years back when lambdas et al were introduced there, and that ecosystem basically just exploded with innovative new APIs like LINQ and others. I should look into Optional though. I'm not familiar with that yet. Edit: Ooh... that's nice. And it has filter, and map, and flatmap.. and you can ::headsplosion::. http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html 
I kind of "roll my own" using Jersey as the base. Then I bring in other libraries depending on the need. If I need persistence, then I bring in Hibernate, or JDBI. Validation, I use Hibernate Validator. If I need templating I use Jersey MVC with Freemarker. I use Coda Hale's Metrics for server monitoring. I realize that this is essentially what Dropwizard provides for you out of the box, but for some reason I tried Dropwizard once and it didn't click. Anyone looking at my comment history must think I get paid to talk promote Jersey.
James Gosling says he's never seen a superior alternative to null pointers. Rust hasn't reached v1.0 yet, but its Option&lt;T&gt; type [is represented by a null pointer under the hood](http://stackoverflow.com/a/16515488/) whenever possible. All the flexibility and type-safety of `Maybe`, with the performance of null pointers! The Glasgow Haskell Compiler is also [planning on implementing this optimisation](https://ghc.haskell.org/trac/ghc/ticket/4937).
&gt; the next few years should be an exciting time for Java development. I remember when the .NET community went through this a few years back when lambdas et al were introduced there, and that ecosystem basically just exploded with innovative new APIs like LINQ and others. So, basically, the "future" of java is to catch up with what .Net was 8 years ago when LINQ was created? Nice.
Not at all true. All it means is you cannot copy an entire framwork of code that requires a license (when used on mobile platforms, in this case) without getting permission first. The sky is not falling.
People seem to always gloss over Google's part in this case. Running a JDK on mobile devices requires (or at least use to require) a license from the owner of Java, who is now Oracle. Google decided they did not want to pay Oracle to license this technology. So instead of developing their own software they thought they'd just stick it to Oracle and copy everything from the Java language API but compile it down to their own proprietary, incompatible format so that they can say they aren't running a JDK and pretend they didn't take someone else's intellectual property. It's really hard to defend Google when you know the hows and whys of what they've done in this case. Does anyone seriously believe that copying thousands of lines of code verbatim from a license-protected piece of software does not amount to copyright infringement? Most of you are the same people who would call for burning Megacorp X to the ground for copying 10 lines of code covered by the GPL without attribution.
Copyright law covers written works. They took a bunch of code and copied it verbatim. That's why it's a copyright case and not a patent case. It's really pretty simple.
The sheer popularity of Android alone has to have lead to some developers using Java for other platforms (Enterprise, Web, Desktop). I see tons of Job postings asking for Android + Java EE. They use entirely different libraries, but don't underestimate the value of having to only understand one programming language. Also, the addition of many Java tools (debuggers, code coverage, profilers) just because of the popularity boost due to Android. 
What Google created is not interoperable, though. They are not compliant with the Java byte code specification, they've created their own proprietary virtual machine ecosystem that looks like Java but isn't Java (because they didn't want to pay Oracle for a license).
An interface, in this case, is code though. We're not talking about abstract things like an HTTP endpoint, we're talking about Java Interfaces which are Java code.
I'm personally a fan of @Nullable along with static analysis. Catches tons of issues without any performance losses.
Yea, I do NOT view an interface as code. The amount of effort involved in making an interface is not deserving of a copyright. describing a SOAP api could be another example of something which is freely distributed, and yet has code like structures, but is not deserving of being protected like an implementation deserves.
The JAR has to be in the classpath for it to compile. You can't just put it in a ZIP and expect it to work. Whatever system the professor is using to compile your program has to be aware of MiG or have some mechanism for dealing with third-party JARs. Neither seems likely for something like this. You could always ask your professor though!
If optional is a value class there should be zero performance overhead in using it, even in terms of cache missing/indirection
Do you have a link?
Well, yeah. And it's been known for some time that Java has been lagging behind C# from a language features standpoint. But, hey, at least it's moving forward again. And with the VERY robust FOSS ecosystem around Java, I think the .NET ecosystem will be playing catch up very soon again; which hasn't really been the case since Java 1.0 was released. In many ways, the .NET ecosystem already does play catch up on frameworks. Hold their feet to the fire on language features as well, and I don't think the Java community will be feeling many gaps, if any, going forward.
Wow, first off, I congratulate you for basically answering every random concern I've had in this post. Thank You. * On compressing the code to use the smallest amount of disk space in the actual source code file, there are actually some good use cases for this: for example, say your work group is using version control on the file, and you know that everyone on a server's going to eventually check out said file. So, if you have 50 people in your work group who *all* check out the code and you save 10 KB in your source code, then that ends up exponentially growing to 500 KB of savings. And that's assuming no one checks it out multiple times onto multiple servers. Yes, locally, this doesn't save much (a few KB here or there), but in an enterprise-grade situation, this is actually a very big concern as if no one cares about space, then eventually the server will fill up and someone will have to go pay to buy more storage capacity. Even a few KB here or there helps as it means that the users of that server actually care about the space they're using. * I use a native version of Vim for all of my Java coding. Yes, I know that an IDE has a whole swath of cool features that'd be helpful. However, when I was at school (we used an *ANCIENT* Solaris box for all our programming stuff) I learned how to use Vim and UNIX and got to the point where I'd try to use Vim commands inside of things like MS Word (which is also why I have Vimium installed for Chrome on my personal laptop). If I need to look up a method or class or whatever, I have the Java API documentation website bookmarked to my bookmark toolbar and just go search there. (And, yes, I even do my Java GUI coding in Vim.) * Thanks for the hint on getting Reddit to show code like code. That's a helpful trick. I wish there was somewhere that showed all of the formatting codes, and I'm sure there is, I just don't know where it is. * Even a Perl script is "compiled" at some point (I believe at runtime). Yes, I know that for the compiled source a few KB saved by reorganizing a few lines of code of the source file. * Thanks for the list of "type-like" constructs in Java. I was aware that Java had few primitives/"type-likes" as it is basically all Classes/Interfaces. For reference, Perl has even fewer (scalar, list, and hash) and I can get away with some pretty crazy things with only those three types. I'm sure there's a way to get away with similarly crazy things in Java, I just haven't investigated any of it yet as you correctly noted that on a local box, a few KB here or there doesn't save *much* in the grand scheme of things (and for the record, my laptop has 2 TB of disk space so a few KB is really a drop in the bucket locally). Again, I'd like to thank you for all of your answers and hints.
&gt; In many ways, the .NET ecosystem already does play catch up on frameworks Really? Can you name what relevant java frameworks are there which have no .Net equivalents? seriously, no trolling here. **I'm primarily interested in:** cross-platform MVVM frameworks which allow me to create Windows Desktop, Android and iOS apps such as MVVMCross and Xamarin.Forms. I'm also interested in MVVM frameworks in general and UI frameworks that support MVVM such as WPF.. Is there any UI framework in java, similar to WPF in terms of support for DataBinding and MVVM, with features similar to WPF's DataTemplating, which would allow me to basically write the interaction with the UI in a UI-agnostic manner that can later be adapted to other platforms? **I'm not interested in:** server-side web stuff, since I'm not planning to do any sort of web development in the short/mid term, and when the time comes, it's going to be F#'s WebSharper, Big Data stuff, since I don't do any sort of "big" anything (my clients are small businesses) or any sort of client-side stuff that isn't MVVM.
&gt; Installing it runs you into reams of problems with external C libs Wait, which ones?
Re: MVVM - OK. If you say so. That's your area of interest. The frameworks you cite really have nothing much to do with .NET though. Your point about "the entire world of UI has moved towards MVVM, both in Web and non-Web, except java, which seems to believe it's still 1990 in that sense." doesn't really take into account the fact that the above named frameworks are just as easily used in a Java environment. Re: Lucene - It's a search engine. It indexes content. It let's you specify parsers that can be used. It let's you decide what will be indexed, what meta-data, and how it will be searched. It let's you extend it. It's open source. I've personally used it as the core of a project I did for a customer that let them search customer data for potentially bad/inaccurate/out of date uses of customer data. You'd use something like this when regular expressions aren't up to the task. If you're interested, there's a full search product called 'Solr' which uses Lucene as its engine. &gt; Also, I'd like to mention that thanks to IKVM all these libaries/frameworks can be used from .Net with ease, all while retaining the ability to use all the features we love from C# / F# in our own code, so java doesn't really have an "exclusive advantage" in that sense. That kind of reinforces the point I was making about the Java ecosystem having richer frameworks, no? I don't even need to have a .NET bridge in a Java environment. It's simply not needed. Furthermore, my deployment options with Java are much richer. I can deploy my web app to a number of different containers, running on a number of different OSs. I can force .NET to have more flexibility too, but my options there are much more difficult to achieve and center around a CLR implementation which necessarily runs behind the state of the heart and cannot support the core APIs for which Microsoft limits the implementations to Windows and Windows Servers. Don't get me wrong; I love Microsoft's products and development tools. They can be extremely productive. But they are inherently limiting. Heck, Apple has the same problem, but even more extreme since they're so tightly tied not just to an OS, but hardware as well. It's part of their appeal, and it's also very limiting.
You could use Gradle and Ivy, and distribute your project together with a build script, able to retrieve its dependencies from the official repositories.
&gt; The rest of the world has, for the most part, moved on to HTML 5, CSS 3, and jQuery No, what happened is that thanks Sun not provided support for a good experience for desktop development, Java has lost the desktop. .NET and C++ based frameworks rule the desktop and the mobile space. The only Java based desktop that still matters is Android, and even there, the situation might still change depending on how the Google vs Oracle gets to be decided.
No need to be sorry. You are not alone in missing the 'Please consider...' text I put up on the post page. I consider adding a sticky post to better announce our intentions.
Maven. I am utterly disappointed C# has no solid equivalent.
or Maven http://maven.apache.org/ http://maven.apache.org/plugins/maven-source-plugin/usage.html http://stackoverflow.com/questions/2229757/maven-add-a-dependency-to-a-jar-by-relative-path
&gt; Your point about "the entire world of UI has moved towards MVVM, both in Web and non-Web, except java, which seems to believe it's still 1990 in that sense." doesn't really take into account the fact that the above named frameworks are just as easily used in a Java environment. Yes, however these are Javascript frameworks, which means Web which means I'm not interested. My point being Java doesn't really have a decent client-side ecosystem. Not even when it's being advertised as the "native" way to build Android apps. Compare the options to create an Android app with Java, versus using Xamarin.Forms (XAML and MVVM) or even regular Xamarin.Android, and something like MVVMCross. &gt; Re: Lucene Thanks for the info. &gt; my deployment options with Java are much richer. I can deploy my web app.... Not interested. I seem to have "more deployment options" of thick clients with .Net/Xamarin since I can target iOS and Windows Phone, which don't support Java. I can force Java running on iOS but that's thru a third party, unofficial product of dubious quality, just like .Net on server side Linux. Don't get me wrong, Java definitely has advantages for Web and Server side developers, but I'm not one of them.
An single interface is an API just as well as a whole framework. This would apply.
Open source licenses often require that derivative works also adopt the same license. Using an APIs would become a derivative work with this new understanding of copyright. And I don't think it's fine that part of our job suddenly becomes illegal as long as the chances of getting sued are "slim". Not the end of the world, but changing a lot of things for worse.
GPL =[
27sex3
Nice Java 8 example! Although I think I'd stick with a for loop for this one.
Anonymous just means without a name. Names are only used to pass references to things between statements. So, as long as you chain together operations on one line you will not have to supply names. Chain as much as you like. Anything that is returned can be acted on immediately without having to name it. Still it's not a design that is particularly readable if overused. Names help, and staying anonymous doesn't offer performance improvements.
Interesting, but what I got from this is that there won't be a lambda like language improvement any time soon. In other words, value types seem to be the next big thing, but that is going to be mostly transparent to the every day java programmer. I was a bit disappointed in the QA discussion about reified generics. Basically sounds like that won't happen. (at least not until post java 10). Though, I will say that I'm somewhat more excited about value types. If they play their cards right, we might see some pretty significant improvements to java collections performance.
Not *using* an API; *copying* an API would make it derivative work. But here's why it's not that big a deal. If this ruling stands, then it's not a problem for future APIs. Future APIs will either be released under a permissive license or risk not gaining adoption (or getting competition). So the problem is with existing APIs. Now, how many active projects today violate the license of the API (not a protocol or REST API, mind you -- actual library API) they'd copied? I can think of WINE and maybe a few more. Certainly nothing in widespread use (or almost nothing). There are of course a lot of GNU programs whose command line options emulate possibly proprietary UNIX programs. Some people spreading panic warn us that those can somehow be affected by this case, because in their developer's eyes, wire protocols, command lines and APIs are the same. But the law doesn't work like that, and the court sees a clear difference. *Only in the particular case of library APIs is a large amount of non-trivial, creative text (code) actually copied verbatim.* So this might pose a few legal challenges, and might trigger a couple more lawsuits, but it's nothing like the Armageddon some people claim it to be. It's merely an adjustment that might be a little inconvenient at most. Actually I think any definitive ruling on this matter is good, as it clarifies copyright law with respect to software library APIs, which was anything but clear.
&gt; Not using an API; copying an API would make it derivative work. How do you implement an interface without copying it ? You *have* to. We're talking about copyright law terms here, there would be no difference between copying to implement, and copying to make something new, this is still copying. And this is exactly what Oracle is saying here, you can't copy our APIs without our agreement. I don't understand the point of view that if millions of lines of code suddenly become a copyright violation it's not a big deal. Old libraries are not going to be released with new license terms. *All* libraries still in development will need to be updated. The way the law works is that if it is not explicitly allowed then it is forbidden. Of course the developer is not going to sue you 99% of the time, but that does not make it right. I think it's unfair to paint me and others as trying to spread panic, I don't think the world is coming to an end, I'm just worried that something so fundamental to our work would be threatened by a change that would benefit *absolutely no one at all* except Larry Ellison's hubris and a few lawyer's bank accounts.
When you click something from Menu 1, perhaps you can send an AJAX request (write a little JavaScript) instead of form POST (which sounds like you're doing now). The response of the AJAX request can then be used to dynamically update your page to create the content of Menu 2. The same comment applies for Menu 3/Content. With this solution, no page reloading will be necessary. 
The chaining is what I do in Perl. split() returns an array, which I then grab a single element out of. (In Perl, you have to enclose the return in ()'s to tell it you want to reference it as an array). So yeah, this is what I want to do.
1.) Start on your page with the first menu. 2.) User makes a selection from the first menu. 3.) That selection triggers an AJAX call that returns a session variable that contains the entirety of the first menu but with the user's first menu selection pre SELECTED and the contents of the second menu extending from that selection. 4.) The user makes a selection in the second menu and you again trigger an AJAX call that returns a session variable with the first and second menus present just as in the earlier calls but with the user's first selection SELECTED in the first menu, their second selection SELECTED in the nested second menu and the new third menu. Short answer, every return from the AJAX call has to contain the whole menu structure entirely, with their previous selections SELECTED. 
We ran out of tea and coffee variety names, so we just tack on "4j" and call it a day.
is that valid java?
&gt; How do you implement an interface without copying it? Implementing an API that's *meant to be implemented* by third parties clearly falls under fair use even if the API itself is copyrightable. And Oracle isn't saying now that "you can't copy our APIs without our agreement" (or without our open source license). They (or, Sun, rather) said it back when Java was created, and again when OpenJDK was released. &gt; All libraries still in development will need to be updated. Why? Do most libraries implement APIs created by someone else? Those libraries give you a license to use them. If you're referring to implementing stuff like interfaces that the libraries define, then, again, you are specifically granted license to do so by the API itself. &gt; I'm just worried that something so fundamental to our work would be threatened I know that in the past some developers assumed that you're allowed to replicate someone else's API, but is that "fundamental"? How many libraries do you know that replicate an unlicensed API? Yes, there are some, but I see nothing fundamental here. I suggest you [read the verdict](http://www.cafc.uscourts.gov/images/stories/opinions-orders/13-1021.Opinion.5-7-2014.1.PDF). It makes sense. And remember, all it says is that APIs are subject to copyright. It doesn't rule what constitutes an infringement.
This isn't really competition for resteasy. It's for running websites, not rest servers. It also has an explicit aim of being simple and straightforward and not larded with features. I've found resteasy to be very convoluted and lots of customizations for what should be pretty easy to achieve can become extremely complicated. Spark just lets you control everything yourself based on the assumption that things like marshalling and unmarshalling json is trivial to yourself with a library like Jackson.
In that respect it seems very similar to Express in Node land, enough to prime the pump, and the the ability to choose from the wealth of open source libraries available to build out the functionality you need. I have some candidate projects at work that I intend to trial it with - recently started one that would have been perfect but started it in Flask before I knew about this framework.
There's a bunch of similar libs. He cites Sinatra from Ruby land as a direct influence.
Really enjoying the good weekly round up with on point commentary. I've mentioned this to a couple of my colleagues.
I wonder how much devs actually care about production metrics. On projects I've worked on in the past, performance testing was important, but really a lot of issues don't get caught until there's an issue in production. Then it becomes "let's reverse engineer" the issue by reading the logs and hope we get to the bottom of it. Both are pretty complicated and I don't think the average dev will get anything from them.
Right, and Spark does none of those and doesn't plan to. It's designed to be lightweight, simple and fast.
You have three choices: * Preload all the data. This should be pretty self-explanatory. Only viable if it's a resonable amount of data, or if users are expected to click through a bunch of options on a single page visit. * Fetch submenus and content with AJAX calls. Click on menu 1 fetches content for menu 2, click on menu 2 fetches content box to display. Probably the most common option. * Design a construct that lets you render the page with proper menu selections. In other words, your GET request would look something like page?menu1=xxx&amp;menu2=xxx&amp;content=xxx. Less desirable than AJAX calls, usually, as the whole page will re-render on each click. From your description of menu 1 href links rendering... it sounds like there may be something amiss in how you're rendering those links. If you post code samples, I'll take a look. Edit: Whoever is downvoting is free to post some criticism.
I recently used Spark for a project and really enjoyed it. Spring feels like a ton of bricks and for small Web pages, it gets in the way. Spark was super easy to boot up and get something running. I ran into some compatability issues in the latest version, but was able to use an older release without any problem. (Still on Java 7 at work.)
I understand the concept on inheritance. Im asking jn this specific case, why is it used? One question though regarding inheritance. Lets say I have a class with a variable, and a second class which inherits the first class. I take the variable from the first class and change its value while in the second class. Does this change the value in both classes. Here is what I mean: Class one Int x =10 Class two inherits one X = 15 Does this change the over all value of x if I want to use it again in another class?
If all you're interested in is MVVM in Microsoft envrionments, and you don't think Java has a decent client-side ecosystem (which is debatable though I will agree that .NET is stronger here), and you're not interested in Java's other strengths then I don't even know why you're hanging out in /r/java. 
I agree that Java has basically failed on the desktop so far. However, as far as mobile development and web development are concerned, Java has made significant inroads into user's hands, so the lack of progress on desktop hasn't mattered as much. It would be nice to see this change though I'm not sure how Oracle is supposed to beat Microsoft or even Apple at their own game at this point. It might be better to just let the specific vendors rule within their own native APIs like WPF or Cocoa. After all, I probably wouldn't use much if any Java in a Windows (mobile or desktop) solution, nor in a iOS solution. It's just not the right tool for those jobs.
Activity is the name of the first class. TrafficLightActivity is the name of the class that is your new intent. 
I wish we could get some literals for creating lists and maps. Would clean up my tests a lot.
I know Maven can be used with C#. But really, there isn't a huge selection for C# libraries using maven.
Bad name choice. Spark is already an established Apache project for data processing. See here: https://spark.apache.org/
Why not AutoValue? https://github.com/google/auto
Thanks for looking into my stuff and giving feedback. I am the creator of cache2k. So, why another cache? EHCache and Guava Cache are mature products. Most of the stuff we need is in them. There are some features we need regularly that are not included in EHCache and Guava Cache. It is possible, to add the missing stuff outside the cache within the application, for the cost of performance and resources. So, what bothers me is: shouldn't something that we regularly need together with caching being solved within the cache product?! Some examples: **Expiry policy per entry** (Guava: no, EHCache: yes) E.g. when implementing a HTTP cache I want to set the expiry time from the HTTP response. We have also applications where the update frequency changes depending on the volatility of the source. **Background refresh** (Guava: external, EHCache: wrapper provided) The cache holds the data that is used the most and we want the cache to make sure it is fresh when the application is accessing it. Instead of expiring an entry the background refresh renews it (in a self populating or read through configuration). In cache2k this needs no additional resources, since the normal expiry mechanism is used. **Exceptions and null support** (Guava: no, EHCache: no) Exceptions and nulls are an intrinsic java feature. In a self populating cache configuration the cache itself should do something useful if an exception occurs (that is: cache it!). **Persistence** (Guava: no, EHCache: no / commercial add-on) The next releases of cache2k will have persistence support. **Key mutation immunity and detection** (Guava: ?, EHCache: ?) The standard way to store keys and values is object reference. One big problem is, that a key object may be mutated after it is stored within the cache. To my knowledge cache2k is the only cache that properly detects this and warns if this happens. This way we can have both, low resource consumption and safe applications. **clean and concise API** (Guava: no, EHCache: no) cache2k provides a separate API package. Implementation internals are separated. So there is less confusion to the developer and it will not happen that something internal will be used that later breaks on a cache2k version update. The cache2k API is not final yet and there will be lots of changes, but the API will be evolved carefully to minimize breakages. However, each cache product will have important features that the others don't have. The most important feature of cache2k is speed and low resource consumtion. Please take a look at the [cache2k benchmarks](http://cache2k.org/benchmarks.html) page. Another reason for working on cache2k is to experiment and improve on eviction algorithms. Its more than 15 years since when clever adaptive caching algorithms were invented and all we still have is good old LRU? That said, I must clearly admit that cache2k is **not ready** for prime time yet. Basic stuff is missing e.g. an XML configuration. There are design flaws that need to get fixed, e.g. with expiry each cache uses a separate timer thread. The adaptive caching algorithms need to get more testing and improvement. The API is not final (however, there is an API...) For the ones that want to look at it and use it now, I will do my best and give missing features that are needed priority. The license issue: I am completely aware that GPL3 does not fit the purpose of everyone. We do commercial software and we are fine with GPL. We stick to open source principles and every customer gets the source of their product. Other people may have a different type of business. If somebody has troubles with the license, please contact me or raise an issue and we will find a solution. Cheers, Jens 
AutoValue breaks IDE refactoring, this doesn't.
Silly question: what is the advantage of handling requests from within Java application vs running it "normally" on let's say Apache server? ps. Syntax of this Spark looks really simple - rare thing amongst those all "frameworks".
Can someone point me to an example of a real website built with this, or indeed with any 'sinatra-style' framework? I've only ever seen one in person, and it was a mess, mostly due to the inexperience of the original developer, but it was hard for me to see the advantages of this approach vs a 'normal' mvc-ish approach. I've never ever ever ever needed to just return a 'hello' from a request. I usually have to check a database, perform some logic stuff, then return a (large) response. putting all that inside each route definition seems wrong, but I've not seen examples of route definitions pointing to more centralized code. Maybe none of the types of projects I do ever ever ever lend themselves to sinatra-style dev work - that could very well be. But I keep seeing/reading/hearing enough about this approach, but rarely see real projects built in it, so I can't be sure I'm missing out on something useful or not. The few close Ruby friends I work with don't really 'get it' with Sinatra, and are still Rails-only. I took over a 'Slim framework' project (PHP) and it was horrendous. I can't tell how much of that was the previous dev's inexperience vs trying to do things a 'Slim' way. The Slim docs never seemed to demonstrate a good way of building a 'real' app, and I'm seeing the same omission in the Spark docs here. It's a serious question - I'd like to learn if I'm missing out on a technique which I'd be able to benefit from. Pointers/assistance would be appreciated!
What does the implements statement do?
My project [JRAW](https://github.com/thatJavaNerd/JRAW) could certainly use some help. It's a wrapper for the Reddit API made entirely in Java.
bitcoinj - https://github.com/bitcoinj/bitcoinj
Implements lets the program know that you will be using all the methods in the interface you are declaring (in this case OnClickListener). When you declare an implements, you *must* use all the methods in your code. The itself is just a collection of method declarations with no method body (you flesh out the method in your own class). This is done so all programs using the same framework have one and only one method to perform a single task. This way, you don't have to write different onClick methods all over the place, which is a boon to whoever is looking at your code in the future.
I can't point you to a website, but I can explain how I'm using it now. My current project at work required me to create a design prototype in Velocity (similar to any website serving static pages). Spark is great in the way that it allows you to do things the way you want, and never gets in your way. The first thing I did was implement controllers, a make them return rendered templates. This configuration took maybe 15 minutes. Code here: http://pastebin.com/e2HXzJ4s
web advice, mvc for java no. Nowadays the web is very JavaScript-centered anyway, so why not take the extreme way: build entire logic and presentation/flow-control in client-side JavaScript and keep server-side at minimum. That way your Java code would cover nothing but simple and independent rest services for data access and double-check on security, and give you all the extensibility and control you need on client-side. I can't point you any framework for this, since I haven't touched real web stuff (Silverlight not counted) for years. I'm actually surprised that people still generate HTML from server-side in new projects....
We are using Guice in a medium-large app. Constructor injection in the integration layer creates very big constructors: public SomePresenter(DbObject one, CacheFactory two, User loggedUser, SessionService another....) We have counted to 8 parameters. Then you create backend objects to group related stuff. public ServerBackend(DbObject one, CacheFactory two, SessionService another...) So you can make a TestBackend, an OfflineBackend or ReadOnlyBackend. This has problems. * The app grows and more stuff is added and added to the backends, then you are on point one again * Everthing depends on the backend, not the individual instances. This leaves a bad taste in the mouth. The funny point is that the constructor only does: this.foo = backend.foo(); this.bar = backend.bar(); this.usersCache = backend.caches().users(); ... Maybe we should use simple field injection with labels: @Inject @Named("usersCache") Cache usersCache And leave each presenter/service/whatever request what they want freely and let guice do its magic. Any ideas? 
If a component needs 8 dependencies, you might want to evaluate how it was designed. Is it really several logical components disguised as one? 
Thanks! EDIT: Was posting from phone before - 'thanks' was the start, but here's a follow on question. If you're having to inject your own templating and create your own controller system... why not just use something that provides that already? Speed may be one reason, for sure - I use Grails and love aspects of it, but it's a slow startup for testing and trials. Other reasons?
OpenWorm is a good one. They are trying to produce a complete and accurate neuromechanical model of a small nematode worm to run in a browser, and the simulation backend is all in java. Help out, it'll continue the advance of science. 
PS: not exactly LINQ since the expression part is not included (JINQ does that). My library is a lightweight and easier-to-use alternative to the new Stream API in Java 8: built directly on existing APIs by overriding/extending standard interfaces, utilizing the endorsed dir which doesn't violate Oracle's terms about bootstrap classpath. You wouldn't even need to read doc or example if you're already familiar with LINQ or high-order functions in other languages. I know I'm going to be condemned for breaching the standard, but whatever. been using it myself in real projects for a few months.
[War Worlds](https://github.com/codeka/wwmmo) is a [4X](http://en.m.wikipedia.org/wiki/4X) recently halted and subsequently open-sourced for bug fixing. Both java server and android client need some love. As a player, I thought it had "good bones", and could be much more than it was. There's a team forming now to revive it, msg if interested.
It's also a great antidote to the Java complexity pushed by Oracle/Sun, etc. The list of dependencies is so short on this one. I tried to add the Jersey REST client to the project and it brought it a whole ten of dependencies that make no sense, like javax.inject, or OSGI or whatever. Good to see a framework that does not try to include half of Maven repo with it.
That's a bit like saying there isn't a huge selection for C# libraries in git and that you aren't going to use git because of that. 
My custom controller system is just a method call(?). Why do you need something to provide that for you? I just needed to quickly set up a webpage with templating, and Spark had me up and running in minutes. If you're creating a complex system, Spark might not be for you. If you know of any other frameworks that are easier to set up and configure, please do tell! Spark was the best one I found after a few hours of looking :)
&gt; Why do you need something to provide that for you? I'd turn that around - what's the benefit of building something from scratch when it's functionality provided by other frameworks already? Genuinely curious why people make these sorts of decisions. I went down the 'build your own' route years ago, before there were any available options (in the PHP world, for comparison). Really just curious, that's all. Thanks for the example code. EDIT: Oh, also "if you're creating a complex system"... that is a fuzzy demarcation line. If you have specific cut-off points that you'd share, from your own perspective, please do so. It might help others (and would help me). I don't think I've ever seen sinatra-style frameworks indicate any sort of a cutoff point as to when XYZ is a 'better' choice - it's all left as an exercise to the reader, but most readers, I'd say, don't have enough experience to know when XYZ or ABC is a better choice. Thanks. 
I wrote an open source Pong clone called [Particle Pong]( https://github.com/justinmeister/PongWithLibgdx). It's on the Google play store if you want to try it. Currently it only has two player mode, but a one payer mode against an AI could be a fun way to learn libGDX, and improve the project.
[Cellular Automata Engine]( http://i.imgur.com/5ytGOwl.jpg)
According to the git commit history, Apache Spark first commit was in May 2010, while Spark web framework was a year later in May of 2011.
Very cool! May pull it down myself later. 
/r/libgdx http://libgdx.badlogicgames.com/ It's an open-source, cross-platform framework primarily used for creating games.
&gt;I'd turn that around - what's the benefit of building something from scratch when it's functionality provided by other frameworks already? I'm one of the laziest developer I know, so I hate writing stuff from scratch. This was the method that required the least amount of effort on my part. Do you have any tips to other frameworks that are even faster? There's no hidden magic here, it's literally just a method call, so I'm not sure what you mean. What am I creating from scratch? It works pretty much like Play Framework and similar frameworks out of the box. You create the controller and the method, then call it with a route. Is there some easier way to do this that I'm not aware of? My original response to you was based mainly on your statement "Putting all that inside each route definition seems wrong, but I've not seen examples of route definitions pointing to more centralized code." So I tried to show you an example of that :) As to a specific cut off point, it's hard to say. I'm not an expert on Spark, I've only been using it for a few weeks, but I thought it was cool and I wanted to share. I have experience with Spring, Vaadin and Play mainly, and at least for small projects, they tend get in the way of themselves :)
Co-founder here: The fastest way to see it in action is the Quickstart. Run a couple of the examples and you'll see the nets learning MNIST or IRIS. MNIST will produce renders for you. If you've got questions, feel free to ask on our Google Group: https://groups.google.com/forum/#!forum/deeplearning4j Or open an issue on Github. 
How? I've never had problems with it.
If you want that community to exist, then build it. It's a great idea. The technical problems have already been solved though. I doubt that Maven can flourish in a proprietary environment, but I could be wrong. 
Right now I remember a presenter for a mobile app handling shipping and routing. It received two views, one for editing and another for viewing. We can make one form these, but then we have a a problem with conbinatory explosion of interfaces. Sum these: * The local database, this is mobile and fetching everything from remote is molasses slow. * The remote database service, because for some stuff you need fresh info no matter what * The geostuff, to do some location calculations * Remote stock service, it is a beast out of our control * Remote work report service, another beast. * Aditional syncing and caching stuff from our implementation. All of the above and others went to various Backend(s). Any better idea?
It sounds like this component does several different things - can you break it down into a middle layer for each piece of discreet functionality?
If you need some input on how charts should look, look up any of Edward Tufte's books. Just a well-intended tip :-) 
[Aurous](https://github.com/Codeusa/aurous-app) could use some updates 
I've been looking for something exactly like this. Thanks!
See the warnings section of the AutoValue readme: &gt;Use of AutoValue has one serious negative consequence: certain formerly safe refactorings could now break your code, and be caught only by your tests. It generates an implementation class based on having "AutoValue_" prepended to a class name, which is generated at build time. Since the class is generated at build time, it's not visible to your IDE. 
Wow! What a small world. I've been playing that game for awhile. I was actually thinking about helping out with that. The UI (Along with various other portions after browsing through the source) could definitely use some major reworks. I'm definitely interested. 
Have a look here subreddit http://www.reddit.com/r/cellular_automata/ http://www.reddit.com/r/cellular_automata/comments/2gv157/resources_for_creating_cellular_automata/
I have a personal project called [JStrava](https://github.com/dustedrob/JStrava). It's basically an Java Wrapper for the [Strava] (http://strava.com) [API](http://strava.github.io/api/). I've been unable to mantain in due to time constraints. Most of the features are already done but there are still some pending issues that need to be fixed, features to be added and do some more thorough testing.
I need a good plotting library for javafx. I know java 8 can wrap a swing control but I would prefer native java fx. Any idea? I need to draw 32k floats at 30fps more or less.
BTW, I love how all you javatards keep downvoting and no one is able to prove me wrong... LOL. 
How would you find the length of an array in java, such as an array with 10 elements, without using arrayname.length ?
Count the elements.
No really, you just use arrayname.count, but its a private method. So you have to use a singleton class
You use array.length. Arrays know how big they are and this is where the size is stored. Why would you want to use something else?
To know the theory behind .length instead of just using in mindlessly. Id like to know what it is doing behind the scenes
catch ArrayIndexOutOfBoundsException ;)
I apologize, but there is no complicatedness about an arrays' length. Most if not all languages have array structures that by default know how long they are, kind of like how you don't have to ask your parents what your name is. There is no behind the scenes.
 int i; for (i = 0; i &gt; -1; i++) { try { array[i] = array[i]; } catch (ArrayIndexOutOfBoundsException aiobe) { break; } } int length = i; that should do the trick assuming your array is shorter than the max int value.... not sure why you'd ever need to do this
It's not complicated as most of such extensions are just pieces of one or two lines which anyone can write in 30 seconds. Scala is a whole different thing and it won't benefit me for modifying existing Java source.
Thank you this is exactly what I was looking for
As you might know, a Java array is always created with a fixed size, e.g. new int[7]. The length is a known value from the beginning. When you ask .length this stored value is returned. That's really it.
The length of an array is stored in the implementation. For example ArrayList and LinkedList have an int field named size that is changed every time an item is added. Just take a look at the source code for implementations of an array, there's no magic.
 int i = 0; for(Object o: yourArray) i++; Guess what is in i afterwards.
If you want to know what is happening behind the scenes, you can read the [Java Language Specification](http://docs.oracle.com/javase/specs/jls/se7/html/index.html). Here's the section about [arrays](http://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html#jls-10.3). If that's not enough for you, you can read the [Virtual Machine Specification](http://docs.oracle.com/javase/specs/jvms/se7/html/index.html). The details about [arrays](http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-3.html#jvms-3.9) at the bytecode level. Behind the scenes, I'm assuming the .length field access gets converted into an arraylength JVM bytecode instruction. If you want to know for sure, use the [javap program](http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html) to crack open the class file and see the bytecode for yourself.
That's what we're going to do today? we're going to fight?
Here's a thread from [a year ago](http://www.reddit.com/r/java/comments/1en9ac/is_intellij_better_than_netbeans/). NetBeans and IntelliJ both have most things installed out of the box that requires a substantial load of plugins in Eclipse. NetBeans is free, but so is the IntelliJ Community Edition. In the free version of IntelliJ, you're going to miss out on a lot of cool features, some of which are present in NetBeans (like JSP editing) and a lot of which is not. IntelliJ's integration with pretty much everything right out of the box (like Spring, CDI, live integration of JPA and SQL queries in source files with the database schema and mappings, a built in database UI, superb Javascript integration with knowledge of many popular frameworks, etc., etc.) is hard to beat.
In the company where I work, we made the change from NetBeans to IntelliJ due to compatibility issues. We were using Netbeans + Glassfish, worked fine but we chose to go for a JBoss solution due to the end of professionnal support of Glassfish. Then we realised the Netbeans can't handle JBoss properly. Starting, deploying, etc. is very buggy. Now with IntelliJ we have no problem at all with servers, Glassfish and JBoss/WildFly are working fine. Concerning the IDE itself, the functionalities are quite the same in both IDE, IntelliJ seems to have a slightly better refactoring system. The only small problem I have with IntelliJ is that it does not use maven directly but has custom layer over it and sometimes compilation does not the same thing locally and on jenkins.
It depends on what your definitions of "features" and "necessities" are. If compiling code is a necessity and everything else is a feature: Eclipse is great. IntelliJ is great too, oddly enough. Hell, SublimeText is probably the way to go in this case. However, if you consider fancy newfangled doohickeys such as testing frameworks, version control, and package management ecosystems as necessities then go with IntelliJ.
Sorry, no ideas!
Mostly what Intellij does better is it gets out of your way and lets you do the actual coding without bogging you down with wizards and dialogues, while at the same time providing excellent tools like really good code assist, refactoring support and version control integration.
I find the groovy editor to be far better than the netbeans one WRT code completion. Makes spock tests easier to write
IntelliJ is able to do many little pretty things; as an example, look at this code transformation when extracting method: if (badCondition()) return; Instance i = new Instance(...); doSomething(i); Suppose I want to turn line 1 and 2 into method. But this code fragment will have multiple exits in method (return void and return value). IntelliJ automatically does the following: // extracted method Instance makeInstance() { if (badCondition()) return null; return new Instance(...) } and // call site: Instance i = makeInstance(); if (i == null) return; doSomething(i); If you got to this point and understood what I wanted to explain, you'll appreciate the level IntelliJ dives into the programmers need. If you did not read to this point or did not understand, then you probably don't code even that hard to see the difference between IntelliJ and other IDEs. 
Okay, but that didn't really answer the question. Obviously Eclipse does support to some extent all of the features you described, so in what way do you think Intellij does them better?
Because you simply download and install IntelliJ everything you need works with no additional plugin installation or configuration. To understand how big of a deal this is you'll need to have some experience with working in Eclipse in an EE environment. To put it into perspective, we're standardized on Eclipse at work which means we have a custom Eclipse configuration. We have 3 separate documents which are each anywhere between 10 to 20 pages in length: one for windows, one for osx, and one for our web front-end team. To get started in a workspace we have to download all specific versions of Eclipse with maven, subclipse, tigris, sonar, and a spattering of utility/adapter plugins. Every time you do this you have to pray they work and that the hosting servers are up. Then once your stack is downloaded you have to configure it all, maven with the nexus host, sonar with the sonar host, eclipse with templates and code style configuration (which has to be done in 3 different places because fuck creating a logical IDE). Then you're ready to check out as a maven project if you're lucky and the plugin didn't fuck up like it does 50% of the time, otherwise you have to check out and import as a maven project and handle about 5 different build issues that crop up across about 20 different pom.xml files because the maven plugin builds shit in a random order. The alternative is to build everything yourself in sequence, which ultimately takes even longer than just letting Eclipse wipe its ass all over everything and you spending an hour cleaning shit off of your projects. I've had to perform this process myself about 4 times so far and I've gotten to the point where I can do it efficiently in about 4-6 hours depending on how many fucks I have to give that day. Then every time you create a new workspace you have to copy your local configuration over to it, because new workspaces are created with factory configuration. --- Alternatively you download IntelliJ, install it, add your Nexus server to a repo list, and check out from SVN. Does that answer the question? I haven't even talked about all the additional bells and whistles that IntelliJ has over Eclipse like static code analysis and quicksearch, or all the stuff that the Ultimate edition can do. When you download a plugin for IntelliJ it's because you're adding support to your IDE for a completely different language like Scala or Python, not because you need a core feature that an IDE should ship with. It's night and day between the two, and they're both free. Eclipse doesn't really have an excuse, it's like the core team doesn't even give a single fuck anymore which is why you see projects branching off of Eclipse like the Spring tool suite or the Scala IDE.
I use IntelliJ now, hit I have to say that Eclipse worked fine with different test and mocking frameworks.
My recommendation is to install the trial version and use it for 30 days and feel the difference by yourself.
EVERYTHING. Seriously, don't waste your time even looking at the other options. Get Idea, print out the cheat sheet for the keyboard shortcuts and pin it to your face. Well, maybe not your face, perhaps just have it to hand. Your productivity will improve massively.
When you're knowledgeable enough to break the rules you'll know when it is safe to do so. Until then you probably should follow the rules, but just be selective about those rules.
I never understood this argument. Most of the time I spend programming I am not typing out code, but rather trying to design or solve design issues in my head. I don't believe productivity will improve massively. I understand some people "think in code" but that only goes so far.
Without question, having used all 3, NetBeans IDE works best for me. In its latest releases, i.e., 8.0 and 8.0.1, I'd even call it slick and lightweight. And it has everything I need. Plus, for Maven, it can't be beaten and I spend most of my time wading through Maven POM files, which I'd never be able to do out of the box without NetBeans. More here: http://jaxenter.com/the-top-10-netbeans-features-according-to-its-users-107988.html
While Scala is 100% ad hoc, informally specified, bug ridden and slow.
If I had a job that required that much overhead and red tape, I'd be answering a lot more recruiter emails.
lol@lipstick on a pig &gt; have you considered hosting an update site with all the plugins you use etc.? Yeah, a friend at work and myself are actually tossing around the suggestion that a few of us get together and actually develop our own Eclipse plugin that can sort of... version control our configuration. Yay! Throw more plugins at it until it works! A major part of the problem is that some people don't care or are lazy or whatever and small differences in configuration have a butterfly effect on our code. I don't know exactly what because I work mainly with SOA so I'm sort of isolated from a lot of big picture problems (and in some ways not), but some days my friend acts like he's having a mental breakdown over Eclipse. You're definitely 100% correct about one thing: the Maven plugin is the pits. It's hard for a day to go by where someone isn't having their show stopped by an issue with Maven, the days that it isn't it's because someone's workspace got corrupted from an SVN issue with switching branches. --- The thing I don't like, and why I think certain things should be a part of the core project (really basic things like version control and ecosystems) is because that takes a little too much responsibility off of the core team and onto the plugin developers. At the very least things like maven, ant, sbt, and version control should be a central, first-class feature of any IDE. Without these things working flawlessly it's almost impossible to get anything done as a team in any sort of efficient manner. Maybe there's a good reason they aren't, I don't know.
Unlikely - the more 'we' (OpenJDK project) dive into the type erasure vs reified the more it looks like it may not actually be sensible for the JVM to reify it's generics. There is a *lot* of work going on in project valhalla to simulate reification for the most common use cases though.
I think the reason why you can't seem to find a comparison between IntelliJ and NetBeans is that most people simply want to move away from Eclipse. Once you've moved away from Eclipse, it doesn't really matter whether you use NetBeans or IntelliJ since both of them are a million times better than Eclipse. But, if Maven is important to you, use NetBeans.
IntelliJ empties your wallet. If you are bothered by the minimal plugin configuration that Eclipse requires, then you should spend $50 on MyEclipse, which does a great job of doing just that.
I think you need to try NetBeans. :-) No need to even import Maven projects. Just open any folder with a POM, plus you can see the Effective POM and visual diagrams on top of your POM, and you can remove dependencies graphically, i.e., from the visual diagrams. And that's just the tip of the iceberg.
I used Adobe Illustrator to create it, but the design was based off of [IntelliJ's UML diagrammer](https://www.jetbrains.com/idea/features/uml_class_diagram.html)
How does it fare in terms of warlocks though?
It's very convenient for browsing others' code / searching for classes and overrides etc. The entire UI including shortcuts are all properly setup and it also comes with a superior code inspector, though nowhere as good as their own Resharper. There is one thing that it provides that doesn't exist elsewhere: embedded highlighting of code including semantic highlighting. For instance it can highlight the SQL keywords in Java string and also warns you when you type wrong table names (auto-validated against real db schema). It's not doable in other IDEs because they don't even have the foundation to support such features.
We're on the internet, right? What else do we have to do?
Sounds like you haven't used NetBeans. There in JPA named queries you can use code completion for completing SQL queries -- i.e., they handle SQL queries well there, too.
NetBeans is free. And, again, no need to import Maven projects in NetBeans. Just point to a folder containing a POM and choose "Open Project". Maven is native in NetBeans, which you'll understand once you use it.
IntelliJ refactoring is better. Try in-lining a method parameter and NetBeans will fail you.
I never used JPA. Is it hard-coded for JPA only or extensible to allow other types of syntax, such as regular expression or JavaFX select binding (member paths)?
I read they fixed some issues in 8+ versions of Netbeans. When we made the switch, the 7.4 was the latest stable version and it was terrible.
accept that people like different things
hmm ibm no thanks; trying desperately at work to rid the place of ibm junk
Battery Life. 
You mean people can have their own opinion that differs from mine? [Mind blown](http://www.reactiongifs.com/r/2011/09/mind_blown.gif). /s
Eclipse is a thousand times better than both intellij and netbeans, in sucking balls jk :D
Hmm, Project Kulla is an official REPL or is it being developed for OpenJDK which I assume wouldn't be official then? Will definitely look into this more and see if I can talk to the people working on it. Thanks!
Pretty much everything...
People spend a lot of time setting up testing harnesses, managing dependency injection, jumping through hoops to get whatever vcs to work, remote deploy/debug (good god netbean, wtf... jboss has been around forever), managing builds and deploys etc, not to mention issue management/jira/whatever... it's not the time spent coding, it's the time not spent coding that adds up. Eclipse is not great at providing a clean, time efficient way to manage a lot of these tasks. Idea really is.
Lucky you. I spend a significant chunk of my time tracking down problems with existing code in a huge codebase. Knowing how to get around and finding things quickly is pretty important in that context.
Unless I misunderstand you, all of that is possible in eclipse also. (Except you have to import the project first)
Everything in it works. And most plugins just work. So I spend time coding and wasting it on IDE issues. Eclipse IMHO is great for pure Java coding, but many of its plugins are of very poor quality. Same for NetBeans. Also, I find the UI to be very responsive. That said, those other IDEs are good too. I've just been using IntelliJ for a while now and have had zero problems with it, so as a happy user I plan to stick to it.
I want to preface this by saying I haven't used Netbeans in a while. I always liked Netbeans and I've heard it has gotten even better since I last used it. It was definitely the closest to IntelliJ in terms of just getting it right. That being said, I've been forced to use Eclipse in the last month and here is the number 1 difference: Eclipse is buggy as all hell and IntelliJ isn't. I used to live in an Eclipse world and I don't know if I'd gotten used to it or if it's gotten worse but, throughout the day Eclipse will inexplicably crash, or do something odd like not act like it had saved a file until I close the file completely and reopen it (but not every time -- just every once in a while) or any number of other odd things that, while surmountable, are just little headaches I don't really need throughout my day. It turns a 20 minute problem into a 45 minute problem in some cases and just causes stress. With IntelliJ everything Just Works. It is all beautifully woven together and keeps the Principle of Least Surprise in effect at almost all times. When using it I know I am not going to have to fight my IDE at any point.
For a second I thought you were talking about file-level permissions on WAR files :/
Great initiative! Good luck
It would be nice to know what the project is about. If the project could be downloaded and built, that would help a lot too. If you are offering people money, everything should look more professional.
In my experience Intellij autocomplete is much faster, especially on large proejcts. It is also much better at guessing what I'm trying to complete. I try out new versions of eclipse when they come out but this feature alone keeps me coming back to Intellij. Beyond that, I find Intellij's UI more intuitive and polished. 
Out of curiousity, what are you looking to replace it with? Oracle technologies?
Now hold on... don't go getting all rational and non-inflammatory on us!
JD-GUI's my favorite
How have you survived on reddit with an attitude like that?
As a former Netbeans hater, I agree with you 100%. 8.0.1 brings a lot of performance improvements. Maven handling in Netbeans has always been better in the fact that "a maven project is a defacto Netbeans project" -- none of that .additional_folder_with_ide_settings/ crap All that said, I still prefer IntelliJ overall, but Netbeans has taken a close second spot for me. Again, this is coming from a LONG time Eclipse user who was forced into Netbeans during a job change 2 years ago.
The licensing is strange. http://www.xuggle.com/xuggler/licensing The page says that the *source* is under LGPLv3. It says you can download the source and create your own LGPLv3 Jars which you can distribute under LGPLv3. Then why don't they just put their Jars under LGPLv3? LGPLv3 Jars could still be used with other code under GPL. So it wouldn't hurt any existing users.
I really don't understand all the hate for a modular architecture. I like having the ability to tailor my environment with things I actually use. Why pull in tons of stuff for Clojure or Groovy if I'm never going to use it?
I haven't used NetBeans in a long while, but... IntelliJ is very modular. That's not the problem. Rather, it is a question of being forced to make a choice (I have to separately download all the plugins I need for Eclipse, very opt-in) and getting everything and excluding what I don't want (IntelliJ is opt-out). When it comes to choices, people tend to not want to make them. The first couple of times I installed IntelliJ, I went through the checklist and unchecked the options I knew I wouldn't need. Now, I really don't care. Install it all. The effort to make the choices is not worth the minimal gain. Also, Eclipse's modularity breeds instability. Install too many things and Eclipse freaks out. That's not a knock against modularity, but the way Eclipse does it.
Seems like a scam to me. Flexible Funding means the money goes to them even if they don't hit their goal. "Are you a non-profit? Can I write-off my contribution with my taxes? As of now, no. But if this campaign is successful we will be registering. " So you are just giving them your money. 
Having worked heavily with the three (w/ intellij pro not free), I have come to the conclusion that any tool that you learn to master with time will be more efficient than a tool that you don't master. Pick one, customize and tune it the best way you can, learn all of its important shortcuts and try not to use the mouse any more. You will be coding 50% faster than before in no-time, and then will come on forums and reddit to say how great / better such tool is compared to others... (well hopefully not :) 
Runs better on Mac. That's the only thing in my opinion. Each IDE will present a different number of fancy things (and it's hard to tell which one is better, so I wouldn't say it's a good way of saying A is better than B because A has better highlighting or whatever..) I prefer Eclipse due to the 1812738912 plugins I can choose from.
But how does idea present you a more powerful set of tools for static code analysis? Solving bugs isn't Ctrl+f, or look up class declaration and bam you've solved it. Most are much more insidious and require most of the work to be done in your head and stepping through a debugger...
Is it working code? Can you load it up in an IDE and build/run it?
did this really need to be a video ? Would have just liked a writeup. 
I always loved JAD, but it fell into negligence long, long ago. Better check out Java Decompiler or one of the other decompilers that crop up lately. I've written a very short article (including a lot of links) on the topic: http://www.beyondjava.net/blog/newsflash-java-decompilers/ BTW: It's funny FRD4.COM and I published a similar article almost simultaniously :).
OpenJDK is what Oracle builds on. To be honest I'm not aware of any feature present in Oracle but not OpenJDK. (Someone feel free to correct me)
Oh, so now you're telling me what to do???
Thanks to all for the advice! I will definitely look into AJAX. I already did some implementation tests, but it was a little bit confusing (not familiar with JSON). Will do some more testing.
The refactoring available to you through IntelliJ is just outstanding. Say IntelliJ is at a 10, eclipse is at 7.5 on the refactor front. IntelliJ seems to be more intuitive with its refactors (easy to extract field and constant etc.) One of the best refactors that is missing from eclipse is extract method object. Really helps pick out interfaces and aids with creating maintainable, easier to test code. That being said, in my personal projects I typically just use eclipse. Don't have the pennies for IntelliJ and I can manually craft my code to get around needing the powerful refactors IntelliJ offers.
It's not really a fight between a tank and a tin can.
Not sure if you're a student but you can get all the JetBrains full version software free with an .edu email. https://www.jetbrains.com/student/
&gt; If I had a job that required that much overhead and red tape On reddit non-trivial and trivial projects are disproportionally represented, since most redditors are not working on large scale projects that involve tens or hundreds of collaborating developers. Comments like yours are all too common and completely negated by real life experience. You get paid in the top 10 percentile as a developer in a recognizable brand? No, you won't jump. You'll work on fixing it, or you probably shouldn't be there.
For independent developers, building something that you're not getting paid for is difficult because you can't just stop working for a year to build your dream. Seems like he may just be trying to get some bill money so he'll have the time and space he needs to get this thing off the ground. Makes sense to me.
That wallpaper is amazing.
In my experience Intellij just does things *better*. That's not to say the others are bad. They aren't. 95% of the time, Eclipse and Netbeans will work great and fill all of your needs. But the other 5% I find that I can accomplish what I want, but with a little headache. Intellij... just works. Out of the box you have built in support for all major version control systems, application servers, languages, and popular libraries. And they are all first party plugins with great integration. So all shortcuts and layouts match with the rest of the IDE. Yes you can get MyEclipse to help manage plugins but plugins in eclipse are just a PITA. I've spent many hours trying to debug plugins because one version of one plugin causes another version of another plugin to fail. And they all look different and all seem half finished. It's also the little things in IntelliJ IDEA. Postfix completion (variable.null/notnull creates if statements... list.for creates a for loop over your list...), fanastic refactoring, filling in property file values, multi cursor, built in FTP, a console right in the IDE... and in version 14, built in scratch files (quickly open a temp file to run some java/sql/python/javascript/groovy/ruby/php to test), and in-line variable values when debugging. And that's just Java. Because JetBrains also has WebStorm/PHPStorm for web development, you get those features as well. So Javascript editing is also first class. Yes its doable in the others... just not as complete. Built in support handlebars/mustache, angular, nodejs, and others. So if you'll do any web development with a Java REST backend, or do any web development in general... it's really hard to beat. So yeah. The other tools are great. And are all you *need*. But some tinkering/fidgeting may be required. I like to tinker on things on my own time, but when I'm doing a job, I just want my IDE to *WORK*. TL;DR - They all work and work well. IntelliJ just does lots of little things a little better. But regardless of IDE, you have to put the time into learning how to get the most out of it.
TomEE, Glassfish and JBoss are reasonable options. I like Glassfish personally since it is more current than TomEE. Jboss is nice but pretty heavy (not as heavy as Websphere or Weblogic). 
&gt; A lot of Kickstarters have raised millions and never released a product. That's what you plan to do? 
No matter how much money you get? Why should anyone give?
The IntelliJ debugger is better than eclipse IMO
Perhaps not exactly what you are looking for, but I've found Clojure's REPL to be a pretty convenient way of working with Java in an interactice REPL environment. Calling Java code is easy: All you need to do is put the . and () in slightly different places, i.e.: foo.method(bar) becomes: (.method foo bar)
Please. Lets not turn this into a vi versus emacs type discussion. Learn one well. That is all. 
Because if you care about a modular architecture you're probably not going to use an IDE.
Please ~~read the posting guidelines~~. Edit: I just realized I'm commenting in the wrong subreddit.. I meant the posting guidelines of /r/javahelp, where a submission like this is more fitting. * Properly format your code * Ask a specific question Also congratulations on the nondescript title. You're just stating your assignment text and some (unformatted) code. What is your question? What are you struggling with? What have you tried? 
The keyboard shortcuts are wrong. Ctrl+D deletes a line, it does it in more applications than just Eclipse. Small things like this catch me out in IntelliJ all the time, where they change stuff for no good reason.
Maven POM support in IntelliJ is also awful.
The desktop wallpaper is from the Interstellar movie.
Decent Scala support. That's what seals the deal for me. IDEA also has *working* XML auto completion, which is nice. Fucking NetBeans just hangs whenever I type Ctrl-Space in an XML document...
Do you have an idea for a project?
This belongs on /r/javahelp, not here.
Here's some resources that might be helpful: http://stackoverflow.com/questions/5769669/java-convert-string-to-double http://alvinalexander.com/java/edu/qanda/pjqa00001.shtml
Question is if it's a severe or medium error to not write tests.
You are off to a great start. When you say "Choose "+s, s has not been instantiated (this means you have not yet given it a value). So java doesn't understand. Maybe try "Choose 1 or 2". The next line is when s will be given a value. After that you can run your if/else logic if(s == 1) {// solve} else if( s == 2) {// solve} 
Again, I think it just proves my point even more that you have the means to fund this site without asking for money. Personally I would not feel good taking people's money and then failing. Where as you do have the means to at least get to a point where you can know if you will succeed or fail, before asking for money. best of luck
Until your website is more than a cutesy intro sequence, you don't really have a leg to stand on. Like I said, there are thousands of people who think that their idea is going to be the next big thing. *Prove it* if you want anyone to care.
The developer will add commentary later on (not sure exactly when, too busy coding), but we've had code reviewed previously without any commentary. We appreciate that it obviously make the process slightly harder, but you are still free to dig in if you think you can find some errors :)
As an ex Eclipse user (for 5 years) I was most impressed by how things seem to just work. I installed only 1 plugin. IdeaVIM. Other than that its been smooth sailing. With Eclipse, a standard install procedure included me downloading quite a handful of plugins in order to make myself comfortable. I think the biggest difference is in the feel between Intellij products and the rest. Intellij feels like its constructed better. I hardly ever go in the settings page and I also never have to google for anything. The IDE just seems to know what to do, and when not to bother me. Comparison's between IDE's are much the same as comparison's between text editors. Different strokes for different folks. Im on the Intellij side of the comparison. Neither is fundamentally crap. Other people's mileage may vary, of course. 
Your blog links Ondrej Ziska's blog, which in turn has a link to Softonic, a known malware site.
I would suggest using regular expressions to validate your input 
Have you had a look at the [guide](http://download.forge.objectweb.org/asm/asm4-guide.pdf) (pdf link)? Yes, it's for version 4, but apart from support for Java 8 language features, the API has stayed the same. Edit: Also have a look at [Byte Buddy](http://bytebuddy.net/) which builds on ASM to deliver a relatively simple interface to generating code.
A regex would work, as suggested, but if you're new to Java it might be a good exercise to create a new class of your own, and write methods that you can use to validate the input from the keyboard. Write methods in the class that take your string as input, and then it will check the string for any characters that you don't want. It could return a boolean of true or false. You would basically be writing your own library that you would then import into your existing program. Once you have that working then you could use it in your loop. 
Saving the books individually without putting them all on the author then saving the author object (which would cascade all the saves for the books) will net you performance increases if say you are just saving a ton of books all at one time or just adding a book to an author who already has a collection of books-- in the latter case the performance increase would be marginal if noticeable at all. The uniqueness provided by the set collection depends on your implementation of the hashcode and equals method for the book object. What do you want a duplicate book to be? The PK of the book? The book title? The serial number? The jboss folks have an extensive writeup of it here https://developer.jboss.org/wiki/EqualsAndHashCode?_sscc=t I usually find it better to have the set force uniqueness on the PK field(s), and have my code enforce the business requirements like "same title and published date" You can find more writeups about different ways to approach this if you google it-- there's many different ways to work with hibernate and if you use it you should always check the sql it generates before putting it into prod-- it will sometimes generate some whack shit. Hibernate is great until it's not.
Use OpenCV to detect people's faces.
I'm new to Java, how do I set up so that only digits can be typed?
well I'd really like to be able to work with someone and strip the OS on the device to make it work with the environment. I'm not sure if you're familiar with vuforia or metiao sdk but they allow you to track and use images to create digital content in the world around us. these sdks cop-linked with an xbox kinect and leapmotion could create something that allows the user to create point cloud data that transforms everything into a workable object that can be picked up digitally with the users hands. The end goal of the project is to have a demo for people, for further funding on kickstarter and investment companies. What are your thoughts? 
if you read the post above, it will explain what we could all be working on.
First, what should the program do with non-numerical (and operator) input? Discard it? Display an error? In what setting does your calculator run - as a console application? swing? Web-based? Besides, Scanner has a .skip(…) method that could be used, also the Characters.isDigit method could be used to determine if an input character is numeric. Finally, I'd suggest you post question like this to /r/javahelp, where there are more people willing to help.
If regex is too complicated, Scanner actually has methods for only accepting a certain input. You can use Scanner.nextInt() and Scanner.nextFloat(). Just make sure to call a Scanner.nextLine() right afterwards (don't have to assign it to anything) as the nextInt and nextFloat methods will not consume the enter key.
Yeah I've seen it but its hard thinking of examples where this would be useful and it is diving in the deep end, I've seen bytebuddy but the examples are either stupidly simple or just hard to understand.
That is, in one sentence, the essence of byte code manipulation: Sometimes it's trivial cases and sometimes it's mind-blowing. For practical examples, it may be instructive to try and read code from projects that use asm, e.g. FindBugs.
Off the top of my head, there are a couple of small, but useful libraries relying extensively on ASM: - [ReflectASM](https://github.com/EsotericSoftware/reflectasm): high-performance reflection replacement. - [libStruct](https://github.com/riven8192/LibStruct): stack-allocated and off heap *structs* for java. Shameless plug: I use ASM in a few of my own projects, primarily in [artemis-odb](https://github.com/junkdog) - poorly documented and a bit messy codewise, but there's a [wiki page](https://github.com/junkdog/artemis-odb/wiki/Bytecode-weaving) detailing what's provided. I've found [Eclipse's ASM plugin](http://asm.ow2.org/eclipse/index.html) to be indispensable when working with ASM.
You cannot, you just can validate the input given.
I'm not sure if I'm your guy. I know a little java, but usually have worked different projects, than augmentation. Some of the ideas sound solid. Some I am not sure how they would be done, but then again I know very little about this field.
This. I have never had an issue with Maven in IntelliJ.
Also could take a look here: http://intelligentjava.wordpress.com/2014/09/15/cellular-automaton-mini-framework-and-conways-game-of-life-implementation/
about how much java do you know? All you would have to do is become accustomed to the api and I can create all the assess needed to move forward. I have been working with vr for a while now and understand how to tie it together. The only thing I've been having trouble with is programming so if you're proficient in java at all we could work together. I've also got another programer who has experience as well so you would be able to work with him and I to help figure this out! The metiao has many webinars explaining how to take on certain aspects as well so that's a great reference and learning area for this. let me know what way you're sawing!
Note that this is also the start of a new way to release features in Java. From now on, two releases will be made every quarter. As was already the case, the Critical Patch Update (CPU) will contain security fixes. A Patch Set Update (PSU) will also be made available, which contains all the fixes in the CPU plus new features. This way, Java developers and administrators can test the new features and report issues to Oracle. The new features will then be made available in the next CPU. So, general users and organizations can use the CPUs, and only get the latest security fixes and already-released three-months-old features. Enthusiasts and developers can use the PSUs, and be on the bleeding edge. This dual release system will only be done for the "main" Java release, currently Java 7, soon to be Java 8. Source: http://www.oracle.com/technetwork/java/javase/cpu-psu-explained-2331472.html
I don't think I would say proficient. I'm currently learning java in school
Also: cmp() in multiplet should be done with the Comparable interface rather than your own idea of comparing. Plus, your code returns clones. I'm not sure why you would do that. Is there a good reason? Also, it's a good practice to use immutables objects and your Multiplet class looks like a good candidate for immutability. The Functions.cmp(...) is impossible to review without comments.
that's perfect! How many years in are you? What are you thinking you want to focus in? With this project we could change the way people see and use the computer creating a new way of human interaction, it would be great to have you on the team. 
I'm in second year but I've been programming since highschool. Been doing java for a couple months. Not too sure yet what I want to main in.
Hangs? Which version of NetBeans are you referring to?
nice! So would you be up for the challenge? if you are then start taking a look at the api and I can skype or give you a call so we know we're on the same page with this whole thing. I've also got several documents that you can take a look at and a repository we can work with as well. 
&gt; Wow—talk about overloaded acronyms. Yeah, that's pretty bad. Note however that this is nothing new. Oracle has been using these acronyms for years, way before they even thought of buying Sun. What is new is doing the two simultaneous Java releases.
Internally we will have to use modified acronyms: JCPU for Java Critical Patch Update and JPSU for Java Patch Set Update to prevent any confusion. 
does include the mac os x version? 
Yes for 10.9.5. Also Yosemite 10.10 only supports Java 8.
And then all of the features and advantages will be immediately apparent like an uploaded Matrix helicopter piloting program? 
Look at the links in the sidebar at /r/learnjava Also look at http://mooc.cs.helsinki.fi/programming-part1 Udacity has an into to Java course also.
Take a look at [Java for Complete Beginners](https://www.udemy.com/java-tutorial) by John Purcell free on Udemy.com Also, check out [Derek Banas' Youtube channel](https://www.youtube.com/channel/UCwRXb5dUK4cvsHbx-rGzSgw) his videos go further than the Beginner course on Udemy.
My company uses a product called Med/FM made by CPU Medical Management Systems. It's great fun.
Am I reading this right -- is Apple is providing the Java 8 JDK? With Mavericks they only provided Java 6 JDK.
Thanks I'll look into those :)
I mostly learned from the official java tutorial. Go there and do all the code bits yourself. Type them into an IDE, learn to build it with maven and when you're done, create a project for them on github. You will have learned all the important building blocks of the language, and will exceed most of the graduates I worked with. 
I'm shitting bricks waiting for Java 8 to become mainstream. Not that I don't find all the cool new toys exciting, I love them all (except for the checked exceptions in a functional environment, that's a disaster). My problem is that most of the developers on our projects are not very experienced (senior people are very expensive). I'm concerned about green developers using all those nice new features of the language they have read some articles about and are eager to use. Take the functional stuff from Java 8, add them to the mix and you're staring at a potential disaster. It's hard enough to explain to our developers how to design OO APIs with clear contracts and to think about generic solutions and their concrete implementations, it will be near-impossible to convince them not to use too much of the functional stuff and make it work via side-effects (like they learned how to code in Java). In other words, I think this approach of mixing OO and functional worked with Scala, because Scala people are keen technologists, who are (were) early adopters. Generally speaking (broad brush) people who write Java are a notch below them. Don't get me wrong, I'm in the Java camp, this is not a diss to Java devs. In my experience, most developers we interview cannot even give a good explanation of what type erasure is (never mind the subtle difference between a static and a non-static nested class), so why do we expect them to know how a bit of distributed functional code work? I'm genuinely concerned.
The last JDK that Apple supplied was JDK 6. Since then they have all been provided by Oracle. 
Yeah you're right. It's better that the marketing department does it like in .NET. /s
Should I be concerned about your manufacturing process regarding bricks? :D
So essentially then there is no reason to use Jsoup right? Or are you saying I could use a for loop to run through every pokemon's number(url), retrieve EVs and update the hashmap?
soup _might_ work. but it depends on the site in question. How much dynamic HTML javascript stuff does it use ? I've found that for some sites, I have to resort to using selenium web driver in order to get the content I need. 
Store the data in a file but use a CSV (comma-separated value) file instead of a text file. This is a very standard format for storing flat data and is simple to read and write. Is scraping the website for EV details a one-time thing or will there be changes to the data so you have to scrape it every time the user requests a Pokemon's info?
JSoup is only for grabbing the data from the EV listing site. From there, you would loop through the pages of the site, and extract the information by looking for certain HTML tags (may be good to brush up on Firebug/Inspect Element as that will be helpful in formulating your scrape algorithm). From that, you can store the information in each Pokemon object and store it in the hashmap and attach it with a key (in this case, the pokemon's number)
I'm proficient in HTML so I pretty much understand how to parse the site but what I am confused on is with the CSV file you speak of below however I just looked some stuff up on this and I am clear. And grabbing the data would be a one time thing.
Apple is no longer making any java releases at all. Oracle is doing it.
You would have to make a new File object and write to it with BufferedWriter, and separate each property with commas. Then when you want to read it back, read the file in with bufferedreader (you can find some tutorials online for bufferedreader/writer), and split the string by split each of the lines read in by commas to get each individual value. Then set each in your java beans. it would look like this if you opened up the csv: 1, Bulbasaur, EVNum1, EVNum2 2, 2ndpokemon, EVNum1, EVNum2
Abstract base classes are very good for implementing the [template method pattern](http://en.wikipedia.org/wiki/Template_method_pattern), which is like OOP [Mad Libs](http://en.wikipedia.org/wiki/Mad_Libs). The abstract methods are the blanks you fill in. Interfaces are very good for implementing the [strategy pattern](http://en.wikipedia.org/wiki/Strategy_pattern). Interfaces define "plug-compatibility" which allows you to plug in different objects which implement the interface to get different behaviors.
I'd tend to point to the relative success of C# as it introduced (roughly) similar features over the last 5 or so years - you can of course write even more unreadable code than was previously possible, but for the most part people seem to stick to idioms that they understand, or else teams adopt coding guidelines to make sure that features are used consistently. When initially released, C# was something of a reaction to (perceived?) mistakes made in Java. Waiting this long gave Java a chance to do the same with C#, watching how they introduced functional features to an otherwise OO-only language.
You should read up on composition vs. inheritance to get an idea of how you can use each in different scenarios. I personally am not a fan of template patterns/heavy abstract class use and would rather inject the implementation of an interface into a component.
Can't you just force compilation with source level 7 on your build server(s)?
Exactly. You don't have to use the new language features, yet still take advantage of the improvements to the JVM. 
Before Java 8, interfaces were free of any implementation. Any class can implement an interface as long as it implements its methods. This allows to have classes that implement multiple interfaces (remember java is single implementation inheritance by design). Callers can then use the interfaces without worrying about what class actually implements it (at least in theory and as long the Liskov substitution principle is not violated) Abstract classes are very good if you want to provide skeleton base classes or strategies. Also they allow you to specify a contract that is actually checked at runtime. Let us say we want child classes to have a method `sqrt` that only ever gets positive double values and has to return another positive double value smaller or equal to the input. An abstract contract class could look like this: abstract class SqrtContract { public double sqrt(double d) { if(d &lt; 0) throw new ArithmeticException("sqrt(…) of a negative number is undefined."); final double result = sqrtImpl(d); if(result &lt; 0) throw new AssertionError("sqrt(…) returns negative result. Please flog the creator of " + getClass().getName()); return result; } protected abstract double sqrtImpl(double d); }
When looking at that list, for a second I was wondering what kind of exercise Smart Cardio is, and how it is possibly related to the JVM, but then I realized it's Smart-card IO...
Re singlet/arraycopy: performance is sacrificed for readability. Clone() is necessary to get rid of a chance that the original value is changed due to a bug in the code that uses Jiniri.
I'd be very suprised if arraycopy is faster than this.array[0]=otherArray[0]. Even for sizes &lt;10, maybe more. Keep in mind that System.arrayCopy is here to help copying huge arrays. Also, as stated in my comment, you'd rather use immutable classes than enforce defensive programming by using costly clones. Therefore no change can be done from outsiders in the classes you use.
With a couple of hotspot bug fixes, I wonder why they suggest that only people who are impacted should upgrade. "Oh. This random hotspot bug is something my app was depending on to crash it, but now it just keeps on running!"
Hmm... I don't have time to vet this, but it looks like what we were discussing may already exist: http://nuget.codeplex.com/ I have Visual Studio 2013, which I've hardly used so far, but it turns out that it's already installed in there on my machine at least. Anyway, give it a spin and see what you think. I probably won't have time today. Edit: - Using Nuget in automated builds: http://blogs.msdn.com/b/jpricket/archive/2012/05/10/using-nuget-with-tfs-build-automation.aspx - Using with Nuget package restore (binary pulls): http://docs.nuget.org/docs/reference/package-restore-with-team-build 
You need both. It's common and most flexible to have: * interface to define requirements * abstract class as the base for interface implementations. The role of abstract class should optional and its goal is to help simplify implementation, not part of the contract/requirement. * default or extension methods on interface to provide utility methods (composite of required methods on the interface) Take an website for instance, you have many pages, and each of them should implement the PageHandler interface which merely takes HTTP request and writes output (html) to HTTP response as interface PageHandler { void process(HttpRequest request, HttpResponse response); } Assume most of the pages require the users to login, and also act on a single database connection which is opened whenever the page is accessed, you may make an base class called AbstractPageHandler, which implements the *process()*, check user identity, then open the connection and call *process2()* which is to be provided by derived classes, to query/update database via the connection and send output to response, without dealing with the opening of db connection itself or access check: abstract class AbstractPage implements Page { public void process(...) { checkUserIdentity(); conn = openConnection(); process2(req, resp, conn); } protected abstract void process2(HttpRequest request, HttpResponse response, Connection connection); } Fields and parameters should generally take interfaces instead of classes to allow maximum flexibility and extensibility. However, most of time you don't start coding a new class with interface/abstract etc - you start with *one* simple class to do what you want, then you code a second class which is similar, and a third class which needs to use the first class or the second class depending on the condition - then you'd realize you need could make a common interface out of #1 and #2 and allow #3 to take the interface instead. As there are more classes implementing the interface, you'd notice shared code or pattern in some of them and then you make an abstract class for that. PS: You could take a look at Java API itself: the collections and AWT/Swing etc. 
While Java is not very well suited for a REPL, you can get try [DrJava](http://www.drjava.org/). Is a lightweight Java IDE with and acceptable REPL called Interactions. Once you forget about the horrible fonts, it is pretty useful!
Update 72 contains a fix that's been affecting Powermock users since update 65, so I'm glad they released it. :)
What's ExternalContext...?
What is the model? Do instructors get paid? Sounds like a significant time commitment, the benefit is....???
Helping new coders, no payment. Teaching improves improves your own skills too. 
&gt; With a couple of hotspot bug fixes, I wonder why they suggest that only people who are impacted should upgrade. Because the fixes have not seen enough real-world usage. The idea is that the developers and integrators should test the fixes in some kind of development / integration / preproduction environment, to ensure there is no unforeseen side-effect. The fixes will be included in the next CPU, in January 2015, at which time everybody will get them.
I don't know what's going on but the site is really laggy and slow on my phone to the point where it's almost unusable. 
Restart your phone. There's also a lot of traffic. 
I don't think traffic is the issue. I'm pretty sure is the CSS because scrolling up and down is not very responsive and it takes a long while for the content to render. I restarted my phone as well and the issue is still persistent. I'm running an Samsung S4 in Chrome. Your websites also the only one that I'm having issues with. 
&gt; Having an open committee deciding the future of one's own product is the most absurd thing I ever heard. You mean like Ada, C, C++, JavaScript, OpenGL, POSIX, Web.... 
These are exactly counter-examples. C++ had a lot of problems in past because the committee made things that compiler makers are unwilling to implement correctly, OpenGL implementations differ from vendor to vendor and all of them have their own extensions. Web is even more fragmented. The models used by Python or Scala are the best because they don't make specs out of nothing. They make the reference and dominant implementation and they add new features as they see fit. It's more adaptive to future demands and actually much easier for both of end-users (programmers who use them) and developers of non-official implementations to follow.
you could create a HashSet containing Character Set&lt;Character&gt; acceptable = new HashSet&lt;Character&gt;(); then use acceptable.contains(incomingCharacter) I find regex's to be powerful, but in many cases unneeded. 
Are you aware of Cloud SQL? It allows fully-managed, relational MySQL databases on the App Engine platform.
There's no information. Does the site have any functionality? I'm not going to sign up to something when I only have a vague idea of what it is and no idea why it's better than its alternatives. Also, I don't necessarily believe in 're-usable code'; this is speculative generality, a code smell: http://sourcemaking.com/refactoring/speculative-generality Without code being specific to a problem, it's very easy to get lost in introducing concepts that have no relevance to the next person who has to understand it. Effort spent making code re-usable is wasted in the normal case. Most code should not be re-used because re-use would mostly involve making a square peg fit a round hole. Solve the problem at hand simply and well. The small amount of code that is re-used should receive a lot more effort in its creation, and rarely change. An analogy would be comparing library development to application development.
Spark with Mustache: http://sparkjava.com/ Dropwizard with its views: http://dropwizard.io/manual/views.html or just a Java REST backend and a totally front-end Javascript framework like Ember.js, Angular.js, etc. Definitely not JSF. It's days are numbered.
Teaching is a major time commitment , most people aren't willing to do it for free
The application is fully functional. Sign up and have a look. 
We'll look into it. Although, out of over 13,000 unique visitors we've had no other mentions of this problem. 
I couldn't agree with you more. I found IntelliJ IDEA a couple of years ago and I haven't looked back to Eclipse one single time. I remember that Eclipse used to throw an error in my face every time I did a project-wide search, does it still do that?
A colleague said he liked using: http://www.gwtproject.org/overview.html Write Java, create client-side JavaScript.
If your having trouble setting up a development environment, you can try: (JAppStart)[https://code.google.com/p/jappstart/] I've used it before and it's basically a starter project for GoogleAppEngine using Spring and Hibernate. Maybe theres some template code that can help you setup your project at least.
Yeah but they love Eclipse there. I figured /r/java would have the next highest percentage of Eclipse users.
Haha i don't get errors i don't think. But boy oh boy i could write a solid block on Eclipses search functionality. I have IntelliJ as well, i think i'm gonna make the shift over today for good.
Yep. I started using IntelliJ around 2002, and have tried to switch to eclipse several times because a lot of my friends were using it. Every time was just me cursing and giving up within a week. Meanwhile I was able to switch to Mac, and even have become OK with JDeveloper, and switched text editors a few times. Switching wasn't the problem, it was the damn anti-intuitive design of eclipse. 
I think visual studios had a good system. Set an active project manually in the solution. Each project you'd choose a run configuration (if applicable). Running (regardless to what you edited) would run the active project. I don't mind the way eclipse does it, I do mind that it names all my default run configurations "Main" and "Main (1)" and "Main (2)" and that theyre all grouped together with no attention to their parent project. Things like the step button in my debugger being disabled to no explained reason, inspection giving me dumb ass errors etc also piss me off. Like wtf good is a debugger you can't watch vars in, step in and inspect in? It only happens sometimes and I admit that it is very rare... But it is absolutely frustrating to encounter. All that said, I still prefer it over idea. If is free, wholey open sourced and it is great to work with despite the odd learning curves presented by the ui.
I asked a couple of other friends to try it and the Nexus 4/5, One Plus One, and the Oppa are all struggling.
Reminds me of this: http://www.nicolasbize.com/blog/the-best-ide-in-the-world/
&gt; JSF is nowhere near dead. I never said JSF was dead. 
Do you have any statement by Oracle that states this? Most of their site seems to be JSP and it's such a heavily used technology that I wonder why they would make such an assertion?
Thymeleaf! If you use Spring, it has great Spring integration: http://www.thymeleaf.org/
I noticed NetBeans was a little bit behind as well. Perhaps it's an IDE thing.
You could use jenkins BUILD_NUMBER environment variable. It increases every time you run the job. 
it'll be painful for a few weeks, then you'll never look back. I'm not even sure if I could use eclipse these days. I'd rather use netbeans. 
you know they have intellij for mac, right? :) 
Dropwizard isn't a replacement for JSP though -- Freemarker, which Dropwizard uses, is.
From a guy with a stache like this? http://www.askadev.com/assets/biwek-00a61f95589cd4f0eafd83a3f1b9d58b.png I think not.
came here to upvote and say netbeans ftw. sorry it's late and too lazy to read a rant ;)
Thank you very much! I removed the link. The blog itself seems to be clean, so it's a pity, but I think it's better to be careful.
Eclipse certainly has flaws, huge flaws but I want to strike a blow for it. In my roaming other IDEs aren't capable of keep open &gt;70 maven modules without die (ye, I checked that other IDE last time time they release a major) even when huge refactors occours, also the workset paradigm is still unbeaten: one working set, one parent pom with children (NetBean is unable to keep multiple project group open). And to add one more I have very old plugin (did sometimes at Eclipse 3.4) that still working without a fuss, I doubt other IDEs API are so stable (probably NetBeans' are). That said, Eclipse project has problems.
The Main(24) problem happens only if you keep naming your main class Main.
As someone interested in automated build pipelines without any basic knowledge in that area, i would like to know why you were downvoted. Someone mind to explain?
Jenkins + Maven makes a hell of a lot more sense this day and age. Here is a good tutorial http://axelfontaine.com/blog/final-nail.html 
yes, hence I said Dropwizard "with its views" (Freemarker, Mustache)
that project is quickly going nowhere. it was all the rage for a while, but now is very quiet. 
I like this idea and may use it. Its a legacy system converted to Java (and a mess :( ) so we are not really doing sprints. Its more of a fix it as we go. So build numbers may work out great for this.
This was going to be my next question! I will be checking this out and I may have more questions. One thing I'm wondering is if its standard to create a build and then deploy that war to DEV and if it passes there, send it up to QA. If it fails it would be fixed, rebuilt and deployed to DEV if it passes deploy same war to QA. If it passes QA it would be deployed in PRD. At this point we have 3 branches one for each environment cause there are a ton of conifgs :(. So each time we want to deploy we merge the DEV branch with the QA branch and then do a build off of the QA branch. If it passes QA that same build is passes onto PRD.
You mean branches in your SCM system? Usually you would have a repository manager with different repositories for your artifacts during the different stages. 
Confirming that it's extremely laggy on a Galaxy SII Edit: The scrolling animation is even laggy on a desktop PC.
Can you be a teacher and student? I know some parts of Java but not others (eg EE)
I don't really see what the point is. &gt;"Stop wasting hours searching Stackoverflow ... Connect with an experienced developer for free.". Posting on stackoverflow is exactly what you claim to offer, a connection to experienced developers for free. Besides that, SOF does it better from what I can see, as your site does not offer any functionality at all unless I make an account.
So you would normally have different trunks per environment? Right now we have three trunks. DEV, QA. If something is approved and working in DEV then it is merged into the QA branch. If QA looks good then the war is moved up to PRD but and the war expands. Then after it is expanded the config files are dropped in and overwrite the existing ones (this way it has all the correct PRD directories and such). To me this is bad practice. I would think it would be a lot more proper to have one trunk. Tag it when you run a build. Then have the one war file and deploy it in DEV. If it passes DEV move the same war to QA. If it passes QA move it up to PRD. This way there is very little merging involved and a lot less room for error. I could be wrong just thinking out loud :)
Just to throw out some templating engines that haven't yet been mentioned: * [Velocity](http://velocity.apache.org/) * [MarkupTemplateEngine](http://beta.groovy-lang.org/docs/groovy-2.3.2/html/documentation/markup-template-engine.html) * [Twirl](https://github.com/playframework/twirl) 
Enterprise doesn't change the parts of Java you'd really need to teach like syntax and structure. Enterprise is basically a license to create commercial apps with some more stuff in the standard library.
yeah, that's what I wondered but didn't wanna bias the result ;-) Also ... maybe they're not lazy like other Open Source projects and are ... finished? No more work today, perfect framework, etc.
There are a few reasons, one of which is simply that many tools will expect your classes to conform to the Java Beans specification and attempt to manipulate your objects using the getter and setter functions. In addition, by making the fields private you ensure that all modifications to them will have to happen under your control. Your setter might perform validation or edit checks on the values being passed, whereas raw access to the field won't have that level of safety. You can't mark a field 'private write/public read' so that makes using a getter a necessity. Also, you may find that a few weeks down the road you've delegated responsibility for the values in those fields to some other object, so you change your getter code from this: String getName() { return name; } to String getName() { return getNameHelper().getName(); } and remove the name field altogether. If you are referring to it directly you will be a lot more reluctant to refactor in this way since you may have to change a couple of dozen other source modules.
In Perl, that'd be DBI. Again, *these are all examples*. I don't have any real-world use-cases outside of the ones from work right now, so I don't have anything I can share here on Reddit.
It breaks encapsulation. Having a public interface allows you to protect clients of the interface from having to undergo significant modification in the event that the implementation of the interface changes. EDIT: I realize this explanation may not be simple enough. Give me some time to think of a more straightforward answer or maybe someone else can offer a better explanation.
The error messages in Eclipse Link are much better than Hibernate. Hibernate just gives you an obscure error message. Eclipse link gives you detailed error messages and helps you solve you problem. If you are starting a new JPA project eclipse link is a better JPA provider. 
Try clicking under "View" and see if there is an option to view source code.
Check out this PDF from a Williams College Professor of Computer Science: [http://dept.cs.williams.edu/JavaStructures/Book_files/JavaStructures.pdf](http://dept.cs.williams.edu/JavaStructures/Book_files/JavaStructures.pdf) It quickly gets into why abstraction and encapsulation are important points for good software development.
Take this class class FriendSet { private Set&lt;String&gt; secretInternalFriends = new HashSet&lt;&gt;(); public void addFriend(String friend) { if(friend.equals("billy")) { throw new RuntimeException("BILLY CAN NEVER BE MY FRIEND"); } else { secretInternalSet.add(friend); } } public Set&lt;String&gt; getFriends() { return Collections.unmodifiableSet(secretInternalFriends); } } This class lets clients add friends, except for "billy." getFriends() returns an unmodifiable set, so that they don't go and add "billy" to the set behind the objects back. Now imagine if the secretInternalFriends field was public. A client could do this: FriendSet friends = new FriendSet(); friends.secretInternalFriends.add("billy"); No exception will be thrown. The client has defeated the entire purpose of the class. In general, that's one of the main advantages of Java over a dynamic language like JavaScript, Python, or Ruby. Those languages provide very little ability to prevent clients of objects from directly modifying or screwing up the internal state of the object. Clients should have no knowledge of the internal representation of data, or the structures or algorithms used. They only need to know the objects public interface. 
See my edit. 
So here's my basic example: public class Item { private String name; public String getName() { return name; } public void setName(String name) { Log.i("ITEM", "Name changed from outside of object."); this.name = name; } } In this example, a log event is fired when the name is changed. Since this is the only way to change the name from outside the class, it will always fire. Now, this is a trivial example, but it gets to the point where you can see that there's some sort of process that happens every time the field is set. You could similarly fire something every time it's accessed, for access control methods. The reason we design like this all the time, is because you never know when you're going to need to add one of those extra little processes. If you start out with a public field, people writing against your code are going to read and write the field directly, so if you change your mind later, you either break their code, or leave a hole in your program. Does that make sense? /u/RhoOfFeh makes a really good point about Beans, too, but that's a little bit further down the road from where you are now.
Almost all methods make assumptions about the state of their fields; for instance a field that contains the length of a string corresponds to the number of characters in the underlying array of chars. If it is public and not final another method could change this breaking the assumptions of the class. Public fields can also break encapsulation; with private fields their structure and implementation can be changed without breaking any code that accesses it through its API.
I highly recommend checking out [Project Lombok]( http://projectlombok.org) to get rid of all the crappy boilerplate code with getters and setters. Your objects can all conform to the beans spec without cluttering up your source
You couldn't have described this any more complex could you? :P What these lines mean is that you can put conditions on the getters and setters if you might need them. The main reason of course is to give the least amount of access to everything outside of your class.
Let me add what I consider a (huge) best practice: resist the urge to define getters and setters for ALL your private fields. I know most Java devs do it automatically, but you should strive to keep private state actually private. Acessors should be the exception, not the norm. As OP in a way noted, a private field with accessor methods is not encapsulation.
I don't see a mention of escape analysis. This is a newer jdk feature which tracks modifications and helps the VM manage multitasking and garbage collection. There are also other guides that claim private fields improves performance without escape analysis, but I'm having a hard time finding a term easily found out a source to cite.
Exposing all your internal (private) state through accessor methods is not true encapsulation.
You will hear a lot of nonsense reasons and really twisted examples, the truth of the matter is: it is idiomatic java. Idioms are really important to programming languages as they provide a shorthand for both reading and writing and expected norms. If you go off the reservation, prepare to spend more time talking about why you don't use getters and setters than solving the actual problem at hand. Even if all your getters and setters are dumb valueless wrappers, they are still what other Java developers expect to find and that has value. 
This doesnt answer the question of why it is appropriate to use getter setter exclusively regardless of functional requirements
 Arrays.asList("a b c\nd e f\ng h i".split("\n")).forEach(y -&gt; System.out.println(y.split(" ")[1])); There, using the forEach method of list, and using a lambda expression from java 8 to print the 2nd field of each item.
I don't hate Eclipse, but it annoys the hell out of me. That said, you get what you pay for and **for a free IDE** it's damn good, especially once you start to figure out what you can and can't safely do. Unfortunately, this mean being extremely selective about plug-ins because it isn't unusual to install a plugin that completely hoses all of your projects. It also means living with shitty code completion, mediocre refactoring tools and an ugly UI. I have 5 different versions of Eclipse that I run in parallel to do different things... it sucks balls, but again it's free and for 85% of the coding I do it provides a hell of an improvement over the other free options I've tested. I started with Eclipse because I was still figuring out my technology stack but I now have enough Java code that the $500 for IntelliJ is a no brainer and I plan on starting the transition in the next few months. What really gets me is people who pay thousands of dollars for IDEs built on top of Eclipse (Rational Application Developer, WTF???). 
Well apparently there are more solid tools like Apache JMeter. I'm pretty new in load testing.
I think your intuition is right in a sense. Getters/setters that map directly to fields don't really add all that much. That's why in many languages, such as objective c, or c#, you don't actually have to provide getter/setter implementations. The deeper reasons to make field private are: A) To isolate the internal representation of an object from the interfaces it exposes. A Date class may expose a method to set a date by some type of calendar, but it's internal representation may be in seconds from some established time. This is encapsulation. B) Setter/getters are not really meant to be used but for the simplest cases. You may have an object whose fields are interdependent, in which case setters would allow you to put the object in an inconsistent state for instance. In general, you want objects to do work and track it via their field values, rather than have code do work and represent state into a separate object. Then there's the whole principle of making certain types of object immutable, where you'd have no setters at all... I hope this helps.
Usually you have two types of classes: ones that are mostly structs and ones that do business logic. The former should usually have getters, the latter not. Especially for things like dependencies, god help you if you make a dependency publicly accessible and someone else grabs it and accidentally mucks with its settings
Except in the case of finals, even if they were public nobody could modify them, so you would be safe here either way
How so? If the fields are public, they can be modified. This is the very definition of public.
Isn't it basically useless to worry about the performance impact using constants or variables has at this level?
Not if you have many objects built this way, all with final instance variables.
Okay, I see what you mean now. You're saying you could remove the getter's in the above case. That makes sense in the context of the example as is. However, you'd be unable to do any additional work to the variables (ala rounding up/down to the closest integer at retrieval) if you did not provide the method accessors.
Reverse your question -- if you just allow direct access to the `name` field, and then later decide you DONT want it to just return `name` anymore, how do you change it without breaking code that was already written to use it directly? In this example you might decide instead of just returning `name` you want to return the user's entire name built from `firstName` and `lastName` fields. This would be impossible if you already had a bunch of clients just grabbing `name` directly. They say to do it all the time because you often wont realize/know what things you will want to change in the future. And keep in mind the JVM is getting better all the time and it will try to inline accessor calls in some cases -- so in fact you can often use an accessor and get all of their benefits, but get the same performance as a direct field access. 
&gt; mediocre Java developers This the true distinction of anyone that praises JSF.
Oracle has never said that JSPs are dead. &gt; JSP technology is considered to be a deprecated presentation technology for JavaServer Faces Not "in favor of" but "for". Meaning don't write JSF code in .jsp files, use .xhtml files now. No one has said to stop using JSPs for html, EL, and JSTL code. I still prefer JSP/Servlet over JSF for any server-side generated HTML. But more and more of us aren't using any Java HTML/UI solution. Instead use JAX-RS to create a RESTful web service(s) and then do all your UI in .html files with JavaScript. The more interesting question have become: "Do I use AngularJS, EmberJS, Backbone, Bootstrap, Foundation, plain jQuery, etc". The UI of Java applications is increasingly not programmed in Java. Edit: Anyone care to comment on why the downvotes? 
True, if you add some of the stuff discussed elsewhere (encapsulation, delegation) it becomes relevant again. But immutability is generally not a concern covered by making fields private. The points in your original post are correct, but more tangentially related to the originally posted question
All good, man. It's great to see that there are other open-source alternatives to JMeter. I only knew of JMeter and LoadRunner. Thanks!
Also a big part is that you can perform additional modifiers, such as synchronisation on fields. 