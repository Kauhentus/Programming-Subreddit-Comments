Many people have already mentioned the well known ones, so I will name others: Per4j &amp; AspectJ for performance testing Findbugs &amp; PMD for code quality Log4jdbc for logging all the database prepared statement commands
I hadn't checked out log4j2 in a really long time - you're right, it is looking quite impressive!
[SnakeYaml](https://code.google.com/p/snakeyaml/). Note: I contribute to SnakeYaml, so I'm definitely biased. SnakeYaml is a [de]serializer that can handle nearly any object graph with zero configuration, using a serialized format ([YAML](http://yaml.org/) ) that's easy for humans to read and edit. Also, lombok is incredible. That's probably the single best productivity-improvement I have ever encountered, and it's completely trivial to use.
Lombok makes some people nervous because it involves rewriting your code automatically, in the background, with no supervision. That said, it's so damn useful that I wish it was a standard part of Java. @Data, @AllArgsConstructor, @NoArgsConstructor are just amazing. Forget clogging up your code files with getX, setX, unimportant equals/hashcode implementations (which could contain very subtle bugs but aren't really important), etc. Forget changing your toString() every time you add or remove or rename a field. It's a little rough around the edges with regard to some inheritance things (for example, @AllArgsConstructor doesn't handle constructor chaining at the moment), but it's so, so good.
Scala ;)
People still write Swing? 
Mockito. 
http://jim-mcbeath.blogspot.fr/2008/12/scala-operator-cheat-sheet.html
EMF probably, but then you're straying into OSGi territory (which is a beautiful thing in itself).
interesting. the only clieint-side java app i actually use is [SQuirreL](http://squirrel-sql.sourceforge.net/) and it's clunky as hell. and i suppose eclipse is kinda sorta swing, no? but SWT doesn't really count, i don't think. what are some other swing apps i might have heard of (and may not even realize are swing)? i'm really surprised it's still in wide use.
Not sure why anyone would down vote this - Mockito is the the first dependency I add when starting a new project. 
My default set of libraries for any project are: **SLF4J** * slf4j-api * slf4j-log4j12 * jcl-over-slf4j * jul-to-slf4j **Unit testing** * JUnit * EasyMock **Validation** * javax.validation API * Hibernate-validator (For the actual final application, not the individual libraries) **Apache Commons** * Commons Lang3 * Commons Codec * Commons IO **Misc** * Joda Time I'm additionally a big fan of the Spring libraries for projects that this makes sense in, but that's not always suitable...
[Netty IO](http://netty.io/)
Nah, as long as you don't interpret "favorite" to be "best". There is no "best" library any more than there is a "best" tool in a tool box. I think, here, "favorite" is favorite like someone would say red is their favorite color. Not because they think everything should be red, but just because for some reason they particularly enjoy seeing it.
You meant to reply to a different thread.
yes :) oops, now i do not know, where it is.
We know what it is and we use it when appropriate. But in java code, it's often not appropriate/idiomatic. Heck, half the time I don't even use if statements, I replace them with polymorphism.
dude why the fuck are you so hostile and defensive.
It was a joke. Get over yourself.
Trove 
Reading your comments makes me wonder what I am doing with my life.
True, I only have my gomoku app hosted in the free-tier and the nature of the app is not requiring anything secured. The other limitation I listed in my review is the IP address binding.
I have read that Gson is not the fastest, but it is so easy to use and I don't want to think about building Json just using it as a Map which Gson does well.
Good post, I was looking forward to having a play with this framework. One of the devs for the framework was showing me some of the unit tests and the throughput is fantastic. 
Thanks for the tip! I hadn't seen OpenShift or DropWizard, and they both seem really useful. 
Start small. Be rational. You've started today, you're not going to be an amazing coder by tomorrow. It takes time and practise. Think of SMALL applications that you would like to build and then build them. Nothing too complex. Like for instance, a small app that takes a string and displays it backward etc. There are plenty of useful resources on the net. If you have some cash, look at Head First Java.
You might want to look into learning Java without using an IDE (Netbeans, Eclipse) and rather just using a plain text editor and compiling/running the program via command line. This way you'll learn a lot more when things go wrong, istead of the IDE just giving you a red squiggly line and fixing it for you. :) Just a tip, but remember, it's a matter of preference!
Practice what you learn, find a fun way to incorporate what you learn into new programs that seem fun to you.
I think we used Big Java in my intro to CS courses, you might check it out :) Otherwise check out the web, try making simple stuff to get used to how Java works. Like printing things to the console, using logic, if, while, do while. Then you can start learning how to create objects and writing methods to manipulate those objects however you would like!
absolutely. also, you should build a bridge using nothing but a screwdriver and some scotch tape.
If you're just learning for fun / personal enrichment, I'd suggest starting with a nice scripting language like Python or Ruby. They're less verbose than Java and you won't have to worry about build systems (or compilation at all, really). Plus, most of the skills you learn will transfer to Java should you decide to make the leap. Don't get me wrong, Java is a perfectly decent language with a large community around it. There are plenty of reasons to learn it. I just don't recommend it as a first language. If you have a good reason to learn it (android apps, maybe) then by all means, dive right in. 
you guys have inspired me, im going to start programming in braille and only use a srewdriver and some scotch tape.
okey dokey.
(Example is from C#) Do you guys really Google the method name every time you come across a deprecated method in order to find what it's been replaced with and why?
What exactly is missing? @Deprecated can include a description text which can include a link to what to use instead. Example from util.Date: /** * Allocates a &lt;code&gt;Date&lt;/code&gt; object and initializes it so that * it represents midnight, local time, at the beginning of the day * specified by the &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and * &lt;code&gt;date&lt;/code&gt; arguments. * * @param year the year minus 1900. * @param month the month between 0-11. * @param date the day of the month between 1-31. * @see java.util.Calendar * @deprecated As of JDK version 1.1, * replaced by &lt;code&gt;Calendar.set(year + 1900, month, date)&lt;/code&gt; * or &lt;code&gt;GregorianCalendar(year + 1900, month, date)&lt;/code&gt;. */ 
But it does? .. /** * @deprecated * explanation of why function was deprecated, if possible include what * should be used. */ public String doThing() { [Here is what it looks like in eclipse](http://i.imgur.com/J3Vk8Z3.png)
It's normally written in the JavaDocs as described by humbai.
javac 1.7.0_21, compiled with -g:none. Though it's broken either way, as you need at least one cast since the same value is being used as both an int and a char. By the way, I managed to crash your decompiler (prints a stacktrace with IllegalStateException instead of decompiling). Is there any good way for me to send you the files? 
It's a tie between Spring Framework and Google Guava. JSON and XML: Jackson. Templating: Thymeleaf or Scaml. Packaging JS libraries in Java apps: webjars.org. Logging: logback and slf4j. Testing: junit4 and Mockito. Reducing boilerplate: Lombok.
And, this time it looks like they're not trying to cash in by making the documentation buy-my-book only.
Perhaps there's some value in @Deprecated("Explanation...")? It reminds me of @Ignore("blah blah") in JUnit4. Although of all the things Java is missing, this is probably the least of anyone's concerns.
What OP pointed out is that the @Deprecated *annotation* is **not** self-documenting like its C# equivalent. However, like you illustrated, the @deprecated *javadoc tag* does the job.
What things missing in Java? Examples?
Depends on where you come from but here are some things I'd like to see. - Tail call elimination - Higher-order functions (lambdas are coming though) - Module system, i.e. (**not** e.g.) language level versioning of *packages* (or any other *code-unit*, as opposed to *deliverables/jars*). - A modular runtime (arguably more to do with the JVM or the libraries than the language). Basically, look at the roadmap for where Java is heading. It is pretty well aligned with what I'm personally missing. The language is far from "complete", just as every other language out there.
The destruction of generics by type erasure?
Non reified generics - Reason? real closures - Java 8 CSS handling - JavaFX (since Java 6) nokogiri style XML handling - JRuby 
Really, you need a reason for non-reified generics? Java8s closures are incomplete Javafx CSS handling, good point Jruby? Doable, 
Best way it to post an issue [here](https://bitbucket.org/mstrobel/com.strobel/issues?status=new&amp;status=open) and attach the relevant class files. Thanks!
One of the finest compliments I have ever received. Thank you!
OSGI there now - which I think will be the implementation. 
(On my phone) can someone give me a basic example of what your saying please? (I learn better being able to see it) Ive looked into jpanels but I dont know how (or understand) to incorpreate it within GUI and my code Thanks! Im new, thanks for the help however im still at a loss :)
&gt;Although of all the things Java is missing, this is probably the least of anyone's concerns. Hehe true... This was just the *frustration of the day*
It was ment as a short way of saying "this is how I want it, not an example of how it could be done" rather than trying to show skill. That's why I tried to emphazise that it isn't an example. For anyone who has followed the "OSGi vs. Jigsaw" debate (Jigsaw doing Maven-style dependencies), it isn't always obvious what a module is supposed to be. If it came off as pretentious, well, that would only show that I'm not very good at communication. My bad.
My apologies this time Orcale/Sun. It's pointed out that JavaDoc has it, and that Eclipse supports it. I was not aware of that - it's good enough for me. There seems to be [some kind of configuration problem](http://imgur.com/jy3hM2c) at my end this time which caused the frustration. Maybe I'm referencing JAR's without the docs... I don't know
That's odd, usually Eclipse automatically pulls the documentation from your JDK. What you see there is what was pulled from the compiled JAR. You may need to configure the JDK reference to point at the correct Javadocs/Sourcecode. Either that or Eclipse doesn't recognize which version of JDK you are using for no raison.
If you have errors or warnings on the syntax element, they will show instead of the javadoc.
You likely don't have the javadoc or src jar associated with the JDK you're using in Eclipse.
This belongs in /r/javahelp or /r/learnprogramming. 
Java always gets criticized for being overly verbose. What you are saying is here is that the developer should use two @Deprecated tags. This is silly IMHO. http://stackoverflow.com/a/5039758/724835
Well, it's clunky as hell probably because it's an open source app, probably mostly written by 1-2 developers. I'm sure you can think of some clunky C++ apps too. Limewire was/is swing.
TomEE ;) Contains *nearly* everything ;) Things I add are: * PrimeFaces - best component library for JSF out there * OmniFaces - best general JSF/Servlet utility library * Assortment of Apache commons libs, e.g. for one of the few working URL and email validators 
right you are! thanks.. did it in a hurry.
Head First Java would be my recommendation for anyone coming to Java. sincerely, Richard Nixon
Or Java 8: `list.filter(e -&gt; e != null)`
Passing negative mp or not having enough magicPoints are not programming errors, they are recoverable, IMHO. I assume you don't want your program to crash if someone has 0 mp, right? The useMagicPoints method does two things: it validates if magic points can be use and it uses magic points. It's OK to fail-fast (return) in useMagicPoints when mp are negative or there isn't enough magicPoints. If you need another method to validate if you have magicPoints then make one. I'm also not just talking about this specific useMagicPoints method. If you throw runtime exceptions throughout your code, you won't have the compiler's help to tell you if you coded all the cases and your code will eventually crash in production. If you use checked exceptions, your interfaces are going to be cluttered beyond reasonable use. You will have higher quality code if your methods are simple, do one thing, and do it well. If you find yourself throwing any kind of exception for simple input validation, you are making it too complicated.
Thank you, this works great! 
Use as many resources as possible. Pick up a book, start reading. Supplement your reading with internet tutorials and explanations. If you have trouble or feel stuck, go to Youtube and watch TheNewBoston's Java videos (they are amazing). Edit: Link to TheNewBoston videos: http://www.youtube.com/watch?v=Hl-zzrqQoSE
If you want to know more, visit [IRC channel #perl6 on freenode](http://webchat.freenode.net/?channels=perl6). It's busiest between about 10am and midnight UTC. If you're curious about ways to help out, checkout [the perl6 tag on questhub](http://questhub.io/perl/explore/latest/tag/perl6).
Thanks!:)
Haha thank you
Or a boolean. if (dotHasBeenPressed) { don't add dot to calculation } else { add dot to calculation }
I won't shoot you, but I can tell you that you that your logic shouldn't depend on exceptions.
One of the great things about programming ;)
*C for Dummies* wasn't a bad resource when I was learning as a kid, I think. I don't think I've opened it since middle school though, so I don't know how I'd rate it today. If I remember correctly, it's great for beginners, but it won't get you too far.
Please post questions like this on /r/learnjava. I know this subreddit's description says "Anything Java" but it is mostly used for (and should continue to be used for in my opinion) news and recommendations, not simple code questions. Also, I can see that you tried, but could you not ask for direct code contributions to your homework? That seems very unethical and like cheating.
whoa whoa whoa, Java 8? That's like, all kinds of insecure and shit. Let's just stick with Java 5, because we know it works. -- Every IT guy ever
You should have been there to tell that to Java class library creators. Parsing numbers (using parsing methods from standard wrapper classes) throws an exception and offers no other way to ensure the validity of the parsed string. Not that you didn't know this, but just wanted to point out, that this wouldn't be exactly Lukkiebe's mistake.
That's one thing to remember
In this particular case, performing an action when there is an exception is not such a good idea. The reason is because the display is under control of the calculator, so its validity should be guaranteed if the application logic is correct. If there is an exception, the calculator is doing something wrong (or the logic is organized badly). Depending on try/catch blocks is compensating for poor application logic elsewhere. If you are parsing numbers from a data feed, then malformed numbers are an error condition that is an *exception* to the normal logic flow, and should be *handled* to return the application back to the normal logic flow or kill the application. However, this approach has problems - if you throw frequent exceptions processing a feed, you can run into performance issues. Each time you throw an exception, the JVM has to construct a stack trace. It is better to validate the input first using regular expressions before parsing to prevent exceptions (which is fast) rather than depending on exceptions to catch format errors (which is slow). If you have the luxury of a clean data feed or aren't processing enough numbers to care, of course.
###Something I don't see often enough in Java: the lvalue &lt;&lt; intexpr pattern Here's an example of what I mean... this is a pattern I use all the time, but seems to blow minds: int sixteen = 4 &lt;&lt; 2; int eight = sixteen &gt;&gt; 1; int twelve = (4 &lt;&lt; 2) - 1; Of course I'm assuming that this is faster and that really matters, but then again I trust the people I work with, because they all know that the pattern lvalue += (2 &lt;&lt; multiplicand) + remainder; is your best friend in ANY language that traces its history to C. Since this hidden gem of the language is unknown to most *average* programmers, and not merely ignored for its relative pointlessness, I'll explain: It reads "You could just use "*=" instead". It's clear, concise, elegant, and easier to parse than a bunch of stars, which you might confuse for pointers! Java has those, right? Our code is riddled with these sorts of expressions, but it's pretty rare I see it in the wild, and even self-proclaimed "expert" programmers we hire are often thrown off by it at first. But it's a beautiful thing! Learn it, love it, use it! edit: I accidentally an example in C. It's still useful to know and use.
A JPanel is a container for components like labels, buttons or even more JPanels. You already use a container by calling the add() method of your JFrame. The JFrame just passes this call to a container called the content pane of the JFrame. JFrame has this method so that you do not need to call getContentPane().add() everytime. You can use JPanels to group components together. The JPanel has a layout and it contains some components like buttons and labels and arranges them according to the layout. The JPanel can also be treated as a component itself and added to other containers, e. g. your JFrame. To show you an example of this: JPanel header = new JPanel(new FlowLayout()); //create a new panel; use whatever layout you like header.add(new JLabel("Quiz")); //add a label to the panel; you can add as many as you want JPanel question = new JPanel(); //create a panel which contains the scrollable content question.add(new JLabel("&amp;amp;lt;insert question here&gt;")); JPanel footer = new JPanel(new GridLayout(1, 2)); footer.add(new JButton("scores")); setLayout(new BorderLayout()); //I'd suggest you use a borderlayout for your frame according to your sketch... add(header, BorderLayout.NORTH); //add the header at the top; google "how to use borderlayout" if you want to know more about how it works and why I specified BorderLayout.NORTH if you don't know already add(new JScrollPane(question), BorderLayout.CENTER); //this line is explained below add(footer, BorderLayout.SOUTH); Now I will explain how scrolling works. If you havea rather large component like a big image or a JPanel containing lots of other components, you can add it to a JScrollPane and add the scroll pane to the gui instead of the component. So by using add(new JScrollPane(question), BorderLayout.CENTER); instead of add(question, BorderLayout.CENTER); the question panel is now included in a JScrollPane, which will display the scroll bars if the component is too large for the area available and it will handle all of the scrolling for you. It's that simple.
&gt; In this particular case, performing an action when there is an exception is not such a good idea. Sure. I assumed "perform action" meant performing some sort of error handling. That would have also meant that try/catch is not placed randomly, but to address actual expected error scenario. Number parsing operations are done is such various contexts, that judging whether an invalid input is an exceptional case or part of normal logic is generally not possible. Even in this particular case of input from calculator UI, I could see both approaches suitable. Of course, as the standard parsing API pretty much dictates the approach, controlling validation flow with exceptions is the natural choice (regexp parsing or such is too much trouble in many cases, even if it would be more correct). My point is, this was not a good decision from standard library creators. I'd like, in certain situations, be able to simply ask whether given string parses as a number to safely ignore NumberFormatExceptions and use normal control structures for validation logic.
That's a nice one-liner and all, but unless you're just dealing with crappy data from a third party or something, I'd question why you have null elements in your Collection in the first place.
&gt; For example, if you're defining a double with 2 '.'s, you can try to catch &gt; a numberFormatException and give an error when it happens. Don't do this. The calculator controls the display, so you don't need to catch a NumberFormatException. Just forbid entry of a second '.', of which there are examples throughout this thread. That's much better for the application logic. &gt; Number parsing operations are done is such various contexts That's why `Double.parseDouble`, a general function, should throw an exception if it can't parse. But that doesn't mean the application, which does know the context, should depend on that behavior. &gt; regexp parsing or such is too much trouble in many cases, even if it &gt; would be more correct Not just more correct, much faster. You have to determine the context for what is appropriate. In this context, you don't even need a regexp. The display value should *always* be parseable if the application logic is not a complete mess. As others have noted, it is easy to keep a flag that the decimal point has already been entered and *just forbid entry of another one*. &gt; be able to simply ask whether given string parses as a number That's not easy, *in general*, especially for real numbers, which can be represented as integers, real numbers or in exponentional notation, and the String representation can also overflow or underflow the `double` type. You'd have to parse it to determine if the String can actually parse into a `double`, in which case, why not just parse it and catch the `NumberFormatException` if it's not possible? In specific contexts, it is possible to know what the format should be and the range, and you can check that yourself before calling the `Double.parseDouble`. That's the better approach, if it is possible for the context.
wat
&gt; fear of using drugs that actually changes your mental states chemically to be more productive Which drugs are you talking about? Some amphetamines? I would think developers trends towards caffeine over those others more because of their legal status or the ease of obtaining them rather than perceived side effect. I suppose if there was an legal, easily accessible, proven, performance-enhancing drug with as minimal risk as caffeine yet better then I suppose it's use would be widespred among IT and beyond. 
This is just plain wrong. I'm not afraid to party in Canada.
I don't think that subreddit is very active. Try /r/javahelp instead.
Yes, exactly. Maven is fundamentally good, but needs improvement.
Mostly you are just showing a lack of ignorance about the mechanism by which these drugs work in the brain and body (that is ok, I imagine most people don't know the specifics). Outside of the fact that IT is generally consider professional in the U.S. and there are serious social constraints to consider if you are going to opt for illicit drugs over coffee, there are also reasons those drugs may not be suitable for helping you program over the long haul. Caffeine is thought to work by limiting the amount of adenosine in the brain. This chemical actually is always floating around and REDUCES brain activity. This is a natural protection the human body offers. So, a cup of coffee is thought to reduce this allowing you to feel more awake, alert, and productive. This process would also lead to an increase of things like norepineprhine and adrenaline (as far as I understand the process) which would also make you feel more "pumped up". We have all probably drank a little too much caffeine and felt jittery. This is because at high levels of caffeine GABA is lowered which causes anxiety and other bad side effects. However, these other little chemicals will soon come back (and I happen to have a little herbal supplement I've found that will stop this issue in 20 minutes and put you back at baseline because I drink so much fricken coffee. This can work because all it takes is a little bit of nourishment in your CNS to get things back to baseline). This is why caffeine isn't a very destructive drug. It limits something that is there to hold your neural activity down. It doesn't attempt to amplify, or reuse important neurotransmitters.... Now, lets take an illicit drug like cocaine. Your brain has these things called neurotransmitters that are like little messengers in your brain. They move back and forth between neurotransmitter receivers and this movement between them (the gap between them is called a synapse) causes different processes to occur depending on the type of neurotransmitter. One of them that is related to energy, pleasure, etc is dopamine. What cocaine does is force the neurotransmitter dopamine to stay in that gap. Drugs can't really force you to make more dopamine they can just a) stop the neurotransmitter from being broken down so it can be reused or b) get it stuck in the gap between the receivers so it is constantly sending the message it carries. This causes the dopamine overload to make you feel really awake, talkative, and good (some other neurotransmitters are most likely involved but I am trying to simplify). However, eventually, those get used up. This "blocking" process depletes the level of dopamine drasitcally. For this reason, people say the cocaine "high" gets worse over a night of use. The first high is the best because there is the highest amount of it to exploit and keep in the synapse. As the night wears on, there is very little there. This isn't conducive to programming whatsoever. You also feel so drained once you run out or realize it's not doing anything and it takes days to replenish the dopamine. So, the elicit stimulants rarely make you more productive over the long run. Coffee is more stable. The reason stimulants are tied to programming is hacking away at something all night. Coffee will work for this for much longer and with much more stable results for all of the reasons above. Generally, illicit stimulants just make you FEEL like you are capable of more than you are and that you are being more productive but you are really just scrubbing the same spot over and over on your floor not getting it done sooner. tl;dr Coffee limits chemicals in the brain that lower neural activity. Illicit drugs exploit and deplete natural chemicals in the brain that make you alert. Thus caffeine is much more stable for work that is long and difficult mentally.
There are some notable(some crazy) mathematicians who were functioning alcoholics. I know plenty of bright minds from the current generation of college students are avid marijuana users and blow non using peers out of the water with grades and ability to grasp complex thought. Edit: I don't want to encourage the use especially if you are already doing great in life. But I don't think there should be a stigma relating to recreational drug use and ability to program or any other high skilled work-- it's all something society is currently taking another look at as we slowly realize that this spectrum is almost entirely grey.
He said "when", not that canadians are afraid of party. Also, that was a joke about himself that mr. Townsend made about he becaming clean. edit: added more info
I meant any psychostimulant. And I also meant that they're generally afraid of using it, even when there is what they're actually pursuiting by consuming caffeine. Let's say that other influential cultural movements (generaly art-involved, like music, acting or writing) have no fear on doing drugs, even when illegal (what never stopped anyone, btw, and moreover, you never see any large migration of artists to prison because drug usage, what can imply that authorities don't care).
That was insightful, thanks. My point was, the community want a kind of punch that coffee gives you like a little girl and a drug of choice can give this same punch like Mike Tyson when he got the champion's belt. Care to give insights about medical amphetamines like Ritalin?
Batshit
Well right off the bat, you are initializing a class called Sales and calling a inexistent method countRanges(). However, based on the code that you have provided, countRanges() is a method contained in the class Ex6_10. If you make it static (add the static keyword to the method), you can just call it directly inside the main method, without initializing any classes. Or you can instantiate Ex6_10 class and call the countRanges() method.
Thanks
They all work in the same manner essentially. Ritalin, Adderall and meth work on other neurotransmitters and then have less euphoria than cocaine. I mean, college students have proven that using Ritalin or Adderall can certainly allow you to focus for long periods of time but I can personally attest to the fact that it isn't a long term solution. I also know some people that have tried to force it into the role of a long term solution and that is when it becomes an addiction. Caffeine to some level is also addictive but nowhere near the level of pharma or illicit stimulants. Also, I can personally attest to the fact that you think you are more snappy but your brain isn't functioning as normal and while you may be more alert you aren't actually any brighter. The process causing you to feel more alert is taking away from other places and you are actually losing cognitive ability.
Try posting in /r/javagamedev or /r/gamedev (which is more active). You'll get more responses there since the concentration is in game development (obviously). 
This. Also try [libgdx](http://libgdx.badlogicgames.com/), it is pretty simple for 2d game design, but I have not tried 3d yet.
Developing Games in java http://www.brackeen.com/javagamebook/ It's a little dated, but my first game engine was based on what is in this book. Everything you need to build a minecraft like game is in this book. 
http://stackoverflow.com/questions/3990467/java-3d-game-engine There's some frameworks.. Here's some other stuff. http://www.youtube.com/watch?v=BlhJY_gps0s http://env3d.org/beta/ http://www.java-gaming.org/index.php?action=resources
Don't know about programmers but a lot of traders use stuff when markets are crazy to hyper-focus. Seems to work for them as far as I know (in before some idiot "counters" with "but they destroyed the economy hurr durr"). 
Hi Thank you for this help However I can't seem to get it to scroll..I know im doing something wrong through i've tried adding more lables to the jpanel question, also images but it doesn't seem to do anything (no scroll bars) im missing something can you help me with what?
I am not terribly familiar with JTree, but looking at [How to use trees](http://docs.oracle.com/javase/tutorial/uiswing/components/tree.html) in the Java Tutorial it might work if you override [DefaultMutableTreeNode](http://docs.oracle.com/javase/7/docs/api/javax/swing/tree/DefaultMutableTreeNode.html) and have it take a reference to the parent node. That way, when a node decides it is invalid you can easily get the parent node and change its icon accordingly.
 System.out.println(Integer.toBinaryString(Integer.MAX_VALUE) + " " + Integer.MAX_VALUE); System.out.println(Integer.toBinaryString(Integer.MAX_VALUE+Integer.MAX_VALUE) + " " + (Integer.MAX_VALUE+Integer.MAX_VALUE)); System.out.println(Integer.toBinaryString(-1) + " " + (-1)); System.out.println(Integer.toBinaryString(15) + " " + (15)); System.out.println(Integer.toBinaryString(30) + " " + (30)); 1111111111111111111111111111111 2147483647 11111111111111111111111111111110 -2 11111111111111111111111111111111 -1 1111 15 11110 30 Pretty self-explanatory.
OP might not be aware of [two's compliment notation](https://en.wikipedia.org/wiki/Two%27s_complement) i.e. why 11111111 = -1
First off Integer.MIN_VALUE is -(2^31) and not 2^31 Integer.MAX_VALUE = 2^31 -1 = 2147483647. If we do the addition in binary we get: 1111111111111111111111111111111 +1111111111111111111111111111111 11111111111111111111111111111110 Which is -2 in decimal. As far as I remember the 32nd bit being 1 indicates that the number is negative. The binary representation of 2^31 - 1 takes 31 bits, the 32nd bit being 0. The operation of MAX_VALUE + MAX_VALUE overflows and makes the 32nd bit 1. To look at it another way.... Integer.MAX_VALUE + 1 = Integer.MIN_VALUE so Integer.MAX_VALUE + Integer.MAX_VALUE + 1 = Integer.MIN_VALUE + Integer.MAX_VALUE which implies Integer.MAX_VALUE + Integer.MAX_VALUE = Integer.MIN_VALUE + Integer.MAX_VALUE - 1 = -(2^31) + (2^31 -1) -1 = -(2^31) + (2^31) -1 -1 = -2 
Sounds like "Knighthood" to me. ;)
The TheChernoProject channel on Youtube is pretty good. https://www.youtube.com/watch?v=iH1xpfOBN6M&amp;list=PL656DADE0DA25ADBB https://www.youtube.com/watch?v=GFYT7Lqt1h8&amp;list=PLlrATfBNZ98eOOCk2fOFg7Qg5yoQfFAdf 
An interesting post and blog, subscribed. Will probably use JMH at some point.
About time.
thanks. already did it. :) thanks alot
After I read your question I started looking around and decided to try out JMonkeyEngine. Out of curiosity I installed the SDK, started their IDE and created new game project. Then I compiled and ran the default program. No problems there. Then I added a sphere, still no problems. Now I must say that I have spent a good couple of hours going through their tutorials and the SDK and creating my own landscape. By now I have a controllable first person view player, solid terrain, skybox, moving water and more on the screen. I never thought that creating a 3D environment could be so easy. The tutorials are well done and enjoyable to read with lots of comments. Also the javadoc documentation covers for everything that's left unsaid in the comments. Just wanted to share since I was positively surprised. This is an easy way to get started and gain basic understanding about 3D games and their building blocks. 
the Scanner class is throwing exceptions... just catch them. Well, you should read some Java tutorials http://docs.oracle.com/javase/tutorial/
I think this is the final push I needed to start developing for android. 
Minecraft was developed with LWJGL - it is using **OpenGL** directly.
Is English your third or fourth language, or are you really high?
Restlet has a JAX-RS module, if you use it in the standard way and don't like Restlet you can fairly easily swap it out for another JAX-RS implementation.
Have I hadn't made sense? Need some more help? When I told I was under influence of anything?
I noticed, I just didn't do what you did for the sake of the discussion. His post was so insightful, why do that, you know?
Hi Mondo, Thanks for reminding me about 2's complement. It has been a long time since I do manual signed binary calculation. Life as a programmer nowadays is a bit boring cos everything is ready-made and you didn't fiddle with this kind of thing anymore.
Thank you, never know that Integer has toBinaryString method :) Your answer is crystal clear.
Hmm, I just realize that /r/java sidebar has http://www.reddit.com/r/javahelp which I suppose to use for this kind of question... Sorry guys.
Thanks, and you definitely should, great tool.
Yess! who needs to be eclipsed when we have IDEA's
https://github.com/trygvis/intellij-idea-dpkg
"Code Complete" has good guidance on these kind of things
My friends and I created a Minecraft-like game with Java. We used [JMonkeyEngine](http://jmonkeyengine.com/), and learned it from the [documentation and tutorials](http://jmonkeyengine.org/wiki/doku.php) on the website.
https://github.com/jordansissel/fpm
Meanwhile, mad wikipedia mods deleted JetBrains article http://en.wikipedia.org/wiki/Wikipedia:Articles_for_deletion/JetBrains
Your while condition is wrong. do { … } while (selection &lt;= 3); will only repeat the loop if your selection is &lt;= 3. If you enter 5, it isn’t &lt;= 3, ergo: the loop exits.
JavaFX 8.
Oh, on you go, write a Linked List. You know you want to! In seriousness it's easy to forget, java lacks unsigned numbers entirely AFAIK so you are shielded from having to think about it.
Great IDE, used it for 7+ years now, love it. Might have to produce an android app or two now!
Right then. List&lt;Foo&gt; newList = list.stream() .filter(e -&gt; e != null) .collect(Collectors.toList) See [`Stream&lt;T&gt;`](http://download.java.net/jdk8/docs/api/java/util/stream/Stream.html) and [`Collector&lt;T,R&gt;`](http://download.java.net/jdk8/docs/api/java/util/stream/Collector.html).
Can you be more descriptive? I've used both Eclipse and IntelliJ and find the limitations to be similar, but IntelliJ was just better designed and easier to use. And even before the community edition, $500 is nothing compared to other costs of software dev. 
&gt;how long can you sustain standing under a stack of said marshalls Well, there is a knob. I can turn it down enough to below the treshold of pain to keep going. You know, that [dent](http://media.npr.org/assets/blogs/health/images/2009/08/pill_sq-e21f5d571b71ab7687ff97e47996620083a9c1e3-s6-c10.jpg) in pills are there so you can split it in half. &gt;[put craft here] is like a drug Everyone that ever said that never done drugs and is trying to look more hip than he really are. Maybe because they confuse dedication with addiction. Also, being afraid to be hip is the point, too. This can be illustrated with Devin Townsend, again; his story is pretty much migrating from geeky to hip and back to geeky through his career. &gt;Coffee is just something like a habit I had this habit too, when I found out that was pretty much some fixation on drinking something. I can exchange coffee for some cold fruit juice (Brazil is hot, so cool is better than hot), any herbal tea or a carbonated drink like guarana or coke or some homemade ginger ale (that sucked a little because of the complete unavailability of yeast that aren't for bread). I'd rather have less caffeine in my system.
Sure I can. Our project is written in Scala, I run the debugger, try to evaluate something like classOf[MyClass] it won't work because IntelliJ doesn't support it. It does work in Java but that's not important here, cause we don't use Java. Also, refactoring doesn't work really well in Scala, if I move a class from one package to another then something will break. Perhaps the imports will not be done properly. Or sometimes I rename a class, but only the file name will be renamed, not the file itself. Try Refactor &gt; Rename and see for yourself. Our classpath is really long, over 50 KB of text. Too long for IntelliJ in any case. It asks whether you want to use something called a dynamic classpath. I press yes, the project still won't work. How do I turn back from the dynamic classpath thing? There's no way to do it in the GUI. You have to exit IntelliJ and edit the workspace.xml in notepad to disable it. Fascinating GUI design. Like how in the Settings dialog you have the options for Scala scattered at 3 different places. And in v12 you can't even edit the compiler options until you disable the external build, which itself is hidden who knows where. The settings are project specific. Let's say I type in the username and password for my VCS, and then I open another project. The username and password won't be there for the other project. Same goes for other tiny settings like showing line numbers or configuring ctrl+Z. Btw. what kind of retarded mind would not use ctrl+Y for Redo like the rest of the world, and instead have ctrl+shift+Z for it? Yes you can reconfigure it but it's project specific and might get lost the next time you open another project. Same goes for ctrl+W which is the universal key for closing a tab, universal everywhere but IntelliJ. I open a third-party class and see a notification saying I should attach the source. I do that. Unfortunately the source location is stored on a project level, so if you open the same file in a different project, IntelliJ will un-intelligently ask you again to specify the source. And I haven't even talked about how slow it is. It is *very* slow. 5 minutes to start, 30 minutes to resolve the dependencies, 30 minutes to build, the build fails cause the Scala compiler sucks, build again, after an hour it's finally built, IntelliJ takes 2 GB of RAM for running a program of 10K lines, while at the same time running the same program stand-alone takes 18 MB. What does IntelliJ do with the remaining 2030 MBs? It's not debugging since I'm not running in debug mode... ___ Again, I wouldn't care about this at all if this was Eclipse or Netbeans or Notepad, because those are for free. And you know what to expect. This piece of shit costs $500 per year and I expect an equally good service and equally good support! 
In Jetbrains' defense though, Scala support is still quite recent and is offered via a plugin if I recall correctly. You'll find that if you develop in Java, the difference between Eclipse and IntelliJ is enormous, especially if you develop enterprise apps and use Spring, Hibernate, ... Your arguments sound quite valid, but I've fiddled around with Scala too and found that IntelliJ currently offers the best environment to develop in Scala. I agree the price is a bit high, but that 500$ per year you pay is not just Scala. IntelliJ supports a *load* of things and Scala just happens to be one of them. I understand slow and buggy IDE's can be very frustrating - trust me, I'm a developer too - but I would never call IntelliJ a piece of shit. 
Try using new JScrollPane(questions, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS) Also, is the panel larger than the area it's supposed to fit in? If it isn't larger, the JScrollPane will not display scroll bars, because they aren't needed.
&gt; The settings are project specific. Let's say I type in the username and password for my VCS, and then I open another project. The username and password won't be there for the other project. Uhm, not in my IntelliJ? Which version are you using?
personal license is only $200
IDEA is the best IDE I've ever used. I can't say enough good things about it. 1. It's cheap! $99 for the personal edition last I checked 2. The company is great (I bought it for $99 and it went on sale for like 50% off a few weeks later. They refunded me the difference no questions asked) 3. I've found bugs in the IDE that I've reported to their bug tracker. All of them have been fixed in the next release since I reported it.
Yeah that's the same sale I was thinking off. I knew it was cheap, couldn't recall if it was $199 or $99. It's well worth $200 :o
agreed! I love it personally.
Slick already uses lwjgl underneath, so you have the access to OpenGL, do it yourself. Or switch to LibGDX, they are making some 3D API (it's in the nightlies) that could be helpful for you
Thank you. Based on all of the replies here, I'm very excited to get started after I finish the release version of my current app.
How is it for NDK development? Is support for NDK integrated into the workflow?
JARs are actually just fancy ZIP files with internal metadata that tells the JVM where to look for certain things (entry point) and a defined and standardized structure. So, with that said, you can put those static resource files into the JAR itself. Things like MIDI files, static images, those can all easily be placed into the JAR and referenced from code as so: Class clazz = this.getClass(); InputStream is = clazz.getResourceAsStream("myimage.jpeg"); It gets slightly more complicated to control the relative path, so generally a class should reference only static resources that are in the same package (folder) as the class. Now, if you have more dynamic resources (say, another JAR), that is not easily included within a JAR. JARs containing other JARs are known as uber-jars. To load the code from an uber-jar you need a classloader that is aware of such a scenario, which the default classloader is not.
&gt;Running from the command line gives me an exception in main thread (NullPointerException) as well the StandardMidiFileReader (I guess because it can't find the midi files) Most likely. You need to have your midi files next to your jar file in what ever folder they belong. This depends on how you reference the files from java too, depending on whether its absolute, relative, etc. Also, the jar file needs references to any external jar you will use as well, which usually your IDE can do when you build the jar or you can manually add it to the manifest.mf file in the jar. Not exactly what you need but maybe this helps a bit, my game project structure: http://www.reddit.com/r/gamedev/comments/1a4p2p/releasing_a_java_game_on_multiple_platforms/c8ufyp6
I opened my jar file in 7zip and it shows the music and images already in there. Instead of the code you gave, I use the following: Toolkit.getDefaultToolkit().getImage(super.getClass().getResource("\\images\\health.png")); MidiSystem.getSequence(super.getClass().getResourceAsStream("\\music\\music.mid"))); I don't have any other dependencies like JARs, only the images and music. I'm also not sure if its getting the other classes, but I'll worry about that after I get this working. 
If you understand production rules: Expression -&gt; Expression + Term Expression -&gt; Expression - Term Expression -&gt; Term Term -&gt; Term * Factor Term -&gt; Term / Factor Term -&gt; Factor Factor -&gt; ( Expression ) Factor -&gt; Integer Expression, Term, and Factor should be methods that determine whether the input being passed in fits the given descriptions. For example, for the expression method you should check each + and - in the string to see whether everything before the operator is an expression and that everything after is a Term. Failing that the entire string may be a term. Same deal for Term and finally Factor. It won't be particularly efficient, but it will be correct.
Paste the exact stack trace/exception here please. Odds are very high that you aren't correctly referencing the relative directories.
rats 
It looks like they do 50% off every few months. I may try it again. I'm just sad there isn't a Perl plugin for it. 
I always like to note that the personal license (normal price $200 or €180) can be used for commercial development. "Personal" in this context only means you have to be a human person to buy the license. Once you have it (look for sales!) upgrading is only €90 or $100.
I don't know if this is helpful, but I downloaded the preview for the new [Android Studio](http://developer.android.com/sdk/installing/studio.html#side-nav) by Google and the code it generates gives you great starting points for new apps. Of course it also helps with a lot of the annoying little things you need to keep track of. I'd recommend taking a look at Android Studio and searching the web when you want to know more about anything specific.
[Don't you mean **un**certain UI?](http://www.hiyoooo.com/)
If OpenGL is already part of Slick it will be simple (reltively) to write an extra class. Cheers
I think the developer android website is a great starting point : http://developer.android.com/training/basics/firstapp/index.html 
&gt; I'm not even sure what we're paying for, they don't give us any support, their customer service doesn't speak English, bugs are carried over for years. That is the exact opposite of every interaction I have had with them. Every time their customer support has replied within hours, and the resulting bug reports have been fixed within the next few point releases (within a month). Their support is amazing compared to every other company I've dealt with.
You'll have to point me to one such bug before I believe it. The bug I reported was in January, they denied it's a bug, after we reproduced it with a test case they finally admitted it and assigned somewhere, that was in March, it's still not fixed yet.
Go to YouTrack and/or look through release notes for their point releases.
Actually bmp is an uncompressed image format. You can use a compressed one like png or jpg and then setting values to 0 should result in smaller file sizes...
You don't need production rules to deal parse a simple grammar like this. The string can easily be "lexed" using the `Scanner` to tokenize the string and regular expressions to identify tokens (`[+-]?(?:[0-9]+\.)?[0-9]+` for operands, and `[+-*/]` for operators), and the tokens can be evaluated as they are generated. Evaluation is the hard part to get correct, which has to take into account order of operations. This can be done using recursion or explicit operator/operand stacks.
Ok that makes sense. I could use the dictionary of the png and the jpg format to take advantage of the values that have been set to 0. I'm going to do some experiments now! Thanks! Edit: I've done some experiments and I with setting values to 0 and saving as a jpg and the file size remains the same no matter how many values I set to 0! I told my program to set all the columns that were less than 90% of the highest norm to 0 and I still got the same file size as if I didn't set any values to 0!
Having programmed almost full-time in Scala for the last year, I would definitely recommend it for any general programming. When it comes to numerical processing, you definitely want to check out a library for this, Spire: https://github.com/non/spire This tries to offer generic algorithms across different datatypes, while allowing the implementation to be optimized for the datatype used at runtime (e.g. use of raw doubles at JVM bytecode level, but you write your code to deal with a Numeric abstraction). While I have only tested it briefly, the design looks excellent, as do the benchmarks. However, is this an Android application? Compiling for Android isn't generally smooth. People often seem to use https://github.com/jberkel/android-plugin to manage the build, have a look at the mailing list to see the kinds of problems people can have. But IMHO, having to do a bit of work to get your build environment working is a bit of a pain, but the benefits of Scala far outweigh such issues for me (when compared with Java).
This is great news. Sorry Eclipse, you are no longer the only girl at this dance. 
I'd vote that this is fine here. Good bit of in-depth trivia.
Great post. I have previously used calliper but threre is a couple of blemishes. This looks really nice and will be sure to check it out when I next need to test something. 
Java Tutorials' website is so ugly.
I have the midis and images working. I had to put them in ~~the same folder as the jar~~ the source folder and change the Strings to just the file name. However, I also have one .wav file and that's not working. I can't access my game until Tuesday so I'll try to figure it out by myself. Thanks for the help. 
I got everything working. For anyone with the same problem as me, this is what I did. All of my images, midis, and .wav files are in the src folder. When adding them, I used: Toolkit.getDefaultToolkit().getImage(super.getClass().getResource("image.jpg")); for images, MidiSystem.getSequence(super.getClass().getResourceAsStream("music.mid"))); for midis and URL url = this.getClass().getResource("music.wav"); for the wav files. I figured out that you can't use File for playing .wav because it can't find the file specified, but URL works and I think AudioInputStream will also work. 
Really, I cannot tell wtf the fuck is going on.
Post questions like these in /r/learnprogramming or /r/learnjava.
buen blog de programación sin duda.
I'm so mad I missed that sale! I would love to buy a copy, but I need it to go on sale again...
*fingers crossed for sale*
give a try to http://www.vogella.com/android.html, personally I didn't use vogella android tutorials but I use his other tutorials a lot
There should be the "back to school" later in August. 
I find maven a disaster to get newer developers up to speed on. I had to write a lengthy guide on how to use it. 
Certification from oracle. 
I think the biggest thing new graduates or newbies coming into the field is Project management. Take a course or two, in managing teams and actually be vocal about what you can and can't do. I can't tell you how many of my friends were let go because they couldn't work properly on large projects.
Useless
Studying for it is only 1/2 useless or 1/2 useful - depending on your perspective. The certification itself is useless.
Just write code. Write some more. Have other people look at it and tell you it sucks (because it does). Listen, iterate, do more coding. Eventually you'll realize that they were right, but then you'll start realizing some things and why other things happen they way they do. When that happens, you'll think - gee, that's awesome. Then you'll learn some more. It's a fun career, GL.
what did the guide cover?
Maven is a disaster... you could have just stopped there.
There's no shortcut around writing code and lots of it. Write code and write lots of it. Read code and read lots of it. Take an existing framework (Spring, Guice, web framework, etc) and figure out how it works. Write your own framework. In the end, there's no shortcut around writing code to learn.
As someone who is beginning java this is very cool. I am gonna fork it and mess around with it :p.
I know this probably sounds pretty petty or pointless to say, but white starts first. Always. Looks cool though.
Had a quick squiz at the source code and one think I picked up on was that you document the parameters with the Javadoc @param tag, but you're not using @return to document the return value.
Writing good code means understanding what other people see, when they are looking at your code. Try to hone your ability to put yourself in others' shoes.
Does it have AI?
What I've learnt is to be intellectually curious about everything you do in your job. You'll pick up much more that way and you can be an excellent developer for what you develop day in day out. Chances are, you will be asked a lot on how specific things work in your system, so being curious about these things helps you understand the system at a lower level. I'd also take the time to really improve the business decisions you will make on the job, such as "This fix requires a library update of our dependencies... will this adversely affect our release time-frame?" and consider the aspects of the project that will be effected from it. That is the biggest thing I've learnt ever since getting my job. If you're never sure on a piece of functionality that you're required to write, but already exists in the system or sister systems that you own/sell as a company. Check that code out from your repository and check out how they did it. You'll pick up a few neat things from it.
If you want to improve your game you should use bitboards instead of the 2d array for the board representation. The calculation is much faster with bitboards. Especially if you want to write an AI later. 
cool. I hadn't heard of them before.
This is very nicely done! It is awesome! What type of course is it for? 1st year in college? Here are a few other comments of things that may be tweaked: 1. In combination with this line, `win.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);` I also add `win.setLocationRelativeTo(null);` which centers the frame on the screen 2. Immediately before `win.setVisible(true);` one should always do a validate() or pack(). `win.validate()` (See: http://mindprod.com/jgloss/validate.html) 3. I haven't used "setBounds" much. Does it imply that you are not using a layout manager? If so, do you need to set the layout manager to null? 4. You valid move checker is intense. I want to read over it again. What does "check_stoof" stand for? 5. This sort of thing `black_player[6] = new Piece((ImgLoader.TILE_SIZE * 3), 434, ...` makes it hard to reuse the code for any other board game or modifications. It's good that you're using a constant "TILE_SIZE", but 434 pixels is hard coded and it would be a real mess if you wanted to change the size of the board -- e.g. someone resizes it. I always try to use constants for any board size related thing. I guess resizing it would make your images look crappy though since they are a certain dimension. 4. I'm curious about this `public Piece.COLORS turn_color = Piece.COLORS.BLACK; // keep track of whose turn it is` I'm not sure why you did it this way. Would it have been just the same if you said `public Color turn = COLOR.BLACK` ? I normally do something like this: `final static boolean BLACK = true; final static boolean WHITE = false; public boolean turn = BLACK;` Then to switch turns, `turn = !turn` and to check: `if (turn==BLACK) ` Maybe I'd do better to call it playerTurn. 
Here's a Java chess engine I wrote a few years back called October. The AI is generalized enough that it can also play chess variants if the additional rules are implemented. Right now it has the rules for regular chess and gothic chess. There's also an experimental branch that can run the AI on multiple computers, hopefully making it faster. * https://github.com/skeeto/october-chess-engine To try it: [applet version and downloads](http://nullprogram.com/october-chess-engine/) 
After struggling with SimpleDateFormat all day I finally stumbled upon Joda this afternoon, great library.
Lol. You must have drank too much java on this day. 
Can you just start over? Uninstall everything, re-download it, and then reinstall?
I think most new programmers have a project that looks like OneBigClass.java
Yes indeed that fixed it. Thanks.
I think this guy is missing the point of what Wicket is about. All the disadvantages a JSF guy sees with Wicket, are actually advantages from a Wicket perspective. For example, an advantage of the JSF Facelet definition is to reduce the amount of plumbing code through EL expressions which allow binding of handlers to methods on managed beans through XML attributes. To a Wicket guy, this is a huge *disadvantage* of JSF. Wicket templates only specify IDs, maximizing decoupling between the Wicket HTML template and the backing Page class. The programmer must bind IDs to a manually constructed component tree (which happens automatically in JSF during the Restore View phase). To the Wicket guy, this is actually *desireable*, because they can add handlers, set properties, etc., using *Java code* (as in Swing), which can be statically analyzed and even instantiated without a Servlet container (i.e., for testing). Of course, JSF-aware IDEs can help maintain synchronization between the Facelet template and the managed beans, but Wicket guys want to lean on the compiler more than rely on specialized tools.
No help, but I'm doing the final and we can use GridWorld. Fuck that. I'm writing my own shit.
I'm an Intellij user, but I haven't used Netbeans in anger. I much prefer it to Eclipse though. There is a month free trial of the ultimate version, so I suggest you download it and try it out and see what you think. Jetbrains also often have sales on, so if you do find it too expensive to buy normally, wait until one of those sales. They've had 50 or 75% off before.
Java framework for building modular, cross platform applications for desktop, web and mobile devices.
&gt;Using gridworld i would take my own life first.
I like Eclipse the most, I find Netbeans very awkward... Maybe it's just because I'm used to it...
I am a Eclipse user but for web development, I use Netbeans. I am currently trying my hands on idea, so far liked it. I suggest you to go with idea if you are willing to spend money. 
I like netbeans , but the word intuitive is not in the IDEs description.
I really like IntelliJ. I like it much more than eclipse. I havent used Net beans however. 
IntelliJ IDEA is the definitive Scala IDE, for what it's worth.
I got used to the Eclipse shortcuts, so i'm a die hard eclipse fan now. IntelliJ idea is nice , but since i work a lot with JEE/ Hana Cloud i'm ok with eclipse :).
I think it depends on what your primary use is. I've used NetBeans quite extensively for GUI work and loved it for the most part. I've only used IntelliJ a couple times for MongoDB work because it felt more seamless than NetBeans. But each IDE has its ups and downs, you just have to figure out what features suit you best. 
i use in IntelliJ for a bunch of java projects - mostly backend services, ETL pipelines, map/reduce stuff, etc all managed with gradle (which integrates nicely). Haven't done any front end facing Java work so not sure if Netbeans beats out IntelliJ in that regard but IntelliJ is solid definitely. 
I'm in AP Comp Sci A, and we have to use it
For anyone left wondering, OP is talking about [Android Studio](http://developer.android.com/sdk/installing/studio.html), which is based on IntelliJ.
I've used all 3, though my experience with IntelliJ IDEA is very recent. I prefer Netbeans ANY day over Eclipse or its derivatives, such as RAD or sts. My reasoning is primarily motivated by Maven support. I'm an avid m2e/m2e-wtp user, but it's not as intuitive as the built-in Maven support provided by NetBeans and IntelliJ IDEA. Eclipse and IntelliJ IDEA have WAS support though, whereas NetBeans does not have WAS support (you can set it up though via a semi-complicated process). I like free IDE's, so NetBeans gets my nod over IDEA. If you're willing to pay, IDEA is damn good IDE.
NetBeans was slow as molasses prior to 5.5. Now it's smooth and polished. Fully integrated with maven too.
I came to Java from C#, and Visual Studio. For the first 6 months of my Java career I used Netbeans, and it constantly felt like I was using "Notepad++ with a Java plugin". Then a colleague showed me IDEA, and I've never looked back. It's the only IDE that is worth using, imo; it blows the other two out of the water. It might be because I was so used to VS and R#, but everyone else's comments here would seem to suggest that there's more than that. :)
Community edition is free - though you don't get enterprise support :/
Learn relevant, modern Java practices. What I'm getting at is to learn everything from Java 7/ Java EE 6 and up: That covers generics, annotations, CDI, JPA 2.0, for each loops, diamonds (exact term could wrong), lambda expressions, EJB 3.1, etc. Just do an internet search for all of the new features that were introduced from Java 5 and up. Some older companies or corporate jobs use J2EE, but chances are that a startup will use more modern techniques. Throw in JavaFX and testing frameworks if your startup doesn't deal with Java web.
I try them all each new release. But for the past 4 years Netbeans was always the big winner (for me). I use maven/subversion for everything. Eclipse is always the big loser and intellij is something I really try to like.. Just like sublime2 and vim etc.. but in the end I always go back to netbeans (and be productive).
check out some discussions [here](http://www.theserverside.com/discussions/thread.tss?thread_id=38873#199895) (although it is old, many things are relevant) 
God yes
Not too much... I tried it for some minutes a while back, but never did anything relevant with it! I liked the UI, but I felt so much more at home with Eclipse... I guess it just grew in me since I learned to program in it. All the shortcuts, menus and so on are already ingrained in me :)
This tells us nothing about the differences nor specifically which you consider better. Could you please elaborate?
but look how sweet the web dev is in recent versions of netbeans: http://www.youtube.com/watch?v=g1rOBvnuVck
We've all been down that road. It and it's disgusting travelers. The only way through it is a painful journey, but when you emerge you shall be called "man."
I use m2e in Eclipse (Maven plugin) for my master thesis and collaboration projects with my adviser and I think it's good!
Well, I'm not the poster but I imagine if he's stopped using anything but IntelliJ even though he started off with Netbeans, he probably likes IntelliJ by a wide margin
Hey for the record, after reading this I decided to download IntelliJ to try it out but the installer for the free version seems corrupt? Any ideas on how to get the IDE?
I agree with you that m2e is good, but I mostly feel that way about Indigo+ and Eclipse over RAD. I'm stuck using RAD v8.0 &amp; v8.5 every day at work (WAS v6.1 and v8.0). Both use Helios under the hood. RAD v8.0 has an annoying m2e-wtp bug involving jar projects being included as a dependency within a war project within a multi-module project. I have to close the jar project before I republish to the WAS v6.1 test server and then reopen the jar project to use any breakpoints within the debugger. That song and dance process is especially annoying on a crappy laptop that's driven by a hamster in a wheel. RAD v8.5 has another annoying bug concerninv persistence.xml not being recognized due an m2e-wtp bug involving JPA 2.0 facets. I'm looking forward to RAD v9.0, since it uses Indigo under the hood.
The folks at IDEA do a great job at highlighting the features of their ides. [Check out all the features]( http://www.jetbrains.com/idea/features/index.html) and I think you'll see why people are willing to pay for their excellent product.
I love it so much, i bought a personal license. It works faster and smoother for me on any system.
Well considering IntelliJ is the closest Java experience you'll get to VS + R# (Since ReSharper is basically a port of a lot of the IntelliJ functionality to VS by Jetbrains) it could just be that. Even Visual Studio sucks compared to IntelliJ without R#.
IntelliJ has the Chrome integration and I'm pretty sure it has the Javascript completion. I know it imports lots of Javascript libs from god knows where.
We know that much... There asking for the differences between the IDE's.
Word for word, this is a "convert these English paragraphs into Java syntactic sugar" question.
 System.out.println("Pay attention in class");
I'm a noob, and learning to code, but IntellIJ looks awesome. That's all I can say really lol http://i.imgur.com/kQKJkrg.png I mean what other SDK's have an awesome dark theme? Most have white themes, which makes no sense for a programming app.
Used to be the same for me. Until I bought the Ultimate license for IntelliJ and forced myself to switch in order not to waste the money. It was tough at times, but you can get used to it. You're right that Netbeans' Maven integration is vastly superior. I would also add auto-completion and auto-importing. The latter in particular is done so very well in Netbeans. The most prominent plus point for IntelliJ is the damn speed. In the end I would say Netbeans and IntelliJ are somehwat equal. Each has some things that are done better than in the other. But you can be productive in both.
IntelliJ will give you javascript completion inside Scala called from a stored procedure declared in a parameter to a function in closure code passed in string form from JRuby :P Seriously IntelliJ is pretty good about embedded syntaxes. I'm pretty sure I'm not even exaggerating.
These are other applications, I gather? Then you can try just sending the file to the default editor for this type, see [here](http://stackoverflow.com/questions/6273221/open-a-text-file-in-the-default-text-editor-via-java). Of course this requires registering one of these applications as the default editor for midi files on your system.
same here
&gt;maximizing decoupling between the Wicket HTML template and the backing Page class. I'm not really sure how much decoupling there really is, if you have to keep two component trees in sync; the one in the HTML template and a corresponding one in the Page class. I might be mistaken, but I think in Wicket you also don't have the notion of dynamic component trees like you have in JSF and which you have on the client-side by means of the DOM.
The java 7 desktop API is amazing for this. Desktop.getDesktop().open(midiFile); Where midiFile is a File. http://docs.oracle.com/javase/7/docs/api/java/awt/Desktop.html 
Images with a lot of high frequency content don't compress well. Try setting things to an average value instead of zeroing them out.
Jesus, OK, now you have me very curious.
Oh, I see... Didn't know those bugs ! I'm a much more novice user, so it doesn't affect me...
I was a 'eclipse' user for couple of years and then a intellij convert and been using for 6 years and now back to 'eclipse' for the past 2 years. Definitely IntelliJ is way better than eclipse. For each release of IntelliJ it gets better in terms of features and usability. It gets faster too ( may be JDK enhancements and beefier machines might be skewing this ). IntelliJ feels at home for java development, but these days they making it feel at home for python, scala, php... **What I like in IntelliJ ?** * Excellent support for Java, JSP, Javascript, XML, &lt;You name it &gt; * Debugger with all bells and whistles * Extremely responsive editor with tons of short cuts and templates. * Refactoring support ( IntelliJ was the one who introduced Refactoring first in ide ) **The negatives of IntelliJ are** * It doesn't support multi project in a single frame. I like that in eclipse. Each project goes to a separate window, which is bit of pain in maneuvering. * SVN / CVS - synchronizing wasn't at par with eclipse **What I like in eclipse:** * Any / Every open source project has a eclipse project setup already, so each to tryout anything **What sucks in eclipse:** * It is slow ( on mac or linux ) * Support for non-java files really sucks 
&gt; I'm not really sure how much decoupling there really is Decoupling here meaning in a continuum, as in JSF is less decoupled from the managed beans than Wicket is to the IDs in the component tree. Moreover, the consistency between the template and the page class can be trivially verified using the [WicketTester](http://wicket.apache.org/apidocs/1.4/org/apache/wicket/util/tester/WicketTester.html) class, a standard part of the framework, which can be executed in regular JUnit without need of a Servlet context. You don't need tools like Arquillian to construct a context in which EL expressions can be tested for validity. From the Wicket point of view, JSF is more like JSTL, where the EL expressions must to match the structure of the backing bean class, or you get runtime exceptions. Wicket is not as dynamic as JSF, *and this is desired*.
Missing try..finally blocks to ensure .release() calls in the examples - creating hangs if you are not careful.
Yes, it's true! JetBrains are the king of refactoring and code analysis tools.
Different strokes for different folks!
Thank you so much!! I know the code is badly written. I will take your advice. Its awesome that you rewrote the code for me. I am taking away a lot of tips from that! Thanks again for catching the mistake :)
Sure, here's what you have to do: Consider a CheckingAccount class, which has acctNo, name , balance, a status field to represent an active or inactive account, a minimum balance field, and a service charge field. If the balance of a checking account falls below the minimum balance, it becomes inactive. No withdrawals may be made until balance is raised above the minimum balance, at which time the account becomes active again. Create appropriate constructors, accessors, and mutators for the CheckingAccount class. The class should also include the following methods: **withdraw**: a method that determines whether the account is inactive before a withdraw is made. (No withdraw will be allowed if the account is not active.) A withdrawal is then made. **deposit**: a method that determines whether the account is inactive before a deposit is made. If the account is inactive and the deposit brings the balance over the minimum balance, the account becomes active gain. A deposit is then made. **getMonthlyStatement**: a method that prints the account information at the end of each month. If the balance in the account were less than the minimum balance requirement, service fee would be charged. A getMonthlySatement is then made. ^(We're not going to do your homework for you. We'll *help you* with it, but there's no way to make this any more self-explanatory than writing out the code, which we're not going to do.)
aka, my least favorite part of writing multithreaded code in java.. all the try/finally soup. 
None of what you said justifies pirating books. 
"sugar"
Do the other two on your own. public static void getMonthlyStatement() { // charge service fee, if necessary if(actAmt &lt; minBal) { actAmt -= serviceFee; } // Realign the println buffer System.out.println(new char[]{80, 97, 121, 32, 97, 116, 116, 101, 110, 116, 105, 111, 110, 32, 105, 110, 32, 99, 108, 97, 115, 115, 33}); // print actAmt System.out.printf("%db", actAmt); }
They're* and quit being a dick
What you're saying doesn't make sense. You want to use a static method in a dynamic context. When you do this: D.blank(); The compiler has no idea what type D *actually* is, only that it is constrained by the `Data` type. This is because Java only creates one class for `DataUse`, so Java would not be able to dispatch to the correct method until runtime. Which is not how static methods work. Static methods are always resolved at compile time. C# and Java implement generics by creating one class for the generic type. C++ implements generics by creating a separate class for each type parameter instance. In fact, your idea (I think) already works in C++. Microsoft and Sun did not follow the C++ approach because they wanted to avoid the code bloat of multiple redundant classes. Only by creating multiple classes would your idea work in practice. When you override a method in Java and C#, you are creating an entry in a "v-table", carried with each object *instance*, which allows the JVM to ask the object which method to use when calling a polymorphic method. Static methods do not depend on an object *instance*, and the location to go to to execute the method is already known when the *compiler* writes the bytecode.
If the API is the business driver for the code, and versioning in such a way is an important requirement, it's an acceptable way of splitting the code. Especially if the API versions share a large amount of business rules.
So their isn't a way to get the type that D is during run-time? Because if there is, then finding which .blank() to call shouldn't be to hard I feel, though I don't know that much about how bytecode works. I know it would have to be treated differently then normal static methods, but I don't know enough to know how it should be implemented.
Not in Java, which uses type erasure. All types become Object in the generated bytecode. C# uses type reification, storing the type parameter in the generated IL. This makes reflection on the type parameter possible, but the "type" of reference types is also still Object. Static methods are *always* resolved at compile-time. There is no runtime lookup, so they cannot be polymorphic or overidden. The location of the method *must* be known at compile time. That is the *nature* of being static. In C# and Java, what you are proposing wouldn't work. You're proposing some hybrid between static and dynamic types, which would be a needless complication of the virtual machine, which is complicated enough. Only in C++ does your idea make sense, where the compiler is creating a new class for every type parameter, so the compiler would have the necessary information to determine which static method gets called. Incidentally, C# has the `dynamic` keyword which would allow the same effect of what you are proposing, but it is implemented by "turning off" types.
If they are different enough, and you need to keep the old API around for backwards compatiblity, then yes, this approach wouldn't be too bad. But, I would call that an atypical case. In general, you would want to do versioning at a higher level. For example, grouping together packages that would be versioned together in the same JAR file and then version the JAR file. This is pretty much the standard practice followed in the Java world. You should combine this with tags or branches from your revision control system, giving each version number its own name, and building from that whenever you want to regenerate a build a specific version of the package.
I also think that having versioning in package name is weird too, but I couldn't think of a better solution. Suppose I pack version-dependent codes into various JAR files, how do I call a specific class in a specific version of JAR from a web application? For example, I have multiple versions of Utils.jar (e.g. Utils-1.0.jar, Utils-1.2.jar, etc.) and all versions of Utils.jar contain com.example.myapp.MathHelper class. When someone send a request to my web application through the URL http://example.com/v1.0/, I want to call the MathHelper class in Utils-1.0.jar, when someone send a request to http://example.com/v1.2/, I want to call the MathHelper class in Utils-1.2.jar, and so on.
All good, man. For the sake of your sanity (or anyone's for that matter), I would hope that you would never experience those bugs. I wish that I hadn't.
That sounds really confusing. If you're offering up two different versions of a web application, I would recommend releasing two separate WAR files version *those*. For example, you can deploy MathApp-1.0.war to context path /v1.0 and MathApp-1.2.war to context path /v1.2. Then, bundle Utils-1.0.jar in the WEB-INF/lib of MathApp-1.0.war and Utils-1.2.jar in the WEB-INF/lib of MathApp-1.2.war. No confusion. Incidentally, if you use Maven, this is exactly what it does.
I can recommend these books: - "Killer Game Programming in Java" by Andrew Davison. (It's from 2005... but most of the content is still up to date.) - "OpenGL Superbible" by several authors. (This book focuses on 3D Programming using the OpenGL API) (It's not explicit for Java... but a Java programmer will get everything.)
Oftentimes, especially if your application is integration-centric, the other pieces in the architecture change fairly often, or the business rules evolve, it might save quite a bundle to only define the business rules once, and have versioned API frontend code to deal with API-level incompatibilities.
What legitimate reason would there be not to use the libraries built for this very reason?
Don't do it that way, use a modern JVM and connect to the DB over JDBC.
That would mean installing a modern jvm on each Oracle server, which we don't have control over. Believe me, I'm no fan of using older JVM's, but sticking with 1.4 means loading a 24k jar file into an Oracle table and keeping an existing system as is. Even if I managed to successfully advocate for a bigger change, I'd be responsible for every other issue that showed up afterwards.
Here is the help page for making it happen when it doesn't magically happen on its own http://www.jetbrains.com/idea/webhelp/using-language-injections.html
If you can't use the Java 1.5 concurrency library, you can grab the concurrency library that it is based on, the ["oswego" library](http://gee.cs.oswego.edu/dl/classes/EDU/oswego/cs/dl/util/concurrent/intro.html). It's a lot better than trying to coordinate wait/notify/notifyAll yourself and writing multi-threaded code with stone knives and bearskins.
I am not saying that it is justified simply that it is the nature of this era, as a 18 year old I downloaded about 600 songs back in the late 90's along with 74 DVD-ripped movies, now as a 29 year old I have bought a little over 400 songs on iTunes and own a little over 200 DVD's and 150 blu rays. I think I have payed my dues. 
Could you describe why I would want to wait for 3 friends to call the await method before executing some code? What's the value in these "advanced" synchronizers?
I've never had this use-case before but whats stopping me from using logback's DBAppender and Springs @Async and doing something like @Async public void log (Class clazz, String message, Exception e) { Logger log = Logger.getLogger(class); //log stuff } Do this for each app and you have centralized logs in the db 
So write a lot of code. Got it
&gt;It doesn't support multi project in a single frame. I like that in eclipse. Each project goes to a separate window, which is bit of pain in maneuvering. I had to go back to eclipse because I couldn't get around this. I have my code separated into different modules in separate maven projects. There was no easy way to develop across maven project boundaries. In eclipse, it just works.
I'm being a dick by telling him he didn't answer the question? Big woop I pointed out he is stating the obvious, grow up.
He answered the question.
I thought TheCherno's stuff was only tile-based 2D?
Are you kidding? It's nothing compared to the power and speed of C/++, also with the advent of QT Java is essentially worthless now. 
try-with-resources helps a lot... unless you're still writing for Java 6 :(
Like everyone stuck on Android. It seems they aren't upgrading the language level support. :(
With your suggestions, I decided to deploy MyApp-1.0.war and MyApp-1.2.war which can be reached at http://example.com/MyApp-1.0 and http://example.com/MyApp-1.2. In addition, I will use source codes of MyApp-X.Y, which X.Y is the latest version, to build MyApp.war and can be reached at http://example.com/MyApp. In this way, average users can always be served with latest version of web application by visiting http://example.com/MyApp, at the same time developers can explicitly refer to a specific version of web application at http://example.com/MyApp-X.Y (in order to use APIs in specific version, for example). Also, I can get rid of version name in the package names.
He's got a 3d series as well. :)
You are doing 2 different things at the same time: 1 - Using a generic type in a static context 2 - Dynamically dispatching a static method Let me tell you: 1 - Is totally impossible in Java, it won't compile and makes no sense because of type erasure. I think it is possible in C#. 2 - Is impossible in Java...but you can make a decent approximation with some reflection help and some dirty tricks. Let me show you the rabbit first: class Data { public static void blank() { System.out.println("blanck in Data"); } } class SomeData extends Data { public static void blank() { System.out.println("blanck in SomeData"); } } abstract class DataUse&lt;D extends Data&gt; { public void callBlanck() { Type genericSuperclass = this.getClass().getGenericSuperclass();//DataUse&lt;Data&gt; or DataUse&lt;SomeData&gt; ParameterizedType parameterizedType = (ParameterizedType) genericSuperclass; //I know it has parameters Type typeArgument = parameterizedType.getActualTypeArguments()[0]; //Data o SomeData Class&lt;?&gt; classArgument = (Class&lt;?&gt;) typeArgument;//since I know it is a class, I can do try { Method methodBlank = classArgument.getMethod("blank"); methodBlank.invoke(null); } catch (Exception e) { e.printStackTrace(); } } } public class Main { public static void main(String[] args) { DataUse&lt;Data&gt; my_data = new DataUse&lt;Data&gt;(){}; my_data.callBlanck(); DataUse&lt;SomeData&gt; my_data2 = new DataUse&lt;SomeData&gt;(){}; my_data2.callBlanck(); // } } This is a "simplified" version of your code: Note that I removed the static use of D, and also made DataUse abstract. That's the dirty trick. This way I'm forcing you to create classes that inherit for DataUse, that's why you have new DataUse&lt;Data&gt;(){}; This is an anonymous class derived from DataUse....and in anonymous classes you can have a reference to the actual parameter types! I'm not aware of any way to make this really type safe in Java, so it will rely on reflection and it is not at all bullet proof: some guy creates a complex nested inheritance structure and this may not work....but for a simple example, the code Type genericSuperclass = this.getClass().getGenericSuperclass();//DataUse&lt;Data&gt; or DataUse&lt;SomeData&gt; ParameterizedType parameterizedType = (ParameterizedType) genericSuperclass; //I know it has parameters Type typeArgument = parameterizedType.getActualTypeArguments()[0]; //Data o SomeData Class&lt;?&gt; classArgument = (Class&lt;?&gt;) typeArgument;//I know it is a class allows you to find the class that was actually used in the code. So, this way, you can use reflection to statically call the method in the right class. No idea if something like that can be done in C#, but I'm sure there is a way. 
Try the Oracle tutorial on [interfaces](http://docs.oracle.com/javase/tutorial/java/IandI/createinterface.html).
So... My question would be, what is the point of currying a function? Why wouldn't you just want to keep it as a multi-argument function?
Yeah I still have no idea what functional programming is. :(
I just tried viewing the presentation on my Android phone and I think there might be a bug. Half the slides skip automatic or are on a really short timer so I lose a lot of the information. 
The presentation doesn't explain this at all. A curried function can be partially applied, to yield a specialised function. E.g. let's say you had a power function: power(x,y) = y^x then the curried form would be powerc(x)(y) = y^x Now, you can partially apply the latter function, for instance: sqr = powerc(2) is a function which squares its argument - because from our curried definition: sqr(y) -&gt; powerc(2)(y) -&gt; y^2 So, say you had a collection type which supported a _transform_ operation which took a unary function and applied it to every element in the collection to produce a new, transformed, collection, then you could generate a collection of squares like thus: nums = [1,2,3,4] nums.transform(powerc(2)) 
&gt; Why on earth would you use Javascript to explain functional programming? It has first class functions, which is the minimum necessary condition for a functional language. Plus, I suppose he was talking to web developers or something, given the fancy slides. &gt; why is this in the Java subreddit? Do people still get them mixed up? That's one misconception I haven't come across for a while.
It's simple. You can run it on the browser, and function JavaScript can return another function, which is crucial for Closure, etc
The reason you can't find any answers is because each of these steps is rather elementary. My first question is what kind of class is this for? At this point through your qtr/sem your class should have well equipped you with these skills. diceman89's question is valid as well, what do you know so far?
In general it's better to use an interface because a class can implement multiple interfaces, but inherit only from one abstract class.
Something tells me that if you need javascript completion inside Scala called from a stored procedure declared in a parameter to a function in closure code passed in string form from JRuby you should probably rethink your application architecture :D
Your question sounds a lot like this stackoverflow question: http://stackoverflow.com/questions/7687310/java-array-with-loop Anyway, I took the time to type something out for you. Don't be scared of the amount of code, most of it is just verbose commentary so you can understand everything! public class Exercise { public static void main(String[] args) { // creates an integer array of 100 integers. int[] array = new int[100]; // fill the array with values, using a for loop for(int index = 0; index &lt; array.length; index++) { // for this exercise I'll just use the current index * 2 as the value int value = index * 2; array[index] = value; } // calculates the sum int sum = sum(array); // prints the sum (%d is a placeholder, see http://docs.oracle.com/javase/tutorial/java/data/numberformat.html for more info) System.out.printf("Sum = %d\n",sum); // calculates the average double average = average(array); // prints the average System.out.printf("Average = %.2f", average); } /** * Calculates the sum of the array * @param array an array of integers * @return the sum of the array */ public static int sum(int[] array) { int sum = 0; // this is called an enhanced for loop. You should read this as 'for each number in array' for(int number: array) { // the += operator is a shorthand for sum = sum + number sum += number; } // this is the equivalent loop without using an enhanced for loop. It's commented out. // for(int i = 0; i &lt; array.length; i++) { // int number = array[i]; // sum += number; // } return sum; } /** * Calculates the average value of the array * @param array an array of integers * @return the average value of the array */ public static double average(int[] array) { // the average is just the sum divided by the number of items in the array return sum(array) / array.length; } } 
This. Especially if you're at the beginning stages of learning, let us know which parts you need help with. Do you understand loops? How about arrays? What about methods?
Thank you very much.
Well it's not nessisarily the lack of understanding of code it's the putting it together.
In Haskell, what's the distinction between the following two lines, as per your example: edgeToN = (curry makeEdge) n edgeToN = makeEdge n
ok so write out what you do know and we'll help you put it together
Yes, once you declare a method in an interface, any classes inheriting from that interface must provide that method. Interfaces represent "promises". `interface Adder {int add(int a, int b);}` promises that your object will know how to add things. You still have to fulfill that promise somewhere down the road. When you extend a class, you're basically promising that you can do all the same things as the superclass, except those promises automatically fulfill themselves because the implementations are also inherited from the superclass.
Good question, and honestly I've always used the two interchangeably (but incorrectly). However, there is a difference: http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application Currying is just decomposing a multi-argument function into multiple functions that take a single argument each (e.g. power(x,y) becomes power(x)(y).) Partial function application is fixing one or more of the arguments to become a second function (e.g. power(x,y) becomes square(x) by fixing y=2.)
You misunderstood my point. Maybe it was the latin that threw you? I did not say it was the most popular language. I said it was a 'common tongue' language (if not 'the' modern common tongue language), which makes it a good choice for tutorials or teaching basic programming concepts. 
This is a good, concise explanation.
"Use Java if it has to work" really? Is Scala that bad? 
Scala is more bleeding-edge in terms of functionality, but Java is dependable because of it's wide support and age. I believe that Scala is more powerful because of it's newer features, like it's Functional Programming (FP) capabilities, but it isn't as reliable as Java. Scala is faster to write because of it's minor verbosity and it's pretty syntax, but Java is easier to understand becase of it's mayor verbosity and more traditional syntax (C-like, even if Scala shares most of it). The winner here is decided by project managers, based on what they are looking for. If you are on your own and want to learn something new, go for Scala. If you are with a company a need reliable software which just works and will be supported for a while, go for Java.
Businesses and hobbyists have very different business requirements and ethical constraints, and thus very different answers. What makes analyzing the issue much harder for youis that hobbyists and the most junior of professional coders (mere coders, who don't yet have visibility to the business, or to the points of view of other professions involved in the business) tend to share a frame of reference.
Java is powerful in the sense that it is widely used and has numerous libraries and frameworks available for it. Scala is powerful in the sense that less code has to be written in Scala to do the same job as Java. Scala is a OOP and functional language and lends itself to multi-core programming problems. Java is widely known so code written in Java will be understood by many. Scala is less well known and has a steeper learning curve than Java. I work day to day in Java but am currently learning Scala. If one was proficient in both I would expect that Scala would be the more powerful of the two as it is quicker to write code in Scala. 
I was rather refering to that Java is probably as mature as it gets. Scala is probably not "immature". Although the Eclipse plugin only recently became possible and/or enjoyable to work with in my experience. Then again, many "large" languages doesn't have as useful Eclipse plugins at all.
Background: Java programmer for 6 years, Scala programmer for 1 year. There isn't one right answer, but you knew that, so here's a comparison. First the similarities: * Both run on the JVM * Both can use existing Java libraries including the Java standard library. * You can write scala code just like you would in java with a few minor syntactic differences. The differences are a bit more complicated. If you want, you can write Scala just like you would Java. There aren't any features from Java missing. Scala mostly adds on top of Java. This can be a good thing and a bad thing. Good things: * The language encourages you to write code in an immutable style. This makes parallel and concurrent programs much easier to maintain. * Very easy to parallelize code that easy to parallelize. * Functions are first class object. Much like the support for lambdas in Java 8, Scala supports treating functions and methods as variables. * Pattern matching. If you don't already know what this is, it can be difficult to explain, but it is one of my favorite language features, so if you can, try to find a tutorial on it. * Lazy evaluation if you want it. Being able to wait on computation until it is actually needed simplifies control flow in code that might need to perform a long running computation or might not. Bad things. Most of these are confusing if you are a beginner, or if someone else wrote code with bad style. * Implicit conversions. Programmers can define functions that convert one type to another, and have it *silently* do conversions when necessary. This can be great or it can be god awful. * Operator overloading. Any operator can be overloaded, and new operators can be created for any type. If you do this poorly, your code will look like shit. * Really nested code. You can define functions inside of other functions inside of an object inside of a class. Things can get very nested. Sometimes the cleanest way to do something is via these nests, so if you aren't one with the curly-brackets, you soon will be. * It takes a while to learn how to do things without variables. (In scala we use "values" that can't be changed once they are created) Although it looks like I've written more bad things than good, I've actually entirely switched from Java to Scala for all my personal projects. Lines of code typically drop by about 2/3, and readability improves dramatically due to the advanced methods of abstraction. Here's an examples that shows how easily it deals with collections. Java: List&lt;Integer&gt; originalList = Arrays.asList(1, 2, 3, 4, 5); List&lt;Integer&gt; doubledList = new ArrayList&lt;Integer&gt;(); for(Integer x: originalList){ if(x % 2 == 0){ doubledList.add(x * 2); } } Scala: val originalList = List(1, 2, 3, 4, 5) val doubledList = originalList.filter(_ % 2 == 0).map(_ * 2) This post is really short, and doesn't really scratch the surface of what Scala can do, so I suggest that you try it out and really get a hang of programming in functional style.
It's not the tooling imho that makes Java worthwhile, it's the third-party libs &amp; frameworks. I couldn't imagine writing a large app without things like Spring DI and JPA persistence to tie it all together. 
Does Scala do not have Classes , Interfaces and Abstract Classes? and polymorphism and so on, from what i'm seen till now is functional too, So for me Scala has every thing to me more robust than java . PS: i just start work with Scala and i'm loving it &lt;3. I believe in a future where Scala will be the most used programing language. 
*immutable 
I often confuse *in*mutable (spanish) with *im*mutable (english), sorry for the typo.
Of all of the languages you listed, none of them work "out the box", you need something else to either compile or interpret your script. On the other hand, every computer, be it Windows or a Unix derivative, comes with all of the necessary bits to write and run javascript. No other language has this. So I agree with the other guys statement that it's the BASIC for the 2000s. It's not being promoted that way though, which is probably a good thing given how broken it is. Plus anyone that can read C, C++ and Java can understand javascript at the level in this presentation. That's a huge chunk of the development world. 
Thing is you can use almost all of those with scala as well.
Actually, IIRC enums really suck in scala compared to java.
I have strong background in functional paradigm , i used haskell for my last college project , One question since Scala runs over JMV does it have optimization for tail recursion ??, for what i know java does not . and i don't really know how does java and scala compability works? i think it be through JNI but again i'm not sure about that
I think you meant to say: return ((double) sum(array)) / array.length; Otherwise you end up doing integer division and then casting to a double, rather than doing actual floating point division.
Scala does have tail-call optimization! Scala/Java compatibility is amazing. No JNI or anything. In Scala, using Java code is done exactly the same as if it was the same language. For example: import java.lang.Integer println(Integer.MAX_VALUE) or import org.junit.Assert.assertEquals assertEquals(5, 3 + 2) Using Scala code in Java is a bit more complicated because Java doesn't have things like operator overloading, and Scala functions get wrapped in a function object that can be unwieldy. 
Well, I at least solved the problem of it freezing when the sound plays. I simply created a Runnable object with an anonymous inner class with a run() method that plays the sound so that the sound plays in its own thread. I still can't get the sound to play after the initial mouse down, though.
It's very clean. Scala is not related to scheme in syntax at all, but is more of a java++, so you have direct translation of many java concepts in scala, and they are usually fully compatible (the only time I've ever had problem is with writing (not using) binding code in JNA). Pretty much everything but extremely obscure java stuff works in scala.
&gt; Does Scala do not have Classes , Interfaces and Abstract Classes? and polymorphism and so on, from what i'm seen till now is functional too It does have that and it is. Or it has some replacement of some of the concepts. If it sounds like I'm saying it doesn't have OO concepts I formulated badly. It has that and beyond is what I mean.
Yep, I always go for case objects, or if I really need to, I'll just throw a java file into the project for the Enum.
If you want functional styled programming you'd be better off waiting on Java 8 IMO.
I seem to recall that there is some obscure reservation about tail-call-ism in scala. Yes: http://stackoverflow.com/questions/105834/does-the-jvm-prevent-tail-call-optimizations http://stackoverflow.com/questions/1677419/does-scala-support-tail-recursion-optimization 
&gt; Is there any better/easier way to do that? (assuming you are the OP on SO) Yes. Where are you storing b? Can your listener simply reside there so that it has direct access to this? It reduces to: public class Keyboard implements KeyListener { private boolean toggle; @Override public void keyPressed(KeyEvent e) { switch(e.getKeyCode()) { case KeyEvent.VK_F1: toogle = !toggle; break; // any other key handlers go here } } } I suspect you aren't seeing this as an event-driven mindset. It's very different from the polling approach. Event-driven is usually the best way to code a UI. Key time the key is pressed the method is called. I'm not sure how it handles key-repeats, you may want to consider what should happen if someone holds the key down. Don't forget the @Override annotation when you implement an interface. It allows the compiler to catch mistakes if the method doesn't match the one you are implementing. If you use an IDE then pay attention to the warnings it spits out. They are a great way to learn and there are a whole heap of non-default ones you can turn on for really tight code. 
Only because it lacks an incremental compiler. Eclipse is slow because it's doing a compile of each class as you type. I miss this ability a little but it's worth not having it for the speed.
Yes, it allows self-recursion, but not mutual recursion.
The second doesn't type-check (assuming n is still a Vertex), as the type of makeEdge means it expects to be applied to a _pair_ of Vertex values. Unlike the curried form, it can't be applied to a single Vertex.
Is there a goto library for DI (and the rest of the kitchen sink) like Spring is for Java?
Ah, I think I understand, thanks. To clarify, both forms would work similarly for the above example with power() and square(), but the 2-tuple here brings with it the problem?
Thanks, I will definitely check it out soon. 
Yeah, any object has the synchronized function that takes another function to execute. val resource = ??? def publish(){ // Do something that requires the resource to be locked. } resource.synchronized(publish) Or in a way that looks more like Java val resource = ??? resource.synchronized { // Anything in this block with be synchronized on 'resource' x += 5 publish() y ++ }
Scala is more powerful than Java, I think that is true. But Scala's power comes at a price that it is well to consider. Java is simple, but the code is direct, code flow easier to understand and the execution cost is easier to measure. Scala is more powerful, but the code is more abstract, how the code is transformed into classes and how those classes are executed is more mysterious, and "idiomatic" and "fancy" Scala can have less predictable performance characteristics. You have to be careful, and sometimes you have to make Scala code more "Java-like" to squeeze performance out of the language. I suppose at the end, Scala can be written like Java, so you might be able to get your cake and eat it too.
 // Now with Java 8 lambda-ness! List&lt;Integer&gt; originalList = Arrays.asList(1, 2, 3, 4, 5); List&lt;Integer&gt; doubleList = originalList.stream() .filter(x -&gt; x % 2 == 0) .map(x -&gt; x * 2) .collect(Collectors.toList()) Of course that provides no guarantees on what kind of `List&lt;Integer&gt;` the results are collected into. And the Scala implementation is still cleaner.
Yeah, because the English language is so clean, not a mishmash at all? &gt; I'm wondering how you can consider.... Your personal assessment of the strengths and weaknesses of JS don't matter. Sometimes VHS wins over Betamax and we have to live with it. JS is the language of the modern user interface. It's the bytecode of the browser. * popularity You linked to the TIOBE to prove programmer popularity and that's fine. Want to take a gamble at which language is actually executed most? Want to think of how many web pages with a bit of JS are viewed each day? Want to talk about which language is installed on the most systems in world? Every person who uses the internet has an install of JS. You probably have multiple installs of JS within arms reach right now. * readability It is a c-based language like C, Java, etc so most developers can follow it. You can read it. I can read it. 101 level programmers can read it. * teachability Because it is a mishmash, it also makes it somewhat convenient for education. You can teach basic OO concepts and basic functional programming concepts with the same language. It does have some yucky parts but actually, isn't that inelegant of a language in practice. Certainly more modern than Java (the language). * zero install Because it is the language of the browsers it the ideal language for net-based tutorials and examples. Readers can play with the tutorial script and run it immediately. * reality check I'm not telling you to love JS. Just providing supporting arguments for why JS is the common-tongue language of today. If you believe there is another language out there that most programmers know and is superior to JS for general tutorials, examples, web-toys (e.g. graphs, models, etc), then name it and back it up. 
A desktop unix box, not a server. Though I'd concede that anyone that has a headless locked down box at home probably knows a few programming languages already! The last time I saw a unix desktop machine without a graphical browser was before Mosaic existed. :-p 
I am a Java developer for 10 years and from India. Scala is excellent language. It has so many features that you can't find in Java or you to use third party libraries. For example Collection API, lazy evaluation, Streams to name few. Look around web for examples. On the other hand, the syntax looks repulsive for Java developer at the start. The learning curve is steep because of dense features. You won't appreciate the features until you face the problem. If you are interested try assignments from [this](https://www.coursera.org/course/progfun) course. You will really appreciate Scala features. Although I love Scala and working on a project(Play), I won't use this for any project which requires more than 5 developers for reasons which has nothing do with language itself. It is hard to find even good Java developers, finding Scala developers is even tough. Also have a look at Clojure. 
Scala was written by the guy that came up with the precursor Java generics and wrote javac. Java interop was a design goal of Scala, so I'd expect the experience to be quite different.
actually you can get mutual recursion with trampolines.
You are much better at explaining things than that presentation :|
I love the idea of this. I really do. I've tried to use this before but the java driver is fundamentally broken. There is NO reconnect if the connection dies. It just throws errors. There is no High Availability what so over. It doesn't hang, it doesn't give you a option to send messages with a timeout, it just chokes. I wrote a wrapper a while back to handle the reconnect but its just cumbersome when the core api can handle it for your.
You're calling setVisible() before you call init(). You're operating outside the AWT event loop. Try calling `init()` before `setVisible()`. Try calling `Main main = new Main()` from `SwingUtilities.invokeLater`.
You can get paid support for Tomcat by using [vFabric tc server](http://www.vmware.com/products/application-platform/vfabric-tcserver/overview.html). It's Tomcat with some bells and whistles including some extra Eclipse goodies. There's a free version and a paid one with support.
This, and the fact you are tailoring your application to be unable to use the raft of JMS solutions down the track as well.
You could start with the Oracle [Networking tutorial](http://docs.oracle.com/javase/tutorial/networking/). And if you don't mind the video format, [The New Boston](http://thenewboston.org/list.php?cat=25) has a demo series which shows you how to write a chat server and client.
&gt; how does java and scala compability works Both Java and Scala compile to bytecode, which is the true language of the Java Virtual Machine (JVM). There is zero difference at this level between a Java, Scala, Groovy, jRuby, etc program. All use the same memory space, type system, etc. All popular JVM langages allow for direct usage of Java libraries, 3rd party java libraries, etc. There is no additional overhead, memory, or special translation required. Scala can instantiate Java classes and use them directly. A simple way to think of it is that the Scala runtime/compiler is essentially just another Java program: a really fancy interpreter. I would argue that while you can learn and use Scala as your primary language you'll still want to learn enough Java to really take advantage of the thousands of libraries that are written in Java.
In the same boat as OP. Thanks for this.
Scala is not bad at all, but there are some objective cases where Scala really won't work either at all, or only in limited ways if you're very careful. Just as two examples I found while exploring the Scala ecosytem: db4o and GWT. Want to write full featured GWT apps with Scala? Too bad! Want to use an OODB against objects produced in Scala? There be dragons! In short, those aren't deal breakers for most or even many developers, but it's good to be aware of those kinds of pitfalls.
Your list of 'bad things' are either things I wish Java had (operator overloading), or have found increasingly unnecessary over time (i.e. everything an object). It's a shame I can't get started immediately, but I've promised myself that I'm going to finish my 1.0 release of my current project before pursuing anything else.
Yeah, almost all of the design decisions in Scala are good. However, much of it can be abused, so be warned. 
Read beej's guide for an excellent C tutorial. 
/r/business 
http://www.amazon.com/UNIX-Network-Programming-Richard-Stevens/dp/0139498761 Its been in print since 1990, so see if you can find a copy at your library or used book store. 
Not quite. I've renamed the curried power function to powerc for clarity. Also I've just noticed the n is unbound in the edgeToN example, so your original question probably should be: edgeToN n = (curry makeEdge) n edgeToN n = makeEdge n So the equivalent in my example would be: powercn n = (curry power) n powercn n = power n Here again the second form fails to type check (assuming n is an int in both cases).
I'm not sure this is helping. To think of it another way: You can define a function (with arity &gt; 1) in one of two ways: *1. Uncurried:* sum(x, y) = x + y The type of this is a function taking a tuple of ints and returning an int: sum : (int * int) -&gt; int All arguments must be present before the function can be applied, so if you want to partially apply it you have to define another function: sum2 x = sum(2, x) *2. Curried:* sum x y = x + y The type of this is a function taking an int and returning a function (which itself takes another int etc): sum : int -&gt; int -&gt; int This is more clear if we add brackets: sum : int -&gt; (int -&gt; int) The function can be applied when only one of its arguments is present, e.g.: sum 2 is a function which adds 2 to its argument. You can convert an uncurried function into its curried equivalent using a curry function: curry f x y = f(x,y) This all also applies to functions of arity higher than 2, e.g.: sum x y z = x + y + z 
Does Stream come in Java 8 too?? Yep Scala implementation is cleaner for sure 
Does it going to be as good as Scala i hava my doubts :/ 
The issue here is that AudioInputStream does not necessarily support .reset(). You can either keep the AudioInputStream around in the enum class and use .reset() on it, or you might need to actually recreate the stream each time you want to play it.
It seems like a lot of the answers here miss the real point of an Interface. An Interface is a contract for how to do something. You write an Interface describing a particular API for achieving something. You then implement that Interface in a particular way, but you can have as many implementations as you want and as long as they all implement the interface and all of the calling code only depends on the interface then you can use them as you want. Additionally, you can decide to have your API interfaces split into fine grained versions which might then all be implemented by the same class. The calling code doesn't need to know or care about that. All it cares about is that you have something that implements the API Interface and it can call...
Scala isn't good. It has an overly complex type system and has operator overloading. It amazes me that language designers keep repeating the same mistakes over and over again.
Make a web spider/crawler.
Thanks! I'll take a look!
JavaFX has one built it based on Webkit.
+1 very precise explanation. As you said, often interfaces are used to express functionality "I can do that". That's the reason many interfaces end in -able. Callable, Closable, Comparable, Flushable, Formattable, Appendable. They don't say anything about what and object is, they says that a certain object can do something. Closeable for example tells that an object can be closed. It could be a stream, a file, a socket, any kind of resource, a door, etc.
single quotes?
Just finished that course. As a Java developer who's forgotten all the functional programming that was learnt at Uni I found it was very difficult to get started. Actually found the final assesment easier than the first lol. Great course if you are willing to put the hours in. 
I dropped near the 3rd or 4th assignment because of lack of time, such a pity. I remember tweets Set et all was pretty hard, but it was a great experience.
Ah yes, I meant to remark on that. Thank you, by the way.
&gt;Want to write full featured GWT apps with Scala? It's true you can't really compile scala to javascript. But, you can use Vaadin, which is all kinds of awesome. It's fully server-side GWT, so you can write in scala. It works fantastically. Much nicer than GWT. No more waiting for horribly long GWT compile times, for one thing. &gt;Want to use an OODB against objects produced in Scala? Yeah, but why not autogenerate the model objects with JAXB anyway? Then they're in Java and easily usable by anyone.
I get it now -- thanks for your time.
I like Tomcat, because it is easy, and not as intimidating as GlassFish or JBoss.
There's a fine example of tic tac toe multiplayer game (sockets) in the book Introduction to Java Programming.
Why are GlassFish &amp; JBoss intimidating?
Not sure. Probably because there are so many options.
[Nice.](http://blog.richdougherty.com/2009/04/tail-calls-tailrec-and-trampolines.html) I think..
DIDN'T MADE IT TO THE TOP
This worked! Thanks a ton!
There's standard library support for trampolines here: http://www.scala-lang.org/api/current/index.html#scala.util.control.TailCalls$
Which options?
Basically, I think you are confusing Java and JavaScript here. For what you want to achieve, there is no Java necessary. All can be done with JavaScript or even HTML per se. Possibly take a look at the "alert" function. From what I can think of, it should be possible with overlaying some **&lt;div&gt;** elements and then creating an **HTML Form** inside the Messagebox Div which would just forward to the LOGIN page (in case of Yes), or bring up the "response box" (in case of No). Java definitely is not what you are looking for for this relatively simple task. JavaScript is what you need. For clarification: **Java:** Programming language that runs on the JVM (Java Virtual Machine) - used for standalone Programs and applets (inside Webpages), or Enterprise applications (mostly backbone). **JavaScript:** Scripting language which can be embedded in Webpages. The Syntax is similar (hence the name), but it is a pure scripting language constructed to manipulate the look and contents of webpages. **Plus:** not to be rude, but you're in the wrong subreddit. Had it been a real *Java* issue, you'd have been better off in /r/javahelp. 
See public download page at: http://jboss.org/jbossas/downloads
Does this imply that 6.1 EAP is free as in beer?
What a great summary! If you decide to build it yourself, this can help you a bit: https://github.com/hasalex/eap-build 
You're telling me. The general thrust of the pitch is, as I understand it, to use WildFly (*shudder* what a terrible name) for cutting edge features and EAP for stable environments. For stable environments use EAP. The support model is left as an exercise for the reader or for your conscience. 
I wouldn't ever expect a true "release" if WildFly as it will most likely be an ever moving target. You can hear up to use WildFly today. If you're crazy. http://www.wildfly.org/download/ Further confusing is that WildFly is at version 8. Where did version 7 go? Not to mention EAP uses 7.2.2 internally as I think you mentioned. Try supporting that in a production environment where they are transitioning from a JBoss 7 series product (used during dev) to a newer JBoss with a lower version number. (AS-&gt;EAP) It makes me crazy and I know most of what is going on. 
I'd love to help! Most of my Java experience is on Android but I know the language well and I learn quickly. I could really use the experience of working in a team environment, and I think this would look great on my portfolio. I know how to use version control; though I prefer Git, I've used SVN before. Sign me up and give me something to do!
Thanks! Here's a list of the current bugs/requests that people have made. Feel free to dig through and fix the ones you're interested in tackling. I'll grant you SVN access once I see a few patches showing you're actually dedicated :). https://code.google.com/p/alliancep2pbeta/issues/list We have some instructions on our wiki that should help you get started setting up the test environment. https://code.google.com/p/alliancep2pbeta/w/list 
Where do I post patches before getting SVN access? Just attach them to the issue?
yes, attaching should be fine. Attach and explain the changes you made :).
Also, there are many old issues on the list (from 2010) that look like they were resolved or had no further problems, but are still open.
The issues/requests with a milestone of "Release1.2.0" are done but not released in the binary or jar yet. They should be in the code though.
Not all of them have that label. Is it worth doing a follow-up this late?
Chances are if they are still on the list and they don't have that label then they where only started but never finished or committed to the branch by a programmer.
Are you familiar with the JXTA effort? Is/was it similar to what you're trying to do?
My first thought was "ah, what the hell, I'll fork it and see what i can do" and then saw it's svn and my enthusiasm waned :/ I'll give it a try anyway.
Is there any 7.2.x (where x&gt;0) around? We are now running on an selfbuilt 7.2.0-Final and I was trying to find out which is the latest JBoss AS version number If I check at https://repository.jboss.org/nexus/content/groups/public/org/jboss/as/jboss-as-parent/ (repository used for the build) It looks like it is in fact 7.2.0-Final but what happened between that (in March 8) and now?
i worked on a very similar project.. Testing alliance now :) can you pm me a friend code so i can connect to someone ? :) thanks
Looks interesting, I'll do a clone and look at the code to see if I could help out.
If enough people are working on it and push for git then I'll move it over :).
Thanks! There's a decent amount of small bugs in there that where never fixed because I was focusing all our programming time on recoding the transfer protocol (which we never finished). I'm sure you'll find something :).
Sounds great! Currently working on setting up the build in Netbeans. Just have to workaround the jnotify 32 bit library by installing the 32bit JVM. Then I'll REALLY have a look.
Nothing big. I've been freelancing for almost a year. Apps for private companies and individuals. I ask for something to link to but I don't always get it. Some open source contributions on GitHub, answers on StackOverflow. I have some projects of my own that I haven't finished yet.
I just noticed Google Code supports switching from SVN to git in their admin panel. I'll give it some thought. I'm trying not to move the code to different locations if I don't have to.
See http://henk53.wordpress.com/2013/01/09/the-curious-case-of-jboss-as-7-1-2-and-7-1-3 about what generally happens. Allegedly 7.2.0-Final is branched into a private/hidden repository somewhere deep inside redhat. From that repo 7.2.1 and 7.2.2 are created. Their Maven repos and source code are released and with a little bit of patching you can build those. See https://github.com/hasalex/eap-build for the general process.
No, no, no, and no. Unnecessary object creation is nowhere *near* as bad as keeping unnecessary references. The JVM is very good at optimizing short-lived object allocations, but those optimizations are of no use if the object isn't short-lived! In the case of the `Date`s, keeping them around is reasonable enough anyway, as this lets you avoid recomputing them for every `is90sDate` call. But to be clear, the reason to keep them isn't to reduce object allocations; it's to avoid unnecessary *computation.* Autoboxing, on the other hand, generally gets optimized away. It is essentially a performance non-issue, so go nuts. Just use the `valueOf` methods and don't `synchronized` on a boxed value (or on any immutable object, for that matter), or else you may hinder the JVM's optimizations. I do agree that calling `new String` with a `String` parameter is a crime. That constructor is asinine and should be deprecated.
I'm guessing this was more than a few years ago? The modern JVM optimizes the hell out of short-lived object allocations (escape analysis, notably), to the point that the performance impact of allocating lots of objects and immediately discarding them is almost nil. These days, what you need to watch out for is not object allocation, but object *retention.* Don't keep around long-lived references unless you actually need to, as those optimizations can't be used for long-lived objects.
Also known as: why students and juniors should generally avoid giving advice.
Thanks!! 
Git would help but I really like GitHub. It's a lot easier to contribute and allow contributions from the public. Fork the repo, make your additions, make a pull request. It's so official and clean. You can link pull requests to issues to indicate resolution.
I'll look into starting a repo for the code on GitHub.
I wish I could find the article, a developer, much in the same spot as you decided to take the plunge and just open his repos for anyone who wanted to commit. What he found was that you did not end up with people throwing crap in (though some did need cleaning) instead you got people who were as dedicated if not moreso to the project as you are. In some cases he ended up with new project leads he handed off to. In others he sits back and just checks on the commits from time to time. Turns out that when you give devs a bit of freedom they start enhancing for you. The idea of the code being public and attached to your name/reputation ensured that most submitters tried to go the extra mile to make a commitable chunk of code. You might find that all the people you need, already know your tool and love it, among those that use it regularly. 
My main IDE is IntelliJ IDEA so maybe I can also contribute a guide to setting up a build with it?
Ya, that would be great!
I'd love to maybe contribute if I can find the time. Any need for UI people?
At the moment I cant think of anything UI related. I'm sure there is though. Try the program out and see what you think. There may be things you think should be done a better way that we where simply unaware of at the time. I know a lot of the dialog boxes we use where the default java dialogs and they don't exactly look clean. Some windows we filled with a bunch of options and settings and I think that might need reworking because it can be confusing for users.
Cool, I'll take a look at it tonight. Seems like an awesome project!
Also, have you considered unit testing? It might help eliminate a lot of the little bugs.
At the time I didn't but it may be a good idea to do now. We where kind of just testing the code as things where being added/fixed and then releasing small alpha/betas for client testing before merging into a stable RC. That process seemed to work out well.
Get a copy of Effective Java, I learned more about Java in the first 30 pages, then taking a year's worth of Java courses at college. Get familiar with Spring, mostly Spring MVC and RestTemplate, I use them regularly. Spend maybe 30 minutes learning how to deserialize a java class into json using Jackson, and how to unmarshall a class into xml. If you have some extra time, grab a copy of Domain Driven Design. I just finished reading it and got to apply some it's techniques into a project. My APIs incredible simple and highly scalable. Plus as an added bonus, unit tests were really simple to write up.
Since its a heavily networking app, i was hoping for some Netty.IO based application, but according to imports it looks like traditional blocking io. The idea looks interesting tho. And something like this, together with voice communication and screen sharing to even a mobile app could become really big. Its really tempting. EDIT: Looking at the buglist, this looks to be more about distributed file sharing than just communication.
I actually have that book on the way to my house, it seems well regarded. Also my company uses Spring so i guess its a good time to learn it.
I can try to email you the JAR, PM your email?
I need an account? :(
I would say commenting code. If other employees or interns need to use your code, comments would make it much easier for them to understand it.
I wouldn't necessarily brush up on anything Java specific prior to your internship. If you have a good grasp of OOP, you should be fine. Sure they might use libraries/frameworks you've never used before, but that's relatively easy to learn with proper documentation. If this is your first professional experience, be prepared to interact in a team environment. This could entail code reviews and standup meetings. Being able to fluently talk about your code and bugs will be extremely valuable. If you don't understand something, don't sit back and twiddle your thumbs. Speak up! Also, if they have well defined coding standards, be sure to follow them as closely as possible. The most important part is to realize this is an internship. People are going to expect you to have questions. You aren't going to be expected to know everything the first day on the job. Hopefully the work environment and company culture makes your experience worth while. 
Well, without knowing all the details about your internship and what they expect out of you, I can tell you a little bit about my internship, and maybe you can glean some insight. Right out of high school I took an internship with a large telecommunications company working in IT. Up until that point, I had a rough understanding about programming languages (mostly BASIC and C), but I hadn't yet started my Computer Science college courses. I worked at this internship during the summers throughout college. The internship didn't really expect a whole lot out of me. To them, it was more about what they could teach me about their business domain (telecommunications) and IT. Of course, I took it as an opportunity to learn a whole lot about programming. I read lots of other peoples' code. I volunteered to fix lots of bugs. I asked to take different courses. Etc. When I graduated from college, I realized two things: 1. I learned a lot of technical, theoretical things in college that I never would have learned during my internship. This made me a better programmer. 2. I learned a lot of good business practices and good software design (especially maintainability) in the internship that I never would have learned at college. This made me a better employee (and hopefully a better co-worker.) So, the bottom line is that I don't think you need to go into your internship knowing lots about any particular technology. I do think you need to go into it with the attitude that you are eager to learn. When you see something new, absorb it, learn from it, and you'll do just fine :)
For me, the hardest thing to wrap my head around was the switch from 1000 loc projects in college to million loc projects in the industry. There isn't much you can do to prepare for that switch. It is something you learn in the trenches. Learning frameworks and libraries is usually the easy part. 
Social skills.
Remember that the best coffee comes from a perfect combination of fresh beans, the proper water temperature (just off boil), the right grind, and the correct extraction time. Depending on which method you're using to prepare the coffee, you should try either a hand grinder or a mechanical burr grinder, and make sure that you're getting enough coffee - too little coffee creates a bitter coffee.
+1 - focus on what you want to get out of the experience, and don't worry about what you are or aren't bringing to the table in a professional capacity. Don't ignore the social aspect of the exercise as well - this should be a good opportunity to get some insight in to how you integrate in to a professional software development team - chat with everyone during coffee breaks, go for drinks after work, shoot the breeze, etc. You'll probably learn more about all the soft skills you'll need than anything else.
If you don't know your design patterns really well, I recommend starting there. Design patterns help developers communicate simple, commonly used designs with each other. I promise you will use these patterns for the rest of your career in OO programming. http://en.wikipedia.org/wiki/Design_Patterns The patterns are at the bottom of the page (with links to each) or just buy the book. It's great.
God, whoever works with me is gonna have a hell of a time. //why the fuck doesn't this work? 
I moved the code over to gitHub. https://github.com/DeathfireD/AllianceP2P
learn to prioritize and stick with it. you're going to get enhancement/change requests from ten different directions, and each one needs to happen yesterday. too bad. do one thing at a time, and *always* write tests first. it takes a little longer, but too bad. your customers just need to wait and let it be done properly.
TURN OFF REDDIT, try to feel out someone who works at the company, who you feel like is knowledgeable and willing to show you stuff. Go to them and ask them what you should know. Be attentive, but if you get confused about a particular detail, stop them and get clarification. DO NOT BE AFRAID TO ASK QUESTIONS! Follow the 30 minute rule, spend half an hour trying to figure out a problem, if you can't figure it out ASK! Eventually if you are competent you will learn. Many tech internships are essentially a training program where they pay you poorly, this is the case at my company. Good programmers are scarce, show humility and a pension for learning and you will go far.
// fuck me gently with a chainsaw.
More important than your programming skills.
System.out.println calls the toString() method of the Object you pass it. In this case, you passed an array object, which doesn't have a particularly useful string representation. What you're seeing is the default Object.toString implementation, which prints the class name and the object's hash code. If the assignment is to print the contents of the fieldDays array, you've got a few choices. Two ideas are: * iterate over the array with a for loop and write its elements one-by-one * cram the array element into some kind of Collection and print that. Collections tend to implement toString() in a way that you might find useful. Hint: check out the standard Arrays class... you might find something that will make this a one-liner. You're on the right track with the privacy leak thing. The Arrays class might help you there as well. 
Thanks very much for your help. I implemented your code with the Arrays class and that works nicely. I am a little concerned as I don't believe we have learnt that in class yet, which may mean we aren't allowed to use it, but if there is not another practical way to do so, I think I will stick with that one for now. This is just the first part, so I'll have to work through to the next steps now that I know it is working reasonably well and see what exactly I need to use my methods for.
Thanks for the response. I think, as the person above suggested as well, I will try using the Arrays class for now. I did consider printing them out one by one before using a for loop, but I don't think that is really desirable. Edit: Care to elaborate any more on the privacy leak aspect? As my code stands at the moment, is that safe? Or is there something I am missing?
this is why college is useless in our profession. no fucking code in the real world looks remotely like this. if it did, the dude would be fired. at least, i'd fire him. this is just silliness. i get that exercises are designed to teach a specific feature or whatnot, but still.. this is fantasy nonsense. edit: and just to be precise, Saltor66 meant to say that the default toString() for an array is the hashCode() of the array object (remember, arrays are Objects in java), not necessarily its address in memory.
Yeah, I understand what you mean. While I do understand the purpose of teaching specific things like this, it can be quite frustrating. For example, in the last assignment we had to test different sections of a string that was a code for a worker's different classifications to check that they were valid. And, I can't remember exactly what it was, but we were having an issue, and my demonstrator said to me 'In Intermediate Object Oriented Programming we would just use a "throw, catch statement" (or something like that, I am yet to use one), and you would stop getting the error, but you haven't learnt that yet." So we ended up having to do like, this quite complex series of nested if loops instead. Was pretty annoying.
Sure. The fieldDays array is supposed to be encapsulated by your Person class. That generally means that another object shouldn't be able to modify the array directly... Instead, it should have to call a method on your Person class to modify the array. That makes it easier to change the internal implementation of the Person class should you choose to (for example, you might decide to use a Set instead of an array). If you implement getFieldDays like this: public int[] getFieldDays() { return fieldDays; } Then any object can call that method and get a reference to the Person object's private state. That means that it could directly modify the array without the Person object knowing about it. So you can't return the _same_ array that the Person object is holding on to, but your idea to return a _copy_ of that array is a good one. Now you just have to figure out how to copy the array. As you'll often find in programming, there's more than one way to skin this particular cat. I was suggesting that you look at the documentation for the Arrays class to see if there are any methods that might help you. 
wow. without detail, it sounds like this instructor kinda sucks. if the point of that code is to validate input, then invalid input is expected. hence, no reason to throw an exception. throwing exceptions as a result of expected behavior is BAD! way bad. anyone teaching OOP should know that. they're called "exceptions" for a reason. it's something that shouldn't normally be expected to happen. for example, your connection to a database disappeared. it should NEVER be used for control logic. anyway, i'm glad to hear you understand the difference between what you're learning and real-world stuff. i suggest reading as much real-world code as you can. and, of course, do what your instructor asks and pass the course. good luck, and welcome to the field of IT!
The code provided does not even come close to producing what is expected. It would be " nullHiHowareYou"
but that's different. those are APIs meant to be used by applications. they don't have any usefulness in themselves, without an app. so, they're relying on you, the app developer to catch those and deal with them in an intelligent way. that is, there's a difference between code meant to be used *in* apps (utilities) as opposed to actual application code.
Why should library code follow different rules to application code? I'm not even convinced the distinction is meaningful - most app code often ends up becoming library code, after you realise you want to re-use it.
i meant that lib code is meant to be used in app code. building blocks and all that. there's a distinct difference. i'm not sure what you mean. ?
Awesome. I'm [cybergeek94 on GitHub](https://github.com/DeathfireD/AllianceP2P/issues/11).
It's a try-catch block. In other words try what I'd like to happen and catch an exception if that can't be completed. From there handle it accordingly. If for the purposes of testing you simply write to a file or ignore it for now, so be it. Programs produce exceptions, even "enterprise" ones, so the idea is for your program to handle it gracefully and not to impact it's functionality. Just my advice don't let a misunderstanding keep you from being able to glean knowledge from your instructors. Even the bad ones know something that you don't, and that you need to. 
If this is genuinely true then I'm feeling more confident about my upcoming job already!
/* getCalcRes */ public int getCalcRes(){ ....
You say that like operator overloading is a mistake, rather than a common feature that Java is missing for some reason. Admittedly, Scala's implementation isn't very good.
thatsthejoke.jpg
Read and fully grok Effective Java by Joshua Bloch
//will you buy me dinner first?
You're about to learn way more than you already have. Don't be afraid to ask your mentor questions. This helps them too since the faster you become competent in the ways of the company, the faster they can profit off of you.
That was going to be my suggestion. Also for that function itself, just do this `return (int[])fieldDays.clone();` or this `return Arrays.copyOf(fieldDays,fieldDays.length);` No need to do it explicitly.
// TODO Optimize this later (yeah right)
In arrays it always works without cast to X[]: return fieldDays.clone();
This subreddit delivers.
Also, just a speed/style tip - no need to individually copy every element, just use[ Arrays.copyOf\(\)](http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOf\(int[], int\)). Also, java int arrays are initialized to zero by default, so you can just remove the for loop in the constructor. Finally, your addFieldDays method is needlessly complex, and fails silently if an out of bounds index is provided. Do this instead: public void addFieldDays(int index, int days) { if(index &gt;= 0 &amp;&amp; index &lt; fieldDays.length) { fieldDays[index] = days; } } It's shorter, more readable, and behaves exactly the same. You'd be better off throwing an exception in the case of an invalid index, though. 
Operator overloading was left out of Java for good reasons. It's a terrible feature if you want long term maintainable software. Just ask the Smalltalk guys back in the 90's when IBM replaced it with Java as their primary development language because IBM had a number of major project failures at the time due to this feature. 
Actually, no, the joke is that interns spend a lot of time making coffee. Sometimes they even get to drink some.
My professors have always allowed me to use advanced code, as long as I can prove I understand it, as well as how to do the lesson the way it was intended. 
Java.
Slick includes SlickCallable which should make things easier to work with custom OpenGL states. See the tests package, there is one with a 3D cog. However, Slick is generally not designed to be used in this manner. Not only is it highly inefficient (so many push/pop operations going on under the hood every frame), but it's also not fully reliable when working alongside render textures (i.e. "image graphics"), scalable containers, or certain other Slick features. Ultimately if you want a good framework that can leverage both GL (like meshes, shaders, etc) as well as 2D functions (like rendering sprites, UIs, shapes, etc) then you should look into [LibGDX](http://libgdx.badlogicgames.com/), which is a much more powerful library.
A lot of programs are written in Java. If u want a program to be cross-platform you write it in java. Java is very powerful language
Yeah, that was my first interpretation. I figured both were intended.
Hey thanks for the help!
It is very easy to program cross-platform applications using Java, if any it only needs a few minor adjustments for each platform. It is also widely used for servers in the business sector.
Java is good for web applications. Server-side processing and database interaction (many good libraries for Java for interacting with databases by using Object Relational Mapping) and then displaying a view via JSP. I think C++ is more widely used for writing desktop applications/video games. C# is pretty comparable to Java but I like the tools available for Java better. And like everyone else here has said, Java is cross-platform.
Does it? It's been awhile since I have needed to clone an array. :)
Java is very powerful but languages based on C are where the performance can really be. Java has a lot of overhead because of how much it does for you (I personally like the analogy C++ with training wheels) but you'll also be better if you expand into the C family also. I just finished my junior year in a CS degree and I took my first 3 CS classes in a community college (CS1, CS2 and Object oriented programming) whereas at the university they used different languages for each, we strictly learned java, so when pointers and recursion with pointers came up I was behind the curve. It's not impossible to learn, of course, but you'll probably be better off if you branch out a bit before you get to the university level. Sorry if that was off topic but your question has more or less been answered - mobile development, web apps, cross platform, and when you don't need to squeak out every last piece of performance. It's still a very popular and useful language. Good luck and enjoy your future programming classes.
C++ for video game engines, most definitely. As far as desktop applications, it depends on the application. The Eclipse IDE is written (mostly) in Java. [DB-Visualizer](http://www.dbvis.com/) is written in Java. It's certainly possible to write very good desktop applications in Java Swing.
I wonder how developers in pretty much every major language besides Java get by then. (C++, C#, Scala, Python, Ruby, Perl, etc.) Obviously it can be abused, but the same is true of any language feature. I can write obfuscated Java just fine without overloading operators. I haven't personally seen any projects fail due to operator overloading (admittedly, I don't work at IBM), but I have seen plenty of Java code that would be more readable with operator overloading.
Consider the various String parsing functions for various numbers (ex. Integer.parseInt()). What should this function do if an invalid input is supplied? It could just return 0, but then how does someone using this method know if the input was 0 or invalid? This is where an exception is useful (Catch the NumberFormatException and do something like set a default value or warn the user). Throwing a NumberFormatException allows the various parse functions to be much more flexible and allow the application to do whatever it wants with invalid input.
For future questions, try to direct them to /r/learnprogramming.
Java is huge in the behind-the-scenes stuff of big companies. Amazon (where I work) is built largely on Java. 
I work with C# and Java on a daily basis and have for the past 6 or so years. I do a lot of web development (front/middle/backend). For great Java: - look at companies like netflix http://netflix.github.io/#repo - twitter and linkedin are now heavy invested in scala (JVM language) - Minecraft was written in Java (http://www.lwjgl.org/ For great c#: - [MonoGame](http://www.monogame.net/showcase) (Bastion and Fez) - [SuperGiantGames](http://supergiantgames.com/index.php/2012/08/bastions-open-source-branch-for-monogame/) (open source branch of bastion) - C# Blogs [ScottGu](http://weblogs.asp.net/scottgu/) / [Hanselman](http://www.hanselman.com/blog/) My personal experience -- I love the JVM, Scala, and the Java Community &amp; Ecosystem. I like C#'s syntax a little better than Java's. I've written c++/c in college, but I like not having to worry so much about garbage collection. To each their own. tl;dr: Each language does different things well. Learn the basic syntax and go play with them and make an informed decision about what's best for you.
I work in an investment bank. Server-side Java for data processing is what we do. Also, Java being bad for desktop applications isn't exactly a true statement. While your usual apps may not be Java, things like Minecraft exist. 
This is not about learning programming though. This question is what sort of applications are commonly developed in java and why they are. 
Thanks, I'll change my `addFieldDays()` method to that. I believe the reason is that it originally changed the value of the `africa, asia` and `americas` variables to the inputted values, but when I realised I should be directly altering that index of the array, I never really altered my method. EDIT: Furthermore, to the best of my knowledge we don't even have to check for invalid inputs, at least not at this stage of the assignment, so I could take it right down to: public void addFieldDays(int index, int days) { fieldDays[index] += days; }
Minecraft was written in Java, most definitely.
java is very big in web applications. There is also frequently internal desktop applications, and tools at companies that use java primarily for their webapps. The ecosystem is large and the code will run on various unixes and linux. Java gets used frequently in these situations over C# for these reasons. C++ is strongly represented in consumer desktop applications, but seems rare for internal applications at least in the industries where I have worked. 
Mobile app development is pretty big right now, look at Android it literally blew up in the last 3 years or so. But besides Android, Java is good for backend stuff like what a lot of people have said. I'll be a senior CS student this coming fall. Honestly though if you want anything to be web based and cross-platform Java is a pretty good pick for a Language. All of my courses have been mostly in Java so far, with a touch into C, C++, C#, and scripting languages. 
Not for everything but when you need every ounce of performance java is not what you should choose. 
&gt; Other then that I have found out that java is not that great for other things like desktop programs, because languages like C# or C++ are much better. What's your definition of "great"? I don't think you know enough to make proclamations like that. sincerely, Richard Nixon
Game package ca.vanzeben.game; import java.awt.BorderLayout; import java.awt.Canvas; import java.awt.Dimension; import java.awt.Graphics; import java.awt.image.BufferStrategy; import java.awt.image.BufferedImage; import java.awt.image.DataBufferInt; import javax.swing.JFrame; import ca.vanzeben.game.gfx.Screen; import ca.vanzeben.game.gfx.SpriteSheet; public class Game extends Canvas implements Runnable{ private static final long serialVersionUID = 1L; public static final int WIDTH = 160; public static final int HEIGHT = WIDTH/12*9; public static final int SCALE = 3; public static final String NAME = "Game"; private JFrame frame; public boolean running = false; public int tickCount=0; private BufferedImage image = new BufferedImage (WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB); private int[] pixles = ((DataBufferInt)image.getRaster().getDataBuffer()).getData(); private Screen screen; public Game() { setMinimumSize(new Dimension(WIDTH*SCALE, HEIGHT*SCALE) ); setMaximumSize(new Dimension(WIDTH*SCALE, HEIGHT*SCALE) ); setPreferredSize(new Dimension(WIDTH*SCALE, HEIGHT*SCALE) ); frame = new JFrame(NAME); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLayout(new BorderLayout()); frame.add(this, BorderLayout.CENTER); frame.pack(); frame.setResizable(false); frame.setLocationRelativeTo(null); frame.setVisible(true); } public void init(){ screen = new Screen(WIDTH, HEIGHT, new SpriteSheet("/sprite_sheet.png")); } public synchronized void start() { running = true; new Thread(this).start(); } public synchronized void stop() { running = false; } public void run() { long lastTime=System.nanoTime(); double nsPerTick = 1000000000D/60D; int frames=0; int ticks = 0; long lastTimer=System.currentTimeMillis(); double delta = 0; init(); while (running){ long now=System.nanoTime(); delta+=(now-lastTime)/nsPerTick; lastTime=now; boolean shouldRender = true; while (delta&gt;=1){ ticks++; tick(); delta-=1; shouldRender = true; } try{ Thread.sleep(2); }catch (InterruptedException e){ e.printStackTrace(); } if (shouldRender){ frames++; render(); } if(System.currentTimeMillis()-lastTimer &gt;= 1000){ lastTimer+=1000; System.out.println(ticks+"ticks, "+frames + "frames"); frames=0; ticks=0; } } } public void tick(){ tickCount++; } public void render(){ BufferStrategy bs = getBufferStrategy(); if (bs == null){ createBufferStrategy(3); return; } screen.render(pixles, 0, WIDTH); Graphics g = bs.getDrawGraphics(); g.drawRect(0, 0, getWidth(), getHeight()); g.drawImage(image, 0, 0, getWidth(), getHeight(), null); g.dispose(); bs.show(); } public static void main(String[] args){ new Game().start(); } }
Also project zomboid was written in Java. I think that you're right though, a lot of AAA titles are done in .NET or C++
* These kind of posts go into /r/javahelp * You didn't say what you *actually* need help with. Don't make us copy/paste all the code into our IDE's and try to guess what you're struggling with ourselves. Is there an error or exception? If so, post it (the exact message). Is your program doing something that you didn't expect? What is the expected outcome and what did you see? 
[XChart](https://github.com/timmolter/XChart) is a light-weight charting API for Java hosted on Github and Apache 2.0 licensed. Feedback is welcome!
Nice. What is the added value compared to [JFreeChart](http://www.jfree.org/jfreechart) ?
These were my motivations for creating XChart, but others may not see these as added value: * 100kB jar compared to 1.5MB * no dependencies * Much clearer code * Code on GitHub * Competing designs are good! Right now I think these are the concrete options JFreeChart doesn't have: * GGPlot2 and MATLAB themes * High-res chart export specified by DPI * Automatic CSV file(s) to Chart * Chart to CSV file(s) Obviously, JfreeChart has a lot more features that XChart doesn't have yet, but that is only relevant of you need those features. Mainly, I wanted a light-weight charting API, where I could easily plot some data without a big learning curve involved. I found the JFreeChart API to be quite convoluted. (Did you ever look at the source? :) )Three years later, and XChart is where it is today. It is what it is. Quite a few people find it to be excellent. Cheers! 
&gt; (I personally like the analogy C++ with training wheels) I understand where you're going with this, but I think the "training wheels" bit is a little misleading. Java is in no way less powerful or "real" than C++; they're just the result of different design decisions. C++ opted to expose more low-level concepts in order to give you more control over the performance of your code. The downside is that you have to be more diligent about memory management and platform-dependence, both of which mean that you often have to write more book-keeping logic (this has gotten a lot better in C++, but it's still true). Java opted for garbage collection and portability. As a result, you get to focus more on the logic of your program, but you sacrifice some speed. (Disclaimer: the previous paragraph is in no way meant to be an exhaustive list of the design differences between the 2 languages, nor is it meant to be an endorsement of either as the best exemplar of the concepts discussed.) &gt; so when pointers and recursion with pointers came up I was behind the curve Most languages have at least one concept that makes them unique / interesting. Otherwise there'd be no reason to write them in the first place (aside from the fun of it). My point is, the lack of pointers put you behind the curve *for writing C programs*, just like C's lack of first-class functions puts you behind the curve for writing LISP. 
I guess I don't, everything I know has been learned through internet research.
https://news.ycombinator.com/item?id=5771126 http://tech.slashdot.org/story/13/05/26/0418229/java-developer-says-he-built-launched-basic-open-source-office-suite-in-30-days
Are you replying to me or puredoubt? You appear to be agreeing with me.
Thanks a lot for this detailed response! Just to clarify my intentions: I am making a full 2D game, that is supposed to have predefined 3D background, so texture preciseness or interactivity are unnecessary. I really only need to render simple planes, such as a running road / treeline with flat images as trees, etc. No models at all. I was hoping that I would not have to incorporate a full 3D library to achieve this, but unless I find a way how to add a simple render 3D function to Slick I will probably go with the library you suggested.
I'm saying that there is a distinction between library and app code. I'm agreeing with puredoubt, throwing an exception makes sense for library code as long as the docs specify when the exception gets thrown.
Why? Is [Apache Open Office](http://www.openoffice.org/) not open enough?
These are hilarious. I wouldn't mind being able to use @WrittenWhile on some of my university assignments.
Can you explain what cPlayer() do, and it's relationship with the variable cPlayer ?
Is the cPlayer() method doing something besides just return the cPlayer variable?
The true master doesn't blame his tools. 
TIL a variable is the same thing as a method
Because he wanted too?
I don't specialize in Java, but looking at your code I think you shouldn't blame it.
@PleaseDontShowUpOn should include http://thedailywtf.com, otherwise hilarious!
This is tagged AprilFools but there's actual download counts on the files. Does this really work?
Well, it works in the sense that annotations by themselves are not doing anything. It's just a way of, you know, annotating classes, methods or members. What, if anything, happens with these annotations is up to other code.
well, there are enforceable annotations listed if you &gt; ... run your applications with the javaagent:gag-agent.jar option I'm almost interested in trying them out.
I don't follow at all... Comments make it harder to understand what code does?
In wildfire I found this check in https://github.com/wildfly/wildfly/commit/4ed76ceef253c568b7475780a92e49a034f540c5# i.e. the 7.2.0-Final (and then 8.0.0.Alpha1) release build but this was in Feburary and the one we use. Then they probably switched to some branch for "-redhat-x" and merged in the changes between Feburary and now?! If anyone can find this source code, please share
Annotations do something in JUnit and JEE. I guess these ones don't do anything. 
[Link directly to description (wiki)](https://bitbucket.org/Darkyen/darkyenus-script/wiki/Home) Note: I have been told that exe version in downloads may not work exactly as intended, if you don't feel like experimenting, download .jar instead.
So I have a few questions that I always ask when I encounter a new language or tool. Perhaps you could answer them for me: 1. What is the purpose of this scripting language? 2. What other tools or languages is the language most similar to? 3. What kinds of things does it excel at and what kinds of tasks does it struggle with? EDIT: Formatting.
What source code are you exactly missing? Isn't everything in the Maven repo for 7.2.0.Final-redhat-8? From the main download page at http://jboss.org/jbossas/downloads there's also something linked called "Source": https://www.jboss.org/download-manager/content/origin/files/sha256/14/14270f549164166f3114a990260bca1b2a1ffbb15d472e3c1a401f8acc226e65/jboss-eap-6.1.0-src.zip 
That depends on what will I need to do. I don't have any exact plans, however I am ready to support it and extend it if anybody will want to use it.
This is extremely flawed analysis. Java performance has been in the same order of magnitude as C/C++ for a long time now. The difference is so small that it has no impact on language choice. I think the confusion comes from people looking at performance micro benchmarks and seeing Java performance around 2x-4x slower than C++, and thinking that it means that a system written in C++ will run 2x-4x faster. The reality is that you would be unlikely to see a measurable difference in a real system, because the chances are that the real system's performance is mostly bottlenecked by, e.g., I/O or algorithm choice and swapping in a 2x-4x "faster" language will do nothing measurable. In fact, in a real system you might very well see Java beating C/C++ simply due to modern garbage collectors beating manual memory management hands down.
I would have liked for the article to contrast abstract classes with composition, or at least mention composition. Abstract classes aren't the only way to share functionality and define relationships between classess. Composition gives you much more flexibility as long as you aren't afraid to forward a few methods too.
Didn't older versions of C also allow `static` local variables?
You can write plugins for the javac?
here is a checklist http://colinm.org/language_checklist.html ;)
Yes I know but an application server is more than source code. File structure etc. It would be a pain to know how the standalone.xml looks like, the structure of the modules directories etc For you other link, read the rules: &gt;WARNING: By participating in the Program and accepting these terms, you represent that you will be using the Red Hat Subscriptions(s) for development purposes only, and Red Hat is relying on your representation as a condition of our providing you access to the Subscription(s). If you use the Red Hat Subscriptions for any other purposes, you are in violation of Red Hat's Enterprise Agreement set forth below and are required to pay the applicable subscription fees, in addition to any and all other remedies available to Red Hat under applicable law. Examples of such violations include, but are not limited to, &gt;- using the services provided under the Program for a production installation, &gt;- offering support services to third parties, or &gt;- complementing or supplementing third party support services with services received under the Program. I want to checkout the code and build a comlete server and use it in production as I did with 7.2.0-Final
I think it's part of ANSI-C standard, the author probably said so just to be on the safe side.
Method returns cPlayer And the "computer" was wrong. I used oldest school debugging methods via print to isolate the issue cPlayer was changed well before this breakpoint, yet IntelliJ insists it's 1, and eclipse insists I have no variables other than "args"
it returns cPlayer
not a single thing.
which returns the variable
TIL never to come to you for help
I agree, adherence to the java style guide definitively indicates bad code.
You can! The catch: ZERO official documentation from outside of a single article in a sketchy Java magazine... Seriously, and all information about the AST/symbols has to be deduced from the ****ing source, it's madness. I'm head banging on this for 3 months now, and only started to be able to do what I wanted recently...
Static class member when the method is static, otherwise it's a instance class member. If I understand correctly from your question, in my implementation, non-static methods won't generate a static class member but a instance class member. Of course, this can always be emulated like you said: declare a variable outside of a method and use it only in that method. In here, I localize the declaration of the variable to the enclosing method that actually should use it, so the class namespace is not polluted with the various possible "static" local variables.
Stop blaming your tools &amp; looking for excuses for poor programming practices.
Stop being useless?
I only glanced at article and I'll read it later but as far as I got into this post Lombok already solves properties problem efficiently for me, take a look: http://projectlombok.org/
So perhaps you should say "I hate IntelliJ"?
Maybe you can write the documentation for it? This sounds interesting to me, and I think I remember there was a opensource java group at fosdem that had a site for this kind of information. Edit: It's this https://java.net/projects/adoptopenjdk/
Do while loops, returning from methods in multiple spots, using own comment system (not java doc), returning method calls...and that's 10 lines of code. Accept you're still learning, and you'll make your life much easier. 
Good luck in this industry, son.
I am currently writing a little on it as I go on in a little private blog I have, will publish it when I get a couple more articles :)
Here's an even simpler distinction between abstract classes and interfaces: use abstract classes to implement the [template method pattern](http://en.wikipedia.org/wiki/Template_method_pattern) and use interfaces to implement the [strategy pattern](http://en.wikipedia.org/wiki/Strategy_pattern).
I wont need it. I simply have to quickly identify people like you and I'll have little in the way of obstacle.
import javax.swing.JOptionPane; class twoNumbersGotArrestedForDoingMath { public static void main(String[] args) { String VariableOne = JOptionPane.showInputDialog("What is the First number?"); String VariableTwo = JOptionPane.showInputDialog("What is the Second number?"); Double answerSum = VariableOne + VariableTwo; Double answerDifference = VariableOne + VariableTwo; System.out.println("The sum is " + answerSum); System.out.println("The Difference is " + VariableOne - VariableTwo); System.exit(0); } }
You are trying to do mathematical operations on a String. Java does not treat String types as numbers as something like JavaScript would, convert them to doubles by doing something like Double.valueOf(VariableOne)
says the guy who cant use a debugger
Iam confused the row of fibonacci 3 isnt 1 1 2 it should be 1 2 1, You might want to clarify what this problem is asking and write it so we can understand vs copy and paste from your homework.
question 3 since you are not allowed to create a second array which is needed for to sort liner something similar to bubble sorting should work. 
This is what i did for (int i=0; i &lt; array.length / 2; i++) { int temp = array[i]; array[i] = array[array.length - i - 1]; array[array.length - i - 1] = temp; } return array; But it says that its incorrect 
int len = 3; len = len*len; int[] myIntArray = new int[len]; I think is all the first problem is asking
nevermind. I changed 1 to i and got it right. thanks 
You can use a method in Sting class to convert to int or parseInt as well
java and python
yes this looks good this as i said is similar to bubble sorting, but it could be a little faster if oyu wanted
explain what the problems are asking again please, I have been a Java TA for a few years now so ill be happy to help but the question is confusing
See? Less useful than printf. All you do is talk.
Even though it covered everything I could think of, I thought it was pretty poorly written. 
I think it is asking for an array that has its length squared and returns that length squared with all the int (0,1,3) in a pattern. 
Okay so the number sets the amount of ints in an array. for example 5 will have {0,0,0,0,0}. Now it takes the previous 2 numbers and adds them to return the next number in an array for example {1,1,2,3,5,8} 1+ 1 =2, 2+1= 3, 3+2=5.. And so on. 
 double v1 = Double.parseDouble(VariableOne); double v2 = Double.parseDouble(VariableTwo);
maybe you should post the code, I'm inclined to believe the code more than your word.
that you should be able to do like you did before a for loop for all the items in the array i + (i+1)
Lines starting with four spaces are treated like code: if 1 * 2 &lt; 3: print "hello, world!"
I asked my dad about it about 2 mins after making the post, he told me about the parse thing, but thank you guys so much for helping me
It's functional now, through debugger unassisted debugging, but public static Player cPlayer(){ return game.getPlayer(game.getCPlayer()); } And, you can trust or not trust, but getCplayer is a getter for the current player's index for use with getPlayer, which is a getter for the player object from a player object array with the passed int. So, cPlayer() is a combined getter to just get the current player object, and simplifies the view of the code (and continuous uses of the call) by condensing game.getPlayer(game.getCPlayer()); to cPlayer(); I mean, sure, now that I'm posting it, I see I could very well have made that in the game object itself, but shouldn't have any bearing on the debugger's variable reporting. I probably hadn't thought of it since getCPlayer was something I needed as is, anyway. Whole thing was caused by coder/personal logic error, but isolating the issue was most definitely only made harder by trying to use debuggers.
Sorry? I can't understand the problem. Post the exact compile error and maybe the declaration of `tempImage'
It turns out I'm just an idiot, I thought it was telling me that the variable c was a double when the variables stored in tempImage were doubles
Glad you fixed it
also an extra accent aigu, playing it safe!
p.s. &gt;It would be a pain to know how the standalone.xml looks like, the structure of the modules directories etc The build scripts that are part of the source takes care of this and results in a fully working binary distribution, including the right config files and the right module structure etc.
This is more of a question for people who are running Ubuntu on Android on a Kindle. It has nothing to do with Java in particular.
Thanks for the reply, could you possibly point me to the right subreddit?
I always wondered if would be possible to get rid off exception handling completely. Would it be possible with a javac plugin ?
http://stackoverflow.com/questions/177189/how-to-implement-a-single-instance-java-application
From what I've seen, the most common method, at least on Unix/Linux is to have a file that contains the PID of the process that was just launched. Then, if the file exists, you can check to see if that process is running. If the file doesn't exist, then you would assume it's not running. It's easily done on Linux with a shell script, but you should be able to get the PID from within the software as well.
WebLogic will be covered more in a later report from ZeroTurnaround which doesn't have such a developer spin to it. It will focus more on production environments. Si (ZT employee)
JDK provides tool jps that allows you to get PIDs of running JVMs and the main class name (with package). From there you can use grep or the tool to see if there are instances of your applications running. 
You are probably correct. I don't care very much anyway as I'm not in the US and use it for internal use. Also correct about support agreement. I work for such a dysfunctional company that they believe that they have a support agreement but they don't know for sure etc, as always, there are better ways to spend you time..
I'll bet you'd get more love on http://stackoverflow.com. Ganbatte!
Note that the answer using a lockfile (http://stackoverflow.com/a/2002948) is writing to CWD which may not be what you want (it certainly isn't on \*n?x). Also, I think it may fail to clean up after itself in the event that the shutdownhook throws an Exception.
I actually did my PhD on EMF/GMF, but that was almost two years ago, haha. :( Have you asked the GMF newsgroup/forum? Have you searched through the history? (Do this! Now!) I'm pretty sure I had the same problem. I think I might have partially fixed it, but I can't remember how. If I remember correctly it had something to do with shared element IDs, or shared transactions, or using a different Command framework, or modifying OpenDiagramPolicys. But I can't guarantee that I did. You could checkout my project and have a hunt around to see if I fixed it. I had a look through SVN and http://jevon.org/wiki/GMF and I couldn't find anything. http://code.google.com/p/iaml/ In any case, I spent a LOT of my PhD debugging GMF (probably 20% of my time). There were a lot of bugs and workarounds that I had to implement, by extending/rewriting the Xtend templates, JET templates, custom .gmfXXX generators, plugins through extension points... It's not so bad once you get used to it. The architecture is pretty good. Edit: When you close and reopen the original diagram file, do the elements then display? Can you refresh the open display somehow?
Yes, this is the way I'd implement it in Unix systems. I don't know if it is possible with Windows. I would not like to call an external program (taskmanager or something).
Thanks! This looks promising.
What does this buy me exactly? I don't see how this saves me any time or effort. Declare static variable or class level one? Er, okay.
Open a TCP port on localhost (127.0.0.1) upon startup, say 32123. You don't need to actually do anything with this port, but it will serve as an indicator that the program is already running. Then, any later instances will not be able to bind to 32123 and you will get an exception. Catch the exception and exit.
Search for pidfile.
This is hacky but creative. I like it.
Your installation is missing some important files. I was just checking my 64bit jre 7 and it has a file in the lib folder rt.jar which contains the ClassLoader files you are missing. It's around 50mb so I'd advise reinstalling or trying to do a diff of your install with a working jre 7 install on your pc. 
Oh dear... I'm only on it for about 4 months, and already I'm doing nightmares, I can't see myself working on that for my PhD :) ! Anyway yes I think I went to every possible places in the Internet to search for some pieces of advices, but really that's poorly documented most of the time. But I'll search again on the newsgroup, maybe I missed one point. About the closing diagrams, yes I did not write it but we have also 2 other behaviors: if I create diagrams in a project, then close/open the project, the last content (written) of the diagrams is saved, but now unmodifiable... (sort of, still the new modifications are not shown and the old ones can not be modified) (really I need to do some webpage with screenshots, otherwise it's really complicated to explain...) And another thing, if I want to open a closed file (in a project or no), the tooling part of Gmf do not display well (let's say only 1 tool group of the 3 it should display normally), maybe it's linked? I'll check your project, maybe you'll be my last hope... In anyway thanks for the help! You just made my day
That seems extremely convoluted. One tip, do not use statics methods unless it makes sense because usually it creates dependencies on other classes which is a horrible thing to do. In your original image, you show yourself calling cPlayer(), and you say that it returns the players index or whatever (I can't decipher your explanation), when in fact when you call your cPlayer() method, it doesn't return an int as you would expect, instead it returns a Player object and when you request it in a context where you want a string it will call it's toString() method (which is inherited by the Object class). Honestly, your static methods are the one's destroying your code, I would just refractor the whole thing getting rid of all those and encapsulate each object so they can survive dependent from other objects.
The code isn't destroyed, functions both as expected and intended, and all objects survive independently, so I'm not sure what you're talking about. Point on the toString default, but it's only ever used in context of strings, so I'd not have noticed that logic error, but it also is working as intended regardless. Though, as point of trying it, I added on .getId(); to the end of the return for cPlayer() (Player object method to get the same data as an int, instead of getting it from the defaulted toString()) game.getPlayer(game.getCPlayer()).getId(); and it flags .getId(); as being unresolved, while offering it as an autofill...
How about instead of setting the text to an empty String you simply mark the entire text. That way whatever you type replaces the text.
The code for iterating throuh every element of a 2D array, I type that all the time.
 log.debug("Um...." + someValue.toString()); turns up more than I'd like. (Time to upgrade to log4j 2, so at least its log.debug("Um...{}", someValue.toString()); to save on the string concat. And I type String whatsit = request.getParameter("whatsit"); if (whatsit == null || watsit.isEmpty()) { response.sentError(400, "Bad request: Missing whatsit parameter"); return; ] enough that its probably time to write a wrapper for HttpServletRequest that knows what parameters it should be taking. Hmm. Thats an interesting project. Time to go read up on anotations, I think.....
You can save on the toString() as well, as loggers call that for you. For the last one, if (StringUtils.isBlank(watsit)). Google Apache commons to resolve the import error ;)
Cross post to /r/javahelp and read the sidebar better next time.
I agree. My first thought is named pipes, but it looks like platform support for that is [pretty much non-existant](http://stackoverflow.com/questions/634564/how-to-open-a-windows-named-pipe-from-java). It does look like it might work, if you take into account all the different platforms your app might run on.... http://v01ver-howto.blogspot.com/2010/04/howto-use-named-pipes-to-communicate.html Iterating through [all java processes](http://blog.willhaley.com/java-single-instance/) seems hacky and bug-prone. So what else would you recommend? *edit* *edit* ~~maybe it would be possible to create a named pipe using a [PipedInputStream or PipedOutputStream](http://tutorials.jenkov.com/java-io/pipes.html)?~~ no, nevermind; that's completely different.
yes, the file will still be there, but the OS should not leave the lock on it. I don't recommend CWD though (consider if CWD winds up being in C:\Program Files) - better to use ${java.io.tmpdir}
Every fucking time I have a new project, you already know I'm going to need AT LEAST one nested for loop to get through a 2D array. God it's so annoying.
I'm writing a little library called Handy that should make tasks like that trivial. Reckon you'd be interested at all?
Read up on Spring MVC, slf4j and logback.
Logger once per class: private final static Logger LOGGER = Logger.getLogger(WhateverClass.class); newline System Property: private static final String NL = System.getProperty("line.separator"); and then using that new line variable everywhere, especially in StringBuilders. final StringBuilder sb = new StringBuilder(); sb.append("a first line").append(NL); sb.append("a second line").append(NL); // do stuff with sb.toString() Also, checking input files and warning when they're bad. final File maybeAFile = new File(somePath); if(!maybeAFile.exists() || !maybeAFile.canRead()){ final String currentDir = System.getProperty("user.dir"); // log warning with the provided path and current working directory // return or throw an exception } Also! Checking nulls, all the time. if(someThing == null){ takeEvasiveManeuversAndExitGracefully(); }
Gosh that would be freaking amazing, I would love, and probably use this on an everyday basis. 
How much of a performance hit do you actually take by just using the pretty much universal \n?
[Project Lombok is perfect for this](http://projectlombok.org/features/Log.html) &gt;Logger once per class:
Hello, Visitor pattern.
Describe your idea and I'll tell you if it's possible ! "get rid off exception handling completely" is very vage for me to interpret :x
It's a proof of concept (that is also functional). You could say the "isolation" is non-reproducible by normal source code. (every class member can read your variable if they want. However, this is *impossible* in the plugin.
I'm not sure about any performance issues, but I try not to hardcode anything that might be system dependent, including newline and path/file separators. 
Neat. I'll keep that in mind.
 String NL = System.getProperty("line.separator"); None, since `NL` *is* `\n` on many operating systems. The differences are in Windows, newline being `\r\n`, or some server/DB OSs using `\n\r`. It exists because although nowadays it is fine for terminal/console output, many programs on OS A don't recognise the line ending for OS B. MS Word sometimes doesn't recognise `\n` unless preceded by `\r`, and unix tools sometimes read `\r\n` as two line breaks after each other, rather than just one. For debug, `\n` is fine in 99% of cases. However, when writing to file, especially for commercial software, using `NL` avoids lots of errors that might otherwise occur.
Java does a lot of work that you never see, e.g., on web servers and internal tools. Desktop applications are typically written closer to the platform, e.g., C# for windows and Objective-C for OSX. A couple notable exceptions written in java are Eclipse and Minecraft. 
Give me a few days.
Java 8 would solve your problem with streams and lambdas. 
Create a lock file. This has a con though, if the user force quits, the lock file is not deleted. In this way though, you could at least notify the user they may be starting an unnecessary process.
OK I tried moving rt.jar from my pc to my kindle, it moved successfully but it still wouldn't run, with the same error as before. EDIT: I copied it to java-7-openjdk-common and ended up with a new error: error while loading shared libraries: libjli.so: cannot open shared object file: No such file or directory
List, Set and Map filters, which can't be done with foreach for some reason: List&lt;T&gt; list = ... for ( int i = 0; i &lt; list.size(); ++i ) { if ( condition(list.get(i)) ) { list.remove(i); --i; } } Iterating over a Map is gross: Map&lt;K,V&gt; map = ... for ( Map.Entry&lt;K,V&gt; entry : map.getEntrySet() ) { // operate on entry.getKey() and entry.getValue() here... } Also, programming for corporations (where I usually can't use projectlombok or SnakeYaml) often involves a lot of really tedious file I/O and brittle serialization and a lot of generating and re-generating and refactoring getX() and setX() and equals() and hashCode(). Productivity soars when using projectlombok. Somehow that's still better than the code I had to write for some of my university courses.
/**
I see.
Care to explain? 
I do. The code has more vertical blank space, so you see less code per screen than with compact braces, but it makes blocks stand out so much better. I find this worth the trade off.
Am I the only one who uses Guava for iterating?
It seems like you'd save a lot by just writing an abstract class extending JFrame and copying into your new project. `catch(Exception ex) {}` Effective Java #65: Don't ignore exceptions. At minimum you should be debug logging if you can't find the system look and feel..
Save yourself some declarations and just use `System.lineSeparator()` :).
A problem with this is that people tend to make these trivial bits of code tailored to their program, but I guess it is possible to change your code a bit to work with it.
A teacher of mine always tried to pound it into our skulls that we needed to use loggers/logging for debugging multithreaded programs, but I never bothered because I prefer to be "CS lazy" and just get it right the first time ;)
You can do it with one loop if it's a square array. public static final int SIZE = 9; int[][] grid = new int[SIZE][SIZE]; for (int i = 0; i &lt; SIZE * SIZE; i++) { foo(grid[i / SIZE][i % SIZE]); } I'm pretty sure that's right. It was handy code when I wrote my Sudoku solver.
I kept writing tagged-object filters for a while. So much evolution. Finally did this reverse-polish stack thing, and kept it forever.
me too!
With my large projects I often create one static class for constants and methods that are common to many classes (such as date handling). This is where I put the logger and it is called when required with a simple Classname.methodname call.
This is the main reason I do it, it just helps with readability.
If you're using Eclipse, you can type "syso" and then control-space to auto-generate System.out.println("Some text"); I believe it puts the cursor in between the parenthesis too. Edit: Thought you needed to type "sysout", but turns all you need is "syso"
&gt;I prefer to be "CS lazy" and just get it right the first time ;) Ha!! *That* must be my problem. I should try to get it right the first time. Noted. 
if( x != null ) { if( x.y != null ) { if( x.y.z != null ) { jesus.christ( x.y.z ); } } } Edit: I'm talking about null checks in general, not this case specifically.
I do that with some of the smaller projects. When debugging anything complicated, it's useful to have different loggers for different classes because then you can handle them differently. I might, for example, want to raise or lower the logging level for one class and leave the others untouched. 
It works in both Windows and Unix, and it will auto unlock in case of program crash private FileLock fileLock; // keep reference to fileLock or GC will auto unlock your file ;) boolean isLocked() { try { fileLock = new FileOutputStream(your_app_config_dir + "/.lock").getChannel().tryLock(); } catch (IOException exception) { return false; } // "null if the lock could not be acquired because another program holds an overlapping lock" return (fileLock == null); }
Pretty sure I used something similar if not exactly the same for a project I did that was doing image matrix laplace transforms. I was then looping that loop to apply multiple filters in another loop for timing control.
&gt; Iterating over a Map is gross Better than using an Iterator like you used to have to...
Or, you could create a dumpster `Util` class full of random handy methods like that.
Try it yourself. Write some code, compile then decompile using JAD or something. I have decompiled much code over the years and never seen decompiled code like "First" + "Second" + "Third"
Three words: [Law of Demeter](http://en.wikipedia.org/wiki/Law_of_Demeter). Goes a long way towards preventing "train wreck" code like that.
Scala to the rescue: for (a &lt;- theArray; b &lt;- a) …your code… Alternatively, you can just use `theArray.flatten` to turn it into a 1D array.
Scala to the rescue: val list: List[T] = … list.filter(condition) // Returns a new List with only elements matching 'condition' val map: Map[K, V] = … for ((key, value) &lt;- map) { // Operate on key and value here }
Yes, you can. String concatenation is translated by the compiler into `StringBuilder` calls. Each sequence of string concatenations gets its own `StringBuilder`, though, so you'll have to make one manually for anything more complex than that.
SUN Y U NO DESIGN `Format` TO BE IMMUTABLE?
So … How does Demeter append person().address().city().zipCode() to his StringBuilders?
Scala to the rescue: log.debug(s"Um....$someValue") If you're using [Grizzled-SLF4J](http://software.clapper.org/grizzled-slf4j/), the log message isn't actually evaluated unless debug logging is enabled for that logger. (On the other hand, an anonymous class is generated for every use of such a logger. Faster execution, but more memory usage. This can be optimized away using Scala 2.10's macros, though, which I'm hoping a future version of Grizzled-SLF4J will do.) Also: val whatsit = request.getParameter("whatsit") match { case null | "" =&gt; response.sentError(400, "Bad request: Missing whatsit parameter") return case s =&gt; s }
I know, I know… My point is that I'm constantly checking for nulls. It's my biggest gripe about java. I've been a full time java programmer for ~15 years, my guess is that about five of those years have been spent checking for nulls.
The Law of Demeter is about encapsulation, so you can control the values of those fields within the class itself. Thus, if no class outside the class can set the String values of person, address, city and zip code, then you can easily make the guarantee that the values are never null (specifying the empty string for empty components), allowing safe concatenation using a StringBuilder.
Loggers don't call `toString` for you; the implicit `StringBuilder` used for string concatenation does.
As is Scala, in which you can use a trait that defines a logger: trait HasLogger { protected val log: Logger = … } class SomeClass extends SomeSuperclass with HasLogger { log.info("Hello, world!") }
Your world sounds nice. I'd like to live there :).
&gt;Logger once per class Scala to the rescue: trait HasLogger { protected val log: Logger = … } class SomeClass extends SomeSuperclass with HasLogger { log.info("Hello, world!") } &gt;newline System Property Some libraries define a `static` field containing this that you can `import static`. &gt;and then using that new line variable everywhere, especially in StringBuilders `String.format` defines the sequence `%n`, which expands to the platform's line break. &gt;checking input files and warning when they're bad Why bother? Attempting to read them will result in an exception anyway.
Yep. It's been called the "billion dollar mistake" for a reason.
Quite. But there are ways to alleviate the pain: The Elvis operator; The safe navigation operator… But Java's maintainers have always chosen to ignore the problem rather than address it.
That's clever but much more difficult to read than two nested loops. Is it really worth saving the one line?
&gt;Scala to the rescue: Neat. If I end up using Scala for anything, I'll play with this. &gt;Some libraries define a static field containing this that you can import static. Cool. I can't always add dependencies easily, so java's System is easier. &gt;String.format defines the sequence %n, which expands to the platform's line break. I just found that today. I'll keep that one in mind too, thanks. &gt;&gt;checking input files and warning when they're bad &gt;Why bother? Attempting to read them will result in an exception anyway. That's the easiest method, sure. Sometimes it isn't practical to wait until the files are read/used before making sure they exist. For example, user-provided input. Might as well validate user input and warn immediately if necessary. Likewise with heavy processing--it's nice to know that the inputs are valid before kicking off something that will take minutes or hours to finish, risking it failing while no one is around. 
Start a github account and help out projects fixing small bugs. Create a few projects of your own. Having a resume of things you've done is pretty much the most important thing. I'm planning on encouraging my kids regardless of their field of college study to do this, so that they basically end up with domain knowledge + programming skills. Which will make them eminently more desirable than someone with just domain knowledge. 
IMO it'll be hard to land a job in a data center over the next 10 years. Cloud computing/open stack means there will be fewer jobs in the data center. With that said, round out your skills for whatever the job market wants in 5 years. I'd get familiar with linux, shell scripting, and pick two languages (I'm partial to java and python) and learn them well. Shoot for an internship in 3 years. Don't let your grades suffer in college. Many people say grades dont matter, but quite a few major companies look for minimum GPAs in the 3.75 range. Figure out something you are interested in, and make a program to build your skills. Better yet, find a open source program and try to get code committed.
This is a godsend!
 for (int x = 0; x &lt; array.length; x++) { for (int y = 0; y &lt; array[].length;y++) { array[x][y] = something or another; } } 
Give Groovy a try. 
downvoted for poor coding practices lol
Oh man, no one said getters/setters/toString/equals/hashcode IN EVERY BEAN
That really does sound familiar. Something about editing domains or commands or something. Debugging helps a _lot_ - set a breakpoint on element selection/edit, and explore GMF. The learning curve isn't flat but it isn't impossible. :)
You can do crazy customization with the eclipse ctrl space scheme. An example that I use is iterating over a map ... I do "for"control space and it grabs the nearest map and sets up for the loop for it and pulls out the map entries on the current iteration to local variables then puts the cursor below. Map&lt;String, Integer&gt; map = new HashMap&lt;String, Integer&gt;; for ctrl space .. goes to Map&lt;String, Integer&gt; map = new HashMap&lt;String, Integer&gt;; for(Map.entry&lt;String, Integer&gt; entry : map.entrySet()){ String key = entry.getKey(); Integer value = entry.getValue(); {cursor} } There isn't really a good tutorial that I have found, it was more just looking at what eclipse had already done and trying to figure out new things from that.
I'm pretty new to Eclipse, so I'm still fleshing out the possibilities of it, but so far I really like the JavaDoc generation as it really gives me no excuse to not write extensive documentation on my projects. I also like the fact that it has such nice refactoring capabilities which are linked to hot keys.
*shrug* I just like how I can access any array element with only a single number. With a comment, I bet it could be usable by other people.
How has no one mentioned getter/setters yet? They're pretty much the worst offender for redundant code bloat I can think of. C# and Scalas solution to them is at least one million times better. C# public int x {get; set;} public int y {get; private set;} public int z {get {return x + 1;} set{x = value - 1;} } Scala class x(val x:Int, val y:Int) //Autogenerated get/set { def x_=(arg:Int) x = arg + 1 }
Love it! Great idea!
learn a shitton of spring I never method chain more than 2-3 anymore I kind of miss it :(
So model objects are a lie and we should go back to directly manipulating inputstreams now? Or are you one of those people that think xml/json aren't backed by model objects. 
The less popular way to do it: Object[][] array; for(Object[] o : array){ for(Object object : o){ o.do(); } }
I want to like Scala, but some of the syntax really bothers me. Also, I can't mix Scala and Java nicely (can't have Java-&gt;Scala-&gt;Java dependencies without your build process going sideways) even though they're essentially the same language (same platform, same mode of thinking, etc).
Sadly, most programming teachers aren't good at programming, or often teaching. Schools will take just about whoever, you find 1-2 gems, the rest, you'll wonder how they put there pants on in the morning. Your going to need to self teach more than be taught. (and continue to do that for the rest of your carreer) 
While perhaps not always available (damned corporate library standards), [projectlombok](http://projectlombok.org/) makes that really easy: @Data @AllArgsConstructor @NoArgsConstructor // &lt;--- magic class SomeBean { private int id; private String name, address; }
It's just a visual thing. The code is then designed to work no matter what the look and feel is, and so it doesn't really matter if it can't find the look and feel. It will just be the ugly metal interface. Ninja Edit: At any rate, I normally have this try catch in a common file that I share between my projects and extend. That handles my logging and what not. So normally, yes, this is logged.
I kind of actually like IBM getting it more. Have you read the documentation those guys do? They also have this ocd perfectionist mindset in everything they touch.
the plugin thing is my only gripe with eclipse, and that's just because about half the time I get the download and it's missing it's update sources out of the box :(
haaa haaaaa you sir haven't experienced the exquisite hell that is Jdeveloper :P
&gt;some of the syntax really bothers me. Can you be more specific? &gt;can't have Java-&gt;Scala-&gt;Java dependencies without your build process going sideways Not true! Run the Scala compiler before the Java compiler in your build process, and give your Java sources on the Scala compiler's sourcepath. Then you can mix Java and Scala code freely.
My IDE does that for me.
I'm new to java so I've only ever used IntelliJ IDEA which does getters and setters for me. Is that not the norm?
Doing networking recently. DataInputStream dis = new DataInputStream(client.getInputStream()); DataOutputStream dos = new DataOutputStream(client.getOutputStream()); It's really annoying to type out. for(int i=0; i&lt;arrayList.size(); i++){ Connection c = arrayList.get(i); if(c == null) continue; } When you write networking code, you find it hard to trust "for(Object o : arrayList){}"
Your IDE automatically generates getX, setX, equals and hashcode, or your IDE lets your class definition be exactly what I listed there? What happens when you refactor 'address' to be 'location': does your code still use getAddress() and setAddress(), or do they automatically get updated to getLocation() and setLocation()? When you refactor 'address' to be an Address object, do the getters and setters automatically and instantly change, or do you have to delete them and regenerate? When you add a new member variable, do you have to re-generate equals and hashcode on your own, or do they automatically update?
Don't be irritated... this is minor stuff, you can get used to either way very quickly. IntelliJ has optional lightly colored vertical lines from the start to end of a block that I find very nice. 
Like... Iterables.transform and Iterables.filter? I can't wait for lambdas, but until then I don't think it's worth the overhead of creating a new Function&lt;&gt; object for every for-loop.
I still do "First" + "Second" + "Third" all the time for lists of &lt;10 things. StringBuilder feels like a micro-optimization at that level, not worth the extra lines of code (which I don't mind writing but hate looking at later).
Launch4j has an option to do this... It's been a long time since I used it but I remember liking it. (Install4j does it too and it is very good, but not free)
Firstly, I didn't realize those annotations generated equals and hashcode. That's cool stuff. But IntelliJ IDEA will generate getters and setters for all of your properties. When you change the name of a property it will ask you if you want to update the names of your getters and setters as well. If you change the type of the object you will have to manually delete the getter and setter then ask IDEA to generate new ones for you.
No. Just no. * Questions like that belong into /r/javahelp * You're not elaborating on your question. What *exactly* do you need help with? What have you already tried? Did something happen that you didn't expect it to? Hint: there's not enough space in a title to ask a question. A title is there to summarize what a post is about. * You're dumping 500 lines of **badly** formatted code on us without any further explanation. * Put your code on pastebin.com or githup or something * Point out the location/method that you're having problems with If you're not putting any effort into your post, neither will anyone else.
No, downvoted for acting like the kind of developer nobody here would want to hire. 
Or if you're as lazy as I am, you can type "syso" and then CTRL+Space. :)
Great tools !
You can filter a list using google guava libraries: http://code.google.com/p/guava-libraries/ Iterable&lt;House&gt; filtered = Iterables.filter(allHouses, new Predicate&lt;House&gt;() { @Override public boolean apply(House p) { return accepted.contains(h.getColour()); } }); 
People still write getters/setters? Why? When I see those in modern code, I take it as a code smell and a sign that the coder didn't think through the API their class exposes. You shouldn't let your internal state be poked at directly with getters/setters, and instead you should expose methods that perform some semantically meaningful action.
Doesn't really work for JPA entities, does it?
I always put the auto generated getters/setters at the bottom of my class with 10 blank lines between the last "normal" method and those. Then I can - in a way- pretend they are not there.
I'm sure there are tons of badly designed frameworks relying on getters/setters, but that hardly proves anything.
You can iterate over a Map in an easier way like this: Map&lt;K,V&gt; map = ... for (K key : map.keySet()) { // operate on map using key } Of course, if you need to modify the map instead, you'll be better off with a declared Iterator.
If you are going to mix Scala and Java code, you'll be better off using interfaces instead of using the actual classes. This way you can always swap implementations when needed, and also you wont get unneeded dependencies.
Since people clearly have trouble letting go of their preconceived notions, lets take JPA type frameworks as an example. Your goal is to persist an object graph into a relational database (and lets assume for the sake of the argument that it's somehow a sensible goal). How do you do that? Require every object to implement, by convention, public methods named in a particular way that expose the object's entire internal state globally? Then build a pile of reflection hacks to read that state and dump it into a database? Which part of that isn't utterly and ridiculously broken?
I wouldn't say JPA or any other framework is necessarily bad because it depends on JavaBeans properties.
Huh? WTF are you talking about? JSON objects are model objects which are usually represented in Java as standard Javabeans. Don't hijack topics dude.
Sucks to be you then.
Yeah but then you'd have to use Eclipse. (ducks)
Scala as usual is unreadable. 
Why? Do you actually have a good reason for this requirement? Because if not it seems like it will cause more trouble than it's worth...
How is that unreadable? It's not noisy or verbose. The x_= is somewhat strange syntax, but it takes like a minute to understand what it does and then you're golden.
Iterating over keySet and looking for value implies a search for every key. This has a performance cost. And it is morally wrong. Iterating over entrySet saves you that performance cost... but looks like crap.That is also morally wrong. Sometimes java really gets in the way...
In Eclipse Juno you can use some annotations and static analysis that will save you some checks. See http://help.eclipse.org/juno/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Ftasks%2Ftask-using_null_annotations.htm. I don't know, but I'm sure IntelliJ should have something like that.
Thanks for the tip! Edit: missed a word
I've always liked Eclipse. What do you recommend?
You go wrong at internal state. If I have say a `User`, then its `name` property is not internal state, but is the very state that is the whole reason that the User entity is there. And no, houses don't build themselves (as precaution, before you'll start bringing it up ;))
IntelliJ IDEA has a lot of nice shortcuts for these things. "sout" and "iter" for example. Creating your own templates is pretty easy too. 
I don't agree. I'd argue `name` is very much internal state, and not something that you want to allow anyone to poke at directly at any time. Are you really sure you want to allow anyone at any point in time to change the name of your `User`? Is that a semantically meaningful thing to allow? Does the logic that uses a `User` instance really care about what the name is? Probably not, your system logic is likely to care about things like creating a presentation for the screen, not what the particular name is. If you truly just care about a name (and some other similar values), then you're dealing with simple data and shouldn't be wrapping it in an object in the first place. It's good practice to let data be data, and use objects for what they're meant to do: provide an encapsulated abstraction for some semantically meaningful operations. And even if you hold that `name` is not internal state. The vast majority of things that you would have to build getters/setters for to allow JPA style frameworks to operate are unarguably internal state.
So what does it do? Edit: You proved my point.
Ever heard of code folding? 
Some simple things to try. Easy to check for nullness: Is player1 null? is dojo null? is player1.playerImage null? Are you sure? Basically, you can't get a NPE for the primitive componentsCheck the objects. Does this happen every time, or just sporadically?
Are you not using a debugger?
It's odd that printing the values works but the comparison doesn't. Try breaking the code out like so: int border = getDojoBorder(true,dojo); int imageWidth = player1.playerImage.getWidth(); int dojoScale = getDojoScale(dojo) * 0.8; if (player1.x &lt; border - (width*scale) { to see which line the NPE comes up on.
I copied the entire statement into a print statement and got false, not null. And yea happens every time
I can only see the line on which the error is on, not the actual object
IntelliJ: type sout + tab 
Regardless of the statement, have you tried checking to make sure any of those objects are null? EDIT: Also, the_456's suggestion of itemizing the components of the test is a good idea.
The other system property I'm using all the time is "file.separator"
Yeah, all the time. Java's File class keeps tabs on that String as well. Sometimes it's a bit quicker to type File.separator than System.getProperty("file.separator"). AFAIK the two behave exactly the same. 
None of them are null
Interesting, the player width is 16 all the time, but when i press enter to do an attack i get an exception. The value is still 16 tho. The error is at the width declaration
Well I run your code on a testing machine and it worked fine (2 times Singleplayer vs AI). Have no idea where you get a NPE. Please provide where this occurs. Because running JudokaComponent doesn't bring up anything so the error is either on your configuration or you are doing something else than just running the game. On the other hand your usage of git is… not so good. There's no good reason to include a bin-folder, your Readme is empty and your linked resources in the project file only work on your computer. EDIT: To make this clear: by where I mean what are you doing not where in the code. I can read error messages ;)
&gt; then you're dealing with simple data and shouldn't be wrapping it in an object in the first place. One school of thought preaches that everything should be an Object ;) In many languages there's no better representation anyway, and I'm not sure there even is a better representation.
If it's just data it should be in a data structure like a list, set, sequence, map, tuple, etc. What languages don't have data structures? What is the the reasoning behind wrapping simple data into objects? If you let data be data, you can use a million reusable algorithms to operate on the data structures with zero modification, instead of wasting time composing and decomposing objects, maintaining object graphs or rewriting existing algorithms.
Because none of those have clear types per attribute. A class is simply a collection of known attributes with each attribute having its own type.
I'm working on a number of small projects related to database. Previously I used to use DataNucleus, and now I use Sql2o. Connection connection = null; try { // Wrap SQL execution in transaction. connection = this.sql2o.beginTransaction(); List&lt;Foo&gt; foos = connection .createQuery(FooDAO.LONG_SQL_STATEMENT) .addParameter("foo", bar) .executeAndFetch(Foo.class); connection.commit(); return foos; } catch (Exception e) { // Rollback and throw exception. if (connection != null) { connection.rollback(); } throw new RuntimeException("Something goes wrong..."); } Basically each data access objects consists of 4 to 5 such methods for CRUD operations, I just keep copy and paste the codes and modify it for each method (e.g. add/ remove parameters, map to various POJOs).
I guess you're a NetBeans user. /** and press enter at the end of line generates a comment block. I just learnt this today. edit: explanation.
A database table works great in the relational domain, but you don't program an app with only tables. There's "regular" code as well, and this works with classes and objects.
Based on my experience, here are my suggestions: - Major in computer engineering / computer science and make really good grades. A 3.8 GPA will get you so many callbacks, even with no experience. - Avoid honors classes -- they can bring down your GPA and most employers don't even notice them. - Work on pet projects as much as possible -- make a mock web application of a service you really like, adding your own twist/innovation (just an example). Research available technologies/frameworks (database persistence, web/REST APIs, unit testing, etc) to achieve your desired results. - In January/February of your sophomore year of college, go to your university's career fair and apply for internships everywhere that interests you. Most good students at my school were able to land an internship during the summer after their sophomore year (or co-op, which is basically a longer term internship where you take a semester off school to work). Repeat every summer until you graduate. - Once you have good grades and a little internship experience, you're pretty much a shoe-in for an entry-level job once you graduate. Use that to get your foot in the door somewhere, and try to switch jobs every couple years if you see growth opportunities or chances to leverage salary increases. This also expands your skillset *and* keeps your skills current, which is absolutely mandatory in this industry. If you stick with the same job for too long, some employers see that as a good thing, while others may think you're not very motivated. - By the way, I would encourage you to compete in academic programming competitions as well while you're in high school (or even college) -- they're really fun, you'll learn a lot, *and* you'll probably become really efficient at writing short programs. Once you master those pesky problem sets from these competitions, your CS classes in college will be cake. Hope that helps! 
Oh, TIL. When using Eclipse, I usually type /***/ then move the cursor between 2nd and 3rd asterisk and press enter.
Syso alt space ಠ_ಠ
Are you sure JudokaComponent has been initialized before level? If not you will be passing null into Player as its image.
Relational databases are not the only types of databases, they are used in many other types of cases as well. However, you're missing my point, which was that if what you are dealing with is only data, then you shouldn't be wrapping it into objects and you should just let the data be data and use the well known tools for working with data (e.g., databases). In particular, your example of a `User` should not be an object if all you want from it are a bunch of simple attributes like `name`. You shouldn't do this because the moment you define `User` you also need to implement logic that understand what a `User` is, i.e., you end up reinventing wheels where you could've used already implemented data structures and algorithms. When you should use an object is when your `User` isn't just data, but rather an abstraction of some systems level component (although there are plenty of good arguments against the whole idea of OOP). For example, if your `User` is an entity that encapsulates a cryptographic identity, it could offer an API that includes `String signMessage(String message)`. The moment you start doing that you will introduce internal state which must *not* be exposed globally, for example, you should not be exposing the key used to sign the message (you are breaking encapsulation). And getters/setters do exactly that: expose your internal state globally. That's why blind use of getters/setters is bad practice and should be considered harmful. Java carries around loads of legacy junk and outdated practices, one of which is getters/setters. Or can you come up with an actual reason why getters/setters are a good idea, other than that some badly designed legacy framework X requires it and that you've just always been doing it without actually thinking it through?
I'm confused on what your suggesting to do as an alternative. Are you saying instead of passing User objects around we should just be passing database row objects or String Maps around? I feel like your confused on what JPA actually does. It's not its own database, it's a mapper between objects and a traditional relationship database. The JPA object might not contain explicit logic, but you use annotations to determine how the object is persisted and validate. You then use visitor pattern to operate on the object. I've heard the getters/setters are bad argument before, but I feel they always miss a huge qualifier. I think **unnecessary** getters/setters are bad, but often we actually need to be able to get access to or change a field in an object. Saying all getters/setters are bad suggests that people should be using public fields instead which is even worse. If I want to display data to a user and allow that user to change that data, I'm going to need getters and setters, but obviously I shouldn't provide getters/setters to secret keys and internal state the user shouldn't know about.
I did not imply anywhere that JPA is a database. In fact I explicitly stated that it takes an object and dumps it into a database, i.e., it's a mapper between your object graph and the database. My point is that JPA is badly designed because it requires objects to globally expose their internal state through getters/setters. That's not a fundamental requirement to solve the problem, you can persist your object graph without requiring getters/setters, so it's just plain bad design. As for what to pass around, it's very simple. If it's just data, then you just pass around data. If your data is a list, you pass a list, etc. Your objects will operate on some data, or example, you might have a GUI list that renders your list of Users. Instead of building some convoluted logic to turn your User objects into something that can be rendered (while worrying about what happens when some code somewhere else concurrently tries to modify your objects' states), you can have a reusable GUI list object that knows how to render itself from a database query and a simple column -&gt; element mapping. &gt; Saying all getters/setters are bad suggests that people should be using public fields instead which is even worse. Actually the exact opposite is true. Getters/setters are close to using public fields (often precisely equivalent in practice), which is bad. What I've been saying all along is that you should not be exposing your internal state, whether through getters/setters or public fields, and rather should be designing your object's interface to contain only semantically meaningful actions.
Or JSF, or EL, and I'm sure there are others to add to that list. Getters and setters added for the sake of it are a bad idea, but for example creating any non-trivial EE app will almost certainly require them being present.
 cannot access which java: No such file or directory The body is a typo, I was on my phone at the time. I mean java 7
Which one? /usr/bin/java or /usr/lib/jvm/java-7-openjdk-armel/jre/bin/java? Exception occured while VM initializing. java/lang/NoClassDefFoundError: java/lang/ClassLoader
 ls -l /usr/bin/java lrwxrwxrwx 1 root root 22 May 19 12:43 /usr/bin/java -&gt; /etc/alternatives/java Also, just incase you ask: ls -l /etc/alternatives/java lrwxrwxrwx 1 root root 46 May 29 12:43 /etc/alternatives/java -&gt; /usr/lib/jvm/java-7-openjdk-armel/jre/bin/java 
I doubt it since this is the main method public static void main(String[] args) { System.out.println("[Info] Starting Judoka " + VERSION); JudokaComponent judoGame = new JudokaComponent(); JFrame frame = new JFrame("Judoka by Andreas Kruhlmann - " + VERSION); JPanel panel = new JPanel(new BorderLayout()); frame.setContentPane(panel); frame.add(judoGame, BorderLayout.CENTER); frame.pack(); frame.setResizable(false); frame.setLocationRelativeTo(null); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); JudokaComponent.start(); } As you can probably tell JudokaComponent is the very first thing instantiated
Same error
JJ-ARTS AFRICA JACKARTS- for creative stone sculptures out of AFRICA. Export of sculptures and rough stones for sculpturing.
Ah, so wrong direction, but correct instinct. It's that the player image is getting set to a null value during one of the animations. I added this to Entity: protected void setPlayerImage(BufferedImage playerImage) { if(playerImage == null) { throw new RuntimeException("Set player image to null."); } this.playerImage = playerImage; } Then rather than calling entity.playerImage = 'foo' directly I called setPlayerImage. That way you can track down where you're setting it to null (and you are setting the player image to null).
I see, yea i should probably implement getters and setters while i still can. I'll try this, thanks!
That is hardly an elegant solution.
Ok se here's what I've got: The exception dela works great, and i get the exception here in Player.java if(playerState == PlayerState.THROWING){ //System.out.println(currentTechnique.ANIMATION.SPRITES[1]); if(throwTimer % 120 &lt; 40) setPlayerImage(currentTechnique.ANIMATION.SPRITES[0]); //THATS THE ERROR else if (throwTimer % 120 &lt; 80) setPlayerImage(currentTechnique.ANIMATION.SPRITES[1]); else if (throwTimer % 120 &lt; 120) setPlayerImage(currentTechnique.ANIMATION.SPRITES[2]); }else if(playerState == PlayerState.BEING_THROWN){ if(throwTimer % 120 &lt; 40) setPlayerImage(level.player2.currentTechnique.OPPONENT_ANIMATION.SPRITES[0]); else if (throwTimer % 120 &lt; 80) setPlayerImage(level.player2.currentTechnique.OPPONENT_ANIMATION.SPRITES[1]); else if (throwTimer % 120 &lt; 120) setPlayerImage(level.player2.currentTechnique.OPPONENT_ANIMATION.SPRITES[2]); } So i did the following: * Printed the currentTechnique, worked! * Printed the currentTechnique Animation, worked! * Printed the currentTechnique Animation Sprite array, worked! * Printed the currentTechnique Animation Sprite array element 0, NOPE! * Printed the currentTechnique Animation Sprite array element 1, NOPE! so it must be somthing with the sprite, but what? Here is the animation class: public class Animation { public static final Animation MOROTE_SEOI_NAGE = new Animation(JudokaComponent.MOROTE1, JudokaComponent.MOROTE2, JudokaComponent.MOROTE3); public static final Animation morote_seoi_nage = new Animation(JudokaComponent.judokaStanding1, JudokaComponent.judokaStanding2, JudokaComponent.judokaStanding1); public static final Animation UCHI_MATA = new Animation(JudokaComponent.uchiMata1, JudokaComponent.uchiMata2, JudokaComponent.uchiMata3); public static final Animation uchi_mata = new Animation(JudokaComponent.judokaStanding1, JudokaComponent.judokaStanding2, JudokaComponent.judokaStanding1); public static final Animation O_SOTO_GARI = new Animation(JudokaComponent.oSotoGari1, JudokaComponent.oSotoGari2, JudokaComponent.oSotoGari3); public static final Animation o_soto_gari = new Animation(JudokaComponent.judokaStanding1, JudokaComponent.judokaStanding2, JudokaComponent.judokaStanding1); public int ID; public BufferedImage[] SPRITES; public Animation(BufferedImage step1, BufferedImage step2, BufferedImage step3){ BufferedImage[] SPRITES = {step1, step2, step3}; this.SPRITES = SPRITES; } } I don't see the problem here, non of the images i pass into the final techniques can be null, since they have been properly loaded from a file. I don't know where to go next
Maybe try /r/gamedev, I think this not only applies to Java
Maybe the problem is that they're loaded statically? There's no guarantee that everything is being loaded in order. Can you try putting the animation initialization in your JudokaComponent initialization to make sure that's not what's happening?
How would i do that? :P
Thanks!
And Scala is?
Well it's an actual solution. Hiding it away with your text editor isn't. And yes, I would consider Scala an elegant solution. There is no need to write your own getter/setters 99% of the time, so why shouldn't the compiler handle it?
www.java-gaming.org is a great resource.
The new IntelliJ based android dev platform looks to be an improvement on the old eclipse version. I've installed, but not used it yet, got good reviews. http://developer.android.com/sdk/installing/studio.html
C# developer here and I'm interested in Java as well so have my up vote. My guess is learning the framework itself will be the biggest challenge, the paradigms and tooling should be relatively similar.
Err, why weep over not having Resharper? Just get IntelliJ IDEA which is **made by the same people who make Resharper.** There. No more tears.
I think the best way to dive into working with Java is to port a program you're familiar with into Java. Of course, not everybody has one of those, so here are some alternatives. You need to download the following: The latest version of the Java 1.7 JDK Eclipse * Get the Eclipse IDE for Java EE Developers if you're planning on doing any enterprise work * Get the Eclipse IDE for Java Developers if you're just tinkering You'll want the following plugins for Eclipse * FindBugs * TestNG Eclipse is fairly robust. At this point, I only miss ReSharper when trying to figure out why something is being flagged as an issue. Eclipse does pretty much everything else. Another thing to note: if you're planning on working at a company with Java, I would suggest reading up on Application Servers. There was a good article a few days ago regarding the most popular Java Application Servers on [ZeroTurnaround](http://zeroturnaround.com/rebellabs/the-great-java-application-server-debate-with-tomcat-jboss-glassfish-jetty-and-liberty-profile/) that may prove helpful. Each server should have tutorials or some kind of quick guide to getting set up and running.
So read yourself a copy of Thinking in Java (feel free to browse past obvious things) and then Effective Java (skip the details here at your own peril). Learn the basics of Maven, and then Ant if you're bored. Save yourself the trouble of a long wasted love affair with Eclipse and just get IntelliJ IDEA from the get-go. Realize that Sun/Oracle provides some of [the best API documentation in the entire world of software development](http://docs.oracle.com/javase/7/docs/api/) and take advantage of that. Learn JUnit if you want to actually work on most software projects that use testing and learn TestNG if you want to feel entirely disappointed with JUnit but not actually learn a widely applicable skill :) Otherwise, I'd just hit the ##java IRC channel on Freenode and start reading and writing code until you feel comfy.
Seems that way to me. This actually reminds me of [this post](http://www.reddit.com/r/ProgrammerHumor/comments/1d2vzt/as_a_microsoft_developer_programming_on_an_open/) and its top comment
I've made that transition. IntelliJ for the win (Eclipse is crap no matter what people tell you--utter crap). If you don't like IntelliJ, try Netbeans. But, you will miss LINQ, and properties, and proper events. C# is a better language than Java, but the JVM is equal to .Net.
get an image of the piece, create one for each array and hide it? upon user click, set the image to show then redraw/refresh screen?
You have x and y *coordinates*, and technically you're looking at an *ellipse*, not an oval (oval being a vague term, ellipse more specific). Look at http://en.wikipedia.org/wiki/Ellipse and try it yourself. If you're having a hard time, show what you've tried already and ask for specific help.
Nothing to do with Java.
They have made huge improvements to the performance in the later maintainance releases.
In a Java program I have an array list of Oval objects. When a user clicks on the graphics pane I need to be able to tell which Oval they clicked on. Sorry, I thought that I needed to do this is Java was clear from the context.
Sorry for being clueless. But what does this do for you? What is a use case?
Nm its a hibernate alternative. orm software.
Still, nothing to do with Java. Your problem is a mathematical one. Edit: https://www.google.com/search?q=determine+if+point+is+inside+ellipse
Should "concordant" be "coordinate"? Does "on the oval" mean inside the boundary of the oval or on the edge? Assuming the oval is centered on the 0,0 coordinate, I think the formula for the edge is: (x/Wd)^2 +(y/Ht)^2 =1 so, a(n ugly) java method would be: boolean onOval(float Wd, float Ht, float x, float y){ return ( (x/Wd)^2 +(y/Ht)^2) == 1; } 
I'm looking for any point inside, not just on the edge.
Then it's just: &lt;= 1 instead of ==1 But, if the oval isn't centered at (0,0) the equation is wrong too.
Next, the miracle of instantiating with "new".
The alternative JVM languages help ease the pain somewhat.
&gt; Learn JUnit if you want to actually work on most software projects that use testing and learn TestNG if you want to feel entirely disappointed with JUnit but not actually learn a widely applicable skill :) The TestNG fans at my place of employment are small but vocal minority.
In fact, it's the reference implementation (RI) for JPA in Java EE. This one is extra special, since it's the first implementation of JPA 2.1, which is new for Java EE 7. EclipseLink was originally called TopLink, and Hibernate was created as an alternative to TopLink.
It's my first game ever, so I didn't expect it to be perfect. Most of this i learn as i go. Thanks alot I'm gonna implement this as soon as I can! :D
&gt; Eclipse is crap no matter what people tell you--utter crap Why? I like Eclipse.
Awesome!
Great info tyvm!
Other useful tools, since IntelliJ was already mentioned: Static analysis: PMD, Checkstyle, Findbugs Lightweight, but awesome, editor: Sublime Text Web Testing (not java specific): Selenium CI (not java specific): Jenkins Web Frameworks: many good ones, I like Play! Persistence: JPA, Ebeans, Morphia (mongo on play) 
Don't forget reified generics.
Download Netbeans and do some of their web tutorials. You can download the IDE with already integrated servers so you do not need to worry about configuration. netbeans.org 
IT's funny I forgot about dragon drop while I was asking this question. Also no the note of not using java for GUI's do you know of any other cross platform GUI languages?
Intellij is a symphony, eclipse is a rap song. I hate rap
Oh, those constructor arguments. I always figured GBL was designed to work with a ui generator, it's difficult to remember what all those options do. That said, once you learn it I don't think you need another layout manager.
Well, you can have Java on back-end, and HTML/js up front.
I always liked gridbag. I used to make new layout managers that simply leveraged gridbag underneath to make a whole new layout strategy. I think the problem people have with gridbag is the syntax. It's incredibly tedious, with line after line setting 5,6,7,8,9,10+ different properties in a gbc before adding one more component to the container. That gets to be a lot of lines of code. It needs a DSL, which is essentially what my custom layout managers were for me. I never use Box because I could never figure that shit out. Alignment was impossible (for me).
And being able to compare strings with ==
For our Very Special programmers.
[Totally Gridbag](http://madbean.com/anim/totallygridbag/)
Eh, it just shows me what I can already deduce from the trace itself. Not that useful. 
The main problem is that GridBagLayout has so many parameters (about 11?) that the only two ways to use it are either by using the 11-arg constructor, or by reusing a single GridBagConstraints object. The first option results in unreadable code (is argument #8 the anchor, or the fill?) while the second option results in stateful code (oops, I've changed the weightx for the third cell, and as a result the seventh cell now looks weird...) Personally, I've moved onto [MigLayout](http://www.miglayout.com/) and haven't looked back. If you want some kind of super-complex customizable layout manager, this does a lot of the heavy lifting GridBag is used for, while being a lot easier to customize.
You're going backwards! Go back to C#! Grab IntelliJ IDEA to make it less painful ;)
Just try IntelliJ and you'll know. 
**[Switching from C# to Java, which “gotchas” I should care about?](http://programmers.stackexchange.com/q/32385/24856)**
Now what would make this really useful would be if you could upload your code and it could show you all of the offending lines right next to the stack trace.
Sorry, but I just don't agree ;) For me things like User, Order, etc are perfectly well modeled as classes with no or little behavior.
I don't even mess with the constructor arguments. Just set the fields on the `GridBagConstraints` object, which are public. The best part is that the constraints object can be reused between add operations, so you only have to tweak the parts that change, like `gridx` and `gridy`.
As a Java developer I was tasked to do some C# .NET and most things seem to directly translate. The biggest hurdle was not having eclipse and the shortcut keys that I was used to. Also the way that it would put the first bracket of a method on a new line really annoyed me in Visual Studio.
You can use Guava's Tables: import com.google.common.collect.*; import com.google.common.collect.Table.*; class Test { static final ImmutableTable&lt;Integer, Character, String&gt; SPREADSHEET = new ImmutableTable.Builder&lt;Integer, Character, String&gt;() .put(1, 'A', "foo") .put(1, 'B', "bar") .put(2, 'A', "baz") .build(); public static void main(String[] args) { for (String i: SPREADSHEET.values()) System.out.println(i); // prints foo bar baz } } There's a mutable ArrayTable too which [also has guaranteed traversing order](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/ArrayTable.html#values(%29).
Scala also has [case classes](http://www.scala-lang.org/node/107) which will autogenerate accessor functions.
Effective Java, 2nd Edition. I learned more about Java in the first 30 pages then I did at university.
Though, I must say, there is something to be said for design in the IDE command line. Computer Science is so utilitarian design-wise. 
I'd like to see more articles on optimization. I don't think there's enough.
What part of &gt; "[...] no previous programming experience [...]" would make you think that Effective Java would be a good answer? No. Just. No. Effective Java is not a book to learn the basics of programming from.
&gt;What is the best way to dive right in? &gt;&gt; First, read two books and learn something that isn't Java If you're just a hobbyist programmer, you don't need Maven. If you're coming from a C# background, you probably have enough experience with Java-like idioms to skip Effective Java until you start serious development. JUnit's handy, but not at all necessary. The answer is to learn the syntactic (no `delegate`s, no `struct`s, etc) and library differences (Collections, Files, regex), and start writing increasingly complex programs.
in b4 head first
you still can... it just might not be the result you want
I was looking at the Head First Java book but read that it was quite out of date now (published in 2005 I believe). Is it still a good book even now we have Java 7?
Yeah I just had a look at Effective Java and while it looks like a fantastic book it looks like it covers how to code better with Java for those already familiar with the language not a beginner.
Actually, I don't even do that in C#. Typically I have to control the comparison to deal with multiple cultures and case-insensitivety. You don't get that control with ==
Please, please, please don't encoded data in your IDs. Also if people do, try at all costs to ignore it and get it from the correct place. Whoever is supplying this data now is either restricted to the ID format forever or if they change it they could break every or some of the consuming systems. Other than that and interesting post.
The Deitel Series is(are?) my favorite. They have a How to Program Java, what makes them so great is that they use the exact same model concept for every language. So once you understand Java and decide to learn another language, you basically code the exact same things in the new language. I used them to learn (in order: C++, C#, and then finally Java)
This is the third language we released after initially launching for C# and later for Vb.net. It is able to deal with quite a wide variety of common situations. Check http://www.semanticmerge.com/#features We're still in beta mode so it is free to download. We're looking for feedback (http://plasticscm.uservoice.com/forums/196398-mergebegins) and giving free unlimited licenses in exchange :-) Next steps involve better graphics, MacOS and Linux and... multi-file semantic merge support :-)
Then I'd like to see your article on how they could have fixed it and why it's bad design.
Let's start with storing the birth date as part of the unique identifier. How about caching 1.3 million records in local RAM when a 214MB savings is to be celebrated? Maybe, in an article that is supposed to be about memory optimization, how about replacing the 32 byte date field with an 8 byte long? How about packing the name strings? 
How ... hard is it to read a stack trace? Most of my difficulty comes from deciphering error codes from third party drivers and libraries, which this won't help with.
Yes, the majority of the language remains unchanged from Java 6 to Java 7.
This only way I see this being useful is as some sort of IDE plug-in with tight integration to your workspace and links to source code.
Gosh, governments should know better. Leaking personal data every time you use this ID... jeez. 
IntelliJ IDEA if you want the closest thing to Resharper, and otherwise eclipse is a great alternative. Mostly it will be just reading the Javadocs and getting used to it, as they're almost syntactically identical.
I have a feeling that functional programming will subvert OO as the dominant paradigm in the industry pretty soon.
Mostly what other people said. C++ is predominant amongst desktop applications but there's a market for web apps written in Java.
Hey, I'm a C# guy who got a job as a Java engineer, and had to learn Java quick. :) Some top tips from my personal experience: - IntelliJ IDEA is the only usable IDE (but thankfully, it's awesome!) And like ztj said, Resharper is also made by IntelliJ, and parts of IDEA feels a lot like Resharper. - If you know C# well, you'll probably find Java quite antiquated (because, well, it sort of is, in comparison). The main things I miss are not actually LINQ (it's nice, but Java's foreach syntax is a little neater anyway), but: -- Reified generics -- Assembly level access modifiers (i.e. internal) -- Metadata on types for reflection (i.e. there's no practical way to reflectively get all the classes in a package in Java) -- Being able to define your own value types (Java calls them primitives) -- Proper attributes (as opposed to the horrible Java annotations) - At first Java can seem pretty 'messy', too, when you're first learning, because there's a lot of old, deprecated stuff that was first created by Sun, and now Oracle has generally replaced. But once you get to know all the right things to use, it's pretty much the same. Oh, and before I forget, stay away from Java's Date and Calendar stuff! Compared to DateTime and TimeSpan, it's a nightmare. Just use longs :) Also, yeah, application servers are a good thing to check out. I've had a lot of tinkering with Glassfish at work. It's a beast but it's really configurable and does a good job. Much better than IIS in my humble opinion! Hf, gl! Edit: Oh, and if you want a nice learning exercise, try making a List&lt;&gt; that works with a primitive type, like an IntVector class. I had to do it a while back, it's quite fun... And useful if you ever need a high-performance List&lt;int&gt; :P
Can someone explain to me the XML part that generated the 1.5GB heap size? Did someone generate the 1.3MB of persons input data into one big XML file?
I was just making a joke because this question is asked a lot and it's the same answer everytime: Head First. I used the C# head first to get into programming entirely. It's good book. do you understand the principle of OOP? yes -&gt; start cracking off on some android projects. no-&gt; buy a head first book. 
this sounds great! whats the next language you plan on supporting? 
I found the stock photo to be distasteful.
tl;dr: Avoid XML.
Unfortunately when blogging became a thing a whole bunch of people gave advice on how to write good blog posts, and in that advice was nearly always some variant of "you should always have an image that goes with your article". Cue years or shitty stock pictures that have little to nothing to do with the subject at hand. A lot of people have moved on from that trend, but a lot remain.
And with good reason - it's possible that processing/simplification will remove a crucial piece of information (though in this case, not much information appears to be lost except the full package path).
A pint of whiskey always does the teick.
To put it simply, it's the Java Dictionary (as in Merriam-Webster's Dictionary). It is a structured documentation detailing all the classes available in the JDK distribution. It is the Java master reference, and you should definitely learn how to read it. Here's the docs for JDK7: http://docs.oracle.com/javase/7/docs/api/ The JDK comes with the *javadoc* tool which allows you to create professional looking documentation in the same style for your own libraries.
Here you go: http://docs.oracle.com/javase/7/docs/api/ Every class and method is documented in the API documentation.
The language-level additions from Java 6 to Java 7 were mostly cosmetic and were covered by [Project Coin](http://openjdk.java.net/projects/coin/).
Mac and linux are already on the roadmap, it will be available soon :)
We are asking our users for future steps, if you have any preference, please contribute here with your votes. http://plasticscm.uservoice.com/forums/196398-mergebegins
Older thread, but most actual to me. After being a (php) developer with mainly Netbeans, I find Eclipe (now doing Java EE) incredibly dumb. Everything is so different with no clear advantage, simple tasks (like searching) are just harder to accomplish, I miss the simple and quick improvements from the NB plugins (yes, Eclipse also has plugins, but a lot of things are missing, ex. numbered bookmarks, found it but inferior to NB one). All around, even if I'm progressing and learning to deal with it, I find it unbelievable that some people speak so high about it. I mean, it barely works, that's it.
[Joda-Time](http://joda-time.sourceforge.net/) is being incorporated into Java 8, so Date/Time stuff is going to suck a lot less... eventually.
the only info i have got from that video is, I need to be underaged ....
What about the snoo up there on the header?
I honestly didn't notice the antenna on the current snoo, that's why I made this. If this qualifies as snoo, we should submit it of course. But all the examples in the linked thread resemble the official snoo a lot more than our current snoo.
really nice :)
if someone would like to do a hires version 1500x1500 300dpi. I'm cool with it. 
You went through the effort of making a movie showing something that could be shown in 2 lines of text. thiscantgowrong.class
&gt; CORBA COMM_FAILURE 1398079696 Maybe I'll google it... maybe.
I found myself retyping elementary operation on arrays over and over, like computing the sum of all values, finding the maximum value, or computing the mean. Now I've compiled all these operations into a separate class and my code is so much more readable now :)
is there a way to download the whole thing so that I dont have to connect to the Internet everytime I want to read this?Or do I have to save it page by page
I don't know what you answered to because the post has been deleted, but if you're looking for a cross platform GUI framework, maybe sneak a peak at JavaFX (included in your very own JDK7). Swing is great, but it does show its age.
Netbeans: same
&gt;Cue years or shitty stock pictures that have little to nothing to do with the subject at hand. &gt;A lot of people have moved on from that trend, but a lot remain. It seems like you are either ignoring, or missing the point of what /u/b0b0b0b and others have found distasteful.
WTF is a "snoo"???
I think it comes with the JDK. Check in the installation folder.
The reddit alien
Is that his name, or what?
Yeah, it was supposed to be the name of this site but instead became the name of the mascot
I still like the Duke
Nothing. What's snoo with you?
A book review of the head first design patterns. Seems the series is not really that good.
I am reading Head First Java. I love it honestly. Yeah the pictures aren't hilarious and the end of chapter exercises are boring and dumb but its still a great read IMO.
Interesting take, I wish there were more details in the review for why the author hated it so much. Frankly I think Head First Design Patterns is the best OO Design Patterns book you can get. I think it's better than GoF because it came quite a bit later, and thus is able to clarify a number of issues from the GoF book. I think HFDP is more focused on the patterns themselves, there's a bit less of the book devoted to convincing readers that DPs matter. Plus the code is in Java. I think the examples are great as well, they're very, VERY visual, which is great for visual learners. I will admit that the layout of the book is a bit irritating, with each page having information kind of all over the place, it's kind of more like each page is a slide in a really really long presentation on design patterns. There's no doubt that this style adds some padding to the book, as does the exercises, but the notion that it's 40% is preposterous. Each chapter has exactly one page for the dumb crossword puzzle and one page for its solution, that's 26 pages for the 13 chapters, in a book with over 670 pages. If someone asks me for a recommendation on a design patterns book with code samples in Java, HFDP is my recommendation, and has been since I read it years ago.
They're such a small part of the book though. Most of the exercises are actually pretty good, like matching things up with their descriptions to make sure you understand. The crosswords are supremely useless, but that's all. At one job, we actually used the book as the guide for a little "class" we all ran together during lunch once a week. We had a huge range of developers on the team, real junior folks and pretty senior folks, and everyone learned from it. It's a good book, you can skip over crosswords easily enough. ;)
OK so, my new duke https://dl.dropboxusercontent.com/u/17474926/Reditlogos/hi%20res/JAVA.fw.png
Hi Jeff. Thanks so much for your feedback. I nuked the coffee, enlarged the waving hand, swapped the other arm with Duke's and adopted the old noses red (rotated too): https://dl.dropboxusercontent.com/u/266257/smallline.svg (this is an SVG; so if you like, you can fix it) I think everyone would love if you did this. Of course, I can apply proposed fixes too. Do you think I should keep the alien hand? What do you think about the current /r/java logo? Is it a better candidate? If it is, do you know the source of it? That way, we won't have to redraw it vectorized.
that's a nose? i thought it was his eye. 
Here's a vector approximation: https://dl.dropboxusercontent.com/u/266257/original_r_java.svg It has the classic nose since that's what Jeff prefers. But if you like, I can make it resemble the current logo closely. (it's based on [this](http://1.bp.blogspot.com/_eoo1KQWxNKo/Sd31QNQppdI/AAAAAAAAAMY/FyxENJRLGRM/S859-R/duke-java-logo.jpeg), mirrored)
You've watched the Space Odyssey one too many times :P
[Why settle on a bitmap](https://dl.dropboxusercontent.com/u/266257/original_r_java.svg)? :)
Howdy - better! I suggest a couple more minor tweaks: rotate the nose just a tad bit more, move the arm down with silght clockwise rotation, and increase the white stroke. I did this in photoshop quickly (I tried loading the svg into illustrator but it got all garbled - not sure what happened): http://i.imgur.com/LLOt6pV.png &gt; Do you think I should keep the alien hand? What do you think about the current /r/java logo? The alien hand caught me off guard - so I think Duke's right arm looks more natural. I like the old /r/java logo but I like yours quite a bit as well. 
No I got it, under boob has no place here. I just wanted to pile on with my own distaste of bad blog design. 
OK; the nose is now rotated so that it has the minimal y-axis span without making it smaller. Same URL: https://dl.dropboxusercontent.com/u/266257/smallline.svg Do you think the extra black stroke is needed? It looks like you have a tiny black stroke outside the white stroke. EDIT: Here's an EPS, maybe it works in Illustrator: https://dl.dropboxusercontent.com/u/266257/smallline.eps
Oh - and while I don't know the exact source of the current reddit alien, I have EPS artwork for a basic stance like that, which would then only need the antenna added. Let me know if you'd like me to dig that up. (I have monster collection of Duke graphics stashed away, several hundred).
wtf?
I tried to think of a legit reason to do this... I failed.
Throwing so many exceptions that it's overwhelming the logger? 
Am thinking along the lines of it being not cryptographically secure as opposed to SecureRandom. 
Why do you need cryptographic randomness for logging... Why do you need random for logging... Why are you not logging all connection problems or letting me configure when to see or not see errors.
James Gosling himself put up the collection on Kenai. And I agree that the current /r/java one has the antenna's direction is off. Anyway, yours is a great vectorization from the bitmap. I just dug up the original: https://dl.dropboxusercontent.com/u/46967890/Pointing.ai10.eps
I'm not, but it may appear that way to the developer of the driver. Essentially what that snippet does is filter out ~~90~~ 10 percent of the exceptions from hitting the logger. Maybe during the testing process, they noticed that the exceptions followed a pattern and put this filter in place to stop redundant log entries. Whatever reason that filter exists, it's made for a pretty big code WTF. Think it might be a two month late April Fools? *Edit- /u/veraxAlea pointed out an error in my analysis. Time for me to head to bed!
True. I switched from calling it J2EE to JEE years ago without realizing that wasn't what Oracle called it!
So, if update is called 100 times a second, and considering a downed server will stay that way for minutes or longer - then I can see some poor reasoning to this madness. But, the right way to do this *hack* is, the first time you throw this error, log the time and save the exception. Then the next time you hit an exception here, check to see if it's the same one. If it's not, you definitely need to log it. If it is, you can check to see if, say, 5 seconds has passed, and then print it, or another error stating that it's still down. It's still an absolutely facepalm move though, you should have a higher level function understand that exception and handle it a reasonable way, like slowing down calls to a broken system, instead of just throwing so many exceptions that you can't read the log files.
&gt; Essentially what that snippet does is filter out 90 percent of the exceptions from hitting the logger. I'm tired but I think you're misreading the code: if (!((_ok) ? true : (Math.random() &gt; 0.1))) { return res; } //else log stuff So, if Math.random() gives a value bigger than 0.1, which it will 90% of the time, then the expression (Math.random() &gt; 0.1) is true. Negating that makes it false and a log message is created. So, 90% of the time, a log is created. Unless _ok is true, then it will always log. Edit: I'm not even sure on the 90%, but it's too late for statistics.
No, it was my fault. Had the wrong inequality in my head when I wrote that. I've edited it. For future reference, I really shouldn't analyze any code when running on 5 hours sleep and after 7ish hours of Python and databases.
That has got to be the worst use of a ternary statement I've ever seen. Why oh why didn't they write: if ( !(_ok || (Math.random() &gt; 0.1 ))) Then again, I suppose you can't expect much from someone who thinks literally randomly not logging exceptions is a good idea...
I feel like a system that would be overloaded enough where this is feasible, is already a system best avoided. 
Yeah, this one is nicer. At least i know its java right away without pay much attention to the steamy coffee cup. If you can somehow make this Duke look a bit reddit-ish i think itd be perfect. I dont have any idea though.
I'm not a veteran programmer by any means, but even a novice programmer can see why this is terrible code. I know a few people at my work that use MongoDB on a regular basis. I can't wait to drop this on them! I started learning it, but now I'm not as gung-ho about it. 
Where are the resources located? Are they in the top-level directory of the JAR or are they in specific folders? The only problem I can find is with the path you are using. The code used to draw the image seems fine.
[Not as bad as the python driver...](https://jira.mongodb.org/browse/PYTHON-532)
Snoo isn't a he or she, Snoo doesn't have a sex, but is extra-sexual.
But it does web scale!
That guy is a bit of a dick.
&gt;`marypoppins = (superman + starship) / god;` I think my head would explode if I read this in actual code.
Welp, if I ever suffer the grave misfortune of having to code a web application, I'll remember to use an actual database instead of anything written by these clowns. Thanks for the heads up.
Yeah, but I still got a good laugh out of that bug report. "Web 3.9", "lollerplex", etc.
Not a bug? *Randomly dropping exceptions* is *not a bug?!?* &amp;#3232;\_&amp;#3232; Edit: Well, I suppose you're technically correct that it's not a bug. Rather, this code is *intentionally defective,* which is even worse.
Isn't (_ok) ? true : (Math.random() &gt; 0.1) the same as _ok || Math.random() &gt; 0.1 ?
&gt; 5 hours sleep That's about 4 more than I get.
Yes, they are equivalent in this case.
Yes, he benefits from a free product and bitching around this way is not acceptable. I would not hire him, when I find this on a applicant research.
Ill try it thank you :)
Please look at the code again. The purpose of the method is to check for the database being available. The method returns null, if the database could not be accessed (because of connection issues OR errors from the database itself). That's the entire purpose of the method. There is no reason to throw an exception. You get either the result of the query or null. The class is even package friendly and not part of the API. So please read the code again and not the method only to get the bigger picture.
All it does is stop your logs being flooded with database unavailable messages. It logs the initial failure state, then this random filter kicks in with subsequent messages, then finally logs the success message once reconnected. It's not wrong, per se, but certainly a bizarre way to handle it. I'd argue the better approach would be to shift the ongoing failure messages to DEBUG level (and log all of them), and leave the initial fail and eventual success messages at INFO. Still, strange coding patterns like this really do beg the question about the rest of the code's quality.
The search thing is very useful but the downside is that you never learn where anything is. Same as how mobile phones destroyed our ability to remember phone numbers. :-)
Oh god that would be amazing for non-GUI people like me.
To answer your question: it depends on the database you are using. I'm assuming MySQL. http://dev.mysql.com/doc/refman/5.0/en/innodb-deadlocks.html http://stackoverflow.com/questions/6646637/how-to-restart-transaction-after-deadlocked-or-timed-out-in-java Secondly, most deadlocks can be avoided by a different approach to the problem. Why lock the table in the first place? Another solution would be to save each login attempt as a single row. When a user attempts to log in, count the previous login attempts. Then, rely on a separate process to delete the rows from the table. There are a million different approaches to this problem, depending on how you need to scale, but I hope you get the idea.
No, it won't always be TRBE. It will usually be a SQLException as a timeout, if you get any exception at all. But it is very database and connection driver dependent.
That seems to be specific to SQL Server/C#, I'm using MySQL.
Like I said above, it will be database/driver specific.
If you're looking at simple JSON stuff, take a look at [Dropwizard](http://dropwizard.codahale.com/). It's all packaged up with a set of frameworks which are good choices for a performent back-end. It also takes away the J2EE pain by running it all under Jetty and their own little framework. If you need "enterprise" stuff, I'd recommend hiring a competent Sr. Java Dev/Architect and looking into Spring MVC, but that sounds like more Java stuff that you don't want to deal with. The other alternative is to take a peek at one of the many JVM languages (including jRuby), but I don't have much experience there so I'm not a good resource.
You don't want to read the image over and over (assuming you want to repaint). The method "getResource(String)" will look in the class package. Supply "/example.txt" as the argument and it will attempt to find "example.txt" in the JAR-archive root directory. Example: private static final String sPfadStein = "/mastermind/bilder/Stift-Blau-0700fd.png";
It worked! Thank you very much :) I was worried that I couldn't submit the project :D
They have recently (before this was posted to reddit) have opened a bug request to fix this: https://jira.mongodb.org/browse/JAVA-836 There apparently is already a fix: https://github.com/mongodb/mongo-java-driver/commit/e5c7b2552c8c240bd19c4cea91bc2a789d8ce76e 
How does it compare to parallel Colt?
I've seen builder statements simplified like this: return new StringBuilder() .append("First") .append(" Second") .append(" Third") .toString(); ... if it's only three short strings like this, you won't pay much of a performance penalty to use the following readable code. return "First" + " Second" + " Third"; 
... is there a better way to do it?
 jclass randomClass = env-&gt;FindClass("java/util/Random"); jmethodID randomConstructor = env-&gt;GetMethodID(randomClass, "&lt;init&gt;", "()V"); jobject random = env-&gt;NewObject(randomClass, randomConstructor);
Can you elaborate on what's going on with your ruby app and what you've tried to remediate your performance difficulties? 