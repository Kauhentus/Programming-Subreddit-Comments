Git != GitHub
&gt; And these developers are making 100 to 200k a year and they baulk at the idea of 200 dollars to jetbrains for a product that is possibly 80% of their day. &gt; Sorry for replying so late but I only now saw your response (because someone else just responded in the thread). This product (IntelliJ) has the same prices for everyone in the world. You assume that everyone that needs it makes 100-200k a year, which is not true. Salaries in not so much developed countries are much lower, for example in Greece you can barely make 20-25k as a developer with a few years of experience. Just paying for rent + Utilities + Food can eat up to 50% of your salary. That leaves you with 7k / year for your personal stuff. You can't even buy a car with that money. I assume in other countries with lower salaries it can be much harder for someone to buy software. &gt; And most of the time your employer is paying it. And I don't think most of the employers will pay for the license, especially for a personal one that the developer can use at home as well. Keep in mind that in these countries, and in my country for example, you can easily pirate everything. You can have no repercussions for pirating stuff. So it's a matter of choice that people buy software. I personally pay for other stuff too, like a Yourkit profiler license every year, which I barely use, but I like to have in order to become a better developer. I also buy programming books, like Effective Java or the Complete reference. That's added cost as well. The post was not so much about the price, but mostly about companies getting greedy. In the end I decided to pay for the all product pack, just to prove my point, which is, I don't mind paying for stuff that I need.
Yes, but this JEP is a part of [Project Skara](https://wiki.openjdk.java.net/display/skara/), and the goal is to use GitHub, which requires switching to git.
Ah, good to know :)
thanks for the link, it's an interesting project. Where do you see the JEP is part of the project? I don't see any reference in the OPs link. Also if you have any tips on following the openjdk progress I would be interested in it. For example which is an interesting maillist to subscribe to for someone that doesn't commit changes to the project?
&gt; Where do you see the JEP is part of the project? I don't see any reference in the OPs link. By looking at the authors. JEPs generally don't mention the projects that have originated them (maybe they should?) &gt; Also if you have any tips on following the openjdk progress I would be interested in it. For example which is an interesting maillist to subscribe to for someone that doesn't commit changes to the project? Maybe that's another one of the hard things, other than making a first contribution. A good place to start might be [the wiki](https://wiki.openjdk.java.net/) which has a list of the more active projects on the left. They should point you to their respective mailing lists.
why did you delete it?
&gt; Maybe that's another one of the hard things, other than making a first contribution. A good place to start might be the wiki which has a list of the more active projects on the left. Yes, I feel it's still hard. For example Sumatra is archived, Nashorn is deprecated. It would be nice if https://openjdk.java.net/ could list Active and Inactive projects. The good thing is that most important stuff usually end up on reddit so we can read about them :D
In particular because the metadata is 300mb for git and 1.2gb for hg. That's a big check out.
Mercurial [even has more than one API](https://www.mercurial-scm.org/wiki/MercurialApi). &gt; For the vast majority of third party code, the best approach is to use Mercurial's published, documented, and stable API: the command line interface. Alternately, use the [CommandServer]( https://www.mercurial-scm.org/wiki/CommandServer) or the libraries which are based on it to get a fast, stable, language-neutral interface. &gt; ... allows communication with Mercurial's API over a pipe.
It looks like in your [submission](https://www.reddit.com/r/java/comments/cdwjue/java_infoq_trends_report_july_2019_what_do_you/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I've had this same thought recently as my team has been moving towards mostly using Hamcrest matchers. I feel like the gains in readability are extremely miniscule. Being used to the `assertX` nature of JUnit tests, I can mentally process them quicker than matchers.
With you entirely, but that may well be an indication that you're a luddite old-fashionista
I think each method has its place. Using *assertThat* just for the sake of it being closer to a "true english" sentence isn't precisely a valid opinion in my eyes. ​Check this snippet out: ​Assertions.assertAll("View and Components should have expected values/styles/icons", () -&gt; Assertions.assertEquals("Please wait....", usersManagingView.spinner.getCaption()), () -&gt; Assertions.assertFalse(usersManagingView.spinner.isVisible()), () -&gt; MatcherAssert.assertThat(usersManagingView.getStyleName(), CoreMatchers.containsString("form-header")), () -&gt; Assertions.assertTrue(usersManagingView.getMargin().hasAll()), () -&gt; Assertions.assertEquals("User Id", usersManagingView.txtUserId.getCaption()) ); I only use *assertThat* in one of the assertions, because it only made sense there. It isn't necessarily more readable than say *assertTrue(usersManagingView.getStyleName().contains("form-header"))* but it separates **test criteria** from the actual **target**. These cases is where it makes sense (for me) to use a Matcher over a simple *assertTrue*. &amp;#x200B; Cheers.
Use AssertJ instead of Hamcrest. IMO that syntax is the closest to "a true english sentence"
The error message reported by assertTrue is super useless. It says "expected true, got false" and you have no idea what's actually wrong.
AssertTrue is implicit. AsserThat is declarative. Declarative is verbose and easier to understand what you were expecting and why it works.
Fuck. Mercurial is the superior system. Git is soooo overrated. People went with it because "bruh, Linus made it" but the CLI is actually a horrible mess and it took GitHub to give it a usable workflow and save it. Go ahead, downvote me all you want. You can't bury the truth.
This is the main reason why I avoid assertTrue.
I think the true power of matchers is that you can write custom ones with customized error messages. If you have a complex type, you can write a specific matcher against it that verifies a complicated condition, then reuse that logic in many places, even other matchers. Using is(value) isn't that useful over assertEqual. Creating your own matchers makes for readable code. And in the implementation of the matchers you can leverage other matchers, which cuts down what you need to implement yourself.
AssertJ all the way
Use whichever makes it easiest to write the test, but specify a unique reason or message so that when it breaks you can figure out why! The normal assertTrue(boolean) is nearly impossible to read the test reports and understand what happened. assertTrue(java.lang.String message, boolean condition)
Also known as the "shit fast, shit hard and then leave" strategy.
You can always learn by meditating on the mediocrity of your job.
Your capability to adapt is what you should be selling in future interviews, not the actual tech you worked with. Employers shopping for candidates by keywords are the worst. Develop a diversity of tech, old and new, in your CV. Have opinions and arguments ready about each, try to understand why these things were adopted and what you would've done differently. Look at other tech stacks (beyond Java &amp; JVM).
 assertThat(message, containsString("foo")); Failed, expected: string containing "foo" Got: "bar" (or something like this) definitely beats assertTrue(message.contains("foo)); Failed: expected true, got false
English is a horribly verbose language that should not be the target of anything. Write whatever you can understand faster. I can understand the symbols x!=y a lot faster than i can understand is the variable x different from the variable y. If i see assertTrue(stuff) i know that i want the stuff inside to be true. I dont need to read and work out your custom matcher, or
I find [AssertJ](https://joel-costigliola.github.io/assertj/)'s fluent assertions superior to both approaches from the readability point of view. Some examples: // basic assertions assertThat(frodo.getName()).isEqualTo("Frodo"); assertThat(frodo).isNotEqualTo(sauron); // chaining string specific assertions assertThat(frodo.getName()).startsWith("Fro") .endsWith("do") .isEqualToIgnoringCase("frodo"); // collection specific assertions (there are plenty more) // in the examples below fellowshipOfTheRing is a List&lt;TolkienCharacter&gt; assertThat(fellowshipOfTheRing).hasSize(9) .contains(frodo, sam) .doesNotContain(sauron);
This is what I use at my company as well. Works well in my experience.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yes! AssertJ, with its fluent assertions and simplicity when it comes to working with collections should be a default choice when working with tests. TBH, I'm a bit disappointed that Junit5 decided to go with their own homebrew assertions instead of just bundling AssertJ with the framework. Together with [Awaitality](https://github.com/awaitility/awaitility) and [RestAssured](http://rest-assured.io/) it pretty much covers all our needs when it comes to assertions, be it unit, integration or e2e test.
Not a fan of that style. Too much going on which detracts from the tests imo.
assertTrue has an overload with a message parameter you can throw in. It doesn't have to be super useless.
&gt;What I meant is that I've been practicing almost every day and I'm getting way quicker to find out how to solve programming problems. I know building projects is essential, and I'm working on it, too. Right now I'm building a simple program that encrypts and decrypts messages (with a simple Caesar encryption). The main functionality is already done, it only needs a few final touches before I send it to GitHub. Later I'll tackle on some more complex projects. Don't take my answer as criticism, I wasn't trying to be negative, just to put things into perspective. Not trying to bring you down (or I wouldn't have written half a damn novel here) :) You should try taking on simple projects on some free lancer sites. Don't remember the names but they are out there. You will be competing with Russians and Ukrainians and others who will work for 25€/h (some seniors), so you should be willing to take 10-15€/h (or even lower) - peanuts for an American, but hey, you get some cash while working on your skills. &gt;Unfortunately I can only do Android stuff on the weekends. Use whatever money you can make and save as much as you can as fast as you can in order to get a machine that can run Android Studio. Get a 2nd hand laptop, IIRC there are some under 100 dollars on ebay. I would suggest to get as much memory as you can, don't care much about processor or disk space. Better a 128 GB SSD than a 2 TB spinning disk. You don't need to store all kinds of shit on it, or you can get a cheap external drive for movies and such. 32 GB of RAM, on the other hand, mean virtually no swap on the drive, which will boost the performance of your machine more than anything else. **I say getting a machine should be your no 1 priority** IF you have time to work on your skills during the week. The more you work, the better you become. And if your goal is Android, you should work on Android. &gt;Thanks for the recommendation, but I'd rather stick with what I already have. You know better what helps you best, but maybe consider looking into an Android course. Google was at one time sponsoring Android courses on Udemy. Maybe you can buy it yourself, some are 10-20 dollars. Lots of hours of content and exercises. &gt;The Databases section is almost 8 hours long, while the Networking section is 2 and a half hours long. For the network part, I suppose 2 good hours should be enough. You might have to go through it 2-3 times to retain most of it. For SQL, you need some practice. Even working on Android you might need a local DB - better than storing stuff in a text file, for example. You might want a RDBMS or maybe a JSON store, you will have to decide on that later. But it's best to know how to use a RDBMS. I think it's the most complex of the databases, a JSON store I think is a simplified model. You should play with queries a bit. For that you don't need Android Studio or anything. Any machine will do. Write some queries by hand. &gt;As for Spring, that's something I've been wanting to try for a little while Spring is virtually the foundation of modern Java enterprise apps. Sure, there are companies still using JEE out there, but it seems to me that even Oracle has given up on trying to keep JEE alive. Spring Boot is what's used to build Java microservices. If you even want to go the enterprise dev route, you will need Spring. If you focus on Android, you can ignore it for the moment. What I would recommend, though, is that even if you start working as an Android dev, once you get settled and comfortable, learn Spring, too. At least be able to use it a bit. Just in case. If you ever need a job urgently, it might be harder to find Android work, but Java + Spring + Spring Boot + JPA + databases should get your foot in the door for every Java dev job out there. You will almost be guaranteed to get at least an interview. Well, it might depend on your location, but then if you're willing to relocate, you'll have access to 1000s more jobs. After Spring, yes, learn some JS. JS is the backbone of all Web UIs these days, so it's kinda important. JS and TS (TypeScript). The frameworks themselves come and go in the JS world much quicker than in the Java world. They pop like mushrooms after rain. Today it's Angular and React and Vue, 2 years from now there might be 5 new frameworks. **Another tool that's more and more important** and not just in the enterprise world is something that I wanted to mention in my first post: # DOCKER It's a memory hog, but it allows you to simulate locally an entire network environment, with database, source control (you can use local gitlab or github/gitlab online), build server, artifact repository (nexus or artifactory) etc. You can even deploy locally for dev purposes some web services that you will later deploy on a cloud like AWS.
Depends on what you are after. The nice thing about that syntax is that it runs all of the lambdas, not just one. That can be convenient if you are doing multiple asserts anyways (so you aren't fixing one, running the test over, only to find that the next assert fails).
It's a stupid dependency to add to your project for hardly any advantage. Like adding Lombock, or guava just to make toString methods, or, or or or a gazillion other things people add for tiny little conveniences that ends up making your project far more complicated than it ever needed to be.
What else do you want it to say? There are literally only 2 outcomes: the boolean is true or false. `assertTrue` expects `true` and fails on `false`. `assertFalse` expects `false` and fails on `true`. You can add a message via the overloaded version `assertTrue(String, boolean)` I often see stuff like this: `assertTrue(x.equals(y))` when in reality you should just be doing `assertEquals(x,y)`
I am really loving the [Spock framework](spockframework.org). Clear BDD structure, amazing support for parameterized tests, mocking support, and the best error report I have found in testing frameworks: Condition not satisfied: stack.size() == 2 | | | | 1 false [push me] &lt;!-- --&gt; maximum of two numbers FAILED Condition not satisfied: Math.max(a, b) == c | | | | | | 7 4 | 7 42 false (Unfortunately?) it uses a custom DSL written in Groovy, so there may be an overhead switching from Java code to Groovy while doing TDD, and some devs may not like writting Groovy. Also it seems slower than JUnit. Some comparisons between JUnit and Spock [here](http://blog.codepipes.com/testing/spock-vs-junit.html) and [here](https://bmuschko.com/blog/junit5-vs-spock-showdown/).
Try to correctly determine the order of all arguments for assertEquals without looking it up.
I use Google Truth. assertThat(someValue).isTrue(); assertThat(someSet).containsExactly(element1, element2, element3);
Ow, my eyes... what does this print if, say, the `spinner` is visible?
I don't think they want it to say anything else. To me, this is just the problem with `assertTrue`. It's not something to be fixed; it's an indicator that `assertTrue` shouldn't be super-widely used, but many developers don't actually plan for failure.
Alpine, including its musl C library, are focused not only on small size but also security and small attack surface. Just enough OS to run your workload on Docker. Even for non Java workloads. Alpine has a package system and you can install whatever you need for your particular Docker container's needs. But it starts out small and you only install what you need. I have only read about Alpine. I've not used it personally.
There's [this list of lists](https://www.reddit.com/r/learnprogramming/comments/2a9ygh/1000_beginner_programming_projects_xpost/) from r/learnprogramming. You could also take a look at [this list](https://www.lovelycoding.org/2014/04/Java-Project-Ideas-United-State.html).
Wow. I was literally just thinking this is how it should be. I can't believe I never saw this before.
To me, tests aren't designed to be _read_. IMO, if you get a failure and you have to read your **test** code to figure out what went wrong, the test itself is a failure. Again IMO, I think that `assertThat` produces more easily-understood failure messages--while both `assertTrue` and `assertThat` offer an optional `message` parameter (which should be used in both cases), the amount of work and verbosity you need for the `assertThat` `message` is much lower than that needed for `assertTrue` in order to accomplish the goal of the test: figure out why it broke when it breaks. For example here: `assertThat("Pi", 3, is(closeTo(Math.PI, 0.01)))` vs `assertTrue("Value should be close to pi", Math.abs(Math.PI - 3) &lt; 0.01)`. The former tells you "Pi; Expected: a numeric within 0.01 of 3.1415926535 but: 3 differed by 0.1415926535", while the latter just says "Value should be close to pi: Expected true, got false". Which is more helpful? The former makes me think the value got truncated or rounded and sends me off to figure out where. The latter makes me break out a debugger and step through the test. And yeah, you could change the `message` to include the value the test found, but how much work do you really wanna do writing your tests? On a sidenote, I'm curious what you mean by "making tests difficult to share with other developers". Don't you check your tests into source control? What's difficult here?
throw "docker raspberry pi" into youtube and build a kubernetes cluster for yourself on the cheap
I prefer Assert.isTrue(condition, "explain here so it shows in results output");
What I'm after is readability and low cognitive load
Right? This is borderline unreadable. Too much cleverness going on for something so simple IMO.
After reviewing assertThat (as I have never come across it before), I find that, strictly personally speaking, I literally do not care. To me, it's six of one, half a dozen of the other. That being said, since I'm used to using assertTrue, and that's what the rest of the team is used to using, I'll probably stick with that for the near future.
Truth.assertThat(thing).isTrue(); Or many of the other awesome subjects of the Truth framework.
&gt;You should try taking on simple projects on some free lancer sites. Don't remember the names but they are out there. &gt; &gt;You will be competing with Russians and Ukrainians and others who will work for 25€/h (some seniors), so you should be willing to take 10-15€/h (or even lower) - peanuts for an American, but hey, you get some cash while working on your skills. I'm from Brazil, and I'm totally broke, so anything coming my way is better than nothing xD. But seriously though, I've read enough about freelancing to know not to charge too few. Actually I know this from experience. Even if currency conversion makes the pay have a bigger value, it may still be unfair. I used to be a freelance translator and I had some shitty jobs translating huge texts for almost nothing. How much to charge is still something I have yet to think carefully about, though. &gt;Use whatever money you can make and save as much as you can as fast as you can in order to get a machine that can run Android Studio. Get a 2nd hand laptop, IIRC there are some under 100 dollars on ebay. I would suggest to get as much memory as you can, don't care much about processor or disk space. Better a 128 GB SSD than a 2 TB spinning disk. You don't need to store all kinds of shit on it, or you can get a cheap external drive for movies and such. 32 GB of RAM, on the other hand, mean virtually no swap on the drive, which will boost the performance of your machine more than anything else. Since I'm in Brazil, it's a little harder than that. Anything with 32 GB RAM would cost nearly R$ 10k (it's a guess, but probably not a wild one). I happened to do a quick research on [Amazon.com.br](https://Amazon.com.br) today and I saw some all right notebooks for around R$2800+ which would fit my needs perfectly (i5 or i7 8th gen, 8GB RAM). If I manage to some freelance jobs and save some money, I'd get to buy one of these in a few months. Meanwhile, there are some politicians trying to lower the taxes on imported consumer electronics (which are ridiculously high). I don't know if it's going to pass, but if it does, I hope it does soon. &amp;#x200B; &gt; You know better what helps you best, but maybe consider looking into an Android course. &gt; &gt;Google was at one time sponsoring Android courses on Udemy. Maybe you can buy it yourself, some are 10-20 dollars. Lots of hours of content and exercises. Along with Tim Buchalka's Java Masterclass I bought his Java for Android course. It's just as great, but I never advanced much in it because I always felt so insecure about my Java skills (which is silly because he explains everything about everything very patiently, even the Java features he didn't cover in his quick tutorial). But now I feel much more confident about it so I can keep up without worries. &amp;#x200B; &gt;For SQL, you need some practice. Even working on Android you might need a local DB - better than storing stuff in a text file, for example. You might want a RDBMS or maybe a JSON store, you will have to decide on that later. But it's best to know how to use a RDBMS. I think it's the most complex of the databases, a JSON store I think is a simplified model. Tim Buchalka's couse covers that, but I did try to learn it from other sources. In fact, I have a course about SQL for Data Science on Udemy that is where I learned the most about the subject (which isnt much), but I dropped it for some reason. And since it's focused on data science, I'm not sure how useful was it in a software development context. &amp;#x200B; &gt;What I would recommend, though, is that even if you start working as an Android dev, once you get settled and comfortable, learn Spring, too. At least be able to use it a bit. Just in case. If you ever need a job urgently, it might be harder to find Android work, but Java + Spring + Spring Boot + JPA + databases should get your foot in the door for every Java dev job out there. You will almost be guaranteed to get at least an interview. Well, it might depend on your location, but then if you're willing to relocate, you'll have access to 1000s more jobs. That's actually a great idea! &amp;#x200B; &gt;DOCKER I don't really know what Docker is, but I think it's more of DevOps thing than a software development thing, right?
AssertJ is life. Please don't ever use Hamcrest again. Google Truth also looks okay.
I think we found the next reason for a crusade... The two sides of this argument
My preference for "assertThat" traces back to earlier versions of JUnit, where the failure message would literally be java.lang.AssertionError at org.junit.Assert.fail with no message at all. AssertThat at least would instead report java.lang.AssertionError: Expected: &lt;true&gt; but: was &lt;false&gt; which was slightly more useful. Nowadays assertTrue has a better implementation, so they're about the same.
We (the team that does Truth) heartily encourage everyone to use either AssertJ or Truth. Reasonable minds can disagree on which of those two they prefer, but we think either is quite a bit better than the other alternatives. Our comparison FWIW: [https://truth.dev/comparison](https://truth.dev/comparison)
If you're looking at this code sample and judging whether you like it, don't forget that you're \*also\* getting \*much\* better failure messages, and that's a lot of the point.
And it also beats having to stitch a useful message together on your own.
/u/armornick pointed you in the right direction. Still, such questions belong in /r/javahelp if anywhere, not here. **Removed**
Tried out AssertJ a month ago and haven't looked back. So fluent and descriptive.
I use this style only on views, precisely because of what u/cogman10 said. But I agree with you, I usually split more business-critical stuff in single assertions to improve readability and future refactoring.
Right. If you want to do 5 asserts one after another, what is wrong with just writing 5 asserts one after another. What's with all that lambda wrapper code? How on earth does this help anyone?
assertTrue is simple and direct. asserThat is convoluted and indirect. To really understand what I mean, try to step through the code with a debugger. This is something you might actually want to do if the test fails and you wanted to debug it.
 Java 11 still being in the "Early Adopter" category matches my experience but I can't help but find it weird. It's been out for a long time now, and once you try using it is really not that much of a step. Should be a piece of cake actually especially in microservice environments, but still there's this resistence.
AssertJ is pretty good but if you want maximum readability I recommend [https://www.reddit.com/r/java/comments/ccbn2c/requirements\_fluent\_design\_by\_contract\_for\_java/](https://www.reddit.com/r/java/comments/ccbn2c/requirements_fluent_design_by_contract_for_java/) (I am the author).
If English were a good programming language we wouldn't need Java.
"Since 2002". We had mechanical hard drives back then and system memory was around 512-1024MB. Using just one JRE for everything (IDEA, client and server programs) had a significant performance advantage over having programs using two to three different JREs for running java programs. Startup difference was especially noticeable since all the files from that single JRE were already in the main memory. It also reduced swapping. Now my laptop has 16GB and SSD so it doesn't matter anymore.
Debugging a test that failed an hour ago on your CI server can sometimes prove difficult though.
I think JS is pretty important nowadays too, with even a lot of backend work involving it now..
Interesting. And you are using Windows right?
A couple of corrections: * JDK 13 has *not* been recently released. It hasn't been released at all yet. * Graal is not exactly a "non-HotSpot" JVM. Graal is a compiler that can either run as a top-tier JIT compiler in the OpenJDK JVM, AKA HotSpot, or compile a Java application AOT, together with a runtime written in Java -- Graal Native Image, AKA Substrate VM -- in which case the resulting self-contained binary indeed does not run in the OpenJDK JVM.
Particularly for developers who are new to unit testing, I think assertTrue and assertEquals can sometimes lead to misleading test failures ("expected 1 but was 2" when in fact the reverse happened.) Granted, that's ultimately on the developer writing the test. However, I've found that assertThat's syntax avoids that confusion arising. I think it ties in to what the OP said about assertThat reading more like a sentence.
Yes, but then you have to write out the condition in code *and* prose, and you probably still get an inferior error report.
Caveat - I’m a total newb in this area. If I’m understanding you correctly, Graal is a compiler that sits on top of the JVM? Is the whole JIT how Graal achieves its performance benefits? I’ve briefly read on that but didn’t fully understand it at the time.
They actually unbundled hamcrest for two reasons: they didn't want to provide more than the base assertions and hamcrest development has stalled.
I like hamcrest because it's easy to create custom matchers. AssertJ has the advantage that the API is easily discoverable.
It looks like in your [submission](https://www.reddit.com/r/java/comments/ce43ho/algorithm_java_and_subsets/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You really need some static imports :) The aren't many places where they're appropriate, but assertions is one of them.
This is much easier in Hamcrest than AssertJ. The downside is that you must remember the Hamcrest matchers.
Graal is a compiler that can either be used as a HotSpot JIT or as an AOT compiler that compiles the program (together with some runtime elements, like a GC, also written in Java) to a native binary; the latter feature is called Graal Native Image or [Substrate VM](https://github.com/oracle/graal/tree/master/substratevm).
AssertJ is very readable and not bound to the JUnit implementation so it was easy for us to move from JUnit 4 to JUnit 5.
Its like any other api. You use it enough and you'll learn it well. When creating a custom matcher I usually just override the TypeSafeDiagnosingMatcher, which only requires two methods to override, one describes the expected and the other matches and describes the failure. I keep the docs handy so I can easily look up what matchers exist already in the library. Usually when I'm writing tests, I'm writing a bunch at once. I don't do TDD because I frequently don't know the expected behavior until I get into the code a significant amount, and it just doesn't fit my work flow most of the time.
You can also just create a method in the current class that returns a compound matcher (using `assertAll()`) if you're doing a very similar test multiple times.
&gt;I happened to do a quick research on [Amazon.com.br](https://amazon.com.br/) today and I saw some all right notebooks for around R$2800+ which would fit my needs perfectly I was talking second hand. Google tells me that's over 700 US dollars. It seems like that should be enough for a 2nd hand laptop with decent specs. &gt;would fit my needs perfectly (i5 or i7 8th gen, 8GB RAM) It's your money and your decision, but I can't stress enough how much of a difference having enough RAM makes. I would suggest 32, but if not, try to go for at least 16 GB. Forget the CPU and the size of the drive, the 2 best specs to invest in are RAM and having SSD. &gt;I don't really know what Docker is, but I think it's more of DevOps thing than a software development thing, right? What do you think the Dev part of DevOps stands for ? Development. Docker is a lightweight container. If you know what a VM (Virtual Machine) is, Docker is lighter than that. It is used in deployments (containers, used extensively with Kubernetes). But you can also use it while developing. You can use it to deploy stuff locally.
But muh functional java8
Migrating from java 8 is a big step...
Interesting read. Thanks for sharing.
[removed]
Both AsertJ and Kotlintest are better in my opinion With kotlintest you just do X shouldBe y
He's wearing a dress.
It's even better than that: AssertJ is designed for writing custom assertion classes. Most devs don't take advantage of it, but it can make a massive difference in test readability. Imagine reducing multiple assertions into a single, domain specific assertion method. AssertJ makes this easy.
It's hard to follow what the article is really saying. I feel like he's just making quick summaries about a couple of technologies he's using and linking to their sites/github. Also, instead of asking why we need frameworks to help with IoT, we should be asking if we need IoT at all.
&gt;that's what the article is about, listing out any new tech one comes across. It's not a tutorial article, just a compilation of stuff.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Migrating existing software, yes. Starting a new project, not so much. Still doesn't happen.
I thinks it's partly caused by Java 11 not having an alpine compatible OpenJDK implementation. I would love to work with Java 11 but not being able to use OpenJDK 11 in an alpine based docker container is why I still use OpenJDK 8.
&gt; Most devs don't take advantage of it, Mostly because custom assertion classes require a source generation step if you want to use the fluent API. People don't want to go through that extra step.
That's what I am thinking to. But others mare pretty good point in favor of other syntaxes, mainly to have a better error message.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Except that you have to find out what containsString does. If you see this for the first time, you could guess that it tests if a Collection contains the string "foo". The error message is of course more detailed in the second case (but you do not have the possibility to add a custom message to your test), but I can read, understand and debug the second faster than the first.
Noooope. Lombok I could agree as it has to be a runtime dependency, but assertions should be done only in tests (if you are doing them in app code you are doing it wrong, unless it's groovy) hence they go in test dependencies, which don't clutter your deliverable if you know what you are doing with maven/grade configs.
I meant that as there are different matcher libraries, not every developer will be at ease using matchers. Use good old boolean operators, and you make sure that even the most juniors of the junior developers can read, understand and write tests. I quite agree with you on the benefits of a more detailed error message, that is a valid reason to use them, except that in both case you will probably have to use a debugger to confirm what you think the problem is.
I never used Truth, I will have a look for sure!
The message is probably the most important part in testing, I agree!
Yeah, I did not think this question would get so many different answers! It is to understand both sides.
&gt;8bitmen.com/latest... We definitely need IoT
&gt; just a compilation of stuff. As such **spam**. Please, refrain from further posting such material here. Next such post will earn you a permanent and irrevocable ban from here without further warning.
The effort is substantially less than it used to be now that most popular libraries are on 9+. So at this point, in many cases it may well be more fear and/or laziness than an actual assessment of the effort involved. Also, the effort is bigger than what Java developers are used to, but nowhere as big as people ordinarily contend with on other platforms and even other Java-platform languages. We're usually talking about an effort measured in hours or days, not weeks and months. True, this is more than usual, but still quite small compared to other software activities.
if you have assertTrue and the test fails it wont tell you why other than 'expected true' or something. I prefer Google Truth assertions though.
What do you mean by "debug"? Do you have a continuous integration where you run some integration tests (or worst, end to end tests)? Because the second assertion is what makes debugging integration tests a complete nightmare. We have a few of those assertions in our legacy code. When a test fails on the continuous integration platform, you have no idea what happened. Seriously, one of the most important things about a unit test (beside what it tests) is the information it will give when it fails.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It's not simply a matter of cluttering your deliverables, it's a matter of every problem dependencies can potentially bring, and maven/gradle doesn't solve all those problems. Sometimes, they actually make it worse because people think exactly as you are here, which is that there's no problem adding a gazillion dependencies because maven handles it. It's like git with branching and now we think thousands of branches is no problem just because git made it easy to do so.
If you know where the `message` variable under test came from - probably by calling a method that you're writing the test for - you already know what type `containsString` operates over. If you don't then you should go back and read the declaration of the thing you're testing before you start modifying its tests.
How often have you needed to step through `assertThat`? Whenever I use it and have a test failure, the problem is always in the code being tested, not the test harness itself.
At the enterprise level? Definitely, as others have said. Startups? They usually prefer Node.js (often with TypeScript) or Python. However, there also are many that use other Languages (such as Java; for example, Discord uses erlang/elixir). At the hobby/personal level? Many prefer Scripting languages as you're sure to quickly whip up something cool with them and the teams are usually small
I would be more nuanced than you. In my company, the software is based on java 8, spring boot 1.4 and hibernate 4. Hibernate 4 and spring 1.4 are not compatible java 9. Migrating to java 9 imply update to hibernate 5. The migration of hibernate 4 to hibernate 5 is not easy at all because some behaviour change. We have hundreds of thousands different hibernate query...
Yes, I've heard of Hibernate as being a problem. Perhaps there's a business opportunity in making a 9+-compatible version of Hibernate 4. This only shows that extensive reliance on libraries without a strong commitment and record of backward compatibility can be as painful as relying on platforms without a similar commitment and record.
Uh, I'm rolling all my assertion classes by hand. It's not difficult. Just create a FooAssert class extending the closest class in AssertJ core (usually AbstractObjectAssert). Then create a FooAssertions class with a static assertThat method for type Foo, and have it return a new instance of your FooAssert. Add custom assertion methods to FooAssert as desired.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
lmao why does reddit have to use my github profile pic as the thumbnail, it doen't fit at all
It looks like in your [submission](https://www.reddit.com/r/java/comments/cedpr5/reusing_httpclient_across_application_to_make/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I don't think it \*has\* to - it's just the only image it finds on the page.
I read their "about" section on the project site. No disrespect to anyone, I didn't see anything to get my interest. It read like something made by two college sophomores. "Use our tool! We made it in a weekened!"
That's a good point, I never really added much content at all to the about section. Thank you for the feedback.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
A professional invests a LOT in the IDE they use. You need to tell them why they should bother looking at yours. No offense meant.
Agreed, mercurial is easier, yet the "barrier of entry" joke still keeps getting thrown around in git's favor. Get any first timer to try git and they might get confused over a merge on their first pull, or just make a mess of a clean commit trunk. Then someone has to go over and tell them to set git config --global pull.rebase true git config --global rebase.autoStash true to get the sane defaults that mercurial provides. But alas, git didn't win over mercurial, github won. And somehow modern developers are allergic to learning more than 1 language and 1 vcs tool, possibly 1 IDE as well.
It seems you were so preoccupied with whether or not you could, you didn’t stop to think if you should and dammit it's so completely pointless. I love it!
Thank you, I've spent a *lot* more time than I should have had on this project so I'm glad to see when people think it's funny
It just nabs the first image it can
The JDK http client API got an update recently. See [JEP-321](https://openjdk.java.net/jeps/321).
IDE support?
Have you ever used kotlin? It pretty much does almost everything in the project. Also is funny that the name j++ implies inspiration from C++ but it's python.
You're looking for /r/learnjava .
Can you briefly explain what that is on a technical level? Seems hacky.
Wow this looks pretty interesting :)
In AssertJ it is obvious what is the actual value, and what was the expected value.
Please, read the **sidebar** in /r/learnjava **Removed** - wrong subreddit
I dislike Kotlin's syntax.
The program parses a file using the custom syntax, converts said syntax into a vanilla Java representation internally, then outputs normal Java code.
Man, I would love to be able to make IDE support. I just have absolutely no clue how.
He seems to use a Java parser library to parse Java++ files. Then, he desugars it and lowers it to Java code by walking the syntax tree. Most of the stuff is pretty straightforward, like removing trailing commas and semicolons in lists.
I suppose this is just a wrapper on Java? Looks really neat. I might even fool around with it in my spare time. However, some of the things I'd like to see in a "J++" is: - Equality Operator boolean equals = person.name ?= otherPerson.name I don't advocate operator overloading and the "==" operator has the well established meaning of value comparison (where Objects are treated as numerical references). But we all know how convenient it would be if we could reliably check for equality with a simple operator. Most likely it'd increase readability in many cases as well (it would be mere syntactic sugar for an `Objects.(equals)` call. - Ranges First in the form of literal access (0..10 returns a list of values from 0 to 10). Secondly, to access slices of an array: ``` String[] array = ... String[] subArray = array[1..10] ``` - Non-Null literal I see your agenda behind using the ? operator, but with nullability by default it will be limited to nice-cases. Defining a non-nullable variable like !String is a more pragmatic solution for handling nullability. This would serve perfectly as an elegant preconditions for methods where you want to avoid null arguments without writing preconditions yourself. - Make arrays Iterable This might be controversal, but it would lower the amount of overloaded methods on some of my APIs quite a bit. - More powerful lambdas // Defines a Consumer&lt;String&gt; var consumer = System.out::println // Defines a Runnable. var runnable = () -&gt; consumer.accept("Hello World") // Anonymous call to the single abstract method. consumer("Hello World); // Function chaining. var trimToLower = String::toLowercase::trim It's always fun to speculate about syntax, but only few actually pull-through with it. Nice that you actually came to implement it yourself!
OkHttp
You Sir are a genius.
Thank you :)
There is no debate, Intellij is just better.
J++ was Microsoft's attempt to extend and embrace Java back in 2000.
Does IntelliJ have [native](https://wiki.ms-paint-i.de/misc/assistant) [Google Assistant](https://assistant.google.com/services/a/uid/000000ea787ea6b8) integration? That's what I thought.
This is amazing
I meant between Intellij and Eclipse, obviously your Paint is better :P
I am fairly certain the author had no intention for this to be a serious replacement for an actual IDE.
Ah okay, that makes more sense
Then he needs work on his delivery.
ding ding ding, you got it. Some people don't get the joke, and it's pretty funny. For more people who *really* didn't get the joke, check out any of the comments on the [Tweakers](https://tweakers.net/geek/143297/programmeur-maakt-ide-met-ms-paint.html) article on it, it's actually really funny (Translation probably needed)
I don't know what OpenJDK uses as their coding standards, but if you're looking for something a little more up to date, check out Google's coding standards.
I second that. Recently OkHttp 4 has been released, which is written in Kotlin now. I am a bit sceptical about this version (mainly because of debugging concerns), but I love OkHttp 3.
AFAIK this is the only thing out there that offers OCR, so if you're already writing code in MS Paint (or any other open source alternative, like gimp or inkscape) this is a real game changer.
lmao that's a good point, imagine all the code written in paint programs that's now compileable. &amp;#x200B; As per proper reddiquette, happy cake day as well
Junior developers are hired mostly for their potential (i.e. fast learner, works well with others). You need a certain technical proficiency, but you will not be expected to hit the ground running.
I used it in the past, it works. It's missing some things like support for `application/x-www-form-urlencoded` and `multipart/form-data`, but those can be found on the net. [Here](https://openjdk.java.net/groups/net/httpclient/recipes.html) is a link to some examples.
Checkmate, atheists.
Especially if you change one but don't update the other
Hmm, idk about this. Doesn't seem to be worth the cost, at least for me.
You could try searching [https://wiki.openjdk.java.net/](https://wiki.openjdk.java.net/), but from a quick glance the only thing I found were the [OpenJFX Code Style Rules](https://wiki.openjdk.java.net/display/OpenJFX/Code+Style+Rules), and they reference the Sun style and don't add very much. Offtopic: Would be nice to have an official `jfmt`/`jformat` tool like other languages, but since most developers use IDEs with pretty consistent default formatting rules, the hours are probably better invested elsewhere.
Maybe have a look at https://www.vavr.io
Wait...what?
[Spring's new WebClient](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/reactive/function/client/WebClient.html) as well as the older blocking RestTemplate, but there's no easy way to import either without dragging half of Spring along with it. Still, if you're using Spring, they're the obvious choice. When it comes to lightweight, the built-in Java HTTP client (stable release in 11+) is pretty great. Not a lot of bells and whistles, but for simple stuff it works pretty well.
Now I can finally have a proper IDE to finish coding Half-Life 3 with, Gabe will be so proud. &amp;#x200B; But seriously, this is so absurdly cool.
It really is amazing. You can change your code. Erase mistakes. Re-arrange lines. So much easier than a typewriter producing pages of code for OCR.
"update" was the wrong wording, it is a complete rework. Though I guess stuff like mimetypes are still missing.
I've also recently discovered FeatureMatcher, that allows to apply a matcher to a certain 'feature' of the object, cutting down the number of methods to override to just one: static Matcher&lt;Person&gt; hasName( Matcher&lt;? super String&gt; nameMatcher) { return new FeatureMatcher&lt;Person, String&gt;( nameMatcher, "name", "name") { @Override protected String featureValueOf(Person actual) { return actual.getName(); } }; } // In the client code: assertThat(person, hasName(startsWith("John")); With Truth/AssertJ more ceremony is required for one-off matchers, but once you got that, it is easier than in Hamcrest to add new matchers for the same type.
It has become a complete no go because of that.
For me, the best library is Square's Retrofit built on OkHttp. More often than not, you want to hit an endpoint just like you'd call a method. Square's retrofit eliminates so much of that cruft and makes it dead simple. [https://square.github.io/retrofit/](https://square.github.io/retrofit/) &amp;#x200B; You configure your Retrofit instance, then point it at interfaces which define what you want. &amp;#x200B; You can do some of that with newer versions of Jersey client. But, my heart belongs to retrofit for doing it so cleanly.
Thanks! We have https://github.com/google/google-java-format to go with it, too.
Wait... I actually want to draw pictures in my JavaDoc. MS Paint best IDE.
&gt; since most developers use IDEs with pretty consistent default formatting rules, the hours are probably better invested elsewhere. This is what I'm curious about. I use IntelliJ and always import the code style (usually Sun style but I have also used Google Java Style). Do other people do something else? I am sure there is a default code style in IntelliJ because otherwise how would the Code Format feature work, but it's opaque to me what that default style is. At least with a tool like CheckStyle they tell you that it's Sun style.
two-space tabs though
Please dont
If you where French, you will know that we use OpenOffice as free firewall
It's a draft from 2015 for OpenJDK project but it's quite universal: http://cr.openjdk.java.net/~alundblad/styleguide/index-v6.html
what's it like to be a bastard-man?
&gt;t, you want to hit an endpoint just like you'd call a method. Square's retrofit eliminates so much of that cruft and makes it dead simple. Do you know the difference between Retrofit and Feign ? I've been using Feign lately but the description of Retrofit seems like both are similar.
Could do with one that supports dns over tor
Well can't you do this with react native?
Why do you need Java to access the db?
What does that mean!
Yeah but do you have rotating 3d models in your IDE? HolyC in TempleOS got that
can I ask, why?
&gt; * Google Assistant support Yes, fucking finally! I've waited for this since Microsoft Sam.
I use OKHttp (https://github.com/square/okhttp) along with Retrofit (https://github.com/square/retrofit) for type-safe client and Moshi (https://github.com/square/moshi) for JSON (with codegen for no reflection). I never had such a pleasant experience with any other HTTP libraries.
You mean like an IDE? Eclipse or IntelliJ are the most common for Java. I like IntelliJ better.
Check out https://www.eclipse.org/xtend/. It is basically a transpiled to Java language that has a lot of syntactic sugar for a lot of tedious Java verbiage. It has total IDE support on eclipse and there is an IntelliJ plug-in. IMO, Learning Kotlin is a better time investment. Kotlin is much more than a different syntax. The compile time null safety will return your time investment fast.
This is proof that god loves us and wants us to be happy
Care to explain why you would want trailing commas? It's something I find horrendous when I use the auto format in Terraform files.
BlueJ or Dr. Java are simple Java code editors that are commonly used for beginner high school/college courses. Both have downloadable PDF documentation.
Yeah that's the one bit I would ignore. Oracle really needs to update the old Sun documents. They've dropped the ball on this. The other style guide (now very out of date) to investigate is Elements of Java Style. A small book that explained Java style as it was 15 years ago.
&gt;In particular because the metadata is 300mb for git and 1.2gb for hg. That's a big check out. Quoting [https://www.reddit.com/r/programming/comments/cdkzk0/jep\_357\_migrate\_the\_jdk\_from\_mercurial\_to\_git/etwl515?utm\_source=share&amp;utm\_medium=web2x](https://www.reddit.com/r/programming/comments/cdkzk0/jep_357_migrate_the_jdk_from_mercurial_to_git/etwl515?utm_source=share&amp;utm_medium=web2x): &amp;#x200B; &gt;Comparing a new `.git` folder to a very old `.hg` folder is not necessarily a fair / useful comparison. Have they tried `hg debugupgraderepo --optimize re-delta-all --run` or similar? That can help a lot: e.g. [FreeBSD went from 16GB to 1.6GB](https://www.mercurial-scm.org/pipermail/mercurial/2019-May/051249.html)
Lmao, dude! you just made my day XD
Me: The perdect IDE doesn't ex..... You: Here is MS Paint IDE Me: 😍😍😍
One example: Apple, Peach, Cherry Now suppose you want to reorder that alphabetically (by cutting and pasting): Apple, Cherry Peach, Which is no longer syntactically correct. A trailing comma would have fixed it. I know it seems trivial, but I've run into this type of situation enough times that it could be worth it.
Java is mainly used in the back end for web applications yeah " **Is web development the future of Java** " is already the case in a lot of bigger companies using Java on the back end.
Desktop is not as popular as web or android now, but I think that may change now with Graal. There's a lot of inertia behind other options, but now that you can bundle the JRE with your application easily, I think Java becomes a player in the desktop space in the future. That doesn't help you locate a job today, but I would not worry about skill atrophy. The opposite. With Graal's polygot nature, you can offer desktop solutions no other single language can match. You can merge solutions from other languages into your applications. You can blend the best of R, Python, JavaScript into the JVM and get amazing results as Graal runs those languages faster than their native interpreters do.
Lol,take over my computer. You can try Eclipse, Netbeans, and IntelliJ.
!remindMe 1 day
I will be messaging you on [**2019-07-19 02:10:29 UTC**](http://www.wolframalpha.com/input/?i=2019-07-19%2002:10:29%20UTC%20To%20Local%20Time) to remind you of [**this link**](https://np.reddit.com/r/java/comments/celnka/is_web_development_the_future_of_java/eu3it5o/) [**CLICK THIS LINK**](https://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=%5Bhttps%3A%2F%2Fwww.reddit.com%2Fr%2Fjava%2Fcomments%2Fcelnka%2Fis_web_development_the_future_of_java%2Feu3it5o%2F%5D%0A%0ARemindMe%21%202019-07-19%2002%3A10%3A29) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](https://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete%20Comment&amp;message=Delete%21%20celnka) ***** |[^(Info)](https://np.reddit.com/r/RemindMeBot/comments/c5l9ie/remindmebot_info_v20/)|[^(Custom)](https://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=%5BLink%20or%20message%20inside%20square%20brackets%5D%0A%0ARemindMe%21%20Time%20period%20here)|[^(Your Reminders)](https://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List%20Of%20Reminders&amp;message=MyReminders%21)|[^(Feedback)](https://np.reddit.com/message/compose/?to=Watchful1&amp;subject=Feedback)| |-|-|-|-|
But does it support basic Eclipse functionality like freezing or freezing and then crashing?
lmfao, you know what, I don't think I ever got around to adding that feature. I guess it'll never be as big as eclipse with such a prevalent feature missing.
IntelliJ Community edition
i'd rather no commas, or commas being equivalent to whitespace :D
It's hard to figure out what you're trying to do. Undoubtedly, the problem with your approach is further up the line if the only solution is Java in the browser. &gt;Oracle still uses Java to access Oracle databases. Oracle supports dozens of languages for accessing its database (as do most database engines).
/r/learnjava is for such questions **Removed**
The client has spent millions in the past decade on the java front end.
The client has spent millions in the past decade on the java front end.
This subreddit is not /r/techsupport, nor /r/suggestmeaprogram. You don't even give sufficient information to determine what you actually want/need. &gt; I'm going to be a little lite on details so this isn't miles long. Totally wrong approach. The more details you give, the more and better help you will get - provided that you post in the right subreddit. **Removed**
/r/javahelp is for Java programming help. /r/androiddev is for help with Android programming. **Removed**
Such questions belong in /r/javahelp.
Somewhere out there is a 800x4,000,000,000,000px png of the entire MS office suite source code, and this is the **only** tool that can compile it.
Exactly, I'm preparing for when I come across that image and on the fly I need to compile the entire MS Office Suite
Better to have, and not need, than to need, and not have.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Or InteiliJ features of turning the fan at full speed due to high CPU usage and continuous HDD noise due to non stop indexing?
A true mad lad. Jesus fucking Christ.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
....and how am I supposed to draw deliberately bad photoshops with this?!?!?
I remember that. There was a "Learn J++ in 21 days" book at home.
Fix your transitive dependency conflicts. It's not hard. And again, all the transitive dependencies coming from &lt;scope&gt;test&lt;/scope&gt; don't mix with the runtime ones! I'm not a fan of useless deps myself but deeming assertion lib as useless ones is really stupid, they bring code sanity, readability. not considering that they typically bring very few dependencies. Really, what are we discussing here?
Oh my God! This is totally amazing Sir :)
1, 2, Oracle cease and desist.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
No mixed language codebase.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Do people really think Eclipse is better than IntelliJ??
"web development" If you mean a java application returning HTML to a client (browser) then yes it is common these days but becoming less so. If, on the other hand, you mean a java application handling HTTP requests (such as a Java microservice) then yes this is becoming very common and is probably an essential skill for most Java developers.
for the perspective thing. yes. for the incremental compiling accross 10s of projects. yes. for continuously view compile errors accross 10s of project in workspace. yes. for workspace IDE. yes. (IntelliJ is project based IDE) for ease of use for code completion, code generation etc. no. so for a monolitic android app, i will use Android Studio. otherwise Eclipse because i cannot live without the features above. I asked Jetbrains for years but they dismissed workspace based setup.
Without this it's practically useless.
&gt; It's not hard. Disagree &gt;they bring code sanity, readability Disagree We just disagree on some things, that's all.
Can you elaborate how functions can be defined after use? As far as I know, that's a C/C++ thing and not available in Java. If you're talking about interfaces then it's because interfaces are a contract of which methods a class must have available and says nothing about the implementation.
Yes, Oracle JDK uses Oracle Technology Network License Agreement from JDK 11 (but also applies to Oracle JDK 8 updates from u211, April 2019) so requires a Java SE subscription to use in production. Alternative builds of OpenJDK use GPLv2 with classpath exception (CPE). The CPE is the important bit because it protects your app from the viral nature of the GPL so your source code does not need to be provided.
I could see the idea more generically across languages if you considered all of your code files from a linear perspective. So you could use a function in an earlier line of code and define the function later, but that logic ignores how compilers work.
It looks like in your [submission](https://www.reddit.com/r/java/comments/ces2mh/c_developer_entering_a_part_time_masters_program/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yes, some people even prefer eclipse or IntelliJ over MS Paint IDE
Call statement to a function at line 15. Definition of the function at line 135. Is okay. Using a variable at line 15. Definition of the variable at line 135. Is not okay.
Calling a function is not the same as referencing a variable. Your functions are blocks of code with no inherent order in which to run them. When you call a function then the appropriate piece of code will be called. However inside a block code needs to run in a predetermined fashion, otherwise you wouldnt be able to even do simple arithmetic because you would have no idea how a couple lines of code would execute.
yeah, that makes sense. I've heard that calling Kotlin from Java isn't always 1:1 with what is written.
It really depends on the language. In Javascript it's called function hoisting. You can call a function that has not been "defined" because in practice the interpreter moves the function to the top before starting to execute the program. In Pascal however a function must be written before the line that calls that function or you'll get an error. In Java it's probably because it's a [descendant of c++](http://rigaux.org/language-study/diagram-light.png) which sits somewhere in between where you must define the skeleton of the function and write it later. It's just a convenience thing so that your main() function doesn't have to be the last function in the file.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programming] [Kogito, ergo Rules — Part 1: Bringing Drools Further](https://www.reddit.com/r/programming/comments/cesyhk/kogito_ergo_rules_part_1_bringing_drools_further/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
It looks like in your [submission](https://www.reddit.com/r/java/comments/cetm6j/how_to_install_system_dependencies_on_docker/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
We're already there. 90% of Java based positions are Spring/Boot. WASM development is something interesting to keep an eye on, and JS/Node keeps eating into everyone's pie. I'm a bit dejected on the future of Java tbh. If Graal works out then we'll probably see other languages prosper at the expense of Java.
This applies beyond Java too, for the most part a language is a language is a language.
Why 18 months in the UK?
It kind of says something that the tool meant to be a quick bootstrap for another framework needs a bootstrap tool itself. I haven't settle exactly on WHAT that's saying, but it's saying... something.
What are the advantages of Git compared to Mercurial?
Is it not already the case?
&gt;We are in 2019 and while it has often been given for moribund, or even qualified as new COBOL by some, the Java programming language still remains the **inconstested** leader of programming languages in the enterprise world. The word is **un**contested. No offense.
Very poorly written IMO. I made it half way into the first myth.
I don't really understand what you're trying to say. You have to get project boiler plate from somewhere. Simplifying creating POMs or build.gradle and shelling out a folder structure has value. Enabling a common starting point for multiple teams has value. In that respect, Initializr is not that different than JHipster or Dropwizard. I've used a number of models over the years in both small and large teams. Copy/paste folder shells, forking a shell repo, Lazybones/JHipster/Ratpack, and Spring Initializr all help get that common starting point with various downsides. If you work in an enterprise, there are often custom libraries or mandatory integrations/customizations that need to apply to all projects. There are team conventions/standards that are easier to apply, if the project starts out compliant (e.g. separating API and DB classes by module or whatever). Being able to build your context-specific customizations into the new project creation process is great. Especially in high volatility or microservice environments, reducing overhead in artifact creation/setup time has huge value. On the Initializr changes specifically, the old model was terrible. The new one still has some growing pains, I think, but is definitely a step in the right direction. It's a bit too cumbersome still to setup archetypes or similar without customizing the client and breaking IDE integration. The API into Initializr is fairly constrained and doesn't expose enough "levers" for customization or make what is there available in all the defined extension points.
&gt; There are three primary reasons for migrating to Git: 1. Size of version control system metadata 2. Available tooling 3. Available hosting
&gt; There are three primary reasons for migrating to Git: &gt; 1. Size of version control system metadata &gt; 2. Available tooling &gt; 3. Available hosting
Offer higher pay.
We're going to provide the same feedback as your other thread.
Probably
You could hire headhunters which do the job for you or you import them. People are willing to move if the salary matches the circumstances.
When a framework enables features only by adding dependency you should avoid it
Jdk or jre? Witch distribution? Linux, windows, mac...? Don't you have a log or at least a screenshot showing the error?
It's jre, the distribution that im trying to get should be the latest, and I'm on windows. Another thing is that the jre1.8.0\_221 folder keeps getting filled even though the installation doesnt complete. &amp;#x200B; And [here](https://imgur.com/a/Qjc2wDJ) is the screenshot
I wasn't really thinking in terms of whether or not a tool like this is valuable. I was thinking more in terms of "is there a more clever way to describe a project without a whole mess of boilerplate that doesn't lose the functionality." I'm guessing we're just going to assume the only thing I could've possibly meant is something negative about the tool, even with the inclusion of "haven't settled on exactly what that's saying." ¯\\\_(ツ)\_/¯
This is not the subreddit for such questions. Such questions belong in either /r/javahelp or /r/techsupport. **Removed**
The very last sentences captures it well: "Imagine, everything you did in map and flatMap had to check for null! That Optional would be a great monad, but provide zero null-safety." In other words: It would be entirely useless in Java if it was a pure Monad.
Oracle official docs.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
the 9 in 1 java for dummy book got me started in java. it's a little out of date as it doesn't teach JavaFX and it is easily 1000 pages but it's split into nice sections that you can complete and explains the subjects well. you can skip around pretty easily and only read what you need to.
I think it is possible to learn Java when you come from an other programming language. Maybe you are not used to the strict handling of types in Java. But once you get used to it, you will love it. ;) Maybe some online tutorials for the basics are enough. Just get your hands dirty. A professor at my university told me once that it is possible to learn every new language in one week, because the basics are quite similar. And learning the differences is way more efficient than learning the new from scratch. BTW. (I think his definition of week is an other than mine)
Effective Java, third edition. It won't teach you syntax, but that's the easy part anyway.
It's worth noting that Optional *is* a monad in the absence of nulls. Mixing nulls with Optionals seems a little bit insane to be honest.
I wonder when Atlassian will delete their slightly hysterical ["Optional is Broken"](https://blog.developer.atlassian.com/optional-broken/) page.
/r/learnjava
In chapter 1 of _Effective Java_, though, it says: &gt; This book is not for beginners: it assumes that you are already comfortable with Java. If you are not, consider one of the many fine introductory texts, such as Peter Sestoft’s Java Precisely [Sestoft16].
_Java Precisely_ by Peter Sestoft
only true(ish) for C-style languages though
What? The one week thing? For sure!
Core Java for the Impatient by Cay Horstmann
Javafx is depreciated.
Only amateurs downvote official docs.
So it's to Micronaut as Spring Data is to Spring Boot?
At the company i am working for we have used OkHttp for a few years now. We aren't developing android apps, so nobody uses Kotlin and there are no plans to do so. Because of this, we are a bit concerned about the new version of OkHttp. The issues begin with the new API documentation that uses Kotlin syntax that we are not used to read, but that is the least of out concerns. We are more concerned about the ability to debug our software. As soon as the debugger steps into the Kotlin code of OkHttp, it becomes difficult for us to understand what it going on. Also, I doubt that the autocompletion offered by eclipse will do us any good when using the API of a Kotlin library (but I haven't tested this yet). Also, we are hesitant of adding the Kotlin standard library to our class path that is only necessary for one library that used to be extremely slim and had no further dependencies except for Okio. I will probably try to migrate to the HttpClient of Java 11 as soon as we've completed our migration to Java 11. I still think OkHttp is better in terms of API and functionality (I will really miss the HttpUrl class), but I still think the HttpClient of Java 11 is worth it just to avoid the issues mentioned above. What are your thoughts about this?
Why?
How else do you add features?
Its bullshit. I have been trying to create a wireframe to migrate my web application since last week. It took 2 days to figure the bootstrap comes with a default template engine thymeleaf whatever the fuk that is, and i have to add two new dependancies, change me controller type and create a config class just to work with jsps. Create-react-app was much simpler. Why the fuck would you ship a java bootstraper that doesnt ship with JSP? I thought spring was free and open source, do they have some deals with thymeleaf?
I completely agree with your concerns, but to help you might want to decompile the bytecode when debugging instead of using the source files. Fernflower in IntelliJ or the Enhanced Decompiler Plugin in Eclipse (also Fernflower or any other) gets you quite far, but not all the way.
Already upgraded work app from okhttp3 to 4 without any Java differences/issues (maven). No worries :)
You totally missed out. It took four tries, but he did eventually find a real myth about Java.
I can't top that. In F# you can not only mix optionals and nulls, you can put nulls inside of options. string s = null; Optional&lt;string&gt; os = Some(s); ? os == None //false ? os.Value == null //true
Yes, I've always suspected this, but I never took the time to sit down and prove it.
That's one way to look at it, yes. You can use Micronaut beans in Spring. Predator looks like it competes more directly with Spring Data, with a lot of the work done at compile time.
Scala also allows `Some(null)`. This has been discussed repeatedly (probably as many times as `Optional` in Java), e.g., http://www.scala-archive.org/Some-null-td2012975.html http://scala-programming-language.1934581.n4.nabble.com/Option-T-and-null-td2008053.html http://www.scala-archive.org/Some-null-td2228636.html http://www.scala-archive.org/Option-asserts-that-its-argument-is-not-null-td2006479i40.html If you have `Option(null)` you get `None` but you can write `Some(null)` or map an option's value into null, resulting in `Some(null)`.
Yea, that's even worse.
&gt; Imagine, everything you did in map and flatMap had to check for null! Technically that's how .NET works. Yet I can't remember a single time where it was an issue. Worst case scenario, we add a Where clause to filter out the nulls.
It's becoming a full-time job just to keep up with the features in java...
If you have to take those steps to debug an issue, I can see how they could be a godsend (haven’t tried them myself). As for choosing the http client library for new projects going forward- OkHttp just pulled an inverse Kafka. Good for them, but bad for every non Kotlin shop (still the vast majority of their users) and therefore bad for the community. Don’t worry, Kotlin will be fully dead once active JEP projects are delivered so the question is- why do
Checking [openjdk.java.net](https://openjdk.java.net) once every 6 months is already a full time job. Or, at worst, subscribing to jdk-dev.
I sincerly thank azul for building this nice zulu JDK 8. It saved my life as I had to continue developing in java 8 with javafx, and that it the only java 8 JDK I could find with javafx (almost) completely working.
&gt; Also, I doubt that the autocompletion offered by eclipse will do us any good when using the API of a Kotlin library The library is binary-compatible with OkHttp 3.x so as long as Eclipse is indexing the available APIs by reading the signatures in bytecode (which seems the obvious way to do it) then it doesn't matter what language a library is written in, you'll get the same behavior.
It's also source and binary compatible with 3.14, has zero new features compared to 3.14, and the entire test suite (which remains written in Java) remains unchanged compared to 3.14. To Java consumers, _especially_ those on the JVM, the added transitive dependency should be less of an issue than previous releases where things like supported ciphers and VM support has changed.
Same here. I still develop my UI with Swing, since I never got to like javaFX. But on the other hand, Swing has it's rough edges, like GridBagLayout (we never really became friends). So maybe I will just try to use some HTML to replace swing in my desktop apps.
better 6mo interval than multiple year interval. keeps the language a bit more with the times!
Really interesting to see this model of pre-compilation via annotations being pushed further and further. Am using Micronaut in some applications at the moment and it's absolutely great in the sense that it lives up to its promises about speed and memory, the documentation is good and they have got all the defaults just right so that it works great for microservices straight out of the box. I do always have this qualm that not being able to see or have control over that code generates the potential for really horrible bugs to hide and subtle problems that become incredibly hard to trace down. But in some ways annotation processing is certainly no worse and probably better than runtime reflection for that.
sorry jetbrains i found a better ide
&gt; new API documentation that uses Kotlin syntax that we are not used to read It's annoying, but you'll get used to reading it as if it were pseudo-code. &gt; Also, I doubt that the autocompletion offered by eclipse will do us any good when using the API **of a Kotlin library** Kotlin is a JVM language. Autocompletion should work just fine since its based off of the binary class format. &gt; we are hesitant of adding the Kotlin standard library to our class path that is only necessary for one library that **used to be extremely slim and had no further dependencies except for Okio**. This is valid. But is the file size really an issue for your use case? I tested `mvn package` with `okhttp:3.14.2` vs `okhttp:4.0.1` on a empty project and got the following packaged jar sizes _(with dependencies)_: | OkHttp | 3.14.2 | 4.0.1 | |---|---|---| | Size| 507 kb | 2,279 kb |
Idk learning a bunch of features every couple years seemed just fine to me. It seems like every month there's a new JDK dropping
/r/javahelp is the place for such questions. **Removed**
its not very constricting as they usually keep back compat so old code will work, its just a couple new features that you may never even use
JEPs: https://openjdk.java.net/projects/jdk/13/ The Socket API overhaul could be cool. In general I wish the Java network stack had more interfaces for writing custom things. Any artifacts/whisperings from [Project Valhalla](https://wiki.openjdk.java.net/display/valhalla/Main) in this release? Looking forward to human comprehensible visions of L-world.
&gt; Any artifacts/whisperings from Project Valhalla in this release? Looking forward to human comprehensible visions of L-world. Not in this release, but they are working diligently. You can grab the latest EAB [here](http://jdk.java.net/valhalla/) if you would like.
Thanks, I browsed through the pdf and it's pretty much exactly what I'm looking for.
There are small differences, such as 3.x OkHttpClient could be extended with method overrides. In 4.x the class is open but the methods are not. Thus following the pattern set by [metrics-okhttp](https://github.com/raskasa/metrics-okhttp) does not work anymore, forcing a better compositional approach. That's not a bad thing (and should not be changed), but 4.x has minor incompatibilities.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; Mixing nulls with Optionals seems a little bit insane to be honest. Yeah, wasn't Optional supposed to be the alternative to null? If you have a function which returns null, you wrap it in a function that returns optional. At least, that's how I understood it.
This is what I ended up going with. Thanks for the suggestion, it's been great so far!
I'd rather have few features every 6 months than 40-50 JEPs every few years. Migration between Java versions is less painful.
&gt; It's worth noting that Optional is a monad in the absence of nulls. I think in general that teams that are mature enough to consider using Optionals are also mature enough to flog any developer who would return a 'null' optional. So the debate on this is IMHO pretty theoretical.
Cool, but I hope not everything socket based is going to break, like some of the TLS overhaul did in JDK 11.
[Nope, I am out!](https://i.imgur.com/vpe7vxz.png) The tooltips show absolutely no API documentation anymore. And if the tooltip shows something, it's gibberish. When stepping into the the class file, it doesn't even show me the kotlin code, but pseudo code that looks decompiled. This rules out any kotlin libraries for us.
[Nope, I am out!](https://i.imgur.com/vpe7vxz.png) The tooltips show absolutely no API documentation anymore. And if the tooltip shows something, it's gibberish. When stepping into the the class file, it doesn't even show me the kotlin code, but pseudo code that looks decompiled. This rules out any kotlin libraries for us.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
There's nothing special about that. In fact it is consistent with everything else where null is a valid reference value including inside data structures. You can probably do the same in Java if you don't use `ofNullable`.
&gt;You can probably do the same in Java if you don't use `ofNullable`. [Nope](https://github.com/openjdk/jdk/blob/a43e0d1a9ce72ac06290d34e2afad5419495a5a5/src/java.base/share/classes/java/util/Optional.java#L111).
That's just `of` but there are numerous roundabout ways to get there still. For example mapping to null: the specification only says it throws when the mapper is null, not the mapper output. You can only be sure when you analyze every method there. Also, it's still only limited by explicit checks in the specific implementation of Optional. Nothing in the Java type system prevents it.
You think, like many others, that they can develop Spring applications by just following some guides. Maybe this is because the javascript ecosystem does work that way. Read a book on Spring and Spring Boot and you'll understand that it's the best thing since sliced bread for java web application development.
The Monad law-breaking behaviour arises if you map over an Optional a function that can return a null. So Optional nulls as such don't occur. But, yes the correct thing to do would be to change the function return type to Optional.
&gt; For example mapping to null This entire discussion is about the fact that if the mapping function returns a null then Optional will convert it to an empty value, thereby breaking the Functor and Monad laws. As far as I know its not possible to store a null value in an Optional.
In the linked implementation yes, but the specification of map doesn't actually say that it does, unlike the specification for of.
Ooof that's a very Eclipse reaction. File a bug on them?
The documentation says: &gt;A container object which may or may not contain a non-{@code null} value. In other words: If there is content, it's non-null.
If you're using powershell, try typing `$env:path` and see if the path is in there.
What specification are you referring to?
[This line specifically](https://github.com/openjdk/jdk/blob/a43e0d1a9ce72ac06290d34e2afad5419495a5a5/src/java.base/share/classes/java/util/Optional.java#L251).
Reinventing the wheel?
I never start Java that way, relying on the Windows path environment variable. Try the following, instead? \- Create a new batch file (a text file with the extension, .bat); \- Edit that using a plain text editor and type: set JAVA\_HOME="c:\\wherever Oracle installed\\java\\this time\\" set PATH=%JAVA\_HOME%;%PATH% %JAVA\_HOME%\\bin\\java -version The batch file temporarily sets Windows environment variables JAVA\_HOME and PATH to your needs. They'll be applied to the applications and instructions inside the batch file only.
That's true! The non-final nature of OkHttpClient was a historical accident.
&gt;https://truth.dev/comparison Would really like to use Truth. But last time I tried it, it brought in 12 dependencies. AssertJ on the other hand brings in 1 dependency. For some people this might not be an issue. But it was what made me decide to use AssertJ over Truth.
```ofNullable``` is one of those things that really grinds my gears. I understand __why__, but practically speaking, null __is__ the absence of a value (aka ```Optional.empty()```). IMO, it should be valid to say ```Optional.of(null) == Optional.empty()```, which is exactly what ```ofNullable()``` does. In the absence of a ```None``` type, I think requiring that ```Optional.of(T)``` accept a __non-optional__ value is... silly... and a PITA.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/kotlin] [Const Generator Maven Plugin - place compile-time values in code (build version, build time, etc) (x-post \/r\/java)](https://www.reddit.com/r/Kotlin/comments/cf6x6d/const_generator_maven_plugin_place_compiletime/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
LOL, that's the Javadocs for the class, hardly a "specification". Unless you can come up with a counterexample, it is not possible to construct an Optional which wraps a null value.
What are the benefits of this compared to the typical way of doing this? I.e. interpolating into a properties file
**No programming help questions here!** These should be posted in [**/r/javahelp**](https://www.reddit.com/r/javahelp)
Does micronaut generate bytecode directly? I would have expected source files, like dagger does it.
Mainly that it's easier to access the values from code as it generates the named static properties. Of course you could write a wrapper that loads the values from a file, but this way it is done automatically.
Except it (the HTML extracted from javadocs) still is *the* specification for the Java standard library. The fact that map is implemented via ofNullable is an implementation detail. The same API can be implemented differently and is just as valid as long as it follows the written specification. Maybe you're not aware of it but alternative Java class library implementations exist. Also the specification matters because the implementation code you have in your JDK isn't necessarily the same as the one which rt.jar was compiled from and is used in the runtime environment.
Sorry to rain on your parade...but: Thing is; you generally want to automate builds and deployments. So as part of a build process, you run maven to build and test the code. This is generally done on every commit. But when you change the code, you also have to test the code, and commit it, etc. So basically you just created an endless loop. There is no need at all to change *code* when all you're doing is changing *data* the code uses. Even though it's possible, and might save a line of code or two (it's not like reading a .properties file is hard, and in most cases this kind of config is handled by the framework, it's simply a bad idea. So the reason what you're doing is 'new' is not because people haven't thought of it before, but because it's simply a bad idea.
How is this simpler than `System.getProperty("key");`?
Those are set on the Java command line.
Can you cite a source to support the assertion that the Javadocs constitute a formal specification that alternative implementations must adhere to?
Well, you first have to load the properties file, no? I'm not sure if there is auto loading for certain properties files, TBH I haven't used system properties in a while. From what I remember accessing the file worked differently when testing from an IDE and from running as a jar. Also different artifacts could be overwriting each others values, and there is the small chance that a security manager will forbid system property access for your module. The rest is really down to personal taste, I simply prefer "typed" access (e.g. ProjectInfo.version) to string key based lookup (System.getProperty("version")).
The Maven plugin generates code during the `generate-source` phase. That code is not committed. There's no endless loop here.
Uninstall it, restart your computer. Delete the folder "c:\program files\oracle\java" or "c:\program files\java", and then install the offline version. Pay attention to 64 or 32 bits installer.
Open Source?
Well code generation does run before testing, and for my intended purposes (mainly version, build time storing) changes is the data actually are triggered by building, so I don't really see why it would create testing problems. Also I would kinda argue that static final string fields are more data than code, even if they are wrapped in a class. Honestly when I looked around for solutions I found people advocating for embedding ant scripts that concat together similar files and I just wanted to make a proper plugin instead. But anyway, it's just a quick hobby I made, only published it to get to know how maven publishing works and maybe so that it would be helpful for some people.
&gt; That code is not committed So how are you going to figure out when the software crashes during start-up because instead of an integer version you managed to push a String what the cause of this was? Not committing the code you generate from (for example) an Antlr grammar or WDSL generator is different; because at least those builds are reproducible. Anyway; I explained why I personally think this is just a bad idea. If this plugin solves an issue for you; awesome :)
You should try this plugin https://plugins.jetbrains.com/plugin/9406-code-screenshots
&gt; Honestly when I looked around for solutions I found people advocating for embedding ant scripts that concat together similar files and I just wanted to make a proper plugin instead. The Spring Boot plugin (for example) does what you're doing but it works by outputting metadata for the .jar your Java code can just read. There's similar plugins that do similar things. Other than that there's a standard [maven plugin](https://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html) that can include variables in resources. I've used that one before as well. No need for cumbersome Ant builds. &gt; But anyway, it's just a quick hobby I made, only published it to get to know how maven publishing works and maybe so that it would be helpful for some people. Which is awesome, so like I said, sorry to rain on your parade.
&gt;So how are you going to figure out when the software crashes during start-up because instead of an integer version you managed to push a String what the cause of this was? Is this any different from when using a (build-time generated) properties file tho? Both deal with custom String values that you'll need to parse/cast according to your needs.
It's literally in [the title of the document](https://docs.oracle.com/javase/8/docs/api/index.html) (which happens to be generated from the javadoc): &gt; Java™ Platform, Standard Edition 8 **API Specification** &gt; &gt; This document is **the API specification** for the Java™ Platform, Standard Edition. The fact that the specification document happens to be generated from the javadoc of the reference implementation makes it no less of a specification. Also, alternative implementations don't have to abide to anything, they just want to because an alternative implementation that behaves differently from the specification is hardly an *alternative* implementation anymore.
Oh yeah, no worries. Filtering does look like a good alternative, though glancing over it I'm not sure if it can provide proper string escaping for the inserted data if used directly on source files (e.g. value with " inserted). Again, I think the problems are shared by basically all solutions, and the choice of storing small data in code is just beacuse of personal taste.
This definitely isn't a viable solution when deploying to application servers. System properties are defined on a per-process scope. On application servers, multiple artefacts are deployment in the same process (the application server's process), so you definitely don't want to set artefact specific values on the server's process.
&gt;So how are you going to figure out when the software crashes during start-up because instead of an integer version you managed to push a String what the cause of this was? What? The properties are type safe. You code isn't going to compile. Or if you mean that you put the value into `Integer.valueOf()`, that's no different from reading it from a property. The build will still be reproducible because it's getting the information from sources that don't change.
Yeah, you got a good point there.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/cf8b9d/top_5_frameworks_for_java_developers_in_2019/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I think the discussion is moot given the [Javadocs](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#map-java.util.function.Function-) do in fact state that map will convert nulls to the empty value : &gt; If a value is present, apply the provided mapping function to it, and *if the result is non-null, return an Optional describing the result. Otherwise return an empty Optional.*
Glad it worked out! :)
Not sure. He has other libraries for sale at https://dlsc.com/ and then some are open source at https://github.com/dlemmermann?tab=repositories
Google had better luck.
JDK 13 and 12, in particular, didn't really have anything to speak of. The language is basically the same and the API added 1 or 2 new methods. That's hardly "OMG, I'm overwhelmed by all the change!"
In a sensible design Some(null) would equal None.
In a sensible design null wouldn't exist.
Yep, and it's a pipe dream. Nulls are usually mistakes, not intentional design choices. So using a design pattern such as Optional, which only works if you don't make null mistakes, to prevent null mistakes is madness.
If they're so mature then they probably weren't having problems with nulls in the first place. Optional is like building guard rails on the highway, but making them out of cardboard.
So you don't believe in left joins either?
From the YouTube comments: &gt; Dirk Lemmermann &gt; &gt; This is a custom control I am doing for a customer of mine. If you are willing to pay for it they might let you have it, too, who knows?
That's nice. I miss desktop apps.
The javadocs are indeed a specification. The Java conformance test suite is created by humans extracting for testable assertions from the doc comments and writing tests for them. This section of the specification for `Optional.map` was clarified in a later release. The [Java 11 version](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Optional.html#map(java.util.function.Function)) states: &gt; If the mapping function returns a null result then this method returns an empty Optional. And yes, this is the behavior that breaks the monad laws, if the domain of values includes null. One alternative, is to return an Optional with a null value present. As Nicolai's article points out, this kind of defeats the purpose of Optional! Another alternative is to throw NPE in this case. This makes it clearer that null is excluded from the domain of values. But it would be pretty inconvenient to adapt null-returning functions.
It can't be uninstalled so I had just deleted the java folders then restarted my pc, and I had previously installed the 32 bit offline installer instead of the 64 bit, but when I use it it gives me the same error.
&gt; The javadocs are indeed a specification. The Java conformance test suite is created by humans extracting testable assertions from the doc comments and writing tests for them. Thanks, I guess I learnt something new today. &gt; by design it is not possible for Java's Optional to have a value present that is null. Well, at least I got one thing right...
Oof, that's a bit disappointing.
It looks he modified and skinned this library: https://github.com/RobertBColton/DockFX I use DockFX and am ... somewhat... happy with it.
Thx, I'll look into it.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt;If Graal works out then we'll probably see other languages prosper at the expense of Java. I'm not sure I see how. Could you elaborate on your thoughts? If I can use Qt for a desktop app via Graal, how does that help C/C++ at Java's expense? es4x (JS on Graal) is now the fastest JS server implentation on tech empower benchmarks. Certainly someone can use it just for JS, but the real advantage there, IMO, is access to great libs JS doesn't have. Nobody will port libs to JS anymore. Just use Graal and some JS wrappers.
The polyglot nature to me suggests that people will want to use Graal for its performance. You could get 'native' Clojure for example (yes it uses Java libs but its not the Java language itself) Many people dislike Java as a language, not as a runtime/ecosystem.
I see. If people don't like Java, they're already not using it. I agree Graal won't change that. Switching to Graal for performance, in my mind, doesn't make them prosper so much as it makes them dependent. Not just with the runtime either. Java tooling is much better than what they have. I'd love to see Maven central unseat NPM as the repo for JS dependencies. [The timing is right for it.](https://hub.packtpub.com/surprise-npm-layoffs-raise-questions-about-the-company-culture/)
I prefer to build using maven inside Docker rather than build the docker image from inside Maven. You don't need any Maven Docker plugins that way. The `Dockerfile` is just FROM openjdk:11-jdk-slim VOLUME /tmp COPY target/*.jar app.jar ENTRYPOINT ["java","-jar","/app.jar"] My `Jenkinsfile` kicks off the Maven build (using the Maven image to insulate the build from the build server) and once Maven has done it's thing, it builds the final Docker image. I could also use a multi-stage `Dockerfile` instead but this let's Jenkins split the build up into different stages in the pipeline so you get better feedback about build progress from Jenkins.
It's one of the best frameworks for web application development period. I always come back to Spring for serious projects both at work and in my personal time. Spring isn't simple in the way JS frameworks are, but it's worth learning.
I should certainly hope he didn't, given the license.
This is great! Bookmarked
Why don't you join the JavaFX group and help out with 3d?
The JIB plugin has the advantage that you do not need docker to build the image, which allows you to publish docker images from within unprivileged docker-based job runner environments (e.g. gitlab ci/cd) where docker-in-docker is disabled.
Me too.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
In IT is quite common that people change jobs every 2 years, and an unwritten rule I found in London is that less than 1 and a half year is too little, and between 1,5 and 2 years is reasonable, and more than 4-5 years in the same place looks fishy.
Warning: DockFX isn't compatible with OpenJFX 11 and above. We had to completely remove all usage of this library from our code when we migrated from OracleJDK 8 to OpenJDK 11.
Optional.get needs to exist, because you can't do everything with ifPresent due to limitations of Java lambdas.
Reminds me of i3wm
It's not a very big library. Did you get the source and see where it's not working?
i tried to run it. plz don't use default package. Separate Main and MainCanvas within public class in a run package please. Project compiles in Eclipse but it says Editor does not contain a main type.
We tried to fix it, but it was just too incompatible. Class hierarchies were broken, API has been removed (or was changed to private)... Also, DockFX uses some classes from com.sun.* packages that don't exist anymore and we couldn't find any replacements.
Good plan. Will look @ tn
I see what you mean - using com.sun.javafx.css.StyleManager;
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Ah, someone else with this problem! What did you replace it with if you don't mind me asking?
I don't really know. I just noticed the incompatibilities, because I was in charge of leading the migration to Java 11. I delegated the removal of DockFX to the developer who originally introduced it. As far as I know we only used a subset of DockFX and replaced it with something simpler developed by ourselves.
https://github.com/AndrewCPU/sRender I posted the source code for it here.
https://github.com/AndrewCPU/sRender I posted the source code for it here, I'll probably do a medium article on it soon
https://github.com/AndrewCPU/sRender I posted the source code for it here.
https://github.com/AndrewCPU/sRender I posted the source code for it here.
https://github.com/AndrewCPU/sRender I posted the source code for it here.
I linked the source under some comments if you wanna check it out.
You should add a license. Currently your project is not open source. Just FTY :) You might also want to make it a Maven or Gradle project so people can easily build it.
Fixed!!! And noted, I've never really used GitHub, still learning. Thanks!
What about org.jboss.maven.plugins::maven-injection-plugin?
I have a super light weight version too that pretty much just handles 3D drawing too, if anyone's interested.
Just a heads up, you can in fact use docker in docker. I'm using the testcontainers lib in my JVM project which spins up instances of docker during tests, and I also use gitlab. You just have to enable dind (docker in docker) [https://gitlab.com/yak-stack/yaklet-webserver/blob/not-shit/.gitlab-ci.yml#L4](https://gitlab.com/yak-stack/yaklet-webserver/blob/not-shit/.gitlab-ci.yml#L4)
That's like saying "dad can't stop beating mom because she still doesn't listen to him".
Yep.
IIUC, for socket APIs, no new classes or interfaces getting added. They are changing the internal implementation to use nio to work with Fibers. So don't expect any changes visible to developers.
If used with `boolean` you can be sure that javac or at least the JIT constant folds paths which use said boolean. This way you can disable logging (given you wrap your loggers in a class that will respect the given boolean) with guaranteed zero overhead as it will folded away.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Using this would require your artifacts to be rebuilt when one of the constants changes. This is a common bad practice that goes against rule 3 of the twelve factor methodology.
 [20.767s][warning][os,thread] Failed to start thread - pthread_create failed (EAGAIN) for attributes: stacksize: 1024k, guardsize: 4k, detached. [20.819s][warning][os,thread] Failed to start thread - pthread_create failed (EAGAIN) for attributes: stacksize: 1024k, guardsize: 4k, detached. Exception in thread "AWT-EventQueue-0" java.lang.OutOfMemoryError: unable to create native thread: possibly out of memory or process/resource limits reached at java.base/java.lang.Thread.start0(Native Method) at java.base/java.lang.Thread.start(Thread.java:803) at world.World.updateLighting(World.java:136) at world.World.updateLighting(World.java:132) at render.Renderer.breakBlock(Renderer.java:138) at MainCanvas.mousePressed(Main.java:94) at ... Looks cool though. It runs, which is more than most projects like this can say.
Thanks, it takes a good amount of memory. The light weight version is something I'm really going to focus on and it'll end up replacing the sRender project..
You're getting downvoted, but these are valid complaints, the first two at least. OP should move everything into a unique top-level package (`com.github.andrewcpu` would work fine), and definitely shouldn't have `Main` in the default package. And `Main` and `MainCanvas` should definitely be separate files, or at least one of them should be nested in the other. No `.java` file should contain two top-level classes. That last problem sounds more like a you-problem though.
The main goal isn't really to store configs, but rather build dependent values such as artifact version, build date, build environment, etc.
&gt; No .java file should contain two top-level classes. The actual language rule is merely no compilation unit (.java file in practical terms) can contain more than one top-level *public* class or interface. This is IMO often misunderstood, and people then sometimes implement things as nestedclasses that really don't need to be nested at all - and since nested classes can have access to members of the enclosing class, that can actually hurt encapsulation, and non-static nested classes i.e. inner classes have quite complex and subtle semantics - though perhaps useful if used *deliberately* - they can also introduce confusing behavior and bugs for novices. So throwing some non-public utility classes into the same compilation unit i.e. java file as the main public class they're associated with, wihtout nesting them, is quite acceptable to me anyway. Putting them in a separate file is just clutter sometimes, and nesting them has semantic consequences you may not want. You may disagree, but that's stylistic/convention not language semantics territory.
Right, obviously it's not wrong or it wouldn't compile, but it's generally agreed that you shouldn't do it. [Here it is](https://google.github.io/styleguide/javaguide.html#s3.4.1-one-top-level-class) in the Google Java Style Guide.
meh, google aren't the boss of me.
/r/javahelp and /r/learnjava are for such questions and the sidebars there have additional information, so make sure to read them before posting. **Removed**
Both of you get an upvote ;D
Thanks!
Brian Goetz never ceases to amaze me.
What is with that teasing about Futures?
Not gonna lie, I was just being lazy,
Junit 5 uses lambdas for the native assertAll. And wiring them this way allows all the assertions inside that assertAll regardless of any failures. Junit 5 is amazing if you're unfamiliar. People just really don't like lambdas.
Well, now I work with Java8 and you can not write: `public static &lt;T extends Flyable &amp; Swimmable&gt; void process(T animal) {` `animal.fly(); animal.swim();` `}` Pretty sure I will not use Java9/10. And will move to Java 11.
It seems strange that IntelliJ can't render properly Kotlin docs (which use Markdown). For instance, the tables appearing in the KDocs are rendered in a single line, making them unreadable.
If I've watched the Spring 2019 version am I going to find anything new in the Summer edition of the talk?
Mostly the same with some added details for multi-line strings and records.
Cool, they might be worth checking out. Thanks. :)
Pretty cool. You might like this book http://www.brackeen.com/javagamebook/ He built a 3D engine in vanilla Swing.
we're currently in the process of rewriting parts of one of our monolithic systems using micronaut and graalvm. we haven't gone production yet but we chose it due to the promise of small footprint and small startup time.
Some coroutines in there for me?
No, Project Loom wasn’t mentioned in this talk.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
There's no bug in eclipse though. There's no standarization on API documentation and description on the JVM at a meta level, so that all the JVM languages can export their semantics this way. Eclipse is reading java libraries for the java libraries they are, the "issue" is okhttp not being one.
Auto completion is not just finishing a sentence for you, it's about discovering a library as you go, and being able to select the right method for the a given situation. Documentation and being able to read the code plays a key part in this, and both things are now gone for OP.
It looks like in your [submission](https://www.reddit.com/r/java/comments/cg1xqj/which_open_source_library_can_build_interactive/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The majority of the Java roadmap for the next n years: cherry pick features from Scala that don't require improving the type system.
Seriously man, did you really expect to always work with the latest and greatest and never have to maintain 10+ years old applications? I started my career 8 years ago (not 20) doing ASP classic (VBScript server side), moved on to Java using struts 2. I recently moved to another job with a VERY important and used application that is still in struts 1, yes struts ONE. The underlying langugage doesn't change much. The best you can hope is they are at the very least on Java 8. If it worked for the last 10 years, why change it and risking fucking it all up without good reason? BTW, I am pushing to move on to Spring or at the very least struts 2, but there's an old guard here that makes it harder.
that's weird, all that should work, it does in intellij
What? That's literally what bytecode is. You don't link against source, that makes no sense.
Build one massive library and then add features without versioning or just at patch so everyone gets it. Duh /s
Loom is coming. They’ve shown demos. But Goetz didn’t have enough time here. It’s mentioned on a slide though
It not a limitation of lamdas, it's a limitation of the Optional class for not including a method like ifPresent that allows you to provide a function to handle the empty case.
Optional's purpose isn't just to guard against nulls. It makes working with potentially missing values much more convenient, and allows you to show at the type level that a value might be missing.
You're significantly increasing your memory footprint and GC frequency why? To duplicate what could have been done for free with annotations?
[Here's](https://youtu.be/r6P0_FDr53Q) my latest talk on Loom from last week.
I can make a few suggestions. First Micronaut is very new. I would suggest using Quarkus. They achieve the same thing. As for JSON parsing the most popular would be jackson but there are so many different libraries that all achieve roughly the same thing. For routing, this is large subject. I would say Apache Camel would be the single best way to achieve true routing but you can also just use Spring MVC with rest controller (assuming you are using rest endpoints). I am sure people will have a ton of recommendations, this is just my 2 cents. Good luck!
Since you've looked at a lot of frameworks, have a look at [Javalin](https://javalin.io) too (disclaimer: I'm the maintainer). It does everything you want, except "native" OpenID integration (you can very easily integrate with something like auth0 though). Most of the frameworks you listed are more than good enough for what you're asking, and they're all "battle tested" enough. You're probably not going to have billions of requests hitting your server, but if that happens, you can afford a rewrite.
There is a way to activate the previous implementation if you have issues.
And I thought features were stolen from kotlin. Go figure /s
I work with Dropwizard on a regular basis as the core of an e-commerce infrastructure; its plenty stable and reliable.
Don't waste your time writing your own. Go with Spring, it has solution for everything you need. And perfectly working with Java 11
Doesn't quarkus build on vertx?
&gt;You're probably not going to have billions of requests hitting your server, but if that happens, you can afford a rewrite. This is really good advice. The reality is most applications will fail and not be online after 2 years. If they do happen to stick around it is unlikely that they will have any significant traffic volume. IF you do happen to catch traction that is a good problem to have and can be rewritten with an eye towards performance and scale. Most applications should be built in the simplest and fastest way possible to flesh out the application and if there is a market for it. Of course everyone thinks their idea is the expectation and they need to build for Netflix scale right out of the gate.
Been using vertx for five years, it is THE bomb. One framework to rule them all. Easy to use, fast, easy to learn, good docs, active community. Don't ask me what I think about spring or EE. Vert.x and the multi-reactor approach puts the FUN in my programming. One thread per request is boring me to death. EE is like Java, except you can't use half of the features and libraries. You need a big fat slow and buggy application server, even worse app servers aren't interchangeable - and that's their very purpose. To implement the "spec". Oops I'm spouting again.
Spring boot works fine with java 11.
Vertx is unopinionated, small core and rather a toolkit than framework. So combining it with other libraries work well.
"has a solution for everything you need", that's spring. It's just like EE, tries to so everything in the book instead of doing one thing and doing it well.
I agree with optimizing for time to market and MVPs. But when it's time to scale you're going to be losing dollar by the minute. Don't optimize for performance - design for it. With the right tools scaling is cheap, what you don't want to be doing is rewriting your core after years of development, as you get a surge of users. There was a great article on this..
It's a balance to be sure, but for every application that has that issue there are thousands that never launch because they spent all their time on premature optimization and ran out of time and or money.
Premature optimization is the root of all evil :) Designing for performance and scalability isn't considered optimizing that's just making the right architectural choices and not writing sloppy code.
&gt; but it seems that official support for Java 11+ is only in the 2.2.x versions (still milestone releases as of this posting). AWS doesn't even run tomcat above java 8.
You should clarify this a bit, EC2 lets you run anything that can be installed on the operating system installed.
I'm using [https://jooby.io/](https://jooby.io/) for hobby and work projects and really enjoying it. The lead, Edgar Espinar, is a machine for completion (but he rolls his eyes when I say that). I have builds that \*\*include\*\* Selenium tests (I co created Selenium 1.0) that are sub-30 seconds, that use Jooby as the server piece. One of the nice features about Jooby is the ability to make two or more standalone applications, and then later scotch tape them together for a single deployment and have them function identically. It gives you deployment options in various stages towards production: own-workstation, parallelized CI infra, (both for test automation), shared-dev, QA, UAT etc.
&gt; Spring Boot 2.1.6.RELEASE requires Java 8 and is compatible up to Java 11 (included) As yo can see, the latest RELEASE version of spring boot works with Java 11. I use it in my project (upgraded from 2.0, which itself was upgraded from 1.x) and it works perfectly. While in production i still run Java 8 (since i only wanna do one change at a time, and this time around i just upgraded spring boot), in the next couple of months i will move to Java 11 in prod as I'm already on it in dev. Spring boot is the shit nowadays, you simply cannot go wrong with it.
Well one thing you have not clarified is if you are planning on server side rendered HTML, or "single page app". Something like dropwizard works great for SPAs talking to APIs, but is not as sophisticated for HTML forms and the like as something like spring.
No, bytecode are instructions for the JVM, it contains the necessary information for the runtime to do its thing. By no means it's a meta-description language of capabilities. Kotlin has coroutines that make no sense to java, like suspendable functions declare that they return `Object`, imagine how useful is that for any other JVM language.
Spring is a collection of projects that mostly all do one thing and do it well.
IMO, use spring. It can do everything you want and more. Even if there is not yet a version that say support Java 11, I can't see any reason it would not work perfectly with a newer jdk. the use cases you listed are what spring is specialized at solving. Spring boot brings a lot of "black magic", but the basic working of spring is clear and you're not forced to use spring boot over spring anyway.
Maybe it's just not for me, there's so much magic. I've only seen poorly written spring apps that the authors don't even know how it works. There's xml and annotations, magical wirings and injections and no one seems to have given it any thought.
Short answer: no. The multiplatform aspect has to be understood as ability to run on any JVM, *if available and exposed on the platform you're targeting*. iOS doesn't expose any way of doing so. There are hacky ways of trying to port code over, but they are not popular or reliable. Browsers in 2019 don't allow client-side Java. If you want to run something client-side, you need to use javascript or something which compiles to it. Anyway this requires significant investment of time and effort even if you want to use something similar to Vaadin. Android runs Java-ish stuff, but it doesn't expose bare JVM - much like iOS and browsers, it exposes a platform into which your application can be hooked up. You can't just run a desktop application on it. You can reuse much of the code (if it's performant enough), but you need lots of extra code to take care of other differences, like how you interact with the user or various events which happen over lifetime of your application.
Drop wizard.
Yeah it's not perfect, and there can be a lot of magic that some people don't like. Spring (especially with spring boot) is very popular, and allows you to do a lot with minimal boilerplate, allowing you to focus on the logic of the code, the downside of course is you have to know and understand the annotations used to make it all happen. That's why we have multiple frameworks though, people have different preferences and ideas on how to do things.
&gt;It seems strange that IntelliJ can't render properly Kotlin docs The linked screenshot seems to be from Eclipse.
I beg to differ. The documentation is top notch and explains how dependency injection works with a huge repository of example projects not to mention tons of tutorials by third parties. The reason many devs call it magic is because it just works without much fuss. But the deep dives are there if you need it.
Suspend methods return Object because the actual return type is a sum type of the declared return type (which may be nullable) and a named marker instance indicating suspension. There is no way to model this in bytecode or the Java language aside from Object without a heap-allocated wrapper (which is obviously infeasible). The method signature gains an extra parameter of type `Continuation` whose parameter type is the declared return type. The method will either return the result if available synchronously and the continuation will never be called, or it will return the suspend marker and the continuation will be called at a later time (never in the same stackframe). You can call these from Java if you want because this low-level API is fully documented. Or, more likely, you can wrap their invocation into something that's actually built for Java such as `CompletableFuture`, `ListenableFuture`, or RxJava. Not sure why you think this a relevant example since coroutines aren't meant to work for Java callers and OkHttp does not make use of them in it's API surface. And even when we plan to, it will either be sugar around `Call` (as is done nowadays), or the inverse.
It's open source. You are free to look at the code and see how the "magic" works. Or just read the docs.
This is extremely misinformed. You can run anything you want to on AWS. AWS Elastic Beanstalk JVM environments stopped supporting anything after Java 8 because they are pushing people to use Docker environments now instead of language-specific environments. That's the only Java 8 limitation I am aware of in AWS.
We actually have an application still on Spring Boot 1.5, and migrated to Java 11 at Boot version 1.5.17.RELEASE. No problems at all. 🙂
Let's take a step back, my point is the fact that bytecode is *not* a general, meta-definition language, so that all of them can interact happily. You even reckon this given your answer. This conversation stemmed from your suggestion to file a bug with Eclipse, given OP's issues of &gt;The tooltips show absolutely no API documentation anymore. And if the tooltip shows something, it's gibberish Put what we've said in that context please.
If you want to do something that there isn't a tutorial for, would that be easy? It's hard to go out of the box, it's opinionated right? Also I think plain DI is underrated, there's really no need for a framework to do it.
Yeah sure, but the spring codebase is gigantic. I prefer smaller things that are easier to dive into. And I'd like to avoid the magic in the first place, friendly APIs before magic. :)
Some corrections, browsers in 2019 can run Java applets via WebAssembly. http://teavm.org/ Regarding iOS, AOT compilation from Java into native code isn't hacky and there are a couple of products even. https://gluonhq.com/products/mobile/ https://www.codenameone.com/ https://github.com/MobiVM/robovm
Same can be said for any framework. No tutorial? Read the docs. I've yet to find better documentation for any framework (including the books the spawned the framework in the first place.
Do you think I should find a different language that would better suit my needs then?
Hmm yeah maybe so, I'm really comparing it to vertx which is more of a toolkit. I've come to prefer it over traditional frameworks. Also I've written my own framework that I use for all of my projects, so I'll hardly find anything else that I appreciate more.
Doesn't the call-back approach become too cumbersome to deal with?
I feel that sometimes adding a dependency may completely change the behavior of your application (e.g. adding the security starter dependency suddenly seems to make it such that all end points get routed to a form field asking for credentials). What's the best approach here to deal with these sorts dependencies that can exhibit this sort of effect?
No, I prefer it because it's easier, more fun and feels more logical - application flow isn't as linear as traditionally designed. If you're not used to it you could end up in "callback hell" but there's ways and designs to prevent that. I tried nodejs first and really liked it, but the ecosystem and language doesn't compare to Java.
You obviously wouldn't just sit down and read every line of code, but you can easily dig into the source for a specific annotation that you think is "magic" or something. Also the Spring framework is split into many modules, and I don't find the individual modules to be that gigantic or confusing. I find Spring to be very straight-forward and the Spring APIs to be very friendly. I really don't see much that I would consider "magic" in the Spring Framework, it's mostly just package scanning and applying things to objects via reflection. Things like annotations are part of the Java ecosystem and avoiding them because you see them as "magic" or unfriendly in some way is going to really limit your career.
Not necessarily. Writing code and using it everywhere is not as straightforward as you might think, in fact it is very very hard. Say you'd make a simple pong game, you've got all the logic done and you now want to draw to the screen. You write it for Windows, it probably uses DirectX or OpenGL and it works fine. Now you wanna put it on the web browser but DirectX and OpenGL are not a thing in webbrowsers. You'll have to make some sort of system that recognizes where your game is used and then reimplement a whole lot for every target. Don't even start about actually running your Java code in a web browser since those only understand Javascript.. This basically applies everywhere. Webbrowsers are a completely different domain from desktop applications and mobile applications. Even things like operating systems are completely different beasts. For your project I'd suggest something like Unity since that takes away most of the hard work. You'd be coding in C# which is the most similar language to Java.
If you go into your AWS console and ask to setup a new tomcat instance, the highest version is 8. I saw official version docs last month to that said the same thing but didn't find them again in a quick search. Whether it's secretly somewhere else I don't know, but it didn't show up there, or in a document via a google search or anything.
Makes sense. I misread this part of the [documentation](https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-5.x#upgrading-to-version-52) &gt; Please note that developing against JDK 11 is not officially supported with any older version of the core framework. Spring Framework 5.0.9+ and 4.3.19+ just support deploying Java 8 based applications to a JVM 11 runtime environment (using -target 1.8; see below), accepting JVM-level warnings on startup. Spring Boot 2.1 already uses Spring Framework 5.1
&gt; but there's ways and designs to prevent that. Do you have any reading material for this?
well there's none that meets all your requirements
If you can live with some magic and want excellent community support(since you have no or limited knowledge) you can never go wrong with Spring Boot. You can get starting very quickly and avoid all the boilerplate code and con-figs. I recently developed a web application for my last project with Spring boot. It was a breeze. My stack was : Spring Boot 2 + Spring JPA DATA (for presistence , also provided by Spring boot ) + plain HTML5 and CSS3 + Bootstrap 4 I will highly recommend spring boot.
It seems so. And from what I was just reading, it seems OpenID integration is still being developed.
Did you use server server-side or client-side rendering?
Looks like the oauth2 provider for vertx supports oid. Never tried it.
By "ask to setup a new tomcat instance" I assume you are referring to Elastic Beanstalk here, which is just one extremely small portion of the entire AWS set of services. You seem to be confusing this one service with the entire catalog of Amazon Web Services. And like I said in my previous comment, they want you to switch to deploying your Elastic Beanstalk application with Docker, with which you could deploy whatever version of Java and Tomcat you want. This frees Amazon from having to update the Elastic Beanstalk service every time a new version of Java, .NET, NodeJS, Ruby, Python, etc. is released, and frees you to use whatever you want. To your original point, the statement that "you might not even be able to host your app anywhere with java 11" is extremely misinformed. I'm personally running Java 11 apps on AWS on the EC2 service and the ECS service. Any host that allows you root/admin access to install software on your Linux or Windows VM is going to work for hosting a Java 11 app.
The metadata annotation just needs ignored and the example would be 100x better. Which is what the bug should be for.
I love Camel, it's very useful but it's better suited to EIP rather than web
Package scanning and reflection is magic. Annotations are awesome, as long as they're used for sane things and applied sparingly.
[LibGDX](https://libgdx.badlogicgames.com/index.html) is a Java game framework. It runs on Windows, Mac, Linux, Android and iOS. Browsers via GWT.
searching for callback hell will yield plenty of results, mostly for node but it's the same principle. In node there's callbacks and promises, in vertx there's Futures. "callbackhell.com" illustrates the problem and gives some pointers. Vertx.io documentation -&gt; core -&gt; Java manual should have some info on how Futures work.
Grails 4
The best, longest-running, non-framework I've used over the years is Jetty: [https://www.eclipse.org/jetty/](https://www.eclipse.org/jetty/) You embed a web server in your application, not the other way around. And it is extremely non-intrusive (unless frameworks) in that you can have whatever design you want and it'll work around you. Spring and friends are highly opinionated. You have to shape your design around them. Most people are okay with this trade-off. I am not.
I used client side rendering. Used simple ajax calls to retrieve data and generated the view using jquery as I don't have much experience with Angular or React.
&gt;ecurity starter dependency suddenly seems to make it such that all end points get routed to a form field asking for credentials). Read the docs and understand how the autoconfigurations work, simple as that.
[Armeria](https://github.com/line/armeria)? tested under Java 11. It supports Circuit breaker, gRPC, thrift, http2, Reactive Streaming, client side load balancing, spring integration.
In a way that's correct. Java is a conservative language that relies on more adventurous research languages to try things out. Java then copies those features that have proven most worthwhile. Enriching the type system (I wouldn't call it "improving") has not convincingly enough been shown to be very worthwhile.
The issue with Spring's documentation is that there's reference + javadoc, some small-scale mostly useless examples, and nothing in between. I wouldn't call it good, especially not when compared to what kinds of documentation you can find in the wild.
I am dealing with this in my current team. I am the first "Senior" in the team (I have been doing Server/Backend dev for almost 10yrs ... some tell me I am senior). The backend was built by another team in RoR and then they decided to break it down in Java Microservices (it was actually a good strategy for this use case IMO, so no bashing that for once). The problem is that they handed it off to a team of fresh guys and a few juniors (nobody with significant Backend experience, just general good coders, they just "know Java"). I am having a hard time to make them understand: "Stop coding, google it and read the docs". A framework gives you all the things that are useful but not pertinent to your "business logic" (I don't like that term but ... you know, people seems to relate to it). Use it. Stop wasting time on DB, HTTP, caching, auth, ..., Those are general "solved" problems. You just have to respect and know some conventions. And arguably this is not the kind of thing they teach you in Programming 101.
and hot reload (of Jooby) is a life saver. To OP, you can never go wrong with Spring if you can stand all the magics going on. But Jooby or Javalin can work well too.
Spring boot may be in version 2.0 but Spring framework (which is what spring boot helps you setup easily) is quite mature. Probably the most mature Java framework. And the Spring community is amazing. I'd recommend that you take a look at [https://www.jhipster.tech/](https://www.jhipster.tech/). It lets you setup a Spring based app quickly and with the most common best practices. You'll need to dig into the documentation of spring boot, spring framework and jhipster quite a bit initially but once you get a hang of it, this stack can give you a solid battle-tested tech stack. Also, in case you end up turning your side project into a business, it is very easy to find and hire devs for this stack because of its popularity.
Nice Work!
Thanks!
Thats hell of a lot for a 12 yo
Lol thanks It was quite the challenge mostly because I’m still learning OpenGL
Nice! As a side note, I'd like to explore Java apart from my main job. Are there any good books/guides for someone who is familiar with web development (Spring) but not 3d?
Wait you’re 12? What in the world, you’re miles ahead of where I was at that age. Keep it up!
Try [Play Framework](https://www.playframework.com/). Linkedin is using it.
Thank you so much!
Sure. Look up Thenewboston on YouTube. He has INCREDIBLE free tutorials on java. Advanced + Beginner. If you are looking for 3D game tutorials look up ThinMatrix on YouTube. Look at his OpenGL java tutorials. He teaches you how to make a fully playable 3D game. Hope this helped.
Wow! Amazing
Thanks :)
Most of the features in the presentation are quite nice but the features meant to solve `switch(shape)` sound like an anti-pattern to me. If you want to initiate a behavior depending on the kind of shape you have, the behavior should sit on the Shape (not outside it). If you want this method hidden from end-users, use [SharedSecret](https://stackoverflow.com/q/46722452/14731). Further, why add the concept of field deconstruction? Users can do: \`\`\` if (foo instanceof Bar bar) { bar.field1 bar.field2 } \`\`\` &amp;#x200B; instead of: \`\`\` if (foo instanceof Bar bar(var field1, var field2)) { } \`\`\` The former seems a lot more readable to me and scales better for classes with many fields. And let's not forget the benefit of avoid adding an unnecessary feature. Again, most of what he proposes is fine but the latter two are questionable.
Yes it does. Luckily Vert.x integrates very nicely with RxJs [https://vertx.io/docs/vertx-rx/java2/](https://vertx.io/docs/vertx-rx/java2/) and if you're using Kotlin with Coroutines [https://vertx.io/docs/vertx-lang-kotlin-coroutines/kotlin/](https://vertx.io/docs/vertx-lang-kotlin-coroutines/kotlin/)
I would just go with Spring Boot, it comes with all the bells and whistles
Why? Why re-invent the wheel instead of building on top the existing platform?
because he wanted to challenge and educate himself.
Because it’s a great opportunity to learn. As a software dev, there’s nothing better imo than building something from scratch.
Java Applets... now there’s a name I’ve not heard in a long, long time....
Meanwhile im 26, getting my degree in computer science and still dont know a language well enough to do something like this. Im learning slowly but it infuriates me that my mother's nazi-like stance on not using computers growing up left me unable to gain this level of experience before tirning 18 (im still not this experienced). Im proud of you, keep up the good work!
Thank you so much! Congrats on getting ur degree.
Exactly
Perfectly worded
Haha, oh man, thank you but i have 3 years left ×.×
Haha, oh man, thank you but i have 3 years left ×.×
Oh, my bad when you said that you were getting your degree I thought like you already technically got it. Sorry bro. Lol
Excellent work. Even more incredible that you’re 12 years old. I am a software dev, and you are way ahead of where I was at your age.
Thank you :)
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thanks! Didn't know about ThinMatrix, definitely will check him out.
No problem.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Seriously amazing work! I did something similar many years ago..... as a college student(I work as a programmer). You’re miles ahead here! In six years if you’re not starting a company you could probably skip a degree, get a scholarship or get a big company to cover the costs. Keep it up!
Thanks, I hope I will.
Such questions belong in /r/learnjava or in /r/javahelp as is clearly stated in the sidebar. **Removed**
That's how security starter works, it protects all of your endpoints if you not specify any to protect
You're incredible. The product alone is amazing but the skill you are demonstrating with your code even then simple things like using packages correctly, Getters and setters, following code etiquette. At 12 you are already showing more skill than would be expected from a 24 year entry level programmer making 80k/yr If programming is something you want to do with your life you are well well ahead of where you need to be!
I started my spring studies bu reading the reference documentation. It is surprisingly well written and tutorial like styled.
I encourage you to read [Classes vs. Data Structures](https://blog.cleancoder.com/uncle-bob/2019/06/16/ObjectsAndDataStructures.html) by Uncle Bob. Java will have both ways, you can either do via Data Structures (aka records, sealed types and pattern matching) or go via inheritance root. All in all: &gt;Adding new functions to a set of classes is hard, you have to change each class. Adding new functions to a set of data structures is easy, you just add the function, nothing else changes. Adding new types to a set of classes is easy, you just add the new class. Adding new types to a set of data structures is hard, you have to change each function.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You’re way ahead of me right now
80k a year lol? If he keeps this on he will be 240k a year
In the last couple of mins if the talk Ron says “we want to release an early access download that you can use without compiling a jdk”
I'd not recommend thenewboston because he teaches bad practices. I'd highly recommend these: https://moocfi.github.io/courses/2013/programming-part-1/ and https://introcs.cs.princeton.edu/java/home/.
Can you please post your project on github? I work on android for a living but never got into desktop programming with java. Your project can be a great starting point for me!
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Oh for sure but I'm talking entry level
What is difference between "record" and "inline class"?
Yes, entry level, I mean nowadays college freshman with a decent CRUD project (deploys on Digital Ocean or what not) and grinding Leetcode already gets 120k, so imagine this kid
This video made me wanna play Minecraft again
Records are more or less what you might think of as data classes. Inline classes are classes that lack identity and are a bit more like primitive types like int. One reason for inline classes is to improve memory usage and layout. It is entirely possible to both be inline and a record.
A transcript would be helpful.
You sure you are not mixing up something? http://iteratrlearning.com/java/generics/2016/05/12/intersection-types-java-generics.html
Is the source code up somewhere?
Probably at the 0.01% of 12 year old with this skill. Very good work, I hope you become an engine creator one day, and remember to work on open apis, not Cuda. Link me you github, and if you don't have one make one! You will love it!
NO, Mr Robot, you are wrong
I aspire to be good enough to do something like this on my own. The fact that you're 12 and you made this is mindblowing. Keep it up!
where you guys based? The average salary for a Senior Java Developer in Germany is €60,825. :-/
And is a sensible default.
certainly the best Language manager
Oh, wow. Did not know this. Thanks
Even if you have one, it still cannot handle checked exceptions or nonstandard control flow. I frequently encountered situations when I wrote a piece of code using ifPresent, realised I need to handle the checked exception or break the loop or return early from the method, so I had to rewrite the fragment using isPresent and get. At least IntelliJ warns about gets without isPresent.
How does a seemingly primitive voxel sandbox === Minecraft Clone?
**Sidebar** &gt; **Do not post tutorials here!** These should go in /r/learnjava. Also, the post is *way* too basic to be suitable. **Removed**
I don't get his point, so please help me understand. My understanding is that in both cases you'd have to consider all types and you are less likely to end up with out-of-date switches if you get a compiler error for a missing implementation. But again, even in the data-oriented approach it is wrong to say you can add a new type and the function doesn't change. It might or it might not. You have to think about it. In the OO case you could model the same by providing a default implementation in a superclass and only overriding it in a subclass if the implementation needs to differ.
Another solution: Stop using lombok and write the code. If equals, hashcode and toString are important methods in a given class I much rather see it than have it be generated.
i thought javafx died years ago?? i'd just use electron for most use cases, and native api's for the rest.
Here I was all excited about my new degree...
He's talking about the US. That's like the only place that pays so well, maybe besides Switzerland.
If having all fields included in equals() and hashCode() is a problem, just could also use @EqualsAndHashCode(onlyExplicitlyIncluded = true) and mark the included fields with @EqualsAndHashCode.Include
Honestly, your mom wasn't wrong. I had a computer growing up and just became addicted to games. I'm a sophomore in college studying compsci at 29 and I'm doing great. The reality is that if you have a better work ethic than others, you will be totally fine. I'm easily the top of my class and I'm probably dead average intelligence. PM me if you want to know how I've managed to deal with my late start (don't want to doxx myself for no reason).
I mean it wasnt like i didnt play a hell of a lot of ps2 growing up lol, i was playing just as many console games as the next kid but viruses and programming intrigued me as a kid. I was learning about and removing viruses and stuff like that in secret in the rare moments my parents were gone and i could use the pc without being caught lol. And i have the drive. I am working on 3 different coding projects in 3 different languages (i do learn quickly at least) i just also have college, two jobs, a wife and a 4 year old, as well as freelance design/code work i do on the side. If there were 48 hours in a day i would get so much more done lol, but Im doing the grind, and i love it, i just cant wait to see the rewards!
I was just saying the same thing to my wife this morning, about how if I only had about 6 more hours in a day, I'd be able to get everything done that I want to do. It sounds like you are doing really well then. Right on. Late starters rise up!
/r/javahelp
Short answer: yes.
I have 3 years work experience on java and I am still shit at it, I love programming but won't progress due to my lazy ass. You will be an expert by the time you reach my age. Hats off OP.
Wow thats incredible /u/ASinglePlant , could you maybe explain how you learnt Java at such young age and how much time you already invested into learning Java/OpenGL? Keep up the good work!
There is no magic in Spring Boot, just a bunch of applied programming patterns.
Laugh in 28k ;(
But, but, but...Netbeans is dead...no one uses it! /s (from someone that uses it daily and loves it!) Hopefully now that most of the old stuff has been brought over (including Java EE, something else "no one" uses) and they're spooling up for quarterly releases the period of transition stagnation is over and we can get back to great improvements!
What about coretto? I've had good luck with that
Why would you choose NetBeans of all things over something like IntelliJ?
Procedural Terrain generator + daynight cycles + blocks + Minecraft textures + mobs + java
Good god you’re amazing dude. How and where did you even learn all this?? Teach me your ways 😂
Tooling often comes down to preference and experience. I personally am a IntelliJ user but I know plenty of Java devs who still prefer and use Eclipse. They are productive with it and know how to make it work for them.
Because I like it. It works great for my work which is primarily Java desktop apps, Java EE and some Dropwizard thrown in. Maven integration is great. "Batteries Included", multiple projects open at once. I maintain a few Netbeans RCP apps as well.
Good job! Copying existing game ideas is a perfect way to learn Some recommended reads I had saved as bookmarks if you want to dig even deeper into game programming: [Game programming patterns](http://gameprogrammingpatterns.com/) Goes deep into all the different patterns of writing a good game engine. Written by one of the devs at EA. There is a free web-version if you scroll down on first page. [Game mechanic explorer](https://gamemechanicexplorer.com) Lots of small snippets and explanations on common mechanics, like bullet trajectories etc. Only for 2d games but much easier to digest then the patterns-site. [A* introduction](https://www.redblobgames.com/pathfinding/a-star/introduction.html) A* is a fun algorithm to implement [Clean code book](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) This one is a must, a book you might get the most out of when working with other people but if you wanna get thinking in the terms of maintainable code and what will be expected of you at a real workplace, take the advices it gives to heart :) And a tip for a potential next project: One of the first games I did was a clone of Bomberman. The graphics can be pretty simple but you get to dig into cool stuff like (simple) AI with pathfinding and you can make a very simple multiplayer game out of it that isn't that lag sensitive
it's free.. and I got stuck with their Swing Designer for old apps, and I like how you can add custom controls into the palette.
How am I trolling? I asked why you’re using a tool that is far less worked on. At the very least, NetBeans doesn’t have the financial backing that IntelliJ does, so I was wondering if there were some niches or features it had to give it an edge. Is the Maven integration something more than the industry standard? And can you have multiple projects open in one window, or is it the standard multiple window approach?
Off the top of my head? One's a paid product (at least if you want JavaEE) and one isn't.
You seem to have a complete misconception about websites, desktop, and mobile apps. If you compile a *desktop app* it should run on any desktop app provided that the JVM has the required native libraries (applies mainly to graphics libraries). *Mobile apps* are unlikely to support the full Java ecosystem. Android is close but still not native Java, iOS doesn't natively support Java (yet - there are talks about it, though). A *server* application for a website is a completely different beast. It runs on its dedicated server (Tomcat, Glassfish, etc) and the clients connect via browser. So, in short, no. The three need separate programs (actually, some parts are different, not everything).
I’m on RHEL5 and the Eclipse IDE 4.6 is the latest version compatible with it. I tried to use this year Eclipse release and it fails because SWT requires a newer version of glib. With Netbeans, I can get the latest version and it would work fine since the whole thing is Swing.
&gt;They even throw exceptions **when you provide null as argument for the contains()/indexOf() methods (!!!)**: I'm not sure why this is surprising considering that is what these methods are documented to do.
No no, you have it reversed: Don't use `@Entity`!
Tell that to the JDK architects / devs. They are going to do just that in project Valhalla.
I'm a bit torn on this... I like NetBeans interface better in some ways, I don't really like the 1 window per project thing Intelli J does. Multiple projects in a window is preferable to me. But IntelliJ seems to have better code inspection tools, and comes with the EE stuff out of the box. I also like that it's one IDE that does EVERYTHING, so I can have projects in multiple languages open in the same IDE instead of launching additional (Jetbrains) IDEs to do other things. That said, I switched to IntelliJ and I like it better in some ways. So I'm sticking to it. But I sometimes miss Netbeans.
My college somehow still hasn’t expired email addresses, after 5 years. I’ve honestly forgotten what the differences are in ultimate and free to use version of IntelliJ.
Multiple projects, one main window.
&gt;(...) and this list does not permit null elements Because 99.9% List implementations out there permit nulls. For example, ArrayList, LinkedList, COWList.
Yep. Sounds a wee bit harsh but this is the correct answer.
Assertj really is all it's cracked up to be. There's a little bit of a learning curve but once you're up on it, Assertj makes it really easy to do a lot of testing with no a whole shitload of code.
I got a java job without knowing the first thing about java. In hindsight, I really shoulda thought more about jumping ship because it took me longer than I'd like to admit to learn how to do all the things I knew how to do from the dotnet side of things.
August of what year? EVERY YEAR!!
As many of the architects have said, inline classes will “code like a class and work like an `int`”.
I've recently been playing around with django some and I do mostly spring for my 9-5 and I can see why people use django, it's something with a ton of horsepower under the hood right from out of the gate.
I agree that Netbeans looks aged, it's development seems stagnated, but it can easily pull of things that are difficult with IntelliJ. For example, we have a handful of inter-related maven projects. It is possible to open all these projects at the same time and perform code refactoring across all of them. Then autocompletion is sometimes smarter and works better with my workflow. In addition, autocompletion feels faster when there are too many dependencies (few hundred jar files). Then the handling of maven projects is very user friendly. For example, to open an existing maven project with Netbeans you just select the project directory and you're all set. No bullshit with closing the currently open project and stupid project import wizards.
Indeed, this link has already been posted, and I already criticized the terrible code used as demonstration. \`@Override **public** **int** **hashCode()** **{** **return** 31**;** **}}**\` Seriously ? Just use what wokeprogrammer above said, it works wonders with Hibernate.
NOOOOOO!!!!
But then you already had some experience. Was it a junior position?
Thank you so much!
Lol
Sure thing! I will post it soon so I will DM you it.
Lol
I will DM you it
Problem is, if it's not generated then it has to be written _and maintained_. It's easy to forget updating `equals` and `hashcode` when adding new fields to a class and it's often hard to detect, giving strange bugs.
Alright! I shall make a github. I will dm you it
Thank you!
Thank you!
Sure. First off, search up ThinMatrix on YouTube and watch his OpenGL Game series. He teaches you how to make a fully playable Java game engine. Even teaches OBJ file support.
What do you suggest? (I'm all for r2dbc, btw)
Lol. Look up ThinMatrix on YouTube and watch his OpenGL series for java. It’s amazing! He teaches you how to make a fully playable java game engine.
Wow thank you so much! I will really look into this.
One of the reasons I take classes part time is to maintain student status for things like this. Employer pays for licenses on work hardware, but I still use student licenses at home.
Given that every IDE I've ever used can support multiple projects in on window instance, I wouldn't call multiple windows "standard". IntelliJ fails horribly here.
Netbeans has a great built-in profiler, which IDEA does not.
Yea me too.
&gt; being tested, not the test harness itself Sure, but in order to step into my code I have to step through the 'asserThat' code. The more direct the calls to my code are, the easier it is for me to step into my own code. And sure, you can try and put breakpoints into your own broken code, if you know exactly where that breakpoint shoyld be. But the point of 'debugging' is exactly that I may not know what is broken (or else I wouldn't have made that bug in the first place). So finding the right place to put the breakpoint isn't allways as easy as it sounds.
It was.
&gt; How am I trolling? Well... the "*of all things*" descriptor was a bit unnecessary. But yes, it is a little ridiculous that you're being downvoted for asking about a preference. Look. Software development, like most things is modern life, is pretty tribal. We sometimes see our consumer choices as being our "identity". We sometimes feel "attacked" if someone makes a different consumer choice, or criticizes the thing that we chose. We sometimes deliberately go with a minority-view consumer choice, to feel more unique or set apart from the crowd. Etc. A LOT of people moved from Java EE to Spring about 10 or so years ago. And a LOT of people started moving from Eclipse or Netbeans to IntelliJ about 5 years or so. Some people *didn't* move. And they sometimes felt attacked by all of the praise for the new things, and criticisms of the previous things. A lot of newer people flocked straight to the previous things, to feel more unique or set apart from the mainstream crowd. End result: (1) much if not most of the contemporary ecosystem has moved to Spring and IntelliJ, but (2) there's a vocal contingent who **really** hates the superior attitude. So Reddit voting tends to swing all over the place.
&gt; And wiring them this way allows all the assertions inside that assertAll Okay I guess that could be useful. On the other hand, personally, I probably be more interested in looking at just the first point of failure in my test case, the rest is more often than not just a bunch of extra noise and realistically, I can only debug one problem at a time. So all in all, I'd just rather write 5 asserts in a row than make things more complicated just to get more confusing clutter in the failed test results.
And how exacltly does assertThat help with that problem? First thing I try to do when test fails in CI is try to run the test locally to try and reproduce and debug. If you can't reproduce the failure locally, indeed that is tough. But I don't see what that has todo with 'assertThat' versus a more straightforward assert.
That's a little closer, at least in concept, but somehow I doubt it has biomes, redstone circuits, minecarts, block updates glitches, etc. Just because it has similar features doesn't make it Minecraft. And, at the end of the day, it's a lot less impressive to just copy somebody else's blueprint and take advantages of years of careful analysis and dissection of game than it is to make your own thing. I mean I can see the educational utility, but why not just make something that's your own.
Reminds me of https://en.wikipedia.org/wiki/Visual_J%2B%2B Dark times...
**Visual J++** Visual J++ (pronounced "Jay Plus Plus") is Microsoft's discontinued implementation of Java. Syntax, keywords, and grammatical conventions were the same as Java's. Microsoft discontinued support of J++ in January 2004, replacing it to a certain extent with J# and C#. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
having it done in the JDK is a totally different thing. For starters they dont use annotations (record is a known token in the language). Also its "native" to the language spec as opposed to lombok which uses internal APIs and for which there is no guarantee from on whether it will or will not break between JFK versions.
No, allowing nulls was a bad idea, and any implementation that's part of the JDK since around Java 5 has not allowed nulls to be inserted. In particular the `Concurrent*` collections do not allow `null` to be inserted. In particular, it's a bad idea because you can't tell if a `Map` doesn't have an entry or has an entry that's `null`.
Are you arguing against having hashcode return a constant for JPA entities? We use Lombok for many things, but have been switching to this patter for `equals` ^(and) `hashCode`. [https://vladmihalcea.com/how-to-implement-equals-and-hashcode-using-the-jpa-entity-identifier/](https://vladmihalcea.com/how-to-implement-equals-and-hashcode-using-the-jpa-entity-identifier/) Do you disagree?
&gt; In particular, it's a bad idea because you can't tell if a Map doesn't have an entry or has an entry that's null. But that's not because a map allows null to be inserted. It's because what .get returns when there's no value is null.
Yeah, I’m an intellij fan but multi-project handling in the same window is a mess. I stopped doing it at all in Pycharm, because it would screw things up all the time.
He’s 12. Plus, it doesn’t seem like the goal is to make something to sell on Steam or anything. And it doesn’t look like he took any advantage of “years of careful analysis and dissection” of Minecraft—they’re implemented in the same language but otherwise don’t look to be too similar architecturally. Copying other people’s work is how nearly every good artist has learned for millennia. Games are no different.
Not aware of anything on the Microsoft Store for this. What "server" are you trying to create? (Minecraft?) What JDK is needed? Or do you only need the JRE? You can download Java from: * Oracle * Amazon * Azul * Red Hat * IBM * SAP * probably some others. Links: Oracle: https://www.oracle.com/technetwork/java/javase/downloads/index.html (note license restrictions for non-personal use) OpenJDK (various providers): https://adoptopenjdk.net/ Azul OpenJDK: https://www.azul.com/downloads/zulu-community/ Amazon Corretto: https://aws.amazon.com/corretto/ Red Hat: https://developers.redhat.com/products/openjdk/download You probably don't care about IBM or SAP, and I don't know where to download them (I think IBM is on AdoptOpenJDK).
The JDK is not available through the Microsoft store. Download it from Oracle's website. Just google "download jdk" and get a 64-bit exe. What server are you talking about? Minecraft?
Download a Windows binary of the JDK for an appropriate Java version directly from Oracle. https://www.oracle.com/technetwork/java/javase/downloads/index.html
Only IDE where JavaFX really works , only IDE that compiles with Oracle JDK
Yup Minecraft! I'm downloading through Oracle from this link: [https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) &amp;#x200B; I was guiding her through the process as I had done it on my laptop already, but when she clicked on the download, a popup saying she needed an app to run the JDK showed up.
Yup Minecraft! I'm downloading through Oracle from this link: [https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) &amp;#x200B; I was guiding her through the process as I had done it on my laptop already, but when she clicked on the download, a popup saying she needed an app to run the JDK showed up.
I like how snappy Netbeans is, but its editor font is very pixelated on Linux. Does anyone know how to have smooth fonts for Netbeans on Linux?
I think it is because: &amp;#x200B; .Intellij refuses to offer a lifetime license. .Netbeans is Open Source and free.
Thanks dude!
Huh. I’ve never had any reason to use any full IDEs outside of the JetBrains suite (though I’ve of course used the beefy text editors like Atom, VScode, Np++), never realized that wasn’t the standard. That’s never really been an issue for me, but interesting to know that’s the exception, rather than the rule. Thanks!
You are awesome! Keep up the good work ;)
I don't have that issue on Debian Buster, can you try running NetBeans on a recent Java release? You can just edit `netbeans/etc/netbeans.conf`, uncomment the `netbeans_jdkhome="/path/to/jdk"` property line and point it at the JDK directory. Java 12 works fine for me, I think there were font rendering issues on earlier Java versions, the one from your package manager might be too old.
It was more that I’ve always heard of NetBeans in a negative connotation. That Eclipse was a long time dev favorite, but NetBeans was always “just there”. I’ve never personally heard of anyone using it. Hence why I asked.
Thanks :)
Np
Is there even a reason to be using Oracle rather than Open these days?
Spot on with the "one window per project" "feature" that Intellij has. Probably the one major reason I could not adopt Intellij, even though it is a great product in many respects.
Thanks! Version of the JDK may be the problem. I am on Ubuntu 18.04. I tried running Netbeans with JDK 8 and 11 but I'll give it a shot with JDK 12 later.
Huh, that shouldn't happen - Windows should definitely be able to open an EXE file if that's what was downloaded. (I'm now imagining Oracle distributing the JDK as a JAR file just to be an asshole, lmao) Are you sure she selected the installation EXE file, and not something else (perhaps she selected the Minecraft server JAR file instead, which would cause that error since no JDK is available to open it). Also you might have to open the JDK installer as administrator (right click in file explorer, select Run as Administrator) so it has the requisite permissions to install the JDK. If that doesn't work, maybe try the good old restart. Best wishes!
The new launcher is looking pretty sweet!
...he had 5 days dude. Notch did not make production level Minecraft in 5 days. If this kid wanted to he could probably make the minecarts and the crafting and all that other nonsense but honestly why. He did what he set out to do which was make a really cool Minecraft inspired alpha using opengl in Java in 5 days and demonstrate his mastery of java along the way.
I used https://testbanks.wiley.com/WPDACE/Login. You can get access if you have the Oracle OCA study guide book. You can google for the pdf version pretty easily. The access is explained in the introduction under "free online learning environment". The questions on it are way harder than on the exam so dont panic
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yes, hashcode should never return a constant. It "works", but breaks many algorithms behind (HashMap, HashSet, ...), leading to a massive loss of performance. The pattern presented on your link seems okay. I wouldn't use the NaturalId myself, but it should work just fine.
and in Amber with Records (aka Data Classes)
Yes, hashcode should never return a constant. It "works", but breaks many algorithms optimizations behind (HashMap, HashSet, ...), leading to a massive loss of performance. Your link basically says "It is better to use the NaturalId instead of the PrimaryKey", okay, but this is a bad idea since it breaks your ORM's internal cache. Then they offer a "patch solution", which is a very bad idea really, to bypass the issue. Just don't do it, use the PrimaryKey in your EqualsAndHascode for Entities.
It's not that new...
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'm not sure what do you mean by install a program, you can download zip/tar version of openjdk from adoptopenjdk.net and it will work standalone without need of admin privilege. Download Eclipse/Netbeans/Idea for IDE. Note: Download zip version of Idea it doesn't require installation.
This. The Maven support in Eclipse is (was? It’s been a couple of years) absolutely abysmal. And the window-to-project ratio of IntelliJ is too damn high :-)
I use both, but I somewhat prefer NetBeans. I think it's more intuitive and easy to use.
JOOQ
&gt;If you want to run different behavior depending on the kind of shape you have, the behavior should sit on the Shape (not outside it) What if the behavior depends on classes that don't belong in the `Shape` hierarchy? Say the shapes are in the "model" module but the rendering happens inside the "ui" module. Passing say a `GraphicsContext` to each shape would lead to a cyclic dependency between "model" and "ui". I think it's not too uncommon that you want the behavior outside of the class, e.g. entities generally don't persist themselves, objects don't turn themselves into JSON etc..
Ehh, intellij for a couple of releases already bundles async-profiler with a flamegraph viewer, which is better than the profiler in netbeans.
I wished for JEP 330: Launch Single-File Source-Code Programs in December and now it's in! [https://issues.apache.org/jira/browse/NETBEANS-1783](https://issues.apache.org/jira/browse/NETBEANS-1783). Can't wait to try it out. Thanks to everyone who worked on this. [https://github.com/apache/netbeans/pull/1171](https://github.com/apache/netbeans/pull/1171).
Windows is not supported yet. I'll reserve my judgement once I try it for myself, on windows.
For starters IntelliJ refuses to support mixed mode debugging (Java / C++). Then there is Matisse and Web designers, using Maven or Gradle as project files, not running the indexing engine all the time and having sane shortcuts that don't require both hands.
Actually mine does have biomes .
OpenJDK is mainly developed by Oracle anyway.
Thanks :) Perfectly Worded
Absolutely.
[https://www.dropbox.com/sh/wm6s7skib16rmh8/AAC8KneJE035HOsYL8p7YedEa?dl=0](https://www.dropbox.com/sh/wm6s7skib16rmh8/AAC8KneJE035HOsYL8p7YedEa?dl=0)
Those are two different cases. General serializers follow rules that work across all object types so I wouldn't expect any sort of class-specific-switch statement. In the model-ui case, I'd expect one or more UI classes per model type they are rendering. You'd still have one UI class per model type and use polymorphism to make sure you cover all cases. I wouldn't expect to see a single UI class with a switch statement covering all model types.
[https://www.dropbox.com/sh/wm6s7skib16rmh8/AAC8KneJE035HOsYL8p7YedEa?dl=0](https://www.dropbox.com/sh/wm6s7skib16rmh8/AAC8KneJE035HOsYL8p7YedEa?dl=0)
Yep and if you get `null` you have to then check with `containsKey()`, which may not be thread-safe. `getOrDefault()` and any of the new `compute*` methods are useless in the presen6of `null`.
If i remember correctly, default antialias settings are a bit broken on linux(at least with openjdk 11 and 12) so may need to force it, e.g. add `-J-Dawt.useSystemAAFontSettings=on` to netbeans.conf
You could have a look at AWS Cloud 9.
Once had to force AA when using a plain windowmanager (probably i3wm) instead of a full desktop; maybe try if this helps: export _JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true" netbeans
&gt;Those are two different cases. General serializers follow rules that work across all object types so I wouldn't expect any sort of class-specific-switch statement. True, bad example on my part. &gt; I wouldn't expect to see a single UI class with a switch statement covering all model types. Yeah, full blown rendering usually requires additional state and the "ui" objects would likely stay around longer, so duplicating the hierarchy is probably the better approach. But if the "rendering" logic is just acting on the data inside the model classes, maybe just putting them into a custom file format, the switch seems like the better solution. If the model classes are `sealed`, adding a new class will lead to a compiler error pointing to the place where logic is missing. That's better than duplicating the hierarchy and having every colleague remember to introduce two classes, no?
FYI dropbox links can be removed if there are too many downloads. Github is a better choice if you want other people to be able to follow your work!
*just to clear this up...* IntelliJ has a lifetime license (fallback license) - you just pay for the updates and support for developing it, if you want them. It's also Open Source. There is also a free version .
Did you read the justification for doing so?
Did you read the justification for it? &gt; The entity identifier can be used for equals and hashCode, but only if the hashCodereturns the same value all the time. This might sound like a terrible thing to do since it defeats the purpose of using multiple buckets in a HashSet or HashMap. &gt; However, for performance reasons, you should always limit the number of entities that are stored in a collection. You should never fetch thousands of entities in a @OneToMany Set because the performance penalty on the database side is multiple orders of magnitude higher than using a single hashed bucket.
She must have downloaded the wrong file then.
The article does suggest the opposite for `toString()` iirc.
I tried github however it kept processing for many hours so I just canceled it.
Yes, good choice, r2dbc is similar to jooq, slightly more modern (experimental).
I'm *incredibly* new to coding and bought a lot of books to help. The IDE recommended in most of them is Netbeans and, well.. installation today has been a pain. Since some of you seem veterans to this, care to spare a moment to help me? So, all YouTube videos that help are for older products of Netbeans (obviously since it just came out today). After downloading the zip and extracting files and saving it to my c drive.. all the videos say double click "netbeans," double click "ide," double click "bin" .. and from there, they have a launcher available. I, instead, have a folder called nativeexecution. I thought .. huh .. no big deal. Clicked that and it has a list of all the operating systems that it works for (mac, linux, windows). I click "Windows-x86_64" thinking maybe that's what I need to do.. but it's a dead end of files that aren't helpful. I thought the one that says "process_start" would be, but it asks what app I'd like to open the file with and I'm like .. idk. I'm new and I'm just hoping to get past this snag. Thanks for any help you all can give.
Funny that a man who praises high-performance also gives such terrible advice. They actually speak about it in Hibernate's documentation, but as a way to avoid errors when persisting entities which have already been stored in a Map or Set. It's basically a simple way to avoid programming mistakes. Just learn to use your collections correctly and it will be even faster.
Considering Oracle’s path of greed? I’m not going to be on that lasting.
As far as I’m concerned, web designers are bad practice anyways, I don’t understand your issue with Maven or Gradle, as I’ve never had a slight issue, it’s indexing engine absolutely does run all the time, and why shouldn’t shortcuts use both hands? You have two on the keyboard anyhow. Seems like a silly issue, especially with how easy it is to rebind, or choose another scheme entirely.
Maybe an inbrowser ssh terminal to your own machine?
actually.. I fixed it. You know the whole "turn it off and turn it on again" thing? I deleted all my files, redownloaded the zip, unzipped the zip, and everything is fine. I've downloaded the newest java correctly according to my command prompt So.. Now I don't know how to get started using Netbeans. Do I need to download/activate any plugins? Where do I begin with it? Thanks.....
I'm really happy NetBeans keeps on improving!
Such a good article
We use javalin at my work (mega huge financial company). Very productive and easy.
You can have as many projects as you wish in a single IntelliJ window. E.g. create a "Empty project" in IntelliJ and add all your Maven/Gradle projects to the Intellij project as "Modules". In IntelliJ project does not mean the same as in Eclipse.
I've used the big 3 (Eclipse, Netbeans, IntelliJ) on a daily basis for years. One beautiful feature that Netbeans has is a visual choice of what function to step into when there are multiple on a line. In Eclipse or IntelliJ, every time I have to step into a constructor, then out, then into a getter, then out, then finally into the function I want... Why haven't they caught up to the way Netbeans has done for years?? It highlights each possible function to step-in, emphasizing the default one it will use if you press step-in one more time, but lets you click any other, in such a perfectly simple visual way. I've also found Netbeans is faster than Eclipse, and WAY faster than IntelliJ, in updating pom.xml file changes, and catching and highlighting all compilation errors in real-time, without compiling. If someone knows how to tell IntelliJ to continually find and flag files with complication errors in the project view, please tell me. I always have to do a full compile to know if anything is broken. Eclipse and IntelliJ have more powerful features if you need them. But if you're not doing anything crazy, Netbeans is just as capable as the others, but less cluttered. The developers did an amazing job of making Netbeans simply Just Work™.
will using loom be similar to using quasar?
Cool! I miss Netbeans.
IntelliJ has great support for Gradle Composite Builds. A composite build is almost solely a IDE config project. You can have as many projects as you want in a single IntelliJ window with a composite build, this includes cross project refactorings. IntelliJ configures itself from the gradle composite build. If you don’t want to use gradle you can add each project as a module.
IntelliJ has smart step into: https://www.jetbrains.com/help/idea/choosing-a-method-to-step-into.html
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
**Sidebar**: &gt; **NO installing Java questions** **Removed**
**Sidebar** &gt; NO programming help, NO learning Java related questions, NO installing Java questions **Removed**
**Sidebar** &gt; NO programming help, NO learning Java related questions, NO installing Java questions **Removed**
man i can't wait for these things to land. i've seen a few versions of this talk so not exactly news (other than "inline" which i don't recall), but at least things seem to be progressing.
&gt;other than "inline" which i don't recall Earlier it was called **value class**, they renamed it recently.
If you are new to programming, you don't need any plugins. If your books recommend netbeans then follow them. You can also open, run and study a few examples the netbeans brings with it. But if you are new you won't understand much of the code. Actually I'd say you don't need any IDE to start, but it's best to follow your books/tutorials and if the explain it by using netbeans, you should use that.
Both the Hibernate documentation and Vlad's article say the same thing: an equals/hashCode based on a natural id is best, but where a natural id is not available, hashCode should return a static value. Because Vlad wrote that documentation.
If it wasn't for Oracle you would be either enjoying Java 6 now or considering migration to other programming languages, given how much the "community" contributes to OpenJDK and JEPs, and the lack of interest in buying Sun (only IBM did an initial offer that they removed afterwards). And something like GraalVM would never have happened, because if no one was willing to buy Sun, they would even less keep wasting money on the MaximeVM from Sun Research Labs.
&gt; Maybe it's just not for me, there's so much magic. There's no magic, you're just too lazy to read the documentation.
You probably already know this but unless you’re paying for Extended Lifecycle Support, [RHEL 5 was EOL’d in 2017](https://access.redhat.com/support/policy/updates/errata). So if you have mission critical stuff running on it, you should really think about moving to at least RHEL7.
&gt; I would suggest using Quarkus. Since he's a beginner he's IMHO better off going with something a bit more established. I personally really like Quarkus, but a beginner is better of with something with a larger ecosystem/community.
Thanks! -Dawt.useSystemAAFontSettings=on solves the problem on i3!
Thanks, this works beautifully!
What company? Can I add it to the "used by" section ?
The rationale for throwing an exception on duplicates passed to `Set.of` is on slide 38 of my *Collections Refueled* talk, available here: https://stuartmarks.wordpress.com/2016/09/23/javaone-2016-sessions/ Briefly, if you think of these APIs like collection literals, where you're writing out all the elements in the source code, then having duplicate elements is most likely a programming error. To deduplicate a collection, use `Set.copyOf`. (All of the above applies to Map keys as well.)
Well, I considered a change to C# 7 years ago, and went through with it. It’s a far superior language. It’s Java, if Java was reasonably updated over the years and kept innovating. Don’t act like Oracle are good guys. They’re assholes, who did nothing with Java for years upon years, and now have a larger legal department than engineering. They’re a fucking law firm!
Thanks, this is an interesting blog. Did you think about other native Java approaches? For example, DataMelt project integrates many native Java deep learning packages. I can detect such Java packages using the Search tool: [https://jwork.org/dmelt/search/form.php?query=deep](https://jwork.org/dmelt/search/form.php?query=deep)
What's wrong with Maven support in Eclipse?
The entry on font rendering issues on the [NetBeans wiki](https://cwiki.apache.org/confluence/display/NETBEANS/Font+Rendering+Issues) has more information on this, Java 12 seems to have fixed it as well.
NetBeans has a good [Quickstart Tutorial](https://netbeans.apache.org/kb/docs/java/quickstart.html). To learn more you can click on "Get Help" on the [website](https://netbeans.apache.org). The most used shortcuts would probably be `Alt` + `Shift` + `F` to format your code automatically, `Ctrl` + `Shift` + `I` to fix imports, `Ctrl` + `Space` for code completion and `Alt` + `Enter` to apply NetBeans recommendations.
Quite incomplete as an article
If you want to play with something new I'm developing a framework to quickly set up a backend REST API. It uses a different approach and it doesn't generate code. It is not ready for production yet, but it uses Spring Boot for core features, such as DI, JDBC, the Web server and the OAuth2 framework. It doesn't use Hibernate/JPA instead but I have implemented a dedicated EntityManager (and a dedicated persistence manager). You can find it [here.](https://github.com/h4t0n/gemini) It is in early stage of development so suggestions (and contribution) are welcome.
I use both too but would like to hear why NB has better support for Gradle. I faced with strange bugs during syncing in Netbeans. While upstream dev (of NB Gradle plugin) helped me to debug issue I haven't resolved it to the end ((
Shift+F7 if you are not on Mac (i.e Windows/Linux).
&gt; JavaFX I just tried a maven JavaFX project and I get Fatal Error: Unable to find package java.lang in classpath or bootclasspath ------------------------------------------------------------- COMPILATION ERROR : ------------------------------------------------------------- An unknown compilation problem occurred
Sure, if you know how the magic trick works it's all just smoke and mirrors. Magic doesn't exist on this plane. I prefer well written APIs that do simple things you can expect the outcome of, ideally the documentation is brief. What other frameworks have you tried? What can you compare spring to?
When you have a complex build, IntelliJ sometimes just does the wrong thing because it tries to recreate the Gradle configuration in its own representation. NetBeans just goes through Gradle.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
So buying Sun when no one else wanted to, bringing out versions 7, 8, 9, 10, 11, 12, 13, turning the J3 joke into a proper UI toolkit that apparently no one cared to use, bringing MaximeVM into a proper mature product in the form of GraalVM, integrating AOT into OpenJDK a feature only available in commercial JDKs due to Sun's religious JIT pursuit, is doing nothing? I wonder how Java would look like if they actually did something.
It's a framework on top of a framework on top of a framework. Aren't you hitting diminishing returns with three layers of frameworks to quickly setup a rest service?
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
wqhich version of JDK you are using ? try 1.8
And hey, whatever you feel most comfortable with IS the best IDE to use.
Hey I'll ask.
Running on openjdk 12.0.2 and no, nothing about fonts has been fixed, still a pixelated mess unless that property is set.
Really poorly written too: &gt; Vaadin (pronounced “vadin”) is based on the Google Web Toolkit (it is used to display user interface elements and interact with the server on the client side), which adds complexity to the architecture of this framework.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yeah I want to try latest and greatest. Try a few projects and see how it works for you. I have JDKs 8-12 installed.
Bit outdated. Vaadin since version 10 dropped Google Web Toolkit (GWT) just over a year ago. Basically complete rework of the framework.
&gt; Sure, if you know how the magic trick works it's all just smoke and mirrors. It's not magic. It's dealing with cross-cutting-concerns. If you use libraries so you don't have to deal with this yourself you're just going to have to write it yourself. Generally people advocating against Spring just end up writing their own shittier version. If there's something you don't like; just don't use it. &gt; What other frameworks have you tried? What can you compare spring to? Most of the mainstream Java ones (Java EE, Vert.x, Micronaut, Quarkus to name a few), Go, ColdFusion, Asp.net, PHP.
You don't use the term magic at all in software development? Do you think people using the libraries you mentioned end up writing shittier versions, or just those that reinvent the wheel? It's a part of my workplace stack so we can't really just stop using it yet. For another generalization I've found that people advocating for spring end up writing a big complex chunk of slow tar, because they don't really know how to design without a framework. I've been doing this shit for 15 years, but no more than that.
That seems like a tortured way to do that.
Nostalgia.
Generally in my experience devs who complain about 'magic' simply don't understand it. Component scanning, aspect oriented programming, inversion of control, etc. are perfectly normal / common CS terms. Nothing Spring does is 'weird' or 'strange'; all of these have purposes and are just things that you have to understand. To a junior dev something relatively simple like IoC is quite hard to grasp. But just calling it 'magic' and avoiding it is simply a sure-fire way to get stuck as a junior job. So no, I generally have nothing I use that is 'magic' to me. If I don't understand it I work on understanding until I do. That's part of the job. You can't create software properly if major components of it are beyond your understanding. There's shittons of devs who don't work like that and just copy-paste shit from SO until it kinda sorta works. But that's simply not what my clients expect from me when they hire me.
&gt; suggestions (and contribution) are welcome. You're basically reinventing the consumer based contracts wheel, but poorly. That already exists, within and outside Spring. So sorry to be a spoilsport; but there's no way I'm going to let anyone use that over the standard Spring stuff.
Also [you're 25](https://old.reddit.com/r/selfimprovement/comments/cgkluo/pushing_through_a_quarter_life_crisis/eui8m2s/) so don't give me that bullshit about having 15 years of experience.
https://blogs.oracle.com/java-platform-group/the-future-of-javafx-and-other-java-client-roadmap-updates Staring with Java 11 , JavaFX is no longer part of JDK
No because I only use the spring things that I need. And I have the possibility to use for example custom spring controller or other features if I want. Using spring I don't need to handle anything about web server (I use the embeded one) or other stuff as spring security for example (I integrated OAuth2 with no problems). Of course I could use a slim framework for the project base, but I think that Spring is good if you use it well. For example I'm not including anything about spring JPA or Spring Data. Instead, I'm using spring jdbc that help me to interact with the database. I know also that Spring has a lot of feature and probably I'm including something that I will not use at all. But it is ok for me now. The goal is to create a full API (with documentation) on top of a known framework but without code generation (Spring JPA/Spring Data REST).
I get it but there are still Netbeans plugins and wizards for it - so they should still be working.
I started when I was 10 .. that happens in IT.
I started when I was 12 but I don't claim that as professional experience. I'm 39 now; do the math.
Do you mean that you prefer to have multiple *unrelated* projects in a single window, or that you want to split one effort into subprojects and IntelliJ doesn't seem to handle that well? If it's the latter, you can do that in IJ - the project is the overall container, and modules are the subprojects (every project has one module by default). &gt; I also like that it's one IDE that does EVERYTHING, so I can have projects in multiple languages open in the same IDE instead of launching additional (Jetbrains) IDEs to do other things. That's how IntelliJ works. IJ is the "everything plus the kitchen sink" IDE. The language specific IDEs are *mostly* just stripped-down versions of IntelliJ. (At least that's the intent... there are sometimes some minor differences in functionality.)
Recent versions of IntelliJ have been defaulting to delegate builds to Gradle itself. It still has to create IntelliJ modules in order to e.g. support code completion. But you can have it run the actual build through Gradle. Having said that, it still feels half-baked to me.
Netbeans compiles with Oracles JDK , it generates using internal libs , compiles with external. So you will need add JavaFX dependency.
Hmm ok, so maybe "magic" isn't the best term here. Were using an older version of spring, with lots of xml. It's hard too see how components tie together, so when it works we call it magic - because it's too big and complex of an application to understand it, the framework rules us and not the other way around. It's gotten out of hand, there are layers upon layers and spring features in between. The application is a behemoth and spring isn't helping. I'm sure it's possible to work through how spring works, but it's a pretty big investment just for one language and platform. I'd rather pick smaller frameworks for toolbox diversity. Agreed, SO copy paste never gets through the review process but I still see it from time to time. And it sticks out like a nail to your eye.
You do not have enough *comment* karma and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It is an IDE agnostic way to do it, because as far as I know the big 3 (IntelliJ, Eclipse, and Netbeans) all support gradle composite builds. I used to be a staunch single-project-per-window guy, gradle composite builds made me change my mind and now I logically group my projects in a composite build.
I don't claim it as professional experience either, because it's not. Do you ever feel like you want to change path? I'm doing security and development but not sure I want to be a developer for the rest of my life. At least not professionally. I'm interested in biology and psychology and would want something where I can draw benefit from my background..
&gt; Were using an older version of spring, with lots of xml. Please *please* don't use that shitty experience as a basis to comment on modern Spring. It really sucks for you that your company is stuck in 2008; but modern Spring development with Spring Boot is completely different. I'm sincere here; I really feel bad for you working on a codebase like that. Bean configuration in XML files is horrible. &gt; I'm sure it's possible to work through how spring works, but it's a pretty big investment just for one language and platform. It's by far the most used Java service framework. I'm a Java consultant (independent contractor) and all the Spring experience I have gained translates very well from project to project. Obviously there's a selection bias (I simply refuse projects with codebases that are pre-Java-8 for example), but IMHO it's definitely worth it.
This feature was added in [SLF4J 2.0.0-alpha0](https://www.slf4j.org/news.html). I thought it might make sense to post this here sice SLF4J is such a widely used dependency. In short: - `Supplier` support - Explicit `KeyValue` support to log out variables, backend can decide how to handle them - Multiple `Marker`s Example: // using classical API logger.debug("oldT={} newT={} Temperature changed.", newT, oldT); // using fluent API logger.atDebug().addKeyValue("oldT", oldT).addKeyValue("newT", newT).log("Temperature changed.");
You are right and it's unfair to project. I'm going to try out some modern spring and update my views, It's big in the industry and I need to know the basics at least. I'm really into the vertx/python asyncio/reactor type of projects so that's what I see myself going for in the future. Even if it means turning down a lot of offers. Yeah that's a good decision, I would never knowingly accept anything below that. Unfortunately we have some big parts still stuck on 1.6 and EE6.. Anyways, thank you for the discussion. Godspeed Redditor!
FYI: Spring also supports reactive programming nowadays ;)
I think that's the key difference, IntelliJ has built in assumptions about your project structure, whereas NetBeans doesn't. NetBeans just remembers the projects that you have opened together in project groups. Sometimes you want to look how previous projects did something, so you can just open them side by side to your current ones.
Thanks! looking forward to not have to lose my mind everytime someone mentions spring :)
It's there in the maven dependencies.
I partially agree with you, mine if of course an opinionated way of doing things. It is not generic in terms of the data structures. You must use the DSL and the generated APIs. But this allow to build APIs and meta-data that allow me to setup for example also the openapi documentation and the GUI. You could simply create some entities with the DSL and no code at all, on top of Spring.
OMG, just make this nonsense stop. We don't need a fluent API for logging. Talk about cluttering up the code, there are going to be people put that call on separate lines and then instead of a nice tidy single line logging statement you are going to end up with several lines per logging statement. Not everything needs a fluent API, they are handy for some things but logging isn't one of them. Just. Stop. It.
&gt;given how much the "community" contributes to OpenJDK and JEPs oracle refuses to accept open source contributions to either, instead demanding joint copyright. they're leaches, plain and simple
Eh, I don't think I agree that IntelliJ has built in assumptions... or at least, no more than any other IDE. At the end of the day, your IDE has to generate a compile-time classpath and run javac against a set of source files. That is what NetBeans calls a project and what IntelliJ calls a module. In both tools, you can have these compilation units reference each other. The only real difference is whether there's an ambient container (NetBeans) or an explicit container (IntelliJ) for these compilation units. I can understand the appeal of having all your projects available at all times. Personally, I prefer the scoping that you get via IntelliJ. When I use e.g. "Go To Class", I don't have to contend with a bunch of similarly-named classes that are unrelated to the project that I'm currently working on. You can always open additional top-level IntelliJ windows. So you *can* view IntelliJ projects side-by-side. Hey, your workflow is your workflow. If IntelliJ really doesn't support your workflow, then I can understand how that would be frustrating. But it might be more accommodating than you realize.
Just to clear it up, Intellij's free version (Community edition) does not work with certain frameworks, like Spring (Boot and MVC), where as Netbeans does. In totality, Netbeans, as a free product does a lot more when you equate it with Intellij's free offerings.
Yeah i was really trying to figure out how this would be useful. Im guessing they wanted to add the Suppliers part which is a great idea. But to do it without bloating everything else. This new stuff really needs to come with a caveat of "dont use this 'just because', use it because you have a complex logging statement that the basic methods dont cover"
Isn’t this useful for structured logging? Ops people are always asking for logs that export structures JSON
Let's add another logging dependency so we can have another dependency for our logging dependency,
It would be, but pretty much everywhere you want to use structured logging you really _should_ be sending events to an event bus instead. Logs are for debugging &amp; troubleshooting. Events are for carrying out actions.
This is not another logging dependency, it will be part of `slf4-api` itself.